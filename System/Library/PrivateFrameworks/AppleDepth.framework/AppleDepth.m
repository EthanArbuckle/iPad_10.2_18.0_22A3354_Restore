void sub_20B62C878(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B62CA60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_20B62CAF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B62CBD8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B62DEC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, void *a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_20B62E510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_20B62E8A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_20B62EAA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t PixelBufferUtils::componentsPerPixelForPixelFormat(PixelBufferUtils *this, uint64_t a2)
{
  unint64_t v4;
  int v5;
  int v6;
  void *v8;
  void *v9;
  unint64_t v10;
  float v11;
  void **v12;
  void *__p[2];
  char v14;

  v4 = 4;
  if ((int)this > 1380401728)
  {
    if ((int)this > 1717856626)
    {
      if ((int)this <= 1751411058)
      {
        if ((_DWORD)this == 1717856627)
          return 1;
        v5 = 1751410032;
      }
      else
      {
        if ((_DWORD)this == 1751411059 || (_DWORD)this == 1919365990)
          return 1;
        v5 = 1932996149;
      }
      goto LABEL_31;
    }
    if ((int)this > 1380411456)
    {
      if ((_DWORD)this == 1380411457)
        return v4;
      if ((_DWORD)this == 1647392359)
        return 1;
      v5 = 1717855600;
      goto LABEL_31;
    }
    if ((_DWORD)this == 1380401729)
      return v4;
    v6 = 1380410945;
LABEL_27:
    if ((_DWORD)this == v6)
      return v4;
    goto LABEL_38;
  }
  if ((int)this > 875704437)
  {
    if ((int)this > 1111970368)
    {
      if ((_DWORD)this == 1111970369)
        return v4;
      if ((_DWORD)this == 1278226488)
        return 1;
      v5 = 1278226536;
      goto LABEL_31;
    }
    if ((_DWORD)this == 875704438)
      goto LABEL_34;
    v6 = 1094862674;
    goto LABEL_27;
  }
  if ((int)this > 825437746)
  {
    if ((_DWORD)this != 825437747)
    {
      if ((_DWORD)this == 843264104)
        return 2;
      if ((_DWORD)this != 875704422)
        goto LABEL_38;
LABEL_34:
      if (a2)
        return 2;
      else
        return 1;
    }
    return 1;
  }
  if ((_DWORD)this == 32)
    return v4;
  v5 = 825306677;
LABEL_31:
  if ((_DWORD)this == v5)
    return 1;
LABEL_38:
  CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("BitsPerComponent"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    v10 = PixelBufferUtils::pixelSizeForPixelFormat(this, a2);
    objc_msgSend(v9, "floatValue");
    v4 = (unint64_t)(float)((float)v10 / ceilf(v11 * 0.125));

  }
  else
  {

    PixelBufferUtils::pixelFormatAsString((unint64_t)this, (char *)__p);
    if (v14 >= 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    NSLog(CFSTR("%s:%d - ERROR - pixel format %08x (\"%s\") not supported\n"), "componentsPerPixelForPixelFormat", 508, this, v12);
    if (v14 < 0)
      operator delete(__p[0]);
    return 0;
  }
  return v4;
}

void sub_20B62EDB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t PixelBufferUtils::planeCountForPixelFormat(PixelBufferUtils *this)
{
  int v2;
  uint64_t v3;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void **v9;
  void *__p[2];
  char v11;

  if ((int)this > 1380401728)
  {
    if ((int)this > 1717856626)
    {
      if ((int)this <= 1751411058)
      {
        if ((_DWORD)this == 1717856627)
          return 0;
        v2 = 1751410032;
      }
      else
      {
        if ((_DWORD)this == 1751411059)
          return 0;
        if ((_DWORD)this == 1919365990)
          return 3;
        v2 = 1932996149;
      }
    }
    else if ((int)this <= 1380411456)
    {
      if ((_DWORD)this == 1380401729)
        return 0;
      v2 = 1380410945;
    }
    else
    {
      if ((_DWORD)this == 1380411457 || (_DWORD)this == 1647392359)
        return 0;
      v2 = 1717855600;
    }
LABEL_29:
    if ((_DWORD)this != v2)
      goto LABEL_34;
    return 0;
  }
  if ((int)this > 875704437)
  {
    if ((int)this <= 1111970368)
    {
      if ((_DWORD)this == 875704438)
        return 2;
      v2 = 1094862674;
    }
    else
    {
      if ((_DWORD)this == 1111970369 || (_DWORD)this == 1278226488)
        return 0;
      v2 = 1278226536;
    }
    goto LABEL_29;
  }
  if ((int)this <= 825437746)
  {
    if ((_DWORD)this == 32)
      return 0;
    v2 = 825306677;
    goto LABEL_29;
  }
  if ((_DWORD)this == 825437747 || (_DWORD)this == 843264104)
    return 0;
  if ((_DWORD)this == 875704422)
    return 2;
LABEL_34:
  CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v5)
  {
    PixelBufferUtils::pixelFormatAsString((unint64_t)this, (char *)__p);
    if (v11 >= 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    NSLog(CFSTR("%s:%d - ERROR - pixel format %08x (\"%s\") not supported\n"), "planeCountForPixelFormat", 554, this, v9);
    if (v11 < 0)
      operator delete(__p[0]);
    return 0;
  }
  v6 = v5;
  objc_msgSend(v5, "objectForKeyedSubscript:", *MEMORY[0x24BDC5790]);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v7)
    v3 = objc_msgSend(v7, "count");
  else
    v3 = 0;

  return v3;
}

void sub_20B62F064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B62F080(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id findNetworkSupportingFile(NSString *a1, NSString *a2, NSString *a3, NSString *a4)
{
  NSString *v7;
  NSString *v8;
  NSString *v9;
  NSString *v10;
  void *v11;
  void *v12;
  void *v13;
  char v14;
  id v15;
  int v16;
  void *v17;
  uint64_t v18;
  void *v19;
  char v20;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  -[NSString stringByDeletingLastPathComponent](v8, "stringByDeletingLastPathComponent");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "stringByAppendingPathComponent:", v7);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "fileExistsAtPath:", v12);

  if ((v14 & 1) == 0)
  {
    v16 = !-[NSString isEqualToString:](v8, "isEqualToString:", v9);
    if (!v10)
      LOBYTE(v16) = 1;
    if ((v16 & 1) != 0)
    {
      v15 = 0;
      goto LABEL_10;
    }
    -[NSString stringByDeletingLastPathComponent](v10, "stringByDeletingLastPathComponent");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "stringByAppendingPathComponent:", v7);
    v18 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = objc_msgSend(v19, "fileExistsAtPath:", v18);

    if ((v20 & 1) == 0)
    {
      v15 = 0;
      v12 = (void *)v18;
      goto LABEL_10;
    }
    v12 = (void *)v18;
  }
  v15 = v12;
  v12 = v15;
LABEL_10:

  return v15;
}

void sub_20B62F1F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v5;

  _Unwind_Resume(a1);
}

void sub_20B62F568(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_20B62F628(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B62F704(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

NSString *findModel(NSString *a1, NSString *a2)
{
  NSString *v3;
  NSString *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  NSString *v14;
  NSString *v15;
  void *v16;
  void *v17;
  int v18;
  NSString *v19;
  void *v20;
  int v21;
  void *v23;
  uint8_t buf[4];
  NSString *v25;
  __int16 v26;
  NSString *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v3 = a1;
  v4 = a2;
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    v25 = v3;
    v26 = 2112;
    v27 = v4;
    _os_log_impl(&dword_20B62B000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "Searching for %@/%@*", buf, 0x16u);
  }
  objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "contentsOfDirectoryAtPath:error:", v3, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    v7 = (void *)MEMORY[0x24BDD1758];
    -[NSString stringByAppendingString:](v4, "stringByAppendingString:", CFSTR("-"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "predicateWithFormat:", CFSTR("(SELF == %@) || (SELF BEGINSWITH %@)"), v4, v8);
    v23 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v6, "filteredArrayUsingPredicate:", v23);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend(v9, "count"))
    {
      v15 = 0;
LABEL_17:

      goto LABEL_18;
    }
    objc_msgSend(v9, "objectAtIndexedSubscript:", 0);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@/%@/%@"), v3, v10, CFSTR("model.espresso.net"));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v12, "fileExistsAtPath:", v11);

    if (v13)
    {
      v14 = v11;
    }
    else
    {
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@/%@/%@"), v3, v10, CFSTR("model.mil"));
      v16 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = objc_msgSend(v17, "fileExistsAtPath:", v16);

      if (v18)
      {
        v14 = v16;
      }
      else
      {
        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@/%@/%@"), v3, v10, CFSTR("model.bundle"));
        v19 = (NSString *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v21 = objc_msgSend(v20, "fileExistsAtPath:", v19);

        if (!v21)
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138543362;
            v25 = v19;
            _os_log_error_impl(&dword_20B62B000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Folder exists but does not contain espresso network file (Looking for: %{public}@)", buf, 0xCu);
          }
          v15 = 0;
          goto LABEL_16;
        }
        v14 = v19;
      }
    }
    v19 = v14;
    v15 = v14;
LABEL_16:

    goto LABEL_17;
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138543362;
    v25 = v3;
    _os_log_error_impl(&dword_20B62B000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Failed getting content of directory: %{public}@", buf, 0xCu);
  }
  v15 = 0;
LABEL_18:

  return v15;
}

void sub_20B62FB34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

NSString *bundleE5mlIfNeeded(NSString *a1, NSString *a2, NSString *a3, unsigned int a4)
{
  NSString *v7;
  NSString *v8;
  NSString *v9;
  void *v10;
  int v11;
  NSObject *v12;
  os_log_type_t v13;
  NSString *v14;
  NSDictionary *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  id v19;
  void *v20;
  char v21;
  id v22;
  NSObject *v23;
  os_log_type_t v24;
  void *v25;
  _BYTE *v26;
  void *v27;
  int v28;
  void *v29;
  int v30;
  NSString *v31;
  NSObject *v32;
  os_log_type_t v33;
  NSObject *v34;
  os_log_type_t v35;
  NSObject *v36;
  os_log_type_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  int v44;
  NSString *v45;
  char v46;
  NSString *v48;
  NSString *v49;
  void *v50;
  void *v51;
  NSString *v52;
  NSString *v53;
  void *v54;
  void *v55;
  void *v56;
  NSString *v57;
  NSString *v58;
  _QWORD v59[2];
  uint64_t (*v60)(uint64_t);
  void *v61;
  id v62;
  NSString *v63;
  id v64;
  id v65;
  id v66;
  id v67;
  _BYTE buf[12];
  char v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  v7 = a1;
  v8 = a2;
  v9 = a3;
  -[NSString pathExtension](v7, "pathExtension");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "isEqualToString:", CFSTR("bundle"));

  if (!v11 && v9)
  {
    if (ADDebugUtilsADVerboseLogsEnabled)
    {
      if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
        goto LABEL_10;
      *(_WORD *)buf = 0;
      v12 = MEMORY[0x24BDACB70];
      v13 = OS_LOG_TYPE_DEFAULT;
    }
    else
    {
      if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
        goto LABEL_10;
      *(_WORD *)buf = 0;
      v12 = MEMORY[0x24BDACB70];
      v13 = OS_LOG_TYPE_INFO;
    }
    _os_log_impl(&dword_20B62B000, v12, v13, "model should be compiled for e5ml", buf, 2u);
LABEL_10:
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithContentsOfFile:", v9);
    v15 = (NSDictionary *)objc_claimAutoreleasedReturnValue();
    if (v15)
    {
      if (!a4 || (objc_msgSend(MEMORY[0x24BE086D8], "hasANE") & 1) != 0)
      {
        -[NSString stringByDeletingLastPathComponent](v7, "stringByDeletingLastPathComponent");
        v57 = (NSString *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x24BDD1880], "UUID");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "UUIDString");
        v56 = (void *)objc_claimAutoreleasedReturnValue();

        v17 = (void *)MEMORY[0x24BDD17C8];
        v18 = crc32ForFolder(v57);
        objc_msgSend(v17, "stringWithFormat:", CFSTR("crc32_%u_isANE_%d_espresso_%s"), v18, a4, espresso_get_version_string());
        v51 = (void *)objc_claimAutoreleasedReturnValue();
        -[NSString stringByAppendingPathComponent:](v8, "stringByAppendingPathComponent:");
        v55 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v55, "stringByAppendingPathComponent:", CFSTR("model.bundle"));
        v53 = (NSString *)objc_claimAutoreleasedReturnValue();
        -[NSString stringByAppendingPathComponent:](v8, "stringByAppendingPathComponent:", v56);
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v50, "stringByAppendingPathComponent:", CFSTR("model.bundle"));
        v58 = (NSString *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v50, "stringByAppendingPathComponent:", CFSTR("custom_options_net.plist"));
        v52 = (NSString *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
        v67 = 0;
        v54 = (void *)objc_claimAutoreleasedReturnValue();
        LODWORD(v17) = objc_msgSend(v54, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v8, 1, 0, &v67);
        v19 = v67;
        v20 = v19;
        if (!(_DWORD)v17
          || (v66 = v19,
              v21 = objc_msgSend(v54, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v55, 0, 0, &v66), v22 = v66, v20, v20 = v22, (v21 & 1) == 0)&& objc_msgSend(v22, "code") != 516)
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          {
            objc_msgSend(v20, "localizedDescription");
            v38 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)&buf[4] = v38;
            _os_log_error_impl(&dword_20B62B000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "failed to create folder structure needed for compilation. Error: %@", buf, 0xCu);

          }
          goto LABEL_24;
        }
        if (objc_msgSend(v22, "code") == 516)
        {
          if (ADDebugUtilsADVerboseLogsEnabled)
          {
            if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
              goto LABEL_44;
            *(_WORD *)buf = 0;
            v23 = MEMORY[0x24BDACB70];
            v24 = OS_LOG_TYPE_DEFAULT;
          }
          else
          {
            if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
              goto LABEL_46;
            *(_WORD *)buf = 0;
            v23 = MEMORY[0x24BDACB70];
            v24 = OS_LOG_TYPE_INFO;
          }
          _os_log_impl(&dword_20B62B000, v23, v24, "model already compiled or being compiled, no need to recompile", buf, 2u);
          if (ADDebugUtilsADVerboseLogsEnabled)
          {
LABEL_44:
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 134217984;
              *(_QWORD *)&buf[4] = 0x404E000000000000;
              v34 = MEMORY[0x24BDACB70];
              v35 = OS_LOG_TYPE_DEFAULT;
LABEL_48:
              _os_log_impl(&dword_20B62B000, v34, v35, "waiting for model folder to appear (timeout: %.0f seconds)", buf, 0xCu);
              goto LABEL_49;
            }
            goto LABEL_49;
          }
LABEL_46:
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 134217984;
            *(_QWORD *)&buf[4] = 0x404E000000000000;
            v34 = MEMORY[0x24BDACB70];
            v35 = OS_LOG_TYPE_INFO;
            goto LABEL_48;
          }
LABEL_49:
          if (waitForFolder(v53, 60.0))
          {
            if (ADDebugUtilsADVerboseLogsEnabled)
            {
              if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                v36 = MEMORY[0x24BDACB70];
                v37 = OS_LOG_TYPE_DEFAULT;
LABEL_57:
                _os_log_impl(&dword_20B62B000, v36, v37, "model folder found", buf, 2u);
              }
            }
            else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              v36 = MEMORY[0x24BDACB70];
              v37 = OS_LOG_TYPE_INFO;
              goto LABEL_57;
            }
            v14 = v53;
            goto LABEL_76;
          }
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)&buf[4] = v8;
            _os_log_error_impl(&dword_20B62B000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "timed out waiting for model folder. Consider removing folder %@ and try again.", buf, 0xCu);
          }
LABEL_24:
          v14 = 0;
LABEL_76:

          goto LABEL_77;
        }
        v59[0] = MEMORY[0x24BDAC760];
        v59[1] = 3221225472;
        v60 = ___Z18bundleE5mlIfNeededP8NSStringS0_S0_b_block_invoke;
        v61 = &unk_24C421648;
        v62 = v54;
        v63 = v8;
        v64 = v51;
        v65 = v55;
        objc_msgSend(v62, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v50, 1, 0, 0);
        v25 = (void *)MEMORY[0x24BDD17C8];
        ADCommonUtils::runtimePlatformANEProductString(buf);
        if (v69 >= 0)
          v26 = buf;
        else
          v26 = *(_BYTE **)buf;
        objc_msgSend(v25, "stringWithUTF8String:", v26);
        v49 = (NSString *)objc_claimAutoreleasedReturnValue();
        if (v69 < 0)
          operator delete(*(void **)buf);
        -[NSDictionary objectForKeyedSubscript:](v15, "objectForKeyedSubscript:", CFSTR("isProfiling"));
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v27, "BOOLValue"))
          v28 = -[NSString isEqualToString:](v49, "isEqualToString:", CFSTR("H14G"));
        else
          v28 = 0;

        if (!-[NSString hasSuffix:](v49, "hasSuffix:", CFSTR(".N301"))
          || (-[NSDictionary objectForKeyedSubscript:](v15, "objectForKeyedSubscript:", CFSTR("experimentalModelPlatformOverride")), v29 = (void *)objc_claimAutoreleasedReturnValue(), v30 = objc_msgSend(v29, "BOOLValue"), v29, !v30))
        {
LABEL_63:
          prepareAneFlags(v15, v49, v52, v28);
          v48 = (NSString *)objc_claimAutoreleasedReturnValue();
          if ((compileE5mlBundle(v7, v58, a4, v49, v52, v48) & 1) != 0)
          {
            objc_msgSend(v62, "removeItemAtPath:error:", v52, 0);
            objc_msgSend(v62, "enumeratorAtPath:", v58);
            v40 = (void *)objc_claimAutoreleasedReturnValue();
            while (1)
            {
              objc_msgSend(v40, "nextObject");
              v41 = (void *)objc_claimAutoreleasedReturnValue();
              v42 = v41;
              if (!v41)
              {
                objc_msgSend(v62, "moveItemAtPath:toPath:error:", v58, v53, 0);
                v14 = v53;
                goto LABEL_74;
              }
              objc_msgSend(v41, "pathExtension");
              v43 = (void *)objc_claimAutoreleasedReturnValue();
              v44 = objc_msgSend(v43, "isEqualToString:", CFSTR("hwx"));

              if (v44)
              {
                -[NSString stringByAppendingPathComponent:](v58, "stringByAppendingPathComponent:", v42);
                v45 = (NSString *)objc_claimAutoreleasedReturnValue();
                v46 = verifyMachoFlags(v45, v15);

                if ((v46 & 1) == 0)
                  break;
              }

            }
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_error_impl(&dword_20B62B000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "compiled model flags verification failed", buf, 2u);
            }

            v14 = 0;
LABEL_74:

          }
          else
          {
            v14 = 0;
          }

          v60((uint64_t)v59);
          goto LABEL_76;
        }
        if (ADDebugUtilsADVerboseLogsEnabled)
        {
          v31 = v49;
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)&buf[4] = v49;
            v32 = MEMORY[0x24BDACB70];
            v33 = OS_LOG_TYPE_DEFAULT;
LABEL_61:
            _os_log_impl(&dword_20B62B000, v32, v33, "platform is %@ but compiling to generic platform instead", buf, 0xCu);
          }
        }
        else
        {
          v31 = v49;
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)&buf[4] = v49;
            v32 = MEMORY[0x24BDACB70];
            v33 = OS_LOG_TYPE_INFO;
            goto LABEL_61;
          }
        }
        -[NSString stringByReplacingOccurrencesOfString:withString:](v31, "stringByReplacingOccurrencesOfString:withString:", CFSTR(".N301"), &stru_24C421AD8);
        v39 = objc_claimAutoreleasedReturnValue();

        v28 = 1;
        v49 = (NSString *)v39;
        goto LABEL_63;
      }
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_20B62B000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "no ANE found to compile for", buf, 2u);
      }
    }
    else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v9;
      _os_log_error_impl(&dword_20B62B000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "failed reading e5rt compilation arguments at %@", buf, 0xCu);
    }
    v14 = 0;
LABEL_77:

    goto LABEL_78;
  }
  v14 = v7;
LABEL_78:

  return v14;
}

void sub_20B6305EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,char a25,uint64_t a26,void (*a27)(char *),uint64_t a28,id a29,id a30,id a31,id a32)
{
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;

  a27(&a25);
  _Unwind_Resume(a1);
}

void sub_20B630B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void ADCommonUtils::runtimePlatformANEVersionString(_BYTE *a1@<X8>)
{
  id v3;
  const char *v4;
  size_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  id v10;

  if (!objc_msgSend(MEMORY[0x24BE086D8], "hasANE"))
  {
    a1[23] = 0;
    *a1 = 0;
    return;
  }
  objc_msgSend(MEMORY[0x24BE086D8], "aneSubType");
  v10 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "uppercaseString");
  v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v4 = (const char *)objc_msgSend(v3, "UTF8String");
  v5 = strlen(v4);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v7 = v5 | 7;
    v8 = v7 + 1;
    v9 = operator new(v7 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v8 | 0x8000000000000000;
    *(_QWORD *)a1 = v9;
    a1 = v9;
  }
  else
  {
    a1[23] = v5;
    if (!v5)
      goto LABEL_11;
  }
  memmove(a1, v4, v6);
LABEL_11:
  a1[v6] = 0;

}

void sub_20B630DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_20B631124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  void *v5;
  va_list va;

  va_start(va, a4);
  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);

  _Unwind_Resume(a1);
}

void sub_20B631338(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B631DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  void *v5;
  void *v6;
  va_list va;

  va_start(va, a4);
  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);

  _Unwind_Resume(a1);
}

void sub_20B631EA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B632014(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B6320C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B6321CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B63258C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  void *v24;
  void *v25;
  void *v26;

  if (a23 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void ADCommonUtils::runtimePlatformANEProductString(_BYTE *a1@<X8>)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  const char *v8;
  size_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  id v14;

  if (!objc_msgSend(MEMORY[0x24BE086D8], "hasANE"))
  {
    a1[23] = 0;
    *a1 = 0;
    return;
  }
  v3 = (void *)MEMORY[0x24BDD17C8];
  objc_msgSend(MEMORY[0x24BE086D8], "aneSubType");
  v14 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BE086D8], "aneSubTypeVariant");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BE086D8], "aneSubTypeProductVariant");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "stringWithFormat:", CFSTR("%@%@%@"), v14, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "uppercaseString");
  v7 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v8 = (const char *)objc_msgSend(v7, "UTF8String");
  v9 = strlen(v8);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v11 = v9 | 7;
    v12 = v11 + 1;
    v13 = operator new(v11 + 1);
    *((_QWORD *)a1 + 1) = v10;
    *((_QWORD *)a1 + 2) = v12 | 0x8000000000000000;
    *(_QWORD *)a1 = v13;
    a1 = v13;
  }
  else
  {
    a1[23] = v9;
    if (!v9)
      goto LABEL_11;
  }
  memmove(a1, v8, v10);
LABEL_11:
  a1[v10] = 0;

}

void sub_20B63279C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_20B633130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_20B633544(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B6337F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_20B633A4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_20B633C24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B633DCC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B633DDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B635E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{

  _Unwind_Resume(a1);
}

void sub_20B635F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  void *v13;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_20B6360F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;

  if (v14)
  _Unwind_Resume(a1);
}

void sub_20B636578(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void embedDepthMapUsingFourierEncoding<half>(__CVBuffer *a1, _QWORD *a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  size_t rowBytes;
  vImagePixelCount height;
  size_t v19;
  vImagePixelCount width;
  unint64_t v21;
  float v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  size_t v38;
  vImagePixelCount v39;
  size_t v40;
  vImagePixelCount v41;
  unint64_t v42;
  char *v43;
  float v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  size_t v57;
  vImagePixelCount v58;
  size_t v59;
  vImagePixelCount v60;
  unint64_t v61;
  char *v62;
  float v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  unint64_t v71;
  __CVBuffer *pixelBuffer;
  id v73;
  char *data;
  char *v75;
  vImagePixelCount v76;
  vImagePixelCount v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  vImage_Buffer v82;

  v73 = a4;
  v10 = objc_msgSend(v73, "data");
  v11 = objc_msgSend(v73, "batchBytes");
  v12 = objc_msgSend(v73, "channelBytes");
  v13 = objc_msgSend(v73, "channelBytes");
  v14 = objc_msgSend(v73, "rowBytes");
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  memset(&v82, 0, sizeof(v82));
  PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x24BDBF090], &v82);
  v15 = (char *)(v10 + v11 * a6 + v12 * a5);
  v16 = *a2;
  pixelBuffer = a1;
  v80 = a2;
  if (a2[1] != *a2)
  {
    rowBytes = v82.rowBytes;
    height = v82.height;
    v19 = v82.height * v82.rowBytes;
    if (v82.height && (width = v82.width) != 0)
    {
      v21 = 0;
      data = (char *)v82.data;
      v76 = v82.height * v82.rowBytes;
      v78 = v13;
      do
      {
        v22 = *(float *)(v16 + 4 * v21);
        bzero(v15, v19);
        v23 = 0;
        v24 = data;
        v25 = v15;
        do
        {
          v26 = 0;
          do
          {
            _H0 = *(_WORD *)&v24[2 * v26];
            __asm { FCVT            S0, H0 }
            if (_S0 != 0.0)
            {
              _S0 = sinf(v22 * _S0);
              __asm { FCVT            H0, S0 }
              *(_WORD *)&v15[2 * v26] = LOWORD(_S0);
            }
            ++v26;
          }
          while (width != v26);
          ++v23;
          v15 += v14;
          v24 += rowBytes;
        }
        while (v23 != height);
        ++v21;
        a2 = v80;
        v15 = &v25[v78];
        v16 = *v80;
        v19 = v76;
      }
      while (v21 < (uint64_t)(v80[1] - *v80) >> 2);
    }
    else
    {
      v34 = 0;
      do
      {
        bzero(v15, v19);
        ++v34;
        v15 += v13;
      }
      while (v34 < (uint64_t)(a2[1] - *a2) >> 2);
    }
  }
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
  v35 = objc_msgSend(v73, "channelBytes");
  v36 = objc_msgSend(v73, "rowBytes");
  CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
  memset(&v82, 0, sizeof(v82));
  PixelBufferUtils::asVImageBuffer(pixelBuffer, *MEMORY[0x24BDBF090], &v82);
  v37 = *a2;
  if (a2[1] == *a2)
  {
    v43 = v15;
  }
  else
  {
    v38 = v82.rowBytes;
    v39 = v82.height;
    v40 = v82.height * v82.rowBytes;
    if (v82.height && (v41 = v82.width) != 0)
    {
      v42 = 0;
      v75 = (char *)v82.data;
      v77 = v82.height * v82.rowBytes;
      v43 = v15;
      v79 = v35;
      do
      {
        v44 = *(float *)(v37 + 4 * v42);
        bzero(v43, v40);
        v45 = 0;
        v46 = v75;
        v47 = v43;
        do
        {
          v48 = 0;
          do
          {
            _H0 = *(_WORD *)&v46[2 * v48];
            __asm { FCVT            S0, H0 }
            if (_S0 != 0.0)
            {
              _S0 = cosf(v44 * _S0);
              __asm { FCVT            H0, S0 }
              *(_WORD *)&v43[2 * v48] = LOWORD(_S0);
            }
            ++v48;
          }
          while (v41 != v48);
          ++v45;
          v43 += v36;
          v46 += v38;
        }
        while (v45 != v39);
        ++v42;
        v43 = &v47[v79];
        v37 = *v80;
        v40 = v77;
      }
      while (v42 < (uint64_t)(v80[1] - *v80) >> 2);
    }
    else
    {
      v52 = 0;
      v43 = v15;
      do
      {
        bzero(v43, v40);
        ++v52;
        v43 += v35;
      }
      while (v52 < (uint64_t)(a2[1] - *a2) >> 2);
    }
  }
  v53 = v43;
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
  v54 = objc_msgSend(v73, "channelBytes");
  v55 = objc_msgSend(v73, "rowBytes");
  CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
  memset(&v82, 0, sizeof(v82));
  PixelBufferUtils::asVImageBuffer(pixelBuffer, *MEMORY[0x24BDBF090], &v82);
  v56 = *a3;
  if (a3[1] != *a3)
  {
    v57 = v82.rowBytes;
    v58 = v82.height;
    v59 = v82.height * v82.rowBytes;
    if (v82.height && (v60 = v82.width) != 0)
    {
      v61 = 0;
      v62 = (char *)v82.data;
      do
      {
        v63 = *(float *)(v56 + 4 * v61);
        bzero(v53, v59);
        v64 = 0;
        v65 = v62;
        v66 = v53;
        do
        {
          v67 = 0;
          do
          {
            _H0 = *(_WORD *)&v65[2 * v67];
            __asm { FCVT            S0, H0 }
            if (_S0 != 0.0)
            {
              _S0 = v63 * _S0;
              __asm { FCVT            H0, S0 }
              *(_WORD *)&v66[2 * v67] = LOWORD(_S0);
            }
            ++v67;
          }
          while (v60 != v67);
          ++v64;
          v66 += v55;
          v65 += v57;
        }
        while (v64 != v58);
        ++v61;
        v53 += v54;
        v56 = *a3;
      }
      while (v61 < (a3[1] - *a3) >> 2);
    }
    else
    {
      v71 = 0;
      do
      {
        bzero(v53, v59);
        ++v71;
        v53 += v54;
      }
      while (v71 < (a3[1] - *a3) >> 2);
    }
  }
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);

}

void sub_20B636AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11)
{

  _Unwind_Resume(a1);
}

void embedDepthMapUsingFourierEncoding<float>(__CVBuffer *a1, _QWORD *a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  size_t rowBytes;
  size_t v19;
  vImagePixelCount width;
  float *data;
  size_t v22;
  unint64_t v23;
  uint64_t v24;
  float *v25;
  float v26;
  char *v27;
  float *v28;
  float *v29;
  vImagePixelCount v30;
  float v31;
  float v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  size_t v37;
  size_t v38;
  vImagePixelCount v39;
  float *v40;
  unint64_t v41;
  float *v42;
  float *v43;
  float v44;
  char *v45;
  float *v46;
  float *v47;
  vImagePixelCount v48;
  float v49;
  float v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  size_t v54;
  vImagePixelCount v55;
  size_t v56;
  size_t v57;
  vImagePixelCount v58;
  float *v59;
  unint64_t v60;
  char *v61;
  float *v62;
  float *v63;
  float v64;
  float *v65;
  float *v66;
  vImagePixelCount v67;
  float v68;
  float v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  size_t v73;
  __int128 v74;
  uint64_t v75;
  float *v76;
  vImagePixelCount v77;
  float *v78;
  uint64_t v79;
  vImagePixelCount v80;
  float32x2_t v81;
  float32x2_t v82;
  float v83;
  float v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  __int128 v88;
  uint64_t v89;
  float *v90;
  char *v91;
  vImagePixelCount v92;
  char *v93;
  float *v94;
  uint64_t v95;
  vImagePixelCount v96;
  float32x2_t v97;
  float32x2_t v98;
  float v99;
  float v100;
  unint64_t v101;
  vImagePixelCount v102;
  char *v103;
  char *v104;
  uint64_t v105;
  char *v106;
  float v107;
  uint64_t v108;
  float *v109;
  char *v110;
  char *v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  float32x2_t v115;
  float32x2_t v116;
  int8x8_t v117;
  int8x8_t v118;
  float v119;
  __CVBuffer *pixelBuffer;
  uint64_t v121;
  uint64_t v122;
  id v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  vImagePixelCount v128;
  char *v129;
  char *v130;
  size_t v131;
  vImagePixelCount v132;
  _QWORD *v133;
  vImagePixelCount v135;
  vImagePixelCount v136;
  vImagePixelCount height;
  vImagePixelCount v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  char *v145;
  uint64_t v146;
  __int128 v147;
  __int128 v148;
  vImage_Buffer v149;

  v123 = a4;
  v10 = objc_msgSend(v123, "data");
  v11 = objc_msgSend(v123, "batchBytes");
  v12 = objc_msgSend(v123, "channelBytes");
  v131 = objc_msgSend(v123, "channelBytes");
  v13 = objc_msgSend(v123, "rowBytes");
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  memset(&v149, 0, sizeof(v149));
  PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x24BDBF090], &v149);
  v14 = v11 * a6;
  v15 = v12 * a5;
  v16 = (char *)(v10 + v11 * a6 + v12 * a5);
  v17 = *a2;
  pixelBuffer = a1;
  v133 = a2;
  if (a2[1] == *a2)
    goto LABEL_19;
  rowBytes = v149.rowBytes;
  v19 = v149.height * v149.rowBytes;
  height = v149.height;
  if (!v149.height || (width = v149.width) == 0)
  {
    v33 = 0;
    do
    {
      bzero(v16, v19);
      ++v33;
      v16 += v131;
    }
    while (v33 < (uint64_t)(a2[1] - *a2) >> 2);
    goto LABEL_19;
  }
  data = (float *)v149.data;
  v22 = v131;
  v128 = v149.height * v149.rowBytes;
  if (v149.width >= 4)
  {
    v72 = 0;
    v121 = v14 + v10 + v15;
    v135 = v149.width & 0xFFFFFFFFFFFFFFFELL;
    while (1)
    {
      v73 = v121 + v22 * v72;
      v125 = v72;
      v139 = *(float *)(v17 + 4 * v72);
      bzero(v16, v19);
      v75 = 0;
      v76 = data;
      v126 = v16;
      do
      {
        if (v73 + v13 * v75 - ((unint64_t)data + v75 * rowBytes) < 8)
        {
          v77 = 0;
          do
          {
LABEL_71:
            v84 = v76[v77];
            if (v84 != 0.0)
              *(float *)&v16[4 * v77] = sinf(v139 * v84);
            ++v77;
          }
          while (width != v77);
          goto LABEL_59;
        }
        v78 = data;
        v79 = 0;
        v80 = v135;
        do
        {
          v81 = *(float32x2_t *)&v76[v79];
          *(int8x8_t *)&v74 = vmvn_s8((int8x8_t)vceqz_f32(v81));
          v147 = v74;
          v82 = vmul_n_f32(v81, v139);
          v141 = v82.f32[0];
          v143 = sinf(v82.f32[1]);
          v83 = sinf(v141);
          *((_QWORD *)&v74 + 1) = *((_QWORD *)&v147 + 1);
          if ((v147 & 1) != 0)
            *(float *)&v16[v79 * 4] = v83;
          if ((BYTE4(v147) & 1) != 0)
            *(float *)&v16[v79 * 4 + 4] = v143;
          v79 += 2;
          v80 -= 2;
        }
        while (v80);
        v77 = v135;
        data = v78;
        if (width != v135)
          goto LABEL_71;
LABEL_59:
        ++v75;
        v16 += v13;
        v76 = (float *)((char *)v76 + rowBytes);
      }
      while (v75 != height);
      v72 = v125 + 1;
      v22 = v131;
      a2 = v133;
      v16 = &v126[v131];
      v17 = *v133;
      v19 = v128;
      if (v125 + 1 >= (unint64_t)((uint64_t)(v133[1] - *v133) >> 2))
        goto LABEL_19;
    }
  }
  v23 = 0;
  v24 = v14 + v15 + v10 + 8;
  v25 = (float *)((char *)v149.data + 8);
  do
  {
    v26 = *(float *)(v17 + 4 * v23);
    v27 = v16;
    bzero(v16, v19);
    v28 = v25;
    v29 = (float *)v24;
    v30 = height;
    do
    {
      v31 = *(v28 - 2);
      if (v31 != 0.0)
        *(v29 - 2) = sinf(v26 * v31);
      if (width != 1)
      {
        v32 = *(v28 - 1);
        if (v32 != 0.0)
          *(v29 - 1) = sinf(v26 * v32);
        if (width != 2 && *v28 != 0.0)
          *v29 = sinf(v26 * *v28);
      }
      v29 = (float *)((char *)v29 + v13);
      v28 = (float *)((char *)v28 + rowBytes);
      --v30;
    }
    while (v30);
    ++v23;
    a2 = v133;
    v16 = &v27[v131];
    v17 = *v133;
    v24 += v131;
    v19 = v128;
  }
  while (v23 < (uint64_t)(v133[1] - *v133) >> 2);
LABEL_19:
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
  v34 = objc_msgSend(v123, "channelBytes");
  v35 = objc_msgSend(v123, "rowBytes");
  CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
  memset(&v149, 0, sizeof(v149));
  PixelBufferUtils::asVImageBuffer(pixelBuffer, *MEMORY[0x24BDBF090], &v149);
  v36 = *a2;
  if (a2[1] == *a2)
    goto LABEL_37;
  v37 = v149.rowBytes;
  v38 = v149.height * v149.rowBytes;
  v132 = v149.height * v149.rowBytes;
  v138 = v149.height;
  if (!v149.height || (v39 = v149.width) == 0)
  {
    v51 = 0;
    do
    {
      bzero(v16, v132);
      ++v51;
      v16 += v34;
    }
    while (v51 < (uint64_t)(a2[1] - *a2) >> 2);
    goto LABEL_37;
  }
  v124 = v34;
  v40 = (float *)v149.data;
  if (v149.width >= 4)
  {
    v85 = 0;
    v136 = v149.width & 0xFFFFFFFFFFFFFFFELL;
    v127 = v16;
    v86 = v34;
    while (1)
    {
      v87 = &v127[v86 * v85];
      v122 = v85;
      v140 = *(float *)(v36 + 4 * v85);
      bzero(v16, v38);
      v89 = 0;
      v90 = v40;
      v130 = v16;
      v91 = v16;
      do
      {
        if ((unint64_t)(&v87[v35 * v89] - ((char *)v40 + v89 * v37)) < 8)
        {
          v92 = 0;
          do
          {
LABEL_88:
            v100 = v90[v92];
            if (v100 != 0.0)
              *(float *)&v91[4 * v92] = cosf(v140 * v100);
            ++v92;
          }
          while (v39 != v92);
          goto LABEL_76;
        }
        v93 = v87;
        v94 = v40;
        v95 = 0;
        v96 = v136;
        do
        {
          v97 = *(float32x2_t *)&v90[v95];
          *(int8x8_t *)&v88 = vmvn_s8((int8x8_t)vceqz_f32(v97));
          v148 = v88;
          v98 = vmul_n_f32(v97, v140);
          v142 = v98.f32[0];
          v144 = cosf(v98.f32[1]);
          v99 = cosf(v142);
          *((_QWORD *)&v88 + 1) = *((_QWORD *)&v148 + 1);
          if ((v148 & 1) != 0)
            *(float *)&v91[v95 * 4] = v99;
          if ((BYTE4(v148) & 1) != 0)
            *(float *)&v91[v95 * 4 + 4] = v144;
          v95 += 2;
          v96 -= 2;
        }
        while (v96);
        v92 = v136;
        v40 = v94;
        v87 = v93;
        if (v39 != v136)
          goto LABEL_88;
LABEL_76:
        ++v89;
        v91 += v35;
        v90 = (float *)((char *)v90 + v37);
      }
      while (v89 != v138);
      v85 = v122 + 1;
      v38 = v132;
      v86 = v124;
      v16 = &v130[v124];
      v36 = *v133;
      if (v122 + 1 >= (unint64_t)((uint64_t)(v133[1] - *v133) >> 2))
        goto LABEL_37;
    }
  }
  v41 = 0;
  v42 = (float *)(v16 + 8);
  v43 = (float *)((char *)v149.data + 8);
  do
  {
    v44 = *(float *)(v36 + 4 * v41);
    v45 = v16;
    bzero(v16, v38);
    v46 = v43;
    v47 = v42;
    v48 = v138;
    do
    {
      v49 = *(v46 - 2);
      if (v49 != 0.0)
        *(v47 - 2) = cosf(v44 * v49);
      if (v39 != 1)
      {
        v50 = *(v46 - 1);
        if (v50 != 0.0)
          *(v47 - 1) = cosf(v44 * v50);
        if (v39 != 2 && *v46 != 0.0)
          *v47 = cosf(v44 * *v46);
      }
      v47 = (float *)((char *)v47 + v35);
      v46 = (float *)((char *)v46 + v37);
      --v48;
    }
    while (v48);
    ++v41;
    v16 = &v45[v124];
    v38 = v132;
    v36 = *v133;
    v42 = (float *)((char *)v42 + v124);
  }
  while (v41 < (uint64_t)(v133[1] - *v133) >> 2);
LABEL_37:
  v129 = v16;
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
  v146 = objc_msgSend(v123, "channelBytes");
  v52 = objc_msgSend(v123, "rowBytes");
  CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
  memset(&v149, 0, sizeof(v149));
  PixelBufferUtils::asVImageBuffer(pixelBuffer, *MEMORY[0x24BDBF090], &v149);
  v53 = *a3;
  if (a3[1] == *a3)
    goto LABEL_55;
  v54 = v149.rowBytes;
  v55 = v149.height;
  v56 = v149.height * v149.rowBytes;
  v57 = v149.height * v149.rowBytes;
  if (!v149.height || (v58 = v149.width) == 0)
  {
    v70 = 0;
    v71 = v129;
    do
    {
      bzero(v71, v57);
      ++v70;
      v71 += v146;
    }
    while (v70 < (a3[1] - *a3) >> 2);
    goto LABEL_55;
  }
  v59 = (float *)v149.data;
  if (v149.width >= 4)
  {
    v101 = 0;
    v102 = v149.width & 0xFFFFFFFFFFFFFFFCLL;
    v145 = (char *)v149.data + 8;
    v103 = v129;
    v104 = v129;
    v105 = v146;
    while (1)
    {
      v106 = &v103[v105 * v101];
      v107 = *(float *)(v53 + 4 * v101);
      bzero(v104, v56);
      v108 = 0;
      v109 = v59;
      v110 = v145;
      v111 = v104;
      do
      {
        if ((unint64_t)(&v106[v52 * v108] - ((char *)v59 + v108 * v54)) < 0x10)
        {
          v112 = 0;
          do
          {
LABEL_109:
            v119 = v109[v112];
            if (v119 != 0.0)
              *(float *)&v111[4 * v112] = v107 * v119;
            ++v112;
          }
          while (v58 != v112);
          goto LABEL_93;
        }
        v113 = 0;
        v114 = v58 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          v116 = *(float32x2_t *)&v110[v113 - 8];
          v115 = *(float32x2_t *)&v110[v113];
          v117 = vmvn_s8((int8x8_t)vceqz_f32(v116));
          if ((v117.i8[0] & 1) != 0)
            *(float *)&v111[v113] = v107 * v116.f32[0];
          if ((v117.i8[4] & 1) != 0)
            *(float *)&v111[v113 + 4] = vmuls_lane_f32(v107, v116, 1);
          v118 = vmvn_s8((int8x8_t)vceqz_f32(v115));
          if ((v118.i8[0] & 1) != 0)
            *(float *)&v111[v113 + 8] = v107 * v115.f32[0];
          if ((v118.i8[4] & 1) != 0)
            *(float *)&v111[v113 + 12] = vmuls_lane_f32(v107, v115, 1);
          v113 += 16;
          v114 -= 4;
        }
        while (v114);
        v112 = v58 & 0xFFFFFFFFFFFFFFFCLL;
        if (v58 != v102)
          goto LABEL_109;
LABEL_93:
        ++v108;
        v111 += v52;
        v110 += v54;
        v109 = (float *)((char *)v109 + v54);
      }
      while (v108 != v55);
      ++v101;
      v105 = v146;
      v104 += v146;
      v53 = *a3;
      v103 = v129;
      v56 = v55 * v54;
      if (v101 >= (a3[1] - *a3) >> 2)
        goto LABEL_55;
    }
  }
  v60 = 0;
  v61 = v129;
  v62 = (float *)(v129 + 8);
  v63 = (float *)((char *)v149.data + 8);
  do
  {
    v64 = *(float *)(v53 + 4 * v60);
    bzero(v61, v56);
    v65 = v63;
    v66 = v62;
    v67 = v55;
    do
    {
      v68 = *(v65 - 2);
      if (v68 != 0.0)
        *(v66 - 2) = v64 * v68;
      if (v58 != 1)
      {
        v69 = *(v65 - 1);
        if (v69 != 0.0)
          *(v66 - 1) = v64 * v69;
        if (v58 != 2 && *v65 != 0.0)
          *v66 = v64 * *v65;
      }
      v66 = (float *)((char *)v66 + v52);
      v65 = (float *)((char *)v65 + v54);
      --v67;
    }
    while (v67);
    ++v60;
    v61 += v146;
    v53 = *a3;
    v62 = (float *)((char *)v62 + v146);
    v56 = v55 * v54;
  }
  while (v60 < (a3[1] - *a3) >> 2);
LABEL_55:
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);

}

void sub_20B637414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

_QWORD *std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 2)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 62)
      goto LABEL_22;
    v10 = v8 >> 1;
    if (v8 >> 1 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL;
    v12 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 62)
LABEL_22:
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v13 = 4 * v12;
    result = operator new(4 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 2;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[4 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

void std::vector<float>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
}

void sub_20B6375B8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

uint64_t INSTRUMENTS_END()
{
  return kdebug_trace();
}

uint64_t INSTRUMENTS_START()
{
  return kdebug_trace();
}

double *ImageUtils::IntegralImage<double>(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  double *result;
  double *v8;
  double v9;
  unsigned int v10;
  double v11;
  double *v12;
  int i;
  double v14;
  unsigned int v15;
  double v16;
  double v17;

  v4 = *(_DWORD *)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 20);
  v6 = 8 * v4 * (unint64_t)v5;
  result = *(double **)(a2 + 8);
  if (*(_QWORD *)(a2 + 32) < v6)
  {
    if (result && *(_BYTE *)(a2 + 24))
      MEMORY[0x20BD36480]();
    result = (double *)operator new[]();
    *(_QWORD *)(a2 + 8) = result;
    *(_QWORD *)(a2 + 32) = v6;
    *(_BYTE *)(a2 + 24) = 1;
  }
  *(_DWORD *)(a2 + 16) = v4;
  *(_DWORD *)(a2 + 20) = v5;
  if (v5)
  {
    v8 = *(double **)(a1 + 8);
    v9 = 0.0;
    v10 = v5;
    do
    {
      v11 = *v8++;
      v9 = v9 + v11;
      *result++ = v9;
      --v10;
    }
    while (v10);
    if (v4 >= 2)
    {
      v12 = *(double **)(a2 + 8);
      for (i = 1; i != v4; ++i)
      {
        v14 = 0.0;
        v15 = v5;
        do
        {
          v16 = *v8++;
          v14 = v14 + v16;
          v17 = *v12++;
          *result++ = v14 + v17;
          --v15;
        }
        while (v15);
      }
    }
  }
  return result;
}

double *ImageUtils::IntegralImage<float>(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  double *result;
  float *v8;
  double v9;
  unsigned int v10;
  float v11;
  double *v12;
  int i;
  double v14;
  unsigned int v15;
  float v16;
  double v17;

  v4 = *(_DWORD *)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 20);
  v6 = 8 * v4 * (unint64_t)v5;
  result = *(double **)(a2 + 8);
  if (*(_QWORD *)(a2 + 32) < v6)
  {
    if (result && *(_BYTE *)(a2 + 24))
      MEMORY[0x20BD36480]();
    result = (double *)operator new[]();
    *(_QWORD *)(a2 + 8) = result;
    *(_QWORD *)(a2 + 32) = v6;
    *(_BYTE *)(a2 + 24) = 1;
  }
  *(_DWORD *)(a2 + 16) = v4;
  *(_DWORD *)(a2 + 20) = v5;
  if (v5)
  {
    v8 = *(float **)(a1 + 8);
    v9 = 0.0;
    v10 = v5;
    do
    {
      v11 = *v8++;
      v9 = v9 + v11;
      *result++ = v9;
      --v10;
    }
    while (v10);
    if (v4 >= 2)
    {
      v12 = *(double **)(a2 + 8);
      for (i = 1; i != v4; ++i)
      {
        v14 = 0.0;
        v15 = v5;
        do
        {
          v16 = *v8++;
          v14 = v14 + v16;
          v17 = *v12++;
          *result++ = v17 + v14;
          --v15;
        }
        while (v15);
      }
    }
  }
  return result;
}

uint64_t ImageUtils::AdaptiveThreshold<double>(uint64_t a1, unsigned int a2, int a3, uint64_t a4, double a5)
{
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  unsigned int v25;
  double *v26;
  double *v27;
  int v28;
  double *v29;
  double v30;
  unsigned int v31;
  double v32;
  double v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  double v54;
  double *v55;
  int8x16_t *v56;
  double v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  unint64_t v61;
  unsigned int v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t result;
  float64x2_t v67;
  float64x2_t v68;
  uint64_t v69;
  uint64_t v70;
  float64x2_t v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  int v75;
  int8x16_t v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  int v81;
  int8x16_t *v82;
  float64x2_t *v83;
  uint64_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  double *v93;
  int v94;
  double v95;
  uint64_t v96;
  int v97;
  int8x16_t *v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  float64x2_t *v102;
  uint64_t v103;
  float64x2_t *v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t *v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int8x16_t *v129;
  float64x2_t *v130;
  uint64_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  unsigned int v140;
  double v141;
  uint64_t v142;
  int8x16_t v143;
  uint64_t v144;
  uint64_t v145;
  double v146;
  int v147;
  int8x16_t *v148;
  float64x2_t v149;
  float64x2_t *v150;
  uint64_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  double *v160;
  int v161;
  double v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  int8x16_t *v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  float64x2_t *v171;
  unint64_t v172;
  uint64_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  uint64_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t *v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  uint64_t v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unsigned int v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  double v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  float64x2_t v202;
  int8x16_t *v203;
  float64x2_t *v204;
  uint64_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  unsigned int v214;
  double v215;
  float64x2_t v216;
  float64x2_t v217;
  uint64_t v218;
  uint64_t v219;
  int8x16_t v220;
  int v221;
  int8x16_t *v222;
  float64x2_t *v223;
  uint64_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  double *v233;
  int v234;
  double v235;
  uint64_t v236;
  int v237;
  int8x16_t *v238;
  unsigned int v239;
  unsigned int v240;
  unsigned int v241;
  float64x2_t *v242;
  unint64_t v243;
  uint64_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  uint64_t v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t *v262;
  float64x2_t *v263;
  uint64_t v264;
  int v265;
  uint64_t v266;
  unsigned int v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  int8x16_t *v274;
  float64x2_t *v275;
  uint64_t v276;
  float64x2_t v277;
  float64x2_t v278;
  float64x2_t v279;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  unsigned int v285;
  double v286;
  uint64_t v287;
  uint64_t v288;
  double v289;
  unsigned int v290;
  double *v291;
  double *v292;
  int v293;
  double *v294;
  double v295;
  unsigned int v296;
  double v297;
  double v298;
  unsigned int v299;
  unsigned int v300;
  int v301;
  unsigned int v302;
  int v303;
  int v304;
  int v305;
  uint64_t v306;
  unsigned int v307;
  unsigned int v308;
  unint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  double v315;
  uint64_t v316;
  uint64_t v317;
  double v318;
  double v319;
  double *v320;
  int8x16_t *v321;
  double v322;
  uint64_t v323;
  unsigned int v324;
  uint64_t v325;
  unint64_t v326;
  unsigned int v327;
  unint64_t v328;
  unint64_t v329;
  unint64_t v330;
  float64x2_t v331;
  float64x2_t v332;
  uint64_t v333;
  uint64_t v334;
  float64x2_t v335;
  unsigned int v336;
  unsigned int v337;
  uint64_t v338;
  int v339;
  int8x16_t v340;
  int v341;
  unsigned int v342;
  unsigned int v343;
  unsigned int v344;
  int v345;
  int8x16_t *v346;
  float64x2_t *v347;
  uint64_t v348;
  float64x2_t v349;
  float64x2_t v350;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v353;
  float64x2_t v354;
  float64x2_t v355;
  float64x2_t v356;
  double *v357;
  int v358;
  double v359;
  uint64_t v360;
  int v361;
  int8x16_t *v362;
  unsigned int v363;
  unsigned int v364;
  unsigned int v365;
  float64x2_t *v366;
  uint64_t v367;
  float64x2_t *v368;
  float64x2_t v369;
  float64x2_t v370;
  float64x2_t v371;
  float64x2_t v372;
  float64x2_t v373;
  float64x2_t v374;
  float64x2_t v375;
  float64x2_t v376;
  float64x2_t *v377;
  float64x2_t v378;
  float64x2_t v379;
  float64x2_t v380;
  float64x2_t v381;
  float64x2_t v382;
  float64x2_t v383;
  float64x2_t v384;
  float64x2_t v385;
  uint64_t v386;
  int v387;
  uint64_t v388;
  unsigned int v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  int8x16_t *v393;
  float64x2_t *v394;
  uint64_t v395;
  float64x2_t v396;
  float64x2_t v397;
  float64x2_t v398;
  float64x2_t v399;
  float64x2_t v400;
  float64x2_t v401;
  float64x2_t v402;
  float64x2_t v403;
  unsigned int v404;
  double v405;
  uint64_t v406;
  int8x16_t v407;
  uint64_t v408;
  uint64_t v409;
  double v410;
  int v411;
  int8x16_t *v412;
  float64x2_t v413;
  float64x2_t *v414;
  uint64_t v415;
  float64x2_t v416;
  float64x2_t v417;
  float64x2_t v418;
  float64x2_t v419;
  float64x2_t v420;
  float64x2_t v421;
  float64x2_t v422;
  float64x2_t v423;
  double *v424;
  int v425;
  double v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  int v430;
  int8x16_t *v431;
  unsigned int v432;
  unsigned int v433;
  unsigned int v434;
  float64x2_t *v435;
  unint64_t v436;
  uint64_t v437;
  float64x2_t v438;
  float64x2_t v439;
  float64x2_t v440;
  float64x2_t v441;
  float64x2_t v442;
  float64x2_t v443;
  float64x2_t v444;
  float64x2_t v445;
  uint64_t v446;
  float64x2_t v447;
  float64x2_t v448;
  float64x2_t v449;
  float64x2_t v450;
  float64x2_t v451;
  float64x2_t v452;
  float64x2_t v453;
  float64x2_t v454;
  float64x2_t *v455;
  float64x2_t *v456;
  uint64_t v457;
  int v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  unsigned int v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  double v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  float64x2_t v472;
  int8x16_t *v473;
  float64x2_t *v474;
  uint64_t v475;
  float64x2_t v476;
  float64x2_t v477;
  float64x2_t v478;
  float64x2_t v479;
  float64x2_t v480;
  float64x2_t v481;
  float64x2_t v482;
  float64x2_t v483;
  unsigned int v484;
  double v485;
  float64x2_t v486;
  float64x2_t v487;
  uint64_t v488;
  uint64_t v489;
  int8x16_t v490;
  int v491;
  int8x16_t *v492;
  float64x2_t *v493;
  uint64_t v494;
  float64x2_t v495;
  float64x2_t v496;
  float64x2_t v497;
  float64x2_t v498;
  float64x2_t v499;
  float64x2_t v500;
  float64x2_t v501;
  float64x2_t v502;
  double *v503;
  int v504;
  double v505;
  uint64_t v506;
  int v507;
  int8x16_t *v508;
  unsigned int v509;
  unsigned int v510;
  unsigned int v511;
  float64x2_t *v512;
  unint64_t v513;
  uint64_t v514;
  float64x2_t v515;
  float64x2_t v516;
  float64x2_t v517;
  float64x2_t v518;
  float64x2_t v519;
  float64x2_t v520;
  float64x2_t v521;
  float64x2_t v522;
  uint64_t v523;
  float64x2_t v524;
  float64x2_t v525;
  float64x2_t v526;
  float64x2_t v527;
  float64x2_t v528;
  float64x2_t v529;
  float64x2_t v530;
  float64x2_t v531;
  float64x2_t *v532;
  float64x2_t *v533;
  uint64_t v534;
  int v535;
  uint64_t v536;
  unsigned int v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  int8x16_t *v544;
  float64x2_t *v545;
  uint64_t v546;
  float64x2_t v547;
  float64x2_t v548;
  float64x2_t v549;
  float64x2_t v550;
  float64x2_t v551;
  float64x2_t v552;
  float64x2_t v553;
  float64x2_t v554;
  unsigned int v555;
  double v556;
  uint64_t v557;
  uint64_t v558;
  unsigned int v559;
  unsigned int v560;
  uint64_t v561;
  uint64_t v562;
  int v563;
  int v564;
  unint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  int v570;
  int v571;
  uint64_t v572;
  uint64_t v573;
  int v574;
  int v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  unint64_t v582;
  unint64_t v583;

  v9 = *(_DWORD *)(a1 + 20);
  v10 = v9;
  if (!a3)
  {
    if (v9 <= a2 || (v17 = *(_DWORD *)(a1 + 16), v17 <= a2))
LABEL_287:
      __assert_rtn("AdaptiveThreshold", "ImageUtils.cpp", 67, "im.Cols() > meanKernelSize && im.Rows() > meanKernelSize");
    v18 = v17 * (unint64_t)v9;
    v19 = *(_DWORD *)(a1 + 16);
    v20 = *(_DWORD *)(a1 + 20);
    v21 = v19;
    if (*(_QWORD *)(a4 + 32) < v18)
    {
      if (*(_QWORD *)(a4 + 8) && *(_BYTE *)(a4 + 24))
        MEMORY[0x20BD36480]();
      *(_QWORD *)(a4 + 8) = operator new[]();
      *(_QWORD *)(a4 + 32) = v18;
      *(_BYTE *)(a4 + 24) = 1;
      v19 = *(_DWORD *)(a1 + 16);
      v10 = *(_DWORD *)(a1 + 20);
      v20 = v10;
      v21 = v19;
    }
    *(_DWORD *)(a4 + 16) = v17;
    *(_DWORD *)(a4 + 20) = v9;
    v565 = 8 * v19 * (unint64_t)v10;
    if (v565)
    {
      v16 = operator new[]();
      if (!v20)
      {
LABEL_153:
        v299 = a2 - 1;
        if (a2 - 1 >= v21 || v299 >= v20)
          __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
        v300 = *(_DWORD *)(a1 + 20);
        if (v300 - 1 >= v20)
          __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
        v301 = ~a2;
        v302 = v300 + ~a2;
        if (v302 >= v20)
          __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
        v303 = *(_DWORD *)(a1 + 16);
        v304 = v303 - 1;
        if (v303 - 1 >= v21)
          __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
        v560 = *(_DWORD *)(a1 + 16);
        v305 = v303 + v301;
        if (v303 + v301 >= v21)
          __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
        LODWORD(v306) = 0;
        v307 = a2 >> 1;
        v308 = (a2 >> 1) + (a2 & 1) - 1;
        v309 = v9 - (a2 >> 1);
        v569 = v17 - (a2 >> 1);
        v310 = v16 + 8 * v299;
        v311 = v20 * v299;
        v312 = *(uint64_t *)(v310 + 8 * v311);
        v313 = v16 + 8 * (v300 - 1);
        v314 = v16 + 8 * v302;
        v315 = *(double *)(v313 + 8 * v311) - *(double *)(v314 + 8 * v311);
        v558 = v304 * v20;
        v316 = 8 * v558;
        v317 = v305 * v20;
        v567 = v314;
        v318 = *(double *)(v310 + 8 * v558) - *(double *)(v310 + 8 * v317);
        v319 = *(double *)(v313 + 8 * v558)
             + *(double *)(v314 + 8 * v317)
             - *(double *)(v314 + 8 * v558)
             - *(double *)(v313 + 8 * v317);
        v320 = *(double **)(a1 + 8);
        v321 = *(int8x16_t **)(a4 + 8);
        v322 = (double)(a2 * a2);
        v323 = v16 + 8 * v311;
        v571 = ~v308;
        v324 = (a2 >> 1) + (a2 & 1);
        if (v324 <= 1)
          v325 = 1;
        else
          v325 = v324;
        v326 = ~v325 + v309;
        v327 = v325 - v324;
        if (v20 > v325 - v324)
          v327 = v20;
        v328 = v324 + v327 - v325;
        if (v326 >= v328)
          v326 = v328;
        LODWORD(v329) = v20 - (v325 + v307);
        if (v20 >= v325 + v307)
          v329 = v329;
        else
          v329 = 0;
        if (v326 >= v329)
          v330 = v329;
        else
          v330 = v326;
        result = v325 & 0xFFFFFFF0;
        v581 = 8 * result;
        v583 = v330;
        v331 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a5, 0);
        v332 = (float64x2_t)vdupq_lane_s64(v312, 0);
        if (((v330 + 1) & 0xF) != 0)
          v333 = (v330 + 1) & 0xF;
        else
          v333 = 16;
        v334 = v330 + 1 - v333;
        v577 = v334 + v325;
        v579 = v334;
        v575 = v325 + v334;
        v573 = 8 * v334;
        v335 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v315, 0);
        v336 = v20 - v20 * v324;
        v337 = v20 + v20 * v307;
        v562 = v333;
        v338 = ~v330 + v333;
        v564 = a2 & 1;
        v339 = -v324;
        v340.i64[0] = 0x101010101010101;
        v340.i64[1] = 0x101010101010101;
        v341 = 1;
        while (1)
        {
          v342 = v341;
          v343 = v336;
          v344 = v337;
          if (v325 <= 0xF)
            break;
          v346 = (int8x16_t *)((char *)v321 + result);
          v347 = (float64x2_t *)v320;
          v348 = v325 & 0xFFFFFFF0;
          do
          {
            v350 = v347[6];
            v349 = v347[7];
            v352 = v347[4];
            v351 = v347[5];
            v354 = v347[2];
            v353 = v347[3];
            v355 = *v347;
            v356 = v347[1];
            v347 += 8;
            *v321++ = vandq_s8(vuzp1q_s8(vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v332, vmulq_n_f64(vaddq_f64(v355, v331), v322)), (int32x4_t)vcgeq_f64(v332, vmulq_n_f64(vaddq_f64(v356, v331), v322))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v332, vmulq_n_f64(vaddq_f64(v354, v331), v322)), (int32x4_t)vcgeq_f64(v332, vmulq_n_f64(vaddq_f64(v353, v331), v322))))), vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(
                                                                          v332,
                                                                          vmulq_n_f64(vaddq_f64(v352, v331), v322)),
                                                             (int32x4_t)vcgeq_f64(v332, vmulq_n_f64(vaddq_f64(v351, v331), v322))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v332, vmulq_n_f64(vaddq_f64(v350, v331), v322)), (int32x4_t)vcgeq_f64(v332, vmulq_n_f64(vaddq_f64(v349, v331), v322)))))), v340);
            v348 -= 16;
          }
          while (v348);
          v320 = (double *)((char *)v320 + v581);
          v345 = v325 & 0xFFFFFFF0;
          v357 = v320;
          if (result != v325)
            goto LABEL_183;
LABEL_185:
          if (v325 >= v309)
          {
            v320 = v357;
            v363 = v325;
            if (v325 < v300)
              goto LABEL_198;
          }
          else
          {
            if (v583 >= 0x10)
            {
              v362 = (int8x16_t *)((char *)v346 + v579);
              v364 = v325 + v307;
              v365 = v325 - v307 - v564;
              v366 = (float64x2_t *)v357;
              v367 = v338;
              do
              {
                v368 = (float64x2_t *)(v323 + 8 * v364);
                v370 = *v368;
                v369 = v368[1];
                v371 = v368[2];
                v372 = v368[3];
                v373 = v368[4];
                v374 = v368[5];
                v375 = v368[6];
                v376 = v368[7];
                v377 = (float64x2_t *)(v323 + 8 * v365);
                v379 = v366[6];
                v378 = v366[7];
                v381 = v366[4];
                v380 = v366[5];
                v383 = v366[2];
                v382 = v366[3];
                v385 = *v366;
                v384 = v366[1];
                v366 += 8;
                *v346++ = vandq_s8(vuzp1q_s8(vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(vsubq_f64(v370, *v377), vmulq_n_f64(vaddq_f64(v385, v331), v322)), (int32x4_t)vcgeq_f64(vsubq_f64(v369, v377[1]), vmulq_n_f64(vaddq_f64(v384, v331), v322))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(vsubq_f64(v371, v377[2]), vmulq_n_f64(vaddq_f64(v383, v331), v322)), (int32x4_t)vcgeq_f64(vsubq_f64(v372, v377[3]), vmulq_n_f64(vaddq_f64(v382, v331), v322))))), vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(
                                                                              vsubq_f64(v373, v377[4]),
                                                                              vmulq_n_f64(vaddq_f64(v381, v331), v322)),
                                                                 (int32x4_t)vcgeq_f64(vsubq_f64(v374, v377[5]), vmulq_n_f64(vaddq_f64(v380, v331), v322))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(vsubq_f64(v375, v377[6]), vmulq_n_f64(vaddq_f64(v379, v331), v322)), (int32x4_t)vcgeq_f64(vsubq_f64(v376, v377[7]), vmulq_n_f64(vaddq_f64(v378, v331), v322)))))), v340);
                v365 += 16;
                v364 += 16;
                v367 += 16;
              }
              while (v367);
              v357 = (double *)((char *)v357 + v573);
              v360 = v577;
              v361 = v575;
            }
            else
            {
              v360 = v325;
              v361 = v325;
              v362 = v346;
            }
            v386 = 0;
            v387 = v307 + v361;
            v388 = v323 + 8 * (v307 + v361);
            v389 = v339 + v361;
            v320 = v357;
            do
            {
              if (v387 + (int)v386 >= v20)
                __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
              if (v389 + v386 >= v20)
                __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
              v362->i8[v386] = (v357[v386] + a5) * v322 > *(double *)(v388 + 8 * v386)
                                                        - *(double *)(v323 + 8 * v389 + 8 * v386);
              ++v320;
              v363 = v360 + ++v386;
            }
            while (v360 + v386 < v309);
            v346 = (int8x16_t *)((char *)v362 + v386);
            if (v363 < v300)
            {
LABEL_198:
              v390 = v300 + ~v363;
              if (v390 <= 0xE)
                goto LABEL_202;
              v391 = v390 + 1;
              v392 = (v390 + 1) & 0x1FFFFFFF0;
              v363 += v392;
              v393 = v346;
              v394 = (float64x2_t *)v320;
              v395 = v392;
              do
              {
                v397 = v394[6];
                v396 = v394[7];
                v399 = v394[4];
                v398 = v394[5];
                v401 = v394[2];
                v400 = v394[3];
                v402 = *v394;
                v403 = v394[1];
                v394 += 8;
                *v393++ = vandq_s8(vuzp1q_s8(vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v335, vmulq_n_f64(vaddq_f64(v402, v331), v322)), (int32x4_t)vcgeq_f64(v335, vmulq_n_f64(vaddq_f64(v403, v331), v322))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v335, vmulq_n_f64(vaddq_f64(v401, v331), v322)), (int32x4_t)vcgeq_f64(v335, vmulq_n_f64(vaddq_f64(v400, v331), v322))))), vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(
                                                                              v335,
                                                                              vmulq_n_f64(vaddq_f64(v399, v331), v322)),
                                                                 (int32x4_t)vcgeq_f64(v335, vmulq_n_f64(vaddq_f64(v398, v331), v322))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v335, vmulq_n_f64(vaddq_f64(v397, v331), v322)), (int32x4_t)vcgeq_f64(v335, vmulq_n_f64(vaddq_f64(v396, v331), v322)))))), v340);
                v395 -= 16;
              }
              while (v395);
              v346 = (int8x16_t *)((char *)v346 + v392);
              v320 += v392;
              v321 = v346;
              if (v391 != v392)
              {
LABEL_202:
                v404 = v300 - v363;
                v321 = v346;
                do
                {
                  v405 = *v320++;
                  v321->i8[0] = (v405 + a5) * v322 > v315;
                  v321 = (int8x16_t *)((char *)v321 + 1);
                  --v404;
                }
                while (v404);
              }
              goto LABEL_177;
            }
          }
          v321 = v346;
LABEL_177:
          LODWORD(v306) = v306 + 1;
          v341 = v342 + 1;
          v336 = v343 + v20;
          v337 = v344 + v20;
          if (v306 > v308)
          {
            v406 = v569;
            if (v306 < v569)
            {
              v306 = v342;
              v407.i64[0] = 0x101010101010101;
              v407.i64[1] = 0x101010101010101;
              while (1)
              {
                if (v307 + v306 >= v21)
                  __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
                if ((int)v306 + v571 >= v21)
                  __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
                v408 = (v307 + (_DWORD)v306) * v20;
                v409 = ((_DWORD)v306 + v571) * v20;
                v410 = *(double *)(v310 + 8 * v408) - *(double *)(v310 + 8 * v409);
                if (v325 <= 0xF)
                  break;
                v412 = (int8x16_t *)((char *)v321 + result);
                v413 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v410, 0);
                v414 = (float64x2_t *)v320;
                v415 = v325 & 0xFFFFFFF0;
                do
                {
                  v417 = v414[6];
                  v416 = v414[7];
                  v419 = v414[4];
                  v418 = v414[5];
                  v421 = v414[2];
                  v420 = v414[3];
                  v422 = *v414;
                  v423 = v414[1];
                  v414 += 8;
                  *v321++ = vandq_s8(vuzp1q_s8(vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v413, vmulq_n_f64(vaddq_f64(v422, v331), v322)), (int32x4_t)vcgeq_f64(v413, vmulq_n_f64(vaddq_f64(v423, v331), v322))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v413, vmulq_n_f64(vaddq_f64(v421, v331), v322)), (int32x4_t)vcgeq_f64(v413, vmulq_n_f64(vaddq_f64(v420, v331), v322))))), vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(
                                                                                v413,
                                                                                vmulq_n_f64(vaddq_f64(v419, v331), v322)),
                                                                   (int32x4_t)vcgeq_f64(v413, vmulq_n_f64(vaddq_f64(v418, v331), v322))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v413, vmulq_n_f64(vaddq_f64(v417, v331), v322)), (int32x4_t)vcgeq_f64(v413, vmulq_n_f64(vaddq_f64(v416, v331), v322)))))), v407);
                  v415 -= 16;
                }
                while (v415);
                v320 = (double *)((char *)v320 + v581);
                v411 = v325 & 0xFFFFFFF0;
                v424 = v320;
                if (result != v325)
                  goto LABEL_216;
LABEL_218:
                v427 = 8 * v408;
                v428 = 8 * v409;
                if (v325 >= v309)
                {
                  v320 = v424;
                  v432 = v325;
                  if (v325 < v300)
                    goto LABEL_231;
                }
                else
                {
                  if (v583 >= 0x10)
                  {
                    v431 = (int8x16_t *)((char *)v412 + v579);
                    v433 = v325 + v307;
                    v434 = v325 - v307 - v564;
                    v435 = (float64x2_t *)v424;
                    v436 = ~v583 + v562;
                    do
                    {
                      v437 = v16 + 8 * v433;
                      v439 = *(float64x2_t *)(v437 + v427 + 32);
                      v438 = *(float64x2_t *)(v437 + v427 + 48);
                      v441 = *(float64x2_t *)(v437 + v427);
                      v440 = *(float64x2_t *)(v437 + v427 + 16);
                      v442 = *(float64x2_t *)(v437 + v427 + 64);
                      v443 = *(float64x2_t *)(v437 + v427 + 80);
                      v444 = *(float64x2_t *)(v437 + v427 + 96);
                      v445 = *(float64x2_t *)(v437 + v427 + 112);
                      v446 = v16 + 8 * v434;
                      v448 = *(float64x2_t *)(v446 + v427 + 32);
                      v447 = *(float64x2_t *)(v446 + v427 + 48);
                      v450 = *(float64x2_t *)(v446 + v427);
                      v449 = *(float64x2_t *)(v446 + v427 + 16);
                      v451 = *(float64x2_t *)(v446 + v427 + 64);
                      v452 = *(float64x2_t *)(v446 + v427 + 80);
                      v453 = *(float64x2_t *)(v446 + v427 + 96);
                      v454 = *(float64x2_t *)(v446 + v427 + 112);
                      v455 = (float64x2_t *)(v437 + v428);
                      v456 = (float64x2_t *)(v446 + v428);
                      *v412++ = vandq_s8(vuzp1q_s8(vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(vaddq_f64(vsubq_f64(vsubq_f64(v441, v450), *v455), *v456), vmulq_n_f64(vaddq_f64(*v435, v331), v322)), (int32x4_t)vcgeq_f64(vaddq_f64(vsubq_f64(vsubq_f64(v440, v449), v455[1]), v456[1]), vmulq_n_f64(
                                                                                      vaddq_f64(v435[1], v331),
                                                                                      v322))),
                                                          (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(vaddq_f64(vsubq_f64(vsubq_f64(v439, v448), v455[2]), v456[2]), vmulq_n_f64(vaddq_f64(v435[2], v331), v322)), (int32x4_t)vcgeq_f64(vaddq_f64(vsubq_f64(vsubq_f64(v438, v447), v455[3]), v456[3]), vmulq_n_f64(vaddq_f64(v435[3], v331), v322))))), vmvnq_s8((int8x16_t)vuzp1q_s16(
                                                          (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(vaddq_f64(vsubq_f64(vsubq_f64(v442, v451), v455[4]), v456[4]), vmulq_n_f64(vaddq_f64(v435[4], v331), v322)), (int32x4_t)vcgeq_f64(vaddq_f64(vsubq_f64(vsubq_f64(v443, v452), v455[5]), v456[5]), vmulq_n_f64(vaddq_f64(v435[5], v331), v322))), (int16x8_t)vuzp1q_s32(
                                                                       (int32x4_t)vcgeq_f64(vaddq_f64(vsubq_f64(vsubq_f64(v444, v453), v455[6]), v456[6]), vmulq_n_f64(vaddq_f64(v435[6], v331), v322)), (int32x4_t)vcgeq_f64(vaddq_f64(vsubq_f64(vsubq_f64(v445, v454), v455[7]), v456[7]), vmulq_n_f64(vaddq_f64(v435[7], v331), v322)))))), v407);
                      v435 += 8;
                      v434 += 16;
                      v433 += 16;
                      v436 += 16;
                    }
                    while (v436);
                    v424 = (double *)((char *)v424 + v573);
                    v429 = v577;
                    v430 = v575;
                  }
                  else
                  {
                    v429 = v325;
                    v430 = v325;
                    v431 = v412;
                  }
                  v457 = 0;
                  v458 = v307 + v430;
                  v459 = 8 * (v307 + v430);
                  v460 = v16 + 8 * v343;
                  v461 = v460 + v459;
                  v462 = v16 + 8 * v344;
                  v463 = v462 + v459;
                  v464 = v430 - (v307 + v564);
                  v465 = 8 * v464;
                  v466 = v460 + v465;
                  v467 = v462 + v465;
                  v320 = v424;
                  do
                  {
                    if (v458 + (int)v457 >= v20)
                      __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
                    if (v464 + v457 >= v20)
                      __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
                    v431->i8[v457] = (v424[v457] + a5) * v322 > *(double *)(v463 + 8 * v457)
                                                              - *(double *)(v467 + 8 * v457)
                                                              - *(double *)(v461 + 8 * v457)
                                                              + *(double *)(v466 + 8 * v457);
                    ++v320;
                    v432 = v429 + ++v457;
                  }
                  while (v429 + v457 < v309);
                  v412 = (int8x16_t *)((char *)v431 + v457);
                  v406 = v569;
                  if (v432 < v300)
                  {
LABEL_231:
                    v468 = *(double *)(v16 + 8 * (v300 - 1) + v427)
                         - *(double *)(v567 + v427)
                         - *(double *)(v16 + 8 * (v300 - 1) + v428)
                         + *(double *)(v567 + v428);
                    v469 = v300 + ~v432;
                    if (v469 < 0xF)
                      goto LABEL_235;
                    v470 = v469 + 1;
                    v471 = v470 & 0x1FFFFFFF0;
                    v432 += v470 & 0xFFFFFFF0;
                    v472 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v468, 0);
                    v473 = v412;
                    v474 = (float64x2_t *)v320;
                    v475 = v470 & 0x1FFFFFFF0;
                    do
                    {
                      v477 = v474[6];
                      v476 = v474[7];
                      v479 = v474[4];
                      v478 = v474[5];
                      v481 = v474[2];
                      v480 = v474[3];
                      v482 = *v474;
                      v483 = v474[1];
                      v474 += 8;
                      *v473++ = vandq_s8(vuzp1q_s8(vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v472, vmulq_n_f64(vaddq_f64(v482, v331), v322)), (int32x4_t)vcgeq_f64(v472, vmulq_n_f64(vaddq_f64(v483, v331), v322))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v472, vmulq_n_f64(vaddq_f64(v481, v331), v322)),
                                                                       (int32x4_t)vcgeq_f64(v472, vmulq_n_f64(vaddq_f64(v480, v331), v322))))), vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v472, vmulq_n_f64(vaddq_f64(v479, v331), v322)), (int32x4_t)vcgeq_f64(v472, vmulq_n_f64(vaddq_f64(v478, v331), v322))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v472,
                                                                                    vmulq_n_f64(vaddq_f64(v477, v331), v322)), (int32x4_t)vcgeq_f64(v472, vmulq_n_f64(vaddq_f64(v476, v331), v322)))))), v407);
                      v475 -= 16;
                    }
                    while (v475);
                    v412 = (int8x16_t *)((char *)v412 + v471);
                    v320 += v470 & 0x1FFFFFFF0;
                    v321 = v412;
                    if (v470 != v471)
                    {
LABEL_235:
                      v484 = v300 - v432;
                      v321 = v412;
                      do
                      {
                        v485 = *v320++;
                        v321->i8[0] = (v485 + a5) * v322 > v468;
                        v321 = (int8x16_t *)((char *)v321 + 1);
                        --v484;
                      }
                      while (v484);
                    }
                    goto LABEL_208;
                  }
                }
                v321 = v412;
LABEL_208:
                ++v306;
                v343 += v20;
                v344 += v20;
                if (v306 == v406)
                  goto LABEL_238;
              }
              v411 = 0;
              v412 = v321;
LABEL_216:
              v425 = v325 - v411;
              v424 = v320;
              do
              {
                v426 = *v424++;
                v412->i8[0] = (v426 + a5) * v322 > v410;
                v412 = (int8x16_t *)((char *)v412 + 1);
                --v425;
              }
              while (v425);
              goto LABEL_218;
            }
LABEL_238:
            if (v306 >= v560)
              goto LABEL_268;
            v486 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v318, 0);
            v487 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v319, 0);
            v488 = v16 + 8 * v317;
            v489 = v16 + 8 * v558;
            v490.i64[0] = 0x101010101010101;
            v490.i64[1] = 0x101010101010101;
            while (2)
            {
              if (v325 <= 0xF)
              {
                v491 = 0;
                v492 = v321;
                goto LABEL_246;
              }
              v492 = (int8x16_t *)((char *)v321 + result);
              v493 = (float64x2_t *)v320;
              v494 = v325 & 0xFFFFFFF0;
              do
              {
                v496 = v493[6];
                v495 = v493[7];
                v498 = v493[4];
                v497 = v493[5];
                v500 = v493[2];
                v499 = v493[3];
                v501 = *v493;
                v502 = v493[1];
                v493 += 8;
                *v321++ = vandq_s8(vuzp1q_s8(vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v486, vmulq_n_f64(vaddq_f64(v501, v331), v322)), (int32x4_t)vcgeq_f64(v486, vmulq_n_f64(vaddq_f64(v502, v331), v322))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v486, vmulq_n_f64(vaddq_f64(v500, v331), v322)), (int32x4_t)vcgeq_f64(v486, vmulq_n_f64(vaddq_f64(v499, v331), v322))))), vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(
                                                                              v486,
                                                                              vmulq_n_f64(vaddq_f64(v498, v331), v322)),
                                                                 (int32x4_t)vcgeq_f64(v486, vmulq_n_f64(vaddq_f64(v497, v331), v322))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v486, vmulq_n_f64(vaddq_f64(v496, v331), v322)), (int32x4_t)vcgeq_f64(v486, vmulq_n_f64(vaddq_f64(v495, v331), v322)))))), v490);
                v494 -= 16;
              }
              while (v494);
              v320 = (double *)((char *)v320 + v581);
              v491 = v325 & 0xFFFFFFF0;
              v503 = v320;
              if (result != v325)
              {
LABEL_246:
                v504 = v325 - v491;
                v503 = v320;
                do
                {
                  v505 = *v503++;
                  v492->i8[0] = (v505 + a5) * v322 > v318;
                  v492 = (int8x16_t *)((char *)v492 + 1);
                  --v504;
                }
                while (v504);
              }
              if (v325 >= v309)
              {
                v320 = v503;
                v509 = v325;
                if (v325 < v300)
                  goto LABEL_261;
              }
              else
              {
                if (v583 >= 0x10)
                {
                  v508 = (int8x16_t *)((char *)v492 + v579);
                  v510 = v325 + v307;
                  v511 = v325 - v307 - v564;
                  v512 = (float64x2_t *)v503;
                  v513 = ~v583 + v562;
                  do
                  {
                    v514 = v16 + 8 * v510;
                    v516 = *(float64x2_t *)(v514 + v316 + 32);
                    v515 = *(float64x2_t *)(v514 + v316 + 48);
                    v518 = *(float64x2_t *)(v514 + 8 * v558);
                    v517 = *(float64x2_t *)(v514 + v316 + 16);
                    v519 = *(float64x2_t *)(v514 + v316 + 64);
                    v520 = *(float64x2_t *)(v514 + v316 + 80);
                    v521 = *(float64x2_t *)(v514 + v316 + 96);
                    v522 = *(float64x2_t *)(v514 + v316 + 112);
                    v523 = v16 + 8 * v511;
                    v525 = *(float64x2_t *)(v523 + v316 + 32);
                    v524 = *(float64x2_t *)(v523 + v316 + 48);
                    v527 = *(float64x2_t *)(v523 + 8 * v558);
                    v526 = *(float64x2_t *)(v523 + v316 + 16);
                    v528 = *(float64x2_t *)(v523 + v316 + 64);
                    v529 = *(float64x2_t *)(v523 + v316 + 80);
                    v530 = *(float64x2_t *)(v523 + v316 + 96);
                    v531 = *(float64x2_t *)(v523 + v316 + 112);
                    v532 = (float64x2_t *)(v514 + 8 * v317);
                    v533 = (float64x2_t *)(v523 + 8 * v317);
                    *v492++ = vandq_s8(vuzp1q_s8(vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(vaddq_f64(vsubq_f64(vsubq_f64(v518, v527), *v532), *v533), vmulq_n_f64(vaddq_f64(*v512, v331), v322)), (int32x4_t)vcgeq_f64(vaddq_f64(vsubq_f64(vsubq_f64(v517, v526), v532[1]), v533[1]), vmulq_n_f64(
                                                                                    vaddq_f64(v512[1], v331),
                                                                                    v322))),
                                                        (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(vaddq_f64(vsubq_f64(vsubq_f64(v516, v525), v532[2]), v533[2]), vmulq_n_f64(vaddq_f64(v512[2], v331), v322)), (int32x4_t)vcgeq_f64(vaddq_f64(vsubq_f64(vsubq_f64(v515, v524), v532[3]), v533[3]), vmulq_n_f64(vaddq_f64(v512[3], v331), v322))))), vmvnq_s8((int8x16_t)vuzp1q_s16(
                                                        (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(vaddq_f64(vsubq_f64(vsubq_f64(v519, v528), v532[4]), v533[4]), vmulq_n_f64(vaddq_f64(v512[4], v331), v322)), (int32x4_t)vcgeq_f64(vaddq_f64(vsubq_f64(vsubq_f64(v520, v529), v532[5]), v533[5]), vmulq_n_f64(vaddq_f64(v512[5], v331), v322))), (int16x8_t)vuzp1q_s32(
                                                                     (int32x4_t)vcgeq_f64(vaddq_f64(vsubq_f64(vsubq_f64(v521, v530), v532[6]), v533[6]), vmulq_n_f64(vaddq_f64(v512[6], v331), v322)), (int32x4_t)vcgeq_f64(vaddq_f64(vsubq_f64(vsubq_f64(v522, v531), v532[7]), v533[7]), vmulq_n_f64(vaddq_f64(v512[7], v331), v322)))))), v490);
                    v512 += 8;
                    v511 += 16;
                    v510 += 16;
                    v513 += 16;
                  }
                  while (v513);
                  v503 = (double *)((char *)v503 + v573);
                  v506 = v577;
                  v507 = v575;
                }
                else
                {
                  v506 = v325;
                  v507 = v325;
                  v508 = v492;
                }
                v534 = 0;
                v535 = v307 + v507;
                v536 = 8 * (v307 + v507);
                v537 = v507 - (v307 + v564);
                v538 = 8 * v537;
                v539 = v488 + v538;
                v540 = v489 + v538;
                v320 = v503;
                do
                {
                  if (v535 + (int)v534 >= v20)
                    __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
                  if (v537 + v534 >= v20)
                    __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
                  v508->i8[v534] = (v503[v534] + a5) * v322 > *(double *)(v489 + v536 + 8 * v534)
                                                            - *(double *)(v540 + 8 * v534)
                                                            - *(double *)(v488 + v536 + 8 * v534)
                                                            + *(double *)(v539 + 8 * v534);
                  ++v320;
                  v509 = v506 + ++v534;
                }
                while (v506 + v534 < v309);
                v492 = (int8x16_t *)((char *)v508 + v534);
                if (v509 < v300)
                {
LABEL_261:
                  v541 = v300 + ~v509;
                  if (v541 <= 0xE)
                    goto LABEL_265;
                  v542 = v541 + 1;
                  v543 = (v541 + 1) & 0x1FFFFFFF0;
                  v509 += v543;
                  v544 = v492;
                  v545 = (float64x2_t *)v320;
                  v546 = v543;
                  do
                  {
                    v548 = v545[6];
                    v547 = v545[7];
                    v550 = v545[4];
                    v549 = v545[5];
                    v552 = v545[2];
                    v551 = v545[3];
                    v553 = *v545;
                    v554 = v545[1];
                    v545 += 8;
                    *v544++ = vandq_s8(vuzp1q_s8(vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v487, vmulq_n_f64(vaddq_f64(v553, v331), v322)), (int32x4_t)vcgeq_f64(v487, vmulq_n_f64(vaddq_f64(v554, v331), v322))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v487, vmulq_n_f64(vaddq_f64(v552, v331), v322)),
                                                                     (int32x4_t)vcgeq_f64(v487, vmulq_n_f64(vaddq_f64(v551, v331), v322))))), vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v487, vmulq_n_f64(vaddq_f64(v550, v331), v322)), (int32x4_t)vcgeq_f64(v487, vmulq_n_f64(vaddq_f64(v549, v331), v322))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v487,
                                                                                  vmulq_n_f64(vaddq_f64(v548, v331), v322)), (int32x4_t)vcgeq_f64(v487, vmulq_n_f64(vaddq_f64(v547, v331), v322)))))), v490);
                    v546 -= 16;
                  }
                  while (v546);
                  v492 = (int8x16_t *)((char *)v492 + v543);
                  v320 += v543;
                  if (v542 != v543)
                  {
LABEL_265:
                    v555 = v300 - v509;
                    do
                    {
                      v556 = *v320++;
                      v492->i8[0] = (v556 + a5) * v322 > v319;
                      v492 = (int8x16_t *)((char *)v492 + 1);
                      --v555;
                    }
                    while (v555);
                  }
                }
              }
              LODWORD(v306) = v306 + 1;
              v321 = v492;
              if ((_DWORD)v306 == v560)
                goto LABEL_268;
              continue;
            }
          }
        }
        v345 = 0;
        v346 = v321;
LABEL_183:
        v358 = v325 - v345;
        v357 = v320;
        do
        {
          v359 = *v357++;
          v346->i8[0] = (v359 + a5) * v322 > *(double *)&v312;
          v346 = (int8x16_t *)((char *)v346 + 1);
          --v358;
        }
        while (v358);
        goto LABEL_185;
      }
    }
    else
    {
      v16 = 0;
      if (!v20)
        goto LABEL_153;
    }
    v287 = 0;
    v288 = *(_QWORD *)(a1 + 8);
    v289 = 0.0;
    v290 = v20;
    do
    {
      v289 = v289 + *(double *)(v288 + v287);
      *(double *)(v16 + v287) = v289;
      v287 += 8;
      --v290;
    }
    while (v290);
    if (v21 >= 2)
    {
      v291 = (double *)(v288 + v287);
      v292 = (double *)(v16 + v287);
      v293 = 1;
      v294 = (double *)v16;
      do
      {
        v295 = 0.0;
        v296 = v20;
        do
        {
          v297 = *v291++;
          v295 = v295 + v297;
          v298 = *v294++;
          *v292++ = v295 + v298;
          --v296;
        }
        while (v296);
        ++v293;
      }
      while (v293 != v21);
    }
    goto LABEL_153;
  }
  if (v9 <= a2)
    goto LABEL_287;
  v11 = *(_DWORD *)(a1 + 16);
  if (v11 <= a2)
    goto LABEL_287;
  v12 = v11 * (unint64_t)v9;
  v13 = *(_DWORD *)(a1 + 16);
  v14 = *(_DWORD *)(a1 + 20);
  v15 = v13;
  if (*(_QWORD *)(a4 + 32) < v12)
  {
    if (*(_QWORD *)(a4 + 8) && *(_BYTE *)(a4 + 24))
      MEMORY[0x20BD36480]();
    *(_QWORD *)(a4 + 8) = operator new[]();
    *(_QWORD *)(a4 + 32) = v12;
    *(_BYTE *)(a4 + 24) = 1;
    v13 = *(_DWORD *)(a1 + 16);
    v10 = *(_DWORD *)(a1 + 20);
    v14 = v10;
    v15 = v13;
  }
  *(_DWORD *)(a4 + 16) = v11;
  *(_DWORD *)(a4 + 20) = v9;
  v565 = 8 * v13 * (unint64_t)v10;
  if (!v565)
  {
    v16 = 0;
    if (!v14)
      goto LABEL_30;
LABEL_23:
    v22 = 0;
    v23 = *(_QWORD *)(a1 + 8);
    v24 = 0.0;
    v25 = v14;
    do
    {
      v24 = v24 + *(double *)(v23 + v22);
      *(double *)(v16 + v22) = v24;
      v22 += 8;
      --v25;
    }
    while (v25);
    if (v15 >= 2)
    {
      v26 = (double *)(v23 + v22);
      v27 = (double *)(v16 + v22);
      v28 = 1;
      v29 = (double *)v16;
      do
      {
        v30 = 0.0;
        v31 = v14;
        do
        {
          v32 = *v26++;
          v30 = v30 + v32;
          v33 = *v29++;
          *v27++ = v30 + v33;
          --v31;
        }
        while (v31);
        ++v28;
      }
      while (v28 != v15);
    }
    goto LABEL_30;
  }
  v16 = operator new[]();
  if (v14)
    goto LABEL_23;
LABEL_30:
  v34 = a2 - 1;
  if (a2 - 1 >= v15 || v34 >= v14)
    __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
  v35 = *(_DWORD *)(a1 + 20);
  if (v35 - 1 >= v14)
    __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
  v36 = ~a2;
  v37 = v35 + ~a2;
  if (v37 >= v14)
    __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
  v38 = *(_DWORD *)(a1 + 16);
  v39 = v38 - 1;
  if (v38 - 1 >= v15)
    __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
  v559 = *(_DWORD *)(a1 + 16);
  v40 = v38 + v36;
  if (v38 + v36 >= v15)
    __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
  LODWORD(v41) = 0;
  v42 = a2 >> 1;
  v43 = (a2 >> 1) + (a2 & 1) - 1;
  v44 = v9 - (a2 >> 1);
  v568 = v11 - (a2 >> 1);
  v45 = v16 + 8 * v34;
  v46 = v14 * v34;
  v47 = *(uint64_t *)(v45 + 8 * v46);
  v48 = v16 + 8 * (v35 - 1);
  v49 = v16 + 8 * v37;
  v50 = *(double *)(v48 + 8 * v46) - *(double *)(v49 + 8 * v46);
  v557 = v39 * v14;
  v51 = 8 * v557;
  v52 = v40 * v14;
  v566 = v49;
  v53 = *(double *)(v45 + 8 * v557) - *(double *)(v45 + 8 * v52);
  v54 = *(double *)(v48 + 8 * v557)
      + *(double *)(v49 + 8 * v52)
      - *(double *)(v49 + 8 * v557)
      - *(double *)(v48 + 8 * v52);
  v55 = *(double **)(a1 + 8);
  v56 = *(int8x16_t **)(a4 + 8);
  v57 = (double)(a2 * a2);
  v58 = v16 + 8 * v46;
  v570 = ~v43;
  v59 = (a2 >> 1) + (a2 & 1);
  if (v59 <= 1)
    v60 = 1;
  else
    v60 = v59;
  v61 = ~v60 + v44;
  v62 = v60 - v59;
  if (v14 > v60 - v59)
    v62 = v14;
  v63 = v59 + v62 - v60;
  if (v61 >= v63)
    v61 = v63;
  LODWORD(v64) = v14 - (v60 + v42);
  if (v14 >= v60 + v42)
    v64 = v64;
  else
    v64 = 0;
  if (v61 >= v64)
    v65 = v64;
  else
    v65 = v61;
  result = v60 & 0xFFFFFFF0;
  v580 = 8 * result;
  v582 = v65;
  v67 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a5, 0);
  v68 = (float64x2_t)vdupq_lane_s64(v47, 0);
  if (((v65 + 1) & 0xF) != 0)
    v69 = (v65 + 1) & 0xF;
  else
    v69 = 16;
  v70 = v65 + 1 - v69;
  v576 = v70 + v60;
  v578 = v70;
  v574 = v60 + v70;
  v572 = 8 * v70;
  v71 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v50, 0);
  v72 = v14 - v14 * v59;
  v73 = v14 + v14 * v42;
  v561 = v69;
  v74 = ~v65 + v69;
  v563 = a2 & 1;
  v75 = -v59;
  v76.i64[0] = 0x101010101010101;
  v76.i64[1] = 0x101010101010101;
  v77 = 1;
  do
  {
    v78 = v77;
    v79 = v72;
    v80 = v73;
    if (v60 <= 0xF)
    {
      v81 = 0;
      v82 = v56;
LABEL_60:
      v94 = v60 - v81;
      v93 = v55;
      do
      {
        v95 = *v93++;
        v82->i8[0] = (v95 + a5) * v57 <= *(double *)&v47;
        v82 = (int8x16_t *)((char *)v82 + 1);
        --v94;
      }
      while (v94);
      goto LABEL_62;
    }
    v82 = (int8x16_t *)((char *)v56 + result);
    v83 = (float64x2_t *)v55;
    v84 = v60 & 0xFFFFFFF0;
    do
    {
      v86 = v83[6];
      v85 = v83[7];
      v88 = v83[4];
      v87 = v83[5];
      v90 = v83[2];
      v89 = v83[3];
      v91 = *v83;
      v92 = v83[1];
      v83 += 8;
      *v56++ = vandq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v68, vmulq_n_f64(vaddq_f64(v91, v67), v57)), (int32x4_t)vcgeq_f64(v68, vmulq_n_f64(vaddq_f64(v92, v67), v57))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v68, vmulq_n_f64(vaddq_f64(v90, v67), v57)), (int32x4_t)vcgeq_f64(v68, vmulq_n_f64(vaddq_f64(v89, v67), v57)))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v68, vmulq_n_f64(vaddq_f64(v88, v67), v57)), (int32x4_t)vcgeq_f64(v68, vmulq_n_f64(vaddq_f64(v87, v67), v57))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v68, vmulq_n_f64(vaddq_f64(v86, v67), v57)), (int32x4_t)vcgeq_f64(v68, vmulq_n_f64(vaddq_f64(v85, v67), v57))))), v76);
      v84 -= 16;
    }
    while (v84);
    v55 = (double *)((char *)v55 + v580);
    v81 = v60 & 0xFFFFFFF0;
    v93 = v55;
    if (result != v60)
      goto LABEL_60;
LABEL_62:
    if (v60 >= v44)
    {
      v55 = v93;
      v99 = v60;
      if (v60 >= v35)
        goto LABEL_53;
    }
    else
    {
      if (v582 >= 0x10)
      {
        v98 = (int8x16_t *)((char *)v82 + v578);
        v100 = v60 + v42;
        v101 = v60 - v42 - v563;
        v102 = (float64x2_t *)v93;
        v103 = v74;
        do
        {
          v104 = (float64x2_t *)(v58 + 8 * v100);
          v106 = *v104;
          v105 = v104[1];
          v107 = v104[2];
          v108 = v104[3];
          v109 = v104[4];
          v110 = v104[5];
          v111 = v104[6];
          v112 = v104[7];
          v113 = (float64x2_t *)(v58 + 8 * v101);
          v115 = v102[6];
          v114 = v102[7];
          v117 = v102[4];
          v116 = v102[5];
          v119 = v102[2];
          v118 = v102[3];
          v121 = *v102;
          v120 = v102[1];
          v102 += 8;
          *v82++ = vandq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(vsubq_f64(v106, *v113), vmulq_n_f64(vaddq_f64(v121, v67), v57)), (int32x4_t)vcgeq_f64(vsubq_f64(v105, v113[1]), vmulq_n_f64(vaddq_f64(v120, v67), v57))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(vsubq_f64(v107, v113[2]), vmulq_n_f64(vaddq_f64(v119, v67), v57)), (int32x4_t)vcgeq_f64(vsubq_f64(v108, v113[3]), vmulq_n_f64(vaddq_f64(v118, v67), v57)))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(
                                                              vsubq_f64(v109, v113[4]),
                                                              vmulq_n_f64(vaddq_f64(v117, v67), v57)),
                                                 (int32x4_t)vcgeq_f64(vsubq_f64(v110, v113[5]), vmulq_n_f64(vaddq_f64(v116, v67), v57))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(vsubq_f64(v111, v113[6]), vmulq_n_f64(vaddq_f64(v115, v67), v57)), (int32x4_t)vcgeq_f64(vsubq_f64(v112, v113[7]), vmulq_n_f64(vaddq_f64(v114, v67), v57))))), v76);
          v101 += 16;
          v100 += 16;
          v103 += 16;
        }
        while (v103);
        v93 = (double *)((char *)v93 + v572);
        v96 = v576;
        v97 = v574;
      }
      else
      {
        v96 = v60;
        v97 = v60;
        v98 = v82;
      }
      v122 = 0;
      v123 = v42 + v97;
      v124 = v58 + 8 * (v42 + v97);
      v125 = v75 + v97;
      v55 = v93;
      do
      {
        if (v123 + (int)v122 >= v14)
          __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
        if (v125 + v122 >= v14)
          __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
        v98->i8[v122] = (v93[v122] + a5) * v57 <= *(double *)(v124 + 8 * v122)
                                                - *(double *)(v58 + 8 * v125 + 8 * v122);
        ++v55;
        v99 = v96 + ++v122;
      }
      while (v96 + v122 < v44);
      v82 = (int8x16_t *)((char *)v98 + v122);
      if (v99 >= v35)
      {
LABEL_53:
        v56 = v82;
        goto LABEL_54;
      }
    }
    v126 = v35 + ~v99;
    if (v126 <= 0xE)
      goto LABEL_79;
    v127 = v126 + 1;
    v128 = (v126 + 1) & 0x1FFFFFFF0;
    v99 += v128;
    v129 = v82;
    v130 = (float64x2_t *)v55;
    v131 = v128;
    do
    {
      v133 = v130[6];
      v132 = v130[7];
      v135 = v130[4];
      v134 = v130[5];
      v137 = v130[2];
      v136 = v130[3];
      v138 = *v130;
      v139 = v130[1];
      v130 += 8;
      *v129++ = vandq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v71, vmulq_n_f64(vaddq_f64(v138, v67), v57)), (int32x4_t)vcgeq_f64(v71, vmulq_n_f64(vaddq_f64(v139, v67), v57))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v71, vmulq_n_f64(vaddq_f64(v137, v67), v57)), (int32x4_t)vcgeq_f64(v71, vmulq_n_f64(vaddq_f64(v136, v67), v57)))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v71, vmulq_n_f64(vaddq_f64(v135, v67), v57)), (int32x4_t)vcgeq_f64(v71, vmulq_n_f64(vaddq_f64(v134, v67), v57))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v71, vmulq_n_f64(vaddq_f64(v133, v67), v57)), (int32x4_t)vcgeq_f64(v71, vmulq_n_f64(vaddq_f64(v132, v67), v57))))), v76);
      v131 -= 16;
    }
    while (v131);
    v82 = (int8x16_t *)((char *)v82 + v128);
    v55 += v128;
    v56 = v82;
    if (v127 != v128)
    {
LABEL_79:
      v140 = v35 - v99;
      v56 = v82;
      do
      {
        v141 = *v55++;
        v56->i8[0] = (v141 + a5) * v57 <= v50;
        v56 = (int8x16_t *)((char *)v56 + 1);
        --v140;
      }
      while (v140);
    }
LABEL_54:
    LODWORD(v41) = v41 + 1;
    v77 = v78 + 1;
    v72 = v79 + v14;
    v73 = v80 + v14;
  }
  while (v41 <= v43);
  v142 = v568;
  if (v41 < v568)
  {
    v41 = v78;
    v143.i64[0] = 0x101010101010101;
    v143.i64[1] = 0x101010101010101;
    while (1)
    {
      if (v42 + v41 >= v15)
        __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
      if ((int)v41 + v570 >= v15)
        __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
      v144 = (v42 + (_DWORD)v41) * v14;
      v145 = ((_DWORD)v41 + v570) * v14;
      v146 = *(double *)(v45 + 8 * v144) - *(double *)(v45 + 8 * v145);
      if (v60 <= 0xF)
        break;
      v148 = (int8x16_t *)((char *)v56 + result);
      v149 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v146, 0);
      v150 = (float64x2_t *)v55;
      v151 = v60 & 0xFFFFFFF0;
      do
      {
        v153 = v150[6];
        v152 = v150[7];
        v155 = v150[4];
        v154 = v150[5];
        v157 = v150[2];
        v156 = v150[3];
        v158 = *v150;
        v159 = v150[1];
        v150 += 8;
        *v56++ = vandq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v149, vmulq_n_f64(vaddq_f64(v158, v67), v57)), (int32x4_t)vcgeq_f64(v149, vmulq_n_f64(vaddq_f64(v159, v67), v57))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v149, vmulq_n_f64(vaddq_f64(v157, v67), v57)), (int32x4_t)vcgeq_f64(v149, vmulq_n_f64(vaddq_f64(v156, v67), v57)))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v149, vmulq_n_f64(vaddq_f64(v155, v67), v57)), (int32x4_t)vcgeq_f64(v149, vmulq_n_f64(vaddq_f64(v154, v67), v57))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v149, vmulq_n_f64(vaddq_f64(v153, v67), v57)), (int32x4_t)vcgeq_f64(v149, vmulq_n_f64(vaddq_f64(v152, v67), v57))))), v143);
        v151 -= 16;
      }
      while (v151);
      v55 = (double *)((char *)v55 + v580);
      v147 = v60 & 0xFFFFFFF0;
      v160 = v55;
      if (result != v60)
        goto LABEL_93;
LABEL_95:
      v163 = 8 * v144;
      v164 = 8 * v145;
      if (v60 >= v44)
      {
        v55 = v160;
        v168 = v60;
        if (v60 < v35)
          goto LABEL_108;
      }
      else
      {
        if (v582 >= 0x10)
        {
          v167 = (int8x16_t *)((char *)v148 + v578);
          v169 = v60 + v42;
          v170 = v60 - v42 - v563;
          v171 = (float64x2_t *)v160;
          v172 = ~v582 + v561;
          do
          {
            v173 = v16 + 8 * v169;
            v175 = *(float64x2_t *)(v173 + v163 + 32);
            v174 = *(float64x2_t *)(v173 + v163 + 48);
            v177 = *(float64x2_t *)(v173 + v163);
            v176 = *(float64x2_t *)(v173 + v163 + 16);
            v178 = *(float64x2_t *)(v173 + v163 + 64);
            v179 = *(float64x2_t *)(v173 + v163 + 80);
            v180 = v16 + 8 * v170;
            v181 = *(float64x2_t *)(v173 + v163 + 96);
            v182 = *(float64x2_t *)(v173 + v163 + 112);
            v183 = (float64x2_t *)(v173 + v164);
            v184 = v183[4];
            v185 = v183[1];
            v186 = v183[2];
            *v148++ = vandq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(vaddq_f64(vsubq_f64(vsubq_f64(v177, *(float64x2_t *)(v180 + v163)), *v183), *(float64x2_t *)(v180 + v164)), vmulq_n_f64(vaddq_f64(*v171, v67), v57)), (int32x4_t)vcgeq_f64(vaddq_f64(vsubq_f64(vsubq_f64(v176, *(float64x2_t *)(v180 + v163 + 16)), v185), *(float64x2_t *)(v180 + v164 + 16)), vmulq_n_f64(vaddq_f64(v171[1], v67), v57))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(
                                                                 vaddq_f64(vsubq_f64(vsubq_f64(v175, *(float64x2_t *)(v180 + v163 + 32)), v186), *(float64x2_t *)(v180 + v164 + 32)), vmulq_n_f64(vaddq_f64(v171[2], v67), v57)), (int32x4_t)vcgeq_f64(vaddq_f64(vsubq_f64(vsubq_f64(v174, *(float64x2_t *)(v180 + v163 + 48)), v183[3]), *(float64x2_t *)(v180 + v164 + 48)), vmulq_n_f64(vaddq_f64(v171[3], v67), v57)))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(vaddq_f64(vsubq_f64(vsubq_f64(v178, *(float64x2_t *)(v180 + v163 + 64)), v184),
                                                                   *(float64x2_t *)(v180 + v164 + 64)),
                                                                 vmulq_n_f64(vaddq_f64(v171[4], v67), v57)),
                                                    (int32x4_t)vcgeq_f64(vaddq_f64(vsubq_f64(vsubq_f64(v179, *(float64x2_t *)(v180 + v163 + 80)), v183[5]), *(float64x2_t *)(v180 + v164 + 80)), vmulq_n_f64(vaddq_f64(v171[5], v67), v57))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(vaddq_f64(vsubq_f64(vsubq_f64(v181, *(float64x2_t *)(v180 + v163 + 96)), v183[6]), *(float64x2_t *)(v180 + v164 + 96)), vmulq_n_f64(vaddq_f64(v171[6], v67), v57)), (int32x4_t)vcgeq_f64(vaddq_f64(vsubq_f64(vsubq_f64(v182,
                                                                       *(float64x2_t *)(v180 + v163 + 112)),
                                                                     v183[7]),
                                                                   *(float64x2_t *)(v180 + v164 + 112)),
                                                                 vmulq_n_f64(vaddq_f64(v171[7], v67), v57))))),
                        v143);
            v171 += 8;
            v170 += 16;
            v169 += 16;
            v172 += 16;
          }
          while (v172);
          v160 = (double *)((char *)v160 + v572);
          v165 = v576;
          v166 = v574;
        }
        else
        {
          v165 = v60;
          v166 = v60;
          v167 = v148;
        }
        v187 = 0;
        v188 = v42 + v166;
        v189 = 8 * (v42 + v166);
        v190 = v16 + 8 * v79;
        v191 = v190 + v189;
        v192 = v16 + 8 * v80;
        v193 = v192 + v189;
        v194 = v166 - (v42 + v563);
        v195 = 8 * v194;
        v196 = v190 + v195;
        v197 = v192 + v195;
        v55 = v160;
        do
        {
          if (v188 + (int)v187 >= v14)
            __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
          if (v194 + v187 >= v14)
            __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
          v167->i8[v187] = (v160[v187] + a5) * v57 <= *(double *)(v193 + 8 * v187)
                                                    - *(double *)(v197 + 8 * v187)
                                                    - *(double *)(v191 + 8 * v187)
                                                    + *(double *)(v196 + 8 * v187);
          ++v55;
          v168 = v165 + ++v187;
        }
        while (v165 + v187 < v44);
        v148 = (int8x16_t *)((char *)v167 + v187);
        v142 = v568;
        if (v168 < v35)
        {
LABEL_108:
          v198 = *(double *)(v16 + 8 * (v35 - 1) + v163)
               - *(double *)(v566 + v163)
               - *(double *)(v16 + 8 * (v35 - 1) + v164)
               + *(double *)(v566 + v164);
          v199 = v35 + ~v168;
          if (v199 < 0xF)
            goto LABEL_112;
          v200 = v199 + 1;
          v201 = v200 & 0x1FFFFFFF0;
          v168 += v200 & 0xFFFFFFF0;
          v202 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v198, 0);
          v203 = v148;
          v204 = (float64x2_t *)v55;
          v205 = v200 & 0x1FFFFFFF0;
          do
          {
            v207 = v204[6];
            v206 = v204[7];
            v209 = v204[4];
            v208 = v204[5];
            v211 = v204[2];
            v210 = v204[3];
            v212 = *v204;
            v213 = v204[1];
            v204 += 8;
            *v203++ = vandq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v202, vmulq_n_f64(vaddq_f64(v212, v67), v57)), (int32x4_t)vcgeq_f64(v202, vmulq_n_f64(vaddq_f64(v213, v67), v57))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v202, vmulq_n_f64(vaddq_f64(v211, v67), v57)), (int32x4_t)vcgeq_f64(v202, vmulq_n_f64(vaddq_f64(v210, v67), v57)))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v202, vmulq_n_f64(vaddq_f64(v209, v67), v57)), (int32x4_t)vcgeq_f64(v202, vmulq_n_f64(vaddq_f64(v208, v67), v57))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v202, vmulq_n_f64(vaddq_f64(v207, v67), v57)), (int32x4_t)vcgeq_f64(v202, vmulq_n_f64(vaddq_f64(v206, v67), v57))))), v143);
            v205 -= 16;
          }
          while (v205);
          v148 = (int8x16_t *)((char *)v148 + v201);
          v55 += v200 & 0x1FFFFFFF0;
          v56 = v148;
          if (v200 != v201)
          {
LABEL_112:
            v214 = v35 - v168;
            v56 = v148;
            do
            {
              v215 = *v55++;
              v56->i8[0] = (v215 + a5) * v57 <= v198;
              v56 = (int8x16_t *)((char *)v56 + 1);
              --v214;
            }
            while (v214);
          }
          goto LABEL_85;
        }
      }
      v56 = v148;
LABEL_85:
      ++v41;
      v79 += v14;
      v80 += v14;
      if (v41 == v142)
        goto LABEL_115;
    }
    v147 = 0;
    v148 = v56;
LABEL_93:
    v161 = v60 - v147;
    v160 = v55;
    do
    {
      v162 = *v160++;
      v148->i8[0] = (v162 + a5) * v57 <= v146;
      v148 = (int8x16_t *)((char *)v148 + 1);
      --v161;
    }
    while (v161);
    goto LABEL_95;
  }
LABEL_115:
  if (v41 < v559)
  {
    v216 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v53, 0);
    v217 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v54, 0);
    v218 = v16 + 8 * v52;
    v219 = v16 + 8 * v557;
    v220.i64[0] = 0x101010101010101;
    v220.i64[1] = 0x101010101010101;
    while (v60 > 0xF)
    {
      v222 = (int8x16_t *)((char *)v56 + result);
      v223 = (float64x2_t *)v55;
      v224 = v60 & 0xFFFFFFF0;
      do
      {
        v226 = v223[6];
        v225 = v223[7];
        v228 = v223[4];
        v227 = v223[5];
        v230 = v223[2];
        v229 = v223[3];
        v231 = *v223;
        v232 = v223[1];
        v223 += 8;
        *v56++ = vandq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v216, vmulq_n_f64(vaddq_f64(v231, v67), v57)), (int32x4_t)vcgeq_f64(v216, vmulq_n_f64(vaddq_f64(v232, v67), v57))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v216, vmulq_n_f64(vaddq_f64(v230, v67), v57)), (int32x4_t)vcgeq_f64(v216, vmulq_n_f64(vaddq_f64(v229, v67), v57)))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v216, vmulq_n_f64(vaddq_f64(v228, v67), v57)), (int32x4_t)vcgeq_f64(v216, vmulq_n_f64(vaddq_f64(v227, v67), v57))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v216, vmulq_n_f64(vaddq_f64(v226, v67), v57)), (int32x4_t)vcgeq_f64(v216, vmulq_n_f64(vaddq_f64(v225, v67), v57))))), v220);
        v224 -= 16;
      }
      while (v224);
      v55 = (double *)((char *)v55 + v580);
      v221 = v60 & 0xFFFFFFF0;
      v233 = v55;
      if (result != v60)
        goto LABEL_123;
LABEL_125:
      if (v60 < v44)
      {
        if (v582 >= 0x10)
        {
          v238 = (int8x16_t *)((char *)v222 + v578);
          v240 = v60 + v42;
          v241 = v60 - v42 - v563;
          v242 = (float64x2_t *)v233;
          v243 = ~v582 + v561;
          do
          {
            v244 = v16 + 8 * v240;
            v246 = *(float64x2_t *)(v244 + v51 + 32);
            v245 = *(float64x2_t *)(v244 + v51 + 48);
            v248 = *(float64x2_t *)(v244 + 8 * v557);
            v247 = *(float64x2_t *)(v244 + v51 + 16);
            v249 = *(float64x2_t *)(v244 + v51 + 64);
            v250 = *(float64x2_t *)(v244 + v51 + 80);
            v251 = *(float64x2_t *)(v244 + v51 + 96);
            v252 = *(float64x2_t *)(v244 + v51 + 112);
            v253 = v16 + 8 * v241;
            v255 = *(float64x2_t *)(v253 + v51 + 32);
            v254 = *(float64x2_t *)(v253 + v51 + 48);
            v257 = *(float64x2_t *)(v253 + 8 * v557);
            v256 = *(float64x2_t *)(v253 + v51 + 16);
            v258 = *(float64x2_t *)(v253 + v51 + 64);
            v259 = *(float64x2_t *)(v253 + v51 + 80);
            v260 = *(float64x2_t *)(v253 + v51 + 96);
            v261 = *(float64x2_t *)(v253 + v51 + 112);
            v262 = (float64x2_t *)(v244 + 8 * v52);
            v263 = (float64x2_t *)(v253 + 8 * v52);
            *v222++ = vandq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(vaddq_f64(vsubq_f64(vsubq_f64(v248, v257), *v262), *v263), vmulq_n_f64(vaddq_f64(*v242, v67), v57)), (int32x4_t)vcgeq_f64(vaddq_f64(vsubq_f64(vsubq_f64(v247, v256), v262[1]), v263[1]), vmulq_n_f64(vaddq_f64(v242[1], v67), v57))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(vaddq_f64(vsubq_f64(vsubq_f64(v246, v255), v262[2]), v263[2]), vmulq_n_f64(vaddq_f64(v242[2], v67), v57)),
                                                    (int32x4_t)vcgeq_f64(vaddq_f64(vsubq_f64(vsubq_f64(v245, v254), v262[3]), v263[3]), vmulq_n_f64(vaddq_f64(v242[3], v67), v57)))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(vaddq_f64(vsubq_f64(vsubq_f64(v249, v258), v262[4]), v263[4]), vmulq_n_f64(vaddq_f64(v242[4], v67), v57)), (int32x4_t)vcgeq_f64(vaddq_f64(vsubq_f64(vsubq_f64(v250, v259), v262[5]), v263[5]), vmulq_n_f64(vaddq_f64(v242[5], v67), v57))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(vaddq_f64(
                                                                   vsubq_f64(vsubq_f64(v251, v260), v262[6]),
                                                                   v263[6]),
                                                                 vmulq_n_f64(vaddq_f64(v242[6], v67), v57)),
                                                    (int32x4_t)vcgeq_f64(vaddq_f64(vsubq_f64(vsubq_f64(v252, v261), v262[7]), v263[7]), vmulq_n_f64(vaddq_f64(v242[7], v67), v57))))), v220);
            v242 += 8;
            v241 += 16;
            v240 += 16;
            v243 += 16;
          }
          while (v243);
          v233 = (double *)((char *)v233 + v572);
          v236 = v576;
          v237 = v574;
        }
        else
        {
          v236 = v60;
          v237 = v60;
          v238 = v222;
        }
        v264 = 0;
        v265 = v42 + v237;
        v266 = 8 * (v42 + v237);
        v267 = v237 - (v42 + v563);
        v268 = 8 * v267;
        v269 = v218 + v268;
        v270 = v219 + v268;
        v55 = v233;
        do
        {
          if (v265 + (int)v264 >= v14)
            __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
          if (v267 + v264 >= v14)
            __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
          v238->i8[v264] = (v233[v264] + a5) * v57 <= *(double *)(v219 + v266 + 8 * v264)
                                                    - *(double *)(v270 + 8 * v264)
                                                    - *(double *)(v218 + v266 + 8 * v264)
                                                    + *(double *)(v269 + 8 * v264);
          ++v55;
          v239 = v236 + ++v264;
        }
        while (v236 + v264 < v44);
        v222 = (int8x16_t *)((char *)v238 + v264);
        if (v239 >= v35)
          goto LABEL_117;
LABEL_138:
        v271 = v35 + ~v239;
        if (v271 <= 0xE)
          goto LABEL_142;
        v272 = v271 + 1;
        v273 = (v271 + 1) & 0x1FFFFFFF0;
        v239 += v273;
        v274 = v222;
        v275 = (float64x2_t *)v55;
        v276 = v273;
        do
        {
          v278 = v275[6];
          v277 = v275[7];
          v280 = v275[4];
          v279 = v275[5];
          v282 = v275[2];
          v281 = v275[3];
          v283 = *v275;
          v284 = v275[1];
          v275 += 8;
          *v274++ = vandq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v217, vmulq_n_f64(vaddq_f64(v283, v67), v57)), (int32x4_t)vcgeq_f64(v217, vmulq_n_f64(vaddq_f64(v284, v67), v57))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v217, vmulq_n_f64(vaddq_f64(v282, v67), v57)), (int32x4_t)vcgeq_f64(v217, vmulq_n_f64(vaddq_f64(v281, v67), v57)))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v217, vmulq_n_f64(vaddq_f64(v280, v67), v57)), (int32x4_t)vcgeq_f64(v217, vmulq_n_f64(vaddq_f64(v279, v67), v57))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v217, vmulq_n_f64(vaddq_f64(v278, v67), v57)), (int32x4_t)vcgeq_f64(v217, vmulq_n_f64(vaddq_f64(v277, v67), v57))))), v220);
          v276 -= 16;
        }
        while (v276);
        v222 = (int8x16_t *)((char *)v222 + v273);
        v55 += v273;
        if (v272 != v273)
        {
LABEL_142:
          v285 = v35 - v239;
          do
          {
            v286 = *v55++;
            v222->i8[0] = (v286 + a5) * v57 <= v54;
            v222 = (int8x16_t *)((char *)v222 + 1);
            --v285;
          }
          while (v285);
        }
        goto LABEL_117;
      }
      v55 = v233;
      v239 = v60;
      if (v60 < v35)
        goto LABEL_138;
LABEL_117:
      LODWORD(v41) = v41 + 1;
      v56 = v222;
      if ((_DWORD)v41 == v559)
        goto LABEL_268;
    }
    v221 = 0;
    v222 = v56;
LABEL_123:
    v234 = v60 - v221;
    v233 = v55;
    do
    {
      v235 = *v233++;
      v222->i8[0] = (v235 + a5) * v57 <= v53;
      v222 = (int8x16_t *)((char *)v222 + 1);
      --v234;
    }
    while (v234);
    goto LABEL_125;
  }
LABEL_268:
  if (v565)
  {
    if (v16)
      JUMPOUT(0x20BD36480);
  }
  return result;
}

void sub_20B639E60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  if (!a14)
    _Unwind_Resume(exception_object);
  MEMORY[0x20BD36480](v14, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

uint64_t Matrix<double>::~Matrix(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C4213F8;
  if (*(_QWORD *)(a1 + 8) && *(_BYTE *)(a1 + 24))
  {
    MEMORY[0x20BD36480]();
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 24) = 0;
  }
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void Matrix<double>::~Matrix(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C4213F8;
  if (*(_QWORD *)(a1 + 8) && *(_BYTE *)(a1 + 24))
  {
    MEMORY[0x20BD36480]();
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 24) = 0;
  }
  *(_QWORD *)(a1 + 16) = 0;
  JUMPOUT(0x20BD36498);
}

uint64_t ImageUtils::ErodeRect2x2(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  _BYTE *v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  BOOL v24;
  _BYTE *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  _BYTE *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  _BYTE *v34;

  v4 = *(_DWORD *)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 20);
  v6 = v5 * (unint64_t)v4;
  if (*(_QWORD *)(a2 + 32) < v6)
  {
    if (*(_QWORD *)(a2 + 8) && *(_BYTE *)(a2 + 24))
      MEMORY[0x20BD36480]();
    *(_QWORD *)(a2 + 8) = operator new[]();
    *(_QWORD *)(a2 + 32) = v6;
    *(_BYTE *)(a2 + 24) = 1;
  }
  *(_DWORD *)(a2 + 16) = v4;
  *(_DWORD *)(a2 + 20) = v5;
  v7 = *(_DWORD *)(a1 + 16);
  v8 = *(_DWORD *)(a1 + 20);
  if (v8 < 3 || v7 <= 2)
    __assert_rtn("ErodeRect2x2", "ImageUtils.cpp", 844, "im.Cols() > 2 && im.Rows() > 2");
  v10 = *(_BYTE **)(a1 + 8);
  v11 = *(_BYTE **)(a2 + 8);
  memset(v11, 1, v8 * v7);
  if (!*v10)
    *v11 = 0;
  v12 = v11 + 1;
  v13 = v8 - 2;
  v14 = v10 + 1;
  v15 = v8 - 1;
  v16 = v8 - 1;
  do
  {
    if (!*v14++)
      *(_WORD *)(v12 - 1) = 0;
    ++v12;
    --v16;
  }
  while (v16);
  v18 = v13 + 2;
  v19 = &v10[v13 + 2];
  v20 = -(uint64_t)*(unsigned int *)(a1 + 20);
  v21 = (uint64_t)&v10[2 * v13 + 5];
  v22 = (uint64_t)&v10[v13 + 3];
  LODWORD(result) = 1;
  do
  {
    v25 = v12;
    v26 = (unsigned __int8 *)v21;
    if (!*v19)
    {
      *v12 = 0;
      v12[v20] = 0;
    }
    v27 = 0;
    v28 = &v12[-*(unsigned int *)(a1 + 20)];
    do
    {
      if (!*(_BYTE *)(v22 + v27))
      {
        *(_WORD *)&v25[v27] = 0;
        *(_WORD *)&v28[v27] = 0;
      }
      ++v27;
    }
    while (v15 != (_DWORD)v27);
    v12 = &v25[v27 + 1];
    v19 += v18;
    v21 += v18;
    v22 += v18;
    v24 = (_DWORD)result == v7 - 2;
    result = (result + 1);
  }
  while (!v24);
  v29 = *v19;
  v30 = *(unsigned int *)(a1 + 20);
  if (!v29)
  {
    *v12 = 0;
    v12[-v30] = 0;
    LODWORD(v30) = *(_DWORD *)(a1 + 20);
  }
  v31 = 0;
  v32 = &v25[-v30];
  do
  {
    if (!*v26++)
    {
      *(_WORD *)&v25[v31 + 1 + v27] = 0;
      v34 = &v32[v31 + v27];
      v34[1] = 0;
      v34[2] = 0;
    }
    ++v31;
  }
  while (v15 != (_DWORD)v31);
  return result;
}

uint64_t ErodeOrDilateRect3x3<false>(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  _BYTE *v11;
  _WORD *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  unsigned int v17;
  _WORD *v18;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  _BYTE *v31;
  _BYTE *v32;
  _BYTE *v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v4 = *(_DWORD *)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 20);
  v6 = v5 * (unint64_t)v4;
  if (*(_QWORD *)(a2 + 32) < v6)
  {
    if (*(_QWORD *)(a2 + 8) && *(_BYTE *)(a2 + 24))
      MEMORY[0x20BD36480]();
    *(_QWORD *)(a2 + 8) = operator new[]();
    *(_QWORD *)(a2 + 32) = v6;
    *(_BYTE *)(a2 + 24) = 1;
  }
  *(_DWORD *)(a2 + 16) = v4;
  *(_DWORD *)(a2 + 20) = v5;
  v7 = *(_DWORD *)(a1 + 16);
  v8 = *(_DWORD *)(a1 + 20);
  v9 = v8 - 3;
  if (v8 < 3 || v7 <= 2)
    __assert_rtn("ErodeOrDilateRect3x3", "ImageUtils.cpp", 721, "im.Cols() > 2 && im.Rows() > 2");
  v11 = *(_BYTE **)(a1 + 8);
  v12 = *(_WORD **)(a2 + 8);
  memset(v12, 1, v8 * v7);
  if (!*v11)
  {
    *v12 = 0;
    *(_WORD *)((char *)v12 + *(unsigned int *)(a1 + 20)) = 0;
  }
  v13 = (uint64_t)v12 + 1;
  v14 = *(unsigned int *)(a1 + 20);
  v15 = v11 + 1;
  v16 = v8 - 2;
  v17 = v8 - 2;
  do
  {
    v18 = (_WORD *)v13;
    if (!*v15++)
    {
      *(_WORD *)(v13 - 1) = 0;
      *(_BYTE *)(v13 + 1) = 0;
      v20 = v13 + v14;
      *(_WORD *)(v20 - 1) = 0;
      *(_BYTE *)(v20 + 1) = 0;
    }
    v13 = (uint64_t)v18 + 1;
    --v17;
  }
  while (v17);
  v21 = v9 + 2;
  v22 = &v11[v9 + 2];
  v23 = *(unsigned int *)(a1 + 20);
  if (!*v22)
  {
    *v18 = 0;
    *(_WORD *)((char *)v18 + v23) = 0;
    LODWORD(v23) = *(_DWORD *)(a1 + 20);
  }
  v24 = v18 + 1;
  v25 = v22 + 1;
  v26 = v23;
  v27 = -(uint64_t)v23;
  v28 = v9 + 3;
  v29 = (uint64_t)&v11[v9 + 4];
  LODWORD(result) = 1;
  do
  {
    v35 = v13;
    if (!*v25)
    {
      *v24 = 0;
      *(_BYTE *)(v13 + 2) = 0;
      *(_WORD *)&v24[v27] = 0;
      *(_WORD *)&v24[v26] = 0;
    }
    v36 = 0;
    v37 = *(unsigned int *)(a1 + 20);
    v38 = v13 + v37;
    v39 = v35 - v37;
    do
    {
      if (!*(_BYTE *)(v29 + v36))
      {
        v40 = v35 + v36;
        *(_BYTE *)(v40 + 1) = 0;
        *(_WORD *)(v40 + 2) = 0;
        v41 = v39 + v36;
        *(_WORD *)(v41 + 1) = 0;
        *(_BYTE *)(v41 + 3) = 0;
        v42 = v38 + v36;
        *(_WORD *)(v42 + 1) = 0;
        *(_BYTE *)(v42 + 3) = 0;
      }
      ++v36;
    }
    while (v16 != (_DWORD)v36);
    v31 = (_BYTE *)(v35 + v36);
    v13 = v35 + v36 + 2;
    if (!v22[v28])
    {
      v31[1] = 0;
      v31[2] = 0;
      *(_WORD *)(v13 + v27 - 1) = 0;
      *(_WORD *)(v13 + v26 - 1) = 0;
    }
    v32 = v31 + 1;
    v33 = &v22[v21];
    v24 = v31 + 3;
    v25 = &v22[v21 + 2];
    v29 += v28;
    v22 += v28;
    v34 = (_DWORD)result == v7 - 2;
    result = (result + 1);
  }
  while (!v34);
  v43 = *(unsigned int *)(a1 + 20);
  v44 = v35 + v36 + 3;
  if (!*v25)
  {
    *((_WORD *)v32 + 1) = 0;
    *(_WORD *)&v24[-v43] = 0;
    LODWORD(v43) = *(_DWORD *)(a1 + 20);
  }
  v45 = v33 + 3;
  v46 = -(uint64_t)v43;
  do
  {
    v47 = v44;
    if (!*v45)
    {
      *(_WORD *)v44 = 0;
      *(_BYTE *)(v44 + 2) = 0;
      v48 = v44 + v46;
      *(_WORD *)v48 = 0;
      *(_BYTE *)(v48 + 2) = 0;
    }
    ++v45;
    v44 = v47 + 1;
    --v16;
  }
  while (v16);
  if (!v25[v21])
  {
    *(_WORD *)v44 = 0;
    *(_BYTE *)(v44 + v46) = 0;
    *(_BYTE *)(v47 + 2 + v46) = 0;
  }
  return result;
}

void ErodeOrDilateRect2x2<true>(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v11;
  uint64_t v12;
  char *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;

  v4 = *(_DWORD *)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 20);
  v6 = v5 * (unint64_t)v4;
  if (*(_QWORD *)(a2 + 32) < v6)
  {
    if (*(_QWORD *)(a2 + 8) && *(_BYTE *)(a2 + 24))
      MEMORY[0x20BD36480]();
    *(_QWORD *)(a2 + 8) = operator new[]();
    *(_QWORD *)(a2 + 32) = v6;
    *(_BYTE *)(a2 + 24) = 1;
  }
  *(_DWORD *)(a2 + 16) = v4;
  *(_DWORD *)(a2 + 20) = v5;
  v8 = *(_DWORD *)(a1 + 16);
  v7 = *(_DWORD *)(a1 + 20);
  v9 = v7 - 2;
  if (v7 < 2 || v8 <= 1)
    __assert_rtn("ErodeOrDilateRect2x2", "ImageUtils.cpp", 669, "im.Cols() > 1 && im.Rows() > 1");
  v11 = v7 - 1;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(char **)(a2 + 8);
  bzero(v13, v7 * v8);
  v14 = 0;
  v15 = *(unsigned int *)(a1 + 20);
  v16 = v9 + 1;
  do
  {
    v18 = 0;
    v19 = v13;
    v20 = &v13[*(unsigned int *)(a1 + 20)];
    do
    {
      if (*(_BYTE *)(v12 + v18))
      {
        *(_WORD *)&v13[v18] = 257;
        *(_WORD *)&v20[v18] = 257;
      }
      ++v18;
    }
    while (v11 != (_DWORD)v18);
    v21 = &v13[v18];
    if (*(_BYTE *)(v12 + v16))
    {
      v13[v18] = 1;
      v21[v15] = 1;
    }
    v12 += v9 + 2;
    v13 = v21 + 1;
  }
  while (v14++ != v8 - 2);
  v22 = 0;
  do
  {
    if (*(_BYTE *)(v12 + v22))
    {
      v23 = &v19[v22 + v18];
      v23[1] = 1;
      v23[2] = 1;
    }
    ++v22;
  }
  while (v11 != (_DWORD)v22);
  if (*(_BYTE *)(v12 + v16))
    v19[v18 + 1 + v22] = 1;
}

uint64_t ErodeOrDilateRect3x3<true>(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  _BYTE *v11;
  _WORD *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  unsigned int v17;
  _WORD *v18;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  int v31;
  _BYTE *v32;
  _BYTE *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v4 = *(_DWORD *)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 20);
  v6 = v5 * (unint64_t)v4;
  if (*(_QWORD *)(a2 + 32) < v6)
  {
    if (*(_QWORD *)(a2 + 8) && *(_BYTE *)(a2 + 24))
      MEMORY[0x20BD36480]();
    *(_QWORD *)(a2 + 8) = operator new[]();
    *(_QWORD *)(a2 + 32) = v6;
    *(_BYTE *)(a2 + 24) = 1;
  }
  *(_DWORD *)(a2 + 16) = v4;
  *(_DWORD *)(a2 + 20) = v5;
  v7 = *(_DWORD *)(a1 + 16);
  v8 = *(_DWORD *)(a1 + 20);
  v9 = v8 - 3;
  if (v8 < 3 || v7 <= 2)
    __assert_rtn("ErodeOrDilateRect3x3", "ImageUtils.cpp", 721, "im.Cols() > 2 && im.Rows() > 2");
  v11 = *(_BYTE **)(a1 + 8);
  v12 = *(_WORD **)(a2 + 8);
  bzero(v12, v8 * v7);
  if (*v11)
  {
    *v12 = 257;
    *(_WORD *)((char *)v12 + *(unsigned int *)(a1 + 20)) = 257;
  }
  v13 = (uint64_t)v12 + 1;
  v14 = *(unsigned int *)(a1 + 20);
  v15 = v11 + 1;
  v16 = v8 - 2;
  v17 = v8 - 2;
  do
  {
    v18 = (_WORD *)v13;
    if (*v15++)
    {
      *(_WORD *)(v13 - 1) = 257;
      *(_BYTE *)(v13 + 1) = 1;
      v20 = v13 + v14;
      *(_WORD *)(v20 - 1) = 257;
      *(_BYTE *)(v20 + 1) = 1;
    }
    v13 = (uint64_t)v18 + 1;
    --v17;
  }
  while (v17);
  v21 = v9 + 2;
  v22 = &v11[v9 + 2];
  v23 = *(unsigned int *)(a1 + 20);
  if (*v22)
  {
    *v18 = 257;
    *(_WORD *)((char *)v18 + v23) = 257;
    LODWORD(v23) = *(_DWORD *)(a1 + 20);
  }
  v24 = v18 + 1;
  v25 = v22 + 1;
  v26 = v23;
  v27 = -(uint64_t)v23;
  v28 = v9 + 3;
  v29 = (uint64_t)&v11[v9 + 4];
  result = 1;
  v31 = 1;
  do
  {
    v35 = v13;
    if (*v25)
    {
      *v24 = 1;
      *(_BYTE *)(v13 + 2) = 1;
      *(_WORD *)&v24[v27] = 257;
      *(_WORD *)&v24[v26] = 257;
    }
    v36 = 0;
    v37 = *(unsigned int *)(a1 + 20);
    v38 = v13 + v37;
    v39 = v35 - v37;
    do
    {
      if (*(_BYTE *)(v29 + v36))
      {
        v40 = (_BYTE *)(v35 + v36);
        v40[1] = 1;
        v40[2] = 1;
        v40[3] = 1;
        v41 = v39 + v36;
        *(_WORD *)(v41 + 1) = 257;
        *(_BYTE *)(v41 + 3) = 1;
        v42 = v38 + v36;
        *(_WORD *)(v42 + 1) = 257;
        *(_BYTE *)(v42 + 3) = 1;
      }
      ++v36;
    }
    while (v16 != (_DWORD)v36);
    v43 = (_BYTE *)(v35 + v36);
    v13 = v35 + v36 + 2;
    if (v22[v28])
    {
      v43[1] = 1;
      v43[2] = 1;
      *(_WORD *)(v13 + v27 - 1) = 257;
      *(_WORD *)(v13 + v26 - 1) = 257;
    }
    v32 = v43 + 1;
    v33 = &v22[v21];
    v24 = v43 + 3;
    v25 = &v22[v21 + 2];
    v29 += v28;
    v22 += v28;
  }
  while (v31++ != v7 - 2);
  v44 = *(unsigned int *)(a1 + 20);
  v45 = v35 + v36 + 3;
  if (*v25)
  {
    *((_WORD *)v32 + 1) = 257;
    *(_WORD *)&v24[-v44] = 257;
    LODWORD(v44) = *(_DWORD *)(a1 + 20);
  }
  v46 = v33 + 3;
  v47 = -(uint64_t)v44;
  do
  {
    v48 = v45;
    if (*v46)
    {
      *(_WORD *)v45 = 257;
      *(_BYTE *)(v45 + 2) = 1;
      v49 = v45 + v47;
      *(_WORD *)v49 = 257;
      *(_BYTE *)(v49 + 2) = 1;
    }
    ++v46;
    v45 = v48 + 1;
    --v16;
  }
  while (v16);
  if (v25[v21])
  {
    *(_WORD *)v45 = 257;
    *(_BYTE *)(v45 + v47) = 1;
    *(_BYTE *)(v48 + 2 + v47) = 1;
  }
  return result;
}

uint64_t ImageUtils::CloseRect2x2(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  BOOL v4;
  uint64_t (**v5)();
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v9 = 0;
  v6 = 0;
  v7 = 0;
  v5 = &off_24C4213D8;
  v8 = 0;
  ErodeOrDilateRect2x2<true>(a1, (uint64_t)&v5);
  ImageUtils::ErodeRect2x2((uint64_t)&v5, a2);
  result = v6;
  if (v6)
    v4 = v8 == 0;
  else
    v4 = 1;
  if (!v4)
    JUMPOUT(0x20BD36480);
  return result;
}

void sub_20B63AA64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  BOOL v14;

  if (a11)
    v14 = a13 == 0;
  else
    v14 = 1;
  if (!v14)
    MEMORY[0x20BD36480]();
  _Unwind_Resume(exception_object);
}

uint64_t Matrix<BOOL>::~Matrix(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C4213D8;
  if (*(_QWORD *)(a1 + 8) && *(_BYTE *)(a1 + 24))
  {
    MEMORY[0x20BD36480]();
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 24) = 0;
  }
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void Matrix<BOOL>::~Matrix(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C4213D8;
  if (*(_QWORD *)(a1 + 8) && *(_BYTE *)(a1 + 24))
  {
    MEMORY[0x20BD36480]();
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 24) = 0;
  }
  *(_QWORD *)(a1 + 16) = 0;
  JUMPOUT(0x20BD36498);
}

uint64_t ImageUtils::CloseRect3x3(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  BOOL v4;
  uint64_t (**v5)();
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v9 = 0;
  v6 = 0;
  v7 = 0;
  v5 = &off_24C4213D8;
  v8 = 0;
  ErodeOrDilateRect3x3<true>(a1, (uint64_t)&v5);
  ErodeOrDilateRect3x3<false>((uint64_t)&v5, a2);
  result = v6;
  if (v6)
    v4 = v8 == 0;
  else
    v4 = 1;
  if (!v4)
    JUMPOUT(0x20BD36480);
  return result;
}

void sub_20B63ABEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  BOOL v14;

  if (a11)
    v14 = a13 == 0;
  else
    v14 = 1;
  if (!v14)
    MEMORY[0x20BD36480]();
  _Unwind_Resume(exception_object);
}

uint64_t ImageUtils::Scale<double>(uint64_t a1, uint64_t a2, double a3)
{
  return Scale<double>(a1, a2, a3, a3);
}

uint64_t Scale<double>(uint64_t result, uint64_t a2, double a3, double a4)
{
  uint64_t v4;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  double v14;
  unsigned int v15;
  double v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  double *v20;
  unint64_t v21;
  unint64_t v22;
  double v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  int v27;
  double *v28;
  uint64_t v29;
  double *v30;
  unint64_t v31;
  int v32;
  double v33;
  double *v34;
  double *v35;
  uint64_t v36;
  double *v37;
  double v38;
  double v39;
  double v40;
  int v41;
  double v42;
  double v43;
  double v44;
  int v45;
  double *v46;
  double v47;
  uint64_t v48;
  double v49;
  double *v50;
  int v51;
  double v52;
  double v53;
  double *v54;
  double *v55;
  uint64_t v56;
  int v57;
  double v58;
  double *v59;
  uint64_t v60;
  double v61;
  int v62;
  int v63;
  double *v64;
  double *v65;
  unint64_t v66;
  int v67;
  double *v68;
  double v69;
  double *i;
  double v71;
  double *v72;
  double v73;
  double v74;
  double v75;
  int v76;
  double v77;
  double *v78;
  double v79;
  double v80;
  int v81;
  double v82;
  double *v83;
  double v84;
  double v85;
  double *v86;
  int v87;
  double v88;
  double *v89;
  double v90;
  double *j;
  double v92;
  _BOOL4 v93;
  uint64_t v94;
  int v95;
  int v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t (**v100)();
  double *v101;
  int v102;
  unsigned int v103;
  BOOL v104;
  uint64_t v105;

  v8 = *(_DWORD *)(result + 16);
  v9 = *(int *)(result + 20);
  v98 = result;
  v10 = vcvtpd_u64_f64((double)v8 * a3);
  LODWORD(v4) = vcvtpd_u64_f64((double)(int)v9 * a4);
  v11 = (v8 * v4);
  if ((_DWORD)v11)
  {
    result = operator new[]();
    v12 = result;
  }
  else
  {
    v12 = 0;
  }
  v13 = 8 * v10 * (unint64_t)v4;
  if (*(_QWORD *)(a2 + 32) < v13)
  {
    if (*(_QWORD *)(a2 + 8) && *(_BYTE *)(a2 + 24))
      MEMORY[0x20BD36480]();
    result = operator new[]();
    *(_QWORD *)(a2 + 8) = result;
    *(_QWORD *)(a2 + 32) = v13;
    *(_BYTE *)(a2 + 24) = 1;
  }
  *(_DWORD *)(a2 + 16) = v10;
  *(_DWORD *)(a2 + 20) = v4;
  v94 = a2;
  if (a4 >= 1.0)
    v14 = 4.0;
  else
    v14 = 4.0 / a4;
  v15 = vcvtpd_u64_f64(v14);
  if (a3 >= 1.0)
    v16 = 4.0;
  else
    v16 = 4.0 / a3;
  v17 = vcvtpd_u64_f64(v16);
  v95 = v17;
  v96 = v8;
  if (v17 <= v15)
    v17 = v15;
  v18 = v17 + 4;
  v97 = v10;
  if (v17 == -4)
  {
    v21 = (v8 * v4);
    v19 = 0;
    v20 = 0;
  }
  else
  {
    v19 = 8 * (v17 + 4);
    result = operator new[]();
    v20 = (double *)result;
    v21 = v11;
  }
  v102 = 1;
  v103 = v18;
  v104 = v18 != 0;
  v105 = v19;
  v100 = &off_24C421338;
  v101 = v20;
  if ((_DWORD)v4)
  {
    v22 = 0;
    v23 = fmin(a4, 1.0);
    v24 = 8 * v9;
    v25 = v12 + 8 * v21;
    do
    {
      v99 = 0;
      result = CalculateWeightsForScale<double>((uint64_t)&v100, v15, (signed int *)&v99 + 1, (int *)&v99, v14, ((double)v22 + 0.5) / a4 + -0.5, v23);
      if ((int)v99 >= (int)v9)
        v26 = v9 - 1;
      else
        v26 = v99;
      if ((int)v99 >= (int)v9)
        v27 = v99 - v9 + 1;
      else
        v27 = 0;
      if (v22 < v21)
      {
        v28 = (double *)(v12 + 8 * v22);
        v29 = *(_QWORD *)(v98 + 8);
        v30 = (double *)(v29 + 8 * (HIDWORD(v99) & ~(SHIDWORD(v99) >> 31)));
        v31 = v29 + 8 * v26;
        v32 = (SHIDWORD(v99) >> 31) & -HIDWORD(v99);
        if (v32)
        {
          do
          {
            v43 = *v30;
            v44 = 0.0;
            v45 = v32;
            v46 = v20;
            do
            {
              v47 = *v46++;
              v44 = v44 + v47 * v43;
              --v45;
            }
            while (v45);
            if ((unint64_t)v30 < v31)
            {
              v48 = 0;
              do
              {
                v44 = v44 + v46[v48] * v30[v48];
                ++v48;
              }
              while ((unint64_t)&v30[v48] < v31);
              v46 = (double *)((char *)v46 + v48 * 8);
              v43 = v30[v48];
            }
            v49 = v44 + *v46 * v43;
            if (v27)
            {
              v50 = v46 + 1;
              v51 = v27;
              do
              {
                v52 = *v50++;
                v49 = v49 + v52 * v43;
                --v51;
              }
              while (v51);
            }
            *v28 = v49;
            v28 += v4;
            v30 = (double *)((char *)v30 + v24);
            v31 += 8 * v9;
          }
          while ((unint64_t)v28 < v25);
        }
        else if (v27)
        {
          do
          {
            v33 = 0.0;
            v34 = v30;
            v35 = v20;
            if ((unint64_t)v30 < v31)
            {
              v36 = 0;
              do
              {
                v33 = v33 + v20[v36] * v30[v36];
                v34 = &v30[++v36];
              }
              while ((unint64_t)&v30[v36] < v31);
              v35 = &v20[v36];
            }
            v38 = *v35;
            v37 = v35 + 1;
            v39 = *v34;
            v40 = v33 + v38 * *v34;
            v41 = v27;
            do
            {
              v42 = *v37++;
              v40 = v40 + v42 * v39;
              --v41;
            }
            while (v41);
            *v28 = v40;
            v28 += v4;
            v30 = (double *)((char *)v30 + v24);
            v31 += 8 * v9;
          }
          while ((unint64_t)v28 < v25);
        }
        else
        {
          do
          {
            v53 = 0.0;
            v54 = v30;
            v55 = v20;
            if ((unint64_t)v30 < v31)
            {
              v56 = 0;
              do
              {
                v53 = v53 + v20[v56] * v30[v56];
                v54 = &v30[++v56];
              }
              while ((unint64_t)&v30[v56] < v31);
              v55 = &v20[v56];
            }
            *v28 = v53 + *v55 * *v54;
            v28 += v4;
            v30 = (double *)((char *)v30 + v24);
            v31 += 8 * v9;
          }
          while ((unint64_t)v28 < v25);
        }
      }
      ++v22;
    }
    while (v22 != v4);
  }
  if (!v97)
  {
    v93 = v18 != 0;
    if (!v20)
      goto LABEL_93;
    goto LABEL_91;
  }
  v57 = 0;
  v58 = fmin(a3, 1.0);
  v59 = *(double **)(v94 + 8);
  v60 = 8 * v4;
  v61 = 0.0;
  do
  {
    v99 = 0;
    result = CalculateWeightsForScale<double>((uint64_t)&v100, v95, (signed int *)&v99 + 1, (int *)&v99, v16, (v61 + 0.5) / a3 + -0.5, v58);
    if ((int)v99 >= v96)
      v62 = v96 - 1;
    else
      v62 = v99;
    if ((int)v99 >= v96)
      v63 = v99 - v96 + 1;
    else
      v63 = 0;
    if ((_DWORD)v4)
    {
      v64 = &v59[v4];
      v65 = (double *)(v12 + 8 * (HIDWORD(v99) & ~(SHIDWORD(v99) >> 31)) * v4);
      v66 = v12 + 8 * (v62 * v4);
      v67 = (SHIDWORD(v99) >> 31) & -HIDWORD(v99);
      if (v67)
      {
        do
        {
          v78 = v101;
          v79 = *v65;
          v80 = 0.0;
          v81 = v67;
          do
          {
            v82 = *v78++;
            v80 = v80 + v82 * v79;
            --v81;
          }
          while (v81);
          v83 = v65;
          if ((unint64_t)v65 < v66)
          {
            do
            {
              v84 = *v78++;
              v80 = v80 + v84 * *v83;
              v83 = (double *)((char *)v83 + v60);
            }
            while ((unint64_t)v83 < v66);
            v79 = *v83;
          }
          v85 = v80 + *v78 * v79;
          if (v63)
          {
            v86 = v78 + 1;
            v87 = v63;
            do
            {
              v88 = *v86++;
              v85 = v85 + v88 * v79;
              --v87;
            }
            while (v87);
          }
          *v59++ = v85;
          ++v65;
          v66 += 8;
        }
        while (v59 < v64);
      }
      else if (v63)
      {
        do
        {
          v68 = v101;
          v69 = 0.0;
          for (i = v65; (unint64_t)i < v66; i = (double *)((char *)i + v60))
          {
            v71 = *v68++;
            v69 = v69 + v71 * *i;
          }
          v73 = *v68;
          v72 = v68 + 1;
          v74 = *i;
          v75 = v69 + v73 * *i;
          v76 = v63;
          do
          {
            v77 = *v72++;
            v75 = v75 + v77 * v74;
            --v76;
          }
          while (v76);
          *v59++ = v75;
          ++v65;
          v66 += 8;
        }
        while (v59 < v64);
      }
      else
      {
        do
        {
          v89 = v101;
          v90 = 0.0;
          for (j = v65; (unint64_t)j < v66; j = (double *)((char *)j + v60))
          {
            v92 = *v89++;
            v90 = v90 + v92 * *j;
          }
          *v59++ = v90 + *v89 * *j;
          ++v65;
          v66 += 8;
        }
        while (v59 < v64);
      }
    }
    v61 = v61 + 1.0;
    ++v57;
  }
  while (v57 != v97);
  v20 = v101;
  v93 = v104;
  if (v101)
  {
LABEL_91:
    if (v93)
      result = MEMORY[0x20BD36480](v20, 0x1000C8000313F17);
  }
LABEL_93:
  if ((_DWORD)v21)
  {
    if (v12)
      JUMPOUT(0x20BD36480);
  }
  return result;
}

void sub_20B63B268(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  int v2;
  BOOL v4;

  if (v2)
    v4 = v1 == 0;
  else
    v4 = 1;
  if (!v4)
    MEMORY[0x20BD36480](v1, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

uint64_t CalculateWeightsForScale<double>(uint64_t result, int a2, signed int *a3, int *a4, double a5, double a6, double a7)
{
  int v7;
  signed int v8;
  signed int v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double *v21;
  double *v22;
  uint64_t v23;
  signed int v24;
  int32x2_t v25;
  float64x2_t v26;
  uint64_t v27;
  uint64_t v33;
  int8x16_t *v35;
  uint64_t v41;
  int32x2_t v42;
  int32x2_t v43;
  int64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int v60;
  double *v61;
  double v62;
  uint64_t v63;
  float64x2_t *v64;
  unint64_t v65;
  unint64_t v66;
  float64_t *v67;
  unint64_t v68;
  double *v69;
  uint64_t v70;
  float64x2_t v71;
  uint64_t v72;
  float64x2_t *v73;
  float64x2_t v74;
  unint64_t v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;

  v7 = vcvtmd_s64_f64(a6 + a5 * -0.5);
  v8 = v7;
  v9 = v7 + a2;
  v10 = (a6 - (double)v7) * a7;
  v11 = fabs(v10);
  v12 = v10 * v10;
  v13 = v10 * v10 * v11;
  v14 = 1.0;
  if (v11 <= 1.0)
  {
    v15 = v12 * -2.5 + v13 * 1.5;
LABEL_5:
    v16 = v15 + v14;
    if (v16 != 0.0)
      goto LABEL_12;
    goto LABEL_9;
  }
  v14 = 2.0;
  if (v11 <= 2.0)
  {
    v15 = v12 * 2.5 + v13 * -0.5 + v11 * -4.0;
    goto LABEL_5;
  }
  do
  {
LABEL_9:
    v17 = (a6 - (double)++v8) * a7;
    v18 = fabs(v17);
    v19 = v17 * v17;
    v20 = v17 * v17 * v18;
    if (v18 <= 1.0)
    {
      v16 = v19 * -2.5 + v20 * 1.5 + 1.0;
    }
    else
    {
      v16 = 0.0;
      if (v18 <= 2.0)
        v16 = v19 * 2.5 + v20 * -0.5 + v18 * -4.0 + 2.0;
    }
  }
  while (v16 == 0.0);
LABEL_12:
  v21 = *(double **)(result + 8);
  *v21 = v16;
  v22 = v21 + 1;
  if (v8 >= v9)
    goto LABEL_18;
  v23 = (v9 + ~v8);
  if (v23 > 2)
  {
    v25 = vadd_s32(vdup_n_s32(v8), (int32x2_t)0x100000000);
    v26 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a6, 0);
    v27 = v23 + 1;
    __asm { FMOV            V7.2D, #1.0 }
    v33 = (v23 + 1) & 0x1FFFFFFFCLL;
    __asm { FMOV            V16.2D, #-2.5 }
    v35 = (int8x16_t *)(v21 + 3);
    __asm
    {
      FMOV            V17.2D, #1.5
      FMOV            V18.2D, #2.0
      FMOV            V19.2D, #2.5
      FMOV            V20.2D, #-0.5
      FMOV            V21.2D, #-4.0
    }
    v41 = v33;
    do
    {
      v42 = vadd_s32(v25, (int32x2_t)0x100000001);
      v43 = vadd_s32(v25, (int32x2_t)0x300000003);
      v44.i64[0] = v42.i32[0];
      v44.i64[1] = v42.i32[1];
      v45 = vcvtq_f64_s64(v44);
      v44.i64[0] = v43.i32[0];
      v44.i64[1] = v43.i32[1];
      v46 = vmulq_n_f64(vsubq_f64(v26, v45), a7);
      v47 = vmulq_n_f64(vsubq_f64(v26, vcvtq_f64_s64(v44)), a7);
      v48 = vabsq_f64(v46);
      v49 = vabsq_f64(v47);
      v50 = vmulq_f64(v46, v46);
      v51 = vmulq_f64(v47, v47);
      v52 = vmulq_f64(v50, v48);
      v53 = vmulq_f64(v51, v49);
      v54 = (int8x16_t)vcgeq_f64(_Q7, v48);
      v55 = (int8x16_t)vcgeq_f64(_Q7, v49);
      v56 = (int8x16_t)vcgeq_f64(_Q18, v48);
      v57 = (int8x16_t)vcgeq_f64(_Q18, v49);
      v58 = vbicq_s8(vbslq_s8(vbicq_s8(v56, v54), (int8x16_t)vaddq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v50, _Q19), _Q20, v52), _Q21, v48), _Q18), (int8x16_t)vaddq_f64(vmlaq_f64(vmulq_f64(v50, _Q16), _Q17, v52), _Q7)), vbicq_s8(vmvnq_s8(v54), v56));
      v59 = vbicq_s8(vbslq_s8(vbicq_s8(v57, v55), (int8x16_t)vaddq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v51, _Q19), _Q20, v53), _Q21, v49), _Q18), (int8x16_t)vaddq_f64(vmlaq_f64(vmulq_f64(v51, _Q16), _Q17, v53), _Q7)), vbicq_s8(vmvnq_s8(v55), v57));
      v35[-1] = v58;
      *v35 = v59;
      v16 = v16 + *(double *)v58.i64 + *(double *)&v58.i64[1] + *(double *)v59.i64 + *(double *)&v59.i64[1];
      v25 = vadd_s32(v25, (int32x2_t)0x400000004);
      v35 += 2;
      v41 -= 4;
    }
    while (v41);
    v22 += v33;
    if (v27 == v33)
      goto LABEL_18;
    v24 = v8 + v33;
  }
  else
  {
    v24 = v8;
  }
  do
  {
    v77 = (a6 - (double)++v24) * a7;
    v78 = fabs(v77);
    v79 = v77 * v77;
    v80 = v77 * v77 * v78;
    if (v78 <= 1.0)
    {
      v76 = v79 * -2.5 + v80 * 1.5 + 1.0;
    }
    else
    {
      v76 = 0.0;
      if (v78 <= 2.0)
        v76 = v79 * 2.5 + v80 * -0.5 + v78 * -4.0 + 2.0;
    }
    *v22++ = v76;
    v16 = v16 + v76;
  }
  while (v9 != v24);
LABEL_18:
  v60 = v7 + a2 + 1;
  v61 = v22 - 1;
  do
  {
    v62 = *v61--;
    --v60;
  }
  while (v62 == 0.0);
  v63 = (v60 - v8 + 1);
  if (v60 - v8 != -1)
  {
    v64 = *(float64x2_t **)(result + 8);
    v65 = ~(unint64_t)v64;
    v66 = (unint64_t)&v64->f64[v63];
    v67 = &v64->f64[1];
    if (v66 <= (unint64_t)&v64->f64[1])
      v66 = (unint64_t)&v64->f64[1];
    v68 = v66 + v65;
    v69 = *(double **)(result + 8);
    if (v68 < 0x18)
      goto LABEL_30;
    v70 = (v68 >> 3) + 1;
    v71 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v16, 0);
    if (&v64->f64[v60 - v8 + 1] > v67)
      v67 = &v64->f64[v60 - v8 + 1];
    v72 = ((((unint64_t)v67 + v65) >> 3) + 1) & 0x3FFFFFFFFFFFFFFCLL;
    v73 = v64 + 1;
    do
    {
      v74 = vdivq_f64(*v73, v71);
      v73[-1] = vdivq_f64(v73[-1], v71);
      *v73 = v74;
      v73 += 2;
      v72 -= 4;
    }
    while (v72);
    if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL))
    {
      v69 = &v64->f64[v70 & 0x3FFFFFFFFFFFFFFCLL];
LABEL_30:
      v75 = (unint64_t)&v64->f64[v63];
      do
      {
        *v69 = *v69 / v16;
        ++v69;
      }
      while ((unint64_t)v69 < v75);
    }
  }
  *a3 = v8;
  *a4 = v60;
  return result;
}

uint64_t MatrixNxPts<1u,double>::~MatrixNxPts(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C4213F8;
  if (*(_QWORD *)(a1 + 8) && *(_BYTE *)(a1 + 24))
  {
    MEMORY[0x20BD36480]();
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 24) = 0;
  }
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void MatrixNxPts<1u,double>::~MatrixNxPts(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C4213F8;
  if (*(_QWORD *)(a1 + 8) && *(_BYTE *)(a1 + 24))
  {
    MEMORY[0x20BD36480]();
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 24) = 0;
  }
  *(_QWORD *)(a1 + 16) = 0;
  JUMPOUT(0x20BD36498);
}

uint64_t ImageUtils::Scale<unsigned short>(uint64_t result, uint64_t a2, double a3)
{
  uint64_t v3;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  double v12;
  int v13;
  int v14;
  uint64_t v15;
  double *v16;
  double v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  double v21;
  double v22;
  double v23;
  int v24;
  int v25;
  double *v26;
  uint64_t v27;
  _WORD *v28;
  unint64_t v29;
  int v30;
  double v31;
  _WORD *v32;
  double *v33;
  double v34;
  double *v35;
  double v36;
  double v37;
  int v38;
  double v39;
  double v40;
  int v41;
  double *v42;
  double v43;
  _WORD *v44;
  double v45;
  double v46;
  double v47;
  double *v48;
  int v49;
  double v50;
  double v51;
  _WORD *v52;
  double *v53;
  double v54;
  double v55;
  int v56;
  double *v57;
  uint64_t v58;
  double v59;
  int v60;
  int v61;
  double *v62;
  double *v63;
  unint64_t v64;
  int v65;
  double *v66;
  double v67;
  double *i;
  double v69;
  double *v70;
  double v71;
  double v72;
  double v73;
  int v74;
  double v75;
  double *v76;
  double v77;
  double v78;
  int v79;
  double v80;
  double *v81;
  double v82;
  double v83;
  double *v84;
  int v85;
  double v86;
  double *v87;
  double v88;
  double *j;
  double v90;
  _BOOL4 v91;
  uint64_t v92;
  int v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t (**v97)();
  double *v98;
  int v99;
  int v100;
  BOOL v101;
  uint64_t v102;

  v6 = *(_DWORD *)(result + 16);
  v7 = *(int *)(result + 20);
  v95 = result;
  v8 = vcvtpd_u64_f64((double)v6 * a3);
  LODWORD(v3) = vcvtpd_u64_f64((double)(int)v7 * a3);
  v9 = (v6 * v3);
  if ((_DWORD)v9)
  {
    result = operator new[]();
    v10 = result;
  }
  else
  {
    v10 = 0;
  }
  v11 = 8 * v8 * (unint64_t)v3;
  if (*(_QWORD *)(a2 + 32) < v11)
  {
    if (*(_QWORD *)(a2 + 8) && *(_BYTE *)(a2 + 24))
      MEMORY[0x20BD36480]();
    result = operator new[]();
    *(_QWORD *)(a2 + 8) = result;
    *(_QWORD *)(a2 + 32) = v11;
    *(_BYTE *)(a2 + 24) = 1;
  }
  *(_DWORD *)(a2 + 16) = v8;
  *(_DWORD *)(a2 + 20) = v3;
  if (a3 >= 1.0)
    v12 = 4.0;
  else
    v12 = 4.0 / a3;
  v13 = vcvtpd_u64_f64(v12);
  v14 = v13 + 4;
  v93 = v6;
  v94 = v8;
  v92 = a2;
  if (v13 == -4)
  {
    v15 = 0;
    v16 = 0;
  }
  else
  {
    v15 = 8 * (v13 + 4);
    result = operator new[]();
    v16 = (double *)result;
  }
  v17 = fmin(a3, 1.0);
  v99 = 1;
  v100 = v13 + 4;
  v101 = v14 != 0;
  v102 = v15;
  v97 = &off_24C421338;
  v98 = v16;
  if ((_DWORD)v3)
  {
    v18 = 0;
    v19 = 2 * v7;
    v20 = v10 + 8 * v9;
    do
    {
      v96 = 0;
      result = CalculateWeightsForScale<double>((uint64_t)&v97, v13, (signed int *)&v96 + 1, (int *)&v96, v12, ((double)v18 + 0.5) / a3 + -0.5, v17);
      if ((int)v96 >= (int)v7)
        v24 = v7 - 1;
      else
        v24 = v96;
      if ((int)v96 >= (int)v7)
        v25 = v96 - v7 + 1;
      else
        v25 = 0;
      if (v18 < v9)
      {
        v26 = (double *)(v10 + 8 * v18);
        v27 = *(_QWORD *)(v95 + 8);
        v28 = (_WORD *)(v27 + 2 * (HIDWORD(v96) & ~(SHIDWORD(v96) >> 31)));
        v29 = v27 + 2 * v24;
        v30 = (SHIDWORD(v96) >> 31) & -HIDWORD(v96);
        if (v30)
        {
          do
          {
            LOWORD(v21) = *v28;
            v21 = (double)*(unint64_t *)&v21;
            v40 = 0.0;
            v41 = v30;
            v42 = v16;
            do
            {
              v43 = *v42++;
              v40 = v40 + v43 * v21;
              --v41;
            }
            while (v41);
            v44 = v28;
            if ((unint64_t)v28 < v29)
            {
              do
              {
                v45 = *v42++;
                v46 = v45;
                LODWORD(v45) = (unsigned __int16)*v44++;
                v40 = v40 + v46 * (double)LODWORD(v45);
              }
              while ((unint64_t)v44 < v29);
              LOWORD(v46) = *v44;
              v21 = (double)*(unint64_t *)&v46;
            }
            v47 = v40 + *v42 * v21;
            if (v25)
            {
              v48 = v42 + 1;
              v49 = v25;
              do
              {
                v50 = *v48++;
                v47 = v47 + v50 * v21;
                --v49;
              }
              while (v49);
            }
            *v26 = v47;
            v26 += v3;
            v28 = (_WORD *)((char *)v28 + v19);
            v29 += v19;
          }
          while ((unint64_t)v26 < v20);
        }
        else if (v25)
        {
          do
          {
            v31 = 0.0;
            v32 = v28;
            v33 = v16;
            if ((unint64_t)v28 < v29)
            {
              v33 = v16;
              v32 = v28;
              do
              {
                v34 = *v33++;
                v22 = v34;
                LODWORD(v34) = (unsigned __int16)*v32++;
                v31 = v31 + v22 * (double)LODWORD(v34);
              }
              while ((unint64_t)v32 < v29);
            }
            v36 = *v33;
            v35 = v33 + 1;
            LOWORD(v22) = *v32;
            v22 = (double)*(unint64_t *)&v22;
            v37 = v31 + v36 * v22;
            v38 = v25;
            do
            {
              v39 = *v35++;
              v37 = v37 + v39 * v22;
              --v38;
            }
            while (v38);
            *v26 = v37;
            v26 += v3;
            v28 = (_WORD *)((char *)v28 + v19);
            v29 += v19;
          }
          while ((unint64_t)v26 < v20);
        }
        else
        {
          do
          {
            v51 = 0.0;
            v52 = v28;
            v53 = v16;
            if ((unint64_t)v28 < v29)
            {
              v53 = v16;
              v52 = v28;
              do
              {
                v54 = *v53++;
                v55 = v54;
                LODWORD(v54) = (unsigned __int16)*v52++;
                v23 = (double)LODWORD(v54);
                v51 = v51 + v55 * (double)LODWORD(v54);
              }
              while ((unint64_t)v52 < v29);
            }
            LOWORD(v23) = *v52;
            v23 = (double)*(unint64_t *)&v23;
            *v26 = v51 + *v53 * v23;
            v26 += v3;
            v28 = (_WORD *)((char *)v28 + v19);
            v29 += v19;
          }
          while ((unint64_t)v26 < v20);
        }
      }
      ++v18;
    }
    while (v18 != v3);
  }
  if (!v94)
  {
    v91 = v14 != 0;
    if (!v16)
      goto LABEL_86;
    goto LABEL_84;
  }
  v56 = 0;
  v57 = *(double **)(v92 + 8);
  v58 = 8 * v3;
  v59 = 0.0;
  do
  {
    v96 = 0;
    result = CalculateWeightsForScale<double>((uint64_t)&v97, v13, (signed int *)&v96 + 1, (int *)&v96, v12, (v59 + 0.5) / a3 + -0.5, v17);
    if ((int)v96 >= v93)
      v60 = v93 - 1;
    else
      v60 = v96;
    if ((int)v96 >= v93)
      v61 = v96 - v93 + 1;
    else
      v61 = 0;
    if ((_DWORD)v3)
    {
      v62 = &v57[v3];
      v63 = (double *)(v10 + 8 * (HIDWORD(v96) & ~(SHIDWORD(v96) >> 31)) * v3);
      v64 = v10 + 8 * (v60 * v3);
      v65 = (SHIDWORD(v96) >> 31) & -HIDWORD(v96);
      if (v65)
      {
        do
        {
          v76 = v98;
          v77 = *v63;
          v78 = 0.0;
          v79 = v65;
          do
          {
            v80 = *v76++;
            v78 = v78 + v80 * v77;
            --v79;
          }
          while (v79);
          v81 = v63;
          if ((unint64_t)v63 < v64)
          {
            do
            {
              v82 = *v76++;
              v78 = v78 + v82 * *v81;
              v81 = (double *)((char *)v81 + v58);
            }
            while ((unint64_t)v81 < v64);
            v77 = *v81;
          }
          v83 = v78 + *v76 * v77;
          if (v61)
          {
            v84 = v76 + 1;
            v85 = v61;
            do
            {
              v86 = *v84++;
              v83 = v83 + v86 * v77;
              --v85;
            }
            while (v85);
          }
          *v57++ = v83;
          ++v63;
          v64 += 8;
        }
        while (v57 < v62);
      }
      else if (v61)
      {
        do
        {
          v66 = v98;
          v67 = 0.0;
          for (i = v63; (unint64_t)i < v64; i = (double *)((char *)i + v58))
          {
            v69 = *v66++;
            v67 = v67 + v69 * *i;
          }
          v71 = *v66;
          v70 = v66 + 1;
          v72 = *i;
          v73 = v67 + v71 * *i;
          v74 = v61;
          do
          {
            v75 = *v70++;
            v73 = v73 + v75 * v72;
            --v74;
          }
          while (v74);
          *v57++ = v73;
          ++v63;
          v64 += 8;
        }
        while (v57 < v62);
      }
      else
      {
        do
        {
          v87 = v98;
          v88 = 0.0;
          for (j = v63; (unint64_t)j < v64; j = (double *)((char *)j + v58))
          {
            v90 = *v87++;
            v88 = v88 + v90 * *j;
          }
          *v57++ = v88 + *v87 * *j;
          ++v63;
          v64 += 8;
        }
        while (v57 < v62);
      }
    }
    v59 = v59 + 1.0;
    ++v56;
  }
  while (v56 != v94);
  v16 = v98;
  v91 = v101;
  if (v98)
  {
LABEL_84:
    if (v91)
      result = MEMORY[0x20BD36480](v16, 0x1000C8000313F17);
  }
LABEL_86:
  if ((_DWORD)v9)
  {
    if (v10)
      JUMPOUT(0x20BD36480);
  }
  return result;
}

void sub_20B63BD4C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  int v2;
  BOOL v4;

  if (v2)
    v4 = v1 == 0;
  else
    v4 = 1;
  if (!v4)
    MEMORY[0x20BD36480](v1, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

uint64_t ImageUtils::Scale<unsigned char>(uint64_t result, uint64_t a2, double a3)
{
  uint64_t v3;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  double v12;
  int v13;
  int v14;
  uint64_t v15;
  double *v16;
  double v17;
  unint64_t v18;
  unint64_t v19;
  double v20;
  double v21;
  double v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  double *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  unsigned int v34;
  double v35;
  double v36;
  double *v37;
  double v38;
  double v39;
  uint64_t v40;
  double v41;
  unint64_t v42;
  double *v43;
  int v44;
  double v45;
  uint64_t v46;
  double *v47;
  double v48;
  _BYTE *v49;
  double *v50;
  uint64_t v51;
  double *v52;
  double v53;
  double v54;
  int v55;
  double v56;
  double v57;
  _BYTE *v58;
  double *v59;
  uint64_t v60;
  int v61;
  double *v62;
  uint64_t v63;
  double v64;
  int v65;
  int v66;
  double *v67;
  double *v68;
  unint64_t v69;
  int v70;
  double *v71;
  double v72;
  double *i;
  double v74;
  double *v75;
  double v76;
  double v77;
  double v78;
  int v79;
  double v80;
  double *v81;
  double v82;
  double v83;
  int v84;
  double v85;
  double *v86;
  double v87;
  double v88;
  double *v89;
  int v90;
  double v91;
  double *v92;
  double v93;
  double *j;
  double v95;
  int v96;
  _BOOL4 v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t (**v101)();
  double *v102;
  int v103;
  int v104;
  BOOL v105;
  uint64_t v106;

  v6 = *(_DWORD *)(result + 16);
  v7 = *(int *)(result + 20);
  v99 = result;
  v8 = vcvtpd_u64_f64((double)v6 * a3);
  LODWORD(v3) = vcvtpd_u64_f64((double)(int)v7 * a3);
  v9 = (v6 * v3);
  if ((_DWORD)v9)
  {
    result = operator new[]();
    v10 = result;
  }
  else
  {
    v10 = 0;
  }
  v11 = 8 * v8 * (unint64_t)v3;
  if (*(_QWORD *)(a2 + 32) < v11)
  {
    if (*(_QWORD *)(a2 + 8) && *(_BYTE *)(a2 + 24))
      MEMORY[0x20BD36480]();
    result = operator new[]();
    *(_QWORD *)(a2 + 8) = result;
    *(_QWORD *)(a2 + 32) = v11;
    *(_BYTE *)(a2 + 24) = 1;
  }
  *(_DWORD *)(a2 + 16) = v8;
  *(_DWORD *)(a2 + 20) = v3;
  if (a3 >= 1.0)
    v12 = 4.0;
  else
    v12 = 4.0 / a3;
  v13 = vcvtpd_u64_f64(v12);
  v14 = v13 + 4;
  v98 = v6;
  if (v13 == -4)
  {
    v15 = 0;
    v16 = 0;
  }
  else
  {
    v15 = 8 * (v13 + 4);
    result = operator new[]();
    v16 = (double *)result;
  }
  v17 = fmin(a3, 1.0);
  v103 = 1;
  v104 = v13 + 4;
  v97 = v14 != 0;
  v105 = v14 != 0;
  v106 = v15;
  v101 = &off_24C421338;
  v102 = v16;
  if ((_DWORD)v3)
  {
    v18 = 0;
    v19 = v10 + 8 * v9;
    do
    {
      v100 = 0;
      result = CalculateWeightsForScale<double>((uint64_t)&v101, v13, (signed int *)&v100 + 1, (int *)&v100, v12, ((double)v18 + 0.5) / a3 + -0.5, v17);
      v23 = HIDWORD(v100);
      if (v100 < 0)
      {
        v24 = -HIDWORD(v100);
        HIDWORD(v100) = 0;
        v23 = 0;
      }
      else
      {
        v24 = 0;
      }
      v25 = v100;
      if ((int)v100 >= (int)v7)
      {
        v26 = v100 - v7 + 1;
        LODWORD(v100) = v7 - 1;
        v25 = v7 - 1;
        if (v18 < v9)
        {
LABEL_25:
          v27 = (double *)(v10 + 8 * v18);
          v28 = *(_QWORD *)(v99 + 8);
          v29 = v23;
          v30 = (_BYTE *)(v28 + v23);
          v31 = v25;
          v32 = (_BYTE *)(v28 + v25);
          if (v24)
          {
            v33 = v31 - v29;
            do
            {
              v34 = 0;
              LOBYTE(v20) = *v30;
              v35 = (double)*(unint64_t *)&v20;
              v36 = 0.0;
              v37 = v16;
              do
              {
                v38 = *v37++;
                v39 = v38;
                v36 = v36 + v38 * v35;
                ++v34;
              }
              while (v34 < v24);
              if (v30 < v32)
              {
                v40 = 0;
                do
                {
                  v41 = *v37++;
                  v42 = *(_QWORD *)&v41;
                  LOBYTE(v39) = v30[v40];
                  v39 = (double)*(unint64_t *)&v39;
                  v36 = v36 + v41 * v39;
                  ++v40;
                }
                while (v33 != v40);
                LOBYTE(v42) = *v32;
                v35 = (double)v42;
              }
              v20 = v36 + *v37 * v35;
              if (v26)
              {
                v43 = v37 + 1;
                v44 = v26;
                do
                {
                  v45 = *v43++;
                  v20 = v20 + v45 * v35;
                  --v44;
                }
                while (v44);
              }
              *v27 = v20;
              v27 += v3;
              v30 += v7;
              v32 += v7;
            }
            while ((unint64_t)v27 < v19);
          }
          else
          {
            v46 = v31 - v29;
            v47 = &v16[v31 - v29];
            if (v26)
            {
              do
              {
                v48 = 0.0;
                v49 = v30;
                v50 = v16;
                if (v30 < v32)
                {
                  v51 = 0;
                  do
                  {
                    v21 = v16[v51];
                    LOBYTE(v22) = v30[v51];
                    v22 = (double)*(unint64_t *)&v22;
                    v48 = v48 + v21 * v22;
                    ++v51;
                  }
                  while (v46 != v51);
                  v49 = v32;
                  v50 = v47;
                }
                v53 = *v50;
                v52 = v50 + 1;
                LOBYTE(v21) = *v49;
                v21 = (double)*(unint64_t *)&v21;
                v54 = v48 + v53 * v21;
                v55 = v26;
                do
                {
                  v56 = *v52++;
                  v22 = v56;
                  v54 = v54 + v56 * v21;
                  --v55;
                }
                while (v55);
                *v27 = v54;
                v27 += v3;
                v30 += v7;
                v32 += v7;
              }
              while ((unint64_t)v27 < v19);
            }
            else
            {
              do
              {
                v57 = 0.0;
                v58 = v30;
                v59 = v16;
                if (v30 < v32)
                {
                  v60 = 0;
                  do
                  {
                    LOBYTE(v22) = v30[v60];
                    v22 = (double)*(unint64_t *)&v22;
                    v57 = v57 + v16[v60++] * v22;
                  }
                  while (v46 != v60);
                  v58 = v32;
                  v59 = v47;
                }
                LOBYTE(v22) = *v58;
                v22 = (double)*(unint64_t *)&v22;
                *v27 = v57 + *v59 * v22;
                v27 += v3;
                v30 += v7;
                v32 += v7;
              }
              while ((unint64_t)v27 < v19);
            }
          }
        }
      }
      else
      {
        v26 = 0;
        if (v18 < v9)
          goto LABEL_25;
      }
      ++v18;
    }
    while (v18 != v3);
  }
  if (!v8)
  {
    v96 = v97;
    if (!v16)
      goto LABEL_89;
    goto LABEL_87;
  }
  v61 = 0;
  v62 = *(double **)(a2 + 8);
  v63 = 8 * v3;
  v64 = 0.0;
  do
  {
    v100 = 0;
    result = CalculateWeightsForScale<double>((uint64_t)&v101, v13, (signed int *)&v100 + 1, (int *)&v100, v12, (v64 + 0.5) / a3 + -0.5, v17);
    if ((int)v100 >= v98)
      v65 = v98 - 1;
    else
      v65 = v100;
    if ((int)v100 >= v98)
      v66 = v100 - v98 + 1;
    else
      v66 = 0;
    if ((_DWORD)v3)
    {
      v67 = &v62[v3];
      v68 = (double *)(v10 + 8 * (HIDWORD(v100) & ~(SHIDWORD(v100) >> 31)) * v3);
      v69 = v10 + 8 * (v65 * v3);
      v70 = (SHIDWORD(v100) >> 31) & -HIDWORD(v100);
      if (v70)
      {
        do
        {
          v81 = v102;
          v82 = *v68;
          v83 = 0.0;
          v84 = v70;
          do
          {
            v85 = *v81++;
            v83 = v83 + v85 * v82;
            --v84;
          }
          while (v84);
          v86 = v68;
          if ((unint64_t)v68 < v69)
          {
            do
            {
              v87 = *v81++;
              v83 = v83 + v87 * *v86;
              v86 = (double *)((char *)v86 + v63);
            }
            while ((unint64_t)v86 < v69);
            v82 = *v86;
          }
          v88 = v83 + *v81 * v82;
          if (v66)
          {
            v89 = v81 + 1;
            v90 = v66;
            do
            {
              v91 = *v89++;
              v88 = v88 + v91 * v82;
              --v90;
            }
            while (v90);
          }
          *v62++ = v88;
          ++v68;
          v69 += 8;
        }
        while (v62 < v67);
      }
      else if (v66)
      {
        do
        {
          v71 = v102;
          v72 = 0.0;
          for (i = v68; (unint64_t)i < v69; i = (double *)((char *)i + v63))
          {
            v74 = *v71++;
            v72 = v72 + v74 * *i;
          }
          v76 = *v71;
          v75 = v71 + 1;
          v77 = *i;
          v78 = v72 + v76 * *i;
          v79 = v66;
          do
          {
            v80 = *v75++;
            v78 = v78 + v80 * v77;
            --v79;
          }
          while (v79);
          *v62++ = v78;
          ++v68;
          v69 += 8;
        }
        while (v62 < v67);
      }
      else
      {
        do
        {
          v92 = v102;
          v93 = 0.0;
          for (j = v68; (unint64_t)j < v69; j = (double *)((char *)j + v63))
          {
            v95 = *v92++;
            v93 = v93 + v95 * *j;
          }
          *v62++ = v93 + *v92 * *j;
          ++v68;
          v69 += 8;
        }
        while (v62 < v67);
      }
    }
    v64 = v64 + 1.0;
    ++v61;
  }
  while (v61 != v8);
  v16 = v102;
  v96 = v105;
  if (v102)
  {
LABEL_87:
    if (v96)
      result = MEMORY[0x20BD36480](v16, 0x1000C8000313F17);
  }
LABEL_89:
  if ((_DWORD)v9)
  {
    if (v10)
      JUMPOUT(0x20BD36480);
  }
  return result;
}

void sub_20B63C3E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  int v2;
  BOOL v4;

  if (v2)
    v4 = v1 == 0;
  else
    v4 = 1;
  if (!v4)
    MEMORY[0x20BD36480](v1, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

uint64_t ImageUtils::Scale<BOOL>(uint64_t result, uint64_t a2, double a3)
{
  uint64_t v3;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  double v12;
  int v13;
  uint64_t v14;
  float64x2_t *v15;
  double v16;
  _BOOL4 v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  double *v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  double v31;
  double v32;
  float64x2_t *v33;
  int v34;
  double *v35;
  float64x2_t *v36;
  double v37;
  unsigned __int8 *v38;
  uint64_t v39;
  int8x16_t v40;
  int8x8_t v41;
  int8x8_t v42;
  uint64x2_t v43;
  float64x2_t v44;
  int8x8_t v45;
  int8x8_t v46;
  float64x2_t v47;
  int8x8_t v48;
  int8x8_t v49;
  float64x2_t v50;
  int8x8_t v51;
  int8x8_t v52;
  float64x2_t v53;
  int8x8_t v54;
  int8x8_t v55;
  float64x2_t v56;
  int8x8_t v57;
  int8x8_t v58;
  float64x2_t v59;
  int8x8_t v60;
  int8x8_t v61;
  float64x2_t v62;
  int8x8_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double *v77;
  int v78;
  double v79;
  unint64_t v80;
  unint64_t v81;
  double v82;
  unsigned __int8 *v83;
  double *v84;
  double *v85;
  unsigned __int8 *v86;
  unint64_t v87;
  float64x2_t *v88;
  int8x8_t v89;
  int8x8_t v90;
  int8x8_t v91;
  uint64x2_t v92;
  float64x2_t v93;
  int8x8_t v94;
  int8x8_t v95;
  float64x2_t v96;
  int8x8_t v97;
  int8x8_t v98;
  float64x2_t v99;
  int8x8_t v100;
  int8x8_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  uint64_t v106;
  float64x2_t *v107;
  int8x16_t v108;
  int8x8_t v109;
  int8x8_t v110;
  uint64x2_t v111;
  float64x2_t v112;
  int8x8_t v113;
  int8x8_t v114;
  float64x2_t v115;
  int8x8_t v116;
  int8x8_t v117;
  float64x2_t v118;
  int8x8_t v119;
  int8x8_t v120;
  float64x2_t v121;
  int8x8_t v122;
  int8x8_t v123;
  float64x2_t v124;
  int8x8_t v125;
  int8x8_t v126;
  float64x2_t v127;
  int8x8_t v128;
  int8x8_t v129;
  float64x2_t v130;
  int8x8_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  int v147;
  double v148;
  unsigned __int8 *v149;
  double v150;
  double v151;
  double *v152;
  unsigned __int8 *v153;
  unint64_t v154;
  uint64_t v155;
  float64x2_t *v156;
  int8x16_t v157;
  int8x8_t v158;
  int8x8_t v159;
  uint64x2_t v160;
  float64x2_t v161;
  int8x8_t v162;
  int8x8_t v163;
  float64x2_t v164;
  int8x8_t v165;
  int8x8_t v166;
  float64x2_t v167;
  int8x8_t v168;
  int8x8_t v169;
  float64x2_t v170;
  int8x8_t v171;
  int8x8_t v172;
  float64x2_t v173;
  int8x8_t v174;
  int8x8_t v175;
  float64x2_t v176;
  int8x8_t v177;
  int8x8_t v178;
  float64x2_t v179;
  int8x8_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t *v189;
  int8x8_t v190;
  int8x8_t v191;
  int8x8_t v192;
  uint64x2_t v193;
  float64x2_t v194;
  int8x8_t v195;
  int8x8_t v196;
  float64x2_t v197;
  int8x8_t v198;
  int8x8_t v199;
  float64x2_t v200;
  int8x8_t v201;
  int8x8_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  double v207;
  double v208;
  double v209;
  int v210;
  double *v211;
  uint64_t v212;
  double v213;
  int v214;
  int v215;
  double *v216;
  double *v217;
  unint64_t v218;
  double *v219;
  double v220;
  double *i;
  double v222;
  double *v223;
  double v224;
  double v225;
  double v226;
  int v227;
  double v228;
  double *v229;
  double v230;
  double *j;
  double v232;
  int v233;
  double *v234;
  double v235;
  double v236;
  int v237;
  double v238;
  double *v239;
  double v240;
  double v241;
  double *v242;
  int v243;
  double v244;
  double v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t (**v249)();
  double *v250;
  int v251;
  int v252;
  BOOL v253;
  uint64_t v254;

  v6 = *(_DWORD *)(result + 16);
  v7 = *(int *)(result + 20);
  v247 = result;
  v8 = vcvtpd_u64_f64((double)v6 * a3);
  LODWORD(v3) = vcvtpd_u64_f64((double)(int)v7 * a3);
  v9 = v6 * v3;
  if (v6 * (_DWORD)v3)
  {
    result = operator new[]();
    v10 = result;
  }
  else
  {
    v10 = 0;
  }
  v11 = 8 * v8 * (unint64_t)v3;
  if (*(_QWORD *)(a2 + 32) < v11)
  {
    if (*(_QWORD *)(a2 + 8) && *(_BYTE *)(a2 + 24))
      MEMORY[0x20BD36480]();
    result = operator new[]();
    *(_QWORD *)(a2 + 8) = result;
    *(_QWORD *)(a2 + 32) = v11;
    *(_BYTE *)(a2 + 24) = 1;
  }
  *(_DWORD *)(a2 + 16) = v8;
  *(_DWORD *)(a2 + 20) = v3;
  v246 = a2;
  if (a3 >= 1.0)
    v12 = 4.0;
  else
    v12 = 4.0 / a3;
  v13 = vcvtpd_u64_f64(v12);
  if (v13 == -4)
  {
    v14 = 0;
    v15 = 0;
  }
  else
  {
    v14 = 8 * (v13 + 4);
    result = operator new[]();
    v15 = (float64x2_t *)result;
  }
  v16 = fmin(a3, 1.0);
  v251 = 1;
  v252 = v13 + 4;
  v17 = v13 != -4;
  v253 = v13 != -4;
  v254 = v14;
  v249 = &off_24C421338;
  v250 = (double *)v15;
  if (!(_DWORD)v3)
  {
    if (v8)
    {
      v245 = 0.0;
      do
      {
        result = CalculateWeightsForScale<double>((uint64_t)&v249, v13, (signed int *)&v248 + 1, (int *)&v248, v12, (v245 + 0.5) / a3 + -0.5, v16);
        v245 = v245 + 1.0;
        --v8;
      }
      while (v8);
    }
LABEL_142:
    if (!v15)
      goto LABEL_145;
    goto LABEL_143;
  }
  v18 = 0;
  v19 = v10 + 8 * v9;
  do
  {
    v248 = 0;
    result = CalculateWeightsForScale<double>((uint64_t)&v249, v13, (signed int *)&v248 + 1, (int *)&v248, v12, ((double)v18 + 0.5) / a3 + -0.5, v16);
    if ((int)v248 >= (int)v7)
      v20 = v7 - 1;
    else
      v20 = v248;
    if ((int)v248 >= (int)v7)
      v21 = v248 - v7 + 1;
    else
      v21 = 0;
    if (v18 < (v6 * v3))
    {
      v22 = HIDWORD(v248) & ~(SHIDWORD(v248) >> 31);
      v23 = (double *)(v10 + 8 * v18);
      v24 = *(_QWORD *)(v247 + 8);
      v25 = (unsigned __int8 *)(v24 + v22);
      v26 = v20;
      v27 = (unsigned __int8 *)(v24 + v20);
      v28 = v26 - v22;
      v29 = (SHIDWORD(v248) >> 31) & -HIDWORD(v248);
      if (v29)
      {
        v30 = v28 & 0xFFFFFFFFFFFFFFF0;
        while (1)
        {
          result = *v25;
          v31 = 0.0;
          if (*v25)
            v32 = 1.0;
          else
            v32 = 0.0;
          v33 = (float64x2_t *)&v15->f64[1];
          v34 = v29;
          v35 = (double *)v15;
          do
          {
            v36 = v33;
            v37 = *v35++;
            v31 = v31 + v37 * v32;
            v33 = (float64x2_t *)((char *)v33 + 8);
            --v34;
          }
          while (v34);
          if (v25 >= v27)
            goto LABEL_45;
          if (v28 <= 0xF)
            break;
          v39 = 0;
          v35 += v28 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v40 = vtstq_s8(*(int8x16_t *)&v25[v39], *(int8x16_t *)&v25[v39]);
            v41.i32[0] = v40.u8[0];
            v41.i32[1] = v40.u8[1];
            v42 = vand_s8(v41, (int8x8_t)0x100000001);
            v43.i64[0] = v42.u32[0];
            v43.i64[1] = v42.u32[1];
            v44 = vcvtq_f64_u64(v43);
            v45.i32[0] = v40.u8[2];
            v45.i32[1] = v40.u8[3];
            v46 = vand_s8(v45, (int8x8_t)0x100000001);
            v43.i64[0] = v46.u32[0];
            v43.i64[1] = v46.u32[1];
            v47 = vcvtq_f64_u64(v43);
            v48.i32[0] = v40.u8[4];
            v48.i32[1] = v40.u8[5];
            v49 = vand_s8(v48, (int8x8_t)0x100000001);
            v43.i64[0] = v49.u32[0];
            v43.i64[1] = v49.u32[1];
            v50 = vcvtq_f64_u64(v43);
            v51.i32[0] = v40.u8[6];
            v51.i32[1] = v40.u8[7];
            v52 = vand_s8(v51, (int8x8_t)0x100000001);
            v43.i64[0] = v52.u32[0];
            v43.i64[1] = v52.u32[1];
            v53 = vcvtq_f64_u64(v43);
            v54.i32[0] = v40.u8[8];
            v54.i32[1] = v40.u8[9];
            v55 = vand_s8(v54, (int8x8_t)0x100000001);
            v43.i64[0] = v55.u32[0];
            v43.i64[1] = v55.u32[1];
            v56 = vcvtq_f64_u64(v43);
            v57.i32[0] = v40.u8[10];
            v57.i32[1] = v40.u8[11];
            v58 = vand_s8(v57, (int8x8_t)0x100000001);
            v43.i64[0] = v58.u32[0];
            v43.i64[1] = v58.u32[1];
            v59 = vcvtq_f64_u64(v43);
            v60.i32[0] = v40.u8[12];
            v60.i32[1] = v40.u8[13];
            v61 = vand_s8(v60, (int8x8_t)0x100000001);
            v43.i64[0] = v61.u32[0];
            v43.i64[1] = v61.u32[1];
            v62 = vcvtq_f64_u64(v43);
            v63.i32[0] = v40.u8[14];
            v63.i32[1] = v40.u8[15];
            *(int8x8_t *)v40.i8 = vand_s8(v63, (int8x8_t)0x100000001);
            v43.i64[0] = v40.u32[0];
            v43.i64[1] = v40.u32[1];
            v64 = vmulq_f64(v36[7], vcvtq_f64_u64(v43));
            v65 = vmulq_f64(v36[6], v62);
            v66 = vmulq_f64(v36[5], v59);
            v67 = vmulq_f64(v36[4], v56);
            v68 = vmulq_f64(v36[3], v53);
            v69 = vmulq_f64(v36[2], v50);
            v70 = vmulq_f64(v36[1], v47);
            v71 = vmulq_f64(*v36, v44);
            v31 = v31
                + v71.f64[0]
                + v71.f64[1]
                + v70.f64[0]
                + v70.f64[1]
                + v69.f64[0]
                + v69.f64[1]
                + v68.f64[0]
                + v68.f64[1]
                + v67.f64[0]
                + v67.f64[1]
                + v66.f64[0]
                + v66.f64[1]
                + v65.f64[0]
                + v65.f64[1]
                + v64.f64[0]
                + v64.f64[1];
            v39 += 16;
            v36 += 8;
          }
          while (v30 != v39);
          if (v28 != v30)
          {
            v38 = &v25[v30];
            do
            {
LABEL_40:
              v72 = *v35++;
              v73 = v72;
              LODWORD(v72) = *v38++;
              if (LODWORD(v72))
                v74 = 1.0;
              else
                v74 = 0.0;
              v31 = v31 + v73 * v74;
            }
            while (v38 != v27);
          }
          result = *v27;
LABEL_45:
          if ((_DWORD)result)
            v75 = 1.0;
          else
            v75 = 0.0;
          v76 = v31 + *v35 * v75;
          if (v21)
          {
            v77 = v35 + 1;
            v78 = v21;
            do
            {
              v79 = *v77++;
              v76 = v76 + v79 * v75;
              --v78;
            }
            while (v78);
          }
          *v23 = v76;
          v23 += v3;
          v25 += v7;
          v27 += v7;
          if ((unint64_t)v23 >= v19)
            goto LABEL_17;
        }
        v38 = v25;
        goto LABEL_40;
      }
      v80 = v28 & 0xFFFFFFFFFFFFFFF0;
      v81 = v28 & 0xFFFFFFFFFFFFFFF8;
      if (v21)
      {
        while (1)
        {
          v82 = 0.0;
          v83 = v25;
          v84 = (double *)v15;
          if (v25 < v27)
            break;
LABEL_71:
          v143 = *v84;
          result = (uint64_t)(v84 + 1);
          v144 = v143;
          if (*v83)
            v145 = 1.0;
          else
            v145 = 0.0;
          v146 = v82 + v144 * v145;
          v147 = v21;
          do
          {
            v148 = *(double *)result;
            result += 8;
            v146 = v146 + v148 * v145;
            --v147;
          }
          while (v147);
          *v23 = v146;
          v23 += v3;
          v25 += v7;
          v27 += v7;
          if ((unint64_t)v23 >= v19)
            goto LABEL_17;
        }
        v85 = (double *)v15;
        v86 = v25;
        if (v28 <= 7)
          goto LABEL_66;
        if (v28 >= 0x10)
        {
          v106 = 0;
          v107 = v15;
          do
          {
            v108 = vtstq_s8(*(int8x16_t *)&v25[v106], *(int8x16_t *)&v25[v106]);
            v109.i32[0] = v108.u8[0];
            v109.i32[1] = v108.u8[1];
            v110 = vand_s8(v109, (int8x8_t)0x100000001);
            v111.i64[0] = v110.u32[0];
            v111.i64[1] = v110.u32[1];
            v112 = vcvtq_f64_u64(v111);
            v113.i32[0] = v108.u8[2];
            v113.i32[1] = v108.u8[3];
            v114 = vand_s8(v113, (int8x8_t)0x100000001);
            v111.i64[0] = v114.u32[0];
            v111.i64[1] = v114.u32[1];
            v115 = vcvtq_f64_u64(v111);
            v116.i32[0] = v108.u8[4];
            v116.i32[1] = v108.u8[5];
            v117 = vand_s8(v116, (int8x8_t)0x100000001);
            v111.i64[0] = v117.u32[0];
            v111.i64[1] = v117.u32[1];
            v118 = vcvtq_f64_u64(v111);
            v119.i32[0] = v108.u8[6];
            v119.i32[1] = v108.u8[7];
            v120 = vand_s8(v119, (int8x8_t)0x100000001);
            v111.i64[0] = v120.u32[0];
            v111.i64[1] = v120.u32[1];
            v121 = vcvtq_f64_u64(v111);
            v122.i32[0] = v108.u8[8];
            v122.i32[1] = v108.u8[9];
            v123 = vand_s8(v122, (int8x8_t)0x100000001);
            v111.i64[0] = v123.u32[0];
            v111.i64[1] = v123.u32[1];
            v124 = vcvtq_f64_u64(v111);
            v125.i32[0] = v108.u8[10];
            v125.i32[1] = v108.u8[11];
            v126 = vand_s8(v125, (int8x8_t)0x100000001);
            v111.i64[0] = v126.u32[0];
            v111.i64[1] = v126.u32[1];
            v127 = vcvtq_f64_u64(v111);
            v128.i32[0] = v108.u8[12];
            v128.i32[1] = v108.u8[13];
            v129 = vand_s8(v128, (int8x8_t)0x100000001);
            v111.i64[0] = v129.u32[0];
            v111.i64[1] = v129.u32[1];
            v130 = vcvtq_f64_u64(v111);
            v131.i32[0] = v108.u8[14];
            v131.i32[1] = v108.u8[15];
            *(int8x8_t *)v108.i8 = vand_s8(v131, (int8x8_t)0x100000001);
            v111.i64[0] = v108.u32[0];
            v111.i64[1] = v108.u32[1];
            v132 = vmulq_f64(v107[7], vcvtq_f64_u64(v111));
            v133 = vmulq_f64(v107[6], v130);
            v134 = vmulq_f64(v107[5], v127);
            v135 = vmulq_f64(v107[4], v124);
            v136 = vmulq_f64(v107[3], v121);
            v137 = vmulq_f64(v107[2], v118);
            v138 = vmulq_f64(v107[1], v115);
            v139 = vmulq_f64(*v107, v112);
            v82 = v82
                + v139.f64[0]
                + v139.f64[1]
                + v138.f64[0]
                + v138.f64[1]
                + v137.f64[0]
                + v137.f64[1]
                + v136.f64[0]
                + v136.f64[1]
                + v135.f64[0]
                + v135.f64[1]
                + v134.f64[0]
                + v134.f64[1]
                + v133.f64[0]
                + v133.f64[1]
                + v132.f64[0]
                + v132.f64[1];
            v106 += 16;
            v107 += 8;
          }
          while (v80 != v106);
          if (v28 == v80)
            goto LABEL_70;
          if ((v28 & 8) == 0)
          {
            v86 = &v25[v80];
            v85 = &v15->f64[v28 & 0xFFFFFFFFFFFFFFF0];
            do
            {
LABEL_66:
              v140 = *v85++;
              v141 = v140;
              LODWORD(v140) = *v86++;
              if (LODWORD(v140))
                v142 = 1.0;
              else
                v142 = 0.0;
              v82 = v82 + v141 * v142;
            }
            while (v86 != v27);
            goto LABEL_70;
          }
          v87 = v28 & 0xFFFFFFFFFFFFFFF0;
        }
        else
        {
          v87 = 0;
        }
        v88 = (float64x2_t *)((char *)v15 + 8 * v87);
        do
        {
          v89 = vtst_s8(*(int8x8_t *)&v25[v87], *(int8x8_t *)&v25[v87]);
          v90.i32[0] = v89.u8[0];
          v90.i32[1] = v89.u8[1];
          v91 = vand_s8(v90, (int8x8_t)0x100000001);
          v92.i64[0] = v91.u32[0];
          v92.i64[1] = v91.u32[1];
          v93 = vcvtq_f64_u64(v92);
          v94.i32[0] = v89.u8[2];
          v94.i32[1] = v89.u8[3];
          v95 = vand_s8(v94, (int8x8_t)0x100000001);
          v92.i64[0] = v95.u32[0];
          v92.i64[1] = v95.u32[1];
          v96 = vcvtq_f64_u64(v92);
          v97.i32[0] = v89.u8[4];
          v97.i32[1] = v89.u8[5];
          v98 = vand_s8(v97, (int8x8_t)0x100000001);
          v92.i64[0] = v98.u32[0];
          v92.i64[1] = v98.u32[1];
          v99 = vcvtq_f64_u64(v92);
          v100.i32[0] = v89.u8[6];
          v100.i32[1] = v89.u8[7];
          v101 = vand_s8(v100, (int8x8_t)0x100000001);
          v92.i64[0] = v101.u32[0];
          v92.i64[1] = v101.u32[1];
          v102 = vmulq_f64(v88[3], vcvtq_f64_u64(v92));
          v103 = vmulq_f64(v88[2], v99);
          v104 = vmulq_f64(v88[1], v96);
          v105 = vmulq_f64(*v88, v93);
          v82 = v82
              + v105.f64[0]
              + v105.f64[1]
              + v104.f64[0]
              + v104.f64[1]
              + v103.f64[0]
              + v103.f64[1]
              + v102.f64[0]
              + v102.f64[1];
          v87 += 8;
          v88 += 4;
        }
        while (v81 != v87);
        if (v28 != v81)
        {
          v86 = &v25[v81];
          v85 = &v15->f64[v28 & 0xFFFFFFFFFFFFFFF8];
          goto LABEL_66;
        }
LABEL_70:
        v83 = v27;
        v84 = &v15->f64[v28];
        goto LABEL_71;
      }
      do
      {
        v151 = 0.0;
        v149 = v25;
        result = (uint64_t)v15;
        if (v25 >= v27)
          goto LABEL_80;
        v152 = (double *)v15;
        v153 = v25;
        if (v28 < 8)
          goto LABEL_98;
        if (v28 >= 0x10)
        {
          v155 = 0;
          v156 = v15;
          do
          {
            v157 = vtstq_s8(*(int8x16_t *)&v25[v155], *(int8x16_t *)&v25[v155]);
            v158.i32[0] = v157.u8[0];
            v158.i32[1] = v157.u8[1];
            v159 = vand_s8(v158, (int8x8_t)0x100000001);
            v160.i64[0] = v159.u32[0];
            v160.i64[1] = v159.u32[1];
            v161 = vcvtq_f64_u64(v160);
            v162.i32[0] = v157.u8[2];
            v162.i32[1] = v157.u8[3];
            v163 = vand_s8(v162, (int8x8_t)0x100000001);
            v160.i64[0] = v163.u32[0];
            v160.i64[1] = v163.u32[1];
            v164 = vcvtq_f64_u64(v160);
            v165.i32[0] = v157.u8[4];
            v165.i32[1] = v157.u8[5];
            v166 = vand_s8(v165, (int8x8_t)0x100000001);
            v160.i64[0] = v166.u32[0];
            v160.i64[1] = v166.u32[1];
            v167 = vcvtq_f64_u64(v160);
            v168.i32[0] = v157.u8[6];
            v168.i32[1] = v157.u8[7];
            v169 = vand_s8(v168, (int8x8_t)0x100000001);
            v160.i64[0] = v169.u32[0];
            v160.i64[1] = v169.u32[1];
            v170 = vcvtq_f64_u64(v160);
            v171.i32[0] = v157.u8[8];
            v171.i32[1] = v157.u8[9];
            v172 = vand_s8(v171, (int8x8_t)0x100000001);
            v160.i64[0] = v172.u32[0];
            v160.i64[1] = v172.u32[1];
            v173 = vcvtq_f64_u64(v160);
            v174.i32[0] = v157.u8[10];
            v174.i32[1] = v157.u8[11];
            v175 = vand_s8(v174, (int8x8_t)0x100000001);
            v160.i64[0] = v175.u32[0];
            v160.i64[1] = v175.u32[1];
            v176 = vcvtq_f64_u64(v160);
            v177.i32[0] = v157.u8[12];
            v177.i32[1] = v157.u8[13];
            v178 = vand_s8(v177, (int8x8_t)0x100000001);
            v160.i64[0] = v178.u32[0];
            v160.i64[1] = v178.u32[1];
            v179 = vcvtq_f64_u64(v160);
            v180.i32[0] = v157.u8[14];
            v180.i32[1] = v157.u8[15];
            *(int8x8_t *)v157.i8 = vand_s8(v180, (int8x8_t)0x100000001);
            v160.i64[0] = v157.u32[0];
            v160.i64[1] = v157.u32[1];
            v181 = vmulq_f64(v156[7], vcvtq_f64_u64(v160));
            v182 = vmulq_f64(v156[6], v179);
            v183 = vmulq_f64(v156[5], v176);
            v184 = vmulq_f64(v156[4], v173);
            v185 = vmulq_f64(v156[3], v170);
            v186 = vmulq_f64(v156[2], v167);
            v187 = vmulq_f64(v156[1], v164);
            v188 = vmulq_f64(*v156, v161);
            v151 = v151
                 + v188.f64[0]
                 + v188.f64[1]
                 + v187.f64[0]
                 + v187.f64[1]
                 + v186.f64[0]
                 + v186.f64[1]
                 + v185.f64[0]
                 + v185.f64[1]
                 + v184.f64[0]
                 + v184.f64[1]
                 + v183.f64[0]
                 + v183.f64[1]
                 + v182.f64[0]
                 + v182.f64[1]
                 + v181.f64[0]
                 + v181.f64[1];
            v155 += 16;
            v156 += 8;
          }
          while (v80 != v155);
          if (v28 == v80)
            goto LABEL_79;
          if ((v28 & 8) == 0)
          {
            v153 = &v25[v80];
            v152 = &v15->f64[v28 & 0xFFFFFFFFFFFFFFF0];
            goto LABEL_98;
          }
          v154 = v28 & 0xFFFFFFFFFFFFFFF0;
        }
        else
        {
          v154 = 0;
        }
        v189 = (float64x2_t *)((char *)v15 + 8 * v154);
        do
        {
          v190 = vtst_s8(*(int8x8_t *)&v25[v154], *(int8x8_t *)&v25[v154]);
          v191.i32[0] = v190.u8[0];
          v191.i32[1] = v190.u8[1];
          v192 = vand_s8(v191, (int8x8_t)0x100000001);
          v193.i64[0] = v192.u32[0];
          v193.i64[1] = v192.u32[1];
          v194 = vcvtq_f64_u64(v193);
          v195.i32[0] = v190.u8[2];
          v195.i32[1] = v190.u8[3];
          v196 = vand_s8(v195, (int8x8_t)0x100000001);
          v193.i64[0] = v196.u32[0];
          v193.i64[1] = v196.u32[1];
          v197 = vcvtq_f64_u64(v193);
          v198.i32[0] = v190.u8[4];
          v198.i32[1] = v190.u8[5];
          v199 = vand_s8(v198, (int8x8_t)0x100000001);
          v193.i64[0] = v199.u32[0];
          v193.i64[1] = v199.u32[1];
          v200 = vcvtq_f64_u64(v193);
          v201.i32[0] = v190.u8[6];
          v201.i32[1] = v190.u8[7];
          v202 = vand_s8(v201, (int8x8_t)0x100000001);
          v193.i64[0] = v202.u32[0];
          v193.i64[1] = v202.u32[1];
          v203 = vmulq_f64(v189[3], vcvtq_f64_u64(v193));
          v204 = vmulq_f64(v189[2], v200);
          v205 = vmulq_f64(v189[1], v197);
          v206 = vmulq_f64(*v189, v194);
          v151 = v151
               + v206.f64[0]
               + v206.f64[1]
               + v205.f64[0]
               + v205.f64[1]
               + v204.f64[0]
               + v204.f64[1]
               + v203.f64[0]
               + v203.f64[1];
          v154 += 8;
          v189 += 4;
        }
        while (v81 != v154);
        if (v28 != v81)
        {
          v153 = &v25[v81];
          v152 = &v15->f64[v28 & 0xFFFFFFFFFFFFFFF8];
          do
          {
LABEL_98:
            v207 = *v152++;
            v208 = v207;
            LODWORD(v207) = *v153++;
            if (LODWORD(v207))
              v209 = 1.0;
            else
              v209 = 0.0;
            v151 = v151 + v208 * v209;
          }
          while (v153 != v27);
        }
LABEL_79:
        v149 = v27;
        result = (uint64_t)&v15->f64[v28];
LABEL_80:
        if (*v149)
          v150 = 1.0;
        else
          v150 = 0.0;
        *v23 = v151 + *(double *)result * v150;
        v23 += v3;
        v25 += v7;
        v27 += v7;
      }
      while ((unint64_t)v23 < v19);
    }
LABEL_17:
    ++v18;
  }
  while (v18 != v3);
  if (v8)
  {
    v210 = 0;
    v211 = *(double **)(v246 + 8);
    v212 = 8 * v3;
    v213 = 0.0;
    do
    {
      v248 = 0;
      result = CalculateWeightsForScale<double>((uint64_t)&v249, v13, (signed int *)&v248 + 1, (int *)&v248, v12, (v213 + 0.5) / a3 + -0.5, v16);
      if ((int)v248 >= v6)
        v214 = v6 - 1;
      else
        v214 = v248;
      if ((int)v248 >= v6)
        v215 = v248 - v6 + 1;
      else
        v215 = 0;
      v216 = &v211[v3];
      v217 = (double *)(v10 + 8 * (HIDWORD(v248) & ~(SHIDWORD(v248) >> 31)) * v3);
      v218 = v10 + 8 * (v214 * v3);
      if (v248 < 0)
      {
        if (-HIDWORD(v248) != 1 && HIDWORD(v248) != 0)
          v233 = -HIDWORD(v248);
        else
          v233 = 1;
        do
        {
          v234 = v250;
          v235 = *v217;
          v236 = 0.0;
          v237 = v233;
          do
          {
            v238 = *v234++;
            v236 = v236 + v238 * v235;
            --v237;
          }
          while (v237);
          v239 = v217;
          if ((unint64_t)v217 < v218)
          {
            do
            {
              v240 = *v234++;
              v236 = v236 + v240 * *v239;
              v239 = (double *)((char *)v239 + v212);
            }
            while ((unint64_t)v239 < v218);
            v235 = *v239;
          }
          v241 = v236 + *v234 * v235;
          if (v215)
          {
            v242 = v234 + 1;
            v243 = v215;
            do
            {
              v244 = *v242++;
              v241 = v241 + v244 * v235;
              --v243;
            }
            while (v243);
          }
          *v211++ = v241;
          ++v217;
          v218 += 8;
        }
        while (v211 < v216);
      }
      else if (v215)
      {
        do
        {
          v219 = v250;
          v220 = 0.0;
          for (i = v217; (unint64_t)i < v218; i = (double *)((char *)i + v212))
          {
            v222 = *v219++;
            v220 = v220 + v222 * *i;
          }
          v224 = *v219;
          v223 = v219 + 1;
          v225 = *i;
          v226 = v220 + v224 * *i;
          v227 = v215;
          do
          {
            v228 = *v223++;
            v226 = v226 + v228 * v225;
            --v227;
          }
          while (v227);
          *v211++ = v226;
          ++v217;
          v218 += 8;
        }
        while (v211 < v216);
      }
      else
      {
        do
        {
          v229 = v250;
          v230 = 0.0;
          for (j = v217; (unint64_t)j < v218; j = (double *)((char *)j + v212))
          {
            v232 = *v229++;
            v230 = v230 + v232 * *j;
          }
          *v211++ = v230 + *v229 * *j;
          ++v217;
          v218 += 8;
        }
        while (v211 < v216);
      }
      v213 = v213 + 1.0;
      ++v210;
    }
    while (v210 != v8);
    v15 = (float64x2_t *)v250;
    v17 = v253;
    v9 = v6 * v3;
    goto LABEL_142;
  }
  v9 = v6 * v3;
  if (v15)
  {
LABEL_143:
    if (v17)
      result = MEMORY[0x20BD36480](v15, 0x1000C8000313F17);
  }
LABEL_145:
  if (v9)
  {
    if (v10)
      JUMPOUT(0x20BD36480);
  }
  return result;
}

void sub_20B63D1F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  int v2;
  BOOL v4;

  if (v2)
    v4 = v1 == 0;
  else
    v4 = 1;
  if (!v4)
    MEMORY[0x20BD36480](v1, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

uint64_t ImageUtils::Scale<double>(uint64_t a1, double a2, double a3, uint64_t a4, uint64_t a5)
{
  return Scale<double>(a1, a5, a2, a3);
}

double ImageUtils::Gradient<double>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  double *v9;
  double *v10;
  double *v11;
  double *v12;
  float64x2_t *v13;
  double *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  double *v18;
  uint64_t v19;
  double *v20;
  float64x2_t *v21;
  unint64_t v22;
  double *v23;
  double *v24;
  unint64_t v25;
  BOOL v27;
  BOOL v29;
  BOOL v31;
  BOOL v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float64x2_t *v42;
  double *v43;
  uint64_t v44;
  float64x2_t v45;
  float64x2_t v46;
  uint64_t v47;
  int v48;
  double v49;
  double v50;
  double *v51;
  double *v52;
  unsigned int v53;
  double *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v62;
  uint64_t v63;
  double *v64;
  double v65;
  double *v66;
  float64x2_t *v67;
  float64x2_t *v68;
  int v69;
  uint64_t v70;
  float64x2_t *v71;
  float64x2_t *v72;
  char *v73;
  float64x2_t *v74;
  double *v75;
  double *v76;
  double *v77;
  double *v78;
  BOOL v79;
  BOOL v80;
  BOOL v81;
  BOOL v82;
  BOOL v83;
  BOOL v84;
  BOOL v85;
  BOOL v86;
  BOOL v87;
  BOOL v88;
  BOOL v89;
  BOOL v90;
  BOOL v91;
  float64x2_t *v92;
  float64x2_t *v93;
  double *v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  double *v101;
  double *v102;
  double *v103;
  unint64_t v104;
  double *v105;
  double *v106;
  double *v107;
  unint64_t v108;
  BOOL v110;
  BOOL v112;
  BOOL v114;
  BOOL v116;
  BOOL v118;
  BOOL v120;
  BOOL v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  double *v125;
  uint64_t v126;
  const double *v128;
  double *v129;
  uint64_t v130;
  const double *v131;
  const double *v132;
  const double *v133;
  uint64_t v134;
  unsigned int v135;
  double *v136;
  double *v137;
  double *v138;
  double v139;
  double v140;
  double *v141;
  double v142;
  double v143;
  float64x2_t *v144;
  double *v145;
  double *v146;
  uint64_t v147;
  int v148;
  double *v149;
  uint64_t v150;
  double *v151;
  float64x2_t *v152;
  unint64_t v153;
  float64x2_t *v154;
  unint64_t v155;
  BOOL v157;
  BOOL v159;
  BOOL v161;
  BOOL v163;
  BOOL v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  float64x2_t *v169;
  double *v170;
  uint64_t v171;
  float64x2_t v172;
  float64x2_t v173;
  uint64_t v174;
  int v175;
  double v176;
  double v177;
  double result;
  uint64_t v179;
  float64x2x2_t v180;
  float64x2x2_t v181;
  float64x2x2_t v182;
  float64x2x2_t v183;
  float64x2x2_t v184;

  v7 = *(_DWORD *)(a1 + 16);
  v6 = *(unsigned int *)(a1 + 20);
  v8 = 8 * v7 * (unint64_t)v6;
  if (*(_QWORD *)(a2 + 32) < v8)
  {
    if (*(_QWORD *)(a2 + 8) && *(_BYTE *)(a2 + 24))
      MEMORY[0x20BD36480]();
    *(_QWORD *)(a2 + 8) = operator new[]();
    *(_QWORD *)(a2 + 32) = v8;
    *(_BYTE *)(a2 + 24) = 1;
  }
  *(_DWORD *)(a2 + 16) = v7;
  *(_DWORD *)(a2 + 20) = v6;
  v9 = *(double **)(a3 + 8);
  if (*(_QWORD *)(a3 + 32) < v8)
  {
    if (v9 && *(_BYTE *)(a3 + 24))
      MEMORY[0x20BD36480]();
    v9 = (double *)operator new[]();
    *(_QWORD *)(a3 + 8) = v9;
    *(_QWORD *)(a3 + 32) = v8;
    *(_BYTE *)(a3 + 24) = 1;
  }
  *(_DWORD *)(a3 + 16) = v7;
  *(_DWORD *)(a3 + 20) = v6;
  v10 = *(double **)(a1 + 8);
  v11 = *(double **)(a2 + 8);
  v12 = v10 + 1;
  *v11 = v10[1] - *v10;
  v13 = (float64x2_t *)(v11 + 1);
  *v9 = v10[v6] - *v10;
  v14 = v9 + 1;
  v15 = (v6 - 1);
  if (v15 < 2)
  {
    v18 = v11 + 1;
    goto LABEL_56;
  }
  v16 = (v6 - 3);
  if (v16 > 0xE)
  {
    v19 = 8 * v16 + 16;
    v20 = (double *)((char *)v11 + v19);
    v21 = (float64x2_t *)((char *)v9 + v19);
    v22 = (unint64_t)&v10[v16 + 3];
    v23 = &v10[v6];
    v24 = v23 + 1;
    v25 = (unint64_t)v23 + v19;
    v27 = (unint64_t)v13 < v22 && v10 < v20;
    v29 = (unint64_t)v13 < v25 && v24 < v20;
    v31 = (unint64_t)v14 < v22 && v10 < (double *)v21;
    v33 = (unint64_t)v14 < v25 && v24 < (double *)v21;
    v34 = v14 >= v20 || v13 >= v21;
    v17 = 1;
    if (v34 && !v27 && !v29 && !v31 && !v33)
    {
      v35 = v16 + 1;
      v36 = (v16 + 1) & 0x1FFFFFFFELL;
      v37 = 8 * v36;
      v18 = &v13->f64[v36];
      v17 = v35 | 1;
      __asm { FMOV            V0.2D, #0.5 }
      v42 = (float64x2_t *)v14;
      v43 = v10 + 1;
      v44 = v36;
      do
      {
        *v13++ = vmulq_f64(vsubq_f64(*(float64x2_t *)(v43 + 1), *(float64x2_t *)(v43 - 1)), _Q0);
        v45 = *(float64x2_t *)&v43[v6];
        v46 = *(float64x2_t *)v43;
        v43 += 2;
        *v42++ = vsubq_f64(v45, v46);
        v44 -= 2;
      }
      while (v44);
      v12 = (double *)((char *)v12 + v37);
      v14 = (double *)((char *)v14 + v37);
      if (v35 == v36)
      {
        v10 = v12 - 1;
        goto LABEL_56;
      }
      v10 = (double *)((char *)v10 + v37);
      v13 = (float64x2_t *)v18;
    }
  }
  else
  {
    v17 = 1;
  }
  v47 = 0;
  v48 = ~v17 + v6;
  do
  {
    v49 = v10[2];
    v50 = *v10;
    v10 = &v12[v47];
    v13->f64[v47] = (v49 - v50) * 0.5;
    v14[v47] = v12[v6 + v47] - v12[v47];
    ++v47;
    --v48;
  }
  while (v48);
  v12 = (double *)((char *)v12 + v47 * 8);
  v10 = v12 - 1;
  v18 = &v13->f64[v47];
  v14 = (double *)((char *)v14 + v47 * 8);
LABEL_56:
  *v18 = *v12 - *v10;
  v51 = v18 + 1;
  *v14 = v12[v6] - *v12;
  v52 = v14 + 1;
  v53 = v7 - 1;
  v54 = v12 + 1;
  if (v7 - 1 < 2)
    goto LABEL_175;
  if (v15 > 1)
  {
    v55 = (v6 - 3);
    v56 = 8 * v55 + 24;
    v57 = v56 - 8 * v6;
    v58 = (v55 + 1) & 0x1FFFFFFFELL;
    v59 = v58;
    v179 = 8 * v58 - 8;
    v60 = 1;
    __asm { FMOV            V1.2D, #0.5 }
    while (1)
    {
      v66 = v12 + 2;
      *v51 = v12[2] - *v54;
      *v52 = (v54[v6] - v54[-v6]) * 0.5;
      v67 = (float64x2_t *)(v18 + 2);
      v68 = (float64x2_t *)(v14 + 2);
      if (v55 < 0xD)
      {
        v69 = 1;
        goto LABEL_115;
      }
      v70 = v15;
      v71 = (float64x2_t *)((char *)v18 + v56);
      v72 = (float64x2_t *)((char *)v14 + v56);
      v73 = (char *)v12 + 16 - 8 * v6;
      v74 = (float64x2_t *)((char *)v12 + v57);
      v75 = &v12[v6 + 2];
      v76 = &v12[v55 + 3 + v6];
      v77 = v12 + 1;
      v78 = &v12[v55 + 4];
      v79 = v67 >= (float64x2_t *)((char *)v12 + v57) || v73 >= (char *)v71;
      v80 = !v79;
      v81 = v67 >= (float64x2_t *)v76 || v75 >= (double *)v71;
      v82 = !v81;
      v83 = v67 >= (float64x2_t *)v78 || v77 >= (double *)v71;
      v84 = !v83;
      v85 = v68 >= v74 || v73 >= (char *)v72;
      v86 = !v85;
      v87 = v68 >= (float64x2_t *)v76 || v75 >= (double *)v72;
      v88 = !v87;
      v89 = v68 >= (float64x2_t *)v78 || v77 >= (double *)v72;
      v90 = !v89;
      v91 = v68 >= v71 || v67 >= v72;
      v69 = 1;
      if (!v91 || v80 || v82 || v84 || v86 || v88 || v90)
        break;
      v18 = &v67->f64[v59];
      v92 = v67;
      v93 = v68;
      v94 = v66;
      v95 = (v55 + 1) & 0x1FFFFFFFELL;
      do
      {
        *v92++ = vmulq_f64(vsubq_f64(*(float64x2_t *)(v94 + 1), *(float64x2_t *)(v94 - 1)), _Q1);
        *v93++ = vmulq_f64(vsubq_f64(*(float64x2_t *)&v94[v6], *(float64x2_t *)&v94[-v6]), _Q1);
        v94 += 2;
        v95 -= 2;
      }
      while (v95);
      v14 = &v68->f64[v59];
      v12 = &v66[v59];
      v15 = v70;
      if (v55 + 1 != v58)
      {
        v69 = (v6 - 2) | 1;
        v68 = (float64x2_t *)((char *)v68 + v59 * 8);
        v67 = (float64x2_t *)((char *)v67 + v59 * 8);
        v66 = (double *)((char *)v66 + v59 * 8);
        goto LABEL_115;
      }
      v62 = (uint64_t)v68 + v179;
      v63 = (uint64_t)v67 + v179;
      v64 = (double *)((char *)v66 + v179);
LABEL_60:
      *v14 = (v12[v6] - v12[-v6]) * 0.5;
      v65 = *v64;
      v54 = v64 + 2;
      *v18 = *v12 - v65;
      ++v60;
      v52 = (double *)(v62 + 16);
      v51 = (double *)(v63 + 16);
      if (v60 == v53)
        goto LABEL_175;
    }
    v15 = v70;
LABEL_115:
    v96 = 0;
    v97 = v15 - v69;
    do
    {
      v67->f64[v96] = (v66[v96 + 1] - v66[v96 - 1]) * 0.5;
      v68->f64[v96] = (v66[v6 + v96] - v66[v96 - v6]) * 0.5;
      ++v96;
      --v97;
    }
    while (v97);
    v14 = &v68->f64[v96];
    v62 = (uint64_t)v68 + v96 * 8 - 8;
    v18 = &v67->f64[v96];
    v63 = (uint64_t)v67 + v96 * 8 - 8;
    v12 = &v66[v96];
    v64 = v12 - 1;
    goto LABEL_60;
  }
  v98 = v7 - 3;
  if (v98 > 0xA)
  {
    v100 = 16 * v98 + 24;
    v101 = (double *)((char *)v18 + v100);
    v102 = (double *)((char *)v14 + v100);
    v103 = (double *)((char *)v12 + v100);
    v104 = (unint64_t)&v12[-v6 + 1];
    v105 = (double *)((char *)v12 + v100 - 8 * v6);
    v106 = &v12[v6];
    v107 = v106 + 1;
    v108 = (unint64_t)v106 + v100;
    v110 = v51 < v103 && v54 < v101;
    v112 = v51 < v105 && v104 < (unint64_t)v101;
    v114 = (unint64_t)v51 < v108 && v107 < v101;
    v116 = v52 < v103 && v54 < v102;
    v118 = v52 < v105 && v104 < (unint64_t)v102;
    v120 = (unint64_t)v52 < v108 && v107 < v102;
    v121 = v52 >= v101 || v51 >= v102;
    v99 = 1;
    if (v121 && !v110 && !v112 && !v114 && !v116 && !v118 && !v120)
    {
      v122 = v98 + 1;
      v123 = (v98 + 1) & 0x1FFFFFFFELL;
      v124 = 16 * v123;
      v125 = &v51[2 * v123];
      v99 = v122 | 1;
      v18 += 2 * v123;
      __asm { FMOV            V0.2D, #0.5 }
      v128 = v12 + 1;
      v129 = v14 + 1;
      v130 = v123;
      do
      {
        v131 = v128;
        v180 = vld2q_f64(v131);
        v126 = -1 * v6;
        v132 = &v131[v126];
        v133 = &v128[v6];
        v181 = vld2q_f64(v133);
        v183 = vld2q_f64(v132);
        v180.val[0] = vsubq_f64(v180.val[1], v180.val[0]);
        v184.val[0] = vmulq_f64(vsubq_f64(v181.val[0], v183.val[0]), _Q0);
        v184.val[1] = vmulq_f64(vsubq_f64(v181.val[1], v183.val[1]), _Q0);
        vst2q_f64(v129, v184);
        v129 += 4;
        v182 = vld2q_f64(v128);
        v128 += 4;
        v180.val[1] = vsubq_f64(v182.val[1], v182.val[0]);
        vst2q_f64(v51, v180);
        v51 += 4;
        v130 -= 2;
      }
      while (v130);
      v54 = (double *)((char *)v54 + v124);
      v52 = (double *)((char *)v52 + v124);
      v12 = (double *)((char *)v12 + v124);
      if (v122 == v123)
      {
        v51 = v125;
        goto LABEL_175;
      }
      v14 = (double *)((char *)v14 + v124);
      v51 = v125;
    }
  }
  else
  {
    v99 = 1;
  }
  v134 = 0;
  v135 = ~v99 + v7;
  v136 = v14;
  v137 = v18;
  v138 = v12;
  do
  {
    *v51 = v12[v134 + 2] - *v54;
    v139 = v54[v6];
    v140 = v54[-v6];
    v54 = v138 + 3;
    v138 += 2;
    *v52 = (v139 - v140) * 0.5;
    v51 = v137 + 3;
    v137 += 2;
    v141 = &v18[v134];
    v52 = v136 + 3;
    v136 += 2;
    v14[v134 + 2] = (v12[v6 + 2 + v134] - v12[v134 + 2 - v6]) * 0.5;
    v143 = v12[v134 + 1];
    v142 = v12[v134 + 2];
    v134 += 2;
    v141[2] = v142 - v143;
    --v135;
  }
  while (v135);
  v52 = &v14[v134 + 1];
  v51 = &v18[v134 + 1];
  v12 = (double *)((char *)v12 + v134 * 8);
  v54 = v12 + 1;
LABEL_175:
  *v51 = v12[2] - *v54;
  v144 = (float64x2_t *)(v51 + 1);
  *v52 = *v54 - v54[-v6];
  v145 = v52 + 1;
  v146 = v54 + 1;
  if (v15 < 2)
  {
    v149 = v51 + 1;
  }
  else
  {
    v147 = (v6 - 3);
    if (v147 > 0xE)
    {
      v150 = 8 * v147 + 16;
      v151 = (double *)((char *)v51 + v150);
      v152 = (float64x2_t *)((char *)v52 + v150);
      v153 = (unint64_t)&v54[-v6 + 1];
      v154 = (float64x2_t *)((char *)v54 + v150 - 8 * v6);
      v155 = (unint64_t)&v54[v147 + 3];
      v157 = v144 < v154 && v153 < (unint64_t)v151;
      v159 = (unint64_t)v144 < v155 && v54 < v151;
      v161 = v145 < (double *)v154 && v153 < (unint64_t)v152;
      v163 = (unint64_t)v145 < v155 && v54 < (double *)v152;
      v164 = v145 >= v151 || v144 >= v152;
      v148 = 1;
      if (v164 && !v157 && !v159 && !v161 && !v163)
      {
        v165 = v147 + 1;
        v166 = (v147 + 1) & 0x1FFFFFFFELL;
        v167 = 8 * v166;
        v149 = &v144->f64[v166];
        v148 = v165 | 1;
        __asm { FMOV            V0.2D, #0.5 }
        v169 = (float64x2_t *)v145;
        v170 = v54 + 1;
        v171 = v166;
        do
        {
          *v144++ = vmulq_f64(vsubq_f64(*(float64x2_t *)(v170 + 1), *(float64x2_t *)(v170 - 1)), _Q0);
          v172 = *(float64x2_t *)&v170[-v6];
          v173 = *(float64x2_t *)v170;
          v170 += 2;
          *v169++ = vsubq_f64(v173, v172);
          v171 -= 2;
        }
        while (v171);
        v146 = (double *)((char *)v146 + v167);
        v145 = (double *)((char *)v145 + v167);
        if (v165 == v166)
        {
          v54 = v146 - 1;
          goto LABEL_220;
        }
        v54 = (double *)((char *)v54 + v167);
        v144 = (float64x2_t *)v149;
      }
    }
    else
    {
      v148 = 1;
    }
    v174 = 0;
    v175 = ~v148 + v6;
    do
    {
      v176 = v54[2];
      v177 = *v54;
      v54 = &v146[v174];
      v144->f64[v174] = (v176 - v177) * 0.5;
      v145[v174] = v146[v174] - v146[v174 - v6];
      ++v174;
      --v175;
    }
    while (v175);
    v146 = (double *)((char *)v146 + v174 * 8);
    v54 = v146 - 1;
    v149 = &v144->f64[v174];
    v145 = (double *)((char *)v145 + v174 * 8);
  }
LABEL_220:
  *v149 = *v146 - *v54;
  result = *v146 - v146[-v6];
  *v145 = result;
  return result;
}

uint64_t ImageUtils::Fliplr<double>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  int8x16_t *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int8x16_t *v25;
  uint64_t v26;
  int8x16_t v27;
  uint64_t *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int8x16_t *v38;
  int8x16_t *v39;
  int8x16_t *v40;
  uint64_t v41;
  int8x16_t v42;
  int v43;
  uint64_t *v44;
  uint64_t v45;

  v3 = result;
  v5 = *(unsigned int *)(result + 16);
  v4 = *(unsigned int *)(result + 20);
  v6 = 8 * v5 * (unint64_t)v4;
  if (*(_QWORD *)(a2 + 32) < v6)
  {
    if (*(_QWORD *)(a2 + 8) && *(_BYTE *)(a2 + 24))
      MEMORY[0x20BD36480]();
    result = operator new[]();
    *(_QWORD *)(a2 + 8) = result;
    *(_QWORD *)(a2 + 32) = v6;
    *(_BYTE *)(a2 + 24) = 1;
  }
  *(_DWORD *)(a2 + 16) = v5;
  *(_DWORD *)(a2 + 20) = v4;
  if ((_DWORD)v5)
    v7 = (_DWORD)v4 == 0;
  else
    v7 = 1;
  if (!v7)
  {
    v8 = *(int8x16_t **)(a2 + 8);
    if (v4 > 5)
    {
      v11 = 8 * (v4 - 1);
      v12 = v11 + 8;
      v13 = 8 * v4;
      v14 = 8 * v4 - 8;
      v15 = v14 - v11;
      v16 = 8 * (v4 & 0xFFFFFFFC);
      if ((v4 & 0xFFFFFFFC) == v4)
      {
        v17 = 0;
        v18 = 0;
        v19 = v13 - 16;
        do
        {
          result = 8 * v17;
          v20 = *(_QWORD *)(v3 + 8);
          v21 = v20 + 8 * (v4 * v18);
          v22 = v21 + 8 * v4;
          v23 = v21 + v15;
          if ((unint64_t)v8 >= v22 || v23 >= (unint64_t)v8->u64 + v12)
          {
            v25 = v8 + 1;
            result += v20 + v19;
            v26 = v4 & 0xFFFFFFFC;
            do
            {
              v27 = vextq_s8(*(int8x16_t *)(result - 16), *(int8x16_t *)(result - 16), 8uLL);
              v25[-1] = vextq_s8(*(int8x16_t *)result, *(int8x16_t *)result, 8uLL);
              *v25 = v27;
              v25 += 2;
              result -= 32;
              v26 -= 4;
            }
            while (v26);
            v8 = (int8x16_t *)((char *)v8 + v16);
          }
          else
          {
            v28 = (uint64_t *)(v20 + v14 + result);
            LODWORD(result) = v4;
            do
            {
              v29 = *v28--;
              v8->i64[0] = v29;
              v8 = (int8x16_t *)((char *)v8 + 8);
              result = (result - 1);
            }
            while ((_DWORD)result);
          }
          ++v18;
          v17 += v4;
        }
        while (v18 != v5);
      }
      else
      {
        v30 = 0;
        v31 = 0;
        v32 = v13 - 16;
        do
        {
          v33 = *(_QWORD *)(v3 + 8);
          v34 = v33 + 8 * (v4 * v31);
          v35 = v34 + 8 * v4;
          v36 = v34 + v15;
          if ((unint64_t)v8 >= v35 || v36 >= (unint64_t)v8->u64 + v12)
          {
            v38 = (int8x16_t *)((char *)v8 + v16);
            v39 = v8 + 1;
            v40 = (int8x16_t *)(v33 + v32 + 8 * v30);
            v41 = v4 & 0xFFFFFFFC;
            do
            {
              v42 = vextq_s8(v40[-1], v40[-1], 8uLL);
              v39[-1] = vextq_s8(*v40, *v40, 8uLL);
              *v39 = v42;
              v39 += 2;
              v40 -= 2;
              v41 -= 4;
            }
            while (v41);
            v35 -= v16;
            v43 = v4 & 0xFFFFFFFC;
            v8 = v38;
          }
          else
          {
            v43 = 0;
          }
          LODWORD(result) = v4 - v43;
          v44 = (uint64_t *)(v35 - 8);
          do
          {
            v45 = *v44--;
            v8->i64[0] = v45;
            v8 = (int8x16_t *)((char *)v8 + 8);
            result = (result - 1);
          }
          while ((_DWORD)result);
          ++v31;
          v30 += v4;
        }
        while (v31 != v5);
      }
    }
    else
    {
      v9 = 0;
      do
      {
        v10 = *(_QWORD *)(v3 + 8) + 8 * v9 + 8 * v4;
        v8->i64[0] = *(_QWORD *)(v10 - 8);
        if ((_DWORD)v4 == 1)
        {
          v8 = (int8x16_t *)((char *)v8 + 8);
        }
        else
        {
          v8->i64[1] = *(_QWORD *)(v10 - 16);
          if ((_DWORD)v4 == 2)
          {
            ++v8;
          }
          else
          {
            v8[1].i64[0] = *(_QWORD *)(v10 - 24);
            if ((_DWORD)v4 == 3)
            {
              v8 = (int8x16_t *)((char *)v8 + 24);
            }
            else
            {
              v8[1].i64[1] = *(_QWORD *)(v10 - 32);
              if ((_DWORD)v4 == 4)
              {
                v8 += 2;
              }
              else
              {
                v8[2].i64[0] = *(_QWORD *)(v10 - 40);
                v8 = (int8x16_t *)((char *)v8 + 40);
              }
            }
          }
        }
        v9 += v4;
        --v5;
      }
      while (v5);
    }
  }
  return result;
}

uint64_t ImageUtils::Flipud<double>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  __int128 *v18;
  _OWORD *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  char *v25;
  int v26;
  _QWORD *v27;
  __int128 *v28;
  _OWORD *v29;
  uint64_t v30;
  __int128 v31;
  int v32;
  uint64_t v33;

  v3 = result;
  v5 = *(unsigned int *)(result + 16);
  v4 = *(unsigned int *)(result + 20);
  v6 = 8 * v5 * (unint64_t)v4;
  if (*(_QWORD *)(a2 + 32) < v6)
  {
    if (*(_QWORD *)(a2 + 8) && *(_BYTE *)(a2 + 24))
      MEMORY[0x20BD36480]();
    result = operator new[]();
    *(_QWORD *)(a2 + 8) = result;
    *(_QWORD *)(a2 + 32) = v6;
    *(_BYTE *)(a2 + 24) = 1;
  }
  *(_DWORD *)(a2 + 16) = v5;
  *(_DWORD *)(a2 + 20) = v4;
  if ((_DWORD)v5)
    v7 = (_DWORD)v4 == 0;
  else
    v7 = 1;
  if (!v7)
  {
    v8 = *(_QWORD **)(a2 + 8);
    if (v4 > 5)
    {
      v11 = 8 * (v4 & 0xFFFFFFFC);
      if ((v4 & 0xFFFFFFFC) == v4)
      {
        v12 = 0;
        v13 = v4 * (v5 - 1);
        do
        {
          v14 = *(_QWORD *)(v3 + 8);
          v15 = (char *)(v14 + 8 * ((v5 + ~(_DWORD)v12) * v4));
          if ((unint64_t)((char *)v8 - v15) >= 0x20)
          {
            v18 = (__int128 *)(v14 + 8 * v13 + 16);
            v19 = v8 + 2;
            v20 = v4 & 0xFFFFFFFC;
            do
            {
              v21 = *v18;
              *(v19 - 1) = *(v18 - 1);
              *v19 = v21;
              v18 += 2;
              v19 += 2;
              v20 -= 4;
            }
            while (v20);
            v8 = (_QWORD *)((char *)v8 + v11);
          }
          else
          {
            v16 = v4;
            do
            {
              v17 = *(_QWORD *)v15;
              v15 += 8;
              *v8++ = v17;
              --v16;
            }
            while (v16);
          }
          ++v12;
          v13 -= v4;
        }
        while (v12 != v5);
      }
      else
      {
        v22 = 0;
        v23 = v4 * (v5 - 1);
        do
        {
          v24 = *(_QWORD *)(v3 + 8);
          v25 = (char *)(v24 + 8 * ((v5 + ~(_DWORD)v22) * v4));
          if ((unint64_t)((char *)v8 - v25) >= 0x20)
          {
            v27 = &v8[(unint64_t)v11 / 8];
            v28 = (__int128 *)(v24 + 8 * v23 + 16);
            v29 = v8 + 2;
            v30 = v4 & 0xFFFFFFFC;
            do
            {
              v31 = *v28;
              *(v29 - 1) = *(v28 - 1);
              *v29 = v31;
              v28 += 2;
              v29 += 2;
              v30 -= 4;
            }
            while (v30);
            v25 += v11;
            v26 = v4 & 0xFFFFFFFC;
            v8 = v27;
          }
          else
          {
            v26 = 0;
          }
          v32 = v4 - v26;
          do
          {
            v33 = *(_QWORD *)v25;
            v25 += 8;
            *v8++ = v33;
            --v32;
          }
          while (v32);
          ++v22;
          v23 -= v4;
        }
        while (v22 != v5);
      }
    }
    else
    {
      v9 = v4 * (v5 - 1);
      do
      {
        v10 = (_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v9);
        *v8 = *v10;
        if ((_DWORD)v4 == 1)
        {
          ++v8;
        }
        else
        {
          v8[1] = v10[1];
          if ((_DWORD)v4 == 2)
          {
            v8 += 2;
          }
          else
          {
            v8[2] = v10[2];
            if ((_DWORD)v4 == 3)
            {
              v8 += 3;
            }
            else
            {
              v8[3] = v10[3];
              if ((_DWORD)v4 == 4)
              {
                v8 += 4;
              }
              else
              {
                v8[4] = v10[4];
                v8 += 5;
              }
            }
          }
        }
        v9 -= v4;
        --v5;
      }
      while (v5);
    }
  }
  return result;
}

int8x16_t *ImageUtils::Rot90<double>(int8x16_t *result, int a2, uint64_t a3)
{
  int8x16_t *v4;
  uint64_t v5;
  unsigned int v6;
  const void *v7;
  unint64_t v8;
  void *v9;
  size_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  int8x16_t *v31;
  int8x16_t *v32;
  uint64_t v33;
  int8x16_t v34;
  int v35;
  uint64_t v36;

  v4 = result;
  v6 = result[1].u32[0];
  v5 = result[1].u32[1];
  switch(a2)
  {
    case 0:
      v7 = (const void *)result->i64[1];
      v8 = 8 * v6 * (unint64_t)v5;
      v9 = *(void **)(a3 + 8);
      if (*(_QWORD *)(a3 + 32) >= v8)
      {
        v10 = 8 * v6 * v5;
      }
      else
      {
        if (v9)
        {
          if (*(_BYTE *)(a3 + 24))
            MEMORY[0x20BD36480]();
        }
        v10 = 8 * v6 * v5;
        v9 = (void *)operator new[]();
        *(_QWORD *)(a3 + 8) = v9;
        *(_QWORD *)(a3 + 32) = v8;
        *(_BYTE *)(a3 + 24) = 1;
      }
      *(_DWORD *)(a3 + 16) = v6;
      *(_DWORD *)(a3 + 20) = v5;
      return (int8x16_t *)memcpy(v9, v7, v10);
    case 1:
      v11 = 8 * v5 * (unint64_t)v6;
      if (*(_QWORD *)(a3 + 32) < v11)
      {
        if (*(_QWORD *)(a3 + 8) && *(_BYTE *)(a3 + 24))
          MEMORY[0x20BD36480]();
        result = (int8x16_t *)operator new[]();
        *(_QWORD *)(a3 + 8) = result;
        *(_QWORD *)(a3 + 32) = v11;
        *(_BYTE *)(a3 + 24) = 1;
      }
      *(_DWORD *)(a3 + 16) = v5;
      *(_DWORD *)(a3 + 20) = v6;
      if ((_DWORD)v5 && v6)
      {
        v12 = 0;
        v13 = *(_QWORD **)(a3 + 8);
        v14 = 8 * (v5 - 1);
        do
        {
          v15 = (_QWORD *)(v4->i64[1] + v14);
          v16 = v6;
          do
          {
            *v13++ = *v15;
            v15 += v5;
            --v16;
          }
          while (v16);
          ++v12;
          v14 -= 8;
        }
        while (v12 != v5);
      }
      return result;
    case 2:
      v17 = 8 * v6 * (unint64_t)v5;
      result = *(int8x16_t **)(a3 + 8);
      if (*(_QWORD *)(a3 + 32) >= v17)
      {
        v18 = v6 * v5;
        *(_DWORD *)(a3 + 16) = v6;
        *(_DWORD *)(a3 + 20) = v5;
        if (!(v6 * (_DWORD)v5))
          return result;
LABEL_40:
        v25 = v4->u64[1];
        v26 = v18 - 1;
        v27 = (uint64_t *)(v25 + 8 * v26);
        if (v18 >= 0xA
          && ((v28 = 8 * v26 + 8, (unint64_t)result < v25 + v28)
            ? (v29 = v25 >= (unint64_t)result->u64 + v28)
            : (v29 = 1),
              v29))
        {
          v30 = v18 & 0xFFFFFFFC;
          v31 = (int8x16_t *)(v25 + 8 * v26 - 8);
          v32 = result + 1;
          v33 = v30;
          do
          {
            v34 = vextq_s8(v31[-1], v31[-1], 8uLL);
            v32[-1] = vextq_s8(*v31, *v31, 8uLL);
            *v32 = v34;
            v31 -= 2;
            v32 += 2;
            v33 -= 4;
          }
          while (v33);
          if (v30 == v18)
            return result;
          result = (int8x16_t *)((char *)result + 8 * v30);
          v27 -= v30;
        }
        else
        {
          LODWORD(v30) = 0;
        }
        v35 = v18 - v30;
        do
        {
          v36 = *v27--;
          result->i64[0] = v36;
          result = (int8x16_t *)((char *)result + 8);
          --v35;
        }
        while (v35);
        return result;
      }
      if (result && *(_BYTE *)(a3 + 24))
        MEMORY[0x20BD36480]();
      v18 = v6 * v5;
      result = (int8x16_t *)operator new[]();
      *(_QWORD *)(a3 + 8) = result;
      *(_QWORD *)(a3 + 32) = v17;
      *(_BYTE *)(a3 + 24) = 1;
      *(_DWORD *)(a3 + 16) = v6;
      *(_DWORD *)(a3 + 20) = v5;
      if (v6 * (_DWORD)v5)
        goto LABEL_40;
      return result;
    case 3:
      v19 = 8 * v5 * (unint64_t)v6;
      if (*(_QWORD *)(a3 + 32) < v19)
      {
        if (*(_QWORD *)(a3 + 8) && *(_BYTE *)(a3 + 24))
          MEMORY[0x20BD36480]();
        result = (int8x16_t *)operator new[]();
        *(_QWORD *)(a3 + 8) = result;
        *(_QWORD *)(a3 + 32) = v19;
        *(_BYTE *)(a3 + 24) = 1;
      }
      *(_DWORD *)(a3 + 16) = v5;
      *(_DWORD *)(a3 + 20) = v6;
      if ((_DWORD)v5 && v6)
      {
        v20 = 0;
        v21 = *(_QWORD **)(a3 + 8);
        v22 = 8 * (v6 - 1) * v5;
        do
        {
          v23 = (_QWORD *)(v4->i64[1] + v22);
          v24 = v6;
          do
          {
            *v21++ = *v23;
            v23 -= v5;
            --v24;
          }
          while (v24);
          ++v20;
          v22 += 8;
        }
        while (v20 != v5);
      }
      return result;
    default:
      return result;
  }
}

double ImageUtils::Rot90<BOOL>(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  const void *v7;
  unint64_t v8;
  void *v9;
  size_t v10;
  unint64_t v11;
  int8x16_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  unsigned int v16;
  unint64_t v17;
  int8x16_t *v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  __int8 *v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  __int8 v32;
  int8x16_t *v33;
  int8x16_t *v34;
  uint64_t v35;
  int8x16_t v36;
  int8x16_t v37;
  uint64_t v38;
  int8x8_t *v39;
  _QWORD *v40;
  int8x8_t v41;

  v6 = *(_DWORD *)(a1 + 16);
  v5 = *(unsigned int *)(a1 + 20);
  switch(a2)
  {
    case 0:
      v7 = *(const void **)(a1 + 8);
      v8 = v6 * (unint64_t)v5;
      v9 = *(void **)(a3 + 8);
      if (*(_QWORD *)(a3 + 32) >= v8)
      {
        v10 = v6 * v5;
      }
      else
      {
        if (v9 && *(_BYTE *)(a3 + 24))
          MEMORY[0x20BD36480]();
        v10 = v6 * v5;
        v9 = (void *)operator new[]();
        *(_QWORD *)(a3 + 8) = v9;
        *(_QWORD *)(a3 + 32) = v8;
        *(_BYTE *)(a3 + 24) = 1;
      }
      *(_DWORD *)(a3 + 16) = v6;
      *(_DWORD *)(a3 + 20) = v5;
      memcpy(v9, v7, v10);
      return *(double *)v12.i64;
    case 1:
      v11 = v6 * (unint64_t)v5;
      if (*(_QWORD *)(a3 + 32) < v11)
      {
        if (*(_QWORD *)(a3 + 8) && *(_BYTE *)(a3 + 24))
          MEMORY[0x20BD36480]();
        *(_QWORD *)(a3 + 8) = operator new[]();
        *(_QWORD *)(a3 + 32) = v11;
        *(_BYTE *)(a3 + 24) = 1;
      }
      *(_DWORD *)(a3 + 16) = v5;
      *(_DWORD *)(a3 + 20) = v6;
      if ((_DWORD)v5 && v6)
      {
        v13 = 0;
        v14 = *(_BYTE **)(a3 + 8);
        do
        {
          v15 = (_BYTE *)(*(_QWORD *)(a1 + 8) + (v5 - 1) - v13);
          v16 = v6;
          do
          {
            *v14++ = *v15;
            v15 += v5;
            --v16;
          }
          while (v16);
          ++v13;
        }
        while (v13 != v5);
      }
      return *(double *)v12.i64;
    case 2:
      v17 = v6 * (unint64_t)v5;
      v18 = *(int8x16_t **)(a3 + 8);
      if (*(_QWORD *)(a3 + 32) >= v17)
      {
        v19 = v6 * v5;
        *(_DWORD *)(a3 + 16) = v6;
        *(_DWORD *)(a3 + 20) = v5;
        if (!(v6 * (_DWORD)v5))
          return *(double *)v12.i64;
LABEL_40:
        v25 = *(_QWORD *)(a1 + 8);
        v26 = v19 - 1;
        v27 = (__int8 *)(v25 + v26);
        if (v19 < 8
          || ((unint64_t)v18 < v25 + v19 ? (v28 = v25 >= (unint64_t)v18->u64 + v19) : (v28 = 1), !v28))
        {
          LODWORD(v30) = 0;
          goto LABEL_49;
        }
        if (v19 >= 0x20)
        {
          v29 = v19 & 0xFFFFFFE0;
          v33 = (int8x16_t *)(v26 + v25 - 15);
          v34 = v18 + 1;
          v35 = v29;
          do
          {
            v36 = vrev64q_s8(*v33);
            v12 = vextq_s8(v36, v36, 8uLL);
            v37 = vrev64q_s8(v33[-1]);
            v34[-1] = v12;
            *v34 = vextq_s8(v37, v37, 8uLL);
            v33 -= 2;
            v34 += 2;
            v35 -= 32;
          }
          while (v35);
          if (v29 == v19)
            return *(double *)v12.i64;
          if ((v19 & 0x18) == 0)
          {
            v27 -= v29;
            v18 = (int8x16_t *)((char *)v18 + v29);
            LODWORD(v30) = v19 & 0xFFFFFFE0;
            goto LABEL_49;
          }
        }
        else
        {
          v29 = 0;
        }
        v30 = v19 & 0xFFFFFFF8;
        v38 = v29 - v30;
        v39 = (int8x8_t *)(v26 - v29 + v25 - 7);
        v40 = (uint64_t *)((char *)v18->i64 + v29);
        do
        {
          v41 = *v39--;
          *(int8x8_t *)v12.i8 = vrev64_s8(v41);
          *v40++ = v12.i64[0];
          v38 += 8;
        }
        while (v38);
        if (v30 == v19)
          return *(double *)v12.i64;
        v18 = (int8x16_t *)((char *)v18 + v30);
        v27 -= v19 & 0xFFFFFFF8;
LABEL_49:
        v31 = v19 - v30;
        do
        {
          v32 = *v27--;
          v18->i8[0] = v32;
          v18 = (int8x16_t *)((char *)v18 + 1);
          --v31;
        }
        while (v31);
        return *(double *)v12.i64;
      }
      if (v18 && *(_BYTE *)(a3 + 24))
        MEMORY[0x20BD36480]();
      v19 = v6 * v5;
      v18 = (int8x16_t *)operator new[]();
      *(_QWORD *)(a3 + 8) = v18;
      *(_QWORD *)(a3 + 32) = v17;
      *(_BYTE *)(a3 + 24) = 1;
      *(_DWORD *)(a3 + 16) = v6;
      *(_DWORD *)(a3 + 20) = v5;
      if (v6 * (_DWORD)v5)
        goto LABEL_40;
      return *(double *)v12.i64;
    case 3:
      v20 = v6 * (unint64_t)v5;
      if (*(_QWORD *)(a3 + 32) < v20)
      {
        if (*(_QWORD *)(a3 + 8) && *(_BYTE *)(a3 + 24))
          MEMORY[0x20BD36480]();
        *(_QWORD *)(a3 + 8) = operator new[]();
        *(_QWORD *)(a3 + 32) = v20;
        *(_BYTE *)(a3 + 24) = 1;
      }
      *(_DWORD *)(a3 + 16) = v5;
      *(_DWORD *)(a3 + 20) = v6;
      if ((_DWORD)v5 && v6)
      {
        v21 = 0;
        v22 = *(_BYTE **)(a3 + 8);
        do
        {
          v23 = (_BYTE *)(*(_QWORD *)(a1 + 8) + (v6 - 1) * v5 + v21);
          v24 = v6;
          do
          {
            *v22++ = *v23;
            v23 -= v5;
            --v24;
          }
          while (v24);
          ++v21;
        }
        while (v21 != v5);
      }
      return *(double *)v12.i64;
    default:
      return *(double *)v12.i64;
  }
}

void ImageUtils::OtsuThreshold(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  double *v4;
  double v5;
  int v6;
  double *v7;
  int v8;
  double v9;
  double v10;
  double *v11;
  double *v12;
  double *v13;
  double v14;
  uint64_t v15;
  double *v16;
  _QWORD *v17;
  void *v18;
  double v19;
  uint64_t v20;
  unsigned int v21;
  double v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  double v28;
  double v29;
  double v30;
  int v31;
  uint64_t v32;
  int v33;
  double v34;
  double v35;
  double v36;
  void *v37;

  v2 = *(_DWORD *)(a1 + 16);
  v3 = *(_DWORD *)(a1 + 20);
  v4 = *(double **)(a1 + 8);
  v5 = *v4;
  v6 = v3 * v2;
  if (v3 * v2 >= 2)
  {
    v7 = v4 + 1;
    v8 = v6 - 1;
    v9 = v5;
    while (1)
    {
      v10 = *v7;
      if (*v7 < v9)
      {
        v9 = *v7;
      }
      else if (v10 > v5)
      {
        goto LABEL_5;
      }
      v10 = v5;
LABEL_5:
      ++v7;
      v5 = v10;
      if (!--v8)
        goto LABEL_10;
    }
  }
  v9 = *v4;
  v10 = *v4;
LABEL_10:
  if (v9 != v10)
  {
    v11 = (double *)malloc_type_calloc(0x100uLL, 8uLL, 0x100004000313F17uLL);
    v12 = v11;
    if (v6)
    {
      v13 = *(double **)(a1 + 8);
      do
      {
        v14 = *v13++;
        v15 = vcvtad_u64_f64((v14 - v9) / (v10 - v9) * 255.0);
        v11[v15] = 1.0 / ((double)v2 * (double)v3) + v11[v15];
        --v6;
      }
      while (v6);
    }
    v16 = (double *)malloc_type_malloc(0x800uLL, 0x100004000313F17uLL);
    v17 = malloc_type_malloc(0x800uLL, 0x100004000313F17uLL);
    v18 = v17;
    *v16 = *v12;
    v19 = *v12;
    *v17 = *(_QWORD *)v12;
    if (v16 >= (double *)v17 + 256 || v17 >= (_QWORD *)v16 + 256)
    {
      v20 = 0;
      v22 = *v16;
      v23 = 2;
      do
      {
        v22 = v22 + v12[v20 + 1];
        v16[v20 + 1] = v22;
        v19 = v19 + v12[v20 + 1] * (double)v23;
        *(double *)&v17[++v20] = v19;
        ++v23;
      }
      while ((_DWORD)(v20 * 8) != 2040);
    }
    else
    {
      v20 = 0;
      v21 = 2;
      do
      {
        v16[v20 + 1] = v16[v20] + v12[v20 + 1];
        v19 = *(double *)&v17[v20] + v12[v20 + 1] * (double)v21;
        *(double *)&v17[++v20] = v19;
        ++v21;
      }
      while ((_DWORD)(v20 * 8) != 2040);
    }
    v24 = (uint64_t)&v17[v20 - 1];
    v25 = (uint64_t)&v16[v20 - 1];
    v26 = (uint64_t)&v12[v20 - 1];
    v27 = 0;
    v28 = *(double *)(v25 - 2032);
    v29 = -(*(double *)(v24 - 2032) - v19 * v28);
    v30 = v29 * v29 / (v28 * (1.0 - v28));
    v31 = 1;
    v32 = -253;
    v33 = 1;
    do
    {
      v34 = *(double *)(v25 + 8 * v32);
      v35 = -(*(double *)(v24 + 8 * v32) - v19 * v34);
      v36 = v35 * v35 / (v34 * (1.0 - v34));
      if (v36 > v30)
      {
        v27 = v32 + 254;
        v33 = 1;
      }
      else
      {
        if (v36 == v30)
        {
          v27 += v31;
          ++v33;
        }
        v36 = v30;
      }
      ++v31;
      ++v32;
      v30 = v36;
    }
    while ((_DWORD)v32 != 1);
    v37 = (void *)(v26 - 2032);
    free(v16);
    free(v18);
    free(v37);
  }
}

uint64_t ImageUtils::ExtractPatch<double>(uint64_t result, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, uint64_t a6)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  _OWORD *v30;
  unsigned int v31;
  _OWORD *v32;
  __int128 v33;
  uint64_t v34;
  unsigned int v35;
  _OWORD *v36;
  unsigned int v37;
  _OWORD *v38;
  __int128 v39;

  v10 = a2;
  v11 = *(unsigned int *)(result + 20);
  v12 = *(_QWORD *)(result + 8);
  v13 = a3 - a2 + 1;
  v14 = a5 - a4 + 1;
  v15 = 8 * v13 * (unint64_t)v14;
  if (*(_QWORD *)(a6 + 32) < v15)
  {
    if (*(_QWORD *)(a6 + 8) && *(_BYTE *)(a6 + 24))
      MEMORY[0x20BD36480]();
    result = operator new[]();
    *(_QWORD *)(a6 + 8) = result;
    *(_QWORD *)(a6 + 32) = v15;
    *(_BYTE *)(a6 + 24) = 1;
  }
  *(_DWORD *)(a6 + 16) = v13;
  *(_DWORD *)(a6 + 20) = v14;
  if (a3 >= v10 && a5 >= a4)
  {
    v16 = *(_QWORD **)(a6 + 8);
    v17 = v11 * v10;
    v18 = v12 + 8 * v17;
    if (a5 + 1 <= a4 + 1)
      v19 = a4 + 1;
    else
      v19 = a5 + 1;
    v20 = v19 + ~a4;
    if (v20 > 4)
    {
      if (v19 - 1 >= a4)
      {
        v23 = v12 + 8 * (v17 + a4);
        v24 = 8 * v11;
        v25 = v20 + 1;
        v26 = (v20 + 1) & 0x1FFFFFFFCLL;
        v27 = 8 * v26;
        if (v25 == v26)
        {
          v28 = 0;
          do
          {
            if ((unint64_t)v16 - v23 - v24 * v28 >= 0x20)
            {
              v30 = v16 + 2;
              v31 = a4;
              result = v26;
              do
              {
                v32 = (_OWORD *)(v18 + 8 * v31);
                v33 = v32[1];
                *(v30 - 1) = *v32;
                *v30 = v33;
                v31 += 4;
                v30 += 2;
                result -= 4;
              }
              while (result);
              v16 = (_QWORD *)((char *)v16 + v27);
            }
            else
            {
              v29 = a4;
              do
                *v16++ = *(_QWORD *)(v18 + 8 * v29++);
              while (v19 != v29);
            }
            ++v10;
            v18 += 8 * v11;
            ++v28;
          }
          while (v10 <= a3);
        }
        else
        {
          v34 = 0;
          do
          {
            if ((unint64_t)v16 - v23 - v24 * v34 >= 0x20)
            {
              v36 = v16 + 2;
              v37 = a4;
              result = v26;
              do
              {
                v38 = (_OWORD *)(v18 + 8 * v37);
                v39 = v38[1];
                *(v36 - 1) = *v38;
                *v36 = v39;
                v37 += 4;
                v36 += 2;
                result -= 4;
              }
              while (result);
              v16 = (_QWORD *)((char *)v16 + v27);
              v35 = v26 + a4;
            }
            else
            {
              v35 = a4;
            }
            do
              *v16++ = *(_QWORD *)(v18 + 8 * v35++);
            while (v35 <= a5);
            ++v10;
            v18 += 8 * v11;
            ++v34;
          }
          while (v10 <= a3);
        }
      }
      else
      {
        do
        {
          v22 = a4;
          do
            *v16++ = *(_QWORD *)(v18 + 8 * v22++);
          while (v19 != v22);
          ++v10;
          v18 += 8 * v11;
        }
        while (v10 <= a3);
      }
    }
    else
    {
      do
      {
        v21 = a4;
        do
          *v16++ = *(_QWORD *)(v18 + 8 * v21++);
        while (v19 != v21);
        ++v10;
        v18 += 8 * v11;
      }
      while (v10 <= a3);
    }
  }
  return result;
}

uint64_t ImageUtils::Conv2<double>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  int8x16_t *v16;
  int8x16_t *v17;
  uint64_t v18;
  int8x16_t v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  double *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t result;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  double v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  int v46;
  unsigned int v47;
  int v48;
  double v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unint64_t v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  int v61;
  uint64_t v62;
  double v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  double v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unint64_t v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  int v91;
  uint64_t v92;
  double v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t v97;
  int v98;
  unsigned int v99;
  int v100;
  double v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unint64_t v106;
  unsigned int v107;
  uint64_t v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  int v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  double v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  unint64_t v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  double v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  unint64_t v132;
  unsigned int v133;
  unsigned int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  double v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  uint64_t v144;
  const char *v145;
  int v146;
  const char *v147;
  const char *v148;
  unint64_t v149;
  unsigned int v150;
  uint64_t v151;
  unsigned int v152;
  unsigned int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unsigned int v157;
  uint64_t v158;
  unsigned int v159;
  uint64_t v160;
  size_t v161;
  uint64_t v162;
  size_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int v172;
  unsigned int v173;
  unsigned int v174;
  unsigned int v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int v178;
  unsigned int v179;
  unsigned int v180;
  unsigned int v181;
  unsigned int v182;
  unsigned int v183;
  unsigned int v184;
  unsigned int v185;
  unsigned int v186;
  int v187;
  int v188;
  int v189;
  int v190;

  v7 = *(_DWORD *)(a2 + 16);
  v6 = *(unsigned int *)(a2 + 20);
  v8 = v7 * v6;
  if (8 * v7 * (unint64_t)v6)
  {
    v9 = operator new[]();
    if (!(_DWORD)v8)
      goto LABEL_18;
  }
  else
  {
    v9 = 0;
    if (!(_DWORD)v8)
      goto LABEL_18;
  }
  v10 = *(_QWORD *)(a2 + 8);
  v11 = (v8 - 1);
  v12 = (uint64_t *)(v10 + 8 * v11);
  if (v8 < 0xA || ((v13 = 8 * v11 + 8, v9 < v10 + v13) ? (v14 = v10 >= v9 + v13) : (v14 = 1), !v14))
  {
    LODWORD(v15) = 0;
    v20 = (_QWORD *)v9;
LABEL_16:
    v21 = v8 - v15;
    do
    {
      v22 = *v12--;
      *v20++ = v22;
      --v21;
    }
    while (v21);
    goto LABEL_18;
  }
  v15 = v8 & 0xFFFFFFFC;
  v16 = (int8x16_t *)(v10 + 8 * v11 - 8);
  v17 = (int8x16_t *)(v9 + 16);
  v18 = v15;
  do
  {
    v19 = vextq_s8(v16[-1], v16[-1], 8uLL);
    v17[-1] = vextq_s8(*v16, *v16, 8uLL);
    *v17 = v19;
    v16 -= 2;
    v17 += 2;
    v18 -= 4;
  }
  while (v18);
  if (v15 != v8)
  {
    v20 = (_QWORD *)(v9 + 8 * (v8 & 0xFFFFFFFC));
    v12 -= v8 & 0xFFFFFFFC;
    goto LABEL_16;
  }
LABEL_18:
  if (a1 == a3)
  {
    v145 = "&im1 != res";
    v146 = 196;
    v147 = "ImageUtils.hpp";
    v148 = "Filter2";
    goto LABEL_170;
  }
  v149 = 8 * v7 * (unint64_t)v6;
  v23 = *(_DWORD *)(a1 + 16);
  v24 = *(_DWORD *)(a1 + 20);
  v25 = 8 * v23 * (unint64_t)v24;
  v26 = *(double **)(a3 + 8);
  if (*(_QWORD *)(a3 + 32) < v25)
  {
    if (v26 && *(_BYTE *)(a3 + 24))
      MEMORY[0x20BD36480](*(_QWORD *)(a3 + 8), 0x1000C8000313F17);
    v26 = (double *)operator new[]();
    *(_QWORD *)(a3 + 8) = v26;
    *(_QWORD *)(a3 + 32) = v25;
    *(_BYTE *)(a3 + 24) = 1;
  }
  *(_DWORD *)(a3 + 16) = v23;
  *(_DWORD *)(a3 + 20) = v24;
  if ((v6 & 1) == 0)
  {
    v145 = "nCols2%2 == 1";
    v146 = 541;
LABEL_169:
    v147 = "VdspSpecialization.hpp";
    v148 = "vDSPImgfir";
LABEL_170:
    __assert_rtn(v148, v147, v146, v145);
  }
  if ((v7 & 1) == 0)
  {
    v145 = "nRows2%2 == 1";
    v146 = 542;
    goto LABEL_169;
  }
  v27 = *(_QWORD *)(a1 + 8);
  v28 = *(unsigned int *)(a1 + 20);
  v173 = *(_DWORD *)(a1 + 16);
  v29 = v6 - 1;
  v30 = (v6 - 1) >> 1;
  v31 = (v7 - 1) >> 1;
  v182 = v31;
  if (v7 - 1 >= 2)
  {
    v190 = 0;
    v107 = v28 - v30;
    v108 = v30 + v28;
    if (v30 <= 1)
      v109 = 1;
    else
      v109 = (v6 - 1) >> 1;
    v161 = 8 * (v109 - 1) + 8;
    v164 = 8 * v109;
    v156 = 8 * (v30 - 1) + 8;
    v158 = 8 * (v28 - (v29 | 1)) + 8;
    if (v31 <= 1)
      v110 = 1;
    else
      v110 = (v7 - 1) >> 1;
    v181 = v110;
    v111 = v6 * v31;
    v112 = v30 + v6 * v31;
    v153 = v29 & 0xFFFFFFFE;
    v150 = v28 - (v29 & 0xFFFFFFFE);
    v167 = v109;
    while (1)
    {
      if (v29 >= 2)
      {
        if (v31 - v190 >= v7)
        {
          v123 = v112;
          bzero(v26, v164);
          v112 = v123;
          v109 = v167;
          v108 = v30 + v28;
          v31 = (v7 - 1) >> 1;
          v29 = v6 - 1;
          v26 = (double *)((char *)v26 + v161);
        }
        else
        {
          v113 = 0;
          v114 = v112;
          v115 = (v6 - 1) >> 1;
          do
          {
            *v26 = 0.0;
            if (v30 - v113 < v6)
            {
              v116 = 0;
              v117 = 0.0;
              v118 = v114;
              v119 = v31 - v190;
              do
              {
                v120 = v118;
                v121 = v116;
                v122 = v115;
                do
                {
                  v117 = v117 + *(double *)(v9 + 8 * v120) * *(double *)(v27 + 8 * v121);
                  *v26 = v117;
                  ++v122;
                  ++v121;
                  ++v120;
                }
                while (v122 < v6);
                ++v119;
                v116 += v28;
                v118 += v6;
              }
              while (v119 < v7);
            }
            ++v113;
            ++v26;
            --v115;
            --v114;
          }
          while (v113 != v109);
        }
      }
      if (v30 >= v107)
        goto LABEL_151;
      if (v31 - v190 < v7)
        break;
      v172 = v112;
      bzero(v26, v158);
      v112 = v172;
      v109 = v167;
      v108 = v30 + v28;
      v31 = (v7 - 1) >> 1;
      v29 = v6 - 1;
      v26 = (double *)((char *)v26 + v158);
      if (v107 < v28)
      {
LABEL_152:
        if (v31 - v190 >= v7)
        {
          v171 = v112;
          bzero(v26, v156);
          v112 = v171;
          v109 = v167;
          v108 = v30 + v28;
          v31 = (v7 - 1) >> 1;
          v29 = v6 - 1;
          v26 = (double *)((char *)v26 + v156);
        }
        else
        {
          v133 = v150;
          v134 = v153;
          v135 = v28 - v30;
          do
          {
            v136 = v134;
            if (v134 <= 1uLL)
              v136 = 1;
            *v26 = 0.0;
            if (v135 != v108)
            {
              v137 = -v136;
              v138 = 0.0;
              v139 = v111;
              v140 = v133;
              v141 = v31 - v190;
              do
              {
                v142 = v139;
                v143 = v140;
                v144 = v137;
                do
                {
                  v138 = v138 + *(double *)(v9 + 8 * v142) * *(double *)(v27 + 8 * v143);
                  *v26 = v138;
                  ++v143;
                  ++v142;
                  v14 = __CFADD__(v144++, 1);
                }
                while (!v14);
                ++v141;
                v140 += v28;
                v139 += v6;
              }
              while (v141 < v7);
            }
            ++v135;
            ++v26;
            --v134;
            ++v133;
          }
          while (v135 != v28);
        }
      }
LABEL_131:
      v112 -= v6;
      v111 -= v6;
      if (++v190 == v181)
        goto LABEL_27;
    }
    v124 = 0;
    v125 = (v6 - 1) >> 1;
    do
    {
      *v26 = 0.0;
      v126 = 0.0;
      v127 = v111;
      v128 = v124;
      v129 = v31 - v190;
      do
      {
        v130 = v127;
        v131 = v128;
        v132 = v6;
        do
        {
          v126 = v126 + *(double *)(v9 + 8 * v130) * *(double *)(v27 + 8 * v131);
          *v26 = v126;
          ++v131;
          ++v130;
          --v132;
        }
        while (v132);
        ++v129;
        v128 += v28;
        v127 += v6;
      }
      while (v129 < v7);
      ++v125;
      ++v26;
      ++v124;
    }
    while (v125 != v107);
LABEL_151:
    if (v107 < v28)
      goto LABEL_152;
    goto LABEL_131;
  }
LABEL_27:
  result = v173 - v31;
  if (v31 < result)
  {
    v33 = 0;
    v34 = v28 - v30;
    if (v30 <= 1)
      v35 = 1;
    else
      v35 = (v6 - 1) >> 1;
    v151 = 8 * (v35 - 1) + 8;
    v154 = 8 * v35;
    v162 = 8 * (v30 - 1) + 8;
    v165 = 8 * (v28 - (v29 | 1)) + 8;
    v159 = v29 & 0xFFFFFFFE;
    v36 = v31;
    v186 = v173 - v31;
    v168 = v35;
    v169 = v28 - v30;
    do
    {
      if (v29 >= 2)
      {
        if (!v7)
        {
          v175 = v36;
          bzero(v26, v154);
          v36 = v175;
          v34 = v28 - v30;
          v29 = v6 - 1;
          result = v186;
          v31 = v182;
          v26 = (double *)((char *)v26 + v151);
          if (v30 < v169)
          {
LABEL_55:
            v176 = v36;
            bzero(v26, v165);
            v36 = v176;
            v29 = v6 - 1;
            result = v186;
            v31 = (v7 - 1) >> 1;
            v26 = (double *)((char *)v26 + v165);
            v35 = v168;
            v34 = v28 - v30;
          }
LABEL_56:
          if (v34 < v28)
          {
            if (v7)
            {
              v55 = v36 - v31;
              goto LABEL_59;
            }
            v174 = v36;
            bzero(v26, v162);
            v36 = v174;
            v34 = v28 - v30;
            v29 = v6 - 1;
            result = v186;
            v31 = v182;
            v26 = (double *)((char *)v26 + v162);
          }
          goto LABEL_33;
        }
        v46 = 0;
        v47 = (v6 - 1) >> 1;
        do
        {
          *v26 = 0.0;
          if (v30 - v46 < v6)
          {
            v48 = 0;
            v49 = 0.0;
            v50 = v47;
            v51 = v33;
            do
            {
              v52 = v50;
              v53 = v51;
              v54 = v47;
              do
              {
                v49 = v49 + *(double *)(v9 + 8 * v52) * *(double *)(v27 + 8 * v53);
                *v26 = v49;
                ++v54;
                ++v53;
                ++v52;
              }
              while (v54 < v6);
              ++v48;
              v51 += v28;
              v50 += v6;
            }
            while (v48 != v7);
          }
          ++v46;
          ++v26;
          --v47;
        }
        while (v46 != v35);
      }
      if (v30 >= v34)
        goto LABEL_56;
      if (!v7)
        goto LABEL_55;
      if ((_DWORD)v6)
      {
        v37 = v33;
        v38 = (v6 - 1) >> 1;
        do
        {
          v39 = 0;
          v40 = 0;
          *v26 = 0.0;
          v41 = 0.0;
          v42 = v37;
          do
          {
            v43 = v39;
            v44 = v42;
            v45 = v6;
            do
            {
              v41 = v41 + *(double *)(v9 + 8 * v43) * *(double *)(v27 + 8 * v44);
              *v26 = v41;
              ++v44;
              ++v43;
              --v45;
            }
            while (v45);
            ++v40;
            v42 += v28;
            v39 += v6;
          }
          while (v40 != v7);
          ++v38;
          ++v26;
          ++v37;
        }
        while (v38 != (_DWORD)v34);
        goto LABEL_56;
      }
      v177 = v36;
      bzero(v26, v165);
      v34 = v28 - v30;
      v26 = (double *)((char *)v26 + v165);
      if (v169 < v28)
      {
        v31 = (v7 - 1) >> 1;
        v29 = v6 - 1;
        v36 = v177;
        v55 = v177 - v182;
        result = v186;
        v35 = v168;
LABEL_59:
        v56 = -2 * v30 + v28 + v28 * v55;
        v57 = v159;
        v58 = v34;
        do
        {
          if (v57 <= 1uLL)
            v59 = 1;
          else
            v59 = v57;
          *v26 = 0.0;
          if (v58 != v30 + (_DWORD)v28)
          {
            v60 = 0;
            v61 = 0;
            v62 = -v59;
            v63 = 0.0;
            v64 = v56;
            do
            {
              v65 = v60;
              v66 = v64;
              v67 = v62;
              do
              {
                v63 = v63 + *(double *)(v9 + 8 * v65) * *(double *)(v27 + 8 * v66);
                *v26 = v63;
                ++v66;
                ++v65;
                v14 = __CFADD__(v67++, 1);
              }
              while (!v14);
              ++v61;
              v64 += v28;
              v60 += v6;
            }
            while (v61 != v7);
          }
          ++v58;
          ++v26;
          --v57;
          ++v56;
        }
        while (v58 != v28);
        goto LABEL_33;
      }
      v31 = (v7 - 1) >> 1;
      v29 = v6 - 1;
      result = v186;
      v35 = v168;
      v36 = v177;
LABEL_33:
      ++v36;
      v33 += v28;
    }
    while (v36 != (_DWORD)result);
  }
  if (result < v173)
  {
    v68 = v31 + v173;
    v69 = v28 - v30;
    v70 = v30 + v28;
    v71 = (v7 - 1) & 0xFFFFFFFE;
    if (v30 <= 1)
      v72 = 1;
    else
      v72 = (v6 - 1) >> 1;
    v163 = 8 * (v72 - 1) + 8;
    v166 = 8 * v72;
    v157 = v72;
    v160 = 8 * (v28 - (v29 | 1)) + 8;
    v155 = 8 * (v30 - 1) + 8;
    v73 = v28 * (v173 - v71);
    v152 = v29 & 0xFFFFFFFE;
    v74 = v28 + v73 - (v29 & 0xFFFFFFFE);
    v170 = v68;
    while (1)
    {
      v75 = v71;
      v14 = v71-- != 0;
      if (v71 != 0 && v14)
        v76 = v75;
      else
        v76 = 1;
      if (v29 >= 2)
      {
        if (v68 == (_DWORD)result)
        {
          v188 = result;
          v184 = v71;
          v179 = v74;
          bzero(v26, v166);
          v74 = v179;
          v71 = v184;
          v29 = v6 - 1;
          v70 = v30 + v28;
          v68 = v170;
          LODWORD(result) = v188;
          v26 = (double *)((char *)v26 + v163);
        }
        else
        {
          v98 = 0;
          v99 = (v6 - 1) >> 1;
          do
          {
            *v26 = 0.0;
            if (v30 - v98 < v6)
            {
              v100 = 0;
              v101 = 0.0;
              v102 = v99;
              v103 = v73;
              do
              {
                v104 = v102;
                v105 = v103;
                v106 = v99;
                do
                {
                  v101 = v101 + *(double *)(v9 + 8 * v104) * *(double *)(v27 + 8 * v105);
                  *v26 = v101;
                  ++v106;
                  ++v105;
                  ++v104;
                }
                while (v106 < v6);
                ++v100;
                v103 += v28;
                v102 += v6;
              }
              while (v100 != v76);
            }
            ++v98;
            ++v26;
            --v99;
          }
          while (v98 != v72);
        }
      }
      if (v30 >= v69)
        goto LABEL_96;
      if (v68 != (_DWORD)result && (_DWORD)v6)
        break;
      v189 = result;
      v185 = v71;
      v180 = v74;
      bzero(v26, v160);
      v74 = v180;
      v71 = v185;
      v29 = v6 - 1;
      v70 = v30 + v28;
      v68 = v170;
      LODWORD(result) = v189;
      v26 = (double *)((char *)v26 + v160);
      v72 = v157;
      if (v69 < v28)
      {
LABEL_97:
        if (v68 == (_DWORD)result)
        {
          v187 = result;
          v183 = v71;
          v178 = v74;
          bzero(v26, v155);
          v74 = v178;
          v71 = v183;
          v29 = v6 - 1;
          v70 = v30 + v28;
          v68 = v170;
          LODWORD(result) = v187;
          v26 = (double *)((char *)v26 + v155);
        }
        else
        {
          v86 = v74;
          v87 = v152;
          v88 = v28 - v30;
          do
          {
            if (v87 <= 1uLL)
              v89 = 1;
            else
              v89 = v87;
            *v26 = 0.0;
            if (v88 != v70)
            {
              v90 = 0;
              v91 = 0;
              v92 = -v89;
              v93 = 0.0;
              v94 = v86;
              do
              {
                v95 = v90;
                v96 = v94;
                v97 = v92;
                do
                {
                  v93 = v93 + *(double *)(v9 + 8 * v95) * *(double *)(v27 + 8 * v96);
                  *v26 = v93;
                  ++v96;
                  ++v95;
                  v14 = __CFADD__(v97++, 1);
                }
                while (!v14);
                ++v91;
                v94 += v28;
                v90 += v6;
              }
              while (v91 != v76);
            }
            ++v88;
            ++v26;
            --v87;
            ++v86;
          }
          while (v88 != v28);
        }
      }
LABEL_80:
      result = (result + 1);
      v73 += v28;
      v74 += v28;
      if ((_DWORD)result == v173)
        goto LABEL_120;
    }
    v77 = v73;
    v78 = (v6 - 1) >> 1;
    do
    {
      v79 = 0;
      v80 = 0;
      *v26 = 0.0;
      v81 = 0.0;
      v82 = v77;
      do
      {
        v83 = v79;
        v84 = v82;
        v85 = v6;
        do
        {
          v81 = v81 + *(double *)(v9 + 8 * v83) * *(double *)(v27 + 8 * v84);
          *v26 = v81;
          ++v84;
          ++v83;
          --v85;
        }
        while (v85);
        ++v80;
        v82 += v28;
        v79 += v6;
      }
      while (v80 != v76);
      ++v78;
      ++v26;
      ++v77;
    }
    while (v78 != v69);
LABEL_96:
    if (v69 < v28)
      goto LABEL_97;
    goto LABEL_80;
  }
LABEL_120:
  if (v9)
  {
    if (v149)
      JUMPOUT(0x20BD36480);
  }
  return result;
}

void sub_20B63F8A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  int v2;

  if (v1)
  {
    if (v2)
      MEMORY[0x20BD36480](v1, 0x1000C8000313F17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ImageUtils::Conv2<float>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  int32x4_t *v16;
  int8x16_t *v17;
  uint64_t v18;
  int8x16_t v19;
  int8x16_t v20;
  _DWORD *v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unint64_t v26;
  float *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t result;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  float v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unint64_t v46;
  int v47;
  unsigned int v48;
  int v49;
  float v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unint64_t v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  int v62;
  uint64_t v63;
  float v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  int v81;
  float v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unint64_t v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  int v92;
  uint64_t v93;
  float v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  int v99;
  unsigned int v100;
  int v101;
  float v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unint64_t v107;
  unsigned int v108;
  uint64_t v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  int v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  float v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  unint64_t v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  float v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  unint64_t v133;
  unsigned int v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  float v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  uint64_t v145;
  const char *v146;
  int v147;
  const char *v148;
  const char *v149;
  unint64_t v150;
  unsigned int v151;
  uint64_t v152;
  unsigned int v153;
  unsigned int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unsigned int v158;
  uint64_t v159;
  unsigned int v160;
  uint64_t v161;
  size_t v162;
  uint64_t v163;
  size_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int v172;
  unsigned int v173;
  unsigned int v174;
  unsigned int v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int v178;
  unsigned int v179;
  unsigned int v180;
  unsigned int v181;
  unsigned int v182;
  unsigned int v183;
  unsigned int v184;
  unsigned int v185;
  unsigned int v186;
  unsigned int v187;
  int v188;
  int v189;
  int v190;
  int v191;

  v7 = *(_DWORD *)(a2 + 16);
  v6 = *(unsigned int *)(a2 + 20);
  v8 = v7 * v6;
  if (4 * v7 * (unint64_t)v6)
  {
    v9 = operator new[]();
    if (!(_DWORD)v8)
      goto LABEL_18;
  }
  else
  {
    v9 = 0;
    if (!(_DWORD)v8)
      goto LABEL_18;
  }
  v10 = *(_QWORD *)(a2 + 8);
  v11 = (v8 - 1);
  v12 = (int *)(v10 + 4 * v11);
  if (v8 < 0xC || ((v13 = 4 * v11 + 4, v9 < v10 + v13) ? (v14 = v10 >= v9 + v13) : (v14 = 1), !v14))
  {
    LODWORD(v15) = 0;
    v21 = (_DWORD *)v9;
LABEL_16:
    v22 = v8 - v15;
    do
    {
      v23 = *v12--;
      *v21++ = v23;
      --v22;
    }
    while (v22);
    goto LABEL_18;
  }
  v15 = v8 & 0xFFFFFFF8;
  v16 = (int32x4_t *)(v10 + 4 * v11 - 12);
  v17 = (int8x16_t *)(v9 + 16);
  v18 = v15;
  do
  {
    v19 = (int8x16_t)vrev64q_s32(*v16);
    v20 = (int8x16_t)vrev64q_s32(v16[-1]);
    v17[-1] = vextq_s8(v19, v19, 8uLL);
    *v17 = vextq_s8(v20, v20, 8uLL);
    v16 -= 2;
    v17 += 2;
    v18 -= 8;
  }
  while (v18);
  if (v15 != v8)
  {
    v21 = (_DWORD *)(v9 + 4 * (v8 & 0xFFFFFFF8));
    v12 -= v8 & 0xFFFFFFF8;
    goto LABEL_16;
  }
LABEL_18:
  if (a1 == a3)
  {
    v146 = "&im1 != res";
    v147 = 196;
    v148 = "ImageUtils.hpp";
    v149 = "Filter2";
    goto LABEL_170;
  }
  v150 = 4 * v7 * (unint64_t)v6;
  v24 = *(_DWORD *)(a1 + 16);
  v25 = *(_DWORD *)(a1 + 20);
  v26 = 4 * v24 * (unint64_t)v25;
  v27 = *(float **)(a3 + 8);
  if (*(_QWORD *)(a3 + 32) < v26)
  {
    if (v27 && *(_BYTE *)(a3 + 24))
      MEMORY[0x20BD36480](*(_QWORD *)(a3 + 8), 0x1000C8052888210);
    v27 = (float *)operator new[]();
    *(_QWORD *)(a3 + 8) = v27;
    *(_QWORD *)(a3 + 32) = v26;
    *(_BYTE *)(a3 + 24) = 1;
  }
  *(_DWORD *)(a3 + 16) = v24;
  *(_DWORD *)(a3 + 20) = v25;
  if ((v6 & 1) == 0)
  {
    v146 = "nCols2%2 == 1";
    v147 = 541;
LABEL_169:
    v148 = "VdspSpecialization.hpp";
    v149 = "vDSPImgfir";
LABEL_170:
    __assert_rtn(v149, v148, v147, v146);
  }
  if ((v7 & 1) == 0)
  {
    v146 = "nRows2%2 == 1";
    v147 = 542;
    goto LABEL_169;
  }
  v28 = *(_QWORD *)(a1 + 8);
  v29 = *(unsigned int *)(a1 + 20);
  v174 = *(_DWORD *)(a1 + 16);
  v30 = v6 - 1;
  v31 = (v6 - 1) >> 1;
  v32 = (v7 - 1) >> 1;
  v183 = v32;
  if (v7 - 1 >= 2)
  {
    v191 = 0;
    v108 = v29 - v31;
    v109 = v31 + v29;
    if (v31 <= 1)
      v110 = 1;
    else
      v110 = (v6 - 1) >> 1;
    v162 = 4 * (v110 - 1) + 4;
    v165 = 4 * v110;
    v157 = 4 * (v31 - 1) + 4;
    v159 = 4 * (v29 - (v30 | 1)) + 4;
    if (v32 <= 1)
      v111 = 1;
    else
      v111 = (v7 - 1) >> 1;
    v182 = v111;
    v112 = v6 * v32;
    v113 = v31 + v6 * v32;
    v154 = v30 & 0xFFFFFFFE;
    v151 = v29 - (v30 & 0xFFFFFFFE);
    v168 = v110;
    while (1)
    {
      if (v30 >= 2)
      {
        if (v32 - v191 >= v7)
        {
          v124 = v113;
          bzero(v27, v165);
          v113 = v124;
          v110 = v168;
          v109 = v31 + v29;
          v32 = (v7 - 1) >> 1;
          v30 = v6 - 1;
          v27 = (float *)((char *)v27 + v162);
        }
        else
        {
          v114 = 0;
          v115 = v113;
          v116 = (v6 - 1) >> 1;
          do
          {
            *v27 = 0.0;
            if (v31 - v114 < v6)
            {
              v117 = 0;
              v118 = 0.0;
              v119 = v115;
              v120 = v32 - v191;
              do
              {
                v121 = v119;
                v122 = v117;
                v123 = v116;
                do
                {
                  v118 = v118 + (float)(*(float *)(v9 + 4 * v121) * *(float *)(v28 + 4 * v122));
                  *v27 = v118;
                  ++v123;
                  ++v122;
                  ++v121;
                }
                while (v123 < v6);
                ++v120;
                v117 += v29;
                v119 += v6;
              }
              while (v120 < v7);
            }
            ++v114;
            ++v27;
            --v116;
            --v115;
          }
          while (v114 != v110);
        }
      }
      if (v31 >= v108)
        goto LABEL_151;
      if (v32 - v191 < v7)
        break;
      v173 = v113;
      bzero(v27, v159);
      v113 = v173;
      v110 = v168;
      v109 = v31 + v29;
      v32 = (v7 - 1) >> 1;
      v30 = v6 - 1;
      v27 = (float *)((char *)v27 + v159);
      if (v108 < v29)
      {
LABEL_152:
        if (v32 - v191 >= v7)
        {
          v172 = v113;
          bzero(v27, v157);
          v113 = v172;
          v110 = v168;
          v109 = v31 + v29;
          v32 = (v7 - 1) >> 1;
          v30 = v6 - 1;
          v27 = (float *)((char *)v27 + v157);
        }
        else
        {
          v134 = v151;
          v135 = v154;
          v136 = v29 - v31;
          do
          {
            v137 = v135;
            if (v135 <= 1uLL)
              v137 = 1;
            *v27 = 0.0;
            if (v136 != v109)
            {
              v138 = -v137;
              v139 = 0.0;
              v140 = v112;
              v141 = v134;
              v142 = v32 - v191;
              do
              {
                v143 = v140;
                v144 = v141;
                v145 = v138;
                do
                {
                  v139 = v139 + (float)(*(float *)(v9 + 4 * v143) * *(float *)(v28 + 4 * v144));
                  *v27 = v139;
                  ++v144;
                  ++v143;
                  v14 = __CFADD__(v145++, 1);
                }
                while (!v14);
                ++v142;
                v141 += v29;
                v140 += v6;
              }
              while (v142 < v7);
            }
            ++v136;
            ++v27;
            --v135;
            ++v134;
          }
          while (v136 != v29);
        }
      }
LABEL_131:
      v113 -= v6;
      v112 -= v6;
      if (++v191 == v182)
        goto LABEL_27;
    }
    v125 = 0;
    v126 = (v6 - 1) >> 1;
    do
    {
      *v27 = 0.0;
      v127 = 0.0;
      v128 = v112;
      v129 = v125;
      v130 = v32 - v191;
      do
      {
        v131 = v128;
        v132 = v129;
        v133 = v6;
        do
        {
          v127 = v127 + (float)(*(float *)(v9 + 4 * v131) * *(float *)(v28 + 4 * v132));
          *v27 = v127;
          ++v132;
          ++v131;
          --v133;
        }
        while (v133);
        ++v130;
        v129 += v29;
        v128 += v6;
      }
      while (v130 < v7);
      ++v126;
      ++v27;
      ++v125;
    }
    while (v126 != v108);
LABEL_151:
    if (v108 < v29)
      goto LABEL_152;
    goto LABEL_131;
  }
LABEL_27:
  result = v174 - v32;
  if (v32 < result)
  {
    v34 = 0;
    v35 = v29 - v31;
    if (v31 <= 1)
      v36 = 1;
    else
      v36 = (v6 - 1) >> 1;
    v152 = 4 * (v36 - 1) + 4;
    v155 = 4 * v36;
    v163 = 4 * (v31 - 1) + 4;
    v166 = 4 * (v29 - (v30 | 1)) + 4;
    v160 = v30 & 0xFFFFFFFE;
    v37 = v32;
    v187 = v174 - v32;
    v169 = v36;
    v170 = v29 - v31;
    do
    {
      if (v30 >= 2)
      {
        if (!v7)
        {
          v176 = v37;
          bzero(v27, v155);
          v37 = v176;
          v35 = v29 - v31;
          v30 = v6 - 1;
          result = v187;
          v32 = v183;
          v27 = (float *)((char *)v27 + v152);
          if (v31 < v170)
          {
LABEL_55:
            v177 = v37;
            bzero(v27, v166);
            v37 = v177;
            v30 = v6 - 1;
            result = v187;
            v32 = (v7 - 1) >> 1;
            v27 = (float *)((char *)v27 + v166);
            v36 = v169;
            v35 = v29 - v31;
          }
LABEL_56:
          if (v35 < v29)
          {
            if (v7)
            {
              v56 = v37 - v32;
              goto LABEL_59;
            }
            v175 = v37;
            bzero(v27, v163);
            v37 = v175;
            v35 = v29 - v31;
            v30 = v6 - 1;
            result = v187;
            v32 = v183;
            v27 = (float *)((char *)v27 + v163);
          }
          goto LABEL_33;
        }
        v47 = 0;
        v48 = (v6 - 1) >> 1;
        do
        {
          *v27 = 0.0;
          if (v31 - v47 < v6)
          {
            v49 = 0;
            v50 = 0.0;
            v51 = v48;
            v52 = v34;
            do
            {
              v53 = v51;
              v54 = v52;
              v55 = v48;
              do
              {
                v50 = v50 + (float)(*(float *)(v9 + 4 * v53) * *(float *)(v28 + 4 * v54));
                *v27 = v50;
                ++v55;
                ++v54;
                ++v53;
              }
              while (v55 < v6);
              ++v49;
              v52 += v29;
              v51 += v6;
            }
            while (v49 != v7);
          }
          ++v47;
          ++v27;
          --v48;
        }
        while (v47 != v36);
      }
      if (v31 >= v35)
        goto LABEL_56;
      if (!v7)
        goto LABEL_55;
      if ((_DWORD)v6)
      {
        v38 = v34;
        v39 = (v6 - 1) >> 1;
        do
        {
          v40 = 0;
          v41 = 0;
          *v27 = 0.0;
          v42 = 0.0;
          v43 = v38;
          do
          {
            v44 = v40;
            v45 = v43;
            v46 = v6;
            do
            {
              v42 = v42 + (float)(*(float *)(v9 + 4 * v44) * *(float *)(v28 + 4 * v45));
              *v27 = v42;
              ++v45;
              ++v44;
              --v46;
            }
            while (v46);
            ++v41;
            v43 += v29;
            v40 += v6;
          }
          while (v41 != v7);
          ++v39;
          ++v27;
          ++v38;
        }
        while (v39 != (_DWORD)v35);
        goto LABEL_56;
      }
      v178 = v37;
      bzero(v27, v166);
      v35 = v29 - v31;
      v27 = (float *)((char *)v27 + v166);
      if (v170 < v29)
      {
        v32 = (v7 - 1) >> 1;
        v30 = v6 - 1;
        v37 = v178;
        v56 = v178 - v183;
        result = v187;
        v36 = v169;
LABEL_59:
        v57 = -2 * v31 + v29 + v29 * v56;
        v58 = v160;
        v59 = v35;
        do
        {
          if (v58 <= 1uLL)
            v60 = 1;
          else
            v60 = v58;
          *v27 = 0.0;
          if (v59 != v31 + (_DWORD)v29)
          {
            v61 = 0;
            v62 = 0;
            v63 = -v60;
            v64 = 0.0;
            v65 = v57;
            do
            {
              v66 = v61;
              v67 = v65;
              v68 = v63;
              do
              {
                v64 = v64 + (float)(*(float *)(v9 + 4 * v66) * *(float *)(v28 + 4 * v67));
                *v27 = v64;
                ++v67;
                ++v66;
                v14 = __CFADD__(v68++, 1);
              }
              while (!v14);
              ++v62;
              v65 += v29;
              v61 += v6;
            }
            while (v62 != v7);
          }
          ++v59;
          ++v27;
          --v58;
          ++v57;
        }
        while (v59 != v29);
        goto LABEL_33;
      }
      v32 = (v7 - 1) >> 1;
      v30 = v6 - 1;
      result = v187;
      v36 = v169;
      v37 = v178;
LABEL_33:
      ++v37;
      v34 += v29;
    }
    while (v37 != (_DWORD)result);
  }
  if (result < v174)
  {
    v69 = v32 + v174;
    v70 = v29 - v31;
    v71 = v31 + v29;
    v72 = (v7 - 1) & 0xFFFFFFFE;
    if (v31 <= 1)
      v73 = 1;
    else
      v73 = (v6 - 1) >> 1;
    v164 = 4 * (v73 - 1) + 4;
    v167 = 4 * v73;
    v158 = v73;
    v161 = 4 * (v29 - (v30 | 1)) + 4;
    v156 = 4 * (v31 - 1) + 4;
    v74 = v29 * (v174 - v72);
    v153 = v30 & 0xFFFFFFFE;
    v75 = v29 + v74 - (v30 & 0xFFFFFFFE);
    v171 = v69;
    while (1)
    {
      v76 = v72;
      v14 = v72-- != 0;
      if (v72 != 0 && v14)
        v77 = v76;
      else
        v77 = 1;
      if (v30 >= 2)
      {
        if (v69 == (_DWORD)result)
        {
          v189 = result;
          v185 = v72;
          v180 = v75;
          bzero(v27, v167);
          v75 = v180;
          v72 = v185;
          v30 = v6 - 1;
          v71 = v31 + v29;
          v69 = v171;
          LODWORD(result) = v189;
          v27 = (float *)((char *)v27 + v164);
        }
        else
        {
          v99 = 0;
          v100 = (v6 - 1) >> 1;
          do
          {
            *v27 = 0.0;
            if (v31 - v99 < v6)
            {
              v101 = 0;
              v102 = 0.0;
              v103 = v100;
              v104 = v74;
              do
              {
                v105 = v103;
                v106 = v104;
                v107 = v100;
                do
                {
                  v102 = v102 + (float)(*(float *)(v9 + 4 * v105) * *(float *)(v28 + 4 * v106));
                  *v27 = v102;
                  ++v107;
                  ++v106;
                  ++v105;
                }
                while (v107 < v6);
                ++v101;
                v104 += v29;
                v103 += v6;
              }
              while (v101 != v77);
            }
            ++v99;
            ++v27;
            --v100;
          }
          while (v99 != v73);
        }
      }
      if (v31 >= v70)
        goto LABEL_96;
      if (v69 != (_DWORD)result && (_DWORD)v6)
        break;
      v190 = result;
      v186 = v72;
      v181 = v75;
      bzero(v27, v161);
      v75 = v181;
      v72 = v186;
      v30 = v6 - 1;
      v71 = v31 + v29;
      v69 = v171;
      LODWORD(result) = v190;
      v27 = (float *)((char *)v27 + v161);
      v73 = v158;
      if (v70 < v29)
      {
LABEL_97:
        if (v69 == (_DWORD)result)
        {
          v188 = result;
          v184 = v72;
          v179 = v75;
          bzero(v27, v156);
          v75 = v179;
          v72 = v184;
          v30 = v6 - 1;
          v71 = v31 + v29;
          v69 = v171;
          LODWORD(result) = v188;
          v27 = (float *)((char *)v27 + v156);
        }
        else
        {
          v87 = v75;
          v88 = v153;
          v89 = v29 - v31;
          do
          {
            if (v88 <= 1uLL)
              v90 = 1;
            else
              v90 = v88;
            *v27 = 0.0;
            if (v89 != v71)
            {
              v91 = 0;
              v92 = 0;
              v93 = -v90;
              v94 = 0.0;
              v95 = v87;
              do
              {
                v96 = v91;
                v97 = v95;
                v98 = v93;
                do
                {
                  v94 = v94 + (float)(*(float *)(v9 + 4 * v96) * *(float *)(v28 + 4 * v97));
                  *v27 = v94;
                  ++v97;
                  ++v96;
                  v14 = __CFADD__(v98++, 1);
                }
                while (!v14);
                ++v92;
                v95 += v29;
                v91 += v6;
              }
              while (v92 != v77);
            }
            ++v89;
            ++v27;
            --v88;
            ++v87;
          }
          while (v89 != v29);
        }
      }
LABEL_80:
      result = (result + 1);
      v74 += v29;
      v75 += v29;
      if ((_DWORD)result == v174)
        goto LABEL_120;
    }
    v78 = v74;
    v79 = (v6 - 1) >> 1;
    do
    {
      v80 = 0;
      v81 = 0;
      *v27 = 0.0;
      v82 = 0.0;
      v83 = v78;
      do
      {
        v84 = v80;
        v85 = v83;
        v86 = v6;
        do
        {
          v82 = v82 + (float)(*(float *)(v9 + 4 * v84) * *(float *)(v28 + 4 * v85));
          *v27 = v82;
          ++v85;
          ++v84;
          --v86;
        }
        while (v86);
        ++v81;
        v83 += v29;
        v80 += v6;
      }
      while (v81 != v77);
      ++v79;
      ++v27;
      ++v78;
    }
    while (v79 != v70);
LABEL_96:
    if (v70 < v29)
      goto LABEL_97;
    goto LABEL_80;
  }
LABEL_120:
  if (v9)
  {
    if (v150)
      JUMPOUT(0x20BD36480);
  }
  return result;
}

void sub_20B640478(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  int v2;

  if (v1)
  {
    if (v2)
      MEMORY[0x20BD36480](v1, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

uint64_t svd_os(uint64_t a1, double *a2, double *a3, double *a4, double *a5, int8x16_t a6, int8x16_t a7, float64x2_t a8, float64x2_t a9, float64x2_t a10, float64x2_t a11, __n128 a12, float64x2_t a13)
{
  uint64_t result;
  uint64_t v16;
  float64x2_t v17;
  uint64_t v18;
  uint64_t v19;
  double *v20;
  double *v21;
  float64x2_t v22;
  int8x16_t v23;
  uint64_t v24;
  unint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double *v30;
  uint64_t v31;
  unint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  double *v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  double *v46;
  double *v47;
  unint64_t v48;
  double v49;
  uint64_t v50;
  unint64_t v51;
  float64x2_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  __n128 *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  float64x2_t *v60;
  unint64_t v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  double *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  double *v70;
  double *v71;
  double *v72;
  double *v73;
  double *v74;
  double *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  double *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  double *v89;
  unint64_t v90;
  unint64_t v91;
  double *v92;
  float64x2_t *v93;
  float64x2_t *v95;
  float64x2_t *v96;
  unint64_t v97;
  double v98;
  unint64_t v99;
  double v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  __n128 *v104;
  uint64_t v105;
  unint64_t v106;
  __n128 *v107;
  uint64_t v108;
  uint64_t v109;
  double *v110;
  double *v111;
  double v112;
  double *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  unint64_t v121;
  char *v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  double *v127;
  double *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  double *v136;
  unint64_t v137;
  uint64_t v138;
  double v139;
  double v140;
  double v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  double *v151;
  unint64_t v152;
  double *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  double *v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  double *v166;
  uint64_t v167;
  char *v168;
  double *v169;
  double *v170;
  char *v171;
  uint64_t v173;
  uint64_t v174;
  double v175[55];

  v175[53] = *(double *)MEMORY[0x24BDAC8D0];
  if ((unint64_t)(a1 - 10) < 0xFFFFFFFFFFFFFFF7)
    return 4294967197;
  v16 = a1 - 1;
  if (a1 == 1)
  {
    a6.i64[0] = *(uint64_t *)a2;
    a7.i64[0] = 1.0;
    v17.f64[0] = NAN;
    v17.f64[1] = NAN;
    *(_QWORD *)a3 = vbslq_s8((int8x16_t)vnegq_f64(v17), a7, a6).u64[0];
    *a4 = fabs(*a2);
    *a5 = 1.0;
    if ((*(_QWORD *)a2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      return 0;
    else
      return 0xFFFFFFFFLL;
  }
  result = 0;
  v162 = a1 - 2;
  v163 = v16;
  v18 = 8 * a1;
  v19 = 8 * a1 + 8;
  v20 = a2 + 3;
  v169 = &a2[a1 + 3];
  v21 = a2 + 1;
  v22.f64[0] = NAN;
  v22.f64[1] = NAN;
  v23 = (int8x16_t)vnegq_f64(v22);
  v160 = &a2[a1];
  v166 = v160;
  v24 = v16;
  v25 = (unint64_t *)a2;
  v26 = a1;
  v151 = &v175[v16];
  while (1)
  {
    v27 = v16 - result;
    v28 = a1 - result;
    if (a1 - result < 2)
      goto LABEL_13;
    a8.f64[0] = 0.0;
    v29 = 1;
    do
    {
      *(_QWORD *)&a9.f64[0] = v25[v29];
      a8.f64[0] = a8.f64[0] + a9.f64[0] * a9.f64[0];
      ++v29;
    }
    while (v26 != v29);
    if (a8.f64[0] == 0.0)
    {
LABEL_13:
      *(_QWORD *)&a8.f64[0] = *v25;
      *v25 = 0;
      goto LABEL_14;
    }
    a8.f64[0] = sqrt(a8.f64[0] + *(double *)v25 * *(double *)v25);
    a10.f64[0] = -*(double *)v25;
    a8 = (float64x2_t)vbslq_s8(v23, (int8x16_t)a8, (int8x16_t)a10);
    a9.f64[0] = 1.0 / (*(double *)v25 - a8.f64[0]);
    *(double *)v25 = (a8.f64[0] - *(double *)v25) / a8.f64[0];
    if (v27 < 4)
    {
      v43 = 1;
      goto LABEL_60;
    }
    v59 = v27 & 0xFFFFFFFFFFFFFFFCLL;
    v60 = (float64x2_t *)v20;
    v61 = v24 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      a10 = vmulq_n_f64(v60[-1], a9.f64[0]);
      a11 = vmulq_n_f64(*v60, a9.f64[0]);
      v60[-1] = a10;
      *v60 = a11;
      v60 += 2;
      v61 -= 4;
    }
    while (v61);
    if (v27 != v59)
    {
      v43 = v59 | 1;
      do
      {
LABEL_60:
        a10.f64[0] = a9.f64[0] * *(double *)&v25[v43];
        v25[v43++] = *(_QWORD *)&a10.f64[0];
      }
      while (v26 != v43);
    }
LABEL_14:
    a4[result] = a8.f64[0];
    if ((*(_QWORD *)&a8.f64[0] & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      return -(int)result;
    v30 = v21;
    v31 = v28 - 1;
    v32 = &v25[a1];
    if (v28 >= 2)
    {
      *(_QWORD *)&a8.f64[0] = *v25;
      if (*(double *)v25 != 0.0)
      {
        v44 = 0;
        v45 = v27 & 0xFFFFFFFFFFFFFFFCLL;
        v47 = v166;
        v46 = v169;
        while (v27 >= 4)
        {
          v50 = 0;
          v51 = v24 & 0xFFFFFFFFFFFFFFFCLL;
          v49 = *(double *)&v32[v44 * a1];
          do
          {
            a13 = *(float64x2_t *)&v46[v50];
            a10 = vmulq_f64(*(float64x2_t *)&v20[v50 - 2], *(float64x2_t *)&v46[v50 - 2]);
            a12.n128_u64[0] = *(_QWORD *)&a10.f64[1];
            v52 = vmulq_f64(*(float64x2_t *)&v20[v50], a13);
            a13.f64[0] = v52.f64[1];
            v49 = v49 + a10.f64[0] + a10.f64[1] + v52.f64[0] + v52.f64[1];
            v50 += 4;
            v51 -= 4;
          }
          while (v51);
          v48 = v27 & 0xFFFFFFFFFFFFFFFCLL | 1;
          if (v27 != v45)
            goto LABEL_42;
LABEL_43:
          a11.f64[0] = v49 * *(double *)v25;
          *(double *)&v32[v44 * a1] = *(double *)&v32[v44 * a1] - a11.f64[0];
          a8.f64[0] = -a11.f64[0];
          if (v27 > 3
            && ((char *)a2 + v19 + v19 * result + v18 * v44 >= (char *)v160 + v18 * result
             || (char *)a2 + v19 * result + 8 >= (char *)&a2[2 * a1] + v18 * result + v18 * v44))
          {
            v54 = 0;
            a9 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a8.f64[0], 0);
            v55 = v24 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              a10 = *(float64x2_t *)&v20[v54 - 2];
              a11 = *(float64x2_t *)&v20[v54];
              v56 = (__n128 *)&v46[v54];
              a12 = (__n128)vmlaq_f64(*(float64x2_t *)&v46[v54 - 2], a10, a9);
              a13 = vmlaq_f64(*(float64x2_t *)&v46[v54], a11, a9);
              v56[-1] = a12;
              *v56 = (__n128)a13;
              v54 += 4;
              v55 -= 4;
            }
            while (v55);
            v53 = v27 & 0xFFFFFFFFFFFFFFFCLL | 1;
            if (v27 == v45)
              goto LABEL_36;
          }
          else
          {
            v53 = 1;
          }
          do
          {
            a10.f64[0] = v47[v53];
            a9.f64[0] = a10.f64[0] + a8.f64[0] * *(double *)&v25[v53];
            v47[v53++] = a9.f64[0];
          }
          while (v26 != v53);
LABEL_36:
          ++v44;
          v46 = (double *)((char *)v46 + v18);
          v47 = (double *)((char *)v47 + v18);
          if (v44 == v31)
            goto LABEL_17;
        }
        v48 = 1;
        v49 = *(double *)&v32[v44 * a1];
        do
        {
LABEL_42:
          v49 = v49 + *(double *)&v25[v48] * v47[v48];
          ++v48;
        }
        while (v26 != v48);
        goto LABEL_43;
      }
    }
LABEL_17:
    if (result == v162)
      break;
    v16 = v163;
    if (v28 < 3)
      goto LABEL_22;
    a8.f64[0] = 0.0;
    v33 = 16 * a1;
    v34 = 2;
    do
    {
      *(_QWORD *)&a9.f64[0] = *(unint64_t *)((char *)v25 + v33);
      a8.f64[0] = a8.f64[0] + a9.f64[0] * a9.f64[0];
      ++v34;
      v33 += v18;
    }
    while (v26 != v34);
    if (a8.f64[0] == 0.0)
    {
LABEL_22:
      *(_QWORD *)&a8.f64[0] = *v32;
      *v32 = 0;
    }
    else
    {
      a8.f64[0] = sqrt(a8.f64[0] + *(double *)v32 * *(double *)v32);
      a10.f64[0] = -*(double *)v32;
      a8 = (float64x2_t)vbslq_s8(v23, (int8x16_t)a8, (int8x16_t)a10);
      a9.f64[0] = 1.0 / (*(double *)v32 - a8.f64[0]);
      *(double *)v32 = (a8.f64[0] - *(double *)v32) / a8.f64[0];
      v57 = 16 * a1;
      v58 = 2;
      do
      {
        a10.f64[0] = a9.f64[0] * *(double *)((char *)v25 + v57);
        *(unint64_t *)((char *)v25 + v57) = *(_QWORD *)&a10.f64[0];
        ++v58;
        v57 += v18;
      }
      while (v26 != v58);
    }
    v175[result] = a8.f64[0];
    if ((*(_QWORD *)&a8.f64[0] & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      return result;
    v35 = (char *)v25 + v19;
    if (v28 >= 3 && *(double *)v32 != 0.0)
    {
      v36 = 0;
      v37 = v30;
      do
      {
        v38 = 16 * a1;
        v39 = 2;
        v40 = *(double *)&v35[8 * v36];
        do
        {
          v40 = v40 + *(double *)((char *)v25 + v38) * *(double *)((char *)v37 + v38);
          ++v39;
          v38 += v18;
        }
        while (v26 != v39);
        a11.f64[0] = v40 * *(double *)v32;
        *(double *)&v35[8 * v36] = *(double *)&v35[8 * v36] - a11.f64[0];
        v41 = 16 * a1;
        v42 = 2;
        do
        {
          a10.f64[0] = *(double *)((char *)v37 + v41);
          a9.f64[0] = a10.f64[0] + -a11.f64[0] * *(double *)((char *)v25 + v41);
          *(double *)((char *)v37 + v41) = a9.f64[0];
          ++v42;
          v41 += v18;
        }
        while (v26 != v42);
        ++v36;
        ++v37;
      }
      while (v36 != v31);
    }
    ++result;
    --v26;
    --v24;
    v20 = (double *)((char *)v20 + v19);
    v169 = (double *)((char *)v169 + v19);
    v166 = (double *)((char *)v166 + v19);
    v21 = (double *)((char *)v30 + v19);
    v25 = (unint64_t *)((char *)v25 + v19);
  }
  v62 = *(double *)v32;
  a7.i64[0] = v32[1];
  v63 = v163;
  *(_QWORD *)&v175[v162] = *v32;
  a4[v163] = *(double *)a7.i64;
  v64 = v63 + v63 * a1;
  v65 = a3;
  a3[v64] = 1.0;
  if (a1 < 2)
  {
    v113 = a5;
    a5[v64] = 1.0;
    *a5 = 1.0;
    goto LABEL_132;
  }
  v66 = 0;
  v67 = v163 * a1;
  v68 = -8 - v18;
  v69 = a1 * a1;
  v156 = v69 * 8 - 8;
  v155 = -8 * a1;
  v70 = &a3[v69];
  v71 = v70 - 2;
  v72 = &a2[v67 + 1];
  v73 = v70 + 1;
  v74 = &a2[v67 - 2];
  v157 = v67 * 8 - 8;
  v158 = -8 - v18;
  v75 = &a3[v67 - 1];
  v76 = a1 * v162;
  v77 = 1;
  v154 = &a2[v67];
  v62 = 1.0;
  v78 = a1 - 2;
  v79 = v163;
  do
  {
    v80 = v79;
    v79 = v78;
    v81 = v71;
    v82 = v77;
    if (v80 < a1)
    {
      do
      {
        *v81 = 0.0;
        v81 = (double *)((char *)v81 + v18);
        --v82;
      }
      while (v82);
    }
    v83 = v77 & 0xFFFFFFFFFFFFFFFCLL;
    v84 = v66 + 1;
    v85 = v79 + v79 * a1;
    *(double *)a7.i64 = a2[v85];
    if (a1 - v79 >= 2 && *(double *)a7.i64 != 0.0)
    {
      v167 = v76;
      v86 = 0;
      v87 = v156 + v68 * v66;
      v88 = (char *)a2 + v157 + v68 * v66;
      v159 = v80;
      v89 = &v65[v79 + v80 * a1];
      v90 = v84 & 0xFFFFFFFFFFFFFFFCLL;
      v91 = v66 + 2;
      v92 = v71;
      v170 = v73;
      v93 = (float64x2_t *)v73;
      while (1)
      {
        v95 = v93;
        v96 = (float64x2_t *)v72;
        v97 = v77 & 0xFFFFFFFFFFFFFFFCLL;
        v98 = v89[v86 * a1];
        if (v66 < 3)
          break;
        do
        {
          a9 = vmulq_f64(v96[-1], v95[-1]);
          a11.f64[0] = a9.f64[1];
          a10 = vmulq_f64(*v96, *v95);
          a12.n128_u64[0] = *(_QWORD *)&a10.f64[1];
          v98 = v98 + a9.f64[0] + a9.f64[1] + a10.f64[0] + a10.f64[1];
          v96 += 2;
          v95 += 2;
          v97 -= 4;
        }
        while (v97);
        v99 = v84 & 0xFFFFFFFFFFFFFFFCLL | 1;
        if (v84 != v90)
          goto LABEL_76;
LABEL_77:
        a10.f64[0] = v98 * a2[v85];
        v89[v86 * a1] = v89[v86 * a1] - a10.f64[0];
        v100 = -a10.f64[0];
        if (v66 > 2
          && ((char *)a3 + v87 + v18 * v86 >= (char *)v154 + v155 * v66
           || v88 >= (char *)&a3[a1 * a1] + v155 * v66 + v18 * v86))
        {
          v102 = 0;
          a8 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v100, 0);
          v103 = v77 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            a9 = *(float64x2_t *)&v72[v102 / 8 - 2];
            a10 = *(float64x2_t *)&v72[v102 / 8];
            v104 = (__n128 *)&v93[v102 / 0x10];
            a11 = vmlaq_f64(v93[v102 / 0x10 - 1], a9, a8);
            a12 = (__n128)vmlaq_f64(v93[v102 / 0x10], a10, a8);
            v104[-1] = (__n128)a11;
            *v104 = a12;
            v102 += 32;
            v103 -= 4;
          }
          while (v103);
          v101 = v84 & 0xFFFFFFFFFFFFFFFCLL | 1;
          if (v84 == v90)
            goto LABEL_71;
        }
        else
        {
          v101 = 1;
        }
        do
        {
          a9.f64[0] = v92[v101];
          v92[v101] = a9.f64[0] + v100 * v74[v101];
          ++v101;
        }
        while (v91 != v101);
LABEL_71:
        v93 = (float64x2_t *)((char *)v93 + v18);
        v92 = (double *)((char *)v92 + v18);
        if (v86++ == a1 - v79 - 2)
        {
          *(double *)a7.i64 = a2[v85];
          v73 = v170;
          v65 = a3;
          v63 = v163;
          v68 = -8 - v18;
          v80 = v159;
          v76 = v167;
          goto LABEL_88;
        }
      }
      v99 = 1;
      v98 = v89[v86 * a1];
      do
      {
LABEL_76:
        v98 = v98 + v74[v99] * v92[v99];
        ++v99;
      }
      while (v91 != v99);
      goto LABEL_77;
    }
LABEL_88:
    a8.f64[0] = 1.0 - *(double *)a7.i64;
    v65[v85] = 1.0 - *(double *)a7.i64;
    if (v80 < a1)
    {
      *(double *)a7.i64 = -*(double *)a7.i64;
      if (v66 < 3 || (unint64_t)((char *)a3 - (char *)a2) <= 0x1F)
        goto LABEL_95;
      v105 = 0;
      v106 = v84 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        a8 = vmulq_n_f64(*(float64x2_t *)&v72[v105 - 2], *(double *)a7.i64);
        a9 = vmulq_n_f64(*(float64x2_t *)&v72[v105], *(double *)a7.i64);
        v107 = (__n128 *)&v75[v105];
        *v107 = (__n128)a8;
        v107[1] = (__n128)a9;
        v105 += 4;
        v83 -= 4;
      }
      while (v83);
      if (v84 != v106)
      {
        v80 += v106;
LABEL_95:
        v108 = a1 - v80;
        v109 = v80 + v76;
        v110 = &v65[v109];
        v111 = &a2[v109];
        do
        {
          v112 = *v111++;
          a8.f64[0] = v112 * *(double *)a7.i64;
          *v110++ = v112 * *(double *)a7.i64;
          --v108;
        }
        while (v108);
      }
    }
    v78 = v79 - 1;
    ++v77;
    v71 = (double *)((char *)v71 + v68);
    v72 = (double *)((char *)v72 + v68);
    v73 = (double *)((char *)v73 + v68);
    v74 = (double *)((char *)v74 + v68);
    v75 = (double *)((char *)v75 + v68);
    v76 -= a1;
    ++v66;
  }
  while (v84 != v63);
  v113 = a5;
  a5[v163 + v163 * a1] = 1.0;
  v114 = a1 - 2;
  if (a1 >= 3)
  {
    v115 = 0;
    v116 = 2 * a1;
    v117 = 3 * a1;
    v118 = 4 * a1;
    v119 = 5 * a1;
    v120 = (char *)a5 + a1 * (v18 + 48) - 16;
    v121 = v18 ^ 0xFFFFFFFFFFFFFFF8;
    v122 = (char *)a5 + a1 * (v18 + 40) - 16;
    v123 = (char *)a5 + a1 * (v18 + 32) - 16;
    v124 = (char *)a5 + a1 * (v18 + 24) - 16;
    v125 = (char *)a5 + a1 * (v18 + 16) - 16;
    v126 = (char *)a5 + a1 * (v18 + 8) - 16;
    v127 = &a5[a1 * a1 - 2];
    v128 = &a5[a1 * v63 - 2];
    v129 = 16;
    v130 = a1 - 2;
    v152 = v121;
    do
    {
      v131 = v63;
      v63 = v130;
      if (v131 < a1)
      {
        v168 = v122;
        v171 = v120;
        v132 = v130;
        v164 = v123;
        v133 = v115;
        v161 = v124;
        v134 = v119;
        bzero((char *)v113 + v157 + v68 * v115, 8 * v115 + 8);
        v121 = v152;
        v113 = a5;
        v119 = v134;
        v124 = v161;
        v118 = 4 * a1;
        v116 = 2 * a1;
        v117 = 3 * a1;
        v115 = v133;
        v114 = a1 - 2;
        v123 = v164;
        v68 = v158;
        v63 = v132;
        v122 = v168;
        v120 = v171;
        v65 = a3;
      }
      v135 = v131 - 2;
      v136 = &a2[v63 * a1 - 2 + v131];
      v62 = *v136;
      if (*v136 != 0.0)
      {
        v137 = 0;
        v138 = a1 - v63;
        do
        {
          v139 = v128[v137 / 8];
          v140 = v139 + v136[a1] * v127[v137 / 8];
          if (v138 != 2)
          {
            v140 = v140 + v136[v116] * *(double *)&v126[v137];
            if (v138 != 3)
            {
              v140 = v140 + v136[v117] * *(double *)&v125[v137];
              if (v138 != 4)
              {
                v140 = v140 + v136[v118] * *(double *)&v124[v137];
                if (v138 != 5)
                {
                  v140 = v140 + v136[v119] * *(double *)&v123[v137];
                  if (v138 != 6)
                  {
                    v140 = v140 + v136[6 * a1] * *(double *)&v122[v137];
                    if (v138 != 7)
                      v140 = v140 + v136[7 * a1] * *(double *)&v120[v137];
                  }
                }
              }
            }
          }
          a8.f64[0] = *v136;
          a9.f64[0] = v140 * *v136;
          v128[v137 / 8] = v139 - a9.f64[0];
          a10.f64[0] = v127[v137 / 8];
          v127[v137 / 8] = a10.f64[0] - a9.f64[0] * v136[a1];
          if (v138 != 2)
          {
            v141 = -(v140 * a8.f64[0]);
            a8.f64[0] = *(float64_t *)&v126[v137];
            *(double *)&v126[v137] = a8.f64[0] + v141 * v136[v116];
            if (v138 != 3)
            {
              a8.f64[0] = *(float64_t *)&v125[v137];
              *(double *)&v125[v137] = a8.f64[0] + v141 * v136[v117];
              if (v138 != 4)
              {
                a8.f64[0] = *(float64_t *)&v124[v137];
                *(double *)&v124[v137] = a8.f64[0] + v141 * v136[v118];
                if (v138 != 5)
                {
                  a8.f64[0] = *(float64_t *)&v123[v137];
                  *(double *)&v123[v137] = a8.f64[0] + v141 * v136[v119];
                  if (v138 != 6)
                  {
                    a8.f64[0] = *(float64_t *)&v122[v137];
                    *(double *)&v122[v137] = a8.f64[0] + v141 * v136[6 * a1];
                    if (v138 != 7)
                    {
                      a8.f64[0] = *(float64_t *)&v120[v137];
                      *(double *)&v120[v137] = a8.f64[0] + v141 * v136[7 * a1];
                    }
                  }
                }
              }
            }
          }
          v137 += 8;
        }
        while (v129 != v137);
        v62 = *v136;
      }
      *(double *)a7.i64 = 1.0 - v62;
      v113[v63 * a1 + v63] = 1.0 - v62;
      if (v131 < a1)
      {
        *(double *)a7.i64 = -(v62 * a2[v131 * a1 + v135]);
        v113[v131 * a1 + v63] = *(double *)a7.i64;
        if (v131 + 1 != a1)
        {
          v62 = -v62;
          v142 = (v131 + 1) * a1;
          *(double *)a7.i64 = a2[v142 + v135] * v62;
          v113[v142 + v63] = *(double *)a7.i64;
          if (v131 + 2 != a1)
          {
            v143 = (v131 + 2) * a1;
            *(double *)a7.i64 = a2[v143 + v135] * v62;
            v113[v143 + v63] = *(double *)a7.i64;
            if (v131 + 3 != a1)
            {
              v144 = (v131 + 3) * a1;
              *(double *)a7.i64 = a2[v144 + v135] * v62;
              v113[v144 + v63] = *(double *)a7.i64;
              if (v131 + 4 != a1)
              {
                v145 = (v131 + 4) * a1;
                *(double *)a7.i64 = a2[v145 + v135] * v62;
                v113[v145 + v63] = *(double *)a7.i64;
                if (v131 + 5 != a1)
                {
                  v146 = (v131 + 5) * a1;
                  *(double *)a7.i64 = a2[v146 + v135] * v62;
                  v113[v146 + v63] = *(double *)a7.i64;
                  if (v131 + 6 != a1)
                  {
                    v147 = (v131 + 6) * a1;
                    *(double *)a7.i64 = a2[v147 + v135];
                    v62 = *(double *)a7.i64 * v62;
                    v113[v147 + v63] = v62;
                  }
                }
              }
            }
          }
        }
      }
      v130 = v63 - 1;
      ++v115;
      v129 += 8;
      v120 += v121;
      v122 += v121;
      v123 += v121;
      v124 += v121;
      v125 += v121;
      v126 += v121;
      v127 = (double *)((char *)v127 + v121);
      v128 = (double *)((char *)v128 + v121);
    }
    while (v115 != v114);
  }
  *v113 = 1.0;
  v148 = 1;
  v149 = a1;
  do
  {
    v113[v149] = 0.0;
    v113[v148++] = 0.0;
    v149 += a1;
  }
  while (a1 != v148);
LABEL_132:
  v173 = a1;
  v174 = 0;
  v150 = dbdsqr_(&v173, &v173, (unint64_t *)&v173, a4, v175, v113, &v173, v65, v62, a7, (__n128)a8, a9, (int8x16_t)a10, a11.f64[0], a12.n128_f64[0], (int8x16_t)a13, &v173, v151, &v174);
  return (v150 | v174) != 0;
}

uint64_t dbdsqr_(uint64_t *a1, uint64_t *a2, unint64_t *a3, double *a4, double *a5, double *a6, uint64_t *a7, double *a8, double a9, int8x16_t a10, __n128 a11, float64x2_t a12, int8x16_t a13, double a14, double a15, int8x16_t a16, uint64_t *a17, double *a18, uint64_t *a19)
{
  int8x16_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v29;
  uint64_t *v30;
  double *v31;
  double v32;
  BOOL v33;
  uint64_t v34;
  double *v35;
  double *v36;
  double v37;
  double v38;
  double v39;
  double v40;
  BOOL v41;
  double v42;
  uint64_t v43;
  double v44;
  double *v45;
  uint64_t v46;
  double *v47;
  double v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v52;
  unint64_t v53;
  float64x2_t *v54;
  unint64_t v55;
  float64x2_t v56;
  uint64_t v57;
  uint64_t v58;
  double *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  double *v65;
  double *v66;
  char *v67;
  double *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  double *v82;
  unint64_t v83;
  double *v84;
  double *v85;
  unint64_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  double *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  unint64_t v100;
  __int128 *v101;
  __int128 *v102;
  unint64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  double *v109;
  double *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  double *v114;
  double *v115;
  double *v116;
  double *v117;
  double *v118;
  double *v119;
  uint64_t v120;
  float64x2_t v121;
  float64x2_t v122;
  double v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  double v128;
  uint64_t v129;
  double *v130;
  uint64_t v131;
  double *v132;
  uint64_t v133;
  int64_t v134;
  double v135;
  int64_t v136;
  double *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  double *v141;
  unint64_t *v142;
  double v143;
  double v144;
  uint64_t v145;
  int8x16_t v146;
  unint64_t v147;
  float64x2_t *v148;
  float64x2_t *v149;
  BOOL v150;
  unint64_t v151;
  unint64_t v152;
  float64x2_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t *v156;
  double *v157;
  double v158;
  int v159;
  int64_t v160;
  uint64_t v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  uint64_t v169;
  double v170;
  uint64_t v171;
  double v172;
  double *v173;
  double *v174;
  uint64_t v175;
  double *v176;
  double v177;
  _BOOL4 v178;
  _BOOL4 v179;
  double v180;
  double v181;
  double v182;
  double v183;
  double v184;
  double v185;
  _BOOL4 v186;
  _BOOL4 v187;
  double v188;
  double v189;
  double v190;
  uint64_t v191;
  uint64_t v192;
  double v193;
  double *v194;
  double *v195;
  double *v196;
  double *v197;
  double *v198;
  uint64_t v199;
  double v200;
  _BOOL4 v201;
  _BOOL4 v202;
  double v203;
  double v204;
  double v205;
  double v206;
  double v207;
  double v208;
  _BOOL4 v209;
  _BOOL4 v210;
  double v211;
  double v212;
  uint64_t v213;
  double v214;
  double v215;
  double v216;
  double v217;
  uint64_t v218;
  uint64_t v219;
  double *v220;
  double *v221;
  double v222;
  uint64_t v223;
  double *v224;
  double v225;
  double v226;
  double *v227;
  double v228;
  double v229;
  double v230;
  double v231;
  double v232;
  BOOL v233;
  double v234;
  double v235;
  double v236;
  _BOOL4 v237;
  _BOOL4 v238;
  double v239;
  double v240;
  double v241;
  uint64_t v242;
  double *v243;
  double *v244;
  double *v245;
  double *v246;
  double *v247;
  double *v248;
  uint64_t v249;
  double v250;
  double v251;
  double *v252;
  double v253;
  double v254;
  double v255;
  double v256;
  double v257;
  BOOL v258;
  double v259;
  double v260;
  double v261;
  _BOOL4 v262;
  _BOOL4 v263;
  double v264;
  double v265;
  uint64_t v266;
  uint64_t *v267;
  double *v268;
  const char *v269;
  double *v270;
  double *v271;
  unint64_t v272;
  double v273;
  uint64_t result;
  uint64_t v275;
  uint64_t v276;
  double *v277;
  double *v278;
  double *v279;
  uint64_t v280;
  double *v281;
  double *v282;
  double *v283;
  uint64_t v284;
  uint64_t v285;
  double *v286;
  uint64_t v287;
  double *v288;
  double *v289;
  uint64_t v290;
  double *v291;
  int8x16_t v292;
  double *v293;
  double *v294;
  double *v295;
  double *v296;
  double *v297;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  uint64_t v309;
  __int128 v310;
  __int128 v311;
  uint64_t v313;
  uint64_t v314;
  uint64_t v316;
  double *v318;
  double v319;
  double v320;
  double v321;
  uint64_t v322;
  double v323;
  uint64_t v324;
  uint64_t v325[2];

  v24 = *a7;
  v25 = *a17;
  v323 = 0.0;
  v324 = 0;
  v321 = 0.0;
  v322 = 0;
  v319 = 0.0;
  v320 = 0.0;
  *a19 = 0;
  v26 = *a1;
  if (!*a1)
    return 0;
  v27 = a7;
  v318 = a4 - 1;
  v29 = v26 - 1;
  v316 = v25;
  if (v26 == 1)
  {
    v30 = a2;
    goto LABEL_21;
  }
  v31 = a5;
  v325[0] = *a1;
  v32 = fabs(*a4);
  v33 = *a4 == 0.0 || v26 < 2;
  if (!v33)
  {
    v34 = v26 - 2;
    v35 = a4 + 1;
    v36 = a5;
    v37 = v32;
    do
    {
      v38 = *v35++;
      v39 = fabs(v38);
      v40 = *v36++;
      a12.f64[0] = v37 + fabs(v40);
      v37 = v39 * (v37 / a12.f64[0]);
      if (v32 >= v37)
        v32 = v37;
      v41 = v32 == 0.0 || v34-- == 0;
    }
    while (!v41);
  }
  v42 = v32 / sqrt((double)v26) * 9.99200722e-15;
  v43 = 6 * v26 * v26;
  *(double *)a10.i64 = (double)v43 * COERCE_DOUBLE(0x8000000000000);
  v44 = v42 <= *(double *)a10.i64 ? (double)v43 * COERCE_DOUBLE(0x8000000000000) : v42;
  if (v26 <= 1)
    return 0;
  v112 = 0;
  v113 = 0;
  v114 = v31 - 1;
  v294 = a6;
  v279 = &a6[~v24];
  v280 = v24;
  v281 = a8;
  v293 = &a8[~v25];
  v288 = &a18[3 * v29];
  v289 = (double *)((char *)a18 + ((16 * v29) | 8) - 8);
  v115 = a4 + 1;
  v116 = &a18[3 * v26];
  v283 = v116 - 5;
  v282 = &a18[2 * v26 - 4];
  v291 = a18 - 1;
  v286 = a18 - 2;
  v287 = v26;
  v117 = &a18[v26 - 1];
  v118 = v116 - 3;
  v119 = &a18[2 * v26 - 2];
  v277 = &a18[2 * v26 - 3];
  v278 = v116 - 4;
  v120 = -1;
  v19.i64[0] = 1.0;
  v121.f64[0] = NAN;
  v121.f64[1] = NAN;
  v122 = vnegq_f64(v121);
  v292 = (int8x16_t)v122;
  *(_QWORD *)&v23 = 0;
  *(_QWORD *)&v22 = 0;
  *(_QWORD *)&v21 = 0;
  *(_QWORD *)&v20 = 0;
  v123 = 0.0;
  v124 = -1;
  v297 = v117;
  v295 = v119;
  v296 = v116 - 3;
  v290 = 6 * v26 * v26;
LABEL_77:
  v125 = v120;
  v126 = v124;
  v124 = v26;
LABEL_82:
  if (v112 <= v43)
  {
LABEL_83:
    v130 = &v318[v124];
    v131 = v124 - 1;
    v132 = &v114[v124 - 1];
    while (1)
    {
      while (1)
      {
        a11.n128_f64[0] = fabs(*v130);
        v133 = v124;
        while (1)
        {
          v134 = v133 - 1;
          v122.f64[0] = fabs(v31[v133 - 2]);
          if (v122.f64[0] <= v44)
            break;
          *(double *)a10.i64 = fabs(a4[v133 - 2]);
          if (a11.n128_f64[0] > *(double *)a10.i64)
            *(double *)a10.i64 = a11.n128_f64[0];
          if (*(double *)a10.i64 <= v122.f64[0])
            a11.n128_f64[0] = v122.f64[0];
          else
            a11.n128_f64[0] = *(double *)a10.i64;
          --v133;
          if (v134 == 1)
          {
            v134 = 0;
            goto LABEL_94;
          }
        }
        v114[v134] = 0.0;
        if (v134 == v131)
          goto LABEL_146;
LABEL_94:
        v120 = v134 + 1;
        if (v134 + 1 == v131)
        {
          v309 = v125;
          v313 = v113;
          v284 = v112;
          dlasv2_(&v318[v131], &v114[v124 - 1], v130, &v320, &v319, &v321, (double *)&v322, &v323, (int8x16_t)v122, a10, (int8x16_t)a11, (int8x16_t)a12, a13, a14, a15, a16, (double *)&v324);
          v19.i64[0] = 1.0;
          v112 = v284;
          v27 = a7;
          v318[v131] = v319;
          *v132 = 0.0;
          *(double *)&v21 = v321;
          v318[v124] = v320;
          v140 = *a2;
          *(_QWORD *)&v20 = v322;
          if (*a2 >= 1)
          {
            v141 = &v279[v131 + v280];
            if (*a7 == 1)
            {
              v142 = (unint64_t *)&v279[v124 + v280];
              v143 = *v141;
              do
              {
                a10.i64[0] = *v142;
                v144 = *(double *)&v21 * *(double *)v142 + *(double *)&v20 * v143;
                v143 = *(double *)&v20 * *(double *)v142 - v143 * *(double *)&v21;
                *((double *)v142 - 1) = v144;
                *(double *)v142++ = v143;
                --v140;
              }
              while (v140);
            }
            else
            {
              v122 = (float64x2_t)vdupq_lane_s64(v322, 0);
              v145 = 8 * *a7;
              do
              {
                a10 = *(int8x16_t *)v141;
                a12.f64[1] = v141[1];
                a12.f64[0] = -*v141;
                v146 = (int8x16_t)vmulq_n_f64(a12, *(double *)&v21);
                a11 = (__n128)vmlaq_f64((float64x2_t)vextq_s8(v146, v146, 8uLL), *(float64x2_t *)v141, v122);
                *(__n128 *)v141 = a11;
                v141 = (double *)((char *)v141 + v145);
                --v140;
              }
              while (v140);
            }
          }
          v147 = *a3;
          *(double *)&v23 = v323;
          *(_QWORD *)&v22 = v324;
          v115 = a4 + 1;
          v114 = v31 - 1;
          v118 = v296;
          v117 = v297;
          v119 = v295;
          v113 = v313;
          if ((uint64_t)*a3 >= 1)
          {
            if (v147 < 8
              || ((v148 = (float64x2_t *)&v293[v131 * v316 + 1],
                   v149 = (float64x2_t *)&v293[v124 * v316 + 1],
                   v148 < (float64x2_t *)((char *)&v281[v147] + v316 * (8 * v124 - 8)))
                ? (v150 = v149 >= (float64x2_t *)((char *)&v281[v147] + v316 * (8 * v124 - 16)))
                : (v150 = 1),
                  !v150))
            {
              v151 = 0;
              goto LABEL_143;
            }
            v151 = v147 & 0xFFFFFFFFFFFFFFFELL;
            v122 = (float64x2_t)vdupq_lane_s64(v324, 0);
            v152 = v147 & 0xFFFFFFFFFFFFFFFELL;
            do
            {
              v153 = *v148;
              a11 = *(__n128 *)v149;
              a12 = vmlaq_f64(vmulq_n_f64(*v149, *(double *)&v23), *v148, v122);
              *v148++ = a12;
              a10 = (int8x16_t)vmlaq_f64(vmulq_n_f64(vnegq_f64(v153), *(double *)&v23), (float64x2_t)a11, v122);
              *v149++ = (float64x2_t)a10;
              v152 -= 2;
            }
            while (v152);
            if (v147 != v151)
            {
LABEL_143:
              v154 = v147 - v151;
              v155 = v151;
              v156 = (unint64_t *)((char *)&v281[v155] + v316 * (8 * v124 - 8));
              v157 = (double *)((char *)&v281[v155] + v316 * (8 * v124 - 16));
              do
              {
                v158 = *v157;
                a10.i64[0] = *v156;
                *v157 = *(double *)&v23 * *(double *)v156 + *(double *)&v22 * *v157;
                ++v157;
                *(double *)v156++ = *(double *)&v22 * *(double *)a10.i64 - v158 * *(double *)&v23;
                --v154;
              }
              while (v154);
            }
          }
          v131 = v124 - 2;
          v125 = v309;
LABEL_146:
          v124 = v131;
          if (v131 < 2)
          {
            v26 = *a1;
            a8 = v281;
            a6 = v294;
            v30 = a2;
            v25 = v316;
            if (*a1 < 1)
              return 0;
LABEL_21:
            v45 = a6 + 2;
            v46 = 1;
            v47 = a6;
            while (2)
            {
              v48 = v318[v46];
              if (v48 < 0.0)
              {
                v318[v46] = -v48;
                v49 = *v30;
                if (*v30 >= 1)
                {
                  v50 = *v27;
                  if (v49 >= 4 && v50 == 1)
                  {
                    v53 = v49 & 0xFFFFFFFFFFFFFFFCLL;
                    v54 = (float64x2_t *)v45;
                    v55 = v49 & 0xFFFFFFFFFFFFFFFCLL;
                    do
                    {
                      v56 = vnegq_f64(*v54);
                      v54[-1] = vnegq_f64(v54[-1]);
                      *v54 = v56;
                      v54 += 2;
                      v55 -= 4;
                    }
                    while (v55);
                    if (v49 != v53)
                    {
                      v52 = v53 | 1;
                      goto LABEL_34;
                    }
                  }
                  else
                  {
                    v52 = 1;
LABEL_34:
                    v57 = v49 - v52 + 1;
                    v58 = 8 * v50;
                    v59 = (double *)((char *)v47 + v58 * (v52 - 1));
                    do
                    {
                      *v59 = -*v59;
                      v59 = (double *)((char *)v59 + v58);
                      --v57;
                    }
                    while (v57);
                  }
                }
              }
              ++v45;
              ++v47;
              v41 = v46++ == v26;
              if (v41)
              {
                if (v26 < 2)
                  return 0;
                v60 = 0;
                v61 = v26 + 1;
                v62 = 8 * v26 - 8;
                v63 = v25 * v62;
                v64 = -8 * v25;
                v65 = &a6[v26 + 1];
                v66 = &a6[v26];
                v67 = (char *)a8 + v25 * v62 + 16;
                v68 = &a8[-v25 - 1];
                v69 = v26 * v25;
                v70 = 1;
                v71 = v26;
                while (2)
                {
                  v72 = *a4;
                  v73 = v61 - v70;
                  if (v61 - v70 >= 2)
                  {
                    v75 = 1;
                    v74 = 1;
                    do
                    {
                      v76 = a4[v75];
                      if (v76 <= v72)
                        v74 = v75 + 1;
                      v77 = v75 + 1;
                      if (v76 <= v72)
                        v72 = a4[v75];
                      ++v75;
                    }
                    while (v71 != v77);
                  }
                  else
                  {
                    v74 = 1;
                  }
                  if (v74 != v73)
                  {
                    v318[v74] = v318[v73];
                    v318[v73] = v72;
                    v78 = *v30;
                    if (*v30 >= 1)
                    {
                      v79 = *v27;
                      v80 = 1;
                      if (v78 >= 6 && v79 == 1)
                      {
                        v81 = (char *)a6 + v62 - 8 * v60;
                        v82 = &a6[v74 - 1];
                        if (v82 < (double *)&v81[8 * v78] && v81 < (char *)&v82[v78])
                        {
                          v80 = 1;
                          v30 = a2;
                          goto LABEL_59;
                        }
                        v83 = v78 & 0xFFFFFFFFFFFFFFFCLL;
                        v84 = &a6[v74 + 1];
                        v85 = v65;
                        v86 = v78 & 0xFFFFFFFFFFFFFFFCLL;
                        do
                        {
                          v87 = *((_OWORD *)v84 - 1);
                          v88 = *(_OWORD *)v84;
                          v89 = *(_OWORD *)v85;
                          *((_OWORD *)v84 - 1) = *((_OWORD *)v85 - 1);
                          *(_OWORD *)v84 = v89;
                          *((_OWORD *)v85 - 1) = v87;
                          *(_OWORD *)v85 = v88;
                          v85 += 4;
                          v84 += 4;
                          v86 -= 4;
                        }
                        while (v86);
                        v30 = a2;
                        if (v78 != v83)
                        {
                          v80 = v83 | 1;
                          goto LABEL_59;
                        }
                      }
                      else
                      {
LABEL_59:
                        v90 = v78 - v80 + 1;
                        v91 = 8 * v79;
                        v92 = v91 * (v80 - 1) - 8;
                        v93 = &a6[v74];
                        do
                        {
                          v94 = *(_QWORD *)((char *)v93 + v92);
                          *(double *)((char *)v93 + v92) = *(double *)((char *)v66 + v92);
                          *(_QWORD *)((char *)v66 + v92) = v94;
                          v92 += v91;
                          --v90;
                        }
                        while (v90);
                      }
                    }
                    v25 = v316;
                    v95 = *a3;
                    if ((uint64_t)*a3 >= 1)
                    {
                      if (v95 > 7)
                      {
                        v97 = (char *)a8 + v63 + v64 * v60;
                        v98 = 8 * v74 - 8;
                        if ((char *)a8 + v316 * v98 < &v97[8 * v95] && v97 < (char *)&a8[v95] + v316 * v98)
                        {
                          v96 = 1;
                          v30 = a2;
                          v25 = v316;
                          goto LABEL_73;
                        }
                        v100 = v95 & 0xFFFFFFFFFFFFFFFCLL;
                        v101 = (__int128 *)((char *)a8 + v316 * v98 + 16);
                        v102 = (__int128 *)v67;
                        v103 = v95 & 0xFFFFFFFFFFFFFFFCLL;
                        v30 = a2;
                        v25 = v316;
                        do
                        {
                          v104 = *(v101 - 1);
                          v105 = *v101;
                          v106 = *v102;
                          *(v101 - 1) = *(v102 - 1);
                          *v101 = v106;
                          *(v102 - 1) = v104;
                          *v102 = v105;
                          v102 += 2;
                          v101 += 2;
                          v103 -= 4;
                        }
                        while (v103);
                        if (v95 != v100)
                        {
                          v96 = v100 | 1;
                          goto LABEL_73;
                        }
                      }
                      else
                      {
                        v96 = 1;
LABEL_73:
                        v107 = v74 * v25;
                        v108 = v95 - v96 + 1;
                        v109 = &v68[v96 + v69];
                        v110 = &v68[v96 + v107];
                        do
                        {
                          v111 = *(_QWORD *)v110;
                          *v110++ = *v109;
                          *(_QWORD *)v109++ = v111;
                          --v108;
                        }
                        while (v108);
                      }
                    }
                  }
                  ++v70;
                  ++v60;
                  --v71;
                  --v65;
                  --v66;
                  v67 += v64;
                  v69 -= v25;
                  if (v70 == v26)
                    return 0;
                  continue;
                }
              }
              continue;
            }
          }
          goto LABEL_83;
        }
        if (v134 >= v126 || v124 < v125)
          break;
        if (v113 == 1)
        {
          a10.i64[0] = *(uint64_t *)v130;
          *(double *)a13.i64 = fabs(*v130);
          goto LABEL_101;
        }
        v122.f64[0] = a4[v134];
        v135 = fabs(v122.f64[0]);
LABEL_110:
        v137 = &v31[v134];
        *(double *)a10.i64 = fabs(*v137);
        a13.i64[0] = 0x3D06800000000000;
        a12.f64[0] = v135 * 9.99200722e-15;
        if (*(double *)a10.i64 > a12.f64[0])
        {
          a10.i64[0] = *(uint64_t *)v130;
          a12.f64[0] = fabs(*v130);
          if (v131 <= v134)
          {
LABEL_148:
            v314 = v113;
            v159 = 0;
            goto LABEL_149;
          }
          v138 = v124 - 2;
          a13.i64[0] = *(_QWORD *)&a12.f64[0];
          while (1)
          {
            a14 = fabs(v31[v138]);
            a15 = *(double *)a13.i64 * 9.99200722e-15;
            if (a14 <= *(double *)a13.i64 * 9.99200722e-15)
              break;
            *(double *)a13.i64 = *(double *)a13.i64 / (*(double *)a13.i64 + a14) * fabs(a4[v138]);
            if (a12.f64[0] >= *(double *)a13.i64)
              a12.f64[0] = *(double *)a13.i64;
            v33 = v138-- <= v134;
            if (v33)
              goto LABEL_148;
          }
          v139 = v138 + 1;
          goto LABEL_123;
        }
LABEL_120:
        *v137 = 0.0;
      }
      v122.f64[0] = a4[v134];
      v135 = fabs(v122.f64[0]);
      a10.i64[0] = *(uint64_t *)v130;
      *(double *)a13.i64 = fabs(*v130);
      if (v135 < *(double *)a13.i64)
      {
        v113 = 2;
        goto LABEL_110;
      }
LABEL_101:
      a12.f64[0] = *(double *)a13.i64 * 9.99200722e-15;
      if (fabs(*v132) <= *(double *)a13.i64 * 9.99200722e-15)
      {
        v137 = &v114[v124 - 1];
        v113 = 1;
        goto LABEL_120;
      }
      v122.f64[0] = a4[v134];
      a12.f64[0] = fabs(v122.f64[0]);
      if (v124 <= v120)
      {
        v159 = 1;
        v314 = 1;
LABEL_149:
        v160 = ~v134;
        v161 = *a1;
        if (a12.f64[0] / a11.n128_f64[0] * ((double)*a1 * 9.99200722e-15) <= 1.11022302e-16)
          goto LABEL_248;
        if (v159)
        {
          v162 = fabs(v122.f64[0]);
          v163 = fabs(v318[v131]);
          v164 = fabs(*(double *)a10.i64);
          if (v163 >= v164)
            v165 = v164;
          else
            v165 = v163;
          if (v163 > v164)
            v164 = v163;
          v166 = 0.0;
          if (v165 != 0.0)
          {
            v167 = *v132;
            goto LABEL_242;
          }
LABEL_164:
          if (v162 > 0.0)
          {
LABEL_165:
            if (v166 / v162 * (v166 / v162) >= 1.11022302e-16)
              goto LABEL_166;
LABEL_248:
            v169 = v112 + v124 + v160;
            if ((v159 & 1) != 0)
            {
LABEL_249:
              v217 = 1.0;
              v218 = v124 - v120;
              if (v124 <= v120)
              {
                v301 = v23;
                v304 = v22;
                v307 = v21;
                v311 = v20;
                v285 = v169;
                v222 = 1.0;
                v224 = a18;
LABEL_309:
                v265 = v217 * *(double *)a10.i64;
                *v130 = v222 * v265;
                *v132 = v123 * v265;
                v266 = v218 + 1;
                v325[0] = v218 + 1;
                dlasr_("L", "F", v325, a2, v224, &v291[v161], &v294[v134], v27);
                v325[0] = v266;
                v267 = (uint64_t *)a3;
                v268 = &v293[v120 * v316 + 1];
                v269 = "F";
                v271 = v288;
                v270 = v289;
                goto LABEL_312;
              }
              v219 = 0;
              v220 = &v114[v120];
              v221 = &a4[v120];
              v222 = 1.0;
              v223 = v134 + 1;
              v224 = a18;
              while (2)
              {
                v227 = &v221[v219];
                v228 = v217 * v221[v219 - 1];
                v229 = v220[v219];
                v230 = 0.0;
                if (v229 == 0.0)
                {
                  v217 = 1.0;
                  v229 = v228;
                }
                else if (v228 == 0.0)
                {
                  v217 = 0.0;
                  v230 = 1.0;
                }
                else
                {
                  v231 = sqrt(v229 * v229 + v228 * v228);
                  v217 = v228 / v231;
                  v232 = v229 / v231;
                  v233 = fabs(v228) > fabs(v229);
                  v229 = -v231;
                  if (v233 && v228 / v231 < 0.0)
                  {
                    v217 = -v217;
                    v230 = -v232;
                  }
                  else
                  {
                    v229 = v231;
                    v230 = v232;
                  }
                  if ((*(_QWORD *)&v229 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
                    return 0xFFFFFFFFLL;
                }
                if (v223 > v120)
                  v220[v219 - 1] = v123 * v229;
                v225 = v222 * v229;
                v226 = v230 * v221[v219];
                if (v226 == 0.0)
                {
                  v222 = 1.0;
                  v123 = 0.0;
                  goto LABEL_253;
                }
                if (v225 == 0.0)
                {
                  v222 = 0.0;
                  v123 = 1.0;
                  v225 = v230 * v221[v219];
LABEL_253:
                  *(v227 - 1) = v225;
                }
                else
                {
                  v234 = sqrt(v226 * v226 + v225 * v225);
                  v235 = v225 / v234;
                  v236 = v226 / v234;
                  v237 = fabs(v225) > fabs(v226);
                  v238 = v225 / v234 < 0.0;
                  if (v237 && v238)
                    v234 = -v234;
                  *(v227 - 1) = v234;
                  v239 = v234;
                  if (v237 && v238)
                    v222 = -v235;
                  else
                    v222 = v235;
                  if (v237 && v238)
                    v123 = -v236;
                  else
                    v123 = v236;
                  if ((*(_QWORD *)&v239 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
                    return 0xFFFFFFFFLL;
                }
                ++v223;
                a18[v219] = v217;
                v117[v219] = v230;
                v119[v219] = v222;
                v118[v219++] = v123;
                if (v124 == v223)
                {
                  v301 = v23;
                  v304 = v22;
                  v307 = v21;
                  v311 = v20;
                  v285 = v169;
                  a10.i64[0] = *(uint64_t *)v130;
                  goto LABEL_309;
                }
                continue;
              }
            }
LABEL_278:
            v240 = 1.0;
            if (v124 < v134 + 2)
            {
              v301 = v23;
              v304 = v22;
              v307 = v21;
              v311 = v20;
              v285 = v169;
              v241 = 1.0;
              goto LABEL_311;
            }
            v242 = v124;
            v243 = &v278[-v120];
            v244 = &v277[-v120];
            v245 = &v286[-v120];
            v246 = &v291[-v120];
            v241 = 1.0;
            v247 = a4 - 2;
            v248 = v31 - 2;
            v249 = v124;
            while (2)
            {
              v252 = &v247[v242];
              v253 = v240 * v247[v242 + 1];
              v254 = v248[v124];
              v255 = 0.0;
              if (v254 == 0.0)
              {
                v240 = 1.0;
                v254 = v253;
              }
              else if (v253 == 0.0)
              {
                v240 = 0.0;
                v255 = 1.0;
              }
              else
              {
                v256 = sqrt(v254 * v254 + v253 * v253);
                v240 = v253 / v256;
                v257 = v254 / v256;
                v258 = fabs(v253) > fabs(v254);
                v254 = -v256;
                if (v258 && v253 / v256 < 0.0)
                {
                  v240 = -v240;
                  v255 = -v257;
                }
                else
                {
                  v254 = v256;
                  v255 = v257;
                }
                if ((*(_QWORD *)&v254 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
                  return 0xFFFFFFFFLL;
              }
              if (v249 < v124)
                v248[v242 + 1] = v123 * v254;
              v250 = v241 * v254;
              v251 = v255 * v247[v124];
              if (v251 == 0.0)
              {
                v241 = 1.0;
                v123 = 0.0;
                goto LABEL_284;
              }
              if (v250 == 0.0)
              {
                v241 = 0.0;
                v123 = 1.0;
                v250 = v255 * v247[v124];
LABEL_284:
                v252[1] = v250;
              }
              else
              {
                v259 = sqrt(v251 * v251 + v250 * v250);
                v260 = v250 / v259;
                v261 = v251 / v259;
                v262 = fabs(v250) > fabs(v251);
                v263 = v250 / v259 < 0.0;
                if (v262 && v263)
                  v259 = -v259;
                v252[1] = v259;
                v264 = v259;
                if (v262 && v263)
                  v241 = -v260;
                else
                  v241 = v260;
                if (v262 && v263)
                  v123 = -v261;
                else
                  v123 = v261;
                if ((*(_QWORD *)&v264 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
                  return 0xFFFFFFFFLL;
              }
              v246[v124] = v240;
              v245[v124 + v287] = -v255;
              v244[v124] = v241;
              --v249;
              v243[v124] = -v123;
              --v248;
              --v243;
              --v244;
              --v245;
              --v246;
              --v247;
              if (v249 + 1 > v134 + 2)
                continue;
              break;
            }
            v301 = v23;
            v304 = v22;
            v307 = v21;
            v311 = v20;
            v285 = v169;
            v122.f64[0] = a4[v134];
LABEL_311:
            v272 = v134;
            v273 = v240 * v122.f64[0];
            a4[v272] = v241 * v273;
            v132 = &v31[v272];
            v31[v272] = v123 * v273;
            v325[0] = v124 - v120 + 1;
            dlasr_("L", "B", v325, a2, v289, v288, &v294[v272], v27);
            v325[0] = v124 - v120 + 1;
            v271 = &v291[*a1];
            v267 = (uint64_t *)a3;
            v270 = a18;
            v268 = &v293[v120 * v316 + 1];
            v269 = "B";
LABEL_312:
            dlasr_("R", v269, v267, v325, v270, v271, v268, a17);
            v114 = v31 - 1;
            v27 = a7;
            v26 = v124;
            v43 = v290;
            v112 = v285;
            v117 = v297;
            v115 = a4 + 1;
            v119 = v295;
            v118 = v296;
            v19.i64[0] = 1.0;
            v113 = v314;
            v20 = v311;
            v22 = v304;
            v21 = v307;
            v23 = v301;
            if (fabs(*v132) <= v44)
            {
              *v132 = 0.0;
              v26 = v124;
            }
            goto LABEL_77;
          }
        }
        else
        {
          v162 = fabs(*(double *)a10.i64);
          v164 = fabs(v122.f64[0]);
          v168 = fabs(v318[v134 + 2]);
          if (v164 >= v168)
            v165 = v168;
          else
            v165 = v164;
          if (v164 <= v168)
            v164 = v168;
          v166 = 0.0;
          if (v165 == 0.0)
            goto LABEL_164;
          v167 = v31[v134];
LABEL_242:
          v214 = fabs(v167);
          v215 = v165 / v164 + *(double *)v19.i64;
          v216 = (v164 - v165) / v164;
          if (v214 >= v164)
          {
            v166 = v164
                 / v214
                 * (v165
                  * (2.0
                   / (sqrt(*(double *)v19.i64 + v164 / v214 * v215 * (v164 / v214 * v215))
                    + sqrt(*(double *)v19.i64 + v164 / v214 * v216 * (v164 / v214 * v216)))));
            if (v162 > 0.0)
              goto LABEL_165;
          }
          else
          {
            v166 = v165
                 * (2.0
                  / (sqrt(v214 / v164 * (v214 / v164) + v215 * v215) + sqrt(v214 / v164 * (v214 / v164) + v216 * v216)));
            if (v162 > 0.0)
              goto LABEL_165;
          }
        }
LABEL_166:
        v169 = v112 + v124 + v160;
        if (v166 == 0.0)
        {
          if (v159)
            goto LABEL_249;
          goto LABEL_278;
        }
        if (v159)
        {
          v170 = (fabs(v122.f64[0]) - v166) * (*(double *)vbslq_s8(v292, v19, (int8x16_t)v122).i64 + v166 / v122.f64[0]);
          if (v124 <= v120)
          {
            v176 = a18;
          }
          else
          {
            v171 = 0;
            v172 = v31[v134];
            v173 = &v114[v134];
            v174 = &v115[v134];
            v175 = v134 + 1;
            v176 = a18;
            do
            {
              if (v172 == 0.0)
              {
                *(_QWORD *)&v20 = 1.0;
                *(_QWORD *)&v21 = 0;
              }
              else if (v170 == 0.0)
              {
                *(_QWORD *)&v20 = 0;
                *(_QWORD *)&v21 = 1.0;
                v170 = v172;
              }
              else
              {
                v177 = sqrt(v172 * v172 + v170 * v170);
                v178 = fabs(v170) > fabs(v172);
                v179 = v170 / v177 < 0.0;
                if (v178 && v179)
                  *(double *)&v21 = -(v172 / v177);
                else
                  *(double *)&v21 = v172 / v177;
                if (v178 && v179)
                  *(double *)&v20 = -(v170 / v177);
                else
                  *(double *)&v20 = v170 / v177;
                if (v178 && v179)
                  v170 = -v177;
                else
                  v170 = v177;
                if ((*(_QWORD *)&v170 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
                  return 0xFFFFFFFFLL;
              }
              if (v175 > v120)
                v173[v171] = v170;
              v180 = v174[v171 - 1];
              v181 = v173[v171 + 1];
              v182 = *(double *)&v21 * v181 + *(double *)&v20 * v180;
              v173[v171 + 1] = *(double *)&v20 * v181 - *(double *)&v21 * v180;
              v183 = v174[v171];
              v172 = *(double *)&v21 * v183;
              v184 = *(double *)&v20 * v183;
              v174[v171] = v184;
              if (v172 == 0.0)
              {
                *(_QWORD *)&v22 = 1.0;
                *(_QWORD *)&v23 = 0;
              }
              else if (v182 == 0.0)
              {
                *(_QWORD *)&v22 = 0;
                *(_QWORD *)&v23 = 1.0;
                v182 = v172;
              }
              else
              {
                v185 = sqrt(v172 * v172 + v182 * v182);
                v186 = fabs(v182) > fabs(v172);
                v187 = v182 / v185 < 0.0;
                if (v186 && v187)
                  *(double *)&v23 = -(v172 / v185);
                else
                  *(double *)&v23 = v172 / v185;
                if (v186 && v187)
                  *(double *)&v22 = -(v182 / v185);
                else
                  *(double *)&v22 = v182 / v185;
                if (v186 && v187)
                  v182 = -v185;
                else
                  v182 = v185;
                if ((*(_QWORD *)&v182 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
                  return 0xFFFFFFFFLL;
              }
              v174[v171 - 1] = v182;
              v188 = v173[v171 + 1];
              v174[v171] = *(double *)&v22 * v184 - *(double *)&v23 * v188;
              if (v175 < v131)
              {
                v189 = v173[v171 + 2];
                v172 = *(double *)&v23 * v189;
                v173[v171 + 2] = *(double *)&v22 * v189;
              }
              ++v175;
              v170 = v184 * *(double *)&v23 + *(double *)&v22 * v188;
              *(_QWORD *)&a18[v171] = v20;
              *(_QWORD *)&v117[v171] = v21;
              *(_QWORD *)&v119[v171] = v22;
              *(_QWORD *)&v118[v171++] = v23;
            }
            while (v124 != v175);
          }
          v300 = v23;
          v303 = v22;
          v306 = v21;
          v310 = v20;
          *(_QWORD *)&v321 = v21;
          v322 = v20;
          *(_QWORD *)&v323 = v23;
          v324 = v22;
          v213 = v169;
          *v132 = v170;
          v325[0] = v124 - v134;
          dlasr_("L", "F", v325, a2, v176, &v291[v161], &v294[v134], v27);
          v325[0] = v124 - v120 + 1;
          dlasr_("R", "F", (uint64_t *)a3, v325, v289, v288, &v293[v120 * v316 + 1], a17);
          v23 = v300;
          v22 = v303;
          v21 = v306;
          v20 = v310;
          v19.i64[0] = 1.0;
          v119 = v295;
          v118 = v296;
          v117 = v297;
          v115 = a4 + 1;
          v112 = v213;
          v114 = v31 - 1;
          v27 = a7;
          v125 = v120;
          v126 = v124;
          v43 = v290;
          v113 = v314;
          if (fabs(*v132) <= v44)
          {
            *v132 = 0.0;
            v125 = v120;
            v126 = v124;
          }
        }
        else
        {
          v190 = (fabs(*(double *)a10.i64) - v166)
               * (*(double *)vbslq_s8(v292, v19, a10).i64 + v166 / *(double *)a10.i64);
          v191 = v134 + 2;
          if (v124 >= v134 + 2)
          {
            v192 = v124;
            v193 = *v132;
            v194 = &v283[-v134];
            v195 = &v282[-v134];
            v196 = &a18[-v134 - 3];
            v197 = &v286[-v134];
            v198 = v318;
            v199 = v124;
            do
            {
              if (v193 == 0.0)
              {
                *(_QWORD *)&v20 = 1.0;
                *(_QWORD *)&v21 = 0;
              }
              else if (v190 == 0.0)
              {
                *(_QWORD *)&v20 = 0;
                *(_QWORD *)&v21 = 1.0;
                v190 = v193;
              }
              else
              {
                v200 = sqrt(v193 * v193 + v190 * v190);
                v201 = fabs(v190) > fabs(v193);
                v202 = v190 / v200 < 0.0;
                if (v201 && v202)
                  *(double *)&v21 = -(v193 / v200);
                else
                  *(double *)&v21 = v193 / v200;
                if (v201 && v202)
                  *(double *)&v20 = -(v190 / v200);
                else
                  *(double *)&v20 = v190 / v200;
                if (v201 && v202)
                  v190 = -v200;
                else
                  v190 = v200;
                if ((*(_QWORD *)&v190 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
                  return 0xFFFFFFFFLL;
              }
              if (v199 < v124)
                v114[v124] = v190;
              v203 = v198[v124];
              v204 = v114[v192 - 1];
              v205 = *(double *)&v21 * v204 + *(double *)&v20 * v203;
              v114[v192 - 1] = *(double *)&v20 * v204 - *(double *)&v21 * v203;
              v206 = v198[v192 - 1];
              v193 = *(double *)&v21 * v206;
              v207 = *(double *)&v20 * v206;
              v198[v192 - 1] = v207;
              if (v193 == 0.0)
              {
                *(_QWORD *)&v22 = 1.0;
                *(_QWORD *)&v23 = 0;
              }
              else if (v205 == 0.0)
              {
                *(_QWORD *)&v22 = 0;
                *(_QWORD *)&v23 = 1.0;
                v205 = v193;
              }
              else
              {
                v208 = sqrt(v193 * v193 + v205 * v205);
                v209 = fabs(v205) > fabs(v193);
                v210 = v205 / v208 < 0.0;
                if (v209 && v210)
                  *(double *)&v23 = -(v193 / v208);
                else
                  *(double *)&v23 = v193 / v208;
                if (v209 && v210)
                  *(double *)&v22 = -(v205 / v208);
                else
                  *(double *)&v22 = v205 / v208;
                if (v209 && v210)
                  v205 = -v208;
                else
                  v205 = v208;
                if ((*(_QWORD *)&v205 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
                  return 0xFFFFFFFFLL;
              }
              v198[v124] = v205;
              v211 = v114[v192 - 1];
              v198[v192 - 1] = *(double *)&v22 * v207 - *(double *)&v23 * v211;
              if (v199 > v191)
              {
                v212 = v114[v192 - 2];
                v193 = *(double *)&v23 * v212;
                v114[v192 - 2] = *(double *)&v22 * v212;
              }
              --v199;
              *(_QWORD *)&v197[v124] = v20;
              v196[v124 + v287] = -*(double *)&v21;
              *(_QWORD *)&v195[v124] = v22;
              v194[v124] = -*(double *)&v23;
              --v114;
              --v194;
              --v195;
              v190 = v207 * *(double *)&v23 + *(double *)&v22 * v211;
              --v196;
              --v197;
              --v198;
            }
            while (v199 + 1 > v191);
          }
          v299 = v23;
          v302 = v22;
          v305 = v21;
          v308 = v20;
          *(_QWORD *)&v321 = v21;
          v322 = v20;
          *(_QWORD *)&v323 = v23;
          v324 = v22;
          v127 = v134;
          if (fabs(v190) <= v44)
            v128 = 0.0;
          else
            v128 = v190;
          v31[v127] = v128;
          v325[0] = v124 - v120 + 1;
          v126 = v124;
          v129 = v169;
          dlasr_("L", "B", v325, a2, v289, v288, &v294[v127], v27);
          v325[0] = v124 - v120 + 1;
          dlasr_("R", "B", (uint64_t *)a3, v325, a18, &v291[*a1], &v293[v120 * v316 + 1], a17);
          v23 = v299;
          v22 = v302;
          v21 = v305;
          v20 = v308;
          v19.i64[0] = 1.0;
          v119 = v295;
          v118 = v296;
          v117 = v297;
          v115 = a4 + 1;
          v112 = v129;
          v114 = v31 - 1;
          v27 = a7;
          v125 = v120;
          v43 = v290;
          v113 = v314;
        }
        goto LABEL_82;
      }
      v136 = v134;
      a13.i64[0] = *(_QWORD *)&a12.f64[0];
      while (1)
      {
        a14 = fabs(v31[v136]);
        a15 = *(double *)a13.i64 * 9.99200722e-15;
        if (a14 <= *(double *)a13.i64 * 9.99200722e-15)
          break;
        *(double *)a13.i64 = *(double *)a13.i64 / (*(double *)a13.i64 + a14) * fabs(v115[v136]);
        if (a12.f64[0] >= *(double *)a13.i64)
          a12.f64[0] = *(double *)a13.i64;
        if (v131 == ++v136)
        {
          v159 = 1;
          v314 = 1;
          goto LABEL_149;
        }
      }
      v139 = v136 + 1;
      v113 = 1;
LABEL_123:
      v114[v139] = 0.0;
    }
  }
  *a19 = 0;
  if (*a1 < 2)
    return 0;
  v275 = 0;
  v276 = *a1 - 1;
  result = 0;
  do
  {
    if (*v31 != 0.0)
      *a19 = ++v275;
    ++v31;
    --v276;
  }
  while (v276);
  return result;
}

uint64_t dlasv2_(double *a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, int8x16_t a9, int8x16_t a10, int8x16_t a11, int8x16_t a12, int8x16_t a13, double a14, double a15, int8x16_t a16, double *a17)
{
  int8x16_t v17;
  int8x16_t v18;
  double *v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  float64x2_t v39;
  int8x16_t v40;
  double v41;
  double v42;
  double v43;
  BOOL v44;
  double v45;
  double v46;
  double v47;
  double v48;
  BOOL v49;
  double v50;
  double v51;
  float64x2_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;

  v19 = a17;
  v20 = *a1;
  v21 = fabs(*a1);
  v22 = fabs(*a3);
  v23 = 1;
  if (v22 > v21)
    v24 = v22;
  else
    v24 = v21;
  if (v22 > v21)
    v25 = v21;
  else
    v25 = v22;
  if (v22 > v21)
    a11.i64[0] = *(uint64_t *)a3;
  else
    a11.i64[0] = *(uint64_t *)a1;
  if (v22 > v21)
    v23 = 3;
  else
    v20 = *a3;
  a13.i64[0] = *(uint64_t *)a2;
  if (*a2 == 0.0)
  {
    *a4 = v25;
    *a5 = v24;
    v26 = 0.0;
    v27 = 1.0;
    v28 = 1.0;
    v29 = 0.0;
  }
  else
  {
    v30 = fabs(*(double *)a13.i64);
    if (v30 > v24)
    {
      if (v24 / v30 < 1.11022302e-16)
      {
        *a5 = v30;
        if (v25 <= 1.0)
          v31 = v25 * (v24 / v30);
        else
          v31 = v24 / (v30 / v25);
        *a4 = v31;
        v47 = v20 / *(double *)a13.i64;
        v48 = *(double *)a11.i64 / *(double *)a13.i64;
        v49 = v22 <= v21;
        if (v22 <= v21)
          v50 = v47;
        else
          v50 = v48;
        if (v49)
          v51 = v48;
        else
          v51 = v47;
        *a17 = 1.0;
        *a8 = v50;
        *a7 = v51;
        *a6 = 1.0;
        a9.i64[0] = 1.0;
        goto LABEL_53;
      }
      v23 = 2;
    }
    *(double *)a16.i64 = v24 - v25;
    v32 = (v24 - v25) / v24;
    v17.i64[0] = 1.0;
    if (v24 - v25 == v24)
      v32 = 1.0;
    v33 = *(double *)a13.i64 / *(double *)a11.i64;
    v18.i64[0] = 2.0;
    v34 = 2.0 - v32;
    v35 = sqrt(v34 * v34 + v33 * v33);
    v36 = fabs(*(double *)a13.i64 / *(double *)a11.i64);
    v37 = sqrt(v33 * v33 + v32 * v32);
    if (v32 != 0.0)
      v36 = v37;
    v38 = (v35 + v36) * 0.5;
    *a4 = v25 / v38;
    *a5 = v24 * v38;
    v39.f64[0] = NAN;
    v39.f64[1] = NAN;
    v40 = (int8x16_t)vnegq_f64(v39);
    v41 = *(double *)a13.i64 / *(double *)vbslq_s8(v40, a16, a11).i64 + v33 / v34;
    v42 = *(double *)vbslq_s8(v40, v18, a11).i64 * *(double *)vbslq_s8(v40, v17, a13).i64;
    if (v32 != 0.0)
      v42 = v41;
    if (v33 * v33 != 0.0)
      v42 = (v33 / (v34 + v35) + v33 / (v32 + v36)) * (v38 + 1.0);
    v43 = sqrt(v42 * v42 + 4.0);
    v28 = 2.0 / v43;
    v29 = v42 / v43;
    v27 = (v28 + v29 * v33) / v38;
    v26 = v20 / *(double *)a11.i64 * v29 / v38;
  }
  v44 = v22 <= v21;
  if (v22 <= v21)
    v45 = v27;
  else
    v45 = v29;
  if (v44)
    v46 = v26;
  else
    v46 = v28;
  if (v44)
    v26 = v28;
  *a17 = v45;
  *a8 = v46;
  if (v44)
    *(double *)a9.i64 = v29;
  else
    *(double *)a9.i64 = v27;
  *a7 = v26;
  *a6 = *(double *)a9.i64;
  if (v23 != 2)
  {
    if (v23 == 1)
    {
      a9.i64[0] = *(uint64_t *)a7;
      a2 = a1;
    }
    else
    {
      v19 = a8;
      a2 = a3;
    }
  }
LABEL_53:
  a10.i64[0] = 1.0;
  v52.f64[0] = NAN;
  v52.f64[1] = NAN;
  v53 = (int8x16_t)vnegq_f64(v52);
  v54 = vbslq_s8(v53, a10, a9);
  a12.i64[0] = *(uint64_t *)v19;
  v55 = vbslq_s8(v53, a10, a12);
  *(double *)v54.i64 = *(double *)v54.i64 * *(double *)v55.i64;
  v55.i64[0] = *(uint64_t *)a2;
  v56 = vbslq_s8(v53, a10, v55);
  *(double *)v54.i64 = *(double *)v54.i64 * *(double *)v56.i64;
  v56.i64[0] = *(uint64_t *)a5;
  v57 = vbslq_s8(v53, v56, v54);
  *a5 = *(double *)v57.i64;
  v57.i64[0] = *(uint64_t *)a1;
  v58 = vbslq_s8(v53, a10, v57);
  *(double *)v54.i64 = *(double *)v54.i64 * *(double *)v58.i64;
  v58.i64[0] = *(uint64_t *)a3;
  v59 = vbslq_s8(v53, a10, v58);
  *(double *)v54.i64 = *(double *)v54.i64 * *(double *)v59.i64;
  v59.i64[0] = *(uint64_t *)a4;
  *(_QWORD *)a4 = vbslq_s8(v53, v59, v54).u64[0];
  return 0;
}

uint64_t dlasr_(const char *a1, const char *a2, uint64_t *a3, uint64_t *a4, double *a5, double *a6, double *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  double *v10;
  double *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  BOOL v15;
  char v16;
  uint64_t v17;
  double *v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  double *v24;
  double v25;
  uint64_t v26;
  BOOL v28;
  uint64_t v29;
  unint64_t v30;
  double *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double *v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  BOOL v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t *v42;
  unint64_t v43;
  float64x2_t v44;
  float64x2_t v45;
  uint64_t v46;
  uint64_t v47;
  double *v48;
  double *v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double *v54;
  BOOL v55;
  double v56;
  double v57;
  double v58;
  uint64_t v59;
  double *v60;
  double v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  float64x2_t *v69;
  char *v70;
  char *v71;
  float64x2_t *v72;
  float64x2_t *v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  BOOL v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t *v80;
  float64x2_t *v81;
  unint64_t v82;
  float64x2_t v83;
  float64x2_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  double v92;
  char *v93;
  double *v94;
  uint64_t v95;
  uint64_t v96;
  double v97;
  double v98;
  double *v99;
  uint64_t v100;
  double v101;
  double v102;
  double *v103;
  uint64_t v104;
  uint64_t v105;
  double v106;
  double v107;
  double *v108;
  uint64_t v109;
  double v110;
  double v111;

  v8 = *a3;
  if (!*a3)
    return 0;
  v9 = *a4;
  if (!*a4)
    return 0;
  v10 = a5 - 1;
  v11 = a6 - 1;
  v12 = *a8;
  v13 = *(unsigned __int8 *)a2;
  if (*a1 != 76)
  {
    v26 = v9 - 2;
    v28 = v9 < 2 || v8 < 1;
    if (v13 == 70)
    {
      if (v28)
        return 0;
      v29 = 0;
      v30 = 8 * v12;
      v31 = &a7[-v12 - 1];
      v32 = 2 * v12;
      v33 = 1;
      v34 = *a8;
      v35 = a7;
      while (1)
      {
        v36 = *(uint64_t *)&v10[v33];
        v37 = *(uint64_t *)&v11[v33];
        if (*(double *)&v36 == 1.0 && *(double *)&v37 == 0.0)
          goto LABEL_29;
        v38 = -*(double *)&v37;
        if ((unint64_t)v8 >= 2
          && ((char *)&a7[v30 / 8] + v30 * v29 < (char *)&a7[v8] + v30 * v29
            ? (v39 = (char *)a7 + v30 * v29 >= (char *)&a7[v8 + v12] + v30 * v29)
            : (v39 = 1),
              v39))
        {
          v40 = (float64x2_t)vdupq_lane_s64(v36, 0);
          v41 = (float64x2_t)vdupq_lane_s64(v37, 0);
          v42 = (float64x2_t *)v35;
          v43 = v8 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v44 = *(float64x2_t *)((char *)v42 + 8 * v12);
            v45 = *v42;
            *(float64x2_t *)((char *)v42 + 8 * v12) = vmlaq_f64(vmulq_n_f64(*v42, v38), v44, v40);
            *v42++ = vmlaq_f64(vmulq_n_f64(v45, *(double *)&v36), v44, v41);
            v43 -= 2;
          }
          while (v43);
          v46 = v8 | 1;
          if (v8 == (v8 & 0xFFFFFFFFFFFFFFFELL))
            goto LABEL_29;
        }
        else
        {
          v46 = 1;
        }
        v47 = v8 + 1 - v46;
        v48 = &v31[v46 + v34];
        v49 = &v31[v46 + v32];
        do
        {
          v50 = *v49;
          *v49 = *v48 * v38 + *(double *)&v36 * *v49;
          ++v49;
          *v48 = *(double *)&v36 * *v48 + *(double *)&v37 * v50;
          ++v48;
          --v47;
        }
        while (v47);
LABEL_29:
        ++v33;
        ++v29;
        v35 = (double *)((char *)v35 + v30);
        v34 += v12;
        v32 += v12;
        if (v33 == v9)
          return 0;
      }
    }
    if (v28)
      return 0;
    v63 = 0;
    v64 = v12 * (8 * v9 - 8);
    v65 = -8 * v12;
    v66 = v64 + 8 * v8;
    v67 = v12 * (8 * v9 - 16);
    v68 = (char *)a7 + v67;
    v69 = (float64x2_t *)((char *)a7 + v64);
    v70 = (char *)a7 + v66;
    v71 = (char *)&a7[v8] + v67;
    v72 = v69;
    v73 = (float64x2_t *)((char *)a7 + v67);
    while (1)
    {
      v74 = *(uint64_t *)&v10[--v9];
      v75 = *(uint64_t *)&v11[v9];
      if (*(double *)&v74 == 1.0 && *(double *)&v75 == 0.0)
        goto LABEL_58;
      v76 = -*(double *)&v75;
      if ((unint64_t)v8 >= 2
        && ((char *)v69 + v65 * v63 < &v71[v65 * v63] ? (v77 = &v68[v65 * v63] >= &v70[v65 * v63]) : (v77 = 1), v77))
      {
        v78 = (float64x2_t)vdupq_lane_s64(v74, 0);
        v79 = (float64x2_t)vdupq_lane_s64(v75, 0);
        v80 = v72;
        v81 = v73;
        v82 = v8 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          v83 = *v80;
          v84 = *v81;
          *v80 = vmlaq_f64(vmulq_n_f64(*v81, v76), *v80, v78);
          ++v80;
          *v81++ = vmlaq_f64(vmulq_n_f64(v84, *(double *)&v74), v83, v79);
          v82 -= 2;
        }
        while (v82);
        v85 = v8 | 1;
        if (v8 == (v8 & 0xFFFFFFFFFFFFFFFELL))
          goto LABEL_58;
      }
      else
      {
        v85 = 1;
      }
      v86 = 0;
      v87 = v8 + 1 - v85;
      v88 = 8 * v85;
      v89 = (char *)&v73->f64[v85];
      v90 = (char *)v72 + v88;
      do
      {
        v91 = &v90[8 * v86];
        v92 = *((double *)v91 - 1);
        v93 = &v89[8 * v86];
        *((double *)v91 - 1) = *((double *)v93 - 1) * v76 + *(double *)&v74 * v92;
        *((double *)v93 - 1) = *(double *)&v74 * *((double *)v93 - 1) + *(double *)&v75 * v92;
        ++v86;
      }
      while (v87 != v86);
LABEL_58:
      v73 = (float64x2_t *)((char *)v73 - 8 * v12);
      v72 = (float64x2_t *)((char *)v72 - 8 * v12);
      v55 = v63++ == v26;
      if (v55)
        return 0;
    }
  }
  v14 = v8 - 2;
  v15 = v8 < 2 || v9 < 1;
  v16 = v15;
  if (v13 == 70)
  {
    if ((v16 & 1) == 0)
    {
      if (v12 == 1)
      {
        v17 = 0;
        v18 = a7 + 1;
        v19 = 1;
        do
        {
          v20 = v10[v19];
          v21 = v11[v19];
          if (v20 != 1.0 || v21 != 0.0)
          {
            v22 = a7[v17];
            v23 = v9;
            v24 = v18;
            do
            {
              v25 = v22 * -v21 + v20 * *v24;
              *(v24 - 1) = v20 * v22 + v21 * *v24;
              *v24++ = v25;
              v22 = v25;
              --v23;
            }
            while (v23);
          }
          ++v19;
          ++v17;
          ++v18;
        }
        while (v19 != v8);
      }
      else
      {
        v94 = a7 + 1;
        v95 = 8 * v12;
        v96 = 1;
        do
        {
          v97 = v10[v96];
          v98 = v11[v96];
          if (v97 != 1.0 || v98 != 0.0)
          {
            v99 = v94;
            v100 = v9;
            do
            {
              v101 = *(v99 - 1);
              v102 = v101 * -v98 + v97 * *v99;
              *(v99 - 1) = v97 * v101 + v98 * *v99;
              *v99 = v102;
              v99 = (double *)((char *)v99 + v95);
              --v100;
            }
            while (v100);
          }
          ++v96;
          ++v94;
        }
        while (v96 != v8);
      }
    }
  }
  else if ((v16 & 1) == 0)
  {
    v51 = v8;
    if (v12 == 1)
    {
      v52 = 0;
      v53 = v51 * 8 - 16;
      v54 = &a7[v8 - 1];
      do
      {
        v56 = v10[--v8];
        v57 = v11[v8];
        if (v56 != 1.0 || v57 != 0.0)
        {
          v58 = *(double *)((char *)a7 + v53 - 8 * v52);
          v59 = v9;
          v60 = v54;
          do
          {
            v61 = v58 * -v57 + v56 * *v60;
            *(v60 - 1) = v56 * v58 + v57 * *v60;
            *v60++ = v61;
            v58 = v61;
            --v59;
          }
          while (v59);
        }
        --v54;
        v55 = v52++ == v14;
      }
      while (!v55);
    }
    else
    {
      v103 = &a7[v51 - 1];
      v104 = 8 * v12;
      do
      {
        v105 = v8 - 1;
        v106 = v10[v105];
        v107 = v11[v105];
        if (v106 != 1.0 || v107 != 0.0)
        {
          v108 = v103;
          v109 = v9;
          do
          {
            v110 = *(v108 - 1);
            v111 = v110 * -v107 + v106 * *v108;
            *(v108 - 1) = v106 * v110 + v107 * *v108;
            *v108 = v111;
            v108 = (double *)((char *)v108 + v104);
            --v109;
          }
          while (v109);
        }
        --v103;
        v15 = v8-- <= 2;
      }
      while (!v15);
    }
  }
  return 0;
}

uint64_t bidiagonalSVD(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double a7, int8x16_t a8, __n128 a9, float64x2_t a10, int8x16_t a11, double a12, double a13, int8x16_t a14)
{
  int v14;
  uint64_t v16;
  uint64_t v17;

  v16 = a1;
  v17 = 0;
  v14 = dbdsqr_(&v16, &v16, (unint64_t *)&v16, a2, a3, a5, &v16, a4, a7, a8, a9, a10, a11, a12, a13, a14, &v16, a6, &v17);
  return v14 | v17;
}

void CRandomGenerator::~CRandomGenerator(CRandomGenerator *this)
{
  JUMPOUT(0x20BD36498);
}

void CRandomGenerator::CRandomGenerator(CRandomGenerator *this, unsigned int a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t i;
  int v5;
  uint64_t v6;
  uint64_t j;
  int v8;

  *(_QWORD *)this = &off_24C4213B8;
  v2 = 5489;
  v3 = 1;
  for (i = 3; i != 626; ++i)
  {
    v5 = 1812433253 * (v2 ^ (v2 >> 30));
    v2 = v5 + v3;
    *((_DWORD *)this + i) = i + v5 - 2;
    ++v3;
  }
  *((_DWORD *)this + 2) = a2;
  v6 = 1;
  for (j = 3; j != 626; ++j)
  {
    v8 = 1812433253 * (a2 ^ (a2 >> 30));
    a2 = v8 + v6;
    *((_DWORD *)this + j) = j + v8 - 2;
    ++v6;
  }
  *((_QWORD *)this + 313) = 0;
}

{
  unsigned int v2;
  uint64_t v3;
  uint64_t i;
  int v5;
  uint64_t v6;
  uint64_t j;
  int v8;

  *(_QWORD *)this = &off_24C4213B8;
  v2 = 5489;
  v3 = 1;
  for (i = 3; i != 626; ++i)
  {
    v5 = 1812433253 * (v2 ^ (v2 >> 30));
    v2 = v5 + v3;
    *((_DWORD *)this + i) = i + v5 - 2;
    ++v3;
  }
  *((_DWORD *)this + 2) = a2;
  v6 = 1;
  for (j = 3; j != 626; ++j)
  {
    v8 = 1812433253 * (a2 ^ (a2 >> 30));
    a2 = v8 + v6;
    *((_DWORD *)this + j) = j + v8 - 2;
    ++v6;
  }
  *((_QWORD *)this + 313) = 0;
}

uint64_t CRandomGenerator::Init(uint64_t this, unsigned int a2)
{
  uint64_t v2;
  uint64_t i;
  int v4;

  *(_DWORD *)(this + 8) = a2;
  v2 = 1;
  for (i = 3; i != 626; ++i)
  {
    v4 = 1812433253 * (a2 ^ (a2 >> 30));
    a2 = v4 + v2;
    *(_DWORD *)(this + 4 * i) = i + v4 - 2;
    ++v2;
  }
  *(_QWORD *)(this + 2504) = 0;
  return this;
}

float CRandomGenerator::UniformRand(CRandomGenerator *this)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  int v4;

  v1 = *((_QWORD *)this + 313);
  v2 = (v1 + 1) % 0x270uLL;
  v3 = 4 * v1;
  LODWORD(v1) = *((_DWORD *)this + (v1 + 397) % 0x270uLL + 2) ^ ((*((_DWORD *)this + v2 + 2) & 0x7FFFFFFE | *((_DWORD *)this + v1 + 2) & 0x80000000) >> 1) ^ ((int)(*((_DWORD *)this + v2 + 2) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)((char *)this + v3 + 8) = v1;
  *((_QWORD *)this + 313) = v2;
  v4 = ((v1 ^ (v1 >> 11)) << 7) & 0x9D2C5680 ^ v1 ^ (v1 >> 11);
  return (float)((float)((v4 << 15) & 0xEFC60000 ^ v4 ^ (((v4 << 15) & 0xEFC60000 ^ v4) >> 18)) * 2.3283e-10) + 0.0;
}

float CRandomGenerator::NormalRand(CRandomGenerator *this, float a2)
{
  char *v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  float v11;
  unsigned int v12;
  unsigned int v13;
  float v14;
  float v15;
  float v16;
  float v17;

  v2 = (char *)this + 8;
  v3 = *((_QWORD *)this + 313);
  v4 = *((_DWORD *)this + v3 + 2);
  do
  {
    v5 = (v3 + 1) % 0x270;
    v6 = 4 * v5;
    v7 = *(_DWORD *)&v2[4 * ((v3 + 397) % 0x270)] ^ ((*(_DWORD *)&v2[4 * v5] & 0x7FFFFFFE | v4 & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)&v2[4 * v5] << 31) >> 31) & 0x9908B0DF;
    *(_DWORD *)&v2[4 * v3] = v7;
    v8 = ((v7 ^ (v7 >> 11)) << 7) & 0x9D2C5680 ^ v7 ^ (v7 >> 11);
    v3 = v5 - 623;
    if (v5 < 0x26F)
      v3 = v5 + 1;
    v4 = *(_DWORD *)&v2[4 * v3];
    v9 = (v8 << 15) & 0xEFC60000 ^ v8;
    if (v5 >= 0xE3)
      v10 = -227;
    else
      v10 = 397;
    v11 = (float)(v9 ^ (v9 >> 18));
    v12 = *(_DWORD *)&v2[4 * v10 + 4 * v5] ^ ((v4 & 0x7FFFFFFE | *(_DWORD *)&v2[4 * v5] & 0x80000000) >> 1) ^ (v4 << 31 >> 31) & 0x9908B0DF;
    v13 = ((v12 ^ (v12 >> 11)) << 7) & 0x9D2C5680 ^ v12 ^ (v12 >> 11);
    v14 = (float)((v13 << 15) & 0xEFC60000 ^ v13 ^ (((v13 << 15) & 0xEFC60000 ^ v13) >> 18));
    v15 = (float)((float)(v11 * 2.3283e-10) * 2.0) + -1.0;
    v16 = (float)((float)((float)(v14 * 2.3283e-10) * 2.0) + -1.0)
        * (float)((float)((float)(v14 * 2.3283e-10) * 2.0) + -1.0);
    v17 = v16 + (float)(v15 * v15);
    *(_DWORD *)&v2[v6] = v12;
  }
  while (v17 > 1.0 || v17 == 0.0);
  *((_QWORD *)this + 313) = v3;
  return (float)((float)(v15 * sqrtf((float)(logf(v16 + (float)(v15 * v15)) * -2.0) / v17)) * a2) + 0.0;
}

uint64_t GeomUtils::DistortRadialLiteInternal(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5, int a6, double a7)
{
  double v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  __int128 *v29;
  _OWORD *v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  _OWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  double *v44;
  uint64_t v45;
  double v46;
  double v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  double *v51;
  unint64_t v52;
  uint64_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t *v57;
  float64x2_t *v58;
  unint64_t v59;
  float64x2_t v60;
  float64x2_t *v61;
  float64x2_t v62;
  uint64_t v63;
  double *v64;
  double *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  float64x2_t *v71;
  unint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  double *v78;
  double *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  float64x2_t *v84;
  float64x2_t v85;
  double v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  float64x2_t v95;
  int8x16_t *v96;
  unint64_t v97;
  float64x2_t *v98;
  float64x2_t v99;
  float64x2_t v100;
  unint64_t v101;
  double *v102;
  double *v103;
  unint64_t v104;
  const char *v105;
  const char *v106;
  const char *v107;
  double v108;
  unint64_t v109;
  uint64_t v110;
  float64x2_t *v111;
  unint64_t v112;
  float64x2_t *v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  unint64_t v118;
  double *v119;
  double *v120;
  unint64_t v121;
  double v122;
  double v123;
  char v124;
  unsigned int v125;
  double v126;
  unsigned int v127;
  uint64_t j;
  BOOL v129;
  unsigned int v130;
  double v131;
  uint64_t v132;
  char v133;
  double v134;
  unsigned int v135;
  unsigned int v136;
  uint64_t i;
  unsigned int v138;
  double v139;
  uint64_t v140;
  double *v141;
  uint64_t v142;
  int v143;
  unsigned int v144;
  unsigned int v145;
  double v146;
  int v147;
  int v148;
  double v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  int v153;
  unsigned int v154;
  double v155;
  int v156;
  double v157;
  uint64_t v158;
  double v159;
  unsigned int v160;
  uint64_t v161;
  double v162;
  unsigned int v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  double *v168;
  double *v169;
  double *v170;
  double v171;
  double v172;
  double v173;
  unint64_t k;
  unint64_t m;
  unsigned int v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  float64x2_t *v180;
  float64x2_t *v181;
  float64x2_t *v182;
  uint64_t v183;
  float64x2_t v184;
  unint64_t n;
  unsigned int v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char v190;
  int v192;
  int v193;
  int v194;
  uint64_t v195;
  int v196;
  uint64_t v197;
  BOOL v199;
  int v203;
  _DWORD v204[3];

  if (*(_DWORD *)(a1 + 16) != 2)
    __assert_rtn("DistortRadialLiteInternal", "GeomUtils.cpp", 540, "pts.Rows() == 2");
  v7 = a7;
  if (a5)
    v10 = *(_QWORD *)(a2 + 32);
  else
    v10 = *(_QWORD *)(a2 + 40);
  if (a5)
    v11 = *(_QWORD *)(a2 + 40);
  else
    v11 = *(_QWORD *)(a2 + 32);
  v12 = *(unsigned int *)(a2 + 24);
  v13 = *(unsigned int *)(a1 + 20);
  v197 = *(int *)(a1 + 20);
  v196 = a5;
  if (!(_DWORD)v197)
  {
    v199 = 0;
    v14 = 0;
    goto LABEL_14;
  }
  v14 = operator new[]();
  v15 = *(unsigned int *)(a1 + 20);
  v199 = (_DWORD)v13 != 0;
  if (!(_DWORD)v15)
  {
    LOBYTE(a5) = v196;
    v7 = a7;
LABEL_14:
    v203 = 0;
    v16 = 0;
    v19 = 0;
    v20 = 0;
    memset(v204, 0, sizeof(v204));
    v18 = 1;
    v17 = 0;
    if ((a5 & 1) == 0)
      goto LABEL_36;
    goto LABEL_15;
  }
  v195 = 8 * v15;
  v16 = operator new[]();
  LODWORD(v17) = *(_DWORD *)(a1 + 20);
  v204[0] = v15 != 0;
  v18 = 2 * (_DWORD)v17 == 0;
  v203 = 2 * v17;
  if (2 * (_DWORD)v17)
    *(_QWORD *)&v204[1] = operator new[]();
  else
    *(_QWORD *)&v204[1] = 0;
  v20 = *(_DWORD *)(a1 + 20);
  v19 = v195;
  v7 = a7;
  v17 = v17;
  if ((v196 & 1) == 0)
  {
LABEL_36:
    if (v20)
    {
      v43 = *(_DWORD *)(a1 + 16);
      if (v43)
      {
        v44 = *(double **)(a1 + 8);
        v45 = *(uint64_t *)a2;
        v46 = -*(double *)(a2 + 216);
        if (v43 == 1)
        {
          if ((_DWORD)v17)
          {
            **(double **)&v204[1] = *v44 + v46 * *(double *)&v45;
            __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
          }
        }
        else
        {
          v47 = -*(double *)(a2 + 224);
          if ((unint64_t)v20 - 1 >= v17)
            v48 = v17;
          else
            v48 = v20 - 1;
          v49 = 0;
          if (v48 >= 0x18)
          {
            v50 = 8 * v17 + *(_QWORD *)&v204[1];
            v51 = &v44[v20];
            if ((unint64_t)(v50 - (_QWORD)v51) >= 0x20
              && (unint64_t)(v50 - (_QWORD)v44) >= 0x20
              && (unint64_t)v51 - *(_QWORD *)&v204[1] >= 0x20
              && *(_QWORD *)&v204[1] - (_QWORD)v44 >= 0x20uLL)
            {
              v52 = v48 + 1;
              v53 = (v48 + 1) & 3;
              if (!v53)
                v53 = 4;
              v54 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v46, 0);
              v55 = (float64x2_t)vdupq_lane_s64(v45, 0);
              v49 = v52 - v53;
              v56 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v47, 0);
              v57 = (float64x2_t *)(v44 + 2);
              v58 = *(float64x2_t **)&v204[1];
              v59 = v49;
              do
              {
                v60 = vmlaq_f64(*v57, v55, v54);
                *v58 = vmlaq_f64(v57[-1], v55, v54);
                v58[1] = v60;
                v61 = (float64x2_t *)((char *)v58 + 8 * v17);
                v62 = vmlaq_f64(*(float64x2_t *)((char *)v57 + 8 * v20), v55, v56);
                *v61 = vmlaq_f64(*(float64x2_t *)((char *)v57 + 8 * v20 - 16), v55, v56);
                v61[1] = v62;
                v57 += 2;
                v58 += 2;
                v59 -= 4;
              }
              while (v59);
            }
          }
          v63 = 0;
          v64 = &v44[v49 + v20];
          v65 = &v44[v49];
          v66 = *(_QWORD *)&v204[1] + 8 * v49 + 8 * v17;
          v67 = *(_QWORD *)&v204[1] + 8 * v49;
          v68 = v20 - v49;
          v69 = v17 - v49;
          while (v69 != v63)
          {
            v70 = 8 * v63;
            *(double *)(v67 + v70) = v65[v63] + v46 * *(double *)&v45;
            *(double *)(v66 + v70) = v64[v63++] + v47 * *(double *)&v45;
            if (v68 == v63)
              goto LABEL_54;
          }
        }
        v194 = 120;
      }
      else
      {
        v194 = 126;
      }
      __assert_rtn("operator()", "Matrix.hpp", v194, "row < m_rows && col < m_cols");
    }
    goto LABEL_54;
  }
LABEL_15:
  if (v20)
  {
    v21 = *(_DWORD *)(a1 + 16);
    if (v21)
    {
      v22 = *(_QWORD **)(a1 + 8);
      if (v21 == 1)
      {
        if ((_DWORD)v17)
        {
          **(_QWORD **)&v204[1] = *v22;
          __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
        }
      }
      else
      {
        if ((unint64_t)v20 - 1 >= v17)
          v23 = v17;
        else
          v23 = v20 - 1;
        v24 = 0;
        if (v23 >= 0x1C)
        {
          v25 = 8 * v17 + *(_QWORD *)&v204[1];
          v26 = &v22[v20];
          if ((unint64_t)(v25 - (_QWORD)v26) >= 0x20
            && (unint64_t)(v25 - (_QWORD)v22) >= 0x20
            && (unint64_t)v26 - *(_QWORD *)&v204[1] >= 0x20
            && *(_QWORD *)&v204[1] - (_QWORD)v22 >= 0x20uLL)
          {
            v27 = v23 + 1;
            v28 = (v23 + 1) & 3;
            if (!v28)
              v28 = 4;
            v24 = v27 - v28;
            v29 = (__int128 *)(v22 + 2);
            v30 = *(_OWORD **)&v204[1];
            v31 = v24;
            do
            {
              v32 = *v29;
              *v30 = *(v29 - 1);
              v30[1] = v32;
              v33 = *(__int128 *)((char *)v29 + 8 * v20);
              v34 = (_OWORD *)((char *)v30 + 8 * v17);
              *v34 = *(__int128 *)((char *)v29 + 8 * v20 - 16);
              v34[1] = v33;
              v29 += 2;
              v30 += 2;
              v31 -= 4;
            }
            while (v31);
          }
        }
        v35 = 0;
        v36 = &v22[v24 + v20];
        v37 = &v22[v24];
        v38 = *(_QWORD *)&v204[1] + 8 * v24 + 8 * v17;
        v39 = *(_QWORD *)&v204[1] + 8 * v24;
        v40 = v20 - v24;
        v41 = v17 - v24;
        while (v41 != v35)
        {
          v42 = 8 * v35;
          *(_QWORD *)(v39 + v42) = v37[v35];
          *(_QWORD *)(v38 + v42) = v36[v35++];
          if (v40 == v35)
            goto LABEL_54;
        }
      }
      v193 = 120;
    }
    else
    {
      v193 = 126;
    }
    __assert_rtn("operator()", "Matrix.hpp", v193, "row < m_rows && col < m_cols");
  }
LABEL_54:
  if (v18)
  {
    v71 = 0;
    goto LABEL_68;
  }
  v72 = v19;
  v73 = v203;
  v74 = operator new[]();
  v7 = a7;
  if (v203 < 1)
  {
    v19 = v72;
LABEL_67:
    v71 = (float64x2_t *)v74;
    goto LABEL_68;
  }
  v75 = *(_QWORD *)&v204[1];
  v76 = *(_QWORD *)&v204[1] + 8 * v203;
  if (v76 <= *(_QWORD *)&v204[1] + 8)
    v76 = *(_QWORD *)&v204[1] + 8;
  v77 = v76 + ~*(_QWORD *)&v204[1];
  v78 = (double *)v74;
  v79 = *(double **)&v204[1];
  v19 = v72;
  if (v77 < 0x18)
  {
    do
    {
LABEL_64:
      v86 = *v79++;
      *v78++ = v86 * v86;
    }
    while ((unint64_t)v79 < v75 + 8 * v73);
    goto LABEL_67;
  }
  v80 = 0;
  v81 = (v77 >> 3) + 1;
  v82 = 8 * (v81 & 0x3FFFFFFFFFFFFFFCLL);
  v71 = (float64x2_t *)v74;
  v78 = (double *)(v74 + v82);
  v83 = v81 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v84 = (float64x2_t *)(v74 + v80);
    v85 = vmulq_f64(*(float64x2_t *)(*(_QWORD *)&v204[1] + v80 + 16), *(float64x2_t *)(*(_QWORD *)&v204[1] + v80 + 16));
    *v84 = vmulq_f64(*(float64x2_t *)(*(_QWORD *)&v204[1] + v80), *(float64x2_t *)(*(_QWORD *)&v204[1] + v80));
    v84[1] = v85;
    v80 += 32;
    v83 -= 4;
  }
  while (v83);
  if (v81 != (v81 & 0x3FFFFFFFFFFFFFFCLL))
  {
    v75 = *(_QWORD *)&v204[1];
    v79 = (double *)(*(_QWORD *)&v204[1] + v82);
    v73 = v203;
    goto LABEL_64;
  }
LABEL_68:
  if ((a4 & 1) != 0)
  {
    if ((int)v13 >= 1)
    {
      if (v17 >= v13)
        v87 = v13;
      else
        v87 = v17;
      v88 = v13 - 1;
      if (v13 - 1 >= v17)
        v88 = v17;
      if (v88 >= v13)
        v88 = v13;
      if (v88 >= 4)
      {
        v93 = v88 + 1;
        v94 = v93 & 3;
        if ((v93 & 3) == 0)
          v94 = 4;
        v89 = v93 - v94;
        v95 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v7, 0);
        v96 = (int8x16_t *)(v14 + 16);
        v97 = v89;
        v98 = v71;
        do
        {
          v99 = vsqrtq_f64(vaddq_f64(*v98, *(float64x2_t *)((char *)v98 + 8 * v17)));
          v100 = vsqrtq_f64(vaddq_f64(v98[1], *(float64x2_t *)((char *)v98 + 8 * v17 + 16)));
          v96[-1] = vbslq_s8((int8x16_t)vcgtq_f64(v95, v99), (int8x16_t)v99, (int8x16_t)v95);
          *v96 = vbslq_s8((int8x16_t)vcgtq_f64(v95, v100), (int8x16_t)v100, (int8x16_t)v95);
          v98 += 2;
          v96 += 2;
          v97 -= 4;
        }
        while (v97);
      }
      else
      {
        v89 = 0;
      }
      v101 = v87 - v89;
      v102 = &v71->f64[v89];
      v103 = (double *)(v14 + 8 * v89);
      v104 = v13 - v89;
      v105 = "row < m_rows && col < m_cols";
      v106 = "Matrix.hpp";
      v107 = "operator()";
      while (v101)
      {
        v108 = sqrt(*v102 + v102[v17]);
        if (v108 >= v7)
          v108 = v7;
        *v103++ = v108;
        --v101;
        ++v102;
        if (!--v104)
          goto LABEL_106;
      }
LABEL_251:
      v192 = 120;
      goto LABEL_252;
    }
  }
  else if ((int)v13 >= 1)
  {
    if (v17 >= v13)
      v90 = v13;
    else
      v90 = v17;
    v91 = v13 - 1;
    if (v13 - 1 >= v17)
      v91 = v17;
    if (v91 >= v13)
      v91 = v13;
    if (v91 > 3)
    {
      v109 = v91 + 1;
      v110 = v109 & 3;
      if ((v109 & 3) == 0)
        v110 = 4;
      v92 = v109 - v110;
      v111 = (float64x2_t *)(v14 + 16);
      v112 = v92;
      v113 = v71;
      do
      {
        v114 = *(float64x2_t *)((char *)v113 + 8 * v17);
        v115 = *(float64x2_t *)((char *)v113 + 8 * v17 + 16);
        v116 = *v113;
        v117 = v113[1];
        v113 += 2;
        v111[-1] = vsqrtq_f64(vaddq_f64(v114, v116));
        *v111 = vsqrtq_f64(vaddq_f64(v115, v117));
        v111 += 2;
        v112 -= 4;
      }
      while (v112);
    }
    else
    {
      v92 = 0;
    }
    v118 = v90 - v92;
    v119 = &v71->f64[v92];
    v120 = (double *)(v14 + 8 * v92);
    v121 = v13 - v92;
    v105 = "row < m_rows && col < m_cols";
    v106 = "Matrix.hpp";
    v107 = "operator()";
    while (v118)
    {
      v122 = v119[v17];
      v123 = *v119++;
      *v120++ = sqrt(v122 + v123);
      --v118;
      if (!--v121)
        goto LABEL_106;
    }
    goto LABEL_251;
  }
LABEL_106:
  if (!a6)
  {
    if ((_DWORD)v13)
    {
      if (v19 < 8 * v13)
      {
        v133 = LOBYTE(v204[0]) ^ 1;
        if (!v16)
          v133 = 1;
        if ((v133 & 1) == 0)
          MEMORY[0x20BD36480](v16, 0x1000C8000313F17);
        v204[0] = 1;
        v16 = operator new[]();
      }
      if ((int)v13 < 1)
      {
        v141 = (double *)a2;
        v150 = v197;
        goto LABEL_199;
      }
      v134 = *(double *)(v11 + 8 * (int)v12 - 8);
      v135 = v12 - 2;
      v136 = v12 - 1;
      if ((int)v12 - 1 >= 100)
      {
        v151 = 0;
        v141 = (double *)a2;
        do
        {
          v155 = *(double *)(v14 + 8 * v151);
          v154 = v135;
          if (v155 < v134)
          {
            v152 = 0;
            v153 = v136;
            while (1)
            {
              v156 = (v153 + v152) >> 1;
              v157 = *(double *)(v11 + 8 * v156);
              if (v157 == v155)
                break;
              if (v157 <= v155)
                v152 = v156 + 1;
              else
                v153 = v156 - 1;
              if (v152 > v153)
                goto LABEL_169;
            }
            v152 = (v153 + v152) >> 1;
LABEL_169:
            if (v153 >= v152)
              v153 = v152;
            v154 = v153 & ~(v153 >> 31);
          }
          if (v136 <= v154)
            v154 = v135;
          *(double *)(v16 + 8 * v151++) = *(double *)(v10 + 8 * v154)
                                        + (*(double *)(v10 + 8 * (v154 + 1)) - *(double *)(v10 + 8 * v154))
                                        * ((v155 - *(double *)(v11 + 8 * v154))
                                         / (*(double *)(v11 + 8 * (v154 + 1)) - *(double *)(v11 + 8 * v154)));
        }
        while (v151 != v13);
        goto LABEL_198;
      }
      if ((int)v12 <= 0)
      {
        v161 = 0;
        v141 = (double *)a2;
        do
        {
          v162 = *(double *)(v14 + v161);
          if (v162 >= v134)
            v163 = v135;
          else
            v163 = 0;
          if (v136 <= v163)
            v163 = v135;
          *(double *)(v16 + v161) = *(double *)(v10 + 8 * v163)
                                  + (*(double *)(v10 + 8 * (v163 + 1)) - *(double *)(v10 + 8 * v163))
                                  * ((v162 - *(double *)(v11 + 8 * v163))
                                   / (*(double *)(v11 + 8 * (v163 + 1)) - *(double *)(v11 + 8 * v163)));
          v161 += 8;
        }
        while (8 * v13 != v161);
        goto LABEL_198;
      }
      for (i = 0; i != v13; ++i)
      {
        v139 = *(double *)(v14 + 8 * i);
        v138 = v12 - 2;
        if (v139 < v134)
        {
          v140 = 0;
          while (*(double *)(v11 + 8 * v140) <= v139)
          {
            if (v12 == ++v140)
            {
              LODWORD(v140) = 0;
              break;
            }
          }
          v129 = (_DWORD)v140 != 0;
          v138 = v140 - 1;
          if (!v129)
            v138 = 0;
        }
        if (v136 <= v138)
          v138 = v12 - 2;
        *(double *)(v16 + 8 * i) = *(double *)(v10 + 8 * v138)
                                 + (*(double *)(v10 + 8 * (v138 + 1)) - *(double *)(v10 + 8 * v138))
                                 * ((v139 - *(double *)(v11 + 8 * v138))
                                  / (*(double *)(v11 + 8 * (v138 + 1)) - *(double *)(v11 + 8 * v138)));
      }
      goto LABEL_148;
    }
    v105 = "xq.GetNumOfPoints() > 0";
    v192 = 1285;
    v106 = "Algo.hpp";
    v107 = "Interp1WithExtrap";
LABEL_252:
    __assert_rtn(v107, v106, v192, v105);
  }
  if (v13 <= 1)
  {
    v105 = "xqSorted.GetNumOfPoints() > 1";
    v192 = 1381;
    v106 = "Algo.hpp";
    v107 = "Interp1SortedWithExtrap";
    goto LABEL_252;
  }
  if (v19 < 8 * v13)
  {
    v124 = LOBYTE(v204[0]) ^ 1;
    if (!v16)
      v124 = 1;
    if ((v124 & 1) == 0)
      MEMORY[0x20BD36480](v16, 0x1000C8000313F17);
    v204[0] = 1;
    v16 = operator new[]();
  }
  v125 = v12 - 1;
  v126 = *(double *)(v11 + 8 * (v12 - 1));
  v127 = v12 - 2;
  if ((int)v12 - 1 >= 100)
  {
    v142 = 0;
    v143 = 0;
    v141 = (double *)a2;
    do
    {
      v146 = *(double *)(v14 + 8 * v142);
      v144 = v127;
      if (v146 < v126)
      {
        v147 = v125;
        if ((int)v125 >= v143)
        {
          while (1)
          {
            v148 = (v147 + v143) >> 1;
            v149 = *(double *)(v11 + 8 * v148);
            if (v149 == v146)
              break;
            if (v149 <= v146)
              v143 = v148 + 1;
            else
              v147 = v148 - 1;
            if (v143 > v147)
              goto LABEL_151;
          }
          v143 = (v147 + v143) >> 1;
        }
LABEL_151:
        if (v147 < v143)
          v143 = v147;
        v144 = v143 & ~(v143 >> 31);
      }
      if (v125 <= v144)
        v145 = v127;
      else
        v145 = v144;
      *(double *)(v16 + 8 * v142++) = *(double *)(v10 + 8 * v145)
                                    + (*(double *)(v10 + 8 * (v145 + 1)) - *(double *)(v10 + 8 * v145))
                                    * ((v146 - *(double *)(v11 + 8 * v145))
                                     / (*(double *)(v11 + 8 * (v145 + 1)) - *(double *)(v11 + 8 * v145)));
      v143 = v144;
    }
    while (v142 != v13);
    goto LABEL_198;
  }
  if ((int)v12 <= 0)
  {
    v158 = 0;
    v141 = (double *)a2;
    do
    {
      v159 = *(double *)(v14 + 8 * v158);
      if (v159 >= v126)
        v160 = v127;
      else
        v160 = 0;
      if (v125 <= v160)
        v160 = v127;
      *(double *)(v16 + 8 * v158++) = *(double *)(v10 + 8 * v160)
                                    + (*(double *)(v10 + 8 * (v160 + 1)) - *(double *)(v10 + 8 * v160))
                                    * ((v159 - *(double *)(v11 + 8 * v160))
                                     / (*(double *)(v11 + 8 * (v160 + 1)) - *(double *)(v11 + 8 * v160)));
    }
    while (v13 != v158);
    goto LABEL_198;
  }
  for (j = 0; j != v13; ++j)
  {
    v131 = *(double *)(v14 + 8 * j);
    v130 = v12 - 2;
    if (v131 < v126)
    {
      v132 = 0;
      while (*(double *)(v11 + 8 * v132) <= v131)
      {
        if (v12 == ++v132)
        {
          LODWORD(v132) = 0;
          break;
        }
      }
      v129 = (_DWORD)v132 != 0;
      v130 = v132 - 1;
      if (!v129)
        v130 = 0;
    }
    if (v125 <= v130)
      v130 = v12 - 2;
    *(double *)(v16 + 8 * j) = *(double *)(v10 + 8 * v130)
                             + (*(double *)(v10 + 8 * (v130 + 1)) - *(double *)(v10 + 8 * v130))
                             * ((v131 - *(double *)(v11 + 8 * v130))
                              / (*(double *)(v11 + 8 * (v130 + 1)) - *(double *)(v11 + 8 * v130)));
  }
LABEL_148:
  v141 = (double *)a2;
LABEL_198:
  v150 = v197;
LABEL_199:
  v164 = operator new[]();
  if ((int)v13 < 1)
    goto LABEL_234;
  v165 = v16 + 8 * v150;
  v166 = v16 + 8;
  if (v165 > v16 + 8)
    v166 = v16 + 8 * v150;
  v167 = v166 + ~v16;
  v168 = (double *)v164;
  v169 = (double *)v14;
  v170 = (double *)v16;
  if (v167 >= 0x28)
  {
    v168 = (double *)v164;
    v169 = (double *)v14;
    v170 = (double *)v16;
    if ((unint64_t)(v164 - v16) >= 0x20)
    {
      v168 = (double *)v164;
      v169 = (double *)v14;
      v170 = (double *)v16;
      if ((unint64_t)(v164 - v14) >= 0x20)
      {
        v178 = (v167 >> 3) + 1;
        v179 = 8 * (v178 & 0x3FFFFFFFFFFFFFFCLL);
        v169 = (double *)(v14 + v179);
        v180 = (float64x2_t *)(v16 + 16);
        v181 = (float64x2_t *)(v14 + 16);
        v182 = (float64x2_t *)(v164 + 16);
        v183 = v178 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v184 = vdivq_f64(*v180, *v181);
          v182[-1] = vdivq_f64(v180[-1], v181[-1]);
          *v182 = v184;
          v180 += 2;
          v181 += 2;
          v182 += 2;
          v183 -= 4;
        }
        while (v183);
        if (v178 == (v178 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_204;
        v168 = (double *)(v164 + v179);
        v170 = (double *)(v16 + v179);
      }
    }
  }
  do
  {
    v171 = *v170++;
    v172 = v171;
    v173 = *v169++;
    *v168++ = v172 / v173;
  }
  while ((unint64_t)v170 < v165);
LABEL_204:
  for (k = 0; k != v13; ++k)
  {
    if (*(double *)(v14 + 8 * k) == 0.0)
    {
      if (k >= v13)
        goto LABEL_267;
      *(_QWORD *)(v164 + 8 * k) = 0x3FF0000000000000;
    }
  }
  if (v17 <= v150)
  {
    for (m = 0; m != v13; ++m)
    {
      if (v17 == m)
        goto LABEL_267;
      v176 = *(_DWORD *)(a3 + 16);
      if (!v176)
        goto LABEL_253;
      v177 = *(unsigned int *)(a3 + 20);
      if (m >= v177)
        goto LABEL_253;
      *(double *)(*(_QWORD *)(a3 + 8) + 8 * m) = *(double *)(*(_QWORD *)&v204[1] + 8 * m) * *(double *)(v164 + 8 * m);
      if (v176 < 2)
        goto LABEL_253;
      *(double *)(*(_QWORD *)(a3 + 8) + 8 * v177 + 8 * m) = *(double *)(v164 + 8 * m)
                                                          * *(double *)(*(_QWORD *)&v204[1] + 8 * v17 + 8 * m);
    }
    if (!v196)
      goto LABEL_234;
LABEL_231:
    v188 = 0;
    v189 = 8 * v177;
    while (v189 != v188)
    {
      *(double *)(*(_QWORD *)(a3 + 8) + v188) = *(double *)(*(_QWORD *)(a3 + 8) + v188) + v141[27] * *v141;
      *(double *)(*(_QWORD *)(a3 + 8) + v189 + v188) = *(double *)(*(_QWORD *)(a3 + 8) + v189 + v188) + v141[28] * *v141;
      v188 += 8;
      if (8 * v13 == v188)
        goto LABEL_234;
    }
LABEL_267:
    __assert_rtn("operator()", "Matrix.hpp", 120, "row < m_rows && col < m_cols");
  }
  for (n = 0; n != v13; ++n)
  {
    if (v17 == n)
      goto LABEL_267;
    v186 = *(_DWORD *)(a3 + 16);
    if (!v186
      || (v187 = *(unsigned int *)(a3 + 20), n >= v187)
      || (*(double *)(*(_QWORD *)(a3 + 8) + 8 * n) = *(double *)(*(_QWORD *)&v204[1] + 8 * n)
                                                   * *(double *)(v164 + 8 * n),
          v186 <= 1))
    {
LABEL_253:
      __assert_rtn("operator()", "Matrix.hpp", 120, "row < m_rows && col < m_cols");
    }
    *(double *)(*(_QWORD *)(a3 + 8) + 8 * v187 + 8 * n) = *(double *)(v164 + 8 * n)
                                                        * *(double *)(*(_QWORD *)&v204[1] + 8 * v17 + 8 * n);
  }
  LODWORD(v177) = v187;
  if (v196)
    goto LABEL_231;
LABEL_234:
  if ((_DWORD)v150 && v164)
    MEMORY[0x20BD36480](v164, 0x1000C8000313F17);
  if (v71)
  {
    if (!v203)
      goto LABEL_243;
    MEMORY[0x20BD36480](v71, 0x1000C8000313F17);
  }
  if (v203 && *(_QWORD *)&v204[1])
    MEMORY[0x20BD36480](*(_QWORD *)&v204[1], 0x1000C8000313F17);
LABEL_243:
  if (v16 && v204[0])
    MEMORY[0x20BD36480](v16, 0x1000C8000313F17);
  v190 = !v199;
  if (!v14)
    v190 = 1;
  if ((v190 & 1) == 0)
    MEMORY[0x20BD36480](v14, 0x1000C8000313F17);
  return 0;
}

void sub_20B644468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, int a20,uint64_t a21)
{
  uint64_t v21;
  uint64_t v22;

  if (v22 && a20)
    MEMORY[0x20BD36480](v22, 0x1000C8000313F17);
  if (v21)
  {
    if (a14)
      MEMORY[0x20BD36480](v21, 0x1000C8000313F17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t GeomUtils::DistortRadialLite<double>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  GeomUtils::DistortRadialLiteInternal(a1, a2, a3, 0, a4, a5, 0.0);
  return 0;
}

uint64_t GeomUtils::DistortRadialLite<double>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, double a6)
{
  GeomUtils::DistortRadialLiteInternal(a1, a2, a3, 1, a4, a5, a6);
  return 0;
}

void GeomUtils::ToHomg(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  size_t v7;
  unint64_t v8;

  v4 = *(unsigned int *)(a1 + 20);
  *(_QWORD *)a2 = &off_24C4213F8;
  if ((_DWORD)v4)
    v5 = operator new[]();
  else
    v5 = 0;
  *(_BYTE *)(a2 + 24) = (_DWORD)v4 != 0;
  *(_QWORD *)(a2 + 32) = 24 * v4;
  *(_DWORD *)(a2 + 16) = 3;
  *(_DWORD *)(a2 + 20) = v4;
  *(_QWORD *)a2 = &off_24C421398;
  *(_QWORD *)(a2 + 8) = v5;
  v6 = *(const void **)(a1 + 8);
  v7 = 8 * (2 * v4);
  memcpy((void *)v5, v6, v7);
  if ((_DWORD)v4)
  {
    v8 = v5 + 8 * v4 + v7;
    if (v8 <= v7 + v5 + 8)
      v8 = v7 + v5 + 8;
    memset_pattern16((void *)(v5 + 8 * (2 * v4)), &unk_20B6D2B00, ((v8 + ~v5 - v7) & 0xFFFFFFFFFFFFFFF8) + 8);
  }
}

uint64_t MatrixNxPts<3u,double>::~MatrixNxPts(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C4213F8;
  if (*(_QWORD *)(a1 + 8) && *(_BYTE *)(a1 + 24))
  {
    MEMORY[0x20BD36480]();
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 24) = 0;
  }
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void MatrixNxPts<3u,double>::~MatrixNxPts(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C4213F8;
  if (*(_QWORD *)(a1 + 8) && *(_BYTE *)(a1 + 24))
  {
    MEMORY[0x20BD36480]();
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 24) = 0;
  }
  *(_QWORD *)(a1 + 16) = 0;
  JUMPOUT(0x20BD36498);
}

double *GeomUtils::ToNonHomg@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  double *result;
  float64x2_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  double *v13;
  uint64_t v14;
  float64x2_t *v15;
  float64_t *v16;
  char *v17;
  unint64_t v18;
  char *v19;
  double *v20;
  BOOL v22;
  BOOL v24;
  BOOL v26;
  BOOL v28;
  BOOL v30;
  BOOL v32;
  BOOL v33;
  float64x2_t *v34;
  float64x2_t *v35;
  uint64_t v36;
  float64x2_t v37;
  int v38;

  v4 = *(unsigned int *)(a1 + 20);
  *(_QWORD *)a2 = &off_24C4213F8;
  v5 = (2 * v4);
  if ((_DWORD)v5)
    result = (double *)operator new[]();
  else
    result = 0;
  *(_DWORD *)(a2 + 16) = 2;
  *(_DWORD *)(a2 + 20) = v4;
  *(_BYTE *)(a2 + 24) = (_DWORD)v5 != 0;
  *(_QWORD *)(a2 + 32) = 16 * v4;
  *(_QWORD *)a2 = &off_24C421378;
  *(_QWORD *)(a2 + 8) = result;
  if ((_DWORD)v4)
  {
    v7 = *(float64x2_t **)(a1 + 8);
    v8 = v5;
    v9 = 8 * v4;
    if (v4 < 0x14)
    {
      LODWORD(v10) = 0;
      goto LABEL_58;
    }
    LODWORD(v10) = 0;
    v11 = (v4 - 1);
    v12 = &result[v11 + 1];
    v13 = &result[(unint64_t)v9 / 8];
    v14 = v11 * 8 + 8 + v9;
    v15 = (float64x2_t *)((char *)result + v14);
    v16 = &v7->f64[v11 + 1];
    v17 = (char *)v7 + v8 * 8;
    v18 = (unint64_t)&v7->f64[v11 + 1 + v8];
    v19 = (char *)v7 + v9;
    v20 = (double *)((char *)v7->f64 + v14);
    v22 = result < v16 && v7 < (float64x2_t *)v12;
    v24 = (unint64_t)result < v18 && v17 < (char *)v12;
    v26 = result < v20 && v19 < (char *)v12;
    v28 = v13 < v16 && v7 < v15;
    v30 = (unint64_t)v13 < v18 && v17 < (char *)v15;
    v32 = v13 < v20 && v19 < (char *)v15;
    v33 = v13 >= v12 || result >= (double *)v15;
    if (!v33 || v22 || v24 || v26 || v28 || v30 || v32)
      goto LABEL_58;
    v10 = v4 & 0xFFFFFFFE;
    v34 = (float64x2_t *)((char *)v7 + 8 * v10);
    v35 = (float64x2_t *)result;
    v36 = v10;
    do
    {
      v37 = *(float64x2_t *)((char *)v7 + 8 * v5);
      *v35 = vdivq_f64(*v7, v37);
      *(float64x2_t *)((char *)v35++ + 8 * v4) = vdivq_f64(*(float64x2_t *)((char *)v7++ + 8 * v4), v37);
      v36 -= 2;
    }
    while (v36);
    if (v10 != v4)
    {
      result += v10;
      v7 = v34;
LABEL_58:
      v38 = v4 - v10;
      do
      {
        *result = v7->f64[0] / v7->f64[v5];
        result[v4] = v7->f64[v4] / v7->f64[v5];
        ++result;
        v7 = (float64x2_t *)((char *)v7 + 8);
        --v38;
      }
      while (v38);
    }
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  double *result;
  float64x2_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  double *v13;
  uint64_t v14;
  float64x2_t *v15;
  float64_t *v16;
  char *v17;
  unint64_t v18;
  char *v19;
  double *v20;
  BOOL v22;
  BOOL v24;
  BOOL v26;
  BOOL v28;
  BOOL v30;
  BOOL v32;
  BOOL v33;
  float64x2_t *v34;
  float64x2_t *v35;
  uint64_t v36;
  float64x2_t v37;
  int v38;

  v4 = *(unsigned int *)(a1 + 20);
  *(_QWORD *)a2 = &off_24C4213F8;
  v5 = (2 * v4);
  if ((_DWORD)v5)
    result = (double *)operator new[]();
  else
    result = 0;
  *(_DWORD *)(a2 + 16) = 2;
  *(_DWORD *)(a2 + 20) = v4;
  *(_BYTE *)(a2 + 24) = (_DWORD)v5 != 0;
  *(_QWORD *)(a2 + 32) = 16 * v4;
  *(_QWORD *)a2 = &off_24C421378;
  *(_QWORD *)(a2 + 8) = result;
  if ((_DWORD)v4)
  {
    v7 = *(float64x2_t **)(a1 + 8);
    v8 = v5;
    v9 = 8 * v4;
    if (v4 < 0x14)
    {
      LODWORD(v10) = 0;
      goto LABEL_58;
    }
    LODWORD(v10) = 0;
    v11 = (v4 - 1);
    v12 = &result[v11 + 1];
    v13 = &result[(unint64_t)v9 / 8];
    v14 = v11 * 8 + 8 + v9;
    v15 = (float64x2_t *)((char *)result + v14);
    v16 = &v7->f64[v11 + 1];
    v17 = (char *)v7 + v8 * 8;
    v18 = (unint64_t)&v7->f64[v11 + 1 + v8];
    v19 = (char *)v7 + v9;
    v20 = (double *)((char *)v7->f64 + v14);
    v22 = result < v16 && v7 < (float64x2_t *)v12;
    v24 = (unint64_t)result < v18 && v17 < (char *)v12;
    v26 = result < v20 && v19 < (char *)v12;
    v28 = v13 < v16 && v7 < v15;
    v30 = (unint64_t)v13 < v18 && v17 < (char *)v15;
    v32 = v13 < v20 && v19 < (char *)v15;
    v33 = v13 >= v12 || result >= (double *)v15;
    if (!v33 || v22 || v24 || v26 || v28 || v30 || v32)
      goto LABEL_58;
    v10 = v4 & 0xFFFFFFFE;
    v34 = (float64x2_t *)((char *)v7 + 8 * v10);
    v35 = (float64x2_t *)result;
    v36 = v10;
    do
    {
      v37 = *(float64x2_t *)((char *)v7 + 8 * v5);
      *v35 = vdivq_f64(*v7, v37);
      *(float64x2_t *)((char *)v35++ + 8 * v4) = vdivq_f64(*(float64x2_t *)((char *)v7++ + 8 * v4), v37);
      v36 -= 2;
    }
    while (v36);
    if (v10 != v4)
    {
      result += v10;
      v7 = v34;
LABEL_58:
      v38 = v4 - v10;
      do
      {
        *result = v7->f64[0] / v7->f64[v5];
        result[v4] = v7->f64[v4] / v7->f64[v5];
        ++result;
        v7 = (float64x2_t *)((char *)v7 + 8);
        --v38;
      }
      while (v38);
    }
  }
  return result;
}

uint64_t MatrixNxPts<2u,double>::~MatrixNxPts(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C4213F8;
  if (*(_QWORD *)(a1 + 8) && *(_BYTE *)(a1 + 24))
  {
    MEMORY[0x20BD36480]();
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 24) = 0;
  }
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void MatrixNxPts<2u,double>::~MatrixNxPts(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C4213F8;
  if (*(_QWORD *)(a1 + 8) && *(_BYTE *)(a1 + 24))
  {
    MEMORY[0x20BD36480]();
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 24) = 0;
  }
  *(_QWORD *)(a1 + 16) = 0;
  JUMPOUT(0x20BD36498);
}

void GeomUtils::ComputeHomography(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double *v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  unint64_t v9;
  double *v10;
  double *v11;
  unint64_t v12;
  uint64_t v13;
  double v14;
  double *v15;
  uint64_t v16;
  double v17;
  double v18;
  unint64_t v19;
  unint64_t v20;
  double *v21;
  unint64_t v22;
  double v23;
  double *v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  double *v30;
  double *v31;
  uint64_t v32;
  uint64_t v33;
  float64x2_t v34;
  uint64_t v35;
  float64x2_t *v36;
  float64x2_t v37;
  double v38;
  unsigned int v39;
  double v40;
  double v41;
  double v42;
  double v43;
  uint64_t v44;
  double v45;
  unint64_t v46;
  unint64_t v47;
  double *v48;
  double *v49;
  uint64_t v50;
  uint64_t v51;
  float64x2_t *v52;
  float64x2_t *v53;
  uint64_t v54;
  float64x2_t v55;
  double v56;
  unint64_t v57;
  double *v58;
  unint64_t v59;
  double *v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  double *v71;
  uint64_t v72;
  uint64_t v73;
  float64x2_t v74;
  float64x2_t *v75;
  float64x2_t *v76;
  uint64_t v77;
  float64x2_t v78;
  double v79;
  uint64_t v80;
  double v81;
  unint64_t v82;
  unint64_t v83;
  double *v84;
  double *v85;
  uint64_t v86;
  uint64_t v87;
  float64x2_t *v88;
  float64x2_t *v89;
  uint64_t v90;
  float64x2_t v91;
  double v92;
  unint64_t v93;
  double *v94;
  unint64_t v95;
  double *v96;
  uint64_t v97;
  uint64_t v98;
  double v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  double v106;
  double v107;
  double v108;
  double v109;
  uint64_t v110;
  uint64_t v111;
  double v112;
  uint64_t v113;
  double v114;
  char v115[8];
  uint64_t (**v116)();
  uint64_t v117;
  int v118;
  int v119;
  BOOL v120;
  uint64_t v121;
  _QWORD v122[3];
  char v123;
  uint64_t v124;
  double v125[11];

  v2 = a2;
  v3 = a1;
  v125[9] = *(double *)MEMORY[0x24BDAC8D0];
  v4 = *(unsigned int *)(a1 + 20);
  v5 = *(double **)(a2 + 8);
  v6 = *(int *)(a2 + 20);
  v7 = *(unsigned int *)(a2 + 20);
  v8 = &v5[v6];
  if ((int)v6 < 1)
  {
    v18 = (double)(int)v7;
    v38 = 0.0 / (double)(int)v7;
    if (!(_DWORD)v6)
    {
      v39 = 0;
      v40 = v38;
      v41 = v38;
      v42 = v38;
      goto LABEL_77;
    }
    v110 = a2;
    v111 = a1;
    v19 = (unint64_t)&v8[v6];
    v29 = operator new[]();
    v112 = 0.0 / (double)(int)v7;
    v114 = v112;
LABEL_31:
    v44 = operator new[]();
    v45 = 0.0;
    if ((int)v7 < 1)
      goto LABEL_48;
    v46 = 8 * v6 + v29;
    if (v46 <= v29 + 8)
      v46 = v29 + 8;
    v47 = v46 + ~v29;
    v48 = (double *)v29;
    v49 = (double *)v44;
    if (v47 >= 0x18)
    {
      v50 = (v47 >> 3) + 1;
      v51 = 8 * (v50 & 0x3FFFFFFFFFFFFFFCLL);
      v48 = (double *)(v29 + v51);
      v52 = (float64x2_t *)(v44 + 16);
      v53 = (float64x2_t *)(v29 + 16);
      v54 = v50 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v55 = vabsq_f64(*v53);
        v52[-1] = vabsq_f64(v53[-1]);
        *v52 = v55;
        v52 += 2;
        v53 += 2;
        v54 -= 4;
      }
      while (v54);
      if (v50 == (v50 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_40:
        v57 = 8 * v6 + v44;
        v58 = (double *)(v44 + 8);
        if (v57 <= v44 + 8)
          v57 = v44 + 8;
        v59 = v57 + ~v44;
        v45 = 0.0;
        v60 = (double *)v44;
        if (v59 >= 8)
        {
          v61 = (v59 >> 3) + 1;
          v62 = v61 & 0x3FFFFFFFFFFFFFFELL;
          do
          {
            v45 = v45 + *(v58 - 1) + *v58;
            v58 += 2;
            v62 -= 2;
          }
          while (v62);
          if (v61 == (v61 & 0x3FFFFFFFFFFFFFFELL))
          {
LABEL_48:
            MEMORY[0x20BD36480](v44, 0x1000C8000313F17);
            MEMORY[0x20BD36480](v29, 0x1000C8000313F17);
            v64 = operator new[]();
            v65 = v64;
            if ((int)v6 < 1)
              goto LABEL_59;
            v66 = v7;
            v67 = &v5[v7];
            v68 = (unint64_t)(v67 + 1);
            if (v19 > (unint64_t)(v67 + 1))
              v68 = v19;
            v69 = v68 + ~(unint64_t)v5 - v66 * 8;
            if (v69 < 0x38)
            {
              v71 = (double *)v64;
            }
            else
            {
              v70 = v64 - (_QWORD)v67;
              v71 = (double *)v64;
              if (v70 >= 0x20)
              {
                v72 = (v69 >> 3) + 1;
                v73 = 8 * (v72 & 0x3FFFFFFFFFFFFFFCLL);
                v8 = (double *)((char *)v8 + v73);
                v74 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v112, 0);
                v75 = (float64x2_t *)(v64 + 16);
                v76 = (float64x2_t *)&v5[v66 + 2];
                v77 = v72 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v78 = vsubq_f64(*v76, v74);
                  v75[-1] = vsubq_f64(v76[-1], v74);
                  *v75 = v78;
                  v75 += 2;
                  v76 += 2;
                  v77 -= 4;
                }
                while (v77);
                if (v72 == (v72 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_59:
                  v80 = operator new[]();
                  v81 = 0.0;
                  v3 = v111;
                  if ((int)v7 < 1)
                    goto LABEL_76;
                  v82 = 8 * v6 + v65;
                  if (v82 <= v65 + 8)
                    v82 = v65 + 8;
                  v83 = v82 + ~v65;
                  v84 = (double *)v65;
                  v85 = (double *)v80;
                  if (v83 >= 0x18)
                  {
                    v86 = (v83 >> 3) + 1;
                    v87 = 8 * (v86 & 0x3FFFFFFFFFFFFFFCLL);
                    v84 = (double *)(v65 + v87);
                    v88 = (float64x2_t *)(v80 + 16);
                    v89 = (float64x2_t *)(v65 + 16);
                    v90 = v86 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v91 = vabsq_f64(*v89);
                      v88[-1] = vabsq_f64(v89[-1]);
                      *v88 = v91;
                      v88 += 2;
                      v89 += 2;
                      v90 -= 4;
                    }
                    while (v90);
                    if (v86 == (v86 & 0x3FFFFFFFFFFFFFFCLL))
                      goto LABEL_68;
                    v85 = (double *)(v80 + v87);
                  }
                  do
                  {
                    v92 = *v84++;
                    *v85++ = fabs(v92);
                  }
                  while ((unint64_t)v84 < v65 + 8 * v6);
LABEL_68:
                  v93 = 8 * v6 + v80;
                  v94 = (double *)(v80 + 8);
                  if (v93 <= v80 + 8)
                    v93 = v80 + 8;
                  v95 = v93 + ~v80;
                  v81 = 0.0;
                  v96 = (double *)v80;
                  if (v95 >= 8)
                  {
                    v97 = (v95 >> 3) + 1;
                    v98 = v97 & 0x3FFFFFFFFFFFFFFELL;
                    do
                    {
                      v81 = v81 + *(v94 - 1) + *v94;
                      v94 += 2;
                      v98 -= 2;
                    }
                    while (v98);
                    if (v97 == (v97 & 0x3FFFFFFFFFFFFFFELL))
                      goto LABEL_76;
                    v96 = (double *)(v80 + 8 * (v97 & 0x3FFFFFFFFFFFFFFELL));
                  }
                  do
                  {
                    v99 = *v96++;
                    v81 = v81 + v99;
                  }
                  while ((unint64_t)v96 < v80 + 8 * v6);
LABEL_76:
                  MEMORY[0x20BD36480](v80, 0x1000C8000313F17);
                  MEMORY[0x20BD36480](v65, 0x1000C8000313F17);
                  v2 = v110;
                  v39 = *(_DWORD *)(v110 + 20);
                  v40 = v45 / v18;
                  v38 = v81 / v18;
                  v42 = v112;
                  v41 = v114;
LABEL_77:
                  v100 = 0;
                  v125[8] = 1.0;
                  v122[0] = &off_24C4213F8;
                  v122[1] = v125;
                  v124 = 72;
                  v125[0] = 1.0 / v40;
                  v125[1] = 0.0;
                  v125[2] = -v41 / v40;
                  v125[3] = 0.0;
                  v125[4] = 1.0 / v38;
                  v125[5] = -v42 / v38;
                  v125[6] = 0.0;
                  v125[7] = 0.0;
                  v122[2] = 0x300000003;
                  v123 = 0;
                  v116 = &off_24C4213F8;
                  if (v39)
                    v100 = operator new[]();
                  v117 = v100;
                  v118 = 3;
                  v119 = v39;
                  v120 = v39 != 0;
                  v121 = 24 * v39;
                  Matrix<double>::MultAxBToC((uint64_t)v122, v2, (uint64_t)&v116);
                  v101 = v117;
                  v116 = &off_24C4213F8;
                  if (18 * (_DWORD)v4)
                    v102 = operator new[]();
                  else
                    v102 = 0;
                  v117 = v102;
                  v118 = 2 * v4;
                  v119 = 9;
                  v120 = 18 * (_DWORD)v4 != 0;
                  v121 = 72 * (2 * v4);
                  if ((_DWORD)v4)
                  {
                    v103 = 0;
                    v104 = *(_QWORD *)(v3 + 8);
                    v105 = v102;
                    do
                    {
                      v106 = *(double *)(v104 + 8 * v103);
                      v107 = *(double *)(v104 + 8 * v4 + 8 * v103);
                      v108 = *(double *)(v101 + 8 * v103);
                      v109 = *(double *)(v101 + 8 * v4 + 8 * v103);
                      *(double *)v105 = v106;
                      *(double *)(v105 + 8) = v107;
                      *(_QWORD *)(v105 + 16) = 0x3FF0000000000000;
                      *(_QWORD *)(v105 + 24) = 0;
                      *(_QWORD *)(v105 + 32) = 0;
                      *(_QWORD *)(v105 + 40) = 0;
                      *(double *)(v105 + 48) = -(v108 * v106);
                      *(double *)(v105 + 56) = -(v108 * v107);
                      *(double *)(v105 + 64) = -v108;
                      *(_QWORD *)(v105 + 80) = 0;
                      *(_QWORD *)(v105 + 88) = 0;
                      *(_QWORD *)(v105 + 72) = 0;
                      *(double *)(v105 + 96) = v106;
                      *(double *)(v105 + 104) = v107;
                      *(_QWORD *)(v105 + 112) = 0x3FF0000000000000;
                      *(double *)(v105 + 120) = -(v109 * v106);
                      *(double *)(v105 + 128) = -(v109 * v107);
                      *(double *)(v105 + 136) = -v109;
                      ++v103;
                      v105 += 144;
                    }
                    while ((_DWORD)v4 != (_DWORD)v103);
                    if (v4 > 4)
                      Matrix<double>::Transpose((uint64_t)v115, (uint64_t)&v116);
                  }
                  __assert_rtn("Svd0LowestSingularVector", "Matrix.hpp", 2414, "false");
                }
                v71 = (double *)(v64 + v73);
              }
            }
            do
            {
              v79 = *v8++;
              *v71++ = v79 - v112;
            }
            while ((unint64_t)v8 < v19);
            goto LABEL_59;
          }
          v60 = (double *)(v44 + 8 * (v61 & 0x3FFFFFFFFFFFFFFELL));
        }
        do
        {
          v63 = *v60++;
          v45 = v45 + v63;
        }
        while ((unint64_t)v60 < v44 + 8 * v6);
        goto LABEL_48;
      }
      v49 = (double *)(v44 + v51);
    }
    do
    {
      v56 = *v48++;
      *v49++ = fabs(v56);
    }
    while ((unint64_t)v48 < v29 + 8 * v6);
    goto LABEL_40;
  }
  v113 = *(unsigned int *)(a2 + 20);
  v9 = (unint64_t)&v5[v6];
  v10 = v5 + 1;
  if (v9 <= (unint64_t)(v5 + 1))
    v11 = v5 + 1;
  else
    v11 = &v5[v6];
  v12 = (unint64_t)v11 + ~(unint64_t)v5;
  v13 = (v12 >> 3) + 1;
  v14 = 0.0;
  v15 = *(double **)(a2 + 8);
  v111 = a1;
  if (v12 >= 8)
  {
    v16 = v13 & 0x3FFFFFFFFFFFFFFELL;
    do
    {
      v14 = v14 + *(v10 - 1) + *v10;
      v10 += 2;
      v16 -= 2;
    }
    while (v16);
    if (v13 == (v13 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_11:
      v18 = (double)(int)v6;
      v19 = (unint64_t)&v8[v6];
      v20 = v9 + 8 * v113;
      v21 = &v5[v113 + 1];
      if (v20 <= (unint64_t)v21)
        v20 = (unint64_t)&v5[v113 + 1];
      v22 = v20 + ~(unint64_t)v5 - 8 * v113;
      v23 = 0.0;
      v24 = &v5[v6];
      v110 = a2;
      if (v22 >= 8)
      {
        v25 = (v22 >> 3) + 1;
        v26 = v25 & 0x3FFFFFFFFFFFFFFELL;
        do
        {
          v23 = v23 + *(v21 - 1) + *v21;
          v21 += 2;
          v26 -= 2;
        }
        while (v26);
        if (v25 == (v25 & 0x3FFFFFFFFFFFFFFELL))
        {
LABEL_19:
          v114 = v14 / v18;
          v112 = v23 / v18;
          v28 = operator new[]();
          v29 = v28;
          if (v12 < 0x18)
          {
            v30 = v5;
            v31 = (double *)v28;
          }
          else
          {
            v30 = v5;
            v31 = (double *)v28;
            if ((unint64_t)(v28 - (_QWORD)v5) >= 0x20)
            {
              v32 = 0;
              v33 = v13 & 0x3FFFFFFFFFFFFFFCLL;
              v30 = &v5[v33];
              v34 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v114, 0);
              v35 = v13 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v36 = (float64x2_t *)(v28 + v32 * 8);
                v37 = vsubq_f64(*(float64x2_t *)&v5[v32 + 2], v34);
                *v36 = vsubq_f64(*(float64x2_t *)&v5[v32], v34);
                v36[1] = v37;
                v32 += 4;
                v35 -= 4;
              }
              while (v35);
              if (v13 == (v13 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_30;
              v31 = (double *)(v28 + v33 * 8);
            }
          }
          do
          {
            v43 = *v30++;
            *v31++ = v43 - v114;
          }
          while ((unint64_t)v30 < v9);
LABEL_30:
          v7 = v113;
          goto LABEL_31;
        }
        v24 = &v8[v25 & 0x3FFFFFFFFFFFFFFELL];
      }
      do
      {
        v27 = *v24++;
        v23 = v23 + v27;
      }
      while ((unint64_t)v24 < v19);
      goto LABEL_19;
    }
    v15 = &v5[v13 & 0x3FFFFFFFFFFFFFFELL];
  }
  do
  {
    v17 = *v15++;
    v14 = v14 + v17;
  }
  while ((unint64_t)v15 < v9);
  goto LABEL_11;
}

{
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD v16[2];
  int v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  _QWORD v21[2];
  int v22;
  int v23;
  BOOL v24;
  uint64_t v25;

  v4 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v4)
    v5 = operator new[]();
  else
    v5 = 0;
  v22 = 3;
  v23 = v4;
  v24 = (_DWORD)v4 != 0;
  v25 = 24 * v4;
  v21[0] = &off_24C421398;
  v21[1] = v5;
  v6 = *(const void **)(a2 + 8);
  v7 = (2 * v4);
  v8 = 8 * v7;
  memcpy((void *)v5, v6, 8 * v7);
  if ((_DWORD)v4)
  {
    v9 = v5 + 8 * (v7 + v4);
    if (v9 <= (v8 | 8uLL) + v5)
      v9 = (v8 | 8) + v5;
    memset_pattern16((void *)(v5 + 8 * v7), &unk_20B6D2B00, ((~v5 - v8 + v9) & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  v10 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v10)
    v11 = operator new[]();
  else
    v11 = 0;
  v17 = 3;
  v18 = v10;
  v19 = (_DWORD)v10 != 0;
  v20 = 24 * v10;
  v16[0] = &off_24C421398;
  v16[1] = v11;
  v12 = *(const void **)(a1 + 8);
  v13 = (2 * v10);
  v14 = 8 * v13;
  memcpy((void *)v11, v12, 8 * v13);
  if ((_DWORD)v10)
  {
    v15 = v11 + 8 * (v13 + v10);
    if (v15 <= (v14 | 8uLL) + v11)
      v15 = (v14 | 8) + v11;
    memset_pattern16((void *)(v11 + 8 * v13), &unk_20B6D2B00, ((~v11 - v14 + v15) & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  GeomUtils::ComputeHomography((uint64_t)v16, (uint64_t)v21);
}

void sub_20B645518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;

  if (a24 && a26)
    MEMORY[0x20BD36480]();
  if (a19 && a21)
    MEMORY[0x20BD36480]();
  if (v37 && v38)
    MEMORY[0x20BD36480](v37, 0x1000C8000313F17);
  if (v36 && v39)
    MEMORY[0x20BD36480](v36, 0x1000C8000313F17);
  if (a34)
  {
    if (a36)
    {
      MEMORY[0x20BD36480]();
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void Matrix<double>::MultAxBToC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int v10;
  unsigned int v12;
  double *v13;
  uint64_t v14;
  const void *v15;
  int v16;
  uint64_t v17;
  double v18;
  unint64_t v19;
  unint64_t v20;
  double *v21;
  double *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float64x2_t *v27;
  float64x2_t v28;
  double *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  double v33;
  unint64_t v34;
  unint64_t v35;
  double *v36;
  double *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float64x2_t *v42;
  float64x2_t v43;
  unint64_t v44;
  double v45;
  unint64_t v46;
  void *v47;
  unint64_t v48;
  double v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  unint64_t v55;
  double *v56;
  float64x2_t *v57;
  uint64_t v58;
  uint64_t v59;
  float64x2_t *v60;
  unint64_t v61;
  double *v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  float64x2_t *v67;
  float64x2_t *v68;
  double v69;
  float64x2_t *v70;
  float64x2_t *v71;
  unint64_t v72;
  float64x2_t v73;
  float64x2_t v74;
  uint64_t i;
  uint64_t v76;
  double *v77;
  double v78;
  double *v79;
  double *v80;
  unint64_t v81;
  double v82;
  uint64_t v83;
  float64x2_t *v84;
  uint64_t v85;
  unint64_t v86;
  double *f64;
  double *v88;
  double v89;
  float64x2_t *v90;
  float64x2_t *v91;
  uint64_t v92;
  float64x2_t v93;
  float64x2_t v94;
  double *v95;
  double *v96;
  uint64_t v97;
  double v98;

  v6 = *(_DWORD *)(a1 + 16);
  v7 = *(_DWORD *)(a1 + 20);
  v8 = *(_DWORD *)(a2 + 16);
  if (v6 == 1 && v7 == 1)
  {
    v12 = *(_DWORD *)(a2 + 20);
    if (!(v12 * v8))
    {
      v15 = 0;
      goto LABEL_38;
    }
    v13 = *(double **)(a1 + 8);
    v14 = operator new[]();
    v15 = (const void *)v14;
    v16 = *(_DWORD *)(a2 + 20) * *(_DWORD *)(a2 + 16);
    if (v16 < 1)
      goto LABEL_38;
    v17 = *(_QWORD *)(a2 + 8);
    v18 = *v13;
    v19 = v17 + 8 * v16;
    if (v19 <= v17 + 8)
      v19 = v17 + 8;
    v20 = v19 + ~v17;
    if (v20 < 0x18)
    {
      v21 = *(double **)(a2 + 8);
      v22 = (double *)v14;
    }
    else
    {
      v21 = *(double **)(a2 + 8);
      v22 = (double *)v14;
      if ((unint64_t)(v14 - v17) >= 0x20)
      {
        v23 = 0;
        v24 = (v20 >> 3) + 1;
        v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        v21 = (double *)(v17 + v25);
        v26 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v27 = (float64x2_t *)(v14 + v23);
          v28 = vmulq_n_f64(*(float64x2_t *)(v17 + v23 + 16), v18);
          *v27 = vmulq_n_f64(*(float64x2_t *)(v17 + v23), v18);
          v27[1] = v28;
          v23 += 32;
          v26 -= 4;
        }
        while (v26);
        if (v24 == (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_38:
          v46 = 8 * v8 * (unint64_t)v12;
          v47 = *(void **)(a3 + 8);
          if (*(_QWORD *)(a3 + 32) < v46)
          {
            if (v47 && *(_BYTE *)(a3 + 24))
              MEMORY[0x20BD36480]();
            v47 = (void *)operator new[]();
            *(_QWORD *)(a3 + 8) = v47;
            *(_QWORD *)(a3 + 32) = v46;
            *(_BYTE *)(a3 + 24) = 1;
          }
          *(_DWORD *)(a3 + 16) = v8;
          *(_DWORD *)(a3 + 20) = v12;
          memcpy(v47, v15, 8 * v8 * (unint64_t)v12);
          if (v12 * v8)
            goto LABEL_54;
          goto LABEL_56;
        }
        v22 = (double *)(v14 + v25);
      }
    }
    v44 = v17 + 8 * v16;
    do
    {
      v45 = *v21++;
      *v22++ = v18 * v45;
    }
    while ((unint64_t)v21 < v44);
    goto LABEL_38;
  }
  v10 = *(_DWORD *)(a2 + 20);
  if (v10 != 1 || v8 != 1)
  {
    if (v7 != v8)
      __assert_rtn("MultAxBToC", "Matrix.hpp", 1596, "m_cols == B.Rows() && \"Input dimensions not legal\"");
    if (v6 != *(_DWORD *)(a3 + 16) || v10 != *(_DWORD *)(a3 + 20))
      __assert_rtn("MultAxBToC", "Matrix.hpp", 1597, "m_rows == C->Rows() && B.Cols() == C->Cols() && \"Output dimensions not legal\"");
    goto LABEL_56;
  }
  if (!(v7 * v6))
  {
    v15 = 0;
    goto LABEL_48;
  }
  v29 = *(double **)(a2 + 8);
  v30 = operator new[]();
  v15 = (const void *)v30;
  v31 = *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16);
  if (v31 < 1)
    goto LABEL_48;
  v32 = *(_QWORD *)(a1 + 8);
  v33 = *v29;
  v34 = v32 + 8 * v31;
  if (v34 <= v32 + 8)
    v34 = v32 + 8;
  v35 = v34 + ~v32;
  if (v35 < 0x18)
  {
    v36 = *(double **)(a1 + 8);
    v37 = (double *)v30;
LABEL_46:
    v48 = v32 + 8 * v31;
    do
    {
      v49 = *v36++;
      *v37++ = v33 * v49;
    }
    while ((unint64_t)v36 < v48);
    goto LABEL_48;
  }
  v36 = *(double **)(a1 + 8);
  v37 = (double *)v30;
  if ((unint64_t)(v30 - v32) < 0x20)
    goto LABEL_46;
  v38 = 0;
  v39 = (v35 >> 3) + 1;
  v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
  v36 = (double *)(v32 + v40);
  v41 = v39 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v42 = (float64x2_t *)(v30 + v38);
    v43 = vmulq_n_f64(*(float64x2_t *)(v32 + v38 + 16), v33);
    *v42 = vmulq_n_f64(*(float64x2_t *)(v32 + v38), v33);
    v42[1] = v43;
    v38 += 32;
    v41 -= 4;
  }
  while (v41);
  if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
  {
    v37 = (double *)(v30 + v40);
    goto LABEL_46;
  }
LABEL_48:
  v50 = 8 * v6 * (unint64_t)v7;
  v51 = *(void **)(a3 + 8);
  if (*(_QWORD *)(a3 + 32) < v50)
  {
    if (v51 && *(_BYTE *)(a3 + 24))
      MEMORY[0x20BD36480]();
    v51 = (void *)operator new[]();
    *(_QWORD *)(a3 + 8) = v51;
    *(_QWORD *)(a3 + 32) = v50;
    *(_BYTE *)(a3 + 24) = 1;
  }
  *(_DWORD *)(a3 + 16) = v6;
  *(_DWORD *)(a3 + 20) = v7;
  memcpy(v51, v15, 8 * v6 * (unint64_t)v7);
  if (v7 * v6)
  {
LABEL_54:
    if (v15)
      MEMORY[0x20BD36480](v15, 0x1000C8000313F17);
  }
LABEL_56:
  v52 = *(unsigned int *)(a1 + 16);
  if ((int)v52 >= 1)
  {
    v53 = *(unsigned int *)(a3 + 20);
    if ((int)v53 >= 1)
    {
      v54 = *(char **)(a3 + 8);
      v55 = *(unsigned int *)(a1 + 20);
      if ((int)v55 <= 0)
      {
        bzero(v54, 8 * v52 * (unint64_t)v53);
      }
      else
      {
        v56 = *(double **)(a1 + 8);
        v57 = *(float64x2_t **)(a2 + 8);
        if (v55 > 3)
        {
          if ((_DWORD)v53 == 1)
          {
            v64 = v55 & 0xFFFFFFFC;
            v65 = v55 - v64;
            if (v55 == v64)
            {
              v66 = 0;
              v67 = v57 + 1;
              v68 = (float64x2_t *)(v56 + 2);
              do
              {
                v69 = 0.0;
                v70 = v68;
                v71 = v67;
                v72 = v55;
                do
                {
                  v73 = vmulq_f64(v70[-1], v71[-1]);
                  v74 = vmulq_f64(*v70, *v71);
                  v69 = v69 + v73.f64[0] + v73.f64[1] + v74.f64[0] + v74.f64[1];
                  v71 += 2 * v53;
                  v70 += 2;
                  v72 -= 4;
                }
                while (v72);
                *(double *)&v54[8 * v66 * v53] = v69;
                ++v66;
                v68 = (float64x2_t *)((char *)v68 + 8 * v55);
              }
              while (v66 != v52);
            }
            else
            {
              v83 = 0;
              v84 = (float64x2_t *)(v56 + 2);
              v85 = 8 * v55;
              v86 = v55 >> 2;
              f64 = v57[2 * (*(_DWORD *)(a1 + 20) >> 2)].f64;
              v88 = &v56[4 * v86];
              do
              {
                v89 = 0.0;
                v90 = v84;
                v91 = v57 + 1;
                v92 = v64;
                do
                {
                  v93 = vmulq_f64(v90[-1], v91[-1]);
                  v94 = vmulq_f64(*v90, *v91);
                  v89 = v89 + v93.f64[0] + v93.f64[1] + v94.f64[0] + v94.f64[1];
                  v91 += 2 * v53;
                  v90 += 2;
                  v92 -= 4;
                }
                while (v92);
                v95 = v88;
                v96 = f64;
                v97 = v65;
                do
                {
                  v98 = *v95++;
                  v89 = v89 + v98 * *v96;
                  v96 += v53;
                  --v97;
                }
                while (v97);
                *(double *)&v54[8 * v83 * v53] = v89;
                ++v83;
                v84 = (float64x2_t *)((char *)v84 + v85);
                v88 = (double *)((char *)v88 + v85);
              }
              while (v83 != v52);
            }
          }
          else
          {
            for (i = 0; i != v52; ++i)
            {
              v76 = 0;
              v77 = (double *)v57;
              do
              {
                v78 = 0.0;
                v79 = v56;
                v80 = v77;
                v81 = v55;
                do
                {
                  v82 = *v79++;
                  v78 = v78 + v82 * *v80;
                  v80 += v53;
                  --v81;
                }
                while (v81);
                *(double *)&v54[8 * i * v53 + 8 * v76++] = v78;
                ++v77;
              }
              while (v76 != v53);
              v56 += v55;
            }
          }
        }
        else
        {
          v58 = 0;
          v59 = 8 * v53;
          v60 = &v57[v53];
          do
          {
            v61 = 0;
            v62 = &v56[v58 * v55];
            do
            {
              v63 = *v62 * v57->f64[v61 / 8] + 0.0;
              if ((_DWORD)v55 != 1)
              {
                v63 = v63 + v62[1] * v57->f64[(unint64_t)v59 / 8 + v61 / 8];
                if ((_DWORD)v55 != 2)
                  v63 = v63 + v62[2] * v60->f64[v61 / 8];
              }
              *(double *)&v54[v61] = v63;
              v61 += 8;
            }
            while (v59 != v61);
            ++v58;
            v54 += v59;
          }
          while (v58 != v52);
        }
      }
    }
  }
}

void sub_20B645C74(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  int v2;

  if (v2)
  {
    if (v1)
      MEMORY[0x20BD36480](v1, 0x1000C8000313F17);
  }
  _Unwind_Resume(exception_object);
}

void Matrix<double>::Transpose(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  void *v6;
  __int128 *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  __int128 *v16;
  __int128 *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t i;
  __int128 *v22;
  _QWORD *v23;
  uint64_t v24;
  _OWORD *v25;
  __int128 *v26;
  uint64_t v27;
  __int128 v28;
  _OWORD *v29;
  __int128 *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;

  v4 = *(_DWORD *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 20);
  v6 = (void *)operator new[]();
  v7 = *(__int128 **)(a2 + 8);
  memcpy(v6, v7, 8 * (int)v4 * (uint64_t)(int)v5);
  *(_QWORD *)a1 = &off_24C4213F8;
  if (v5 * v4)
  {
    v8 = (_QWORD *)operator new[]();
    v7 = *(__int128 **)(a2 + 8);
  }
  else
  {
    v8 = 0;
  }
  *(_QWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v4;
  *(_BYTE *)(a1 + 24) = v5 * v4 != 0;
  *(_QWORD *)(a1 + 32) = 8 * v4 * (unint64_t)v5;
  v9 = *(unsigned int *)(a2 + 20);
  if ((int)v9 >= 1)
  {
    v10 = *(unsigned int *)(a2 + 16);
    if ((int)v10 >= 1)
    {
      if (v10 > 5)
      {
        if ((_DWORD)v9 == 1)
        {
          v18 = v10 & 0xFFFFFFFC;
          v19 = (char *)v8 - (char *)v7;
          if (v18 == v10)
          {
            if (v19 >= 0x20)
            {
              v25 = v8 + 2;
              v26 = v7 + 1;
              v27 = 32 * v9;
              do
              {
                v28 = *v26;
                *(v25 - 1) = *(v26 - 1);
                *v25 = v28;
                v25 += 2;
                v26 = (__int128 *)((char *)v26 + v27);
                v18 -= 4;
              }
              while (v18);
            }
            else
            {
              v20 = 8 * v9;
              do
              {
                *v8++ = *(_QWORD *)v7;
                v7 = (__int128 *)((char *)v7 + v20);
                --v10;
              }
              while (v10);
            }
          }
          else
          {
            if (v19 >= 0x20)
            {
              v29 = v8 + 2;
              v30 = v7 + 1;
              v31 = v10 & 0xFFFFFFFC;
              do
              {
                v32 = *v30;
                *(v29 - 1) = *(v30 - 1);
                *v29 = v32;
                v29 += 2;
                v30 += 2 * v9;
                v31 -= 4;
              }
              while (v31);
            }
            else
            {
              v18 = 0;
            }
            v33 = v10 - v18;
            v34 = &v8[v18];
            v35 = (_QWORD *)v7 + v18;
            v36 = 8 * v9;
            do
            {
              *v34++ = *v35;
              v35 = (_QWORD *)((char *)v35 + v36);
              --v33;
            }
            while (v33);
          }
        }
        else
        {
          for (i = 0; i != v9; ++i)
          {
            v22 = v7;
            v23 = v8;
            v24 = v10;
            do
            {
              *v23++ = *(_QWORD *)v22;
              v22 = (__int128 *)((char *)v22 + 8 * v9);
              --v24;
            }
            while (v24);
            v8 += v10;
            v7 = (__int128 *)((char *)v7 + 8);
          }
        }
      }
      else
      {
        v11 = 0;
        v12 = 8 * v9;
        v13 = (_QWORD *)v7 + v9;
        v14 = (_QWORD *)v7 + 3 * v9;
        v15 = v8 + 2;
        v16 = &v7[v9];
        v17 = &v7[2 * v9];
        do
        {
          *(v15 - 2) = *(_QWORD *)((char *)v7 + v11);
          if ((_DWORD)v10 != 1)
          {
            *(v15 - 1) = v13[v11 / 8];
            if ((_DWORD)v10 != 2)
            {
              *v15 = *(_QWORD *)((char *)v16 + v11);
              if ((_DWORD)v10 != 3)
              {
                v15[1] = v14[v11 / 8];
                if ((_DWORD)v10 != 4)
                  v15[2] = *(_QWORD *)((char *)v17 + v11);
              }
            }
          }
          v11 += 8;
          v15 += v10;
        }
        while (v12 != v11);
      }
    }
  }
  JUMPOUT(0x20BD36480);
}

void sub_20B645F3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD36480](v1, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

void sub_20B6460F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  int v2;

  if (v1)
  {
    if (v2)
      MEMORY[0x20BD36480](v1, 0x1000C8000313F17);
  }
  _Unwind_Resume(exception_object);
}

void GeomUtils::homography2d(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];
  int v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  _QWORD v15[2];
  int v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  _OWORD v20[4];
  uint64_t v21;
  _OWORD v22[4];
  uint64_t v23;

  v23 = 0;
  memset(v22, 0, sizeof(v22));
  v21 = 0;
  memset(v20, 0, sizeof(v20));
  *(_QWORD *)a3 = &off_24C4213F8;
  *(_QWORD *)(a3 + 8) = operator new[]();
  *(_QWORD *)(a3 + 16) = 0x300000003;
  *(_BYTE *)(a3 + 24) = 1;
  *(_QWORD *)(a3 + 32) = 72;
  operator new[]();
  operator new[]();
  v6 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v6)
    v7 = operator new[]();
  else
    v7 = 0;
  v16 = 3;
  v17 = v6;
  v18 = (_DWORD)v6 != 0;
  v19 = 24 * v6;
  v15[0] = &off_24C421398;
  v15[1] = v7;
  v8 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v8)
    v9 = operator new[]();
  else
    v9 = 0;
  v11 = 3;
  v12 = v8;
  v13 = (_DWORD)v8 != 0;
  v14 = 24 * v8;
  v10[0] = &off_24C421398;
  v10[1] = v9;
  Algo::Normalize2DPts(a1, (uint64_t)v15, (uint64_t)v22);
  Algo::Normalize2DPts(a2, (uint64_t)v10, (uint64_t)v20);
  GeomUtils::ComputeHomography((uint64_t)v15, (uint64_t)v10);
}

void sub_20B6462EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  if (v13 && v15)
  {
    MEMORY[0x20BD36480](v13, 0x1000C8000313F17);
    v11 = *(_QWORD *)(v10 + 8);
  }
  MEMORY[0x20BD36480](a10, 0x1000C8000313F17);
  MEMORY[0x20BD36480](v12, 0x1000C8000313F17);
  *(_QWORD *)v10 = v14;
  if (v11)
  {
    if (*(_BYTE *)(v10 + 24))
    {
      MEMORY[0x20BD36480](v11, 0x1000C8000313F17);
      *(_QWORD *)(v10 + 8) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_BYTE *)(v10 + 24) = 0;
    }
  }
  *(_QWORD *)(v10 + 16) = 0;
  _Unwind_Resume(a1);
}

uint64_t GeomUtils::ransacComputeHomography(uint64_t a1, uint64_t a2, double a3, uint64_t a4, uint64_t a5, unsigned int *a6, _DWORD *a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float64x2_t *v19;
  unsigned int v20;
  float64x2_t *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  unsigned int v26;
  const char *v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned __int16 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  float64_t *v45;
  unsigned int v46;
  unsigned __int16 v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  unsigned int v56;
  unsigned __int16 v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  float64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  float64_t *v77;
  float64_t *v78;
  uint64_t v79;
  uint64_t v80;
  float64_t *v81;
  uint64_t v82;
  uint64_t v83;
  double *v84;
  double *v85;
  int v86;
  double v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  float64x2_t *v91;
  uint64_t v92;
  uint64_t v93;
  double *v94;
  double *v95;
  int v96;
  double v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  float64x2_t *v103;
  float64x2_t *v104;
  uint64_t v105;
  float64x2_t v106;
  uint64_t v107;
  float64x2_t *v108;
  char *v109;
  uint64_t v110;
  float64x2_t *v111;
  float64x2_t *v112;
  float64x2_t *v113;
  unint64_t v114;
  float64x2_t *v115;
  float64x2_t *v116;
  BOOL v118;
  BOOL v120;
  BOOL v122;
  BOOL v124;
  BOOL v126;
  BOOL v128;
  BOOL v129;
  float64x2_t *v130;
  float64x2_t *v131;
  uint64_t v132;
  float64x2_t v133;
  float64x2_t *__src;
  uint64_t __n;
  uint64_t (**v136)();
  float64x2_t *v137;
  uint64_t v138;
  BOOL v139;
  uint64_t v140;
  _QWORD v141[2];
  uint64_t v142;
  BOOL v143;
  uint64_t v144;
  uint64_t (**v145)();
  uint64_t v146;
  unsigned int v147;
  int v148;
  BOOL v149;
  uint64_t v150;
  uint64_t (**v151)();
  uint64_t v152;
  unsigned int v153;
  unsigned int v154;
  BOOL v155;
  uint64_t v156;
  _OWORD v157[2];
  __int128 v158;
  __int128 v159;
  uint64_t v160;
  _OWORD v161[4];
  uint64_t v162;

  v162 = 0;
  memset(v161, 0, sizeof(v161));
  v160 = 0;
  v158 = 0u;
  v159 = 0u;
  memset(v157, 0, sizeof(v157));
  v13 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v13)
    v14 = operator new[]();
  else
    v14 = 0;
  v153 = 3;
  v154 = v13;
  v155 = (_DWORD)v13 != 0;
  v156 = 24 * v13;
  v151 = &off_24C421398;
  v152 = v14;
  v15 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v15)
    v16 = operator new[]();
  else
    v16 = 0;
  v147 = 3;
  v148 = v15;
  v149 = (_DWORD)v15 != 0;
  v150 = 24 * v15;
  v145 = &off_24C421398;
  v146 = v16;
  Algo::Normalize2DPts(a1, (uint64_t)&v151, (uint64_t)v161);
  Algo::Normalize2DPts(a2, (uint64_t)&v145, (uint64_t)v157);
  v17 = *(double *)&v158 * a3;
  Algo::RansacHomography((uint64_t)&v151, (uint64_t)&v145, 4u, 0xAu, 0x32u, 1u, a5, a6, (float)(v17 * v17), a7);
  v18 = *a6;
  if ((_DWORD)v18)
  {
    v19 = (float64x2_t *)operator new[]();
    v20 = *a6;
  }
  else
  {
    v20 = 0;
    v19 = 0;
  }
  LODWORD(v142) = 3;
  HIDWORD(v142) = v18;
  v143 = (_DWORD)v18 != 0;
  v144 = 24 * v18;
  v141[0] = &off_24C421398;
  v141[1] = v19;
  if (v20)
  {
    v21 = (float64x2_t *)operator new[]();
    v22 = *a6;
  }
  else
  {
    v22 = 0;
    v21 = 0;
  }
  LODWORD(v138) = 3;
  HIDWORD(v138) = v20;
  v139 = v20 != 0;
  v23 = v20;
  v140 = 24 * v20;
  v136 = &off_24C421398;
  v137 = v21;
  if (v22)
  {
    v24 = v154;
    if (v154 != v148)
    {
      *a6 = 0;
      if (os_signpost_enabled(MEMORY[0x24BDACB70]))
        goto LABEL_18;
      goto LABEL_19;
    }
    __n = 24 * v20;
    v26 = *(_DWORD *)(a5 + 20) * *(_DWORD *)(a5 + 16);
    if (!v153)
    {
      if (v26)
      {
LABEL_34:
        v27 = "row < m_rows && col < m_cols";
        v28 = 120;
        goto LABEL_35;
      }
      goto LABEL_120;
    }
    v29 = v20;
    v30 = 2 * v154;
    v31 = (2 * v18);
    v32 = v20;
    if (v26 > v18)
    {
      if (v153 >= 2)
      {
        if (v153 != 2)
        {
          if (v147)
          {
            if (v147 > 1)
            {
              if (v147 >= 3)
              {
                v46 = 0;
                v47 = 0;
                v27 = "index < m_rows * m_cols";
                while (1)
                {
                  if (v26 <= v46)
                    goto LABEL_102;
                  v48 = *(unsigned int *)(*(_QWORD *)(a5 + 8) + 4 * v47);
                  if (v24 <= v48)
                    goto LABEL_34;
                  if (v18 <= v46)
                    break;
                  v49 = (_QWORD *)(v152 + 8 * v48);
                  v50 = (_QWORD *)&v19->f64[v47];
                  *v50 = *v49;
                  v50[v18] = v49[v24];
                  v50[v31] = v49[v30];
                  if (v29 <= v46)
                    break;
                  v21->f64[v47] = *(float64_t *)(v146 + 8 * v48);
                  v51 = *(unsigned int *)(*(_QWORD *)(a5 + 8) + 4 * v47);
                  if (v24 <= v51)
                    break;
                  v52 = v146;
                  v53 = *(_QWORD *)(v146 + 8 * v51 + 8 * v24);
                  v21 = v137;
                  v54 = (char *)&v137->f64[v47];
                  *(_QWORD *)&v54[8 * v23] = v53;
                  v55 = *(unsigned int *)(*(_QWORD *)(a5 + 8) + 4 * v47);
                  if (v24 <= v55)
                    break;
                  *(_QWORD *)&v54[4 * v32] = *(_QWORD *)(v52 + 8 * v55 + 8 * v30);
                  v46 = ++v47;
                  if (v22 <= v47)
                  {
LABEL_77:
                    if ((_DWORD)v31)
                      __src = (float64x2_t *)operator new[]();
                    else
                      __src = 0;
                    if (!(_DWORD)v18)
                    {
                      memcpy(0, __src, 8 * v31);
                      v142 = 3;
                      memcpy(v19, 0, 24 * v18);
                      goto LABEL_134;
                    }
                    v82 = 8 * v18;
                    if (v18 < 0x1C)
                    {
                      LODWORD(v83) = 0;
                      goto LABEL_126;
                    }
                    LODWORD(v83) = 0;
                    v101 = (char *)__src + v82;
                    if ((unint64_t)((char *)__src - (char *)v19) < 0x10
                      || (v102 = (char *)&v19->f64[v31], (unint64_t)(v101 - v102) < 0x10)
                      || (unint64_t)(v101 - (char *)v19) < 0x10
                      || (unint64_t)((char *)v19 + v82 - (char *)__src) < 0x10
                      || (unint64_t)((char *)__src - v102) < 0x10)
                    {
LABEL_126:
                      v84 = (double *)v19;
                      v85 = (double *)__src;
                    }
                    else
                    {
                      v85 = (double *)__src;
                      v84 = (double *)v19;
                      if ((unint64_t)((char *)__src - (char *)v19) >= 0x10)
                      {
                        v83 = v18 & 0xFFFFFFFE;
                        v84 = &v19->f64[v83];
                        v103 = v19;
                        v104 = __src;
                        v105 = v83;
                        do
                        {
                          v106 = *(float64x2_t *)((char *)v103 + 8 * v31);
                          *v104 = vdivq_f64(*v103, v106);
                          *(float64x2_t *)((char *)v104++ + 8 * v18) = vdivq_f64(*(float64x2_t *)((char *)v103++ + 8 * v18), v106);
                          v105 -= 2;
                        }
                        while (v105);
                        if (v83 != v18)
                        {
                          v85 = &__src->f64[v83];
                          goto LABEL_127;
                        }
LABEL_129:
                        v88 = operator new[]();
                        v89 = 8 * v31;
                        memcpy((void *)v88, __src, 8 * v31);
                        v90 = v88 + 8 * v31 + 8 * v18;
                        if (v90 <= v88 + 8 * v31 + 8)
                          v90 = v88 + v89 + 8;
                        memset_pattern16((void *)(v88 + 8 * v31), &unk_20B6D2B00, ((~v88 - v89 + v90) & 0xFFFFFFFFFFFFFFF8) + 8);
                        LODWORD(v142) = 3;
                        HIDWORD(v142) = v18;
                        memcpy(v19, (const void *)v88, 24 * v18);
                        MEMORY[0x20BD36480](v88, 0x1000C8000313F17);
                        if ((_DWORD)v31 && __src)
                          MEMORY[0x20BD36480](__src, 0x1000C8000313F17);
LABEL_134:
                        if ((_DWORD)(v32 * 2))
                          v91 = (float64x2_t *)operator new[]();
                        else
                          v91 = 0;
                        if (!v29)
                        {
                          memcpy(0, v91, 4 * v32);
                          v138 = 3;
                          memcpy(v21, 0, __n);
                          goto LABEL_139;
                        }
                        v92 = 8 * v23;
                        if (v29 < 0x14)
                        {
                          LODWORD(v93) = 0;
                          goto LABEL_142;
                        }
                        LODWORD(v93) = 0;
                        v107 = v29 - 1;
                        v108 = (float64x2_t *)&v91->f64[v107 + 1];
                        v109 = (char *)v91 + v92;
                        v110 = v107 * 8 + 8 + v92;
                        v111 = (float64x2_t *)((char *)v91 + v110);
                        v112 = (float64x2_t *)&v21->f64[v107 + 1];
                        v113 = &v21[v32];
                        v114 = (unint64_t)&v113->f64[v107 + 1];
                        v115 = (float64x2_t *)((char *)v21 + v92);
                        v116 = (float64x2_t *)((char *)v21 + v110);
                        v118 = v91 < v112 && v21 < v108;
                        v120 = (unint64_t)v91 < v114 && v113 < v108;
                        v122 = v91 < v116 && v115 < v108;
                        v124 = v109 < (char *)v112 && v21 < v111;
                        v126 = (unint64_t)v109 < v114 && v113 < v111;
                        v128 = v109 < (char *)v116 && v115 < v111;
                        v129 = v109 >= (char *)v108 || v91 >= v111;
                        if (!v129 || v118 || v120 || v122 || v124 || v126)
                        {
LABEL_142:
                          v94 = (double *)v21;
                          v95 = (double *)v91;
                        }
                        else
                        {
                          v94 = (double *)v21;
                          v95 = (double *)v91;
                          if (!v128)
                          {
                            v93 = v23 & 0xFFFFFFFE;
                            v94 = &v21->f64[v93];
                            v130 = v21;
                            v131 = v91;
                            v132 = v93;
                            do
                            {
                              v133 = v130[v32];
                              *v131 = vdivq_f64(*v130, v133);
                              *(float64x2_t *)((char *)v131++ + 8 * v23) = vdivq_f64(*(float64x2_t *)((char *)v130++ + 8 * v23), v133);
                              v132 -= 2;
                            }
                            while (v132);
                            if (v93 != v23)
                            {
                              v95 = &v91->f64[v93];
                              goto LABEL_143;
                            }
LABEL_145:
                            v98 = operator new[]();
                            v99 = 4 * v32;
                            memcpy((void *)v98, v91, 4 * v32);
                            v100 = v98 + 4 * v32 + 8 * v23;
                            if (v100 <= v98 + 4 * v32 + 8)
                              v100 = v98 + v99 + 8;
                            memset_pattern16((void *)(v98 + 4 * v32), &unk_20B6D2B00, ((~v98 - v99 + v100) & 0xFFFFFFFFFFFFFFF8) + 8);
                            LODWORD(v138) = 3;
                            HIDWORD(v138) = v29;
                            memcpy(v21, (const void *)v98, __n);
                            MEMORY[0x20BD36480](v98, 0x1000C8000313F17);
                            if ((_DWORD)(v32 * 2) && v91)
                              MEMORY[0x20BD36480](v91, 0x1000C8000313F17);
LABEL_139:
                            GeomUtils::ComputeHomography((uint64_t)v141, (uint64_t)&v136);
                          }
                        }
LABEL_143:
                        v96 = v29 - v93;
                        do
                        {
                          v97 = v94[v32 * 2];
                          *v95 = *v94 / v97;
                          v95[v23] = v94[v23] / v97;
                          ++v95;
                          ++v94;
                          --v96;
                        }
                        while (v96);
                        goto LABEL_145;
                      }
                    }
LABEL_127:
                    v86 = v18 - v83;
                    do
                    {
                      v87 = v84[v31];
                      *v85 = *v84 / v87;
                      v85[v18] = v84[v18] / v87;
                      ++v85;
                      ++v84;
                      --v86;
                    }
                    while (v86);
                    goto LABEL_129;
                  }
                }
LABEL_90:
                v28 = 120;
                v27 = "row < m_rows && col < m_cols";
LABEL_35:
                __assert_rtn("operator()", "Matrix.hpp", v28, v27);
              }
              if (!v26)
                goto LABEL_120;
              v71 = **(unsigned int **)(a5 + 8);
              if (v154 <= v71 || !(_DWORD)v18)
                goto LABEL_34;
              goto LABEL_100;
            }
            if (!v26)
              goto LABEL_120;
            v66 = **(unsigned int **)(a5 + 8);
            if (v154 <= v66 || !(_DWORD)v18)
              goto LABEL_34;
LABEL_88:
            v70 = (float64_t *)(v152 + 8 * v66);
            v19->f64[0] = *v70;
            v19->f64[v18] = v70[v24];
            v19->f64[v31] = v70[v30];
            if (v29)
              v21->f64[0] = *(float64_t *)(v146 + 8 * v66);
            goto LABEL_34;
          }
          if (!v26)
            goto LABEL_120;
          v44 = **(unsigned int **)(a5 + 8);
          if (v154 <= v44 || !(_DWORD)v18)
            goto LABEL_34;
LABEL_56:
          v45 = (float64_t *)(v152 + 8 * v44);
          v19->f64[0] = *v45;
          v19->f64[v18] = v45[v24];
          v19->f64[v31] = v45[v30];
          goto LABEL_34;
        }
        if (!v26)
          goto LABEL_120;
        v80 = **(unsigned int **)(a5 + 8);
        if (v154 <= v80 || !(_DWORD)v18)
          goto LABEL_34;
LABEL_119:
        v81 = (float64_t *)(v152 + 8 * v80);
        v19->f64[0] = *v81;
        v19->f64[v18] = v81[v24];
        goto LABEL_34;
      }
      if (!v26)
        goto LABEL_120;
      v79 = **(unsigned int **)(a5 + 8);
      if (v154 <= v79 || !(_DWORD)v18)
        goto LABEL_34;
    }
    else
    {
      if (v153 >= 2)
      {
        if (v153 != 2)
        {
          if (v147)
          {
            if (v26 <= v29)
            {
              if (v147 <= 1)
              {
                if (v26)
                {
                  v67 = **(unsigned int **)(a5 + 8);
                  if (v154 > v67)
                  {
                    v68 = 8 * v67;
                    v69 = v152 + v68;
                    v19->f64[0] = *(float64_t *)(v152 + v68);
                    v19->f64[v18] = *(float64_t *)(v69 + 8 * v24);
                    v19->f64[v31] = *(float64_t *)(v69 + 8 * v30);
                    v21->f64[0] = *(float64_t *)(v146 + v68);
                  }
                  goto LABEL_34;
                }
              }
              else
              {
                if (v147 >= 3)
                {
                  v33 = 0;
                  v34 = 0;
                  v27 = "index < m_rows * m_cols";
                  while (v26 > v33)
                  {
                    v35 = *(unsigned int *)(*(_QWORD *)(a5 + 8) + 4 * v34);
                    if (v24 <= v35)
                      goto LABEL_34;
                    v36 = 8 * v35;
                    v37 = v152 + v36;
                    v38 = (_QWORD *)&v19->f64[v34];
                    *v38 = *(_QWORD *)(v152 + v36);
                    v38[v18] = *(_QWORD *)(v37 + 8 * v24);
                    v38[v31] = *(_QWORD *)(v37 + 8 * v30);
                    v21->f64[v34] = *(float64_t *)(v146 + v36);
                    v39 = *(unsigned int *)(*(_QWORD *)(a5 + 8) + 4 * v34);
                    if (v24 <= v39)
                      goto LABEL_90;
                    v40 = v146;
                    v41 = *(_QWORD *)(v146 + 8 * v39 + 8 * v24);
                    v21 = v137;
                    v42 = (char *)&v137->f64[v34];
                    *(_QWORD *)&v42[8 * v23] = v41;
                    v43 = *(unsigned int *)(*(_QWORD *)(a5 + 8) + 4 * v34);
                    if (v24 <= v43)
                      goto LABEL_90;
                    *(_QWORD *)&v42[4 * v32] = *(_QWORD *)(v40 + 8 * v43 + 8 * v30);
                    v33 = ++v34;
                    if (v22 <= v34)
                      goto LABEL_77;
                  }
LABEL_102:
                  v28 = 132;
                  goto LABEL_35;
                }
                if (v26)
                {
                  v72 = **(unsigned int **)(a5 + 8);
                  if (v154 > v72)
                  {
                    v73 = 8 * v72;
                    v74 = v152 + v73;
                    v19->f64[0] = *(float64_t *)(v152 + v73);
                    v75 = 8 * v24;
                    v19->f64[v18] = *(float64_t *)(v74 + v75);
                    v19->f64[v31] = *(float64_t *)(v74 + 8 * v30);
                    v76 = v146 + v73;
                    v21->f64[0] = *(float64_t *)(v146 + v73);
                    v21->f64[v23] = *(float64_t *)(v76 + v75);
                  }
                  goto LABEL_34;
                }
              }
              goto LABEL_120;
            }
            if (v147 > 1)
            {
              if (v147 >= 3)
              {
                v56 = 0;
                v57 = 0;
                v27 = "index < m_rows * m_cols";
                while (v26 > v56)
                {
                  v58 = *(unsigned int *)(*(_QWORD *)(a5 + 8) + 4 * v57);
                  if (v24 <= v58)
                    goto LABEL_34;
                  v59 = (_QWORD *)(v152 + 8 * v58);
                  v60 = (_QWORD *)&v19->f64[v57];
                  *v60 = *v59;
                  v60[v18] = v59[v24];
                  v60[v31] = v59[v30];
                  if (v29 <= v56)
                    goto LABEL_90;
                  v21->f64[v57] = *(float64_t *)(v146 + 8 * v58);
                  v61 = *(unsigned int *)(*(_QWORD *)(a5 + 8) + 4 * v57);
                  if (v24 <= v61)
                    goto LABEL_90;
                  v62 = v146;
                  v63 = *(_QWORD *)(v146 + 8 * v61 + 8 * v24);
                  v21 = v137;
                  v64 = (char *)&v137->f64[v57];
                  *(_QWORD *)&v64[8 * v23] = v63;
                  v65 = *(unsigned int *)(*(_QWORD *)(a5 + 8) + 4 * v57);
                  if (v24 <= v65)
                    goto LABEL_90;
                  *(_QWORD *)&v64[4 * v32] = *(_QWORD *)(v62 + 8 * v65 + 8 * v30);
                  v56 = ++v57;
                  if (v22 <= v57)
                    goto LABEL_77;
                }
                goto LABEL_102;
              }
              if (!v26)
              {
LABEL_120:
                v27 = "index < m_rows * m_cols";
                v28 = 132;
                goto LABEL_35;
              }
              v71 = **(unsigned int **)(a5 + 8);
              if (v154 <= v71)
                goto LABEL_34;
LABEL_100:
              v77 = (float64_t *)(v152 + 8 * v71);
              v19->f64[0] = *v77;
              v19->f64[v18] = v77[v24];
              v19->f64[v31] = v77[v30];
              if (v29)
              {
                v78 = (float64_t *)(v146 + 8 * v71);
                v21->f64[0] = *v78;
                v21->f64[v23] = v78[v24];
              }
              goto LABEL_34;
            }
            if (!v26)
              goto LABEL_120;
            v66 = **(unsigned int **)(a5 + 8);
            if (v154 <= v66)
              goto LABEL_34;
            goto LABEL_88;
          }
          if (!v26)
            goto LABEL_120;
          v44 = **(unsigned int **)(a5 + 8);
          if (v154 <= v44)
            goto LABEL_34;
          goto LABEL_56;
        }
        if (!v26)
          goto LABEL_120;
        v80 = **(unsigned int **)(a5 + 8);
        if (v154 <= v80)
          goto LABEL_34;
        goto LABEL_119;
      }
      if (!v26)
        goto LABEL_120;
      v79 = **(unsigned int **)(a5 + 8);
      if (v154 <= v79)
        goto LABEL_34;
    }
    v19->f64[0] = *(float64_t *)(v152 + 8 * v79);
    goto LABEL_34;
  }
  if (os_signpost_enabled(MEMORY[0x24BDACB70]))
LABEL_18:
    _os_signpost_emit_unreliably_with_name_impl();
LABEL_19:
  if (v21 && v20)
    MEMORY[0x20BD36480](v21, 0x1000C8000313F17);
  if (v19 && (_DWORD)v18)
    MEMORY[0x20BD36480](v19, 0x1000C8000313F17);
  if (v146 && v149)
    MEMORY[0x20BD36480]();
  result = v152;
  if (v152)
  {
    if (v155)
      return MEMORY[0x20BD36480]();
  }
  return result;
}

void sub_20B647144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;
  int v34;

  if (v34 && v33)
    MEMORY[0x20BD36480](v33, 0x1000C8000313F17);
  if (a16 && a18)
    MEMORY[0x20BD36480]();
  if (a21 && a23)
    MEMORY[0x20BD36480](a21, 0x1000C8000313F17);
  if (a26 && a28)
    MEMORY[0x20BD36480]();
  if (a31)
  {
    if (a33)
      MEMORY[0x20BD36480]();
  }
  _Unwind_Resume(exception_object);
}

uint64_t GeomUtils::ransacFitPlane(uint64_t a1, double a2, uint64_t a3, _QWORD *a4, uint64_t a5, unsigned int *a6, _DWORD *a7)
{
  uint64_t result;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;

  result = Algo::RansacPlane(a1, 3u, 0xAu, 0x32u, 1u, a5, a6, a7, a2);
  v12 = *a6;
  if (*a6 > 2)
  {
    if (v12 == 3)
      v13 = 4;
    else
      v13 = *a6;
    if (4 * v13)
    {
      v14 = operator new[]();
      v12 = *a6;
      if (!*a6)
        goto LABEL_9;
    }
    else
    {
      v14 = 0;
    }
    v15 = *(_DWORD *)(a1 + 16);
    if (v15)
    {
      v16 = *(unsigned int **)(a5 + 8);
      v17 = *(unsigned int *)(a1 + 20);
      v18 = *(_QWORD *)(a1 + 8);
      if (v15 == 1)
      {
        v25 = *v16;
        if (v17 <= v25)
          goto LABEL_27;
        v26 = (_QWORD *)(v18 + 8 * v25);
        v19 = (_QWORD *)v14;
        goto LABEL_26;
      }
      v19 = (_QWORD *)(v14 + 8);
      if (v15 != 2)
      {
        v20 = 0;
        do
        {
          v21 = v16[v20];
          if (v17 <= v21 || v13 == v20)
            goto LABEL_27;
          v23 = (_QWORD *)(v18 + 8 * v21);
          v24 = (2 * v20) & 0x7FFFFFFE0;
          *(_QWORD *)(v14 + v24) = *v23;
          *(_QWORD *)((char *)v19 + v24) = v23[v17];
          *(_QWORD *)(v14 + 16 + v24) = v23[(2 * v17)];
          *(_QWORD *)(v14 + 24 + v24) = 0x3FF0000000000000;
          ++v20;
        }
        while (v12 != v20);
        if (v12 == 3)
        {
          if (v13 <= 3)
            __assert_rtn("operator()", "Matrix.hpp", 120, "row < m_rows && col < m_cols");
          *(_OWORD *)(v14 + 96) = 0u;
          *(_OWORD *)(v14 + 112) = 0u;
        }
LABEL_9:
        __assert_rtn("Svd0LowestSingularVector", "Matrix.hpp", 2414, "false");
      }
      v27 = *v16;
      if (v17 > v27)
      {
        v28 = (_QWORD *)(v18 + 8 * v27);
        *(_QWORD *)v14 = *v28;
        v26 = &v28[v17];
LABEL_26:
        *v19 = *v26;
      }
    }
LABEL_27:
    __assert_rtn("operator()", "Matrix.hpp", 120, "row < m_rows && col < m_cols");
  }
  *a6 = 0;
  *a4 = 0x4197D78400000000;
  return result;
}

void sub_20B647450(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  int v2;

  if (v2)
  {
    if (v1)
      MEMORY[0x20BD36480](v1, 0x1000C8000313F17);
  }
  _Unwind_Resume(exception_object);
}

void GeomUtils::estimateBestRotMat()
{
  __assert_rtn("Svd", "Matrix.hpp", 2407, "false");
}

void GeomUtils::estimatePlanePosition(uint64_t a1)
{
  _BYTE v1[8];

  Matrix<double>::Transpose((uint64_t)v1, a1);
}

void sub_20B647864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  MEMORY[0x20BD36480](v19, 0x1000C8000313F17);
  MEMORY[0x20BD36480](v18, 0x1000C8000313F17);
  if (v17)
  {
    if (a17)
    {
      MEMORY[0x20BD36480](v17, 0x1000C8000313F17);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t GeomUtils::CalcRotTrans(__int128 *a1, double *a2, double *a3, double a4, double a5, float64x2_t a6, float64x2_t a7, float64x2_t a8, float64x2_t a9, __n128 a10, float64x2_t a11, uint64_t a12, double *a13, float64x2_t *a14)
{
  int8x16_t v14;
  __int128 v19;
  int8x16_t v20;
  int8x16_t v21;
  double v24;
  int8x16_t v25;
  double v26;
  double v27;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  float64x2_t v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  float64x2_t v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  int8x16_t v76;
  int32x2_t v77;
  int64x2_t v78;
  double v80;
  double v81[3];
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  double v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  float64x2_t v90;
  double v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  int8x16_t v95;
  uint64_t v96;

  v89 = 0u;
  v90 = 0u;
  v87 = 0u;
  v88 = 0u;
  v84 = 0u;
  v85 = 0u;
  v82 = 0u;
  v83 = 0u;
  v19 = a1[1];
  v92 = *a1;
  v93 = v19;
  v20 = (int8x16_t)a1[3];
  v94 = a1[2];
  v21.i64[1] = *((_QWORD *)&v94 + 1);
  v95 = v20;
  v20.i64[0] = *((_QWORD *)&v92 + 1);
  v21.i64[0] = v93;
  *(_QWORD *)&a7.f64[0] = v95.i64[1];
  *(_QWORD *)&a6.f64[0] = v95.i64[0];
  a8.f64[0] = *((float64_t *)&v93 + 1);
  a9.f64[0] = *((float64_t *)&v94 + 1);
  *((_QWORD *)&v92 + 1) = *((_QWORD *)&v93 + 1);
  *(_QWORD *)&v93 = v95.i64[0];
  v95.i64[0] = v21.i64[0];
  v95.i64[1] = *((_QWORD *)&v94 + 1);
  v91 = 0.0;
  v86 = 0.0;
  memset(v81, 0, sizeof(v81));
  v96 = *((_QWORD *)a1 + 8);
  *((_QWORD *)&v93 + 1) = v20.i64[0];
  *((_QWORD *)&v94 + 1) = *(_QWORD *)&a7.f64[0];
  svd_os(3, (double *)&v92, (double *)&v87, v81, (double *)&v82, v20, v21, a6, a7, a8, a9, a10, a11);
  _Q0 = v90;
  _Q3.i64[0] = 0;
  v24 = *(double *)&v87 * 0.0 + 0.0;
  *(double *)v25.i64 = vmlad_n_f64(*((double *)&v88 + 1) + v24, 0.0, v90.f64[0]);
  v26 = vmlad_n_f64(0.0 - *(double *)&v87 + *((double *)&v88 + 1) * 0.0, 0.0, v90.f64[0]);
  v27 = v90.f64[0] + v24 + *((double *)&v88 + 1) * 0.0;
  __asm
  {
    FMLA            D10, D3, V0.D[1]
    FMLA            D11, D3, V0.D[1]
  }
  v80 = v90.f64[1];
  v33 = v90.f64[1] + *((double *)&v87 + 1) * 0.0 + 0.0 + *(double *)&v89 * 0.0;
  v34 = *(double *)&v88 * 0.0 + 0.0;
  v35 = v91;
  v36 = v34 + *((double *)&v89 + 1) * 0.0 + v91;
  *(double *)v14.i64 = *(double *)v25.i64 * *(double *)&v82 + 0.0 + v26 * *((double *)&v82 + 1) + v27 * *(double *)&v83;
  v37 = _D10 * *((double *)&v83 + 1) + 0.0 + _D11 * *(double *)&v84 + v33 * *((double *)&v84 + 1);
  if ((*(_QWORD *)&v37 ^ v14.i64[0]) < 0
    || (v38 = v34 + *((double *)&v89 + 1) + v91 * 0.0,
        v39 = 0.0 - *(double *)&v88 + *((double *)&v89 + 1) * 0.0 + v91 * 0.0,
        ((COERCE_UNSIGNED_INT64(v38 * *(double *)&v85 + 0.0 + v39 * *((double *)&v85 + 1) + v36 * v86) ^ v14.i64[0]) & 0x8000000000000000) != 0))
  {
    v55 = vmlad_n_f64(v24 - *((double *)&v88 + 1), 0.0, v90.f64[0]);
    v56 = vmlad_n_f64(*(double *)&v87 + 0.0 + *((double *)&v88 + 1) * 0.0, 0.0, v90.f64[0]);
    __asm
    {
      FMLA            D26, D3, V0.D[1]
      FMLA            D25, D3, V0.D[1]
    }
    v59 = v34 - *((double *)&v89 + 1) + v91 * 0.0;
    v60 = *(double *)&v88 + 0.0 + *((double *)&v89 + 1) * 0.0 + v91 * 0.0;
    *(double *)v25.i64 = v55 * *(double *)&v82 + 0.0 + v56 * *((double *)&v82 + 1) + v27 * *(double *)&v83;
    v61 = v55 * *((double *)&v83 + 1) + 0.0 + v56 * *(double *)&v84 + v27 * *((double *)&v84 + 1);
    v62 = v55 * *(double *)&v85 + 0.0 + v56 * *((double *)&v85 + 1) + v27 * v86;
    v63 = _D26 * *(double *)&v82 + 0.0 + _D25 * *((double *)&v82 + 1) + v33 * *(double *)&v83;
    v64 = _D26 * *((double *)&v83 + 1) + 0.0 + _D25 * *(double *)&v84 + v33 * *((double *)&v84 + 1);
    v65 = _D26 * *(double *)&v85 + 0.0 + _D25 * *((double *)&v85 + 1) + v33 * v86;
    v66 = v59 * *(double *)&v82 + 0.0 + v60 * *((double *)&v82 + 1) + v36 * *(double *)&v83;
    v67 = v59 * *((double *)&v83 + 1) + 0.0 + v60 * *(double *)&v84 + v36 * *((double *)&v84 + 1);
    v68 = v59 * *(double *)&v85 + 0.0 + v60 * *((double *)&v85 + 1) + v36 * v86;
    _Q3.i64[0] = 1.0;
    v69.f64[0] = NAN;
    v69.f64[1] = NAN;
    v70 = *(double *)vbslq_s8((int8x16_t)vnegq_f64(v69), _Q3, v25).i64;
    v46 = *(double *)v25.i64 * v70;
    v47 = v70 * v61;
    v48 = v70 * v62;
    v49 = v63 * v70;
    v50 = v70 * v64;
    v51 = v70 * v65;
    v52 = v66 * v70;
    v53 = v70 * v67;
    v54 = v70 * v68;
  }
  else
  {
    v40 = v38 * *(double *)&v85 + 0.0 + v39 * *((double *)&v85 + 1) + v36 * v86;
    v41 = _D10 * *(double *)&v85 + 0.0 + _D11 * *((double *)&v85 + 1) + v33 * v86;
    v42 = v38 * *(double *)&v82 + 0.0 + v39 * *((double *)&v82 + 1) + v36 * *(double *)&v83;
    v43 = v38 * *((double *)&v83 + 1) + 0.0 + v39 * *(double *)&v84 + v36 * *((double *)&v84 + 1);
    _Q3.i64[0] = 1.0;
    v44.f64[0] = NAN;
    v44.f64[1] = NAN;
    v45 = *(double *)vbslq_s8((int8x16_t)vnegq_f64(v44), _Q3, v14).i64;
    v46 = *(double *)v14.i64 * v45;
    v47 = v45 * (*(double *)v25.i64 * *((double *)&v83 + 1) + 0.0 + v26 * *(double *)&v84 + v27 * *((double *)&v84 + 1));
    v48 = v45 * (*(double *)v25.i64 * *(double *)&v85 + 0.0 + v26 * *((double *)&v85 + 1) + v27 * v86);
    v49 = (_D10 * *(double *)&v82 + 0.0 + _D11 * *((double *)&v82 + 1) + v33 * *(double *)&v83) * v45;
    v50 = v45 * v37;
    v51 = v45 * v41;
    v52 = v42 * v45;
    v53 = v45 * v43;
    v54 = v45 * v40;
  }
  *a13 = v46;
  a13[1] = v47;
  a13[2] = v48;
  a13[3] = v49;
  a13[4] = v50;
  a13[5] = v51;
  a13[6] = v52;
  a13[7] = v53;
  a13[8] = v54;
  v71 = *a3 - *a2;
  v72 = a3[1] - a2[1];
  v73 = a3[2] - a2[2];
  v74 = sqrt(v71 * v71 + 0.0 + v72 * v72 + v73 * v73);
  _NF = v71 / v74 * _Q0.f64[0] + 0.0 + v72 / v74 * v80 + v73 / v74 * v35 < 0.0;
  v76 = (int8x16_t)vnegq_f64(_Q0);
  if (_NF)
    v35 = -v35;
  v77 = vdup_n_s32(_NF);
  v78.i64[0] = v77.u32[0];
  v78.i64[1] = v77.u32[1];
  *a14 = vmulq_n_f64((float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v78, 0x3FuLL)), v76, (int8x16_t)_Q0), v74);
  a14[1].f64[0] = v74 * v35;
  return 0;
}

void *GeomUtils::homogDist2d(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, double a6)
{
  unsigned int v12;
  unsigned int v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  float64x2_t *v19;
  int v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float64x2_t *v26;
  float64x2_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double *v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  float64x2_t *v38;
  uint64_t v39;
  double *v40;
  double *v41;
  int v42;
  double v43;
  uint64_t v44;
  unint64_t v45;
  void *result;
  uint64_t v47;
  unsigned int v48;
  const char *v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  int v55;
  uint64_t v56;
  float64x2_t *v57;
  char *v58;
  uint64_t v59;
  float64x2_t *v60;
  float64_t *v61;
  char *v62;
  unint64_t v63;
  char *v64;
  float64x2_t *v65;
  BOOL v67;
  BOOL v69;
  BOOL v71;
  BOOL v73;
  BOOL v75;
  BOOL v77;
  BOOL v78;
  float64x2_t *v79;
  float64x2_t *v80;
  uint64_t v81;
  float64x2_t v82;
  char *v83;
  float64x2_t *v84;
  float64x2_t *v85;
  uint64_t v86;
  float64x2_t v87;
  unsigned int *v88;
  unint64_t v89;
  unsigned int v90;
  int v91;
  uint64_t (**v92)();
  void *__src;
  unsigned int v94;
  unsigned int v95;
  BOOL v96;
  unint64_t v97;

  v12 = *(_DWORD *)(a1 + 16);
  v13 = *(_DWORD *)(a2 + 20);
  v92 = &off_24C4213F8;
  if (v13 * v12)
    v14 = (void *)operator new[]();
  else
    v14 = 0;
  __src = v14;
  v94 = v12;
  v95 = v13;
  v96 = v13 * v12 != 0;
  v97 = 8 * v12 * (unint64_t)v13;
  Matrix<double>::MultAxBToC(a1, a2, (uint64_t)&v92);
  v15 = v95;
  v16 = v94 * (unint64_t)v95;
  v17 = 8 * v16;
  v88 = a5;
  if (8 * v16)
  {
    v18 = 8 * v16;
    v19 = (float64x2_t *)operator new[]();
    v20 = 1;
    v17 = v18;
  }
  else
  {
    v20 = 0;
    v19 = 0;
  }
  v21 = __src;
  v89 = v17;
  memcpy(v19, __src, v17);
  if (v21 && v96)
    MEMORY[0x20BD36480](v21, 0x1000C8000313F17);
  v22 = 8 * v15;
  if ((_DWORD)v15)
    v23 = operator new[]();
  else
    v23 = 0;
  v24 = *(unsigned int *)(a3 + 20);
  v25 = (2 * v24);
  if ((_DWORD)v25)
    v26 = (float64x2_t *)operator new[]();
  else
    v26 = 0;
  v90 = 2 * v24;
  v91 = v20;
  if (!(_DWORD)v24)
  {
    memcpy(0, v26, 8 * (2 * v24));
    v35 = 0;
    goto LABEL_29;
  }
  v27 = *(float64x2_t **)(a3 + 8);
  v28 = 8 * v25;
  v29 = 8 * v24;
  if (v24 < 0x14)
  {
    LODWORD(v30) = 0;
LABEL_19:
    v31 = (double *)v26;
    goto LABEL_20;
  }
  LODWORD(v30) = 0;
  v56 = (v24 - 1);
  v57 = (float64x2_t *)&v26->f64[v56 + 1];
  v58 = (char *)v26 + v29;
  v59 = v56 * 8 + 8 + v29;
  v60 = (float64x2_t *)((char *)v26 + v59);
  v61 = &v27->f64[v56 + 1];
  v62 = (char *)v27 + v28;
  v63 = (unint64_t)&v27->f64[v56 + 1 + (unint64_t)v28 / 8];
  v64 = (char *)v27 + v29;
  v65 = (float64x2_t *)((char *)v27 + v59);
  v67 = v26 < (float64x2_t *)v61 && v27 < v57;
  v69 = (unint64_t)v26 < v63 && v62 < (char *)v57;
  v71 = v26 < v65 && v64 < (char *)v57;
  v73 = v58 < (char *)v61 && v27 < v60;
  v75 = (unint64_t)v58 < v63 && v62 < (char *)v60;
  v77 = v58 < (char *)v65 && v64 < (char *)v60;
  v78 = v58 >= (char *)v57 || v26 >= v60;
  if (!v78 || v67 || v69 || v71 || v73 || v75 || v77)
    goto LABEL_19;
  v30 = v24 & 0xFFFFFFFE;
  v79 = (float64x2_t *)((char *)v27 + 8 * v30);
  v80 = v26;
  v81 = v30;
  do
  {
    v82 = *(float64x2_t *)((char *)v27 + 8 * v25);
    *v80 = vdivq_f64(*v27, v82);
    *(float64x2_t *)((char *)v80++ + 8 * v24) = vdivq_f64(*(float64x2_t *)((char *)v27++ + 8 * v24), v82);
    v81 -= 2;
  }
  while (v81);
  if (v30 == v24)
    goto LABEL_22;
  v31 = &v26->f64[v30];
  v27 = v79;
LABEL_20:
  v32 = v24 - v30;
  do
  {
    *v31 = v27->f64[0] / v27->f64[v25];
    v31[v24] = v27->f64[v24] / v27->f64[v25];
    ++v31;
    v27 = (float64x2_t *)((char *)v27 + 8);
    --v32;
  }
  while (v32);
LABEL_22:
  v33 = operator new[]();
  memcpy((void *)v33, v26, 8 * v25);
  v34 = v33 + v28 + 8 * v24;
  if (v34 <= v33 + v28 + 8)
    v34 = v33 + v28 + 8;
  memset_pattern16((void *)(v33 + v28), &unk_20B6D2B00, ((~v33 - v28 + v34) & 0xFFFFFFFFFFFFFFF8) + 8);
  v35 = (void *)operator new[]();
  memcpy(v35, (const void *)v33, 24 * v24);
  MEMORY[0x20BD36480](v33, 0x1000C8000313F17);
  if (v90 && v26)
    MEMORY[0x20BD36480](v26, 0x1000C8000313F17);
LABEL_29:
  v36 = (2 * v15);
  v37 = 8 * v36;
  if ((_DWORD)v36)
  {
    v38 = (float64x2_t *)operator new[]();
    if ((_DWORD)v15)
      goto LABEL_31;
LABEL_40:
    memcpy(0, v38, 8 * v36);
    v44 = 0;
    goto LABEL_41;
  }
  v38 = 0;
  if (!(_DWORD)v15)
    goto LABEL_40;
LABEL_31:
  if (v15 < 0x1C)
  {
    LODWORD(v39) = 0;
LABEL_33:
    v40 = (double *)v19;
    v41 = (double *)v38;
    goto LABEL_34;
  }
  LODWORD(v39) = 0;
  v83 = (char *)v38 + v22;
  if ((unint64_t)((char *)v38 - (char *)v19) < 0x10
    || (unint64_t)(v83 - ((char *)v19 + v37)) < 0x10
    || (unint64_t)(v83 - (char *)v19) < 0x10
    || (unint64_t)((char *)v19 + v22 - (char *)v38) < 0x10
    || (unint64_t)((char *)v38 - ((char *)v19 + v37)) < 0x10)
  {
    goto LABEL_33;
  }
  v40 = (double *)v19;
  v41 = (double *)v38;
  if ((unint64_t)((char *)v38 - (char *)v19) >= 0x10)
  {
    v39 = v15 & 0xFFFFFFFE;
    v40 = &v19->f64[v39];
    v84 = v19;
    v85 = v38;
    v86 = v39;
    do
    {
      v87 = *(float64x2_t *)((char *)v84 + 8 * v36);
      *v85 = vdivq_f64(*v84, v87);
      *(float64x2_t *)((char *)v85++ + 8 * v15) = vdivq_f64(*(float64x2_t *)((char *)v84++ + 8 * v15), v87);
      v86 -= 2;
    }
    while (v86);
    if (v39 == v15)
      goto LABEL_36;
    v41 = &v38->f64[v39];
  }
LABEL_34:
  v42 = v15 - v39;
  do
  {
    v43 = v40[v36];
    *v41 = *v40 / v43;
    v41[v15] = v40[v15] / v43;
    ++v41;
    ++v40;
    --v42;
  }
  while (v42);
LABEL_36:
  v44 = operator new[]();
  memcpy((void *)v44, v38, 8 * v36);
  v45 = v44 + v37 + 8 * v15;
  if (v45 <= v44 + v37 + 8)
    v45 = v44 + v37 + 8;
  memset_pattern16((void *)(v44 + v37), &unk_20B6D2B00, ((~v44 - v37 + v45) & 0xFFFFFFFFFFFFFFF8) + 8);
LABEL_41:
  if (v89 < 24 * v15)
  {
    if (v89 && v19)
      MEMORY[0x20BD36480](v19, 0x1000C8000313F17);
    v91 = 1;
    v19 = (float64x2_t *)operator new[]();
  }
  result = memcpy(v19, (const void *)v44, 24 * v15);
  if ((_DWORD)v15 && v44)
    result = (void *)MEMORY[0x20BD36480](v44, 0x1000C8000313F17);
  if ((_DWORD)v36 && v38)
    result = (void *)MEMORY[0x20BD36480](v38, 0x1000C8000313F17);
  if (!(_DWORD)v15)
  {
    *v88 = 0;
    if (!v91)
      goto LABEL_65;
    goto LABEL_63;
  }
  v47 = 0;
  v48 = 0;
  v49 = "row < m_rows && col < m_cols";
  do
  {
    if (v24 == v47)
    {
      v55 = 120;
LABEL_130:
      __assert_rtn("operator()", "Matrix.hpp", v55, v49);
    }
    v50 = *((double *)v35 + v47) - v19->f64[v47];
    v51 = *((double *)v35 + v24 + v47) - v19->f64[v15 + v47];
    v52 = v51 * v51 + v50 * v50;
    v53 = *((double *)v35 + v90 + v47) - v19->f64[v36 + v47];
    v54 = v52 + v53 * v53;
    *(double *)(v23 + 8 * v47) = v54;
    if (v54 < a6)
    {
      if (*(_DWORD *)(a4 + 20) * *(_DWORD *)(a4 + 16) <= v48)
      {
        v55 = 132;
        v49 = "index < m_rows * m_cols";
        goto LABEL_130;
      }
      *(_DWORD *)(*(_QWORD *)(a4 + 8) + 4 * v48++) = v47;
    }
    ++v47;
  }
  while (v15 != v47);
  *v88 = v48;
  result = (void *)MEMORY[0x20BD36480](v23, 0x1000C8000313F17);
  if (v91)
  {
LABEL_63:
    if (v19)
      result = (void *)MEMORY[0x20BD36480](v19, 0x1000C8000313F17);
  }
LABEL_65:
  if ((_DWORD)v24)
  {
    if (v35)
      JUMPOUT(0x20BD36480);
  }
  return result;
}

void sub_20B648440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;

  if (v21 && v23)
    MEMORY[0x20BD36480](v23, 0x1000C8000313F17);
  if (v25 && v24)
    MEMORY[0x20BD36480](v24, 0x1000C8000313F17);
  if (v21 && v20)
    MEMORY[0x20BD36480](v20, 0x1000C8000313F17);
  if (a15 && v19)
    MEMORY[0x20BD36480](v19, 0x1000C8000313F17);
  if (v22)
  {
    if (a10)
      MEMORY[0x20BD36480](v22, 0x1000C8000313F17);
  }
  _Unwind_Resume(exception_object);
}

BOOL GeomUtils::check3of4SpotsOnSameLine(uint64_t a1, uint64_t a2)
{
  double *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double *v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double *v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double *v46;

  if (*(_DWORD *)(a1 + 20) != 4 || *(_DWORD *)(a1 + 16) != 3)
    __assert_rtn("check3of4SpotsOnSameLine", "GeomUtils.cpp", 1201, "x1.Cols()==4 && x1.Rows()==3");
  if (*(_DWORD *)(a2 + 20) != 4 || *(_DWORD *)(a2 + 16) != 3)
    __assert_rtn("check3of4SpotsOnSameLine", "GeomUtils.cpp", 1202, "x2.Cols()==4 && x2.Rows()==3");
  v3 = *(double **)(a1 + 8);
  v5 = *v3;
  v4 = v3[1];
  v6 = v3[4];
  v7 = v3[5];
  v9 = v3[8];
  v8 = v3[9];
  v10 = v3[2];
  v11 = v3[6];
  v12 = v3[10];
  v13 = v7 * v12 - v11 * v8;
  v14 = -(v11 * v9);
  v15 = v6 * v8 - v7 * v9;
  if (fabs(*v3 * v13 - v4 * (v9 * v12 - v11 * v9) + v10 * v15) < 0.00000011920929)
    return 1;
  v16 = v3[3];
  v17 = v3[7];
  v18 = v3[11];
  v19 = v9 * v18 - v17 * v9;
  if (fabs(v19 * -v4 + v5 * (v7 * v18 - v17 * v8) + v16 * v15) < 0.00000011920929)
    return 1;
  v20 = v12 * -v17 + v11 * v18;
  if (fabs(v5 * v20 - v10 * v19 + v16 * (v14 + v6 * v12)) < 0.00000011920929)
    return 1;
  if (fabs((v8 * v18 - v17 * v8) * -v10 + v4 * v20 + v16 * v13) < 0.00000011920929)
    return 1;
  v21 = *(double **)(a2 + 8);
  v22 = v21[1];
  v23 = v21[5];
  v24 = v21[8];
  v25 = v21[9];
  v26 = v21[4] * v25 - v23 * v24;
  if (fabs(*v21 * (v23 * v21[10] - v21[6] * v25) - v22 * (v24 * v21[10] - v21[6] * v24) + v21[2] * v26) < 0.00000011920929
    || fabs((v24 * v21[11] - v21[7] * v24) * -v22 + *v21 * (v23 * v21[11] - v21[7] * v25) + v21[3] * v26) < 0.00000011920929)
  {
    return 1;
  }
  v29 = *(double *)Matrix<double>::operator()(a2, 0, 0);
  v27 = 1;
  v30 = *(double *)Matrix<double>::operator()(a2, 1u, 0);
  v31 = *(double *)Matrix<double>::operator()(a2, 2u, 0);
  v32 = *(double *)Matrix<double>::operator()(a2, 0, 2u);
  v33 = *(double *)Matrix<double>::operator()(a2, 1u, 2u);
  v34 = *(double *)Matrix<double>::operator()(a2, 2u, 2u);
  v35 = *(double *)Matrix<double>::operator()(a2, 0, 3u);
  v36 = *(double *)Matrix<double>::operator()(a2, 1u, 3u);
  v37 = (double *)Matrix<double>::operator()(a2, 2u, 3u);
  if (fabs(v29 * (v33 * *v37 - v36 * v34) - v32 * (v31 * *v37 - v36 * v31) + v35 * (v30 * v34 - v33 * v31)) >= 0.00000011920929)
  {
    v38 = *(double *)Matrix<double>::operator()(a2, 0, 1u);
    v39 = *(double *)Matrix<double>::operator()(a2, 1u, 1u);
    v40 = *(double *)Matrix<double>::operator()(a2, 2u, 1u);
    v41 = *(double *)Matrix<double>::operator()(a2, 0, 2u);
    v42 = *(double *)Matrix<double>::operator()(a2, 1u, 2u);
    v43 = *(double *)Matrix<double>::operator()(a2, 2u, 2u);
    v44 = *(double *)Matrix<double>::operator()(a2, 0, 3u);
    v45 = *(double *)Matrix<double>::operator()(a2, 1u, 3u);
    v46 = (double *)Matrix<double>::operator()(a2, 2u, 3u);
    return fabs(v38 * (v42 * *v46 - v45 * v43) - v41 * (v40 * *v46 - v45 * v40) + v44 * (v39 * v43 - v42 * v40)) < 0.00000011920929;
  }
  return v27;
}

uint64_t Matrix<double>::operator()(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;

  if (*(_DWORD *)(a1 + 16) <= a2 || (v3 = *(_DWORD *)(a1 + 20), v3 <= a3))
    __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
  return *(_QWORD *)(a1 + 8) + 8 * a3 + 8 * v3 * a2;
}

float32x2_t GeomUtils::ExtrinsicsToSimd4x3(float64x2_t *a1)
{
  float64x2_t v1;

  v1 = *a1;
  v1.f64[1] = a1[1].f64[1];
  return vcvt_f32_f64(v1);
}

double GeomUtils::ExtrinsicsFromSimd4x3(float64x2_t *a1, float64x2_t *a2, int8x16_t a3, int8x16_t a4, __n128 a5, __n128 a6)
{
  float64x2_t v6;
  float32x2_t v7;
  double result;

  a1->f64[0] = *(float *)a3.i32;
  a1->f64[1] = *(float *)a4.i32;
  v6 = vcvtq_f64_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(a3, a3, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(a4, a4, 8uLL)));
  v7 = (float32x2_t)vzip2_s32(*(int32x2_t *)a4.i8, (int32x2_t)a5.n128_u64[0]);
  a5.n128_u32[1] = a3.u32[1];
  a1[1] = vcvtq_f64_f32((float32x2_t)a5.n128_u64[0]);
  a1[2] = vcvtq_f64_f32(v7);
  a1[3] = v6;
  a1[4].f64[0] = a5.n128_f32[2];
  *a2 = vcvtq_f64_f32((float32x2_t)a6.n128_u64[0]);
  result = a6.n128_f32[2];
  a2[1].f64[0] = a6.n128_f32[2];
  return result;
}

void SparseMatrix::SparseMatrix(SparseMatrix *this, int a2, int a3, const int *a4, int a5, int a6)
{
  void *v9;
  _DWORD *v10;
  uint64_t v11;
  int v12;
  _DWORD *v13;
  uint64_t v14;

  *((_DWORD *)this + 10) = a2;
  *((_DWORD *)this + 11) = a6;
  *((_DWORD *)this + 8) = a5 + a3 * a6;
  *((_DWORD *)this + 9) = a3;
  *(_QWORD *)this = operator new[]();
  *((_QWORD *)this + 1) = operator new[]();
  *((_QWORD *)this + 2) = operator new[]();
  v9 = (void *)operator new[]();
  *((_QWORD *)this + 3) = v9;
  bzero(v9, 4 * *((int *)this + 9));
  v10 = (_DWORD *)*((_QWORD *)this + 2);
  *v10 = 0;
  if (*((int *)this + 9) >= 2)
  {
    v11 = 0;
    v12 = 0;
    v13 = v10 + 1;
    do
    {
      v12 += a6 + a4[v11];
      v13[v11] = v12;
      v14 = v11 + 2;
      ++v11;
    }
    while (v14 < *((int *)this + 9));
  }
}

uint64_t SparseMatrix::allocateMem(SparseMatrix *this)
{
  uint64_t result;

  *(_QWORD *)this = operator new[]();
  *((_QWORD *)this + 1) = operator new[]();
  *((_QWORD *)this + 2) = operator new[]();
  result = operator new[]();
  *((_QWORD *)this + 3) = result;
  return result;
}

void SparseMatrix::SparseMatrix(SparseMatrix *a1, int a2, int a3, const int **a4, int a5)
{
  const int *v7;
  const int *v8;
  unint64_t v9;
  int v10;
  const int *v11;
  uint64_t v12;
  int32x4_t *v13;
  int32x4_t v14;
  uint64_t v15;
  int32x4_t v16;
  int v17;

  v7 = *a4;
  v8 = a4[1];
  if (v7 == v8)
  {
    v10 = 0;
    goto LABEL_5;
  }
  v9 = (char *)v8 - (char *)v7 - 4;
  if (v9 < 0x1C)
  {
    v10 = 0;
    v11 = v7;
    goto LABEL_10;
  }
  v12 = (v9 >> 2) + 1;
  v13 = (int32x4_t *)(v7 + 4);
  v14 = 0uLL;
  v15 = v12 & 0x7FFFFFFFFFFFFFF8;
  v16 = 0uLL;
  do
  {
    v14 = vaddq_s32(v13[-1], v14);
    v16 = vaddq_s32(*v13, v16);
    v13 += 2;
    v15 -= 8;
  }
  while (v15);
  v10 = vaddvq_s32(vaddq_s32(v16, v14));
  if (v12 != (v12 & 0x7FFFFFFFFFFFFFF8))
  {
    v11 = &v7[v12 & 0x7FFFFFFFFFFFFFF8];
    do
    {
LABEL_10:
      v17 = *v11++;
      v10 += v17;
    }
    while (v11 != v8);
  }
LABEL_5:
  SparseMatrix::SparseMatrix(a1, a2, a3, v7, v10, a5);
}

{
  const int *v7;
  const int *v8;
  unint64_t v9;
  int v10;
  const int *v11;
  uint64_t v12;
  int32x4_t *v13;
  int32x4_t v14;
  uint64_t v15;
  int32x4_t v16;
  int v17;

  v7 = *a4;
  v8 = a4[1];
  if (v7 == v8)
  {
    v10 = 0;
    goto LABEL_5;
  }
  v9 = (char *)v8 - (char *)v7 - 4;
  if (v9 < 0x1C)
  {
    v10 = 0;
    v11 = v7;
    goto LABEL_10;
  }
  v12 = (v9 >> 2) + 1;
  v13 = (int32x4_t *)(v7 + 4);
  v14 = 0uLL;
  v15 = v12 & 0x7FFFFFFFFFFFFFF8;
  v16 = 0uLL;
  do
  {
    v14 = vaddq_s32(v13[-1], v14);
    v16 = vaddq_s32(*v13, v16);
    v13 += 2;
    v15 -= 8;
  }
  while (v15);
  v10 = vaddvq_s32(vaddq_s32(v16, v14));
  if (v12 != (v12 & 0x7FFFFFFFFFFFFFF8))
  {
    v11 = &v7[v12 & 0x7FFFFFFFFFFFFFF8];
    do
    {
LABEL_10:
      v17 = *v11++;
      v10 += v17;
    }
    while (v11 != v8);
  }
LABEL_5:
  SparseMatrix::SparseMatrix(a1, a2, a3, v7, v10, a5);
}

void SparseMatrix::SparseMatrix(SparseMatrix *this)
{
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
}

{
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
}

double SparseMatrix::freeMem(SparseMatrix *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v2 = *(_QWORD *)this;
  if (v2)
    MEMORY[0x20BD36480](v2, 0x1000C8000313F17);
  v3 = *((_QWORD *)this + 1);
  if (v3)
    MEMORY[0x20BD36480](v3, 0x1000C8052888210);
  v4 = *((_QWORD *)this + 2);
  if (v4)
    MEMORY[0x20BD36480](v4, 0x1000C8052888210);
  v5 = *((_QWORD *)this + 3);
  if (v5)
    MEMORY[0x20BD36480](v5, 0x1000C8052888210);
  result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

void SparseMatrix::~SparseMatrix(SparseMatrix *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)this;
  if (v2)
    MEMORY[0x20BD36480](v2, 0x1000C8000313F17);
  v3 = *((_QWORD *)this + 1);
  if (v3)
    MEMORY[0x20BD36480](v3, 0x1000C8052888210);
  v4 = *((_QWORD *)this + 2);
  if (v4)
    MEMORY[0x20BD36480](v4, 0x1000C8052888210);
  v5 = *((_QWORD *)this + 3);
  if (v5)
    MEMORY[0x20BD36480](v5, 0x1000C8052888210);
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)this;
  if (v2)
    MEMORY[0x20BD36480](v2, 0x1000C8000313F17);
  v3 = *((_QWORD *)this + 1);
  if (v3)
    MEMORY[0x20BD36480](v3, 0x1000C8052888210);
  v4 = *((_QWORD *)this + 2);
  if (v4)
    MEMORY[0x20BD36480](v4, 0x1000C8052888210);
  v5 = *((_QWORD *)this + 3);
  if (v5)
    MEMORY[0x20BD36480](v5, 0x1000C8052888210);
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
}

void SparseMatrix::SparseMatrix(SparseMatrix *this, const SparseMatrix *a2)
{
  *((_OWORD *)this + 2) = *((_OWORD *)a2 + 2);
  *(_QWORD *)this = operator new[]();
  *((_QWORD *)this + 1) = operator new[]();
  *((_QWORD *)this + 2) = operator new[]();
  *((_QWORD *)this + 3) = operator new[]();
  memcpy(*(void **)this, *(const void **)a2, 8 * *((int *)this + 8));
  memcpy(*((void **)this + 1), *((const void **)a2 + 1), 4 * *((int *)this + 8));
  memcpy(*((void **)this + 2), *((const void **)a2 + 2), 4 * *((int *)this + 9));
  memcpy(*((void **)this + 3), *((const void **)a2 + 3), 4 * *((int *)this + 9));
}

{
  *((_OWORD *)this + 2) = *((_OWORD *)a2 + 2);
  *(_QWORD *)this = operator new[]();
  *((_QWORD *)this + 1) = operator new[]();
  *((_QWORD *)this + 2) = operator new[]();
  *((_QWORD *)this + 3) = operator new[]();
  memcpy(*(void **)this, *(const void **)a2, 8 * *((int *)this + 8));
  memcpy(*((void **)this + 1), *((const void **)a2 + 1), 4 * *((int *)this + 8));
  memcpy(*((void **)this + 2), *((const void **)a2 + 2), 4 * *((int *)this + 9));
  memcpy(*((void **)this + 3), *((const void **)a2 + 3), 4 * *((int *)this + 9));
}

double SparseMatrix::SparseMatrix(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  double result;

  *a1 = *a2;
  v2 = a2[2];
  a1[1] = a2[1];
  a1[2] = v2;
  result = 0.0;
  *a2 = 0u;
  a2[1] = 0u;
  return result;
}

{
  __int128 v2;
  double result;

  *a1 = *a2;
  v2 = a2[2];
  a1[1] = a2[1];
  a1[2] = v2;
  result = 0.0;
  *a2 = 0u;
  a2[1] = 0u;
  return result;
}

uint64_t *SparseMatrix::operator=(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v4 = *a1;
  if (v4)
    MEMORY[0x20BD36480](v4, 0x1000C8000313F17);
  v5 = a1[1];
  if (v5)
    MEMORY[0x20BD36480](v5, 0x1000C8052888210);
  v6 = a1[2];
  if (v6)
    MEMORY[0x20BD36480](v6, 0x1000C8052888210);
  v7 = a1[3];
  if (v7)
    MEMORY[0x20BD36480](v7, 0x1000C8052888210);
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *(_OWORD *)a1 = *a2;
  v8 = a2[2];
  *((_OWORD *)a1 + 1) = a2[1];
  *((_OWORD *)a1 + 2) = v8;
  *a2 = 0u;
  a2[1] = 0u;
  return a1;
}

uint64_t SparseMatrix::AddValue(uint64_t this, int a2, int a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;

  v5 = *(_QWORD *)(this + 16);
  v4 = *(_QWORD *)(this + 24);
  v6 = *(_DWORD *)(v4 + 4 * a3) + *(_DWORD *)(v5 + 4 * a3);
  if (*(_DWORD *)(this + 36) - 1 == a3)
    v7 = *(_DWORD *)(this + 32);
  else
    v7 = *(_DWORD *)(v5 + 4 * a3 + 4);
  if (v6 >= v7)
    __assert_rtn("AddValue", "SparseMatrix.cpp", 124, "(col != m_width-1 && index < m_colIndices[col+1]) || (col == m_width-1 && index < m_maxNNZ)");
  v8 = *(_QWORD *)(this + 8);
  *(double *)(*(_QWORD *)this + 8 * v6) = a4;
  *(_DWORD *)(v8 + 4 * v6) = a2;
  ++*(_DWORD *)(v4 + 4 * a3);
  return this;
}

uint64_t SparseMatrix::Expand(uint64_t this, int a2, unint64_t a3)
{
  unint64_t v3;

  v3 = *(int *)(this + 44);
  if (v3 < a3)
    __assert_rtn("Expand", "SparseMatrix.cpp", 134, "newNZPerCol <= (size_t)m_extraSpacePerCol");
  *(_DWORD *)(this + 40) += a2;
  *(_DWORD *)(this + 44) = v3 - a3;
  return this;
}

uint64_t SparseMatrix::Squeeze(uint64_t this, int a2, int a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_DWORD *)(this + 36);
  v4 = *(_DWORD *)(this + 44) + a3;
  *(_DWORD *)(this + 40) -= a2;
  *(_DWORD *)(this + 44) = v4;
  if (v3 >= 1)
  {
    v5 = 0;
    v6 = *(_QWORD *)(this + 24);
    do
      *(_DWORD *)(v6 + 4 * v5++) -= a3;
    while (v5 < *(int *)(this + 36));
  }
  return this;
}

double SparseMatrix::operator()(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  double result;
  uint64_t i;

  if (*(_DWORD *)(a1 + 40) <= a2 || *(_DWORD *)(a1 + 36) <= a3)
    __assert_rtn("operator()", "SparseMatrix.cpp", 154, "row<(int)GetMatrixHeight() && col<(int)GetMatrixWidth()");
  v3 = *(unsigned int *)(*(_QWORD *)(a1 + 24) + 4 * a3);
  result = 0.0;
  if ((int)v3 >= 1)
  {
    for (i = *(int *)(*(_QWORD *)(a1 + 16) + 4 * a3); *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * i) != a2; ++i)
    {
      if (!--v3)
        return result;
    }
    return *(double *)(*(_QWORD *)a1 + 8 * i);
  }
  return result;
}

uint64_t SparseMatrix::GetMatrixHeight(SparseMatrix *this)
{
  return *((int *)this + 10);
}

uint64_t SparseMatrix::GetMatrixWidth(SparseMatrix *this)
{
  return *((int *)this + 9);
}

uint64_t SparseMatrix::MultATagxB@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;

  v6 = *((unsigned int *)a1 + 9);
  *(_QWORD *)a3 = &off_24C4213F8;
  if ((_DWORD)v6)
  {
    v7 = 8 * v6;
    result = operator new[]();
    v9 = *((_DWORD *)a1 + 9);
  }
  else
  {
    v9 = 0;
    v7 = 0;
    result = 0;
  }
  *(_DWORD *)(a3 + 16) = 1;
  *(_DWORD *)(a3 + 20) = v6;
  *(_BYTE *)(a3 + 24) = (_DWORD)v6 != 0;
  *(_QWORD *)(a3 + 32) = v7;
  *(_QWORD *)a3 = &off_24C421338;
  *(_QWORD *)(a3 + 8) = result;
  if (v9 >= 1)
  {
    v10 = 0;
    v11 = a1[2];
    v12 = a1[3];
    v13 = *(_QWORD *)(a2 + 8);
    do
    {
      *(_QWORD *)(result + 8 * v10) = 0;
      v14 = *(int *)(v12 + 4 * v10);
      if ((int)v14 >= 1)
      {
        v15 = *(int *)(v11 + 4 * v10);
        v16 = v14 + v15;
        v17 = *a1;
        v18 = a1[1];
        v19 = 0.0;
        do
        {
          v19 = v19 + *(double *)(v17 + 8 * v15) * *(double *)(v13 + 8 * *(unsigned int *)(v18 + 4 * v15));
          *(double *)(result + 8 * v10) = v19;
          ++v15;
        }
        while (v15 < v16);
      }
      ++v10;
    }
    while (v10 != v9);
  }
  return result;
}

void SparseMatrix::operator*(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  size_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *((unsigned int *)a1 + 10);
  *(_QWORD *)a3 = &off_24C4213F8;
  if ((_DWORD)v6)
  {
    v7 = 8 * v6;
    v8 = (char *)operator new[]();
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  *(_DWORD *)(a3 + 16) = 1;
  *(_DWORD *)(a3 + 20) = v6;
  *(_BYTE *)(a3 + 24) = (_DWORD)v6 != 0;
  *(_QWORD *)(a3 + 32) = v7;
  *(_QWORD *)a3 = &off_24C421338;
  *(_QWORD *)(a3 + 8) = v8;
  bzero(v8, v7);
  v9 = *((unsigned int *)a1 + 9);
  if ((int)v9 >= 1)
  {
    v10 = 0;
    v11 = a1[2];
    v12 = a1[3];
    v13 = *(_QWORD *)(a2 + 8);
    do
    {
      v14 = *(int *)(v12 + 4 * v10);
      if ((int)v14 >= 1)
      {
        v15 = *(int *)(v11 + 4 * v10);
        v16 = v14 + v15;
        v17 = *a1;
        v18 = a1[1];
        do
        {
          v19 = 8 * *(unsigned int *)(v18 + 4 * v15);
          *(double *)&v8[v19] = *(double *)&v8[v19] + *(double *)(v17 + 8 * v15++) * *(double *)(v13 + 8 * v10);
        }
        while (v15 < v16);
      }
      ++v10;
    }
    while (v10 != v9);
  }
}

_QWORD *SparseMatrix::ReverseStorageOfColumn(_QWORD *this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int *v11;
  int v12;

  v2 = *(int *)(this[3] + 4 * a2);
  if ((_DWORD)v2)
  {
    v3 = *(int *)(this[2] + 4 * a2);
    v4 = (uint64_t *)(*this + 8 * v3);
    v5 = (uint64_t *)(8 * v3 + 8 * v2 + *this - 8);
    do
    {
      if (v5 == v4)
        break;
      v6 = *v4;
      *v4++ = *v5;
      v7 = v5 == v4;
      *v5-- = v6;
    }
    while (!v7);
    v8 = this[1];
    v9 = 4 * v3;
    v10 = (int *)(v8 + 4 * v3);
    v11 = (int *)(v9 + 4 * v2 + v8 - 4);
    do
    {
      if (v11 == v10)
        break;
      v12 = *v10;
      *v10++ = *v11;
      v7 = v11 == v10;
      *v11-- = v12;
    }
    while (!v7);
  }
  return this;
}

double SparseMatrix::GetColumnAsDenseVector@<D0>(SparseMatrix *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  size_t v7;
  void *v8;
  double result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *((unsigned int *)this + 10);
  *(_QWORD *)a3 = &off_24C4213F8;
  if ((_DWORD)v6)
  {
    v7 = 8 * v6;
    v8 = (void *)operator new[]();
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  *(_DWORD *)(a3 + 16) = 1;
  *(_DWORD *)(a3 + 20) = v6;
  *(_BYTE *)(a3 + 24) = (_DWORD)v6 != 0;
  *(_QWORD *)(a3 + 32) = v7;
  *(_QWORD *)a3 = &off_24C421338;
  *(_QWORD *)(a3 + 8) = v8;
  bzero(v8, v7);
  v10 = *(int *)(*((_QWORD *)this + 3) + 4 * a2);
  if ((int)v10 >= 1)
  {
    v11 = *((_QWORD *)this + 1);
    v12 = *(int *)(*((_QWORD *)this + 2) + 4 * a2);
    v13 = v10 + v12;
    v14 = *(_QWORD *)this;
    do
    {
      result = *(double *)(v14 + 8 * v12);
      *((double *)v8 + *(unsigned int *)(v11 + 4 * v12++)) = result;
    }
    while (v12 < v13);
  }
  return result;
}

double SparseMatrix::CopyColumnToDenseVector(SparseMatrix *this, int a2, double *a3)
{
  double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  bzero(a3, 8 * *((int *)this + 10));
  v7 = *(int *)(*((_QWORD *)this + 3) + 4 * a2);
  if ((int)v7 >= 1)
  {
    v8 = *((_QWORD *)this + 1);
    v9 = *(int *)(*((_QWORD *)this + 2) + 4 * a2);
    v10 = v7 + v9;
    v11 = *(_QWORD *)this;
    do
    {
      result = *(double *)(v11 + 8 * v9);
      a3[*(int *)(v8 + 4 * v9++)] = result;
    }
    while (v9 < v10);
  }
  return result;
}

uint64_t SparseMatrix::GetColumnAsSparseVector@<X0>(uint64_t this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_DWORD *)(this + 40);
  v4 = 4 * a2;
  v5 = *(_DWORD *)(*(_QWORD *)(this + 24) + v4);
  v6 = *(int *)(*(_QWORD *)(this + 16) + v4);
  v7 = *(_QWORD *)(this + 8) + 4 * v6;
  v8 = *(_QWORD *)this + 8 * v6;
  *(_DWORD *)(a3 + 16) = v5;
  *(_DWORD *)(a3 + 20) = v5;
  *(_DWORD *)(a3 + 24) = v3;
  *(_BYTE *)(a3 + 28) = 0;
  *(_DWORD *)(a3 + 32) = 0;
  *(_QWORD *)a3 = v8;
  *(_QWORD *)(a3 + 8) = v7;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  return this;
}

void SparseVector::SparseVector(SparseVector *this, int a2, int a3, int *a4, double *a5, char a6)
{
  uint64_t v9;

  *((_DWORD *)this + 4) = a3;
  *((_DWORD *)this + 5) = a3;
  *((_DWORD *)this + 6) = a2;
  *((_BYTE *)this + 28) = a6;
  *((_DWORD *)this + 8) = 0;
  if ((a6 & 1) != 0)
  {
    *((_QWORD *)this + 1) = operator new[]();
    *(_QWORD *)this = operator new[]();
    memcpy(*((void **)this + 1), a4, 4 * *((int *)this + 4));
    memcpy(*(void **)this, a5, 8 * *((int *)this + 4));
    *((_QWORD *)this + 6) = operator new[]();
    v9 = operator new[]();
  }
  else
  {
    v9 = 0;
    *(_QWORD *)this = a5;
    *((_QWORD *)this + 1) = a4;
    *((_QWORD *)this + 6) = 0;
  }
  *((_QWORD *)this + 5) = v9;
}

uint64_t SparseMatrix::SolveLTInPlace(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float64x2_t *v9;
  uint64_t v10;
  double *v11;
  uint64_t v12;
  double v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  float64x2_t v18;
  float64x2_t *v19;
  float64x2_t *v20;
  unint64_t v21;
  float64x2_t v22;
  uint64_t v23;
  double *v24;
  double *v25;
  double v26;

  v2 = *(unsigned int *)(result + 36);
  if ((int)v2 >= 1)
  {
    v3 = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_QWORD *)result;
    v6 = *(_QWORD *)(result + 16);
    v7 = *(_QWORD *)(result + 24);
    v8 = *(_QWORD *)result + 8;
    v9 = (float64x2_t *)(v4 + 24);
    v10 = *(_QWORD *)result + 24;
    do
    {
      v11 = (double *)(v4 + 8 * v3);
      v12 = *(int *)(v6 + 4 * v3);
      v13 = *v11 / *(double *)(v5 + 8 * v12);
      *v11 = v13;
      v14 = (unint64_t)(v11 + 1);
      result = *(unsigned int *)(v7 + 4 * v3);
      if ((int)result >= 2)
      {
        if (result > 6
          && ((v15 = (unint64_t)&v11[result], v14 < v5 + 8 * v12 + 8 * result)
            ? (v16 = v8 + 8 * v12 >= v15)
            : (v16 = 1),
              v16))
        {
          v17 = (result - 1) & 0xFFFFFFFFFFFFFFFCLL;
          v18 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v13, 0);
          v19 = (float64x2_t *)(v10 + 8 * v12);
          v20 = v9;
          v21 = v17;
          do
          {
            v22 = vmlsq_f64(*v20, v18, *v19);
            v20[-1] = vmlsq_f64(v20[-1], v18, v19[-1]);
            *v20 = v22;
            v20 += 2;
            v19 += 2;
            v21 -= 4;
          }
          while (v21);
          if (result - 1 == v17)
            goto LABEL_3;
          v23 = v17 | 1;
        }
        else
        {
          v23 = 1;
        }
        result -= v23;
        v24 = (double *)(v4 + 8 * (v23 + v3));
        v25 = (double *)(v5 + 8 * v23 + 8 * v12);
        do
        {
          v26 = *v25++;
          *v24 = *v24 - v26 * v13;
          ++v24;
          --result;
        }
        while (result);
      }
LABEL_3:
      ++v3;
      v9 = (float64x2_t *)((char *)v9 + 8);
    }
    while (v3 != v2);
  }
  return result;
}

void SparseMatrix::Zero(void **this)
{
  bzero(this[3], 4 * *((int *)this + 9));
}

void SparseVector::SparseVector(SparseVector *this, int a2, int a3)
{
  *((_DWORD *)this + 4) = a3;
  *((_DWORD *)this + 5) = 0;
  *((_DWORD *)this + 6) = a2;
  *((_BYTE *)this + 28) = 1;
  *((_DWORD *)this + 8) = 0;
  *((_QWORD *)this + 1) = operator new[]();
  *(_QWORD *)this = operator new[]();
  *((_QWORD *)this + 6) = operator new[]();
  *((_QWORD *)this + 5) = operator new[]();
}

{
  *((_DWORD *)this + 4) = a3;
  *((_DWORD *)this + 5) = 0;
  *((_DWORD *)this + 6) = a2;
  *((_BYTE *)this + 28) = 1;
  *((_DWORD *)this + 8) = 0;
  *((_QWORD *)this + 1) = operator new[]();
  *(_QWORD *)this = operator new[]();
  *((_QWORD *)this + 6) = operator new[]();
  *((_QWORD *)this + 5) = operator new[]();
}

void SparseVector::~SparseVector(SparseVector *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*((_BYTE *)this + 28))
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      MEMORY[0x20BD36480](v2, 0x1000C8052888210);
    if (*(_QWORD *)this)
      MEMORY[0x20BD36480](*(_QWORD *)this, 0x1000C8000313F17);
  }
  v3 = *((_QWORD *)this + 6);
  if (v3)
    MEMORY[0x20BD36480](v3, 0x1000C8052888210);
  v4 = *((_QWORD *)this + 5);
  if (v4)
    MEMORY[0x20BD36480](v4, 0x1000C8000313F17);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*((_BYTE *)this + 28))
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      MEMORY[0x20BD36480](v2, 0x1000C8052888210);
    if (*(_QWORD *)this)
      MEMORY[0x20BD36480](*(_QWORD *)this, 0x1000C8000313F17);
  }
  v3 = *((_QWORD *)this + 6);
  if (v3)
    MEMORY[0x20BD36480](v3, 0x1000C8052888210);
  v4 = *((_QWORD *)this + 5);
  if (v4)
    MEMORY[0x20BD36480](v4, 0x1000C8000313F17);
}

__n128 SparseVector::SparseVector(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(_BYTE *)(a2 + 28) = 0;
  return result;
}

{
  __n128 result;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(_BYTE *)(a2 + 28) = 0;
  return result;
}

void SparseVector::SparseVector(SparseVector *this, const SparseVector *a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)((char *)a2 + 20);
  *((_DWORD *)this + 4) = v4;
  *(_QWORD *)((char *)this + 20) = v4;
  *((_BYTE *)this + 28) = 1;
  *((_DWORD *)this + 8) = 0;
  *((_QWORD *)this + 1) = operator new[]();
  *(_QWORD *)this = operator new[]();
  memcpy(*((void **)this + 1), *((const void **)a2 + 1), 4 * *((int *)this + 4));
  memcpy(*(void **)this, *(const void **)a2, 8 * *((int *)this + 4));
  *((_QWORD *)this + 6) = operator new[]();
  *((_QWORD *)this + 5) = operator new[]();
}

{
  uint64_t v4;

  v4 = *(_QWORD *)((char *)a2 + 20);
  *((_DWORD *)this + 4) = v4;
  *(_QWORD *)((char *)this + 20) = v4;
  *((_BYTE *)this + 28) = 1;
  *((_DWORD *)this + 8) = 0;
  *((_QWORD *)this + 1) = operator new[]();
  *(_QWORD *)this = operator new[]();
  memcpy(*((void **)this + 1), *((const void **)a2 + 1), 4 * *((int *)this + 4));
  memcpy(*(void **)this, *(const void **)a2, 8 * *((int *)this + 4));
  *((_QWORD *)this + 6) = operator new[]();
  *((_QWORD *)this + 5) = operator new[]();
}

uint64_t SparseVector::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (!*(_BYTE *)(a1 + 28))
    __assert_rtn("operator=", "SparseMatrix.cpp", 500, "m_ownsData");
  if (*(_DWORD *)(a1 + 16) < *(_DWORD *)(a2 + 16))
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4)
      MEMORY[0x20BD36480](v4, 0x1000C8052888210);
    if (*(_QWORD *)a1)
      MEMORY[0x20BD36480](*(_QWORD *)a1, 0x1000C8000313F17);
    v5 = *(_QWORD *)(a1 + 48);
    if (v5)
      MEMORY[0x20BD36480](v5, 0x1000C8052888210);
    v6 = *(_QWORD *)(a1 + 40);
    if (v6)
      MEMORY[0x20BD36480](v6, 0x1000C8000313F17);
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 8) = operator new[]();
    *(_QWORD *)a1 = operator new[]();
    *(_QWORD *)(a1 + 48) = operator new[]();
    *(_QWORD *)(a1 + 40) = operator new[]();
  }
  memcpy(*(void **)(a1 + 8), *(const void **)(a2 + 8), 4 * *(int *)(a2 + 20));
  memcpy(*(void **)a1, *(const void **)a2, 8 * *(int *)(a2 + 20));
  *(_QWORD *)(a1 + 20) = *(_QWORD *)(a2 + 20);
  return a1;
}

uint64_t SparseVector::MultATagxB(uint64_t this, const SparseVector *a2)
{
  int v2;
  int v3;
  int *v4;
  int v5;
  double v6;
  int *i;
  int v8;
  int v9;
  int v10;

  v2 = 0;
  v3 = 0;
  v4 = *(int **)(this + 8);
  v5 = *(_DWORD *)(this + 20);
  v6 = 0.0;
  for (i = (int *)*((_QWORD *)a2 + 1); ; ++i)
  {
    v8 = *i;
    while (1)
    {
      v9 = *v4;
      if (*v4 >= v8)
        break;
LABEL_7:
      if (++v2 >= v5)
        return this;
      ++v4;
    }
    while (v8 < v9)
    {
      if (++v3 >= v5)
        return this;
      v10 = i[1];
      ++i;
      v8 = v10;
      if (v9 < v10)
        goto LABEL_7;
    }
    v6 = v6 + *(double *)(*(_QWORD *)this + 8 * v2) * *(double *)(*(_QWORD *)a2 + 8 * v3);
    if (++v2 >= v5)
      break;
    if (++v3 >= *((_DWORD *)a2 + 5))
      break;
    ++v4;
  }
  return this;
}

uint64_t SparseVector::AddWithFactor(uint64_t this, const SparseVector *a2, double a3)
{
  uint64_t v3;
  double *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  double *v8;
  int *v9;
  unint64_t v10;
  int v11;
  double *v13;
  int *v14;
  int v15;
  int v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if (!*(_BYTE *)(this + 28))
    __assert_rtn("AddWithFactor", "SparseMatrix.cpp", 594, "m_ownsData");
  if (*(_DWORD *)(this + 24) != *((_DWORD *)a2 + 6))
    __assert_rtn("AddWithFactor", "SparseMatrix.cpp", 595, "this->m_size == rhs.m_size");
  *(_DWORD *)(this + 32) = 0;
  v3 = *((int *)a2 + 5);
  v4 = *(double **)this;
  v5 = *(_QWORD *)(this + 8);
  v6 = *(int *)(this + 20);
  v7 = *(_QWORD *)this + 8 * v6;
  v8 = *(double **)a2;
  v9 = (int *)*((_QWORD *)a2 + 1);
  v10 = *(_QWORD *)a2 + 8 * v3;
  v11 = 0;
  if ((int)v6 < 1 || (int)v3 < 1)
  {
    v14 = *(int **)(this + 8);
    v13 = *(double **)this;
    goto LABEL_27;
  }
  v13 = *(double **)this;
  v14 = *(int **)(this + 8);
  do
  {
    v15 = *v14;
    v16 = *v9;
    if (*v14 == *v9)
    {
      if (*(_DWORD *)(this + 24) <= v15 || v11 >= *(_DWORD *)(this + 16))
        goto LABEL_35;
      v17 = *v13++;
      v18 = v17 + a3 * *v8;
      v19 = *(_QWORD *)(this + 40);
      *(_DWORD *)(*(_QWORD *)(this + 48) + 4 * v11) = v15;
      v20 = *(int *)(this + 32);
      *(double *)(v19 + 8 * v20) = v18;
      v11 = v20 + 1;
      *(_DWORD *)(this + 32) = v11;
      ++v14;
LABEL_21:
      ++v8;
      ++v9;
      if ((unint64_t)v13 >= v7)
        break;
      continue;
    }
    if (v15 >= v16)
    {
      if (*(_DWORD *)(this + 24) <= v16 || v11 >= *(_DWORD *)(this + 16))
        goto LABEL_35;
      v24 = *v8 * a3;
      v25 = *(_QWORD *)(this + 40);
      *(_DWORD *)(*(_QWORD *)(this + 48) + 4 * v11) = v16;
      v26 = *(int *)(this + 32);
      *(double *)(v25 + 8 * v26) = v24;
      v11 = v26 + 1;
      *(_DWORD *)(this + 32) = v11;
      goto LABEL_21;
    }
    if (*(_DWORD *)(this + 24) <= v15 || v11 >= *(_DWORD *)(this + 16))
      goto LABEL_35;
    v21 = *v13++;
    v22 = *(_QWORD *)(this + 40);
    *(_DWORD *)(*(_QWORD *)(this + 48) + 4 * v11) = v15;
    v23 = *(int *)(this + 32);
    *(double *)(v22 + 8 * v23) = v21;
    v11 = v23 + 1;
    *(_DWORD *)(this + 32) = v11;
    ++v14;
    if ((unint64_t)v13 >= v7)
      break;
  }
  while ((unint64_t)v8 < v10);
LABEL_27:
  while ((unint64_t)v13 < v7)
  {
    if (*(_DWORD *)(this + 24) <= *v14 || v11 >= *(_DWORD *)(this + 16))
      goto LABEL_35;
    v27 = *v13++;
    v28 = *(_QWORD *)(this + 40);
    *(_DWORD *)(*(_QWORD *)(this + 48) + 4 * v11) = *v14;
    v29 = *(int *)(this + 32);
    *(double *)(v28 + 8 * v29) = v27;
    v11 = v29 + 1;
    *(_DWORD *)(this + 32) = v11;
    ++v14;
  }
  if ((unint64_t)v8 < v10)
  {
    while (*(_DWORD *)(this + 24) > *v9 && v11 < *(_DWORD *)(this + 16))
    {
      v30 = *v8++;
      v32 = *(_QWORD *)(this + 40);
      v31 = *(_QWORD *)(this + 48);
      *(_DWORD *)(v31 + 4 * v11) = *v9;
      v33 = *(int *)(this + 32);
      *(double *)(v32 + 8 * v33) = v30 * a3;
      v11 = v33 + 1;
      *(_DWORD *)(this + 32) = v11;
      ++v9;
      if ((unint64_t)v8 >= v10)
        goto LABEL_34;
    }
LABEL_35:
    __assert_rtn("AddValueToHelper", "SparseMatrix.hpp", 175, "pos<m_size && m_helperNNZ<m_maxNNZ");
  }
  v32 = *(_QWORD *)(this + 40);
  v31 = *(_QWORD *)(this + 48);
LABEL_34:
  *(_QWORD *)this = v32;
  *(_QWORD *)(this + 8) = v31;
  *(_QWORD *)(this + 40) = v4;
  *(_QWORD *)(this + 48) = v5;
  *(_DWORD *)(this + 20) = v11;
  return this;
}

double SparseVector::operator-@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v33;
  int v34;
  uint64_t v35;
  double *v36;
  int *v37;
  int v38;
  int v39;
  double v41;

  v6 = *(_DWORD *)(a1 + 24);
  v7 = *((int *)a2 + 5) + (uint64_t)*(int *)(a1 + 20);
  *(_QWORD *)(a3 + 16) = v7;
  *(_DWORD *)(a3 + 24) = v6;
  *(_BYTE *)(a3 + 28) = 1;
  *(_DWORD *)(a3 + 32) = 0;
  v8 = operator new[]();
  *(_QWORD *)(a3 + 8) = v8;
  v9 = operator new[]();
  *(_QWORD *)a3 = v9;
  *(_QWORD *)(a3 + 48) = operator new[]();
  v10 = operator new[]();
  v12 = 0;
  *(_QWORD *)(a3 + 40) = v10;
  v13 = *(int *)(a1 + 20);
  v14 = *((_DWORD *)a2 + 5);
  v15 = v14;
  v16 = 0;
  v17 = 0;
  if ((int)v13 >= 1 && v14 >= 1)
  {
    v12 = 0;
    v17 = 0;
    v16 = 0;
    v18 = *(_QWORD *)(a1 + 8);
    v20 = *a2;
    v19 = a2[1];
    while (1)
    {
      v21 = *(_DWORD *)(v18 + 4 * v16);
      v22 = *(_DWORD *)(v19 + 4 * v17);
      if (v21 == v22)
        break;
      if (v21 >= v22)
      {
        if (v6 <= v22 || v12 >= (int)v7)
LABEL_46:
          __assert_rtn("AddValue", "SparseMatrix.hpp", 166, "pos<m_size && m_nnz<m_maxNNZ");
        v26 = *(double *)(v20 + 8 * v17);
        *(_DWORD *)(v8 + 4 * v12) = v22;
        result = -v26;
        *(double *)(v9 + 8 * v12++) = result;
        *(_DWORD *)(a3 + 20) = v12;
        goto LABEL_25;
      }
      if (v6 <= v21 || v12 >= (int)v7)
        goto LABEL_46;
      result = *(double *)(*(_QWORD *)a1 + 8 * v16);
      *(_DWORD *)(v8 + 4 * v12) = v21;
      *(double *)(v9 + 8 * v12++) = result;
      *(_DWORD *)(a3 + 20) = v12;
      if (++v16 >= (int)v13)
        goto LABEL_27;
LABEL_26:
      if (v17 >= (int)v15)
        goto LABEL_27;
    }
    if (v6 <= v21 || v12 >= (int)v7)
      goto LABEL_46;
    result = *(double *)(*(_QWORD *)a1 + 8 * v16) - *(double *)(v20 + 8 * v17);
    *(_DWORD *)(v8 + 4 * v12) = v21;
    *(double *)(v9 + 8 * v12++) = result;
    *(_DWORD *)(a3 + 20) = v12;
    ++v16;
LABEL_25:
    ++v17;
    if (v16 >= (int)v13)
      goto LABEL_27;
    goto LABEL_26;
  }
LABEL_27:
  if (v16 < (int)v13)
  {
    v27 = 0;
    v28 = v13 - v16;
    v29 = *(_QWORD *)a1 + 8 * v16;
    v30 = *(_QWORD *)(a1 + 8) + 4 * v16;
    do
    {
      v31 = *(_DWORD *)(v30 + 4 * v27);
      if (v6 <= v31 || v12 + v27 >= v7)
        goto LABEL_45;
      result = *(double *)(v29 + 8 * v27);
      *(_DWORD *)(v8 + 4 * v12 + 4 * v27) = v31;
      *(double *)(v9 + 8 * v12 + 8 * v27) = result;
      *(_DWORD *)(a3 + 20) = v12 + v27++ + 1;
    }
    while (v28 != v27);
    v12 += v27;
  }
  if (v17 < (int)v15)
  {
    v33 = v12;
    v34 = v12 + 1;
    v35 = v15 - v17;
    v36 = (double *)(*a2 + 8 * v17);
    v37 = (int *)(a2[1] + 4 * v17);
    while (1)
    {
      v39 = *v37++;
      v38 = v39;
      if (v6 <= v39 || v33 >= v7)
        break;
      v41 = *v36++;
      result = -v41;
      *(_DWORD *)(v8 + 4 * v33) = v38;
      *(double *)(v9 + 8 * v33++) = -v41;
      *(_DWORD *)(a3 + 20) = v34++;
      if (!--v35)
        return result;
    }
LABEL_45:
    __assert_rtn("AddValue", "SparseMatrix.hpp", 166, "pos<m_size && m_nnz<m_maxNNZ");
  }
  return result;
}

void sub_20B64A82C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  MEMORY[0x20BD36480](v1, 0x1000C8052888210);
  MEMORY[0x20BD36480](v2, 0x1000C8000313F17);
  MEMORY[0x20BD36480](v3, 0x1000C8052888210);
  MEMORY[0x20BD36480](v4, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

double operator+=(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double *v3;
  _DWORD *v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  double result;

  v2 = *(unsigned int *)(a2 + 20);
  if ((int)v2 >= 1)
  {
    v3 = *(double **)a2;
    v4 = *(_DWORD **)(a2 + 8);
    do
    {
      v5 = *v3++;
      v6 = v5;
      LODWORD(v5) = *v4++;
      v7 = *(_QWORD *)(a1 + 8);
      v8 = 8 * LODWORD(v5);
      result = v6 + *(double *)(v7 + v8);
      *(double *)(v7 + v8) = result;
      --v2;
    }
    while (v2);
  }
  return result;
}

double SparseVector::GetAsDenseVector@<D0>(double **this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  size_t v5;
  void *v6;
  double result;
  uint64_t v8;
  double *v9;
  double *v10;
  double v11;

  v4 = *((unsigned int *)this + 6);
  *(_QWORD *)a2 = &off_24C4213F8;
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    v6 = (void *)operator new[]();
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  *(_DWORD *)(a2 + 16) = 1;
  *(_DWORD *)(a2 + 20) = v4;
  *(_BYTE *)(a2 + 24) = (_DWORD)v4 != 0;
  *(_QWORD *)(a2 + 32) = v5;
  *(_QWORD *)a2 = &off_24C421338;
  *(_QWORD *)(a2 + 8) = v6;
  bzero(v6, v5);
  v8 = *((unsigned int *)this + 5);
  if ((int)v8 >= 1)
  {
    v9 = *this;
    v10 = this[1];
    do
    {
      v11 = *v9++;
      result = v11;
      LODWORD(v11) = *(_DWORD *)v10;
      v10 = (double *)((char *)v10 + 4);
      *((double *)v6 + LODWORD(v11)) = result;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t Algo::asin(uint64_t a1, uint64_t a2)
{
  double *v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  long double *v8;
  unint64_t i;
  long double v10;

  v4 = *(double **)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 16);
  v6 = *(_DWORD *)(a1 + 20);
  v7 = 8 * v5 * (unint64_t)v6;
  v8 = *(long double **)(a2 + 8);
  if (*(_QWORD *)(a2 + 32) < v7)
  {
    if (v8 && *(_BYTE *)(a2 + 24))
      MEMORY[0x20BD36480](*(_QWORD *)(a2 + 8), 0x1000C8000313F17);
    v8 = (long double *)operator new[]();
    *(_QWORD *)(a2 + 8) = v8;
    *(_QWORD *)(a2 + 32) = v7;
    *(_BYTE *)(a2 + 24) = 1;
  }
  *(_DWORD *)(a2 + 16) = v5;
  *(_DWORD *)(a2 + 20) = v6;
  for (i = *(_QWORD *)(a1 + 8) + 8 * (*(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
        (unint64_t)v4 < i;
        ++v8)
  {
    v10 = *v4++;
    *v8 = asin(v10);
  }
  return 0;
}

uint64_t Algo::sin(uint64_t a1, uint64_t a2)
{
  long double *v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  long double *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  long double *v15;
  uint64_t v16;
  uint64_t v17;
  long double *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  long double v22;
  long double v24;

  v4 = *(long double **)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 16);
  v6 = *(_DWORD *)(a1 + 20);
  v7 = 8 * v5 * (unint64_t)v6;
  v8 = *(long double **)(a2 + 8);
  if (*(_QWORD *)(a2 + 32) < v7)
  {
    if (v8 && *(_BYTE *)(a2 + 24))
      MEMORY[0x20BD36480](*(_QWORD *)(a2 + 8), 0x1000C8000313F17);
    v8 = (long double *)operator new[]();
    *(_QWORD *)(a2 + 8) = v8;
    *(_QWORD *)(a2 + 32) = v7;
    *(_BYTE *)(a2 + 24) = 1;
  }
  *(_DWORD *)(a2 + 16) = v5;
  *(_DWORD *)(a2 + 20) = v6;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = (*(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
  v11 = v9 + 8 * v10;
  if ((unint64_t)v4 < v11)
  {
    v12 = v9 + 8 * v10;
    if (v12 <= (unint64_t)(v4 + 1))
      v12 = (unint64_t)(v4 + 1);
    v13 = v12 + ~(unint64_t)v4;
    if (v13 < 0x18 || (unint64_t)((char *)v8 - (char *)v4) < 0x10)
    {
      v15 = v8;
      goto LABEL_18;
    }
    v16 = (v13 >> 3) + 1;
    v17 = v16 & 0x3FFFFFFFFFFFFFFELL;
    v15 = &v8[v16 & 0x3FFFFFFFFFFFFFFELL];
    v18 = v4;
    v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
    do
    {
      v20 = *(_OWORD *)v18;
      v18 += 2;
      v24 = sin(*((long double *)&v20 + 1));
      *(double *)&v21 = sin(*(long double *)&v20);
      *((long double *)&v21 + 1) = v24;
      *(_OWORD *)v8 = v21;
      v8 += 2;
      v19 -= 2;
    }
    while (v19);
    if (v16 != v17)
    {
      v4 += v17;
      do
      {
LABEL_18:
        v22 = *v4++;
        *v15++ = sin(v22);
      }
      while ((unint64_t)v4 < v11);
    }
  }
  return 0;
}

uint64_t Algo::atan(uint64_t a1, uint64_t a2)
{
  double *v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  long double *v8;
  unint64_t i;
  long double v10;

  v4 = *(double **)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 16);
  v6 = *(_DWORD *)(a1 + 20);
  v7 = 8 * v5 * (unint64_t)v6;
  v8 = *(long double **)(a2 + 8);
  if (*(_QWORD *)(a2 + 32) < v7)
  {
    if (v8 && *(_BYTE *)(a2 + 24))
      MEMORY[0x20BD36480](*(_QWORD *)(a2 + 8), 0x1000C8000313F17);
    v8 = (long double *)operator new[]();
    *(_QWORD *)(a2 + 8) = v8;
    *(_QWORD *)(a2 + 32) = v7;
    *(_BYTE *)(a2 + 24) = 1;
  }
  *(_DWORD *)(a2 + 16) = v5;
  *(_DWORD *)(a2 + 20) = v6;
  for (i = *(_QWORD *)(a1 + 8) + 8 * (*(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
        (unint64_t)v4 < i;
        ++v8)
  {
    v10 = *v4++;
    *v8 = atan(v10);
  }
  return 0;
}

uint64_t Algo::atan2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double *v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  long double *v10;
  double *v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t i;
  double v16;
  long double v17;
  long double v18;

  v6 = *(double **)(a2 + 8);
  v7 = *(_DWORD *)(a2 + 16);
  v8 = *(_DWORD *)(a2 + 20);
  v9 = 8 * v7 * (unint64_t)v8;
  v10 = *(long double **)(a3 + 8);
  if (*(_QWORD *)(a3 + 32) >= v9)
  {
    v9 = *(_QWORD *)(a3 + 32);
  }
  else
  {
    if (v10 && *(_BYTE *)(a3 + 24))
      MEMORY[0x20BD36480](*(_QWORD *)(a3 + 8), 0x1000C8000313F17);
    v10 = (long double *)operator new[]();
    *(_QWORD *)(a3 + 8) = v10;
    *(_QWORD *)(a3 + 32) = v9;
    *(_BYTE *)(a3 + 24) = 1;
  }
  *(_DWORD *)(a3 + 16) = v7;
  *(_DWORD *)(a3 + 20) = v8;
  v11 = *(double **)(a1 + 8);
  v12 = *(_DWORD *)(a2 + 16);
  v13 = *(_DWORD *)(a2 + 20);
  v14 = 8 * v12 * (unint64_t)v13;
  if (v9 < v14)
  {
    if (v10 && *(_BYTE *)(a3 + 24))
      MEMORY[0x20BD36480](v10, 0x1000C8000313F17);
    v10 = (long double *)operator new[]();
    *(_QWORD *)(a3 + 8) = v10;
    *(_QWORD *)(a3 + 32) = v14;
    *(_BYTE *)(a3 + 24) = 1;
  }
  *(_DWORD *)(a3 + 16) = v12;
  *(_DWORD *)(a3 + 20) = v13;
  for (i = *(_QWORD *)(a2 + 8) + 8 * (*(_DWORD *)(a2 + 20) * *(_DWORD *)(a2 + 16));
        (unint64_t)v6 < i;
        ++v10)
  {
    v16 = *v11++;
    v17 = v16;
    v18 = *v6++;
    *v10 = atan2(v17, v18);
  }
  return 0;
}

uint64_t Algo::tan(uint64_t a1, uint64_t a2)
{
  double *v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  long double *v8;
  unint64_t i;
  long double v10;

  v4 = *(double **)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 16);
  v6 = *(_DWORD *)(a1 + 20);
  v7 = 8 * v5 * (unint64_t)v6;
  v8 = *(long double **)(a2 + 8);
  if (*(_QWORD *)(a2 + 32) < v7)
  {
    if (v8 && *(_BYTE *)(a2 + 24))
      MEMORY[0x20BD36480](*(_QWORD *)(a2 + 8), 0x1000C8000313F17);
    v8 = (long double *)operator new[]();
    *(_QWORD *)(a2 + 8) = v8;
    *(_QWORD *)(a2 + 32) = v7;
    *(_BYTE *)(a2 + 24) = 1;
  }
  *(_DWORD *)(a2 + 16) = v5;
  *(_DWORD *)(a2 + 20) = v6;
  for (i = *(_QWORD *)(a1 + 8) + 8 * (*(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
        (unint64_t)v4 < i;
        ++v8)
  {
    v10 = *v4++;
    *v8 = tan(v10);
  }
  return 0;
}

uint64_t Algo::acos(uint64_t a1, uint64_t a2)
{
  double *v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  long double *v8;
  unint64_t i;
  long double v10;

  v4 = *(double **)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 16);
  v6 = *(_DWORD *)(a1 + 20);
  v7 = 8 * v5 * (unint64_t)v6;
  v8 = *(long double **)(a2 + 8);
  if (*(_QWORD *)(a2 + 32) < v7)
  {
    if (v8 && *(_BYTE *)(a2 + 24))
      MEMORY[0x20BD36480](*(_QWORD *)(a2 + 8), 0x1000C8000313F17);
    v8 = (long double *)operator new[]();
    *(_QWORD *)(a2 + 8) = v8;
    *(_QWORD *)(a2 + 32) = v7;
    *(_BYTE *)(a2 + 24) = 1;
  }
  *(_DWORD *)(a2 + 16) = v5;
  *(_DWORD *)(a2 + 20) = v6;
  for (i = *(_QWORD *)(a1 + 8) + 8 * (*(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
        (unint64_t)v4 < i;
        ++v8)
  {
    v10 = *v4++;
    *v8 = acos(v10);
  }
  return 0;
}

uint64_t Algo::cos(uint64_t a1, uint64_t a2)
{
  long double *v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  long double *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  long double *v15;
  uint64_t v16;
  uint64_t v17;
  long double *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  long double v22;
  long double v24;

  v4 = *(long double **)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 16);
  v6 = *(_DWORD *)(a1 + 20);
  v7 = 8 * v5 * (unint64_t)v6;
  v8 = *(long double **)(a2 + 8);
  if (*(_QWORD *)(a2 + 32) < v7)
  {
    if (v8 && *(_BYTE *)(a2 + 24))
      MEMORY[0x20BD36480](*(_QWORD *)(a2 + 8), 0x1000C8000313F17);
    v8 = (long double *)operator new[]();
    *(_QWORD *)(a2 + 8) = v8;
    *(_QWORD *)(a2 + 32) = v7;
    *(_BYTE *)(a2 + 24) = 1;
  }
  *(_DWORD *)(a2 + 16) = v5;
  *(_DWORD *)(a2 + 20) = v6;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = (*(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
  v11 = v9 + 8 * v10;
  if ((unint64_t)v4 < v11)
  {
    v12 = v9 + 8 * v10;
    if (v12 <= (unint64_t)(v4 + 1))
      v12 = (unint64_t)(v4 + 1);
    v13 = v12 + ~(unint64_t)v4;
    if (v13 < 0x18 || (unint64_t)((char *)v8 - (char *)v4) < 0x10)
    {
      v15 = v8;
      goto LABEL_18;
    }
    v16 = (v13 >> 3) + 1;
    v17 = v16 & 0x3FFFFFFFFFFFFFFELL;
    v15 = &v8[v16 & 0x3FFFFFFFFFFFFFFELL];
    v18 = v4;
    v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
    do
    {
      v20 = *(_OWORD *)v18;
      v18 += 2;
      v24 = cos(*((long double *)&v20 + 1));
      *(double *)&v21 = cos(*(long double *)&v20);
      *((long double *)&v21 + 1) = v24;
      *(_OWORD *)v8 = v21;
      v8 += 2;
      v19 -= 2;
    }
    while (v19);
    if (v16 != v17)
    {
      v4 += v17;
      do
      {
LABEL_18:
        v22 = *v4++;
        *v15++ = cos(v22);
      }
      while ((unint64_t)v4 < v11);
    }
  }
  return 0;
}

uint64_t Algo::cart2sph(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  double *v17;
  double *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float64x2_t *v23;
  float64x2_t v24;
  unint64_t v25;
  double v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  float64x2_t *v31;
  int v32;
  float64x2_t *v33;
  unint64_t v34;
  unint64_t v35;
  double *v36;
  double *v37;
  uint64_t v38;
  uint64_t v39;
  float64x2_t *v40;
  float64x2_t *v41;
  uint64_t v42;
  float64x2_t v43;
  uint64_t v44;
  unint64_t v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  double *v52;
  double *v53;
  double *v54;
  uint64_t v55;
  uint64_t v56;
  float64x2_t *v57;
  float64x2_t *v58;
  float64x2_t *v59;
  uint64_t v60;
  float64x2_t v61;
  double v62;
  double v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  double *v67;
  double *v68;
  float64x2_t *v69;
  float64x2_t *v70;
  uint64_t v71;
  float64x2_t v72;
  int v73;
  double v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  double *v81;
  double *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  float64x2_t *v87;
  float64x2_t v88;
  double v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  int v93;
  float64x2_t *v94;
  unint64_t v95;
  unint64_t v96;
  double *v97;
  double *v98;
  uint64_t v99;
  uint64_t v100;
  float64x2_t *v101;
  float64x2_t *v102;
  uint64_t v103;
  float64x2_t v104;
  const void *v105;
  double *v106;
  unint64_t v108;
  double v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  double *v113;
  double *v114;
  double *v115;
  uint64_t v116;
  uint64_t v117;
  float64x2_t *v118;
  float64x2_t *v119;
  float64x2_t *v120;
  uint64_t v121;
  float64x2_t v122;
  double v123;
  double v124;
  double v125;
  uint64_t v126;
  uint64_t v127;
  double *v128;
  double *v129;
  uint64_t v130;
  uint64_t v131;
  float64x2_t *v132;
  float64x2_t v133;
  int v134;
  double v135;
  size_t v136;
  void *v137;
  uint64_t v138;
  unsigned int v139;
  unsigned int v140;
  uint64_t v141;
  unsigned int v142;
  unsigned int v143;
  uint64_t v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v154;
  uint64_t v155;
  int v156;
  int v157;
  _QWORD v158[2];
  unsigned int v159;
  unsigned int v160;
  char v161;
  unint64_t v162;
  _QWORD v163[2];
  unsigned int v164;
  unsigned int v165;
  char v166;
  unint64_t v167;
  _QWORD v168[2];
  int v169;
  int v170;
  char v171;
  uint64_t v172;
  _QWORD v173[2];
  unsigned int v174;
  unsigned int v175;
  char v176;
  unint64_t v177;

  v156 = *(_DWORD *)(a1 + 20);
  v157 = *(_DWORD *)(a1 + 16);
  v10 = v156 * v157;
  if (!(v156 * v157))
  {
    v12 = 0;
    goto LABEL_15;
  }
  v11 = operator new[]();
  v12 = v11;
  v13 = *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16);
  if (v13 < 1)
    goto LABEL_15;
  v14 = *(_QWORD *)(a1 + 8);
  v15 = v14 + 8 * v13;
  if (v15 <= v14 + 8)
    v15 = v14 + 8;
  v16 = v15 + ~v14;
  if (v16 < 0x18)
  {
    v17 = *(double **)(a1 + 8);
    v18 = (double *)v11;
LABEL_13:
    v25 = v14 + 8 * v13;
    do
    {
      v26 = *v17++;
      *v18++ = v26 * v26;
    }
    while ((unint64_t)v17 < v25);
    goto LABEL_15;
  }
  v17 = *(double **)(a1 + 8);
  v18 = (double *)v11;
  if ((unint64_t)(v11 - v14) < 0x20)
    goto LABEL_13;
  v19 = 0;
  v20 = (v16 >> 3) + 1;
  v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
  v17 = (double *)(v14 + v21);
  v22 = v20 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v23 = (float64x2_t *)(v11 + v19);
    v24 = vmulq_f64(*(float64x2_t *)(v14 + v19 + 16), *(float64x2_t *)(v14 + v19 + 16));
    *v23 = vmulq_f64(*(float64x2_t *)(v14 + v19), *(float64x2_t *)(v14 + v19));
    v23[1] = v24;
    v19 += 32;
    v22 -= 4;
  }
  while (v22);
  if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
  {
    v18 = (double *)(v11 + v21);
    goto LABEL_13;
  }
LABEL_15:
  v27 = *(_DWORD *)(a2 + 16);
  v28 = *(_DWORD *)(a2 + 20);
  v29 = v28 * v27;
  v154 = a6;
  v155 = v27;
  v151 = v28;
  if (!(_DWORD)v29)
  {
    v44 = 0;
    if (v27 == v157 && v28 == v156)
    {
      if (!v10)
        goto LABEL_57;
      goto LABEL_55;
    }
LABEL_129:
    __assert_rtn("doDimensionsMatchTo", "Matrix.hpp", 1043, "0");
  }
  v30 = operator new[]();
  v31 = (float64x2_t *)v30;
  v32 = *(_DWORD *)(a2 + 20) * *(_DWORD *)(a2 + 16);
  if (v32 >= 1)
  {
    v33 = *(float64x2_t **)(a2 + 8);
    v34 = (unint64_t)&v33->f64[v32];
    if (v34 <= (unint64_t)&v33->f64[1])
      v34 = (unint64_t)&v33->f64[1];
    v35 = v34 + ~(unint64_t)v33;
    if (v35 < 0x18)
    {
      v36 = *(double **)(a2 + 8);
      v37 = (double *)v30;
LABEL_33:
      v46 = (unint64_t)&v33->f64[v32];
      do
      {
        v47 = *v36++;
        *v37++ = v47 * v47;
      }
      while ((unint64_t)v36 < v46);
      goto LABEL_35;
    }
    v36 = *(double **)(a2 + 8);
    v37 = (double *)v30;
    if ((unint64_t)(v30 - (_QWORD)v33) < 0x20)
      goto LABEL_33;
    v38 = (v35 >> 3) + 1;
    v39 = v38 & 0x3FFFFFFFFFFFFFFCLL;
    v36 = &v33->f64[v39];
    v40 = (float64x2_t *)(v30 + 16);
    v41 = v33 + 1;
    v42 = v38 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v43 = vmulq_f64(*v41, *v41);
      v40[-1] = vmulq_f64(v41[-1], v41[-1]);
      *v40 = v43;
      v40 += 2;
      v41 += 2;
      v42 -= 4;
    }
    while (v42);
    if (v38 != (v38 & 0x3FFFFFFFFFFFFFFCLL))
    {
      v37 = (double *)(v30 + v39 * 8);
      goto LABEL_33;
    }
  }
LABEL_35:
  if ((_DWORD)v155 != v157 || v28 != v156)
    goto LABEL_129;
  v48 = operator new[]();
  v49 = v48;
  if (v10 < 1)
    goto LABEL_46;
  v50 = v12 + 8 * v10;
  if (v50 <= v12 + 8)
    v50 = v12 + 8;
  v51 = v50 + ~v12;
  v52 = (double *)v31;
  v53 = (double *)v12;
  v54 = (double *)v48;
  if (v51 < 0x18)
    goto LABEL_45;
  v55 = (v51 >> 3) + 1;
  v56 = 8 * (v55 & 0x3FFFFFFFFFFFFFFCLL);
  v53 = (double *)(v12 + v56);
  v57 = (float64x2_t *)(v48 + 16);
  v58 = (float64x2_t *)(v12 + 16);
  v59 = v31 + 1;
  v60 = v55 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v61 = vaddq_f64(*v58, *v59);
    v57[-1] = vaddq_f64(v58[-1], v59[-1]);
    *v57 = v61;
    v57 += 2;
    v58 += 2;
    v59 += 2;
    v60 -= 4;
  }
  while (v60);
  if (v55 != (v55 & 0x3FFFFFFFFFFFFFFCLL))
  {
    v52 = &v31->f64[(unint64_t)v56 / 8];
    v54 = (double *)(v48 + v56);
    do
    {
LABEL_45:
      v62 = *v53++;
      v63 = v62;
      v64 = *v52++;
      *v54++ = v63 + v64;
    }
    while ((unint64_t)v53 < v12 + 8 * v10);
  }
LABEL_46:
  v65 = operator new[]();
  v44 = v65;
  if (v29 < 4)
  {
    LODWORD(v66) = 0;
    v67 = (double *)v49;
    v68 = (double *)v65;
    goto LABEL_52;
  }
  v66 = v29 & 0xFFFFFFFC;
  v67 = (double *)(v49 + 8 * v66);
  v69 = (float64x2_t *)(v65 + 16);
  v70 = (float64x2_t *)(v49 + 16);
  v71 = v66;
  do
  {
    v72 = vsqrtq_f64(*v70);
    v69[-1] = vsqrtq_f64(v70[-1]);
    *v69 = v72;
    v69 += 2;
    v70 += 2;
    v71 -= 4;
  }
  while (v71);
  if (v66 != v29)
  {
    v68 = (double *)(v65 + 8 * v66);
LABEL_52:
    v73 = v29 - v66;
    do
    {
      v74 = *v67++;
      *v68++ = sqrt(v74);
      --v73;
    }
    while (v73);
  }
  MEMORY[0x20BD36480](v49, 0x1000C8000313F17);
  MEMORY[0x20BD36480](v31, 0x1000C8000313F17);
  if (!v10)
    goto LABEL_57;
LABEL_55:
  if (v12)
    MEMORY[0x20BD36480](v12, 0x1000C8000313F17);
LABEL_57:
  v75 = a3;
  v76 = v155;
  if (!v154)
    goto LABEL_125;
  if (!(_DWORD)v29)
  {
    v78 = 0;
    goto LABEL_70;
  }
  v77 = operator new[]();
  v78 = v77;
  if ((int)v29 < 1)
    goto LABEL_70;
  v79 = v44 + 8 * (int)v29;
  if (v79 <= v44 + 8)
    v79 = v44 + 8;
  v80 = v79 + ~v44;
  v81 = (double *)v44;
  v82 = (double *)v77;
  if (v80 < 0x18)
    goto LABEL_67;
  v83 = 0;
  v84 = (v80 >> 3) + 1;
  v85 = 8 * (v84 & 0x3FFFFFFFFFFFFFFCLL);
  v81 = (double *)(v44 + v85);
  v86 = v84 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v87 = (float64x2_t *)(v77 + v83);
    v88 = vmulq_f64(*(float64x2_t *)(v44 + v83 + 16), *(float64x2_t *)(v44 + v83 + 16));
    *v87 = vmulq_f64(*(float64x2_t *)(v44 + v83), *(float64x2_t *)(v44 + v83));
    v87[1] = v88;
    v83 += 32;
    v86 -= 4;
  }
  while (v86);
  if (v84 != (v84 & 0x3FFFFFFFFFFFFFFCLL))
  {
    v82 = (double *)(v77 + v85);
    do
    {
LABEL_67:
      v89 = *v81++;
      *v82++ = v89 * v89;
    }
    while ((unint64_t)v81 < v44 + 8 * (int)v29);
  }
LABEL_70:
  v90 = *(_DWORD *)(a3 + 16);
  v91 = *(_DWORD *)(a3 + 20);
  v92 = v91 * v90;
  v149 = a4;
  if ((_DWORD)v92)
  {
    v148 = *(_DWORD *)(a3 + 16);
    v150 = operator new[]();
    v93 = *(_DWORD *)(a3 + 20) * *(_DWORD *)(a3 + 16);
    if (v93 < 1)
      goto LABEL_88;
    v94 = *(float64x2_t **)(a3 + 8);
    v95 = (unint64_t)&v94->f64[v93];
    if (v95 <= (unint64_t)&v94->f64[1])
      v95 = (unint64_t)&v94->f64[1];
    v96 = v95 + ~(unint64_t)v94;
    if (v96 < 0x18)
    {
      v97 = *(double **)(a3 + 8);
      v98 = (double *)v150;
    }
    else
    {
      v97 = *(double **)(a3 + 8);
      v98 = (double *)v150;
      if ((unint64_t)(v150 - (_QWORD)v94) >= 0x20)
      {
        v99 = (v96 >> 3) + 1;
        v100 = v99 & 0x3FFFFFFFFFFFFFFCLL;
        v97 = &v94->f64[v100];
        v101 = (float64x2_t *)(v150 + 16);
        v102 = v94 + 1;
        v103 = v99 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v104 = vmulq_f64(*v102, *v102);
          v101[-1] = vmulq_f64(v102[-1], v102[-1]);
          *v101 = v104;
          v101 += 2;
          v102 += 2;
          v103 -= 4;
        }
        while (v103);
        if (v99 == (v99 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_88:
          if (v148 == v157 && v91 == v156)
          {
            v110 = operator new[]();
            v106 = (double *)v110;
            if ((int)v29 < 1)
              goto LABEL_99;
            v111 = v78 + 8 * (int)v29;
            if (v111 <= v78 + 8)
              v111 = v78 + 8;
            v112 = v111 + ~v78;
            v113 = (double *)v150;
            v114 = (double *)v78;
            v115 = (double *)v110;
            if (v112 >= 0x18)
            {
              v116 = (v112 >> 3) + 1;
              v117 = 8 * (v116 & 0x3FFFFFFFFFFFFFFCLL);
              v114 = (double *)(v78 + v117);
              v118 = (float64x2_t *)(v110 + 16);
              v119 = (float64x2_t *)(v78 + 16);
              v120 = (float64x2_t *)(v150 + 16);
              v121 = v116 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v122 = vaddq_f64(*v119, *v120);
                v118[-1] = vaddq_f64(v119[-1], v120[-1]);
                *v118 = v122;
                v118 += 2;
                v119 += 2;
                v120 += 2;
                v121 -= 4;
              }
              while (v121);
              if (v116 == (v116 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_99:
                v126 = operator new[]();
                v105 = (const void *)v126;
                if (v92 >= 4)
                {
                  v130 = 0;
                  v127 = v92 & 0xFFFFFFFC;
                  v128 = &v106[v127];
                  v131 = v127;
                  do
                  {
                    v132 = (float64x2_t *)(v126 + v130 * 8);
                    v133 = vsqrtq_f64(*(float64x2_t *)&v106[v130 + 2]);
                    *v132 = vsqrtq_f64(*(float64x2_t *)&v106[v130]);
                    v132[1] = v133;
                    v130 += 4;
                    v131 -= 4;
                  }
                  while (v131);
                  if (v127 == v92)
                    goto LABEL_107;
                  v129 = (double *)(v126 + 8 * v127);
                }
                else
                {
                  LODWORD(v127) = 0;
                  v128 = v106;
                  v129 = (double *)v126;
                }
                v134 = v92 - v127;
                do
                {
                  v135 = *v128++;
                  *v129++ = sqrt(v135);
                  --v134;
                }
                while (v134);
LABEL_107:
                v90 = v148;
                goto LABEL_108;
              }
              v113 = (double *)(v150 + v117);
              v115 = (double *)(v110 + v117);
            }
            do
            {
              v123 = *v114++;
              v124 = v123;
              v125 = *v113++;
              *v115++ = v124 + v125;
            }
            while ((unint64_t)v114 < v78 + 8 * (int)v29);
            goto LABEL_99;
          }
LABEL_130:
          __assert_rtn("doDimensionsMatchTo", "Matrix.hpp", 1043, "0");
        }
        v98 = (double *)(v150 + v100 * 8);
      }
    }
    v108 = (unint64_t)&v94->f64[v93];
    do
    {
      v109 = *v97++;
      *v98++ = v109 * v109;
    }
    while ((unint64_t)v97 < v108);
    goto LABEL_88;
  }
  v150 = 0;
  v105 = 0;
  v106 = 0;
  if (v90 != v157 || v91 != v156)
    goto LABEL_130;
LABEL_108:
  v136 = 8 * v90 * (unint64_t)v91;
  v137 = *(void **)(v154 + 8);
  if (*(_QWORD *)(v154 + 32) < v136)
  {
    if (v137 && *(_BYTE *)(v154 + 24))
      MEMORY[0x20BD36480]();
    v137 = (void *)operator new[]();
    *(_QWORD *)(v154 + 8) = v137;
    *(_QWORD *)(v154 + 32) = v136;
    *(_BYTE *)(v154 + 24) = 1;
  }
  *(_DWORD *)(v154 + 16) = v157;
  *(_DWORD *)(v154 + 20) = v156;
  memcpy(v137, v105, v136);
  v75 = a3;
  v76 = v155;
  if (!v105)
    goto LABEL_116;
  if ((_DWORD)v92)
  {
    MEMORY[0x20BD36480](v105, 0x1000C8000313F17);
LABEL_116:
    if ((_DWORD)v92 && v106)
      MEMORY[0x20BD36480](v106, 0x1000C8000313F17);
    if ((_DWORD)v92 && v150)
      MEMORY[0x20BD36480](v150, 0x1000C8000313F17);
  }
  a4 = v149;
  if ((_DWORD)v29 && v78)
    MEMORY[0x20BD36480](v78, 0x1000C8000313F17);
LABEL_125:
  v138 = *(_QWORD *)(v75 + 8);
  v139 = *(_DWORD *)(v75 + 16);
  v140 = *(_DWORD *)(v75 + 20);
  v173[0] = &off_24C4213F8;
  v173[1] = v138;
  v177 = 8 * v139 * (unint64_t)v140;
  v174 = v139;
  v175 = v140;
  v176 = 0;
  v168[0] = &off_24C4213F8;
  v168[1] = v44;
  v172 = 8 * v76 * v151;
  v169 = v157;
  v170 = v156;
  v171 = 0;
  Algo::atan2((uint64_t)v173, (uint64_t)v168, a5);
  v141 = *(_QWORD *)(a2 + 8);
  v142 = *(_DWORD *)(a2 + 16);
  v143 = *(_DWORD *)(a2 + 20);
  v163[0] = &off_24C4213F8;
  v163[1] = v141;
  v167 = 8 * v142 * (unint64_t)v143;
  v164 = v142;
  v165 = v143;
  v166 = 0;
  v144 = *(_QWORD *)(a1 + 8);
  v145 = *(_DWORD *)(a1 + 16);
  v146 = *(_DWORD *)(a1 + 20);
  v158[0] = &off_24C4213F8;
  v158[1] = v144;
  v162 = 8 * v145 * (unint64_t)v146;
  v159 = v145;
  v160 = v146;
  v161 = 0;
  Algo::atan2((uint64_t)v163, (uint64_t)v158, a4);
  if ((_DWORD)v29 && v44)
    MEMORY[0x20BD36480](v44, 0x1000C8000313F17);
  return 0;
}

void sub_20B64BB48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, int a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v22;

  if (v18 && v14)
    MEMORY[0x20BD36480](v14, 0x1000C8000313F17);
  if (v19)
  {
    if (!v18)
      goto LABEL_10;
    MEMORY[0x20BD36480](v19, 0x1000C8000313F17);
    a12 = 1;
  }
  if (a14 && a12)
    MEMORY[0x20BD36480](a14, 0x1000C8000313F17);
LABEL_10:
  if (v17)
    a11 = 0;
  v22 = a11;
  if (v15 && v17)
  {
    MEMORY[0x20BD36480](v17, 0x1000C8000313F17);
    v22 = 1;
  }
  if (v16)
  {
    if (v22)
      MEMORY[0x20BD36480](v16, 0x1000C8000313F17);
  }
  _Unwind_Resume(exception_object);
}

double *Algo::LinearSpace@<X0>(Algo *this@<X0>, uint64_t a2@<D0>, double a3@<D1>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v7;
  double *result;
  double v9;
  uint64_t v10;
  float64x2_t v11;
  float64x2_t v12;
  int32x2_t v13;
  float64x2_t *v14;
  uint64_t v15;
  int32x2_t v16;
  int64x2_t v17;
  float64x2_t v18;
  uint64_t v19;

  v4 = (int)this;
  *(_QWORD *)a4 = &off_24C4213F8;
  if ((_DWORD)this)
  {
    v7 = 8 * this;
    v19 = a2;
    result = (double *)operator new[]();
    a2 = v19;
  }
  else
  {
    v7 = 0;
    result = 0;
  }
  *(_DWORD *)(a4 + 16) = 1;
  *(_DWORD *)(a4 + 20) = v4;
  *(_BYTE *)(a4 + 24) = v4 != 0;
  *(_QWORD *)(a4 + 32) = v7;
  *(_QWORD *)a4 = &off_24C421338;
  *(_QWORD *)(a4 + 8) = result;
  if (v4 >= 1)
  {
    v9 = (a3 - *(double *)&a2) / ((double)v4 + -1.0);
    if (v4 < 4)
    {
      LODWORD(v10) = 0;
      goto LABEL_11;
    }
    v10 = v4 & 0xFFFFFFFC;
    v11 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v9, 0);
    v12 = (float64x2_t)vdupq_lane_s64(a2, 0);
    v13 = (int32x2_t)0x100000000;
    v14 = (float64x2_t *)(result + 2);
    v15 = v10;
    do
    {
      v16 = vadd_s32(v13, (int32x2_t)0x200000002);
      v17.i64[0] = v13.i32[0];
      v17.i64[1] = v13.i32[1];
      v18 = vcvtq_f64_s64(v17);
      v17.i64[0] = v16.i32[0];
      v17.i64[1] = v16.i32[1];
      v14[-1] = vmlaq_f64(v12, v11, v18);
      *v14 = vmlaq_f64(v12, v11, vcvtq_f64_s64(v17));
      v13 = vadd_s32(v13, (int32x2_t)0x400000004);
      v14 += 2;
      v15 -= 4;
    }
    while (v15);
    if (v10 != v4)
    {
      result += v10;
      do
      {
LABEL_11:
        *result++ = *(double *)&a2 + (double)(int)v10 * v9;
        LODWORD(v10) = v10 + 1;
      }
      while (v4 != (_DWORD)v10);
    }
  }
  return result;
}

double *Algo::LinearSpaceByStep@<X0>(Algo *this@<X0>, uint64_t a2@<D0>, double a3@<D1>, uint64_t a4@<X8>)
{
  unsigned int v4;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  double *result;
  double v10;
  uint64_t v11;
  float64x2_t v12;
  float64x2_t v13;
  int32x2_t v14;
  float64x2_t *v15;
  uint64_t v16;
  int32x2_t v17;
  int64x2_t v18;
  float64x2_t v19;
  uint64_t v20;

  v4 = this;
  v6 = (int)(a3 - *(double *)&a2) / this;
  *(_QWORD *)a4 = &off_24C4213F8;
  v7 = v6 + 1;
  if (v6 == -1)
  {
    v8 = 0;
    result = 0;
  }
  else
  {
    v8 = 8 * (v6 + 1);
    v20 = a2;
    result = (double *)operator new[]();
    a2 = v20;
  }
  *(_DWORD *)(a4 + 16) = 1;
  *(_DWORD *)(a4 + 20) = v7;
  *(_BYTE *)(a4 + 24) = (_DWORD)v7 != 0;
  *(_QWORD *)(a4 + 32) = v8;
  *(_QWORD *)a4 = &off_24C421338;
  *(_QWORD *)(a4 + 8) = result;
  if ((v6 & 0x80000000) == 0)
  {
    v10 = (double)v4;
    if (v7 < 4)
    {
      LODWORD(v11) = 0;
      goto LABEL_11;
    }
    v11 = v7 & 0xFFFFFFFC;
    v12 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v10, 0);
    v13 = (float64x2_t)vdupq_lane_s64(a2, 0);
    v14 = (int32x2_t)0x100000000;
    v15 = (float64x2_t *)(result + 2);
    v16 = v11;
    do
    {
      v17 = vadd_s32(v14, (int32x2_t)0x200000002);
      v18.i64[0] = v14.i32[0];
      v18.i64[1] = v14.i32[1];
      v19 = vcvtq_f64_s64(v18);
      v18.i64[0] = v17.i32[0];
      v18.i64[1] = v17.i32[1];
      v15[-1] = vmlaq_f64(v13, v12, v19);
      *v15 = vmlaq_f64(v13, v12, vcvtq_f64_s64(v18));
      v14 = vadd_s32(v14, (int32x2_t)0x400000004);
      v15 += 2;
      v16 -= 4;
    }
    while (v16);
    if (v11 != v7)
    {
      result += v7 & 0xFFFFFFFC;
      do
      {
LABEL_11:
        *result++ = *(double *)&a2 + (double)(int)v11 * v10;
        LODWORD(v11) = v11 + 1;
      }
      while (v6 + 1 != (_DWORD)v11);
    }
  }
  return result;
}

void Algo::Fspecial(int a1@<W0>, unsigned int a2@<W1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  double *v18;
  uint64_t v19;
  float64x2_t v20;
  float64x2_t v21;
  int32x2_t v22;
  float64x2_t *v23;
  uint64_t v24;
  int32x2_t v25;
  int64x2_t v26;
  float64x2_t v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  unsigned int v31;
  uint64_t *v32;
  uint64_t v33;
  _OWORD *v34;
  __int128 *v35;
  uint64_t v36;
  __int128 v37;
  int v38;
  unsigned int v39;
  uint64_t *v40;
  _OWORD *v41;
  __int128 *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  double *v63;
  double *v64;
  uint64_t v65;
  uint64_t v66;
  float64x2_t *v67;
  float64x2_t *v68;
  uint64_t v69;
  float64x2_t v70;
  double v71;
  uint64_t v72;
  float64x2_t *v73;
  unint64_t v74;
  unint64_t v75;
  double *v76;
  double *v77;
  uint64_t v78;
  uint64_t v79;
  float64x2_t *v80;
  float64x2_t *v81;
  uint64_t v82;
  float64x2_t v83;
  double v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  double *v89;
  double *v90;
  double *v91;
  uint64_t v92;
  uint64_t v93;
  float64x2_t *v94;
  float64x2_t *v95;
  float64x2_t *v96;
  uint64_t v97;
  float64x2_t v98;
  double v99;
  double v100;
  double v101;
  double v102;
  unint64_t v103;
  unint64_t v104;
  double *v105;
  uint64_t v106;
  float64x2_t *v107;
  uint64_t v108;
  float64x2_t v109;
  unint64_t v110;
  unint64_t v111;
  double *v112;
  unint64_t v113;
  long double *v114;
  uint64_t v115;
  float64x2_t *v116;
  float64x2_t v117;
  double v118;
  double *v119;
  double v120;
  double v121;
  double v122;
  double v123;
  int v124;
  double *v125;
  double v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  float64x2_t v130;
  float64x2_t *v131;
  uint64_t v132;
  float64x2_t v133;
  uint64_t v134;
  float64x2_t __x;
  void *__dst;
  long double __dsta;

  *(_QWORD *)a3 = &off_24C4213F8;
  v8 = a2 * a2;
  if ((_DWORD)v8)
    v9 = (void *)operator new[]();
  else
    v9 = 0;
  *(_QWORD *)(a3 + 8) = v9;
  *(_DWORD *)(a3 + 16) = a2;
  *(_DWORD *)(a3 + 20) = a2;
  *(_BYTE *)(a3 + 24) = (_DWORD)v8 != 0;
  *(_QWORD *)(a3 + 32) = 8 * a2 * a2;
  if ((_DWORD)v8)
  {
    v10 = operator new[]();
    v11 = operator new[]();
    if (a1)
      goto LABEL_99;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    if (a1)
      goto LABEL_99;
  }
  if (!a2)
  {
    v13 = 0;
    v19 = 0;
    goto LABEL_95;
  }
  v12 = (_QWORD *)operator new[]();
  v13 = v12;
  if ((int)a2 <= 0)
  {
LABEL_22:
    v28 = 8 * (a2 & 0xFFFFFFFC);
    v29 = (_QWORD *)v10;
    if ((a2 & 0xFFFFFFFC) == (unint64_t)a2)
    {
      v30 = 0;
      do
      {
        if ((unint64_t)((char *)v29 - (char *)v12) >= 0x20)
        {
          v34 = v29 + 2;
          v35 = (__int128 *)(v12 + 2);
          v36 = a2;
          do
          {
            v37 = *v35;
            *(v34 - 1) = *(v35 - 1);
            *v34 = v37;
            v34 += 2;
            v35 += 2;
            v36 -= 4;
          }
          while (v36);
          v29 = (_QWORD *)((char *)v29 + v28);
        }
        else
        {
          v31 = a2;
          v32 = v12;
          do
          {
            v33 = *v32++;
            *v29++ = v33;
            --v31;
          }
          while (v31);
        }
        ++v30;
      }
      while (v30 != a2);
    }
    else
    {
      v38 = 0;
      do
      {
        if ((unint64_t)((char *)v29 - (char *)v12) >= 0x20)
        {
          v41 = v29 + 2;
          v42 = (__int128 *)(v12 + 2);
          v43 = a2 & 0xFFFFFFFC;
          do
          {
            v44 = *v42;
            *(v41 - 1) = *(v42 - 1);
            *v41 = v44;
            v41 += 2;
            v42 += 2;
            v43 -= 4;
          }
          while (v43);
          v29 = (_QWORD *)((char *)v29 + v28);
          v39 = a2 & 0xFFFFFFFC;
          v40 = &v12[(unint64_t)v28 / 8];
        }
        else
        {
          v39 = 0;
          v40 = v12;
        }
        do
        {
          v45 = *v40++;
          *v29++ = v45;
          ++v39;
        }
        while (a2 != v39);
        ++v38;
      }
      while (v38 != a2);
    }
    if ((int)a2 >= 1)
    {
      if (a2 < 6)
        goto LABEL_49;
      v46 = 0;
      v47 = 8 * a2;
      v48 = (_QWORD *)v10;
      v49 = v11;
      do
      {
        v50 = 0;
        v51 = v48;
        do
        {
          *(_QWORD *)(v49 + v50) = *v51;
          v50 += 8;
          v51 = (_QWORD *)((char *)v51 + v47);
        }
        while (v47 != v50);
        ++v46;
        v49 += v47;
        ++v48;
      }
      while (v46 != a2);
    }
    if ((_DWORD)v8)
      goto LABEL_62;
    goto LABEL_94;
  }
  v14 = (double)(int)(a2 - 1) * 0.5;
  v15 = -v14;
  v16 = (v14 + v14) / ((double)a2 + -1.0);
  if (a2 < 4)
  {
    LODWORD(v17) = 0;
    v18 = (double *)v12;
    goto LABEL_17;
  }
  v17 = a2 & 0xFFFFFFFC;
  v20 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v16, 0);
  v21 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v15, 0);
  v22 = (int32x2_t)0x100000000;
  v23 = (float64x2_t *)(v12 + 2);
  v24 = v17;
  do
  {
    v25 = vadd_s32(v22, (int32x2_t)0x200000002);
    v26.i64[0] = v22.i32[0];
    v26.i64[1] = v22.i32[1];
    v27 = vcvtq_f64_s64(v26);
    v26.i64[0] = v25.i32[0];
    v26.i64[1] = v25.i32[1];
    v23[-1] = vmlaq_f64(v21, v20, v27);
    *v23 = vmlaq_f64(v21, v20, vcvtq_f64_s64(v26));
    v22 = vadd_s32(v22, (int32x2_t)0x400000004);
    v23 += 2;
    v24 -= 4;
  }
  while (v24);
  if (v17 != a2)
  {
    v18 = (double *)&v12[a2 & 0xFFFFFFFC];
    do
    {
LABEL_17:
      *v18++ = v15 + (double)(int)v17 * v16;
      LODWORD(v17) = v17 + 1;
    }
    while (a2 != (_DWORD)v17);
  }
  if (a2 > 3)
    goto LABEL_22;
  *(_QWORD *)v10 = *v12;
  if (a2 != 1)
  {
    *(_QWORD *)(v10 + 8) = v12[1];
    if (a2 == 2)
    {
      *(_QWORD *)(v10 + 16) = *v12;
      *(_QWORD *)(v10 + 24) = v12[1];
    }
    else
    {
      *(_QWORD *)(v10 + 16) = v12[2];
      *(_QWORD *)(v10 + 24) = *v12;
      *(_QWORD *)(v10 + 32) = v12[1];
      *(_QWORD *)(v10 + 40) = v12[2];
      *(_QWORD *)(v10 + 48) = *v12;
      *(_QWORD *)(v10 + 56) = v12[1];
      *(_QWORD *)(v10 + 64) = v12[2];
    }
  }
LABEL_49:
  *(_QWORD *)v11 = *(_QWORD *)v10;
  if (a2 == 1)
    goto LABEL_62;
  *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8 * a2);
  if (a2 == 2)
  {
    *(_QWORD *)(v11 + 16) = *(_QWORD *)(v10 + 8);
    *(_QWORD *)(v11 + 24) = *(_QWORD *)(v10 + 24);
    goto LABEL_62;
  }
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v10 + 16 * a2);
  v52 = 16 * a2;
  if (a2 == 3)
  {
    *(_QWORD *)(v11 + 24) = *(_QWORD *)(v10 + 8);
    *(_QWORD *)(v11 + 32) = *(_QWORD *)(v10 + 32);
    *(_QWORD *)(v11 + 40) = *(_QWORD *)(v10 + 56);
    v53 = (_QWORD *)(v11 + v52);
    *v53 = *(_QWORD *)(v10 + 16);
    v53[1] = *(_QWORD *)(v10 + 40);
    v53[2] = *(_QWORD *)(v10 + 64);
    goto LABEL_62;
  }
  *(_QWORD *)(v11 + 24) = *(_QWORD *)(v10 + 24 * a2);
  if (a2 != 4)
    *(_QWORD *)(v11 + 32) = *(_QWORD *)(v10 + 32 * a2);
  v54 = (_QWORD *)(v11 + 8 * a2);
  *v54 = *(_QWORD *)(v10 + 8);
  v54[1] = *(_QWORD *)(v10 + 8 + 8 * a2);
  v54[2] = *(_QWORD *)(v10 + 8 + 16 * a2);
  v54[3] = *(_QWORD *)(v10 + 8 + 24 * a2);
  if (a2 != 4)
    v54[4] = *(_QWORD *)(v10 + 8 + 32 * a2);
  v55 = (_QWORD *)(v11 + v52);
  *v55 = *(_QWORD *)(v10 + 16);
  v55[1] = *(_QWORD *)(v10 + 16 + 8 * a2);
  v55[2] = *(_QWORD *)(v10 + 16 + 16 * a2);
  v55[3] = *(_QWORD *)(v10 + 16 + 24 * a2);
  if (a2 != 4)
    v55[4] = *(_QWORD *)(v10 + 16 + 32 * a2);
  v56 = (_QWORD *)(v11 + 24 * a2);
  *v56 = *(_QWORD *)(v10 + 24);
  v56[1] = *(_QWORD *)(v10 + 24 + 8 * a2);
  v56[2] = *(_QWORD *)(v10 + 24 + 16 * a2);
  v56[3] = *(_QWORD *)(v10 + 24 + 24 * a2);
  if (a2 != 4)
  {
    v57 = 32 * a2;
    v56[4] = *(_QWORD *)(v10 + 24 + v57);
    v58 = (_QWORD *)(v11 + v57);
    *v58 = *(_QWORD *)(v10 + 32);
    v58[1] = *(_QWORD *)(v10 + 32 + 8 * a2);
    v58[2] = *(_QWORD *)(v10 + 32 + 16 * a2);
    v58[3] = *(_QWORD *)(v10 + 32 + 24 * a2);
    v58[4] = *(_QWORD *)(v10 + 32 + v57);
    if (!(_DWORD)v8)
    {
LABEL_94:
      v19 = 0;
      goto LABEL_95;
    }
  }
LABEL_62:
  v59 = operator new[]();
  v60 = v59;
  if ((int)v8 < 1)
    goto LABEL_72;
  v61 = v10 + 8 * (int)v8;
  if (v61 <= v10 + 8)
    v61 = v10 + 8;
  v62 = v61 + ~v10;
  v63 = (double *)v10;
  v64 = (double *)v59;
  if (v62 < 0x18)
    goto LABEL_71;
  v63 = (double *)v10;
  v64 = (double *)v59;
  if ((unint64_t)(v59 - v10) < 0x20)
    goto LABEL_71;
  v65 = (v62 >> 3) + 1;
  v66 = 8 * (v65 & 0x3FFFFFFFFFFFFFFCLL);
  v63 = (double *)(v10 + v66);
  v67 = (float64x2_t *)(v59 + 16);
  v68 = (float64x2_t *)(v10 + 16);
  v69 = v65 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v70 = vmulq_f64(*v68, *v68);
    v67[-1] = vmulq_f64(v68[-1], v68[-1]);
    *v67 = v70;
    v67 += 2;
    v68 += 2;
    v69 -= 4;
  }
  while (v69);
  if (v65 != (v65 & 0x3FFFFFFFFFFFFFFCLL))
  {
    v64 = (double *)(v59 + v66);
    do
    {
LABEL_71:
      v71 = *v63++;
      *v64++ = v71 * v71;
    }
    while ((unint64_t)v63 < v10 + 8 * (int)v8);
  }
LABEL_72:
  __dst = v9;
  v72 = operator new[]();
  v73 = (float64x2_t *)v72;
  if ((int)v8 < 1)
    goto LABEL_82;
  v74 = v11 + 8 * (int)v8;
  if (v74 <= v11 + 8)
    v74 = v11 + 8;
  v75 = v74 + ~v11;
  v76 = (double *)v11;
  v77 = (double *)v72;
  if (v75 < 0x18)
    goto LABEL_81;
  v76 = (double *)v11;
  v77 = (double *)v72;
  if ((unint64_t)(v72 - v11) < 0x20)
    goto LABEL_81;
  v78 = (v75 >> 3) + 1;
  v79 = 8 * (v78 & 0x3FFFFFFFFFFFFFFCLL);
  v76 = (double *)(v11 + v79);
  v80 = (float64x2_t *)(v72 + 16);
  v81 = (float64x2_t *)(v11 + 16);
  v82 = v78 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v83 = vmulq_f64(*v81, *v81);
    v80[-1] = vmulq_f64(v81[-1], v81[-1]);
    *v80 = v83;
    v80 += 2;
    v81 += 2;
    v82 -= 4;
  }
  while (v82);
  if (v78 != (v78 & 0x3FFFFFFFFFFFFFFCLL))
  {
    v77 = (double *)(v72 + v79);
    do
    {
LABEL_81:
      v84 = *v76++;
      *v77++ = v84 * v84;
    }
    while ((unint64_t)v76 < v11 + 8 * (int)v8);
  }
LABEL_82:
  v85 = operator new[]();
  v19 = v85;
  if ((int)v8 >= 1)
  {
    v86 = v60 + 8 * (int)v8;
    v87 = v60 + 8;
    if (v86 > v60 + 8)
      v87 = v60 + 8 * (int)v8;
    v88 = v87 + ~v60;
    v89 = (double *)v73;
    v90 = (double *)v60;
    v91 = (double *)v85;
    if (v88 >= 0x18)
    {
      v92 = (v88 >> 3) + 1;
      v93 = 8 * (v92 & 0x3FFFFFFFFFFFFFFCLL);
      v90 = (double *)(v60 + v93);
      v94 = (float64x2_t *)(v85 + 16);
      v95 = (float64x2_t *)(v60 + 16);
      v96 = v73 + 1;
      v97 = v92 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v98 = vaddq_f64(*v95, *v96);
        v94[-1] = vaddq_f64(v95[-1], v96[-1]);
        *v94 = v98;
        v94 += 2;
        v95 += 2;
        v96 += 2;
        v97 -= 4;
      }
      while (v97);
      if (v92 == (v92 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_91;
      v89 = &v73->f64[(unint64_t)v93 / 8];
      v91 = (double *)(v85 + v93);
    }
    do
    {
      v99 = *v90++;
      v100 = v99;
      v101 = *v89++;
      *v91++ = v100 + v101;
    }
    while ((unint64_t)v90 < v86);
  }
LABEL_91:
  MEMORY[0x20BD36480](v73, 0x1000C8000313F17);
  if ((_DWORD)v8 && v60)
  {
    MEMORY[0x20BD36480](v60, 0x1000C8000313F17);
    goto LABEL_106;
  }
  if ((_DWORD)v8)
  {
LABEL_106:
    v102 = -1.0 / ((a4 + a4) * a4);
    v103 = v19 + 8 * v8;
    if (v103 <= v19 + 8)
      v103 = v19 + 8;
    v104 = v103 + ~v19;
    v105 = (double *)v19;
    if (v104 >= 0x18)
    {
      v106 = (v104 >> 3) + 1;
      v107 = (float64x2_t *)(v19 + 16);
      v108 = v106 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v109 = vmulq_n_f64(*v107, v102);
        v107[-1] = vmulq_n_f64(v107[-1], v102);
        *v107 = v109;
        v107 += 2;
        v108 -= 4;
      }
      while (v108);
      if (v106 == (v106 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_114:
        v110 = *(_QWORD *)(a3 + 8);
        *(_DWORD *)(a3 + 16) = a2;
        *(_DWORD *)(a3 + 20) = a2;
        memcpy(__dst, (const void *)v19, 8 * a2 * a2);
        v111 = v110 + 8 * v8;
        v112 = (double *)(v110 + 8);
        if (v111 > v110 + 8)
          v112 = (double *)(v110 + 8 * v8);
        v113 = (unint64_t)v112 + ~v110;
        v114 = (long double *)v110;
        if (v113 >= 8)
        {
          v134 = (v113 >> 3) + 1;
          v115 = v134 & 0x3FFFFFFFFFFFFFFELL;
          v116 = (float64x2_t *)v110;
          do
          {
            __x = *v116;
            __dsta = exp(v116->f64[1]);
            v117.f64[0] = exp(__x.f64[0]);
            v117.f64[1] = __dsta;
            *v116++ = v117;
            v115 -= 2;
          }
          while (v115);
          if (v134 == (v134 & 0x3FFFFFFFFFFFFFFELL))
          {
LABEL_122:
            if ((int)v8 < 1)
            {
              v122 = -0.000000476837158;
            }
            else
            {
              v118 = -2147483650.0;
              v119 = (double *)v110;
              do
              {
                v120 = *v119++;
                v121 = v120;
                if (v120 > v118)
                  v118 = v121;
              }
              while ((unint64_t)v119 < v110 + 8 * (int)v8);
              v122 = v118 * 2.22044605e-16;
            }
            v123 = 0.0;
            v124 = v8;
            v125 = (double *)v110;
            do
            {
              v126 = *v125;
              if (*v125 < v122)
              {
                *v125 = 0.0;
                v126 = 0.0;
              }
              v123 = v123 + v126;
              ++v125;
              --v124;
            }
            while (v124);
            v127 = v110 + 8 * v8;
            if (v127 <= v110 + 8)
              v127 = v110 + 8;
            v128 = v127 + ~v110;
            if (v128 >= 0x18)
            {
              v129 = (v128 >> 3) + 1;
              v130 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v123, 0);
              v131 = (float64x2_t *)(v110 + 16);
              v132 = v129 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v133 = vdivq_f64(*v131, v130);
                v131[-1] = vdivq_f64(v131[-1], v130);
                *v131 = v133;
                v131 += 2;
                v132 -= 4;
              }
              while (v132);
              if (v129 == (v129 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_141:
                if (v19)
                  MEMORY[0x20BD36480](v19, 0x1000C8000313F17);
                goto LABEL_96;
              }
              v110 += 8 * (v129 & 0x3FFFFFFFFFFFFFFCLL);
            }
            do
            {
              *(double *)v110 = *(double *)v110 / v123;
              v110 += 8;
            }
            while (v110 < v111);
            goto LABEL_141;
          }
          v114 = (long double *)(v110 + 8 * (v134 & 0x3FFFFFFFFFFFFFFELL));
        }
        do
        {
          *v114 = exp(*v114);
          ++v114;
        }
        while ((unint64_t)v114 < v111);
        goto LABEL_122;
      }
      v105 = (double *)(v19 + 8 * (v106 & 0x3FFFFFFFFFFFFFFCLL));
    }
    do
    {
      *v105 = v102 * *v105;
      ++v105;
    }
    while ((unint64_t)v105 < v19 + 8 * (unint64_t)v8);
    goto LABEL_114;
  }
  v9 = __dst;
LABEL_95:
  *(_DWORD *)(a3 + 16) = a2;
  *(_DWORD *)(a3 + 20) = a2;
  memcpy(v9, (const void *)v19, 8 * a2 * a2);
LABEL_96:
  if (a2 && v13)
    MEMORY[0x20BD36480](v13, 0x1000C8000313F17);
LABEL_99:
  if (v11 && (_DWORD)v8)
    MEMORY[0x20BD36480](v11, 0x1000C8000313F17);
  if (v10)
  {
    if ((_DWORD)v8)
      JUMPOUT(0x20BD36480);
  }
}

void sub_20B64CA70(_Unwind_Exception *a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  MEMORY[0x20BD36480](v8, 0x1000C8000313F17);
  if (v7)
    MEMORY[0x20BD36480](v7, 0x1000C8000313F17);
  if (v2 && v4)
    MEMORY[0x20BD36480](v4, 0x1000C8000313F17);
  if (v3 && v6)
    MEMORY[0x20BD36480](v3, 0x1000C8000313F17);
  if (v1)
  {
    if (v6)
      MEMORY[0x20BD36480](v1, 0x1000C8000313F17);
  }
  Matrix<double>::~Matrix(v5);
  _Unwind_Resume(a1);
}

uint64_t Algo::StdFilter(uint64_t a1, int a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  uint64_t *v14;
  double *v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  double *v21;
  double *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float64x2_t *v27;
  float64x2_t v28;
  unint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  unsigned int v35;
  double *v36;
  double *v37;
  int v38;
  double *v39;
  double v40;
  unsigned int v41;
  double v42;
  double v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  double v47;
  unsigned int v48;
  double *v49;
  double *v50;
  int v51;
  double *v52;
  double v53;
  unsigned int v54;
  double v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  double v60;
  double v61;
  unint64_t v62;
  uint64_t v63;
  int v64;
  unsigned int v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  double v88;
  uint64_t v89;
  unint64_t v90;
  double v91;
  char v92;
  unint64_t v94;
  BOOL v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  unsigned int v102;
  int v103;
  uint64_t v104;
  unsigned int v105;

  if (a2 <= 0)
    __assert_rtn("StdFilter", "Algo.cpp", 627, "windowSize > 0");
  v6 = *(_DWORD *)(a1 + 16);
  v7 = *(_DWORD *)(a1 + 20);
  v8 = 8 * v6 * (unint64_t)v7;
  if (*(_QWORD *)(a3 + 32) < v8)
  {
    if (*(_QWORD *)(a3 + 8) && *(_BYTE *)(a3 + 24))
      MEMORY[0x20BD36480]();
    *(_QWORD *)(a3 + 8) = operator new[]();
    *(_QWORD *)(a3 + 32) = v8;
    *(_BYTE *)(a3 + 24) = 1;
  }
  v100 = a2;
  v102 = v7;
  *(_DWORD *)(a3 + 16) = v6;
  *(_DWORD *)(a3 + 20) = v7;
  v9 = *(_DWORD *)(a1 + 16);
  v10 = *(_DWORD *)(a1 + 20);
  if (!(v10 * v9))
  {
    v95 = 0;
    v12 = 0;
    v96 = 8 * v9 * (unint64_t)v10;
    v14 = (uint64_t *)(a1 + 8);
    v17 = v9;
    v16 = v10;
    goto LABEL_21;
  }
  v11 = operator new[]();
  v12 = v11;
  v15 = *(double **)(a1 + 8);
  v14 = (uint64_t *)(a1 + 8);
  v13 = v15;
  v17 = *((_DWORD *)v14 + 2);
  v16 = *((_DWORD *)v14 + 3);
  v18 = v16 * v17;
  v95 = v10 * v9 != 0;
  v96 = 8 * v9 * (unint64_t)v10;
  if ((int)(v16 * v17) < 1)
    goto LABEL_21;
  v19 = (unint64_t)&v13[v18];
  if (v19 <= (unint64_t)(v13 + 1))
    v19 = (unint64_t)(v13 + 1);
  v20 = v19 + ~(unint64_t)v13;
  if (v20 < 0x18)
  {
    v21 = v13;
    v22 = (double *)v11;
LABEL_19:
    v29 = (unint64_t)&v13[v18];
    do
    {
      v30 = *v21++;
      *v22++ = v30 * v30;
    }
    while ((unint64_t)v21 < v29);
    goto LABEL_21;
  }
  v21 = v13;
  v22 = (double *)v11;
  if ((unint64_t)(v11 - (_QWORD)v13) < 0x20)
    goto LABEL_19;
  v23 = 0;
  v24 = (v20 >> 3) + 1;
  v25 = v24 & 0x3FFFFFFFFFFFFFFCLL;
  v21 = &v13[v25];
  v26 = v24 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v27 = (float64x2_t *)(v11 + v23 * 8);
    v28 = vmulq_f64(*(float64x2_t *)&v13[v23 + 2], *(float64x2_t *)&v13[v23 + 2]);
    *v27 = vmulq_f64(*(float64x2_t *)&v13[v23], *(float64x2_t *)&v13[v23]);
    v27[1] = v28;
    v23 += 4;
    v26 -= 4;
  }
  while (v26);
  if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
  {
    v22 = (double *)(v11 + v25 * 8);
    goto LABEL_19;
  }
LABEL_21:
  v94 = 8 * v17 * (unint64_t)v16;
  if (v94)
  {
    v31 = operator new[]();
    if (!v16)
      goto LABEL_32;
  }
  else
  {
    v31 = 0;
    if (!v16)
      goto LABEL_32;
  }
  v32 = 0;
  v33 = *v14;
  v34 = 0.0;
  v35 = v16;
  do
  {
    v34 = v34 + *(double *)(v33 + v32);
    *(double *)(v31 + v32) = v34;
    v32 += 8;
    --v35;
  }
  while (v35);
  if (v17 >= 2)
  {
    v36 = (double *)(v33 + v32);
    v37 = (double *)(v31 + v32);
    v38 = 1;
    v39 = (double *)v31;
    do
    {
      v40 = 0.0;
      v41 = v16;
      do
      {
        v42 = *v36++;
        v40 = v40 + v42;
        v43 = *v39++;
        *v37++ = v40 + v43;
        --v41;
      }
      while (v41);
      ++v38;
    }
    while (v38 != v17);
  }
LABEL_32:
  if (v96)
  {
    v44 = operator new[]();
    v45 = v100;
    if (!v10)
      goto LABEL_43;
  }
  else
  {
    v44 = 0;
    v45 = v100;
    if (!v10)
      goto LABEL_43;
  }
  v46 = 0;
  v47 = 0.0;
  v48 = v10;
  do
  {
    v47 = v47 + *(double *)(v12 + v46);
    *(double *)(v44 + v46) = v47;
    v46 += 8;
    --v48;
  }
  while (v48);
  if (v9 >= 2)
  {
    v49 = (double *)(v12 + v46);
    v50 = (double *)(v44 + v46);
    v51 = 1;
    v52 = (double *)v44;
    do
    {
      v53 = 0.0;
      v54 = v10;
      do
      {
        v55 = *v49++;
        v53 = v53 + v55;
        v56 = *v52++;
        *v50++ = v53 + v56;
        --v54;
      }
      while (v54);
      ++v51;
    }
    while (v51 != v9);
  }
LABEL_43:
  v57 = v45 >> 1;
  v58 = (v57 + 1);
  v104 = v6 - v57;
  v105 = v9;
  if ((int)v58 < (int)v104)
  {
    v59 = v102 - v57;
    if ((int)v58 < (int)(v102 - v57))
    {
      v60 = (double)(int)(v45 * v45);
      v61 = sqrt(v60 / (v60 + -1.0));
      v103 = v45 - v57;
      v62 = (unint64_t)v45 >> 1;
      v63 = 8 * v62 + 8;
      LODWORD(v62) = v57 + v62;
      v64 = v62 + 1;
      v65 = v62 + 1 - v45;
      v66 = 8 * v65;
      v67 = v16 * v65;
      v68 = v16 * (v62 + 1);
      v99 = v44 + v66;
      v101 = v31 + v66;
      v69 = v10 * v65;
      v70 = v10 * (v62 + 1);
      v71 = 8 * v62 + 8;
      v97 = v44 + v71;
      v98 = v31 + v71;
      v72 = (v57 + 1);
      while (1)
      {
        v73 = v57;
        if (v105 <= (int)v57 + (int)v72 || v105 <= (int)v72 - v103 || v17 <= (int)v57 + (int)v72)
          goto LABEL_80;
        v74 = 8 * v67;
        v75 = v101 + v74;
        v76 = 8 * v68;
        v77 = v101 + v76;
        v78 = 8 * v69;
        v79 = v99 + v78;
        v80 = 8 * v70;
        v81 = v99 + v80;
        v82 = v98 + v74;
        v83 = v98 + v76;
        v84 = v97 + v78;
        v85 = v97 + v80;
        if (v10 <= v16)
          break;
        if (v17 <= (int)v72 - v103)
          goto LABEL_80;
        v89 = 0;
        do
        {
          if (v10 <= v64 + (int)v89)
            goto LABEL_80;
          if (v10 <= v65 + v89)
            goto LABEL_80;
          if (v16 <= v64 + (int)v89)
            goto LABEL_80;
          if (v16 <= v65 + v89)
            goto LABEL_80;
          if (v72 >= *(unsigned int *)(a3 + 16))
            goto LABEL_80;
          v90 = *(unsigned int *)(a3 + 20);
          if (v58 + v89 >= v90)
            goto LABEL_80;
          v91 = *(double *)(v83 + 8 * v89)
              - *(double *)(v82 + 8 * v89)
              - *(double *)(v77 + 8 * v89)
              + *(double *)(v75 + 8 * v89);
          *(double *)(*(_QWORD *)(a3 + 8) + 8 * (v72 * v90) + v63 + 8 * v89) = v61
                                                                                             * sqrt((*(double *)(v85 + 8 * v89)- *(double *)(v84 + 8 * v89)- *(double *)(v81 + 8 * v89)+ *(double *)(v79 + 8 * v89))/ v60- v91 * (v91 / v60) / v60);
          ++v89;
        }
        while (v59 > (int)v58 + (int)v89);
LABEL_46:
        ++v72;
        v67 += v16;
        v68 += v16;
        v69 += v10;
        v70 += v10;
        v57 = v73;
        if (v72 == v104)
          goto LABEL_69;
      }
      if (v17 > (int)v72 - v103)
      {
        v86 = 0;
        while (v10 > v64 + (int)v86)
        {
          if (v10 <= v65 + v86)
            break;
          if (v72 >= *(unsigned int *)(a3 + 16))
            break;
          v87 = *(unsigned int *)(a3 + 20);
          if (v58 + v86 >= v87)
            break;
          v88 = *(double *)(v83 + 8 * v86)
              - *(double *)(v82 + 8 * v86)
              - *(double *)(v77 + 8 * v86)
              + *(double *)(v75 + 8 * v86);
          *(double *)(*(_QWORD *)(a3 + 8) + 8 * (v72 * v87) + v63 + 8 * v86) = v61
                                                                                             * sqrt((*(double *)(v85 + 8 * v86)- *(double *)(v84 + 8 * v86)- *(double *)(v81 + 8 * v86)+ *(double *)(v79 + 8 * v86))/ v60- v88 * (v88 / v60) / v60);
          if (v59 <= (int)v58 + (int)++v86)
            goto LABEL_46;
        }
      }
LABEL_80:
      __assert_rtn("operator()", "Matrix.hpp", 120, "row < m_rows && col < m_cols");
    }
  }
LABEL_69:
  if (v44 && v96)
    MEMORY[0x20BD36480](v44, 0x1000C8000313F17);
  if (v31 && v94)
    MEMORY[0x20BD36480](v31, 0x1000C8000313F17);
  v92 = !v95;
  if (!v12)
    v92 = 1;
  if ((v92 & 1) == 0)
    MEMORY[0x20BD36480](v12, 0x1000C8000313F17);
  return 0;
}

void sub_20B64D230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, uint64_t a11, int a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  char v16;

  if (v14 && a12)
    MEMORY[0x20BD36480](v14, 0x1000C8000313F17);
  v16 = a13 ^ 1;
  if (!v13)
    v16 = 1;
  if ((v16 & 1) == 0)
    MEMORY[0x20BD36480](v13, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

uint64_t Algo::NormXcorr2d(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  BOOL v26;
  unint64_t v27;
  unint64_t v28;
  double *v29;
  double *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float64x2_t *v36;
  float64x2_t v37;
  unint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  unsigned int v44;
  double *v45;
  double *v46;
  int v47;
  double *v48;
  double v49;
  unsigned int v50;
  double v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  int v56;
  double *v57;
  double *v58;
  int v59;
  double *v60;
  double v61;
  int v62;
  double v63;
  double v64;
  int v65;
  uint64_t v66;
  double v67;
  double v68;
  uint64_t v69;
  unint64_t v70;
  double *v71;
  unint64_t v72;
  double *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  float64x2_t *v81;
  unint64_t v82;
  unint64_t v83;
  double *v84;
  double *v85;
  uint64_t v86;
  uint64_t v87;
  float64x2_t *v88;
  float64x2_t *v89;
  uint64_t v90;
  float64x2_t v91;
  unint64_t v92;
  double v93;
  unint64_t v94;
  double *v95;
  uint64_t v96;
  unint64_t v97;
  double *v98;
  uint64_t v99;
  uint64_t v100;
  double v101;
  uint64_t v102;
  int v103;
  unsigned int v104;
  uint64_t v105;
  double v106;
  double v107;
  uint64_t v108;
  double *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  int v116;
  int v117;
  double v118;
  int v119;
  unsigned int v120;
  uint64_t v121;
  unsigned int v122;
  uint64_t v123;
  int v124;
  unsigned int v125;
  unsigned int v126;
  unint64_t v127;
  unsigned int v128;
  int v129;
  int v130;
  int v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v134;
  double v135;
  double v136;
  double v137;
  unsigned int v139;
  uint64_t v140;
  float64x2_t v141;
  float64x2_t v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  float64x2_t *v150;
  float64x2_t *v151;
  uint64_t v152;
  float64x2_t v153;
  float64x2_t v154;
  double *v155;
  uint64_t v156;
  double *v157;
  double v158;
  double v159;
  double v160;
  unint64_t v161;
  unint64_t v162;
  int v163;
  unsigned int v164;
  int v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  double v170;
  double v171;
  uint64_t v172;
  uint64_t v173;
  double v174;
  double v175;
  double v176;
  double v177;
  unsigned int v179;
  uint64_t v180;
  uint64_t v181;
  float64x2_t v182;
  float64x2_t v183;
  unsigned int v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  float64x2_t *v190;
  float64x2_t *v191;
  uint64_t v192;
  float64x2_t v193;
  float64x2_t v194;
  double *v195;
  uint64_t v196;
  double *v197;
  double v198;
  double v199;
  double v200;
  unint64_t v201;
  char v202;
  int v204;
  unint64_t v205;
  uint64_t v206;
  int v207;
  unsigned int v208;
  unint64_t v209;
  int v210;
  BOOL v211;
  unint64_t v212;
  unsigned int v213;
  unsigned int v214;
  int v215;
  BOOL v216;
  unsigned int v217;
  unint64_t v218;
  unsigned int v219;
  int v220;
  unsigned int v221;
  uint64_t v222;
  uint64_t v223;
  int v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unsigned int v228;
  int v229;
  unsigned int v230;
  unint64_t v231;
  uint64_t v233;

  v8 = *(_DWORD *)(a2 + 16);
  v7 = *(_DWORD *)(a2 + 20);
  v9 = *(unsigned int *)(a1 + 16);
  v10 = *(unsigned int *)(a1 + 20);
  v11 = 8 * v8 * (unint64_t)v7;
  v12 = *(_QWORD *)(a3 + 8);
  if (*(_QWORD *)(a3 + 32) >= v11)
  {
    v13 = v7 * v8;
    v14 = a3;
  }
  else
  {
    if (v12 && *(_BYTE *)(a3 + 24))
      MEMORY[0x20BD36480]();
    v13 = v7 * v8;
    v12 = operator new[]();
    v14 = a3;
    *(_QWORD *)(a3 + 8) = v12;
    *(_QWORD *)(a3 + 32) = v11;
    *(_BYTE *)(a3 + 24) = 1;
  }
  *(_DWORD *)(v14 + 16) = v8;
  *(_DWORD *)(v14 + 20) = v7;
  v230 = v8;
  if (v13 >= 1)
  {
    v15 = v12 + 8 * v13;
    if (v15 <= v12 + 8)
      v15 = v12 + 8;
    bzero((void *)v12, ((v15 + ~v12) & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  v17 = *(_DWORD *)(a2 + 16);
  v16 = *(unsigned int *)(a2 + 20);
  v18 = v16 * v17;
  v233 = v16;
  if ((_DWORD)v16 * v17)
  {
    v19 = operator new[]();
    v16 = v233;
    v20 = v19;
    v22 = (uint64_t *)(a2 + 8);
    v21 = *(_QWORD *)(a2 + 8);
    v23 = *(_DWORD *)(a2 + 16);
    v24 = *(_DWORD *)(a2 + 20);
    v25 = v24 * v23;
    v26 = v18 != 0;
    v218 = 8 * v17 * (unint64_t)v233;
    if ((int)(v24 * v23) < 1)
      goto LABEL_26;
    v27 = v21 + 8 * v25;
    if (v27 <= v21 + 8)
      v27 = v21 + 8;
    v28 = v27 + ~v21;
    if (v28 < 0x18)
    {
      v29 = *(double **)(a2 + 8);
      v30 = (double *)v19;
    }
    else
    {
      v29 = *(double **)(a2 + 8);
      v30 = (double *)v19;
      if ((unint64_t)(v19 - v21) >= 0x20)
      {
        v31 = *(_DWORD *)(a2 + 20);
        v32 = 0;
        v33 = (v28 >> 3) + 1;
        v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
        v29 = (double *)(v21 + v34);
        v35 = v33 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v36 = (float64x2_t *)(v19 + v32);
          v37 = vmulq_f64(*(float64x2_t *)(v21 + v32 + 16), *(float64x2_t *)(v21 + v32 + 16));
          *v36 = vmulq_f64(*(float64x2_t *)(v21 + v32), *(float64x2_t *)(v21 + v32));
          v36[1] = v37;
          v32 += 32;
          v35 -= 4;
        }
        while (v35);
        if (v33 == (v33 & 0x3FFFFFFFFFFFFFFCLL))
        {
          v24 = v31;
          goto LABEL_26;
        }
        v30 = (double *)(v19 + v34);
        v24 = v31;
      }
    }
    v38 = v21 + 8 * v25;
    do
    {
      v39 = *v29++;
      *v30++ = v39 * v39;
    }
    while ((unint64_t)v29 < v38);
  }
  else
  {
    v26 = 0;
    v20 = 0;
    v218 = 8 * v17 * (unint64_t)v16;
    v22 = (uint64_t *)(a2 + 8);
    v23 = *(_DWORD *)(a2 + 16);
    v24 = v16;
  }
LABEL_26:
  v228 = v7;
  v217 = v23;
  v219 = v24;
  v212 = 8 * v23 * (unint64_t)v24;
  if (v212)
  {
    v40 = operator new[]();
    v16 = v233;
    v23 = v217;
    v24 = v219;
    if (!v219)
      goto LABEL_37;
  }
  else
  {
    v40 = 0;
    if (!v24)
      goto LABEL_37;
  }
  v41 = 0;
  v42 = *v22;
  v43 = 0.0;
  v44 = v24;
  do
  {
    v43 = v43 + *(double *)(v42 + v41);
    *(double *)(v40 + v41) = v43;
    v41 += 8;
    --v44;
  }
  while (v44);
  if (v23 >= 2)
  {
    v45 = (double *)(v42 + v41);
    v46 = (double *)(v40 + v41);
    v47 = 1;
    v48 = (double *)v40;
    do
    {
      v49 = 0.0;
      v50 = v24;
      do
      {
        v51 = *v45++;
        v49 = v49 + v51;
        v52 = *v48++;
        *v46++ = v49 + v52;
        --v50;
      }
      while (v50);
      ++v47;
    }
    while (v47 != v23);
  }
LABEL_37:
  if (v218)
  {
    v53 = operator new[]();
    v16 = v233;
    if (!(_DWORD)v233)
      goto LABEL_48;
  }
  else
  {
    v53 = 0;
    if (!(_DWORD)v16)
      goto LABEL_48;
  }
  v54 = 0;
  v55 = 0.0;
  v56 = v16;
  do
  {
    v55 = v55 + *(double *)(v20 + v54);
    *(double *)(v53 + v54) = v55;
    v54 += 8;
    --v56;
  }
  while (v56);
  if (v17 >= 2)
  {
    v57 = (double *)(v20 + v54);
    v58 = (double *)(v53 + v54);
    v59 = 1;
    v60 = (double *)v53;
    do
    {
      v61 = 0.0;
      v62 = v16;
      do
      {
        v63 = *v57++;
        v61 = v61 + v63;
        v64 = *v60++;
        *v58++ = v61 + v64;
        --v62;
      }
      while (v62);
      ++v59;
    }
    while (v59 != v17);
  }
LABEL_48:
  v65 = *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16);
  v66 = v65;
  v67 = 0.0;
  v68 = 0.0;
  if (v65 < 1)
    goto LABEL_59;
  v69 = *(_QWORD *)(a1 + 8);
  v70 = v69 + 8 * v65;
  v71 = (double *)(v69 + 8);
  if (v70 <= v69 + 8)
    v70 = v69 + 8;
  v72 = v70 + ~v69;
  if (v72 < 8)
  {
    v73 = *(double **)(a1 + 8);
    goto LABEL_57;
  }
  v74 = (v72 >> 3) + 1;
  v75 = v74 & 0x3FFFFFFFFFFFFFFELL;
  do
  {
    v68 = v68 + *(v71 - 1) + *v71;
    v71 += 2;
    v75 -= 2;
  }
  while (v75);
  if (v74 != (v74 & 0x3FFFFFFFFFFFFFFELL))
  {
    v73 = (double *)(v69 + 8 * (v74 & 0x3FFFFFFFFFFFFFFELL));
LABEL_57:
    v76 = v69 + 8 * v65;
    do
    {
      v77 = *v73++;
      v68 = v68 + v77;
    }
    while ((unint64_t)v73 < v76);
  }
LABEL_59:
  v216 = v26;
  v78 = v66;
  if (!(_DWORD)v66)
    goto LABEL_85;
  v79 = operator new[]();
  v80 = *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16);
  if (v80 >= 1)
  {
    v81 = *(float64x2_t **)(a1 + 8);
    v82 = (unint64_t)&v81->f64[v80];
    if (v82 <= (unint64_t)&v81->f64[1])
      v82 = (unint64_t)&v81->f64[1];
    v83 = v82 + ~(unint64_t)v81;
    if (v83 < 0x18)
    {
      v84 = *(double **)(a1 + 8);
      v85 = (double *)v79;
LABEL_70:
      v92 = (unint64_t)&v81->f64[v80];
      do
      {
        v93 = *v84++;
        *v85++ = v93 * v93;
      }
      while ((unint64_t)v84 < v92);
      goto LABEL_72;
    }
    v84 = *(double **)(a1 + 8);
    v85 = (double *)v79;
    if ((unint64_t)(v79 - (_QWORD)v81) < 0x20)
      goto LABEL_70;
    v86 = (v83 >> 3) + 1;
    v87 = v86 & 0x3FFFFFFFFFFFFFFCLL;
    v84 = &v81->f64[v87];
    v88 = (float64x2_t *)(v79 + 16);
    v89 = v81 + 1;
    v90 = v86 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v91 = vmulq_f64(*v89, *v89);
      v88[-1] = vmulq_f64(v89[-1], v89[-1]);
      *v88 = v91;
      v88 += 2;
      v89 += 2;
      v90 -= 4;
    }
    while (v90);
    if (v86 != (v86 & 0x3FFFFFFFFFFFFFFCLL))
    {
      v85 = (double *)(v79 + v87 * 8);
      goto LABEL_70;
    }
  }
LABEL_72:
  if ((int)v78 < 1)
  {
    v67 = 0.0;
  }
  else
  {
    v94 = v79 + 8 * v78;
    v95 = (double *)(v79 + 8);
    if (v94 <= v79 + 8)
      v96 = v79 + 8;
    else
      v96 = v79 + 8 * v78;
    v97 = v96 + ~v79;
    v67 = 0.0;
    v98 = (double *)v79;
    if (v97 >= 8)
    {
      v99 = (v97 >> 3) + 1;
      v100 = v99 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        v67 = v67 + *(v95 - 1) + *v95;
        v95 += 2;
        v100 -= 2;
      }
      while (v100);
      if (v99 == (v99 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_84;
      v98 = (double *)(v79 + 8 * (v99 & 0x3FFFFFFFFFFFFFFELL));
    }
    do
    {
      v101 = *v98++;
      v67 = v67 + v101;
    }
    while ((unint64_t)v98 < v94);
  }
LABEL_84:
  MEMORY[0x20BD36480]();
  v16 = v233;
  LODWORD(v66) = v78;
LABEL_85:
  v213 = v17;
  v215 = v10 * v9;
  if ((_DWORD)v10 * (_DWORD)v9)
  {
    v102 = operator new[]();
    v16 = v233;
    LODWORD(v66) = v78;
  }
  else
  {
    v102 = 0;
  }
  if ((int)v9 >= 0)
    v103 = v9;
  else
    v103 = v9 + 1;
  if ((int)v9 >= 1 && (int)v10 >= 1)
  {
    v104 = 0;
    v105 = 0;
    v106 = v68 / (double)(int)v66;
    v107 = sqrt(v67 / (double)(int)v66 - v106 * v106);
    v108 = *(unsigned int *)(a1 + 16);
    do
    {
      if (v105 == v108)
LABEL_191:
        __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
      v109 = (double *)(v102 + 8 * v104);
      v110 = *(unsigned int *)(a1 + 20);
      v111 = 8 * (v110 * v105);
      v112 = v10;
      do
      {
        if (!v110)
          goto LABEL_191;
        *v109++ = (*(double *)(*(_QWORD *)(a1 + 8) + v111) - v106) / v107;
        v111 += 8;
        --v110;
        --v112;
      }
      while (v112);
      ++v105;
      v104 += v10;
    }
    while (v105 != (v9 & ~((int)v9 >> 31)));
  }
  v113 = (v103 >> 1);
  v114 = v230 - v113;
  v231 = (v113 + 1);
  if ((int)v231 < (int)v114)
  {
    v115 = (int)v10 >= 0 ? v10 : (int)v10 + 1;
    v116 = v115 >> 1;
    v117 = (v115 >> 1) + 1;
    v227 = v228 - (v115 >> 1);
    if (v117 < (int)v227)
    {
      v118 = (double)v215;
      v119 = v9 - v113;
      v208 = v117 - v113;
      v207 = v113 + ~v116;
      v120 = v113 + 2;
      v121 = (v113 + 3);
      if ((int)v113 + 2 >= v10)
        v122 = v10;
      else
        v122 = v113 + 2;
      v210 = v115 >> 1;
      v211 = v16 <= v219;
      v123 = v121 & 0xFFFFFFFC;
      a5 = v102 + 16;
      v124 = v113;
      v220 = v9 - v113;
      v221 = v113;
      v206 = v114;
      v209 = (v116 + 1);
      do
      {
        v125 = v113 + v231;
        v126 = v231 - v119;
        if (v213 <= (int)v113 + (int)v231 || v213 <= v126 || v217 <= v125)
          goto LABEL_192;
        v226 = 8 * v16 * v125;
        v225 = 8 * v16 * v126;
        v229 = v231 - v113;
        v224 = v124 + 4;
        v223 = 8 * v219 * v125;
        v222 = 8 * v219 * v126;
        if (v211)
        {
          if (v217 <= (int)v231 - v119)
LABEL_192:
            __assert_rtn("operator()", "Matrix.hpp", 120, "row < m_rows && col < m_cols");
          v127 = v209;
          v129 = v207;
          v128 = v208;
          v130 = v210;
          while (1)
          {
            if (v16 <= (int)v113 + (int)v127)
              goto LABEL_192;
            v131 = v127;
            v132 = v127 - v119;
            if (v16 <= v132)
              goto LABEL_192;
            v133 = 8 * (v113 + v127);
            v134 = 8 * v132;
            v135 = (*(double *)(v40 + v133 + v223)
                  - *(double *)(v40 + v133 + v222)
                  - *(double *)(v40 + v134 + v223)
                  + *(double *)(v40 + v134 + v222))
                 / v118;
            v136 = sqrt((*(double *)(v53 + v133 + v226)- *(double *)(v53 + v133 + v225)- *(double *)(v53 + v134 + v226)+ *(double *)(v53 + v134 + v225))/ v118- v135 * v135);
            v137 = 0.0;
            if (v136 > 0.0 && v229 < v224)
            {
              v214 = v127 - v113;
              if ((int)v127 - (int)v113 < v130 + 4)
                break;
            }
LABEL_139:
            v16 = v233;
            v119 = v220;
            v113 = v221;
            if (v231 >= *(unsigned int *)(a3 + 16))
              goto LABEL_192;
            v161 = *(unsigned int *)(a3 + 20);
            if (v127 >= v161)
              goto LABEL_192;
            *(double *)(*(_QWORD *)(a3 + 8) + 8 * v127++ + 8 * (v161 * v231)) = v137 / v118;
            ++v128;
            --v129;
            v130 = v131;
            if (v127 == v227)
              goto LABEL_142;
          }
          v139 = 0;
          v140 = 0;
          v141 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v135, 0);
          v142 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v136, 0);
          v143 = v229;
          while (1)
          {
            if (v143 >= *(_DWORD *)(a2 + 16))
              goto LABEL_195;
            v144 = *(_DWORD *)(a2 + 20);
            if (v140 == v9)
              goto LABEL_193;
            v145 = v144 <= v128 ? v128 : *(_DWORD *)(a2 + 20);
            if (v129 + v145 <= v122)
              goto LABEL_195;
            if (v10 <= v120)
              goto LABEL_194;
            v146 = 8 * v139;
            v147 = *v22;
            if (v121 >= 4)
            {
              v150 = (float64x2_t *)(a5 + v146);
              v151 = (float64x2_t *)(v147 + 8 * v128 + 8 * v144 * v143 + 16);
              v152 = v121 & 0xFFFFFFFC;
              do
              {
                v153 = vdivq_f64(vmulq_f64(vsubq_f64(v151[-1], v141), v150[-1]), v142);
                v154 = vdivq_f64(vmulq_f64(vsubq_f64(*v151, v141), *v150), v142);
                v137 = v137 + v153.f64[0] + v153.f64[1] + v154.f64[0] + v154.f64[1];
                v151 += 2;
                v150 += 2;
                v152 -= 4;
              }
              while (v152);
              v149 = v123 + v128;
              v148 = v121 & 0xFFFFFFFC;
              if (v123 == v121)
                goto LABEL_123;
            }
            else
            {
              v148 = 0;
              v149 = v128;
            }
            v155 = (double *)(v147 + 8 * v149 + 8 * v144 * v143);
            v156 = v121 - v148;
            v157 = (double *)(v102 + v146 + 8 * v148);
            do
            {
              v158 = *v155++;
              v159 = v158 - v135;
              v160 = *v157++;
              v137 = v137 + v159 * v160 / v136;
              --v156;
            }
            while (v156);
LABEL_123:
            ++v143;
            ++v140;
            v139 += v10;
            if (v140 == v121)
              goto LABEL_139;
          }
        }
        if (v217 <= (int)v231 - v119)
          goto LABEL_192;
        v162 = v209;
        v163 = v207;
        v164 = v208;
        v165 = v210;
        do
        {
          v166 = (v113 + v162);
          if (v16 <= v166)
            goto LABEL_192;
          v167 = v162;
          if (v16 <= (int)v162 - v119 || v219 <= v166 || v219 <= (int)v162 - v119)
            goto LABEL_192;
          v205 = v162;
          v168 = 8 * v166;
          v169 = v53 + 8 * v166;
          v170 = *(double *)(v169 + v226);
          v171 = *(double *)(v169 + v225);
          v172 = v164;
          v173 = 8 * (v162 - v119);
          v174 = v170 - v171 - *(double *)(v53 + v173 + v226) + *(double *)(v53 + v173 + v225);
          v175 = (*(double *)(v40 + v168 + v223)
                - *(double *)(v40 + v168 + v222)
                - *(double *)(v40 + v173 + v223)
                + *(double *)(v40 + v173 + v222))
               / v118;
          v176 = sqrt(v174 / v118 - v175 * v175);
          v177 = 0.0;
          if (v176 > 0.0 && v229 < v224)
          {
            v214 = v162 - v113;
            if ((int)v162 - (int)v113 < v165 + 4)
            {
              v179 = 0;
              v180 = 0;
              v181 = 8 * v164;
              v182 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v175, 0);
              v183 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v176, 0);
              v184 = v229;
              do
              {
                if (v184 >= *(_DWORD *)(a2 + 16))
                  goto LABEL_195;
                v144 = *(_DWORD *)(a2 + 20);
                if (v180 == v9)
                {
LABEL_193:
                  if (v214 >= v144)
LABEL_195:
                    v204 = 126;
                  else
LABEL_194:
                    v204 = 120;
                  __assert_rtn("operator()", "Matrix.hpp", v204, "row < m_rows && col < m_cols");
                }
                if (v144 <= v172)
                  v185 = v172;
                else
                  v185 = *(_DWORD *)(a2 + 20);
                if (v163 + v185 <= v122)
                  goto LABEL_195;
                if (v10 <= v120)
                  goto LABEL_194;
                v186 = 8 * v179;
                v187 = *v22;
                if (v121 >= 4)
                {
                  v190 = (float64x2_t *)(a5 + v186);
                  v191 = (float64x2_t *)(v187 + v181 + 8 * v144 * v184 + 16);
                  v192 = v121 & 0xFFFFFFFC;
                  do
                  {
                    v193 = vdivq_f64(vmulq_f64(vsubq_f64(v191[-1], v182), v190[-1]), v183);
                    v194 = vdivq_f64(vmulq_f64(vsubq_f64(*v191, v182), *v190), v183);
                    v177 = v177 + v193.f64[0] + v193.f64[1] + v194.f64[0] + v194.f64[1];
                    v191 += 2;
                    v190 += 2;
                    v192 -= 4;
                  }
                  while (v192);
                  v189 = v123 + v172;
                  v188 = v121 & 0xFFFFFFFC;
                  if (v123 == v121)
                    goto LABEL_157;
                }
                else
                {
                  v188 = 0;
                  v189 = v172;
                }
                v195 = (double *)(v187 + 8 * v189 + 8 * v144 * v184);
                v196 = v121 - v188;
                v197 = (double *)(v102 + v186 + 8 * v188);
                do
                {
                  v198 = *v195++;
                  v199 = v198 - v175;
                  v200 = *v197++;
                  v177 = v177 + v199 * v200 / v176;
                  --v196;
                }
                while (v196);
LABEL_157:
                ++v184;
                ++v180;
                v179 += v10;
              }
              while (v180 != v121);
            }
          }
          v16 = v233;
          v119 = v220;
          v113 = v221;
          if (v231 >= *(unsigned int *)(a3 + 16))
            goto LABEL_192;
          v201 = *(unsigned int *)(a3 + 20);
          if (v205 >= v201)
            goto LABEL_192;
          *(double *)(*(_QWORD *)(a3 + 8) + 8 * v205 + 8 * (v201 * v231)) = v177 / v118;
          v162 = v205 + 1;
          v164 = v172 + 1;
          --v163;
          v165 = v167;
        }
        while (v205 + 1 != v227);
LABEL_142:
        v124 = v231++;
      }
      while (v231 != v206);
    }
  }
  if (v102 && v215)
    MEMORY[0x20BD36480](v102, 0x1000C8000313F17, v16, v113, a5);
  if (v53 && v218)
    MEMORY[0x20BD36480](v53, 0x1000C8000313F17, v16, v113, a5);
  if (v40 && v212)
    MEMORY[0x20BD36480](v40, 0x1000C8000313F17, v16, v113, a5);
  v202 = !v216;
  if (!v20)
    v202 = 1;
  if ((v202 & 1) == 0)
    MEMORY[0x20BD36480](v20, 0x1000C8000313F17, v16, v113, a5);
  return 0;
}

void sub_20B64E0A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, uint64_t a16, uint64_t a17, int a18, int a19, uint64_t a20,char a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v25;

  if (v23 && a15)
    MEMORY[0x20BD36480](v23, 0x1000C8000313F17);
  if (v22 && a19)
    MEMORY[0x20BD36480](v22, 0x1000C8000313F17);
  v25 = a21 ^ 1;
  if (!v21)
    v25 = 1;
  if ((v25 & 1) == 0)
    MEMORY[0x20BD36480](v21, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

uint64_t Algo::FundMatrix3x3(uint64_t a1, uint64_t a2, double *a3, BOOL *a4, double *a5, double a6)
{
  uint64_t v12;
  float64x2_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double *v20;
  size_t v21;
  uint64_t v22;
  const void *v23;
  unint64_t v24;
  char *v25;
  unint64_t v26;
  double *v27;
  double *v28;
  double *v29;
  double v30;
  double v31;
  double v32;
  void *v33;
  double *v34;
  uint64_t v35;
  const void *v36;
  unint64_t v37;
  char *v38;
  unint64_t v39;
  double *v40;
  double *v41;
  double *v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  double *v48;
  uint64_t v49;
  uint64_t v50;
  float64x2_t *v51;
  float64x2_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  float64x2_t *v57;
  float64x2_t v58;
  void *v59;
  size_t v60;
  void *v61;
  char *v62;
  uint64_t v63;
  const void *v64;
  unint64_t v65;
  unint64_t v66;
  double *v67;
  double *v68;
  double v69;
  double v70;
  double v71;
  void *v72;
  uint64_t v73;
  const void *v74;
  unint64_t v75;
  unint64_t v76;
  double *v77;
  double *v78;
  double *v79;
  double v80;
  double v81;
  double v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  float64x2_t *v87;
  float64x2_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  double *v92;
  uint64_t v93;
  float64x2_t *v94;
  float64x2_t v95;
  void *v96;
  void *v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  double *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  float64x2_t *v109;
  uint64_t v110;
  double *v111;
  int v112;
  double v113;
  double *v114;
  double *v115;
  float64x2_t *v116;
  uint64_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  int v124;
  double v125;
  double v126;
  double v127;
  float64x2_t *v128;
  int v129;
  double v130;
  double *v131;
  double *v132;
  float64x2_t *v133;
  float64x2_t *v134;
  uint64_t v135;
  float64x2_t v136;
  float64x2_t v137;
  int v138;
  double v139;
  double v140;
  double v141;
  int v142;
  double v143;
  double *v144;
  double *v145;
  float64x2_t *v146;
  float64x2_t *v147;
  uint64_t v148;
  float64x2_t v149;
  float64x2_t v150;
  int v151;
  double v152;
  double v153;
  double v154;
  int v155;
  double v156;
  double *v157;
  double *v158;
  float64x2_t *v159;
  float64x2_t *v160;
  uint64_t v161;
  float64x2_t v162;
  float64x2_t v163;
  int v164;
  double v165;
  double v166;
  double v167;
  int v168;
  double v169;
  double *v170;
  double *v171;
  float64x2_t *v172;
  float64x2_t *v173;
  uint64_t v174;
  float64x2_t v175;
  float64x2_t v176;
  int v177;
  double v178;
  double v179;
  double v180;
  int v181;
  double v182;
  double *v183;
  double *v184;
  float64x2_t *v185;
  float64x2_t *v186;
  uint64_t v187;
  float64x2_t v188;
  float64x2_t v189;
  int v190;
  double v191;
  double v192;
  double v193;
  int v194;
  double v195;
  double *v196;
  double *v197;
  float64x2_t *v198;
  float64x2_t *v199;
  uint64_t v200;
  float64x2_t v201;
  float64x2_t v202;
  int v203;
  double v204;
  double v205;
  double v206;
  int v207;
  double v208;
  double *v209;
  double *v210;
  float64x2_t *v211;
  float64x2_t *v212;
  uint64_t v213;
  float64x2_t v214;
  float64x2_t v215;
  int v216;
  double v217;
  double v218;
  double v219;
  int v220;
  double v221;
  double *v222;
  float64x2_t *v223;
  uint64_t v224;
  float64x2_t v225;
  float64x2_t v226;
  int v227;
  double v228;
  double v229;
  double v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  __n128 v257;
  float64x2_t v258;
  float64x2_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  int8x16_t v269;
  int8x16_t v270;
  float64x2_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  float64x2_t v284;
  uint64_t v285;
  uint64_t v286;
  float64x2_t v287;
  __n128 v288;
  float64x2_t v289;
  float64x2_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  unint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  double v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  double v327;
  double v328;
  double v329;
  double v330;
  double v331;
  __int128 v332;
  int8x16_t v333;
  int8x16_t v334;
  double v335;
  double v336;
  double v337;
  double v338;
  double v339;
  double v340;
  double v341;
  double v342;
  double v343;
  double v344;
  double v345;
  double v346;
  double v347;
  double v348;
  double v349;
  double v350;
  double v351;
  double v352;
  double v353;
  double v354;
  double v355;
  double v356;
  double v357;
  double v358;
  double v359;
  double v360;
  double v361;
  double v362;
  double v363;
  double v364;
  double v365;
  double v366;
  double v367;
  double v368;
  double v369;
  double v370;
  double v371;
  double v372;
  double v373;
  double *v375;
  BOOL *v376;
  double *v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t v380;
  uint64_t v381;
  double v382;
  double v383;
  uint64_t v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  double v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  double v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  uint64_t v399;
  double v400[81];
  double v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  float64_t v405;
  uint64_t v406;
  float64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  float64_t v411;
  uint64_t v412;
  float64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  float64_t v419;
  uint64_t v420;
  uint64_t v421;
  float64_t v422;
  float64_t v423;
  float64_t v424;
  unint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  float64_t v429;
  float64_t v430;
  uint64_t v431;
  float64_t v432;
  uint64_t v433;
  float64_t v434;
  float64_t v435;
  uint64_t v436;
  float64_t v437;
  uint64_t v438;
  uint64_t v439;
  float64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  float64_t v444;
  float64_t v445;
  uint64_t v446;
  float64_t v447;
  uint64_t v448;
  uint64_t v449;
  float64_t v450;
  uint64_t v451;
  float64_t v452;
  uint64_t v453;
  uint64_t v454;
  float64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  float64_t v460;
  float64_t v461;
  float64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  unint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  double __src[81];
  __int128 v475;
  __int128 v476;
  __int128 v477;
  __int128 v478;
  double v479;
  __int128 v480;
  __int128 v481;
  __int128 v482;
  __int128 v483;
  double v484;
  uint64_t (**v485)();
  unint64_t v486;
  int v487;
  unsigned int v488;
  BOOL v489;
  uint64_t v490;
  uint64_t (**v491)();
  double *v492;
  int v493;
  unsigned int v494;
  char v495;
  uint64_t v496;
  _OWORD __dst[42];

  v12 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v12)
    v13 = (float64x2_t *)operator new[]();
  else
    v13 = 0;
  v378 = (6 * v12);
  v495 = 0;
  v496 = 8 * (v12 + 2 * v12);
  v492 = &v13->f64[v378];
  v491 = &off_24C421398;
  v494 = v12;
  v493 = 3;
  v14 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v14)
    v15 = operator new[]();
  else
    v15 = 0;
  v375 = a5;
  v487 = 3;
  v488 = v14;
  v489 = (_DWORD)v14 != 0;
  v490 = 24 * v14;
  v486 = v15;
  v485 = &off_24C421398;
  v484 = 0.0;
  v483 = 0u;
  v482 = 0u;
  v481 = 0u;
  v480 = 0u;
  v479 = 0.0;
  v478 = 0u;
  v477 = 0u;
  v476 = 0u;
  v475 = 0u;
  Algo::Normalize2DPts(a1, (uint64_t)&v491, (uint64_t)&v480);
  Algo::Normalize2DPts(a2, (uint64_t)&v485, (uint64_t)&v475);
  v16 = v486;
  v17 = v488;
  v18 = v494;
  if (v494 != v488)
    __assert_rtn("DotMult", "Matrix.hpp", 511, "rhs.Cols() == m_cols && rhs.Rows() == m_rows");
  v376 = a4;
  v377 = a3;
  v19 = (int)v488;
  v20 = v492;
  v21 = 8 * v494;
  if (!v488)
  {
    v23 = 0;
    goto LABEL_16;
  }
  v22 = operator new[]();
  v23 = (const void *)v22;
  if ((int)v17 < 1)
    goto LABEL_16;
  v24 = v16 + 8 * (int)v17;
  v25 = (char *)(v16 + 8);
  if (v24 > v16 + 8)
    v25 = (char *)(v16 + 8 * (int)v17);
  v26 = (unint64_t)&v25[~v16];
  v27 = (double *)v22;
  v28 = v20;
  v29 = (double *)v16;
  if (v26 < 0x28)
    goto LABEL_13;
  v27 = (double *)v22;
  v28 = v20;
  v29 = (double *)v16;
  if (v22 - v16 < 0x20)
    goto LABEL_13;
  v27 = (double *)v22;
  v28 = v20;
  v29 = (double *)v16;
  if ((unint64_t)(v22 - (_QWORD)v20) < 0x20)
    goto LABEL_13;
  v53 = 0;
  v54 = (v26 >> 3) + 1;
  v55 = 8 * (v54 & 0x3FFFFFFFFFFFFFFCLL);
  v28 = &v20[(unint64_t)v55 / 8];
  v56 = v54 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v57 = (float64x2_t *)(v22 + v53 * 8);
    v58 = vmulq_f64(*(float64x2_t *)(v16 + v53 * 8 + 16), *(float64x2_t *)&v20[v53 + 2]);
    *v57 = vmulq_f64(*(float64x2_t *)(v16 + v53 * 8), *(float64x2_t *)&v20[v53]);
    v57[1] = v58;
    v53 += 4;
    v56 -= 4;
  }
  while (v56);
  if (v54 != (v54 & 0x3FFFFFFFFFFFFFFCLL))
  {
    v27 = (double *)(v22 + v55);
    v29 = (double *)(v16 + v55);
    do
    {
LABEL_13:
      v30 = *v29++;
      v31 = v30;
      v32 = *v28++;
      *v27++ = v31 * v32;
    }
    while ((unint64_t)v29 < v24);
  }
LABEL_16:
  v379 = 8 * v12;
  if (8 * v12 >= v21)
  {
    memcpy(v13, v23, 8 * v18);
    v381 = v17;
    if (!(_DWORD)v17)
      goto LABEL_22;
  }
  else
  {
    v33 = (void *)operator new[]();
    memcpy(v33, v23, 8 * v18);
    MEMORY[0x20BD36480](v33, 0x1000C8000313F17);
    v381 = v17;
    if (!(_DWORD)v17)
      goto LABEL_22;
  }
  if (v23)
  {
    MEMORY[0x20BD36480](v23, 0x1000C8000313F17);
    v34 = &v20[v18];
    goto LABEL_23;
  }
LABEL_22:
  v34 = &v20[v18];
  if (!(_DWORD)v19)
  {
    v36 = 0;
    goto LABEL_42;
  }
LABEL_23:
  v35 = operator new[]();
  v36 = (const void *)v35;
  if ((int)v19 < 1)
    goto LABEL_42;
  v37 = v16 + 8 * v19;
  v38 = (char *)(v16 + 8);
  if (v37 > v16 + 8)
    v38 = (char *)(v16 + 8 * v19);
  v39 = (unint64_t)&v38[~v16];
  v40 = (double *)v35;
  v41 = v34;
  v42 = (double *)v16;
  if (v39 < 0x28)
    goto LABEL_27;
  v40 = (double *)v35;
  v41 = v34;
  v42 = (double *)v16;
  if (v35 - v16 < 0x20)
    goto LABEL_27;
  v40 = (double *)v35;
  v41 = v34;
  v42 = (double *)v16;
  if ((unint64_t)(v35 - (_QWORD)v34) < 0x20)
    goto LABEL_27;
  v46 = 0;
  v47 = (v39 >> 3) + 1;
  v48 = &v20[v18];
  v49 = 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
  v41 = &v48[(unint64_t)v49 / 8];
  v50 = v47 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v51 = (float64x2_t *)(v35 + v46 * 8);
    v52 = vmulq_f64(*(float64x2_t *)(v16 + v46 * 8 + 16), *(float64x2_t *)&v48[v46 + 2]);
    *v51 = vmulq_f64(*(float64x2_t *)(v16 + v46 * 8), *(float64x2_t *)&v48[v46]);
    v51[1] = v52;
    v46 += 4;
    v50 -= 4;
  }
  while (v50);
  if (v47 != (v47 & 0x3FFFFFFFFFFFFFFCLL))
  {
    v40 = (double *)(v35 + v49);
    v42 = (double *)(v16 + v49);
    do
    {
LABEL_27:
      v43 = *v42++;
      v44 = v43;
      v45 = *v41++;
      *v40++ = v44 * v45;
    }
    while ((unint64_t)v42 < v37);
  }
LABEL_42:
  if (v379 >= v21)
  {
    memcpy(&v13->f64[v12], v36, 8 * v18);
    if (!(_DWORD)v19)
      goto LABEL_48;
  }
  else
  {
    v59 = (void *)operator new[]();
    memcpy(v59, v36, 8 * v18);
    MEMORY[0x20BD36480](v59, 0x1000C8000313F17);
    if (!(_DWORD)v19)
      goto LABEL_48;
  }
  if (v36)
    MEMORY[0x20BD36480](v36, 0x1000C8000313F17);
LABEL_48:
  v60 = 8 * v381;
  if (v379 >= 8 * v381)
  {
    memcpy(&v13->f64[(2 * v12)], (const void *)v16, 8 * v381);
  }
  else
  {
    v61 = (void *)operator new[]();
    memcpy(v61, (const void *)v16, v60);
    MEMORY[0x20BD36480](v61, 0x1000C8000313F17);
  }
  v62 = (char *)(v16 + 8 * v381);
  if (!(_DWORD)v19)
  {
    v64 = 0;
    goto LABEL_60;
  }
  v63 = operator new[]();
  v64 = (const void *)v63;
  if ((int)v19 < 1)
    goto LABEL_60;
  v65 = v16 + 8 * v19 + v60;
  if (v65 <= v60 + v16 + 8)
    v65 = v60 + v16 + 8;
  v66 = v65 + ~v16 - v60;
  if (v66 < 0x38 || v63 - (v60 + v16) < 0x20)
  {
    v67 = (double *)v63;
    v68 = (double *)(v16 + 8 * v381);
    goto LABEL_57;
  }
  v67 = (double *)v63;
  v68 = (double *)(v16 + 8 * v381);
  if ((unint64_t)(v63 - (_QWORD)v20) < 0x20)
  {
    do
    {
LABEL_57:
      v69 = *v68++;
      v70 = v69;
      v71 = *v20++;
      *v67++ = v70 * v71;
    }
    while (v68 < (double *)&v62[8 * (int)v381]);
    goto LABEL_60;
  }
  v89 = 0;
  v90 = (v66 >> 3) + 1;
  v91 = 8 * (v90 & 0x3FFFFFFFFFFFFFFCLL);
  v92 = &v20[(unint64_t)v91 / 8];
  v93 = v90 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v94 = (float64x2_t *)(v63 + v89 * 8);
    v95 = vmulq_f64(*(float64x2_t *)&v62[v89 * 8 + 16], *(float64x2_t *)&v20[v89 + 2]);
    *v94 = vmulq_f64(*(float64x2_t *)&v62[v89 * 8], *(float64x2_t *)&v20[v89]);
    v94[1] = v95;
    v89 += 4;
    v93 -= 4;
  }
  while (v93);
  if (v90 != (v90 & 0x3FFFFFFFFFFFFFFCLL))
  {
    v67 = (double *)(v63 + v91);
    v68 = (double *)&v62[v91];
    v20 = v92;
    goto LABEL_57;
  }
LABEL_60:
  if (v379 >= v21)
  {
    memcpy(&v13->f64[(3 * v12)], v64, v21);
    if (!(_DWORD)v19)
      goto LABEL_66;
  }
  else
  {
    v72 = (void *)operator new[]();
    memcpy(v72, v64, v21);
    MEMORY[0x20BD36480](v72, 0x1000C8000313F17);
    if (!(_DWORD)v19)
      goto LABEL_66;
  }
  if (v64)
  {
    MEMORY[0x20BD36480](v64, 0x1000C8000313F17);
    goto LABEL_67;
  }
LABEL_66:
  if (!(_DWORD)v19)
  {
    v74 = 0;
    goto LABEL_87;
  }
LABEL_67:
  v73 = operator new[]();
  v74 = (const void *)v73;
  if ((int)v381 < 1)
    goto LABEL_87;
  v75 = v16 + 8 * v19 + v60;
  if (v75 <= v60 + v16 + 8)
    v75 = v60 + v16 + 8;
  v76 = v75 + ~v16 - v60;
  if (v76 < 0x38 || v73 - (v60 + v16) < 0x20 || (unint64_t)(v73 - (_QWORD)v34) < 0x20)
  {
    v77 = (double *)v73;
    v78 = v34;
    v79 = (double *)(v16 + 8 * v381);
    goto LABEL_72;
  }
  v83 = 0;
  v84 = (v76 >> 3) + 1;
  v85 = 8 * (v84 & 0x3FFFFFFFFFFFFFFCLL);
  v78 = &v34[(unint64_t)v85 / 8];
  v86 = v84 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v87 = (float64x2_t *)(v73 + v83 * 8);
    v88 = vmulq_f64(*(float64x2_t *)&v62[v83 * 8 + 16], *(float64x2_t *)&v34[v83 + 2]);
    *v87 = vmulq_f64(*(float64x2_t *)&v62[v83 * 8], *(float64x2_t *)&v34[v83]);
    v87[1] = v88;
    v83 += 4;
    v86 -= 4;
  }
  while (v86);
  if (v84 != (v84 & 0x3FFFFFFFFFFFFFFCLL))
  {
    v77 = (double *)(v73 + v85);
    v79 = (double *)&v62[v85];
    do
    {
LABEL_72:
      v80 = *v79++;
      v81 = v80;
      v82 = *v78++;
      *v77++ = v81 * v82;
    }
    while (v79 < (double *)&v62[8 * v19]);
  }
LABEL_87:
  if (v379 < v21)
  {
    v96 = (void *)operator new[]();
    memcpy(v96, v74, v21);
    MEMORY[0x20BD36480](v96, 0x1000C8000313F17);
    if (!(_DWORD)v381)
      goto LABEL_93;
LABEL_91:
    if (v74)
      MEMORY[0x20BD36480](v74, 0x1000C8000313F17);
    goto LABEL_93;
  }
  memcpy(&v13->f64[(4 * v12)], v74, v21);
  if ((_DWORD)v381)
    goto LABEL_91;
LABEL_93:
  if (v379 >= v60)
  {
    memcpy(&v13->f64[(5 * v12)], v62, v60);
  }
  else
  {
    v97 = (void *)operator new[]();
    memcpy(v97, v62, v60);
    MEMORY[0x20BD36480](v97, 0x1000C8000313F17);
  }
  bzero(__src, 0x288uLL);
  if (!(_DWORD)v12)
    __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
  v98 = 0;
  v99 = 0;
  v100 = (2 * v12);
  v101 = &v13->f64[v100];
  v102 = (3 * v12);
  v103 = (4 * v12);
  v104 = (5 * v12);
  v105 = (7 * v12);
  v106 = (8 * v12);
  v107 = v12 & 0xFFFFFFFC;
  v108 = v107;
  v380 = (uint64_t)&v13->f64[v107 + v100];
  v109 = (float64x2_t *)((char *)v13 + v100 * 8 + 16);
  do
  {
    v110 = 8 * v98;
    v111 = &v13->f64[(v12 * v99)];
    if (v12 < 4)
    {
      v112 = 0;
      v113 = 0.0;
      v114 = (double *)v13;
      v115 = &v13->f64[(v12 * v99)];
      goto LABEL_105;
    }
    v113 = 0.0;
    v116 = v13;
    v117 = v12 & 0xFFFFFFFC;
    do
    {
      v118 = *(float64x2_t *)((char *)v116 + 8 * v98);
      v119 = *(float64x2_t *)((char *)v116 + v110 + 16);
      v120 = *v116;
      v121 = v116[1];
      v116 += 2;
      v122 = vmulq_f64(v118, v120);
      v123 = vmulq_f64(v119, v121);
      v113 = v113 + v122.f64[0] + v122.f64[1] + v123.f64[0] + v123.f64[1];
      v117 -= 4;
    }
    while (v117);
    if (v107 != v12)
    {
      v115 = &v111[v108];
      v114 = &v13->f64[v108];
      v112 = v12 & 0xFFFFFFFC;
LABEL_105:
      v124 = v12 - v112;
      do
      {
        v125 = *v115++;
        v126 = v125;
        v127 = *v114++;
        v113 = v113 + v126 * v127;
        --v124;
      }
      while (v124);
    }
    v128 = (float64x2_t *)((char *)v13 + v110 + 16);
    __src[9 * v99] = v113;
    if (v12 < 4)
    {
      v129 = 0;
      v130 = 0.0;
      v131 = &v13->f64[v379 / 8];
      v132 = &v13->f64[(v12 * v99)];
      goto LABEL_113;
    }
    v130 = 0.0;
    v133 = (float64x2_t *)((char *)v13 + v379 + 16);
    v134 = v128;
    v135 = v12 & 0xFFFFFFFC;
    do
    {
      v136 = vmulq_f64(v134[-1], v133[-1]);
      v137 = vmulq_f64(*v134, *v133);
      v130 = v130 + v136.f64[0] + v136.f64[1] + v137.f64[0] + v137.f64[1];
      v134 += 2;
      v133 += 2;
      v135 -= 4;
    }
    while (v135);
    if (v107 != v12)
    {
      v132 = &v111[v108];
      v131 = &v13->f64[v379 / 8 + v108];
      v129 = v12 & 0xFFFFFFFC;
LABEL_113:
      v138 = v12 - v129;
      do
      {
        v139 = *v132++;
        v140 = v139;
        v141 = *v131++;
        v130 = v130 + v140 * v141;
        --v138;
      }
      while (v138);
    }
    __src[9 * v99 + 1] = v130;
    if (v12 < 4)
    {
      v142 = 0;
      v143 = 0.0;
      v144 = v101;
      v145 = &v13->f64[(v12 * v99)];
      goto LABEL_121;
    }
    v143 = 0.0;
    v146 = v109;
    v147 = v128;
    v148 = v12 & 0xFFFFFFFC;
    do
    {
      v149 = vmulq_f64(v147[-1], v146[-1]);
      v150 = vmulq_f64(*v147, *v146);
      v143 = v143 + v149.f64[0] + v149.f64[1] + v150.f64[0] + v150.f64[1];
      v147 += 2;
      v146 += 2;
      v148 -= 4;
    }
    while (v148);
    if (v107 != v12)
    {
      v145 = &v111[v108];
      v144 = (double *)v380;
      v142 = v12 & 0xFFFFFFFC;
LABEL_121:
      v151 = v12 - v142;
      do
      {
        v152 = *v145++;
        v153 = v152;
        v154 = *v144++;
        v143 = v143 + v153 * v154;
        --v151;
      }
      while (v151);
    }
    __src[9 * v99 + 2] = v143;
    if (v12 < 4)
    {
      v155 = 0;
      v156 = 0.0;
      v157 = &v13->f64[v102];
      v158 = &v13->f64[(v12 * v99)];
      goto LABEL_129;
    }
    v156 = 0.0;
    v159 = (float64x2_t *)((char *)v13 + v102 * 8 + 16);
    v160 = v128;
    v161 = v12 & 0xFFFFFFFC;
    do
    {
      v162 = vmulq_f64(v160[-1], v159[-1]);
      v163 = vmulq_f64(*v160, *v159);
      v156 = v156 + v162.f64[0] + v162.f64[1] + v163.f64[0] + v163.f64[1];
      v160 += 2;
      v159 += 2;
      v161 -= 4;
    }
    while (v161);
    if (v107 != v12)
    {
      v158 = &v111[v108];
      v157 = &v13->f64[v102 + v108];
      v155 = v12 & 0xFFFFFFFC;
LABEL_129:
      v164 = v12 - v155;
      do
      {
        v165 = *v158++;
        v166 = v165;
        v167 = *v157++;
        v156 = v156 + v166 * v167;
        --v164;
      }
      while (v164);
    }
    __src[9 * v99 + 3] = v156;
    if (v12 < 4)
    {
      v168 = 0;
      v169 = 0.0;
      v170 = &v13->f64[v103];
      v171 = &v13->f64[(v12 * v99)];
      goto LABEL_137;
    }
    v169 = 0.0;
    v172 = (float64x2_t *)((char *)v13 + v103 * 8 + 16);
    v173 = v128;
    v174 = v12 & 0xFFFFFFFC;
    do
    {
      v175 = vmulq_f64(v173[-1], v172[-1]);
      v176 = vmulq_f64(*v173, *v172);
      v169 = v169 + v175.f64[0] + v175.f64[1] + v176.f64[0] + v176.f64[1];
      v173 += 2;
      v172 += 2;
      v174 -= 4;
    }
    while (v174);
    if (v107 != v12)
    {
      v171 = &v111[v108];
      v170 = &v13->f64[v103 + v108];
      v168 = v12 & 0xFFFFFFFC;
LABEL_137:
      v177 = v12 - v168;
      do
      {
        v178 = *v171++;
        v179 = v178;
        v180 = *v170++;
        v169 = v169 + v179 * v180;
        --v177;
      }
      while (v177);
    }
    __src[9 * v99 + 4] = v169;
    if (v12 < 4)
    {
      v181 = 0;
      v182 = 0.0;
      v183 = &v13->f64[v104];
      v184 = &v13->f64[(v12 * v99)];
      goto LABEL_145;
    }
    v182 = 0.0;
    v185 = (float64x2_t *)((char *)v13 + v104 * 8 + 16);
    v186 = v128;
    v187 = v12 & 0xFFFFFFFC;
    do
    {
      v188 = vmulq_f64(v186[-1], v185[-1]);
      v189 = vmulq_f64(*v186, *v185);
      v182 = v182 + v188.f64[0] + v188.f64[1] + v189.f64[0] + v189.f64[1];
      v186 += 2;
      v185 += 2;
      v187 -= 4;
    }
    while (v187);
    if (v107 != v12)
    {
      v184 = &v111[v108];
      v183 = &v13->f64[v104 + v108];
      v181 = v12 & 0xFFFFFFFC;
LABEL_145:
      v190 = v12 - v181;
      do
      {
        v191 = *v184++;
        v192 = v191;
        v193 = *v183++;
        v182 = v182 + v192 * v193;
        --v190;
      }
      while (v190);
    }
    __src[9 * v99 + 5] = v182;
    if (v12 < 4)
    {
      v194 = 0;
      v195 = 0.0;
      v196 = &v13->f64[v378];
      v197 = &v13->f64[(v12 * v99)];
      goto LABEL_153;
    }
    v195 = 0.0;
    v198 = (float64x2_t *)((char *)v13 + 8 * v378 + 16);
    v199 = v128;
    v200 = v12 & 0xFFFFFFFC;
    do
    {
      v201 = vmulq_f64(v199[-1], v198[-1]);
      v202 = vmulq_f64(*v199, *v198);
      v195 = v195 + v201.f64[0] + v201.f64[1] + v202.f64[0] + v202.f64[1];
      v199 += 2;
      v198 += 2;
      v200 -= 4;
    }
    while (v200);
    if (v107 != v12)
    {
      v197 = &v111[v108];
      v196 = &v13->f64[v378 + v108];
      v194 = v12 & 0xFFFFFFFC;
LABEL_153:
      v203 = v12 - v194;
      do
      {
        v204 = *v197++;
        v205 = v204;
        v206 = *v196++;
        v195 = v195 + v205 * v206;
        --v203;
      }
      while (v203);
    }
    __src[9 * v99 + 6] = v195;
    if (v12 < 4)
    {
      v207 = 0;
      v208 = 0.0;
      v209 = &v13->f64[v105];
      v210 = &v13->f64[(v12 * v99)];
      goto LABEL_161;
    }
    v208 = 0.0;
    v211 = (float64x2_t *)((char *)v13 + v105 * 8 + 16);
    v212 = v128;
    v213 = v12 & 0xFFFFFFFC;
    do
    {
      v214 = vmulq_f64(v212[-1], v211[-1]);
      v215 = vmulq_f64(*v212, *v211);
      v208 = v208 + v214.f64[0] + v214.f64[1] + v215.f64[0] + v215.f64[1];
      v212 += 2;
      v211 += 2;
      v213 -= 4;
    }
    while (v213);
    if (v107 != v12)
    {
      v210 = &v111[v108];
      v209 = &v13->f64[v105 + v108];
      v207 = v12 & 0xFFFFFFFC;
LABEL_161:
      v216 = v12 - v207;
      do
      {
        v217 = *v210++;
        v218 = v217;
        v219 = *v209++;
        v208 = v208 + v218 * v219;
        --v216;
      }
      while (v216);
    }
    __src[9 * v99 + 7] = v208;
    if (v12 < 4)
    {
      v220 = 0;
      v221 = 0.0;
      v222 = &v13->f64[v106];
      goto LABEL_169;
    }
    v221 = 0.0;
    v223 = (float64x2_t *)((char *)v13 + v106 * 8 + 16);
    v224 = v12 & 0xFFFFFFFC;
    do
    {
      v225 = vmulq_f64(v128[-1], v223[-1]);
      v226 = vmulq_f64(*v128, *v223);
      v221 = v221 + v225.f64[0] + v225.f64[1] + v226.f64[0] + v226.f64[1];
      v128 += 2;
      v223 += 2;
      v224 -= 4;
    }
    while (v224);
    if (v107 != v12)
    {
      v111 = (double *)((char *)v111 + v108 * 8);
      v222 = &v13->f64[v106 + v108];
      v220 = v12 & 0xFFFFFFFC;
LABEL_169:
      v227 = v12 - v220;
      do
      {
        v228 = *v111++;
        v229 = v228;
        v230 = *v222++;
        v221 = v221 + v229 * v230;
        --v227;
      }
      while (v227);
    }
    __src[9 * v99++ + 8] = v221;
    v98 += v12;
  }
  while (v99 != 9);
  bzero(&v401, 0x288uLL);
  bzero(v400, 0x288uLL);
  v399 = 0;
  v397 = 0u;
  v398 = 0u;
  v395 = 0u;
  v396 = 0u;
  memcpy(__dst, __src, 0x288uLL);
  v231 = *((_QWORD *)&__dst[0] + 1);
  v232 = *(_QWORD *)&__dst[1];
  v233 = *((_QWORD *)&__dst[9] + 1);
  *((_QWORD *)&__dst[0] + 1) = *((_QWORD *)&__dst[4] + 1);
  *(_QWORD *)&__dst[1] = *(_QWORD *)&__dst[9];
  *(_QWORD *)&__dst[9] = v232;
  *((_QWORD *)&__dst[9] + 1) = *((_QWORD *)&__dst[5] + 1);
  *((_QWORD *)&__dst[4] + 1) = v231;
  *((_QWORD *)&__dst[5] + 1) = v233;
  v234 = *((_QWORD *)&__dst[13] + 1);
  v235 = *(_QWORD *)&__dst[14];
  v236 = *(_QWORD *)&__dst[2];
  *((_QWORD *)&__dst[13] + 1) = *((_QWORD *)&__dst[1] + 1);
  *(_QWORD *)&__dst[14] = *(_QWORD *)&__dst[6];
  v237 = *((_QWORD *)&__dst[18] + 1);
  *((_QWORD *)&__dst[1] + 1) = v234;
  *(_QWORD *)&__dst[2] = *(_QWORD *)&__dst[18];
  *(_QWORD *)&__dst[18] = v236;
  *((_QWORD *)&__dst[18] + 1) = *((_QWORD *)&__dst[6] + 1);
  *(_QWORD *)&__dst[6] = v235;
  *((_QWORD *)&__dst[6] + 1) = v237;
  v238 = *((_QWORD *)&__dst[10] + 1);
  v239 = *(_QWORD *)&__dst[11];
  v240 = *((_QWORD *)&__dst[19] + 1);
  *((_QWORD *)&__dst[10] + 1) = *((_QWORD *)&__dst[14] + 1);
  *(_QWORD *)&__dst[11] = *(_QWORD *)&__dst[19];
  *(_QWORD *)&__dst[19] = v239;
  *((_QWORD *)&__dst[19] + 1) = *((_QWORD *)&__dst[15] + 1);
  *((_QWORD *)&__dst[14] + 1) = v238;
  *((_QWORD *)&__dst[15] + 1) = v240;
  v241 = *((_QWORD *)&__dst[22] + 1);
  v242 = *(_QWORD *)&__dst[23];
  v243 = *(_QWORD *)&__dst[3];
  *((_QWORD *)&__dst[22] + 1) = *((_QWORD *)&__dst[2] + 1);
  *(_QWORD *)&__dst[23] = *(_QWORD *)&__dst[7];
  v244 = *((_QWORD *)&__dst[23] + 1);
  v245 = *(_QWORD *)&__dst[24];
  v246 = *(_QWORD *)&__dst[12];
  *((_QWORD *)&__dst[23] + 1) = *((_QWORD *)&__dst[11] + 1);
  *(_QWORD *)&__dst[24] = *(_QWORD *)&__dst[16];
  v247 = *((_QWORD *)&__dst[27] + 1);
  *((_QWORD *)&__dst[2] + 1) = v241;
  *(_QWORD *)&__dst[3] = *(_QWORD *)&__dst[27];
  *(_QWORD *)&__dst[27] = v243;
  *((_QWORD *)&__dst[27] + 1) = *((_QWORD *)&__dst[7] + 1);
  *(_QWORD *)&__dst[7] = v242;
  *((_QWORD *)&__dst[7] + 1) = v247;
  v248 = *((_QWORD *)&__dst[28] + 1);
  *((_QWORD *)&__dst[11] + 1) = v244;
  *(_QWORD *)&__dst[12] = *(_QWORD *)&__dst[28];
  *(_QWORD *)&__dst[28] = v246;
  *((_QWORD *)&__dst[28] + 1) = *((_QWORD *)&__dst[16] + 1);
  *(_QWORD *)&__dst[16] = v245;
  *((_QWORD *)&__dst[16] + 1) = v248;
  v249 = *((_QWORD *)&__dst[20] + 1);
  v250 = *(_QWORD *)&__dst[21];
  v251 = *((_QWORD *)&__dst[29] + 1);
  *((_QWORD *)&__dst[20] + 1) = *((_QWORD *)&__dst[24] + 1);
  *(_QWORD *)&__dst[21] = *(_QWORD *)&__dst[29];
  *(_QWORD *)&__dst[29] = v250;
  *((_QWORD *)&__dst[29] + 1) = *((_QWORD *)&__dst[25] + 1);
  *((_QWORD *)&__dst[24] + 1) = v249;
  *((_QWORD *)&__dst[25] + 1) = v251;
  v252 = *((_QWORD *)&__dst[31] + 1);
  v253 = *(_QWORD *)&__dst[32];
  v254.f64[0] = *(float64_t *)&__dst[4];
  v255.f64[0] = *((float64_t *)&__dst[8] + 1);
  *((_QWORD *)&__dst[31] + 1) = *((_QWORD *)&__dst[3] + 1);
  *(_QWORD *)&__dst[32] = *(_QWORD *)&__dst[8];
  v256.f64[0] = *((float64_t *)&__dst[32] + 1);
  v257.n128_u64[0] = *(_QWORD *)&__dst[13];
  *((_QWORD *)&__dst[32] + 1) = *((_QWORD *)&__dst[12] + 1);
  v258.f64[0] = *(float64_t *)&__dst[33];
  *(_QWORD *)&__dst[33] = *(_QWORD *)&__dst[17];
  v259.f64[0] = *((float64_t *)&__dst[33] + 1);
  *((_QWORD *)&__dst[33] + 1) = *((_QWORD *)&__dst[21] + 1);
  v260 = *(_QWORD *)&__dst[34];
  *(_QWORD *)&__dst[34] = *(_QWORD *)&__dst[26];
  v261 = *((_QWORD *)&__dst[34] + 1);
  *((_QWORD *)&__dst[34] + 1) = *((_QWORD *)&__dst[30] + 1);
  v262 = *(_QWORD *)&__dst[36];
  *(_QWORD *)&__dst[36] = *(_QWORD *)&__dst[4];
  *((_QWORD *)&__dst[3] + 1) = v252;
  *(_QWORD *)&__dst[4] = v262;
  v263 = *((_QWORD *)&__dst[36] + 1);
  *((_QWORD *)&__dst[36] + 1) = *((_QWORD *)&__dst[8] + 1);
  *(_QWORD *)&__dst[8] = v253;
  *((_QWORD *)&__dst[8] + 1) = v263;
  v264 = *(_QWORD *)&__dst[37];
  *(_QWORD *)&__dst[37] = *(_QWORD *)&__dst[13];
  *((_QWORD *)&__dst[12] + 1) = *(_QWORD *)&v256.f64[0];
  *(_QWORD *)&__dst[13] = v264;
  v265 = *((_QWORD *)&__dst[37] + 1);
  *((_QWORD *)&__dst[37] + 1) = *((_QWORD *)&__dst[17] + 1);
  *(float64_t *)&__dst[17] = v258.f64[0];
  *((_QWORD *)&__dst[17] + 1) = v265;
  v266 = *(_QWORD *)&__dst[38];
  *(_QWORD *)&__dst[38] = *(_QWORD *)&__dst[22];
  *((_QWORD *)&__dst[21] + 1) = *(_QWORD *)&v259.f64[0];
  *(_QWORD *)&__dst[22] = v266;
  v267 = *((_QWORD *)&__dst[38] + 1);
  *((_QWORD *)&__dst[38] + 1) = *((_QWORD *)&__dst[26] + 1);
  *(_QWORD *)&__dst[26] = v260;
  *((_QWORD *)&__dst[26] + 1) = v267;
  v268 = *(_QWORD *)&__dst[39];
  *(_QWORD *)&__dst[39] = *(_QWORD *)&__dst[31];
  *((_QWORD *)&__dst[30] + 1) = v261;
  *(_QWORD *)&__dst[31] = v268;
  v269.i64[0] = *((_QWORD *)&__dst[39] + 1);
  v270.i64[0] = *((_QWORD *)&__dst[35] + 1);
  *((_QWORD *)&__dst[39] + 1) = *((_QWORD *)&__dst[35] + 1);
  *((_QWORD *)&__dst[35] + 1) = v269.i64[0];
  svd_os(9, (double *)__dst, &v401, (double *)&v395, v400, v269, v270, v256, v254, v258, v255, v257, v259);
  v272 = v402;
  v273 = v403;
  v284.f64[0] = v419;
  v402 = v410;
  v403 = v418;
  v418 = v273;
  v419 = v411;
  v410 = v272;
  v411 = v284.f64[0];
  v274 = v426;
  v275 = v427;
  v284.f64[0] = v405;
  v426 = v404;
  v427 = v412;
  v289.f64[0] = v435;
  v404 = v274;
  v405 = v434;
  v434 = v284.f64[0];
  v435 = v413;
  v412 = v275;
  v413 = v289.f64[0];
  v276 = v420;
  v277 = v421;
  v284.f64[0] = v437;
  v420 = v428;
  v421 = v436;
  v436 = v277;
  v437 = v429;
  v428 = v276;
  v429 = v284.f64[0];
  v278 = v442;
  v279 = v443;
  v284.f64[0] = v407;
  v442 = v406;
  v443 = v414;
  v287.f64[0] = v444;
  v289.f64[0] = v445;
  v290.f64[0] = v423;
  v444 = v422;
  v445 = v430;
  v280 = v451;
  v406 = v278;
  v407 = v450;
  v450 = v284.f64[0];
  v451 = v415;
  v414 = v279;
  v415 = v280;
  v281 = v453;
  v422 = v287.f64[0];
  v423 = v452;
  v452 = v290.f64[0];
  v453 = v431;
  v430 = v289.f64[0];
  v431 = v281;
  v282 = v438;
  v283 = v439;
  v284.f64[0] = v455;
  v438 = v446;
  v439 = v454;
  v454 = v283;
  v455 = v447;
  v446 = v282;
  v447 = v284.f64[0];
  v285 = v458;
  v286 = v459;
  v458 = v408;
  v459 = v416;
  v287.f64[0] = v460;
  v288.n128_u64[0] = v425;
  v460 = v424;
  v289.f64[0] = v461;
  v461 = v432;
  v290.f64[0] = v462;
  v462 = v440;
  v291 = v463;
  v463 = v448;
  v292 = v464;
  v464 = v456;
  v293 = v466;
  v466 = v409;
  v408 = v285;
  v409 = v293;
  v294 = v467;
  v467 = v417;
  v416 = v286;
  v417 = v294;
  v295 = v468;
  v468 = v425;
  v424 = v287.f64[0];
  v425 = v295;
  v296 = v469;
  v469 = v433;
  v432 = v289.f64[0];
  v433 = v296;
  v297 = v470;
  v470 = v441;
  v440 = v290.f64[0];
  v441 = v297;
  v298 = v471;
  v471 = v449;
  v448 = v291;
  v449 = v298;
  v299 = v472;
  v472 = v457;
  v456 = v292;
  v457 = v299;
  v300 = v473;
  v473 = v465;
  v465 = v300;
  if (v376)
  {
    *(_QWORD *)&__dst[4] = v399;
    __dst[3] = v398;
    __dst[2] = v397;
    __dst[1] = v396;
    __dst[0] = v395;
    v301 = *((double *)&v395 + 1) < *(double *)&v395;
    if (*(double *)&v396 < *(double *)((unint64_t)__dst | (8 * v301)))
      LODWORD(v301) = 2;
    v302 = 3;
    if (*((double *)&__dst[1] + 1) >= *((double *)__dst + v301))
      v301 = v301;
    else
      v301 = 3;
    v303 = 4;
    if (*(double *)&__dst[2] < *((double *)__dst + v301))
      v301 = 4;
    v304 = 5;
    if (*((double *)&__dst[2] + 1) >= *((double *)__dst + v301))
      v305 = v301;
    else
      v305 = 5;
    v306 = 6;
    if (*(double *)&__dst[3] >= *((double *)__dst + v305))
      v307 = v305;
    else
      v307 = 6;
    if (*((double *)&__dst[3] + 1) >= *((double *)__dst + v307))
      v308 = v307;
    else
      v308 = 7;
    if (*(double *)&__dst[4] < *((double *)__dst + v308))
      v308 = 8;
    v309 = 8 * v308;
    v310 = *(_QWORD *)((char *)__dst + v309);
    *(_QWORD *)((char *)__dst + v309) = *(_QWORD *)&__dst[0];
    if (*(double *)&__dst[1] >= *((double *)__dst + 1))
      LODWORD(v311) = 1;
    else
      LODWORD(v311) = 2;
    if (*((double *)&__dst[1] + 1) >= *((double *)__dst + v311))
      v311 = v311;
    else
      v311 = 3;
    if (*(double *)&__dst[2] < *((double *)__dst + v311))
      v311 = 4;
    if (*((double *)&__dst[2] + 1) < *((double *)__dst + v311))
      v311 = 5;
    v312 = *((double *)__dst + v311);
    *(_QWORD *)&__dst[0] = v310;
    if (*(double *)&__dst[3] < v312)
      v311 = 6;
    if (*((double *)&__dst[3] + 1) < *((double *)__dst + v311))
      v311 = 7;
    if (*(double *)&__dst[4] < *((double *)__dst + v311))
      v311 = 8;
    v313 = 8 * v311;
    v314 = *(_QWORD *)((char *)__dst + v313);
    *(_QWORD *)((char *)__dst + v313) = *((_QWORD *)&__dst[0] + 1);
    *((_QWORD *)&__dst[0] + 1) = v314;
    v288.n128_u64[0] = *(_QWORD *)&__dst[1];
    if (*((double *)&__dst[1] + 1) >= *(double *)&__dst[1])
      v315 = 2;
    else
      v315 = 3;
    if (*(double *)&__dst[2] < *((double *)__dst + v315))
      v315 = 4;
    if (*((double *)&__dst[2] + 1) < *((double *)__dst + v315))
      v315 = 5;
    if (*(double *)&__dst[3] < *((double *)__dst + v315))
      v315 = 6;
    if (*((double *)&__dst[3] + 1) < *((double *)__dst + v315))
      v315 = 7;
    if (*(double *)&__dst[4] < *((double *)__dst + v315))
      v315 = 8;
    v316 = 8 * v315;
    v317 = *(_QWORD *)((char *)__dst + v316);
    *(_QWORD *)((char *)__dst + v316) = *(_QWORD *)&__dst[1];
    *(_QWORD *)&__dst[1] = v317;
    if (*(double *)&__dst[2] < *((double *)&__dst[1] + 1))
      v302 = 4;
    if (*((double *)&__dst[2] + 1) < *((double *)__dst + v302))
      v302 = 5;
    if (*(double *)&__dst[3] < *((double *)__dst + v302))
      v302 = 6;
    if (*((double *)&__dst[3] + 1) < *((double *)__dst + v302))
      v302 = 7;
    if (*(double *)&__dst[4] < *((double *)__dst + v302))
      v302 = 8;
    v318 = 8 * v302;
    v319 = *(_QWORD *)((char *)__dst + v318);
    *(_QWORD *)((char *)__dst + v318) = *((_QWORD *)&__dst[1] + 1);
    *((_QWORD *)&__dst[1] + 1) = v319;
    if (*((double *)&__dst[2] + 1) < *(double *)&__dst[2])
      v303 = 5;
    if (*(double *)&__dst[3] < *((double *)__dst + v303))
      v303 = 6;
    if (*((double *)&__dst[3] + 1) < *((double *)__dst + v303))
      v303 = 7;
    if (*(double *)&__dst[4] < *((double *)__dst + v303))
      v303 = 8;
    v320 = 8 * v303;
    v321 = *(_QWORD *)((char *)__dst + v320);
    *(_QWORD *)((char *)__dst + v320) = *(_QWORD *)&__dst[2];
    *(_QWORD *)&__dst[2] = v321;
    if (*(double *)&__dst[3] < *((double *)&__dst[2] + 1))
      v304 = 6;
    if (*((double *)&__dst[3] + 1) < *((double *)__dst + v304))
      v304 = 7;
    if (*(double *)&__dst[4] < *((double *)__dst + v304))
      v304 = 8;
    v322 = 8 * v304;
    v323 = *(_QWORD *)((char *)__dst + v322);
    *(_QWORD *)((char *)__dst + v322) = *((_QWORD *)&__dst[2] + 1);
    *((_QWORD *)&__dst[2] + 1) = v323;
    if (*((double *)&__dst[3] + 1) < *(double *)&__dst[3])
      v306 = 7;
    if (*(double *)&__dst[4] < *((double *)__dst + v306))
      v306 = 8;
    v324 = 8 * v306;
    v325 = *(_QWORD *)((char *)__dst + v324);
    *(_QWORD *)((char *)__dst + v324) = *(_QWORD *)&__dst[3];
    *(_QWORD *)&__dst[3] = v325;
    v326 = 56;
    if (*(double *)&__dst[4] < *((double *)&__dst[3] + 1))
      v326 = 64;
    *(_QWORD *)((char *)__dst + v326) = *((_QWORD *)&__dst[3] + 1);
    v327 = *(double *)&__dst[4] / *((double *)__dst + 1);
    if (v375)
      *v375 = v327;
    *v376 = v327 < a6;
  }
  v328 = v400[17];
  *v377 = v400[8];
  v377[1] = v328;
  v329 = v400[35];
  v377[2] = v400[26];
  v377[3] = v329;
  v330 = v400[53];
  v377[4] = v400[44];
  v377[5] = v330;
  v331 = v400[71];
  v377[6] = v400[62];
  v377[7] = v331;
  v377[8] = v400[80];
  v392 = 0u;
  v393 = 0u;
  v390 = 0u;
  v391 = 0u;
  v387 = 0u;
  v388 = 0u;
  v385 = 0u;
  v386 = 0u;
  v332 = *(_OWORD *)v377;
  __dst[1] = *((_OWORD *)v377 + 1);
  __dst[0] = v332;
  v334 = *(int8x16_t *)(v377 + 4);
  __dst[3] = *((_OWORD *)v377 + 3);
  v333.i64[1] = *((_QWORD *)&__dst[3] + 1);
  __dst[2] = v334;
  v333.i64[0] = *((_QWORD *)&__dst[0] + 1);
  v334.i64[0] = *(_QWORD *)&__dst[1];
  v284.f64[0] = *((float64_t *)&__dst[3] + 1);
  v287.f64[0] = *(float64_t *)&__dst[3];
  v289.f64[0] = *((float64_t *)&__dst[1] + 1);
  v271.f64[0] = *((float64_t *)&__dst[2] + 1);
  *((_QWORD *)&__dst[0] + 1) = *((_QWORD *)&__dst[1] + 1);
  *(_QWORD *)&__dst[1] = *(_QWORD *)&__dst[3];
  *(_QWORD *)&__dst[3] = v334.i64[0];
  *((_QWORD *)&__dst[3] + 1) = *((_QWORD *)&__dst[2] + 1);
  v394 = 0.0;
  v389 = 0.0;
  v382 = 0.0;
  v383 = 0.0;
  v384 = 0;
  *(double *)&__dst[4] = v377[8];
  *((_QWORD *)&__dst[1] + 1) = v333.i64[0];
  *((_QWORD *)&__dst[2] + 1) = *(_QWORD *)&v284.f64[0];
  svd_os(3, (double *)__dst, (double *)&v390, &v382, (double *)&v385, v333, v334, v287, v284, v289, v271, v288, v290);
  v335 = *(double *)&v390 * v382 + 0.0 + *((double *)&v391 + 1) * 0.0 + *(double *)&v393 * 0.0;
  v336 = *(double *)&v390 * 0.0 + 0.0;
  v337 = v336 + *((double *)&v391 + 1) * v383 + *(double *)&v393 * 0.0;
  v338 = v336 + *((double *)&v391 + 1) * 0.0 + *(double *)&v393 * 0.0;
  v339 = *((double *)&v390 + 1) * v382 + 0.0 + *(double *)&v392 * 0.0 + *((double *)&v393 + 1) * 0.0;
  v340 = *((double *)&v390 + 1) * 0.0 + 0.0;
  v341 = v340 + *(double *)&v392 * v383 + *((double *)&v393 + 1) * 0.0;
  v342 = v340 + *(double *)&v392 * 0.0 + *((double *)&v393 + 1) * 0.0;
  v343 = *(double *)&v391 * v382 + 0.0 + *((double *)&v392 + 1) * 0.0 + v394 * 0.0;
  v344 = *(double *)&v391 * 0.0 + 0.0;
  v345 = v344 + *((double *)&v392 + 1) * v383 + v394 * 0.0;
  v346 = v344 + *((double *)&v392 + 1) * 0.0 + v394 * 0.0;
  v347 = v335 * *(double *)&v385 + 0.0 + v337 * *((double *)&v385 + 1) + v338 * *(double *)&v386;
  v348 = v335 * *((double *)&v386 + 1) + 0.0 + v337 * *(double *)&v387 + v338 * *((double *)&v387 + 1);
  v349 = v335 * *(double *)&v388 + 0.0 + v337 * *((double *)&v388 + 1) + v338 * v389;
  v350 = v339 * *(double *)&v385 + 0.0 + v341 * *((double *)&v385 + 1) + v342 * *(double *)&v386;
  v351 = v339 * *((double *)&v386 + 1) + 0.0 + v341 * *(double *)&v387 + v342 * *((double *)&v387 + 1);
  v352 = v339 * *(double *)&v388 + 0.0 + v341 * *((double *)&v388 + 1) + v342 * v389;
  v353 = v343 * *(double *)&v385 + 0.0 + v345 * *((double *)&v385 + 1) + v346 * *(double *)&v386;
  v354 = v343 * *((double *)&v386 + 1) + 0.0 + v345 * *(double *)&v387 + v346 * *((double *)&v387 + 1);
  v355 = v343 * *(double *)&v388 + 0.0 + v345 * *((double *)&v388 + 1) + v346 * v389;
  v356 = *(double *)&v475 * v347 + 0.0 + *((double *)&v476 + 1) * v350 + *(double *)&v478 * v353;
  v357 = *(double *)&v475 * v348 + 0.0 + *((double *)&v476 + 1) * v351 + *(double *)&v478 * v354;
  v358 = *(double *)&v475 * v349 + 0.0 + *((double *)&v476 + 1) * v352 + *(double *)&v478 * v355;
  v359 = *((double *)&v475 + 1) * v347 + 0.0 + *(double *)&v477 * v350 + *((double *)&v478 + 1) * v353;
  v360 = *((double *)&v475 + 1) * v348 + 0.0 + *(double *)&v477 * v351 + *((double *)&v478 + 1) * v354;
  v361 = *((double *)&v475 + 1) * v349 + 0.0 + *(double *)&v477 * v352 + *((double *)&v478 + 1) * v355;
  v362 = *(double *)&v476 * v347 + 0.0 + *((double *)&v477 + 1) * v350 + v479 * v353;
  v363 = *(double *)&v476 * v348 + 0.0 + *((double *)&v477 + 1) * v351 + v479 * v354;
  v364 = *(double *)&v476 * v349 + 0.0 + *((double *)&v477 + 1) * v352 + v479 * v355;
  v365 = v356 * *(double *)&v480 + 0.0 + v357 * *((double *)&v481 + 1) + v358 * *(double *)&v483;
  v366 = v356 * *((double *)&v480 + 1) + 0.0 + v357 * *(double *)&v482 + v358 * *((double *)&v483 + 1);
  v367 = v356 * *(double *)&v481 + 0.0 + v357 * *((double *)&v482 + 1) + v358 * v484;
  v368 = v359 * *(double *)&v480 + 0.0 + v360 * *((double *)&v481 + 1) + v361 * *(double *)&v483;
  v369 = v359 * *((double *)&v480 + 1) + 0.0 + v360 * *(double *)&v482 + v361 * *((double *)&v483 + 1);
  v370 = v359 * *(double *)&v481 + 0.0 + v360 * *((double *)&v482 + 1) + v361 * v484;
  v371 = v362 * *(double *)&v480 + 0.0 + v363 * *((double *)&v481 + 1) + v364 * *(double *)&v483;
  v372 = v362 * *((double *)&v480 + 1) + 0.0 + v363 * *(double *)&v482 + v364 * *((double *)&v483 + 1);
  v373 = v362 * *(double *)&v481 + 0.0 + v363 * *((double *)&v482 + 1) + v364 * v484;
  *v377 = v365;
  v377[1] = v366;
  v377[2] = v367;
  v377[3] = v368;
  v377[4] = v369;
  v377[5] = v370;
  v377[6] = v371;
  v377[7] = v372;
  v377[8] = v373;
  if (v486 && v489)
    MEMORY[0x20BD36480]();
  if (v492 && v495)
    MEMORY[0x20BD36480]();
  if (v13)
    MEMORY[0x20BD36480](v13, 0x1000C8000313F17);
  return 0;
}

void sub_20B64FC24(_Unwind_Exception *a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  if (v1 && LOBYTE(STACK[0x9C8]))
    MEMORY[0x20BD36480](v1, 0x1000C8000313F17);
  if (STACK[0x9E0] && LOBYTE(STACK[0x9F0]))
    MEMORY[0x20BD36480]();
  if (v3)
  {
    if (v2)
      MEMORY[0x20BD36480](v3, 0x1000C8000313F17);
  }
  _Unwind_Resume(a1);
}

uint64_t Algo::Normalize2DPts(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float64x2_t *v9;
  uint64_t v10;
  double *v11;
  uint64_t v12;
  double *v13;
  double v14;
  uint64_t v15;
  double *v16;
  double *v17;
  double v18;
  int v19;
  double v20;
  double v21;
  unsigned int v22;
  uint64_t v23;
  double v24;
  double *v25;
  double *v26;
  uint64_t v27;
  double *v28;
  double v29;
  double v30;
  uint64_t v31;
  double *v32;
  int v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  unsigned int v43;
  int v44;
  size_t v45;
  void *v46;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  BOOL v53;
  BOOL v55;
  BOOL v56;
  uint64_t v57;
  float64x2_t *v58;
  uint64_t v59;
  uint64_t v64;
  _OWORD *v65;
  float64x2_t *v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  uint64_t v73;
  double *v74;
  char *v75;
  uint64_t v76;
  double *v77;
  uint64_t v78;
  double *v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t *v82;
  float64x2_t *v83;
  uint64_t v84;
  float64x2_t *v85;
  float64x2_t *v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  _QWORD v93[2];
  int v94;
  int v95;
  char v96;
  uint64_t v97;
  char v98[8];
  void *__src;
  unsigned int v100;
  unsigned __int8 v101;

  v5 = *(const void **)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 20);
  v7 = 8 * (3 * v6);
  v8 = operator new[]();
  v9 = (float64x2_t *)v8;
  v93[1] = v8;
  v94 = 3;
  v95 = v6;
  v96 = 1;
  v97 = 24 * v6;
  if (!(_DWORD)v6)
    __assert_rtn("operator()", "Matrix.hpp", 120, "row < m_rows && col < m_cols");
  v10 = v7 + v8;
  if (v7 + v8 <= (unint64_t)(v8 + 8))
    v10 = v8 + 8;
  memcpy((void *)v8, v5, ((v10 + ~v8) & 0xFFFFFFFFFFFFFFF8) + 8);
  v93[0] = &off_24C421398;
  v11 = &v9->f64[v6];
  v12 = (2 * v6);
  v13 = &v9->f64[v12];
  v14 = 0.0;
  if (v6 < 8)
  {
    LODWORD(v15) = 0;
LABEL_6:
    v16 = &v9->f64[v6];
    v17 = (double *)v9;
    v18 = 0.0;
    goto LABEL_7;
  }
  LODWORD(v15) = 0;
  v48 = (v6 - 1);
  v49 = (unint64_t)&v9->f64[v48 + 1];
  v50 = (unint64_t)&v9->f64[v6 + 1 + v48];
  v51 = (unint64_t)&v9->f64[v12 + 1 + v48];
  v53 = (unint64_t)v9 < v51 && (unint64_t)v13 < v49;
  v55 = (unint64_t)v11 < v51 && (unint64_t)v13 < v50;
  v56 = (unint64_t)v11 >= v49 || (unint64_t)v9 >= v50;
  if (!v56 || v53)
    goto LABEL_6;
  v16 = &v9->f64[v6];
  v17 = (double *)v9;
  v18 = 0.0;
  if (v55)
  {
LABEL_7:
    v19 = v6 - v15;
    do
    {
      *v17 = *v17 / *v13;
      *v16 = *v16 / *v13;
      *v13++ = 1.0;
      v20 = *v17++;
      v14 = v14 + v20;
      v21 = *v16++;
      v18 = v18 + v21;
      --v19;
    }
    while (v19);
    goto LABEL_9;
  }
  v15 = v6 & 0xFFFFFFFC;
  v13 += v15;
  v17 = &v9->f64[v15];
  v57 = 8 * v12;
  v58 = v9 + 1;
  v59 = 8 * v6;
  __asm { FMOV            V1.2D, #1.0 }
  v64 = v15;
  do
  {
    v65 = (_OWORD *)&v58->f64[(unint64_t)v57 / 8];
    v66 = (float64x2_t *)((char *)v58 + v59);
    v67 = *(float64x2_t *)((char *)v58 + v57 - 16);
    v68 = *(float64x2_t *)((char *)v58 + v57);
    v69 = vdivq_f64(v58[-1], v67);
    v70 = vdivq_f64(*v58, v68);
    v58[-1] = v69;
    *v58 = v70;
    v71 = vdivq_f64(*(float64x2_t *)((char *)v58 + v59 - 16), v67);
    v72 = vdivq_f64(*(float64x2_t *)((char *)v58 + 8 * v6), v68);
    v66[-1] = v71;
    *v66 = v72;
    *(v65 - 1) = _Q1;
    *v65 = _Q1;
    v14 = v14 + v69.f64[0] + v69.f64[1] + v70.f64[0] + v70.f64[1];
    v18 = v18 + v71.f64[0] + v71.f64[1] + v72.f64[0] + v72.f64[1];
    v58 += 2;
    v64 -= 4;
  }
  while (v64);
  if (v15 != v6)
  {
    v16 = &v11[v15];
    goto LABEL_7;
  }
LABEL_9:
  v22 = *(_DWORD *)(a2 + 16);
  if (!v22 || (v23 = *(unsigned int *)(a2 + 20), !(_DWORD)v23))
    __assert_rtn("operator()", "Matrix.hpp", 120, "row < m_rows && col < m_cols");
  if (v22 <= 1)
    __assert_rtn("operator()", "Matrix.hpp", 120, "row < m_rows && col < m_cols");
  if (v22 == 2)
    __assert_rtn("operator()", "Matrix.hpp", 120, "row < m_rows && col < m_cols");
  v24 = v14 / (double)v6;
  v25 = *(double **)(a2 + 8);
  v26 = &v25[v23];
  v27 = (2 * v23);
  v28 = &v25[v27];
  v29 = 0.0;
  v30 = v18 / (double)v6;
  if (v6 < 0x1A)
  {
    LODWORD(v31) = 0;
LABEL_15:
    v32 = (double *)v9;
    goto LABEL_16;
  }
  LODWORD(v31) = 0;
  v73 = 8 * v27;
  v74 = &v25[v27];
  v75 = (char *)&v9->f64[v6];
  if ((unint64_t)((char *)v74 - v75) < 0x20)
    goto LABEL_15;
  if ((unint64_t)((char *)v74 - (char *)v9) < 0x20)
    goto LABEL_15;
  v76 = 8 * v23;
  v77 = &v25[v23];
  if ((unint64_t)((char *)v77 - v75) < 0x20
    || (unint64_t)((char *)v77 - (char *)v9) < 0x20
    || (unint64_t)(v75 - (char *)v25) < 0x20
    || (unint64_t)((char *)v25 - (char *)v9) < 0x20
    || v23 < 4
    || v27 < 4)
  {
    goto LABEL_15;
  }
  v32 = (double *)v9;
  if ((unint64_t)((char *)v74 - (char *)v77) < 0x20)
  {
LABEL_16:
    v33 = v6 - v31;
    do
    {
      v34 = *v32++;
      v35 = v34 - v24;
      *v25++ = v34 - v24;
      v36 = *v11++;
      *v26++ = v36 - v30;
      v37 = sqrt((v36 - v30) * (v36 - v30) + v35 * v35);
      *v28++ = v37;
      v29 = v29 + v37;
      --v33;
    }
    while (v33);
    goto LABEL_18;
  }
  v31 = v6 & 0xFFFFFFFC;
  v78 = 8 * v31;
  v28 += v31;
  v79 = &v25[v31];
  v32 = &v9->f64[v31];
  v80 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v24, 0);
  v81 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v30, 0);
  v82 = (float64x2_t *)(v25 + 2);
  v83 = v9 + 1;
  v84 = v31;
  do
  {
    v85 = (float64x2_t *)((char *)v82 + v73);
    v86 = (float64x2_t *)((char *)v82 + v76);
    v87 = vsubq_f64(v83[-1], v80);
    v88 = vsubq_f64(*v83, v80);
    v82[-1] = v87;
    *v82 = v88;
    v89 = vsubq_f64(*(float64x2_t *)((char *)v83 + 8 * v6 - 16), v81);
    v90 = vsubq_f64(*(float64x2_t *)((char *)v83 + 8 * v6), v81);
    v86[-1] = v89;
    *v86 = v90;
    v91 = vsqrtq_f64(vmlaq_f64(vmulq_f64(v89, v89), v87, v87));
    v92 = vsqrtq_f64(vmlaq_f64(vmulq_f64(v90, v90), v88, v88));
    v85[-1] = v91;
    *v85 = v92;
    v29 = v29 + v91.f64[0] + v91.f64[1] + v92.f64[0] + v92.f64[1];
    v82 += 2;
    v83 += 2;
    v84 -= 4;
  }
  while (v84);
  if (v31 != v6)
  {
    v26 = (double *)((char *)v26 + v78);
    v11 = (double *)((char *)v11 + v78);
    v25 = v79;
    goto LABEL_16;
  }
LABEL_18:
  v38 = 1.41421356 / (v29 / (double)v6);
  *(double *)a3 = v38;
  *(_QWORD *)(a3 + 8) = 0;
  *(double *)(a3 + 16) = -(v38 * v24);
  *(_QWORD *)(a3 + 24) = 0;
  *(double *)(a3 + 32) = v38;
  *(double *)(a3 + 40) = -(v38 * v30);
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0x3FF0000000000000;
  MatrixMxN<3u,3u,double>::operator*((uint64_t)v98, (double *)a3, (uint64_t)v93);
  v42 = __src;
  v43 = v100;
  v44 = v101;
  v45 = 24 * v100;
  v46 = *(void **)(a2 + 8);
  if (*(_QWORD *)(a2 + 32) < v45)
  {
    if (v46 && *(_BYTE *)(a2 + 24))
      MEMORY[0x20BD36480](v46, 0x1000C8000313F17, v39, v40, v41);
    v46 = (void *)operator new[]();
    *(_QWORD *)(a2 + 8) = v46;
    *(_QWORD *)(a2 + 32) = v45;
    *(_BYTE *)(a2 + 24) = 1;
  }
  *(_DWORD *)(a2 + 16) = 3;
  *(_DWORD *)(a2 + 20) = v43;
  memcpy(v46, v42, v45);
  if (v42 && v44)
    MEMORY[0x20BD36480](v42, 0x1000C8000313F17);
  MEMORY[0x20BD36480](v9, 0x1000C8000313F17);
  return 0;
}

void sub_20B6502A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  if (v2)
  {
    if (v3)
      MEMORY[0x20BD36480](v2, 0x1000C8000313F17);
  }
  MEMORY[0x20BD36480](v1, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

uint64_t MatrixMxN<3u,3u,double>::operator*(uint64_t result, double *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  unsigned int v7;
  float64x2_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t *v19;
  float64x2_t *v20;
  uint64_t v21;
  float64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  double *v25;
  double *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t *v34;
  float64x2_t *v35;
  uint64_t v36;
  float64x2_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t *v50;
  uint64_t v51;
  float64x2_t *v52;
  uint64_t v53;
  float64x2_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double *v58;

  v3 = result;
  if (*(_DWORD *)(a3 + 16) != 3)
  {
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = &off_24C4213F8;
    *(_BYTE *)(result + 24) = 0;
    return result;
  }
  v6 = *(unsigned int *)(a3 + 20);
  *(_QWORD *)result = &off_24C4213F8;
  if ((_DWORD)v6)
  {
    result = operator new[]();
    v7 = *(_DWORD *)(a3 + 20);
  }
  else
  {
    v7 = 0;
    result = 0;
  }
  *(_QWORD *)(v3 + 8) = result;
  *(_DWORD *)(v3 + 16) = 3;
  *(_DWORD *)(v3 + 20) = v6;
  *(_BYTE *)(v3 + 24) = (_DWORD)v6 != 0;
  *(_QWORD *)(v3 + 32) = 24 * v6;
  if ((int)v7 < 1)
    return result;
  v8 = *(float64x2_t **)(a3 + 8);
  v9 = v7;
  v10 = *(uint64_t *)a2;
  v11 = *((uint64_t *)a2 + 1);
  v12 = *((uint64_t *)a2 + 2);
  v13 = 8 * v7;
  v14 = 16 * v7;
  if (v7 < 0xA)
  {
    v15 = 0;
LABEL_15:
    v23 = v7 - v15;
    v24 = v15;
    v25 = (double *)(result + 8 * v15);
    v26 = &v8->f64[v24];
    do
    {
      *v25++ = *(double *)&v10 * *v26 + 0.0 + *(double *)&v11 * v26[v7] + *(double *)&v12 * v26[2 * v7];
      ++v26;
      --v23;
    }
    while (v23);
    goto LABEL_17;
  }
  v15 = 0;
  if ((unint64_t)(result - v14 - (_QWORD)v8) < 0x20)
    goto LABEL_15;
  if ((unint64_t)(result - v13 - (_QWORD)v8) < 0x20)
    goto LABEL_15;
  if ((unint64_t)(result - (_QWORD)v8) < 0x20)
    goto LABEL_15;
  v15 = v7 & 0x7FFFFFFC;
  v16 = (float64x2_t)vdupq_lane_s64(v10, 0);
  v17 = (float64x2_t)vdupq_lane_s64(v11, 0);
  v18 = (float64x2_t)vdupq_lane_s64(v12, 0);
  v19 = (float64x2_t *)(result + 16);
  v20 = *(float64x2_t **)(a3 + 8);
  v21 = v7 & 0xFFFFFFFC;
  do
  {
    v22 = vmlaq_f64(vmlaq_f64(vmlaq_f64((float64x2_t)0, v20[1], v16), *(float64x2_t *)((char *)v20 + v13 + 16), v17), v20[(unint64_t)v14 / 0x10 + 1], v18);
    v19[-1] = vmlaq_f64(vmlaq_f64(vmlaq_f64((float64x2_t)0, *v20, v16), *(float64x2_t *)((char *)v20 + 8 * v7), v17), v20[v7], v18);
    *v19 = v22;
    v20 += 2;
    v19 += 2;
    v21 -= 4;
  }
  while (v21);
  if (v15 != v7)
    goto LABEL_15;
LABEL_17:
  v27 = *((uint64_t *)a2 + 3);
  v28 = *((uint64_t *)a2 + 4);
  v29 = *((uint64_t *)a2 + 5);
  if (v7 >= 0xA)
  {
    v30 = 0;
    if ((unint64_t)(v13 + result - (_QWORD)&v8[(unint64_t)v14 / 0x10]) >= 0x20
      && (unint64_t)(result - (_QWORD)v8) >= 0x20
      && (unint64_t)(v13 + result - (_QWORD)v8) >= 0x20)
    {
      v30 = v7 & 0x7FFFFFFC;
      v31 = (float64x2_t)vdupq_lane_s64(v27, 0);
      v32 = (float64x2_t)vdupq_lane_s64(v28, 0);
      v33 = (float64x2_t)vdupq_lane_s64(v29, 0);
      v34 = (float64x2_t *)(result + v13 + 16);
      v35 = v8;
      v36 = v7 & 0xFFFFFFFC;
      do
      {
        v37 = vmlaq_f64(vmlaq_f64(vmlaq_f64((float64x2_t)0, v35[1], v31), *(float64x2_t *)((char *)v35 + v13 + 16), v32), v35[(unint64_t)v14 / 0x10 + 1], v33);
        v34[-1] = vmlaq_f64(vmlaq_f64(vmlaq_f64((float64x2_t)0, *v35, v31), *(float64x2_t *)((char *)v35 + 8 * v7), v32), v35[v7], v33);
        *v34 = v37;
        v35 += 2;
        v34 += 2;
        v36 -= 4;
      }
      while (v36);
      if (v30 == v7)
        goto LABEL_27;
    }
  }
  else
  {
    v30 = 0;
  }
  v38 = v7 - v30;
  v39 = v30;
  v40 = result + 8 * v30;
  v41 = &v8->f64[v39];
  do
  {
    *(double *)(v40 + 8 * v7) = *(double *)&v27 * *v41
                                + 0.0
                                + *(double *)&v28 * v41[v7]
                                + *(double *)&v29 * v41[2 * v7];
    v40 += 8;
    ++v41;
    --v38;
  }
  while (v38);
LABEL_27:
  v42 = *((uint64_t *)a2 + 6);
  v43 = *((uint64_t *)a2 + 7);
  v44 = *((uint64_t *)a2 + 8);
  if (v7 < 0xA)
  {
    v45 = 0;
LABEL_35:
    v55 = v9 - v45;
    v56 = v45;
    v57 = result + 8 * v45;
    v58 = &v8->f64[v56];
    do
    {
      *(double *)(v57 + v14) = *(double *)&v42 * *v58
                             + 0.0
                             + *(double *)&v43 * v58[v9]
                             + *(double *)&v44 * v58[(unint64_t)v14 / 8];
      v57 += 8;
      ++v58;
      --v55;
    }
    while (v55);
    return result;
  }
  v45 = 0;
  v46 = v14 + result;
  if ((unint64_t)(result - (_QWORD)v8) < 0x20)
    goto LABEL_35;
  if ((unint64_t)(v46 - ((_QWORD)v8 + v13)) < 0x20)
    goto LABEL_35;
  if ((unint64_t)(v46 - (_QWORD)v8) < 0x20)
    goto LABEL_35;
  v45 = v9 & 0x7FFFFFFC;
  v47 = (float64x2_t)vdupq_lane_s64(v42, 0);
  v48 = (float64x2_t)vdupq_lane_s64(v43, 0);
  v49 = (float64x2_t)vdupq_lane_s64(v44, 0);
  v50 = (float64x2_t *)(v14 + result + 16);
  v51 = v13 + 16;
  v52 = v8;
  v53 = v9 & 0xFFFFFFFC;
  do
  {
    v54 = vmlaq_f64(vmlaq_f64(vmlaq_f64((float64x2_t)0, v52[1], v47), *(float64x2_t *)((char *)v52 + v51), v48), v52[(unint64_t)v14 / 0x10 + 1], v49);
    v50[-1] = vmlaq_f64(vmlaq_f64(vmlaq_f64((float64x2_t)0, *v52, v47), *(float64x2_t *)((char *)v52 + v51 - 16), v48), v52[(unint64_t)v14 / 0x10], v49);
    *v50 = v54;
    v52 += 2;
    v50 += 2;
    v53 -= 4;
  }
  while (v53);
  if (v45 != v9)
    goto LABEL_35;
  return result;
}

uint64_t Algo::RandomSample(unsigned int a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  float v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *(_DWORD *)(a3 + 20);
  if (v3)
  {
    v4 = 0;
    v5 = (float)a1;
    v6 = a2 + 8;
    v7 = *(_QWORD *)(a2 + 2504);
    do
    {
      v8 = (v7 + 1) % 0x270;
      v9 = 4 * v7;
      v10 = *(_DWORD *)(v6 + 4 * ((v7 + 397) % 0x270)) ^ ((*(_DWORD *)(v6 + 4 * v8) & 0x7FFFFFFE | *(_DWORD *)(v6 + 4 * v7) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v6 + 4 * v8) << 31) >> 31) & 0x9908B0DF;
      *(_DWORD *)(v6 + v9) = v10;
      *(_QWORD *)(a2 + 2504) = v8;
      v11 = ((v10 ^ (v10 >> 11)) << 7) & 0x9D2C5680 ^ v10 ^ (v10 >> 11);
      v12 = (float)((float)((float)((float)((v11 << 15) & 0xEFC60000 ^ v11 ^ (((v11 << 15) & 0xEFC60000 ^ v11) >> 18))
                                                * 2.3283e-10)
                                        + 0.0)
                                * v5);
      if (v4)
      {
        v13 = 0;
        v14 = *(_QWORD *)(a3 + 8);
        v15 = v4;
        while (*(_DWORD *)(v14 + 4 * v13) != v12)
        {
          if (v4 == ++v13)
            goto LABEL_3;
        }
      }
      else
      {
        LODWORD(v13) = 0;
      }
      if ((_DWORD)v13 == v4)
      {
        v14 = *(_QWORD *)(a3 + 8);
        v15 = v4;
LABEL_3:
        *(_DWORD *)(v14 + 4 * v15) = v12;
        ++v4;
      }
      v7 = v8;
    }
    while (v4 < v3);
  }
  return 0;
}

uint64_t Algo::FundDist(double *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, double a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t *v44;
  float64x2_t *v45;
  float64x2_t *v46;
  unint64_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  double v64;
  unint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  float64x2_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  double v81;
  double v82;
  double v83;
  uint64_t v84;
  uint64_t v85;
  double *v86;
  double *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  double *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  double *v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  double *v101;
  uint64_t v102;
  float64x2_t *v103;
  uint64_t v104;
  float64x2_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  double *v110;
  uint64_t v111;
  float64x2_t *v112;
  uint64_t v113;
  float64x2_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  double *v121;
  double *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  float64x2_t *v127;
  float64x2_t v128;
  double v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  double *v135;
  double *v136;
  _BOOL4 v137;
  unint64_t v138;
  BOOL v139;
  uint64_t v140;
  uint64_t v141;
  float64x2_t *v142;
  uint64_t v143;
  float64x2_t v144;
  double v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  double *v150;
  double *v151;
  unint64_t v152;
  BOOL v153;
  uint64_t v154;
  float64x2_t *v155;
  float64x2_t *v156;
  uint64_t v157;
  float64x2_t v158;
  double v159;
  double *v160;
  double *v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  float64x2_t *v165;
  float64x2_t *v166;
  uint64_t v167;
  float64x2_t v168;
  double v169;
  unint64_t v170;
  unint64_t v171;
  double *v172;
  double *v173;
  unint64_t v174;
  BOOL v175;
  uint64_t v176;
  uint64_t v177;
  float64x2_t *v178;
  float64x2_t *v179;
  uint64_t v180;
  float64x2_t v181;
  double v182;
  unsigned int v183;
  uint64_t v184;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t *v189;
  float64x2_t *v190;
  uint64_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t *v196;
  float64x2_t *v197;
  uint64_t v198;
  float64x2_t v199;
  uint64_t v200;
  unint64_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  uint64_t v205;
  uint64_t v206;
  float64x2_t *v207;
  char *v208;
  float64x2_t v209;
  uint64_t v210;
  uint64_t v211;
  double v212;
  double v213;
  double v214;
  double v215;
  double v216;
  double v217;
  int v218;
  double v219;
  int v220;
  char v221[8];
  unint64_t v222;
  unsigned int v223;
  unsigned __int8 v224;

  v12 = *(int *)(a2 + 20);
  v13 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v12)
  {
    v14 = operator new[]();
    v15 = v14;
    v16 = *(int *)(a2 + 20);
    if ((_DWORD)v16)
    {
      if (!*(_DWORD *)(a2 + 16))
        __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
      if (*(_DWORD *)(a3 + 16))
      {
        v17 = *(_QWORD *)(a2 + 8);
        v18 = *(int *)(a3 + 20);
        v19 = *(_QWORD *)(a3 + 8);
        v20 = *(uint64_t *)a1;
        v21 = *((uint64_t *)a1 + 1);
        v22 = *((uint64_t *)a1 + 6);
        v23 = *((uint64_t *)a1 + 7);
        v25 = *((uint64_t *)a1 + 2);
        v24 = *((uint64_t *)a1 + 3);
        v26 = *((uint64_t *)a1 + 4);
        v27 = *((uint64_t *)a1 + 5);
        v28 = *((uint64_t *)a1 + 8);
        v29 = *(unsigned int *)(a3 + 20);
        v30 = *(unsigned int *)(a2 + 20);
        if (v30 - 1 >= v29)
          v31 = *(unsigned int *)(a3 + 20);
        else
          v31 = *(unsigned int *)(a2 + 20) - 1;
        if (v31 > 9)
        {
          v32 = 0;
          if ((unint64_t)(v14 - v17) >= 0x10
            && (unint64_t)(v14 - (8 * v16 + v17)) >= 0x10
            && (unint64_t)(v14 - (16 * v16 + v17)) >= 0x10
            && (unint64_t)(v14 - (16 * v18 + v19)) >= 0x10
            && (unint64_t)(v14 - (8 * v18 + v19)) >= 0x10
            && (unint64_t)(v14 - v19) >= 0x10)
          {
            v33 = v31 + 1;
            v34 = (v31 + 1) & 1;
            if (!v34)
              v34 = 2;
            v32 = v33 - v34;
            v35 = (float64x2_t)vdupq_lane_s64(v20, 0);
            v36 = (float64x2_t)vdupq_lane_s64(v24, 0);
            v37 = (float64x2_t)vdupq_lane_s64(v22, 0);
            v38 = (float64x2_t)vdupq_lane_s64(v21, 0);
            v39 = (float64x2_t)vdupq_lane_s64(v26, 0);
            v40 = (float64x2_t)vdupq_lane_s64(v23, 0);
            v41 = (float64x2_t)vdupq_lane_s64(v25, 0);
            v42 = (float64x2_t)vdupq_lane_s64(v27, 0);
            v43 = (float64x2_t)vdupq_lane_s64(v28, 0);
            v44 = *(float64x2_t **)(a2 + 8);
            v45 = *(float64x2_t **)(a3 + 8);
            v46 = (float64x2_t *)v14;
            v47 = v32;
            do
            {
              v48 = v44[v16];
              v49 = *(float64x2_t *)((char *)v44 + 8 * v16);
              v50 = *v44++;
              *v46++ = vmlaq_f64(vmlaq_f64(vmlaq_f64((float64x2_t)0, v50, vmlaq_f64(vmlaq_f64(vmlaq_f64((float64x2_t)0, v35, *v45), v36, *(float64x2_t *)((char *)v45 + 8 * v18)), v37, v45[v18])), v49, vmlaq_f64(vmlaq_f64(vmlaq_f64((float64x2_t)0, v38, *v45), v39, *(float64x2_t *)((char *)v45 + 8 * v18)), v40, v45[v18])),
                         v48,
                         vmlaq_f64(vmlaq_f64(vmlaq_f64((float64x2_t)0, v41, *v45), v42, *(float64x2_t *)((char *)v45 + 8 * v18)), v43, v45[v18]));
              ++v45;
              v47 -= 2;
            }
            while (v47);
          }
        }
        else
        {
          v32 = 0;
        }
        v51 = 0;
        v52 = 8 * v32;
        v53 = 8 * v32 + 16 * v16;
        v54 = v17 + 8 * v32 + 8 * v16;
        v55 = v17 + v53;
        v56 = v17 + 8 * v32;
        v57 = v30 - v32;
        v58 = v29 - v32;
        v59 = v19 + 8 * v32 + 16 * v18;
        v60 = v19 + v52 + 8 * v18;
        v61 = v19 + v52;
        v62 = v15 + v52;
        while (v58 != v51)
        {
          v63 = *(double *)(v61 + 8 * v51);
          v64 = *(double *)(v60 + 8 * v51);
          *(double *)(v62 + 8 * v51) = (v63 * *(double *)&v20
                                      + 0.0
                                      + v64 * *(double *)&v24
                                      + *(double *)(v59 + 8 * v51) * *(double *)&v22)
                                     * *(double *)(v56 + 8 * v51)
                                     + 0.0
                                     + (v63 * *(double *)&v21
                                      + 0.0
                                      + v64 * *(double *)&v26
                                      + *(double *)(v59 + 8 * v51) * *(double *)&v23)
                                     * *(double *)(v54 + 8 * v51)
                                     + (v63 * *(double *)&v25
                                      + 0.0
                                      + v64 * *(double *)&v27
                                      + *(double *)(v59 + 8 * v51) * *(double *)&v28)
                                     * *(double *)(v55 + 8 * v51);
          if (v57 == ++v51)
            goto LABEL_24;
        }
      }
      __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
    }
  }
  else
  {
    v15 = 0;
  }
LABEL_24:
  MatrixMxN<3u,3u,double>::operator*((uint64_t)v221, a1, a2);
  v65 = v222;
  v66 = v223;
  v218 = v224;
  if (*(_DWORD *)(a3 + 16) != 3)
  {
    v67 = 0;
LABEL_42:
    v69 = 0;
    v220 = 1;
    if (!v223)
      goto LABEL_52;
    goto LABEL_43;
  }
  v67 = *(_DWORD *)(a3 + 20);
  if (!v67)
    goto LABEL_42;
  v212 = *a1;
  v215 = a1[1];
  v219 = a1[2];
  v211 = *((uint64_t *)a1 + 3);
  v214 = a1[4];
  v217 = a1[5];
  v210 = *((uint64_t *)a1 + 6);
  v213 = a1[7];
  v216 = a1[8];
  v68 = operator new[]();
  v69 = v68;
  v70 = *(unsigned int *)(a3 + 20);
  if ((int)v70 < 1)
    goto LABEL_39;
  v71 = *(float64x2_t **)(a3 + 8);
  v72 = v70;
  v73 = 8 * v70;
  if (v70 < 0xA)
  {
    v74 = 0;
    *(double *)&v75 = v219;
    *(double *)&v77 = v216;
    *(double *)&v76 = v217;
    *(double *)&v79 = v214;
    *(double *)&v78 = v215;
    v81 = v212;
    *(double *)&v80 = v213;
    v83 = *(double *)&v210;
    v82 = *(double *)&v211;
LABEL_29:
    v84 = v70 - v74;
    v85 = v74;
    v86 = (double *)(v68 + 8 * v74);
    v87 = &v71->f64[v85];
    do
    {
      *v86++ = v81 * *v87 + 0.0 + v82 * v87[v70] + v83 * v87[2 * v70];
      ++v87;
      --v84;
    }
    while (v84);
    goto LABEL_31;
  }
  v74 = 0;
  *(double *)&v75 = v219;
  *(double *)&v77 = v216;
  *(double *)&v76 = v217;
  *(double *)&v79 = v214;
  *(double *)&v78 = v215;
  v81 = v212;
  *(double *)&v80 = v213;
  v83 = *(double *)&v210;
  v82 = *(double *)&v211;
  if ((unint64_t)(v68 - (_QWORD)&v71[v72]) < 0x20)
    goto LABEL_29;
  if ((unint64_t)(v68 - ((_QWORD)v71 + v73)) < 0x20)
    goto LABEL_29;
  if ((unint64_t)(v68 - (_QWORD)v71) < 0x20)
    goto LABEL_29;
  v74 = v70 & 0x7FFFFFFC;
  v186 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v212, 0);
  v187 = (float64x2_t)vdupq_lane_s64(v211, 0);
  v188 = (float64x2_t)vdupq_lane_s64(v210, 0);
  v189 = (float64x2_t *)(v68 + 16);
  v190 = *(float64x2_t **)(a3 + 8);
  v191 = v70 & 0xFFFFFFFC;
  do
  {
    v192 = vmlaq_f64(vmlaq_f64(vmlaq_f64((float64x2_t)0, v190[1], v186), *(float64x2_t *)((char *)v190 + v73 + 16), v187), v190[v72 + 1], v188);
    v189[-1] = vmlaq_f64(vmlaq_f64(vmlaq_f64((float64x2_t)0, *v190, v186), *(float64x2_t *)((char *)v190 + 8 * v70), v187), v190[v70], v188);
    *v189 = v192;
    v190 += 2;
    v189 += 2;
    v191 -= 4;
  }
  while (v191);
  if (v74 != v70)
    goto LABEL_29;
LABEL_31:
  if (v70 < 0xA)
  {
    v88 = 0;
LABEL_33:
    v89 = v70 - v88;
    v90 = v88;
    v91 = v68 + 8 * v88;
    v92 = &v71->f64[v90];
    do
    {
      *(double *)(v91 + 8 * v70) = *(double *)&v78 * *v92
                                 + 0.0
                                 + *(double *)&v79 * v92[v70]
                                 + *(double *)&v80 * v92[2 * v70];
      v91 += 8;
      ++v92;
      --v89;
    }
    while (v89);
    goto LABEL_35;
  }
  v88 = 0;
  if ((unint64_t)(v73 + v68 - (_QWORD)&v71[v72]) < 0x20)
    goto LABEL_33;
  if ((unint64_t)(v68 - (_QWORD)v71) < 0x20)
    goto LABEL_33;
  if ((unint64_t)(v73 + v68 - (_QWORD)v71) < 0x20)
    goto LABEL_33;
  v88 = v70 & 0x7FFFFFFC;
  v193 = (float64x2_t)vdupq_lane_s64(v78, 0);
  v194 = (float64x2_t)vdupq_lane_s64(v79, 0);
  v195 = (float64x2_t)vdupq_lane_s64(v80, 0);
  v196 = (float64x2_t *)(v68 + v73 + 16);
  v197 = v71;
  v198 = v70 & 0xFFFFFFFC;
  do
  {
    v199 = vmlaq_f64(vmlaq_f64(vmlaq_f64((float64x2_t)0, v197[1], v193), *(float64x2_t *)((char *)v197 + v73 + 16), v194), v197[v72 + 1], v195);
    v196[-1] = vmlaq_f64(vmlaq_f64(vmlaq_f64((float64x2_t)0, *v197, v193), *(float64x2_t *)((char *)v197 + 8 * v70), v194), v197[v70], v195);
    *v196 = v199;
    v197 += 2;
    v196 += 2;
    v198 -= 4;
  }
  while (v198);
  if (v88 != v70)
    goto LABEL_33;
LABEL_35:
  if (v70 < 0xA)
  {
    v93 = 0;
LABEL_37:
    v94 = v70 - v93;
    v95 = v93;
    v96 = v68 + 8 * v93;
    v97 = &v71->f64[v95];
    do
    {
      *(double *)(v96 + 16 * v70) = *(double *)&v75 * *v97
                                  + 0.0
                                  + *(double *)&v76 * v97[v70]
                                  + *(double *)&v77 * v97[2 * v70];
      v96 += 8;
      ++v97;
      --v94;
    }
    while (v94);
    goto LABEL_39;
  }
  v93 = 0;
  v200 = v72 * 16 + v68;
  if ((unint64_t)(v68 - (_QWORD)v71) < 0x20)
    goto LABEL_37;
  if ((unint64_t)(v200 - ((_QWORD)v71 + v73)) < 0x20)
    goto LABEL_37;
  if ((unint64_t)(v200 - (_QWORD)v71) < 0x20)
    goto LABEL_37;
  v201 = 0;
  v93 = v70 & 0xFFFFFFFC;
  v202 = (float64x2_t)vdupq_lane_s64(v75, 0);
  v203 = (float64x2_t)vdupq_lane_s64(v76, 0);
  v204 = (float64x2_t)vdupq_lane_s64(v77, 0);
  v205 = v73 & 0x7FFFFFFE0;
  v206 = v68 + v72 * 16;
  v207 = &v71[v72];
  v208 = (char *)v71 + v73;
  do
  {
    v209 = vmlaq_f64(vmlaq_f64(vmlaq_f64((float64x2_t)0, v71[v201 / 0x10 + 1], v202), *(float64x2_t *)&v208[v201 + 16], v203), v207[v201 / 0x10 + 1], v204);
    *(float64x2_t *)(v206 + v201) = vmlaq_f64(vmlaq_f64(vmlaq_f64((float64x2_t)0, v71[v201 / 0x10], v202), *(float64x2_t *)&v208[v201], v203), v207[v201 / 0x10], v204);
    *(float64x2_t *)(v206 + v201 + 16) = v209;
    v201 += 32;
  }
  while (v205 != v201);
  if (v93 != v70)
    goto LABEL_37;
LABEL_39:
  v220 = 0;
  if (!(_DWORD)v66)
    goto LABEL_52;
LABEL_43:
  v98 = (3 * v66);
  v99 = v65 + 8 * v98;
  if (v99 <= v65 + 8)
    v99 = v65 + 8;
  v100 = v99 + ~v65;
  v101 = (double *)v65;
  if (v100 < 0x18)
    goto LABEL_50;
  v102 = (v100 >> 3) + 1;
  v103 = (float64x2_t *)(v65 + 16);
  v104 = v102 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v105 = vmulq_f64(*v103, *v103);
    v103[-1] = vmulq_f64(v103[-1], v103[-1]);
    *v103 = v105;
    v103 += 2;
    v104 -= 4;
  }
  while (v104);
  if (v102 != (v102 & 0x3FFFFFFFFFFFFFFCLL))
  {
    v101 = (double *)(v65 + 8 * (v102 & 0x3FFFFFFFFFFFFFFCLL));
LABEL_50:
    v106 = v65 + 8 * v98;
    do
    {
      *v101 = *v101 * *v101;
      ++v101;
    }
    while ((unint64_t)v101 < v106);
  }
LABEL_52:
  if (!v67)
    goto LABEL_62;
  v107 = 3 * v67;
  v108 = v69 + 8 * v107;
  if (v108 <= v69 + 8)
    v108 = v69 + 8;
  v109 = v108 + ~v69;
  v110 = (double *)v69;
  if (v109 < 0x18)
    goto LABEL_60;
  v111 = (v109 >> 3) + 1;
  v112 = (float64x2_t *)(v69 + 16);
  v113 = v111 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v114 = vmulq_f64(*v112, *v112);
    v112[-1] = vmulq_f64(v112[-1], v112[-1]);
    *v112 = v114;
    v112 += 2;
    v113 -= 4;
  }
  while (v113);
  if (v111 != (v111 & 0x3FFFFFFFFFFFFFFCLL))
  {
    v110 = (double *)(v69 + 8 * (v111 & 0x3FFFFFFFFFFFFFFCLL));
LABEL_60:
    v115 = v69 + 8 * v107;
    do
    {
      *v110 = *v110 * *v110;
      ++v110;
    }
    while ((unint64_t)v110 < v115);
  }
LABEL_62:
  if ((_DWORD)v13)
  {
    v116 = operator new[]();
    v117 = v116;
    if ((int)v13 < 1)
      goto LABEL_72;
    v118 = v15 + 8 * v12;
    v119 = v15 + 8;
    if (v118 > v15 + 8)
      v119 = v15 + 8 * v12;
    v120 = v119 + ~v15;
    v121 = (double *)v116;
    v122 = (double *)v15;
    if (v120 >= 0x18)
    {
      v123 = 0;
      v124 = (v120 >> 3) + 1;
      v125 = 8 * (v124 & 0x3FFFFFFFFFFFFFFCLL);
      v121 = (double *)(v116 + v125);
      v126 = v124 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v127 = (float64x2_t *)(v116 + v123);
        v128 = vmulq_f64(*(float64x2_t *)(v15 + v123 + 16), *(float64x2_t *)(v15 + v123 + 16));
        *v127 = vmulq_f64(*(float64x2_t *)(v15 + v123), *(float64x2_t *)(v15 + v123));
        v127[1] = v128;
        v123 += 32;
        v126 -= 4;
      }
      while (v126);
      if (v124 == (v124 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_72:
        if ((_DWORD)v66)
          goto LABEL_73;
LABEL_78:
        if (!v67)
        {
          if (!(_DWORD)v12)
          {
            v137 = v69 == 0;
            *a5 = 0;
            goto LABEL_133;
          }
LABEL_168:
          __assert_rtn("doDimensionsMatchTo", "Matrix.hpp", 1043, "0");
        }
LABEL_167:
        __assert_rtn("doDimensionsMatchTo", "Matrix.hpp", 1043, "0");
      }
      v122 = (double *)(v15 + v125);
    }
    do
    {
      v129 = *v122++;
      *v121++ = v129 * v129;
    }
    while ((unint64_t)v122 < v118);
    goto LABEL_72;
  }
  v117 = 0;
  if (!(_DWORD)v66)
    goto LABEL_78;
LABEL_73:
  v130 = v65 + 8 * v66;
  v131 = 8 * v66;
  v132 = v130;
  v133 = v65 + 8;
  if (v130 <= v65 + 8)
    v132 = v65 + 8;
  v134 = v132 + ~v65;
  if (v134 < 0x98)
  {
    v135 = (double *)(v65 + 8 * v66);
    v136 = (double *)v65;
    goto LABEL_90;
  }
  v138 = (v134 & 0xFFFFFFFFFFFFFFF8) + v65 + 8;
  v139 = v65 >= v138 + v131 || v130 >= v138;
  v135 = (double *)(v65 + 8 * v66);
  v136 = (double *)v65;
  if (!v139)
    goto LABEL_90;
  v140 = (v134 >> 3) + 1;
  v141 = 8 * (v140 & 0x3FFFFFFFFFFFFFFCLL);
  v135 = (double *)(v130 + v141);
  v142 = (float64x2_t *)v65;
  v143 = v140 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v144 = vaddq_f64(v142[1], *(float64x2_t *)((char *)v142 + v131 + 16));
    *v142 = vaddq_f64(*v142, *(float64x2_t *)((char *)v142 + 8 * v66));
    v142[1] = v144;
    v142 += 2;
    v143 -= 4;
  }
  while (v143);
  if (v140 != (v140 & 0x3FFFFFFFFFFFFFFCLL))
  {
    v136 = (double *)(v65 + v141);
    do
    {
LABEL_90:
      v145 = *v135++;
      *v136 = *v136 + v145;
      ++v136;
    }
    while ((unint64_t)v136 < v130);
  }
  if (v67 != (_DWORD)v66)
    goto LABEL_167;
  v146 = 8 * v67;
  v147 = v65 + v146;
  if (v65 + v146 > v133)
    v133 = v65 + v146;
  v148 = v133 + ~v65;
  v149 = (v148 >> 3) + 1;
  v150 = (double *)v69;
  v151 = (double *)v65;
  if (v148 < 0x88)
    goto LABEL_104;
  v152 = (v148 & 0xFFFFFFFFFFFFFFF8) + 8;
  v153 = v65 >= v69 + v152 || v69 >= v65 + v152;
  v150 = (double *)v69;
  v151 = (double *)v65;
  if (!v153)
    goto LABEL_104;
  v154 = 8 * (v149 & 0x3FFFFFFFFFFFFFFCLL);
  v150 = (double *)(v69 + v154);
  v155 = (float64x2_t *)(v65 + 16);
  v156 = (float64x2_t *)(v69 + 16);
  v157 = v149 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v158 = vaddq_f64(*v155, *v156);
    v155[-1] = vaddq_f64(v155[-1], v156[-1]);
    *v155 = v158;
    v155 += 2;
    v156 += 2;
    v157 -= 4;
  }
  while (v157);
  if (v149 != (v149 & 0x3FFFFFFFFFFFFFFCLL))
  {
    v151 = (double *)(v65 + v154);
    do
    {
LABEL_104:
      v159 = *v150++;
      *v151 = *v151 + v159;
      ++v151;
    }
    while ((unint64_t)v151 < v147);
  }
  v160 = (double *)(v69 + 8 * v67);
  if (v148 < 0x98)
  {
    v161 = (double *)v65;
    goto LABEL_113;
  }
  v162 = v148 & 0xFFFFFFFFFFFFFFF8;
  if (v65 < v162 + v146 + v69 + 8)
  {
    v163 = v162 + v65 + 8;
    v161 = (double *)v65;
    if ((unint64_t)v160 < v163)
      goto LABEL_113;
  }
  v164 = 8 * (v149 & 0x3FFFFFFFFFFFFFFCLL);
  v160 = (double *)((char *)v160 + v164);
  v165 = (float64x2_t *)(v65 + 16);
  v166 = (float64x2_t *)(v146 + v69 + 16);
  v167 = v149 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v168 = vaddq_f64(*v165, *v166);
    v165[-1] = vaddq_f64(v165[-1], v166[-1]);
    *v165 = v168;
    v165 += 2;
    v166 += 2;
    v167 -= 4;
  }
  while (v167);
  if (v149 != (v149 & 0x3FFFFFFFFFFFFFFCLL))
  {
    v161 = (double *)(v65 + v164);
    do
    {
LABEL_113:
      v169 = *v160++;
      *v161 = *v161 + v169;
      ++v161;
    }
    while ((unint64_t)v161 < v147);
  }
  if ((_DWORD)v66 != (_DWORD)v13)
    goto LABEL_168;
  v170 = v131 + v117;
  if (v170 <= v117 + 8)
    v170 = v117 + 8;
  v171 = v170 + ~v117;
  v172 = (double *)v65;
  v173 = (double *)v117;
  if (v171 < 0x78)
    goto LABEL_127;
  v174 = (v171 & 0xFFFFFFFFFFFFFFF8) + 8;
  v175 = v117 >= v65 + v174 || v65 >= v117 + v174;
  v172 = (double *)v65;
  v173 = (double *)v117;
  if (!v175)
    goto LABEL_127;
  v176 = (v171 >> 3) + 1;
  v177 = 8 * (v176 & 0x3FFFFFFFFFFFFFFCLL);
  v172 = (double *)(v65 + v177);
  v178 = (float64x2_t *)(v117 + 16);
  v179 = (float64x2_t *)(v65 + 16);
  v180 = v176 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v181 = vdivq_f64(*v178, *v179);
    v178[-1] = vdivq_f64(v178[-1], v179[-1]);
    *v178 = v181;
    v178 += 2;
    v179 += 2;
    v180 -= 4;
  }
  while (v180);
  if (v176 != (v176 & 0x3FFFFFFFFFFFFFFCLL))
  {
    v173 = (double *)(v117 + v177);
    do
    {
LABEL_127:
      v182 = *v172++;
      *v173 = *v173 / v182;
      ++v173;
    }
    while ((unint64_t)v173 < v117 + 8 * v66);
  }
  v137 = v69 == 0;
  *a5 = 0;
  if ((_DWORD)v12)
  {
    v183 = 0;
    v184 = 0;
    do
    {
      if (fabs(*(double *)(v117 + 8 * v184)) < a6)
      {
        *(_DWORD *)(*(_QWORD *)(a4 + 8) + 4 * v183) = v184;
        v183 = *a5 + 1;
        *a5 = v183;
      }
      ++v184;
    }
    while (v13 != v184);
    MEMORY[0x20BD36480](v117, 0x1000C8000313F17);
    if (!(v220 & 1 | (v69 == 0)))
      goto LABEL_134;
    goto LABEL_135;
  }
LABEL_133:
  if (((v220 | v137) & 1) == 0)
LABEL_134:
    MEMORY[0x20BD36480](v69, 0x1000C8000313F17);
LABEL_135:
  if (v65 && v218)
    MEMORY[0x20BD36480](v65, 0x1000C8000313F17);
  if (v15 && (_DWORD)v13)
    MEMORY[0x20BD36480](v15, 0x1000C8000313F17);
  return 0;
}

void sub_20B6514B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,int a27,int a28)
{
  uint64_t v28;
  uint64_t v29;

  if (v29 && a27)
    MEMORY[0x20BD36480](v29, 0x1000C8000313F17);
  if (a26)
  {
    if (v28)
      MEMORY[0x20BD36480](v28, 0x1000C8000313F17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Algo::Ransac(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int *a8, double a9)
{
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  _QWORD v22[3];
  char v23;
  uint64_t v24;

  v17 = (_BYTE *)operator new[]();
  v22[2] = 0x100000001;
  v18 = (_BYTE *)operator new[]();
  v24 = 1;
  *v18 = *v17;
  v23 = 1;
  v22[0] = &off_24C421318;
  v22[1] = v18;
  v19 = Algo::Ransac(a1, a2, a3, a4, a5, a6, 0, (uint64_t)v22, a9, 0.0, a7, a8);
  MEMORY[0x20BD36480](v18, 0x1000C8077774924);
  MEMORY[0x20BD36480](v17, 0x1000C8077774924);
  return v19;
}

void sub_20B6516B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x20BD36480](v2, 0x1000C8077774924);
  MEMORY[0x20BD36480](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

uint64_t Algo::Ransac(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, int a7, uint64_t a8, double a9, double a10, uint64_t a11, unsigned int *a12)
{
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t i;
  int v19;
  uint64_t v20;
  uint64_t j;
  int v22;
  unsigned int v23;
  float v24;
  double v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  _QWORD *v52;
  unsigned int *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  _QWORD *v57;
  unsigned int *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  _QWORD *v71;
  unsigned int *v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  _QWORD *v76;
  unsigned int *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  void *v86;
  uint64_t v87;
  long double v88;
  double v90;
  char v91;
  unsigned int v93;
  uint64_t v95;
  uint64_t v96;
  uint64_t v100;
  int v102;
  unsigned int __src;
  void *__srca;
  uint64_t v105;
  _QWORD v106[2];
  int v107;
  unsigned int v108;
  char v109;
  uint64_t v110;
  uint64_t (**v111)();
  uint64_t v112;
  uint64_t v113;
  BOOL v114;
  uint64_t v115;
  _OWORD v116[4];
  uint64_t v117;
  BOOL v118;
  uint64_t v119;
  void (**v120)(CRandomGenerator *__hidden);
  _DWORD v121[624];
  unint64_t v122;

  v15 = *(_DWORD *)(a1 + 20);
  v120 = &off_24C4213B8;
  v16 = 5489;
  v17 = 1;
  for (i = 3; i != 626; ++i)
  {
    v19 = 1812433253 * (v16 ^ (v16 >> 30));
    v16 = v19 + v17;
    v121[i - 2] = i + v19 - 2;
    ++v17;
  }
  v121[0] = a6;
  v20 = 1;
  for (j = 3; j != 626; ++j)
  {
    v22 = 1812433253 * (a6 ^ (a6 >> 30));
    a6 = v22 + v20;
    v121[j - 2] = j + v22 - 2;
    ++v20;
  }
  v23 = 0;
  v91 = 0;
  v122 = 0;
  *a12 = 0;
  v119 = 0;
  v118 = 0;
  v105 = 4 * a3;
  v24 = (float)v15;
  v95 = 2 * a3;
  v100 = 24 * a3;
  v90 = (double)v15;
  v25 = 1.0;
  v96 = a3;
  do
  {
    if (v25 <= (double)v23)
      return (v91 & 1u) - 1;
    v93 = v23;
    v117 = 0;
    __src = 1;
    memset(v116, 0, sizeof(v116));
    do
    {
      while (!a3)
      {
        if (!a7)
        {
          v42 = 0;
          v102 = 0;
          v27 = 0;
          v43 = 0;
          v113 = 3;
          v114 = 0;
          v115 = v100;
          v111 = &off_24C421398;
          v112 = 0;
          v38 = v96;
          goto LABEL_34;
        }
        if (++__src > a4)
          goto LABEL_71;
      }
      v26 = operator new[]();
      v27 = (unsigned int *)v26;
      v28 = 0;
      v29 = v122;
      do
      {
        v30 = v29;
        v31 = v29 + 397;
        v29 = (v29 + 1) % 0x270;
        v32 = v121[v31 % 0x270] ^ ((v121[v29] & 0x7FFFFFFE | v121[v30] & 0x80000000) >> 1) ^ ((int)(v121[v29] << 31) >> 31) & 0x9908B0DF;
        v121[v30] = v32;
        v33 = ((v32 ^ (v32 >> 11)) << 7) & 0x9D2C5680 ^ v32 ^ (v32 >> 11);
        v34 = (float)((float)((float)((float)((v33 << 15) & 0xEFC60000 ^ v33 ^ (((v33 << 15) & 0xEFC60000 ^ v33) >> 18))
                                                  * 2.3283e-10)
                                          + 0.0)
                                  * v24);
        if (v28)
        {
          v35 = 0;
          v36 = v28;
          while (*(_DWORD *)(v26 + 4 * v35) != v34)
          {
            if (v28 == ++v35)
              goto LABEL_12;
          }
        }
        else
        {
          LODWORD(v35) = 0;
        }
        if ((_DWORD)v35 == v28)
        {
          v36 = v28;
LABEL_12:
          *(_DWORD *)(v26 + 4 * v36) = v34;
          ++v28;
        }
      }
      while (v28 < a3);
      v122 = v29;
      if ((a7 & 1) != 0)
      {
        v37 = 0;
        v38 = v96;
        while (1)
        {
          v39 = *(unsigned int *)(v26 + v37);
          if (*(_DWORD *)(a8 + 20) * *(_DWORD *)(a8 + 16) <= v39)
            __assert_rtn("operator()", "Matrix.hpp", 132, "index < m_rows * m_cols");
          if (*(_BYTE *)(*(_QWORD *)(a8 + 8) + v39))
            break;
          v37 += 4;
          if (v105 == v37)
          {
            v102 = 1;
            v40 = 1;
            goto LABEL_68;
          }
        }
      }
      else
      {
        v38 = v96;
      }
      v41 = operator new[]();
      LODWORD(v113) = 3;
      HIDWORD(v113) = a3;
      v102 = 1;
      v114 = 1;
      v115 = v100;
      v111 = &off_24C421398;
      v112 = v41;
      v42 = (_QWORD *)v41;
      v43 = operator new[]();
LABEL_34:
      v107 = 3;
      v108 = a3;
      v109 = v102;
      v110 = v100;
      v106[0] = &off_24C421398;
      v106[1] = v43;
      if (a3)
      {
        v44 = *(_DWORD *)(a1 + 16);
        if (v44)
        {
          v45 = *(unsigned int *)(a1 + 20);
          v46 = *(_QWORD *)(a1 + 8);
          v47 = v27;
          v48 = v42;
          v49 = v38;
          do
          {
            v51 = *v47++;
            v50 = v51;
            if (v51 >= v45)
              goto LABEL_87;
            *v48++ = *(_QWORD *)(v46 + 8 * v50);
            --v49;
          }
          while (v49);
          if (v44 >= 2)
          {
            v52 = &v42[v38];
            v53 = v27;
            v54 = v38;
            do
            {
              v56 = *v53++;
              v55 = v56;
              if (v56 >= v45)
                goto LABEL_87;
              *v52++ = *(_QWORD *)(v46 + 8 * v45 + 8 * v55);
              --v54;
            }
            while (v54);
            if (v44 >= 3)
            {
              v57 = &v42[v95];
              v58 = v27;
              v59 = v38;
              v60 = v46 + 8 * (2 * v45);
              do
              {
                v62 = *v58++;
                v61 = v62;
                if (v62 >= v45)
                  goto LABEL_87;
                *v57++ = *(_QWORD *)(v60 + 8 * v61);
                --v59;
              }
              while (v59);
              v63 = *(_DWORD *)(a2 + 16);
              if (v63)
              {
                v64 = *(unsigned int *)(a2 + 20);
                v65 = *(_QWORD *)(a2 + 8);
                v66 = v27;
                v67 = (_QWORD *)v43;
                v68 = v38;
                do
                {
                  v70 = *v66++;
                  v69 = v70;
                  if (v70 >= v64)
                    goto LABEL_87;
                  *v67++ = *(_QWORD *)(v65 + 8 * v69);
                  --v68;
                }
                while (v68);
                if (v63 >= 2)
                {
                  v71 = (_QWORD *)(v43 + 8 * v38);
                  v72 = v27;
                  v73 = v38;
                  do
                  {
                    v75 = *v72++;
                    v74 = v75;
                    if (v75 >= v64)
                      goto LABEL_87;
                    *v71++ = *(_QWORD *)(v65 + 8 * v64 + 8 * v74);
                    --v73;
                  }
                  while (v73);
                  if (v63 >= 3)
                  {
                    v76 = (_QWORD *)(v43 + 8 * v95);
                    v77 = v27;
                    v78 = v38;
                    v79 = v65 + 8 * (2 * v64);
                    while (1)
                    {
                      v81 = *v77++;
                      v80 = v81;
                      if (v81 >= v64)
                        break;
                      *v76++ = *(_QWORD *)(v79 + 8 * v80);
                      if (!--v78)
                        goto LABEL_59;
                    }
                  }
                }
              }
            }
          }
        }
LABEL_87:
        __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
      }
LABEL_59:
      Algo::FundMatrix3x3((uint64_t)&v111, (uint64_t)v106, (double *)v116, &v118, (double *)&v119, a10);
      if (v118)
        v40 = 0;
      else
        v40 = a7;
      if (v43)
      {
        if (!a3)
          goto LABEL_68;
        MEMORY[0x20BD36480](v43, 0x1000C8000313F17);
      }
      if (v42 && a3)
        MEMORY[0x20BD36480](v42, 0x1000C8000313F17);
LABEL_68:
      ++__src;
      if (v27 && v102)
        MEMORY[0x20BD36480](v27, 0x1000C8052888210);
    }
    while (__src <= a4 && v40);
LABEL_71:
    v82 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v82)
    {
      v83 = 4 * v82;
      v84 = operator new[]();
    }
    else
    {
      v83 = 0;
      v84 = 0;
    }
    LODWORD(v113) = 1;
    HIDWORD(v113) = v82;
    v114 = (_DWORD)v82 != 0;
    v115 = v83;
    __srca = (void *)v84;
    v111 = &off_24C421358;
    v112 = v84;
    LODWORD(v106[0]) = 0;
    Algo::FundDist((double *)v116, a1, a2, (uint64_t)&v111, (unsigned int *)v106, a9);
    v85 = v106[0];
    if (LODWORD(v106[0]) > *a12)
    {
      v86 = *(void **)(a11 + 8);
      if (*(_QWORD *)(a11 + 32) >= (unint64_t)(4 * v82))
      {
        v87 = a11;
      }
      else
      {
        if (v86 && *(_BYTE *)(a11 + 24))
          MEMORY[0x20BD36480]();
        v86 = (void *)operator new[]();
        v87 = a11;
        *(_QWORD *)(a11 + 8) = v86;
        *(_QWORD *)(a11 + 32) = 4 * v82;
        *(_BYTE *)(a11 + 24) = 1;
      }
      *(_DWORD *)(v87 + 16) = 1;
      *(_DWORD *)(v87 + 20) = v82;
      v91 = 1;
      memcpy(v86, __srca, 4 * v82);
      *a12 = v85;
      v88 = pow((double)v85 / v90, (double)a3);
      v25 = -6.90775528 / log(fmin(fmax(1.0 - v88, 2.22044605e-16), 1.0));
    }
    if ((_DWORD)v82 && __srca)
      MEMORY[0x20BD36480](__srca, 0x1000C8052888210);
    v23 = v93 + 1;
  }
  while (v93 + 1 <= a5);
  return (v91 & 1u) - 1;
}

void sub_20B651F38(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_20B651F44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  int v26;

  if (v26)
  {
    if (a23)
      MEMORY[0x20BD36480](a23, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MatrixNxPts<1u,unsigned int>::~MatrixNxPts(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C421418;
  if (*(_QWORD *)(a1 + 8) && *(_BYTE *)(a1 + 24))
  {
    MEMORY[0x20BD36480]();
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 24) = 0;
  }
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void MatrixNxPts<1u,unsigned int>::~MatrixNxPts(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C421418;
  if (*(_QWORD *)(a1 + 8) && *(_BYTE *)(a1 + 24))
  {
    MEMORY[0x20BD36480]();
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 24) = 0;
  }
  *(_QWORD *)(a1 + 16) = 0;
  JUMPOUT(0x20BD36498);
}

uint64_t Matrix<unsigned int>::~Matrix(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C421418;
  if (*(_QWORD *)(a1 + 8) && *(_BYTE *)(a1 + 24))
  {
    MEMORY[0x20BD36480]();
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 24) = 0;
  }
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void Matrix<unsigned int>::~Matrix(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C421418;
  if (*(_QWORD *)(a1 + 8) && *(_BYTE *)(a1 + 24))
  {
    MEMORY[0x20BD36480]();
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 24) = 0;
  }
  *(_QWORD *)(a1 + 16) = 0;
  JUMPOUT(0x20BD36498);
}

uint64_t MatrixNxPts<1u,BOOL>::~MatrixNxPts(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C4213D8;
  if (*(_QWORD *)(a1 + 8) && *(_BYTE *)(a1 + 24))
  {
    MEMORY[0x20BD36480]();
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 24) = 0;
  }
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void MatrixNxPts<1u,BOOL>::~MatrixNxPts(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C4213D8;
  if (*(_QWORD *)(a1 + 8) && *(_BYTE *)(a1 + 24))
  {
    MEMORY[0x20BD36480]();
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 24) = 0;
  }
  *(_QWORD *)(a1 + 16) = 0;
  JUMPOUT(0x20BD36498);
}

uint64_t Algo::RansacHomography(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int *a8, double a9, _DWORD *a10)
{
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t i;
  int v15;
  uint64_t v16;
  uint64_t j;
  int v18;
  unsigned int v19;
  uint64_t v20;
  _BOOL8 v21;
  float v22;
  double v23;
  uint64_t v24;
  double v25;
  double v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unsigned int v45;
  BOOL v46;
  unsigned int v47;
  const void *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  _QWORD *v57;
  unsigned int *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  _QWORD *v62;
  unsigned int *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  _QWORD *v76;
  unsigned int *v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  _QWORD *v81;
  unsigned int *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  _BOOL8 v87;
  void *v88;
  uint64_t v89;
  void *v90;
  BOOL v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  unsigned int v95;
  unsigned int v96;
  void *v97;
  uint64_t v98;
  long double v99;
  char v101;
  unsigned int v105;
  uint64_t v106;
  uint64_t v108;
  uint64_t __n;
  int v111;
  int v113;
  uint64_t v114;
  _QWORD v116[2];
  uint64_t v117;
  char v118;
  uint64_t v119;
  char v120[40];
  uint64_t (**v121)();
  void *v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  uint64_t (**v126)();
  void *v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  _QWORD v131[2];
  int v132;
  unsigned int v133;
  BOOL v134;
  uint64_t v135;
  uint64_t (**v136)();
  _QWORD *v137;
  int v138;
  unsigned int v139;
  BOOL v140;
  uint64_t v141;
  void (**v142)(CRandomGenerator *__hidden);
  _DWORD v143[624];
  uint64_t v144;

  *a8 = 0;
  v11 = *(_DWORD *)(a1 + 20);
  v142 = &off_24C4213B8;
  v12 = 5489;
  v13 = 1;
  for (i = 3; i != 626; ++i)
  {
    v15 = 1812433253 * (v12 ^ (v12 >> 30));
    v12 = v15 + v13;
    v143[i - 2] = i + v15 - 2;
    ++v13;
  }
  v16 = 1;
  for (j = 3; j != 626; ++j)
  {
    v18 = 1812433253 * (a6 ^ (a6 >> 30));
    a6 = v18 + v16;
    v143[j - 2] = j + v18 - 2;
    ++v16;
  }
  v19 = 0;
  v101 = 0;
  v144 = 0;
  v20 = a3;
  v21 = a3 != 0;
  v22 = (float)v11;
  v108 = 2 * a3;
  v23 = (double)v11;
  v24 = 24 * a3;
  v25 = (double)a3;
  __n = 24 * (int)a3;
  v26 = 1.0;
  v114 = v24;
  do
  {
    if (v26 <= (double)v19)
      break;
    v106 = operator new[]();
    v27 = 1;
    v105 = v19;
    v111 = (2 * v19) | 1;
    do
    {
      if (a3)
        v28 = operator new[]();
      else
        v28 = 0;
      v29 = (float)((v111 * exp2((double)(v27 - 1))) & 0x7FFFFFFF);
      v143[0] = v29;
      v30 = 3;
      v31 = 1;
      do
      {
        v32 = 1812433253 * (v29 ^ (v29 >> 30));
        v29 = v32 + v31;
        v143[v30 - 2] = v30 + v32 - 2;
        ++v31;
        ++v30;
      }
      while (v30 != 626);
      v33 = a3;
      v113 = v27;
      if (a3)
      {
        v34 = 0;
        v35 = 0;
        do
        {
          if (v34 == 623)
            v36 = 0;
          else
            v36 = v34 + 1;
          v37 = v34;
          v38 = v143[(v34 + 397) % 0x270uLL] ^ ((v143[v36] & 0x7FFFFFFE | v143[v34] & 0x80000000) >> 1) ^ ((int)(v143[v36] << 31) >> 31) & 0x9908B0DF;
          v143[v37] = v38;
          v39 = ((v38 ^ (v38 >> 11)) << 7) & 0x9D2C5680 ^ v38 ^ (v38 >> 11);
          v40 = (float)((float)((float)((float)((v39 << 15) & 0xEFC60000 ^ v39 ^ (((v39 << 15) & 0xEFC60000 ^ v39) >> 18))
                                                    * 2.3283e-10)
                                            + 0.0)
                                    * v22);
          if (v35)
          {
            v41 = 0;
            v42 = v35;
            while (*(_DWORD *)(v28 + 4 * v41) != v40)
            {
              if (v35 == ++v41)
                goto LABEL_16;
            }
          }
          else
          {
            LODWORD(v41) = 0;
          }
          if ((_DWORD)v41 == v35)
          {
            v42 = v35;
LABEL_16:
            *(_DWORD *)(v28 + 4 * v42) = v40;
            ++v35;
          }
          v34 = v36;
        }
        while (v35 < a3);
        v43 = (_QWORD *)operator new[]();
        v138 = 3;
        v139 = a3;
        v140 = v21;
        v141 = v24;
        v136 = &off_24C421398;
        v137 = v43;
        v44 = operator new[]();
        v33 = a3;
        v45 = a3;
      }
      else
      {
        v43 = 0;
        v45 = 0;
        v44 = 0;
        v138 = 3;
        v139 = 0;
        v140 = v21;
        v141 = v24;
        v136 = &off_24C421398;
        v137 = 0;
      }
      v132 = 3;
      v133 = v33;
      v134 = v21;
      v135 = v24;
      v131[0] = &off_24C421398;
      v131[1] = v44;
      v46 = v45 >= v33;
      v47 = v33;
      v48 = (const void *)v44;
      if (!v46)
      {
LABEL_46:
        v68 = *(_DWORD *)(a2 + 16);
        if (v68)
        {
          v69 = *(unsigned int *)(a2 + 20);
          v70 = *(_QWORD *)(a2 + 8);
          v71 = (unsigned int *)v28;
          v72 = (_QWORD *)v44;
          v73 = v20;
          do
          {
            v75 = *v71++;
            v74 = v75;
            if (v75 >= v69)
              goto LABEL_86;
            *v72++ = *(_QWORD *)(v70 + 8 * v74);
            --v73;
          }
          while (v73);
          if (v68 >= 2)
          {
            v76 = (_QWORD *)(v44 + 8 * v20);
            v77 = (unsigned int *)v28;
            v78 = v20;
            do
            {
              v80 = *v77++;
              v79 = v80;
              if (v80 >= v69)
                goto LABEL_86;
              *v76++ = *(_QWORD *)(v70 + 8 * v69 + 8 * v79);
              --v78;
            }
            while (v78);
            if (v68 >= 3)
            {
              v81 = (_QWORD *)(v44 + 8 * v108);
              v82 = (unsigned int *)v28;
              v83 = v20;
              v84 = v70 + 8 * (2 * v69);
              while (1)
              {
                v86 = *v82++;
                v85 = v86;
                if (v86 >= v69)
                  break;
                *v81++ = *(_QWORD *)(v84 + 8 * v85);
                if (!--v83)
                  goto LABEL_58;
              }
            }
          }
        }
        goto LABEL_86;
      }
      if (v47)
      {
        v49 = *(_DWORD *)(a1 + 16);
        if (v49)
        {
          v50 = *(unsigned int *)(a1 + 20);
          v51 = *(_QWORD *)(a1 + 8);
          v52 = (unsigned int *)v28;
          v53 = v43;
          v54 = v20;
          do
          {
            v56 = *v52++;
            v55 = v56;
            if (v56 >= v50)
              goto LABEL_86;
            *v53++ = *(_QWORD *)(v51 + 8 * v55);
            --v54;
          }
          while (v54);
          if (v49 >= 2)
          {
            v57 = &v43[v45];
            v58 = (unsigned int *)v28;
            v59 = v20;
            do
            {
              v61 = *v58++;
              v60 = v61;
              if (v61 >= v50)
                goto LABEL_86;
              *v57++ = *(_QWORD *)(v51 + 8 * v50 + 8 * v60);
              --v59;
            }
            while (v59);
            if (v49 >= 3)
            {
              v62 = &v43[2 * v45];
              v63 = (unsigned int *)v28;
              v64 = v20;
              v65 = v51 + 8 * (2 * v50);
              while (1)
              {
                v67 = *v63++;
                v66 = v67;
                if (v67 >= v50)
                  break;
                *v62++ = *(_QWORD *)(v65 + 8 * v66);
                if (!--v64)
                  goto LABEL_46;
              }
            }
          }
        }
LABEL_86:
        __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
      }
LABEL_58:
      v87 = v21;
      LODWORD(v128) = 3;
      HIDWORD(v128) = v45;
      v88 = (void *)operator new[]();
      v89 = v20;
      v127 = v88;
      v130 = 24 * v45;
      memcpy(v88, v43, 24 * (int)v45);
      v129 = 1;
      v126 = &off_24C421398;
      LODWORD(v123) = 3;
      HIDWORD(v123) = a3;
      v90 = (void *)operator new[]();
      v122 = v90;
      v125 = v114;
      memcpy(v90, v48, __n);
      v124 = 1;
      v121 = &off_24C421398;
      v91 = GeomUtils::check3of4SpotsOnSameLine((uint64_t)&v126, (uint64_t)&v121);
      v121 = &off_24C4213F8;
      MEMORY[0x20BD36480](v90, 0x1000C8000313F17);
      v122 = 0;
      v125 = 0;
      v126 = &off_24C4213F8;
      v124 = 0;
      v123 = 0;
      MEMORY[0x20BD36480](v88, 0x1000C8000313F17);
      v127 = 0;
      v130 = 0;
      v129 = 0;
      v128 = 0;
      if (!v91)
        GeomUtils::homography2d((uint64_t)&v136, (uint64_t)v131, (uint64_t)v120);
      v21 = v87;
      if (v48 && a3)
        MEMORY[0x20BD36480](v48, 0x1000C8000313F17);
      v20 = v89;
      if (v43 && a3)
        MEMORY[0x20BD36480](v43, 0x1000C8000313F17);
      v24 = v114;
      if (a3 && v28)
        MEMORY[0x20BD36480](v28, 0x1000C8052888210);
      v27 = v113 + 1;
    }
    while (v113 + 1 <= a4);
    v92 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v92)
    {
      v93 = 4 * v92;
      v94 = (_QWORD *)operator new[]();
    }
    else
    {
      v93 = 0;
      v94 = 0;
    }
    v138 = 1;
    v139 = v92;
    v140 = (_DWORD)v92 != 0;
    v141 = v93;
    v136 = &off_24C421358;
    v137 = v94;
    LODWORD(v131[0]) = 0;
    v116[0] = &off_24C4213F8;
    v116[1] = v106;
    v119 = 72;
    v117 = 0x300000003;
    v118 = 0;
    GeomUtils::homogDist2d((uint64_t)v116, a1, a2, (uint64_t)&v136, (unsigned int *)v131, a9);
    v95 = *a8;
    v117 = 0;
    v96 = v131[0];
    if (LODWORD(v131[0]) > v95)
    {
      v97 = *(void **)(a7 + 8);
      if (*(_QWORD *)(a7 + 32) >= (unint64_t)(4 * v92))
      {
        v98 = a7;
      }
      else
      {
        if (v97 && *(_BYTE *)(a7 + 24))
          MEMORY[0x20BD36480]();
        v97 = (void *)operator new[]();
        v98 = a7;
        *(_QWORD *)(a7 + 8) = v97;
        *(_QWORD *)(a7 + 32) = 4 * v92;
        *(_BYTE *)(a7 + 24) = 1;
      }
      *(_DWORD *)(v98 + 16) = 1;
      *(_DWORD *)(v98 + 20) = v92;
      v101 = 1;
      memcpy(v97, v94, 4 * v92);
      *a8 = v96;
      v99 = pow((double)v96 / v23, v25);
      v26 = -6.90775528 / log(fmin(fmax(1.0 - v99, 2.22044605e-16), 1.0));
    }
    if (v94 && (_DWORD)v92)
      MEMORY[0x20BD36480](v94, 0x1000C8052888210);
    v19 = v105 + 1;
    MEMORY[0x20BD36480](v106, 0x1000C8000313F17);
    v24 = v114;
  }
  while (v105 + 1 <= a5);
  if (a10)
    *a10 = v19 - 1;
  return (v101 & 1u) - 1;
}

void sub_20B652BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  int v16;

  if (v15)
  {
    if (v16)
      MEMORY[0x20BD36480](v15, 0x1000C8052888210);
  }
  MEMORY[0x20BD36480](a15, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

uint64_t Algo::RansacPlane(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, uint64_t a6, unsigned int *a7, _DWORD *a8, double a9)
{
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t i;
  int v15;
  uint64_t v16;
  uint64_t j;
  int v18;
  unsigned int v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double *v25;
  int v26;
  unsigned int v27;
  double *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  double *v43;
  double *v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unsigned int *v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  double *v60;
  double v61;
  double *v62;
  double v63;
  double *v64;
  double *v65;
  double *v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double *v75;
  uint64_t v76;
  __int128 v77;
  double v78;
  double v79;
  double v80;
  double v81;
  uint64_t v82;
  _DWORD *v83;
  unsigned int v84;
  double v85;
  double v86;
  double v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  double v93;
  double v94;
  double v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  long double v99;
  double __y;
  double v103;
  char v104;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v114;
  uint64_t v115;
  int v116;
  int v118;
  double *v119;
  double *v120;
  char v121;
  unsigned int v122;
  double *v123;
  void (**v124)(CRandomGenerator *__hidden);
  _DWORD v125[624];
  uint64_t v126;

  v10 = a2;
  *a7 = 0;
  v11 = *(_DWORD *)(a1 + 20);
  v124 = &off_24C4213B8;
  v12 = 5489;
  v13 = 1;
  for (i = 3; i != 626; ++i)
  {
    v15 = 1812433253 * (v12 ^ (v12 >> 30));
    v12 = v15 + v13;
    v125[i - 2] = i + v15 - 2;
    ++v13;
  }
  v16 = 1;
  for (j = 3; j != 626; ++j)
  {
    v18 = 1812433253 * (a5 ^ (a5 >> 30));
    a5 = v18 + v16;
    v125[j - 2] = j + v18 - 2;
    ++v16;
  }
  v19 = 0;
  v104 = 0;
  v126 = 0;
  v20 = (float)v11;
  v21 = 2 * a2;
  __y = (double)a2;
  v103 = (double)v11;
  v22 = 8 * a2;
  v110 = 8 * v21;
  v23 = a2;
  v24 = 1.0;
  v114 = v21;
  do
  {
    if (v24 <= (double)v19)
      break;
    v109 = operator new[]();
    v123 = 0;
    v116 = 0;
    v25 = 0;
    v26 = 0;
    v27 = v19;
    v28 = 0;
    v120 = 0;
    v111 = 0;
    v121 = 1;
    v122 = 1;
    v108 = v27;
    v115 = (2 * v27) | 1;
    do
    {
      if (v10)
        v29 = operator new[]();
      else
        v29 = 0;
      v30 = (float)((v115 * exp2((double)(v122 - 1))) & 0x7FFFFFFF);
      v125[0] = v30;
      v31 = 3;
      v32 = 1;
      do
      {
        v33 = 1812433253 * (v30 ^ (v30 >> 30));
        v30 = v33 + v32;
        v125[v31 - 2] = v31 + v33 - 2;
        ++v32;
        ++v31;
      }
      while (v31 != 626);
      if (v10)
      {
        v34 = 0;
        v35 = 0;
        do
        {
          if (v34 == 623)
            v36 = 0;
          else
            v36 = v34 + 1;
          v37 = v34;
          v38 = v125[(v34 + 397) % 0x270uLL] ^ ((v125[v36] & 0x7FFFFFFE | v125[v34] & 0x80000000) >> 1) ^ ((int)(v125[v36] << 31) >> 31) & 0x9908B0DF;
          v125[v37] = v38;
          v39 = ((v38 ^ (v38 >> 11)) << 7) & 0x9D2C5680 ^ v38 ^ (v38 >> 11);
          v40 = (float)((float)((float)((float)((v39 << 15) & 0xEFC60000 ^ v39 ^ (((v39 << 15) & 0xEFC60000 ^ v39) >> 18))
                                                    * 2.3283e-10)
                                            + 0.0)
                                    * v20);
          if (v35)
          {
            v41 = 0;
            v42 = v35;
            while (*(_DWORD *)(v29 + 4 * v41) != v40)
            {
              if (v35 == ++v41)
                goto LABEL_15;
            }
          }
          else
          {
            LODWORD(v41) = 0;
          }
          if ((_DWORD)v41 == v35)
          {
            v42 = v35;
LABEL_15:
            *(_DWORD *)(v29 + 4 * v42) = v40;
            ++v35;
          }
          v34 = v36;
        }
        while (v35 < v10);
        v43 = (double *)operator new[]();
        v44 = v43;
        v45 = *(_DWORD *)(a1 + 16);
        if (!v45)
          goto LABEL_101;
        v46 = 0;
        v47 = *(unsigned int *)(a1 + 20);
        v48 = *(_QWORD *)(a1 + 8);
        do
        {
          v49 = *(unsigned int *)(v29 + 4 * v46);
          if (v49 >= v47)
            goto LABEL_101;
          v43[v46++] = *(double *)(v48 + 8 * v49);
        }
        while (v23 != v46);
        if (v45 < 2)
          goto LABEL_101;
        v50 = 0;
        v51 = (unsigned int *)v29;
        do
        {
          v53 = *v51++;
          v52 = v53;
          if (v53 >= v47)
            goto LABEL_101;
          v43[(unint64_t)v22 / 8 + v50 / 8] = *(double *)(v48 + 8 * v47 + 8 * v52);
          v50 += 8;
        }
        while (v22 != v50);
        if (v45 < 3)
LABEL_101:
          __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
        v54 = v48 + 8 * (2 * v47);
        v55 = (unsigned int *)v29;
        v56 = v110;
        v57 = v23;
        do
        {
          v59 = *v55++;
          v58 = v59;
          if (v59 >= v47)
            goto LABEL_101;
          *(double *)((char *)v43 + v56) = *(double *)(v54 + 8 * v58);
          v56 += 8;
          --v57;
        }
        while (v57);
        if ((v121 & 1) == 0)
        {
          *v28 = *v43;
          v28[1] = v43[v23];
          v28[2] = v43[v21];
          if (v10 == 1)
            goto LABEL_102;
          *v25 = v43[1];
          v25[1] = v43[v23 + 1];
          v25[2] = v43[v21 + 1];
          goto LABEL_56;
        }
      }
      else
      {
        v44 = 0;
        if ((v121 & 1) == 0)
          goto LABEL_102;
      }
      if (v28 && v26)
        MEMORY[0x20BD36480](v28, 0x1000C8000313F17);
      v60 = (double *)operator new[]();
      v28 = v60;
      if (!v10)
        goto LABEL_102;
      v61 = v44[v23];
      *v60 = *v44;
      v60[1] = v61;
      v60[2] = v44[v21];
      if (v25 && v116)
        MEMORY[0x20BD36480](v25, 0x1000C8000313F17);
      v26 = 1;
      v62 = (double *)operator new[]();
      v25 = v62;
      if (v10 == 1)
LABEL_102:
        __assert_rtn("operator()", "Matrix.hpp", 120, "row < m_rows && col < m_cols");
      v63 = v44[v23 + 1];
      *v62 = v44[1];
      v62[1] = v63;
      v62[2] = v44[v21 + 1];
      if (v123 && HIDWORD(v115))
        MEMORY[0x20BD36480](v123, 0x1000C8000313F17);
      v116 = 1;
      v123 = (double *)operator new[]();
      HIDWORD(v115) = 1;
LABEL_56:
      if (v10 == 2)
        goto LABEL_102;
      *v123 = v44[2];
      v123[1] = v44[v23 + 2];
      v123[2] = v44[v21 + 2];
      v64 = (double *)operator new[]();
      v118 = v26;
      *v64 = *v25 - *v28;
      v64[1] = v25[1] - v28[1];
      v119 = v25;
      v64[2] = v25[2] - v28[2];
      v65 = (double *)operator new[]();
      *v65 = *v123 - *v28;
      v65[1] = v123[1] - v28[1];
      v65[2] = v123[2] - v28[2];
      v66 = (double *)operator new[]();
      v68 = v65[1];
      v67 = v65[2];
      v70 = v64[1];
      v69 = v64[2];
      v71 = *v65;
      v72 = *v64;
      v73 = v70 * v67 - v69 * v68;
      v74 = v69 * *v65 - *v64 * v67;
      *v66 = v73;
      v66[1] = v74;
      v66[2] = v72 * v68 - v70 * v71;
      if ((v121 & 1) != 0)
      {
        if (v120 && v111)
          MEMORY[0x20BD36480](v120, 0x1000C8000313F17);
        v75 = v28;
        v111 = 1;
        v76 = operator new[]();
      }
      else
      {
        v75 = v28;
        v76 = (uint64_t)v120;
      }
      v77 = *(_OWORD *)v66;
      *(double *)(v76 + 16) = v66[2];
      *(_OWORD *)v76 = v77;
      MEMORY[0x20BD36480](v66, 0x1000C8000313F17);
      v79 = *(double *)v76;
      v78 = *(double *)(v76 + 8);
      v120 = (double *)v76;
      v80 = *(double *)(v76 + 16);
      MEMORY[0x20BD36480](v65, 0x1000C8000313F17);
      MEMORY[0x20BD36480](v64, 0x1000C8000313F17);
      MEMORY[0x20BD36480](v44, 0x1000C8000313F17);
      if (v29)
        MEMORY[0x20BD36480](v29, 0x1000C8052888210);
      v81 = sqrt(v79 * v79 + 0.0 + v78 * v78 + v80 * v80);
      ++v122;
      v28 = v75;
      v25 = v119;
      v26 = v118;
      v10 = a2;
      v21 = v114;
      if (v122 > a3)
        break;
      v121 = 0;
    }
    while (v81 < 0.00000011920929);
    v82 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v82)
    {
      v83 = (_DWORD *)operator new[]();
      v84 = *(_DWORD *)(a1 + 20);
    }
    else
    {
      v84 = 0;
      v83 = 0;
    }
    v85 = *v120 / v81;
    v86 = v120[1] / v81;
    *v120 = v85;
    v120[1] = v86;
    v87 = v120[2] / v81;
    v120[2] = v87;
    if (v84)
    {
      v88 = *(_DWORD *)(a1 + 16);
      if (!v88)
        __assert_rtn("operator()", "Matrix.hpp", 120, "row < m_rows && col < m_cols");
      if (v88 == 1)
        __assert_rtn("operator()", "Matrix.hpp", 120, "row < m_rows && col < m_cols");
      if (v88 < 3)
        __assert_rtn("operator()", "Matrix.hpp", 120, "row < m_rows && col < m_cols");
      v89 = 0;
      v90 = 0;
      v91 = *(_QWORD *)(a1 + 8);
      v92 = v84;
      v93 = *v28;
      v94 = v28[1];
      v95 = v28[2];
      v96 = v91 + 16 * v84;
      do
      {
        if (fabs((*(double *)(v91 + 8 * v89) - v93) * v85+ (*(double *)(v91 + 8 * v92 + 8 * v89) - v94) * v86+ v87 * (*(double *)(v96 + 8 * v89) - v95)) < a9)v83[v90++] = v89;
        ++v89;
      }
      while (v92 != v89);
      if (v90 > *a7)
      {
        v97 = *(void **)(a6 + 8);
        if (*(_QWORD *)(a6 + 32) >= (unint64_t)(4 * v82))
        {
          v98 = a6;
        }
        else
        {
          if (v97 && *(_BYTE *)(a6 + 24))
            MEMORY[0x20BD36480]();
          v97 = (void *)operator new[]();
          v98 = a6;
          *(_QWORD *)(a6 + 8) = v97;
          *(_QWORD *)(a6 + 32) = 4 * v82;
          *(_BYTE *)(a6 + 24) = 1;
        }
        *(_DWORD *)(v98 + 16) = 1;
        *(_DWORD *)(v98 + 20) = v82;
        v104 = 1;
        memcpy(v97, v83, 4 * v82);
        *a7 = v90;
        v99 = pow((double)v90 / v103, __y);
        v24 = -6.90775528 / log(fmin(fmax(1.0 - v99, 2.22044605e-16), 1.0));
        v10 = a2;
      }
    }
    if ((_DWORD)v82 && v83)
      MEMORY[0x20BD36480](v83, 0x1000C8052888210);
    v21 = v114;
    if (HIDWORD(v115))
      MEMORY[0x20BD36480](v123, 0x1000C8000313F17);
    if (v116)
      MEMORY[0x20BD36480](v119, 0x1000C8000313F17);
    if (v118)
      MEMORY[0x20BD36480](v28, 0x1000C8000313F17);
    if (v111)
      MEMORY[0x20BD36480](v120, 0x1000C8000313F17);
    v19 = v108 + 1;
    MEMORY[0x20BD36480](v109, 0x1000C8000313F17);
  }
  while (v108 + 1 <= a4);
  if (a8)
    *a8 = v19 - 1;
  return (v104 & 1u) - 1;
}

void sub_20B653894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,int a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;

  if (v35 && v32)
    MEMORY[0x20BD36480](v32, 0x1000C8052888210);
  if (a32 && a25)
    MEMORY[0x20BD36480](a32, 0x1000C8000313F17);
  if (v34 && a26)
    MEMORY[0x20BD36480](v34, 0x1000C8000313F17);
  if (v33 && v36)
    MEMORY[0x20BD36480](v33, 0x1000C8000313F17);
  if (a30)
  {
    if (a21)
      MEMORY[0x20BD36480](a30, 0x1000C8000313F17);
  }
  MEMORY[0x20BD36480](a17, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

double Algo::Mean(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  void *v6;
  double result;
  int v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  double *v19;
  unint64_t v20;
  double v21;
  double *v22;
  int v23;
  float64x2_t *v24;
  unint64_t v25;
  unint64_t v26;
  double *v27;
  uint64_t v28;
  float64x2_t v29;
  float64x2_t *v30;
  uint64_t v31;
  float64x2_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  double v37;

  v4 = *(_DWORD *)(a1 + 16);
  if (v4 == 1)
  {
    if (*(_QWORD *)(a2 + 32) <= 7uLL)
    {
      if (*(_QWORD *)(a2 + 8) && *(_BYTE *)(a2 + 24))
        MEMORY[0x20BD36480]();
      *(_QWORD *)(a2 + 8) = operator new[]();
      *(_QWORD *)(a2 + 32) = 8;
      *(_BYTE *)(a2 + 24) = 1;
    }
    *(_QWORD *)(a2 + 16) = 0x100000001;
    v15 = *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16);
    v16 = v15;
    if (v15 < 1)
    {
      v21 = 0.0;
    }
    else
    {
      v17 = *(_QWORD *)(a1 + 8);
      v18 = v17 + 8 * v15;
      v19 = (double *)(v17 + 8);
      if (v18 <= v17 + 8)
        v18 = v17 + 8;
      v20 = v18 + ~v17;
      if (v20 >= 8)
      {
        v34 = (v20 >> 3) + 1;
        v21 = 0.0;
        v35 = v34 & 0x3FFFFFFFFFFFFFFELL;
        do
        {
          v21 = v21 + *(v19 - 1) + *v19;
          v19 += 2;
          v35 -= 2;
        }
        while (v35);
        if (v34 == (v34 & 0x3FFFFFFFFFFFFFFELL))
          goto LABEL_47;
        v22 = (double *)(v17 + 8 * (v34 & 0x3FFFFFFFFFFFFFFELL));
      }
      else
      {
        v21 = 0.0;
        v22 = *(double **)(a1 + 8);
      }
      v36 = v17 + 8 * v15;
      do
      {
        v37 = *v22++;
        v21 = v21 + v37;
      }
      while ((unint64_t)v22 < v36);
    }
LABEL_47:
    result = v21 / (double)v16;
    **(double **)(a2 + 8) = result;
    return result;
  }
  if (!v4)
    __assert_rtn("Mean", "Algo.cpp", 1452, "rows > 0");
  v5 = *(unsigned int *)(a1 + 20);
  v6 = *(void **)(a2 + 8);
  if (*(_QWORD *)(a2 + 32) < (unint64_t)(8 * v5))
  {
    if (v6 && *(_BYTE *)(a2 + 24))
      MEMORY[0x20BD36480]();
    v6 = (void *)operator new[]();
    *(_QWORD *)(a2 + 8) = v6;
    *(_QWORD *)(a2 + 32) = 8 * v5;
    *(_BYTE *)(a2 + 24) = 1;
  }
  *(_DWORD *)(a2 + 16) = 1;
  *(_DWORD *)(a2 + 20) = v5;
  bzero(v6, 8 * v5);
  if ((_DWORD)v5)
  {
    v8 = 0;
    v9 = *(_DWORD *)(a1 + 16);
    do
    {
      if (v8 == v9)
LABEL_50:
        __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
      v10 = 0;
      v11 = *(unsigned int *)(a1 + 20);
      do
      {
        if (v11 == v10)
          goto LABEL_50;
        v12 = *(_DWORD *)(a2 + 16);
        if (!v12 || (v13 = *(unsigned int *)(a2 + 20), v10 >= v13))
          __assert_rtn("operator()", "Matrix.hpp", 120, "row < m_rows && col < m_cols");
        v14 = *(_QWORD *)(a2 + 8);
        result = *(double *)(*(_QWORD *)(a1 + 8) + 8 * (v11 * v8) + 8 * v10)
               + *(double *)(v14 + 8 * v10);
        *(double *)(v14 + 8 * v10++) = result;
      }
      while (v5 != v10);
      ++v8;
    }
    while (v8 != v4);
  }
  else
  {
    v12 = *(_DWORD *)(a2 + 16);
    LODWORD(v13) = *(_DWORD *)(a2 + 20);
  }
  v23 = v13 * v12;
  if ((int)v13 * v12 >= 1)
  {
    result = (double)v4;
    v24 = *(float64x2_t **)(a2 + 8);
    v25 = (unint64_t)&v24->f64[v23];
    if (v25 <= (unint64_t)&v24->f64[1])
      v25 = (unint64_t)&v24->f64[1];
    v26 = v25 + ~(unint64_t)v24;
    v27 = *(double **)(a2 + 8);
    if (v26 < 0x18)
      goto LABEL_37;
    v28 = (v26 >> 3) + 1;
    v29 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&result, 0);
    v30 = v24 + 1;
    v31 = v28 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v32 = vdivq_f64(*v30, v29);
      v30[-1] = vdivq_f64(v30[-1], v29);
      *v30 = v32;
      v30 += 2;
      v31 -= 4;
    }
    while (v31);
    if (v28 != (v28 & 0x3FFFFFFFFFFFFFFCLL))
    {
      v27 = &v24->f64[v28 & 0x3FFFFFFFFFFFFFFCLL];
LABEL_37:
      v33 = (unint64_t)&v24->f64[v23];
      do
      {
        *v27 = *v27 / result;
        ++v27;
      }
      while ((unint64_t)v27 < v33);
    }
  }
  return result;
}

uint64_t Algo::Gcd(uint64_t this, uint64_t a2)
{
  uint64_t v2;

  if ((_DWORD)a2)
  {
    do
    {
      v2 = a2;
      a2 = this % a2;
      LODWORD(this) = v2;
    }
    while ((_DWORD)a2);
    return v2;
  }
  return this;
}

uint64_t Algo::Lcm(Algo *this, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;

  v2 = this;
  if (a2)
  {
    v3 = a2;
    v4 = this;
    do
    {
      v2 = v3;
      v3 = v4 % v3;
      v4 = v2;
    }
    while (v3);
  }
  return this / v2 * a2;
}

void sub_20B654034(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_20B65440C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_20B6548C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  void *v5;
  va_list va;

  va_start(va, a4);
  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);

  _Unwind_Resume(a1);
}

void sub_20B654AB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  va_list va;

  va_start(va, a2);

  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_20B654C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  va_list va;

  va_start(va, a10);

  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_20B6555E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;

  if (v31 < 0)
    operator delete(v30);
  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)&a16);

  _Unwind_Resume(a1);
}

void sub_20B655750(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_20B65580C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void InstrumentsTraceGuard::~InstrumentsTraceGuard(InstrumentsTraceGuard *this)
{
  kdebug_trace();
}

void filterDepthAndUncertainty<float,float,false>(__CVBuffer *a1, __CVBuffer *a2, __CVBuffer *a3, __CVBuffer *a4, void *a5, void *a6, double a7, double a8, double a9, double a10)
{
  id v19;
  void *v20;
  float v21;
  float v22;
  void *v23;
  float v24;
  float v25;
  void *v26;
  float v27;
  float v28;
  void *v29;
  char v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  _BOOL4 v34;
  void *v35;
  unsigned int v36;
  CGRect *v37;
  float *data;
  size_t rowBytes;
  char v40;
  size_t v41;
  size_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  float *v46;
  size_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  float v55;
  float v56;
  unint64_t v58;
  float v59;
  float v60;
  unint64_t v62;
  unint64_t v63;
  float v64;
  float v65;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  id v73;
  vImage_Buffer v74;
  vImage_Buffer v75;
  vImage_Buffer v76;
  vImage_Buffer v77;

  v73 = a5;
  v19 = a6;
  objc_msgSend(v19, "pipelineParameters");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "uncertaintyThreshold");
  v22 = v21;

  objc_msgSend(v19, "pipelineParameters");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "maxDepthThresholdForInvalidUncertainty");
  v25 = v24;

  objc_msgSend(v19, "pipelineParameters");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "minDepthThresholdForInvalidUncertainty");
  v28 = v27;

  objc_msgSend(v19, "pipelineParameters");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = objc_msgSend(v29, "outputHighConfidencePixelsOnly");

  if (v73)
  {
    v31 = 0;
    v32 = 0;
    while (1)
    {
      v33 = objc_msgSend(v73, "length");
      v34 = v31 >= v33;
      if (v31 >= v33)
        break;
      if (*(float *)(objc_msgSend(v73, "confidences") + 4 * v31) > 0.0)
      {
        objc_msgSend(v19, "pipelineParameters");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        v36 = objc_msgSend(v35, "minRequiredJasperPoints");
        ++v32;

        if (v32 >= v36)
        {
          v34 = 0;
          break;
        }
      }
      ++v31;
    }
  }
  else
  {
    v34 = 1;
  }
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(a2, 1uLL);
  CVPixelBufferLockBaseAddress(a3, 0);
  if (a4)
    CVPixelBufferLockBaseAddress(a4, 0);
  memset(&v77, 0, sizeof(v77));
  v37 = (CGRect *)MEMORY[0x24BDBF090];
  PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x24BDBF090], &v77);
  memset(&v76, 0, sizeof(v76));
  PixelBufferUtils::asVImageBuffer(a2, *v37, &v76);
  memset(&v75, 0, sizeof(v75));
  PixelBufferUtils::asVImageBuffer(a3, *v37, &v75);
  if (a4)
  {
    PixelBufferUtils::asVImageBuffer(a4, *v37, &v74);
    data = (float *)v74.data;
    rowBytes = v74.rowBytes;
    if (a10 <= 0.0)
      goto LABEL_80;
  }
  else
  {
    data = 0;
    rowBytes = 0;
    if (a10 <= 0.0)
      goto LABEL_80;
  }
  if (v22 <= 10.0)
    v40 = v30;
  else
    v40 = 0;
  if (a9 > 0.0)
  {
    v41 = v76.rowBytes;
    v42 = v77.rowBytes;
    v43 = 4 * (unint64_t)a7;
    v44 = (char *)v77.data + v77.rowBytes * (unint64_t)a8 + v43;
    v45 = (char *)v76.data + v76.rowBytes * (unint64_t)a8 + v43;
    v46 = (float *)v75.data;
    v47 = v75.rowBytes;
    if (a4)
    {
      if (v34)
      {
        if ((v40 & 1) != 0)
        {
          v48 = 0;
          do
          {
            v49 = 0;
            do
            {
              v50 = v49;
              v46[v50] = NAN;
              data[v50] = 10.0;
              ++v49;
            }
            while (a9 > (double)v49);
            ++v48;
            data = (float *)((char *)data + rowBytes);
            v46 = (float *)((char *)v46 + v47);
          }
          while (a10 > (double)v48);
        }
        else
        {
          v68 = 0;
          do
          {
            v69 = 0;
            do
            {
              v70 = v69;
              v46[v70] = *(float *)&v44[4 * v69];
              data[v70] = 10.0;
              ++v69;
            }
            while (a9 > (double)v69);
            ++v68;
            data = (float *)((char *)data + rowBytes);
            v46 = (float *)((char *)v46 + v47);
            v44 += v42;
          }
          while (a10 > (double)v68);
        }
      }
      else
      {
        v53 = 0;
        if ((v30 & 1) != 0)
        {
          do
          {
            v54 = 0;
            do
            {
              v55 = *(float *)&v44[4 * v54];
              v56 = *(float *)&v45[4 * v54];
              if (v55 < v28 || v55 > v25)
                v56 = 10.0;
              if (v56 >= v22)
                v55 = NAN;
              v46[v54] = v55;
              data[v54++] = v56;
            }
            while (a9 > (double)v54);
            ++v53;
            data = (float *)((char *)data + rowBytes);
            v46 = (float *)((char *)v46 + v47);
            v45 += v41;
            v44 += v42;
          }
          while (a10 > (double)v53);
        }
        else
        {
          do
          {
            v58 = 0;
            do
            {
              v59 = *(float *)&v44[4 * v58];
              v60 = *(float *)&v45[4 * v58];
              if (v59 < v28 || v59 > v25)
                v60 = 10.0;
              v46[v58] = v59;
              data[v58++] = v60;
            }
            while (a9 > (double)v58);
            ++v53;
            data = (float *)((char *)data + rowBytes);
            v46 = (float *)((char *)v46 + v47);
            v45 += v41;
            v44 += v42;
          }
          while (a10 > (double)v53);
        }
      }
    }
    else if (v34)
    {
      if ((v40 & 1) != 0)
      {
        v51 = 0;
        do
        {
          v52 = 0;
          do
            v46[v52++] = NAN;
          while (a9 > (double)v52);
          ++v51;
          v46 = (float *)((char *)v46 + v47);
        }
        while (a10 > (double)v51);
      }
      else
      {
        v71 = 0;
        do
        {
          v72 = 0;
          do
          {
            v46[v72] = *(float *)&v44[4 * v72];
            ++v72;
          }
          while (a9 > (double)v72);
          ++v71;
          v46 = (float *)((char *)v46 + v47);
          v44 += v42;
        }
        while (a10 > (double)v71);
      }
    }
    else
    {
      v62 = 0;
      if ((v30 & 1) != 0)
      {
        do
        {
          v63 = 0;
          do
          {
            v64 = *(float *)&v44[4 * v63];
            v65 = *(float *)&v45[4 * v63];
            if (v64 < v28 || v64 > v25)
              v65 = 10.0;
            if (v65 >= v22)
              v64 = NAN;
            v46[v63++] = v64;
          }
          while (a9 > (double)v63);
          ++v62;
          v46 = (float *)((char *)v46 + v47);
          v45 += v41;
          v44 += v42;
        }
        while (a10 > (double)v62);
      }
      else
      {
        do
        {
          v67 = 0;
          do
          {
            v46[v67] = *(float *)&v44[4 * v67];
            ++v67;
          }
          while (a9 > (double)v67);
          ++v62;
          v46 = (float *)((char *)v46 + v47);
          v44 += v42;
        }
        while (a10 > (double)v62);
      }
    }
  }
LABEL_80:
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(a2, 1uLL);
  if (a4)
    CVPixelBufferUnlockBaseAddress(a4, 0);

}

void sub_20B655DF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void filterDepthAndUncertainty<float,half,false>(__CVBuffer *a1, __CVBuffer *a2, __CVBuffer *a3, __CVBuffer *a4, void *a5, void *a6, double a7, double a8, double a9, double a10)
{
  id v19;
  void *v20;
  float v21;
  float v22;
  void *v23;
  float v24;
  float v25;
  void *v26;
  float v27;
  float v28;
  void *v29;
  unsigned __int8 v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  _BOOL4 v34;
  void *v35;
  unsigned int v36;
  CGRect *v37;
  float v38;
  char *data;
  size_t rowBytes;
  unsigned __int8 v41;
  size_t v42;
  size_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  size_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v63;
  unint64_t v65;
  unint64_t v66;
  float v68;
  unint64_t v70;
  unint64_t v72;
  unint64_t v73;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  id v79;
  vImage_Buffer v80;
  vImage_Buffer v81;
  vImage_Buffer v82;
  vImage_Buffer v83;

  v79 = a5;
  v19 = a6;
  objc_msgSend(v19, "pipelineParameters");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "uncertaintyThreshold");
  v22 = v21;

  objc_msgSend(v19, "pipelineParameters");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "maxDepthThresholdForInvalidUncertainty");
  v25 = v24;

  objc_msgSend(v19, "pipelineParameters");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "minDepthThresholdForInvalidUncertainty");
  v28 = v27;

  objc_msgSend(v19, "pipelineParameters");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = objc_msgSend(v29, "outputHighConfidencePixelsOnly");

  if (v79)
  {
    v31 = 0;
    v32 = 0;
    while (1)
    {
      v33 = objc_msgSend(v79, "length");
      v34 = v31 >= v33;
      if (v31 >= v33)
        break;
      if (*(float *)(objc_msgSend(v79, "confidences") + 4 * v31) > 0.0)
      {
        objc_msgSend(v19, "pipelineParameters");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        v36 = objc_msgSend(v35, "minRequiredJasperPoints");
        ++v32;

        if (v32 >= v36)
        {
          v34 = 0;
          break;
        }
      }
      ++v31;
    }
  }
  else
  {
    v34 = 1;
  }
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(a2, 1uLL);
  CVPixelBufferLockBaseAddress(a3, 0);
  if (a4)
    CVPixelBufferLockBaseAddress(a4, 0);
  memset(&v83, 0, sizeof(v83));
  v37 = (CGRect *)MEMORY[0x24BDBF090];
  PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x24BDBF090], &v83);
  memset(&v82, 0, sizeof(v82));
  PixelBufferUtils::asVImageBuffer(a2, *v37, &v82);
  memset(&v81, 0, sizeof(v81));
  PixelBufferUtils::asVImageBuffer(a3, *v37, &v81);
  if (a4)
  {
    PixelBufferUtils::asVImageBuffer(a4, *v37, &v80);
    data = (char *)v80.data;
    rowBytes = v80.rowBytes;
    if (a10 <= 0.0)
      goto LABEL_72;
  }
  else
  {
    data = 0;
    rowBytes = 0;
    if (a10 <= 0.0)
      goto LABEL_72;
  }
  if (v22 <= 10.0)
    v41 = v30;
  else
    v41 = 0;
  if (a9 > 0.0)
  {
    v42 = v82.rowBytes;
    v43 = v83.rowBytes;
    v44 = 4 * (unint64_t)a7;
    v45 = (char *)v83.data + v83.rowBytes * (unint64_t)a8 + v44;
    v46 = (char *)v82.data + v82.rowBytes * (unint64_t)a8 + v44;
    v47 = (char *)v81.data;
    v48 = v81.rowBytes;
    if (a4)
    {
      if (v34)
      {
        if ((v41 & 1) != 0)
        {
          v49 = 0;
          do
          {
            v50 = 0;
            do
            {
              v51 = 2 * v50;
              *(_WORD *)&v47[v51] = 32256;
              *(_WORD *)&data[v51] = 18688;
              ++v50;
            }
            while (a9 > (double)v50);
            ++v49;
            data += rowBytes;
            v47 += v48;
          }
          while (a10 > (double)v49);
        }
        else
        {
          v72 = 0;
          do
          {
            v73 = 0;
            do
            {
              _S1 = *(_DWORD *)&v45[4 * v73];
              __asm { FCVT            H1, S1 }
              v75 = 2 * v73;
              *(_WORD *)&v47[v75] = _S1;
              *(_WORD *)&data[v75] = 18688;
              ++v73;
            }
            while (a9 > (double)v73);
            ++v72;
            data += rowBytes;
            v47 += v48;
            v45 += v43;
          }
          while (a10 > (double)v72);
        }
      }
      else
      {
        v54 = 0;
        LOWORD(v38) = 32256;
        do
        {
          v55 = 0;
          do
          {
            _S2 = *(float *)&v45[4 * v55];
            _S3 = *(float *)&v46[4 * v55];
            if (_S2 < v28 || _S2 > v25)
              _S3 = 10.0;
            __asm { FCVT            H2, S2 }
            if ((v30 & (_S3 >= v22)) != 0)
              _S2 = v38;
            v63 = 2 * v55;
            *(_WORD *)&v47[v63] = LOWORD(_S2);
            __asm { FCVT            H2, S3 }
            *(_WORD *)&data[v63] = _H2;
            ++v55;
          }
          while (a9 > (double)v55);
          ++v54;
          data += rowBytes;
          v47 += v48;
          v46 += v42;
          v45 += v43;
        }
        while (a10 > (double)v54);
      }
    }
    else if (v34)
    {
      if ((v41 & 1) != 0)
      {
        v52 = 0;
        do
        {
          v53 = 0;
          do
            *(_WORD *)&v47[2 * v53++] = 32256;
          while (a9 > (double)v53);
          ++v52;
          v47 += v48;
        }
        while (a10 > (double)v52);
      }
      else
      {
        v76 = 0;
        do
        {
          v77 = 0;
          do
          {
            _S0 = *(_DWORD *)&v45[4 * v77];
            __asm { FCVT            H0, S0 }
            *(_WORD *)&v47[2 * v77++] = _S0;
          }
          while (a9 > (double)v77);
          ++v76;
          v47 += v48;
          v45 += v43;
        }
        while (a10 > (double)v76);
      }
    }
    else
    {
      v65 = 0;
      if ((v30 & 1) != 0)
      {
        LOWORD(v38) = 32256;
        do
        {
          v66 = 0;
          do
          {
            _S2 = *(float *)&v45[4 * v66];
            v68 = *(float *)&v46[4 * v66];
            if (_S2 < v28 || _S2 > v25)
              v68 = 10.0;
            __asm { FCVT            H2, S2 }
            if (v68 >= v22)
              _S2 = v38;
            *(_WORD *)&v47[2 * v66++] = LOWORD(_S2);
          }
          while (a9 > (double)v66);
          ++v65;
          v47 += v48;
          v46 += v42;
          v45 += v43;
        }
        while (a10 > (double)v65);
      }
      else
      {
        do
        {
          v70 = 0;
          do
          {
            _S0 = *(_DWORD *)&v45[4 * v70];
            __asm { FCVT            H0, S0 }
            *(_WORD *)&v47[2 * v70++] = _S0;
          }
          while (a9 > (double)v70);
          ++v65;
          v47 += v48;
          v45 += v43;
        }
        while (a10 > (double)v65);
      }
    }
  }
LABEL_72:
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(a2, 1uLL);
  if (a4)
    CVPixelBufferUnlockBaseAddress(a4, 0);

}

void sub_20B656360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void filterDepthAndUncertainty<float,float,true>(__CVBuffer *a1, __CVBuffer *a2, __CVBuffer *a3, __CVBuffer *a4, void *a5, void *a6, double a7, double a8, double a9, double a10)
{
  id v19;
  void *v20;
  float v21;
  float v22;
  void *v23;
  float v24;
  float v25;
  void *v26;
  float v27;
  float v28;
  void *v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  BOOL v34;
  void *v35;
  unsigned int v36;
  CGRect *v37;
  char *data;
  size_t rowBytes;
  char v40;
  size_t v41;
  size_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  float *v46;
  size_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  float v55;
  float v56;
  int v58;
  float v59;
  unint64_t v60;
  unint64_t v61;
  float v62;
  float v63;
  int v65;
  float v66;
  unint64_t v67;
  unint64_t v68;
  float v69;
  float v70;
  BOOL v71;
  float v72;
  unint64_t v73;
  unint64_t v74;
  float v75;
  float v76;
  float v77;
  id v78;
  vImage_Buffer v79;
  vImage_Buffer v80;
  vImage_Buffer v81;
  vImage_Buffer v82;

  v78 = a5;
  v19 = a6;
  objc_msgSend(v19, "pipelineParameters");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "uncertaintyThreshold");
  v22 = v21;

  objc_msgSend(v19, "pipelineParameters");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "maxDepthThresholdForInvalidUncertainty");
  v25 = v24;

  objc_msgSend(v19, "pipelineParameters");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "minDepthThresholdForInvalidUncertainty");
  v28 = v27;

  objc_msgSend(v19, "pipelineParameters");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = objc_msgSend(v29, "outputHighConfidencePixelsOnly");

  if (v78)
  {
    v31 = 0;
    v32 = 0;
    while (1)
    {
      v33 = objc_msgSend(v78, "length");
      v34 = v31 >= v33;
      if (v31 >= v33)
        break;
      if (*(float *)(objc_msgSend(v78, "confidences") + 4 * v31) > 0.0)
      {
        objc_msgSend(v19, "pipelineParameters");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        v36 = objc_msgSend(v35, "minRequiredJasperPoints");
        ++v32;

        if (v32 >= v36)
        {
          v34 = 0;
          break;
        }
      }
      ++v31;
    }
  }
  else
  {
    v34 = 1;
  }
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(a2, 1uLL);
  CVPixelBufferLockBaseAddress(a3, 0);
  if (a4)
    CVPixelBufferLockBaseAddress(a4, 0);
  memset(&v82, 0, sizeof(v82));
  v37 = (CGRect *)MEMORY[0x24BDBF090];
  PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x24BDBF090], &v82);
  memset(&v81, 0, sizeof(v81));
  PixelBufferUtils::asVImageBuffer(a2, *v37, &v81);
  memset(&v80, 0, sizeof(v80));
  PixelBufferUtils::asVImageBuffer(a3, *v37, &v80);
  if (a4)
  {
    PixelBufferUtils::asVImageBuffer(a4, *v37, &v79);
    data = (char *)v79.data;
    rowBytes = v79.rowBytes;
    if (a10 <= 0.0)
      goto LABEL_81;
  }
  else
  {
    data = 0;
    rowBytes = 0;
    if (a10 <= 0.0)
      goto LABEL_81;
  }
  if (v22 <= 10.0)
    v40 = v30;
  else
    v40 = 0;
  if (a9 > 0.0)
  {
    v41 = v81.rowBytes;
    v42 = v82.rowBytes;
    v43 = 4 * (unint64_t)a7;
    v44 = (char *)v82.data + v82.rowBytes * (unint64_t)a8 + v43;
    v45 = (char *)v81.data + v81.rowBytes * (unint64_t)a8 + v43;
    v46 = (float *)v80.data;
    v47 = v80.rowBytes;
    if (a4)
    {
      if (v34)
      {
        if ((v40 & 1) != 0)
        {
          v48 = 0;
          do
          {
            v49 = 0;
            do
            {
              v50 = v49;
              v46[v50] = NAN;
              *(_DWORD *)&data[v50 * 4] = 1092616192;
              ++v49;
            }
            while (a9 > (double)v49);
            ++v48;
            data += rowBytes;
            v46 = (float *)((char *)v46 + v47);
          }
          while (a10 > (double)v48);
        }
        else
        {
          v67 = 0;
          do
          {
            v68 = 0;
            do
            {
              v69 = *(float *)&v44[4 * v68];
              v70 = 1.0 / v69;
              v71 = v69 == 0.0;
              v72 = NAN;
              if (!v71)
                v72 = v70;
              v46[v68] = v72;
              *(_DWORD *)&data[4 * v68++] = 1092616192;
            }
            while (a9 > (double)v68);
            ++v67;
            data += rowBytes;
            v46 = (float *)((char *)v46 + v47);
            v44 += v42;
          }
          while (a10 > (double)v67);
        }
      }
      else
      {
        v53 = 0;
        do
        {
          v54 = 0;
          do
          {
            v55 = *(float *)&v44[4 * v54];
            v56 = *(float *)&v45[4 * v54];
            if (v55 < v28 || v55 > v25)
              v56 = 10.0;
            if (v56 >= v22)
              v58 = v30;
            else
              v58 = 0;
            if (v55 == 0.0)
              v58 = 1;
            v59 = 1.0 / v55;
            if (v58)
              v59 = NAN;
            v46[v54] = v59;
            *(float *)&data[4 * v54++] = v56;
          }
          while (a9 > (double)v54);
          ++v53;
          data += rowBytes;
          v46 = (float *)((char *)v46 + v47);
          v45 += v41;
          v44 += v42;
        }
        while (a10 > (double)v53);
      }
    }
    else if (v34)
    {
      if ((v40 & 1) != 0)
      {
        v51 = 0;
        do
        {
          v52 = 0;
          do
            v46[v52++] = NAN;
          while (a9 > (double)v52);
          ++v51;
          v46 = (float *)((char *)v46 + v47);
        }
        while (a10 > (double)v51);
      }
      else
      {
        v73 = 0;
        do
        {
          v74 = 0;
          do
          {
            v75 = *(float *)&v44[4 * v74];
            v76 = 1.0 / v75;
            v71 = v75 == 0.0;
            v77 = NAN;
            if (!v71)
              v77 = v76;
            v46[v74++] = v77;
          }
          while (a9 > (double)v74);
          ++v73;
          v46 = (float *)((char *)v46 + v47);
          v44 += v42;
        }
        while (a10 > (double)v73);
      }
    }
    else
    {
      v60 = 0;
      do
      {
        v61 = 0;
        do
        {
          v62 = *(float *)&v44[4 * v61];
          v63 = *(float *)&v45[4 * v61];
          if (v62 < v28 || v62 > v25)
            v63 = 10.0;
          if (v63 >= v22)
            v65 = v30;
          else
            v65 = 0;
          if (v62 == 0.0)
            v65 = 1;
          v66 = 1.0 / v62;
          if (v65)
            v66 = NAN;
          v46[v61++] = v66;
        }
        while (a9 > (double)v61);
        ++v60;
        v46 = (float *)((char *)v46 + v47);
        v45 += v41;
        v44 += v42;
      }
      while (a10 > (double)v60);
    }
  }
LABEL_81:
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(a2, 1uLL);
  if (a4)
    CVPixelBufferUnlockBaseAddress(a4, 0);

}

void sub_20B6568C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void filterDepthAndUncertainty<float,half,true>(__CVBuffer *a1, __CVBuffer *a2, __CVBuffer *a3, __CVBuffer *a4, void *a5, void *a6, double a7, double a8, double a9, double a10)
{
  id v19;
  void *v20;
  float v21;
  float v22;
  void *v23;
  float v24;
  float v25;
  void *v26;
  float v27;
  float v28;
  void *v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  BOOL v34;
  void *v35;
  unsigned int v36;
  CGRect *v37;
  float v38;
  float v39;
  char *data;
  size_t rowBytes;
  char v42;
  size_t v43;
  size_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  size_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  float v57;
  int v60;
  uint64_t v66;
  unint64_t v68;
  unint64_t v69;
  float v70;
  float v71;
  int v73;
  unint64_t v75;
  unint64_t v76;
  float v77;
  float v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  float v83;
  float v85;
  id v86;
  vImage_Buffer v87;
  vImage_Buffer v88;
  vImage_Buffer v89;
  vImage_Buffer v90;

  v86 = a5;
  v19 = a6;
  objc_msgSend(v19, "pipelineParameters");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "uncertaintyThreshold");
  v22 = v21;

  objc_msgSend(v19, "pipelineParameters");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "maxDepthThresholdForInvalidUncertainty");
  v25 = v24;

  objc_msgSend(v19, "pipelineParameters");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "minDepthThresholdForInvalidUncertainty");
  v28 = v27;

  objc_msgSend(v19, "pipelineParameters");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = objc_msgSend(v29, "outputHighConfidencePixelsOnly");

  if (v86)
  {
    v31 = 0;
    v32 = 0;
    while (1)
    {
      v33 = objc_msgSend(v86, "length");
      v34 = v31 >= v33;
      if (v31 >= v33)
        break;
      if (*(float *)(objc_msgSend(v86, "confidences") + 4 * v31) > 0.0)
      {
        objc_msgSend(v19, "pipelineParameters");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        v36 = objc_msgSend(v35, "minRequiredJasperPoints");
        ++v32;

        if (v32 >= v36)
        {
          v34 = 0;
          break;
        }
      }
      ++v31;
    }
  }
  else
  {
    v34 = 1;
  }
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(a2, 1uLL);
  CVPixelBufferLockBaseAddress(a3, 0);
  if (a4)
    CVPixelBufferLockBaseAddress(a4, 0);
  memset(&v90, 0, sizeof(v90));
  v37 = (CGRect *)MEMORY[0x24BDBF090];
  PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x24BDBF090], &v90);
  memset(&v89, 0, sizeof(v89));
  PixelBufferUtils::asVImageBuffer(a2, *v37, &v89);
  memset(&v88, 0, sizeof(v88));
  PixelBufferUtils::asVImageBuffer(a3, *v37, &v88);
  if (a4)
  {
    PixelBufferUtils::asVImageBuffer(a4, *v37, &v87);
    data = (char *)v87.data;
    rowBytes = v87.rowBytes;
    if (a10 <= 0.0)
      goto LABEL_83;
  }
  else
  {
    data = 0;
    rowBytes = 0;
    if (a10 <= 0.0)
      goto LABEL_83;
  }
  if (v22 <= 10.0)
    v42 = v30;
  else
    v42 = 0;
  if (a9 > 0.0)
  {
    v43 = v89.rowBytes;
    v44 = v90.rowBytes;
    v45 = 4 * (unint64_t)a7;
    v46 = (char *)v90.data + v90.rowBytes * (unint64_t)a8 + v45;
    v47 = (char *)v89.data + v89.rowBytes * (unint64_t)a8 + v45;
    v48 = (char *)v88.data;
    v49 = v88.rowBytes;
    if (a4)
    {
      if (v34)
      {
        if ((v42 & 1) != 0)
        {
          v50 = 0;
          do
          {
            v51 = 0;
            do
            {
              v52 = 2 * v51;
              *(_WORD *)&v48[v52] = 32256;
              *(_WORD *)&data[v52] = 18688;
              ++v51;
            }
            while (a9 > (double)v51);
            ++v50;
            data += rowBytes;
            v48 += v49;
          }
          while (a10 > (double)v50);
        }
        else
        {
          v75 = 0;
          LOWORD(v38) = 32256;
          do
          {
            v76 = 0;
            do
            {
              v77 = *(float *)&v46[4 * v76];
              _S4 = 1.0 / v77;
              __asm { FCVT            H4, S4 }
              if (v77 == 0.0)
                v79 = v38;
              else
                v79 = _S4;
              v80 = 2 * v76;
              *(_WORD *)&v48[v80] = LOWORD(v79);
              *(_WORD *)&data[v80] = 18688;
              ++v76;
            }
            while (a9 > (double)v76);
            ++v75;
            data += rowBytes;
            v48 += v49;
            v46 += v44;
          }
          while (a10 > (double)v75);
        }
      }
      else
      {
        v55 = 0;
        LOWORD(v39) = 32256;
        do
        {
          v56 = 0;
          do
          {
            v57 = *(float *)&v46[4 * v56];
            _S4 = *(float *)&v47[4 * v56];
            if (v57 < v28 || v57 > v25)
              _S4 = 10.0;
            if (_S4 >= v22)
              v60 = v30;
            else
              v60 = 0;
            if (v57 == 0.0)
              v60 = 1;
            _S3 = 1.0 / v57;
            __asm { FCVT            H3, S3 }
            if (v60)
              _S3 = v39;
            v66 = 2 * v56;
            *(_WORD *)&v48[v66] = LOWORD(_S3);
            __asm { FCVT            H3, S4 }
            *(_WORD *)&data[v66] = _H3;
            ++v56;
          }
          while (a9 > (double)v56);
          ++v55;
          data += rowBytes;
          v48 += v49;
          v47 += v43;
          v46 += v44;
        }
        while (a10 > (double)v55);
      }
    }
    else if (v34)
    {
      if ((v42 & 1) != 0)
      {
        v53 = 0;
        do
        {
          v54 = 0;
          do
            *(_WORD *)&v48[2 * v54++] = 32256;
          while (a9 > (double)v54);
          ++v53;
          v48 += v49;
        }
        while (a10 > (double)v53);
      }
      else
      {
        v81 = 0;
        LOWORD(v38) = 32256;
        do
        {
          v82 = 0;
          do
          {
            v83 = *(float *)&v46[4 * v82];
            _S3 = 1.0 / v83;
            __asm { FCVT            H3, S3 }
            if (v83 == 0.0)
              v85 = v38;
            else
              v85 = _S3;
            *(_WORD *)&v48[2 * v82++] = LOWORD(v85);
          }
          while (a9 > (double)v82);
          ++v81;
          v48 += v49;
          v46 += v44;
        }
        while (a10 > (double)v81);
      }
    }
    else
    {
      v68 = 0;
      LOWORD(v39) = 32256;
      do
      {
        v69 = 0;
        do
        {
          v70 = *(float *)&v46[4 * v69];
          v71 = *(float *)&v47[4 * v69];
          if (v70 < v28 || v70 > v25)
            v71 = 10.0;
          if (v71 >= v22)
            v73 = v30;
          else
            v73 = 0;
          if (v70 == 0.0)
            v73 = 1;
          _S3 = 1.0 / v70;
          __asm { FCVT            H3, S3 }
          if (v73)
            _S3 = v39;
          *(_WORD *)&v48[2 * v69++] = LOWORD(_S3);
        }
        while (a9 > (double)v69);
        ++v68;
        v48 += v49;
        v47 += v43;
        v46 += v44;
      }
      while (a10 > (double)v68);
    }
  }
LABEL_83:
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(a2, 1uLL);
  if (a4)
    CVPixelBufferUnlockBaseAddress(a4, 0);

}

void sub_20B656E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void filterDepthAndUncertainty<half,float,false>(__CVBuffer *a1, __CVBuffer *a2, __CVBuffer *a3, __CVBuffer *a4, void *a5, void *a6, double a7, double a8, double a9, double a10)
{
  id v19;
  void *v20;
  int v21;
  void *v23;
  int v24;
  void *v26;
  int v27;
  void *v29;
  unsigned __int8 v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  _BOOL4 v34;
  void *v35;
  unsigned int v36;
  CGRect *v37;
  int v38;
  char *data;
  size_t rowBytes;
  unsigned __int8 v47;
  size_t v50;
  size_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  size_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v65;
  uint64_t v71;
  unint64_t v72;
  unint64_t v75;
  unint64_t v81;
  unint64_t v84;
  unint64_t v85;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  id v93;
  vImage_Buffer v94;
  vImage_Buffer v95;
  vImage_Buffer v96;
  vImage_Buffer v97;

  v93 = a5;
  v19 = a6;
  objc_msgSend(v19, "pipelineParameters");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "uncertaintyThreshold");
  _S12 = v21;

  objc_msgSend(v19, "pipelineParameters");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "maxDepthThresholdForInvalidUncertainty");
  _S13 = v24;

  objc_msgSend(v19, "pipelineParameters");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "minDepthThresholdForInvalidUncertainty");
  _S14 = v27;

  objc_msgSend(v19, "pipelineParameters");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = objc_msgSend(v29, "outputHighConfidencePixelsOnly");

  if (v93)
  {
    v31 = 0;
    v32 = 0;
    while (1)
    {
      v33 = objc_msgSend(v93, "length");
      v34 = v31 >= v33;
      if (v31 >= v33)
        break;
      if (*(float *)(objc_msgSend(v93, "confidences") + 4 * v31) > 0.0)
      {
        objc_msgSend(v19, "pipelineParameters");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        v36 = objc_msgSend(v35, "minRequiredJasperPoints");
        ++v32;

        if (v32 >= v36)
        {
          v34 = 0;
          break;
        }
      }
      ++v31;
    }
  }
  else
  {
    v34 = 1;
  }
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(a2, 1uLL);
  CVPixelBufferLockBaseAddress(a3, 0);
  if (a4)
    CVPixelBufferLockBaseAddress(a4, 0);
  memset(&v97, 0, sizeof(v97));
  v37 = (CGRect *)MEMORY[0x24BDBF090];
  PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x24BDBF090], &v97);
  memset(&v96, 0, sizeof(v96));
  PixelBufferUtils::asVImageBuffer(a2, *v37, &v96);
  memset(&v95, 0, sizeof(v95));
  PixelBufferUtils::asVImageBuffer(a3, *v37, &v95);
  if (a4)
  {
    PixelBufferUtils::asVImageBuffer(a4, *v37, &v94);
    data = (char *)v94.data;
    rowBytes = v94.rowBytes;
    if (a10 <= 0.0)
      goto LABEL_72;
  }
  else
  {
    data = 0;
    rowBytes = 0;
    if (a10 <= 0.0)
      goto LABEL_72;
  }
  __asm
  {
    FCVT            H0, S12
    FCVT            S0, H0
  }
  if (_S0 <= 10.0)
    v47 = v30;
  else
    v47 = 0;
  if (a9 > 0.0)
  {
    __asm
    {
      FCVT            H1, S13
      FCVT            H2, S14
    }
    v50 = v96.rowBytes;
    v51 = v97.rowBytes;
    v52 = 2 * (unint64_t)a7;
    v53 = (char *)v97.data + v97.rowBytes * (unint64_t)a8 + v52;
    v54 = (char *)v96.data + v96.rowBytes * (unint64_t)a8 + v52;
    v55 = (char *)v95.data;
    v56 = v95.rowBytes;
    if (a4)
    {
      if (v34)
      {
        if ((v47 & 1) != 0)
        {
          v57 = 0;
          do
          {
            v58 = 0;
            do
            {
              v59 = 4 * v58;
              *(_DWORD *)&v55[v59] = 2143289344;
              *(_DWORD *)&data[v59] = 1092616192;
              ++v58;
            }
            while (a9 > (double)v58);
            ++v57;
            data += rowBytes;
            v55 += v56;
          }
          while (a10 > (double)v57);
        }
        else
        {
          v84 = 0;
          do
          {
            v85 = 0;
            do
            {
              _H0 = *(_WORD *)&v53[2 * v85];
              __asm { FCVT            S0, H0 }
              v88 = 4 * v85;
              *(_DWORD *)&v55[v88] = _S0;
              *(_DWORD *)&data[v88] = 1092616192;
              ++v85;
            }
            while (a9 > (double)v85);
            ++v84;
            data += rowBytes;
            v55 += v56;
            v53 += v51;
          }
          while (a10 > (double)v84);
        }
      }
      else
      {
        v62 = 0;
        __asm
        {
          FCVT            S1, H1
          FCVT            S2, H2
        }
        LOWORD(v38) = 18688;
        do
        {
          v65 = 0;
          do
          {
            _H4 = *(_WORD *)&v53[2 * v65];
            LOWORD(_S5) = *(_WORD *)&v54[2 * v65];
            __asm { FCVT            S4, H4 }
            if (_S4 < _S2 || _S4 > _S1)
              _S5 = v38;
            __asm { FCVT            S5, H5 }
            if ((v30 & (_S5 >= _S0)) != 0)
              _S4 = NAN;
            v71 = 4 * v65;
            *(float *)&v55[v71] = _S4;
            *(float *)&data[v71] = _S5;
            ++v65;
          }
          while (a9 > (double)v65);
          ++v62;
          data += rowBytes;
          v55 += v56;
          v54 += v50;
          v53 += v51;
        }
        while (a10 > (double)v62);
      }
    }
    else if (v34)
    {
      if ((v47 & 1) != 0)
      {
        v60 = 0;
        do
        {
          v61 = 0;
          do
            *(_DWORD *)&v55[4 * v61++] = 2143289344;
          while (a9 > (double)v61);
          ++v60;
          v55 += v56;
        }
        while (a10 > (double)v60);
      }
      else
      {
        v89 = 0;
        do
        {
          v90 = 0;
          do
          {
            _H0 = *(_WORD *)&v53[2 * v90];
            __asm { FCVT            S0, H0 }
            *(_DWORD *)&v55[4 * v90++] = _S0;
          }
          while (a9 > (double)v90);
          ++v89;
          v55 += v56;
          v53 += v51;
        }
        while (a10 > (double)v89);
      }
    }
    else
    {
      v72 = 0;
      if ((v30 & 1) != 0)
      {
        __asm
        {
          FCVT            S1, H1
          FCVT            S2, H2
        }
        LOWORD(v38) = 18688;
        do
        {
          v75 = 0;
          do
          {
            _H4 = *(_WORD *)&v53[2 * v75];
            LOWORD(_S5) = *(_WORD *)&v54[2 * v75];
            __asm { FCVT            S4, H4 }
            if (_S4 < _S2 || _S4 > _S1)
              _S5 = v38;
            __asm { FCVT            S5, H5 }
            if (_S5 >= _S0)
              _S4 = NAN;
            *(float *)&v55[4 * v75++] = _S4;
          }
          while (a9 > (double)v75);
          ++v72;
          v55 += v56;
          v54 += v50;
          v53 += v51;
        }
        while (a10 > (double)v72);
      }
      else
      {
        do
        {
          v81 = 0;
          do
          {
            _H0 = *(_WORD *)&v53[2 * v81];
            __asm { FCVT            S0, H0 }
            *(_DWORD *)&v55[4 * v81++] = _S0;
          }
          while (a9 > (double)v81);
          ++v72;
          v55 += v56;
          v53 += v51;
        }
        while (a10 > (double)v72);
      }
    }
  }
LABEL_72:
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(a2, 1uLL);
  if (a4)
    CVPixelBufferUnlockBaseAddress(a4, 0);

}

void sub_20B6573E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void filterDepthAndUncertainty<half,half,false>(__CVBuffer *a1, __CVBuffer *a2, __CVBuffer *a3, __CVBuffer *a4, void *a5, void *a6, double a7, double a8, double a9, double a10)
{
  id v19;
  void *v20;
  int v21;
  void *v23;
  int v24;
  void *v26;
  int v27;
  void *v29;
  char v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  _BOOL4 v34;
  void *v35;
  unsigned int v36;
  CGRect *v37;
  int v38;
  int v39;
  int v40;
  char *data;
  size_t rowBytes;
  char v49;
  size_t v52;
  size_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  size_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v67;
  unint64_t v73;
  unint64_t v76;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v88;
  int v90;
  unint64_t v93;
  unint64_t v94;
  id v95;
  vImage_Buffer v96;
  vImage_Buffer v97;
  vImage_Buffer v98;
  vImage_Buffer v99;

  v95 = a5;
  v19 = a6;
  objc_msgSend(v19, "pipelineParameters");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "uncertaintyThreshold");
  _S12 = v21;

  objc_msgSend(v19, "pipelineParameters");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "maxDepthThresholdForInvalidUncertainty");
  _S13 = v24;

  objc_msgSend(v19, "pipelineParameters");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "minDepthThresholdForInvalidUncertainty");
  _S14 = v27;

  objc_msgSend(v19, "pipelineParameters");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = objc_msgSend(v29, "outputHighConfidencePixelsOnly");

  if (v95)
  {
    v31 = 0;
    v32 = 0;
    while (1)
    {
      v33 = objc_msgSend(v95, "length");
      v34 = v31 >= v33;
      if (v31 >= v33)
        break;
      if (*(float *)(objc_msgSend(v95, "confidences") + 4 * v31) > 0.0)
      {
        objc_msgSend(v19, "pipelineParameters");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        v36 = objc_msgSend(v35, "minRequiredJasperPoints");
        ++v32;

        if (v32 >= v36)
        {
          v34 = 0;
          break;
        }
      }
      ++v31;
    }
  }
  else
  {
    v34 = 1;
  }
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(a2, 1uLL);
  CVPixelBufferLockBaseAddress(a3, 0);
  if (a4)
    CVPixelBufferLockBaseAddress(a4, 0);
  memset(&v99, 0, sizeof(v99));
  v37 = (CGRect *)MEMORY[0x24BDBF090];
  PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x24BDBF090], &v99);
  memset(&v98, 0, sizeof(v98));
  PixelBufferUtils::asVImageBuffer(a2, *v37, &v98);
  memset(&v97, 0, sizeof(v97));
  PixelBufferUtils::asVImageBuffer(a3, *v37, &v97);
  if (a4)
  {
    PixelBufferUtils::asVImageBuffer(a4, *v37, &v96);
    data = (char *)v96.data;
    rowBytes = v96.rowBytes;
    if (a10 <= 0.0)
      goto LABEL_83;
  }
  else
  {
    data = 0;
    rowBytes = 0;
    if (a10 <= 0.0)
      goto LABEL_83;
  }
  __asm
  {
    FCVT            H0, S12
    FCVT            S0, H0
  }
  if (_S0 <= 10.0)
    v49 = v30;
  else
    v49 = 0;
  if (a9 > 0.0)
  {
    __asm
    {
      FCVT            H1, S13
      FCVT            H2, S14
    }
    v52 = v98.rowBytes;
    v53 = v99.rowBytes;
    v54 = 2 * (unint64_t)a7;
    v55 = (char *)v99.data + v99.rowBytes * (unint64_t)a8 + v54;
    v56 = (char *)v98.data + v98.rowBytes * (unint64_t)a8 + v54;
    v57 = (char *)v97.data;
    v58 = v97.rowBytes;
    if (a4)
    {
      if (v34)
      {
        if ((v49 & 1) != 0)
        {
          v59 = 0;
          do
          {
            v60 = 0;
            do
            {
              v61 = 2 * v60;
              *(_WORD *)&v57[v61] = 32256;
              *(_WORD *)&data[v61] = 18688;
              ++v60;
            }
            while (a9 > (double)v60);
            ++v59;
            data += rowBytes;
            v57 += v58;
          }
          while (a10 > (double)v59);
        }
        else
        {
          v83 = 0;
          do
          {
            v84 = 0;
            do
            {
              v85 = 2 * v84;
              *(_WORD *)&v57[v85] = *(_WORD *)&v55[2 * v84];
              *(_WORD *)&data[v85] = 18688;
              ++v84;
            }
            while (a9 > (double)v84);
            ++v83;
            data += rowBytes;
            v57 += v58;
            v55 += v53;
          }
          while (a10 > (double)v83);
        }
      }
      else
      {
        v64 = 0;
        if ((v30 & 1) != 0)
        {
          __asm
          {
            FCVT            S1, H1
            FCVT            S2, H2
          }
          LOWORD(v39) = 18688;
          LOWORD(v40) = 32256;
          do
          {
            v67 = 0;
            do
            {
              LOWORD(_S5) = *(_WORD *)&v55[2 * v67];
              LOWORD(_S6) = *(_WORD *)&v56[2 * v67];
              __asm { FCVT            S7, H5 }
              if (_S7 < _S2 || _S7 > _S1)
                _S6 = v39;
              __asm { FCVT            S7, H6 }
              if (_S7 >= _S0)
                _S5 = v40;
              *(_WORD *)&v57[2 * v67] = _S5;
              *(_WORD *)&data[2 * v67++] = _S6;
            }
            while (a9 > (double)v67);
            ++v64;
            data += rowBytes;
            v57 += v58;
            v56 += v52;
            v55 += v53;
          }
          while (a10 > (double)v64);
        }
        else
        {
          __asm
          {
            FCVT            S0, H1
            FCVT            S1, H2
          }
          LOWORD(v38) = 18688;
          do
          {
            v88 = 0;
            do
            {
              _H3 = *(_WORD *)&v55[2 * v88];
              LOWORD(v90) = *(_WORD *)&v56[2 * v88];
              __asm { FCVT            S5, H3 }
              if (_S5 < _S1 || _S5 > _S0)
                v90 = v38;
              *(_WORD *)&v57[2 * v88] = _H3;
              *(_WORD *)&data[2 * v88++] = v90;
            }
            while (a9 > (double)v88);
            ++v64;
            data += rowBytes;
            v57 += v58;
            v56 += v52;
            v55 += v53;
          }
          while (a10 > (double)v64);
        }
      }
    }
    else if (v34)
    {
      if ((v49 & 1) != 0)
      {
        v62 = 0;
        do
        {
          v63 = 0;
          do
            *(_WORD *)&v57[2 * v63++] = 32256;
          while (a9 > (double)v63);
          ++v62;
          v57 += v58;
        }
        while (a10 > (double)v62);
      }
      else
      {
        v93 = 0;
        do
        {
          v94 = 0;
          do
          {
            *(_WORD *)&v57[2 * v94] = *(_WORD *)&v55[2 * v94];
            ++v94;
          }
          while (a9 > (double)v94);
          ++v93;
          v57 += v58;
          v55 += v53;
        }
        while (a10 > (double)v93);
      }
    }
    else
    {
      v73 = 0;
      if ((v30 & 1) != 0)
      {
        __asm
        {
          FCVT            S1, H1
          FCVT            S2, H2
        }
        LOWORD(v39) = 18688;
        LOWORD(v40) = 32256;
        do
        {
          v76 = 0;
          do
          {
            LOWORD(_S5) = *(_WORD *)&v55[2 * v76];
            LOWORD(_S6) = *(_WORD *)&v56[2 * v76];
            __asm { FCVT            S7, H5 }
            if (_S7 < _S2 || _S7 > _S1)
              _S6 = v39;
            __asm { FCVT            S6, H6 }
            if (_S6 >= _S0)
              _S5 = v40;
            *(_WORD *)&v57[2 * v76++] = _S5;
          }
          while (a9 > (double)v76);
          ++v73;
          v57 += v58;
          v56 += v52;
          v55 += v53;
        }
        while (a10 > (double)v73);
      }
      else
      {
        do
        {
          v82 = 0;
          do
          {
            *(_WORD *)&v57[2 * v82] = *(_WORD *)&v55[2 * v82];
            ++v82;
          }
          while (a9 > (double)v82);
          ++v73;
          v57 += v58;
          v55 += v53;
        }
        while (a10 > (double)v73);
      }
    }
  }
LABEL_83:
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(a2, 1uLL);
  if (a4)
    CVPixelBufferUnlockBaseAddress(a4, 0);

}

void sub_20B6579E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void filterDepthAndUncertainty<half,float,true>(__CVBuffer *a1, __CVBuffer *a2, __CVBuffer *a3, __CVBuffer *a4, void *a5, void *a6, double a7, double a8, double a9, double a10)
{
  id v19;
  void *v20;
  int v21;
  void *v23;
  int v24;
  void *v26;
  int v27;
  void *v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  BOOL v34;
  void *v35;
  unsigned int v36;
  CGRect *v37;
  int v38;
  char *data;
  size_t rowBytes;
  char v47;
  size_t v50;
  size_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  size_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v65;
  int v71;
  uint64_t v74;
  unint64_t v75;
  unint64_t v78;
  int v84;
  unint64_t v87;
  unint64_t v88;
  float v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  float v101;
  id v102;
  vImage_Buffer v103;
  vImage_Buffer v104;
  vImage_Buffer v105;
  vImage_Buffer v106;

  v102 = a5;
  v19 = a6;
  objc_msgSend(v19, "pipelineParameters");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "uncertaintyThreshold");
  _S12 = v21;

  objc_msgSend(v19, "pipelineParameters");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "maxDepthThresholdForInvalidUncertainty");
  _S13 = v24;

  objc_msgSend(v19, "pipelineParameters");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "minDepthThresholdForInvalidUncertainty");
  _S14 = v27;

  objc_msgSend(v19, "pipelineParameters");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = objc_msgSend(v29, "outputHighConfidencePixelsOnly");

  if (v102)
  {
    v31 = 0;
    v32 = 0;
    while (1)
    {
      v33 = objc_msgSend(v102, "length");
      v34 = v31 >= v33;
      if (v31 >= v33)
        break;
      if (*(float *)(objc_msgSend(v102, "confidences") + 4 * v31) > 0.0)
      {
        objc_msgSend(v19, "pipelineParameters");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        v36 = objc_msgSend(v35, "minRequiredJasperPoints");
        ++v32;

        if (v32 >= v36)
        {
          v34 = 0;
          break;
        }
      }
      ++v31;
    }
  }
  else
  {
    v34 = 1;
  }
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(a2, 1uLL);
  CVPixelBufferLockBaseAddress(a3, 0);
  if (a4)
    CVPixelBufferLockBaseAddress(a4, 0);
  memset(&v106, 0, sizeof(v106));
  v37 = (CGRect *)MEMORY[0x24BDBF090];
  PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x24BDBF090], &v106);
  memset(&v105, 0, sizeof(v105));
  PixelBufferUtils::asVImageBuffer(a2, *v37, &v105);
  memset(&v104, 0, sizeof(v104));
  PixelBufferUtils::asVImageBuffer(a3, *v37, &v104);
  if (a4)
  {
    PixelBufferUtils::asVImageBuffer(a4, *v37, &v103);
    data = (char *)v103.data;
    rowBytes = v103.rowBytes;
    if (a10 <= 0.0)
      goto LABEL_81;
  }
  else
  {
    data = 0;
    rowBytes = 0;
    if (a10 <= 0.0)
      goto LABEL_81;
  }
  __asm
  {
    FCVT            H0, S12
    FCVT            S0, H0
  }
  if (_S0 <= 10.0)
    v47 = v30;
  else
    v47 = 0;
  if (a9 > 0.0)
  {
    __asm
    {
      FCVT            H1, S13
      FCVT            H2, S14
    }
    v50 = v105.rowBytes;
    v51 = v106.rowBytes;
    v52 = 2 * (unint64_t)a7;
    v53 = (char *)v106.data + v106.rowBytes * (unint64_t)a8 + v52;
    v54 = (char *)v105.data + v105.rowBytes * (unint64_t)a8 + v52;
    v55 = (char *)v104.data;
    v56 = v104.rowBytes;
    if (a4)
    {
      if (v34)
      {
        if ((v47 & 1) != 0)
        {
          v57 = 0;
          do
          {
            v58 = 0;
            do
            {
              v59 = 4 * v58;
              *(_DWORD *)&v55[v59] = 2143289344;
              *(_DWORD *)&data[v59] = 1092616192;
              ++v58;
            }
            while (a9 > (double)v58);
            ++v57;
            data += rowBytes;
            v55 += v56;
          }
          while (a10 > (double)v57);
        }
        else
        {
          v87 = 0;
          do
          {
            v88 = 0;
            do
            {
              _H1 = *(_WORD *)&v53[2 * v88];
              __asm { FCVT            S1, H1 }
              _S2 = 1.0 / _S1;
              __asm
              {
                FCVT            H2, S2
                FCVT            S2, H2
              }
              _ZF = _S1 == 0.0;
              v93 = NAN;
              if (!_ZF)
                v93 = _S2;
              v94 = 4 * v88;
              *(float *)&v55[v94] = v93;
              *(_DWORD *)&data[v94] = 1092616192;
              ++v88;
            }
            while (a9 > (double)v88);
            ++v87;
            data += rowBytes;
            v55 += v56;
            v53 += v51;
          }
          while (a10 > (double)v87);
        }
      }
      else
      {
        v62 = 0;
        __asm
        {
          FCVT            S1, H1
          FCVT            S2, H2
        }
        LOWORD(v38) = 18688;
        do
        {
          v65 = 0;
          do
          {
            _H5 = *(_WORD *)&v53[2 * v65];
            LOWORD(_S6) = *(_WORD *)&v54[2 * v65];
            __asm { FCVT            S5, H5 }
            if (_S5 < _S2 || _S5 > _S1)
              _S6 = v38;
            __asm { FCVT            S6, H6 }
            if (_S6 >= _S0)
              v71 = v30;
            else
              v71 = 0;
            if (_S5 == 0.0)
              v71 = 1;
            _S5 = 1.0 / _S5;
            __asm
            {
              FCVT            H5, S5
              FCVT            S5, H5
            }
            if (v71)
              _S5 = NAN;
            v74 = 4 * v65;
            *(float *)&v55[v74] = _S5;
            ++v65;
            *(float *)&data[v74] = _S6;
          }
          while (a9 > (double)v65);
          ++v62;
          data += rowBytes;
          v55 += v56;
          v54 += v50;
          v53 += v51;
        }
        while (a10 > (double)v62);
      }
    }
    else if (v34)
    {
      if ((v47 & 1) != 0)
      {
        v60 = 0;
        do
        {
          v61 = 0;
          do
            *(_DWORD *)&v55[4 * v61++] = 2143289344;
          while (a9 > (double)v61);
          ++v60;
          v55 += v56;
        }
        while (a10 > (double)v60);
      }
      else
      {
        v95 = 0;
        do
        {
          v96 = 0;
          do
          {
            _H1 = *(_WORD *)&v53[2 * v96];
            __asm { FCVT            S1, H1 }
            _S2 = 1.0 / _S1;
            __asm
            {
              FCVT            H2, S2
              FCVT            S2, H2
            }
            _ZF = _S1 == 0.0;
            v101 = NAN;
            if (!_ZF)
              v101 = _S2;
            *(float *)&v55[4 * v96++] = v101;
          }
          while (a9 > (double)v96);
          ++v95;
          v55 += v56;
          v53 += v51;
        }
        while (a10 > (double)v95);
      }
    }
    else
    {
      v75 = 0;
      __asm
      {
        FCVT            S1, H1
        FCVT            S2, H2
      }
      LOWORD(v38) = 18688;
      do
      {
        v78 = 0;
        do
        {
          _H5 = *(_WORD *)&v53[2 * v78];
          LOWORD(_S6) = *(_WORD *)&v54[2 * v78];
          __asm { FCVT            S5, H5 }
          if (_S5 < _S2 || _S5 > _S1)
            _S6 = v38;
          __asm { FCVT            S6, H6 }
          if (_S6 >= _S0)
            v84 = v30;
          else
            v84 = 0;
          if (_S5 == 0.0)
            v84 = 1;
          _S5 = 1.0 / _S5;
          __asm
          {
            FCVT            H5, S5
            FCVT            S5, H5
          }
          if (v84)
            _S5 = NAN;
          *(float *)&v55[4 * v78++] = _S5;
        }
        while (a9 > (double)v78);
        ++v75;
        v55 += v56;
        v54 += v50;
        v53 += v51;
      }
      while (a10 > (double)v75);
    }
  }
LABEL_81:
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(a2, 1uLL);
  if (a4)
    CVPixelBufferUnlockBaseAddress(a4, 0);

}

void sub_20B657FB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void filterDepthAndUncertainty<half,half,true>(__CVBuffer *a1, __CVBuffer *a2, __CVBuffer *a3, __CVBuffer *a4, void *a5, void *a6, double a7, double a8, double a9, double a10)
{
  id v19;
  void *v20;
  int v21;
  void *v23;
  int v24;
  void *v26;
  int v27;
  void *v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  BOOL v34;
  void *v35;
  unsigned int v36;
  CGRect *v37;
  int v38;
  float v39;
  char *data;
  size_t rowBytes;
  float v48;
  char v49;
  size_t v52;
  size_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  size_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v67;
  uint64_t v68;
  int v74;
  unint64_t v76;
  unint64_t v79;
  uint64_t v80;
  int v86;
  unint64_t v88;
  unint64_t v89;
  float v93;
  unint64_t v94;
  unint64_t v95;
  float v99;
  id v100;
  vImage_Buffer v101;
  vImage_Buffer v102;
  vImage_Buffer v103;
  vImage_Buffer v104;

  v100 = a5;
  v19 = a6;
  objc_msgSend(v19, "pipelineParameters");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "uncertaintyThreshold");
  _S12 = v21;

  objc_msgSend(v19, "pipelineParameters");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "maxDepthThresholdForInvalidUncertainty");
  _S13 = v24;

  objc_msgSend(v19, "pipelineParameters");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "minDepthThresholdForInvalidUncertainty");
  _S14 = v27;

  objc_msgSend(v19, "pipelineParameters");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = objc_msgSend(v29, "outputHighConfidencePixelsOnly");

  if (v100)
  {
    v31 = 0;
    v32 = 0;
    while (1)
    {
      v33 = objc_msgSend(v100, "length");
      v34 = v31 >= v33;
      if (v31 >= v33)
        break;
      if (*(float *)(objc_msgSend(v100, "confidences") + 4 * v31) > 0.0)
      {
        objc_msgSend(v19, "pipelineParameters");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        v36 = objc_msgSend(v35, "minRequiredJasperPoints");
        ++v32;

        if (v32 >= v36)
        {
          v34 = 0;
          break;
        }
      }
      ++v31;
    }
  }
  else
  {
    v34 = 1;
  }
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(a2, 1uLL);
  CVPixelBufferLockBaseAddress(a3, 0);
  if (a4)
    CVPixelBufferLockBaseAddress(a4, 0);
  memset(&v104, 0, sizeof(v104));
  v37 = (CGRect *)MEMORY[0x24BDBF090];
  PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x24BDBF090], &v104);
  memset(&v103, 0, sizeof(v103));
  PixelBufferUtils::asVImageBuffer(a2, *v37, &v103);
  memset(&v102, 0, sizeof(v102));
  PixelBufferUtils::asVImageBuffer(a3, *v37, &v102);
  if (a4)
  {
    PixelBufferUtils::asVImageBuffer(a4, *v37, &v101);
    data = (char *)v101.data;
    rowBytes = v101.rowBytes;
    if (a10 <= 0.0)
      goto LABEL_83;
  }
  else
  {
    data = 0;
    rowBytes = 0;
    if (a10 <= 0.0)
      goto LABEL_83;
  }
  __asm
  {
    FCVT            H0, S12
    FCVT            S0, H0
  }
  v48 = 10.0;
  if (_S0 <= 10.0)
    v49 = v30;
  else
    v49 = 0;
  if (a9 > 0.0)
  {
    __asm
    {
      FCVT            H1, S13
      FCVT            H2, S14
    }
    v52 = v103.rowBytes;
    v53 = v104.rowBytes;
    v54 = 2 * (unint64_t)a7;
    v55 = (char *)v104.data + v104.rowBytes * (unint64_t)a8 + v54;
    v56 = (char *)v103.data + v103.rowBytes * (unint64_t)a8 + v54;
    v57 = (char *)v102.data;
    v58 = v102.rowBytes;
    if (a4)
    {
      if (v34)
      {
        if ((v49 & 1) != 0)
        {
          v59 = 0;
          do
          {
            v60 = 0;
            do
            {
              v61 = 2 * v60;
              *(_WORD *)&v57[v61] = 32256;
              *(_WORD *)&data[v61] = 18688;
              ++v60;
            }
            while (a9 > (double)v60);
            ++v59;
            data += rowBytes;
            v57 += v58;
          }
          while (a10 > (double)v59);
        }
        else
        {
          v88 = 0;
          LOWORD(v48) = 32256;
          do
          {
            v89 = 0;
            do
            {
              _H3 = *(_WORD *)&v55[2 * v89];
              __asm { FCVT            S3, H3 }
              _S4 = 1.0 / _S3;
              __asm { FCVT            H4, S4 }
              if (_S3 == 0.0)
                v93 = v48;
              else
                v93 = _S4;
              *(_WORD *)&v57[2 * v89] = LOWORD(v93);
              *(_WORD *)&data[2 * v89++] = 18688;
            }
            while (a9 > (double)v89);
            ++v88;
            data += rowBytes;
            v57 += v58;
            v55 += v53;
          }
          while (a10 > (double)v88);
        }
      }
      else
      {
        v64 = 0;
        __asm
        {
          FCVT            S1, H1
          FCVT            S2, H2
        }
        LOWORD(v38) = 18688;
        LOWORD(v39) = 32256;
        do
        {
          v67 = 0;
          do
          {
            v68 = 2 * v67;
            _H6 = *(_WORD *)&v55[2 * v67];
            LOWORD(_S7) = *(_WORD *)&v56[2 * v67];
            __asm { FCVT            S6, H6 }
            if (_S6 < _S2 || _S6 > _S1)
              _S7 = v38;
            __asm { FCVT            S16, H7 }
            if (_S16 >= _S0)
              v74 = v30;
            else
              v74 = 0;
            if (_S6 == 0.0)
              v74 = 1;
            _S6 = 1.0 / _S6;
            __asm { FCVT            H6, S6 }
            if (v74)
              _S6 = v39;
            *(_WORD *)&v57[2 * v67++] = LOWORD(_S6);
            *(_WORD *)&data[v68] = _S7;
          }
          while (a9 > (double)v67);
          ++v64;
          data += rowBytes;
          v57 += v58;
          v56 += v52;
          v55 += v53;
        }
        while (a10 > (double)v64);
      }
    }
    else if (v34)
    {
      if ((v49 & 1) != 0)
      {
        v62 = 0;
        do
        {
          v63 = 0;
          do
            *(_WORD *)&v57[2 * v63++] = 32256;
          while (a9 > (double)v63);
          ++v62;
          v57 += v58;
        }
        while (a10 > (double)v62);
      }
      else
      {
        v94 = 0;
        LOWORD(v48) = 32256;
        do
        {
          v95 = 0;
          do
          {
            _H2 = *(_WORD *)&v55[2 * v95];
            __asm { FCVT            S2, H2 }
            _S3 = 1.0 / _S2;
            __asm { FCVT            H3, S3 }
            if (_S2 == 0.0)
              v99 = v48;
            else
              v99 = _S3;
            *(_WORD *)&v57[2 * v95++] = LOWORD(v99);
          }
          while (a9 > (double)v95);
          ++v94;
          v57 += v58;
          v55 += v53;
        }
        while (a10 > (double)v94);
      }
    }
    else
    {
      v76 = 0;
      __asm
      {
        FCVT            S1, H1
        FCVT            S2, H2
      }
      LOWORD(v38) = 18688;
      LOWORD(v39) = 32256;
      do
      {
        v79 = 0;
        do
        {
          v80 = 2 * v79;
          _H6 = *(_WORD *)&v55[2 * v79];
          __asm { FCVT            S6, H6 }
          LOWORD(_S7) = *(_WORD *)&v56[2 * v79];
          if (_S6 < _S2 || _S6 > _S1)
            _S7 = v38;
          __asm { FCVT            S7, H7 }
          if (_S7 >= _S0)
            v86 = v30;
          else
            v86 = 0;
          if (_S6 == 0.0)
            v86 = 1;
          _S6 = 1.0 / _S6;
          __asm { FCVT            H6, S6 }
          if (v86)
            _S6 = v39;
          ++v79;
          *(_WORD *)&v57[v80] = LOWORD(_S6);
        }
        while (a9 > (double)v79);
        ++v76;
        v57 += v58;
        v56 += v52;
        v55 += v53;
      }
      while (a10 > (double)v76);
    }
  }
LABEL_83:
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(a2, 1uLL);
  if (a4)
    CVPixelBufferUnlockBaseAddress(a4, 0);

}

void sub_20B65857C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t getMaxOneShotEventsCount(void)
{
  return 15;
}

uint64_t getDateDiff(NSDate *a1, NSDate *a2, uint64_t a3)
{
  NSDate *v5;
  NSDate *v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;

  v5 = a1;
  v6 = a2;
  v7 = objc_alloc(MEMORY[0x24BDBCE48]);
  v8 = (void *)objc_msgSend(v7, "initWithCalendarIdentifier:", *MEMORY[0x24BDBCA18]);
  objc_msgSend(v8, "components:fromDate:toDate:options:", a3, v5, v6, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "day");

  return v10;
}

void sub_20B658680(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t fireOneShotLargeRotationEventIfDetected(void *a1, unsigned int a2, void *a3, void *a4, float a5, float a6)
{
  id v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v16;
  NSDate *v17;
  NSDate *v18;
  NSDate *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint8_t buf[4];
  uint64_t v29;
  __int16 v30;
  double v31;
  __int16 v32;
  double v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v11 = a1;
  v12 = a3;
  v13 = a4;
  v14 = v13;
  if (fabsf(a5) <= a6 || v13 == 0)
    goto LABEL_21;
  if ((a2 & 0x80000000) != 0)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_20B62B000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "fireOneShotLargeRotationEventIfDetected: fail to understand history when tried to fire one shot large tolerance", buf, 2u);
    }
    goto LABEL_21;
  }
  v16 = a2;
  objc_msgSend(v13, "objectAtIndexedSubscript:", a2);
  v17 = (NSDate *)objc_claimAutoreleasedReturnValue();
  if (!v17)
  {
    v19 = 0;
LABEL_20:

LABEL_21:
    v22 = 0;
    goto LABEL_22;
  }
  objc_msgSend(MEMORY[0x24BDBCE60], "distantPast");
  v18 = (NSDate *)objc_claimAutoreleasedReturnValue();

  if (v17 != v18 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    v29 = (uint64_t)v11;
    v30 = 2112;
    v31 = *(double *)&v17;
    _os_log_impl(&dword_20B62B000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "fireOneShotLargeRotationEventIfDetected: this event of large tolerance for %@ is not the first and it wa last sean at %@", buf, 0x16u);
  }
  objc_msgSend(MEMORY[0x24BDBCE60], "now");
  v19 = (NSDate *)objc_claimAutoreleasedReturnValue();
  if (getDateDiff(v17, v19, 16) < 60)
    goto LABEL_20;
  objc_msgSend(v14, "setObject:atIndexedSubscript:", v19, v16);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    v29 = (uint64_t)v17;
    v30 = 2112;
    v31 = *(double *)&v19;
    _os_log_impl(&dword_20B62B000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "fireOneShotLargeRotationEventIfDetected: time since last large rotation event is >= then 2 monthes, last event time %@, current event time %@", buf, 0x16u);
  }

  v25 = MEMORY[0x24BDAC760];
  v20 = v11;
  v26 = v20;
  *(float *)&v27 = a6;
  if ((AnalyticsSendEventLazy() & 1) != 0)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      v21 = objc_msgSend(objc_retainAutorelease(v20), "UTF8String", v25, 3221225472, ___Z39fireOneShotLargeRotationEventIfDetectedPK8NSStringff12OneShotIndexPS_P14NSMutableArray_block_invoke, &unk_24C4215F8, v20, v27);
      *(_DWORD *)buf = 136315650;
      v29 = v21;
      v30 = 2048;
      v31 = a5;
      v32 = 2048;
      v33 = a6;
      _os_log_impl(&dword_20B62B000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "fireOneShotLargeRotationEventIfDetected: rotation diff %s compare to factory %f > %f fired", buf, 0x20u);
    }

    goto LABEL_21;
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    v24 = objc_msgSend(objc_retainAutorelease(v20), "UTF8String", v25, 3221225472, ___Z39fireOneShotLargeRotationEventIfDetectedPK8NSStringff12OneShotIndexPS_P14NSMutableArray_block_invoke, &unk_24C4215F8, v20, v27);
    *(_DWORD *)buf = 136315394;
    v29 = v24;
    v30 = 2048;
    v31 = a6;
    _os_log_error_impl(&dword_20B62B000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "fireOneShotLargeRotationEventIfDetected: rotation diff %s > %f compare to factory event failed to be seant", buf, 0x16u);
  }

  v22 = 0xFFFFFFFFLL;
LABEL_22:

  return v22;
}

void sub_20B658A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

id ___Z39fireOneShotLargeRotationEventIfDetectedPK8NSStringff12OneShotIndexPS_P14NSMutableArray_block_invoke(uint64_t a1, double a2)
{
  _DWORD *v2;
  void *v3;
  double v4;
  void *v5;
  void *v6;
  _QWORD v8[3];
  _QWORD v9[4];

  v9[3] = *MEMORY[0x24BDAC8D0];
  v2 = (_DWORD *)(a1 + 40);
  LODWORD(a2) = *(_DWORD *)(a1 + 40);
  v9[0] = *(_QWORD *)(a1 + 32);
  v8[0] = CFSTR("Axis");
  v8[1] = CFSTR("ToleranceThreshold");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", a2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v9[1] = v3;
  v8[2] = CFSTR("ToleranceThreshold_v2");
  LODWORD(v4) = *v2;
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9[2] = v5;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v9, v8, 3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

void sub_20B658B7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void analyzeOneShotExtremeRotation(float a1, float a2, float a3, NSString *a4, NSMutableArray *a5)
{
  NSMutableArray *v9;
  void *v10;
  NSString *v11;

  v11 = a4;
  v9 = a5;
  v10 = (void *)MEMORY[0x20BD3678C]();
  fireOneShotLargeRotationEventIfDetected(CFSTR("X"), 0, v11, v9, a1, 6.0);
  fireOneShotLargeRotationEventIfDetected(CFSTR("X"), 1u, v11, v9, a1, 12.0);
  fireOneShotLargeRotationEventIfDetected(CFSTR("X"), 2u, v11, v9, a1, 18.0);
  fireOneShotLargeRotationEventIfDetected(CFSTR("X"), 3u, v11, v9, a1, 36.0);
  fireOneShotLargeRotationEventIfDetected(CFSTR("X"), 4u, v11, v9, a1, 60.0);
  fireOneShotLargeRotationEventIfDetected(CFSTR("Y"), 5u, v11, v9, a2, 6.0);
  fireOneShotLargeRotationEventIfDetected(CFSTR("Y"), 6u, v11, v9, a2, 12.0);
  fireOneShotLargeRotationEventIfDetected(CFSTR("Y"), 7u, v11, v9, a2, 18.0);
  fireOneShotLargeRotationEventIfDetected(CFSTR("Y"), 8u, v11, v9, a2, 36.0);
  fireOneShotLargeRotationEventIfDetected(CFSTR("Y"), 9u, v11, v9, a2, 60.0);
  fireOneShotLargeRotationEventIfDetected(CFSTR("Z"), 0xAu, v11, v9, a3, 6.0);
  fireOneShotLargeRotationEventIfDetected(CFSTR("Z"), 0xBu, v11, v9, a3, 12.0);
  fireOneShotLargeRotationEventIfDetected(CFSTR("Z"), 0xCu, v11, v9, a3, 18.0);
  fireOneShotLargeRotationEventIfDetected(CFSTR("Z"), 0xDu, v11, v9, a3, 36.0);
  fireOneShotLargeRotationEventIfDetected(CFSTR("Z"), 0xEu, v11, v9, a3, 60.0);
  objc_autoreleasePoolPop(v10);

}

void sub_20B658E04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_20B658F80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;

  v6 = *(_QWORD **)(v4 - 64);
  if (v6 == (_QWORD *)(v4 - 88))
  {
    v7 = 4;
    v6 = (_QWORD *)(v4 - 88);
  }
  else
  {
    if (!v6)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:

  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__110__function6__funcIZ53__ADWorldToImageProjection_initWithPose_calibration__E3__0NS_9allocatorIS2_EEFNS_6vectorI7CGPointNS3_IS6_EEEERKNS5_IDv3_fNS3_IS9_EEEEEED1Ev(uint64_t a1)
{

  return a1;
}

void _ZNSt3__110__function6__funcIZ53__ADWorldToImageProjection_initWithPose_calibration__E3__0NS_9allocatorIS2_EEFNS_6vectorI7CGPointNS3_IS6_EEEERKNS5_IDv3_fNS3_IS9_EEEEEED0Ev(uint64_t a1)
{

  JUMPOUT(0x20BD36498);
}

_QWORD *_ZNKSt3__110__function6__funcIZ53__ADWorldToImageProjection_initWithPose_calibration__E3__0NS_9allocatorIS2_EEFNS_6vectorI7CGPointNS3_IS6_EEEERKNS5_IDv3_fNS3_IS9_EEEEEE7__cloneEv(uint64_t a1)
{
  _QWORD *v2;
  void *v3;

  v2 = operator new(0x10uLL);
  v3 = *(void **)(a1 + 8);
  *v2 = &off_24C421500;
  v2[1] = v3;
  return v2;
}

id _ZNKSt3__110__function6__funcIZ53__ADWorldToImageProjection_initWithPose_calibration__E3__0NS_9allocatorIS2_EEFNS_6vectorI7CGPointNS3_IS6_EEEERKNS5_IDv3_fNS3_IS9_EEEEEE7__cloneEPNS0_6__baseISE_EE(uint64_t a1, _QWORD *a2)
{
  void *v3;
  id result;

  v3 = *(void **)(a1 + 8);
  *a2 = &off_24C421500;
  result = v3;
  a2[1] = result;
  return result;
}

void _ZNSt3__110__function6__funcIZ53__ADWorldToImageProjection_initWithPose_calibration__E3__0NS_9allocatorIS2_EEFNS_6vectorI7CGPointNS3_IS6_EEEERKNS5_IDv3_fNS3_IS9_EEEEEE7destroyEv(uint64_t a1)
{

}

void _ZNSt3__110__function6__funcIZ53__ADWorldToImageProjection_initWithPose_calibration__E3__0NS_9allocatorIS2_EEFNS_6vectorI7CGPointNS3_IS6_EEEERKNS5_IDv3_fNS3_IS9_EEEEEE18destroy_deallocateEv(id *a1)
{

  operator delete(a1);
}

uint64_t _ZNSt3__110__function6__funcIZ53__ADWorldToImageProjection_initWithPose_calibration__E3__0NS_9allocatorIS2_EEFNS_6vectorI7CGPointNS3_IS6_EEEERKNS5_IDv3_fNS3_IS9_EEEEEEclESD_@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, char **a3@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  char *v9;

  v4 = *(void **)(a1 + 8);
  v6 = *a2;
  v5 = a2[1];
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v7 = v5 - v6;
  v8 = (v5 - v6) >> 4;
  if (v5 == v6)
  {
    v9 = 0;
  }
  else
  {
    if ((v7 & 0x8000000000000000) != 0)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v9 = (char *)operator new(v5 - v6);
    *a3 = v9;
    a3[2] = &v9[16 * v8];
    bzero(v9, v7);
    a3[1] = &v9[v7];
  }
  return objc_msgSend(v4, "project:points:outUndistortedPixels:", v8, v6, v9);
}

void sub_20B659244(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B659494(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B659950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

void sub_20B659C2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B65A0E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_20B65A30C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  MEMORY[0x20BD36498](v3, 0x1020C403903361BLL);

  _Unwind_Resume(a1);
}

void sub_20B65A678(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B65AA98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B65AD00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;

  if (a21 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_20B65B628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  char a66;
  char a67;
  uint64_t a69;
  void *v69;
  uint64_t v70;

  if (v70)
    (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);

  if (a52 < 0)
    operator delete(__p);
  if (a59 < 0)
    operator delete(a54);
  if (a66 < 0)
    operator delete(a61);
  ((void (*)(char *))a69)(&a67);

  _Unwind_Resume(a1);
}

void sub_20B65BBC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  if (v2)
    operator delete(v2);

  _Unwind_Resume(a1);
}

void sub_20B65C070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,void (*a26)(char *))
{
  void *v26;

  operator delete(v26);
  a26(&a24);

  _Unwind_Resume(a1);
}

void sub_20B65C304(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_20B65C35C()
{
  JUMPOUT(0x20B65C350);
}

_QWORD *std::tuple<BOOL,float,float,std::vector<float>,std::vector<float>,std::vector<ADDisparityToDepthFitWorldPoint>>::~tuple(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t _ZNSt3__110__function6__funcIZ92__ADDispartiyToDepthFitEstimator_estimateWithDisparity_calibration_pose_disparityTimestamp__E3__0NS_9allocatorIS2_EEFNS_6vectorI7CGPointNS3_IS6_EEEERKNS5_IDv3_fNS3_IS9_EEEEEED1Ev(uint64_t a1)
{

  return a1;
}

void _ZNSt3__110__function6__funcIZ92__ADDispartiyToDepthFitEstimator_estimateWithDisparity_calibration_pose_disparityTimestamp__E3__0NS_9allocatorIS2_EEFNS_6vectorI7CGPointNS3_IS6_EEEERKNS5_IDv3_fNS3_IS9_EEEEEED0Ev(uint64_t a1)
{

  JUMPOUT(0x20BD36498);
}

_QWORD *_ZNKSt3__110__function6__funcIZ92__ADDispartiyToDepthFitEstimator_estimateWithDisparity_calibration_pose_disparityTimestamp__E3__0NS_9allocatorIS2_EEFNS_6vectorI7CGPointNS3_IS6_EEEERKNS5_IDv3_fNS3_IS9_EEEEEE7__cloneEv(uint64_t a1)
{
  _QWORD *v2;
  void *v3;

  v2 = operator new(0x10uLL);
  v3 = *(void **)(a1 + 8);
  *v2 = &off_24C421548;
  v2[1] = v3;
  return v2;
}

id _ZNKSt3__110__function6__funcIZ92__ADDispartiyToDepthFitEstimator_estimateWithDisparity_calibration_pose_disparityTimestamp__E3__0NS_9allocatorIS2_EEFNS_6vectorI7CGPointNS3_IS6_EEEERKNS5_IDv3_fNS3_IS9_EEEEEE7__cloneEPNS0_6__baseISE_EE(uint64_t a1, _QWORD *a2)
{
  void *v3;
  id result;

  v3 = *(void **)(a1 + 8);
  *a2 = &off_24C421548;
  result = v3;
  a2[1] = result;
  return result;
}

void _ZNSt3__110__function6__funcIZ92__ADDispartiyToDepthFitEstimator_estimateWithDisparity_calibration_pose_disparityTimestamp__E3__0NS_9allocatorIS2_EEFNS_6vectorI7CGPointNS3_IS6_EEEERKNS5_IDv3_fNS3_IS9_EEEEEE7destroyEv(uint64_t a1)
{

}

void _ZNSt3__110__function6__funcIZ92__ADDispartiyToDepthFitEstimator_estimateWithDisparity_calibration_pose_disparityTimestamp__E3__0NS_9allocatorIS2_EEFNS_6vectorI7CGPointNS3_IS6_EEEERKNS5_IDv3_fNS3_IS9_EEEEEE18destroy_deallocateEv(id *a1)
{

  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZ92__ADDispartiyToDepthFitEstimator_estimateWithDisparity_calibration_pose_disparityTimestamp__E3__0NS_9allocatorIS2_EEFNS_6vectorI7CGPointNS3_IS6_EEEERKNS5_IDv3_fNS3_IS9_EEEEEEclESD_(uint64_t a1@<X0>, uint64_t *a2@<X1>, char **a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  char *v9;
  char *v10;
  char *v11;
  id v12;
  double v13;
  void *v14;

  v7 = *a2;
  v6 = a2[1];
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v8 = v6 - v7;
  if (v6 == v7)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
  }
  else
  {
    if (v8 < 0)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v9 = (char *)operator new(v6 - v7);
    *a3 = v9;
    a3[2] = &v9[16 * (v8 >> 4)];
    bzero(v9, v8);
    a3[1] = &v9[v8];
    v10 = (char *)operator new(v8);
    bzero(v10, v8);
    v11 = &v10[v8];
  }
  v12 = objc_alloc(MEMORY[0x24BE05F98]);
  LODWORD(v13) = 1.0;
  v14 = (void *)objc_msgSend(v12, "initWithIntrinsics:cameraToPlatformTransform:pixelSize:referenceDimensions:distortionModel:", 0, 0.0, 0.0, 0.0, *(double *)&_PromotedConst, unk_20B6D39E0, 0.0, unk_20B6D3A00, v13, 0x3FF0000000000000, 0x3FF0000000000000);
  objc_msgSend(v14, "transform:points:toCamera:outPoints:", (a2[1] - *a2) >> 4);
  objc_msgSend(*(id *)(a1 + 8), "project:points:outUndistortedPixels:", (v11 - v10) >> 4, v10, v9);

  if (v10)
    operator delete(v10);
}

void sub_20B65C70C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  *(_QWORD *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void ADDebugUtils::setVerboseLogsEnabled(ADDebugUtils *this)
{
  int v1;
  _DWORD v2[2];
  uint64_t v3;

  v1 = (int)this;
  v3 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    v2[0] = 67109120;
    v2[1] = v1;
    _os_log_impl(&dword_20B62B000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "setting verboseLogs: %d", (uint8_t *)v2, 8u);
  }
  ADDebugUtilsADVerboseLogsEnabled = v1;
}

uint64_t ADDebugUtils::isVerboseLogsEnabled(ADDebugUtils *this)
{
  return ADDebugUtilsADVerboseLogsEnabled;
}

uint64_t debugQuickLookObjectFromCGImage(CGImage *a1)
{
  Class v2;
  SEL v3;

  v2 = NSClassFromString(CFSTR("UIImage"));
  v3 = NSSelectorFromString(CFSTR("imageWithCGImage:"));
  return ((uint64_t (*)(Class, SEL, CGImage *))-[objc_class methodForSelector:](v2, "methodForSelector:", v3))(v2, v3, a1);
}

void sub_20B65C8EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B65C964(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B65CAF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B65CCE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B65CE8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  va_list va;

  va_start(va, a2);

  objc_sync_exit(v2);
  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_20B65D060(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_20B65D10C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_20B65DEE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,char a31)
{
  void *v31;
  void *v32;
  void *v33;
  void *v34;

  objc_sync_exit(v32);
  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)&a31);

  _Unwind_Resume(a1);
}

void sub_20B65E080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)ADDensifiedLiDARFocusAssistExecutor;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_20B65E2B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B65E8CC(_Unwind_Exception *a1, void *a2, ...)
{
  void *v2;
  void *v3;
  va_list va;

  va_start(va, a2);
  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);

  _Unwind_Resume(a1);
}

void sub_20B65ED48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a2);
  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);

  _Unwind_Resume(a1);
}

void sub_20B65EF50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_20B65F2F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_20B65F3B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_20B65F9A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;

  _Unwind_Resume(a1);
}

void sub_20B65FC2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_20B65FD48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B65FF38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_20B660054(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B6600B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B660218(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B660404(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  va_list va;

  va_start(va, a2);

  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_20B6605BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  va_list va;

  va_start(va, a10);

  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_20B66069C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_20B661DD4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_20B661E5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B661EF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B661FAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B6624EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  va_list va;

  va_start(va, a12);

  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_20B662610(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);

  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_20B6626D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)ADJasperColorInFieldCalibrationExecutor;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_20B662BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_20B662F90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a2);

  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  objc_sync_exit(v2);

  _Unwind_Resume(a1);
}

void sub_20B66310C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_20B663240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_20B663ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;

  _Unwind_Resume(a1);
}

void sub_20B664CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  void *v22;
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_20B665574(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B6656F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B665830(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B6659A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B665BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_20B665CFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_20B665EBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_20B666010(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B6660BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_20B666178(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B666254(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t crc32ForFolder(NSString *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  NSString *v13;
  void *v14;
  void *v15;
  _QWORD v16[5];
  id v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  _BYTE v26[128];
  _QWORD v27[3];

  v27[1] = *MEMORY[0x24BDAC8D0];
  v13 = a1;
  objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCF48], "fileURLWithPath:", v13);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = *MEMORY[0x24BDBCC60];
  v27[0] = *MEMORY[0x24BDBCC60];
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v27, 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:", v1, v3, 4, 0);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  v22 = 0;
  v23 = &v22;
  v24 = 0x2020000000;
  v25 = 0;
  v25 = crc32(0, 0, 0);
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v4 = v15;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v19;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v19 != v6)
          objc_enumerationMutation(v4);
        v8 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * v7);
        v17 = 0;
        objc_msgSend(v8, "getResourceValue:forKey:error:", &v17, v2, 0);
        v9 = v17;
        if ((objc_msgSend(v9, "BOOLValue") & 1) == 0)
        {
          objc_msgSend(MEMORY[0x24BDBCE50], "dataWithContentsOfURL:", v8);
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          v16[0] = MEMORY[0x24BDAC760];
          v16[1] = 3221225472;
          v16[2] = ___Z14crc32ForFolderP8NSString_block_invoke;
          v16[3] = &unk_24C421620;
          v16[4] = &v22;
          objc_msgSend(v10, "enumerateByteRangesUsingBlock:", v16);

        }
        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
    }
    while (v5);
  }

  v11 = *((unsigned int *)v23 + 6);
  _Block_object_dispose(&v22, 8);

  return v11;
}

void sub_20B6668E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  void *v28;

  _Block_object_dispose(&a28, 8);
  _Unwind_Resume(a1);
}

uint64_t waitForFolder(NSString *a1, double a2)
{
  NSString *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  double v8;
  double v9;

  v3 = a1;
  objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCE60], "date");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  while (1)
  {
    v6 = objc_msgSend(v4, "fileExistsAtPath:", v3);
    if ((v6 & 1) != 0)
      break;
    objc_msgSend(MEMORY[0x24BDBCE60], "date");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "timeIntervalSinceDate:", v5);
    v9 = v8;

    if (v9 >= a2)
      break;
    objc_msgSend(MEMORY[0x24BDD17F0], "sleepForTimeInterval:", 1.0);
  }

  return v6;
}

void sub_20B666A44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t ___Z18bundleE5mlIfNeededP8NSStringS0_S0_b_block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  void *v6;
  void *v7;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  objc_msgSend(*(id *)(a1 + 32), "contentsOfDirectoryAtPath:error:", *(_QWORD *)(a1 + 40), 0, 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v11;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v11 != v4)
          objc_enumerationMutation(v2);
        v6 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * i);
        if ((objc_msgSend(v6, "isEqualToString:", *(_QWORD *)(a1 + 48)) & 1) == 0)
        {
          v7 = *(void **)(a1 + 32);
          objc_msgSend(*(id *)(a1 + 40), "stringByAppendingPathComponent:", v6);
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v7, "removeItemAtPath:error:", v8, 0);

        }
      }
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v3);
  }

  return rmdir((const char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 56)), "fileSystemRepresentation"));
}

void sub_20B666BC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id prepareAneFlags(NSDictionary *a1, NSString *a2, NSString *a3, int a4)
{
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  NSString *v25;
  NSString *v26;
  NSDictionary *v27;
  void *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];
  void *v34;
  _QWORD v35[3];

  v35[1] = *MEMORY[0x24BDAC8D0];
  v27 = a1;
  v25 = a2;
  v26 = a3;
  objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v28, "setObject:forKeyedSubscript:", MEMORY[0x24BDBD1C8], CFSTR("KernelRewind"));
  -[NSDictionary objectForKeyedSubscript:](v27, "objectForKeyedSubscript:", CFSTR("spatialSplitMode"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "length");

  if (v8)
  {
    -[NSDictionary objectForKeyedSubscript:](v27, "objectForKeyedSubscript:", CFSTR("spatialSplitMode"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "setObject:forKeyedSubscript:", v9, CFSTR("SpatialSplitMode"));

  }
  objc_msgSend(v28, "setObject:forKeyedSubscript:", MEMORY[0x24BDBD1C8], CFSTR("ScanWeightsForCompression"));
  -[NSDictionary objectForKeyedSubscript:](v27, "objectForKeyedSubscript:", CFSTR("useReductionPerformance"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "BOOLValue");

  if (v11)
    objc_msgSend(v28, "setObject:forKeyedSubscript:", CFSTR("ReductionPerf"), CFSTR("Optimize"));
  if (a4)
  {
    objc_msgSend(v28, "setObject:forKeyedSubscript:", &unk_24C434E60, CFSTR("NeFrequency"));
    objc_msgSend(v28, "setObject:forKeyedSubscript:", &unk_24C434E78, CFSTR("PstateDCSLevel"));
    objc_msgSend(v28, "setObject:forKeyedSubscript:", &unk_24C434E90, CFSTR("PstateSOCLevel"));
    objc_msgSend(v28, "setObject:forKeyedSubscript:", MEMORY[0x24BDBD1C8], CFSTR("EnableContextSwitchEvents"));
  }
  -[NSString lowercaseString](v25, "lowercaseString");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v34 = v12;
  v35[0] = v28;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v35, &v34, 1);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "writeToFile:atomically:", v26, 1);

  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v15 = v28;
  v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
  if (v16)
  {
    v17 = *(_QWORD *)v30;
    do
    {
      for (i = 0; i != v16; ++i)
      {
        if (*(_QWORD *)v30 != v17)
          objc_enumerationMutation(v15);
        v19 = *(_QWORD *)(*((_QWORD *)&v29 + 1) + 8 * i);
        v20 = (void *)MEMORY[0x24BDD17C8];
        objc_msgSend(v15, "objectForKeyedSubscript:", v19);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "stringWithFormat:", CFSTR("%@=%@"), v19, v21);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "addObject:", v22);

      }
      v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
    }
    while (v16);
  }

  objc_msgSend(v14, "componentsJoinedByString:", CFSTR(","));
  v23 = (void *)objc_claimAutoreleasedReturnValue();

  return v23;
}

void sub_20B666F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t compileE5mlBundle(NSString *a1, NSString *a2, int a3, NSString *a4, NSString *a5, NSString *a6)
{
  NSString *v11;
  NSString *v12;
  NSString *v13;
  NSString *v14;
  NSString *v15;
  id v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  NSString *v22;
  void *v23;
  uint64_t v24;
  void *v26;
  NSString *v27;
  void *v28;
  void *v29;
  NSString *v30;
  void *v31;
  int v32;
  NSString *v33;
  __int16 v34;
  void *v35;
  _QWORD v36[8];
  _QWORD v37[13];
  _QWORD v38[11];

  v38[9] = *MEMORY[0x24BDAC8D0];
  v11 = a1;
  v12 = a2;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  v16 = objc_alloc_init(MEMORY[0x24BDD17D8]);
  objc_msgSend(MEMORY[0x24BDBCF48], "fileURLWithPath:", CFSTR("/usr/local/bin/espressoc"));
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "setExecutableURL:", v17);

  if (a3)
  {
    -[NSString pathExtension](v11, "pathExtension");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = objc_msgSend(v18, "isEqualToString:", CFSTR("net"));

    if (v19)
    {
      v38[0] = CFSTR("--e5-require-ane-resident=strict");
      v38[1] = CFSTR("--ane-options-plist");
      v38[2] = v14;
      v38[3] = CFSTR("-i");
      v38[4] = v11;
      v38[5] = CFSTR("-p");
      v38[6] = v13;
      v38[7] = CFSTR("-o");
      v38[8] = v12;
      objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v38, 9);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "setArguments:", v20);
    }
    else
    {
      v37[0] = CFSTR("--mil-entry-points");
      v37[1] = CFSTR("*");
      v37[2] = CFSTR("--e5-compute-units");
      v37[3] = CFSTR("ane");
      v37[4] = CFSTR("--e5-require-ane-resident=strict");
      v37[5] = CFSTR("--ane-options");
      v37[6] = v15;
      v37[7] = CFSTR("-i");
      v37[8] = v11;
      v37[9] = CFSTR("-p");
      v37[10] = v13;
      v37[11] = CFSTR("-o");
      v37[12] = v12;
      objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v37, 13);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "setArguments:", v20);
    }
  }
  else
  {
    v36[0] = CFSTR("--mil-entry-points");
    v36[1] = CFSTR("*");
    v36[2] = CFSTR("-i");
    v36[3] = v11;
    v36[4] = CFSTR("-p");
    v36[5] = CFSTR("universal");
    v36[6] = CFSTR("-o");
    v36[7] = v12;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v36, 8);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setArguments:", v20);
  }

  if (ADDebugUtilsADVerboseLogsEnabled)
  {
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      goto LABEL_10;
    objc_msgSend(v16, "executableURL");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "path");
    v22 = (NSString *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "arguments");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = 138412546;
    v33 = v22;
    v34 = 2112;
    v35 = v23;
    _os_log_impl(&dword_20B62B000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "running %@ with arguments: %@", (uint8_t *)&v32, 0x16u);

  }
  else
  {
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
      goto LABEL_13;
    objc_msgSend(v16, "executableURL");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "path");
    v30 = (NSString *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "arguments");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = 138412546;
    v33 = v30;
    v34 = 2112;
    v35 = v31;
    _os_log_debug_impl(&dword_20B62B000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "running %@ with arguments: %@", (uint8_t *)&v32, 0x16u);

  }
  if (ADDebugUtilsADVerboseLogsEnabled)
  {
LABEL_10:
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      v32 = 138412290;
      v33 = v15;
      _os_log_impl(&dword_20B62B000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "ANE options: %@", (uint8_t *)&v32, 0xCu);
    }
    goto LABEL_15;
  }
LABEL_13:
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v32 = 138412290;
    v33 = v15;
    _os_log_debug_impl(&dword_20B62B000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "ANE options: %@", (uint8_t *)&v32, 0xCu);
  }
LABEL_15:
  if (objc_msgSend(v16, "launchAndReturnError:", 0)
    && (objc_msgSend(v16, "waitUntilExit"), !objc_msgSend(v16, "terminationStatus")))
  {
    v24 = 1;
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(v16, "executableURL");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "path");
      v27 = (NSString *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "arguments");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      v32 = 138543618;
      v33 = v27;
      v34 = 2114;
      v35 = v28;
      _os_log_error_impl(&dword_20B62B000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "failed to run %{public}@ with arguments: %{public}@", (uint8_t *)&v32, 0x16u);

    }
    v24 = 0;
  }

  return v24;
}

void sub_20B667500(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

uint64_t verifyMachoFlags(NSString *a1, NSDictionary *a2)
{
  NSString *v3;
  NSDictionary *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  __CFString *v20;
  uint64_t v21;
  uint64_t v22;
  __CFString *v23;
  void *v24;
  __CFString *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  int v30;
  int v31;
  int v32;
  void *v33;
  int v34;
  _BOOL4 v35;
  NSObject *v36;
  const char *v37;
  void *v38;
  uint8_t buf[4];
  __CFString *v40;
  __int16 v41;
  void *v42;
  _QWORD v43[3];

  v43[2] = *MEMORY[0x24BDAC8D0];
  v3 = a1;
  v4 = a2;
  v5 = objc_alloc_init(MEMORY[0x24BDD17D8]);
  objc_msgSend(MEMORY[0x24BDBCF48], "fileURLWithPath:", CFSTR("/usr/local/bin/zin_ane_dump"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setExecutableURL:", v6);

  v43[0] = CFSTR("-i");
  v43[1] = v3;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v43, 2);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setArguments:", v7);

  objc_msgSend(MEMORY[0x24BDD1740], "pipe");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setStandardOutput:", v8);
  if (objc_msgSend(v5, "launchAndReturnError:", 0))
  {
    objc_msgSend(v5, "waitUntilExit");
    if (!objc_msgSend(v5, "terminationStatus"))
    {
      v11 = objc_alloc(MEMORY[0x24BDD17C8]);
      objc_msgSend(v8, "fileHandleForReading");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "readDataToEndOfFileAndReturnError:", 0);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = (void *)objc_msgSend(v11, "initWithData:encoding:", v13, 4);

      v15 = objc_msgSend(v14, "rangeOfString:options:", CFSTR("\\n\\s*--fspatial-split="), 1024);
      if (v15 == 0x7FFFFFFFFFFFFFFFLL)
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_20B62B000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "unable to find ANE compilation flag SpatialSplitMode", buf, 2u);
        }
        v9 = 0;
        goto LABEL_27;
      }
      objc_msgSend(v14, "substringFromIndex:", v15 + v16);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "substringToIndex:", objc_msgSend(v17, "rangeOfString:", CFSTR("\n")));
      v18 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v18, "stringByReplacingOccurrencesOfString:withString:", CFSTR("-"), &stru_24C421AD8);
      v38 = (void *)objc_claimAutoreleasedReturnValue();

      -[NSDictionary objectForKeyedSubscript:](v4, "objectForKeyedSubscript:", CFSTR("spatialSplitMode"));
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "lowercaseString");
      v20 = (__CFString *)objc_claimAutoreleasedReturnValue();

      if ((-[__CFString isEqualToString:](v20, "isEqualToString:", v38) & 1) == 0
        && (v20 || (objc_msgSend(v38, "isEqualToString:", CFSTR("disabled")) & 1) == 0))
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543618;
          v40 = v20;
          v41 = 2114;
          v42 = v38;
          _os_log_error_impl(&dword_20B62B000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "mismatch in ANE compilation flag SpatialSplitMode between {%{public}@} and {%{public}@}", buf, 0x16u);
        }
        v9 = 0;
        goto LABEL_26;
      }
      v21 = objc_msgSend(v14, "rangeOfString:options:", CFSTR("\\n\\s*--optimize="), 1024);
      if (v21 == 0x7FFFFFFFFFFFFFFFLL)
      {
        v23 = &stru_24C421AD8;
      }
      else
      {
        objc_msgSend(v14, "substringFromIndex:", v21 + v22);
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v27, "substringToIndex:", objc_msgSend(v27, "rangeOfString:", CFSTR("\n")));
        v28 = objc_claimAutoreleasedReturnValue();

        v23 = (__CFString *)v28;
      }
      -[NSDictionary objectForKeyedSubscript:](v4, "objectForKeyedSubscript:", CFSTR("useReductionPerformance"));
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      v30 = objc_msgSend(v29, "BOOLValue");
      v31 = -[__CFString isEqualToString:](v23, "isEqualToString:", CFSTR("reduction-perf"));

      v32 = v30 ^ v31;
      if (v32)
      {
        -[NSDictionary objectForKeyedSubscript:](v4, "objectForKeyedSubscript:", CFSTR("useReductionPerformance"));
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        v34 = objc_msgSend(v33, "BOOLValue");

        v35 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v34)
        {
          if (v35)
          {
            *(_DWORD *)buf = 138543362;
            v40 = v23;
            v36 = MEMORY[0x24BDACB70];
            v37 = "mismatch in ANE compilation flag Optimize. Expected {reduction-perf} and got {%{public}@}";
LABEL_29:
            _os_log_error_impl(&dword_20B62B000, v36, OS_LOG_TYPE_ERROR, v37, buf, 0xCu);
          }
        }
        else if (v35)
        {
          *(_DWORD *)buf = 138543362;
          v40 = v23;
          v36 = MEMORY[0x24BDACB70];
          v37 = "mismatch in ANE compilation flag Optimize. Expected {} and got {%{public}@}";
          goto LABEL_29;
        }
      }

      v9 = v32 ^ 1u;
LABEL_26:

LABEL_27:
      goto LABEL_6;
    }
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    objc_msgSend(v5, "executableURL");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "path");
    v25 = (__CFString *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "arguments");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v40 = v25;
    v41 = 2114;
    v42 = v26;
    _os_log_error_impl(&dword_20B62B000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "failed to run %{public}@ with arguments: %{public}@", buf, 0x16u);

  }
  v9 = 0;
LABEL_6:

  return v9;
}

void sub_20B667AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

uLong ___Z14crc32ForFolderP8NSString_block_invoke(uint64_t a1, const Bytef *a2, int a3, uInt len)
{
  uLong result;

  result = crc32(*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), a2, len);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t AdaptiveCorrection_create(unsigned int a1, _QWORD *a2)
{
  __int128 v3[8];

  memset(v3, 0, sizeof(v3));
  return AdaptiveCorrection_createWithConfig(a1, v3, a2);
}

uint64_t AdaptiveCorrection_createWithConfig(unsigned int a1, __int128 *a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v3 = 0;
  v4 = 4294954516;
  if ((int)a1 >= 1 && a2 && a3)
  {
    v3 = (char *)malloc_type_calloc(1uLL, 0x20E0uLL, 0x1080040D8A15840uLL);
    if (!v3)
      goto LABEL_14;
    v8 = malloc_type_malloc(16 * a1, 0x100004000313F17uLL);
    *((_QWORD *)v3 + 1045) = v8;
    if (!v8)
      goto LABEL_14;
    v9 = malloc_type_malloc(16 * a1, 0x100004000313F17uLL);
    *((_QWORD *)v3 + 1046) = v9;
    if (!v9)
      goto LABEL_14;
    v10 = malloc_type_malloc(16 * a1, 0x100004000313F17uLL);
    *((_QWORD *)v3 + 1047) = v10;
    if (!v10)
      goto LABEL_14;
    v11 = malloc_type_malloc(16 * a1, 0x100004000313F17uLL);
    *((_QWORD *)v3 + 1048) = v11;
    if (!v11)
      goto LABEL_14;
    v12 = malloc_type_malloc(16 * a1, 0x100004000313F17uLL);
    *((_QWORD *)v3 + 1049) = v12;
    if (v12
      && (v13 = malloc_type_malloc(16 * a1, 0x100004000313F17uLL), (*((_QWORD *)v3 + 1050) = v13) != 0)
      && (v14 = malloc_type_malloc(8 * a1, 0x100004000313F17uLL), (*((_QWORD *)v3 + 1051) = v14) != 0))
    {
      v4 = 0;
      *(_DWORD *)v3 = a1;
      v15 = *a2;
      v16 = a2[1];
      v17 = a2[2];
      *(_OWORD *)(v3 + 56) = a2[3];
      *(_OWORD *)(v3 + 40) = v17;
      *(_OWORD *)(v3 + 24) = v16;
      *(_OWORD *)(v3 + 8) = v15;
      v18 = a2[4];
      v19 = a2[5];
      v20 = a2[6];
      *(_OWORD *)(v3 + 120) = a2[7];
      *(_OWORD *)(v3 + 104) = v20;
      *(_OWORD *)(v3 + 88) = v19;
      *(_OWORD *)(v3 + 72) = v18;
      *a3 = v3;
      v3 = 0;
    }
    else
    {
LABEL_14:
      v4 = 4294954510;
    }
  }
  AdaptiveCorrection_destroy((void **)v3);
  return v4;
}

void AdaptiveCorrection_destroy(void **a1)
{
  if (a1)
  {
    free(a1[1045]);
    free(a1[1046]);
    free(a1[1047]);
    free(a1[1048]);
    free(a1[1049]);
    free(a1[1050]);
    free(a1[1051]);
    free(a1);
  }
}

__n128 AdaptiveCorrection_setConfiguration(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  if (a1)
  {
    if (a2)
    {
      v2 = *a2;
      v3 = a2[1];
      v4 = a2[2];
      *(_OWORD *)(a1 + 56) = a2[3];
      *(_OWORD *)(a1 + 40) = v4;
      *(_OWORD *)(a1 + 24) = v3;
      *(_OWORD *)(a1 + 8) = v2;
      result = (__n128)a2[4];
      v6 = a2[5];
      v7 = a2[6];
      *(_OWORD *)(a1 + 120) = a2[7];
      *(_OWORD *)(a1 + 104) = v7;
      *(_OWORD *)(a1 + 88) = v6;
      *(__n128 *)(a1 + 72) = result;
    }
  }
  return result;
}

void AdaptiveCorrection_getStatus(uint64_t a1@<X0>, void *a2@<X8>)
{
  bzero(a2, 0x1E48uLL);
  if (a1)
    memcpy(a2, (const void *)(a1 + 136), 0x1E48uLL);
}

uint64_t AdaptiveCorrection_fullTemporalCorrectionWithDistortion(uint64_t a1, uint64_t a2, uint64_t a3, signed int a4, float64x2_t *a5, float64x2_t *a6, float64x2_t *a7, double a8, double a9, double a10, double a11, int32x4_t a12, int32x4_t a13, double a14, int32x4_t a15)
{
  uint64_t result;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  float v53;
  float v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;

  result = 4294954516;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        if (a4 >= 1)
        {
          if (a7)
          {
            if (a6)
            {
              if (a5)
              {
                if (*(_DWORD *)a1 >= a4)
                {
                  v167 = a5->f64[1];
                  v168 = a5->f64[0];
                  v20 = a5[2].f64[0];
                  v125 = a5[1].f64[1];
                  v126 = a5[1].f64[0];
                  v21 = a5[3].f64[0];
                  v22 = a5[3].f64[1];
                  v123 = a5[4].f64[0];
                  v124 = a5[2].f64[1];
                  v122 = a5[4].f64[1];
                  v166 = a5[5].f64[0];
                  v121 = a5[5].f64[1];
                  v165 = a5[6].f64[0];
                  v119 = a5[7].f64[0];
                  v120 = a5[6].f64[1];
                  v163 = a5[8].f64[0];
                  v164 = a5[7].f64[1];
                  v161 = a5[9].f64[0];
                  v162 = a5[8].f64[1];
                  v159 = a6->f64[0];
                  v160 = a5[9].f64[1];
                  v157 = a6[1].f64[0];
                  v158 = a6->f64[1];
                  v155 = a6[2].f64[0];
                  v156 = a6[1].f64[1];
                  v153 = a6[3].f64[0];
                  v154 = a6[2].f64[1];
                  v151 = a6[4].f64[0];
                  v152 = a6[3].f64[1];
                  v150 = a6[4].f64[1];
                  v149 = a6[5].f64[0];
                  v148 = a6[6].f64[0];
                  v147 = a6[6].f64[1];
                  v146 = a6[7].f64[0];
                  v145 = a6[7].f64[1];
                  v144 = a6[8].f64[0];
                  v143 = a6[8].f64[1];
                  v142 = a6[9].f64[0];
                  v127 = a6[9].f64[1];
                  v128 = a6[5].f64[1];
                  v23 = a7->f64[0];
                  v141 = a7->f64[1];
                  v24 = a7[1].f64[0];
                  v140 = a7[1].f64[1];
                  v25 = a7[2].f64[0];
                  v26 = a7[2].f64[1];
                  v27 = a7[3].f64[0];
                  v139 = a7[3].f64[1];
                  v138 = a7[4].f64[0];
                  v136 = a7[5].f64[0];
                  v137 = a7[4].f64[1];
                  v134 = a7[6].f64[0];
                  v135 = a7[5].f64[1];
                  v132 = a7[7].f64[0];
                  v133 = a7[6].f64[1];
                  v130 = a7[8].f64[0];
                  v131 = a7[7].f64[1];
                  v129 = a7[8].f64[1];
                  result = AdaptiveCorrection_fullCorrectionWithDistortion(a1, a2, a3, a4, a5->f64, a6->f64, a7->f64, v129, v131, a10, a11, a12, a13, a14, a15);
                  if (!(_DWORD)result)
                  {
                    v28 = v22;
                    v29 = v21;
                    v30 = a7->f64[0] - v23;
                    v31 = a7[1].f64[0] - v24;
                    v32 = a7[2].f64[0] - v25;
                    v33 = a7->f64[1] - v141;
                    v34 = a7[1].f64[1] - v140;
                    v35 = a7[2].f64[1] - v26;
                    v36 = a7[3].f64[0] - v27;
                    v37 = a7[3].f64[1] - v139;
                    v38 = a7[4].f64[0] - v138;
                    v81 = a7[4].f64[1] - v137;
                    v82 = a7[5].f64[0] - v136;
                    v83 = a7[5].f64[1] - v135;
                    v84 = a7[6].f64[0] - v134;
                    v85 = a7[6].f64[1] - v133;
                    v86 = a7[7].f64[0] - v132;
                    v87 = a7[7].f64[1] - v131;
                    v88 = a7[8].f64[0] - v130;
                    v89 = a7[8].f64[1] - v129;
                    v90 = a5->f64[1] - v167;
                    v39 = a5[1].f64[0] - v126;
                    v40 = a5[1].f64[1] - v125;
                    v41 = a5->f64[0] - v168;
                    v42 = a5[2].f64[0] - v20;
                    v91 = a5[6].f64[0] - v165;
                    v43 = a5[2].f64[1] - v124;
                    v92 = a5[6].f64[1] - v120;
                    v118 = v29;
                    v44 = a5[3].f64[0] - v29;
                    v93 = a5[7].f64[0] - v119;
                    v45 = a5[3].f64[1] - v28;
                    v94 = a5[7].f64[1] - v164;
                    v46 = a5[4].f64[0] - v123;
                    v95 = a5[8].f64[0] - v163;
                    v47 = a5[4].f64[1] - v122;
                    v96 = a5[8].f64[1] - v162;
                    v48 = a5[5].f64[0] - v166;
                    v97 = a5[9].f64[0] - v161;
                    v49 = a5[5].f64[1] - v121;
                    v99 = a5[9].f64[1] - v160;
                    v100 = a6->f64[1] - v158;
                    v101 = a6[1].f64[0] - v157;
                    v102 = a6[1].f64[1] - v156;
                    v98 = a6->f64[0] - v159;
                    v103 = a6[2].f64[0] - v155;
                    v107 = a6[6].f64[0] - v148;
                    v104 = a6[2].f64[1] - v154;
                    v109 = a6[6].f64[1] - v147;
                    v105 = a6[3].f64[0] - v153;
                    v113 = a6[7].f64[0] - v146;
                    v106 = a6[3].f64[1] - v152;
                    v114 = a6[7].f64[1] - v145;
                    v108 = a6[4].f64[0] - v151;
                    v115 = a6[8].f64[0] - v144;
                    v110 = a6[4].f64[1] - v150;
                    v116 = a6[8].f64[1] - v143;
                    v111 = a6[5].f64[0] - v149;
                    v117 = a6[9].f64[0] - v142;
                    v50 = v128;
                    v112 = a6[5].f64[1] - v128;
                    v51 = v127;
                    v52 = a6[9].f64[1] - v127;
                    if (*(_BYTE *)(a1 + 7888))
                    {
                      v53 = *(float *)(a1 + 128);
                      v54 = 1.0 - v53;
                      v55 = v53;
                      v56 = v54;
                      *(double *)(a1 + 7896) = *(double *)(a1 + 7896) * v55 + v30 * v56;
                      *(double *)(a1 + 7904) = v33 * v56 + *(double *)(a1 + 7904) * v55;
                      *(double *)(a1 + 7912) = v31 * v56 + *(double *)(a1 + 7912) * v55;
                      *(double *)(a1 + 7920) = v34 * v56 + *(double *)(a1 + 7920) * v55;
                      *(double *)(a1 + 7928) = v32 * v56 + *(double *)(a1 + 7928) * v55;
                      *(double *)(a1 + 7936) = v35 * v56 + *(double *)(a1 + 7936) * v55;
                      *(double *)(a1 + 7944) = v36 * v56 + *(double *)(a1 + 7944) * v55;
                      *(double *)(a1 + 7952) = v37 * v56 + *(double *)(a1 + 7952) * v55;
                      *(double *)(a1 + 7960) = v38 * v56 + *(double *)(a1 + 7960) * v55;
                      *(double *)(a1 + 7968) = v81 * v56 + *(double *)(a1 + 7968) * v55;
                      *(double *)(a1 + 7976) = v82 * v56 + *(double *)(a1 + 7976) * v55;
                      *(double *)(a1 + 7984) = v83 * v56 + *(double *)(a1 + 7984) * v55;
                      *(double *)(a1 + 7992) = v84 * v56 + *(double *)(a1 + 7992) * v55;
                      *(double *)(a1 + 8000) = v85 * v56 + *(double *)(a1 + 8000) * v55;
                      *(double *)(a1 + 8008) = v86 * v56 + *(double *)(a1 + 8008) * v55;
                      *(double *)(a1 + 8016) = v87 * v56 + *(double *)(a1 + 8016) * v55;
                      *(double *)(a1 + 8024) = v88 * v56 + *(double *)(a1 + 8024) * v55;
                      *(double *)(a1 + 8032) = v89 * v56 + *(double *)(a1 + 8032) * v55;
                      *(double *)(a1 + 8040) = v41 * v56 + *(double *)(a1 + 8040) * v55;
                      *(double *)(a1 + 8048) = v90 * v56 + *(double *)(a1 + 8048) * v55;
                      *(double *)(a1 + 8056) = v39 * v56 + *(double *)(a1 + 8056) * v55;
                      *(double *)(a1 + 8064) = v40 * v56 + *(double *)(a1 + 8064) * v55;
                      *(double *)(a1 + 8072) = v42 * v56 + *(double *)(a1 + 8072) * v55;
                      *(double *)(a1 + 8080) = v43 * v56 + *(double *)(a1 + 8080) * v55;
                      *(double *)(a1 + 8088) = v44 * v56 + *(double *)(a1 + 8088) * v55;
                      *(double *)(a1 + 8096) = v45 * v56 + *(double *)(a1 + 8096) * v55;
                      *(double *)(a1 + 8104) = v46 * v56 + *(double *)(a1 + 8104) * v55;
                      *(double *)(a1 + 8112) = v47 * v56 + *(double *)(a1 + 8112) * v55;
                      *(double *)(a1 + 8120) = v48 * v56 + *(double *)(a1 + 8120) * v55;
                      *(double *)(a1 + 8128) = v49 * v56 + *(double *)(a1 + 8128) * v55;
                      *(double *)(a1 + 8136) = v91 * v56 + *(double *)(a1 + 8136) * v55;
                      *(double *)(a1 + 8144) = v92 * v56 + *(double *)(a1 + 8144) * v55;
                      *(double *)(a1 + 8152) = v93 * v56 + *(double *)(a1 + 8152) * v55;
                      *(double *)(a1 + 8160) = v94 * v56 + *(double *)(a1 + 8160) * v55;
                      *(double *)(a1 + 8168) = v95 * v56 + *(double *)(a1 + 8168) * v55;
                      *(double *)(a1 + 8176) = v96 * v56 + *(double *)(a1 + 8176) * v55;
                      *(double *)(a1 + 8184) = v97 * v56 + *(double *)(a1 + 8184) * v55;
                      *(double *)(a1 + 0x2000) = v99 * v56 + *(double *)(a1 + 0x2000) * v55;
                      *(double *)(a1 + 8200) = v98 * v56 + *(double *)(a1 + 8200) * v55;
                      v57 = v101 * v56 + *(double *)(a1 + 8216) * v55;
                      v58 = *(double *)(a1 + 8224);
                      *(double *)(a1 + 8208) = v100 * v56 + *(double *)(a1 + 8208) * v55;
                      v59 = *(double *)(a1 + 8240);
                      v60 = v103 * v56 + *(double *)(a1 + 8232) * v55;
                      v61 = *(double *)(a1 + 8248);
                      *(double *)(a1 + 8216) = v57;
                      v62 = v107 * v56 + *(double *)(a1 + 8296) * v55;
                      v63 = *(double *)(a1 + 8256);
                      v64 = *(double *)(a1 + 8264);
                      *(double *)(a1 + 8224) = v102 * v56 + v58 * v55;
                      v65 = v109 * v56 + *(double *)(a1 + 8304) * v55;
                      v66 = *(double *)(a1 + 8272);
                      v67 = *(double *)(a1 + 8280);
                      *(double *)(a1 + 8232) = v60;
                      v68 = *(double *)(a1 + 8288);
                      v69 = *(double *)(a1 + 8312);
                      v70 = *(double *)(a1 + 8320);
                      *(double *)(a1 + 8240) = v104 * v56 + v59 * v55;
                      v71 = *(double *)(a1 + 8328);
                      v72 = v69 * v55;
                      v73 = v70 * v55;
                      *(double *)(a1 + 8248) = v105 * v56 + v61 * v55;
                      v74 = v71 * v55;
                      v75 = v66 * v55;
                      v76 = *(double *)(a1 + 8336) * v55;
                      *(double *)(a1 + 8256) = v106 * v56 + v63 * v55;
                      v77 = v67 * v55;
                      v78 = *(double *)(a1 + 8344) * v55;
                      v79 = v68 * v55;
                      *(double *)(a1 + 8264) = v108 * v56 + v64 * v55;
                      v80 = *(double *)(a1 + 8352) * v55;
                      v51 = v127;
                      *(double *)(a1 + 8272) = v110 * v56 + v75;
                      *(double *)(a1 + 8280) = v111 * v56 + v77;
                      *(double *)(a1 + 8288) = v112 * v56 + v79;
                      *(double *)(a1 + 8296) = v62;
                      *(double *)(a1 + 8304) = v65;
                      *(double *)(a1 + 8312) = v113 * v56 + v72;
                      *(double *)(a1 + 8320) = v114 * v56 + v73;
                      *(double *)(a1 + 8328) = v115 * v56 + v74;
                      *(double *)(a1 + 8336) = v116 * v56 + v76;
                      *(double *)(a1 + 8344) = v117 * v56 + v78;
                      v50 = v128;
                      *(double *)(a1 + 8352) = v52 * v56 + v80;
                    }
                    else
                    {
                      *(double *)(a1 + 7896) = v30;
                      *(double *)(a1 + 7904) = v33;
                      *(double *)(a1 + 7912) = v31;
                      *(double *)(a1 + 7920) = v34;
                      *(double *)(a1 + 7928) = v32;
                      *(double *)(a1 + 7936) = v35;
                      *(double *)(a1 + 7944) = v36;
                      *(double *)(a1 + 7952) = v37;
                      *(double *)(a1 + 7960) = v38;
                      *(double *)(a1 + 7968) = v81;
                      *(double *)(a1 + 7976) = v82;
                      *(double *)(a1 + 7984) = v83;
                      *(double *)(a1 + 7992) = v84;
                      *(double *)(a1 + 8000) = v85;
                      *(double *)(a1 + 8008) = v86;
                      *(double *)(a1 + 8016) = v87;
                      *(double *)(a1 + 8024) = v88;
                      *(double *)(a1 + 8032) = v89;
                      *(double *)(a1 + 8040) = v41;
                      *(double *)(a1 + 8048) = v90;
                      *(double *)(a1 + 8056) = v39;
                      *(double *)(a1 + 8064) = v40;
                      *(double *)(a1 + 8072) = v42;
                      *(double *)(a1 + 8080) = v43;
                      *(double *)(a1 + 8088) = v44;
                      *(double *)(a1 + 8096) = v45;
                      *(double *)(a1 + 8104) = v46;
                      *(double *)(a1 + 8112) = v47;
                      *(double *)(a1 + 8120) = v48;
                      *(double *)(a1 + 8128) = v49;
                      *(double *)(a1 + 8136) = v91;
                      *(double *)(a1 + 8144) = v92;
                      *(double *)(a1 + 8152) = v93;
                      *(double *)(a1 + 8160) = v94;
                      *(double *)(a1 + 8168) = v95;
                      *(double *)(a1 + 8176) = v96;
                      *(double *)(a1 + 8184) = v97;
                      *(double *)(a1 + 0x2000) = v99;
                      *(double *)(a1 + 8200) = v98;
                      *(double *)(a1 + 8208) = v100;
                      *(double *)(a1 + 8216) = v101;
                      *(double *)(a1 + 8224) = v102;
                      *(double *)(a1 + 8232) = v103;
                      *(double *)(a1 + 8240) = v104;
                      *(double *)(a1 + 8248) = v105;
                      *(double *)(a1 + 8256) = v106;
                      *(double *)(a1 + 8264) = v108;
                      *(double *)(a1 + 8272) = v110;
                      *(double *)(a1 + 8280) = v111;
                      *(double *)(a1 + 8288) = v112;
                      *(double *)(a1 + 8296) = v107;
                      *(double *)(a1 + 8304) = v109;
                      *(double *)(a1 + 8312) = v113;
                      *(double *)(a1 + 8320) = v114;
                      *(double *)(a1 + 8328) = v115;
                      *(double *)(a1 + 8336) = v116;
                      *(double *)(a1 + 8344) = v117;
                      *(double *)(a1 + 8352) = v52;
                      *(_BYTE *)(a1 + 7888) = 1;
                    }
                    a7->f64[0] = v23;
                    a7->f64[1] = v141;
                    a7[1].f64[0] = v24;
                    a7[1].f64[1] = v140;
                    a7[2].f64[0] = v25;
                    a7[2].f64[1] = v26;
                    a7[3].f64[0] = v27;
                    a7[3].f64[1] = v139;
                    a7[4].f64[0] = v138;
                    a7[4].f64[1] = v137;
                    a7[5].f64[0] = v136;
                    a7[5].f64[1] = v135;
                    a7[6].f64[0] = v134;
                    a7[6].f64[1] = v133;
                    a7[7].f64[0] = v132;
                    a7[7].f64[1] = v131;
                    a7[8].f64[0] = v130;
                    a7[8].f64[1] = v129;
                    a5->f64[0] = v168;
                    a5->f64[1] = v167;
                    a5[1].f64[0] = v126;
                    a5[1].f64[1] = v125;
                    a5[2].f64[0] = v20;
                    a5[2].f64[1] = v124;
                    a5[3].f64[0] = v118;
                    a5[3].f64[1] = v28;
                    a5[4].f64[0] = v123;
                    a5[4].f64[1] = v122;
                    a5[5].f64[0] = v166;
                    a5[5].f64[1] = v121;
                    a5[6].f64[0] = v165;
                    a5[6].f64[1] = v120;
                    a5[7].f64[0] = v119;
                    a5[7].f64[1] = v164;
                    a5[8].f64[0] = v163;
                    a5[8].f64[1] = v162;
                    a5[9].f64[0] = v161;
                    a5[9].f64[1] = v160;
                    a6->f64[0] = v159;
                    a6->f64[1] = v158;
                    a6[1].f64[0] = v157;
                    a6[1].f64[1] = v156;
                    a6[2].f64[0] = v155;
                    a6[2].f64[1] = v154;
                    a6[3].f64[0] = v153;
                    a6[3].f64[1] = v152;
                    a6[4].f64[0] = v151;
                    a6[4].f64[1] = v150;
                    a6[5].f64[0] = v149;
                    a6[5].f64[1] = v50;
                    a6[6].f64[0] = v148;
                    a6[6].f64[1] = v147;
                    a6[7].f64[0] = v146;
                    a6[7].f64[1] = v145;
                    a6[8].f64[0] = v144;
                    a6[8].f64[1] = v143;
                    a6[9].f64[0] = v142;
                    a6[9].f64[1] = v51;
                    AdaptiveCorrection_applyTemporalCorrectionState(a1, a5, a6, a7);
                    return 0;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t AdaptiveCorrection_fullCorrectionWithDistortion(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, double *a5, double *a6, double *a7, double a8, double a9, double a10, double a11, int32x4_t a12, int32x4_t a13, double a14, int32x4_t a15)
{
  uint64_t result;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  float32x2_t v29;
  float32x2_t v30;
  float v31;
  float v32;
  int32x2_t v33;
  float v34;
  float v35;
  int32x2_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  float64x2_t v41;
  float v42;
  float64x2_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  float64x2_t v50;
  float64x2_t v51;
  unint64_t v52;
  uint64_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x2_t v56;
  const double *v57;
  double v58;
  double v59;
  float v60;
  float v61;
  const double *v62;
  unint64_t v63;
  simd_float2x2 v64;
  uint64_t v65;
  float v66;
  float v67;
  float64x2_t v68;
  float64x2_t v69;
  unint64_t v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  float64x2_t *v83;
  float64x2_t *v84;
  float64x2_t v85;
  float64x2_t v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  unint64_t v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  uint64_t v102;
  _BYTE *v103;
  const double *v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  double *v119;
  uint64_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  double *v137;
  uint64_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  uint64_t v145;
  uint64_t v146;
  float64x2_t *v147;
  float64x2_t *v148;
  float64x2_t v149;
  float64x2_t v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  unint64_t v156;
  int v157;
  uint64_t v158;
  _QWORD *v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  float64x2_t v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  float64x2_t v174;
  uint64_t v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  float64x2_t v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  float64x2_t v189;
  simd_float2x2 v190;
  simd_float2x2 v191;
  float v192;
  float v193;
  int32x2_t v194;
  float v195;
  float v196;
  int32x2_t v197;
  simd_float2x2 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  float64x2_t v205;
  simd_float2x2 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  float64x2_t v213;
  float32x2_t v214;
  float32x2_t v215;
  float32x2_t v216;
  const double *v217;
  float64x2_t v218;
  unint64_t v219;
  float64x2_t v220;
  int64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  simd_float2x2 v224;
  float32x2_t v225;
  float32x2_t v226;
  int8x16_t v227;
  int8x16_t v228;
  int8x16_t v229;
  __int128 v230;
  __int128 v231;
  float64x2_t v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  float64x2_t v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  float64x2_t v252;
  float64x2_t v253;
  __int128 v254;
  _BYTE v255[80];
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  __int128 v259;
  float64x2_t v260;
  float64x2_t v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  simd_float3x3 v268;
  simd_float2x2 v269;
  simd_float2x2 v270;
  float64x2x2_t v271;
  float64x2x2_t v272;

  result = 4294954516;
  if (!a1)
    return result;
  if (!a2)
    return result;
  if (!a3)
    return result;
  if ((int)a4 < 1)
    return result;
  if (!a7)
    return result;
  if (!a6)
    return result;
  if (!a5)
    return result;
  if (*(_DWORD *)a1 < (signed int)a4)
    return result;
  v229 = 0u;
  v230 = 0u;
  v227 = 0u;
  v228 = 0u;
  v225 = 0;
  v226 = 0;
  v224 = (simd_float2x2)0;
  v23 = *(float64x2_t *)(a7 + 6);
  *(float32x2_t *)a12.i8 = vcvt_f32_f64(v23);
  v222 = *(float64x2_t *)(a7 + 8);
  v24 = *(float64x2_t *)(a7 + 10);
  *(float32x2_t *)a15.i8 = vcvt_f32_f64(v24);
  v220 = *(float64x2_t *)(a7 + 12);
  v25 = *(float64x2_t *)(a7 + 14);
  *(float32x2_t *)a13.i8 = vcvt_f32_f64(v25);
  v218 = *(float64x2_t *)(a7 + 16);
  v215 = *(float32x2_t *)a15.i8;
  v216 = *(float32x2_t *)a12.i8;
  v214 = *(float32x2_t *)a13.i8;
  v26 = vzip1q_s32(a12, a13);
  v27 = vzip2q_s32((int32x4_t)vcvt_hight_f32_f64(*(int32x2_t *)&v23.f64[0], v222), (int32x4_t)vcvt_hight_f32_f64(*(int32x2_t *)&v25.f64[0], v218));
  v28 = vzip2q_s32((int32x4_t)vcvt_hight_f32_f64(*(int32x2_t *)&v24.f64[0], v220), (int32x4_t)0);
  v268.columns[0] = (simd_float3)vzip1q_s32(v26, a15);
  v268.columns[2] = (simd_float3)vzip1q_s32(v27, v28);
  v268.columns[1] = (simd_float3)vzip2q_s32(v26, vdupq_lane_s32(*(int32x2_t *)a15.i8, 1));
  result = AdaptiveCorrection_computeVerticalBaselineTransform((uint64_t)&v227, &v225, (int32x4_t *)&v224, v268, (float32x4_t)vzip2q_s32(v27, v28));
  if ((_DWORD)result)
    return result;
  v29 = v225;
  v30 = v226;
  v31 = a7[2];
  v32 = a7[4];
  v33 = (int32x2_t)vmla_n_f32(vmul_n_f32(v225, v31), v226, v32);
  v34 = a7[3];
  v35 = a7[5];
  v36 = (int32x2_t)vmla_n_f32(vmul_n_f32((float32x2_t)v224.columns[0], v34), (float32x2_t)v224.columns[1], v35);
  v251 = *(_OWORD *)a7;
  v252 = vcvtq_f64_f32((float32x2_t)vzip1_s32(v33, v36));
  v253 = vcvtq_f64_f32((float32x2_t)vzip2_s32(v33, v36));
  *(double *)&v254 = *(float *)v227.i32;
  *((double *)&v254 + 1) = *(float *)v228.i32;
  *(float64x2_t *)&v255[8] = vcvtq_f64_f32((float32x2_t)__PAIR64__(v227.u32[1], v230));
  *(float64x2_t *)&v255[24] = vcvtq_f64_f32((float32x2_t)vzip2_s32(*(int32x2_t *)v228.i8, *(int32x2_t *)v229.i8));
  *(float64x2_t *)&v255[40] = vcvtq_f64_f32((float32x2_t)vext_s8(*(int8x8_t *)&v230, (int8x8_t)*(_OWORD *)&vextq_s8(v227, v227, 8uLL), 4uLL));
  *(float64x2_t *)&v255[56] = vcvtq_f64_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v228, v228, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v229, v229, 8uLL)));
  *(double *)v255 = *(float *)v229.i32;
  *(double *)&v255[72] = *((float *)&v230 + 2);
  v37 = *((_OWORD *)a5 + 9);
  v249 = *((_OWORD *)a5 + 8);
  v250 = v37;
  v38 = *((_OWORD *)a5 + 7);
  v247 = *((_OWORD *)a5 + 6);
  v248 = v38;
  v39 = *((_OWORD *)a5 + 5);
  v245 = *((_OWORD *)a5 + 4);
  v246 = v39;
  v40 = *((_OWORD *)a5 + 3);
  v243 = *((_OWORD *)a5 + 2);
  v244 = v40;
  v41 = *(float64x2_t *)(a5 + 2);
  v241 = *(_OWORD *)a5;
  v242 = v41;
  *(float *)v41.f64 = a5[2];
  v42 = a5[3];
  v43 = vcvtq_f64_f32(vmla_n_f32(vmul_n_f32(v225, *(float *)v41.f64), v226, v42));
  v242 = v43;
  v44 = *((_OWORD *)a6 + 6);
  v45 = *((_OWORD *)a6 + 8);
  v46 = *((_OWORD *)a6 + 9);
  v238 = *((_OWORD *)a6 + 7);
  v239 = v45;
  v240 = v46;
  v47 = *((_OWORD *)a6 + 2);
  v48 = *((_OWORD *)a6 + 4);
  v49 = *((_OWORD *)a6 + 5);
  v234 = *((_OWORD *)a6 + 3);
  v235 = v48;
  v236 = v49;
  v237 = v44;
  v50 = *(float64x2_t *)(a6 + 2);
  v231 = *(_OWORD *)a6;
  v232 = v50;
  *(float *)&v44 = a6[2];
  *(float *)v50.f64 = a6[3];
  v51 = vcvtq_f64_f32(vmla_n_f32(vmul_n_f32((float32x2_t)v224.columns[0], *(float *)&v44), (float32x2_t)v224.columns[1], *(float *)v50.f64));
  v232 = v51;
  v233 = v47;
  v52 = *(_QWORD *)(a1 + 8360);
  if (!v52)
    return 4294954516;
  v53 = 0;
  v54 = vcvt_f32_f64(v222);
  v55 = vcvt_f32_f64(v220);
  v56 = vcvt_f32_f64(v218);
  v57 = *(const double **)(a1 + 8360);
  v58 = v43.f64[1];
  v59 = v51.f64[1];
  do
  {
    v60 = *(double *)(a2 + v53);
    v61 = *(double *)(a2 + v53 + 8);
    *(float64x2_t *)(v52 + v53) = vcvtq_f64_f32(vmla_n_f32(vmul_n_f32(v29, v60), v30, v61));
    v53 += 16;
  }
  while (16 * a4 != v53);
  v62 = *(const double **)(a1 + 8368);
  if (!v62)
    return 4294954516;
  v63 = 0;
  v217 = *(const double **)(a1 + 8368);
  v64 = v224;
  v65 = 16 * a4;
  do
  {
    v66 = *(double *)(a3 + v63);
    v67 = *(double *)(a3 + v63 + 8);
    *(float64x2_t *)&v62[v63 / 8] = vcvtq_f64_f32(vmla_n_f32(vmul_n_f32((float32x2_t)v64.columns[0], v66), (float32x2_t)v64.columns[1], v67));
    v63 += 16;
  }
  while (v65 != v63);
  if (*(_DWORD *)a1 < (signed int)a4)
    return 4294954516;
  v221 = (int64x2_t)v43;
  v223 = v51;
  v219 = v52;
  bzero((void *)(a1 + 136), 0x1E48uLL);
  v69 = (float64x2_t)v221;
  v68 = v223;
  v70 = *(_QWORD *)(a1 + 8376);
  if (!v70)
    return 4294954516;
  v71 = *(double *)&v241;
  v72 = *(double *)&v243 + *((double *)&v241 + 1) * *(double *)&v241 * *(double *)&v247;
  v73 = *((double *)&v243 + 1) + *((double *)&v241 + 1) * *(double *)&v241 * *((double *)&v247 + 1);
  v74 = *(double *)&v244 + *((double *)&v241 + 1) * *(double *)&v241 * *(double *)&v248;
  v75 = *((double *)&v244 + 1) + *((double *)&v241 + 1) * *(double *)&v241 * *((double *)&v248 + 1);
  v76 = *(double *)&v245 + *((double *)&v241 + 1) * *(double *)&v241 * *(double *)&v249;
  v77 = *((double *)&v245 + 1) + *((double *)&v241 + 1) * *(double *)&v241 * *((double *)&v249 + 1);
  v78 = *(double *)&v246 + *((double *)&v241 + 1) * *(double *)&v241 * *(double *)&v250;
  v79 = *((double *)&v246 + 1) + *((double *)&v241 + 1) * *(double *)&v241 * *((double *)&v250 + 1);
  if (a4 >= 2 && (v70 >= v219 + v65 || v219 >= v70 + v65))
  {
    v105 = (float64x2_t)vdupq_lane_s64(v221.i64[0], 0);
    v106 = (float64x2_t)vdupq_laneq_s64(v221, 1);
    v107 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v72, 0);
    v108 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v74, 0);
    v109 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v75, 0);
    v110 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v76, 0);
    v111 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v77, 0);
    v112 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v78, 0);
    v113 = (float64x2_t)vdupq_n_s64(0x4059000000000000uLL);
    v80 = a4 & 0xFFFFFFFE;
    __asm { FMOV            V26.2D, #1.0 }
    v119 = *(double **)(a1 + 8376);
    v120 = v80;
    v121 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v79, 0);
    do
    {
      v271 = vld2q_f64(v57);
      v57 += 4;
      v122 = vsubq_f64(v271.val[0], v105);
      v271.val[0] = vsubq_f64(v271.val[1], v106);
      v271.val[1] = vmulq_n_f64(vsqrtq_f64(vmlaq_f64(vmulq_f64(v271.val[0], v271.val[0]), v122, v122)), v71);
      v271.val[1] = vmulq_f64(v271.val[1], v271.val[1]);
      v123 = vmulq_f64(v271.val[1], v271.val[1]);
      v124 = vmulq_f64(v271.val[1], v123);
      v125 = vmulq_f64(v123, v123);
      v271.val[1] = vaddq_f64(vdivq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vaddq_f64(v107, vmulq_n_f64(v271.val[1], v73)), v123, v108), v124, v109), v125, v110), vmulq_f64(v123, v124), v111), vmulq_f64(v124, v124), v112), vmulq_f64(v125, v124), v121), v113), _Q26);
      v271.val[1] = (float64x2_t)vbslq_s8((int8x16_t)vcgtzq_f64(v271.val[1]), (int8x16_t)vdivq_f64(_Q26, v271.val[1]), (int8x16_t)_Q26);
      v271.val[0] = vmulq_f64(v271.val[0], v271.val[1]);
      v271.val[1] = vaddq_f64(vmulq_f64(v122, v271.val[1]), v105);
      v126 = vaddq_f64(v271.val[0], v106);
      vst2q_f64(v119, *(float64x2x2_t *)((char *)&v271 + 16));
      v119 += 4;
      v120 -= 2;
    }
    while (v120);
    v69 = (float64x2_t)v221;
    v68 = v223;
    if (v80 == a4)
      goto LABEL_27;
  }
  else
  {
    v80 = 0;
  }
  v81 = a4 - v80;
  v82 = 16 * v80;
  v83 = (float64x2_t *)(v70 + 16 * v80);
  v84 = (float64x2_t *)(v219 + v82);
  do
  {
    v85 = *v84++;
    v86 = vsubq_f64(v85, v69);
    v87 = sqrt(vmlad_n_f64(COERCE_DOUBLE(*(_QWORD *)&vmulq_f64(v86, v86).f64[1]), v86.f64[0], v86.f64[0]));
    v88 = v71 * v87 * (v71 * v87);
    v89 = v88 * (v88 * v88);
    v90 = (v72
         + v73 * v88
         + v74 * (v88 * v88)
         + v75 * v89
         + v76 * (v88 * v88 * (v88 * v88))
         + v77 * (v88 * v88 * v89)
         + v78 * (v89 * v89)
         + v79 * (v88 * v88 * (v88 * v88) * v89))
        / 100.0
        + 1.0;
    if (v90 <= 0.0)
      v91 = 1.0;
    else
      v91 = 1.0 / v90;
    *v83++ = vaddq_f64(vmulq_n_f64(v86, v91), v69);
    --v81;
  }
  while (v81);
LABEL_27:
  v92 = *(_QWORD *)(a1 + 8384);
  if (!v92)
    return 4294954516;
  v93 = *(double *)&v231;
  v94 = *(double *)&v233 + *((double *)&v231 + 1) * *(double *)&v231 * *(double *)&v237;
  v95 = *((double *)&v233 + 1) + *((double *)&v231 + 1) * *(double *)&v231 * *((double *)&v237 + 1);
  v96 = *(double *)&v234 + *((double *)&v231 + 1) * *(double *)&v231 * *(double *)&v238;
  v97 = *((double *)&v234 + 1) + *((double *)&v231 + 1) * *(double *)&v231 * *((double *)&v238 + 1);
  v98 = *(double *)&v235 + *((double *)&v231 + 1) * *(double *)&v231 * *(double *)&v239;
  v99 = *((double *)&v235 + 1) + *((double *)&v231 + 1) * *(double *)&v231 * *((double *)&v239 + 1);
  v100 = *(double *)&v236 + *((double *)&v231 + 1) * *(double *)&v231 * *(double *)&v240;
  v101 = *((double *)&v236 + 1) + *((double *)&v231 + 1) * *(double *)&v231 * *((double *)&v240 + 1);
  if (a4 >= 2)
  {
    if (v92 >= (unint64_t)&v62[(unint64_t)v65 / 8] || (unint64_t)v62 >= v92 + v65)
    {
      v127 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v68.f64[0], 0);
      v128 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v68, 1);
      v129 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v94, 0);
      v130 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v96, 0);
      v131 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v97, 0);
      v132 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v98, 0);
      v133 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v99, 0);
      v134 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v100, 0);
      v135 = (float64x2_t)vdupq_n_s64(0x4059000000000000uLL);
      v102 = a4 & 0xFFFFFFFE;
      __asm { FMOV            V26.2D, #1.0 }
      v137 = *(double **)(a1 + 8384);
      v138 = v102;
      v139 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v101, 0);
      do
      {
        v272 = vld2q_f64(v62);
        v62 += 4;
        v140 = vsubq_f64(v272.val[0], v127);
        v272.val[0] = vsubq_f64(v272.val[1], v128);
        v272.val[1] = vmulq_n_f64(vsqrtq_f64(vmlaq_f64(vmulq_f64(v272.val[0], v272.val[0]), v140, v140)), v93);
        v272.val[1] = vmulq_f64(v272.val[1], v272.val[1]);
        v141 = vmulq_f64(v272.val[1], v272.val[1]);
        v142 = vmulq_f64(v272.val[1], v141);
        v143 = vmulq_f64(v141, v141);
        v272.val[1] = vaddq_f64(vdivq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vaddq_f64(v129, vmulq_n_f64(v272.val[1], v95)), v141, v130), v142, v131), v143, v132), vmulq_f64(v141, v142), v133), vmulq_f64(v142, v142), v134), vmulq_f64(v143, v142), v139), v135), _Q26);
        v272.val[1] = (float64x2_t)vbslq_s8((int8x16_t)vcgtzq_f64(v272.val[1]), (int8x16_t)vdivq_f64(_Q26, v272.val[1]), (int8x16_t)_Q26);
        v272.val[0] = vmulq_f64(v272.val[0], v272.val[1]);
        v272.val[1] = vaddq_f64(vmulq_f64(v140, v272.val[1]), v127);
        v144 = vaddq_f64(v272.val[0], v128);
        vst2q_f64(v137, *(float64x2x2_t *)((char *)&v272 + 16));
        v137 += 4;
        v138 -= 2;
      }
      while (v138);
      v68 = v223;
      v103 = (_BYTE *)(a1 + 5348);
      v104 = v217;
      if (v102 == a4)
        goto LABEL_45;
    }
    else
    {
      v102 = 0;
      v103 = (_BYTE *)(a1 + 5348);
      v104 = v62;
    }
  }
  else
  {
    v102 = 0;
    v103 = (_BYTE *)(a1 + 5348);
    v104 = v62;
  }
  v145 = a4 - v102;
  v146 = 2 * v102;
  v147 = (float64x2_t *)(v92 + 16 * v102);
  v148 = (float64x2_t *)&v104[v146];
  do
  {
    v149 = *v148++;
    v150 = vsubq_f64(v149, v68);
    v151 = sqrt(vmlad_n_f64(COERCE_DOUBLE(*(_QWORD *)&vmulq_f64(v150, v150).f64[1]), v150.f64[0], v150.f64[0]));
    v152 = v93 * v151 * (v93 * v151);
    v153 = v152 * (v152 * v152);
    v154 = (v94
          + v95 * v152
          + v96 * (v152 * v152)
          + v97 * v153
          + v98 * (v152 * v152 * (v152 * v152))
          + v99 * (v152 * v152 * v153)
          + v100 * (v153 * v153)
          + v101 * (v152 * v152 * (v152 * v152) * v153))
         / 100.0
         + 1.0;
    if (v154 <= 0.0)
      v155 = 1.0;
    else
      v155 = 1.0 / v154;
    *v147++ = vaddq_f64(vmulq_n_f64(v150, v155), v68);
    --v145;
  }
  while (v145);
LABEL_45:
  AdaptiveCorrection_fullCorrection();
  *(_OWORD *)&v255[32] = v265;
  *(_OWORD *)&v255[48] = v266;
  *(_OWORD *)&v255[64] = v267;
  v253 = v261;
  v254 = v262;
  *(_OWORD *)v255 = v263;
  *(_OWORD *)&v255[16] = v264;
  v251 = v259;
  v252 = v260;
  FundamentalEpipolarError_ABSVec(*(const double **)(a1 + 8376), *(const double **)(a1 + 8384), a4, (double *)&v251, *(float64x2_t **)(a1 + 8408));
  v156 = 0;
  v157 = 0;
  v158 = *(_QWORD *)(a1 + 8408);
  v159 = v104 + 1;
  v160 = (_QWORD *)(v219 + 8);
  do
  {
    if (*(double *)(v158 + 8 * v156) < *(double *)(a1 + 16))
    {
      v161 = *(_QWORD *)(a1 + 8392);
      v162 = 16 * v157;
      *(_QWORD *)(v161 + v162) = *(v160 - 1);
      v163 = (16 * v157) | 8;
      *(_QWORD *)(v161 + v163) = *v160;
      v164 = *(_QWORD *)(a1 + 8400);
      *(_QWORD *)(v164 + v162) = *(v159 - 1);
      *(_QWORD *)(v164 + v163) = *v159;
      ++v157;
      if (v156 <= 0x7FF)
        *(_BYTE *)(a1 + 5840 + v156) = 1;
    }
    ++v156;
    v159 += 2;
    v160 += 2;
  }
  while (a4 != v156);
  *(_DWORD *)(a1 + 5344) = v157;
  if (v157 >= *(_DWORD *)(a1 + 80))
  {
    v165 = v248;
    *(_OWORD *)(a1 + 5120) = v247;
    *(_OWORD *)(a1 + 5136) = v165;
    v166 = v250;
    *(_OWORD *)(a1 + 5152) = v249;
    *(_OWORD *)(a1 + 5168) = v166;
    v167 = v244;
    *(_OWORD *)(a1 + 5056) = v243;
    *(_OWORD *)(a1 + 5072) = v167;
    v168 = v246;
    *(_OWORD *)(a1 + 5088) = v245;
    *(_OWORD *)(a1 + 5104) = v168;
    v169 = v242;
    *(_OWORD *)(a1 + 5024) = v241;
    *(float64x2_t *)(a1 + 5040) = v169;
    v170 = v238;
    *(_OWORD *)(a1 + 5280) = v237;
    *(_OWORD *)(a1 + 5296) = v170;
    v171 = v240;
    *(_OWORD *)(a1 + 5312) = v239;
    *(_OWORD *)(a1 + 5328) = v171;
    v172 = v234;
    *(_OWORD *)(a1 + 5216) = v233;
    *(_OWORD *)(a1 + 5232) = v172;
    v173 = v236;
    *(_OWORD *)(a1 + 5248) = v235;
    *(_OWORD *)(a1 + 5264) = v173;
    v174 = v232;
    *(_OWORD *)(a1 + 5184) = v231;
    *v103 = 1;
    *(float64x2_t *)(a1 + 5200) = v174;
    v257 = 0;
    v256 = 0;
    v258 = 0;
    AdjustCalibrationDistorted(*(const double **)(a1 + 8392), *(const double **)(a1 + 8400), v157, (uint64_t)&v241, (uint64_t)&v231, (uint64_t)&v251, (float64x2_t *)(a1 + 8), (uint64_t)&v256);
    v175 = v258;
    *(_QWORD *)(a1 + 5352) = v257;
    *(_DWORD *)(a1 + 5360) = v256;
    v103[16] = BYTE4(v256);
    *(_QWORD *)(a1 + 5368) = v175;
    v176 = *(_OWORD *)v255;
    *(_OWORD *)(a1 + 5456) = *(_OWORD *)&v255[16];
    v177 = *(_OWORD *)&v255[48];
    *(_OWORD *)(a1 + 5472) = *(_OWORD *)&v255[32];
    *(_OWORD *)(a1 + 5488) = v177;
    *(_OWORD *)(a1 + 5504) = *(_OWORD *)&v255[64];
    v178 = v251;
    *(float64x2_t *)(a1 + 5392) = v252;
    v179 = v254;
    *(float64x2_t *)(a1 + 5408) = v253;
    *(_OWORD *)(a1 + 5424) = v179;
    *(_OWORD *)(a1 + 5440) = v176;
    *(_OWORD *)(a1 + 5376) = v178;
    v180 = v248;
    *(_OWORD *)(a1 + 5616) = v247;
    *(_OWORD *)(a1 + 5632) = v180;
    v181 = v250;
    *(_OWORD *)(a1 + 5648) = v249;
    *(_OWORD *)(a1 + 5664) = v181;
    v182 = v244;
    *(_OWORD *)(a1 + 5552) = v243;
    *(_OWORD *)(a1 + 5568) = v182;
    v183 = v246;
    *(_OWORD *)(a1 + 5584) = v245;
    *(_OWORD *)(a1 + 5600) = v183;
    v184 = v242;
    *(_OWORD *)(a1 + 5520) = v241;
    *(float64x2_t *)(a1 + 5536) = v184;
    v185 = v238;
    *(_OWORD *)(a1 + 5776) = v237;
    *(_OWORD *)(a1 + 5792) = v185;
    v186 = v240;
    *(_OWORD *)(a1 + 5808) = v239;
    *(_OWORD *)(a1 + 5824) = v186;
    v187 = v234;
    *(_OWORD *)(a1 + 5712) = v233;
    *(_OWORD *)(a1 + 5728) = v187;
    v188 = v236;
    *(_OWORD *)(a1 + 5744) = v235;
    *(_OWORD *)(a1 + 5760) = v188;
    v189 = v232;
    *(_OWORD *)(a1 + 5680) = v231;
    *(float64x2_t *)(a1 + 5696) = v189;
    v58 = v242.f64[1];
    v59 = v232.f64[1];
    v221.i64[0] = *(_QWORD *)&v242.f64[0];
    v223.f64[0] = v232.f64[0];
  }
  v269.columns[0] = (simd_float2)v225;
  v269.columns[1] = (simd_float2)v226;
  v190 = __invert_f2(v269);
  v191 = __invert_f2(v224);
  v192 = v252.f64[0];
  v193 = v253.f64[0];
  v194 = (int32x2_t)vmla_n_f32(vmul_n_f32((float32x2_t)v190.columns[0], v192), (float32x2_t)v190.columns[1], v193);
  v195 = v252.f64[1];
  v196 = v253.f64[1];
  v197 = (int32x2_t)vmla_n_f32(vmul_n_f32((float32x2_t)v191.columns[0], v195), (float32x2_t)v191.columns[1], v196);
  *(_OWORD *)a7 = v251;
  *((float64x2_t *)a7 + 1) = vcvtq_f64_f32((float32x2_t)vzip1_s32(v194, v197));
  *((float64x2_t *)a7 + 2) = vcvtq_f64_f32((float32x2_t)vzip2_s32(v194, v197));
  *((float64x2_t *)a7 + 3) = vcvtq_f64_f32(v216);
  *((float64x2_t *)a7 + 4) = vcvtq_f64_f32(v54);
  *((float64x2_t *)a7 + 5) = vcvtq_f64_f32(v215);
  *((float64x2_t *)a7 + 6) = vcvtq_f64_f32(v55);
  *((float64x2_t *)a7 + 7) = vcvtq_f64_f32(v214);
  *((float64x2_t *)a7 + 8) = vcvtq_f64_f32(v56);
  v270.columns[0] = (simd_float2)v225;
  v270.columns[1] = (simd_float2)v226;
  v198 = __invert_f2(v270);
  v199 = v247;
  v200 = v249;
  v201 = v250;
  *((_OWORD *)a5 + 7) = v248;
  *((_OWORD *)a5 + 8) = v200;
  *((_OWORD *)a5 + 9) = v201;
  v202 = v243;
  v203 = v245;
  v204 = v246;
  *((_OWORD *)a5 + 3) = v244;
  *((_OWORD *)a5 + 4) = v203;
  *((_OWORD *)a5 + 5) = v204;
  *((_OWORD *)a5 + 6) = v199;
  v205 = v242;
  *(_OWORD *)a5 = v241;
  *((float64x2_t *)a5 + 1) = v205;
  *(float *)&v199 = *(double *)v221.i64;
  *(float *)v205.f64 = v58;
  *((float64x2_t *)a5 + 1) = vcvtq_f64_f32(vmla_n_f32(vmul_n_f32((float32x2_t)v198.columns[0], *(float *)&v199), (float32x2_t)v198.columns[1], *(float *)v205.f64));
  *((_OWORD *)a5 + 2) = v202;
  v206 = __invert_f2(v224);
  result = 0;
  v207 = v237;
  v208 = v239;
  v209 = v240;
  *((_OWORD *)a6 + 7) = v238;
  *((_OWORD *)a6 + 8) = v208;
  *((_OWORD *)a6 + 9) = v209;
  v210 = v233;
  v211 = v235;
  v212 = v236;
  *((_OWORD *)a6 + 3) = v234;
  *((_OWORD *)a6 + 4) = v211;
  *((_OWORD *)a6 + 5) = v212;
  *((_OWORD *)a6 + 6) = v207;
  v213 = v232;
  *(_OWORD *)a6 = v231;
  *((float64x2_t *)a6 + 1) = v213;
  *(float *)&v207 = v223.f64[0];
  *(float *)v213.f64 = v59;
  *((float64x2_t *)a6 + 1) = vcvtq_f64_f32(vmla_n_f32(vmul_n_f32((float32x2_t)v206.columns[0], *(float *)&v207), (float32x2_t)v206.columns[1], *(float *)v213.f64));
  *((_OWORD *)a6 + 2) = v210;
  return result;
}

uint64_t AdaptiveCorrection_applyTemporalCorrectionState(uint64_t a1, float64x2_t *a2, float64x2_t *a3, float64x2_t *a4)
{
  uint64_t result;
  uint64_t v6;
  float64x2_t *v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;

  if (!a1)
    return 4294954516;
  result = 4294954516;
  if (a4 && a3 && a2)
  {
    v6 = a1 + 7888;
    if (*(_BYTE *)(a1 + 7888))
    {
      result = 0;
      v7 = (float64x2_t *)(a1 + 8200);
      v8 = vaddq_f64(a4[1], *(float64x2_t *)(v6 + 24));
      v9 = vaddq_f64(a4[2], *(float64x2_t *)(v6 + 40));
      v10 = vaddq_f64(a4[3], *(float64x2_t *)(v6 + 56));
      v11 = vaddq_f64(a4[4], *(float64x2_t *)(v6 + 72));
      v12 = vaddq_f64(a4[5], *(float64x2_t *)(v6 + 88));
      v13 = vaddq_f64(a4[6], *(float64x2_t *)(v6 + 104));
      v14 = vaddq_f64(a4[7], *(float64x2_t *)(v6 + 120));
      v15 = vaddq_f64(a4[8], *(float64x2_t *)(v6 + 136));
      *a4 = vaddq_f64(*a4, *(float64x2_t *)(v6 + 8));
      a4[1] = v8;
      a4[2] = v9;
      a4[3] = v10;
      a4[4] = v11;
      a4[5] = v12;
      a4[6] = v13;
      a4[7] = v14;
      a4[8] = v15;
      v16 = vaddq_f64(a2[1], *(float64x2_t *)(v6 + 168));
      v17 = vaddq_f64(a2[2], *(float64x2_t *)(v6 + 184));
      v18 = vaddq_f64(a2[3], *(float64x2_t *)(v6 + 200));
      v19 = vaddq_f64(a2[4], *(float64x2_t *)(v6 + 216));
      v20 = vaddq_f64(a2[5], *(float64x2_t *)(v6 + 232));
      v21 = vaddq_f64(a2[6], *(float64x2_t *)(v6 + 248));
      v22 = vaddq_f64(a2[7], *(float64x2_t *)(v6 + 264));
      v23 = vaddq_f64(a2[8], *(float64x2_t *)(v6 + 280));
      v24 = vaddq_f64(a2[9], *(float64x2_t *)(v6 + 296));
      *a2 = vaddq_f64(*a2, *(float64x2_t *)(v6 + 152));
      a2[1] = v16;
      a2[2] = v17;
      a2[3] = v18;
      a2[4] = v19;
      a2[5] = v20;
      a2[6] = v21;
      a2[7] = v22;
      a2[8] = v23;
      a2[9] = v24;
      v25 = vaddq_f64(a3[1], v7[1]);
      v26 = vaddq_f64(a3[2], v7[2]);
      v27 = vaddq_f64(a3[3], v7[3]);
      v28 = vaddq_f64(a3[4], v7[4]);
      v29 = vaddq_f64(a3[5], v7[5]);
      v30 = vaddq_f64(a3[6], v7[6]);
      v31 = vaddq_f64(a3[7], v7[7]);
      v32 = vaddq_f64(a3[8], v7[8]);
      v33 = vaddq_f64(a3[9], v7[9]);
      *a3 = vaddq_f64(*a3, *v7);
      a3[1] = v25;
      a3[2] = v26;
      a3[3] = v27;
      a3[4] = v28;
      a3[5] = v29;
      a3[6] = v30;
      a3[7] = v31;
      a3[8] = v32;
      a3[9] = v33;
    }
  }
  return result;
}

uint64_t AdaptiveCorrection_computeVerticalBaselineTransform(uint64_t a1, _QWORD *a2, int32x4_t *a3, simd_float3x3 a4, float32x4_t a5)
{
  uint64_t result;
  float32x4_t v9;
  float v10;
  unint64_t v11;
  float v12;
  float v13;
  uint64_t v14;
  float v15;
  float v16;
  float v17;
  unint64_t v18;
  int32x4_t v19;
  simd_float2x2 v20;
  int32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  unsigned int v34;
  int8x8_t v35;
  int8x8_t v36;
  int32x4_t v37;
  int32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float v46;
  unint64_t v47;
  uint64_t v48;
  simd_float3x3 v49;
  simd_float3x3 v51;

  result = 4294954516;
  if (!a1 || !a2 || !a3)
    return result;
  v49 = a4;
  a4.columns[0].i32[3] = 0;
  a4.columns[1].i32[3] = 0;
  a4.columns[2].i32[3] = 0;
  v51 = __invert_f3(a4);
  v9 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v51.columns[0], a5.f32[0]), (float32x4_t)v51.columns[1], *(float32x2_t *)a5.f32, 1), (float32x4_t)v51.columns[2], a5, 2);
  v10 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v9, v9)));
  if (v10 <= 0.0)
    return 4294954516;
  v11 = vnegq_f32(v9).u64[0];
  v12 = fabsf(*((float *)&v11 + 1));
  v13 = fabsf(*(float *)&v11);
  if (v12 >= v13 && *((float *)&v11 + 1) >= 0.0)
  {
    *(float *)&v14 = *((float *)&v11 + 1) / v10;
    v15 = (float)-*(float *)&v11 / v10;
LABEL_11:
    v16 = -v15;
    LODWORD(v17) = v14;
    goto LABEL_12;
  }
  if (v12 >= v13 && *((float *)&v11 + 1) < 0.0)
  {
    *(float *)&v14 = (float)-*((float *)&v11 + 1) / v10;
    v15 = *(float *)&v11 / v10;
    goto LABEL_11;
  }
  if (v13 <= v12 || *(float *)&v11 < 0.0)
  {
    result = 4294954516;
    if (v13 <= v12 || *(float *)&v11 >= 0.0)
      return result;
    *(float *)&v14 = *((float *)&v11 + 1) / v10;
    v15 = (float)-*(float *)&v11 / v10;
  }
  else
  {
    *(float *)&v14 = (float)-*((float *)&v11 + 1) / v10;
    v15 = *(float *)&v11 / v10;
  }
  v17 = -*(float *)&v14;
  v16 = v15;
LABEL_12:
  *((float *)&v14 + 1) = v16;
  v18 = __PAIR64__(LODWORD(v17), LODWORD(v15));
  v48 = v14;
  v46 = v15;
  v47 = __PAIR64__(LODWORD(v17), LODWORD(v15));
  v20 = __invert_f2(*(simd_float2x2 *)&v14);
  _Q3 = vmlaq_f32(vmlaq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v49.columns[0], v20.columns[0].f32[0]), (float32x4_t)v49.columns[1], (float32x2_t)v20.columns[0], 1), (float32x4_t)0, (float32x4_t)v49.columns[2]), (float32x4_t)0, a5);
  _S2 = _Q3.i32[1];
  __asm { FMLA            S4, S2, V3.S[1] }
  *(float *)v28.i32 = sqrtf(_S4);
  if (*(float *)v28.i32 <= 0.0)
    return 4294954516;
  result = 0;
  v29 = vmlaq_f32(vmulq_f32((float32x4_t)v49.columns[0], (float32x4_t)0), (float32x4_t)0, (float32x4_t)v49.columns[1]);
  v30 = vaddq_f32((float32x4_t)v49.columns[2], v29);
  v31 = vaddq_f32(a5, vmlaq_f32(v29, (float32x4_t)0, (float32x4_t)v49.columns[2]));
  v32 = vmlaq_f32(v30, (float32x4_t)0, a5);
  v33 = vmlaq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v49.columns[0], v20.columns[1].f32[0]), (float32x4_t)v49.columns[1], (float32x2_t)v20.columns[1], 1), (float32x4_t)0, (float32x4_t)v49.columns[2]);
  *(float32x2_t *)v19.i8 = vdiv_f32(*(float32x2_t *)_Q3.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v28.i8, 0));
  v34 = v46 > 0.0;
  if (fabsf(*(float *)&v19.i32[1]) <= fabsf(*(float *)v19.i32))
    v34 = 0;
  v35 = (int8x8_t)vrev64_s32(*(int32x2_t *)v19.i8);
  v36.i32[0] = v35.i32[0];
  *(float *)&v36.i32[1] = -*(float *)v19.i32;
  *(float *)v35.i32 = -*(float *)&v19.i32[1];
  *(int8x8_t *)v28.i8 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v34), 0x1FuLL)), v36, v35);
  v37 = vzip1q_s32(v19, v28);
  v38 = v19;
  v38.i32[1] = 0;
  v19.i64[1] = v28.i64[0];
  v39 = (float32x4_t)vzip1q_s32(v38, v28);
  v40 = (float32x4_t)vuzp2q_s32(v19, vzip2q_s32(v19, (int32x4_t)0));
  v41 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v39, _Q3.f32[0]), v40, *(float32x2_t *)_Q3.f32, 1), (float32x4_t)xmmword_20B6D29D0, _Q3, 2);
  *(_DWORD *)(a1 + 8) = v41.i32[2];
  v42 = vmlaq_f32(v33, (float32x4_t)0, a5);
  v43 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v39, v42.f32[0]), v40, *(float32x2_t *)v42.f32, 1), (float32x4_t)xmmword_20B6D29D0, v42, 2);
  v44 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v39, v32.f32[0]), v40, *(float32x2_t *)v32.f32, 1), (float32x4_t)xmmword_20B6D29D0, v32, 2);
  *(_DWORD *)(a1 + 24) = v43.i32[2];
  *(_DWORD *)(a1 + 40) = v44.i32[2];
  v45 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v39, v31.f32[0]), v40, *(float32x2_t *)v31.f32, 1), (float32x4_t)xmmword_20B6D29D0, v31, 2);
  *(_DWORD *)(a1 + 56) = v45.i32[2];
  *(_QWORD *)a1 = v41.i64[0];
  *(_DWORD *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 16) = v43.i64[0];
  *(_DWORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 32) = v44.i64[0];
  *(_DWORD *)(a1 + 44) = 0;
  *(_QWORD *)(a1 + 48) = v45.i64[0];
  *(_DWORD *)(a1 + 60) = 0;
  *a2 = v48;
  a2[1] = v47;
  *a3 = v37;
  return result;
}

void AdaptiveCorrection_fullCorrection()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 *v5;
  __int128 *v6;
  signed int v7;
  signed int v8;
  const double *v9;
  const double *v10;
  const double *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  size_t v26;
  double *v27;
  double *v28;
  double v29;
  float64x2_t *v30;
  unint64_t v31;
  int v32;
  double *v33;
  double *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double *v42;
  double *v43;
  uint64_t v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  double *v52;
  double *v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  float64x2_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  char *v75;
  char *v76;
  double v77;
  float64x2_t *v78;
  unint64_t v79;
  signed int v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  float64x2_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  void *v104;
  const double *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int8x16_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _BYTE __src[7752];
  uint64_t v122;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = (const double *)v0;
  v13 = v12;
  v122 = *MEMORY[0x24BDAC8D0];
  bzero(__src, 0x1E48uLL);
  v14 = v6[5];
  v16 = v6[6];
  v15 = v6[7];
  *(_OWORD *)(v13 + 96) = v16;
  *(_OWORD *)(v13 + 112) = v15;
  v17 = v6[7];
  *(_OWORD *)(v13 + 128) = v6[8];
  v18 = v6[1];
  v20 = v6[2];
  v19 = v6[3];
  *(_OWORD *)(v13 + 32) = v20;
  *(_OWORD *)(v13 + 48) = v19;
  v21 = v6[3];
  v23 = v6[4];
  v22 = v6[5];
  *(_OWORD *)(v13 + 64) = v23;
  *(_OWORD *)(v13 + 80) = v22;
  v24 = v6[1];
  v25 = *v6;
  *(_OWORD *)v13 = *v6;
  *(_OWORD *)(v13 + 16) = v24;
  *(_OWORD *)&__src[88] = v14;
  *(_OWORD *)&__src[104] = v16;
  *(_OWORD *)&__src[120] = v17;
  *(_OWORD *)&__src[136] = v6[8];
  *(_OWORD *)&__src[24] = v18;
  *(_OWORD *)&__src[40] = v20;
  *(_OWORD *)&__src[56] = v21;
  *(_OWORD *)&__src[72] = v23;
  *(_OWORD *)&__src[8] = v25;
  *(_DWORD *)__src = v8;
  if (*(_DWORD *)(v4 + 72) <= v8)
  {
    v105 = v11;
    v104 = v2;
    __src[4] = 1;
    v26 = 16 * v8;
    v27 = (double *)malloc_type_malloc(v26, 0x100004000313F17uLL);
    v28 = (double *)malloc_type_malloc(v26, 0x100004000313F17uLL);
    v29 = *(double *)v4;
    v30 = (float64x2_t *)malloc_type_malloc(8 * v8, 0x100004000313F17uLL);
    if (v30)
    {
      FundamentalEpipolarError_ABSVec(v105, v10, v8, (double *)v13, v30);
      if (v8 < 1)
      {
        v32 = 0;
      }
      else
      {
        v31 = 0;
        v32 = 0;
        v33 = (double *)(v10 + 1);
        v34 = (double *)(v105 + 1);
        do
        {
          if (v30->f64[v31] < v29)
          {
            if (v31 <= 0x7FF)
              __src[v31 + 472] = 1;
            v35 = 2 * v32;
            v27[v35] = *(v34 - 1);
            v36 = (16 * v32) | 8;
            *(double *)((char *)v27 + v36) = *v34;
            v28[v35] = *(v33 - 1);
            *(double *)((char *)v28 + v36) = *v33;
            ++v32;
          }
          ++v31;
          v33 += 2;
          v34 += 2;
        }
        while (v8 != v31);
      }
    }
    else
    {
      v32 = 0;
    }
    free(v30);
    *(_DWORD *)&__src[152] = v32;
    if (v32 < *(_DWORD *)(v4 + 72))
    {
      v75 = 0;
      v76 = 0;
LABEL_40:
      v2 = v104;
      goto LABEL_41;
    }
    __src[156] = 1;
    if (!*(_BYTE *)(v4 + 104))
    {
LABEL_28:
      v118 = 0;
      v119 = 0;
      v120 = 0;
      AdjustCalibrationFocalLengthAndOpticalCenterX_Gradient((uint64_t)v27, (uint64_t)v28, v32, (float64x2_t *)v13, (float64x2_t *)v4, (uint64_t)&v118, &v109);
      v66 = v116;
      v67 = v117;
      *(_OWORD *)(v13 + 96) = v115;
      *(_OWORD *)(v13 + 112) = v66;
      *(_OWORD *)(v13 + 128) = v67;
      v68 = v112;
      *(_OWORD *)(v13 + 32) = v111;
      *(_OWORD *)(v13 + 48) = v68;
      v69 = v114;
      *(_OWORD *)(v13 + 64) = v113;
      *(_OWORD *)(v13 + 80) = v69;
      v70 = v110;
      *(int8x16_t *)v13 = v109;
      *(_OWORD *)(v13 + 16) = v70;
      *(_QWORD *)&__src[304] = v119;
      *(_DWORD *)&__src[312] = v118;
      __src[316] = BYTE4(v118);
      *(_QWORD *)&__src[320] = v120;
      v71 = *(_OWORD *)(v13 + 112);
      *(_OWORD *)&__src[424] = *(_OWORD *)(v13 + 96);
      *(_OWORD *)&__src[440] = v71;
      *(_OWORD *)&__src[456] = *(_OWORD *)(v13 + 128);
      v72 = *(_OWORD *)(v13 + 48);
      *(_OWORD *)&__src[360] = *(_OWORD *)(v13 + 32);
      *(_OWORD *)&__src[376] = v72;
      v73 = *(_OWORD *)(v13 + 80);
      *(_OWORD *)&__src[392] = *(_OWORD *)(v13 + 64);
      *(_OWORD *)&__src[408] = v73;
      v74 = *(_OWORD *)(v13 + 16);
      *(_OWORD *)&__src[328] = *(_OWORD *)v13;
      *(_OWORD *)&__src[344] = v74;
      v75 = (char *)malloc_type_malloc(v26, 0x100004000313F17uLL);
      v76 = (char *)malloc_type_malloc(v26, 0x100004000313F17uLL);
      v103 = v4;
      v77 = *(double *)(v4 + 8);
      v78 = (float64x2_t *)malloc_type_malloc(8 * v8, 0x100004000313F17uLL);
      if (v78)
      {
        FundamentalEpipolarError_ABSVec(v105, v10, v8, (double *)v13, v78);
        if (v8 < 1)
        {
          v80 = 0;
        }
        else
        {
          v79 = 0;
          v80 = 0;
          v81 = v10 + 1;
          v82 = v105 + 1;
          do
          {
            if (v78->f64[v79] < v77)
            {
              if (v79 <= 0x7FF)
                __src[v79 + 2840] = 1;
              v83 = 16 * v80;
              *(_QWORD *)&v75[v83] = *(v82 - 1);
              v84 = (16 * v80) | 8;
              *(_QWORD *)&v75[v84] = *v82;
              *(_QWORD *)&v76[v83] = *(v81 - 1);
              *(_QWORD *)&v76[v84] = *v81;
              ++v80;
            }
            ++v79;
            v81 += 2;
            v82 += 2;
          }
          while (v8 != v79);
        }
      }
      else
      {
        v80 = 0;
      }
      free(v78);
      *(_DWORD *)&__src[2520] = v80;
      if (v80 >= *(_DWORD *)(v103 + 72))
      {
        __src[2524] = 1;
        AdjustYOpticalCenterForValidDistanceRange((uint64_t)v75, (uint64_t)v76, v80, v13, (double *)v103, (uint64_t)&v109);
        v85 = v116;
        v86 = v117;
        *(_OWORD *)(v13 + 96) = v115;
        *(_OWORD *)(v13 + 112) = v85;
        *(_OWORD *)(v13 + 128) = v86;
        v87 = v112;
        *(_OWORD *)(v13 + 32) = v111;
        *(_OWORD *)(v13 + 48) = v87;
        v88 = v114;
        *(_OWORD *)(v13 + 64) = v113;
        *(_OWORD *)(v13 + 80) = v88;
        v89 = v110;
        *(int8x16_t *)v13 = v109;
        *(_OWORD *)(v13 + 16) = v89;
        v90 = *(_OWORD *)(v13 + 64);
        *(_OWORD *)&__src[2608] = *(_OWORD *)(v13 + 80);
        v91 = *(_OWORD *)(v13 + 112);
        *(_OWORD *)&__src[2624] = *(_OWORD *)(v13 + 96);
        *(_OWORD *)&__src[2640] = v91;
        *(_OWORD *)&__src[2656] = *(_OWORD *)(v13 + 128);
        v92 = *(float64x2_t *)v13;
        *(_OWORD *)&__src[2544] = *(_OWORD *)(v13 + 16);
        v93 = *(_OWORD *)(v13 + 48);
        *(_OWORD *)&__src[2560] = *(_OWORD *)(v13 + 32);
        *(_OWORD *)&__src[2576] = v93;
        *(_OWORD *)&__src[2592] = v90;
        *(float64x2_t *)&__src[2528] = v92;
        v106 = 0;
        v107 = 0;
        v108 = 0;
        AdjustCalibrationFocalLengthAndOpticalCenterX_Gradient((uint64_t)v75, (uint64_t)v76, v80, (float64x2_t *)v13, (float64x2_t *)v103, (uint64_t)&v106, &v109);
        v94 = v116;
        v95 = v117;
        *(_OWORD *)(v13 + 96) = v115;
        *(_OWORD *)(v13 + 112) = v94;
        *(_OWORD *)(v13 + 128) = v95;
        v96 = v112;
        *(_OWORD *)(v13 + 32) = v111;
        *(_OWORD *)(v13 + 48) = v96;
        v97 = v114;
        *(_OWORD *)(v13 + 64) = v113;
        *(_OWORD *)(v13 + 80) = v97;
        v98 = v110;
        *(int8x16_t *)v13 = v109;
        *(_OWORD *)(v13 + 16) = v98;
        *(_QWORD *)&__src[2672] = v107;
        *(_DWORD *)&__src[2680] = v106;
        __src[2684] = BYTE4(v106);
        *(_QWORD *)&__src[2688] = v108;
        v99 = *(_OWORD *)(v13 + 112);
        *(_OWORD *)&__src[2792] = *(_OWORD *)(v13 + 96);
        *(_OWORD *)&__src[2808] = v99;
        *(_OWORD *)&__src[2824] = *(_OWORD *)(v13 + 128);
        v100 = *(_OWORD *)(v13 + 48);
        *(_OWORD *)&__src[2728] = *(_OWORD *)(v13 + 32);
        *(_OWORD *)&__src[2744] = v100;
        v101 = *(_OWORD *)(v13 + 80);
        *(_OWORD *)&__src[2760] = *(_OWORD *)(v13 + 64);
        *(_OWORD *)&__src[2776] = v101;
        v102 = *(_OWORD *)(v13 + 16);
        *(_OWORD *)&__src[2696] = *(_OWORD *)v13;
        *(_OWORD *)&__src[2712] = v102;
      }
      goto LABEL_40;
    }
    if (v32 < 1)
    {
      v41 = 0.0;
      v40 = 0.0;
      v39 = 0.0;
      v38 = 0.0;
    }
    else
    {
      if (v32 == 1)
      {
        v37 = 0;
        v38 = 0.0;
        v39 = 0.0;
        v40 = 0.0;
        v41 = 0.0;
      }
      else
      {
        v37 = v32 & 0xFFFFFFFE;
        v42 = v28 + 2;
        v43 = v27 + 2;
        v38 = 0.0;
        v44 = v37;
        v39 = 0.0;
        v40 = 0.0;
        v41 = 0.0;
        do
        {
          v45 = *(v43 - 2);
          v46 = *v43;
          v43 += 4;
          v47 = v46;
          v48 = *(v42 - 2);
          v49 = *v42;
          v42 += 4;
          v38 = v38 + v45 + v47;
          v39 = v39 + v48 + v49;
          v40 = v40 + v48 * v48 + v49 * v49;
          v41 = v41 + v45 * v48 + v47 * v49;
          v44 -= 2;
        }
        while (v44);
        if (v37 == v32)
          goto LABEL_23;
      }
      v50 = v32 - v37;
      v51 = 2 * v37;
      v52 = &v28[2 * v37];
      v53 = &v27[v51];
      do
      {
        v54 = *v53;
        v53 += 2;
        v55 = v54;
        v56 = *v52;
        v52 += 2;
        v41 = v41 + v55 * v56;
        v38 = v38 + v55;
        v39 = v39 + v56;
        v40 = v40 + v56 * v56;
        --v50;
      }
      while (v50);
    }
LABEL_23:
    v57 = *(double *)(v13 + 24);
    v58 = v40 * (double)v32 - v39 * v39;
    if (v58 <= 0.0 || (v59 = ((double)v32 * v41 - v38 * v39) / v58, v59 <= 0.0))
    {
      v61 = *(double *)(v13 + 8);
    }
    else
    {
      v60 = *(double *)(v13 + 128);
      v61 = *(double *)v13 / v59;
      if (v60 > 0.0)
        v57 = v57
            - (v57
             - *(double *)(v13 + 8) * (*(double *)(v13 + 64) / v60))
            + (*(double *)(v13 + 16) - (v40 * v38 - v41 * v39) / v58) / v59;
    }
    *(double *)(v13 + 8) = v61;
    *(double *)(v13 + 24) = v57;
    __src[157] = 1;
    v62 = *(_OWORD *)(v13 + 112);
    *(_OWORD *)&__src[256] = *(_OWORD *)(v13 + 96);
    *(_OWORD *)&__src[272] = v62;
    *(_OWORD *)&__src[288] = *(_OWORD *)(v13 + 128);
    v63 = *(_OWORD *)(v13 + 48);
    *(_OWORD *)&__src[192] = *(_OWORD *)(v13 + 32);
    *(_OWORD *)&__src[208] = v63;
    v64 = *(_OWORD *)(v13 + 64);
    *(_OWORD *)&__src[240] = *(_OWORD *)(v13 + 80);
    *(_OWORD *)&__src[224] = v64;
    v65 = *(float64x2_t *)v13;
    *(_OWORD *)&__src[176] = *(_OWORD *)(v13 + 16);
    *(float64x2_t *)&__src[160] = v65;
    goto LABEL_28;
  }
  v27 = 0;
  v28 = 0;
  v75 = 0;
  v76 = 0;
LABEL_41:
  free(v27);
  free(v28);
  free(v75);
  free(v76);
  if (v2)
    memcpy(v2, __src, 0x1E48uLL);
}

double AdaptiveCorrection_rotateCalModel(uint64_t a1, uint64_t a2, int8x16_t a3, int8x16_t a4, int8x16_t a5, __n128 a6, float32x2_t a7, float32x2_t a8, float32x2_t a9, float32x2_t a10)
{
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  float v16;
  int32x2_t v17;
  float v18;
  int32x2_t v19;

  if (a1 && a2)
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    v10 = *(_OWORD *)(a1 + 16);
    v11 = *(_OWORD *)(a1 + 32);
    v12 = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(a2 + 64) = v12;
    *(_OWORD *)(a2 + 16) = v10;
    *(_OWORD *)(a2 + 32) = v11;
    v13 = *(_OWORD *)(a1 + 80);
    v14 = *(_OWORD *)(a1 + 96);
    v15 = *(_OWORD *)(a1 + 128);
    *(_OWORD *)(a2 + 112) = *(_OWORD *)(a1 + 112);
    *(_OWORD *)(a2 + 128) = v15;
    *(_OWORD *)(a2 + 80) = v13;
    *(_OWORD *)(a2 + 96) = v14;
    *(float *)&v13 = *(double *)(a1 + 16);
    v16 = *(double *)(a1 + 32);
    v17 = (int32x2_t)vmla_n_f32(vmul_n_f32(a7, *(float *)&v13), a8, v16);
    v18 = *(double *)(a1 + 24);
    *(float *)&v13 = *(double *)(a1 + 40);
    v19 = (int32x2_t)vmla_n_f32(vmul_n_f32(a9, v18), a10, *(float *)&v13);
    *(float64x2_t *)(a2 + 16) = vcvtq_f64_f32((float32x2_t)vzip1_s32(v17, v19));
    *(float64x2_t *)(a2 + 32) = vcvtq_f64_f32((float32x2_t)vzip2_s32(v17, v19));
    *(double *)(a2 + 48) = *(float *)a3.i32;
    *(double *)(a2 + 56) = *(float *)a4.i32;
    *(double *)(a2 + 64) = *(float *)a5.i32;
    *(float64x2_t *)(a2 + 72) = vcvtq_f64_f32((float32x2_t)__PAIR64__(a3.u32[1], a6.n128_u32[0]));
    *(float64x2_t *)(a2 + 88) = vcvtq_f64_f32((float32x2_t)vzip2_s32(*(int32x2_t *)a4.i8, *(int32x2_t *)a5.i8));
    *(float64x2_t *)(a2 + 104) = vcvtq_f64_f32((float32x2_t)vext_s8((int8x8_t)a6.n128_u64[0], (int8x8_t)*(_OWORD *)&vextq_s8(a3, a3, 8uLL), 4uLL));
    *(float64x2_t *)(a2 + 120) = vcvtq_f64_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(a4, a4, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(a5, a5, 8uLL)));
    *(double *)a3.i64 = a6.n128_f32[2];
    *(double *)(a2 + 136) = a6.n128_f32[2];
  }
  return *(double *)a3.i64;
}

float64x2_t AdaptiveCorrection_rotateDistortionModel(uint64_t a1, _OWORD *a2, float64x2_t result, float32x2_t a4)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  if (a1)
  {
    if (a2)
    {
      v4 = *(_OWORD *)(a1 + 16);
      *a2 = *(_OWORD *)a1;
      a2[1] = v4;
      v5 = *(_OWORD *)(a1 + 32);
      v6 = *(_OWORD *)(a1 + 48);
      v7 = *(_OWORD *)(a1 + 80);
      a2[4] = *(_OWORD *)(a1 + 64);
      a2[5] = v7;
      a2[2] = v5;
      a2[3] = v6;
      v8 = *(_OWORD *)(a1 + 96);
      v9 = *(_OWORD *)(a1 + 112);
      v10 = *(_OWORD *)(a1 + 144);
      a2[8] = *(_OWORD *)(a1 + 128);
      a2[9] = v10;
      a2[6] = v8;
      a2[7] = v9;
      *(float *)&v8 = *(double *)(a1 + 16);
      *(float *)&v9 = *(double *)(a1 + 24);
      result = vcvtq_f64_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)&result.f64[0], *(float *)&v8), a4, *(float *)&v9));
      a2[1] = result;
    }
  }
  return result;
}

uint64_t AdaptiveCorrection_transformPointsWithMatrix(uint64_t a1, int a2, float64x2_t *a3, float32x2_t a4, float32x2_t a5)
{
  uint64_t v5;
  double *v6;
  float v7;
  float v8;

  v5 = 4294954516;
  if (!a1 || !a3)
    return v5;
  if (a2 >= 1)
  {
    v5 = a2;
    v6 = (double *)(a1 + 8);
    do
    {
      v7 = *(v6 - 1);
      v8 = *v6;
      *a3++ = vcvtq_f64_f32(vmla_n_f32(vmul_n_f32(a4, v7), a5, v8));
      v6 += 2;
      --v5;
    }
    while (v5);
    return v5;
  }
  return 0;
}

double AdaptiveCorrection_approximateCorrection@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  double result;
  double v11;
  double v12;
  double v13;
  double *v14;
  double *v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  double *v24;
  double *v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;

  v5 = *(_OWORD *)(a4 + 112);
  *(_OWORD *)(a5 + 96) = *(_OWORD *)(a4 + 96);
  *(_OWORD *)(a5 + 112) = v5;
  *(_OWORD *)(a5 + 128) = *(_OWORD *)(a4 + 128);
  v6 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(a5 + 32) = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(a5 + 48) = v6;
  v7 = *(_OWORD *)(a4 + 80);
  *(_OWORD *)(a5 + 64) = *(_OWORD *)(a4 + 64);
  *(_OWORD *)(a5 + 80) = v7;
  v8 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)a5 = *(_OWORD *)a4;
  *(_OWORD *)(a5 + 16) = v8;
  if (a3 < 1)
  {
    v13 = 0.0;
    v12 = 0.0;
    v11 = 0.0;
    result = 0.0;
    goto LABEL_10;
  }
  if (a3 == 1)
  {
    v9 = 0;
    result = 0.0;
    v11 = 0.0;
    v12 = 0.0;
    v13 = 0.0;
LABEL_8:
    v22 = a3 - v9;
    v23 = 16 * v9;
    v24 = (double *)(a2 + 16 * v9);
    v25 = (double *)(a1 + v23);
    do
    {
      v26 = *v25;
      v25 += 2;
      v27 = v26;
      v28 = *v24;
      v24 += 2;
      v13 = v13 + v27 * v28;
      result = result + v27;
      v11 = v11 + v28;
      v12 = v12 + v28 * v28;
      --v22;
    }
    while (v22);
    goto LABEL_10;
  }
  v9 = a3 & 0xFFFFFFFE;
  v14 = (double *)(a2 + 16);
  v15 = (double *)(a1 + 16);
  result = 0.0;
  v16 = v9;
  v11 = 0.0;
  v12 = 0.0;
  v13 = 0.0;
  do
  {
    v17 = *(v15 - 2);
    v18 = *v15;
    v15 += 4;
    v19 = v18;
    v20 = *(v14 - 2);
    v21 = *v14;
    v14 += 4;
    result = result + v17 + v19;
    v11 = v11 + v20 + v21;
    v12 = v12 + v20 * v20 + v21 * v21;
    v13 = v13 + v17 * v20 + v19 * v21;
    v16 -= 2;
  }
  while (v16);
  if (v9 != a3)
    goto LABEL_8;
LABEL_10:
  v29 = v12 * (double)a3 - v11 * v11;
  if (v29 > 0.0)
  {
    v30 = ((double)a3 * v13 - result * v11) / v29;
    if (v30 > 0.0)
    {
      v31 = *(double *)(a4 + 8);
      v33 = *(double *)(a4 + 16);
      v32 = *(double *)(a4 + 24);
      v34 = *(double *)(a4 + 64);
      v35 = *(double *)(a4 + 128);
      *(double *)(a5 + 8) = *(double *)a4 / v30;
      if (v35 > 0.0)
      {
        result = v32 - (v32 - v31 * (v34 / v35)) + (v33 - (v12 * result - v13 * v11) / v29) / v30;
        *(double *)(a5 + 24) = result;
      }
    }
  }
  return result;
}

uint64_t AdaptiveCorrection_applyDistortionModelSimplified(const double *a1, unsigned int a2, float64x2_t *a3, double *a4)
{
  uint64_t v4;
  double v5;
  float64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  float64x2_t v15;
  uint64_t v16;
  uint64_t v17;
  float64x2_t *v18;
  float64x2_t *v19;
  float64x2_t v20;
  float64x2_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  const double *v42;
  double *v43;
  uint64_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2x2_t v51;

  v4 = 4294954516;
  if (a1 && (int)a2 >= 1 && a3 && a4)
  {
    v5 = a3->f64[0];
    v6 = a3->f64[1] * a3->f64[0];
    v7 = a3[2].f64[0] + v6 * a3[6].f64[0];
    v8 = a3[2].f64[1] + v6 * a3[6].f64[1];
    v9 = a3[3].f64[0] + v6 * a3[7].f64[0];
    v10 = a3[3].f64[1] + v6 * a3[7].f64[1];
    v11 = a3[4].f64[0] + v6 * a3[8].f64[0];
    v12 = a3[4].f64[1] + v6 * a3[8].f64[1];
    v13 = a3[5].f64[0] + v6 * a3[9].f64[0];
    v14 = a3[5].f64[1] + v6 * a3[9].f64[1];
    v15 = a3[1];
    if (a2 >= 2 && (&a1[2 * a2] <= a4 || &a4[2 * a2] <= a1))
    {
      v28 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v15.f64[0], 0);
      v29 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v15, 1);
      v30 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v7, 0);
      v31 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v9, 0);
      v32 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v10, 0);
      v33 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v11, 0);
      v34 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v12, 0);
      v16 = a2 & 0xFFFFFFFE;
      v35 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v13, 0);
      v36 = (float64x2_t)vdupq_n_s64(0x4059000000000000uLL);
      __asm { FMOV            V27.2D, #1.0 }
      v42 = a1;
      v43 = a4;
      v44 = v16;
      v45 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v14, 0);
      do
      {
        v51 = vld2q_f64(v42);
        v42 += 4;
        v46 = vsubq_f64(v51.val[0], v28);
        v51.val[0] = vsubq_f64(v51.val[1], v29);
        v51.val[1] = vmulq_n_f64(vsqrtq_f64(vmlaq_f64(vmulq_f64(v51.val[0], v51.val[0]), v46, v46)), v5);
        v51.val[1] = vmulq_f64(v51.val[1], v51.val[1]);
        v47 = vmulq_f64(v51.val[1], v51.val[1]);
        v48 = vmulq_f64(v51.val[1], v47);
        v49 = vmulq_f64(v47, v47);
        v51.val[1] = vaddq_f64(vdivq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vaddq_f64(v30, vmulq_n_f64(v51.val[1], v8)), v47, v31), v48, v32), v49, v33), vmulq_f64(v47, v48), v34), vmulq_f64(v48, v48), v35), vmulq_f64(v49, v48), v45), v36), _Q27);
        v51.val[1] = (float64x2_t)vbslq_s8((int8x16_t)vcgtzq_f64(v51.val[1]), (int8x16_t)vdivq_f64(_Q27, v51.val[1]), (int8x16_t)_Q27);
        v51.val[0] = vmulq_f64(v51.val[0], v51.val[1]);
        v51.val[1] = vaddq_f64(v28, vmulq_f64(v46, v51.val[1]));
        v50 = vaddq_f64(v29, v51.val[0]);
        vst2q_f64(v43, *(float64x2x2_t *)((char *)&v51 + 16));
        v43 += 4;
        v44 -= 2;
      }
      while (v44);
      if (v16 == a2)
        return 0;
    }
    else
    {
      v16 = 0;
    }
    v4 = a2 - v16;
    v17 = 2 * v16;
    v18 = (float64x2_t *)&a4[2 * v16];
    v19 = (float64x2_t *)&a1[v17];
    do
    {
      v20 = *v19++;
      v21 = vsubq_f64(v20, v15);
      v22 = sqrt(vmlad_n_f64(COERCE_DOUBLE(*(_QWORD *)&vmulq_f64(v21, v21).f64[1]), v21.f64[0], v21.f64[0]));
      v23 = v5 * v22 * (v5 * v22);
      v24 = v23 * (v23 * v23);
      v25 = (v7
           + v8 * v23
           + v9 * (v23 * v23)
           + v10 * v24
           + v11 * (v23 * v23 * (v23 * v23))
           + v12 * (v23 * v23 * v24)
           + v13 * (v24 * v24)
           + v14 * (v23 * v23 * (v23 * v23) * v24))
          / 100.0
          + 1.0;
      if (v25 <= 0.0)
        v26 = 1.0;
      else
        v26 = 1.0 / v25;
      *v18++ = vaddq_f64(v15, vmulq_n_f64(v21, v26));
      --v4;
    }
    while (v4);
  }
  return v4;
}

const double *AdaptiveCorrection_applyDistortionModel(const double *result, unsigned int a2, double *a3, double *a4, double a5, double a6, double a7)
{
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  uint64_t v23;
  float64x2_t v24;
  float64x2_t v25;
  const double *v31;
  double *v32;
  uint64_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  uint64_t v39;
  uint64_t v40;
  double *v41;
  double *v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  float64x2x2_t v50;
  float64x2x2_t v51;

  if ((int)a2 >= 1)
  {
    v7 = *(uint64_t *)a3;
    v8 = a3[1];
    v9 = *((uint64_t *)a3 + 2);
    v10 = *((uint64_t *)a3 + 3);
    v11 = *((uint64_t *)a3 + 4);
    v12 = *((uint64_t *)a3 + 5);
    v13 = *((uint64_t *)a3 + 6);
    v14 = *((uint64_t *)a3 + 7);
    if (a2 == 1 || (&result[2 * a2] > a4 ? (v15 = &a4[2 * a2] > result) : (v15 = 0), v15))
    {
      v23 = 0;
    }
    else
    {
      v16 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a5, 0);
      v17 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a6, 0);
      v18 = (float64x2_t)vdupq_lane_s64(v7, 0);
      v19 = (float64x2_t)vdupq_lane_s64(v9, 0);
      v20 = (float64x2_t)vdupq_lane_s64(v10, 0);
      v21 = (float64x2_t)vdupq_lane_s64(v11, 0);
      v22 = (float64x2_t)vdupq_lane_s64(v12, 0);
      v23 = a2 & 0xFFFFFFFE;
      v24 = (float64x2_t)vdupq_lane_s64(v13, 0);
      v25 = (float64x2_t)vdupq_n_s64(0x4059000000000000uLL);
      __asm { FMOV            V28.2D, #1.0 }
      v31 = result;
      v32 = a4;
      v33 = v23;
      v34 = (float64x2_t)vdupq_lane_s64(v14, 0);
      do
      {
        v51 = vld2q_f64(v31);
        v31 += 4;
        v35 = vsubq_f64(v51.val[0], v16);
        v51.val[0] = vsubq_f64(v51.val[1], v17);
        v51.val[1] = vmulq_n_f64(vsqrtq_f64(vmlaq_f64(vmulq_f64(v51.val[0], v51.val[0]), v35, v35)), a7);
        v51.val[1] = vmulq_f64(v51.val[1], v51.val[1]);
        v36 = vmulq_f64(v51.val[1], v51.val[1]);
        v37 = vmulq_f64(v51.val[1], v36);
        v38 = vmulq_f64(v36, v36);
        v51.val[1] = vaddq_f64(vdivq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vaddq_f64(v18, vmulq_n_f64(v51.val[1], v8)), v36, v19), v37, v20), v38, v21), vmulq_f64(v36, v37), v22), vmulq_f64(v37, v37), v24), vmulq_f64(v38, v37), v34), v25), _Q28);
        v51.val[1] = (float64x2_t)vbslq_s8((int8x16_t)vcgtzq_f64(v51.val[1]), (int8x16_t)vdivq_f64(_Q28, v51.val[1]), (int8x16_t)_Q28);
        v50.val[0] = vaddq_f64(vmulq_f64(v35, v51.val[1]), v16);
        v50.val[1] = vaddq_f64(vmulq_f64(v51.val[0], v51.val[1]), v17);
        vst2q_f64(v32, v50);
        v32 += 4;
        v33 -= 2;
      }
      while (v33);
      if (v23 == a2)
        return result;
    }
    v39 = a2 - v23;
    v40 = (16 * v23) | 8;
    v41 = (double *)((char *)a4 + v40);
    v42 = (double *)((char *)result + v40);
    do
    {
      v43 = *(v42 - 1) - a5;
      v44 = *v42 - a6;
      v45 = sqrt(v44 * v44 + v43 * v43);
      v46 = v45 * a7 * (v45 * a7);
      v47 = v46 * (v46 * v46);
      v48 = (*(double *)&v7
           + v8 * v46
           + *(double *)&v9 * (v46 * v46)
           + *(double *)&v10 * v47
           + *(double *)&v11 * (v46 * v46 * (v46 * v46))
           + *(double *)&v12 * (v46 * v46 * v47)
           + *(double *)&v13 * (v47 * v47)
           + *(double *)&v14 * (v46 * v46 * (v46 * v46) * v47))
          / 100.0
          + 1.0;
      if (v48 <= 0.0)
        v49 = 1.0;
      else
        v49 = 1.0 / v48;
      *(v41 - 1) = v43 * v49 + a5;
      *v41 = v44 * v49 + a6;
      v41 += 2;
      v42 += 2;
      --v39;
    }
    while (v39);
  }
  return result;
}

uint64_t AdaptiveCorrection_computeStereoRectificationHomographies(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, float32x4_t a7)
{
  int8x16_t v7;
  int32x4_t v8;
  uint64_t v9;
  float v10;
  float32x4_t v11;
  float v12;
  float v13;
  float v14;
  int32x2_t v15;
  float64x2_t v16;
  float32_t v17;
  float64x2_t v18;
  int32x2_t v19;
  float32x4_t v20;
  float32_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  int32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  int32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  int32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int8x16_t v52;
  int32x4_t v53;
  float32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  float32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  int32x4_t v65;
  double v66;
  double v67;
  unsigned int v68;
  unsigned int v69;
  float32x4_t v70;
  int32x2_t v71;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float v78;
  float v79;
  float v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  unsigned int v93;
  unint64_t v94;
  int32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;

  v9 = 4294954516;
  if (a1 && a2 && a3 && a4)
  {
    v10 = *(double *)a1;
    if (v10 <= 0.0)
      return 4294954516;
    v11.i32[0] = 0;
    v11.i64[1] = 0;
    v12 = *(double *)(a1 + 72);
    v13 = *(double *)(a1 + 104);
    v14 = *(double *)(a1 + 136);
    v15 = (int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a1 + 48));
    a7.f32[0] = *(double *)(a1 + 64);
    v16 = *(float64x2_t *)(a1 + 80);
    v17 = *(double *)(a1 + 96);
    v18 = *(float64x2_t *)(a1 + 112);
    *(float32x2_t *)&v18.f64[0] = vcvt_f32_f64(v18);
    v19 = vzip1_s32(v15, *(int32x2_t *)&v18.f64[0]);
    *(int32x2_t *)v20.f32 = vzip1_s32(v19, (int32x2_t)vcvt_f32_f64(v16));
    *(int32x2_t *)&v20.u32[2] = vdup_lane_s32(v19, 1);
    v21 = *(double *)(a1 + 128);
    a7.f32[1] = v17;
    a7.f32[2] = v21;
    v22 = (float32x4_t)vuzp2q_s32((int32x4_t)vcvt_hight_f32_f64(v15, v16), (int32x4_t)v18);
    v23 = vmlaq_f32(vmlaq_f32(vnegq_f32(v20), (float32x4_t)0, v22), (float32x4_t)0, a7);
    v24 = vmulq_f32(v20, (float32x4_t)0);
    __asm { FMOV            V17.4S, #-1.0 }
    v30 = vmlaq_f32(vmlaq_f32(v24, _Q17, v22), (float32x4_t)0, a7);
    v31 = vaddq_f32(a7, vmlaq_f32(v24, (float32x4_t)0, v22));
    v32 = vmlaq_n_f32(vmulq_n_f32((float32x4_t)xmmword_20B6D29E0, v12), (float32x4_t)xmmword_20B6D29F0, v13);
    v33 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_20B6D29E0, v23.f32[0]), (float32x4_t)xmmword_20B6D29F0, *(float32x2_t *)v23.f32, 1), (float32x4_t)xmmword_20B6D29D0, v23, 2);
    v34 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_20B6D29E0, v30.f32[0]), (float32x4_t)xmmword_20B6D29F0, *(float32x2_t *)v30.f32, 1), (float32x4_t)xmmword_20B6D29D0, v30, 2);
    v35 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_20B6D29E0, v31.f32[0]), (float32x4_t)xmmword_20B6D29F0, *(float32x2_t *)v31.f32, 1), (float32x4_t)xmmword_20B6D29D0, v31, 2);
    v36 = vmlaq_n_f32(v32, (float32x4_t)xmmword_20B6D29D0, v14);
    v37 = (float32x4_t)vtrn2q_s32((int32x4_t)v33, (int32x4_t)v34);
    v37.i32[2] = v35.i32[1];
    v38 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v33, (int32x4_t)v35), (int32x4_t)v34), v36.f32[0]), v37, *(float32x2_t *)v36.f32, 1), (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)v33, (int32x4_t)v35), vdupq_laneq_s32((int32x4_t)v34, 2)), v36, 2);
    v39 = vnegq_f32(v38);
    v40 = (int32x4_t)vmulq_f32(v38, v38);
    v40.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v40, 2), vadd_f32(*(float32x2_t *)v40.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v40.i8, 1))).u32[0];
    *(float32x2_t *)v23.f32 = vrsqrte_f32((float32x2_t)v40.u32[0]);
    *(float32x2_t *)v23.f32 = vmul_f32(*(float32x2_t *)v23.f32, vrsqrts_f32((float32x2_t)v40.u32[0], vmul_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v23.f32)));
    v41 = vmulq_n_f32(v39, vmul_f32(*(float32x2_t *)v23.f32, vrsqrts_f32((float32x2_t)v40.u32[0], vmul_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v23.f32))).f32[0]);
    v42 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v41, (int32x4_t)v41), (int8x16_t)v41, 0xCuLL);
    v43 = vmlaq_f32(vmulq_f32(v42, (float32x4_t)xmmword_20B6D2A00), (float32x4_t)xmmword_20B6D2A10, v41);
    v44 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v43, (int32x4_t)v43), (int8x16_t)v43, 0xCuLL);
    v45 = (int32x4_t)vmulq_f32(v43, v43);
    v45.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v45.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v45, 2), *(float32x2_t *)v45.i8)).u32[0];
    *(float32x2_t *)v30.f32 = vrsqrte_f32((float32x2_t)v45.u32[0]);
    *(float32x2_t *)v30.f32 = vmul_f32(*(float32x2_t *)v30.f32, vrsqrts_f32((float32x2_t)v45.u32[0], vmul_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v30.f32)));
    v46 = vmulq_n_f32(v44, vmul_f32(*(float32x2_t *)v30.f32, vrsqrts_f32((float32x2_t)v45.u32[0], vmul_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v30.f32))).f32[0]);
    v47 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v46, (int32x4_t)v46), (int8x16_t)v46, 0xCuLL), vnegq_f32(v41)), v46, v42);
    v48 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v47, (int32x4_t)v47), (int8x16_t)v47, 0xCuLL);
    v49 = (int32x4_t)vmulq_f32(v47, v47);
    v49.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v49.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v49, 2), *(float32x2_t *)v49.i8)).u32[0];
    *(float32x2_t *)v30.f32 = vrsqrte_f32((float32x2_t)v49.u32[0]);
    *(float32x2_t *)v30.f32 = vmul_f32(*(float32x2_t *)v30.f32, vrsqrts_f32((float32x2_t)v49.u32[0], vmul_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v30.f32)));
    v50 = vmulq_n_f32(v48, vmul_f32(*(float32x2_t *)v30.f32, vrsqrts_f32((float32x2_t)v49.u32[0], vmul_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v30.f32))).f32[0]);
    v7.i32[0] = 1.0;
    v30.i64[0] = 0x8000000080000000;
    v30.i64[1] = 0x8000000080000000;
    v51 = vmulq_n_f32(v41, *(float *)vbslq_s8((int8x16_t)v30, v7, (int8x16_t)v41).i32);
    v41.i32[0] = v46.i32[1];
    v52 = vbslq_s8((int8x16_t)v30, v7, (int8x16_t)v41);
    v53 = (int32x4_t)vmulq_n_f32(v46, *(float *)v52.i32);
    v52.i32[0] = v50.i32[2];
    v54 = vmulq_n_f32(v50, *(float *)vbslq_s8((int8x16_t)v30, v7, v52).i32);
    v55 = vzip1q_s32((int32x4_t)v51, (int32x4_t)v54);
    v56 = vzip1q_s32(v55, v53);
    v57 = (float32x4_t)vzip2q_s32(v55, vzip1q_s32(v53, (int32x4_t)0));
    v58 = vzip1q_s32(vzip2q_s32((int32x4_t)v51, (int32x4_t)v54), vdupq_laneq_s32(v53, 2));
    v59 = vzip1q_s32(v56, v58);
    v60 = vzip2q_s32(v56, v58);
    v61 = vzip1q_s32((int32x4_t)v57, (int32x4_t)0);
    v62 = (float32x4_t)vtrn2q_s32(v56, v53);
    v62.i32[2] = v58.i32[1];
    v63 = vmulq_f32((float32x4_t)vzip1q_s32(v59, v61), (float32x4_t)0);
    v64 = vaddq_f32((float32x4_t)vzip1q_s32(v60, vdupq_lane_s32(*(int32x2_t *)v54.f32, 1)), vmlaq_f32(v63, (float32x4_t)0, v62));
    if (v64.f32[2] <= 0.0)
    {
      return 4294954516;
    }
    else
    {
      v9 = 0;
      v65 = (int32x4_t)xmmword_20B6D2A10;
      v66 = *(double *)(a1 + 8);
      *(float *)v8.i32 = *(double *)(a1 + 16);
      v67 = *(double *)(a1 + 24);
      *(float *)&v68 = *(double *)(a1 + 32);
      *(float *)&v69 = *(double *)a1;
      v11.f32[1] = *(float *)&v69;
      v70 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v64, 2);
      v71 = (int32x2_t)vdivq_f32(v64, v70).u64[0];
      v70.f32[0] = -*(float *)v71.i32;
      v65.i32[2] = v71.i32[0];
      __asm { FMOV            V31.4S, #1.0 }
      *(float *)&v67 = v67;
      v73 = vzip2q_s32(vdupq_lane_s32(*(int32x2_t *)v70.f32, 0), _Q31);
      v74 = vzip2q_s32(vdupq_lane_s32(*(int32x2_t *)&v67, 0), _Q31);
      v75 = vzip2q_s32(v65, _Q31);
      v76.i64[1] = _Q31.i64[1];
      v76.i64[0] = __PAIR64__(v68, v8.u32[0]);
      v77 = (float32x4_t)vzip2q_s32(v59, v61);
      _Q31.i64[0] = *(_QWORD *)(a1 + 40);
      v78 = 1.0 / v10;
      v79 = (float)-*(float *)v8.i32 / v10;
      v80 = (float)-*(float *)&v68 / v10;
      *(float *)v8.i32 = -*(float *)&v71.i32[1];
      v81 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v51, v78), (float32x4_t)0, v77), (float32x4_t)0, v54);
      v82 = vmlaq_f32(vmlaq_n_f32(v63, v77, v78), (float32x4_t)0, v54);
      v83 = vaddq_f32(v54, vmlaq_n_f32(vmulq_n_f32(v51, v79), v77, v80));
      v84 = (float32x4_t)vzip1q_s32(v73, v8);
      v85 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_20B6D2A10, v81.f32[0]), (float32x4_t)xmmword_20B6D2A20, *(float32x2_t *)v81.f32, 1), v84, v81, 2);
      v86 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_20B6D2A10, v82.f32[0]), (float32x4_t)xmmword_20B6D2A20, *(float32x2_t *)v82.f32, 1), v84, v82, 2);
      v87 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_20B6D2A10, v83.f32[0]), (float32x4_t)xmmword_20B6D2A20, *(float32x2_t *)v83.f32, 1), v84, v83, 2);
      v88 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v69, v85.f32[0]), v11, *(float32x2_t *)v85.f32, 1), v76, v85, 2);
      v89 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v69, v86.f32[0]), v11, *(float32x2_t *)v86.f32, 1), v76, v86, 2);
      v90 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v69, v87.f32[0]), v11, *(float32x2_t *)v87.f32, 1), v76, v87, 2);
      *(_DWORD *)(a2 + 8) = v88.i32[2];
      *(_DWORD *)(a2 + 24) = v89.i32[2];
      *(_DWORD *)(a2 + 40) = v90.i32[2];
      v91 = (float32x4_t)vzip1q_s32((int32x4_t)v51, v53);
      v91.i32[2] = v54.i32[0];
      v92 = (float32x4_t)vzip2q_s32((int32x4_t)v51, v53);
      v92.i32[2] = v54.i32[2];
      *(float *)&v93 = v66;
      LODWORD(v94) = 0;
      HIDWORD(v94) = v93;
      v95 = vdupq_lane_s32(v71, 1);
      *(float *)v65.i32 = *(double *)_Q31.i64;
      v96 = (float32x4_t)vzip1q_s32(v74, v65);
      v97 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v33, v85.f32[0]), v34, *(float32x2_t *)v85.f32, 1), v35, v85, 2);
      v98 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v33, v86.f32[0]), v34, *(float32x2_t *)v86.f32, 1), v35, v86, 2);
      v99 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v33, v87.f32[0]), v34, *(float32x2_t *)v87.f32, 1), v35, v87, 2);
      v100 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v93, v97.f32[0]), (float32x4_t)v94, *(float32x2_t *)v97.f32, 1), v96, v97, 2);
      v101 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v93, v98.f32[0]), (float32x4_t)v94, *(float32x2_t *)v98.f32, 1), v96, v98, 2);
      v102 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v93, v99.f32[0]), (float32x4_t)v94, *(float32x2_t *)v99.f32, 1), v96, v99, 2);
      v103 = (float32x4_t)vzip1q_s32(v75, v95);
      v104 = vmlaq_f32(vmlaq_f32(vmulq_n_f32((float32x4_t)0x3F800000u, v78), (float32x4_t)0, (float32x4_t)xmmword_20B6D2A20), (float32x4_t)0, v103);
      v105 = vmlaq_f32(vmlaq_n_f32(vmulq_f32((float32x4_t)0x3F800000u, (float32x4_t)0), (float32x4_t)xmmword_20B6D2A20, v78), (float32x4_t)0, v103);
      v106 = vaddq_f32(v103, vmlaq_n_f32(vmulq_n_f32((float32x4_t)0x3F800000u, v79), (float32x4_t)xmmword_20B6D2A20, v80));
      v107 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v91, v104.f32[0]), v57, *(float32x2_t *)v104.f32, 1), v92, v104, 2);
      v108 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v91, v105.f32[0]), v57, *(float32x2_t *)v105.f32, 1), v92, v105, 2);
      *(_QWORD *)a2 = v88.i64[0];
      *(_DWORD *)(a2 + 12) = 0;
      *(_QWORD *)(a2 + 16) = v89.i64[0];
      *(_DWORD *)(a2 + 28) = 0;
      *(_QWORD *)(a2 + 32) = v90.i64[0];
      *(_DWORD *)(a2 + 44) = 0;
      *(_DWORD *)(a3 + 8) = v100.i32[2];
      *(_QWORD *)a3 = v100.i64[0];
      *(_DWORD *)(a3 + 12) = 0;
      *(_DWORD *)(a3 + 24) = v101.i32[2];
      v109 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v91, v106.f32[0]), v57, *(float32x2_t *)v106.f32, 1), v92, v106, 2);
      v110 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v69, v107.f32[0]), v11, *(float32x2_t *)v107.f32, 1), v76, v107, 2);
      v111 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v69, v108.f32[0]), v11, *(float32x2_t *)v108.f32, 1), v76, v108, 2);
      *(_QWORD *)(a3 + 16) = v101.i64[0];
      *(_DWORD *)(a3 + 28) = 0;
      *(_DWORD *)(a3 + 40) = v102.i32[2];
      *(_QWORD *)(a3 + 32) = v102.i64[0];
      *(_DWORD *)(a3 + 44) = 0;
      *(_QWORD *)a4 = v110.i64[0];
      *(_DWORD *)(a4 + 8) = v110.i32[2];
      *(_DWORD *)(a4 + 12) = 0;
      *(_QWORD *)(a4 + 16) = v111.i64[0];
      *(_DWORD *)(a4 + 24) = v111.i32[2];
      v112 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v69, v109.f32[0]), v11, *(float32x2_t *)v109.f32, 1), v76, v109, 2);
      *(_DWORD *)(a4 + 28) = 0;
      *(_QWORD *)(a4 + 32) = v112.i64[0];
      *(_DWORD *)(a4 + 40) = v112.i32[2];
      *(_DWORD *)(a4 + 44) = 0;
    }
  }
  return v9;
}

double FundamentalEpipolarErrorForCalModel(double *a1, uint64_t a2, uint64_t a3, int a4)
{
  double v5;

  v5 = 0.0;
  FundamentalEpipolarError_MeanVal(a2, a3, a4, a1, &v5);
  return v5;
}

void sub_20B66B250(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B66B2CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B66B55C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B66B61C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B66B738(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B66B7F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B66B910(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void DisparityToDepth::RansacLine2DModel::~RansacLine2DModel(DisparityToDepth::RansacLine2DModel *this)
{
  JUMPOUT(0x20BD36498);
}

float DisparityToDepth::RansacLine2DModel::fit(uint64_t a1, float **a2, float **a3)
{
  float32x4_t *v3;
  float *v4;
  float32x4_t *v5;
  float *v6;
  unint64_t v7;
  uint64_t v8;
  double v9;
  float *v10;
  float32x4_t *v11;
  uint64_t v12;
  float32x4_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float v18;
  unint64_t v19;
  uint64_t v20;
  double v21;
  float *v22;
  float32x4_t *v23;
  uint64_t v24;
  float32x4_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float v30;
  unint64_t v31;
  double v32;
  float *v33;
  float32x4_t *v34;
  uint64_t v35;
  float32x4_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float v41;
  double v42;
  double v43;
  float *v44;
  float32x4_t *v45;
  uint64_t v46;
  float32x4_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  double v52;
  float v53;
  unint64_t v54;
  float v55;
  unint64_t v56;
  int v57;
  float result;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t *v61;
  unint64_t v62;
  float32x4_t v63;
  float32x4_t v64;
  unsigned int v65;
  double v66;
  double v67;
  float *v68;
  float32x4_t *v69;
  uint64_t v70;
  float32x4_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float v76;
  double v77;
  float v78;
  double v79;
  float *v80;
  double v81;
  float32x4_t *v82;
  uint64_t v83;
  float32x4_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  unint64_t v94;
  int v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t *v98;
  float32x4_t *v99;
  unint64_t v100;
  float32x4_t v101;
  float32x4_t v102;
  unsigned int v103;
  float v104;

  v3 = (float32x4_t *)*a2;
  v4 = a2[1];
  if (*a2 == v4 || (v5 = (float32x4_t *)*a3, v6 = a3[1], *a3 == v6))
  {
    *(_DWORD *)(a1 + 8) = 0;
    result = 0.0;
    *(_DWORD *)(a1 + 12) = 0;
    return result;
  }
  v7 = (char *)v4 - (char *)v3 - 4;
  v8 = (v7 >> 2) + 1;
  v9 = 0.0;
  v10 = *a2;
  if (v7 <= 0x1B)
    goto LABEL_8;
  v11 = v3 + 1;
  v12 = v8 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v13 = v11[-1];
    v14 = vcvt_hight_f64_f32(v13);
    v15 = vcvtq_f64_f32(*(float32x2_t *)v13.f32);
    v16 = vcvt_hight_f64_f32(*v11);
    v17 = vcvtq_f64_f32(*(float32x2_t *)v11->f32);
    v9 = v9 + v15.f64[0] + v15.f64[1] + v14.f64[0] + v14.f64[1] + v17.f64[0] + v17.f64[1] + v16.f64[0] + v16.f64[1];
    v11 += 2;
    v12 -= 8;
  }
  while (v12);
  if (v8 != (v8 & 0x7FFFFFFFFFFFFFF8))
  {
    v10 = &v3->f32[v8 & 0x7FFFFFFFFFFFFFF8];
    do
    {
LABEL_8:
      v18 = *v10++;
      v9 = v9 + v18;
    }
    while (v10 != v4);
  }
  v19 = (char *)v6 - (char *)v5 - 4;
  v20 = (v19 >> 2) + 1;
  v21 = 0.0;
  v22 = *a3;
  if (v19 < 0x1C)
    goto LABEL_14;
  v23 = v5 + 1;
  v24 = v20 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v25 = v23[-1];
    v26 = vcvt_hight_f64_f32(v25);
    v27 = vcvtq_f64_f32(*(float32x2_t *)v25.f32);
    v28 = vcvt_hight_f64_f32(*v23);
    v29 = vcvtq_f64_f32(*(float32x2_t *)v23->f32);
    v21 = v21 + v27.f64[0] + v27.f64[1] + v26.f64[0] + v26.f64[1] + v29.f64[0] + v29.f64[1] + v28.f64[0] + v28.f64[1];
    v23 += 2;
    v24 -= 8;
  }
  while (v24);
  if (v20 != (v20 & 0x7FFFFFFFFFFFFFF8))
  {
    v22 = &v5->f32[v20 & 0x7FFFFFFFFFFFFFF8];
    do
    {
LABEL_14:
      v30 = *v22++;
      v21 = v21 + v30;
    }
    while (v22 != v6);
  }
  v31 = ((char *)v4 - (char *)v3) >> 2;
  v32 = 0.0;
  v33 = (float *)v3;
  if (v7 < 0x1C)
    goto LABEL_20;
  v34 = v3 + 1;
  v35 = v8 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v36 = v34[-1];
    v37 = vcvt_hight_f64_f32(v36);
    v38 = vcvtq_f64_f32(*(float32x2_t *)v36.f32);
    v39 = vcvt_hight_f64_f32(*v34);
    v40 = vcvtq_f64_f32(*(float32x2_t *)v34->f32);
    v32 = v32 + v38.f64[0] + v38.f64[1] + v37.f64[0] + v37.f64[1] + v40.f64[0] + v40.f64[1] + v39.f64[0] + v39.f64[1];
    v34 += 2;
    v35 -= 8;
  }
  while (v35);
  if (v8 != (v8 & 0x7FFFFFFFFFFFFFF8))
  {
    v33 = &v3->f32[v8 & 0x7FFFFFFFFFFFFFF8];
    do
    {
LABEL_20:
      v41 = *v33++;
      v32 = v32 + v41;
    }
    while (v33 != v4);
  }
  v42 = (double)v31;
  v43 = 0.0;
  v44 = (float *)v3;
  if (v7 >= 0x1C)
  {
    v45 = v3 + 1;
    v46 = v8 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v47 = v45[-1];
      v48 = vcvt_hight_f64_f32(v47);
      v49 = vcvtq_f64_f32(*(float32x2_t *)v47.f32);
      v50 = vcvt_hight_f64_f32(*v45);
      v51 = vcvtq_f64_f32(*(float32x2_t *)v45->f32);
      v52 = v43 + v49.f64[0] + v49.f64[1] + v48.f64[0] + v48.f64[1] + v51.f64[0] + v51.f64[1] + v50.f64[0];
      v43 = v52 + v50.f64[1];
      v45 += 2;
      v46 -= 8;
    }
    while (v46);
    if (v8 == (v8 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_27;
    v44 = &v3->f32[v8 & 0x7FFFFFFFFFFFFFF8];
  }
  do
  {
    v53 = *v44++;
    v52 = v53;
    v43 = v43 + v53;
  }
  while (v44 != v4);
LABEL_27:
  *(float *)&v52 = v32 / v42;
  *(float *)&v43 = v43 / v42;
  if (v31 <= 1)
    v54 = 1;
  else
    v54 = ((char *)v4 - (char *)v3) >> 2;
  v55 = 0.0;
  if (v54 < 0xC)
  {
    v56 = 0;
    v57 = 0;
LABEL_38:
    v65 = v57 + 1;
    do
    {
      v55 = v55 + (float)((float)(v3->f32[v56] - *(float *)&v52) * (float)(v3->f32[v56] - *(float *)&v43));
      v56 = v65++;
    }
    while (v31 > v56);
    goto LABEL_40;
  }
  v57 = 0;
  v56 = 0;
  if (!(_DWORD)v54)
    goto LABEL_38;
  if ((v54 - 1) >> 32)
    goto LABEL_38;
  v59 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v52, 0);
  v56 = v54 & 0xFFFFFFFFFFFFFFF8;
  v60 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v43, 0);
  v61 = v3 + 1;
  v62 = v54 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v63 = vmulq_f32(vsubq_f32(v61[-1], v59), vsubq_f32(v61[-1], v60));
    v64 = vmulq_f32(vsubq_f32(*v61, v59), vsubq_f32(*v61, v60));
    v55 = (float)((float)((float)((float)((float)((float)((float)(v55 + v63.f32[0]) + v63.f32[1]) + v63.f32[2])
                                        + v63.f32[3])
                                + v64.f32[0])
                        + v64.f32[1])
                + v64.f32[2])
        + v64.f32[3];
    v61 += 2;
    v62 -= 8;
  }
  while (v62);
  v57 = v54 & 0xFFFFFFF8;
  if (v54 != v56)
    goto LABEL_38;
LABEL_40:
  v66 = (double)(unint64_t)(((char *)v6 - (char *)v5) >> 2);
  v67 = 0.0;
  v68 = (float *)v3;
  if (v7 < 0x1C)
    goto LABEL_45;
  v69 = v3 + 1;
  v70 = v8 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v71 = v69[-1];
    v72 = vcvt_hight_f64_f32(v71);
    v73 = vcvtq_f64_f32(*(float32x2_t *)v71.f32);
    v74 = vcvt_hight_f64_f32(*v69);
    v75 = vcvtq_f64_f32(*(float32x2_t *)v69->f32);
    v67 = v67 + v73.f64[0] + v73.f64[1] + v72.f64[0] + v72.f64[1] + v75.f64[0] + v75.f64[1] + v74.f64[0] + v74.f64[1];
    v69 += 2;
    v70 -= 8;
  }
  while (v70);
  if (v8 != (v8 & 0x7FFFFFFFFFFFFFF8))
  {
    v68 = &v3->f32[v8 & 0x7FFFFFFFFFFFFFF8];
    do
    {
LABEL_45:
      v76 = *v68++;
      v67 = v67 + v76;
    }
    while (v68 != v4);
  }
  v77 = v9 / v42;
  v78 = (float)(v31 - 1);
  v79 = 0.0;
  v80 = (float *)v5;
  v81 = v21 / v66;
  if (v19 < 0x1C)
    goto LABEL_51;
  v82 = v5 + 1;
  v83 = v20 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v84 = v82[-1];
    v85 = vcvt_hight_f64_f32(v84);
    v86 = vcvtq_f64_f32(*(float32x2_t *)v84.f32);
    v87 = vcvt_hight_f64_f32(*v82);
    v88 = vcvtq_f64_f32(*(float32x2_t *)v82->f32);
    v79 = v79 + v86.f64[0] + v86.f64[1] + v85.f64[0] + v85.f64[1] + v88.f64[0] + v88.f64[1] + v87.f64[0] + v87.f64[1];
    v82 += 2;
    v83 -= 8;
  }
  while (v83);
  if (v20 != (v20 & 0x7FFFFFFFFFFFFFF8))
  {
    v80 = &v5->f32[v20 & 0x7FFFFFFFFFFFFFF8];
    do
    {
LABEL_51:
      v89 = *v80++;
      v79 = v79 + v89;
    }
    while (v80 != v6);
  }
  v90 = v77;
  v91 = v81;
  *(float *)&v67 = v67 / v42;
  *(float *)&v66 = v79 / v66;
  v92 = 0.0;
  v93 = v55 / v78;
  if (v54 < 8)
  {
    v94 = 0;
    v95 = 0;
LABEL_59:
    v103 = v95 + 1;
    do
    {
      v92 = v92 + (float)((float)(v3->f32[v94] - *(float *)&v67) * (float)(v5->f32[v94] - *(float *)&v66));
      v94 = v103++;
    }
    while (v31 > v94);
    goto LABEL_61;
  }
  v95 = 0;
  v94 = 0;
  if (!(_DWORD)v54)
    goto LABEL_59;
  if ((v54 - 1) >> 32)
    goto LABEL_59;
  v94 = v54 & 0xFFFFFFFFFFFFFFF8;
  v96 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v67, 0);
  v97 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v66, 0);
  v98 = v5 + 1;
  v99 = v3 + 1;
  v100 = v54 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v101 = vmulq_f32(vsubq_f32(v99[-1], v96), vsubq_f32(v98[-1], v97));
    v102 = vmulq_f32(vsubq_f32(*v99, v96), vsubq_f32(*v98, v97));
    v92 = (float)((float)((float)((float)((float)((float)((float)(v92 + v101.f32[0]) + v101.f32[1]) + v101.f32[2])
                                        + v101.f32[3])
                                + v102.f32[0])
                        + v102.f32[1])
                + v102.f32[2])
        + v102.f32[3];
    v98 += 2;
    v99 += 2;
    v100 -= 8;
  }
  while (v100);
  v95 = v54 & 0xFFFFFFF8;
  if (v54 != v94)
    goto LABEL_59;
LABEL_61:
  v104 = (float)(v92 / v78) / v93;
  if (v93 == 0.0)
    v104 = 0.0;
  *(float *)(a1 + 8) = v104;
  result = v91 - (float)(v104 * v90);
  *(float *)(a1 + 12) = result;
  return result;
}

void DisparityToDepth::RansacLine2DModel::estimateY(uint64_t a1@<X0>, float **a2@<X1>, float **a3@<X8>)
{
  float *v3;
  float *v4;
  uint64_t v5;
  float *v8;
  float *v9;
  float *v10;
  float *v11;
  float v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  float *v17;
  unint64_t v18;
  float *v19;
  int v20;
  uint64_t v21;
  _OWORD *v22;
  float *v23;
  uint64_t v24;
  __int128 v25;
  float *v26;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = *a2;
  v3 = a2[1];
  v5 = (char *)v3 - (char *)*a2;
  if (v3 != *a2)
  {
    if (v5 < 0)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v8 = (float *)operator new((char *)v3 - (char *)*a2);
    v9 = &v8[v5 >> 2];
    *a3 = v8;
    a3[1] = v8;
    a3[2] = v9;
    v10 = v8;
    v26 = v3;
    while (1)
    {
      v12 = *(float *)(a1 + 12) + (float)(*(float *)(a1 + 8) * *v4);
      if (v10 >= v9)
        break;
      *v10 = v12;
      v11 = v10 + 1;
LABEL_5:
      a3[1] = v11;
      ++v4;
      v10 = v11;
      if (v4 == v3)
        return;
    }
    v13 = v10 - v8;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    if (((char *)v9 - (char *)v8) >> 1 > v14)
      v14 = ((char *)v9 - (char *)v8) >> 1;
    if ((unint64_t)((char *)v9 - (char *)v8) >= 0x7FFFFFFFFFFFFFFCLL)
      v15 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    if (v15)
    {
      if (v15 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v16 = operator new(4 * v15);
    }
    else
    {
      v16 = 0;
    }
    v17 = (float *)&v16[4 * v13];
    *v17 = v12;
    v11 = v17 + 1;
    if (v10 == v8)
      goto LABEL_21;
    v18 = (char *)(v10 - 1) - (char *)v8;
    if (v18 < 0xBC)
    {
      v19 = v10;
      goto LABEL_20;
    }
    if (&v16[(char *)v10 - (char *)v8 - 4 - (v18 & 0xFFFFFFFFFFFFFFFCLL)] > &v16[(char *)v10 - (char *)v8 - 4])
    {
      v19 = v10;
    }
    else
    {
      if ((float *)((char *)v10 - (v18 & 0xFFFFFFFFFFFFFFFCLL) - 4) <= v10 - 1)
      {
        if ((unint64_t)((char *)v8 - v16) < 0x20)
        {
          v19 = v10;
          goto LABEL_20;
        }
        v21 = (v18 >> 2) + 1;
        v19 = &v10[-(v21 & 0x7FFFFFFFFFFFFFF8)];
        v22 = &v16[4 * v13 - 16];
        v23 = v10 - 4;
        v24 = v21 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v25 = *(_OWORD *)v23;
          *(v22 - 1) = *((_OWORD *)v23 - 1);
          *v22 = v25;
          v22 -= 2;
          v23 -= 8;
          v24 -= 8;
        }
        while (v24);
        v17 -= v21 & 0x7FFFFFFFFFFFFFF8;
        if (v21 != (v21 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_20;
LABEL_21:
        v9 = (float *)&v16[4 * v15];
        *a3 = v17;
        a3[1] = v11;
        a3[2] = v9;
        if (v8)
          operator delete(v8);
        v8 = v17;
        v3 = v26;
        goto LABEL_5;
      }
      v19 = v10;
    }
    do
    {
LABEL_20:
      v20 = *((_DWORD *)v19-- - 1);
      *((_DWORD *)v17-- - 1) = v20;
    }
    while (v19 != v8);
    goto LABEL_21;
  }
}

void sub_20B66C148(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void DisparityToDepth::RansacLine2DModel::estimateX(uint64_t a1@<X0>, float **a2@<X1>, float **a3@<X8>)
{
  float *v3;
  float *v4;
  uint64_t v5;
  float *v8;
  float *v9;
  float *v10;
  float *v11;
  float v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  float *v17;
  unint64_t v18;
  float *v19;
  int v20;
  uint64_t v21;
  _OWORD *v22;
  float *v23;
  uint64_t v24;
  __int128 v25;
  float *v26;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = *a2;
  v3 = a2[1];
  v5 = (char *)v3 - (char *)*a2;
  if (v3 != *a2)
  {
    if (v5 < 0)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v8 = (float *)operator new((char *)v3 - (char *)*a2);
    v9 = &v8[v5 >> 2];
    *a3 = v8;
    a3[1] = v8;
    a3[2] = v9;
    v10 = v8;
    v26 = v3;
    while (1)
    {
      v12 = (float)(*v4 - *(float *)(a1 + 12)) / *(float *)(a1 + 8);
      if (v10 >= v9)
        break;
      *v10 = v12;
      v11 = v10 + 1;
LABEL_5:
      a3[1] = v11;
      ++v4;
      v10 = v11;
      if (v4 == v3)
        return;
    }
    v13 = v10 - v8;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    if (((char *)v9 - (char *)v8) >> 1 > v14)
      v14 = ((char *)v9 - (char *)v8) >> 1;
    if ((unint64_t)((char *)v9 - (char *)v8) >= 0x7FFFFFFFFFFFFFFCLL)
      v15 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    if (v15)
    {
      if (v15 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v16 = operator new(4 * v15);
    }
    else
    {
      v16 = 0;
    }
    v17 = (float *)&v16[4 * v13];
    *v17 = v12;
    v11 = v17 + 1;
    if (v10 == v8)
      goto LABEL_21;
    v18 = (char *)(v10 - 1) - (char *)v8;
    if (v18 < 0xBC)
    {
      v19 = v10;
      goto LABEL_20;
    }
    if (&v16[(char *)v10 - (char *)v8 - 4 - (v18 & 0xFFFFFFFFFFFFFFFCLL)] > &v16[(char *)v10 - (char *)v8 - 4])
    {
      v19 = v10;
    }
    else
    {
      if ((float *)((char *)v10 - (v18 & 0xFFFFFFFFFFFFFFFCLL) - 4) <= v10 - 1)
      {
        if ((unint64_t)((char *)v8 - v16) < 0x20)
        {
          v19 = v10;
          goto LABEL_20;
        }
        v21 = (v18 >> 2) + 1;
        v19 = &v10[-(v21 & 0x7FFFFFFFFFFFFFF8)];
        v22 = &v16[4 * v13 - 16];
        v23 = v10 - 4;
        v24 = v21 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v25 = *(_OWORD *)v23;
          *(v22 - 1) = *((_OWORD *)v23 - 1);
          *v22 = v25;
          v22 -= 2;
          v23 -= 8;
          v24 -= 8;
        }
        while (v24);
        v17 -= v21 & 0x7FFFFFFFFFFFFFF8;
        if (v21 != (v21 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_20;
LABEL_21:
        v9 = (float *)&v16[4 * v15];
        *a3 = v17;
        a3[1] = v11;
        a3[2] = v9;
        if (v8)
          operator delete(v8);
        v8 = v17;
        v3 = v26;
        goto LABEL_5;
      }
      v19 = v10;
    }
    do
    {
LABEL_20:
      v20 = *((_DWORD *)v19-- - 1);
      *((_DWORD *)v17-- - 1) = v20;
    }
    while (v19 != v8);
    goto LABEL_21;
  }
}

void sub_20B66C394(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DisparityToDepth::RansacLine2DModel::minNumOfParametersForFit(DisparityToDepth::RansacLine2DModel *this)
{
  return 2;
}

float DisparityToDepth::RansacLine2DModel::slope(DisparityToDepth::RansacLine2DModel *this)
{
  return *((float *)this + 2);
}

float DisparityToDepth::RansacLine2DModel::intercept(DisparityToDepth::RansacLine2DModel *this)
{
  return *((float *)this + 3);
}

void DisparityToDepth::RansacLineModel::~RansacLineModel(DisparityToDepth::RansacLineModel *this)
{
  JUMPOUT(0x20BD36498);
}

float DisparityToDepth::RansacLineModel::fit(uint64_t a1, float **a2, float **a3)
{
  float *v3;
  float *v4;
  float v5;
  float v6;
  uint64_t v7;
  unint64_t v8;
  double v9;
  uint64_t v10;
  float32x4_t *v11;
  uint64_t v12;
  float32x4_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float v18;
  float *v19;
  float *v20;
  uint64_t v21;
  unint64_t v22;
  double v23;
  uint64_t v24;
  float32x4_t *v25;
  uint64_t v26;
  float32x4_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float v32;
  float result;

  v3 = *a3;
  v4 = a3[1];
  v5 = 0.0;
  v6 = 0.0;
  if (*a3 != v4)
  {
    v7 = (char *)v4 - (char *)v3;
    v8 = (char *)v4 - (char *)v3 - 4;
    if (v8 >= 0x1C)
    {
      v10 = (v8 >> 2) + 1;
      v11 = (float32x4_t *)(v3 + 4);
      v9 = 0.0;
      v12 = v10 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v13 = v11[-1];
        v14 = vcvt_hight_f64_f32(v13);
        v15 = vcvtq_f64_f32(*(float32x2_t *)v13.f32);
        v16 = vcvt_hight_f64_f32(*v11);
        v17 = vcvtq_f64_f32(*(float32x2_t *)v11->f32);
        v9 = v9 + v15.f64[0] + v15.f64[1] + v14.f64[0] + v14.f64[1] + v17.f64[0] + v17.f64[1] + v16.f64[0] + v16.f64[1];
        v11 += 2;
        v12 -= 8;
      }
      while (v12);
      if (v10 == (v10 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_9;
      v3 += v10 & 0x7FFFFFFFFFFFFFF8;
    }
    else
    {
      v9 = 0.0;
    }
    do
    {
      v18 = *v3++;
      v9 = v9 + v18;
    }
    while (v3 != v4);
LABEL_9:
    v6 = v9 / (double)(unint64_t)(v7 >> 2);
  }
  v19 = *a2;
  v20 = a2[1];
  if (*a2 != v20)
  {
    v21 = (char *)v20 - (char *)v19;
    v22 = (char *)v20 - (char *)v19 - 4;
    if (v22 >= 0x1C)
    {
      v24 = (v22 >> 2) + 1;
      v25 = (float32x4_t *)(v19 + 4);
      v23 = 0.0;
      v26 = v24 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v27 = v25[-1];
        v28 = vcvt_hight_f64_f32(v27);
        v29 = vcvtq_f64_f32(*(float32x2_t *)v27.f32);
        v30 = vcvt_hight_f64_f32(*v25);
        v31 = vcvtq_f64_f32(*(float32x2_t *)v25->f32);
        v23 = v23
            + v29.f64[0]
            + v29.f64[1]
            + v28.f64[0]
            + v28.f64[1]
            + v31.f64[0]
            + v31.f64[1]
            + v30.f64[0]
            + v30.f64[1];
        v25 += 2;
        v26 -= 8;
      }
      while (v26);
      if (v24 == (v24 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_18;
      v19 += v24 & 0x7FFFFFFFFFFFFFF8;
    }
    else
    {
      v23 = 0.0;
    }
    do
    {
      v32 = *v19++;
      v23 = v23 + v32;
    }
    while (v19 != v20);
LABEL_18:
    v5 = v23 / (double)(unint64_t)(v21 >> 2);
  }
  result = v6 - v5;
  *(float *)(a1 + 8) = result;
  return result;
}

void DisparityToDepth::RansacLineModel::estimateY(uint64_t a1@<X0>, float **a2@<X1>, float **a3@<X8>)
{
  float *v3;
  float *v4;
  uint64_t v5;
  float *v8;
  float *v9;
  float *v10;
  float *v11;
  float v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  float *v17;
  unint64_t v18;
  float *v19;
  int v20;
  uint64_t v21;
  _OWORD *v22;
  float *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = *a2;
  v3 = a2[1];
  v5 = (char *)v3 - (char *)*a2;
  if (v3 != *a2)
  {
    if (v5 < 0)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v8 = (float *)operator new((char *)v3 - (char *)*a2);
    v9 = &v8[v5 >> 2];
    *a3 = v8;
    a3[1] = v8;
    a3[2] = v9;
    v10 = v8;
    v26 = a1;
    while (1)
    {
      v12 = *v4 + *(float *)(a1 + 8);
      if (v10 >= v9)
        break;
      *v10 = v12;
      v11 = v10 + 1;
LABEL_5:
      a3[1] = v11;
      ++v4;
      v10 = v11;
      if (v4 == v3)
        return;
    }
    v13 = v10 - v8;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    if (((char *)v9 - (char *)v8) >> 1 > v14)
      v14 = ((char *)v9 - (char *)v8) >> 1;
    if ((unint64_t)((char *)v9 - (char *)v8) >= 0x7FFFFFFFFFFFFFFCLL)
      v15 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    if (v15)
    {
      if (v15 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v16 = operator new(4 * v15);
    }
    else
    {
      v16 = 0;
    }
    v17 = (float *)&v16[4 * v13];
    *v17 = v12;
    v11 = v17 + 1;
    if (v10 == v8)
      goto LABEL_21;
    v18 = (char *)(v10 - 1) - (char *)v8;
    if (v18 < 0xBC)
    {
      v19 = v10;
      goto LABEL_20;
    }
    if (&v16[(char *)v10 - (char *)v8 - 4 - (v18 & 0xFFFFFFFFFFFFFFFCLL)] > &v16[(char *)v10 - (char *)v8 - 4])
    {
      v19 = v10;
    }
    else
    {
      if ((float *)((char *)v10 - (v18 & 0xFFFFFFFFFFFFFFFCLL) - 4) <= v10 - 1)
      {
        if ((unint64_t)((char *)v8 - v16) < 0x20)
        {
          v19 = v10;
          goto LABEL_20;
        }
        v21 = (v18 >> 2) + 1;
        v19 = &v10[-(v21 & 0x7FFFFFFFFFFFFFF8)];
        v22 = &v16[4 * v13 - 16];
        v23 = v10 - 4;
        v24 = v21 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v25 = *(_OWORD *)v23;
          *(v22 - 1) = *((_OWORD *)v23 - 1);
          *v22 = v25;
          v22 -= 2;
          v23 -= 8;
          v24 -= 8;
        }
        while (v24);
        v17 -= v21 & 0x7FFFFFFFFFFFFFF8;
        if (v21 != (v21 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_20;
LABEL_21:
        v9 = (float *)&v16[4 * v15];
        *a3 = v17;
        a3[1] = v11;
        a3[2] = v9;
        if (v8)
          operator delete(v8);
        v8 = v17;
        a1 = v26;
        goto LABEL_5;
      }
      v19 = v10;
    }
    do
    {
LABEL_20:
      v20 = *((_DWORD *)v19-- - 1);
      *((_DWORD *)v17-- - 1) = v20;
    }
    while (v19 != v8);
    goto LABEL_21;
  }
}

void sub_20B66C7A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void DisparityToDepth::RansacLineModel::estimateX(uint64_t a1@<X0>, float **a2@<X1>, float **a3@<X8>)
{
  float *v3;
  float *v4;
  uint64_t v5;
  float *v8;
  float *v9;
  float *v10;
  float *v11;
  float v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  float *v17;
  unint64_t v18;
  float *v19;
  int v20;
  uint64_t v21;
  _OWORD *v22;
  float *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = *a2;
  v3 = a2[1];
  v5 = (char *)v3 - (char *)*a2;
  if (v3 != *a2)
  {
    if (v5 < 0)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v8 = (float *)operator new((char *)v3 - (char *)*a2);
    v9 = &v8[v5 >> 2];
    *a3 = v8;
    a3[1] = v8;
    a3[2] = v9;
    v10 = v8;
    v26 = a1;
    while (1)
    {
      v12 = *v4 - *(float *)(a1 + 8);
      if (v10 >= v9)
        break;
      *v10 = v12;
      v11 = v10 + 1;
LABEL_5:
      a3[1] = v11;
      ++v4;
      v10 = v11;
      if (v4 == v3)
        return;
    }
    v13 = v10 - v8;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    if (((char *)v9 - (char *)v8) >> 1 > v14)
      v14 = ((char *)v9 - (char *)v8) >> 1;
    if ((unint64_t)((char *)v9 - (char *)v8) >= 0x7FFFFFFFFFFFFFFCLL)
      v15 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    if (v15)
    {
      if (v15 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v16 = operator new(4 * v15);
    }
    else
    {
      v16 = 0;
    }
    v17 = (float *)&v16[4 * v13];
    *v17 = v12;
    v11 = v17 + 1;
    if (v10 == v8)
      goto LABEL_21;
    v18 = (char *)(v10 - 1) - (char *)v8;
    if (v18 < 0xBC)
    {
      v19 = v10;
      goto LABEL_20;
    }
    if (&v16[(char *)v10 - (char *)v8 - 4 - (v18 & 0xFFFFFFFFFFFFFFFCLL)] > &v16[(char *)v10 - (char *)v8 - 4])
    {
      v19 = v10;
    }
    else
    {
      if ((float *)((char *)v10 - (v18 & 0xFFFFFFFFFFFFFFFCLL) - 4) <= v10 - 1)
      {
        if ((unint64_t)((char *)v8 - v16) < 0x20)
        {
          v19 = v10;
          goto LABEL_20;
        }
        v21 = (v18 >> 2) + 1;
        v19 = &v10[-(v21 & 0x7FFFFFFFFFFFFFF8)];
        v22 = &v16[4 * v13 - 16];
        v23 = v10 - 4;
        v24 = v21 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v25 = *(_OWORD *)v23;
          *(v22 - 1) = *((_OWORD *)v23 - 1);
          *v22 = v25;
          v22 -= 2;
          v23 -= 8;
          v24 -= 8;
        }
        while (v24);
        v17 -= v21 & 0x7FFFFFFFFFFFFFF8;
        if (v21 != (v21 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_20;
LABEL_21:
        v9 = (float *)&v16[4 * v15];
        *a3 = v17;
        a3[1] = v11;
        a3[2] = v9;
        if (v8)
          operator delete(v8);
        v8 = v17;
        a1 = v26;
        goto LABEL_5;
      }
      v19 = v10;
    }
    do
    {
LABEL_20:
      v20 = *((_DWORD *)v19-- - 1);
      *((_DWORD *)v17-- - 1) = v20;
    }
    while (v19 != v8);
    goto LABEL_21;
  }
}

void sub_20B66C9E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DisparityToDepth::RansacLineModel::minNumOfParametersForFit(DisparityToDepth::RansacLineModel *this)
{
  return 1;
}

float DisparityToDepth::RansacLineModel::slope(DisparityToDepth::RansacLineModel *this)
{
  return 1.0;
}

float DisparityToDepth::RansacLineModel::intercept(DisparityToDepth::RansacLineModel *this)
{
  return *((float *)this + 2);
}

uint64_t DisparityToDepth::DisparityToDepthFitEstimator::DisparityToDepthFitEstimator(uint64_t a1, int *a2, char a3, uint64_t a4, float a5, float a6, float a7, float a8)
{
  uint64_t v14;
  int v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  uint64_t i;
  int v20;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(float *)(a1 + 56) = a8;
  if (*((_BYTE *)a2 + 12))
  {
    v14 = operator new();
    *(_QWORD *)v14 = &off_24C421438;
  }
  else
  {
    v14 = operator new();
    *(_QWORD *)v14 = &off_24C421488;
    *(_DWORD *)(v14 + 12) = 0;
  }
  *(_DWORD *)(v14 + 8) = 0;
  v15 = *a2;
  v16 = a2[4];
  v17 = *((_BYTE *)a2 + 20);
  *(_QWORD *)(a1 + 64) = v14;
  *(_QWORD *)(a1 + 72) = v14;
  *(_DWORD *)(a1 + 80) = v15;
  *(_QWORD *)(a1 + 84) = *(_QWORD *)(a2 + 1);
  *(_DWORD *)(a1 + 96) = v16;
  v18 = 1;
  for (i = 25; i != 648; ++i)
  {
    v20 = 1812433253 * (v16 ^ (v16 >> 30));
    v16 = v20 + v18;
    *(_DWORD *)(a1 + 4 * i) = i + v20 - 24;
    ++v18;
  }
  *(_QWORD *)(a1 + 2592) = 0;
  *(_BYTE *)(a1 + 2600) = v17;
  *(float *)(a1 + 2608) = a5;
  *(float *)(a1 + 2612) = a6;
  *(_BYTE *)(a1 + 2616) = 0;
  *(_DWORD *)(a1 + 2620) = 0;
  *(_BYTE *)(a1 + 2624) = 0;
  *(_BYTE *)(a1 + 2632) = 0;
  *(_BYTE *)(a1 + 2640) = a3;
  *(float *)(a1 + 2644) = a7;
  *(_BYTE *)(a1 + 2648) = 0;
  *(_BYTE *)(a1 + 2656) = 0;
  return a1;
}

void sub_20B66CB70(_Unwind_Exception *a1)
{
  DisparityToDepth::WorldPointsContainer *v1;

  DisparityToDepth::WorldPointsContainer::~WorldPointsContainer(v1);
  _Unwind_Resume(a1);
}

void DisparityToDepth::WorldPointsContainer::~WorldPointsContainer(DisparityToDepth::WorldPointsContainer *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v3;
    operator delete(v3);
  }
}

uint64_t DisparityToDepth::WorldPointsContainer::WorldPointsContainer(uint64_t this, uint64_t a2, float a3)
{
  *(_QWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = a2;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(float *)(this + 56) = a3;
  return this;
}

{
  *(_QWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = a2;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(float *)(this + 56) = a3;
  return this;
}

void DisparityToDepth::WorldPointsContainer::push(DisparityToDepth::WorldPointsContainer *this, ADDisparityToDepthFitWorldPoint *a2, unint64_t a3)
{
  unint64_t v4;
  char *v6;
  void *v7;
  char *v8;
  uint64_t v9;
  unsigned int v10;
  char *v11;
  __int128 v12;
  ADDisparityToDepthFitWorldPoint *v13;
  unint64_t v14;
  _OWORD *v15;
  __int128 v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  __int128 v24;
  char *v25;
  char *v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  __int128 v32;
  char *v33;
  char *v34;
  __int128 v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  ADDisparityToDepthFitWorldPoint *v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  uint8_t buf[4];
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v43 = 0;
  v44 = 0;
  v45 = 0;
  if (a3)
  {
    v4 = a3;
    if (a3 >> 59)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(32 * a3);
    v43 = v6;
    v44 = v6;
    v45 = &v6[32 * v4];
    v7 = *(void **)this;
    *((_QWORD *)this + 1) = *(_QWORD *)this;
    if (v4 > (uint64_t)(*((_QWORD *)this + 2) - (_QWORD)v7) >> 5)
    {
      v8 = (char *)operator new(32 * v4);
      *(_QWORD *)this = v8;
      *((_QWORD *)this + 1) = v8;
      *((_QWORD *)this + 2) = &v8[32 * v4];
      if (v7)
        operator delete(v7);
    }
    v41 = a2;
    v42 = &v6[32 * v4];
    v9 = 0;
    v10 = 0;
    v11 = v6;
    v40 = v4;
    do
    {
      v13 = &a2[4 * v9];
      v15 = (_OWORD *)*((_QWORD *)this + 1);
      v14 = *((_QWORD *)this + 2);
      if ((unint64_t)v15 >= v14)
      {
        v18 = *(_OWORD **)this;
        v19 = ((uint64_t)v15 - *(_QWORD *)this) >> 5;
        v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 59)
          goto LABEL_56;
        v21 = v14 - (_QWORD)v18;
        if (v21 >> 4 > v20)
          v20 = v21 >> 4;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFE0)
          v22 = 0x7FFFFFFFFFFFFFFLL;
        else
          v22 = v20;
        if (v22)
        {
          if (v22 >> 59)
            goto LABEL_57;
          v23 = (char *)operator new(32 * v22);
        }
        else
        {
          v23 = 0;
        }
        v24 = *(_OWORD *)&v13[2].var0;
        v25 = &v23[32 * v19];
        *(_OWORD *)v25 = *(_OWORD *)&v13->var0;
        *((_OWORD *)v25 + 1) = v24;
        v26 = v25;
        if (v15 == v18)
        {
          a2 = v41;
        }
        else
        {
          a2 = v41;
          do
          {
            v27 = *(v15 - 1);
            *((_OWORD *)v26 - 2) = *(v15 - 2);
            *((_OWORD *)v26 - 1) = v27;
            v26 -= 32;
            v15 -= 2;
          }
          while (v15 != v18);
          v15 = *(_OWORD **)this;
        }
        v17 = v25 + 32;
        *(_QWORD *)this = v26;
        *((_QWORD *)this + 1) = v25 + 32;
        *((_QWORD *)this + 2) = &v23[32 * v22];
        if (v15)
          operator delete(v15);
        v4 = v40;
      }
      else
      {
        v16 = *(_OWORD *)&v13[2].var0;
        *v15 = *(_OWORD *)&v13->var0;
        v15[1] = v16;
        v17 = v15 + 2;
      }
      *((_QWORD *)this + 1) = v17;
      if (a2[4 * v9 + 2].var0 >= *((float *)this + 14))
      {
        if (v6 < v42)
        {
          v12 = *(_OWORD *)&v13[2].var0;
          *(_OWORD *)v6 = *(_OWORD *)&v13->var0;
          *((_OWORD *)v6 + 1) = v12;
          v6 += 32;
        }
        else
        {
          v28 = (v6 - v11) >> 5;
          v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 59)
LABEL_56:
            std::vector<float>::__throw_length_error[abi:ne180100]();
          if ((v42 - v11) >> 4 > v29)
            v29 = (v42 - v11) >> 4;
          if ((unint64_t)(v42 - v11) >= 0x7FFFFFFFFFFFFFE0)
            v30 = 0x7FFFFFFFFFFFFFFLL;
          else
            v30 = v29;
          if (v30)
          {
            if (v30 >> 59)
LABEL_57:
              std::__throw_bad_array_new_length[abi:ne180100]();
            v31 = (char *)operator new(32 * v30);
            v4 = v40;
          }
          else
          {
            v31 = 0;
          }
          v32 = *(_OWORD *)&v13[2].var0;
          v33 = &v31[32 * v28];
          *(_OWORD *)v33 = *(_OWORD *)&v13->var0;
          *((_OWORD *)v33 + 1) = v32;
          if (v6 == v11)
          {
            v36 = v6;
            v11 = &v31[32 * v28];
            a2 = v41;
          }
          else
          {
            v34 = &v31[32 * v28];
            a2 = v41;
            do
            {
              v35 = *((_OWORD *)v6 - 1);
              *((_OWORD *)v34 - 2) = *((_OWORD *)v6 - 2);
              *((_OWORD *)v34 - 1) = v35;
              v34 -= 32;
              v6 -= 32;
            }
            while (v6 != v11);
            v36 = v11;
            v11 = v34;
          }
          v42 = &v31[32 * v30];
          v6 = v33 + 32;
          if (v36)
            operator delete(v36);
        }
      }
      v9 = ++v10;
    }
    while (v10 < v4);
    v44 = v6;
    v37 = v42;
  }
  else
  {
    v11 = 0;
    v37 = 0;
    *((_QWORD *)this + 1) = *(_QWORD *)this;
  }
  v45 = v37;
  v43 = v11;
  DisparityToDepth::WorldPointsLRU::push((_QWORD *)this + 3, (uint64_t *)&v43);
  if (ADDebugUtilsADVerboseLogsEnabled && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    v38 = (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 5;
    v39 = (uint64_t)(*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 5;
    *(_DWORD *)buf = 134218240;
    v47 = v38;
    v48 = 2048;
    v49 = v39;
    _os_log_impl(&dword_20B62B000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "DisparityToDepth [Verbose] WorldPointsContainer amount of pushed points %lu amount of retained points %lu", buf, 0x16u);
  }
  if (v11)
  {
    v44 = v11;
    operator delete(v11);
  }
}

void sub_20B66CF90(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void DisparityToDepth::WorldPointsLRU::push(_QWORD *a1, uint64_t *a2)
{
  int64x2_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  __int128 v12;
  _OWORD *v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  __int128 v17;
  char *v18;
  char *v19;
  __int128 v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  uint64_t v26;
  __int128 v27;
  _OWORD *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  __int128 v32;
  char *v33;
  char *v34;
  __int128 v35;
  uint64_t v36;
  void *v37;
  _QWORD *v38;
  _QWORD *v39;
  void *v40;
  int64x2_t v41;
  int64x2_t v42;
  int64x2_t v43;
  void *v44[2];
  void *__p[2];
  int v46;
  uint8_t buf[4];
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v4 = 0uLL;
  *(_OWORD *)v44 = 0u;
  *(_OWORD *)__p = 0u;
  v46 = 1065353216;
  v5 = *a1;
  if (*a1)
  {
    if (v5 >> 59)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(32 * v5);
    v5 = (unint64_t)&v6[32 * v5];
    v4 = vdupq_n_s64((unint64_t)v6);
  }
  v7 = *a2;
  v8 = a2[1];
  if (*a2 != v8)
  {
    while (1)
    {
      v9 = (_OWORD *)v4.i64[1];
      v10 = (_OWORD *)v4.i64[0];
      v11 = (v4.i64[1] - v4.i64[0]) >> 5;
      if (v11 == *a1)
        goto LABEL_29;
      v41 = v4;
      if ((std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((float *)v44, *(_DWORD *)(v7 + 20), *(_DWORD *)(v7 + 20)) & 1) != 0)break;
      v4 = v41;
LABEL_7:
      v7 += 32;
      if (v7 == v8)
        goto LABEL_29;
    }
    if ((unint64_t)v9 >= v5)
    {
      v14 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 59)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      if ((uint64_t)(v5 - (_QWORD)v10) >> 4 > v14)
        v14 = (uint64_t)(v5 - (_QWORD)v10) >> 4;
      if (v5 - (unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
        v15 = 0x7FFFFFFFFFFFFFFLL;
      else
        v15 = v14;
      if (v15)
      {
        if (v15 >> 59)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v16 = (char *)operator new(32 * v15);
      }
      else
      {
        v16 = 0;
      }
      v17 = *(_OWORD *)(v7 + 16);
      v18 = &v16[32 * v11];
      *(_OWORD *)v18 = *(_OWORD *)v7;
      *((_OWORD *)v18 + 1) = v17;
      v19 = v18;
      if (v9 != v10)
      {
        do
        {
          v20 = *(v9 - 1);
          *((_OWORD *)v19 - 2) = *(v9 - 2);
          *((_OWORD *)v19 - 1) = v20;
          v19 -= 32;
          v9 -= 2;
        }
        while (v9 != v10);
        v9 = v10;
      }
      v5 = (unint64_t)&v16[32 * v15];
      v13 = v18 + 32;
      v4.i64[0] = (uint64_t)v19;
      if (!v9)
        goto LABEL_28;
      v41.i64[0] = (uint64_t)v19;
      operator delete(v9);
    }
    else
    {
      v12 = *(_OWORD *)(v7 + 16);
      *v9 = *(_OWORD *)v7;
      v9[1] = v12;
      v13 = v9 + 2;
    }
    v4.i64[0] = v41.i64[0];
LABEL_28:
    v4.i64[1] = (uint64_t)v13;
    goto LABEL_7;
  }
LABEL_29:
  v22 = a1[1];
  v23 = a1[2];
  v21 = (void **)(a1 + 1);
  if (v22 != v23)
  {
    while (1)
    {
      v24 = (_OWORD *)v4.i64[1];
      v25 = (_OWORD *)v4.i64[0];
      v26 = (v4.i64[1] - v4.i64[0]) >> 5;
      if (v26 == *a1)
        goto LABEL_54;
      v42 = v4;
      if ((std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((float *)v44, *(_DWORD *)(v22 + 20), *(_DWORD *)(v22 + 20)) & 1) != 0)break;
      v4 = v42;
LABEL_32:
      v22 += 32;
      if (v22 == v23)
        goto LABEL_54;
    }
    if ((unint64_t)v24 >= v5)
    {
      v29 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 59)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      if ((uint64_t)(v5 - (_QWORD)v25) >> 4 > v29)
        v29 = (uint64_t)(v5 - (_QWORD)v25) >> 4;
      if (v5 - (unint64_t)v25 >= 0x7FFFFFFFFFFFFFE0)
        v30 = 0x7FFFFFFFFFFFFFFLL;
      else
        v30 = v29;
      if (v30)
      {
        if (v30 >> 59)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v31 = (char *)operator new(32 * v30);
      }
      else
      {
        v31 = 0;
      }
      v32 = *(_OWORD *)(v22 + 16);
      v33 = &v31[32 * v26];
      *(_OWORD *)v33 = *(_OWORD *)v22;
      *((_OWORD *)v33 + 1) = v32;
      v34 = v33;
      if (v24 != v25)
      {
        do
        {
          v35 = *(v24 - 1);
          *((_OWORD *)v34 - 2) = *(v24 - 2);
          *((_OWORD *)v34 - 1) = v35;
          v34 -= 32;
          v24 -= 2;
        }
        while (v24 != v25);
        v24 = v25;
      }
      v5 = (unint64_t)&v31[32 * v30];
      v28 = v33 + 32;
      v4.i64[0] = (uint64_t)v34;
      if (!v24)
        goto LABEL_53;
      v42.i64[0] = (uint64_t)v34;
      operator delete(v24);
    }
    else
    {
      v27 = *(_OWORD *)(v22 + 16);
      *v24 = *(_OWORD *)v22;
      v24[1] = v27;
      v28 = v24 + 2;
    }
    v4.i64[0] = v42.i64[0];
LABEL_53:
    v4.i64[1] = (uint64_t)v28;
    goto LABEL_32;
  }
LABEL_54:
  v43 = v4;
  if (ADDebugUtilsADVerboseLogsEnabled && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    v36 = (uint64_t)(a1[2] - a1[1]) >> 5;
    *(_DWORD *)buf = 134218240;
    v48 = v36;
    v49 = 2048;
    v50 = (v43.i64[1] - v43.i64[0]) >> 5;
    _os_log_impl(&dword_20B62B000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "DisparityToDepth [Verbose] WorldPointsLRU amount of points before push %lu new amount of points %lu", buf, 0x16u);
  }
  v37 = *v21;
  if (*v21)
  {
    a1[2] = v37;
    operator delete(v37);
    *v21 = 0;
    a1[2] = 0;
    a1[3] = 0;
  }
  *(int64x2_t *)(a1 + 1) = v43;
  a1[3] = v5;
  v38 = __p[0];
  if (__p[0])
  {
    do
    {
      v39 = (_QWORD *)*v38;
      operator delete(v38);
      v38 = v39;
    }
    while (v39);
  }
  v40 = v44[0];
  v44[0] = 0;
  if (v40)
    operator delete(v40);
}

void sub_20B66D37C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::unordered_set<int>::~unordered_set[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(float *a1, int a2, int a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  size_t v26;
  size_t v27;
  size_t v28;
  _QWORD *i;
  size_t v30;
  uint64_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  size_t v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD *v41;

  v6 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                return 0;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (uint64_t *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return 0;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = operator new(0x18uLL);
  *v14 = 0;
  v14[1] = v6;
  *((_DWORD *)v14 + 4) = a3;
  v15 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v16 = a1[8];
  if (!v7 || (float)(v16 * (float)v7) < v15)
  {
    v17 = 1;
    if (v7 >= 3)
      v17 = (v7 & (v7 - 1)) != 0;
    v18 = v17 | (2 * v7);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *((_QWORD *)a1 + 1);
    }
    if (prime <= v7)
    {
      if (prime >= v7)
        goto LABEL_60;
      v32 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        v32 = std::__next_prime(v32);
      }
      else
      {
        v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2)
          v32 = v34;
      }
      if (prime <= v32)
        prime = v32;
      if (prime >= v7)
      {
        v7 = *((_QWORD *)a1 + 1);
LABEL_60:
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= v6)
            v3 = v6 % v7;
          else
            v3 = v6;
        }
        else
        {
          v3 = (v7 - 1) & v6;
        }
        goto LABEL_73;
      }
      if (!prime)
      {
        v41 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v41)
          operator delete(v41);
        v7 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_60;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v21 = operator new(8 * prime);
    v22 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v21;
    if (v22)
      operator delete(v22);
    v23 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23++) = 0;
    while (prime != v23);
    v25 = (uint64_t *)(a1 + 4);
    v24 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v24)
    {
LABEL_59:
      v7 = prime;
      goto LABEL_60;
    }
    v26 = v24[1];
    v27 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v28 = v26 & v27;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v25;
      for (i = (_QWORD *)*v24; *v24; i = (_QWORD *)*v24)
      {
        v30 = i[1] & v27;
        if (v30 == v28)
        {
          v24 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v30))
        {
          *v24 = *i;
          v31 = 8 * v30;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v31);
          **(_QWORD **)(*(_QWORD *)a1 + v31) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v24;
          v24 = i;
          v28 = v30;
        }
      }
      goto LABEL_59;
    }
    if (v26 >= prime)
      v26 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v25;
    v35 = (_QWORD *)*v24;
    if (!*v24)
      goto LABEL_59;
    while (1)
    {
      v37 = v35[1];
      if (v37 >= prime)
        v37 %= prime;
      if (v37 != v26)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v37))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v37) = v24;
          goto LABEL_64;
        }
        *v24 = *v35;
        v36 = 8 * v37;
        *v35 = **(_QWORD **)(*(_QWORD *)a1 + v36);
        **(_QWORD **)(*(_QWORD *)a1 + v36) = v35;
        v35 = v24;
      }
      v37 = v26;
LABEL_64:
      v24 = v35;
      v35 = (_QWORD *)*v35;
      v26 = v37;
      if (!v35)
        goto LABEL_59;
    }
  }
LABEL_73:
  v38 = *(_QWORD **)a1;
  v39 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v39)
  {
    *v14 = *v39;
LABEL_81:
    *v39 = v14;
    goto LABEL_82;
  }
  *v14 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v14;
  v38[v3] = a1 + 4;
  if (*v14)
  {
    v40 = *(_QWORD *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v40 >= v7)
        v40 %= v7;
    }
    else
    {
      v40 &= v7 - 1;
    }
    v39 = (_QWORD *)(*(_QWORD *)a1 + 8 * v40);
    goto LABEL_81;
  }
LABEL_82:
  ++*((_QWORD *)a1 + 3);
  return 1;
}

void sub_20B66D818(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<int>::~unordered_set[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void DisparityToDepth::DisparityToDepthFitEstimator::estimate(DisparityToDepth::WorldPointsContainer *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, double a5@<X4>, unint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  int64_t v30;
  int64_t v31;
  float *v32;
  float *v33;
  unint64_t v34;
  unint64_t v35;
  float *v36;
  float *v37;
  char *v38;
  uint64_t v39;
  float *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  float *v45;
  uint64_t v46;
  __int128 v47;
  int v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  __int128 v60;
  int v61;
  DisparityToDepth::WorldPointsContainer *v62;
  NSObject *v63;
  char *v64;
  float v65;
  float v66;
  int64_t v67;
  float v68;
  int64_t v69;
  float v70;
  float *v72;
  float v73;
  float *v74;
  float *v75;
  int64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  float *v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  char *v86;
  float *v87;
  uint64_t v88;
  __int128 v89;
  int v90;
  char *v96;
  char *v97;
  int64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  char *v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  __int128 v111;
  int v112;
  float v113;
  double v114;
  double v115;
  double v116;
  void *v117;
  int64_t v118;
  char *v119;
  char *v120;
  void *v121;
  int64_t v122;
  char *v123;
  char *v124;
  void *v125;
  int64_t v126;
  double v127;
  float v128;
  double v129;
  double v130;
  void *v131;
  int64_t v132;
  char *v133;
  char *v134;
  void *v135;
  int64_t v136;
  char *v137;
  char *v138;
  char *v139;
  char *v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  DisparityToDepth::WorldPointsContainer *v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v148;
  void *__p;
  float *v150;
  void *v151;
  _BYTE *v152;
  void *v153;
  char *v154;
  char *v155;
  void *v156;
  float *v157;
  char *v158;
  uint8_t buf[4];
  uint64_t v160;
  __int16 v161;
  double v162;
  __int16 v163;
  double v164;
  __int16 v165;
  unint64_t v166;
  __int16 v167;
  unint64_t v168;
  uint64_t v169;

  v169 = *MEMORY[0x24BDAC8D0];
  v156 = 0;
  v157 = 0;
  v158 = 0;
  v153 = 0;
  v154 = 0;
  v155 = 0;
  DisparityToDepth::WorldPointsContainer::vector(a1, (char **)&v151);
  if (!a6 || !a7)
  {
    _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3ELm4ELm5EEEEJbffNS_6vectorIfNS_9allocatorIfEEEES6_NS3_I31ADDisparityToDepthFitWorldPointNS4_IS7_EEEEEEC2B8ne180100IJLm0ELm1ELm2ELm3ELm4ELm5EEJbffS6_S6_S9_EJEJEJbiiRS6_SC_RKS9_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSG_IJDpT2_EEEDpOT3_(a9, 0, 0, 0, (uint64_t)&v156, (uint64_t)&v153, (uint64_t)&v151);
    goto LABEL_162;
  }
  v148 = a3;
  v18 = v151;
  v17 = v152;
  v19 = v152 - (_BYTE *)v151;
  v143 = a9;
  v144 = a1;
  v145 = a4;
  v146 = *(_QWORD *)&a5;
  v141 = a6;
  v142 = a7;
  if (v152 == v151)
  {
    v20 = 0;
    v23 = 0;
  }
  else
  {
    if (v19 < 0)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v20 = (char *)operator new((unint64_t)v19 >> 1);
    v21 = &v20[16 * (v19 >> 5)];
    v22 = v20;
    do
    {
      if (v22 < v21)
      {
        *(_OWORD *)v22 = *v18;
        v23 = v22 + 16;
      }
      else
      {
        v24 = (v22 - v20) >> 4;
        v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 60)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        if ((v21 - v20) >> 3 > v25)
          v25 = (v21 - v20) >> 3;
        if ((unint64_t)(v21 - v20) >= 0x7FFFFFFFFFFFFFF0)
          v26 = 0xFFFFFFFFFFFFFFFLL;
        else
          v26 = v25;
        if (v26)
        {
          if (v26 >> 60)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v27 = (char *)operator new(16 * v26);
        }
        else
        {
          v27 = 0;
        }
        v28 = &v27[16 * v24];
        v21 = &v27[16 * v26];
        *(_OWORD *)v28 = *v18;
        v23 = v28 + 16;
        if (v22 == v20)
          goto LABEL_22;
        do
        {
          v29 = *((_OWORD *)v22 - 1);
          v22 -= 16;
          *((_OWORD *)v28 - 1) = v29;
          v28 -= 16;
        }
        while (v22 != v20);
        if (v20)
LABEL_22:
          operator delete(v20);
        v20 = v28;
      }
      v18 += 2;
      v22 = v23;
    }
    while (v18 != v17);
  }
  (*(void (**)(void **__return_ptr, uint64_t, char *, int64_t))(*(_QWORD *)a8 + 16))(&__p, a8, v20, (v23 - v20) >> 4);
  v31 = v145;
  v30 = *(_QWORD *)&a5;
  if (ADDebugUtilsADVerboseLogsEnabled && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134219008;
    v160 = v148;
    v161 = 2048;
    v162 = *(double *)&v145;
    v163 = 2048;
    v164 = a5;
    v165 = 2048;
    v166 = v141;
    v167 = 2048;
    v168 = a7;
    _os_log_impl(&dword_20B62B000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "DisparityToDepth [Verbose] estiamte with disparityCount: %lu disparityWidth: %lu disparityHeight: %lu rgbWidth: %lu rgbHeight: %lu", buf, 0x34u);
  }
  v33 = (float *)__p;
  v32 = v150;
  v34 = (char *)v150 - (_BYTE *)__p;
  v35 = ((char *)v150 - (_BYTE *)__p) >> 4;
  v36 = (float *)v156;
  if (v35 > (v158 - (_BYTE *)v156) >> 2)
  {
    if ((v34 & 0x8000000000000000) != 0)
      goto LABEL_173;
    v37 = v157;
    v38 = (char *)operator new(v34 >> 2);
    v39 = (char *)v37 - (char *)v36;
    v40 = (float *)&v38[((char *)v37 - (char *)v36) & 0xFFFFFFFFFFFFFFFCLL];
    v41 = (char *)v40;
    if (v37 == v36)
      goto LABEL_39;
    if ((unint64_t)(v39 - 4) >= 0x2C)
    {
      v41 = &v38[((char *)v37 - (char *)v36) & 0xFFFFFFFFFFFFFFFCLL];
      if ((unint64_t)((char *)v37 - (v39 & 0xFFFFFFFFFFFFFFFCLL) - v38) >= 0x20)
      {
        v42 = v39 >> 2;
        v43 = ((unint64_t)(v39 - 4) >> 2) + 1;
        v44 = &v38[4 * v42 - 16];
        v45 = v37 - 4;
        v46 = v43 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v47 = *(_OWORD *)v45;
          *((_OWORD *)v44 - 1) = *((_OWORD *)v45 - 1);
          *(_OWORD *)v44 = v47;
          v44 -= 32;
          v45 -= 8;
          v46 -= 8;
        }
        while (v46);
        v41 = (char *)&v40[-(v43 & 0x7FFFFFFFFFFFFFF8)];
        v37 -= v43 & 0x7FFFFFFFFFFFFFF8;
        if (v43 == (v43 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_39:
          v156 = v41;
          v157 = v40;
          v158 = &v38[4 * v35];
          if (v36)
          {
            operator delete(v36);
            v33 = (float *)__p;
            v32 = v150;
            v34 = (char *)v150 - (_BYTE *)__p;
            v35 = ((char *)v150 - (_BYTE *)__p) >> 4;
          }
          goto LABEL_41;
        }
      }
    }
    else
    {
      v41 = &v38[((char *)v37 - (char *)v36) & 0xFFFFFFFFFFFFFFFCLL];
    }
    do
    {
      v48 = *((_DWORD *)v37-- - 1);
      *((_DWORD *)v41 - 1) = v48;
      v41 -= 4;
    }
    while (v37 != v36);
    goto LABEL_39;
  }
LABEL_41:
  v49 = (char *)v153;
  if (v35 <= (v155 - (_BYTE *)v153) >> 2)
    goto LABEL_53;
  if ((v34 & 0x8000000000000000) != 0)
LABEL_173:
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v50 = v154;
  v51 = (char *)operator new(v34 >> 2);
  v52 = v50 - v49;
  v53 = &v51[(v50 - v49) & 0xFFFFFFFFFFFFFFFCLL];
  v54 = v53;
  if (v50 == v49)
    goto LABEL_51;
  if ((unint64_t)(v52 - 4) < 0x2C)
  {
    v54 = &v51[(v50 - v49) & 0xFFFFFFFFFFFFFFFCLL];
    do
    {
LABEL_50:
      v61 = *((_DWORD *)v50 - 1);
      v50 -= 4;
      *((_DWORD *)v54 - 1) = v61;
      v54 -= 4;
    }
    while (v50 != v49);
    goto LABEL_51;
  }
  v54 = &v51[(v50 - v49) & 0xFFFFFFFFFFFFFFFCLL];
  if (v50 - v51 - (v52 & 0xFFFFFFFFFFFFFFFCLL) < 0x20)
    goto LABEL_50;
  v55 = v52 >> 2;
  v56 = ((unint64_t)(v52 - 4) >> 2) + 1;
  v57 = &v51[4 * v55 - 16];
  v58 = v50 - 16;
  v59 = v56 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v60 = *(_OWORD *)v58;
    *((_OWORD *)v57 - 1) = *((_OWORD *)v58 - 1);
    *(_OWORD *)v57 = v60;
    v57 -= 32;
    v58 -= 32;
    v59 -= 8;
  }
  while (v59);
  v54 = &v53[-4 * (v56 & 0x7FFFFFFFFFFFFFF8)];
  v50 -= 4 * (v56 & 0x7FFFFFFFFFFFFFF8);
  if (v56 != (v56 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_50;
LABEL_51:
  v153 = v54;
  v154 = v53;
  v155 = &v51[4 * v35];
  if (v49)
  {
    operator delete(v49);
    v33 = (float *)__p;
    v32 = v150;
  }
LABEL_53:
  v62 = v144;
  if (v33 != v32)
  {
    v63 = MEMORY[0x24BDACB70];
    do
    {
      v65 = *v33;
      v66 = v33[1];
      v67 = llroundf((float)(*v33 / (float)v141) * (float)v145);
      v68 = v33[2];
      if (v67 >= v31
        || v67 < 0
        || (v69 = llroundf((float)(v66 / (float)v142) * (float)v146), v69 < 0)
        || (v70 = v68 / 1000.0, (float)(v68 / 1000.0) > *((float *)v62 + 653))
        || v69 >= v30
        || v70 < *((float *)v62 + 652))
      {
        if (ADDebugUtilsADVerboseLogsEnabled && os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134218496;
          *(double *)&v160 = v65;
          v161 = 2048;
          v162 = v66;
          v163 = 2048;
          v164 = v68;
          _os_log_impl(&dword_20B62B000, v63, OS_LOG_TYPE_DEFAULT, "DisparityToDepth [Verbose] Skipping (pixelX, pixelY, depth)=(%f, %f, %f)", buf, 0x20u);
        }
        goto LABEL_57;
      }
      _H13 = *(_WORD *)(a2 + 2 * (v67 + v69 * v31));
      v72 = v157;
      v73 = 1.0 / v70;
      if (v157 < (float *)v158)
      {
        *v157 = v73;
        v74 = v72 + 1;
        goto LABEL_91;
      }
      v75 = (float *)v156;
      v76 = (char *)v157 - (_BYTE *)v156;
      v77 = ((char *)v157 - (_BYTE *)v156) >> 2;
      v78 = v77 + 1;
      if ((unint64_t)(v77 + 1) >> 62)
        goto LABEL_171;
      v79 = v158 - (_BYTE *)v156;
      if ((v158 - (_BYTE *)v156) >> 1 > v78)
        v78 = v79 >> 1;
      if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFFCLL)
        v80 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v80 = v78;
      if (v80)
      {
        if (v80 >> 62)
          goto LABEL_172;
        v81 = (char *)operator new(4 * v80);
      }
      else
      {
        v81 = 0;
      }
      v82 = (float *)&v81[4 * v77];
      *v82 = v73;
      v74 = v82 + 1;
      if (v72 == v75)
      {
        v31 = v145;
        v30 = v146;
      }
      else
      {
        v83 = (char *)(v72 - 1) - (char *)v75;
        if (v83 >= 0x2C)
        {
          v84 = (char *)v72 - &v81[v76];
          v31 = v145;
          v30 = v146;
          if (v84 >= 0x20)
          {
            v85 = (v83 >> 2) + 1;
            v86 = &v81[4 * v77 - 16];
            v87 = v72 - 4;
            v88 = v85 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v89 = *(_OWORD *)v87;
              *((_OWORD *)v86 - 1) = *((_OWORD *)v87 - 1);
              *(_OWORD *)v86 = v89;
              v86 -= 32;
              v87 -= 8;
              v88 -= 8;
            }
            while (v88);
            v82 -= v85 & 0x7FFFFFFFFFFFFFF8;
            v72 -= v85 & 0x7FFFFFFFFFFFFFF8;
            if (v85 == (v85 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_88;
          }
        }
        else
        {
          v31 = v145;
          v30 = v146;
        }
        do
        {
          v90 = *((_DWORD *)v72-- - 1);
          *((_DWORD *)v82-- - 1) = v90;
        }
        while (v72 != v75);
      }
LABEL_88:
      v156 = v82;
      v157 = v74;
      v158 = &v81[4 * v80];
      if (v75)
        operator delete(v75);
      v62 = v144;
      v63 = MEMORY[0x24BDACB70];
LABEL_91:
      __asm { FCVT            S13, H13 }
      v157 = v74;
      v96 = v154;
      if (v154 >= v155)
      {
        v97 = (char *)v153;
        v98 = v154 - (_BYTE *)v153;
        v99 = (v154 - (_BYTE *)v153) >> 2;
        v100 = v99 + 1;
        if ((unint64_t)(v99 + 1) >> 62)
LABEL_171:
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v101 = v155 - (_BYTE *)v153;
        if ((v155 - (_BYTE *)v153) >> 1 > v100)
          v100 = v101 >> 1;
        if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFFCLL)
          v102 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v102 = v100;
        if (v102)
        {
          if (v102 >> 62)
LABEL_172:
            std::__throw_bad_array_new_length[abi:ne180100]();
          v103 = (char *)operator new(4 * v102);
        }
        else
        {
          v103 = 0;
        }
        v104 = &v103[4 * v99];
        *(_DWORD *)v104 = _S13;
        v64 = v104 + 4;
        if (v96 == v97)
        {
          v31 = v145;
          v30 = v146;
        }
        else
        {
          v105 = v96 - 4 - v97;
          if (v105 < 0x2C)
          {
            v31 = v145;
            v30 = v146;
            goto LABEL_110;
          }
          v106 = v96 - &v103[v98];
          v31 = v145;
          v30 = v146;
          if (v106 < 0x20)
            goto LABEL_183;
          v107 = (v105 >> 2) + 1;
          v108 = &v103[4 * v99 - 16];
          v109 = v96 - 16;
          v110 = v107 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v111 = *(_OWORD *)v109;
            *((_OWORD *)v108 - 1) = *((_OWORD *)v109 - 1);
            *(_OWORD *)v108 = v111;
            v108 -= 32;
            v109 -= 32;
            v110 -= 8;
          }
          while (v110);
          v104 -= 4 * (v107 & 0x7FFFFFFFFFFFFFF8);
          v96 -= 4 * (v107 & 0x7FFFFFFFFFFFFFF8);
          if (v107 != (v107 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_183:
            do
            {
LABEL_110:
              v112 = *((_DWORD *)v96 - 1);
              v96 -= 4;
              *((_DWORD *)v104 - 1) = v112;
              v104 -= 4;
            }
            while (v96 != v97);
          }
        }
        v153 = v104;
        v154 = v64;
        v155 = &v103[4 * v102];
        if (v97)
          operator delete(v97);
        v62 = v144;
        v63 = MEMORY[0x24BDACB70];
        goto LABEL_56;
      }
      *(_DWORD *)v154 = _S13;
      v64 = v96 + 4;
LABEL_56:
      v154 = v64;
LABEL_57:
      v33 += 4;
    }
    while (v33 != v32);
  }
  if ((DisparityToDepth::Ransac<float,float>::fit((int *)v62 + 18, (const void **)&v156, (const void **)&v153) & 1) != 0)
  {
    if (ADDebugUtilsADVerboseLogsEnabled && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v160 = ((char *)v157 - (_BYTE *)v156) >> 2;
      _os_log_impl(&dword_20B62B000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "DisparityToDepth [Verbose] Ransac with input length: %lu succeeded", buf, 0xCu);
    }
    v113 = (*(float (**)(_QWORD))(**((_QWORD **)v62 + 8) + 48))(*((_QWORD *)v62 + 8));
    if (*((_BYTE *)v62 + 2616))
    {
      if (*((_BYTE *)v62 + 2632))
        v114 = *((double *)v62 + 328);
      else
        v114 = v113;
      v127 = (float)(v113 * (float)(1.0 - *((float *)v62 + 655))) + *((float *)v62 + 655) * v114;
      *((double *)v62 + 328) = v127;
      *((_BYTE *)v62 + 2632) = 1;
      v113 = v127;
    }
    else
    {
      if (!*((_BYTE *)v62 + 2632))
        *((_BYTE *)v62 + 2632) = 1;
      *((double *)v62 + 328) = v113;
    }
    v128 = -(*(float (**)(_QWORD))(**((_QWORD **)v62 + 8) + 56))(*((_QWORD *)v62 + 8));
    if (*((_BYTE *)v62 + 2640))
    {
      if (*((_BYTE *)v62 + 2656))
        v129 = *((double *)v62 + 331);
      else
        v129 = v128;
      v130 = (float)((float)(1.0 - *((float *)v62 + 661)) * v128) + *((float *)v62 + 661) * v129;
      *((double *)v62 + 331) = v130;
      *((_BYTE *)v62 + 2656) = 1;
      v128 = v130;
    }
    else
    {
      if (!*((_BYTE *)v62 + 2656))
        *((_BYTE *)v62 + 2656) = 1;
      *((double *)v62 + 331) = v128;
    }
    *(_BYTE *)v143 = 1;
    *(_QWORD *)(v143 + 16) = 0;
    *(float *)(v143 + 4) = v113;
    *(float *)(v143 + 8) = v128;
    *(_QWORD *)(v143 + 24) = 0;
    *(_QWORD *)(v143 + 32) = 0;
    v131 = v156;
    v132 = (char *)v157 - (_BYTE *)v156;
    if (v157 != v156)
    {
      if (v132 < 0)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v133 = (char *)operator new((char *)v157 - (_BYTE *)v156);
      *(_QWORD *)(v143 + 16) = v133;
      *(_QWORD *)(v143 + 24) = v133;
      v134 = &v133[4 * (v132 >> 2)];
      *(_QWORD *)(v143 + 32) = v134;
      memcpy(v133, v131, v132);
      *(_QWORD *)(v143 + 24) = v134;
    }
    *(_QWORD *)(v143 + 40) = 0;
    *(_QWORD *)(v143 + 48) = 0;
    *(_QWORD *)(v143 + 56) = 0;
    v135 = v153;
    v136 = v154 - (_BYTE *)v153;
    if (v154 != v153)
    {
      if (v136 < 0)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v137 = (char *)operator new(v154 - (_BYTE *)v153);
      *(_QWORD *)(v143 + 40) = v137;
      *(_QWORD *)(v143 + 48) = v137;
      v138 = &v137[4 * (v136 >> 2)];
      *(_QWORD *)(v143 + 56) = v138;
      memcpy(v137, v135, v136);
      *(_QWORD *)(v143 + 48) = v138;
    }
    *(_QWORD *)(v143 + 64) = 0;
    *(_QWORD *)(v143 + 72) = 0;
    *(_QWORD *)(v143 + 80) = 0;
    v125 = v151;
    v126 = v152 - (_BYTE *)v151;
    if (v152 == v151)
      goto LABEL_158;
    if (v126 < 0)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    goto LABEL_157;
  }
  if (ADDebugUtilsADVerboseLogsEnabled && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v160 = ((char *)v157 - (_BYTE *)v156) >> 2;
    _os_log_impl(&dword_20B62B000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "DisparityToDepth [Verbose] Ransac input length: %lu failed", buf, 0xCu);
  }
  if (*((_BYTE *)v62 + 2656) && *((_BYTE *)v62 + 2632))
  {
    v115 = *((double *)v62 + 331);
    v116 = *((double *)v62 + 328);
    *(_BYTE *)v143 = 1;
    *(float *)&v116 = v116;
    *(float *)&v115 = v115;
    *(_QWORD *)(v143 + 16) = 0;
    *(_DWORD *)(v143 + 4) = LODWORD(v116);
    *(_DWORD *)(v143 + 8) = LODWORD(v115);
    *(_QWORD *)(v143 + 24) = 0;
    *(_QWORD *)(v143 + 32) = 0;
    v117 = v156;
    v118 = (char *)v157 - (_BYTE *)v156;
    if (v157 != v156)
    {
      if (v118 < 0)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v119 = (char *)operator new((char *)v157 - (_BYTE *)v156);
      *(_QWORD *)(v143 + 16) = v119;
      *(_QWORD *)(v143 + 24) = v119;
      v120 = &v119[4 * (v118 >> 2)];
      *(_QWORD *)(v143 + 32) = v120;
      memcpy(v119, v117, v118);
      *(_QWORD *)(v143 + 24) = v120;
    }
    *(_QWORD *)(v143 + 40) = 0;
    *(_QWORD *)(v143 + 48) = 0;
    *(_QWORD *)(v143 + 56) = 0;
    v121 = v153;
    v122 = v154 - (_BYTE *)v153;
    if (v154 != v153)
    {
      if (v122 < 0)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v123 = (char *)operator new(v154 - (_BYTE *)v153);
      *(_QWORD *)(v143 + 40) = v123;
      *(_QWORD *)(v143 + 48) = v123;
      v124 = &v123[4 * (v122 >> 2)];
      *(_QWORD *)(v143 + 56) = v124;
      memcpy(v123, v121, v122);
      *(_QWORD *)(v143 + 48) = v124;
    }
    *(_QWORD *)(v143 + 64) = 0;
    *(_QWORD *)(v143 + 72) = 0;
    *(_QWORD *)(v143 + 80) = 0;
    v125 = v151;
    v126 = v152 - (_BYTE *)v151;
    if (v152 == v151)
      goto LABEL_158;
    if (v126 < 0)
      std::vector<float>::__throw_length_error[abi:ne180100]();
LABEL_157:
    v139 = (char *)operator new(v152 - (_BYTE *)v151);
    *(_QWORD *)(v143 + 64) = v139;
    *(_QWORD *)(v143 + 72) = v139;
    v140 = &v139[32 * (v126 >> 5)];
    *(_QWORD *)(v143 + 80) = v140;
    memcpy(v139, v125, v126);
    *(_QWORD *)(v143 + 72) = v140;
    goto LABEL_158;
  }
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3ELm4ELm5EEEEJbffNS_6vectorIfNS_9allocatorIfEEEES6_NS3_I31ADDisparityToDepthFitWorldPointNS4_IS7_EEEEEEC2B8ne180100IJLm0ELm1ELm2ELm3ELm4ELm5EEJbffS6_S6_S9_EJEJEJbiiRS6_SC_RKS9_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSG_IJDpT2_EEEDpOT3_(v143, 0, 0, 0, (uint64_t)&v156, (uint64_t)&v153, (uint64_t)&v151);
LABEL_158:
  if (__p)
  {
    v150 = (float *)__p;
    operator delete(__p);
  }
  if (v20)
    operator delete(v20);
LABEL_162:
  if (v151)
    operator delete(v151);
  if (v153)
  {
    v154 = (char *)v153;
    operator delete(v153);
  }
  if (v156)
  {
    v157 = (float *)v156;
    operator delete(v156);
  }
}

void sub_20B66E4E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  void **v29;
  void **v30;
  void *v31;
  void **v32;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;

  v34 = *v32;
  if (*v32)
  {
    a12[9] = v34;
    operator delete(v34);
    v35 = *v30;
    if (!*v30)
    {
LABEL_3:
      v36 = *v29;
      if (!*v29)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else
  {
    v35 = *v30;
    if (!*v30)
      goto LABEL_3;
  }
  a12[6] = v35;
  operator delete(v35);
  v36 = *v29;
  if (!*v29)
  {
LABEL_4:
    v37 = __p;
    if (!__p)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  a12[3] = v36;
  operator delete(v36);
  v37 = __p;
  if (!__p)
  {
LABEL_5:
    if (!v31)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(v37);
  if (!v31)
  {
LABEL_6:
    v38 = a22;
    if (!a22)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(v31);
  v38 = a22;
  if (!a22)
  {
LABEL_7:
    v39 = a25;
    if (!a25)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  operator delete(v38);
  v39 = a25;
  if (!a25)
  {
LABEL_8:
    v40 = a28;
    if (!a28)
      goto LABEL_9;
    goto LABEL_17;
  }
LABEL_16:
  operator delete(v39);
  v40 = a28;
  if (!a28)
LABEL_9:
    _Unwind_Resume(exception_object);
LABEL_17:
  operator delete(v40);
  _Unwind_Resume(exception_object);
}

void DisparityToDepth::WorldPointsContainer::vector(DisparityToDepth::WorldPointsContainer *this@<X0>, char **a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  size_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v20;
  __int128 v21;
  char *v22;
  _BYTE *v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  __int128 v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  __int128 v40;
  char *v41;
  void *v43[2];
  void *__p[2];
  int v45;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *(_OWORD *)v43 = 0u;
  *(_OWORD *)__p = 0u;
  v45 = 1065353216;
  v4 = *(_QWORD *)this;
  v3 = *((_QWORD *)this + 1);
  v6 = (_BYTE *)*((_QWORD *)this + 4);
  v5 = (_BYTE *)*((_QWORD *)this + 5);
  v7 = v5 - v6;
  v8 = (v5 - v6) >> 5;
  v9 = v8 + ((v3 - *(_QWORD *)this) >> 5);
  if (!v9)
  {
    v11 = 0;
    v10 = 0;
    if (v4 != v3)
      goto LABEL_4;
LABEL_35:
    if (v5 == v6)
      goto LABEL_29;
LABEL_36:
    if ((v7 & 0x8000000000000000) != 0)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v27 = (char *)operator new(v7);
    v28 = &v27[32 * v8];
    memcpy(v27, v6, v7);
    if (v8)
    {
      v29 = a2[2];
      v30 = *a2;
      v31 = v27;
      do
      {
        if ((std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((float *)v43, *((_DWORD *)v31 + 5), *((_DWORD *)v31 + 5)) & 1) != 0)
        {
          if (v10 < v29)
          {
            v32 = *((_OWORD *)v31 + 1);
            *(_OWORD *)v10 = *(_OWORD *)v31;
            *((_OWORD *)v10 + 1) = v32;
            v10 += 32;
          }
          else
          {
            v33 = (v10 - v30) >> 5;
            v34 = v33 + 1;
            if ((unint64_t)(v33 + 1) >> 59)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            if ((v29 - v30) >> 4 > v34)
              v34 = (v29 - v30) >> 4;
            if ((unint64_t)(v29 - v30) >= 0x7FFFFFFFFFFFFFE0)
              v35 = 0x7FFFFFFFFFFFFFFLL;
            else
              v35 = v34;
            if (v35)
            {
              if (v35 >> 59)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v36 = (char *)operator new(32 * v35);
            }
            else
            {
              v36 = 0;
            }
            v37 = *((_OWORD *)v31 + 1);
            v38 = &v36[32 * v33];
            *(_OWORD *)v38 = *(_OWORD *)v31;
            *((_OWORD *)v38 + 1) = v37;
            if (v10 == v30)
            {
              v41 = &v36[32 * v33];
            }
            else
            {
              v39 = &v36[32 * v33];
              do
              {
                v40 = *((_OWORD *)v10 - 1);
                v41 = v39 - 32;
                *((_OWORD *)v39 - 2) = *((_OWORD *)v10 - 2);
                *((_OWORD *)v39 - 1) = v40;
                v10 -= 32;
                v39 -= 32;
              }
              while (v10 != v30);
            }
            v29 = &v36[32 * v35];
            v10 = v38 + 32;
            *a2 = v41;
            a2[1] = v38 + 32;
            a2[2] = v29;
            if (v30)
              operator delete(v30);
            v30 = v41;
          }
          a2[1] = v10;
        }
        v31 += 32;
      }
      while (v31 != v28);
    }
    operator delete(v27);
    v24 = __p[0];
    if (__p[0])
      goto LABEL_30;
    goto LABEL_31;
  }
  if (v9 >> 59)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v10 = (char *)operator new(32 * v9);
  v11 = &v10[32 * v9];
  *a2 = v10;
  a2[1] = v10;
  a2[2] = v11;
  if (v4 == v3)
    goto LABEL_35;
LABEL_4:
  v12 = v10;
  do
  {
    if ((std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((float *)v43, *(_DWORD *)(v4 + 20), *(_DWORD *)(v4 + 20)) & 1) != 0)
    {
      if (v12 < v11)
      {
        v13 = *(_OWORD *)(v4 + 16);
        *(_OWORD *)v12 = *(_OWORD *)v4;
        *((_OWORD *)v12 + 1) = v13;
        v12 += 32;
      }
      else
      {
        v14 = (v12 - v10) >> 5;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 59)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        if ((v11 - v10) >> 4 > v15)
          v15 = (v11 - v10) >> 4;
        if ((unint64_t)(v11 - v10) >= 0x7FFFFFFFFFFFFFE0)
          v16 = 0x7FFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        if (v16)
        {
          if (v16 >> 59)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v17 = (char *)operator new(32 * v16);
        }
        else
        {
          v17 = 0;
        }
        v18 = *(_OWORD *)(v4 + 16);
        v19 = &v17[32 * v14];
        *(_OWORD *)v19 = *(_OWORD *)v4;
        *((_OWORD *)v19 + 1) = v18;
        if (v12 == v10)
        {
          v22 = &v17[32 * v14];
        }
        else
        {
          v20 = &v17[32 * v14];
          do
          {
            v21 = *((_OWORD *)v12 - 1);
            v22 = v20 - 32;
            *((_OWORD *)v20 - 2) = *((_OWORD *)v12 - 2);
            *((_OWORD *)v20 - 1) = v21;
            v12 -= 32;
            v20 -= 32;
          }
          while (v12 != v10);
        }
        v11 = &v17[32 * v16];
        v12 = v19 + 32;
        *a2 = v22;
        a2[1] = v19 + 32;
        a2[2] = v11;
        if (v10)
          operator delete(v10);
        v10 = v22;
      }
      a2[1] = v12;
    }
    v4 += 32;
  }
  while (v4 != v3);
  v6 = (_BYTE *)*((_QWORD *)this + 4);
  v23 = (_BYTE *)*((_QWORD *)this + 5);
  v7 = v23 - v6;
  v8 = (v23 - v6) >> 5;
  v10 = v12;
  if (v23 != v6)
    goto LABEL_36;
LABEL_29:
  v24 = __p[0];
  if (__p[0])
  {
    do
    {
LABEL_30:
      v25 = (_QWORD *)*v24;
      operator delete(v24);
      v24 = v25;
    }
    while (v25);
  }
LABEL_31:
  v26 = v43[0];
  v43[0] = 0;
  if (v26)
    operator delete(v26);
}

void sub_20B66E994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v5;
  va_list va;

  va_start(va, a3);
  std::unordered_set<int>::~unordered_set[abi:ne180100]((uint64_t)va);
  v5 = *(void **)v3;
  if (*(_QWORD *)v3)
  {
    *(_QWORD *)(v3 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3ELm4ELm5EEEEJbffNS_6vectorIfNS_9allocatorIfEEEES6_NS3_I31ADDisparityToDepthFitWorldPointNS4_IS7_EEEEEEC2B8ne180100IJLm0ELm1ELm2ELm3ELm4ELm5EEJbffS6_S6_S9_EJEJEJbiiRS6_SC_RKS9_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSG_IJDpT2_EEEDpOT3_(uint64_t a1, char a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  const void *v11;
  int64_t v12;
  char *v13;
  char *v14;
  const void *v15;
  int64_t v16;
  char *v17;
  char *v18;
  const void *v19;
  int64_t v20;
  char *v21;
  char *v22;

  *(_BYTE *)a1 = a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(float *)(a1 + 4) = (float)a3;
  *(float *)(a1 + 8) = (float)a4;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v11 = *(const void **)a5;
  v10 = *(_QWORD *)(a5 + 8);
  v12 = v10 - *(_QWORD *)a5;
  if (v10 != *(_QWORD *)a5)
  {
    if (v12 < 0)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v13 = (char *)operator new(v10 - *(_QWORD *)a5);
    *(_QWORD *)(a1 + 16) = v13;
    *(_QWORD *)(a1 + 24) = v13;
    v14 = &v13[4 * (v12 >> 2)];
    *(_QWORD *)(a1 + 32) = v14;
    memcpy(v13, v11, v12);
    *(_QWORD *)(a1 + 24) = v14;
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v15 = *(const void **)a6;
  v16 = *(_QWORD *)(a6 + 8) - *(_QWORD *)a6;
  if (v16)
  {
    if (v16 < 0)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v17 = (char *)operator new(v16);
    *(_QWORD *)(a1 + 40) = v17;
    *(_QWORD *)(a1 + 48) = v17;
    v18 = &v17[4 * (v16 >> 2)];
    *(_QWORD *)(a1 + 56) = v18;
    memcpy(v17, v15, v16);
    *(_QWORD *)(a1 + 48) = v18;
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v19 = *(const void **)a7;
  v20 = *(_QWORD *)(a7 + 8) - *(_QWORD *)a7;
  if (v20)
  {
    if (v20 < 0)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v21 = (char *)operator new(v20);
    *(_QWORD *)(a1 + 64) = v21;
    *(_QWORD *)(a1 + 72) = v21;
    v22 = &v21[32 * (v20 >> 5)];
    *(_QWORD *)(a1 + 80) = v22;
    memcpy(v21, v19, v20);
    *(_QWORD *)(a1 + 72) = v22;
  }
  return a1;
}

void sub_20B66EB14(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;
  void *v8;

  v6 = *v2;
  if (*v2)
  {
    v1[9] = v6;
    operator delete(v6);
    v7 = *v3;
    if (!*v3)
    {
LABEL_3:
      v8 = *v4;
      if (!*v4)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v7 = *v3;
    if (!*v3)
      goto LABEL_3;
  }
  v1[6] = v7;
  operator delete(v7);
  v8 = *v4;
  if (!*v4)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_4:
  v1[3] = v8;
  operator delete(v8);
  goto LABEL_5;
}

void sub_20B66EB74()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x20B66EB38);
  JUMPOUT(0x20B66EB30);
}

uint64_t DisparityToDepth::Ransac<float,float>::fit(int *a1, const void **a2, const void **a3)
{
  _BYTE *v3;
  _BYTE *v5;
  unint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  int32x2_t v9;
  int *v10;
  const void **v11;
  _BYTE *v12;
  const void **v13;
  _BYTE *v14;
  int64_t v15;
  unint64_t v16;
  float32x4_t *v17;
  float *v18;
  uint64_t v19;
  float *v20;
  unint64_t v21;
  unint64_t v22;
  float32x4_t v23;
  float32x4_t *v24;
  unint64_t v25;
  float32x4_t v26;
  unint64_t v27;
  float *v28;
  __int32 v29;
  int v30;
  int *v31;
  float v32;
  unsigned int v33;
  uint64_t v34;
  char *v35;
  char *v36;
  unsigned int v37;
  int *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  signed int v50;
  unsigned int v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unsigned int v55;
  unsigned int v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  size_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  _DWORD *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  _DWORD *v88;
  char *v89;
  unint64_t v90;
  char *v91;
  char *v92;
  unint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  __int128 v98;
  int v99;
  uint64_t v100;
  _DWORD *v101;
  char *v102;
  int64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  unint64_t v109;
  _BYTE *v110;
  char *v111;
  unint64_t v112;
  char *v113;
  int v114;
  uint64_t v115;
  _OWORD *v116;
  __int128 *v117;
  uint64_t v118;
  __int128 v119;
  float *v120;
  _BYTE *v121;
  _BYTE *v122;
  uint64_t v123;
  unint64_t v124;
  char *v125;
  unint64_t v126;
  char *v127;
  char *v128;
  _BYTE *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  _BYTE *v137;
  char *v138;
  _BYTE *v139;
  unint64_t *v140;
  char *v141;
  char *v142;
  unint64_t v143;
  char *v144;
  unint64_t v145;
  uint64_t v146;
  _OWORD *v147;
  char *v148;
  uint64_t v149;
  __int128 v150;
  unint64_t v151;
  uint64_t v152;
  size_t v153;
  char *v154;
  char *v155;
  char *v156;
  char *v157;
  uint64_t v158;
  _DWORD *v159;
  char *v160;
  char *v161;
  char *v162;
  uint64_t v163;
  int64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  char *v168;
  char *v169;
  unint64_t v170;
  _BYTE *v171;
  char *v172;
  unint64_t v173;
  uint64_t v174;
  _OWORD *v175;
  char *v176;
  uint64_t v177;
  __int128 v178;
  int v179;
  uint64_t v180;
  _DWORD *v181;
  char *v182;
  int64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  char *v188;
  _BYTE *v189;
  char *v190;
  unint64_t v191;
  char *v192;
  int v193;
  uint64_t v194;
  _OWORD *v195;
  char *v196;
  uint64_t v197;
  __int128 v198;
  int v199;
  float v200;
  float v201;
  int v203;
  int v204;
  unint64_t v205;
  uint64_t v206;
  unint64_t v207;
  float *v208;
  char *v209;
  char *v210;
  unsigned int v211;
  char *v212;
  char *v213;
  char *v214;
  const void **v215;
  void *v218[3];
  void *v219;
  char *v220;
  char *v221;
  void *__p;
  char *v223;
  char *v224;
  void *v225;
  char *v226;
  char *v227;
  void *v228;
  char *v229;
  char *v230;
  void *v231;
  void *v232;
  uint64_t v233;
  void *v234;
  void *v235;
  uint64_t v236;

  v234 = 0;
  v235 = 0;
  v236 = 0;
  v231 = 0;
  v232 = 0;
  v233 = 0;
  v3 = a2[1];
  if (*a2 == v3)
  {
    v19 = 0;
    goto LABEL_262;
  }
  v5 = a3[1];
  if (*a3 == v5
    || (v6 = (v3 - (_BYTE *)*a2) >> 2, v6 != (v5 - (_BYTE *)*a3) >> 2)
    || v6 < (*(unsigned int (**)(_QWORD))(**(_QWORD **)a1 + 40))(*(_QWORD *)a1)
    || (v8 = *a3,
        v7 = a3[1],
        (*(unsigned int (**)(_QWORD))(**(_QWORD **)a1 + 40))(*(_QWORD *)a1) > (unint64_t)((v7 - v8) >> 2)))
  {
LABEL_259:
    v19 = 0;
    goto LABEL_260;
  }
  v10 = a1;
  if (*((float *)a1 + 3) == 0.0)
  {
    if (*((_BYTE *)a1 + 2528))
      v11 = a3;
    else
      v11 = a2;
    v12 = *v11;
    v13 = a2 + 1;
    if (*((_BYTE *)a1 + 2528))
      v13 = a3 + 1;
    v14 = *v13;
    v15 = (_BYTE *)*v13 - v12;
    v16 = v15 >> 2;
    if (*v13 == v12)
    {
      v18 = 0;
      v17 = 0;
    }
    else
    {
      if (v15 < 0)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v17 = (float32x4_t *)operator new((_BYTE *)*v13 - v12);
      v18 = &v17->f32[v16];
      memcpy(v17, v12, v15);
    }
    v20 = &v17->f32[v16 >> 1];
    if (v20 != v18)
      std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(v17->f32, &v17->f32[v16 >> 1], v18);
    if (v14 == v12)
      goto LABEL_30;
    v9.i32[0] = *(__int32 *)v20;
    if (v16 <= 1)
      v21 = 1;
    else
      v21 = v16;
    if (v21 > 7)
    {
      v22 = v21 & 0xFFFFFFFFFFFFFFF8;
      v23 = (float32x4_t)vdupq_lane_s32(v9, 0);
      v24 = v17 + 1;
      v25 = v21 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v26 = vabdq_f32(*v24, v23);
        v24[-1] = vabdq_f32(v24[-1], v23);
        *v24 = v26;
        v24 += 2;
        v25 -= 8;
      }
      while (v25);
      if (v21 == v22)
        goto LABEL_30;
    }
    else
    {
      v22 = 0;
    }
    v27 = v21 - v22;
    v28 = &v17->f32[v22];
    do
    {
      *v28 = vabds_f32(*v28, *(float *)v9.i32);
      ++v28;
      --v27;
    }
    while (v27);
LABEL_30:
    if (v20 != v18)
      std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(v17->f32, &v17->f32[v16 >> 1], v18);
    v29 = *(_DWORD *)v20;
    operator delete(v17);
    v10 = a1;
    a1[3] = v29;
  }
  if (v10[2] < 1)
    goto LABEL_259;
  v215 = a3;
  v30 = 0;
  v203 = 0;
  v31 = v10 + 6;
  v32 = 0.0;
  do
  {
    v33 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v10 + 40))(*(_QWORD *)v10);
    v204 = v30;
    if (v33)
    {
      v34 = v33;
      v35 = (char *)operator new(8 * v33);
      v36 = &v35[8 * v34];
    }
    else
    {
      v35 = 0;
      v36 = 0;
    }
    v37 = 0;
    v38 = a1;
    v39 = (unint64_t)((_BYTE *)a2[1] - (_BYTE *)*a2) >> 2;
    v40 = __clz(v39);
    v41 = 31;
    if ((((_DWORD)v39 << v40) & 0x7FFFFFFF) != 0)
      v41 = 32;
    v42 = v41 - v40;
    v43 = v42 >> 5;
    if ((v42 & 0x1F) != 0)
      ++v43;
    v205 = v43;
    v207 = v42;
    v44 = v35;
    v45 = v35;
    while (v37 < (*(unsigned int (**)(_QWORD))(**(_QWORD **)v38 + 40))(*(_QWORD *)v38))
    {
      if ((_DWORD)v39 == 1)
      {
        v50 = 0;
        if (v45 < v36)
          goto LABEL_44;
      }
      else if ((_DWORD)v39)
      {
        v51 = 0xFFFFFFFF >> -(v207 / v205);
        if (v205 > v207)
          v51 = 0;
        v52 = *((_QWORD *)v38 + 315);
        do
        {
          v53 = v52;
          v54 = v52 + 397;
          v52 = (v52 + 1) % 0x270;
          v55 = v31[v54 % 0x270] ^ ((v31[v52] & 0x7FFFFFFE | v31[v53] & 0x80000000) >> 1) ^ (v31[v52] << 31 >> 31) & 0x9908B0DF;
          v31[v53] = v55;
          v56 = ((v55 ^ (v55 >> 11)) << 7) & 0x9D2C5680 ^ v55 ^ (v55 >> 11);
          v50 = ((v56 << 15) & 0xEFC60000 ^ v56 ^ (((v56 << 15) & 0xEFC60000 ^ v56) >> 18)) & v51;
        }
        while (v50 >= v39);
        *((_QWORD *)v38 + 315) = v52;
        if (v45 < v36)
        {
LABEL_44:
          *(_QWORD *)v45 = v50;
          v46 = v45 + 8;
          goto LABEL_45;
        }
      }
      else
      {
        v47 = *((_QWORD *)v38 + 315);
        v48 = (v47 + 1) % 0x270uLL;
        v49 = v47;
        LODWORD(v47) = v31[(v47 + 397) % 0x270uLL] ^ ((v31[v48] & 0x7FFFFFFE | v31[v47] & 0x80000000) >> 1) ^ (v31[v48] << 31 >> 31) & 0x9908B0DF;
        v31[v49] = v47;
        *((_QWORD *)v38 + 315) = v48;
        LODWORD(v47) = ((v47 ^ (v47 >> 11)) << 7) & 0x9D2C5680 ^ v47 ^ (v47 >> 11);
        v50 = ((_DWORD)v47 << 15) & 0xEFC60000 ^ v47 ^ ((((_DWORD)v47 << 15) & 0xEFC60000 ^ v47) >> 18);
        if (v45 < v36)
          goto LABEL_44;
      }
      v211 = v37;
      v57 = v45;
      v58 = v45 - v44;
      v59 = v58 >> 3;
      v60 = (v58 >> 3) + 1;
      if (v60 >> 61)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      if ((v36 - v44) >> 2 > v60)
        v60 = (v36 - v44) >> 2;
      if ((unint64_t)(v36 - v44) >= 0x7FFFFFFFFFFFFFF8)
        v61 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v61 = v60;
      if (v61)
      {
        if (v61 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v62 = v61;
        v63 = (char *)operator new(8 * v61);
        v61 = v62;
      }
      else
      {
        v63 = 0;
      }
      v35 = &v63[8 * v59];
      *(_QWORD *)v35 = v50;
      v46 = v35 + 8;
      if (v57 == v44)
      {
        v38 = a1;
        v37 = v211;
        goto LABEL_78;
      }
      v64 = v57 - 8 - v44;
      if (v64 < 0x168)
      {
        v65 = v57;
LABEL_76:
        v38 = a1;
        v37 = v211;
        do
        {
LABEL_77:
          v66 = *((_QWORD *)v65 - 1);
          v65 -= 8;
          *((_QWORD *)v35 - 1) = v66;
          v35 -= 8;
        }
        while (v65 != v44);
        goto LABEL_78;
      }
      if (&v63[v58 - 8 - (v64 & 0xFFFFFFFFFFFFFFF8)] > &v63[v58 - 8]
        || &v57[-(v64 & 0xFFFFFFFFFFFFFFF8) - 8] > v57 - 8
        || (unint64_t)(v57 - &v63[v58]) < 0x20)
      {
        v65 = v57;
        goto LABEL_76;
      }
      v67 = (v64 >> 3) + 1;
      v65 = &v57[-8 * (v67 & 0x3FFFFFFFFFFFFFFCLL)];
      v68 = &v63[8 * v59 - 16];
      v69 = v57 - 16;
      v70 = v67 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v71 = *(_OWORD *)v69;
        *((_OWORD *)v68 - 1) = *((_OWORD *)v69 - 1);
        *(_OWORD *)v68 = v71;
        v68 -= 32;
        v69 -= 32;
        v70 -= 4;
      }
      while (v70);
      v35 -= 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
      v38 = a1;
      v37 = v211;
      if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_77;
LABEL_78:
      v36 = &v63[8 * v61];
      if (v44)
        operator delete(v44);
      v44 = v35;
LABEL_45:
      ++v37;
      v45 = v46;
    }
    v228 = 0;
    v229 = 0;
    v230 = 0;
    v225 = 0;
    v226 = 0;
    v227 = 0;
    v72 = v45 - v44;
    if (v45 != v44)
    {
      if (v72 < 0)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v73 = (unint64_t)v72 >> 1;
      v74 = (char *)operator new((unint64_t)v72 >> 1);
      v75 = v72 >> 3;
      v228 = v74;
      v229 = v74;
      v230 = &v74[4 * v75];
      v76 = (char *)operator new(v73);
      v225 = v76;
      v226 = v76;
      v227 = &v76[4 * v75];
      v209 = v45;
      while (1)
      {
        v78 = *(_QWORD *)v44;
        v79 = *a2;
        v80 = v229;
        if (v229 >= v230)
        {
          v82 = (char *)v228;
          v83 = (char *)(v229 - (_BYTE *)v228);
          v84 = (v229 - (_BYTE *)v228) >> 2;
          v85 = v84 + 1;
          if ((unint64_t)(v84 + 1) >> 62)
            goto LABEL_265;
          v86 = v230 - (_BYTE *)v228;
          if ((v230 - (_BYTE *)v228) >> 1 > v85)
            v85 = v86 >> 1;
          v87 = (unint64_t)v86 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v85;
          if (v87)
          {
            v212 = (char *)(v229 - (_BYTE *)v228);
            if (v87 >> 62)
              goto LABEL_267;
            v88 = *a2;
            v89 = v76;
            v90 = v87;
            v91 = (char *)operator new(4 * v87);
            v87 = v90;
            v76 = v89;
            v79 = v88;
            v83 = v212;
          }
          else
          {
            v91 = 0;
          }
          v92 = &v91[4 * v84];
          *(_DWORD *)v92 = v79[v78];
          v81 = v92 + 4;
          if (v80 != v82)
          {
            v93 = v80 - 4 - v82;
            if (v93 < 0x2C)
              goto LABEL_279;
            if ((unint64_t)(v80 - &v83[(_QWORD)v91]) < 0x20)
              goto LABEL_279;
            v94 = (v93 >> 2) + 1;
            v95 = &v91[4 * v84 - 16];
            v96 = v80 - 16;
            v97 = v94 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v98 = *(_OWORD *)v96;
              *((_OWORD *)v95 - 1) = *((_OWORD *)v96 - 1);
              *(_OWORD *)v95 = v98;
              v95 -= 32;
              v96 -= 32;
              v97 -= 8;
            }
            while (v97);
            v92 -= 4 * (v94 & 0x7FFFFFFFFFFFFFF8);
            v80 -= 4 * (v94 & 0x7FFFFFFFFFFFFFF8);
            if (v94 != (v94 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_279:
              do
              {
                v99 = *((_DWORD *)v80 - 1);
                v80 -= 4;
                *((_DWORD *)v92 - 1) = v99;
                v92 -= 4;
              }
              while (v80 != v82);
            }
          }
          v228 = v92;
          v229 = v81;
          v230 = &v91[4 * v87];
          if (v82)
          {
            operator delete(v82);
            v76 = v226;
          }
          v45 = v209;
        }
        else
        {
          *(_DWORD *)v229 = v79[v78];
          v81 = v80 + 4;
        }
        v229 = v81;
        v100 = *(_QWORD *)v44;
        v101 = *v215;
        if (v76 >= v227)
          break;
        *(_DWORD *)v76 = v101[v100];
        v77 = v76 + 4;
LABEL_89:
        v226 = v77;
        v44 += 8;
        v76 = v77;
        if (v44 == v45)
          goto LABEL_138;
      }
      v102 = (char *)v225;
      v103 = v76 - (_BYTE *)v225;
      v104 = (v76 - (_BYTE *)v225) >> 2;
      v105 = v104 + 1;
      if ((unint64_t)(v104 + 1) >> 62)
LABEL_265:
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v106 = v227 - (_BYTE *)v225;
      if ((v227 - (_BYTE *)v225) >> 1 > v105)
        v105 = v106 >> 1;
      if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFFCLL)
        v107 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v107 = v105;
      if (v107)
      {
        if (v107 >> 62)
LABEL_267:
          std::__throw_bad_array_new_length[abi:ne180100]();
        v108 = v76;
        v109 = v107;
        v110 = operator new(4 * v107);
        v107 = v109;
        v76 = v108;
      }
      else
      {
        v110 = 0;
      }
      v111 = &v110[4 * v104];
      *(_DWORD *)v111 = v101[v100];
      v77 = v111 + 4;
      if (v76 == v102)
      {
        v45 = v209;
        goto LABEL_129;
      }
      v112 = v76 - 4 - v102;
      if (v112 < 0xBC
        || &v110[v103 - 4 - (v112 & 0xFFFFFFFFFFFFFFFCLL)] > &v110[v103 - 4]
        || &v76[-(v112 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v76 - 4
        || (unint64_t)(v76 - v110 - v103) < 0x20)
      {
        v113 = v76;
        v45 = v209;
      }
      else
      {
        v115 = (v112 >> 2) + 1;
        v113 = &v76[-4 * (v115 & 0x7FFFFFFFFFFFFFF8)];
        v116 = &v110[4 * v104 - 16];
        v117 = (__int128 *)(v76 - 16);
        v118 = v115 & 0x7FFFFFFFFFFFFFF8;
        v45 = v209;
        do
        {
          v119 = *v117;
          *(v116 - 1) = *(v117 - 1);
          *v116 = v119;
          v116 -= 2;
          v117 -= 2;
          v118 -= 8;
        }
        while (v118);
        v111 -= 4 * (v115 & 0x7FFFFFFFFFFFFFF8);
        if (v115 == (v115 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_129:
          v225 = v111;
          v226 = v77;
          v227 = &v110[4 * v107];
          if (v102)
            operator delete(v102);
          goto LABEL_89;
        }
      }
      do
      {
        v114 = *((_DWORD *)v113 - 1);
        v113 -= 4;
        *((_DWORD *)v111 - 1) = v114;
        v111 -= 4;
      }
      while (v113 != v102);
      goto LABEL_129;
    }
LABEL_138:
    (*(void (**)(_QWORD, void **, void **))(**(_QWORD **)a1 + 16))(*(_QWORD *)a1, &v228, &v225);
    if (*((_BYTE *)a1 + 2528))
    {
      (*(void (**)(void **__return_ptr, _QWORD, const void **))(**(_QWORD **)a1 + 32))(&__p, *(_QWORD *)a1, v215);
    }
    else
    {
      (*(void (**)(void **__return_ptr, _QWORD, const void **))(**(_QWORD **)a1 + 24))(&__p, *(_QWORD *)a1, a2);
    }
    v120 = (float *)v219;
    if (__p)
    {
      v223 = (char *)__p;
      operator delete(__p);
    }
    v122 = *a2;
    v121 = a2[1];
    v123 = v121 - (_BYTE *)*a2;
    v124 = v123 >> 2;
    v208 = v120;
    if (v121 != *a2)
    {
      if ((unint64_t)v123 >= 0x7FFFFFFFFFFFFFFDLL)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v125 = (char *)operator new(2 * v123);
      v126 = 0;
      v127 = &v125[8 * v124];
      v128 = v125;
      v129 = v121;
      while (1)
      {
        if (v120[v126] <= *((float *)a1 + 3))
        {
          if (v128 >= v127)
          {
            v130 = v125;
            v131 = v128 - v125;
            v132 = v131 >> 3;
            v133 = (v131 >> 3) + 1;
            v213 = v130;
            if (v133 >> 61)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v134 = v127 - v130;
            v135 = (v127 - v130) >> 2;
            if (v135 > v133)
              v133 = v135;
            if (v134 >= 0x7FFFFFFFFFFFFFF8)
              v136 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v136 = v133;
            if (v136)
            {
              if (v136 >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v137 = v129;
              v138 = v128;
              v139 = operator new(8 * v136);
              v128 = v138;
              v129 = v137;
            }
            else
            {
              v139 = 0;
            }
            v140 = (unint64_t *)&v139[8 * v132];
            *v140 = v126;
            v141 = (char *)(v140 + 1);
            v142 = v213;
            if (v128 != v213)
            {
              v143 = v128 - 8 - v213;
              if (v143 < 0x168
                || &v139[v131 - 8 - (v143 & 0xFFFFFFFFFFFFFFF8)] > &v139[v131 - 8]
                || &v128[-(v143 & 0xFFFFFFFFFFFFFFF8) - 8] > v128 - 8
                || (unint64_t)(v128 - &v139[v131]) < 0x20)
              {
                v144 = v128;
                v120 = v208;
                v142 = v213;
              }
              else
              {
                v146 = (v143 >> 3) + 1;
                v144 = &v128[-8 * (v146 & 0x3FFFFFFFFFFFFFFCLL)];
                v147 = &v139[8 * v132 - 16];
                v148 = v128 - 16;
                v149 = v146 & 0x3FFFFFFFFFFFFFFCLL;
                v142 = v213;
                do
                {
                  v150 = *(_OWORD *)v148;
                  *(v147 - 1) = *((_OWORD *)v148 - 1);
                  *v147 = v150;
                  v147 -= 2;
                  v148 -= 32;
                  v149 -= 4;
                }
                while (v149);
                v140 -= v146 & 0x3FFFFFFFFFFFFFFCLL;
                v120 = v208;
                if (v146 == (v146 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_164:
                  v127 = &v139[8 * v136];
                  if (v142)
                    goto LABEL_165;
                  goto LABEL_166;
                }
              }
              do
              {
                v145 = *((_QWORD *)v144 - 1);
                v144 -= 8;
                *--v140 = v145;
              }
              while (v144 != v142);
              goto LABEL_164;
            }
            v120 = v208;
            v127 = &v139[8 * v136];
            if (v213)
            {
LABEL_165:
              operator delete(v142);
              v122 = *a2;
              v129 = a2[1];
            }
LABEL_166:
            v125 = (char *)v140;
            v128 = v141;
            goto LABEL_147;
          }
          *(_QWORD *)v128 = v126;
          v128 += 8;
        }
LABEL_147:
        ++v126;
        v124 = (v129 - v122) >> 2;
        if (v126 >= v124)
          goto LABEL_177;
      }
    }
    v125 = 0;
    v128 = 0;
LABEL_177:
    v151 = v128 - v125;
    v152 = (v128 - v125) >> 3;
    if ((float)((float)(unint64_t)v152 / (float)v124) <= *((float *)a1 + 4))
    {
      v10 = a1;
      v199 = v204;
      if (!v125)
        goto LABEL_235;
LABEL_234:
      operator delete(v125);
      goto LABEL_235;
    }
    __p = 0;
    v223 = 0;
    v224 = 0;
    v219 = 0;
    v220 = 0;
    v221 = 0;
    if (v128 != v125)
    {
      v210 = v128;
      v214 = v125;
      if ((v151 & 0x8000000000000000) != 0)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v153 = v151 >> 1;
      __p = operator new(v151 >> 1);
      v223 = (char *)__p;
      v224 = (char *)__p + 4 * v152;
      v154 = (char *)operator new(v153);
      v219 = v154;
      v220 = v154;
      v221 = &v154[4 * v152];
      v155 = v125;
      v156 = v210;
      while (1)
      {
        v158 = *(_QWORD *)v155;
        v159 = *a2;
        v160 = v223;
        if (v223 >= v224)
        {
          v162 = (char *)__p;
          v163 = v223 - (_BYTE *)__p;
          v164 = (v223 - (_BYTE *)__p) >> 2;
          v165 = v164 + 1;
          if ((unint64_t)(v164 + 1) >> 62)
            goto LABEL_268;
          v166 = v224 - (_BYTE *)__p;
          if ((v224 - (_BYTE *)__p) >> 1 > v165)
            v165 = v166 >> 1;
          v167 = (unint64_t)v166 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v165;
          if (v167)
          {
            v206 = v223 - (_BYTE *)__p;
            if (v167 >> 62)
              goto LABEL_270;
            v168 = v154;
            v169 = v155;
            v170 = v167;
            v171 = operator new(4 * v167);
            v156 = v210;
            v167 = v170;
            v155 = v169;
            v154 = v168;
            v163 = v206;
          }
          else
          {
            v171 = 0;
          }
          v172 = &v171[4 * v164];
          *(_DWORD *)v172 = v159[v158];
          v161 = v172 + 4;
          if (v160 != v162)
          {
            v173 = v160 - 4 - v162;
            if (v173 < 0x2C)
              goto LABEL_280;
            if ((unint64_t)(v160 - &v171[v163]) < 0x20)
              goto LABEL_280;
            v174 = (v173 >> 2) + 1;
            v175 = &v171[4 * v164 - 16];
            v176 = v160 - 16;
            v177 = v174 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v178 = *(_OWORD *)v176;
              *(v175 - 1) = *((_OWORD *)v176 - 1);
              *v175 = v178;
              v175 -= 2;
              v176 -= 32;
              v177 -= 8;
            }
            while (v177);
            v172 -= 4 * (v174 & 0x7FFFFFFFFFFFFFF8);
            v160 -= 4 * (v174 & 0x7FFFFFFFFFFFFFF8);
            if (v174 != (v174 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_280:
              do
              {
                v179 = *((_DWORD *)v160 - 1);
                v160 -= 4;
                *((_DWORD *)v172 - 1) = v179;
                v172 -= 4;
              }
              while (v160 != v162);
            }
          }
          __p = v172;
          v223 = v161;
          v224 = &v171[4 * v167];
          if (v162)
          {
            operator delete(v162);
            v156 = v210;
            v154 = v220;
          }
        }
        else
        {
          *(_DWORD *)v223 = v159[v158];
          v161 = v160 + 4;
        }
        v223 = v161;
        v180 = *(_QWORD *)v155;
        v181 = *v215;
        if (v154 >= v221)
          break;
        *(_DWORD *)v154 = v181[v180];
        v157 = v154 + 4;
        v125 = v214;
LABEL_182:
        v220 = v157;
        v155 += 8;
        v154 = v157;
        if (v155 == v156)
          goto LABEL_243;
      }
      v182 = (char *)v219;
      v183 = v154 - (_BYTE *)v219;
      v184 = (v154 - (_BYTE *)v219) >> 2;
      v185 = v184 + 1;
      if ((unint64_t)(v184 + 1) >> 62)
LABEL_268:
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v186 = v221 - (_BYTE *)v219;
      if ((v221 - (_BYTE *)v219) >> 1 > v185)
        v185 = v186 >> 1;
      if ((unint64_t)v186 >= 0x7FFFFFFFFFFFFFFCLL)
        v187 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v187 = v185;
      if (v187)
      {
        if (v187 >> 62)
LABEL_270:
          std::__throw_bad_array_new_length[abi:ne180100]();
        v188 = v154;
        v189 = operator new(4 * v187);
        v156 = v210;
        v154 = v188;
      }
      else
      {
        v189 = 0;
      }
      v190 = &v189[4 * v184];
      *(_DWORD *)v190 = v181[v180];
      v157 = v190 + 4;
      if (v154 == v182)
      {
        v125 = v214;
        goto LABEL_221;
      }
      v191 = v154 - 4 - v182;
      v125 = v214;
      if (v191 >= 0xBC)
      {
        if (&v189[v183 - 4 - (v191 & 0xFFFFFFFFFFFFFFFCLL)] > &v189[v183 - 4])
        {
          v192 = v154;
        }
        else if (&v154[-(v191 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v154 - 4)
        {
          v192 = v154;
        }
        else if ((unint64_t)(v154 - v189 - v183) >= 0x20)
        {
          v194 = (v191 >> 2) + 1;
          v192 = &v154[-4 * (v194 & 0x7FFFFFFFFFFFFFF8)];
          v195 = &v189[4 * v184 - 16];
          v196 = v154 - 16;
          v197 = v194 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v198 = *(_OWORD *)v196;
            *(v195 - 1) = *((_OWORD *)v196 - 1);
            *v195 = v198;
            v195 -= 2;
            v196 -= 32;
            v197 -= 8;
          }
          while (v197);
          v190 -= 4 * (v194 & 0x7FFFFFFFFFFFFFF8);
          if (v194 == (v194 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_221:
            v219 = v190;
            v220 = v157;
            v221 = &v189[4 * v187];
            if (v182)
            {
              operator delete(v182);
              v156 = v210;
            }
            goto LABEL_182;
          }
        }
        else
        {
          v192 = v154;
        }
      }
      else
      {
        v192 = v154;
      }
      do
      {
        v193 = *((_DWORD *)v192 - 1);
        v192 -= 4;
        *((_DWORD *)v190 - 1) = v193;
        v190 -= 4;
      }
      while (v192 != v182);
      goto LABEL_221;
    }
LABEL_243:
    (*(void (**)(_QWORD, void **, void **))(**(_QWORD **)a1 + 16))(*(_QWORD *)a1, &__p, &v219);
    v10 = a1;
    if (*((_BYTE *)a1 + 2528))
    {
      (*(void (**)(void **__return_ptr, _QWORD, void **))(**(_QWORD **)a1 + 24))(v218, *(_QWORD *)a1, &__p);
      v199 = v204;
      v120 = v208;
    }
    else
    {
      (*(void (**)(void **__return_ptr, _QWORD, void **))(**(_QWORD **)a1 + 32))(v218, *(_QWORD *)a1, &v219);
      v199 = v204;
      v120 = v208;
    }
    v201 = v200;
    if (v218[0])
    {
      v218[1] = v218[0];
      operator delete(v218[0]);
    }
    if (!v203 || v201 > v32)
    {
      std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(&v234, (char *)__p, v223, (v223 - (_BYTE *)__p) >> 2);
      std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(&v231, (char *)v219, v220, (v220 - (_BYTE *)v219) >> 2);
      v32 = v201;
    }
    if (v219)
    {
      v220 = (char *)v219;
      operator delete(v219);
    }
    if (__p)
    {
      v223 = (char *)__p;
      operator delete(__p);
    }
    v203 = 1;
    if (v125)
      goto LABEL_234;
LABEL_235:
    if (v120)
      operator delete(v120);
    if (v225)
    {
      v226 = (char *)v225;
      operator delete(v225);
    }
    if (v228)
    {
      v229 = (char *)v228;
      operator delete(v228);
    }
    if (v35)
      operator delete(v35);
    v30 = v199 + 1;
  }
  while (v30 < v10[2]);
  if (!v203)
    goto LABEL_259;
  (*(void (**)(_QWORD, void **, void **))(**(_QWORD **)v10 + 16))(*(_QWORD *)v10, &v234, &v231);
  v19 = 1;
LABEL_260:
  if (v231)
  {
    v232 = v231;
    operator delete(v231);
  }
LABEL_262:
  if (v234)
  {
    v235 = v234;
    operator delete(v234);
  }
  return v19;
}

void sub_20B66FC94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  uint64_t v30;
  void *v32;
  void *v33;

  v32 = *(void **)(v30 - 152);
  if (v32)
  {
    *(_QWORD *)(v30 - 144) = v32;
    operator delete(v32);
    v33 = *(void **)(v30 - 128);
    if (!v33)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v33 = *(void **)(v30 - 128);
    if (!v33)
      goto LABEL_3;
  }
  *(_QWORD *)(v30 - 120) = v33;
  operator delete(v33);
  _Unwind_Resume(exception_object);
}

void `anonymous namespace'::absoluteError(float **a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v8;
  float *v9;
  float *v10;
  uint64_t v11;
  float *v12;
  uint64_t v13;
  float *v14;
  float *v15;
  float v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  float *v21;
  unint64_t v22;
  float *v23;
  int v24;
  uint64_t v25;
  _OWORD *v26;
  float *v27;
  uint64_t v28;
  __int128 v29;
  _QWORD *v30;
  _QWORD *v31;

  v4 = *a2;
  v3 = a2[1];
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v8 = a2;
    v9 = (float *)operator new(v3 - v4);
    v10 = v9;
    v11 = 0;
    v12 = &v9[v5 >> 2];
    *a1 = v9;
    a1[1] = v9;
    a1[2] = v12;
    if ((unint64_t)(v5 >> 2) <= 1)
      v13 = 1;
    else
      v13 = v5 >> 2;
    v14 = v9;
    v30 = v8;
    v31 = a3;
    while (1)
    {
      v16 = vabds_f32(*(float *)(*v8 + 4 * v11), *(float *)(*a3 + 4 * v11));
      if (v14 >= v12)
        break;
      *v14 = v16;
      v15 = v14 + 1;
LABEL_8:
      a1[1] = v15;
      ++v11;
      v14 = v15;
      if (v11 == v13)
        return;
    }
    v17 = v14 - v10;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    if (((char *)v12 - (char *)v10) >> 1 > v18)
      v18 = ((char *)v12 - (char *)v10) >> 1;
    if ((unint64_t)((char *)v12 - (char *)v10) >= 0x7FFFFFFFFFFFFFFCLL)
      v19 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v19 = v18;
    if (v19)
    {
      if (v19 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v20 = operator new(4 * v19);
    }
    else
    {
      v20 = 0;
    }
    v21 = (float *)&v20[4 * v17];
    *v21 = v16;
    v15 = v21 + 1;
    if (v14 == v10)
      goto LABEL_24;
    v22 = (char *)(v14 - 1) - (char *)v10;
    if (v22 < 0xBC)
    {
      v23 = v14;
      goto LABEL_23;
    }
    if (&v20[(char *)v14 - (char *)v10 - 4 - (v22 & 0xFFFFFFFFFFFFFFFCLL)] > &v20[(char *)v14 - (char *)v10 - 4])
    {
      v23 = v14;
    }
    else
    {
      if ((float *)((char *)v14 - (v22 & 0xFFFFFFFFFFFFFFFCLL) - 4) <= v14 - 1)
      {
        if ((unint64_t)((char *)v10 - v20) < 0x20)
        {
          v23 = v14;
          goto LABEL_23;
        }
        v25 = (v22 >> 2) + 1;
        v23 = &v14[-(v25 & 0x7FFFFFFFFFFFFFF8)];
        v26 = &v20[4 * v17 - 16];
        v27 = v14 - 4;
        v28 = v25 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v29 = *(_OWORD *)v27;
          *(v26 - 1) = *((_OWORD *)v27 - 1);
          *v26 = v29;
          v26 -= 2;
          v27 -= 8;
          v28 -= 8;
        }
        while (v28);
        v21 -= v25 & 0x7FFFFFFFFFFFFFF8;
        if (v25 != (v25 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_23;
LABEL_24:
        v12 = (float *)&v20[4 * v19];
        *a1 = v21;
        a1[1] = v15;
        a1[2] = v12;
        if (v10)
          operator delete(v10);
        v10 = v21;
        v8 = v30;
        a3 = v31;
        goto LABEL_8;
      }
      v23 = v14;
    }
    do
    {
LABEL_23:
      v24 = *((_DWORD *)v23-- - 1);
      *((_DWORD *)v21-- - 1) = v24;
    }
    while (v23 != v10);
    goto LABEL_24;
  }
}

void sub_20B6700A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

float `anonymous namespace'::calculateRSquaredScore(float **a1, _QWORD *a2)
{
  float **v2;
  float *v3;
  float *v4;
  float v5;
  int64_t v6;
  unint64_t v7;
  float32x4_t *v9;
  float32x4_t *v10;
  uint64_t v11;
  uint64_t v12;
  float *v13;
  float *v14;
  float v15;
  double v16;
  double v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  float *v22;
  float v23;
  float *v24;
  unint64_t v25;
  float *v26;
  int v27;
  uint64_t v28;
  _OWORD *v29;
  float *v30;
  uint64_t v31;
  __int128 v32;
  unint64_t v33;
  double v34;
  float *v35;
  uint64_t v36;
  float32x4_t *v37;
  uint64_t v38;
  float32x4_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float v44;
  float v45;
  float *v46;
  float *v47;
  unint64_t v48;
  double v49;
  float *v50;
  uint64_t v51;
  float32x4_t *v52;
  uint64_t v53;
  float32x4_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float v59;
  uint64_t v60;
  float v61;
  float v62;
  float v63;
  float *v65;
  float *v66;
  float **v67;

  v2 = a1;
  v4 = *a1;
  v3 = a1[1];
  v5 = 0.0;
  v6 = (char *)v3 - (char *)*a1;
  v7 = v6 >> 2;
  if (!v6)
  {
    v10 = 0;
    v45 = 0.0;
    goto LABEL_47;
  }
  v65 = v4;
  v66 = v3;
  if (v6 < 0)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v9 = (float32x4_t *)operator new(v6);
  v10 = v9;
  v11 = 0;
  if (v7 <= 1)
    v12 = 1;
  else
    v12 = v7;
  v13 = (float *)v9;
  v14 = &v9->f32[v7];
  v67 = v2;
  do
  {
    v16 = (float)((*v2)[v11] - *(float *)(*a2 + 4 * v11));
    v17 = v16 * v16;
    if (v13 < v14)
    {
      v15 = v17;
      *v13++ = v15;
      goto LABEL_8;
    }
    v18 = ((char *)v13 - (char *)v10) >> 2;
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    if (((char *)v14 - (char *)v10) >> 1 > v19)
      v19 = ((char *)v14 - (char *)v10) >> 1;
    if ((unint64_t)((char *)v14 - (char *)v10) >= 0x7FFFFFFFFFFFFFFCLL)
      v20 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v20 = v19;
    if (v20)
    {
      if (v20 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v21 = operator new(4 * v20);
    }
    else
    {
      v21 = 0;
    }
    v22 = (float *)&v21[4 * v18];
    v23 = v17;
    *v22 = v23;
    v24 = v22 + 1;
    if (v13 != (float *)v10)
    {
      v25 = (char *)(v13 - 1) - (char *)v10;
      if (v25 >= 0xBC)
      {
        if (&v21[(char *)v13 - (char *)v10 - 4 - (v25 & 0xFFFFFFFFFFFFFFFCLL)] > &v21[(char *)v13 - (char *)v10 - 4])
        {
          v26 = v13;
        }
        else if ((float *)((char *)v13 - (v25 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v13 - 1)
        {
          v26 = v13;
        }
        else if ((unint64_t)((char *)v10 - v21) >= 0x20)
        {
          v28 = (v25 >> 2) + 1;
          v26 = &v13[-(v28 & 0x7FFFFFFFFFFFFFF8)];
          v29 = &v21[4 * v18 - 16];
          v30 = v13 - 4;
          v31 = v28 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v32 = *(_OWORD *)v30;
            *(v29 - 1) = *((_OWORD *)v30 - 1);
            *v29 = v32;
            v29 -= 2;
            v30 -= 8;
            v31 -= 8;
          }
          while (v31);
          v22 -= v28 & 0x7FFFFFFFFFFFFFF8;
          if (v28 == (v28 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_24;
        }
        else
        {
          v26 = v13;
        }
      }
      else
      {
        v26 = v13;
      }
      do
      {
        v27 = *((_DWORD *)v26-- - 1);
        *((_DWORD *)v22-- - 1) = v27;
      }
      while (v26 != (float *)v10);
    }
LABEL_24:
    v14 = (float *)&v21[4 * v20];
    if (v10)
      operator delete(v10);
    v10 = (float32x4_t *)v22;
    v13 = v24;
    v2 = v67;
LABEL_8:
    ++v11;
  }
  while (v11 != v12);
  if (v10 == (float32x4_t *)v13)
  {
    v45 = 0.0;
    v4 = v65;
    v3 = v66;
  }
  else
  {
    v33 = (char *)v13 - (char *)v10 - 4;
    v34 = 0.0;
    v35 = (float *)v10;
    v4 = v65;
    v3 = v66;
    if (v33 < 0x1C)
    {
      do
      {
LABEL_43:
        v44 = *v35++;
        v34 = v34 + v44;
      }
      while (v35 != v13);
    }
    else
    {
      v36 = (v33 >> 2) + 1;
      v37 = v10 + 1;
      v38 = v36 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v39 = v37[-1];
        v40 = vcvt_hight_f64_f32(v39);
        v41 = vcvtq_f64_f32(*(float32x2_t *)v39.f32);
        v42 = vcvt_hight_f64_f32(*v37);
        v43 = vcvtq_f64_f32(*(float32x2_t *)v37->f32);
        v34 = v34
            + v41.f64[0]
            + v41.f64[1]
            + v40.f64[0]
            + v40.f64[1]
            + v43.f64[0]
            + v43.f64[1]
            + v42.f64[0]
            + v42.f64[1];
        v37 += 2;
        v38 -= 8;
      }
      while (v38);
      if (v36 != (v36 & 0x7FFFFFFFFFFFFFF8))
      {
        v35 = &v10->f32[v36 & 0x7FFFFFFFFFFFFFF8];
        goto LABEL_43;
      }
    }
    v45 = v34;
  }
LABEL_47:
  v46 = *v2;
  v47 = v2[1];
  if (*v2 != v47)
  {
    v48 = (char *)v47 - (char *)v46 - 4;
    v49 = 0.0;
    v50 = *v2;
    if (v48 < 0x1C)
    {
      do
      {
LABEL_53:
        v59 = *v50++;
        v49 = v49 + v59;
      }
      while (v50 != v47);
    }
    else
    {
      v51 = (v48 >> 2) + 1;
      v52 = (float32x4_t *)(v46 + 4);
      v53 = v51 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v54 = v52[-1];
        v55 = vcvt_hight_f64_f32(v54);
        v56 = vcvtq_f64_f32(*(float32x2_t *)v54.f32);
        v57 = vcvt_hight_f64_f32(*v52);
        v58 = vcvtq_f64_f32(*(float32x2_t *)v52->f32);
        v49 = v49
            + v56.f64[0]
            + v56.f64[1]
            + v55.f64[0]
            + v55.f64[1]
            + v58.f64[0]
            + v58.f64[1]
            + v57.f64[0]
            + v57.f64[1];
        v52 += 2;
        v53 -= 8;
      }
      while (v53);
      if (v51 != (v51 & 0x7FFFFFFFFFFFFFF8))
      {
        v50 = &v46[v51 & 0x7FFFFFFFFFFFFFF8];
        goto LABEL_53;
      }
    }
    v5 = v49 / (double)(unint64_t)(v47 - v46);
  }
  if (v3 == v4)
  {
    v63 = 0.0;
  }
  else
  {
    if (v7 <= 1)
      v60 = 1;
    else
      v60 = v7;
    v61 = 0.0;
    do
    {
      v62 = *v46++;
      v61 = (float)(v62 - v5) * (float)(v62 - v5) + v61;
      --v60;
    }
    while (v60);
    v63 = 0.0;
    if (v61 != 0.0)
      v63 = 1.0 - (float)(v45 / v61);
  }
  if (v10)
    operator delete(v10);
  return v63;
}

void sub_20B6704E8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

float *std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(float *result, float *a2, float *a3)
{
  unint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float v7;
  float v8;
  float v9;
  int v10;
  float v11;
  float *v12;
  float *v13;
  float v14;
  float v15;
  float *v16;
  float *v17;
  float v18;
  float *v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float *v25;
  float v26;
  float v27;
  float *v28;
  float v29;
  float *v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float *v43;
  float v44;
  float v45;
  float *v46;
  float *v47;
  float *v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;

  if (a3 != a2)
  {
    while (1)
    {
      v3 = a3 - result;
      if (v3 < 2)
        return result;
      if (v3 == 3)
      {
        v40 = *result;
        v41 = result[1];
        v42 = *(a3 - 1);
        if (v41 >= *result)
        {
          if (v42 < v41)
          {
            result[1] = v42;
            *(a3 - 1) = v41;
            v52 = *result;
            v51 = result[1];
            if (v51 < *result)
            {
              *result = v51;
              result[1] = v52;
            }
          }
        }
        else if (v42 >= v41)
        {
          *result = v41;
          result[1] = v40;
          v53 = *(a3 - 1);
          if (v53 < v40)
          {
            result[1] = v53;
            *(a3 - 1) = v40;
          }
        }
        else
        {
          *result = v42;
          *(a3 - 1) = v40;
        }
        return result;
      }
      if (v3 == 2)
      {
        v38 = *(a3 - 1);
        v39 = *result;
        if (v38 < *result)
        {
          *result = v38;
          *(a3 - 1) = v39;
        }
        return result;
      }
      if ((char *)a3 - (char *)result <= 31)
      {
        while (result != a3 - 1)
        {
          v43 = result++;
          if (v43 != a3 && result != a3)
          {
            v44 = *v43;
            v45 = *v43;
            v46 = result;
            v47 = v43;
            v48 = result;
            do
            {
              v49 = *v48++;
              v50 = v49;
              if (v49 < v45)
              {
                v45 = v50;
                v47 = v46;
              }
              v46 = v48;
            }
            while (v48 != a3);
            if (v47 != v43)
            {
              *v43 = *v47;
              *v47 = v44;
            }
          }
        }
        return result;
      }
      v4 = &result[v3 >> 1];
      v5 = a3 - 1;
      v6 = *(a3 - 1);
      v7 = *v4;
      v8 = *result;
      if (*v4 < *result)
        break;
      if (v6 < v7)
      {
        *v4 = v6;
        *v5 = v7;
        v9 = *result;
        if (*v4 < *result)
        {
          *result = *v4;
          *v4 = v9;
LABEL_14:
          v10 = 2;
          goto LABEL_17;
        }
        goto LABEL_15;
      }
      v10 = 0;
LABEL_17:
      v11 = *result;
      if (*result < *v4)
      {
LABEL_22:
        v16 = result + 1;
        if (result + 1 >= v5)
        {
          v19 = result + 1;
        }
        else
        {
          v17 = result + 1;
          while (1)
          {
            v18 = *v4;
            do
            {
              v19 = v17;
              v20 = *v17++;
              v21 = v20;
            }
            while (v20 < v18);
            do
            {
              v22 = *--v5;
              v23 = v22;
            }
            while (v22 >= v18);
            if (v19 >= v5)
              break;
            *v19 = v23;
            *v5 = v21;
            ++v10;
            if (v4 == v19)
              v4 = v5;
          }
        }
        if (v19 != v4)
        {
          v24 = *v19;
          if (*v4 < *v19)
          {
            *v19 = *v4;
            *v4 = v24;
            ++v10;
          }
        }
        if (v19 == a2)
          return result;
        if (!v10)
        {
          if (v19 <= a2)
          {
            v30 = v19 + 1;
            while (v30 != a3)
            {
              v32 = *(v30 - 1);
              v31 = *v30++;
              if (v31 < v32)
                goto LABEL_37;
            }
          }
          else
          {
            while (v16 != v19)
            {
              v27 = *(v16 - 1);
              v26 = *v16++;
              if (v26 < v27)
                goto LABEL_37;
            }
          }
          return result;
        }
LABEL_37:
        if (v19 <= a2)
        {
          v25 = v19 + 1;
        }
        else
        {
          a3 = v19;
          v25 = result;
        }
      }
      else
      {
        v12 = a3 - 2;
        while (v12 != result)
        {
          v13 = v12;
          v14 = *v12--;
          v15 = v14;
          if (v14 < *v4)
          {
            *result = v15;
            *v13 = v11;
            ++v10;
            v5 = v13;
            goto LABEL_22;
          }
        }
        v28 = result + 1;
        if (v11 >= *v5)
        {
          if (v28 == v5)
            return result;
          while (1)
          {
            v29 = *v28;
            if (v11 < *v28)
              break;
            if (++v28 == v5)
              return result;
          }
          *v28++ = *v5;
          *v5 = v29;
        }
        if (v28 == v5)
          return result;
        while (1)
        {
          v33 = *result;
          do
          {
            v25 = v28;
            v34 = *v28++;
            v35 = v34;
          }
          while (v33 >= v34);
          do
          {
            v36 = *--v5;
            v37 = v36;
          }
          while (v33 < v36);
          if (v25 >= v5)
            break;
          *v25 = v37;
          *v5 = v35;
        }
        if (v25 > a2)
          return result;
      }
      result = v25;
      if (a3 == a2)
        return result;
    }
    if (v6 >= v7)
    {
      *result = v7;
      *v4 = v8;
      if (*v5 < v8)
      {
        *v4 = *v5;
        *v5 = v8;
        goto LABEL_14;
      }
    }
    else
    {
      *result = v6;
      *v5 = v8;
    }
LABEL_15:
    v10 = 1;
    goto LABEL_17;
  }
  return result;
}

void DisparityToDepth::DisparityToDepthFitEstimator::~DisparityToDepthFitEstimator(DisparityToDepth::DisparityToDepthFitEstimator *this)
{
  uint64_t v2;
  void *v3;
  void *v4;

  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v4;
    operator delete(v4);
  }
}

{
  uint64_t v2;
  void *v3;
  void *v4;

  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v4;
    operator delete(v4);
  }
}

_QWORD *DisparityToDepth::RansacLine2DModel::RansacLine2DModel(_QWORD *this)
{
  *this = &off_24C421488;
  this[1] = 0;
  return this;
}

{
  *this = &off_24C421488;
  this[1] = 0;
  return this;
}

uint64_t DisparityToDepth::RansacLineModel::RansacLineModel(uint64_t this)
{
  *(_QWORD *)this = &off_24C421438;
  *(_DWORD *)(this + 8) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_24C421438;
  *(_DWORD *)(this + 8) = 0;
  return this;
}

_QWORD *DisparityToDepth::VioProjectionFactory::create@<X0>(_OWORD *a1@<X1>, __int128 *a2@<X2>, _QWORD *a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  _QWORD *result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v8 = operator new();
  result = (_QWORD *)a3[3];
  if (result)
  {
    if (result == a3)
    {
      v16 = v15;
      (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v15);
      result = v16;
    }
    else
    {
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
      v16 = result;
    }
    *(_QWORD *)v8 = &off_24C4215B8;
    v12 = a1[1];
    *(_OWORD *)(v8 + 16) = *a1;
    *(_OWORD *)(v8 + 32) = v12;
    v13 = *a2;
    *(_OWORD *)(v8 + 48) = a1[2];
    *(_OWORD *)(v8 + 64) = v13;
    if (result)
    {
      if (result == v15)
      {
        *(_QWORD *)(v8 + 104) = v8 + 80;
        (*(void (**)(_QWORD *))(v15[0] + 24))(v15);
      }
      else
      {
        *(_QWORD *)(v8 + 104) = (*(uint64_t (**)(_QWORD *))(*result + 16))(result);
      }
      result = v16;
      if (v16 == v15)
      {
        v14 = 4;
        result = v15;
        goto LABEL_15;
      }
      if (v16)
      {
        v14 = 5;
LABEL_15:
        result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v14))();
      }
    }
    else
    {
      *(_QWORD *)(v8 + 104) = 0;
    }
  }
  else
  {
    *(_QWORD *)v8 = &off_24C4215B8;
    v10 = a1[1];
    *(_OWORD *)(v8 + 16) = *a1;
    *(_OWORD *)(v8 + 32) = v10;
    v11 = *a2;
    *(_OWORD *)(v8 + 48) = a1[2];
    *(_OWORD *)(v8 + 64) = v11;
    *(_QWORD *)(v8 + 104) = 0;
  }
  *a4 = v8;
  return result;
}

void sub_20B670AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  MEMORY[0x20BD36498](v13, 0x10A1C40AA26649ELL);
  _Unwind_Resume(a1);
}

_QWORD *_ZZN16DisparityToDepth20VioProjectionFactory6createERK13simd_float3x3RKDv3_fNSt3__18functionIFNS7_6vectorI7CGPointNS7_9allocatorISA_EEEERKNS9_IS4_NSB_IS4_EEEEEEEEN17VioProjectionImplD1Ev(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24C4215B8;
  v2 = a1 + 10;
  v3 = (_QWORD *)a1[13];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void _ZZN16DisparityToDepth20VioProjectionFactory6createERK13simd_float3x3RKDv3_fNSt3__18functionIFNS7_6vectorI7CGPointNS7_9allocatorISA_EEEERKNS9_IS4_NSB_IS4_EEEEEEEEN17VioProjectionImplD0Ev(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_24C4215B8;
  v1 = a1 + 10;
  v2 = (_QWORD *)a1[13];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x20BD36498);
}

void _ZZN16DisparityToDepth20VioProjectionFactory6createERK13simd_float3x3RKDv3_fNSt3__18functionIFNS7_6vectorI7CGPointNS7_9allocatorISA_EEEERKNS9_IS4_NSB_IS4_EEEEEEEEN17VioProjectionImpl7projectEPS5_m(float32x4_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, float32x4_t **a4@<X8>)
{
  uint64_t v8;
  float32x4_t *v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  float32x4_t v18;
  void *__p[3];

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (a3)
  {
    if (a3 >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v8 = a3;
    v9 = (float32x4_t *)operator new(16 * a3);
    *a4 = v9;
    a4[2] = &v9[v8];
    bzero(v9, 16 * a3);
    v10 = 0;
    a4[1] = &v9[v8];
    v11 = a1[1];
    v12 = a1[2];
    v13 = a1[3];
    v14 = a1[4];
    v15 = (float32x4_t)vdupq_n_s32(0x447A0000u);
    do
    {
      v9[v10] = vmulq_f32(vaddq_f32(v14, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v11, COERCE_FLOAT(*(_OWORD *)(a2 + 16 * v10))), v12, *(float32x2_t *)(a2 + 16 * v10), 1), v13, *(float32x4_t *)(a2 + 16 * v10), 2)), v15);
      ++v10;
    }
    while (a3 != v10);
  }
  v16 = a1[6].i64[1];
  if (!v16)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(void **__return_ptr, uint64_t, float32x4_t **))(*(_QWORD *)v16 + 48))(__p, v16, a4);
  if (a3)
  {
    v17 = 0;
    do
    {
      *(float32x2_t *)v18.f32 = vcvt_f32_f64(*((float64x2_t *)__p[0] + v17));
      v18.i64[1] = vextq_s8((int8x16_t)(*a4)[v17], (int8x16_t)(*a4)[v17], 8uLL).u64[0];
      (*a4)[v17++] = v18;
    }
    while (a3 != v17);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_20B670D40(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x20BD36498);
}

_QWORD *DisparityToDepth::WorldPointsLRU::WorldPointsLRU(_QWORD *this, uint64_t a2)
{
  *this = a2;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = a2;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

_QWORD *DisparityToDepth::WorldPointsLRU::vector@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = (_BYTE *)this[1];
  v3 = (_BYTE *)this[2];
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(v3 - v4);
    *a2 = v6;
    v7 = &v6[32 * (v5 >> 5)];
    a2[2] = v7;
    this = memcpy(v6, v4, v5);
    a2[1] = v7;
  }
  return this;
}

uint64_t DisparityToDepth::WorldPointsLRU::size(DisparityToDepth::WorldPointsLRU *this)
{
  return (uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 5;
}

void sub_20B670F88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_20B671074(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B6712AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  va_list va;

  va_start(va, a4);

  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_20B6713B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_20B67172C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_20B671950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_20B671A70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B671C04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_20B671D2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_20B671E70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_20B671F6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B672058(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B672484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_20B672644(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B672794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)ADLKTOpticalFlow;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_20B672B28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B672BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_20B672D88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  _Unwind_Resume(a1);
}

void sub_20B673048(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  va_list va;

  va_start(va, a2);
  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);

  _Unwind_Resume(a1);
}

void sub_20B6735D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)&a27);

  _Unwind_Resume(a1);
}

double ADCommonUtils::calcRotationAngle(ADCommonUtils *this, simd_float3x3 *a2)
{
  float v3;
  float v4;
  float v6;
  float v7;

  v3 = *((float *)this + 6);
  v4 = *((float *)this + 10);
  v7 = atan2f(v3, v4);
  v6 = atan2f(-*((float *)this + 2), sqrtf((float)(v4 * v4) + (float)(v3 * v3)));
  atan2f(*((float *)this + 1), *(float *)this);
  return COERCE_DOUBLE(__PAIR64__(LODWORD(v6), LODWORD(v7)));
}

void ADCommonUtils::calcRotationAngle(ADCommonUtils *this@<X0>, _OWORD *a2@<X8>)
{
  long double v5;
  long double v6;
  __int128 v7;
  __int128 v8;
  __int128 __x;
  long double v10;
  long double v11;

  v5 = *((double *)this + 6);
  v6 = *((double *)this + 10);
  v11 = atan2(v5, v6);
  __x = *(_OWORD *)this;
  v10 = atan2(-*((double *)this + 2), sqrt(v6 * v6 + v5 * v5));
  *(double *)&v7 = atan2(*((long double *)&__x + 1), *(long double *)&__x);
  *(long double *)&v8 = v11;
  *((long double *)&v8 + 1) = v10;
  *a2 = v8;
  a2[1] = v7;
}

__n128 ADCommonUtils::extrinsicsFromRotationTranslation(uint64_t a1)
{
  return *(__n128 *)a1;
}

__n128 ADCommonUtils::rotationFromExtrinsics(ADCommonUtils *this, const simd_float4x3 *a2)
{
  return *(__n128 *)this;
}

__n128 ADCommonUtils::translationFromExtrinsics(__n128 *this, const simd_float4x3 *a2)
{
  return this[3];
}

__n128 ADCommonUtils::matrixFromArrayColumnFirst(ADCommonUtils *this, NSArray *a2)
{
  ADCommonUtils *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  __int128 v16;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  unsigned int v28;
  __int128 v29;

  v2 = this;
  -[ADCommonUtils objectAtIndexedSubscript:](v2, "objectAtIndexedSubscript:", 0);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "floatValue");
  v28 = v3;
  -[ADCommonUtils objectAtIndexedSubscript:](v2, "objectAtIndexedSubscript:", 1);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "floatValue");
  v20 = v4;
  -[ADCommonUtils objectAtIndexedSubscript:](v2, "objectAtIndexedSubscript:", 2);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "floatValue");
  v19 = v5;
  -[ADCommonUtils objectAtIndexedSubscript:](v2, "objectAtIndexedSubscript:", 3);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "floatValue");
  v18 = v6;
  -[ADCommonUtils objectAtIndexedSubscript:](v2, "objectAtIndexedSubscript:", 4);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "floatValue");
  -[ADCommonUtils objectAtIndexedSubscript:](v2, "objectAtIndexedSubscript:", 5);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "floatValue");
  -[ADCommonUtils objectAtIndexedSubscript:](v2, "objectAtIndexedSubscript:", 6);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "floatValue");
  -[ADCommonUtils objectAtIndexedSubscript:](v2, "objectAtIndexedSubscript:", 7);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "floatValue");
  -[ADCommonUtils objectAtIndexedSubscript:](v2, "objectAtIndexedSubscript:", 8);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "floatValue");
  -[ADCommonUtils objectAtIndexedSubscript:](v2, "objectAtIndexedSubscript:", 9);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "floatValue");
  -[ADCommonUtils objectAtIndexedSubscript:](v2, "objectAtIndexedSubscript:", 10);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "floatValue");
  -[ADCommonUtils objectAtIndexedSubscript:](v2, "objectAtIndexedSubscript:", 11);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "floatValue");
  -[ADCommonUtils objectAtIndexedSubscript:](v2, "objectAtIndexedSubscript:", 12);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "floatValue");
  -[ADCommonUtils objectAtIndexedSubscript:](v2, "objectAtIndexedSubscript:", 13);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "floatValue");
  -[ADCommonUtils objectAtIndexedSubscript:](v2, "objectAtIndexedSubscript:", 14);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "floatValue");
  -[ADCommonUtils objectAtIndexedSubscript:](v2, "objectAtIndexedSubscript:", 15);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "floatValue");
  *(_QWORD *)&v16 = __PAIR64__(v20, v28);
  *((_QWORD *)&v16 + 1) = __PAIR64__(v18, v19);
  v29 = v16;

  return (__n128)v29;
}

void sub_20B674024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,void *a33,void *a34)
{
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t v44;

  *(_QWORD *)(v44 - 112) = a1;

  _Unwind_Resume(*(_Unwind_Exception **)(v44 - 112));
}

void sub_20B6740B8(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 112) = a1;
  JUMPOUT(0x20B674064);
}

void sub_20B6740C0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 112) = a1;
  JUMPOUT(0x20B674068);
}

void sub_20B6740C8(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 112) = a1;
  JUMPOUT(0x20B67406CLL);
}

void sub_20B6740D0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 112) = a1;
  JUMPOUT(0x20B674070);
}

void sub_20B6740D8(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 112) = a1;
  JUMPOUT(0x20B674074);
}

void sub_20B6740E0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 112) = a1;
  JUMPOUT(0x20B67407CLL);
}

void sub_20B6740E8(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 112) = a1;
  JUMPOUT(0x20B674084);
}

void sub_20B6740F0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 112) = a1;
  JUMPOUT(0x20B67408CLL);
}

void sub_20B6740F8(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 112) = a1;
  JUMPOUT(0x20B674094);
}

void sub_20B674100(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 112) = a1;
  JUMPOUT(0x20B67409CLL);
}

void sub_20B674108(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 112) = a1;
  JUMPOUT(0x20B6740A4);
}

__n128 ADCommonUtils::matrixFromArrayRowFirst(ADCommonUtils *this, NSArray *a2)
{
  ADCommonUtils *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  __int128 v16;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  unsigned int v28;
  __int128 v29;

  v2 = this;
  -[ADCommonUtils objectAtIndexedSubscript:](v2, "objectAtIndexedSubscript:", 0);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "floatValue");
  v28 = v3;
  -[ADCommonUtils objectAtIndexedSubscript:](v2, "objectAtIndexedSubscript:", 4);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "floatValue");
  v20 = v4;
  -[ADCommonUtils objectAtIndexedSubscript:](v2, "objectAtIndexedSubscript:", 8);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "floatValue");
  v19 = v5;
  -[ADCommonUtils objectAtIndexedSubscript:](v2, "objectAtIndexedSubscript:", 12);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "floatValue");
  v18 = v6;
  -[ADCommonUtils objectAtIndexedSubscript:](v2, "objectAtIndexedSubscript:", 1);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "floatValue");
  -[ADCommonUtils objectAtIndexedSubscript:](v2, "objectAtIndexedSubscript:", 5);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "floatValue");
  -[ADCommonUtils objectAtIndexedSubscript:](v2, "objectAtIndexedSubscript:", 9);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "floatValue");
  -[ADCommonUtils objectAtIndexedSubscript:](v2, "objectAtIndexedSubscript:", 13);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "floatValue");
  -[ADCommonUtils objectAtIndexedSubscript:](v2, "objectAtIndexedSubscript:", 2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "floatValue");
  -[ADCommonUtils objectAtIndexedSubscript:](v2, "objectAtIndexedSubscript:", 6);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "floatValue");
  -[ADCommonUtils objectAtIndexedSubscript:](v2, "objectAtIndexedSubscript:", 10);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "floatValue");
  -[ADCommonUtils objectAtIndexedSubscript:](v2, "objectAtIndexedSubscript:", 14);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "floatValue");
  -[ADCommonUtils objectAtIndexedSubscript:](v2, "objectAtIndexedSubscript:", 3);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "floatValue");
  -[ADCommonUtils objectAtIndexedSubscript:](v2, "objectAtIndexedSubscript:", 7);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "floatValue");
  -[ADCommonUtils objectAtIndexedSubscript:](v2, "objectAtIndexedSubscript:", 11);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "floatValue");
  -[ADCommonUtils objectAtIndexedSubscript:](v2, "objectAtIndexedSubscript:", 15);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "floatValue");
  *(_QWORD *)&v16 = __PAIR64__(v20, v28);
  *((_QWORD *)&v16 + 1) = __PAIR64__(v18, v19);
  v29 = v16;

  return (__n128)v29;
}

void sub_20B6743F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,void *a33,void *a34)
{
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t v44;

  *(_QWORD *)(v44 - 112) = a1;

  _Unwind_Resume(*(_Unwind_Exception **)(v44 - 112));
}

void sub_20B674488(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 112) = a1;
  JUMPOUT(0x20B674434);
}

void sub_20B674490(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 112) = a1;
  JUMPOUT(0x20B674438);
}

void sub_20B674498(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 112) = a1;
  JUMPOUT(0x20B67443CLL);
}

void sub_20B6744A0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 112) = a1;
  JUMPOUT(0x20B674440);
}

void sub_20B6744A8(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 112) = a1;
  JUMPOUT(0x20B674444);
}

void sub_20B6744B0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 112) = a1;
  JUMPOUT(0x20B67444CLL);
}

void sub_20B6744B8(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 112) = a1;
  JUMPOUT(0x20B674454);
}

void sub_20B6744C0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 112) = a1;
  JUMPOUT(0x20B67445CLL);
}

void sub_20B6744C8(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 112) = a1;
  JUMPOUT(0x20B674464);
}

void sub_20B6744D0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 112) = a1;
  JUMPOUT(0x20B67446CLL);
}

void sub_20B6744D8(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 112) = a1;
  JUMPOUT(0x20B674474);
}

double ADCommonUtils::extrinsicsFromFile(ADCommonUtils *this, const char *a2)
{
  double result;

  *(_QWORD *)&result = ADCommonUtils::extrinsics4x4FromFile(this, a2).n128_u64[0];
  return result;
}

__n128 ADCommonUtils::extrinsics4x4FromFile(ADCommonUtils *this, const char *a2)
{
  void *v2;
  void *v3;
  int v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  id v12;
  void *v13;
  unint64_t i;
  void *v16;
  int v17;
  __int128 v18;
  id v19;
  id v20;
  _OWORD v21[4];

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", this);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "lowercaseString");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "hasSuffix:", CFSTR(".json"));

  if (v4)
  {
    v20 = 0;
    objc_msgSend(MEMORY[0x24BDBCE50], "dataWithContentsOfFile:options:error:", v2, 1, &v20);
    v5 = (id)objc_claimAutoreleasedReturnValue();
    v6 = v20;
    if (v6)
    {
      v7 = v6;
      objc_msgSend(v6, "description");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      NSLog(CFSTR("failed loading extrinsics from file with error:%@"), v8);
LABEL_8:

      v18 = 0u;
      goto LABEL_9;
    }
    v19 = 0;
    objc_msgSend(MEMORY[0x24BDD1608], "JSONObjectWithData:options:error:", v5, 4, &v19);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v19;
    v7 = v12;
    if (v12)
    {
      objc_msgSend(v12, "description");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      NSLog(CFSTR("failed loading extrinsics from file with error:%@"), v13);

      goto LABEL_8;
    }
    for (i = 0; i < objc_msgSend(v8, "count"); ++i)
    {
      objc_msgSend(v8, "objectAtIndexedSubscript:", i);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "floatValue");
      *((_DWORD *)v21 + i) = v17;

    }
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDBCE50], "dataWithContentsOfFile:", v2);
    v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v9 = (_OWORD *)objc_msgSend(v5, "bytes");
    v10 = v9[1];
    v21[0] = *v9;
    v21[1] = v10;
    v11 = v9[3];
    v21[2] = v9[2];
    v21[3] = v11;
  }

  v18 = v21[0];
LABEL_9:

  return (__n128)v18;
}

void sub_20B6746CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

uint64_t ADCommonUtils::extrinsicsToFile(ADCommonUtils *this, const char *a2, simd_float4x4 a3)
{
  a3.columns[0].i32[3] = 0;
  a3.columns[1].i32[3] = 0;
  a3.columns[2].i32[3] = 0;
  a3.columns[3].i32[3] = 1.0;
  return ADCommonUtils::extrinsicsToFile(this, a2, a3);
}

{
  void *v3;
  void *v4;
  int v5;
  void *v6;
  void *v7;
  double v8;
  void *v9;
  double v10;
  void *v11;
  double v12;
  void *v13;
  void *v14;
  double v15;
  void *v16;
  double v17;
  void *v18;
  double v19;
  void *v20;
  void *v21;
  double v22;
  void *v23;
  double v24;
  void *v25;
  double v26;
  void *v27;
  void *v28;
  double v29;
  void *v30;
  double v31;
  void *v32;
  double v33;
  void *v34;
  void *v35;
  id v36;
  id v37;
  void *v38;
  uint64_t v39;
  simd_float4 v41;
  simd_float4 v42;
  simd_float4 v43;
  simd_float4 v44;
  id v45;
  id v46;
  simd_float4x4 v47;

  v43 = a3.columns[1];
  v44 = a3.columns[0];
  v47 = a3;
  v41 = a3.columns[3];
  v42 = a3.columns[2];
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", this);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "lowercaseString");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "hasSuffix:", CFSTR(".json"));

  if (v5)
  {
    v6 = (void *)objc_opt_new();
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", *(double *)v44.i64);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:atIndexedSubscript:", v7, 0);

    LODWORD(v8) = v44.i32[1];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:atIndexedSubscript:", v9, 1);

    LODWORD(v10) = v44.i32[2];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:atIndexedSubscript:", v11, 2);

    LODWORD(v12) = v44.i32[3];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:atIndexedSubscript:", v13, 3);

    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", *(double *)v43.i64);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:atIndexedSubscript:", v14, 4);

    LODWORD(v15) = v43.i32[1];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:atIndexedSubscript:", v16, 5);

    LODWORD(v17) = v43.i32[2];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:atIndexedSubscript:", v18, 6);

    LODWORD(v19) = v43.i32[3];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:atIndexedSubscript:", v20, 7);

    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", *(double *)v42.i64);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:atIndexedSubscript:", v21, 8);

    LODWORD(v22) = v42.i32[1];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:atIndexedSubscript:", v23, 9);

    LODWORD(v24) = v42.i32[2];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v24);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:atIndexedSubscript:", v25, 10);

    LODWORD(v26) = v42.i32[3];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v26);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:atIndexedSubscript:", v27, 11);

    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", *(double *)v41.i64);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:atIndexedSubscript:", v28, 12);

    LODWORD(v29) = v41.i32[1];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v29);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:atIndexedSubscript:", v30, 13);

    LODWORD(v31) = v41.i32[2];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v31);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:atIndexedSubscript:", v32, 14);

    LODWORD(v33) = v41.i32[3];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v33);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:atIndexedSubscript:", v34, 15);

    v46 = 0;
    objc_msgSend(MEMORY[0x24BDD1608], "dataWithJSONObject:options:error:", v6, 1, &v46);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    v36 = v46;
    v37 = v36;
    if (v36)
    {
      objc_msgSend(v36, "description");
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      NSLog(CFSTR("failed writing extrinsics to file with error:%@"), v38);

    }
    v39 = objc_msgSend(v35, "writeToFile:atomically:", v3, 1);

  }
  else
  {
    objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytes:length:", &v47, 64);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v45 = 0;
    v39 = objc_msgSend(v6, "writeToFile:options:error:", v3, 1, &v45);
    v37 = v45;
  }

  return v39;
}

void sub_20B674B94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v4;

  _Unwind_Resume(a1);
}

double ADCommonUtils::rotateSize(uint64_t a1, double a2, double a3)
{
  if ((a1 | 2) != 3)
    return a2;
  return a3;
}

uint64_t ADCommonUtils::reverseRotation(uint64_t a1)
{
  uint64_t v1;

  v1 = 3;
  if (a1 != 1)
    v1 = a1;
  if (a1 == 3)
    return 1;
  else
    return v1;
}

double ADCommonUtils::matrixForImageRotation(uint64_t a1)
{
  float v1;
  __float2 v2;
  double v3;

  v1 = 0.0;
  if ((unint64_t)(a1 - 1) <= 2)
    v1 = flt_20B6D2C4C[a1 - 1];
  v2 = __sincosf_stret(v1);
  *(float *)&v3 = v2.__cosval;
  *((float *)&v3 + 1) = -v2.__sinval;
  return v3;
}

double ADCommonUtils::inverseTransform(ADCommonUtils *this, simd_float4x4 a2)
{
  double result;

  *(_QWORD *)&result = vzip1q_s32(vzip1q_s32((int32x4_t)a2.columns[0], (int32x4_t)a2.columns[2]), (int32x4_t)a2.columns[1]).u64[0];
  return result;
}

double ADCommonUtils::inverseTransform(ADCommonUtils *this, simd_float4x3 a2)
{
  double result;

  *(_QWORD *)&result = vzip1q_s32((int32x4_t)a2.columns[0], (int32x4_t)a2.columns[1]).u64[0];
  return result;
}

double ADCommonUtils::computeTransform(ADCommonUtils *this, simd_float4x3 a2, simd_float4x3 a3)
{
  float32x4_t v3;
  double result;

  v3 = (float32x4_t)vtrn2q_s32((int32x4_t)a2.columns[0], (int32x4_t)a2.columns[1]);
  v3.i32[2] = a2.columns[2].i32[1];
  *(_QWORD *)&result = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)a2.columns[0], (int32x4_t)a2.columns[2]), (int32x4_t)a2.columns[1]), a3.columns[0].f32[0]), v3, *(float32x2_t *)a3.columns[0].f32, 1), (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)a2.columns[0], (int32x4_t)a2.columns[2]), vdupq_laneq_s32((int32x4_t)a2.columns[1], 2)), (float32x4_t)a3.columns[0], 2).u64[0];
  return result;
}

float ADCommonUtils::calculatePoseDistance(ADCommonUtils *this, simd_float4x4 a2, simd_float4x4 a3)
{
  int32x4_t v3;
  int32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float v11;
  float32x4_t v12;
  float32x4_t v13;
  double v14;
  float32x4_t v15;
  float32x4_t v16;

  v3 = vzip1q_s32((int32x4_t)a2.columns[0], (int32x4_t)a2.columns[2]);
  v4 = vzip2q_s32((int32x4_t)a2.columns[0], (int32x4_t)a2.columns[2]);
  v5 = (float32x4_t)vzip1q_s32(v3, (int32x4_t)a2.columns[1]);
  a2.columns[0] = (simd_float4)vtrn2q_s32((int32x4_t)a2.columns[0], (int32x4_t)a2.columns[1]);
  a2.columns[0].i32[2] = a2.columns[2].i32[1];
  v6 = (float32x4_t)vzip1q_s32(v4, vdupq_laneq_s32((int32x4_t)a2.columns[1], 2));
  v7 = (float32x4_t)vtrn2q_s32((int32x4_t)a3.columns[0], (int32x4_t)a3.columns[1]);
  v7.i32[2] = a3.columns[2].i32[1];
  v8 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)a3.columns[0], (int32x4_t)a3.columns[2]), (int32x4_t)a3.columns[1]);
  v9 = (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)a3.columns[0], (int32x4_t)a3.columns[2]), vdupq_laneq_s32((int32x4_t)a3.columns[1], 2));
  v10 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v5, (int32x4_t)v6), vdupq_laneq_s32(v3, 2));
  a2.columns[1] = (simd_float4)vtrn2q_s32((int32x4_t)v5, (int32x4_t)a2.columns[1]);
  a2.columns[1].i32[2] = v6.i32[1];
  a2.columns[2] = (simd_float4)vzip1q_s32(vzip2q_s32((int32x4_t)v5, (int32x4_t)v6), vdupq_lane_s32(*(int32x2_t *)a2.columns[2].f32, 1));
  v11 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v10, a3.columns[0].f32[0]), (float32x4_t)a2.columns[1], a3.columns[1].f32[0]), (float32x4_t)a2.columns[2], a3.columns[2].f32[0]).f32[0];
  v12 = vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v10, *(float32x2_t *)a3.columns[0].f32, 1), (float32x4_t)a2.columns[1], *(float32x2_t *)a3.columns[1].f32, 1), (float32x4_t)a2.columns[2], *(float32x2_t *)a3.columns[2].f32, 1);
  a3.columns[0] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v10, (float32x4_t)a3.columns[0], 2), (float32x4_t)a2.columns[1], (float32x4_t)a3.columns[1], 2), (float32x4_t)a2.columns[2], (float32x4_t)a3.columns[2], 2);
  v13 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v5, a2.columns[3].f32[0]), (float32x4_t)a2.columns[0], *(float32x2_t *)a2.columns[3].f32, 1), v6, (float32x4_t)a2.columns[3], 2);
  v14 = 3.0 - v11 - v12.f32[1] - a3.columns[0].f32[2];
  *(float *)&v14 = (v14 + v14) / 3.0;
  v15 = vmulq_f32(vsubq_f32(v13, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v8, a3.columns[3].f32[0]), v7, *(float32x2_t *)a3.columns[3].f32, 1), v9, (float32x4_t)a3.columns[3], 2)), (float32x4_t)vdupq_n_s32(0x3A83126Fu));
  v16 = vmulq_f32(v15, v15);
  return vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1))).f32[0]+ *(float *)&v14;
}

void ADCommonUtils::extrinsicsToString(simd_float4x3 a1@<0:Q0, 16:Q1, 32:Q2, 48:Q3>, _QWORD *a2@<X8>)
{
  const char *v4;
  size_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("R:[%.4f, %.4f, %.4f],[%.4f, %.4f, %.4f],[%.4f, %.4f, %.4f]. T:[%.4f, %.4f, %.4f]\n"), a1.columns[0].f32[0], a1.columns[0].f32[1], a1.columns[0].f32[2], a1.columns[1].f32[0], a1.columns[1].f32[1], a1.columns[1].f32[2], a1.columns[2].f32[0], a1.columns[2].f32[1], a1.columns[2].f32[2], a1.columns[3].f32[0], a1.columns[3].f32[1], a1.columns[3].f32[2]);
  v10 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v4 = (const char *)objc_msgSend(v10, "UTF8String");
  v5 = strlen(v4);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v7 = v5 | 7;
    v8 = v7 + 1;
    v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((_BYTE *)a2 + 23) = v5;
    if (!v5)
      goto LABEL_9;
  }
  memmove(a2, v4, v6);
LABEL_9:
  *((_BYTE *)a2 + v6) = 0;

}

void sub_20B674FD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void ADCommonUtils::extrinsicsToString(simd_float4x4 a1@<0:Q0, 16:Q1, 32:Q2, 48:Q3>, _QWORD *a2@<X8>)
{
  const char *v4;
  size_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("R:[%.4f, %.4f, %.4f, %.4f],[%.4f, %.4f, %.4f, %.4f],[%.4f, %.4f, %.4f, %.4f]. T:[%.4f, %.4f, %.4f, %.4f]\n"), a1.columns[0].f32[0], a1.columns[0].f32[1], a1.columns[0].f32[2], a1.columns[0].f32[3], a1.columns[1].f32[0], a1.columns[1].f32[1], a1.columns[1].f32[2], a1.columns[1].f32[3], a1.columns[2].f32[0], a1.columns[2].f32[1], a1.columns[2].f32[2], a1.columns[2].f32[3], a1.columns[3].f32[0], a1.columns[3].f32[1], a1.columns[3].f32[2], a1.columns[3].f32[3]);
  v10 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v4 = (const char *)objc_msgSend(v10, "UTF8String");
  v5 = strlen(v4);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v7 = v5 | 7;
    v8 = v7 + 1;
    v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((_BYTE *)a2 + 23) = v5;
    if (!v5)
      goto LABEL_9;
  }
  memmove(a2, v4, v6);
LABEL_9:
  *((_BYTE *)a2 + v6) = 0;

}

void sub_20B675158(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

void ADCommonUtils::intrinsicsToString(simd_float3x3 a1@<0:Q0, 16:Q1, 32:Q2>, _QWORD *a2@<X8>)
{
  const char *v4;
  size_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("eflx:%.3f efly:%.3f ppx:%.3f ppy:%.3f\n"), a1.columns[0].f32[0], a1.columns[1].f32[1], a1.columns[2].f32[0], a1.columns[2].f32[1]);
  v10 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v4 = (const char *)objc_msgSend(v10, "UTF8String");
  v5 = strlen(v4);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v7 = v5 | 7;
    v8 = v7 + 1;
    v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((_BYTE *)a2 + 23) = v5;
    if (!v5)
      goto LABEL_9;
  }
  memmove(a2, v4, v6);
LABEL_9:
  *((_BYTE *)a2 + v6) = 0;

}

void sub_20B675258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{

  _Unwind_Resume(a1);
}

uint64_t ADCommonUtils::hashArray(ADCommonUtils *this, NSArray *a2)
{
  ADCommonUtils *v2;
  uint64_t v3;
  uint64_t i;
  void *v5;

  v2 = this;
  v3 = -[ADCommonUtils hash](v2, "hash");
  for (i = 1; i - 1 < (unint64_t)-[ADCommonUtils count](v2, "count"); ++i)
  {
    -[ADCommonUtils objectAtIndexedSubscript:](v2, "objectAtIndexedSubscript:");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v3 ^= objc_msgSend(v5, "hash") * i;

  }
  return v3;
}

void sub_20B6752E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

CGFloat ADCommonUtils::computeMaximalRoi(ADCommonUtils *this, CGSize a2, CGSize a3)
{
  double width;

  width = a2.height / (a3.height / a3.width);
  if (a2.width < width)
    width = a2.width;
  return (a2.width - width) * 0.5;
}

Float64 ADCommonUtils::machTimeToSeconds(ADCommonUtils *this)
{
  CMTime v2;
  CMTime v3;

  memset(&v3, 0, sizeof(v3));
  CMClockMakeHostTimeFromSystemUnits(&v3, (uint64_t)this);
  v2 = v3;
  return CMTimeGetSeconds(&v2);
}

uint64_t ADCommonUtils::runtimePlatformHasANE(ADCommonUtils *this)
{
  return objc_msgSend(MEMORY[0x24BE086D8], "hasANE");
}

uint64_t ADCommonUtils::runtimePlatformANEVersionNumber(ADCommonUtils *this)
{
  uint64_t v1;
  void *v2;
  _QWORD v4[2];
  char v5;

  ADCommonUtils::runtimePlatformANEVersionString(v4);
  if (v5 < 0)
  {
    v2 = (void *)v4[0];
    if (v4[1])
      v1 = atoi((const char *)(v4[0] + 1));
    else
      v1 = 0xFFFFFFFFLL;
    operator delete(v2);
  }
  else if (v5)
  {
    return atoi((const char *)v4 + 1);
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
  return v1;
}

void ADCommonUtils::espressoEngineAsString(uint64_t a1@<X0>, char *a2@<X8>)
{
  char *v2;
  id v3;
  const char *v4;
  size_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;

  v2 = a2;
  switch(a1)
  {
    case 0:
      a2[23] = 3;
      *(_DWORD *)a2 = 5591107;
      return;
    case 1:
      a2[23] = 5;
      strcpy(a2, "METAL");
      return;
    case 2:
      a2[23] = 3;
      *(_DWORD *)a2 = 5460045;
      return;
    case 3:
      a2[23] = 16;
      strcpy(a2, "ANERuntimeDirect");
      return;
    case 4:
      a2[23] = 10;
      strcpy(a2, "ANERuntime");
      return;
    default:
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", a1);
      v10 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "stringValue");
      v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v4 = (const char *)objc_msgSend(v3, "UTF8String");
      v5 = strlen(v4);
      if (v5 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v6 = v5;
      if (v5 >= 0x17)
      {
        v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v5 | 7) != 0x17)
          v7 = v5 | 7;
        v8 = v7 + 1;
        v9 = (char *)operator new(v7 + 1);
        *((_QWORD *)v2 + 1) = v6;
        *((_QWORD *)v2 + 2) = v8 | 0x8000000000000000;
        *(_QWORD *)v2 = v9;
        v2 = v9;
      }
      else
      {
        v2[23] = v5;
        if (!v5)
          goto LABEL_16;
      }
      memmove(v2, v4, v6);
LABEL_16:
      v2[v6] = 0;

      return;
  }
}

void sub_20B6755A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t ADCommonUtils::runtimePlatformANEEnforceModelChecksDisabled(ADCommonUtils *this)
{
  return objc_msgSend(MEMORY[0x24BE086D8], "precompiledModelChecksDisabled");
}

void AdjustCalibrationFocalLengthAndOpticalCenterX_Gradient(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, float64x2_t *a4@<X3>, float64x2_t *a5@<X4>, uint64_t a6@<X5>, int8x16_t *a7@<X8>)
{
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  unsigned int v34;
  double v35;
  int8x16_t v36;
  int8x16_t v37;
  float64x2_t v38;
  double v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  int8x16_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  double v47;
  int32x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  int8x16_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  double v59;
  double v60;
  double v61;
  int v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  double v68;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  int8x16_t v86;
  int8x16_t v87;
  double v88;
  int8x16_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  int8x16_t v95;
  float64x2_t v96;
  float64x2_t v97;
  int8x16_t v98;
  double v99;
  float64_t v100;
  __int16 v101;
  char v102;
  double v103;
  int8x16_t v104;
  int8x16_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  float64x2_t v125;
  float64x2_t v126;
  uint64_t v127;

  v127 = *MEMORY[0x24BDAC8D0];
  v12 = a4[5];
  v14 = a4[6];
  v13 = a4[7];
  a7[6] = (int8x16_t)v14;
  a7[7] = (int8x16_t)v13;
  v15 = a4[7];
  a7[8] = (int8x16_t)a4[8];
  v16 = a4[1];
  v18 = a4[2];
  v17 = a4[3];
  a7[2] = (int8x16_t)v18;
  a7[3] = (int8x16_t)v17;
  v19 = a4[3];
  v21 = a4[4];
  v20 = a4[5];
  a7[4] = (int8x16_t)v21;
  a7[5] = (int8x16_t)v20;
  v22 = a4[1];
  v23 = *a4;
  *a7 = *(int8x16_t *)a4;
  a7[1] = (int8x16_t)v22;
  v25 = a5[1];
  v24 = a5[2];
  v83 = vaddq_f64(v16, v24);
  v84 = vsubq_f64(v16, v24);
  v26 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v83, v16), (int8x16_t)v16, (int8x16_t)v83);
  v89 = vbslq_s8((int8x16_t)vcgtq_f64(v26, v84), (int8x16_t)v26, (int8x16_t)v84);
  v81 = vaddq_f64(v23, v25);
  v82 = vsubq_f64(v23, v25);
  v27 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v81, v23), (int8x16_t)v23, (int8x16_t)v81);
  v95 = vbslq_s8((int8x16_t)vcgtq_f64(v27, v82), (int8x16_t)v27, (int8x16_t)v82);
  v110 = v14;
  v111 = v15;
  v112 = a4[8];
  v106 = v18;
  v107 = v19;
  v102 = 0;
  v101 = 0;
  v103 = 0.0;
  v108 = v21;
  v109 = v12;
  v104 = v95;
  v105 = v89;
  FundamentalEpipolarError_MeanValPlusGradient(a1, a2, a3, (__int128 *)v104.i8, &v103, v125.f64);
  v28 = (float64x2_t)v89;
  v29 = (float64x2_t)v95;
  v31 = v81;
  v30 = v82;
  v33 = v83;
  v32 = v84;
  v34 = 0;
  v35 = v103;
  v115 = v103;
  v116 = v103;
  v117 = v103;
  v118 = v103;
  v119 = v103;
  v120 = v103;
  v121 = v103;
  v122 = v103;
  v123 = v103;
  v124 = v103;
  v88 = v103;
  v36 = v89;
  v37 = v95;
  v38.f64[0] = v103;
  v39 = 0.1;
  do
  {
    v100 = 0.0;
    v44 = vsubq_f64(v29, v126);
    v45 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v31, v44), (int8x16_t)v44, (int8x16_t)v31);
    v46 = vsubq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v45, v30), (int8x16_t)v45, (int8x16_t)v30), v29);
    v47 = v46.f64[1];
    v48 = vmovn_s64(vcltzq_f64(v46));
    if ((v48.i8[4] & 1) != 0)
      v47 = -v46.f64[1];
    if ((v48.i8[0] & 1) != 0)
      v46.f64[0] = -v46.f64[0];
    v49 = vsubq_f64(v28, v125);
    v50 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v33, v49), (int8x16_t)v49, (int8x16_t)v33);
    v51 = vsubq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v50, v32), (int8x16_t)v50, (int8x16_t)v32), v28);
    v52 = vbslq_s8((int8x16_t)vcltzq_f64(v51), (int8x16_t)vnegq_f64(v51), (int8x16_t)v51);
    if (*(double *)&v52.i64[1] > *(double *)v52.i64)
      v52.i64[0] = v52.i64[1];
    if (v46.f64[0] <= *(double *)v52.i64)
      v46.f64[0] = *(double *)v52.i64;
    if (v47 > v46.f64[0])
      v46.f64[0] = v47;
    if (v46.f64[0] <= 0.0)
      break;
    v85 = v38;
    v86 = v37;
    v87 = v36;
    v53 = vsubq_f64(v28, vmulq_n_f64(v125, v39));
    v54 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v33, v53), (int8x16_t)v53, (int8x16_t)v33);
    v55 = vsubq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v54, v32), (int8x16_t)v54, (int8x16_t)v32), v28);
    v56 = vsubq_f64(v29, vmulq_n_f64(v126, v39));
    v57 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v31, v56), (int8x16_t)v56, (int8x16_t)v31);
    v58 = vsubq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v57, v30), (int8x16_t)v57, (int8x16_t)v30), v29);
    v59 = v115;
    if (v116 > v115)
      v59 = v116;
    if (v117 > v59)
      v59 = v117;
    if (v118 > v59)
      v59 = v118;
    if (v119 > v59)
      v59 = v119;
    if (v120 > v59)
      v59 = v120;
    if (v121 > v59)
      v59 = v121;
    if (v122 > v59)
      v59 = v122;
    if (v123 > v59)
      v59 = v123;
    v60 = v124 <= v59 ? v59 : v124;
    v91 = v58;
    v93 = v55;
    v61 = v125.f64[0] * v55.f64[0]
        + vmuld_lane_f64(v125.f64[1], v55, 1)
        + v126.f64[0] * v58.f64[0]
        + vmuld_lane_f64(v126.f64[1], v58, 1);
    v58.f64[0] = 1.0;
    v62 = 1000;
    v96 = v29;
    v90 = v28;
    while (1)
    {
      v97 = v58;
      v99 = 0.0;
      v63 = vaddq_f64(v28, vmulq_n_f64(v93, v58.f64[0]));
      v64 = vaddq_f64(v29, vmulq_n_f64(v91, v58.f64[0]));
      v65 = a4[7];
      v110 = a4[6];
      v111 = v65;
      v112 = a4[8];
      v66 = a4[3];
      v106 = a4[2];
      v107 = v66;
      v67 = a4[5];
      v108 = a4[4];
      v109 = v67;
      v104 = (int8x16_t)v64;
      v105 = (int8x16_t)v63;
      FundamentalEpipolarError_MeanVal(a1, a2, a3, (double *)v104.i64, &v99);
      v58 = v97;
      if (v99 <= v60 + v97.f64[0] * 0.0001 * v61)
        break;
      v28 = v90;
      v68 = v61 * (v97.f64[0] * v97.f64[0] * -0.5) / (v99 - v88 - v97.f64[0] * v61);
      if (v68 > v97.f64[0] * 0.9 || v68 < 0.1)
        v58.f64[0] = v97.f64[0] * 0.5;
      else
        v58.f64[0] = v61 * (v97.f64[0] * v97.f64[0] * -0.5) / (v99 - v88 - v97.f64[0] * v61);
      --v62;
      v29 = v96;
      if (!v62)
        goto LABEL_48;
    }
    v29 = v96;
    v28 = v90;
LABEL_48:
    v70 = vmulq_n_f64(v91, v58.f64[0]);
    v71 = vmulq_n_f64(v93, v58.f64[0]);
    v72 = a4[7];
    v110 = a4[6];
    v111 = v72;
    v112 = a4[8];
    v73 = a4[3];
    v106 = a4[2];
    v107 = v73;
    v74 = a4[5];
    v108 = a4[4];
    v109 = v74;
    v75 = vaddq_f64(v71, v28);
    v92 = vaddq_f64(v70, v29);
    v94 = vsubq_f64(v75, v28);
    v98 = (int8x16_t)v75;
    v104 = (int8x16_t)v92;
    v105 = (int8x16_t)v75;
    FundamentalEpipolarError_MeanValPlusGradient(a1, a2, a3, (__int128 *)v104.i8, &v100, v113.f64);
    v29 = v92;
    v76 = vsubq_f64(v92, v96);
    v77 = vmulq_f64(v76, vsubq_f64(v114, v126));
    v78 = vmulq_f64(v94, vsubq_f64(v113, v125));
    v41 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v78, 1);
    v79 = vaddq_f64(vaddq_f64(vaddq_f64(v78, v41), v77), (float64x2_t)vdupq_laneq_s64((int64x2_t)v77, 1));
    if (v79.f64[0] > 0.0)
    {
      v40 = vmulq_f64(v94, v94);
      v41 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v40, 1);
      v42 = vmulq_f64(v76, v76);
      v39 = fmin(vdivq_f64(vaddq_f64(vaddq_f64(vaddq_f64(v40, v41), v42), (float64x2_t)vdupq_laneq_s64((int64x2_t)v42, 1)), v79).f64[0], 1.0e30);
      if (v39 < 1.0e-30)
        v39 = 1.0e-30;
    }
    else
    {
      v39 = 1.0e30;
    }
    v33 = v83;
    v32 = v84;
    v31 = v81;
    v30 = v82;
    v38 = v85;
    ++v34;
    v41.f64[0] = v100;
    v125 = v113;
    v126 = v114;
    *(&v115 + v34 % 0xA) = v100;
    v43 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v85, v41).i64[0], 0);
    v28 = (float64x2_t)v98;
    v36 = vbslq_s8(v43, v98, v87);
    v37 = vbslq_s8(v43, (int8x16_t)v92, v86);
    v88 = v41.f64[0];
    if (v41.f64[0] < v85.f64[0])
      v38.f64[0] = v41.f64[0];
  }
  while (v34 != 50);
  if (a6)
  {
    *(_DWORD *)a6 = v34;
    *(_WORD *)(a6 + 5) = v101;
    *(_BYTE *)(a6 + 7) = v102;
    *(double *)(a6 + 8) = v35;
    *(float64_t *)(a6 + 16) = v38.f64[0];
  }
  *(_BYTE *)(a6 + 4) = 1;
  *a7 = v37;
  a7[1] = v36;
}

double *AdjustCalibrationDistorted(const double *a1, const double *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, float64x2_t *a7, uint64_t a8)
{
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  double v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  double v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  double v38;
  double v39;
  float64x2_t v40;
  float64x2_t v41;
  double v42;
  float64x2_t v43;
  int8x16_t v44;
  __int128 v45;
  double v46;
  float64x2_t v47;
  int8x16_t v48;
  double v49;
  __int128 v50;
  float64x2_t v51;
  int8x16_t v52;
  __int128 v53;
  double v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  double *result;
  __int128 v64;
  double v65;
  double v66;
  float64x2_t v67;
  float64x2_t v68;
  float64_t v69;
  int8x16_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  int v75;
  float64x2_t v76;
  float64x2_t v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  float64x2_t v93;
  double v94;
  double v95;
  double v96;
  double v97;
  float64x2_t v98;
  double v99;
  double v100;
  double v101;
  double v102;
  float64x2_t v103;
  double v104;
  double v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  int8x16_t v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  double v130;
  double v131;
  double v132;
  float64x2_t v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  double v139;
  float64x2_t v140;
  int v141;
  double v142;
  __int128 v143;
  double v144;
  float64x2_t v145;
  double v146;
  double v147;
  float64x2_t v148;
  double v149;
  __n128 v150;
  __int128 v151;
  double v152;
  __int128 v153;
  __n128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __n128 v164;
  __int128 v165;
  double v166;
  float64x2_t v168;
  __int128 v169;
  double v170;
  float64x2_t v171;
  double v172;
  double v173;
  double v174;
  __int128 v175;
  __int128 v176;
  int8x16_t v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  double v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  double v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  double v201;
  double v202;
  double v204;
  double v205;
  double v206;
  double v207;
  int8x16_t v208;
  float64x2_t v209;
  int8x16_t v210;
  double v211;
  double v212;
  double v213;
  double v214;
  double v215;
  float64x2_t v216;
  float64x2_t v217;
  double v218;
  double v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  double v226;
  double v227;
  double v228;
  double v229;
  float64x2_t v230;
  int v231;
  double v232;
  int8x16_t v233;
  double v234;
  int8x16_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  double v239;
  float64x2_t v240;
  double v241;
  float64x2_t v242;
  double v243;
  float64x2_t v244;
  float64x2_t v245;
  int8x16_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  double v251;
  float64_t v252;
  double v253;
  __int128 v254;
  float64x2_t v255;
  double v256;
  double v257;
  __int16 v258;
  char v259;
  double v260;
  _BYTE v261[24];
  double v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  _BYTE v271[24];
  double v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  _BYTE v281[32];
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  float64x2_t v289;
  float64x2_t v290;
  float64x2_t v291;
  float64x2_t v292;
  float64x2_t v293;
  double v294;
  double v295;
  double v296;
  double v297;
  double v298;
  double v299;
  double v300;
  double v301;
  double v302;
  double v303;
  float64x2_t v304;
  float64x2_t v305;
  float64x2_t v306;
  _BYTE v307[32];
  uint64_t v308;

  v308 = *MEMORY[0x24BDAC8D0];
  v15 = *(double *)(a6 + 16);
  v14 = *(double *)(a6 + 24);
  v16 = *(double *)(a4 + 24);
  v17 = *(double *)(a5 + 24);
  v18 = a7[2].f64[0];
  v19 = a7[2].f64[1];
  v20 = v15 - v18;
  v21 = v14 - v19;
  v232 = v14 - v19;
  v22 = v16 - v18;
  v23 = v17 - v19;
  v24 = v15 + v18;
  v226 = v15 + v18;
  v227 = v15 - v18;
  v25 = *(float64x2_t *)a6;
  v26 = a7[1];
  v27 = vsubq_f64(*(float64x2_t *)a6, v26);
  v28 = vaddq_f64(*(float64x2_t *)a6, v26);
  v29 = v14 + v19;
  *(_QWORD *)&v30.f64[0] = vdupq_laneq_s64((int64x2_t)v26, 1).u64[0];
  v26.f64[1] = v18;
  v31 = *(float64x2_t *)(a4 + 8);
  v32 = vsubq_f64(v31, v26);
  v33 = vaddq_f64(v26, v31);
  v34 = v18 + v16;
  v30.f64[1] = v19;
  v35 = *(float64x2_t *)(a5 + 8);
  v36 = vsubq_f64(v35, v30);
  v37 = vaddq_f64(v30, v35);
  v38 = v19 + v17;
  v259 = 0;
  if ((vmovn_s64(vcgtq_f64(v28, v25)).u8[0] & 1) != 0)
    v39 = v25.f64[0];
  else
    v39 = v28.f64[0];
  v224 = v28;
  v225 = v27;
  v25.f64[0] = v15;
  v40.f64[1] = v28.f64[1];
  v40.f64[0] = v24;
  v41.f64[1] = v27.f64[1];
  v41.f64[0] = v20;
  v258 = 0;
  if (v39 <= v27.f64[0])
    v42 = v27.f64[0];
  else
    v42 = v39;
  v251 = v42;
  v219 = v28.f64[1];
  v218 = v27.f64[1];
  v43 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v40, v25), (int8x16_t)v25, (int8x16_t)v40);
  v44 = vbslq_s8((int8x16_t)vcgtq_f64(v43, v41), (int8x16_t)v43, (int8x16_t)v41);
  v233 = v44;
  v260 = 0.0;
  v45 = *(_OWORD *)(a6 + 112);
  if (v14 >= v29)
    v14 = v29;
  v286 = *(_OWORD *)(a6 + 96);
  v287 = v45;
  if (v14 <= v21)
    v46 = v21;
  else
    v46 = v14;
  v222 = v33;
  v223 = v32;
  v47 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v33, v31), (int8x16_t)v31, (int8x16_t)v33);
  v288 = *(_OWORD *)(a6 + 128);
  v48 = vbslq_s8((int8x16_t)vcgtq_f64(v47, v32), (int8x16_t)v47, (int8x16_t)v32);
  if (v16 >= v34)
    v16 = v34;
  if (v16 <= v22)
    v49 = v22;
  else
    v49 = v16;
  v50 = *(_OWORD *)(a6 + 48);
  v220 = v37;
  v221 = v36;
  v51 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v37, v35), (int8x16_t)v35, (int8x16_t)v37);
  v282 = *(_OWORD *)(a6 + 32);
  v283 = v50;
  v52 = vbslq_s8((int8x16_t)vcgtq_f64(v51, v36), (int8x16_t)v51, (int8x16_t)v36);
  v246 = v48;
  v249 = (float64x2_t)v52;
  if (v17 >= v38)
    v17 = v38;
  v53 = *(_OWORD *)(a6 + 64);
  if (v17 <= v23)
    v54 = v23;
  else
    v54 = v17;
  v285 = *(_OWORD *)(a6 + 80);
  v284 = v53;
  *(int8x16_t *)&v281[8] = vextq_s8(v44, v44, 8uLL);
  *(double *)v281 = v42;
  *(double *)&v281[24] = v46;
  v55 = *(_OWORD *)(a4 + 112);
  v277 = *(_OWORD *)(a4 + 96);
  v278 = v55;
  v56 = *(_OWORD *)(a4 + 144);
  v279 = *(_OWORD *)(a4 + 128);
  v280 = v56;
  v57 = *(_OWORD *)(a4 + 48);
  v273 = *(_OWORD *)(a4 + 32);
  v274 = v57;
  v58 = *(_OWORD *)(a4 + 80);
  v275 = *(_OWORD *)(a4 + 64);
  v276 = v58;
  *(_OWORD *)v271 = *(_OWORD *)a4;
  *(int8x16_t *)&v271[8] = v48;
  v272 = v49;
  v59 = *(_OWORD *)(a5 + 112);
  v267 = *(_OWORD *)(a5 + 96);
  v268 = v59;
  v60 = *(_OWORD *)(a5 + 144);
  v269 = *(_OWORD *)(a5 + 128);
  v270 = v60;
  v61 = *(_OWORD *)(a5 + 48);
  v263 = *(_OWORD *)(a5 + 32);
  v264 = v61;
  v62 = *(_OWORD *)(a5 + 80);
  v265 = *(_OWORD *)(a5 + 64);
  v266 = v62;
  *(_OWORD *)v261 = *(_OWORD *)a5;
  *(int8x16_t *)&v261[8] = v52;
  v262 = v54;
  result = FundamentalDistortionError_MeanValPlusGradient((uint64_t)a1, (uint64_t)a2, a3, (double *)v271, (uint64_t)v261, (__int128 *)v281, &v260, v304.f64);
  v65 = v49;
  v66 = v46;
  v67 = (float64x2_t)v246;
  v68 = v249;
  v69 = v251;
  v70 = v233;
  v72 = v220;
  v71 = v221;
  v73 = v222;
  v74 = v223;
  v75 = 0;
  v294 = v260;
  v295 = v260;
  v296 = v260;
  v297 = v260;
  v298 = v260;
  v299 = v260;
  v76.f64[0] = v224.f64[0];
  v76.f64[1] = v226;
  v217 = v76;
  v77.f64[0] = v225.f64[0];
  v239 = v260;
  v208 = v233;
  v209 = v249;
  v210 = v246;
  v300 = v260;
  v301 = v260;
  v206 = v65;
  v207 = v54;
  v204 = v251;
  v205 = v46;
  v302 = v260;
  v303 = v260;
  v77.f64[1] = v227;
  v216 = v77;
  v202 = v260;
  v228 = v260;
  v78 = 0.1;
  v214 = v23;
  v215 = v22;
  v212 = v34;
  v213 = v29;
  v211 = v38;
  do
  {
    v79 = v54 - *(double *)&v307[24];
    if (v54 - *(double *)&v307[24] >= v38)
      v79 = v38;
    v80 = v23;
    if (v79 <= v23)
      v79 = v23;
    v81 = v79 - v54;
    if (v81 >= 0.0)
      v82 = v81;
    else
      v82 = -v81;
    v83 = v68.f64[1] - *(double *)&v307[16];
    if (v68.f64[1] - *(double *)&v307[16] >= v220.f64[1])
      v83 = v220.f64[1];
    if (v83 <= v221.f64[1])
      v83 = v221.f64[1];
    if (v83 - v68.f64[1] >= 0.0)
      v84 = v83 - v68.f64[1];
    else
      v84 = -(v83 - v68.f64[1]);
    v85 = v68.f64[0] - *(double *)&v307[8];
    if (v68.f64[0] - *(double *)&v307[8] >= v72.f64[0])
      v85 = v72.f64[0];
    if (v85 <= v71.f64[0])
      v85 = v71.f64[0];
    v86 = v85 - v68.f64[0];
    if (v86 >= 0.0)
      v87 = v86;
    else
      v87 = -v86;
    v88 = v65 - *(double *)v307;
    v89 = v34;
    if (v65 - *(double *)v307 >= v34)
      v88 = v34;
    if (v88 <= v22)
      v88 = v22;
    v90 = v65;
    v91 = v88 - v65;
    if (v91 >= 0.0)
      v92 = v91;
    else
      v92 = -v91;
    v93 = v72;
    v94 = v67.f64[1] - v306.f64[1];
    if (v67.f64[1] - v306.f64[1] >= v222.f64[1])
      v94 = v222.f64[1];
    if (v94 <= v223.f64[1])
      v94 = v223.f64[1];
    v95 = v94 - v67.f64[1];
    v96 = -(v94 - v67.f64[1]);
    if (v95 >= 0.0)
      v96 = v95;
    v97 = v67.f64[0] - v306.f64[0];
    if (v67.f64[0] - v306.f64[0] >= v73.f64[0])
      v97 = v73.f64[0];
    if (v97 <= v74.f64[0])
      v97 = v74.f64[0];
    v98 = v67;
    v99 = v97 - v67.f64[0];
    if (v99 >= 0.0)
      v100 = v99;
    else
      v100 = -v99;
    v101 = v66 - v305.f64[1];
    v102 = v29;
    if (v66 - v305.f64[1] >= v29)
      v101 = v29;
    v103 = v73;
    if (v101 <= v232)
      v101 = v232;
    v104 = v101 - v66;
    if (v104 < 0.0)
      v104 = -v104;
    v105 = v66;
    v237 = (float64x2_t)vextq_s8(v70, v70, 8uLL);
    v106.f64[1] = v237.f64[1];
    v106.f64[0] = v69;
    v107 = vsubq_f64(v106, v304);
    v108 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v217, v107), (int8x16_t)v107, (int8x16_t)v217);
    v109 = vsubq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v108, v216), (int8x16_t)v108, (int8x16_t)v216), v106);
    v110 = vbslq_s8((int8x16_t)vcltzq_f64(v109), (int8x16_t)vnegq_f64(v109), (int8x16_t)v109);
    v111 = *(double *)&v70.i64[1] - v305.f64[0];
    v112 = v69;
    if (*(double *)&v70.i64[1] - v305.f64[0] >= v219)
      v111 = v219;
    if (v111 <= v218)
      v111 = v218;
    v113 = v111 - *(double *)&v70.i64[1];
    if (v111 - *(double *)&v70.i64[1] < 0.0)
      v113 = -v113;
    if (*(double *)&v110.i64[1] > *(double *)v110.i64)
      v110.i64[0] = v110.i64[1];
    if (v113 > *(double *)v110.i64)
      *(double *)v110.i64 = v113;
    if (v104 <= *(double *)v110.i64)
      v104 = *(double *)v110.i64;
    if (v100 <= v104)
      v100 = v104;
    if (v96 <= v100)
      v96 = v100;
    if (v92 <= v96)
      v92 = v96;
    if (v87 <= v92)
      v87 = v92;
    if (v84 <= v87)
      v84 = v87;
    if (v82 <= v84)
      v82 = v84;
    v257 = 0.0;
    if (v82 <= 0.0)
      break;
    v231 = v75;
    v114 = v54 - v78 * *(double *)&v307[24];
    if (v114 >= v38)
      v114 = v38;
    if (v114 <= v80)
      v114 = v80;
    v115 = v90 - v78 * *(double *)v307;
    if (v115 >= v89)
      v115 = v89;
    if (v115 <= v22)
      v115 = v22;
    v116 = v105;
    v117 = v105 - v78 * v305.f64[1];
    if (v117 >= v102)
      v117 = v102;
    if (v117 <= v232)
      v117 = v232;
    v118 = *(double *)v70.i64 - v78 * v304.f64[1];
    if (v118 >= v226)
      v118 = v226;
    if (v118 <= v227)
      v118 = v227;
    v119.f64[0] = v304.f64[0];
    v119.f64[1] = v305.f64[0];
    *(_QWORD *)&v120.f64[1] = v70.i64[1];
    v120.f64[0] = v69;
    v121 = vsubq_f64(v120, vmulq_n_f64(v119, v78));
    v122 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v224, v121), (int8x16_t)v121, (int8x16_t)v224);
    v123 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v122, v225), (int8x16_t)v122, (int8x16_t)v225);
    v124 = vsubq_f64(v98, vmulq_n_f64(v306, v78));
    v125 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v103, v124), (int8x16_t)v124, (int8x16_t)v103);
    v126 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v125, v74), (int8x16_t)v125, (int8x16_t)v74);
    v127 = vsubq_f64(v68, vmulq_n_f64(*(float64x2_t *)&v307[8], v78));
    v128 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v93, v127), (int8x16_t)v127, (int8x16_t)v93);
    v129 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v128, v71), (int8x16_t)v128, (int8x16_t)v71);
    v130 = v294;
    if (v295 > v294)
      v130 = v295;
    if (v296 > v130)
      v130 = v296;
    if (v297 > v130)
      v130 = v297;
    if (v298 > v130)
      v130 = v298;
    if (v299 > v130)
      v130 = v299;
    if (v300 > v130)
      v130 = v300;
    if (v301 > v130)
      v130 = v301;
    if (v302 > v130)
      v130 = v302;
    v131 = v303 <= v130 ? v130 : v303;
    v234 = *(double *)v70.i64;
    v132 = v118 - *(double *)v70.i64;
    v230 = v120;
    v133 = vsubq_f64(v123, v120);
    v134 = v117 - v116;
    v247 = v98;
    v242 = vsubq_f64(v126, v98);
    v135 = v90;
    v136 = v115 - v90;
    v137 = v54;
    v138 = v114 - v54;
    v240 = vsubq_f64(v129, v68);
    v139 = v304.f64[0] * v133.f64[0]
         + v304.f64[1] * v132
         + vmuld_lane_f64(v305.f64[0], v133, 1)
         + v305.f64[1] * (v117 - v116)
         + v306.f64[0] * v242.f64[0]
         + vmuld_lane_f64(v306.f64[1], v242, 1)
         + *(double *)v307 * (v115 - v90)
         + *(double *)&v307[8] * v240.f64[0]
         + vmuld_lane_f64(*(double *)&v307[16], v240, 1)
         + *(double *)&v307[24] * (v114 - v54);
    v244 = v133;
    *(_QWORD *)&v140.f64[0] = vdupq_laneq_s64((int64x2_t)v133, 1).u64[0];
    v229 = v132;
    v140.f64[1] = v132;
    v236 = v140;
    *(_QWORD *)&v64 = 1.0;
    v141 = 1000;
    v142 = v116;
    v250 = v68;
    v252 = v69;
    while (1)
    {
      v254 = v64;
      v256 = 0.0;
      v143 = *(_OWORD *)(a6 + 112);
      v144 = v112 + *(double *)&v64 * v244.f64[0];
      v145 = vaddq_f64(v237, vmulq_n_f64(v236, *(double *)&v64));
      v286 = *(_OWORD *)(a6 + 96);
      v287 = v143;
      v146 = v142;
      v147 = v142 + *(double *)&v64 * v134;
      v148 = vaddq_f64(v247, vmulq_n_f64(v242, *(double *)&v64));
      v288 = *(_OWORD *)(a6 + 128);
      v149 = v135 + *(double *)&v64 * v136;
      v150 = (__n128)vaddq_f64(v68, vmulq_n_f64(v240, *(double *)&v64));
      v151 = *(_OWORD *)(a6 + 48);
      v152 = v137 + *(double *)&v64 * v138;
      v282 = *(_OWORD *)(a6 + 32);
      v283 = v151;
      v153 = *(_OWORD *)(a6 + 64);
      v285 = *(_OWORD *)(a6 + 80);
      v284 = v153;
      v154 = *(__n128 *)(a6 + 16);
      *(float64x2_t *)&v281[8] = v145;
      *(double *)v281 = v144;
      *(double *)&v281[24] = v147;
      v155 = *(_OWORD *)(a4 + 112);
      v277 = *(_OWORD *)(a4 + 96);
      v278 = v155;
      v156 = *(_OWORD *)(a4 + 144);
      v279 = *(_OWORD *)(a4 + 128);
      v280 = v156;
      v157 = *(_OWORD *)(a4 + 48);
      v273 = *(_OWORD *)(a4 + 32);
      v274 = v157;
      v158 = *(_OWORD *)(a4 + 80);
      v275 = *(_OWORD *)(a4 + 64);
      v276 = v158;
      v159 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)v271 = *(_OWORD *)a4;
      *(float64x2_t *)&v271[8] = v148;
      v272 = v149;
      v160 = *(_OWORD *)(a5 + 112);
      v267 = *(_OWORD *)(a5 + 96);
      v268 = v160;
      v161 = *(_OWORD *)(a5 + 144);
      v269 = *(_OWORD *)(a5 + 128);
      v270 = v161;
      v162 = *(_OWORD *)(a5 + 48);
      v263 = *(_OWORD *)(a5 + 32);
      v264 = v162;
      v163 = *(_OWORD *)(a5 + 80);
      v265 = *(_OWORD *)(a5 + 64);
      v266 = v163;
      v165 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)v261 = *(_OWORD *)a5;
      v164 = *(__n128 *)v261;
      *(__n128 *)&v261[8] = v150;
      v262 = v152;
      FundamentalDistortionError_MeanVal(a1, a2, a3, (double *)v271, (double *)v261, (uint64_t)v281, &v256, v152, v164, *(double *)&v165, v148.f64[0], v150, *(double *)&v159, v145.f64[0], v154);
      v64 = v254;
      if (v256 <= v131 + *(double *)&v254 * 0.0001 * v139)
        break;
      v166 = v139 * (*(double *)&v254 * *(double *)&v254 * -0.5) / (v256 - v239 - *(double *)&v254 * v139);
      if (v166 > *(double *)&v254 * 0.9 || v166 < 0.1)
        *(double *)&v64 = *(double *)&v254 * 0.5;
      else
        *(double *)&v64 = v139 * (*(double *)&v254 * *(double *)&v254 * -0.5) / (v256 - v239 - *(double *)&v254 * v139);
      --v141;
      v68 = v250;
      v112 = v252;
      v142 = v146;
      if (!v141)
        goto LABEL_142;
    }
    v68 = v250;
    v142 = v146;
LABEL_142:
    v168 = vmulq_n_f64(v240, *(double *)&v64);
    v169 = *(_OWORD *)(a6 + 112);
    v170 = *(double *)&v64 * v136;
    v171 = vmulq_n_f64(v242, *(double *)&v64);
    v286 = *(_OWORD *)(a6 + 96);
    v287 = v169;
    v288 = *(_OWORD *)(a6 + 128);
    v172 = *(double *)&v64 * v134 + v142;
    v173 = v170 + v135;
    v174 = *(double *)&v64 * v138 + v137;
    v175 = *(_OWORD *)(a6 + 48);
    v282 = *(_OWORD *)(a6 + 32);
    v283 = v175;
    v176 = *(_OWORD *)(a6 + 64);
    v285 = *(_OWORD *)(a6 + 80);
    v284 = v176;
    v177 = *(int8x16_t *)(a6 + 16);
    *(_OWORD *)v281 = *(_OWORD *)a6;
    *(int8x16_t *)&v281[16] = v177;
    v178 = *(_OWORD *)(a4 + 112);
    v277 = *(_OWORD *)(a4 + 96);
    v278 = v178;
    v179 = *(_OWORD *)(a4 + 144);
    v279 = *(_OWORD *)(a4 + 128);
    v280 = v179;
    v180 = *(_OWORD *)(a4 + 48);
    v273 = *(_OWORD *)(a4 + 32);
    v274 = v180;
    v181 = *(_OWORD *)(a4 + 80);
    v275 = *(_OWORD *)(a4 + 64);
    v276 = v181;
    v182 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)v271 = *(_OWORD *)a4;
    *(_QWORD *)&v271[16] = v182;
    v272 = v170 + v135;
    v183 = *(_OWORD *)(a5 + 112);
    v267 = *(_OWORD *)(a5 + 96);
    v268 = v183;
    v184 = *(_OWORD *)(a5 + 144);
    v269 = *(_OWORD *)(a5 + 128);
    v270 = v184;
    v185 = *(_OWORD *)(a5 + 48);
    v263 = *(_OWORD *)(a5 + 32);
    v264 = v185;
    v186 = *(_OWORD *)(a5 + 80);
    v265 = *(_OWORD *)(a5 + 64);
    v266 = v186;
    *(_OWORD *)v261 = *(_OWORD *)a5;
    v262 = v174;
    v187 = *(double *)&v64 * v229 + v234 - v234;
    v188 = vaddq_f64(vmulq_n_f64(v244, *(double *)&v64), v230);
    v177.i64[1] = *(_QWORD *)&v188.f64[1];
    *(double *)v177.i64 = *(double *)&v64 * v229 + v234;
    v235 = v177;
    *(double *)&v281[24] = v172;
    v253 = v188.f64[0];
    *(float64_t *)v281 = v188.f64[0];
    v243 = v172 - v142;
    v245 = vsubq_f64(v188, v230);
    *(int8x16_t *)&v281[8] = vextq_s8(v177, v177, 8uLL);
    v189 = vaddq_f64(v171, v247);
    v248 = vsubq_f64(v189, v247);
    v255 = v189;
    *(float64x2_t *)&v271[8] = v189;
    v241 = v170 + v135 - v135;
    v238 = vaddq_f64(v168, v68);
    *(float64x2_t *)&v261[8] = v238;
    result = FundamentalDistortionError_MeanValPlusGradient((uint64_t)a1, (uint64_t)a2, a3, (double *)v271, (uint64_t)v261, (__int128 *)v281, &v257, v289.f64);
    v68 = v238;
    v190 = vsubq_f64(v238, v250);
    v191 = (float64x2_t)vextq_s8((int8x16_t)v190, (int8x16_t)v190, 8uLL);
    v192.f64[0] = v191.f64[0];
    v192.f64[1] = v174 - v137;
    v193 = vmulq_f64(v192, vsubq_f64(v293, *(float64x2_t *)&v307[16]));
    v191.f64[0] = v241;
    v194 = vmulq_f64(v191, vsubq_f64(v292, *(float64x2_t *)v307));
    *((_QWORD *)&v64 + 1) = *(_QWORD *)&v305.f64[1];
    *(_QWORD *)&v192.f64[0] = vdupq_laneq_s64((int64x2_t)v245, 1).u64[0];
    v192.f64[1] = v243;
    v195 = vmulq_f64(v192, vsubq_f64(v290, v305));
    v196 = vmulq_f64(v248, vsubq_f64(v291, v306));
    v197 = (v289.f64[0] - v304.f64[0]) * v245.f64[0]
         + v187 * (v289.f64[1] - v304.f64[1])
         + v195.f64[0]
         + v195.f64[1]
         + v196.f64[0]
         + v196.f64[1]
         + v194.f64[0]
         + v194.f64[1]
         + v193.f64[0]
         + v193.f64[1];
    if (v197 <= 0.0)
    {
      v78 = 1.0e30;
    }
    else
    {
      v198 = vmulq_f64(v190, v190);
      v199 = vmulq_f64(v248, v248);
      v200 = vmulq_f64(v245, v245);
      v78 = fmin((v200.f64[0]+ v187 * v187+ v200.f64[1]+ v243 * v243+ v199.f64[0]+ v199.f64[1]+ v241 * v241+ v198.f64[0]+ v198.f64[1]+ (v174 - v137) * (v174 - v137))/ v197, 1.0e30);
      if (v78 < 1.0e-30)
        v78 = 1.0e-30;
    }
    v22 = v215;
    v74 = v223;
    v75 = v231 + 1;
    v201 = v257;
    v260 = v257;
    v306 = v291;
    *(float64x2_t *)v307 = v292;
    *(float64x2_t *)&v307[16] = v293;
    v304 = v289;
    v305 = v290;
    *(&v294 + (v231 + 1) % 0xAu) = v257;
    v239 = v201;
    v71 = v221;
    v73 = v222;
    v72 = v220;
    v38 = v211;
    v70 = v235;
    v69 = v253;
    if (v201 < v228)
    {
      v208 = v235;
      v209 = v238;
      v210 = (int8x16_t)v255;
      v206 = v173;
      v207 = v174;
      v204 = v253;
      v205 = v172;
      v228 = v201;
    }
    v67 = v255;
    v54 = v174;
    v65 = v173;
    v66 = v172;
    v29 = v213;
    v23 = v214;
    v34 = v212;
  }
  while (v231 != 99);
  if (a8)
  {
    *(_DWORD *)a8 = v75;
    *(_WORD *)(a8 + 5) = v258;
    *(_BYTE *)(a8 + 7) = v259;
    *(double *)(a8 + 8) = v202;
    *(double *)(a8 + 16) = v228;
  }
  *(_BYTE *)(a8 + 4) = 1;
  *(double *)a6 = v204;
  *(int8x16_t *)(a6 + 8) = vextq_s8(v208, v208, 8uLL);
  *(double *)(a6 + 24) = v205;
  *(int8x16_t *)(a4 + 8) = v210;
  *(double *)(a4 + 24) = v206;
  *(float64x2_t *)(a5 + 8) = v209;
  *(double *)(a5 + 24) = v207;
  return result;
}

void dumpRawImageFile(uint64_t a1, const void *a2, size_t a3)
{
  std::string *p_p;
  FILE *v6;
  std::string __p;
  uint8_t buf[16];

  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    if (!a2)
      goto LABEL_12;
  }
  else
  {
    __p = *(std::string *)a1;
    if (!a2)
    {
LABEL_12:
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
      goto LABEL_13;
    }
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v6 = fopen((const char *)p_p, "wb");
  if (v6)
  {
    fwrite(a2, 4uLL, a3, v6);
    fclose(v6);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    goto LABEL_13;
  }
  if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    goto LABEL_12;
  *(_WORD *)buf = 0;
  _os_log_error_impl(&dword_20B62B000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Error dumping files. did you forget to set entitlements?", buf, 2u);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_13:
    operator delete(__p.__r_.__value_.__l.__data_);
}

{
  std::string *p_p;
  FILE *v6;
  std::string __p;
  uint8_t buf[16];

  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    if (!a2)
      goto LABEL_12;
  }
  else
  {
    __p = *(std::string *)a1;
    if (!a2)
    {
LABEL_12:
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
      goto LABEL_13;
    }
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v6 = fopen((const char *)p_p, "wb");
  if (v6)
  {
    fwrite(a2, 1uLL, a3, v6);
    fclose(v6);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    goto LABEL_13;
  }
  if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    goto LABEL_12;
  *(_WORD *)buf = 0;
  _os_log_error_impl(&dword_20B62B000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Error dumping files. did you forget to set entitlements?", buf, 2u);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_13:
    operator delete(__p.__r_.__value_.__l.__data_);
}

{
  std::string *p_p;
  FILE *v6;
  std::string __p;
  uint8_t buf[16];

  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    if (!a2)
      goto LABEL_12;
  }
  else
  {
    __p = *(std::string *)a1;
    if (!a2)
    {
LABEL_12:
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
      goto LABEL_13;
    }
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v6 = fopen((const char *)p_p, "wb");
  if (v6)
  {
    fwrite(a2, 2uLL, a3, v6);
    fclose(v6);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    goto LABEL_13;
  }
  if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    goto LABEL_12;
  *(_WORD *)buf = 0;
  _os_log_error_impl(&dword_20B62B000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Error dumping files. did you forget to set entitlements?", buf, 2u);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_13:
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20B67692C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void sub_20B676ADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B676C04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void dumpTexture(const char *a1, void *a2)
{
  id v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  size_t v9;
  void *v10;
  FILE *v11;
  _QWORD v12[6];

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    v5 = +[ADMetalUtils bytesPerPixelForTextureFormat:](ADMetalUtils, "bytesPerPixelForTextureFormat:", objc_msgSend(v3, "pixelFormat"));
    v6 = objc_msgSend(v4, "width");
    v7 = objc_msgSend(v4, "height");
    v8 = v6 * v5;
    v9 = v6 * v5 * v7;
    v10 = malloc_type_malloc(v9, 0xE7EBB413uLL);
    memset(v12, 0, 24);
    v12[3] = v6;
    v12[4] = v7;
    v12[5] = 1;
    objc_msgSend(v4, "getBytes:bytesPerRow:fromRegion:mipmapLevel:", v10, v8, v12, 0);
    if (a1[23] < 0)
      a1 = *(const char **)a1;
    v11 = fopen(a1, "wb");
    fwrite(v10, 1uLL, v9, v11);
    fclose(v11);
    free(v10);
  }

}

void sub_20B676D2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

__n128 AdjustYOpticalCenterForValidDistanceRange@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, double *a5@<X4>, uint64_t a6@<X8>)
{
  __int128 v6;
  double v7;
  int v8;
  double v9;
  double v10;
  int v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  const double *v35;
  const double *v36;
  int64x2_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int32x4_t v57;
  const double *v58;
  const double *v59;
  uint64_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  const double *v66;
  const double *v67;
  const double *v68;
  const double *v69;
  unsigned __int128 v70;
  const double *v71;
  const double *v72;
  unsigned __int128 v73;
  unsigned __int128 v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  float64x2_t v90;
  int32x4_t v91;
  unsigned __int128 v92;
  int32x4_t v93;
  uint64_t v94;
  uint64_t v95;
  double *v96;
  double *v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  _BOOL4 v104;
  double v105;
  double v106;
  double v107;
  BOOL v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __n128 result;
  double v113;
  int v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  double v146;
  __int128 v147;
  int32x4_t v148;
  float64x2x2_t v149;
  float64x2x2_t v150;
  float64x2x2_t v151;
  float64x2x2_t v152;

  v7 = *(double *)(a4 + 40);
  v8 = (int)a5[6];
  if (v8 < 0)
  {
    v43 = *(double *)(a4 + 40);
  }
  else
  {
    v9 = a5[10];
    v10 = a5[11];
    v11 = -v8;
    v12 = a5[12];
    if ((int)a3 < 1)
    {
      v113 = v12 * 0.0 + v9 * 0.0 + v10 * 0.0;
      v114 = (2 * v8) | 1;
      v115 = 1.79769313e308;
      v116 = *(double *)(a4 + 40);
      v117 = 1.79769313e308;
      do
      {
        v43 = v7 + (double)v11;
        if (v113 < v115)
        {
          v117 = -(v7 - v43);
          if (v7 - v43 >= 0.0)
            v117 = v7 - v43;
          v115 = v12 * 0.0 + v9 * 0.0 + v10 * 0.0;
        }
        else if (v113 == v115)
        {
          v118 = v7 - v43;
          if (v7 - v43 < 0.0)
            v118 = -(v7 - v43);
          if (v118 >= v117)
            v43 = v116;
          else
            v117 = v118;
        }
        else
        {
          v43 = v116;
        }
        ++v11;
        v116 = v43;
        --v114;
      }
      while (v114);
    }
    else
    {
      v14 = *(double *)a4;
      v13 = *(double *)(a4 + 8);
      v15 = *(double *)(a4 + 16);
      v16 = *(double *)(a4 + 32);
      v18 = *(double *)(a4 + 80);
      v17 = *(double *)(a4 + 88);
      v19 = *(double *)(a4 + 112);
      v20 = *(double *)(a4 + 120);
      v21 = *(double *)(a4 + 136);
      v23 = a5[7];
      v22 = a5[8];
      v24 = a3 & 7;
      if (!v24)
        v24 = 8;
      v25 = a3 - v24;
      v26 = -v19;
      v27 = -v20;
      v28 = v16 * v20 + v19 * v15 + v14 * *(double *)(a4 + 128);
      v29 = -(v14 * v13) * *(double *)(a4 + 96) - v13 * (v16 * v17 + v18 * v15);
      v30 = -(v13 * *(double *)(a4 + 104));
      v31 = 1.79769313e308;
      v32 = v14 * v21 / 1.79769313e308 + v28;
      v33 = v14 * v21 / v22 + v28;
      v34 = v14 * v21 / v23 + v28;
      v139 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v32, 0);
      v140 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(-v19), 0);
      v35 = (const double *)(a2 + 72);
      v36 = (const double *)(a1 + 64);
      v37 = vdupq_lane_s64(*(uint64_t *)&v34, 0);
      v38 = a2 + 8;
      v39 = a1 + 8;
      v40 = *(double *)(a4 + 40);
      v133 = 1.79769313e308;
      v128 = a5[10];
      v126 = a5[12];
      v127 = a5[11];
      v124 = a5[7];
      v125 = a5[8];
      v123 = -v19;
      v122 = v28;
      v131 = v30;
      v132 = v29;
      v120 = v33;
      v121 = v32;
      v119 = v34;
      v141 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v33, 0);
      v146 = -v20;
      do
      {
        v134 = v40;
        v43 = v7 + (double)v11;
        *(double *)&v6 = v13 * v17 - v43 * v20;
        v44 = v29 + v43 * v28;
        v45 = v14 * (v30 + v43 * v21);
        v46 = v45 / 1.79769313e308 + v44;
        v47 = v45 / v22 + v44;
        v48 = v45 / v23 + v44;
        v137 = v46;
        v138 = v13 * v18 - v43 * v19;
        v135 = v48;
        v136 = v47;
        if (a3 > 8)
        {
          v129 = v31;
          v130 = v7 + (double)v11;
          v144 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v46, 0);
          v145 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v13 * v18 - v43 * v19), 0);
          v147 = v6;
          v57 = 0uLL;
          v58 = v36;
          v59 = v35;
          v142 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v48, 0);
          v143 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v47, 0);
          v60 = v25;
          v61 = 0uLL;
          v62 = 0uLL;
          v63 = 0uLL;
          v64 = 0uLL;
          v65 = 0uLL;
          do
          {
            v148 = v57;
            v66 = v58 - 8;
            v152 = vld2q_f64(v66);
            v67 = v58 - 4;
            v149 = vld2q_f64(v67);
            v68 = v58;
            v150 = vld2q_f64(v68);
            v68 += 4;
            v151 = vld2q_f64(v68);
            v69 = v59 - 8;
            v70 = (unsigned __int128)vld2q_f64(v69);
            v71 = v59 - 4;
            v72 = v59;
            v73 = (unsigned __int128)vld2q_f64(v71);
            v74 = (unsigned __int128)vld2q_f64(v72);
            v72 += 4;
            v75 = vmlaq_f64(vmulq_n_f64(v152.val[1], *(double *)&v147), v152.val[0], v145);
            v76 = vmlaq_f64(vmulq_n_f64(v149.val[1], *(double *)&v147), v149.val[0], v145);
            v77 = vmlaq_f64(vmulq_n_f64(v151.val[1], *(double *)&v147), v151.val[0], v145);
            v78 = vmlaq_f64(vmulq_n_f64(v150.val[1], *(double *)&v147), v150.val[0], v145);
            v79 = (float64x2_t)v37;
            v80 = vmlaq_f64(vmulq_n_f64(v152.val[1], v146), v152.val[0], v140);
            v81 = vmlaq_f64(vmulq_n_f64(v149.val[1], v146), v149.val[0], v140);
            v149.val[0] = vmlaq_f64(vmulq_n_f64(v151.val[1], v146), v151.val[0], v140);
            v152.val[1] = vmlaq_f64(vmulq_n_f64(v150.val[1], v146), v150.val[0], v140);
            v149.val[1] = vdivq_f64(vaddq_f64(v144, v75), vaddq_f64(v139, v80));
            v151.val[1] = vdivq_f64(vaddq_f64(v144, v78), vaddq_f64(v139, v152.val[1]));
            v151.val[0] = vdivq_f64(vaddq_f64(v144, v76), vaddq_f64(v139, v81));
            v150.val[0] = vdivq_f64(vaddq_f64(v143, v75), vaddq_f64(v141, v80));
            v152.val[0] = vdivq_f64(vaddq_f64(v143, v76), vaddq_f64(v141, v81));
            v150.val[1] = vdivq_f64(vaddq_f64(v143, v78), vaddq_f64(v141, v152.val[1]));
            v82 = vaddq_f64(v79, v80);
            v37 = (int64x2_t)v79;
            v83 = vdivq_f64(vaddq_f64(v142, v75), v82);
            v84 = vdivq_f64(vaddq_f64(v142, v76), vaddq_f64(v79, v81));
            v85 = vdivq_f64(vaddq_f64(v144, v77), vaddq_f64(v139, v149.val[0]));
            v86 = vdivq_f64(vaddq_f64(v142, v78), vaddq_f64(v79, v152.val[1]));
            v152.val[1] = vdivq_f64(vaddq_f64(v143, v77), vaddq_f64(v141, v149.val[0]));
            v87 = (int32x4_t)vcgtq_f64(v151.val[0], (float64x2_t)v73);
            v88 = (int32x4_t)vcgtq_f64(v149.val[1], (float64x2_t)v70);
            v89 = (int32x4_t)vcgtq_f64(v151.val[1], (float64x2_t)v74);
            v90 = vdivq_f64(vaddq_f64(v142, v77), vaddq_f64(v79, v149.val[0]));
            v149.val[0] = (float64x2_t)vcgtq_f64(v150.val[1], (float64x2_t)v74);
            v91 = (int32x4_t)vcgtq_f64(v86, (float64x2_t)v74);
            v92 = (unsigned __int128)vld2q_f64(v72);
            v149.val[1] = (float64x2_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v150.val[0], v149.val[1]), (int32x4_t)vcgtq_f64(v152.val[0], v151.val[0]));
            v151.val[0] = (float64x2_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v150.val[1], v151.val[1]), (int32x4_t)vcgtq_f64(v152.val[1], v85));
            v64 = vsubq_s32(v64, (int32x4_t)vmvnq_s8(veorq_s8((int8x16_t)vuzp1q_s32(v88, v87), (int8x16_t)v149.val[1])));
            v62 = vsubq_s32(v62, (int32x4_t)veorq_s8((int8x16_t)v149.val[1], (int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v150.val[0], (float64x2_t)v70), (int32x4_t)vcgtq_f64(v152.val[0], (float64x2_t)v73))));
            v65 = vsubq_s32(v65, (int32x4_t)vmvnq_s8(veorq_s8((int8x16_t)vuzp1q_s32(v89, (int32x4_t)vcgtq_f64(v85, (float64x2_t)v92)), (int8x16_t)v151.val[0])));
            v63 = vsubq_s32(v63, (int32x4_t)veorq_s8((int8x16_t)v151.val[0], (int8x16_t)vuzp1q_s32((int32x4_t)v149.val[0], (int32x4_t)vcgtq_f64(v152.val[1], (float64x2_t)v92))));
            v93 = vsubq_s32(v148, (int32x4_t)veorq_s8((int8x16_t)v149.val[1], (int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v83, (float64x2_t)v70), (int32x4_t)vcgtq_f64(v84, (float64x2_t)v73))));
            v57 = v93;
            v61 = vsubq_s32(v61, (int32x4_t)veorq_s8((int8x16_t)v151.val[0], (int8x16_t)vuzp1q_s32(v91, (int32x4_t)vcgtq_f64(v90, (float64x2_t)v92))));
            v59 += 16;
            v58 += 16;
            v60 -= 8;
          }
          while (v60);
          v56 = vaddvq_s32(vaddq_s32(v65, v64));
          v55 = vaddvq_s32(vaddq_s32(v63, v62));
          v54 = vaddvq_s32(vaddq_s32(v61, v93));
          v53 = v25;
          v52 = v128;
          v49 = *(double *)(a4 + 40);
          v50 = v126;
          v51 = v127;
          v18 = *(double *)(a4 + 80);
          v14 = *(double *)a4;
          v31 = v129;
          v43 = v130;
          v19 = *(double *)(a4 + 112);
          v17 = *(double *)(a4 + 88);
          v21 = *(double *)(a4 + 136);
          v20 = *(double *)(a4 + 120);
          v23 = v124;
          v22 = v125;
          v26 = v123;
          v27 = v146;
          v6 = v147;
          v28 = v122;
          v33 = v120;
          v32 = v121;
          v34 = v119;
        }
        else
        {
          v49 = v7;
          v50 = v12;
          v51 = v10;
          v52 = v9;
          v53 = 0;
          v54 = 0;
          v55 = 0;
          v56 = 0;
        }
        v94 = a3 - v53;
        v95 = 16 * v53;
        v96 = (double *)(v38 + 16 * v53);
        v97 = (double *)(v39 + v95);
        do
        {
          v98 = *(v97 - 1);
          v99 = *v96;
          v96 += 2;
          v100 = *v97 * *(double *)&v6 + v138 * v98;
          v101 = *v97 * v27 + v26 * v98;
          v102 = (v137 + v100) / (v32 + v101);
          v103 = (v136 + v100) / (v33 + v101);
          v104 = v102 < v103;
          v56 += (v99 >= v102) ^ v104;
          v55 += v104 ^ (v99 < v103);
          v54 += v104 ^ (v99 < (v135 + v100) / (v34 + v101));
          v97 += 2;
          --v94;
        }
        while (v94);
        v12 = v50;
        v9 = v52;
        v10 = v51;
        v105 = v50 * (double)(v54 - v55) + (double)v56 * v52 + (double)v55 * v51;
        if (v105 < v31)
        {
          v7 = v49;
          v41 = v49 - v43;
          if (v49 - v43 < 0.0)
            v41 = -(v49 - v43);
          v133 = v41;
          v31 = v105;
        }
        else
        {
          v7 = v49;
          if (v105 == v31)
          {
            v106 = v49 - v43;
            if (v49 - v43 < 0.0)
              v106 = -(v49 - v43);
            v107 = v133;
            v108 = v106 < v133;
            if (v106 < v133)
              v107 = v106;
            v133 = v107;
            if (!v108)
              v43 = v134;
          }
          else
          {
            v43 = v134;
          }
        }
        v29 = v132;
        v13 = *(double *)(a4 + 8);
        v30 = v131;
        v40 = v43;
      }
      while (v11++ != v8);
    }
  }
  v109 = *(_OWORD *)(a4 + 112);
  *(_OWORD *)(a6 + 96) = *(_OWORD *)(a4 + 96);
  *(_OWORD *)(a6 + 112) = v109;
  *(_OWORD *)(a6 + 128) = *(_OWORD *)(a4 + 128);
  v110 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(a6 + 32) = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(a6 + 48) = v110;
  v111 = *(_OWORD *)(a4 + 80);
  *(_OWORD *)(a6 + 64) = *(_OWORD *)(a4 + 64);
  *(_OWORD *)(a6 + 80) = v111;
  result = *(__n128 *)(a4 + 16);
  *(_OWORD *)a6 = *(_OWORD *)a4;
  *(__n128 *)(a6 + 16) = result;
  *(double *)(a6 + 40) = v43;
  return result;
}

void sub_20B6773DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B677434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_20B677498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_20B6774F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_20B67753C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B6775C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_20B6776B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_20B6778F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B677AFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B677D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_20B677E40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B677ED8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B678108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  void *v5;
  void *v6;
  va_list va;

  va_start(va, a4);

  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_20B6782EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B678500(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  va_list va;

  va_start(va, a2);

  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  objc_sync_exit(v2);

  _Unwind_Resume(a1);
}

void sub_20B678578()
{
  JUMPOUT(0x20B678564);
}

void sub_20B678D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);

  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  objc_sync_exit(v7);

  _Unwind_Resume(a1);
}

void sub_20B678E80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)ADStereoExecutor;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_20B679020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)ADFlowFrameInput;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_20B67922C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)ADFlowFrameOutput;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

double CalcDirectZPlaneHomographyAtoBCoords(double *a1, double *a2, double a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double result;

  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  v8 = a1[6];
  v9 = a1[7];
  v10 = a1[10];
  v11 = a1[11];
  v12 = a1[14];
  v13 = a1[15];
  v14 = a1[17];
  v15 = v3 * v8 - v5 * v12;
  v16 = v3 * v10 - v7 * v12;
  v17 = v3 * v9 - v5 * v13;
  v18 = v3 * v11 - v7 * v13;
  v19 = v6 * v9 + v8 * v4;
  v20 = -(*a1 * v3);
  v21 = v6 * v13 + v12 * v4 + *a1 * a1[16];
  v22 = *a1 * (v5 * v14 - v3 * a1[9]) / a3 + v20 * a1[8] - v3 * v19 + v5 * v21;
  v23 = *a1 * (v7 * v14 - v3 * a1[13]) / a3 + v20 * a1[12] - v3 * (v6 * v11 + v10 * v4) + v7 * v21;
  v24 = *a1 * v14;
  *a2 = v15;
  a2[1] = v17;
  a2[2] = v22;
  a2[3] = v16;
  a2[4] = v18;
  a2[5] = v23;
  result = v24 / a3 + v21;
  a2[6] = -v12;
  a2[7] = -v13;
  a2[8] = result;
  return result;
}

double *FundamentalDistortionError_MeanValPlusGradient(uint64_t a1, uint64_t a2, int a3, double *a4, uint64_t a5, __int128 *a6, double *a7, double *a8)
{
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  double *result;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  __int128 v58;
  __int128 v59;
  double v60;
  __int128 v61;
  double v62;
  double v63;
  double v64;
  const double *v65;
  const double *v66;
  uint64_t v67;
  const double *v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  const double *v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  uint64_t v262;
  uint64_t v263;
  double *v264;
  double *v265;
  double v266;
  double v267;
  double v268;
  double v269;
  double v270;
  double v271;
  double v272;
  double v273;
  double v274;
  double v275;
  double v276;
  __int128 v277;
  __int128 v278;
  double v279;
  double v280;
  double v281;
  double v282;
  double v283;
  __int128 v284;
  double v285;
  double v286;
  double v287;
  double v288;
  double v289;
  double v290;
  double v291;
  double v292;
  double v293;
  double v294;
  double v295;
  double v296;
  double v297;
  double v298;
  double v299;
  double v300;
  double v301;
  double v302;
  double v303;
  double v304;
  double v305;
  double v306;
  double v307;
  double v308;
  double v309;
  double v310;
  double v311;
  double v312;
  double v313;
  double v314;
  double v315;
  double v316;
  double v317;
  double v318;
  double v319;
  double v320;
  double v321;
  double v322;
  double v323;
  double v324;
  double v325;
  double v326;
  double v327;
  double v328;
  double v329;
  double v330;
  double v331;
  double v332;
  double v333;
  double v334;
  double v335;
  double v336;
  double v337;
  double v338;
  double v339;
  double v340;
  double v341;
  double v342;
  double v343;
  double v344;
  double v345;
  double v346;
  double v347;
  double v348;
  double v349;
  double v350;
  double v351;
  double v352;
  double v353;
  double v354;
  double v355;
  __int128 v356;
  float64x2_t v357;
  float64x2_t v358;
  float64x2_t v359;
  float64x2_t v360;
  float64x2_t v361;
  float64x2_t v362;
  float64x2_t v363;
  float64x2_t v364;
  float64x2_t v365;
  float64x2_t v366;
  float64x2_t v367;
  float64x2_t v368;
  float64x2_t v369;
  float64x2_t v370;
  float64x2_t v371;
  float64x2_t v372;
  float64x2_t v373;
  float64x2_t v374;
  float64x2_t v375;
  float64x2_t v376;
  float64x2_t v377;
  float64x2_t v378;
  float64x2_t v379;
  float64x2_t v380;
  float64x2_t v381;
  float64x2_t v382;
  float64x2_t v383;
  float64x2_t v384;
  float64x2_t v385;
  float64x2_t v386;
  float64x2_t v387;
  float64x2_t v388;
  float64x2_t v389;
  float64x2_t v390;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v394;
  float64x2_t v395;
  float64x2_t v396;
  float64x2_t v397;
  float64x2_t v398;
  float64x2_t v399;
  float64x2_t v400;
  float64x2_t v401;
  float64x2_t v402;
  __int128 v403;
  __int128 v404;
  uint64_t v405;
  double v406;
  double v407;
  double v408;
  double v409;
  double v410;
  double v411;
  double v412;
  double v413;
  double v414;
  double v415;
  double v416;
  double v417;
  double v418;
  double v419;
  double v420;
  double v421;
  double v422;
  double v423;
  double v424;
  double v425;
  double v426;
  double v427;
  double v428;
  double v429;
  double v430;
  double v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  float64x2_t v441;
  float64x2_t v442;
  float64x2_t v443;
  float64x2_t v444;
  float64x2_t v445;
  float64x2_t v446;
  float64x2_t v447;
  float64x2_t v448;
  float64x2_t v449;
  float64x2_t v450;
  float64x2_t v451;
  float64x2_t v452;
  float64x2_t v453;
  float64x2_t v454;
  float64x2_t v455;
  float64x2_t v456;
  float64x2_t v457;
  float64x2_t v458;
  float64x2_t v459;
  float64x2_t v460;
  float64x2_t v461;
  float64x2_t v462;
  float64x2_t v463;
  float64x2_t v464;
  float64x2_t v465;
  float64x2_t v466;
  float64x2_t v467;
  float64x2_t v468;
  float64x2_t v469;
  float64x2_t v470;
  float64x2_t v471;
  float64x2_t v472;
  float64x2_t v473;
  double v474;
  double v475;
  float64x2_t v476;
  float64x2_t v477;
  float64x2_t v478;
  float64x2_t v479;
  float64x2_t v480;
  float64x2_t v481;
  float64x2_t v482;
  float64x2_t v483;
  float64x2_t v484;
  float64x2_t v485;
  float64x2_t v486;
  float64x2_t v487;
  float64x2_t v488;
  float64x2_t v489;
  float64x2_t v490;
  float64x2_t v491;
  float64x2_t v492;
  float64x2_t v493;
  float64x2_t v494;
  float64x2_t v495;
  float64x2_t v496;
  float64x2_t v497;
  float64x2_t v498;
  float64x2_t v499;
  float64x2_t v500;
  float64x2_t v501;
  double v502;
  double v503;
  double v504;
  double v505;
  double v506;
  double v507;
  double v508;
  double v509;
  uint64_t v510;
  float64x2_t v511;
  float64x2_t v512;
  float64x2_t v513;
  float64x2_t v514;
  double v515;
  double v516;
  double v517;
  double v518;
  double v519;
  double v520;
  double v521;
  double v522;
  double v523;
  double v524;
  double v525;
  double v526;
  double v527;
  double v528;
  double v529;
  double v530;
  double v531;
  double v532;
  double v533;
  double v534;
  double v535;
  double v536;
  double v537;
  _OWORD v538[9];
  __int128 v539;
  __int128 v540;
  __int128 v541;
  __int128 v542;
  __int128 v543;
  __int128 v544;
  __int128 v545;
  __int128 v546;
  __int128 v547;
  __int128 v548;
  __int128 v549;
  __int128 v550;
  __int128 v551;
  __int128 v552;
  __int128 v553;
  __int128 v554;
  double v555;
  float64x2x2_t v556;
  float64x2x2_t v557;
  float64x2x2_t v558;
  float64x2x2_t v559;

  v555 = 0.0;
  v554 = 0u;
  v553 = 0u;
  v552 = 0u;
  v551 = 0u;
  v550 = 0u;
  v549 = 0u;
  v548 = 0u;
  v547 = 0u;
  v546 = 0u;
  v545 = 0u;
  v544 = 0u;
  v543 = 0u;
  v542 = 0u;
  v541 = 0u;
  v540 = 0u;
  v539 = 0u;
  v16 = a6[7];
  v538[6] = a6[6];
  v538[7] = v16;
  v538[8] = a6[8];
  v17 = a6[3];
  v538[2] = a6[2];
  v538[3] = v17;
  v18 = a6[4];
  v538[5] = a6[5];
  v538[4] = v18;
  v19 = *a6;
  v538[1] = a6[1];
  v538[0] = v19;
  result = FundamentalEpipolarError_precomputeFundamental((double *)v538, 1, (uint64_t)&v539);
  if (a1 && a2 && a3 >= 1 && a6 && a7 && a8)
  {
    v25 = *((uint64_t *)a4 + 18);
    v24 = *((uint64_t *)a4 + 19);
    v26 = *(uint64_t *)(a5 + 136);
    v27 = a4[1] * *a4;
    v440 = *((uint64_t *)a4 + 12);
    v28 = a4[4] + v27 * *(double *)&v440;
    v515 = a4[13];
    v29 = a4[5] + v27 * v515;
    v439 = *((uint64_t *)a4 + 14);
    v30 = a4[6] + v27 * *(double *)&v439;
    v438 = *((uint64_t *)a4 + 15);
    v31 = a4[7] + v27 * *(double *)&v438;
    v437 = *((uint64_t *)a4 + 16);
    v32 = a4[8] + v27 * *(double *)&v437;
    v436 = *((uint64_t *)a4 + 17);
    v33 = a4[9] + v27 * *(double *)&v436;
    v34 = a4[10] + v27 * *(double *)&v25;
    v35 = a4[11] + v27 * *(double *)&v24;
    v36 = *(double *)(a5 + 8) * *(double *)a5;
    v435 = *(uint64_t *)(a5 + 96);
    v37 = *(double *)(a5 + 32) + v36 * *(double *)&v435;
    v517 = *(double *)(a5 + 104);
    v434 = *(uint64_t *)(a5 + 112);
    v38 = *(double *)(a5 + 48) + v36 * *(double *)&v434;
    v433 = *(uint64_t *)(a5 + 120);
    v39 = *(double *)(a5 + 56) + v36 * *(double *)&v433;
    v432 = *(uint64_t *)(a5 + 128);
    v40 = *(double *)(a5 + 64) + v36 * *(double *)&v432;
    v41 = *(double *)(a5 + 72) + v36 * *(double *)&v26;
    v42 = *(uint64_t *)(a5 + 144);
    v43 = *(uint64_t *)(a5 + 152);
    v44 = *(double *)(a5 + 80) + v36 * *(double *)&v42;
    v45 = *(double *)(a5 + 88) + v36 * *(double *)&v43;
    v518 = v30 * 4.0;
    v505 = v38 * 4.0;
    v431 = v31 * 6.0;
    v430 = v39 * 6.0;
    v429 = v32 * 8.0;
    v428 = v33 * 10.0;
    v427 = v34 * 12.0;
    v426 = v35 * 14.0;
    v425 = v45 * 14.0;
    *(_QWORD *)&v23 = *(_QWORD *)(a5 + 16);
    v520 = *a4;
    v504 = -(v520 * v520);
    v503 = -(*(double *)a5 * *(double *)a5);
    v424 = v29 + v29;
    v516 = *(double *)(a5 + 40) + v36 * v517;
    v423 = v516 + v516;
    v510 = *((uint64_t *)a4 + 2);
    v509 = -*(double *)&v510;
    v46 = *((uint64_t *)a4 + 3);
    v506 = -*(double *)&v46;
    v404 = v23;
    v405 = *(uint64_t *)(a5 + 24);
    v508 = -*(double *)&v23;
    v507 = -*(double *)&v405;
    *(_QWORD *)&v21 = v543;
    *(_QWORD *)&v22 = v544;
    v403 = v22;
    v519 = v29;
    v422 = v28;
    v421 = v30;
    v420 = v31;
    v419 = v32;
    v418 = v33;
    v417 = v34;
    v416 = v35;
    v415 = v37;
    v414 = v38;
    v412 = v40;
    v413 = v39;
    v411 = v41;
    v410 = v44;
    v408 = v40 * 8.0;
    v409 = v45;
    v406 = v44 * 12.0;
    v407 = v41 * 10.0;
    v502 = *(double *)&v46;
    v521 = *(double *)a5;
    if (a3 > 3)
    {
      v401 = (float64x2_t)vdupq_lane_s64(v46, 0);
      v402 = (float64x2_t)vdupq_lane_s64(v510, 0);
      v399 = (float64x2_t)vdupq_lane_s64(v405, 0);
      v400 = (float64x2_t)vdupq_lane_s64(v23, 0);
      v501 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v28, 0);
      v500 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v30, 0);
      v499 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v31, 0);
      v498 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v32, 0);
      v497 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v33, 0);
      v496 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v34, 0);
      v495 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v35, 0);
      v494 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v37, 0);
      v398 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v38, 0);
      v493 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v39, 0);
      v397 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v40, 0);
      v492 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v41, 0);
      v491 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v44, 0);
      v395 = (float64x2_t)vdupq_lane_s64(*((uint64_t *)&v539 + 1), 0);
      v396 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v45, 0);
      v356 = v21;
      v393 = (float64x2_t)vdupq_lane_s64(v540, 0);
      v394 = (float64x2_t)vdupq_lane_s64(v539, 0);
      v391 = (float64x2_t)vdupq_lane_s64(*((uint64_t *)&v541 + 1), 0);
      v392 = (float64x2_t)vdupq_lane_s64(*((uint64_t *)&v540 + 1), 0);
      v389 = (float64x2_t)vdupq_lane_s64(v542, 0);
      v390 = (float64x2_t)vdupq_lane_s64(*((uint64_t *)&v542 + 1), 0);
      v490 = (float64x2_t)vdupq_lane_s64(v440, 0);
      v489 = (float64x2_t)vdupq_lane_s64(v439, 0);
      v488 = (float64x2_t)vdupq_lane_s64(v438, 0);
      v487 = (float64x2_t)vdupq_lane_s64(v437, 0);
      v47 = a3 & 0xFFFFFFFC;
      v387 = (float64x2_t)vdupq_lane_s64(v436, 0);
      v388 = (float64x2_t)vdupq_lane_s64(v543, 0);
      v486 = (float64x2_t)vdupq_lane_s64(v25, 0);
      v65 = (const double *)(a2 + 32);
      v66 = (const double *)(a1 + 32);
      v485 = (float64x2_t)vdupq_lane_s64(v24, 0);
      v385 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v431, 0);
      v386 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v424, 0);
      v383 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v428, 0);
      v384 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v429, 0);
      v381 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v426, 0);
      v382 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v427, 0);
      v484 = (float64x2_t)vdupq_lane_s64(v435, 0);
      v483 = (float64x2_t)vdupq_lane_s64(v434, 0);
      v482 = (float64x2_t)vdupq_lane_s64(v433, 0);
      v481 = (float64x2_t)vdupq_lane_s64(v432, 0);
      v379 = (float64x2_t)vdupq_lane_s64(v42, 0);
      v380 = (float64x2_t)vdupq_lane_s64(v26, 0);
      v480 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v423, 0);
      v479 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v430, 0);
      v377 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v40 * 8.0), 0);
      v378 = (float64x2_t)vdupq_lane_s64(v43, 0);
      v478 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v41 * 10.0), 0);
      v477 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v44 * 12.0), 0);
      v67 = v47;
      v476 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v425, 0);
      v54 = 0.0;
      v375 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v506, 0);
      v376 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v509, 0);
      v373 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v507, 0);
      v374 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v508, 0);
      v55 = 0.0;
      v52 = 0.0;
      v371 = (float64x2_t)vdupq_lane_s64(*((uint64_t *)&v547 + 1), 0);
      v372 = (float64x2_t)vdupq_lane_s64(*((uint64_t *)&v546 + 1), 0);
      v48 = 0.0;
      v369 = (float64x2_t)vdupq_lane_s64(v549, 0);
      v370 = (float64x2_t)vdupq_lane_s64(v548, 0);
      v49 = 0.0;
      v367 = (float64x2_t)vdupq_lane_s64(*((uint64_t *)&v550 + 1), 0);
      v368 = (float64x2_t)vdupq_lane_s64(*((uint64_t *)&v549 + 1), 0);
      v50 = 0.0;
      v365 = (float64x2_t)vdupq_lane_s64(v552, 0);
      v366 = (float64x2_t)vdupq_lane_s64(v551, 0);
      v53 = 0.0;
      v363 = (float64x2_t)vdupq_lane_s64(*((uint64_t *)&v553 + 1), 0);
      v364 = (float64x2_t)vdupq_lane_s64(*((uint64_t *)&v552 + 1), 0);
      v361 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v555, 0);
      v362 = (float64x2_t)vdupq_lane_s64(v554, 0);
      v62 = 0.0;
      v64 = 0.0;
      v359 = (float64x2_t)vdupq_lane_s64(v546, 0);
      v360 = (float64x2_t)vdupq_lane_s64(v545, 0);
      v63 = 0.0;
      v51 = 0.0;
      v357 = (float64x2_t)vdupq_lane_s64(*((uint64_t *)&v544 + 1), 0);
      v358 = (float64x2_t)vdupq_lane_s64(*((uint64_t *)&v543 + 1), 0);
      do
      {
        v522 = v52;
        v532 = v53;
        v536 = v54;
        v528 = v49;
        v526 = v48;
        v529 = v64;
        v524 = v55;
        v530 = v51;
        v474 = v62;
        v475 = v63;
        v534 = v50;
        v68 = v66 - 4;
        v559 = vld2q_f64(v68);
        v557 = vld2q_f64(v66);
        v511 = vsubq_f64(v557.val[0], v402);
        v69 = vsubq_f64(v559.val[0], v402);
        v70 = vsubq_f64(v559.val[1], v401);
        v513 = vsubq_f64(v557.val[1], v401);
        v71 = vmulq_n_f64(vsqrtq_f64(vmlaq_f64(vmulq_f64(v70, v70), v69, v69)), v520);
        v72 = vmulq_n_f64(vsqrtq_f64(vmlaq_f64(vmulq_f64(v513, v513), v511, v511)), v520);
        v455 = vmulq_f64(v72, v72);
        v73 = vmulq_f64(v71, v71);
        v74 = vmulq_f64(v71, v73);
        v75 = vmulq_f64(v71, v74);
        v76 = vmulq_f64(v71, v75);
        v77 = vmulq_f64(v71, v76);
        v78 = vmulq_f64(v71, v77);
        v79 = vmulq_f64(v71, v78);
        v80 = vmulq_f64(v71, v79);
        v81 = vmlaq_f64(vaddq_f64(v501, vmulq_n_f64(v73, v29)), v75, v500);
        v82 = vmulq_f64(v71, v80);
        v83 = vmlaq_f64(vaddq_f64(v490, vmulq_n_f64(v73, v515)), v75, v489);
        v84 = vmulq_f64(v71, v82);
        v85 = vmulq_f64(v71, v84);
        v86 = vmulq_f64(v71, v85);
        v87 = vmlaq_f64(vmlaq_f64(vmlaq_f64(v81, v77, v499), v79, v498), v82, v497);
        v88 = vmlaq_f64(vmlaq_f64(vmlaq_f64(v83, v77, v488), v79, v487), v82, v387);
        v89 = vmulq_f64(v71, v86);
        v90 = vmlaq_f64(vmlaq_f64(v87, v85, v496), v89, v495);
        v91 = (float64x2_t)vdupq_n_s64(0x4059000000000000uLL);
        v92 = vmlaq_f64(vmlaq_f64(v88, v85, v486), v89, v485);
        v452 = vmulq_f64(v72, v455);
        __asm { FMOV            V8.2D, #1.0 }
        v98 = vdivq_f64(_Q8, vaddq_f64(vdivq_f64(v90, v91), _Q8));
        v99 = vsubq_f64(_Q8, v98);
        v100 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v74, v518), v71, v386), v76, v385), v78, v384), v80, v383), v84, v382), v86, v381);
        v101 = vaddq_f64(v90, v91);
        v472 = vmlaq_f64(vmulq_n_f64(v99, *(double *)&v510), v559.val[0], v98);
        v442 = (float64x2_t)vdupq_n_s64(0xC059000000000000);
        v102 = vdivq_f64(v442, vmulq_f64(v101, v101));
        v103 = vmulq_f64(vmulq_n_f64(v92, v520), v102);
        v470 = vmlaq_f64(vmulq_n_f64(v99, v502), v559.val[1], v98);
        v104 = vmulq_f64(vmulq_f64(vdivq_f64(vmulq_n_f64(v69, v504), v71), v100), v102);
        v105 = vmulq_f64(vmulq_f64(vdivq_f64(vmulq_n_f64(v70, v504), v71), v100), v102);
        v466 = vmlaq_f64(vmulq_n_f64(v103, v509), v559.val[0], v103);
        v462 = vmlaq_f64(vmulq_n_f64(v103, v506), v559.val[1], v103);
        v464 = vmlaq_f64(vmlaq_f64(v99, v104, v376), v559.val[0], v104);
        v460 = vmlaq_f64(vmulq_n_f64(v104, v506), v559.val[1], v104);
        v458 = vmlaq_f64(vmulq_n_f64(v105, v509), v559.val[0], v105);
        v468 = vmlaq_f64(vmlaq_f64(v99, v105, v375), v559.val[1], v105);
        v106 = vmulq_f64(v72, v452);
        v107 = vmulq_f64(v72, v106);
        v108 = vmlaq_f64(vaddq_f64(v501, vmulq_n_f64(v455, v519)), v106, v500);
        v109 = vmlaq_f64(vaddq_f64(v490, vmulq_n_f64(v455, v515)), v106, v489);
        v110 = vmulq_f64(v72, v107);
        v111 = vmlaq_f64(v108, v110, v499);
        v112 = vmlaq_f64(v109, v110, v488);
        v113 = vmulq_f64(v72, v110);
        v114 = vmulq_f64(v72, v113);
        v115 = vmlaq_f64(v111, v114, v498);
        v116 = vmlaq_f64(v112, v114, v487);
        v117 = vmulq_f64(v72, v114);
        v118 = vmulq_f64(v72, v117);
        v119 = vmlaq_f64(v115, v118, v497);
        v120 = vmlaq_f64(v116, v118, v387);
        v121 = vmulq_f64(v72, v118);
        v122 = vmulq_f64(v72, v121);
        v123 = vmlaq_f64(v119, v122, v496);
        v124 = vdivq_f64(vmulq_n_f64(v511, v504), v72);
        v125 = vmlaq_f64(v120, v122, v486);
        v126 = vmulq_f64(v72, v122);
        v127 = vdivq_f64(vmulq_n_f64(v513, v504), v72);
        v128 = vmlaq_f64(vmulq_n_f64(v452, v518), v72, v386);
        v129 = vmulq_f64(v72, v126);
        v130 = vmlaq_f64(v123, v129, v495);
        v131 = vmlaq_f64(vmlaq_f64(vmlaq_f64(v128, v107, v385), v113, v384), v117, v383);
        v132 = vdivq_f64(_Q8, vaddq_f64(vdivq_f64(v130, v91), _Q8));
        v133 = vsubq_f64(_Q8, v132);
        v134 = vmlaq_f64(vmlaq_f64(v131, v121, v382), v126, v381);
        v514 = vmlaq_f64(vmulq_n_f64(v133, *(double *)&v510), v557.val[0], v132);
        v135 = vaddq_f64(v130, v91);
        v512 = vmlaq_f64(vmulq_n_f64(v133, v502), v557.val[1], v132);
        v136 = vdivq_f64(v442, vmulq_f64(v135, v135));
        v137 = vmulq_f64(vmulq_n_f64(vmlaq_f64(v125, v129, v485), v520), v136);
        v138 = vmulq_f64(vmulq_f64(v124, v134), v136);
        v139 = vmulq_f64(vmulq_f64(v127, v134), v136);
        v456 = vmlaq_f64(vmulq_n_f64(v137, v509), v557.val[0], v137);
        v453 = vmlaq_f64(vmulq_n_f64(v137, v506), v557.val[1], v137);
        v451 = vmlaq_f64(vmlaq_f64(v133, v138, v376), v557.val[0], v138);
        v449 = vmlaq_f64(vmulq_n_f64(v138, v506), v557.val[1], v138);
        v450 = vmlaq_f64(vmulq_n_f64(v139, v509), v557.val[0], v139);
        v140 = vmlaq_f64(vmlaq_f64(v133, v139, v375), v557.val[1], v139);
        v141 = v65 - 4;
        v558 = vld2q_f64(v141);
        v142 = vsubq_f64(v558.val[1], v399);
        v143 = vsubq_f64(v558.val[0], v400);
        v144 = vmulq_n_f64(vsqrtq_f64(vmlaq_f64(vmulq_f64(v142, v142), v143, v143)), v521);
        v145 = vmulq_f64(v144, v144);
        v146 = vmulq_f64(v144, v145);
        v147 = vmulq_f64(v144, v146);
        v148 = vmlaq_f64(vaddq_f64(v494, vmulq_n_f64(v145, v516)), v147, v398);
        v149 = vmlaq_f64(vaddq_f64(v484, vmulq_n_f64(v145, v517)), v147, v483);
        v150 = vmulq_f64(v144, v147);
        v151 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v146, v505), v144, v480), v150, v479);
        v152 = vmulq_f64(v144, v150);
        v153 = vmlaq_f64(v148, v152, v493);
        v154 = vmlaq_f64(v149, v152, v482);
        v155 = vmulq_f64(v144, v152);
        v156 = vmlaq_f64(v151, v155, v377);
        v157 = vmulq_f64(v144, v155);
        v158 = vmlaq_f64(v153, v157, v397);
        v159 = vmlaq_f64(v154, v157, v481);
        v160 = vmulq_f64(v144, v157);
        v161 = vmlaq_f64(v156, v160, v478);
        v162 = vmulq_f64(v144, v160);
        v163 = vmlaq_f64(v158, v162, v492);
        v164 = vmlaq_f64(v159, v162, v380);
        v165 = vmulq_f64(v144, v162);
        v559.val[0] = vmulq_f64(v144, v165);
        v166 = vmlaq_f64(v163, v559.val[0], v491);
        v167 = vmlaq_f64(v164, v559.val[0], v379);
        v559.val[0] = vmulq_f64(v144, v559.val[0]);
        v168 = vdivq_f64(vmulq_n_f64(v143, v503), v144);
        v169 = vdivq_f64(vmulq_n_f64(v142, v503), v144);
        v170 = vmulq_f64(v144, v559.val[0]);
        v171 = vmlaq_f64(v166, v170, v396);
        v172 = vmlaq_f64(v167, v170, v378);
        v173 = vmlaq_f64(vmlaq_f64(v161, v165, v477), v559.val[0], v476);
        v174 = vmulq_f64(v168, v173);
        v175 = vmulq_f64(v169, v173);
        v176 = vdivq_f64(_Q8, vaddq_f64(vdivq_f64(v171, v91), _Q8));
        v177 = vsubq_f64(_Q8, v176);
        v559.val[0] = vmlaq_f64(vmulq_n_f64(v177, *(double *)&v404), v558.val[0], v176);
        v178 = vmlaq_f64(vmulq_n_f64(v177, *(double *)&v405), v558.val[1], v176);
        v179 = vmulq_n_f64(v172, v521);
        v180 = vaddq_f64(v171, v91);
        v181 = vdivq_f64(v442, vmulq_f64(v180, v180));
        v182 = vmulq_f64(v179, v181);
        v183 = vmulq_f64(v174, v181);
        v184 = vmulq_f64(v175, v181);
        v448 = vmlaq_f64(vmulq_n_f64(v182, v508), v558.val[0], v182);
        v447 = vmlaq_f64(vmulq_n_f64(v182, v507), v558.val[1], v182);
        v446 = vmlaq_f64(vmlaq_f64(v177, v183, v374), v558.val[0], v183);
        v445 = vmlaq_f64(vmulq_n_f64(v183, v507), v558.val[1], v183);
        v444 = vmlaq_f64(vmulq_n_f64(v184, v508), v558.val[0], v184);
        v185 = vmlaq_f64(vmlaq_f64(v177, v184, v373), v558.val[1], v184);
        v556 = vld2q_f64(v65);
        v186 = vsubq_f64(v556.val[0], v400);
        v187 = vsubq_f64(v556.val[1], v399);
        v188 = vmulq_n_f64(vsqrtq_f64(vmlaq_f64(vmulq_f64(v187, v187), v186, v186)), v521);
        v189 = vmulq_f64(v188, v188);
        v558.val[1] = vmulq_f64(v188, v189);
        v190 = vmulq_f64(v188, v558.val[1]);
        v558.val[0] = vmlaq_f64(vaddq_f64(v494, vmulq_n_f64(v189, v516)), v190, v398);
        v191 = vmlaq_f64(vaddq_f64(v484, vmulq_n_f64(v189, v517)), v190, v483);
        v192 = vmulq_f64(v188, v190);
        v558.val[1] = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v558.val[1], v505), v188, v480), v192, v479);
        v193 = vmulq_f64(v188, v192);
        v558.val[0] = vmlaq_f64(v558.val[0], v193, v493);
        v194 = vmlaq_f64(v191, v193, v482);
        v195 = vmulq_f64(v188, v193);
        v196 = vmulq_f64(v188, v195);
        v558.val[0] = vmlaq_f64(v558.val[0], v196, v397);
        v197 = vmlaq_f64(v194, v196, v481);
        v198 = vmulq_f64(v188, v196);
        v199 = vmulq_f64(v188, v198);
        v558.val[0] = vmlaq_f64(v558.val[0], v199, v492);
        v200 = vmlaq_f64(v197, v199, v380);
        v201 = vmulq_f64(v188, v199);
        v202 = vmulq_f64(v188, v201);
        v558.val[0] = vmlaq_f64(v558.val[0], v202, v491);
        v203 = vmlaq_f64(v200, v202, v379);
        v204 = vmulq_f64(v188, v202);
        v205 = vdivq_f64(vmulq_n_f64(v186, v503), v188);
        v206 = vdivq_f64(vmulq_n_f64(v187, v503), v188);
        v207 = vmulq_f64(v188, v204);
        v558.val[0] = vmlaq_f64(v558.val[0], v207, v396);
        v208 = vmlaq_f64(v203, v207, v378);
        v558.val[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v558.val[1], v195, v377), v198, v478), v201, v477), v204, v476);
        v209 = vdivq_f64(_Q8, vaddq_f64(vdivq_f64(v558.val[0], v91), _Q8));
        v210 = vsubq_f64(_Q8, v209);
        v211 = vmlaq_f64(vmulq_n_f64(v210, *(double *)&v404), v556.val[0], v209);
        v212 = vmlaq_f64(vmulq_n_f64(v210, *(double *)&v405), v556.val[1], v209);
        v213 = vmulq_f64(v205, v558.val[1]);
        v214 = vmulq_f64(v206, v558.val[1]);
        v215 = vaddq_f64(v558.val[0], v91);
        v216 = vdivq_f64(v442, vmulq_f64(v215, v215));
        v217 = vmulq_f64(vmulq_n_f64(v208, v521), v216);
        v218 = vmulq_f64(v213, v216);
        v219 = vmulq_f64(v214, v216);
        v558.val[0] = vmlaq_f64(vmulq_n_f64(v217, v508), v556.val[0], v217);
        v220 = vmlaq_f64(vmulq_n_f64(v217, v507), v556.val[1], v217);
        v558.val[1] = vmlaq_f64(vmlaq_f64(v210, v218, v374), v556.val[0], v218);
        v221 = vmlaq_f64(vmulq_n_f64(v218, v507), v556.val[1], v218);
        v222 = vmlaq_f64(vmulq_n_f64(v219, v508), v556.val[0], v219);
        v223 = vmlaq_f64(vmlaq_f64(v210, v219, v373), v556.val[1], v219);
        v556.val[0] = vaddq_f64(v389, vmlaq_f64(vmulq_n_f64(v178, *((double *)&v540 + 1)), v394, v559.val[0]));
        v556.val[1] = vaddq_f64(v390, vmlaq_f64(vmulq_n_f64(v178, *(double *)&v541), v395, v559.val[0]));
        v443 = vmlaq_f64(vmulq_f64(v462, v556.val[1]), v466, v556.val[0]);
        v441 = vmlaq_f64(vmulq_f64(v460, v556.val[1]), v464, v556.val[0]);
        v459 = vmlaq_f64(vmulq_f64(v468, v556.val[1]), v458, v556.val[0]);
        v224 = vaddq_f64(v389, vmlaq_f64(vmulq_n_f64(v212, *((double *)&v540 + 1)), v394, v211));
        v556.val[1] = vaddq_f64(v390, vmlaq_f64(vmulq_n_f64(v212, *(double *)&v541), v395, v211));
        v469 = vmlaq_f64(vmulq_f64(v453, v556.val[1]), v456, v224);
        v467 = vmlaq_f64(vmulq_f64(v449, v556.val[1]), v451, v224);
        v465 = vmlaq_f64(vmulq_f64(v140, v556.val[1]), v450, v224);
        v225 = vaddq_f64(v393, vmlaq_f64(vmulq_n_f64(v512, *((double *)&v539 + 1)), v514, v394));
        v226 = vaddq_f64(v391, vmlaq_f64(vmulq_n_f64(v512, *(double *)&v541), v514, v392));
        v463 = vmlaq_f64(vmulq_f64(v220, v226), v225, v558.val[0]);
        v461 = vmlaq_f64(vmulq_f64(v221, v226), v225, v558.val[1]);
        v457 = vmlaq_f64(vmulq_f64(v223, v226), v225, v222);
        v227 = vmlaq_f64(vmulq_f64(v212, v226), v225, v211);
        v559.val[1] = vmlaq_f64(vmulq_n_f64(v470, *((double *)&v542 + 1)), v472, v389);
        v228 = vmlaq_f64(vmulq_n_f64(v470, *(double *)&v547), v472, v372);
        v229 = vmlaq_f64(vmulq_n_f64(v470, *((double *)&v548 + 1)), v472, v370);
        v230 = vmlaq_f64(vmulq_n_f64(v470, *(double *)&v550), v472, v368);
        v231 = vmlaq_f64(vmulq_n_f64(v470, *((double *)&v551 + 1)), v472, v366);
        v558.val[0] = vmlaq_f64(vmulq_n_f64(v470, *(double *)&v553), v472, v364);
        v558.val[1] = vmlaq_f64(vmulq_n_f64(v470, *((double *)&v554 + 1)), v472, v362);
        v232 = vmlaq_f64(vmulq_n_f64(v470, *((double *)&v545 + 1)), v472, v360);
        v233 = vaddq_f64(v393, vmlaq_f64(vmulq_n_f64(v470, *((double *)&v539 + 1)), v472, v394));
        v234 = vaddq_f64(v391, vmlaq_f64(vmulq_n_f64(v470, *(double *)&v541), v472, v392));
        v473 = vmlaq_f64(vmulq_f64(v447, v234), v233, v448);
        v454 = vmlaq_f64(vmulq_f64(v445, v234), v233, v446);
        v471 = vmlaq_f64(vmulq_f64(v185, v234), v233, v444);
        v235 = vmlaq_f64(vmulq_f64(v178, v234), v233, v559.val[0]);
        v236 = vaddq_f64(vaddq_f64(v388, vmlaq_f64(vmulq_n_f64(v512, *((double *)&v542 + 1)), v514, v389)), v227);
        v61 = v403;
        v237 = vaddq_f64(vaddq_f64(v367, vmlaq_f64(vmulq_n_f64(v512, *(double *)&v550), v514, v368)), vmlaq_f64(vmulq_f64(v212, vaddq_f64(v369, vmlaq_f64(vmulq_n_f64(v512, *((double *)&v548 + 1)), v514, v370))), vaddq_f64(v371, vmlaq_f64(vmulq_n_f64(v512, *(double *)&v547), v514, v372)), v211));
        v238 = vmlaq_f64(vmulq_f64(v178, vaddq_f64(v363, v558.val[0])), vaddq_f64(v365, v231), v559.val[0]);
        v239 = vaddq_f64(vaddq_f64(v388, v559.val[1]), v235);
        v240 = vmlaq_f64(vmulq_n_f64(v212, *(double *)&v403), v358, v211);
        v556.val[0] = vaddq_f64(vmlaq_f64(vmulq_f64(v212, vaddq_f64(v363, vmlaq_f64(vmulq_n_f64(v512, *(double *)&v553), v514, v364))), vaddq_f64(v365, vmlaq_f64(vmulq_n_f64(v512, *((double *)&v551 + 1)), v514, v366)), v211), vaddq_f64(v361, vmlaq_f64(vmulq_n_f64(v512, *((double *)&v554 + 1)), v514, v362)));
        v241 = (float64x2_t)vdupq_n_s64(0x3ECC4BE7CE3F6732uLL);
        v242 = vsqrtq_f64(vmlaq_f64(v241, v239, v239));
        v243 = vdivq_f64(v239, v242);
        v556.val[1] = vmulq_f64(vaddq_f64(vaddq_f64(v367, v230), vmlaq_f64(vmulq_f64(v178, vaddq_f64(v369, v229)), vaddq_f64(v371, v228), v559.val[0])), v243);
        v559.val[0] = vmulq_f64(vaddq_f64(v357, vmlaq_f64(vmulq_n_f64(v178, *(double *)&v403), v358, v559.val[0])), v243);
        v244 = vmulq_f64(v243, vaddq_f64(v238, vaddq_f64(v361, v558.val[1])));
        v245 = vmulq_f64(v243, vaddq_f64(v359, v232));
        v559.val[1] = vmulq_f64(v443, v243);
        v246 = vmulq_f64(v441, v243);
        v247 = vmulq_f64(v459, v243);
        v248 = vmulq_f64(v473, v243);
        v249 = vmulq_f64(v454, v243);
        v250 = vmulq_f64(v471, v243);
        v251 = vsqrtq_f64(vmlaq_f64(v241, v236, v236));
        v252 = vdivq_f64(v236, v251);
        v253 = vmulq_f64(v237, v252);
        v254 = vmulq_f64(vaddq_f64(v357, v240), v252);
        v556.val[0] = vmulq_f64(v252, v556.val[0]);
        v255 = vmulq_f64(v252, vaddq_f64(v359, vmlaq_f64(vmulq_n_f64(v512, *((double *)&v545 + 1)), v514, v360)));
        v256 = vmulq_f64(v469, v252);
        v257 = vmulq_f64(v467, v252);
        v258 = vmulq_f64(v465, v252);
        v259 = vmulq_f64(v463, v252);
        v260 = vmulq_f64(v461, v252);
        v261 = vmulq_f64(v457, v252);
        v54 = v536 + v242.f64[0] + v242.f64[1] + v251.f64[0] + v251.f64[1];
        v252.f64[0] = v522 + v559.val[0].f64[0] + v559.val[0].f64[1];
        v55 = v524 + v556.val[1].f64[0] + v556.val[1].f64[1] + v253.f64[0] + v253.f64[1];
        v52 = v252.f64[0] + v254.f64[0] + v254.f64[1];
        v48 = v526 + v244.f64[0] + v244.f64[1] + v556.val[0].f64[0] + v556.val[0].f64[1];
        v49 = v528 + v245.f64[0] + v245.f64[1] + v255.f64[0] + v255.f64[1];
        v50 = v534 + v559.val[1].f64[0] + v559.val[1].f64[1] + v256.f64[0] + v256.f64[1];
        v556.val[1].f64[0] = v532 + v246.f64[0] + v246.f64[1] + v257.f64[0];
        v29 = v519;
        v53 = v556.val[1].f64[0] + v257.f64[1];
        v62 = v474 + v247.f64[0] + v247.f64[1] + v258.f64[0] + v258.f64[1];
        v64 = v529 + v248.f64[0] + v248.f64[1] + v259.f64[0] + v259.f64[1];
        v63 = v475 + v249.f64[0] + v249.f64[1] + v260.f64[0] + v260.f64[1];
        v51 = v530 + v250.f64[0] + v250.f64[1] + v261.f64[0] + v261.f64[1];
        v65 += 8;
        v66 += 8;
        v67 -= 4;
      }
      while (v67);
      v60 = *(double *)a5;
      v58 = v404;
      v57 = *(double *)(a5 + 24);
      v59 = v356;
      v56 = *(double *)&v540;
      if (v47 == a3)
        goto LABEL_14;
    }
    else
    {
      v47 = 0;
      v48 = 0.0;
      v49 = 0.0;
      v50 = 0.0;
      v51 = 0.0;
      v52 = 0.0;
      v53 = 0.0;
      v54 = 0.0;
      v55 = 0.0;
      v56 = *(double *)&v540;
      v58 = v23;
      v57 = *(double *)(a5 + 24);
      v59 = v21;
      v60 = *(double *)a5;
      v61 = v22;
      v62 = 0.0;
      v63 = 0.0;
      v64 = 0.0;
    }
    v262 = a3 - v47;
    v263 = (16 * v47) | 8;
    v264 = (double *)(a2 + v263);
    v265 = (double *)(a1 + v263);
    do
    {
      v525 = v55;
      v523 = v52;
      v527 = v48;
      v531 = v51;
      v533 = v53;
      v535 = v50;
      v537 = v54;
      v266 = *(v265 - 1);
      v267 = *(v264 - 1);
      v268 = *v265 - v502;
      v269 = v520 * sqrt(v268 * v268 + (v266 - *(double *)&v510) * (v266 - *(double *)&v510));
      v270 = v267 - *(double *)&v58;
      v271 = *v264 - v57;
      v272 = v60 * sqrt(v271 * v271 + v270 * v270);
      v273 = v269 * (v269 * v269);
      v274 = v269 * (v269 * v273);
      v275 = v269 * (v269 * v274);
      v276 = v269 * (v269 * v275);
      v277 = v59;
      v278 = v58;
      v279 = v29 * (v269 * v269);
      v280 = v269 * (v269 * v276);
      v281 = v269 * (v269 * v280);
      v282 = v272 * (v272 * v272);
      v283 = v422
           + v279
           + v421 * (v269 * v273)
           + v420 * (v269 * v274)
           + v419 * (v269 * v275)
           + v418 * (v269 * v276)
           + v417 * (v269 * v280)
           + v416 * (v269 * v281);
      v284 = v61;
      v285 = v504 * (v266 - *(double *)&v510) / v269;
      v286 = *(double *)&v440
           + v515 * (v269 * v269)
           + *(double *)&v439 * (v269 * v273)
           + *(double *)&v438 * (v269 * v274)
           + *(double *)&v437 * (v269 * v275)
           + *(double *)&v436 * (v269 * v276)
           + a4[18] * (v269 * v280)
           + a4[19] * (v269 * v281);
      v287 = v504 * v268 / v269;
      v288 = v518 * v273 + v424 * v269;
      v289 = v272 * (v272 * v282);
      v290 = v288 + v431 * v274 + v429 * v275;
      v291 = v272 * (v272 * v289);
      v292 = v290 + v428 * v276 + v427 * v280 + v426 * v281;
      v293 = v272 * (v272 * v291);
      v294 = v272 * (v272 * v293);
      v295 = v272 * (v272 * v294);
      v296 = v415
           + v516 * (v272 * v272)
           + v414 * (v272 * v282)
           + v413 * (v272 * v289)
           + v412 * (v272 * v291)
           + v411 * (v272 * v293)
           + v410 * (v272 * v294)
           + v409 * (v272 * v295);
      v297 = *(double *)&v435
           + v517 * (v272 * v272)
           + *(double *)&v434 * (v272 * v282)
           + *(double *)&v433 * (v272 * v289)
           + *(double *)&v432 * (v272 * v291)
           + *(double *)(a5 + 136) * (v272 * v293)
           + *(double *)(a5 + 144) * (v272 * v294)
           + *(double *)(a5 + 152) * (v272 * v295);
      v298 = v503 * v270 / v272;
      v299 = v503 * v271 / v272;
      v300 = v505 * v282 + v423 * v272 + v430 * v289;
      v301 = 1.0 / (v283 / 100.0 + 1.0);
      v302 = 1.0 - v301;
      v303 = v300 + v408 * v291 + v407 * v293 + v406 * v294 + v425 * v295;
      v304 = *(double *)&v510 * (1.0 - v301) + v301 * v266;
      v305 = v502 * (1.0 - v301) + v301 * *v265;
      v306 = 1.0 / (v296 / 100.0 + 1.0);
      v307 = v285 * v292;
      v308 = v287 * v292;
      v309 = v298 * v303;
      v310 = v283 + 100.0;
      v58 = v278;
      v311 = 1.0 - v306;
      v312 = -100.0 / (v310 * v310);
      v313 = v520 * v286 * v312;
      v314 = v307 * v312;
      v315 = v308 * v312;
      v316 = *(double *)&v278 * (1.0 - v306) + v306 * v267;
      v317 = -100.0 / ((v296 + 100.0) * (v296 + 100.0));
      v318 = v57 * (1.0 - v306) + v306 * *v264;
      v319 = v521 * v297 * v317;
      v320 = v309 * v317;
      v321 = v299 * v303 * v317;
      v322 = v313 * v509 + v313 * v266;
      v323 = v313 * v506 + v313 * *v265;
      v29 = v519;
      v324 = v302 + v509 * v314 + v314 * v266;
      v61 = v284;
      v325 = v315 * v509 + v315 * v266;
      v326 = v302 + v506 * v315 + v315 * *v265;
      v327 = v319 * v508 + v319 * v267;
      v328 = v319 * v507 + v319 * *v264;
      v329 = v311 + v508 * v320 + v320 * v267;
      v330 = v321 * v508 + v321 * v267;
      v331 = v311 + v507 * v321 + v321 * *v264;
      v332 = *(double *)&v542 + *((double *)&v540 + 1) * v318 + v316 * *(double *)&v539;
      v333 = *((double *)&v542 + 1) + *(double *)&v541 * v318 + v316 * *((double *)&v539 + 1);
      v334 = v323 * v333 + v332 * v322;
      v335 = (v314 * v506 + v314 * *v265) * v333 + v332 * v324;
      v336 = v326 * v333;
      v337 = v56 + *((double *)&v539 + 1) * v305 + *(double *)&v539 * v304;
      v59 = v277;
      v338 = *((double *)&v541 + 1) + *(double *)&v541 * v305 + *((double *)&v540 + 1) * v304;
      v339 = v336 + v332 * v325;
      v340 = *(double *)&v277 + *((double *)&v542 + 1) * v305 + *(double *)&v542 * v304 + v318 * v338 + v316 * v337;
      v341 = *(double *)&v547 * v305 + *((double *)&v546 + 1) * v304;
      v342 = v328 * v338 + v327 * v337;
      v343 = (v320 * v507 + v320 * *v264) * v338 + v329 * v337;
      v344 = *((double *)&v548 + 1) * v305 + *(double *)&v548 * v304;
      v345 = *(double *)&v550 * v305 + *((double *)&v549 + 1) * v304;
      v346 = v331 * v338 + v330 * v337;
      v347 = *((double *)&v551 + 1) * v305 + *(double *)&v551 * v304;
      v348 = v305 * *(double *)&v553 + *((double *)&v552 + 1) * v304;
      v349 = v305 * *((double *)&v554 + 1) + *(double *)&v554 * v304;
      v350 = v305 * *((double *)&v545 + 1) + *(double *)&v545 * v304;
      v351 = *((double *)&v550 + 1) + v345 + v318 * (*(double *)&v549 + v344) + v316 * (*((double *)&v547 + 1) + v341);
      v352 = v318 * (*((double *)&v553 + 1) + v348) + v316 * (*(double *)&v552 + v347);
      v60 = *(double *)a5;
      v353 = *(double *)&v284 * v318 + v316 * *((double *)&v543 + 1);
      v354 = sqrt(v340 * v340 + 0.00000337320636);
      v54 = v537 + v354;
      v355 = v340 / v354;
      v55 = v525 + v351 * v355;
      v52 = v523 + (*((double *)&v544 + 1) + v353) * v355;
      v48 = v527 + v355 * (v352 + v555 + v349);
      v49 = v49 + v355 * (*(double *)&v546 + v350);
      v50 = v535 + v334 * v355;
      v53 = v533 + v335 * v355;
      v62 = v62 + v339 * v355;
      v64 = v64 + v342 * v355;
      v63 = v63 + v343 * v355;
      v51 = v531 + v346 * v355;
      v264 += 2;
      v265 += 2;
      --v262;
    }
    while (v262);
LABEL_14:
    *a7 = v54 / (double)a3;
    *a8 = v55 / (double)a3;
    a8[1] = v52 / (double)a3;
    a8[2] = v48 / (double)a3;
    a8[3] = v49 / (double)a3;
    a8[4] = v50 / (double)a3;
    a8[5] = v53 / (double)a3;
    a8[6] = v62 / (double)a3;
    a8[7] = v64 / (double)a3;
    a8[8] = v63 / (double)a3;
    a8[9] = v51 / (double)a3;
  }
  return result;
}

double FundamentalDistortionError_MeanVal(const double *a1, const double *a2, int a3, double *a4, double *a5, uint64_t a6, double *a7, double result, __n128 a9, double a10, double a11, __n128 a12, double a13, double a14, __n128 a15)
{
  __int128 v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  double v76;
  __n128 v77;
  double v78;
  __n128 v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  __n128 v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  const double *v97;
  const double *v98;
  uint64_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  uint64_t v132;
  uint64_t v133;
  double *v134;
  double *v135;
  double v136;
  double v137;
  double v138;
  __n128 v139;
  __n128 v140;
  double v141;
  __n128 v142;
  __int128 v143;
  double v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  __int128 v170;
  __n128 v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  double v187;
  double v188;
  double v189;
  double v190;
  double v191;
  double v192;
  double v193;
  double v194;
  double v195;
  double v196;
  double v197;
  float64x2x2_t v198;
  float64x2x2_t v199;

  if (a1 && a2 && a3 >= 1 && a7)
  {
    a9.n128_u64[0] = *(_QWORD *)(a6 + 8);
    v16 = *(double *)(a6 + 48);
    v17 = *(double *)(a6 + 56);
    v18 = *(double *)(a6 + 64);
    v19 = *(double *)(a6 + 72);
    v20 = *(double *)(a6 + 80);
    v21 = *(double *)(a6 + 88);
    v22 = *(double *)(a6 + 96);
    v23 = *(double *)(a6 + 104);
    v24 = *(double *)(a6 + 112);
    v25 = *(double *)(a6 + 120);
    v26 = *(double *)(a6 + 128);
    v27 = *(double *)(a6 + 136);
    v28 = -1.0 / *(double *)a6;
    v29 = *(double *)(a6 + 16) / *(double *)a6;
    v30 = *(double *)(a6 + 32) / *(double *)a6;
    v31 = -1.0 / a9.n128_f64[0];
    v32 = *(double *)(a6 + 24) / a9.n128_f64[0];
    v33 = v23 * v24 - v27 * v20;
    v34 = v23 * v25 - v27 * v21;
    v35 = v23 * v26 - v27 * v22;
    v36 = v27 * v16 - v19 * v24;
    v37 = v27 * v17 - v19 * v25;
    v38 = v27 * v18 - v19 * v26;
    v39 = v19 * v20 - v23 * v16;
    v40 = v19 * v21 - v23 * v17;
    v41 = v19 * v22 - v23 * v18;
    v42 = *(double *)(a6 + 40) / a9.n128_f64[0];
    v43 = v28 * v33;
    v44 = v28 * v36;
    v45 = v28 * v39;
    v46 = v28 * v34;
    v47 = v28 * v37;
    v48 = v28 * v40;
    v49 = v35 + v30 * v34 + v29 * v33;
    v50 = v38 + v30 * v37 + v29 * v36;
    v51 = v41 + v30 * v40 + v29 * v39;
    *(double *)&v15 = -1.0 / a9.n128_f64[0] * v43;
    a9.n128_f64[0] = -1.0 / a9.n128_f64[0] * v46;
    v171 = a9;
    v197 = v31 * v49;
    v196 = v31 * v44;
    a12.n128_f64[0] = v31 * v47;
    v195 = v31 * v50;
    v194 = v45 + v42 * v44 + v43 * v32;
    a15.n128_f64[0] = v48 + v42 * v47 + v46 * v32;
    v193 = v51 + v42 * v50 + v49 * v32;
    v52 = a4[1] * *a4;
    v53 = a4[4] + v52 * a4[12];
    v54 = a4[5] + v52 * a4[13];
    v55 = a4[6] + v52 * a4[14];
    v56 = a4[7] + v52 * a4[15];
    v57 = a4[8] + v52 * a4[16];
    v58 = a4[9] + v52 * a4[17];
    v59 = a4[10] + v52 * a4[18];
    v60 = a4[11] + v52 * a4[19];
    v61 = a5[1] * *a5;
    v62 = a5[4] + v61 * a5[12];
    v63 = a5[5] + v61 * a5[13];
    v64 = a5[6] + v61 * a5[14];
    v65 = a5[7] + v61 * a5[15];
    v66 = a5[8] + v61 * a5[16];
    v67 = a5[9] + v61 * a5[17];
    v68 = a5[10] + v61 * a5[18];
    v69 = *((uint64_t *)a4 + 2);
    v70 = *((uint64_t *)a4 + 3);
    v71 = a5[11] + v61 * a5[19];
    v72 = *((uint64_t *)a5 + 2);
    v73 = *((uint64_t *)a5 + 3);
    v191 = v55;
    v192 = v53;
    v189 = v58;
    v190 = v56;
    v188 = v54;
    if (a3 > 1)
    {
      v186 = (float64x2_t)vdupq_lane_s64(v69, 0);
      v74 = a3 & 0xFFFFFFFE;
      v185 = (float64x2_t)vdupq_lane_s64(v70, 0);
      v184 = (float64x2_t)vdupq_lane_s64(v72, 0);
      v183 = (float64x2_t)vdupq_lane_s64(v73, 0);
      v182 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v53, 0);
      v181 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v55, 0);
      v179 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v57, 0);
      v180 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v56, 0);
      v177 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v59, 0);
      v178 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v58, 0);
      v168 = v62;
      v169 = v60;
      v175 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v62, 0);
      v176 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v60, 0);
      v166 = v65;
      v167 = v64;
      v173 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v65, 0);
      v174 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v64, 0);
      v164 = v67;
      v165 = v66;
      v172 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v66, 0);
      v187 = v63;
      v87 = v54;
      v88 = a15;
      v89 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v67, 0);
      v162 = v71;
      v163 = v68;
      v90 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v68, 0);
      v91 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v71, 0);
      v170 = v15;
      v92 = (float64x2_t)vdupq_lane_s64(v15, 0);
      v93 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v197, 0);
      v94 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v196, 0);
      v76 = 0.0;
      v95 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v195, 0);
      v96 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v194, 0);
      v97 = a1;
      v98 = a2;
      v99 = v74;
      v100 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v193, 0);
      do
      {
        v199 = vld2q_f64(v97);
        v97 += 4;
        v101 = vsubq_f64(v199.val[1], v185);
        v102 = vsubq_f64(v199.val[0], v186);
        v103 = vmulq_f64(v101, v101);
        v198 = vld2q_f64(v98);
        v98 += 4;
        v104 = vmulq_n_f64(vsqrtq_f64(vmlaq_f64(v103, v102, v102)), *a4);
        v105 = vsubq_f64(v198.val[0], v184);
        v106 = vsubq_f64(v198.val[1], v183);
        v107 = vmlaq_f64(vmulq_f64(v106, v106), v105, v105);
        v108 = vmulq_f64(v104, v104);
        v109 = vmulq_f64(v104, vmulq_f64(v104, v108));
        v110 = vmulq_f64(v104, vmulq_f64(v104, v109));
        v111 = vmulq_f64(v104, vmulq_f64(v104, v110));
        v112 = vmulq_f64(v104, vmulq_f64(v104, v111));
        v113 = vmlaq_f64(vaddq_f64(v182, vmulq_n_f64(v108, v87)), v109, v181);
        v114 = vmulq_f64(v104, vmulq_f64(v104, v112));
        v115 = vmulq_n_f64(vsqrtq_f64(v107), *a5);
        v116 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v113, v110, v180), v111, v179), v112, v178), v114, v177), vmulq_f64(v104, vmulq_f64(v104, v114)), v176);
        v117 = (float64x2_t)vdupq_n_s64(0x4059000000000000uLL);
        __asm { FMOV            V25.2D, #1.0 }
        v123 = vdivq_f64(_Q25, vaddq_f64(vdivq_f64(v116, v117), _Q25));
        v124 = vsubq_f64(_Q25, v123);
        v125 = vmlaq_f64(vmulq_n_f64(v124, *(double *)&v69), v199.val[0], v123);
        v126 = vmlaq_f64(vmulq_n_f64(v124, *(double *)&v70), v199.val[1], v123);
        v199.val[0] = vmulq_f64(v115, v115);
        v199.val[1] = vmulq_f64(v115, vmulq_f64(v115, v199.val[0]));
        v127 = vmulq_f64(v115, vmulq_f64(v115, v199.val[1]));
        v199.val[0] = vmlaq_f64(vaddq_f64(v175, vmulq_n_f64(v199.val[0], v187)), v199.val[1], v174);
        v199.val[1] = vmulq_f64(v115, vmulq_f64(v115, v127));
        v199.val[0] = vmlaq_f64(v199.val[0], v127, v173);
        v128 = vmulq_f64(v115, vmulq_f64(v115, v199.val[1]));
        v199.val[0] = vmlaq_f64(v199.val[0], v199.val[1], v172);
        v199.val[1] = vmulq_f64(v115, vmulq_f64(v115, v128));
        v129 = vdivq_f64(_Q25, vaddq_f64(vdivq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v199.val[0], v128, v89), v199.val[1], v90), vmulq_f64(v115, vmulq_f64(v115, v199.val[1])), v91), v117), _Q25));
        v199.val[0] = vsubq_f64(_Q25, v129);
        v130 = vaddq_f64(vaddq_f64(v100, vmlaq_f64(vmulq_n_f64(v126, v88.n128_f64[0]), v125, v96)), vmlaq_f64(vmulq_f64(vmlaq_f64(vmulq_n_f64(v199.val[0], *(double *)&v73), v198.val[1], v129), vaddq_f64(v95, vmlaq_f64(vmulq_n_f64(v126, a12.n128_f64[0]), v125, v94))), vaddq_f64(v93, vmlaq_f64(vmulq_n_f64(v126, v171.n128_f64[0]), v125, v92)), vmlaq_f64(vmulq_n_f64(v199.val[0], *(double *)&v72), v198.val[0], v129)));
        v131 = vsqrtq_f64(vmlaq_f64((float64x2_t)vdupq_n_s64(0x3ECC4BE7CE3F6732uLL), v130, v130));
        v76 = v76 + v131.f64[0] + v131.f64[1];
        v99 -= 2;
      }
      while (v99);
      a15 = v88;
      v77 = a12;
      v79 = v171;
      v75 = v170;
      v78 = v187;
      v80 = *a4;
      v60 = v169;
      v82 = v167;
      v81 = v168;
      v84 = v165;
      v83 = v166;
      v85 = v163;
      v67 = v164;
      v86 = v162;
      if (v74 == a3)
        goto LABEL_12;
    }
    else
    {
      v74 = 0;
      v75 = v15;
      v76 = 0.0;
      v77 = a12;
      v78 = v63;
      v80 = *a4;
      v79 = v171;
      v81 = v62;
      v82 = v64;
      v83 = v65;
      v84 = v66;
      v85 = v68;
      v86 = v71;
    }
    v132 = a3 - v74;
    v133 = (16 * v74) | 8;
    v134 = (double *)((char *)a2 + v133);
    v135 = (double *)((char *)a1 + v133);
    do
    {
      v136 = *(v135 - 1);
      v137 = *(v134 - 1);
      v138 = v80
           * sqrt((*v135 - *(double *)&v70) * (*v135 - *(double *)&v70)+ (v136 - *(double *)&v69) * (v136 - *(double *)&v69));
      v139 = v79;
      v140 = v77;
      v141 = v138 * (v138 * (v138 * v138));
      v142 = a15;
      v143 = v75;
      v144 = v138 * (v138 * v141);
      v145 = v192 + v188 * (v138 * v138) + v191 * v141;
      v146 = v138 * (v138 * v144);
      v147 = v145 + v190 * v144;
      v148 = v138 * (v138 * v146);
      v149 = v147 + v57 * v146;
      v150 = v138 * (v138 * v148);
      v151 = v149 + v189 * v148;
      v75 = v143;
      v152 = *a5
           * sqrt((*v134 - *(double *)&v73) * (*v134 - *(double *)&v73)+ (v137 - *(double *)&v72) * (v137 - *(double *)&v72));
      v153 = v151 + v59 * v150 + v60 * (v138 * (v138 * v150));
      v154 = v152 * (v152 * (v152 * v152));
      v155 = v81 + v78 * (v152 * v152) + v82 * v154;
      v156 = v152 * (v152 * v154);
      v157 = (v155
            + v83 * v156
            + v84 * (v152 * (v152 * v156))
            + v67 * (v152 * (v152 * (v152 * (v152 * v156))))
            + v85 * (v152 * (v152 * (v152 * (v152 * (v152 * (v152 * v156))))))
            + v86 * (v152 * (v152 * (v152 * (v152 * (v152 * (v152 * (v152 * (v152 * v156)))))))))
           / 100.0;
      v158 = 1.0 / (v153 / 100.0 + 1.0);
      v159 = *(double *)&v69 * (1.0 - v158) + v158 * v136;
      v77 = v140;
      v79 = v139;
      v160 = *(double *)&v70 * (1.0 - v158) + v158 * *v135;
      a15 = v142;
      v161 = (*(double *)&v73 * (1.0 - 1.0 / (v157 + 1.0)) + 1.0 / (v157 + 1.0) * *v134)
           * (v195 + v77.n128_f64[0] * v160 + v196 * v159)
           + (*(double *)&v72 * (1.0 - 1.0 / (v157 + 1.0)) + 1.0 / (v157 + 1.0) * v137)
           * (v197 + v139.n128_f64[0] * v160 + *(double *)&v75 * v159);
      v76 = v76
          + sqrt((v193 + v142.n128_f64[0] * v160 + v194 * v159 + v161)* (v193 + v142.n128_f64[0] * v160 + v194 * v159 + v161)+ 0.00000337320636);
      v134 += 2;
      v135 += 2;
      --v132;
    }
    while (v132);
LABEL_12:
    result = v76 / (double)a3;
    *a7 = result;
  }
  return result;
}

void sub_20B67B524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_20B67B5AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B67B790(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_20B67B9C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_20B67C0C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,void *a33,void *a34)
{
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;

  _Unwind_Resume(a1);
}

void sub_20B67CA80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id ADCommonUtils::matrixNxMToArrayColumnFirst<4ul,3ul,simd_float4x3>(_DWORD *a1)
{
  void *v2;
  double v3;
  void *v4;
  double v5;
  void *v6;
  double v7;
  void *v8;
  double v9;
  void *v10;
  double v11;
  void *v12;
  double v13;
  void *v14;
  double v15;
  void *v16;
  double v17;
  void *v18;
  double v19;
  void *v20;
  double v21;
  void *v22;
  double v23;
  void *v24;
  double v25;
  void *v26;

  v2 = (void *)objc_opt_new();
  LODWORD(v3) = *a1;
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addObject:", v4);

  LODWORD(v5) = a1[1];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addObject:", v6);

  LODWORD(v7) = a1[2];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addObject:", v8);

  LODWORD(v9) = a1[4];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addObject:", v10);

  LODWORD(v11) = a1[5];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addObject:", v12);

  LODWORD(v13) = a1[6];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addObject:", v14);

  LODWORD(v15) = a1[8];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addObject:", v16);

  LODWORD(v17) = a1[9];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addObject:", v18);

  LODWORD(v19) = a1[10];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addObject:", v20);

  LODWORD(v21) = a1[12];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addObject:", v22);

  LODWORD(v23) = a1[13];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v23);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addObject:", v24);

  LODWORD(v25) = a1[14];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v25);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addObject:", v26);

  return v2;
}

void sub_20B67CF1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B67CFA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B67D1AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_20B67D4F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B67D890(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B67DB98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B67DC58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B67DF70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v8 = v7;

  _Unwind_Resume(a1);
}

void sub_20B67E1C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_20B67E46C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B67E5F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_20B67E6D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_20B67E994(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B67EA0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B67EAF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B67EE88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  void *v5;
  void *v6;
  va_list va;

  va_start(va, a4);

  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_20B67EFF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)ADPearlColorInFieldCalibrationPipeline;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_20B67F0B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B67F7F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B67F84C()
{
  JUMPOUT(0x20B67F840);
}

void sub_20B67FBC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  void *v5;
  void *v6;
  va_list va;

  va_start(va, a4);

  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_20B68044C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B680EDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B680FCC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B681D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36)
{
  void *v36;
  void *v37;
  void *v38;

  _Unwind_Resume(a1);
}

void sub_20B682928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28)
{
  void *v28;
  void *v29;

  _Unwind_Resume(a1);
}

void sub_20B683244(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_20B6832E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B683734(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_20B683930(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_20B683C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_20B683DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, objc_super a11)
{
  void *v11;

  a11.super_class = (Class)ADDeviceConfiguration;
  -[_Unwind_Exception dealloc](&a11, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_20B68410C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_20B6843D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t getterDummy(objc_object *a1, objc_selector *a2)
{
  return 0;
}

void sub_20B6847C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_20B6848F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_20B6849D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_20B684AB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_20B684B94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_20B684C70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_20B684D3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B684E84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B684F60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B6853C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B6856B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_20B68590C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_20B685AF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_20B685CD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_20B685DDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B68608C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  va_list va;

  va_start(va, a4);
  v8 = v6;

  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_20B6861F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  va_list va;

  va_start(va, a2);

  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_20B686310(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  va_list va;

  va_start(va, a2);

  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_20B6863CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_20B686470(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_20B686574(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B686804(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B686980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  void *v10;
  va_list va;

  va_start(va, a10);
  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);

  _Unwind_Resume(a1);
}

void sub_20B686B44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B686BB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B686CF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B686F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;

  a10.super_class = (Class)ADExecutor;
  -[_Unwind_Exception dealloc](&a10, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_20B68709C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B6873F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_20B687998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_20B687D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{

  _Unwind_Resume(a1);
}

id calibrationFromAttachment(__CVBuffer *a1)
{
  CFTypeRef Attachment;
  void *v2;
  CFTypeID v3;

  if (!a1)
    goto LABEL_5;
  Attachment = CVBufferGetAttachment(a1, CFSTR("Calibration Data"), 0);
  v2 = (void *)Attachment;
  if (Attachment)
  {
    CFRetain(Attachment);
    v3 = CFGetTypeID(v2);
    if (v3 != CFDictionaryGetTypeID())
    {
      CFRelease(v2);
LABEL_5:
      v2 = 0;
    }
  }
  return v2;
}

void calibrationAttach(__CVBuffer *a1, CFTypeRef value)
{
  CVBufferSetAttachment(a1, CFSTR("Calibration Data"), value, kCVAttachmentMode_ShouldPropagate);
}

void sub_20B687EE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B688008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_20B688234(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_20B68846C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_20B688A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28)
{
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;

  _Unwind_Resume(a1);
}

void sub_20B689290(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_20B68966C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B689854(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_20B689B1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_20B689E9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B68A198(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B68A388(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_20B68A430(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_20B68A800(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void sub_20B68ABD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_20B68AD88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_20B68AE64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_20B68B73C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B68B7CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B68B9C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)ADJasperColorInFieldCalibrationPipeline;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_20B68BB04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B68BE94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  void *v5;
  void *v6;
  va_list va;

  va_start(va, a4);

  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_20B68C02C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B68C110(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B68C7E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B68CB4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B68CD74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B68D098(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a2);
  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);

  _Unwind_Resume(a1);
}

void sub_20B68D274(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B68D570(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B68DDC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B68DEB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B68EA18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40)
{
  void *v40;
  void *v41;
  void *v42;

  _Unwind_Resume(a1);
}

void sub_20B68F6B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  void *v32;
  void *v33;

  _Unwind_Resume(a1);
}

uint64_t isJasperFrameValidImpl(void *a1, void *a2, void *a3, _OWORD *a4, float32x4_t *a5, _BYTE *a6, float32x4_t a7, float32x4_t a8, float32x4_t a9, float32x4_t a10, int32x4_t a11, int32x4_t a12, int32x4_t a13, int32x4_t a14)
{
  id v19;
  id v20;
  void *v21;
  char v22;
  unsigned int v23;
  float *v24;
  uint64_t v25;
  NSObject *v26;
  const char *v27;
  uint8_t *v28;
  float v29;
  int32x4_t v30;
  int32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  __int128 v41;
  float v42;
  float32x2_t v43;
  unsigned int v44;
  uint64_t v45;
  float v46;
  float v47;
  float v48;
  float32x4_t v50;
  float32x4_t v54;
  float32x4_t v56;
  float32x4_t v58;
  float32x4_t v60;
  __int128 v62;
  __int16 v63;
  uint8_t buf[16];
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v50 = a10;
  v19 = a1;
  v20 = a3;
  objc_msgSend(a2, "deviceName");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = objc_msgSend(v21, "hasPrefix:", CFSTR("N301"));

  v23 = objc_msgSend(v19, "length");
  v24 = (float *)objc_msgSend(v19, "euclideanDistances");
  if (v23 >= objc_msgSend(v20, "numberOfValidSpotsForValidFrame"))
  {
    objc_msgSend(v20, "minRotationBetweenFrames");
    if (v29 != 0.0)
    {
      v30 = vzip2q_s32(a11, a13);
      v31 = vzip2q_s32(a12, a14);
      v32 = (float32x4_t)vzip2q_s32(v30, v31);
      v33 = (float32x4_t)vzip1q_s32(v30, v31);
      v34 = vzip1q_s32(a11, a13);
      v35 = vzip1q_s32(a12, a14);
      v36 = (float32x4_t)vzip2q_s32(v34, v35);
      v37 = (float32x4_t)vzip1q_s32(v34, v35);
      v38 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v37, a7.f32[0]), v36, *(float32x2_t *)a7.f32, 1), v33, a7, 2), v32, a7, 3);
      v39 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v37, a8.f32[0]), v36, *(float32x2_t *)a8.f32, 1), v33, a8, 2), v32, a8, 3);
      v54 = v37;
      v56 = v36;
      v58 = v33;
      v60 = v32;
      v40 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v37, a9.f32[0]), v36, *(float32x2_t *)a9.f32, 1), v33, a9, 2), v32, a9, 3);
      *(_DWORD *)&buf[12] = 0;
      *(_DWORD *)&buf[8] = v38.i32[2];
      v66 = v39.u32[2];
      *(_QWORD *)buf = v38.i64[0];
      v65 = v39.i64[0];
      v68 = v40.u32[2];
      v67 = v40.i64[0];
      +[ADUtils calcRotationAngle:](ADUtils, "calcRotationAngle:", buf);
      v62 = v41;
      objc_msgSend(v20, "minRotationBetweenFrames");
      v43 = vabs_f32(*(float32x2_t *)&v62);
      if (v43.f32[0] <= v43.f32[1])
        v43.f32[0] = v43.f32[1];
      if (v43.f32[0] < v42)
      {
        if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
          goto LABEL_6;
        v63 = 0;
        v26 = MEMORY[0x24BDACB70];
        v27 = "ADJasperColorInFieldCalibration jasper controller failed: frame not passing minimum rotation";
        v28 = (uint8_t *)&v63;
LABEL_5:
        _os_log_impl(&dword_20B62B000, v26, OS_LOG_TYPE_DEFAULT, v27, v28, 2u);
LABEL_6:
        v25 = 0;
        goto LABEL_30;
      }
      if (a4)
        *a4 = v62;
      if (a5)
        *a5 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v54, v50.f32[0]), v56, *(float32x2_t *)v50.f32, 1), v58, v50, 2), v60, v50, 3);
    }
    v44 = 0;
    if (v23)
    {
      v45 = v23;
      do
      {
        v46 = *v24;
        objc_msgSend(v20, "thresholdDepthValue", *(_OWORD *)&v50);
        if (v46 < v47)
          ++v44;
        ++v24;
        --v45;
      }
      while (v45);
    }
    if ((v22 & 1) != 0)
    {
      objc_msgSend(v20, "thresholdPrecOfValidDepth");
      if ((float)((float)v44 / (float)v23) > v48)
      {
        v25 = 0;
        if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
          goto LABEL_30;
        *(_WORD *)buf = 0;
        v26 = MEMORY[0x24BDACB70];
        v27 = "ADJasperColorInFieldCalibration jasper controller failed: percentage of valid depth is too low";
        goto LABEL_4;
      }
    }
    else if (v23 - v44 < objc_msgSend(v20, "numberOfMinimalRangeSpots"))
    {
      v25 = 0;
      if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
        goto LABEL_30;
      *(_WORD *)buf = 0;
      v26 = MEMORY[0x24BDACB70];
      v27 = "ADJasperColorInFieldCalibration jasper controller failed: number of good spots is too low";
      goto LABEL_4;
    }
    if (a6)
      *a6 = 100 * (v23 - v44) / v23;
    v25 = 1;
  }
  else
  {
    v25 = 0;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v26 = MEMORY[0x24BDACB70];
      v27 = "ADJasperColorInFieldCalibration jasper controller failed: number of valid spots is too low";
LABEL_4:
      v28 = buf;
      goto LABEL_5;
    }
  }
LABEL_30:

  return v25;
}

void sub_20B68FD0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t isColorFrameValidImpl(__CVBuffer *a1, NSDictionary *a2, ADJasperColorInFieldCalibrationPipelineParameters *a3, ADJasperColorInFieldCalibrationControllerParameters *a4)
{
  NSDictionary *v7;
  ADJasperColorInFieldCalibrationPipelineParameters *v8;
  ADJasperColorInFieldCalibrationControllerParameters *v9;
  void *v10;
  uint64_t v11;
  BOOL v12;
  _BOOL4 v13;
  _BOOL4 v14;
  char v15;
  double v16;
  double v17;
  double v18;
  int v19;
  double v20;
  double v21;
  double v22;
  double v23;
  int v24;
  double v25;
  void *v26;
  int v27;
  double v28;
  double v29;
  double v30;
  double v31;
  size_t Width;
  NSObject *v33;
  const char *v34;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  _QWORD v42[4];
  uint8_t buf[4];
  double v44;
  __int16 v45;
  double v46;
  __int16 v47;
  double v48;
  __int16 v49;
  double v50;
  uint64_t v51;
  CGRect v52;

  v51 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  -[ADPipelineParameters deviceName](v8, "deviceName");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v10, "hasPrefix:", CFSTR("N301")) & 1) != 0)
  {

    v11 = 1;
    goto LABEL_51;
  }
  v12 = -[ADJasperColorInFieldCalibrationPipelineParameters forceRun](v8, "forceRun");

  if (v12)
  {
    v11 = 1;
    goto LABEL_51;
  }
  v13 = +[ADJasperColorInFieldCalibrationPipeline isInSupportedFormat:](ADJasperColorInFieldCalibrationPipeline, "isInSupportedFormat:", a1);
  v14 = v13;
  if (ADDebugUtilsADVerboseLogsEnabled)
    v15 = v13;
  else
    v15 = 1;
  if ((v15 & 1) == 0 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_20B62B000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "AD-RGB controller unsupported pixel format", buf, 2u);
  }
  objc_msgSend(MEMORY[0x24BE05FB8], "getFrameTransformsFromMetadataDictionary:sensorCropRect:rawSensorSize:postReadCropRect:", v7, v42, &v40, &v36);
  if (ADDebugUtilsADVerboseLogsEnabled)
  {
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      goto LABEL_55;
    *(_DWORD *)buf = 134218752;
    v44 = *(double *)&v42[2];
    v45 = 2048;
    v46 = *(double *)&v42[3];
    v47 = 2048;
    v48 = *(double *)v42;
    v49 = 2048;
    v50 = *(double *)&v42[1];
    _os_log_impl(&dword_20B62B000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "AD-RGBJ controller SensorCropRect       size.width:%f,  size.height:%f,  origin.x:%f,    origin.y:%f\n", buf, 0x2Au);
    if (ADDebugUtilsADVerboseLogsEnabled)
    {
LABEL_55:
      if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT)
        || (*(_DWORD *)buf = 134218240,
            v44 = v40,
            v45 = 2048,
            v46 = v41,
            _os_log_impl(&dword_20B62B000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "AD-RGBJ controller rawSensorSize        size.width:%f,  size.height:%f\n", buf, 0x16u), ADDebugUtilsADVerboseLogsEnabled))
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134218752;
          v44 = v38;
          v45 = 2048;
          v46 = v39;
          v47 = 2048;
          v48 = v36;
          v49 = 2048;
          v50 = v37;
          _os_log_impl(&dword_20B62B000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "AD-RGBJ controller TotalSensorCropRect  size.width:%f,  size.height:%f,  origin.x:%f,    origin.y:%f\n", buf, 0x2Au);
        }
      }
    }
  }
  if (!v14)
    goto LABEL_44;
  v16 = v40;
  v17 = v36;
  v18 = v38;
  -[ADJasperColorInFieldCalibrationControllerParameters allowedDriftFromSymmetricCrop](v9, "allowedDriftFromSymmetricCrop");
  LODWORD(v20) = v19;
  if (+[ADJasperColorInFieldCalibrationPipeline isCroppingPointInThresholdRange:distanceFromSymmetricCroppingPoint:normalizedBySensorDimention:andAllowedDriftFromSymmetricCrop:](ADJasperColorInFieldCalibrationPipeline, "isCroppingPointInThresholdRange:distanceFromSymmetricCroppingPoint:normalizedBySensorDimention:andAllowedDriftFromSymmetricCrop:", v17, (v16 - v18) * 0.5, v16, v20))
  {
    v21 = v41;
    v22 = v37;
    v23 = v39;
    -[ADJasperColorInFieldCalibrationControllerParameters allowedDriftFromSymmetricCrop](v9, "allowedDriftFromSymmetricCrop");
    LODWORD(v25) = v24;
    if (+[ADJasperColorInFieldCalibrationPipeline isCroppingPointInThresholdRange:distanceFromSymmetricCroppingPoint:normalizedBySensorDimention:andAllowedDriftFromSymmetricCrop:](ADJasperColorInFieldCalibrationPipeline, "isCroppingPointInThresholdRange:distanceFromSymmetricCroppingPoint:normalizedBySensorDimention:andAllowedDriftFromSymmetricCrop:", v22, (v21 - v23) * 0.5, v21, v25))
    {
      -[ADPipelineParameters deviceName](v8, "deviceName");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = objc_msgSend(v26, "hasPrefix:", CFSTR("J7"));
      if (v27)
        v28 = 96.0;
      else
        v28 = 1067.0;
      if (v27)
        v29 = 76.0;
      else
        v29 = 656.0;
      if (v27)
        v30 = 4032.0;
      else
        v30 = 6314.0;
      if (v27)
        v31 = 3024.0;
      else
        v31 = 4736.0;

      Width = CVPixelBufferGetWidth(a1);
      objc_msgSend(MEMORY[0x24BE05FB8], "calcSensorCrop:onImageWithDimensions:metadataDictionary:negativeCropHandling:", v7, 1, v28, v29, v30, v31, (double)Width, (double)CVPixelBufferGetHeight(a1));
      if (!CGRectIsNull(v52))
      {
        v11 = 1;
LABEL_45:
        if (!ADDebugUtilsADVerboseLogsEnabled)
          goto LABEL_51;
        goto LABEL_49;
      }
      if (ADDebugUtilsADVerboseLogsEnabled)
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          v33 = MEMORY[0x24BDACB70];
          v34 = "AD-RGBJ cannot create crop rectangle";
LABEL_43:
          _os_log_impl(&dword_20B62B000, v33, OS_LOG_TYPE_DEFAULT, v34, buf, 2u);
LABEL_44:
          v11 = 0;
          goto LABEL_45;
        }
        goto LABEL_48;
      }
    }
    else if (ADDebugUtilsADVerboseLogsEnabled)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        v33 = MEMORY[0x24BDACB70];
        v34 = "AD-RGBJ None ISP symmetric height";
        goto LABEL_43;
      }
      goto LABEL_48;
    }
LABEL_47:
    v11 = 0;
    goto LABEL_51;
  }
  if (!ADDebugUtilsADVerboseLogsEnabled)
    goto LABEL_47;
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    v33 = MEMORY[0x24BDACB70];
    v34 = "AD-RGBJ None ISP symmetric width";
    goto LABEL_43;
  }
LABEL_48:
  v11 = 0;
LABEL_49:
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v44) = v11;
    _os_log_impl(&dword_20B62B000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "AD-RGBJ controller status:%d\n", buf, 8u);
  }
LABEL_51:

  return v11;
}

void sub_20B69028C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_20B6904C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B690594(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_20B690678(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_20B6906F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B69076C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B690B0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B690C98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B690EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  void *v5;
  void *v6;
  va_list va;

  va_start(va, a4);

  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_20B6917D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_20B691C54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  va_list va;

  va_start(va, a2);

  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  objc_sync_exit(v2);

  _Unwind_Resume(a1);
}

void sub_20B691E00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B693818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,void *a47,id obj,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,void *a58,void *a59)
{
  void *v59;
  uint64_t v60;

  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)(v60 - 176));
  objc_sync_exit(obj);

  _Unwind_Resume(a1);
}

void sub_20B693BAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)ADJasperColorExecutor;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_20B6942A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

float postProcessingLogarithmicVarianceToStd(float a1)
{
  float v1;
  float v2;
  float v3;
  float v4;

  v1 = 1.0;
  if (a1 <= 0.0)
  {
    v2 = (float)((float)(a1 * 0.0019531) + 1.0) * (float)((float)(a1 * 0.0019531) + 1.0);
    v3 = (float)((float)(v2 * v2) * (float)(v2 * v2)) * (float)((float)(v2 * v2) * (float)(v2 * v2));
    v4 = (float)((float)(v3 * v3) * (float)(v3 * v3)) * (float)((float)(v3 * v3) * (float)(v3 * v3));
    return v4 * v4;
  }
  return v1;
}

float postProcessingConfidenceToStandardDeviation(float a1)
{
  return 1.0 - a1;
}

float postProcessingStandardDeviationToConfidence(float a1)
{
  float v1;
  float v2;
  BOOL v3;
  float result;

  v1 = 1.0;
  v2 = 1.0 - a1;
  if (v2 <= 1.0)
    v1 = v2;
  v3 = v2 < 0.0;
  result = 0.0;
  if (!v3)
    return v1;
  return result;
}

float postProcessingLogarithmicVarianceToConfidence(float a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float result;

  v1 = 1.0;
  v2 = 1.0;
  if (a1 <= 0.0)
  {
    v3 = (float)((float)(a1 * 0.0019531) + 1.0) * (float)((float)(a1 * 0.0019531) + 1.0);
    v4 = (float)((float)(v3 * v3) * (float)(v3 * v3)) * (float)((float)(v3 * v3) * (float)(v3 * v3));
    v5 = (float)((float)(v4 * v4) * (float)(v4 * v4)) * (float)((float)(v4 * v4) * (float)(v4 * v4));
    v2 = v5 * v5;
  }
  if ((float)(1.0 - v2) <= 1.0)
    v1 = 1.0 - v2;
  result = 0.0;
  if ((float)(1.0 - v2) >= 0.0)
    return v1;
  return result;
}

void sub_20B694674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_20B694754(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B696558(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  int v3;

  if (v3 < 0)
    operator delete(v2);

  _Unwind_Resume(a1);
}

void sub_20B6971FC(_Unwind_Exception *exception_object)
{
  void *v1;
  int v2;

  if (v2 < 0)
  {
    operator delete(v1);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B699428(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  int v3;

  if (v3 < 0)
    operator delete(v2);

  _Unwind_Resume(a1);
}

void sub_20B699694(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B69D374(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t copyModifyPixelBuffer<&(postProcessingNone(float))>(__CVBuffer *a1, __CVBuffer *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  unint64_t PixelFormatType;
  unint64_t v13;
  unint64_t v14;
  int Width;
  int Height;
  int v17;
  int v18;
  int v19;
  int v20;
  char *v23;
  char *v24;
  unsigned int v25;
  uint64_t v26;
  int v32;
  int v33;
  char *v36;
  char *v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  int v41;
  char *v44;
  char *v45;
  unsigned int v46;
  uint64_t v47;
  int BytesPerRow;
  int v52;
  NSObject *v54;
  const char *v55;
  uint32_t v56;
  char *BaseAddress;
  char *v59;
  unsigned int v60;
  uint64_t v61;
  int v62;
  _BYTE *v63;
  _BYTE *v64;
  void **v65;
  void *__p[2];
  char v67;
  uint8_t buf[4];
  _BYTE *v69;
  __int16 v70;
  void **v71;
  _BYTE v72[12];
  __int16 v73;
  CGFloat v74;
  __int16 v75;
  _BYTE v76[10];
  CGFloat v77;
  __int16 v78;
  int v79;
  __int16 v80;
  int v81;
  uint64_t v82;
  CGRect v83;
  CGRect v84;
  CGRect v85;
  CGRect v86;

  v82 = *MEMORY[0x24BDAC8D0];
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  v13 = CVPixelBufferGetPixelFormatType(a2);
  v14 = v13;
  if ((int)PixelFormatType > 1717856626)
  {
    if ((_DWORD)PixelFormatType == 1717856627)
      goto LABEL_14;
    if ((_DWORD)PixelFormatType != 1751411059 && (_DWORD)PixelFormatType != 1751410032)
      goto LABEL_87;
LABEL_9:
    if ((int)v13 <= 1717856626)
    {
      if ((_DWORD)v13 == 1278226536)
        goto LABEL_89;
      if ((_DWORD)v13 != 1717855600)
      {
LABEL_87:
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        {
          PixelBufferUtils::pixelFormatAsString(PixelFormatType, v72);
          v62 = SHIBYTE(v75);
          v63 = *(_BYTE **)v72;
          PixelBufferUtils::pixelFormatAsString(v14, (char *)__p);
          v64 = v72;
          if (v62 < 0)
            v64 = v63;
          if (v67 >= 0)
            v65 = __p;
          else
            v65 = (void **)__p[0];
          *(_DWORD *)buf = 136446466;
          v69 = v64;
          v70 = 2082;
          v71 = v65;
          _os_log_error_impl(&dword_20B62B000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "unsupported map format (%{public}s, %{public}s)", buf, 0x16u);
          if (v67 < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v75) < 0)
            operator delete(*(void **)v72);
        }
        return -22956;
      }
    }
    else if ((_DWORD)v13 != 1717856627)
    {
      if ((_DWORD)v13 != 1751411059 && (_DWORD)v13 != 1751410032)
        goto LABEL_87;
LABEL_89:
      Width = CVPixelBufferGetWidth(a1);
      Height = CVPixelBufferGetHeight(a1);
      v17 = CVPixelBufferGetWidth(a2);
      v18 = CVPixelBufferGetHeight(a2);
      BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
      v52 = CVPixelBufferGetBytesPerRow(a2);
      v86.origin.x = a3;
      v86.origin.y = a4;
      v86.size.width = a5;
      v86.size.height = a6;
      if (CGRectIsEmpty(v86))
      {
        a3 = *MEMORY[0x24BDBEFB0];
        a4 = *(double *)(MEMORY[0x24BDBEFB0] + 8);
        a5 = (double)Width;
        a6 = (double)Height;
      }
      if (a5 <= (double)v17 && a6 <= (double)v18)
      {
        if (a3 + a5 > (double)Width || a4 + a6 > (double)Height)
          goto LABEL_101;
        if (a1 != a2)
          CVPixelBufferLockBaseAddress(a1, 1uLL);
        CVPixelBufferLockBaseAddress(a2, 0);
        BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
        v59 = (char *)CVPixelBufferGetBaseAddress(a2);
        if (a5 > 0.0 && a6 > 0.0)
        {
          v60 = 0;
          do
          {
            v61 = 0;
            do
            {
              *(_WORD *)&v59[2 * v61 + v52 * (unint64_t)v60] = *(_WORD *)&BaseAddress[2 * (unint64_t)a3
                                                                                           + 2 * v61
                                                                                           + BytesPerRow
                                                                                           * ((unint64_t)a4 + v60)];
              ++v61;
            }
            while (a5 > (double)v61);
            ++v60;
          }
          while (a6 > (double)v60);
        }
        goto LABEL_111;
      }
      goto LABEL_95;
    }
    Width = CVPixelBufferGetWidth(a1);
    Height = CVPixelBufferGetHeight(a1);
    v17 = CVPixelBufferGetWidth(a2);
    v18 = CVPixelBufferGetHeight(a2);
    v40 = CVPixelBufferGetBytesPerRow(a1);
    v41 = CVPixelBufferGetBytesPerRow(a2);
    v85.origin.x = a3;
    v85.origin.y = a4;
    v85.size.width = a5;
    v85.size.height = a6;
    if (CGRectIsEmpty(v85))
    {
      a3 = *MEMORY[0x24BDBEFB0];
      a4 = *(double *)(MEMORY[0x24BDBEFB0] + 8);
      a6 = (double)Height;
      a5 = (double)Width;
    }
    if (a5 <= (double)v17 && a6 <= (double)v18)
    {
      if (a3 + a5 > (double)Width || a4 + a6 > (double)Height)
        goto LABEL_101;
      if (a1 != a2)
        CVPixelBufferLockBaseAddress(a1, 1uLL);
      CVPixelBufferLockBaseAddress(a2, 0);
      v44 = (char *)CVPixelBufferGetBaseAddress(a1);
      v45 = (char *)CVPixelBufferGetBaseAddress(a2);
      if (a5 > 0.0 && a6 > 0.0)
      {
        v46 = 0;
        do
        {
          v47 = 0;
          do
          {
            _H0 = *(_WORD *)&v44[2 * (unint64_t)a3 + 2 * v47 + v40 * ((unint64_t)a4 + v46)];
            __asm { FCVT            S0, H0 }
            *(_DWORD *)&v45[4 * v47++ + v41 * (unint64_t)v46] = _S0;
          }
          while (a5 > (double)v47);
          ++v46;
        }
        while (a6 > (double)v46);
      }
      goto LABEL_111;
    }
LABEL_95:
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v72 = 134218752;
      *(CGFloat *)&v72[4] = a5;
      v73 = 2048;
      v74 = a6;
      v75 = 1024;
      *(_DWORD *)v76 = v17;
      *(_WORD *)&v76[4] = 1024;
      *(_DWORD *)&v76[6] = v18;
      v54 = MEMORY[0x24BDACB70];
      v55 = "Dimensions mismatch. Cannot fit ROI (%f,%f) inside output (%d,%d)";
      v56 = 34;
LABEL_124:
      _os_log_error_impl(&dword_20B62B000, v54, OS_LOG_TYPE_ERROR, v55, v72, v56);
      return -22957;
    }
    return -22957;
  }
  if ((_DWORD)PixelFormatType == 1278226534)
    goto LABEL_14;
  if ((_DWORD)PixelFormatType == 1278226536)
    goto LABEL_9;
  if ((_DWORD)PixelFormatType != 1717855600)
    goto LABEL_87;
LABEL_14:
  if ((int)v13 > 1717856626)
  {
    if ((_DWORD)v13 != 1717856627)
    {
      if ((_DWORD)v13 != 1751411059 && (_DWORD)v13 != 1751410032)
        goto LABEL_87;
LABEL_22:
      Width = CVPixelBufferGetWidth(a1);
      Height = CVPixelBufferGetHeight(a1);
      v17 = CVPixelBufferGetWidth(a2);
      v18 = CVPixelBufferGetHeight(a2);
      v19 = CVPixelBufferGetBytesPerRow(a1);
      v20 = CVPixelBufferGetBytesPerRow(a2);
      v83.origin.x = a3;
      v83.origin.y = a4;
      v83.size.width = a5;
      v83.size.height = a6;
      if (CGRectIsEmpty(v83))
      {
        a3 = *MEMORY[0x24BDBEFB0];
        a4 = *(double *)(MEMORY[0x24BDBEFB0] + 8);
        a6 = (double)Height;
        a5 = (double)Width;
      }
      if (a5 <= (double)v17 && a6 <= (double)v18)
      {
        if (a3 + a5 > (double)Width || a4 + a6 > (double)Height)
          goto LABEL_101;
        if (a1 != a2)
          CVPixelBufferLockBaseAddress(a1, 1uLL);
        CVPixelBufferLockBaseAddress(a2, 0);
        v23 = (char *)CVPixelBufferGetBaseAddress(a1);
        v24 = (char *)CVPixelBufferGetBaseAddress(a2);
        if (a5 > 0.0 && a6 > 0.0)
        {
          v25 = 0;
          do
          {
            v26 = 0;
            do
            {
              _S0 = *(_DWORD *)&v23[4 * (unint64_t)a3 + 4 * v26 + v19 * ((unint64_t)a4 + v25)];
              __asm { FCVT            H0, S0 }
              *(_WORD *)&v24[2 * v26++ + v20 * (unint64_t)v25] = _S0;
            }
            while (a5 > (double)v26);
            ++v25;
          }
          while (a6 > (double)v25);
        }
        goto LABEL_111;
      }
      goto LABEL_95;
    }
  }
  else if ((_DWORD)v13 != 1278226534)
  {
    if ((_DWORD)v13 != 1278226536)
    {
      if ((_DWORD)v13 != 1717855600)
        goto LABEL_87;
      goto LABEL_43;
    }
    goto LABEL_22;
  }
LABEL_43:
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  v17 = CVPixelBufferGetWidth(a2);
  v18 = CVPixelBufferGetHeight(a2);
  v32 = CVPixelBufferGetBytesPerRow(a1);
  v33 = CVPixelBufferGetBytesPerRow(a2);
  v84.origin.x = a3;
  v84.origin.y = a4;
  v84.size.width = a5;
  v84.size.height = a6;
  if (CGRectIsEmpty(v84))
  {
    a3 = *MEMORY[0x24BDBEFB0];
    a4 = *(double *)(MEMORY[0x24BDBEFB0] + 8);
    a6 = (double)Height;
    a5 = (double)Width;
  }
  if (a5 > (double)v17 || a6 > (double)v18)
    goto LABEL_95;
  if (a3 + a5 > (double)Width || a4 + a6 > (double)Height)
  {
LABEL_101:
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v72 = 134219264;
      *(CGFloat *)&v72[4] = a3;
      v73 = 2048;
      v74 = a4;
      v75 = 2048;
      *(CGFloat *)v76 = a5;
      *(_WORD *)&v76[8] = 2048;
      v77 = a6;
      v78 = 1024;
      v79 = Width;
      v80 = 1024;
      v81 = Height;
      v54 = MEMORY[0x24BDACB70];
      v55 = "Dimensions mismatch. Cannot fit ROI (%f,%f,%f,%f) inside input (%d,%d)";
      v56 = 54;
      goto LABEL_124;
    }
    return -22957;
  }
  if (a1 != a2)
    CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(a2, 0);
  v36 = (char *)CVPixelBufferGetBaseAddress(a1);
  v37 = (char *)CVPixelBufferGetBaseAddress(a2);
  if (a5 > 0.0 && a6 > 0.0)
  {
    v38 = 0;
    do
    {
      v39 = 0;
      do
      {
        *(_DWORD *)&v37[4 * v39 + v33 * (unint64_t)v38] = *(_DWORD *)&v36[4 * (unint64_t)a3
                                                                               + 4 * v39
                                                                               + v32 * ((unint64_t)a4 + v38)];
        ++v39;
      }
      while (a5 > (double)v39);
      ++v38;
    }
    while (a6 > (double)v38);
  }
LABEL_111:
  if (a1 != a2)
    CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(a2, 0);
  return 0;
}

void sub_20B69DD8C(_Unwind_Exception *exception_object)
{
  void *v1;
  int v2;

  if (v2 < 0)
  {
    operator delete(v1);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

float postProcessingConfidenceToLogarithmicVariance(float a1)
{
  float v1;

  v1 = logf(1.0 - a1);
  return v1 + v1;
}

float postProcessingStandardDeviationToLogarithmicVariance(float a1)
{
  float v1;

  v1 = logf(a1);
  return v1 + v1;
}

void sub_20B69E7C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B69ECF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;

  kdebug_trace();

  _Unwind_Resume(a1);
}

void sub_20B69F0A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B69F1E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B69F284(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B69F2F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B69F5A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  void *v5;
  void *v6;
  va_list va;

  va_start(va, a4);

  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_20B69FA34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B69FD2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  va_list va;

  va_start(va, a2);

  objc_sync_exit(v2);
  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_20B69FE04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_20B6A1324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,void *a30,uint64_t a31,char a32)
{
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;

  objc_sync_exit(v32);
  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)&a32);

  _Unwind_Resume(a1);
}

void sub_20B6A15C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)ADJasperColorV2Executor;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_20B6A1980(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B6A1E10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_20B6A2258(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void sub_20B6A236C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_20B6A23C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)ADUserNotifier;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_20B6A2470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_20B6A2730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void ___ZL37ADUserNotificationAlertResultBlockMapv_block_invoke()
{
  id v0;
  void *v1;

  v0 = objc_alloc_init(MEMORY[0x24BDD1650]);
  v1 = (void *)ADUserNotificationAlertResultBlockMap(void)::s_map;
  ADUserNotificationAlertResultBlockMap(void)::s_map = (uint64_t)v0;

}

void userNotificationCallback(__CFUserNotification *a1, char a2)
{
  void *v4;
  void (**v5)(_QWORD, _QWORD);
  id v6;

  if (a1)
  {
    if (ADUserNotificationAlertResultBlockMap(void)::onceToken != -1)
      dispatch_once(&ADUserNotificationAlertResultBlockMap(void)::onceToken, &__block_literal_global);
    v6 = (id)ADUserNotificationAlertResultBlockMap(void)::s_map;
    objc_msgSend(MEMORY[0x24BDD1968], "valueWithPointer:", a1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "objectForKey:", v4);
    v5 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "removeObjectForKey:", v4);
    v5[2](v5, a2 & 3);

  }
}

void sub_20B6A28B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_20B6A29B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_20B6A2A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_20B6A2B24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_20B6A2B74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_20B6A2D8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B6A30A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_20B6A3220(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B6A36A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  void *v5;
  void *v6;
  va_list va;

  va_start(va, a4);

  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_20B6A3868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_20B6A39BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  va_list va;

  va_start(va, a2);

  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_20B6A3AAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_20B6A3B8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);

  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_20B6A3CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  va_list va;

  va_start(va, a6);

  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_20B6A3DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_20B6A3EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_20B6A3F88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_20B6A40A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_20B6A41F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B6A4320(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B6A43B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B6A45A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  void *v5;
  void *v6;
  va_list va;

  va_start(va, a4);

  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_20B6A4760(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B6A49B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  va_list va;

  va_start(va, a2);

  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  objc_sync_exit(v2);

  _Unwind_Resume(a1);
}

void sub_20B6A50A0(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  va_list va;

  va_start(va, a5);

  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  objc_sync_exit(v5);

  _Unwind_Resume(a1);
}

void sub_20B6A51B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)ADMonocularV2Executor;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_20B6A53E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B6A54FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B6A5574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_20B6A55DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_20B6A5650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_20B6A5868(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B6A59F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B6A5A84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_20B6A5BE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B6A5D24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B6A5E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_20B6A5FE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B6A613C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_20B6A62B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B6A6448(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B6A66A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B6A674C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)ADVisualLoggerHandler;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_20B6A67EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);

  _Unwind_Resume(a1);
}

void sub_20B6A686C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);

  _Unwind_Resume(a1);
}

void sub_20B6A6CB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  objc_sync_exit(v2);
  _Unwind_Resume(a1);
}

void sub_20B6A6E48(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_20B6A7070(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v2);

  _Unwind_Resume(a1);
}

void sub_20B6A71C8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_20B6A7508(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_20B6A75B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_20B6A768C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B6A7878(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_20B6A7928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_20B6A7AAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B6A7C1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B6A7D04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)ADLogManager;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_20B6A7DD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v2);

  _Unwind_Resume(a1);
}

void sub_20B6A7F38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B6A82A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B6A83FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B6A8524(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_20B6A8658(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_20B6A8800(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  objc_sync_exit(v2);
  _Unwind_Resume(a1);
}

void sub_20B6A89A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  objc_sync_exit(v2);
  _Unwind_Resume(a1);
}

void sub_20B6A8B6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B6A8CCC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B6A8D8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_20B6A8F0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B6A8FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_20B6A9150(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B6A9228(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B6A9398(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B6A9458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_20B6A95D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B6A969C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_20B6A981C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B6A98F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B6A99B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B6A9B64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B6A9EDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  objc_sync_exit(v2);
  _Unwind_Resume(a1);
}

void sub_20B6AA04C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_20B6AA15C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_20B6AA2AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v3;

  _Unwind_Resume(a1);
}

void sub_20B6AA35C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_20B6AA3DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_20B6AA71C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;

  _Unwind_Resume(a1);
}

void sub_20B6AA8D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B6AAA70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B6AAC50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B6AADE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  va_list va;

  va_start(va, a2);

  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  objc_sync_exit(v2);

  _Unwind_Resume(a1);
}

void sub_20B6AB484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  va_list va;

  va_start(va, a3);

  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  objc_sync_exit(v3);

  _Unwind_Resume(a1);
}

void sub_20B6AB5B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)ADMonocularExecutor;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_20B6AB7E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B6AB948(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B6AB9EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B6ABA68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B6ABCE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  void *v5;
  va_list va;

  va_start(va, a4);
  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);

  _Unwind_Resume(a1);
}

void sub_20B6AC1B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_20B6AC61C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  va_list va;

  va_start(va, a6);
  v12 = v9;

  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  objc_sync_exit(v6);

  _Unwind_Resume(a1);
}

void sub_20B6AC6B8()
{
  JUMPOUT(0x20B6AC69CLL);
}

void sub_20B6AC6C0()
{
  JUMPOUT(0x20B6AC6A4);
}

void sub_20B6AD8AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,void *a35,id obj,uint64_t a37,char a38)
{
  void *v38;
  void *v39;

  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)&a38);
  objc_sync_exit(obj);

  _Unwind_Resume(a1);
}

void sub_20B6ADB04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)ADJasperColorStillsExecutor;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_20B6ADEC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id mergePointCloudsUsingSameTransform(void *a1, _OWORD *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  unsigned int i;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  void *v12;

  v5 = a1;
  v6 = a3;
  objc_msgSend(v6, "count");
  v7 = operator new[]();
  for (i = 0; objc_msgSend(v6, "count") > (unint64_t)i; ++i)
  {
    v9 = (_OWORD *)(v7 + ((unint64_t)i << 6));
    v10 = a2[1];
    *v9 = *a2;
    v9[1] = v10;
    v11 = a2[3];
    v9[2] = a2[2];
    v9[3] = v11;
  }
  objc_msgSend(MEMORY[0x24BE05FE0], "pointCloudByMergingPointClouds:applyingTransforms:projectingToCamera:", v6, v7, v5);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  MEMORY[0x20BD36480](v7, 0x1000C80FA0F61DDLL);

  return v12;
}

void sub_20B6AE140(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B6AE224(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B6AE4EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  va_list va;

  va_start(va, a4);
  v7 = v6;

  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_20B6AE894(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B6AE908()
{
  JUMPOUT(0x20B6AE8FCLL);
}

void sub_20B6AEB34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  va_list va;

  va_start(va, a2);

  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  objc_sync_exit(v2);

  _Unwind_Resume(a1);
}

void sub_20B6AF700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  va_list va;

  va_start(va, a7);

  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  objc_sync_exit(v7);

  _Unwind_Resume(a1);
}

void sub_20B6AF8B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)ADStereoV2Executor;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_20B6AFB7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B6AFED4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_20B6B019C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_20B6B067C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  void *v10;
  void *v11;
  va_list va;

  va_start(va, a10);
  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);

  _Unwind_Resume(a1);
}

double *FundamentalEpipolarError_precomputeFundamental@<X0>(double *result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;

  *(_OWORD *)(a3 + 248) = 0u;
  *(_OWORD *)(a3 + 232) = 0u;
  *(_OWORD *)(a3 + 216) = 0u;
  *(_OWORD *)(a3 + 200) = 0u;
  *(_OWORD *)(a3 + 184) = 0u;
  *(_OWORD *)(a3 + 168) = 0u;
  *(_OWORD *)(a3 + 152) = 0u;
  *(_OWORD *)(a3 + 136) = 0u;
  *(_OWORD *)(a3 + 120) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  v4 = *result;
  v3 = result[1];
  v6 = result[2];
  v5 = result[3];
  v8 = result[4];
  v7 = result[5];
  v9 = -1.0 / *result;
  v10 = v6 / *result;
  v11 = v8 / *result;
  v12 = -1.0 / v3;
  v13 = v5 / v3;
  v14 = v7 / v3;
  v15 = result[6];
  v16 = result[7];
  v17 = result[10];
  v18 = result[11];
  v19 = result[14];
  v20 = result[15];
  v22 = result[8];
  v21 = result[9];
  v23 = result[12];
  v24 = result[13];
  v25 = result[16];
  v26 = result[17];
  v27 = v24 * v19 - v26 * v17;
  v28 = v24 * v20 - v26 * v18;
  v29 = v24 * v25 - v26 * v23;
  v30 = v26 * v15 - v21 * v19;
  v31 = v26 * v16 - v21 * v20;
  v32 = v26 * v22 - v21 * v25;
  v33 = v21 * v17 - v24 * v15;
  v34 = v21 * v18 - v24 * v16;
  v35 = v21 * v23 - v24 * v22;
  v36 = v9 * v27;
  v37 = v9 * v30;
  v38 = v9 * v33;
  v39 = v9 * v28;
  v40 = v9 * v31;
  v41 = v9 * v34;
  v42 = v29 + v11 * v28 + v10 * v27;
  v43 = v32 + v11 * v31 + v10 * v30;
  *(double *)a3 = -1.0 / v3 * v36;
  *(double *)(a3 + 8) = -1.0 / v3 * v39;
  *(double *)(a3 + 16) = -1.0 / v3 * v42;
  *(double *)(a3 + 24) = -1.0 / v3 * v37;
  *(double *)(a3 + 32) = -1.0 / v3 * v40;
  *(double *)(a3 + 40) = -1.0 / v3 * v43;
  *(double *)(a3 + 48) = v38 + v7 / v3 * v37 + v36 * (v5 / v3);
  *(double *)(a3 + 56) = v41 + v7 / v3 * v40 + v39 * (v5 / v3);
  *(double *)(a3 + 64) = v35 + v11 * v34 + v10 * v33 + v7 / v3 * v43 + v42 * (v5 / v3);
  if (a2)
  {
    v44 = v12 * v27;
    v45 = v12 * v28;
    v46 = v12 * v30;
    v47 = v12 * v31;
    v48 = v33 + v14 * v30 + v13 * v27;
    v49 = v34 + v14 * v31 + v13 * v28;
    v50 = 1.0 / v4;
    v51 = v4 * v4;
    v52 = 1.0 / v51;
    v53 = -v6 / v51;
    v54 = -v8 / v51;
    v55 = 1.0 / v3;
    v56 = v3 * v3;
    *(double *)(a3 + 72) = v50 * v44;
    *(double *)(a3 + 80) = v50 * v46;
    *(double *)(a3 + 120) = v52 * v44;
    *(double *)(a3 + 128) = v52 * v45;
    *(double *)(a3 + 136) = v54 * v45 + v44 * v53;
    *(double *)(a3 + 144) = v52 * v46;
    *(double *)(a3 + 152) = v52 * v47;
    *(double *)(a3 + 160) = v54 * v47 + v46 * v53;
    v57 = -v7 / v56;
    *(double *)(a3 + 168) = v52 * v48;
    *(double *)(a3 + 176) = v52 * v49;
    *(double *)(a3 + 88) = v50 * v48;
    *(double *)(a3 + 96) = v55 * v36;
    *(double *)(a3 + 104) = v55 * v39;
    *(double *)(a3 + 112) = v55 * v42;
    *(double *)(a3 + 184) = v54 * v49 + v48 * v53;
    *(double *)(a3 + 192) = 1.0 / v56 * v36;
    *(double *)(a3 + 200) = 1.0 / v56 * v39;
    *(double *)(a3 + 208) = 1.0 / v56 * v42;
    *(double *)(a3 + 216) = 1.0 / v56 * v37;
    *(double *)(a3 + 224) = 1.0 / v56 * v40;
    v58 = 1.0 / v56 * v43;
    v59 = -v5 / v56;
    *(double *)(a3 + 232) = v58;
    *(double *)(a3 + 240) = v57 * v37 + v36 * v59;
    *(double *)(a3 + 248) = v57 * v40 + v39 * v59;
    *(double *)(a3 + 256) = v57 * v43 + v42 * v59;
  }
  return result;
}

const double *FundamentalEpipolarError_ABSVec(const double *result, const double *a2, unsigned int a3, double *a4, float64x2_t *a5)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  uint64_t v49;
  char *v50;
  BOOL v52;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  const double *v60;
  const double *v61;
  float64x2_t *v62;
  uint64_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  uint64_t v67;
  double *v68;
  uint64_t v69;
  double *v70;
  double *v71;
  double v72;
  double v73;
  double v74;
  double v75;
  float64x2x2_t v76;
  float64x2x2_t v77;

  if ((int)a3 >= 1)
  {
    v5 = a4[1];
    v6 = a4[6];
    v7 = a4[7];
    v8 = a4[8];
    v9 = a4[9];
    v10 = a4[10];
    v11 = a4[11];
    v12 = a4[12];
    v13 = a4[13];
    v14 = a4[14];
    v15 = a4[15];
    v16 = a4[16];
    v17 = a4[17];
    v18 = -1.0 / *a4;
    v19 = a4[2] / *a4;
    v20 = a4[4] / *a4;
    v21 = -1.0 / v5;
    v22 = a4[3] / v5;
    v23 = v13 * v14 - v17 * v10;
    v24 = v13 * v15 - v17 * v11;
    v25 = a4[5] / v5;
    v26 = v13 * v16 - v17 * v12;
    v27 = v17 * v6 - v9 * v14;
    v28 = v17 * v7 - v9 * v15;
    v29 = v17 * v8 - v9 * v16;
    v30 = v9 * v10 - v13 * v6;
    v31 = v9 * v11 - v13 * v7;
    v32 = v9 * v12 - v13 * v8;
    v33 = v18 * v23;
    v34 = v18 * v27;
    v35 = v18 * v24;
    v36 = v18 * v28;
    v37 = v26 + v20 * v24 + v19 * v23;
    v38 = v29 + v20 * v28 + v19 * v27;
    v39 = v32 + v20 * v31 + v19 * v30;
    v40 = v21 * (v18 * v23);
    v41 = v21 * (v18 * v24);
    v42 = v21 * v37;
    v43 = v21 * (v18 * v27);
    v44 = v21 * v36;
    v45 = v21 * v38;
    v46 = v18 * v30 + v25 * v34 + v33 * v22;
    v47 = v18 * v31 + v25 * v36 + v35 * v22;
    v48 = v39 + v25 * v38 + v37 * v22;
    if (a3 <= 3)
    {
      v49 = 0;
LABEL_18:
      v67 = a3 - v49;
      v68 = &a5->f64[v49];
      v69 = (16 * v49) | 8;
      v70 = (double *)((char *)result + v69);
      v71 = (double *)((char *)a2 + v69);
      do
      {
        v72 = *(v70 - 1);
        v73 = v42 + v41 * *v70 + v40 * v72;
        v74 = v45 + v44 * *v70 + v43 * v72;
        v75 = v48 + v47 * *v70 + v46 * v72 + *v71 * v74 + v73 * *(v71 - 1);
        *v68++ = sqrt(v75 * v75 / (v74 * v74 + v73 * v73) + 0.00155346992);
        v70 += 2;
        v71 += 2;
        --v67;
      }
      while (v67);
      return result;
    }
    v49 = 0;
    v50 = (char *)&a5->f64[a3];
    v52 = &a2[2 * a3] > (const double *)a5 && v50 > (char *)a2;
    if (v50 > (char *)result && &result[2 * a3] > (const double *)a5)
      goto LABEL_18;
    if (v52)
      goto LABEL_18;
    v54 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v40, 0);
    v55 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v42, 0);
    v56 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v43, 0);
    v57 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v45, 0);
    v49 = a3 & 0xFFFFFFFE;
    v58 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v46, 0);
    v59 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v48, 0);
    v60 = result;
    v61 = a2;
    v62 = a5;
    v63 = v49;
    v64 = (float64x2_t)vdupq_n_s64(0x3F5973B9A04DB73CuLL);
    do
    {
      v76 = vld2q_f64(v60);
      v60 += 4;
      v77 = vld2q_f64(v61);
      v61 += 4;
      v65 = vaddq_f64(v55, vmlaq_f64(vmulq_n_f64(v76.val[1], v41), v76.val[0], v54));
      v66 = vaddq_f64(v57, vmlaq_f64(vmulq_n_f64(v76.val[1], v44), v76.val[0], v56));
      v76.val[0] = vaddq_f64(vaddq_f64(v59, vmlaq_f64(vmulq_n_f64(v76.val[1], v47), v76.val[0], v58)), vmlaq_f64(vmulq_f64(v77.val[1], v66), v77.val[0], v65));
      *v62++ = vsqrtq_f64(vaddq_f64(vdivq_f64(vmulq_f64(v76.val[0], v76.val[0]), vmlaq_f64(vmulq_f64(v66, v66), v65, v65)), v64));
      v63 -= 2;
    }
    while (v63);
    if (v49 != a3)
      goto LABEL_18;
  }
  return result;
}

double FundamentalEpipolarError_MeanVal(uint64_t a1, uint64_t a2, int a3, double *a4, double *a5)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  uint64_t v49;
  double v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  const double *v56;
  float64x2_t v57;
  const double *v58;
  uint64_t v59;
  float64x2_t v60;
  const double *v61;
  const double *v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  uint64_t v67;
  uint64_t v68;
  double *v69;
  double *v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double result;
  float64x2x2_t v76;
  float64x2x2_t v77;
  float64x2x2_t v78;
  float64x2x2_t v79;

  if (a3 < 1)
  {
    v50 = 0.0;
    goto LABEL_10;
  }
  v5 = a4[1];
  v6 = a4[6];
  v7 = a4[7];
  v8 = a4[8];
  v9 = a4[9];
  v10 = a4[10];
  v11 = a4[11];
  v12 = a4[12];
  v13 = a4[13];
  v14 = a4[14];
  v15 = a4[15];
  v16 = a4[16];
  v17 = a4[17];
  v18 = -1.0 / *a4;
  v19 = a4[2] / *a4;
  v20 = a4[4] / *a4;
  v21 = -1.0 / v5;
  v22 = a4[3] / v5;
  v23 = v13 * v14 - v17 * v10;
  v24 = v13 * v15 - v17 * v11;
  v25 = a4[5] / v5;
  v26 = v13 * v16 - v17 * v12;
  v27 = v17 * v6 - v9 * v14;
  v28 = v17 * v7 - v9 * v15;
  v29 = v17 * v8 - v9 * v16;
  v30 = v9 * v10 - v13 * v6;
  v31 = v9 * v11 - v13 * v7;
  v32 = v9 * v12 - v13 * v8;
  v33 = v18 * v23;
  v34 = v18 * v27;
  v35 = v18 * v24;
  v36 = v18 * v28;
  v37 = v26 + v20 * v24 + v19 * v23;
  v38 = v29 + v20 * v28 + v19 * v27;
  v39 = v32 + v20 * v31 + v19 * v30;
  v40 = v21 * (v18 * v23);
  v41 = v21 * (v18 * v24);
  v42 = v21 * v37;
  v43 = v21 * (v18 * v27);
  v44 = v21 * v36;
  v45 = v21 * v38;
  v46 = v18 * v30 + v25 * v34 + v33 * v22;
  v47 = v18 * v31 + v25 * v36 + v35 * v22;
  v48 = v39 + v25 * v38 + v37 * v22;
  if (a3 <= 3)
  {
    v49 = 0;
    v50 = 0.0;
LABEL_8:
    v67 = a3 - v49;
    v68 = (16 * v49) | 8;
    v69 = (double *)(a2 + v68);
    v70 = (double *)(a1 + v68);
    do
    {
      v71 = *(v70 - 1);
      v72 = v42 + v41 * *v70 + v40 * v71;
      v73 = v45 + v44 * *v70 + v43 * v71;
      v74 = v48 + v47 * *v70 + v46 * v71 + *v69 * v73 + v72 * *(v69 - 1);
      v50 = v50 + sqrt(v74 * v74 / (v73 * v73 + v72 * v72) + 0.00155346992);
      v69 += 2;
      v70 += 2;
      --v67;
    }
    while (v67);
    goto LABEL_10;
  }
  v51 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v40, 0);
  v52 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v42, 0);
  v53 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v43, 0);
  v54 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v45, 0);
  v49 = a3 & 0xFFFFFFFC;
  v55 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v46, 0);
  v56 = (const double *)(a2 + 32);
  v57 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v48, 0);
  v58 = (const double *)(a1 + 32);
  v50 = 0.0;
  v59 = v49;
  v60 = (float64x2_t)vdupq_n_s64(0x3F5973B9A04DB73CuLL);
  do
  {
    v61 = v58 - 4;
    v77 = vld2q_f64(v61);
    v78 = vld2q_f64(v58);
    v79 = vld2q_f64(v56);
    v62 = v56 - 4;
    v76 = vld2q_f64(v62);
    v63 = vaddq_f64(v52, vmlaq_f64(vmulq_n_f64(v78.val[1], v41), v78.val[0], v51));
    v64 = vaddq_f64(v54, vmlaq_f64(vmulq_n_f64(v77.val[1], v44), v77.val[0], v53));
    v65 = vaddq_f64(v54, vmlaq_f64(vmulq_n_f64(v78.val[1], v44), v78.val[0], v53));
    v66 = vmlaq_f64(vmulq_n_f64(v77.val[1], v47), v77.val[0], v55);
    v77.val[0] = vaddq_f64(v52, vmlaq_f64(vmulq_n_f64(v77.val[1], v41), v77.val[0], v51));
    v77.val[1] = vaddq_f64(vaddq_f64(v57, v66), vmlaq_f64(vmulq_f64(v76.val[1], v64), v76.val[0], v77.val[0]));
    v78.val[0] = vaddq_f64(vaddq_f64(v57, vmlaq_f64(vmulq_n_f64(v78.val[1], v47), v78.val[0], v55)), vmlaq_f64(vmulq_f64(v79.val[1], v65), v79.val[0], v63));
    v77.val[0] = vsqrtq_f64(vaddq_f64(vdivq_f64(vmulq_f64(v77.val[1], v77.val[1]), vmlaq_f64(vmulq_f64(v64, v64), v77.val[0], v77.val[0])), v60));
    v77.val[1] = vsqrtq_f64(vaddq_f64(vdivq_f64(vmulq_f64(v78.val[0], v78.val[0]), vmlaq_f64(vmulq_f64(v65, v65), v63, v63)), v60));
    v50 = v50 + v77.val[0].f64[0] + v77.val[0].f64[1] + v77.val[1].f64[0] + v77.val[1].f64[1];
    v56 += 8;
    v58 += 8;
    v59 -= 4;
  }
  while (v59);
  if (v49 != a3)
    goto LABEL_8;
LABEL_10:
  result = v50 / (double)a3;
  *a5 = result;
  return result;
}

double FundamentalEpipolarError_MeanValPlusGradient(uint64_t a1, uint64_t a2, int a3, __int128 *a4, double *a5, double *a6)
{
  __int128 v6;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  __int128 v29;
  double v30;
  double v31;
  __int128 v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  const double *v39;
  const double *v40;
  uint64_t v41;
  const double *v42;
  const double *v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  uint64_t v97;
  uint64_t v98;
  double *v99;
  double *v100;
  double v101;
  double v102;
  double v103;
  double v104;
  __int128 v105;
  __int128 v106;
  double v107;
  __int128 v108;
  __int128 v109;
  double v110;
  __int128 v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double result;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  double v165;
  float64x2_t v166;
  float64x2_t v167;
  _OWORD v168[9];
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  double v185;
  float64x2x2_t v186;
  float64x2x2_t v187;
  float64x2x2_t v188;
  float64x2x2_t v189;

  v185 = 0.0;
  v184 = 0u;
  v183 = 0u;
  v182 = 0u;
  v181 = 0u;
  v180 = 0u;
  v179 = 0u;
  v178 = 0u;
  v177 = 0u;
  v176 = 0u;
  v175 = 0u;
  v174 = 0u;
  v173 = 0u;
  v172 = 0u;
  v171 = 0u;
  v170 = 0u;
  v169 = 0u;
  v12 = a4[7];
  v168[6] = a4[6];
  v168[7] = v12;
  v168[8] = a4[8];
  v13 = a4[2];
  v168[3] = a4[3];
  v14 = a4[4];
  v168[5] = a4[5];
  v168[4] = v14;
  v15 = *a4;
  v168[1] = a4[1];
  v168[2] = v13;
  v168[0] = v15;
  FundamentalEpipolarError_precomputeFundamental((double *)v168, 1, (uint64_t)&v169);
  if (a3 < 1)
  {
    v35 = 0.0;
    v34 = 0.0;
    v33 = 0.0;
    v31 = 0.0;
    v30 = 0.0;
    goto LABEL_10;
  }
  v20 = *((double *)&v169 + 1);
  *(_QWORD *)&v16 = v169;
  *(_QWORD *)&v6 = *((_QWORD *)&v170 + 1);
  *(_QWORD *)&v17 = *((_QWORD *)&v171 + 1);
  v21 = *((double *)&v172 + 1);
  *(_QWORD *)&v19 = v172;
  *(_QWORD *)&v18 = *((_QWORD *)&v174 + 1);
  v22 = *(double *)&v174;
  v23 = *((double *)&v175 + 1);
  v24 = *(double *)&v177;
  v26 = *((double *)&v178 + 1);
  v25 = *(double *)&v178;
  v27 = *(double *)&v180;
  if (a3 <= 3)
  {
    v28 = 0;
    v29 = v6;
    v30 = 0.0;
    v31 = 0.0;
    v32 = v16;
    v33 = 0.0;
    v34 = 0.0;
    v35 = 0.0;
    v36 = *(double *)&v179;
    v37 = v185;
    v38 = *(double *)&v170;
LABEL_8:
    v97 = a3 - v28;
    v98 = (16 * v28) | 8;
    v99 = (double *)(a2 + v98);
    v100 = (double *)(a1 + v98);
    do
    {
      v101 = *(v100 - 1);
      v102 = *(v99 - 1);
      v103 = v38 + *v100 * v20 + *(double *)&v32 * v101;
      v104 = *(double *)&v17 + *v100 * *(double *)&v171 + *(double *)&v29 * v101;
      v105 = v17;
      v106 = v18;
      v107 = *(double *)&v173 + *v100 * v21 + *(double *)&v19 * v101;
      v108 = v29;
      v109 = v32;
      v110 = *v100 * *((double *)&v175 + 1) + *(double *)&v175 * v101;
      v111 = v19;
      v112 = *((double *)&v177 + 1) + *v100 * *(double *)&v177 + *((double *)&v176 + 1) * v101;
      v113 = v36 + *v100 * v26 + v25 * v101;
      v114 = *v99 * v104 + v103 * v102 + v107;
      v115 = *(double *)&v182 + *v100 * *((double *)&v181 + 1) + *(double *)&v181 * v101;
      v116 = *v99 * v113 + v102 * v112 + *((double *)&v180 + 1) + *v100 * v27 + *((double *)&v179 + 1) * v101;
      v117 = *((double *)&v183 + 1) + *v100 * *(double *)&v183 + *((double *)&v182 + 1) * v101;
      v118 = *v99 * v22 + v102 * *((double *)&v173 + 1);
      v119 = *v99 * v117 + v102 * v115 + v37 + *v100 * *((double *)&v184 + 1) + *(double *)&v184 * v101;
      v120 = v104 * v104 + v103 * v103;
      v121 = v104 * v113;
      v19 = v111;
      v122 = v121 + v103 * v112;
      v123 = v114 * v114 / v120;
      v124 = v114 / v120;
      v125 = v104 * v117 + v103 * v115;
      v18 = v106;
      v126 = v104 * v22 + v103 * *((double *)&v173 + 1);
      v127 = *(double *)&v106 + v118;
      v27 = *(double *)&v180;
      v26 = *((double *)&v178 + 1);
      v128 = v127 - v124 * v126;
      v129 = v116 - v124 * v122;
      v130 = v119 - v124 * v125;
      v17 = v105;
      v131 = v123 + 0.00155346992;
      v32 = v109;
      v132 = sqrt(v131);
      v133 = v124 / v132;
      v134 = *(double *)&v176 + v110;
      v29 = v108;
      v30 = v30 + v132;
      v31 = v31 + v128 * v133;
      v33 = v33 + v133 * v134;
      v34 = v34 + v133 * v129;
      v35 = v35 + v133 * v130;
      v99 += 2;
      v100 += 2;
      --v97;
    }
    while (v97);
    goto LABEL_10;
  }
  v140 = v16;
  v161 = (float64x2_t)vdupq_lane_s64(v170, 0);
  v162 = (float64x2_t)vdupq_lane_s64(v169, 0);
  v138 = v17;
  v139 = v6;
  v159 = (float64x2_t)vdupq_lane_s64(*((uint64_t *)&v171 + 1), 0);
  v160 = (float64x2_t)vdupq_lane_s64(*((uint64_t *)&v170 + 1), 0);
  v137 = v19;
  v157 = (float64x2_t)vdupq_lane_s64(v173, 0);
  v158 = (float64x2_t)vdupq_lane_s64(v172, 0);
  v155 = (float64x2_t)vdupq_lane_s64(v176, 0);
  v156 = (float64x2_t)vdupq_lane_s64(v175, 0);
  v153 = (float64x2_t)vdupq_lane_s64(*((uint64_t *)&v177 + 1), 0);
  v154 = (float64x2_t)vdupq_lane_s64(*((uint64_t *)&v176 + 1), 0);
  v151 = (float64x2_t)vdupq_lane_s64(v179, 0);
  v152 = (float64x2_t)vdupq_lane_s64(v178, 0);
  v28 = a3 & 0xFFFFFFFC;
  v39 = (const double *)(a2 + 32);
  v149 = (float64x2_t)vdupq_lane_s64(*((uint64_t *)&v180 + 1), 0);
  v150 = (float64x2_t)vdupq_lane_s64(*((uint64_t *)&v179 + 1), 0);
  v40 = (const double *)(a1 + 32);
  v30 = 0.0;
  v41 = v28;
  v147 = (float64x2_t)vdupq_lane_s64(v182, 0);
  v148 = (float64x2_t)vdupq_lane_s64(v181, 0);
  v145 = (float64x2_t)vdupq_lane_s64(*((uint64_t *)&v183 + 1), 0);
  v146 = (float64x2_t)vdupq_lane_s64(*((uint64_t *)&v182 + 1), 0);
  v31 = 0.0;
  v33 = 0.0;
  v143 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v185, 0);
  v144 = (float64x2_t)vdupq_lane_s64(v184, 0);
  v34 = 0.0;
  v136 = v18;
  v35 = 0.0;
  v141 = (float64x2_t)vdupq_lane_s64(*((uint64_t *)&v174 + 1), 0);
  v142 = (float64x2_t)vdupq_lane_s64(*((uint64_t *)&v173 + 1), 0);
  do
  {
    v165 = v30;
    v42 = v40 - 4;
    v188 = vld2q_f64(v42);
    v187 = vld2q_f64(v40);
    v189 = vld2q_f64(v39);
    v43 = v39 - 4;
    v186 = vld2q_f64(v43);
    v44 = vmlaq_f64(vmulq_n_f64(v187.val[1], v20), v187.val[0], v162);
    v45 = vmlaq_f64(vmulq_n_f64(v187.val[1], *(double *)&v171), v187.val[0], v160);
    v164 = vmlaq_f64(vmulq_n_f64(v188.val[1], v21), v188.val[0], v158);
    v163 = vmlaq_f64(vmulq_n_f64(v187.val[1], v21), v187.val[0], v158);
    v166 = vmlaq_f64(vmulq_n_f64(v188.val[1], v23), v188.val[0], v156);
    v167 = vmlaq_f64(vmulq_n_f64(v187.val[1], v23), v187.val[0], v156);
    v46 = vaddq_f64(v161, vmlaq_f64(vmulq_n_f64(v188.val[1], v20), v188.val[0], v162));
    v47 = vmlaq_f64(vmulq_n_f64(v187.val[1], v24), v187.val[0], v154);
    v48 = vaddq_f64(v159, vmlaq_f64(vmulq_n_f64(v188.val[1], *(double *)&v171), v188.val[0], v160));
    v49 = vmlaq_f64(vmulq_n_f64(v187.val[1], v26), v187.val[0], v152);
    v50 = vaddq_f64(v153, vmlaq_f64(vmulq_n_f64(v188.val[1], v24), v188.val[0], v154));
    v51 = vmlaq_f64(vmulq_n_f64(v188.val[1], v27), v188.val[0], v150);
    v52 = vmlaq_f64(vmulq_n_f64(v187.val[1], v27), v187.val[0], v150);
    v53 = vaddq_f64(v151, vmlaq_f64(vmulq_n_f64(v188.val[1], v26), v188.val[0], v152));
    v54 = vmlaq_f64(vmulq_n_f64(v187.val[1], *((double *)&v181 + 1)), v187.val[0], v148);
    v55 = vaddq_f64(v147, vmlaq_f64(vmulq_n_f64(v188.val[1], *((double *)&v181 + 1)), v188.val[0], v148));
    v56 = vmlaq_f64(vmulq_n_f64(v188.val[1], *((double *)&v184 + 1)), v188.val[0], v144);
    v57 = vmlaq_f64(vmulq_n_f64(v187.val[1], *(double *)&v183), v187.val[0], v146);
    v188.val[1] = vaddq_f64(v145, vmlaq_f64(vmulq_n_f64(v188.val[1], *(double *)&v183), v188.val[0], v146));
    v58 = vmlaq_f64(vmulq_f64(v186.val[1], v48), v186.val[0], v46);
    v59 = vmlaq_f64(vmulq_n_f64(v187.val[1], *((double *)&v184 + 1)), v187.val[0], v144);
    v188.val[0] = vmlaq_f64(vmulq_n_f64(v186.val[1], *(double *)&v174), v142, v186.val[0]);
    v187.val[0] = vmlaq_f64(vmulq_f64(v186.val[1], v53), v50, v186.val[0]);
    v187.val[1] = vmlaq_f64(vmulq_f64(v186.val[1], v188.val[1]), v55, v186.val[0]);
    v60 = vaddq_f64(v161, v44);
    v61 = vaddq_f64(v159, v45);
    v62 = vaddq_f64(v153, v47);
    v63 = vaddq_f64(v151, v49);
    v64 = vaddq_f64(v147, v54);
    v65 = vaddq_f64(v145, v57);
    v186.val[1] = vmlaq_f64(vmulq_n_f64(v189.val[1], *(double *)&v174), v142, v189.val[0]);
    v66 = vaddq_f64(v58, vaddq_f64(v157, v164));
    v67 = vaddq_f64(vmlaq_f64(vmulq_f64(v189.val[1], v61), v189.val[0], v60), vaddq_f64(v157, v163));
    v68 = vaddq_f64(vmlaq_f64(vmulq_f64(v189.val[1], v63), v62, v189.val[0]), vaddq_f64(v149, v52));
    v189.val[0] = vaddq_f64(vmlaq_f64(vmulq_f64(v189.val[1], v65), v64, v189.val[0]), vaddq_f64(v143, v59));
    v69 = vmlaq_f64(vmulq_f64(v48, v53), v50, v46);
    v188.val[1] = vmlaq_f64(vmulq_f64(v48, v188.val[1]), v55, v46);
    v22 = *(double *)&v174;
    v189.val[1] = vmlaq_f64(vmulq_f64(v48, v48), v46, v46);
    v70 = vmlaq_f64(vmulq_n_f64(v48, *(double *)&v174), v142, v46);
    v71 = vmlaq_f64(vmulq_f64(v61, v61), v60, v60);
    v72 = vmulq_f64(v61, v63);
    v21 = *((double *)&v172 + 1);
    v73 = vmlaq_f64(v72, v62, v60);
    v74 = vmulq_f64(v67, v67);
    v75 = vdivq_f64(v67, v71);
    v76 = vdivq_f64(v74, v71);
    v77 = vmlaq_f64(vmulq_f64(v61, v65), v64, v60);
    v78 = vmlaq_f64(vmulq_n_f64(v61, *(double *)&v174), v142, v60);
    v79 = vdivq_f64(v66, v189.val[1]);
    v188.val[0] = vmlsq_f64(vaddq_f64(v141, v188.val[0]), v70, v79);
    v80 = vmlsq_f64(vaddq_f64(v141, v186.val[1]), v78, v75);
    v81 = vmlsq_f64(vaddq_f64(v187.val[0], vaddq_f64(v149, v51)), v69, v79);
    v82 = vmulq_f64(v66, v66);
    v27 = *(double *)&v180;
    v26 = *((double *)&v178 + 1);
    v83 = vmlsq_f64(v68, v73, v75);
    v20 = *((double *)&v169 + 1);
    v84 = vmlsq_f64(vaddq_f64(v187.val[1], vaddq_f64(v143, v56)), v188.val[1], v79);
    v85 = (float64x2_t)vdupq_n_s64(0x3F5973B9A04DB73CuLL);
    v86 = vaddq_f64(v76, v85);
    v189.val[0] = vmlsq_f64(v189.val[0], v77, v75);
    v87 = vsqrtq_f64(vaddq_f64(vdivq_f64(v82, v189.val[1]), v85));
    v88 = vdivq_f64(v79, v87);
    v89 = vmulq_f64(v188.val[0], v88);
    v90 = vmulq_f64(v88, vaddq_f64(v155, v166));
    v188.val[0] = vmulq_f64(v88, v81);
    v91 = vmulq_f64(v88, v84);
    v92 = vsqrtq_f64(v86);
    v93 = vdivq_f64(v75, v92);
    v94 = vmulq_f64(v80, v93);
    v188.val[1] = vmulq_f64(v93, vaddq_f64(v155, v167));
    v95 = vmulq_f64(v93, v83);
    v24 = *(double *)&v177;
    v96 = vmulq_f64(v93, v189.val[0]);
    v30 = v165 + v87.f64[0] + v87.f64[1] + v92.f64[0] + v92.f64[1];
    v31 = v31 + v89.f64[0] + v89.f64[1] + v94.f64[0] + v94.f64[1];
    v33 = v33 + v90.f64[0] + v90.f64[1] + v188.val[1].f64[0] + v188.val[1].f64[1];
    v92.f64[0] = v35 + v91.f64[0] + v91.f64[1];
    v91.f64[0] = v34 + v188.val[0].f64[0] + v188.val[0].f64[1] + v95.f64[0];
    v23 = *((double *)&v175 + 1);
    v34 = v91.f64[0] + v95.f64[1];
    v35 = v92.f64[0] + v96.f64[0] + v96.f64[1];
    v39 += 8;
    v40 += 8;
    v41 -= 4;
  }
  while (v41);
  v38 = *(double *)&v170;
  v32 = v140;
  v17 = v138;
  v29 = v139;
  v19 = v137;
  v25 = *(double *)&v178;
  v18 = v136;
  v37 = v185;
  v36 = *(double *)&v179;
  if (v28 != a3)
    goto LABEL_8;
LABEL_10:
  *a5 = v30 / (double)a3;
  *a6 = v31 / (double)a3;
  a6[1] = v33 / (double)a3;
  result = v35 / (double)a3;
  a6[2] = v34 / (double)a3;
  a6[3] = result;
  return result;
}

void SelectPointsWithEpipolarThreshold(const double *a1, const double *a2, signed int a3, double *a4, uint64_t a5, uint64_t a6, _DWORD *a7, uint64_t a8, double a9)
{
  float64x2_t *v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  double *v28;
  uint64_t v29;
  uint64_t v30;

  v18 = (float64x2_t *)malloc_type_malloc(8 * a3, 0x100004000313F17uLL);
  if (v18 && (FundamentalEpipolarError_ABSVec(a1, a2, a3, a4, v18), a3 >= 1))
  {
    v19 = a3;
    if (a8)
    {
      v20 = 0;
      v21 = 0;
      v22 = a2 + 1;
      v23 = a1 + 1;
      do
      {
        if (v18->f64[v20] < a9)
        {
          if (v20 <= 0x7FF)
            *(_BYTE *)(a8 + v20) = 1;
          v24 = 16 * v21;
          *(_QWORD *)(a5 + v24) = *(v23 - 1);
          v25 = (16 * v21) | 8;
          *(_QWORD *)(a5 + v25) = *v23;
          *(_QWORD *)(a6 + v24) = *(v22 - 1);
          *(_QWORD *)(a6 + v25) = *v22;
          ++v21;
        }
        ++v20;
        v22 += 2;
        v23 += 2;
      }
      while (a3 != v20);
    }
    else
    {
      v21 = 0;
      v26 = a2 + 1;
      v27 = a1 + 1;
      v28 = (double *)v18;
      do
      {
        if (*v28 < a9)
        {
          v29 = 16 * v21;
          *(_QWORD *)(a5 + v29) = *(v27 - 1);
          v30 = (16 * v21) | 8;
          *(_QWORD *)(a5 + v30) = *v27;
          *(_QWORD *)(a6 + v29) = *(v26 - 1);
          *(_QWORD *)(a6 + v30) = *v26;
          ++v21;
        }
        v26 += 2;
        v27 += 2;
        ++v28;
        --v19;
      }
      while (v19);
    }
  }
  else
  {
    v21 = 0;
  }
  *a7 = v21;
  free(v18);
}

void sub_20B6B1A6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B6B1B04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B6B1BAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B6B20B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  va_list va;

  va_start(va, a12);

  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_20B6B21E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);

  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_20B6B22A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)ADPearlColorInFieldCalibrationExecutor;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_20B6B2860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_20B6B2C0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a2);

  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  objc_sync_exit(v2);

  _Unwind_Resume(a1);
}

void sub_20B6B2D88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_20B6B2EBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_20B6B322C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B6B3734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22)
{
  void *v22;
  void *v23;
  uint64_t v24;

  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)(v24 - 128));
  _Unwind_Resume(a1);
}

void sub_20B6B462C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

CFTypeRef PixelBufferUtils::copyAttachment(PixelBufferUtils *this, const __CFString *a2, CVAttachmentMode *a3, CVAttachmentMode *a4)
{
  CFTypeRef v4;
  CFTypeRef Attachment;

  v4 = 0;
  if (this)
  {
    if (a2)
    {
      Attachment = CVBufferGetAttachment(this, a2, a3);
      v4 = Attachment;
      if (Attachment)
        CFRetain(Attachment);
    }
  }
  return v4;
}

CFDictionaryRef PixelBufferUtils::copyAttachments(PixelBufferUtils *this, __CVBuffer *a2, CVAttachmentMode a3)
{
  CFDictionaryRef Attachments;
  CFDictionaryRef v4;

  if (!this)
    return 0;
  Attachments = CVBufferGetAttachments(this, (CVAttachmentMode)a2);
  v4 = Attachments;
  if (Attachments)
    CFRetain(Attachments);
  return v4;
}

unint64_t PixelBufferUtils::pixelFormatAsString@<X0>(unint64_t this@<X0>, char *a2@<X8>)
{
  int v3;
  size_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  std::ios_base *v15;
  uint64_t v16;
  uint64_t v17;
  const std::ios_base *v18;
  void *rdbuf;
  std::ios_base::fmtflags fmtflags;
  int v21;
  const std::locale::facet *v22;
  char *v23;
  uint64_t width;
  BOOL v25;
  uint64_t v26;
  size_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  std::locale::__imp *p_b;
  uint64_t v32;
  uint64_t v33;
  void *locale;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  void *__p;
  int v40;
  __int128 v41;
  uint64_t v42;
  char __s[8];
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[8];
  void *v47[2];
  __int128 v48;
  int v49;
  uint64_t v50[19];
  std::locale __b;
  size_t v52;
  int64_t v53;

  if ((_DWORD)this == 32)
  {
    a2[23] = 4;
    v3 = 1111970369;
    goto LABEL_5;
  }
  if ((_DWORD)this == 24)
  {
    a2[23] = 4;
    v3 = 1196569650;
LABEL_5:
    *(_DWORD *)a2 = v3;
    a2[4] = 0;
    return this;
  }
  __s[0] = BYTE3(this);
  __s[1] = BYTE2(this);
  __s[2] = BYTE1(this);
  __s[3] = this;
  __s[4] = 0;
  this = strlen(__s);
  if (this > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v4 = this;
  if (this >= 0x17)
  {
    v6 = (this & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((this | 7) != 0x17)
      v6 = this | 7;
    v7 = v6 + 1;
    v5 = operator new(v6 + 1);
    *((_QWORD *)a2 + 1) = v4;
    *((_QWORD *)a2 + 2) = v7 | 0x8000000000000000;
    *(_QWORD *)a2 = v5;
    goto LABEL_14;
  }
  a2[23] = this;
  v5 = a2;
  if (this)
LABEL_14:
    this = (unint64_t)memcpy(v5, __s, v4);
  *((_BYTE *)v5 + v4) = 0;
  if (a2[23] >= 0)
    v8 = a2;
  else
    v8 = *(char **)a2;
  if (*v8 <= 31)
  {
    v40 = a2[23];
    __p = *(void **)a2;
    v9 = MEMORY[0x24BEDB858];
    v10 = MEMORY[0x24BEDB858] + 104;
    v50[0] = MEMORY[0x24BEDB858] + 104;
    v11 = MEMORY[0x24BEDB858] + 64;
    v12 = (_QWORD *)MEMORY[0x24BEDB7F0];
    v13 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
    v14 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
    v45 = MEMORY[0x24BEDB858] + 64;
    *(_QWORD *)__s = v13;
    *(_QWORD *)&__s[*(_QWORD *)(v13 - 24)] = v14;
    v44 = 0;
    v15 = (std::ios_base *)&__s[*(_QWORD *)(*(_QWORD *)__s - 24)];
    std::ios_base::init(v15, v46);
    v15[1].__vftable = 0;
    v15[1].__fmtflags_ = -1;
    v16 = v12[5];
    v45 = v12[4];
    *(_QWORD *)((char *)&v46[-1] + *(_QWORD *)(v45 - 24)) = v16;
    *(_QWORD *)__s = v12[1];
    *(_QWORD *)&__s[*(_QWORD *)(*(_QWORD *)__s - 24)] = v12[6];
    v50[0] = v10;
    *(_QWORD *)__s = v9 + 24;
    v45 = v11;
    std::streambuf::basic_streambuf();
    v17 = MEMORY[0x24BEDB848];
    v46[0] = MEMORY[0x24BEDB848] + 16;
    *(_OWORD *)v47 = 0u;
    v48 = 0u;
    v49 = 24;
    MEMORY[0x20BD363C0](&v41, &v45);
    if ((_BYTE)v41)
    {
      v18 = (const std::ios_base *)((char *)&v46[-1] + *(_QWORD *)(v45 - 24));
      rdbuf = v18->__rdbuf_;
      fmtflags = v18->__fmtflags_;
      v21 = v18[1].__fmtflags_;
      if (v21 == -1)
      {
        std::ios_base::getloc(v18);
        v22 = std::locale::use_facet(&__b, MEMORY[0x24BEDB350]);
        v21 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 32);
        std::locale::~locale(&__b);
        v18[1].__fmtflags_ = v21;
      }
      if ((fmtflags & 0xB0) == 0x20)
        v23 = "";
      else
        v23 = "0x";
      if (!rdbuf)
        goto LABEL_47;
      width = v18->__width_;
      v25 = width <= 2;
      v26 = width - 2;
      v27 = v25 ? 0 : v26;
      v28 = v23 - "0x";
      if (v23 - "0x" >= 1)
      {
        v29 = v23;
        v30 = (*(uint64_t (**)(void *, const char *, uint64_t))(*(_QWORD *)rdbuf + 96))(rdbuf, "0x", v28);
        v23 = v29;
        if (v30 != v28)
          goto LABEL_47;
      }
      if ((uint64_t)v27 >= 1)
      {
        if (v27 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v38 = v23;
        if (v27 >= 0x17)
        {
          v32 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v27 | 7) != 0x17)
            v32 = v27 | 7;
          v33 = v32 + 1;
          p_b = (std::locale::__imp *)operator new(v32 + 1);
          v52 = v27;
          v53 = v33 | 0x8000000000000000;
          __b.__locale_ = p_b;
        }
        else
        {
          HIBYTE(v53) = v27;
          p_b = (std::locale::__imp *)&__b;
        }
        memset(p_b, v21, v27);
        *((_BYTE *)p_b + v27) = 0;
        if (v53 >= 0)
          locale = &__b;
        else
          locale = __b.__locale_;
        v35 = (*(uint64_t (**)(void *, void *, size_t))(*(_QWORD *)rdbuf + 96))(rdbuf, locale, v27);
        v23 = v38;
        if (SHIBYTE(v53) < 0)
        {
          operator delete(__b.__locale_);
          v23 = v38;
        }
        if (v35 != v27)
          goto LABEL_47;
      }
      v36 = "0x" - v23 + 2;
      if (v36 < 1 || (*(uint64_t (**)(void *))(*(_QWORD *)rdbuf + 96))(rdbuf) == v36)
      {
        v18->__width_ = 0;
        v17 = MEMORY[0x24BEDB848];
      }
      else
      {
LABEL_47:
        v17 = MEMORY[0x24BEDB848];
        std::ios_base::clear((std::ios_base *)((char *)&v46[-1] + *(_QWORD *)(v45 - 24)), *(_DWORD *)((char *)&v46[3] + *(_QWORD *)(v45 - 24)) | 5);
      }
    }
    MEMORY[0x20BD363CC](&v41);
    *(_DWORD *)((char *)v46 + *(_QWORD *)(v45 - 24)) = *(_DWORD *)((_BYTE *)v46 + *(_QWORD *)(v45 - 24)) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<();
    std::stringbuf::str();
    if (v40 < 0)
      operator delete(__p);
    *(_QWORD *)__s = *v12;
    v37 = v12[9];
    *(_QWORD *)&__s[*(_QWORD *)(*(_QWORD *)__s - 24)] = v12[8];
    *(_OWORD *)a2 = v41;
    *((_QWORD *)a2 + 2) = v42;
    v45 = v37;
    v46[0] = v17 + 16;
    if (SBYTE7(v48) < 0)
      operator delete(v47[0]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    return MEMORY[0x20BD36444](v50);
  }
  return this;
}

void sub_20B6B4EAC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, int a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  uint64_t v22;

  if (*(char *)(v22 - 89) < 0)
    operator delete(*(void **)(v22 - 112));
  MEMORY[0x20BD363CC](&a16);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)(v21 + *(_QWORD *)(a21 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x20B6B4DF8);
}

void sub_20B6B4F20()
{
  __cxa_end_catch();
  JUMPOUT(0x20B6B4F58);
}

void sub_20B6B4F30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  std::iostream::~basic_iostream();
  MEMORY[0x20BD36444](a13);
  JUMPOUT(0x20B6B4F60);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x24BEDB7F0];
  v3 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD36444](a1 + 128);
  return a1;
}

uint64_t PixelBufferUtils::pixelFormatFromString(PixelBufferUtils *this, const char *a2)
{
  if (!strcmp((const char *)this, "24RG"))
    return 24;
  if (!strcmp((const char *)this, "ARGB"))
    return 32;
  return bswap32(*(_DWORD *)this);
}

unint64_t PixelBufferUtils::pixelFormatAsFileExtension@<X0>(PixelBufferUtils *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  unint64_t v4;
  char v5;
  _BYTE *v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  int8x8_t v14;
  _BYTE *v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  _BYTE *v19;
  unint64_t v20;
  int8x8_t v21;
  _BYTE *v22;
  _BYTE *v23;

  result = PixelBufferUtils::pixelFormatAsString((unint64_t)this, (char *)a2);
  v4 = *(unsigned __int8 *)(a2 + 23);
  v5 = v4;
  v6 = *(_BYTE **)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if ((v4 & 0x80u) == 0)
    v8 = (_BYTE *)a2;
  else
    v8 = *(_BYTE **)a2;
  if ((v4 & 0x80u) == 0)
    v9 = *(unsigned __int8 *)(a2 + 23);
  else
    v9 = *(_QWORD *)(a2 + 8);
  if (!v9)
    goto LABEL_30;
  v10 = v8;
  if (v9 < 8)
    goto LABEL_60;
  v11 = v9 & 0xFFFFFFFFFFFFFFF8;
  v12 = v8 + 3;
  v13 = v9 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v14 = vceq_s8(*(int8x8_t *)(v12 - 3), (int8x8_t)0x2F2F2F2F2F2F2F2FLL);
    if ((v14.i8[0] & 1) != 0)
    {
      *(v12 - 3) = 58;
      if ((v14.i8[1] & 1) == 0)
      {
LABEL_13:
        if ((v14.i8[2] & 1) == 0)
          goto LABEL_14;
        goto LABEL_22;
      }
    }
    else if ((v14.i8[1] & 1) == 0)
    {
      goto LABEL_13;
    }
    *(v12 - 2) = 58;
    if ((v14.i8[2] & 1) == 0)
    {
LABEL_14:
      if ((v14.i8[3] & 1) == 0)
        goto LABEL_15;
      goto LABEL_23;
    }
LABEL_22:
    *(v12 - 1) = 58;
    if ((v14.i8[3] & 1) == 0)
    {
LABEL_15:
      if ((v14.i8[4] & 1) == 0)
        goto LABEL_16;
      goto LABEL_24;
    }
LABEL_23:
    *v12 = 58;
    if ((v14.i8[4] & 1) == 0)
    {
LABEL_16:
      if ((v14.i8[5] & 1) == 0)
        goto LABEL_17;
      goto LABEL_25;
    }
LABEL_24:
    v12[1] = 58;
    if ((v14.i8[5] & 1) == 0)
    {
LABEL_17:
      if ((v14.i8[6] & 1) != 0)
        goto LABEL_26;
      goto LABEL_18;
    }
LABEL_25:
    v12[2] = 58;
    if ((v14.i8[6] & 1) != 0)
    {
LABEL_26:
      v12[3] = 58;
      if ((v14.i8[7] & 1) == 0)
        goto LABEL_10;
      goto LABEL_27;
    }
LABEL_18:
    if ((v14.i8[7] & 1) == 0)
      goto LABEL_10;
LABEL_27:
    v12[4] = 58;
LABEL_10:
    v12 += 8;
    v13 -= 8;
  }
  while (v13);
  if (v9 == v11)
    goto LABEL_29;
  v10 = &v8[v11];
LABEL_60:
  v22 = &v8[v9];
  do
  {
    if (*v10 == 47)
      *v10 = 58;
    ++v10;
  }
  while (v10 != v22);
LABEL_29:
  v4 = *(unsigned __int8 *)(a2 + 23);
  v6 = *(_BYTE **)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 23);
LABEL_30:
  if (v5 >= 0)
    v15 = (_BYTE *)a2;
  else
    v15 = v6;
  if (v5 >= 0)
    v16 = v4;
  else
    v16 = v7;
  if (!v16)
    return result;
  v17 = v15;
  if (v16 < 8)
    goto LABEL_65;
  v18 = v16 & 0xFFFFFFFFFFFFFFF8;
  v19 = v15 + 3;
  v20 = v16 & 0xFFFFFFFFFFFFFFF8;
  while (2)
  {
    v21 = vceq_s8(*(int8x8_t *)(v19 - 3), (int8x8_t)0x2E2E2E2E2E2E2E2ELL);
    if ((v21.i8[0] & 1) != 0)
    {
      *(v19 - 3) = 95;
      if ((v21.i8[1] & 1) != 0)
        goto LABEL_50;
LABEL_42:
      if ((v21.i8[2] & 1) == 0)
        goto LABEL_43;
LABEL_51:
      *(v19 - 1) = 95;
      if ((v21.i8[3] & 1) != 0)
        goto LABEL_52;
LABEL_44:
      if ((v21.i8[4] & 1) == 0)
        goto LABEL_45;
LABEL_53:
      v19[1] = 95;
      if ((v21.i8[5] & 1) != 0)
        goto LABEL_54;
LABEL_46:
      if ((v21.i8[6] & 1) == 0)
        goto LABEL_47;
LABEL_55:
      v19[3] = 95;
      if ((v21.i8[7] & 1) != 0)
LABEL_56:
        v19[4] = 95;
    }
    else
    {
      if ((v21.i8[1] & 1) == 0)
        goto LABEL_42;
LABEL_50:
      *(v19 - 2) = 95;
      if ((v21.i8[2] & 1) != 0)
        goto LABEL_51;
LABEL_43:
      if ((v21.i8[3] & 1) == 0)
        goto LABEL_44;
LABEL_52:
      *v19 = 95;
      if ((v21.i8[4] & 1) != 0)
        goto LABEL_53;
LABEL_45:
      if ((v21.i8[5] & 1) == 0)
        goto LABEL_46;
LABEL_54:
      v19[2] = 95;
      if ((v21.i8[6] & 1) != 0)
        goto LABEL_55;
LABEL_47:
      if ((v21.i8[7] & 1) != 0)
        goto LABEL_56;
    }
    v19 += 8;
    v20 -= 8;
    if (v20)
      continue;
    break;
  }
  if (v16 == v18)
    return result;
  v17 = &v15[v18];
LABEL_65:
  v23 = &v15[v16];
  do
  {
    if (*v17 == 46)
      *v17 = 95;
    ++v17;
  }
  while (v17 != v23);
  return result;
}

uint64_t PixelBufferUtils::pixelFormatFromFileExtension(PixelBufferUtils *this, const char *a2)
{
  id v2;
  void *v3;
  void *v4;
  unsigned int *v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", this);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v2, "isEqualToString:", &stru_24C421AD8) & 1) != 0 || objc_msgSend(v2, "length") != 4)
  {
    v6 = 0;
  }
  else
  {
    objc_msgSend(v2, "stringByReplacingOccurrencesOfString:withString:", CFSTR(":"), CFSTR("/"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v3, "stringByReplacingOccurrencesOfString:withString:", CFSTR("_"), CFSTR("."));
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    v2 = objc_retainAutorelease(v4);
    v5 = (unsigned int *)objc_msgSend(v2, "UTF8String");
    if (!strcmp((const char *)v5, "24RG"))
    {
      v6 = 24;
    }
    else if (!strcmp((const char *)v5, "ARGB"))
    {
      v6 = 32;
    }
    else
    {
      v6 = bswap32(*v5);
    }
  }

  return v6;
}

void sub_20B6B53D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t PixelBufferUtils::wrapAsDifferentPixelFormat(PixelBufferUtils *this, __CVBuffer *a2, CVPixelBufferRef *a3, __CVBuffer **a4)
{
  OSType v5;
  const __CFAllocator *v7;
  size_t Width;
  size_t Height;
  void *BaseAddress;
  size_t BytesPerRow;

  v5 = a2;
  CVPixelBufferRetain(this);
  CVPixelBufferLockBaseAddress(this, 1uLL);
  v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Width = CVPixelBufferGetWidth(this);
  Height = CVPixelBufferGetHeight(this);
  BaseAddress = CVPixelBufferGetBaseAddress(this);
  BytesPerRow = CVPixelBufferGetBytesPerRow(this);
  CVPixelBufferCreateWithBytes(v7, Width, Height, v5, BaseAddress, BytesPerRow, (CVPixelBufferReleaseBytesCallback)pixelBufferDeallocator, this, 0, a3);
  return CVPixelBufferUnlockBaseAddress(this, 1uLL);
}

void PixelBufferUtils::asVImageBuffer(PixelBufferUtils *this@<X0>, __CVBuffer *a2@<X1>, CGRect a3@<0:D0, 8:D1, 16:D2, 24:D3>, vImage_Buffer *a4@<X8>)
{
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  void *BaseAddressOfPlane;
  size_t HeightOfPlane;
  size_t WidthOfPlane;
  size_t BytesPerRowOfPlane;
  PixelBufferUtils *PixelFormatType;
  _QWORD v16[4];
  CGRect v17;

  height = a3.size.height;
  width = a3.size.width;
  y = a3.origin.y;
  x = a3.origin.x;
  BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(this, (size_t)a2);
  HeightOfPlane = CVPixelBufferGetHeightOfPlane(this, (size_t)a2);
  WidthOfPlane = CVPixelBufferGetWidthOfPlane(this, (size_t)a2);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(this, (size_t)a2);
  if (!BaseAddressOfPlane)
  {
    NSLog(CFSTR("%s:%d - ERROR - asVImageBuffer returned null pointer. Did you forget to lock the CVPixelBuffer before use?"), "asVImageBuffer", 231);
    BytesPerRowOfPlane = 0;
    WidthOfPlane = 0;
    HeightOfPlane = 0;
  }
  v16[0] = BaseAddressOfPlane;
  v16[1] = HeightOfPlane;
  v16[2] = WidthOfPlane;
  v16[3] = BytesPerRowOfPlane;
  PixelFormatType = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(this);
  v17.origin.x = x;
  v17.origin.y = y;
  v17.size.width = width;
  v17.size.height = height;
  cropVImageBuffer(a4, (uint64_t)v16, v17, PixelFormatType, (uint64_t)a2);
}

void cropVImageBuffer(vImage_Buffer *a1, uint64_t a2, CGRect a3, PixelBufferUtils *a4, uint64_t a5)
{
  double height;
  double width;
  double y;
  double x;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  vImagePixelCount v20;
  void *v21;
  vImagePixelCount v22;
  unint64_t v23;
  BOOL v24;
  BOOL v25;

  height = a3.size.height;
  width = a3.size.width;
  y = a3.origin.y;
  x = a3.origin.x;
  v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)&a1->data = *(_OWORD *)a2;
  *(_OWORD *)&a1->width = v13;
  *(double *)&v13 = y;
  if (!CGRectIsEmpty(a3))
  {
    v14 = PixelBufferUtils::verticalSubsamplingForPixelFormat(a4, a5);
    v15 = PixelBufferUtils::horizontalSubsamplingForPixelFormat(a4, a5);
    v16 = PixelBufferUtils::pixelSizeForPixelFormat(a4, a5);
    v17 = *(_QWORD *)(a2 + 24);
    v19 = *(_QWORD *)a2;
    v18 = *(_QWORD *)(a2 + 8);
    v20 = vcvtpd_u64_f64(width / (double)v15);
    v21 = (void *)(*(_QWORD *)a2 + v17 * ((unint64_t)y / v14) + (unint64_t)x / v15 * v16);
    v22 = vcvtpd_u64_f64(height / (double)v14);
    a1->height = v22;
    a1->width = v20;
    a1->data = v21;
    v23 = v19 + v18 * v17;
    v24 = (unint64_t)v21 < v19 || (unint64_t)v21 >= v23;
    if (v24 || (width >= (double)v20 ? (v25 = height < (double)v22) : (v25 = 1), v25))
    {
      NSLog(CFSTR("%s:%d - ERROR - crop origin (%2.2f,%2.2f) size (%2.2f, %2.2f) is outside image bounds (%lu, %lu)"), "cropVImageBuffer", 206, *(_QWORD *)&x, *(_QWORD *)&y, *(_QWORD *)&width, *(_QWORD *)&height, *(_QWORD *)(a2 + 16) * v15, v18 * v14);
      *(_OWORD *)&a1->data = 0u;
      *(_OWORD *)&a1->width = 0u;
    }
  }
}

uint64_t PixelBufferUtils::verticalSubsamplingForPixelFormat(PixelBufferUtils *this, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void **v12;
  void *__p[2];
  char v15;

  v4 = 1;
  if ((int)this > 1380401728)
  {
    if ((int)this > 1717856626)
    {
      if ((int)this <= 1751411058)
      {
        if ((_DWORD)this == 1717856627)
          return v4;
        v5 = 1751410032;
      }
      else
      {
        if ((_DWORD)this == 1751411059 || (_DWORD)this == 1919365990)
          return v4;
        v5 = 1932996149;
      }
    }
    else if ((int)this <= 1380411456)
    {
      if ((_DWORD)this == 1380401729)
        return v4;
      v5 = 1380410945;
    }
    else
    {
      if ((_DWORD)this == 1380411457 || (_DWORD)this == 1647392359)
        return v4;
      v5 = 1717855600;
    }
  }
  else if ((int)this > 875704437)
  {
    if ((int)this <= 1111970368)
    {
      if ((_DWORD)this == 875704438)
        goto LABEL_35;
      v5 = 1094862674;
    }
    else
    {
      if ((_DWORD)this == 1111970369 || (_DWORD)this == 1278226488)
        return v4;
      v5 = 1278226536;
    }
  }
  else
  {
    if ((int)this > 825437746)
    {
      if ((_DWORD)this == 825437747 || (_DWORD)this == 843264104)
        return v4;
      if ((_DWORD)this != 875704422)
        goto LABEL_30;
LABEL_35:
      if (a2)
        return 2;
      else
        return 1;
    }
    if ((_DWORD)this == 32)
      return v4;
    v5 = 825306677;
  }
  if ((_DWORD)this == v5)
    return v4;
LABEL_30:
  CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
  v6 = objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    v7 = (void *)v6;
    if (PixelBufferUtils::planeCountForPixelFormat(this))
    {
      objc_msgSend(v7, "objectForKeyedSubscript:", *MEMORY[0x24BDC5790]);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "objectAtIndexedSubscript:", a2);
      v9 = objc_claimAutoreleasedReturnValue();

      v7 = (void *)v9;
    }
    objc_msgSend(v7, "objectForKeyedSubscript:", *MEMORY[0x24BDC5798]);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v10;
    if (v10)
      v4 = (int)objc_msgSend(v10, "intValue");
    else
      v4 = 1;

  }
  else
  {
    PixelBufferUtils::pixelFormatAsString((unint64_t)this, (char *)__p);
    if (v15 >= 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    NSLog(CFSTR("%s:%d - ERROR - pixel format %08x (\"%s\") not supported\n"), "verticalSubsamplingForPixelFormat", 416, this, v12);
    if (v15 < 0)
      operator delete(__p[0]);
    return 0;
  }
  return v4;
}

void sub_20B6B59A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B6B59C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t PixelBufferUtils::horizontalSubsamplingForPixelFormat(PixelBufferUtils *this, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void **v12;
  void *__p[2];
  char v15;

  v4 = 1;
  if ((int)this > 1380401728)
  {
    if ((int)this > 1717856626)
    {
      if ((int)this <= 1751411058)
      {
        if ((_DWORD)this == 1717856627)
          return v4;
        v5 = 1751410032;
      }
      else
      {
        if ((_DWORD)this == 1751411059 || (_DWORD)this == 1919365990)
          return v4;
        v5 = 1932996149;
      }
    }
    else if ((int)this <= 1380411456)
    {
      if ((_DWORD)this == 1380401729)
        return v4;
      v5 = 1380410945;
    }
    else
    {
      if ((_DWORD)this == 1380411457 || (_DWORD)this == 1647392359)
        return v4;
      v5 = 1717855600;
    }
  }
  else if ((int)this > 875704437)
  {
    if ((int)this <= 1111970368)
    {
      if ((_DWORD)this == 875704438)
        goto LABEL_35;
      v5 = 1094862674;
    }
    else
    {
      if ((_DWORD)this == 1111970369 || (_DWORD)this == 1278226488)
        return v4;
      v5 = 1278226536;
    }
  }
  else
  {
    if ((int)this > 825437746)
    {
      if ((_DWORD)this == 825437747 || (_DWORD)this == 843264104)
        return v4;
      if ((_DWORD)this != 875704422)
        goto LABEL_30;
LABEL_35:
      if (a2)
        return 2;
      else
        return 1;
    }
    if ((_DWORD)this == 32)
      return v4;
    v5 = 825306677;
  }
  if ((_DWORD)this == v5)
    return v4;
LABEL_30:
  CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
  v6 = objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    v7 = (void *)v6;
    if (PixelBufferUtils::planeCountForPixelFormat(this))
    {
      objc_msgSend(v7, "objectForKeyedSubscript:", *MEMORY[0x24BDC5790]);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "objectAtIndexedSubscript:", a2);
      v9 = objc_claimAutoreleasedReturnValue();

      v7 = (void *)v9;
    }
    objc_msgSend(v7, "objectForKeyedSubscript:", *MEMORY[0x24BDC5780]);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v10;
    if (v10)
      v4 = (int)objc_msgSend(v10, "intValue");
    else
      v4 = 1;

  }
  else
  {
    PixelBufferUtils::pixelFormatAsString((unint64_t)this, (char *)__p);
    if (v15 >= 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    NSLog(CFSTR("%s:%d - ERROR - pixel format %08x (\"%s\") not supported\n"), "horizontalSubsamplingForPixelFormat", 369, this, v12);
    if (v15 < 0)
      operator delete(__p[0]);
    return 0;
  }
  return v4;
}

void sub_20B6B5CB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B6B5CD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

unint64_t PixelBufferUtils::pixelSizeForPixelFormat(PixelBufferUtils *this, uint64_t a2)
{
  int v4;
  int v5;
  unint64_t v6;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  float v13;
  void **v14;
  void *__p[2];
  char v16;

  if ((int)this > 1278226535)
  {
    if ((int)this <= 1717855599)
    {
      if ((int)this <= 1380410944)
      {
        if ((_DWORD)this != 1278226536)
        {
          if ((_DWORD)this != 1380401729)
            goto LABEL_41;
          return 4;
        }
        return 2;
      }
      if ((_DWORD)this == 1380410945)
        return 16;
      if ((_DWORD)this == 1380411457)
        return 8;
      v5 = 1647392359;
    }
    else if ((int)this > 1751411058)
    {
      if ((_DWORD)this == 1751411059)
        return 2;
      if ((_DWORD)this == 1919365990)
        return 4;
      v5 = 1932996149;
    }
    else
    {
      if ((_DWORD)this == 1717855600 || (_DWORD)this == 1717856627)
        return 4;
      v5 = 1751410032;
    }
LABEL_33:
    if ((_DWORD)this != v5)
      goto LABEL_41;
    return 2;
  }
  if ((int)this <= 875704437)
  {
    if ((int)this > 825437746)
    {
      if ((_DWORD)this != 825437747)
      {
        if ((_DWORD)this != 843264104)
        {
          v4 = 875704422;
          goto LABEL_16;
        }
        return 4;
      }
      return 2;
    }
    if ((_DWORD)this == 32)
      return 4;
    v5 = 825306677;
    goto LABEL_33;
  }
  if ((int)this > 1094862673)
  {
    if ((_DWORD)this != 1094862674 && (_DWORD)this != 1111970369)
    {
      if ((_DWORD)this == 1278226488)
        return 1;
      goto LABEL_41;
    }
    return 4;
  }
  if ((_DWORD)this == 875704438 || (_DWORD)this == 875836518)
    goto LABEL_17;
  v4 = 875836534;
LABEL_16:
  if ((_DWORD)this == v4)
  {
LABEL_17:
    if (a2)
      return 2;
    else
      return 1;
  }
LABEL_41:
  CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (PixelBufferUtils::planeCountForPixelFormat(this))
  {
    objc_msgSend(v8, "objectForKeyedSubscript:", *MEMORY[0x24BDC5790]);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "objectAtIndexedSubscript:", a2);
    v10 = objc_claimAutoreleasedReturnValue();

    v8 = (void *)v10;
  }
  objc_msgSend(v8, "objectForKeyedSubscript:", *MEMORY[0x24BDC5718]);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v11;
  if (v11)
  {
    objc_msgSend(v11, "floatValue");
    v6 = vcvtps_u32_f32(v13 * 0.125);

  }
  else
  {

    PixelBufferUtils::pixelFormatAsString((unint64_t)this, (char *)__p);
    if (v16 >= 0)
      v14 = __p;
    else
      v14 = (void **)__p[0];
    NSLog(CFSTR("%s:%d - ERROR - pixel format %08x (\"%s\") not supported\n"), "pixelSizeForPixelFormat", 464, this, v14);
    if (v16 < 0)
      operator delete(__p[0]);
    return 0;
  }
  return v6;
}

void sub_20B6B6010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void PixelBufferUtils::asVImageBuffer(PixelBufferUtils *this@<X0>, CGRect a2@<0:D0, 8:D1, 16:D2, 24:D3>, vImage_Buffer *a3@<X8>)
{
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  void *BaseAddress;
  size_t v11;
  size_t v12;
  size_t BytesPerRow;
  PixelBufferUtils *PixelFormatType;
  _QWORD v15[4];
  CGRect v16;

  height = a2.size.height;
  width = a2.size.width;
  y = a2.origin.y;
  x = a2.origin.x;
  BaseAddress = CVPixelBufferGetBaseAddress(this);
  v11 = CVPixelBufferGetHeight(this);
  v12 = CVPixelBufferGetWidth(this);
  BytesPerRow = CVPixelBufferGetBytesPerRow(this);
  if (!BaseAddress)
  {
    NSLog(CFSTR("%s:%d - ERROR - asVImageBuffer returned null pointer. Did you forget to lock the CVPixelBuffer before use?"), "asVImageBuffer", 249);
    BytesPerRow = 0;
    v12 = 0;
    v11 = 0;
  }
  v15[0] = BaseAddress;
  v15[1] = v11;
  v15[2] = v12;
  v15[3] = BytesPerRow;
  PixelFormatType = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(this);
  v16.origin.x = x;
  v16.origin.y = y;
  v16.size.width = width;
  v16.size.height = height;
  cropVImageBuffer(a3, (uint64_t)v15, v16, PixelFormatType, 0);
}

void PixelBufferUtils::releasePixelBuffer(CVPixelBufferRef *this, __CVBuffer **a2)
{
  CVPixelBufferRelease(*this);
  *this = 0;
}

CVPixelBufferRef PixelBufferUtils::createPixelBuffer(size_t width, size_t height, OSType pixelFormatType, int a4)
{
  const __CFDictionary *BufferAttributes;
  const __CFAllocator *v8;
  CVPixelBufferRef pixelBufferOut;

  BufferAttributes = 0;
  pixelBufferOut = 0;
  v8 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  if (a4)
    BufferAttributes = (const __CFDictionary *)getBufferAttributes();
  if (CVPixelBufferCreate(v8, width, height, pixelFormatType, BufferAttributes, &pixelBufferOut))
    return 0;
  else
    return pixelBufferOut;
}

uint64_t getBufferAttributes(void)
{
  unsigned __int8 v0;
  uint64_t v2;
  _QWORD v3[2];
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  {
    v2 = *MEMORY[0x24BDC55D0];
    v3[0] = *MEMORY[0x24BDC5668];
    v3[1] = v2;
    v4[0] = MEMORY[0x24BDBD1B8];
    v4[1] = &unk_24C435010;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v4, v3, 2);
    getBufferAttributes(void)::bufAttr = objc_claimAutoreleasedReturnValue();
  }
  return getBufferAttributes(void)::bufAttr;
}

void sub_20B6B62AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CVPixelBufferRef PixelBufferUtils::createPixelBufferWithSameSizeAndFormat(PixelBufferUtils *this, __CVBuffer *a2)
{
  int v2;
  size_t Width;
  size_t Height;
  OSType PixelFormatType;
  const __CFDictionary *BufferAttributes;
  const __CFAllocator *v8;
  CVPixelBufferRef pixelBufferOut;

  v2 = (int)a2;
  Width = CVPixelBufferGetWidth(this);
  Height = CVPixelBufferGetHeight(this);
  PixelFormatType = CVPixelBufferGetPixelFormatType(this);
  BufferAttributes = 0;
  pixelBufferOut = 0;
  v8 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  if (v2)
    BufferAttributes = (const __CFDictionary *)getBufferAttributes();
  if (CVPixelBufferCreate(v8, Width, Height, PixelFormatType, BufferAttributes, &pixelBufferOut))
    return 0;
  else
    return pixelBufferOut;
}

CVPixelBufferRef PixelBufferUtils::createPixelBufferWithSameSize(PixelBufferUtils *this, __CVBuffer *a2, int a3)
{
  OSType v4;
  size_t Width;
  size_t Height;
  const __CFDictionary *BufferAttributes;
  const __CFAllocator *v9;
  CVPixelBufferRef pixelBufferOut;

  v4 = a2;
  Width = CVPixelBufferGetWidth(this);
  Height = CVPixelBufferGetHeight(this);
  BufferAttributes = 0;
  pixelBufferOut = 0;
  v9 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  if (a3)
    BufferAttributes = (const __CFDictionary *)getBufferAttributes();
  if (CVPixelBufferCreate(v9, Width, Height, v4, BufferAttributes, &pixelBufferOut))
    return 0;
  else
    return pixelBufferOut;
}

CVPixelBufferRef PixelBufferUtils::createPixelBuffer(OSType pixelFormatType, CGSize a2, int a3)
{
  double height;
  double width;
  const __CFDictionary *BufferAttributes;
  const __CFAllocator *v7;
  CVPixelBufferRef pixelBufferOut;

  height = a2.height;
  width = a2.width;
  BufferAttributes = 0;
  pixelBufferOut = 0;
  v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  if (a3)
    BufferAttributes = (const __CFDictionary *)getBufferAttributes();
  if (CVPixelBufferCreate(v7, (unint64_t)width, (unint64_t)height, pixelFormatType, BufferAttributes, &pixelBufferOut))
  {
    return 0;
  }
  else
  {
    return pixelBufferOut;
  }
}

BOOL PixelBufferUtils::isPixelFormatCompressed(PixelBufferUtils *this)
{
  void *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  _BOOL8 v10;
  void *v11;

  CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = 0;
  v4 = *MEMORY[0x24BDC5790];
  v5 = *MEMORY[0x24BDC5740];
  while (v3 < PixelBufferUtils::planeCountForPixelFormat(this))
  {
    objc_msgSend(v2, "objectForKeyedSubscript:", v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "objectAtIndexedSubscript:", v3);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v7, "objectForKeyedSubscript:", v5);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = v8;
    if (v8 && objc_msgSend(v8, "intValue"))
    {

      v10 = 1;
      goto LABEL_10;
    }

    ++v3;
  }
  objc_msgSend(v2, "objectForKeyedSubscript:", v5);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v11;
  if (v11)
    v10 = objc_msgSend(v11, "intValue") != 0;
  else
    v10 = 0;
LABEL_10:

  return v10;
}

void sub_20B6B657C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

PixelBufferUtils *PixelBufferUtils::uncompressedEquivalentForPixelFormat(PixelBufferUtils *this)
{
  void *v2;
  void *v3;
  void *v4;
  void **v5;
  void *__p[2];
  char v8;

  CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKeyedSubscript:", *MEMORY[0x24BDC5778]);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    this = (PixelBufferUtils *)objc_msgSend(v3, "unsignedIntValue");
  }
  else if (PixelBufferUtils::isPixelFormatCompressed(this))
  {
    PixelBufferUtils::pixelFormatAsString((unint64_t)this, (char *)__p);
    if (v8 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    NSLog(CFSTR("%s:%d - ERROR - pixel format %08x (\"%s\") not supported\n"), "uncompressedEquivalentForPixelFormat", 593, this, v5);
    if (v8 < 0)
      operator delete(__p[0]);
    this = 0;
  }

  return this;
}

void sub_20B6B6690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;
  void *v20;

  if (a19 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

__CVBuffer *PixelBufferUtils::createRotatedPixelBuffer(PixelBufferUtils *this, __CVBuffer *a2, int a3)
{
  size_t Width;
  size_t Height;
  OSType PixelFormatType;
  size_t v9;
  const __CFAllocator *v10;
  const __CFDictionary *BufferAttributes;
  __CVBuffer *v12;
  CVPixelBufferRef pixelBufferOut;

  if (!this)
    return 0;
  Width = CVPixelBufferGetWidth(this);
  Height = CVPixelBufferGetHeight(this);
  PixelFormatType = CVPixelBufferGetPixelFormatType(this);
  if ((a2 & 0xFFFFFFFD) == 1)
    v9 = Height;
  else
    v9 = Width;
  if ((a2 & 0xFFFFFFFD) != 1)
    Width = Height;
  pixelBufferOut = 0;
  v10 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  BufferAttributes = (const __CFDictionary *)getBufferAttributes();
  if (CVPixelBufferCreate(v10, v9, Width, PixelFormatType, BufferAttributes, &pixelBufferOut))
    v12 = 0;
  else
    v12 = pixelBufferOut;
  if (PixelBufferUtils::rotatePixelBuffer(this, v12, a2, a3))
  {
    CVPixelBufferRelease(v12);
    return 0;
  }
  return v12;
}

uint64_t PixelBufferUtils::rotatePixelBuffer(CVPixelBufferRef pixelBuffer, __CVBuffer *a2, __CVBuffer *a3, int a4)
{
  uint64_t result;
  uint8_t v8;
  unsigned int v9;
  size_t Width;
  size_t Height;
  size_t v12;
  signed int PixelFormatType;
  int v14;
  unint64_t v15;
  CGRect *v16;
  vImage_Error v17;
  vImage_Error v18;
  int v19;
  int v20;
  int v21;
  vImage_Buffer *p_p;
  vImage_Buffer __p;
  vImage_Buffer dest;
  vImage_Buffer src;
  uint16_t backColor[4];
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  result = 0xFFFFFFFFLL;
  if (pixelBuffer && a2)
  {
    v8 = a3;
    v9 = a3 & 0xFFFFFFFD;
    Width = CVPixelBufferGetWidth(pixelBuffer);
    if (v9 == 1)
    {
      if (Width != CVPixelBufferGetHeight(a2)
        || (Height = CVPixelBufferGetHeight(pixelBuffer), Height != CVPixelBufferGetWidth(a2)))
      {
LABEL_15:
        NSLog(CFSTR("%s:%d - ERROR - Invalid output buffer dimensions"), "rotatePixelBuffer", 879);
        return 0xFFFFFFFFLL;
      }
    }
    else
    {
      if (Width != CVPixelBufferGetWidth(a2))
        goto LABEL_15;
      v12 = CVPixelBufferGetHeight(pixelBuffer);
      if (v12 != CVPixelBufferGetHeight(a2))
        goto LABEL_15;
    }
    PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
    if (a4)
    {
      if (PixelFormatType <= 1717856626)
      {
        if (PixelFormatType > 1380410944)
        {
          if (PixelFormatType == 1380410945)
            goto LABEL_26;
          v14 = 1380411457;
        }
        else
        {
          if (PixelFormatType == 825306677)
            goto LABEL_26;
          v14 = 825437747;
        }
      }
      else if (PixelFormatType <= 1919365989)
      {
        if (PixelFormatType == 1717856627)
          goto LABEL_26;
        v14 = 1751411059;
      }
      else
      {
        if (PixelFormatType == 1919365990 || PixelFormatType == 1919365992)
          goto LABEL_26;
        v14 = 1932996149;
      }
      if (PixelFormatType != v14)
      {
        src.data = 0;
        if (VTImageRotationSessionCreate())
        {
          MEMORY[0x20BD361E0](src.data);
          CFRelease(src.data);
          NSLog(CFSTR("%s:%d - ERROR - Unable to create image rotation session"), "createVTRotationSession", 802);
          v21 = MEMORY[0x20BD361EC](0, pixelBuffer, a2);
        }
        else
        {
          v21 = MEMORY[0x20BD361EC](src.data, pixelBuffer, a2);
        }
        if (!v21)
          return 0;
        NSLog(CFSTR("%s:%d - ERROR - VTImageRotationSessionTransferImage operation failed"), "rotatePixelBufferVT", 842);
        return 0xFFFFFFFFLL;
      }
    }
LABEL_26:
    v15 = CVPixelBufferGetPixelFormatType(pixelBuffer);
    CVPixelBufferLockBaseAddress(a2, 0);
    CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
    memset(&src, 0, sizeof(src));
    v16 = (CGRect *)MEMORY[0x24BDBF090];
    PixelBufferUtils::asVImageBuffer(pixelBuffer, *MEMORY[0x24BDBF090], &src);
    memset(&dest, 0, sizeof(dest));
    PixelBufferUtils::asVImageBuffer(a2, *v16, &dest);
    if (v9 == 1)
    {
      if (src.width != dest.height || src.height != dest.width)
      {
LABEL_40:
        CVPixelBufferUnlockBaseAddress(a2, 0);
        CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
        return 0xFFFFFFFFLL;
      }
    }
    else if (src.width != dest.width || src.height != dest.height)
    {
      goto LABEL_40;
    }
    *(_QWORD *)backColor = 0;
    v27 = 0;
    if ((int)v15 > 1380410944)
    {
      if ((int)v15 > 1751410031)
      {
        if ((int)v15 <= 1919365989)
        {
          if ((_DWORD)v15 == 1751410032)
            goto LABEL_70;
          v20 = 1751411059;
        }
        else
        {
          if ((_DWORD)v15 == 1919365990)
          {
            PixelBufferUtils::asVImageBuffer(pixelBuffer, 0, *v16, &__p);
            src = __p;
            PixelBufferUtils::asVImageBuffer(a2, 0, *v16, &__p);
            dest = __p;
            v17 = vImageRotate90_PlanarF(&src, &dest, v8, 0.0, 0);
            if (v17)
              goto LABEL_72;
            PixelBufferUtils::asVImageBuffer(pixelBuffer, (__CVBuffer *)1, *v16, &__p);
            src = __p;
            PixelBufferUtils::asVImageBuffer(a2, (__CVBuffer *)1, *v16, &__p);
            dest = __p;
            v17 = vImageRotate90_PlanarF(&src, &dest, v8, 0.0, 0);
            if (v17)
              goto LABEL_72;
            PixelBufferUtils::asVImageBuffer(pixelBuffer, (__CVBuffer *)2, *v16, &__p);
            src = __p;
            PixelBufferUtils::asVImageBuffer(a2, (__CVBuffer *)2, *v16, &__p);
            dest = __p;
            v18 = vImageRotate90_PlanarF(&src, &dest, v8, 0.0, 0);
            goto LABEL_71;
          }
          if ((_DWORD)v15 == 1919365992)
          {
            PixelBufferUtils::asVImageBuffer(pixelBuffer, 0, *v16, &__p);
            src = __p;
            PixelBufferUtils::asVImageBuffer(a2, 0, *v16, &__p);
            dest = __p;
            v17 = vImageRotate90_Planar16F(&src, &dest, v8, 0, 0);
            if (v17)
              goto LABEL_72;
            PixelBufferUtils::asVImageBuffer(pixelBuffer, (__CVBuffer *)1, *v16, &__p);
            src = __p;
            PixelBufferUtils::asVImageBuffer(a2, (__CVBuffer *)1, *v16, &__p);
            dest = __p;
            v17 = vImageRotate90_Planar16F(&src, &dest, v8, 0, 0);
            if (v17)
              goto LABEL_72;
            PixelBufferUtils::asVImageBuffer(pixelBuffer, (__CVBuffer *)2, *v16, &__p);
            src = __p;
            PixelBufferUtils::asVImageBuffer(a2, (__CVBuffer *)2, *v16, &__p);
            dest = __p;
            v18 = vImageRotate90_Planar16F(&src, &dest, v8, 0, 0);
            goto LABEL_71;
          }
          v20 = 1932996149;
        }
        goto LABEL_69;
      }
      if ((int)v15 <= 1647392358)
      {
        if ((_DWORD)v15 == 1380410945)
        {
          v18 = vImageRotate90_ARGBFFFF(&src, &dest, v8, (const float *)backColor, 0);
          goto LABEL_71;
        }
        if ((_DWORD)v15 == 1380411457)
        {
          v18 = vImageRotate90_ARGB16U(&src, &dest, v8, backColor, 0);
          goto LABEL_71;
        }
        goto LABEL_84;
      }
      if ((_DWORD)v15 == 1647392359)
      {
LABEL_70:
        v18 = vImageRotate90_Planar16U(&src, &dest, v8, 0, 0);
        goto LABEL_71;
      }
      if ((_DWORD)v15 != 1717855600 && (_DWORD)v15 != 1717856627)
        goto LABEL_84;
    }
    else
    {
      if ((int)v15 <= 1094862673)
      {
        if ((int)v15 > 825437746)
        {
          if ((_DWORD)v15 != 825437747)
          {
            if ((_DWORD)v15 == 875704422 || (_DWORD)v15 == 875704438)
            {
              PixelBufferUtils::asVImageBuffer(pixelBuffer, 0, *v16, &src);
              PixelBufferUtils::asVImageBuffer(a2, 0, *v16, &dest);
              v17 = vImageRotate90_Planar8(&src, &dest, v8, 0, 0);
              if (v17)
              {
LABEL_72:
                CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
                CVPixelBufferUnlockBaseAddress(a2, 0);
                return v17 != 0;
              }
              PixelBufferUtils::asVImageBuffer(pixelBuffer, (__CVBuffer *)1, *v16, &__p);
              src = __p;
              PixelBufferUtils::asVImageBuffer(a2, (__CVBuffer *)1, *v16, &__p);
              dest = __p;
              v18 = vImageRotate90_Planar16U(&src, &dest, v8, 0, 0);
LABEL_71:
              v17 = v18;
              goto LABEL_72;
            }
LABEL_84:
            PixelBufferUtils::pixelFormatAsString(v15, (char *)&__p);
            if ((__p.width & 0x8000000000000000) == 0)
              p_p = &__p;
            else
              p_p = (vImage_Buffer *)__p.data;
            NSLog(CFSTR("%s:%d - ERROR - pixel format %08x (\"%s\") not supported\n"), "rotatePixelBufferVImage", 765, v15, p_p);
            if (SHIBYTE(__p.width) < 0)
              operator delete(__p.data);
            v17 = -21773;
            goto LABEL_72;
          }
          goto LABEL_70;
        }
        if ((_DWORD)v15 != 32)
        {
          v20 = 825306677;
LABEL_69:
          if ((_DWORD)v15 != v20)
            goto LABEL_84;
          goto LABEL_70;
        }
LABEL_66:
        v18 = vImageRotate90_ARGB8888(&src, &dest, v8, (const uint8_t *)backColor, 0);
        goto LABEL_71;
      }
      if ((int)v15 <= 1278226533)
      {
        if ((_DWORD)v15 == 1094862674)
          goto LABEL_66;
        v19 = 1111970369;
        goto LABEL_65;
      }
      if ((_DWORD)v15 != 1278226534)
      {
        if ((_DWORD)v15 == 1278226536)
          goto LABEL_70;
        v19 = 1380401729;
LABEL_65:
        if ((_DWORD)v15 != v19)
          goto LABEL_84;
        goto LABEL_66;
      }
    }
    v18 = vImageRotate90_PlanarF(&src, &dest, v8, 0.0, 0);
    goto LABEL_71;
  }
  return result;
}

void sub_20B6B70AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

__CVBuffer *PixelBufferUtils::createCroppedAndScaledPixelBuffer(PixelBufferUtils *this, __CVBuffer *a2, CGRect a3, CGSize a4)
{
  double height;
  double width;
  double v7;
  double v8;
  CGFloat y;
  CGFloat x;
  OSType PixelFormatType;
  const __CFAllocator *v13;
  const __CFDictionary *BufferAttributes;
  __CVBuffer *v15;
  CVPixelBufferRef pixelBufferOut;
  CGRect v18;

  height = a4.height;
  width = a4.width;
  v7 = a3.size.height;
  v8 = a3.size.width;
  y = a3.origin.y;
  x = a3.origin.x;
  if (CGRectIsEmpty(a3))
  {
    v8 = (double)CVPixelBufferGetWidth(this);
    v7 = (double)CVPixelBufferGetHeight(this);
    x = 0.0;
    y = 0.0;
  }
  if (width == *MEMORY[0x24BDBF148] && height == *(double *)(MEMORY[0x24BDBF148] + 8))
  {
    width = v8;
    height = v7;
  }
  PixelFormatType = CVPixelBufferGetPixelFormatType(this);
  pixelBufferOut = 0;
  v13 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  BufferAttributes = (const __CFDictionary *)getBufferAttributes();
  if (CVPixelBufferCreate(v13, (unint64_t)width, (unint64_t)height, PixelFormatType, BufferAttributes, &pixelBufferOut))
  {
    v15 = 0;
  }
  else
  {
    v15 = pixelBufferOut;
  }
  v18.origin.x = x;
  v18.origin.y = y;
  v18.size.width = v8;
  v18.size.height = v7;
  if (PixelBufferUtils::cropAndScalePixelBuffer(this, v15, a2, v18, *MEMORY[0x24BDBF090]))
  {
    CVPixelBufferRelease(v15);
    return 0;
  }
  return v15;
}

uint64_t PixelBufferUtils::cropAndScalePixelBuffer(CVPixelBufferRef pixelBuffer, __CVBuffer *a2, __CVBuffer *a3, CGRect a4, CGRect a5)
{
  double width;
  double y;
  double x;
  double v8;
  double v9;
  double v10;
  double v11;
  signed int PixelFormatType;
  size_t v15;
  size_t v16;
  size_t v17;
  size_t v18;
  _BOOL4 IsEmpty;
  double v20;
  _BOOL4 v21;
  double v22;
  double v23;
  double v24;
  double v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat v29;
  BOOL v30;
  BOOL v32;
  OpaqueVTPixelTransferSession *VTTransferSession;
  OSStatus v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  vImage_Error v38;
  vImage_Error v39;
  vImagePixelCount v40;
  vImagePixelCount v41;
  unint64_t v42;
  char *v43;
  size_t v44;
  float v45;
  char *v46;
  size_t v47;
  float v48;
  unint64_t v49;
  int v50;
  vImagePixelCount v51;
  vImagePixelCount v52;
  unint64_t v53;
  char *v54;
  size_t v55;
  float v56;
  char *v57;
  size_t v58;
  float v59;
  unint64_t v60;
  vImagePixelCount v61;
  vImagePixelCount v62;
  unint64_t v63;
  char *data;
  size_t rowBytes;
  float v66;
  char *v67;
  size_t v68;
  float v69;
  unint64_t v70;
  void *p_src;
  double v72;
  double v73;
  double v74;
  CGFloat v75;
  double height;
  vImage_Buffer v77;
  vImage_Buffer v78;
  vImage_Buffer dest;
  vImage_Buffer src;
  vImage_Buffer v81;
  vImage_Buffer v82;
  CGRect v83;
  CGRect v84;
  CGRect v85;
  CGRect v86;
  CGRect v87;
  CGRect v88;
  CGRect v89;
  CGRect v90;
  CGRect v91;
  CGRect v92;
  CGRect v93;
  CGRect v94;
  CGRect v95;
  CGRect v96;
  CGRect v97;
  CGRect v98;
  CGRect v99;
  CGRect v100;
  CGRect v101;
  CGRect v102;
  CGRect v103;
  CGRect v104;
  CGRect v105;
  CGRect v106;

  height = a5.size.height;
  width = a5.size.width;
  y = a5.origin.y;
  x = a5.origin.x;
  v8 = a4.size.height;
  v9 = a4.size.width;
  v10 = a4.origin.y;
  v11 = a4.origin.x;
  if (!(_DWORD)a3)
    goto LABEL_17;
  PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  if (PixelFormatType <= 1751410031)
  {
    if (PixelFormatType > 1717855599)
    {
      if (PixelFormatType == 1717855600 || PixelFormatType == 1717856627)
        goto LABEL_17;
    }
    else if (PixelFormatType == 825306677 || PixelFormatType == 825437747)
    {
      goto LABEL_17;
    }
  }
  else
  {
    if (PixelFormatType > 1919365989)
    {
      if (PixelFormatType != 1919365990 && PixelFormatType != 1919365992 && PixelFormatType != 1932996149)
        goto LABEL_47;
LABEL_17:
      v15 = CVPixelBufferGetWidth(pixelBuffer);
      v16 = CVPixelBufferGetHeight(pixelBuffer);
      v17 = CVPixelBufferGetWidth(a2);
      v18 = CVPixelBufferGetHeight(a2);
      v83.origin.x = v11;
      v83.origin.y = v10;
      v83.size.width = v9;
      v83.size.height = v8;
      IsEmpty = CGRectIsEmpty(v83);
      v20 = (double)v16;
      if (IsEmpty)
      {
        v11 = 0.0;
        v10 = 0.0;
        v9 = (double)v15;
      }
      else
      {
        v20 = v8;
      }
      v75 = v20;
      v84.origin.x = x;
      v84.origin.y = y;
      v84.size.width = width;
      v84.size.height = height;
      v21 = CGRectIsEmpty(v84);
      if (v21)
        v22 = 0.0;
      else
        v22 = x;
      if (v21)
        v23 = 0.0;
      else
        v23 = y;
      v72 = v23;
      if (v21)
        v24 = (double)v17;
      else
        v24 = width;
      v73 = v24;
      v74 = v22;
      if (v21)
        v25 = (double)v18;
      else
        v25 = height;
      v85.origin.x = v11;
      v85.origin.y = v10;
      v85.size.width = v9;
      v85.size.height = v75;
      v86 = CGRectIntegral(v85);
      v26 = v86.origin.x;
      v27 = v86.origin.y;
      v28 = v86.size.width;
      v29 = v86.size.height;
      if (v86.origin.x < 0.0
        || v86.origin.y < 0.0
        || (v86.origin.x + v86.size.width <= (double)v15
          ? (v30 = v86.origin.y + v86.size.height <= (double)v16)
          : (v30 = 0),
            !v30))
      {
        NSLog(CFSTR("%s:%d - ERROR - crop origin (%f,%f) size (%f, %f) is outside image bounds"), "cropAndScalePixelBufferVImage", 945, *(_QWORD *)&v86.origin.x, *(_QWORD *)&v86.origin.y, *(_QWORD *)&v86.size.width, *(_QWORD *)&v86.size.height);
        return 0xFFFFFFFFLL;
      }
      if (v74 < 0.0 || v72 < 0.0 || (v74 + v73 <= (double)v17 ? (v32 = v72 + v25 <= (double)v18) : (v32 = 0), !v32))
      {
        NSLog(CFSTR("%s:%d - ERROR - destRect origin (%f,%f) size (%f, %f) is outside image bounds"), "cropAndScalePixelBufferVImage", 951, *(_QWORD *)&v74, *(_QWORD *)&v72, *(_QWORD *)&v73, *(_QWORD *)&v25);
        return 0xFFFFFFFFLL;
      }
      CVPixelBufferLockBaseAddress(a2, 0);
      CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
      memset(&v82, 0, sizeof(v82));
      v88.origin.x = v26;
      v88.origin.y = v27;
      v88.size.width = v28;
      v88.size.height = v29;
      PixelBufferUtils::asVImageBuffer(pixelBuffer, v88, &v82);
      memset(&v81, 0, sizeof(v81));
      v89.origin.x = v74;
      v89.origin.y = v72;
      v89.size.width = v73;
      v89.size.height = v25;
      PixelBufferUtils::asVImageBuffer(a2, v89, &v81);
      v35 = CVPixelBufferGetPixelFormatType(pixelBuffer);
      v36 = v35;
      if ((int)v35 > 1380401728)
      {
        if ((int)v35 <= 1717856626)
        {
          if ((int)v35 <= 1380411456)
          {
            if ((_DWORD)v35 != 1380401729)
            {
              if ((_DWORD)v35 == 1380410945)
              {
                v39 = vImageScale_ARGBFFFF(&v82, &v81, 0, 0);
                goto LABEL_110;
              }
              goto LABEL_119;
            }
            goto LABEL_109;
          }
          if ((_DWORD)v35 == 1380411457)
          {
            v39 = vImageScale_ARGB16F(&v82, &v81, 0, 0);
            goto LABEL_110;
          }
          if ((_DWORD)v35 != 1647392359)
          {
            if ((_DWORD)v35 != 1717855600)
              goto LABEL_119;
            goto LABEL_89;
          }
LABEL_99:
          v61 = v81.height;
          if (v81.height)
          {
            v62 = v81.width;
            if (v81.width)
            {
              v63 = 0;
              data = (char *)v82.data;
              rowBytes = v82.rowBytes;
              v66 = (float)v82.height / (float)v81.height;
              v67 = (char *)v81.data;
              v68 = v81.rowBytes;
              v69 = (float)v82.width / (float)v81.width;
              do
              {
                v70 = 0;
                do
                {
                  *(_WORD *)&v67[2 * v70] = *(_WORD *)&data[2 * (int)(float)(v69 * (float)v70)
                                                          + rowBytes * (int)(float)(v66 * (float)v63)];
                  ++v70;
                }
                while (v62 != v70);
                ++v63;
                v67 += v68;
              }
              while (v63 != v61);
            }
          }
          goto LABEL_105;
        }
        if ((int)v35 <= 1919365989)
        {
          if ((_DWORD)v35 != 1717856627)
          {
            if ((_DWORD)v35 == 1751410032)
            {
LABEL_79:
              v40 = v81.height;
              if (v81.height)
              {
                v41 = v81.width;
                if (v81.width)
                {
                  v42 = 0;
                  v43 = (char *)v82.data;
                  v44 = v82.rowBytes;
                  v45 = (float)v82.height / (float)v81.height;
                  v46 = (char *)v81.data;
                  v47 = v81.rowBytes;
                  v48 = (float)v82.width / (float)v81.width;
                  do
                  {
                    v49 = 0;
                    do
                    {
                      *(_WORD *)&v46[2 * v49] = *(_WORD *)&v43[2 * (int)(float)(v48 * (float)v49)
                                                             + v44 * (int)(float)(v45 * (float)v42)];
                      ++v49;
                    }
                    while (v41 != v49);
                    ++v42;
                    v46 += v47;
                  }
                  while (v42 != v40);
                }
              }
LABEL_105:
              v38 = 0;
              goto LABEL_111;
            }
            v37 = 1751411059;
            goto LABEL_78;
          }
LABEL_89:
          v51 = v81.height;
          if (v81.height)
          {
            v52 = v81.width;
            if (v81.width)
            {
              v53 = 0;
              v54 = (char *)v82.data;
              v55 = v82.rowBytes;
              v56 = (float)v82.height / (float)v81.height;
              v57 = (char *)v81.data;
              v58 = v81.rowBytes;
              v59 = (float)v82.width / (float)v81.width;
              do
              {
                v60 = 0;
                do
                {
                  *(_DWORD *)&v57[4 * v60] = *(_DWORD *)&v54[4 * (int)(float)(v59 * (float)v60)
                                                           + v55 * (int)(float)(v56 * (float)v53)];
                  ++v60;
                }
                while (v52 != v60);
                ++v53;
                v57 += v58;
              }
              while (v53 != v51);
            }
          }
          goto LABEL_105;
        }
        if ((_DWORD)v35 == 1919365990)
        {
          v94.origin.x = v26;
          v94.origin.y = v27;
          v94.size.width = v28;
          v94.size.height = v29;
          PixelBufferUtils::asVImageBuffer(pixelBuffer, 0, v94, &src);
          v82 = src;
          v95.origin.x = v74;
          v95.origin.y = v72;
          v95.size.width = v73;
          v95.size.height = v25;
          PixelBufferUtils::asVImageBuffer(a2, 0, v95, &src);
          v81 = src;
          v38 = vImageScale_PlanarF(&v82, &v81, 0, 0);
          if (v38)
            goto LABEL_111;
          v96.origin.x = v26;
          v96.origin.y = v27;
          v96.size.width = v28;
          v96.size.height = v29;
          PixelBufferUtils::asVImageBuffer(pixelBuffer, (__CVBuffer *)1, v96, &src);
          v82 = src;
          v97.origin.x = v74;
          v97.origin.y = v72;
          v97.size.width = v73;
          v97.size.height = v25;
          PixelBufferUtils::asVImageBuffer(a2, (__CVBuffer *)1, v97, &src);
          v81 = src;
          v38 = vImageScale_PlanarF(&v82, &v81, 0, 0);
          if (v38)
            goto LABEL_111;
          v98.origin.x = v26;
          v98.origin.y = v27;
          v98.size.width = v28;
          v98.size.height = v29;
          PixelBufferUtils::asVImageBuffer(pixelBuffer, (__CVBuffer *)2, v98, &src);
          v82 = src;
          v99.origin.x = v74;
          v99.origin.y = v72;
          v99.size.width = v73;
          v99.size.height = v25;
          PixelBufferUtils::asVImageBuffer(a2, (__CVBuffer *)2, v99, &src);
          v81 = src;
          v39 = vImageScale_PlanarF(&v82, &v81, 0, 0);
          goto LABEL_110;
        }
        if ((_DWORD)v35 == 1919365992)
        {
          v100.origin.x = v26;
          v100.origin.y = v27;
          v100.size.width = v28;
          v100.size.height = v29;
          PixelBufferUtils::asVImageBuffer(pixelBuffer, 0, v100, &src);
          v82 = src;
          v101.origin.x = v74;
          v101.origin.y = v72;
          v101.size.width = v73;
          v101.size.height = v25;
          PixelBufferUtils::asVImageBuffer(a2, 0, v101, &src);
          v81 = src;
          v38 = vImageScale_Planar16F(&v82, &v81, 0, 0);
          if (v38)
            goto LABEL_111;
          v102.origin.x = v26;
          v102.origin.y = v27;
          v102.size.width = v28;
          v102.size.height = v29;
          PixelBufferUtils::asVImageBuffer(pixelBuffer, (__CVBuffer *)1, v102, &src);
          v82 = src;
          v103.origin.x = v74;
          v103.origin.y = v72;
          v103.size.width = v73;
          v103.size.height = v25;
          PixelBufferUtils::asVImageBuffer(a2, (__CVBuffer *)1, v103, &src);
          v81 = src;
          v38 = vImageScale_Planar16F(&v82, &v81, 0, 0);
          if (v38)
            goto LABEL_111;
          v104.origin.x = v26;
          v104.origin.y = v27;
          v104.size.width = v28;
          v104.size.height = v29;
          PixelBufferUtils::asVImageBuffer(pixelBuffer, (__CVBuffer *)2, v104, &src);
          v82 = src;
          v105.origin.x = v74;
          v105.origin.y = v72;
          v105.size.width = v73;
          v105.size.height = v25;
          PixelBufferUtils::asVImageBuffer(a2, (__CVBuffer *)2, v105, &src);
          v81 = src;
          v39 = vImageScale_Planar16F(&v82, &v81, 0, 0);
          goto LABEL_110;
        }
        v50 = 1932996149;
      }
      else
      {
        if ((int)v35 > 875836517)
        {
          if ((int)v35 <= 1111970368)
          {
            if ((_DWORD)v35 != 875836518 && (_DWORD)v35 != 875836534)
            {
              if ((_DWORD)v35 != 1094862674)
                goto LABEL_119;
              goto LABEL_109;
            }
LABEL_68:
            memset(&src, 0, sizeof(src));
            v90.origin.x = v26;
            v90.origin.y = v27;
            v90.size.width = v28;
            v90.size.height = v29;
            PixelBufferUtils::asVImageBuffer(pixelBuffer, 0, v90, &src);
            memset(&dest, 0, sizeof(dest));
            v91.origin.x = v74;
            v91.origin.y = v72;
            v91.size.width = v73;
            v91.size.height = v25;
            PixelBufferUtils::asVImageBuffer(a2, 0, v91, &dest);
            v38 = vImageScale_Planar8(&src, &dest, 0, 0);
            if (!v38)
            {
              memset(&v78, 0, sizeof(v78));
              v92.origin.x = v26;
              v92.origin.y = v27;
              v92.size.width = v28;
              v92.size.height = v29;
              PixelBufferUtils::asVImageBuffer(pixelBuffer, (__CVBuffer *)1, v92, &v78);
              memset(&v77, 0, sizeof(v77));
              v93.origin.x = v74;
              v93.origin.y = v72;
              v93.size.width = v73;
              v93.size.height = v25;
              PixelBufferUtils::asVImageBuffer(a2, (__CVBuffer *)1, v93, &v77);
              v39 = vImageScale_CbCr8(&v78, &v77, 0, 0);
LABEL_110:
              v38 = v39;
            }
LABEL_111:
            CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
            CVPixelBufferUnlockBaseAddress(a2, 0);
            return v38 != 0;
          }
          if ((_DWORD)v35 != 1111970369)
          {
            if ((_DWORD)v35 != 1278226534)
            {
              v37 = 1278226536;
LABEL_78:
              if ((_DWORD)v35 == v37)
                goto LABEL_79;
LABEL_119:
              PixelBufferUtils::pixelFormatAsString(v35, (char *)&src);
              if ((src.width & 0x8000000000000000) == 0)
                p_src = &src;
              else
                p_src = src.data;
              NSLog(CFSTR("%s:%d - ERROR - pixel format %08x (\"%s\") not supported\n"), "cropAndScalePixelBufferVImage", 1044, v36, p_src);
              if (SHIBYTE(src.width) < 0)
                operator delete(src.data);
              v38 = -21778;
              goto LABEL_111;
            }
            goto LABEL_89;
          }
LABEL_109:
          v39 = vImageScale_ARGB8888(&v82, &v81, 0, 0);
          goto LABEL_110;
        }
        if ((int)v35 > 825437746)
        {
          if ((_DWORD)v35 != 825437747)
          {
            if ((_DWORD)v35 == 875704422 || (_DWORD)v35 == 875704438)
              goto LABEL_68;
            goto LABEL_119;
          }
          goto LABEL_99;
        }
        if ((_DWORD)v35 == 32)
          goto LABEL_109;
        v50 = 825306677;
      }
      if ((_DWORD)v35 != v50)
        goto LABEL_119;
      goto LABEL_99;
    }
    if (PixelFormatType == 1751410032 || PixelFormatType == 1751411059)
      goto LABEL_17;
  }
LABEL_47:
  v87.origin.x = v11;
  v87.origin.y = v10;
  v87.size.width = v9;
  v87.size.height = v8;
  v106.origin.x = x;
  v106.origin.y = y;
  v106.size.width = width;
  v106.size.height = height;
  VTTransferSession = createVTTransferSession(v87, v106);
  v34 = VTPixelTransferSessionTransferImage(VTTransferSession, pixelBuffer, a2);
  if (VTTransferSession)
  {
    VTPixelTransferSessionInvalidate(VTTransferSession);
    CFRelease(VTTransferSession);
  }
  if (v34)
  {
    NSLog(CFSTR("%s:%d - ERROR - VTPixelTransferSessionTransferImage operation failed"), "cropAndScalePixelBufferVT", 1109);
    return 0xFFFFFFFFLL;
  }
  return 0;
}

void sub_20B6B7D50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

VTPixelTransferSessionRef createVTTransferSession(CGRect a1, CGRect a2)
{
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  OSStatus v10;
  CFDictionaryRef DictionaryRepresentation;
  CFDictionaryRef v12;
  VTPixelTransferSessionRef result;
  VTPixelTransferSessionRef pixelTransferSessionOut;
  CGRect v15;
  CGRect v16;
  CGRect v17;
  CGRect v18;

  height = a2.size.height;
  width = a2.size.width;
  y = a2.origin.y;
  x = a2.origin.x;
  v6 = a1.size.height;
  v7 = a1.size.width;
  v8 = a1.origin.y;
  v9 = a1.origin.x;
  pixelTransferSessionOut = 0;
  v10 = VTPixelTransferSessionCreate(0, &pixelTransferSessionOut);
  v15.origin.x = v9;
  v15.origin.y = v8;
  v15.size.width = v7;
  v15.size.height = v6;
  if (!CGRectIsEmpty(v15))
  {
    v16.origin.x = v9;
    v16.origin.y = v8;
    v16.size.width = v7;
    v16.size.height = v6;
    DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v16);
    v10 |= VTSessionSetProperty(pixelTransferSessionOut, (CFStringRef)*MEMORY[0x24BDF9688], DictionaryRepresentation);
    CFRelease(DictionaryRepresentation);
  }
  v17.origin.x = x;
  v17.origin.y = y;
  v17.size.width = width;
  v17.size.height = height;
  if (!CGRectIsEmpty(v17))
  {
    v18.origin.x = x;
    v18.origin.y = y;
    v18.size.width = width;
    v18.size.height = height;
    v12 = CGRectCreateDictionaryRepresentation(v18);
    v10 |= VTSessionSetProperty(pixelTransferSessionOut, (CFStringRef)*MEMORY[0x24BDF9650], v12);
    CFRelease(v12);
  }
  result = pixelTransferSessionOut;
  if (v10)
  {
    VTPixelTransferSessionInvalidate(pixelTransferSessionOut);
    CFRelease(pixelTransferSessionOut);
    NSLog(CFSTR("%s:%d - ERROR - Unable to create pixel transfer session for image downscaling"), "createVTTransferSession", 1080);
    return 0;
  }
  return result;
}

uint64_t PixelBufferUtils::cropAndScalePixelBuffer(PixelBufferUtils *this, __CVBuffer *a2, __CVBuffer *a3, CGRect a4)
{
  return PixelBufferUtils::cropAndScalePixelBuffer(this, a2, a3, a4, *MEMORY[0x24BDBF090]);
}

__CVBuffer *PixelBufferUtils::createConvertedPixelBufferFormat(PixelBufferUtils *this, __CVBuffer *a2, __CVBuffer *a3)
{
  OSType v4;
  size_t Width;
  size_t Height;
  const __CFAllocator *v8;
  const __CFDictionary *BufferAttributes;
  __CVBuffer *v10;
  CVPixelBufferRef pixelBufferOut;

  v4 = a2;
  Width = CVPixelBufferGetWidth(this);
  Height = CVPixelBufferGetHeight(this);
  pixelBufferOut = 0;
  v8 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  BufferAttributes = (const __CFDictionary *)getBufferAttributes();
  if (CVPixelBufferCreate(v8, Width, Height, v4, BufferAttributes, &pixelBufferOut))
    v10 = 0;
  else
    v10 = pixelBufferOut;
  if (PixelBufferUtils::convertPixelBufferFormat(this, v10, a3))
  {
    CVPixelBufferRelease(v10);
    return 0;
  }
  return v10;
}

uint64_t PixelBufferUtils::convertPixelBufferFormat(PixelBufferUtils *this, __CVBuffer *a2, __CVBuffer *a3)
{
  uint64_t v3;
  int v5;
  unint64_t PixelFormatType;
  unint64_t v8;
  __CVBuffer *v9;
  PixelBufferUtils *v10;
  int v11;
  OSType v12;
  _BOOL4 v14;
  int v16;
  unint64_t v17;
  CGRect *v18;
  int v19;
  int v20;
  unsigned __int16 v21;
  unsigned __int16 v22;
  int v23;
  int v24;
  _BOOL4 v25;
  void *v26;
  void *v27;
  _BOOL4 v28;
  int v29;
  vImagePixelCount width;
  vImagePixelCount height;
  unsigned __int16 *v32;
  char *v33;
  size_t rowBytes;
  size_t v35;
  uint64_t v36;
  unsigned __int16 *v37;
  _WORD *v38;
  vImagePixelCount v39;
  unsigned int v40;
  unsigned __int16 v45;
  void *p_src;
  void **v47;
  OpaqueVTPixelTransferSession *VTTransferSession;
  OSStatus v49;
  void *v50;
  void *v51;
  void *data;
  vImagePixelCount v53;
  vImagePixelCount v54;
  uint64_t v55;
  float16x8_t *v56;
  uint16x4_t *v57;
  float32x4_t v58;
  uint16x4_t *v59;
  float16x8_t *v60;
  vImagePixelCount v61;
  float16x8_t v62;
  uint64_t v63;
  float16x8_t *v64;
  uint16x4_t *v65;
  vImagePixelCount v66;
  char *v67;
  char *v68;
  float32x4_t v69;
  uint16x4_t *v70;
  float16x8_t *v71;
  vImagePixelCount v72;
  float16x8_t v73;
  unsigned __int16 *v74;
  _WORD *v75;
  vImagePixelCount v76;
  unsigned int v77;
  void *__p[2];
  char v80;
  vImage_Buffer dest;
  vImage_Buffer src;
  CGRect v83;
  CGRect v84;

  v3 = 0xFFFFFFFFLL;
  if (!this || !a2)
    return v3;
  v5 = (int)a3;
  PixelFormatType = CVPixelBufferGetPixelFormatType(this);
  v8 = CVPixelBufferGetPixelFormatType(a2);
  v10 = (PixelBufferUtils *)v8;
  if (v5)
  {
    if ((int)PixelFormatType <= 1751410031)
    {
      if ((int)PixelFormatType > 1717855599)
      {
        if ((_DWORD)PixelFormatType == 1717855600)
          goto LABEL_17;
        v11 = 1717856627;
      }
      else
      {
        if ((_DWORD)PixelFormatType == 825306677)
          goto LABEL_17;
        v11 = 825437747;
      }
    }
    else if ((int)PixelFormatType <= 1919365989)
    {
      if ((_DWORD)PixelFormatType == 1751410032)
        goto LABEL_17;
      v11 = 1751411059;
    }
    else
    {
      if ((_DWORD)PixelFormatType == 1919365990 || (_DWORD)PixelFormatType == 1919365992)
        goto LABEL_17;
      v11 = 1932996149;
    }
    if ((_DWORD)PixelFormatType == v11)
      goto LABEL_17;
    if ((int)v8 <= 1751410031)
    {
      if ((int)v8 > 1717855599)
      {
        if ((_DWORD)v8 == 1717855600)
          goto LABEL_17;
        v24 = 1717856627;
      }
      else
      {
        if ((_DWORD)v8 == 825306677)
          goto LABEL_17;
        v24 = 825437747;
      }
    }
    else if ((int)v8 <= 1919365989)
    {
      if ((_DWORD)v8 == 1751410032)
        goto LABEL_17;
      v24 = 1751411059;
    }
    else
    {
      if ((_DWORD)v8 == 1919365990 || (_DWORD)v8 == 1919365992)
        goto LABEL_17;
      v24 = 1932996149;
    }
    if ((_DWORD)v8 != v24)
    {
      v83 = *(CGRect *)*(_QWORD *)&MEMORY[0x24BDBF090];
      v84.origin.x = *(CGFloat *)MEMORY[0x24BDBF090];
      v84.origin.y = v83.origin.y;
      v84.size.width = v83.size.width;
      v84.size.height = v83.size.height;
      VTTransferSession = createVTTransferSession(*MEMORY[0x24BDBF090], v84);
      v49 = VTPixelTransferSessionTransferImage(VTTransferSession, this, a2);
      if (VTTransferSession)
      {
        VTPixelTransferSessionInvalidate(VTTransferSession);
        CFRelease(VTTransferSession);
      }
      if (!v49)
        return 0;
      NSLog(CFSTR("%s:%d - ERROR - VTPixelTransferSessionTransferImage operation failed"), "cropAndScalePixelBufferVT", 1109);
      return 0xFFFFFFFFLL;
    }
  }
LABEL_17:
  if ((_DWORD)PixelFormatType == (_DWORD)v8)
  {
    v12 = CVPixelBufferGetPixelFormatType(this);
    if (v12 == CVPixelBufferGetPixelFormatType(a2))
      return copyPixelBufferVImage(a2, *MEMORY[0x24BDBEFB0], this, *MEMORY[0x24BDBF090]);
    return 0xFFFFFFFFLL;
  }
  v14 = 0;
  if ((int)PixelFormatType <= 1751410031)
  {
    if ((_DWORD)PixelFormatType != 1717855600)
    {
      if ((_DWORD)PixelFormatType != 1717856627)
        goto LABEL_34;
      goto LABEL_26;
    }
LABEL_28:
    v14 = (_DWORD)v8 == 1751411059 || (_DWORD)v8 == 1717856627;
    goto LABEL_34;
  }
  if ((_DWORD)PixelFormatType == 1751410032)
    goto LABEL_28;
  if ((_DWORD)PixelFormatType != 1751411059)
    goto LABEL_34;
LABEL_26:
  v14 = 1;
  if ((_DWORD)v8 != 1717855600)
    v14 = v8 == 1751410032;
LABEL_34:
  if ((int)PixelFormatType <= 1380401728)
  {
    if ((int)PixelFormatType > 1094862673)
    {
      if ((int)PixelFormatType <= 1278226487)
      {
        if ((_DWORD)PixelFormatType == 1094862674)
          goto LABEL_65;
        v19 = 1111970369;
LABEL_64:
        if ((_DWORD)PixelFormatType == v19)
          goto LABEL_65;
LABEL_146:
        PixelBufferUtils::pixelFormatAsString(PixelFormatType, (char *)&src);
        if ((src.width & 0x8000000000000000) == 0)
          p_src = &src;
        else
          p_src = src.data;
        NSLog(CFSTR("%s:%d - ERROR - pixel format %08x (\"%s\") not supported\n"), "convertPixelBufferFormat", 2214, PixelFormatType, p_src);
LABEL_209:
        if (SHIBYTE(src.width) < 0)
          operator delete(src.data);
        return 0xFFFFFFFFLL;
      }
      if ((_DWORD)PixelFormatType == 1278226488)
      {
        if ((int)v8 > 1380401728)
        {
          if ((_DWORD)v8 == 1380401729 || (_DWORD)v8 == 1380411457)
            return convertGrayscaleAsColor(this, v8, a2);
          v29 = 1380410945;
        }
        else
        {
          if ((_DWORD)v8 == 32 || (_DWORD)v8 == 1094862674)
            return convertGrayscaleAsColor(this, v8, a2);
          v29 = 1111970369;
        }
        if ((_DWORD)v8 != v29)
        {
          PixelBufferUtils::pixelFormatAsString(v8, (char *)&src);
          if ((src.width & 0x8000000000000000) == 0)
            data = &src;
          else
            data = src.data;
          NSLog(CFSTR("%s:%d - ERROR - pixel format %08x (\"%s\") not supported\n"), "convertPixelBufferFormat", 2207, v10, data);
          goto LABEL_209;
        }
        return convertGrayscaleAsColor(this, v8, a2);
      }
      if ((_DWORD)PixelFormatType != 1278226534)
      {
        v16 = 1278226536;
        goto LABEL_76;
      }
LABEL_81:
      if ((int)v8 > 1717856626)
      {
        if ((_DWORD)v8 != 1717856627)
        {
          if ((_DWORD)v8 != 1751411059 && (_DWORD)v8 != 1751410032)
            return convertGrayscaleAsColor(this, v8, a2);
          goto LABEL_109;
        }
LABEL_108:
        v27 = &__block_literal_global_147;
LABEL_141:
        PixelBufferUtils::forEveryPixel(this, a2, v27, 0xFFFFFFFFuLL);
        return 0;
      }
      if ((_DWORD)v8 == 1278226536)
      {
LABEL_109:
        v3 = convertFloat32ToFloat16(this, a2);
        if ((_DWORD)v3)
          v28 = 0;
        else
          v28 = v14;
        if (!v28)
          return v3;
        v26 = &__block_literal_global_4744;
        goto LABEL_114;
      }
      if ((_DWORD)v8 == 1717855600)
        goto LABEL_108;
      return convertGrayscaleAsColor(this, v8, a2);
    }
    if ((int)PixelFormatType <= 875704421)
    {
      if ((_DWORD)PixelFormatType == 32)
        goto LABEL_65;
      if ((_DWORD)PixelFormatType == 825437747)
        goto LABEL_54;
      goto LABEL_146;
    }
    if ((_DWORD)PixelFormatType != 875704422 && (_DWORD)PixelFormatType != 875704438)
      goto LABEL_146;
    if ((int)v8 > 1380401728)
    {
      if ((int)v8 <= 1380411456)
      {
        if ((_DWORD)v8 == 1380401729)
          return createBGRAPermutesFromYUV(this, v8, a2);
        v45 = 26177;
      }
      else
      {
        if ((_DWORD)v8 == 1919365992)
          return createRGBPlanarHalfFromBuffer(this, a2);
        if ((_DWORD)v8 == 1919365990)
          return createRGBPlanarFloatFromBuffer(this, a2);
        v45 = 26689;
      }
      v23 = v45 | 0x52470000;
LABEL_193:
      if ((_DWORD)v8 == v23)
        return createBGRAPermutesFromYUV(this, v8, a2);
LABEL_201:
      PixelBufferUtils::pixelFormatAsString(v8, (char *)&src);
      if ((src.width & 0x8000000000000000) == 0)
        v51 = &src;
      else
        v51 = src.data;
      NSLog(CFSTR("%s:%d - ERROR - pixel format %08x (\"%s\") not supported\n"), "convertPixelBufferFormat", 2142, v10, v51);
      goto LABEL_209;
    }
    if ((int)v8 <= 875704437)
    {
      if ((_DWORD)v8 == 32)
        return createBGRAPermutesFromYUV(this, v8, a2);
      if ((_DWORD)v8 != 875704422)
        goto LABEL_201;
    }
    else if ((_DWORD)v8 != 875704438)
    {
      if ((_DWORD)v8 != 1094862674)
      {
        v23 = 1111970369;
        goto LABEL_193;
      }
      return createBGRAPermutesFromYUV(this, v8, a2);
    }
    NSLog(CFSTR("warning: incorrectly converting color pallete for video/full range"));
    return copyPixelBufferMultiPlane(a2, *MEMORY[0x24BDBEFB0], this, *MEMORY[0x24BDBF090]);
  }
  if ((int)PixelFormatType > 1717856626)
  {
    if ((int)PixelFormatType > 1751411058)
    {
      if ((_DWORD)PixelFormatType != 1751411059)
      {
        if ((_DWORD)PixelFormatType == 1919365990)
          return convertRGBPlanarFloat(this, a2);
        if ((_DWORD)PixelFormatType == 1919365992)
          return convertRGBPlanarHalf(this, a2);
        goto LABEL_146;
      }
      goto LABEL_77;
    }
    if ((_DWORD)PixelFormatType != 1717856627)
    {
      v16 = 1751410032;
LABEL_76:
      if ((_DWORD)PixelFormatType != v16)
        goto LABEL_146;
LABEL_77:
      if ((int)v8 <= 1717856626)
      {
        if ((_DWORD)v8 == 1278226534)
          goto LABEL_101;
        v22 = 25968;
      }
      else
      {
        if ((_DWORD)v8 == 1751411059 || (_DWORD)v8 == 1751410032)
        {
          v27 = &__block_literal_global_149;
          goto LABEL_141;
        }
        v22 = 26995;
      }
      if ((_DWORD)v8 != (v22 | 0x66640000))
        return convertGrayscaleAsColor(this, v8, a2);
LABEL_101:
      v3 = convertFloat16ToFloat32(this, a2);
      if ((_DWORD)v3)
        v25 = 0;
      else
        v25 = v14;
      if (!v25)
        return v3;
      v26 = &__block_literal_global_148;
LABEL_114:
      PixelBufferUtils::forEveryPixel(a2, v26, -1);
      return 0;
    }
    goto LABEL_81;
  }
  if ((int)PixelFormatType <= 1380411456)
  {
    if ((_DWORD)PixelFormatType == 1380401729)
      goto LABEL_65;
    v19 = 1380410945;
    goto LABEL_64;
  }
  if ((_DWORD)PixelFormatType != 1380411457)
  {
    if ((_DWORD)PixelFormatType != 1647392359)
    {
      if ((_DWORD)PixelFormatType != 1717855600)
        goto LABEL_146;
      goto LABEL_81;
    }
LABEL_54:
    v17 = CVPixelBufferGetPixelFormatType(a2);
    CVPixelBufferLockBaseAddress(this, 1uLL);
    CVPixelBufferLockBaseAddress(a2, 0);
    memset(&src, 0, sizeof(src));
    v18 = (CGRect *)MEMORY[0x24BDBF090];
    PixelBufferUtils::asVImageBuffer(this, *MEMORY[0x24BDBF090], &src);
    memset(&dest, 0, sizeof(dest));
    PixelBufferUtils::asVImageBuffer(a2, *v18, &dest);
    if ((_DWORD)v17 == 1278226536 || (_DWORD)v17 == 1751410032)
    {
      width = src.width;
      if (src.width == dest.width)
      {
        height = src.height;
        if (src.height == dest.height)
        {
          v32 = (unsigned __int16 *)src.data;
          if (src.data)
          {
            v33 = (char *)dest.data;
            if (dest.data)
            {
              if (src.height && src.width)
              {
                rowBytes = src.rowBytes;
                v35 = dest.rowBytes;
                if (src.width > 0xF)
                {
                  v53 = src.width & 0xFFFFFFFFFFFFFFF0;
                  v54 = src.width - (src.width & 0xFFFFFFFFFFFFFFF0);
                  if (src.width == (src.width & 0xFFFFFFFFFFFFFFF0))
                  {
                    v55 = 0;
                    v56 = (float16x8_t *)((char *)dest.data + 16);
                    v57 = (uint16x4_t *)((char *)src.data + 16);
                    v58 = (float32x4_t)vdupq_n_s32(0x3903126Fu);
                    do
                    {
                      v59 = v57;
                      v60 = v56;
                      v61 = width;
                      do
                      {
                        v62 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_f32((float32x4_t)0, v58, vcvtq_f32_u32(vmovl_u16(*v59)))), vmlaq_f32((float32x4_t)0, v58, vcvtq_f32_u32(vmovl_high_u16(*(uint16x8_t *)v59->i8))));
                        v60[-1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_f32((float32x4_t)0, v58, vcvtq_f32_u32(vmovl_u16(v59[-2])))), vmlaq_f32((float32x4_t)0, v58, vcvtq_f32_u32(vmovl_high_u16(*(uint16x8_t *)v59[-2].i8))));
                        *v60 = v62;
                        v60 += 2;
                        v59 += 4;
                        v61 -= 16;
                      }
                      while (v61);
                      v3 = 0;
                      ++v55;
                      v56 = (float16x8_t *)((char *)v56 + v35);
                      v57 = (uint16x4_t *)((char *)v57 + rowBytes);
                    }
                    while (v55 != height);
                  }
                  else
                  {
                    v63 = 0;
                    v64 = (float16x8_t *)((char *)dest.data + 16);
                    v65 = (uint16x4_t *)((char *)src.data + 16);
                    v66 = (2 * src.width) & 0xFFFFFFFFFFFFFFE0;
                    v67 = (char *)dest.data + v66;
                    v68 = (char *)src.data + v66;
                    v69 = (float32x4_t)vdupq_n_s32(0x3903126Fu);
                    do
                    {
                      v70 = v65;
                      v71 = v64;
                      v72 = v53;
                      do
                      {
                        v73 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_f32((float32x4_t)0, v69, vcvtq_f32_u32(vmovl_u16(*v70)))), vmlaq_f32((float32x4_t)0, v69, vcvtq_f32_u32(vmovl_high_u16(*(uint16x8_t *)v70->i8))));
                        v71[-1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_f32((float32x4_t)0, v69, vcvtq_f32_u32(vmovl_u16(v70[-2])))), vmlaq_f32((float32x4_t)0, v69, vcvtq_f32_u32(vmovl_high_u16(*(uint16x8_t *)v70[-2].i8))));
                        *v71 = v73;
                        v71 += 2;
                        v70 += 4;
                        v72 -= 16;
                      }
                      while (v72);
                      v74 = (unsigned __int16 *)v68;
                      v75 = v67;
                      v76 = v54;
                      do
                      {
                        v77 = *v74++;
                        _S2 = (float)((float)v77 * 0.000125) + 0.0;
                        __asm { FCVT            H2, S2 }
                        *v75++ = LOWORD(_S2);
                        --v76;
                      }
                      while (v76);
                      v3 = 0;
                      ++v63;
                      v64 = (float16x8_t *)((char *)v64 + v35);
                      v65 = (uint16x4_t *)((char *)v65 + rowBytes);
                      v67 += v35;
                      v68 += rowBytes;
                    }
                    while (v63 != height);
                  }
                }
                else
                {
                  v36 = 0;
                  do
                  {
                    v37 = v32;
                    v38 = v33;
                    v39 = width;
                    do
                    {
                      v40 = *v37++;
                      _S1 = (float)((float)v40 * 0.000125) + 0.0;
                      __asm { FCVT            H1, S1 }
                      *v38++ = LOWORD(_S1);
                      --v39;
                    }
                    while (v39);
                    v3 = 0;
                    ++v36;
                    v33 += v35;
                    v32 = (unsigned __int16 *)((char *)v32 + rowBytes);
                  }
                  while (v36 != height);
                }
              }
              else
              {
                v3 = 0;
              }
              goto LABEL_168;
            }
          }
        }
      }
    }
    else
    {
      if ((_DWORD)v17 == 1717855600)
      {
        if (vImageConvert_16UToF(&src, &dest, 0.0, 0.000125, 0))
          v3 = 0xFFFFFFFFLL;
        else
          v3 = 0;
        goto LABEL_168;
      }
      PixelBufferUtils::pixelFormatAsString(v17, (char *)__p);
      if (v80 >= 0)
        v47 = __p;
      else
        v47 = (void **)__p[0];
      NSLog(CFSTR("%s:%d - ERROR - pixel format %08x (\"%s\") not supported\n"), "convertfp13_3ToDepthMeters", 1701, v17, v47);
      if (v80 < 0)
        operator delete(__p[0]);
    }
    v3 = 0xFFFFFFFFLL;
LABEL_168:
    CVPixelBufferUnlockBaseAddress(this, 1uLL);
    CVPixelBufferUnlockBaseAddress(a2, 0);
    return v3;
  }
LABEL_65:
  if ((int)v8 <= 1380401728)
  {
    if ((int)v8 <= 875704437)
    {
      if ((_DWORD)v8 == 32)
        return convert4ChannelFormats(this, v8, a2);
      if ((_DWORD)v8 != 875704422)
        goto LABEL_159;
    }
    else if ((_DWORD)v8 != 875704438)
    {
      if ((_DWORD)v8 != 1094862674)
      {
        v20 = 1111970369;
        goto LABEL_121;
      }
      return convert4ChannelFormats(this, v8, a2);
    }
    return YUVFromBGRAPermutes(this, a2, v9);
  }
  if ((int)v8 <= 1380411456)
  {
    if ((_DWORD)v8 == 1380401729)
      return convert4ChannelFormats(this, v8, a2);
    v21 = 26177;
LABEL_120:
    v20 = v21 | 0x52470000;
LABEL_121:
    if ((_DWORD)v8 == v20)
      return convert4ChannelFormats(this, v8, a2);
LABEL_159:
    if (!PixelBufferUtils::planeCountForPixelFormat((PixelBufferUtils *)v8)
      && PixelBufferUtils::componentsPerPixelForPixelFormat(v10, 0) == 1)
    {
      return convertColorToGrayscale(this, a2);
    }
    PixelBufferUtils::pixelFormatAsString((unint64_t)v10, (char *)&src);
    if ((src.width & 0x8000000000000000) == 0)
      v50 = &src;
    else
      v50 = src.data;
    NSLog(CFSTR("%s:%d - ERROR - pixel format %08x (\"%s\") not supported\n"), "convertPixelBufferFormat", 2103, v10, v50);
    goto LABEL_209;
  }
  if ((_DWORD)v8 == 1919365992)
  {
    if ((_DWORD)PixelFormatType == 1380410945)
    {
      return convert4ChannelToPlanar<float,half>(this, a2);
    }
    else if ((_DWORD)PixelFormatType == 1380411457)
    {
      return convert4ChannelToPlanar<half,half>(this, a2);
    }
    else
    {
      return convert4ChannelToPlanar<unsigned char,half>(this, a2);
    }
  }
  else
  {
    if ((_DWORD)v8 != 1919365990)
    {
      v21 = 26689;
      goto LABEL_120;
    }
    if ((_DWORD)PixelFormatType == 1380410945)
    {
      return convert4ChannelToPlanar<float,float>(this, a2);
    }
    else if ((_DWORD)PixelFormatType == 1380411457)
    {
      return convert4ChannelToPlanar<half,float>(this, a2);
    }
    else
    {
      return convert4ChannelToPlanar<unsigned char,float>(this, a2);
    }
  }
}

void sub_20B6B8EB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  if (*(char *)(v19 - 57) < 0)
    operator delete(*(void **)(v19 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t copyPixelBufferVImage(__CVBuffer *a1, CGPoint a2, __CVBuffer *a3, CGRect a4)
{
  double height;
  double width;
  double y;
  double x;
  double v9;
  double v10;
  OSType PixelFormatType;
  PixelBufferUtils *v14;
  CGRect *v15;
  size_t v16;
  _BOOL4 IsEmpty;
  vImagePixelCount v18;
  vImagePixelCount v19;
  double v20;
  double v21;
  vImage_Buffer dest;
  vImage_Buffer src;
  CGPoint v26;
  CGRect v27;
  CGRect v28;
  CGRect v29;

  if (a1 == a3)
    return 0;
  height = a4.size.height;
  width = a4.size.width;
  y = a4.origin.y;
  x = a4.origin.x;
  v9 = a2.y;
  v10 = a2.x;
  PixelFormatType = CVPixelBufferGetPixelFormatType(a3);
  if (PixelFormatType != CVPixelBufferGetPixelFormatType(a1))
    return 0xFFFFFFFFLL;
  if (CVPixelBufferGetPlaneCount(a3))
  {
    v26.x = v10;
    v26.y = v9;
    v29.origin.x = x;
    v29.origin.y = y;
    v29.size.width = width;
    v29.size.height = height;
    return copyPixelBufferMultiPlane(a1, v26, a3, v29);
  }
  v14 = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(a3);
  CVPixelBufferLockBaseAddress(a1, 0);
  CVPixelBufferLockBaseAddress(a3, 1uLL);
  memset(&src, 0, sizeof(src));
  v15 = (CGRect *)MEMORY[0x24BDBF090];
  PixelBufferUtils::asVImageBuffer(a3, *MEMORY[0x24BDBF090], &src);
  memset(&dest, 0, sizeof(dest));
  PixelBufferUtils::asVImageBuffer(a1, *v15, &dest);
  v16 = PixelBufferUtils::pixelSizeForPixelFormat(v14, 0);
  v27.origin.x = x;
  v27.origin.y = y;
  v27.size.width = width;
  v27.size.height = height;
  IsEmpty = CGRectIsEmpty(v27);
  v18 = src.width;
  if (IsEmpty)
  {
    v19 = src.height;
  }
  else
  {
    if (x >= (double)src.width || y >= (double)src.height)
      goto LABEL_27;
    if (width > (double)src.width || height > (double)src.height)
      goto LABEL_27;
    v18 = (unint64_t)width;
    v19 = (unint64_t)height;
    src.data = (char *)src.data + src.rowBytes * (unint64_t)y + v16 * (unint64_t)x;
    src.height = (unint64_t)height;
    src.width = (unint64_t)width;
  }
  v20 = (double)v18;
  v21 = (double)v19;
  v28.origin.x = v10;
  v28.origin.y = v9;
  v28.size.width = (double)v18;
  v28.size.height = (double)v19;
  if (CGRectIsEmpty(v28))
  {
LABEL_17:
    vImageCopyBuffer(&src, &dest, v16, 0);
    CVPixelBufferUnlockBaseAddress(a1, 0);
    CVPixelBufferUnlockBaseAddress(a3, 1uLL);
    return 0;
  }
  if (v10 < (double)dest.width && v9 < (double)dest.height && v20 <= (double)dest.width && v21 <= (double)dest.height)
  {
    dest.data = (char *)dest.data + dest.rowBytes * (unint64_t)v9 + v16 * (unint64_t)v10;
    dest.height = (unint64_t)v21;
    dest.width = (unint64_t)v20;
    goto LABEL_17;
  }
LABEL_27:
  NSLog(CFSTR("%s:%d - ERROR - Region is outside dimensions"), "updateVImageBufferToRegion", 1923);
  return 0xFFFFFFFFLL;
}

uint64_t convert4ChannelFormats(__CVBuffer *a1, int a2, __CVBuffer *a3)
{
  OSType PixelFormatType;
  uint64_t v7;
  _QWORD *v8;
  const uint8_t *v9;
  int v10;
  CGRect *v11;
  vImage_Error v13;
  vImagePixelCount height;
  vImagePixelCount width;
  uint64_t v16;
  char *data;
  size_t rowBytes;
  size_t v19;
  char *v20;
  char *v21;
  vImagePixelCount v22;
  char *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  vImagePixelCount v28;
  vImagePixelCount v29;
  uint64_t v30;
  char *v31;
  size_t v32;
  size_t v33;
  char *v34;
  char *v35;
  vImagePixelCount v36;
  char *v37;
  vImagePixelCount v45;
  vImagePixelCount v46;
  uint64_t v47;
  char *v48;
  size_t v49;
  size_t v50;
  char *v51;
  char *v52;
  vImagePixelCount v53;
  char *v54;
  vImagePixelCount v59;
  vImagePixelCount v60;
  uint64_t v61;
  char *v62;
  size_t v63;
  size_t v64;
  char *v65;
  char *v66;
  vImagePixelCount v67;
  char *v68;
  vImagePixelCount v74;
  vImagePixelCount v75;
  vImagePixelCount v76;
  vImagePixelCount v78;
  char *v79;
  __int16 *v80;
  vImage_Buffer v86;
  vImage_Buffer src;
  _QWORD minFloat[2];
  __int128 maxFloat;
  uint64_t v90;

  v90 = *MEMORY[0x24BDAC8D0];
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  v7 = RGBA_FORMAT_MAP();
  LODWORD(src.data) = a2;
  HIDWORD(src.data) = PixelFormatType;
  v8 = std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v7, (unint64_t)src.data, &src);
  v9 = (const uint8_t *)v8[3];
  v10 = *((_DWORD *)v8 + 8);
  CVPixelBufferLockBaseAddress(a3, 0);
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  memset(&src, 0, sizeof(src));
  v11 = (CGRect *)MEMORY[0x24BDBF090];
  PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x24BDBF090], &src);
  memset(&v86, 0, sizeof(v86));
  PixelBufferUtils::asVImageBuffer(a3, *v11, &v86);
  _S0 = 1.0;
  maxFloat = xmmword_20B6D2B10;
  minFloat[0] = 0;
  minFloat[1] = 0;
  switch(v10)
  {
    case 0:
      v13 = vImagePermuteChannels_ARGB8888(&src, &v86, v9, 0);
      goto LABEL_23;
    case 1:
      height = src.height;
      if (src.height != v86.height)
        goto LABEL_46;
      width = src.width;
      if (src.width != v86.width)
        goto LABEL_46;
      if (!src.height || !src.width)
        goto LABEL_56;
      v16 = 0;
      rowBytes = v86.rowBytes;
      data = (char *)src.data;
      v19 = src.rowBytes;
      v20 = (char *)v86.data;
      do
      {
        v21 = &data[v16 * v19];
        v22 = width;
        v23 = &v20[v16 * rowBytes];
        do
        {
          LOBYTE(_S0) = *v21;
          *(float *)&v24 = (float)LODWORD(_S0) * 0.0039216;
          *(float *)&v23[4 * *v9] = *(float *)&v24;
          LOBYTE(v24) = v21[1];
          *(float *)&v25 = (float)v24 * 0.0039216;
          *(float *)&v23[4 * v9[1]] = *(float *)&v25;
          LOBYTE(v25) = v21[2];
          *(float *)&v26 = (float)v25 * 0.0039216;
          *(float *)&v23[4 * v9[2]] = *(float *)&v26;
          LOBYTE(v26) = v21[3];
          _S0 = (float)v26 * 0.0039216;
          *(float *)&v23[4 * v9[3]] = _S0;
          v21 += 4;
          v23 += 16;
          --v22;
        }
        while (v22);
        v27 = 0;
        ++v16;
      }
      while (v16 != height);
      break;
    case 2:
      v28 = src.height;
      if (src.height != v86.height)
        goto LABEL_46;
      v29 = src.width;
      if (src.width != v86.width)
        goto LABEL_46;
      if (!src.height || !src.width)
        goto LABEL_56;
      v30 = 0;
      v32 = v86.rowBytes;
      v31 = (char *)src.data;
      v33 = src.rowBytes;
      v34 = (char *)v86.data;
      do
      {
        v35 = &v31[v30 * v33];
        v36 = v29;
        v37 = &v34[v30 * v32];
        do
        {
          LOBYTE(_S0) = *v35;
          *(float *)&_S0 = (float)LODWORD(_S0) * 0.0039216;
          __asm { FCVT            H0, S0 }
          *(_WORD *)&v37[2 * *v9] = _S0;
          LOBYTE(_S0) = v35[1];
          *(float *)&_S0 = (float)_S0 * 0.0039216;
          __asm { FCVT            H0, S0 }
          *(_WORD *)&v37[2 * v9[1]] = _S0;
          LOBYTE(_S0) = v35[2];
          *(float *)&_S0 = (float)_S0 * 0.0039216;
          __asm { FCVT            H0, S0 }
          *(_WORD *)&v37[2 * v9[2]] = _S0;
          LOBYTE(_S0) = v35[3];
          _S0 = (float)_S0 * 0.0039216;
          __asm { FCVT            H0, S0 }
          *(_WORD *)&v37[2 * v9[3]] = LOWORD(_S0);
          v35 += 4;
          v37 += 8;
          --v36;
        }
        while (v36);
        v27 = 0;
        ++v30;
      }
      while (v30 != v28);
      break;
    case 3:
      v13 = vImageConvert_ARGBFFFFtoARGB8888_dithered(&src, &v86, (const float *)&maxFloat, (const float *)minFloat, 0, v9, 0);
      goto LABEL_23;
    case 4:
      v13 = vImagePermuteChannels_ARGBFFFF(&src, &v86, v9, 0);
LABEL_23:
      v27 = v13;
      break;
    case 5:
      v45 = src.height;
      if (src.height != v86.height)
        goto LABEL_46;
      v46 = src.width;
      if (src.width != v86.width)
        goto LABEL_46;
      if (!src.height || !src.width)
        goto LABEL_56;
      v47 = 0;
      v49 = v86.rowBytes;
      v48 = (char *)src.data;
      v50 = src.rowBytes;
      v51 = (char *)v86.data;
      do
      {
        v52 = &v48[v47 * v50];
        v53 = v46;
        v54 = &v51[v47 * v49];
        do
        {
          _S0 = *(_DWORD *)v52;
          __asm { FCVT            H0, S0 }
          *(_WORD *)&v54[2 * *v9] = _S0;
          _S0 = *((_DWORD *)v52 + 1);
          __asm { FCVT            H0, S0 }
          *(_WORD *)&v54[2 * v9[1]] = _S0;
          _S0 = *((_DWORD *)v52 + 2);
          __asm { FCVT            H0, S0 }
          *(_WORD *)&v54[2 * v9[2]] = _S0;
          _S0 = *((_DWORD *)v52 + 3);
          __asm { FCVT            H0, S0 }
          *(_WORD *)&v54[2 * v9[3]] = _S0;
          v54 += 8;
          v52 += 16;
          --v53;
        }
        while (v53);
        v27 = 0;
        ++v47;
      }
      while (v47 != v45);
      break;
    case 6:
      v59 = src.height;
      if (src.height != v86.height)
        goto LABEL_46;
      v60 = src.width;
      if (src.width != v86.width)
        goto LABEL_46;
      if (!src.height || !src.width)
        goto LABEL_56;
      v61 = 0;
      v63 = v86.rowBytes;
      v62 = (char *)src.data;
      v64 = src.rowBytes;
      v65 = (char *)v86.data;
      do
      {
        v66 = &v62[v61 * v64];
        v67 = v60;
        v68 = &v65[v61 * v63];
        do
        {
          _H0 = *(_WORD *)v66;
          __asm { FCVT            S0, H0 }
          *(_DWORD *)&v68[4 * *v9] = _S0;
          LOWORD(_S0) = *((_WORD *)v66 + 1);
          __asm { FCVT            S0, H0 }
          *(_DWORD *)&v68[4 * v9[1]] = _S0;
          LOWORD(_S0) = *((_WORD *)v66 + 2);
          __asm { FCVT            S0, H0 }
          *(_DWORD *)&v68[4 * v9[2]] = _S0;
          LOWORD(_S0) = *((_WORD *)v66 + 3);
          __asm { FCVT            S0, H0 }
          *(_DWORD *)&v68[4 * v9[3]] = _S0;
          v68 += 16;
          v66 += 8;
          --v67;
        }
        while (v67);
        v27 = 0;
        ++v61;
      }
      while (v61 != v59);
      break;
    case 7:
      v74 = src.height;
      if (*(_OWORD *)&src.height != *(_OWORD *)&v86.height)
        goto LABEL_46;
      if (src.height && src.width)
      {
        v75 = 0;
        v76 = 1;
        do
        {
          if (v76)
          {
            v78 = 0;
            v79 = (char *)v86.data + v86.rowBytes * v75;
            v80 = (__int16 *)((char *)src.data + src.rowBytes * v75);
            do
            {
              _H0 = *v80;
              __asm { FCVT            S0, H0 }
              v79[*v9] = (int)(float)(_S0 * 255.0);
              LOWORD(_S0) = v80[1];
              __asm { FCVT            S0, H0 }
              v79[v9[1]] = (int)(float)(_S0 * 255.0);
              LOWORD(_S0) = v80[2];
              __asm { FCVT            S0, H0 }
              v79[v9[2]] = (int)(float)(_S0 * 255.0);
              LOWORD(_S0) = v80[3];
              __asm { FCVT            S0, H0 }
              v79[v9[3]] = (int)(float)(_S0 * 255.0);
              ++v78;
              v79 += 4;
              v76 = src.width;
              v80 += 4;
            }
            while (v78 < src.width);
            v74 = src.height;
          }
          v27 = 0;
          ++v75;
        }
        while (v75 < v74);
      }
      else
      {
LABEL_56:
        v27 = 0;
      }
      break;
    default:
LABEL_46:
      v27 = -1;
      break;
  }
  CVPixelBufferUnlockBaseAddress(a3, 0);
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  if (v27)
    return 0xFFFFFFFFLL;
  else
    return 0;
}

BOOL YUVFromBGRAPermutes(__CVBuffer *a1, __CVBuffer *a2, __CVBuffer *a3)
{
  uint64_t PixelFormatType;
  uint64_t v6;
  size_t Width;
  size_t Height;
  const __CFAllocator *v9;
  const __CFDictionary *BufferAttributes;
  __CVBuffer *data;
  vImage_Error v12;
  uint64_t v13;
  const uint8_t *v14;
  CGRect *v15;
  vImage_YpCbCrPixelRange v17;
  vImage_Buffer destCbCr;
  vImage_Buffer destYp;
  vImage_Buffer pixelBufferOut;

  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  if ((_DWORD)PixelFormatType == 1380411457 || (v6 = PixelFormatType, (_DWORD)PixelFormatType == 1380410945))
  {
    v6 = 1111970369;
    Width = CVPixelBufferGetWidth(a1);
    Height = CVPixelBufferGetHeight(a1);
    pixelBufferOut.data = 0;
    v9 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    BufferAttributes = (const __CFDictionary *)getBufferAttributes();
    if (CVPixelBufferCreate(v9, Width, Height, 0x42475241u, BufferAttributes, (CVPixelBufferRef *)&pixelBufferOut))
      data = 0;
    else
      data = (__CVBuffer *)pixelBufferOut.data;
    v12 = (int)convert4ChannelFormats(a1, 1111970369, data);
  }
  else
  {
    v12 = 0;
    data = a1;
  }
  v13 = RGBA_FORMAT_MAP();
  pixelBufferOut.data = (void *)((v6 << 32) | 0x20);
  v14 = (const uint8_t *)std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v13, (unint64_t)pixelBufferOut.data, &pixelBufferOut)[3];
  CVPixelBufferLockBaseAddress(a2, 0);
  CVPixelBufferLockBaseAddress(data, 1uLL);
  memset(&pixelBufferOut, 0, sizeof(pixelBufferOut));
  v15 = (CGRect *)MEMORY[0x24BDBF090];
  PixelBufferUtils::asVImageBuffer(data, *MEMORY[0x24BDBF090], &pixelBufferOut);
  memset(&destYp, 0, sizeof(destYp));
  PixelBufferUtils::asVImageBuffer(a2, 0, *v15, &destYp);
  memset(&destCbCr, 0, sizeof(destCbCr));
  PixelBufferUtils::asVImageBuffer(a2, (__CVBuffer *)1, *v15, &destCbCr);
  if ((YUVFromBGRAPermutes(__CVBuffer *,unsigned int,__CVBuffer *)::isConvesionInfoDefined & 1) == 0)
  {
    v17 = *(vImage_YpCbCrPixelRange *)ymmword_20B6D38BC;
    v12 = vImageConvert_ARGBToYpCbCr_GenerateConversion((const vImage_ARGBToYpCbCrMatrix *)*MEMORY[0x24BDB2EB8], &v17, &YUVFromBGRAPermutes(__CVBuffer *,unsigned int,__CVBuffer *)::conversionInfo, kvImageARGB8888, kvImage420Yp8_CbCr8, 0);
    YUVFromBGRAPermutes(__CVBuffer *,unsigned int,__CVBuffer *)::isConvesionInfoDefined = 1;
  }
  if (!v12)
    v12 = vImageConvert_ARGB8888To420Yp8_CbCr8(&pixelBufferOut, &destYp, &destCbCr, &YUVFromBGRAPermutes(__CVBuffer *,unsigned int,__CVBuffer *)::conversionInfo, v14, 0);
  CVPixelBufferUnlockBaseAddress(data, 1uLL);
  CVPixelBufferUnlockBaseAddress(a2, 0);
  if (CVPixelBufferGetPixelFormatType(a1) == 1380410945)
    CVPixelBufferRelease(data);
  return v12 != 0;
}

uint64_t convert4ChannelToPlanar<half,float>(__CVBuffer *a1, __CVBuffer *a2)
{
  unint64_t PixelFormatType;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned __int8 *v9;
  unsigned int v10;
  float v11;
  CGRect *v12;
  __CVBuffer *v13;
  size_t rowBytes;
  vImage_Buffer *v15;
  vImage_Buffer *p_p;
  __CVBuffer *v18;
  int *v19;
  size_t v20;
  __CVBuffer *v21;
  int *v22;
  size_t v23;
  __CVBuffer *v24;
  int *v25;
  size_t v26;
  vImagePixelCount height;
  vImagePixelCount width;
  uint64_t v29;
  vImagePixelCount v30;
  int *v31;
  float *v32;
  char *v33;
  size_t v34;
  char *v35;
  char *v36;
  float *v37;
  char *v38;
  float *v39;
  char *v40;
  float *v41;
  int *v42;
  int *v43;
  int *v44;
  unint64_t v45;
  __int16 *v46;
  float *v47;
  unint64_t v48;
  vImagePixelCount v57;
  float *v58;
  char *v59;
  __int16 v60;
  unint64_t v63;
  float *v64;
  __int16 *v65;
  unint64_t v66;
  vImagePixelCount v71;
  uint64_t v72;
  unint64_t v75;
  float *v76;
  __int16 *v77;
  unint64_t v78;
  vImagePixelCount v83;
  uint64_t v84;
  unint64_t v87;
  float *v88;
  __int16 *v89;
  unint64_t v90;
  vImagePixelCount v95;
  uint64_t v96;
  __CVBuffer *v99;
  PixelBufferUtils *pixelBuffer;
  int *data;
  vImage_Buffer v102;
  int v103;
  vImage_Buffer __p;

  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  v5 = CVPixelBufferGetPixelFormatType(a2);
  v6 = PixelBufferUtils::planeCountForPixelFormat((PixelBufferUtils *)v5);
  if (PixelBufferUtils::componentsPerPixelForPixelFormat((PixelBufferUtils *)PixelFormatType, 0) == 4)
  {
    if (v6)
    {
      CVPixelBufferLockBaseAddress(a2, 0);
      CVPixelBufferLockBaseAddress(a1, 1uLL);
      v7 = RGBA_FORMAT_MAP();
      LODWORD(__p.data) = v5;
      HIDWORD(__p.data) = PixelFormatType;
      v8 = std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v7, (unint64_t)__p.data, &__p);
      v9 = (unsigned __int8 *)v8[3];
      v10 = *((_DWORD *)v8 + 8) - 1;
      v11 = 1.0;
      if (v10 <= 6)
        v11 = flt_20B6D38DC[v10];
      memset(&__p, 0, sizeof(__p));
      v12 = (CGRect *)MEMORY[0x24BDBF090];
      PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x24BDBF090], &__p);
      v103 = 0;
      v13 = (__CVBuffer *)*v9;
      if (v6 <= (unint64_t)v13)
      {
        rowBytes = 0;
        data = &v103;
      }
      else
      {
        PixelBufferUtils::asVImageBuffer(a2, v13, *v12, &v102);
        data = (int *)v102.data;
        rowBytes = v102.rowBytes;
      }
      v18 = (__CVBuffer *)v9[1];
      if (v6 <= (unint64_t)v18)
      {
        v20 = 0;
        v19 = &v103;
      }
      else
      {
        PixelBufferUtils::asVImageBuffer(a2, v18, *v12, &v102);
        v19 = (int *)v102.data;
        v20 = v102.rowBytes;
      }
      v21 = (__CVBuffer *)v9[2];
      pixelBuffer = a2;
      if (v6 <= (unint64_t)v21)
      {
        v23 = 0;
        v22 = &v103;
      }
      else
      {
        PixelBufferUtils::asVImageBuffer(a2, v21, *v12, &v102);
        v22 = (int *)v102.data;
        v23 = v102.rowBytes;
      }
      v99 = a1;
      v24 = (__CVBuffer *)v9[3];
      if (v6 <= (unint64_t)v24)
      {
        v26 = 0;
        v25 = &v103;
        height = __p.height;
        if (!__p.height)
          goto LABEL_66;
      }
      else
      {
        PixelBufferUtils::asVImageBuffer(pixelBuffer, v24, *v12, &v102);
        v25 = (int *)v102.data;
        v26 = v102.rowBytes;
        height = __p.height;
        if (!__p.height)
          goto LABEL_66;
      }
      width = __p.width;
      if (__p.width)
      {
        v29 = 0;
        v30 = __p.width & 0xFFFFFFFFFFFFFFFELL;
        v31 = data;
        v32 = (float *)(data + 1);
        v33 = (char *)__p.data;
        v34 = __p.rowBytes;
        v35 = (char *)__p.data + 8;
        v36 = (char *)__p.data + 10;
        v37 = (float *)(v19 + 1);
        v38 = (char *)__p.data + 12;
        v39 = (float *)(v22 + 1);
        v40 = (char *)__p.data + 14;
        v41 = (float *)(v25 + 1);
        v42 = v25;
        v43 = v22;
        v44 = v19;
        while (1)
        {
          if ((int *)((char *)data + rowBytes * v29) == &v103)
            goto LABEL_41;
          if (width == 1)
            break;
          v46 = (__int16 *)v35;
          v47 = v32;
          v48 = width & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            _H0 = *(v46 - 4);
            _H1 = *v46;
            __asm
            {
              FCVT            S0, H0
              FCVT            S1, H1
            }
            *(v47 - 1) = v11 * _S0;
            *v47 = v11 * _S1;
            v47 += 2;
            v46 += 8;
            v48 -= 2;
          }
          while (v48);
          v45 = width & 0xFFFFFFFFFFFFFFFELL;
          if (width != v30)
            goto LABEL_39;
LABEL_41:
          if ((int *)((char *)v19 + v20 * v29) == &v103)
            goto LABEL_49;
          if (width == 1)
          {
            v63 = 0;
LABEL_47:
            v71 = width - v63;
            v72 = 4 * v63;
            do
            {
              _H0 = *(_WORD *)&v33[2 * v72 + 2];
              __asm { FCVT            S0, H0 }
              *(float *)&v44[(unint64_t)v72 / 4] = v11 * _S0;
              v72 += 4;
              --v71;
            }
            while (v71);
            goto LABEL_49;
          }
          v64 = v37;
          v65 = (__int16 *)v36;
          v66 = width & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            _H0 = *(v65 - 4);
            _H1 = *v65;
            __asm
            {
              FCVT            S0, H0
              FCVT            S1, H1
            }
            *(v64 - 1) = v11 * _S0;
            *v64 = v11 * _S1;
            v65 += 8;
            v64 += 2;
            v66 -= 2;
          }
          while (v66);
          v63 = width & 0xFFFFFFFFFFFFFFFELL;
          if (width != v30)
            goto LABEL_47;
LABEL_49:
          if ((int *)((char *)v22 + v23 * v29) == &v103)
            goto LABEL_57;
          if (width == 1)
          {
            v75 = 0;
LABEL_55:
            v83 = width - v75;
            v84 = 4 * v75;
            do
            {
              _H0 = *(_WORD *)&v33[2 * v84 + 4];
              __asm { FCVT            S0, H0 }
              *(float *)&v43[(unint64_t)v84 / 4] = v11 * _S0;
              v84 += 4;
              --v83;
            }
            while (v83);
            goto LABEL_57;
          }
          v76 = v39;
          v77 = (__int16 *)v38;
          v78 = width & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            _H0 = *(v77 - 4);
            _H1 = *v77;
            __asm
            {
              FCVT            S0, H0
              FCVT            S1, H1
            }
            *(v76 - 1) = v11 * _S0;
            *v76 = v11 * _S1;
            v77 += 8;
            v76 += 2;
            v78 -= 2;
          }
          while (v78);
          v75 = width & 0xFFFFFFFFFFFFFFFELL;
          if (width != v30)
            goto LABEL_55;
LABEL_57:
          if ((int *)((char *)v25 + v26 * v29) != &v103)
          {
            if (width == 1)
            {
              v87 = 0;
            }
            else
            {
              v88 = v41;
              v89 = (__int16 *)v40;
              v90 = width & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                _H0 = *(v89 - 4);
                _H1 = *v89;
                __asm
                {
                  FCVT            S0, H0
                  FCVT            S1, H1
                }
                *(v88 - 1) = v11 * _S0;
                *v88 = v11 * _S1;
                v89 += 8;
                v88 += 2;
                v90 -= 2;
              }
              while (v90);
              v87 = width & 0xFFFFFFFFFFFFFFFELL;
              if (width == v30)
                goto LABEL_32;
            }
            v95 = width - v87;
            v96 = 4 * v87;
            do
            {
              _H0 = *(_WORD *)&v33[2 * v96 + 6];
              __asm { FCVT            S0, H0 }
              *(float *)&v42[(unint64_t)v96 / 4] = v11 * _S0;
              v96 += 4;
              --v95;
            }
            while (v95);
          }
LABEL_32:
          ++v29;
          v32 = (float *)((char *)v32 + rowBytes);
          v35 += v34;
          v31 = (int *)((char *)v31 + rowBytes);
          v33 += v34;
          v36 += v34;
          v37 = (float *)((char *)v37 + v20);
          v44 = (int *)((char *)v44 + v20);
          v38 += v34;
          v39 = (float *)((char *)v39 + v23);
          v43 = (int *)((char *)v43 + v23);
          v40 += v34;
          v41 = (float *)((char *)v41 + v26);
          v42 = (int *)((char *)v42 + v26);
          if (v29 == height)
            goto LABEL_66;
        }
        v45 = 0;
LABEL_39:
        v57 = width - v45;
        v58 = (float *)&v31[v45];
        v59 = &v33[8 * v45];
        do
        {
          v60 = *(_WORD *)v59;
          v59 += 8;
          _H0 = v60;
          __asm { FCVT            S0, H0 }
          *v58++ = v11 * _S0;
          --v57;
        }
        while (v57);
        goto LABEL_41;
      }
LABEL_66:
      CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
      CVPixelBufferUnlockBaseAddress(v99, 1uLL);
      return 0;
    }
    PixelBufferUtils::pixelFormatAsString(v5, (char *)&__p);
    if ((__p.width & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (vImage_Buffer *)__p.data;
    NSLog(CFSTR("%s:%d - ERROR - pixel format %08x (\"%s\") not supported\n"), "convert4ChannelToPlanar", 1264, v5, p_p);
    if (SHIBYTE(__p.width) < 0)
      operator delete(__p.data);
    return 4294967294;
  }
  else
  {
    PixelBufferUtils::pixelFormatAsString(PixelFormatType, (char *)&__p);
    if ((__p.width & 0x8000000000000000) == 0)
      v15 = &__p;
    else
      v15 = (vImage_Buffer *)__p.data;
    NSLog(CFSTR("%s:%d - ERROR - pixel format %08x (\"%s\") not supported\n"), "convert4ChannelToPlanar", 1258, PixelFormatType, v15);
    if (SHIBYTE(__p.width) < 0)
      operator delete(__p.data);
    return 0xFFFFFFFFLL;
  }
}

void sub_20B6B9E94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t convert4ChannelToPlanar<float,float>(__CVBuffer *a1, __CVBuffer *a2)
{
  unint64_t PixelFormatType;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned __int8 *v9;
  unsigned int v10;
  float v11;
  CGRect *v12;
  __CVBuffer *v13;
  float *data;
  size_t rowBytes;
  vImage_Buffer *v16;
  vImage_Buffer *p_p;
  __CVBuffer *v19;
  int *v20;
  size_t v21;
  __CVBuffer *v22;
  int *v23;
  size_t v24;
  __CVBuffer *v25;
  int *v26;
  size_t v27;
  vImagePixelCount height;
  vImagePixelCount width;
  uint64_t v30;
  float *v31;
  size_t v32;
  int *v33;
  int *v34;
  int *v35;
  float *v36;
  float *v37;
  float *v38;
  vImagePixelCount v39;
  float v40;
  uint64_t v41;
  vImagePixelCount v42;
  uint64_t v43;
  vImagePixelCount v44;
  uint64_t v45;
  vImagePixelCount v46;
  __CVBuffer *pixelBuffer;
  vImage_Buffer v48;
  int v49;
  vImage_Buffer __p;

  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  v5 = CVPixelBufferGetPixelFormatType(a2);
  v6 = PixelBufferUtils::planeCountForPixelFormat((PixelBufferUtils *)v5);
  if (PixelBufferUtils::componentsPerPixelForPixelFormat((PixelBufferUtils *)PixelFormatType, 0) == 4)
  {
    if (v6)
    {
      CVPixelBufferLockBaseAddress(a2, 0);
      CVPixelBufferLockBaseAddress(a1, 1uLL);
      v7 = RGBA_FORMAT_MAP();
      LODWORD(__p.data) = v5;
      HIDWORD(__p.data) = PixelFormatType;
      v8 = std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v7, (unint64_t)__p.data, &__p);
      v9 = (unsigned __int8 *)v8[3];
      v10 = *((_DWORD *)v8 + 8) - 1;
      v11 = 1.0;
      if (v10 <= 6)
        v11 = flt_20B6D38DC[v10];
      memset(&__p, 0, sizeof(__p));
      v12 = (CGRect *)MEMORY[0x24BDBF090];
      PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x24BDBF090], &__p);
      v49 = 0;
      v13 = (__CVBuffer *)*v9;
      if (v6 <= (unint64_t)v13)
      {
        rowBytes = 0;
        data = (float *)&v49;
      }
      else
      {
        PixelBufferUtils::asVImageBuffer(a2, v13, *v12, &v48);
        data = (float *)v48.data;
        rowBytes = v48.rowBytes;
      }
      pixelBuffer = a1;
      v19 = (__CVBuffer *)v9[1];
      if (v6 <= (unint64_t)v19)
      {
        v21 = 0;
        v20 = &v49;
      }
      else
      {
        PixelBufferUtils::asVImageBuffer(a2, v19, *v12, &v48);
        v20 = (int *)v48.data;
        v21 = v48.rowBytes;
      }
      v22 = (__CVBuffer *)v9[2];
      if (v6 <= (unint64_t)v22)
      {
        v24 = 0;
        v23 = &v49;
      }
      else
      {
        PixelBufferUtils::asVImageBuffer(a2, v22, *v12, &v48);
        v23 = (int *)v48.data;
        v24 = v48.rowBytes;
      }
      v25 = (__CVBuffer *)v9[3];
      if (v6 <= (unint64_t)v25)
      {
        v27 = 0;
        v26 = &v49;
        height = __p.height;
        if (!__p.height)
        {
LABEL_46:
          CVPixelBufferUnlockBaseAddress(a2, 0);
          CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
          return 0;
        }
      }
      else
      {
        PixelBufferUtils::asVImageBuffer(a2, v25, *v12, &v48);
        v26 = (int *)v48.data;
        v27 = v48.rowBytes;
        height = __p.height;
        if (!__p.height)
          goto LABEL_46;
      }
      width = __p.width;
      if (__p.width)
      {
        v30 = 0;
        v31 = (float *)__p.data;
        v32 = __p.rowBytes;
        v33 = v26;
        v34 = v23;
        v35 = v20;
        v36 = data;
        do
        {
          if ((int *)((char *)data + rowBytes * v30) != &v49)
          {
            v37 = v31;
            v38 = v36;
            v39 = width;
            do
            {
              v40 = *v37;
              v37 += 4;
              *v38++ = v11 * v40;
              --v39;
            }
            while (v39);
          }
          if ((int *)((char *)v20 + v21 * v30) != &v49)
          {
            v41 = 0;
            v42 = width;
            do
            {
              *(float *)&v35[v41] = v11 * v31[v41 * 4 + 1];
              ++v41;
              --v42;
            }
            while (v42);
          }
          if ((int *)((char *)v23 + v24 * v30) != &v49)
          {
            v43 = 0;
            v44 = width;
            do
            {
              *(float *)&v34[v43] = v11 * v31[v43 * 4 + 2];
              ++v43;
              --v44;
            }
            while (v44);
          }
          if ((int *)((char *)v26 + v27 * v30) != &v49)
          {
            v45 = 0;
            v46 = width;
            do
            {
              *(float *)&v33[v45] = v11 * v31[v45 * 4 + 3];
              ++v45;
              --v46;
            }
            while (v46);
          }
          ++v30;
          v36 = (float *)((char *)v36 + rowBytes);
          v31 = (float *)((char *)v31 + v32);
          v35 = (int *)((char *)v35 + v21);
          v34 = (int *)((char *)v34 + v24);
          v33 = (int *)((char *)v33 + v27);
        }
        while (v30 != height);
      }
      goto LABEL_46;
    }
    PixelBufferUtils::pixelFormatAsString(v5, (char *)&__p);
    if ((__p.width & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (vImage_Buffer *)__p.data;
    NSLog(CFSTR("%s:%d - ERROR - pixel format %08x (\"%s\") not supported\n"), "convert4ChannelToPlanar", 1264, v5, p_p);
    if (SHIBYTE(__p.width) < 0)
      operator delete(__p.data);
    return 4294967294;
  }
  else
  {
    PixelBufferUtils::pixelFormatAsString(PixelFormatType, (char *)&__p);
    if ((__p.width & 0x8000000000000000) == 0)
      v16 = &__p;
    else
      v16 = (vImage_Buffer *)__p.data;
    NSLog(CFSTR("%s:%d - ERROR - pixel format %08x (\"%s\") not supported\n"), "convert4ChannelToPlanar", 1258, PixelFormatType, v16);
    if (SHIBYTE(__p.width) < 0)
      operator delete(__p.data);
    return 0xFFFFFFFFLL;
  }
}

void sub_20B6BA270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t convert4ChannelToPlanar<unsigned char,float>(__CVBuffer *a1, __CVBuffer *a2)
{
  unint64_t PixelFormatType;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned __int8 *v9;
  unsigned int v10;
  float v11;
  CGRect *v12;
  float v13;
  __CVBuffer *v14;
  float *data;
  size_t rowBytes;
  vImage_Buffer *v17;
  vImage_Buffer *p_p;
  __CVBuffer *v20;
  int *v21;
  size_t v22;
  __CVBuffer *v23;
  int *v24;
  size_t v25;
  __CVBuffer *v26;
  int *v27;
  size_t v28;
  vImagePixelCount height;
  vImagePixelCount width;
  uint64_t v31;
  unsigned __int8 *v32;
  size_t v33;
  int *v34;
  int *v35;
  int *v36;
  float *v37;
  unsigned __int8 *v38;
  float *v39;
  vImagePixelCount v40;
  unsigned int v41;
  uint64_t v42;
  vImagePixelCount v43;
  uint64_t v44;
  vImagePixelCount v45;
  uint64_t v46;
  vImagePixelCount v47;
  __CVBuffer *pixelBuffer;
  vImage_Buffer v49;
  int v50;
  vImage_Buffer __p;

  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  v5 = CVPixelBufferGetPixelFormatType(a2);
  v6 = PixelBufferUtils::planeCountForPixelFormat((PixelBufferUtils *)v5);
  if (PixelBufferUtils::componentsPerPixelForPixelFormat((PixelBufferUtils *)PixelFormatType, 0) == 4)
  {
    if (v6)
    {
      CVPixelBufferLockBaseAddress(a2, 0);
      CVPixelBufferLockBaseAddress(a1, 1uLL);
      v7 = RGBA_FORMAT_MAP();
      LODWORD(__p.data) = v5;
      HIDWORD(__p.data) = PixelFormatType;
      v8 = std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v7, (unint64_t)__p.data, &__p);
      v9 = (unsigned __int8 *)v8[3];
      v10 = *((_DWORD *)v8 + 8) - 1;
      v11 = 1.0;
      if (v10 <= 6)
        v11 = flt_20B6D38DC[v10];
      memset(&__p, 0, sizeof(__p));
      v12 = (CGRect *)MEMORY[0x24BDBF090];
      PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x24BDBF090], &__p);
      v50 = 0;
      v14 = (__CVBuffer *)*v9;
      if (v6 <= (unint64_t)v14)
      {
        rowBytes = 0;
        data = (float *)&v50;
      }
      else
      {
        PixelBufferUtils::asVImageBuffer(a2, v14, *v12, &v49);
        data = (float *)v49.data;
        rowBytes = v49.rowBytes;
      }
      pixelBuffer = a1;
      v20 = (__CVBuffer *)v9[1];
      if (v6 <= (unint64_t)v20)
      {
        v22 = 0;
        v21 = &v50;
      }
      else
      {
        PixelBufferUtils::asVImageBuffer(a2, v20, *v12, &v49);
        v21 = (int *)v49.data;
        v22 = v49.rowBytes;
      }
      v23 = (__CVBuffer *)v9[2];
      if (v6 <= (unint64_t)v23)
      {
        v25 = 0;
        v24 = &v50;
      }
      else
      {
        PixelBufferUtils::asVImageBuffer(a2, v23, *v12, &v49);
        v24 = (int *)v49.data;
        v25 = v49.rowBytes;
      }
      v26 = (__CVBuffer *)v9[3];
      if (v6 <= (unint64_t)v26)
      {
        v28 = 0;
        v27 = &v50;
        height = __p.height;
        if (!__p.height)
        {
LABEL_46:
          CVPixelBufferUnlockBaseAddress(a2, 0);
          CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
          return 0;
        }
      }
      else
      {
        PixelBufferUtils::asVImageBuffer(a2, v26, *v12, &v49);
        v27 = (int *)v49.data;
        v28 = v49.rowBytes;
        height = __p.height;
        if (!__p.height)
          goto LABEL_46;
      }
      width = __p.width;
      if (__p.width)
      {
        v31 = 0;
        v32 = (unsigned __int8 *)__p.data;
        v33 = __p.rowBytes;
        v34 = v27;
        v35 = v24;
        v36 = v21;
        v37 = data;
        do
        {
          if ((int *)((char *)data + rowBytes * v31) != &v50)
          {
            v38 = v32;
            v39 = v37;
            v40 = width;
            do
            {
              v41 = *v38;
              v38 += 4;
              v13 = v11 * (float)v41;
              *v39++ = v13;
              --v40;
            }
            while (v40);
          }
          if ((int *)((char *)v21 + v22 * v31) != &v50)
          {
            v42 = 0;
            v43 = width;
            do
            {
              LOBYTE(v13) = v32[v42 * 4 + 1];
              v13 = v11 * (float)LODWORD(v13);
              *(float *)&v36[v42++] = v13;
              --v43;
            }
            while (v43);
          }
          if ((int *)((char *)v24 + v25 * v31) != &v50)
          {
            v44 = 0;
            v45 = width;
            do
            {
              LOBYTE(v13) = v32[v44 * 4 + 2];
              v13 = v11 * (float)LODWORD(v13);
              *(float *)&v35[v44++] = v13;
              --v45;
            }
            while (v45);
          }
          if ((int *)((char *)v27 + v28 * v31) != &v50)
          {
            v46 = 0;
            v47 = width;
            do
            {
              LOBYTE(v13) = v32[v46 * 4 + 3];
              v13 = v11 * (float)LODWORD(v13);
              *(float *)&v34[v46++] = v13;
              --v47;
            }
            while (v47);
          }
          ++v31;
          v37 = (float *)((char *)v37 + rowBytes);
          v32 += v33;
          v36 = (int *)((char *)v36 + v22);
          v35 = (int *)((char *)v35 + v25);
          v34 = (int *)((char *)v34 + v28);
        }
        while (v31 != height);
      }
      goto LABEL_46;
    }
    PixelBufferUtils::pixelFormatAsString(v5, (char *)&__p);
    if ((__p.width & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (vImage_Buffer *)__p.data;
    NSLog(CFSTR("%s:%d - ERROR - pixel format %08x (\"%s\") not supported\n"), "convert4ChannelToPlanar", 1264, v5, p_p);
    if (SHIBYTE(__p.width) < 0)
      operator delete(__p.data);
    return 4294967294;
  }
  else
  {
    PixelBufferUtils::pixelFormatAsString(PixelFormatType, (char *)&__p);
    if ((__p.width & 0x8000000000000000) == 0)
      v17 = &__p;
    else
      v17 = (vImage_Buffer *)__p.data;
    NSLog(CFSTR("%s:%d - ERROR - pixel format %08x (\"%s\") not supported\n"), "convert4ChannelToPlanar", 1258, PixelFormatType, v17);
    if (SHIBYTE(__p.width) < 0)
      operator delete(__p.data);
    return 0xFFFFFFFFLL;
  }
}

void sub_20B6BA65C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t convert4ChannelToPlanar<half,half>(__CVBuffer *a1, __CVBuffer *a2)
{
  unint64_t PixelFormatType;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned __int8 *v9;
  unsigned int v10;
  float v11;
  CGRect *v12;
  __CVBuffer *v13;
  __int16 *data;
  size_t rowBytes;
  vImage_Buffer *v16;
  vImage_Buffer *p_p;
  __CVBuffer *v19;
  __int16 *v20;
  size_t v21;
  __CVBuffer *v22;
  __int16 *v23;
  size_t v24;
  __CVBuffer *v25;
  __int16 *v26;
  size_t v27;
  vImagePixelCount height;
  vImagePixelCount width;
  uint64_t v30;
  char *v31;
  size_t v32;
  __int16 *v33;
  __int16 *v34;
  __int16 *v35;
  __int16 *v36;
  __int16 *v37;
  __int16 *v38;
  vImagePixelCount v39;
  __int16 v40;
  uint64_t v48;
  __int16 *v49;
  vImagePixelCount v50;
  uint64_t v54;
  __int16 *v55;
  vImagePixelCount v56;
  uint64_t v60;
  __int16 *v61;
  vImagePixelCount v62;
  __CVBuffer *pixelBuffer;
  vImage_Buffer v67;
  __int16 v68;
  vImage_Buffer __p;

  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  v5 = CVPixelBufferGetPixelFormatType(a2);
  v6 = PixelBufferUtils::planeCountForPixelFormat((PixelBufferUtils *)v5);
  if (PixelBufferUtils::componentsPerPixelForPixelFormat((PixelBufferUtils *)PixelFormatType, 0) == 4)
  {
    if (v6)
    {
      CVPixelBufferLockBaseAddress(a2, 0);
      CVPixelBufferLockBaseAddress(a1, 1uLL);
      v7 = RGBA_FORMAT_MAP();
      LODWORD(__p.data) = v5;
      HIDWORD(__p.data) = PixelFormatType;
      v8 = std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v7, (unint64_t)__p.data, &__p);
      v9 = (unsigned __int8 *)v8[3];
      v10 = *((_DWORD *)v8 + 8) - 1;
      v11 = 1.0;
      if (v10 <= 6)
        v11 = flt_20B6D38DC[v10];
      memset(&__p, 0, sizeof(__p));
      v12 = (CGRect *)MEMORY[0x24BDBF090];
      PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x24BDBF090], &__p);
      v68 = 0;
      v13 = (__CVBuffer *)*v9;
      if (v6 <= (unint64_t)v13)
      {
        rowBytes = 0;
        data = &v68;
      }
      else
      {
        PixelBufferUtils::asVImageBuffer(a2, v13, *v12, &v67);
        data = (__int16 *)v67.data;
        rowBytes = v67.rowBytes;
      }
      pixelBuffer = a1;
      v19 = (__CVBuffer *)v9[1];
      if (v6 <= (unint64_t)v19)
      {
        v21 = 0;
        v20 = &v68;
      }
      else
      {
        PixelBufferUtils::asVImageBuffer(a2, v19, *v12, &v67);
        v20 = (__int16 *)v67.data;
        v21 = v67.rowBytes;
      }
      v22 = (__CVBuffer *)v9[2];
      if (v6 <= (unint64_t)v22)
      {
        v24 = 0;
        v23 = &v68;
      }
      else
      {
        PixelBufferUtils::asVImageBuffer(a2, v22, *v12, &v67);
        v23 = (__int16 *)v67.data;
        v24 = v67.rowBytes;
      }
      v25 = (__CVBuffer *)v9[3];
      if (v6 <= (unint64_t)v25)
      {
        v27 = 0;
        v26 = &v68;
        height = __p.height;
        if (!__p.height)
        {
LABEL_46:
          CVPixelBufferUnlockBaseAddress(a2, 0);
          CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
          return 0;
        }
      }
      else
      {
        PixelBufferUtils::asVImageBuffer(a2, v25, *v12, &v67);
        v26 = (__int16 *)v67.data;
        v27 = v67.rowBytes;
        height = __p.height;
        if (!__p.height)
          goto LABEL_46;
      }
      width = __p.width;
      if (__p.width)
      {
        v30 = 0;
        v31 = (char *)__p.data;
        v32 = __p.rowBytes;
        v33 = v26;
        v34 = v23;
        v35 = v20;
        v36 = data;
        do
        {
          if ((__int16 *)((char *)data + rowBytes * v30) != &v68)
          {
            v37 = (__int16 *)v31;
            v38 = v36;
            v39 = width;
            do
            {
              v40 = *v37;
              v37 += 4;
              _H0 = v40;
              __asm { FCVT            S0, H0 }
              _S0 = v11 * _S0;
              __asm { FCVT            H0, S0 }
              *v38++ = LOWORD(_S0);
              --v39;
            }
            while (v39);
          }
          if ((__int16 *)((char *)v20 + v21 * v30) != &v68)
          {
            v48 = 2;
            v49 = v35;
            v50 = width;
            do
            {
              _H0 = *(_WORD *)&v31[v48];
              __asm { FCVT            S0, H0 }
              _S0 = v11 * _S0;
              __asm { FCVT            H0, S0 }
              *v49++ = LOWORD(_S0);
              v48 += 8;
              --v50;
            }
            while (v50);
          }
          if ((__int16 *)((char *)v23 + v24 * v30) != &v68)
          {
            v54 = 4;
            v55 = v34;
            v56 = width;
            do
            {
              _H0 = *(_WORD *)&v31[v54];
              __asm { FCVT            S0, H0 }
              _S0 = v11 * _S0;
              __asm { FCVT            H0, S0 }
              *v55++ = LOWORD(_S0);
              v54 += 8;
              --v56;
            }
            while (v56);
          }
          if ((__int16 *)((char *)v26 + v27 * v30) != &v68)
          {
            v60 = 6;
            v61 = v33;
            v62 = width;
            do
            {
              _H0 = *(_WORD *)&v31[v60];
              __asm { FCVT            S0, H0 }
              _S0 = v11 * _S0;
              __asm { FCVT            H0, S0 }
              *v61++ = LOWORD(_S0);
              v60 += 8;
              --v62;
            }
            while (v62);
          }
          ++v30;
          v36 = (__int16 *)((char *)v36 + rowBytes);
          v31 += v32;
          v35 = (__int16 *)((char *)v35 + v21);
          v34 = (__int16 *)((char *)v34 + v24);
          v33 = (__int16 *)((char *)v33 + v27);
        }
        while (v30 != height);
      }
      goto LABEL_46;
    }
    PixelBufferUtils::pixelFormatAsString(v5, (char *)&__p);
    if ((__p.width & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (vImage_Buffer *)__p.data;
    NSLog(CFSTR("%s:%d - ERROR - pixel format %08x (\"%s\") not supported\n"), "convert4ChannelToPlanar", 1264, v5, p_p);
    if (SHIBYTE(__p.width) < 0)
      operator delete(__p.data);
    return 4294967294;
  }
  else
  {
    PixelBufferUtils::pixelFormatAsString(PixelFormatType, (char *)&__p);
    if ((__p.width & 0x8000000000000000) == 0)
      v16 = &__p;
    else
      v16 = (vImage_Buffer *)__p.data;
    NSLog(CFSTR("%s:%d - ERROR - pixel format %08x (\"%s\") not supported\n"), "convert4ChannelToPlanar", 1258, PixelFormatType, v16);
    if (SHIBYTE(__p.width) < 0)
      operator delete(__p.data);
    return 0xFFFFFFFFLL;
  }
}

void sub_20B6BAA5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t convert4ChannelToPlanar<float,half>(__CVBuffer *a1, __CVBuffer *a2)
{
  unint64_t PixelFormatType;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned __int8 *v9;
  unsigned int v10;
  float v11;
  CGRect *v12;
  __CVBuffer *v13;
  size_t rowBytes;
  vImage_Buffer *v15;
  vImage_Buffer *p_p;
  __CVBuffer *v18;
  size_t v19;
  __CVBuffer *v20;
  __int16 *v21;
  size_t v22;
  __CVBuffer *v23;
  __int16 *v24;
  size_t v25;
  vImagePixelCount height;
  vImagePixelCount width;
  uint64_t v28;
  vImagePixelCount v29;
  __int16 *v30;
  __int16 *v31;
  _WORD *v32;
  char *v33;
  size_t v34;
  char *v35;
  char *v36;
  _WORD *v37;
  char *v38;
  _WORD *v39;
  char *v40;
  _WORD *v41;
  __int16 *v42;
  __int16 *v43;
  unint64_t v44;
  int *v45;
  _WORD *v46;
  unint64_t v47;
  int v49;
  vImagePixelCount v59;
  __int16 *v60;
  char *v61;
  int v62;
  unint64_t v66;
  _WORD *v67;
  int *v68;
  unint64_t v69;
  int v71;
  vImagePixelCount v77;
  __int16 *v78;
  uint64_t v79;
  unint64_t v83;
  _WORD *v84;
  int *v85;
  unint64_t v86;
  int v88;
  vImagePixelCount v94;
  __int16 *v95;
  uint64_t v96;
  unint64_t v100;
  _WORD *v101;
  int *v102;
  unint64_t v103;
  int v105;
  vImagePixelCount v111;
  __int16 *v112;
  uint64_t v113;
  __CVBuffer *pixelBuffer;
  __int16 *v118;
  __int16 *data;
  vImage_Buffer v120;
  __int16 v121;
  vImage_Buffer __p;

  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  v5 = CVPixelBufferGetPixelFormatType(a2);
  v6 = PixelBufferUtils::planeCountForPixelFormat((PixelBufferUtils *)v5);
  if (PixelBufferUtils::componentsPerPixelForPixelFormat((PixelBufferUtils *)PixelFormatType, 0) == 4)
  {
    if (v6)
    {
      CVPixelBufferLockBaseAddress(a2, 0);
      CVPixelBufferLockBaseAddress(a1, 1uLL);
      v7 = RGBA_FORMAT_MAP();
      LODWORD(__p.data) = v5;
      HIDWORD(__p.data) = PixelFormatType;
      v8 = std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v7, (unint64_t)__p.data, &__p);
      v9 = (unsigned __int8 *)v8[3];
      v10 = *((_DWORD *)v8 + 8) - 1;
      v11 = 1.0;
      if (v10 <= 6)
        v11 = flt_20B6D38DC[v10];
      memset(&__p, 0, sizeof(__p));
      v12 = (CGRect *)MEMORY[0x24BDBF090];
      PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x24BDBF090], &__p);
      v121 = 0;
      v13 = (__CVBuffer *)*v9;
      if (v6 <= (unint64_t)v13)
      {
        rowBytes = 0;
        data = &v121;
      }
      else
      {
        PixelBufferUtils::asVImageBuffer(a2, v13, *v12, &v120);
        data = (__int16 *)v120.data;
        rowBytes = v120.rowBytes;
      }
      v18 = (__CVBuffer *)v9[1];
      if (v6 <= (unint64_t)v18)
      {
        v19 = 0;
        v118 = &v121;
      }
      else
      {
        PixelBufferUtils::asVImageBuffer(a2, v18, *v12, &v120);
        v118 = (__int16 *)v120.data;
        v19 = v120.rowBytes;
      }
      v20 = (__CVBuffer *)v9[2];
      if (v6 <= (unint64_t)v20)
      {
        v22 = 0;
        v21 = &v121;
      }
      else
      {
        PixelBufferUtils::asVImageBuffer(a2, v20, *v12, &v120);
        v21 = (__int16 *)v120.data;
        v22 = v120.rowBytes;
      }
      v23 = (__CVBuffer *)v9[3];
      pixelBuffer = a2;
      if (v6 <= (unint64_t)v23)
      {
        v25 = 0;
        v24 = &v121;
        height = __p.height;
        if (!__p.height)
          goto LABEL_66;
      }
      else
      {
        PixelBufferUtils::asVImageBuffer(a2, v23, *v12, &v120);
        v24 = (__int16 *)v120.data;
        v25 = v120.rowBytes;
        height = __p.height;
        if (!__p.height)
          goto LABEL_66;
      }
      width = __p.width;
      if (__p.width)
      {
        v28 = 0;
        v29 = __p.width & 0xFFFFFFFFFFFFFFFELL;
        v31 = v118;
        v30 = data;
        v32 = data + 1;
        v33 = (char *)__p.data;
        v34 = __p.rowBytes;
        v35 = (char *)__p.data + 16;
        v36 = (char *)__p.data + 20;
        v37 = v118 + 1;
        v38 = (char *)__p.data + 24;
        v39 = v21 + 1;
        v40 = (char *)__p.data + 28;
        v41 = v24 + 1;
        v42 = v24;
        v43 = v21;
        while (1)
        {
          if ((__int16 *)((char *)data + rowBytes * v28) == &v121)
            goto LABEL_41;
          if (width == 1)
            break;
          v45 = (int *)v35;
          v46 = v32;
          v47 = width & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            _S0 = *(v45 - 4);
            v49 = *v45;
            v45 += 8;
            _S1 = v49;
            __asm
            {
              FCVT            H0, S0
              FCVT            H1, S1
              FCVT            S0, H0
              FCVT            S1, H1
            }
            _S0 = v11 * _S0;
            _S1 = v11 * _S1;
            __asm
            {
              FCVT            H0, S0
              FCVT            H1, S1
            }
            *(v46 - 1) = LOWORD(_S0);
            *v46 = LOWORD(_S1);
            v46 += 2;
            v47 -= 2;
          }
          while (v47);
          v44 = width & 0xFFFFFFFFFFFFFFFELL;
          if (width != v29)
            goto LABEL_39;
LABEL_41:
          if ((__int16 *)((char *)v118 + v19 * v28) == &v121)
            goto LABEL_49;
          if (width == 1)
          {
            v66 = 0;
LABEL_47:
            v77 = width - v66;
            v78 = &v31[v66];
            v79 = (16 * v66) | 4;
            do
            {
              _S0 = *(_DWORD *)&v33[v79];
              __asm
              {
                FCVT            H0, S0
                FCVT            S0, H0
              }
              _S0 = v11 * _S0;
              __asm { FCVT            H0, S0 }
              *v78++ = LOWORD(_S0);
              v79 += 16;
              --v77;
            }
            while (v77);
            goto LABEL_49;
          }
          v67 = v37;
          v68 = (int *)v36;
          v69 = width & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            _S0 = *(v68 - 4);
            v71 = *v68;
            v68 += 8;
            _S1 = v71;
            __asm
            {
              FCVT            H0, S0
              FCVT            H1, S1
              FCVT            S0, H0
              FCVT            S1, H1
            }
            _S0 = v11 * _S0;
            _S1 = v11 * _S1;
            __asm
            {
              FCVT            H0, S0
              FCVT            H1, S1
            }
            *(v67 - 1) = LOWORD(_S0);
            *v67 = LOWORD(_S1);
            v67 += 2;
            v69 -= 2;
          }
          while (v69);
          v66 = width & 0xFFFFFFFFFFFFFFFELL;
          if (width != v29)
            goto LABEL_47;
LABEL_49:
          if ((__int16 *)((char *)v21 + v22 * v28) == &v121)
            goto LABEL_57;
          if (width == 1)
          {
            v83 = 0;
LABEL_55:
            v94 = width - v83;
            v95 = &v43[v83];
            v96 = (16 * v83) | 8;
            do
            {
              _S0 = *(_DWORD *)&v33[v96];
              __asm
              {
                FCVT            H0, S0
                FCVT            S0, H0
              }
              _S0 = v11 * _S0;
              __asm { FCVT            H0, S0 }
              *v95++ = LOWORD(_S0);
              v96 += 16;
              --v94;
            }
            while (v94);
            goto LABEL_57;
          }
          v84 = v39;
          v85 = (int *)v38;
          v86 = width & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            _S0 = *(v85 - 4);
            v88 = *v85;
            v85 += 8;
            _S1 = v88;
            __asm
            {
              FCVT            H0, S0
              FCVT            H1, S1
              FCVT            S0, H0
              FCVT            S1, H1
            }
            _S0 = v11 * _S0;
            _S1 = v11 * _S1;
            __asm
            {
              FCVT            H0, S0
              FCVT            H1, S1
            }
            *(v84 - 1) = LOWORD(_S0);
            *v84 = LOWORD(_S1);
            v84 += 2;
            v86 -= 2;
          }
          while (v86);
          v83 = width & 0xFFFFFFFFFFFFFFFELL;
          if (width != v29)
            goto LABEL_55;
LABEL_57:
          if ((__int16 *)((char *)v24 + v25 * v28) != &v121)
          {
            if (width == 1)
            {
              v100 = 0;
            }
            else
            {
              v101 = v41;
              v102 = (int *)v40;
              v103 = width & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                _S0 = *(v102 - 4);
                v105 = *v102;
                v102 += 8;
                _S1 = v105;
                __asm
                {
                  FCVT            H0, S0
                  FCVT            H1, S1
                  FCVT            S0, H0
                  FCVT            S1, H1
                }
                _S0 = v11 * _S0;
                _S1 = v11 * _S1;
                __asm
                {
                  FCVT            H0, S0
                  FCVT            H1, S1
                }
                *(v101 - 1) = LOWORD(_S0);
                *v101 = LOWORD(_S1);
                v101 += 2;
                v103 -= 2;
              }
              while (v103);
              v100 = width & 0xFFFFFFFFFFFFFFFELL;
              if (width == v29)
                goto LABEL_32;
            }
            v111 = width - v100;
            v112 = &v42[v100];
            v113 = (16 * v100) | 0xC;
            do
            {
              _S0 = *(_DWORD *)&v33[v113];
              __asm
              {
                FCVT            H0, S0
                FCVT            S0, H0
              }
              _S0 = v11 * _S0;
              __asm { FCVT            H0, S0 }
              *v112++ = LOWORD(_S0);
              v113 += 16;
              --v111;
            }
            while (v111);
          }
LABEL_32:
          ++v28;
          v32 = (_WORD *)((char *)v32 + rowBytes);
          v35 += v34;
          v30 = (__int16 *)((char *)v30 + rowBytes);
          v33 += v34;
          v36 += v34;
          v37 = (_WORD *)((char *)v37 + v19);
          v31 = (__int16 *)((char *)v31 + v19);
          v38 += v34;
          v39 = (_WORD *)((char *)v39 + v22);
          v43 = (__int16 *)((char *)v43 + v22);
          v40 += v34;
          v41 = (_WORD *)((char *)v41 + v25);
          v42 = (__int16 *)((char *)v42 + v25);
          if (v28 == height)
            goto LABEL_66;
        }
        v44 = 0;
LABEL_39:
        v59 = width - v44;
        v60 = &v30[v44];
        v61 = &v33[16 * v44];
        do
        {
          v62 = *(_DWORD *)v61;
          v61 += 16;
          _S0 = v62;
          __asm
          {
            FCVT            H0, S0
            FCVT            S0, H0
          }
          _S0 = v11 * _S0;
          __asm { FCVT            H0, S0 }
          *v60++ = LOWORD(_S0);
          --v59;
        }
        while (v59);
        goto LABEL_41;
      }
LABEL_66:
      CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
      CVPixelBufferUnlockBaseAddress(a1, 1uLL);
      return 0;
    }
    PixelBufferUtils::pixelFormatAsString(v5, (char *)&__p);
    if ((__p.width & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (vImage_Buffer *)__p.data;
    NSLog(CFSTR("%s:%d - ERROR - pixel format %08x (\"%s\") not supported\n"), "convert4ChannelToPlanar", 1264, v5, p_p);
    if (SHIBYTE(__p.width) < 0)
      operator delete(__p.data);
    return 4294967294;
  }
  else
  {
    PixelBufferUtils::pixelFormatAsString(PixelFormatType, (char *)&__p);
    if ((__p.width & 0x8000000000000000) == 0)
      v15 = &__p;
    else
      v15 = (vImage_Buffer *)__p.data;
    NSLog(CFSTR("%s:%d - ERROR - pixel format %08x (\"%s\") not supported\n"), "convert4ChannelToPlanar", 1258, PixelFormatType, v15);
    if (SHIBYTE(__p.width) < 0)
      operator delete(__p.data);
    return 0xFFFFFFFFLL;
  }
}

void sub_20B6BB07C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t convert4ChannelToPlanar<unsigned char,half>(__CVBuffer *a1, __CVBuffer *a2)
{
  unint64_t PixelFormatType;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned __int8 *v9;
  unsigned int v10;
  float v11;
  CGRect *v12;
  __CVBuffer *v14;
  __int16 *data;
  size_t rowBytes;
  vImage_Buffer *v17;
  vImage_Buffer *p_p;
  __CVBuffer *v20;
  __int16 *v21;
  size_t v22;
  __CVBuffer *v23;
  __int16 *v24;
  size_t v25;
  __CVBuffer *v26;
  __int16 *v27;
  size_t v28;
  vImagePixelCount height;
  vImagePixelCount width;
  uint64_t v31;
  unsigned __int8 *v32;
  size_t v33;
  __int16 *v34;
  __int16 *v35;
  __int16 *v36;
  __int16 *v37;
  unsigned __int8 *v38;
  __int16 *v39;
  vImagePixelCount v40;
  unsigned int v41;
  uint64_t v46;
  __int16 *v47;
  vImagePixelCount v48;
  uint64_t v49;
  __int16 *v50;
  vImagePixelCount v51;
  uint64_t v52;
  __int16 *v53;
  vImagePixelCount v54;
  __CVBuffer *pixelBuffer;
  vImage_Buffer v56;
  __int16 v57;
  vImage_Buffer __p;

  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  v5 = CVPixelBufferGetPixelFormatType(a2);
  v6 = PixelBufferUtils::planeCountForPixelFormat((PixelBufferUtils *)v5);
  if (PixelBufferUtils::componentsPerPixelForPixelFormat((PixelBufferUtils *)PixelFormatType, 0) == 4)
  {
    if (v6)
    {
      CVPixelBufferLockBaseAddress(a2, 0);
      CVPixelBufferLockBaseAddress(a1, 1uLL);
      v7 = RGBA_FORMAT_MAP();
      LODWORD(__p.data) = v5;
      HIDWORD(__p.data) = PixelFormatType;
      v8 = std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v7, (unint64_t)__p.data, &__p);
      v9 = (unsigned __int8 *)v8[3];
      v10 = *((_DWORD *)v8 + 8) - 1;
      v11 = 1.0;
      if (v10 <= 6)
        v11 = flt_20B6D38DC[v10];
      memset(&__p, 0, sizeof(__p));
      v12 = (CGRect *)MEMORY[0x24BDBF090];
      PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x24BDBF090], &__p);
      _S0 = 0.0;
      v57 = 0;
      v14 = (__CVBuffer *)*v9;
      if (v6 <= (unint64_t)v14)
      {
        rowBytes = 0;
        data = &v57;
      }
      else
      {
        PixelBufferUtils::asVImageBuffer(a2, v14, *v12, &v56);
        data = (__int16 *)v56.data;
        rowBytes = v56.rowBytes;
      }
      pixelBuffer = a1;
      v20 = (__CVBuffer *)v9[1];
      if (v6 <= (unint64_t)v20)
      {
        v22 = 0;
        v21 = &v57;
      }
      else
      {
        PixelBufferUtils::asVImageBuffer(a2, v20, *v12, &v56);
        v21 = (__int16 *)v56.data;
        v22 = v56.rowBytes;
      }
      v23 = (__CVBuffer *)v9[2];
      if (v6 <= (unint64_t)v23)
      {
        v25 = 0;
        v24 = &v57;
      }
      else
      {
        PixelBufferUtils::asVImageBuffer(a2, v23, *v12, &v56);
        v24 = (__int16 *)v56.data;
        v25 = v56.rowBytes;
      }
      v26 = (__CVBuffer *)v9[3];
      if (v6 <= (unint64_t)v26)
      {
        v28 = 0;
        v27 = &v57;
        height = __p.height;
        if (!__p.height)
        {
LABEL_46:
          CVPixelBufferUnlockBaseAddress(a2, 0);
          CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
          return 0;
        }
      }
      else
      {
        PixelBufferUtils::asVImageBuffer(a2, v26, *v12, &v56);
        v27 = (__int16 *)v56.data;
        v28 = v56.rowBytes;
        height = __p.height;
        if (!__p.height)
          goto LABEL_46;
      }
      width = __p.width;
      if (__p.width)
      {
        v31 = 0;
        v32 = (unsigned __int8 *)__p.data;
        v33 = __p.rowBytes;
        v34 = v27;
        v35 = v24;
        v36 = v21;
        v37 = data;
        do
        {
          if ((__int16 *)((char *)data + rowBytes * v31) != &v57)
          {
            v38 = v32;
            v39 = v37;
            v40 = width;
            do
            {
              v41 = *v38;
              v38 += 4;
              _S0 = v11 * (float)v41;
              __asm { FCVT            H0, S0 }
              *v39++ = LOWORD(_S0);
              --v40;
            }
            while (v40);
          }
          if ((__int16 *)((char *)v21 + v22 * v31) != &v57)
          {
            v46 = 1;
            v47 = v36;
            v48 = width;
            do
            {
              LOBYTE(_S0) = v32[v46];
              _S0 = v11 * (float)LODWORD(_S0);
              __asm { FCVT            H0, S0 }
              *v47++ = LOWORD(_S0);
              v46 += 4;
              --v48;
            }
            while (v48);
          }
          if ((__int16 *)((char *)v24 + v25 * v31) != &v57)
          {
            v49 = 2;
            v50 = v35;
            v51 = width;
            do
            {
              LOBYTE(_S0) = v32[v49];
              _S0 = v11 * (float)LODWORD(_S0);
              __asm { FCVT            H0, S0 }
              *v50++ = LOWORD(_S0);
              v49 += 4;
              --v51;
            }
            while (v51);
          }
          if ((__int16 *)((char *)v27 + v28 * v31) != &v57)
          {
            v52 = 3;
            v53 = v34;
            v54 = width;
            do
            {
              LOBYTE(_S0) = v32[v52];
              _S0 = v11 * (float)LODWORD(_S0);
              __asm { FCVT            H0, S0 }
              *v53++ = LOWORD(_S0);
              v52 += 4;
              --v54;
            }
            while (v54);
          }
          ++v31;
          v37 = (__int16 *)((char *)v37 + rowBytes);
          v32 += v33;
          v36 = (__int16 *)((char *)v36 + v22);
          v35 = (__int16 *)((char *)v35 + v25);
          v34 = (__int16 *)((char *)v34 + v28);
        }
        while (v31 != height);
      }
      goto LABEL_46;
    }
    PixelBufferUtils::pixelFormatAsString(v5, (char *)&__p);
    if ((__p.width & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (vImage_Buffer *)__p.data;
    NSLog(CFSTR("%s:%d - ERROR - pixel format %08x (\"%s\") not supported\n"), "convert4ChannelToPlanar", 1264, v5, p_p);
    if (SHIBYTE(__p.width) < 0)
      operator delete(__p.data);
    return 4294967294;
  }
  else
  {
    PixelBufferUtils::pixelFormatAsString(PixelFormatType, (char *)&__p);
    if ((__p.width & 0x8000000000000000) == 0)
      v17 = &__p;
    else
      v17 = (vImage_Buffer *)__p.data;
    NSLog(CFSTR("%s:%d - ERROR - pixel format %08x (\"%s\") not supported\n"), "convert4ChannelToPlanar", 1258, PixelFormatType, v17);
    if (SHIBYTE(__p.width) < 0)
      operator delete(__p.data);
    return 0xFFFFFFFFLL;
  }
}

void sub_20B6BB47C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t convertColorToGrayscale(__CVBuffer *a1, __CVBuffer *a2)
{
  size_t Width;
  size_t Height;
  const __CFAllocator *v6;
  const __CFDictionary *BufferAttributes;
  BOOL v8;
  __CVBuffer *data;
  _BOOL8 v10;
  CGRect *v11;
  unint64_t PixelFormatType;
  unint64_t v13;
  vImage_Error v14;
  void **v16;
  void *__p[2];
  char v18;
  vImage_Buffer src;
  vImage_Buffer pixelBufferOut;

  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  pixelBufferOut.data = 0;
  v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  BufferAttributes = (const __CFDictionary *)getBufferAttributes();
  if (CVPixelBufferCreate(v6, Width, Height, 0x34323066u, BufferAttributes, (CVPixelBufferRef *)&pixelBufferOut))
    data = 0;
  else
    data = (__CVBuffer *)pixelBufferOut.data;
  if (!PixelBufferUtils::convertPixelBufferFormat(a1, data, 0, v8))
  {
    if (!data)
      return 0xFFFFFFFFLL;
    CVPixelBufferLockBaseAddress(a2, 0);
    memset(&pixelBufferOut, 0, sizeof(pixelBufferOut));
    v11 = (CGRect *)MEMORY[0x24BDBF090];
    PixelBufferUtils::asVImageBuffer(a2, 0, *MEMORY[0x24BDBF090], &pixelBufferOut);
    CVPixelBufferLockBaseAddress(data, 1uLL);
    memset(&src, 0, sizeof(src));
    PixelBufferUtils::asVImageBuffer(data, 0, *v11, &src);
    PixelFormatType = CVPixelBufferGetPixelFormatType(a2);
    v13 = PixelFormatType;
    if ((int)PixelFormatType > 1278226535)
    {
      if ((_DWORD)PixelFormatType != 1278226536 && (_DWORD)PixelFormatType != 1647392359)
      {
LABEL_20:
        PixelBufferUtils::pixelFormatAsString(PixelFormatType, (char *)__p);
        if (v18 >= 0)
          v16 = __p;
        else
          v16 = (void **)__p[0];
        NSLog(CFSTR("%s:%d - ERROR - pixel format %08x (\"%s\") not supported\n"), "convertColorToGrayscale", 2021, v13, v16);
        if (v18 < 0)
          operator delete(__p[0]);
        v10 = 1;
        goto LABEL_18;
      }
      v14 = vImageConvert_Planar8toPlanar16F(&src, &pixelBufferOut, 0);
    }
    else
    {
      if ((_DWORD)PixelFormatType == 1278226488)
      {
        vImageCopyBuffer(&src, &pixelBufferOut, 1uLL, 0);
      }
      else if ((_DWORD)PixelFormatType != 1278226534)
      {
        goto LABEL_20;
      }
      v14 = vImageConvert_Planar8toPlanarF(&src, &pixelBufferOut, 1.0, 0.0, 0);
    }
    v10 = v14 != 0;
LABEL_18:
    CVPixelBufferUnlockBaseAddress(data, 1uLL);
    CVPixelBufferUnlockBaseAddress(a2, 0);
    CVPixelBufferRelease(data);
    return v10;
  }
  CVPixelBufferRelease(data);
  return 0xFFFFFFFFLL;
}

void sub_20B6BB6D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t convertRGBPlanarFloat(__CVBuffer *a1, __CVBuffer *a2)
{
  CGRect *v4;
  unint64_t PixelFormatType;
  unint64_t v6;
  vImage_Error v7;
  uint64_t v9;
  void **v10;
  void *__p[2];
  char v12;
  vImage_Buffer red;
  vImage_Buffer green;
  vImage_Buffer blue;
  vImage_Buffer dest;
  __int128 maxFloat;
  _QWORD minFloat[3];

  minFloat[2] = *MEMORY[0x24BDAC8D0];
  if (CVPixelBufferGetPixelFormatType(a1) != 1919365990)
    return 0xFFFFFFFFLL;
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(a2, 0);
  memset(&dest, 0, sizeof(dest));
  v4 = (CGRect *)MEMORY[0x24BDBF090];
  PixelBufferUtils::asVImageBuffer(a2, *MEMORY[0x24BDBF090], &dest);
  memset(&blue, 0, sizeof(blue));
  PixelBufferUtils::asVImageBuffer(a1, 0, *v4, &blue);
  memset(&green, 0, sizeof(green));
  PixelBufferUtils::asVImageBuffer(a1, (__CVBuffer *)1, *v4, &green);
  memset(&red, 0, sizeof(red));
  PixelBufferUtils::asVImageBuffer(a1, (__CVBuffer *)2, *v4, &red);
  minFloat[0] = 0;
  minFloat[1] = 0;
  maxFloat = xmmword_20B6D2B10;
  PixelFormatType = CVPixelBufferGetPixelFormatType(a2);
  v6 = PixelFormatType;
  if ((int)PixelFormatType <= 1111970368)
  {
    if ((_DWORD)PixelFormatType == 32)
    {
      v7 = vImageConvert_PlanarFToXRGB8888(0xFFu, &blue, &green, &red, &dest, (const float *)&maxFloat, (const float *)minFloat, 0);
      goto LABEL_14;
    }
    if ((_DWORD)PixelFormatType == 1094862674)
    {
      v7 = vImageConvert_PlanarFToXRGB8888(0xFFu, &red, &green, &blue, &dest, (const float *)&maxFloat, (const float *)minFloat, 0);
      goto LABEL_14;
    }
LABEL_19:
    PixelBufferUtils::pixelFormatAsString(PixelFormatType, (char *)__p);
    if (v12 >= 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    NSLog(CFSTR("%s:%d - ERROR - pixel format %08x (\"%s\") not supported\n"), "convertRGBPlanarFloat", 1889, v6, v10);
    if (v12 < 0)
      operator delete(__p[0]);
    v9 = -21783;
    goto LABEL_15;
  }
  if ((_DWORD)PixelFormatType == 1111970369)
  {
    v7 = vImageConvert_PlanarFToBGRX8888(&red, &green, &blue, 0xFFu, &dest, (const float *)&maxFloat, (const float *)minFloat, 0);
    goto LABEL_14;
  }
  if ((_DWORD)PixelFormatType == 1380401729)
  {
    v7 = vImageConvert_PlanarFToBGRX8888(&blue, &green, &red, 0xFFu, &dest, (const float *)&maxFloat, (const float *)minFloat, 0);
    goto LABEL_14;
  }
  if ((_DWORD)PixelFormatType != 1380410945)
    goto LABEL_19;
  v7 = vImageConvert_PlanarFToBGRXFFFF(&blue, &green, &red, 1.0, &dest, 0);
LABEL_14:
  v9 = v7;
LABEL_15:
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(a2, 0);
  if (v9)
    return 0xFFFFFFFFLL;
  else
    return 0;
}

void sub_20B6BB9C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t convertRGBPlanarHalf(__CVBuffer *a1, __CVBuffer *a2)
{
  size_t Width;
  size_t Height;
  const __CFAllocator *v6;
  const __CFDictionary *BufferAttributes;
  __CVBuffer *v8;
  uint64_t v9;
  CVPixelBufferRef pixelBufferOut;

  if (CVPixelBufferGetPixelFormatType(a1) != 1919365992)
    return 0xFFFFFFFFLL;
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  pixelBufferOut = 0;
  v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  BufferAttributes = (const __CFDictionary *)getBufferAttributes();
  if (CVPixelBufferCreate(v6, Width, Height, 0x72673366u, BufferAttributes, &pixelBufferOut))
    v8 = 0;
  else
    v8 = pixelBufferOut;
  v9 = convertFloat16ToFloat32(a1, v8);
  if (!(_DWORD)v9)
    v9 = convertRGBPlanarFloat(v8, a2);
  CVPixelBufferRelease(v8);
  return v9;
}

uint64_t createBGRAPermutesFromYUV(CVPixelBufferRef pixelBuffer, int a2, CVPixelBufferRef a3)
{
  BOOL v6;
  __CVBuffer *data;
  unsigned int v8;
  size_t Width;
  size_t Height;
  const __CFAllocator *v11;
  const __CFDictionary *BufferAttributes;
  CGRect *v13;
  uint64_t v14;
  const uint8_t *v15;
  vImage_Error v16;
  vImage_YpCbCrPixelRange v18;
  vImage_Buffer dest;
  vImage_Buffer srcCbCr;
  vImage_Buffer pixelBufferOut;

  v6 = a2 == 1380411457 || a2 == 1380410945;
  data = a3;
  v8 = a2;
  if (v6)
  {
    v8 = 1111970369;
    Width = CVPixelBufferGetWidth(a3);
    Height = CVPixelBufferGetHeight(a3);
    pixelBufferOut.data = 0;
    v11 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    BufferAttributes = (const __CFDictionary *)getBufferAttributes();
    if (CVPixelBufferCreate(v11, Width, Height, 0x42475241u, BufferAttributes, (CVPixelBufferRef *)&pixelBufferOut))
      data = 0;
    else
      data = (__CVBuffer *)pixelBufferOut.data;
  }
  CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
  CVPixelBufferLockBaseAddress(data, 0);
  memset(&pixelBufferOut, 0, sizeof(pixelBufferOut));
  v13 = (CGRect *)MEMORY[0x24BDBF090];
  PixelBufferUtils::asVImageBuffer(pixelBuffer, 0, *MEMORY[0x24BDBF090], &pixelBufferOut);
  memset(&srcCbCr, 0, sizeof(srcCbCr));
  PixelBufferUtils::asVImageBuffer(pixelBuffer, (__CVBuffer *)1, *v13, &srcCbCr);
  memset(&dest, 0, sizeof(dest));
  PixelBufferUtils::asVImageBuffer(data, *v13, &dest);
  v14 = RGBA_FORMAT_MAP();
  *(_QWORD *)&v18.Yp_bias = v8 | 0x2000000000;
  v15 = (const uint8_t *)std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v14, *(unint64_t *)&v18.Yp_bias, &v18)[3];
  if ((createBGRAPermutesFromYUV(__CVBuffer *,unsigned int,__CVBuffer *)::isConvesionInfoDefined & 1) != 0
    || (v18 = *(vImage_YpCbCrPixelRange *)ymmword_20B6D38BC,
        v16 = vImageConvert_YpCbCrToARGB_GenerateConversion((const vImage_YpCbCrToARGBMatrix *)*MEMORY[0x24BDB2ED0], &v18, &createBGRAPermutesFromYUV(__CVBuffer *,unsigned int,__CVBuffer *)::conversionInfo, kvImage420Yp8_CbCr8, kvImageARGB8888, 0), createBGRAPermutesFromYUV(__CVBuffer *,unsigned int,__CVBuffer *)::isConvesionInfoDefined = 1, !v16))
  {
    v16 = vImageConvert_420Yp8_CbCr8ToARGB8888(&pixelBufferOut, &srcCbCr, &dest, &createBGRAPermutesFromYUV(__CVBuffer *,unsigned int,__CVBuffer *)::conversionInfo, v15, 0xFFu, 0);
  }
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
  CVPixelBufferUnlockBaseAddress(data, 0);
  if (a2 == 1380411457 || a2 == 1380410945)
  {
    v16 = (int)convert4ChannelFormats(data, a2, a3);
    CVPixelBufferRelease(data);
  }
  if (v16)
    return 0xFFFFFFFFLL;
  else
    return 0;
}

uint64_t createRGBPlanarFloatFromBuffer(__CVBuffer *a1, __CVBuffer *a2)
{
  size_t Width;
  size_t Height;
  const __CFAllocator *v6;
  const __CFDictionary *BufferAttributes;
  BOOL v8;
  __CVBuffer *data;
  CGRect *v11;
  vImage_Error v12;
  vImage_Buffer v13;
  vImage_Buffer destG;
  vImage_Buffer destR;
  vImage_Buffer destA;
  vImage_Buffer pixelBufferOut;

  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  pixelBufferOut.data = 0;
  v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  BufferAttributes = (const __CFDictionary *)getBufferAttributes();
  if (CVPixelBufferCreate(v6, Width, Height, 0x52476641u, BufferAttributes, (CVPixelBufferRef *)&pixelBufferOut))
    data = 0;
  else
    data = (__CVBuffer *)pixelBufferOut.data;
  if (PixelBufferUtils::convertPixelBufferFormat(a1, data, 0, v8))
  {
    CVPixelBufferRelease(data);
    return 0xFFFFFFFFLL;
  }
  if (!data)
    return 0xFFFFFFFFLL;
  CVPixelBufferLockBaseAddress(data, 1uLL);
  CVPixelBufferLockBaseAddress(a2, 0);
  memset(&pixelBufferOut, 0, sizeof(pixelBufferOut));
  v11 = (CGRect *)MEMORY[0x24BDBF090];
  PixelBufferUtils::asVImageBuffer(data, *MEMORY[0x24BDBF090], &pixelBufferOut);
  memset(&destA, 0, sizeof(destA));
  PixelBufferUtils::asVImageBuffer(a2, 0, *v11, &destA);
  memset(&destR, 0, sizeof(destR));
  PixelBufferUtils::asVImageBuffer(a2, (__CVBuffer *)1, *v11, &destR);
  memset(&destG, 0, sizeof(destG));
  PixelBufferUtils::asVImageBuffer(a2, (__CVBuffer *)2, *v11, &destG);
  v12 = vImageBuffer_Init(&v13, pixelBufferOut.height, pixelBufferOut.width, 0x20u, 0);
  if (!v12)
  {
    v12 = vImageConvert_ARGBFFFFtoPlanarF(&pixelBufferOut, &destA, &destR, &destG, &v13, 0);
    free(v13.data);
  }
  CVPixelBufferUnlockBaseAddress(data, 1uLL);
  CVPixelBufferUnlockBaseAddress(a2, 0);
  CVPixelBufferRelease(data);
  if (v12)
    return 0xFFFFFFFFLL;
  else
    return 0;
}

uint64_t createRGBPlanarHalfFromBuffer(__CVBuffer *a1, CVPixelBufferRef pixelBuffer)
{
  size_t Width;
  size_t Height;
  const __CFAllocator *v6;
  const __CFDictionary *BufferAttributes;
  __CVBuffer *v8;
  uint64_t v9;
  CVPixelBufferRef pixelBufferOut;

  Width = CVPixelBufferGetWidth(pixelBuffer);
  Height = CVPixelBufferGetHeight(pixelBuffer);
  pixelBufferOut = 0;
  v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  BufferAttributes = (const __CFDictionary *)getBufferAttributes();
  if (CVPixelBufferCreate(v6, Width, Height, 0x72673366u, BufferAttributes, &pixelBufferOut))
    v8 = 0;
  else
    v8 = pixelBufferOut;
  if (createRGBPlanarFloatFromBuffer(a1, v8))
    v9 = 0xFFFFFFFFLL;
  else
    v9 = convertFloat32ToFloat16(v8, pixelBuffer);
  CVPixelBufferRelease(v8);
  return v9;
}

uint64_t copyPixelBufferMultiPlane(__CVBuffer *a1, CGPoint a2, __CVBuffer *a3, CGRect a4)
{
  double height;
  double width;
  double y;
  double x;
  double v9;
  double v10;
  size_t PlaneCount;
  PixelBufferUtils *PixelFormatType;
  __CVBuffer *v14;
  CGRect *v15;
  size_t v16;
  _BOOL4 IsEmpty;
  vImagePixelCount v18;
  vImagePixelCount v19;
  BOOL v20;
  double v22;
  double v23;
  BOOL v24;
  vImage_Buffer dest;
  vImage_Buffer src;
  CGRect v29;
  CGRect v30;

  height = a4.size.height;
  width = a4.size.width;
  y = a4.origin.y;
  x = a4.origin.x;
  v9 = a2.y;
  v10 = a2.x;
  PlaneCount = CVPixelBufferGetPlaneCount(a3);
  PixelFormatType = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(a3);
  CVPixelBufferLockBaseAddress(a1, 0);
  CVPixelBufferLockBaseAddress(a3, 1uLL);
  if (!PlaneCount)
  {
LABEL_27:
    CVPixelBufferUnlockBaseAddress(a1, 0);
    CVPixelBufferUnlockBaseAddress(a3, 1uLL);
    return 0;
  }
  v14 = 0;
  v15 = (CGRect *)MEMORY[0x24BDBF090];
  while (1)
  {
    v16 = PixelBufferUtils::pixelSizeForPixelFormat(PixelFormatType, (uint64_t)v14);
    memset(&src, 0, sizeof(src));
    PixelBufferUtils::asVImageBuffer(a3, v14, *v15, &src);
    memset(&dest, 0, sizeof(dest));
    PixelBufferUtils::asVImageBuffer(a1, v14, *v15, &dest);
    v29.origin.x = x;
    v29.origin.y = y;
    v29.size.width = width;
    v29.size.height = height;
    IsEmpty = CGRectIsEmpty(v29);
    v18 = src.width;
    if (IsEmpty)
    {
      v19 = src.height;
      goto LABEL_16;
    }
    if (x >= (double)src.width)
      break;
    v20 = y < (double)src.height && width <= (double)src.width;
    if (!v20 || height > (double)src.height)
      break;
    src.height = (unint64_t)height;
    src.width = (unint64_t)width;
    src.data = (char *)src.data + src.rowBytes * (unint64_t)y + v16 * (unint64_t)x;
    v19 = (unint64_t)height;
    v18 = (unint64_t)width;
LABEL_16:
    v22 = (double)v18;
    v23 = (double)v19;
    v30.origin.x = v10;
    v30.origin.y = v9;
    v30.size.width = (double)v18;
    v30.size.height = (double)v19;
    if (!CGRectIsEmpty(v30))
    {
      if (v10 >= (double)dest.width)
        break;
      v24 = v9 < (double)dest.height && v22 <= (double)dest.width;
      if (!v24 || v23 > (double)dest.height)
        break;
      dest.data = (char *)dest.data + dest.rowBytes * (unint64_t)v9 + v16 * (unint64_t)v10;
      dest.height = (unint64_t)v23;
      dest.width = (unint64_t)v22;
    }
    vImageCopyBuffer(&src, &dest, v16, 0);
    v14 = (__CVBuffer *)((char *)v14 + 1);
    if ((__CVBuffer *)PlaneCount == v14)
      goto LABEL_27;
  }
  NSLog(CFSTR("%s:%d - ERROR - Region is outside dimensions"), "updateVImageBufferToRegion", 1923);
  return 0xFFFFFFFFLL;
}

uint64_t convertFloat32ToFloat16(__CVBuffer *a1, __CVBuffer *a2)
{
  PixelBufferUtils *PixelFormatType;
  unint64_t v5;
  PixelBufferUtils *v6;
  unint64_t v7;
  CGRect *v8;
  vImage_Error v9;
  vImage_Error v10;
  CGRect *v12;
  vImage_Buffer dest;
  vImage_Buffer src;

  PixelFormatType = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(a1);
  v5 = PixelBufferUtils::planeCountForPixelFormat(PixelFormatType);
  v6 = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(a2);
  if (v5 == PixelBufferUtils::planeCountForPixelFormat(v6))
  {
    CVPixelBufferLockBaseAddress(a1, 1uLL);
    CVPixelBufferLockBaseAddress(a2, 0);
    if (v5)
    {
      v7 = 1;
      v8 = (CGRect *)MEMORY[0x24BDBF090];
      do
      {
        memset(&src, 0, sizeof(src));
        PixelBufferUtils::asVImageBuffer(a1, (__CVBuffer *)(v7 - 1), *v8, &src);
        memset(&dest, 0, sizeof(dest));
        PixelBufferUtils::asVImageBuffer(a2, (__CVBuffer *)(v7 - 1), *v8, &dest);
        v9 = vImageConvert_PlanarFtoPlanar16F(&src, &dest, 0);
        v10 = v9;
        if (v7 >= v5)
          break;
        ++v7;
      }
      while (!v9);
    }
    else
    {
      memset(&src, 0, sizeof(src));
      v12 = (CGRect *)MEMORY[0x24BDBF090];
      PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x24BDBF090], &src);
      memset(&dest, 0, sizeof(dest));
      PixelBufferUtils::asVImageBuffer(a2, *v12, &dest);
      v10 = vImageConvert_PlanarFtoPlanar16F(&src, &dest, 0);
    }
    CVPixelBufferUnlockBaseAddress(a1, 1uLL);
    CVPixelBufferUnlockBaseAddress(a2, 0);
    return v10 != 0;
  }
  else
  {
    NSLog(CFSTR("%s:%d - ERROR - Input and output buffers do not have the same number of planes"), "convertFloat32ToFloat16", 1592);
    return 0xFFFFFFFFLL;
  }
}

void PixelBufferUtils::forEveryPixel(__CVBuffer *a1, void *a2, int a3)
{
  PixelBufferUtils *PixelFormatType;
  unint64_t v6;
  size_t PlaneCount;
  uint64_t v8;
  __CFString *v9;
  char *data;
  vImagePixelCount height;
  vImagePixelCount width;
  size_t rowBytes;
  uint64_t v14;
  char *v15;
  vImagePixelCount v16;
  void (**v17)(id, _QWORD, PixelBufferUtils *);
  vImage_Buffer v18;

  v17 = a2;
  PixelFormatType = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(a1);
  v6 = PixelBufferUtils::pixelSizeForPixelFormat(PixelFormatType, a3);
  PlaneCount = CVPixelBufferGetPlaneCount(a1);
  if (PlaneCount)
  {
    v8 = 3516;
    v9 = CFSTR("%s:%d - ERROR - multiplane pixel buffer with nonmatching plane index");
    if (a3 < 0 || PlaneCount <= a3)
      goto LABEL_7;
  }
  else if (a3 != -1)
  {
    v8 = 3521;
    v9 = CFSTR("%s:%d - ERROR - cannot request plane for single-plane image");
LABEL_7:
    NSLog(&v9->isa, "forEveryPixel", v8);
    goto LABEL_18;
  }
  CVPixelBufferLockBaseAddress(a1, 0);
  if (PlaneCount)
    PixelBufferUtils::asVImageBuffer(a1, (__CVBuffer *)a3, *MEMORY[0x24BDBF090], &v18);
  else
    PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x24BDBF090], &v18);
  data = (char *)v18.data;
  height = v18.height;
  width = v18.width;
  rowBytes = v18.rowBytes;
  if (v18.height && v18.width)
  {
    v14 = 0;
    do
    {
      v15 = data;
      v16 = width;
      do
      {
        ((void (**)(id, char *, PixelBufferUtils *))v17)[2](v17, v15, PixelFormatType);
        v15 += v6;
        --v16;
      }
      while (v16);
      ++v14;
      data += rowBytes;
    }
    while (v14 != height);
  }
  CVPixelBufferUnlockBaseAddress(a1, 0);
LABEL_18:

}

void sub_20B6BC4E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void PixelBufferUtils::forEveryPixel(__CVBuffer *a1, __CVBuffer *a2, void *a3, vImagePixelCount a4)
{
  char *v4;
  char *data;
  PixelBufferUtils *PixelFormatType;
  PixelBufferUtils *v10;
  unint64_t v11;
  unint64_t v12;
  size_t PlaneCount;
  uint64_t v14;
  __CFString *v15;
  CGRect *v16;
  CGRect *v17;
  vImagePixelCount v18;
  vImagePixelCount v19;
  uint64_t i;
  char *v21;
  char *v22;
  vImagePixelCount v23;
  __CVBuffer *v24;
  PixelBufferUtils *pixelBuffer;
  size_t v26;
  size_t rowBytes;
  vImagePixelCount width;
  vImagePixelCount height;
  void (**v30)(id, char *, PixelBufferUtils *, char *, PixelBufferUtils *);
  vImage_Buffer v31;

  v30 = a3;
  PixelFormatType = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(a1);
  v10 = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(a2);
  v11 = PixelBufferUtils::pixelSizeForPixelFormat(PixelFormatType, 0);
  v12 = PixelBufferUtils::pixelSizeForPixelFormat(v10, 0);
  PlaneCount = CVPixelBufferGetPlaneCount(a1);
  if (PlaneCount != CVPixelBufferGetPlaneCount(a2))
  {
    v14 = 3556;
    v15 = CFSTR("%s:%d - ERROR - mismatching planes number in input buffers");
LABEL_7:
    NSLog(&v15->isa, "forEveryPixel", v14);
    goto LABEL_30;
  }
  if (PlaneCount)
  {
    v14 = 3561;
    v15 = CFSTR("%s:%d - ERROR - multiplane pixel buffers with nonmatching plane index");
    if ((a4 & 0x80000000) != 0 || PlaneCount <= a4)
      goto LABEL_7;
  }
  else if ((_DWORD)a4 != -1)
  {
    NSLog(CFSTR("%s:%d - ERROR - cannot request plane for single-plane image"), "forEveryPixel", 3566);
    goto LABEL_30;
  }
  CVPixelBufferLockBaseAddress(a1, 0);
  CVPixelBufferLockBaseAddress(a2, 0);
  pixelBuffer = a1;
  if (PlaneCount)
  {
    if ((a4 & 0x80000000) != 0)
      goto LABEL_17;
    v16 = (CGRect *)MEMORY[0x24BDBF090];
    PixelBufferUtils::asVImageBuffer(pixelBuffer, (__CVBuffer *)a4, *MEMORY[0x24BDBF090], &v31);
    data = (char *)v31.data;
    width = v31.width;
    height = v31.height;
    rowBytes = v31.rowBytes;
    PixelBufferUtils::asVImageBuffer(a2, (__CVBuffer *)a4, *v16, &v31);
  }
  else
  {
    v17 = (CGRect *)MEMORY[0x24BDBF090];
    PixelBufferUtils::asVImageBuffer(pixelBuffer, *MEMORY[0x24BDBF090], &v31);
    data = (char *)v31.data;
    width = v31.width;
    height = v31.height;
    rowBytes = v31.rowBytes;
    PixelBufferUtils::asVImageBuffer(a2, *v17, &v31);
  }
  v4 = (char *)v31.data;
  a4 = v31.height;
  PlaneCount = v31.width;
  v26 = v31.rowBytes;
  if (height != v31.height || width != v31.width)
  {
LABEL_17:
    NSLog(CFSTR("warning: sizes in forEveryPixel do not match. running for the common area (min width/height)"));
    if (height >= a4)
      v18 = a4;
    else
      v18 = height;
    v19 = width;
    if (width >= PlaneCount)
      v19 = PlaneCount;
    width = v19;
    height = v18;
  }
  v24 = a2;
  if (height && width)
  {
    for (i = 0; i != height; ++i)
    {
      v21 = data;
      v22 = v4;
      v23 = width;
      do
      {
        v30[2](v30, v21, PixelFormatType, v22, v10);
        v22 += v12;
        v21 += v11;
        --v23;
      }
      while (v23);
      v4 += v26;
      data += rowBytes;
    }
  }
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
  CVPixelBufferUnlockBaseAddress(v24, 0);
LABEL_30:

}

void sub_20B6BC7A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id a18)
{

  _Unwind_Resume(a1);
}

uint64_t convertGrayscaleAsColor(__CVBuffer *a1, unint64_t a2, __CVBuffer *a3)
{
  unint64_t PixelFormatType;
  CGRect *v7;
  uint64_t v8;
  __CVBuffer *v9;
  char v10;
  _BYTE *v11;
  __CVBuffer *v12;
  vImage_Error v13;
  int v14;
  size_t v15;
  size_t v16;
  const __CFDictionary *v17;
  BOOL v18;
  vImage_Error v19;
  size_t v20;
  size_t v21;
  const __CFDictionary *v22;
  void *p_red;
  void *data;
  vImage_Error v25;
  vImage_Buffer *p_pixelBufferOut;
  size_t Width;
  size_t Height;
  const __CFDictionary *BufferAttributes;
  vImage_Buffer pixelBufferOut;
  vImage_Buffer dest;
  vImage_Buffer red;
  _QWORD minFloat[2];
  __int128 maxFloat;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  if ((int)a2 > 1380401728)
  {
    if ((_DWORD)a2 != 1380401729 && (_DWORD)a2 != 1380410945 && (_DWORD)a2 != 1380411457)
    {
LABEL_37:
      PixelBufferUtils::pixelFormatAsString(a2, (char *)&red);
      if ((red.width & 0x8000000000000000) == 0)
        p_red = &red;
      else
        p_red = red.data;
      NSLog(CFSTR("%s:%d - ERROR - pixel format %08x (\"%s\") not supported\n"), "convertGrayscaleAsColor", 1468, a2, p_red);
      if ((SHIBYTE(red.width) & 0x80000000) == 0)
        return 0xFFFFFFFFLL;
      data = red.data;
LABEL_62:
      operator delete(data);
      return 0xFFFFFFFFLL;
    }
  }
  else if ((_DWORD)a2 != 32 && (_DWORD)a2 != 1094862674 && (_DWORD)a2 != 1111970369)
  {
    goto LABEL_37;
  }
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(a3, 0);
  memset(&red, 0, sizeof(red));
  v7 = (CGRect *)MEMORY[0x24BDBF090];
  PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x24BDBF090], &red);
  memset(&dest, 0, sizeof(dest));
  PixelBufferUtils::asVImageBuffer(a3, *v7, &dest);
  v8 = RGBA_FORMAT_MAP();
  pixelBufferOut.data = (void *)(a2 | 0x2000000000);
  v9 = 0;
  v10 = 0;
  v11 = (_BYTE *)std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v8, (unint64_t)pixelBufferOut.data, &pixelBufferOut)[3];
  maxFloat = xmmword_20B6D2B10;
  minFloat[0] = 0;
  minFloat[1] = 0;
  if ((int)PixelFormatType <= 1717855599)
  {
    if ((_DWORD)PixelFormatType == 1278226488)
    {
      if ((_DWORD)a2 == 1380411457)
      {
        Width = CVPixelBufferGetWidth(a3);
        Height = CVPixelBufferGetHeight(a3);
        pixelBufferOut.data = 0;
        BufferAttributes = (const __CFDictionary *)getBufferAttributes();
        if (CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], Width, Height, 0x52476641u, BufferAttributes, (CVPixelBufferRef *)&pixelBufferOut))
        {
          v12 = 0;
        }
        else
        {
          v12 = (__CVBuffer *)pixelBufferOut.data;
        }
        CVPixelBufferLockBaseAddress(v12, 0);
        memset(&pixelBufferOut, 0, sizeof(pixelBufferOut));
        PixelBufferUtils::asVImageBuffer(v12, *v7, &pixelBufferOut);
        v13 = vImageConvert_Planar8ToBGRXFFFF(&red, &red, &red, 1.0, &pixelBufferOut, (const float *)&maxFloat, (const float *)minFloat, 0);
        if (!v13)
        {
          pixelBufferOut.width *= 4;
          v13 = vImageConvert_PlanarFtoPlanar16F(&pixelBufferOut, &dest, 0);
        }
        v9 = 0;
        goto LABEL_48;
      }
      if ((_DWORD)a2 == 1380410945)
      {
        v25 = vImageConvert_Planar8ToXRGBFFFF(1.0, &red, &red, &red, &dest, (const float *)&maxFloat, (const float *)minFloat, 0);
      }
      else if (*v11 == 3)
      {
        v25 = vImageConvert_Planar8ToBGRX8888(&red, &red, &red, 0xFFu, &dest, 0);
      }
      else
      {
        if (*v11)
        {
          v9 = 0;
          goto LABEL_76;
        }
        v25 = vImageConvert_Planar8ToXRGB8888(0xFFu, &red, &red, &red, &dest, 0);
      }
      v13 = v25;
      v9 = 0;
      goto LABEL_47;
    }
    if ((_DWORD)PixelFormatType == 1278226534)
    {
LABEL_26:
      if ((_DWORD)a2 == 1380411457)
      {
        v20 = CVPixelBufferGetWidth(a3);
        v21 = CVPixelBufferGetHeight(a3);
        pixelBufferOut.data = 0;
        v22 = (const __CFDictionary *)getBufferAttributes();
        if (CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v20, v21, 0x52476641u, v22, (CVPixelBufferRef *)&pixelBufferOut))
        {
          v12 = 0;
        }
        else
        {
          v12 = (__CVBuffer *)pixelBufferOut.data;
        }
        CVPixelBufferLockBaseAddress(v12, 0);
        memset(&pixelBufferOut, 0, sizeof(pixelBufferOut));
        PixelBufferUtils::asVImageBuffer(v12, *v7, &pixelBufferOut);
        v13 = vImageConvert_PlanarFToBGRXFFFF(&red, &red, &red, 1.0, &pixelBufferOut, 0);
        if (!v13)
        {
          pixelBufferOut.width *= 4;
          v13 = vImageConvert_PlanarFtoPlanar16F(&pixelBufferOut, &dest, 0);
        }
        goto LABEL_48;
      }
      if ((_DWORD)a2 == 1380410945)
      {
        v19 = vImageConvert_PlanarFToBGRXFFFF(&red, &red, &red, 1.0, &dest, 0);
LABEL_46:
        v13 = v19;
LABEL_47:
        v12 = 0;
LABEL_48:
        v10 = 1;
        goto LABEL_49;
      }
      if (*v11 == 3)
      {
        v19 = vImageConvert_PlanarFToBGRX8888(&red, &red, &red, 0xFFu, &dest, (const float *)&maxFloat, (const float *)minFloat, 0);
        goto LABEL_46;
      }
      if (!*v11)
      {
        v19 = vImageConvert_PlanarFToXRGB8888(0xFFu, &red, &red, &red, &dest, (const float *)&maxFloat, (const float *)minFloat, 0);
        goto LABEL_46;
      }
LABEL_76:
      v12 = 0;
      v10 = 0;
      v13 = 0;
      goto LABEL_49;
    }
    v14 = 1278226536;
    goto LABEL_19;
  }
  if ((int)PixelFormatType > 1751410031)
  {
    if ((_DWORD)PixelFormatType == 1751411059)
    {
LABEL_20:
      v15 = CVPixelBufferGetWidth(a1);
      v16 = CVPixelBufferGetHeight(a1);
      pixelBufferOut.data = 0;
      v17 = (const __CFDictionary *)getBufferAttributes();
      if (CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v15, v16, 0x4C303066u, v17, (CVPixelBufferRef *)&pixelBufferOut))
      {
        v9 = 0;
      }
      else
      {
        v9 = (__CVBuffer *)pixelBufferOut.data;
      }
      if (PixelBufferUtils::convertPixelBufferFormat(a1, v9, 0, v18))
      {
        CVPixelBufferRelease(v9);
        v9 = 0;
      }
      CVPixelBufferLockBaseAddress(v9, 1uLL);
      PixelBufferUtils::asVImageBuffer(v9, *v7, &red);
      goto LABEL_26;
    }
    v14 = 1751410032;
LABEL_19:
    v12 = 0;
    v13 = 0;
    if ((_DWORD)PixelFormatType != v14)
      goto LABEL_49;
    goto LABEL_20;
  }
  if ((_DWORD)PixelFormatType == 1717855600)
    goto LABEL_26;
  v12 = 0;
  v13 = 0;
  if ((_DWORD)PixelFormatType == 1717856627)
    goto LABEL_26;
LABEL_49:
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(a3, 0);
  if (v9)
  {
    CVPixelBufferUnlockBaseAddress(v9, 1uLL);
    CVPixelBufferRelease(v9);
  }
  if (v12)
  {
    CVPixelBufferUnlockBaseAddress(v12, 0);
    CVPixelBufferRelease(v12);
  }
  if ((v10 & 1) == 0)
  {
    PixelBufferUtils::pixelFormatAsString(PixelFormatType, (char *)&pixelBufferOut);
    if ((pixelBufferOut.width & 0x8000000000000000) == 0)
      p_pixelBufferOut = &pixelBufferOut;
    else
      p_pixelBufferOut = (vImage_Buffer *)pixelBufferOut.data;
    NSLog(CFSTR("%s:%d - ERROR - pixel format %08x (\"%s\") not supported\n"), "convertGrayscaleAsColor", 1580, PixelFormatType, p_pixelBufferOut);
    if ((SHIBYTE(pixelBufferOut.width) & 0x80000000) == 0)
      return 0xFFFFFFFFLL;
    data = pixelBufferOut.data;
    goto LABEL_62;
  }
  if (v13)
    return 0xFFFFFFFFLL;
  else
    return 0;
}

void sub_20B6BCE84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t convertFloat16ToFloat32(__CVBuffer *a1, __CVBuffer *a2)
{
  PixelBufferUtils *PixelFormatType;
  unint64_t v5;
  PixelBufferUtils *v6;
  unint64_t v7;
  CGRect *v8;
  vImage_Error v9;
  vImage_Error v10;
  CGRect *v12;
  vImage_Buffer dest;
  vImage_Buffer src;

  PixelFormatType = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(a1);
  v5 = PixelBufferUtils::planeCountForPixelFormat(PixelFormatType);
  v6 = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(a2);
  if (v5 == PixelBufferUtils::planeCountForPixelFormat(v6))
  {
    CVPixelBufferLockBaseAddress(a1, 1uLL);
    CVPixelBufferLockBaseAddress(a2, 0);
    if (v5)
    {
      v7 = 1;
      v8 = (CGRect *)MEMORY[0x24BDBF090];
      do
      {
        memset(&src, 0, sizeof(src));
        PixelBufferUtils::asVImageBuffer(a1, (__CVBuffer *)(v7 - 1), *v8, &src);
        memset(&dest, 0, sizeof(dest));
        PixelBufferUtils::asVImageBuffer(a2, (__CVBuffer *)(v7 - 1), *v8, &dest);
        v9 = vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
        v10 = v9;
        if (v7 >= v5)
          break;
        ++v7;
      }
      while (!v9);
    }
    else
    {
      memset(&src, 0, sizeof(src));
      v12 = (CGRect *)MEMORY[0x24BDBF090];
      PixelBufferUtils::asVImageBuffer(a1, *MEMORY[0x24BDBF090], &src);
      memset(&dest, 0, sizeof(dest));
      PixelBufferUtils::asVImageBuffer(a2, *v12, &dest);
      v10 = vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
    }
    CVPixelBufferUnlockBaseAddress(a1, 1uLL);
    CVPixelBufferUnlockBaseAddress(a2, 0);
    return v10 != 0;
  }
  else
  {
    NSLog(CFSTR("%s:%d - ERROR - Input and output buffers do not have the same number of planes"), "convertFloat16ToFloat32", 1626);
    return 0xFFFFFFFFLL;
  }
}

__int16 ___ZL23invertPixelBufferValuesIDhEiP10__CVBufferS1__block_invoke@<H0>(uint64_t a1@<X0>, __int16 *a2@<X1>, uint64_t a3@<X2>, _WORD *a4@<X3>)
{
  __int16 result;

  _H0 = *a2;
  __asm { FCVT            S0, H0 }
  _S0 = 1.0 / _S0;
  __asm { FCVT            H0, S0 }
  *a4 = result;
  return result;
}

float ___ZL23invertPixelBufferValuesIfEiP10__CVBuffer_block_invoke(uint64_t a1, float *a2)
{
  float result;

  result = 1.0 / *a2;
  *a2 = result;
  return result;
}

uint64_t RGBA_FORMAT_MAP(void)
{
  unsigned __int8 v0;
  uint64_t v2;
  unint64_t v3[2];
  int v4;
  uint64_t v5;
  void *v6;
  int v7;
  uint64_t v8;
  void *v9;
  int v10;
  uint64_t v11;
  void *v12;
  int v13;
  uint64_t v14;
  void *v15;
  int v16;
  uint64_t v17;
  void *v18;
  int v19;
  uint64_t v20;
  void *v21;
  int v22;
  uint64_t v23;
  void *v24;
  int v25;
  uint64_t v26;
  void *v27;
  int v28;
  uint64_t v29;
  void *v30;
  int v31;
  uint64_t v32;
  void *v33;
  int v34;
  uint64_t v35;
  void *v36;
  int v37;
  uint64_t v38;
  void *v39;
  int v40;
  uint64_t v41;
  void *v42;
  int v43;
  uint64_t v44;
  void *v45;
  int v46;
  uint64_t v47;
  void *v48;
  int v49;
  uint64_t v50;
  void *v51;
  int v52;
  uint64_t v53;
  void *v54;
  int v55;
  uint64_t v56;
  void *v57;
  int v58;
  uint64_t v59;
  void *v60;
  int v61;
  uint64_t v62;
  void *v63;
  int v64;
  uint64_t v65;
  void *v66;
  int v67;
  uint64_t v68;
  void *v69;
  int v70;
  uint64_t v71;
  void *v72;
  int v73;
  uint64_t v74;
  void *v75;
  int v76;
  uint64_t v77;
  void *v78;
  int v79;
  uint64_t v80;
  void *v81;
  int v82;
  uint64_t v83;
  void *v84;
  int v85;
  uint64_t v86;
  void *v87;
  int v88;
  uint64_t v89;
  void *v90;
  int v91;
  uint64_t v92;
  void *v93;
  int v94;
  uint64_t v95;
  void *v96;
  int v97;
  uint64_t v98;
  void *v99;
  int v100;
  uint64_t v101;
  void *v102;
  int v103;
  uint64_t v104;
  void *v105;
  int v106;
  uint64_t v107;
  void *v108;
  int v109;
  uint64_t v110;
  void *v111;
  int v112;
  uint64_t v113;
  void *v114;
  int v115;
  uint64_t v116;
  void *v117;
  int v118;
  uint64_t v119;
  void *v120;
  int v121;
  uint64_t v122;
  void *v123;
  int v124;
  uint64_t v125;
  void *v126;
  int v127;
  uint64_t v128;
  void *v129;
  int v130;
  uint64_t v131;
  void *v132;
  int v133;
  uint64_t v134;
  void *v135;
  int v136;
  uint64_t v137;
  void *v138;
  int v139;
  uint64_t v140;
  void *v141;
  int v142;
  uint64_t v143;
  void *v144;
  int v145;
  uint64_t v146;

  v146 = *MEMORY[0x24BDAC8D0];
  {
    v2 = operator new();
    v3[0] = 0x2000000020;
    v3[1] = (unint64_t)&NOPermuteMap;
    v4 = 0;
    v5 = 0x2042475241;
    v6 = &ReversePermuteMap;
    v7 = 0;
    v8 = 0x2041424752;
    v9 = &ReverseL3PermuteMap;
    v10 = 0;
    v11 = 0x2052474241;
    v12 = &A2LastPermuteMap;
    v13 = 0;
    v14 = 0x2052476641;
    v15 = &A2LastPermuteMap;
    v16 = 1;
    v17 = 0x2052476841;
    v18 = &A2LastPermuteMap;
    v19 = 2;
    v20 = 0x2072673366;
    v21 = &A2LastPermuteMap;
    v22 = 2;
    v23 = 0x2072673368;
    v24 = &A2LastPermuteMap;
    v25 = 2;
    v26 = 0x4247524100000020;
    v27 = &ReversePermuteMap;
    v28 = 0;
    v29 = 0x4247524142475241;
    v30 = &NOPermuteMap;
    v31 = 0;
    v32 = 0x4247524141424752;
    v33 = &A2FirstPermuteMap;
    v34 = 0;
    v35 = 0x4247524152474241;
    v36 = &ReverseF3PermuteMap;
    v37 = 0;
    v38 = 0x4247524152476641;
    v39 = &ReverseF3PermuteMap;
    v40 = 1;
    v41 = 0x4247524152476841;
    v42 = &ReverseF3PermuteMap;
    v43 = 2;
    v44 = 0x4247524172673366;
    v45 = &ReverseF3PermuteMap;
    v46 = 1;
    v47 = 0x4247524172673368;
    v48 = &ReverseF3PermuteMap;
    v49 = 2;
    v50 = 0x4142475200000020;
    v51 = &ReverseL3PermuteMap;
    v52 = 0;
    v53 = 0x4142475242475241;
    v54 = &A2LastPermuteMap;
    v55 = 0;
    v56 = 0x4142475241424752;
    v57 = &NOPermuteMap;
    v58 = 0;
    v59 = 0x4142475252474241;
    v60 = &ReversePermuteMap;
    v61 = 0;
    v62 = 0x4142475252476641;
    v63 = &ReversePermuteMap;
    v64 = 1;
    v65 = 0x4142475252476841;
    v66 = &ReversePermuteMap;
    v67 = 2;
    v68 = 0x4142475272673366;
    v69 = &ReversePermuteMap;
    v70 = 1;
    v71 = 0x4142475272673368;
    v72 = &ReversePermuteMap;
    v73 = 2;
    v74 = 0x5247424100000020;
    v75 = &A2FirstPermuteMap;
    v76 = 0;
    v77 = 0x5247424142475241;
    v78 = &ReverseF3PermuteMap;
    v79 = 0;
    v80 = 0x5247424141424752;
    v81 = &ReversePermuteMap;
    v82 = 0;
    v83 = 0x5247424152474241;
    v84 = &NOPermuteMap;
    v85 = 0;
    v86 = 0x5247424152476641;
    v87 = &NOPermuteMap;
    v88 = 1;
    v89 = 0x5247424152476841;
    v90 = &NOPermuteMap;
    v91 = 2;
    v92 = 0x5247424172673366;
    v93 = &NOPermuteMap;
    v94 = 1;
    v95 = 0x5247424172673368;
    v96 = &NOPermuteMap;
    v97 = 2;
    v98 = 0x5247664100000020;
    v99 = &A2LastPermuteMap;
    v100 = 3;
    v101 = 0x5247664142475241;
    v102 = &ReverseF3PermuteMap;
    v103 = 3;
    v104 = 0x5247664141424752;
    v105 = &ReversePermuteMap;
    v106 = 3;
    v107 = 0x5247664152474241;
    v108 = &NOPermuteMap;
    v109 = 3;
    v110 = 0x5247664152476641;
    v111 = &NOPermuteMap;
    v112 = 4;
    v113 = 0x5247664152476841;
    v114 = &NOPermuteMap;
    v115 = 5;
    v116 = 0x5247664172673366;
    v117 = &NOPermuteMap;
    v118 = 4;
    v119 = 0x5247664172673368;
    v120 = &NOPermuteMap;
    v121 = 5;
    v122 = 0x5247684100000020;
    v123 = &A2FirstPermuteMap;
    v124 = 7;
    v125 = 0x5247684142475241;
    v126 = &ReverseF3PermuteMap;
    v127 = 7;
    v128 = 0x5247684141424752;
    v129 = &ReversePermuteMap;
    v130 = 7;
    v131 = 0x5247684152474241;
    v132 = &NOPermuteMap;
    v133 = 7;
    v134 = 0x5247684152476641;
    v135 = &NOPermuteMap;
    v136 = 6;
    v137 = 0x5247684152476841;
    v138 = &NOPermuteMap;
    v139 = 8;
    v140 = 0x5247684172673366;
    v141 = &NOPermuteMap;
    v142 = 6;
    v143 = 0x5247684172673368;
    v144 = &NOPermuteMap;
    v145 = 8;
    std::unordered_map<unsigned long long,std::pair<unsigned char *,int>>::unordered_map(v2, v3, 48);
    RGBA_FORMAT_MAP(void)::result = v2;
  }
  return RGBA_FORMAT_MAP(void)::result;
}

void sub_20B6BD5A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD36498](v1, 0x10A0C408EF24B1CLL);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x28uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0;
  *((_DWORD *)v10 + 8) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
  }
  else
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < v7)
LABEL_35:
        std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v23)
  {
    *v10 = *v23;
LABEL_58:
    *v23 = v10;
    goto LABEL_59;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v22 + 8 * v5) = a1 + 16;
  if (*v10)
  {
    v24 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_20B6BD8A4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;

  if (!a2)
  {
    v15 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v15)
      operator delete(v15);
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v4 = operator new(8 * a2);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v6 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  v8 = a1 + 16;
  v7 = *(_QWORD **)(a1 + 16);
  if (v7)
  {
    v9 = v7[1];
    v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      v11 = v9 & v10;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = v8;
      while (1)
      {
        v12 = (_QWORD *)*v7;
        if (!*v7)
          break;
        v13 = v12[1] & v10;
        if (v13 == v11)
        {
          v7 = (_QWORD *)*v7;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
        {
          *v7 = *v12;
          v14 = 8 * v13;
          *v12 = **(_QWORD **)(*(_QWORD *)a1 + v14);
          **(_QWORD **)(*(_QWORD *)a1 + v14) = v12;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
          v7 = v12;
          v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2)
      v9 %= a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = v8;
    v16 = (_QWORD *)*v7;
    if (*v7)
    {
      do
      {
        v18 = v16[1];
        if (v18 >= a2)
          v18 %= a2;
        if (v18 != v9)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v18))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v7;
            goto LABEL_26;
          }
          *v7 = *v16;
          v17 = 8 * v18;
          *v16 = **(_QWORD **)(*(_QWORD *)a1 + v17);
          **(_QWORD **)(*(_QWORD *)a1 + v17) = v16;
          v16 = v7;
        }
        v18 = v9;
LABEL_26:
        v7 = v16;
        v16 = (_QWORD *)*v16;
        v9 = v18;
      }
      while (v16);
    }
  }
}

uint64_t std::unordered_map<unsigned long long,std::pair<unsigned char *,int>>::unordered_map(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  __int128 v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = a2;
    v6 = 0;
    v7 = 0;
    v8 = &a2[3 * a3];
    v9 = (_QWORD *)(a1 + 16);
    do
    {
      v10 = *v5;
      if (v7)
      {
        v11 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
        v11.i16[0] = vaddlv_u8(v11);
        if (v11.u32[0] > 1uLL)
        {
          v3 = *v5;
          if (v10 >= v7)
            v3 = v10 % v7;
        }
        else
        {
          v3 = (v7 - 1) & v10;
        }
        v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
        if (v12)
        {
          v13 = (_QWORD *)*v12;
          if (v13)
          {
            if (v11.u32[0] < 2uLL)
            {
              while (1)
              {
                v15 = v13[1];
                if (v15 == v10)
                {
                  if (v13[2] == v10)
                    goto LABEL_61;
                }
                else if ((v15 & (v7 - 1)) != v3)
                {
                  goto LABEL_23;
                }
                v13 = (_QWORD *)*v13;
                if (!v13)
                  goto LABEL_23;
              }
            }
            do
            {
              v14 = v13[1];
              if (v14 == v10)
              {
                if (v13[2] == v10)
                  goto LABEL_61;
              }
              else
              {
                if (v14 >= v7)
                  v14 %= v7;
                if (v14 != v3)
                  break;
              }
              v13 = (_QWORD *)*v13;
            }
            while (v13);
          }
        }
      }
LABEL_23:
      v16 = operator new(0x28uLL);
      *v16 = 0;
      v16[1] = v10;
      v17 = *(_OWORD *)v5;
      v16[4] = v5[2];
      *((_OWORD *)v16 + 1) = v17;
      v18 = (float)(unint64_t)(v6 + 1);
      v19 = *(float *)(a1 + 32);
      if (!v7 || (float)(v19 * (float)v7) < v18)
      {
        v20 = (v7 & (v7 - 1)) != 0;
        if (v7 < 3)
          v20 = 1;
        v21 = v20 | (2 * v7);
        v22 = vcvtps_u32_f32(v18 / v19);
        if (v21 <= v22)
          prime = v22;
        else
          prime = v21;
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
          v7 = *(_QWORD *)(a1 + 8);
        }
        if (prime > v7)
          goto LABEL_45;
        if (prime < v7)
        {
          v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
          if (v7 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
          {
            v24 = std::__next_prime(v24);
          }
          else
          {
            v26 = 1 << -(char)__clz(v24 - 1);
            if (v24 >= 2)
              v24 = v26;
          }
          if (prime <= v24)
            prime = v24;
          if (prime < v7)
LABEL_45:
            std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>>>::__do_rehash<true>(a1, prime);
        }
        v7 = *(_QWORD *)(a1 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v10 >= v7)
            v3 = v10 % v7;
          else
            v3 = v10;
        }
        else
        {
          v3 = (v7 - 1) & v10;
        }
      }
      v27 = *(_QWORD *)a1;
      v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
      if (v28)
      {
        *v16 = *v28;
      }
      else
      {
        *v16 = *v9;
        *v9 = v16;
        *(_QWORD *)(v27 + 8 * v3) = v9;
        if (!*v16)
          goto LABEL_60;
        v29 = *(_QWORD *)(*v16 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v29 >= v7)
            v29 %= v7;
        }
        else
        {
          v29 &= v7 - 1;
        }
        v28 = (_QWORD *)(*(_QWORD *)a1 + 8 * v29);
      }
      *v28 = v16;
LABEL_60:
      v6 = *(_QWORD *)(a1 + 24) + 1;
      *(_QWORD *)(a1 + 24) = v6;
LABEL_61:
      v5 += 3;
    }
    while (v5 != v8);
  }
  return a1;
}

void sub_20B6BDD50(_Unwind_Exception *a1)
{
  void **v1;
  void *v2;
  _QWORD **v3;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;

  operator delete(v2);
  v5 = *v3;
  if (*v3)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = *v1;
  *v1 = 0;
  if (v7)
    operator delete(v7);
  _Unwind_Resume(a1);
}

float ___ZL23invertPixelBufferValuesIfEiP10__CVBufferS1__block_invoke(uint64_t a1, float *a2, uint64_t a3, float *a4)
{
  float result;

  result = 1.0 / *a2;
  *a4 = result;
  return result;
}

__int16 ___ZL23invertPixelBufferValuesIDhEiP10__CVBuffer_block_invoke@<H0>(uint64_t a1@<X0>, __int16 *a2@<X1>)
{
  __int16 result;

  _H0 = *a2;
  __asm { FCVT            S0, H0 }
  _S0 = 1.0 / _S0;
  __asm { FCVT            H0, S0 }
  *a2 = result;
  return result;
}

uint64_t PixelBufferUtils::copyPixelBuffer(PixelBufferUtils *this, CVPixelBufferRef pixelBuffer, __CVBuffer *a3)
{
  int v3;
  signed int PixelFormatType;
  int v7;
  OpaqueVTPixelTransferSession *VTTransferSession;
  OSStatus v10;
  CGRect v11;
  CGRect v12;

  v3 = (int)a3;
  PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  if (PixelFormatType != CVPixelBufferGetPixelFormatType(this))
    return 0xFFFFFFFFLL;
  if (!v3)
    return copyPixelBufferVImage(this, *MEMORY[0x24BDBEFB0], pixelBuffer, *MEMORY[0x24BDBF090]);
  if (PixelFormatType <= 1751410031)
  {
    if (PixelFormatType > 1717855599)
    {
      if (PixelFormatType != 1717855600)
      {
        v7 = 1717856627;
        goto LABEL_15;
      }
    }
    else if (PixelFormatType != 825306677)
    {
      v7 = 825437747;
      goto LABEL_15;
    }
    return copyPixelBufferVImage(this, *MEMORY[0x24BDBEFB0], pixelBuffer, *MEMORY[0x24BDBF090]);
  }
  if (PixelFormatType <= 1919365989)
  {
    if (PixelFormatType != 1751410032)
    {
      v7 = 1751411059;
      goto LABEL_15;
    }
    return copyPixelBufferVImage(this, *MEMORY[0x24BDBEFB0], pixelBuffer, *MEMORY[0x24BDBF090]);
  }
  if (PixelFormatType == 1919365990 || PixelFormatType == 1919365992)
    return copyPixelBufferVImage(this, *MEMORY[0x24BDBEFB0], pixelBuffer, *MEMORY[0x24BDBF090]);
  v7 = 1932996149;
LABEL_15:
  if (PixelFormatType == v7)
    return copyPixelBufferVImage(this, *MEMORY[0x24BDBEFB0], pixelBuffer, *MEMORY[0x24BDBF090]);
  v11 = *(CGRect *)*(_QWORD *)&MEMORY[0x24BDBF090];
  v12.origin.x = *(CGFloat *)MEMORY[0x24BDBF090];
  v12.origin.y = v11.origin.y;
  v12.size.width = v11.size.width;
  v12.size.height = v11.size.height;
  VTTransferSession = createVTTransferSession(*MEMORY[0x24BDBF090], v12);
  v10 = VTPixelTransferSessionTransferImage(VTTransferSession, pixelBuffer, this);
  if (VTTransferSession)
  {
    VTPixelTransferSessionInvalidate(VTTransferSession);
    CFRelease(VTTransferSession);
  }
  if (v10)
  {
    NSLog(CFSTR("%s:%d - ERROR - VTPixelTransferSessionTransferImage operation failed"), "cropAndScalePixelBufferVT", 1109);
    return 0xFFFFFFFFLL;
  }
  return 0;
}

uint64_t PixelBufferUtils::countDifferentPixels(PixelBufferUtils *this, __CVBuffer *a2, __CVBuffer *a3, int32x2_t a4, int32x2_t a5)
{
  size_t Width;
  size_t Height;
  size_t v9;
  size_t v10;
  unint64_t PixelFormatType;
  uint64_t result;
  CGRect *v13;
  int32x2_t v14;
  int32x2_t v15;
  uint64_t v16;
  char v18;
  vImagePixelCount v19;
  float32x4_t v20;
  float32x4_t v21;
  float16x4_t *v22;
  float64x2_t v23;
  float16x4_t *v24;
  int8x16_t v25;
  vImagePixelCount v26;
  uint64_t v27;
  BOOL v28;
  char v29;
  unint64_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float16x4_t *v33;
  float64x2_t v34;
  float16x4_t *v35;
  int8x16_t v36;
  vImagePixelCount v37;
  uint64_t v38;
  BOOL v39;
  char v40;
  unint64_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float16x4_t *v44;
  float64x2_t v45;
  float16x4_t *v46;
  int8x16_t v47;
  __int16 *v48;
  __int16 *v49;
  unsigned int v50;
  unsigned int v51;
  BOOL v52;
  float v60;
  int32x4_t v62;
  int32x4_t v63;
  float16x4_t *v64;
  float16x4_t *v65;
  vImagePixelCount v66;
  int32x4_t v67;
  int32x4_t v68;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v75;
  float32x4_t v77;
  float32x4_t v78;
  int16x8_t v79;
  float64x2_t v80;
  float64x2_t v84;
  __int16 *v99;
  __int16 *v100;
  int v101;
  unsigned int v102;
  float v107;
  int32x4_t v109;
  int32x4_t v110;
  float16x4_t *v111;
  float16x4_t *v112;
  unint64_t v113;
  int32x4_t v114;
  int32x4_t v115;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v122;
  float32x4_t v124;
  float32x4_t v125;
  int16x8_t v126;
  float64x2_t v127;
  float64x2_t v131;
  __int16 *v146;
  __int16 *v147;
  int v148;
  unsigned int v149;
  float v154;
  int32x4_t v156;
  int32x4_t v157;
  float16x4_t *v158;
  float16x4_t *v159;
  unint64_t v160;
  int32x4_t v161;
  int32x4_t v162;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v169;
  float32x4_t v171;
  float32x4_t v172;
  int16x8_t v173;
  float64x2_t v174;
  float64x2_t v178;
  int v193;
  vImagePixelCount v194;
  uint64_t v195;
  BOOL v196;
  char v197;
  unint64_t v198;
  float32x4_t v199;
  float32x4_t v200;
  unint64_t v201;
  float64x2_t v202;
  int8x16_t v203;
  int8x16_t *data;
  uint8x16_t *v205;
  unsigned __int8 *v206;
  unsigned __int8 *v207;
  int v208;
  unsigned int v209;
  unsigned int v210;
  float v211;
  float v212;
  unint64_t v213;
  int32x4_t v214;
  int32x4_t v215;
  uint8x8_t v216;
  int16x8_t v217;
  int32x4_t v218;
  float32x4_t v219;
  float32x4_t v220;
  int8x8_t v221;
  int8x8_t v222;
  int8x8_t v223;
  int8x8_t v224;
  uint64x2_t v225;
  int8x8_t v226;
  float64x2_t v227;
  uint64x2_t v228;
  int8x8_t v229;
  int8x8_t v230;
  float64x2_t v231;
  int8x8_t v232;
  int32x4_t v233;
  int32x4_t v234;
  int8x16_t *v235;
  uint8x16_t *v236;
  unint64_t v237;
  int32x4_t v238;
  int32x4_t v239;
  uint8x16_t v240;
  uint8x16_t v241;
  int8x16_t v242;
  int16x8_t v243;
  int32x4_t v244;
  int16x8_t v245;
  int32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float32x4_t v249;
  float32x4_t v250;
  int16x8_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  int8x8_t v256;
  int16x8_t v257;
  int8x8_t v258;
  int8x16_t v259;
  int8x8_t v260;
  int8x8_t v261;
  int8x8_t v262;
  int8x8_t v263;
  uint64x2_t v264;
  uint64x2_t v265;
  int8x8_t v266;
  uint64x2_t v267;
  uint64x2_t v268;
  int8x8_t v269;
  uint64x2_t v270;
  uint64x2_t v271;
  int8x8_t v272;
  int8x8_t v273;
  float64x2_t v274;
  int8x8_t v275;
  int8x8_t v276;
  float64x2_t v277;
  int8x8_t v278;
  float64x2_t v279;
  uint64_t v280;
  BOOL v281;
  char v282;
  vImagePixelCount v283;
  float32x4_t v284;
  float32x4_t v285;
  vImagePixelCount v286;
  float64x2_t v287;
  int8x16_t v288;
  int8x16_t *v289;
  uint8x16_t *v290;
  unsigned __int8 *v291;
  unsigned __int8 *v292;
  unsigned int v293;
  unsigned int v294;
  unsigned int v295;
  float v296;
  float v297;
  vImagePixelCount v298;
  int32x4_t v299;
  int32x4_t v300;
  uint8x8_t v301;
  int16x8_t v302;
  int32x4_t v303;
  float32x4_t v304;
  float32x4_t v305;
  int8x8_t v306;
  int8x8_t v307;
  int8x8_t v308;
  int8x8_t v309;
  uint64x2_t v310;
  int8x8_t v311;
  float64x2_t v312;
  uint64x2_t v313;
  int8x8_t v314;
  int8x8_t v315;
  float64x2_t v316;
  int8x8_t v317;
  int32x4_t v318;
  int32x4_t v319;
  int8x16_t *v320;
  uint8x16_t *v321;
  vImagePixelCount v322;
  int32x4_t v323;
  int32x4_t v324;
  uint8x16_t v325;
  uint8x16_t v326;
  int8x16_t v327;
  int16x8_t v328;
  int32x4_t v329;
  int16x8_t v330;
  int32x4_t v331;
  float32x4_t v332;
  float32x4_t v333;
  float32x4_t v334;
  float32x4_t v335;
  int16x8_t v336;
  float64x2_t v337;
  float64x2_t v338;
  float64x2_t v339;
  float64x2_t v340;
  int8x8_t v341;
  int16x8_t v342;
  int8x8_t v343;
  int8x16_t v344;
  int8x8_t v345;
  int8x8_t v346;
  int8x8_t v347;
  int8x8_t v348;
  uint64x2_t v349;
  uint64x2_t v350;
  int8x8_t v351;
  uint64x2_t v352;
  uint64x2_t v353;
  int8x8_t v354;
  uint64x2_t v355;
  uint64x2_t v356;
  int8x8_t v357;
  int8x8_t v358;
  float64x2_t v359;
  int8x8_t v360;
  int8x8_t v361;
  float64x2_t v362;
  int8x8_t v363;
  float64x2_t v364;
  uint64_t v365;
  float *v366;
  float *v367;
  uint64_t v368;
  float v369;
  float v370;
  float v371;
  uint64_t v372;
  BOOL v373;
  char v374;
  vImagePixelCount v375;
  float32x4_t v376;
  float32x4_t v377;
  float16x4_t *v378;
  float64x2_t v379;
  float16x4_t *v380;
  int8x16_t v381;
  __int16 *v382;
  __int16 *v383;
  unsigned int v384;
  unsigned int v385;
  float v390;
  int32x4_t v392;
  int32x4_t v393;
  float16x4_t *v394;
  float16x4_t *v395;
  vImagePixelCount v396;
  int32x4_t v397;
  int32x4_t v398;
  float32x4_t v400;
  float32x4_t v401;
  float32x4_t v405;
  float32x4_t v407;
  float32x4_t v408;
  int16x8_t v409;
  float64x2_t v410;
  float64x2_t v414;
  uint64_t v429;
  float *v430;
  float *v431;
  uint64_t v432;
  float v433;
  float v434;
  float v435;
  uint64_t v436;
  float *v437;
  float *v438;
  uint64_t v439;
  float v440;
  float v441;
  float v442;
  vImage_Buffer *p_p;
  unsigned int v444;
  vImagePixelCount v445;
  uint64_t v446;
  BOOL v447;
  char v448;
  unint64_t v449;
  float32x4_t v450;
  float32x4_t v451;
  unint64_t v452;
  float64x2_t v453;
  int8x16_t v454;
  int8x16_t *v455;
  uint8x16_t *v456;
  unsigned __int8 *v457;
  unsigned __int8 *v458;
  int v459;
  unsigned int v460;
  unsigned int v461;
  float v462;
  float v463;
  unint64_t v464;
  int32x4_t v465;
  int32x4_t v466;
  uint8x8_t v467;
  int16x8_t v468;
  int32x4_t v469;
  float32x4_t v470;
  float32x4_t v471;
  int8x8_t v472;
  int8x8_t v473;
  int8x8_t v474;
  int8x8_t v475;
  uint64x2_t v476;
  int8x8_t v477;
  float64x2_t v478;
  uint64x2_t v479;
  int8x8_t v480;
  int8x8_t v481;
  float64x2_t v482;
  int8x8_t v483;
  int32x4_t v484;
  int32x4_t v485;
  int8x16_t *v486;
  uint8x16_t *v487;
  unint64_t v488;
  int32x4_t v489;
  int32x4_t v490;
  uint8x16_t v491;
  uint8x16_t v492;
  int8x16_t v493;
  int16x8_t v494;
  int32x4_t v495;
  int16x8_t v496;
  int32x4_t v497;
  float32x4_t v498;
  float32x4_t v499;
  float32x4_t v500;
  float32x4_t v501;
  int16x8_t v502;
  float64x2_t v503;
  float64x2_t v504;
  float64x2_t v505;
  float64x2_t v506;
  int8x8_t v507;
  int16x8_t v508;
  int8x8_t v509;
  int8x16_t v510;
  int8x8_t v511;
  int8x8_t v512;
  int8x8_t v513;
  int8x8_t v514;
  uint64x2_t v515;
  uint64x2_t v516;
  int8x8_t v517;
  uint64x2_t v518;
  uint64x2_t v519;
  int8x8_t v520;
  uint64x2_t v521;
  uint64x2_t v522;
  int8x8_t v523;
  int8x8_t v524;
  float64x2_t v525;
  int8x8_t v526;
  int8x8_t v527;
  float64x2_t v528;
  int8x8_t v529;
  float64x2_t v530;
  vImage_Buffer __p;
  vImage_Buffer v534;
  vImage_Buffer v535;

  Width = CVPixelBufferGetWidth(this);
  Height = CVPixelBufferGetHeight(this);
  v9 = CVPixelBufferGetWidth(a2);
  v10 = CVPixelBufferGetHeight(a2);
  PixelFormatType = CVPixelBufferGetPixelFormatType(this);
  result = -1;
  if (Width == v9 && Height == v10)
  {
    CVPixelBufferLockBaseAddress(this, 1uLL);
    CVPixelBufferLockBaseAddress(a2, 1uLL);
    memset(&v535, 0, sizeof(v535));
    v13 = (CGRect *)MEMORY[0x24BDBF090];
    PixelBufferUtils::asVImageBuffer(this, *MEMORY[0x24BDBF090], &v535);
    memset(&v534, 0, sizeof(v534));
    PixelBufferUtils::asVImageBuffer(a2, *v13, &v534);
    if ((int)PixelFormatType <= 1380410944)
    {
      v15 = a4;
      v14 = a5;
      if ((int)PixelFormatType > 1111970368)
      {
        if ((int)PixelFormatType > 1278226533)
        {
          if ((_DWORD)PixelFormatType != 1278226534)
          {
            if ((_DWORD)PixelFormatType != 1278226536)
            {
              if ((_DWORD)PixelFormatType != 1380401729)
                goto LABEL_221;
LABEL_95:
              if (*(_OWORD *)&v535.height == *(_OWORD *)&v534.height)
              {
                if (v535.height)
                {
                  v194 = 4 * v535.width;
                  if (4 * v535.width)
                  {
                    v195 = 0;
                    LODWORD(PixelFormatType) = 0;
                    if ((_DWORD)v194)
                      v196 = (v194 - 1) >> 32 == 0;
                    else
                      v196 = 0;
                    v197 = !v196;
                    v198 = v194 & 0xFFFFFFFFFFFFFFF0;
                    v199 = (float32x4_t)vdupq_lane_s32(a5, 0);
                    v200 = (float32x4_t)vdupq_lane_s32(a4, 0);
                    v201 = v194 & 0xFFFFFFFFFFFFFFF8;
                    v202 = (float64x2_t)vdupq_n_s64(0x3B5E392010175EE6uLL);
                    v203.i64[0] = 0x100000001;
                    v203.i64[1] = 0x100000001;
                    data = (int8x16_t *)v534.data;
                    v205 = (uint8x16_t *)v535.data;
                    while (1)
                    {
                      v206 = (unsigned __int8 *)v535.data + v195 * v535.rowBytes;
                      v207 = (unsigned __int8 *)v534.data + v195 * v534.rowBytes;
                      if (v194 < 8 || (v197 & 1) != 0)
                      {
                        v208 = 0;
                        goto LABEL_109;
                      }
                      if (v194 >= 0x10)
                      {
                        v233 = (int32x4_t)PixelFormatType;
                        v234 = 0uLL;
                        v235 = data;
                        v236 = v205;
                        v237 = v194 & 0xFFFFFFFFFFFFFFF0;
                        v238 = 0uLL;
                        v239 = 0uLL;
                        do
                        {
                          v240 = *v236++;
                          v241 = v240;
                          v242 = *v235++;
                          v243 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v241.i8, *(uint8x8_t *)v242.i8);
                          v244 = vmovl_high_s16(v243);
                          v245 = (int16x8_t)vsubl_high_u8(v241, (uint8x16_t)v242);
                          v246 = vmovl_high_s16(v245);
                          v247 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v245.i8));
                          v248 = vcvtq_f32_s32(v246);
                          v249 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v243.i8));
                          v250 = vcvtq_f32_s32(v244);
                          v251 = (int16x8_t)vcgtq_f32(v247, v199);
                          v252 = vcvtq_f64_f32(*(float32x2_t *)v247.f32);
                          v253 = vcvt_hight_f64_f32(v247);
                          v254 = vcvtq_f64_f32(*(float32x2_t *)v249.f32);
                          v255 = vcvt_hight_f64_f32(v249);
                          v256 = (int8x8_t)vextq_s8(v242, v242, 8uLL).u64[0];
                          v257 = vuzp1q_s16((int16x8_t)vcgtq_f32(v249, v199), (int16x8_t)vcgtq_f32(v250, v199));
                          v258.i32[0] = v256.u8[6];
                          v258.i32[1] = v256.u8[7];
                          v259 = (int8x16_t)vuzp1q_s16(v251, (int16x8_t)vcgtq_f32(v248, v199));
                          v260.i32[0] = v256.u8[4];
                          v260.i32[1] = v256.u8[5];
                          v261 = vand_s8(v258, (int8x8_t)0xFF000000FFLL);
                          v262.i32[0] = v256.u8[2];
                          v262.i32[1] = v256.u8[3];
                          v263 = vand_s8(v260, (int8x8_t)0xFF000000FFLL);
                          v251.i32[0] = v256.u8[0];
                          v264.i64[0] = v261.u32[0];
                          v264.i64[1] = v261.u32[1];
                          v265 = v264;
                          v266 = vand_s8(v262, (int8x8_t)0xFF000000FFLL);
                          v251.i32[1] = v256.u8[1];
                          v264.i64[0] = v263.u32[0];
                          v264.i64[1] = v263.u32[1];
                          v267 = v264;
                          v256.i32[0] = v242.u8[6];
                          v256.i32[1] = v242.u8[7];
                          v264.i64[0] = v266.u32[0];
                          v264.i64[1] = v266.u32[1];
                          v268 = v264;
                          *(int8x8_t *)v251.i8 = vand_s8(*(int8x8_t *)v251.i8, (int8x8_t)0xFF000000FFLL);
                          v269 = vand_s8(v256, (int8x8_t)0xFF000000FFLL);
                          v264.i64[0] = v269.u32[0];
                          v264.i64[1] = v269.u32[1];
                          v270 = v264;
                          v264.i64[0] = v251.u32[0];
                          v264.i64[1] = v251.u32[1];
                          v271 = v264;
                          v272.i32[0] = v242.u8[4];
                          v272.i32[1] = v242.u8[5];
                          v273 = vand_s8(v272, (int8x8_t)0xFF000000FFLL);
                          v264.i64[0] = v273.u32[0];
                          v264.i64[1] = v273.u32[1];
                          v274 = vcvtq_f64_u64(v264);
                          v275.i32[0] = v242.u8[2];
                          v275.i32[1] = v242.u8[3];
                          v276 = vand_s8(v275, (int8x8_t)0xFF000000FFLL);
                          v264.i64[0] = v276.u32[0];
                          v264.i64[1] = v276.u32[1];
                          v277 = vcvtq_f64_u64(v264);
                          v278.i32[0] = v242.u8[0];
                          v278.i32[1] = v242.u8[1];
                          v279 = vcvtq_f64_u64(v271);
                          *(int8x8_t *)v271.i8 = vand_s8(v278, (int8x8_t)0xFF000000FFLL);
                          v264.i64[0] = v271.u32[0];
                          v264.i64[1] = v271.u32[1];
                          *(int8x8_t *)v259.i8 = vmovn_s16((int16x8_t)vandq_s8(v259, (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(v252, vaddq_f64(v279, v202))), vdivq_f64(v253, vaddq_f64(vcvtq_f64_u64(v268), v202))), v200), (int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)v248.f32), vaddq_f64(vcvtq_f64_u64(v267), v202))), vdivq_f64(vcvt_hight_f64_f32(v248), vaddq_f64(vcvtq_f64_u64(v265), v202))), v200))));
                          *(int8x8_t *)v257.i8 = vand_s8(vmovn_s16(v257), vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(v254, vaddq_f64(vcvtq_f64_u64(v264), v202))), vdivq_f64(v255, vaddq_f64(v277, v202))), v200), (int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)v250.f32), vaddq_f64(v274, v202))),
                                                                      vdivq_f64(vcvt_hight_f64_f32(v250), vaddq_f64(vcvtq_f64_u64(v270), v202))), v200))));
                          v234 = vaddq_s32(v234, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v257.i8, *(int8x8_t *)v199.f32)), v203));
                          v233 = vaddq_s32(v233, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v257.i8, *(int8x8_t *)v199.f32)), v203));
                          v239 = vaddq_s32(v239, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v259.i8, *(int8x8_t *)v199.f32)), v203));
                          v238 = vaddq_s32(v238, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v259.i8, *(int8x8_t *)v199.f32)), v203));
                          v237 -= 16;
                        }
                        while (v237);
                        LODWORD(PixelFormatType) = vaddvq_s32(vaddq_s32(vaddq_s32(v233, v238), vaddq_s32(v234, v239)));
                        if (v194 == v198)
                          goto LABEL_105;
                        if ((v535.width & 2) == 0)
                        {
                          v206 += v198;
                          v207 += v198;
                          v208 = v194 & 0xFFFFFFF0;
LABEL_109:
                          v209 = v208 + 1;
                          do
                          {
                            v210 = *v207;
                            v211 = (float)(int)(*v206 - v210);
                            if (v211 > *(float *)a5.i32)
                            {
                              v212 = v211 / ((double)v210 + 1.0e-22);
                              if (v212 > *(float *)a4.i32)
                                LODWORD(PixelFormatType) = PixelFormatType + 1;
                            }
                            ++v206;
                            ++v207;
                            v52 = v194 > v209++;
                          }
                          while (v52);
                          goto LABEL_105;
                        }
                        v213 = v194 & 0xFFFFFFFFFFFFFFF0;
                      }
                      else
                      {
                        v213 = 0;
                      }
                      v207 += v201;
                      v214 = 0uLL;
                      v215 = (int32x4_t)PixelFormatType;
                      do
                      {
                        v216 = *(uint8x8_t *)&data->i8[v213];
                        v217 = (int16x8_t)vsubl_u8(*(uint8x8_t *)&v205->i8[v213], v216);
                        v218 = vmovl_high_s16(v217);
                        v219 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v217.i8));
                        v220 = vcvtq_f32_s32(v218);
                        v221.i32[0] = v216.u8[6];
                        v221.i32[1] = v216.u8[7];
                        v222.i32[0] = v216.u8[4];
                        v223 = vand_s8(v221, (int8x8_t)0xFF000000FFLL);
                        v222.i32[1] = v216.u8[5];
                        v224 = vand_s8(v222, (int8x8_t)0xFF000000FFLL);
                        v225.i64[0] = v223.u32[0];
                        v225.i64[1] = v223.u32[1];
                        v226.i32[0] = v216.u8[2];
                        v226.i32[1] = v216.u8[3];
                        v227 = vcvtq_f64_u64(v225);
                        v225.i64[0] = v224.u32[0];
                        v225.i64[1] = v224.u32[1];
                        v228 = v225;
                        v229 = vand_s8(v226, (int8x8_t)0xFF000000FFLL);
                        v225.i64[0] = v229.u32[0];
                        v225.i64[1] = v229.u32[1];
                        v230.i32[0] = v216.u8[0];
                        v230.i32[1] = v216.u8[1];
                        v231 = vcvtq_f64_u64(v225);
                        v232 = vand_s8(v230, (int8x8_t)0xFF000000FFLL);
                        v225.i64[0] = v232.u32[0];
                        v225.i64[1] = v232.u32[1];
                        *(int8x8_t *)v219.f32 = vmovn_s16((int16x8_t)vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v219, v199), (int16x8_t)vcgtq_f32(v220, v199)), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)v219.f32), vaddq_f64(vcvtq_f64_u64(v225), v202))), vdivq_f64(vcvt_hight_f64_f32(v219), vaddq_f64(v231, v202))), v200), (int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)v220.f32), vaddq_f64(vcvtq_f64_u64(v228), v202))), vdivq_f64(vcvt_hight_f64_f32(v220), vaddq_f64(v227, v202))), v200))));
                        v214 = vaddq_s32(v214, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v219.f32, *(int8x8_t *)v199.f32)), v203));
                        v215 = vaddq_s32(v215, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v219.f32, *(int8x8_t *)v199.f32)), v203));
                        v213 += 8;
                      }
                      while (v201 != v213);
                      LODWORD(PixelFormatType) = vaddvq_s32(vaddq_s32(v215, v214));
                      if (v194 != v201)
                      {
                        v206 += v201;
                        v208 = v194 & 0xFFFFFFF8;
                        goto LABEL_109;
                      }
LABEL_105:
                      ++v195;
                      v205 = (uint8x16_t *)((char *)v205 + v535.rowBytes);
                      data = (int8x16_t *)((char *)data + v534.rowBytes);
                      if (v535.height <= v195)
                        goto LABEL_261;
                    }
                  }
                }
LABEL_226:
                LODWORD(PixelFormatType) = 0;
              }
LABEL_261:
              CVPixelBufferUnlockBaseAddress(this, 1uLL);
              CVPixelBufferUnlockBaseAddress(a2, 1uLL);
              return (int)PixelFormatType;
            }
            goto LABEL_177;
          }
LABEL_167:
          if (*(_OWORD *)&v535.height == *(_OWORD *)&v534.height)
          {
            if (v535.height && v535.width)
            {
              v365 = 0;
              LODWORD(PixelFormatType) = 0;
              v366 = (float *)v535.data;
              v367 = (float *)v534.data;
              do
              {
                v368 = 0;
                do
                {
                  v369 = v367[v368];
                  v370 = v366[v368] - v369;
                  if (v370 > *(float *)v14.i32)
                  {
                    v371 = v370 / (v369 + 1.0e-22);
                    if (v371 > *(float *)v15.i32)
                      LODWORD(PixelFormatType) = PixelFormatType + 1;
                  }
                  ++v368;
                }
                while (v535.width > v368);
                ++v365;
                v367 = (float *)((char *)v367 + v534.rowBytes);
                v366 = (float *)((char *)v366 + v535.rowBytes);
              }
              while (v535.height > v365);
              goto LABEL_261;
            }
            goto LABEL_226;
          }
          goto LABEL_261;
        }
        if ((_DWORD)PixelFormatType == 1111970369)
          goto LABEL_95;
        v193 = 1278226488;
        goto LABEL_166;
      }
      if ((int)PixelFormatType <= 875704421)
      {
        if ((_DWORD)PixelFormatType == 32)
          goto LABEL_95;
        if ((_DWORD)PixelFormatType != 843264104)
          goto LABEL_221;
        if (*(_OWORD *)&v535.height != *(_OWORD *)&v534.height)
          goto LABEL_261;
        if (!v535.height)
          goto LABEL_226;
        v26 = 2 * v535.width;
        if (!(2 * v535.width))
          goto LABEL_226;
        v27 = 0;
        LODWORD(PixelFormatType) = 0;
        if ((_DWORD)v26)
          v28 = (v26 - 1) >> 32 == 0;
        else
          v28 = 0;
        v29 = !v28;
        v30 = 2 * (v26 & 0xFFFFFFFFFFFFFFF0);
        v31 = (float32x4_t)vdupq_lane_s32(a5, 0);
        v32 = (float32x4_t)vdupq_lane_s32(a4, 0);
        v33 = (float16x4_t *)((char *)v535.data + 16);
        v34 = (float64x2_t)vdupq_n_s64(0x3B5E392010175EE6uLL);
        v35 = (float16x4_t *)((char *)v534.data + 16);
        v36.i64[0] = 0x100000001;
        v36.i64[1] = 0x100000001;
        while (1)
        {
          v99 = (__int16 *)((char *)v535.data + v27 * v535.rowBytes);
          v100 = (__int16 *)((char *)v534.data + v27 * v534.rowBytes);
          if (v26 < 0x10 || (v29 & 1) != 0)
            break;
          v100 = (__int16 *)((char *)v100 + v30);
          v109 = (int32x4_t)PixelFormatType;
          v110 = 0uLL;
          v111 = v35;
          v112 = v33;
          v113 = v26 & 0xFFFFFFFFFFFFFFF0;
          v114 = 0uLL;
          v115 = 0uLL;
          do
          {
            _Q17 = *(float16x8_t *)v112[-2].i8;
            v117 = vcvt_hight_f32_f16(_Q17);
            v118 = vcvtq_f32_f16(*(float16x4_t *)_Q17.i8);
            _Q26 = *(float16x8_t *)v111[-2].i8;
            _Q20 = *(float64x2_t *)v111->i8;
            _D27 = vextq_s8((int8x16_t)_Q26, (int8x16_t)_Q26, 8uLL).u64[0];
            _Q17.i64[0] = vextq_s8((int8x16_t)_Q20, (int8x16_t)_Q20, 8uLL).u64[0];
            v122 = vsubq_f32(v118, vcvtq_f32_f16(*(float16x4_t *)_Q26.i8));
            _Q30 = (float64x2_t)vsubq_f32(v117, vcvt_hight_f32_f16(_Q26));
            v124 = vsubq_f32(vcvtq_f32_f16(*v112), vcvtq_f32_f16(*v111));
            v125 = vsubq_f32(vcvt_hight_f32_f16(*(float16x8_t *)v112->i8), vcvt_hight_f32_f16(*(float16x8_t *)v111->i8));
            v126 = (int16x8_t)vcgtq_f32((float32x4_t)_Q30, v31);
            v127 = vcvtq_f64_f32(*(float32x2_t *)&_Q30.f64[0]);
            _H25 = HIWORD(*(_QWORD *)&v111[-2]);
            __asm { FCVT            D31, H25 }
            _H8 = WORD2(*(_QWORD *)&v111[-2]);
            v131 = vcvt_hight_f64_f32((float32x4_t)_Q30);
            __asm { FCVT            D30, H8 }
            _Q30.f64[1] = _D31;
            LOWORD(_D31) = _Q26.i16[1];
            __asm
            {
              FCVT            D31, H31
              FCVT            D26, H26
            }
            _Q26.i64[1] = _D31;
            LOWORD(_D31) = HIWORD(_D27);
            __asm { FCVT            D31, H31 }
            _H9 = WORD2(_D27);
            __asm { FCVT            D9, H9 }
            _H10 = WORD1(_D27);
            __asm { FCVT            D10, H10 }
            _Q9.f64[1] = _D31;
            __asm { FCVT            D27, H27 }
            LOWORD(_D31) = HIWORD(*(unint64_t *)v111);
            __asm { FCVT            D31, H31 }
            _H11 = WORD2(*(unint64_t *)v111);
            __asm { FCVT            D11, H11 }
            _Q11.f64[1] = _D31;
            LOWORD(_D31) = WORD1(*(_OWORD *)v111->i8);
            __asm
            {
              FCVT            D31, H31
              FCVT            D20, H20
            }
            _Q20.f64[1] = _D31;
            LOWORD(_D31) = _Q17.i16[3];
            __asm { FCVT            D31, H31 }
            _Q27.f64[1] = _D10;
            LOWORD(_D10) = _Q17.i16[2];
            __asm { FCVT            D10, H10 }
            _Q10.f64[1] = _D31;
            LOWORD(_D31) = _Q17.i16[1];
            __asm
            {
              FCVT            D24, H31
              FCVT            D17, H17
            }
            _Q17.i64[1] = _D24;
            *(int8x8_t *)&v127.f64[0] = vmovn_s16((int16x8_t)vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v122, v31), v126), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)v122.f32), vaddq_f64((float64x2_t)_Q26, v34))), vdivq_f64(vcvt_hight_f64_f32(v122), vaddq_f64(_Q30, v34))), v32), (int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(v127, vaddq_f64(_Q27, v34))), vdivq_f64(v131, vaddq_f64(_Q9, v34))), v32))));
            *(int8x8_t *)_Q17.i8 = vmovn_s16((int16x8_t)vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v124, v31), (int16x8_t)vcgtq_f32(v125, v31)), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)v124.f32), vaddq_f64(_Q20, v34))), vdivq_f64(vcvt_hight_f64_f32(v124), vaddq_f64(_Q11, v34))), v32), (int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)v125.f32),
                                                                                                     vaddq_f64((float64x2_t)_Q17, v34))),
                                                                                      vdivq_f64(vcvt_hight_f64_f32(v125), vaddq_f64(_Q10, v34))), v32))));
            v110 = vaddq_s32(v110, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)&v127.f64[0], *(int8x8_t *)v31.f32)), v36));
            v109 = vaddq_s32(v109, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)&v127.f64[0], *(int8x8_t *)v31.f32)), v36));
            v115 = vaddq_s32(v115, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)_Q17.i8, *(int8x8_t *)v31.f32)), v36));
            v114 = vaddq_s32(v114, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)_Q17.i8, *(int8x8_t *)v31.f32)), v36));
            v112 += 4;
            v111 += 4;
            v113 -= 16;
          }
          while (v113);
          LODWORD(PixelFormatType) = vaddvq_s32(vaddq_s32(vaddq_s32(v114, v109), vaddq_s32(v115, v110)));
          if (v26 != (v26 & 0xFFFFFFFFFFFFFFF0))
          {
            v99 = (__int16 *)((char *)v99 + v30);
            v101 = v26 & 0xFFFFFFF0;
LABEL_69:
            v102 = v101 + 1;
            do
            {
              _H5 = *v99;
              __asm { FCVT            S6, H5 }
              _H5 = *v100;
              __asm { FCVT            S7, H5 }
              v107 = _S6 - _S7;
              if (v107 > *(float *)a5.i32)
              {
                __asm { FCVT            D5, H5 }
                *(float *)&_D5 = v107 / (_D5 + 1.0e-22);
                if (*(float *)&_D5 > *(float *)a4.i32)
                  LODWORD(PixelFormatType) = PixelFormatType + 1;
              }
              ++v99;
              ++v100;
              v52 = v26 > v102++;
            }
            while (v52);
          }
          ++v27;
          v33 = (float16x4_t *)((char *)v33 + v535.rowBytes);
          v35 = (float16x4_t *)((char *)v35 + v534.rowBytes);
          if (v535.height <= v27)
            goto LABEL_261;
        }
        v101 = 0;
        goto LABEL_69;
      }
      if ((_DWORD)PixelFormatType != 875704422 && (_DWORD)PixelFormatType != 875704438)
        goto LABEL_221;
      PixelBufferUtils::asVImageBuffer(this, 0, *v13, &v535);
      PixelBufferUtils::asVImageBuffer(a2, 0, *v13, &v534);
      if (*(_OWORD *)&v535.height == *(_OWORD *)&v534.height)
      {
        if (v535.height && v535.width)
        {
          v280 = 0;
          LODWORD(PixelFormatType) = 0;
          if (LODWORD(v535.width))
            v281 = (v535.width - 1) >> 32 == 0;
          else
            v281 = 0;
          v282 = !v281;
          v283 = v535.width & 0xFFFFFFFFFFFFFFF0;
          v284 = (float32x4_t)vdupq_lane_s32(a5, 0);
          v285 = (float32x4_t)vdupq_lane_s32(a4, 0);
          v286 = v535.width & 0xFFFFFFFFFFFFFFF8;
          v287 = (float64x2_t)vdupq_n_s64(0x3B5E392010175EE6uLL);
          v288.i64[0] = 0x100000001;
          v288.i64[1] = 0x100000001;
          v289 = (int8x16_t *)v534.data;
          v290 = (uint8x16_t *)v535.data;
          while (1)
          {
            v291 = (unsigned __int8 *)v535.data + v280 * v535.rowBytes;
            v292 = (unsigned __int8 *)v534.data + v280 * v534.rowBytes;
            if (v535.width < 8 || (v282 & 1) != 0)
            {
              v293 = 0;
              goto LABEL_146;
            }
            if (v535.width >= 0x10)
            {
              v318 = (int32x4_t)PixelFormatType;
              v319 = 0uLL;
              v320 = v289;
              v321 = v290;
              v322 = v535.width & 0xFFFFFFFFFFFFFFF0;
              v323 = 0uLL;
              v324 = 0uLL;
              do
              {
                v325 = *v321++;
                v326 = v325;
                v327 = *v320++;
                v328 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v326.i8, *(uint8x8_t *)v327.i8);
                v329 = vmovl_high_s16(v328);
                v330 = (int16x8_t)vsubl_high_u8(v326, (uint8x16_t)v327);
                v331 = vmovl_high_s16(v330);
                v332 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v330.i8));
                v333 = vcvtq_f32_s32(v331);
                v334 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v328.i8));
                v335 = vcvtq_f32_s32(v329);
                v336 = (int16x8_t)vcgtq_f32(v332, v284);
                v337 = vcvtq_f64_f32(*(float32x2_t *)v332.f32);
                v338 = vcvt_hight_f64_f32(v332);
                v339 = vcvtq_f64_f32(*(float32x2_t *)v334.f32);
                v340 = vcvt_hight_f64_f32(v334);
                v341 = (int8x8_t)vextq_s8(v327, v327, 8uLL).u64[0];
                v342 = vuzp1q_s16((int16x8_t)vcgtq_f32(v334, v284), (int16x8_t)vcgtq_f32(v335, v284));
                v343.i32[0] = v341.u8[6];
                v343.i32[1] = v341.u8[7];
                v344 = (int8x16_t)vuzp1q_s16(v336, (int16x8_t)vcgtq_f32(v333, v284));
                v345.i32[0] = v341.u8[4];
                v345.i32[1] = v341.u8[5];
                v346 = vand_s8(v343, (int8x8_t)0xFF000000FFLL);
                v347.i32[0] = v341.u8[2];
                v347.i32[1] = v341.u8[3];
                v348 = vand_s8(v345, (int8x8_t)0xFF000000FFLL);
                v336.i32[0] = v341.u8[0];
                v349.i64[0] = v346.u32[0];
                v349.i64[1] = v346.u32[1];
                v350 = v349;
                v351 = vand_s8(v347, (int8x8_t)0xFF000000FFLL);
                v336.i32[1] = v341.u8[1];
                v349.i64[0] = v348.u32[0];
                v349.i64[1] = v348.u32[1];
                v352 = v349;
                v341.i32[0] = v327.u8[6];
                v341.i32[1] = v327.u8[7];
                v349.i64[0] = v351.u32[0];
                v349.i64[1] = v351.u32[1];
                v353 = v349;
                *(int8x8_t *)v336.i8 = vand_s8(*(int8x8_t *)v336.i8, (int8x8_t)0xFF000000FFLL);
                v354 = vand_s8(v341, (int8x8_t)0xFF000000FFLL);
                v349.i64[0] = v354.u32[0];
                v349.i64[1] = v354.u32[1];
                v355 = v349;
                v349.i64[0] = v336.u32[0];
                v349.i64[1] = v336.u32[1];
                v356 = v349;
                v357.i32[0] = v327.u8[4];
                v357.i32[1] = v327.u8[5];
                v358 = vand_s8(v357, (int8x8_t)0xFF000000FFLL);
                v349.i64[0] = v358.u32[0];
                v349.i64[1] = v358.u32[1];
                v359 = vcvtq_f64_u64(v349);
                v360.i32[0] = v327.u8[2];
                v360.i32[1] = v327.u8[3];
                v361 = vand_s8(v360, (int8x8_t)0xFF000000FFLL);
                v349.i64[0] = v361.u32[0];
                v349.i64[1] = v361.u32[1];
                v362 = vcvtq_f64_u64(v349);
                v363.i32[0] = v327.u8[0];
                v363.i32[1] = v327.u8[1];
                v364 = vcvtq_f64_u64(v356);
                *(int8x8_t *)v356.i8 = vand_s8(v363, (int8x8_t)0xFF000000FFLL);
                v349.i64[0] = v356.u32[0];
                v349.i64[1] = v356.u32[1];
                *(int8x8_t *)v344.i8 = vmovn_s16((int16x8_t)vandq_s8(v344, (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(v337, vaddq_f64(v364, v287))), vdivq_f64(v338, vaddq_f64(vcvtq_f64_u64(v353), v287))), v285), (int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)v333.f32), vaddq_f64(vcvtq_f64_u64(v352), v287))), vdivq_f64(vcvt_hight_f64_f32(v333), vaddq_f64(vcvtq_f64_u64(v350), v287))),
                                                                                        v285))));
                *(int8x8_t *)v342.i8 = vand_s8(vmovn_s16(v342), vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(v339, vaddq_f64(vcvtq_f64_u64(v349), v287))), vdivq_f64(v340, vaddq_f64(v362, v287))), v285), (int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)v335.f32), vaddq_f64(v359, v287))), vdivq_f64(vcvt_hight_f64_f32(v335),
                                                              vaddq_f64(vcvtq_f64_u64(v355), v287))),
                                                          v285))));
                v319 = vaddq_s32(v319, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v342.i8, *(int8x8_t *)v284.f32)), v288));
                v318 = vaddq_s32(v318, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v342.i8, *(int8x8_t *)v284.f32)), v288));
                v324 = vaddq_s32(v324, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v344.i8, *(int8x8_t *)v284.f32)), v288));
                v323 = vaddq_s32(v323, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v344.i8, *(int8x8_t *)v284.f32)), v288));
                v322 -= 16;
              }
              while (v322);
              LODWORD(PixelFormatType) = vaddvq_s32(vaddq_s32(vaddq_s32(v318, v323), vaddq_s32(v319, v324)));
              if (v535.width == v283)
                goto LABEL_142;
              if ((v535.width & 8) == 0)
              {
                v291 += v283;
                v292 += v283;
                v293 = v535.width & 0xFFFFFFF0;
LABEL_146:
                v294 = v293 + 1;
                do
                {
                  v295 = *v292;
                  v296 = (float)(int)(*v291 - v295);
                  if (v296 > *(float *)a5.i32)
                  {
                    v297 = v296 / ((double)v295 + 1.0e-22);
                    if (v297 > *(float *)a4.i32)
                      LODWORD(PixelFormatType) = PixelFormatType + 1;
                  }
                  ++v291;
                  ++v292;
                  v52 = v535.width > v294++;
                }
                while (v52);
                goto LABEL_142;
              }
              v298 = v535.width & 0xFFFFFFFFFFFFFFF0;
            }
            else
            {
              v298 = 0;
            }
            v292 += v286;
            v299 = 0uLL;
            v300 = (int32x4_t)PixelFormatType;
            do
            {
              v301 = *(uint8x8_t *)&v289->i8[v298];
              v302 = (int16x8_t)vsubl_u8(*(uint8x8_t *)&v290->i8[v298], v301);
              v303 = vmovl_high_s16(v302);
              v304 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v302.i8));
              v305 = vcvtq_f32_s32(v303);
              v306.i32[0] = v301.u8[6];
              v306.i32[1] = v301.u8[7];
              v307.i32[0] = v301.u8[4];
              v308 = vand_s8(v306, (int8x8_t)0xFF000000FFLL);
              v307.i32[1] = v301.u8[5];
              v309 = vand_s8(v307, (int8x8_t)0xFF000000FFLL);
              v310.i64[0] = v308.u32[0];
              v310.i64[1] = v308.u32[1];
              v311.i32[0] = v301.u8[2];
              v311.i32[1] = v301.u8[3];
              v312 = vcvtq_f64_u64(v310);
              v310.i64[0] = v309.u32[0];
              v310.i64[1] = v309.u32[1];
              v313 = v310;
              v314 = vand_s8(v311, (int8x8_t)0xFF000000FFLL);
              v310.i64[0] = v314.u32[0];
              v310.i64[1] = v314.u32[1];
              v315.i32[0] = v301.u8[0];
              v315.i32[1] = v301.u8[1];
              v316 = vcvtq_f64_u64(v310);
              v317 = vand_s8(v315, (int8x8_t)0xFF000000FFLL);
              v310.i64[0] = v317.u32[0];
              v310.i64[1] = v317.u32[1];
              *(int8x8_t *)v304.f32 = vmovn_s16((int16x8_t)vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v304, v284), (int16x8_t)vcgtq_f32(v305, v284)), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)v304.f32), vaddq_f64(vcvtq_f64_u64(v310), v287))), vdivq_f64(vcvt_hight_f64_f32(v304), vaddq_f64(v316, v287))), v285), (int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)v305.f32), vaddq_f64(vcvtq_f64_u64(v313), v287))), vdivq_f64(vcvt_hight_f64_f32(v305), vaddq_f64(v312, v287))), v285))));
              v299 = vaddq_s32(v299, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v304.f32, *(int8x8_t *)v284.f32)), v288));
              v300 = vaddq_s32(v300, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v304.f32, *(int8x8_t *)v284.f32)), v288));
              v298 += 8;
            }
            while (v286 != v298);
            LODWORD(PixelFormatType) = vaddvq_s32(vaddq_s32(v300, v299));
            if (v535.width != v286)
            {
              v291 += v286;
              v293 = v535.width & 0xFFFFFFF8;
              goto LABEL_146;
            }
LABEL_142:
            ++v280;
            v290 = (uint8x16_t *)((char *)v290 + v535.rowBytes);
            v289 = (int8x16_t *)((char *)v289 + v534.rowBytes);
            if (v535.height <= v280)
              goto LABEL_228;
          }
        }
        LODWORD(PixelFormatType) = 0;
      }
LABEL_228:
      PixelBufferUtils::asVImageBuffer(this, (__CVBuffer *)1, *v13, &v535);
      PixelBufferUtils::asVImageBuffer(a2, (__CVBuffer *)1, *v13, &v534);
      if (*(_OWORD *)&v535.height != *(_OWORD *)&v534.height)
      {
LABEL_260:
        LODWORD(PixelFormatType) = v444 + PixelFormatType;
        goto LABEL_261;
      }
      if (!v535.height)
        goto LABEL_261;
      v445 = 2 * v535.width;
      if (!(2 * v535.width))
        goto LABEL_261;
      v446 = 0;
      v444 = 0;
      if ((_DWORD)v445)
        v447 = (v445 - 1) >> 32 == 0;
      else
        v447 = 0;
      v448 = !v447;
      v449 = v445 & 0xFFFFFFFFFFFFFFF0;
      v450 = (float32x4_t)vdupq_lane_s32(a5, 0);
      v451 = (float32x4_t)vdupq_lane_s32(a4, 0);
      v452 = v445 & 0xFFFFFFFFFFFFFFF8;
      v453 = (float64x2_t)vdupq_n_s64(0x3B5E392010175EE6uLL);
      v454.i64[0] = 0x100000001;
      v454.i64[1] = 0x100000001;
      v455 = (int8x16_t *)v534.data;
      v456 = (uint8x16_t *)v535.data;
      while (1)
      {
        v457 = (unsigned __int8 *)v535.data + v446 * v535.rowBytes;
        v458 = (unsigned __int8 *)v534.data + v446 * v534.rowBytes;
        if (v445 < 8 || (v448 & 1) != 0)
        {
          v459 = 0;
          goto LABEL_242;
        }
        if (v445 >= 0x10)
        {
          v484 = (int32x4_t)v444;
          v485 = 0uLL;
          v486 = v455;
          v487 = v456;
          v488 = v445 & 0xFFFFFFFFFFFFFFF0;
          v489 = 0uLL;
          v490 = 0uLL;
          do
          {
            v491 = *v487++;
            v492 = v491;
            v493 = *v486++;
            v494 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v492.i8, *(uint8x8_t *)v493.i8);
            v495 = vmovl_high_s16(v494);
            v496 = (int16x8_t)vsubl_high_u8(v492, (uint8x16_t)v493);
            v497 = vmovl_high_s16(v496);
            v498 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v496.i8));
            v499 = vcvtq_f32_s32(v497);
            v500 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v494.i8));
            v501 = vcvtq_f32_s32(v495);
            v502 = (int16x8_t)vcgtq_f32(v498, v450);
            v503 = vcvtq_f64_f32(*(float32x2_t *)v498.f32);
            v504 = vcvt_hight_f64_f32(v498);
            v505 = vcvtq_f64_f32(*(float32x2_t *)v500.f32);
            v506 = vcvt_hight_f64_f32(v500);
            v507 = (int8x8_t)vextq_s8(v493, v493, 8uLL).u64[0];
            v508 = vuzp1q_s16((int16x8_t)vcgtq_f32(v500, v450), (int16x8_t)vcgtq_f32(v501, v450));
            v509.i32[0] = v507.u8[6];
            v509.i32[1] = v507.u8[7];
            v510 = (int8x16_t)vuzp1q_s16(v502, (int16x8_t)vcgtq_f32(v499, v450));
            v511.i32[0] = v507.u8[4];
            v511.i32[1] = v507.u8[5];
            v512 = vand_s8(v509, (int8x8_t)0xFF000000FFLL);
            v513.i32[0] = v507.u8[2];
            v513.i32[1] = v507.u8[3];
            v514 = vand_s8(v511, (int8x8_t)0xFF000000FFLL);
            v502.i32[0] = v507.u8[0];
            v515.i64[0] = v512.u32[0];
            v515.i64[1] = v512.u32[1];
            v516 = v515;
            v517 = vand_s8(v513, (int8x8_t)0xFF000000FFLL);
            v502.i32[1] = v507.u8[1];
            v515.i64[0] = v514.u32[0];
            v515.i64[1] = v514.u32[1];
            v518 = v515;
            v507.i32[0] = v493.u8[6];
            v507.i32[1] = v493.u8[7];
            v515.i64[0] = v517.u32[0];
            v515.i64[1] = v517.u32[1];
            v519 = v515;
            *(int8x8_t *)v502.i8 = vand_s8(*(int8x8_t *)v502.i8, (int8x8_t)0xFF000000FFLL);
            v520 = vand_s8(v507, (int8x8_t)0xFF000000FFLL);
            v515.i64[0] = v520.u32[0];
            v515.i64[1] = v520.u32[1];
            v521 = v515;
            v515.i64[0] = v502.u32[0];
            v515.i64[1] = v502.u32[1];
            v522 = v515;
            v523.i32[0] = v493.u8[4];
            v523.i32[1] = v493.u8[5];
            v524 = vand_s8(v523, (int8x8_t)0xFF000000FFLL);
            v515.i64[0] = v524.u32[0];
            v515.i64[1] = v524.u32[1];
            v525 = vcvtq_f64_u64(v515);
            v526.i32[0] = v493.u8[2];
            v526.i32[1] = v493.u8[3];
            v527 = vand_s8(v526, (int8x8_t)0xFF000000FFLL);
            v515.i64[0] = v527.u32[0];
            v515.i64[1] = v527.u32[1];
            v528 = vcvtq_f64_u64(v515);
            v529.i32[0] = v493.u8[0];
            v529.i32[1] = v493.u8[1];
            v530 = vcvtq_f64_u64(v522);
            *(int8x8_t *)v522.i8 = vand_s8(v529, (int8x8_t)0xFF000000FFLL);
            v515.i64[0] = v522.u32[0];
            v515.i64[1] = v522.u32[1];
            *(int8x8_t *)v510.i8 = vmovn_s16((int16x8_t)vandq_s8(v510, (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(v503, vaddq_f64(v530, v453))), vdivq_f64(v504, vaddq_f64(vcvtq_f64_u64(v519), v453))), v451), (int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)v499.f32),
                                                                                                     vaddq_f64(vcvtq_f64_u64(v518), v453))),
                                                                                      vdivq_f64(vcvt_hight_f64_f32(v499), vaddq_f64(vcvtq_f64_u64(v516), v453))), v451))));
            *(int8x8_t *)v508.i8 = vand_s8(vmovn_s16(v508), vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(v505, vaddq_f64(vcvtq_f64_u64(v515), v453))), vdivq_f64(v506, vaddq_f64(v528, v453))), v451), (int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)v501.f32), vaddq_f64(v525, v453))), vdivq_f64(vcvt_hight_f64_f32(v501),
                                                          vaddq_f64(vcvtq_f64_u64(v521), v453))),
                                                      v451))));
            v485 = vaddq_s32(v485, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v508.i8, *(int8x8_t *)v450.f32)), v454));
            v484 = vaddq_s32(v484, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v508.i8, *(int8x8_t *)v450.f32)), v454));
            v490 = vaddq_s32(v490, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v510.i8, *(int8x8_t *)v450.f32)), v454));
            v489 = vaddq_s32(v489, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v510.i8, *(int8x8_t *)v450.f32)), v454));
            v488 -= 16;
          }
          while (v488);
          v444 = vaddvq_s32(vaddq_s32(vaddq_s32(v484, v489), vaddq_s32(v485, v490)));
          if (v445 == v449)
            goto LABEL_238;
          if ((v535.width & 4) == 0)
          {
            v457 += v449;
            v458 += v449;
            v459 = v445 & 0xFFFFFFF0;
LABEL_242:
            v460 = v459 + 1;
            do
            {
              v461 = *v458;
              v462 = (float)(int)(*v457 - v461);
              if (v462 > *(float *)a5.i32)
              {
                v463 = v462 / ((double)v461 + 1.0e-22);
                if (v463 > *(float *)a4.i32)
                  ++v444;
              }
              ++v457;
              ++v458;
              v52 = v445 > v460++;
            }
            while (v52);
            goto LABEL_238;
          }
          v464 = v445 & 0xFFFFFFFFFFFFFFF0;
        }
        else
        {
          v464 = 0;
        }
        v458 += v452;
        v465 = 0uLL;
        v466 = (int32x4_t)v444;
        do
        {
          v467 = *(uint8x8_t *)&v455->i8[v464];
          v468 = (int16x8_t)vsubl_u8(*(uint8x8_t *)&v456->i8[v464], v467);
          v469 = vmovl_high_s16(v468);
          v470 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v468.i8));
          v471 = vcvtq_f32_s32(v469);
          v472.i32[0] = v467.u8[6];
          v472.i32[1] = v467.u8[7];
          v473.i32[0] = v467.u8[4];
          v474 = vand_s8(v472, (int8x8_t)0xFF000000FFLL);
          v473.i32[1] = v467.u8[5];
          v475 = vand_s8(v473, (int8x8_t)0xFF000000FFLL);
          v476.i64[0] = v474.u32[0];
          v476.i64[1] = v474.u32[1];
          v477.i32[0] = v467.u8[2];
          v477.i32[1] = v467.u8[3];
          v478 = vcvtq_f64_u64(v476);
          v476.i64[0] = v475.u32[0];
          v476.i64[1] = v475.u32[1];
          v479 = v476;
          v480 = vand_s8(v477, (int8x8_t)0xFF000000FFLL);
          v476.i64[0] = v480.u32[0];
          v476.i64[1] = v480.u32[1];
          v481.i32[0] = v467.u8[0];
          v481.i32[1] = v467.u8[1];
          v482 = vcvtq_f64_u64(v476);
          v483 = vand_s8(v481, (int8x8_t)0xFF000000FFLL);
          v476.i64[0] = v483.u32[0];
          v476.i64[1] = v483.u32[1];
          *(int8x8_t *)v470.f32 = vmovn_s16((int16x8_t)vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v470, v450), (int16x8_t)vcgtq_f32(v471, v450)), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)v470.f32), vaddq_f64(vcvtq_f64_u64(v476), v453))), vdivq_f64(vcvt_hight_f64_f32(v470), vaddq_f64(v482, v453))), v451), (int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)v471.f32),
                                                                                                    vaddq_f64(vcvtq_f64_u64(v479), v453))),
                                                                                     vdivq_f64(vcvt_hight_f64_f32(v471), vaddq_f64(v478, v453))), v451))));
          v465 = vaddq_s32(v465, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v470.f32, *(int8x8_t *)v450.f32)), v454));
          v466 = vaddq_s32(v466, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v470.f32, *(int8x8_t *)v450.f32)), v454));
          v464 += 8;
        }
        while (v452 != v464);
        v444 = vaddvq_s32(vaddq_s32(v466, v465));
        if (v445 != v452)
        {
          v457 += v452;
          v459 = v445 & 0xFFFFFFF8;
          goto LABEL_242;
        }
LABEL_238:
        ++v446;
        v456 = (uint8x16_t *)((char *)v456 + v535.rowBytes);
        v455 = (int8x16_t *)((char *)v455 + v534.rowBytes);
        if (v535.height <= v446)
          goto LABEL_260;
      }
    }
    v15 = a4;
    v14 = a5;
    if ((int)PixelFormatType > 1717856626)
    {
      if ((int)PixelFormatType <= 1751411058)
      {
        if ((_DWORD)PixelFormatType == 1717856627)
          goto LABEL_167;
        if ((_DWORD)PixelFormatType != 1751410032)
          goto LABEL_221;
      }
      else if ((_DWORD)PixelFormatType != 1751411059)
      {
        if ((_DWORD)PixelFormatType == 1919365990)
        {
          PixelBufferUtils::asVImageBuffer(this, 0, *v13, &__p);
          PixelBufferUtils::asVImageBuffer(a2, 0, *v13, &__p);
          PixelBufferUtils::asVImageBuffer(this, (__CVBuffer *)1, *v13, &__p);
          PixelBufferUtils::asVImageBuffer(a2, (__CVBuffer *)1, *v13, &__p);
          PixelBufferUtils::asVImageBuffer(this, (__CVBuffer *)2, *v13, &__p);
          v535 = __p;
          PixelBufferUtils::asVImageBuffer(a2, (__CVBuffer *)2, *v13, &__p);
          v534 = __p;
          if (*(_OWORD *)&v535.height == *(_OWORD *)&__p.height)
          {
            if (v535.height && v535.width)
            {
              v429 = 0;
              LODWORD(PixelFormatType) = 0;
              v430 = (float *)v535.data;
              v431 = (float *)v534.data;
              do
              {
                v432 = 0;
                do
                {
                  v433 = v431[v432];
                  v434 = v430[v432] - v433;
                  if (v434 > *(float *)a5.i32)
                  {
                    v435 = v434 / (v433 + 1.0e-22);
                    if (v435 > *(float *)a4.i32)
                      LODWORD(PixelFormatType) = PixelFormatType + 1;
                  }
                  ++v432;
                }
                while (v535.width > v432);
                ++v429;
                v431 = (float *)((char *)v431 + v534.rowBytes);
                v430 = (float *)((char *)v430 + v535.rowBytes);
              }
              while (v535.height > v429);
              goto LABEL_261;
            }
            goto LABEL_226;
          }
          goto LABEL_261;
        }
        if ((_DWORD)PixelFormatType != 1919365992)
          goto LABEL_221;
        PixelBufferUtils::asVImageBuffer(this, 0, *v13, &__p);
        PixelBufferUtils::asVImageBuffer(a2, 0, *v13, &__p);
        PixelBufferUtils::asVImageBuffer(this, (__CVBuffer *)1, *v13, &__p);
        PixelBufferUtils::asVImageBuffer(a2, (__CVBuffer *)1, *v13, &__p);
        PixelBufferUtils::asVImageBuffer(this, (__CVBuffer *)2, *v13, &__p);
        v535 = __p;
        PixelBufferUtils::asVImageBuffer(a2, (__CVBuffer *)2, *v13, &__p);
        v534 = __p;
        if (*(_OWORD *)&v535.height != *(_OWORD *)&__p.height)
          goto LABEL_261;
        if (!v535.height || !v535.width)
          goto LABEL_226;
        v16 = 0;
        LODWORD(PixelFormatType) = 0;
        if (LODWORD(v535.width))
          _ZF = (v535.width - 1) >> 32 == 0;
        else
          _ZF = 0;
        v18 = !_ZF;
        v19 = 2 * (v535.width & 0xFFFFFFFFFFFFFFF0);
        v20 = (float32x4_t)vdupq_lane_s32(a5, 0);
        v21 = (float32x4_t)vdupq_lane_s32(a4, 0);
        v22 = (float16x4_t *)((char *)v535.data + 16);
        v23 = (float64x2_t)vdupq_n_s64(0x3B5E392010175EE6uLL);
        v24 = (float16x4_t *)((char *)v534.data + 16);
        v25.i64[0] = 0x100000001;
        v25.i64[1] = 0x100000001;
        while (1)
        {
          v48 = (__int16 *)((char *)v535.data + v16 * v535.rowBytes);
          v49 = (__int16 *)((char *)v534.data + v16 * v534.rowBytes);
          if (v535.width < 0x10 || (v18 & 1) != 0)
            break;
          v49 = (__int16 *)((char *)v49 + v19);
          v62 = (int32x4_t)PixelFormatType;
          v63 = 0uLL;
          v64 = v24;
          v65 = v22;
          v66 = v535.width & 0xFFFFFFFFFFFFFFF0;
          v67 = 0uLL;
          v68 = 0uLL;
          do
          {
            _Q17 = *(float16x8_t *)v65[-2].i8;
            v70 = vcvt_hight_f32_f16(_Q17);
            v71 = vcvtq_f32_f16(*(float16x4_t *)_Q17.i8);
            _Q26 = *(float16x8_t *)v64[-2].i8;
            _Q20 = *(float64x2_t *)v64->i8;
            _D27 = vextq_s8((int8x16_t)_Q26, (int8x16_t)_Q26, 8uLL).u64[0];
            _Q17.i64[0] = vextq_s8((int8x16_t)_Q20, (int8x16_t)_Q20, 8uLL).u64[0];
            v75 = vsubq_f32(v71, vcvtq_f32_f16(*(float16x4_t *)_Q26.i8));
            _Q30 = (float64x2_t)vsubq_f32(v70, vcvt_hight_f32_f16(_Q26));
            v77 = vsubq_f32(vcvtq_f32_f16(*v65), vcvtq_f32_f16(*v64));
            v78 = vsubq_f32(vcvt_hight_f32_f16(*(float16x8_t *)v65->i8), vcvt_hight_f32_f16(*(float16x8_t *)v64->i8));
            v79 = (int16x8_t)vcgtq_f32((float32x4_t)_Q30, v20);
            v80 = vcvtq_f64_f32(*(float32x2_t *)&_Q30.f64[0]);
            _H25 = HIWORD(*(_QWORD *)&v64[-2]);
            __asm { FCVT            D31, H25 }
            _H8 = WORD2(*(_QWORD *)&v64[-2]);
            v84 = vcvt_hight_f64_f32((float32x4_t)_Q30);
            __asm { FCVT            D30, H8 }
            _Q30.f64[1] = _D31;
            LOWORD(_D31) = _Q26.i16[1];
            __asm
            {
              FCVT            D31, H31
              FCVT            D26, H26
            }
            _Q26.i64[1] = _D31;
            LOWORD(_D31) = HIWORD(_D27);
            __asm { FCVT            D31, H31 }
            _H9 = WORD2(_D27);
            __asm { FCVT            D9, H9 }
            _H10 = WORD1(_D27);
            __asm { FCVT            D10, H10 }
            _Q9.f64[1] = _D31;
            __asm { FCVT            D27, H27 }
            LOWORD(_D31) = HIWORD(*(unint64_t *)v64);
            __asm { FCVT            D31, H31 }
            _H11 = WORD2(*(unint64_t *)v64);
            __asm { FCVT            D11, H11 }
            _Q11.f64[1] = _D31;
            LOWORD(_D31) = WORD1(*(_OWORD *)v64->i8);
            __asm
            {
              FCVT            D31, H31
              FCVT            D20, H20
            }
            _Q20.f64[1] = _D31;
            LOWORD(_D31) = _Q17.i16[3];
            __asm { FCVT            D31, H31 }
            _Q27.f64[1] = _D10;
            LOWORD(_D10) = _Q17.i16[2];
            __asm { FCVT            D10, H10 }
            _Q10.f64[1] = _D31;
            LOWORD(_D31) = _Q17.i16[1];
            __asm
            {
              FCVT            D24, H31
              FCVT            D17, H17
            }
            _Q17.i64[1] = _D24;
            *(int8x8_t *)&v80.f64[0] = vmovn_s16((int16x8_t)vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v75, v20), v79), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)v75.f32), vaddq_f64((float64x2_t)_Q26, v23))), vdivq_f64(vcvt_hight_f64_f32(v75), vaddq_f64(_Q30, v23))), v21), (int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(v80, vaddq_f64(_Q27, v23))), vdivq_f64(v84, vaddq_f64(_Q9, v23))), v21))));
            *(int8x8_t *)_Q17.i8 = vmovn_s16((int16x8_t)vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v77, v20), (int16x8_t)vcgtq_f32(v78, v20)), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)v77.f32), vaddq_f64(_Q20, v23))), vdivq_f64(vcvt_hight_f64_f32(v77), vaddq_f64(_Q11, v23))), v21), (int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)v78.f32),
                                                                                                     vaddq_f64((float64x2_t)_Q17, v23))),
                                                                                      vdivq_f64(vcvt_hight_f64_f32(v78), vaddq_f64(_Q10, v23))), v21))));
            v63 = vaddq_s32(v63, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)&v80.f64[0], *(int8x8_t *)v20.f32)), v25));
            v62 = vaddq_s32(v62, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)&v80.f64[0], *(int8x8_t *)v20.f32)), v25));
            v68 = vaddq_s32(v68, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)_Q17.i8, *(int8x8_t *)v20.f32)), v25));
            v67 = vaddq_s32(v67, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)_Q17.i8, *(int8x8_t *)v20.f32)), v25));
            v65 += 4;
            v64 += 4;
            v66 -= 16;
          }
          while (v66);
          LODWORD(PixelFormatType) = vaddvq_s32(vaddq_s32(vaddq_s32(v67, v62), vaddq_s32(v68, v63)));
          if (v535.width != (v535.width & 0xFFFFFFFFFFFFFFF0))
          {
            v48 = (__int16 *)((char *)v48 + v19);
            v50 = v535.width & 0xFFFFFFF0;
LABEL_55:
            v51 = v50 + 1;
            do
            {
              _H5 = *v48;
              __asm { FCVT            S6, H5 }
              _H5 = *v49;
              __asm { FCVT            S7, H5 }
              v60 = _S6 - _S7;
              if (v60 > *(float *)a5.i32)
              {
                __asm { FCVT            D5, H5 }
                *(float *)&_D5 = v60 / (_D5 + 1.0e-22);
                if (*(float *)&_D5 > *(float *)a4.i32)
                  LODWORD(PixelFormatType) = PixelFormatType + 1;
              }
              ++v48;
              ++v49;
              v52 = v535.width > v51++;
            }
            while (v52);
          }
          ++v16;
          v22 = (float16x4_t *)((char *)v22 + v535.rowBytes);
          v24 = (float16x4_t *)((char *)v24 + v534.rowBytes);
          if (v535.height <= v16)
            goto LABEL_261;
        }
        v50 = 0;
        goto LABEL_55;
      }
LABEL_177:
      if (*(_OWORD *)&v535.height != *(_OWORD *)&v534.height)
        goto LABEL_261;
      if (!v535.height || !v535.width)
        goto LABEL_226;
      v372 = 0;
      LODWORD(PixelFormatType) = 0;
      if (LODWORD(v535.width))
        v373 = (v535.width - 1) >> 32 == 0;
      else
        v373 = 0;
      v374 = !v373;
      v375 = 2 * (v535.width & 0xFFFFFFFFFFFFFFF0);
      v376 = (float32x4_t)vdupq_lane_s32(v14, 0);
      v377 = (float32x4_t)vdupq_lane_s32(v15, 0);
      v378 = (float16x4_t *)((char *)v535.data + 16);
      v379 = (float64x2_t)vdupq_n_s64(0x3B5E392010175EE6uLL);
      v380 = (float16x4_t *)((char *)v534.data + 16);
      v381.i64[0] = 0x100000001;
      v381.i64[1] = 0x100000001;
      while (1)
      {
        v382 = (__int16 *)((char *)v535.data + v372 * v535.rowBytes);
        v383 = (__int16 *)((char *)v534.data + v372 * v534.rowBytes);
        if (v535.width < 0x10 || (v374 & 1) != 0)
          break;
        v383 = (__int16 *)((char *)v383 + v375);
        v392 = (int32x4_t)PixelFormatType;
        v393 = 0uLL;
        v394 = v380;
        v395 = v378;
        v396 = v535.width & 0xFFFFFFFFFFFFFFF0;
        v397 = 0uLL;
        v398 = 0uLL;
        do
        {
          _Q17 = *(float16x8_t *)v395[-2].i8;
          v400 = vcvt_hight_f32_f16(_Q17);
          v401 = vcvtq_f32_f16(*(float16x4_t *)_Q17.i8);
          _Q26 = *(float16x8_t *)v394[-2].i8;
          _Q20 = *(float64x2_t *)v394->i8;
          _D27 = vextq_s8((int8x16_t)_Q26, (int8x16_t)_Q26, 8uLL).u64[0];
          _Q17.i64[0] = vextq_s8((int8x16_t)_Q20, (int8x16_t)_Q20, 8uLL).u64[0];
          v405 = vsubq_f32(v401, vcvtq_f32_f16(*(float16x4_t *)_Q26.i8));
          _Q30 = (float64x2_t)vsubq_f32(v400, vcvt_hight_f32_f16(_Q26));
          v407 = vsubq_f32(vcvtq_f32_f16(*v395), vcvtq_f32_f16(*v394));
          v408 = vsubq_f32(vcvt_hight_f32_f16(*(float16x8_t *)v395->i8), vcvt_hight_f32_f16(*(float16x8_t *)v394->i8));
          v409 = (int16x8_t)vcgtq_f32((float32x4_t)_Q30, v376);
          v410 = vcvtq_f64_f32(*(float32x2_t *)&_Q30.f64[0]);
          _H25 = HIWORD(*(_QWORD *)&v394[-2]);
          __asm { FCVT            D31, H25 }
          _H8 = WORD2(*(_QWORD *)&v394[-2]);
          v414 = vcvt_hight_f64_f32((float32x4_t)_Q30);
          __asm { FCVT            D30, H8 }
          _Q30.f64[1] = _D31;
          LOWORD(_D31) = _Q26.i16[1];
          __asm
          {
            FCVT            D31, H31
            FCVT            D26, H26
          }
          _Q26.i64[1] = _D31;
          LOWORD(_D31) = HIWORD(_D27);
          __asm { FCVT            D31, H31 }
          _H9 = WORD2(_D27);
          __asm { FCVT            D9, H9 }
          _H10 = WORD1(_D27);
          __asm { FCVT            D10, H10 }
          _Q9.f64[1] = _D31;
          __asm { FCVT            D27, H27 }
          LOWORD(_D31) = HIWORD(*(unint64_t *)v394);
          __asm { FCVT            D31, H31 }
          _H11 = WORD2(*(unint64_t *)v394);
          __asm { FCVT            D11, H11 }
          _Q11.f64[1] = _D31;
          LOWORD(_D31) = WORD1(*(_OWORD *)v394->i8);
          __asm
          {
            FCVT            D31, H31
            FCVT            D20, H20
          }
          _Q20.f64[1] = _D31;
          LOWORD(_D31) = _Q17.i16[3];
          __asm { FCVT            D31, H31 }
          _Q27.f64[1] = _D10;
          LOWORD(_D10) = _Q17.i16[2];
          __asm { FCVT            D10, H10 }
          _Q10.f64[1] = _D31;
          LOWORD(_D31) = _Q17.i16[1];
          __asm
          {
            FCVT            D24, H31
            FCVT            D17, H17
          }
          _Q17.i64[1] = _D24;
          *(int8x8_t *)&v410.f64[0] = vmovn_s16((int16x8_t)vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v405, v376), v409), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)v405.f32), vaddq_f64((float64x2_t)_Q26, v379))), vdivq_f64(vcvt_hight_f64_f32(v405), vaddq_f64(_Q30, v379))), v377), (int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(v410, vaddq_f64(_Q27, v379))), vdivq_f64(v414, vaddq_f64(_Q9, v379))), v377))));
          *(int8x8_t *)_Q17.i8 = vmovn_s16((int16x8_t)vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v407, v376), (int16x8_t)vcgtq_f32(v408, v376)), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)v407.f32), vaddq_f64(_Q20, v379))), vdivq_f64(vcvt_hight_f64_f32(v407), vaddq_f64(_Q11, v379))), v377), (int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)v408.f32),
                                                                                                   vaddq_f64((float64x2_t)_Q17, v379))), vdivq_f64(vcvt_hight_f64_f32(v408), vaddq_f64(_Q10, v379))), v377))));
          v393 = vaddq_s32(v393, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)&v410.f64[0], *(int8x8_t *)v376.f32)), v381));
          v392 = vaddq_s32(v392, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)&v410.f64[0], *(int8x8_t *)v376.f32)), v381));
          v398 = vaddq_s32(v398, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)_Q17.i8, *(int8x8_t *)v376.f32)), v381));
          v397 = vaddq_s32(v397, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)_Q17.i8, *(int8x8_t *)v376.f32)), v381));
          v395 += 4;
          v394 += 4;
          v396 -= 16;
        }
        while (v396);
        LODWORD(PixelFormatType) = vaddvq_s32(vaddq_s32(vaddq_s32(v397, v392), vaddq_s32(v398, v393)));
        if (v535.width != (v535.width & 0xFFFFFFFFFFFFFFF0))
        {
          v382 = (__int16 *)((char *)v382 + v375);
          v384 = v535.width & 0xFFFFFFF0;
LABEL_191:
          v385 = v384 + 1;
          do
          {
            _H5 = *v382;
            __asm { FCVT            S6, H5 }
            _H5 = *v383;
            __asm { FCVT            S7, H5 }
            v390 = _S6 - _S7;
            if (v390 > *(float *)v14.i32)
            {
              __asm { FCVT            D5, H5 }
              *(float *)&_D5 = v390 / (_D5 + 1.0e-22);
              if (*(float *)&_D5 > *(float *)v15.i32)
                LODWORD(PixelFormatType) = PixelFormatType + 1;
            }
            ++v382;
            ++v383;
            v52 = v535.width > v385++;
          }
          while (v52);
        }
        ++v372;
        v378 = (float16x4_t *)((char *)v378 + v535.rowBytes);
        v380 = (float16x4_t *)((char *)v380 + v534.rowBytes);
        if (v535.height <= v372)
          goto LABEL_261;
      }
      v384 = 0;
      goto LABEL_191;
    }
    if ((int)PixelFormatType > 1647392358)
    {
      if ((_DWORD)PixelFormatType != 1647392359)
      {
        v193 = 1717855600;
LABEL_166:
        if ((_DWORD)PixelFormatType == v193)
          goto LABEL_167;
LABEL_221:
        PixelBufferUtils::pixelFormatAsString(PixelFormatType, (char *)&__p);
        if ((__p.width & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (vImage_Buffer *)__p.data;
        NSLog(CFSTR("%s:%d - ERROR - pixel format %08x (\"%s\") not supported\n"), "countDifferentPixels", 2363, PixelFormatType, p_p);
        if (SHIBYTE(__p.width) < 0)
          operator delete(__p.data);
        goto LABEL_226;
      }
      goto LABEL_177;
    }
    if ((_DWORD)PixelFormatType == 1380410945)
    {
      if (*(_OWORD *)&v535.height == *(_OWORD *)&v534.height)
      {
        if (v535.height && 4 * v535.width)
        {
          v436 = 0;
          LODWORD(PixelFormatType) = 0;
          v437 = (float *)v535.data;
          v438 = (float *)v534.data;
          do
          {
            v439 = 0;
            do
            {
              v440 = v438[v439];
              v441 = v437[v439] - v440;
              if (v441 > *(float *)a5.i32)
              {
                v442 = v441 / (v440 + 1.0e-22);
                if (v442 > *(float *)a4.i32)
                  LODWORD(PixelFormatType) = PixelFormatType + 1;
              }
              ++v439;
            }
            while (4 * v535.width > v439);
            ++v436;
            v438 = (float *)((char *)v438 + v534.rowBytes);
            v437 = (float *)((char *)v437 + v535.rowBytes);
          }
          while (v535.height > v436);
          goto LABEL_261;
        }
        goto LABEL_226;
      }
      goto LABEL_261;
    }
    if ((_DWORD)PixelFormatType != 1380411457)
      goto LABEL_221;
    if (*(_OWORD *)&v535.height != *(_OWORD *)&v534.height)
      goto LABEL_261;
    if (!v535.height)
      goto LABEL_226;
    v37 = 4 * v535.width;
    if (!(4 * v535.width))
      goto LABEL_226;
    v38 = 0;
    LODWORD(PixelFormatType) = 0;
    if ((_DWORD)v37)
      v39 = (v37 - 1) >> 32 == 0;
    else
      v39 = 0;
    v40 = !v39;
    v41 = 2 * (v37 & 0xFFFFFFFFFFFFFFF0);
    v42 = (float32x4_t)vdupq_lane_s32(a5, 0);
    v43 = (float32x4_t)vdupq_lane_s32(a4, 0);
    v44 = (float16x4_t *)((char *)v535.data + 16);
    v45 = (float64x2_t)vdupq_n_s64(0x3B5E392010175EE6uLL);
    v46 = (float16x4_t *)((char *)v534.data + 16);
    v47.i64[0] = 0x100000001;
    v47.i64[1] = 0x100000001;
    while (1)
    {
      v146 = (__int16 *)((char *)v535.data + v38 * v535.rowBytes);
      v147 = (__int16 *)((char *)v534.data + v38 * v534.rowBytes);
      if (v37 < 0x10 || (v40 & 1) != 0)
        break;
      v147 = (__int16 *)((char *)v147 + v41);
      v156 = (int32x4_t)PixelFormatType;
      v157 = 0uLL;
      v158 = v46;
      v159 = v44;
      v160 = v37 & 0xFFFFFFFFFFFFFFF0;
      v161 = 0uLL;
      v162 = 0uLL;
      do
      {
        _Q17 = *(float16x8_t *)v159[-2].i8;
        v164 = vcvt_hight_f32_f16(_Q17);
        v165 = vcvtq_f32_f16(*(float16x4_t *)_Q17.i8);
        _Q26 = *(float16x8_t *)v158[-2].i8;
        _Q20 = *(float64x2_t *)v158->i8;
        _D27 = vextq_s8((int8x16_t)_Q26, (int8x16_t)_Q26, 8uLL).u64[0];
        _Q17.i64[0] = vextq_s8((int8x16_t)_Q20, (int8x16_t)_Q20, 8uLL).u64[0];
        v169 = vsubq_f32(v165, vcvtq_f32_f16(*(float16x4_t *)_Q26.i8));
        _Q30 = (float64x2_t)vsubq_f32(v164, vcvt_hight_f32_f16(_Q26));
        v171 = vsubq_f32(vcvtq_f32_f16(*v159), vcvtq_f32_f16(*v158));
        v172 = vsubq_f32(vcvt_hight_f32_f16(*(float16x8_t *)v159->i8), vcvt_hight_f32_f16(*(float16x8_t *)v158->i8));
        v173 = (int16x8_t)vcgtq_f32((float32x4_t)_Q30, v42);
        v174 = vcvtq_f64_f32(*(float32x2_t *)&_Q30.f64[0]);
        _H25 = HIWORD(*(_QWORD *)&v158[-2]);
        __asm { FCVT            D31, H25 }
        _H8 = WORD2(*(_QWORD *)&v158[-2]);
        v178 = vcvt_hight_f64_f32((float32x4_t)_Q30);
        __asm { FCVT            D30, H8 }
        _Q30.f64[1] = _D31;
        LOWORD(_D31) = _Q26.i16[1];
        __asm
        {
          FCVT            D31, H31
          FCVT            D26, H26
        }
        _Q26.i64[1] = _D31;
        LOWORD(_D31) = HIWORD(_D27);
        __asm { FCVT            D31, H31 }
        _H9 = WORD2(_D27);
        __asm { FCVT            D9, H9 }
        _H10 = WORD1(_D27);
        __asm { FCVT            D10, H10 }
        _Q9.f64[1] = _D31;
        __asm { FCVT            D27, H27 }
        LOWORD(_D31) = HIWORD(*(unint64_t *)v158);
        __asm { FCVT            D31, H31 }
        _H11 = WORD2(*(unint64_t *)v158);
        __asm { FCVT            D11, H11 }
        _Q11.f64[1] = _D31;
        LOWORD(_D31) = WORD1(*(_OWORD *)v158->i8);
        __asm
        {
          FCVT            D31, H31
          FCVT            D20, H20
        }
        _Q20.f64[1] = _D31;
        LOWORD(_D31) = _Q17.i16[3];
        __asm { FCVT            D31, H31 }
        _Q27.f64[1] = _D10;
        LOWORD(_D10) = _Q17.i16[2];
        __asm { FCVT            D10, H10 }
        _Q10.f64[1] = _D31;
        LOWORD(_D31) = _Q17.i16[1];
        __asm
        {
          FCVT            D24, H31
          FCVT            D17, H17
        }
        _Q17.i64[1] = _D24;
        *(int8x8_t *)&v174.f64[0] = vmovn_s16((int16x8_t)vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v169, v42), v173), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)v169.f32), vaddq_f64((float64x2_t)_Q26, v45))), vdivq_f64(vcvt_hight_f64_f32(v169), vaddq_f64(_Q30, v45))), v43), (int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(v174, vaddq_f64(_Q27, v45))), vdivq_f64(v178, vaddq_f64(_Q9, v45))), v43))));
        *(int8x8_t *)_Q17.i8 = vmovn_s16((int16x8_t)vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v171, v42), (int16x8_t)vcgtq_f32(v172, v42)), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)v171.f32), vaddq_f64(_Q20, v45))), vdivq_f64(vcvt_hight_f64_f32(v171), vaddq_f64(_Q11, v45))), v43), (int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)v172.f32),
                                                                                                 vaddq_f64((float64x2_t)_Q17, v45))), vdivq_f64(vcvt_hight_f64_f32(v172), vaddq_f64(_Q10, v45))), v43))));
        v157 = vaddq_s32(v157, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)&v174.f64[0], *(int8x8_t *)v42.f32)), v47));
        v156 = vaddq_s32(v156, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)&v174.f64[0], *(int8x8_t *)v42.f32)), v47));
        v162 = vaddq_s32(v162, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)_Q17.i8, *(int8x8_t *)v42.f32)), v47));
        v161 = vaddq_s32(v161, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)_Q17.i8, *(int8x8_t *)v42.f32)), v47));
        v159 += 4;
        v158 += 4;
        v160 -= 16;
      }
      while (v160);
      LODWORD(PixelFormatType) = vaddvq_s32(vaddq_s32(vaddq_s32(v161, v156), vaddq_s32(v162, v157)));
      if (v37 != (v37 & 0xFFFFFFFFFFFFFFF0))
      {
        v146 = (__int16 *)((char *)v146 + v41);
        v148 = v37 & 0xFFFFFFF0;
LABEL_83:
        v149 = v148 + 1;
        do
        {
          _H5 = *v146;
          __asm { FCVT            S6, H5 }
          _H5 = *v147;
          __asm { FCVT            S7, H5 }
          v154 = _S6 - _S7;
          if (v154 > *(float *)a5.i32)
          {
            __asm { FCVT            D5, H5 }
            *(float *)&_D5 = v154 / (_D5 + 1.0e-22);
            if (*(float *)&_D5 > *(float *)a4.i32)
              LODWORD(PixelFormatType) = PixelFormatType + 1;
          }
          ++v146;
          ++v147;
          v52 = v37 > v149++;
        }
        while (v52);
      }
      ++v38;
      v44 = (float16x4_t *)((char *)v44 + v535.rowBytes);
      v46 = (float16x4_t *)((char *)v46 + v534.rowBytes);
      if (v535.height <= v38)
        goto LABEL_261;
    }
    v148 = 0;
    goto LABEL_83;
  }
  return result;
}

void sub_20B6C020C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__CVBuffer *PixelBufferUtils::errorsPixelBuffer(PixelBufferUtils *this, __CVBuffer *a2, __CVBuffer *a3)
{
  return PixelBufferUtils::errorsPixelBuffer(this, a2, 0, 1);
}

__CVBuffer *PixelBufferUtils::errorsPixelBuffer(PixelBufferUtils *this, __CVBuffer *a2, __CVBuffer *a3, int a4)
{
  char v5;
  OSType PixelFormatType;
  size_t Width;
  size_t Height;
  unint64_t v11;
  size_t v12;
  size_t v13;
  const __CFAllocator *v14;
  const __CFDictionary *BufferAttributes;
  __CVBuffer *data;
  CGRect *v17;
  float v18;
  float v19;
  int v20;
  __CVBuffer *v21;
  int v23;
  float v24;
  float v25;
  float v26;
  float v27;
  int v28;
  vImagePixelCount v29;
  vImagePixelCount v30;
  size_t rowBytes;
  char *v32;
  size_t v33;
  char *v34;
  size_t v35;
  char *v36;
  double v37;
  char v39;
  uint64_t v40;
  float16x4_t *v41;
  float16x4_t *v42;
  float64_t *v43;
  char *v44;
  char *v45;
  char *v46;
  int v48;
  unsigned int v49;
  __int16 v50;
  __int16 v55;
  BOOL v62;
  unint64_t v63;
  float16x4_t *v64;
  float64_t *v65;
  float16x4_t v66;
  float32x4_t v67;
  float16x4_t v68;
  float32x4_t v75;
  long double v76;
  vImagePixelCount v84;
  vImagePixelCount v85;
  size_t v86;
  char *v87;
  char *v88;
  size_t v89;
  char *v90;
  double v91;
  BOOL v92;
  char v93;
  uint64_t v94;
  float32x4_t *v95;
  _OWORD *v96;
  float32x4_t *v97;
  size_t v98;
  float *v99;
  char *v100;
  float *v101;
  BOOL v102;
  int v103;
  unsigned int v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  unint64_t v110;
  float32x4_t *v111;
  float32x4_t *v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  long double v117;
  float64x2_t v118;
  float64x2_t v119;
  void **v120;
  uint64_t v121;
  float16x4_t *v122;
  float16x4_t *v123;
  float64_t *v124;
  char *v125;
  char *v126;
  char *v127;
  BOOL v128;
  int v129;
  unsigned int v130;
  __int16 v131;
  __int16 v134;
  unint64_t v140;
  float16x4_t *v141;
  float64_t *v142;
  float16x4_t v143;
  float32x4_t v144;
  float16x4_t v145;
  float32x4_t v146;
  long double v147;
  float32x4_t *v155;
  _OWORD *v156;
  float32x4_t *v157;
  size_t v158;
  float *v159;
  char *v160;
  float *v161;
  BOOL v162;
  int v163;
  unsigned int v164;
  float v165;
  float v166;
  float v167;
  float v168;
  unint64_t v169;
  float32x4_t *v170;
  float32x4_t *v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  long double v176;
  float64x2_t v177;
  float64x2_t v178;
  float16x4_t *v179;
  char *v180;
  vImagePixelCount v181;
  vImagePixelCount v182;
  vImagePixelCount v183;
  size_t v184;
  vImagePixelCount v185;
  vImagePixelCount v186;
  char v187;
  vImagePixelCount v188;
  char *v189;
  char v190;
  __CVBuffer *v191;
  __CVBuffer *pixelBuffer;
  __CVBuffer *v193;
  size_t v194;
  _OWORD *v195;
  char *v196;
  float32x4_t *v197;
  _OWORD *v198;
  float16x4_t *v199;
  size_t v200;
  float16x4_t *v201;
  size_t v202;
  char *v203;
  size_t v204;
  size_t v205;
  char *v206;
  char *v207;
  float64x2_t v208;
  float64x2_t v209;
  float16x4_t *v210;
  float32x4_t *v211;
  long double v212;
  long double v213;
  long double v214;
  long double v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  long double v220;
  long double v221;
  long double v222;
  long double v223;
  float64x2_t __x;
  float64x2_t __xa;
  float64x2_t __xb;
  float64x2_t __xc;
  void *v228[2];
  char v229;
  vImage_Buffer v230;
  vImage_Buffer v231;
  vImage_Buffer pixelBufferOut;

  v5 = (char)a3;
  PixelFormatType = CVPixelBufferGetPixelFormatType(this);
  if (PixelFormatType == CVPixelBufferGetPixelFormatType(a2))
  {
    Width = CVPixelBufferGetWidth(this);
    if (Width == CVPixelBufferGetWidth(a2))
    {
      Height = CVPixelBufferGetHeight(this);
      if (Height == CVPixelBufferGetHeight(a2))
      {
        v11 = CVPixelBufferGetPixelFormatType(this);
        v12 = CVPixelBufferGetWidth(this);
        v13 = CVPixelBufferGetHeight(this);
        pixelBufferOut.data = 0;
        v14 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        BufferAttributes = (const __CFDictionary *)getBufferAttributes();
        if (CVPixelBufferCreate(v14, v12, v13, v11, BufferAttributes, (CVPixelBufferRef *)&pixelBufferOut))
          data = 0;
        else
          data = (__CVBuffer *)pixelBufferOut.data;
        CVPixelBufferLockBaseAddress(this, 1uLL);
        CVPixelBufferLockBaseAddress(a2, 1uLL);
        CVPixelBufferLockBaseAddress(data, 0);
        memset(&pixelBufferOut, 0, sizeof(pixelBufferOut));
        v17 = (CGRect *)MEMORY[0x24BDBF090];
        PixelBufferUtils::asVImageBuffer(this, *MEMORY[0x24BDBF090], &pixelBufferOut);
        memset(&v231, 0, sizeof(v231));
        PixelBufferUtils::asVImageBuffer(a2, *v17, &v231);
        memset(&v230, 0, sizeof(v230));
        PixelBufferUtils::asVImageBuffer(data, *v17, &v230);
        pixelBuffer = this;
        v193 = a2;
        v191 = data;
        if ((int)v11 > 1278226535)
        {
          if ((int)v11 <= 1717855599)
          {
            if ((int)v11 <= 1380410944)
            {
              if ((_DWORD)v11 != 1278226536)
              {
                v20 = 1380401729;
                goto LABEL_18;
              }
              goto LABEL_37;
            }
            if ((_DWORD)v11 == 1380410945)
            {
              calcDiffsRaw<float>((float32x4_t **)&pixelBufferOut, (float32x4_t *)v231.data, v231.rowBytes, (float32x4_t *)v230.data, v230.rowBytes, v5, a4);
              goto LABEL_95;
            }
            v28 = 1647392359;
            goto LABEL_36;
          }
          if ((int)v11 > 1751410031)
          {
            if ((_DWORD)v11 == 1751410032)
              goto LABEL_37;
            v28 = 1751411059;
LABEL_36:
            if ((_DWORD)v11 == v28)
            {
LABEL_37:
              v29 = pixelBufferOut.height;
              if (!pixelBufferOut.height)
                goto LABEL_95;
              v30 = pixelBufferOut.width;
              if (!pixelBufferOut.width)
                goto LABEL_95;
              rowBytes = v231.rowBytes;
              v32 = (char *)pixelBufferOut.data;
              v33 = pixelBufferOut.rowBytes;
              v35 = v230.rowBytes;
              v34 = (char *)v231.data;
              v36 = (char *)v230.data;
              v37 = (double)a4;
              if (LODWORD(pixelBufferOut.width))
                _ZF = (pixelBufferOut.width - 1) >> 32 == 0;
              else
                _ZF = 0;
              v39 = !_ZF;
              v187 = v39;
              v185 = pixelBufferOut.width & 0xFFFFFFFFFFFFFFFCLL;
              v181 = pixelBufferOut.height;
              v183 = 2 * (pixelBufferOut.width & 0xFFFFFFFFFFFFFFFCLL);
              v194 = pixelBufferOut.rowBytes;
              v196 = (char *)pixelBufferOut.data;
              v204 = v231.rowBytes;
              v206 = (char *)v231.data;
              v189 = (char *)v230.data;
              v202 = v230.rowBytes;
              if ((v5 & 1) != 0)
              {
                v40 = 0;
                v208 = (float64x2_t)vdupq_n_s64(0x3BC79CA10C924223uLL);
                v41 = (float16x4_t *)pixelBufferOut.data;
                v42 = (float16x4_t *)v231.data;
                v43 = (float64_t *)v230.data;
                while (1)
                {
                  v44 = &v36[v35 * v40];
                  v45 = &v32[v33 * v40];
                  v46 = &v34[rowBytes * v40];
                  v199 = v42;
                  if (v30 >= 4
                    && (v187 & 1) == 0
                    && ((unint64_t)(v44 - v45) >= 8 ? (_CF = (unint64_t)(v44 - v46) >= 8) : (_CF = 0), _CF))
                  {
                    v63 = v30 & 0xFFFFFFFFFFFFFFFCLL;
                    v46 += v183;
                    v179 = v41;
                    v64 = v42;
                    v65 = v43;
                    do
                    {
                      v66 = *v41++;
                      v67 = vcvtq_f32_f16(v66);
                      v68 = *v64++;
                      _KR00_4 = v68.i32[0];
                      __asm
                      {
                        FCVT            D3, H3
                        FCVT            D4, H1
                      }
                      _Q4.f64[1] = _D3;
                      LOWORD(_D3) = v68.i16[3];
                      __asm { FCVT            D3, H3 }
                      _H1 = v68.i16[2];
                      __asm { FCVT            D1, H1 }
                      _Q1.f64[1] = _D3;
                      v75 = vdivq_f32(vsubq_f32(vcvtq_f32_f16(v68), v67), vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(_Q4, v208)), vaddq_f64(_Q1, v208)));
                      __x = vcvt_hight_f64_f32(v75);
                      v216 = vcvtq_f64_f32(*(float32x2_t *)v75.f32);
                      v220 = pow(v216.f64[0], v37);
                      v216.f64[0] = pow(v216.f64[1], v37);
                      v212 = pow(__x.f64[0], v37);
                      v76 = pow(__x.f64[1], v37);
                      _Q2.f64[0] = v212;
                      _Q2.f64[1] = v76;
                      _Q0.f64[0] = v220;
                      _Q0.f64[1] = v216.f64[0];
                      *(float16x4_t *)&_Q0.f64[0] = vcvt_f16_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(_Q0), _Q2));
                      _H1 = WORD1(_Q0.f64[0]);
                      __asm { FCVT            S1, H1 }
                      _S1 = fabsf(_S1);
                      __asm { FCVT            S2, H0 }
                      *(float *)_Q2.f64 = fabsf(*(float *)_Q2.f64);
                      __asm
                      {
                        FCVT            H1, S1
                        FCVT            H2, S2
                      }
                      WORD1(_Q2.f64[0]) = LOWORD(_S1);
                      LOWORD(_S1) = WORD2(_Q0.f64[0]);
                      __asm { FCVT            S1, H1 }
                      _S1 = fabsf(_S1);
                      __asm { FCVT            H1, S1 }
                      WORD2(_Q2.f64[0]) = LOWORD(_S1);
                      LOWORD(_Q0.f64[0]) = HIWORD(_Q0.f64[0]);
                      __asm { FCVT            S0, H0 }
                      *(float *)_Q0.f64 = fabsf(*(float *)_Q0.f64);
                      __asm { FCVT            H0, S0 }
                      HIWORD(_Q2.f64[0]) = LOWORD(_Q0.f64[0]);
                      *v65++ = _Q2.f64[0];
                      v63 -= 4;
                    }
                    while (v63);
                    v41 = v179;
                    v29 = v181;
                    v36 = v189;
                    if (v30 == v185)
                      goto LABEL_56;
                    v45 += v183;
                    v44 += v183;
                    v48 = v185;
                  }
                  else
                  {
                    v48 = 0;
                  }
                  v49 = v48 + 1;
                  do
                  {
                    v50 = *(_WORD *)v45;
                    v45 += 2;
                    _H0 = v50;
                    __asm { FCVT            S0, H0 }
                    v55 = *(_WORD *)v46;
                    v46 += 2;
                    _H1 = v55;
                    __asm
                    {
                      FCVT            S2, H1
                      FCVT            D1, H1
                    }
                    *(float *)&_D1 = _D1 + 1.0e-20;
                    _S0 = pow((float)((float)(_S2 - _S0) / *(float *)&_D1), v37);
                    __asm
                    {
                      FCVT            H0, S0
                      FCVT            S0, H0
                    }
                    _S0 = fabsf(_S0);
                    __asm { FCVT            H0, S0 }
                    *(_WORD *)v44 = LOWORD(_S0);
                    v44 += 2;
                    v62 = v30 > v49++;
                  }
                  while (v62);
LABEL_56:
                  ++v40;
                  v35 = v202;
                  rowBytes = v204;
                  v43 = (float64_t *)((char *)v43 + v202);
                  v32 = v196;
                  v42 = (float16x4_t *)((char *)v199 + v204);
                  v33 = v194;
                  v41 = (float16x4_t *)((char *)v41 + v194);
                  v34 = v206;
                  if (v29 <= v40)
                    goto LABEL_95;
                }
              }
              v121 = 0;
              v122 = (float16x4_t *)pixelBufferOut.data;
              v123 = (float16x4_t *)v231.data;
              v124 = (float64_t *)v230.data;
              while (1)
              {
                v125 = &v36[v35 * v121];
                v126 = &v32[v33 * v121];
                v127 = &v34[rowBytes * v121];
                v210 = v122;
                v201 = v123;
                if (v30 >= 4
                  && (v187 & 1) == 0
                  && ((unint64_t)(v125 - v126) >= 8 ? (v128 = (unint64_t)(v125 - v127) >= 8) : (v128 = 0),
                      v128))
                {
                  v140 = v30 & 0xFFFFFFFFFFFFFFFCLL;
                  v127 += v183;
                  v141 = v123;
                  v142 = v124;
                  do
                  {
                    v143 = *v122++;
                    v144 = vcvtq_f32_f16(v143);
                    v145 = *v141++;
                    v146 = vsubq_f32(vcvtq_f32_f16(v145), v144);
                    __xb = vcvt_hight_f64_f32(v146);
                    v218 = vcvtq_f64_f32(*(float32x2_t *)v146.f32);
                    v222 = pow(v218.f64[0], v37);
                    v218.f64[0] = pow(v218.f64[1], v37);
                    v214 = pow(__xb.f64[0], v37);
                    v147 = pow(__xb.f64[1], v37);
                    _Q2.f64[0] = v214;
                    _Q2.f64[1] = v147;
                    _Q0.f64[0] = v222;
                    _Q0.f64[1] = v218.f64[0];
                    *(float16x4_t *)&_Q0.f64[0] = vcvt_f16_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(_Q0), _Q2));
                    _H1 = WORD1(_Q0.f64[0]);
                    __asm { FCVT            S1, H1 }
                    _S1 = fabsf(_S1);
                    __asm { FCVT            S2, H0 }
                    *(float *)_Q2.f64 = fabsf(*(float *)_Q2.f64);
                    __asm
                    {
                      FCVT            H1, S1
                      FCVT            H2, S2
                    }
                    WORD1(_Q2.f64[0]) = LOWORD(_S1);
                    LOWORD(_S1) = WORD2(_Q0.f64[0]);
                    __asm { FCVT            S1, H1 }
                    _S1 = fabsf(_S1);
                    __asm { FCVT            H1, S1 }
                    WORD2(_Q2.f64[0]) = LOWORD(_S1);
                    LOWORD(_Q0.f64[0]) = HIWORD(_Q0.f64[0]);
                    __asm { FCVT            S0, H0 }
                    *(float *)_Q0.f64 = fabsf(*(float *)_Q0.f64);
                    __asm { FCVT            H0, S0 }
                    HIWORD(_Q2.f64[0]) = LOWORD(_Q0.f64[0]);
                    *v142++ = _Q2.f64[0];
                    v140 -= 4;
                  }
                  while (v140);
                  v29 = v181;
                  v33 = v194;
                  v32 = v196;
                  if (v30 == v185)
                    goto LABEL_106;
                  v126 += v183;
                  v125 += v183;
                  v129 = v185;
                }
                else
                {
                  v129 = 0;
                }
                v130 = v129 + 1;
                do
                {
                  v131 = *(_WORD *)v126;
                  v126 += 2;
                  _H0 = v131;
                  __asm { FCVT            S0, H0 }
                  v134 = *(_WORD *)v127;
                  v127 += 2;
                  _H1 = v134;
                  __asm { FCVT            S1, H1 }
                  _S0 = pow((float)(_S1 - _S0), v37);
                  __asm
                  {
                    FCVT            H0, S0
                    FCVT            S0, H0
                  }
                  _S0 = fabsf(_S0);
                  __asm { FCVT            H0, S0 }
                  *(_WORD *)v125 = LOWORD(_S0);
                  v125 += 2;
                  v62 = v30 > v130++;
                }
                while (v62);
LABEL_106:
                ++v121;
                v35 = v202;
                rowBytes = v204;
                v124 = (float64_t *)((char *)v124 + v202);
                v123 = (float16x4_t *)((char *)v201 + v204);
                v34 = v206;
                v122 = (float16x4_t *)((char *)v210 + v33);
                v36 = v189;
                if (v29 <= v121)
                  goto LABEL_95;
              }
            }
LABEL_90:
            PixelBufferUtils::pixelFormatAsString(v11, (char *)v228);
            if (v229 >= 0)
              v120 = v228;
            else
              v120 = (void **)v228[0];
            NSLog(CFSTR("%s:%d - ERROR - pixel format %08x (\"%s\") not supported\n"), "errorsPixelBuffer", 2434, v11, v120);
            if (v229 < 0)
              operator delete(v228[0]);
            goto LABEL_95;
          }
          if ((_DWORD)v11 == 1717855600)
            goto LABEL_65;
          v23 = 1717856627;
          goto LABEL_32;
        }
        if ((int)v11 <= 875704437)
        {
          if ((_DWORD)v11 == 32)
          {
LABEL_27:
            calcDiffsRaw<unsigned char>(&pixelBufferOut, &v231, &v230, v5, a4, 4, v18, v19);
            goto LABEL_95;
          }
          if ((_DWORD)v11 == 843264104)
          {
            calcDiffsRaw<half>((float16x4_t **)&pixelBufferOut, (float16x4_t *)v231.data, v231.rowBytes, (float64_t *)v230.data, v230.rowBytes, v5, a4);
            goto LABEL_95;
          }
          if ((_DWORD)v11 != 875704422)
            goto LABEL_90;
        }
        else
        {
          if ((int)v11 > 1278226487)
          {
            if ((_DWORD)v11 == 1278226488)
            {
              calcDiffsRaw<unsigned char>(&pixelBufferOut, &v231, &v230, v5, a4, 1, v18, v19);
LABEL_65:
              v84 = pixelBufferOut.height;
              if (!pixelBufferOut.height)
                goto LABEL_95;
              v85 = pixelBufferOut.width;
              if (!pixelBufferOut.width)
                goto LABEL_95;
              v86 = v231.rowBytes;
              v87 = (char *)pixelBufferOut.data;
              v182 = pixelBufferOut.height;
              v184 = pixelBufferOut.rowBytes;
              v89 = v230.rowBytes;
              v88 = (char *)v231.data;
              v90 = (char *)v230.data;
              v91 = (double)a4;
              if (LODWORD(pixelBufferOut.width))
                v92 = (pixelBufferOut.width - 1) >> 32 == 0;
              else
                v92 = 0;
              v93 = !v92;
              v190 = v93;
              v188 = pixelBufferOut.width & 0xFFFFFFFFFFFFFFFCLL;
              v186 = 4 * (pixelBufferOut.width & 0xFFFFFFFFFFFFFFFCLL);
              v180 = (char *)pixelBufferOut.data;
              v205 = v231.rowBytes;
              v207 = (char *)v231.data;
              v200 = v230.rowBytes;
              v203 = (char *)v230.data;
              v94 = 0;
              if ((v5 & 1) != 0)
              {
                v209 = (float64x2_t)vdupq_n_s64(0x3BC79CA10C924223uLL);
                v95 = (float32x4_t *)pixelBufferOut.data;
                v96 = v231.data;
                v97 = (float32x4_t *)v230.data;
                v98 = pixelBufferOut.rowBytes;
                while (1)
                {
                  v99 = (float *)&v90[v89 * v94];
                  v100 = &v87[v98 * v94];
                  v101 = (float *)&v88[v86 * v94];
                  v195 = v96;
                  v197 = v95;
                  if (v85 >= 4
                    && (v190 & 1) == 0
                    && ((unint64_t)((char *)v99 - v100) >= 0x10
                      ? (v102 = (unint64_t)((char *)v99 - (char *)v101) >= 0x10)
                      : (v102 = 0),
                        v102))
                  {
                    v110 = v85 & 0xFFFFFFFFFFFFFFFCLL;
                    v101 = (float *)((char *)v101 + v186);
                    v111 = (float32x4_t *)v96;
                    v112 = v97;
                    do
                    {
                      v113 = *v95++;
                      v114 = v113;
                      v115 = *v111++;
                      v116 = vdivq_f32(vsubq_f32(v115, v114), vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v115.f32), v209)), vaddq_f64(vcvt_hight_f64_f32(v115), v209)));
                      __xa = vcvt_hight_f64_f32(v116);
                      v217 = vcvtq_f64_f32(*(float32x2_t *)v116.f32);
                      v221 = pow(v217.f64[0], v91);
                      v217.f64[0] = pow(v217.f64[1], v91);
                      v213 = pow(__xa.f64[0], v91);
                      v117 = pow(__xa.f64[1], v91);
                      v118.f64[0] = v213;
                      v118.f64[1] = v117;
                      v119.f64[0] = v221;
                      v119.f64[1] = v217.f64[0];
                      *v112++ = vabsq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v119), v118));
                      v110 -= 4;
                    }
                    while (v110);
                    v87 = v180;
                    v84 = v182;
                    v98 = v184;
                    if (v85 == v188)
                      goto LABEL_84;
                    v100 += v186;
                    v99 = (float *)((char *)v99 + v186);
                    v103 = v188;
                  }
                  else
                  {
                    v103 = 0;
                  }
                  v104 = v103 + 1;
                  do
                  {
                    v105 = *(float *)v100;
                    v100 += 4;
                    v106 = v105;
                    v107 = *v101++;
                    v108 = v107 + 1.0e-20;
                    v109 = pow((float)((float)(v107 - v106) / v108), v91);
                    *v99++ = fabsf(v109);
                    v62 = v85 > v104++;
                  }
                  while (v62);
LABEL_84:
                  ++v94;
                  v89 = v200;
                  v97 = (float32x4_t *)((char *)v97 + v200);
                  v86 = v205;
                  v88 = v207;
                  v96 = (_OWORD *)((char *)v195 + v205);
                  v95 = (float32x4_t *)((char *)v197 + v98);
                  v90 = v203;
                  if (v84 <= v94)
                    goto LABEL_95;
                }
              }
              v155 = (float32x4_t *)pixelBufferOut.data;
              v156 = v231.data;
              v157 = (float32x4_t *)v230.data;
              v158 = pixelBufferOut.rowBytes;
              while (1)
              {
                v159 = (float *)&v90[v89 * v94];
                v160 = &v87[v158 * v94];
                v161 = (float *)&v88[v86 * v94];
                v211 = v155;
                v198 = v156;
                if (v85 >= 8
                  && (v190 & 1) == 0
                  && ((unint64_t)((char *)v159 - v160) >= 0x10
                    ? (v162 = (unint64_t)((char *)v159 - (char *)v161) >= 0x10)
                    : (v162 = 0),
                      v162))
                {
                  v169 = v85 & 0xFFFFFFFFFFFFFFFCLL;
                  v161 = (float *)((char *)v161 + v186);
                  v170 = (float32x4_t *)v156;
                  v171 = v157;
                  do
                  {
                    v172 = *v155++;
                    v173 = v172;
                    v174 = *v170++;
                    v175 = vsubq_f32(v174, v173);
                    __xc = vcvt_hight_f64_f32(v175);
                    v219 = vcvtq_f64_f32(*(float32x2_t *)v175.f32);
                    v223 = pow(v219.f64[0], v91);
                    v219.f64[0] = pow(v219.f64[1], v91);
                    v215 = pow(__xc.f64[0], v91);
                    v176 = pow(__xc.f64[1], v91);
                    v177.f64[0] = v215;
                    v177.f64[1] = v176;
                    v178.f64[0] = v223;
                    v178.f64[1] = v219.f64[0];
                    *v171++ = vabsq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v178), v177));
                    v169 -= 4;
                  }
                  while (v169);
                  v87 = v180;
                  v84 = v182;
                  v158 = v184;
                  if (v85 == v188)
                    goto LABEL_122;
                  v160 += v186;
                  v159 = (float *)((char *)v159 + v186);
                  v163 = v188;
                }
                else
                {
                  v163 = 0;
                }
                v164 = v163 + 1;
                do
                {
                  v165 = *(float *)v160;
                  v160 += 4;
                  v166 = v165;
                  v167 = *v161++;
                  v168 = pow((float)(v167 - v166), v91);
                  *v159++ = fabsf(v168);
                  v62 = v85 > v164++;
                }
                while (v62);
LABEL_122:
                ++v94;
                v89 = v200;
                v157 = (float32x4_t *)((char *)v157 + v200);
                v86 = v205;
                v88 = v207;
                v156 = (_OWORD *)((char *)v198 + v205);
                v155 = (float32x4_t *)((char *)v211 + v158);
                v90 = v203;
                if (v84 <= v94)
                  goto LABEL_95;
              }
            }
            v23 = 1278226534;
LABEL_32:
            if ((_DWORD)v11 != v23)
              goto LABEL_90;
            goto LABEL_65;
          }
          if ((_DWORD)v11 != 875704438)
          {
            v20 = 1111970369;
LABEL_18:
            if ((_DWORD)v11 != v20)
              goto LABEL_90;
            goto LABEL_27;
          }
        }
        PixelBufferUtils::asVImageBuffer(this, 0, *v17, &pixelBufferOut);
        PixelBufferUtils::asVImageBuffer(a2, 0, *v17, &v231);
        calcDiffsRaw<unsigned char>(&pixelBufferOut, &v231, &v230, v5, a4, 1, v24, v25);
        PixelBufferUtils::asVImageBuffer(this, (__CVBuffer *)1, *v17, &pixelBufferOut);
        PixelBufferUtils::asVImageBuffer(a2, (__CVBuffer *)1, *v17, &v231);
        calcDiffsRaw<unsigned char>(&pixelBufferOut, &v231, &v230, v5, a4, 2, v26, v27);
LABEL_95:
        CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
        CVPixelBufferUnlockBaseAddress(v193, 1uLL);
        v21 = v191;
        CVPixelBufferUnlockBaseAddress(v191, 0);
        return v21;
      }
    }
  }
  return 0;
}

void sub_20B6C0E88(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 209) < 0)
    operator delete(*(void **)(v1 - 232));
  _Unwind_Resume(exception_object);
}

void calcDiffsRaw<unsigned char>(_QWORD *a1, _QWORD *a2, _QWORD *a3, char a4, int a5, uint64_t a6, float a7, float a8)
{
  unint64_t v8;
  double v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  float v28;
  float v29;

  v8 = a1[1];
  if (v8)
  {
    v13 = (double)a5;
    v14 = a1[2];
    LODWORD(v15) = 0;
    if ((a4 & 1) != 0)
    {
      do
      {
        v22 = v15;
        if (v14 * a6)
        {
          v23 = 0;
          v24 = *a1 + a1[3] * v15;
          v25 = *a2 + a2[3] * v15;
          v26 = *a3 + a3[3] * v15;
          do
          {
            LOBYTE(a7) = *(_BYTE *)(v24 + v23);
            v27 = *(unsigned __int8 *)(v25 + v23);
            v28 = (double)v27 + 1.0e-20;
            v29 = pow((float)((float)((float)v27 - (float)LODWORD(a7)) / v28), v13);
            a7 = fabsf(v29);
            *(_BYTE *)(v26 + v23++) = (int)a7;
            v14 = a1[2];
          }
          while (v14 * a6 > (unint64_t)v23);
          v8 = a1[1];
        }
        v15 = (v22 + 1);
      }
      while (v8 > v15);
    }
    else
    {
      do
      {
        v16 = v15;
        if (v14 * a6)
        {
          v17 = 0;
          v18 = *a1 + a1[3] * v15;
          v19 = *a2 + a2[3] * v15;
          v20 = *a3 + a3[3] * v15;
          do
          {
            LOBYTE(a7) = *(_BYTE *)(v18 + v17);
            LOBYTE(a8) = *(_BYTE *)(v19 + v17);
            v21 = pow((float)((float)LODWORD(a8) - (float)LODWORD(a7)), v13);
            a7 = fabsf(v21);
            *(_BYTE *)(v20 + v17++) = (int)a7;
            v14 = a1[2];
          }
          while (v14 * a6 > (unint64_t)v17);
          v8 = a1[1];
        }
        v15 = (v16 + 1);
      }
      while (v8 > v15);
    }
  }
}

void calcDiffsRaw<half>(float16x4_t **a1, float16x4_t *a2, uint64_t a3, float64_t *a4, uint64_t a5, char a6, int a7)
{
  unint64_t v7;
  uint64_t v8;
  float64_t *v9;
  uint64_t v10;
  float16x4_t *v11;
  float16x4_t *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char v17;
  float16x4_t *v18;
  float16x4_t *v19;
  float64_t *v20;
  char *v21;
  char *v22;
  char *v23;
  int v25;
  unsigned int v26;
  __int16 v27;
  __int16 v32;
  BOOL v39;
  float16x4_t *v40;
  float16x4_t *v41;
  float64_t *v42;
  unint64_t v43;
  float16x4_t v44;
  float32x4_t v45;
  float16x4_t v46;
  float32x4_t v53;
  long double v54;
  uint64_t v62;
  uint64_t v63;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v81;
  float16x4_t *v82;
  float16x4_t *v83;
  float64_t *v84;
  char *v85;
  char *v86;
  char *v87;
  BOOL v88;
  int v89;
  float16x4_t *v90;
  float16x4_t *v91;
  float64_t *v92;
  unint64_t v93;
  float16x4_t v94;
  float32x4_t v95;
  float16x4_t v96;
  float32x4_t v97;
  long double v98;
  unsigned int v106;
  __int16 v107;
  __int16 v110;
  unint64_t v116;
  char v120;
  unint64_t v121;
  uint64_t v122;
  float64_t *v123;
  uint64_t v124;
  float16x4_t *v125;
  float16x4_t *v126;
  float64_t *v127;
  uint64_t v128;
  float16x4_t *v129;
  unint64_t v130;
  float64x2_t v131;
  float16x4_t *v132;
  long double v133;
  long double v134;
  float64x2_t v135;
  float64x2_t v136;
  long double v137;
  long double v138;
  float64x2_t v139;
  float64x2_t v140;

  v130 = (unint64_t)a1[1];
  if (!v130)
    return;
  v7 = 2 * (_QWORD)a1[2];
  if (!v7)
    return;
  v8 = a5;
  v9 = a4;
  v10 = a3;
  v11 = a2;
  v12 = *a1;
  v13 = (uint64_t)a1[3];
  v14 = (double)a7;
  v122 = v13;
  if ((a6 & 1) != 0)
  {
    v15 = 0;
    if ((_DWORD)v7)
      _ZF = (v7 - 1) >> 32 == 0;
    else
      _ZF = 0;
    v17 = !_ZF;
    v120 = v17;
    v116 = 2 * (v7 & 0xFFFFFFFFFFFFFFFCLL);
    v18 = *a1;
    v19 = a2;
    v20 = a4;
    v131 = (float64x2_t)vdupq_n_s64(0x3BC79CA10C924223uLL);
    while (1)
    {
      v21 = (char *)v9 + v15 * v8;
      v22 = (char *)v12 + v13 * v15;
      v23 = (char *)v11 + v15 * v10;
      v126 = v18;
      v128 = v15;
      v123 = v20;
      v125 = v19;
      if (v7 >= 4
        && (v120 & 1) == 0
        && ((unint64_t)(v21 - v22) >= 8 ? (_CF = (unint64_t)(v21 - v23) >= 8) : (_CF = 0), _CF))
      {
        v23 += v116;
        v40 = v18;
        v41 = v19;
        v42 = v20;
        v43 = v7 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          v44 = *v40++;
          v45 = vcvtq_f32_f16(v44);
          v46 = *v41++;
          _KR00_4 = v46.i32[0];
          __asm
          {
            FCVT            D3, H3
            FCVT            D4, H1
          }
          _Q4.f64[1] = _D3;
          LOWORD(_D3) = v46.i16[3];
          __asm { FCVT            D3, H3 }
          _H1 = v46.i16[2];
          __asm { FCVT            D1, H1 }
          _Q1.f64[1] = _D3;
          v53 = vdivq_f32(vsubq_f32(vcvtq_f32_f16(v46), v45), vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(_Q4, v131)), vaddq_f64(_Q1, v131)));
          v139 = vcvt_hight_f64_f32(v53);
          v135 = vcvtq_f64_f32(*(float32x2_t *)v53.f32);
          v137 = pow(v135.f64[0], v14);
          v135.f64[0] = pow(v135.f64[1], v14);
          v133 = pow(v139.f64[0], v14);
          v54 = pow(v139.f64[1], v14);
          _Q2.f64[0] = v133;
          _Q2.f64[1] = v54;
          _Q0.f64[0] = v137;
          _Q0.f64[1] = v135.f64[0];
          *(float16x4_t *)&_Q0.f64[0] = vcvt_f16_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(_Q0), _Q2));
          _H1 = WORD1(_Q0.f64[0]);
          __asm { FCVT            S1, H1 }
          _S1 = fabsf(_S1);
          __asm { FCVT            S2, H0 }
          *(float *)_Q2.f64 = fabsf(*(float *)_Q2.f64);
          __asm
          {
            FCVT            H1, S1
            FCVT            H2, S2
          }
          WORD1(_Q2.f64[0]) = LOWORD(_S1);
          LOWORD(_S1) = WORD2(_Q0.f64[0]);
          __asm { FCVT            S1, H1 }
          _S1 = fabsf(_S1);
          __asm { FCVT            H1, S1 }
          WORD2(_Q2.f64[0]) = LOWORD(_S1);
          LOWORD(_Q0.f64[0]) = HIWORD(_Q0.f64[0]);
          __asm { FCVT            S0, H0 }
          *(float *)_Q0.f64 = fabsf(*(float *)_Q0.f64);
          __asm { FCVT            H0, S0 }
          HIWORD(_Q2.f64[0]) = LOWORD(_Q0.f64[0]);
          *v42++ = _Q2.f64[0];
          v43 -= 4;
        }
        while (v43);
        v8 = a5;
        v10 = a3;
        v9 = a4;
        if (v7 == (v7 & 0xFFFFFFFFFFFFFFFCLL))
          goto LABEL_20;
        v22 += v116;
        v21 += v116;
        v25 = v7 & 0xFFFFFFFC;
      }
      else
      {
        v25 = 0;
      }
      v26 = v25 + 1;
      do
      {
        v27 = *(_WORD *)v22;
        v22 += 2;
        _H0 = v27;
        __asm { FCVT            S0, H0 }
        v32 = *(_WORD *)v23;
        v23 += 2;
        _H1 = v32;
        __asm
        {
          FCVT            S2, H1
          FCVT            D1, H1
        }
        *(float *)&_D1 = _D1 + 1.0e-20;
        _S0 = pow((float)((float)(_S2 - _S0) / *(float *)&_D1), v14);
        __asm
        {
          FCVT            H0, S0
          FCVT            S0, H0
        }
        _S0 = fabsf(_S0);
        __asm { FCVT            H0, S0 }
        *(_WORD *)v21 = LOWORD(_S0);
        v21 += 2;
        v39 = v7 > v26++;
      }
      while (v39);
LABEL_20:
      v15 = v128 + 1;
      v20 = (float64_t *)((char *)v123 + v8);
      v19 = (float16x4_t *)((char *)v125 + v10);
      v13 = v122;
      v18 = (float16x4_t *)((char *)v126 + v122);
      if (v130 <= (v128 + 1))
        return;
    }
  }
  if (v7 <= 3)
  {
    v62 = 0;
    do
    {
      v63 = 0;
      do
      {
        _H0 = v12->i16[v63];
        __asm { FCVT            S0, H0 }
        _H1 = v11->i16[v63];
        __asm { FCVT            S1, H1 }
        _S0 = pow((float)(_S1 - _S0), v14);
        __asm
        {
          FCVT            H0, S0
          FCVT            S0, H0
        }
        _S0 = fabsf(_S0);
        __asm { FCVT            H0, S0 }
        *((_WORD *)v9 + v63++) = LOWORD(_S0);
      }
      while (v7 > v63);
      ++v62;
      v12 = (float16x4_t *)((char *)v12 + v13);
      v11 = (float16x4_t *)((char *)v11 + v10);
      v9 = (float64_t *)((char *)v9 + v8);
    }
    while (v130 > v62);
    return;
  }
  if ((_DWORD)v7)
    v71 = (v7 - 1) >> 32 == 0;
  else
    v71 = 0;
  if (v71)
  {
    v81 = 0;
    v121 = 2 * (v7 & 0xFFFFFFFFFFFFFFFCLL);
    v82 = *a1;
    v83 = a2;
    v84 = a4;
    while (1)
    {
      v85 = (char *)v9 + v81 * v8;
      v86 = (char *)v12 + v13 * v81;
      v87 = (char *)v11 + v81 * v10;
      v88 = (unint64_t)(v85 - v86) >= 8 && (unint64_t)(v85 - v87) >= 8;
      v132 = v82;
      v127 = v84;
      v129 = v83;
      if (v88)
      {
        v124 = v81;
        v87 += v121;
        v90 = v82;
        v91 = v83;
        v92 = v84;
        v93 = v7 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          v94 = *v90++;
          v95 = vcvtq_f32_f16(v94);
          v96 = *v91++;
          v97 = vsubq_f32(vcvtq_f32_f16(v96), v95);
          v140 = vcvt_hight_f64_f32(v97);
          v136 = vcvtq_f64_f32(*(float32x2_t *)v97.f32);
          v138 = pow(v136.f64[0], v14);
          v136.f64[0] = pow(v136.f64[1], v14);
          v134 = pow(v140.f64[0], v14);
          v98 = pow(v140.f64[1], v14);
          _Q2.f64[0] = v134;
          _Q2.f64[1] = v98;
          _Q0.f64[0] = v138;
          _Q0.f64[1] = v136.f64[0];
          *(float16x4_t *)&_Q0.f64[0] = vcvt_f16_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(_Q0), _Q2));
          _H1 = WORD1(_Q0.f64[0]);
          __asm { FCVT            S1, H1 }
          _S1 = fabsf(_S1);
          __asm { FCVT            S2, H0 }
          *(float *)_Q2.f64 = fabsf(*(float *)_Q2.f64);
          __asm
          {
            FCVT            H1, S1
            FCVT            H2, S2
          }
          WORD1(_Q2.f64[0]) = LOWORD(_S1);
          LOWORD(_S1) = WORD2(_Q0.f64[0]);
          __asm { FCVT            S1, H1 }
          _S1 = fabsf(_S1);
          __asm { FCVT            H1, S1 }
          WORD2(_Q2.f64[0]) = LOWORD(_S1);
          LOWORD(_Q0.f64[0]) = HIWORD(_Q0.f64[0]);
          __asm { FCVT            S0, H0 }
          *(float *)_Q0.f64 = fabsf(*(float *)_Q0.f64);
          __asm { FCVT            H0, S0 }
          HIWORD(_Q2.f64[0]) = LOWORD(_Q0.f64[0]);
          *v92++ = _Q2.f64[0];
          v93 -= 4;
        }
        while (v93);
        v81 = v124;
        v8 = a5;
        v13 = v122;
        if (v7 == (v7 & 0xFFFFFFFFFFFFFFFCLL))
          goto LABEL_42;
        v86 += v121;
        v85 += v121;
        v89 = v7 & 0xFFFFFFFC;
      }
      else
      {
        v89 = 0;
      }
      v106 = v89 + 1;
      do
      {
        v107 = *(_WORD *)v86;
        v86 += 2;
        _H0 = v107;
        __asm { FCVT            S0, H0 }
        v110 = *(_WORD *)v87;
        v87 += 2;
        _H1 = v110;
        __asm { FCVT            S1, H1 }
        _S0 = pow((float)(_S1 - _S0), v14);
        __asm
        {
          FCVT            H0, S0
          FCVT            S0, H0
        }
        _S0 = fabsf(_S0);
        __asm { FCVT            H0, S0 }
        *(_WORD *)v85 = LOWORD(_S0);
        v85 += 2;
        v39 = v7 > v106++;
      }
      while (v39);
LABEL_42:
      ++v81;
      v84 = (float64_t *)((char *)v127 + v8);
      v10 = a3;
      v9 = a4;
      v83 = (float16x4_t *)((char *)v129 + a3);
      v82 = (float16x4_t *)((char *)v132 + v13);
      if (v130 <= v81)
        return;
    }
  }
  v72 = 0;
  do
  {
    v73 = 0;
    do
    {
      _H0 = v12->i16[v73];
      __asm { FCVT            S0, H0 }
      _H1 = v11->i16[v73];
      __asm { FCVT            S1, H1 }
      _S0 = pow((float)(_S1 - _S0), v14);
      __asm
      {
        FCVT            H0, S0
        FCVT            S0, H0
      }
      _S0 = fabsf(_S0);
      __asm { FCVT            H0, S0 }
      *((_WORD *)v9 + v73++) = LOWORD(_S0);
    }
    while (v7 > v73);
    ++v72;
    v12 = (float16x4_t *)((char *)v12 + v13);
    v11 = (float16x4_t *)((char *)v11 + v10);
    v9 = (float64_t *)((char *)v9 + v8);
  }
  while (v130 > v72);
}

void calcDiffsRaw<float>(float32x4_t **a1, float32x4_t *a2, uint64_t a3, float32x4_t *a4, uint64_t a5, char a6, int a7)
{
  unint64_t v7;
  float32x4_t *v8;
  float32x4_t *v9;
  double v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  float32x4_t *v14;
  float32x4_t *v15;
  float32x4_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  float32x4_t *v25;
  float32x4_t *v26;
  float32x4_t *v27;
  unint64_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  long double v33;
  float64x2_t v34;
  float64x2_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  float v42;
  float32x4_t *v43;
  float32x4_t *v44;
  float32x4_t *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  BOOL v49;
  float32x4_t *v50;
  float32x4_t *v51;
  float32x4_t *v52;
  unint64_t v53;
  uint64_t v54;
  float v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  long double v60;
  float64x2_t v61;
  float64x2_t v62;
  int v63;
  unint64_t v65;
  float32x4_t *v66;
  float32x4_t *v67;
  float64x2_t v70;
  long double v71;
  long double v72;
  float64x2_t v73;
  float64x2_t v74;
  long double v75;
  long double v76;
  float64x2_t __x;
  float64x2_t __xa;

  v65 = (unint64_t)a1[1];
  v66 = a2;
  if (v65)
  {
    v7 = 4 * (_QWORD)a1[2];
    if (v7)
    {
      v8 = a4;
      v9 = *a1;
      v67 = a1[3];
      v10 = (double)a7;
      if ((a6 & 1) != 0)
      {
        v11 = 0;
        if ((_DWORD)v7)
          v12 = (v7 - 1) >> 32 == 0;
        else
          v12 = 0;
        v13 = !v12;
        v63 = v13;
        v70 = (float64x2_t)vdupq_n_s64(0x3BC79CA10C924223uLL);
        v14 = *a1;
        v15 = a2;
        v16 = a4;
        do
        {
          if (!v63
            && ((v17 = (uint64_t)v8 + v11 * a5,
                 v18 = v17 - ((_QWORD)v9 + (_QWORD)v67 * v11),
                 v19 = v17 - ((_QWORD)v66 + v11 * a3),
                 v18 >= 0x10)
              ? (v20 = v19 >= 0x10)
              : (v20 = 0),
                v20))
          {
            v25 = v14;
            v26 = v15;
            v27 = v16;
            v28 = v7;
            do
            {
              v29 = *v25++;
              v30 = v29;
              v31 = *v26++;
              v32 = vdivq_f32(vsubq_f32(v31, v30), vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v31.f32), v70)), vaddq_f64(vcvt_hight_f64_f32(v31), v70)));
              __x = vcvt_hight_f64_f32(v32);
              v73 = vcvtq_f64_f32(*(float32x2_t *)v32.f32);
              v75 = pow(v73.f64[0], v10);
              v73.f64[0] = pow(v73.f64[1], v10);
              v71 = pow(__x.f64[0], v10);
              v33 = pow(__x.f64[1], v10);
              v34.f64[0] = v71;
              v34.f64[1] = v33;
              v35.f64[0] = v75;
              v35.f64[1] = v73.f64[0];
              *v27++ = vabsq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v35), v34));
              v28 -= 4;
            }
            while (v28);
          }
          else
          {
            v21 = 0;
            do
            {
              v22 = v15->f32[v21];
              v23 = v22 + 1.0e-20;
              v24 = pow((float)((float)(v22 - v14->f32[v21]) / v23), v10);
              v16->f32[v21++] = fabsf(v24);
            }
            while (v7 > v21);
          }
          ++v11;
          v16 = (float32x4_t *)((char *)v16 + a5);
          v15 = (float32x4_t *)((char *)v15 + a3);
          v14 = (float32x4_t *)((char *)v67 + (_QWORD)v14);
          v8 = a4;
        }
        while (v65 > v11);
      }
      else if (v7 > 7)
      {
        v39 = 0;
        if ((_DWORD)v7)
          v40 = (v7 - 1) >> 32 == 0;
        else
          v40 = 0;
        if (v40)
        {
          v43 = *a1;
          v44 = a2;
          v45 = a4;
          do
          {
            v46 = (uint64_t)v8 + v39 * a5;
            v47 = v46 - ((_QWORD)v9 + (_QWORD)v67 * v39);
            v48 = v46 - ((_QWORD)v66 + v39 * a3);
            v49 = v47 >= 0x10 && v48 >= 0x10;
            v50 = v43;
            v51 = v44;
            v52 = v45;
            v53 = v7;
            if (v49)
            {
              do
              {
                v56 = *v50++;
                v57 = v56;
                v58 = *v51++;
                v59 = vsubq_f32(v58, v57);
                __xa = vcvt_hight_f64_f32(v59);
                v74 = vcvtq_f64_f32(*(float32x2_t *)v59.f32);
                v76 = pow(v74.f64[0], v10);
                v74.f64[0] = pow(v74.f64[1], v10);
                v72 = pow(__xa.f64[0], v10);
                v60 = pow(__xa.f64[1], v10);
                v61.f64[0] = v72;
                v61.f64[1] = v60;
                v62.f64[0] = v76;
                v62.f64[1] = v74.f64[0];
                *v52++ = vabsq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v62), v61));
                v53 -= 4;
              }
              while (v53);
            }
            else
            {
              v54 = 0;
              do
              {
                v55 = pow((float)(v44->f32[v54] - v43->f32[v54]), v10);
                v45->f32[v54++] = fabsf(v55);
              }
              while (v7 > v54);
            }
            ++v39;
            v45 = (float32x4_t *)((char *)v45 + a5);
            v44 = (float32x4_t *)((char *)v44 + a3);
            v43 = (float32x4_t *)((char *)v67 + (_QWORD)v43);
            v8 = a4;
          }
          while (v65 > v39);
        }
        else
        {
          do
          {
            v41 = 0;
            do
            {
              v42 = pow((float)(v66->f32[v41] - v9->f32[v41]), v10);
              v8->f32[v41++] = fabsf(v42);
            }
            while (v7 > v41);
            ++v39;
            v9 = (float32x4_t *)((char *)v67 + (_QWORD)v9);
            v66 = (float32x4_t *)((char *)v66 + a3);
            v8 = (float32x4_t *)((char *)v8 + a5);
          }
          while (v65 > v39);
        }
      }
      else
      {
        v36 = 0;
        do
        {
          v37 = 0;
          do
          {
            v38 = pow((float)(v66->f32[v37] - v9->f32[v37]), v10);
            v8->f32[v37++] = fabsf(v38);
          }
          while (v7 > v37);
          ++v36;
          v9 = (float32x4_t *)((char *)v67 + (_QWORD)v9);
          v66 = (float32x4_t *)((char *)v66 + a3);
          v8 = (float32x4_t *)((char *)v8 + a5);
        }
        while (v65 > v36);
      }
    }
  }
}

uint64_t PixelBufferUtils::scaleConvertRotatePixelBuffer(PixelBufferUtils *this, __CVBuffer *a2, CVPixelBufferRef pixelBuffer, CGRect a4, CVPixelBufferRef *a5, __CVBuffer **a6, __CVBuffer **a7)
{
  double height;
  double width;
  double y;
  double x;
  unsigned int v12;
  CVPixelBufferRef *p_texture;
  CVPixelBufferRef *v16;
  size_t v17;
  size_t v18;
  signed int v19;
  OSType v20;
  double v21;
  double v22;
  size_t v23;
  size_t v24;
  signed int v25;
  _BOOL4 v26;
  uint64_t v27;
  int v28;
  __CVBuffer *v29;
  __CVBuffer **v30;
  __CVBuffer **v31;
  int v32;
  PixelBufferUtils **v33;
  __CVBuffer **v34;
  _BOOL4 v35;
  __CVBuffer **v36;
  __CVBuffer **v37;
  __CVBuffer *v38;
  OSType v39;
  const __CFAllocator *v40;
  const __CFDictionary *BufferAttributes;
  OSType v42;
  __CVBuffer *v43;
  __CVBuffer *v44;
  __CVBuffer *v45;
  __CVBuffer *v46;
  size_t v47;
  size_t v48;
  const __CFAllocator *v49;
  const __CFDictionary *v50;
  __CVBuffer *v51;
  int v53;
  OSType pixelFormatType;
  unsigned int v56;
  unsigned int v57;
  CVPixelBufferRef v58;
  CVPixelBufferRef texture;
  __CVBuffer *v60;
  PixelBufferUtils *v61;
  CVPixelBufferRef pixelBufferOut;
  CGRect v63;
  CGRect v64;
  CGRect v65;
  CGRect v66;
  CGRect v67;
  CGRect v68;
  CGRect v69;

  v60 = pixelBuffer;
  v61 = this;
  if (!this)
    return 0xFFFFFFFFLL;
  height = a4.size.height;
  width = a4.size.width;
  y = a4.origin.y;
  x = a4.origin.x;
  v12 = a2;
  v56 = a7;
  v58 = 0;
  texture = 0;
  if (a5)
    p_texture = a5;
  else
    p_texture = &texture;
  if (a6)
    v16 = a6;
  else
    v16 = &v58;
  v17 = CVPixelBufferGetWidth(pixelBuffer);
  v18 = CVPixelBufferGetHeight(pixelBuffer);
  v19 = CVPixelBufferGetPixelFormatType(pixelBuffer);
  v20 = CVPixelBufferGetPixelFormatType(this);
  v57 = v12;
  if ((v12 & 0xFFFFFFFD) == 1)
    v21 = (double)(unint64_t)(double)v17;
  else
    v21 = (double)v18;
  if ((v12 & 0xFFFFFFFD) == 1)
    v22 = (double)v18;
  else
    v22 = (double)v17;
  v23 = CVPixelBufferGetWidth(this);
  v24 = CVPixelBufferGetHeight(this);
  v25 = CVPixelBufferGetPixelFormatType(this);
  v63.origin.x = x;
  v63.origin.y = y;
  v63.size.width = width;
  v63.size.height = height;
  v68 = CGRectIntegral(v63);
  v64.origin.x = x;
  v64.origin.y = y;
  v64.size.width = width;
  v64.size.height = height;
  if (!CGRectEqualToRect(v64, v68))
  {
    NSLog(CFSTR("%s:%d - ERROR - crop dimensions must be integers"), "scaleConvertRotatePixelBuffer", 2538);
    return 0xFFFFFFFFLL;
  }
  v65.origin.x = x;
  v65.origin.y = y;
  v65.size.width = width;
  v65.size.height = height;
  if (CGRectIsEmpty(v65))
  {
    x = 0.0;
    y = 0.0;
    width = (double)v23;
    height = (double)v24;
  }
  v69.origin.x = 0.0;
  v69.origin.y = 0.0;
  v66.origin.x = x;
  v66.origin.y = y;
  v66.size.width = width;
  v66.size.height = height;
  v69.size.width = (double)v23;
  v69.size.height = (double)v24;
  v26 = !CGRectEqualToRect(v66, v69);
  if (v22 != (double)v23)
    v26 = 1;
  if (v21 != (double)v24)
    v26 = 1;
  if (v20 == v19 && !v57 && !v26)
    return PixelBufferUtils::copyPixelBuffer(pixelBuffer, this, (__CVBuffer *)v56);
  pixelFormatType = v19;
  v28 = !v26;
  v29 = (__CVBuffer *)v56;
  v30 = v16;
  v31 = a6;
  if ((v26 & v56) != 1)
    goto LABEL_41;
  if (v25 <= 1751410031)
  {
    if (v25 > 1717855599)
    {
      if (v25 == 1717855600)
        goto LABEL_41;
      v32 = 1717856627;
    }
    else
    {
      if (v25 == 825306677)
        goto LABEL_41;
      v32 = 825437747;
    }
  }
  else if (v25 <= 1919365989)
  {
    if (v25 == 1751410032)
      goto LABEL_41;
    v32 = 1751411059;
  }
  else
  {
    if (v25 == 1919365990 || v25 == 1919365992)
      goto LABEL_41;
    v32 = 1932996149;
  }
  if (v25 == v32)
    goto LABEL_41;
  v35 = 0;
  if (v19 <= 1751410031)
  {
    if (v19 > 1717855599)
    {
      if (v19 == 1717855600)
        goto LABEL_41;
      v53 = 1717856627;
    }
    else
    {
      if (v19 == 825306677)
        goto LABEL_41;
      v53 = 825437747;
    }
LABEL_104:
    v33 = p_texture;
    v34 = p_texture;
    if (v19 != v53)
      goto LABEL_48;
    goto LABEL_41;
  }
  if (v19 <= 1919365989)
  {
    if (v19 == 1751410032)
      goto LABEL_41;
    v53 = 1751411059;
    goto LABEL_104;
  }
  if (v19 != 1919365990 && v19 != 1932996149)
  {
    v53 = 1919365992;
    goto LABEL_104;
  }
LABEL_41:
  if (v26)
    v33 = p_texture;
  else
    v33 = &v61;
  if (v20 == v19)
    v34 = v33;
  else
    v34 = v30;
  v35 = v20 != v19;
LABEL_48:
  if (v57)
    v36 = v30;
  else
    v36 = &v60;
  if (!v57)
    v28 = 1;
  if ((v28 & !v35) != 0)
    v37 = v36;
  else
    v37 = p_texture;
  if (v26)
  {
    v38 = *v37;
    if (!*v37)
    {
      if (v35)
        v39 = v20;
      else
        v39 = pixelFormatType;
      pixelBufferOut = 0;
      v40 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      BufferAttributes = (const __CFDictionary *)getBufferAttributes();
      v42 = v39;
      v29 = (__CVBuffer *)v56;
      if (CVPixelBufferCreate(v40, (unint64_t)v22, (unint64_t)v21, v42, BufferAttributes, &pixelBufferOut))
      {
        v38 = 0;
      }
      else
      {
        v38 = pixelBufferOut;
      }
      *v37 = v38;
    }
    v67.origin.x = x;
    v67.origin.y = y;
    v67.size.width = width;
    v67.size.height = height;
    v27 = PixelBufferUtils::cropAndScalePixelBuffer(this, v38, v29, v67, *MEMORY[0x24BDBF090]);
  }
  else
  {
    v27 = 0;
  }
  if ((_DWORD)v27 == 0 && v35)
  {
    v43 = *v33;
    if (!*v36)
    {
      v46 = v29;
      v47 = CVPixelBufferGetWidth(*v33);
      v48 = CVPixelBufferGetHeight(v43);
      pixelBufferOut = 0;
      v49 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v50 = (const __CFDictionary *)getBufferAttributes();
      if (CVPixelBufferCreate(v49, v47, v48, pixelFormatType, v50, &pixelBufferOut))
        v51 = 0;
      else
        v51 = pixelBufferOut;
      if (PixelBufferUtils::convertPixelBufferFormat(v43, v51, v46))
      {
        CVPixelBufferRelease(v51);
        v51 = 0;
      }
      *v36 = v51;
      if (v51)
        v27 = 0;
      else
        v27 = 0xFFFFFFFFLL;
      LODWORD(v29) = v56;
      v44 = (__CVBuffer *)v57;
      if (!v57)
        goto LABEL_87;
      goto LABEL_71;
    }
    v27 = PixelBufferUtils::convertPixelBufferFormat(*v33, *v36, v29);
  }
  v44 = (__CVBuffer *)v57;
  if (v57)
  {
LABEL_71:
    if (!(_DWORD)v27)
    {
      v45 = *v34;
      if (v60)
      {
        v27 = PixelBufferUtils::rotatePixelBuffer(v45, v60, v44, (int)v29);
      }
      else if (PixelBufferUtils::createRotatedPixelBuffer(v45, v44, (int)v29))
      {
        v27 = 0;
      }
      else
      {
        v27 = 0xFFFFFFFFLL;
      }
    }
  }
LABEL_87:
  if (!a5)
    CVPixelBufferRelease(texture);
  if (!v31)
    CVPixelBufferRelease(v58);
  return v27;
}

CVPixelBufferRef PixelBufferUtils::pixelBufferFromCGImage(PixelBufferUtils *this, CGImage *a2)
{
  OSType v2;
  CGColorSpace *ColorSpace;
  size_t BitsPerComponent;
  uint32_t BitmapInfo;
  CFStringRef Name;
  CGColorSpace *DeviceRGB;
  CFStringRef v9;
  int v10;
  const void *v11;
  BOOL v12;
  OSType v13;
  unint64_t Width;
  unint64_t Height;
  uint64_t v16;
  const __CFDictionary *v17;
  CVPixelBufferRef v18;
  void *BaseAddress;
  size_t BytesPerRow;
  CGContext *v21;
  CGContext *v22;
  CVPixelBufferRef pixelBufferOut;
  _QWORD v25[3];
  _QWORD v26[4];
  CGRect v27;

  v2 = a2;
  v26[3] = *MEMORY[0x24BDAC8D0];
  ColorSpace = CGImageGetColorSpace(this);
  BitsPerComponent = CGImageGetBitsPerComponent(this);
  BitmapInfo = CGImageGetBitmapInfo(this);
  Name = CGColorSpaceGetName(ColorSpace);
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  v9 = CGColorSpaceGetName(DeviceRGB);
  if (!Name)
  {
    Name = v9;
    ColorSpace = DeviceRGB;
  }
  if (CFEqual(Name, v9))
  {
    BitmapInfo = 6;
    v10 = 32;
    ColorSpace = DeviceRGB;
  }
  else
  {
    v11 = (const void *)*MEMORY[0x24BDBF318];
    if (CFEqual(Name, (CFTypeRef)*MEMORY[0x24BDBF318]))
      v12 = BitsPerComponent == 8;
    else
      v12 = 0;
    if (v12 || CFEqual(Name, (CFTypeRef)*MEMORY[0x24BDBF228]))
    {
      BitmapInfo = 6;
    }
    else
    {
      if (CFEqual(Name, v11) && BitsPerComponent == 32)
      {
        BitmapInfo = 257;
        v10 = 1380410945;
        goto LABEL_12;
      }
      if (!CFEqual(Name, (CFTypeRef)*MEMORY[0x24BDBF2A8]))
      {
        if (CFEqual(Name, (CFTypeRef)*MEMORY[0x24BDBF290]))
        {
          if (BitsPerComponent == 16)
            v10 = 1647392359;
          else
            v10 = 1278226534;
          if (BitsPerComponent == 16 || BitsPerComponent == 32)
            goto LABEL_12;
          NSLog(CFSTR("%s:%d - ERROR - this conversion is not supported"), "pixelBufferFromCGImage", 2713);
        }
        else
        {
          NSLog(CFSTR("%s:%d - ERROR - this conversion is not supported"), "pixelBufferFromCGImage", 2719);
        }
        return 0;
      }
      BitmapInfo = 2;
    }
    v10 = 32;
  }
LABEL_12:
  if (v2 == 1061109567)
    v13 = v10;
  else
    v13 = v2;
  Width = CGImageGetWidth(this);
  Height = CGImageGetHeight(this);
  v16 = *MEMORY[0x24BDC55E0];
  v25[0] = *MEMORY[0x24BDC55E8];
  v25[1] = v16;
  v26[0] = MEMORY[0x24BDBD1C8];
  v26[1] = MEMORY[0x24BDBD1C8];
  v25[2] = *MEMORY[0x24BDC5668];
  v26[2] = MEMORY[0x24BDBD1B8];
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v26, v25, 3);
  v17 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  pixelBufferOut = 0;
  if (CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], Width, Height, v13, v17, &pixelBufferOut))
  {
    NSLog(CFSTR("%s:%d - ERROR - could not create pixel buffer"), "pixelBufferFromCGImage", 2743);
    CGColorSpaceRelease(DeviceRGB);
    v18 = 0;
  }
  else
  {
    CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
    BaseAddress = CVPixelBufferGetBaseAddress(pixelBufferOut);
    BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBufferOut);
    v21 = CGBitmapContextCreate(BaseAddress, Width, Height, BitsPerComponent, BytesPerRow, ColorSpace, BitmapInfo);
    v22 = v21;
    if (v21)
    {
      v27.size.width = (double)Width;
      v27.size.height = (double)Height;
      v27.origin.x = 0.0;
      v27.origin.y = 0.0;
      CGContextDrawImage(v21, v27, this);
      CGContextRelease(v22);
      CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
    }
    else
    {
      NSLog(CFSTR("%s:%d - ERROR - could not create context"), "pixelBufferFromCGImage", 2765);
      CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
      CVPixelBufferRelease(pixelBufferOut);
      pixelBufferOut = 0;
    }
    CGColorSpaceRelease(DeviceRGB);
    v18 = pixelBufferOut;
  }

  return v18;
}

void sub_20B6C239C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void PixelBufferUtils::pixelBufferToImageFile(PixelBufferUtils *this, PixelBufferUtils *a2, const __CFString *a3, const __CFString *a4)
{
  CGImage *v6;
  void *v7;
  void *v8;
  CGImageDestination *v9;
  const __CFURL *url;

  v6 = PixelBufferUtils::pixelBufferToCGImage(a2, a2);
  v7 = (void *)MEMORY[0x24BDBCF48];
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", this);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "fileURLWithPath:", v8);
  url = (const __CFURL *)objc_claimAutoreleasedReturnValue();
  if (!a3)
    a3 = CFSTR("public.png");

  v9 = CGImageDestinationCreateWithURL(url, a3, 1uLL, 0);
  CGImageDestinationAddImage(v9, v6, 0);
  CGImageDestinationFinalize(v9);
  CFRelease(v9);
  CGImageRelease(v6);

}

void sub_20B6C2480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

CGImageRef PixelBufferUtils::pixelBufferToCGImage(PixelBufferUtils *this, __CVBuffer *a2)
{
  size_t Width;
  size_t Height;
  size_t v5;
  size_t v6;
  const __CFAllocator *v7;
  const __CFDictionary *BufferAttributes;
  __CVBuffer *v9;
  CGColorSpace *DeviceRGB;
  void *BaseAddress;
  size_t BytesPerRow;
  CGContext *v13;
  CGImageRef Image;
  CVPixelBufferRef pixelBufferOut;

  Width = CVPixelBufferGetWidth(this);
  Height = CVPixelBufferGetHeight(this);
  v5 = CVPixelBufferGetWidth(this);
  v6 = CVPixelBufferGetHeight(this);
  pixelBufferOut = 0;
  v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  BufferAttributes = (const __CFDictionary *)getBufferAttributes();
  if (CVPixelBufferCreate(v7, v5, v6, 0x20u, BufferAttributes, &pixelBufferOut))
    v9 = 0;
  else
    v9 = pixelBufferOut;
  if (PixelBufferUtils::convertPixelBufferFormat(this, v9, 0))
  {
    CVPixelBufferRelease(v9);
    v9 = 0;
  }
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  CVPixelBufferLockBaseAddress(v9, 1uLL);
  BaseAddress = CVPixelBufferGetBaseAddress(v9);
  BytesPerRow = CVPixelBufferGetBytesPerRow(v9);
  v13 = CGBitmapContextCreate(BaseAddress, Width, Height, 8uLL, BytesPerRow, DeviceRGB, 6u);
  CFRelease(DeviceRGB);
  Image = CGBitmapContextCreateImage(v13);
  CVPixelBufferUnlockBaseAddress(v9, 1uLL);
  CGContextRelease(v13);
  CVPixelBufferRelease(v9);
  return Image;
}

uint64_t PixelBufferUtils::pixelBufferFromRawFileWithBuffer(PixelBufferUtils *this, CVPixelBufferRef pixelBuffer, __CVBuffer *a3)
{
  PixelBufferUtils *PixelFormatType;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  size_t Width;
  size_t Height;
  size_t BytesPerRow;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t WidthOfPlane;
  uint64_t v17;
  uint64_t v18;
  size_t PlaneCount;
  size_t i;
  char *BaseAddressOfPlane;
  unint64_t v22;
  size_t v23;
  size_t HeightOfPlane;
  size_t BytesPerRowOfPlane;
  size_t v26;
  size_t v27;
  char *v28;
  size_t v29;
  uint64_t v30;
  size_t v31;
  uint64_t v32;
  size_t v33;
  char *v34;
  PixelBufferUtils *v35;
  size_t v36;
  size_t v37;
  size_t v38;
  unint64_t v39;
  size_t v40;
  size_t v41;
  char *BaseAddress;
  char *v43;
  size_t j;
  char *v45;
  unint64_t v46;
  size_t v47;
  size_t v48;
  size_t v49;
  size_t v50;
  size_t v51;
  uint64_t v52;
  size_t v53;
  id v55;
  void *v56;
  OSType v57;

  PixelFormatType = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(pixelBuffer);
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", this);
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCE50], "dataWithContentsOfFile:");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v6)
  {
    NSLog(CFSTR("%s:%d - ERROR - Failed reading input file"), "pixelBufferFromRawFileWithBuffer", 2882);
LABEL_16:
    v30 = 0xFFFFFFFFLL;
    goto LABEL_35;
  }
  v7 = PixelBufferUtils::pixelSizeForPixelFormat(PixelFormatType, 0);
  v8 = PixelBufferUtils::planeCountForPixelFormat(PixelFormatType);
  Width = CVPixelBufferGetWidth(pixelBuffer);
  Height = CVPixelBufferGetHeight(pixelBuffer);
  BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBuffer);
  if (v8)
  {
    v55 = v6;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = PixelBufferUtils::pixelSizeForPixelFormat(PixelFormatType, v12);
      WidthOfPlane = CVPixelBufferGetWidthOfPlane(pixelBuffer, v12);
      v14 += WidthOfPlane * v15 * CVPixelBufferGetHeightOfPlane(pixelBuffer, v12);
      v13 += CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, v12++);
    }
    while (v8 != v12);
    v17 = objc_msgSend(v55, "length");
    if (v17 == v14 || objc_msgSend(v55, "length") == v13)
    {
      v18 = objc_msgSend(objc_retainAutorelease(v55), "bytes");
      v57 = CVPixelBufferGetPixelFormatType(pixelBuffer);
      PlaneCount = CVPixelBufferGetPlaneCount(pixelBuffer);
      CVPixelBufferLockBaseAddress(pixelBuffer, 0);
      if (PlaneCount)
      {
        if (v17 == v14)
        {
          for (i = 0; i != PlaneCount; ++i)
          {
            BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, i);
            v22 = PixelBufferUtils::pixelSizeForPixelFormat((PixelBufferUtils *)v57, i);
            v23 = CVPixelBufferGetWidthOfPlane(pixelBuffer, i);
            HeightOfPlane = CVPixelBufferGetHeightOfPlane(pixelBuffer, i);
            BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, i);
            v26 = v23 * v22;
            if (HeightOfPlane)
            {
              v27 = BytesPerRowOfPlane;
              v28 = (char *)v18;
              v29 = HeightOfPlane;
              do
              {
                memcpy(BaseAddressOfPlane, v28, v26);
                BaseAddressOfPlane += v27;
                v28 += v26;
                --v29;
              }
              while (v29);
            }
            v18 += v26 * HeightOfPlane;
          }
        }
        else
        {
          for (j = 0; j != PlaneCount; ++j)
          {
            v45 = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, j);
            v46 = PixelBufferUtils::pixelSizeForPixelFormat((PixelBufferUtils *)v57, j);
            v47 = CVPixelBufferGetWidthOfPlane(pixelBuffer, j);
            v48 = CVPixelBufferGetHeightOfPlane(pixelBuffer, j);
            v49 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, j);
            v50 = v47 * v46;
            if (v48)
            {
              v51 = v49;
              v52 = 0;
              v53 = v48;
              do
              {
                memcpy(&v45[v52], (const void *)(v18 + v52), v50);
                v52 += v51;
                --v53;
              }
              while (v53);
            }
            v18 += v50 * v48;
          }
        }
      }
      CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
      v30 = 0;
    }
    else
    {
      NSLog(CFSTR("%s:%d - ERROR - Data size does not match dimensions"), "pixelBufferFromRawFileWithBuffer", 2926);
      v30 = 0xFFFFFFFFLL;
    }
    v6 = v55;
    goto LABEL_35;
  }
  v31 = BytesPerRow;
  v32 = objc_msgSend(v6, "length");
  v33 = Width * v7 * Height;
  if (v32 != v33 && objc_msgSend(v6, "length") != v31 * Height)
  {
    NSLog(CFSTR("%s:%d - ERROR - Data size does not match dimensions"), "pixelBufferFromRawFileWithBuffer", 2902);
    goto LABEL_16;
  }
  v34 = (char *)objc_msgSend(objc_retainAutorelease(v6), "bytes");
  v35 = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(pixelBuffer);
  v36 = CVPixelBufferGetWidth(pixelBuffer);
  v37 = CVPixelBufferGetHeight(pixelBuffer);
  v38 = CVPixelBufferGetBytesPerRow(pixelBuffer);
  v39 = PixelBufferUtils::pixelSizeForPixelFormat(v35, 0);
  v40 = v39 * v36;
  if (v32 == v33)
    v41 = v39 * v36;
  else
    v41 = v38;
  CVPixelBufferLockBaseAddress(pixelBuffer, 0);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
  if (v37)
  {
    v43 = BaseAddress;
    do
    {
      memcpy(v43, v34, v40);
      v43 += v38;
      v34 += v41;
      --v37;
    }
    while (v37);
  }
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
  v30 = 0;
LABEL_35:

  return v30;
}

void sub_20B6C2A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

__CVBuffer *PixelBufferUtils::pixelBufferFromRawFile(PixelBufferUtils *this, const char *a2)
{
  return PixelBufferUtils::pixelBufferFromRawFile(this, 0, 0, 0x3F3F3F3Fu);
}

__CVBuffer *PixelBufferUtils::pixelBufferFromRawFile(PixelBufferUtils *this, unint64_t a2, size_t a3, OSType a4)
{
  void *v8;
  void *v9;
  id v10;
  PixelBufferUtils *v11;
  const char *v12;
  const __CFDictionary *BufferAttributes;
  __CVBuffer *v14;
  __CVBuffer *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  __CFString *v22;
  CVPixelBufferRef pixelBufferOut;

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", this);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (a4 == 1061109567)
  {
    objc_msgSend(v8, "pathExtension");
    v10 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v11 = (PixelBufferUtils *)objc_msgSend(v10, "UTF8String");
    a4 = PixelBufferUtils::pixelFormatFromFileExtension(v11, v12);

    if (!a4)
    {
      NSLog(CFSTR("%s:%d - ERROR - Cannot read extension from file path. Unknown pixel format"), "pixelBufferFromRawFile", 2947);
      goto LABEL_23;
    }
  }
  if (!a2 || !a3)
  {
    if (a3 | a2)
    {
      NSLog(CFSTR("%s:%d - ERROR - bad dimensions provided when reading file"), "pixelBufferFromRawFile", 2956);
      goto LABEL_23;
    }
    objc_msgSend(v9, "stringByDeletingPathExtension");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "pathExtension");
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v17, "isEqualToString:", &stru_24C421AD8))
    {
      NSLog(CFSTR("%s:%d - ERROR - did not find dimensions in file name - extension missing"), "pixelBufferFromRawFile", 2963);
    }
    else
    {
      objc_msgSend(v17, "lowercaseString");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "componentsSeparatedByString:", CFSTR("x"));
      v19 = (void *)objc_claimAutoreleasedReturnValue();

      if (objc_msgSend(v19, "count") == 2)
      {
        objc_msgSend(v19, "objectAtIndexedSubscript:", 0);
        a3 = objc_claimAutoreleasedReturnValue();
        LODWORD(a2) = objc_msgSend((id)a3, "intValue");

        objc_msgSend(v19, "objectAtIndexedSubscript:", 1);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        LODWORD(a3) = objc_msgSend(v20, "intValue");

        v21 = 2980;
        v22 = CFSTR("%s:%d - ERROR - did not find dimensions in file name - width/height ill formatted");
        if ((_DWORD)a2 && (_DWORD)a3)
        {
          a2 = (int)a2;
          a3 = (int)a3;

          goto LABEL_5;
        }
      }
      else
      {
        v21 = 2969;
        v22 = CFSTR("%s:%d - ERROR - did not find dimensions in file name - extension ill formatted");
      }
      NSLog(&v22->isa, "pixelBufferFromRawFile", v21);

    }
    goto LABEL_23;
  }
LABEL_5:
  pixelBufferOut = 0;
  BufferAttributes = (const __CFDictionary *)getBufferAttributes();
  if (CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], a2, a3, a4, BufferAttributes, &pixelBufferOut))
    v15 = 0;
  else
    v15 = pixelBufferOut;
  if (PixelBufferUtils::pixelBufferFromRawFileWithBuffer(this, v15, v14))
  {
    CVPixelBufferRelease(v15);
LABEL_23:
    v15 = 0;
  }

  return v15;
}

void sub_20B6C2CCC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void PixelBufferUtils::pixelBufferToRawFile(PixelBufferUtils *this, CVPixelBufferRef pixelBuffer, __CVBuffer *a3)
{
  __CVBuffer *v3;
  unint64_t PixelFormatType;
  OSType v6;
  size_t Width;
  size_t Height;
  const __CFAllocator *v9;
  const __CFDictionary *BufferAttributes;
  CVReturn v11;
  std::string::size_type v12;
  __CVBuffer *v13;
  std::string *p_pixelBufferOut;
  size_t v15;
  std::string::size_type v16;
  std::string *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  int v24;
  size_t v25;
  size_t v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  std::string::size_type size;
  std::string *v31;
  __int128 v32;
  void **v33;
  std::string::size_type v34;
  unint64_t v35;
  unint64_t v36;
  unsigned __int8 v37;
  std::string::size_type v38;
  std::string::size_type v39;
  std::string *v40;
  std::string::size_type v41;
  std::string *v42;
  unint64_t v43;
  std::string::value_type *v44;
  unint64_t v45;
  int8x8_t v46;
  std::string *v47;
  std::string *v48;
  unint64_t v49;
  std::string::value_type *v50;
  unint64_t v51;
  int8x8_t v52;
  std::string *v53;
  std::string::size_type v54;
  std::string *v55;
  FILE *v56;
  PixelBufferUtils *v57;
  size_t PlaneCount;
  size_t i;
  size_t v60;
  size_t HeightOfPlane;
  size_t WidthOfPlane;
  size_t BytesPerRowOfPlane;
  char *BaseAddressOfPlane;
  char *v65;
  std::string *v66;
  int *v67;
  char *v68;
  PixelBufferUtils *v69;
  size_t v70;
  size_t v71;
  size_t v72;
  size_t BytesPerRow;
  char *BaseAddress;
  char *v75;
  std::string *v76;
  std::string *v77;
  _BOOL4 isPixelFormatCompressed;
  std::string v79;
  std::string v80;
  std::string v81;
  void *__p[2];
  int64_t v83;
  std::string pixelBufferOut;

  if (!pixelBuffer)
    return;
  v3 = pixelBuffer;
  PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  isPixelFormatCompressed = PixelBufferUtils::isPixelFormatCompressed((PixelBufferUtils *)PixelFormatType);
  if (isPixelFormatCompressed)
  {
    v6 = PixelBufferUtils::uncompressedEquivalentForPixelFormat((PixelBufferUtils *)PixelFormatType);
    Width = CVPixelBufferGetWidth(v3);
    Height = CVPixelBufferGetHeight(v3);
    pixelBufferOut.__r_.__value_.__r.__words[0] = 0;
    v9 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    BufferAttributes = (const __CFDictionary *)getBufferAttributes();
    v11 = CVPixelBufferCreate(v9, Width, Height, v6, BufferAttributes, (CVPixelBufferRef *)&pixelBufferOut);
    v12 = pixelBufferOut.__r_.__value_.__r.__words[0];
    if (v11)
      v13 = 0;
    else
      v13 = (__CVBuffer *)pixelBufferOut.__r_.__value_.__r.__words[0];
    if (PixelBufferUtils::convertPixelBufferFormat(v3, v13, (__CVBuffer *)1))
    {
      CVPixelBufferRelease(v13);
LABEL_8:
      PixelBufferUtils::pixelFormatAsString(PixelFormatType, (char *)&pixelBufferOut);
      if ((pixelBufferOut.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_pixelBufferOut = &pixelBufferOut;
      else
        p_pixelBufferOut = (std::string *)pixelBufferOut.__r_.__value_.__r.__words[0];
      NSLog(CFSTR("%s:%d - ERROR - pixel format %08x (\"%s\") not supported\n"), "pixelBufferToRawFile", 3011, PixelFormatType, p_pixelBufferOut);
      goto LABEL_127;
    }
    v3 = (__CVBuffer *)v12;
    if (!v13)
      goto LABEL_8;
  }
  v15 = strlen((const char *)this);
  if (v15 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v16 = v15;
  if (v15 >= 0x17)
  {
    v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v18 = v15 | 7;
    v19 = v18 + 1;
    v17 = (std::string *)operator new(v18 + 1);
    pixelBufferOut.__r_.__value_.__l.__size_ = v16;
    pixelBufferOut.__r_.__value_.__r.__words[2] = v19 | 0x8000000000000000;
    pixelBufferOut.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
    goto LABEL_20;
  }
  *((_BYTE *)&pixelBufferOut.__r_.__value_.__s + 23) = v15;
  v17 = &pixelBufferOut;
  if (v15)
LABEL_20:
    memcpy(v17, this, v16);
  v17->__r_.__value_.__s.__data_[v16] = 0;
  v20 = (void *)MEMORY[0x24BDBCF48];
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", this);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "fileURLWithPath:", v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "pathExtension");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = objc_msgSend(v23, "isEqualToString:", &stru_24C421AD8);

  if (!v24)
    goto LABEL_105;
  std::string::append(&pixelBufferOut, ".");
  v25 = CVPixelBufferGetWidth(v3);
  v26 = CVPixelBufferGetHeight(v3);
  std::to_string(&v80, v25);
  v27 = std::string::append(&v80, "x");
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v81.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v79, v26);
  if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v29 = &v79;
  else
    v29 = (std::string *)v79.__r_.__value_.__r.__words[0];
  if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v79.__r_.__value_.__r.__words[2]);
  else
    size = v79.__r_.__value_.__l.__size_;
  v31 = std::string::append(&v81, (const std::string::value_type *)v29, size);
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v83 = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v79.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v81.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_30;
LABEL_65:
    operator delete(v81.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_31;
LABEL_66:
    operator delete(v80.__r_.__value_.__l.__data_);
    goto LABEL_31;
  }
  operator delete(v79.__r_.__value_.__l.__data_);
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_65;
LABEL_30:
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_66;
LABEL_31:
  if (v83 >= 0)
    v33 = __p;
  else
    v33 = (void **)__p[0];
  if (v83 >= 0)
    v34 = HIBYTE(v83);
  else
    v34 = (std::string::size_type)__p[1];
  std::string::append(&pixelBufferOut, (const std::string::value_type *)v33, v34);
  std::string::append(&pixelBufferOut, ".");
  v35 = CVPixelBufferGetPixelFormatType(v3);
  PixelBufferUtils::pixelFormatAsString(v35, (char *)&v81);
  v36 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
  v37 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
  v39 = v81.__r_.__value_.__l.__size_;
  v38 = v81.__r_.__value_.__r.__words[0];
  if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v40 = &v81;
  else
    v40 = (std::string *)v81.__r_.__value_.__r.__words[0];
  if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v41 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
  else
    v41 = v81.__r_.__value_.__l.__size_;
  if (!v41)
    goto LABEL_69;
  v42 = v40;
  if (v41 < 8)
    goto LABEL_133;
  v43 = v41 & 0xFFFFFFFFFFFFFFF8;
  v44 = &v40->__r_.__value_.__s.__data_[3];
  v45 = v41 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v46 = vceq_s8(*(int8x8_t *)(v44 - 3), (int8x8_t)0x2F2F2F2F2F2F2F2FLL);
    if ((v46.i8[0] & 1) != 0)
    {
      *(v44 - 3) = 58;
      if ((v46.i8[1] & 1) == 0)
        goto LABEL_49;
    }
    else if ((v46.i8[1] & 1) == 0)
    {
LABEL_49:
      if ((v46.i8[2] & 1) != 0)
        goto LABEL_50;
      goto LABEL_58;
    }
    *(v44 - 2) = 58;
    if ((v46.i8[2] & 1) != 0)
    {
LABEL_50:
      *(v44 - 1) = 58;
      if ((v46.i8[3] & 1) == 0)
        goto LABEL_51;
      goto LABEL_59;
    }
LABEL_58:
    if ((v46.i8[3] & 1) == 0)
    {
LABEL_51:
      if ((v46.i8[4] & 1) != 0)
        goto LABEL_52;
      goto LABEL_60;
    }
LABEL_59:
    *v44 = 58;
    if ((v46.i8[4] & 1) != 0)
    {
LABEL_52:
      v44[1] = 58;
      if ((v46.i8[5] & 1) == 0)
        goto LABEL_53;
      goto LABEL_61;
    }
LABEL_60:
    if ((v46.i8[5] & 1) == 0)
    {
LABEL_53:
      if ((v46.i8[6] & 1) == 0)
        goto LABEL_62;
      goto LABEL_54;
    }
LABEL_61:
    v44[2] = 58;
    if ((v46.i8[6] & 1) == 0)
    {
LABEL_62:
      if ((v46.i8[7] & 1) == 0)
        goto LABEL_46;
      goto LABEL_63;
    }
LABEL_54:
    v44[3] = 58;
    if ((v46.i8[7] & 1) == 0)
      goto LABEL_46;
LABEL_63:
    v44[4] = 58;
LABEL_46:
    v44 += 8;
    v45 -= 8;
  }
  while (v45);
  if (v41 == v43)
    goto LABEL_68;
  v42 = (std::string *)((char *)v40 + v43);
LABEL_133:
  v76 = (std::string *)((char *)v40 + v41);
  do
  {
    if (v42->__r_.__value_.__s.__data_[0] == 47)
      v42->__r_.__value_.__s.__data_[0] = 58;
    v42 = (std::string *)((char *)v42 + 1);
  }
  while (v42 != v76);
LABEL_68:
  v36 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
  v39 = v81.__r_.__value_.__l.__size_;
  v38 = v81.__r_.__value_.__r.__words[0];
  v37 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
LABEL_69:
  if ((v37 & 0x80u) == 0)
    v47 = &v81;
  else
    v47 = (std::string *)v38;
  if ((v37 & 0x80u) != 0)
    v36 = v39;
  if (!v36)
    goto LABEL_97;
  v48 = v47;
  if (v36 < 8)
    goto LABEL_138;
  v49 = v36 & 0xFFFFFFFFFFFFFFF8;
  v50 = &v47->__r_.__value_.__s.__data_[3];
  v51 = v36 & 0xFFFFFFFFFFFFFFF8;
  while (2)
  {
    v52 = vceq_s8(*(int8x8_t *)(v50 - 3), (int8x8_t)0x2E2E2E2E2E2E2E2ELL);
    if ((v52.i8[0] & 1) != 0)
    {
      *(v50 - 3) = 95;
      if ((v52.i8[1] & 1) == 0)
        goto LABEL_80;
LABEL_88:
      *(v50 - 2) = 95;
      if ((v52.i8[2] & 1) == 0)
        goto LABEL_89;
LABEL_81:
      *(v50 - 1) = 95;
      if ((v52.i8[3] & 1) == 0)
        goto LABEL_82;
LABEL_90:
      *v50 = 95;
      if ((v52.i8[4] & 1) == 0)
        goto LABEL_91;
LABEL_83:
      v50[1] = 95;
      if ((v52.i8[5] & 1) == 0)
        goto LABEL_84;
LABEL_92:
      v50[2] = 95;
      if ((v52.i8[6] & 1) == 0)
        goto LABEL_93;
LABEL_85:
      v50[3] = 95;
      if ((v52.i8[7] & 1) != 0)
        goto LABEL_94;
    }
    else
    {
      if ((v52.i8[1] & 1) != 0)
        goto LABEL_88;
LABEL_80:
      if ((v52.i8[2] & 1) != 0)
        goto LABEL_81;
LABEL_89:
      if ((v52.i8[3] & 1) != 0)
        goto LABEL_90;
LABEL_82:
      if ((v52.i8[4] & 1) != 0)
        goto LABEL_83;
LABEL_91:
      if ((v52.i8[5] & 1) != 0)
        goto LABEL_92;
LABEL_84:
      if ((v52.i8[6] & 1) != 0)
        goto LABEL_85;
LABEL_93:
      if ((v52.i8[7] & 1) != 0)
LABEL_94:
        v50[4] = 95;
    }
    v50 += 8;
    v51 -= 8;
    if (v51)
      continue;
    break;
  }
  if (v36 == v49)
    goto LABEL_96;
  v48 = (std::string *)((char *)v47 + v49);
LABEL_138:
  v77 = (std::string *)((char *)v47 + v36);
  do
  {
    if (v48->__r_.__value_.__s.__data_[0] == 46)
      v48->__r_.__value_.__s.__data_[0] = 95;
    v48 = (std::string *)((char *)v48 + 1);
  }
  while (v48 != v77);
LABEL_96:
  v37 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
  v39 = v81.__r_.__value_.__l.__size_;
  v38 = v81.__r_.__value_.__r.__words[0];
LABEL_97:
  if ((v37 & 0x80u) == 0)
    v53 = &v81;
  else
    v53 = (std::string *)v38;
  if ((v37 & 0x80u) == 0)
    v54 = v37;
  else
    v54 = v39;
  std::string::append(&pixelBufferOut, (const std::string::value_type *)v53, v54);
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v81.__r_.__value_.__l.__data_);
    if (SHIBYTE(v83) < 0)
      goto LABEL_131;
  }
  else
  {
    if ((SHIBYTE(v83) & 0x80000000) == 0)
      goto LABEL_105;
LABEL_131:
    operator delete(__p[0]);
  }
LABEL_105:
  if ((pixelBufferOut.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v55 = &pixelBufferOut;
  else
    v55 = (std::string *)pixelBufferOut.__r_.__value_.__r.__words[0];
  v56 = fopen((const char *)v55, "wb");
  if (v56)
  {
    if (CVPixelBufferGetPlaneCount(v3))
    {
      CVPixelBufferLockBaseAddress(v3, 1uLL);
      v57 = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(v3);
      PlaneCount = CVPixelBufferGetPlaneCount(v3);
      if (PlaneCount)
      {
        for (i = 0; i != PlaneCount; ++i)
        {
          v60 = PixelBufferUtils::pixelSizeForPixelFormat(v57, i);
          HeightOfPlane = CVPixelBufferGetHeightOfPlane(v3, i);
          WidthOfPlane = CVPixelBufferGetWidthOfPlane(v3, i);
          BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v3, i);
          BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(v3, i);
          if (HeightOfPlane)
          {
            v65 = BaseAddressOfPlane;
            do
            {
              fwrite(v65, v60, WidthOfPlane, v56);
              v65 += BytesPerRowOfPlane;
              --HeightOfPlane;
            }
            while (HeightOfPlane);
          }
        }
      }
    }
    else
    {
      CVPixelBufferLockBaseAddress(v3, 1uLL);
      v69 = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(v3);
      v70 = PixelBufferUtils::pixelSizeForPixelFormat(v69, 0);
      v71 = CVPixelBufferGetHeight(v3);
      v72 = CVPixelBufferGetWidth(v3);
      BytesPerRow = CVPixelBufferGetBytesPerRow(v3);
      BaseAddress = (char *)CVPixelBufferGetBaseAddress(v3);
      if (v71)
      {
        v75 = BaseAddress;
        do
        {
          fwrite(v75, v70, v72, v56);
          v75 += BytesPerRow;
          --v71;
        }
        while (v71);
      }
    }
    CVPixelBufferUnlockBaseAddress(v3, 1uLL);
  }
  else
  {
    if ((pixelBufferOut.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v66 = &pixelBufferOut;
    else
      v66 = (std::string *)pixelBufferOut.__r_.__value_.__r.__words[0];
    v67 = __error();
    v68 = strerror(*v67);
    NSLog(CFSTR("%s:%d - ERROR - Failed opening file %s for write: %s"), "pixelBufferToRawFile", 3036, v66, v68);
  }
  fclose(v56);
  if (isPixelFormatCompressed)
    CVPixelBufferRelease(v3);
LABEL_127:
  if (SHIBYTE(pixelBufferOut.__r_.__value_.__r.__words[2]) < 0)
    operator delete(pixelBufferOut.__r_.__value_.__l.__data_);
}

void sub_20B6C34F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;

  if (a32 < 0)
    operator delete(__p);
  if (a39 < 0)
    operator delete(a34);
  if (*(char *)(v39 - 89) < 0)
    operator delete(*(void **)(v39 - 112));
  _Unwind_Resume(exception_object);
}

CVPixelBufferRef PixelBufferUtils::pixelBufferFromImageFile(PixelBufferUtils *this, CGImage *a2)
{
  void *v3;
  void *v4;
  const __CFURL *v5;
  CGImageSource *v6;
  CGImageSource *v7;
  PixelBufferUtils *ImageAtIndex;
  CVPixelBufferRef v9;

  if (this)
  {
    v3 = (void *)MEMORY[0x24BDBCF48];
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", this);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "fileURLWithPath:", v4);
    v5 = (const __CFURL *)objc_claimAutoreleasedReturnValue();

    v6 = CGImageSourceCreateWithURL(v5, 0);
    v7 = v6;
    if (v6)
    {
      if (CGImageSourceGetCount(v6))
      {
        ImageAtIndex = CGImageSourceCreateImageAtIndex(v7, 0, 0);
        v9 = PixelBufferUtils::pixelBufferFromCGImage(ImageAtIndex, a2);
        CGImageRelease(ImageAtIndex);
        CFRelease(v7);
LABEL_8:

        return v9;
      }
      CFRelease(v7);
    }
    v9 = 0;
    goto LABEL_8;
  }
  return 0;
}

void sub_20B6C36C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

__CVBuffer *PixelBufferUtils::blacken(__CVBuffer *this, __CVBuffer *a2)
{
  __CVBuffer *v2;
  size_t PlaneCount;
  size_t i;
  size_t BytesPerRowOfPlane;
  size_t v6;
  void *BaseAddressOfPlane;
  size_t DataSize;
  void *BaseAddress;

  if (this)
  {
    v2 = this;
    PlaneCount = CVPixelBufferGetPlaneCount(this);
    CVPixelBufferLockBaseAddress(v2, 0);
    if (PlaneCount)
    {
      for (i = 0; i != PlaneCount; ++i)
      {
        BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v2, i);
        v6 = CVPixelBufferGetHeightOfPlane(v2, i) * BytesPerRowOfPlane;
        BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(v2, i);
        bzero(BaseAddressOfPlane, v6);
      }
    }
    else
    {
      DataSize = CVPixelBufferGetDataSize(v2);
      BaseAddress = CVPixelBufferGetBaseAddress(v2);
      bzero(BaseAddress, DataSize);
    }
    return (__CVBuffer *)CVPixelBufferUnlockBaseAddress(v2, 0);
  }
  return this;
}

float PixelBufferUtils::getTurboColor(PixelBufferUtils *this, float a2, float *a3, float *a4, float *a5)
{
  unsigned int v5;
  unsigned int v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  float result;

  v5 = (float)(a2 * 255.0);
  if (v5 + 1 < 0xFF)
    v6 = v5 + 1;
  else
    v6 = 255;
  v7 = -(float)((float)(float)(a2 * 255.0) - (float)(a2 * 255.0));
  v8 = 4 * v5;
  v9 = 4 * v6;
  *(float *)this = *(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::redMap + v8)
                 + (float)((float)(*(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::redMap
                                            + v9)
                                 - *(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::redMap
                                            + v8))
                         * v7);
  *a3 = *(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::greenMap + v8)
      + (float)((float)(*(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::greenMap + v9)
                      - *(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::greenMap + v8))
              * v7);
  result = *(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::blueMap + v8)
         + (float)((float)(*(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::blueMap
                                    + v9)
                         - *(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::blueMap
                                    + v8))
                 * v7);
  *a4 = result;
  return result;
}

float *PixelBufferUtils::getJetColor(float *this, float a2, float *a3, float *a4, float *a5)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;

  *this = 1.5 - fabsf((float)(a2 * 4.0) + -3.0);
  *a3 = 1.5 - fabsf((float)(a2 * 4.0) + -2.0);
  *a4 = 1.5 - fabsf((float)(a2 * 4.0) + -1.0);
  v5 = 0.0;
  if (*this <= 1.0)
    v6 = *this;
  else
    v6 = 1.0;
  if (*this >= 0.0)
    v7 = v6;
  else
    v7 = 0.0;
  *this = v7;
  if (*a3 <= 1.0)
    v8 = *a3;
  else
    v8 = 1.0;
  if (*a3 >= 0.0)
    v9 = v8;
  else
    v9 = 0.0;
  *a3 = v9;
  if (*a4 >= 0.0)
  {
    v5 = 1.0;
    if (*a4 <= 1.0)
      v5 = *a4;
  }
  *a4 = v5;
  return this;
}

uint64_t PixelBufferUtils::colorizedDepthPixelBuffer(PixelBufferUtils *this, __CVBuffer *a2, int a3, float a4, float a5, uint64_t a6, __CVBuffer *a7, __CVBuffer *a8)
{
  int v13;
  unint64_t PixelFormatType;
  CGRect *v16;
  float v17;
  char *data;
  vImagePixelCount height;
  vImagePixelCount width;
  uint64_t v21;
  char *v27;
  uint64_t v28;
  _WORD *v31;
  vImagePixelCount v32;
  vImagePixelCount v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  size_t v39;
  char *v40;
  size_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  float v45;
  float v46;
  float v47;
  float *v48;
  float v49;
  float v50;
  uint64_t v51;
  float v52;
  float v53;
  float v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  float v59;
  uint64_t v60;
  float v61;
  float v62;
  float v63;
  float *v64;
  vImagePixelCount v65;
  vImagePixelCount v66;
  uint64_t v67;
  float *v68;
  uint64_t v69;
  float v70;
  uint64_t v71;
  float v72;
  size_t rowBytes;
  char *v74;
  size_t v75;
  uint64_t v76;
  _BYTE *v77;
  float v78;
  float v79;
  float v80;
  uint64_t v81;
  float *v82;
  float v83;
  float v84;
  char v85;
  float v88;
  float v89;
  float v90;
  unsigned int v91;
  char v92;
  unsigned int v93;
  uint64_t v94;
  float v95;
  uint64_t v96;
  float v97;
  float v98;
  float v99;
  uint64_t v102;
  float v103;
  size_t v104;
  char *v105;
  size_t v106;
  uint64_t v107;
  _BYTE *v108;
  float v109;
  float v110;
  float v111;
  uint64_t v112;
  float *v113;
  float v114;
  float v115;
  char v116;
  float v117;
  float v118;
  float v119;
  float v120;
  unsigned int v121;
  char v122;
  unsigned int v123;
  uint64_t v124;
  float v125;
  uint64_t v126;
  float v127;
  float v128;
  float v129;
  float v130;
  void **v132;
  void *__p[2];
  char v134;
  vImage_Buffer v135;
  vImage_Buffer v136;

  _S8 = a5;
  v13 = (int)a2;
  PixelFormatType = CVPixelBufferGetPixelFormatType(this);
  CVPixelBufferLockBaseAddress(this, 1uLL);
  CVPixelBufferLockBaseAddress(a7, 0);
  memset(&v136, 0, sizeof(v136));
  v16 = (CGRect *)MEMORY[0x24BDBF090];
  PixelBufferUtils::asVImageBuffer(this, *MEMORY[0x24BDBF090], &v136);
  memset(&v135, 0, sizeof(v135));
  PixelBufferUtils::asVImageBuffer(a7, *v16, &v135);
  if ((int)PixelFormatType > 1717855599)
  {
    if ((int)PixelFormatType > 1751410031)
    {
      if ((_DWORD)PixelFormatType != 1751410032 && (_DWORD)PixelFormatType != 1751411059)
      {
        if ((_DWORD)PixelFormatType != 1932996149)
          goto LABEL_149;
        goto LABEL_26;
      }
LABEL_12:
      height = v136.height;
      data = (char *)v136.data;
      if (v13)
      {
        if (!v136.height)
          goto LABEL_146;
        width = v136.width;
        if (!v136.width)
          goto LABEL_146;
        v21 = 0;
        _H0 = *(_WORD *)v136.data;
        __asm { FCVT            S8, H0 }
        v27 = (char *)v136.data;
        a4 = _S8;
        do
        {
          v28 = 0;
          do
          {
            _H0 = *(_WORD *)&v27[2 * v28];
            __asm { FCVT            S0, H0 }
            if (_S8 > _S0)
              _S8 = _S0;
            if (a4 < _S0)
              a4 = _S0;
            ++v28;
          }
          while (v136.width > v28);
          ++v21;
          v27 += v136.rowBytes;
        }
        while (v136.height > v21);
      }
      else
      {
        if (!v136.height)
          goto LABEL_146;
        width = v136.width;
      }
      if (width)
      {
        v71 = 0;
        v72 = a4 - _S8;
        rowBytes = v135.rowBytes;
        v74 = (char *)v135.data + 1;
        v75 = v136.rowBytes;
        do
        {
          v76 = 0;
          v77 = v74;
          if (a6)
          {
            do
            {
              _H3 = *(_WORD *)&data[2 * v76];
              __asm { FCVT            S3, H3 }
              if (a3 && _S3 == 0.0)
              {
                v85 = 0;
              }
              else
              {
                v78 = (float)(_S3 - _S8) / v72;
                v79 = v78 * 255.0;
                if (v78 > 1.0)
                  v79 = 255.0;
                if (v78 >= 0.0)
                  v80 = v79;
                else
                  v80 = 0.0;
                v81 = 3 * (int)v80;
                v82 = (float *)(a6 + 4 * (int)v81);
                v83 = *v82;
                v84 = *(float *)(a6 + 4 * v81 + 4);
                *(v77 - 1) = (int)(float)(v82[2] * 255.0);
                *v77 = (int)(float)(v84 * 255.0);
                v77[1] = (int)(float)(v83 * 255.0);
                v85 = -1;
              }
              v77[2] = v85;
              ++v76;
              v77 += 4;
            }
            while (width > v76);
          }
          else
          {
            do
            {
              _H3 = *(_WORD *)&data[2 * v76];
              __asm { FCVT            S3, H3 }
              if (a3 && _S3 == 0.0)
              {
                v92 = 0;
              }
              else
              {
                v88 = (float)(_S3 - _S8) / v72;
                if (v88 <= 1.0)
                  v89 = v88;
                else
                  v89 = 1.0;
                if (v88 >= 0.0)
                  v90 = v89;
                else
                  v90 = 0.0;
                v91 = (float)(v90 * 255.0);
                v92 = -1;
                if (v91 + 1 < 0xFF)
                  v93 = v91 + 1;
                else
                  v93 = 255;
                v94 = 4 * (float)(v90 * 255.0);
                v95 = -(float)((float)(float)(v90 * 255.0) - (float)(v90 * 255.0));
                v96 = 4 * v93;
                v97 = *(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::redMap + v94)
                    + (float)((float)(*(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::redMap
                                               + v96)
                                    - *(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::redMap
                                               + v94))
                            * v95);
                v98 = *(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::blueMap + v94);
                v99 = *(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::blueMap + v96)
                    - v98;
                LODWORD(v96) = (int)(float)((float)(*(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::greenMap
                                                             + v94)
                                                  + (float)((float)(*(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::greenMap
                                                                             + v96)
                                                                  - *(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::greenMap
                                                                             + v94))
                                                          * v95))
                                          * 255.0);
                *(v77 - 1) = (int)(float)((float)(v98 + (float)(v99 * v95)) * 255.0);
                *v77 = v96;
                v77[1] = (int)(float)(v97 * 255.0);
              }
              v77[2] = v92;
              ++v76;
              v77 += 4;
            }
            while (width > v76);
          }
          ++v71;
          data += v75;
          v74 += rowBytes;
        }
        while (height > v71);
      }
      goto LABEL_146;
    }
    if ((_DWORD)PixelFormatType == 1717855600 || (_DWORD)PixelFormatType == 1717856627)
    {
      v65 = v136.height;
      v64 = (float *)v136.data;
      if (v13)
      {
        if (!v136.height)
          goto LABEL_146;
        v66 = v136.width;
        if (!v136.width)
          goto LABEL_146;
        v67 = 0;
        _S8 = *(float *)v136.data;
        v68 = (float *)v136.data;
        a4 = *(float *)v136.data;
        do
        {
          v69 = 0;
          do
          {
            v70 = v68[v69];
            if (v70 < _S8)
              _S8 = v68[v69];
            if (a4 < v70)
              a4 = v68[v69];
            ++v69;
          }
          while (v136.width > v69);
          ++v67;
          v68 = (float *)((char *)v68 + v136.rowBytes);
        }
        while (v136.height > v67);
      }
      else
      {
        if (!v136.height)
          goto LABEL_146;
        v66 = v136.width;
      }
      if (v66)
      {
        v102 = 0;
        v103 = a4 - _S8;
        v104 = v135.rowBytes;
        v105 = (char *)v135.data + 1;
        v106 = v136.rowBytes;
        do
        {
          v107 = 0;
          v108 = v105;
          if (a6)
          {
            do
            {
              v117 = v64[v107];
              if (a3 && v117 == 0.0)
              {
                v116 = 0;
              }
              else
              {
                v109 = (float)(v117 - _S8) / v103;
                v110 = v109 * 255.0;
                if (v109 > 1.0)
                  v110 = 255.0;
                if (v109 >= 0.0)
                  v111 = v110;
                else
                  v111 = 0.0;
                v112 = 3 * (int)v111;
                v113 = (float *)(a6 + 4 * (int)v112);
                v114 = *v113;
                v115 = *(float *)(a6 + 4 * v112 + 4);
                *(v108 - 1) = (int)(float)(v113[2] * 255.0);
                *v108 = (int)(float)(v115 * 255.0);
                v108[1] = (int)(float)(v114 * 255.0);
                v116 = -1;
              }
              v108[2] = v116;
              ++v107;
              v108 += 4;
            }
            while (v66 > v107);
          }
          else
          {
            do
            {
              v130 = v64[v107];
              if (a3 && v130 == 0.0)
              {
                v122 = 0;
              }
              else
              {
                v118 = (float)(v130 - _S8) / v103;
                if (v118 <= 1.0)
                  v119 = v118;
                else
                  v119 = 1.0;
                if (v118 >= 0.0)
                  v120 = v119;
                else
                  v120 = 0.0;
                v121 = (float)(v120 * 255.0);
                v122 = -1;
                if (v121 + 1 < 0xFF)
                  v123 = v121 + 1;
                else
                  v123 = 255;
                v124 = 4 * (float)(v120 * 255.0);
                v125 = -(float)((float)(float)(v120 * 255.0) - (float)(v120 * 255.0));
                v126 = 4 * v123;
                v127 = *(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::redMap + v124)
                     + (float)((float)(*(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::redMap
                                                + v126)
                                     - *(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::redMap
                                                + v124))
                             * v125);
                v128 = *(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::blueMap + v124);
                v129 = *(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::blueMap + v126)
                     - v128;
                LODWORD(v126) = (int)(float)((float)(*(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::greenMap
                                                              + v124)
                                                   + (float)((float)(*(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::greenMap
                                                                              + v126)
                                                                   - *(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::greenMap
                                                                              + v124))
                                                           * v125))
                                           * 255.0);
                *(v108 - 1) = (int)(float)((float)(v128 + (float)(v129 * v125)) * 255.0);
                *v108 = v126;
                v108[1] = (int)(float)(v127 * 255.0);
              }
              v108[2] = v122;
              ++v107;
              v108 += 4;
            }
            while (v66 > v107);
          }
          ++v102;
          v64 = (float *)((char *)v64 + v106);
          v105 += v104;
        }
        while (v65 > v102);
      }
      goto LABEL_146;
    }
LABEL_149:
    PixelBufferUtils::pixelFormatAsString(PixelFormatType, (char *)__p);
    if (v134 >= 0)
      v132 = __p;
    else
      v132 = (void **)__p[0];
    NSLog(CFSTR("%s:%d - ERROR - pixel format %08x (\"%s\") not supported\n"), "colorizedDepthPixelBuffer", 3269, PixelFormatType, v132);
    if (v134 < 0)
      operator delete(__p[0]);
    CVPixelBufferUnlockBaseAddress(a7, 0);
    return 0xFFFFFFFFLL;
  }
  if ((int)PixelFormatType <= 1278226535)
  {
    if ((_DWORD)PixelFormatType == 825306677 || (_DWORD)PixelFormatType == 825437747)
      goto LABEL_26;
    goto LABEL_149;
  }
  if ((_DWORD)PixelFormatType == 1278226536)
    goto LABEL_12;
  if ((_DWORD)PixelFormatType != 1278226742 && (_DWORD)PixelFormatType != 1647392359)
    goto LABEL_149;
LABEL_26:
  v32 = v136.height;
  v31 = v136.data;
  if (v13)
  {
    if (v136.height)
    {
      v33 = v136.width;
      if (v136.width)
      {
        v34 = 0;
        LOWORD(v17) = *(_WORD *)v136.data;
        _S8 = (float)LODWORD(v17);
        v35 = (char *)v136.data;
        a4 = (float)LODWORD(v17);
        do
        {
          v36 = 0;
          do
          {
            LOWORD(v17) = *(_WORD *)&v35[2 * v36];
            v17 = (float)LODWORD(v17);
            if (_S8 > v17)
              _S8 = v17;
            if (a4 < v17)
              a4 = v17;
            ++v36;
          }
          while (v136.width > v36);
          ++v34;
          v35 += v136.rowBytes;
        }
        while (v136.height > v34);
        goto LABEL_40;
      }
    }
  }
  else if (v136.height)
  {
    v33 = v136.width;
    if (v136.width)
    {
LABEL_40:
      v37 = 0;
      v38 = a4 - _S8;
      v39 = v135.rowBytes;
      v40 = (char *)v135.data + 1;
      v41 = v136.rowBytes;
      v42 = 1;
      do
      {
        if (v42)
        {
          v43 = 0;
          v44 = v40;
          if (a6)
          {
            do
            {
              LODWORD(v51) = (unsigned __int16)v31[v43];
              if (!a3 || v31[v43])
              {
                v45 = (float)((float)v51 - _S8) / v38;
                v46 = v45 * 255.0;
                if (v45 > 1.0)
                  v46 = 255.0;
                if (v45 >= 0.0)
                  v47 = v46;
                else
                  v47 = 0.0;
                v51 = 3 * (int)v47;
                v48 = (float *)(a6 + 4 * (int)v51);
                v49 = *v48;
                v50 = *(float *)(a6 + 4 * v51 + 4);
                *(v44 - 1) = (int)(float)(v48[2] * 255.0);
                *v44 = (int)(float)(v50 * 255.0);
                v44[1] = (int)(float)(v49 * 255.0);
                LOBYTE(v51) = -1;
              }
              v44[2] = v51;
              ++v43;
              v44 += 4;
            }
            while (v33 > v43);
          }
          else
          {
            do
            {
              v56 = (unsigned __int16)v31[v43];
              if (!a3 || v31[v43])
              {
                v52 = (float)((float)v56 - _S8) / v38;
                if (v52 <= 1.0)
                  v53 = (float)((float)v56 - _S8) / v38;
                else
                  v53 = 1.0;
                if (v52 >= 0.0)
                  v54 = v53;
                else
                  v54 = 0.0;
                v55 = (float)(v54 * 255.0);
                LOBYTE(v56) = -1;
                if (v55 + 1 < 0xFF)
                  v57 = v55 + 1;
                else
                  v57 = 255;
                v58 = 4 * (float)(v54 * 255.0);
                v59 = -(float)((float)(float)(v54 * 255.0) - (float)(v54 * 255.0));
                v60 = 4 * v57;
                v61 = *(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::redMap + v58)
                    + (float)((float)(*(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::redMap
                                               + v60)
                                    - *(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::redMap
                                               + v58))
                            * v59);
                v62 = *(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::blueMap + v58);
                v63 = *(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::blueMap + v60)
                    - v62;
                LODWORD(v60) = (int)(float)((float)(*(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::greenMap
                                                             + v58)
                                                  + (float)((float)(*(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::greenMap
                                                                             + v60)
                                                                  - *(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::greenMap
                                                                             + v58))
                                                          * v59))
                                          * 255.0);
                *(v44 - 1) = (int)(float)((float)(v62 + (float)(v63 * v59)) * 255.0);
                *v44 = v60;
                v44[1] = (int)(float)(v61 * 255.0);
              }
              v44[2] = v56;
              ++v43;
              v44 += 4;
            }
            while (v33 > v43);
          }
          v42 = v33;
        }
        ++v37;
        v31 = (_WORD *)((char *)v31 + v41);
        v40 += v39;
      }
      while (v32 > v37);
    }
  }
LABEL_146:
  CVPixelBufferUnlockBaseAddress(this, 1uLL);
  if (a7)
    CVPixelBufferUnlockBaseAddress(a7, 0);
  return 0;
}

void sub_20B6C41BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

CVPixelBufferRef PixelBufferUtils::createColorizedDepthPixelBuffer(PixelBufferUtils *this, __CVBuffer *a2, __CVBuffer **a3, float a4, float a5, uint64_t a6, __CVBuffer *a7, __CVBuffer *a8, float a9)
{
  size_t Width;
  size_t Height;
  const __CFAllocator *v19;
  const __CFDictionary *BufferAttributes;
  __CVBuffer *v21;
  __CVBuffer *v22;
  size_t v23;
  size_t v24;
  const __CFDictionary *v25;
  __CVBuffer *v26;
  double v27;
  double v28;
  char v29;
  char v31;
  CVPixelBufferRef texture;
  CVPixelBufferRef pixelBufferOut;

  Width = CVPixelBufferGetWidth(this);
  Height = CVPixelBufferGetHeight(this);
  pixelBufferOut = 0;
  v19 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  BufferAttributes = (const __CFDictionary *)getBufferAttributes();
  if (CVPixelBufferCreate(v19, Width, Height, 0x42475241u, BufferAttributes, &pixelBufferOut))
    v22 = 0;
  else
    v22 = pixelBufferOut;
  texture = v22;
  if (PixelBufferUtils::colorizedDepthPixelBuffer(this, a2, (int)a3, a5, a4, a6, v22, v21))
  {
    CVPixelBufferRelease(v22);
    v22 = 0;
    texture = 0;
  }
  if (a7)
  {
    v23 = CVPixelBufferGetWidth(a7);
    v24 = CVPixelBufferGetHeight(a7);
    pixelBufferOut = 0;
    v25 = (const __CFDictionary *)getBufferAttributes();
    if (CVPixelBufferCreate(v19, v23, v24, 0x42475241u, v25, &pixelBufferOut))
      v26 = 0;
    else
      v26 = pixelBufferOut;
    if (PixelBufferUtils::convertPixelBufferFormat(a7, v26, 0))
    {
      CVPixelBufferRelease(v26);
    }
    else if (v26)
    {
      *(float *)&v27 = a9;
      v31 = PixelBufferUtils::alphaBlend(v26, v22, &texture, v27, a3);
      CVPixelBufferRelease(v26);
      if ((v31 & 1) != 0)
        return texture;
      goto LABEL_13;
    }
    CVPixelBufferRelease(v22);
    texture = 0;
    *(float *)&v28 = a9;
    v29 = PixelBufferUtils::alphaBlend(0, 0, &texture, v28, a3);
    CVPixelBufferRelease(0);
    if ((v29 & 1) == 0)
    {
LABEL_13:
      CVPixelBufferRelease(texture);
      return 0;
    }
  }
  return texture;
}

uint64_t PixelBufferUtils::alphaBlend(PixelBufferUtils *this, __CVBuffer *a2, __CVBuffer **a3, double a4, __CVBuffer **a5)
{
  int v5;
  unint64_t PixelFormatType;
  size_t Width;
  size_t Height;
  OSType v12;
  size_t v13;
  size_t v14;
  __CVBuffer *v15;
  size_t v16;
  size_t v17;
  const __CFAllocator *v18;
  const __CFDictionary *BufferAttributes;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  size_t v24;
  size_t v25;
  size_t v26;
  size_t v27;
  size_t v28;
  int8x16_t *v29;
  float32x4_t *v30;
  int8x16_t *v31;
  PixelBufferUtils *v32;
  unint64_t v33;
  uint64_t v34;
  float v35;
  unint64_t v36;
  float32x4_t v37;
  int8x16_t *v38;
  int8x16_t *v39;
  float32x4_t *v40;
  float *v41;
  float *v42;
  size_t v43;
  float *v44;
  unint64_t v45;
  unint64_t v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float32x4_t *v53;
  int8x16_t *v54;
  int8x16_t *v55;
  unint64_t v56;
  int8x16_t v57;
  uint64_t v58;
  float v59;
  unint64_t v60;
  float32x4_t v61;
  float32x4_t *v62;
  float32x4_t *v63;
  float32x4_t *v64;
  float *v65;
  float *v66;
  size_t v67;
  float *v68;
  unint64_t v69;
  unint64_t v70;
  float v71;
  float v72;
  float v73;
  float32x4_t *v74;
  float32x4_t *v75;
  float32x4_t *v76;
  unint64_t v77;
  float32x4_t v78;
  size_t v79;
  size_t v80;
  size_t v81;
  size_t v82;
  size_t v83;
  int8x16_t *v84;
  int8x16_t *v85;
  __CVBuffer *v86;
  int8x16_t *v87;
  int16x8_t *v88;
  PixelBufferUtils *v89;
  unint64_t v90;
  uint8x8_t v91;
  int8x8_t v92;
  int16x8_t v93;
  float32x4_t v94;
  uint64_t v95;
  float v96;
  unint64_t v97;
  float32x4_t v98;
  int16x8_t *v99;
  __int32 *v100;
  __int32 *v101;
  char *v102;
  __int8 *v103;
  char *v104;
  char *v105;
  unint64_t v107;
  unint64_t v108;
  unsigned int v109;
  int16x8_t *v110;
  __int32 *v111;
  __int32 *v112;
  unint64_t v113;
  __int32 v114;
  int16x4_t v115;
  int8x8_t v116;
  __int32 v117;
  int16x8_t v118;
  uint64_t v119;
  float v120;
  unint64_t v121;
  float32x4_t v122;
  unint64_t v123;
  int16x8_t *v124;
  int8x16_t *v125;
  int8x16_t *v126;
  char *v127;
  unsigned __int8 *v128;
  char *v129;
  char *v130;
  BOOL v131;
  unint64_t v132;
  unint64_t v133;
  unsigned int v134;
  float v135;
  unsigned int v136;
  unint64_t v137;
  int16x8_t *v138;
  int8x16_t *v139;
  int8x16_t *v140;
  unint64_t v141;
  int8x16_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  int8x16_t v146;
  size_t v147;
  size_t v148;
  size_t v149;
  size_t v150;
  int8x8_t *v151;
  int16x4_t *v152;
  __CVBuffer *v153;
  int8x8_t *v154;
  PixelBufferUtils *v155;
  unint64_t v156;
  uint64_t v157;
  float v158;
  unint64_t v159;
  float32x4_t v160;
  int8x8_t *v161;
  int16x4_t *v162;
  int8x8_t *v163;
  char *v164;
  char *v165;
  char *v166;
  char *v167;
  unint64_t v169;
  unint64_t v170;
  unsigned int v171;
  int8x8_t *v172;
  int16x4_t *v173;
  int8x8_t *v174;
  unint64_t v175;
  int16x4_t v176;
  uint16x4_t v177;
  int8x8_t v178;
  int8x8_t v179;
  size_t v180;
  size_t v181;
  size_t BytesPerRow;
  size_t v183;
  size_t v184;
  float16x4_t *BaseAddress;
  float16x4_t *v186;
  float16x4_t *v187;
  PixelBufferUtils *v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t i;
  char *v192;
  char *v193;
  size_t v194;
  char *v195;
  uint64_t v205;
  float v206;
  unint64_t v207;
  float32x4_t v208;
  float16x4_t *v209;
  float16x4_t *v210;
  float16x4_t *v211;
  char *v212;
  char *v213;
  char *v214;
  char *v215;
  BOOL v216;
  unint64_t v217;
  unint64_t v218;
  __int16 v219;
  __int16 v222;
  float16x4_t *v226;
  float16x4_t *v227;
  float16x4_t *v228;
  unint64_t v229;
  float16x4_t v230;
  __CVBuffer *v231;
  uint64_t v233;
  float v234;
  unint64_t v235;
  float32x4_t v236;
  int16x8_t *v237;
  uint16x8_t *v238;
  uint16x8_t *v239;
  char *v240;
  char *v241;
  char *v242;
  char *v243;
  BOOL v244;
  unint64_t v245;
  unint64_t v246;
  unsigned int v247;
  float v248;
  unsigned int v249;
  int16x8_t *v250;
  uint16x8_t *v251;
  uint16x8_t *v252;
  unint64_t v253;
  uint16x8_t v254;
  float32x4_t v255;
  float32x4_t v256;
  uint16x8_t v257;
  CVPixelBufferRef *v258;
  __CVBuffer *pixelBuffer;
  size_t pixelBuffera;
  int v261;
  CVPixelBufferRef pixelBufferOut[2];
  char v264;
  int8x16x4_t v265;

  v5 = (int)a5;
  PixelFormatType = CVPixelBufferGetPixelFormatType(this);
  Width = CVPixelBufferGetWidth(this);
  Height = CVPixelBufferGetHeight(this);
  v12 = CVPixelBufferGetPixelFormatType(a2);
  v13 = CVPixelBufferGetWidth(a2);
  v14 = CVPixelBufferGetHeight(a2);
  if ((_DWORD)PixelFormatType == v12 && Width == v13 && Height == v14)
  {
    v15 = *a3;
    if (!*a3)
    {
      v16 = CVPixelBufferGetWidth(this);
      v17 = CVPixelBufferGetHeight(this);
      pixelBufferOut[0] = 0;
      v18 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      BufferAttributes = (const __CFDictionary *)getBufferAttributes();
      if (CVPixelBufferCreate(v18, v16, v17, PixelFormatType, BufferAttributes, pixelBufferOut))
        v15 = 0;
      else
        v15 = pixelBufferOut[0];
      *a3 = v15;
    }
    v261 = v5;
    if ((int)PixelFormatType <= 1380401728)
    {
      if ((int)PixelFormatType > 875704437)
      {
        if ((int)PixelFormatType > 1111970368)
        {
          if ((_DWORD)PixelFormatType != 1111970369)
          {
            if ((_DWORD)PixelFormatType != 1278226534)
            {
              if ((_DWORD)PixelFormatType != 1278226536)
                goto LABEL_185;
LABEL_137:
              v180 = CVPixelBufferGetWidth(this);
              v181 = CVPixelBufferGetHeight(this);
              CVPixelBufferLockBaseAddress(v15, 0);
              CVPixelBufferLockBaseAddress(this, 1uLL);
              CVPixelBufferLockBaseAddress(a2, 1uLL);
              BytesPerRow = CVPixelBufferGetBytesPerRow(this);
              v183 = CVPixelBufferGetBytesPerRow(a2);
              v184 = CVPixelBufferGetBytesPerRow(v15);
              BaseAddress = (float16x4_t *)CVPixelBufferGetBaseAddress(this);
              v186 = (float16x4_t *)CVPixelBufferGetBaseAddress(a2);
              pixelBuffer = v15;
              v187 = (float16x4_t *)CVPixelBufferGetBaseAddress(v15);
              v188 = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(this);
              v189 = PixelBufferUtils::componentsPerPixelForPixelFormat(v188, 0);
              v190 = v189 * v180;
              if (v261)
              {
                if (v181 && v190)
                {
                  for (i = 0; i != v181; ++i)
                  {
                    v192 = (char *)BaseAddress + i * BytesPerRow;
                    v193 = (char *)v186 + i * v183;
                    v194 = v189 * v180;
                    v195 = (char *)v187 + i * v184;
                    do
                    {
                      _H1 = *(_WORD *)v193;
                      __asm { FCVT            S1, H1 }
                      if (_S1 == 0.0)
                      {
                        _H1 = *(_WORD *)v192;
                      }
                      else
                      {
                        _H2 = *(_WORD *)v192;
                        __asm { FCVT            S2, H2 }
                        _S1 = (float)((float)(1.0 - *(float *)&a4) * _S1) + (float)(_S2 * *(float *)&a4);
                        __asm { FCVT            H1, S1 }
                      }
                      *(_WORD *)v195 = _H1;
                      v195 += 2;
                      v192 += 2;
                      v193 += 2;
                      --v194;
                    }
                    while (v194);
                  }
                }
                goto LABEL_164;
              }
              if (v181 && v190)
              {
                v205 = 0;
                v206 = 1.0 - *(float *)&a4;
                v207 = 2 * (v190 & 0xFFFFFFFFFFFFFFF8);
                v208 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0);
                v209 = v187 + 1;
                v210 = BaseAddress + 1;
                v211 = v186 + 1;
                do
                {
                  v212 = (char *)BaseAddress + v205 * BytesPerRow;
                  v213 = (char *)v186 + v205 * v183;
                  v214 = (char *)v187 + v205 * v184;
                  if (v190 >= 8
                    && ((v215 = (char *)v187 + v205 * v184,
                         (unint64_t)(v215 - &BaseAddress->i8[v205 * BytesPerRow]) >= 0x10)
                      ? (v216 = (unint64_t)(v215 - &v186->i8[v205 * v183]) >= 0x10)
                      : (v216 = 0),
                        v216))
                  {
                    v213 += v207;
                    v226 = v211;
                    v227 = v210;
                    v228 = v209;
                    v229 = v190 & 0xFFFFFFFFFFFFFFF8;
                    do
                    {
                      v230 = vcvt_f16_f32(vmlaq_f32(vmulq_n_f32(vcvtq_f32_f16(*v226), v206), v208, vcvtq_f32_f16(*v227)));
                      v228[-1] = vcvt_f16_f32(vmlaq_f32(vmulq_n_f32(vcvtq_f32_f16(v226[-1]), v206), v208, vcvtq_f32_f16(v227[-1])));
                      *v228 = v230;
                      v228 += 2;
                      v227 += 2;
                      v226 += 2;
                      v229 -= 8;
                    }
                    while (v229);
                    if (v190 == (v190 & 0xFFFFFFFFFFFFFFF8))
                      goto LABEL_150;
                    v214 += v207;
                    v212 += v207;
                    v217 = v190 & 0xFFFFFFFFFFFFFFF8;
                  }
                  else
                  {
                    v217 = 0;
                  }
                  v218 = v190 - v217;
                  do
                  {
                    v219 = *(_WORD *)v212;
                    v212 += 2;
                    _H2 = v219;
                    __asm { FCVT            S2, H2 }
                    v222 = *(_WORD *)v213;
                    v213 += 2;
                    _H3 = v222;
                    __asm { FCVT            S3, H3 }
                    _S2 = (float)(v206 * _S3) + (float)(_S2 * *(float *)&a4);
                    __asm { FCVT            H2, S2 }
                    *(_WORD *)v214 = LOWORD(_S2);
                    v214 += 2;
                    --v218;
                  }
                  while (v218);
LABEL_150:
                  ++v205;
                  v209 = (float16x4_t *)((char *)v209 + v184);
                  v210 = (float16x4_t *)((char *)v210 + BytesPerRow);
                  v211 = (float16x4_t *)((char *)v211 + v183);
                }
                while (v205 != v181);
              }
LABEL_164:
              v20 = 1;
              CVPixelBufferUnlockBaseAddress(this, 1uLL);
              CVPixelBufferUnlockBaseAddress(a2, 1uLL);
              v231 = pixelBuffer;
LABEL_165:
              CVPixelBufferUnlockBaseAddress(v231, 0);
              return v20;
            }
            goto LABEL_34;
          }
          goto LABEL_72;
        }
        if ((_DWORD)PixelFormatType != 875704438)
        {
          v23 = 1094862674;
          goto LABEL_71;
        }
        goto LABEL_72;
      }
      if ((int)PixelFormatType > 843264103)
      {
        if ((_DWORD)PixelFormatType == 843264104)
          goto LABEL_137;
        v23 = 875704422;
LABEL_71:
        if ((_DWORD)PixelFormatType == v23)
          goto LABEL_72;
LABEL_185:
        PixelBufferUtils::pixelFormatAsString(PixelFormatType, (char *)pixelBufferOut);
        if (v264 >= 0)
          v258 = pixelBufferOut;
        else
          v258 = (CVPixelBufferRef *)pixelBufferOut[0];
        NSLog(CFSTR("%s:%d - ERROR - pixel format %08x (\"%s\") not supported\n"), "alphaBlend", 3985, PixelFormatType, v258);
        if (v264 < 0)
          operator delete(pixelBufferOut[0]);
        return 0;
      }
      if ((_DWORD)PixelFormatType == 32)
      {
LABEL_72:
        v79 = CVPixelBufferGetWidth(this);
        v80 = CVPixelBufferGetHeight(this);
        CVPixelBufferLockBaseAddress(v15, 0);
        CVPixelBufferLockBaseAddress(this, 1uLL);
        CVPixelBufferLockBaseAddress(a2, 1uLL);
        v81 = CVPixelBufferGetBytesPerRow(this);
        v82 = CVPixelBufferGetBytesPerRow(a2);
        v83 = CVPixelBufferGetBytesPerRow(v15);
        v84 = (int8x16_t *)CVPixelBufferGetBaseAddress(this);
        v85 = (int8x16_t *)CVPixelBufferGetBaseAddress(a2);
        v86 = v15;
        v87 = v85;
        pixelBuffer = v86;
        v88 = (int16x8_t *)CVPixelBufferGetBaseAddress(v86);
        v89 = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(this);
        v90 = PixelBufferUtils::componentsPerPixelForPixelFormat(v89, 0) * v79;
        if (v261)
        {
          if (!v80 || !v90)
            goto LABEL_164;
          v95 = 0;
          v96 = 1.0 - *(float *)&a4;
          v97 = v90 & 0xFFFFFFFFFFFFFFFCLL;
          v98 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0);
          v99 = v88;
          v100 = (__int32 *)v87;
          v101 = (__int32 *)v84;
          while (1)
          {
            v102 = &v84->i8[v95 * v81];
            v103 = &v87->i8[v95 * v82];
            v104 = &v88->i8[v95 * v83];
            if (v90 < 8)
              break;
            v105 = &v88->i8[v95 * v83];
            if ((unint64_t)(v105 - &v87->i8[v95 * v82]) < 4
              || (unint64_t)(v105 - &v84->i8[v95 * v81]) < 4)
            {
              break;
            }
            v103 += v97;
            v110 = v99;
            v111 = v100;
            v112 = v101;
            v113 = v90 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              v114 = *v111++;
              v91.i32[0] = v114;
              v115 = (int16x4_t)vmovl_u8(v91).u64[0];
              v116 = (int8x8_t)vceqz_s16(v115);
              v117 = *v112++;
              v92.i32[0] = v117;
              v92 = (int8x8_t)vmovl_u8((uint8x8_t)v92).u64[0];
              v118 = (int16x8_t)vcvtq_s32_f32(vmlaq_f32(vmulq_n_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)v115)), v96), v98, vcvtq_f32_u32(vmovl_u16((uint16x4_t)v92))));
              *(int8x8_t *)v118.i8 = vbsl_s8(v116, v92, (int8x8_t)vmovn_s32((int32x4_t)v118));
              v91 = (uint8x8_t)vmovn_s16(v118);
              v110->i32[0] = v91.i32[0];
              v110 = (int16x8_t *)((char *)v110 + 4);
              v113 -= 4;
            }
            while (v113);
            if (v90 != v97)
            {
              v104 += v97;
              v102 += v97;
              v107 = v90 & 0xFFFFFFFFFFFFFFFCLL;
LABEL_83:
              v108 = v90 - v107;
              do
              {
                v109 = *v102;
                if (*v103)
                  v109 = (int)(float)((float)(v96 * (float)*v103) + (float)((float)v109 * *(float *)&a4));
                *v104++ = v109;
                ++v102;
                ++v103;
                --v108;
              }
              while (v108);
            }
            ++v95;
            v101 = (__int32 *)((char *)v101 + v81);
            v100 = (__int32 *)((char *)v100 + v82);
            v99 = (int16x8_t *)((char *)v99 + v83);
            if (v95 == v80)
              goto LABEL_164;
          }
          v107 = 0;
          goto LABEL_83;
        }
        if (!v80 || !v90)
          goto LABEL_164;
        v119 = 0;
        v120 = 1.0 - *(float *)&a4;
        v121 = v90 & 0xFFFFFFFFFFFFFFF0;
        v122 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0);
        v123 = v90 & 0xFFFFFFFFFFFFFFFCLL;
        v124 = v88;
        v125 = v87;
        v126 = v84;
        while (1)
        {
          v127 = &v84->i8[v119 * v81];
          v128 = &v87->u8[v119 * v82];
          v129 = &v88->i8[v119 * v83];
          if (v90 < 4
            || ((v130 = &v88->i8[v119 * v83], (unint64_t)(v130 - &v84->i8[v119 * v81]) >= 0x10)
              ? (v131 = (unint64_t)(v130 - &v87->i8[v119 * v82]) >= 0x10)
              : (v131 = 0),
                !v131))
          {
            v132 = 0;
            goto LABEL_101;
          }
          if (v90 >= 0x10)
          {
            v138 = v124;
            v139 = v125;
            v140 = v126;
            v141 = v90 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v142 = *v140++;
              v143 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v142, (int8x16_t)xmmword_20B6D2AE0));
              v144 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v142, (int8x16_t)xmmword_20B6D2AD0));
              v145 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v142, (int8x16_t)xmmword_20B6D2AC0));
              v94 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v142, (int8x16_t)xmmword_20B6D2AB0));
              v146 = *v139++;
              v265.val[3] = (int8x16_t)vcvtq_u32_f32(vmlaq_f32(vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v146, (int8x16_t)xmmword_20B6D2AE0)), v120), v122, v143));
              v265.val[2] = (int8x16_t)vcvtq_u32_f32(vmlaq_f32(vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v146, (int8x16_t)xmmword_20B6D2AD0)), v120), v122, v144));
              v265.val[1] = (int8x16_t)vcvtq_u32_f32(vmlaq_f32(vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v146, (int8x16_t)xmmword_20B6D2AC0)), v120), v122, v145));
              v265.val[0] = (int8x16_t)vcvtq_u32_f32(vmlaq_f32(vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v146, (int8x16_t)xmmword_20B6D2AB0)), v120), v122, v94));
              v93 = (int16x8_t)vqtbl4q_s8(v265, (int8x16_t)xmmword_20B6D2AF0);
              *v138++ = v93;
              v141 -= 16;
            }
            while (v141);
            if (v90 == v121)
              goto LABEL_94;
            v137 = v90 & 0xFFFFFFFFFFFFFFF0;
            if ((v90 & 0xC) == 0)
            {
              v127 += v121;
              v128 += v121;
              v129 += v121;
              v132 = v90 & 0xFFFFFFFFFFFFFFF0;
              goto LABEL_101;
            }
          }
          else
          {
            v137 = 0;
          }
          v128 += v123;
          do
          {
            v93.i32[0] = *(__int32 *)((char *)v126->i32 + v137);
            v94.i32[0] = *(__int32 *)((char *)v125->i32 + v137);
            v94 = vmlaq_f32(vmulq_n_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v94.f32))), v120), v122, vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v93.i8))));
            v93 = (int16x8_t)vcvtq_s32_f32(v94);
            *(int16x4_t *)v93.i8 = vmovn_s32((int32x4_t)v93);
            *(int8x8_t *)v93.i8 = vmovn_s16(v93);
            *(__int32 *)((char *)v124->i32 + v137) = v93.i32[0];
            v137 += 4;
          }
          while (v123 != v137);
          if (v90 == v123)
            goto LABEL_94;
          v129 += v123;
          v127 += v123;
          v132 = v90 & 0xFFFFFFFFFFFFFFFCLL;
LABEL_101:
          v133 = v90 - v132;
          do
          {
            v134 = *v127++;
            v135 = (float)v134;
            v136 = *v128++;
            *v129++ = (int)(float)((float)(v120 * (float)v136) + (float)(v135 * *(float *)&a4));
            --v133;
          }
          while (v133);
LABEL_94:
          ++v119;
          v126 = (int8x16_t *)((char *)v126 + v81);
          v125 = (int8x16_t *)((char *)v125 + v82);
          v124 = (int16x8_t *)((char *)v124 + v83);
          if (v119 == v80)
            goto LABEL_164;
        }
      }
      v22 = 825437747;
      goto LABEL_117;
    }
    if ((int)PixelFormatType <= 1717855599)
    {
      if ((int)PixelFormatType > 1380411456)
      {
        if ((_DWORD)PixelFormatType == 1380411457)
          goto LABEL_137;
        v22 = 1647392359;
LABEL_117:
        if ((_DWORD)PixelFormatType != v22)
          goto LABEL_185;
        pixelBuffera = CVPixelBufferGetWidth(this);
        v147 = CVPixelBufferGetHeight(this);
        CVPixelBufferLockBaseAddress(v15, 0);
        CVPixelBufferLockBaseAddress(this, 1uLL);
        CVPixelBufferLockBaseAddress(a2, 1uLL);
        v148 = CVPixelBufferGetBytesPerRow(this);
        v149 = CVPixelBufferGetBytesPerRow(a2);
        v150 = CVPixelBufferGetBytesPerRow(v15);
        v151 = (int8x8_t *)CVPixelBufferGetBaseAddress(this);
        v152 = (int16x4_t *)CVPixelBufferGetBaseAddress(a2);
        v153 = v15;
        v154 = (int8x8_t *)CVPixelBufferGetBaseAddress(v15);
        v155 = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(this);
        v156 = PixelBufferUtils::componentsPerPixelForPixelFormat(v155, 0) * pixelBuffera;
        if (v261)
        {
          if (v147 && v156)
          {
            v157 = 0;
            v158 = 1.0 - *(float *)&a4;
            v159 = 2 * (v156 & 0xFFFFFFFFFFFFFFFCLL);
            v160 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0);
            v161 = v154;
            v162 = v152;
            v163 = v151;
            while (1)
            {
              v164 = (char *)v151 + v157 * v148;
              v165 = (char *)v152 + v157 * v149;
              v166 = (char *)v154 + v157 * v150;
              if (v156 < 8)
                break;
              v167 = (char *)v154 + v157 * v150;
              if ((unint64_t)(v167 - &v152->i8[v157 * v149]) < 8
                || (unint64_t)(v167 - &v151->i8[v157 * v148]) < 8)
              {
                break;
              }
              v165 += v159;
              v172 = v161;
              v173 = v162;
              v174 = v163;
              v175 = v156 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                v176 = *v173++;
                v177 = (uint16x4_t)v176;
                v178 = (int8x8_t)vceqz_s16(v176);
                v179 = *v174++;
                *v172++ = vbsl_s8(v178, v179, (int8x8_t)vmovn_s32((int32x4_t)vcvtq_u32_f32(vmlaq_f32(vmulq_n_f32(vcvtq_f32_u32(vmovl_u16(v177)), v158), v160, vcvtq_f32_u32(vmovl_u16((uint16x4_t)v179))))));
                v175 -= 4;
              }
              while (v175);
              if (v156 != (v156 & 0xFFFFFFFFFFFFFFFCLL))
              {
                v166 += v159;
                v164 += v159;
                v169 = v156 & 0xFFFFFFFFFFFFFFFCLL;
LABEL_129:
                v170 = v156 - v169;
                do
                {
                  v171 = *(unsigned __int16 *)v164;
                  if (*(_WORD *)v165)
                    v171 = (int)(float)((float)(v158 * (float)*(unsigned __int16 *)v165)
                                      + (float)((float)v171 * *(float *)&a4));
                  *(_WORD *)v166 = v171;
                  v166 += 2;
                  v164 += 2;
                  v165 += 2;
                  --v170;
                }
                while (v170);
              }
              ++v157;
              v163 = (int8x8_t *)((char *)v163 + v148);
              v162 = (int16x4_t *)((char *)v162 + v149);
              v161 = (int8x8_t *)((char *)v161 + v150);
              if (v157 == v147)
                goto LABEL_184;
            }
            v169 = 0;
            goto LABEL_129;
          }
LABEL_184:
          v20 = 1;
          CVPixelBufferUnlockBaseAddress(this, 1uLL);
          CVPixelBufferUnlockBaseAddress(a2, 1uLL);
          v231 = v153;
          goto LABEL_165;
        }
        if (!v147 || !v156)
          goto LABEL_184;
        v233 = 0;
        v234 = 1.0 - *(float *)&a4;
        v235 = 2 * (v156 & 0xFFFFFFFFFFFFFFF8);
        v236 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0);
        v237 = (int16x8_t *)v154;
        v238 = (uint16x8_t *)v152;
        v239 = (uint16x8_t *)v151;
        while (1)
        {
          v240 = (char *)v151 + v233 * v148;
          v241 = (char *)v152 + v233 * v149;
          v242 = (char *)v154 + v233 * v150;
          if (v156 >= 8
            && ((v243 = (char *)v154 + v233 * v150, (unint64_t)(v243 - &v151->i8[v233 * v148]) >= 0x10)
              ? (v244 = (unint64_t)(v243 - &v152->i8[v233 * v149]) >= 0x10)
              : (v244 = 0),
                v244))
          {
            v241 += v235;
            v250 = v237;
            v251 = v238;
            v252 = v239;
            v253 = v156 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v254 = *v252++;
              v255 = vcvtq_f32_u32(vmovl_high_u16(v254));
              v256 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v254.i8));
              v257 = *v251++;
              *v250++ = vuzp1q_s16((int16x8_t)vcvtq_u32_f32(vmlaq_f32(vmulq_n_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v257.i8)), v234), v236, v256)), (int16x8_t)vcvtq_u32_f32(vmlaq_f32(vmulq_n_f32(vcvtq_f32_u32(vmovl_high_u16(v257)), v234), v236, v255)));
              v253 -= 8;
            }
            while (v253);
            if (v156 == (v156 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_170;
            v242 += v235;
            v240 += v235;
            v245 = v156 & 0xFFFFFFFFFFFFFFF8;
          }
          else
          {
            v245 = 0;
          }
          v246 = v156 - v245;
          do
          {
            v247 = *(unsigned __int16 *)v240;
            v240 += 2;
            v248 = (float)v247;
            v249 = *(unsigned __int16 *)v241;
            v241 += 2;
            *(_WORD *)v242 = (int)(float)((float)(v234 * (float)v249) + (float)(v248 * *(float *)&a4));
            v242 += 2;
            --v246;
          }
          while (v246);
LABEL_170:
          ++v233;
          v239 = (uint16x8_t *)((char *)v239 + v148);
          v238 = (uint16x8_t *)((char *)v238 + v149);
          v237 = (int16x8_t *)((char *)v237 + v150);
          if (v233 == v147)
            goto LABEL_184;
        }
      }
      if ((_DWORD)PixelFormatType == 1380401729)
        goto LABEL_72;
      v21 = 1380410945;
    }
    else if ((int)PixelFormatType <= 1751410031)
    {
      if ((_DWORD)PixelFormatType == 1717855600)
        goto LABEL_34;
      v21 = 1717856627;
    }
    else
    {
      if ((_DWORD)PixelFormatType == 1751410032 || (_DWORD)PixelFormatType == 1751411059)
        goto LABEL_137;
      v21 = 1919365990;
    }
    if ((_DWORD)PixelFormatType != v21)
      goto LABEL_185;
LABEL_34:
    v24 = CVPixelBufferGetWidth(this);
    v25 = CVPixelBufferGetHeight(this);
    CVPixelBufferLockBaseAddress(v15, 0);
    CVPixelBufferLockBaseAddress(this, 1uLL);
    CVPixelBufferLockBaseAddress(a2, 1uLL);
    v26 = CVPixelBufferGetBytesPerRow(this);
    v27 = CVPixelBufferGetBytesPerRow(a2);
    v28 = CVPixelBufferGetBytesPerRow(v15);
    v29 = (int8x16_t *)CVPixelBufferGetBaseAddress(this);
    v30 = (float32x4_t *)CVPixelBufferGetBaseAddress(a2);
    pixelBuffer = v15;
    v31 = (int8x16_t *)CVPixelBufferGetBaseAddress(v15);
    v32 = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(this);
    v33 = PixelBufferUtils::componentsPerPixelForPixelFormat(v32, 0) * v24;
    if (v261)
    {
      if (!v25 || !v33)
      {
LABEL_68:
        v20 = 1;
        CVPixelBufferUnlockBaseAddress(this, 1uLL);
        CVPixelBufferUnlockBaseAddress(a2, 1uLL);
        CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
        return v20;
      }
      v34 = 0;
      v35 = 1.0 - *(float *)&a4;
      v36 = 4 * (v33 & 0xFFFFFFFFFFFFFFF8);
      v37 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0);
      v38 = v31 + 1;
      v39 = v29 + 1;
      v40 = v30 + 1;
      while (1)
      {
        v41 = (float *)((char *)v29->i32 + v34 * v26);
        v42 = (float *)((char *)v30->f32 + v34 * v27);
        v43 = v34 * v28;
        v44 = (float *)((char *)v31->i32 + v34 * v28);
        if (v33 < 8)
          break;
        v45 = 0;
        if ((unint64_t)(&v31->i8[v43] - ((char *)v30 + v34 * v27)) < 0x20
          || (unint64_t)(&v31->i8[v43] - &v29->i8[v34 * v26]) < 0x20)
        {
          goto LABEL_41;
        }
        v42 = (float *)((char *)v42 + v36);
        v53 = v40;
        v54 = v39;
        v55 = v38;
        v56 = v33 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v57 = vbslq_s8((int8x16_t)vceqzq_f32(*v53), *v54, (int8x16_t)vmlaq_f32(vmulq_n_f32(*v53, v35), v37, *(float32x4_t *)v54));
          v55[-1] = vbslq_s8((int8x16_t)vceqzq_f32(v53[-1]), v54[-1], (int8x16_t)vmlaq_f32(vmulq_n_f32(v53[-1], v35), v37, (float32x4_t)v54[-1]));
          *v55 = v57;
          v55 += 2;
          v54 += 2;
          v53 += 2;
          v56 -= 8;
        }
        while (v56);
        if (v33 != (v33 & 0xFFFFFFFFFFFFFFF8))
        {
          v44 = (float *)((char *)v44 + v36);
          v41 = (float *)((char *)v41 + v36);
          v45 = v33 & 0xFFFFFFFFFFFFFFF8;
LABEL_41:
          v46 = v33 - v45;
          do
          {
            v47 = *v42++;
            v48 = v47;
            v49 = *v41++;
            v50 = v49;
            v51 = (float)(v35 * v48) + (float)(v49 * *(float *)&a4);
            if (v48 == 0.0)
              v52 = v50;
            else
              v52 = v51;
            *v44++ = v52;
            --v46;
          }
          while (v46);
        }
        ++v34;
        v38 = (int8x16_t *)((char *)v38 + v28);
        v39 = (int8x16_t *)((char *)v39 + v26);
        v40 = (float32x4_t *)((char *)v40 + v27);
        if (v34 == v25)
          goto LABEL_68;
      }
      v45 = 0;
      goto LABEL_41;
    }
    if (!v25 || !v33)
      goto LABEL_164;
    v58 = 0;
    v59 = 1.0 - *(float *)&a4;
    v60 = 4 * (v33 & 0xFFFFFFFFFFFFFFF8);
    v61 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0);
    v62 = (float32x4_t *)&v31[1];
    v63 = (float32x4_t *)&v29[1];
    v64 = v30 + 1;
    while (1)
    {
      v65 = (float *)((char *)v29->i32 + v58 * v26);
      v66 = (float *)((char *)v30->f32 + v58 * v27);
      v67 = v58 * v28;
      v68 = (float *)((char *)v31->i32 + v58 * v28);
      if (v33 >= 8)
      {
        v69 = 0;
        if ((unint64_t)(&v31->i8[v67] - &v29->i8[v58 * v26]) >= 0x20
          && (unint64_t)(&v31->i8[v67] - ((char *)v30 + v58 * v27)) >= 0x20)
        {
          v66 = (float *)((char *)v66 + v60);
          v74 = v64;
          v75 = v63;
          v76 = v62;
          v77 = v33 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v78 = vmlaq_f32(vmulq_n_f32(*v74, v59), v61, *v75);
            v76[-1] = vmlaq_f32(vmulq_n_f32(v74[-1], v59), v61, v75[-1]);
            *v76 = v78;
            v76 += 2;
            v75 += 2;
            v74 += 2;
            v77 -= 8;
          }
          while (v77);
          if (v33 == (v33 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_56;
          v68 = (float *)((char *)v68 + v60);
          v65 = (float *)((char *)v65 + v60);
          v69 = v33 & 0xFFFFFFFFFFFFFFF8;
        }
      }
      else
      {
        v69 = 0;
      }
      v70 = v33 - v69;
      do
      {
        v71 = *v65++;
        v72 = v71;
        v73 = *v66++;
        *v68++ = (float)(v59 * v73) + (float)(v72 * *(float *)&a4);
        --v70;
      }
      while (v70);
LABEL_56:
      ++v58;
      v62 = (float32x4_t *)((char *)v62 + v28);
      v63 = (float32x4_t *)((char *)v63 + v26);
      v64 = (float32x4_t *)((char *)v64 + v27);
      if (v58 == v25)
        goto LABEL_164;
    }
  }
  NSLog(CFSTR("%s:%d - ERROR - cannot alpha blend buffers - not same size/format"), "alphaBlend", 3934);
  return 0;
}

void sub_20B6C5388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t PixelBufferUtils::colorizePointCloudOnPixelBuffer(CVPixelBufferRef pixelBuffer, __CVBuffer *a2, uint64_t a3, CGPoint *a4, const float *a5, float a6, float a7, float a8)
{
  float v8;
  int v11;
  size_t Width;
  size_t Height;
  unint64_t v18;
  const CGPoint *v19;
  const float *v20;
  const float *v21;
  uint64_t v22;
  const float *v23;
  const float *v24;
  float *v25;
  __CVBuffer *v26;
  float v27;
  float v28;
  float *v29;
  float *v30;
  float *v31;
  float *v32;
  __CVBuffer *v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  float v45;
  uint64_t v46;

  v8 = a8;
  v11 = (int)a5;
  if (a8 <= 0.0)
  {
    Width = CVPixelBufferGetWidth(pixelBuffer);
    Height = CVPixelBufferGetHeight(pixelBuffer);
    if (Width <= Height)
      v18 = Height;
    else
      v18 = Width;
    v8 = fmax((double)v18 * 0.007, 2.0);
  }
  v19 = (const CGPoint *)operator new[]();
  v20 = (const float *)operator new[]();
  v21 = (const float *)operator new[]();
  v22 = operator new[]();
  v24 = (const float *)v22;
  if (v11)
  {
    if (!a2)
      goto LABEL_28;
    a6 = *(float *)&a4->x;
    v25 = (float *)a4;
    v26 = a2;
    a7 = *(float *)&a4->x;
    do
    {
      v27 = *v25++;
      v28 = v27;
      if (v27 < a6)
        a6 = v28;
      if (a7 < v28)
        a7 = v28;
      v26 = (__CVBuffer *)((char *)v26 - 1);
    }
    while (v26);
  }
  if (a2)
  {
    v29 = (float *)v19;
    v30 = (float *)v20;
    v31 = (float *)v21;
    v32 = (float *)v22;
    v33 = a2;
    do
    {
      v34 = *(float *)&a4->x;
      v35 = 0.0;
      v36 = 0.0;
      v37 = 0.0;
      v38 = 0.0;
      if (*(float *)&a4->x > 0.0)
      {
        v39 = (float)(v34 - a6) / (float)(a7 - a6);
        v38 = 1.0;
        if (v39 <= 1.0)
          v40 = (float)(v34 - a6) / (float)(a7 - a6);
        else
          v40 = 1.0;
        if (v39 >= 0.0)
          v41 = v40;
        else
          v41 = 0.0;
        v42 = (float)(v41 * 255.0);
        if (v42 + 1 < 0xFF)
          v43 = v42 + 1;
        else
          v43 = 255;
        v44 = 4 * (float)(v41 * 255.0);
        v45 = -(float)((float)(float)(v41 * 255.0) - (float)(v41 * 255.0));
        v46 = 4 * v43;
        v35 = *(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::redMap + v44)
            + (float)((float)(*(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::redMap
                                       + v46)
                            - *(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::redMap
                                       + v44))
                    * v45);
        v36 = *(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::greenMap + v44)
            + (float)((float)(*(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::greenMap
                                       + v46)
                            - *(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::greenMap
                                       + v44))
                    * v45);
        v37 = *(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::blueMap + v44)
            + (float)((float)(*(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::blueMap
                                       + v46)
                            - *(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::blueMap
                                       + v44))
                    * v45);
      }
      *v29++ = v35;
      *v30++ = v36;
      a4 = (CGPoint *)((char *)a4 + 4);
      *v31++ = v37;
      *v32++ = v38;
      v33 = (__CVBuffer *)((char *)v33 - 1);
    }
    while (v33);
  }
LABEL_28:
  PixelBufferUtils::addCirclesToPixelBuffer(pixelBuffer, a2, v8, a3, v19, v20, v21, v24, v23);
  MEMORY[0x20BD36480](v24, 0x1000C8052888210);
  MEMORY[0x20BD36480](v21, 0x1000C8052888210);
  MEMORY[0x20BD36480](v20, 0x1000C8052888210);
  MEMORY[0x20BD36480](v19, 0x1000C8052888210);
  return 0;
}

void sub_20B6C5680(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  MEMORY[0x20BD36480](v4, 0x1000C8052888210);
  MEMORY[0x20BD36480](v3, 0x1000C8052888210);
  MEMORY[0x20BD36480](v2, 0x1000C8052888210);
  MEMORY[0x20BD36480](v1, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

uint64_t PixelBufferUtils::addCirclesToPixelBuffer(PixelBufferUtils *this, __CVBuffer *a2, float a3, uint64_t a4, const CGPoint *a5, const float *a6, const float *a7, const float *a8, const float *a9)
{
  const CGPoint *v10;
  const float *v11;
  const float *v12;
  const float *v13;
  __CVBuffer *v14;
  unint64_t PixelFormatType;
  size_t v18;
  size_t Height;
  size_t v20;
  CGColorSpace *DeviceRGB;
  void *BaseAddress;
  size_t BytesPerRow;
  size_t v24;
  CGContext *v25;
  double *v26;
  float v27;
  double v28;
  float v29;
  CGFloat v30;
  CGFloat v31;
  CGFloat v32;
  CGColor *GenericRGB;
  void **v35;
  size_t widtha;
  CGColorSpace *width;
  void *__p[2];
  char v39;
  CGRect v40;

  if (!this || !a4 || (v10 = a5) == 0 || (v11 = a6) == 0 || (v12 = a7) == 0 || (v13 = a8) == 0)
  {
    NSLog(CFSTR("%s:%d - ERROR - cannot add circles to pixel buffer. illegal argument"), a2, a4, a5, a6, a7, a8, a9, "addCirclesToPixelBuffer", 4067);
    return 0;
  }
  v14 = a2;
  PixelFormatType = CVPixelBufferGetPixelFormatType(this);
  v18 = CVPixelBufferGetWidth(this);
  Height = CVPixelBufferGetHeight(this);
  if ((_DWORD)PixelFormatType != 1111970369)
  {
    PixelBufferUtils::pixelFormatAsString(PixelFormatType, (char *)__p);
    if (v39 >= 0)
      v35 = __p;
    else
      v35 = (void **)__p[0];
    NSLog(CFSTR("%s:%d - ERROR - pixel format %08x (\"%s\") not supported\n"), "addCirclesToPixelBuffer", 4077, PixelFormatType, v35);
    if (v39 < 0)
      operator delete(__p[0]);
    return 0;
  }
  v20 = Height;
  widtha = v18;
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  CVPixelBufferLockBaseAddress(this, 0);
  BaseAddress = CVPixelBufferGetBaseAddress(this);
  BytesPerRow = CVPixelBufferGetBytesPerRow(this);
  v24 = widtha;
  width = DeviceRGB;
  v25 = CGBitmapContextCreate(BaseAddress, v24, v20, 8uLL, BytesPerRow, DeviceRGB, 0x2002u);
  if (v14)
  {
    v26 = (double *)(a4 + 8);
    do
    {
      v27 = *(v26 - 1);
      v28 = *v26;
      v26 += 2;
      v29 = (double)v20 - v28;
      LODWORD(v28) = LODWORD(v10->x);
      v10 = (const CGPoint *)((char *)v10 + 4);
      v30 = *(float *)&v28;
      *(float *)&v28 = *v11++;
      v31 = *(float *)&v28;
      *(float *)&v28 = *v12++;
      v32 = *(float *)&v28;
      *(float *)&v28 = *v13++;
      GenericRGB = CGColorCreateGenericRGB(v30, v31, v32, *(float *)&v28);
      CGContextSetFillColorWithColor(v25, GenericRGB);
      v40.origin.x = (float)(v27 - a3);
      v40.origin.y = (float)(v29 - a3);
      v40.size.width = (float)(a3 + a3);
      v40.size.height = v40.size.width;
      CGContextFillEllipseInRect(v25, v40);
      CFRelease(GenericRGB);
      v14 = (__CVBuffer *)((char *)v14 - 1);
    }
    while (v14);
  }
  CVPixelBufferUnlockBaseAddress(this, 0);
  CFRelease(width);
  CGContextRelease(v25);
  return 1;
}

void sub_20B6C593C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__CVBuffer *PixelBufferUtils::createColorizedPointCloud(PixelBufferUtils *this, uint64_t a2, CGPoint *a3, const float *a4, size_t a5, const float *a6, float a7, float a8, float a9)
{
  const __CFAllocator *v18;
  const __CFDictionary *BufferAttributes;
  __CVBuffer *v20;
  CVReturn v21;
  __CVBuffer *result;
  __CVBuffer *v23;
  BOOL v24;
  CVPixelBufferRef pixelBufferOut;

  pixelBufferOut = 0;
  v18 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  BufferAttributes = (const __CFDictionary *)getBufferAttributes();
  v21 = CVPixelBufferCreate(v18, (size_t)a4, a5, 0x42475241u, BufferAttributes, &pixelBufferOut);
  result = 0;
  v23 = pixelBufferOut;
  if (v21)
    v24 = 1;
  else
    v24 = pixelBufferOut == 0;
  if (!v24)
  {
    PixelBufferUtils::blacken(pixelBufferOut, v20);
    PixelBufferUtils::colorizePointCloudOnPixelBuffer(v23, this, a2, a3, a6, a7, a8, a9);
    return v23;
  }
  return result;
}

__CVBuffer *PixelBufferUtils::createPixelBufferCopy(PixelBufferUtils *this, __CVBuffer *a2)
{
  OSType PixelFormatType;
  size_t Width;
  size_t Height;
  const __CFAllocator *v6;
  const __CFDictionary *BufferAttributes;
  __CVBuffer *v8;
  OSType v9;
  CVPixelBufferRef pixelBufferOut;

  PixelFormatType = CVPixelBufferGetPixelFormatType(this);
  Width = CVPixelBufferGetWidth(this);
  Height = CVPixelBufferGetHeight(this);
  pixelBufferOut = 0;
  v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  BufferAttributes = (const __CFDictionary *)getBufferAttributes();
  if (CVPixelBufferCreate(v6, Width, Height, PixelFormatType, BufferAttributes, &pixelBufferOut))
    v8 = 0;
  else
    v8 = pixelBufferOut;
  v9 = CVPixelBufferGetPixelFormatType(this);
  if (v9 != CVPixelBufferGetPixelFormatType(v8)
    || copyPixelBufferVImage(v8, *MEMORY[0x24BDBEFB0], this, *MEMORY[0x24BDBF090]))
  {
    CVPixelBufferRelease(v8);
    return 0;
  }
  return v8;
}

CVPixelBufferRef PixelBufferUtils::asPixelBuffer(unint64_t this, size_t a2, PixelBufferUtils *a3, char *a4, void *a5)
{
  uint64_t v9;
  unint64_t v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  size_t v23;
  const __CFAllocator *v24;
  const __CFDictionary *BufferAttributes;
  size_t v26;
  CVPixelBufferRef v27;
  void *planeBaseAddress[3];
  size_t v29[3];
  size_t planeHeight[3];
  size_t planeWidth[5];

  planeWidth[3] = *MEMORY[0x24BDAC8D0];
  if (PixelBufferUtils::planeCountForPixelFormat(a3))
  {
    v27 = 0;
    v9 = PixelBufferUtils::planeCountForPixelFormat(a3);
    if ((unint64_t)(v9 - 4) > 0xFFFFFFFFFFFFFFFCLL)
    {
      v12 = v9;
      planeWidth[1] = this;
      planeWidth[2] = this;
      planeHeight[1] = a2;
      planeHeight[2] = a2;
      v29[1] = this;
      v29[2] = this;
      planeBaseAddress[1] = 0;
      planeBaseAddress[2] = 0;
      planeBaseAddress[0] = a4;
      v13 = PixelBufferUtils::horizontalSubsamplingForPixelFormat(a3, 0);
      v14 = PixelBufferUtils::verticalSubsamplingForPixelFormat(a3, 0);
      v15 = PixelBufferUtils::pixelSizeForPixelFormat(a3, 0) / v13 * this;
      v29[0] = v15;
      v26 = a2;
      planeWidth[0] = this / v13;
      v16 = a2 / v14;
      planeHeight[0] = a2 / v14;
      if (v12 != 1)
      {
        v17 = 1;
        do
        {
          v18 = PixelBufferUtils::horizontalSubsamplingForPixelFormat(a3, v17);
          v19 = v12;
          v20 = PixelBufferUtils::verticalSubsamplingForPixelFormat(a3, v17);
          v21 = PixelBufferUtils::pixelSizeForPixelFormat(a3, v17);
          v22 = v17;
          v23 = v29[v17] * (v21 / v18);
          v29[v22] = v23;
          planeWidth[v22] = planeWidth[v17] / v18;
          a4 += v16 * v15;
          v16 = planeHeight[v17] / v20;
          v12 = v19;
          planeHeight[v22] = v16;
          planeBaseAddress[v22] = a4;
          ++v17;
          v15 = v23;
        }
        while (v19 != v17);
      }
      v24 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      BufferAttributes = (const __CFDictionary *)getBufferAttributes();
      CVPixelBufferCreateWithPlanarBytes(v24, this, v26, (OSType)a3, 0, 0, v12, planeBaseAddress, planeWidth, planeHeight, v29, 0, 0, BufferAttributes, &v27);
      return v27;
    }
    else
    {
      NSLog(CFSTR("%s:%d - ERROR - Only up to 3 planes are supported"), "asPixelBufferMultiPlane", 3452);
      return 0;
    }
  }
  else
  {
    planeWidth[0] = 0;
    v11 = PixelBufferUtils::pixelSizeForPixelFormat(a3, 0);
    CVPixelBufferCreateWithBytes((CFAllocatorRef)*MEMORY[0x24BDBD240], this, a2, (OSType)a3, a4, v11 * this, 0, 0, 0, (CVPixelBufferRef *)planeWidth);
    return (CVPixelBufferRef)planeWidth[0];
  }
}

void PixelBufferUtils::inPlaceColorScaling(PixelBufferUtils *this, __CVBuffer *a2, float a3, float a4, int a5)
{
  unint64_t PixelFormatType;
  unint64_t v9;
  int v10;
  int v11;
  size_t PlaneCount;
  size_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  CGRect *v17;
  vImagePixelCount height;
  char *data;
  size_t rowBytes;
  vImagePixelCount width;
  unint64_t v22;
  float v23;
  vImagePixelCount v24;
  uint64_t i;
  unint64_t v26;
  uint64_t j;
  unint64_t v28;
  int v29;
  __CVBuffer *v30;
  float v31;
  float v32;
  char v33;
  int v34;
  __CVBuffer *v35;
  float v36;
  float v37;
  char v38;
  int v39;
  __CVBuffer *v40;
  float v41;
  float v42;
  char v43;
  vImage_Buffer *p_p;
  char v45;
  OSType v46;
  vImage_Buffer __p;

  v45 = (char)a2;
  PixelFormatType = CVPixelBufferGetPixelFormatType(this);
  v9 = PixelFormatType;
  if ((int)PixelFormatType > 1380401728)
  {
    if ((int)PixelFormatType > 1717856626)
    {
      if ((int)PixelFormatType <= 1751411058)
      {
        if ((_DWORD)PixelFormatType != 1717856627)
        {
          v10 = 1751410032;
LABEL_62:
          if ((_DWORD)PixelFormatType != v10)
            goto LABEL_77;
LABEL_63:
          v35 = this;
          v36 = a3;
          v37 = a4;
          v38 = v45;
          v39 = 0x7FFFFFFF;
LABEL_64:
          scaleColorsRawInPlace<half>(v35, v38, v39, v36, v37);
          return;
        }
      }
      else
      {
        if ((_DWORD)PixelFormatType == 1751411059)
          goto LABEL_63;
        if ((_DWORD)PixelFormatType != 1919365990)
        {
          v11 = 1932996149;
          goto LABEL_24;
        }
      }
      goto LABEL_65;
    }
    if ((int)PixelFormatType > 1380411456)
    {
      if ((_DWORD)PixelFormatType == 1380411457)
      {
        if (a5)
          v39 = 0x7FFFFFFF;
        else
          v39 = 3;
        v35 = this;
        v36 = a3;
        v37 = a4;
        v38 = v45;
        goto LABEL_64;
      }
      if ((_DWORD)PixelFormatType == 1647392359)
        goto LABEL_25;
      if ((_DWORD)PixelFormatType != 1717855600)
        goto LABEL_77;
LABEL_65:
      v30 = this;
      v31 = a3;
      v32 = a4;
      v33 = v45;
      v29 = 0x7FFFFFFF;
      goto LABEL_66;
    }
    if ((_DWORD)PixelFormatType != 1380401729)
    {
      if ((_DWORD)PixelFormatType != 1380410945)
        goto LABEL_77;
      if (a5)
        v29 = 0x7FFFFFFF;
      else
        v29 = 3;
      v30 = this;
      v31 = a3;
      v32 = a4;
      v33 = v45;
LABEL_66:
      scaleColorsRawInPlace<float>(v30, v33, v29, v31, v32);
      return;
    }
LABEL_67:
    if (a5)
      v34 = 0x7FFFFFFF;
    else
      v34 = 3;
    goto LABEL_70;
  }
  if ((int)PixelFormatType > 875704437)
  {
    if ((int)PixelFormatType <= 1111970368)
    {
      if ((_DWORD)PixelFormatType == 875704438)
      {
LABEL_71:
        v40 = this;
        v41 = a3;
        v42 = a4;
        v43 = v45;
        v34 = 0x7FFFFFFF;
        goto LABEL_72;
      }
      if ((_DWORD)PixelFormatType != 1094862674)
        goto LABEL_77;
LABEL_57:
      if (a5)
        v34 = 0x7FFFFFFF;
      else
        v34 = 0;
LABEL_70:
      v40 = this;
      v41 = a3;
      v42 = a4;
      v43 = v45;
LABEL_72:
      scaleColorsRawInPlace<unsigned char>(v40, v43, v34, v41, v42);
      return;
    }
    if ((_DWORD)PixelFormatType != 1111970369)
    {
      if ((_DWORD)PixelFormatType != 1278226534)
      {
        v10 = 1278226536;
        goto LABEL_62;
      }
      goto LABEL_65;
    }
    goto LABEL_67;
  }
  if ((int)PixelFormatType <= 825437746)
  {
    if ((_DWORD)PixelFormatType != 32)
    {
      v11 = 825306677;
LABEL_24:
      if ((_DWORD)PixelFormatType == v11)
        goto LABEL_25;
LABEL_77:
      PixelBufferUtils::pixelFormatAsString(PixelFormatType, (char *)&__p);
      if ((__p.width & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (vImage_Buffer *)__p.data;
      NSLog(CFSTR("%s:%d - ERROR - pixel format %08x (\"%s\") not supported\n"), "inPlaceColorScaling", 3700, v9, p_p);
      if (SHIBYTE(__p.width) < 0)
        operator delete(__p.data);
      return;
    }
    goto LABEL_57;
  }
  if ((_DWORD)PixelFormatType != 825437747)
  {
    if ((_DWORD)PixelFormatType != 843264104)
    {
      if ((_DWORD)PixelFormatType != 875704422)
        goto LABEL_77;
      goto LABEL_71;
    }
    goto LABEL_63;
  }
LABEL_25:
  CVPixelBufferLockBaseAddress(this, 0);
  v46 = CVPixelBufferGetPixelFormatType(this);
  PlaneCount = CVPixelBufferGetPlaneCount(this);
  v13 = PlaneCount;
  v14 = 0;
  v15 = 0;
  if (PlaneCount <= 1)
    v16 = 1;
  else
    v16 = PlaneCount;
  v17 = (CGRect *)MEMORY[0x24BDBF090];
  do
  {
    if (v13)
    {
      PixelBufferUtils::asVImageBuffer(this, (__CVBuffer *)v14, *v17, &__p);
    }
    else
    {
      PixelBufferUtils::asVImageBuffer(this, *v17, &__p);
      v14 = 0;
    }
    data = (char *)__p.data;
    height = __p.height;
    width = __p.width;
    rowBytes = __p.rowBytes;
    v22 = PixelBufferUtils::componentsPerPixelForPixelFormat((PixelBufferUtils *)v46, v14);
    if (height)
    {
      v24 = width * v22;
      if (width * v22)
      {
        if ((v45 & 1) != 0)
        {
          for (i = 0; i != height; ++i)
          {
            v26 = 0;
            do
            {
              if (v26 % v22 != 0x7FFFFFFF)
              {
                LOWORD(v23) = *(_WORD *)&data[2 * v26];
                v23 = a4 + (float)((float)LODWORD(v23) * a3);
                *(_WORD *)&data[2 * v26] = (int)v23;
              }
              ++v26;
            }
            while (v24 != v26);
            data += rowBytes;
          }
        }
        else
        {
          for (j = 0; j != height; ++j)
          {
            v28 = 0;
            do
            {
              if (v28 % v22 != 0x7FFFFFFF)
              {
                LOWORD(v23) = *(_WORD *)&data[2 * v28];
                v23 = (float)((float)LODWORD(v23) + a4) * a3;
                *(_WORD *)&data[2 * v28] = (int)v23;
              }
              ++v28;
            }
            while (v24 != v28);
            data += rowBytes;
          }
        }
      }
    }
    v14 = ++v15;
  }
  while (v16 > v15);
  CVPixelBufferUnlockBaseAddress(this, 0);
}

void sub_20B6C62A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t scaleColorsRawInPlace<float>(__CVBuffer *a1, char a2, int a3, float a4, float a5)
{
  size_t PlaneCount;
  size_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  CGRect *v14;
  vImagePixelCount height;
  float *data;
  size_t rowBytes;
  vImagePixelCount width;
  unint64_t v19;
  vImagePixelCount v20;
  uint64_t i;
  unint64_t v22;
  uint64_t j;
  unint64_t v24;
  unint64_t v27;
  OSType PixelFormatType;
  vImage_Buffer v29;

  CVPixelBufferLockBaseAddress(a1, 0);
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  PlaneCount = CVPixelBufferGetPlaneCount(a1);
  v10 = PlaneCount;
  v11 = 0;
  v12 = 0;
  if (PlaneCount <= 1)
    v13 = 1;
  else
    v13 = PlaneCount;
  v27 = v13;
  v14 = (CGRect *)MEMORY[0x24BDBF090];
  do
  {
    if (v10)
    {
      PixelBufferUtils::asVImageBuffer(a1, (__CVBuffer *)v11, *v14, &v29);
    }
    else
    {
      PixelBufferUtils::asVImageBuffer(a1, *v14, &v29);
      v11 = 0;
    }
    data = (float *)v29.data;
    height = v29.height;
    width = v29.width;
    rowBytes = v29.rowBytes;
    v19 = PixelBufferUtils::componentsPerPixelForPixelFormat((PixelBufferUtils *)PixelFormatType, v11);
    if (height)
    {
      v20 = width * v19;
      if (width * v19)
      {
        if ((a2 & 1) != 0)
        {
          for (i = 0; i != height; ++i)
          {
            v22 = 0;
            do
            {
              if (v22 % v19 != a3)
                data[v22] = a5 + (float)(data[v22] * a4);
              ++v22;
            }
            while (v20 != v22);
            data = (float *)((char *)data + rowBytes);
          }
        }
        else
        {
          for (j = 0; j != height; ++j)
          {
            v24 = 0;
            do
            {
              if (v24 % v19 != a3)
                data[v24] = (float)(data[v24] + a5) * a4;
              ++v24;
            }
            while (v20 != v24);
            data = (float *)((char *)data + rowBytes);
          }
        }
      }
    }
    v11 = ++v12;
  }
  while (v27 > v12);
  return CVPixelBufferUnlockBaseAddress(a1, 0);
}

uint64_t scaleColorsRawInPlace<half>(__CVBuffer *a1, char a2, int a3, float a4, float a5)
{
  size_t PlaneCount;
  size_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  CGRect *v14;
  vImagePixelCount height;
  char *data;
  size_t rowBytes;
  vImagePixelCount width;
  unint64_t v19;
  vImagePixelCount v20;
  uint64_t i;
  unint64_t v22;
  uint64_t j;
  unint64_t v31;
  unint64_t v37;
  OSType PixelFormatType;
  vImage_Buffer v39;

  CVPixelBufferLockBaseAddress(a1, 0);
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  PlaneCount = CVPixelBufferGetPlaneCount(a1);
  v10 = PlaneCount;
  v11 = 0;
  v12 = 0;
  if (PlaneCount <= 1)
    v13 = 1;
  else
    v13 = PlaneCount;
  v37 = v13;
  v14 = (CGRect *)MEMORY[0x24BDBF090];
  do
  {
    if (v10)
    {
      PixelBufferUtils::asVImageBuffer(a1, (__CVBuffer *)v11, *v14, &v39);
    }
    else
    {
      PixelBufferUtils::asVImageBuffer(a1, *v14, &v39);
      v11 = 0;
    }
    data = (char *)v39.data;
    height = v39.height;
    width = v39.width;
    rowBytes = v39.rowBytes;
    v19 = PixelBufferUtils::componentsPerPixelForPixelFormat((PixelBufferUtils *)PixelFormatType, v11);
    if (height)
    {
      v20 = width * v19;
      if (width * v19)
      {
        if ((a2 & 1) != 0)
        {
          for (i = 0; i != height; ++i)
          {
            v22 = 0;
            do
            {
              if (v22 % v19 != a3)
              {
                _H0 = *(_WORD *)&data[2 * v22];
                __asm { FCVT            S0, H0 }
                _S0 = a5 + (float)(_S0 * a4);
                __asm { FCVT            H0, S0 }
                *(_WORD *)&data[2 * v22] = LOWORD(_S0);
              }
              ++v22;
            }
            while (v20 != v22);
            data += rowBytes;
          }
        }
        else
        {
          for (j = 0; j != height; ++j)
          {
            v31 = 0;
            do
            {
              if (v31 % v19 != a3)
              {
                _H0 = *(_WORD *)&data[2 * v31];
                __asm { FCVT            S0, H0 }
                _S0 = (float)(_S0 + a5) * a4;
                __asm { FCVT            H0, S0 }
                *(_WORD *)&data[2 * v31] = LOWORD(_S0);
              }
              ++v31;
            }
            while (v20 != v31);
            data += rowBytes;
          }
        }
      }
    }
    v11 = ++v12;
  }
  while (v37 > v12);
  return CVPixelBufferUnlockBaseAddress(a1, 0);
}

uint64_t scaleColorsRawInPlace<unsigned char>(__CVBuffer *a1, char a2, int a3, float a4, float a5)
{
  size_t PlaneCount;
  size_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  CGRect *v14;
  vImagePixelCount height;
  _BYTE *data;
  size_t rowBytes;
  vImagePixelCount width;
  unint64_t v19;
  float v20;
  vImagePixelCount v21;
  uint64_t i;
  unint64_t v23;
  uint64_t j;
  unint64_t v25;
  unint64_t v28;
  OSType PixelFormatType;
  vImage_Buffer v30;

  CVPixelBufferLockBaseAddress(a1, 0);
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  PlaneCount = CVPixelBufferGetPlaneCount(a1);
  v10 = PlaneCount;
  v11 = 0;
  v12 = 0;
  if (PlaneCount <= 1)
    v13 = 1;
  else
    v13 = PlaneCount;
  v28 = v13;
  v14 = (CGRect *)MEMORY[0x24BDBF090];
  do
  {
    if (v10)
    {
      PixelBufferUtils::asVImageBuffer(a1, (__CVBuffer *)v11, *v14, &v30);
    }
    else
    {
      PixelBufferUtils::asVImageBuffer(a1, *v14, &v30);
      v11 = 0;
    }
    data = v30.data;
    height = v30.height;
    width = v30.width;
    rowBytes = v30.rowBytes;
    v19 = PixelBufferUtils::componentsPerPixelForPixelFormat((PixelBufferUtils *)PixelFormatType, v11);
    if (height)
    {
      v21 = width * v19;
      if (width * v19)
      {
        if ((a2 & 1) != 0)
        {
          for (i = 0; i != height; ++i)
          {
            v23 = 0;
            do
            {
              if (v23 % v19 != a3)
              {
                LOBYTE(v20) = data[v23];
                v20 = a5 + (float)((float)LODWORD(v20) * a4);
                data[v23] = (int)v20;
              }
              ++v23;
            }
            while (v21 != v23);
            data += rowBytes;
          }
        }
        else
        {
          for (j = 0; j != height; ++j)
          {
            v25 = 0;
            do
            {
              if (v25 % v19 != a3)
              {
                LOBYTE(v20) = data[v25];
                v20 = (float)((float)LODWORD(v20) + a5) * a4;
                data[v25] = (int)v20;
              }
              ++v25;
            }
            while (v21 != v25);
            data += rowBytes;
          }
        }
      }
    }
    v11 = ++v12;
  }
  while (v28 > v12);
  return CVPixelBufferUnlockBaseAddress(a1, 0);
}

uint64_t PixelBufferUtils::rotationAngleAndMirroringFromExifOrientation(PixelBufferUtils *this, char *a2, BOOL *a3)
{
  uint64_t result;
  char v4;

  switch((int)this)
  {
    case 2:
      result = 0;
      v4 = 1;
      break;
    case 3:
      v4 = 0;
      result = 180;
      break;
    case 4:
      v4 = 1;
      result = 180;
      break;
    case 5:
      v4 = 1;
      goto LABEL_10;
    case 6:
      v4 = 0;
      result = 90;
      break;
    case 7:
      v4 = 1;
      result = 90;
      break;
    case 8:
      v4 = 0;
LABEL_10:
      result = 270;
      break;
    default:
      result = 0;
      v4 = 0;
      break;
  }
  if (a2)
    *a2 = v4;
  return result;
}

uint64_t PixelBufferUtils::rotationBetweenOrientations(PixelBufferUtils *this, CGImagePropertyOrientation a2, CGImagePropertyOrientation a3)
{
  int v3;
  int v4;
  int v5;
  uint64_t result;
  unsigned int v7;
  unsigned int v8;

  switch((int)this)
  {
    case 2:
      v3 = 0;
      v4 = 1;
      break;
    case 3:
      v4 = 0;
      v3 = -180;
      break;
    case 4:
      v4 = 1;
      v3 = -180;
      break;
    case 5:
      v4 = 1;
      goto LABEL_10;
    case 6:
      v4 = 0;
      v3 = -90;
      break;
    case 7:
      v4 = 1;
      v3 = -90;
      break;
    case 8:
      v4 = 0;
LABEL_10:
      v3 = -270;
      break;
    default:
      v3 = 0;
      v4 = 0;
      break;
  }
  v5 = 0;
  switch(a2)
  {
    case kCGImagePropertyOrientationUpMirrored:
      goto LABEL_17;
    case kCGImagePropertyOrientationDown:
      v5 = 180;
      if ((v4 & 1) == 0)
        goto LABEL_25;
      return 0xFFFFFFFFLL;
    case kCGImagePropertyOrientationDownMirrored:
      v5 = 180;
      if (v4)
        goto LABEL_25;
      return 0xFFFFFFFFLL;
    case kCGImagePropertyOrientationLeftMirrored:
      v5 = 270;
LABEL_17:
      if (v4)
        goto LABEL_25;
      return 0xFFFFFFFFLL;
    case kCGImagePropertyOrientationRight:
      v5 = 90;
      goto LABEL_20;
    case kCGImagePropertyOrientationRightMirrored:
      v5 = 90;
      if (v4)
        goto LABEL_25;
      return 0xFFFFFFFFLL;
    case kCGImagePropertyOrientationLeft:
      v5 = 270;
      if ((v4 & 1) == 0)
        goto LABEL_25;
      return 0xFFFFFFFFLL;
    default:
LABEL_20:
      if ((v4 & 1) != 0)
        return 0xFFFFFFFFLL;
LABEL_25:
      v7 = v5 + v3;
      v8 = v5 + v3 + 360;
      if (v7 <= 0xFFFFFE97)
        result = v7;
      else
        result = v8;
      if ((int)result > 179)
      {
        if ((_DWORD)result == 180)
        {
          return 2;
        }
        else
        {
          if ((_DWORD)result != 270)
            return 0xFFFFFFFFLL;
          return 1;
        }
      }
      else if ((_DWORD)result)
      {
        if ((_DWORD)result == 90)
          return 3;
        return 0xFFFFFFFFLL;
      }
      return result;
  }
}

__CVBuffer *PixelBufferUtils::savePlyFromDepthBuffer(__CVBuffer *this, __CVBuffer *a2, const char *a3, double a4, CGPoint a5, float a6, float a7, float a8, char a9)
{
  int v10;
  double y;
  __CVBuffer *v15;
  size_t Width;
  size_t Height;
  size_t BytesPerRow;
  float32x4_t *BaseAddress;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  float64x2_t v27;
  float32x4_t v28;
  int64x2_t v29;
  float32x4_t *v30;
  float v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  size_t v37;
  float32x4_t *v39;
  unint64_t v40;
  int64x2_t v41;
  int64x2_t v42;
  float *v43;
  float32x4_t v44;
  float *v45;
  float v46;
  float v47;
  FILE *v48;
  unint64_t v49;
  unsigned int v50;
  unsigned int v51;
  float v52;
  BOOL v53;
  unsigned int v54;
  unsigned int v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  int v66;
  float v67;
  float v68;
  unsigned int v69;
  unsigned int v70;
  double x;
  float32x4x3_t v74;

  if (this)
  {
    v10 = (int)a3;
    y = a5.y;
    v15 = this;
    x = a5.x;
    Width = CVPixelBufferGetWidth(this);
    Height = CVPixelBufferGetHeight(v15);
    CVPixelBufferLockBaseAddress(v15, 1uLL);
    BytesPerRow = CVPixelBufferGetBytesPerRow(v15);
    BaseAddress = (float32x4_t *)CVPixelBufferGetBaseAddress(v15);
    v20 = operator new[]();
    v21 = v20;
    if (Height)
    {
      if (!Width)
        goto LABEL_28;
      v22 = 0;
      v23 = 0;
      v24 = v20 + 4;
      v25 = !is_mul_ok(Width - 1, 0xCuLL);
      v26 = 12 * Width - 12;
      v27 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&x, 0);
      v28 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0);
      v29 = vdupq_n_s64(4uLL);
      v30 = BaseAddress;
      while (1)
      {
        v31 = (double)v22 - y;
        v32 = v23;
        if (Width >= 0xC)
        {
          v33 = 0;
          v34 = 4 * v23;
          v35 = v20 + v34;
          v36 = v20 + v34 + v26 < (unint64_t)(v20 + v34) || v25;
          if (v20 + 8 + v34 + v26 < (unint64_t)(v20 + 8 + v34)
            || v24 + v34 + v26 < (unint64_t)(v24 + v34)
            || (v36 & 1) != 0)
          {
            goto LABEL_22;
          }
          v37 = v20 + 12 * Width + v34;
          if (v35 >= (unint64_t)BaseAddress->u64 + 4 * Width + (BytesPerRow & 0xFFFFFFFFFFFFFFFCLL) * v22
            || (unint64_t)v30 >= v37)
          {
            v39 = v30;
            v40 = Width & 0xFFFFFFFFFFFFFFFCLL;
            v41 = (int64x2_t)xmmword_20B6D29B0;
            v42 = (int64x2_t)xmmword_20B6D29A0;
            v43 = (float *)(v20 + 4 * v32);
            do
            {
              v44 = *v39++;
              v74.val[2] = v44;
              v74.val[0] = vdivq_f32(vmulq_f32(v44, vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vsubq_f64(vcvtq_f64_u64((uint64x2_t)v41), v27)), vsubq_f64(vcvtq_f64_u64((uint64x2_t)v42), v27))), v28);
              v74.val[1] = vdivq_f32(vmulq_n_f32(v44, v31), v28);
              vst3q_f32(v43, v74);
              v43 += 12;
              v42 = vaddq_s64(v42, v29);
              v41 = vaddq_s64(v41, v29);
              v40 -= 4;
            }
            while (v40);
            v32 += 3 * (Width & 0xFFFFFFFFFFFFFFFCLL);
            v33 = Width & 0xFFFFFFFFFFFFFFFCLL;
            v23 = v32;
            if (Width == (Width & 0xFFFFFFFFFFFFFFFCLL))
              goto LABEL_24;
            goto LABEL_22;
          }
        }
        v33 = 0;
LABEL_22:
        v45 = (float *)(v24 + 4 * v32);
        v23 = 3 * Width + v32 - 3 * v33;
        do
        {
          v46 = v30->f32[v33];
          v47 = (double)v33 - x;
          *(v45 - 1) = (float)(v46 * v47) / *(float *)&a4;
          *v45 = (float)(v46 * v31) / *(float *)&a4;
          v45[1] = v46;
          v45 += 3;
          ++v33;
        }
        while (Width != v33);
LABEL_24:
        v30 = (float32x4_t *)((char *)v30 + 4 * (BytesPerRow >> 2));
        if (++v22 == Height)
        {
          LODWORD(Width) = v23;
          goto LABEL_28;
        }
      }
    }
    LODWORD(Width) = 0;
LABEL_28:
    CVPixelBufferUnlockBaseAddress(v15, 1uLL);
    v48 = fopen((const char *)a2, "w");
    fwrite("ply\n", 4uLL, 1uLL, v48);
    fwrite("format ascii 1.0\n", 0x11uLL, 1uLL, v48);
    v49 = (int)Width / 3uLL;
    fprintf(v48, "element vertex %ld\n", v49);
    fwrite("property double x\n", 0x12uLL, 1uLL, v48);
    fwrite("property double y\n", 0x12uLL, 1uLL, v48);
    fwrite("property double z\n", 0x12uLL, 1uLL, v48);
    fwrite("property uchar red\n", 0x13uLL, 1uLL, v48);
    fwrite("property uchar green\n", 0x15uLL, 1uLL, v48);
    fwrite("property uchar blue\n", 0x14uLL, 1uLL, v48);
    fwrite("end_header\n", 0xBuLL, 1uLL, v48);
    if (v10)
    {
      a7 = *(float *)(v21 + 8);
      if (Width < 6)
      {
        a8 = *(float *)(v21 + 8);
        if (Width < 3)
          goto LABEL_66;
        goto LABEL_39;
      }
      v50 = 2;
      v51 = 5;
      a8 = *(float *)(v21 + 8);
      do
      {
        v52 = *(float *)(v21 + 4 * v51);
        if (v52 < a7)
          a7 = *(float *)(v21 + 4 * v51);
        if (a8 < v52)
          a8 = *(float *)(v21 + 4 * v51);
        v53 = v49 > v50++;
        v51 += 3;
      }
      while (v53);
    }
    if (Width < 3)
      goto LABEL_66;
LABEL_39:
    if ((a9 & 1) != 0)
    {
      v54 = 1;
      v55 = 1;
      do
      {
        v56 = (float)(*(float *)(v21 + 4 * (v54 + 1)) - a7) / (float)(a8 - a7);
        if (v56 <= 1.0)
          v57 = (float)(*(float *)(v21 + 4 * (v54 + 1)) - a7) / (float)(a8 - a7);
        else
          v57 = 1.0;
        if (v56 >= 0.0)
          v58 = v57;
        else
          v58 = 0.0;
        v59 = 1.5 - fabsf((float)(v58 * 4.0) + -3.0);
        v60 = 1.5 - fabsf((float)(v58 * 4.0) + -2.0);
        v61 = 1.5 - fabsf((float)(v58 * 4.0) + -1.0);
        v62 = 255.0;
        v63 = v59 * 255.0;
        if (v59 > 1.0)
          v63 = 255.0;
        v64 = v60 * 255.0;
        if (v60 > 1.0)
          v64 = 255.0;
        if (v61 <= 1.0)
          v62 = v61 * 255.0;
        if (v59 >= 0.0)
          v65 = v63;
        else
          v65 = 0.0;
        v66 = (int)v65;
        if (v60 >= 0.0)
          v67 = v64;
        else
          v67 = 0.0;
        if (v61 >= 0.0)
          v68 = v62;
        else
          v68 = 0.0;
        fprintf(v48, "%f %f %f %d %d %d\n", *(float *)(v21 + 4 * (v54 - 1)), (float)(a6 - *(float *)(v21 + 4 * v54)), *(float *)(v21 + 4 * (v54 + 1)), v66, (int)v67, (int)v68);
        v53 = v49 > v55++;
        v54 += 3;
      }
      while (v53);
    }
    else
    {
      v69 = 1;
      v70 = 1;
      do
      {
        fprintf(v48, "%f %f %f %d %d %d\n", *(float *)(v21 + 4 * (v69 - 1)), (float)(a6 - *(float *)(v21 + 4 * v69)), *(float *)(v21 + 4 * (v69 + 1)), 255, 255, 255);
        v53 = v49 > v70++;
        v69 += 3;
      }
      while (v53);
    }
LABEL_66:
    fclose(v48);
    JUMPOUT(0x20BD36480);
  }
  return this;
}

uint64_t PixelBufferUtils::addTextToPixelBuffer(PixelBufferUtils *this, __CVBuffer *a2, const char *a3, CGPoint a4)
{
  double y;
  double x;
  unint64_t PixelFormatType;
  unint64_t Width;
  size_t Height;
  size_t v12;
  double v13;
  void **v16;
  CGColorSpace *DeviceRGB;
  void *BaseAddress;
  size_t BytesPerRow;
  CGContext *v20;
  __int128 v21;
  CGColorRef GenericRGB;
  CGColorRef v23;
  CTFontRef v24;
  unsigned __int8 v25;
  id v26;
  void *v27;
  const __CFAttributedString *v28;
  const __CTLine *v29;
  float v30;
  float v31;
  uint64_t v32;
  CGAffineTransform v33;
  void *__p[2];
  char v35;
  _QWORD v36[3];
  _QWORD v37[4];

  v37[3] = *MEMORY[0x24BDAC8D0];
  if (!this || !a2)
  {
    NSLog(CFSTR("%s:%d - ERROR - cannot add text to pixel buffer. illegal argument"), a2, a3, a4.x, a4.y, "addTextToPixelBuffer", 3998);
    return 0;
  }
  y = a4.y;
  x = a4.x;
  PixelFormatType = CVPixelBufferGetPixelFormatType(this);
  Width = CVPixelBufferGetWidth(this);
  Height = CVPixelBufferGetHeight(this);
  v12 = Height;
  if ((_DWORD)PixelFormatType != 32 && (_DWORD)PixelFormatType != 1111970369)
  {
    PixelBufferUtils::pixelFormatAsString(PixelFormatType, (char *)__p);
    if (v35 >= 0)
      v16 = __p;
    else
      v16 = (void **)__p[0];
    NSLog(CFSTR("%s:%d - ERROR - pixel format %08x (\"%s\") not supported\n"), "addTextToPixelBuffer", 4008, PixelFormatType, v16);
    if (v35 < 0)
      operator delete(__p[0]);
    return 0;
  }
  v13 = (double)Height;
  if (x > (double)Width || y > v13)
  {
    NSLog(CFSTR("%s:%d - ERROR - cannot add text to pixel buffer. illegal text location"), "addTextToPixelBuffer", 4014);
    return 0;
  }
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  CVPixelBufferLockBaseAddress(this, 0);
  BaseAddress = CVPixelBufferGetBaseAddress(this);
  BytesPerRow = CVPixelBufferGetBytesPerRow(this);
  v20 = CGBitmapContextCreate(BaseAddress, Width, v12, 8uLL, BytesPerRow, DeviceRGB, 6u);
  v21 = *(_OWORD *)(MEMORY[0x24BDBD8B8] + 16);
  *(_OWORD *)&v33.a = *MEMORY[0x24BDBD8B8];
  *(_OWORD *)&v33.c = v21;
  *(_OWORD *)&v33.tx = *(_OWORD *)(MEMORY[0x24BDBD8B8] + 32);
  CGContextSetTextMatrix(v20, &v33);
  CGContextSetTextDrawingMode(v20, kCGTextFill);
  GenericRGB = CGColorCreateGenericRGB(1.0, 1.0, 1.0, 1.0);
  v23 = CGColorCreateGenericRGB(0.0, 0.0, 0.0, 0.0);
  v24 = CTFontCreateWithName(CFSTR("Courier"), (double)(unint64_t)a3, 0);
  if ((v25 & 1) == 0)
  {
    {
      v32 = *MEMORY[0x24BDC4EE0];
      v36[0] = *MEMORY[0x24BDC4C28];
      v36[1] = v32;
      v37[0] = v24;
      v37[1] = GenericRGB;
      v36[2] = *MEMORY[0x24BDC4C10];
      v37[2] = v23;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v37, v36, 3);
      PixelBufferUtils::addTextToPixelBuffer(__CVBuffer *,char const*,unsigned long,CGPoint)::stringAttributes = objc_claimAutoreleasedReturnValue();
    }
  }
  v26 = objc_alloc(MEMORY[0x24BDD1458]);
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", a2);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = (const __CFAttributedString *)objc_msgSend(v26, "initWithString:attributes:", v27, PixelBufferUtils::addTextToPixelBuffer(__CVBuffer *,char const*,unsigned long,CGPoint)::stringAttributes);

  v29 = CTLineCreateWithAttributedString(v28);
  v30 = x;
  v31 = v13 - y;
  CGContextSetTextPosition(v20, v30, v31);
  CTLineDraw(v29, v20);
  CVPixelBufferUnlockBaseAddress(this, 0);
  CFRelease(DeviceRGB);
  CGContextRelease(v20);
  CFRelease(GenericRGB);
  CFRelease(v23);
  CFRelease(v24);

  return 1;
}

void sub_20B6C731C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B6C7334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;

  _Unwind_Resume(a1);
}

uint64_t PixelBufferUtilsSession::PixelBufferUtilsSession(uint64_t a1, int a2, signed int a3, int a4, int a5, double a6, double a7, double a8, double a9, CGFloat a10, CGFloat a11, CGFloat a12, CGFloat a13)
{
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  BOOL v26;
  int v27;
  int v28;
  int v29;
  VTPixelTransferSessionRef VTTransferSession;
  double v32;
  const __CFAllocator *v33;
  const __CFDictionary *BufferAttributes;
  CVReturn v35;
  CVPixelBufferRef v36;
  int v37;
  CVPixelBufferRef v38;
  OpaqueVTPixelTransferSession *v39;
  CVPixelBufferRef pixelBufferOut;
  CGRect v41;
  CGRect v42;

  v16 = a13;
  v17 = a12;
  v18 = a11;
  v19 = a10;
  v20 = a9;
  v21 = a8;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(double *)(a1 + 24) = a6;
  *(double *)(a1 + 32) = a7;
  *(_DWORD *)(a1 + 40) = a2;
  *(double *)(a1 + 48) = a8;
  *(double *)(a1 + 56) = a9;
  *(_DWORD *)(a1 + 64) = a3;
  *(CGFloat *)(a1 + 72) = a10;
  *(CGFloat *)(a1 + 80) = a11;
  *(CGFloat *)(a1 + 88) = a12;
  *(CGFloat *)(a1 + 96) = a13;
  *(_DWORD *)(a1 + 104) = a4;
  *(_DWORD *)(a1 + 108) = a5;
  v41.origin.x = a10;
  v41.origin.y = a11;
  v41.size.width = a12;
  v41.size.height = a13;
  if (CGRectIsEmpty(v41))
  {
    v19 = 0.0;
    v18 = 0.0;
    v17 = a6;
    v16 = a7;
  }
  if (a2 == a3 && a6 == v21 && a7 == v20)
  {
    v26 = (a5 | a4) == 0;
    if (v17 == a6 && v16 == a7)
    {
      if (!(a5 | a4))
      {
        LOBYTE(v27) = 1;
        goto LABEL_37;
      }
      v27 = 0;
      goto LABEL_10;
    }
  }
  else
  {
    v26 = (a5 | a4) == 0;
  }
  if (a2 <= 1751410031)
  {
    if (a2 > 1717855599)
    {
      if (a2 == 1717855600 || a2 == 1717856627)
        goto LABEL_53;
    }
    else if (a2 == 825306677 || a2 == 825437747)
    {
      goto LABEL_53;
    }
  }
  else if (a2 <= 1919365989)
  {
    if (a2 == 1751410032 || a2 == 1751411059)
      goto LABEL_53;
  }
  else if (a2 == 1919365990 || a2 == 1919365992 || a2 == 1932996149)
  {
    goto LABEL_53;
  }
  if (a3 <= 1751410031)
  {
    if (a3 > 1717855599)
    {
      if (a3 != 1717855600)
      {
        v29 = 1717856627;
        goto LABEL_52;
      }
    }
    else if (a3 != 825306677)
    {
      v29 = 825437747;
      goto LABEL_52;
    }
LABEL_53:
    NSLog(CFSTR("%s:%d - ERROR - transfer session is not supported for pixel format"), "PixelBufferUtilsSession", 4145);
    return a1;
  }
  if (a3 <= 1919365989)
  {
    if (a3 != 1751410032)
    {
      v29 = 1751411059;
      goto LABEL_52;
    }
    goto LABEL_53;
  }
  if (a3 == 1919365990 || a3 == 1919365992)
    goto LABEL_53;
  v29 = 1932996149;
LABEL_52:
  if (a3 == v29)
    goto LABEL_53;
  v27 = 1;
  if (v26)
    goto LABEL_37;
LABEL_10:
  if (a3 > 1717856626)
  {
    if (a3 > 1919365989)
    {
      if (a3 == 1919365990 || a3 == 1932996149)
        goto LABEL_60;
      v28 = 1919365992;
      goto LABEL_59;
    }
    if (a3 != 1717856627)
    {
      v28 = 1751411059;
      goto LABEL_59;
    }
LABEL_60:
    NSLog(CFSTR("%s:%d - ERROR - rotation session is not supported for pixel format"), "PixelBufferUtilsSession", 4151);
    return a1;
  }
  if (a3 > 1380410944)
  {
    if (a3 != 1380410945)
    {
      v28 = 1380411457;
      goto LABEL_59;
    }
    goto LABEL_60;
  }
  if (a3 == 825306677)
    goto LABEL_60;
  v28 = 825437747;
LABEL_59:
  if (a3 == v28)
    goto LABEL_60;
  if (!v27)
    goto LABEL_39;
  v32 = (double)(unint64_t)v21;
  if ((a4 & 0xFFFFFFFD) == 1)
  {
    v21 = v20;
    v20 = v32;
  }
  pixelBufferOut = 0;
  v33 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  BufferAttributes = (const __CFDictionary *)getBufferAttributes();
  v35 = CVPixelBufferCreate(v33, (unint64_t)v21, (unint64_t)v20, a3, BufferAttributes, &pixelBufferOut);
  v36 = pixelBufferOut;
  if (v35)
    v36 = 0;
  *(_QWORD *)a1 = v36;
  if (!v36)
  {
    NSLog(CFSTR("%s:%d - ERROR - failed allocating intermediate buffer for session"), "PixelBufferUtilsSession", 4175);
    return a1;
  }
  LOBYTE(v27) = 0;
LABEL_37:
  v42.origin.x = v19;
  v42.origin.y = v18;
  v42.size.width = v17;
  v42.size.height = v16;
  VTTransferSession = createVTTransferSession(v42, *MEMORY[0x24BDBF090]);
  *(_QWORD *)(a1 + 8) = VTTransferSession;
  if (!VTTransferSession)
  {
    CVPixelBufferRelease(*(CVPixelBufferRef *)a1);
    *(_QWORD *)a1 = 0;
    return a1;
  }
  if ((v27 & 1) == 0)
  {
LABEL_39:
    if (a5)
    {
      NSLog(CFSTR("%s:%d - ERROR - reflection not supported at the moment"), "createVTRotationSession", 781);
    }
    else
    {
      pixelBufferOut = 0;
      v37 = VTImageRotationSessionCreate();
      v38 = pixelBufferOut;
      if (!v37)
      {
        *(_QWORD *)(a1 + 16) = pixelBufferOut;
        if (v38)
          return a1;
        goto LABEL_73;
      }
      MEMORY[0x20BD361E0](pixelBufferOut);
      CFRelease(pixelBufferOut);
      NSLog(CFSTR("%s:%d - ERROR - Unable to create image rotation session"), "createVTRotationSession", 802);
    }
    *(_QWORD *)(a1 + 16) = 0;
LABEL_73:
    CVPixelBufferRelease(*(CVPixelBufferRef *)a1);
    *(_QWORD *)a1 = 0;
    v39 = *(OpaqueVTPixelTransferSession **)(a1 + 8);
    if (v39)
    {
      VTPixelTransferSessionInvalidate(v39);
      CFRelease(*(CFTypeRef *)(a1 + 8));
    }
    *(_QWORD *)(a1 + 8) = 0;
  }
  return a1;
}

void PixelBufferUtilsSession::~PixelBufferUtilsSession(PixelBufferUtilsSession *this)
{
  OpaqueVTPixelTransferSession *var1;

  CVPixelBufferRelease(this->var0);
  this->var0 = 0;
  if (this->var2)
  {
    MEMORY[0x20BD361E0]();
    CFRelease(this->var2);
  }
  this->var2 = 0;
  var1 = this->var1;
  if (var1)
  {
    VTPixelTransferSessionInvalidate(var1);
    CFRelease(this->var1);
  }
  this->var1 = 0;
}

{
  OpaqueVTPixelTransferSession *var1;

  CVPixelBufferRelease(this->var0);
  this->var0 = 0;
  if (this->var2)
  {
    MEMORY[0x20BD361E0]();
    CFRelease(this->var2);
  }
  this->var2 = 0;
  var1 = this->var1;
  if (var1)
  {
    VTPixelTransferSessionInvalidate(var1);
    CFRelease(this->var1);
  }
  this->var1 = 0;
}

CVPixelBufferRef PixelBufferUtilsSession::createOutputPixelBuffer(PixelBufferUtilsSession *this)
{
  double width;
  double height;
  OSType var6;
  const __CFAllocator *v4;
  const __CFDictionary *BufferAttributes;
  CVPixelBufferRef pixelBufferOut;

  width = this->var5.width;
  height = this->var5.height;
  var6 = this->var6;
  pixelBufferOut = 0;
  v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  BufferAttributes = (const __CFDictionary *)getBufferAttributes();
  if (CVPixelBufferCreate(v4, (unint64_t)width, (unint64_t)height, var6, BufferAttributes, &pixelBufferOut))
  {
    return 0;
  }
  else
  {
    return pixelBufferOut;
  }
}

BOOL PixelBufferUtilsSession::verifyInput(PixelBufferUtilsSession *this, CVPixelBufferRef pixelBuffer)
{
  unsigned int var4;
  double height;
  double width;

  if (!pixelBuffer)
    return 0;
  var4 = this->var4;
  width = this->var3.width;
  height = this->var3.height;
  return width == (double)CVPixelBufferGetWidth(pixelBuffer)
      && height == (double)CVPixelBufferGetHeight(pixelBuffer)
      && CVPixelBufferGetPixelFormatType(pixelBuffer) == var4;
}

BOOL PixelBufferUtilsSession::verifyOutput(PixelBufferUtilsSession *this, CVPixelBufferRef pixelBuffer)
{
  unsigned int var6;
  double height;
  double width;

  if (!pixelBuffer)
    return 0;
  var6 = this->var6;
  width = this->var5.width;
  height = this->var5.height;
  return width == (double)CVPixelBufferGetWidth(pixelBuffer)
      && height == (double)CVPixelBufferGetHeight(pixelBuffer)
      && CVPixelBufferGetPixelFormatType(pixelBuffer) == var6;
}

BOOL PixelBufferUtilsSession::setScalingMode(uint64_t a1, int a2)
{
  const void *v2;
  const __CFString *v3;
  CFTypeRef *v4;

  v2 = *(const void **)(a1 + 8);
  if (v2)
  {
    if (a2 == 1)
    {
      v3 = (const __CFString *)*MEMORY[0x24BDF9680];
      v4 = (CFTypeRef *)MEMORY[0x24BDF98E8];
      return VTSessionSetProperty(v2, v3, *v4) == 0;
    }
    if (!a2)
    {
      v3 = (const __CFString *)*MEMORY[0x24BDF9680];
      v4 = (CFTypeRef *)MEMORY[0x24BDF98F0];
      return VTSessionSetProperty(v2, v3, *v4) == 0;
    }
    NSLog(CFSTR("%s:%d - ERROR - unknown scaling mode"), "setScalingMode", 4249);
  }
  else
  {
    NSLog(CFSTR("%s:%d - ERROR - session does not support scaling"), "setScalingMode", 4239);
  }
  return 0;
}

uint64_t PixelBufferUtilsSession::setHardwareAcceleration(PixelBufferUtilsSession *this, int a2)
{
  OpaqueVTPixelTransferSession *var1;
  uint64_t v5;
  uint64_t v6;
  CFTypeRef *v7;
  OpaqueVTPixelRotationSession *var2;
  CFTypeRef *v9;

  var1 = this->var1;
  v5 = MEMORY[0x24BDBD270];
  v6 = MEMORY[0x24BDBD268];
  if (var1)
  {
    v7 = (CFTypeRef *)(a2 ? MEMORY[0x24BDBD270] : MEMORY[0x24BDBD268]);
    if (VTSessionSetProperty(var1, (CFStringRef)*MEMORY[0x24BDF9668], *v7))
    {
      NSLog(CFSTR("%s:%d - ERROR - failed setting HW acceleration for pixelTransferSession"), "setHardwareAcceleration", 4265);
      return 0;
    }
  }
  var2 = this->var2;
  if (var2)
  {
    v9 = (CFTypeRef *)(a2 ? v5 : v6);
    if (VTSessionSetProperty(var2, (CFStringRef)*MEMORY[0x24BDF9608], *v9))
    {
      NSLog(CFSTR("%s:%d - ERROR - failed setting HW acceleration for rotationSession"), "setHardwareAcceleration", 4277);
      return 0;
    }
  }
  return 1;
}

uint64_t PixelBufferUtilsSession::run(PixelBufferUtilsSession *this, CVPixelBufferRef pixelBuffer, __CVBuffer *a3)
{
  unsigned int var4;
  double height;
  double width;
  unsigned int var6;
  double v10;
  double v11;
  OpaqueVTPixelTransferSession *var1;
  __CVBuffer *var0;
  __CVBuffer *v14;
  OSStatus v15;
  OpaqueVTPixelRotationSession *var2;
  int v17;
  OpaqueVTPixelRotationSession *v19;

  if (!pixelBuffer
    || (var4 = this->var4,
        width = this->var3.width,
        height = this->var3.height,
        width != (double)CVPixelBufferGetWidth(pixelBuffer))
    || height != (double)CVPixelBufferGetHeight(pixelBuffer)
    || CVPixelBufferGetPixelFormatType(pixelBuffer) != var4
    || !a3
    || (var6 = this->var6, v11 = this->var5.width, v10 = this->var5.height, v11 != (double)CVPixelBufferGetWidth(a3))
    || v10 != (double)CVPixelBufferGetHeight(a3)
    || CVPixelBufferGetPixelFormatType(a3) != var6)
  {
    NSLog(CFSTR("%s:%d - ERROR - provided pixel buffers size/format do not match those at creation time"), "run", 4295);
    return 0;
  }
  var1 = this->var1;
  if (this->var0)
    var0 = this->var0;
  else
    var0 = pixelBuffer;
  if (var1)
  {
    if (this->var0)
      v14 = this->var0;
    else
      v14 = a3;
    v15 = VTPixelTransferSessionTransferImage(var1, pixelBuffer, v14);
    var2 = this->var2;
    if (var2)
    {
      v17 = MEMORY[0x20BD361EC](var2, var0, a3);
      if (!v15)
        goto LABEL_23;
    }
    else if (!v15)
    {
      return 1;
    }
    NSLog(CFSTR("%s:%d - ERROR - pixel transfer session failed"), "run", 4333);
    return 0;
  }
  v19 = this->var2;
  if (!v19)
    return 1;
  v17 = MEMORY[0x20BD361EC](v19, var0, a3);
LABEL_23:
  if (v17)
  {
    NSLog(CFSTR("%s:%d - ERROR - rotation session failed"), "run", 4339);
    return 0;
  }
  return 1;
}

uint64_t PixelBufferUtilsSession::updateCrop(PixelBufferUtilsSession *this, CGRect a2)
{
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  uint64_t result;
  CFDictionaryRef DictionaryRepresentation;
  OSStatus v9;
  double v10;
  double v11;
  double v12;
  double v13;
  CGRect v14;
  CGRect v15;

  if (!this->var1)
  {
    NSLog(CFSTR("%s:%d - ERROR - cannot update crop: pixelBufferUtilsSession does not define a transfer session"), a2.origin.x, a2.origin.y, a2.size.width, a2.size.height, "updateCrop", 4351);
    return 0;
  }
  height = a2.size.height;
  width = a2.size.width;
  y = a2.origin.y;
  x = a2.origin.x;
  if (CGRectEqualToRect(a2, this->var7))
    return 1;
  v14.origin.x = x;
  v14.origin.y = y;
  v14.size.width = width;
  v14.size.height = height;
  if (CGRectIsEmpty(v14))
  {
    DictionaryRepresentation = 0;
  }
  else
  {
    v15.origin.x = x;
    v15.origin.y = y;
    v15.size.width = width;
    v15.size.height = height;
    DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v15);
  }
  v9 = VTSessionSetProperty(this->var1, (CFStringRef)*MEMORY[0x24BDF9688], DictionaryRepresentation);
  if (DictionaryRepresentation)
    CFRelease(DictionaryRepresentation);
  if (v9)
  {
    NSLog(CFSTR("%s:%d - ERROR - pixelBufferUtilsSession failed to update crop"), v10, v11, v12, v13, "updateCrop", 4373);
    return 0;
  }
  this->var7.origin.x = x;
  this->var7.origin.y = y;
  result = 1;
  this->var7.size.width = width;
  this->var7.size.height = height;
  return result;
}

uint64_t PixelBufferUtilsSession::createCropScaleConvertRotateSession(PixelBufferUtilsSession *this, CGSize a2, CGSize a3, CGRect a4, signed int a5, int a6)
{
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  double v12;
  double v13;
  int v14;
  double v15;
  double v16;
  uint64_t v17;
  OpaqueVTPixelTransferSession *v18;

  height = a4.size.height;
  width = a4.size.width;
  y = a4.origin.y;
  x = a4.origin.x;
  v12 = a3.height;
  v13 = a3.width;
  v14 = (int)this;
  v15 = a2.height;
  v16 = a2.width;
  v17 = operator new();
  PixelBufferUtilsSession::PixelBufferUtilsSession(v17, v14, a5, a6, 0, v16, v15, v13, v12, x, y, width, height);
  if (*(_OWORD *)(v17 + 8) == 0)
  {
    CVPixelBufferRelease(*(CVPixelBufferRef *)v17);
    *(_QWORD *)v17 = 0;
    if (*(_QWORD *)(v17 + 16))
    {
      MEMORY[0x20BD361E0]();
      CFRelease(*(CFTypeRef *)(v17 + 16));
    }
    *(_QWORD *)(v17 + 16) = 0;
    v18 = *(OpaqueVTPixelTransferSession **)(v17 + 8);
    if (v18)
    {
      VTPixelTransferSessionInvalidate(v18);
      CFRelease(*(CFTypeRef *)(v17 + 8));
    }
    *(_QWORD *)(v17 + 8) = 0;
    MEMORY[0x20BD36498](v17, 0x1020C403F2F7F0DLL);
    return 0;
  }
  return v17;
}

void sub_20B6C8008(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD36498](v1, 0x1020C403F2F7F0DLL);
  _Unwind_Resume(a1);
}

uint64_t PixelBufferUtilsSession::createCropScaleConvertSession(PixelBufferUtilsSession *this, CGSize a2, CGSize a3, CGRect a4, signed int a5)
{
  return PixelBufferUtilsSession::createCropScaleConvertRotateSession(this, a2, a3, a4, a5, 0);
}

uint64_t PixelBufferUtilsSession::createScaleConvertSession(PixelBufferUtilsSession *this, CGSize a2, CGSize a3, signed int a4)
{
  return PixelBufferUtilsSession::createCropScaleConvertRotateSession(this, a2, a3, *MEMORY[0x24BDBF070], a4, 0);
}

uint64_t PixelBufferUtilsSession::copySession(PixelBufferUtilsSession *this, PixelBufferUtilsSession *a2)
{
  uint64_t v3;
  OpaqueVTPixelTransferSession *v4;

  if (!this)
  {
    NSLog(CFSTR("%s:%d - ERROR - cannot copy null session"), a2, "copySession", 4420);
    return 0;
  }
  v3 = operator new();
  PixelBufferUtilsSession::PixelBufferUtilsSession(v3, this->var4, this->var6, this->var8, this->var9, this->var3.width, this->var3.height, this->var5.width, this->var5.height, this->var7.origin.x, this->var7.origin.y, this->var7.size.width, this->var7.size.height);
  if (*(_OWORD *)(v3 + 8) == 0)
  {
    CVPixelBufferRelease(*(CVPixelBufferRef *)v3);
    *(_QWORD *)v3 = 0;
    if (*(_QWORD *)(v3 + 16))
    {
      MEMORY[0x20BD361E0]();
      CFRelease(*(CFTypeRef *)(v3 + 16));
    }
    *(_QWORD *)(v3 + 16) = 0;
    v4 = *(OpaqueVTPixelTransferSession **)(v3 + 8);
    if (v4)
    {
      VTPixelTransferSessionInvalidate(v4);
      CFRelease(*(CFTypeRef *)(v3 + 8));
    }
    *(_QWORD *)(v3 + 8) = 0;
    MEMORY[0x20BD36498](v3, 0x1020C403F2F7F0DLL);
    return 0;
  }
  return v3;
}

void sub_20B6C8140(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD36498](v1, 0x1020C403F2F7F0DLL);
  _Unwind_Resume(a1);
}

uint64_t PixelBufferUtilsTiledView::TileConfig::TileConfig(uint64_t this)
{
  *(_BYTE *)(this + 8) = 0;
  *(_QWORD *)this = 0;
  return this;
}

{
  *(_BYTE *)(this + 8) = 0;
  *(_QWORD *)this = 0;
  return this;
}

uint64_t PixelBufferUtilsTiledView::TileConfig::TileConfig(uint64_t this, char a2, float a3, float a4)
{
  *(float *)this = a4;
  *(float *)(this + 4) = a3;
  *(_BYTE *)(this + 8) = a2;
  return this;
}

{
  *(float *)this = a4;
  *(float *)(this + 4) = a3;
  *(_BYTE *)(this + 8) = a2;
  return this;
}

int32x2_t PixelBufferUtilsTiledView::TileConfig::TileConfig(PixelBufferUtilsTiledView::TileConfig *this, int32x2_t *a2)
{
  __int8 v2;
  int32x2_t result;

  v2 = a2[1].i8[0];
  result = vrev64_s32(*a2);
  *(int32x2_t *)this = result;
  *((_BYTE *)this + 8) = v2;
  return result;
}

{
  __int8 v2;
  int32x2_t result;

  v2 = a2[1].i8[0];
  result = vrev64_s32(*a2);
  *(int32x2_t *)this = result;
  *((_BYTE *)this + 8) = v2;
  return result;
}

uint64_t *PixelBufferUtilsTiledView::createTiledView(PixelBufferUtilsTiledView *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, PixelBufferUtilsTiledView::TileConfig *a6)
{
  int v6;
  uint64_t *v12;
  uint64_t *v13;
  unint64_t v14;
  double v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = (int)a6;
  v12 = (uint64_t *)operator new();
  v13 = v12;
  v14 = 0;
  *v12 = 0;
  v12[1] = (uint64_t)this;
  v12[2] = a3;
  v12[3] = a2;
  v12[4] = a4;
  v12[6] = 0;
  if (v6)
  {
    v15 = (double)(unint64_t)(a4 * a2) * 0.06;
    if (v15 <= 16.0)
      v14 = 16;
    else
      v14 = (unint64_t)v15;
  }
  v12[5] = v14;
  v16 = a4 * a3;
  is_mul_ok(v16, 0xCuLL);
  v17 = operator new[]();
  if (v16)
  {
    v18 = 0;
    do
    {
      v19 = v17 + v18;
      *(_BYTE *)(v19 + 8) = 0;
      *(_QWORD *)v19 = 0;
      v18 += 12;
    }
    while (12 * v16 != v18);
    *v13 = v17;
    do
    {
      *(_QWORD *)v17 = *(_QWORD *)a5;
      *(_BYTE *)(v17 + 8) = *(_BYTE *)(a5 + 8);
      v17 += 12;
      a5 += 12;
      --v16;
    }
    while (v16);
  }
  else
  {
    *v13 = v17;
  }
  return v13;
}

PixelBufferUtils *PixelBufferUtilsTiledView::render(PixelBufferUtilsTiledView *this, __CVBuffer **a2, uint64_t a3, __CVBuffer *a4, __CVBuffer *a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  BOOL v11;
  const __CFAllocator **v14;
  CGRect *v15;
  __CVBuffer *data;
  size_t v17;
  size_t v18;
  const __CFAllocator *v19;
  const __CFDictionary *BufferAttributes;
  size_t v21;
  size_t v22;
  const __CFAllocator *v23;
  const __CFDictionary *v24;
  __CVBuffer *v25;
  unint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  size_t rowBytes;
  __CVBuffer *v33;
  size_t Width;
  size_t Height;
  unint64_t v36;
  size_t v37;
  size_t v38;
  unint64_t v39;
  size_t v40;
  size_t v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  uint64_t v48;
  int v49;
  float v50;
  float v51;
  OSType PixelFormatType;
  __CVBuffer *CroppedAndScaledPixelBuffer;
  __CVBuffer *v54;
  __CVBuffer *v55;
  int v56;
  double v57;
  PixelBufferUtils *v58;
  unint64_t v59;
  unint64_t v61;
  char *v62;
  PixelBufferUtils *v63;
  char *__s;
  char *v66;
  const __CFAllocator *v67;
  CVPixelBufferRef texture;
  vImage_Buffer pixelBufferOut;
  CGPoint v70;
  CGPoint v71;
  CGSize v72;

  v6 = *((_QWORD *)this + 2);
  v7 = *((_QWORD *)this + 4);
  if (v7 * v6 != a3)
  {
    NSLog(CFSTR("%s:%d - ERROR - unable to render tiled view. images array not matching expected tile count"), a2, "render", 4480);
    return 0;
  }
  v10 = *((_QWORD *)this + 5);
  if (v10)
    v11 = 1;
  else
    v11 = ((unint64_t)a5 | a6) == 0;
  if (!v11)
  {
    NSLog(CFSTR("%s:%d - ERROR - unable to render tiled view. top text provided, but instance initialized without text space"), a2, "render", 4486);
    return 0;
  }
  v14 = (const __CFAllocator **)MEMORY[0x24BDBD240];
  v15 = (CGRect *)MEMORY[0x24BDBF090];
  if (a4)
  {
    data = (__CVBuffer *)*((_QWORD *)this + 6);
    if (!data)
    {
      v17 = *((_QWORD *)this + 1);
      v18 = *((_QWORD *)this + 3);
      pixelBufferOut.data = 0;
      v19 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      BufferAttributes = (const __CFDictionary *)getBufferAttributes();
      if (CVPixelBufferCreate(v19, v17, v18, 0x42475241u, BufferAttributes, (CVPixelBufferRef *)&pixelBufferOut))
        data = 0;
      else
        data = (__CVBuffer *)pixelBufferOut.data;
      *((_QWORD *)this + 6) = data;
    }
    PixelBufferUtils::scaleConvertRotatePixelBuffer(a4, 0, data, *v15, 0, 0, (__CVBuffer **)1);
    v6 = *((_QWORD *)this + 2);
    v7 = *((_QWORD *)this + 4);
    v10 = *((_QWORD *)this + 5);
  }
  __s = (char *)a6;
  v21 = v6 * *((_QWORD *)this + 1);
  v22 = v10 + v7 * *((_QWORD *)this + 3);
  pixelBufferOut.data = 0;
  v23 = *v14;
  v24 = (const __CFDictionary *)getBufferAttributes();
  v67 = v23;
  v61 = v21;
  if (CVPixelBufferCreate(v23, v21, v22, 0x42475241u, v24, (CVPixelBufferRef *)&pixelBufferOut))
    v25 = 0;
  else
    v25 = (__CVBuffer *)pixelBufferOut.data;
  CVPixelBufferLockBaseAddress(v25, 0);
  memset(&pixelBufferOut, 0, sizeof(pixelBufferOut));
  v63 = v25;
  PixelBufferUtils::asVImageBuffer(v25, *v15, &pixelBufferOut);
  v26 = *((_QWORD *)this + 5);
  if (v26 && pixelBufferOut.rowBytes * v26 >= 4)
    memset_pattern16(pixelBufferOut.data, &unk_20B6D2B20, (pixelBufferOut.rowBytes * v26) & 0xFFFFFFFFFFFFFFFCLL);
  v27 = (double)v26 * 0.15;
  v62 = (char *)((double)v26 * 0.8);
  v28 = *((_QWORD *)this + 2);
  v29 = *((_QWORD *)this + 4);
  if (v29 * v28)
  {
    v30 = 0;
    v31 = 1;
    v66 = (char *)pixelBufferOut.data;
    rowBytes = pixelBufferOut.rowBytes;
    do
    {
      v33 = a2[v30];
      if (v33)
      {
        Width = CVPixelBufferGetWidth(a2[v30]);
        Height = CVPixelBufferGetHeight(v33);
        v36 = *((_QWORD *)this + 2);
        v37 = *((_QWORD *)this + 3);
        v38 = *((_QWORD *)this + 1);
        v39 = v30 / v36;
        v40 = v30 % v36 * v38;
        v41 = *((_QWORD *)this + 5) + v39 * v37;
        v42 = (float)v37;
        v43 = (float)Height;
        v44 = (float)v37 / (float)Height;
        v45 = (float)v38;
        v46 = (float)Width;
        v47 = (float)v38 / (float)Width;
        if (v44 != v47)
        {
          if (v44 < v47)
          {
            v40 += (v38 - (unint64_t)(float)((float)(v46 / v43) * v45)) >> 1;
            v38 = (unint64_t)(float)((float)(v46 / v43) * v45);
          }
          else
          {
            v41 += (v37 - (unint64_t)(float)((float)(v43 / v46) * v42)) >> 1;
            v37 = (unint64_t)(float)((float)(v43 / v46) * v42);
          }
        }
        texture = 0;
        CVPixelBufferCreateWithBytes(v67, v38, v37, 0x42475241u, &v66[4 * v40 + rowBytes * v41], rowBytes, 0, 0, 0, &texture);
        v48 = *(_QWORD *)this + 12 * v30;
        v49 = *(unsigned __int8 *)(v48 + 8);
        v50 = *(float *)v48;
        v51 = *(float *)(v48 + 4);
        PixelFormatType = CVPixelBufferGetPixelFormatType(v33);
        v72.width = (double)v38;
        v72.height = (double)v37;
        CroppedAndScaledPixelBuffer = PixelBufferUtils::createCroppedAndScaledPixelBuffer(v33, 0, *v15, v72);
        v55 = CroppedAndScaledPixelBuffer;
        if (PixelFormatType == 1717855600 || PixelFormatType == 1751411059 || PixelFormatType == 1751410032)
        {
          v56 = PixelBufferUtils::colorizedDepthPixelBuffer(CroppedAndScaledPixelBuffer, 0, v49 != 0, v51, v50, 0, texture, v54);
          if (v49)
          {
            if (!v56)
            {
              LODWORD(v57) = 0.5;
              if ((PixelBufferUtils::alphaBlend(*((PixelBufferUtils **)this + 6), texture, &texture, v57, (__CVBuffer **)1) & 1) == 0)NSLog(CFSTR("%s:%d - ERROR - failed colorizing and overlaying tile"), "render", 4582);
            }
          }
        }
        else
        {
          PixelBufferUtils::convertPixelBufferFormat(CroppedAndScaledPixelBuffer, texture, 0);
        }
        CVPixelBufferRelease(v55);
        CVPixelBufferRelease(texture);
        v28 = *((_QWORD *)this + 2);
        v29 = *((_QWORD *)this + 4);
      }
      v30 = v31++;
    }
    while (v29 * v28 > v30);
  }
  v59 = (unint64_t)v27;
  v58 = v63;
  if (a5)
  {
    v70.x = (double)v59;
    v70.y = (double)(*((_QWORD *)this + 5) - v59);
    PixelBufferUtils::addTextToPixelBuffer(v63, a5, v62, v70);
  }
  if (__s)
  {
    v71.x = (double)v61 + (double)(strlen(__s) * (unint64_t)v62) * -0.6 - (double)v59;
    v71.y = (double)(*((_QWORD *)this + 5) - v59);
    PixelBufferUtils::addTextToPixelBuffer(v63, (__CVBuffer *)__s, v62, v71);
  }
  CVPixelBufferUnlockBaseAddress(v63, 0);
  return v58;
}

void PixelBufferUtilsTiledView::~PixelBufferUtilsTiledView(CVPixelBufferRef *this)
{
  CVPixelBufferRelease(this[6]);
  if (*this)
    MEMORY[0x20BD36480](*this, 0x1000C8005A209FELL);
}

{
  CVPixelBufferRelease(this[6]);
  if (*this)
    MEMORY[0x20BD36480](*this, 0x1000C8005A209FELL);
}

void sub_20B6C8CD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B6C8DE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B6C8E48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B6C9220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  void *v5;
  void *v6;
  va_list va;

  va_start(va, a4);

  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_20B6C957C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20B6C9810(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  va_list va;

  va_start(va, a2);

  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  objc_sync_exit(v2);

  _Unwind_Resume(a1);
}

void sub_20B6C9D94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B6CA214(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B6CB1BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  va_list va;

  va_start(va, a11);

  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  objc_sync_exit(v11);

  _Unwind_Resume(a1);
}

void sub_20B6CB458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)ADPCEDisparityColorExecutor;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_20B6CB8A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20B6CBB58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_20B6CBC0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_20B6CC078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, void *a19, void *a20,void *a21,id a22)
{
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;

  MEMORY[0x20BD36480](v23, 0x1000C80FA0F61DDLL);
  _Unwind_Resume(a1);
}

void sub_20B6CC250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_20B6CC4A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_20B6CC708(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_20B6CC9A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  void *v5;
  void *v6;
  va_list va;

  va_start(va, a4);

  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)va);
  _Unwind_Resume(a1);
}

void *fmincon_spg(void (*a1)(_QWORD, _QWORD, _QWORD, _QWORD), void (*a2)(_QWORD, _QWORD, _QWORD), uint64_t a3, uint64_t a4, int a5, double *a6, double *a7, double *a8, void *a9, uint64_t a10)
{
  double v10;
  uint64_t v11;
  double *v12;
  int v13;
  double *v14;
  uint64_t v16;
  int v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  double v29;
  unint64_t v30;
  unint64_t v31;
  double v32;
  double v33;
  double *v34;
  uint64_t v35;
  double v36;
  double v37;
  double *v38;
  double *v39;
  uint64_t v40;
  double v41;
  double *v42;
  double *v43;
  uint64_t v44;
  double v45;
  double *v46;
  double *v47;
  double *v48;
  uint64_t v49;
  double v50;
  double v51;
  double v52;
  BOOL v53;
  double v54;
  double v55;
  double *v56;
  double *v57;
  uint64_t v58;
  double v59;
  double v60;
  double *v61;
  uint64_t v62;
  double v63;
  double v64;
  unint64_t v65;
  double *v66;
  uint64_t v67;
  double v68;
  int v69;
  double v70;
  double *v71;
  double *v72;
  uint64_t v73;
  double v74;
  double *v75;
  double *v76;
  double *v77;
  uint64_t v78;
  double v79;
  double v80;
  double v81;
  __n128 v82;
  BOOL v83;
  uint64_t v84;
  uint64_t v85;
  double *v86;
  double *v87;
  double *v88;
  uint64_t v89;
  double v90;
  double v91;
  double v92;
  double *v93;
  double *v94;
  double *v95;
  uint64_t v96;
  double v97;
  double v98;
  double v99;
  unint64_t v100;
  int v101;
  double v102;
  double v103;
  double *v104;
  uint64_t v105;
  double v106;
  unint64_t v107;
  double *v108;
  uint64_t v109;
  double v110;
  double v111;
  double v112;
  int v113;
  BOOL v114;
  void *result;
  double v116;
  double v117;
  double v118;
  double *v119;
  uint64_t v121;
  double v122;
  double v123;
  int v124;
  int v125;
  double v129;
  double v130;
  __int16 v131;
  char v132;
  double v133;
  _BYTE v134[80];
  _QWORD v135[10];
  uint64_t v136;
  _QWORD v137[10];
  uint64_t v138;
  _BYTE v139[80];
  _BYTE v140[80];
  _QWORD v141[10];
  uint64_t v142;
  _BYTE v143[80];
  _BYTE v144[80];
  _BYTE v145[80];
  _QWORD v146[10];
  uint64_t v147;
  _BYTE v148[80];
  _OWORD __src[5];
  _OWORD v150[5];
  double v151;
  _QWORD v152[11];

  v11 = a10;
  v152[9] = *MEMORY[0x24BDAC8D0];
  v132 = 0;
  v131 = 0;
  memset(v150, 0, sizeof(v150));
  memset(&__src[2], 0, 48);
  v12 = (double *)&defaultSPGConfig;
  if (a8)
    v12 = a8;
  memset(__src, 0, 32);
  if ((a5 - 11) < 0xFFFFFFF6 || (v13 = *((_DWORD *)v12 + 2), v13 > 10) || v13 <= 0)
  {
    v113 = 0;
    v114 = 0;
    v23 = 0.0;
    v123 = 0.0;
    result = memcpy(a9, __src, 8 * a5);
    goto LABEL_113;
  }
  v14 = a7;
  v121 = *((unsigned int *)v12 + 2);
  v16 = 0;
  v17 = *((_DWORD *)v12 + 14);
  v18 = *v12;
  v19 = v12[2];
  v20 = v12[3];
  v117 = v12[4];
  v118 = v12[6];
  v122 = v12[5];
  do
  {
    v21 = *(double *)(a4 + v16 * 8);
    if (v21 >= a7[v16])
      v21 = a7[v16];
    if (v21 <= a6[v16])
      v21 = a6[v16];
    *(double *)((char *)v150 + v16 * 8) = v21;
    ++v16;
  }
  while (a5 != v16);
  v133 = 0.0;
  v22 = v12[8];
  a1(v150, a3, &v133, v148);
  v23 = v133;
  __memcpy_chk();
  v24 = 0;
  do
    *(double *)&v146[v24++] = v23;
  while (v121 != v24);
  if (v17 < 1)
  {
    v113 = 0;
    v123 = v23;
    goto LABEL_112;
  }
  v125 = 0;
  v25 = 8 * a5;
  v26 = v121;
  v116 = v23;
  v123 = v23;
  v119 = v14;
  while (1)
  {
    v130 = 0.0;
    if (a5 < 1)
      goto LABEL_50;
    v27 = 0;
    do
    {
      *(double *)&v152[v27 / 8 - 1] = *(double *)((char *)v150 + v27) - *(double *)&v148[v27];
      v27 += 8;
    }
    while (v25 != v27);
    v28 = 0;
    do
    {
      v29 = *(double *)&v152[v28 / 8 - 1];
      if (v29 >= v14[v28 / 8])
        v29 = v14[v28 / 8];
      if (v29 <= a6[v28 / 8])
        v29 = a6[v28 / 8];
      *(double *)&v152[v28 / 8 - 1] = v29;
      v28 += 8;
    }
    while (v25 != v28);
    v30 = 0;
    do
    {
      *(double *)&v152[v30 / 8 - 1] = *(double *)&v152[v30 / 8 - 1] - *(double *)((char *)v150 + v30);
      v30 += 8;
    }
    while (v25 != v30);
    v31 = 0;
    do
    {
      v32 = *(double *)&v152[v31 / 8 - 1];
      if (v32 < 0.0)
        v32 = -v32;
      *(double *)&v152[v31 / 8 - 1] = v32;
      v31 += 8;
    }
    while (v25 != v31);
    v33 = v151;
    if (a5 >= 2)
    {
      v34 = (double *)v152;
      v35 = a5 - 1;
      do
      {
        v36 = *v34++;
        v37 = v36;
        if (v36 > v33)
          v33 = v37;
        --v35;
      }
      while (v35);
    }
    if (v33 <= v118)
      break;
    v38 = (double *)v143;
    v39 = (double *)v148;
    v40 = a5;
    do
    {
      v41 = *v39++;
      *v38++ = v22 * v41;
      --v40;
    }
    while (v40);
    v42 = (double *)v143;
    v43 = (double *)v150;
    v44 = a5;
    do
    {
      v45 = *v43++;
      *v42 = v45 - *v42;
      ++v42;
      --v44;
    }
    while (v44);
    v46 = (double *)v143;
    v47 = v14;
    v48 = a6;
    v49 = a5;
    do
    {
      v50 = *v46;
      v51 = *v47++;
      v52 = v51;
      v53 = *v46 < v51;
      v54 = *v48++;
      v55 = v54;
      if (!v53)
        v50 = v52;
      if (v50 <= v55)
        v50 = v55;
      *v46++ = v50;
      --v49;
    }
    while (v49);
    v56 = (double *)v150;
    v57 = (double *)v143;
    v58 = a5;
    do
    {
      v59 = *v56++;
      *v57 = *v57 - v59;
      ++v57;
      --v58;
    }
    while (v58);
LABEL_50:
    v60 = *(double *)v146;
    if (v26 > 1)
    {
      v61 = (double *)&v147;
      v62 = v121 - 1;
      do
      {
        v63 = *v61++;
        v64 = v63;
        if (v63 > v60)
          v60 = v64;
        --v62;
      }
      while (v62);
    }
    if (a5 < 1)
    {
      v124 = 0;
    }
    else
    {
      v65 = 0;
      do
      {
        *(double *)&v141[v65 / 8] = *(double *)&v148[v65] * *(double *)&v143[v65];
        v65 += 8;
      }
      while (v25 != v65);
      v10 = *(double *)v141;
      if (a5 < 2)
      {
        v124 = 0;
      }
      else
      {
        v66 = (double *)&v142;
        v67 = a5 - 1;
        do
        {
          v68 = *v66++;
          v10 = v10 + v68;
          --v67;
        }
        while (v67);
        v124 = 1;
      }
    }
    v69 = 0;
    v70 = 1.0;
    do
    {
      v129 = 0.0;
      if (a5 >= 1)
      {
        v71 = &v151;
        v72 = (double *)v143;
        v73 = a5;
        do
        {
          v74 = *v72++;
          *v71++ = v70 * v74;
          --v73;
        }
        while (v73);
        v75 = (double *)v134;
        v76 = &v151;
        v77 = (double *)v150;
        v78 = a5;
        do
        {
          v79 = *v77++;
          v80 = v79;
          v81 = *v76++;
          *v75++ = v80 + v81;
          --v78;
        }
        while (v78);
      }
      a2(v134, a3, &v129);
      v82.n128_f64[0] = v129;
      if (v129 <= v60 + v18 * v70 * v10)
        break;
      v82.n128_f64[0] = v10 * (v70 * v70 * -0.5) / (v129 - v133 - v70 * v10);
      v83 = v82.n128_f64[0] > v20 * v70 || v19 > v82.n128_f64[0];
      v70 = v83 ? v70 * 0.5 : v10 * (v70 * v70 * -0.5) / (v129 - v133 - v70 * v10);
      ++v69;
    }
    while (v69 != 1000);
    if (a5 >= 1)
    {
      v84 = 0;
      do
      {
        *(double *)&v145[v84] = v70 * *(double *)&v143[v84];
        v84 += 8;
      }
      while (v25 != v84);
      v85 = 0;
      do
      {
        *(double *)&v145[v85] = *(double *)&v145[v85] + *(double *)((char *)v150 + v85);
        v85 += 8;
      }
      while (v25 != v85);
      v86 = (double *)v145;
      a1(v145, a3, &v130, v144);
      v87 = (double *)v140;
      v88 = (double *)v150;
      v89 = a5;
      do
      {
        v90 = *v86++;
        v91 = v90;
        v92 = *v88++;
        *v87++ = v91 - v92;
        --v89;
      }
      while (v89);
      v93 = (double *)v139;
      v94 = (double *)v148;
      v95 = (double *)v144;
      v96 = a5;
      do
      {
        v97 = *v95++;
        v98 = v97;
        v99 = *v94++;
        *v93++ = v98 - v99;
        --v96;
      }
      while (v96);
      v100 = 0;
      v101 = v124;
      do
      {
        v102 = *(double *)&v139[v100];
        *(double *)&v135[v100 / 8] = *(double *)&v140[v100] * v102;
        v100 += 8;
      }
      while (v25 != v100);
      v103 = *(double *)v135;
      if (!v124)
        goto LABEL_94;
LABEL_92:
      v104 = (double *)&v136;
      v105 = a5 - 1;
      do
      {
        v106 = *v104++;
        v102 = v106;
        v103 = v103 + v106;
        --v105;
      }
      while (v105);
      goto LABEL_94;
    }
    ((void (*)(_BYTE *, uint64_t, double *, _BYTE *, __n128))a1)(v145, a3, &v130, v144, v82);
    v101 = v124;
    if (v124)
      goto LABEL_92;
LABEL_94:
    v22 = v122;
    if (v103 > 0.0)
    {
      if (a5 >= 1)
      {
        v107 = 0;
        do
        {
          *(double *)&v137[v107 / 8] = *(double *)&v140[v107] * *(double *)&v140[v107];
          v107 += 8;
        }
        while (v25 != v107);
        v102 = *(double *)v137;
      }
      if (v101)
      {
        v108 = (double *)&v138;
        v109 = a5 - 1;
        do
        {
          v110 = *v108++;
          v102 = v102 + v110;
          --v109;
        }
        while (v109);
      }
      v111 = v102 / v103;
      if (v111 >= v122)
        v111 = v122;
      if (v117 <= v111)
        v22 = v111;
      else
        v22 = v117;
    }
    __memcpy_chk();
    v112 = v130;
    v133 = v130;
    __memcpy_chk();
    v26 = v121;
    *(double *)&v146[++v125 % (int)v121] = v112;
    if (v112 < v123)
    {
      __memcpy_chk();
      v123 = v112;
    }
    v14 = v119;
    if (v125 == v17)
    {
      v113 = v17;
      v11 = a10;
      v23 = v116;
      goto LABEL_112;
    }
  }
  v11 = a10;
  v23 = v116;
  v113 = v125;
LABEL_112:
  v114 = v113 < v17;
  result = memcpy(a9, __src, 8 * a5);
LABEL_113:
  if (v11)
  {
    *(_DWORD *)v11 = v113;
    *(_BYTE *)(v11 + 4) = v114;
    *(_WORD *)(v11 + 5) = v131;
    *(_BYTE *)(v11 + 7) = v132;
    *(double *)(v11 + 8) = v23;
    *(double *)(v11 + 16) = v123;
  }
  return result;
}

uint64_t AnalyticsSendEventLazy()
{
  return MEMORY[0x24BE1A1C8]();
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x24BDBBDF0](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x24BDBBE18]();
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x24BDBBE60](theDict, key, value);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x24BDBBE68](cf1, cf2);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x24BDBBEF8](cf);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x24BDBC298](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x24BDBC2A8](cf);
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
  MEMORY[0x24BDBC2C8](rl, source, mode);
}

CFRunLoopRef CFRunLoopGetMain(void)
{
  return (CFRunLoopRef)MEMORY[0x24BDBC300]();
}

void CFRunLoopSourceInvalidate(CFRunLoopSourceRef source)
{
  MEMORY[0x24BDBC378](source);
}

SInt32 CFUserNotificationCancel(CFUserNotificationRef userNotification)
{
  return MEMORY[0x24BDBC918](userNotification);
}

CFUserNotificationRef CFUserNotificationCreate(CFAllocatorRef allocator, CFTimeInterval timeout, CFOptionFlags flags, SInt32 *error, CFDictionaryRef dictionary)
{
  return (CFUserNotificationRef)MEMORY[0x24BDBC920](allocator, flags, error, dictionary, timeout);
}

CFRunLoopSourceRef CFUserNotificationCreateRunLoopSource(CFAllocatorRef allocator, CFUserNotificationRef userNotification, CFUserNotificationCallBack callout, CFIndex order)
{
  return (CFRunLoopSourceRef)MEMORY[0x24BDBC928](allocator, userNotification, callout, order);
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return (CGContextRef)MEMORY[0x24BDBD918](data, width, height, bitsPerComponent, bytesPerRow, space, *(_QWORD *)&bitmapInfo);
}

CGImageRef CGBitmapContextCreateImage(CGContextRef context)
{
  return (CGImageRef)MEMORY[0x24BDBD920](context);
}

CGColorRef CGColorCreateGenericRGB(CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
  return (CGColorRef)MEMORY[0x24BDBDAA8](red, green, blue, alpha);
}

CGColorSpaceRef CGColorSpaceCreateDeviceRGB(void)
{
  return (CGColorSpaceRef)MEMORY[0x24BDBDB88]();
}

CFStringRef CGColorSpaceGetName(CGColorSpaceRef space)
{
  return (CFStringRef)MEMORY[0x24BDBDC18](space);
}

void CGColorSpaceRelease(CGColorSpaceRef space)
{
  MEMORY[0x24BDBDC60](space);
}

void CGContextDrawImage(CGContextRef c, CGRect rect, CGImageRef image)
{
  MEMORY[0x24BDBDDD8](c, image, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextFillEllipseInRect(CGContextRef c, CGRect rect)
{
  MEMORY[0x24BDBDE60](c, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextRelease(CGContextRef c)
{
  MEMORY[0x24BDBDF30](c);
}

void CGContextSetFillColorWithColor(CGContextRef c, CGColorRef color)
{
  MEMORY[0x24BDBDFD8](c, color);
}

void CGContextSetTextDrawingMode(CGContextRef c, CGTextDrawingMode mode)
{
  MEMORY[0x24BDBE0E0](c, *(_QWORD *)&mode);
}

void CGContextSetTextMatrix(CGContextRef c, CGAffineTransform *t)
{
  MEMORY[0x24BDBE0F0](c, t);
}

void CGContextSetTextPosition(CGContextRef c, CGFloat x, CGFloat y)
{
  MEMORY[0x24BDBE0F8](c, x, y);
}

void CGImageDestinationAddImage(CGImageDestinationRef idst, CGImageRef image, CFDictionaryRef properties)
{
  MEMORY[0x24BDD9048](idst, image, properties);
}

CGImageDestinationRef CGImageDestinationCreateWithURL(CFURLRef url, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return (CGImageDestinationRef)MEMORY[0x24BDD9088](url, type, count, options);
}

BOOL CGImageDestinationFinalize(CGImageDestinationRef idst)
{
  return MEMORY[0x24BDD9090](idst);
}

CGBitmapInfo CGImageGetBitmapInfo(CGImageRef image)
{
  return MEMORY[0x24BDBE628](image);
}

size_t CGImageGetBitsPerComponent(CGImageRef image)
{
  return MEMORY[0x24BDBE630](image);
}

CGColorSpaceRef CGImageGetColorSpace(CGImageRef image)
{
  return (CGColorSpaceRef)MEMORY[0x24BDBE658](image);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return MEMORY[0x24BDBE680](image);
}

size_t CGImageGetWidth(CGImageRef image)
{
  return MEMORY[0x24BDBE6E0](image);
}

void CGImageRelease(CGImageRef image)
{
  MEMORY[0x24BDBE770](image);
}

CGImageRef CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x24BDD9158](isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithURL(CFURLRef url, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x24BDD9180](url, options);
}

size_t CGImageSourceGetCount(CGImageSourceRef isrc)
{
  return MEMORY[0x24BDD9188](isrc);
}

BOOL CGRectContainsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x24BDBEFC8]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CFDictionaryRef CGRectCreateDictionaryRepresentation(CGRect a1)
{
  return (CFDictionaryRef)MEMORY[0x24BDBEFD0]((__n128)a1.origin, *(__n128 *)&a1.origin.y, (__n128)a1.size, *(__n128 *)&a1.size.height);
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x24BDBEFE0]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CGRect CGRectIntegral(CGRect rect)
{
  double v1;
  double v2;
  double v3;
  double v4;
  CGRect result;

  MEMORY[0x24BDBF038]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return MEMORY[0x24BDBF050]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectIsNull(CGRect rect)
{
  return MEMORY[0x24BDBF060]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGRect CGRectStandardize(CGRect rect)
{
  double v1;
  double v2;
  double v3;
  double v4;
  CGRect result;

  MEMORY[0x24BDBF080]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

CMTime *__cdecl CMClockMakeHostTimeFromSystemUnits(CMTime *__return_ptr retstr, uint64_t hostTime)
{
  return (CMTime *)MEMORY[0x24BDC0168](retstr, hostTime);
}

Float64 CMTimeGetSeconds(CMTime *time)
{
  Float64 result;

  MEMORY[0x24BDC0490](time);
  return result;
}

CTFontRef CTFontCreateWithName(CFStringRef name, CGFloat size, const CGAffineTransform *matrix)
{
  return (CTFontRef)MEMORY[0x24BDC47C8](name, matrix, size);
}

CTLineRef CTLineCreateWithAttributedString(CFAttributedStringRef attrString)
{
  return (CTLineRef)MEMORY[0x24BDC4A30](attrString);
}

void CTLineDraw(CTLineRef line, CGContextRef context)
{
  MEMORY[0x24BDC4A68](line, context);
}

CFTypeRef CVBufferGetAttachment(CVBufferRef buffer, CFStringRef key, CVAttachmentMode *attachmentMode)
{
  return (CFTypeRef)MEMORY[0x24BDC5148](buffer, key, attachmentMode);
}

CFDictionaryRef CVBufferGetAttachments(CVBufferRef buffer, CVAttachmentMode attachmentMode)
{
  return (CFDictionaryRef)MEMORY[0x24BDC5150](buffer, *(_QWORD *)&attachmentMode);
}

void CVBufferSetAttachment(CVBufferRef buffer, CFStringRef key, CFTypeRef value, CVAttachmentMode attachmentMode)
{
  MEMORY[0x24BDC5180](buffer, key, value, *(_QWORD *)&attachmentMode);
}

CVReturn CVPixelBufferCreate(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x24BDC5248](allocator, width, height, *(_QWORD *)&pixelFormatType, pixelBufferAttributes, pixelBufferOut);
}

CVReturn CVPixelBufferCreateWithBytes(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, void *baseAddress, size_t bytesPerRow, CVPixelBufferReleaseBytesCallback releaseCallback, void *releaseRefCon, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x24BDC5250](allocator, width, height, *(_QWORD *)&pixelFormatType, baseAddress, bytesPerRow, releaseCallback, releaseRefCon);
}

CVReturn CVPixelBufferCreateWithPlanarBytes(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, void *dataPtr, size_t dataSize, size_t numberOfPlanes, void **planeBaseAddress, size_t *planeWidth, size_t *planeHeight, size_t *planeBytesPerRow, CVPixelBufferReleasePlanarBytesCallback releaseCallback, void *releaseRefCon, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x24BDC5260](allocator, width, height, *(_QWORD *)&pixelFormatType, dataPtr, dataSize, numberOfPlanes, planeBaseAddress);
}

uint64_t CVPixelBufferGetAttributes()
{
  return MEMORY[0x24BDC5270]();
}

void *__cdecl CVPixelBufferGetBaseAddress(CVPixelBufferRef pixelBuffer)
{
  return (void *)MEMORY[0x24BDC5278](pixelBuffer);
}

void *__cdecl CVPixelBufferGetBaseAddressOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return (void *)MEMORY[0x24BDC5288](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetBytesPerRow(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC5290](pixelBuffer);
}

size_t CVPixelBufferGetBytesPerRowOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x24BDC5298](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetDataSize(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC52A0](pixelBuffer);
}

size_t CVPixelBufferGetHeight(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC52B0](pixelBuffer);
}

size_t CVPixelBufferGetHeightOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x24BDC52B8](pixelBuffer, planeIndex);
}

IOSurfaceRef CVPixelBufferGetIOSurface(CVPixelBufferRef pixelBuffer)
{
  return (IOSurfaceRef)MEMORY[0x24BDC52C0](pixelBuffer);
}

OSType CVPixelBufferGetPixelFormatType(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC52D0](pixelBuffer);
}

size_t CVPixelBufferGetPlaneCount(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC52D8](pixelBuffer);
}

size_t CVPixelBufferGetWidth(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC52E8](pixelBuffer);
}

size_t CVPixelBufferGetWidthOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x24BDC52F0](pixelBuffer, planeIndex);
}

Boolean CVPixelBufferIsPlanar(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC52F8](pixelBuffer);
}

CVReturn CVPixelBufferLockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  return MEMORY[0x24BDC5308](pixelBuffer, lockFlags);
}

void CVPixelBufferRelease(CVPixelBufferRef texture)
{
  MEMORY[0x24BDC5398](texture);
}

CVPixelBufferRef CVPixelBufferRetain(CVPixelBufferRef texture)
{
  return (CVPixelBufferRef)MEMORY[0x24BDC53A0](texture);
}

CVReturn CVPixelBufferUnlockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags unlockFlags)
{
  return MEMORY[0x24BDC53B0](pixelBuffer, unlockFlags);
}

uint64_t CVPixelFormatDescriptionGetDescriptionWithPixelFormatType()
{
  return MEMORY[0x24BDC53C8]();
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return MEMORY[0x24BDD86F8](*(_QWORD *)&object);
}

CFTypeRef IORegistryEntryCreateCFProperty(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x24BDD88B0](*(_QWORD *)&entry, key, allocator, *(_QWORD *)&options);
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return MEMORY[0x24BDD8988](*(_QWORD *)&mainPort, matching);
}

CFMutableDictionaryRef IOServiceNameMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x24BDD89B0](name);
}

size_t IOSurfaceGetHeightOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x24BDD8C58](buffer, planeIndex);
}

size_t IOSurfaceGetWidthOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x24BDD8CE0](buffer, planeIndex);
}

void IOSurfaceSetValue(IOSurfaceRef buffer, CFStringRef key, CFTypeRef value)
{
  MEMORY[0x24BDD8DB8](buffer, key, value);
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x24BED8448]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x24BED8470]();
}

id MTLCreateSystemDefaultDevice(void)
{
  return (id)MEMORY[0x24BDDD1E0]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x24BDD0B80](aClassName);
}

void NSLog(NSString *format, ...)
{
  MEMORY[0x24BDD1000](format);
}

NSArray *__cdecl NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask, BOOL expandTilde)
{
  return (NSArray *)MEMORY[0x24BDD1208](directory, domainMask, expandTilde);
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return (SEL)MEMORY[0x24BDD1218](aSelectorName);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x24BDD1240](aClass);
}

uint64_t VTImageRotationSessionCreate()
{
  return MEMORY[0x24BDF90E0]();
}

uint64_t VTImageRotationSessionInvalidate()
{
  return MEMORY[0x24BDF90E8]();
}

uint64_t VTImageRotationSessionTransferImage()
{
  return MEMORY[0x24BDF9100]();
}

OSStatus VTPixelTransferSessionCreate(CFAllocatorRef allocator, VTPixelTransferSessionRef *pixelTransferSessionOut)
{
  return MEMORY[0x24BDF9168](allocator, pixelTransferSessionOut);
}

void VTPixelTransferSessionInvalidate(VTPixelTransferSessionRef session)
{
  MEMORY[0x24BDF9170](session);
}

OSStatus VTPixelTransferSessionTransferImage(VTPixelTransferSessionRef session, CVPixelBufferRef sourceBuffer, CVPixelBufferRef destinationBuffer)
{
  return MEMORY[0x24BDF9178](session, sourceBuffer, destinationBuffer);
}

OSStatus VTSessionSetProperty(VTSessionRef session, CFStringRef propertyKey, CFTypeRef propertyValue)
{
  return MEMORY[0x24BDF91A8](session, propertyKey, propertyValue);
}

uint64_t VZClientOptionsCreate()
{
  return MEMORY[0x24BEC08B8]();
}

uint64_t VZClientOptionsSetTcpIpAddress()
{
  return MEMORY[0x24BEC08C0]();
}

uint64_t VZDataCreateBlobWithCFData()
{
  return MEMORY[0x24BEC08D0]();
}

uint64_t VZDataCreateImageWithCVPixelBuffer()
{
  return MEMORY[0x24BEC08F0]();
}

uint64_t VZDataGetDictionaryDataTypeID()
{
  return MEMORY[0x24BEC0918]();
}

uint64_t VZDataGetMeshDataTypeID()
{
  return MEMORY[0x24BEC0928]();
}

uint64_t VZDataInfoCreate()
{
  return MEMORY[0x24BEC0938]();
}

uint64_t VZDataInfoSetName()
{
  return MEMORY[0x24BEC0940]();
}

uint64_t VZDataInfoSetTimestampMachContinuousNanoseconds()
{
  return MEMORY[0x24BEC0950]();
}

uint64_t VZDestinationCreateWithClient()
{
  return MEMORY[0x24BEC0960]();
}

uint64_t VZDestinationCreateWithFileExporter()
{
  return MEMORY[0x24BEC0978]();
}

uint64_t VZFileExportOptionsAddFilteredStoragePreference()
{
  return MEMORY[0x24BEC0980]();
}

uint64_t VZFileExportOptionsCreate()
{
  return MEMORY[0x24BEC0998]();
}

uint64_t VZFileExportOptionsSetAsyncQueueMaxElementCount()
{
  return MEMORY[0x24BEC09A8]();
}

uint64_t VZLogMessageFilterCreate()
{
  return MEMORY[0x24BEC09B0]();
}

uint64_t VZLogMessageFilterRequireDataTypeIDExact()
{
  return MEMORY[0x24BEC09C0]();
}

uint64_t VZLoggerAddDestination()
{
  return MEMORY[0x24BEC09D8]();
}

uint64_t VZLoggerCreate()
{
  return MEMORY[0x24BEC09E8]();
}

uint64_t VZLoggerDisable()
{
  return MEMORY[0x24BEC09F0]();
}

uint64_t VZLoggerEnable()
{
  return MEMORY[0x24BEC09F8]();
}

uint64_t VZLoggerLogData()
{
  return MEMORY[0x24BEC0A18]();
}

uint64_t VZLoggerRemoveDestination()
{
  return MEMORY[0x24BEC0A28]();
}

uint64_t VZRelease()
{
  return MEMORY[0x24BEC0A48]();
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x24BDAC730](a1, *(_QWORD *)&a2);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x24BDAC780](exception_object);
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x24BEDA9E0]();
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x24BEDAA60](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x24BEDAA70](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x24BEDAAA8](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x24BEDABB0](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x24BEDABE8](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x24BEDAC38](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC40](this, __s, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x24BEDAC80](this, __pos, __s);
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x24BEDAEF8]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x24BEDAF00]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x24BEDAF50]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x24BEDB010]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x24BEDB048]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x24BEDB050]();
}

std::chrono::system_clock::time_point std::chrono::system_clock::now(void)
{
  return (std::chrono::system_clock::time_point)MEMORY[0x24BEDB3F0]();
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x24BEDB448](this);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
  MEMORY[0x24BEDB500](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x24BEDB518](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x24BEDB530](this, *(_QWORD *)&__state);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x24BEDB5E8]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x24BEDB610](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x24BEDB620](retstr, __val);
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x24BEDB688](this);
}

void std::terminate(void)
{
  MEMORY[0x24BEDB6C0]();
}

uint64_t operator delete[]()
{
  return off_24C420B98();
}

void operator delete(void *__p)
{
  off_24C420BA0(__p);
}

uint64_t operator delete()
{
  return off_24C420BA8();
}

uint64_t operator new[]()
{
  return off_24C420BB0();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_24C420BB8(__sz);
}

uint64_t operator new()
{
  return off_24C420BC0();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x24BDAC7A0](a1, a2, *(_QWORD *)&a3, a4);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x24BEDB8F8](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x24BEDB910](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x24BEDB928]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x24BEDB930](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x24BEDB940](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x24BEDB948](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x24BEDB950](a1);
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x24BEDB960](a1, lptinfo, a3);
}

int *__error(void)
{
  return (int *)MEMORY[0x24BDAC7D0]();
}

simd_float2x2 __invert_f2(simd_float2x2 a1)
{
  simd_float2 v1;
  simd_float2 v2;
  simd_float2x2 result;

  MEMORY[0x24BDAC818]((__n128)a1, *(__n128 *)((char *)&a1 + 8));
  result.columns[1] = v2;
  result.columns[0] = v1;
  return result;
}

simd_float3x3 __invert_f3(simd_float3x3 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  simd_float3x3 result;

  MEMORY[0x24BDAC820]((__n128)a1.columns[0], (__n128)a1.columns[1], (__n128)a1.columns[2]);
  result.columns[2].i64[1] = v6;
  result.columns[2].i64[0] = v5;
  result.columns[1].i64[1] = v4;
  result.columns[1].i64[0] = v3;
  result.columns[0].i64[1] = v2;
  result.columns[0].i64[0] = v1;
  return result;
}

simd_float4x4 __invert_f4(simd_float4x4 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  simd_float4x4 result;

  MEMORY[0x24BDAC828]((__n128)a1.columns[0], (__n128)a1.columns[1], (__n128)a1.columns[2], (__n128)a1.columns[3]);
  result.columns[3].i64[1] = v8;
  result.columns[3].i64[0] = v7;
  result.columns[2].i64[1] = v6;
  result.columns[2].i64[0] = v5;
  result.columns[1].i64[1] = v4;
  result.columns[1].i64[0] = v3;
  result.columns[0].i64[1] = v2;
  result.columns[0].i64[0] = v1;
  return result;
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x24BDAC848]();
}

__float2 __sincosf_stret(float a1)
{
  float v1;
  float v2;
  __float2 result;

  MEMORY[0x24BDAC898](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB68](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB80](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _os_signpost_emit_unreliably_with_name_impl()
{
  return MEMORY[0x24BDACC08]();
}

long double acos(long double __x)
{
  long double result;

  MEMORY[0x24BDAD108](__x);
  return result;
}

long double asin(long double __x)
{
  long double result;

  MEMORY[0x24BDAD188](__x);
  return result;
}

long double atan(long double __x)
{
  long double result;

  MEMORY[0x24BDAD218](__x);
  return result;
}

long double atan2(long double __y, long double __x)
{
  long double result;

  MEMORY[0x24BDAD220](__y, __x);
  return result;
}

float atan2f(float a1, float a2)
{
  float result;

  MEMORY[0x24BDAD228](a1, a2);
  return result;
}

int atoi(const char *a1)
{
  return MEMORY[0x24BDAD258](a1);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

BOOL class_addMethod(Class cls, SEL name, IMP imp, const char *types)
{
  return MEMORY[0x24BEDCE40](cls, name, imp, types);
}

BOOL class_addProperty(Class cls, const char *name, const objc_property_attribute_t *attributes, unsigned int attributeCount)
{
  return MEMORY[0x24BEDCE50](cls, name, attributes, *(_QWORD *)&attributeCount);
}

long double cos(long double __x)
{
  long double result;

  MEMORY[0x24BDADBE0](__x);
  return result;
}

float cosf(float a1)
{
  float result;

  MEMORY[0x24BDADBE8](a1);
  return result;
}

uLong crc32(uLong crc, const Bytef *buf, uInt len)
{
  return MEMORY[0x24BEDF1C0](crc, buf, *(_QWORD *)&len);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADCC0](queue, block);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x24BDADE98](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x24BDADEB8](attr, frequency);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x24BDADED0](label, attr);
}

uint64_t espresso_get_version_string()
{
  return MEMORY[0x24BE2FB78]();
}

long double exp(long double __x)
{
  long double result;

  MEMORY[0x24BDAE270](__x);
  return result;
}

long double exp2(long double __x)
{
  long double result;

  MEMORY[0x24BDAE278](__x);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x24BDAE2E0](a1);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x24BDAE410](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x24BDAE428](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x24BDAE590](__ptr, __size, __nitems, __stream);
}

const char *getprogname(void)
{
  return (const char *)MEMORY[0x24BDAE6E8]();
}

uint64_t kdebug_trace()
{
  return MEMORY[0x24BDAE958]();
}

long double log(long double __x)
{
  long double result;

  MEMORY[0x24BDAEAA8](__x);
  return result;
}

float logf(float a1)
{
  float result;

  MEMORY[0x24BDAEAF8](a1);
  return result;
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED70](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED78](size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x24BDAEEA8](__b, *(_QWORD *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
  MEMORY[0x24BDAEEB0](__b, __pattern16, __len);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x24BEDCF68](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x24BEDCF88]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x24BEDCFA8](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x24BEDCFB0](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x24BEDCFC0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDCFD0](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x24BEDCFE8]();
}

void objc_copyWeak(id *to, id *from)
{
  MEMORY[0x24BEDD030](to, from);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x24BEDD038](location);
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x24BEDD068](obj);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x24BEDD0B0](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x24BEDD0C0](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x24BEDD0E8](location);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD120](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x24BEDD130]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x24BEDD138]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x24BEDD148]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x24BEDD160]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x24BEDD2A8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B0](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x24BEDD2C0](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x24BEDD3D0](self, _cmd, newValue, offset);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x24BEDD408](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x24BEDD410](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x24BEDD438](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x24BEDD440](obj);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x24BDAF400](log);
}

uint64_t os_variant_allows_internal_security_policies()
{
  return MEMORY[0x24BDAF4B0]();
}

long double pow(long double __x, long double __y)
{
  long double result;

  MEMORY[0x24BDAF688](__x, __y);
  return result;
}

int rmdir(const char *a1)
{
  return MEMORY[0x24BDAFBB0](a1);
}

long double sin(long double __x)
{
  long double result;

  MEMORY[0x24BDAFE18](__x);
  return result;
}

float sinf(float a1)
{
  float result;

  MEMORY[0x24BDAFE20](a1);
  return result;
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x24BDAFEF0](__s1, __s2);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x24BDAFF18](*(_QWORD *)&__errnum);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x24BDAFF40](__s);
}

long double tan(long double __x)
{
  long double result;

  MEMORY[0x24BDB0138](__x);
  return result;
}

vImage_Error vImageBuffer_Init(vImage_Buffer *buf, vImagePixelCount height, vImagePixelCount width, uint32_t pixelBits, vImage_Flags flags)
{
  return MEMORY[0x24BDB3628](buf, height, width, *(_QWORD *)&pixelBits, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_16UToF(const vImage_Buffer *src, const vImage_Buffer *dest, float offset, float scale, vImage_Flags flags)
{
  return MEMORY[0x24BDB3660](src, dest, *(_QWORD *)&flags, offset, scale);
}

vImage_Error vImageConvert_420Yp8_CbCr8ToARGB8888(const vImage_Buffer *srcYp, const vImage_Buffer *srcCbCr, const vImage_Buffer *dest, const vImage_YpCbCrToARGB *info, const uint8_t permuteMap[4], const uint8_t alpha, vImage_Flags flags)
{
  return MEMORY[0x24BDB3680](srcYp, srcCbCr, dest, info, permuteMap, alpha, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_ARGB8888To420Yp8_CbCr8(const vImage_Buffer *src, const vImage_Buffer *destYp, const vImage_Buffer *destCbCr, const vImage_ARGBToYpCbCr *info, const uint8_t permuteMap[4], vImage_Flags flags)
{
  return MEMORY[0x24BDB36A0](src, destYp, destCbCr, info, permuteMap, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_ARGBFFFFtoARGB8888_dithered(const vImage_Buffer *src, const vImage_Buffer *dest, const Pixel_FFFF maxFloat, const Pixel_FFFF minFloat, int dither, const uint8_t permuteMap[4], vImage_Flags flags)
{
  return MEMORY[0x24BDB36C8](src, dest, maxFloat, minFloat, *(_QWORD *)&dither, permuteMap, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_ARGBFFFFtoPlanarF(const vImage_Buffer *srcARGB, const vImage_Buffer *destA, const vImage_Buffer *destR, const vImage_Buffer *destG, const vImage_Buffer *destB, vImage_Flags flags)
{
  return MEMORY[0x24BDB36E0](srcARGB, destA, destR, destG, destB, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_ARGBToYpCbCr_GenerateConversion(const vImage_ARGBToYpCbCrMatrix *matrix, const vImage_YpCbCrPixelRange *pixelRange, vImage_ARGBToYpCbCr *outInfo, vImageARGBType inARGBType, vImageYpCbCrType outYpCbCrType, vImage_Flags flags)
{
  return MEMORY[0x24BDB36F0](matrix, pixelRange, outInfo, *(_QWORD *)&inARGBType, *(_QWORD *)&outYpCbCrType, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_ChunkyToPlanarF(const void *srcChannels[], const vImage_Buffer *destPlanarBuffers[], unsigned int channelCount, size_t srcStrideBytes, vImagePixelCount srcWidth, vImagePixelCount srcHeight, size_t srcRowBytes, vImage_Flags flags)
{
  return MEMORY[0x24BDB3710](srcChannels, destPlanarBuffers, *(_QWORD *)&channelCount, srcStrideBytes, srcWidth, srcHeight, srcRowBytes, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_Planar16FtoPlanarF(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x24BDB3728](src, dest, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_Planar8ToBGRX8888(const vImage_Buffer *blue, const vImage_Buffer *green, const vImage_Buffer *red, Pixel_8 alpha, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x24BDB3748](blue, green, red, alpha, dest, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_Planar8ToBGRXFFFF(const vImage_Buffer *blue, const vImage_Buffer *green, const vImage_Buffer *red, Pixel_F alpha, const vImage_Buffer *dest, const Pixel_FFFF maxFloat, const Pixel_FFFF minFloat, vImage_Flags flags)
{
  return MEMORY[0x24BDB3758](blue, green, red, dest, maxFloat, minFloat, *(_QWORD *)&flags, alpha);
}

vImage_Error vImageConvert_Planar8ToXRGB8888(Pixel_8 alpha, const vImage_Buffer *red, const vImage_Buffer *green, const vImage_Buffer *blue, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x24BDB3768](alpha, red, green, blue, dest, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_Planar8ToXRGBFFFF(Pixel_F alpha, const vImage_Buffer *red, const vImage_Buffer *green, const vImage_Buffer *blue, const vImage_Buffer *dest, const Pixel_FFFF maxFloat, const Pixel_FFFF minFloat, vImage_Flags flags)
{
  return MEMORY[0x24BDB3778](red, green, blue, dest, maxFloat, minFloat, *(_QWORD *)&flags, alpha);
}

vImage_Error vImageConvert_Planar8toPlanar16F(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x24BDB3790](src, dest, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_Planar8toPlanarF(const vImage_Buffer *src, const vImage_Buffer *dest, Pixel_F maxFloat, Pixel_F minFloat, vImage_Flags flags)
{
  return MEMORY[0x24BDB37A8](src, dest, *(_QWORD *)&flags, maxFloat, minFloat);
}

vImage_Error vImageConvert_PlanarFToBGRX8888(const vImage_Buffer *blue, const vImage_Buffer *green, const vImage_Buffer *red, Pixel_8 alpha, const vImage_Buffer *dest, const Pixel_FFFF maxFloat, const Pixel_FFFF minFloat, vImage_Flags flags)
{
  return MEMORY[0x24BDB37C0](blue, green, red, alpha, dest, maxFloat, minFloat, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_PlanarFToBGRXFFFF(const vImage_Buffer *blue, const vImage_Buffer *green, const vImage_Buffer *red, Pixel_F alpha, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x24BDB37D0](blue, green, red, dest, *(_QWORD *)&flags, alpha);
}

vImage_Error vImageConvert_PlanarFToXRGB8888(Pixel_8 alpha, const vImage_Buffer *red, const vImage_Buffer *green, const vImage_Buffer *blue, const vImage_Buffer *dest, const Pixel_FFFF maxFloat, const Pixel_FFFF minFloat, vImage_Flags flags)
{
  return MEMORY[0x24BDB37E0](alpha, red, green, blue, dest, maxFloat, minFloat, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_PlanarFtoPlanar16F(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x24BDB37F0](src, dest, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_YpCbCrToARGB_GenerateConversion(const vImage_YpCbCrToARGBMatrix *matrix, const vImage_YpCbCrPixelRange *pixelRange, vImage_YpCbCrToARGB *outInfo, vImageYpCbCrType inYpCbCrType, vImageARGBType outARGBType, vImage_Flags flags)
{
  return MEMORY[0x24BDB3850](matrix, pixelRange, outInfo, *(_QWORD *)&inYpCbCrType, *(_QWORD *)&outARGBType, *(_QWORD *)&flags);
}

vImage_Error vImageCopyBuffer(const vImage_Buffer *src, const vImage_Buffer *dest, size_t pixelSize, vImage_Flags flags)
{
  return MEMORY[0x24BDB38A0](src, dest, pixelSize, *(_QWORD *)&flags);
}

vImage_Error vImagePermuteChannels_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, const uint8_t permuteMap[4], vImage_Flags flags)
{
  return MEMORY[0x24BDB3950](src, dest, permuteMap, *(_QWORD *)&flags);
}

vImage_Error vImagePermuteChannels_ARGBFFFF(const vImage_Buffer *src, const vImage_Buffer *dest, const uint8_t permuteMap[4], vImage_Flags flags)
{
  return MEMORY[0x24BDB3960](src, dest, permuteMap, *(_QWORD *)&flags);
}

vImage_Error vImageRotate90_ARGB16U(const vImage_Buffer *src, const vImage_Buffer *dest, uint8_t rotationConstant, const Pixel_ARGB_16U backColor, vImage_Flags flags)
{
  return MEMORY[0x24BDB3980](src, dest, rotationConstant, backColor, *(_QWORD *)&flags);
}

vImage_Error vImageRotate90_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, uint8_t rotationConstant, const Pixel_8888 backColor, vImage_Flags flags)
{
  return MEMORY[0x24BDB3990](src, dest, rotationConstant, backColor, *(_QWORD *)&flags);
}

vImage_Error vImageRotate90_ARGBFFFF(const vImage_Buffer *src, const vImage_Buffer *dest, uint8_t rotationConstant, const Pixel_FFFF backColor, vImage_Flags flags)
{
  return MEMORY[0x24BDB39A0](src, dest, rotationConstant, backColor, *(_QWORD *)&flags);
}

vImage_Error vImageRotate90_Planar16F(const vImage_Buffer *src, const vImage_Buffer *dest, uint8_t rotationConstant, const Pixel_16F backColor, vImage_Flags flags)
{
  return MEMORY[0x24BDB39A8](src, dest, rotationConstant, backColor, *(_QWORD *)&flags);
}

vImage_Error vImageRotate90_Planar16U(const vImage_Buffer *src, const vImage_Buffer *dest, uint8_t rotationConstant, Pixel_16U backColor, vImage_Flags flags)
{
  return MEMORY[0x24BDB39C0](src, dest, rotationConstant, backColor, *(_QWORD *)&flags);
}

vImage_Error vImageRotate90_Planar8(const vImage_Buffer *src, const vImage_Buffer *dest, uint8_t rotationConstant, Pixel_8 backColor, vImage_Flags flags)
{
  return MEMORY[0x24BDB39D0](src, dest, rotationConstant, backColor, *(_QWORD *)&flags);
}

vImage_Error vImageRotate90_PlanarF(const vImage_Buffer *src, const vImage_Buffer *dest, uint8_t rotationConstant, Pixel_F backColor, vImage_Flags flags)
{
  return MEMORY[0x24BDB39D8](src, dest, rotationConstant, *(_QWORD *)&flags, backColor);
}

vImage_Error vImageScale_ARGB16F(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x24BDB39E8](src, dest, tempBuffer, *(_QWORD *)&flags);
}

vImage_Error vImageScale_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x24BDB3A08](src, dest, tempBuffer, *(_QWORD *)&flags);
}

vImage_Error vImageScale_ARGBFFFF(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x24BDB3A18](src, dest, tempBuffer, *(_QWORD *)&flags);
}

vImage_Error vImageScale_CbCr8(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x24BDB3A30](src, dest, tempBuffer, *(_QWORD *)&flags);
}

vImage_Error vImageScale_Planar16F(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x24BDB3A40](src, dest, tempBuffer, *(_QWORD *)&flags);
}

vImage_Error vImageScale_Planar8(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x24BDB3A68](src, dest, tempBuffer, *(_QWORD *)&flags);
}

vImage_Error vImageScale_PlanarF(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x24BDB3A78](src, dest, tempBuffer, *(_QWORD *)&flags);
}

