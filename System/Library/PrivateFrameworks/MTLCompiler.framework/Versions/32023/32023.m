uint64_t MetalModulePass::MetalModulePass(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = a2;
  *(_DWORD *)(result + 24) = 4;
  *(_QWORD *)result = &off_25111E050;
  *(_QWORD *)(result + 32) = *(_QWORD *)(a3 + 72);
  *(_QWORD *)(result + 64) = a3;
  *(_DWORD *)(result + 152) = 0;
  *(_QWORD *)(result + 136) = 0;
  *(_QWORD *)(result + 144) = 0;
  *(_DWORD *)(result + 176) = 0;
  *(_QWORD *)(result + 160) = 0;
  *(_QWORD *)(result + 168) = 0;
  return result;
}

uint64_t MetalModulePass::doInitialization(MetalModulePass *this, llvm::Module *a2)
{
  llvm::LLVMContext *v4;
  llvm::LLVMContext *v5;
  llvm::LLVMContext *v6;
  llvm::LLVMContext *v7;
  llvm::LLVMContext *v8;

  *((_QWORD *)this + 5) = *(_QWORD *)a2;
  *((_QWORD *)this + 7) = llvm::Module::getDataLayout(a2);
  *((_QWORD *)this + 9) = llvm::Type::getInt64Ty(*((llvm::Type **)this + 5), v4);
  *((_QWORD *)this + 10) = llvm::Type::getInt32Ty(*((llvm::Type **)this + 5), v5);
  *((_QWORD *)this + 11) = llvm::Type::getInt16Ty(*((llvm::Type **)this + 5), v6);
  *((_QWORD *)this + 12) = llvm::Type::getInt8Ty(*((llvm::Type **)this + 5), v7);
  *((_QWORD *)this + 13) = llvm::Type::getInt1Ty(*((llvm::Type **)this + 5), v8);
  *((_QWORD *)this + 14) = llvm::Type::getInt8PtrTy(*((llvm::Type **)this + 5), 0);
  *((_QWORD *)this + 6) = a2;
  return 0;
}

uint64_t MetalModulePass::runOnModule(MetalModulePass *this, llvm::Module *a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  char v11;

  MTLBoundsCheck::getMetalMetadata(a2, (uint64_t)&v9);
  if (v11)
  {
    *((_DWORD *)this + 30) = v9;
    v4 = v10;
  }
  else
  {
    v4 = 0;
  }
  *((_QWORD *)this + 16) = v4;
  MTLBoundsCheck::getVisibleFunctionsMetadata(a2, (uint64_t)&v6);
  llvm::deallocate_buffer(*((llvm **)this + 17), (void *)(16 * *((unsigned int *)this + 38)));
  *((_QWORD *)this + 17) = v6;
  *((_QWORD *)this + 18) = v7;
  v6 = 0;
  v7 = 0;
  *((_DWORD *)this + 38) = v8;
  v8 = 0;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)&v6);
  MTLBoundsCheck::getIntersectionFunctionsMetadata(a2, (uint64_t)&v6);
  llvm::deallocate_buffer(*((llvm **)this + 20), (void *)(16 * *((unsigned int *)this + 44)));
  *((_QWORD *)this + 20) = v6;
  *((_QWORD *)this + 21) = v7;
  v6 = 0;
  v7 = 0;
  *((_DWORD *)this + 44) = v8;
  v8 = 0;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)&v6);
  return 0;
}

void sub_240FA464C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MetalModulePass::getMetadata(llvm::MDString **this, llvm::LLVMContext *a2, const char *a3)
{
  return llvm::MDString::get(this[5], a2, a3);
}

uint64_t llvm::MDString::get(llvm::MDString *this, llvm::LLVMContext *__s, const char *a3)
{
  if (__s)
    strlen((const char *)__s);
  return llvm::MDString::get();
}

uint64_t MetalModulePass::getMetadata()
{
  return llvm::MDString::get();
}

{
  llvm::TypeSize::operator unsigned long long();
  return MetalModulePass::getMetadata<unsigned long long>();
}

uint64_t MetalModulePass::getMetadata<unsigned long long>()
{
  llvm::IntegerType::get();
  llvm::ConstantInt::get();
  return llvm::ValueAsMetadata::get();
}

uint64_t MetalModulePass::getMetadata(MetalModulePass *this, llvm::Value *a2)
{
  return llvm::ValueAsMetadata::get();
}

uint64_t MetalModulePass::getMetadata(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

{
  return a2;
}

uint64_t MetalModulePass::getTypeForStride(MetalModulePass *this, int a2)
{
  uint64_t result;

  result = 0;
  switch(a2)
  {
    case 1:
      result = *((_QWORD *)this + 12);
      break;
    case 2:
      result = *((_QWORD *)this + 11);
      break;
    case 3:
    case 5:
    case 6:
    case 7:
      return result;
    case 4:
      result = *((_QWORD *)this + 10);
      break;
    case 8:
      goto LABEL_4;
    default:
      if (a2 == 16)
LABEL_4:
        result = llvm::VectorType::get();
      break;
  }
  return result;
}

void MetalModulePass::cacheStaticBoundsInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Impl;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  void *v9[2];
  _QWORD v10[9];

  v10[8] = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  v9[0] = v10;
  v9[1] = (void *)0x800000000;
  if (*(_BYTE *)(a3 + 16))
  {
    v8 = (uint64_t *)llvm::MDString::get();
    llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)v9, (uint64_t *)&v8);
    v8 = (uint64_t *)MetalModulePass::getMetadata<unsigned int>();
    llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)v9, (uint64_t *)&v8);
  }
  if (*(_BYTE *)(a3 + 20))
  {
    v8 = (uint64_t *)llvm::MDString::get();
    llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)v9, (uint64_t *)&v8);
    v8 = (uint64_t *)MetalModulePass::getMetadata<BOOL>();
    llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)v9, (uint64_t *)&v8);
  }
  if (*(_DWORD *)(a3 + 8))
  {
    v8 = (uint64_t *)llvm::MDString::get();
    llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)v9, (uint64_t *)&v8);
    v8 = (uint64_t *)MetalModulePass::getMetadata<unsigned int>();
    llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)v9, (uint64_t *)&v8);
  }
  if (*(_QWORD *)a3)
  {
    v8 = (uint64_t *)llvm::MDString::get();
    llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)v9, (uint64_t *)&v8);
    v8 = (uint64_t *)llvm::ValueAsMetadata::get();
    llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)v9, (uint64_t *)&v8);
  }
  if (*(_BYTE *)(a3 + 22))
  {
    v8 = (uint64_t *)llvm::MDString::get();
    llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)v9, (uint64_t *)&v8);
    v8 = (uint64_t *)MetalModulePass::getMetadata<BOOL>();
    llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)v9, (uint64_t *)&v8);
  }
  v8 = (uint64_t *)llvm::MDString::get();
  llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)v9, (uint64_t *)&v8);
  v8 = (uint64_t *)MetalModulePass::getMetadata<BOOL>();
  llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)v9, (uint64_t *)&v8);
  Impl = llvm::MDTuple::getImpl();
  v6 = *(_QWORD *)(a1 + 64) + 128;
  v8 = &v7;
  std::__hash_table<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>>>::__emplace_unique_key_args<llvm::Value *,std::piecewise_construct_t const&,std::tuple<llvm::Value * const&>,std::tuple<>>(v6, &v7, (uint64_t)&std::piecewise_construct, &v8)[3] = Impl;
  if (v9[0] != v10)
    free(v9[0]);
}

void sub_240FA4A2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;

  if (a12 != v12)
    free(a12);
  _Unwind_Resume(exception_object);
}

uint64_t llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int v4;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(a1, *a2);
    v4 = *(_DWORD *)(a1 + 8);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = *a2;
    v4 = v3 + 1;
    *(_DWORD *)(a1 + 8) = v4;
  }
  return *(_QWORD *)a1 + 8 * v4 - 8;
}

uint64_t MetalModulePass::getMetadata<unsigned int>()
{
  llvm::IntegerType::get();
  llvm::ConstantInt::get();
  return llvm::ValueAsMetadata::get();
}

uint64_t MetalModulePass::getMetadata<BOOL>()
{
  llvm::IntegerType::get();
  llvm::ConstantInt::get();
  return llvm::ValueAsMetadata::get();
}

void MetalModulePass::getStaticBoundsInfo(MetalModulePass *this@<X0>, llvm::Value *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  unsigned int v7;
  llvm::StructType *v8;
  __int128 v9;
  uint64_t v10;
  llvm::Value *v11;

  v11 = a2;
  v5 = std::__hash_table<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>>>::find<llvm::Value *>((_QWORD *)(*((_QWORD *)this + 8) + 128), &v11);
  if (v5)
  {
    getStaticBoundsInfo((llvm::MDString *)v5[3], (uint64_t)&v9);
    *(_OWORD *)a3 = v9;
    *(_QWORD *)(a3 + 16) = v10;
    *(_BYTE *)(a3 + 24) = 1;
  }
  else
  {
    v6 = *(_QWORD *)v11;
    v7 = *(_DWORD *)(*(_QWORD *)v11 + 8);
    if (v7 != 15)
      goto LABEL_10;
    if ((v7 & 0xFE) == 0x12)
      v7 = *(_DWORD *)(**(_QWORD **)(v6 + 16) + 8);
    if (MTLBoundsCheck::checkAddressSpace((MTLBoundsCheck *)(v7 >> 8))
      && (v8 = **(llvm::StructType ***)(v6 + 16), *((_BYTE *)v8 + 8) == 16)
      && isArgumentBufferStruct(v8))
    {
      *(_QWORD *)&v9 = 0;
      DWORD2(v9) = 0;
      BYTE12(v9) = 0;
      LOBYTE(v10) = 0;
      WORD2(v10) = 1;
      BYTE6(v10) = 1;
      MetalModulePass::cacheStaticBoundsInfo((uint64_t)this, (uint64_t)v11, (uint64_t)&v9);
      *(_OWORD *)a3 = v9;
      *(_QWORD *)(a3 + 16) = v10;
      *(_BYTE *)(a3 + 24) = 1;
    }
    else
    {
LABEL_10:
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 24) = 0;
    }
  }
}

uint64_t isArgumentBufferStruct(llvm::StructType *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;

  v1 = *((unsigned int *)a1 + 3);
  if (!(_DWORD)v1)
    return 0;
  v2 = (uint64_t *)*((_QWORD *)a1 + 2);
  v3 = 8 * v1;
  while (1)
  {
    v4 = *v2;
    v5 = *(_DWORD *)(*v2 + 8);
    if (v5 == 15)
      break;
LABEL_8:
    if (v5 == 16 && (isArgumentBufferStruct((llvm::StructType *)v4) & 1) != 0)
      return 1;
    ++v2;
    v3 -= 8;
    if (!v3)
      return 0;
  }
  if ((v5 & 0xFE) == 0x12)
    v5 = *(_DWORD *)(**(_QWORD **)(v4 + 16) + 8);
  if (!MTLBoundsCheck::checkAddressSpace((MTLBoundsCheck *)(v5 >> 8)))
  {
    LOBYTE(v5) = *(_BYTE *)(v4 + 8);
    goto LABEL_8;
  }
  return 1;
}

uint64_t MetalModulePass::getEntryFunction(MetalModulePass *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 16);
  if (v1)
    return *(_QWORD *)(*(_QWORD *)(v1 - 8 * *(unsigned int *)(v1 + 8)) + 128);
  else
    return 0;
}

void MetalModulePass::insertFunctionArgumentMD(uint64_t a1, uint64_t a2, llvm::LLVMContext *a3, uint64_t a4, llvm::LLVMContext *a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v10;
  uint64_t Impl;
  unint64_t v12;
  unint64_t i;
  llvm::MDString *v14;
  void *v15;
  uint64_t v16;
  _BYTE v17[4];
  int v18;
  llvm::LLVMContext *v19;
  uint64_t v20;
  llvm::LLVMContext *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t __src;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v22 = a8;
  v23 = a7;
  v20 = a4;
  v21 = a3;
  v19 = a5;
  if (a2)
  {
    v8 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
    if (v8)
    {
      if (a6)
        v10 = *(_DWORD *)(v8 + 8);
      else
        v10 = 0;
      v18 = v10;
      v14 = *(llvm::MDString **)(a1 + 40);
      v15 = v17;
      v16 = 0;
      MTLMDBuilder::emplace_back<unsigned int &,char const*&>(&v14, (uint64_t)&v18, &v21);
      if (BYTE4(v23))
        MTLMDBuilder::emplace_back<char const(&)[18],unsigned int &>(&v14, (llvm::LLVMContext *)"air.arg_type_size", (const char *)&v23);
      if (BYTE4(v22))
        MTLMDBuilder::emplace_back<char const(&)[18],unsigned int &>(&v14, (llvm::LLVMContext *)"air.arg_type_align_size", (const char *)&v22);
      MTLMDBuilder::emplace_back<char const(&)[18],char const*&,char const(&)[13],char const*&>(&v14, (llvm::LLVMContext *)"air.arg_type_name", (const char *)&v20, (llvm::LLVMContext *)"air.arg_name", &v19);
      Impl = llvm::MDTuple::getImpl();
      LODWORD(v16) = 0;
      if (!a6)
      {
        __src = MetalModulePass::getMetadata((uint64_t)&v14, Impl);
        llvm::SmallVectorImpl<llvm::Metadata *>::append<llvm::Metadata * const*,void>((uint64_t)&v15, &__src, &v25);
      }
      v12 = *(unsigned int *)(v8 + 8);
      if ((_DWORD)v12)
      {
        for (i = 0; i < v12; ++i)
        {
          __src = MetalModulePass::getMetadata((uint64_t)&v14, *(_QWORD *)(v8 - 8 * v12 + 8 * i));
          llvm::SmallVectorImpl<llvm::Metadata *>::append<llvm::Metadata * const*,void>((uint64_t)&v15, &__src, &v25);
          v12 = *(unsigned int *)(v8 + 8);
          if (!a6 && *(_QWORD *)(v8 - 8 * v12 + 8 * i))
          {
            MTLMDBuilder::getMetadata<unsigned long long>();
            llvm::MDNode::replaceOperandWith();
            v12 = *(unsigned int *)(v8 + 8);
          }
        }
      }
      if (a6 == 1)
      {
        __src = MetalModulePass::getMetadata((uint64_t)&v14, Impl);
        llvm::SmallVectorImpl<llvm::Metadata *>::append<llvm::Metadata * const*,void>((uint64_t)&v15, &__src, &v25);
      }
      llvm::MDTuple::getImpl();
      llvm::MDNode::replaceOperandWith();
      if (v15 != v17)
        free(v15);
    }
  }
}

void sub_240FA4F7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;

  if (a11 != v11)
    free(a11);
  _Unwind_Resume(exception_object);
}

uint64_t MTLMDBuilder::emplace_back<unsigned int &,char const*&>(llvm::MDString **a1, uint64_t a2, llvm::LLVMContext **a3)
{
  uint64_t v5;
  const char *v6;
  _QWORD __src[2];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v5 = (uint64_t)(a1 + 1);
  __src[0] = MTLMDBuilder::getMetadata<unsigned int>();
  __src[1] = MTLMDBuilder::getMetadata(a1, *a3, v6);
  return llvm::SmallVectorImpl<llvm::Metadata *>::append<llvm::Metadata * const*,void>(v5, __src, &v9);
}

uint64_t MTLMDBuilder::emplace_back<char const(&)[18],unsigned int &>(llvm::MDString **a1, llvm::LLVMContext *a2, const char *a3)
{
  uint64_t v3;
  _QWORD __src[2];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v3 = (uint64_t)(a1 + 1);
  __src[0] = MTLMDBuilder::getMetadata(a1, a2, a3);
  __src[1] = MTLMDBuilder::getMetadata<unsigned int>();
  return llvm::SmallVectorImpl<llvm::Metadata *>::append<llvm::Metadata * const*,void>(v3, __src, &v6);
}

uint64_t MTLMDBuilder::emplace_back<char const(&)[18],char const*&,char const(&)[13],char const*&>(llvm::MDString **a1, llvm::LLVMContext *a2, const char *a3, llvm::LLVMContext *a4, llvm::LLVMContext **a5)
{
  uint64_t v9;
  const char *v10;
  const char *v11;
  const char *v12;
  _QWORD __src[4];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v9 = (uint64_t)(a1 + 1);
  __src[0] = MTLMDBuilder::getMetadata(a1, a2, a3);
  __src[1] = MTLMDBuilder::getMetadata(a1, *(llvm::LLVMContext **)a3, v10);
  __src[2] = MTLMDBuilder::getMetadata(a1, a4, v11);
  __src[3] = MTLMDBuilder::getMetadata(a1, *a5, v12);
  return llvm::SmallVectorImpl<llvm::Metadata *>::append<llvm::Metadata * const*,void>(v9, __src, &v15);
}

uint64_t MTLMDBuilder::getMetadata<unsigned long long>()
{
  llvm::IntegerType::get();
  llvm::ConstantInt::get();
  return llvm::ValueAsMetadata::get();
}

uint64_t MetalModulePass::insertArgumentType(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  void *v11[2];
  _QWORD v12[5];

  v12[4] = *MEMORY[0x24BDAC8D0];
  v10 = a3;
  v11[0] = v12;
  v11[1] = (void *)0x400000000;
  if (!a4)
    llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)v11, &v10);
  if (*(_DWORD *)(a2 + 12) != 1)
  {
    v6 = 0;
    do
    {
      v9 = 0;
      v9 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v6 + 8);
      llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)v11, &v9);
      ++v6;
    }
    while (v6 < (*(_DWORD *)(a2 + 12) - 1));
  }
  if (a4 == 1)
    llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)v11, &v10);
  v7 = llvm::FunctionType::get();
  if (v11[0] != v12)
    free(v11[0]);
  return v7;
}

void sub_240FA52C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;

  if (a12 != v12)
    free(a12);
  _Unwind_Resume(exception_object);
}

uint64_t MetalModulePass::insertArgument(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6, int a7)
{
  uint64_t v10;
  uint64_t inserted;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  char v16;
  const llvm::AttributeList *v17;
  unsigned int v18;
  uint64_t v19;
  const llvm::AttributeList *v20;
  uint64_t v21;
  llvm::ValueHandleBase *v22;
  const llvm::AttributeList *v23;
  uint64_t v25;
  uint64_t ParamAttrs;
  llvm::Value *v27;
  uint64_t v28[2];
  int v29;
  unsigned int v30[6];
  char v31;
  uint64_t v32[2];
  void *Name;
  uint64_t v34;
  _BYTE v35[16];
  __int16 v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v32[0] = a4;
  v32[1] = a5;
  v10 = *(_QWORD *)(a2 + 24);
  inserted = MetalModulePass::insertArgumentType(a1, v10, a3, a7);
  v12 = *(_DWORD *)(a2 + 32) & 0xF;
  v36 = 261;
  Name = (void *)llvm::Value::getName((llvm::Value *)a2);
  v34 = v13;
  v14 = llvm::Function::Create(inserted, v12, (uint64_t)&Name, *(_QWORD *)(a2 + 40));
  llvm::GlobalObject::copyMetadata();
  v15 = *(_WORD *)(v14 + 18);
  if (a7)
  {
    if ((v15 & 1) != 0)
      llvm::Function::BuildLazyArguments((llvm::Function *)v14);
    v16 = 1;
    HIBYTE(v36) = 1;
    if (*a6)
    {
      Name = a6;
      v16 = 3;
    }
  }
  else
  {
    if ((v15 & 1) != 0)
      llvm::Function::BuildLazyArguments((llvm::Function *)v14);
    v16 = 1;
    HIBYTE(v36) = 1;
    if (*a6)
    {
      Name = a6;
      v16 = 3;
    }
  }
  LOBYTE(v36) = v16;
  llvm::Value::setName();
  llvm::Function::copyAttributesFrom((llvm::Function *)v14, (const llvm::Function *)a2);
  Name = v35;
  v34 = 0x800000000;
  if (!a7)
    llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)&Name, v32);
  v29 = 128;
  v28[0] = MEMORY[0x24268CD5C](0x2000, 8);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::initEmpty((uint64_t)v28);
  LOBYTE(v30[0]) = 0;
  v31 = 0;
  if (*(_DWORD *)(v10 + 12) != 1)
  {
    v19 = 0;
    v20 = 0;
    do
    {
      v27 = 0;
      if ((*(_WORD *)(a2 + 18) & 1) != 0)
        llvm::Function::BuildLazyArguments((llvm::Function *)a2);
      v27 = (llvm::Value *)(*(_QWORD *)(a2 + 88) + v19);
      if ((*(_WORD *)(v14 + 18) & 1) != 0)
        llvm::Function::BuildLazyArguments((llvm::Function *)v14);
      v21 = *(_QWORD *)(v14 + 88);
      v25 = *(_QWORD *)(a2 + 112);
      ParamAttrs = llvm::compat::getParamAttrs((llvm::compat *)&v25, v20, v18);
      llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)&Name, &ParamAttrs);
      v22 = (llvm::ValueHandleBase *)llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::operator[](v28, &v27);
      llvm::ValueHandleBase::operator=(v22, v21 + 40 * (a7 == 0) + v19);
      v20 = (const llvm::AttributeList *)((char *)v20 + 1);
      v19 += 40;
    }
    while ((unint64_t)v20 < (*(_DWORD *)(v10 + 12) - 1));
  }
  if (a7 == 1)
    llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)&Name, v32);
  v27 = *(llvm::Value **)(a2 + 112);
  llvm::compat::getFnAttrs((llvm::compat *)&v27, v17);
  ParamAttrs = *(_QWORD *)(a2 + 112);
  llvm::compat::getRetAttrs((llvm::compat *)&ParamAttrs, v23);
  *(_QWORD *)(v14 + 112) = llvm::AttributeList::get();
  if (*(_QWORD *)(a2 + 72) != a2 + 72)
    llvm::iplist_impl<llvm::simple_ilist<llvm::BasicBlock>,llvm::SymbolTableListTraits<llvm::BasicBlock>>::transfer(v14 + 72, (uint64_t *)(v14 + 72), a2 + 72, *(uint64_t **)(a2 + 80), (uint64_t *)(a2 + 72));
  llvm::ValueMapper::ValueMapper();
  llvm::ValueMapper::remapFunction((llvm::ValueMapper *)&v27, (Function *)v14);
  MEMORY[0x24268CAE0](&v27);
  if (v31)
  {
    llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>::~DenseMap(v30);
    v31 = 0;
  }
  llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::~DenseMap((unsigned int *)v28);
  if (Name != v35)
    free(Name);
  return v14;
}

void sub_240FA5628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;

  if (a23 != v23)
    free(a23);
  _Unwind_Resume(exception_object);
}

uint64_t llvm::Function::Create(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = llvm::User::operator new((llvm::User *)0x78);
  MEMORY[0x24268D2F0](v8, a1, a2, 0xFFFFFFFFLL, a3, a4);
  return v8;
}

void sub_240FA56EC(_Unwind_Exception *a1)
{
  void *v1;

  llvm::User::operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::operator[](uint64_t *a1, llvm::Value **a2)
{
  _QWORD *v3;
  void *v5;
  _QWORD v6[4];

  llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v5, *a2);
  v5 = &unk_25111E0F0;
  v6[3] = a1;
  v3 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::FindAndConstruct(a1, (uint64_t)&v5)+ 5;
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v6);
  return v3;
}

void sub_240FA5760(_Unwind_Exception *a1)
{
  uint64_t v1;

  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)(v1 + 8));
  _Unwind_Resume(a1);
}

unsigned int *llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::~ValueMap(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
  {
    llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>::~DenseMap((unsigned int *)(a1 + 24));
    *(_BYTE *)(a1 + 48) = 0;
  }
  return llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::~DenseMap((unsigned int *)a1);
}

void MetalModulePass::mutateFunctionArgumentMD(uint64_t a1, uint64_t a2, unsigned int a3, llvm::LLVMContext *a4, llvm::LLVMContext *a5, llvm::LLVMContext *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::MDString *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  if (a2)
  {
    v6 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 - 8 * *(unsigned int *)(v6 + 8) + 8 * a3);
      v8 = *(_QWORD *)(v7 - 8 * *(unsigned int *)(v7 + 8));
      v9 = *(llvm::MDString **)(a1 + 40);
      v10 = &v12;
      v11 = 0;
      MTLMDBuilder::getMDTuple<llvm::Metadata *,char const*,char const*,char const*,char const*,char const*>(&v9, v8, a4, (llvm::LLVMContext *)"air.arg_type_name", a5, (llvm::LLVMContext *)"air.arg_name", a6);
      llvm::MDNode::replaceOperandWith();
      if (v10 != &v12)
        free(v10);
    }
  }
}

void sub_240FA5858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;

  if (a11 != v11)
    free(a11);
  _Unwind_Resume(exception_object);
}

uint64_t MTLMDBuilder::getMDTuple<llvm::Metadata *,char const*,char const*,char const*,char const*,char const*>(llvm::MDString **a1, uint64_t a2, llvm::LLVMContext *a3, llvm::LLVMContext *a4, llvm::LLVMContext *a5, llvm::LLVMContext *a6, llvm::LLVMContext *a7)
{
  const char *v13;
  const char *v14;
  const char *v15;
  const char *v16;
  const char *v17;

  MetalModulePass::getMetadata((uint64_t)a1, a2);
  MTLMDBuilder::getMetadata(a1, a3, v13);
  MTLMDBuilder::getMetadata(a1, a4, v14);
  MTLMDBuilder::getMetadata(a1, a5, v15);
  MTLMDBuilder::getMetadata(a1, a6, v16);
  MTLMDBuilder::getMetadata(a1, a7, v17);
  return llvm::MDTuple::getImpl();
}

void MetalModulePass::~MetalModulePass(MetalModulePass *this)
{
  char *v2;

  *(_QWORD *)this = &off_25111E050;
  v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
}

{
  char *v2;

  *(_QWORD *)this = &off_25111E050;
  v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x24268D8F0);
}

{
  char *v2;

  *(_QWORD *)this = &off_25111E050;
  v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
}

uint64_t llvm::Pass::doFinalization()
{
  return 0;
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

uint64_t llvm::ValueHandleBase::operator=(llvm::ValueHandleBase *this, uint64_t a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 2);
  if (v3 != a2)
  {
    if (v3 != -8192 && v3 != -4096 && v3 != 0)
      llvm::ValueHandleBase::RemoveFromUseList(this);
    *((_QWORD *)this + 2) = a2;
    if (a2 != -8192 && a2 != -4096 && a2)
      llvm::ValueHandleBase::AddToUseList(this);
  }
  return a2;
}

unsigned int *llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>::~DenseMap(unsigned int *a1)
{
  llvm::DenseMapBase<llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>,llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>::destroyAll(a1);
  llvm::deallocate_buffer(*(llvm **)a1, (void *)(16 * a1[4]));
  return a1;
}

unsigned int *llvm::DenseMapBase<llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>,llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>::destroyAll(unsigned int *result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = result[4];
  if ((_DWORD)v1)
  {
    v2 = 16 * v1;
    result = (unsigned int *)(*(_QWORD *)result + 8);
    do
    {
      if ((*((_QWORD *)result - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        llvm::TrackingMDRef::~TrackingMDRef((llvm::TrackingMDRef *)result);
      result += 4;
      v2 -= 16;
    }
    while (v2);
  }
  return result;
}

void llvm::TrackingMDRef::~TrackingMDRef(llvm::TrackingMDRef *this)
{
  if (*(_QWORD *)this)
    llvm::MetadataTracking::untrack();
}

unsigned int *llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::~DenseMap(unsigned int *a1)
{
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::destroyAll(a1);
  llvm::deallocate_buffer(*(llvm **)a1, (void *)((unint64_t)a1[4] << 6));
  return a1;
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::destroyAll(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v2;
  llvm::ValueHandleBase *v3;
  _QWORD v4[5];
  _QWORD v5[4];

  v1 = a1[4];
  if ((_DWORD)v1)
  {
    v5[1] = 0;
    v5[2] = -4096;
    v4[4] = &unk_25111E0F0;
    v5[0] = 2;
    v5[3] = 0;
    v4[1] = 0;
    v4[2] = -8192;
    v4[0] = 2;
    v2 = v1 << 6;
    v3 = (llvm::ValueHandleBase *)(*(_QWORD *)a1 + 40);
    v4[3] = 0;
    do
    {
      if ((*((_QWORD *)v3 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000)
        llvm::ValueHandleBase::~ValueHandleBase(v3);
      llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)((char *)v3 - 32));
      v3 = (llvm::ValueHandleBase *)((char *)v3 + 64);
      v2 -= 64;
    }
    while (v2);
    llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v4);
    llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v5);
  }
}

llvm::CallbackVH *llvm::CallbackVH::CallbackVH(llvm::CallbackVH *this, llvm::Value *a2)
{
  llvm::ValueHandleBase *v3;

  *((_QWORD *)this + 1) = 2;
  *((_QWORD *)this + 2) = 0;
  v3 = (llvm::CallbackVH *)((char *)this + 8);
  *((_QWORD *)v3 + 2) = a2;
  if (a2 != (llvm::Value *)-8192 && a2 != (llvm::Value *)-4096 && a2)
    llvm::ValueHandleBase::AddToUseList(v3);
  *(_QWORD *)this = MEMORY[0x24BED83B0] + 16;
  return this;
}

void llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::deleted(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  _QWORD v4[4];

  v1 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v4, (*(_DWORD *)(a1 + 8) >> 1) & 3, (_QWORD *)(a1 + 8));
  v2 = *(_QWORD *)(v1 + 24);
  v3 = &unk_25111E0F0;
  v4[3] = v2;
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::erase(v2, (uint64_t)&v3);
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v4);
}

void sub_240FA5CE0(_Unwind_Exception *a1)
{
  llvm::ValueHandleBase *v1;

  llvm::ValueHandleBase::~ValueHandleBase(v1);
  _Unwind_Resume(a1);
}

void llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::allUsesReplacedWith(uint64_t a1, llvm::Value *a2)
{
  uint64_t v3;
  int32x2_t *v4;
  int v5;
  unint64_t v6;
  llvm::Value *v7;
  int32x2_t *v8;
  _BYTE v9[24];
  llvm::Value *v10;
  _BYTE v11[24];
  _QWORD v12[3];
  void *v13;
  _BYTE v14[24];
  int32x2_t *v15;

  v3 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v14, (*(_DWORD *)(a1 + 8) >> 1) & 3, (_QWORD *)(a1 + 8));
  v4 = *(int32x2_t **)(v3 + 24);
  v13 = &unk_25111E0F0;
  v15 = v4;
  v10 = 0;
  v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>>((uint64_t *)v4, (uint64_t)&v13, &v10);
  v6 = *(_QWORD *)v4 + ((unint64_t)v4[2].u32[0] << 6);
  if (v5)
    v7 = v10;
  else
    v7 = (llvm::Value *)v6;
  if ((llvm::Value *)(*(_QWORD *)v15 + ((unint64_t)v15[2].u32[0] << 6)) != v7)
  {
    llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v12, 3u, (_QWORD *)v7 + 5);
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::erase(v15, v7);
    v8 = v15;
    v10 = a2;
    llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v11, 3u, v12);
    llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::insert((uint64_t)v8, &v10, (uint64_t)v9);
    llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v11);
    llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v12);
  }
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v14);
}

void sub_240FA5E00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  llvm::ValueHandleBase *v17;
  llvm::ValueHandleBase *v18;
  llvm::ValueHandleBase *v19;

  v19 = v18;
  llvm::ValueHandleBase::~ValueHandleBase(v19);
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)&a17);
  llvm::ValueHandleBase::~ValueHandleBase(v17);
  _Unwind_Resume(a1);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::erase(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  char *v6;
  _QWORD v7[3];
  uint64_t v8;

  v6 = 0;
  v3 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>>((uint64_t *)a1, a2, &v6);
  if ((_DWORD)v3)
  {
    v4 = v6;
    llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)(v6 + 40));
    v7[1] = 0;
    v7[2] = -8192;
    v6 = (char *)&unk_25111E0F0;
    v7[0] = 2;
    v8 = 0;
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v4 + 8), v7);
    *((_QWORD *)v4 + 4) = v8;
    llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v7);
    *(int32x2_t *)(a1 + 8) = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  return v3;
}

void sub_240FA5EE4(_Unwind_Exception *a1)
{
  llvm::ValueHandleBase *v1;

  llvm::ValueHandleBase::~ValueHandleBase(v1);
  _Unwind_Resume(a1);
}

llvm::ValueHandleBase *llvm::ValueHandleBase::ValueHandleBase(llvm::ValueHandleBase *this, unsigned int a2, _QWORD *a3)
{
  uint64_t v4;

  *(_QWORD *)this = 2 * a2;
  *((_QWORD *)this + 1) = 0;
  v4 = a3[2];
  *((_QWORD *)this + 2) = v4;
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::AddToExistingUseList(this, (llvm::ValueHandleBase **)(*a3 & 0xFFFFFFFFFFFFFFF8));
  return this;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>>(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  BOOL v14;
  int v15;
  _QWORD v16[5];
  _QWORD v17[4];

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v17[1] = 0;
    v17[2] = -4096;
    v16[4] = &unk_25111E0F0;
    v17[0] = 2;
    v17[3] = 0;
    v16[1] = 0;
    v16[2] = -8192;
    v16[0] = 2;
    v16[3] = 0;
    v5 = *(_QWORD *)(a2 + 24);
    v6 = v3 - 1;
    v7 = ((v5 >> 4) ^ (v5 >> 9)) & (v3 - 1);
    v8 = v4 + (v7 << 6);
    v9 = *(_QWORD *)(v8 + 24);
    if (v5 == v9)
    {
      v10 = 1;
    }
    else
    {
      v12 = 0;
      v13 = 1;
      v10 = 1;
      while (v9 != -4096)
      {
        if (v12)
          v14 = 0;
        else
          v14 = v9 == -8192;
        if (v14)
          v12 = v8;
        v15 = v7 + v13++;
        v7 = v15 & v6;
        v8 = v4 + (v7 << 6);
        v9 = *(_QWORD *)(v8 + 24);
        if (v5 == v9)
          goto LABEL_4;
      }
      v10 = 0;
      if (v12)
        v8 = v12;
    }
LABEL_4:
    *a3 = v8;
    llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v16);
    llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v17);
  }
  else
  {
    v10 = 0;
    *a3 = 0;
  }
  return v10;
}

uint64_t llvm::ValueHandleBase::operator=(llvm::ValueHandleBase *this, _QWORD *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *((_QWORD *)this + 2);
  result = a2[2];
  if (v3 == result)
    return v3;
  if (v3 != -8192 && v3 != -4096 && v3 != 0)
  {
    llvm::ValueHandleBase::RemoveFromUseList(this);
    result = a2[2];
  }
  *((_QWORD *)this + 2) = result;
  if (result != -8192 && result != -4096 && result != 0)
  {
    llvm::ValueHandleBase::AddToExistingUseList(this, (llvm::ValueHandleBase **)(*a2 & 0xFFFFFFFFFFFFFFF8));
    return *((_QWORD *)this + 2);
  }
  return result;
}

int32x2_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::erase(int32x2_t *a1, _QWORD *a2)
{
  int32x2_t result;
  _QWORD v5[3];
  uint64_t v6;

  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)(a2 + 5));
  v5[1] = 0;
  v5[2] = -8192;
  v5[0] = 2;
  v6 = 0;
  llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(a2 + 1), v5);
  a2[4] = v6;
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v5);
  result = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
  a1[1] = result;
  return result;
}

void sub_240FA615C(_Unwind_Exception *a1)
{
  llvm::ValueHandleBase *v1;

  llvm::ValueHandleBase::~ValueHandleBase(v1);
  _Unwind_Resume(a1);
}

double llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::insert@<D0>(uint64_t a1@<X0>, llvm::Value **a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v5;
  double result;
  void *v7;
  _QWORD v8[4];
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[3];
  __int128 v12;
  char v13;

  v5 = a2 + 1;
  llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v7, *a2);
  v7 = &unk_25111E0F0;
  v8[3] = a1;
  std::pair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>::pair[abi:ne180100]<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,0>(&v9, (uint64_t)&v7, v5);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::try_emplace<llvm::WeakTrackingVH>(a1, (uint64_t)&v9, v11, (uint64_t)&v12);
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v11);
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)&v10);
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v8);
  result = *(double *)&v12;
  *(_OWORD *)a3 = v12;
  *(_BYTE *)(a3 + 16) = v13;
  return result;
}

void sub_240FA621C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16)
{
  llvm::ValueHandleBase *v16;

  llvm::ValueHandleBase::~ValueHandleBase(v16);
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)&a16);
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)&a11);
  _Unwind_Resume(a1);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::try_emplace<llvm::WeakTrackingVH>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>>((uint64_t *)a1, a2, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::InsertIntoBucket<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>(a1, v12, a2, a3);
    v9 = (_QWORD *)result;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + ((unint64_t)*(unsigned int *)(a1 + 16) << 6);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::InsertIntoBucket<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v6;

  v6 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>>(a1, a3, a3, a2);
  llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v6 + 1), (_QWORD *)(a3 + 8));
  v6[4] = *(_QWORD *)(a3 + 32);
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)(v6 + 5), 3u, a4);
  return v6;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v10;
  _QWORD v11[4];

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::grow(a1, v7);
  v10 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>>((uint64_t *)a1, a3, &v10);
  a4 = v10;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  v11[1] = 0;
  v11[2] = -4096;
  v10 = &unk_25111E0F0;
  v11[0] = 2;
  v11[3] = 0;
  if (a4[3] != -4096)
    --*(_DWORD *)(a1 + 12);
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v11);
  return a4;
}

void llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  *(_QWORD *)a1 = MEMORY[0x24268CD5C]((unint64_t)v8 << 6, 8);
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::moveFromOldBuckets(a1, v4, (_QWORD *)v4 + 8 * v3);
    llvm::deallocate_buffer(v4, (void *)(v3 << 6));
  }
  else
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::initEmpty(a1);
  }
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::initEmpty(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  llvm::ValueHandleBase *v3;
  llvm::ValueHandleBase *v4;
  char *v5;
  _QWORD v6[3];
  uint64_t v7;

  *(_QWORD *)(a1 + 8) = 0;
  v6[1] = 0;
  v6[2] = -4096;
  v6[0] = 2;
  v7 = 0;
  v1 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v1)
  {
    v2 = (char *)(*(_QWORD *)a1 + (v1 << 6));
    v3 = (llvm::ValueHandleBase *)(*(_QWORD *)a1 + 8);
    do
    {
      v4 = llvm::ValueHandleBase::ValueHandleBase(v3, (LODWORD(v6[0]) >> 1) & 3, v6);
      v5 = (char *)v4 - 8;
      *((_QWORD *)v4 - 1) = &unk_25111E0F0;
      *((_QWORD *)v4 + 3) = v7;
      v3 = (llvm::ValueHandleBase *)((char *)v4 + 64);
    }
    while (v5 + 64 != v2);
  }
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v6);
}

void sub_240FA6550(_Unwind_Exception *a1)
{
  llvm::ValueHandleBase *v1;

  llvm::ValueHandleBase::~ValueHandleBase(v1);
  _Unwind_Resume(a1);
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::moveFromOldBuckets(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  llvm::ValueHandleBase *v6;
  uint64_t v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD v15[2];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::initEmpty(a1);
  v15[1] = 0;
  v16 = -4096;
  v14 = &unk_25111E0F0;
  v15[0] = 2;
  v17 = 0;
  v11[1] = 0;
  v12 = -8192;
  v11[0] = 2;
  v13 = 0;
  if (a2 != a3)
  {
    v6 = (llvm::ValueHandleBase *)(a2 + 5);
    do
    {
      v7 = *((_QWORD *)v6 - 2);
      if (v7 != v16 && v7 != v12)
      {
        v18 = 0;
        llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>>((uint64_t *)a1, (uint64_t)v6 - 40, &v18);
        v9 = v18;
        llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v18 + 8), (_QWORD *)v6 - 4);
        *(_QWORD *)(v9 + 32) = *((_QWORD *)v6 - 1);
        llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)(v9 + 40), 3u, v6);
        ++*(_DWORD *)(a1 + 8);
        llvm::ValueHandleBase::~ValueHandleBase(v6);
      }
      llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)((char *)v6 - 32));
      v10 = (_QWORD *)((char *)v6 + 24);
      v6 = (llvm::ValueHandleBase *)((char *)v6 + 64);
    }
    while (v10 != a3);
  }
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v11);
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v15);
}

void sub_240FA667C(_Unwind_Exception *a1)
{
  llvm::ValueHandleBase *v1;
  llvm::ValueHandleBase *v2;

  llvm::ValueHandleBase::~ValueHandleBase(v2);
  llvm::ValueHandleBase::~ValueHandleBase(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>::pair[abi:ne180100]<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,0>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;

  v5 = a2 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)(a1 + 1), (*(_DWORD *)(a2 + 8) >> 1) & 3, (_QWORD *)(a2 + 8));
  *a1 = &unk_25111E0F0;
  a1[4] = *(_QWORD *)(v5 + 24);
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)(a1 + 5), 3u, a3);
  return a1;
}

void sub_240FA6704(_Unwind_Exception *a1)
{
  llvm::ValueHandleBase *v1;

  llvm::ValueHandleBase::~ValueHandleBase(v1);
  _Unwind_Resume(a1);
}

void llvm::ValueHandleBase::~ValueHandleBase(llvm::ValueHandleBase *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 2);
  if (v1 != -8192 && v1 != -4096 && v1 != 0)
    llvm::ValueHandleBase::RemoveFromUseList(this);
}

uint64_t llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap(uint64_t a1)
{
  llvm::deallocate_buffer(*(llvm **)a1, (void *)(16 * *(unsigned int *)(a1 + 16)));
  return a1;
}

uint64_t llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 8);
  if (v4 >= *(_DWORD *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v3 + 8 * v4) = a2;
  ++*(_DWORD *)(v3 + 8);
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>>>::__emplace_unique_key_args<llvm::Value *,std::piecewise_construct_t const&,std::tuple<llvm::Value * const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD **v12;
  _QWORD *i;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      for (i = *v12; i; i = (_QWORD *)*i)
      {
        v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10)
              v14 %= v10;
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v9;
  i[2] = **a4;
  i[3] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    v17 = 1;
    if (v10 >= 3)
      v17 = (v10 & (v10 - 1)) != 0;
    v18 = v17 | (2 * v10);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>>>::__rehash<true>(a1, v20);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10)
        v23 %= v10;
    }
    else
    {
      v23 &= v10 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_240FA6A30(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

void std::__hash_table<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>>>::find<llvm::Value *>(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t MTLMDBuilder::getMetadata<unsigned int>()
{
  llvm::IntegerType::get();
  llvm::ConstantInt::get();
  return llvm::ValueAsMetadata::get();
}

uint64_t llvm::SmallVectorImpl<llvm::Metadata *>::append<llvm::Metadata * const*,void>(uint64_t result, _BYTE *__src, _BYTE *a3)
{
  uint64_t v5;
  size_t v6;
  uint64_t v7;

  v5 = result;
  v6 = a3 - __src;
  v7 = *(unsigned int *)(result + 8);
  if (v7 + ((a3 - __src) >> 3) > (unint64_t)*(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    LODWORD(v7) = *(_DWORD *)(v5 + 8);
  }
  if (__src != a3)
  {
    result = (uint64_t)memcpy((void *)(*(_QWORD *)v5 + 8 * v7), __src, v6);
    LODWORD(v7) = *(_DWORD *)(v5 + 8);
  }
  *(_DWORD *)(v5 + 8) = v7 + (v6 >> 3);
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::FindAndConstruct(uint64_t *a1, uint64_t a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>>(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>>((uint64_t)a1, a2, a2, v7);
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v5 + 1), (_QWORD *)(a2 + 8));
    v5[4] = *(_QWORD *)(a2 + 32);
    v5[5] = 6;
    v5[6] = 0;
    v5[7] = 0;
  }
  return v5;
}

uint64_t llvm::iplist_impl<llvm::simple_ilist<llvm::BasicBlock>,llvm::SymbolTableListTraits<llvm::BasicBlock>>::transfer(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a2 != a5)
  {
    result = llvm::SymbolTableListTraits<llvm::BasicBlock>::transferNodesFromList();
    if (a4 != a5)
    {
      v9 = *a5;
      v10 = *a4;
      *(_QWORD *)(v10 + 8) = a5;
      *a5 = v10;
      v11 = *a2;
      *(_QWORD *)(v9 + 8) = a2;
      *a4 = v11;
      *(_QWORD *)(v11 + 8) = a4;
      *a2 = v9;
    }
  }
  return result;
}

_QWORD *createMTLRaytracingIndirectionPass(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  MetalModulePass::MetalModulePass((uint64_t)v2, (uint64_t)&MTLRaytracingIndirectionPass::ID, a1);
  *v2 = &off_25111E158;
  return v2;
}

void sub_240FA6F84(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x24268D8F0](v1, 0x10E1C40908DD517);
  _Unwind_Resume(a1);
}

void MTLRaytracingIndirectionPass::~MTLRaytracingIndirectionPass(MTLRaytracingIndirectionPass *this)
{
  char *v2;

  *(_QWORD *)this = &off_25111E050;
  v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
}

{
  char *v2;

  *(_QWORD *)this = &off_25111E050;
  v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x24268D8F0);
}

uint64_t MTLRaytracingIndirectionPass::runOnModule(MTLBoundsCheck::SharedPassData **this, llvm::Module *a2)
{
  uint64_t v4;
  char *v5;
  llvm::Value **v6;
  llvm::Value **v7;
  const void *Name;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  void (*v12)(MTLRaytracingIndirectionPass *, llvm::Value *);
  llvm::Value **v13;
  uint64_t v14;
  llvm::Value *v15;
  llvm::Value **v16;
  llvm::Value **v17;
  const void *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  void *v24;
  unsigned int v25;
  _BYTE v26[32];
  void *v27;
  unsigned int v28;
  _QWORD v29[10];

  v29[8] = *MEMORY[0x24BDAC8D0];
  MetalModulePass::runOnModule((MetalModulePass *)this, a2);
  v4 = MTLRaytracingIndirectionPass::setRaytracingNoASAN((MTLRaytracingIndirectionPass *)this, a2);
  this[23] = (MTLBoundsCheck::SharedPassData *)MTLBoundsCheck::SharedPassData::getOrInsertDeviceIndirectionTableGV(this[8]);
  v5 = (char *)a2 + 24;
  llvm::SmallVector<std::reference_wrapper<llvm::Function>,8u>::SmallVector<llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,void>(&v27, *((_QWORD *)a2 + 4), (uint64_t)a2 + 24);
  v6 = (llvm::Value **)v27;
  if (v28)
  {
    v7 = (llvm::Value **)((char *)v27 + 8 * v28);
    while (1)
    {
      Name = (const void *)llvm::Value::getName(*v6);
      v10 = v9;
      if (v9 < 0x25)
        goto LABEL_27;
      v11 = Name;
      if (!memcmp(Name, "air.get_buffer_visible_function_table", 0x25uLL))
        goto LABEL_16;
      if (v10 >= 0x2A)
      {
        if (!memcmp(v11, "air.get_buffer_intersection_function_table", 0x2AuLL))
        {
LABEL_16:
          v12 = (void (*)(MTLRaytracingIndirectionPass *, llvm::Value *))MTLRaytracingIndirectionPass::replaceGetBufferFunctionTable;
          goto LABEL_18;
        }
      }
      else if (v10 < 0x28)
      {
        if (v10 == 39 && !memcmp(v11, "air.get_instance_acceleration_structure", 0x27uLL))
          goto LABEL_17;
        goto LABEL_27;
      }
      if (!memcmp(v11, "air.get_primitive_acceleration_structure", 0x28uLL)
        || !memcmp(v11, "air.get_instance_acceleration_structure", 0x27uLL))
      {
LABEL_17:
        v12 = (void (*)(MTLRaytracingIndirectionPass *, llvm::Value *))MTLRaytracingIndirectionPass::replaceGetAccelerationStructure;
        goto LABEL_18;
      }
      if (v10 >= 0x2A && !memcmp(v11, "air.get_primitive_data_intersection_result", 0x2AuLL))
      {
        v12 = (void (*)(MTLRaytracingIndirectionPass *, llvm::Value *))MTLRaytracingIndirectionPass::replaceGetPrimitiveDataIntersectionResult;
LABEL_18:
        llvm::SmallVector<llvm::User *,4u>::SmallVector<llvm::Value::user_iterator_impl<llvm::User>,void>(&v24, *((_QWORD *)*v6 + 1), 0);
        v13 = (llvm::Value **)v24;
        if (v25)
        {
          v14 = 8 * v25;
          do
          {
            v15 = *v13;
            if (*v13 && *((_BYTE *)v15 + 16) == 84)
              v12((MTLRaytracingIndirectionPass *)this, v15);
            ++v13;
            v14 -= 8;
          }
          while (v14);
          v13 = (llvm::Value **)v24;
        }
        if (v13 != (llvm::Value **)v26)
          free(v13);
      }
LABEL_27:
      if (++v6 == v7)
      {
        v6 = (llvm::Value **)v27;
        v4 = v4;
        v5 = (char *)a2 + 24;
        break;
      }
    }
  }
  if (v6 != v29)
    free(v6);
  llvm::SmallVector<std::reference_wrapper<llvm::Function>,8u>::SmallVector<llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,void>(&v27, *((_QWORD *)a2 + 4), (uint64_t)v5);
  v16 = (llvm::Value **)v27;
  if (v28)
  {
    v17 = (llvm::Value **)((char *)v27 + 8 * v28);
    do
    {
      v18 = (const void *)llvm::Value::getName(*v16);
      if (v19 >= 0x2A && !memcmp(v18, "air.set_buffer_intersection_function_table", 0x2AuLL))
      {
        llvm::SmallVector<llvm::User *,4u>::SmallVector<llvm::Value::user_iterator_impl<llvm::User>,void>(&v24, *((_QWORD *)*v16 + 1), 0);
        v20 = (uint64_t *)v24;
        if (v25)
        {
          v21 = 8 * v25;
          do
          {
            v22 = *v20;
            if (*v20 && *(_BYTE *)(v22 + 16) == 84)
              MTLRaytracingIndirectionPass::replaceSetBufferFunctionTable((uint64_t)this, v22);
            ++v20;
            v21 -= 8;
          }
          while (v21);
          v20 = (uint64_t *)v24;
        }
        if (v20 != (uint64_t *)v26)
          free(v20);
      }
      ++v16;
    }
    while (v16 != v17);
    v16 = (llvm::Value **)v27;
  }
  if (v16 != v29)
    free(v16);
  return v4;
}

void sub_240FA7368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(exception_object);
}

uint64_t MTLRaytracingIndirectionPass::setRaytracingNoASAN(MTLRaytracingIndirectionPass *this, llvm::Module *a2)
{
  llvm::Value **v2;
  char v3;
  uint64_t v4;
  _QWORD *Name;
  unint64_t v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  void *v11;
  unsigned int v12;
  _QWORD v13[9];

  v13[8] = *MEMORY[0x24BDAC8D0];
  llvm::SmallVector<std::reference_wrapper<llvm::Function>,8u>::SmallVector<llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,void>(&v11, *((_QWORD *)a2 + 4), (uint64_t)a2 + 24);
  v2 = (llvm::Value **)v11;
  if (v12)
  {
    v3 = 0;
    v4 = 8 * v12;
    do
    {
      Name = (_QWORD *)llvm::Value::getName(*v2);
      if (v6 >= 0x10)
      {
        v7 = *Name == 0x61725F7269615F5FLL && Name[1] == 0x676E696361727479;
        if (v7
          || v6 >= 0x17
          && (*Name == 0x697265776F6C5F5FLL ? (v8 = Name[1] == 0x6E692E62696C676ELL) : (v8 = 0),
              v8 ? (v9 = *(_QWORD *)((char *)Name + 15) == 0x2E6C616E7265746ELL) : (v9 = 0),
              v9))
        {
          llvm::MDTuple::getImpl();
          llvm::Value::setMetadata();
          llvm::MDTuple::getImpl();
          llvm::Value::setMetadata();
          v3 = 1;
        }
      }
      ++v2;
      v4 -= 8;
    }
    while (v4);
    v2 = (llvm::Value **)v11;
  }
  else
  {
    v3 = 0;
  }
  if (v2 != v13)
    free(v2);
  return v3 & 1;
}

void sub_240FA7598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t MTLRaytracingIndirectionPass::replaceGetBufferFunctionTable(MTLRaytracingIndirectionPass *a1, llvm::Value *a2)
{
  llvm::Instruction *UnwrapBufferFunctionTable;

  UnwrapBufferFunctionTable = (llvm::Instruction *)MTLRaytracingIndirectionPass::createUnwrapBufferFunctionTable(a1, a2);
  llvm::Instruction::insertAfter(UnwrapBufferFunctionTable, a2);
  llvm::Value::replaceAllUsesWith();
  return llvm::CallBase::setArgOperand((uint64_t)UnwrapBufferFunctionTable, 0, (uint64_t)a2);
}

uint64_t MTLRaytracingIndirectionPass::replaceGetAccelerationStructure(MTLRaytracingIndirectionPass *a1, llvm::Value *a2)
{
  llvm::Instruction *AccelerationStructure;

  AccelerationStructure = (llvm::Instruction *)MTLRaytracingIndirectionPass::createGetAccelerationStructure(a1, a2);
  llvm::Instruction::insertAfter(AccelerationStructure, a2);
  return llvm::Value::replaceAllUsesWith();
}

uint64_t MTLRaytracingIndirectionPass::replaceGetPrimitiveDataIntersectionResult(MTLRaytracingIndirectionPass *a1, llvm::Value *a2)
{
  llvm::Instruction *UnwrapPrimitiveDataIntersectionResult;

  UnwrapPrimitiveDataIntersectionResult = (llvm::Instruction *)MTLRaytracingIndirectionPass::createUnwrapPrimitiveDataIntersectionResult(a1, a2);
  llvm::Instruction::insertAfter(UnwrapPrimitiveDataIntersectionResult, a2);
  llvm::Value::replaceAllUsesWith();
  return llvm::CallBase::setArgOperand((uint64_t)UnwrapPrimitiveDataIntersectionResult, 0, (uint64_t)a2);
}

void MTLRaytracingIndirectionPass::replaceSetBufferFunctionTable(uint64_t a1, uint64_t a2)
{
  llvm::Type **v4;
  llvm::BasicBlock *v5;
  llvm::Type **v6;
  llvm::Type *v7;
  llvm::Type **PointerBitCastOrAddrSpaceCast;
  _BYTE v9[32];
  __int16 v10;
  void *v11[2];
  _QWORD v12[10];
  int v13;
  __int16 v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x24BDAC8D0];
  v4 = *(llvm::Type ***)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
  v5 = *(llvm::BasicBlock **)(a2 + 40);
  v11[0] = v12;
  v11[1] = (void *)0x200000000;
  v12[6] = llvm::BasicBlock::getContext(v5);
  v12[7] = &v18;
  v12[8] = v19;
  v12[9] = 0;
  v13 = 0;
  v14 = 512;
  v15 = 7;
  v16 = 0;
  v17 = 0;
  v18 = MEMORY[0x24BED83B8] + 16;
  v19[0] = MEMORY[0x24BED83F0] + 16;
  v12[4] = v5;
  v12[5] = (char *)v5 + 40;
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)v11, (llvm::Instruction *)a2);
  v6 = (llvm::Type **)MTLRaytracingIndirectionPass::createGetBufferFunctionTableCall(a1, a2);
  llvm::PointerType::get();
  v7 = (llvm::Type *)llvm::PointerType::get();
  v10 = 257;
  PointerBitCastOrAddrSpaceCast = llvm::IRBuilderBase::CreatePointerBitCastOrAddrSpaceCast((llvm::IRBuilderBase *)v11, v6, v7, (const llvm::Twine *)v9);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t)v11, v4, (uint64_t)PointerBitCastOrAddrSpaceCast, 0);
  llvm::MDTuple::getImpl();
  llvm::Instruction::setMetadata();
  llvm::MDTuple::getImpl();
  llvm::Instruction::setMetadata();
  llvm::Instruction::eraseFromParent((llvm::Instruction *)a2);
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v19);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v18);
  if (v11[0] != v12)
    free(v11[0]);
}

void sub_240FA785C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *llvm::SmallVector<std::reference_wrapper<llvm::Function>,8u>::SmallVector<llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,void>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a1 + 2;
  a1[1] = 0x800000000;
  llvm::SmallVectorImpl<std::reference_wrapper<llvm::Function>>::append<llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,void>((uint64_t)a1, a2, a3);
  return a1;
}

void sub_240FA78B8(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  void *v3;

  v3 = v2;
  if (*v1 != v3)
    free(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t llvm::SmallVectorImpl<std::reference_wrapper<llvm::Function>>::append<llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,void>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v4 = a2;
  v5 = result;
  if (a2 == a3)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    v7 = a2;
    do
    {
      ++v6;
      v7 = *(_QWORD *)(v7 + 8);
    }
    while (v7 != a3);
  }
  v8 = *(unsigned int *)(result + 8);
  if (v6 + v8 > (unint64_t)*(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = *(unsigned int *)(v5 + 8);
  }
  if (v4 != a3)
  {
    v9 = (_QWORD *)(*(_QWORD *)v5 + 8 * v8);
    do
    {
      v10 = v4 - 56;
      if (!v4)
        v10 = 0;
      *v9++ = v10;
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4 != a3);
  }
  *(_DWORD *)(v5 + 8) = v8 + v6;
  return result;
}

uint64_t MTLRaytracingIndirectionPass::createUnwrapBufferFunctionTable(MTLRaytracingIndirectionPass *this, llvm::Value *a2)
{
  uint64_t Module;
  llvm::BasicBlock *Context;
  MTLBoundsCheck *v5;
  uint64_t v6;
  llvm::BasicBlock *v7;
  llvm::BasicBlock *v8;
  llvm::ReturnInst *v9;
  llvm::Type **v10;
  llvm::Type *v11;
  llvm::Type **PointerBitCastOrAddrSpaceCast;
  llvm::Type *v13;
  llvm::LLVMContext *AlignedLoad;
  llvm::Instruction *v15;
  uint64_t v16;
  uint64_t v17;
  void *v19[2];
  _BYTE v20[16];
  __int16 v21;
  llvm::BasicBlock *v22;
  char *v23;
  llvm::ReturnInst *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  __int16 v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  MTLBoundsCheck *v35[4];
  __int16 v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  Module = llvm::Instruction::getModule(a2);
  Context = (llvm::BasicBlock *)llvm::Value::getContext(a2);
  v19[0] = "mtl.unwrap_buffer_function_table";
  v21 = 259;
  v5 = (MTLBoundsCheck *)llvm::PointerType::get();
  v35[0] = *(MTLBoundsCheck **)a2;
  v6 = getMangledFunction<llvm::Type *>(Module, (llvm::Twine *)v19, v5, v35);
  if (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v6))
  {
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
    *(_DWORD *)(v6 + 32) = *(_DWORD *)(v6 + 32) & 0xFFFFBFC0 | 0x4007;
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    v21 = 257;
    v8 = (llvm::BasicBlock *)llvm::BasicBlock::Create(Context, (llvm::LLVMContext *)v19, (const llvm::Twine *)v6, 0, v7);
    v9 = (llvm::ReturnInst *)llvm::BasicBlock::getContext(v8);
    v19[0] = v20;
    v19[1] = (void *)0x200000000;
    v24 = v9;
    v25 = &v33;
    v26 = &v34;
    v27 = 0;
    v28 = 0;
    v29 = 512;
    v30 = 7;
    v31 = 0;
    v32 = 0;
    v33 = MEMORY[0x24BED83B8] + 16;
    v34 = MEMORY[0x24BED83F0] + 16;
    v22 = v8;
    v23 = (char *)v8 + 40;
    if ((*(_BYTE *)(v6 + 18) & 1) != 0)
      llvm::Function::BuildLazyArguments((llvm::Function *)v6);
    v10 = *(llvm::Type ***)(v6 + 88);
    llvm::PointerType::get();
    v11 = (llvm::Type *)llvm::PointerType::get();
    v36 = 257;
    PointerBitCastOrAddrSpaceCast = llvm::IRBuilderBase::CreatePointerBitCastOrAddrSpaceCast((llvm::IRBuilderBase *)v19, v10, v11, (const llvm::Twine *)v35);
    v13 = (llvm::Type *)llvm::PointerType::get();
    v36 = 257;
    AlignedLoad = (llvm::LLVMContext *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v19, v13, (uint64_t)PointerBitCastOrAddrSpaceCast, 259, 0, (uint64_t)v35);
    v16 = llvm::ReturnInst::Create(v24, AlignedLoad, 0, v15);
    v36 = 257;
    llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)v19, v16, (uint64_t)v35);
    llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)&v34);
    llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v33);
    if (v19[0] != v20)
      free(v19[0]);
  }
  else if (!v6)
  {
    v17 = 0;
    goto LABEL_8;
  }
  v17 = *(_QWORD *)(v6 + 24);
LABEL_8:
  v35[0] = a2;
  v21 = 257;
  return llvm::CallInst::Create(v17, v6, (uint64_t)v35, 1, 0, 0);
}

void sub_240FA7CA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder((void **)va);
  _Unwind_Resume(a1);
}

uint64_t llvm::CallBase::setArgOperand(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = result - 32 * (*(_DWORD *)(result + 20) & 0x7FFFFFF);
  v4 = (_QWORD *)(v3 + 32 * a2);
  v5 = v4;
  if (*v4)
  {
    v7 = (_QWORD *)v4[2];
    v6 = v4 + 2;
    *v7 = *(v6 - 1);
    v8 = *(v6 - 1);
    if (v8)
      *(_QWORD *)(v8 + 16) = *v6;
  }
  *v5 = a3;
  if (a3)
  {
    v11 = *(_QWORD *)(a3 + 8);
    v9 = (_QWORD *)(a3 + 8);
    v10 = v11;
    v12 = v3 + 32 * a2;
    *(_QWORD *)(v12 + 8) = v11;
    if (v11)
      *(_QWORD *)(v10 + 16) = v12 + 8;
    *(_QWORD *)(v12 + 16) = v9;
    *v9 = v5;
  }
  return result;
}

uint64_t getMangledFunction<llvm::Type *>(uint64_t a1, llvm::Twine *this, MTLBoundsCheck *a3, MTLBoundsCheck **a4)
{
  llvm::Type *v7;
  std::string *v8;
  __int128 v9;
  void **v10;
  std::string::size_type v11;
  llvm::Type *v12;
  MTLBoundsCheck *v13;
  std::string *v14;
  __int128 v15;
  void **v16;
  std::string::size_type v17;
  std::string::size_type size;
  std::string::size_type v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  MTLBoundsCheck **v24;
  std::string::size_type v25;
  char *v26;
  std::string::size_type v27;
  MTLBoundsCheck *v28;
  uint64_t Function;
  uint64_t v30;
  void *__p[2];
  int64_t v33;
  __int16 v34;
  std::string v35;
  std::string v36;
  std::string v37;

  llvm::Twine::str(this);
  MTLBoundsCheck::getMangledTypeStr(a3, v7, &v36);
  v8 = std::string::insert(&v36, 0, ".");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v33 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (v33 >= 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if (v33 >= 0)
    v11 = HIBYTE(v33);
  else
    v11 = (std::string::size_type)__p[1];
  std::string::append(&v37, (const std::string::value_type *)v10, v11);
  if (SHIBYTE(v33) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  memset(&v36, 0, sizeof(v36));
  v13 = *a4;
  MTLBoundsCheck::getMangledTypeStr(v13, v12, &v35);
  v14 = std::string::insert(&v35, 0, ".");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v33 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (v33 >= 0)
    v16 = __p;
  else
    v16 = (void **)__p[0];
  if (v33 >= 0)
    v17 = HIBYTE(v33);
  else
    v17 = (std::string::size_type)__p[1];
  std::string::append(&v37, (const std::string::value_type *)v16, v17);
  if (SHIBYTE(v33) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  size = v36.__r_.__value_.__l.__size_;
  if (v36.__r_.__value_.__l.__size_ >= v36.__r_.__value_.__r.__words[2])
  {
    v20 = (uint64_t)(v36.__r_.__value_.__l.__size_ - v36.__r_.__value_.__r.__words[0]) >> 3;
    if ((unint64_t)(v20 + 1) >> 61)
      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
    v21 = (uint64_t)(v36.__r_.__value_.__r.__words[2] - v36.__r_.__value_.__r.__words[0]) >> 2;
    if (v21 <= v20 + 1)
      v21 = v20 + 1;
    if (v36.__r_.__value_.__r.__words[2] - v36.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8)
      v22 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v22 = v21;
    if (v22)
      v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v36.__r_.__value_.__r.__words[2], v22);
    else
      v23 = 0;
    v24 = (MTLBoundsCheck **)&v23[8 * v20];
    v25 = (std::string::size_type)&v23[8 * v22];
    *v24 = v13;
    v19 = (std::string::size_type)(v24 + 1);
    v26 = (char *)v36.__r_.__value_.__l.__size_;
    v27 = v36.__r_.__value_.__r.__words[0];
    if (v36.__r_.__value_.__l.__size_ != v36.__r_.__value_.__r.__words[0])
    {
      do
      {
        v28 = (MTLBoundsCheck *)*((_QWORD *)v26 - 1);
        v26 -= 8;
        *--v24 = v28;
      }
      while (v26 != (char *)v27);
      v26 = (char *)v36.__r_.__value_.__r.__words[0];
    }
    v36.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
    v36.__r_.__value_.__l.__size_ = v19;
    v36.__r_.__value_.__r.__words[2] = v25;
    if (v26)
      operator delete(v26);
  }
  else
  {
    *(_QWORD *)v36.__r_.__value_.__l.__size_ = v13;
    v19 = size + 8;
  }
  v36.__r_.__value_.__l.__size_ = v19;
  Function = llvm::Module::getFunction();
  if (!Function)
  {
    v30 = llvm::FunctionType::get();
    v34 = 260;
    __p[0] = &v37;
    Function = llvm::Function::Create(v30, 0, (uint64_t)__p, a1);
  }
  if (v36.__r_.__value_.__r.__words[0])
  {
    v36.__r_.__value_.__l.__size_ = v36.__r_.__value_.__r.__words[0];
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  return Function;
}

void sub_240FA7FBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (__p)
    operator delete(__p);
  if (*(char *)(v28 - 33) < 0)
    operator delete(*(void **)(v28 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t llvm::BasicBlock::Create(llvm::BasicBlock *this, llvm::LLVMContext *a2, const llvm::Twine *a3, llvm::Function *a4, llvm::BasicBlock *a5)
{
  uint64_t v5;

  v5 = operator new();
  llvm::BasicBlock::BasicBlock();
  return v5;
}

void sub_240FA80CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x24268D8F0](v1, 0x1020C4012B667A0);
  _Unwind_Resume(a1);
}

llvm::Type **llvm::IRBuilderBase::CreatePointerBitCastOrAddrSpaceCast(llvm::IRBuilderBase *this, llvm::Type **a2, llvm::Type *a3, const llvm::Twine *a4)
{
  BOOL v6;
  uint64_t PointerBitCastOrAddrSpaceCast;

  if (*a2 != a3)
  {
    if (*((unsigned __int8 *)a2 + 16) > 0x14u)
    {
      PointerBitCastOrAddrSpaceCast = llvm::CastInst::CreatePointerBitCastOrAddrSpaceCast();
      return (llvm::Type **)llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, PointerBitCastOrAddrSpaceCast, (uint64_t)a4);
    }
    else
    {
      a2 = (llvm::Type **)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 240))(*((_QWORD *)this + 9));
      if (a2)
        v6 = *((unsigned __int8 *)a2 + 16) >= 0x1Cu;
      else
        v6 = 0;
      if (v6)
        return (llvm::Type **)llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, (uint64_t)a2, (uint64_t)a4);
    }
  }
  return a2;
}

void **llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder(void **a1)
{
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)(a1 + 16));
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)(a1 + 15));
  if (*a1 != a1 + 2)
    free(*a1);
  return a1;
}

void std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
}

void sub_240FA823C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

uint64_t llvm::IRBuilderBase::Insert<llvm::CastInst>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], a2, a3, a1[6], a1[7]);
  v5 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v5)
  {
    v6 = *a1;
    v7 = v6 + 16 * v5;
    do
    {
      llvm::Instruction::setMetadata();
      v6 += 16;
    }
    while (v6 != v7);
  }
  return a2;
}

uint64_t llvm::IRBuilderBase::CreateAlignedLoad(uint64_t a1, llvm::Type *a2, uint64_t a3, __int16 a4, uint64_t a5, uint64_t a6)
{
  llvm::Module *Module;
  llvm::DataLayout *DataLayout;
  uint64_t v11;

  if ((a4 & 0xFF00) == 0)
  {
    Module = (llvm::Module *)llvm::BasicBlock::getModule(*(llvm::BasicBlock **)(a1 + 48));
    DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(Module);
    llvm::DataLayout::getABITypeAlign(DataLayout, a2);
  }
  v11 = llvm::User::operator new((llvm::User *)0x40);
  llvm::LoadInst::LoadInst();
  return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)a1, v11, a6);
}

void sub_240FA83C8(_Unwind_Exception *a1)
{
  void *v1;

  llvm::User::operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t llvm::ReturnInst::Create(llvm::ReturnInst *this, llvm::LLVMContext *a2, llvm::Value *a3, llvm::Instruction *a4)
{
  uint64_t v7;

  v7 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x24268C8DC](v7, this, a2, a3);
  return v7;
}

void sub_240FA8430(_Unwind_Exception *a1)
{
  void *v1;

  llvm::User::operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t llvm::CallInst::Create(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;

  v8 = 0;
  if (a6)
  {
    v9 = 48 * a6;
    v10 = (_QWORD *)(a5 + 32);
    do
    {
      v8 += (*v10 - *(v10 - 1)) >> 3;
      v10 += 6;
      v9 -= 48;
    }
    while (v9);
  }
  v11 = llvm::User::operator new((llvm::User *)0x50);
  if (a6)
  {
    v12 = 0;
    v13 = 48 * a6;
    v14 = (_QWORD *)(a5 + 32);
    do
    {
      v12 += (*v14 - *(v14 - 1)) >> 3;
      v14 += 6;
      v13 -= 48;
    }
    while (v13);
    v15 = 48 * a6;
    v16 = (_QWORD *)(a5 + 32);
    do
    {
      LODWORD(v13) = v13 + ((*v16 - *(v16 - 1)) >> 3);
      v16 += 6;
      v15 -= 48;
    }
    while (v15);
  }
  llvm::Instruction::Instruction();
  *(_QWORD *)(v11 + 64) = 0;
  llvm::CallInst::init();
  return v11;
}

void sub_240FA859C(_Unwind_Exception *a1)
{
  llvm::Instruction *v1;

  llvm::Instruction::~Instruction(v1);
  llvm::User::operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t MTLRaytracingIndirectionPass::createGetAccelerationStructure(MTLRaytracingIndirectionPass *this, llvm::Value *a2)
{
  llvm::Type *v4;
  std::string *v5;
  __int128 v6;
  uint64_t v7;
  llvm::BasicBlock *v8;
  llvm::BasicBlock *v9;
  llvm::BasicBlock *v10;
  llvm::ReturnInst *Context;
  llvm::Type **v12;
  uint64_t v13;
  llvm::Type **v14;
  llvm::Type *v15;
  llvm::Value *BitOrPointerCast;
  llvm::Type *v17;
  llvm::Type **ConstInBoundsGEP1_32;
  llvm::Type *v19;
  llvm::Type *v20;
  llvm::Type *v21;
  llvm::Value *v22;
  llvm::Value *AlignedLoad;
  llvm::Type *v24;
  uint64_t GEP;
  llvm::Type **v26;
  llvm::Type *v27;
  llvm::LLVMContext *v28;
  llvm::Instruction *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v36[32];
  __int16 v37;
  void *__p[2];
  std::string::size_type v39;
  std::string v40;
  __int16 v41;
  llvm::BasicBlock *v42;
  char *v43;
  llvm::ReturnInst *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  int v48;
  __int16 v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[4];
  __int16 v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  llvm::Instruction::getModule(a2);
  MTLBoundsCheck::getMangledTypeStr(*(MTLBoundsCheck **)a2, v4, &v40);
  v5 = std::string::insert(&v40, 0, "mtl.get_acceleration_structure");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v39 = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  v40.__r_.__value_.__r.__words[0] = *(_QWORD *)(*((_QWORD *)a2 - 4) + 24);
  v7 = getOrInsertFunction<std::string &,llvm::FunctionType *>();
  if (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v7))
  {
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
    *(_DWORD *)(v7 + 32) = *(_DWORD *)(v7 + 32) & 0xFFFFBFC0 | 0x4007;
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    v8 = (llvm::BasicBlock *)*((_QWORD *)this + 5);
    v41 = 257;
    v10 = (llvm::BasicBlock *)llvm::BasicBlock::Create(v8, (llvm::LLVMContext *)&v40, (const llvm::Twine *)v7, 0, v9);
    Context = (llvm::ReturnInst *)llvm::BasicBlock::getContext(v10);
    v40.__r_.__value_.__r.__words[0] = (std::string::size_type)&v40.__r_.__value_.__r.__words[2];
    v40.__r_.__value_.__l.__size_ = 0x200000000;
    v44 = Context;
    v45 = &v53;
    v46 = &v54;
    v47 = 0;
    v48 = 0;
    v49 = 512;
    v50 = 7;
    v51 = 0;
    v52 = 0;
    v53 = MEMORY[0x24BED83B8] + 16;
    v54 = MEMORY[0x24BED83F0] + 16;
    v42 = v10;
    v43 = (char *)v10 + 40;
    if ((*(_BYTE *)(v7 + 18) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments((llvm::Function *)v7);
      v12 = *(llvm::Type ***)(v7 + 88);
      if ((*(_WORD *)(v7 + 18) & 1) != 0)
      {
        llvm::Function::BuildLazyArguments((llvm::Function *)v7);
        v14 = *(llvm::Type ***)(v7 + 88);
LABEL_11:
        v15 = (llvm::Type *)llvm::PointerType::get();
        v56 = 257;
        BitOrPointerCast = llvm::IRBuilderBase::CreateBitOrPointerCast((llvm::IRBuilderBase *)&v40, v12, v15, (const llvm::Twine *)v55);
        v17 = (llvm::Type *)*((_QWORD *)this + 12);
        v56 = 257;
        ConstInBoundsGEP1_32 = (llvm::Type **)llvm::IRBuilderBase::CreateConstInBoundsGEP1_32((llvm::Type **)&v40, v17, BitOrPointerCast, 0x18u, (const llvm::Twine *)v55);
        v19 = (llvm::Type *)*((_QWORD *)this + 9);
        v20 = (llvm::Type *)llvm::PointerType::get();
        v21 = (llvm::Type *)llvm::PointerType::get();
        v56 = 257;
        v22 = llvm::IRBuilderBase::CreateBitOrPointerCast((llvm::IRBuilderBase *)&v40, ConstInBoundsGEP1_32, v21, (const llvm::Twine *)v55);
        v56 = 257;
        AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)&v40, v20, (uint64_t)v22, 259, 0, (uint64_t)v55);
        v24 = (llvm::Type *)*((_QWORD *)this + 9);
        v56 = 257;
        GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)&v40, v24, AlignedLoad, (llvm::Value *)(v14 + 5), (const llvm::Twine *)v55);
        v56 = 257;
        v26 = (llvm::Type **)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)&v40, v19, GEP, 259, 0, (uint64_t)v55);
        v27 = *(llvm::Type **)a2;
        v37 = 257;
        v28 = llvm::IRBuilderBase::CreateBitOrPointerCast((llvm::IRBuilderBase *)&v40, v26, v27, (const llvm::Twine *)v36);
        v30 = llvm::ReturnInst::Create(v44, v28, 0, v29);
        v56 = 257;
        llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)&v40, v30, (uint64_t)v55);
        llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)&v54);
        llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v53);
        if ((std::string::size_type *)v40.__r_.__value_.__l.__data_ != &v40.__r_.__value_.__r.__words[2])
          free(v40.__r_.__value_.__l.__data_);
        goto LABEL_13;
      }
    }
    else
    {
      v12 = *(llvm::Type ***)(v7 + 88);
    }
    v14 = v12;
    goto LABEL_11;
  }
  if (!v7)
  {
    v13 = 0;
    goto LABEL_14;
  }
LABEL_13:
  v13 = *(_QWORD *)(v7 + 24);
LABEL_14:
  v31 = (uint64_t *)((char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  v32 = *v31;
  v33 = v31[4];
  v55[0] = v32;
  v55[1] = v33;
  v41 = 257;
  v34 = llvm::CallInst::Create(v13, v7, (uint64_t)v55, 2, 0, 0);
  if (SHIBYTE(v39) < 0)
    operator delete(__p[0]);
  return v34;
}

void sub_240FA89D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder((void **)&a22);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t getOrInsertFunction<std::string &,llvm::FunctionType *>()
{
  uint64_t v0;
  uint64_t result;

  llvm::Module::getOrInsertFunction();
  result = v0;
  if (*(_BYTE *)(v0 + 16) == 5)
    return *(_QWORD *)(v0 - 32 * (*(_DWORD *)(v0 + 20) & 0x7FFFFFF));
  return result;
}

llvm::Value *llvm::IRBuilderBase::CreateBitOrPointerCast(llvm::IRBuilderBase *this, llvm::Type **a2, llvm::Type *a3, const llvm::Twine *a4)
{
  llvm::Type *v7;
  int v8;
  int v9;
  int v10;
  uint64_t v12;
  int v13;

  v7 = *a2;
  if (*a2 == a3)
    return (llvm::Value *)a2;
  v8 = *((_DWORD *)v7 + 2);
  v9 = v8;
  if ((*((_DWORD *)v7 + 2) & 0xFE) == 0x12)
    v9 = *(unsigned __int8 *)(**((_QWORD **)v7 + 2) + 8);
  if (v9 == 15
    && ((*((_DWORD *)a3 + 2) & 0xFE) != 0x12
      ? (v10 = *((_DWORD *)a3 + 2))
      : (v10 = *(unsigned __int8 *)(**((_QWORD **)a3 + 2) + 8)),
        v10 == 13))
  {
    v12 = 47;
  }
  else
  {
    if ((*((_DWORD *)v7 + 2) & 0xFE) == 0x12)
      v8 = *(unsigned __int8 *)(**((_QWORD **)v7 + 2) + 8);
    if (v8 == 13
      && ((*((_DWORD *)a3 + 2) & 0xFE) != 0x12
        ? (v13 = *((_DWORD *)a3 + 2))
        : (v13 = *(unsigned __int8 *)(**((_QWORD **)a3 + 2) + 8)),
          v13 == 15))
    {
      v12 = 48;
    }
    else
    {
      v12 = 49;
    }
  }
  return (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this, v12, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
}

uint64_t llvm::IRBuilderBase::CreateConstInBoundsGEP1_32(llvm::Type **this, llvm::Type *a2, llvm::Value *a3, unsigned int a4, const llvm::Twine *a5)
{
  uint64_t result;
  llvm::GetElementPtrInst *v10;
  uint64_t *v11;

  llvm::Type::getInt32Ty(this[8], a2);
  v11 = (uint64_t *)llvm::ConstantInt::get();
  result = (*(uint64_t (**)(llvm::Type *, llvm::Type *, llvm::Value *, uint64_t **, uint64_t, uint64_t))(*(_QWORD *)this[9] + 48))(this[9], a2, a3, &v11, 1, 1);
  if (!result)
  {
    v10 = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::Create((uint64_t)a2, (uint64_t *)a3, &v11, 1);
    llvm::GetElementPtrInst::setIsInBounds(v10);
    return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, (uint64_t)v10, (uint64_t)a5);
  }
  return result;
}

uint64_t llvm::IRBuilderBase::CreateGEP(llvm::IRBuilderBase *this, llvm::Type *a2, llvm::Value *a3, llvm::Value *a4, const llvm::Twine *a5)
{
  uint64_t result;
  uint64_t v10;
  uint64_t *v11;
  llvm::Value *v12;
  __int16 v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v11 = (uint64_t *)a4;
  v12 = a4;
  result = (*(uint64_t (**)(_QWORD, llvm::Type *, llvm::Value *, llvm::Value **, uint64_t, _QWORD))(**((_QWORD **)this + 9) + 48))(*((_QWORD *)this + 9), a2, a3, &v12, 1, 0);
  if (!result)
  {
    v13 = 257;
    v10 = llvm::GetElementPtrInst::Create((uint64_t)a2, (uint64_t *)a3, &v11, 1);
    return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, v10, (uint64_t)a5);
  }
  return result;
}

uint64_t llvm::IRBuilderBase::CreateCast(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL v7;
  uint64_t v9;

  if (*(_QWORD *)a3 != a4)
  {
    if (*(unsigned __int8 *)(a3 + 16) > 0x14u)
    {
      v9 = llvm::CastInst::Create();
      return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)a1, v9, a5);
    }
    else
    {
      a3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 224))(*(_QWORD *)(a1 + 72));
      if (a3)
        v7 = *(unsigned __int8 *)(a3 + 16) >= 0x1Cu;
      else
        v7 = 0;
      if (v7)
        return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)a1, a3, a5);
    }
  }
  return a3;
}

uint64_t llvm::GetElementPtrInst::Create(uint64_t a1, uint64_t *a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v8;

  v8 = llvm::User::operator new((llvm::User *)0x50);
  llvm::GetElementPtrInst::getGEPReturnType(a1, a2, a3, a4);
  llvm::Instruction::Instruction();
  *(_QWORD *)(v8 + 64) = a1;
  *(_QWORD *)(v8 + 72) = llvm::GetElementPtrInst::getIndexedType();
  llvm::GetElementPtrInst::init();
  return v8;
}

void sub_240FA8E7C(_Unwind_Exception *a1)
{
  llvm::Instruction *v1;

  llvm::Instruction::~Instruction(v1);
  llvm::User::operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t llvm::GetElementPtrInst::getGEPReturnType(uint64_t a1, uint64_t *a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  llvm::LLVMContext *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;

  v7 = *a2;
  v8 = *(_DWORD *)(*a2 + 8);
  if ((v8 & 0xFE) == 0x12)
  {
    v7 = **(_QWORD **)(v7 + 16);
    v8 = *(_DWORD *)(v7 + 8);
  }
  v9 = (llvm::LLVMContext *)(v8 >> 8);
  llvm::GetElementPtrInst::getIndexedType();
  if (*(_QWORD *)(v7 + 24))
    result = llvm::PointerType::get();
  else
    result = llvm::PointerType::get(*(llvm::PointerType **)v7, v9);
  if (*a2 && (*(_DWORD *)(*a2 + 8) & 0xFE) == 0x12)
    return llvm::VectorType::get();
  if (a4)
  {
    v11 = 8 * a4;
    while (1)
    {
      v12 = **a3;
      if (v12 && (*(_DWORD *)(v12 + 8) & 0xFE) == 18)
        break;
      ++a3;
      v11 -= 8;
      if (!v11)
        return result;
    }
    return llvm::VectorType::get();
  }
  return result;
}

uint64_t MTLRaytracingIndirectionPass::createUnwrapPrimitiveDataIntersectionResult(MTLRaytracingIndirectionPass *this, llvm::Value *a2)
{
  uint64_t Module;
  llvm::BasicBlock *Context;
  uint64_t v6;
  llvm::BasicBlock *v7;
  llvm::BasicBlock *v8;
  llvm::ReturnInst *v9;
  llvm::Type **v10;
  uint64_t v11;
  llvm::Type *v12;
  uint64_t *AlignedLoad;
  uint64_t v14;
  char *Name;
  size_t v16;
  uint64_t GVBaseType;
  uint64_t GEP;
  llvm::Type *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  llvm::Value *Cast;
  llvm::Type *v24;
  llvm::Value *BitOrPointerCast;
  llvm::Instruction *Sub;
  llvm::Value *v27;
  llvm::Value *v28;
  llvm::Value *v29;
  llvm::Type *v30;
  uint64_t NullValue;
  llvm::Type *v32;
  llvm::Type **Select;
  llvm::Type *v34;
  llvm::LLVMContext *v35;
  llvm::Instruction *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v40[2];
  void *v41[2];
  _BYTE v42[16];
  __int16 v43;
  llvm::BasicBlock *v44;
  char *v45;
  llvm::ReturnInst *v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  int v50;
  __int16 v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  MTLBoundsCheck *v57[4];
  __int16 v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  Module = llvm::Instruction::getModule(a2);
  Context = (llvm::BasicBlock *)llvm::Value::getContext(a2);
  v41[0] = "mtl.unwrap_primitive_data_intersection_result";
  v43 = 259;
  v57[0] = *(MTLBoundsCheck **)a2;
  v6 = getMangledFunction<llvm::Type *>(Module, (llvm::Twine *)v41, v57[0], v57);
  if (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v6))
  {
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
    *(_DWORD *)(v6 + 32) = *(_DWORD *)(v6 + 32) & 0xFFFFBFC0 | 0x4007;
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    v43 = 257;
    v8 = (llvm::BasicBlock *)llvm::BasicBlock::Create(Context, (llvm::LLVMContext *)v41, (const llvm::Twine *)v6, 0, v7);
    v9 = (llvm::ReturnInst *)llvm::BasicBlock::getContext(v8);
    v41[0] = v42;
    v41[1] = (void *)0x200000000;
    v46 = v9;
    v47 = &v55;
    v48 = &v56;
    v49 = 0;
    v50 = 0;
    v51 = 512;
    v52 = 7;
    v53 = 0;
    v54 = 0;
    v55 = MEMORY[0x24BED83B8] + 16;
    v56 = MEMORY[0x24BED83F0] + 16;
    v44 = v8;
    v45 = (char *)v8 + 40;
    if ((*(_BYTE *)(v6 + 18) & 1) != 0)
      llvm::Function::BuildLazyArguments((llvm::Function *)v6);
    v10 = *(llvm::Type ***)(v6 + 88);
    v11 = *((_QWORD *)this + 23);
    v12 = *(llvm::Type **)(v11 + 24);
    v58 = 257;
    AlignedLoad = (uint64_t *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v41, v12, v11, 0, 0, (uint64_t)v57);
    v14 = *((_QWORD *)this + 8);
    Name = (char *)llvm::Value::getName(*((llvm::Value **)this + 23));
    GVBaseType = MTLBoundsCheck::SharedPassData::getGVBaseType(v14, Name, v16);
    v40[0] = (uint64_t *)llvm::ConstantInt::get();
    v40[1] = (uint64_t *)llvm::ConstantInt::get();
    v58 = 257;
    GEP = llvm::IRBuilderBase::CreateGEP((uint64_t)v41, GVBaseType, AlignedLoad, v40, 2, (uint64_t)v57);
    v19 = *(llvm::Type **)(GEP + 72);
    v58 = 257;
    v20 = (uint64_t *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v41, v19, GEP, 259, 0, (uint64_t)v57);
    v21 = *((_QWORD *)this + 8) + 208;
    v40[0] = v20;
    llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>,llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v21, v40, (uint64_t)v57);
    llvm::MDTuple::getImpl();
    llvm::Instruction::setMetadata();
    v22 = *((_QWORD *)this + 9);
    v58 = 257;
    Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v41, 47, (uint64_t)v20, v22, (uint64_t)v57);
    v24 = (llvm::Type *)*((_QWORD *)this + 9);
    v58 = 257;
    BitOrPointerCast = llvm::IRBuilderBase::CreateBitOrPointerCast((llvm::IRBuilderBase *)v41, v10, v24, (const llvm::Twine *)v57);
    v58 = 257;
    Sub = llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)v41, BitOrPointerCast, Cast, (const llvm::Twine *)v57, 0, 0);
    v27 = (llvm::Value *)llvm::ConstantInt::get();
    v58 = 257;
    v28 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)v41, Sub, v27, (const llvm::Twine *)v57);
    v29 = (llvm::Value *)llvm::ConstantInt::get();
    v58 = 257;
    llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)v41, v29, v28, (const llvm::Twine *)v57, 0, 0);
    NullValue = llvm::Constant::getNullValue(*((llvm::Constant **)this + 9), v30);
    v58 = 257;
    llvm::IRBuilderBase::CreateICmp((uint64_t)v41, 32, (llvm::CmpInst **)BitOrPointerCast, NullValue, (uint64_t)v57);
    llvm::Constant::getNullValue(*((llvm::Constant **)this + 9), v32);
    v58 = 257;
    Select = (llvm::Type **)llvm::IRBuilderBase::CreateSelect();
    v34 = *v10;
    v58 = 257;
    v35 = llvm::IRBuilderBase::CreateBitOrPointerCast((llvm::IRBuilderBase *)v41, Select, v34, (const llvm::Twine *)v57);
    v37 = llvm::ReturnInst::Create(v46, v35, 0, v36);
    v58 = 257;
    llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)v41, v37, (uint64_t)v57);
    llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)&v56);
    llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v55);
    if (v41[0] != v42)
      free(v41[0]);
  }
  else if (!v6)
  {
    v38 = 0;
    goto LABEL_8;
  }
  v38 = *(_QWORD *)(v6 + 24);
LABEL_8:
  v57[0] = a2;
  v43 = 257;
  return llvm::CallInst::Create(v38, v6, (uint64_t)v57, 1, 0, 0);
}

void sub_240FA9478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder((void **)va);
  _Unwind_Resume(a1);
}

uint64_t llvm::IRBuilderBase::CreateGEP(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t **a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  uint64_t v13;

  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *, uint64_t **, uint64_t, _QWORD))(**(_QWORD **)(a1 + 72)
                                                                                              + 48))(*(_QWORD *)(a1 + 72), a2, a3, a4, a5, 0);
  if (!result)
  {
    v13 = llvm::GetElementPtrInst::Create(a2, a3, a4, a5);
    return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)a1, v13, a6);
  }
  return result;
}

llvm::Instruction *llvm::IRBuilderBase::CreateSub(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4, uint64_t a5, uint64_t a6)
{
  llvm::Instruction *result;
  BOOL v9;

  if (!a2 || *((unsigned __int8 *)a2 + 16) > 0x14u || !a3 || *((unsigned __int8 *)a3 + 16) > 0x14u)
    return llvm::IRBuilderBase::CreateInsertNUWNSWBinOp((uint64_t *)this, 15, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6);
  result = (llvm::Instruction *)(*(uint64_t (**)(_QWORD, llvm::Value *, llvm::Value *, uint64_t, uint64_t))(**((_QWORD **)this + 9) + 72))(*((_QWORD *)this + 9), a2, a3, a5, a6);
  if (result)
    v9 = *((unsigned __int8 *)result + 16) >= 0x1Cu;
  else
    v9 = 0;
  if (v9)
    return (llvm::Instruction *)llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, (uint64_t)result, (uint64_t)a4);
  return result;
}

uint64_t llvm::IRBuilderBase::CreateAnd(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4)
{
  uint64_t result;
  uint64_t v7;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 24))(*((_QWORD *)this + 9));
  if (!result)
  {
    v7 = llvm::BinaryOperator::Create();
    return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, v7, (uint64_t)a4);
  }
  return result;
}

llvm::Instruction *llvm::IRBuilderBase::CreateAdd(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4, uint64_t a5, uint64_t a6)
{
  int v6;
  int v7;
  llvm::Instruction *result;

  v6 = a6;
  v7 = a5;
  result = (llvm::Instruction *)(*(uint64_t (**)(_QWORD, llvm::Value *, llvm::Value *, uint64_t, uint64_t))(**((_QWORD **)this + 9) + 16))(*((_QWORD *)this + 9), a2, a3, a5, a6);
  if (!result)
    return llvm::IRBuilderBase::CreateInsertNUWNSWBinOp((uint64_t *)this, 13, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, v7, v6);
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>,llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>,llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::LookupBucketFor<llvm::Value *>((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>,llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::InsertIntoBucketImpl<llvm::Value *>(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>,llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::LookupBucketFor<llvm::Value *>(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 8 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 8 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_5;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>,llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::InsertIntoBucketImpl<llvm::Value *>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>,llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::LookupBucketFor<llvm::Value *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x24268CD5C](8 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>,llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::moveFromOldBuckets(a1, v4, (_QWORD *)v4 + v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(8 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 8 * v10;
      do
      {
        *result++ = -4096;
        v11 -= 8;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>,llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::moveFromOldBuckets(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>,llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::LookupBucketFor<llvm::Value *>((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

llvm::Instruction *llvm::IRBuilderBase::CreateInsertNUWNSWBinOp(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  uint64_t v11;
  llvm::Instruction *v12;
  llvm::Instruction *v13;

  v11 = llvm::BinaryOperator::Create();
  v12 = (llvm::Instruction *)llvm::IRBuilderBase::Insert<llvm::CastInst>(a1, v11, a5);
  v13 = v12;
  if (a6)
    llvm::Instruction::setHasNoUnsignedWrap(v12);
  if (a7)
    llvm::Instruction::setHasNoSignedWrap(v13);
  return v13;
}

uint64_t llvm::IRBuilderBase::CreateICmp(uint64_t a1, uint64_t a2, llvm::CmpInst **a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v9;
  llvm::Type *v10;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 40))(*(_QWORD *)(a1 + 72));
  if (!result)
  {
    v9 = llvm::User::operator new((llvm::User *)0x40);
    llvm::CmpInst::makeCmpResultType(*a3, v10);
    llvm::CmpInst::CmpInst();
    return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)a1, v9, a5);
  }
  return result;
}

void sub_240FA9BA4(_Unwind_Exception *a1)
{
  void *v1;

  llvm::User::operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t llvm::CmpInst::makeCmpResultType(llvm::CmpInst *this, llvm::Type *a2)
{
  int v3;
  uint64_t result;

  v3 = *((_DWORD *)this + 2);
  result = llvm::Type::getInt1Ty(*(llvm::Type **)this, a2);
  if (this)
  {
    if ((v3 & 0xFE) == 0x12)
      return llvm::VectorType::get();
  }
  return result;
}

_QWORD *llvm::SmallVector<llvm::User *,4u>::SmallVector<llvm::Value::user_iterator_impl<llvm::User>,void>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a1 + 2;
  a1[1] = 0x400000000;
  llvm::SmallVectorImpl<llvm::User *>::append<llvm::Value::user_iterator_impl<llvm::User>,void>((uint64_t)a1, a2, a3);
  return a1;
}

void sub_240FA9C48(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  void *v3;

  v3 = v2;
  if (*v1 != v3)
    free(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t llvm::SmallVectorImpl<llvm::User *>::append<llvm::Value::user_iterator_impl<llvm::User>,void>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = a2;
  v5 = result;
  if (a2 == a3)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    v7 = a2;
    do
    {
      ++v6;
      v7 = *(_QWORD *)(v7 + 8);
    }
    while (v7 != a3);
  }
  v8 = *(unsigned int *)(result + 8);
  if (v6 + v8 > (unint64_t)*(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = *(unsigned int *)(v5 + 8);
  }
  if (v4 != a3)
  {
    v9 = (_QWORD *)(*(_QWORD *)v5 + 8 * v8);
    do
    {
      *v9++ = *(_QWORD *)(v4 + 24);
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4 != a3);
  }
  *(_DWORD *)(v5 + 8) = v8 + v6;
  return result;
}

void llvm::IRBuilderBase::SetInsertPoint(llvm::IRBuilderBase *this, llvm::Instruction *a2)
{
  uint64_t v3;
  uint64_t v4;

  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 5);
  *((_QWORD *)this + 7) = (char *)a2 + 24;
  v4 = *((_QWORD *)a2 + 6);
  if (v4)
  {
    llvm::MetadataTracking::track();
    v3 = v4;
  }
  else
  {
    v3 = 0;
  }
  llvm::IRBuilderBase::AddOrRemoveMetadataToCopy((uint64_t)this, 0, v3);
  llvm::TrackingMDRef::~TrackingMDRef((llvm::TrackingMDRef *)&v4);
}

void sub_240FA9D74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  llvm::TrackingMDRef::~TrackingMDRef((llvm::TrackingMDRef *)va);
  _Unwind_Resume(a1);
}

uint64_t MTLRaytracingIndirectionPass::createGetBufferFunctionTableCall(uint64_t a1, uint64_t a2)
{
  void ***v4;
  void **v5;
  void **v6;
  MTLBoundsCheck *v7;
  llvm::Type *v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  std::string::size_type v12;
  uint64_t Function;
  uint64_t v14;
  llvm::BasicBlock *v15;
  uint64_t Context;
  uint64_t v17;
  uint64_t v18;
  std::string v20;
  __int16 v21;
  std::string v22;
  _QWORD v23[2];
  void *__p[2];
  _QWORD v25[2];
  __int16 v26;
  llvm::BasicBlock *v27;
  char *v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t v32;
  int v33;
  __int16 v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[2];

  v39[1] = *MEMORY[0x24BDAC8D0];
  v4 = (void ***)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  v5 = *v4;
  v6 = v4[8];
  std::string::basic_string[abi:ne180100]<0>(&v22, "air.get_buffer_intersection_function_table");
  v7 = (MTLBoundsCheck *)llvm::PointerType::get();
  MTLBoundsCheck::getMangledTypeStr(v7, v8, &v20);
  v9 = std::string::insert(&v20, 0, ".");
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v25[0] = *((_QWORD *)&v9->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (v25[0] >= 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if (v25[0] >= 0)
    v12 = HIBYTE(v25[0]);
  else
    v12 = (std::string::size_type)__p[1];
  std::string::append(&v22, (const std::string::value_type *)v11, v12);
  if (SHIBYTE(v25[0]) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  Function = llvm::Module::getFunction();
  if (!Function)
  {
    llvm::PointerType::get();
    __p[0] = *v5;
    __p[1] = *v6;
    v14 = llvm::FunctionType::get();
    v26 = 260;
    __p[0] = &v22;
    Function = llvm::Function::Create(v14, 0, (uint64_t)__p, *(_QWORD *)(a1 + 48));
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
  }
  v15 = *(llvm::BasicBlock **)(a2 + 40);
  Context = llvm::BasicBlock::getContext(v15);
  __p[0] = v25;
  __p[1] = (void *)0x200000000;
  v29 = Context;
  v30 = &v38;
  v31 = v39;
  v32 = 0;
  v33 = 0;
  v34 = 512;
  v35 = 7;
  v36 = 0;
  v37 = 0;
  v38 = MEMORY[0x24BED83B8] + 16;
  v39[0] = MEMORY[0x24BED83F0] + 16;
  v27 = v15;
  v28 = (char *)v15 + 40;
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)__p, (llvm::Instruction *)a2);
  if (Function)
    v17 = *(_QWORD *)(Function + 24);
  else
    v17 = 0;
  v23[0] = v5;
  v23[1] = v6;
  v21 = 257;
  v18 = llvm::IRBuilderBase::CreateCall((uint64_t)__p, v17, Function, (uint64_t)v23, 2, (uint64_t)&v20, 0);
  *(_WORD *)(v18 + 18) = *(_WORD *)(v18 + 18) & 0xFFFC | 1;
  llvm::Value::getContext((llvm::Value *)v18);
  *(_QWORD *)(v18 + 64) = llvm::AttributeList::addAttributeAtIndex();
  llvm::Value::getContext((llvm::Value *)v18);
  *(_QWORD *)(v18 + 64) = llvm::AttributeList::addAttributeAtIndex();
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v39);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v38);
  if (__p[0] != v25)
    free(__p[0]);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  return v18;
}

void sub_240FAA0A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t llvm::IRBuilderBase::AddOrRemoveMetadataToCopy(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v3 = result;
  v8 = a2;
  v7 = a3;
  if (a3)
  {
    v4 = *(unsigned int *)(result + 8);
    if ((_DWORD)v4)
    {
      v5 = (uint64_t *)(*(_QWORD *)result + 8);
      v6 = 16 * v4;
      while (*((_DWORD *)v5 - 2) != a2)
      {
        v5 += 2;
        v6 -= 16;
        if (!v6)
          return llvm::SmallVectorImpl<std::pair<unsigned int,llvm::MDNode *>>::emplace_back<unsigned int &,llvm::MDNode *&>(result, &v8, &v7);
      }
      *v5 = a3;
    }
    else
    {
      return llvm::SmallVectorImpl<std::pair<unsigned int,llvm::MDNode *>>::emplace_back<unsigned int &,llvm::MDNode *&>(result, &v8, &v7);
    }
  }
  else
  {
    result = std::remove_if[abi:ne180100]<std::pair<unsigned int,llvm::MDNode *> *,llvm::IRBuilderBase::AddOrRemoveMetadataToCopy(unsigned int,llvm::MDNode *)::{lambda(std::pair<unsigned int,llvm::MDNode *> const&)#1}>(*(_QWORD *)result, *(_QWORD *)result + 16 * *(unsigned int *)(result + 8), a2);
    *(_DWORD *)(v3 + 8) = (unint64_t)(result - *(_QWORD *)v3) >> 4;
  }
  return result;
}

uint64_t llvm::SmallVectorImpl<std::pair<unsigned int,llvm::MDNode *>>::emplace_back<unsigned int &,llvm::MDNode *&>(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;

  v4 = *(unsigned int *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorTemplateBase<std::pair<unsigned int,llvm::MDNode *>,true>::push_back(a1, *a2, *a3);
    v5 = *(_QWORD *)a1;
    v7 = *(_DWORD *)(a1 + 8);
  }
  else
  {
    v5 = *(_QWORD *)a1;
    v6 = *(_QWORD *)a1 + 16 * v4;
    *(_DWORD *)v6 = *a2;
    *(_QWORD *)(v6 + 8) = *a3;
    v7 = v4 + 1;
    *(_DWORD *)(a1 + 8) = v7;
  }
  return v5 + 16 * v7 - 16;
}

uint64_t std::remove_if[abi:ne180100]<std::pair<unsigned int,llvm::MDNode *> *,llvm::IRBuilderBase::AddOrRemoveMetadataToCopy(unsigned int,llvm::MDNode *)::{lambda(std::pair<unsigned int,llvm::MDNode *> const&)#1}>(uint64_t result, uint64_t a2, int a3)
{
  uint64_t i;

  if (result != a2)
  {
    while (*(_DWORD *)result != a3)
    {
      result += 16;
      if (result == a2)
        return a2;
    }
  }
  if (result != a2)
  {
    for (i = result + 16; i != a2; i += 16)
    {
      if (*(_DWORD *)i != a3)
      {
        *(_DWORD *)result = *(_DWORD *)i;
        *(_QWORD *)(result + 8) = *(_QWORD *)(i + 8);
        result += 16;
      }
    }
  }
  return result;
}

uint64_t llvm::SmallVectorTemplateBase<std::pair<unsigned int,llvm::MDNode *>,true>::push_back(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 8);
  if (v6 >= *(_DWORD *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  v7 = (_QWORD *)(*(_QWORD *)v5 + 16 * v6);
  *v7 = a2;
  v7[1] = a3;
  ++*(_DWORD *)(v5 + 8);
  return result;
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

uint64_t llvm::IRBuilderBase::CreateCall(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  llvm::Value *v10;
  uint64_t v11;

  v10 = (llvm::Value *)llvm::CallInst::Create(a2, a3, a4, a5, *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112));
  v11 = (uint64_t)v10;
  if (*(_BYTE *)(a1 + 100))
  {
    llvm::Value::getContext(v10);
    *(_QWORD *)(v11 + 64) = llvm::AttributeList::addAttributeAtIndex();
  }
  if (llvm::FPMathOperator::classof(v11))
    llvm::IRBuilderBase::setFPAttrs(a1, v11, a7);
  return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)a1, v11, a6);
}

uint64_t llvm::IRBuilderBase::setFPAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 || *(_QWORD *)(a1 + 88))
    llvm::Instruction::setMetadata();
  llvm::Instruction::setFastMathFlags();
  return a2;
}

BOOL llvm::FPMathOperator::classof(uint64_t a1)
{
  unsigned int v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;

  v1 = *(unsigned __int8 *)(a1 + 16);
  if (!a1 || (v2 = v1 - 28, v1 < 0x1C))
  {
    v3 = 0;
    if (!a1 || v1 != 5)
      return v3;
    v2 = *(unsigned __int16 *)(a1 + 18);
  }
  if (v2 > 0x39)
    return 0;
  if (((1 << v2) & 0x40000001255000) != 0)
    return 1;
  if (((1 << v2) & 0x380000000000000) == 0)
    return 0;
  do
  {
    v4 = *(_QWORD *)a1;
    v5 = *(unsigned __int8 *)(*(_QWORD *)a1 + 8);
    a1 = *(_QWORD *)a1 + 24;
    if (v4)
      v6 = v5 == 17;
    else
      v6 = 0;
  }
  while (v6);
  if ((v5 & 0xFE) == 0x12)
    v5 = *(unsigned __int8 *)(**(_QWORD **)(v4 + 16) + 8);
  return v5 < 7;
}

uint64_t llvm::IRBuilderBase::CreateAlignedStore(uint64_t a1, llvm::Type **a2, uint64_t a3, __int16 a4)
{
  llvm::Module *Module;
  llvm::DataLayout *DataLayout;
  uint64_t v8;
  _BYTE v10[32];
  __int16 v11;

  if ((a4 & 0xFF00) == 0)
  {
    Module = (llvm::Module *)llvm::BasicBlock::getModule(*(llvm::BasicBlock **)(a1 + 48));
    DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(Module);
    llvm::DataLayout::getABITypeAlign(DataLayout, *a2);
  }
  v8 = llvm::User::operator new((llvm::User *)0x40);
  llvm::StoreInst::StoreInst();
  v11 = 257;
  return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)a1, v8, (uint64_t)v10);
}

void sub_240FAA61C(_Unwind_Exception *a1)
{
  void *v1;

  llvm::User::operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *createMTLAddCustomFunctionsPass(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  MetalModulePass::MetalModulePass((uint64_t)v2, (uint64_t)&MTLAddCustomFunctionsPass::ID, a1);
  *v2 = &off_25111E228;
  return v2;
}

void sub_240FAA688(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x24268D8F0](v1, 0x10E1C40C8265ECALL);
  _Unwind_Resume(a1);
}

void MTLAddCustomFunctionsPass::~MTLAddCustomFunctionsPass(MTLAddCustomFunctionsPass *this)
{
  char *v2;

  *(_QWORD *)this = &off_25111E050;
  v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
}

{
  char *v2;

  *(_QWORD *)this = &off_25111E050;
  v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x24268D8F0);
}

uint64_t MTLAddCustomFunctionsPass::runOnModule(MTLAddCustomFunctionsPass *this, llvm::Module *a2)
{
  MetalModulePass::runOnModule(this, a2);
  MTLAddCustomFunctionsPass::getOrInsertUncheckedLoadFunction(this, (llvm::BasicBlock **)a2);
  return 1;
}

uint64_t MTLAddCustomFunctionsPass::getOrInsertUncheckedLoadFunction(MTLAddCustomFunctionsPass *this, llvm::BasicBlock **a2)
{
  uint64_t *v3;
  llvm::Type *v4;
  uint64_t v5;
  llvm::BasicBlock *v6;
  llvm::BasicBlock *v7;
  llvm::BasicBlock *v8;
  llvm::ReturnInst *Context;
  uint64_t v10;
  llvm::LLVMContext *AlignedLoad;
  llvm::Instruction *v12;
  uint64_t v13;
  _BYTE v15[32];
  __int16 v16;
  void *v17[2];
  _WORD v18[16];
  llvm::BasicBlock *v19;
  char *v20;
  llvm::ReturnInst *v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  __int16 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];

  v31[1] = *MEMORY[0x24BDAC8D0];
  v3 = (uint64_t *)((char *)this + 72);
  v4 = (llvm::Type *)*((_QWORD *)this + 9);
  v17[0] = (void *)llvm::PointerType::get();
  v5 = getOrInsertFunction<char const(&)[34],llvm::Type *&,llvm::PointerType *>((uint64_t)a2, "mtl.force_not_checked.load.i64.p1", v3, (uint64_t *)v17);
  if (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v5))
  {
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
    *(_DWORD *)(v5 + 32) = *(_DWORD *)(v5 + 32) & 0xFFFFBFC0 | 0x4007;
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    v6 = *a2;
    v18[8] = 257;
    v8 = (llvm::BasicBlock *)llvm::BasicBlock::Create(v6, (llvm::LLVMContext *)v17, (const llvm::Twine *)v5, 0, v7);
    Context = (llvm::ReturnInst *)llvm::BasicBlock::getContext(v8);
    v17[0] = v18;
    v17[1] = (void *)0x200000000;
    v21 = Context;
    v22 = &v30;
    v23 = v31;
    v24 = 0;
    v25 = 0;
    v26 = 512;
    v27 = 7;
    v28 = 0;
    v29 = 0;
    v30 = MEMORY[0x24BED83B8] + 16;
    v31[0] = MEMORY[0x24BED83F0] + 16;
    v19 = v8;
    v20 = (char *)v8 + 40;
    if ((*(_BYTE *)(v5 + 18) & 1) != 0)
      llvm::Function::BuildLazyArguments((llvm::Function *)v5);
    v10 = *(_QWORD *)(v5 + 88);
    v16 = 257;
    AlignedLoad = (llvm::LLVMContext *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v17, v4, v10, 259, 0, (uint64_t)v15);
    llvm::MDTuple::getImpl();
    llvm::Instruction::setMetadata();
    v13 = llvm::ReturnInst::Create(v21, AlignedLoad, 0, v12);
    v16 = 257;
    llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)v17, v13, (uint64_t)v15);
    llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v31);
    llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v30);
    if (v17[0] != v18)
      free(v17[0]);
  }
  llvm::GlobalObject::setSection();
  return v5;
}

void sub_240FAAA1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder((void **)va);
  _Unwind_Resume(a1);
}

uint64_t getOrInsertFunction<char const(&)[34],llvm::Type *&,llvm::PointerType *>(uint64_t a1, char *__s, uint64_t *a3, uint64_t *a4)
{
  size_t v8;
  uint64_t v9;
  uint64_t result;

  v8 = strlen(__s);
  llvm::Module::getOrInsertFunction<llvm::PointerType *>(a1, (uint64_t)__s, v8, 0, *a3, *a4);
  result = v9;
  if (*(_BYTE *)(v9 + 16) == 5)
    return *(_QWORD *)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF));
  return result;
}

uint64_t llvm::Module::getOrInsertFunction<llvm::PointerType *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t inserted;
  uint64_t v8;
  void *v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x24BDAC8D0];
  v8 = a6;
  llvm::SmallVector<llvm::Type *,1u>::SmallVector(&v9, &v8, 1);
  llvm::FunctionType::get();
  inserted = llvm::Module::getOrInsertFunction();
  if (v9 != v10)
    free(v9);
  return inserted;
}

void sub_240FAAB8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(exception_object);
}

_QWORD *llvm::SmallVector<llvm::Type *,1u>::SmallVector(_QWORD *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = a1 + 2;
  a1[1] = 0x100000000;
  llvm::SmallVectorImpl<llvm::Metadata *>::append<llvm::Metadata * const*,void>((uint64_t)a1, a2, &a2[8 * a3]);
  return a1;
}

void sub_240FAABF4(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  void *v3;

  v3 = v2;
  if (*v1 != v3)
    free(*v1);
  _Unwind_Resume(exception_object);
}

_QWORD *createMTLBuiltinsReportPass(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  MetalModulePass::MetalModulePass((uint64_t)v2, (uint64_t)&MTLBuiltinsReportPass::ID, a1);
  *v2 = &off_25111E2C8;
  return v2;
}

void sub_240FAAC6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x24268D8F0](v1, 0x10E1C40C8265ECALL);
  _Unwind_Resume(a1);
}

void MTLBuiltinsReportPass::~MTLBuiltinsReportPass(MTLBuiltinsReportPass *this)
{
  char *v2;

  *(_QWORD *)this = &off_25111E050;
  v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
}

{
  char *v2;

  *(_QWORD *)this = &off_25111E050;
  v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x24268D8F0);
}

uint64_t MTLBuiltinsReportPass::runOnModule(MTLBuiltinsReportPass *this, llvm::Module *a2)
{
  MetalModulePass::runOnModule(this, a2);
  if ((MTLBuiltinsReportPass::handleLLVMTrap((uint64_t)this) & 1) != 0)
    return 1;
  else
    return MTLBuiltinsReportPass::handleLLVMTrap((uint64_t)this);
}

uint64_t MTLBuiltinsReportPass::handleLLVMTrap(uint64_t a1)
{
  uint64_t Function;
  llvm::Function *v3;
  llvm::Instruction **v4;
  char v5;
  uint64_t v6;
  llvm::Instruction *v7;
  MTLBoundsCheck::SharedPassData *v8;
  llvm::MDString *NameOfParentFunction;
  const void *v10;
  uint64_t inserted;
  llvm::Type *v12;
  llvm::Value *AlignedLoad;
  uint64_t v14;
  llvm::Type *v15;
  llvm::Value *v16;
  const llvm::Twine *ImageIDFunction;
  uint64_t v18;
  llvm::Value *v19;
  uint64_t v20;
  llvm::Type *v21;
  llvm::Value *v22;
  uint64_t v24[4];
  __int16 v25;
  void *v26;
  unsigned int v27;
  uint64_t v28;
  void *v29[2];
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[9];

  v32[7] = *MEMORY[0x24BDAC8D0];
  Function = llvm::Module::getFunction();
  if (Function)
  {
    v3 = (llvm::Function *)Function;
    MTLIRBuilder::MTLIRBuilder<llvm::LLVMContext &>((uint64_t)v29, *(llvm::LLVMContext **)(a1 + 40));
    v24[0] = *((_QWORD *)v3 + 1);
    v24[1] = 0;
    llvm::SmallVector<llvm::User *,4u>::SmallVector<llvm::Value::user_iterator_impl<llvm::User>>(&v26, v24);
    v4 = (llvm::Instruction **)v26;
    if (v27)
    {
      v5 = 0;
      v6 = 8 * v27;
      do
      {
        v7 = *v4;
        if (*v4 && *((_BYTE *)v7 + 16) == 84)
        {
          llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)v29, *v4);
          v8 = *(MTLBoundsCheck::SharedPassData **)(a1 + 64);
          NameOfParentFunction = MTLBoundsCheck::SharedPassData::getNameOfParentFunction(v8, v7);
          MTLBoundsCheck::SharedPassData::indexForString((uint64_t)v8, NameOfParentFunction, v10);
          MTLBoundsCheck::SharedPassData::indexForInstruction(*(MTLBoundsCheck::SharedPassData **)(a1 + 64), v7);
          inserted = MTLBoundsCheck::SharedPassData::getOrInsertReportBufferGV(*(llvm::Type ****)(a1 + 64));
          v12 = *(llvm::Type **)(inserted + 24);
          v25 = 257;
          AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v29, v12, inserted, 0, 0, (uint64_t)v24);
          v14 = MTLBoundsCheck::SharedPassData::getOrInsertDrawIDBufferGV(*(MTLBoundsCheck::SharedPassData **)(a1 + 64));
          v15 = *(llvm::Type **)(v14 + 24);
          v25 = 257;
          v16 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v29, v15, v14, 0, 0, (uint64_t)v24);
          ImageIDFunction = MTLBoundsCheck::SharedPassData::getOrInsertGetImageIDFunction(*(MTLBoundsCheck::SharedPassData **)(a1 + 64));
          if (ImageIDFunction)
            v18 = *((_QWORD *)ImageIDFunction + 3);
          else
            v18 = 0;
          v25 = 257;
          v19 = (llvm::Value *)llvm::IRBuilderBase::CreateCall((uint64_t)v29, v18, (uint64_t)ImageIDFunction, 0, 0, (uint64_t)v24, 0);
          v20 = MTLBoundsCheck::SharedPassData::getOrInsertStackTraceGV(*(llvm::Type ****)(a1 + 64));
          v21 = *(llvm::Type **)(v20 + 24);
          v25 = 257;
          v22 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v29, v21, v20, 0, 0, (uint64_t)v24);
          MTLIRBuilder::CreateTrapCall((MTLIRBuilder *)v29, AlignedLoad, v16, v22, v19);
          llvm::Instruction::eraseFromParent(v7);
          v5 = 1;
        }
        ++v4;
        v6 -= 8;
      }
      while (v6);
      v4 = (llvm::Instruction **)v26;
    }
    else
    {
      v5 = 0;
    }
    if (v4 != (llvm::Instruction **)&v28)
      free(v4);
    if (!*((_QWORD *)v3 + 1))
      llvm::Function::eraseFromParent(v3);
    llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v32);
    llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v31);
    if (v29[0] != &v30)
      free(v29[0]);
  }
  else
  {
    v5 = 0;
  }
  return v5 & 1;
}

void sub_240FAAFFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder(&a22);
  _Unwind_Resume(a1);
}

uint64_t MTLIRBuilder::MTLIRBuilder<llvm::LLVMContext &>(uint64_t a1, llvm::LLVMContext *a2)
{
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 120) = MEMORY[0x24BED83B8] + 16;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BED83F0] + 16;
  *(_QWORD *)(a1 + 8) = 0x200000000;
  *(_QWORD *)(a1 + 64) = a2;
  *(_QWORD *)(a1 + 72) = a1 + 120;
  *(_QWORD *)(a1 + 80) = a1 + 128;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(_WORD *)(a1 + 100) = 512;
  *(_BYTE *)(a1 + 102) = 7;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  MTLIRBuilder::initTypeCache((MTLIRBuilder *)a1, a2);
  return a1;
}

void sub_240FAB0EC(_Unwind_Exception *a1)
{
  void **v1;

  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder(v1);
  _Unwind_Resume(a1);
}

_QWORD *llvm::SmallVector<llvm::User *,4u>::SmallVector<llvm::Value::user_iterator_impl<llvm::User>>(_QWORD *a1, uint64_t *a2)
{
  *a1 = a1 + 2;
  a1[1] = 0x400000000;
  llvm::SmallVectorImpl<llvm::User *>::append<llvm::Value::user_iterator_impl<llvm::User>,void>((uint64_t)a1, *a2, a2[1]);
  return a1;
}

void sub_240FAB140(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  void *v3;

  v3 = v2;
  if (*v1 != v3)
    free(*v1);
  _Unwind_Resume(exception_object);
}

char *BasicParser::getNextToken(BasicParser *this)
{
  unsigned int v1;
  uint64_t v2;
  char *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  char *v12;

  v2 = *(unsigned int *)this;
  v1 = *((_DWORD *)this + 1);
  if (v2 < v1)
  {
    v3 = (char *)(*((_QWORD *)this + 1) + v2);
    while (1)
    {
      v4 = *v3++;
      v5 = (1 << v4) & 0x5000144100000001;
      if (v4 > 0x3E || v5 == 0)
        break;
      LODWORD(v2) = v2 + 1;
      *(_DWORD *)this = v2;
      if (v1 == (_DWORD)v2)
      {
        LODWORD(v2) = v1;
        goto LABEL_10;
      }
    }
  }
  if (v2 <= v1)
  {
LABEL_10:
    v7 = 0;
    v8 = *((_QWORD *)this + 1);
    while (*(char *)(v8 + (v2 + v7)) > 0x3E
         || ((1 << *(_BYTE *)(v8 + (v2 + v7))) & 0x5000144100000001) == 0)
    {
      if (v7 == 63)
      {
        v12 = (char *)this + 16;
        *((_BYTE *)this + 79) = 0;
        return v12;
      }
      v10 = v7 + 1;
      *((_BYTE *)this + v7 + 16) = *(_BYTE *)(v8 + (v2 + v7));
      *(_DWORD *)this = v2 + v7 + 1;
      v11 = v2 + ++v7;
      if (v11 > v1)
      {
        if (!v10)
          return 0;
        return (char *)this + 16;
      }
    }
    *((_BYTE *)this + v7 + 16) = 0;
    if ((_DWORD)v7)
      return (char *)this + 16;
  }
  return 0;
}

uint64_t textureTypeFromString(void *__src, size_t __len, _DWORD *a3, _BYTE *a4)
{
  void **v8;
  size_t v9;
  size_t v10;
  const char *v11;
  char *NextToken;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void *__p[2];
  char v22;
  void *__dst[2];
  int64_t v24;
  char v25;
  void **v26;
  _DWORD v27[2];
  const char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v9 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v9 = __len | 7;
    v10 = v9 + 1;
    v8 = (void **)operator new(v9 + 1);
    __dst[1] = (void *)__len;
    v24 = v10 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_8;
  }
  HIBYTE(v24) = __len;
  v8 = __dst;
  if (__len)
LABEL_8:
    memmove(v8, __src, __len);
  *((_BYTE *)v8 + __len) = 0;
  if (v24 >= 0)
    v11 = (const char *)__dst;
  else
    v11 = (const char *)__dst[0];
  v27[0] = 0;
  v28 = v11;
  v27[1] = strlen(v11);
  NextToken = BasicParser::getNextToken((BasicParser *)v27);
  if (!strcmp(NextToken, "array"))
    NextToken = BasicParser::getNextToken((BasicParser *)v27);
  v13 = atomic_load(&textureTypeMapOnce);
  if (v13 != -1)
  {
    __p[0] = &v25;
    v26 = __p;
    std::__call_once(&textureTypeMapOnce, &v26, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<textureTypeMap(void)::$_0 &&>>);
  }
  v14 = textureTypeMap(void)::nonGlobalTextureTypeMap;
  std::string::basic_string[abi:ne180100]<0>(__p, NextToken);
  v15 = std::__tree<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>>>::find<std::string>(v14, (const void **)__p);
  if (v22 < 0)
    operator delete(__p[0]);
  v16 = *(unsigned int *)(v15 + 56);
  *a4 = *(_BYTE *)(v15 + 60);
  v17 = BasicParser::getNextToken((BasicParser *)v27);
  v18 = bufferTypeMap();
  std::string::basic_string[abi:ne180100]<0>(__p, v17);
  v19 = std::__tree<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>>>::find<std::string>(v18, (const void **)__p);
  if (v22 < 0)
    operator delete(__p[0]);
  *a3 = *(_DWORD *)(v19 + 60);
  if (SHIBYTE(v24) < 0)
    operator delete(__dst[0]);
  return v16;
}

void sub_240FAB460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t bufferTypeMap(void)
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(&bufferTypeMapOnce);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&bufferTypeMapOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<bufferTypeMap(void)::$_0 &&>>);
  }
  return bufferTypeMap(void)::nonGlobalBufferTypeMap;
}

uint64_t dataTypeFromString(const void *a1, size_t a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t result;
  _DWORD v7[5];

  dataTypeInfoFromString(a1, a2, (uint64_t)v7);
  result = v7[0];
  if (a3)
    *a3 = v7[1];
  if (a4)
    *a4 = v7[2];
  return result;
}

void dataTypeInfoFromString(const void *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X8>)
{
  void **v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  char *NextToken;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void *__p;
  void *v26;
  uint64_t v27;
  unsigned __int8 v28;
  int v29;
  void *__dst[2];
  int64_t v31;
  _DWORD v32[2];
  const char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a2 >= 0x17)
  {
    v7 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v7 = a2 | 7;
    v8 = v7 + 1;
    v6 = (void **)operator new(v7 + 1);
    __dst[1] = (void *)a2;
    v31 = v8 | 0x8000000000000000;
    __dst[0] = v6;
  }
  else
  {
    HIBYTE(v31) = a2;
    v6 = __dst;
    if (!a2)
      goto LABEL_9;
  }
  memmove(v6, a1, a2);
LABEL_9:
  *((_BYTE *)v6 + a2) = 0;
  if (v31 >= 0)
    v9 = (const char *)__dst;
  else
    v9 = (const char *)__dst[0];
  v32[0] = 0;
  v33 = v9;
  v32[1] = strlen(v9);
  while (1)
  {
    NextToken = BasicParser::getNextToken((BasicParser *)v32);
    if (!NextToken)
      goto LABEL_31;
    v11 = bufferTypeMap();
    std::string::basic_string[abi:ne180100]<0>(&__p, NextToken);
    v12 = std::__tree<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>>>::find<std::string>(v11, (const void **)&__p);
    if (SHIBYTE(v27) < 0)
      operator delete(__p);
    if (bufferTypeMap() + 8 == v12)
      break;
    if (*(_DWORD *)(v12 + 56) != 1)
    {
      LODWORD(NextToken) = 0;
      v13 = 0;
      v14 = *(_DWORD *)(v12 + 60);
      v15 = *(_QWORD *)(v12 + 64);
      goto LABEL_32;
    }
  }
  v16 = pixelFormatTypeMap();
  std::string::basic_string[abi:ne180100]<0>(&__p, NextToken);
  v17 = std::__tree<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>>>::find<std::string>(v16, (const void **)&__p);
  if (SHIBYTE(v27) < 0)
    operator delete(__p);
  if (pixelFormatTypeMap() + 8 == v17)
  {
    LODWORD(NextToken) = 0;
LABEL_31:
    v13 = 0;
    v14 = 0;
    v15 = 0;
    goto LABEL_32;
  }
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,Air::PixelFormat,std::string,MTLCompilerDataType>::__tuple_impl(&__p, v17 + 56);
  v13 = (int)__p;
  if ((v28 & 0x80u) == 0)
    v18 = &v26;
  else
    v18 = v26;
  if ((v28 & 0x80u) == 0)
    v19 = v28;
  else
    v19 = v27;
  dataTypeInfoFromString(&v23, v18, v19);
  v14 = v29;
  v21 = v24;
  NextToken = BasicParser::getNextToken((BasicParser *)v32);
  v20 = strlen(NextToken);
  dataTypeInfoFromString(&v22, NextToken, v20);
  LODWORD(NextToken) = v22;
  v15 = v21;
  if ((char)v28 < 0)
  {
    operator delete(v26);
    v15 = v21;
  }
LABEL_32:
  *(_DWORD *)a3 = v14;
  *(_QWORD *)(a3 + 4) = v15;
  *(_DWORD *)(a3 + 12) = v13;
  *(_DWORD *)(a3 + 16) = (_DWORD)NextToken;
  if (SHIBYTE(v31) < 0)
    operator delete(__dst[0]);
}

void sub_240FAB7BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a25 < 0)
    operator delete(a17);
  if (a32 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t dataTypeFromString(const void *a1, size_t a2)
{
  _DWORD v3[5];

  dataTypeInfoFromString(a1, a2, (uint64_t)v3);
  return v3[0];
}

uint64_t arraySizeFromTypeName(void *__src, size_t __len)
{
  _QWORD *v4;
  size_t v5;
  size_t v6;
  int v7;
  void *v8;
  const char *v9;
  char *NextToken;
  const char *v11;
  uint64_t v12;
  _QWORD v14[2];
  int64_t v15;
  _DWORD v16[2];
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v5 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v5 = __len | 7;
    v6 = v5 + 1;
    v4 = operator new(v5 + 1);
    v14[1] = __len;
    v15 = v6 | 0x8000000000000000;
    v14[0] = v4;
    goto LABEL_8;
  }
  HIBYTE(v15) = __len;
  v4 = v14;
  if (__len)
LABEL_8:
    memmove(v4, __src, __len);
  *((_BYTE *)v4 + __len) = 0;
  v7 = SHIBYTE(v15);
  v8 = (void *)v14[0];
  if (v15 >= 0)
    v9 = (const char *)v14;
  else
    v9 = (const char *)v14[0];
  v16[0] = 0;
  v17 = v9;
  v16[1] = strlen(v9);
  NextToken = BasicParser::getNextToken((BasicParser *)v16);
  if (!strcmp(NextToken, "array"))
  {
    v12 = 0;
    if ((v7 & 0x80000000) == 0)
      return v12;
    goto LABEL_15;
  }
  do
  {
    v11 = NextToken;
    NextToken = BasicParser::getNextToken((BasicParser *)v16);
  }
  while (NextToken);
  v12 = atol(v11);
  if (v7 < 0)
LABEL_15:
    operator delete(v8);
  return v12;
}

uint64_t pixelFormatAndALUTypeFromString(const void *a1, size_t a2)
{
  _BYTE v3[12];
  uint64_t v4;

  dataTypeInfoFromString(a1, a2, (uint64_t)v3);
  return v4;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<textureTypeMap(void)::$_0 &&>>()
{
  uint64_t v0;
  uint64_t v1;
  std::string __p;
  std::string v3;
  std::string v4;
  std::string v5;
  std::string v6;
  std::string __s;
  std::string v8;
  std::string v9;
  std::string v10;
  std::string v11;
  std::string v12;
  std::string v13;
  std::string v14;
  std::string v15;
  std::string v16;
  std::string v17;
  std::string v18;
  uint64_t v19;
  std::string v20;
  uint64_t v21;
  std::string v22;
  uint64_t v23;
  std::string v24;
  uint64_t v25;
  std::string v26;
  uint64_t v27;
  std::string v28;
  uint64_t v29;
  std::string v30;
  uint64_t v31;
  std::string v32;
  uint64_t v33;
  std::string v34;
  uint64_t v35;
  std::string v36;
  uint64_t v37;
  std::string v38;
  uint64_t v39;
  std::string v40;
  uint64_t v41;
  std::string v42;
  uint64_t v43;
  std::string v44;
  uint64_t v45;
  std::string v46;
  uint64_t v47;
  std::string v48;
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v0 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v17, "texture1d");
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v18, v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
  else
    v18 = v17;
  v19 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v16, "texture1d_array");
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v20, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
  else
    v20 = v16;
  v21 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v15, "texture2d");
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v22, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
  else
    v22 = v15;
  v23 = 2;
  std::string::basic_string[abi:ne180100]<0>(&v14, "texture2d_array");
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v24, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
  else
    v24 = v14;
  v25 = 3;
  std::string::basic_string[abi:ne180100]<0>(&v13, "texture3d");
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v26, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
  else
    v26 = v13;
  v27 = 7;
  std::string::basic_string[abi:ne180100]<0>(&v12, "texturecube");
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v28, v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
  else
    v28 = v12;
  v29 = 5;
  std::string::basic_string[abi:ne180100]<0>(&v11, "texturecube_array");
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v30, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
  else
    v30 = v11;
  v31 = 6;
  std::string::basic_string[abi:ne180100]<0>(&v10, "depthcube_array");
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v32, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
  else
    v32 = v10;
  v33 = 0x100000006;
  std::string::basic_string[abi:ne180100]<0>(&v9, "texture2d_ms");
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v34, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
  else
    v34 = v9;
  v35 = 4;
  std::string::basic_string[abi:ne180100]<0>(&v8, "texture2d_ms_array");
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v36, v8.__r_.__value_.__l.__data_, v8.__r_.__value_.__l.__size_);
  else
    v36 = v8;
  v37 = 8;
  std::string::basic_string[abi:ne180100]<0>(&__s, "depth2d_ms_array");
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v38, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v38 = __s;
  v39 = 0x100000008;
  std::string::basic_string[abi:ne180100]<0>(&v6, "depth2d");
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v40, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  else
    v40 = v6;
  v41 = 0x100000002;
  std::string::basic_string[abi:ne180100]<0>(&v5, "depth2d_array");
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v42, v5.__r_.__value_.__l.__data_, v5.__r_.__value_.__l.__size_);
  else
    v42 = v5;
  v43 = 0x100000003;
  std::string::basic_string[abi:ne180100]<0>(&v4, "depthcube");
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v44, v4.__r_.__value_.__l.__data_, v4.__r_.__value_.__l.__size_);
  else
    v44 = v4;
  v45 = 0x100000005;
  std::string::basic_string[abi:ne180100]<0>(&v3, "depth2d_ms");
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v46, v3.__r_.__value_.__l.__data_, v3.__r_.__value_.__l.__size_);
  else
    v46 = v3;
  v47 = 0x100000004;
  std::string::basic_string[abi:ne180100]<0>(&__p, "texture_buffer");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v48, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v48 = __p;
  v49 = 9;
  std::map<std::string,TextureTokenData>::map[abi:ne180100](v0, (const void **)&v18.__r_.__value_.__l.__data_, 16);
  textureTypeMap(void)::nonGlobalTextureTypeMap = v0;
  v1 = 64;
  do
  {
    if (SHIBYTE(v17.__r_.__value_.__r.__words[v1 + 1]) < 0)
      operator delete((void *)v16.__r_.__value_.__r.__words[v1 + 2]);
    v1 -= 4;
  }
  while (v1 * 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
}

void sub_240FAC008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  char a70;
  char a72;
  char a73;
  char a74;
  char a75;
  char a76;
  char a77;
  char a78;
  uint64_t v78;
  char *v79;
  void **v80;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  if (a28 < 0)
    operator delete(a23);
  if (a34 < 0)
    operator delete(a29);
  if (a40 < 0)
    operator delete(a35);
  if (a46 < 0)
    operator delete(a41);
  if (a52 < 0)
    operator delete(v80[3]);
  if (a58 < 0)
    operator delete(v80[6]);
  if (a64 < 0)
    operator delete(v80[9]);
  if (a70 < 0)
    operator delete(v80[12]);
  if (a72 < 0)
    operator delete(v80[15]);
  if (a73 < 0)
    operator delete(v80[18]);
  if (a74 < 0)
    operator delete(v80[21]);
  if (a75 < 0)
    operator delete(v80[24]);
  if (a76 < 0)
    operator delete(v80[27]);
  if (a77 < 0)
    operator delete(v80[30]);
  for (; v79 != &a78; v79 -= 32)
  {
    if (*(v79 - 9) < 0)
      operator delete(*((void **)v79 - 4));
  }
  MEMORY[0x24268D8F0](v78, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

void sub_240FAC27C()
{
  JUMPOUT(0x240FAC1D4);
}

void sub_240FAC288()
{
  JUMPOUT(0x240FAC214);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

uint64_t std::map<std::string,TextureTokenData>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 32 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,TextureTokenData> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_240FAC380(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,TextureTokenData> const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  const void **v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::__construct_node<std::pair<std::string const,TextureTokenData> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

const void **std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::__find_equal<std::string>(_QWORD *a1, uint64_t *a2, const void ***a3, uint64_t *a4, const void **a5)
{
  const void **v9;
  const void **v11;
  const void **v12;
  uint64_t v13;
  const void **v14;
  const void **v15;
  uint64_t *v16;
  BOOL v17;
  const void **v18;

  v9 = (const void **)(a1 + 1);
  if (a1 + 1 == a2 || std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, (const void **)a2 + 4))
  {
    if ((uint64_t *)*a1 == a2)
    {
      v12 = (const void **)a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = (const void **)a2;
        return (const void **)a2;
      }
    }
    v11 = (const void **)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (const void **)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (const void **)v16[2];
        v17 = *v12 == v16;
        v16 = (uint64_t *)v12;
      }
      while (v17);
    }
    if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v12 + 4, a5))
      goto LABEL_16;
    return (const void **)std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
  }
  if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (const void **)a2 + 4, a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (const void **)a2[1];
      do
      {
        v15 = v14;
        v14 = (const void **)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = (const void **)a2;
      do
      {
        v15 = (const void **)v18[2];
        v17 = *v15 == v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, v15 + 4))
        return (const void **)std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (const void **)a2;
    }
    return (const void **)a4;
  }
  *a3 = (const void **)a2;
  *a4 = (uint64_t)a2;
  return (const void **)a4;
}

void std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::__construct_node<std::pair<std::string const,TextureTokenData> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a2 + 16);
  }
  *((_QWORD *)v6 + 7) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_240FAC638(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,TextureTokenData>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

_QWORD *std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::__find_equal<std::string>(uint64_t a1, _QWORD *a2, const void **a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  const void **v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = (_QWORD *)v4;
        v9 = (const void **)(v4 + 32);
        if (!std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32)))
          break;
        v4 = *v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!std::less<std::string>::operator()[abi:ne180100](v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

BOOL std::less<std::string>::operator()[abi:ne180100](uint64_t a1, const void **a2, const void **a3)
{
  int v3;
  int v4;
  size_t v5;
  const void *v6;
  size_t v7;
  const void *v8;
  size_t v9;
  int v10;

  v3 = *((char *)a3 + 23);
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  if (v4 >= 0)
    v6 = a2;
  else
    v6 = *a2;
  if (v3 >= 0)
    v7 = *((unsigned __int8 *)a3 + 23);
  else
    v7 = (size_t)a3[1];
  if (v3 >= 0)
    v8 = a3;
  else
    v8 = *a3;
  if (v7 >= v5)
    v9 = v5;
  else
    v9 = v7;
  v10 = memcmp(v6, v8, v9);
  if (v10)
    return v10 < 0;
  else
    return v5 < v7;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,TextureTokenData>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0)
      operator delete(__p[4]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

void bufferTypeMap(void)::$_0::operator()()
{
  uint64_t v0;
  uint64_t v1;
  std::string __p;
  std::string v3;
  std::string v4;
  std::string v5;
  std::string v6;
  std::string __s;
  std::string v8;
  std::string v9;
  std::string v10;
  std::string v11;
  std::string v12;
  std::string v13;
  std::string v14;
  std::string v15;
  std::string v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  std::string v21;
  std::string v22;
  std::string v23;
  std::string v24;
  std::string v25;
  std::string v26;
  std::string v27;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::string v35;
  std::string v36;
  std::string v37;
  std::string v38;
  std::string v39;
  std::string v40;
  std::string v41;
  std::string v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;
  std::string v53;
  std::string v54;
  std::string v55;
  std::string v56;
  std::string v57;
  std::string v58;
  std::string v59;
  std::string v60;
  std::string v61;
  std::string v62;
  std::string v63;
  std::string v64;
  std::string v65;
  std::string v66;
  std::string v67;
  std::string v68;
  std::string v69;
  std::string v70;
  std::string v71;
  std::string v72;
  std::string v73;
  std::string v74;
  std::string v75;
  std::string v76;
  std::string v77;
  std::string v78;
  std::string v79;
  std::string v80;
  std::string v81;
  std::string v82;
  std::string v83;
  std::string v84;
  std::string v85;
  std::string v86;
  std::string v87;
  std::string v88;
  std::string v89;
  std::string v90;
  std::string v91;
  std::string v92;
  std::string v93;
  std::string v94;
  std::string v95;
  std::string v96;
  std::string v97;
  std::string v98;
  std::string v99;
  std::string v100;
  std::string v101;
  std::string v102;
  std::string v103;
  std::string v104;
  std::string v105;
  std::string v106;
  std::string v107;
  std::string v108;
  std::string v109;
  std::string v110;
  std::string v111;
  std::string v112;
  std::string v113;
  std::string v114;
  std::string v115;
  std::string v116;
  std::string v117;
  std::string v118;
  std::string v119;
  std::string v120;
  std::string v121;
  std::string v122;
  std::string v123;
  std::string v124;
  std::string v125;
  std::string v126;
  std::string v127;
  std::string v128;
  std::string v129;
  std::string v130;
  std::string v131;
  std::string v132;
  std::string v133;
  std::string v134;
  std::string v135;
  std::string v136;
  std::string v137;
  std::string v138;
  std::string v139;
  std::string v140;
  std::string v141;
  std::string v142;
  std::string v143;
  std::string v144;
  std::string v145;
  std::string v146;
  std::string v147;
  std::string v148;
  std::string v149;
  std::string v150;
  std::string v151;
  std::string v152;
  std::string v153;
  std::string v154;
  std::string v155;
  std::string v156;
  std::string v157;
  std::string v158;
  std::string v159;
  std::string v160;
  std::string v161;
  std::string v162;
  std::string v163;
  std::string v164;
  std::string v165;
  std::string v166;
  std::string v167;
  std::string v168;
  std::string v169;
  std::string v170;
  std::string v171;
  std::string v172;
  std::string v173;
  std::string v174;
  __int128 v175;
  std::string v176;
  __int128 v177;
  std::string v178;
  __int128 v179;
  std::string v180;
  __int128 v181;
  std::string v182;
  __int128 v183;
  std::string v184;
  __int128 v185;
  std::string v186;
  __int128 v187;
  std::string v188;
  __int128 v189;
  std::string v190;
  __int128 v191;
  std::string v192;
  __int128 v193;
  std::string v194;
  __int128 v195;
  std::string v196;
  __int128 v197;
  std::string v198;
  __int128 v199;
  std::string v200;
  __int128 v201;
  std::string v202;
  __int128 v203;
  std::string v204;
  __int128 v205;
  std::string v206;
  __int128 v207;
  std::string v208;
  __int128 v209;
  std::string v210;
  __int128 v211;
  std::string v212;
  __int128 v213;
  std::string v214;
  __int128 v215;
  std::string v216;
  __int128 v217;
  std::string v218;
  __int128 v219;
  std::string v220;
  __int128 v221;
  std::string v222;
  __int128 v223;
  std::string v224;
  __int128 v225;
  std::string v226;
  __int128 v227;
  std::string v228;
  __int128 v229;
  std::string v230;
  __int128 v231;
  std::string v232;
  __int128 v233;
  std::string v234;
  __int128 v235;
  std::string v236;
  __int128 v237;
  std::string v238;
  __int128 v239;
  std::string v240;
  __int128 v241;
  std::string v242;
  __int128 v243;
  std::string v244;
  __int128 v245;
  std::string v246;
  __int128 v247;
  std::string v248;
  __int128 v249;
  std::string v250;
  __int128 v251;
  std::string v252;
  __int128 v253;
  std::string v254;
  __int128 v255;
  std::string v256;
  __int128 v257;
  std::string v258;
  __int128 v259;
  std::string v260;
  __int128 v261;
  std::string v262;
  __int128 v263;
  std::string v264;
  __int128 v265;
  std::string v266;
  __int128 v267;
  std::string v268;
  __int128 v269;
  std::string v270;
  __int128 v271;
  std::string v272;
  __int128 v273;
  std::string v274;
  __int128 v275;
  std::string v276;
  __int128 v277;
  std::string v278;
  __int128 v279;
  std::string v280;
  __int128 v281;
  std::string v282;
  __int128 v283;
  std::string v284;
  __int128 v285;
  std::string v286;
  __int128 v287;
  std::string v288;
  __int128 v289;
  std::string v290;
  __int128 v291;
  std::string v292;
  __int128 v293;
  std::string v294;
  __int128 v295;
  std::string v296;
  __int128 v297;
  std::string v298;
  __int128 v299;
  std::string v300;
  __int128 v301;
  std::string v302;
  __int128 v303;
  std::string v304;
  __int128 v305;
  std::string v306;
  __int128 v307;
  std::string v308;
  __int128 v309;
  std::string v310;
  __int128 v311;
  std::string v312;
  __int128 v313;
  std::string v314;
  __int128 v315;
  std::string v316;
  __int128 v317;
  std::string v318;
  __int128 v319;
  std::string v320;
  __int128 v321;
  std::string v322;
  __int128 v323;
  std::string v324;
  __int128 v325;
  std::string v326;
  __int128 v327;
  std::string v328;
  __int128 v329;
  std::string v330;
  __int128 v331;
  std::string v332;
  __int128 v333;
  std::string v334;
  __int128 v335;
  std::string v336;
  __int128 v337;
  std::string v338;
  __int128 v339;
  std::string v340;
  __int128 v341;
  std::string v342;
  __int128 v343;
  std::string v344;
  __int128 v345;
  std::string v346;
  __int128 v347;
  std::string v348;
  __int128 v349;
  std::string v350;
  __int128 v351;
  std::string v352;
  __int128 v353;
  std::string v354;
  __int128 v355;
  std::string v356;
  __int128 v357;
  std::string v358;
  __int128 v359;
  std::string v360;
  __int128 v361;
  std::string v362;
  __int128 v363;
  std::string v364;
  __int128 v365;
  std::string v366;
  __int128 v367;
  std::string v368;
  __int128 v369;
  std::string v370;
  __int128 v371;
  std::string v372;
  __int128 v373;
  std::string v374;
  __int128 v375;
  std::string v376;
  __int128 v377;
  std::string v378;
  __int128 v379;
  std::string v380;
  __int128 v381;
  std::string v382;
  __int128 v383;
  std::string v384;
  __int128 v385;
  std::string v386;
  __int128 v387;
  std::string v388;
  __int128 v389;
  std::string v390;
  __int128 v391;
  std::string v392;
  __int128 v393;
  std::string v394;
  __int128 v395;
  std::string v396;
  __int128 v397;
  std::string v398;
  __int128 v399;
  std::string v400;
  __int128 v401;
  std::string v402;
  __int128 v403;
  std::string v404;
  __int128 v405;
  std::string v406;
  __int128 v407;
  std::string v408;
  __int128 v409;
  std::string v410;
  __int128 v411;
  std::string v412;
  __int128 v413;
  std::string v414;
  __int128 v415;
  std::string v416;
  __int128 v417;
  std::string v418;
  __int128 v419;
  std::string v420;
  __int128 v421;
  std::string v422;
  __int128 v423;
  std::string v424;
  __int128 v425;
  std::string v426;
  __int128 v427;
  std::string v428;
  __int128 v429;
  std::string v430;
  uint64_t v431;
  uint64_t v432;
  std::string v433;
  __int128 v434;
  std::string v435;
  __int128 v436;
  std::string v437;
  __int128 v438;
  std::string v439;
  __int128 v440;
  std::string v441;
  __int128 v442;
  std::string v443;
  __int128 v444;
  std::string v445;
  __int128 v446;
  std::string v447;
  __int128 v448;
  std::string v449;
  __int128 v450;
  std::string v451;
  __int128 v452;
  std::string v453;
  __int128 v454;
  std::string v455;
  __int128 v456;
  std::string v457;
  __int128 v458;
  std::string v459;
  __int128 v460;
  std::string v461;
  __int128 v462;
  std::string v463;
  __int128 v464;
  std::string v465;
  __int128 v466;
  std::string v467;
  __int128 v468;
  std::string v469;
  __int128 v470;
  std::string v471;
  __int128 v472;
  std::string v473;
  __int128 v474;
  std::string v475;
  __int128 v476;
  std::string v477;
  __int128 v478;
  std::string v479;
  __int128 v480;
  std::string v481;
  __int128 v482;
  std::string v483;
  __int128 v484;
  std::string v485;
  __int128 v486;
  std::string v487;
  __int128 v488;
  std::string v489;
  __int128 v490;
  std::string v491;
  __int128 v492;
  std::string v493;
  __int128 v494;
  std::string v495;
  __int128 v496;
  std::string v497;
  __int128 v498;
  std::string v499;
  __int128 v500;
  std::string v501;
  __int128 v502;
  std::string v503;
  uint64_t v504;
  uint64_t v505;
  std::string v506;
  __int128 v507;
  std::string v508;
  __int128 v509;
  std::string v510;
  __int128 v511;
  std::string v512;
  __int128 v513;
  std::string v514;
  __int128 v515;
  std::string v516;
  __int128 v517;
  std::string v518;
  __int128 v519;
  uint64_t v520;

  MEMORY[0x24BDAC7A8]();
  v520 = *MEMORY[0x24BDAC8D0];
  v0 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v173, "const");
  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v174, v173.__r_.__value_.__l.__data_, v173.__r_.__value_.__l.__size_);
  else
    v174 = v173;
  v175 = xmmword_241059910;
  std::string::basic_string[abi:ne180100]<0>(&v172, "global");
  if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v176, v172.__r_.__value_.__l.__data_, v172.__r_.__value_.__l.__size_);
  else
    v176 = v172;
  v177 = xmmword_241059910;
  std::string::basic_string[abi:ne180100]<0>(&v171, "local");
  if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v178, v171.__r_.__value_.__l.__data_, v171.__r_.__value_.__l.__size_);
  else
    v178 = v171;
  v179 = xmmword_241059910;
  std::string::basic_string[abi:ne180100]<0>(&v170, "constant");
  if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v180, v170.__r_.__value_.__l.__data_, v170.__r_.__value_.__l.__size_);
  else
    v180 = v170;
  v181 = xmmword_241059910;
  std::string::basic_string[abi:ne180100]<0>(&v169, "__global");
  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v182, v169.__r_.__value_.__l.__data_, v169.__r_.__value_.__l.__size_);
  else
    v182 = v169;
  v183 = xmmword_241059910;
  std::string::basic_string[abi:ne180100]<0>(&v168, "__constant");
  if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v184, v168.__r_.__value_.__l.__data_, v168.__r_.__value_.__l.__size_);
  else
    v184 = v168;
  v185 = xmmword_241059910;
  std::string::basic_string[abi:ne180100]<0>(&v167, "float");
  if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v186, v167.__r_.__value_.__l.__data_, v167.__r_.__value_.__l.__size_);
  else
    v186 = v167;
  v187 = xmmword_241059920;
  std::string::basic_string[abi:ne180100]<0>(&v166, "float2");
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v188, v166.__r_.__value_.__l.__data_, v166.__r_.__value_.__l.__size_);
  else
    v188 = v166;
  v189 = xmmword_241059930;
  std::string::basic_string[abi:ne180100]<0>(&v165, "float3");
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v190, v165.__r_.__value_.__l.__data_, v165.__r_.__value_.__l.__size_);
  else
    v190 = v165;
  v191 = xmmword_241059940;
  std::string::basic_string[abi:ne180100]<0>(&v164, "float4");
  if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v192, v164.__r_.__value_.__l.__data_, v164.__r_.__value_.__l.__size_);
  else
    v192 = v164;
  v193 = xmmword_241059950;
  std::string::basic_string[abi:ne180100]<0>(&v163, "packed_float");
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v194, v163.__r_.__value_.__l.__data_, v163.__r_.__value_.__l.__size_);
  else
    v194 = v163;
  v195 = xmmword_241059920;
  std::string::basic_string[abi:ne180100]<0>(&v162, "packed_float2");
  if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v196, v162.__r_.__value_.__l.__data_, v162.__r_.__value_.__l.__size_);
  else
    v196 = v162;
  v197 = xmmword_241059960;
  std::string::basic_string[abi:ne180100]<0>(&v161, "packed_float3");
  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v198, v161.__r_.__value_.__l.__data_, v161.__r_.__value_.__l.__size_);
  else
    v198 = v161;
  v199 = xmmword_241059970;
  std::string::basic_string[abi:ne180100]<0>(&v160, "packed_float4");
  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v200, v160.__r_.__value_.__l.__data_, v160.__r_.__value_.__l.__size_);
  else
    v200 = v160;
  v201 = xmmword_241059980;
  std::string::basic_string[abi:ne180100]<0>(&v159, "half");
  if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v202, v159.__r_.__value_.__l.__data_, v159.__r_.__value_.__l.__size_);
  else
    v202 = v159;
  v203 = xmmword_241059990;
  std::string::basic_string[abi:ne180100]<0>(&v158, "half2");
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v204, v158.__r_.__value_.__l.__data_, v158.__r_.__value_.__l.__size_);
  else
    v204 = v158;
  v205 = xmmword_2410599A0;
  std::string::basic_string[abi:ne180100]<0>(&v157, "half3");
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v206, v157.__r_.__value_.__l.__data_, v157.__r_.__value_.__l.__size_);
  else
    v206 = v157;
  v207 = xmmword_2410599B0;
  std::string::basic_string[abi:ne180100]<0>(&v156, "half4");
  if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v208, v156.__r_.__value_.__l.__data_, v156.__r_.__value_.__l.__size_);
  else
    v208 = v156;
  v209 = xmmword_2410599C0;
  std::string::basic_string[abi:ne180100]<0>(&v155, "packed_half");
  if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v210, v155.__r_.__value_.__l.__data_, v155.__r_.__value_.__l.__size_);
  else
    v210 = v155;
  v211 = xmmword_241059990;
  std::string::basic_string[abi:ne180100]<0>(&v154, "packed_half2");
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v212, v154.__r_.__value_.__l.__data_, v154.__r_.__value_.__l.__size_);
  else
    v212 = v154;
  v213 = xmmword_2410599D0;
  std::string::basic_string[abi:ne180100]<0>(&v153, "packed_half3");
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v214, v153.__r_.__value_.__l.__data_, v153.__r_.__value_.__l.__size_);
  else
    v214 = v153;
  v215 = xmmword_2410599E0;
  std::string::basic_string[abi:ne180100]<0>(&v152, "packed_half4");
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v216, v152.__r_.__value_.__l.__data_, v152.__r_.__value_.__l.__size_);
  else
    v216 = v152;
  v217 = xmmword_2410599F0;
  std::string::basic_string[abi:ne180100]<0>(&v151, "bfloat");
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v218, v151.__r_.__value_.__l.__data_, v151.__r_.__value_.__l.__size_);
  else
    v218 = v151;
  v219 = xmmword_241059A00;
  std::string::basic_string[abi:ne180100]<0>(&v150, "bfloat2");
  if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v220, v150.__r_.__value_.__l.__data_, v150.__r_.__value_.__l.__size_);
  else
    v220 = v150;
  v221 = xmmword_241059A10;
  std::string::basic_string[abi:ne180100]<0>(&v149, "bfloat3");
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v222, v149.__r_.__value_.__l.__data_, v149.__r_.__value_.__l.__size_);
  else
    v222 = v149;
  v223 = xmmword_241059A20;
  std::string::basic_string[abi:ne180100]<0>(&v148, "bfloat4");
  if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v224, v148.__r_.__value_.__l.__data_, v148.__r_.__value_.__l.__size_);
  else
    v224 = v148;
  v225 = xmmword_241059A30;
  std::string::basic_string[abi:ne180100]<0>(&v147, "packed_bfloat");
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v226, v147.__r_.__value_.__l.__data_, v147.__r_.__value_.__l.__size_);
  else
    v226 = v147;
  v227 = xmmword_241059A00;
  std::string::basic_string[abi:ne180100]<0>(&v146, "packed_bfloat2");
  if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v228, v146.__r_.__value_.__l.__data_, v146.__r_.__value_.__l.__size_);
  else
    v228 = v146;
  v229 = xmmword_241059A40;
  std::string::basic_string[abi:ne180100]<0>(&v145, "packed_bfloat3");
  if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v230, v145.__r_.__value_.__l.__data_, v145.__r_.__value_.__l.__size_);
  else
    v230 = v145;
  v231 = xmmword_241059A50;
  std::string::basic_string[abi:ne180100]<0>(&v144, "packed_bfloat4");
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v232, v144.__r_.__value_.__l.__data_, v144.__r_.__value_.__l.__size_);
  else
    v232 = v144;
  v233 = xmmword_241059A60;
  std::string::basic_string[abi:ne180100]<0>(&v143, "int");
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v234, v143.__r_.__value_.__l.__data_, v143.__r_.__value_.__l.__size_);
  else
    v234 = v143;
  v235 = xmmword_241059A70;
  std::string::basic_string[abi:ne180100]<0>(&v142, "int2");
  if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v236, v142.__r_.__value_.__l.__data_, v142.__r_.__value_.__l.__size_);
  else
    v236 = v142;
  v237 = xmmword_241059A80;
  std::string::basic_string[abi:ne180100]<0>(&v141, "int3");
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v238, v141.__r_.__value_.__l.__data_, v141.__r_.__value_.__l.__size_);
  else
    v238 = v141;
  v239 = xmmword_241059A90;
  std::string::basic_string[abi:ne180100]<0>(&v140, "int4");
  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v240, v140.__r_.__value_.__l.__data_, v140.__r_.__value_.__l.__size_);
  else
    v240 = v140;
  v241 = xmmword_241059AA0;
  std::string::basic_string[abi:ne180100]<0>(&v139, "packed_int");
  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v242, v139.__r_.__value_.__l.__data_, v139.__r_.__value_.__l.__size_);
  else
    v242 = v139;
  v243 = xmmword_241059A70;
  std::string::basic_string[abi:ne180100]<0>(&v138, "packed_int2");
  if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v244, v138.__r_.__value_.__l.__data_, v138.__r_.__value_.__l.__size_);
  else
    v244 = v138;
  v245 = xmmword_241059AB0;
  std::string::basic_string[abi:ne180100]<0>(&v137, "packed_int3");
  if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v246, v137.__r_.__value_.__l.__data_, v137.__r_.__value_.__l.__size_);
  else
    v246 = v137;
  v247 = xmmword_241059AC0;
  std::string::basic_string[abi:ne180100]<0>(&v136, "packed_int4");
  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v248, v136.__r_.__value_.__l.__data_, v136.__r_.__value_.__l.__size_);
  else
    v248 = v136;
  v249 = xmmword_241059AD0;
  std::string::basic_string[abi:ne180100]<0>(&v135, "uint");
  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v250, v135.__r_.__value_.__l.__data_, v135.__r_.__value_.__l.__size_);
  else
    v250 = v135;
  v251 = xmmword_241059AE0;
  std::string::basic_string[abi:ne180100]<0>(&v134, "uint2");
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v252, v134.__r_.__value_.__l.__data_, v134.__r_.__value_.__l.__size_);
  else
    v252 = v134;
  v253 = xmmword_241059AF0;
  std::string::basic_string[abi:ne180100]<0>(&v133, "uint3");
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v254, v133.__r_.__value_.__l.__data_, v133.__r_.__value_.__l.__size_);
  else
    v254 = v133;
  v255 = xmmword_241059B00;
  std::string::basic_string[abi:ne180100]<0>(&v132, "uint4");
  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v256, v132.__r_.__value_.__l.__data_, v132.__r_.__value_.__l.__size_);
  else
    v256 = v132;
  v257 = xmmword_241059B10;
  std::string::basic_string[abi:ne180100]<0>(&v131, "packed_uint");
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v258, v131.__r_.__value_.__l.__data_, v131.__r_.__value_.__l.__size_);
  else
    v258 = v131;
  v259 = xmmword_241059AE0;
  std::string::basic_string[abi:ne180100]<0>(&v130, "packed_uint2");
  if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v260, v130.__r_.__value_.__l.__data_, v130.__r_.__value_.__l.__size_);
  else
    v260 = v130;
  v261 = xmmword_241059B20;
  std::string::basic_string[abi:ne180100]<0>(&v129, "packed_uint3");
  if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v262, v129.__r_.__value_.__l.__data_, v129.__r_.__value_.__l.__size_);
  else
    v262 = v129;
  v263 = xmmword_241059B30;
  std::string::basic_string[abi:ne180100]<0>(&v128, "packed_uint4");
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v264, v128.__r_.__value_.__l.__data_, v128.__r_.__value_.__l.__size_);
  else
    v264 = v128;
  v265 = xmmword_241059B40;
  std::string::basic_string[abi:ne180100]<0>(&v127, "short");
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v266, v127.__r_.__value_.__l.__data_, v127.__r_.__value_.__l.__size_);
  else
    v266 = v127;
  v267 = xmmword_241059B50;
  std::string::basic_string[abi:ne180100]<0>(&v126, "short2");
  if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v268, v126.__r_.__value_.__l.__data_, v126.__r_.__value_.__l.__size_);
  else
    v268 = v126;
  v269 = xmmword_241059B60;
  std::string::basic_string[abi:ne180100]<0>(&v125, "short3");
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v270, v125.__r_.__value_.__l.__data_, v125.__r_.__value_.__l.__size_);
  else
    v270 = v125;
  v271 = xmmword_241059B70;
  std::string::basic_string[abi:ne180100]<0>(&v124, "short4");
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v272, v124.__r_.__value_.__l.__data_, v124.__r_.__value_.__l.__size_);
  else
    v272 = v124;
  v273 = xmmword_241059B80;
  std::string::basic_string[abi:ne180100]<0>(&v123, "packed_short");
  if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v274, v123.__r_.__value_.__l.__data_, v123.__r_.__value_.__l.__size_);
  else
    v274 = v123;
  v275 = xmmword_241059B50;
  std::string::basic_string[abi:ne180100]<0>(&v122, "packed_short2");
  if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v276, v122.__r_.__value_.__l.__data_, v122.__r_.__value_.__l.__size_);
  else
    v276 = v122;
  v277 = xmmword_241059B90;
  std::string::basic_string[abi:ne180100]<0>(&v121, "packed_short3");
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v278, v121.__r_.__value_.__l.__data_, v121.__r_.__value_.__l.__size_);
  else
    v278 = v121;
  v279 = xmmword_241059BA0;
  std::string::basic_string[abi:ne180100]<0>(&v120, "packed_short4");
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v280, v120.__r_.__value_.__l.__data_, v120.__r_.__value_.__l.__size_);
  else
    v280 = v120;
  v281 = xmmword_241059BB0;
  std::string::basic_string[abi:ne180100]<0>(&v119, "ushort");
  if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v282, v119.__r_.__value_.__l.__data_, v119.__r_.__value_.__l.__size_);
  else
    v282 = v119;
  v283 = xmmword_241059BC0;
  std::string::basic_string[abi:ne180100]<0>(&v118, "ushort2");
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v284, v118.__r_.__value_.__l.__data_, v118.__r_.__value_.__l.__size_);
  else
    v284 = v118;
  v285 = xmmword_241059BD0;
  std::string::basic_string[abi:ne180100]<0>(&v117, "ushort3");
  if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v286, v117.__r_.__value_.__l.__data_, v117.__r_.__value_.__l.__size_);
  else
    v286 = v117;
  v287 = xmmword_241059BE0;
  std::string::basic_string[abi:ne180100]<0>(&v116, "ushort4");
  if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v288, v116.__r_.__value_.__l.__data_, v116.__r_.__value_.__l.__size_);
  else
    v288 = v116;
  v289 = xmmword_241059BF0;
  std::string::basic_string[abi:ne180100]<0>(&v115, "packed_ushort");
  if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v290, v115.__r_.__value_.__l.__data_, v115.__r_.__value_.__l.__size_);
  else
    v290 = v115;
  v291 = xmmword_241059BC0;
  std::string::basic_string[abi:ne180100]<0>(&v114, "packed_ushort2");
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v292, v114.__r_.__value_.__l.__data_, v114.__r_.__value_.__l.__size_);
  else
    v292 = v114;
  v293 = xmmword_241059C00;
  std::string::basic_string[abi:ne180100]<0>(&v113, "packed_ushort3");
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v294, v113.__r_.__value_.__l.__data_, v113.__r_.__value_.__l.__size_);
  else
    v294 = v113;
  v295 = xmmword_241059C10;
  std::string::basic_string[abi:ne180100]<0>(&v112, "packed_ushort4");
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v296, v112.__r_.__value_.__l.__data_, v112.__r_.__value_.__l.__size_);
  else
    v296 = v112;
  v297 = xmmword_241059C20;
  std::string::basic_string[abi:ne180100]<0>(&v111, "char");
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v298, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
  else
    v298 = v111;
  v299 = xmmword_241059C30;
  std::string::basic_string[abi:ne180100]<0>(&v110, "char2");
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v300, v110.__r_.__value_.__l.__data_, v110.__r_.__value_.__l.__size_);
  else
    v300 = v110;
  v301 = xmmword_241059C40;
  std::string::basic_string[abi:ne180100]<0>(&v109, "char3");
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v302, v109.__r_.__value_.__l.__data_, v109.__r_.__value_.__l.__size_);
  else
    v302 = v109;
  v303 = xmmword_241059C50;
  std::string::basic_string[abi:ne180100]<0>(&v108, "char4");
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v304, v108.__r_.__value_.__l.__data_, v108.__r_.__value_.__l.__size_);
  else
    v304 = v108;
  v305 = xmmword_241059C60;
  std::string::basic_string[abi:ne180100]<0>(&v107, "packed_char");
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v306, v107.__r_.__value_.__l.__data_, v107.__r_.__value_.__l.__size_);
  else
    v306 = v107;
  v307 = xmmword_241059C30;
  std::string::basic_string[abi:ne180100]<0>(&v106, "packed_char2");
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v308, v106.__r_.__value_.__l.__data_, v106.__r_.__value_.__l.__size_);
  else
    v308 = v106;
  v309 = xmmword_241059C70;
  std::string::basic_string[abi:ne180100]<0>(&v105, "packed_char3");
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v310, v105.__r_.__value_.__l.__data_, v105.__r_.__value_.__l.__size_);
  else
    v310 = v105;
  v311 = xmmword_241059C80;
  std::string::basic_string[abi:ne180100]<0>(&v104, "packed_char4");
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v312, v104.__r_.__value_.__l.__data_, v104.__r_.__value_.__l.__size_);
  else
    v312 = v104;
  v313 = xmmword_241059C90;
  std::string::basic_string[abi:ne180100]<0>(&v103, "uchar");
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v314, v103.__r_.__value_.__l.__data_, v103.__r_.__value_.__l.__size_);
  else
    v314 = v103;
  v315 = xmmword_241059CA0;
  std::string::basic_string[abi:ne180100]<0>(&v102, "uchar2");
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v316, v102.__r_.__value_.__l.__data_, v102.__r_.__value_.__l.__size_);
  else
    v316 = v102;
  v317 = xmmword_241059CB0;
  std::string::basic_string[abi:ne180100]<0>(&v101, "uchar3");
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v318, v101.__r_.__value_.__l.__data_, v101.__r_.__value_.__l.__size_);
  else
    v318 = v101;
  v319 = xmmword_241059CC0;
  std::string::basic_string[abi:ne180100]<0>(&v100, "uchar4");
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v320, v100.__r_.__value_.__l.__data_, v100.__r_.__value_.__l.__size_);
  else
    v320 = v100;
  v321 = xmmword_241059CD0;
  std::string::basic_string[abi:ne180100]<0>(&v99, "packed_uchar");
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v322, v99.__r_.__value_.__l.__data_, v99.__r_.__value_.__l.__size_);
  else
    v322 = v99;
  v323 = xmmword_241059CA0;
  std::string::basic_string[abi:ne180100]<0>(&v98, "packed_uchar2");
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v324, v98.__r_.__value_.__l.__data_, v98.__r_.__value_.__l.__size_);
  else
    v324 = v98;
  v325 = xmmword_241059CE0;
  std::string::basic_string[abi:ne180100]<0>(&v97, "packed_uchar3");
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v326, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  else
    v326 = v97;
  v327 = xmmword_241059CF0;
  std::string::basic_string[abi:ne180100]<0>(&v96, "packed_uchar4");
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v328, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  else
    v328 = v96;
  v329 = xmmword_241059D00;
  std::string::basic_string[abi:ne180100]<0>(&v95, "long");
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v330, v95.__r_.__value_.__l.__data_, v95.__r_.__value_.__l.__size_);
  else
    v330 = v95;
  v331 = xmmword_241059D10;
  std::string::basic_string[abi:ne180100]<0>(&v94, "long2");
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v332, v94.__r_.__value_.__l.__data_, v94.__r_.__value_.__l.__size_);
  else
    v332 = v94;
  v333 = xmmword_241059D20;
  std::string::basic_string[abi:ne180100]<0>(&v93, "long3");
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v334, v93.__r_.__value_.__l.__data_, v93.__r_.__value_.__l.__size_);
  else
    v334 = v93;
  v335 = xmmword_241059D30;
  std::string::basic_string[abi:ne180100]<0>(&v92, "long4");
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v336, v92.__r_.__value_.__l.__data_, v92.__r_.__value_.__l.__size_);
  else
    v336 = v92;
  v337 = xmmword_241059D40;
  std::string::basic_string[abi:ne180100]<0>(&v91, "packed_long");
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v338, v91.__r_.__value_.__l.__data_, v91.__r_.__value_.__l.__size_);
  else
    v338 = v91;
  v339 = xmmword_241059D10;
  std::string::basic_string[abi:ne180100]<0>(&v90, "packed_long2");
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v340, v90.__r_.__value_.__l.__data_, v90.__r_.__value_.__l.__size_);
  else
    v340 = v90;
  v341 = xmmword_241059D50;
  std::string::basic_string[abi:ne180100]<0>(&v89, "packed_long3");
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v342, v89.__r_.__value_.__l.__data_, v89.__r_.__value_.__l.__size_);
  else
    v342 = v89;
  v343 = xmmword_241059D60;
  std::string::basic_string[abi:ne180100]<0>(&v88, "packed_long4");
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v344, v88.__r_.__value_.__l.__data_, v88.__r_.__value_.__l.__size_);
  else
    v344 = v88;
  v345 = xmmword_241059D70;
  std::string::basic_string[abi:ne180100]<0>(&v87, "ulong");
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v346, v87.__r_.__value_.__l.__data_, v87.__r_.__value_.__l.__size_);
  else
    v346 = v87;
  v347 = xmmword_241059D80;
  std::string::basic_string[abi:ne180100]<0>(&v86, "ulong2");
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v348, v86.__r_.__value_.__l.__data_, v86.__r_.__value_.__l.__size_);
  else
    v348 = v86;
  v349 = xmmword_241059D90;
  std::string::basic_string[abi:ne180100]<0>(&v85, "ulong3");
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v350, v85.__r_.__value_.__l.__data_, v85.__r_.__value_.__l.__size_);
  else
    v350 = v85;
  v351 = xmmword_241059DA0;
  std::string::basic_string[abi:ne180100]<0>(&v84, "ulong4");
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v352, v84.__r_.__value_.__l.__data_, v84.__r_.__value_.__l.__size_);
  else
    v352 = v84;
  v353 = xmmword_241059DB0;
  std::string::basic_string[abi:ne180100]<0>(&v83, "packed_ulong");
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v354, v83.__r_.__value_.__l.__data_, v83.__r_.__value_.__l.__size_);
  else
    v354 = v83;
  v355 = xmmword_241059D80;
  std::string::basic_string[abi:ne180100]<0>(&v82, "packed_ulong2");
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v356, v82.__r_.__value_.__l.__data_, v82.__r_.__value_.__l.__size_);
  else
    v356 = v82;
  v357 = xmmword_241059DC0;
  std::string::basic_string[abi:ne180100]<0>(&v81, "packed_ulong3");
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v358, v81.__r_.__value_.__l.__data_, v81.__r_.__value_.__l.__size_);
  else
    v358 = v81;
  v359 = xmmword_241059DD0;
  std::string::basic_string[abi:ne180100]<0>(&v80, "packed_ulong4");
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v360, v80.__r_.__value_.__l.__data_, v80.__r_.__value_.__l.__size_);
  else
    v360 = v80;
  v361 = xmmword_241059DE0;
  std::string::basic_string[abi:ne180100]<0>(&v79, "double");
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v362, v79.__r_.__value_.__l.__data_, v79.__r_.__value_.__l.__size_);
  else
    v362 = v79;
  v363 = xmmword_241059DF0;
  std::string::basic_string[abi:ne180100]<0>(&v78, "double2");
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v364, v78.__r_.__value_.__l.__data_, v78.__r_.__value_.__l.__size_);
  else
    v364 = v78;
  v365 = xmmword_241059E00;
  std::string::basic_string[abi:ne180100]<0>(&v77, "double3");
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v366, v77.__r_.__value_.__l.__data_, v77.__r_.__value_.__l.__size_);
  else
    v366 = v77;
  v367 = xmmword_241059E10;
  std::string::basic_string[abi:ne180100]<0>(&v76, "double4");
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v368, v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_);
  else
    v368 = v76;
  v369 = xmmword_241059E20;
  std::string::basic_string[abi:ne180100]<0>(&v75, "packed_double");
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v370, v75.__r_.__value_.__l.__data_, v75.__r_.__value_.__l.__size_);
  else
    v370 = v75;
  v371 = xmmword_241059DF0;
  std::string::basic_string[abi:ne180100]<0>(&v74, "packed_double2");
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v372, v74.__r_.__value_.__l.__data_, v74.__r_.__value_.__l.__size_);
  else
    v372 = v74;
  v373 = xmmword_241059E30;
  std::string::basic_string[abi:ne180100]<0>(&v73, "packed_double3");
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v374, v73.__r_.__value_.__l.__data_, v73.__r_.__value_.__l.__size_);
  else
    v374 = v73;
  v375 = xmmword_241059E40;
  std::string::basic_string[abi:ne180100]<0>(&v72, "packed_double4");
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v376, v72.__r_.__value_.__l.__data_, v72.__r_.__value_.__l.__size_);
  else
    v376 = v72;
  v377 = xmmword_241059E50;
  std::string::basic_string[abi:ne180100]<0>(&v71, "float8");
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v378, v71.__r_.__value_.__l.__data_, v71.__r_.__value_.__l.__size_);
  else
    v378 = v71;
  v379 = xmmword_241059E60;
  std::string::basic_string[abi:ne180100]<0>(&v70, "float16");
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v380, v70.__r_.__value_.__l.__data_, v70.__r_.__value_.__l.__size_);
  else
    v380 = v70;
  v381 = xmmword_241059E70;
  std::string::basic_string[abi:ne180100]<0>(&v69, "half8");
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v382, v69.__r_.__value_.__l.__data_, v69.__r_.__value_.__l.__size_);
  else
    v382 = v69;
  v383 = xmmword_241059E80;
  std::string::basic_string[abi:ne180100]<0>(&v68, "half16");
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v384, v68.__r_.__value_.__l.__data_, v68.__r_.__value_.__l.__size_);
  else
    v384 = v68;
  v385 = xmmword_241059E90;
  std::string::basic_string[abi:ne180100]<0>(&v67, "bfloat8");
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v386, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
  else
    v386 = v67;
  v387 = xmmword_241059EA0;
  std::string::basic_string[abi:ne180100]<0>(&v66, "bfloat16");
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v388, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
  else
    v388 = v66;
  v389 = xmmword_241059EB0;
  std::string::basic_string[abi:ne180100]<0>(&v65, "int8");
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v390, v65.__r_.__value_.__l.__data_, v65.__r_.__value_.__l.__size_);
  else
    v390 = v65;
  v391 = xmmword_241059EC0;
  std::string::basic_string[abi:ne180100]<0>(&v64, "int16");
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v392, v64.__r_.__value_.__l.__data_, v64.__r_.__value_.__l.__size_);
  else
    v392 = v64;
  v393 = xmmword_241059ED0;
  std::string::basic_string[abi:ne180100]<0>(&v63, "uint8");
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v394, v63.__r_.__value_.__l.__data_, v63.__r_.__value_.__l.__size_);
  else
    v394 = v63;
  v395 = xmmword_241059EE0;
  std::string::basic_string[abi:ne180100]<0>(&v62, "uint16");
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v396, v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
  else
    v396 = v62;
  v397 = xmmword_241059EF0;
  std::string::basic_string[abi:ne180100]<0>(&v61, "short8");
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v398, v61.__r_.__value_.__l.__data_, v61.__r_.__value_.__l.__size_);
  else
    v398 = v61;
  v399 = xmmword_241059F00;
  std::string::basic_string[abi:ne180100]<0>(&v60, "short16");
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v400, v60.__r_.__value_.__l.__data_, v60.__r_.__value_.__l.__size_);
  else
    v400 = v60;
  v401 = xmmword_241059F10;
  std::string::basic_string[abi:ne180100]<0>(&v59, "ushort8");
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v402, v59.__r_.__value_.__l.__data_, v59.__r_.__value_.__l.__size_);
  else
    v402 = v59;
  v403 = xmmword_241059F20;
  std::string::basic_string[abi:ne180100]<0>(&v58, "ushort16");
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v404, v58.__r_.__value_.__l.__data_, v58.__r_.__value_.__l.__size_);
  else
    v404 = v58;
  v405 = xmmword_241059F30;
  std::string::basic_string[abi:ne180100]<0>(&v57, "char8");
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v406, v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
  else
    v406 = v57;
  v407 = xmmword_241059F40;
  std::string::basic_string[abi:ne180100]<0>(&v56, "char16");
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v408, v56.__r_.__value_.__l.__data_, v56.__r_.__value_.__l.__size_);
  else
    v408 = v56;
  v409 = xmmword_241059F50;
  std::string::basic_string[abi:ne180100]<0>(&v55, "uchar8");
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v410, v55.__r_.__value_.__l.__data_, v55.__r_.__value_.__l.__size_);
  else
    v410 = v55;
  v411 = xmmword_241059F60;
  std::string::basic_string[abi:ne180100]<0>(&v54, "uchar16");
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v412, v54.__r_.__value_.__l.__data_, v54.__r_.__value_.__l.__size_);
  else
    v412 = v54;
  v413 = xmmword_241059F70;
  std::string::basic_string[abi:ne180100]<0>(&v53, "long8");
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v414, v53.__r_.__value_.__l.__data_, v53.__r_.__value_.__l.__size_);
  else
    v414 = v53;
  v415 = xmmword_241059F80;
  std::string::basic_string[abi:ne180100]<0>(&v52, "long16");
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v416, v52.__r_.__value_.__l.__data_, v52.__r_.__value_.__l.__size_);
  else
    v416 = v52;
  v417 = xmmword_241059F90;
  std::string::basic_string[abi:ne180100]<0>(&v51, "ulong8");
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v418, v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
  else
    v418 = v51;
  v419 = xmmword_241059FA0;
  std::string::basic_string[abi:ne180100]<0>(&v50, "ulong16");
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v420, v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_);
  else
    v420 = v50;
  v421 = xmmword_241059FB0;
  std::string::basic_string[abi:ne180100]<0>(&v49, "double8");
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v422, v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
  else
    v422 = v49;
  v423 = xmmword_241059FC0;
  std::string::basic_string[abi:ne180100]<0>(&v48, "double16");
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v424, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
  else
    v424 = v48;
  v425 = xmmword_241059FD0;
  std::string::basic_string[abi:ne180100]<0>(&v47, "BOOL8");
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v426, v47.__r_.__value_.__l.__data_, v47.__r_.__value_.__l.__size_);
  else
    v426 = v47;
  v427 = xmmword_241059FE0;
  std::string::basic_string[abi:ne180100]<0>(&v46, "BOOL16");
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v428, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
  else
    v428 = v46;
  v429 = xmmword_241059FF0;
  std::string::basic_string[abi:ne180100]<0>(&v45, "unknown");
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v430, v45.__r_.__value_.__l.__data_, v45.__r_.__value_.__l.__size_);
  else
    v430 = v45;
  v432 = 0;
  v431 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v44, "BOOL");
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v433, v44.__r_.__value_.__l.__data_, v44.__r_.__value_.__l.__size_);
  else
    v433 = v44;
  v434 = xmmword_24105A000;
  std::string::basic_string[abi:ne180100]<0>(&v43, "BOOL2");
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v435, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
  else
    v435 = v43;
  v436 = xmmword_24105A010;
  std::string::basic_string[abi:ne180100]<0>(&v42, "BOOL3");
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v437, v42.__r_.__value_.__l.__data_, v42.__r_.__value_.__l.__size_);
  else
    v437 = v42;
  v438 = xmmword_24105A020;
  std::string::basic_string[abi:ne180100]<0>(&v41, "BOOL4");
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v439, v41.__r_.__value_.__l.__data_, v41.__r_.__value_.__l.__size_);
  else
    v439 = v41;
  v440 = xmmword_24105A030;
  std::string::basic_string[abi:ne180100]<0>(&v40, "packed_BOOL");
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v441, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
  else
    v441 = v40;
  v442 = xmmword_24105A000;
  std::string::basic_string[abi:ne180100]<0>(&v39, "packed_BOOL2");
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v443, v39.__r_.__value_.__l.__data_, v39.__r_.__value_.__l.__size_);
  else
    v443 = v39;
  v444 = xmmword_24105A040;
  std::string::basic_string[abi:ne180100]<0>(&v38, "packed_BOOL3");
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v445, v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
  else
    v445 = v38;
  v446 = xmmword_24105A050;
  std::string::basic_string[abi:ne180100]<0>(&v37, "packed_BOOL4");
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v447, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
  else
    v447 = v37;
  v448 = xmmword_24105A060;
  std::string::basic_string[abi:ne180100]<0>(&v36, "float2x2");
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v449, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
  else
    v449 = v36;
  v450 = xmmword_24105A070;
  std::string::basic_string[abi:ne180100]<0>(&v35, "float2x3");
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v451, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
  else
    v451 = v35;
  v452 = xmmword_24105A080;
  std::string::basic_string[abi:ne180100]<0>(&v34, "float2x4");
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v453, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
  else
    v453 = v34;
  v454 = xmmword_24105A090;
  std::string::basic_string[abi:ne180100]<0>(&v33, "float3x2");
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v455, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
  else
    v455 = v33;
  v456 = xmmword_24105A0A0;
  std::string::basic_string[abi:ne180100]<0>(&v32, "float3x3");
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v457, v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
  else
    v457 = v32;
  v458 = xmmword_24105A0B0;
  std::string::basic_string[abi:ne180100]<0>(&v31, "float3x4");
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v459, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
  else
    v459 = v31;
  v460 = xmmword_24105A0C0;
  std::string::basic_string[abi:ne180100]<0>(&v30, "float4x2");
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v461, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
  else
    v461 = v30;
  v462 = xmmword_24105A0D0;
  std::string::basic_string[abi:ne180100]<0>(&v29, "float4x3");
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v463, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
  else
    v463 = v29;
  v464 = xmmword_24105A0E0;
  std::string::basic_string[abi:ne180100]<0>(&v28, "float4x4");
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v465, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
  else
    v465 = v28;
  v466 = xmmword_24105A0F0;
  std::string::basic_string[abi:ne180100]<0>(&v27, "half2x2");
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v467, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
  else
    v467 = v27;
  v468 = xmmword_24105A100;
  std::string::basic_string[abi:ne180100]<0>(&v26, "half2x3");
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v469, v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
  else
    v469 = v26;
  v470 = xmmword_24105A110;
  std::string::basic_string[abi:ne180100]<0>(&v25, "half2x4");
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v471, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
  else
    v471 = v25;
  v472 = xmmword_24105A120;
  std::string::basic_string[abi:ne180100]<0>(&v24, "half3x2");
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v473, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
  else
    v473 = v24;
  v474 = xmmword_24105A130;
  std::string::basic_string[abi:ne180100]<0>(&v23, "half3x3");
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v475, v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
  else
    v475 = v23;
  v476 = xmmword_24105A140;
  std::string::basic_string[abi:ne180100]<0>(&v22, "half3x4");
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v477, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
  else
    v477 = v22;
  v478 = xmmword_24105A150;
  std::string::basic_string[abi:ne180100]<0>(&v21, "half4x2");
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v479, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
  else
    v479 = v21;
  v480 = xmmword_24105A160;
  std::string::basic_string[abi:ne180100]<0>(&v20, "half4x3");
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v481, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
  else
    v481 = v20;
  v482 = xmmword_24105A170;
  std::string::basic_string[abi:ne180100]<0>(&v19, "half4x4");
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v483, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
  else
    v483 = v19;
  v484 = xmmword_24105A180;
  std::string::basic_string[abi:ne180100]<0>(&v18, "bfloat2x2");
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v485, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
  else
    v485 = v18;
  v486 = xmmword_24105A190;
  std::string::basic_string[abi:ne180100]<0>(&v17, "bfloat2x3");
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v487, v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
  else
    v487 = v17;
  v488 = xmmword_24105A1A0;
  std::string::basic_string[abi:ne180100]<0>(&v16, "bfloat2x4");
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v489, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
  else
    v489 = v16;
  v490 = xmmword_24105A1B0;
  std::string::basic_string[abi:ne180100]<0>(&v15, "bfloat3x2");
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v491, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
  else
    v491 = v15;
  v492 = xmmword_24105A1C0;
  std::string::basic_string[abi:ne180100]<0>(&v14, "bfloat3x3");
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v493, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
  else
    v493 = v14;
  v494 = xmmword_24105A1D0;
  std::string::basic_string[abi:ne180100]<0>(&v13, "bfloat3x4");
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v495, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
  else
    v495 = v13;
  v496 = xmmword_24105A1E0;
  std::string::basic_string[abi:ne180100]<0>(&v12, "bfloat4x2");
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v497, v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
  else
    v497 = v12;
  v498 = xmmword_24105A1F0;
  std::string::basic_string[abi:ne180100]<0>(&v11, "bfloat4x3");
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v499, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
  else
    v499 = v11;
  v500 = xmmword_24105A200;
  std::string::basic_string[abi:ne180100]<0>(&v10, "bfloat4x4");
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v501, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
  else
    v501 = v10;
  v502 = xmmword_24105A210;
  std::string::basic_string[abi:ne180100]<0>(&v9, "void");
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v503, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
  else
    v503 = v9;
  v505 = 0;
  v504 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v8, "indirect_command_buffer");
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v506, v8.__r_.__value_.__l.__data_, v8.__r_.__value_.__l.__size_);
  else
    v506 = v8;
  v507 = xmmword_24105A220;
  std::string::basic_string[abi:ne180100]<0>(&__s, "visible_function_table");
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v508, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v508 = __s;
  v509 = xmmword_24105A230;
  std::string::basic_string[abi:ne180100]<0>(&v6, "intersection_function_table");
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v510, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  else
    v510 = v6;
  v511 = xmmword_24105A240;
  std::string::basic_string[abi:ne180100]<0>(&v5, "primitive_acceleration_structure");
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v512, v5.__r_.__value_.__l.__data_, v5.__r_.__value_.__l.__size_);
  else
    v512 = v5;
  v513 = xmmword_24105A250;
  std::string::basic_string[abi:ne180100]<0>(&v4, "instance_acceleration_structure");
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v514, v4.__r_.__value_.__l.__data_, v4.__r_.__value_.__l.__size_);
  else
    v514 = v4;
  v515 = xmmword_24105A260;
  std::string::basic_string[abi:ne180100]<0>(&v3, "mesh_grid_properties");
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v516, v3.__r_.__value_.__l.__data_, v3.__r_.__value_.__l.__size_);
  else
    v516 = v3;
  v517 = xmmword_24105A270;
  std::string::basic_string[abi:ne180100]<0>(&__p, "mesh");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v518, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v518 = __p;
  v519 = xmmword_24105A280;
  v1 = 0;
  bufferTypeMap(void)::nonGlobalBufferTypeMap = std::map<std::string,TokenData>::map[abi:ne180100](v0, (const void **)&v174.__r_.__value_.__l.__data_, 172);
  do
  {
    if (SHIBYTE(v518.__r_.__value_.__r.__words[v1 + 2]) < 0)
      operator delete(*(void **)((char *)&v518.__r_.__value_.__l.__data_ + v1 * 8));
    v1 -= 5;
  }
  while (v1 != -860);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v65.__r_.__value_.__l.__data_);
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v66.__r_.__value_.__l.__data_);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v68.__r_.__value_.__l.__data_);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v69.__r_.__value_.__l.__data_);
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v70.__r_.__value_.__l.__data_);
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v71.__r_.__value_.__l.__data_);
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v72.__r_.__value_.__l.__data_);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v74.__r_.__value_.__l.__data_);
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v75.__r_.__value_.__l.__data_);
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v76.__r_.__value_.__l.__data_);
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v77.__r_.__value_.__l.__data_);
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v78.__r_.__value_.__l.__data_);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v80.__r_.__value_.__l.__data_);
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v81.__r_.__value_.__l.__data_);
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v82.__r_.__value_.__l.__data_);
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v83.__r_.__value_.__l.__data_);
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v84.__r_.__value_.__l.__data_);
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v85.__r_.__value_.__l.__data_);
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v86.__r_.__value_.__l.__data_);
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v87.__r_.__value_.__l.__data_);
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v88.__r_.__value_.__l.__data_);
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v89.__r_.__value_.__l.__data_);
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v90.__r_.__value_.__l.__data_);
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v91.__r_.__value_.__l.__data_);
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v92.__r_.__value_.__l.__data_);
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v93.__r_.__value_.__l.__data_);
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v94.__r_.__value_.__l.__data_);
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v95.__r_.__value_.__l.__data_);
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v96.__r_.__value_.__l.__data_);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v97.__r_.__value_.__l.__data_);
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v98.__r_.__value_.__l.__data_);
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v99.__r_.__value_.__l.__data_);
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v100.__r_.__value_.__l.__data_);
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v101.__r_.__value_.__l.__data_);
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v102.__r_.__value_.__l.__data_);
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v103.__r_.__value_.__l.__data_);
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v104.__r_.__value_.__l.__data_);
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v105.__r_.__value_.__l.__data_);
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v106.__r_.__value_.__l.__data_);
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v107.__r_.__value_.__l.__data_);
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v108.__r_.__value_.__l.__data_);
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v109.__r_.__value_.__l.__data_);
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v111.__r_.__value_.__l.__data_);
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v112.__r_.__value_.__l.__data_);
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v113.__r_.__value_.__l.__data_);
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v114.__r_.__value_.__l.__data_);
  if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v115.__r_.__value_.__l.__data_);
  if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v116.__r_.__value_.__l.__data_);
  if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v117.__r_.__value_.__l.__data_);
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v118.__r_.__value_.__l.__data_);
  if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v119.__r_.__value_.__l.__data_);
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v120.__r_.__value_.__l.__data_);
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v121.__r_.__value_.__l.__data_);
  if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v122.__r_.__value_.__l.__data_);
  if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v123.__r_.__value_.__l.__data_);
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v124.__r_.__value_.__l.__data_);
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v125.__r_.__value_.__l.__data_);
  if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v126.__r_.__value_.__l.__data_);
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v127.__r_.__value_.__l.__data_);
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v128.__r_.__value_.__l.__data_);
  if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v129.__r_.__value_.__l.__data_);
  if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v130.__r_.__value_.__l.__data_);
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v131.__r_.__value_.__l.__data_);
  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v132.__r_.__value_.__l.__data_);
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v133.__r_.__value_.__l.__data_);
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v134.__r_.__value_.__l.__data_);
  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v135.__r_.__value_.__l.__data_);
  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v136.__r_.__value_.__l.__data_);
  if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v137.__r_.__value_.__l.__data_);
  if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v138.__r_.__value_.__l.__data_);
  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v139.__r_.__value_.__l.__data_);
  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v140.__r_.__value_.__l.__data_);
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v141.__r_.__value_.__l.__data_);
  if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v142.__r_.__value_.__l.__data_);
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v143.__r_.__value_.__l.__data_);
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v144.__r_.__value_.__l.__data_);
  if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v145.__r_.__value_.__l.__data_);
  if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v146.__r_.__value_.__l.__data_);
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v147.__r_.__value_.__l.__data_);
  if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v148.__r_.__value_.__l.__data_);
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v149.__r_.__value_.__l.__data_);
  if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v150.__r_.__value_.__l.__data_);
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v151.__r_.__value_.__l.__data_);
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v152.__r_.__value_.__l.__data_);
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v153.__r_.__value_.__l.__data_);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v154.__r_.__value_.__l.__data_);
  if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v155.__r_.__value_.__l.__data_);
  if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v156.__r_.__value_.__l.__data_);
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v157.__r_.__value_.__l.__data_);
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v158.__r_.__value_.__l.__data_);
  if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v159.__r_.__value_.__l.__data_);
  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v160.__r_.__value_.__l.__data_);
  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v161.__r_.__value_.__l.__data_);
  if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v162.__r_.__value_.__l.__data_);
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v163.__r_.__value_.__l.__data_);
  if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v164.__r_.__value_.__l.__data_);
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v165.__r_.__value_.__l.__data_);
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v166.__r_.__value_.__l.__data_);
  if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v167.__r_.__value_.__l.__data_);
  if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v168.__r_.__value_.__l.__data_);
  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v169.__r_.__value_.__l.__data_);
  if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v170.__r_.__value_.__l.__data_);
  if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v171.__r_.__value_.__l.__data_);
  if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v172.__r_.__value_.__l.__data_);
  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v173.__r_.__value_.__l.__data_);
}

void sub_240FB0D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,uint64_t a63)
{
  char a68;
  char a72;
  char a73;
  char a74;
  char a75;
  char a76;
  char a77;
  char a78;
  char a79;
  char a80;
  char a81;
  void **v81;
  unint64_t *v82;
  uint64_t v83;
  void **v84;
  void **v85;
  void **v86;
  void **v87;

  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  if (a38 < 0)
    operator delete(a33);
  if (a44 < 0)
    operator delete(a39);
  if (a50 < 0)
    operator delete(a45);
  if (a56 < 0)
    operator delete(v81[3]);
  if (a62 < 0)
    operator delete(v81[6]);
  if (a68 < 0)
    operator delete(v81[9]);
  if (a72 < 0)
    operator delete(v81[12]);
  if (a73 < 0)
    operator delete(v81[15]);
  if (a74 < 0)
    operator delete(v81[18]);
  if (a75 < 0)
    operator delete(v81[21]);
  if (a76 < 0)
    operator delete(v81[24]);
  if (a77 < 0)
    operator delete(v81[27]);
  if (a78 < 0)
    operator delete(v81[30]);
  if (a79 < 0)
    operator delete(*v87);
  if (a80 < 0)
    operator delete(v87[3]);
  if (a81 < 0)
    operator delete(v87[6]);
  if (SLOBYTE(STACK[0x20F]) < 0)
    operator delete(v87[9]);
  if (SLOBYTE(STACK[0x227]) < 0)
    operator delete(v87[12]);
  if (SLOBYTE(STACK[0x23F]) < 0)
    operator delete(v87[15]);
  if (SLOBYTE(STACK[0x257]) < 0)
    operator delete(v87[18]);
  if (SLOBYTE(STACK[0x26F]) < 0)
    operator delete(v87[21]);
  if (SLOBYTE(STACK[0x287]) < 0)
    operator delete(v87[24]);
  if (SLOBYTE(STACK[0x29F]) < 0)
    operator delete(v87[27]);
  if (SLOBYTE(STACK[0x2B7]) < 0)
    operator delete(v87[30]);
  if (SLOBYTE(STACK[0x2CF]) < 0)
    operator delete(*v86);
  if (SLOBYTE(STACK[0x2E7]) < 0)
    operator delete(v86[3]);
  if (SLOBYTE(STACK[0x2FF]) < 0)
    operator delete(v86[6]);
  if (SLOBYTE(STACK[0x317]) < 0)
    operator delete(v86[9]);
  if (SLOBYTE(STACK[0x32F]) < 0)
    operator delete(v86[12]);
  if (SLOBYTE(STACK[0x347]) < 0)
    operator delete(v86[15]);
  if (SLOBYTE(STACK[0x35F]) < 0)
    operator delete(v86[18]);
  if (SLOBYTE(STACK[0x377]) < 0)
    operator delete(v86[21]);
  if (SLOBYTE(STACK[0x38F]) < 0)
    operator delete(v86[24]);
  if (SLOBYTE(STACK[0x3A7]) < 0)
    operator delete(v86[27]);
  if (SLOBYTE(STACK[0x3BF]) < 0)
    operator delete(v86[30]);
  if (SLOBYTE(STACK[0x3D7]) < 0)
    operator delete(*v84);
  if (SLOBYTE(STACK[0x3EF]) < 0)
    operator delete(v84[3]);
  if (SLOBYTE(STACK[0x407]) < 0)
    operator delete(v84[6]);
  if (SLOBYTE(STACK[0x41F]) < 0)
    operator delete(v84[9]);
  if (SLOBYTE(STACK[0x437]) < 0)
    operator delete(v84[12]);
  if (SLOBYTE(STACK[0x44F]) < 0)
    operator delete(v84[15]);
  if (SLOBYTE(STACK[0x467]) < 0)
    operator delete(v84[18]);
  if (SLOBYTE(STACK[0x47F]) < 0)
    operator delete(v84[21]);
  if (SLOBYTE(STACK[0x497]) < 0)
    operator delete(v84[24]);
  if (SLOBYTE(STACK[0x4AF]) < 0)
    operator delete(v84[27]);
  if (SLOBYTE(STACK[0x4C7]) < 0)
    operator delete(v84[30]);
  if (SLOBYTE(STACK[0x4DF]) < 0)
    operator delete(*v85);
  if (SLOBYTE(STACK[0x4F7]) < 0)
    operator delete(v85[3]);
  if (SLOBYTE(STACK[0x50F]) < 0)
    operator delete(v85[6]);
  if (SLOBYTE(STACK[0x527]) < 0)
    operator delete(v85[9]);
  if (SLOBYTE(STACK[0x53F]) < 0)
    operator delete(v85[12]);
  if (SLOBYTE(STACK[0x557]) < 0)
    operator delete(v85[15]);
  if (SLOBYTE(STACK[0x56F]) < 0)
    operator delete(v85[18]);
  if (SLOBYTE(STACK[0x587]) < 0)
    operator delete(v85[21]);
  if (SLOBYTE(STACK[0x59F]) < 0)
    operator delete(v85[24]);
  if (SLOBYTE(STACK[0x5B7]) < 0)
    operator delete(v85[27]);
  if (SLOBYTE(STACK[0x5CF]) < 0)
    operator delete(v85[30]);
  if (SLOBYTE(STACK[0x5E7]) < 0)
    operator delete((void *)STACK[0x5D0]);
  if (SLOBYTE(STACK[0x5FF]) < 0)
    operator delete((void *)STACK[0x5E8]);
  if (SLOBYTE(STACK[0x617]) < 0)
    operator delete((void *)STACK[0x600]);
  if (SLOBYTE(STACK[0x62F]) < 0)
    operator delete((void *)STACK[0x618]);
  if (SLOBYTE(STACK[0x647]) < 0)
    operator delete((void *)STACK[0x630]);
  if (SLOBYTE(STACK[0x65F]) < 0)
    operator delete((void *)STACK[0x648]);
  if (SLOBYTE(STACK[0x677]) < 0)
    operator delete((void *)STACK[0x660]);
  if (SLOBYTE(STACK[0x68F]) < 0)
    operator delete((void *)STACK[0x678]);
  if (SLOBYTE(STACK[0x6A7]) < 0)
    operator delete((void *)STACK[0x690]);
  if (SLOBYTE(STACK[0x6BF]) < 0)
    operator delete((void *)STACK[0x6A8]);
  if (SLOBYTE(STACK[0x6D7]) < 0)
    operator delete((void *)STACK[0x6C0]);
  if (SLOBYTE(STACK[0x6EF]) < 0)
    operator delete((void *)STACK[0x6D8]);
  if (SLOBYTE(STACK[0x707]) < 0)
    operator delete((void *)STACK[0x6F0]);
  if (SLOBYTE(STACK[0x71F]) < 0)
    operator delete((void *)STACK[0x708]);
  if (SLOBYTE(STACK[0x737]) < 0)
    operator delete((void *)STACK[0x720]);
  if (SLOBYTE(STACK[0x74F]) < 0)
    operator delete((void *)STACK[0x738]);
  if (SLOBYTE(STACK[0x767]) < 0)
    operator delete((void *)STACK[0x750]);
  if (SLOBYTE(STACK[0x77F]) < 0)
    operator delete((void *)STACK[0x768]);
  if (SLOBYTE(STACK[0x797]) < 0)
    operator delete((void *)STACK[0x780]);
  if (SLOBYTE(STACK[0x7AF]) < 0)
    operator delete((void *)STACK[0x798]);
  if (SLOBYTE(STACK[0x7C7]) < 0)
    operator delete((void *)STACK[0x7B0]);
  if (SLOBYTE(STACK[0x7DF]) < 0)
    operator delete((void *)STACK[0x7C8]);
  if (SLOBYTE(STACK[0x7F7]) < 0)
    operator delete((void *)STACK[0x7E0]);
  if (SLOBYTE(STACK[0x80F]) < 0)
    operator delete((void *)STACK[0x7F8]);
  if (SLOBYTE(STACK[0x827]) < 0)
    operator delete((void *)STACK[0x810]);
  if (SLOBYTE(STACK[0x83F]) < 0)
    operator delete((void *)STACK[0x828]);
  if (SLOBYTE(STACK[0x857]) < 0)
    operator delete((void *)STACK[0x840]);
  if (SLOBYTE(STACK[0x86F]) < 0)
    operator delete((void *)STACK[0x858]);
  if (SLOBYTE(STACK[0x887]) < 0)
    operator delete((void *)STACK[0x870]);
  if (SLOBYTE(STACK[0x89F]) < 0)
    operator delete((void *)STACK[0x888]);
  if (SLOBYTE(STACK[0x8B7]) < 0)
    operator delete((void *)STACK[0x8A0]);
  if (SLOBYTE(STACK[0x8CF]) < 0)
    operator delete((void *)STACK[0x8B8]);
  if (SLOBYTE(STACK[0x8E7]) < 0)
    operator delete((void *)STACK[0x8D0]);
  if (SLOBYTE(STACK[0x8FF]) < 0)
    operator delete((void *)STACK[0x8E8]);
  if (SLOBYTE(STACK[0x917]) < 0)
    operator delete((void *)STACK[0x900]);
  if (SLOBYTE(STACK[0x92F]) < 0)
    operator delete((void *)STACK[0x918]);
  if (SLOBYTE(STACK[0x947]) < 0)
    operator delete((void *)STACK[0x930]);
  if (SLOBYTE(STACK[0x95F]) < 0)
    operator delete((void *)STACK[0x948]);
  if (SLOBYTE(STACK[0x977]) < 0)
    operator delete((void *)STACK[0x960]);
  if (SLOBYTE(STACK[0x98F]) < 0)
    operator delete((void *)STACK[0x978]);
  if (SLOBYTE(STACK[0x9A7]) < 0)
    operator delete((void *)STACK[0x990]);
  if (SLOBYTE(STACK[0x9BF]) < 0)
    operator delete((void *)STACK[0x9A8]);
  if (SLOBYTE(STACK[0x9D7]) < 0)
    operator delete((void *)STACK[0x9C0]);
  if (SLOBYTE(STACK[0x9EF]) < 0)
    operator delete((void *)STACK[0x9D8]);
  if (SLOBYTE(STACK[0xA07]) < 0)
    operator delete((void *)STACK[0x9F0]);
  if (SLOBYTE(STACK[0xA1F]) < 0)
    operator delete((void *)STACK[0xA08]);
  if (SLOBYTE(STACK[0xA37]) < 0)
    operator delete((void *)STACK[0xA20]);
  if (SLOBYTE(STACK[0xA4F]) < 0)
    operator delete((void *)STACK[0xA38]);
  if (SLOBYTE(STACK[0xA67]) < 0)
    operator delete((void *)STACK[0xA50]);
  if (SLOBYTE(STACK[0xA7F]) < 0)
    operator delete((void *)STACK[0xA68]);
  if (SLOBYTE(STACK[0xA97]) < 0)
    operator delete((void *)STACK[0xA80]);
  if (SLOBYTE(STACK[0xAAF]) < 0)
    operator delete((void *)STACK[0xA98]);
  if (SLOBYTE(STACK[0xAC7]) < 0)
    operator delete((void *)STACK[0xAB0]);
  if (SLOBYTE(STACK[0xADF]) < 0)
    operator delete((void *)STACK[0xAC8]);
  if (SLOBYTE(STACK[0xAF7]) < 0)
    operator delete((void *)STACK[0xAE0]);
  if (SLOBYTE(STACK[0xB0F]) < 0)
    operator delete((void *)STACK[0xAF8]);
  if (SLOBYTE(STACK[0xB27]) < 0)
    operator delete((void *)STACK[0xB10]);
  if (SLOBYTE(STACK[0xB3F]) < 0)
    operator delete((void *)STACK[0xB28]);
  if (SLOBYTE(STACK[0xB57]) < 0)
    operator delete((void *)STACK[0xB40]);
  if (SLOBYTE(STACK[0xB6F]) < 0)
    operator delete((void *)STACK[0xB58]);
  if (SLOBYTE(STACK[0xB87]) < 0)
    operator delete((void *)STACK[0xB70]);
  if (SLOBYTE(STACK[0xB9F]) < 0)
    operator delete((void *)STACK[0xB88]);
  if (SLOBYTE(STACK[0xBB7]) < 0)
    operator delete((void *)STACK[0xBA0]);
  if (SLOBYTE(STACK[0xBCF]) < 0)
    operator delete((void *)STACK[0xBB8]);
  if (SLOBYTE(STACK[0xBE7]) < 0)
    operator delete((void *)STACK[0xBD0]);
  if (SLOBYTE(STACK[0xBFF]) < 0)
    operator delete((void *)STACK[0xBE8]);
  if (SLOBYTE(STACK[0xC17]) < 0)
    operator delete((void *)STACK[0xC00]);
  if (SLOBYTE(STACK[0xC2F]) < 0)
    operator delete((void *)STACK[0xC18]);
  if (SLOBYTE(STACK[0xC47]) < 0)
    operator delete((void *)STACK[0xC30]);
  if (SLOBYTE(STACK[0xC5F]) < 0)
    operator delete((void *)STACK[0xC48]);
  if (SLOBYTE(STACK[0xC77]) < 0)
    operator delete((void *)STACK[0xC60]);
  if (SLOBYTE(STACK[0xC8F]) < 0)
    operator delete((void *)STACK[0xC78]);
  if (SLOBYTE(STACK[0xCA7]) < 0)
    operator delete((void *)STACK[0xC90]);
  if (SLOBYTE(STACK[0xCBF]) < 0)
    operator delete((void *)STACK[0xCA8]);
  if (SLOBYTE(STACK[0xCD7]) < 0)
    operator delete((void *)STACK[0xCC0]);
  if (SLOBYTE(STACK[0xCEF]) < 0)
    operator delete((void *)STACK[0xCD8]);
  if (SLOBYTE(STACK[0xD07]) < 0)
    operator delete((void *)STACK[0xCF0]);
  if (SLOBYTE(STACK[0xD1F]) < 0)
    operator delete((void *)STACK[0xD08]);
  if (SLOBYTE(STACK[0xD37]) < 0)
    operator delete((void *)STACK[0xD20]);
  if (SLOBYTE(STACK[0xD4F]) < 0)
    operator delete((void *)STACK[0xD38]);
  if (SLOBYTE(STACK[0xD67]) < 0)
    operator delete((void *)STACK[0xD50]);
  if (SLOBYTE(STACK[0xD7F]) < 0)
    operator delete((void *)STACK[0xD68]);
  if (SLOBYTE(STACK[0xD97]) < 0)
    operator delete((void *)STACK[0xD80]);
  if (SLOBYTE(STACK[0xDAF]) < 0)
    operator delete((void *)STACK[0xD98]);
  if (SLOBYTE(STACK[0xDC7]) < 0)
    operator delete((void *)STACK[0xDB0]);
  if (SLOBYTE(STACK[0xDDF]) < 0)
    operator delete((void *)STACK[0xDC8]);
  if (SLOBYTE(STACK[0xDF7]) < 0)
    operator delete((void *)STACK[0xDE0]);
  if (SLOBYTE(STACK[0xE0F]) < 0)
    operator delete((void *)STACK[0xDF8]);
  if (SLOBYTE(STACK[0xE27]) < 0)
    operator delete((void *)STACK[0xE10]);
  if (SLOBYTE(STACK[0xE3F]) < 0)
    operator delete((void *)STACK[0xE28]);
  if (SLOBYTE(STACK[0xE57]) < 0)
    operator delete((void *)STACK[0xE40]);
  if (SLOBYTE(STACK[0xE6F]) < 0)
    operator delete((void *)STACK[0xE58]);
  if (SLOBYTE(STACK[0xE87]) < 0)
    operator delete((void *)STACK[0xE70]);
  if (SLOBYTE(STACK[0xE9F]) < 0)
    operator delete((void *)STACK[0xE88]);
  if (SLOBYTE(STACK[0xEB7]) < 0)
    operator delete((void *)STACK[0xEA0]);
  if (SLOBYTE(STACK[0xECF]) < 0)
    operator delete((void *)STACK[0xEB8]);
  if (SLOBYTE(STACK[0xEE7]) < 0)
    operator delete((void *)STACK[0xED0]);
  if (SLOBYTE(STACK[0xEFF]) < 0)
    operator delete((void *)STACK[0xEE8]);
  if (SLOBYTE(STACK[0xF17]) < 0)
    operator delete((void *)STACK[0xF00]);
  if (SLOBYTE(STACK[0xF2F]) < 0)
    operator delete((void *)STACK[0xF18]);
  if (SLOBYTE(STACK[0xF47]) < 0)
    operator delete((void *)STACK[0xF30]);
  if (SLOBYTE(STACK[0xF5F]) < 0)
    operator delete((void *)STACK[0xF48]);
  if (SLOBYTE(STACK[0xF77]) < 0)
    operator delete((void *)STACK[0xF60]);
  if (SLOBYTE(STACK[0xF8F]) < 0)
    operator delete((void *)STACK[0xF78]);
  if (SLOBYTE(STACK[0xFA7]) < 0)
    operator delete((void *)STACK[0xF90]);
  if (SLOBYTE(STACK[0xFBF]) < 0)
    operator delete((void *)STACK[0xFA8]);
  if (SLOBYTE(STACK[0xFD7]) < 0)
    operator delete((void *)STACK[0xFC0]);
  if (SLOBYTE(STACK[0xFEF]) < 0)
    operator delete((void *)STACK[0xFD8]);
  if (SLOBYTE(STACK[0x1007]) < 0)
    operator delete((void *)STACK[0xFF0]);
  if (SLOBYTE(STACK[0x101F]) < 0)
    operator delete((void *)STACK[0x1008]);
  if (*(char *)(v83 + 23) < 0)
    operator delete(*(void **)v83);
  if (*(char *)(v83 + 47) < 0)
    operator delete(*(void **)(v83 + 24));
  for (; v82 != &STACK[0x1050]; v82 -= 5)
  {
    if (*((char *)v82 - 17) < 0)
      operator delete((void *)*(v82 - 5));
  }
  MEMORY[0x24268D8F0](a10, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

void sub_240FB24AC()
{
  JUMPOUT(0x240FB1CACLL);
}

void sub_240FB24B8()
{
  JUMPOUT(0x240FB1CF4);
}

uint64_t std::map<std::string,TokenData>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 40 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,TokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TokenData>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,TokenData> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  return a1;
}

void sub_240FB2528(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,TokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TokenData>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,TokenData> const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  const void **v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,TokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TokenData>>>::__construct_node<std::pair<std::string const,TokenData> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

__n128 std::__tree<std::__value_type<std::string,TokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TokenData>>>::__construct_node<std::pair<std::string const,TokenData> const&>@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  __n128 result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a2 + 16);
  }
  result = *(__n128 *)(a2 + 24);
  *(__n128 *)(v6 + 56) = result;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_240FB2648(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,TextureTokenData>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t pixelFormatTypeMap(void)
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(&pixelFormatTypeMapOnce);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&pixelFormatTypeMapOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<pixelFormatTypeMap(void)::$_0 &&>>);
  }
  return pixelFormatTypeMap(void)::nonGlobalPixelFormatTypeMap;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<pixelFormatTypeMap(void)::$_0 &&>>()
{
  uint64_t v0;
  uint64_t v1;
  void **v2;
  int v3;
  void *__p;
  char v5;
  int v6;
  void *v7[2];
  char v8;
  int v9;
  void *v10;
  char v11;
  int v12;
  void *v13[2];
  char v14;
  int v15;
  void *v16;
  char v17;
  int v18;
  __int128 v19;
  char v20;
  int v21;
  void *v22;
  char v23;
  int v24;
  __int128 v25;
  char v26;
  int v27;
  void *v28;
  char v29;
  int v30;
  __int128 v31;
  char v32;
  int v33;
  void *v34;
  char v35;
  int v36;
  __int128 v37;
  char v38;
  int v39;
  void *v40;
  char v41;
  int v42;
  __int128 v43;
  char v44;
  int v45;
  void *v46;
  char v47;
  int v48;
  __int128 v49;
  char v50;
  int v51;
  void *v52;
  char v53;
  int v54;
  __int128 v55;
  char v56;
  int v57;
  void *v58;
  char v59;
  int v60;
  __int128 v61;
  char v62;
  int v63;
  void *v64;
  char v65;
  int v66;
  __int128 v67;
  char v68;
  int v69;
  void *v70;
  char v71;
  int v72;
  __int128 v73;
  char v74;
  int v75;
  void *v76;
  char v77;
  int v78;
  __int128 v79;
  char v80;
  int v81;
  void *v82;
  char v83;
  int v84;
  __int128 v85;
  char v86;
  int v87;
  void *v88;
  char v89;
  int v90;
  __int128 v91;
  char v92;
  int v93;
  void *v94;
  char v95;
  int v96;
  __int128 v97;
  char v98;
  std::string v99;
  std::string v100[2];
  std::string v101[2];
  std::string v102[2];
  std::string v103[2];
  std::string v104[2];
  std::string v105[2];
  std::string v106[2];
  std::string v107[2];
  std::string v108[2];
  std::string v109[2];
  std::string v110[2];
  std::string v111[2];
  std::string v112[2];
  std::string v113[2];
  std::string v114[2];
  uint64_t v115;

  v115 = *MEMORY[0x24BDAC8D0];
  v0 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v97, "r8unorm");
  v93 = 10;
  std::string::basic_string[abi:ne180100]<0>(&v94, "packed_uchar");
  v96 = 62;
  std::pair<std::string const,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>::pair[abi:ne180100]<true,0>(&v99, &v97, (uint64_t)&v93);
  std::string::basic_string[abi:ne180100]<0>(&v91, "r8snorm");
  v87 = 12;
  std::string::basic_string[abi:ne180100]<0>(&v88, "packed_uchar");
  v90 = 63;
  std::pair<std::string const,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>::pair[abi:ne180100]<true,0>(v100, &v91, (uint64_t)&v87);
  std::string::basic_string[abi:ne180100]<0>(&v85, "r16unorm");
  v81 = 20;
  std::string::basic_string[abi:ne180100]<0>(&v82, "packed_ushort");
  v84 = 64;
  std::pair<std::string const,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>::pair[abi:ne180100]<true,0>(v101, &v85, (uint64_t)&v81);
  std::string::basic_string[abi:ne180100]<0>(&v79, "r16snorm");
  v75 = 22;
  std::string::basic_string[abi:ne180100]<0>(&v76, "packed_ushort");
  v78 = 65;
  std::pair<std::string const,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>::pair[abi:ne180100]<true,0>(v102, &v79, (uint64_t)&v75);
  std::string::basic_string[abi:ne180100]<0>(&v73, "rg8unorm");
  v69 = 30;
  std::string::basic_string[abi:ne180100]<0>(&v70, "packed_uchar2");
  v72 = 66;
  std::pair<std::string const,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>::pair[abi:ne180100]<true,0>(v103, &v73, (uint64_t)&v69);
  std::string::basic_string[abi:ne180100]<0>(&v67, "rg8snorm");
  v63 = 32;
  std::string::basic_string[abi:ne180100]<0>(&v64, "packed_uchar2");
  v66 = 67;
  std::pair<std::string const,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>::pair[abi:ne180100]<true,0>(v104, &v67, (uint64_t)&v63);
  std::string::basic_string[abi:ne180100]<0>(&v61, "rg16unorm");
  v57 = 60;
  std::string::basic_string[abi:ne180100]<0>(&v58, "packed_ushort2");
  v60 = 68;
  std::pair<std::string const,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>::pair[abi:ne180100]<true,0>(v105, &v61, (uint64_t)&v57);
  std::string::basic_string[abi:ne180100]<0>(&v55, "rg16snorm");
  v51 = 62;
  std::string::basic_string[abi:ne180100]<0>(&v52, "packed_ushort2");
  v54 = 69;
  std::pair<std::string const,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>::pair[abi:ne180100]<true,0>(v106, &v55, (uint64_t)&v51);
  std::string::basic_string[abi:ne180100]<0>(&v49, "rgba8unorm");
  v45 = 70;
  std::string::basic_string[abi:ne180100]<0>(&v46, "packed_uchar4");
  v48 = 70;
  std::pair<std::string const,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>::pair[abi:ne180100]<true,0>(v107, &v49, (uint64_t)&v45);
  std::string::basic_string[abi:ne180100]<0>(&v43, "srgba8unorm");
  v39 = 71;
  std::string::basic_string[abi:ne180100]<0>(&v40, "packed_uchar4");
  v42 = 71;
  std::pair<std::string const,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>::pair[abi:ne180100]<true,0>(v108, &v43, (uint64_t)&v39);
  std::string::basic_string[abi:ne180100]<0>(&v37, "rgba8snorm");
  v33 = 72;
  std::string::basic_string[abi:ne180100]<0>(&v34, "packed_uchar4");
  v36 = 72;
  std::pair<std::string const,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>::pair[abi:ne180100]<true,0>(v109, &v37, (uint64_t)&v33);
  std::string::basic_string[abi:ne180100]<0>(&v31, "rgba16unorm");
  v27 = 110;
  std::string::basic_string[abi:ne180100]<0>(&v28, "packed_ushort4");
  v30 = 73;
  std::pair<std::string const,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>::pair[abi:ne180100]<true,0>(v110, &v31, (uint64_t)&v27);
  std::string::basic_string[abi:ne180100]<0>(&v25, "rgba16snorm");
  v21 = 112;
  std::string::basic_string[abi:ne180100]<0>(&v22, "packed_ushort4");
  v24 = 74;
  std::pair<std::string const,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>::pair[abi:ne180100]<true,0>(v111, &v25, (uint64_t)&v21);
  std::string::basic_string[abi:ne180100]<0>(&v19, "rgb10a2");
  v15 = 90;
  std::string::basic_string[abi:ne180100]<0>(&v16, "packed_uint");
  v18 = 75;
  std::pair<std::string const,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>::pair[abi:ne180100]<true,0>(v112, &v19, (uint64_t)&v15);
  std::string::basic_string[abi:ne180100]<0>(v13, "rg11b10f");
  v9 = 92;
  std::string::basic_string[abi:ne180100]<0>(&v10, "packed_uint");
  v12 = 76;
  std::pair<std::string const,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>::pair[abi:ne180100]<true,0>(v113, (__int128 *)v13, (uint64_t)&v9);
  std::string::basic_string[abi:ne180100]<0>(v7, "rgb9e5");
  v3 = 93;
  std::string::basic_string[abi:ne180100]<0>(&__p, "packed_uint");
  v6 = 77;
  std::pair<std::string const,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>::pair[abi:ne180100]<true,0>(v114, (__int128 *)v7, (uint64_t)&v3);
  std::map<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>::map[abi:ne180100](v0, (const void **)&v99.__r_.__value_.__l.__data_, 16);
  pixelFormatTypeMap(void)::nonGlobalPixelFormatTypeMap = v0;
  v1 = 1024;
  do
  {
    v2 = (void **)((char *)&v99.__r_.__value_.__l.__data_ + v1);
    if (*((char *)&v97 + v1 + 15) < 0)
      operator delete(*(v2 - 4));
    if (*((char *)v2 - 41) < 0)
      operator delete(*(v2 - 8));
    v1 -= 64;
  }
  while (v1);
  if (v5 < 0)
    operator delete(__p);
  if (v8 < 0)
    operator delete(v7[0]);
  if (v11 < 0)
    operator delete(v10);
  if (v14 < 0)
    operator delete(v13[0]);
  if (v17 < 0)
    operator delete(v16);
  if (v20 < 0)
    operator delete((void *)v19);
  if (v23 < 0)
    operator delete(v22);
  if (v26 < 0)
    operator delete((void *)v25);
  if (v29 < 0)
    operator delete(v28);
  if (v32 < 0)
    operator delete((void *)v31);
  if (v35 < 0)
    operator delete(v34);
  if (v38 < 0)
    operator delete((void *)v37);
  if (v41 < 0)
    operator delete(v40);
  if (v44 < 0)
    operator delete((void *)v43);
  if (v47 < 0)
    operator delete(v46);
  if (v50 < 0)
    operator delete((void *)v49);
  if (v53 < 0)
    operator delete(v52);
  if (v56 < 0)
    operator delete((void *)v55);
  if (v59 < 0)
    operator delete(v58);
  if (v62 < 0)
    operator delete((void *)v61);
  if (v65 < 0)
    operator delete(v64);
  if (v68 < 0)
    operator delete((void *)v67);
  if (v71 < 0)
    operator delete(v70);
  if (v74 < 0)
    operator delete((void *)v73);
  if (v77 < 0)
    operator delete(v76);
  if (v80 < 0)
    operator delete((void *)v79);
  if (v83 < 0)
    operator delete(v82);
  if (v86 < 0)
    operator delete((void *)v85);
  if (v89 < 0)
    operator delete(v88);
  if (v92 < 0)
    operator delete((void *)v91);
  if (v95 < 0)
    operator delete(v94);
  if (v98 < 0)
    operator delete((void *)v97);
}

void sub_240FB2E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,int a62,__int16 a63)
{
  char a65;
  char a72;
  char a73;
  char a74;
  char a75;
  char a76;
  char a77;
  char a78;
  uint64_t v78;
  void **v79;
  uint64_t v80;

  std::__call_once_proxy[abi:ne180100]<std::tuple<pixelFormatTypeMap(void)::$_0 &&>>(v80 + 1024, (uint64_t)&STACK[0x408]);
  if (a16 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a30 < 0)
    operator delete(a25);
  if (a37 < 0)
    operator delete(a32);
  if (a44 < 0)
    operator delete(v79[1]);
  if (a51 < 0)
    operator delete(v79[5]);
  if (a58 < 0)
    operator delete(v79[9]);
  if (a65 < 0)
    operator delete(v79[13]);
  if (a72 < 0)
    operator delete(v79[17]);
  if (a73 < 0)
    operator delete(v79[21]);
  if (a74 < 0)
    operator delete(v79[25]);
  if (a75 < 0)
    operator delete(v79[29]);
  if (a76 < 0)
    operator delete(v79[33]);
  if (a77 < 0)
    operator delete(v79[37]);
  if (a78 < 0)
    operator delete(v79[41]);
  if (SLOBYTE(STACK[0x207]) < 0)
    operator delete(v79[45]);
  if (SLOBYTE(STACK[0x227]) < 0)
    operator delete(v79[49]);
  if (SLOBYTE(STACK[0x247]) < 0)
    operator delete(v79[53]);
  if (SLOBYTE(STACK[0x267]) < 0)
    operator delete(v79[57]);
  if (SLOBYTE(STACK[0x287]) < 0)
    operator delete(v79[61]);
  if (SLOBYTE(STACK[0x2A7]) < 0)
    operator delete(v79[65]);
  if (SLOBYTE(STACK[0x2C7]) < 0)
    operator delete(v79[69]);
  if (SLOBYTE(STACK[0x2E7]) < 0)
    operator delete(v79[73]);
  if (SLOBYTE(STACK[0x307]) < 0)
    operator delete(v79[77]);
  if (SLOBYTE(STACK[0x327]) < 0)
    operator delete(v79[81]);
  if (SLOBYTE(STACK[0x347]) < 0)
    operator delete(v79[85]);
  if (SLOBYTE(STACK[0x367]) < 0)
    operator delete(v79[89]);
  if (SLOBYTE(STACK[0x387]) < 0)
    operator delete(v79[93]);
  if (SLOBYTE(STACK[0x3A7]) < 0)
    operator delete(v79[97]);
  if (SLOBYTE(STACK[0x3C7]) < 0)
    operator delete(v79[101]);
  if (SLOBYTE(STACK[0x3E7]) < 0)
    operator delete(v79[105]);
  if (SLOBYTE(STACK[0x407]) < 0)
    operator delete(v79[109]);
  MEMORY[0x24268D8F0](v78, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

void sub_240FB314C()
{
  JUMPOUT(0x240FB2F9CLL);
}

void sub_240FB3158()
{
  JUMPOUT(0x240FB2FACLL);
}

void sub_240FB3168()
{
  JUMPOUT(0x240FB2FBCLL);
}

void sub_240FB3174()
{
  JUMPOUT(0x240FB2FCCLL);
}

void sub_240FB3184()
{
  JUMPOUT(0x240FB2FDCLL);
}

void sub_240FB3190()
{
  JUMPOUT(0x240FB2FECLL);
}

void sub_240FB31A0()
{
  JUMPOUT(0x240FB2FFCLL);
}

void sub_240FB31AC()
{
  JUMPOUT(0x240FB300CLL);
}

void sub_240FB31BC()
{
  JUMPOUT(0x240FB301CLL);
}

void sub_240FB31C8()
{
  JUMPOUT(0x240FB302CLL);
}

void sub_240FB31D8()
{
  JUMPOUT(0x240FB303CLL);
}

void sub_240FB31E4()
{
  JUMPOUT(0x240FB304CLL);
}

void sub_240FB31F4()
{
  JUMPOUT(0x240FB305CLL);
}

void sub_240FB3200()
{
  JUMPOUT(0x240FB306CLL);
}

void sub_240FB3210()
{
  JUMPOUT(0x240FB307CLL);
}

void sub_240FB321C()
{
  JUMPOUT(0x240FB308CLL);
}

void sub_240FB322C()
{
  JUMPOUT(0x240FB309CLL);
}

void sub_240FB3238()
{
  JUMPOUT(0x240FB30ACLL);
}

void sub_240FB3248()
{
  JUMPOUT(0x240FB30BCLL);
}

void sub_240FB3254()
{
  JUMPOUT(0x240FB30CCLL);
}

void sub_240FB3260()
{
  JUMPOUT(0x240FB30CCLL);
}

void sub_240FB3270()
{
  JUMPOUT(0x240FB30DCLL);
}

void sub_240FB3280()
{
  JUMPOUT(0x240FB312CLL);
}

std::string *std::pair<std::string const,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>::pair[abi:ne180100]<true,0>(std::string *this, __int128 *a2, uint64_t a3)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,Air::PixelFormat,std::string,MTLCompilerDataType>::__tuple_impl(&this[1], a3);
  return this;
}

void sub_240FB32E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::map<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = a3 << 6;
    do
    {
      std::__tree<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>> const&>((uint64_t **)a1, v4, a2, (__int128 *)a2);
      a2 += 8;
      v6 -= 64;
    }
    while (v6);
  }
  return a1;
}

void sub_240FB3364(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>> const&>(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  const void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const void **v12;

  v6 = std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>>>::__construct_node<std::pair<std::string const,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>>>::__construct_node<std::pair<std::string const,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x60uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_240FB3460(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,Air::PixelFormat,std::string,MTLCompilerDataType>::__tuple_impl(&this[1], (uint64_t)a2 + 24);
  return this;
}

void sub_240FB34D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__tree<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t std::__tree<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>>>::find<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t *v8;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = a1 + 8;
  do
  {
    v7 = std::less<std::string>::operator()[abi:ne180100](v5, (const void **)(v3 + 32), a2);
    v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      v8 = (uint64_t *)v3;
      v6 = v3;
    }
    v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::string>::operator()[abi:ne180100](v5, a2, (const void **)(v6 + 32)))
    return v2;
  return v6;
}

_DWORD *std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,Air::PixelFormat,std::string,MTLCompilerDataType>::__tuple_impl(_DWORD *a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;

  *a1 = *(_DWORD *)a2;
  v4 = (std::string *)(a1 + 2);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  a1[8] = *(_DWORD *)(a2 + 32);
  return a1;
}

void MTLFragmentInputLinkingPass::fragmentInputLinking(int a1, llvm::Module *this, uint64_t a3)
{
  llvm::NamedMDNode *NamedMetadata;
  uint64_t Operand;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  std::vector<unsigned int>::size_type v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *String;
  uint64_t v18;
  BOOL v19;
  char *v21;
  __int128 v22;
  __int128 *v23;
  __int128 v24;
  int v25;
  int32x2_t v26;
  int32x2_t v27;
  int8x8_t v28;
  __int128 v29;
  int8x8_t v30;
  int v31;
  int32x2_t v32;
  int32x2_t v33;
  char *v34;
  int64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  __int128 v40;
  __int128 *v41;
  char *v42;
  __int128 v43;
  char *v44;
  unsigned int ComponentCount;
  __int128 v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  llvm::Type *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  __int128 v55;
  std::vector<unsigned int> v56;
  void *__p;
  char *v58;
  unint64_t v59;
  __int128 v60;
  __int128 v61;
  __int16 v62;

  *(_QWORD *)&v60 = "air.fragment";
  v62 = 259;
  NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(this, (const llvm::Twine *)&v60);
  Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
  v7 = (_QWORD *)(Operand - 8 * *(unsigned int *)(Operand + 8));
  v8 = v7[2];
  v9 = *(_QWORD *)(*v7 + 128);
  __p = 0;
  v58 = 0;
  v59 = 0;
  if (v8)
  {
    v10 = *(_QWORD *)(v9 + 96);
    std::vector<unsigned int>::vector(&v56, v10);
    MTLFrameworkPass::getArgumentMetadataIndices(v8, (uint64_t)&v56);
    if ((*(_WORD *)(v9 + 18) & 1) != 0)
      llvm::Function::BuildLazyArguments((llvm::Function *)v9);
    v11 = v10;
    if ((_DWORD)v10)
    {
      v12 = 0;
      v13 = 0;
      v14 = *(_QWORD *)(v9 + 88);
      v55 = 0u;
      while (1)
      {
        v15 = v56.__begin_[v12];
        if ((_DWORD)v15 != -1)
        {
          v16 = *(_QWORD *)(v8 - 8 * *(unsigned int *)(v8 + 8) + 8 * v15);
          String = (_QWORD *)llvm::MDString::getString(*(llvm::MDString **)(v16 - 8 * *(unsigned int *)(v16 + 8) + 8));
          if (v18 > 23)
          {
            if (v18 != 24)
            {
              if (v18 == 29 && !memcmp(String, "air.render_target_array_index", 0x1DuLL))
              {
                v13 = dataTypeFromMetadata(2u, v16);
                *((_QWORD *)&v24 + 1) = *((_QWORD *)&v55 + 1);
                *(int32x2_t *)&v24 = vadd_s32(*(int32x2_t *)&v55, (int32x2_t)0x100000001);
                v55 = v24;
              }
              goto LABEL_27;
            }
            v31 = memcmp(String, "air.viewport_array_index", 0x18uLL);
            v32.i32[0] = 0;
            v33.i32[0] = v31;
            v28 = (int8x8_t)vdup_lane_s32(vceq_s32(v33, v32), 0);
            v29 = v55;
            v30 = (int8x8_t)vadd_s32(*(int32x2_t *)&v55, (int32x2_t)0x100000001);
          }
          else
          {
            if (v18 != 15)
            {
              if (v18 == 18)
              {
                v19 = *String == 0x676172662E726961 && String[1] == 0x706E695F746E656DLL;
                if (v19 && *((_WORD *)String + 8) == 29813)
                {
                  LODWORD(v60) = 0;
                  *((_QWORD *)&v60 + 1) = 0;
                  *(_QWORD *)&v61 = 0;
                  *(_QWORD *)((char *)&v61 + 5) = 0;
                  MTLFrameworkPass::extractVaryingInfoFromMetadata((uint64_t)&v60, v16, 2u, 0);
                  LODWORD(v60) = v12;
                  BYTE12(v61) = BYTE12(v61) & 0xFE | (*(_QWORD *)(v14 + 8) != 0);
                  v21 = v58;
                  if ((unint64_t)v58 >= v59)
                  {
                    v34 = (char *)__p;
                    v35 = (v58 - (_BYTE *)__p) >> 5;
                    v36 = v35 + 1;
                    if ((unint64_t)(v35 + 1) >> 59)
                      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
                    v37 = v59 - (_QWORD)__p;
                    if ((uint64_t)(v59 - (_QWORD)__p) >> 4 > v36)
                      v36 = v37 >> 4;
                    if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFE0)
                      v38 = 0x7FFFFFFFFFFFFFFLL;
                    else
                      v38 = v36;
                    if (v38)
                    {
                      v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<VaryingInfo>>((uint64_t)&v59, v38);
                      v34 = (char *)__p;
                      v21 = v58;
                    }
                    else
                    {
                      v39 = 0;
                    }
                    v40 = v61;
                    v41 = (__int128 *)&v39[32 * v35];
                    *v41 = v60;
                    v41[1] = v40;
                    if (v21 == v34)
                    {
                      v44 = &v39[32 * v35];
                    }
                    else
                    {
                      v42 = &v39[32 * v35];
                      do
                      {
                        v43 = *((_OWORD *)v21 - 2);
                        v44 = v42 - 32;
                        *(_OWORD *)(v42 - 19) = *(_OWORD *)(v21 - 19);
                        *((_OWORD *)v42 - 2) = v43;
                        v21 -= 32;
                        v42 -= 32;
                      }
                      while (v21 != v34);
                    }
                    v23 = v41 + 2;
                    __p = v44;
                    v58 = (char *)(v41 + 2);
                    v59 = (unint64_t)&v39[32 * v38];
                    if (v34)
                      operator delete(v34);
                  }
                  else
                  {
                    v22 = v61;
                    *(_OWORD *)v58 = v60;
                    *((_OWORD *)v21 + 1) = v22;
                    v23 = (__int128 *)(v21 + 32);
                  }
                  v58 = (char *)v23;
                  ComponentCount = MTLDataTypeGetComponentCount(SDWORD2(v61));
                  *((_QWORD *)&v46 + 1) = *((_QWORD *)&v55 + 1);
                  *(int32x2_t *)&v46 = vadd_s32(*(int32x2_t *)&v55, (int32x2_t)(ComponentCount | 0x100000000));
                  v55 = v46;
                }
              }
              goto LABEL_27;
            }
            v25 = memcmp(String, "air.point_coord", 0xFuLL);
            v26.i32[0] = 0;
            v27.i32[0] = v25;
            v28 = (int8x8_t)vdup_lane_s32(vceq_s32(v27, v26), 0);
            v29 = v55;
            v30 = (int8x8_t)vadd_s32(*(int32x2_t *)&v55, (int32x2_t)0x100000002);
          }
          *(int8x8_t *)&v29 = vbsl_s8(v28, v30, *(int8x8_t *)&v29);
          v55 = v29;
        }
LABEL_27:
        v14 += 40;
        if (++v12 == v11)
          goto LABEL_48;
      }
    }
    v13 = 0;
    *(_QWORD *)&v55 = 0;
LABEL_48:
    v49 = 126 - 2 * __clz((v58 - (_BYTE *)__p) >> 5);
    v50 = *(llvm::Type **)this;
    if (v58 == __p)
      v51 = 0;
    else
      v51 = v49;
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *,false>((unint64_t)__p, (__int128 *)v58, (uint64_t)&v60, v51, 1);
    if (((v58 - (_BYTE *)__p) & 0x1FFFFFFFE0) != 0)
    {
      v52 = 0;
      v47 = 0;
      v53 = ((unint64_t)(v58 - (_BYTE *)__p) >> 5);
      do
      {
        v54 = (char *)__p + v52;
        MTLFrameworkPass::addLocationToMetadata(v50, v8, v56.__begin_[*(int *)((char *)__p + v52)]);
        v47 += v54[28] & 1;
        v52 += 32;
        --v53;
      }
      while (v53);
    }
    else
    {
      v47 = 0;
    }
    if (v56.__begin_)
    {
      v56.__end_ = v56.__begin_;
      operator delete(v56.__begin_);
    }
    v48 = v55;
  }
  else
  {
    v13 = 0;
    v47 = 0;
    v48 = 0;
  }
  std::function<void ()(llvm::Module *,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<VaryingInfo> const&)>::operator()(a3, (uint64_t)this, SHIDWORD(v48), v48, v13, v47);
  if (__p)
  {
    v58 = (char *)__p;
    operator delete(__p);
  }
}

void sub_240FB3B18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  if (a17)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t std::function<void ()(llvm::Module *,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<VaryingInfo> const&)>::operator()(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6)
{
  uint64_t v6;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;

  v12 = a2;
  v11 = a3;
  v9 = a5;
  v10 = a4;
  v8 = a6;
  v6 = *(_QWORD *)(a1 + 24);
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *, int *, int *, int *, int *))(*(_QWORD *)v6 + 48))(v6, &v12, &v11, &v10, &v9, &v8);
}

std::vector<unsigned int> *__cdecl std::vector<unsigned int>::vector(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  std::vector<unsigned int>::pointer end;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_240FB3C14(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned int>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a2);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<VaryingInfo>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a2);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *,false>(unint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  const void *v19;
  size_t v20;
  __int128 *v21;
  char v22;
  BOOL v23;
  const void *v24;
  size_t v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[32];

LABEL_1:
  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (uint64_t)a2 - v9;
    v13 = (uint64_t)((uint64_t)a2 - v9) >> 5;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v24 = *(const void **)(v9 + 8);
        v25 = *(_QWORD *)(v9 + 16);
        *(_OWORD *)v28 = *(__int128 *)((char *)a2 - 24);
        if (llvm::StringRef::compare((uint64_t)v28, v24, v25) == -1)
        {
          v26 = *(_OWORD *)(v9 + 16);
          *(_OWORD *)v28 = *(_OWORD *)v9;
          *(_OWORD *)&v28[16] = v26;
          v27 = *(a2 - 2);
          *(_OWORD *)(v9 + 13) = *(__int128 *)((char *)a2 - 19);
          *(_OWORD *)v9 = v27;
          *(a2 - 2) = *(_OWORD *)v28;
          *(__int128 *)((char *)a2 - 19) = *(_OWORD *)&v28[13];
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(v9, v9 + 32, (uint64_t)(a2 - 2));
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(v9, v9 + 32, v9 + 64, a2 - 2);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(v9, v9 + 32, v9 + 64, v9 + 96, a2 - 2);
        return;
      default:
        if (v12 <= 767)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(v9, a2);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(v9, a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = (__int128 *)(v9 + 32 * (v13 >> 1));
          if ((unint64_t)v12 <= 0x1000)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(v9 + 32 * (v13 >> 1), v9, (uint64_t)(a2 - 2));
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(v9, v9 + 32 * (v13 >> 1), (uint64_t)(a2 - 2));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(v9 + 32, (uint64_t)(v15 - 2), (uint64_t)(a2 - 4));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(v9 + 64, v9 + 32 + 32 * v14, (uint64_t)(a2 - 6));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>((uint64_t)(v15 - 2), (uint64_t)v15, v9 + 32 + 32 * v14);
            v16 = *(_OWORD *)(v9 + 16);
            *(_OWORD *)v28 = *(_OWORD *)v9;
            *(_OWORD *)&v28[16] = v16;
            v17 = *v15;
            *(_OWORD *)(v9 + 13) = *(__int128 *)((char *)v15 + 13);
            *(_OWORD *)v9 = v17;
            v18 = *(_OWORD *)v28;
            *(__int128 *)((char *)v15 + 13) = *(_OWORD *)&v28[13];
            *v15 = v18;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          v19 = *(const void **)(v9 + 8);
          v20 = *(_QWORD *)(v9 + 16);
          *(_OWORD *)v28 = *(_OWORD *)(v9 - 24);
          if (llvm::StringRef::compare((uint64_t)v28, v19, v20) != -1)
          {
            v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,VaryingInfo *,std::__less<void,void> &>((uint64_t *)v9, a2);
            goto LABEL_16;
          }
LABEL_11:
          v21 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,VaryingInfo *,std::__less<void,void> &>((uint64_t *)v9, (uint64_t *)a2);
          if ((v22 & 1) == 0)
            goto LABEL_14;
          v23 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(v9, (uint64_t)v21);
          v9 = (unint64_t)(v21 + 2);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>((uint64_t)(v21 + 2), (uint64_t)a2))
          {
            v10 = v11 + 1;
            if (v23)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *,false>(a1, v21, a3, -v11, a5 & 1);
            v9 = (unint64_t)(v21 + 2);
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v21;
          if (v23)
            return;
          goto LABEL_1;
        }
        if ((__int128 *)v9 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *,VaryingInfo *>(v9, a2, a2, a3);
        return;
    }
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  const void *v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  size_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  if ((_QWORD *)result != a2)
  {
    v22 = v2;
    v23 = v3;
    v5 = result;
    v6 = (_QWORD *)(result + 32);
    if ((_QWORD *)(result + 32) != a2)
    {
      v7 = 0;
      v8 = (_QWORD *)result;
      do
      {
        v9 = v6;
        v10 = (const void *)v8[1];
        v11 = v8[2];
        v21 = *(_OWORD *)(v8 + 5);
        result = llvm::StringRef::compare((uint64_t)&v21, v10, v11);
        if ((_DWORD)result == -1)
        {
          v12 = *v9;
          v13 = v8[5];
          v14 = v8[6];
          v15 = v7;
          v16 = v8[7];
          while (1)
          {
            v17 = v5 + v15;
            *(_OWORD *)(v17 + 32) = *(_OWORD *)(v5 + v15);
            *(_OWORD *)(v17 + 45) = *(_OWORD *)(v5 + v15 + 13);
            if (!v15)
              break;
            v18 = *(const void **)(v17 - 24);
            v19 = *(_QWORD *)(v17 - 16);
            *(_QWORD *)&v21 = v13;
            *((_QWORD *)&v21 + 1) = v14;
            result = llvm::StringRef::compare((uint64_t)&v21, v18, v19);
            v15 -= 32;
            if ((_DWORD)result != -1)
            {
              v20 = v5 + v15 + 32;
              goto LABEL_10;
            }
          }
          v20 = v5;
LABEL_10:
          *(_QWORD *)v20 = v12;
          *(_QWORD *)(v20 + 8) = v13;
          *(_QWORD *)(v20 + 16) = v14;
          *(_DWORD *)(v20 + 24) = v16;
          *(_BYTE *)(v20 + 28) = BYTE4(v16);
        }
        v6 = v9 + 4;
        v7 += 32;
        v8 = v9;
      }
      while (v9 + 4 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  const void *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  _OWORD *v15;
  const void *v16;
  size_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  if ((_QWORD *)result != a2)
  {
    v19 = v2;
    v20 = v3;
    v5 = (_QWORD *)result;
    v6 = (_QWORD *)(result + 32);
    while (v6 != a2)
    {
      v7 = v6;
      v8 = (const void *)v5[1];
      v9 = v5[2];
      v18 = *(_OWORD *)(v5 + 5);
      result = llvm::StringRef::compare((uint64_t)&v18, v8, v9);
      if ((_DWORD)result == -1)
      {
        v10 = *v7;
        v11 = v5[5];
        v12 = v5[6];
        v13 = v7;
        v14 = v5[7];
        do
        {
          v15 = v13 - 2;
          *v13 = *(v13 - 2);
          *(_OWORD *)((char *)v13 + 13) = *(_OWORD *)((char *)v13 - 19);
          v16 = (const void *)*((_QWORD *)v13 - 7);
          v17 = *((_QWORD *)v13 - 6);
          *(_QWORD *)&v18 = v11;
          *((_QWORD *)&v18 + 1) = v12;
          result = llvm::StringRef::compare((uint64_t)&v18, v16, v17);
          v13 = v15;
        }
        while ((_DWORD)result == -1);
        *(_QWORD *)v15 = v10;
        *((_QWORD *)v15 + 1) = v11;
        *((_QWORD *)v15 + 2) = v12;
        *((_DWORD *)v15 + 6) = v14;
        *((_BYTE *)v15 + 28) = BYTE4(v14);
      }
      v6 = v7 + 4;
      v5 = v7;
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v6;
  size_t v7;
  int v8;
  uint64_t v9;
  const void *v10;
  size_t v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  const void *v16;
  size_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  const void *v24;
  size_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[32];

  v6 = *(const void **)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)v32 = *(_OWORD *)(a2 + 8);
  v8 = llvm::StringRef::compare((uint64_t)v32, v6, v7);
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(const void **)(a2 + 8);
  v11 = *(_QWORD *)(a2 + 16);
  if (v8 == -1)
  {
    *(_QWORD *)v32 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)&v32[8] = v9;
    if (llvm::StringRef::compare((uint64_t)v32, v10, v11) == -1)
    {
      v30 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)v32 = *(_OWORD *)a1;
      v29 = *(_OWORD *)v32;
      *(_OWORD *)&v32[16] = v30;
      v31 = *(_OWORD *)(a3 + 13);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_OWORD *)(a1 + 13) = v31;
      *(_OWORD *)a3 = v29;
      *(_OWORD *)(a3 + 13) = *(_OWORD *)&v32[13];
    }
    else
    {
      v14 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)v32 = *(_OWORD *)a1;
      v13 = *(_OWORD *)v32;
      *(_OWORD *)&v32[16] = v14;
      v15 = *(_OWORD *)(a2 + 13);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 13) = v15;
      *(_OWORD *)a2 = v13;
      *(_OWORD *)(a2 + 13) = *(_OWORD *)&v32[13];
      v16 = *(const void **)(a2 + 8);
      v17 = *(_QWORD *)(a2 + 16);
      *(_OWORD *)v32 = *(_OWORD *)(a3 + 8);
      if (llvm::StringRef::compare((uint64_t)v32, v16, v17) == -1)
      {
        v19 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)v32 = *(_OWORD *)a2;
        v18 = *(_OWORD *)v32;
        *(_OWORD *)&v32[16] = v19;
        v20 = *(_OWORD *)(a3 + 13);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 13) = v20;
        *(_OWORD *)a3 = v18;
        *(_OWORD *)(a3 + 13) = *(_OWORD *)&v32[13];
        return 2;
      }
    }
  }
  else
  {
    *(_QWORD *)v32 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)&v32[8] = v9;
    if (llvm::StringRef::compare((uint64_t)v32, v10, v11) != -1)
      return 0;
    v22 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v32 = *(_OWORD *)a2;
    v21 = *(_OWORD *)v32;
    *(_OWORD *)&v32[16] = v22;
    v23 = *(_OWORD *)(a3 + 13);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)(a2 + 13) = v23;
    *(_OWORD *)a3 = v21;
    *(_OWORD *)(a3 + 13) = *(_OWORD *)&v32[13];
    v24 = *(const void **)(a1 + 8);
    v25 = *(_QWORD *)(a1 + 16);
    *(_OWORD *)v32 = *(_OWORD *)(a2 + 8);
    if (llvm::StringRef::compare((uint64_t)v32, v24, v25) == -1)
    {
      v27 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)v32 = *(_OWORD *)a1;
      v26 = *(_OWORD *)v32;
      *(_OWORD *)&v32[16] = v27;
      v28 = *(_OWORD *)(a2 + 13);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 13) = v28;
      *(_OWORD *)a2 = v26;
      *(_OWORD *)(a2 + 13) = *(_OWORD *)&v32[13];
      return 2;
    }
  }
  return 1;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,VaryingInfo *,std::__less<void,void> &>(uint64_t *a1, _OWORD *a2)
{
  _OWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  size_t v9;
  unint64_t v10;
  unint64_t v11;
  const void *v12;
  size_t v13;
  int v14;
  unint64_t v15;
  const void *v16;
  size_t v17;
  int v18;
  _OWORD *v19;
  const void *v20;
  size_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  const void *v25;
  size_t v26;
  const void *v27;
  size_t v28;
  __int128 v29;
  _BYTE v31[32];

  v2 = a2;
  v5 = *a1;
  v4 = a1[1];
  v7 = a1[2];
  v6 = a1[3];
  v8 = (const void *)*((_QWORD *)a2 - 3);
  v9 = *((_QWORD *)v2 - 2);
  *(_QWORD *)v31 = v4;
  *(_QWORD *)&v31[8] = v7;
  if (llvm::StringRef::compare((uint64_t)v31, v8, v9) == -1)
  {
    v15 = (unint64_t)a1;
    do
    {
      v11 = v15 + 32;
      v16 = *(const void **)(v15 + 40);
      v17 = *(_QWORD *)(v15 + 48);
      *(_QWORD *)v31 = v4;
      *(_QWORD *)&v31[8] = v7;
      v18 = llvm::StringRef::compare((uint64_t)v31, v16, v17);
      v15 = v11;
    }
    while (v18 != -1);
  }
  else
  {
    v10 = (unint64_t)(a1 + 4);
    do
    {
      v11 = v10;
      if (v10 >= (unint64_t)v2)
        break;
      v12 = *(const void **)(v10 + 8);
      v13 = *(_QWORD *)(v10 + 16);
      *(_QWORD *)v31 = v4;
      *(_QWORD *)&v31[8] = v7;
      v14 = llvm::StringRef::compare((uint64_t)v31, v12, v13);
      v10 = v11 + 32;
    }
    while (v14 != -1);
  }
  if (v11 >= (unint64_t)v2)
  {
    v19 = v2;
  }
  else
  {
    do
    {
      v19 = v2 - 2;
      v20 = (const void *)*((_QWORD *)v2 - 3);
      v21 = *((_QWORD *)v2 - 2);
      *(_QWORD *)v31 = v4;
      *(_QWORD *)&v31[8] = v7;
      v2 -= 2;
    }
    while (llvm::StringRef::compare((uint64_t)v31, v20, v21) == -1);
  }
  while (v11 < (unint64_t)v19)
  {
    v22 = *(_OWORD *)(v11 + 16);
    *(_OWORD *)v31 = *(_OWORD *)v11;
    *(_OWORD *)&v31[16] = v22;
    v23 = *v19;
    *(_OWORD *)(v11 + 13) = *(_OWORD *)((char *)v19 + 13);
    *(_OWORD *)v11 = v23;
    v24 = *(_OWORD *)v31;
    *(_OWORD *)((char *)v19 + 13) = *(_OWORD *)&v31[13];
    *v19 = v24;
    do
    {
      v25 = *(const void **)(v11 + 40);
      v26 = *(_QWORD *)(v11 + 48);
      v11 += 32;
      *(_QWORD *)v31 = v4;
      *(_QWORD *)&v31[8] = v7;
    }
    while (llvm::StringRef::compare((uint64_t)v31, v25, v26) != -1);
    do
    {
      v27 = (const void *)*((_QWORD *)v19 - 3);
      v28 = *((_QWORD *)v19 - 2);
      v19 -= 2;
      *(_QWORD *)v31 = v4;
      *(_QWORD *)&v31[8] = v7;
    }
    while (llvm::StringRef::compare((uint64_t)v31, v27, v28) == -1);
  }
  if ((uint64_t *)(v11 - 32) != a1)
  {
    v29 = *(_OWORD *)(v11 - 32);
    *(_OWORD *)((char *)a1 + 13) = *(_OWORD *)(v11 - 19);
    *(_OWORD *)a1 = v29;
  }
  *(_QWORD *)(v11 - 32) = v5;
  *(_QWORD *)(v11 - 24) = v4;
  *(_QWORD *)(v11 - 16) = v7;
  *(_DWORD *)(v11 - 8) = v6;
  *(_BYTE *)(v11 - 4) = BYTE4(v6);
  return v11;
}

__int128 *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,VaryingInfo *,std::__less<void,void> &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 *result;
  __int128 v19;
  _BYTE v20[32];

  v4 = 0;
  v6 = *a1;
  v5 = (const void *)a1[1];
  v7 = a1[2];
  v8 = a1[3];
  do
  {
    *(_OWORD *)v20 = *(_OWORD *)&a1[v4 + 5];
    v4 += 4;
  }
  while (llvm::StringRef::compare((uint64_t)v20, v5, v7) == -1);
  v9 = &a1[v4];
  if (v4 == 4)
  {
    while (v9 < a2)
    {
      v10 = a2 - 4;
      *(_OWORD *)v20 = *(_OWORD *)(a2 - 3);
      a2 -= 4;
      if (llvm::StringRef::compare((uint64_t)v20, v5, v7) == -1)
        goto LABEL_9;
    }
    v10 = a2;
  }
  else
  {
    do
    {
      v10 = a2 - 4;
      *(_OWORD *)v20 = *(_OWORD *)(a2 - 3);
      a2 -= 4;
    }
    while (llvm::StringRef::compare((uint64_t)v20, v5, v7) != -1);
  }
LABEL_9:
  v11 = v9;
  if (v9 < v10)
  {
    v12 = v10;
    do
    {
      v14 = *((_OWORD *)v11 + 1);
      *(_OWORD *)v20 = *(_OWORD *)v11;
      v13 = *(_OWORD *)v20;
      *(_OWORD *)&v20[16] = v14;
      v15 = *(_OWORD *)((char *)v12 + 13);
      *(_OWORD *)v11 = *(_OWORD *)v12;
      *(_OWORD *)((char *)v11 + 13) = v15;
      *(_OWORD *)((char *)v12 + 13) = *(_OWORD *)&v20[13];
      *(_OWORD *)v12 = v13;
      do
      {
        v16 = *(_OWORD *)(v11 + 5);
        v11 += 4;
        *(_OWORD *)v20 = v16;
      }
      while (llvm::StringRef::compare((uint64_t)v20, v5, v7) == -1);
      do
      {
        v17 = *(_OWORD *)(v12 - 3);
        v12 -= 4;
        *(_OWORD *)v20 = v17;
      }
      while (llvm::StringRef::compare((uint64_t)v20, v5, v7) != -1);
    }
    while (v11 < v12);
  }
  result = (__int128 *)(v11 - 4);
  if (v11 - 4 != a1)
  {
    v19 = *result;
    *(_OWORD *)((char *)a1 + 13) = *(_OWORD *)((char *)v11 - 19);
    *(_OWORD *)a1 = v19;
  }
  *(v11 - 4) = v6;
  *(v11 - 3) = (uint64_t)v5;
  *(v11 - 2) = v7;
  *((_DWORD *)v11 - 2) = v8;
  *((_BYTE *)v11 - 4) = BYTE4(v8);
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  const void *v6;
  size_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  const void *v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  size_t v24;
  uint64_t v25;
  _BYTE v26[32];

  v4 = (a2 - a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(const void **)(a1 + 8);
      v7 = *(_QWORD *)(a1 + 16);
      *(_OWORD *)v26 = *(_OWORD *)(a2 - 24);
      if (llvm::StringRef::compare((uint64_t)v26, v6, v7) == -1)
      {
        v9 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)v26 = *(_OWORD *)a1;
        v8 = *(_OWORD *)v26;
        *(_OWORD *)&v26[16] = v9;
        v10 = *(_OWORD *)(a2 - 19);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 13) = v10;
        *(_OWORD *)(a2 - 32) = v8;
        *(_OWORD *)(a2 - 19) = *(_OWORD *)&v26[13];
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(a1, a1 + 32, a2 - 32);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(a1, a1 + 32, a1 + 64, (_OWORD *)(a2 - 32));
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(a1, a1 + 32, a1 + 64, a1 + 96, (_OWORD *)(a2 - 32));
      return 1;
    default:
      v11 = a1 + 64;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(a1, a1 + 32, a1 + 64);
      v12 = a1 + 96;
      if (a1 + 96 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(const void **)(v11 + 8);
    v16 = *(_QWORD *)(v11 + 16);
    *(_OWORD *)v26 = *(_OWORD *)(v12 + 8);
    if (llvm::StringRef::compare((uint64_t)v26, v15, v16) == -1)
    {
      v17 = *(_QWORD *)v12;
      v18 = *(_QWORD *)(v12 + 8);
      v19 = v13;
      v21 = *(_QWORD *)(v12 + 16);
      v20 = *(_QWORD *)(v12 + 24);
      while (1)
      {
        v22 = a1 + v19;
        *(_OWORD *)(v22 + 96) = *(_OWORD *)(a1 + v19 + 64);
        *(_OWORD *)(v22 + 109) = *(_OWORD *)(a1 + v19 + 77);
        if (v19 == -64)
          break;
        v23 = *(const void **)(v22 + 40);
        v24 = *(_QWORD *)(v22 + 48);
        *(_QWORD *)v26 = v18;
        *(_QWORD *)&v26[8] = v21;
        v19 -= 32;
        if (llvm::StringRef::compare((uint64_t)v26, v23, v24) != -1)
        {
          v25 = a1 + v19 + 96;
          goto LABEL_12;
        }
      }
      v25 = a1;
LABEL_12:
      *(_QWORD *)v25 = v17;
      *(_QWORD *)(v25 + 8) = v18;
      *(_QWORD *)(v25 + 16) = v21;
      *(_DWORD *)(v25 + 24) = v20;
      ++v14;
      *(_BYTE *)(v25 + 28) = BYTE4(v20);
      if (v14 == 8)
        return v12 + 32 == a2;
    }
    v11 = v12;
    v13 += 32;
    v12 += 32;
    if (v12 == a2)
      return 1;
  }
}

uint64_t llvm::StringRef::compare(uint64_t a1, const void *a2, size_t a3)
{
  size_t v3;
  size_t v4;
  int v5;
  unsigned int v7;

  v3 = a3;
  v4 = *(_QWORD *)(a1 + 8);
  if (a3 >= v4)
    a3 = *(_QWORD *)(a1 + 8);
  if (a3)
  {
    v5 = memcmp(*(const void **)a1, a2, a3);
    if (v5)
      return (v5 >> 31) | 1u;
  }
  if (v4 < v3)
    v7 = -1;
  else
    v7 = 1;
  if (v4 == v3)
    return 0;
  else
    return v7;
}

double std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  const void *v8;
  size_t v9;
  double result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  const void *v14;
  size_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  const void *v19;
  size_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[32];

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(a1, a2, a3);
  v8 = *(const void **)(a3 + 8);
  v9 = *(_QWORD *)(a3 + 16);
  *(_OWORD *)v24 = *(_OWORD *)((char *)a4 + 8);
  if (llvm::StringRef::compare((uint64_t)v24, v8, v9) == -1)
  {
    v12 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)v24 = *(_OWORD *)a3;
    v11 = *(_OWORD *)v24;
    *(_OWORD *)&v24[16] = v12;
    v13 = *(_OWORD *)((char *)a4 + 13);
    *(_OWORD *)a3 = *a4;
    *(_OWORD *)(a3 + 13) = v13;
    *a4 = v11;
    *(_OWORD *)((char *)a4 + 13) = *(_OWORD *)&v24[13];
    v14 = *(const void **)(a2 + 8);
    v15 = *(_QWORD *)(a2 + 16);
    *(_OWORD *)v24 = *(_OWORD *)(a3 + 8);
    if (llvm::StringRef::compare((uint64_t)v24, v14, v15) == -1)
    {
      v17 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)v24 = *(_OWORD *)a2;
      v16 = *(_OWORD *)v24;
      *(_OWORD *)&v24[16] = v17;
      v18 = *(_OWORD *)(a3 + 13);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 13) = v18;
      *(_OWORD *)a3 = v16;
      *(_OWORD *)(a3 + 13) = *(_OWORD *)&v24[13];
      v19 = *(const void **)(a1 + 8);
      v20 = *(_QWORD *)(a1 + 16);
      *(_OWORD *)v24 = *(_OWORD *)(a2 + 8);
      if (llvm::StringRef::compare((uint64_t)v24, v19, v20) == -1)
      {
        v22 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)v24 = *(_OWORD *)a1;
        v21 = *(_OWORD *)v24;
        *(_OWORD *)&v24[16] = v22;
        v23 = *(_OWORD *)(a2 + 13);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 13) = v23;
        *(_OWORD *)a2 = v21;
        result = *(double *)&v24[13];
        *(_OWORD *)(a2 + 13) = *(_OWORD *)&v24[13];
      }
    }
  }
  return result;
}

double std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5)
{
  const void *v10;
  size_t v11;
  double result;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  const void *v16;
  size_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  const void *v21;
  size_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  const void *v26;
  size_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[32];

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(a1, a2, a3, (_OWORD *)a4);
  v10 = *(const void **)(a4 + 8);
  v11 = *(_QWORD *)(a4 + 16);
  *(_OWORD *)v31 = *(_OWORD *)((char *)a5 + 8);
  if (llvm::StringRef::compare((uint64_t)v31, v10, v11) == -1)
  {
    v14 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)v31 = *(_OWORD *)a4;
    v13 = *(_OWORD *)v31;
    *(_OWORD *)&v31[16] = v14;
    v15 = *(_OWORD *)((char *)a5 + 13);
    *(_OWORD *)a4 = *a5;
    *(_OWORD *)(a4 + 13) = v15;
    *a5 = v13;
    *(_OWORD *)((char *)a5 + 13) = *(_OWORD *)&v31[13];
    v16 = *(const void **)(a3 + 8);
    v17 = *(_QWORD *)(a3 + 16);
    *(_OWORD *)v31 = *(_OWORD *)(a4 + 8);
    if (llvm::StringRef::compare((uint64_t)v31, v16, v17) == -1)
    {
      v19 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)v31 = *(_OWORD *)a3;
      v18 = *(_OWORD *)v31;
      *(_OWORD *)&v31[16] = v19;
      v20 = *(_OWORD *)(a4 + 13);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 13) = v20;
      *(_OWORD *)a4 = v18;
      *(_OWORD *)(a4 + 13) = *(_OWORD *)&v31[13];
      v21 = *(const void **)(a2 + 8);
      v22 = *(_QWORD *)(a2 + 16);
      *(_OWORD *)v31 = *(_OWORD *)(a3 + 8);
      if (llvm::StringRef::compare((uint64_t)v31, v21, v22) == -1)
      {
        v24 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)v31 = *(_OWORD *)a2;
        v23 = *(_OWORD *)v31;
        *(_OWORD *)&v31[16] = v24;
        v25 = *(_OWORD *)(a3 + 13);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 13) = v25;
        *(_OWORD *)a3 = v23;
        *(_OWORD *)(a3 + 13) = *(_OWORD *)&v31[13];
        v26 = *(const void **)(a1 + 8);
        v27 = *(_QWORD *)(a1 + 16);
        *(_OWORD *)v31 = *(_OWORD *)(a2 + 8);
        if (llvm::StringRef::compare((uint64_t)v31, v26, v27) == -1)
        {
          v29 = *(_OWORD *)(a1 + 16);
          *(_OWORD *)v31 = *(_OWORD *)a1;
          v28 = *(_OWORD *)v31;
          *(_OWORD *)&v31[16] = v29;
          v30 = *(_OWORD *)(a2 + 13);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 13) = v30;
          *(_OWORD *)a2 = v28;
          result = *(double *)&v31[13];
          *(_OWORD *)(a2 + 13) = *(_OWORD *)&v31[13];
        }
      }
    }
  }
  return result;
}

_OWORD *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *,VaryingInfo *>(uint64_t a1, _OWORD *a2, _OWORD *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  const void *v15;
  size_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 *v21;
  __int128 v22;
  __int128 *v23;
  __int128 v24;
  _BYTE v27[32];

  if ((_OWORD *)a1 != a2)
  {
    v8 = (uint64_t)a2 - a1;
    v9 = ((uint64_t)a2 - a1) >> 5;
    if ((uint64_t)a2 - a1 >= 33)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = a1 + 32 * v10;
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(a1, a4, v9, v12);
        v12 -= 32;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        v15 = *(const void **)(a1 + 8);
        v16 = *(_QWORD *)(a1 + 16);
        *(_OWORD *)v27 = *(_OWORD *)((char *)v14 + 8);
        if (llvm::StringRef::compare((uint64_t)v27, v15, v16) == -1)
        {
          v18 = v14[1];
          *(_OWORD *)v27 = *v14;
          v17 = *(_OWORD *)v27;
          *(_OWORD *)&v27[16] = v18;
          v19 = *(_OWORD *)(a1 + 13);
          *v14 = *(_OWORD *)a1;
          *(_OWORD *)((char *)v14 + 13) = v19;
          *(_OWORD *)a1 = v17;
          *(_OWORD *)(a1 + 13) = *(_OWORD *)&v27[13];
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 33)
    {
      v20 = (unint64_t)v8 >> 5;
      v21 = a2 - 2;
      do
      {
        v22 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)v27 = *(_OWORD *)a1;
        *(_OWORD *)&v27[16] = v22;
        v23 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>((_OWORD *)a1, a4, v20);
        if (v21 == v23)
        {
          *v23 = *(_OWORD *)v27;
          *(__int128 *)((char *)v23 + 13) = *(_OWORD *)&v27[13];
        }
        else
        {
          v24 = *v21;
          *(__int128 *)((char *)v23 + 13) = *(__int128 *)((char *)v21 + 13);
          *v23 = v24;
          *v21 = *(_OWORD *)v27;
          *(__int128 *)((char *)v21 + 13) = *(_OWORD *)&v27[13];
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(a1, (uint64_t)(v23 + 2), a4, ((uint64_t)v23 - a1 + 32) >> 5);
        }
        v21 -= 2;
      }
      while (v20-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  size_t v16;
  int v17;
  const void *v18;
  size_t v19;
  const void *v20;
  size_t v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  const void *v27;
  size_t v28;
  int v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v32 = v4;
    v33 = v5;
    v7 = a4;
    v8 = result;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (a4 - result) >> 5)
    {
      v11 = (a4 - result) >> 4;
      v12 = v11 + 1;
      v13 = result + 32 * (v11 + 1);
      v14 = v11 + 2;
      if (v11 + 2 < a3)
      {
        v15 = *(const void **)(v13 + 40);
        v16 = *(_QWORD *)(v13 + 48);
        v31 = *(_OWORD *)(v13 + 8);
        v17 = llvm::StringRef::compare((uint64_t)&v31, v15, v16);
        v13 += 32 * (v17 == -1);
        if (v17 == -1)
          v12 = v14;
      }
      v18 = *(const void **)(v7 + 8);
      v19 = *(_QWORD *)(v7 + 16);
      v31 = *(_OWORD *)(v13 + 8);
      result = llvm::StringRef::compare((uint64_t)&v31, v18, v19);
      if ((_DWORD)result != -1)
      {
        v20 = *(const void **)(v7 + 8);
        v30 = *(_QWORD *)v7;
        v21 = *(_QWORD *)(v7 + 16);
        v22 = *(_QWORD *)(v7 + 24);
        do
        {
          v23 = (_OWORD *)v7;
          v7 = v13;
          v24 = *(_OWORD *)v13;
          *(_OWORD *)((char *)v23 + 13) = *(_OWORD *)(v13 + 13);
          *v23 = v24;
          if (v9 < v12)
            break;
          v25 = (2 * v12) | 1;
          v13 = v8 + 32 * v25;
          v26 = 2 * v12 + 2;
          if (v26 < a3)
          {
            v27 = *(const void **)(v13 + 40);
            v28 = *(_QWORD *)(v13 + 48);
            v31 = *(_OWORD *)(v13 + 8);
            v29 = llvm::StringRef::compare((uint64_t)&v31, v27, v28);
            v13 += 32 * (v29 == -1);
            if (v29 == -1)
              v25 = v26;
          }
          v31 = *(_OWORD *)(v13 + 8);
          result = llvm::StringRef::compare((uint64_t)&v31, v20, v21);
          v12 = v25;
        }
        while ((_DWORD)result != -1);
        *(_QWORD *)v7 = v30;
        *(_QWORD *)(v7 + 8) = v20;
        *(_QWORD *)(v7 + 16) = v21;
        *(_DWORD *)(v7 + 24) = v22;
        *(_BYTE *)(v7 + 28) = BYTE4(v22);
      }
    }
  }
  return result;
}

_OWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  size_t v12;
  int v13;
  __int128 v14;
  __int128 v16;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v8 = &a1[2 * v5 + 2];
    v9 = (2 * v5) | 1;
    v10 = 2 * v5 + 2;
    if (v10 < a3)
    {
      v11 = (const void *)*((_QWORD *)v8 + 5);
      v12 = *((_QWORD *)v8 + 6);
      v16 = *(_OWORD *)((char *)v8 + 8);
      v13 = llvm::StringRef::compare((uint64_t)&v16, v11, v12);
      v8 += 2 * (v13 == -1);
      if (v13 == -1)
        v9 = v10;
    }
    v14 = *v8;
    *(_OWORD *)((char *)a1 + 13) = *(_OWORD *)((char *)v8 + 13);
    *a1 = v14;
    a1 = v8;
    v5 = v9;
  }
  while (v9 <= v7);
  return v8;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  const void *v10;
  size_t v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v6 = a4 - 2;
  if (a4 >= 2)
  {
    v20 = v4;
    v21 = v5;
    v8 = result;
    v9 = v6 >> 1;
    v10 = *(const void **)(a2 - 24);
    v11 = *(_QWORD *)(a2 - 16);
    v19 = *(_OWORD *)(result + 32 * (v6 >> 1) + 8);
    result = llvm::StringRef::compare((uint64_t)&v19, v10, v11);
    if ((_DWORD)result == -1)
    {
      v14 = *(_QWORD *)(a2 - 32);
      v13 = *(const void **)(a2 - 24);
      v12 = a2 - 32;
      v15 = *(_QWORD *)(v12 + 16);
      v16 = *(_QWORD *)(v12 + 24);
      do
      {
        v17 = (_OWORD *)v12;
        v12 = v8 + 32 * v9;
        v18 = *(_OWORD *)v12;
        *(_OWORD *)((char *)v17 + 13) = *(_OWORD *)(v12 + 13);
        *v17 = v18;
        if (!v9)
          break;
        v9 = (v9 - 1) >> 1;
        v19 = *(_OWORD *)(v8 + 32 * v9 + 8);
        result = llvm::StringRef::compare((uint64_t)&v19, v13, v15);
      }
      while ((_DWORD)result == -1);
      *(_QWORD *)v12 = v14;
      *(_QWORD *)(v12 + 8) = v13;
      *(_QWORD *)(v12 + 16) = v15;
      *(_DWORD *)(v12 + 24) = v16;
      *(_BYTE *)(v12 + 28) = BYTE4(v16);
    }
  }
  return result;
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x24268D8F0);
}

uint64_t createMTLStackOverflowPass(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  MetalModulePass::MetalModulePass(v2, (uint64_t)&MTLStackOverflowPass::ID, a1);
  *(_QWORD *)v2 = &off_25111E3A8;
  *(_QWORD *)(v2 + 184) = 0;
  *(_QWORD *)(v2 + 192) = 0;
  *(_DWORD *)(v2 + 200) = 0;
  return v2;
}

void sub_240FB5024(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x24268D8F0](v1, 0x10E1C409096A829);
  _Unwind_Resume(a1);
}

void MTLStackOverflowPass::~MTLStackOverflowPass(MTLStackOverflowPass *this)
{
  char *v2;

  *(_QWORD *)this = &off_25111E3A8;
  v2 = (char *)this + 160;
  llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::~DenseMap((uint64_t)this + 184);
  *(_QWORD *)this = &off_25111E050;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 136);
  llvm::Pass::~Pass(this);
}

{
  char *v2;

  *(_QWORD *)this = &off_25111E3A8;
  v2 = (char *)this + 160;
  llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::~DenseMap((uint64_t)this + 184);
  *(_QWORD *)this = &off_25111E050;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 136);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x24268D8F0);
}

uint64_t MTLStackOverflowPass::runOnModule(MTLStackOverflowPass *this, llvm::Module *a2)
{
  char *v4;
  llvm::Value **v5;
  llvm::Value **v6;
  uint64_t v7;
  llvm::Value **v8;
  llvm::Value **v9;
  llvm::Value *v10;

  v4 = (char *)this + 184;
  llvm::DenseMapBase<llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>,llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::clear((uint64_t)this + 184);
  MetalModulePass::runOnModule(this, a2);
  MTLStackOverflowPass::loadStackDepth((llvm::Type ****)this);
  if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 8) + 72) + 24) & 4) != 0)
  {
    MTLStackOverflowPass::findRecursiveCalls(this);
    MTLStackOverflowPass::findIndirectCalls((uint64_t)this);
    v5 = (llvm::Value **)llvm::detail::DenseSetImpl<llvm::CallInst *,llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>,llvm::DenseMapInfo<llvm::CallInst *,void>>::begin((uint64_t)v4);
    v7 = *((_QWORD *)this + 23) + 8 * *((unsigned int *)this + 50);
    if ((llvm::Value **)v7 != v5)
    {
      v8 = v5;
      v9 = v6;
      do
      {
        v10 = *v8++;
        MTLStackOverflowPass::instrumentIndirectCall((uint64_t)this, v10);
        while (v8 != v9)
        {
          if (((unint64_t)*v8 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_9;
          ++v8;
        }
        v8 = v9;
LABEL_9:
        ;
      }
      while (v8 != (llvm::Value **)v7);
    }
  }
  return 1;
}

uint64_t llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::init(uint64_t result, int a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = result;
  if (a2)
  {
    v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    *(_DWORD *)(result + 16) = v4;
    result = MEMORY[0x24268CD5C](8 * v4, 8);
    *(_QWORD *)v2 = result;
    *(_QWORD *)(v2 + 8) = 0;
    v5 = *(unsigned int *)(v2 + 16);
    if ((_DWORD)v5)
    {
      v6 = 8 * v5;
      do
      {
        *(_QWORD *)result = -4096;
        result += 8;
        v6 -= 8;
      }
      while (v6);
    }
  }
  else
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)(result + 16) = 0;
  }
  return result;
}

uint64_t llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::~DenseMap(uint64_t a1)
{
  llvm::deallocate_buffer(*(llvm **)a1, (void *)(8 * *(unsigned int *)(a1 + 16)));
  return a1;
}

void MTLStackOverflowPass::loadStackDepth(llvm::Type ****this)
{
  uint64_t EntryFunction;
  uint64_t v3;
  llvm::BasicBlock *v4;
  uint64_t FirstInsertionPt;
  llvm::LLVMContext *v6;
  llvm::Type ***v7;
  llvm::Type **v8;
  uint64_t inserted;
  void *v10[2];
  _QWORD v11[6];
  llvm::Type *Context;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  __int16 v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x24BDAC8D0];
  EntryFunction = MetalModulePass::getEntryFunction((MetalModulePass *)this);
  if (EntryFunction)
  {
    v3 = *(_QWORD *)(EntryFunction + 80);
    if (v3)
      v4 = (llvm::BasicBlock *)(v3 - 24);
    else
      v4 = 0;
    v10[0] = v11;
    v10[1] = (void *)0x200000000;
    Context = (llvm::Type *)llvm::BasicBlock::getContext(v4);
    v13 = &v21;
    v14 = v22;
    v15 = 0;
    v16 = 0;
    v17 = 512;
    v18 = 7;
    v19 = 0;
    v20 = 0;
    v21 = MEMORY[0x24BED83B8] + 16;
    v22[0] = MEMORY[0x24BED83F0] + 16;
    v11[4] = v4;
    v11[5] = (char *)v4 + 40;
    FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v4);
    llvm::IRBuilderBase::SetInsertPoint((uint64_t)v10, (uint64_t)v4, FirstInsertionPt);
    v7 = this[8];
    if (v7[6])
    {
LABEL_6:
      llvm::Type::getInt32Ty(Context, v6);
      v8 = (llvm::Type **)llvm::ConstantInt::get();
      inserted = MTLBoundsCheck::SharedPassData::getOrInsertStackDepthGV(this[8]);
      llvm::IRBuilderBase::CreateAlignedStore((uint64_t)v10, v8, inserted, 0);
    }
    else if (v7[5])
    {
      switch(*((_DWORD *)this + 30))
      {
        case 0:
        case 1:
        case 5:
        case 6:
          goto LABEL_6;
        default:
          break;
      }
    }
    llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v22);
    llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v21);
    if (v10[0] != v11)
      free(v10[0]);
  }
}

void sub_240FB5468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder(&a9);
  _Unwind_Resume(a1);
}

uint64_t MTLStackOverflowPass::findRecursiveCalls(MTLStackOverflowPass *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD v9[2];
  void *v10[2];
  void *v11[2];
  __int128 v12;
  void *__p[2];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  char *v20;
  void *v21;
  void *v22;
  _BYTE v23[80];
  uint64_t v24;

  MEMORY[0x24268D32C](v23, *((_QWORD *)this + 6));
  llvm::scc_iterator<llvm::CallGraph *,llvm::GraphTraits<llvm::CallGraph *>>::scc_iterator((uint64_t)&v15, v24);
  v14 = 0;
  v12 = 0u;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)v11 = 0u;
  memset(v9, 0, sizeof(v9));
  while (!llvm::scc_iterator<llvm::CallGraph *,llvm::GraphTraits<llvm::CallGraph *>>::operator==(&v15, v9))
  {
    v3 = (char *)v19;
    v2 = v20;
    if ((unint64_t)(v20 - (_BYTE *)v19) <= 8)
    {
      while (v3 != v2)
      {
        v5 = *(_QWORD *)v3;
        if (*(_QWORD *)(*(_QWORD *)v3 + 8) && (llvm::Function::hasFnAttribute() & 1) == 0)
        {
          v6 = *(_QWORD *)(v5 + 16);
          v7 = *(_QWORD *)(v5 + 24);
          if (v6 != v7)
          {
            while (*(_QWORD *)(v6 + 32) != v5)
            {
              v6 += 40;
              if (v6 == v7)
                goto LABEL_18;
            }
          }
          if (v6 != v7)
            MTLStackOverflowPass::findAllCallsTo((uint64_t)this, *(llvm::Function **)(v5 + 8));
        }
LABEL_18:
        v3 += 8;
      }
    }
    else
    {
      while (v3 != v2)
      {
        v4 = *(_QWORD *)v3;
        if (*(_QWORD *)(*(_QWORD *)v3 + 8))
        {
          if ((llvm::Function::hasFnAttribute() & 1) == 0)
            MTLStackOverflowPass::findAllCallsTo((uint64_t)this, *(llvm::Function **)(v4 + 8));
        }
        v3 += 8;
      }
    }
    llvm::scc_iterator<llvm::CallGraph *,llvm::GraphTraits<llvm::CallGraph *>>::GetNextSCC(&v15);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v11[1])
  {
    *(void **)&v12 = v11[1];
    operator delete(v11[1]);
  }
  if (v10[0])
  {
    v10[1] = v10[0];
    operator delete(v10[0]);
  }
  llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::~DenseMap((uint64_t)v9 + 8);
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  if (v19)
  {
    v20 = (char *)v19;
    operator delete(v19);
  }
  if (v17)
  {
    v18 = v17;
    operator delete(v17);
  }
  llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::~DenseMap((uint64_t)&v16);
  return MEMORY[0x24268D338](v23);
}

void sub_240FB5624(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x24268D338](v1 - 144);
  _Unwind_Resume(a1);
}

uint64_t MTLStackOverflowPass::findIndirectCalls(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  llvm::GlobalValue *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *i;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  llvm::Value *v15;
  unint64_t v16;
  _QWORD *v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  const void *Name;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD v28[3];

  v1 = *(_QWORD *)(this + 48);
  v2 = *(_QWORD *)(v1 + 32);
  v26 = v1 + 24;
  if (v2 != v1 + 24)
  {
    v3 = this + 184;
    while (1)
    {
      v4 = v2 ? (llvm::GlobalValue *)(v2 - 56) : 0;
      this = llvm::GlobalValue::isDeclaration(v4);
      if ((this & 1) == 0)
        break;
LABEL_7:
      v2 = *(_QWORD *)(v2 + 8);
      if (v2 == v26)
        return this;
    }
    v5 = (_QWORD *)((char *)v4 + 72);
    v6 = (_QWORD *)*((_QWORD *)v4 + 10);
LABEL_10:
    if (v6 == v5)
      goto LABEL_7;
    v7 = v6 - 3;
    if (!v6)
      v7 = 0;
    v8 = v7 + 5;
    for (i = (_QWORD *)v7[6]; ; i = (_QWORD *)i[1])
    {
      if (i == v8)
      {
        v6 = (_QWORD *)v6[1];
        goto LABEL_10;
      }
      v10 = i - 3;
      if (!i)
        v10 = 0;
      v11 = *((unsigned __int8 *)v10 + 16);
      if (v11 != 84)
        v10 = 0;
      v27 = v10;
      if (!i || v11 != 84)
        continue;
      v12 = *(v10 - 4);
      if (!v12 || *(_BYTE *)(v12 + 16))
        goto LABEL_27;
      v13 = *(_QWORD *)(v12 + 24);
      v14 = v10[9];
      v15 = v13 == v14 ? (llvm::Value *)v12 : 0;
      if (v13 != v14)
        goto LABEL_27;
      this = llvm::Value::getName(v15);
      if (v16 < 0xD)
        break;
      if (*(_QWORD *)this != 0x65746E692E726961 || *(_QWORD *)(this + 5) != 0x746365737265746ELL)
        goto LABEL_36;
      v19 = v27;
      v28[0] = this;
      v28[1] = v16;
      if (llvm::StringRef::find() == -1)
        v20 = 5;
      else
        v20 = 6;
      this = llvm::StringRef::find();
      if (this != -1 || (this = llvm::StringRef::find(), this != -1))
        ++v20;
      v21 = v19[4 * v20 + -4 * (*((_DWORD *)v19 + 5) & 0x7FFFFFF)];
      v22 = *(unsigned __int8 *)(v21 + 16);
      if (!v21 || v22 != 19)
      {
        if (!v21
          || v22 != 84
          || (v23 = *(_QWORD *)(v21 - 32)) == 0
          || *(_BYTE *)(v23 + 16)
          || *(_QWORD *)(v23 + 24) != *(_QWORD *)(v21 + 72)
          || (Name = (const void *)llvm::Value::getName((llvm::Value *)v23), v25 < 0x28)
          || (this = memcmp(Name, "air.get_null_intersection_function_table", 0x28uLL), (_DWORD)this))
        {
LABEL_27:
          this = llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>,llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v3, &v27, (uint64_t)v28);
          continue;
        }
      }
LABEL_28:
      ;
    }
    if (v16 >= 4)
    {
LABEL_36:
      if (*(_DWORD *)this == 779250017)
        goto LABEL_28;
      if (v16 >= 5 && *(_DWORD *)this == 1836477548 && *(_BYTE *)(this + 4) == 46)
        goto LABEL_28;
      if (*(_DWORD *)this == 778859629)
        goto LABEL_28;
    }
    if ((*((_BYTE *)v15 + 32) & 0xF) == 0)
    {
      this = llvm::GlobalValue::isDeclaration(v15);
      if ((_DWORD)this)
        goto LABEL_27;
    }
    goto LABEL_28;
  }
  return this;
}

_QWORD *llvm::detail::DenseSetImpl<llvm::CallInst *,llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>,llvm::DenseMapInfo<llvm::CallInst *,void>>::begin(uint64_t a1)
{
  int v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = *(_DWORD *)(a1 + 8);
  result = *(_QWORD **)a1;
  v4 = *(unsigned int *)(a1 + 16);
  v5 = &result[v4];
  if (!v2)
    return v5;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while ((*result | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      ++result;
      v6 -= 8;
      if (!v6)
        return v5;
    }
  }
  return result;
}

void MTLStackOverflowPass::instrumentIndirectCall(uint64_t a1, llvm::Value *a2)
{
  uint64_t v4;
  llvm::BranchInst *v5;
  llvm::BasicBlock *v6;
  llvm::BasicBlock *v7;
  llvm::BasicBlock *v8;
  uint64_t v9;
  llvm::Instruction *v10;
  uint64_t v11;
  llvm::Instruction *v12;
  uint64_t inserted;
  llvm::Type *v14;
  llvm::Value *AlignedLoad;
  llvm::LLVMContext *v16;
  llvm::Value *v17;
  llvm::Type **Sub;
  uint64_t v19;
  llvm::LLVMContext *v20;
  uint64_t v21;
  llvm::BasicBlock *ICmp;
  llvm::Instruction *v23;
  llvm::Instruction *v24;
  llvm::Instruction *v25;
  uint64_t v26;
  llvm *v27;
  uint64_t v28;
  llvm *v29;
  uint64_t FirstInsertionPt;
  llvm::Instruction *v31;
  uint64_t v32;
  llvm::BasicBlock *v33;
  uint64_t v34;
  llvm::Value *v35;
  uint64_t v36;
  llvm::Type *v37;
  uint64_t v38;
  llvm::Type *v39;
  uint64_t v40;
  llvm::ConstantPointerNull *Int8PtrTy;
  llvm::PointerType *v42;
  uint64_t v43;
  uint64_t v44;
  llvm::Type *v45;
  llvm::Value *v46;
  llvm::BasicBlock *v47;
  const llvm::Twine *ImageIDFunction;
  uint64_t v49;
  llvm::Value *v50;
  MTLBoundsCheck::SharedPassData *v51;
  llvm::MDString *NameOfParentFunction;
  const void *v53;
  unsigned int v54;
  uint64_t v55;
  llvm::Instruction *v56;
  llvm::Type *v57;
  llvm::Instruction *v58;
  llvm::PHINode *PHI;
  llvm::Type *v60;
  llvm::Value *NullValue;
  llvm::Instruction *FirstNonPHI;
  llvm::Type *v63;
  llvm::Value *v64;
  llvm::LLVMContext *v65;
  llvm::Value *v66;
  llvm::Type **Add;
  uint64_t v68;
  llvm::BranchInst *v69;
  llvm::Value *v70;
  llvm::Value *v71;
  _BYTE v72[32];
  __int16 v73;
  llvm::BasicBlock *v74;
  void *v75[2];
  uint64_t v76;
  __int16 v77;
  uint64_t v78;
  uint64_t v79;
  void *v80[2];
  _BYTE v81[32];
  uint64_t v82;
  uint64_t v83;
  llvm::Type *Context;
  uint64_t *v85;
  _QWORD *v86;
  uint64_t v87;
  int v88;
  __int16 v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD v94[3];

  v94[1] = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)a2 + 5);
  v80[0] = v81;
  v80[1] = (void *)0x200000000;
  Context = (llvm::Type *)llvm::BasicBlock::getContext((llvm::BasicBlock *)v4);
  v85 = &v93;
  v86 = v94;
  v87 = 0;
  v88 = 0;
  v89 = 512;
  v90 = 7;
  v91 = 0;
  v92 = 0;
  v93 = MEMORY[0x24BED83B8] + 16;
  v94[0] = MEMORY[0x24BED83F0] + 16;
  v82 = v4;
  v83 = v4 + 40;
  v5 = (llvm::BranchInst *)llvm::BasicBlock::splitBasicBlock();
  v6 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock();
  v74 = 0;
  v7 = (llvm::BasicBlock *)llvm::Value::getContext(a2);
  v75[0] = "error";
  v77 = 259;
  v74 = (llvm::BasicBlock *)llvm::BasicBlock::Create(v7, (llvm::LLVMContext *)v75, *(const llvm::Twine **)(v4 + 56), 0, v8);
  llvm::BasicBlock::moveBefore();
  v9 = *(_QWORD *)(v4 + 40);
  if (v9 == v4 + 40)
  {
    v12 = 0;
  }
  else
  {
    v10 = (llvm::Instruction *)(v9 - 24);
    if (v9)
      v11 = v9 - 24;
    else
      v11 = 0;
    if (*(unsigned __int8 *)(v11 + 16) - 29 >= 0xB)
      v12 = 0;
    else
      v12 = v10;
  }
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)v80, v12);
  inserted = MTLBoundsCheck::SharedPassData::getOrInsertStackDepthGV(*(llvm::Type ****)(a1 + 64));
  v14 = *(llvm::Type **)(inserted + 24);
  v77 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v80, v14, inserted, 0, 0, (uint64_t)v75);
  llvm::Type::getInt32Ty(Context, v16);
  v17 = (llvm::Value *)llvm::ConstantInt::get();
  v77 = 257;
  Sub = (llvm::Type **)llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)v80, AlignedLoad, v17, (const llvm::Twine *)v75, 0, 0);
  v19 = MTLBoundsCheck::SharedPassData::getOrInsertStackDepthGV(*(llvm::Type ****)(a1 + 64));
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t)v80, Sub, v19, 0);
  llvm::Type::getInt32Ty(Context, v20);
  v21 = llvm::ConstantInt::get();
  v77 = 257;
  ICmp = (llvm::BasicBlock *)llvm::IRBuilderBase::CreateICmp((uint64_t)v80, 40, Sub, v21, (uint64_t)v75);
  v24 = (llvm::Instruction *)llvm::BranchInst::Create(v74, v6, ICmp, 0, v23);
  v26 = *(_QWORD *)(v82 + 40);
  if (v26 == v82 + 40)
  {
    v29 = 0;
  }
  else
  {
    v27 = (llvm *)(v26 - 24);
    if (v26)
      v28 = v26 - 24;
    else
      v28 = 0;
    if (*(unsigned __int8 *)(v28 + 16) - 29 >= 0xB)
      v29 = 0;
    else
      v29 = v27;
  }
  llvm::ReplaceInstWithInst(v29, v24, v25);
  FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v74);
  llvm::IRBuilderBase::SetInsertPoint((uint64_t)v80, (uint64_t)v74, FirstInsertionPt);
  v32 = llvm::BranchInst::Create(v5, 0, v31);
  v77 = 257;
  llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)v80, v32, (uint64_t)v75);
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 72) + 20) & 2) != 0)
  {
    MTLIRBuilder::MTLIRBuilder<llvm::BasicBlock *&>((uint64_t)v75, &v74);
    v33 = v74;
    v34 = llvm::BasicBlock::getFirstInsertionPt(v74);
    llvm::IRBuilderBase::SetInsertPoint((uint64_t)v75, (uint64_t)v33, v34);
    MTLBoundsCheck::SharedPassData::indexForInstruction(*(MTLBoundsCheck::SharedPassData **)(a1 + 64), a2);
    v35 = (llvm::Value *)llvm::ConstantInt::get();
    v36 = MTLBoundsCheck::SharedPassData::getOrInsertReportBufferGV(*(llvm::Type ****)(a1 + 64));
    v37 = *(llvm::Type **)(v36 + 24);
    v73 = 257;
    v71 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v75, v37, v36, 0, 0, (uint64_t)v72);
    v38 = MTLBoundsCheck::SharedPassData::getOrInsertDrawIDBufferGV(*(MTLBoundsCheck::SharedPassData **)(a1 + 64));
    v39 = *(llvm::Type **)(v38 + 24);
    v73 = 257;
    v70 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v75, v39, v38, 0, 0, (uint64_t)v72);
    v40 = *(_QWORD *)(a1 + 64);
    v69 = v5;
    if ((*(_BYTE *)(*(_QWORD *)(v40 + 72) + 21) & 2) != 0)
    {
      v44 = MTLBoundsCheck::SharedPassData::getOrInsertStackTraceGV((llvm::Type ***)v40);
      v45 = *(llvm::Type **)(v44 + 24);
      v73 = 257;
      v43 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v75, v45, v44, 0, 0, (uint64_t)v72);
    }
    else
    {
      Int8PtrTy = (llvm::ConstantPointerNull *)llvm::Type::getInt8PtrTy(*(llvm::Type **)(a1 + 40), 0);
      v43 = llvm::ConstantPointerNull::get(Int8PtrTy, v42);
    }
    v46 = (llvm::Value *)v43;
    v47 = v6;
    ImageIDFunction = MTLBoundsCheck::SharedPassData::getOrInsertGetImageIDFunction(*(MTLBoundsCheck::SharedPassData **)(a1 + 64));
    if (ImageIDFunction)
      v49 = *((_QWORD *)ImageIDFunction + 3);
    else
      v49 = 0;
    v73 = 257;
    v50 = (llvm::Value *)llvm::IRBuilderBase::CreateCall((uint64_t)v75, v49, (uint64_t)ImageIDFunction, 0, 0, (uint64_t)v72, 0);
    v51 = *(MTLBoundsCheck::SharedPassData **)(a1 + 64);
    NameOfParentFunction = MTLBoundsCheck::SharedPassData::getNameOfParentFunction(v51, a2);
    v54 = MTLBoundsCheck::SharedPassData::indexForString((uint64_t)v51, NameOfParentFunction, v53);
    MTLIRBuilder::CreateStackOverflowCall((MTLIRBuilder *)v75, v71, v70, v46, v50, v54, v35);
    llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)&v79);
    llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v78);
    if (v75[0] != &v76)
      free(v75[0]);
    v6 = v47;
    v5 = v69;
  }
  if (*(_BYTE *)(*(_QWORD *)a2 + 8) != 7)
  {
    v55 = llvm::BasicBlock::getFirstInsertionPt(v5);
    if (v55)
      v56 = (llvm::Instruction *)(v55 - 24);
    else
      v56 = 0;
    llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)v80, v56);
    v57 = *(llvm::Type **)a2;
    v77 = 257;
    PHI = (llvm::PHINode *)llvm::IRBuilderBase::CreatePHI((llvm::IRBuilderBase *)v80, v57, (llvm::Type *)2, (const llvm::Twine *)v75, v58);
    llvm::Value::replaceAllUsesWith();
    llvm::PHINode::addIncoming(PHI, a2, v6);
    NullValue = (llvm::Value *)llvm::Constant::getNullValue(*(llvm::Constant **)a2, v60);
    llvm::PHINode::addIncoming(PHI, NullValue, v74);
  }
  FirstNonPHI = (llvm::Instruction *)llvm::BasicBlock::getFirstNonPHI(v5);
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)v80, FirstNonPHI);
  v63 = *(llvm::Type **)(inserted + 24);
  v77 = 257;
  v64 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v80, v63, inserted, 0, 0, (uint64_t)v75);
  llvm::Type::getInt32Ty(Context, v65);
  v66 = (llvm::Value *)llvm::ConstantInt::get();
  v77 = 257;
  Add = (llvm::Type **)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)v80, v64, v66, (const llvm::Twine *)v75, 0, 0);
  v68 = MTLBoundsCheck::SharedPassData::getOrInsertStackDepthGV(*(llvm::Type ****)(a1 + 64));
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t)v80, Add, v68, 0);
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v94);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v93);
  if (v80[0] != v81)
    free(v80[0]);
}

void sub_240FB5FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder((void **)va);
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder((void **)(v11 - 232));
  _Unwind_Resume(a1);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>,llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::clear(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (*(_QWORD *)(result + 8))
  {
    v1 = *(unsigned int *)(result + 16);
    if (v1 <= 4 * *(_DWORD *)(result + 8) || v1 < 0x41)
    {
      if ((_DWORD)v1)
      {
        v2 = *(_QWORD **)result;
        v3 = 8 * v1;
        do
        {
          *v2++ = -4096;
          v3 -= 8;
        }
        while (v3);
      }
      *(_QWORD *)(result + 8) = 0;
    }
    else
    {
      return llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::shrink_and_clear(result);
    }
  }
  return result;
}

uint64_t llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::shrink_and_clear(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  llvm *v6;
  uint64_t v7;

  v1 = result;
  v2 = *(unsigned int *)(result + 16);
  v3 = *(_DWORD *)(result + 8);
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 == (_DWORD)v2)
  {
    *(_QWORD *)(result + 8) = 0;
    if ((_DWORD)v2)
    {
      v6 = *(llvm **)result;
      v7 = 8 * v2;
      do
      {
        *(_QWORD *)v6 = -4096;
        v6 = (llvm *)((char *)v6 + 8);
        v7 -= 8;
      }
      while (v7);
    }
  }
  else
  {
    llvm::deallocate_buffer(*(llvm **)result, (void *)(8 * v2));
    return llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::init(v1, v5);
  }
  return result;
}

void llvm::IRBuilderBase::SetInsertPoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(a1 + 48) = a2;
  *(_QWORD *)(a1 + 56) = a3;
  if (a2 + 40 != a3)
  {
    v4 = a3 - 24;
    if (!a3)
      v4 = 0;
    v6 = *(_QWORD *)(v4 + 48);
    if (v6)
    {
      llvm::MetadataTracking::track();
      v5 = v6;
    }
    else
    {
      v5 = 0;
    }
    llvm::IRBuilderBase::AddOrRemoveMetadataToCopy(a1, 0, v5);
    llvm::TrackingMDRef::~TrackingMDRef((llvm::TrackingMDRef *)&v6);
  }
}

void sub_240FB61A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  llvm::TrackingMDRef::~TrackingMDRef((llvm::TrackingMDRef *)va);
  _Unwind_Resume(a1);
}

uint64_t MTLStackOverflowPass::findAllCallsTo(uint64_t this, llvm::Function *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[31];

  v2 = *((_QWORD *)a2 + 1);
  if (v2)
  {
    v3 = this + 184;
    do
    {
      v4 = *(_QWORD *)(v2 + 24);
      if (*(_BYTE *)(v4 + 16) != 84)
        v4 = 0;
      v5 = v4;
      if (v4)
        this = llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>,llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v3, &v5, (uint64_t)v6);
      v2 = *(_QWORD *)(v2 + 8);
    }
    while (v2);
  }
  return this;
}

_QWORD *llvm::scc_iterator<llvm::CallGraph *,llvm::GraphTraits<llvm::CallGraph *>>::~scc_iterator(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[7];
  if (v3)
  {
    a1[8] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[4];
  if (v4)
  {
    a1[5] = v4;
    operator delete(v4);
  }
  llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::~DenseMap((uint64_t)(a1 + 1));
  return a1;
}

uint64_t llvm::scc_iterator<llvm::CallGraph *,llvm::GraphTraits<llvm::CallGraph *>>::scc_iterator(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  llvm::scc_iterator<llvm::CallGraph *,llvm::GraphTraits<llvm::CallGraph *>>::DFSVisitOne((int *)a1, a2);
  llvm::scc_iterator<llvm::CallGraph *,llvm::GraphTraits<llvm::CallGraph *>>::GetNextSCC((_QWORD *)a1);
  return a1;
}

void sub_240FB62D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v4;
  void *v6;

  v6 = *(void **)(v1 + 80);
  if (v6)
  {
    *(_QWORD *)(v1 + 88) = v6;
    operator delete(v6);
  }
  llvm::scc_iterator<llvm::CallGraph *,llvm::GraphTraits<llvm::CallGraph *>>::scc_iterator(v4, v3, v1);
  llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::~DenseMap(v2);
  _Unwind_Resume(a1);
}

void llvm::scc_iterator<llvm::CallGraph *,llvm::GraphTraits<llvm::CallGraph *>>::DFSVisitOne(int *a1, uint64_t a2)
{
  int v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  uint64_t v35;

  v35 = a2;
  v3 = *a1 + 1;
  *a1 = v3;
  *((_DWORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>,llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::FindAndConstruct((uint64_t *)a1 + 1, &v35)+ 2) = v3;
  v4 = *((_QWORD *)a1 + 6);
  v5 = (_QWORD *)*((_QWORD *)a1 + 5);
  if ((unint64_t)v5 >= v4)
  {
    v7 = *((_QWORD *)a1 + 4);
    v8 = ((uint64_t)v5 - v7) >> 3;
    if ((unint64_t)(v8 + 1) >> 61)
      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
    v9 = v4 - v7;
    v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)(a1 + 12), v11);
    else
      v12 = 0;
    v13 = &v12[8 * v8];
    v14 = &v12[8 * v11];
    *(_QWORD *)v13 = v35;
    v6 = v13 + 8;
    v16 = (char *)*((_QWORD *)a1 + 4);
    v15 = (char *)*((_QWORD *)a1 + 5);
    if (v15 != v16)
    {
      do
      {
        v17 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *((_QWORD *)v13 - 1) = v17;
        v13 -= 8;
      }
      while (v15 != v16);
      v15 = (char *)*((_QWORD *)a1 + 4);
    }
    *((_QWORD *)a1 + 4) = v13;
    *((_QWORD *)a1 + 5) = v6;
    *((_QWORD *)a1 + 6) = v14;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v5 = v35;
    v6 = v5 + 1;
  }
  *((_QWORD *)a1 + 5) = v6;
  v18 = v35;
  v19 = *(_QWORD *)(v35 + 16);
  v20 = *a1;
  v21 = *((_QWORD *)a1 + 11);
  v22 = *((_QWORD *)a1 + 12);
  if (v21 >= v22)
  {
    v24 = *((_QWORD *)a1 + 10);
    v25 = (uint64_t)(v21 - v24) >> 5;
    v26 = v25 + 1;
    if ((unint64_t)(v25 + 1) >> 59)
      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
    v27 = v22 - v24;
    if (v27 >> 4 > v26)
      v26 = v27 >> 4;
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFE0)
      v28 = 0x7FFFFFFFFFFFFFFLL;
    else
      v28 = v26;
    if (v28)
      v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<VaryingInfo>>((uint64_t)(a1 + 24), v28);
    else
      v29 = 0;
    v30 = &v29[32 * v25];
    v31 = &v29[32 * v28];
    *(_QWORD *)v30 = v18;
    *((_QWORD *)v30 + 1) = v19;
    *((_QWORD *)v30 + 2) = llvm::GraphTraits<llvm::CallGraphNode *>::CGNGetValue;
    *((_DWORD *)v30 + 6) = v20;
    v23 = v30 + 32;
    v33 = (char *)*((_QWORD *)a1 + 10);
    v32 = (char *)*((_QWORD *)a1 + 11);
    if (v32 != v33)
    {
      do
      {
        v34 = *((_OWORD *)v32 - 2);
        *(_OWORD *)(v30 - 20) = *(_OWORD *)(v32 - 20);
        *((_OWORD *)v30 - 2) = v34;
        v30 -= 32;
        v32 -= 32;
      }
      while (v32 != v33);
      v32 = (char *)*((_QWORD *)a1 + 10);
    }
    *((_QWORD *)a1 + 10) = v30;
    *((_QWORD *)a1 + 11) = v23;
    *((_QWORD *)a1 + 12) = v31;
    if (v32)
      operator delete(v32);
  }
  else
  {
    *(_QWORD *)v21 = v35;
    *(_QWORD *)(v21 + 8) = v19;
    *(_QWORD *)(v21 + 16) = llvm::GraphTraits<llvm::CallGraphNode *>::CGNGetValue;
    *(_DWORD *)(v21 + 24) = v20;
    v23 = (char *)(v21 + 32);
  }
  *((_QWORD *)a1 + 11) = v23;
}

_QWORD *llvm::scc_iterator<llvm::CallGraph *,llvm::GraphTraits<llvm::CallGraph *>>::GetNextSCC(_QWORD *result)
{
  char **v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  v1 = (char **)(result + 7);
  result[8] = result[7];
  if (result[10] != result[11])
  {
    v2 = result;
    v3 = result + 1;
    while (1)
    {
      llvm::scc_iterator<llvm::CallGraph *,llvm::GraphTraits<llvm::CallGraph *>>::DFSVisitChildren((uint64_t)v2);
      v20 = 0;
      v5 = v2[10];
      v4 = v2[11];
      v20 = *(_QWORD *)(v4 - 32);
      v6 = *(_DWORD *)(v4 - 8);
      v2[11] = v4 - 32;
      if (v5 != v4 - 32 && *(_DWORD *)(v4 - 40) > v6)
        *(_DWORD *)(v4 - 40) = v6;
      result = llvm::DenseMapBase<llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>,llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::FindAndConstruct(v3, &v20);
      if (v6 == *((_DWORD *)result + 2))
        break;
      if (v2[10] == v2[11])
        return result;
    }
    v7 = (_QWORD *)v2[8];
    do
    {
      v8 = v2[5];
      v9 = v2[9];
      if ((unint64_t)v7 >= v9)
      {
        v11 = ((char *)v7 - *v1) >> 3;
        if ((unint64_t)(v11 + 1) >> 61)
          std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
        v12 = v9 - (_QWORD)*v1;
        v13 = v12 >> 2;
        if (v12 >> 2 <= (unint64_t)(v11 + 1))
          v13 = v11 + 1;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
          v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)(v2 + 9), v14);
        else
          v15 = 0;
        v16 = &v15[8 * v11];
        *(_QWORD *)v16 = *(_QWORD *)(v8 - 8);
        v10 = v16 + 8;
        v18 = (char *)v2[7];
        v17 = (char *)v2[8];
        if (v17 != v18)
        {
          do
          {
            v19 = *((_QWORD *)v17 - 1);
            v17 -= 8;
            *((_QWORD *)v16 - 1) = v19;
            v16 -= 8;
          }
          while (v17 != v18);
          v17 = *v1;
        }
        v2[7] = v16;
        v2[8] = v10;
        v2[9] = &v15[8 * v14];
        if (v17)
          operator delete(v17);
      }
      else
      {
        *v7 = *(_QWORD *)(v8 - 8);
        v10 = v7 + 1;
      }
      v2[8] = v10;
      v2[5] -= 8;
      result = llvm::DenseMapBase<llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>,llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::FindAndConstruct(v3, v10 - 1);
      *((_DWORD *)result + 2) = -1;
      v7 = (_QWORD *)v2[8];
    }
    while (*(v7 - 1) != v20);
  }
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>,llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::FindAndConstruct(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>,llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::LookupBucketFor<llvm::CallGraphNode *>(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>,llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::InsertIntoBucketImpl<llvm::CallGraphNode *>((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    *((_DWORD *)v5 + 2) = 0;
  }
  return v5;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>,llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::LookupBucketFor<llvm::CallGraphNode *>(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 16 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 16 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_5;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>,llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::InsertIntoBucketImpl<llvm::CallGraphNode *>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>,llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::LookupBucketFor<llvm::CallGraphNode *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x24268CD5C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>,llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::moveFromOldBuckets(a1, (uint64_t)v4, (uint64_t)v4 + 16 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>,llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::moveFromOldBuckets(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = llvm::DenseMapBase<llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>,llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::LookupBucketFor<llvm::CallGraphNode *>((uint64_t *)v5, (_QWORD *)a2, &v10);
      v9 = v10;
      *v10 = *(_QWORD *)a2;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

uint64_t llvm::GraphTraits<llvm::CallGraphNode *>::CGNGetValue(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

void llvm::scc_iterator<llvm::CallGraph *,llvm::GraphTraits<llvm::CallGraph *>>::DFSVisitChildren(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8[2];
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 88);
  v2 = *(_QWORD *)(v1 - 24);
  if (v2 != *(_QWORD *)(*(_QWORD *)(v1 - 32) + 24))
  {
    v4 = (uint64_t *)(a1 + 8);
    do
    {
      v5 = *(_QWORD *)(v1 - 16);
      *(_QWORD *)(v1 - 24) = v2 + 40;
      v8[0] = v2;
      v8[1] = v5;
      v6 = llvm::mapped_iterator<std::__wrap_iter<std::pair<llvm::Optional<llvm::WeakTrackingVH>,llvm::CallGraphNode *> *>,llvm::CallGraphNode * (*)(std::pair<llvm::Optional<llvm::WeakTrackingVH>,llvm::CallGraphNode *>),llvm::CallGraphNode *>::operator*(v8);
      v9 = v6;
      v8[0] = 0;
      if (!llvm::DenseMapBase<llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>,llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::LookupBucketFor<llvm::CallGraphNode *>(v4, &v9, v8)|| v8[0] == *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
      {
        llvm::scc_iterator<llvm::CallGraph *,llvm::GraphTraits<llvm::CallGraph *>>::DFSVisitOne((int *)a1, v6);
        v1 = *(_QWORD *)(a1 + 88);
      }
      else
      {
        v7 = *(_DWORD *)(v8[0] + 8);
        v1 = *(_QWORD *)(a1 + 88);
        if (*(_DWORD *)(v1 - 8) > v7)
          *(_DWORD *)(v1 - 8) = v7;
      }
      v2 = *(_QWORD *)(v1 - 24);
    }
    while (v2 != *(_QWORD *)(*(_QWORD *)(v1 - 32) + 24));
  }
}

uint64_t llvm::mapped_iterator<std::__wrap_iter<std::pair<llvm::Optional<llvm::WeakTrackingVH>,llvm::CallGraphNode *> *>,llvm::CallGraphNode * (*)(std::pair<llvm::Optional<llvm::WeakTrackingVH>,llvm::CallGraphNode *>),llvm::CallGraphNode *>::operator*(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_BYTE *);
  uint64_t v3;
  _BYTE v5[32];
  uint64_t v6;

  v1 = *a1;
  v2 = (uint64_t (*)(_BYTE *))a1[1];
  llvm::optional_detail::OptionalStorage<llvm::WeakTrackingVH,false>::OptionalStorage((llvm::ValueHandleBase *)v5, *a1);
  v6 = *(_QWORD *)(v1 + 32);
  v3 = v2(v5);
  if (v5[24])
    llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v5);
  return v3;
}

void sub_240FB6B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a13)
    llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)&a10);
  _Unwind_Resume(exception_object);
}

llvm::ValueHandleBase *llvm::optional_detail::OptionalStorage<llvm::WeakTrackingVH,false>::OptionalStorage(llvm::ValueHandleBase *a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *((_BYTE *)a1 + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
    llvm::optional_detail::OptionalStorage<llvm::WeakTrackingVH,false>::emplace<llvm::WeakTrackingVH const&>(a1, (_QWORD *)a2);
  return a1;
}

void sub_240FB6B64(_Unwind_Exception *exception_object)
{
  llvm::ValueHandleBase *v1;

  if (*((_BYTE *)v1 + 24))
  {
    llvm::ValueHandleBase::~ValueHandleBase(v1);
    *((_BYTE *)v1 + 24) = 0;
  }
  _Unwind_Resume(exception_object);
}

llvm::ValueHandleBase *llvm::optional_detail::OptionalStorage<llvm::WeakTrackingVH,false>::emplace<llvm::WeakTrackingVH const&>(llvm::ValueHandleBase *a1, _QWORD *a2)
{
  llvm::ValueHandleBase *result;

  if (*((_BYTE *)a1 + 24))
  {
    llvm::ValueHandleBase::~ValueHandleBase(a1);
    *((_BYTE *)a1 + 24) = 0;
  }
  result = llvm::ValueHandleBase::ValueHandleBase(a1, 3u, a2);
  *((_BYTE *)result + 24) = 1;
  return result;
}

uint64_t llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::~DenseMap(uint64_t a1)
{
  llvm::deallocate_buffer(*(llvm **)a1, (void *)(16 * *(unsigned int *)(a1 + 16)));
  return a1;
}

BOOL llvm::scc_iterator<llvm::CallGraph *,llvm::GraphTraits<llvm::CallGraph *>>::operator==(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  _QWORD *v6;
  size_t v7;
  const void *v8;
  _QWORD *v9;

  v3 = a1[10];
  v2 = a1[11];
  v4 = a2[10];
  if (v2 - v3 != a2[11] - v4)
    return 0;
  while (v3 != v2)
  {
    if (*(_QWORD *)v3 != *(_QWORD *)v4
      || *(_QWORD *)(v3 + 8) != *(_QWORD *)(v4 + 8)
      || *(_DWORD *)(v3 + 24) != *(_DWORD *)(v4 + 24))
    {
      return 0;
    }
    v3 += 32;
    v4 += 32;
  }
  v6 = a1 + 7;
  v5 = (const void *)a1[7];
  v7 = v6[1] - (_QWORD)v5;
  v9 = a2 + 7;
  v8 = (const void *)a2[7];
  return v7 == v9[1] - (_QWORD)v8 && memcmp(v5, v8, v7) == 0;
}

uint64_t llvm::BranchInst::Create(llvm::BranchInst *this, llvm::BasicBlock *a2, llvm::BasicBlock *a3, llvm::Value *a4, llvm::Instruction *a5)
{
  uint64_t v9;

  v9 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x24268C8A0](v9, this, a2, a3, a4);
  return v9;
}

void sub_240FB6CF4(_Unwind_Exception *a1)
{
  void *v1;

  llvm::User::operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t llvm::IRBuilderBase::CreatePHI(llvm::IRBuilderBase *this, llvm::Type *a2, llvm::Type *a3, const llvm::Twine *a4, llvm::Instruction *a5)
{
  llvm::PHINode *v7;
  _BYTE v9[32];
  __int16 v10;

  v10 = 257;
  v7 = llvm::PHINode::Create(a2, a3, (const llvm::Twine *)v9, 0, a5);
  if (llvm::FPMathOperator::classof((uint64_t)v7))
    llvm::IRBuilderBase::setFPAttrs((uint64_t)this, (uint64_t)v7, 0);
  return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, (uint64_t)v7, (uint64_t)a4);
}

uint64_t llvm::PHINode::addIncoming(llvm::PHINode *this, llvm::Value *a2, llvm::BasicBlock *a3)
{
  int v6;
  int v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  char *v11;

  v6 = *((_DWORD *)this + 5);
  if ((v6 & 0x7FFFFFF) == *((_DWORD *)this + 15))
  {
    llvm::PHINode::growOperands(this);
    v6 = *((_DWORD *)this + 5);
  }
  v7 = (v6 + 1) & 0x7FFFFFF;
  *((_DWORD *)this + 5) = v6 & 0xF8000000 | v7;
  result = llvm::PHINode::setIncomingValue((uint64_t)this, v7 - 1, (uint64_t)a2);
  v9 = *((_DWORD *)this + 5);
  v10 = v9 & 0x7FFFFFF;
  if ((v9 & 0x40000000) != 0)
    v11 = (char *)*((_QWORD *)this - 1);
  else
    v11 = (char *)this - 32 * v10;
  *(_QWORD *)&v11[32 * *((unsigned int *)this + 15) + 8 * (v10 - 1)] = a3;
  return result;
}

uint64_t llvm::BranchInst::Create(llvm::BranchInst *this, llvm::BasicBlock *a2, llvm::Instruction *a3)
{
  uint64_t v3;

  v3 = llvm::User::operator new((llvm::User *)0x40);
  llvm::BranchInst::BranchInst();
  return v3;
}

void sub_240FB6E64(_Unwind_Exception *a1)
{
  void *v1;

  llvm::User::operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t MTLIRBuilder::MTLIRBuilder<llvm::BasicBlock *&>(uint64_t a1, llvm::BasicBlock **a2)
{
  llvm::BasicBlock *v3;
  llvm::LLVMContext *Context;

  v3 = *a2;
  Context = (llvm::LLVMContext *)llvm::BasicBlock::getContext(*a2);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x200000000;
  *(_QWORD *)(a1 + 120) = MEMORY[0x24BED83B8] + 16;
  *(_QWORD *)(a1 + 64) = Context;
  *(_QWORD *)(a1 + 72) = a1 + 120;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BED83F0] + 16;
  *(_QWORD *)(a1 + 80) = a1 + 128;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(_WORD *)(a1 + 100) = 512;
  *(_BYTE *)(a1 + 102) = 7;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 48) = v3;
  *(_QWORD *)(a1 + 56) = (char *)v3 + 40;
  MTLIRBuilder::initTypeCache((MTLIRBuilder *)a1, Context);
  return a1;
}

void sub_240FB6F14(_Unwind_Exception *a1)
{
  void **v1;

  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder(v1);
  _Unwind_Resume(a1);
}

llvm::PHINode *llvm::PHINode::Create(llvm::PHINode *this, llvm::Type *a2, const llvm::Twine *a3, const llvm::Twine *a4, llvm::Instruction *a5)
{
  int v7;
  llvm::PHINode *v9;

  v7 = (int)a2;
  v9 = (llvm::PHINode *)llvm::User::operator new((llvm::User *)0x40);
  llvm::PHINode::PHINode(v9, this, v7, a3, a4);
  return v9;
}

void sub_240FB6F84(_Unwind_Exception *a1)
{
  void *v1;

  llvm::User::operator delete(v1);
  _Unwind_Resume(a1);
}

llvm::PHINode *llvm::PHINode::PHINode(llvm::PHINode *this, llvm::Type *a2, int a3, const llvm::Twine *a4, llvm::Instruction *a5)
{
  *(_DWORD *)(llvm::Instruction::Instruction() + 60) = a3;
  llvm::Value::setName();
  llvm::User::allocHungoffUses(this);
  return this;
}

void sub_240FB6FF8(_Unwind_Exception *a1)
{
  llvm::Instruction *v1;

  llvm::Instruction::~Instruction(v1);
  _Unwind_Resume(a1);
}

uint64_t llvm::PHINode::setIncomingValue(uint64_t result, unsigned int a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_DWORD *)(result + 20);
  if ((v3 & 0x40000000) != 0)
    v4 = *(_QWORD *)(result - 8);
  else
    v4 = result - 32 * (v3 & 0x7FFFFFF);
  v5 = v4 + 32 * a2;
  if (*(_QWORD *)v5)
  {
    **(_QWORD **)(v5 + 16) = *(_QWORD *)(v5 + 8);
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
      *(_QWORD *)(v6 + 16) = *(_QWORD *)(v5 + 16);
  }
  *(_QWORD *)v5 = a3;
  if (a3)
  {
    v9 = *(_QWORD *)(a3 + 8);
    v7 = (_QWORD *)(a3 + 8);
    v8 = v9;
    v10 = v4 + 32 * a2;
    *(_QWORD *)(v10 + 8) = v9;
    if (v9)
      *(_QWORD *)(v8 + 16) = v10 + 8;
    *(_QWORD *)(v10 + 16) = v7;
    *v7 = v5;
  }
  return result;
}

__n128 createMTLForceInlinerPass(uint64_t a1)
{
  __n128 *v2;
  __n128 result;

  v2 = (__n128 *)operator new();
  v2->n128_u64[1] = 0;
  v2[1].n128_u64[0] = (unint64_t)&MTLForceInlinerPass::ID;
  v2[1].n128_u32[2] = 4;
  v2->n128_u64[0] = (unint64_t)&off_25111E448;
  result = *(__n128 *)(a1 + 72);
  v2[2] = result;
  return result;
}

void MTLForceInlinerPass::~MTLForceInlinerPass(MTLForceInlinerPass *this)
{
  llvm::Pass::~Pass(this);
  JUMPOUT(0x24268D8F0);
}

uint64_t llvm::Pass::doInitialization()
{
  return 0;
}

BOOL MTLForceInlinerPass::runOnModule(MTLForceInlinerPass *this, llvm::Module *a2)
{
  _BOOL8 result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  llvm::Value *v11;
  _QWORD *Name;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  llvm::Value **v19;
  llvm::Value **v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  BOOL v26;
  BOOL v27;
  BOOL v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  BOOL v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t ConstGEP2_32;
  llvm::Value *v49;
  uint64_t v50;
  llvm::Type *v51;
  llvm::Type **AlignedLoad;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  llvm::StructType *v62;
  llvm::Value **v65;
  uint64_t v66;
  llvm::Value *v67;
  uint64_t v68;
  uint64_t v69;
  llvm::Type **v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  unint64_t v76;
  llvm::Value *v77;
  uint64_t Int8PtrTy;
  char *v79;
  llvm::StructType *v80;
  char v81[8];
  uint64_t v82;
  char v83;
  _BYTE v84[32];
  __int16 v85;
  _BYTE v86[16];
  uint64_t v87;
  char v88;
  uint64_t v89;
  llvm::Value *v90;
  _OWORD v91[2];
  void *v92[2];
  void *v93[2];
  __int128 v94;
  void *__p[2];
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  void *v100;
  void *v101;
  _QWORD *v102;
  void *v103;
  void *v104;
  _BYTE v105[80];
  uint64_t v106;
  void *v107[2];
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  _BYTE v113[64];
  void *v114;
  uint64_t v115;
  _QWORD v116[14];
  void *v117;
  uint64_t v118;
  _BYTE v119[32];
  char *v120[2];
  uint64_t v121;
  void *v122;
  uint64_t v123;
  _BYTE v124[72];
  llvm::Value **v125;
  uint64_t v126;
  _QWORD v127[6];

  v127[4] = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(*((_QWORD *)this + 4) + 20) & 0x10) == 0)
    return 0;
  MTLBoundsCheck::getMetalMetadata(a2, (uint64_t)v81);
  result = v83 != 0;
  if (v83)
  {
    v5 = v82;
    v7 = *((_QWORD *)this + 4);
    v6 = *((_QWORD *)this + 5);
    MEMORY[0x24268D32C](v105, a2);
    v69 = v6;
    v70 = (llvm::Type **)a2;
    v68 = v5;
    v125 = (llvm::Value **)v127;
    v126 = 0x400000000;
    llvm::scc_iterator<llvm::CallGraph *,llvm::GraphTraits<llvm::CallGraph *>>::scc_iterator((uint64_t)&v97, v106);
    v96 = 0;
    v94 = 0u;
    *(_OWORD *)__p = 0u;
    *(_OWORD *)v92 = 0u;
    *(_OWORD *)v93 = 0u;
    memset(v91, 0, sizeof(v91));
    v71 = v7;
    while (!llvm::scc_iterator<llvm::CallGraph *,llvm::GraphTraits<llvm::CallGraph *>>::operator==(&v97, v91))
    {
      v8 = v101;
      v9 = v102;
      v72 = v102;
      if (v101 != v102)
      {
        do
        {
          v10 = (_QWORD *)*v8;
          if (*v8 == v106)
            goto LABEL_150;
          v11 = (llvm::Value *)v10[1];
          v90 = v11;
          if (!v11 || (llvm::GlobalValue::isDeclaration(v11) & 1) != 0 || (*((_DWORD *)v90 + 8) & 0xE) == 4)
            goto LABEL_150;
          Name = (_QWORD *)llvm::Value::getName(v90);
          if (v13 >= 0x10)
          {
            if (*Name == 0x61725F7269615F5FLL && Name[1] == 0x676E696361727479)
              goto LABEL_150;
            if (v13 >= 0x17)
            {
              if (*Name == 0x697265776F6C5F5FLL
                && Name[1] == 0x6E692E62696C676ELL
                && *(_QWORD *)((char *)Name + 15) == 0x2E6C616E7265746ELL)
              {
                goto LABEL_150;
              }
            }
            else if (v13 == 16 && *Name == 0x5F7465672E6C746DLL && Name[1] == 0x64695F6567616D69)
            {
              goto LABEL_150;
            }
          }
          if (v7 && (*(_BYTE *)(v7 + 22) & 4) != 0)
          {
            v59 = *((_QWORD *)v90 + 3);
            if (8 * *(unsigned int *)(v59 + 12) == 8)
              goto LABEL_150;
            v60 = *(_QWORD *)(v59 + 16) + 8;
            v61 = 8 * ((8 * *(unsigned int *)(v59 + 12) - 8) >> 3);
            while (1)
            {
              if (*(_BYTE *)(*(_QWORD *)v60 + 8) == 15)
              {
                v62 = **(llvm::StructType ***)(*(_QWORD *)v60 + 16);
                if (*((_BYTE *)v62 + 8) != 16 || !isSpecialStructType(v62))
                  break;
              }
              v60 += 8;
              v61 -= 8;
              if (!v61)
                goto LABEL_150;
            }
          }
          if (v69)
            ++*(_DWORD *)(v69 + 100);
          v14 = v10[2];
          v15 = v10[3];
          v73 = v15;
          v74 = v8;
          if (v14 != v15)
          {
            while (1)
            {
              llvm::optional_detail::OptionalStorage<llvm::WeakTrackingVH,false>::OptionalStorage((llvm::ValueHandleBase *)v86, v14);
              v89 = *(_QWORD *)(v14 + 32);
              v116[9] = 0;
              v116[8] = 0;
              memset(&v116[11], 0, 24);
              v117 = v119;
              v118 = 0x400000000;
              v120[0] = (char *)&v121;
              v120[1] = (char *)0x800000000;
              v122 = v124;
              v123 = 0x800000000;
              v124[64] = 1;
              v16 = *(_QWORD *)(v87 - 32);
              if (!v16)
                break;
              if (*(_BYTE *)(v16 + 16))
                break;
              if (*(_QWORD *)(v16 + 24) != *(_QWORD *)(v87 + 72))
                break;
              v17 = (_QWORD *)llvm::Value::getName((llvm::Value *)v16);
              if (v18 < 0x10)
                break;
              if (*v17 != 0x61725F7269615F5FLL || v17[1] != 0x676E696361727479)
              {
                if (v18 >= 0x17)
                {
                  if (*v17 != 0x697265776F6C5F5FLL
                    || v17[1] != 0x6E692E62696C676ELL
                    || *(_QWORD *)((char *)v17 + 15) != 0x2E6C616E7265746ELL)
                  {
                    break;
                  }
                }
                else
                {
                  if (v18 != 16)
                    break;
                  if (*v17 != 0x5F7465672E6C746DLL || v17[1] != 0x64695F6567616D69)
                    break;
                }
              }
LABEL_93:
              if (v122 != v124)
                free(v122);
              llvm::SmallVector<llvm::WeakTrackingVH,8u>::~SmallVector(v120);
              if (v117 != v119)
                free(v117);
              if (v88)
                llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v86);
              v14 += 40;
              if (v14 == v15)
                goto LABEL_122;
            }
            llvm::InlineFunction();
            if ((*(_BYTE *)(v7 + 22) & 8) != 0)
            {
              v114 = v116;
              v115 = 0x800000000;
              v111 = v113;
              v112 = 0x800000000;
              if ((_DWORD)v118)
              {
                v75 = v14;
                v19 = (llvm::Value **)v117;
                v20 = (llvm::Value **)((char *)v117 + 8 * v118);
                do
                {
                  v21 = **(_QWORD **)(*(_QWORD *)*v19 + 16);
                  if (*(_BYTE *)(v21 + 8) == 17)
                  {
                    v22 = **(_QWORD **)(v21 + 16);
                    v23 = *(_DWORD *)(v22 + 8);
                    if (v23 == 15)
                    {
                      if ((v23 & 0xFE) == 0x12)
                        v23 = *(_DWORD *)(**(_QWORD **)(v22 + 16) + 8);
                      if (MTLBoundsCheck::checkAddressSpace((MTLBoundsCheck *)(v23 >> 8)))
                      {
                        v80 = **(llvm::StructType ***)(v22 + 16);
                        if (*((_BYTE *)v80 + 8) == 16)
                        {
                          if (*((_QWORD *)v80 + 3))
                          {
                            v24 = llvm::StructType::getName(v80);
                            if (v25 >= 0x10)
                            {
                              v26 = *(_QWORD *)v24 == 0x5F2E746375727473
                                 && *(_QWORD *)(v24 + 8) == 0x5F65727574786574;
                              if (v26
                                || v25 >= 0x11
                                && (*(_QWORD *)v24 == 0x5F2E746375727473
                                  ? (v27 = *(_QWORD *)(v24 + 8) == 0x5F72656C706D6173)
                                  : (v27 = 0),
                                    v27 ? (v28 = *(_BYTE *)(v24 + 16) == 116) : (v28 = 0),
                                    v28))
                              {
                                Int8PtrTy = llvm::Type::getInt8PtrTy(*v70, 0);
                                LODWORD(v115) = 0;
                                llvm::SmallVectorImpl<llvm::User *>::insert<llvm::Value::user_iterator_impl<llvm::User>,void>((uint64_t)&v114, (uint64_t)v114, *((_QWORD *)*v19 + 1), 0);
                                if ((_DWORD)v115)
                                {
                                  v29 = (char *)v114;
                                  v79 = (char *)v114 + 8 * v115;
                                  do
                                  {
                                    v30 = *(_QWORD *)v29;
                                    if (*(_QWORD *)v29)
                                    {
                                      if (*(_BYTE *)(v30 + 16) == 77 && *(_QWORD *)v30 == Int8PtrTy)
                                      {
                                        LODWORD(v112) = 0;
                                        llvm::SmallVectorImpl<llvm::User *>::insert<llvm::Value::user_iterator_impl<llvm::User>,void>((uint64_t)&v111, (uint64_t)v111, *(_QWORD *)(v30 + 8), 0);
                                        if ((_DWORD)v112)
                                        {
                                          v31 = (char *)v111;
                                          v32 = (char *)v111 + 8 * v112;
                                          do
                                          {
                                            v33 = *(_QWORD *)v31;
                                            if (*(_QWORD *)v31 && *(_BYTE *)(v33 + 16) == 84)
                                            {
                                              v34 = *(_QWORD *)(v33 - 32);
                                              if (!v34
                                                || *(_BYTE *)(v34 + 16)
                                                || *(_QWORD *)(v34 + 24) != *(_QWORD *)(v33 + 72))
                                              {
                                                v34 = 0;
                                              }
                                              v35 = llvm::Value::getName((llvm::Value *)v34);
                                              if (v36 >= 0xC
                                                && *(_QWORD *)v35 == 0x6D656D2E6D766C6CLL
                                                && *(_DWORD *)(v35 + 8) == 779710563)
                                              {
                                                v38 = (uint64_t *)(v33 - 32 * (*(_DWORD *)(v33 + 20) & 0x7FFFFFF));
                                                v39 = *v38;
                                                v40 = v38[4];
                                                if (*(_BYTE *)(v40 + 16) != 77)
                                                  v40 = 0;
                                                v41 = v38[8];
                                                if (*(_BYTE *)(v41 + 16) == 16)
                                                  v42 = v41;
                                                else
                                                  v42 = 0;
                                                if (v40)
                                                  v43 = v42 == 0;
                                                else
                                                  v43 = 1;
                                                v44 = !v43 && v39 == v30;
                                                if (v44
                                                  && *(_QWORD *)v40 == Int8PtrTy
                                                  && **(_QWORD **)(v40 - 32) == *(_QWORD *)*v19)
                                                {
                                                  v77 = *(llvm::Value **)(v40 - 32);
                                                  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::IRBuilder((uint64_t)v107, (llvm::Value *)v33, 0, 0, 0);
                                                  v45 = (unint64_t *)(v42 + 24);
                                                  if (*(_DWORD *)(v42 + 32) >= 0x41u)
                                                    v45 = (unint64_t *)*v45;
                                                  v46 = *v45;
                                                  if (v46 >= 8)
                                                  {
                                                    v47 = 0;
                                                    v76 = v46 >> 3;
                                                    do
                                                    {
                                                      v85 = 257;
                                                      ConstGEP2_32 = llvm::IRBuilderBase::CreateConstGEP2_32((llvm::Type **)v107, v80, v77, 0, v47, (const llvm::Twine *)v84);
                                                      v49 = *v19;
                                                      v85 = 257;
                                                      v50 = llvm::IRBuilderBase::CreateConstGEP2_32((llvm::Type **)v107, v80, v49, 0, v47, (const llvm::Twine *)v84);
                                                      v51 = **(llvm::Type ***)(*(_QWORD *)ConstGEP2_32 + 16);
                                                      v85 = 257;
                                                      AlignedLoad = (llvm::Type **)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v107, v51, ConstGEP2_32, 0, 0, (uint64_t)v84);
                                                      llvm::IRBuilderBase::CreateAlignedStore((uint64_t)v107, AlignedLoad, v50, 0);
                                                      ++v47;
                                                    }
                                                    while (v76 != v47);
                                                  }
                                                  llvm::Instruction::eraseFromParent((llvm::Instruction *)v33);
                                                  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)&v110);
                                                  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v109);
                                                  if (v107[0] != &v108)
                                                    free(v107[0]);
                                                }
                                              }
                                            }
                                            v31 += 8;
                                          }
                                          while (v31 != v32);
                                        }
                                      }
                                    }
                                    v29 += 8;
                                  }
                                  while (v29 != v79);
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  ++v19;
                }
                while (v19 != v20);
                v7 = v71;
                v8 = v74;
                v14 = v75;
                v9 = v72;
                v15 = v73;
                if (v111 != v113)
                  free(v111);
              }
              if (v114 != v116)
                free(v114);
            }
            goto LABEL_93;
          }
LABEL_122:
          llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)&v125, (uint64_t *)&v90);
LABEL_150:
          ++v8;
        }
        while (v8 != v9);
      }
      llvm::scc_iterator<llvm::CallGraph *,llvm::GraphTraits<llvm::CallGraph *>>::GetNextSCC(&v97);
    }
    llvm::GlobalValue::setLinkage(*(_QWORD *)(*(_QWORD *)(v68 - 8 * *(unsigned int *)(v68 + 8)) + 128), 0);
    if ((_DWORD)v126)
    {
      v65 = v125;
      v66 = 8 * v126;
      do
      {
        v67 = *v65;
        if ((llvm::Value::hasNUsesOrMore(*v65) & 1) == 0 && (*((_BYTE *)v67 + 32) & 0xF) != 0)
        {
          llvm::Function::dropAllReferences(v67);
          llvm::Function::eraseFromParent(v67);
        }
        ++v65;
        v66 -= 8;
      }
      while (v66);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v93[1])
    {
      *(void **)&v94 = v93[1];
      operator delete(v93[1]);
    }
    if (v92[0])
    {
      v92[1] = v92[0];
      operator delete(v92[0]);
    }
    llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::~DenseMap((uint64_t)v91 + 8);
    if (v103)
    {
      v104 = v103;
      operator delete(v103);
    }
    if (v101)
    {
      v102 = v101;
      operator delete(v101);
    }
    if (v99)
    {
      v100 = v99;
      operator delete(v99);
    }
    llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::~DenseMap((uint64_t)&v98);
    if (v125 != v127)
      free(v125);
    MEMORY[0x24268D338](v105);
    return 1;
  }
  return result;
}

void sub_240FB7B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a66;
  uint64_t a67;
  void *a69;
  uint64_t a70;
  void *a72;
  uint64_t v72;
  void *v74;
  void *v75;

  if (__p)
  {
    a60 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a56)
  {
    a57 = (uint64_t)a56;
    operator delete(a56);
  }
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::~DenseMap((uint64_t)&a50);
  v74 = a72;
  if (a72)
  {
    STACK[0x200] = (unint64_t)a72;
    operator delete(v74);
  }
  if (a69)
  {
    a70 = (uint64_t)a69;
    operator delete(a69);
  }
  if (a66)
  {
    a67 = (uint64_t)a66;
    operator delete(a66);
  }
  llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::~DenseMap((uint64_t)&a63);
  v75 = *(void **)(v72 - 160);
  if (v75 != (void *)a11)
    free(v75);
  MEMORY[0x24268D338](&STACK[0x210]);
  _Unwind_Resume(a1);
}

uint64_t llvm::SmallVectorImpl<llvm::User *>::insert<llvm::Value::user_iterator_impl<llvm::User>,void>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  char *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;

  v5 = a3;
  v7 = *(_QWORD *)a1;
  v8 = (a2 - *(_QWORD *)a1) >> 3;
  v9 = *(unsigned int *)(a1 + 8);
  if (*(_QWORD *)a1 + 8 * v9 == a2)
  {
    llvm::SmallVectorImpl<llvm::User *>::append<llvm::Value::user_iterator_impl<llvm::User>,void>(a1, a3, a4);
    return *(_QWORD *)a1 + 8 * v8;
  }
  else
  {
    if (a3 == a4)
    {
      v10 = 0;
    }
    else
    {
      v10 = 0;
      v11 = a3;
      do
      {
        ++v10;
        v11 = *(_QWORD *)(v11 + 8);
      }
      while (v11 != a4);
    }
    if (v10 + v9 > *(unsigned int *)(a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v7 = *(_QWORD *)a1;
      v9 = *(unsigned int *)(a1 + 8);
    }
    v12 = (_BYTE *)(v7 + 8 * v8);
    v13 = (char *)(v7 + 8 * v9);
    v14 = (v13 - v12) >> 3;
    if (v14 >= v10)
    {
      llvm::SmallVectorImpl<llvm::User *>::append<std::move_iterator<llvm::User **>,void>(a1, &v13[-8 * v10], (char *)(v7 + 8 * v9));
      if (&v13[-8 * v10] != v12)
        memmove(&v12[8 * v10], v12, &v13[-8 * v10] - v12);
      if (v5 != a4)
      {
        v16 = v12;
        do
        {
          *v16++ = *(_QWORD *)(v5 + 24);
          v5 = *(_QWORD *)(v5 + 8);
        }
        while (v5 != a4);
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = v9 + v10;
      if (v8 != v9)
      {
        memcpy((void *)(v7 + 8 * (v9 + v10) - 8 * v14), v12, v13 - v12);
        v15 = v12;
        do
        {
          *v15++ = *(_QWORD *)(v5 + 24);
          v5 = *(_QWORD *)(v5 + 8);
          --v14;
        }
        while (v14);
      }
      while (v5 != a4)
      {
        *(_QWORD *)v13 = *(_QWORD *)(v5 + 24);
        v13 += 8;
        v5 = *(_QWORD *)(v5 + 8);
      }
    }
  }
  return (uint64_t)v12;
}

uint64_t llvm::IRBuilderBase::CreateConstGEP2_32(llvm::Type **this, llvm::Type *a2, llvm::Value *a3, unsigned int a4, unsigned int a5, const llvm::Twine *a6)
{
  llvm::LLVMContext *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t *v13[3];

  v13[2] = *(uint64_t **)MEMORY[0x24BDAC8D0];
  llvm::Type::getInt32Ty(this[8], a2);
  v13[0] = (uint64_t *)llvm::ConstantInt::get();
  llvm::Type::getInt32Ty(this[8], v10);
  v13[1] = (uint64_t *)llvm::ConstantInt::get();
  result = (*(uint64_t (**)(llvm::Type *, llvm::Type *, llvm::Value *, uint64_t **, uint64_t, _QWORD))(*(_QWORD *)this[9] + 48))(this[9], a2, a3, v13, 2, 0);
  if (!result)
  {
    v12 = llvm::GetElementPtrInst::Create((uint64_t)a2, (uint64_t *)a3, v13, 2);
    return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, v12, (uint64_t)a6);
  }
  return result;
}

uint64_t llvm::GlobalValue::setLinkage(uint64_t this, int a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;

  v2 = this;
  v3 = *(_DWORD *)(this + 32);
  if ((a2 - 7) < 2)
    v3 &= 0xFFFFFFCF;
  v4 = v3 & 0xFFFFFFF0 | a2 & 0xF;
  *(_DWORD *)(this + 32) = v4;
  if ((a2 & 0xFu) - 7 < 2)
    goto LABEL_7;
  if ((v3 & 0x30) != 0)
  {
    this = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)this);
    if ((this & 1) == 0)
    {
      v4 = *(_DWORD *)(v2 + 32);
LABEL_7:
      *(_DWORD *)(v2 + 32) = v4 | 0x4000;
    }
  }
  return this;
}

char **llvm::SmallVector<llvm::WeakTrackingVH,8u>::~SmallVector(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 24 * v3;
    v5 = v2 - 24;
    do
    {
      llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)&v5[v4]);
      v4 -= 24;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t llvm::SmallVectorImpl<llvm::User *>::append<std::move_iterator<llvm::User **>,void>(uint64_t result, char *a2, char *a3)
{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v4 = a2;
  v5 = result;
  v6 = a3 - a2;
  v7 = *(unsigned int *)(result + 8);
  if (v7 + ((a3 - a2) >> 3) > (unint64_t)*(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(unsigned int *)(v5 + 8);
  }
  if (v4 != a3)
  {
    v8 = (_QWORD *)(*(_QWORD *)v5 + 8 * v7);
    do
    {
      v9 = *(_QWORD *)v4;
      v4 += 8;
      *v8++ = v9;
    }
    while (v4 != a3);
  }
  *(_DWORD *)(v5 + 8) = v7 + (v6 >> 3);
  return result;
}

uint64_t llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::IRBuilder(uint64_t a1, llvm::Value *this, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t Context;

  Context = llvm::Value::getContext(this);
  *(_QWORD *)(a1 + 120) = MEMORY[0x24BED83B8] + 16;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BED83F0] + 16;
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x200000000;
  *(_QWORD *)(a1 + 64) = Context;
  *(_QWORD *)(a1 + 72) = a1 + 120;
  *(_QWORD *)(a1 + 80) = a1 + 128;
  *(_QWORD *)(a1 + 88) = a3;
  *(_DWORD *)(a1 + 96) = 0;
  *(_WORD *)(a1 + 100) = 512;
  *(_BYTE *)(a1 + 102) = 7;
  *(_QWORD *)(a1 + 104) = a4;
  *(_QWORD *)(a1 + 112) = a5;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)a1, this);
  return a1;
}

void sub_240FB8114(_Unwind_Exception *a1)
{
  void **v1;
  llvm::IRBuilderFolder *v2;
  llvm::IRBuilderDefaultInserter *v3;
  void *v4;

  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter(v3);
  llvm::IRBuilderFolder::~IRBuilderFolder(v2);
  if (*v1 != v4)
    free(*v1);
  _Unwind_Resume(a1);
}

_QWORD *createMTLHoistStaticAllocasPass(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  MetalModulePass::MetalModulePass((uint64_t)v2, (uint64_t)&MTLHoistStaticAllocasPass::ID, a1);
  *v2 = &off_25111E4E8;
  return v2;
}

void sub_240FB8198(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x24268D8F0](v1, 0x10E1C40C8265ECALL);
  _Unwind_Resume(a1);
}

void MTLHoistStaticAllocasPass::~MTLHoistStaticAllocasPass(MTLHoistStaticAllocasPass *this)
{
  char *v2;

  *(_QWORD *)this = &off_25111E050;
  v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
}

{
  char *v2;

  *(_QWORD *)this = &off_25111E050;
  v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x24268D8F0);
}

uint64_t MTLHoistStaticAllocasPass::runOnModule(MTLHoistStaticAllocasPass *this, llvm::Module *a2)
{
  char *v4;
  uint64_t v5;
  int v6;
  llvm::Function *v7;

  MetalModulePass::runOnModule(this, a2);
  v4 = (char *)a2 + 24;
  v5 = *((_QWORD *)a2 + 4);
  if ((char *)v5 == v4)
  {
    LOBYTE(v6) = 0;
  }
  else
  {
    v6 = 0;
    do
    {
      if (v5)
        v7 = (llvm::Function *)(v5 - 56);
      else
        v7 = 0;
      v6 |= MTLHoistStaticAllocasPass::runOnFunction(this, v7);
      v5 = *(_QWORD *)(v5 + 8);
    }
    while ((char *)v5 != v4);
  }
  return v6 & 1;
}

BOOL MTLHoistStaticAllocasPass::runOnFunction(MTLHoistStaticAllocasPass *this, llvm::Function *a2)
{
  llvm::Function *v2;
  llvm::BasicBlock *v3;
  uint64_t FirstNonPHIOrDbgOrLifetime;
  char *v5;
  uint64_t v6;
  BOOL v7;
  unsigned __int8 *v8;
  int v9;
  _BOOL8 v10;
  llvm::AllocaInst *v11;
  llvm::Instruction **v12;
  uint64_t v13;
  llvm::Instruction *v14;
  void *v16;
  uint64_t v17;
  _QWORD v18[5];

  v18[4] = *MEMORY[0x24BDAC8D0];
  v2 = (llvm::Function *)*((_QWORD *)a2 + 10);
  if (v2 == (llvm::Function *)((char *)a2 + 72))
    return 0;
  v16 = v18;
  v17 = 0x400000000;
  if (v2)
    v3 = (llvm::Function *)((char *)v2 - 24);
  else
    v3 = 0;
  FirstNonPHIOrDbgOrLifetime = llvm::BasicBlock::getFirstNonPHIOrDbgOrLifetime(v3);
  v5 = (char *)v3 + 40;
  v6 = FirstNonPHIOrDbgOrLifetime + 24;
  if (FirstNonPHIOrDbgOrLifetime)
    v7 = v6 == (_QWORD)v5;
  else
    v7 = 1;
  if (v7)
    goto LABEL_34;
  while (1)
  {
    if (v6)
      v8 = (unsigned __int8 *)(v6 - 24);
    else
      v8 = 0;
    v9 = v8[16];
    if (v9 != 59)
    {
      if (!llvm::DbgInfoIntrinsic::classof((uint64_t)v8))
        break;
      v9 = v8[16];
    }
    if (v6 && v9 == 59 && (llvm::AllocaInst::isStaticAlloca((llvm::AllocaInst *)v8) & 1) == 0)
      break;
    v6 = *(_QWORD *)(v6 + 8);
    if ((char *)v6 == v5)
      goto LABEL_34;
  }
  if ((char *)v6 == v5)
    goto LABEL_34;
  do
  {
    if (v6)
      v11 = (llvm::AllocaInst *)(v6 - 24);
    else
      v11 = 0;
    if (v6 && *((_BYTE *)v11 + 16) == 59 && llvm::AllocaInst::isStaticAlloca(v11))
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v16, (uint64_t)v11);
    v6 = *(_QWORD *)(v6 + 8);
  }
  while ((char *)v6 != v5);
  if (!(_DWORD)v17)
  {
LABEL_34:
    v10 = 0;
  }
  else
  {
    v12 = (llvm::Instruction **)v16;
    v13 = 8 * v17;
    do
    {
      v14 = *v12;
      llvm::Instruction::removeFromParent(*v12);
      llvm::Instruction::insertBefore(v14, (llvm::Instruction *)v8);
      ++v12;
      v13 -= 8;
    }
    while (v13);
    v10 = (_DWORD)v17 != 0;
  }
  if (v16 != v18)
    free(v16);
  return v10;
}

void sub_240FB8474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  void *v10;

  if (a10 != v10)
    free(a10);
  _Unwind_Resume(exception_object);
}

BOOL llvm::DbgInfoIntrinsic::classof(uint64_t a1)
{
  uint64_t v1;

  return *(_BYTE *)(a1 + 16) == 84
      && (v1 = *(_QWORD *)(a1 - 32)) != 0
      && !*(_BYTE *)(v1 + 16)
      && *(_QWORD *)(v1 + 24) == *(_QWORD *)(a1 + 72)
      && (*(_BYTE *)(v1 + 33) & 0x20) != 0
      && (*(_DWORD *)(v1 + 36) - 55) < 4;
}

uint64_t MTLVertexOutputPackingPass::vertexOutputPacking(MTLCompilerErrorObject **a1, llvm::Module *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13)
{
  unint64_t v17;
  std::vector<unsigned int>::size_type v18;
  llvm::NamedMDNode *NamedMetadata;
  uint64_t Operand;
  unint64_t v21;
  llvm::BasicBlock *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *String;
  uint64_t v28;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int MatchingFragmentInput;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  int v44;
  uint64_t v45;
  int v46;
  const char *v47;
  uint64_t v48;
  void *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  std::string *p_x;
  uint64_t v65;
  uint64_t v66;
  llvm::BasicBlock *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned __int8 *v77;
  llvm::Instruction *v78;
  unint64_t i;
  uint64_t Value;
  uint64_t InsertValue;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t j;
  _BYTE *v87;
  llvm::Value *InsertElement;
  llvm::Type *v89;
  llvm::LLVMContext *v90;
  _BYTE *v91;
  uint64_t v92;
  unsigned int v93;
  int v94;
  uint64_t v95;
  uint64_t v97;
  uint64_t k;
  llvm::Value *Element;
  llvm::Value *v100;
  llvm::Value *v101;
  llvm::Instruction *v102;
  llvm::Value *v103;
  llvm::Instruction *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  llvm::LLVMContext *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned __int16 *v112;
  int v113;
  int v114;
  uint64_t VertexOutputMetadata;
  uint64_t v116;
  uint64_t *v117;
  uint64_t *v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  char *v122;
  uint64_t *v123;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  char *v133;
  char *v134;
  uint64_t *v135;
  uint64_t *v136;
  uint64_t v137;
  int v138;
  uint64_t Impl;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  unint64_t v145;
  unint64_t v146;
  llvm::NamedMDNode *v147;
  uint64_t v148;
  llvm::Module *v149;
  uint64_t v150;
  uint64_t v151;
  llvm::Function *v152;
  llvm::Function *v153;
  llvm::BasicBlock *v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t *v158;
  uint64_t v160;
  int v161;
  void *v162;
  _BYTE *v163;
  void *v164[3];
  void *v165;
  _BYTE *v166;
  void *v167[3];
  void *__p;
  char *v169;
  char *v170;
  void *v171;
  std::vector<unsigned int> v172;
  uint64_t *v173;
  uint64_t *v174;
  _QWORD v175[2];
  __int16 v176;
  char *__dst;
  uint64_t v178;
  _QWORD v179[2];
  __int16 v180;
  uint64_t v181;
  uint64_t v182;
  llvm::ReturnInst *v183;
  uint64_t *v184;
  uint64_t *v185;
  uint64_t v186;
  int v187;
  __int16 v188;
  char v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  std::string __x;
  __int16 v195;
  uint64_t v196;

  v196 = *MEMORY[0x24BDAC8D0];
  if (!MTLFrameworkPass::checkFragmentRenderTargetArrayIndex(a1, a12, a13))
    return 0;
  v17 = a3[1] - *a3;
  v18 = (v17 >> 5);
  LODWORD(__x.__r_.__value_.__l.__data_) = 0;
  std::vector<unsigned int>::vector(&v172, v18, (const std::vector<unsigned int>::value_type *)&__x);
  __x.__r_.__value_.__r.__words[0] = (std::string::size_type)"air.vertex";
  v195 = 259;
  NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(a2, (const llvm::Twine *)&__x);
  Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
  v155 = v17;
  v158 = a3;
  v160 = *(_QWORD *)(Operand - 8 * *(unsigned int *)(Operand + 8) + 8);
  v21 = *(unsigned int *)(v160 + 8);
  __x.__r_.__value_.__s.__data_[0] = 0;
  std::vector<BOOL>::vector(&v171, v21, (unsigned __int8 *)&__x);
  v147 = NamedMetadata;
  v148 = Operand;
  v149 = a2;
  v23 = *(llvm::BasicBlock **)a2;
  v169 = 0;
  v170 = 0;
  __p = 0;
  v152 = *(llvm::Function **)(*(_QWORD *)(Operand - 8 * *(unsigned int *)(Operand + 8)) + 128);
  v154 = v23;
  v150 = *((_QWORD *)v152 + 3);
  v24 = **(_QWORD **)(v150 + 16);
  if ((_DWORD)v21)
  {
    v25 = 0;
    while (1)
    {
      v26 = *(_QWORD *)(v160 - 8 * *(unsigned int *)(v160 + 8) + 8 * v25);
      String = (_QWORD *)llvm::MDString::getString(*(llvm::MDString **)(v26 - 8 * *(unsigned int *)(v26 + 8)));
      if (v28 <= 16)
      {
        if (v28 == 12)
        {
          if (!memcmp(String, "air.position", 0xCuLL))
          {
            ++a8;
            a9 += 4;
          }
        }
        else if (v28 == 14 && !memcmp(String, "air.point_size", 0xEuLL))
        {
          ++a8;
          ++a9;
        }
        goto LABEL_32;
      }
      if (v28 == 29)
        break;
      if (v28 != 17)
        goto LABEL_32;
      if (*String != 0x747265762E726961 || String[1] != 0x757074756F5F7865 || *((_BYTE *)String + 16) != 116)
      {
        if (!memcmp(String, "air.clip_distance", 0x11uLL))
        {
          if (*(_BYTE *)(v24 + 8) == 16
            && (v31 = *(_QWORD *)(*(_QWORD *)(v24 + 16) + 8 * v25)) != 0
            && *(_BYTE *)(v31 + 8) == 17)
          {
            v32 = *(_QWORD *)(v31 + 32);
            v33 = (unint64_t)(v32 + 3) >> 2;
          }
          else
          {
            LODWORD(v32) = 1;
            LODWORD(v33) = 1;
          }
          a9 += v32;
          a8 += v33;
        }
        goto LABEL_32;
      }
      LODWORD(__x.__r_.__value_.__l.__data_) = 0;
      MatchingFragmentInput = MTLFrameworkPass::findMatchingFragmentInput((char ***)a1, &__x, v24, v25, v26, v158, a5);
      if (MatchingFragmentInput == 1)
      {
        v172.__begin_[LODWORD(__x.__r_.__value_.__l.__data_)] = v25 + 1;
        goto LABEL_49;
      }
      if (MatchingFragmentInput == 2)
      {
        v143 = 0;
        goto LABEL_93;
      }
LABEL_50:
      if (++v25 == v21)
        goto LABEL_54;
    }
    if (!memcmp(String, "air.render_target_array_index", 0x1DuLL))
      dataTypeFromMetadata(1u, v26);
LABEL_32:
    v35 = v169;
    if (v169 >= v170)
    {
      v37 = (char *)__p;
      v38 = (v169 - (_BYTE *)__p) >> 2;
      v39 = v38 + 1;
      if ((unint64_t)(v38 + 1) >> 62)
        std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
      v40 = v170 - (_BYTE *)__p;
      if ((v170 - (_BYTE *)__p) >> 1 > v39)
        v39 = v40 >> 1;
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL)
        v41 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v41 = v39;
      if (v41)
      {
        v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v170, v41);
        v37 = (char *)__p;
        v35 = v169;
      }
      else
      {
        v42 = 0;
      }
      v43 = &v42[4 * v38];
      *(_DWORD *)v43 = v25;
      v36 = v43 + 4;
      while (v35 != v37)
      {
        v44 = *((_DWORD *)v35 - 1);
        v35 -= 4;
        *((_DWORD *)v43 - 1) = v44;
        v43 -= 4;
      }
      __p = v43;
      v169 = v36;
      v170 = &v42[4 * v41];
      if (v37)
        operator delete(v37);
    }
    else
    {
      *(_DWORD *)v169 = v25;
      v36 = v35 + 4;
    }
    v169 = v36;
LABEL_49:
    *(_QWORD *)((char *)v171 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    goto LABEL_50;
  }
LABEL_54:
  if ((v155 & 0x1FFFFFFFE0) != 0)
  {
    v45 = 0;
    while (v172.__begin_[v45])
    {
      ++v45;
      if (!--v18)
        goto LABEL_58;
    }
    v48 = *v158 + 2 * v45;
    v49 = *(void **)(v48 + 8);
    if (v49)
    {
      std::string::basic_string[abi:ne180100](&__dst, v49, *(_QWORD *)(v48 + 16));
    }
    else
    {
      __dst = 0;
      v178 = 0;
      v179[0] = 0;
    }
    MTLFrameworkPass::attribute_name((uint64_t)&__dst, &__x);
    if (SHIBYTE(v179[0]) < 0)
      operator delete(__dst);
    p_x = &__x;
    if ((__x.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_x = (std::string *)__x.__r_.__value_.__r.__words[0];
    MTLCompilerErrorObject::setFormattedErrorMessage((char **)*a1, "Link failed: fragment input %s was not found in vertex shader outputs", (const char *)p_x);
    if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__x.__r_.__value_.__l.__data_);
    goto LABEL_92;
  }
LABEL_58:
  v46 = a10;
  if (a8 <= a10)
  {
    v46 = a11;
    if (a9 > a11)
    {
      v47 = "varying components";
      a8 = a9;
      goto LABEL_62;
    }
    v50 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
    v145 = v169 - (_BYTE *)__p;
    v51 = (unint64_t)(v169 - (_BYTE *)__p) >> 2;
    v146 = v51 - 1431655765 * ((a4[1] - *a4) >> 3);
    if ((_DWORD)v51 != 1431655765 * ((a4[1] - *a4) >> 3))
    {
      v52 = (*(_DWORD *)(v150 + 12) - 1);
      std::vector<llvm::Type *>::vector(v167, v52);
      if ((_DWORD)v52)
      {
        v53 = 0;
        do
        {
          *(_QWORD *)((char *)v167[0] + v53) = *(_QWORD *)(*(_QWORD *)(v150 + 16) + v53 + 8);
          v53 += 8;
        }
        while (8 * v52 != v53);
      }
      __x.__r_.__value_.__r.__words[0] = (std::string::size_type)&__x.__r_.__value_.__r.__words[2];
      __x.__r_.__value_.__l.__size_ = 0x1000000000;
      if ((_DWORD)v50)
      {
        v54 = 0;
        do
        {
          v55 = *a4;
          v56 = *(unsigned __int8 *)(v24 + 8);
          v57 = v24;
          if (v56 == 16)
          {
            v57 = *(_QWORD *)(*(_QWORD *)(v24 + 16) + 8 * (v172.__begin_[*(unsigned __int16 *)(v55 + v54 + 6)] - 1));
            v56 = *(_DWORD *)(v57 + 8);
          }
          if ((v56 & 0xFE) == 0x12)
            v57 = **(_QWORD **)(v57 + 16);
          v58 = v55 + v54;
          *(_QWORD *)(v58 + 16) = v57;
          if (*(unsigned __int16 *)(v58 + 2) >= 2uLL)
            v57 = llvm::VectorType::get();
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&__x, v57);
          v54 += 24;
        }
        while (24 * v50 != v54);
      }
      if ((_DWORD)v51)
      {
        v59 = 0;
        do
        {
          v60 = v24;
          if (*(_BYTE *)(v24 + 8) == 16)
            v60 = *(_QWORD *)(*(_QWORD *)(v24 + 16) + 8 * *(unsigned int *)((char *)__p + v59));
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&__x, v60);
          v59 += 4;
        }
        while ((v145 & 0x3FFFFFFFCLL) != v59);
      }
      if (v146 <= 1)
      {
        v62 = *(_QWORD *)__x.__r_.__value_.__l.__data_;
        v61 = (uint64_t)v149;
      }
      else
      {
        v61 = (uint64_t)v149;
        v62 = llvm::StructType::get();
      }
      v65 = llvm::FunctionType::get();
      *((_DWORD *)v152 + 8) = *((_DWORD *)v152 + 8) & 0xFFFFBFC0 | 0x4007;
      __dst = "air.packedVertexFunction";
      v180 = 259;
      v66 = llvm::Function::Create(v65, 0, (uint64_t)&__dst, v61);
      __dst = "Body";
      v180 = 259;
      v68 = llvm::BasicBlock::Create(v154, (llvm::LLVMContext *)&__dst, (const llvm::Twine *)v66, 0, v67);
      __dst = (char *)v179;
      v178 = 0x200000000;
      v183 = v154;
      v184 = &v192;
      v185 = &v193;
      v186 = 0;
      v187 = 0;
      v188 = 512;
      v189 = 7;
      v181 = 0;
      v182 = 0;
      v190 = 0;
      v191 = 0;
      v192 = MEMORY[0x24BED83B8] + 16;
      v193 = MEMORY[0x24BED83F0] + 16;
      createDebugInfoForWrapperFunction((uint64_t)v154, (llvm::IRBuilderBase *)&__dst, (llvm::Value *)v66, v152);
      llvm::IRBuilderBase::SetInsertPoint((uint64_t)&__dst, v68, v68 + 40);
      v69 = *(unsigned int *)(v66 + 96);
      std::vector<llvm::Value *>::vector(&v165, v69);
      if ((*(_WORD *)(v66 + 18) & 1) != 0)
        llvm::Function::BuildLazyArguments((llvm::Function *)v66);
      v70 = *(_QWORD *)(v66 + 88);
      if ((*((_WORD *)v152 + 9) & 1) != 0)
        llvm::Function::BuildLazyArguments(v152);
      if (v69)
      {
        v71 = 0;
        v72 = 8 * v69;
        v73 = (_QWORD *)(*((_QWORD *)v152 + 11) + 8);
        do
        {
          v74 = v70;
          if (!*v73)
            v74 = llvm::UndefValue::get();
          *(_QWORD *)((char *)v165 + v71) = v74;
          v70 += 40;
          v71 += 8;
          v73 += 5;
        }
        while (v72 != v71);
      }
      v75 = *((_QWORD *)v152 + 3);
      if (*((_DWORD *)v152 + 24))
      {
        v176 = 257;
        v76 = llvm::IRBuilderBase::CreateCall((uint64_t)&__dst, v75, (uint64_t)v152, (uint64_t)v165, (v166 - (_BYTE *)v165) >> 3, (uint64_t)&v173, 0);
      }
      else
      {
        v176 = 257;
        v76 = llvm::IRBuilderBase::CreateCall((uint64_t)&__dst, v75, (uint64_t)v152, 0, 0, (uint64_t)&v173, 0);
      }
      v77 = (unsigned __int8 *)v76;
      std::vector<llvm::Value *>::vector(v164, v21);
      if (*(_BYTE *)(v24 + 8) == 16)
      {
        if ((_DWORD)v21)
        {
          for (i = 0; i != v21; ++i)
          {
            if (((*(_QWORD *)((char *)v171 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i) & 1) != 0)
            {
              LODWORD(v162) = i;
              v176 = 257;
              Value = llvm::IRBuilderBase::CreateExtractValue((uint64_t)&__dst, v77, (uint64_t)&v162, 1, (uint64_t)&v173);
              *((_QWORD *)v164[0] + i) = Value;
            }
          }
        }
      }
      else
      {
        *(_QWORD *)v164[0] = v77;
      }
      if (v146 < 2)
        InsertValue = 0;
      else
        InsertValue = llvm::UndefValue::get();
      v144 = v51;
      if ((_DWORD)v50)
      {
        v82 = 0;
        v83 = 6;
        v151 = v62;
        while (1)
        {
          v84 = *a4;
          v85 = *(unsigned __int16 *)(*a4 + 24 * v82 + 4);
          std::vector<llvm::Value *>::vector(&v162, v85);
          v153 = (llvm::Function *)InsertValue;
          if ((_DWORD)v85)
          {
            for (j = 0; j != v85; ++j)
              *((_QWORD *)v162 + j) = *((_QWORD *)v164[0] + v172.__begin_[*(unsigned __int16 *)(v84 + v83 + 2 * j)] - 1);
          }
          v87 = v162;
          v156 = v83;
          if (v163 - (_BYTE *)v162 == 8)
          {
            InsertElement = *(llvm::Value **)v162;
            goto LABEL_148;
          }
          v89 = v183;
          llvm::VectorType::get();
          InsertElement = (llvm::Value *)llvm::UndefValue::get();
          v87 = v162;
          v91 = v163;
          if (v163 != v162)
            break;
          v87 = v163;
LABEL_148:
          v62 = v151;
          if (*(_BYTE *)(v151 + 8) == 16)
          {
            v161 = v82;
            v176 = 257;
            v105 = v156;
            InsertValue = llvm::IRBuilderBase::CreateInsertValue((uint64_t)&__dst, (uint64_t)v153, (uint64_t)InsertElement, (uint64_t)&v161, 1, (uint64_t)&v173);
            v87 = v162;
            if (!v162)
              goto LABEL_153;
LABEL_152:
            v163 = v87;
            operator delete(v87);
            goto LABEL_153;
          }
          InsertValue = (uint64_t)InsertElement;
          v105 = v156;
          if (v87)
            goto LABEL_152;
LABEL_153:
          ++v82;
          v83 = v105 + 24;
          if (v82 == v50)
            goto LABEL_154;
        }
        v92 = 0;
        v93 = 0;
        v94 = 0;
        while (1)
        {
          v95 = **(_QWORD **)&v87[8 * v92];
          if (!v95 || *(_BYTE *)(v95 + 8) != 18)
            break;
          v97 = *(unsigned int *)(v95 + 32);
          if ((_DWORD)v97)
            goto LABEL_139;
LABEL_145:
          v92 = ++v93;
          if (v93 >= (unint64_t)((v91 - v87) >> 3))
            goto LABEL_148;
        }
        v97 = 1;
LABEL_139:
        for (k = 0; k != v97; ++k)
        {
          if (v97 == 1)
          {
            Element = (llvm::Value *)*((_QWORD *)v162 + v92);
          }
          else
          {
            llvm::Type::getInt32Ty(v89, v90);
            v100 = (llvm::Value *)llvm::ConstantInt::get();
            v101 = (llvm::Value *)*((_QWORD *)v162 + v92);
            v176 = 257;
            Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)&__dst, v101, v100, (const llvm::Twine *)&v173, v102);
          }
          llvm::Type::getInt32Ty(v89, v90);
          v103 = (llvm::Value *)llvm::ConstantInt::get();
          v176 = 257;
          InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)&__dst, InsertElement, Element, v103, (const llvm::Twine *)&v173, v104);
        }
        v87 = v162;
        v91 = v163;
        v94 += k;
        goto LABEL_145;
      }
LABEL_154:
      v106 = (v145 >> 2);
      if (v144)
      {
        v107 = 0;
        v108 = v50;
        do
        {
          v109 = (llvm::LLVMContext *)*((_QWORD *)v164[0] + *((unsigned int *)__p + v107));
          if (*(_BYTE *)(v62 + 8) == 16)
          {
            LODWORD(v162) = v50 + v107;
            v176 = 257;
            v109 = (llvm::LLVMContext *)llvm::IRBuilderBase::CreateInsertValue((uint64_t)&__dst, InsertValue, (uint64_t)v109, (uint64_t)&v162, 1, (uint64_t)&v173);
          }
          ++v107;
          InsertValue = (uint64_t)v109;
        }
        while (v106 != v107);
      }
      else
      {
        v109 = (llvm::LLVMContext *)InsertValue;
        v108 = v50;
      }
      v110 = llvm::ReturnInst::Create(v183, v109, 0, v78);
      v176 = 257;
      llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)&__dst, v110, (uint64_t)&v173);
      v173 = 0;
      v174 = 0;
      v175[0] = 0;
      std::vector<llvm::Metadata *>::reserve((void **)&v173, v146);
      if (v108)
      {
        v111 = 0;
        do
        {
          v112 = (unsigned __int16 *)(*a4 + 24 * v111);
          v113 = *v112;
          v114 = v112[1];
          LODWORD(v112) = *(unsigned __int8 *)(*v158 + 32 * v112[3] + 28);
          VertexOutputMetadata = MTLFrameworkPass::createVertexOutputMetadata(v154, "packedOutput", v113, v114, (v112 >> 3) & 7, (v112 >> 1) & 3, v111, 1);
          v116 = VertexOutputMetadata;
          v117 = v174;
          if ((unint64_t)v174 >= v175[0])
          {
            v119 = v174 - v173;
            if ((unint64_t)(v119 + 1) >> 61)
              std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
            v120 = (uint64_t)(v175[0] - (_QWORD)v173) >> 2;
            if (v120 <= v119 + 1)
              v120 = v119 + 1;
            if (v175[0] - (_QWORD)v173 >= 0x7FFFFFFFFFFFFFF8uLL)
              v121 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v121 = v120;
            if (v121)
              v122 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)v175, v121);
            else
              v122 = 0;
            v123 = (uint64_t *)&v122[8 * v119];
            *v123 = v116;
            v118 = v123 + 1;
            v125 = v173;
            v124 = v174;
            if (v174 != v173)
            {
              do
              {
                v126 = *--v124;
                *--v123 = v126;
              }
              while (v124 != v125);
              v124 = v173;
            }
            v173 = v123;
            v174 = v118;
            v175[0] = &v122[8 * v121];
            if (v124)
              operator delete(v124);
          }
          else
          {
            *v174 = VertexOutputMetadata;
            v118 = v117 + 1;
          }
          v174 = v118;
          ++v111;
        }
        while (v111 != v50);
      }
      if (v144)
      {
        v127 = 0;
        v128 = (char *)v174;
        do
        {
          v129 = *(_QWORD *)(v160 - 8 * *(unsigned int *)(v160 + 8) + 8 * *((unsigned int *)__p + v127));
          if ((unint64_t)v128 >= v175[0])
          {
            v130 = (v128 - (char *)v173) >> 3;
            if ((unint64_t)(v130 + 1) >> 61)
              std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
            v131 = (uint64_t)(v175[0] - (_QWORD)v173) >> 2;
            if (v131 <= v130 + 1)
              v131 = v130 + 1;
            if (v175[0] - (_QWORD)v173 >= 0x7FFFFFFFFFFFFFF8uLL)
              v132 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v132 = v131;
            if (v132)
              v133 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)v175, v132);
            else
              v133 = 0;
            v134 = &v133[8 * v130];
            *(_QWORD *)v134 = v129;
            v128 = v134 + 8;
            v136 = v173;
            v135 = v174;
            if (v174 != v173)
            {
              do
              {
                v137 = *--v135;
                *((_QWORD *)v134 - 1) = v137;
                v134 -= 8;
              }
              while (v135 != v136);
              v135 = v173;
            }
            v173 = (uint64_t *)v134;
            v174 = (uint64_t *)v128;
            v175[0] = &v133[8 * v132];
            if (v135)
              operator delete(v135);
          }
          else
          {
            *(_QWORD *)v128 = v129;
            v128 += 8;
          }
          v174 = (uint64_t *)v128;
          ++v127;
        }
        while (v127 != v106);
      }
      v138 = *(_DWORD *)(v148 + 8);
      std::vector<llvm::Metadata *>::vector(&v162, v138);
      *(_QWORD *)v162 = llvm::ValueAsMetadata::get();
      Impl = llvm::MDTuple::getImpl();
      v140 = v162;
      *((_QWORD *)v162 + 1) = Impl;
      v141 = v148 - 8 * *(unsigned int *)(v148 + 8);
      v140[2] = *(_QWORD *)(v141 + 16);
      if (v138 >= 4)
      {
        v142 = 24;
        do
        {
          *(_QWORD *)((char *)v162 + v142) = *(_QWORD *)(v141 + v142);
          v142 += 8;
        }
        while (8 * v138 != v142);
      }
      llvm::MDTuple::getImpl();
      llvm::NamedMDNode::eraseFromParent(v147);
      llvm::Module::getOrInsertNamedMetadata();
      llvm::NamedMDNode::addOperand();
      if (v162)
      {
        v163 = v162;
        operator delete(v162);
      }
      if (v173)
      {
        v174 = v173;
        operator delete(v173);
      }
      if (v164[0])
      {
        v164[1] = v164[0];
        operator delete(v164[0]);
      }
      if (v165)
      {
        v166 = v165;
        operator delete(v165);
      }
      llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)&v193);
      llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v192);
      if (__dst != (char *)v179)
        free(__dst);
      if ((std::string::size_type *)__x.__r_.__value_.__l.__data_ != &__x.__r_.__value_.__r.__words[2])
        free(__x.__r_.__value_.__l.__data_);
      if (v167[0])
      {
        v167[1] = v167[0];
        operator delete(v167[0]);
      }
    }
    v143 = 1;
    goto LABEL_93;
  }
  v47 = "varyings";
LABEL_62:
  MTLCompilerErrorObject::setFormattedErrorMessage((char **)*a1, "Link failed: number of shader %s (%u) exceeds limit (%u). Note that on macOS the following attributes count towards the limit: [[position]], [[clip_distance]], [[point_size]], [[point_coord]], and, when read in the fragment shader, [[viewport_array_index]] & [[render_target_array_index]].", v47, a8, v46);
LABEL_92:
  v143 = 0;
LABEL_93:
  if (__p)
  {
    v169 = (char *)__p;
    operator delete(__p);
  }
  if (v171)
    operator delete(v171);
  if (v172.__begin_)
  {
    v172.__end_ = v172.__begin_;
    operator delete(v172.__begin_);
  }
  return v143;
}

void sub_240FB948C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60)
{
  uint64_t v60;
  void *v62;
  void *v63;

  if (__p)
    operator delete(__p);
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder(&a60);
  v62 = *(void **)(v60 + 200);
  if (v62 != (void *)a18)
    free(v62);
  if (a43)
    operator delete(a43);
  if (a46)
    operator delete(a46);
  if (a49)
    operator delete(a49);
  v63 = *(void **)v60;
  if (*(_QWORD *)v60)
  {
    *(_QWORD *)(v60 + 8) = v63;
    operator delete(v63);
  }
  _Unwind_Resume(a1);
}

uint64_t llvm::IRBuilderBase::CreateExtractValue(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  BOOL v8;
  llvm::UnaryInstruction *v10;
  _BYTE v11[32];
  __int16 v12;

  if (a2 && a2[16] <= 0x14u)
  {
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 344))(*(_QWORD *)(a1 + 72));
    if (v7)
      v8 = *(unsigned __int8 *)(v7 + 16) >= 0x1Cu;
    else
      v8 = 0;
    if (v8)
      return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)a1, v7, a5);
  }
  else
  {
    v12 = 257;
    v10 = llvm::ExtractValueInst::Create((llvm::Value *)a2, a3, a4, (uint64_t)v11, 0);
    return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)a1, (uint64_t)v10, a5);
  }
  return v7;
}

uint64_t llvm::IRBuilderBase::CreateInsertValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  BOOL v9;
  uint64_t v11;

  if (a2 && *(unsigned __int8 *)(a2 + 16) <= 0x14u && a3 && *(unsigned __int8 *)(a3 + 16) <= 0x14u)
  {
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 352))(*(_QWORD *)(a1 + 72));
    if (v8)
      v9 = *(unsigned __int8 *)(v8 + 16) >= 0x1Cu;
    else
      v9 = 0;
    if (v9)
      return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)a1, v8, a6);
  }
  else
  {
    v11 = llvm::InsertValueInst::Create();
    return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)a1, v11, a6);
  }
  return v8;
}

void std::vector<llvm::Metadata *>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

llvm::UnaryInstruction *llvm::ExtractValueInst::Create(llvm::Value *a1, uint64_t a2, uint64_t a3, uint64_t a4, llvm::Instruction *a5)
{
  llvm::UnaryInstruction *v7;
  llvm::Type *IndexedType;

  v7 = (llvm::UnaryInstruction *)llvm::User::operator new((llvm::User *)0x60);
  IndexedType = (llvm::Type *)llvm::ExtractValueInst::getIndexedType();
  llvm::UnaryInstruction::UnaryInstruction(v7, IndexedType, 0x40u, a1, a5);
  *((_QWORD *)v7 + 8) = (char *)v7 + 80;
  *((_QWORD *)v7 + 9) = 0x400000000;
  llvm::ExtractValueInst::init();
  return v7;
}

void sub_240FB99A8(_Unwind_Exception *a1)
{
  llvm::Instruction *v1;
  void *v2;
  void *v4;

  v4 = (void *)*((_QWORD *)v1 + 8);
  if (v4 != v2)
    free(v4);
  llvm::Instruction::~Instruction(v1);
  llvm::User::operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t llvm::UnaryInstruction::UnaryInstruction(llvm::UnaryInstruction *this, llvm::Type *a2, unsigned int a3, llvm::Value *a4, llvm::Instruction *a5)
{
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v6 = (_QWORD *)((char *)this - 32);
  result = llvm::Instruction::Instruction();
  if (*(_QWORD *)(result - 32))
  {
    **(_QWORD **)(result - 16) = *(_QWORD *)(result - 24);
    v8 = *(_QWORD *)(result - 24);
    if (v8)
      *(_QWORD *)(v8 + 16) = *(_QWORD *)(result - 16);
  }
  *v6 = a4;
  if (a4)
  {
    v11 = *((_QWORD *)a4 + 1);
    v10 = (_QWORD *)((char *)a4 + 8);
    v9 = v11;
    *(_QWORD *)(result - 24) = v11;
    if (v11)
      *(_QWORD *)(v9 + 16) = result - 24;
    *(_QWORD *)(result - 16) = v10;
    *v10 = v6;
  }
  return result;
}

uint64_t llvm::IRBuilderBase::CreateExtractElement(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4, llvm::Instruction *a5)
{
  uint64_t v7;
  BOOL v8;
  uint64_t v10;
  _BYTE v11[32];
  __int16 v12;

  if (a2 && *((unsigned __int8 *)a2 + 16) <= 0x14u && a3 && *((unsigned __int8 *)a3 + 16) <= 0x14u)
  {
    v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 320))(*((_QWORD *)this + 9));
    if (v7)
      v8 = *(unsigned __int8 *)(v7 + 16) >= 0x1Cu;
    else
      v8 = 0;
    if (v8)
      return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, v7, (uint64_t)a4);
  }
  else
  {
    v12 = 257;
    v10 = llvm::ExtractElementInst::Create(a2, a3, (llvm::Value *)v11, 0, a5);
    return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, v10, (uint64_t)a4);
  }
  return v7;
}

uint64_t llvm::IRBuilderBase::CreateInsertElement(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, const llvm::Twine *a5, llvm::Instruction *a6)
{
  uint64_t v8;
  BOOL v9;
  uint64_t v11;
  _BYTE v12[32];
  __int16 v13;

  if (a2
    && *((unsigned __int8 *)a2 + 16) <= 0x14u
    && a3
    && *((unsigned __int8 *)a3 + 16) <= 0x14u
    && a4
    && *((unsigned __int8 *)a4 + 16) <= 0x14u)
  {
    v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 328))(*((_QWORD *)this + 9));
    if (v8)
      v9 = *(unsigned __int8 *)(v8 + 16) >= 0x1Cu;
    else
      v9 = 0;
    if (v9)
      return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, v8, (uint64_t)a5);
  }
  else
  {
    v13 = 257;
    v11 = llvm::InsertElementInst::Create(a2, a3, a4, (llvm::Value *)v12, 0, a6);
    return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, v11, (uint64_t)a5);
  }
  return v8;
}

uint64_t llvm::ExtractElementInst::Create(llvm::ExtractElementInst *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4, llvm::Instruction *a5)
{
  uint64_t v9;

  v9 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x24268CE40](v9, this, a2, a3, a4);
  return v9;
}

void sub_240FB9C44(_Unwind_Exception *a1)
{
  void *v1;

  llvm::User::operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t llvm::InsertElementInst::Create(llvm::InsertElementInst *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, const llvm::Twine *a5, llvm::Instruction *a6)
{
  uint64_t v11;

  v11 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x24268CDC8](v11, this, a2, a3, a4, a5);
  return v11;
}

void sub_240FB9CC0(_Unwind_Exception *a1)
{
  void *v1;

  llvm::User::operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t llvm::InsertValueInst::Create()
{
  uint64_t v0;

  v0 = llvm::User::operator new((llvm::User *)0x60);
  llvm::Instruction::Instruction();
  *(_QWORD *)(v0 + 64) = v0 + 80;
  *(_QWORD *)(v0 + 72) = 0x400000000;
  llvm::InsertValueInst::init();
  return v0;
}

void sub_240FB9D78(_Unwind_Exception *a1)
{
  llvm::Instruction *v1;
  void *v2;
  void *v4;

  v4 = (void *)*((_QWORD *)v1 + 8);
  if (v4 != v2)
    free(v4);
  llvm::Instruction::~Instruction(v1);
  llvm::User::operator delete(v1);
  _Unwind_Resume(a1);
}

std::vector<unsigned int> *__cdecl std::vector<unsigned int>::vector(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n, const std::vector<unsigned int>::value_type *__x)
{
  std::vector<unsigned int>::pointer end;
  unsigned int *v7;
  std::vector<unsigned int>::size_type v8;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v7 = &end[__n];
    v8 = 4 * __n;
    do
    {
      *end++ = *__x;
      v8 -= 4;
    }
    while (v8);
    this->__end_ = v7;
  }
  return this;
}

void sub_240FB9E10(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<BOOL>::vector(_QWORD *a1, unint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  int v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    v6 = *a3;
    v7 = a1[1];
    v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        v13 = *a1 + 8 * (v7 >> 6);
        v14 = v7 & 0x3F;
        if (v6)
          std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v13, a2);
        else
          std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v13, a2);
        return a1;
      }
    }
    else
    {
      v9 = v8 - 1;
    }
    v10 = v9 >> 6;
    if (v8 >= 0x41)
      v11 = v10;
    else
      v11 = 0;
    *(_QWORD *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  void *result;
  uint64_t v4;

  if (a2 < 0)
    std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
  result = std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

_QWORD *std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v3 = result;
  v4 = *((_DWORD *)result + 2);
  v5 = (_QWORD *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    v2 = a2 - v6;
    *result = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    result = memset(v5, 255, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    v2 = a2 - v6;
    *(_QWORD *)a1 = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    bzero(v5, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *(_QWORD *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

_QWORD *std::vector<llvm::Type *>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<llvm::Type *>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_240FBA0F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<llvm::Type *>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

_QWORD *std::vector<llvm::Value *>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<llvm::Type *>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_240FBA1A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<llvm::Metadata *>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<llvm::Type *>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_240FBA21C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL MTLBoundsCheck::isLibraryModule(MTLBoundsCheck *this, llvm::Module *a2)
{
  _QWORD v4[4];
  __int16 v5;

  v4[0] = "air.vertex";
  v5 = 259;
  if (llvm::Module::getNamedMetadata(this, (const llvm::Twine *)v4))
    return 0;
  v4[0] = "air.fragment";
  v5 = 259;
  if (llvm::Module::getNamedMetadata(this, (const llvm::Twine *)v4))
    return 0;
  v4[0] = "air.kernel";
  v5 = 259;
  if (llvm::Module::getNamedMetadata(this, (const llvm::Twine *)v4))
    return 0;
  v4[0] = "air.object";
  v5 = 259;
  if (llvm::Module::getNamedMetadata(this, (const llvm::Twine *)v4))
    return 0;
  v4[0] = "air.mesh";
  v5 = 259;
  return llvm::Module::getNamedMetadata(this, (const llvm::Twine *)v4) == 0;
}

void MTLBoundsCheck::getMangledTypeStr(MTLBoundsCheck *this@<X0>, llvm::Type *a2@<X1>, std::string *a3@<X8>)
{
  unint64_t v5;
  int v6;
  char *v7;
  unint64_t v8;
  char *v9;
  BOOL v10;
  const std::string::value_type *Name;
  std::string::size_type v12;
  unint64_t v13;
  std::string *v14;
  __int128 v15;
  llvm::Type *v16;
  std::string *v17;
  std::string::size_type size;
  std::string *v19;
  __int128 v20;
  void **v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  void **v25;
  std::string::size_type v26;
  llvm::Type *v27;
  unint64_t v28;
  void **v29;
  std::string::size_type v30;
  std::string *v31;
  __int128 v32;
  llvm::Type *v33;
  std::string *v34;
  std::string::size_type v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  __int128 v39;
  llvm::Type *v40;
  std::string *v41;
  std::string::size_type v42;
  std::string *v43;
  __int128 v44;
  llvm::Type *v45;
  uint64_t v46;
  MTLBoundsCheck **v47;
  uint64_t v48;
  void **v49;
  std::string::size_type v50;
  std::string v51;
  std::string v52;
  void *__p[2];
  int64_t v54;
  std::string v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  v5 = *((unsigned int *)this + 2);
  v6 = *((_DWORD *)this + 2);
  if (this && v6 == 15)
  {
    if (v5 >= 0x100)
    {
      v13 = v5 >> 8;
      v7 = &v55.__r_.__value_.__s.__data_[21];
      do
      {
        *--v7 = (v13 % 0xA) | 0x30;
        v10 = v13 > 9;
        v13 /= 0xAuLL;
      }
      while (v10);
    }
    else
    {
      v7 = &v55.__r_.__value_.__s.__data_[20];
      v55.__r_.__value_.__s.__data_[20] = 48;
    }
    std::string::__init_with_size[abi:ne180100]<char *,char *>(&v51, v7, &v55.__r_.__value_.__s.__data_[21], (char *)&v55.__r_.__value_.__r.__words[2] + 5 - v7);
    v14 = std::string::insert(&v51, 0, "p");
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    MTLBoundsCheck::getMangledTypeStr((uint64_t *)&v55, **((MTLBoundsCheck ***)this + 2), v16);
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17 = &v55;
    else
      v17 = (std::string *)v55.__r_.__value_.__r.__words[0];
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v55.__r_.__value_.__r.__words[2]);
    else
      size = v55.__r_.__value_.__l.__size_;
    v19 = std::string::append(&v52, (const std::string::value_type *)v17, size);
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v54 = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    if (v54 >= 0)
      v21 = __p;
    else
      v21 = (void **)__p[0];
    if (v54 >= 0)
      v22 = HIBYTE(v54);
    else
      v22 = (std::string::size_type)__p[1];
LABEL_68:
    std::string::append(a3, (const std::string::value_type *)v21, v22);
    if (SHIBYTE(v54) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v55.__r_.__value_.__l.__data_);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v51.__r_.__value_.__l.__data_);
    return;
  }
  if (this && v6 == 17)
  {
    v8 = *((_QWORD *)this + 4);
    if (v8)
    {
      v9 = &v55.__r_.__value_.__s.__data_[21];
      do
      {
        *--v9 = (v8 % 0xA) | 0x30;
        v10 = v8 > 9;
        v8 /= 0xAuLL;
      }
      while (v10);
    }
    else
    {
      v9 = &v55.__r_.__value_.__s.__data_[20];
      v55.__r_.__value_.__s.__data_[20] = 48;
    }
    std::string::__init_with_size[abi:ne180100]<char *,char *>(&v51, v9, &v55.__r_.__value_.__s.__data_[21], (char *)&v55.__r_.__value_.__r.__words[2] + 5 - v9);
    v31 = std::string::insert(&v51, 0, "a");
    v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    MTLBoundsCheck::getMangledTypeStr((uint64_t *)&v55, *((MTLBoundsCheck **)this + 3), v33);
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v34 = &v55;
    else
      v34 = (std::string *)v55.__r_.__value_.__r.__words[0];
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v35 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
    else
      v35 = v55.__r_.__value_.__l.__size_;
    v36 = std::string::append(&v52, (const std::string::value_type *)v34, v35);
    v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v54 = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    if (v54 >= 0)
      v21 = __p;
    else
      v21 = (void **)__p[0];
    if (v54 >= 0)
      v22 = HIBYTE(v54);
    else
      v22 = (std::string::size_type)__p[1];
    goto LABEL_68;
  }
  if (this && v6 == 16)
  {
    if ((v5 & 0x400) != 0)
    {
      std::string::append(a3, "sl_");
      v46 = *((unsigned int *)this + 3);
      if ((_DWORD)v46)
      {
        v47 = (MTLBoundsCheck **)*((_QWORD *)this + 2);
        v48 = 8 * v46;
        do
        {
          MTLBoundsCheck::getMangledTypeStr((uint64_t *)__p, *v47, v45);
          if (v54 >= 0)
            v49 = __p;
          else
            v49 = (void **)__p[0];
          if (v54 >= 0)
            v50 = HIBYTE(v54);
          else
            v50 = (std::string::size_type)__p[1];
          std::string::append(a3, (const std::string::value_type *)v49, v50);
          if (SHIBYTE(v54) < 0)
            operator delete(__p[0]);
          ++v47;
          v48 -= 8;
        }
        while (v48);
      }
    }
    else
    {
      std::string::append(a3, "s_");
      Name = (const std::string::value_type *)llvm::StructType::getName(this);
      std::string::append(a3, Name, v12);
    }
    std::string::append(a3, "s");
  }
  else
  {
    if (!this || v6 != 14)
    {
      if (!this || v6 != 18)
        __asm { BR              X11 }
      llvm::utostr((llvm *)*((unsigned int *)this + 8), 0, &v51);
      v38 = std::string::insert(&v51, 0, "v");
      v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      MTLBoundsCheck::getMangledTypeStr((uint64_t *)&v55, *((MTLBoundsCheck **)this + 3), v40);
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v41 = &v55;
      else
        v41 = (std::string *)v55.__r_.__value_.__r.__words[0];
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v42 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
      else
        v42 = v55.__r_.__value_.__l.__size_;
      v43 = std::string::append(&v52, (const std::string::value_type *)v41, v42);
      v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      v54 = v43->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      if (v54 >= 0)
        v21 = __p;
      else
        v21 = (void **)__p[0];
      if (v54 >= 0)
        v22 = HIBYTE(v54);
      else
        v22 = (std::string::size_type)__p[1];
      goto LABEL_68;
    }
    MTLBoundsCheck::getMangledTypeStr((uint64_t *)&v52, **((MTLBoundsCheck ***)this + 2), a2);
    v23 = std::string::insert(&v52, 0, "f_");
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v54 = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    if (v54 >= 0)
      v25 = __p;
    else
      v25 = (void **)__p[0];
    if (v54 >= 0)
      v26 = HIBYTE(v54);
    else
      v26 = (std::string::size_type)__p[1];
    std::string::append(a3, (const std::string::value_type *)v25, v26);
    if (SHIBYTE(v54) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
    if (*((_DWORD *)this + 3) != 1)
    {
      v28 = 0;
      do
      {
        MTLBoundsCheck::getMangledTypeStr((uint64_t *)__p, *(MTLBoundsCheck **)(*((_QWORD *)this + 2) + 8 * v28 + 8), v27);
        if (v54 >= 0)
          v29 = __p;
        else
          v29 = (void **)__p[0];
        if (v54 >= 0)
          v30 = HIBYTE(v54);
        else
          v30 = (std::string::size_type)__p[1];
        std::string::append(a3, (const std::string::value_type *)v29, v30);
        if (SHIBYTE(v54) < 0)
          operator delete(__p[0]);
        ++v28;
      }
      while (v28 < (*((_DWORD *)this + 3) - 1));
    }
    if (*((_DWORD *)this + 2) > 0xFFu)
      std::string::append(a3, "vararg");
    std::string::append(a3, "f");
  }
}

void sub_240FBA984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v28 + 23) < 0)
    operator delete(*(void **)v28);
  _Unwind_Resume(exception_object);
}

_QWORD *llvm::utostr@<X0>(llvm *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  unint64_t v4;
  char *v5;
  BOOL v6;
  char v8;
  uint64_t v9;

  v4 = (unint64_t)this;
  v9 = *MEMORY[0x24BDAC8D0];
  if (!this)
  {
    v5 = &v8;
    v8 = 48;
    if (!a2)
      return std::string::__init_with_size[abi:ne180100]<char *,char *>(a3, v5, (char *)&v9, (char *)&v9 - v5);
    goto LABEL_5;
  }
  v5 = (char *)&v9;
  do
  {
    *--v5 = (v4 % 0xA) | 0x30;
    v6 = v4 > 9;
    v4 /= 0xAuLL;
  }
  while (v6);
  if (a2)
LABEL_5:
    *--v5 = 45;
  return std::string::__init_with_size[abi:ne180100]<char *,char *>(a3, v5, (char *)&v9, (char *)&v9 - v5);
}

void MTLBoundsCheck::gatherMemoryArguments(uint64_t a1, uint64_t a2)
{
  llvm::Module *v4;
  llvm::Type *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t Name;
  llvm::LLVMContext *v10;
  _BOOL4 v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  BOOL v19;
  llvm::StructType *v22;
  _BOOL4 v23;
  int v24;
  BOOL v29;
  _DWORD *v31;
  _DWORD *v32;
  llvm::LLVMContext *v33;
  unsigned int v34;
  int v35;
  void *v36;
  char *v37;
  uint64_t v38;
  int v39;
  uint64_t v40[3];
  void *v41;
  uint64_t v42;
  _QWORD v43[11];

  v43[10] = *MEMORY[0x24BDAC8D0];
  v4 = *(llvm::Module **)(a1 + 40);
  v5 = *(llvm::Type **)v4;
  llvm::Module::getDataLayout(v4);
  if ((*(_WORD *)(a1 + 18) & 1) == 0)
  {
    v6 = *(char **)(a1 + 88);
LABEL_4:
    v7 = v6;
    goto LABEL_6;
  }
  llvm::Function::BuildLazyArguments((llvm::Function *)a1);
  v6 = *(char **)(a1 + 88);
  if ((*(_WORD *)(a1 + 18) & 1) == 0)
    goto LABEL_4;
  llvm::Function::BuildLazyArguments((llvm::Function *)a1);
  v7 = *(char **)(a1 + 88);
LABEL_6:
  v8 = *(_QWORD *)(a1 + 96);
  Name = llvm::Value::getName((llvm::Value *)a1);
  v40[1] = Name;
  v40[2] = (uint64_t)v10;
  if ((unint64_t)v10 < 0xB)
  {
    if (v10 == (llvm::LLVMContext *)10)
    {
      if (*(_QWORD *)Name != 0x6D6F74612E726961 || *(_WORD *)(Name + 8) != 25449)
        goto LABEL_48;
      goto LABEL_63;
    }
    if ((unint64_t)v10 < 9)
      goto LABEL_52;
    goto LABEL_48;
  }
  v13 = *(_QWORD *)Name != 0x6D656D2E6D766C6CLL || *(_QWORD *)(Name + 3) != 0x7970636D656D2E6DLL;
  v14 = 0x6C6C766D2E6D656DLL;
  v15 = bswap64(*(_QWORD *)Name);
  if (v15 == 0x6C6C766D2E6D656DLL
    && (v14 = 0x6D2E6D656D636D70, v15 = bswap64(*(_QWORD *)(Name + 3)), v15 == 0x6D2E6D656D636D70))
  {
    v16 = 0;
    if (!v13)
      goto LABEL_59;
  }
  else
  {
    if (v15 < v14)
      v16 = -1;
    else
      v16 = 1;
    if (!v13)
      goto LABEL_59;
  }
  if (!v16)
  {
LABEL_59:
    v41 = v6;
    v23 = v16 == 0;
    v37 = v6 + 40;
    v40[0] = (uint64_t)(v6 + 80);
    LODWORD(v38) = 1;
    v39 = 1;
    llvm::SmallVectorImpl<MTLBoundsCheck::MemoryAccessOperand>::emplace_back<llvm::Value *&,llvm::Value *&,MTLGPUOperation,int>(a2, &v37, v40, (int *)&v38, &v39);
    if (v23)
      v24 = 1;
    else
      v24 = 2;
    LODWORD(v38) = v24;
    v39 = 0;
    llvm::SmallVectorImpl<MTLBoundsCheck::MemoryAccessOperand>::emplace_back<llvm::Value *&,llvm::Value *&,MTLGPUOperation,int>(a2, &v41, v40, (int *)&v38, &v39);
    return;
  }
  if (*(_QWORD *)Name == 0x6D656D2E6D766C6CLL && *(_QWORD *)(Name + 3) == 0x7465736D656D2E6DLL)
  {
    v41 = v6;
    v37 = v6 + 80;
    LODWORD(v40[0]) = 2;
    LODWORD(v38) = 0;
    llvm::SmallVectorImpl<MTLBoundsCheck::MemoryAccessOperand>::emplace_back<llvm::Value *&,llvm::Value *&,MTLGPUOperation,int>(a2, &v41, (uint64_t *)&v37, (int *)v40, (int *)&v38);
    return;
  }
  if (*(_QWORD *)Name == 0x6D6F74612E726961 && *(_WORD *)(Name + 8) == 25449)
  {
LABEL_63:
    v40[0] = (uint64_t)v6;
    v41 = v43;
    v42 = 0x500000000;
    llvm::StringRef::split();
    llvm::StringRef::find();
    v36 = v41;
    if (v41 == v43)
      return;
LABEL_107:
    free(v36);
    return;
  }
  if ((unint64_t)v10 >= 0x14)
  {
    v19 = *(_QWORD *)Name == 0x646D69732E726961 && *(_QWORD *)(Name + 8) == 0x616D5F70756F7267;
    if (v19 && *(_DWORD *)(Name + 16) == 2020176500)
    {
      v41 = v43;
      v42 = 0x500000000;
      llvm::StringRef::split();
      if (llvm::StringRef::find() == -1)
      {
        if (llvm::StringRef::find() == -1)
          goto LABEL_104;
        v35 = 2;
        v34 = 1;
      }
      else
      {
        v34 = 0;
        v35 = 1;
      }
      LODWORD(v38) = v34;
      v39 = v35;
      v37 = &v6[40 * v34];
      llvm::Type::getInt32Ty(v5, v33);
      v40[0] = llvm::ConstantInt::get();
      llvm::SmallVectorImpl<MTLBoundsCheck::MemoryAccessOperand>::emplace_back<llvm::Value *&,llvm::Value *&,MTLGPUOperation,int>(a2, &v37, v40, &v39, (int *)&v38);
LABEL_104:
      v36 = v41;
      if (v41 == v43)
        return;
      goto LABEL_107;
    }
  }
LABEL_48:
  if (*(_QWORD *)Name != 0x776172642E726961 || *(_BYTE *)(Name + 8) != 95)
  {
LABEL_52:
    LODWORD(v40[0]) = 0;
    while (v6 != &v7[40 * v8])
    {
      v41 = v6;
      if (*(_BYTE *)(*(_QWORD *)v6 + 8) == 15)
      {
        v22 = **(llvm::StructType ***)(*(_QWORD *)v6 + 16);
        if (*((_BYTE *)v22 + 8) != 16 || !isSpecialStructType(v22))
        {
          v37 = 0;
          llvm::Type::getInt32Ty(v5, v10);
          v37 = (char *)llvm::ConstantInt::get();
          LODWORD(v38) = 0;
          llvm::SmallVectorImpl<MTLBoundsCheck::MemoryAccessOperand>::emplace_back<llvm::Value *&,llvm::Value *&,MTLGPUOperation,int>(a2, &v41, (uint64_t *)&v37, (int *)&v38, (int *)v40);
        }
      }
      v6 += 40;
      ++LODWORD(v40[0]);
    }
    return;
  }
  v41 = 0;
  v42 = 0;
  v43[0] = 0;
  if ((unint64_t)v10 < 0x1B)
  {
    if ((unint64_t)v10 < 0x10)
      goto LABEL_94;
LABEL_78:
    if (*(_QWORD *)Name == 0x776172642E726961 && *(_QWORD *)(Name + 8) == 0x736568637461705FLL)
    {
      LODWORD(v37) = 5;
      std::vector<int>::push_back[abi:ne180100]((uint64_t)&v41, &v37);
      LODWORD(v37) = 8;
      std::vector<int>::push_back[abi:ne180100]((uint64_t)&v41, &v37);
    }
    else if ((unint64_t)v10 >= 0x18)
    {
      v29 = *(_QWORD *)Name == 0x776172642E726961 && *(_QWORD *)(Name + 8) == 0x64657865646E695FLL;
      if (v29 && *(_QWORD *)(Name + 16) == 0x736568637461705FLL)
      {
        LODWORD(v37) = 5;
        std::vector<int>::push_back[abi:ne180100]((uint64_t)&v41, &v37);
        LODWORD(v37) = 9;
        std::vector<int>::push_back[abi:ne180100]((uint64_t)&v41, &v37);
      }
    }
    goto LABEL_94;
  }
  if (*(_QWORD *)Name != 0x776172642E726961
    || *(_QWORD *)(Name + 8) != 0x64657865646E695FLL
    || *(_QWORD *)(Name + 16) != 0x6974696D6972705FLL
    || *(_QWORD *)(Name + 19) != 0x7365766974696D69)
  {
    goto LABEL_78;
  }
  LODWORD(v37) = 4;
  std::vector<int>::push_back[abi:ne180100]((uint64_t)&v41, &v37);
LABEL_94:
  v31 = v41;
  v32 = (_DWORD *)v42;
  if (v41 != (void *)v42)
  {
    do
    {
      LODWORD(v38) = *v31;
      v37 = &v6[40 * (int)v38];
      v40[0] = 0;
      llvm::Type::getInt32Ty(v5, v10);
      v40[0] = llvm::ConstantInt::get();
      v39 = 1;
      llvm::SmallVectorImpl<MTLBoundsCheck::MemoryAccessOperand>::emplace_back<llvm::Value *&,llvm::Value *&,MTLGPUOperation,int>(a2, &v37, v40, &v39, (int *)&v38);
      ++v31;
    }
    while (v31 != v32);
    v31 = v41;
  }
  if (v31)
  {
    v42 = (uint64_t)v31;
    operator delete(v31);
  }
}

void sub_240FBB508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t llvm::SmallVectorImpl<MTLBoundsCheck::MemoryAccessOperand>::emplace_back<llvm::Value *&,llvm::Value *&,MTLGPUOperation,int>(uint64_t a1, _QWORD *a2, uint64_t *a3, int *a4, int *a5)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_DWORD *)(a1 + 8);
  if (v5 >= *(_DWORD *)(a1 + 12))
    return llvm::SmallVectorTemplateBase<MTLBoundsCheck::MemoryAccessOperand,true>::growAndEmplaceBack<llvm::Value *&,llvm::Value *&,MTLGPUOperation,int>(a1, a2, a3, a4, a5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)a1 + 24 * v5;
  v8 = *a3;
  v9 = *a4;
  v10 = *a5;
  *(_QWORD *)v7 = *a2;
  *(_QWORD *)(v7 + 8) = v8;
  *(_DWORD *)(v7 + 16) = v9;
  *(_DWORD *)(v7 + 20) = v10;
  v11 = v5 + 1;
  *(_DWORD *)(a1 + 8) = v11;
  return v6 + 24 * v11 - 24;
}

uint64_t getPtrTypeFromIntrinsicNameSuffix(uint64_t a1, llvm::LLVMContext *a2, llvm::Type *this)
{
  uint64_t Int32Ty;
  llvm::LLVMContext *v7;
  uint64_t Int16Ty;
  llvm::LLVMContext *v9;
  uint64_t FloatTy;
  llvm::LLVMContext *v11;
  uint64_t Int64Ty;
  llvm::LLVMContext *v13;
  uint64_t HalfTy;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  BOOL v18;
  int v19;
  int v20;
  char *v22;
  int v25;
  int v26;

  Int32Ty = llvm::Type::getInt32Ty(this, a2);
  Int16Ty = llvm::Type::getInt16Ty(this, v7);
  FloatTy = llvm::Type::getFloatTy(this, v9);
  Int64Ty = llvm::Type::getInt64Ty(this, v11);
  HalfTy = llvm::Type::getHalfTy(this, v13);
  v15 = llvm::FixedVectorType::get();
  v16 = llvm::FixedVectorType::get();
  if ((unint64_t)a2 >= 4)
  {
    v17 = (char *)a2 + a1;
    if (*(_DWORD *)((char *)a2 + a1 - 4) == 842230062 || *((_DWORD *)v17 - 1) == 1952805727)
      return Int32Ty;
    v18 = (unint64_t)a2 < 6;
    if ((unint64_t)a2 >= 6)
    {
      v19 = *(_DWORD *)(v17 - 6);
      v20 = *((unsigned __int16 *)v17 - 1);
      if (v19 == 1701602094 && v20 == 29281)
        return Int32Ty;
      v18 = 0;
    }
  }
  else
  {
    if ((unint64_t)a2 < 2)
      return Int16Ty;
    v18 = 1;
  }
  v22 = (char *)a2 + a1;
  if (*(_WORD *)((char *)a2 + a1 - 2) != 29998 && *((_WORD *)v22 - 1) != 29486)
  {
    if ((unint64_t)a2 >= 4)
    {
      if (*((_DWORD *)v22 - 1) == 842229294)
        return FloatTy;
      if (*((_DWORD *)v22 - 1) == 875981102)
        return Int64Ty;
      if (v18)
        return Int16Ty;
    }
    else if (v18)
    {
      return Int16Ty;
    }
    if (*(_DWORD *)(v22 - 6) == 909207086 && *((_WORD *)v22 - 1) == 31060)
      return HalfTy;
    if (*(_DWORD *)(v22 - 6) == 1765045806 && *((_WORD *)v22 - 1) == 12851)
      return v15;
    v25 = *(_DWORD *)(v22 - 6);
    v26 = *((unsigned __int16 *)v22 - 1);
    if (v25 == 1714714158 && v26 == 12851)
      return v16;
    return Int16Ty;
  }
  return Int32Ty;
}

void std::vector<int>::push_back[abi:ne180100](uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  int v16;

  v4 = a1 + 16;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_DWORD **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *(_DWORD **)a1;
    v9 = ((uint64_t)v6 - *(_QWORD *)a1) >> 2;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v4, v12);
      v8 = *(_DWORD **)a1;
      v6 = *(_DWORD **)(a1 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = &v13[4 * v12];
    *(_DWORD *)v14 = *a2;
    v7 = v14 + 4;
    while (v6 != v8)
    {
      v16 = *--v6;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v6 = *a2;
    v7 = v6 + 1;
  }
  *(_QWORD *)(a1 + 8) = v7;
}

void MTLBoundsCheck::gatherMemoryOperands(uint64_t a1, uint64_t a2)
{
  llvm::Module *Module;
  llvm::Type *v5;
  llvm::LLVMContext *v6;
  uint64_t DataLayout;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;

  Module = (llvm::Module *)llvm::Instruction::getModule((llvm::Instruction *)a1);
  v5 = *(llvm::Type **)Module;
  DataLayout = llvm::Module::getDataLayout(Module);
  v8 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v8 == 84)
  {
    v9 = *(_QWORD *)(a1 - 32);
    if (v9)
    {
      if (!*(_BYTE *)(v9 + 16) && *(_QWORD *)(v9 + 24) == *(_QWORD *)(a1 + 72))
      {
        v10 = *(unsigned int *)(a2 + 8);
        MTLBoundsCheck::gatherMemoryArguments(v9, a2);
        v11 = *(unsigned int *)(a2 + 8);
        if ((_DWORD)v11 != (_DWORD)v10)
        {
          v12 = 0;
          v13 = v11 - v10;
          if (v13 <= 1)
            v13 = 1;
          v14 = *(_QWORD *)a2 + 24 * v10;
          do
          {
            *(_DWORD *)(v14 + 20) = v12;
            if (*(_QWORD *)v14)
              v15 = *(_BYTE *)(*(_QWORD *)v14 + 16) == 21;
            else
              v15 = 0;
            if (v15)
              *(_QWORD *)v14 = *(_QWORD *)(a1
                                         - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF)
                                         + 32 * *(unsigned int *)(*(_QWORD *)v14 + 32));
            v16 = *(_QWORD *)(v14 + 8);
            if (v16)
              v17 = *(_BYTE *)(v16 + 16) == 21;
            else
              v17 = 0;
            if (v17)
              *(_QWORD *)(v14 + 8) = *(_QWORD *)(a1
                                               - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF)
                                               + 32 * *(unsigned int *)(v16 + 32));
            ++v12;
            v14 += 24;
          }
          while (v13 != v12);
        }
      }
    }
  }
  else
  {
    if (v8 == 61)
    {
      v24 = *(_QWORD *)(a1 - 32);
      llvm::Type::getInt32Ty(v5, v6);
      llvm::DataLayout::getTypeSizeInBits(DataLayout, **(_QWORD **)(*(_QWORD *)v24 + 16));
      v23 = v19 == 1;
      llvm::TypeSize::operator unsigned long long();
      v22 = llvm::ConstantInt::get();
      v20 = 1;
      v21 = 2;
    }
    else
    {
      if (v8 != 60)
        return;
      v24 = *(_QWORD *)(a1 - 32);
      llvm::Type::getInt32Ty(v5, v6);
      llvm::DataLayout::getTypeSizeInBits(DataLayout, **(_QWORD **)(*(_QWORD *)v24 + 16));
      v23 = v18 == 1;
      llvm::TypeSize::operator unsigned long long();
      v22 = llvm::ConstantInt::get();
      v20 = 0;
      v21 = 1;
    }
    llvm::SmallVectorImpl<MTLBoundsCheck::MemoryAccessOperand>::emplace_back<llvm::Value *&,llvm::Value *&,MTLGPUOperation,int>(a2, &v24, &v22, &v21, &v20);
  }
}

uint64_t MTLBoundsCheck::lookThroughPointerOps(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t result;

  v2 = 0;
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v3 >= 0x1C)
  {
    v2 = 0;
    while (v3 - 77 >= 2)
    {
      if (v3 == 62)
      {
        v4 = *(_DWORD *)(a1 + 20);
LABEL_9:
        v5 = (uint64_t *)(a1 - 32 * (v4 & 0x7FFFFFF));
LABEL_10:
        v6 = *v5;
        v2 = a1;
        goto LABEL_12;
      }
      v6 = a1;
LABEL_12:
      v3 = *(unsigned __int8 *)(v6 + 16);
      if (v6)
      {
        a1 = v6;
        if (v3 > 0x1B)
          continue;
      }
      goto LABEL_16;
    }
    v4 = *(_DWORD *)(a1 + 20);
    if ((v4 & 0x40000000) == 0)
      goto LABEL_9;
    v5 = *(uint64_t **)(a1 - 8);
    goto LABEL_10;
  }
  v6 = a1;
LABEL_16:
  if (v3 == 5)
  {
    do
    {
      v7 = *(unsigned __int16 *)(v6 + 18);
      v8 = v7 > 0x32;
      v9 = (1 << v7) & 0x6000400000000;
      if (v8 || v9 == 0)
      {
        result = v6;
        if (!v6)
          break;
      }
      else
      {
        result = *(_QWORD *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF));
        v2 = v6;
        if (!result)
          break;
      }
      v6 = result;
    }
    while (*(_BYTE *)(result + 16) == 5);
  }
  else
  {
    result = v6;
  }
  if (a2)
    *a2 = v2;
  return result;
}

BOOL MTLBoundsCheck::checkAddressSpace(MTLBoundsCheck *this)
{
  return ((_DWORD)this - 1) < 2;
}

BOOL MTLBoundsCheck::checkAddressSpace(uint64_t a1)
{
  unsigned int v1;

  v1 = *(_DWORD *)(*(_QWORD *)a1 + 8);
  if ((v1 & 0xFE) == 0x12)
    v1 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a1 + 16) + 8);
  return (v1 >> 8) - 1 < 2;
}

uint64_t MTLBoundsCheck::gpuOperationToResourceUsage(unsigned int a1)
{
  if (a1 > 4)
    return 3;
  else
    return dword_24105A350[a1];
}

llvm::NamedMDNode *MTLBoundsCheck::getQualifiedFunctionsMetadata@<X0>(MTLBoundsCheck *this@<X0>, llvm::Module *a2@<X1>, uint64_t a3@<X8>)
{
  char v5;
  llvm::NamedMDNode *result;
  llvm::NamedMDNode *v7;
  int v8;
  int v9;
  uint64_t Operand;
  uint64_t v11;
  _QWORD v12[4];
  char v13;
  char v14;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  v5 = 1;
  v14 = 1;
  if (*(_BYTE *)a2)
  {
    v12[0] = a2;
    v5 = 3;
  }
  v13 = v5;
  result = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(this, (const llvm::Twine *)v12);
  v7 = result;
  if (result)
  {
    result = (llvm::NamedMDNode *)llvm::NamedMDNode::getNumOperands(result);
    v8 = (int)result;
    if ((_DWORD)result)
    {
      v9 = 0;
      do
      {
        Operand = llvm::NamedMDNode::getOperand(v7);
        v11 = Operand - 8 * *(unsigned int *)(Operand + 8);
        v12[0] = 0;
        v12[0] = *(_QWORD *)(*(_QWORD *)v11 + 128);
        result = (llvm::NamedMDNode *)llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>,llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::FindAndConstruct((uint64_t *)a3, v12);
        *((_QWORD *)result + 1) = Operand;
        ++v9;
      }
      while (v8 != v9);
    }
  }
  return result;
}

void sub_240FBBCD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap(v1);
  _Unwind_Resume(a1);
}

llvm::NamedMDNode *MTLBoundsCheck::getVisibleFunctionsMetadata@<X0>(MTLBoundsCheck *this@<X0>, uint64_t a2@<X8>)
{
  return MTLBoundsCheck::getQualifiedFunctionsMetadata(this, (llvm::Module *)"air.visible", a2);
}

llvm::NamedMDNode *MTLBoundsCheck::getIntersectionFunctionsMetadata@<X0>(MTLBoundsCheck *this@<X0>, uint64_t a2@<X8>)
{
  return MTLBoundsCheck::getQualifiedFunctionsMetadata(this, (llvm::Module *)"air.intersection", a2);
}

llvm::NamedMDNode *MTLBoundsCheck::getMetalMetadata@<X0>(MTLBoundsCheck *this@<X0>, uint64_t a2@<X8>)
{
  llvm::NamedMDNode *NamedMetadata;
  llvm::NamedMDNode *v6;
  llvm::NamedMDNode *v7;
  llvm::NamedMDNode *v8;
  llvm::NamedMDNode *v9;
  llvm::NamedMDNode *v10;
  llvm::NamedMDNode *result;
  uint64_t v12;
  char v13;
  _QWORD v14[4];
  __int16 v15;

  v14[0] = "air.vertex";
  v15 = 259;
  NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(this, (const llvm::Twine *)v14);
  v14[0] = "air.kernel";
  v15 = 259;
  v6 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(this, (const llvm::Twine *)v14);
  v14[0] = "air.fragment";
  v15 = 259;
  v7 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(this, (const llvm::Twine *)v14);
  v14[0] = "air.intersection";
  v15 = 259;
  v8 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(this, (const llvm::Twine *)v14);
  v14[0] = "air.visible";
  v15 = 259;
  v9 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(this, (const llvm::Twine *)v14);
  v14[0] = "air.mesh";
  v15 = 259;
  v10 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(this, (const llvm::Twine *)v14);
  v14[0] = "air.object";
  v15 = 259;
  result = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(this, (const llvm::Twine *)v14);
  if (NamedMetadata)
  {
    result = (llvm::NamedMDNode *)llvm::NamedMDNode::getOperand(NamedMetadata);
    *(_QWORD *)a2 = 0;
  }
  else
  {
    if (v6)
    {
      result = (llvm::NamedMDNode *)llvm::NamedMDNode::getOperand(v6);
      v12 = 2;
    }
    else
    {
      if (v7)
      {
        result = (llvm::NamedMDNode *)llvm::NamedMDNode::getOperand(v7);
        v13 = 1;
        *(_QWORD *)a2 = 1;
        *(_QWORD *)(a2 + 8) = result;
        goto LABEL_7;
      }
      if (v8)
      {
        result = (llvm::NamedMDNode *)llvm::NamedMDNode::getOperand(v8);
        v12 = 3;
      }
      else if (v9)
      {
        result = (llvm::NamedMDNode *)llvm::NamedMDNode::getOperand(v9);
        v12 = 4;
      }
      else if (v10)
      {
        result = (llvm::NamedMDNode *)llvm::NamedMDNode::getOperand(v10);
        v12 = 5;
      }
      else
      {
        if (!result)
        {
          v13 = 0;
          *(_BYTE *)a2 = 0;
          goto LABEL_7;
        }
        result = (llvm::NamedMDNode *)llvm::NamedMDNode::getOperand(result);
        v12 = 6;
      }
    }
    *(_QWORD *)a2 = v12;
  }
  *(_QWORD *)(a2 + 8) = result;
  v13 = 1;
LABEL_7:
  *(_BYTE *)(a2 + 16) = v13;
  return result;
}

uint64_t MTLBoundsCheck::SerializedData::fromMetaData(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t i;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t j;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t k;
  uint64_t v31;
  uint64_t String;
  uint64_t v33;

  v2 = result;
  v3 = (_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  v5 = *v3;
  v4 = v3[1];
  v6 = v3[2];
  v7 = *(unsigned int *)(*v3 + 8);
  if ((_DWORD)v7)
  {
    for (i = 0; i < v7; ++i)
    {
      v9 = *(_QWORD *)(v5 - 8 * v7 + 8 * i);
      v10 = (_QWORD *)(v9 - 8 * *(unsigned int *)(v9 + 8));
      v11 = *(_QWORD *)(*v10 + 128);
      v12 = (_QWORD *)(v11 + 24);
      if (*(_DWORD *)(v11 + 32) >= 0x41u)
        v12 = (_QWORD *)*v12;
      LODWORD(String) = *v12;
      v13 = *(_QWORD *)(v10[1] + 128);
      v14 = (_QWORD *)(v13 + 24);
      if (*(_DWORD *)(v13 + 32) >= 0x41u)
        v14 = (_QWORD *)*v14;
      HIDWORD(String) = *v14;
      v15 = *(_QWORD *)(v10[2] + 128);
      v16 = (_QWORD *)(v15 + 24);
      if (*(_DWORD *)(v15 + 32) >= 0x41u)
        v16 = (_QWORD *)*v16;
      LODWORD(v33) = *v16;
      v17 = *(_QWORD *)(v10[3] + 128);
      v18 = (_QWORD *)(v17 + 24);
      if (*(_DWORD *)(v17 + 32) >= 0x41u)
        v18 = (_QWORD *)*v18;
      HIDWORD(v33) = *v18;
      result = llvm::SmallVectorImpl<MTLBoundsCheck::DebugLocation>::emplace_back<MTLBoundsCheck::DebugLocation&>(v2 + 112, &String);
      v7 = *(unsigned int *)(v5 + 8);
    }
  }
  v19 = *(unsigned int *)(v4 + 8);
  if ((_DWORD)v19)
  {
    for (j = 0; j < v19; ++j)
    {
      v21 = *(_QWORD *)(v4 - 8 * v19 + 8 * j);
      v22 = (_QWORD *)(v21 - 8 * *(unsigned int *)(v21 + 8));
      v23 = *(_QWORD *)(*v22 + 128);
      v24 = (_QWORD *)(v23 + 24);
      if (*(_DWORD *)(v23 + 32) >= 0x41u)
        v24 = (_QWORD *)*v24;
      LODWORD(String) = *v24;
      v25 = *(_QWORD *)(v22[1] + 128);
      v26 = (_QWORD *)(v25 + 24);
      if (*(_DWORD *)(v25 + 32) >= 0x41u)
        v26 = (_QWORD *)*v26;
      HIDWORD(String) = *v26;
      v27 = *(_QWORD *)(v22[2] + 128);
      v28 = (_QWORD *)(v27 + 24);
      if (*(_DWORD *)(v27 + 32) >= 0x41u)
        v28 = (_QWORD *)*v28;
      LODWORD(v33) = *v28;
      result = llvm::SmallVectorImpl<MTLBoundsCheck::DebugSubProgram>::emplace_back<MTLBoundsCheck::DebugSubProgram&>(v2 + 384, (uint64_t)&String);
      v19 = *(unsigned int *)(v4 + 8);
    }
  }
  v29 = *(unsigned int *)(v6 + 8);
  if ((_DWORD)v29)
  {
    for (k = 0; k < v29; ++k)
    {
      String = llvm::MDString::getString(*(llvm::MDString **)(v6 - 8 * v29 + 8 * k));
      v33 = v31;
      result = llvm::SmallVectorImpl<std::string>::emplace_back<llvm::StringRef>(v2, (const void **)&String);
      v29 = *(unsigned int *)(v6 + 8);
    }
  }
  *(_BYTE *)(v2 + 650) = 1;
  return result;
}

uint64_t llvm::SmallVectorImpl<MTLBoundsCheck::DebugLocation>::emplace_back<MTLBoundsCheck::DebugLocation&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int v4;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorTemplateBase<std::pair<unsigned int,llvm::MDNode *>,true>::push_back(a1, *a2, a2[1]);
    v4 = *(_DWORD *)(a1 + 8);
  }
  else
  {
    *(_OWORD *)(*(_QWORD *)a1 + 16 * v3) = *(_OWORD *)a2;
    v4 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v4;
  }
  return *(_QWORD *)a1 + 16 * v4 - 16;
}

uint64_t llvm::SmallVectorImpl<MTLBoundsCheck::DebugSubProgram>::emplace_back<MTLBoundsCheck::DebugSubProgram&>(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorTemplateBase<MTLBoundsCheck::DebugSubProgram,true>::push_back(a1, *(_QWORD *)a2, *(_DWORD *)(a2 + 8));
    v6 = *(_DWORD *)(a1 + 8);
  }
  else
  {
    v4 = *(_QWORD *)a1 + 12 * v3;
    v5 = *(_QWORD *)a2;
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(a2 + 8);
    *(_QWORD *)v4 = v5;
    v6 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v6;
  }
  return *(_QWORD *)a1 + 12 * v6 - 12;
}

uint64_t llvm::SmallVectorImpl<std::string>::emplace_back<llvm::StringRef>(uint64_t a1, const void **a2)
{
  unsigned int v3;
  _QWORD *v4;
  size_t v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned int v10;

  v3 = *(_DWORD *)(a1 + 8);
  if (v3 < *(_DWORD *)(a1 + 12))
  {
    v4 = (_QWORD *)(*(_QWORD *)a1 + 24 * v3);
    v5 = (size_t)a2[1];
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = *a2;
    if (v5 >= 0x17)
    {
      v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v7 = v5 | 7;
      v8 = v7 + 1;
      v9 = operator new(v7 + 1);
      v4[1] = v5;
      v4[2] = v8 | 0x8000000000000000;
      *v4 = v9;
      v4 = v9;
    }
    else
    {
      *((_BYTE *)v4 + 23) = v5;
      if (!v5)
        goto LABEL_10;
    }
    memmove(v4, v6, v5);
LABEL_10:
    *((_BYTE *)v4 + v5) = 0;
    v10 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v10;
    return *(_QWORD *)a1 + 24 * v10 - 24;
  }
  return llvm::SmallVectorTemplateBase<std::string,false>::growAndEmplaceBack<llvm::StringRef>(a1, (uint64_t)a2);
}

uint64_t MTLBoundsCheck::SerializedData::dump(MTLBoundsCheck::SerializedData *this)
{
  uint64_t result;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = printf("threadgroupArgumentOffset: %d\nthreadgroupArgumentMask: %X\nserializedFromMetadata: %d\n", *((_DWORD *)this + 158), *((_DWORD *)this + 159), *((unsigned __int8 *)this + 650));
  v3 = *((unsigned int *)this + 30);
  if ((_DWORD)v3)
  {
    v4 = (unsigned int *)*((_QWORD *)this + 14);
    v5 = &v4[4 * v3];
    do
    {
      v6 = *((_QWORD *)this + 48);
      v7 = *(_QWORD *)this + 24 * *(unsigned int *)(v6 + 12 * *v4);
      if (*(char *)(v7 + 23) < 0)
        v7 = *(_QWORD *)v7;
      v8 = v6 + 12 * *v4;
      v9 = *(_QWORD *)this + 24 * *(unsigned int *)(v8 + 4);
      if (*(char *)(v9 + 23) < 0)
        v9 = *(_QWORD *)v9;
      result = printf("Location: %s:%d  :: %s, line: %d, col: %d, inlinedAt: %d\n", (const char *)v7, *(_DWORD *)(v8 + 8), (const char *)v9, v4[1], v4[2], v4[3]);
      v4 += 4;
    }
    while (v4 != v5);
  }
  return result;
}

uint64_t MTLBoundsCheck::SerializedData::toMetaData(MTLBoundsCheck::SerializedData *this, llvm::LLVMContext *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t Impl;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  _BYTE v19[32];
  void *v20[2];
  _BYTE v21[128];
  void *v22[2];
  _BYTE v23[128];
  void *v24[2];
  _QWORD v25[17];

  v25[16] = *MEMORY[0x24BDAC8D0];
  llvm::IntegerType::get();
  v24[0] = v25;
  v24[1] = (void *)0x1000000000;
  v22[0] = v23;
  v22[1] = (void *)0x1000000000;
  v20[0] = v21;
  v20[1] = (void *)0x1000000000;
  v3 = *((unsigned int *)this + 30);
  if ((_DWORD)v3)
  {
    v4 = *((_QWORD *)this + 14);
    v5 = v4 + 16 * v3;
    do
    {
      llvm::ConstantInt::get();
      Impl = llvm::ValueAsMetadata::get();
      llvm::ConstantInt::get();
      v15 = llvm::ValueAsMetadata::get();
      llvm::ConstantInt::get();
      v16 = llvm::ValueAsMetadata::get();
      llvm::ConstantInt::get();
      v17 = llvm::ValueAsMetadata::get();
      llvm::SmallVector<llvm::Metadata *,4u>::SmallVector(&v18, &Impl, 4);
      Impl = llvm::MDTuple::getImpl();
      llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)v24, &Impl);
      if (v18 != v19)
        free(v18);
      v4 += 16;
    }
    while (v4 != v5);
  }
  v6 = *((_DWORD *)this + 98);
  if (v6)
  {
    v7 = *((_QWORD *)this + 48);
    v8 = v7 + 12 * v6;
    do
    {
      llvm::ConstantInt::get();
      Impl = llvm::ValueAsMetadata::get();
      llvm::ConstantInt::get();
      v15 = llvm::ValueAsMetadata::get();
      llvm::ConstantInt::get();
      v16 = llvm::ValueAsMetadata::get();
      llvm::SmallVector<llvm::Metadata *,3u>::SmallVector(&v18, &Impl, 3);
      Impl = llvm::MDTuple::getImpl();
      llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)v20, &Impl);
      if (v18 != v19)
        free(v18);
      v7 += 12;
    }
    while (v7 != v8);
  }
  v9 = *((unsigned int *)this + 2);
  if ((_DWORD)v9)
  {
    v10 = *(_QWORD *)this;
    v11 = 24 * v9;
    do
    {
      v18 = (void *)llvm::MDString::get();
      llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)v22, (uint64_t *)&v18);
      v10 += 24;
      v11 -= 24;
    }
    while (v11);
  }
  Impl = llvm::MDTuple::getImpl();
  v15 = llvm::MDTuple::getImpl();
  v16 = llvm::MDTuple::getImpl();
  llvm::SmallVector<llvm::Metadata *,3u>::SmallVector(&v18, &Impl, 3);
  v12 = llvm::MDTuple::getImpl();
  if (v18 != v19)
    free(v18);
  if (v20[0] != v21)
    free(v20[0]);
  if (v22[0] != v23)
    free(v22[0]);
  if (v24[0] != v25)
    free(v24[0]);
  return v12;
}

void sub_240FBC6EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38)
{
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  void *v43;

  if (a14 != &a16)
    free(a14);
  if (a20 != v40)
    free(a20);
  if (a38 != v39)
    free(a38);
  v43 = *(void **)(v41 - 232);
  if (v43 != v38)
    free(v43);
  _Unwind_Resume(exception_object);
}

uint64_t MTLBoundsCheck::getLocationIndex(uint64_t a1)
{
  unint64_t v1;
  uint64_t v3;
  llvm::MDString *v4;
  uint64_t String;
  uint64_t v6;
  BOOL v8;
  uint64_t v10;
  unsigned int *v11;

  v1 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v1)
    return 0xFFFFFFFFLL;
  v3 = 0;
  while (1)
  {
    v4 = *(llvm::MDString **)(a1 - 8 * v1 + 8 * v3);
    if (!*(_BYTE *)v4)
      break;
LABEL_15:
    if (++v3 >= v1)
      return 0xFFFFFFFFLL;
  }
  String = llvm::MDString::getString(v4);
  if (v6 != 18)
  {
    v1 = *(unsigned int *)(a1 + 8);
    goto LABEL_15;
  }
  v8 = *(_QWORD *)String == 0x61636F6C2E726961
    && *(_QWORD *)(String + 8) == 0x646E695F6E6F6974
    && *(_WORD *)(String + 16) == 30821;
  v1 = *(unsigned int *)(a1 + 8);
  if (!v8)
    goto LABEL_15;
  v10 = *(_QWORD *)(*(_QWORD *)(a1 - 8 * v1 + 8 * v3 + 8) + 128);
  v11 = (unsigned int *)(v10 + 24);
  if (*(_DWORD *)(v10 + 32) >= 0x41u)
    v11 = *(unsigned int **)v11;
  return *v11;
}

uint64_t MTLBoundsCheck::getAddressSpace(uint64_t a1)
{
  unint64_t v1;
  uint64_t v3;
  llvm::MDString *v4;
  uint64_t String;
  uint64_t v6;
  BOOL v8;
  uint64_t v10;
  unsigned int *v11;

  v1 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v1)
    return 0xFFFFFFFFLL;
  v3 = 0;
  while (1)
  {
    v4 = *(llvm::MDString **)(a1 - 8 * v1 + 8 * v3);
    if (!*(_BYTE *)v4)
      break;
LABEL_15:
    if (++v3 >= v1)
      return 0xFFFFFFFFLL;
  }
  String = llvm::MDString::getString(v4);
  if (v6 != 17)
  {
    v1 = *(unsigned int *)(a1 + 8);
    goto LABEL_15;
  }
  v8 = *(_QWORD *)String == 0x726464612E726961
    && *(_QWORD *)(String + 8) == 0x636170735F737365
    && *(_BYTE *)(String + 16) == 101;
  v1 = *(unsigned int *)(a1 + 8);
  if (!v8)
    goto LABEL_15;
  v10 = *(_QWORD *)(*(_QWORD *)(a1 - 8 * v1 + 8 * v3 + 8) + 128);
  v11 = (unsigned int *)(v10 + 24);
  if (*(_DWORD *)(v10 + 32) >= 0x41u)
    v11 = *(unsigned int **)v11;
  return *v11;
}

uint64_t MTLBoundsCheck::setLocationIndex(uint64_t a1)
{
  unint64_t v1;
  unint64_t v3;
  llvm::MDString *v4;
  uint64_t String;
  uint64_t v6;
  BOOL v7;
  uint64_t v10;
  llvm::Type *v11;

  v1 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v1)
    return 0;
  v3 = 0;
  while (1)
  {
    v4 = *(llvm::MDString **)(a1 - 8 * v1 + 8 * v3);
    if (!*(_BYTE *)v4)
    {
      String = llvm::MDString::getString(v4);
      if (v6 == 18)
      {
        v7 = *(_QWORD *)String == 0x61636F6C2E726961 && *(_QWORD *)(String + 8) == 0x646E695F6E6F6974;
        if (v7 && *(_WORD *)(String + 16) == 30821)
          break;
      }
    }
    ++v3;
    v1 = *(unsigned int *)(a1 + 8);
    if (v3 >= v1)
      return 0;
  }
  v10 = *(_QWORD *)(a1 + 16);
  v11 = (llvm::Type *)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 4) != 0)
    v11 = *(llvm::Type **)v11;
  llvm::Type::getInt32Ty(v11, (llvm::LLVMContext *)0x12);
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  llvm::MDNode::replaceOperandWith();
  return 1;
}

uint64_t MTLBoundsCheck::getArgTypeName@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;
  BOOL v10;
  uint64_t v11;

  v5 = *(unsigned int *)(result + 8);
  if ((_DWORD)v5)
  {
    v6 = result;
    for (i = 0; i < v5; ++i)
    {
      result = *(_QWORD *)(v6 - 8 * v5 + 8 * i);
      if (!*(_BYTE *)result)
      {
        result = llvm::MDString::getString((llvm::MDString *)result);
        if (v8 == 17)
        {
          v10 = *(_QWORD *)result == 0x5F6772612E726961
             && *(_QWORD *)(result + 8) == 0x6D616E5F65707974
             && *(_BYTE *)(result + 16) == 101;
          v5 = *(unsigned int *)(v6 + 8);
          if (v10)
          {
            result = llvm::MDString::getString(*(llvm::MDString **)(v6 - 8 * v5 + 8 * i + 8));
            *(_QWORD *)a3 = result;
            *(_QWORD *)(a3 + 8) = v11;
            *(_BYTE *)(a3 + 16) = 1;
            return result;
          }
        }
        else
        {
          v5 = *(unsigned int *)(v6 + 8);
        }
      }
    }
  }
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 16);
  return result;
}

unsigned int *MTLBoundsCheck::getArgName@<X0>(unsigned int *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  unsigned int *v6;
  unint64_t i;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  v5 = result[2];
  if ((_DWORD)v5)
  {
    v6 = result;
    for (i = 0; i < v5; ++i)
    {
      result = *(unsigned int **)&v6[2 * i + -2 * v5];
      if (!*(_BYTE *)result)
      {
        result = (unsigned int *)llvm::MDString::getString((llvm::MDString *)result);
        if (v8 == 12)
        {
          v9 = *(_QWORD *)result == 0x5F6772612E726961 && result[2] == 1701667182;
          v5 = v6[2];
          if (v9)
          {
            result = (unsigned int *)llvm::MDString::getString(*(llvm::MDString **)&v6[2 * i + 2 + -2 * v5]);
            *(_QWORD *)a3 = result;
            *(_QWORD *)(a3 + 8) = v10;
            *(_BYTE *)(a3 + 16) = 1;
            return result;
          }
        }
        else
        {
          v5 = v6[2];
        }
      }
    }
  }
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 16);
  return result;
}

__n128 MTLBoundsCheck::getArgAccessType@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  unint64_t i;
  llvm::MDString *v8;
  _QWORD *String;
  uint64_t v10;
  __n128 result;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;

  v5 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v5)
  {
    for (i = 0; i < v5; ++i)
    {
      v8 = *(llvm::MDString **)(a1 - 8 * v5 + 8 * i);
      if (!*(_BYTE *)v8)
      {
        String = (_QWORD *)llvm::MDString::getString(v8);
        v12 = String;
        v13 = v10;
        if (v10 == 14)
        {
          if (!memcmp(String, "air.read_write", 0xEuLL)
            || (*v12 == 0x746972772E726961 ? (v14 = *(_QWORD *)((char *)v12 + 6) == 0x796C6E6F5F657469) : (v14 = 0),
                v14))
          {
LABEL_19:
            *(_QWORD *)a3 = v12;
            *(_QWORD *)(a3 + 8) = v13;
            *(_BYTE *)(a3 + 16) = 1;
            return result;
          }
        }
        else if (v10 == 9)
        {
          if (!memcmp(String, "air.write", 9uLL))
            goto LABEL_19;
        }
        else if (v10 == 8 && *String == 0x646165722E726961)
        {
          goto LABEL_19;
        }
      }
      v5 = *(unsigned int *)(a1 + 8);
    }
  }
  result = *a2;
  *(__n128 *)a3 = *a2;
  *(_QWORD *)(a3 + 16) = a2[1].n128_u64[0];
  return result;
}

uint64_t MTLBoundsCheck::getStructTypeInfo(uint64_t a1)
{
  unint64_t v1;
  unint64_t i;
  llvm::MDString *v4;
  uint64_t String;
  uint64_t v6;
  BOOL v8;

  v1 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v1)
  {
    for (i = 0; i < v1; ++i)
    {
      v4 = *(llvm::MDString **)(a1 - 8 * v1 + 8 * i);
      if (!*(_BYTE *)v4)
      {
        String = llvm::MDString::getString(v4);
        if (v6 == 20)
        {
          v8 = *(_QWORD *)String == 0x757274732E726961
            && *(_QWORD *)(String + 8) == 0x5F657079745F7463
            && *(_DWORD *)(String + 16) == 1868983913;
          v1 = *(unsigned int *)(a1 + 8);
          if (v8)
            return *(_QWORD *)(a1 - 8 * v1 + 8 * i + 8);
        }
        else
        {
          v1 = *(unsigned int *)(a1 + 8);
        }
      }
    }
  }
  return 0;
}

uint64_t createMTLIndirectMemRenamePass()
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &IndirectNameRenamePass::ID;
  *(_DWORD *)(result + 24) = 4;
  *(_QWORD *)result = &off_25111E5C8;
  return result;
}

uint64_t MTLAddDebugSymbolPrepassToPM(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *MTLDebugSymbolCollectionPass;
  __n128 MTLForceInlinerPass;
  uint64_t v11;
  llvm *v12;
  uint64_t GlobalDCEPass;

  v8 = operator new();
  *(_QWORD *)(v8 + 16) = &MTLBoundsCheck::SharedPassData::ID;
  *(_DWORD *)(v8 + 24) = 4;
  *(_QWORD *)v8 = &off_25111EAC8;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 64) = a4;
  *(_QWORD *)(v8 + 72) = a2;
  *(_QWORD *)(v8 + 80) = a3;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_DWORD *)(v8 + 120) = 1065353216;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_DWORD *)(v8 + 160) = 1065353216;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_DWORD *)(v8 + 200) = 1065353216;
  *(_DWORD *)(v8 + 224) = 0;
  *(_QWORD *)(v8 + 208) = 0;
  *(_QWORD *)(v8 + 216) = 0;
  *(_QWORD *)(v8 + 240) = 0;
  *(_QWORD *)(v8 + 248) = 0;
  *(_QWORD *)(v8 + 256) = 0x1000000000;
  *(_OWORD *)(v8 + 272) = 0u;
  *(_OWORD *)(v8 + 288) = 0u;
  *(_DWORD *)(v8 + 304) = 1065353216;
  *(_OWORD *)(v8 + 312) = 0u;
  *(_OWORD *)(v8 + 328) = 0u;
  *(_DWORD *)(v8 + 344) = 1065353216;
  MTLDebugSymbolCollectionPass = createMTLDebugSymbolCollectionPass((MTLBoundsCheck::SharedPassData *)v8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v8);
  MTLForceInlinerPass = createMTLForceInlinerPass(v8);
  v12 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)a1 + 16))(a1, v11, MTLForceInlinerPass);
  GlobalDCEPass = llvm::createGlobalDCEPass(v12);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, GlobalDCEPass);
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 16))(a1, MTLDebugSymbolCollectionPass);
}

uint64_t MTLUpdateBoundsRunPipeline(uint64_t a1, llvm::legacy::PassManager *a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  *(_QWORD *)(GlobalSharedPassData + 32) = *(_QWORD *)(a1 + 32);
  v6 = objc_msgSend((id)objc_msgSend(a3, "objectForKeyedSubscript:", CFSTR("MTLBoundsCheck::RenderPipelineData")), "bytes");
  *(_QWORD *)(GlobalSharedPassData + 40) = v6;
  v7 = objc_msgSend((id)objc_msgSend(a3, "objectForKeyedSubscript:", CFSTR("MTLBoundsCheck::ComputePipelineData")), "bytes");
  *(_QWORD *)(GlobalSharedPassData + 48) = v7;
  result = llvm::legacy::PassManager::run(a2, *(llvm::Module **)(a1 + 48));
  v9 = GlobalSharedPassData;
  *(_QWORD *)(GlobalSharedPassData + 40) = 0;
  *(_QWORD *)(v9 + 48) = 0;
  return result;
}

void MTLAddBoundsCheckPipelineToPM(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *MTLAddCustomFunctionsPass;
  uint64_t v11;
  uint64_t MTLStackOverflowPass;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  std::string *p_p;
  std::string::size_type size;
  std::string *v18;
  std::string *v19;
  __int128 v20;
  int v21;
  std::string *p_dst;
  std::string::size_type v23;
  std::string *v24;
  std::string *v25;
  __int128 v26;
  uint64_t BarrierNoopPass;
  uint64_t VerifierPass;
  llvm *v29;
  uint64_t v30;
  llvm *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  llvm *v35;
  uint64_t v36;
  std::string *v37;
  std::string::size_type v38;
  std::string *v39;
  std::string *v40;
  __int128 v41;
  std::string *v42;
  std::string::size_type v43;
  std::string *v44;
  std::string *v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  llvm *v49;
  uint64_t v50;
  _QWORD *MTLHoistStaticAllocasPass;
  llvm *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  llvm *v56;
  uint64_t v57;
  int v58;
  std::string *v59;
  std::string::size_type v60;
  std::string *v61;
  std::string *v62;
  __int128 v63;
  std::string *v64;
  std::string::size_type v65;
  std::string *v66;
  std::string *v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  llvm *v71;
  uint64_t v72;
  llvm *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  llvm *v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  std::string *v81;
  std::string::size_type v82;
  std::string *v83;
  std::string *v84;
  __int128 v85;
  std::string *v86;
  std::string::size_type v87;
  std::string *v88;
  std::string *v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  llvm *v93;
  uint64_t v94;
  llvm *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  llvm *v99;
  uint64_t v100;
  int v101;
  std::string *v102;
  std::string::size_type v103;
  std::string *v104;
  std::string *v105;
  __int128 v106;
  std::string *v107;
  std::string::size_type v108;
  std::string *v109;
  std::string *v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  llvm *v114;
  uint64_t v115;
  uint64_t CFGSimplificationPass;
  llvm *v117;
  uint64_t v118;
  uint64_t LoopSimplifyCFGPass;
  uint64_t LoopUnswitchPass;
  uint64_t LoopUnrollPass;
  llvm *v122;
  uint64_t InstructionCombiningPass;
  llvm *v124;
  uint64_t LICMPass;
  llvm *v126;
  uint64_t InstSimplifyLegacyPass;
  llvm *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  llvm *v132;
  uint64_t v133;
  int v134;
  std::string *v135;
  std::string::size_type v136;
  std::string *v137;
  std::string *v138;
  __int128 v139;
  std::string *v140;
  std::string::size_type v141;
  std::string *v142;
  std::string *v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  llvm *v147;
  uint64_t v148;
  llvm *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  llvm *v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  std::string *v157;
  std::string::size_type v158;
  std::string *v159;
  std::string *v160;
  __int128 v161;
  std::string *v162;
  std::string::size_type v163;
  std::string *v164;
  std::string *v165;
  __int128 v166;
  uint64_t v167;
  uint64_t v168;
  llvm *v169;
  uint64_t v170;
  llvm *v171;
  uint64_t SROAPass;
  uint64_t EarlyCSEPass;
  uint64_t v174;
  std::string *v175;
  uint64_t v176;
  uint64_t v177;
  llvm *v178;
  uint64_t NewGVNPass;
  llvm *v180;
  uint64_t PromoteMemoryToRegisterPass;
  llvm *v182;
  uint64_t v183;
  llvm *v184;
  uint64_t v185;
  llvm *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  llvm *v190;
  uint64_t v191;
  int v192;
  std::string *v193;
  std::string::size_type v194;
  std::string *v195;
  std::string *v196;
  __int128 v197;
  std::string *v198;
  std::string::size_type v199;
  std::string *v200;
  std::string *v201;
  __int128 v202;
  uint64_t v203;
  uint64_t v204;
  llvm *v205;
  uint64_t v206;
  llvm *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  llvm *v211;
  uint64_t v212;
  int v213;
  std::string *v214;
  std::string::size_type v215;
  std::string *v216;
  std::string *v217;
  __int128 v218;
  std::string *v219;
  std::string::size_type v220;
  std::string *v221;
  std::string *v222;
  __int128 v223;
  uint64_t v224;
  uint64_t v225;
  llvm *v226;
  uint64_t v227;
  llvm *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  llvm *v232;
  uint64_t v233;
  int v234;
  std::string *v235;
  std::string::size_type v236;
  std::string *v237;
  std::string *v238;
  __int128 v239;
  std::string *v240;
  std::string::size_type v241;
  std::string *v242;
  std::string *v243;
  __int128 v244;
  uint64_t v245;
  uint64_t v246;
  llvm *v247;
  uint64_t v248;
  _QWORD *MTLRaytracingIndirectionPass;
  llvm *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  llvm *v254;
  uint64_t v255;
  int v256;
  std::string *v257;
  std::string::size_type v258;
  std::string *v259;
  std::string *v260;
  __int128 v261;
  std::string *v262;
  std::string::size_type v263;
  std::string *v264;
  std::string *v265;
  __int128 v266;
  uint64_t v267;
  uint64_t v268;
  llvm *v269;
  uint64_t v270;
  MTLRuntimeStackTrace *MTLRuntimeStackTrace;
  llvm *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  llvm *v276;
  uint64_t v277;
  int v278;
  std::string *v279;
  std::string::size_type v280;
  std::string *v281;
  std::string *v282;
  __int128 v283;
  std::string *v284;
  std::string::size_type v285;
  std::string *v286;
  std::string *v287;
  __int128 v288;
  uint64_t v289;
  uint64_t v290;
  llvm *v291;
  uint64_t v292;
  _QWORD *v293;
  llvm *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  llvm *v298;
  uint64_t v299;
  int v300;
  std::string *v301;
  std::string::size_type v302;
  std::string *v303;
  std::string *v304;
  __int128 v305;
  std::string *v306;
  std::string::size_type v307;
  std::string *v308;
  std::string *v309;
  __int128 v310;
  uint64_t v311;
  uint64_t v312;
  llvm *v313;
  uint64_t v314;
  uint64_t MTLMemoryIndirectionPass;
  llvm *v316;
  uint64_t JumpThreadingPass;
  uint64_t v318;
  uint64_t v319;
  llvm *v320;
  uint64_t AggressiveDCEPass;
  llvm *v322;
  uint64_t GlobalDCEPass;
  llvm *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  llvm *v328;
  uint64_t v329;
  int v330;
  std::string *v331;
  std::string::size_type v332;
  std::string *v333;
  std::string *v334;
  __int128 v335;
  std::string *v336;
  std::string::size_type v337;
  std::string *v338;
  std::string *v339;
  __int128 v340;
  uint64_t v341;
  uint64_t v342;
  llvm *v343;
  uint64_t v344;
  _QWORD *MTLICBIndirectionPass;
  llvm *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  llvm *v350;
  uint64_t v351;
  int v352;
  std::string *v353;
  std::string::size_type v354;
  std::string *v355;
  std::string *v356;
  __int128 v357;
  std::string *v358;
  std::string::size_type v359;
  std::string *v360;
  std::string *v361;
  __int128 v362;
  uint64_t v363;
  uint64_t v364;
  llvm *v365;
  uint64_t v366;
  uint64_t v367;
  llvm *v368;
  uint64_t v369;
  uint64_t v370;
  llvm *v371;
  uint64_t v372;
  llvm *v373;
  uint64_t v374;
  llvm *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  llvm *v379;
  uint64_t v380;
  uint64_t v381;
  int v382;
  std::string *v383;
  std::string::size_type v384;
  std::string *v385;
  std::string *v386;
  __int128 v387;
  std::string *v388;
  std::string::size_type v389;
  std::string *v390;
  std::string *v391;
  __int128 v392;
  uint64_t v393;
  uint64_t v394;
  llvm *v395;
  uint64_t v396;
  llvm *v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  llvm *v401;
  uint64_t v402;
  int v403;
  std::string *v404;
  std::string::size_type v405;
  std::string *v406;
  std::string *v407;
  __int128 v408;
  std::string *v409;
  std::string::size_type v410;
  std::string *v411;
  std::string *v412;
  __int128 v413;
  uint64_t v414;
  uint64_t v415;
  llvm *v416;
  uint64_t v417;
  uint64_t v418;
  std::string *v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  llvm *v423;
  uint64_t v424;
  uint64_t v425;
  llvm *v426;
  uint64_t StraightLineStrengthReducePass;
  llvm *v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  llvm *v432;
  uint64_t v433;
  int v434;
  std::string *v435;
  std::string::size_type v436;
  std::string *v437;
  std::string *v438;
  __int128 v439;
  std::string *v440;
  std::string::size_type v441;
  std::string *v442;
  std::string *v443;
  __int128 v444;
  uint64_t v445;
  uint64_t v446;
  llvm *v447;
  uint64_t v448;
  llvm *v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  llvm *v453;
  uint64_t v454;
  int v455;
  std::string *v456;
  std::string::size_type v457;
  std::string *v458;
  std::string *v459;
  __int128 v460;
  std::string *v461;
  std::string::size_type v462;
  std::string *v463;
  std::string *v464;
  __int128 v465;
  uint64_t v466;
  uint64_t v467;
  llvm *v468;
  uint64_t v469;
  llvm *v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  llvm *v474;
  uint64_t v475;
  int v476;
  std::string *v477;
  std::string::size_type v478;
  std::string *v479;
  std::string *v480;
  __int128 v481;
  std::string *v482;
  std::string::size_type v483;
  std::string *v484;
  std::string *v485;
  __int128 v486;
  uint64_t v487;
  uint64_t v488;
  llvm *v489;
  uint64_t v490;
  uint64_t v491;
  llvm *v492;
  uint64_t v493;
  uint64_t v494;
  llvm *v495;
  uint64_t v496;
  llvm *v497;
  uint64_t v498;
  uint64_t v499;
  llvm *v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  llvm *v504;
  uint64_t v505;
  int v506;
  std::string *v507;
  std::string::size_type v508;
  std::string *v509;
  std::string *v510;
  __int128 v511;
  std::string *v512;
  std::string::size_type v513;
  std::string *v514;
  std::string *v515;
  __int128 v516;
  uint64_t v517;
  uint64_t v518;
  llvm *v519;
  uint64_t v520;
  llvm *v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  llvm *v525;
  uint64_t v526;
  int v527;
  std::string *v528;
  std::string::size_type v529;
  std::string *v530;
  std::string *v531;
  __int128 v532;
  std::string *v533;
  std::string::size_type v534;
  std::string *v535;
  std::string *v536;
  __int128 v537;
  uint64_t v538;
  uint64_t v539;
  llvm *v540;
  uint64_t v541;
  uint64_t v542;
  std::string *v543;
  uint64_t v544;
  uint64_t v545;
  llvm *v546;
  uint64_t v547;
  uint64_t v548;
  llvm *v549;
  uint64_t v550;
  llvm *v551;
  uint64_t LoopSinkPass;
  llvm *v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  llvm *v558;
  uint64_t v559;
  int v560;
  std::string *v561;
  std::string::size_type v562;
  std::string *v563;
  std::string *v564;
  __int128 v565;
  std::string *v566;
  std::string::size_type v567;
  std::string *v568;
  std::string *v569;
  __int128 v570;
  uint64_t v571;
  uint64_t v572;
  llvm *v573;
  uint64_t v574;
  _QWORD *MTLBuiltinsReportPass;
  llvm *v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  llvm *v580;
  uint64_t v581;
  int v582;
  std::string *v583;
  std::string::size_type v584;
  std::string *v585;
  std::string *v586;
  __int128 v587;
  std::string *v588;
  std::string::size_type v589;
  std::string *v590;
  std::string *v591;
  __int128 v592;
  uint64_t v593;
  uint64_t v594;
  llvm *v595;
  uint64_t v596;
  llvm *v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  llvm *v601;
  uint64_t v602;
  int v603;
  std::string *v604;
  std::string::size_type v605;
  std::string *v606;
  std::string *v607;
  __int128 v608;
  std::string *v609;
  std::string::size_type v610;
  std::string *v611;
  std::string *v612;
  __int128 v613;
  uint64_t v614;
  uint64_t v615;
  llvm *v616;
  uint64_t v617;
  llvm *v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  llvm *v622;
  uint64_t v623;
  int v624;
  std::string *v625;
  std::string::size_type v626;
  std::string *v627;
  std::string *v628;
  __int128 v629;
  std::string *v630;
  std::string::size_type v631;
  std::string *v632;
  std::string *v633;
  __int128 v634;
  uint64_t v635;
  uint64_t v636;
  llvm *v637;
  uint64_t v638;
  llvm *v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  llvm *v643;
  uint64_t v644;
  uint64_t v645;
  int v646;
  std::string *v647;
  std::string::size_type v648;
  std::string *v649;
  std::string *v650;
  __int128 v651;
  std::string *v652;
  std::string::size_type v653;
  std::string *v654;
  std::string *v655;
  __int128 v656;
  uint64_t v657;
  uint64_t v658;
  llvm *v659;
  uint64_t v660;
  llvm *v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  llvm *v665;
  uint64_t v666;
  int v667;
  std::string *v668;
  std::string::size_type v669;
  std::string *v670;
  std::string *v671;
  __int128 v672;
  std::string *v673;
  std::string::size_type v674;
  std::string *v675;
  std::string *v676;
  __int128 v677;
  uint64_t v678;
  uint64_t v679;
  llvm *v680;
  uint64_t v681;
  uint64_t v682;
  std::string *v683;
  uint64_t v684;
  uint64_t v685;
  llvm *v686;
  uint64_t v687;
  llvm *v688;
  uint64_t v689;
  llvm *v690;
  uint64_t v691;
  llvm *v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  llvm *v696;
  uint64_t v697;
  int v698;
  std::string *v699;
  std::string::size_type v700;
  std::string *v701;
  std::string *v702;
  __int128 v703;
  std::string *v704;
  std::string::size_type v705;
  std::string *v706;
  std::string *v707;
  __int128 v708;
  uint64_t v709;
  uint64_t v710;
  llvm *v711;
  uint64_t v712;
  uint64_t v713;
  llvm *v714;
  uint64_t v715;
  llvm *v716;
  uint64_t v717;
  uint64_t MTLGVEmulationPass;
  uint64_t v719;
  uint64_t v720;
  llvm *v721;
  uint64_t v722;
  llvm *v723;
  uint64_t v724;
  llvm *v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  llvm *v729;
  uint64_t v730;
  int v731;
  std::string *v732;
  std::string::size_type v733;
  std::string *v734;
  std::string *v735;
  __int128 v736;
  std::string *v737;
  std::string::size_type v738;
  std::string *v739;
  std::string *v740;
  __int128 v741;
  uint64_t v742;
  uint64_t v743;
  llvm *v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t FunctionInliningPass;
  uint64_t v749;
  uint64_t v750;
  llvm *v751;
  uint64_t v752;
  uint64_t v753;
  llvm *v754;
  uint64_t v755;
  llvm *v756;
  uint64_t v757;
  llvm *v758;
  uint64_t v759;
  llvm *v760;
  uint64_t v761;
  uint64_t v762;
  std::string *v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  llvm *v767;
  uint64_t v768;
  llvm *v769;
  uint64_t v770;
  llvm *v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  llvm *v775;
  uint64_t v776;
  std::string *v777;
  std::string::size_type v778;
  std::string *v779;
  std::string *v780;
  __int128 v781;
  std::string *v782;
  std::string::size_type v783;
  std::string *v784;
  std::string *v785;
  __int128 v786;
  uint64_t v787;
  uint64_t v788;
  llvm *v789;
  uint64_t v790;
  llvm *v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  llvm *v795;
  uint64_t v796;
  int v797;
  MTLFoldMergePass *MTLFoldMergePass;
  _QWORD *MTLArgumentBufferConversionPass;
  uint64_t v800;
  uint64_t MTLFoldExpansionPass;
  uint64_t MTLGEPConversionPass;
  _QWORD *MTLConstantGlobalToArgPass;
  uint64_t v804;
  _QWORD *MTLArgumentRewritePass;
  _QWORD *MTLGlobalTLSArgumentPass;
  std::string v807;
  std::string v808;
  std::string __dst;
  std::string __p;
  std::string v811;
  std::string *v812;
  std::string v813;
  std::string *v814;
  uint64_t v815;

  v815 = *MEMORY[0x24BDAC8D0];
  v8 = operator new();
  *(_QWORD *)(v8 + 16) = &MTLBoundsCheck::SharedPassData::ID;
  *(_DWORD *)(v8 + 24) = 4;
  *(_QWORD *)v8 = &off_25111EAC8;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 64) = a4;
  *(_QWORD *)(v8 + 72) = a2;
  *(_QWORD *)(v8 + 80) = a3;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_DWORD *)(v8 + 120) = 1065353216;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_DWORD *)(v8 + 160) = 1065353216;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_DWORD *)(v8 + 200) = 1065353216;
  *(_DWORD *)(v8 + 224) = 0;
  *(_QWORD *)(v8 + 208) = 0;
  *(_QWORD *)(v8 + 216) = 0;
  *(_QWORD *)(v8 + 240) = 0;
  *(_QWORD *)(v8 + 248) = 0;
  *(_QWORD *)(v8 + 256) = 0x1000000000;
  *(_OWORD *)(v8 + 272) = 0u;
  *(_OWORD *)(v8 + 288) = 0u;
  *(_DWORD *)(v8 + 304) = 1065353216;
  *(_OWORD *)(v8 + 312) = 0u;
  *(_OWORD *)(v8 + 328) = 0u;
  *(_DWORD *)(v8 + 344) = 1065353216;
  GlobalSharedPassData = v8;
  v9 = (_QWORD *)operator new();
  MetalModulePass::MetalModulePass((uint64_t)v9, (uint64_t)&VertexFetchID, GlobalSharedPassData);
  *v9 = &off_25111E668;
  MTLAddCustomFunctionsPass = createMTLAddCustomFunctionsPass(GlobalSharedPassData);
  createMTLForceInlinerPass(GlobalSharedPassData);
  v804 = v11;
  MTLArgumentRewritePass = createMTLArgumentRewritePass((MTLBoundsCheck::SharedPassData *)GlobalSharedPassData);
  MTLConstantGlobalToArgPass = createMTLConstantGlobalToArgPass((MTLBoundsCheck::SharedPassData *)GlobalSharedPassData);
  MTLStackOverflowPass = createMTLStackOverflowPass(GlobalSharedPassData);
  v13 = (_QWORD *)operator new();
  MetalModulePass::MetalModulePass((uint64_t)v13, (uint64_t)&GEPAnalysisID, GlobalSharedPassData);
  *v13 = &off_25111E708;
  v13[24] = a3;
  MTLGEPConversionPass = createMTLGEPConversionPass((MTLBoundsCheck::SharedPassData *)GlobalSharedPassData);
  MTLFoldMergePass = createMTLFoldMergePass((MTLBoundsCheck::SharedPassData *)GlobalSharedPassData);
  v14 = operator new();
  MetalModulePass::MetalModulePass(v14, (uint64_t)&BoundsID, GlobalSharedPassData);
  *(_QWORD *)v14 = off_25111E7A8;
  *(_DWORD *)(v14 + 224) = 496;
  *(_OWORD *)(v14 + 232) = 0u;
  *(_OWORD *)(v14 + 248) = 0u;
  *(_DWORD *)(v14 + 264) = 1065353216;
  *(_QWORD *)(v14 + 272) = v14 + 288;
  *(_QWORD *)(v14 + 280) = 0x2000000000;
  *(_QWORD *)(v14 + 544) = v14 + 560;
  *(_QWORD *)(v14 + 552) = 0x2000000000;
  *(_QWORD *)(v14 + 816) = 0;
  *(_QWORD *)(v14 + 832) = 0;
  *(_QWORD *)(v14 + 824) = 0;
  *(_BYTE *)(v14 + 840) = 0;
  *(_QWORD *)(v14 + 848) = a3;
  MTLFoldExpansionPass = createMTLFoldExpansionPass((MTLBoundsCheck::SharedPassData *)GlobalSharedPassData);
  createMTLNullTextureCheckPass((MTLBoundsCheck::SharedPassData *)GlobalSharedPassData);
  v800 = v15;
  MTLGlobalTLSArgumentPass = createMTLGlobalTLSArgumentPass((MTLBoundsCheck::SharedPassData *)GlobalSharedPassData);
  MTLArgumentBufferConversionPass = createMTLArgumentBufferConversionPass((MTLBoundsCheck::SharedPassData *)GlobalSharedPassData);
  if (MTLAddBoundsCheckPipelineToPM(llvm::legacy::PassManager &,MTLBoundsCheck::Options const&,MTLBoundsCheck::Statistics *,MTLBoundsCheck::SerializedData *)::onceToken != -1)
    dispatch_once(&MTLAddBoundsCheckPipelineToPM(llvm::legacy::PassManager &,MTLBoundsCheck::Options const&,MTLBoundsCheck::Statistics *,MTLBoundsCheck::SerializedData *)::onceToken, &__block_literal_global);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, GlobalSharedPassData);
  if (MTLAddBoundsCheckPipelineToPM(llvm::legacy::PassManager &,MTLBoundsCheck::Options const&,MTLBoundsCheck::Statistics *,MTLBoundsCheck::SerializedData *)::printPasses)
  {
    std::string::basic_string[abi:ne180100]<0>(&v811, "++++++++++++++++++ ");
    std::string::basic_string[abi:ne180100](&__p, "01_input", 8uLL);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v18 = std::string::append(&v811, (const std::string::value_type *)p_p, size);
    v19 = std::string::append(v18, " ++++++++++++++++++\n");
    if (SHIBYTE(v19->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v813, v19->__r_.__value_.__l.__data_, v19->__r_.__value_.__l.__size_);
    }
    else
    {
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v813.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v813.__r_.__value_.__l.__data_ = v20;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v811.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&__p, "\x1B[1;33m------------------ ");
    std::string::basic_string[abi:ne180100](&__dst, "01_input", 8uLL);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_dst = &__dst;
    else
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      v23 = __dst.__r_.__value_.__l.__size_;
    v24 = std::string::append(&__p, (const std::string::value_type *)p_dst, v23);
    v25 = std::string::append(v24, " ------------------\x1B[0m\n");
    if (SHIBYTE(v25->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v811, v25->__r_.__value_.__l.__data_, v25->__r_.__value_.__l.__size_);
    }
    else
    {
      v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v811.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v811.__r_.__value_.__l.__data_ = v26;
    }
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    BarrierNoopPass = llvm::createBarrierNoopPass((llvm *)v25);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, BarrierNoopPass);
    VerifierPass = llvm::createVerifierPass((llvm *)1);
    v29 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, VerifierPass);
    v30 = llvm::createBarrierNoopPass(v29);
    v31 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v30);
    v32 = llvm::createBarrierNoopPass(v31);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v32);
    v33 = operator new();
    DumpModulePass::DumpModulePass(v33, "01_input", 8uLL);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v33);
    v34 = llvm::createVerifierPass((llvm *)1);
    v35 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v34);
    v36 = llvm::createBarrierNoopPass(v35);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v36);
    if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v811.__r_.__value_.__l.__data_);
    if (SHIBYTE(v813.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v813.__r_.__value_.__l.__data_);
    v21 = MTLAddBoundsCheckPipelineToPM(llvm::legacy::PassManager &,MTLBoundsCheck::Options const&,MTLBoundsCheck::Statistics *,MTLBoundsCheck::SerializedData *)::printPasses;
  }
  else
  {
    v21 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v811, "++++++++++++++++++ ");
  std::string::basic_string[abi:ne180100](&__p, "HoistStaticAllocas", 0x12uLL);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v37 = &__p;
  else
    v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v38 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v38 = __p.__r_.__value_.__l.__size_;
  v39 = std::string::append(&v811, (const std::string::value_type *)v37, v38);
  v40 = std::string::append(v39, " ++++++++++++++++++\n");
  if (SHIBYTE(v40->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v813, v40->__r_.__value_.__l.__data_, v40->__r_.__value_.__l.__size_);
  }
  else
  {
    v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    v813.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v813.__r_.__value_.__l.__data_ = v41;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v811.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\x1B[1;33m------------------ ");
  std::string::basic_string[abi:ne180100](&__dst, "HoistStaticAllocas", 0x12uLL);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v42 = &__dst;
  else
    v42 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v43 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v43 = __dst.__r_.__value_.__l.__size_;
  v44 = std::string::append(&__p, (const std::string::value_type *)v42, v43);
  v45 = std::string::append(v44, " ------------------\x1B[0m\n");
  if (SHIBYTE(v45->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v811, v45->__r_.__value_.__l.__data_, v45->__r_.__value_.__l.__size_);
  }
  else
  {
    v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    v811.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v811.__r_.__value_.__l.__data_ = v46;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v21)
      goto LABEL_65;
    goto LABEL_64;
  }
  if (v21)
  {
LABEL_64:
    v47 = llvm::createBarrierNoopPass((llvm *)v45);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v47);
    v48 = llvm::createVerifierPass((llvm *)1);
    v49 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v48);
    v50 = llvm::createBarrierNoopPass(v49);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v50);
  }
LABEL_65:
  MTLHoistStaticAllocasPass = createMTLHoistStaticAllocasPass(GlobalSharedPassData);
  v52 = (llvm *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 16))(a1, MTLHoistStaticAllocasPass);
  if (v21)
  {
    v53 = llvm::createBarrierNoopPass(v52);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v53);
    v54 = operator new();
    DumpModulePass::DumpModulePass(v54, "HoistStaticAllocas", 0x12uLL);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v54);
    v55 = llvm::createVerifierPass((llvm *)1);
    v56 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v55);
    v57 = llvm::createBarrierNoopPass(v56);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v57);
  }
  if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v811.__r_.__value_.__l.__data_);
  if (SHIBYTE(v813.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v813.__r_.__value_.__l.__data_);
  v58 = MTLAddBoundsCheckPipelineToPM(llvm::legacy::PassManager &,MTLBoundsCheck::Options const&,MTLBoundsCheck::Statistics *,MTLBoundsCheck::SerializedData *)::printPasses;
  std::string::basic_string[abi:ne180100]<0>(&v811, "++++++++++++++++++ ");
  std::string::basic_string[abi:ne180100](&__p, "AddCustomFunctions", 0x12uLL);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v59 = &__p;
  else
    v59 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v60 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v60 = __p.__r_.__value_.__l.__size_;
  v61 = std::string::append(&v811, (const std::string::value_type *)v59, v60);
  v62 = std::string::append(v61, " ++++++++++++++++++\n");
  if (SHIBYTE(v62->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v813, v62->__r_.__value_.__l.__data_, v62->__r_.__value_.__l.__size_);
  }
  else
  {
    v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    v813.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v813.__r_.__value_.__l.__data_ = v63;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v811.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\x1B[1;33m------------------ ");
  std::string::basic_string[abi:ne180100](&__dst, "AddCustomFunctions", 0x12uLL);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v64 = &__dst;
  else
    v64 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v65 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v65 = __dst.__r_.__value_.__l.__size_;
  v66 = std::string::append(&__p, (const std::string::value_type *)v64, v65);
  v67 = std::string::append(v66, " ------------------\x1B[0m\n");
  if (SHIBYTE(v67->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v811, v67->__r_.__value_.__l.__data_, v67->__r_.__value_.__l.__size_);
  }
  else
  {
    v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
    v811.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v811.__r_.__value_.__l.__data_ = v68;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v58)
      goto LABEL_100;
    goto LABEL_99;
  }
  if (v58)
  {
LABEL_99:
    v69 = llvm::createBarrierNoopPass((llvm *)v67);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v69);
    v70 = llvm::createVerifierPass((llvm *)1);
    v71 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v70);
    v72 = llvm::createBarrierNoopPass(v71);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v72);
  }
LABEL_100:
  v73 = (llvm *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 16))(a1, MTLAddCustomFunctionsPass);
  if (v58)
  {
    v74 = llvm::createBarrierNoopPass(v73);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v74);
    v75 = operator new();
    DumpModulePass::DumpModulePass(v75, "AddCustomFunctions", 0x12uLL);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v75);
    v76 = llvm::createVerifierPass((llvm *)1);
    v77 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v76);
    v78 = llvm::createBarrierNoopPass(v77);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v78);
  }
  if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v811.__r_.__value_.__l.__data_);
  if (SHIBYTE(v813.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v813.__r_.__value_.__l.__data_);
  v79 = *(_QWORD *)(a2 + 20);
  if ((v79 & 0x80) != 0)
  {
    v80 = MTLAddBoundsCheckPipelineToPM(llvm::legacy::PassManager &,MTLBoundsCheck::Options const&,MTLBoundsCheck::Statistics *,MTLBoundsCheck::SerializedData *)::printPasses;
    std::string::basic_string[abi:ne180100]<0>(&v811, "++++++++++++++++++ ");
    std::string::basic_string[abi:ne180100](&__p, "02_MTLVertexFetchAnalysisPass", 0x1DuLL);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v81 = &__p;
    else
      v81 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v82 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v82 = __p.__r_.__value_.__l.__size_;
    v83 = std::string::append(&v811, (const std::string::value_type *)v81, v82);
    v84 = std::string::append(v83, " ++++++++++++++++++\n");
    if (SHIBYTE(v84->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v813, v84->__r_.__value_.__l.__data_, v84->__r_.__value_.__l.__size_);
    }
    else
    {
      v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
      v813.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v813.__r_.__value_.__l.__data_ = v85;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v811.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&__p, "\x1B[1;33m------------------ ");
    std::string::basic_string[abi:ne180100](&__dst, "02_MTLVertexFetchAnalysisPass", 0x1DuLL);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v86 = &__dst;
    else
      v86 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v87 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      v87 = __dst.__r_.__value_.__l.__size_;
    v88 = std::string::append(&__p, (const std::string::value_type *)v86, v87);
    v89 = std::string::append(v88, " ------------------\x1B[0m\n");
    if (SHIBYTE(v89->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v811, v89->__r_.__value_.__l.__data_, v89->__r_.__value_.__l.__size_);
    }
    else
    {
      v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
      v811.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v811.__r_.__value_.__l.__data_ = v90;
    }
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (!v80)
      {
LABEL_136:
        v95 = (llvm *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 16))(a1, v9);
        if (v80)
        {
          v96 = llvm::createBarrierNoopPass(v95);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v96);
          v97 = operator new();
          DumpModulePass::DumpModulePass(v97, "02_MTLVertexFetchAnalysisPass", 0x1DuLL);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v97);
          v98 = llvm::createVerifierPass((llvm *)1);
          v99 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v98);
          v100 = llvm::createBarrierNoopPass(v99);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v100);
        }
        if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v811.__r_.__value_.__l.__data_);
        if (SHIBYTE(v813.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v813.__r_.__value_.__l.__data_);
        v79 = *(_QWORD *)(a2 + 20);
        goto LABEL_143;
      }
    }
    else if (!v80)
    {
      goto LABEL_136;
    }
    v91 = llvm::createBarrierNoopPass((llvm *)v89);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v91);
    v92 = llvm::createVerifierPass((llvm *)1);
    v93 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v92);
    v94 = llvm::createBarrierNoopPass(v93);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v94);
    goto LABEL_136;
  }
LABEL_143:
  if ((v79 & 0x4000) == 0)
    goto LABEL_184;
  v101 = MTLAddBoundsCheckPipelineToPM(llvm::legacy::PassManager &,MTLBoundsCheck::Options const&,MTLBoundsCheck::Statistics *,MTLBoundsCheck::SerializedData *)::printPasses;
  std::string::basic_string[abi:ne180100]<0>(&v813, "++++++++++++++++++ ");
  std::string::basic_string[abi:ne180100](&v811, "03_LoopUnroll", 0xDuLL);
  if ((v811.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v102 = &v811;
  else
    v102 = (std::string *)v811.__r_.__value_.__r.__words[0];
  if ((v811.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v103 = HIBYTE(v811.__r_.__value_.__r.__words[2]);
  else
    v103 = v811.__r_.__value_.__l.__size_;
  v104 = std::string::append(&v813, (const std::string::value_type *)v102, v103);
  v105 = std::string::append(v104, " ++++++++++++++++++\n");
  if (SHIBYTE(v105->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, v105->__r_.__value_.__l.__data_, v105->__r_.__value_.__l.__size_);
  }
  else
  {
    v106 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v105->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v106;
  }
  if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v811.__r_.__value_.__l.__data_);
  if (SHIBYTE(v813.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v813.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v813, "\x1B[1;33m------------------ ");
  std::string::basic_string[abi:ne180100](&v811, "03_LoopUnroll", 0xDuLL);
  if ((v811.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v107 = &v811;
  else
    v107 = (std::string *)v811.__r_.__value_.__r.__words[0];
  if ((v811.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v108 = HIBYTE(v811.__r_.__value_.__r.__words[2]);
  else
    v108 = v811.__r_.__value_.__l.__size_;
  v109 = std::string::append(&v813, (const std::string::value_type *)v107, v108);
  v110 = std::string::append(v109, " ------------------\x1B[0m\n");
  if (SHIBYTE(v110->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&__dst, v110->__r_.__value_.__l.__data_, v110->__r_.__value_.__l.__size_);
  }
  else
  {
    v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v110->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v111;
  }
  if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v811.__r_.__value_.__l.__data_);
  if (SHIBYTE(v813.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v813.__r_.__value_.__l.__data_);
    if (!v101)
      goto LABEL_173;
    goto LABEL_172;
  }
  if (v101)
  {
LABEL_172:
    v112 = llvm::createBarrierNoopPass((llvm *)v110);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v112);
    v113 = llvm::createVerifierPass((llvm *)1);
    v114 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v113);
    v115 = llvm::createBarrierNoopPass(v114);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v115);
  }
LABEL_173:
  v811.__r_.__value_.__r.__words[0] = 0x100000000000001;
  *(_OWORD *)&v811.__r_.__value_.__r.__words[1] = 0x1010000uLL;
  v814 = 0;
  CFGSimplificationPass = llvm::createCFGSimplificationPass();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, CFGSimplificationPass);
  v117 = (llvm *)v814;
  if (v814 == &v813)
  {
    v118 = 4;
    v117 = (llvm *)&v813;
    goto LABEL_177;
  }
  if (v814)
  {
    v118 = 5;
LABEL_177:
    v117 = (llvm *)(*(uint64_t (**)(void))(*(_QWORD *)v117 + 8 * v118))();
  }
  LoopSimplifyCFGPass = llvm::createLoopSimplifyCFGPass(v117);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, LoopSimplifyCFGPass);
  LoopUnswitchPass = llvm::createLoopUnswitchPass(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, LoopUnswitchPass);
  LoopUnrollPass = llvm::createLoopUnrollPass((llvm *)3, 1, 1, 1, -1, -1, -1, -1, -1, v797);
  v122 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, LoopUnrollPass);
  InstructionCombiningPass = llvm::createInstructionCombiningPass(v122);
  v124 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, InstructionCombiningPass);
  LICMPass = llvm::createLICMPass(v124);
  v126 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, LICMPass);
  InstSimplifyLegacyPass = llvm::createInstSimplifyLegacyPass(v126);
  v128 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, InstSimplifyLegacyPass);
  if (v101)
  {
    v129 = llvm::createBarrierNoopPass(v128);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v129);
    v130 = operator new();
    DumpModulePass::DumpModulePass(v130, "03_LoopUnroll", 0xDuLL);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v130);
    v131 = llvm::createVerifierPass((llvm *)1);
    v132 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v131);
    v133 = llvm::createBarrierNoopPass(v132);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v133);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_184:
  v134 = MTLAddBoundsCheckPipelineToPM(llvm::legacy::PassManager &,MTLBoundsCheck::Options const&,MTLBoundsCheck::Statistics *,MTLBoundsCheck::SerializedData *)::printPasses;
  std::string::basic_string[abi:ne180100]<0>(&v811, "++++++++++++++++++ ");
  std::string::basic_string[abi:ne180100](&__p, "04_StackOverflow", 0x10uLL);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v135 = &__p;
  else
    v135 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v136 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v136 = __p.__r_.__value_.__l.__size_;
  v137 = std::string::append(&v811, (const std::string::value_type *)v135, v136);
  v138 = std::string::append(v137, " ++++++++++++++++++\n");
  if (SHIBYTE(v138->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v813, v138->__r_.__value_.__l.__data_, v138->__r_.__value_.__l.__size_);
  }
  else
  {
    v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
    v813.__r_.__value_.__r.__words[2] = v138->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v813.__r_.__value_.__l.__data_ = v139;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v811.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\x1B[1;33m------------------ ");
  std::string::basic_string[abi:ne180100](&__dst, "04_StackOverflow", 0x10uLL);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v140 = &__dst;
  else
    v140 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v141 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v141 = __dst.__r_.__value_.__l.__size_;
  v142 = std::string::append(&__p, (const std::string::value_type *)v140, v141);
  v143 = std::string::append(v142, " ------------------\x1B[0m\n");
  if (SHIBYTE(v143->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v811, v143->__r_.__value_.__l.__data_, v143->__r_.__value_.__l.__size_);
  }
  else
  {
    v144 = *(_OWORD *)&v143->__r_.__value_.__l.__data_;
    v811.__r_.__value_.__r.__words[2] = v143->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v811.__r_.__value_.__l.__data_ = v144;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v134)
      goto LABEL_213;
    goto LABEL_212;
  }
  if (v134)
  {
LABEL_212:
    v145 = llvm::createBarrierNoopPass((llvm *)v143);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v145);
    v146 = llvm::createVerifierPass((llvm *)1);
    v147 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v146);
    v148 = llvm::createBarrierNoopPass(v147);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v148);
  }
LABEL_213:
  v149 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, MTLStackOverflowPass);
  if (v134)
  {
    v150 = llvm::createBarrierNoopPass(v149);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v150);
    v151 = operator new();
    DumpModulePass::DumpModulePass(v151, "04_StackOverflow", 0x10uLL);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v151);
    v152 = llvm::createVerifierPass((llvm *)1);
    v153 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v152);
    v154 = llvm::createBarrierNoopPass(v153);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v154);
  }
  if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v811.__r_.__value_.__l.__data_);
  if (SHIBYTE(v813.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v813.__r_.__value_.__l.__data_);
  v155 = *(_QWORD *)(a2 + 20);
  if ((v155 & 0x10) != 0)
  {
    v156 = MTLAddBoundsCheckPipelineToPM(llvm::legacy::PassManager &,MTLBoundsCheck::Options const&,MTLBoundsCheck::Statistics *,MTLBoundsCheck::SerializedData *)::printPasses;
    std::string::basic_string[abi:ne180100]<0>(&v813, "++++++++++++++++++ ");
    std::string::basic_string[abi:ne180100](&v811, "05_MTLForceInlinerPass", 0x16uLL);
    if ((v811.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v157 = &v811;
    else
      v157 = (std::string *)v811.__r_.__value_.__r.__words[0];
    if ((v811.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v158 = HIBYTE(v811.__r_.__value_.__r.__words[2]);
    else
      v158 = v811.__r_.__value_.__l.__size_;
    v159 = std::string::append(&v813, (const std::string::value_type *)v157, v158);
    v160 = std::string::append(v159, " ++++++++++++++++++\n");
    if (SHIBYTE(v160->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, v160->__r_.__value_.__l.__data_, v160->__r_.__value_.__l.__size_);
    }
    else
    {
      v161 = *(_OWORD *)&v160->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v160->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v161;
    }
    if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v811.__r_.__value_.__l.__data_);
    if (SHIBYTE(v813.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v813.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v813, "\x1B[1;33m------------------ ");
    std::string::basic_string[abi:ne180100](&v811, "05_MTLForceInlinerPass", 0x16uLL);
    if ((v811.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v162 = &v811;
    else
      v162 = (std::string *)v811.__r_.__value_.__r.__words[0];
    if ((v811.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v163 = HIBYTE(v811.__r_.__value_.__r.__words[2]);
    else
      v163 = v811.__r_.__value_.__l.__size_;
    v164 = std::string::append(&v813, (const std::string::value_type *)v162, v163);
    v165 = std::string::append(v164, " ------------------\x1B[0m\n");
    if (SHIBYTE(v165->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&__dst, v165->__r_.__value_.__l.__data_, v165->__r_.__value_.__l.__size_);
    }
    else
    {
      v166 = *(_OWORD *)&v165->__r_.__value_.__l.__data_;
      __dst.__r_.__value_.__r.__words[2] = v165->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v166;
    }
    if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v811.__r_.__value_.__l.__data_);
    if (SHIBYTE(v813.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v813.__r_.__value_.__l.__data_);
      if (!v156)
        goto LABEL_249;
    }
    else if (!v156)
    {
LABEL_249:
      v171 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v804);
      SROAPass = llvm::createSROAPass(v171);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, SROAPass);
      EarlyCSEPass = llvm::createEarlyCSEPass((llvm *)1);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, EarlyCSEPass);
      v811.__r_.__value_.__r.__words[0] = 0x100000000000001;
      *(_OWORD *)&v811.__r_.__value_.__r.__words[1] = 0x1010000uLL;
      v814 = 0;
      v174 = llvm::createCFGSimplificationPass();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v174);
      v175 = v814;
      if (v814 == &v813)
      {
        v176 = 4;
        v175 = &v813;
      }
      else
      {
        if (!v814)
        {
LABEL_254:
          v177 = llvm::createInstSimplifyLegacyPass((llvm *)v175);
          v178 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v177);
          NewGVNPass = llvm::createNewGVNPass(v178);
          v180 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, NewGVNPass);
          PromoteMemoryToRegisterPass = llvm::createPromoteMemoryToRegisterPass(v180);
          v182 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, PromoteMemoryToRegisterPass);
          v183 = llvm::createInstSimplifyLegacyPass(v182);
          v184 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v183);
          v185 = llvm::createInstructionCombiningPass(v184);
          v186 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v185);
          if (v156)
          {
            v187 = llvm::createBarrierNoopPass(v186);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v187);
            v188 = operator new();
            DumpModulePass::DumpModulePass(v188, "05_MTLForceInlinerPass", 0x16uLL);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v188);
            v189 = llvm::createVerifierPass((llvm *)1);
            v190 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v189);
            v191 = llvm::createBarrierNoopPass(v190);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v191);
          }
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v155 = *(_QWORD *)(a2 + 20);
          goto LABEL_261;
        }
        v176 = 5;
      }
      v175 = (std::string *)(*(uint64_t (**)(void))(v175->__r_.__value_.__r.__words[0] + 8 * v176))();
      goto LABEL_254;
    }
    v167 = llvm::createBarrierNoopPass((llvm *)v165);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v167);
    v168 = llvm::createVerifierPass((llvm *)1);
    v169 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v168);
    v170 = llvm::createBarrierNoopPass(v169);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v170);
    goto LABEL_249;
  }
LABEL_261:
  if ((v155 & 0x1210400) == 0)
    goto LABEL_298;
  v192 = MTLAddBoundsCheckPipelineToPM(llvm::legacy::PassManager &,MTLBoundsCheck::Options const&,MTLBoundsCheck::Statistics *,MTLBoundsCheck::SerializedData *)::printPasses;
  std::string::basic_string[abi:ne180100]<0>(&v811, "++++++++++++++++++ ");
  std::string::basic_string[abi:ne180100](&__p, "06_MTLArgumentRewritePass", 0x19uLL);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v193 = &__p;
  else
    v193 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v194 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v194 = __p.__r_.__value_.__l.__size_;
  v195 = std::string::append(&v811, (const std::string::value_type *)v193, v194);
  v196 = std::string::append(v195, " ++++++++++++++++++\n");
  if (SHIBYTE(v196->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v813, v196->__r_.__value_.__l.__data_, v196->__r_.__value_.__l.__size_);
  }
  else
  {
    v197 = *(_OWORD *)&v196->__r_.__value_.__l.__data_;
    v813.__r_.__value_.__r.__words[2] = v196->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v813.__r_.__value_.__l.__data_ = v197;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v811.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\x1B[1;33m------------------ ");
  std::string::basic_string[abi:ne180100](&__dst, "06_MTLArgumentRewritePass", 0x19uLL);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v198 = &__dst;
  else
    v198 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v199 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v199 = __dst.__r_.__value_.__l.__size_;
  v200 = std::string::append(&__p, (const std::string::value_type *)v198, v199);
  v201 = std::string::append(v200, " ------------------\x1B[0m\n");
  if (SHIBYTE(v201->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v811, v201->__r_.__value_.__l.__data_, v201->__r_.__value_.__l.__size_);
  }
  else
  {
    v202 = *(_OWORD *)&v201->__r_.__value_.__l.__data_;
    v811.__r_.__value_.__r.__words[2] = v201->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v811.__r_.__value_.__l.__data_ = v202;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!v192)
      goto LABEL_291;
    goto LABEL_290;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v192)
  {
LABEL_290:
    v203 = llvm::createBarrierNoopPass((llvm *)v201);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v203);
    v204 = llvm::createVerifierPass((llvm *)1);
    v205 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v204);
    v206 = llvm::createBarrierNoopPass(v205);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v206);
  }
LABEL_291:
  v207 = (llvm *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 16))(a1, MTLArgumentRewritePass);
  if (v192)
  {
    v208 = llvm::createBarrierNoopPass(v207);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v208);
    v209 = operator new();
    DumpModulePass::DumpModulePass(v209, "06_MTLArgumentRewritePass", 0x19uLL);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v209);
    v210 = llvm::createVerifierPass((llvm *)1);
    v211 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v210);
    v212 = llvm::createBarrierNoopPass(v211);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v212);
  }
  if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v811.__r_.__value_.__l.__data_);
  if (SHIBYTE(v813.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v813.__r_.__value_.__l.__data_);
  v155 = *(_QWORD *)(a2 + 20);
LABEL_298:
  if ((v155 & 0x400000) == 0)
    goto LABEL_335;
  v213 = MTLAddBoundsCheckPipelineToPM(llvm::legacy::PassManager &,MTLBoundsCheck::Options const&,MTLBoundsCheck::Statistics *,MTLBoundsCheck::SerializedData *)::printPasses;
  std::string::basic_string[abi:ne180100]<0>(&v811, "++++++++++++++++++ ");
  std::string::basic_string[abi:ne180100](&__p, "07_GlobalToArg", 0xEuLL);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v214 = &__p;
  else
    v214 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v215 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v215 = __p.__r_.__value_.__l.__size_;
  v216 = std::string::append(&v811, (const std::string::value_type *)v214, v215);
  v217 = std::string::append(v216, " ++++++++++++++++++\n");
  if (SHIBYTE(v217->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v813, v217->__r_.__value_.__l.__data_, v217->__r_.__value_.__l.__size_);
  }
  else
  {
    v218 = *(_OWORD *)&v217->__r_.__value_.__l.__data_;
    v813.__r_.__value_.__r.__words[2] = v217->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v813.__r_.__value_.__l.__data_ = v218;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v811.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\x1B[1;33m------------------ ");
  std::string::basic_string[abi:ne180100](&__dst, "07_GlobalToArg", 0xEuLL);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v219 = &__dst;
  else
    v219 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v220 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v220 = __dst.__r_.__value_.__l.__size_;
  v221 = std::string::append(&__p, (const std::string::value_type *)v219, v220);
  v222 = std::string::append(v221, " ------------------\x1B[0m\n");
  if (SHIBYTE(v222->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v811, v222->__r_.__value_.__l.__data_, v222->__r_.__value_.__l.__size_);
  }
  else
  {
    v223 = *(_OWORD *)&v222->__r_.__value_.__l.__data_;
    v811.__r_.__value_.__r.__words[2] = v222->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v811.__r_.__value_.__l.__data_ = v223;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!v213)
      goto LABEL_328;
    goto LABEL_327;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v213)
  {
LABEL_327:
    v224 = llvm::createBarrierNoopPass((llvm *)v222);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v224);
    v225 = llvm::createVerifierPass((llvm *)1);
    v226 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v225);
    v227 = llvm::createBarrierNoopPass(v226);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v227);
  }
LABEL_328:
  v228 = (llvm *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 16))(a1, MTLConstantGlobalToArgPass);
  if (v213)
  {
    v229 = llvm::createBarrierNoopPass(v228);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v229);
    v230 = operator new();
    DumpModulePass::DumpModulePass(v230, "07_GlobalToArg", 0xEuLL);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v230);
    v231 = llvm::createVerifierPass((llvm *)1);
    v232 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v231);
    v233 = llvm::createBarrierNoopPass(v232);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v233);
  }
  if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v811.__r_.__value_.__l.__data_);
  if (SHIBYTE(v813.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v813.__r_.__value_.__l.__data_);
  v155 = *(_QWORD *)(a2 + 20);
LABEL_335:
  if ((v155 & 0x800000) == 0)
    goto LABEL_519;
  if ((v155 & 0x100000000) != 0)
  {
    v234 = MTLAddBoundsCheckPipelineToPM(llvm::legacy::PassManager &,MTLBoundsCheck::Options const&,MTLBoundsCheck::Statistics *,MTLBoundsCheck::SerializedData *)::printPasses;
    std::string::basic_string[abi:ne180100]<0>(&v811, "++++++++++++++++++ ");
    std::string::basic_string[abi:ne180100](&__p, "08_RaytracingIndirection", 0x18uLL);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v235 = &__p;
    else
      v235 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v236 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v236 = __p.__r_.__value_.__l.__size_;
    v237 = std::string::append(&v811, (const std::string::value_type *)v235, v236);
    v238 = std::string::append(v237, " ++++++++++++++++++\n");
    if (SHIBYTE(v238->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v813, v238->__r_.__value_.__l.__data_, v238->__r_.__value_.__l.__size_);
    }
    else
    {
      v239 = *(_OWORD *)&v238->__r_.__value_.__l.__data_;
      v813.__r_.__value_.__r.__words[2] = v238->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v813.__r_.__value_.__l.__data_ = v239;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v811.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&__p, "\x1B[1;33m------------------ ");
    std::string::basic_string[abi:ne180100](&__dst, "08_RaytracingIndirection", 0x18uLL);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v240 = &__dst;
    else
      v240 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v241 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      v241 = __dst.__r_.__value_.__l.__size_;
    v242 = std::string::append(&__p, (const std::string::value_type *)v240, v241);
    v243 = std::string::append(v242, " ------------------\x1B[0m\n");
    if (SHIBYTE(v243->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v811, v243->__r_.__value_.__l.__data_, v243->__r_.__value_.__l.__size_);
    }
    else
    {
      v244 = *(_OWORD *)&v243->__r_.__value_.__l.__data_;
      v811.__r_.__value_.__r.__words[2] = v243->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v811.__r_.__value_.__l.__data_ = v244;
    }
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (!v234)
      {
LABEL_366:
        MTLRaytracingIndirectionPass = createMTLRaytracingIndirectionPass(GlobalSharedPassData);
        v250 = (llvm *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 16))(a1, MTLRaytracingIndirectionPass);
        if (v234)
        {
          v251 = llvm::createBarrierNoopPass(v250);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v251);
          v252 = operator new();
          DumpModulePass::DumpModulePass(v252, "08_RaytracingIndirection", 0x18uLL);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v252);
          v253 = llvm::createVerifierPass((llvm *)1);
          v254 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v253);
          v255 = llvm::createBarrierNoopPass(v254);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v255);
        }
        if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v811.__r_.__value_.__l.__data_);
        if (SHIBYTE(v813.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v813.__r_.__value_.__l.__data_);
        v155 = *(_QWORD *)(a2 + 20);
        goto LABEL_373;
      }
    }
    else if (!v234)
    {
      goto LABEL_366;
    }
    v245 = llvm::createBarrierNoopPass((llvm *)v243);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v245);
    v246 = llvm::createVerifierPass((llvm *)1);
    v247 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v246);
    v248 = llvm::createBarrierNoopPass(v247);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v248);
    goto LABEL_366;
  }
LABEL_373:
  if ((v155 & 0x200) == 0)
    goto LABEL_410;
  v256 = MTLAddBoundsCheckPipelineToPM(llvm::legacy::PassManager &,MTLBoundsCheck::Options const&,MTLBoundsCheck::Statistics *,MTLBoundsCheck::SerializedData *)::printPasses;
  std::string::basic_string[abi:ne180100]<0>(&v811, "++++++++++++++++++ ");
  std::string::basic_string[abi:ne180100](&__p, "09_RuntimeStackTrace", 0x14uLL);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v257 = &__p;
  else
    v257 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v258 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v258 = __p.__r_.__value_.__l.__size_;
  v259 = std::string::append(&v811, (const std::string::value_type *)v257, v258);
  v260 = std::string::append(v259, " ++++++++++++++++++\n");
  if (SHIBYTE(v260->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v813, v260->__r_.__value_.__l.__data_, v260->__r_.__value_.__l.__size_);
  }
  else
  {
    v261 = *(_OWORD *)&v260->__r_.__value_.__l.__data_;
    v813.__r_.__value_.__r.__words[2] = v260->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v813.__r_.__value_.__l.__data_ = v261;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v811.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\x1B[1;33m------------------ ");
  std::string::basic_string[abi:ne180100](&__dst, "09_RuntimeStackTrace", 0x14uLL);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v262 = &__dst;
  else
    v262 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v263 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v263 = __dst.__r_.__value_.__l.__size_;
  v264 = std::string::append(&__p, (const std::string::value_type *)v262, v263);
  v265 = std::string::append(v264, " ------------------\x1B[0m\n");
  if (SHIBYTE(v265->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v811, v265->__r_.__value_.__l.__data_, v265->__r_.__value_.__l.__size_);
  }
  else
  {
    v266 = *(_OWORD *)&v265->__r_.__value_.__l.__data_;
    v811.__r_.__value_.__r.__words[2] = v265->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v811.__r_.__value_.__l.__data_ = v266;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!v256)
      goto LABEL_403;
    goto LABEL_402;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v256)
  {
LABEL_402:
    v267 = llvm::createBarrierNoopPass((llvm *)v265);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v267);
    v268 = llvm::createVerifierPass((llvm *)1);
    v269 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v268);
    v270 = llvm::createBarrierNoopPass(v269);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v270);
  }
LABEL_403:
  MTLRuntimeStackTrace = createMTLRuntimeStackTrace((MTLBoundsCheck::SharedPassData *)GlobalSharedPassData);
  v272 = (llvm *)(*(uint64_t (**)(uint64_t, MTLRuntimeStackTrace *))(*(_QWORD *)a1 + 16))(a1, MTLRuntimeStackTrace);
  if (v256)
  {
    v273 = llvm::createBarrierNoopPass(v272);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v273);
    v274 = operator new();
    DumpModulePass::DumpModulePass(v274, "09_RuntimeStackTrace", 0x14uLL);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v274);
    v275 = llvm::createVerifierPass((llvm *)1);
    v276 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v275);
    v277 = llvm::createBarrierNoopPass(v276);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v277);
  }
  if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v811.__r_.__value_.__l.__data_);
  if (SHIBYTE(v813.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v813.__r_.__value_.__l.__data_);
  v155 = *(_QWORD *)(a2 + 20);
LABEL_410:
  if ((v155 & 0x200000400) == 0)
    goto LABEL_446;
  v278 = MTLAddBoundsCheckPipelineToPM(llvm::legacy::PassManager &,MTLBoundsCheck::Options const&,MTLBoundsCheck::Statistics *,MTLBoundsCheck::SerializedData *)::printPasses;
  std::string::basic_string[abi:ne180100]<0>(&v811, "++++++++++++++++++ ");
  std::string::basic_string[abi:ne180100](&__p, "10_DeviceMemoryChecks", 0x15uLL);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v279 = &__p;
  else
    v279 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v280 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v280 = __p.__r_.__value_.__l.__size_;
  v281 = std::string::append(&v811, (const std::string::value_type *)v279, v280);
  v282 = std::string::append(v281, " ++++++++++++++++++\n");
  if (SHIBYTE(v282->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v813, v282->__r_.__value_.__l.__data_, v282->__r_.__value_.__l.__size_);
  }
  else
  {
    v283 = *(_OWORD *)&v282->__r_.__value_.__l.__data_;
    v813.__r_.__value_.__r.__words[2] = v282->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v813.__r_.__value_.__l.__data_ = v283;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v811.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\x1B[1;33m------------------ ");
  std::string::basic_string[abi:ne180100](&__dst, "10_DeviceMemoryChecks", 0x15uLL);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v284 = &__dst;
  else
    v284 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v285 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v285 = __dst.__r_.__value_.__l.__size_;
  v286 = std::string::append(&__p, (const std::string::value_type *)v284, v285);
  v287 = std::string::append(v286, " ------------------\x1B[0m\n");
  if (SHIBYTE(v287->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v811, v287->__r_.__value_.__l.__data_, v287->__r_.__value_.__l.__size_);
  }
  else
  {
    v288 = *(_OWORD *)&v287->__r_.__value_.__l.__data_;
    v811.__r_.__value_.__r.__words[2] = v287->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v811.__r_.__value_.__l.__data_ = v288;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!v278)
      goto LABEL_440;
    goto LABEL_439;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v278)
  {
LABEL_439:
    v289 = llvm::createBarrierNoopPass((llvm *)v287);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v289);
    v290 = llvm::createVerifierPass((llvm *)1);
    v291 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v290);
    v292 = llvm::createBarrierNoopPass(v291);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v292);
  }
LABEL_440:
  v293 = createMTLMemoryCheckPass((MTLBoundsCheck::SharedPassData *)GlobalSharedPassData);
  v294 = (llvm *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 16))(a1, v293);
  if (v278)
  {
    v295 = llvm::createBarrierNoopPass(v294);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v295);
    v296 = operator new();
    DumpModulePass::DumpModulePass(v296, "10_DeviceMemoryChecks", 0x15uLL);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v296);
    v297 = llvm::createVerifierPass((llvm *)1);
    v298 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v297);
    v299 = llvm::createBarrierNoopPass(v298);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v299);
  }
  if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v811.__r_.__value_.__l.__data_);
  if (SHIBYTE(v813.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v813.__r_.__value_.__l.__data_);
LABEL_446:
  v300 = MTLAddBoundsCheckPipelineToPM(llvm::legacy::PassManager &,MTLBoundsCheck::Options const&,MTLBoundsCheck::Statistics *,MTLBoundsCheck::SerializedData *)::printPasses;
  std::string::basic_string[abi:ne180100]<0>(&v811, "++++++++++++++++++ ");
  std::string::basic_string[abi:ne180100](&__p, "11_PointerIndirection", 0x15uLL);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v301 = &__p;
  else
    v301 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v302 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v302 = __p.__r_.__value_.__l.__size_;
  v303 = std::string::append(&v811, (const std::string::value_type *)v301, v302);
  v304 = std::string::append(v303, " ++++++++++++++++++\n");
  if (SHIBYTE(v304->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v813, v304->__r_.__value_.__l.__data_, v304->__r_.__value_.__l.__size_);
  }
  else
  {
    v305 = *(_OWORD *)&v304->__r_.__value_.__l.__data_;
    v813.__r_.__value_.__r.__words[2] = v304->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v813.__r_.__value_.__l.__data_ = v305;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v811.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\x1B[1;33m------------------ ");
  std::string::basic_string[abi:ne180100](&__dst, "11_PointerIndirection", 0x15uLL);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v306 = &__dst;
  else
    v306 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v307 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v307 = __dst.__r_.__value_.__l.__size_;
  v308 = std::string::append(&__p, (const std::string::value_type *)v306, v307);
  v309 = std::string::append(v308, " ------------------\x1B[0m\n");
  if (SHIBYTE(v309->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v811, v309->__r_.__value_.__l.__data_, v309->__r_.__value_.__l.__size_);
  }
  else
  {
    v310 = *(_OWORD *)&v309->__r_.__value_.__l.__data_;
    v811.__r_.__value_.__r.__words[2] = v309->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v811.__r_.__value_.__l.__data_ = v310;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v300)
      goto LABEL_475;
    goto LABEL_474;
  }
  if (v300)
  {
LABEL_474:
    v311 = llvm::createBarrierNoopPass((llvm *)v309);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v311);
    v312 = llvm::createVerifierPass((llvm *)1);
    v313 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v312);
    v314 = llvm::createBarrierNoopPass(v313);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v314);
  }
LABEL_475:
  MTLMemoryIndirectionPass = createMTLMemoryIndirectionPass(GlobalSharedPassData);
  v316 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, MTLMemoryIndirectionPass);
  if ((*(_BYTE *)(a2 + 23) & 0x10) != 0)
  {
    JumpThreadingPass = llvm::createJumpThreadingPass(0);
    v316 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, JumpThreadingPass);
  }
  v318 = llvm::createSROAPass(v316);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v318);
  v319 = llvm::createEarlyCSEPass(0);
  v320 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v319);
  AggressiveDCEPass = llvm::createAggressiveDCEPass(v320);
  v322 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, AggressiveDCEPass);
  GlobalDCEPass = llvm::createGlobalDCEPass(v322);
  v324 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, GlobalDCEPass);
  if (v300)
  {
    v325 = llvm::createBarrierNoopPass(v324);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v325);
    v326 = operator new();
    DumpModulePass::DumpModulePass(v326, "11_PointerIndirection", 0x15uLL);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v326);
    v327 = llvm::createVerifierPass((llvm *)1);
    v328 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v327);
    v329 = llvm::createBarrierNoopPass(v328);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v329);
  }
  if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v811.__r_.__value_.__l.__data_);
  if (SHIBYTE(v813.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v813.__r_.__value_.__l.__data_);
  if ((*(_BYTE *)(a2 + 23) & 0x20) != 0)
  {
    v330 = MTLAddBoundsCheckPipelineToPM(llvm::legacy::PassManager &,MTLBoundsCheck::Options const&,MTLBoundsCheck::Statistics *,MTLBoundsCheck::SerializedData *)::printPasses;
    std::string::basic_string[abi:ne180100]<0>(&v811, "++++++++++++++++++ ");
    std::string::basic_string[abi:ne180100](&__p, "12_ICBIndirection", 0x11uLL);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v331 = &__p;
    else
      v331 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v332 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v332 = __p.__r_.__value_.__l.__size_;
    v333 = std::string::append(&v811, (const std::string::value_type *)v331, v332);
    v334 = std::string::append(v333, " ++++++++++++++++++\n");
    if (SHIBYTE(v334->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v813, v334->__r_.__value_.__l.__data_, v334->__r_.__value_.__l.__size_);
    }
    else
    {
      v335 = *(_OWORD *)&v334->__r_.__value_.__l.__data_;
      v813.__r_.__value_.__r.__words[2] = v334->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v813.__r_.__value_.__l.__data_ = v335;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v811.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&__p, "\x1B[1;33m------------------ ");
    std::string::basic_string[abi:ne180100](&__dst, "12_ICBIndirection", 0x11uLL);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v336 = &__dst;
    else
      v336 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v337 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      v337 = __dst.__r_.__value_.__l.__size_;
    v338 = std::string::append(&__p, (const std::string::value_type *)v336, v337);
    v339 = std::string::append(v338, " ------------------\x1B[0m\n");
    if (SHIBYTE(v339->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v811, v339->__r_.__value_.__l.__data_, v339->__r_.__value_.__l.__size_);
    }
    else
    {
      v340 = *(_OWORD *)&v339->__r_.__value_.__l.__data_;
      v811.__r_.__value_.__r.__words[2] = v339->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v811.__r_.__value_.__l.__data_ = v340;
    }
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (!v330)
      {
LABEL_513:
        MTLICBIndirectionPass = createMTLICBIndirectionPass(GlobalSharedPassData);
        v346 = (llvm *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 16))(a1, MTLICBIndirectionPass);
        if (v330)
        {
          v347 = llvm::createBarrierNoopPass(v346);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v347);
          v348 = operator new();
          DumpModulePass::DumpModulePass(v348, "12_ICBIndirection", 0x11uLL);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v348);
          v349 = llvm::createVerifierPass((llvm *)1);
          v350 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v349);
          v351 = llvm::createBarrierNoopPass(v350);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v351);
        }
        if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v811.__r_.__value_.__l.__data_);
        if (SHIBYTE(v813.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v813.__r_.__value_.__l.__data_);
        goto LABEL_519;
      }
    }
    else if (!v330)
    {
      goto LABEL_513;
    }
    v341 = llvm::createBarrierNoopPass((llvm *)v339);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v341);
    v342 = llvm::createVerifierPass((llvm *)1);
    v343 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v342);
    v344 = llvm::createBarrierNoopPass(v343);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v344);
    goto LABEL_513;
  }
LABEL_519:
  v352 = MTLAddBoundsCheckPipelineToPM(llvm::legacy::PassManager &,MTLBoundsCheck::Options const&,MTLBoundsCheck::Statistics *,MTLBoundsCheck::SerializedData *)::printPasses;
  std::string::basic_string[abi:ne180100]<0>(&v811, "++++++++++++++++++ ");
  std::string::basic_string[abi:ne180100](&__p, "13_ThreadgroupMemory", 0x14uLL);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v353 = &__p;
  else
    v353 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v354 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v354 = __p.__r_.__value_.__l.__size_;
  v355 = std::string::append(&v811, (const std::string::value_type *)v353, v354);
  v356 = std::string::append(v355, " ++++++++++++++++++\n");
  if (SHIBYTE(v356->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v813, v356->__r_.__value_.__l.__data_, v356->__r_.__value_.__l.__size_);
  }
  else
  {
    v357 = *(_OWORD *)&v356->__r_.__value_.__l.__data_;
    v813.__r_.__value_.__r.__words[2] = v356->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v813.__r_.__value_.__l.__data_ = v357;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v811.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\x1B[1;33m------------------ ");
  std::string::basic_string[abi:ne180100](&__dst, "13_ThreadgroupMemory", 0x14uLL);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v358 = &__dst;
  else
    v358 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v359 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v359 = __dst.__r_.__value_.__l.__size_;
  v360 = std::string::append(&__p, (const std::string::value_type *)v358, v359);
  v361 = std::string::append(v360, " ------------------\x1B[0m\n");
  if (SHIBYTE(v361->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v811, v361->__r_.__value_.__l.__data_, v361->__r_.__value_.__l.__size_);
  }
  else
  {
    v362 = *(_OWORD *)&v361->__r_.__value_.__l.__data_;
    v811.__r_.__value_.__r.__words[2] = v361->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v811.__r_.__value_.__l.__data_ = v362;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v352)
      goto LABEL_548;
    goto LABEL_547;
  }
  if (v352)
  {
LABEL_547:
    v363 = llvm::createBarrierNoopPass((llvm *)v361);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v363);
    v364 = llvm::createVerifierPass((llvm *)1);
    v365 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v364);
    v366 = llvm::createBarrierNoopPass(v365);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v366);
  }
LABEL_548:
  v367 = createMTLThreadgroupMemoryCheckPass((MTLBoundsCheck::SharedPassData *)GlobalSharedPassData);
  v368 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v367);
  v369 = llvm::createSROAPass(v368);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v369);
  v370 = llvm::createEarlyCSEPass(0);
  v371 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v370);
  v372 = llvm::createAggressiveDCEPass(v371);
  v373 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v372);
  v374 = llvm::createGlobalDCEPass(v373);
  v375 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v374);
  if (v352)
  {
    v376 = llvm::createBarrierNoopPass(v375);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v376);
    v377 = operator new();
    DumpModulePass::DumpModulePass(v377, "13_ThreadgroupMemory", 0x14uLL);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v377);
    v378 = llvm::createVerifierPass((llvm *)1);
    v379 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v378);
    v380 = llvm::createBarrierNoopPass(v379);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v380);
  }
  if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v811.__r_.__value_.__l.__data_);
  if (SHIBYTE(v813.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v813.__r_.__value_.__l.__data_);
  v381 = *(_QWORD *)(a2 + 20);
  if ((v381 & 0x100) != 0)
  {
    v382 = MTLAddBoundsCheckPipelineToPM(llvm::legacy::PassManager &,MTLBoundsCheck::Options const&,MTLBoundsCheck::Statistics *,MTLBoundsCheck::SerializedData *)::printPasses;
    std::string::basic_string[abi:ne180100]<0>(&v811, "++++++++++++++++++ ");
    std::string::basic_string[abi:ne180100](&__p, "14_MTLGEPAnalysisPass", 0x15uLL);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v383 = &__p;
    else
      v383 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v384 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v384 = __p.__r_.__value_.__l.__size_;
    v385 = std::string::append(&v811, (const std::string::value_type *)v383, v384);
    v386 = std::string::append(v385, " ++++++++++++++++++\n");
    if (SHIBYTE(v386->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v813, v386->__r_.__value_.__l.__data_, v386->__r_.__value_.__l.__size_);
    }
    else
    {
      v387 = *(_OWORD *)&v386->__r_.__value_.__l.__data_;
      v813.__r_.__value_.__r.__words[2] = v386->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v813.__r_.__value_.__l.__data_ = v387;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v811.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&__p, "\x1B[1;33m------------------ ");
    std::string::basic_string[abi:ne180100](&__dst, "14_MTLGEPAnalysisPass", 0x15uLL);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v388 = &__dst;
    else
      v388 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v389 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      v389 = __dst.__r_.__value_.__l.__size_;
    v390 = std::string::append(&__p, (const std::string::value_type *)v388, v389);
    v391 = std::string::append(v390, " ------------------\x1B[0m\n");
    if (SHIBYTE(v391->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v811, v391->__r_.__value_.__l.__data_, v391->__r_.__value_.__l.__size_);
    }
    else
    {
      v392 = *(_OWORD *)&v391->__r_.__value_.__l.__data_;
      v811.__r_.__value_.__r.__words[2] = v391->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v811.__r_.__value_.__l.__data_ = v392;
    }
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (!v382)
      {
LABEL_584:
        v397 = (llvm *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 16))(a1, v13);
        if (v382)
        {
          v398 = llvm::createBarrierNoopPass(v397);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v398);
          v399 = operator new();
          DumpModulePass::DumpModulePass(v399, "14_MTLGEPAnalysisPass", 0x15uLL);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v399);
          v400 = llvm::createVerifierPass((llvm *)1);
          v401 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v400);
          v402 = llvm::createBarrierNoopPass(v401);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v402);
        }
        if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v811.__r_.__value_.__l.__data_);
        if (SHIBYTE(v813.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v813.__r_.__value_.__l.__data_);
        v381 = *(_QWORD *)(a2 + 20);
        goto LABEL_591;
      }
    }
    else if (!v382)
    {
      goto LABEL_584;
    }
    v393 = llvm::createBarrierNoopPass((llvm *)v391);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v393);
    v394 = llvm::createVerifierPass((llvm *)1);
    v395 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v394);
    v396 = llvm::createBarrierNoopPass(v395);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v396);
    goto LABEL_584;
  }
LABEL_591:
  if ((v381 & 0x800) == 0)
    goto LABEL_638;
  v403 = MTLAddBoundsCheckPipelineToPM(llvm::legacy::PassManager &,MTLBoundsCheck::Options const&,MTLBoundsCheck::Statistics *,MTLBoundsCheck::SerializedData *)::printPasses;
  std::string::basic_string[abi:ne180100]<0>(&v813, "++++++++++++++++++ ");
  std::string::basic_string[abi:ne180100](&v811, "15_Optimization#1", 0x11uLL);
  if ((v811.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v404 = &v811;
  else
    v404 = (std::string *)v811.__r_.__value_.__r.__words[0];
  if ((v811.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v405 = HIBYTE(v811.__r_.__value_.__r.__words[2]);
  else
    v405 = v811.__r_.__value_.__l.__size_;
  v406 = std::string::append(&v813, (const std::string::value_type *)v404, v405);
  v407 = std::string::append(v406, " ++++++++++++++++++\n");
  if (SHIBYTE(v407->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v808, v407->__r_.__value_.__l.__data_, v407->__r_.__value_.__l.__size_);
  }
  else
  {
    v408 = *(_OWORD *)&v407->__r_.__value_.__l.__data_;
    v808.__r_.__value_.__r.__words[2] = v407->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v808.__r_.__value_.__l.__data_ = v408;
  }
  if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v811.__r_.__value_.__l.__data_);
  if (SHIBYTE(v813.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v813.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v813, "\x1B[1;33m------------------ ");
  std::string::basic_string[abi:ne180100](&v811, "15_Optimization#1", 0x11uLL);
  if ((v811.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v409 = &v811;
  else
    v409 = (std::string *)v811.__r_.__value_.__r.__words[0];
  if ((v811.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v410 = HIBYTE(v811.__r_.__value_.__r.__words[2]);
  else
    v410 = v811.__r_.__value_.__l.__size_;
  v411 = std::string::append(&v813, (const std::string::value_type *)v409, v410);
  v412 = std::string::append(v411, " ------------------\x1B[0m\n");
  if (SHIBYTE(v412->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v807, v412->__r_.__value_.__l.__data_, v412->__r_.__value_.__l.__size_);
  }
  else
  {
    v413 = *(_OWORD *)&v412->__r_.__value_.__l.__data_;
    v807.__r_.__value_.__r.__words[2] = v412->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v807.__r_.__value_.__l.__data_ = v413;
  }
  if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v811.__r_.__value_.__l.__data_);
  if (SHIBYTE(v813.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v813.__r_.__value_.__l.__data_);
    if (!v403)
      goto LABEL_621;
    goto LABEL_620;
  }
  if (v403)
  {
LABEL_620:
    v414 = llvm::createBarrierNoopPass((llvm *)v412);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v414);
    v415 = llvm::createVerifierPass((llvm *)1);
    v416 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v415);
    v417 = llvm::createBarrierNoopPass(v416);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v417);
  }
LABEL_621:
  __p.__r_.__value_.__r.__words[0] = 0x100000000000001;
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0x1010000uLL;
  v814 = 0;
  v418 = llvm::createCFGSimplificationPass();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v418);
  v419 = v814;
  if (v814 == &v813)
  {
    v420 = 4;
    v419 = &v813;
  }
  else
  {
    if (!v814)
      goto LABEL_626;
    v420 = 5;
  }
  (*(void (**)(void))(v419->__r_.__value_.__r.__words[0] + 8 * v420))();
LABEL_626:
  v421 = llvm::createEarlyCSEPass((llvm *)1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v421);
  __dst.__r_.__value_.__r.__words[0] = 0x100000000000001;
  *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0x1010000uLL;
  v812 = 0;
  v422 = llvm::createCFGSimplificationPass();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v422);
  v423 = (llvm *)v812;
  if (v812 == &v811)
  {
    v424 = 4;
    v423 = (llvm *)&v811;
    goto LABEL_630;
  }
  if (v812)
  {
    v424 = 5;
LABEL_630:
    v423 = (llvm *)(*(uint64_t (**)(void))(*(_QWORD *)v423 + 8 * v424))();
  }
  v425 = llvm::createInstSimplifyLegacyPass(v423);
  v426 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v425);
  StraightLineStrengthReducePass = llvm::createStraightLineStrengthReducePass(v426);
  v428 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, StraightLineStrengthReducePass);
  if (v403)
  {
    v429 = llvm::createBarrierNoopPass(v428);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v429);
    v430 = operator new();
    DumpModulePass::DumpModulePass(v430, "15_Optimization#1", 0x11uLL);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v430);
    v431 = llvm::createVerifierPass((llvm *)1);
    v432 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v431);
    v433 = llvm::createBarrierNoopPass(v432);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v433);
  }
  if (SHIBYTE(v807.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v807.__r_.__value_.__l.__data_);
  if (SHIBYTE(v808.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v808.__r_.__value_.__l.__data_);
  v381 = *(_QWORD *)(a2 + 20);
LABEL_638:
  if ((v381 & 0x100) == 0)
    goto LABEL_753;
  v434 = MTLAddBoundsCheckPipelineToPM(llvm::legacy::PassManager &,MTLBoundsCheck::Options const&,MTLBoundsCheck::Statistics *,MTLBoundsCheck::SerializedData *)::printPasses;
  std::string::basic_string[abi:ne180100]<0>(&v811, "++++++++++++++++++ ");
  std::string::basic_string[abi:ne180100](&__p, "16_MTLGEPConversionPass", 0x17uLL);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v435 = &__p;
  else
    v435 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v436 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v436 = __p.__r_.__value_.__l.__size_;
  v437 = std::string::append(&v811, (const std::string::value_type *)v435, v436);
  v438 = std::string::append(v437, " ++++++++++++++++++\n");
  if (SHIBYTE(v438->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v813, v438->__r_.__value_.__l.__data_, v438->__r_.__value_.__l.__size_);
  }
  else
  {
    v439 = *(_OWORD *)&v438->__r_.__value_.__l.__data_;
    v813.__r_.__value_.__r.__words[2] = v438->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v813.__r_.__value_.__l.__data_ = v439;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v811.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\x1B[1;33m------------------ ");
  std::string::basic_string[abi:ne180100](&__dst, "16_MTLGEPConversionPass", 0x17uLL);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v440 = &__dst;
  else
    v440 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v441 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v441 = __dst.__r_.__value_.__l.__size_;
  v442 = std::string::append(&__p, (const std::string::value_type *)v440, v441);
  v443 = std::string::append(v442, " ------------------\x1B[0m\n");
  if (SHIBYTE(v443->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v811, v443->__r_.__value_.__l.__data_, v443->__r_.__value_.__l.__size_);
  }
  else
  {
    v444 = *(_OWORD *)&v443->__r_.__value_.__l.__data_;
    v811.__r_.__value_.__r.__words[2] = v443->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v811.__r_.__value_.__l.__data_ = v444;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v434)
      goto LABEL_668;
    goto LABEL_667;
  }
  if (v434)
  {
LABEL_667:
    v445 = llvm::createBarrierNoopPass((llvm *)v443);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v445);
    v446 = llvm::createVerifierPass((llvm *)1);
    v447 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v446);
    v448 = llvm::createBarrierNoopPass(v447);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v448);
  }
LABEL_668:
  v449 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, MTLGEPConversionPass);
  if (v434)
  {
    v450 = llvm::createBarrierNoopPass(v449);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v450);
    v451 = operator new();
    DumpModulePass::DumpModulePass(v451, "16_MTLGEPConversionPass", 0x17uLL);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v451);
    v452 = llvm::createVerifierPass((llvm *)1);
    v453 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v452);
    v454 = llvm::createBarrierNoopPass(v453);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v454);
  }
  if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v811.__r_.__value_.__l.__data_);
  if (SHIBYTE(v813.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v813.__r_.__value_.__l.__data_);
  v381 = *(_QWORD *)(a2 + 20);
  if ((v381 & 0x8000) != 0)
  {
    v455 = MTLAddBoundsCheckPipelineToPM(llvm::legacy::PassManager &,MTLBoundsCheck::Options const&,MTLBoundsCheck::Statistics *,MTLBoundsCheck::SerializedData *)::printPasses;
    std::string::basic_string[abi:ne180100]<0>(&v811, "++++++++++++++++++ ");
    std::string::basic_string[abi:ne180100](&__p, "FoldMerge", 9uLL);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v456 = &__p;
    else
      v456 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v457 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v457 = __p.__r_.__value_.__l.__size_;
    v458 = std::string::append(&v811, (const std::string::value_type *)v456, v457);
    v459 = std::string::append(v458, " ++++++++++++++++++\n");
    if (SHIBYTE(v459->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v813, v459->__r_.__value_.__l.__data_, v459->__r_.__value_.__l.__size_);
    }
    else
    {
      v460 = *(_OWORD *)&v459->__r_.__value_.__l.__data_;
      v813.__r_.__value_.__r.__words[2] = v459->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v813.__r_.__value_.__l.__data_ = v460;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v811.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&__p, "\x1B[1;33m------------------ ");
    std::string::basic_string[abi:ne180100](&__dst, "FoldMerge", 9uLL);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v461 = &__dst;
    else
      v461 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v462 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      v462 = __dst.__r_.__value_.__l.__size_;
    v463 = std::string::append(&__p, (const std::string::value_type *)v461, v462);
    v464 = std::string::append(v463, " ------------------\x1B[0m\n");
    if (SHIBYTE(v464->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v811, v464->__r_.__value_.__l.__data_, v464->__r_.__value_.__l.__size_);
    }
    else
    {
      v465 = *(_OWORD *)&v464->__r_.__value_.__l.__data_;
      v811.__r_.__value_.__r.__words[2] = v464->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v811.__r_.__value_.__l.__data_ = v465;
    }
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (!v455)
      {
LABEL_704:
        v470 = (llvm *)(*(uint64_t (**)(uint64_t, MTLFoldMergePass *))(*(_QWORD *)a1 + 16))(a1, MTLFoldMergePass);
        if (v455)
        {
          v471 = llvm::createBarrierNoopPass(v470);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v471);
          v472 = operator new();
          DumpModulePass::DumpModulePass(v472, "FoldMerge", 9uLL);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v472);
          v473 = llvm::createVerifierPass((llvm *)1);
          v474 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v473);
          v475 = llvm::createBarrierNoopPass(v474);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v475);
        }
        if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v811.__r_.__value_.__l.__data_);
        if (SHIBYTE(v813.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v813.__r_.__value_.__l.__data_);
        v381 = *(_QWORD *)(a2 + 20);
        goto LABEL_711;
      }
    }
    else if (!v455)
    {
      goto LABEL_704;
    }
    v466 = llvm::createBarrierNoopPass((llvm *)v464);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v466);
    v467 = llvm::createVerifierPass((llvm *)1);
    v468 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v467);
    v469 = llvm::createBarrierNoopPass(v468);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v469);
    goto LABEL_704;
  }
LABEL_711:
  if ((v381 & 0x800) == 0)
    goto LABEL_753;
  v476 = MTLAddBoundsCheckPipelineToPM(llvm::legacy::PassManager &,MTLBoundsCheck::Options const&,MTLBoundsCheck::Statistics *,MTLBoundsCheck::SerializedData *)::printPasses;
  std::string::basic_string[abi:ne180100]<0>(&v813, "++++++++++++++++++ ");
  std::string::basic_string[abi:ne180100](&v811, "Optimization#2", 0xEuLL);
  if ((v811.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v477 = &v811;
  else
    v477 = (std::string *)v811.__r_.__value_.__r.__words[0];
  if ((v811.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v478 = HIBYTE(v811.__r_.__value_.__r.__words[2]);
  else
    v478 = v811.__r_.__value_.__l.__size_;
  v479 = std::string::append(&v813, (const std::string::value_type *)v477, v478);
  v480 = std::string::append(v479, " ++++++++++++++++++\n");
  if (SHIBYTE(v480->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, v480->__r_.__value_.__l.__data_, v480->__r_.__value_.__l.__size_);
  }
  else
  {
    v481 = *(_OWORD *)&v480->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v480->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v481;
  }
  if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v811.__r_.__value_.__l.__data_);
  if (SHIBYTE(v813.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v813.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v813, "\x1B[1;33m------------------ ");
  std::string::basic_string[abi:ne180100](&v811, "Optimization#2", 0xEuLL);
  if ((v811.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v482 = &v811;
  else
    v482 = (std::string *)v811.__r_.__value_.__r.__words[0];
  if ((v811.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v483 = HIBYTE(v811.__r_.__value_.__r.__words[2]);
  else
    v483 = v811.__r_.__value_.__l.__size_;
  v484 = std::string::append(&v813, (const std::string::value_type *)v482, v483);
  v485 = std::string::append(v484, " ------------------\x1B[0m\n");
  if (SHIBYTE(v485->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&__dst, v485->__r_.__value_.__l.__data_, v485->__r_.__value_.__l.__size_);
  }
  else
  {
    v486 = *(_OWORD *)&v485->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v485->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v486;
  }
  if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v811.__r_.__value_.__l.__data_);
  if (SHIBYTE(v813.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v813.__r_.__value_.__l.__data_);
    if (!v476)
      goto LABEL_741;
    goto LABEL_740;
  }
  if (v476)
  {
LABEL_740:
    v487 = llvm::createBarrierNoopPass((llvm *)v485);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v487);
    v488 = llvm::createVerifierPass((llvm *)1);
    v489 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v488);
    v490 = llvm::createBarrierNoopPass(v489);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v490);
  }
LABEL_741:
  v811.__r_.__value_.__r.__words[0] = 0x100000000000001;
  *(_OWORD *)&v811.__r_.__value_.__r.__words[1] = 0x1010000uLL;
  v814 = 0;
  v491 = llvm::createCFGSimplificationPass();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v491);
  v492 = (llvm *)v814;
  if (v814 == &v813)
  {
    v493 = 4;
    v492 = (llvm *)&v813;
    goto LABEL_745;
  }
  if (v814)
  {
    v493 = 5;
LABEL_745:
    v492 = (llvm *)(*(uint64_t (**)(void))(*(_QWORD *)v492 + 8 * v493))();
  }
  v494 = llvm::createInstSimplifyLegacyPass(v492);
  v495 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v494);
  v496 = llvm::createInstructionCombiningPass(v495);
  v497 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v496);
  v498 = llvm::createAggressiveDCEPass(v497);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v498);
  v499 = llvm::createEarlyCSEPass(0);
  v500 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v499);
  if (v476)
  {
    v501 = llvm::createBarrierNoopPass(v500);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v501);
    v502 = operator new();
    DumpModulePass::DumpModulePass(v502, "Optimization#2", 0xEuLL);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v502);
    v503 = llvm::createVerifierPass((llvm *)1);
    v504 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v503);
    v505 = llvm::createBarrierNoopPass(v504);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v505);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v381 = *(_QWORD *)(a2 + 20);
LABEL_753:
  if ((v381 & 0x800400) != 0x400)
    goto LABEL_833;
  v506 = MTLAddBoundsCheckPipelineToPM(llvm::legacy::PassManager &,MTLBoundsCheck::Options const&,MTLBoundsCheck::Statistics *,MTLBoundsCheck::SerializedData *)::printPasses;
  std::string::basic_string[abi:ne180100]<0>(&v811, "++++++++++++++++++ ");
  std::string::basic_string[abi:ne180100](&__p, "17_MTLBoundsCheckPass", 0x15uLL);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v507 = &__p;
  else
    v507 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v508 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v508 = __p.__r_.__value_.__l.__size_;
  v509 = std::string::append(&v811, (const std::string::value_type *)v507, v508);
  v510 = std::string::append(v509, " ++++++++++++++++++\n");
  if (SHIBYTE(v510->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v813, v510->__r_.__value_.__l.__data_, v510->__r_.__value_.__l.__size_);
  }
  else
  {
    v511 = *(_OWORD *)&v510->__r_.__value_.__l.__data_;
    v813.__r_.__value_.__r.__words[2] = v510->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v813.__r_.__value_.__l.__data_ = v511;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v811.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\x1B[1;33m------------------ ");
  std::string::basic_string[abi:ne180100](&__dst, "17_MTLBoundsCheckPass", 0x15uLL);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v512 = &__dst;
  else
    v512 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v513 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v513 = __dst.__r_.__value_.__l.__size_;
  v514 = std::string::append(&__p, (const std::string::value_type *)v512, v513);
  v515 = std::string::append(v514, " ------------------\x1B[0m\n");
  if (SHIBYTE(v515->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v811, v515->__r_.__value_.__l.__data_, v515->__r_.__value_.__l.__size_);
  }
  else
  {
    v516 = *(_OWORD *)&v515->__r_.__value_.__l.__data_;
    v811.__r_.__value_.__r.__words[2] = v515->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v811.__r_.__value_.__l.__data_ = v516;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v506)
      goto LABEL_783;
    goto LABEL_782;
  }
  if (v506)
  {
LABEL_782:
    v517 = llvm::createBarrierNoopPass((llvm *)v515);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v517);
    v518 = llvm::createVerifierPass((llvm *)1);
    v519 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v518);
    v520 = llvm::createBarrierNoopPass(v519);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v520);
  }
LABEL_783:
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 16))(a1, v13);
  v521 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v14);
  if (v506)
  {
    v522 = llvm::createBarrierNoopPass(v521);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v522);
    v523 = operator new();
    DumpModulePass::DumpModulePass(v523, "17_MTLBoundsCheckPass", 0x15uLL);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v523);
    v524 = llvm::createVerifierPass((llvm *)1);
    v525 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v524);
    v526 = llvm::createBarrierNoopPass(v525);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v526);
  }
  if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v811.__r_.__value_.__l.__data_);
  if (SHIBYTE(v813.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v813.__r_.__value_.__l.__data_);
  v381 = *(_QWORD *)(a2 + 20);
  if ((v381 & 0x800) != 0)
  {
    v527 = MTLAddBoundsCheckPipelineToPM(llvm::legacy::PassManager &,MTLBoundsCheck::Options const&,MTLBoundsCheck::Statistics *,MTLBoundsCheck::SerializedData *)::printPasses;
    std::string::basic_string[abi:ne180100]<0>(&v813, "++++++++++++++++++ ");
    std::string::basic_string[abi:ne180100](&v811, "Optimization#3", 0xEuLL);
    if ((v811.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v528 = &v811;
    else
      v528 = (std::string *)v811.__r_.__value_.__r.__words[0];
    if ((v811.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v529 = HIBYTE(v811.__r_.__value_.__r.__words[2]);
    else
      v529 = v811.__r_.__value_.__l.__size_;
    v530 = std::string::append(&v813, (const std::string::value_type *)v528, v529);
    v531 = std::string::append(v530, " ++++++++++++++++++\n");
    if (SHIBYTE(v531->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, v531->__r_.__value_.__l.__data_, v531->__r_.__value_.__l.__size_);
    }
    else
    {
      v532 = *(_OWORD *)&v531->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v531->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v532;
    }
    if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v811.__r_.__value_.__l.__data_);
    if (SHIBYTE(v813.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v813.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v813, "\x1B[1;33m------------------ ");
    std::string::basic_string[abi:ne180100](&v811, "Optimization#3", 0xEuLL);
    if ((v811.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v533 = &v811;
    else
      v533 = (std::string *)v811.__r_.__value_.__r.__words[0];
    if ((v811.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v534 = HIBYTE(v811.__r_.__value_.__r.__words[2]);
    else
      v534 = v811.__r_.__value_.__l.__size_;
    v535 = std::string::append(&v813, (const std::string::value_type *)v533, v534);
    v536 = std::string::append(v535, " ------------------\x1B[0m\n");
    if (SHIBYTE(v536->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&__dst, v536->__r_.__value_.__l.__data_, v536->__r_.__value_.__l.__size_);
    }
    else
    {
      v537 = *(_OWORD *)&v536->__r_.__value_.__l.__data_;
      __dst.__r_.__value_.__r.__words[2] = v536->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v537;
    }
    if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v811.__r_.__value_.__l.__data_);
    if (SHIBYTE(v813.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v813.__r_.__value_.__l.__data_);
      if (!v527)
        goto LABEL_819;
    }
    else if (!v527)
    {
LABEL_819:
      v811.__r_.__value_.__r.__words[0] = 0x100000000000001;
      *(_OWORD *)&v811.__r_.__value_.__r.__words[1] = 0x1010000uLL;
      v814 = 0;
      v542 = llvm::createCFGSimplificationPass();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v542);
      v543 = v814;
      if (v814 == &v813)
      {
        v544 = 4;
        v543 = &v813;
      }
      else
      {
        if (!v814)
        {
LABEL_824:
          v545 = llvm::createInstSimplifyLegacyPass((llvm *)v543);
          v546 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v545);
          v547 = llvm::createInstructionCombiningPass(v546);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v547);
          v548 = llvm::createEarlyCSEPass(0);
          v549 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v548);
          v550 = llvm::createAggressiveDCEPass(v549);
          v551 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v550);
          LoopSinkPass = llvm::createLoopSinkPass(v551);
          v553 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, LoopSinkPass);
          if ((*(_BYTE *)(a2 + 23) & 0x10) != 0)
          {
            v554 = llvm::createJumpThreadingPass(0);
            v553 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v554);
          }
          if (v527)
          {
            v555 = llvm::createBarrierNoopPass(v553);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v555);
            v556 = operator new();
            DumpModulePass::DumpModulePass(v556, "Optimization#3", 0xEuLL);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v556);
            v557 = llvm::createVerifierPass((llvm *)1);
            v558 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v557);
            v559 = llvm::createBarrierNoopPass(v558);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v559);
          }
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v381 = *(_QWORD *)(a2 + 20);
          goto LABEL_833;
        }
        v544 = 5;
      }
      v543 = (std::string *)(*(uint64_t (**)(void))(v543->__r_.__value_.__r.__words[0] + 8 * v544))();
      goto LABEL_824;
    }
    v538 = llvm::createBarrierNoopPass((llvm *)v536);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v538);
    v539 = llvm::createVerifierPass((llvm *)1);
    v540 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v539);
    v541 = llvm::createBarrierNoopPass(v540);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v541);
    goto LABEL_819;
  }
LABEL_833:
  if ((v381 & 0x80000000) == 0)
    goto LABEL_870;
  v560 = MTLAddBoundsCheckPipelineToPM(llvm::legacy::PassManager &,MTLBoundsCheck::Options const&,MTLBoundsCheck::Statistics *,MTLBoundsCheck::SerializedData *)::printPasses;
  std::string::basic_string[abi:ne180100]<0>(&v811, "++++++++++++++++++ ");
  std::string::basic_string[abi:ne180100](&__p, "18_Builtins", 0xBuLL);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v561 = &__p;
  else
    v561 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v562 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v562 = __p.__r_.__value_.__l.__size_;
  v563 = std::string::append(&v811, (const std::string::value_type *)v561, v562);
  v564 = std::string::append(v563, " ++++++++++++++++++\n");
  if (SHIBYTE(v564->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v813, v564->__r_.__value_.__l.__data_, v564->__r_.__value_.__l.__size_);
  }
  else
  {
    v565 = *(_OWORD *)&v564->__r_.__value_.__l.__data_;
    v813.__r_.__value_.__r.__words[2] = v564->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v813.__r_.__value_.__l.__data_ = v565;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v811.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\x1B[1;33m------------------ ");
  std::string::basic_string[abi:ne180100](&__dst, "18_Builtins", 0xBuLL);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v566 = &__dst;
  else
    v566 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v567 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v567 = __dst.__r_.__value_.__l.__size_;
  v568 = std::string::append(&__p, (const std::string::value_type *)v566, v567);
  v569 = std::string::append(v568, " ------------------\x1B[0m\n");
  if (SHIBYTE(v569->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v811, v569->__r_.__value_.__l.__data_, v569->__r_.__value_.__l.__size_);
  }
  else
  {
    v570 = *(_OWORD *)&v569->__r_.__value_.__l.__data_;
    v811.__r_.__value_.__r.__words[2] = v569->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v811.__r_.__value_.__l.__data_ = v570;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!v560)
      goto LABEL_863;
    goto LABEL_862;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v560)
  {
LABEL_862:
    v571 = llvm::createBarrierNoopPass((llvm *)v569);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v571);
    v572 = llvm::createVerifierPass((llvm *)1);
    v573 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v572);
    v574 = llvm::createBarrierNoopPass(v573);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v574);
  }
LABEL_863:
  MTLBuiltinsReportPass = createMTLBuiltinsReportPass(GlobalSharedPassData);
  v576 = (llvm *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 16))(a1, MTLBuiltinsReportPass);
  if (v560)
  {
    v577 = llvm::createBarrierNoopPass(v576);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v577);
    v578 = operator new();
    DumpModulePass::DumpModulePass(v578, "18_Builtins", 0xBuLL);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v578);
    v579 = llvm::createVerifierPass((llvm *)1);
    v580 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v579);
    v581 = llvm::createBarrierNoopPass(v580);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v581);
  }
  if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v811.__r_.__value_.__l.__data_);
  if (SHIBYTE(v813.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v813.__r_.__value_.__l.__data_);
  v381 = *(_QWORD *)(a2 + 20);
LABEL_870:
  if ((v381 & 0x100) == 0)
    goto LABEL_907;
  v582 = MTLAddBoundsCheckPipelineToPM(llvm::legacy::PassManager &,MTLBoundsCheck::Options const&,MTLBoundsCheck::Statistics *,MTLBoundsCheck::SerializedData *)::printPasses;
  std::string::basic_string[abi:ne180100]<0>(&v811, "++++++++++++++++++ ");
  std::string::basic_string[abi:ne180100](&__p, "MTLFoldExpansionPass", 0x14uLL);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v583 = &__p;
  else
    v583 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v584 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v584 = __p.__r_.__value_.__l.__size_;
  v585 = std::string::append(&v811, (const std::string::value_type *)v583, v584);
  v586 = std::string::append(v585, " ++++++++++++++++++\n");
  if (SHIBYTE(v586->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v813, v586->__r_.__value_.__l.__data_, v586->__r_.__value_.__l.__size_);
  }
  else
  {
    v587 = *(_OWORD *)&v586->__r_.__value_.__l.__data_;
    v813.__r_.__value_.__r.__words[2] = v586->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v813.__r_.__value_.__l.__data_ = v587;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v811.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\x1B[1;33m------------------ ");
  std::string::basic_string[abi:ne180100](&__dst, "MTLFoldExpansionPass", 0x14uLL);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v588 = &__dst;
  else
    v588 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v589 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v589 = __dst.__r_.__value_.__l.__size_;
  v590 = std::string::append(&__p, (const std::string::value_type *)v588, v589);
  v591 = std::string::append(v590, " ------------------\x1B[0m\n");
  if (SHIBYTE(v591->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v811, v591->__r_.__value_.__l.__data_, v591->__r_.__value_.__l.__size_);
  }
  else
  {
    v592 = *(_OWORD *)&v591->__r_.__value_.__l.__data_;
    v811.__r_.__value_.__r.__words[2] = v591->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v811.__r_.__value_.__l.__data_ = v592;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!v582)
      goto LABEL_900;
    goto LABEL_899;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v582)
  {
LABEL_899:
    v593 = llvm::createBarrierNoopPass((llvm *)v591);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v593);
    v594 = llvm::createVerifierPass((llvm *)1);
    v595 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v594);
    v596 = llvm::createBarrierNoopPass(v595);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v596);
  }
LABEL_900:
  v597 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, MTLFoldExpansionPass);
  if (v582)
  {
    v598 = llvm::createBarrierNoopPass(v597);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v598);
    v599 = operator new();
    DumpModulePass::DumpModulePass(v599, "MTLFoldExpansionPass", 0x14uLL);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v599);
    v600 = llvm::createVerifierPass((llvm *)1);
    v601 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v600);
    v602 = llvm::createBarrierNoopPass(v601);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v602);
  }
  if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v811.__r_.__value_.__l.__data_);
  if (SHIBYTE(v813.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v813.__r_.__value_.__l.__data_);
  v381 = *(_QWORD *)(a2 + 20);
LABEL_907:
  if ((v381 & 0x200000) == 0)
    goto LABEL_943;
  v603 = MTLAddBoundsCheckPipelineToPM(llvm::legacy::PassManager &,MTLBoundsCheck::Options const&,MTLBoundsCheck::Statistics *,MTLBoundsCheck::SerializedData *)::printPasses;
  std::string::basic_string[abi:ne180100]<0>(&v811, "++++++++++++++++++ ");
  std::string::basic_string[abi:ne180100](&__p, "19_TextureCheck", 0xFuLL);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v604 = &__p;
  else
    v604 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v605 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v605 = __p.__r_.__value_.__l.__size_;
  v606 = std::string::append(&v811, (const std::string::value_type *)v604, v605);
  v607 = std::string::append(v606, " ++++++++++++++++++\n");
  if (SHIBYTE(v607->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v813, v607->__r_.__value_.__l.__data_, v607->__r_.__value_.__l.__size_);
  }
  else
  {
    v608 = *(_OWORD *)&v607->__r_.__value_.__l.__data_;
    v813.__r_.__value_.__r.__words[2] = v607->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v813.__r_.__value_.__l.__data_ = v608;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v811.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\x1B[1;33m------------------ ");
  std::string::basic_string[abi:ne180100](&__dst, "19_TextureCheck", 0xFuLL);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v609 = &__dst;
  else
    v609 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v610 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v610 = __dst.__r_.__value_.__l.__size_;
  v611 = std::string::append(&__p, (const std::string::value_type *)v609, v610);
  v612 = std::string::append(v611, " ------------------\x1B[0m\n");
  if (SHIBYTE(v612->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v811, v612->__r_.__value_.__l.__data_, v612->__r_.__value_.__l.__size_);
  }
  else
  {
    v613 = *(_OWORD *)&v612->__r_.__value_.__l.__data_;
    v811.__r_.__value_.__r.__words[2] = v612->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v811.__r_.__value_.__l.__data_ = v613;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!v603)
      goto LABEL_937;
    goto LABEL_936;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v603)
  {
LABEL_936:
    v614 = llvm::createBarrierNoopPass((llvm *)v612);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v614);
    v615 = llvm::createVerifierPass((llvm *)1);
    v616 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v615);
    v617 = llvm::createBarrierNoopPass(v616);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v617);
  }
LABEL_937:
  v618 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v800);
  if (v603)
  {
    v619 = llvm::createBarrierNoopPass(v618);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v619);
    v620 = operator new();
    DumpModulePass::DumpModulePass(v620, "19_TextureCheck", 0xFuLL);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v620);
    v621 = llvm::createVerifierPass((llvm *)1);
    v622 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v621);
    v623 = llvm::createBarrierNoopPass(v622);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v623);
  }
  if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v811.__r_.__value_.__l.__data_);
  if (SHIBYTE(v813.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v813.__r_.__value_.__l.__data_);
LABEL_943:
  v624 = MTLAddBoundsCheckPipelineToPM(llvm::legacy::PassManager &,MTLBoundsCheck::Options const&,MTLBoundsCheck::Statistics *,MTLBoundsCheck::SerializedData *)::printPasses;
  std::string::basic_string[abi:ne180100]<0>(&v811, "++++++++++++++++++ ");
  std::string::basic_string[abi:ne180100](&__p, "20_TLSArg", 9uLL);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v625 = &__p;
  else
    v625 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v626 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v626 = __p.__r_.__value_.__l.__size_;
  v627 = std::string::append(&v811, (const std::string::value_type *)v625, v626);
  v628 = std::string::append(v627, " ++++++++++++++++++\n");
  if (SHIBYTE(v628->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v813, v628->__r_.__value_.__l.__data_, v628->__r_.__value_.__l.__size_);
  }
  else
  {
    v629 = *(_OWORD *)&v628->__r_.__value_.__l.__data_;
    v813.__r_.__value_.__r.__words[2] = v628->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v813.__r_.__value_.__l.__data_ = v629;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v811.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\x1B[1;33m------------------ ");
  std::string::basic_string[abi:ne180100](&__dst, "20_TLSArg", 9uLL);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v630 = &__dst;
  else
    v630 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v631 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v631 = __dst.__r_.__value_.__l.__size_;
  v632 = std::string::append(&__p, (const std::string::value_type *)v630, v631);
  v633 = std::string::append(v632, " ------------------\x1B[0m\n");
  if (SHIBYTE(v633->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v811, v633->__r_.__value_.__l.__data_, v633->__r_.__value_.__l.__size_);
  }
  else
  {
    v634 = *(_OWORD *)&v633->__r_.__value_.__l.__data_;
    v811.__r_.__value_.__r.__words[2] = v633->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v811.__r_.__value_.__l.__data_ = v634;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v624)
      goto LABEL_972;
    goto LABEL_971;
  }
  if (v624)
  {
LABEL_971:
    v635 = llvm::createBarrierNoopPass((llvm *)v633);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v635);
    v636 = llvm::createVerifierPass((llvm *)1);
    v637 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v636);
    v638 = llvm::createBarrierNoopPass(v637);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v638);
  }
LABEL_972:
  v639 = (llvm *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 16))(a1, MTLGlobalTLSArgumentPass);
  if (v624)
  {
    v640 = llvm::createBarrierNoopPass(v639);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v640);
    v641 = operator new();
    DumpModulePass::DumpModulePass(v641, "20_TLSArg", 9uLL);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v641);
    v642 = llvm::createVerifierPass((llvm *)1);
    v643 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v642);
    v644 = llvm::createBarrierNoopPass(v643);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v644);
  }
  if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v811.__r_.__value_.__l.__data_);
  if (SHIBYTE(v813.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v813.__r_.__value_.__l.__data_);
  v645 = *(_QWORD *)(a2 + 20);
  if ((v645 & 0x10000) != 0)
  {
    v646 = MTLAddBoundsCheckPipelineToPM(llvm::legacy::PassManager &,MTLBoundsCheck::Options const&,MTLBoundsCheck::Statistics *,MTLBoundsCheck::SerializedData *)::printPasses;
    std::string::basic_string[abi:ne180100]<0>(&v811, "++++++++++++++++++ ");
    std::string::basic_string[abi:ne180100](&__p, "21_MTLABConversion", 0x12uLL);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v647 = &__p;
    else
      v647 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v648 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v648 = __p.__r_.__value_.__l.__size_;
    v649 = std::string::append(&v811, (const std::string::value_type *)v647, v648);
    v650 = std::string::append(v649, " ++++++++++++++++++\n");
    if (SHIBYTE(v650->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v813, v650->__r_.__value_.__l.__data_, v650->__r_.__value_.__l.__size_);
    }
    else
    {
      v651 = *(_OWORD *)&v650->__r_.__value_.__l.__data_;
      v813.__r_.__value_.__r.__words[2] = v650->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v813.__r_.__value_.__l.__data_ = v651;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v811.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&__p, "\x1B[1;33m------------------ ");
    std::string::basic_string[abi:ne180100](&__dst, "21_MTLABConversion", 0x12uLL);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v652 = &__dst;
    else
      v652 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v653 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      v653 = __dst.__r_.__value_.__l.__size_;
    v654 = std::string::append(&__p, (const std::string::value_type *)v652, v653);
    v655 = std::string::append(v654, " ------------------\x1B[0m\n");
    if (SHIBYTE(v655->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v811, v655->__r_.__value_.__l.__data_, v655->__r_.__value_.__l.__size_);
    }
    else
    {
      v656 = *(_OWORD *)&v655->__r_.__value_.__l.__data_;
      v811.__r_.__value_.__r.__words[2] = v655->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v811.__r_.__value_.__l.__data_ = v656;
    }
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (!v646)
      {
LABEL_1008:
        v661 = (llvm *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 16))(a1, MTLArgumentBufferConversionPass);
        if (v646)
        {
          v662 = llvm::createBarrierNoopPass(v661);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v662);
          v663 = operator new();
          DumpModulePass::DumpModulePass(v663, "21_MTLABConversion", 0x12uLL);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v663);
          v664 = llvm::createVerifierPass((llvm *)1);
          v665 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v664);
          v666 = llvm::createBarrierNoopPass(v665);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v666);
        }
        if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v811.__r_.__value_.__l.__data_);
        if (SHIBYTE(v813.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v813.__r_.__value_.__l.__data_);
        v645 = *(_QWORD *)(a2 + 20);
        goto LABEL_1015;
      }
    }
    else if (!v646)
    {
      goto LABEL_1008;
    }
    v657 = llvm::createBarrierNoopPass((llvm *)v655);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v657);
    v658 = llvm::createVerifierPass((llvm *)1);
    v659 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v658);
    v660 = llvm::createBarrierNoopPass(v659);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v660);
    goto LABEL_1008;
  }
LABEL_1015:
  if ((v645 & 0x800) == 0)
    goto LABEL_1056;
  v667 = MTLAddBoundsCheckPipelineToPM(llvm::legacy::PassManager &,MTLBoundsCheck::Options const&,MTLBoundsCheck::Statistics *,MTLBoundsCheck::SerializedData *)::printPasses;
  std::string::basic_string[abi:ne180100]<0>(&v813, "++++++++++++++++++ ");
  std::string::basic_string[abi:ne180100](&v811, "Optimization#4", 0xEuLL);
  if ((v811.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v668 = &v811;
  else
    v668 = (std::string *)v811.__r_.__value_.__r.__words[0];
  if ((v811.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v669 = HIBYTE(v811.__r_.__value_.__r.__words[2]);
  else
    v669 = v811.__r_.__value_.__l.__size_;
  v670 = std::string::append(&v813, (const std::string::value_type *)v668, v669);
  v671 = std::string::append(v670, " ++++++++++++++++++\n");
  if (SHIBYTE(v671->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, v671->__r_.__value_.__l.__data_, v671->__r_.__value_.__l.__size_);
  }
  else
  {
    v672 = *(_OWORD *)&v671->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v671->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v672;
  }
  if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v811.__r_.__value_.__l.__data_);
  if (SHIBYTE(v813.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v813.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v813, "\x1B[1;33m------------------ ");
  std::string::basic_string[abi:ne180100](&v811, "Optimization#4", 0xEuLL);
  if ((v811.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v673 = &v811;
  else
    v673 = (std::string *)v811.__r_.__value_.__r.__words[0];
  if ((v811.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v674 = HIBYTE(v811.__r_.__value_.__r.__words[2]);
  else
    v674 = v811.__r_.__value_.__l.__size_;
  v675 = std::string::append(&v813, (const std::string::value_type *)v673, v674);
  v676 = std::string::append(v675, " ------------------\x1B[0m\n");
  if (SHIBYTE(v676->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&__dst, v676->__r_.__value_.__l.__data_, v676->__r_.__value_.__l.__size_);
  }
  else
  {
    v677 = *(_OWORD *)&v676->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v676->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v677;
  }
  if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v811.__r_.__value_.__l.__data_);
  if (SHIBYTE(v813.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v813.__r_.__value_.__l.__data_);
    if (!v667)
      goto LABEL_1045;
    goto LABEL_1044;
  }
  if (v667)
  {
LABEL_1044:
    v678 = llvm::createBarrierNoopPass((llvm *)v676);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v678);
    v679 = llvm::createVerifierPass((llvm *)1);
    v680 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v679);
    v681 = llvm::createBarrierNoopPass(v680);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v681);
  }
LABEL_1045:
  v811.__r_.__value_.__r.__words[0] = 0x100000000000001;
  *(_OWORD *)&v811.__r_.__value_.__r.__words[1] = 0x1010000uLL;
  v814 = 0;
  v682 = llvm::createCFGSimplificationPass();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v682);
  v683 = v814;
  if (v814 == &v813)
  {
    v684 = 4;
    v683 = &v813;
    goto LABEL_1049;
  }
  if (v814)
  {
    v684 = 5;
LABEL_1049:
    (*(void (**)(void))(v683->__r_.__value_.__r.__words[0] + 8 * v684))();
  }
  v685 = llvm::createEarlyCSEPass(0);
  v686 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v685);
  v687 = llvm::createInstSimplifyLegacyPass(v686);
  v688 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v687);
  v689 = llvm::createInstructionCombiningPass(v688);
  v690 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v689);
  v691 = llvm::createAggressiveDCEPass(v690);
  v692 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v691);
  if (v667)
  {
    v693 = llvm::createBarrierNoopPass(v692);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v693);
    v694 = operator new();
    DumpModulePass::DumpModulePass(v694, "Optimization#4", 0xEuLL);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v694);
    v695 = llvm::createVerifierPass((llvm *)1);
    v696 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v695);
    v697 = llvm::createBarrierNoopPass(v696);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v697);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_1056:
  v698 = MTLAddBoundsCheckPipelineToPM(llvm::legacy::PassManager &,MTLBoundsCheck::Options const&,MTLBoundsCheck::Statistics *,MTLBoundsCheck::SerializedData *)::printPasses;
  std::string::basic_string[abi:ne180100]<0>(&v811, "++++++++++++++++++ ");
  std::string::basic_string[abi:ne180100](&__p, "22_TLSEmulation", 0xFuLL);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v699 = &__p;
  else
    v699 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v700 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v700 = __p.__r_.__value_.__l.__size_;
  v701 = std::string::append(&v811, (const std::string::value_type *)v699, v700);
  v702 = std::string::append(v701, " ++++++++++++++++++\n");
  if (SHIBYTE(v702->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v813, v702->__r_.__value_.__l.__data_, v702->__r_.__value_.__l.__size_);
  }
  else
  {
    v703 = *(_OWORD *)&v702->__r_.__value_.__l.__data_;
    v813.__r_.__value_.__r.__words[2] = v702->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v813.__r_.__value_.__l.__data_ = v703;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v811.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\x1B[1;33m------------------ ");
  std::string::basic_string[abi:ne180100](&__dst, "22_TLSEmulation", 0xFuLL);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v704 = &__dst;
  else
    v704 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v705 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v705 = __dst.__r_.__value_.__l.__size_;
  v706 = std::string::append(&__p, (const std::string::value_type *)v704, v705);
  v707 = std::string::append(v706, " ------------------\x1B[0m\n");
  if (SHIBYTE(v707->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v811, v707->__r_.__value_.__l.__data_, v707->__r_.__value_.__l.__size_);
  }
  else
  {
    v708 = *(_OWORD *)&v707->__r_.__value_.__l.__data_;
    v811.__r_.__value_.__r.__words[2] = v707->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v811.__r_.__value_.__l.__data_ = v708;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v698)
      goto LABEL_1085;
    goto LABEL_1084;
  }
  if (v698)
  {
LABEL_1084:
    v709 = llvm::createBarrierNoopPass((llvm *)v707);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v709);
    v710 = llvm::createVerifierPass((llvm *)1);
    v711 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v710);
    v712 = llvm::createBarrierNoopPass(v711);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v712);
  }
LABEL_1085:
  v713 = llvm::createEarlyCSEPass(0);
  v714 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v713);
  v715 = llvm::createAggressiveDCEPass(v714);
  v716 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v715);
  v717 = llvm::createGlobalDCEPass(v716);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v717);
  MTLGVEmulationPass = createMTLGVEmulationPass((MTLBoundsCheck::SharedPassData *)GlobalSharedPassData);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, MTLGVEmulationPass);
  v719 = operator new();
  *(_QWORD *)(v719 + 8) = 0;
  *(_QWORD *)(v719 + 16) = &CallingConvFixPass::ID;
  *(_DWORD *)(v719 + 24) = 2;
  *(_QWORD *)v719 = &off_25111E8E8;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v720 = llvm::createEarlyCSEPass(0);
  v721 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v720);
  v722 = llvm::createAggressiveDCEPass(v721);
  v723 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v722);
  v724 = llvm::createGlobalDCEPass(v723);
  v725 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v724);
  if (v698)
  {
    v726 = llvm::createBarrierNoopPass(v725);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v726);
    v727 = operator new();
    DumpModulePass::DumpModulePass(v727, "22_TLSEmulation", 0xFuLL);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v727);
    v728 = llvm::createVerifierPass((llvm *)1);
    v729 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v728);
    v730 = llvm::createBarrierNoopPass(v729);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v730);
  }
  if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v811.__r_.__value_.__l.__data_);
  if (SHIBYTE(v813.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v813.__r_.__value_.__l.__data_);
  v731 = MTLAddBoundsCheckPipelineToPM(llvm::legacy::PassManager &,MTLBoundsCheck::Options const&,MTLBoundsCheck::Statistics *,MTLBoundsCheck::SerializedData *)::printPasses;
  std::string::basic_string[abi:ne180100]<0>(&v813, "++++++++++++++++++ ");
  std::string::basic_string[abi:ne180100](&v811, "23_cleanup", 0xAuLL);
  if ((v811.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v732 = &v811;
  else
    v732 = (std::string *)v811.__r_.__value_.__r.__words[0];
  if ((v811.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v733 = HIBYTE(v811.__r_.__value_.__r.__words[2]);
  else
    v733 = v811.__r_.__value_.__l.__size_;
  v734 = std::string::append(&v813, (const std::string::value_type *)v732, v733);
  v735 = std::string::append(v734, " ++++++++++++++++++\n");
  if (SHIBYTE(v735->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v808, v735->__r_.__value_.__l.__data_, v735->__r_.__value_.__l.__size_);
  }
  else
  {
    v736 = *(_OWORD *)&v735->__r_.__value_.__l.__data_;
    v808.__r_.__value_.__r.__words[2] = v735->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v808.__r_.__value_.__l.__data_ = v736;
  }
  if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v811.__r_.__value_.__l.__data_);
  if (SHIBYTE(v813.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v813.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v813, "\x1B[1;33m------------------ ");
  std::string::basic_string[abi:ne180100](&v811, "23_cleanup", 0xAuLL);
  if ((v811.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v737 = &v811;
  else
    v737 = (std::string *)v811.__r_.__value_.__r.__words[0];
  if ((v811.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v738 = HIBYTE(v811.__r_.__value_.__r.__words[2]);
  else
    v738 = v811.__r_.__value_.__l.__size_;
  v739 = std::string::append(&v813, (const std::string::value_type *)v737, v738);
  v740 = std::string::append(v739, " ------------------\x1B[0m\n");
  if (SHIBYTE(v740->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v807, v740->__r_.__value_.__l.__data_, v740->__r_.__value_.__l.__size_);
  }
  else
  {
    v741 = *(_OWORD *)&v740->__r_.__value_.__l.__data_;
    v807.__r_.__value_.__r.__words[2] = v740->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v807.__r_.__value_.__l.__data_ = v741;
  }
  if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v811.__r_.__value_.__l.__data_);
  if (SHIBYTE(v813.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v813.__r_.__value_.__l.__data_);
    if (!v731)
      goto LABEL_1120;
    goto LABEL_1119;
  }
  if (v731)
  {
LABEL_1119:
    v742 = llvm::createBarrierNoopPass((llvm *)v740);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v742);
    v743 = llvm::createVerifierPass((llvm *)1);
    v744 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v743);
    v745 = llvm::createBarrierNoopPass(v744);
    v740 = (std::string *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v745);
  }
LABEL_1120:
  v746 = *(_QWORD *)(a2 + 20);
  if ((v746 & 0x800000) != 0)
  {
    v747 = operator new();
    *(_QWORD *)(v747 + 8) = 0;
    *(_QWORD *)(v747 + 16) = &IndirectNameRenamePass::ID;
    *(_DWORD *)(v747 + 24) = 4;
    *(_QWORD *)v747 = &off_25111E5C8;
    v740 = (std::string *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v746 = *(_QWORD *)(a2 + 20);
  }
  if ((v746 & 0x10) != 0)
    FunctionInliningPass = llvm::createFunctionInliningPass((llvm *)v740);
  else
    FunctionInliningPass = llvm::createAlwaysInlinerLegacyPass((llvm *)1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, FunctionInliningPass);
  v749 = llvm::createEarlyCSEPass((llvm *)1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v749);
  __p.__r_.__value_.__r.__words[0] = 0x100000000000001;
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0x1010000uLL;
  v814 = 0;
  v750 = llvm::createCFGSimplificationPass();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v750);
  v751 = (llvm *)v814;
  if (v814 == &v813)
  {
    v752 = 4;
    v751 = (llvm *)&v813;
  }
  else
  {
    if (!v814)
      goto LABEL_1130;
    v752 = 5;
  }
  v751 = (llvm *)(*(uint64_t (**)(void))(*(_QWORD *)v751 + 8 * v752))();
LABEL_1130:
  v753 = llvm::createInstSimplifyLegacyPass(v751);
  v754 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v753);
  v755 = llvm::createNewGVNPass(v754);
  v756 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v755);
  v757 = llvm::createPromoteMemoryToRegisterPass(v756);
  v758 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v757);
  v759 = llvm::createInstSimplifyLegacyPass(v758);
  v760 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v759);
  v761 = llvm::createInstructionCombiningPass(v760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v761);
  __dst.__r_.__value_.__r.__words[0] = 0x100000000000001;
  *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0x1010000uLL;
  v812 = 0;
  v762 = llvm::createCFGSimplificationPass();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v762);
  v763 = v812;
  if (v812 == &v811)
  {
    v764 = 4;
    v763 = &v811;
  }
  else
  {
    if (!v812)
      goto LABEL_1135;
    v764 = 5;
  }
  (*(void (**)(void))(v763->__r_.__value_.__r.__words[0] + 8 * v764))();
LABEL_1135:
  if ((*(_BYTE *)(a2 + 23) & 0x10) != 0)
  {
    v765 = llvm::createJumpThreadingPass(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v765);
  }
  v766 = llvm::createEarlyCSEPass(0);
  v767 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v766);
  v768 = llvm::createAggressiveDCEPass(v767);
  v769 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v768);
  v770 = llvm::createGlobalDCEPass(v769);
  v771 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v770);
  if (v731)
  {
    v772 = llvm::createBarrierNoopPass(v771);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v772);
    v773 = operator new();
    DumpModulePass::DumpModulePass(v773, "23_cleanup", 0xAuLL);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v773);
    v774 = llvm::createVerifierPass((llvm *)1);
    v775 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v774);
    v776 = llvm::createBarrierNoopPass(v775);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v776);
  }
  if (SHIBYTE(v807.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v807.__r_.__value_.__l.__data_);
  if (SHIBYTE(v808.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v808.__r_.__value_.__l.__data_);
  if (MTLAddBoundsCheckPipelineToPM(llvm::legacy::PassManager &,MTLBoundsCheck::Options const&,MTLBoundsCheck::Statistics *,MTLBoundsCheck::SerializedData *)::printPasses)
  {
    std::string::basic_string[abi:ne180100]<0>(&v811, "++++++++++++++++++ ");
    std::string::basic_string[abi:ne180100](&__p, "output", 6uLL);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v777 = &__p;
    else
      v777 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v778 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v778 = __p.__r_.__value_.__l.__size_;
    v779 = std::string::append(&v811, (const std::string::value_type *)v777, v778);
    v780 = std::string::append(v779, " ++++++++++++++++++\n");
    if (SHIBYTE(v780->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v813, v780->__r_.__value_.__l.__data_, v780->__r_.__value_.__l.__size_);
    }
    else
    {
      v781 = *(_OWORD *)&v780->__r_.__value_.__l.__data_;
      v813.__r_.__value_.__r.__words[2] = v780->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v813.__r_.__value_.__l.__data_ = v781;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v811.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&__p, "\x1B[1;33m------------------ ");
    std::string::basic_string[abi:ne180100](&__dst, "output", 6uLL);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v782 = &__dst;
    else
      v782 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v783 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      v783 = __dst.__r_.__value_.__l.__size_;
    v784 = std::string::append(&__p, (const std::string::value_type *)v782, v783);
    v785 = std::string::append(v784, " ------------------\x1B[0m\n");
    if (SHIBYTE(v785->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v811, v785->__r_.__value_.__l.__data_, v785->__r_.__value_.__l.__size_);
    }
    else
    {
      v786 = *(_OWORD *)&v785->__r_.__value_.__l.__data_;
      v811.__r_.__value_.__r.__words[2] = v785->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v811.__r_.__value_.__l.__data_ = v786;
    }
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v787 = llvm::createBarrierNoopPass((llvm *)v785);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v787);
    v788 = llvm::createVerifierPass((llvm *)1);
    v789 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v788);
    v790 = llvm::createBarrierNoopPass(v789);
    v791 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v790);
    v792 = llvm::createBarrierNoopPass(v791);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v792);
    v793 = operator new();
    DumpModulePass::DumpModulePass(v793, "output", 6uLL);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v793);
    v794 = llvm::createVerifierPass((llvm *)1);
    v795 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v794);
    v796 = llvm::createBarrierNoopPass(v795);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v796);
    if (SHIBYTE(v811.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v811.__r_.__value_.__l.__data_);
    if (SHIBYTE(v813.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v813.__r_.__value_.__l.__data_);
  }
}

void sub_240FC262C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;

  MEMORY[0x24268D8F0](v47, 0x10F3C404E915695);
  if (a40 < 0)
    operator delete(__p);
  if (a47 < 0)
    operator delete(a42);
  _Unwind_Resume(a1);
}

uint64_t ___Z29MTLAddBoundsCheckPipelineToPMRN4llvm6legacy11PassManagerERKN14MTLBoundsCheck7OptionsEPNS3_10StatisticsEPNS3_14SerializedDataE_block_invoke()
{
  char *v0;
  uint64_t result;

  v0 = getenv("MTL_BOUNDS_PRINT_PASSES");
  if (!v0)
    v0 = "0";
  result = strtol(v0, 0, 0);
  MTLAddBoundsCheckPipelineToPM(llvm::legacy::PassManager &,MTLBoundsCheck::Options const&,MTLBoundsCheck::Statistics *,MTLBoundsCheck::SerializedData *)::printPasses = result != 0;
  return result;
}

_QWORD *std::string::__init_with_size[abi:ne180100]<char *,char *>(_QWORD *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *v4 = result;
    v4 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v4 = v10;
    v4 = (_QWORD *)((char *)v4 + 1);
  }
  *(_BYTE *)v4 = 0;
  return result;
}

void llvm::DataLayout::getTypeSizeInBits(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_240FC2D44()
{
  return 64;
}

unint64_t llvm::DataLayout::getTypeAllocSize(llvm::DataLayout *this, llvm::Type *a2)
{
  unint64_t v4;
  unint64_t ABITypeAlignment;

  v4 = (unint64_t)(llvm::DataLayout::getTypeSizeInBits() + 7) >> 3;
  ABITypeAlignment = llvm::DataLayout::getABITypeAlignment(this, a2);
  return (ABITypeAlignment + v4 - 1) / ABITypeAlignment * ABITypeAlignment;
}

void IndirectNameRenamePass::~IndirectNameRenamePass(IndirectNameRenamePass *this)
{
  llvm::Pass::~Pass(this);
  JUMPOUT(0x24268D8F0);
}

uint64_t IndirectNameRenamePass::runOnModule(IndirectNameRenamePass *this, llvm::Module *a2)
{
  char *v2;
  char *v3;
  int v5;
  llvm::Function *v6;

  v2 = (char *)a2 + 24;
  v3 = (char *)*((_QWORD *)a2 + 4);
  if (v3 == (char *)a2 + 24)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = 0;
    do
    {
      if (v3)
        v6 = (llvm::Function *)(v3 - 56);
      else
        v6 = 0;
      v5 |= IndirectNameRenamePass::runOnFunction(this, v6);
      v3 = (char *)*((_QWORD *)v3 + 1);
    }
    while (v3 != v2);
  }
  return v5 & 1;
}

uint64_t IndirectNameRenamePass::runOnFunction(IndirectNameRenamePass *this, llvm::Function *a2)
{
  uint64_t Name;
  unint64_t v3;
  BOOL v4;
  void *__p[2];
  char v8;
  void **v9;
  __int16 v10;

  Name = llvm::Value::getName(a2);
  if (v3 < 0x11)
    return 0;
  v4 = *(_QWORD *)Name == 0x69646E692E6C746DLL && *(_QWORD *)(Name + 8) == 0x6D656D5F74636572;
  if (!v4 || *(_BYTE *)(Name + 16) != 46)
    return 0;
  std::string::basic_string[abi:ne180100](__p, (void *)(Name + 17), v3 - 17);
  v10 = 260;
  v9 = __p;
  llvm::Value::setName();
  if (v8 < 0)
    operator delete(__p[0]);
  return 1;
}

void sub_240FC3030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__hash_table<llvm::Value *,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,std::allocator<llvm::Value *>>::~__hash_table((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<llvm::Value *,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,std::allocator<llvm::Value *>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void MTLVertexFetchAnalysisPass::~MTLVertexFetchAnalysisPass(MTLVertexFetchAnalysisPass *this)
{
  char *v2;

  *(_QWORD *)this = &off_25111E050;
  v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
}

{
  char *v2;

  *(_QWORD *)this = &off_25111E050;
  v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x24268D8F0);
}

uint64_t MTLVertexFetchAnalysisPass::runOnModule(MTLVertexFetchAnalysisPass *this, llvm::Module *a2)
{
  BOOL v3;
  uint64_t result;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t j;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  char v14;
  __int16 v15;
  char v16;
  _DWORD v17[4];
  char v18;

  MTLBoundsCheck::getMetalMetadata(a2, (uint64_t)v17);
  if (v18)
    v3 = v17[0] == 0;
  else
    v3 = 0;
  if (!v3 || (*(_BYTE *)(*((_QWORD *)this + 4) + 20) & 0x80) == 0)
    return 0;
  result = llvm::Module::getFunction();
  if (result)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v16 = 0;
    v15 = 257;
    v5 = result + 72;
    for (i = *(_QWORD *)(result + 80); i != v5; i = *(_QWORD *)(i + 8))
    {
      v7 = i - 24;
      if (!i)
        v7 = 0;
      v8 = v7 + 40;
      for (j = *(_QWORD *)(v7 + 48); j != v8; j = *(_QWORD *)(j + 8))
      {
        if (j)
          v10 = j - 24;
        else
          v10 = 0;
        if (*(_BYTE *)(v10 + 16) == 60)
          MetalModulePass::cacheStaticBoundsInfo((uint64_t)this, v10, (uint64_t)&v11);
      }
    }
    return 1;
  }
  return result;
}

void MTLGEPAnalysisPass::~MTLGEPAnalysisPass(MTLGEPAnalysisPass *this)
{
  char *v2;

  *(_QWORD *)this = &off_25111E050;
  v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
}

{
  char *v2;

  *(_QWORD *)this = &off_25111E050;
  v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x24268D8F0);
}

BOOL MTLGEPAnalysisPass::runOnModule(MTLGEPAnalysisPass *this, llvm::Module *a2)
{
  int v4;
  uint64_t v5;
  char *v6;
  uint64_t i;
  llvm::Function *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  llvm::Value *v16;
  _QWORD *String;
  uint64_t v18;
  BOOL v19;
  int LocationIndex;
  _BYTE v23[8];
  uint64_t v24;
  unsigned __int8 v25;
  _BYTE v26[12];
  int v27;
  char v28;
  char v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;

  MTLBoundsCheck::getMetalMetadata(a2, (uint64_t)v23);
  v4 = v25;
  if (v25)
  {
    v5 = v24;
    std::__hash_table<std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>>>::clear(*((_QWORD *)this + 8) + 168);
    MTLGEPAnalysisPass::trackGlobals(this);
    v6 = (char *)a2 + 24;
    for (i = *((_QWORD *)a2 + 4); (char *)i != v6; i = *(_QWORD *)(i + 8))
    {
      if (i)
        v8 = (llvm::Function *)(i - 56);
      else
        v8 = 0;
      if ((llvm::GlobalValue::isDeclaration(v8) & 1) == 0)
      {
        MTLGEPAnalysisPass::trackArguments(this, v8);
        MTLGEPAnalysisPass::trackAllocas((llvm::DataLayout **)this, v8);
        if ((*(_BYTE *)(*((_QWORD *)this + 4) + 21) & 1) != 0)
        {
          v9 = *((_QWORD *)this + 24);
          v32 = *((_QWORD *)this + 8);
          v33 = v9;
          llvm::InstVisitor<MTLGEPAnalysisPass::BacktrackVisitor,void>::visit((uint64_t)v26, (uint64_t)v8);
        }
      }
    }
    v10 = (_QWORD *)(v5 - 8 * *(unsigned int *)(v5 + 8));
    v11 = *(_QWORD *)(*v10 + 128);
    if (*(_QWORD *)(v11 + 96))
    {
      v12 = 0;
      v13 = 0;
      v14 = v10[2];
      do
      {
        v15 = *(_QWORD *)(v14 - 8 * *(unsigned int *)(v14 + 8) + 8 * v13);
        if ((*(_WORD *)(v11 + 18) & 1) != 0)
          llvm::Function::BuildLazyArguments((llvm::Function *)v11);
        v16 = (llvm::Value *)(*(_QWORD *)(v11 + 88) + v12);
        MetalModulePass::getStaticBoundsInfo(this, v16, (uint64_t)v26);
        if (v31)
        {
          String = (_QWORD *)llvm::MDString::getString(*(llvm::MDString **)(v15 - 8 * *(unsigned int *)(v15 + 8) + 8));
          if (v18 == 10)
          {
            if (!memcmp(String, "air.buffer", 0xAuLL))
            {
              LocationIndex = MTLBoundsCheck::getLocationIndex(v15);
              if (!v28)
                v28 = 1;
              v27 = LocationIndex;
            }
          }
          else if (v18 == 19)
          {
            v19 = *String == 0x69646E692E726961 && String[1] == 0x6675625F74636572;
            if (v19 && *(_QWORD *)((char *)String + 11) == 0x7265666675625F74)
            {
              v29 = 1;
              v30 = 1;
            }
          }
          MetalModulePass::cacheStaticBoundsInfo((uint64_t)this, (uint64_t)v16, (uint64_t)v26);
        }
        ++v13;
        v12 += 40;
      }
      while (*(_QWORD *)(v11 + 96) > v13);
    }
  }
  return v4 != 0;
}

void MTLGEPAnalysisPass::trackGlobals(MTLGEPAnalysisPass *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  llvm::Type **v5;
  unsigned int v6;
  unsigned int v7;
  llvm::Type **v8;
  int v9;
  char v10;
  char v11;
  __int16 v12;
  char v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  int v17;
  _BYTE v18[64];

  v1 = *((_QWORD *)this + 6);
  v2 = v1 + 8;
  v3 = *(_QWORD *)(v1 + 16);
  if (v3 != v1 + 8)
  {
    do
    {
      if (v3)
        v5 = (llvm::Type **)(v3 - 56);
      else
        v5 = 0;
      v14 = v18;
      v15 = v18;
      v16 = 8;
      v17 = 0;
      v6 = *((_DWORD *)*v5 + 2);
      if (v6 == 15)
      {
        if ((v6 & 0xFE) == 0x12)
          v6 = *(_DWORD *)(**((_QWORD **)*v5 + 2) + 8);
        if ((v6 >> 8) - 1 <= 1)
        {
          v9 = 0;
          v10 = 0;
          v11 = 0;
          v12 = 256;
          v13 = 0;
          v7 = (*(_DWORD *)(*((_QWORD *)this + 4) + 20) & 0x100000u) >> 20;
          LOBYTE(v12) = (*(_QWORD *)(*((_QWORD *)this + 4) + 20) & 0x100000) == 0;
          HIBYTE(v12) = v7;
          v8 = v5;
          llvm::DataLayout::getTypeAllocSize(*((llvm::DataLayout **)this + 7), v5[3]);
          v9 = llvm::TypeSize::operator unsigned long long();
          MetalModulePass::cacheStaticBoundsInfo((uint64_t)this, (uint64_t)v5, (uint64_t)&v8);
          MTLGEPAnalysisPass::trackSource(this, (llvm::Value *)v5);
          if (v15 != v14)
            free(v15);
        }
      }
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3 != v2);
  }
}

void sub_240FC3668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  if (a16 != a15)
    free(a16);
  _Unwind_Resume(exception_object);
}

void MTLGEPAnalysisPass::trackArguments(MTLGEPAnalysisPass *this, llvm::Function *a2)
{
  uint64_t v3;
  llvm::Value *v4;
  llvm::Value *v5;
  llvm::Value *v6;
  unsigned int v7;
  _BYTE v8[23];
  char v9;
  _BYTE v10[23];

  v3 = llvm::Function::args(a2);
  if ((llvm::Value *)v3 != v4)
  {
    v5 = (llvm::Value *)v3;
    v6 = v4;
    do
    {
      v7 = *(_DWORD *)(*(_QWORD *)v5 + 8);
      if (v7 == 15)
      {
        if ((v7 & 0xFE) == 0x12)
          v7 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v5 + 16) + 8);
        if ((v7 >> 8) - 1 <= 1)
        {
          MTLGEPAnalysisPass::trackSource(this, v5);
          *(_QWORD *)v10 = 0;
          *(_DWORD *)&v10[8] = 0;
          v10[12] = 0;
          v10[16] = 0;
          *(_WORD *)&v10[20] = 256;
          v10[22] = 0;
          MetalModulePass::getStaticBoundsInfo(this, v5, (uint64_t)v8);
          if (v9)
          {
            *(_OWORD *)v10 = *(_OWORD *)v8;
            *(_QWORD *)&v10[15] = *(_QWORD *)&v8[15];
          }
          *(_QWORD *)v10 = v5;
          *(_DWORD *)&v10[8] = llvm::Argument::getDereferenceableBytes(v5);
          if (!v10[22])
            *(_WORD *)&v10[20] = 256;
          MetalModulePass::cacheStaticBoundsInfo((uint64_t)this, (uint64_t)v5, (uint64_t)v10);
        }
      }
      v5 = (llvm::Value *)((char *)v5 + 40);
    }
    while (v5 != v6);
  }
}

void MTLGEPAnalysisPass::trackAllocas(llvm::DataLayout **this, llvm::Function *a2)
{
  char *v2;
  char *v3;
  char *v5;
  _QWORD *v6;
  _QWORD *i;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  char v12;
  __int16 v13;
  char v14;

  v2 = (char *)a2 + 72;
  v3 = (char *)*((_QWORD *)a2 + 10);
  if (v3 != (char *)a2 + 72)
  {
    do
    {
      v5 = v3 - 24;
      if (!v3)
        v5 = 0;
      v6 = v5 + 40;
      for (i = (_QWORD *)*((_QWORD *)v5 + 6); i != v6; i = (_QWORD *)i[1])
      {
        if (i)
          v8 = (uint64_t)(i - 3);
        else
          v8 = 0;
        if (*(_BYTE *)(v8 + 16) == 59)
        {
          MTLGEPAnalysisPass::trackSource((MTLGEPAnalysisPass *)this, (llvm::Value *)v8);
          v10 = 0;
          v11 = 0;
          v12 = 0;
          v13 = 256;
          v14 = 0;
          v9 = v8;
          llvm::DataLayout::getTypeAllocSize(this[7], *(llvm::Type **)(v8 + 64));
          v10 = llvm::TypeSize::operator unsigned long long();
          v13 = 1;
          MetalModulePass::cacheStaticBoundsInfo((uint64_t)this, v8, (uint64_t)&v9);
        }
      }
      v3 = (char *)*((_QWORD *)v3 + 1);
    }
    while (v3 != v2);
  }
}

void std::__hash_table<std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void MTLGEPAnalysisPass::trackSource(MTLGEPAnalysisPass *this, llvm::Value *a2)
{
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD *v9;
  unsigned int i;
  llvm::Instruction *v11;
  uint64_t v12;
  _QWORD *v13;
  llvm::Instruction *v14;
  unsigned int v15;
  unsigned int v16;
  llvm::Instruction *v17;
  uint64_t v18[2];
  int v19;
  llvm::Value *v20;
  llvm::Instruction *v21;
  _QWORD *v22[3];
  void *v23;
  unsigned int v24;
  _QWORD v25[9];

  v25[8] = *MEMORY[0x24BDAC8D0];
  v20 = a2;
  v22[0] = *((_QWORD **)a2 + 1);
  v22[1] = 0;
  llvm::SmallVector<llvm::User *,8u>::SmallVector<llvm::Value::user_iterator_impl<llvm::User>>(&v23, (uint64_t *)v22);
  v4 = *((unsigned __int8 *)a2 + 16);
  v5 = v4 > 0x3B;
  v6 = (1 << v4) & 0x800000000200008;
  if (!v5 && v6 != 0)
  {
    v8 = *((_QWORD *)this + 8) + 168;
    v22[0] = &v20;
    v9 = std::__hash_table<std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>>>::__emplace_unique_key_args<llvm::Value *,std::piecewise_construct_t const&,std::tuple<llvm::Value * const&>,std::tuple<>>(v8, &v20, (uint64_t)&std::piecewise_construct, v22);
    v22[0] = v20;
    std::__hash_table<llvm::Value *,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,std::allocator<llvm::Value *>>::__emplace_unique_key_args<llvm::Value *,llvm::Value *>((uint64_t)(v9 + 3), v22, v22);
  }
  v18[0] = 0;
  v18[1] = 0;
  v19 = 0;
  for (i = v24; v24; i = v24)
  {
    v17 = 0;
    v11 = (llvm::Instruction *)*((_QWORD *)v23 + i - 1);
    v24 = i - 1;
    v17 = v11;
    v21 = 0;
    v22[0] = v11;
    if ((llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>,llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::LookupBucketFor<llvm::Value *>(v18, v22, &v21) & 1) == 0)
    {
      llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>,llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v18, &v17, (uint64_t)v22);
      v12 = *((_QWORD *)this + 8) + 168;
      v21 = v17;
      v22[0] = &v21;
      v13 = std::__hash_table<std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>>>::__emplace_unique_key_args<llvm::Value *,std::piecewise_construct_t const&,std::tuple<llvm::Value *&&>,std::tuple<>>(v12, &v21, (uint64_t)&std::piecewise_construct, v22);
      v22[0] = v20;
      std::__hash_table<llvm::Value *,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,std::allocator<llvm::Value *>>::__emplace_unique_key_args<llvm::Value *,llvm::Value *>((uint64_t)(v13 + 3), v22, v22);
      v14 = v17;
      v15 = *((unsigned __int8 *)v17 + 16);
      if (!v17 || v15 < 0x1C)
      {
        if (!v17)
          continue;
        if (v15 != 5)
          continue;
        v16 = *((unsigned __int16 *)v17 + 9);
        if (v16 > 0x37 || ((1 << v16) & 0x83800430022000) == 0)
          continue;
        goto LABEL_16;
      }
      if (MTLGEPAnalysisPass::shouldFollowInstruction(this, v15 - 28, v17))
      {
        v14 = v17;
LABEL_16:
        llvm::SmallVectorImpl<llvm::User *>::insert<llvm::Value::user_iterator_impl<llvm::User>,void>((uint64_t)&v23, (uint64_t)v23 + 8 * v24, *((_QWORD *)v14 + 1), 0);
      }
    }
  }
  llvm::DenseMap<llvm::User *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::User *,void>,llvm::detail::DenseSetPair<llvm::User *>>::~DenseMap((uint64_t)v18);
  if (v23 != v25)
    free(v23);
}

void sub_240FC3AFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t *a20,uint64_t a21,uint64_t a22)
{
  if (a20 != &a22)
    free(a20);
  _Unwind_Resume(exception_object);
}

uint64_t MTLGEPAnalysisPass::shouldFollowInstruction(MTLGEPAnalysisPass *this, int a2, llvm::Instruction *a3)
{
  uint64_t result;
  unint64_t *Name;
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  int v9;

  if (a3 && *((_BYTE *)a3 + 16) == 84)
  {
    result = *((_QWORD *)a3 - 4);
    if (!result)
      return result;
    if (*(_BYTE *)(result + 16))
      return 0;
    if (*(_QWORD *)(result + 24) != *((_QWORD *)a3 + 9))
      return 0;
    Name = (unint64_t *)llvm::Value::getName((llvm::Value *)result);
    if (v5 < 7)
      return 0;
    if (*(_DWORD *)Name != 779250017 || *(_DWORD *)((char *)Name + 3) != 1684300078)
    {
      if (v5 < 0xB)
        return 0;
      v7 = 0x626F756E64732E66;
      v8 = bswap64(*Name);
      if (v8 == 0x626F756E64732E66
        && (v7 = 0x6E64732E666F6C64, v8 = bswap64(*(unint64_t *)((char *)Name + 3)), v8 == 0x6E64732E666F6C64))
      {
        v9 = 0;
      }
      else
      {
        v9 = v8 < v7 ? -1 : 1;
      }
      if (v9)
        return 0;
    }
    return 1;
  }
  return (a2 - 13) <= 0x2A && ((0x41C00218011uLL >> (a2 - 13)) & 1) != 0;
}

_QWORD *llvm::SmallVector<llvm::User *,8u>::SmallVector<llvm::Value::user_iterator_impl<llvm::User>>(_QWORD *a1, uint64_t *a2)
{
  *a1 = a1 + 2;
  a1[1] = 0x800000000;
  llvm::SmallVectorImpl<llvm::User *>::append<llvm::Value::user_iterator_impl<llvm::User>,void>((uint64_t)a1, *a2, a2[1]);
  return a1;
}

void sub_240FC3C8C(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  void *v3;

  v3 = v2;
  if (*v1 != v3)
    free(*v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>>>::__emplace_unique_key_args<llvm::Value *,std::piecewise_construct_t const&,std::tuple<llvm::Value * const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[2];
  char v27;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == *a2)
              return v13;
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10)
                v14 %= v10;
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  v15 = a1 + 16;
  v16 = (char *)operator new(0x40uLL);
  v26[0] = v16;
  v26[1] = a1 + 16;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = v9;
  *((_QWORD *)v16 + 2) = **a4;
  *(_OWORD *)(v16 + 24) = 0u;
  *(_OWORD *)(v16 + 40) = 0u;
  *((_DWORD *)v16 + 14) = 1065353216;
  v27 = 1;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>>>::__rehash<true>(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v15;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v24 >= v10)
          v24 %= v10;
      }
      else
      {
        v24 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  v13 = (_QWORD *)v26[0];
  v26[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return v13;
}

void sub_240FC3F38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__hash_table<llvm::Value *,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,std::allocator<llvm::Value *>>::~__hash_table((uint64_t)v2 + 24);
    operator delete(v2);
  }
}

_QWORD *std::__hash_table<llvm::Value *,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,std::allocator<llvm::Value *>>::__emplace_unique_key_args<llvm::Value *,llvm::Value *>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v8;
  i[2] = *a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>>>::__rehash<true>(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_240FC41D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>>>::__emplace_unique_key_args<llvm::Value *,std::piecewise_construct_t const&,std::tuple<llvm::Value *&&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[2];
  char v27;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == *a2)
              return v13;
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10)
                v14 %= v10;
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  v15 = a1 + 16;
  v16 = (char *)operator new(0x40uLL);
  v26[0] = v16;
  v26[1] = a1 + 16;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = v9;
  *((_QWORD *)v16 + 2) = **a4;
  *(_OWORD *)(v16 + 24) = 0u;
  *(_OWORD *)(v16 + 40) = 0u;
  *((_DWORD *)v16 + 14) = 1065353216;
  v27 = 1;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>>>::__rehash<true>(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v15;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v24 >= v10)
          v24 %= v10;
      }
      else
      {
        v24 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  v13 = (_QWORD *)v26[0];
  v26[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return v13;
}

void sub_240FC4470(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t llvm::DenseMap<llvm::User *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::User *,void>,llvm::detail::DenseSetPair<llvm::User *>>::~DenseMap(uint64_t a1)
{
  llvm::deallocate_buffer(*(llvm **)a1, (void *)(8 * *(unsigned int *)(a1 + 16)));
  return a1;
}

uint64_t llvm::Function::args(llvm::Function *this)
{
  uint64_t v2;

  if ((*((_WORD *)this + 9) & 1) == 0)
    return *((_QWORD *)this + 11);
  llvm::Function::BuildLazyArguments(this);
  v2 = *((_QWORD *)this + 11);
  if ((*((_WORD *)this + 9) & 1) != 0)
    llvm::Function::BuildLazyArguments(this);
  return v2;
}

uint64_t llvm::InstVisitor<MTLGEPAnalysisPass::BacktrackVisitor,void>::visit(uint64_t a1, uint64_t a2)
{
  llvm::Module *v4;
  uint64_t DataLayout;
  llvm::Type *v6;
  llvm::LLVMContext *v7;

  v4 = *(llvm::Module **)(a2 + 40);
  *(_QWORD *)a1 = v4;
  DataLayout = llvm::Module::getDataLayout(v4);
  v6 = **(llvm::Type ***)a1;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = DataLayout;
  *(_QWORD *)(a1 + 24) = llvm::Type::getInt32Ty(v6, v7);
  return llvm::InstVisitor<MTLGEPAnalysisPass::BacktrackVisitor,void>::visit<llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::BasicBlock,false,false,void>,false,false>>(a1, *(_QWORD *)(a2 + 80), a2 + 72);
}

{
  return ((uint64_t (*)())((char *)nullsub_1 + 4 * byte_24105A2FA[*(unsigned __int8 *)(a2 + 16) - 29]))();
}

uint64_t llvm::InstVisitor<MTLGEPAnalysisPass::BacktrackVisitor,void>::visit<llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::BasicBlock,false,false,void>,false,false>>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a2 != a3)
  {
    v4 = result;
    do
    {
      v5 = *(_QWORD *)(a2 + 8);
      v6 = a2 - 24;
      if (!a2)
        v6 = 0;
      v7 = v6 + 40;
      v8 = *(_QWORD *)(v6 + 48);
      if (v8 != v7)
      {
        do
        {
          v9 = *(_QWORD *)(v8 + 8);
          if (v8)
            v10 = v8 - 24;
          else
            v10 = 0;
          result = llvm::InstVisitor<MTLGEPAnalysisPass::BacktrackVisitor,void>::visit(v4, v10);
          v8 = v9;
        }
        while (v9 != v7);
      }
      a2 = v5;
    }
    while (v5 != a3);
  }
  return result;
}

_QWORD *MemoryOpVisitor<MTLGEPAnalysisPass::BacktrackVisitor>::visitLoadInst(_QWORD *a1, uint64_t a2)
{
  llvm::DataLayout::getTypeSizeInBits(a1[2], **(_QWORD **)(**(_QWORD **)(a2 - 32) + 16));
  llvm::TypeSize::operator unsigned long long();
  llvm::ConstantInt::get();
  return MTLGEPAnalysisPass::BacktrackVisitor::visitPointerOperand(a1, a2, *(_QWORD *)(a2 - 32));
}

_QWORD *MTLGEPAnalysisPass::BacktrackVisitor::visitPointerOperand(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t *v12;

  v3 = result;
  v11 = a3;
  v4 = *(_DWORD *)(*(_QWORD *)a3 + 8);
  if ((v4 & 0xFE) == 0x12)
    v4 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a3 + 16) + 8);
  if ((v4 >> 8) - 1 <= 1)
  {
    ++*(_DWORD *)(result[5] + 8);
    v5 = result[4] + 168;
    v12 = &v11;
    result = std::__hash_table<std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>>>::__emplace_unique_key_args<llvm::Value *,std::piecewise_construct_t const&,std::tuple<llvm::Value * const&>,std::tuple<>>(v5, &v11, (uint64_t)&std::piecewise_construct, &v12);
    v6 = result[6];
    if (v6 < 2)
    {
      v8 = v3[5];
      v9 = (_DWORD *)(v8 + 16);
      v10 = (_DWORD *)(v8 + 12);
      if (v6)
        v7 = v9;
      else
        v7 = v10;
    }
    else
    {
      v7 = (_DWORD *)(v3[5] + 12);
    }
    ++*v7;
  }
  return result;
}

_QWORD *MemoryOpVisitor<MTLGEPAnalysisPass::BacktrackVisitor>::visitStoreInst(_QWORD *a1, uint64_t a2)
{
  llvm::DataLayout::getTypeSizeInBits(a1[2], **(_QWORD **)(**(_QWORD **)(a2 - 32) + 16));
  llvm::TypeSize::operator unsigned long long();
  llvm::ConstantInt::get();
  return MTLGEPAnalysisPass::BacktrackVisitor::visitPointerOperand(a1, a2, *(_QWORD *)(a2 - 32));
}

_QWORD *MemoryOpVisitor<MTLGEPAnalysisPass::BacktrackVisitor>::visitCallInst(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  llvm::LLVMContext *v5;
  _BOOL4 v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v18;
  uint64_t PtrTypeFromIntrinsicNameSuffix;

  result = *(_QWORD **)(a2 - 32);
  if (!result || *((_BYTE *)result + 16) || result[3] != *(_QWORD *)(a2 + 72))
    return result;
  result = (_QWORD *)llvm::Value::getName((llvm::Value *)result);
  if ((unint64_t)v5 < 0xB)
  {
    if (v5 != (llvm::LLVMContext *)10)
      return result;
    if (*result != 0x6D6F74612E726961 || *((_WORD *)result + 4) != 25449)
      return result;
    goto LABEL_45;
  }
  v8 = *result != 0x6D656D2E6D766C6CLL || *(_QWORD *)((char *)result + 3) != 0x7970636D656D2E6DLL;
  v9 = 0x6C6C766D2E6D656DLL;
  v10 = bswap64(*result);
  if (v10 == 0x6C6C766D2E6D656DLL
    && (v9 = 0x6D2E6D656D636D70, v10 = bswap64(*(_QWORD *)((char *)result + 3)), v10 == 0x6D2E6D656D636D70))
  {
    v11 = 0;
  }
  else if (v10 < v9)
  {
    v11 = -1;
  }
  else
  {
    v11 = 1;
  }
  if (!v8 || v11 == 0)
  {
    v13 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    v14 = v13[4];
    MTLGEPAnalysisPass::BacktrackVisitor::visitPointerOperand((_QWORD *)a1, a2, *v13);
    return MTLGEPAnalysisPass::BacktrackVisitor::visitPointerOperand((_QWORD *)a1, a2, v14);
  }
  if (*result == 0x6D656D2E6D766C6CLL && *(_QWORD *)((char *)result + 3) == 0x7465736D656D2E6DLL)
    return MTLGEPAnalysisPass::BacktrackVisitor::visitPointerOperand((_QWORD *)a1, a2, *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)));
  if (*result == 0x6D6F74612E726961 && *((_WORD *)result + 4) == 25449)
  {
LABEL_45:
    v18 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    PtrTypeFromIntrinsicNameSuffix = getPtrTypeFromIntrinsicNameSuffix((uint64_t)result, v5, *(llvm::Type **)(a1 + 8));
    goto LABEL_46;
  }
  if (*result == 0x662E73646E756F62 && *(_QWORD *)((char *)result + 3) == 0x646C6F662E73646ELL)
  {
    v18 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    PtrTypeFromIntrinsicNameSuffix = **(_QWORD **)(*(_QWORD *)v18 + 16);
LABEL_46:
    llvm::DataLayout::getTypeSizeInBits(*(_QWORD *)(a1 + 16), PtrTypeFromIntrinsicNameSuffix);
    llvm::TypeSize::operator unsigned long long();
    llvm::ConstantInt::get();
    return MTLGEPAnalysisPass::BacktrackVisitor::visitPointerOperand((_QWORD *)a1, a2, v18);
  }
  return result;
}

void MTLBoundsCheckPass::~MTLBoundsCheckPass(void **this)
{
  void **v2;
  void **v3;

  *this = off_25111E7A8;
  if (*((char *)this + 839) < 0)
    operator delete(this[102]);
  v2 = (void **)this[68];
  if (v2 != this + 70)
    free(v2);
  v3 = (void **)this[34];
  if (v3 != this + 36)
    free(v3);
  std::__hash_table<llvm::Value *,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,std::allocator<llvm::Value *>>::~__hash_table((uint64_t)(this + 29));
  *this = &off_25111E050;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)(this + 20));
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)(this + 17));
  llvm::Pass::~Pass((llvm::Pass *)this);
}

{
  void **v2;
  void **v3;

  *this = off_25111E7A8;
  if (*((char *)this + 839) < 0)
    operator delete(this[102]);
  v2 = (void **)this[68];
  if (v2 != this + 70)
    free(v2);
  v3 = (void **)this[34];
  if (v3 != this + 36)
    free(v3);
  std::__hash_table<llvm::Value *,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,std::allocator<llvm::Value *>>::~__hash_table((uint64_t)(this + 29));
  *this = &off_25111E050;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)(this + 20));
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)(this + 17));
  llvm::Pass::~Pass((llvm::Pass *)this);
  JUMPOUT(0x24268D8F0);
}

uint64_t MTLBoundsCheckPass::runOnModule(MTLBoundsCheckPass *this, llvm::Module *a2)
{
  char v2;
  llvm::NamedMDNode *MetalMetadata;
  llvm::raw_ostream *v7;
  llvm::raw_ostream *v8;
  const char *v9;
  llvm::raw_ostream *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::Function *v14;
  _QWORD *i;
  _BYTE *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t String;
  uint64_t v29;
  BOOL v30;
  llvm::Function *v32;
  char v33;
  llvm::raw_ostream *v34;
  llvm::raw_ostream *v35;
  _QWORD *j;
  llvm::Function *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  llvm::Instruction **v42;
  uint64_t v43;
  llvm::Instruction *v44;
  uint64_t v45;
  const llvm::Twine *v46;
  llvm::BasicBlock *v47;
  llvm::BasicBlock *v48;
  llvm::BasicBlock *v49;
  llvm::ReturnInst *Context;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  llvm::LLVMContext *v56;
  llvm::Instruction *v57;
  uint64_t v58;
  llvm::Function *v59;
  _BYTE v60[8];
  uint64_t v61;
  char v62;
  uint64_t v63[4];
  __int16 v64;
  void *v65;
  uint64_t v66;
  _BYTE v67[64];
  void *v68[2];
  _BYTE v69[16];
  __int16 v70;
  llvm::BasicBlock *v71;
  char *v72;
  llvm::ReturnInst *v73;
  uint64_t *v74;
  _QWORD *v75;
  uint64_t v76;
  int v77;
  __int16 v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD v83[3];

  v83[1] = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 8) + 64) + 651))
    goto LABEL_2;
  MTLBoundsCheckPass::initLocalsWithModule(this, a2);
  MetalMetadata = MTLBoundsCheck::getMetalMetadata(a2, (uint64_t)v60);
  if (!v62)
    goto LABEL_2;
  *((_QWORD *)this + 23) = v61;
  v7 = (llvm::raw_ostream *)llvm::dbgs(MetalMetadata);
  v8 = llvm::raw_ostream::operator<<(v7, "Bounds checking ", 0x10uLL);
  v9 = *((char *)this + 839) >= 0 ? (char *)this + 816 : (const char *)*((_QWORD *)this + 102);
  v10 = (llvm::raw_ostream *)llvm::raw_ostream::write(v8, v9);
  llvm::raw_ostream::operator<<(v10, "\n", 1uLL);
  v11 = *((_QWORD *)this + 23);
  v12 = *(unsigned int *)(v11 + 8);
  v13 = -v12;
  v14 = *(llvm::Function **)(*(_QWORD *)(v11 - 8 * v12) + 128);
  *((_BYTE *)this + 840) = 1;
  for (i = (_QWORD *)*((_QWORD *)a2 + 2); i != (_QWORD *)((char *)a2 + 8); i = (_QWORD *)i[1])
  {
    v16 = i - 7;
    if (!i)
      v16 = 0;
    v17 = *(_DWORD *)(*(_QWORD *)v16 + 8);
    if ((v17 & 0xFE) == 0x12)
      v17 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v16 + 16) + 8);
    v18 = (v17 >> 8) - 1;
    if (v18 < 2 || (v16[33] & 0x1C) != 0)
    {
      *((_BYTE *)this + 840) = 0;
      v19 = *(_QWORD *)(*((_QWORD *)this + 8) + 64);
      v20 = *(unsigned __int8 *)(v19 + 648);
      v21 = (v20 >> 1) & 1;
      if (v18 < 2)
        v21 = 1;
      if (v21)
        v22 = 2;
      else
        v22 = 0;
      *(_BYTE *)(v19 + 648) = v22 | v20 & 0xFD;
      v11 = *((_QWORD *)this + 23);
      v13 = -(uint64_t)*(unsigned int *)(v11 + 8);
      goto LABEL_23;
    }
  }
  v23 = *(_QWORD *)(v11 + 8 * v13 + 16);
  v24 = *(unsigned int *)(v23 + 8);
  if (!(_DWORD)v24)
    goto LABEL_2;
LABEL_23:
  v59 = v14;
  v25 = 0;
  v26 = 0;
  v2 = 0;
  do
  {
    v27 = *(_QWORD *)(v23 - 8 * v24 + 8 * v26);
    String = llvm::MDString::getString(*(llvm::MDString **)(v27 - 8 * *(unsigned int *)(v27 + 8) + 8));
    if (v29 == 10)
    {
      String = memcmp((const void *)String, "air.buffer", 0xAuLL);
      if (!(_DWORD)String)
      {
        v32 = v59;
        if ((*((_WORD *)v59 + 9) & 1) != 0)
        {
          llvm::Function::BuildLazyArguments(v59);
          v32 = v59;
        }
        String = llvm::Value::hasNUsesOrMore((llvm::Value *)(*((_QWORD *)v32 + 11) + v25));
        v2 |= String;
      }
    }
    else if (v29 == 19)
    {
      v30 = *(_QWORD *)String == 0x69646E692E726961 && *(_QWORD *)(String + 8) == 0x6675625F74636572;
      if (v30 && *(_QWORD *)(String + 11) == 0x7265666675625F74)
      {
        *((_BYTE *)this + 840) = 0;
        *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 8) + 64) + 648) |= 4u;
        v2 = 1;
      }
    }
    ++v26;
    v24 = *(unsigned int *)(v23 + 8);
    v25 += 40;
  }
  while (v26 < v24);
  if ((v2 & 1) != 0)
  {
    v33 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 8) + 64) + 648);
    if ((v33 & 4) != 0)
    {
      v34 = (llvm::raw_ostream *)llvm::dbgs((llvm *)String);
      String = (uint64_t)llvm::raw_ostream::operator<<(v34, "Instrumentation failure: argumentBuffer\n", 0x28uLL);
      v33 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 8) + 64) + 648);
    }
    if ((v33 & 2) != 0)
    {
      v35 = (llvm::raw_ostream *)llvm::dbgs((llvm *)String);
      llvm::raw_ostream::operator<<(v35, "Instrumentation failure: globalConstants\n", 0x29uLL);
    }
    for (j = (_QWORD *)*((_QWORD *)a2 + 4); j != (_QWORD *)((char *)a2 + 24); j = (_QWORD *)j[1])
    {
      if (j)
        v37 = (llvm::Function *)(j - 7);
      else
        v37 = 0;
      if ((llvm::GlobalValue::isDeclaration(v37) & 1) == 0 && !llvm::Value::getMetadata())
        MTLBoundsCheckPass::instrumentFunction(this, v37);
    }
    v38 = *((unsigned int *)this + 70);
    if ((_DWORD)v38)
    {
      v39 = *((_QWORD *)this + 34);
      v40 = 8 * v38;
      do
      {
        v39 += 8;
        llvm::Instruction::setMetadata();
        v40 -= 8;
      }
      while (v40);
    }
    *((_DWORD *)this + 70) = 0;
    v41 = *((unsigned int *)this + 138);
    if ((_DWORD)v41)
    {
      v42 = (llvm::Instruction **)*((_QWORD *)this + 68);
      v43 = 8 * v41;
      do
      {
        v44 = *v42++;
        llvm::Instruction::eraseFromParent(v44);
        v43 -= 8;
      }
      while (v43);
    }
    *((_DWORD *)this + 138) = 0;
    v45 = *((_QWORD *)v59 + 3);
    v68[0] = "mtl.instrument_wrapper";
    v70 = 259;
    v46 = (const llvm::Twine *)llvm::Function::Create(v45, 0, (uint64_t)v68, *((_QWORD *)this + 6));
    *((_DWORD *)v59 + 8) = *((_DWORD *)v59 + 8) & 0xFFFFBFC0 | 0x4007;
    llvm::GlobalValue::setLinkage((uint64_t)v46, 0);
    *((_QWORD *)v46 + 14) = *((_QWORD *)v59 + 14);
    v47 = (llvm::BasicBlock *)*((_QWORD *)this + 5);
    v68[0] = "entry";
    v70 = 259;
    v49 = (llvm::BasicBlock *)llvm::BasicBlock::Create(v47, (llvm::LLVMContext *)v68, v46, 0, v48);
    Context = (llvm::ReturnInst *)llvm::BasicBlock::getContext(v49);
    v68[0] = v69;
    v68[1] = (void *)0x200000000;
    v73 = Context;
    v74 = &v82;
    v75 = v83;
    v76 = 0;
    v77 = 0;
    v78 = 512;
    v79 = 7;
    v80 = 0;
    v81 = 0;
    v82 = MEMORY[0x24BED83B8] + 16;
    v83[0] = MEMORY[0x24BED83F0] + 16;
    v71 = v49;
    v72 = (char *)v49 + 40;
    createDebugInfoForWrapperFunction(*((_QWORD *)this + 5), (llvm::IRBuilderBase *)v68, v46, v59);
    v65 = v67;
    v66 = 0x800000000;
    v51 = llvm::Function::args(v46);
    v53 = v52;
    v54 = (uint64_t)v59;
    if (v51 == v52)
      goto LABEL_63;
    do
    {
      v63[0] = v51;
      llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)&v65, v63);
      v51 += 40;
    }
    while (v51 != v53);
    v54 = (uint64_t)v59;
    if (v59)
LABEL_63:
      v55 = *(_QWORD *)(v54 + 24);
    else
      v55 = 0;
    v64 = 257;
    v56 = (llvm::LLVMContext *)llvm::IRBuilderBase::CreateCall((uint64_t)v68, v55, v54, (uint64_t)v65, v66, (uint64_t)v63, 0);
    *((_WORD *)v56 + 9) = *((_WORD *)v56 + 9) & 0xFFFC | 1;
    if (*(_BYTE *)(**(_QWORD **)(*((_QWORD *)v46 + 3) + 16) + 8) == 7)
      v58 = llvm::ReturnInst::Create(v73, 0, 0, v57);
    else
      v58 = llvm::ReturnInst::Create(v73, v56, 0, v57);
    v64 = 257;
    llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)v68, v58, (uint64_t)v63);
    MetalModulePass::getMetadata(this, v46);
    llvm::MDNode::replaceOperandWith();
    if (v65 != v67)
      free(v65);
    llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v83);
    llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v82);
    if (v68[0] != v69)
      free(v68[0]);
  }
  else
  {
LABEL_2:
    v2 = 0;
  }
  return v2 & 1;
}

void sub_240FC51F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28)
{
  void *v28;

  if (a18 != v28)
    free(a18);
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder(&a28);
  _Unwind_Resume(a1);
}

void MTLBoundsCheckPass::initLocalsWithModule(MTLBoundsCheckPass *this, llvm::Module *a2)
{
  llvm::Module *v3;
  llvm::Module *v4;
  llvm::NamedMDNode *NamedMetadata;
  uint64_t Operand;
  size_t v7;
  void *String;
  size_t v9;
  std::string *v10;
  char *v11;
  const std::string::value_type *p_p;
  std::string::size_type v13;
  std::string *v14;
  std::string::size_type v15;
  char v16;
  void *__p;
  std::string::size_type v18;
  uint64_t v19;
  std::string v20;
  __int16 v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  *((_QWORD *)this + 24) = llvm::PointerType::get();
  *((_QWORD *)this + 25) = llvm::PointerType::get();
  *((_QWORD *)this + 26) = llvm::PointerType::get();
  *((_QWORD *)this + 27) = llvm::PointerType::get();
  std::__hash_table<std::__hash_value_type<llvm::Value *,MTLBoundsCheckPass::KnownBufferData>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,MTLBoundsCheckPass::KnownBufferData>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,MTLBoundsCheckPass::KnownBufferData>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,MTLBoundsCheckPass::KnownBufferData>>>::clear((_QWORD *)this + 29);
  std::string::operator=((std::string *)this + 34, (const std::string *)(*((_QWORD *)this + 6) + 192));
  v3 = (llvm::Module *)*((_QWORD *)this + 6);
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)"air.requestHash";
  v21 = 259;
  if (llvm::Module::getNamedMetadata(v3, (const llvm::Twine *)&v20))
  {
    v4 = (llvm::Module *)*((_QWORD *)this + 6);
    v20.__r_.__value_.__r.__words[0] = (std::string::size_type)"air.requestHash";
    v21 = 259;
    NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v4, (const llvm::Twine *)&v20);
    Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
    String = (void *)llvm::MDString::getString(*(llvm::MDString **)(Operand - 8 * *(unsigned int *)(Operand + 8)));
    if (String)
    {
      std::string::basic_string[abi:ne180100](&__p, String, v7);
    }
    else
    {
      __p = 0;
      v18 = 0;
      v19 = 0;
    }
    if (*((char *)this + 839) >= 0)
      v9 = *((unsigned __int8 *)this + 839);
    else
      v9 = *((_QWORD *)this + 103);
    v10 = &v20;
    std::string::basic_string[abi:ne180100]((uint64_t)&v20, v9 + 1);
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v10 = (std::string *)v20.__r_.__value_.__r.__words[0];
    if (v9)
    {
      if (*((char *)this + 839) >= 0)
        v11 = (char *)this + 816;
      else
        v11 = (char *)*((_QWORD *)this + 102);
      memmove(v10, v11, v9);
    }
    *(_WORD *)((char *)&v10->__r_.__value_.__l.__data_ + v9) = 58;
    if (v19 >= 0)
      p_p = (const std::string::value_type *)&__p;
    else
      p_p = (const std::string::value_type *)__p;
    if (v19 >= 0)
      v13 = HIBYTE(v19);
    else
      v13 = v18;
    v14 = std::string::append(&v20, p_p, v13);
    v15 = v14->__r_.__value_.__r.__words[0];
    v22[0] = v14->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v22 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
    v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if (*((char *)this + 839) < 0)
      operator delete(*((void **)this + 102));
    *((_QWORD *)this + 102) = v15;
    *((_QWORD *)this + 103) = v22[0];
    *(_QWORD *)((char *)this + 831) = *(_QWORD *)((char *)v22 + 7);
    *((_BYTE *)this + 839) = v16;
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    if (SHIBYTE(v19) < 0)
      operator delete(__p);
  }
}

void sub_240FC5480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void MTLBoundsCheckPass::instrumentFunction(MTLBoundsCheckPass *this, llvm::Function *a2)
{
  char *v2;
  char *v3;
  char *v5;
  _QWORD *v6;
  _QWORD *i;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t Name;
  llvm::LLVMContext *v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  _BOOL4 v25;
  char v26;
  BOOL v27;
  unsigned __int8 *v28;
  llvm::Value **v29;
  unsigned int v30;
  llvm::Value *v31;
  unsigned int v32;
  uint64_t PtrTypeFromIntrinsicNameSuffix;
  uint64_t v36;
  int v37;
  unsigned int v38;
  unsigned __int8 *v39;
  unsigned int v40;
  uint64_t v41;
  llvm::Value **v42;
  llvm::Value **v43;
  llvm::Type *v44;
  uint64_t v45;
  BOOL v46;
  llvm::StructType *v47;
  BOOL v48;
  uint64_t v49;
  uint64_t **j;
  uint64_t v51;
  uint64_t v52;
  llvm::Instruction *v53;
  llvm::PHINode *PHI;
  llvm::Type *v55;
  llvm::Value *NullValue;
  llvm::Instruction *inserted;
  llvm::Value *v58;
  llvm::Type *v59;
  llvm::Instruction *v60[4];
  __int16 v61;
  llvm::Instruction *v62;
  uint64_t v63;
  llvm::Value **v64;
  llvm::Value *v65;
  char v66;
  char v67;
  llvm::Value *v68;
  llvm::Value *v69;
  void *v70;
  _BOOL8 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  _QWORD v77[34];

  v77[32] = *MEMORY[0x24BDAC8D0];
  v75 = v77;
  v76 = 0x800000000;
  v2 = (char *)a2 + 72;
  v3 = (char *)*((_QWORD *)a2 + 10);
  if (v3 == (char *)a2 + 72)
    goto LABEL_119;
  v59 = (llvm::Type *)**((_QWORD **)a2 + 5);
  do
  {
    v5 = v3 - 24;
    if (!v3)
      v5 = 0;
    v6 = v5 + 40;
    for (i = (_QWORD *)*((_QWORD *)v5 + 6); i != v6; i = (_QWORD *)i[1])
    {
      if (i)
        v8 = (unsigned __int8 *)(i - 3);
      else
        v8 = 0;
      v9 = v8[16];
      if (v9 == 60)
        v10 = v8;
      else
        v10 = 0;
      if (i && v9 == 60)
      {
        if ((*(_BYTE *)(*((_QWORD *)this + 4) + 8) & 1) != 0)
        {
          v64 = 0;
          v64 = (llvm::Value **)*((_QWORD *)v10 - 4);
          llvm::DataLayout::getTypeSizeInBits(*((_QWORD *)this + 7), **((_QWORD **)*v64 + 2));
          v70 = (void *)((unint64_t)(v11 + 7) >> 3);
          v71 = v12 == 1;
          v13 = *((_DWORD *)*v64 + 2);
          if ((v13 & 0xFE) == 0x12)
            v13 = *(_DWORD *)(**((_QWORD **)*v64 + 2) + 8);
          if ((v13 >> 8) - 1 <= 1)
            goto LABEL_19;
        }
      }
      else
      {
        if (v9 == 61)
          v14 = v8;
        else
          v14 = 0;
        if (i && v9 == 61)
        {
          if ((*(_BYTE *)(*((_QWORD *)this + 4) + 8) & 2) != 0)
          {
            v64 = 0;
            v64 = (llvm::Value **)*((_QWORD *)v14 - 4);
            llvm::DataLayout::getTypeSizeInBits(*((_QWORD *)this + 7), **((_QWORD **)*v64 + 2));
            v70 = (void *)((unint64_t)(v15 + 7) >> 3);
            v71 = v16 == 1;
            v17 = *((_DWORD *)*v64 + 2);
            if ((v17 & 0xFE) == 0x12)
              v17 = *(_DWORD *)(**((_QWORD **)*v64 + 2) + 8);
            if ((v17 >> 8) - 1 <= 1)
            {
              v60[0] = (llvm::Instruction *)v8;
              LOBYTE(v69) = 0;
              llvm::SmallVectorImpl<MTLBoundsCheckPass::MemoryAccessInfo>::emplace_back<llvm::Instruction *,llvm::Value *&,llvm::TypeSize &,BOOL>((uint64_t)&v75, v60, (llvm::Value **)&v64, (uint64_t)&v70, (char *)&v69);
            }
          }
          continue;
        }
        if (v9 == 84)
          v18 = v8;
        else
          v18 = 0;
        if (!i)
          continue;
        if (v9 != 84)
          continue;
        v19 = *((_QWORD *)v18 - 4);
        if (!v19 || *(_BYTE *)(v19 + 16) || *(_QWORD *)(v19 + 24) != *((_QWORD *)v18 + 9))
          continue;
        Name = llvm::Value::getName((llvm::Value *)v19);
        if ((unint64_t)v21 >= 0xB)
        {
          v22 = *(_QWORD *)Name == 0x6D656D2E6D766C6CLL && *(_QWORD *)(Name + 3) == 0x7970636D656D2E6DLL;
          v23 = !v22;
          v24 = *(_QWORD *)Name ^ 0x6D656D2E6D766C6CLL | *(_QWORD *)(Name + 3) ^ 0x706D636D656D2E6DLL;
          v22 = v24 == 0;
          v25 = v24 != 0;
          v26 = v22;
          LOBYTE(v68) = v26;
          if (v23)
            v27 = !v25;
          else
            v27 = 1;
          if (v27)
          {
            v70 = 0;
            v28 = &v18[-32 * (*((_DWORD *)v18 + 5) & 0x7FFFFFF)];
            v70 = *(void **)v28;
            v64 = 0;
            v29 = (llvm::Value **)*((_QWORD *)v28 + 4);
            v64 = v29;
            v60[0] = 0;
            v60[0] = *((llvm::Instruction **)v28 + 8);
            v30 = *(_DWORD *)(*(_QWORD *)v70 + 8);
            if ((v30 & 0xFE) == 0x12)
              v30 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v70 + 16) + 8);
            if ((v30 >> 8) - 1 <= 1)
            {
              v69 = (llvm::Value *)v8;
              llvm::SmallVectorImpl<MTLBoundsCheckPass::MemoryAccessInfo>::emplace_back<llvm::Instruction *,llvm::Value *&,llvm::Value *&,BOOL &>((uint64_t)&v75, &v69, (uint64_t *)&v70, (uint64_t *)v60, (char *)&v68);
              v29 = v64;
            }
            v31 = *v29;
            v32 = *((_DWORD *)*v29 + 2);
            if ((v32 & 0xFE) == 0x12)
              v32 = *(_DWORD *)(**((_QWORD **)v31 + 2) + 8);
            if ((v32 >> 8) - 1 <= 1)
            {
              v69 = (llvm::Value *)v8;
              LOBYTE(v63) = 1;
              llvm::SmallVectorImpl<MTLBoundsCheckPass::MemoryAccessInfo>::emplace_back<llvm::Instruction *,llvm::Value *&,llvm::Value *&,BOOL &>((uint64_t)&v75, &v69, (uint64_t *)&v64, (uint64_t *)v60, (char *)&v63);
            }
            continue;
          }
          if (*(_QWORD *)Name == 0x6D656D2E6D766C6CLL && *(_QWORD *)(Name + 3) == 0x7465736D656D2E6DLL)
          {
            v70 = 0;
            v39 = &v18[-32 * (*((_DWORD *)v18 + 5) & 0x7FFFFFF)];
            v70 = *(void **)v39;
            v64 = 0;
            v64 = (llvm::Value **)*((_QWORD *)v39 + 8);
            v40 = *(_DWORD *)(*(_QWORD *)v70 + 8);
            if ((v40 & 0xFE) == 0x12)
              v40 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v70 + 16) + 8);
            if ((v40 >> 8) - 1 <= 1)
            {
              v60[0] = (llvm::Instruction *)v8;
              LOBYTE(v69) = 0;
              llvm::SmallVectorImpl<MTLBoundsCheckPass::MemoryAccessInfo>::emplace_back<llvm::Instruction *,llvm::Value *&,llvm::Value *&,BOOL &>((uint64_t)&v75, v60, (uint64_t *)&v70, (uint64_t *)&v64, (char *)&v69);
            }
            continue;
          }
        }
        else
        {
          LOBYTE(v68) = 0;
          if (v21 != (llvm::LLVMContext *)10)
            continue;
        }
        if (*(_QWORD *)Name == 0x6D6F74612E726961 && *(_WORD *)(Name + 8) == 25449)
        {
          v64 = 0;
          v64 = *(llvm::Value ***)&v18[-32 * (*((_DWORD *)v18 + 5) & 0x7FFFFFF)];
          if (*((_BYTE *)*v64 + 8) != 15)
            goto LABEL_119;
          PtrTypeFromIntrinsicNameSuffix = getPtrTypeFromIntrinsicNameSuffix(Name, v21, v59);
          llvm::DataLayout::getTypeSizeInBits(*((_QWORD *)this + 7), PtrTypeFromIntrinsicNameSuffix);
          v70 = (void *)((unint64_t)(v36 + 7) >> 3);
          v71 = v37 == 1;
          v38 = *((_DWORD *)*v64 + 2);
          if ((v38 & 0xFE) == 0x12)
            v38 = *(_DWORD *)(**((_QWORD **)*v64 + 2) + 8);
          if ((v38 >> 8) - 1 <= 1)
          {
LABEL_19:
            v60[0] = (llvm::Instruction *)v8;
            LOBYTE(v69) = 1;
            llvm::SmallVectorImpl<MTLBoundsCheckPass::MemoryAccessInfo>::emplace_back<llvm::Instruction *,llvm::Value *&,llvm::TypeSize &,BOOL>((uint64_t)&v75, v60, (llvm::Value **)&v64, (uint64_t)&v70, (char *)&v69);
            continue;
          }
        }
      }
    }
    v3 = (char *)*((_QWORD *)v3 + 1);
  }
  while (v3 != v2);
  v41 = v76;
  v42 = (llvm::Value **)v75;
  **((_DWORD **)this + 106) += v76;
  if ((_DWORD)v41)
  {
    v43 = &v42[4 * v41];
    do
    {
      v69 = *v42;
      MTLIRBuilder::MTLIRBuilder<llvm::Instruction *&>((uint64_t)&v70, &v69);
      v44 = *(llvm::Type **)v69;
      v68 = v42[1];
      v45 = **(_QWORD **)(*(_QWORD *)v68 + 16);
      if (v45)
        v46 = *(_BYTE *)(v45 + 8) == 15;
      else
        v46 = 0;
      if (!v46
        || ((v47 = **(llvm::StructType ***)(v45 + 16)) != 0 ? (v48 = *((_BYTE *)v47 + 8) == 16) : (v48 = 0),
            !v48 || !isSpecialStructType(v47)))
      {
        if ((*(_BYTE *)(*((_QWORD *)this + 4) + 20) & 0x20) != 0)
        {
          v49 = *((_QWORD *)this + 8) + 168;
          v64 = &v68;
          for (j = (uint64_t **)std::__hash_table<std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>>>::__emplace_unique_key_args<llvm::Value *,std::piecewise_construct_t const&,std::tuple<llvm::Value * const&>,std::tuple<>>(v49, &v68, (uint64_t)&std::piecewise_construct, &v64)[5]; j; j = (uint64_t **)*j)
            MetalModulePass::getStaticBoundsInfo(this, (llvm::Value *)j[2], (uint64_t)&v64);
        }
        MetalModulePass::getStaticBoundsInfo(this, v69, (uint64_t)&v64);
        if (!v67 || !v66)
        {
          MetalModulePass::getStaticBoundsInfo(this, v68, (uint64_t)&v64);
          if (!v67 || !v66)
          {
            MTLBoundsCheckPass::emitPointerCheck(this, (MTLIRBuilder *)&v70, v68, v42[2], (uint64_t)&v64);
            if (!(_BYTE)v64)
            {
              v51 = *((_QWORD *)this + 106);
              if (*((unsigned __int8 *)v65 + 16) >= 0x15u)
                ++*(_DWORD *)(v51 + 96);
              ++*(_DWORD *)(v51 + 4);
              llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)&v70, v69);
              v52 = *((_QWORD *)this + 4);
              if (*(_DWORD *)(v52 + 12) == 1)
              {
                v62 = 0;
                v63 = 0;
                if (llvm::Value::hasNUsesOrMore(*v42))
                {
                  v61 = 257;
                  PHI = (llvm::PHINode *)llvm::IRBuilderBase::CreatePHI((llvm::IRBuilderBase *)&v70, v44, 0, (const llvm::Twine *)v60, v53);
                  llvm::SplitBlockAndInsertIfThenElse();
                  llvm::Value::replaceAllUsesWith();
                  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)&v70, v62);
                  MTLBoundsCheckPass::emitBadAccessNotice((uint64_t)this, (llvm::Constant **)&v70, (uint64_t)&v64, v69, (uint64_t *)v68);
                  llvm::Instruction::moveBefore();
                  llvm::PHINode::addIncoming(PHI, v69, *(llvm::BasicBlock **)(v63 + 40));
                  NullValue = (llvm::Value *)llvm::Constant::getNullValue(v44, v55);
                  llvm::PHINode::addIncoming(PHI, NullValue, *((llvm::BasicBlock **)v62 + 5));
                }
                else
                {
                  llvm::SplitBlockAndInsertIfThenElse();
                  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)&v70, v62);
                  MTLBoundsCheckPass::emitBadAccessNotice((uint64_t)this, (llvm::Constant **)&v70, (uint64_t)&v64, v69, (uint64_t *)v68);
                  llvm::Instruction::moveBefore();
                }
              }
              else if ((*(_BYTE *)(v52 + 20) & 2) != 0)
              {
                v61 = 257;
                llvm::IRBuilderBase::CreateNot((llvm::IRBuilderBase *)&v70, v65, (const llvm::Twine *)v60);
                inserted = (llvm::Instruction *)llvm::SplitBlockAndInsertIfThen();
                llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)&v70, inserted);
                MTLBoundsCheckPass::emitBadAccessNotice((uint64_t)this, (llvm::Constant **)&v70, (uint64_t)&v64, v69, (uint64_t *)v68);
              }
              llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)&v70, v69);
              v58 = (llvm::Value *)MTLBoundsCheckPass::emitPointerConvert((uint64_t)this, (llvm::IRBuilderBase *)&v70, (uint64_t)&v64, (uint64_t *)v68);
              if (v58 && v58 != v68)
                llvm::User::replaceUsesOfWith();
            }
          }
        }
      }
      llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)&v74);
      llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v73);
      if (v70 != &v72)
        free(v70);
      v42 += 4;
    }
    while (v42 != v43);
  }
LABEL_119:
  if (v75 != v77)
    free(v75);
}

void sub_240FC5D80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53)
{
  if (a53 != a11)
    free(a53);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<std::__hash_value_type<llvm::Value *,MTLBoundsCheckPass::KnownBufferData>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,MTLBoundsCheckPass::KnownBufferData>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,MTLBoundsCheckPass::KnownBufferData>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,MTLBoundsCheckPass::KnownBufferData>>>::clear(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;

  if (result[3])
  {
    v1 = result;
    result = (_QWORD *)result[2];
    if (result)
    {
      do
      {
        v2 = (_QWORD *)*result;
        operator delete(result);
        result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    v3 = v1[1];
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

llvm::raw_ostream *llvm::raw_ostream::operator<<(llvm::raw_ostream *this, const char *a2, size_t a3)
{
  void *v5;
  uint64_t v6;

  v6 = *((_QWORD *)this + 3);
  v5 = (void *)*((_QWORD *)this + 4);
  if (a3 > v6 - (uint64_t)v5)
    return (llvm::raw_ostream *)llvm::raw_ostream::write(this, a2);
  if (a3)
  {
    memcpy(v5, a2, a3);
    *((_QWORD *)this + 4) += a3;
  }
  return this;
}

uint64_t llvm::SmallVectorImpl<MTLBoundsCheckPass::MemoryAccessInfo>::emplace_back<llvm::Instruction *,llvm::Value *&,llvm::TypeSize &,BOOL>(uint64_t a1, llvm::Instruction **a2, llvm::Value **a3, uint64_t a4, char *a5)
{
  uint64_t v7;
  MTLBoundsCheckPass::MemoryAccessInfo *v8;
  llvm::Instruction *v9;
  llvm::Value *v10;
  unint64_t v11;
  uint64_t v12;

  v7 = *(unsigned int *)(a1 + 8);
  if (v7 >= *(_DWORD *)(a1 + 12))
    return llvm::SmallVectorTemplateBase<MTLBoundsCheckPass::MemoryAccessInfo,true>::growAndEmplaceBack<llvm::Instruction *,llvm::Value *&,llvm::TypeSize &,BOOL>(a1, a2, a3, a4, a5);
  v8 = (MTLBoundsCheckPass::MemoryAccessInfo *)(*(_QWORD *)a1 + 32 * v7);
  v9 = *a2;
  v10 = *a3;
  v11 = llvm::TypeSize::operator unsigned long long();
  MTLBoundsCheckPass::MemoryAccessInfo::MemoryAccessInfo(v8, v9, v10, v11, *a5);
  v12 = (*(_DWORD *)(a1 + 8) + 1);
  *(_DWORD *)(a1 + 8) = v12;
  return *(_QWORD *)a1 + 32 * v12 - 32;
}

uint64_t llvm::SmallVectorImpl<MTLBoundsCheckPass::MemoryAccessInfo>::emplace_back<llvm::Instruction *,llvm::Value *&,llvm::Value *&,BOOL &>(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, char *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  v5 = *(unsigned int *)(a1 + 8);
  if (v5 >= *(_DWORD *)(a1 + 12))
    return llvm::SmallVectorTemplateBase<MTLBoundsCheckPass::MemoryAccessInfo,true>::growAndEmplaceBack<llvm::Instruction *,llvm::Value *&,llvm::Value *&,BOOL &>(a1, a2, a3, a4, a5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)a1 + 32 * v5;
  v8 = *a3;
  v9 = *a4;
  v10 = *a5;
  *(_QWORD *)v7 = *a2;
  *(_QWORD *)(v7 + 8) = v8;
  *(_QWORD *)(v7 + 16) = v9;
  *(_BYTE *)(v7 + 24) = v10;
  v11 = (v5 + 1);
  *(_DWORD *)(a1 + 8) = v11;
  return v6 + 32 * v11 - 32;
}

void MTLBoundsCheckPass::emitPointerCheck(MTLBoundsCheckPass *this@<X0>, MTLIRBuilder *a2@<X1>, llvm::Value *a3@<X3>, llvm::Value *a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t *v7;
  uint64_t v8;
  llvm::MDString *v13;
  uint64_t v14;
  llvm::Value *v15;
  uint64_t v16;
  llvm::Value *v17;
  uint64_t LShr;
  uint64_t v19;
  uint64_t v20;
  llvm::Value *v21;
  llvm::Value *v22;
  llvm::Value *v23;
  llvm::Value *v24;
  llvm::Value *v25;
  llvm::Value *v26;
  llvm::Type *v27;
  llvm::Instruction *v28;
  uint64_t PHI;
  llvm::Type *v30;
  llvm::Instruction *v31;
  llvm::PHINode *v32;
  llvm::Value *v33;
  llvm::Type *v34;
  llvm::Value *v35;
  llvm::IRBuilderBase *v36;
  uint64_t v37;
  char *Name;
  size_t v39;
  llvm::Type *GVBaseType;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  size_t v44;
  llvm::Type *v45;
  llvm::Value *v46;
  llvm::Instruction *v47;
  uint64_t v48;
  llvm::Type *v49;
  llvm::Value *v50;
  llvm::Type *v51;
  llvm::Value *v52;
  llvm::Type *v53;
  llvm::Value *NullValue;
  llvm::Type *v55;
  llvm::Value *AllOnesValue;
  uint64_t v57;
  BOOL v58;
  llvm::Instruction *v59;
  llvm::CmpInst **v60;
  uint64_t v61;
  llvm::Value *v62;
  llvm::Value *v63;
  llvm::Value *v64;
  llvm::Value *v65;
  uint64_t v66;
  char *v67;
  unsigned int *v68;
  uint64_t v69;
  uint64_t v70;
  llvm::BasicBlock *v71;
  uint64_t FirstNonPHIOrDbg;
  int i;
  uint64_t v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  MTLIRBuilder *v81;
  llvm::Value *Cast;
  llvm::Value *v83;
  llvm::IRBuilderBase *v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  llvm::CmpInst **v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  llvm::Value *v92;
  llvm::Value *v93;
  llvm::Value *AddSat;
  _QWORD *v95;
  llvm::Value *v96;
  uint64_t v97;
  llvm::Value *v98;
  llvm::Value *v99;
  llvm::Value *v100;
  llvm::Instruction *v101;
  uint64_t ICmp;
  unsigned int v103;
  BOOL v104;
  uint64_t v105;
  llvm::Value *v106;
  llvm::CmpInst **NSWFoldAdd;
  llvm::Value *v108;
  llvm::Value *v109;
  uint64_t v110;
  llvm::Type *v111;
  llvm::LLVMContext *v112;
  uint64_t v113;
  llvm::Type *Int64Ty;
  uint64_t v115;
  llvm::Instruction *Sub;
  uint64_t v117;
  uint64_t v118;
  char v119;
  _QWORD *v120;
  llvm::Type *Int32Ty;
  uint64_t ConstGEP1_64;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  unsigned int v128;
  llvm::Value *v129;
  llvm::Value *v130;
  uint64_t v131;
  uint64_t ConstGEP1_32;
  llvm::Value *AlignedLoad;
  _QWORD *v134;
  llvm::PHINode *v135;
  llvm::PHINode *v136;
  llvm::Instruction *v137;
  llvm::IRBuilderBase *v138;
  _QWORD v139[4];
  __int16 v140;
  uint64_t v141;
  unsigned int v142;
  char v143;
  char v144;
  __int16 v145;
  __int128 v146;
  uint64_t UDiv;
  int v148;
  __int16 v149;
  const char *v150;
  __int128 v151;
  __int128 v152;
  uint64_t v153;
  uint64_t v154;
  llvm::Value **v155;
  uint64_t v156;
  llvm::BasicBlock ***v157;
  llvm::Value *v158;
  llvm::BasicBlock **v159;
  llvm::BasicBlock **v160;
  _QWORD v161[4];
  __int16 v162;

  *(_OWORD *)(a5 + 8) = 0u;
  v7 = (uint64_t *)(a5 + 8);
  *(_OWORD *)(a5 + 52) = 0u;
  *(_OWORD *)(a5 + 40) = 0u;
  *(_OWORD *)(a5 + 24) = 0u;
  *(_WORD *)a5 = 0;
  v8 = *((_QWORD *)this + 4);
  if (!*(_DWORD *)(v8 + 4))
    return;
  if ((*(_BYTE *)(v8 + 20) & 0x20) == 0)
    goto LABEL_7;
  v13 = (llvm::MDString *)MTLBoundsCheckPass::backtracePointer(this, a3);
  if (!v13)
  {
    ++*(_DWORD *)(*((_QWORD *)this + 106) + 12);
    goto LABEL_7;
  }
  getStaticBoundsInfo(v13, (uint64_t)&v141);
  if (v144)
  {
    *(_BYTE *)a5 = 1;
    *(_QWORD *)(a5 + 16) = 0;
    *(_QWORD *)(a5 + 24) = 0;
    *(_QWORD *)(a5 + 8) = llvm::ConstantInt::get();
    *(_QWORD *)(a5 + 40) = 0;
    return;
  }
  if (v143)
    v66 = llvm::ConstantInt::get();
  else
    v66 = 0;
  *(_QWORD *)(a5 + 40) = v66;
  v67 = (char *)this + 232;
  v68 = (unsigned int *)std::__hash_table<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>>>::find<llvm::Value *>((_QWORD *)this + 29, &v141);
  v138 = a2;
  if (!v68)
  {
    v146 = 0uLL;
    v148 = 0;
    UDiv = 0;
    v69 = *((_QWORD *)a2 + 6);
    v134 = (_QWORD *)((char *)a2 + 48);
    v136 = (llvm::PHINode *)*((_QWORD *)a2 + 7);
    v70 = *(_QWORD *)(*(_QWORD *)(v69 + 56) + 80);
    if (v70)
      v71 = (llvm::BasicBlock *)(v70 - 24);
    else
      v71 = 0;
    FirstNonPHIOrDbg = llvm::BasicBlock::getFirstNonPHIOrDbg(v71);
    for (i = *(unsigned __int8 *)(FirstNonPHIOrDbg + 16); i == 59; i = *(unsigned __int8 *)(v77 + 16))
    {
      v74 = *(_QWORD *)(FirstNonPHIOrDbg + 32);
      v75 = *(_QWORD *)(FirstNonPHIOrDbg + 40) + 40;
      FirstNonPHIOrDbg = v74 - 24;
      if (v74)
        v76 = v74 == v75;
      else
        v76 = 1;
      if (v76)
        v77 = 0;
      else
        v77 = v74 - 24;
    }
    llvm::IRBuilderBase::SetInsertPoint(a2, (llvm::Instruction *)FirstNonPHIOrDbg);
    v78 = *(unsigned __int8 *)(v141 + 16);
    if (v78 < 4 || v78 == 59)
    {
      v79 = *((_QWORD *)this + 9);
      WORD4(v152) = 257;
      v80 = v69;
      v81 = a2;
      Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)a2, 47, v141, v79, (uint64_t)&v150);
      *(_QWORD *)&v146 = Cast;
      v83 = (llvm::Value *)llvm::ConstantInt::get();
      WORD4(v152) = 257;
      v84 = v81;
      v69 = v80;
      v67 = (char *)this + 232;
      *((_QWORD *)&v146 + 1) = llvm::IRBuilderBase::CreateAdd(v84, Cast, v83, (const llvm::Twine *)&v150, 0, 0);
      UDiv = llvm::ConstantInt::get();
    }
    else
    {
      if (!v143)
        goto LABEL_43;
      v110 = MTLBoundsCheck::SharedPassData::getOrInsertCheckBufferGV(*((MTLBoundsCheck::SharedPassData **)this + 8));
      v111 = *(llvm::Type **)(v110 + 24);
      WORD4(v152) = 257;
      AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)a2, v111, v110, 0, 0, (uint64_t)&v150);
      v113 = *(_QWORD *)(*((_QWORD *)this + 4) + 20);
      if ((v113 & 0x2000) == 0)
      {
        Int64Ty = (llvm::Type *)llvm::Type::getInt64Ty(**((llvm::Type ***)this + 6), v112);
        WORD4(v152) = 257;
        ConstGEP1_32 = llvm::IRBuilderBase::CreateConstGEP1_32((llvm::Type **)v138, Int64Ty, AlignedLoad, 2 * v142, (const llvm::Twine *)&v150);
        WORD4(v152) = 257;
        v115 = llvm::IRBuilderBase::CreateConstGEP1_32((llvm::Type **)v138, Int64Ty, AlignedLoad, (2 * v142) | 1, (const llvm::Twine *)&v150);
        WORD4(v152) = 257;
        *(_QWORD *)&v146 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v138, Int64Ty, ConstGEP1_32, 0, 0, (uint64_t)&v150);
        WORD4(v152) = 257;
        *((_QWORD *)&v146 + 1) = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v138, Int64Ty, v115, 0, 0, (uint64_t)&v150);
        v113 = *(_QWORD *)(*((_QWORD *)this + 4) + 20);
      }
      if ((v113 & 0x100) != 0)
      {
        if ((v113 & 0x2000) != 0)
        {
          Int32Ty = (llvm::Type *)llvm::Type::getInt32Ty(**((llvm::Type ***)this + 6), v112);
          WORD4(v152) = 257;
          ConstGEP1_64 = llvm::IRBuilderBase::CreateConstGEP1_64((llvm::Type **)v138, Int32Ty, AlignedLoad, v142, (const llvm::Twine *)&v150);
          WORD4(v152) = 257;
          v118 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v138, Int32Ty, ConstGEP1_64, 0, 0, (uint64_t)&v150);
        }
        else
        {
          WORD4(v152) = 257;
          Sub = llvm::IRBuilderBase::CreateSub(v138, *((llvm::Value **)&v146 + 1), (llvm::Value *)v146, (const llvm::Twine *)&v150, 0, 0);
          v117 = *((_QWORD *)this + 10);
          v162 = 257;
          v118 = llvm::IRBuilderBase::CreateCast((uint64_t)v138, 38, (uint64_t)Sub, v117, (uint64_t)v161);
        }
        UDiv = v118;
      }
      if ((*(_BYTE *)(*((_QWORD *)this + 4) + 21) & 1) == 0)
      {
LABEL_43:
        if (v69)
        {
          a2 = v138;
          llvm::IRBuilderBase::SetInsertPoint((uint64_t)v138, v69, (uint64_t)v136);
        }
        else
        {
          *v134 = 0;
          v134[1] = 0;
          a2 = v138;
        }
        if (*((_QWORD *)&v146 + 1))
          v85 = (_QWORD)v146 == 0;
        else
          v85 = 1;
        if (!v85 || UDiv)
          v68 = (unsigned int *)std::__hash_table<std::__hash_value_type<llvm::Value *,MTLBoundsCheckPass::KnownBufferData>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,MTLBoundsCheckPass::KnownBufferData>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,MTLBoundsCheckPass::KnownBufferData>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,MTLBoundsCheckPass::KnownBufferData>>>::__emplace_unique_key_args<llvm::Value *,llvm::Value *&,MTLBoundsCheckPass::KnownBufferData&>((uint64_t)v67, &v141, &v141, &v146);
        if (!v68)
          goto LABEL_7;
        goto LABEL_54;
      }
      v123 = *(_QWORD *)(v141 + 8);
      if (v123)
      {
        v124 = -1;
        do
        {
          v125 = *(_QWORD *)(v123 + 24);
          v161[0] = 0;
          if (v125)
          {
            v126 = MTLBoundsCheck::lookThroughPointerOps(v125, 0);
            v151 = xmmword_24105A390;
            v152 = xmmword_24105A3A0;
            v150 = "bounds.fold";
            v153 = 3;
            v154 = (uint64_t)v161;
            if (llvm::PatternMatch::match_combine_and<llvm::PatternMatch::match_combine_and<llvm::PatternMatch::match_combine_and<llvm::PatternMatch::match_combine_and<call_match<llvm::StringRef>,llvm::PatternMatch::Argument_match<llvm::PatternMatch::class_match<llvm::Value>>>,llvm::PatternMatch::Argument_match<llvm::PatternMatch::class_match<llvm::Value>>>,llvm::PatternMatch::Argument_match<llvm::PatternMatch::class_match<llvm::Value>>>,llvm::PatternMatch::Argument_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>>>::match<llvm::Value>((uint64_t)&v150, v126))
            {
              v127 = (_QWORD *)(v161[0] + 24);
              if (*(_DWORD *)(v161[0] + 32) >= 0x41u)
                v127 = (_QWORD *)*v127;
              v128 = *(_DWORD *)v127;
              if (v124 >= v128)
                v124 = v128;
            }
          }
          v123 = *(_QWORD *)(v123 + 8);
        }
        while (v123);
        if (v124 != -1)
        {
          v148 = v124;
          v129 = (llvm::Value *)UDiv;
          v130 = (llvm::Value *)llvm::ConstantInt::get();
          WORD4(v152) = 257;
          UDiv = llvm::IRBuilderBase::CreateUDiv(v138, v129, v130, (const llvm::Twine *)&v150, 0);
          v131 = *((_QWORD *)this + 106) + 4 * (int)log2((double)v124);
          ++*(_DWORD *)(v131 + 36);
          goto LABEL_43;
        }
      }
    }
    v148 = 1;
    goto LABEL_43;
  }
LABEL_54:
  v87 = *((_QWORD *)v68 + 3);
  v86 = *((_QWORD *)v68 + 4);
  v88 = (llvm::CmpInst **)*((_QWORD *)v68 + 5);
  v89 = v68[12];
  *(_QWORD *)(a5 + 16) = v87;
  *(_QWORD *)(a5 + 24) = v86;
  *(_QWORD *)(a5 + 32) = v88;
  v90 = *(_QWORD *)(*((_QWORD *)this + 4) + 20);
  if ((v90 & 0x100) != 0)
  {
    v139[0] = 0;
    v159 = 0;
    v160 = 0;
    v158 = 0;
    v91 = MTLBoundsCheck::lookThroughPointerOps((uint64_t)a3, 0);
    v151 = xmmword_24105A390;
    v150 = "bounds.fold";
    *(_QWORD *)&v152 = v139;
    *((_QWORD *)&v152 + 1) = 1;
    v153 = (uint64_t)&v160;
    v154 = 2;
    v155 = &v158;
    v156 = 3;
    v157 = &v159;
    if (llvm::PatternMatch::match_combine_and<llvm::PatternMatch::match_combine_and<llvm::PatternMatch::match_combine_and<llvm::PatternMatch::match_combine_and<call_match<llvm::StringRef>,llvm::PatternMatch::Argument_match<llvm::PatternMatch::bind_ty<llvm::Value>>>,llvm::PatternMatch::Argument_match<llvm::PatternMatch::bind_ty<llvm::Value>>>,llvm::PatternMatch::Argument_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>>>,llvm::PatternMatch::Argument_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>>>::match<llvm::Value>((uint64_t)&v150, v91))
    {
      v92 = (llvm::Value *)v160;
      WORD4(v152) = 257;
      v93 = (llvm::Value *)llvm::IRBuilderBase::CreateUDiv(v138, v158, (llvm::Value *)v159, (const llvm::Twine *)&v150, 0);
      AddSat = MTLIRBuilder::CreateAddSat(v138, v92, v93);
      *(_QWORD *)(a5 + 48) = v139[0];
      *(_QWORD *)(a5 + 56) = AddSat;
      v95 = v159 + 3;
      if (*((_DWORD *)v159 + 8) >= 0x41u)
        v95 = (_QWORD *)*v95;
      if (*v95 != v89)
      {
        v96 = (llvm::Value *)v160;
        v97 = *((_QWORD *)this + 10);
        WORD4(v152) = 257;
        v98 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v138, 38, (uint64_t)v158, v97, (uint64_t)&v150);
        v162 = 257;
        v99 = (llvm::Value *)llvm::IRBuilderBase::CreateUDiv(v138, v98, (llvm::Value *)v159, (const llvm::Twine *)v161, 0);
        v100 = (llvm::Value *)llvm::ConstantInt::get();
        v149 = 257;
        v101 = llvm::IRBuilderBase::CreateSub(v138, v99, v100, (const llvm::Twine *)&v146, 0, 0);
        v160 = (llvm::BasicBlock **)MTLIRBuilder::CreateAddSat(v138, v96, v101);
      }
      WORD4(v152) = 257;
      ICmp = llvm::IRBuilderBase::CreateICmp((uint64_t)v138, 35, v88, (uint64_t)AddSat, (uint64_t)&v150);
      *v7 = ICmp;
      if (*(_BYTE *)(ICmp + 16) == 16)
      {
        v103 = *(_DWORD *)(ICmp + 32);
        if (v103 > 0x40)
          v104 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(ICmp + 24)) == v103 - 1;
        else
          v104 = *(_QWORD *)(ICmp + 24) == 1;
        v119 = v104;
        *(_BYTE *)a5 = v119;
      }
      *(_BYTE *)(a5 + 1) = 1;
      v120 = v159 + 3;
      if (*((_DWORD *)v159 + 8) >= 0x41u)
        v120 = (_QWORD *)*v120;
      *(_DWORD *)(a5 + 64) = *v120;
      ++*(_DWORD *)(*((_QWORD *)this + 106) + 20);
      return;
    }
    ++*(_DWORD *)(*((_QWORD *)this + 106) + 56);
    v90 = *(_QWORD *)(*((_QWORD *)this + 4) + 20);
  }
  a2 = v138;
  if ((v90 & 0x100) == 0)
  {
    v105 = *((_QWORD *)this + 9);
    WORD4(v152) = 257;
    v106 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v138, 47, (uint64_t)a3, v105, (uint64_t)&v150);
    if ((*(_BYTE *)(*((_QWORD *)this + 4) + 20) & 4) != 0)
    {
      WORD4(v152) = 257;
      v106 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v138, v106, 0x3FFFFFFFFFFFFuLL, (const llvm::Twine *)&v150);
    }
    WORD4(v152) = 257;
    NSWFoldAdd = (llvm::CmpInst **)MTLIRBuilder::CreateNSWFoldAdd(v138, v106, a4, (const llvm::Twine *)&v150);
    WORD4(v152) = 257;
    v108 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t)v138, 35, NSWFoldAdd, v87, (uint64_t)&v150);
    v162 = 257;
    v109 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t)v138, 37, NSWFoldAdd, v86, (uint64_t)v161);
    v149 = 257;
    *v7 = llvm::IRBuilderBase::CreateAnd(v138, v108, v109, (const llvm::Twine *)&v146);
    return;
  }
LABEL_7:
  if ((*(_BYTE *)(*((_QWORD *)this + 4) + 21) & 0x10) != 0)
  {
    *(_BYTE *)a5 = 1;
  }
  else
  {
    v14 = *((_QWORD *)this + 9);
    WORD4(v152) = 257;
    v15 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)a2, 47, (uint64_t)a3, v14, (uint64_t)&v150);
    if (*((_BYTE *)this + 840))
    {
      v16 = llvm::ConstantInt::get();
    }
    else
    {
      WORD4(v152) = 257;
      v17 = (llvm::Value *)llvm::ConstantInt::get();
      LShr = llvm::IRBuilderBase::CreateLShr(a2, v15, v17, (const llvm::Twine *)&v150, 0);
      v19 = *((_QWORD *)this + 13);
      v162 = 257;
      v16 = llvm::IRBuilderBase::CreateCast((uint64_t)a2, 38, LShr, v19, (uint64_t)v161);
    }
    v20 = v16;
    WORD4(v152) = 257;
    v21 = (llvm::Value *)llvm::ConstantInt::get();
    v22 = (llvm::Value *)llvm::IRBuilderBase::CreateLShr(a2, v15, v21, (const llvm::Twine *)&v150, 0);
    WORD4(v152) = 257;
    v23 = (llvm::Value *)llvm::ConstantInt::get();
    v24 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(a2, v22, v23, (const llvm::Twine *)&v150);
    WORD4(v152) = 257;
    v25 = (llvm::Value *)llvm::ConstantInt::get();
    *(_QWORD *)(a5 + 40) = llvm::IRBuilderBase::CreateLShr(a2, v24, v25, (const llvm::Twine *)&v150, 0);
    if ((*(_BYTE *)(*((_QWORD *)this + 4) + 20) & 4) != 0)
    {
      WORD4(v152) = 257;
      v26 = (llvm::Value *)llvm::ConstantInt::get();
      v15 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(a2, v15, v26, (const llvm::Twine *)&v150);
    }
    WORD4(v152) = 257;
    v137 = MTLIRBuilder::CreateNSWFoldAdd(a2, v15, a4, (const llvm::Twine *)&v150);
    v27 = (llvm::Type *)*((_QWORD *)this + 9);
    WORD4(v152) = 257;
    PHI = llvm::IRBuilderBase::CreatePHI(a2, v27, 0, (const llvm::Twine *)&v150, v28);
    v30 = (llvm::Type *)*((_QWORD *)this + 9);
    WORD4(v152) = 257;
    v32 = (llvm::PHINode *)llvm::IRBuilderBase::CreatePHI(a2, v30, 0, (const llvm::Twine *)&v150, v31);
    v159 = 0;
    v160 = 0;
    v135 = (llvm::PHINode *)PHI;
    llvm::SplitBlockAndInsertIfThenElse();
    if (*(unsigned __int8 *)(v20 + 16) >= 0x15u)
      ++*(_DWORD *)(*((_QWORD *)this + 106) + 96);
    llvm::IRBuilderBase::SetInsertPoint(a2, (llvm::Instruction *)v160);
    v33 = (llvm::Value *)MTLBoundsCheck::SharedPassData::getOrInsertCheckBufferGV(*((MTLBoundsCheck::SharedPassData **)this
                                                                                  + 8));
    v34 = (llvm::Type *)*((_QWORD *)v33 + 3);
    WORD4(v152) = 257;
    v35 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)a2, v34, (uint64_t)v33, 0, 0, (uint64_t)&v150);
    v36 = a2;
    v37 = *((_QWORD *)this + 8);
    Name = (char *)llvm::Value::getName(v33);
    GVBaseType = (llvm::Type *)MTLBoundsCheck::SharedPassData::getGVBaseType(v37, Name, v39);
    WORD4(v152) = 257;
    v41 = llvm::IRBuilderBase::CreateInBoundsGEP(v36, GVBaseType, v35, v24, (const llvm::Twine *)&v150);
    v42 = *((_QWORD *)this + 8);
    v43 = (char *)llvm::Value::getName(v33);
    v45 = (llvm::Type *)MTLBoundsCheck::SharedPassData::getGVBaseType(v42, v43, v44);
    v46 = (llvm::Value *)llvm::ConstantInt::get();
    WORD4(v152) = 257;
    v47 = MTLIRBuilder::CreateNSWFoldAdd(v36, v24, v46, (const llvm::Twine *)&v150);
    v162 = 257;
    v48 = llvm::IRBuilderBase::CreateInBoundsGEP(v36, v45, v35, v47, (const llvm::Twine *)v161);
    v49 = *(llvm::Type **)(v41 + 72);
    WORD4(v152) = 257;
    v50 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v36, v49, v41, 0, 0, (uint64_t)&v150);
    v51 = *(llvm::Type **)(v48 + 72);
    WORD4(v152) = 257;
    v52 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v36, v51, v48, 0, 0, (uint64_t)&v150);
    llvm::PHINode::addIncoming(v135, v50, v160[5]);
    NullValue = (llvm::Value *)llvm::Constant::getNullValue(*(llvm::Constant **)v50, v53);
    llvm::PHINode::addIncoming(v135, NullValue, v159[5]);
    llvm::PHINode::addIncoming(v32, v52, v160[5]);
    AllOnesValue = (llvm::Value *)llvm::Constant::getAllOnesValue(*(llvm::Constant **)v52, v55);
    llvm::PHINode::addIncoming(v32, AllOnesValue, v159[5]);
    v57 = *((_QWORD *)v32 + 4);
    if (v57)
      v58 = v57 == *((_QWORD *)v32 + 5) + 40;
    else
      v58 = 1;
    if (v58)
      v59 = 0;
    else
      v59 = (llvm::Instruction *)(v57 - 24);
    llvm::IRBuilderBase::SetInsertPoint(v36, v59);
    *(_QWORD *)(a5 + 16) = v135;
    *(_QWORD *)(a5 + 24) = v32;
    v60 = *(llvm::CmpInst ***)(a5 + 40);
    v61 = llvm::ConstantInt::get();
    WORD4(v152) = 257;
    v62 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t)v36, 37, v60, v61, (uint64_t)&v150);
    v162 = 257;
    v63 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t)v36, 35, (llvm::CmpInst **)v137, (uint64_t)v135, (uint64_t)v161);
    v149 = 257;
    v64 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t)v36, 37, (llvm::CmpInst **)v137, (uint64_t)v32, (uint64_t)&v146);
    v145 = 257;
    v65 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v36, v63, v64, (const llvm::Twine *)&v141);
    v140 = 257;
    *(_QWORD *)(a5 + 8) = llvm::IRBuilderBase::CreateAnd(v36, v62, v65, (const llvm::Twine *)v139);
  }
}

uint64_t MTLBoundsCheckPass::emitBadAccessNotice(uint64_t result, llvm::Constant **a2, uint64_t a3, llvm::Instruction *a4, uint64_t *a5)
{
  uint64_t v8;
  llvm::Value *v9;
  uint64_t v10;
  uint64_t inserted;
  llvm::Type *v12;
  llvm::Value *AlignedLoad;
  uint64_t v14;
  llvm::Type *v15;
  llvm::Value *v16;
  llvm::ConstantPointerNull *Int8PtrTy;
  llvm::PointerType *v18;
  uint64_t v19;
  llvm::Type *v20;
  llvm::Value *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  llvm::Value *Cast;
  const llvm::Twine *ImageIDFunction;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  llvm::Value *v30;
  llvm::Value *v31;
  uint64_t v32;
  uint64_t v33;
  llvm::Value *v34;
  llvm::Value *v35;
  llvm::Instruction *Sub;
  const llvm::Twine *v37;
  uint64_t v38;
  llvm::Value *v39;
  uint64_t v40;
  llvm::Value *v41;
  llvm::Value *v42;
  llvm::Value *v43;
  uint64_t v44;
  llvm::Value *v45;
  llvm::Value *v46;
  llvm::Value *v47;
  void *__p[2];
  uint64_t v49;
  __int16 v50;
  _BYTE v51[32];
  __int16 v52;

  if ((*(_BYTE *)(*(_QWORD *)(result + 32) + 20) & 2) != 0)
  {
    v8 = result;
    MTLBoundsCheck::SharedPassData::indexForInstruction(*(MTLBoundsCheck::SharedPassData **)(result + 64), a4);
    v9 = (llvm::Value *)llvm::ConstantInt::get();
    llvm::ConstantInt::get();
    v10 = *(_QWORD *)(a3 + 40);
    if (!v10)
    {
      __p[0] = 0;
      __p[1] = 0;
      v49 = 0;
      llvm::raw_string_ostream::raw_string_ostream((uint64_t)v51, (uint64_t)__p);
      llvm::Value::print(*(llvm::Value **)(a3 + 48), (llvm::raw_ostream *)v51);
      v10 = llvm::ConstantInt::get();
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v51);
      if (SHIBYTE(v49) < 0)
        operator delete(__p[0]);
    }
    v47 = v9;
    inserted = MTLBoundsCheck::SharedPassData::getOrInsertReportBufferGV(*(llvm::Type ****)(v8 + 64));
    v12 = *(llvm::Type **)(inserted + 24);
    v52 = 257;
    AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)a2, v12, inserted, 0, 0, (uint64_t)v51);
    v14 = MTLBoundsCheck::SharedPassData::getOrInsertDrawIDBufferGV(*(MTLBoundsCheck::SharedPassData **)(v8 + 64));
    v15 = *(llvm::Type **)(v14 + 24);
    v52 = 257;
    v16 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)a2, v15, v14, 0, 0, (uint64_t)v51);
    if ((*(_BYTE *)(*(_QWORD *)(v8 + 32) + 21) & 2) != 0)
    {
      v19 = MTLBoundsCheck::SharedPassData::getOrInsertStackTraceGV(*(llvm::Type ****)(v8 + 64));
      v20 = *(llvm::Type **)(v19 + 24);
      v52 = 257;
      result = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)a2, v20, v19, 0, 0, (uint64_t)v51);
    }
    else
    {
      Int8PtrTy = (llvm::ConstantPointerNull *)llvm::Type::getInt8PtrTy(*(llvm::Type **)(v8 + 40), 0);
      result = llvm::ConstantPointerNull::get(Int8PtrTy, v18);
    }
    v21 = (llvm::Value *)result;
    v22 = *(_QWORD *)(*(_QWORD *)(v8 + 32) + 20);
    if (*(_BYTE *)(a3 + 1))
    {
      if ((v22 & 0x2000) != 0)
      {
        v23 = *(_QWORD *)(a3 + 56);
        v24 = *(_QWORD *)(v8 + 72);
        v52 = 257;
        Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)a2, 39, v23, v24, (uint64_t)v51);
        ImageIDFunction = MTLBoundsCheck::SharedPassData::getOrInsertGetImageIDFunction(*(MTLBoundsCheck::SharedPassData **)(v8 + 64));
        if (ImageIDFunction)
          v27 = *((_QWORD *)ImageIDFunction + 3);
        else
          v27 = 0;
        v52 = 257;
        v43 = (llvm::Value *)llvm::IRBuilderBase::CreateCall((uint64_t)a2, v27, (uint64_t)ImageIDFunction, 0, 0, (uint64_t)v51, 0);
        v44 = *(_QWORD *)(v8 + 88);
        v50 = 257;
        v45 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)a2, 38, v10, v44, (uint64_t)__p);
        v46 = (llvm::Value *)llvm::ConstantInt::get();
        return MTLIRBuilder::CreateBadAccessCall(a2, AlignedLoad, v16, v21, v43, Cast, v45, v46, v9, 0);
      }
    }
    else
    {
      if ((v22 & 8) != 0)
      {
        v28 = *a5;
        v29 = *(_QWORD *)(v8 + 72);
        v52 = 257;
        v30 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)a2, 47, (uint64_t)a5, v29, (uint64_t)v51);
        v52 = 257;
        v31 = (llvm::Value *)llvm::ConstantInt::get();
        v32 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)a2, v30, v31, (const llvm::Twine *)v51);
        v52 = 257;
        a5 = (uint64_t *)llvm::IRBuilderBase::CreateCast((uint64_t)a2, 48, v32, v28, (uint64_t)v51);
      }
      v33 = *(_QWORD *)(v8 + 72);
      v52 = 257;
      v34 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)a2, 47, (uint64_t)a5, v33, (uint64_t)v51);
      v35 = *(llvm::Value **)(a3 + 16);
      v50 = 257;
      Sub = llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)a2, v34, v35, (const llvm::Twine *)__p, 0, 0);
      v37 = MTLBoundsCheck::SharedPassData::getOrInsertGetImageIDFunction(*(MTLBoundsCheck::SharedPassData **)(v8 + 64));
      if (v37)
        v38 = *((_QWORD *)v37 + 3);
      else
        v38 = 0;
      v52 = 257;
      v39 = (llvm::Value *)llvm::IRBuilderBase::CreateCall((uint64_t)a2, v38, (uint64_t)v37, 0, 0, (uint64_t)v51, 0);
      v40 = *(_QWORD *)(v8 + 88);
      v50 = 257;
      v41 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)a2, 38, v10, v40, (uint64_t)__p);
      v42 = (llvm::Value *)llvm::ConstantInt::get();
      return MTLIRBuilder::CreateBadAccessCall(a2, AlignedLoad, v16, v21, v39, Sub, v41, v42, v47, 0);
    }
  }
  return result;
}

void sub_240FC70C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t llvm::IRBuilderBase::CreateNot(llvm::IRBuilderBase *this, llvm::Value *a2, const llvm::Twine *a3)
{
  uint64_t v5;
  BOOL v6;
  uint64_t Not;

  if (a2 && *((unsigned __int8 *)a2 + 16) <= 0x14u)
  {
    v5 = (*(uint64_t (**)(_QWORD, llvm::Value *))(**((_QWORD **)this + 9) + 208))(*((_QWORD *)this + 9), a2);
    if (v5)
      v6 = *(unsigned __int8 *)(v5 + 16) >= 0x1Cu;
    else
      v6 = 0;
    if (v6)
      return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, v5, (uint64_t)a3);
  }
  else
  {
    Not = llvm::BinaryOperator::CreateNot();
    return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, Not, (uint64_t)a3);
  }
  return v5;
}

uint64_t MTLBoundsCheckPass::emitPointerConvert(uint64_t a1, llvm::IRBuilderBase *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  llvm::Value *Cast;
  llvm::Value *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[32];
  __int16 v18;

  v4 = a4;
  v7 = *(_QWORD *)(a1 + 32);
  if ((*(_BYTE *)(v7 + 20) & 8) != 0)
  {
    v9 = *a4;
    v10 = *(_QWORD *)(a1 + 72);
    v18 = 257;
    Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)a2, 47, (uint64_t)v4, v10, (uint64_t)v17);
    v18 = 257;
    v12 = (llvm::Value *)llvm::ConstantInt::get();
    v13 = llvm::IRBuilderBase::CreateAnd(a2, Cast, v12, (const llvm::Twine *)v17);
    v18 = 257;
    v4 = (uint64_t *)llvm::IRBuilderBase::CreateCast((uint64_t)a2, 48, v13, v9, (uint64_t)v17);
    v7 = *(_QWORD *)(a1 + 32);
  }
  if (*(_DWORD *)(v7 + 4) && *(_DWORD *)(v7 + 12) == 2)
  {
    v14 = *(_QWORD *)(a3 + 48);
    v15 = *v4;
    v18 = 257;
    return llvm::IRBuilderBase::CreateCast((uint64_t)a2, 49, v14, v15, (uint64_t)v17);
  }
  return (uint64_t)v4;
}

uint64_t llvm::SmallVectorTemplateBase<MTLBoundsCheckPass::MemoryAccessInfo,true>::growAndEmplaceBack<llvm::Instruction *,llvm::Value *&,llvm::TypeSize &,BOOL>(uint64_t a1, llvm::Instruction **a2, llvm::Value **a3, uint64_t a4, char *a5)
{
  llvm::Instruction *v7;
  llvm::Value *v8;
  unint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  __int128 v12;
  uint64_t v13;
  _BYTE v15[32];

  v7 = *a2;
  v8 = *a3;
  v9 = llvm::TypeSize::operator unsigned long long();
  MTLBoundsCheckPass::MemoryAccessInfo::MemoryAccessInfo((MTLBoundsCheckPass::MemoryAccessInfo *)v15, v7, v8, v9, *a5);
  v10 = (_OWORD *)llvm::SmallVectorTemplateCommon<MTLBoundsCheckPass::MemoryAccessInfo,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<MTLBoundsCheckPass::MemoryAccessInfo,true>>(a1, (unint64_t)v15, 1);
  v11 = (_OWORD *)(*(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 8));
  v12 = v10[1];
  *v11 = *v10;
  v11[1] = v12;
  v13 = (*(_DWORD *)(a1 + 8) + 1);
  *(_DWORD *)(a1 + 8) = v13;
  return *(_QWORD *)a1 + 32 * v13 - 32;
}

MTLBoundsCheckPass::MemoryAccessInfo *MTLBoundsCheckPass::MemoryAccessInfo::MemoryAccessInfo(MTLBoundsCheckPass::MemoryAccessInfo *this, llvm::Instruction *a2, llvm::Value *a3, unint64_t a4, char a5)
{
  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  *((_QWORD *)this + 2) = 0;
  *((_BYTE *)this + 24) = a5;
  llvm::Instruction::getModule(a2);
  llvm::IntegerType::get();
  *((_QWORD *)this + 2) = llvm::ConstantInt::get();
  return this;
}

unint64_t llvm::SmallVectorTemplateCommon<MTLBoundsCheckPass::MemoryAccessInfo,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<MTLBoundsCheckPass::MemoryAccessInfo,true>>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v8;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v6 = *(_QWORD *)a1 + 32 * v4;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
  }
  return v3;
}

uint64_t llvm::SmallVectorTemplateBase<MTLBoundsCheckPass::MemoryAccessInfo,true>::growAndEmplaceBack<llvm::Instruction *,llvm::Value *&,llvm::Value *&,BOOL &>(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, char *a5)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  _OWORD *v9;
  _OWORD *v10;
  __int128 v11;
  uint64_t v12;
  _QWORD v14[3];
  char v15;

  v6 = *a3;
  v7 = *a4;
  v8 = *a5;
  v14[0] = *a2;
  v14[1] = v6;
  v14[2] = v7;
  v15 = v8;
  v9 = (_OWORD *)llvm::SmallVectorTemplateCommon<MTLBoundsCheckPass::MemoryAccessInfo,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<MTLBoundsCheckPass::MemoryAccessInfo,true>>(a1, (unint64_t)v14, 1);
  v10 = (_OWORD *)(*(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 8));
  v11 = v9[1];
  *v10 = *v9;
  v10[1] = v11;
  v12 = (*(_DWORD *)(a1 + 8) + 1);
  *(_DWORD *)(a1 + 8) = v12;
  return *(_QWORD *)a1 + 32 * v12 - 32;
}

uint64_t MTLIRBuilder::MTLIRBuilder<llvm::Instruction *&>(uint64_t a1, llvm::Value **a2)
{
  llvm::LLVMContext **v3;

  v3 = (llvm::LLVMContext **)llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::IRBuilder(a1, *a2, 0, 0, 0);
  MTLIRBuilder::initTypeCache((MTLIRBuilder *)v3, v3[8]);
  return a1;
}

void sub_240FC74AC(_Unwind_Exception *a1)
{
  void **v1;

  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder(v1);
  _Unwind_Resume(a1);
}

uint64_t MTLBoundsCheckPass::backtracePointer(MTLBoundsCheckPass *this, llvm::Value *a2)
{
  _QWORD *v3;
  uint64_t MetadataImpl;
  unsigned int v5;
  llvm::Value *v6;
  llvm::Value *v7;
  llvm::Value *PointerOperand;
  llvm::Value *v10;
  llvm::Value *v11;

  v11 = a2;
  if (!a2)
    return 0;
  v3 = std::__hash_table<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>>>::find<llvm::Value *>((_QWORD *)(*((_QWORD *)this + 8) + 128), &v11);
  if (v3)
    return v3[3];
  v5 = *((unsigned __int8 *)v11 + 16);
  if (v5 <= 0x1B)
    v6 = 0;
  else
    v6 = v11;
  v10 = v6;
  if (!v6)
  {
    if (v5 == 5)
    {
      PointerOperand = (llvm::Value *)getPointerOperand((uint64_t)v11);
      return MTLBoundsCheckPass::backtracePointer(this, PointerOperand);
    }
    else
    {
      MetadataImpl = 0;
      ++*(_DWORD *)(*((_QWORD *)this + 106) + 92);
    }
    return MetadataImpl;
  }
  if (!*((_QWORD *)v6 + 6) && (*((_BYTE *)v6 + 23) & 0x20) == 0
    || (MetadataImpl = llvm::Instruction::getMetadataImpl()) == 0)
  {
    v7 = (llvm::Value *)getPointerOperand((uint64_t)v6);
    if (v7)
    {
      MetadataImpl = MTLBoundsCheckPass::backtracePointer(this, v7);
      if (MetadataImpl)
      {
        llvm::Instruction::setMetadata();
        llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)this + 272, (uint64_t *)&v10);
      }
      return MetadataImpl;
    }
    return 0;
  }
  return MetadataImpl;
}

uint64_t llvm::IRBuilderBase::CreateConstGEP1_32(llvm::Type **this, llvm::Type *a2, llvm::Value *a3, unsigned int a4, const llvm::Twine *a5)
{
  uint64_t result;
  uint64_t v10;
  uint64_t *v11;

  llvm::Type::getInt32Ty(this[8], a2);
  v11 = (uint64_t *)llvm::ConstantInt::get();
  result = (*(uint64_t (**)(llvm::Type *, llvm::Type *, llvm::Value *, uint64_t **, uint64_t, _QWORD))(*(_QWORD *)this[9] + 48))(this[9], a2, a3, &v11, 1, 0);
  if (!result)
  {
    v10 = llvm::GetElementPtrInst::Create((uint64_t)a2, (uint64_t *)a3, &v11, 1);
    return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, v10, (uint64_t)a5);
  }
  return result;
}

uint64_t llvm::IRBuilderBase::CreateConstGEP1_64(llvm::Type **this, llvm::Type *a2, llvm::Value *a3, unint64_t a4, const llvm::Twine *a5)
{
  uint64_t result;
  uint64_t v10;
  uint64_t *v11;

  llvm::Type::getInt64Ty(this[8], a2);
  v11 = (uint64_t *)llvm::ConstantInt::get();
  result = (*(uint64_t (**)(llvm::Type *, llvm::Type *, llvm::Value *, uint64_t **, uint64_t, _QWORD))(*(_QWORD *)this[9] + 48))(this[9], a2, a3, &v11, 1, 0);
  if (!result)
  {
    v10 = llvm::GetElementPtrInst::Create((uint64_t)a2, (uint64_t *)a3, &v11, 1);
    return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, v10, (uint64_t)a5);
  }
  return result;
}

uint64_t llvm::IRBuilderBase::CreateUDiv(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4, char a5)
{
  uint64_t v7;
  BOOL v8;
  llvm::Instruction *v10;
  uint64_t *v11;
  uint64_t v12;

  if (a2 && *((unsigned __int8 *)a2 + 16) <= 0x14u && a3 && *((unsigned __int8 *)a3 + 16) <= 0x14u)
  {
    v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 104))(*((_QWORD *)this + 9));
    if (v7)
      v8 = *(unsigned __int8 *)(v7 + 16) >= 0x1Cu;
    else
      v8 = 0;
    if (v8)
      return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, v7, (uint64_t)a4);
  }
  else
  {
    if ((a5 & 1) != 0)
    {
      v10 = (llvm::Instruction *)llvm::BinaryOperator::Create();
      llvm::Instruction::setIsExact(v10);
      v11 = (uint64_t *)this;
      v12 = (uint64_t)v10;
    }
    else
    {
      v12 = llvm::BinaryOperator::Create();
      v11 = (uint64_t *)this;
    }
    return llvm::IRBuilderBase::Insert<llvm::CastInst>(v11, v12, (uint64_t)a4);
  }
  return v7;
}

uint64_t llvm::IRBuilderBase::CreateAnd(llvm::IRBuilderBase *this, llvm::Value *a2, unint64_t a3, const llvm::Twine *a4)
{
  llvm::Value *v7;

  v7 = (llvm::Value *)llvm::ConstantInt::get();
  return llvm::IRBuilderBase::CreateAnd(this, a2, v7, a4);
}

uint64_t llvm::IRBuilderBase::CreateInBoundsGEP(llvm::IRBuilderBase *this, llvm::Type *a2, llvm::Value *a3, llvm::Value *a4, const llvm::Twine *a5)
{
  uint64_t result;
  llvm::GetElementPtrInst *v10;
  uint64_t *v11;
  llvm::Value *v12;
  __int16 v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v11 = (uint64_t *)a4;
  v12 = a4;
  result = (*(uint64_t (**)(_QWORD, llvm::Type *, llvm::Value *, llvm::Value **, uint64_t, uint64_t))(**((_QWORD **)this + 9) + 48))(*((_QWORD *)this + 9), a2, a3, &v12, 1, 1);
  if (!result)
  {
    v13 = 257;
    v10 = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::Create((uint64_t)a2, (uint64_t *)a3, &v11, 1);
    llvm::GetElementPtrInst::setIsInBounds(v10);
    return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, (uint64_t)v10, (uint64_t)a5);
  }
  return result;
}

BOOL llvm::PatternMatch::match_combine_and<llvm::PatternMatch::match_combine_and<llvm::PatternMatch::match_combine_and<llvm::PatternMatch::match_combine_and<call_match<llvm::StringRef>,llvm::PatternMatch::Argument_match<llvm::PatternMatch::class_match<llvm::Value>>>,llvm::PatternMatch::Argument_match<llvm::PatternMatch::class_match<llvm::Value>>>,llvm::PatternMatch::Argument_match<llvm::PatternMatch::class_match<llvm::Value>>>,llvm::PatternMatch::Argument_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>>>::match<llvm::Value>(uint64_t a1, uint64_t a2)
{
  return call_match<llvm::StringRef>::match<llvm::Value>(a1, a2)
      && a2
      && *(_BYTE *)(a2 + 16) == 84
      && (llvm::PatternMatch::Argument_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>>::match<llvm::Value>((unsigned int *)(a1 + 40), a2) & 1) != 0;
}

uint64_t llvm::PatternMatch::Argument_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>>::match<llvm::Value>(unsigned int *a1, uint64_t a2)
{
  int v2;
  BOOL v3;
  int v4;
  uint64_t v5;
  BOOL v6;

  v2 = 84;
  if (a2)
    v3 = *(_BYTE *)(a2 + 16) == 84;
  else
    v3 = 0;
  v4 = v3;
  if (v3)
  {
    v5 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * *a1);
    if (v5)
      v6 = *(_BYTE *)(v5 + 16) == 16;
    else
      v6 = 0;
    if (v6)
    {
      **((_QWORD **)a1 + 1) = v5;
      v2 = 1;
    }
    else
    {
      v2 = 0;
    }
  }
  return v4 & v2;
}

BOOL call_match<llvm::StringRef>::match<llvm::Value>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const void *Name;
  size_t v5;
  size_t v6;

  if (!a2 || *(_BYTE *)(a2 + 16) != 84)
    return 0;
  v3 = *(_QWORD *)(a2 - 32);
  if (!v3 || *(_BYTE *)(v3 + 16) || *(_QWORD *)(v3 + 24) != *(_QWORD *)(a2 + 72))
    v3 = 0;
  Name = (const void *)llvm::Value::getName((llvm::Value *)v3);
  v5 = *(_QWORD *)(a1 + 8);
  return v6 >= v5 && (!v5 || !memcmp(Name, *(const void **)a1, v5));
}

char *std::__hash_table<std::__hash_value_type<llvm::Value *,MTLBoundsCheckPass::KnownBufferData>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,MTLBoundsCheckPass::KnownBufferData>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,MTLBoundsCheckPass::KnownBufferData>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,MTLBoundsCheckPass::KnownBufferData>>>::__emplace_unique_key_args<llvm::Value *,llvm::Value *&,MTLBoundsCheckPass::KnownBufferData&>(uint64_t a1, _QWORD *a2, _QWORD *a3, _OWORD *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  void **v13;
  char *v14;
  unint64_t v15;
  __int128 v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v9 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v8 >> 47) ^ v8);
  v10 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = v10 & (v11 - 1);
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = (char *)*v13;
      if (*v13)
      {
        do
        {
          v15 = *((_QWORD *)v14 + 1);
          if (v15 == v10)
          {
            if (*((_QWORD *)v14 + 2) == *a2)
              return v14;
          }
          else
          {
            if (v12.u32[0] > 1uLL)
            {
              if (v15 >= v11)
                v15 %= v11;
            }
            else
            {
              v15 &= v11 - 1;
            }
            if (v15 != v4)
              break;
          }
          v14 = *(char **)v14;
        }
        while (v14);
      }
    }
  }
  v14 = (char *)operator new(0x38uLL);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v10;
  *((_QWORD *)v14 + 2) = *a3;
  v16 = a4[1];
  *(_OWORD *)(v14 + 24) = *a4;
  *(_OWORD *)(v14 + 40) = v16;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *(_QWORD *)v14 = *v24;
LABEL_38:
    *v24 = v14;
    goto LABEL_39;
  }
  *(_QWORD *)v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v23 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v14)
  {
    v25 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v25 >= v11)
        v25 %= v11;
    }
    else
    {
      v25 &= v11 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_240FC7CD4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL llvm::PatternMatch::match_combine_and<llvm::PatternMatch::match_combine_and<llvm::PatternMatch::match_combine_and<llvm::PatternMatch::match_combine_and<call_match<llvm::StringRef>,llvm::PatternMatch::Argument_match<llvm::PatternMatch::bind_ty<llvm::Value>>>,llvm::PatternMatch::Argument_match<llvm::PatternMatch::bind_ty<llvm::Value>>>,llvm::PatternMatch::Argument_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>>>,llvm::PatternMatch::Argument_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>>>::match<llvm::Value>(uint64_t a1, uint64_t a2)
{
  return llvm::PatternMatch::match_combine_and<llvm::PatternMatch::match_combine_and<llvm::PatternMatch::match_combine_and<call_match<llvm::StringRef>,llvm::PatternMatch::Argument_match<llvm::PatternMatch::bind_ty<llvm::Value>>>,llvm::PatternMatch::Argument_match<llvm::PatternMatch::bind_ty<llvm::Value>>>,llvm::PatternMatch::Argument_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>>>::match<llvm::Value>(a1, a2)&& (llvm::PatternMatch::Argument_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>>::match<llvm::Value>((unsigned int *)(a1 + 64), a2) & 1) != 0;
}

BOOL llvm::PatternMatch::match_combine_and<llvm::PatternMatch::match_combine_and<llvm::PatternMatch::match_combine_and<call_match<llvm::StringRef>,llvm::PatternMatch::Argument_match<llvm::PatternMatch::bind_ty<llvm::Value>>>,llvm::PatternMatch::Argument_match<llvm::PatternMatch::bind_ty<llvm::Value>>>,llvm::PatternMatch::Argument_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>>>::match<llvm::Value>(uint64_t a1, uint64_t a2)
{
  return llvm::PatternMatch::match_combine_and<llvm::PatternMatch::match_combine_and<call_match<llvm::StringRef>,llvm::PatternMatch::Argument_match<llvm::PatternMatch::bind_ty<llvm::Value>>>,llvm::PatternMatch::Argument_match<llvm::PatternMatch::bind_ty<llvm::Value>>>::match<llvm::Value>(a1, a2)&& (llvm::PatternMatch::Argument_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>>::match<llvm::Value>((unsigned int *)(a1 + 48), a2) & 1) != 0;
}

BOOL llvm::PatternMatch::match_combine_and<llvm::PatternMatch::match_combine_and<call_match<llvm::StringRef>,llvm::PatternMatch::Argument_match<llvm::PatternMatch::bind_ty<llvm::Value>>>,llvm::PatternMatch::Argument_match<llvm::PatternMatch::bind_ty<llvm::Value>>>::match<llvm::Value>(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v5;

  result = llvm::PatternMatch::match_combine_and<call_match<llvm::StringRef>,llvm::PatternMatch::Argument_match<llvm::PatternMatch::bind_ty<llvm::Value>>>::match<llvm::Value>(a1, a2);
  if (result)
  {
    result = 0;
    if (a2)
    {
      if (*(_BYTE *)(a2 + 16) == 84)
      {
        v5 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * *(unsigned int *)(a1 + 32));
        if (v5)
        {
          **(_QWORD **)(a1 + 40) = v5;
          return 1;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

BOOL llvm::PatternMatch::match_combine_and<call_match<llvm::StringRef>,llvm::PatternMatch::Argument_match<llvm::PatternMatch::bind_ty<llvm::Value>>>::match<llvm::Value>(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v5;

  result = call_match<llvm::StringRef>::match<llvm::Value>(a1, a2);
  if (result)
  {
    result = 0;
    if (a2)
    {
      if (*(_BYTE *)(a2 + 16) == 84)
      {
        v5 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * *(unsigned int *)(a1 + 16));
        if (v5)
        {
          **(_QWORD **)(a1 + 24) = v5;
          return 1;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t llvm::IRBuilderBase::CreateLShr(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4, char a5)
{
  uint64_t v7;
  BOOL v8;
  llvm::Instruction *v10;
  uint64_t *v11;
  uint64_t v12;

  if (a2 && *((unsigned __int8 *)a2 + 16) <= 0x14u && a3 && *((unsigned __int8 *)a3 + 16) <= 0x14u)
  {
    v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 160))(*((_QWORD *)this + 9));
    if (v7)
      v8 = *(unsigned __int8 *)(v7 + 16) >= 0x1Cu;
    else
      v8 = 0;
    if (v8)
      return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, v7, (uint64_t)a4);
  }
  else
  {
    if ((a5 & 1) != 0)
    {
      v10 = (llvm::Instruction *)llvm::BinaryOperator::Create();
      llvm::Instruction::setIsExact(v10);
      v11 = (uint64_t *)this;
      v12 = (uint64_t)v10;
    }
    else
    {
      v12 = llvm::BinaryOperator::Create();
      v11 = (uint64_t *)this;
    }
    return llvm::IRBuilderBase::Insert<llvm::CastInst>(v11, v12, (uint64_t)a4);
  }
  return v7;
}

uint64_t llvm::raw_string_ostream::raw_string_ostream(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = MEMORY[0x24BED83D8] + 16;
  *(_QWORD *)(a1 + 64) = a2;
  llvm::raw_ostream::SetUnbuffered((llvm::raw_ostream *)a1);
  return a1;
}

void sub_240FC7F90(_Unwind_Exception *a1)
{
  llvm::raw_ostream *v1;

  llvm::raw_ostream::~raw_ostream(v1);
  _Unwind_Resume(a1);
}

uint64_t llvm::raw_ostream::SetUnbuffered(llvm::raw_ostream *this)
{
  if (*((_QWORD *)this + 4) != *((_QWORD *)this + 2))
    llvm::raw_ostream::flush_nonempty(this);
  return llvm::raw_ostream::SetBufferAndMode();
}

uint64_t llvm::SmallVectorTemplateBase<MTLBoundsCheck::MemoryAccessOperand,true>::growAndEmplaceBack<llvm::Value *&,llvm::Value *&,MTLGPUOperation,int>(uint64_t a1, _QWORD *a2, uint64_t *a3, int *a4, int *a5)
{
  uint64_t v6;
  int v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  _QWORD v13[2];
  int v14;
  int v15;

  v6 = *a3;
  v7 = *a4;
  v8 = *a5;
  v13[0] = *a2;
  v13[1] = v6;
  v14 = v7;
  v15 = v8;
  v9 = llvm::SmallVectorTemplateCommon<MTLBoundsCheck::MemoryAccessOperand,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<MTLBoundsCheck::MemoryAccessOperand,true>>(a1, (unint64_t)v13, 1);
  v10 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 8);
  v11 = *(_OWORD *)v9;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v9 + 16);
  *(_OWORD *)v10 = v11;
  LODWORD(v10) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v10;
  return *(_QWORD *)a1 + 24 * v10 - 24;
}

unint64_t llvm::SmallVectorTemplateCommon<MTLBoundsCheck::MemoryAccessOperand,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<MTLBoundsCheck::MemoryAccessOperand,true>>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v8;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v6 = *(_QWORD *)a1 + 24 * v4;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
  }
  return v3;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>,llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::FindAndConstruct(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>,llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::LookupBucketFor<llvm::CallGraphNode *>(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>,llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::InsertIntoBucketImpl<llvm::Function *>((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>,llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::InsertIntoBucketImpl<llvm::Function *>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>,llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::LookupBucketFor<llvm::CallGraphNode *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x24268CD5C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>,llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::moveFromOldBuckets(a1, v4, (_QWORD *)v4 + 2 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>,llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::moveFromOldBuckets(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = llvm::DenseMapBase<llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>,llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::LookupBucketFor<llvm::CallGraphNode *>((uint64_t *)v5, a2, &v10);
      v9 = v10;
      *v10 = *a2;
      v9[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

uint64_t llvm::SmallVectorTemplateBase<MTLBoundsCheck::DebugSubProgram,true>::push_back(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 8);
  if (v6 >= *(_DWORD *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  v7 = *(_QWORD *)v5 + 12 * v6;
  *(_QWORD *)v7 = a2;
  *(_DWORD *)(v7 + 8) = a3;
  ++*(_DWORD *)(v5 + 8);
  return result;
}

uint64_t llvm::SmallVectorTemplateBase<std::string,false>::growAndEmplaceBack<llvm::StringRef>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  size_t v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unsigned int v12;

  v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  v5 = (_QWORD *)(v4 + 24 * *(unsigned int *)(a1 + 8));
  v6 = *(_QWORD *)(a2 + 8);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = v4;
  v8 = *(const void **)a2;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v11 = operator new(v9 + 1);
    v5[1] = v6;
    v5[2] = v10 | 0x8000000000000000;
    *v5 = v11;
    v5 = v11;
    goto LABEL_8;
  }
  *((_BYTE *)v5 + 23) = v6;
  if (v6)
LABEL_8:
    memmove(v5, v8, v6);
  *((_BYTE *)v5 + v6) = 0;
  llvm::SmallVectorTemplateBase<std::string,false>::moveElementsForGrow((__int128 **)a1, v7);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v7;
  v12 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v12;
  *(_DWORD *)(a1 + 12) = 0;
  return v7 + 24 * v12 - 24;
}

void llvm::SmallVectorTemplateBase<std::string,false>::moveElementsForGrow(__int128 **a1, uint64_t a2)
{
  uint64_t v2;
  __int128 *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;

  v2 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v2)
  {
    v3 = *a1;
    v4 = 24 * v2;
    do
    {
      v5 = *v3;
      *(_QWORD *)(a2 + 16) = *((_QWORD *)v3 + 2);
      *(_OWORD *)a2 = v5;
      a2 += 24;
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
      *(_QWORD *)v3 = 0;
      v3 = (__int128 *)((char *)v3 + 24);
      v4 -= 24;
    }
    while (v4);
    v6 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v6)
    {
      v7 = *a1;
      v8 = 24 * v6;
      do
      {
        if (*((char *)v7 + v8 - 1) < 0)
          operator delete(*(void **)((char *)v7 + v8 - 24));
        v8 -= 24;
      }
      while (v8);
    }
  }
}

_QWORD *llvm::SmallVector<llvm::Metadata *,4u>::SmallVector(_QWORD *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = a1 + 2;
  a1[1] = 0x400000000;
  llvm::SmallVectorImpl<llvm::Metadata *>::append<llvm::Metadata * const*,void>((uint64_t)a1, a2, &a2[8 * a3]);
  return a1;
}

void sub_240FC8590(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  void *v3;

  v3 = v2;
  if (*v1 != v3)
    free(*v1);
  _Unwind_Resume(exception_object);
}

_QWORD *llvm::SmallVector<llvm::Metadata *,3u>::SmallVector(_QWORD *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = a1 + 2;
  a1[1] = 0x300000000;
  llvm::SmallVectorImpl<llvm::Metadata *>::append<llvm::Metadata * const*,void>((uint64_t)a1, a2, &a2[8 * a3]);
  return a1;
}

void sub_240FC85EC(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  void *v3;

  v3 = v2;
  if (*v1 != v3)
    free(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t DumpModulePass::DumpModulePass(uint64_t a1, void *__src, size_t __len)
{
  void *v4;
  size_t v7;
  size_t v8;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &DumpModulePass::ID;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = off_25111E848;
  v4 = (void *)(a1 + 32);
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v4 = operator new(v7 + 1);
    *(_QWORD *)(a1 + 40) = __len;
    *(_QWORD *)(a1 + 48) = v8 | 0x8000000000000000;
    *(_QWORD *)(a1 + 32) = v4;
  }
  else
  {
    *(_BYTE *)(a1 + 55) = __len;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v4, __src, __len);
LABEL_9:
  *((_BYTE *)v4 + __len) = 0;
  return a1;
}

void sub_240FC86D8(_Unwind_Exception *a1)
{
  llvm::Pass *v1;

  llvm::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

void DumpModulePass::~DumpModulePass(void **this)
{
  *this = off_25111E848;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  llvm::Pass::~Pass((llvm::Pass *)this);
}

{
  *this = off_25111E848;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  llvm::Pass::~Pass((llvm::Pass *)this);
  JUMPOUT(0x24268D8F0);
}

uint64_t DumpModulePass::runOnModule(DumpModulePass *this, llvm::Module *a2)
{
  void *v3;
  llvm::NamedMDNode *NamedMetadata;
  uint64_t Operand;
  void *String;
  size_t v7;
  const char *v8;
  size_t v9;
  _QWORD *v10;
  void **p_dst;
  uint64_t v12;
  uint64_t v13;
  std::string *v14;
  __int128 v15;
  void **v16;
  std::string::size_type v17;
  llvm *v18;
  llvm::raw_ostream *v19;
  std::string *v20;
  llvm::raw_ostream *v21;
  std::string v23;
  void *__p[2];
  char v25;
  std::string v26;
  __int16 v27;
  void *v28[2];
  _QWORD v29[2];
  __int16 v30;
  void *v31;
  char v32;
  uint64_t v33;
  void **__dst;
  const std::error_category *v35;
  uint64_t v36;

  v3 = (void *)MTLGetShaderCachePath();
  v28[0] = "air.requestHash";
  v30 = 259;
  NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(a2, (const llvm::Twine *)v28);
  if (NamedMetadata)
  {
    Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
    String = (void *)llvm::MDString::getString(*(llvm::MDString **)(Operand - 8 * *(unsigned int *)(Operand + 8)));
    if (String)
    {
      std::string::basic_string[abi:ne180100](&__dst, String, v7);
    }
    else
    {
      __dst = 0;
      v35 = 0;
      v36 = 0;
    }
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v28);
    v8 = (const char *)objc_msgSend(v3, "UTF8String");
    v9 = strlen(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v8, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"/bounds-logs", 12);
    std::stringbuf::str();
    v27 = 260;
    v26.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    llvm::sys::fs::create_directory();
    if (v25 < 0)
      operator delete(__p[0]);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"/", 1);
    if (v36 >= 0)
      p_dst = (void **)&__dst;
    else
      p_dst = __dst;
    if (v36 >= 0)
      v12 = HIBYTE(v36);
    else
      v12 = (uint64_t)v35;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)p_dst, v12);
    std::stringbuf::str();
    v27 = 260;
    v26.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    llvm::sys::fs::create_directory();
    if (v25 < 0)
      operator delete(__p[0]);
    std::stringbuf::str();
    v28[0] = *(void **)MEMORY[0x24BEDB7F0];
    v13 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(void **)((char *)v28 + *((_QWORD *)v28[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
    v29[0] = v13;
    v29[1] = MEMORY[0x24BEDB848] + 16;
    if (v32 < 0)
      operator delete(v31);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x24268D890](&v33);
    if (SHIBYTE(v36) < 0)
      operator delete(__dst);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v23, (char *)&unk_24105C402);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v23.__r_.__value_.__l.__size_)
    {
LABEL_38:
      operator delete(v23.__r_.__value_.__l.__data_);
      return 0;
    }
  }
  else if (!*((_BYTE *)&v23.__r_.__value_.__s + 23))
  {
    return 0;
  }
  LODWORD(__dst) = 0;
  v35 = std::system_category();
  std::operator+<char>();
  v14 = std::string::append(&v26, ".ll");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v29[0] = *((_QWORD *)&v14->__r_.__value_.__l + 2);
  *(_OWORD *)v28 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (v29[0] >= 0)
    v16 = v28;
  else
    v16 = (void **)v28[0];
  if (v29[0] >= 0)
    v17 = HIBYTE(v29[0]);
  else
    v17 = (std::string::size_type)v28[1];
  std::string::append(&v23, (const std::string::value_type *)v16, v17);
  if (SHIBYTE(v29[0]) < 0)
    operator delete(v28[0]);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  v18 = (llvm *)llvm::raw_fd_ostream::raw_fd_ostream();
  v19 = (llvm::raw_ostream *)llvm::dbgs(v18);
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = &v23;
  else
    v20 = (std::string *)v23.__r_.__value_.__r.__words[0];
  v21 = (llvm::raw_ostream *)llvm::raw_ostream::write(v19, (const char *)v20);
  llvm::raw_ostream::operator<<(v21, "\n", 1uLL);
  llvm::Module::print();
  MEMORY[0x24268CCC0](v28);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_38;
  return 0;
}

void sub_240FC8AD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x24BEDB858];
  v3 = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_240FC8C80(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x24268D890](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x24BEDB7F0];
  v3 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x24268D890](a1 + 128);
  return a1;
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x24268D7F4](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x24268D800](v13);
  return a1;
}

void sub_240FC8E38(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x24268D800](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x240FC8E18);
}

void sub_240FC8E80(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_240FC8FB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

void CallingConvFixPass::~CallingConvFixPass(CallingConvFixPass *this)
{
  llvm::Pass::~Pass(this);
  JUMPOUT(0x24268D8F0);
}

uint64_t CallingConvFixPass::runOnFunction(CallingConvFixPass *this, Function *a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;

  v2 = *((_QWORD *)a2 + 10);
  if ((Function *)v2 == (Function *)((char *)a2 + 72))
  {
    v3 = 0;
  }
  else
  {
    v3 = 0;
    do
    {
      if (v2)
        v4 = v2 - 24;
      else
        v4 = 0;
      v5 = v4 + 40;
      for (i = *(_QWORD *)(v4 + 48); i != v5; i = *(_QWORD *)(i + 8))
      {
        v7 = i - 24;
        if (!i)
          v7 = 0;
        v8 = *(unsigned __int8 *)(v7 + 16);
        if (v8 != 84)
          v7 = 0;
        if (i)
        {
          if (v8 == 84)
          {
            v9 = *(_QWORD *)(v7 - 32);
            if (v9)
            {
              if (!*(_BYTE *)(v9 + 16) && *(_QWORD *)(v9 + 24) == *(_QWORD *)(v7 + 72))
              {
                v10 = (*(unsigned __int16 *)(v9 + 18) >> 4) & 0x3FF;
                v11 = *(unsigned __int16 *)(v7 + 18);
                if (v10 != ((v11 >> 2) & 0x3FF))
                {
                  *(_WORD *)(v7 + 18) = v11 & 0xF003 | (4 * v10);
                  v3 = 1;
                }
              }
            }
          }
        }
      }
      v2 = *(_QWORD *)(v2 + 8);
    }
    while ((Function *)v2 != (Function *)((char *)a2 + 72));
  }
  return v3 & 1;
}

uint64_t createMTLMemoryIndirectionPass(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  MetalModulePass::MetalModulePass(v2, (uint64_t)&MemoryIndirectionPass::ID, a1);
  *(_QWORD *)v2 = &off_25111E988;
  *(_QWORD *)(v2 + 192) = 0;
  *(_QWORD *)(v2 + 200) = 0;
  *(_DWORD *)(v2 + 208) = 0;
  *(_QWORD *)(v2 + 216) = 0;
  *(_QWORD *)(v2 + 224) = 0;
  *(_DWORD *)(v2 + 232) = 0;
  return v2;
}

void sub_240FC91C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x24268D8F0](v1, 0x10E1C40DE8B5DE0);
  _Unwind_Resume(a1);
}

void MemoryIndirectionPass::~MemoryIndirectionPass(MemoryIndirectionPass *this)
{
  char *v2;

  *(_QWORD *)this = &off_25111E988;
  v2 = (char *)this + 160;
  llvm::DenseMap<llvm::Function *,llvm::Function *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::Function *>>::~DenseMap((uint64_t)this + 216);
  llvm::DenseMap<llvm::Type *,llvm::Type *,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,llvm::Type *>>::~DenseMap((uint64_t)this + 192);
  *(_QWORD *)this = &off_25111E050;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 136);
  llvm::Pass::~Pass(this);
}

{
  char *v2;

  *(_QWORD *)this = &off_25111E988;
  v2 = (char *)this + 160;
  llvm::DenseMap<llvm::Function *,llvm::Function *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::Function *>>::~DenseMap((uint64_t)this + 216);
  llvm::DenseMap<llvm::Type *,llvm::Type *,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,llvm::Type *>>::~DenseMap((uint64_t)this + 192);
  *(_QWORD *)this = &off_25111E050;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 136);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x24268D8F0);
}

uint64_t MemoryIndirectionPass::runOnModule(MemoryIndirectionPass *this, llvm::Module *a2)
{
  llvm::Module *v2;
  uint64_t GlobalVariable;
  unint64_t *v5;
  unsigned __int8 **inserted;
  uint64_t v7;
  llvm::Module *v8;
  llvm::NamedMDNode *v9;
  unsigned int NumOperands;
  int v11;
  int i;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 **v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  llvm::Module *v20;
  uint64_t EntryFunction;
  unsigned int v22;
  uint64_t v23;
  llvm::Value *v24;
  uint64_t v25;
  _QWORD *String;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  llvm::MDString *v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  BOOL v35;
  BOOL v36;
  BOOL v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t ABITypeAlignment;
  char LocationIndex;
  char v47;
  char v49;
  uint64_t v50;
  llvm::Type *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t PrefTypeAlignment;
  llvm::Type *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  llvm::BasicBlock *v70;
  llvm::BasicBlock *v71;
  llvm::BasicBlock *v72;
  llvm::ReturnInst *Context;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  llvm::Value *v80;
  llvm::Type *v81;
  unint64_t v82;
  unint64_t v83;
  __int16 v84;
  uint64_t AlignedLoad;
  uint64_t Cast;
  llvm::Type **v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  unsigned int v96;
  llvm::Type *v97;
  uint64_t ConstInBoundsGEP2_64;
  llvm::Type *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  unsigned int v108;
  llvm::Type *v109;
  uint64_t v110;
  llvm::Type *v111;
  uint64_t v112;
  llvm::LLVMContext *v113;
  llvm::Instruction *v114;
  uint64_t v115;
  llvm::Value **v116;
  uint64_t v117;
  llvm::Value *v118;
  uint64_t Name;
  unint64_t v120;
  BOOL v121;
  BOOL v122;
  _QWORD *j;
  uint64_t v124;
  uint64_t v125;
  uint64_t k;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  llvm::Module *v132;
  int v133;
  llvm::Value *v134;
  uint64_t v135;
  __n128 v136;
  char v137;
  _QWORD v138[2];
  char v139;
  __n128 v140;
  char v141;
  _QWORD v142[2];
  char v143;
  unsigned int *Attributes;
  uint64_t v145[4];
  __int16 v146;
  __int128 v147;
  uint64_t v148;
  void *v149;
  uint64_t v150;
  _BYTE v151[32];
  void *v152[2];
  _BYTE v153[64];
  void *v154;
  uint64_t v155;
  _BYTE v156[64];
  void *v157;
  uint64_t v158;
  _WORD v159[32];
  __int128 v160;
  _QWORD v161[2];
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  llvm::ReturnInst *v166;
  uint64_t *v167;
  uint64_t *v168;
  uint64_t v169;
  int v170;
  __int16 v171;
  char v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unsigned __int8 **Operand;
  uint64_t v178;
  _QWORD v179[11];

  v2 = a2;
  v179[8] = *MEMORY[0x24BDAC8D0];
  MetalModulePass::runOnModule(this, a2);
  llvm::DenseMapBase<llvm::DenseMap<llvm::Type *,llvm::Type *,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,llvm::Type *>>,llvm::Type *,llvm::Type *,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,llvm::Type *>>::clear((uint64_t)this + 192);
  *((_QWORD *)this + 31) = 0;
  *((_DWORD *)this + 60) = llvm::Module::getMDKindID();
  llvm::DenseMapBase<llvm::DenseMap<llvm::Type *,llvm::Type *,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,llvm::Type *>>,llvm::Type *,llvm::Type *,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,llvm::Type *>>::clear((uint64_t)this + 216);
  *((_QWORD *)this + 23) = MTLBoundsCheck::SharedPassData::getOrInsertDeviceIndirectionTableGV(*((MTLBoundsCheck::SharedPassData **)this
                                                                                               + 8));
  MemoryIndirectionPass::replaceGlobalBindings((llvm::Module **)this);
  MemoryIndirectionPass::markGlobalsForSkip(this);
  GlobalVariable = llvm::Module::getGlobalVariable();
  if (GlobalVariable)
  {
    v5 = (unint64_t *)GlobalVariable;
    inserted = (unsigned __int8 **)MTLBoundsCheck::SharedPassData::getOrInsertGlobalConstantsHandleGV(*((llvm::Module ***)this + 8));
    *((_QWORD *)this + 31) = inserted;
    v7 = *((_QWORD *)this + 8) + 208;
    Operand = inserted;
    llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>,llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v7, &Operand, (uint64_t)&v160);
    if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 8) + 72) + 23) & 0x40) != 0
      && MTLBoundsCheck::isLibraryModule(*((MTLBoundsCheck **)this + 6), v8))
    {
      v9 = (llvm::NamedMDNode *)llvm::Module::getOrInsertNamedMetadata();
      *(_QWORD *)&v160 = v161;
      *((_QWORD *)&v160 + 1) = 0x400000000;
      NumOperands = llvm::NamedMDNode::getNumOperands(v9);
      if (HIDWORD(v160) < NumOperands)
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      v11 = llvm::NamedMDNode::getNumOperands(v9);
      if (v11)
      {
        for (i = 0; i != v11; ++i)
        {
          Operand = (unsigned __int8 **)llvm::NamedMDNode::getOperand(v9);
          llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)&v160, (uint64_t *)&Operand);
        }
      }
      llvm::NamedMDNode::clearOperands(v9);
      v13 = DWORD2(v160);
      if (DWORD2(v160))
      {
        v14 = 0;
        do
        {
          if (*(unint64_t **)(*(_QWORD *)(*(_QWORD *)(v160 + 8 * v14)
                                                - 8 * *(unsigned int *)(*(_QWORD *)(v160 + 8 * v14) + 8)
                                                + 8)
                                    + 128) != v5)
          {
            llvm::NamedMDNode::addOperand();
            v13 = DWORD2(v160);
          }
          ++v14;
        }
        while (v14 < v13);
      }
      if ((_QWORD *)v160 != v161)
        free((void *)v160);
    }
    v160 = v5[1];
    llvm::SmallVector<llvm::User *,8u>::SmallVector<llvm::Value::user_iterator_impl<llvm::User>>(&Operand, (uint64_t *)&v160);
    v15 = Operand;
    if ((_DWORD)v178)
    {
      v16 = 8 * v178;
      do
      {
        v17 = *v15;
        if (*v15 && v17[16] == 60)
        {
          v18 = llvm::User::operator new((llvm::User *)0x40);
          LOWORD(v162) = 257;
          llvm::LoadInst::LoadInst();
          llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::IRBuilder((uint64_t)&v160, (llvm::Value *)v17, 0, 0, 0);
          v19 = *(_QWORD *)v17;
          v159[8] = 257;
          llvm::IRBuilderBase::CreateCast((uint64_t)&v160, 48, v18, v19, (uint64_t)&v157);
          llvm::Value::replaceAllUsesWith();
          llvm::Instruction::eraseFromParent((llvm::Instruction *)v17);
          llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)&v176);
          llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v175);
          if ((_QWORD *)v160 != v161)
            free((void *)v160);
        }
        else
        {
          llvm::UndefValue::get();
          llvm::User::replaceUsesOfWith();
          llvm::UndefValue::get();
          llvm::Value::replaceAllUsesWith();
          if (v17[16] >= 0x1Cu)
            llvm::Instruction::eraseFromParent((llvm::Instruction *)v17);
        }
        ++v15;
        v16 -= 8;
      }
      while (v16);
      v15 = Operand;
    }
    if (v15 != v179)
      free(v15);
    llvm::GlobalVariable::eraseFromParent((llvm::GlobalVariable *)v5);
  }
  else
  {
    *((_QWORD *)this + 31) = 0;
  }
  EntryFunction = MetalModulePass::getEntryFunction(this);
  if (EntryFunction && !MTLBoundsCheck::isLibraryModule(*((MTLBoundsCheck **)this + 6), v20))
  {
    *(_QWORD *)&v160 = MTLBoundsCheck::SharedPassData::getOrInsertGlobalConstantsHandleGV(*((llvm::Module ***)this + 8));
    *((_QWORD *)&v160 + 1) = MTLBoundsCheck::SharedPassData::getOrInsertDrawIDBufferGV(*((MTLBoundsCheck::SharedPassData **)this
                                                                                       + 8));
    v161[0] = MTLBoundsCheck::SharedPassData::getOrInsertDeviceIndirectionTableGV(*((MTLBoundsCheck::SharedPassData **)this
                                                                                  + 8));
    v161[1] = MTLBoundsCheck::SharedPassData::getOrInsertReportBufferGV(*((llvm::Type ****)this + 8));
    v162 = MTLBoundsCheck::SharedPassData::getOrInsertStackDepthGV(*((llvm::Type ****)this + 8));
    v163 = MTLBoundsCheck::SharedPassData::getOrInsertAccelerationStructurePtrGV(*((llvm::Type ****)this + 8));
    v164 = MTLBoundsCheck::SharedPassData::getOrInsertBindingTableGV(*((MTLBoundsCheck::SharedPassData **)this + 8));
    llvm::appendToUsed();
    if ((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 8) + 72) + 20) & 0x200000001) != 0)
    {
      *(_QWORD *)&v160 = MTLBoundsCheck::SharedPassData::getOrInsertTextureUsageTableGV(*((MTLBoundsCheck::SharedPassData **)this
                                                                                        + 8));
      *((_QWORD *)&v160 + 1) = MTLBoundsCheck::SharedPassData::getOrInsertBufferUsageTableGV(*((MTLBoundsCheck::SharedPassData **)this
                                                                                             + 8));
      llvm::appendToUsed();
    }
    v131 = *(_QWORD *)(EntryFunction + 24);
    v132 = v2;
    Operand = (unsigned __int8 **)v179;
    v178 = 0x800000000;
    v157 = v159;
    v158 = 0x800000000;
    v154 = v156;
    v155 = 0x800000000;
    v152[0] = v153;
    v152[1] = (void *)0x800000000;
    v149 = v151;
    v150 = 0x800000000;
    LODWORD(v135) = 0;
    if (*(_QWORD *)(EntryFunction + 96))
    {
      v22 = 0;
      v133 = 0;
      v23 = 0;
      while (1)
      {
        if ((*(_WORD *)(EntryFunction + 18) & 1) != 0)
        {
          llvm::Function::BuildLazyArguments((llvm::Function *)EntryFunction);
          v22 = v135;
        }
        v24 = (llvm::Value *)(*(_QWORD *)(EntryFunction + 88) + 40 * v22);
        v145[0] = 0;
        v145[0] = *(_QWORD *)v24;
        Attributes = 0;
        v25 = *(_QWORD *)(*((_QWORD *)this + 16) - 8 * *(unsigned int *)(*((_QWORD *)this + 16) + 8) + 16);
        Attributes = *(unsigned int **)(v25 - 8 * *(unsigned int *)(v25 + 8) + 8 * v22);
        String = (_QWORD *)llvm::MDString::getString(*(llvm::MDString **)&Attributes[-2 * Attributes[2] + 2]);
        v28 = v27;
        v29 = v178;
        if (!isBufferMetadata((uint64_t)Attributes))
          goto LABEL_42;
        v30 = *(_DWORD *)(v145[0] + 8);
        if ((v30 & 0xFE) == 0x12)
          v30 = *(_DWORD *)(**(_QWORD **)(v145[0] + 16) + 8);
        if ((v30 & 0xFFFFFF00) != 0x300)
        {
          v142[0] = &unk_24105C402;
          v142[1] = 0;
          v143 = 1;
          MTLBoundsCheck::getArgName(Attributes, (uint64_t)v142, (uint64_t)&v160);
          if (*((_QWORD *)&v160 + 1) >= 6uLL && *(_DWORD *)v160 == 1969382756 && *(_WORD *)(v160 + 4) == 11879)
            goto LABEL_84;
          llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)&v157, (uint64_t *)&Attributes);
          LocationIndex = MTLBoundsCheck::getLocationIndex((uint64_t)Attributes);
          if (llvm::Value::hasNUsesOrMore(v24))
          {
            v140.n128_u64[0] = (unint64_t)"air.read_write";
            v140.n128_u64[1] = 14;
            v141 = 1;
            MTLBoundsCheck::getArgAccessType((uint64_t)Attributes, &v140, (uint64_t)&v160);
            v147 = v160;
            v47 = 2 * LocationIndex;
            if (llvm::StringRef::find() != -1)
              *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 8) + 64) + 640) |= 1 << v47;
            goto LABEL_72;
          }
        }
        else
        {
LABEL_42:
          v31 = *(llvm::MDString **)&Attributes[-2 * Attributes[2] + 2];
          if (*(_BYTE *)v31
            || (v32 = llvm::MDString::getString(v31), v33 != 17)
            || (*(_QWORD *)v32 == 0x666675622E726961
              ? (v34 = *(_QWORD *)(v32 + 8) == 0x64697274735F7265)
              : (v34 = 0),
                v34 ? (v35 = *(_BYTE *)(v32 + 16) == 101) : (v35 = 0),
                !v35))
          {
            if (v28 == 30)
            {
              v36 = *String == 0x746E6F632E726961 && String[1] == 0x6E696F705F6C6F72;
              v37 = v36 && String[2] == 0x5F7865646E695F74;
              if (v37 && *(_QWORD *)((char *)String + 22) == 0x7265666675625F78)
              {
                v39 = v135;
                llvm::DataLayout::getTypeSizeInBits(*((_QWORD *)this + 7), **(_QWORD **)(v145[0] + 16));
                v41 = v40;
                v43 = v42;
                ABITypeAlignment = llvm::DataLayout::getABITypeAlignment(*((llvm::DataLayout **)this + 7), **(llvm::Type ***)(v145[0] + 16));
                LODWORD(v129) = 1;
                Attributes = (unsigned int *)MetalModulePass::getMDTuple<unsigned int,char const*,char const*,unsigned int,int,char const*,char const*,int,char const*,llvm::TypeSize,char const*,unsigned long long,char const*,char const*,char const*,char const*>((llvm::MDString **)this, v39, (llvm::LLVMContext *)"air.buffer", (llvm::LLVMContext *)"air.location_index", 43, 1, (llvm::LLVMContext *)"air.read", (llvm::LLVMContext *)"air.address_space", v129, (llvm::LLVMContext *)"air.arg_type_size", (unint64_t)(v41 + 7) >> 3, v43 == 1, (llvm::LLVMContext *)"air.arg_type_align_size", ABITypeAlignment, (llvm::LLVMContext *)"air.arg_type_name", (llvm::LLVMContext *)"int", (llvm::LLVMContext *)"air.arg_name", (llvm::LLVMContext *)"debug.control_point_index_buffer");
                v23 = v39 | (v29 << 32);
                v145[0] = llvm::PointerType::get();
                v133 = 1;
              }
            }
LABEL_84:
            llvm::SmallVectorImpl<unsigned int>::emplace_back<unsigned int &>((uint64_t)&v149, (int *)&v135);
            llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)&Operand, v145);
            llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)v152, (uint64_t *)&Attributes);
            MetalModulePass::getMetadata<unsigned long long>();
            llvm::MDNode::replaceOperandWith();
            goto LABEL_85;
          }
          v138[0] = &unk_24105C402;
          v138[1] = 0;
          v139 = 1;
          MTLBoundsCheck::getArgName(Attributes, (uint64_t)v138, (uint64_t)&v160);
          if (*((_QWORD *)&v160 + 1) >= 6uLL && *(_DWORD *)v160 == 1969382756 && *(_WORD *)(v160 + 4) == 11879)
            goto LABEL_84;
          llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)&v154, (uint64_t *)&Attributes);
          v49 = MTLBoundsCheck::getLocationIndex((uint64_t)Attributes);
          if (llvm::Value::hasNUsesOrMore(v24))
          {
            v136.n128_u64[0] = (unint64_t)"air.read_write";
            v136.n128_u64[1] = 14;
            v137 = 1;
            MTLBoundsCheck::getArgAccessType((uint64_t)Attributes, &v136, (uint64_t)&v160);
            v147 = v160;
            v47 = 2 * v49;
            if (llvm::StringRef::find() != -1)
              *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 8) + 64) + 640) |= 1 << v47;
LABEL_72:
            if (llvm::StringRef::find() != -1)
              *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 8) + 64) + 640) |= 2 << v47;
          }
        }
LABEL_85:
        LODWORD(v135) = v135 + 1;
        v22 = v135;
        if (*(_QWORD *)(EntryFunction + 96) <= (unint64_t)v135)
          goto LABEL_88;
      }
    }
    v23 = 0;
    v133 = 0;
LABEL_88:
    if (!*((_DWORD *)this + 30) && *(_BYTE *)(**(_QWORD **)(v131 + 16) + 8) != 7)
      *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 8) + 64) + 640) &= 0x5555555555555555uLL;
    v50 = v178;
    v51 = (llvm::Type *)llvm::ArrayType::get(*((llvm::ArrayType **)this + 9), (llvm::Type *)0x1F);
    *(_QWORD *)&v160 = 0;
    llvm::DataLayout::getTypeSizeInBits(*((_QWORD *)this + 7), (uint64_t)v51);
    v53 = v52;
    v55 = v54;
    PrefTypeAlignment = llvm::DataLayout::getPrefTypeAlignment(*((llvm::DataLayout **)this + 7), v51);
    LODWORD(v129) = 2;
    *(_QWORD *)&v160 = MetalModulePass::getMDTuple<unsigned long,char const*,char const*,unsigned int,int,char const*,char const*,int,char const*,llvm::TypeSize,char const*,unsigned long long,char const*,char const*,char const*,char const*>((llvm::MDString **)this, v50, (llvm::LLVMContext *)"air.buffer", (llvm::LLVMContext *)"air.location_index", 50, 1, (llvm::LLVMContext *)"air.read", (llvm::LLVMContext *)"air.address_space", v129, (llvm::LLVMContext *)"air.arg_type_size", (unint64_t)(v53 + 7) >> 3, v55 == 1, (llvm::LLVMContext *)"air.arg_type_align_size", PrefTypeAlignment, (llvm::LLVMContext *)"air.arg_type_name", (llvm::LLVMContext *)"int", (llvm::LLVMContext *)"air.arg_name", (llvm::LLVMContext *)"debug.user_arguments_int");
    *(_QWORD *)&v147 = llvm::PointerType::get();
    llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)&Operand, (uint64_t *)&v147);
    llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)v152, (uint64_t *)&v160);
    v57 = (llvm::Type *)llvm::ArrayType::get(*((llvm::ArrayType **)this + 9), (llvm::Type *)0x1F);
    *(_QWORD *)&v160 = 0;
    llvm::DataLayout::getTypeSizeInBits(*((_QWORD *)this + 7), (uint64_t)v57);
    v59 = v58;
    v61 = v60;
    v62 = llvm::DataLayout::getPrefTypeAlignment(*((llvm::DataLayout **)this + 7), v57);
    *(_QWORD *)&v160 = MetalModulePass::getMDTuple<unsigned long,char const*,char const*,unsigned int,int,char const*,char const*,llvm::TypeSize,char const*,unsigned long long,char const*,char const*,char const*,char const*>((llvm::MDString **)this, v50 + 1, (llvm::LLVMContext *)"air.buffer", (llvm::LLVMContext *)"air.location_index", 53, 1, (llvm::LLVMContext *)"air.read", (llvm::LLVMContext *)"air.arg_type_size", (unint64_t)(v59 + 7) >> 3, v61 == 1, (llvm::LLVMContext *)"air.arg_type_align_size", v62, (llvm::LLVMContext *)"air.arg_type_name", (llvm::LLVMContext *)"int", (llvm::LLVMContext *)"air.arg_name", (llvm::LLVMContext *)"debug.user_argument_strides_int");
    *(_QWORD *)&v147 = llvm::PointerType::get();
    llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)&Operand, (uint64_t *)&v147);
    llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)v152, (uint64_t *)&v160);
    v63 = llvm::FunctionType::get();
    v64 = *(_DWORD *)(EntryFunction + 32) & 0xF;
    *(_QWORD *)&v160 = "mtl.indirection_wrapper";
    LOWORD(v162) = 259;
    v65 = llvm::Function::Create(v63, v64, (uint64_t)&v160, *((_QWORD *)this + 6));
    llvm::GlobalObject::copyMetadata();
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
    llvm::Function::setSubprogram();
    *(_DWORD *)(EntryFunction + 32) = *(_DWORD *)(EntryFunction + 32) & 0xFFFFBFC0 | 0x4007;
    *(_QWORD *)&v160 = *(_QWORD *)(EntryFunction + 112);
    Attributes = (unsigned int *)llvm::AttributeList::getAttributes((llvm::AttributeList *)&v160);
    v66 = llvm::AttributeSet::begin((llvm::AttributeSet *)&Attributes);
    v67 = llvm::AttributeSet::end((llvm::AttributeSet *)&Attributes);
    while (v66 != v67)
    {
      llvm::Function::addFnAttr();
      v66 += 8;
    }
    *(_QWORD *)&v160 = *(_QWORD *)(EntryFunction + 112);
    v135 = llvm::AttributeList::getAttributes((llvm::AttributeList *)&v160);
    v68 = (_QWORD *)llvm::AttributeSet::begin((llvm::AttributeSet *)&v135);
    v69 = llvm::AttributeSet::end((llvm::AttributeSet *)&v135);
    while (v68 != (_QWORD *)v69)
      llvm::compat::addAttribute(v65, 0, *v68++);
    MetalModulePass::getMetadata(this, (llvm::Value *)v65);
    llvm::MDNode::replaceOperandWith();
    llvm::MDTuple::getImpl();
    llvm::MDNode::replaceOperandWith();
    v70 = (llvm::BasicBlock *)*((_QWORD *)this + 5);
    *(_QWORD *)&v160 = "entry";
    LOWORD(v162) = 259;
    v72 = (llvm::BasicBlock *)llvm::BasicBlock::Create(v70, (llvm::LLVMContext *)&v160, (const llvm::Twine *)v65, 0, v71);
    Context = (llvm::ReturnInst *)llvm::BasicBlock::getContext(v72);
    *(_QWORD *)&v160 = v161;
    *((_QWORD *)&v160 + 1) = 0x200000000;
    v166 = Context;
    v167 = &v175;
    v168 = &v176;
    v169 = 0;
    v170 = 0;
    v171 = 512;
    v172 = 7;
    v174 = 0;
    v173 = 0;
    v175 = MEMORY[0x24BED83B8] + 16;
    v176 = MEMORY[0x24BED83F0] + 16;
    v164 = (uint64_t)v72;
    v165 = (char *)v72 + 40;
    v74 = *(_QWORD *)(EntryFunction + 96);
    v145[0] = 0;
    llvm::SmallVector<llvm::Value *,8u>::SmallVector(&v147, v74, v145);
    v75 = v150;
    if ((_DWORD)v150)
    {
      v76 = 0;
      v77 = 0;
      do
      {
        if ((*(_WORD *)(v65 + 18) & 1) != 0)
        {
          llvm::Function::BuildLazyArguments((llvm::Function *)v65);
          v75 = v150;
        }
        *(_QWORD *)(v147 + 8 * *((unsigned int *)v149 + v76)) = *(_QWORD *)(v65 + 88) + v77;
        v77 += 40;
        ++v76;
      }
      while (v75 > v76);
    }
    v130 = v50 + 1;
    if (v133)
    {
      if ((*(_WORD *)(EntryFunction + 18) & 1) != 0)
        llvm::Function::BuildLazyArguments((llvm::Function *)EntryFunction);
      v78 = v23;
      v79 = *(_QWORD *)(*(_QWORD *)(EntryFunction + 88) + 40 * v23);
      v134 = 0;
      if ((*(_WORD *)(v65 + 18) & 1) != 0)
        llvm::Function::BuildLazyArguments((llvm::Function *)v65);
      v134 = (llvm::Value *)(*(_QWORD *)(v65 + 88) + 40 * HIDWORD(v23));
      llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>,llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::try_emplace<llvm::detail::DenseSetEmpty&>(*((_QWORD *)this + 8) + 208, &v134, (uint64_t)v145);
      v80 = v134;
      v81 = **(llvm::Type ***)(*(_QWORD *)v134 + 16);
      v82 = llvm::DataLayout::getABITypeAlignment(*((llvm::DataLayout **)this + 7), v81);
      v83 = __clz(v82) ^ 0x13F;
      if (v82)
        v84 = v83;
      else
        v84 = 0;
      v146 = 257;
      AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)&v160, v81, (uint64_t)v80, v84, 0, (uint64_t)v145);
      v146 = 257;
      Cast = llvm::IRBuilderBase::CreateCast((uint64_t)&v160, 48, AlignedLoad, v79, (uint64_t)v145);
      *(_QWORD *)(v147 + 8 * v78) = Cast;
    }
    v134 = 0;
    if ((*(_WORD *)(v65 + 18) & 1) != 0)
      llvm::Function::BuildLazyArguments((llvm::Function *)v65);
    v134 = (llvm::Value *)(*(_QWORD *)(v65 + 88) + 40 * v50);
    llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>,llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::try_emplace<llvm::detail::DenseSetEmpty&>(*((_QWORD *)this + 8) + 208, &v134, (uint64_t)v145);
    v87 = (llvm::Type **)v134;
    v88 = MTLBoundsCheck::SharedPassData::getOrInsertBindingTableGV(*((MTLBoundsCheck::SharedPassData **)this + 8));
    llvm::IRBuilderBase::CreateAlignedStore((uint64_t)&v160, v87, v88, 0);
    if ((_DWORD)v158)
    {
      v89 = (uint64_t *)v157;
      v90 = 8 * v158;
      do
      {
        v91 = *v89;
        v92 = *(_QWORD *)(*(_QWORD *)(*v89 - 8 * *(unsigned int *)(*v89 + 8)) + 128);
        v93 = (_QWORD *)(v92 + 24);
        if (*(_DWORD *)(v92 + 32) >= 0x41u)
          v93 = (_QWORD *)*v93;
        v94 = (_QWORD *)*v93;
        if ((*(_WORD *)(EntryFunction + 18) & 1) != 0)
          llvm::Function::BuildLazyArguments((llvm::Function *)EntryFunction);
        v95 = *(_QWORD *)(*(_QWORD *)(EntryFunction + 88) + 40 * (_QWORD)v94);
        v96 = MTLBoundsCheck::getLocationIndex(v91);
        v97 = **(llvm::Type ***)(*(_QWORD *)v134 + 16);
        v146 = 257;
        ConstInBoundsGEP2_64 = llvm::IRBuilderBase::CreateConstInBoundsGEP2_64((llvm::Type **)&v160, v97, v134, 0, v96, (const llvm::Twine *)v145);
        v99 = **(llvm::Type ***)(*(_QWORD *)ConstInBoundsGEP2_64 + 16);
        v146 = 257;
        v100 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)&v160, v99, ConstInBoundsGEP2_64, 259, 0, (uint64_t)v145);
        v146 = 257;
        v101 = llvm::IRBuilderBase::CreateCast((uint64_t)&v160, 48, v100, v95, (uint64_t)v145);
        *(_QWORD *)(v147 + 8 * (_QWORD)v94) = v101;
        ++v89;
        v90 -= 8;
      }
      while (v90);
    }
    v134 = 0;
    if ((*(_WORD *)(v65 + 18) & 1) != 0)
      llvm::Function::BuildLazyArguments((llvm::Function *)v65);
    v134 = (llvm::Value *)(*(_QWORD *)(v65 + 88) + 40 * v130);
    llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>,llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::try_emplace<llvm::detail::DenseSetEmpty&>(*((_QWORD *)this + 8) + 208, &v134, (uint64_t)v145);
    v2 = v132;
    if ((_DWORD)v155)
    {
      v102 = (uint64_t *)v154;
      v103 = 8 * v155;
      do
      {
        v104 = *v102;
        v105 = *(_QWORD *)(*(_QWORD *)(*v102 - 8 * *(unsigned int *)(*v102 + 8)) + 128);
        v106 = (_QWORD *)(v105 + 24);
        if (*(_DWORD *)(v105 + 32) >= 0x41u)
          v106 = (_QWORD *)*v106;
        v107 = (_QWORD *)*v106;
        if ((*(_WORD *)(EntryFunction + 18) & 1) != 0)
          llvm::Function::BuildLazyArguments((llvm::Function *)EntryFunction);
        v108 = MTLBoundsCheck::getLocationIndex(v104);
        v109 = **(llvm::Type ***)(*(_QWORD *)v134 + 16);
        v146 = 257;
        v110 = llvm::IRBuilderBase::CreateConstInBoundsGEP2_64((llvm::Type **)&v160, v109, v134, 0, v108, (const llvm::Twine *)v145);
        v111 = **(llvm::Type ***)(*(_QWORD *)v110 + 16);
        v146 = 257;
        v112 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)&v160, v111, v110, 259, 0, (uint64_t)v145);
        *(_QWORD *)(v147 + 8 * (_QWORD)v107) = v112;
        ++v102;
        v103 -= 8;
      }
      while (v103);
    }
    v146 = 257;
    v113 = (llvm::LLVMContext *)llvm::IRBuilderBase::CreateCall((uint64_t)&v160, v131, EntryFunction, v147, DWORD2(v147), (uint64_t)v145, 0);
    if (*(_BYTE *)(**(_QWORD **)(v131 + 16) + 8) == 7)
      v115 = llvm::ReturnInst::Create(v166, 0, 0, v114);
    else
      v115 = llvm::ReturnInst::Create(v166, v113, 0, v114);
    v146 = 257;
    llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)&v160, v115, (uint64_t)v145);
    if ((uint64_t *)v147 != &v148)
      free((void *)v147);
    llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)&v176);
    llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v175);
    if ((_QWORD *)v160 != v161)
      free((void *)v160);
    if (v149 != v151)
      free(v149);
    if (v152[0] != v153)
      free(v152[0]);
    if (v154 != v156)
      free(v154);
    if (v157 != v159)
      free(v157);
    if (Operand != v179)
      free(Operand);
  }
  MemoryIndirectionPass::fixupIntersectionFunctions(this);
  llvm::SmallVector<std::reference_wrapper<llvm::Function>,8u>::SmallVector<llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,void>(&v160, *((_QWORD *)v2 + 4), (uint64_t)v2 + 24);
  v116 = (llvm::Value **)v160;
  if (DWORD2(v160))
  {
    v117 = 8 * DWORD2(v160);
    do
    {
      v118 = *v116;
      Name = llvm::Value::getName(*v116);
      if (v120 >= 0x11
        && (*(_QWORD *)Name == 0x726575712E6C746DLL
          ? (v121 = *(_QWORD *)(Name + 8) == 0x79726F6D656D5F79)
          : (v121 = 0),
            v121 ? (v122 = *(_BYTE *)(Name + 16) == 46) : (v122 = 0),
            v122))
      {
        MemoryIndirectionPass::handleMemoryQueryFunction(this, (llvm::Value **)v118);
      }
      else if (MemoryIndirectionPass::shouldModifyFunction(this, v118))
      {
        MemoryIndirectionPass::fixupInstructions(this, v118);
      }
      ++v116;
      v117 -= 8;
    }
    while (v117);
    v116 = (llvm::Value **)v160;
  }
  if (v116 != v161)
    free(v116);
  for (j = (_QWORD *)*((_QWORD *)v2 + 4); j != (_QWORD *)((char *)v2 + 24); j = (_QWORD *)j[1])
    llvm::Value::setMetadata();
  if (*((_DWORD *)this + 56))
  {
    v124 = *((unsigned int *)this + 58);
    if ((_DWORD)v124)
    {
      v125 = 16 * v124;
      for (k = *((_QWORD *)this + 27); (*(_QWORD *)k | 0x1000) == 0xFFFFFFFFFFFFF000; k += 16)
      {
        v125 -= 16;
        if (!v125)
          return 1;
      }
    }
    else
    {
      k = *((_QWORD *)this + 27);
    }
    v128 = *((_QWORD *)this + 27) + 16 * v124;
LABEL_174:
    if (k != v128)
    {
      llvm::UndefValue::get();
      llvm::Value::replaceNonMetadataUsesWith();
      **(_QWORD **)k = **(_QWORD **)(k + 8);
      llvm::ValueAsMetadata::handleRAUW();
      llvm::Function::eraseFromParent(*(llvm::Function **)k);
      while (1)
      {
        k += 16;
        if (k == v128)
          break;
        if ((*(_QWORD *)k | 0x1000) != 0xFFFFFFFFFFFFF000)
          goto LABEL_174;
      }
    }
  }
  return 1;
}

void sub_240FCA758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  void *a69;
  uint64_t v69;
  void *v71;

  if (a53 != &a55)
    free(a53);
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder((void **)&STACK[0x2D0]);
  if (a63 != a24)
    free(a63);
  if (a69 != a25)
    free(a69);
  if (STACK[0x230] != a26)
    free((void *)STACK[0x230]);
  if (STACK[0x280] != a27)
    free((void *)STACK[0x280]);
  v71 = *(void **)(v69 - 184);
  if (v71 != (void *)a28)
    free(v71);
  _Unwind_Resume(a1);
}

uint64_t llvm::DenseMap<llvm::Type *,llvm::Type *,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,llvm::Type *>>::init(uint64_t result, int a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = result;
  if (a2)
  {
    v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    *(_DWORD *)(result + 16) = v4;
    result = MEMORY[0x24268CD5C](16 * v4, 8);
    *(_QWORD *)v2 = result;
    *(_QWORD *)(v2 + 8) = 0;
    v5 = *(unsigned int *)(v2 + 16);
    if ((_DWORD)v5)
    {
      v6 = 16 * v5;
      do
      {
        *(_QWORD *)result = -4096;
        result += 16;
        v6 -= 16;
      }
      while (v6);
    }
  }
  else
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)(result + 16) = 0;
  }
  return result;
}

uint64_t llvm::DenseMap<llvm::Type *,llvm::Type *,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,llvm::Type *>>::~DenseMap(uint64_t a1)
{
  llvm::deallocate_buffer(*(llvm **)a1, (void *)(16 * *(unsigned int *)(a1 + 16)));
  return a1;
}

uint64_t llvm::DenseMap<llvm::Function *,llvm::Function *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::Function *>>::~DenseMap(uint64_t a1)
{
  llvm::deallocate_buffer(*(llvm **)a1, (void *)(16 * *(unsigned int *)(a1 + 16)));
  return a1;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::Type *,llvm::Type *,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,llvm::Type *>>,llvm::Type *,llvm::Type *,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,llvm::Type *>>::clear(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (*(_QWORD *)(result + 8))
  {
    v1 = *(unsigned int *)(result + 16);
    if (v1 <= 4 * *(_DWORD *)(result + 8) || v1 < 0x41)
    {
      if ((_DWORD)v1)
      {
        v2 = *(_QWORD **)result;
        v3 = 16 * v1;
        do
        {
          *v2 = -4096;
          v2 += 2;
          v3 -= 16;
        }
        while (v3);
      }
      *(_QWORD *)(result + 8) = 0;
    }
    else
    {
      return llvm::DenseMap<llvm::Type *,llvm::Type *,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,llvm::Type *>>::shrink_and_clear(result);
    }
  }
  return result;
}

void MemoryIndirectionPass::replaceGlobalBindings(llvm::Module **this)
{
  MemoryIndirectionPass *v1;
  llvm::Module *v2;
  llvm::NamedMDNode *NamedMetadata;
  llvm::NamedMDNode *v4;
  int NumOperands;
  int v6;
  uint64_t Operand;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *String;
  uint64_t v13;
  uint64_t v14;
  char v15;
  BOOL v16;
  BOOL v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned int v22;
  BOOL v23;
  BOOL v24;
  uint64_t i;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  llvm::Instruction *v29;
  llvm::Value *inserted;
  llvm::Type *v31;
  llvm::Value *AlignedLoad;
  uint64_t v33;
  uint64_t v34;
  char *Name;
  size_t v36;
  llvm::Type *GVBaseType;
  uint64_t ConstInBoundsGEP2_64;
  uint64_t v39;
  char *v40;
  size_t v41;
  llvm::Type *v42;
  llvm::Type **v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  llvm::Type *v47;
  llvm::Value *BitOrPointerCast;
  uint64_t v49;
  llvm::Value **v50;
  uint64_t v51;
  llvm::Value ***v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  llvm::Type *v57;
  llvm::Value *v58;
  uint64_t v59;
  uint64_t v60;
  llvm::Value **v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  llvm::Value ***v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  llvm::Type *v70;
  uint64_t *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t *v85;
  char v86;
  unsigned int LocationIndex;
  llvm::Value *v88;
  uint64_t v89;
  uint64_t v90;
  __int16 v91;
  llvm::Instruction *v92;
  _OWORD v93[2];
  __int128 v94;
  __n128 v95;
  char v96;
  void *__p;
  uint64_t *v98;
  char *v99;
  void *v100[2];
  _WORD v101[52];
  uint64_t v102;
  _QWORD v103[9];

  v1 = (MemoryIndirectionPass *)this;
  v103[7] = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v98 = 0;
  v99 = 0;
  v2 = this[6];
  v100[0] = "air.global_bindings";
  v101[8] = 259;
  NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v2, (const llvm::Twine *)v100);
  v4 = NamedMetadata;
  if (NamedMetadata)
  {
    NumOperands = llvm::NamedMDNode::getNumOperands(NamedMetadata);
    if (NumOperands)
    {
      v86 = 0;
      v6 = 0;
      while (1)
      {
        Operand = llvm::NamedMDNode::getOperand(v4);
        v8 = (uint64_t *)v1;
        v9 = Operand - 8 * *(unsigned int *)(Operand + 8);
        v10 = *(_QWORD *)(v9 + 16);
        v11 = *(_QWORD *)(*(_QWORD *)(v9 + 8) + 128);
        LocationIndex = MTLBoundsCheck::getLocationIndex(v10);
        String = (_QWORD *)llvm::MDString::getString(*(llvm::MDString **)(v10 - 8 * *(unsigned int *)(v10 + 8) + 8));
        v14 = v13;
        if (*(_QWORD *)(v11 + 8))
        {
          v95.n128_u64[0] = (unint64_t)"air.read_write";
          v95.n128_u64[1] = 14;
          v96 = 1;
          MTLBoundsCheck::getArgAccessType(v10, &v95, (uint64_t)v100);
          v93[0] = *(_OWORD *)v100;
          v15 = 2 * LocationIndex;
          if (llvm::StringRef::find() != -1)
            *(_QWORD *)(*(_QWORD *)(v8[8] + 64) + 640) |= 1 << v15;
          if (llvm::StringRef::find() != -1)
            *(_QWORD *)(*(_QWORD *)(v8[8] + 64) + 640) |= 2 << v15;
        }
        if (v14 == 11)
        {
          v16 = *String == 0x747865742E726961 && *(_QWORD *)((char *)String + 3) == 0x657275747865742ELL;
          if (v16
            || (*String == 0x706D61732E726961
              ? (v17 = *(_QWORD *)((char *)String + 3) == 0x72656C706D61732ELL)
              : (v17 = 0),
                v17))
          {
            v71 = v98;
            if (v98 < (uint64_t *)v99)
            {
              *v98 = Operand;
              v19 = v71 + 1;
              v1 = (MemoryIndirectionPass *)v8;
              goto LABEL_109;
            }
            v76 = ((char *)v98 - (_BYTE *)__p) >> 3;
            if ((unint64_t)(v76 + 1) >> 61)
LABEL_121:
              std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
            v77 = (v99 - (_BYTE *)__p) >> 2;
            if (v77 <= v76 + 1)
              v77 = v76 + 1;
            if ((unint64_t)(v99 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
              v74 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v74 = v77;
            if (v74)
              v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v99, v74);
            else
              v75 = 0;
            v78 = (uint64_t *)&v75[8 * v76];
            *v78 = Operand;
            v19 = v78 + 1;
            v82 = (char *)__p;
            v79 = (char *)v98;
            if (v98 != __p)
            {
              do
              {
                v83 = *((_QWORD *)v79 - 1);
                v79 -= 8;
                *--v78 = v83;
              }
              while (v79 != v82);
              goto LABEL_106;
            }
LABEL_107:
            v1 = (MemoryIndirectionPass *)v8;
            __p = v78;
            v98 = v19;
            v99 = &v75[8 * v74];
            if (v79)
              operator delete(v79);
            goto LABEL_109;
          }
        }
        if (MTLBoundsCheck::getAddressSpace(v10) == 3)
        {
          v18 = v98;
          if (v98 < (uint64_t *)v99)
          {
            v1 = (MemoryIndirectionPass *)v8;
            *v98 = Operand;
            v19 = v18 + 1;
LABEL_109:
            v98 = v19;
            v86 = 1;
            goto LABEL_110;
          }
          v72 = ((char *)v98 - (_BYTE *)__p) >> 3;
          if ((unint64_t)(v72 + 1) >> 61)
            goto LABEL_121;
          v73 = (v99 - (_BYTE *)__p) >> 2;
          if (v73 <= v72 + 1)
            v73 = v72 + 1;
          if ((unint64_t)(v99 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
            v74 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v74 = v73;
          if (v74)
            v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v99, v74);
          else
            v75 = 0;
          v78 = (uint64_t *)&v75[8 * v72];
          *v78 = Operand;
          v19 = v78 + 1;
          v80 = (char *)__p;
          v79 = (char *)v98;
          if (v98 != __p)
          {
            do
            {
              v81 = *((_QWORD *)v79 - 1);
              v79 -= 8;
              *--v78 = v81;
            }
            while (v79 != v80);
LABEL_106:
            v79 = (char *)__p;
            goto LABEL_107;
          }
          goto LABEL_107;
        }
        v94 = 0u;
        memset(v93, 0, sizeof(v93));
        v20 = *(_QWORD *)(v11 + 8);
        v1 = (MemoryIndirectionPass *)v8;
        if (v20)
        {
          do
          {
            v21 = *(unsigned __int8 **)(v20 + 24);
            v100[0] = v21;
            v22 = v21[16];
            if (v21)
              v23 = v22 >= 0x1C;
            else
              v23 = 0;
            if (v23)
            {
              std::deque<llvm::User *>::push_back(v93, v100);
            }
            else
            {
              if (v21)
                v24 = v22 == 5;
              else
                v24 = 0;
              if (v24)
              {
                llvm::ConstantExpr::isCast((llvm::ConstantExpr *)v21);
                v21 = (unsigned __int8 *)v100[0];
              }
              for (i = *((_QWORD *)v21 + 1); i; i = *(_QWORD *)(i + 8))
              {
                v89 = *(_QWORD *)(i + 24);
                if (v89)
                  v26 = *(unsigned __int8 *)(v89 + 16) >= 0x1Cu;
                else
                  v26 = 0;
                if (v26)
                  std::deque<llvm::User *>::push_back(v93, &v89);
              }
            }
            v20 = *(_QWORD *)(v20 + 8);
          }
          while (v20);
          v27 = *((_QWORD *)&v94 + 1);
          if (*((_QWORD *)&v94 + 1))
            break;
        }
LABEL_80:
        std::deque<llvm::User *>::~deque[abi:ne180100](v93);
LABEL_110:
        if (NumOperands == ++v6)
          goto LABEL_113;
      }
      while (1)
      {
        v28 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v93[0] + 1) + (((unint64_t)v94 >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * (v94 & 0x1FF));
        *(_QWORD *)&v94 = v94 + 1;
        *((_QWORD *)&v94 + 1) = v27 - 1;
        if ((unint64_t)v94 >= 0x400)
        {
          operator delete(**((void ***)&v93[0] + 1));
          *((_QWORD *)&v93[0] + 1) += 8;
          *(_QWORD *)&v94 = v94 - 512;
        }
        if (*(unsigned __int8 *)(v28 + 16) <= 0x1Bu)
          v29 = 0;
        else
          v29 = (llvm::Instruction *)v28;
        v92 = v29;
        if (!v29)
          goto LABEL_79;
        MTLIRBuilder::MTLIRBuilder<llvm::Instruction *&>((uint64_t)v100, &v92);
        inserted = (llvm::Value *)MTLBoundsCheck::SharedPassData::getOrInsertBindingTableGV(*((MTLBoundsCheck::SharedPassData **)v1
                                                                                            + 8));
        v31 = (llvm::Type *)*((_QWORD *)inserted + 3);
        v91 = 257;
        AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v100, v31, (uint64_t)inserted, 0, 0, (uint64_t)&v89);
        v33 = *((_QWORD *)v1 + 8) + 208;
        v88 = AlignedLoad;
        llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>,llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v33, &v88, (uint64_t)&v89);
        v34 = *((_QWORD *)v1 + 8);
        Name = (char *)llvm::Value::getName(inserted);
        GVBaseType = (llvm::Type *)MTLBoundsCheck::SharedPassData::getGVBaseType(v34, Name, v36);
        v91 = 257;
        ConstInBoundsGEP2_64 = llvm::IRBuilderBase::CreateConstInBoundsGEP2_64((llvm::Type **)v100, GVBaseType, AlignedLoad, 0, LocationIndex, (const llvm::Twine *)&v89);
        v39 = v8[8];
        v40 = (char *)llvm::Value::getName(inserted);
        v42 = **(llvm::Type ***)(MTLBoundsCheck::SharedPassData::getGVBaseType(v39, v40, v41) + 16);
        v91 = 257;
        v43 = (llvm::Type **)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v100, v42, ConstInBoundsGEP2_64, 259, 0, (uint64_t)&v89);
        llvm::MDTuple::getImpl();
        llvm::Instruction::setMetadata();
        llvm::MDTuple::getImpl();
        llvm::Instruction::setMetadata();
        v1 = (MemoryIndirectionPass *)v8;
        if (*(_BYTE *)(v28 + 16) != 84)
          goto LABEL_76;
        v44 = *(_QWORD *)(v28 - 32);
        if (!v44 || *(_BYTE *)(v44 + 16) || *(_QWORD *)(v44 + 24) != *(_QWORD *)(v28 + 72))
          v44 = 0;
        v89 = llvm::Value::getName((llvm::Value *)v44);
        v90 = v45;
        v46 = llvm::StringRef::find();
        if (v46 != -1)
        {
          v47 = **(llvm::Type ***)(v28 - 32 * (*(_DWORD *)(v28 + 20) & 0x7FFFFFF) + 32);
          v91 = 257;
          BitOrPointerCast = llvm::IRBuilderBase::CreateBitOrPointerCast((llvm::IRBuilderBase *)v100, v43, v47, (const llvm::Twine *)&v89);
          v49 = v28 - 32 * (*(_DWORD *)(v28 + 20) & 0x7FFFFFF);
          v50 = (llvm::Value **)(v49 + 32);
          if (*(_QWORD *)(v49 + 32))
          {
            **(_QWORD **)(v49 + 48) = *(_QWORD *)(v49 + 40);
            v51 = *(_QWORD *)(v49 + 40);
            if (v51)
              *(_QWORD *)(v51 + 16) = *(_QWORD *)(v49 + 48);
          }
          *v50 = BitOrPointerCast;
          if (BitOrPointerCast)
          {
            v54 = *((_QWORD *)BitOrPointerCast + 1);
            v52 = (llvm::Value ***)((char *)BitOrPointerCast + 8);
            v53 = v54;
            *(_QWORD *)(v49 + 40) = v54;
            if (v54)
              *(_QWORD *)(v53 + 16) = v49 + 40;
            *(_QWORD *)(v49 + 48) = v52;
            *v52 = v50;
          }
        }
        v55 = *(_QWORD *)(v28 - 32);
        if (!v55 || *(_BYTE *)(v55 + 16) || *(_QWORD *)(v55 + 24) != *(_QWORD *)(v28 + 72))
          v55 = 0;
        v89 = llvm::Value::getName((llvm::Value *)v55);
        v90 = v56;
        if (llvm::StringRef::find() != -1)
        {
          v57 = **(llvm::Type ***)(v28 - 32 * (*(_DWORD *)(v28 + 20) & 0x7FFFFFF));
          v91 = 257;
          v58 = llvm::IRBuilderBase::CreateBitOrPointerCast((llvm::IRBuilderBase *)v100, v43, v57, (const llvm::Twine *)&v89);
          v59 = *(_DWORD *)(v28 + 20) & 0x7FFFFFF;
          v60 = -v59;
          v61 = (llvm::Value **)(v28 - 32 * v59);
          if (*v61)
          {
            v62 = v28 + 32 * v60;
            v64 = *(_QWORD **)(v62 + 16);
            v63 = (_QWORD *)(v62 + 16);
            *v64 = *(v63 - 1);
            v65 = *(v63 - 1);
            if (v65)
              *(_QWORD *)(v65 + 16) = *v63;
          }
          *v61 = v58;
          if (v58)
          {
            v68 = *((_QWORD *)v58 + 1);
            v66 = (llvm::Value ***)((char *)v58 + 8);
            v67 = v68;
            v69 = v28 + 32 * v60;
            *(_QWORD *)(v69 + 8) = v68;
            if (v68)
              *(_QWORD *)(v67 + 16) = v69 + 8;
            *(_QWORD *)(v69 + 16) = v66;
            *v66 = v61;
          }
          goto LABEL_77;
        }
        if (v46 == -1)
        {
LABEL_76:
          v70 = *(llvm::Type **)v92;
          v91 = 257;
          llvm::IRBuilderBase::CreateBitOrPointerCast((llvm::IRBuilderBase *)v100, v43, v70, (const llvm::Twine *)&v89);
          llvm::Value::replaceAllUsesWith();
          llvm::Instruction::eraseFromParent(v92);
        }
LABEL_77:
        llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v103);
        llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v102);
        if (v100[0] != v101)
          free(v100[0]);
LABEL_79:
        v27 = *((_QWORD *)&v94 + 1);
        if (!*((_QWORD *)&v94 + 1))
          goto LABEL_80;
      }
    }
    v86 = 0;
LABEL_113:
    llvm::NamedMDNode::clearOperands(v4);
    v84 = (uint64_t *)__p;
    v85 = v98;
    while (v84 != v85)
    {
      llvm::NamedMDNode::addOperand();
      ++v84;
    }
    if ((v86 & 1) == 0)
    {
      llvm::NamedMDNode::clearOperands(v4);
      llvm::NamedMDNode::eraseFromParent(v4);
    }
  }
  if (__p)
  {
    v98 = (uint64_t *)__p;
    operator delete(__p);
  }
}

void sub_240FCB33C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MemoryIndirectionPass::markGlobalsForSkip(MemoryIndirectionPass *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12[3];
  void *v13;
  uint64_t v14;
  _QWORD v15[5];

  v15[4] = *MEMORY[0x24BDAC8D0];
  v13 = v15;
  v14 = 0x400000000;
  v1 = *((_QWORD *)this + 6);
  v2 = v1 + 8;
  v3 = *(_QWORD *)(v1 + 16);
  if (v3 != v1 + 8)
  {
    do
    {
      if (v3)
        v5 = v3 - 56;
      else
        v5 = 0;
      if ((*(_BYTE *)(v5 + 33) & 0x1C) == 0
        && MemoryIndirectionPass::indirectAddressSpace(this, *(llvm::Type **)(v5 + 24)))
      {
        v12[0] = v5;
        llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)&v13, v12);
      }
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3 != v2);
    while (1)
    {
      do
      {
        if (!(_DWORD)v14)
          goto LABEL_18;
        v10 = 0;
        v6 = *((_QWORD *)v13 + v14 - 1);
        LODWORD(v14) = v14 - 1;
        v10 = v6;
        v11 = 0;
        v7 = (uint64_t *)(*((_QWORD *)this + 8) + 208);
        v12[0] = v6;
      }
      while ((llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>,llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::LookupBucketFor<llvm::Value *>(v7, v12, &v11) & 1) != 0);
      llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>,llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::try_emplace<llvm::detail::DenseSetEmpty&>(*((_QWORD *)this + 8) + 208, &v10, (uint64_t)v12);
      v8 = v10;
      v9 = *(unsigned __int8 *)(v10 + 16);
      if (v9 == 61)
      {
        v12[0] = 0;
        v12[0] = *(_QWORD *)(v10 - 64);
        if (*(_BYTE *)(v12[0] + 16) == 59)
        {
          llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)&v13, v12);
          v8 = v10;
        }
LABEL_16:
        llvm::SmallVectorImpl<llvm::User *>::insert<llvm::Value::user_iterator_impl<llvm::User>,void>((uint64_t)&v13, (uint64_t)v13 + 8 * v14, *(_QWORD *)(v8 + 8), 0);
      }
      else if (v9 != 84)
      {
        goto LABEL_16;
      }
    }
  }
LABEL_18:
  if (v13 != v15)
    free(v13);
}

void sub_240FCB574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  if (a14 != v14)
    free(a14);
  _Unwind_Resume(exception_object);
}

uint64_t MetalModulePass::getMDTuple<unsigned int,char const*,char const*,unsigned int,int,char const*,char const*,int,char const*,llvm::TypeSize,char const*,unsigned long long,char const*,char const*,char const*,char const*>(llvm::MDString **a1, uint64_t a2, llvm::LLVMContext *a3, llvm::LLVMContext *a4, uint64_t a5, uint64_t a6, llvm::LLVMContext *a7, llvm::LLVMContext *a8, uint64_t a9, llvm::LLVMContext *a10, uint64_t a11, uint64_t a12, llvm::LLVMContext *a13, uint64_t a14, llvm::LLVMContext *a15, llvm::LLVMContext *a16, llvm::LLVMContext *a17, llvm::LLVMContext *a18)
{
  const char *v23;
  const char *v24;
  const char *v25;
  const char *v26;
  const char *v27;
  const char *v28;
  const char *v29;
  const char *v30;
  const char *v31;
  const char *v32;

  MetalModulePass::getMetadata<unsigned int>();
  MetalModulePass::getMetadata(a1, a3, v23);
  MetalModulePass::getMetadata(a1, a4, v24);
  MetalModulePass::getMetadata<unsigned int>();
  MetalModulePass::getMetadata<int>();
  MetalModulePass::getMetadata(a1, a7, v25);
  MetalModulePass::getMetadata(a1, a8, v26);
  MetalModulePass::getMetadata<int>();
  MetalModulePass::getMetadata(a1, a10, v27);
  MetalModulePass::getMetadata();
  MetalModulePass::getMetadata(a1, a13, v28);
  MetalModulePass::getMetadata<unsigned long long>();
  MetalModulePass::getMetadata(a1, a15, v29);
  MetalModulePass::getMetadata(a1, a16, v30);
  MetalModulePass::getMetadata(a1, a17, v31);
  MetalModulePass::getMetadata(a1, a18, v32);
  return llvm::MDTuple::getImpl();
}

uint64_t llvm::SmallVectorImpl<unsigned int>::emplace_back<unsigned int &>(uint64_t a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a1, *a2);
    v4 = *(_QWORD *)a1;
    v5 = *(_DWORD *)(a1 + 8);
  }
  else
  {
    v4 = *(_QWORD *)a1;
    *(_DWORD *)(*(_QWORD *)a1 + 4 * v3) = *a2;
    v5 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v5;
  }
  return v4 + 4 * v5 - 4;
}

uint64_t MetalModulePass::getMDTuple<unsigned long,char const*,char const*,unsigned int,int,char const*,char const*,int,char const*,llvm::TypeSize,char const*,unsigned long long,char const*,char const*,char const*,char const*>(llvm::MDString **a1, uint64_t a2, llvm::LLVMContext *a3, llvm::LLVMContext *a4, uint64_t a5, uint64_t a6, llvm::LLVMContext *a7, llvm::LLVMContext *a8, uint64_t a9, llvm::LLVMContext *a10, uint64_t a11, uint64_t a12, llvm::LLVMContext *a13, uint64_t a14, llvm::LLVMContext *a15, llvm::LLVMContext *a16, llvm::LLVMContext *a17, llvm::LLVMContext *a18)
{
  const char *v23;
  const char *v24;
  const char *v25;
  const char *v26;
  const char *v27;
  const char *v28;
  const char *v29;
  const char *v30;
  const char *v31;
  const char *v32;

  MetalModulePass::getMetadata<unsigned long long>();
  MetalModulePass::getMetadata(a1, a3, v23);
  MetalModulePass::getMetadata(a1, a4, v24);
  MetalModulePass::getMetadata<unsigned int>();
  MetalModulePass::getMetadata<int>();
  MetalModulePass::getMetadata(a1, a7, v25);
  MetalModulePass::getMetadata(a1, a8, v26);
  MetalModulePass::getMetadata<int>();
  MetalModulePass::getMetadata(a1, a10, v27);
  MetalModulePass::getMetadata();
  MetalModulePass::getMetadata(a1, a13, v28);
  MetalModulePass::getMetadata<unsigned long long>();
  MetalModulePass::getMetadata(a1, a15, v29);
  MetalModulePass::getMetadata(a1, a16, v30);
  MetalModulePass::getMetadata(a1, a17, v31);
  MetalModulePass::getMetadata(a1, a18, v32);
  return llvm::MDTuple::getImpl();
}

uint64_t MetalModulePass::getMDTuple<unsigned long,char const*,char const*,unsigned int,int,char const*,char const*,llvm::TypeSize,char const*,unsigned long long,char const*,char const*,char const*,char const*>(llvm::MDString **a1, uint64_t a2, llvm::LLVMContext *a3, llvm::LLVMContext *a4, uint64_t a5, uint64_t a6, llvm::LLVMContext *a7, llvm::LLVMContext *a8, uint64_t a9, uint64_t a10, llvm::LLVMContext *a11, uint64_t a12, llvm::LLVMContext *a13, llvm::LLVMContext *a14, llvm::LLVMContext *a15, llvm::LLVMContext *a16)
{
  const char *v21;
  const char *v22;
  const char *v23;
  const char *v24;
  const char *v25;
  const char *v26;
  const char *v27;
  const char *v28;
  const char *v29;

  MetalModulePass::getMetadata<unsigned long long>();
  MetalModulePass::getMetadata(a1, a3, v21);
  MetalModulePass::getMetadata(a1, a4, v22);
  MetalModulePass::getMetadata<unsigned int>();
  MetalModulePass::getMetadata<int>();
  MetalModulePass::getMetadata(a1, a7, v23);
  MetalModulePass::getMetadata(a1, a8, v24);
  MetalModulePass::getMetadata();
  MetalModulePass::getMetadata(a1, a11, v25);
  MetalModulePass::getMetadata<unsigned long long>();
  MetalModulePass::getMetadata(a1, a13, v26);
  MetalModulePass::getMetadata(a1, a14, v27);
  MetalModulePass::getMetadata(a1, a15, v28);
  MetalModulePass::getMetadata(a1, a16, v29);
  return llvm::MDTuple::getImpl();
}

uint64_t llvm::IRBuilderBase::CreateConstInBoundsGEP2_64(llvm::Type **this, llvm::Type *a2, llvm::Value *a3, unint64_t a4, unint64_t a5, const llvm::Twine *a6)
{
  llvm::LLVMContext *v10;
  uint64_t result;
  llvm::GetElementPtrInst *v12;
  uint64_t *v13[3];

  v13[2] = *(uint64_t **)MEMORY[0x24BDAC8D0];
  llvm::Type::getInt64Ty(this[8], a2);
  v13[0] = (uint64_t *)llvm::ConstantInt::get();
  llvm::Type::getInt64Ty(this[8], v10);
  v13[1] = (uint64_t *)llvm::ConstantInt::get();
  result = (*(uint64_t (**)(llvm::Type *, llvm::Type *, llvm::Value *, uint64_t **, uint64_t, uint64_t))(*(_QWORD *)this[9] + 48))(this[9], a2, a3, v13, 2, 1);
  if (!result)
  {
    v12 = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::Create((uint64_t)a2, (uint64_t *)a3, v13, 2);
    llvm::GetElementPtrInst::setIsInBounds(v12);
    return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, (uint64_t)v12, (uint64_t)a6);
  }
  return result;
}

uint64_t llvm::IRBuilderBase::CreateRetVoid(llvm::ReturnInst **this, uint64_t a2, uint64_t a3, llvm::Instruction *a4)
{
  uint64_t v5;
  _BYTE v7[32];
  __int16 v8;

  v5 = llvm::ReturnInst::Create(this[8], 0, 0, a4);
  v8 = 257;
  return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, v5, (uint64_t)v7);
}

uint64_t llvm::IRBuilderBase::CreateRet(llvm::ReturnInst **this, llvm::Value *a2, uint64_t a3, llvm::Instruction *a4)
{
  uint64_t v5;
  _BYTE v7[32];
  __int16 v8;

  v5 = llvm::ReturnInst::Create(this[8], a2, 0, a4);
  v8 = 257;
  return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, v5, (uint64_t)v7);
}

void MemoryIndirectionPass::fixupIntersectionFunctions(MemoryIndirectionPass *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *i;
  uint64_t v5;
  unsigned int PrimitiveDataArgIndex;
  llvm::Function *v7;
  uint64_t v8;
  llvm::BasicBlock *v9;
  llvm::Value *FirstNonPHI;
  llvm::Type *v11;
  uint64_t inserted;
  llvm::Type *v13;
  llvm::Type **AlignedLoad;
  llvm::Type *v15;
  llvm::Type **PointerBitCastOrAddrSpaceCast;
  llvm::Value *v17;
  uint64_t BVHDataPointerIntrinsic;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  llvm::Instruction *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  llvm::Type **v26;
  uint64_t v27;
  llvm::BasicBlock *v28;
  uint64_t Context;
  llvm::Instruction *v30;
  uint64_t v31;
  llvm::Type *v32;
  llvm::Type *v33;
  uint64_t v34;
  uint64_t v35;
  llvm::Value *v36;
  llvm::Type *v37;
  uint64_t v38;
  llvm::Type *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  llvm::Function *v43;
  uint64_t v44;
  llvm::Value *BitOrPointerCast;
  llvm::Value *v46;
  uint64_t v47;
  uint64_t v48;
  __int16 v49;
  void *v50[2];
  _QWORD v51[10];
  int v52;
  __int16 v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[3];

  v58[1] = *MEMORY[0x24BDAC8D0];
  MemoryIndirectionPass::fixIntersectCalls((llvm::Type ****)this, *((llvm::Module **)this + 6));
  if (*((_DWORD *)this + 42))
  {
    v2 = *((unsigned int *)this + 44);
    if ((_DWORD)v2)
    {
      v3 = 16 * v2;
      for (i = (_QWORD *)*((_QWORD *)this + 20); (*i | 0x1000) == 0xFFFFFFFFFFFFF000; i += 2)
      {
        v3 -= 16;
        if (!v3)
          return;
      }
    }
    else
    {
      i = (_QWORD *)*((_QWORD *)this + 20);
    }
    v5 = *((_QWORD *)this + 20) + 16 * v2;
    if (i != (_QWORD *)v5)
    {
      v42 = MEMORY[0x24BED83B8] + 16;
      v41 = MEMORY[0x24BED83F0] + 16;
LABEL_10:
      v43 = (llvm::Function *)*i;
      PrimitiveDataArgIndex = MemoryIndirectionPass::getPrimitiveDataArgIndex((uint64_t)this, i[1]);
      v7 = v43;
      if ((PrimitiveDataArgIndex & 0x80000000) == 0)
      {
        v8 = *((_QWORD *)v43 + 10);
        if (v8)
          v9 = (llvm::BasicBlock *)(v8 - 24);
        else
          v9 = 0;
        FirstNonPHI = (llvm::Value *)llvm::BasicBlock::getFirstNonPHI(v9);
        llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::IRBuilder((uint64_t)v50, FirstNonPHI, 0, 0, 0);
        v11 = (llvm::Type *)llvm::PointerType::get();
        inserted = MTLBoundsCheck::SharedPassData::getOrInsertAccelerationStructurePtrGV(*((llvm::Type ****)this + 8));
        v7 = v43;
        v13 = *(llvm::Type **)(inserted + 24);
        v49 = 257;
        AlignedLoad = (llvm::Type **)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v50, v13, inserted, 0, 0, (uint64_t)&v46);
        v15 = *AlignedLoad;
        v49 = 257;
        PointerBitCastOrAddrSpaceCast = llvm::IRBuilderBase::CreatePointerBitCastOrAddrSpaceCast((llvm::IRBuilderBase *)v50, AlignedLoad, v11, (const llvm::Twine *)&v46);
        v46 = 0;
        v47 = 0;
        v48 = 0;
        MemoryIndirectionPass::unpackAccelerationStructureValue(this, PointerBitCastOrAddrSpaceCast, (llvm::IRBuilderBase *)v50, (uint64_t *)&v46);
        v17 = v46;
        BVHDataPointerIntrinsic = MemoryIndirectionPass::generateGetBVHDataPointerIntrinsic((uint64_t)this, (uint64_t)v50, v43, v47, (uint64_t)v15);
        if ((*((_WORD *)v43 + 9) & 1) != 0)
          llvm::Function::BuildLazyArguments(v43);
        v19 = *((_QWORD *)v43 + 11);
        v20 = *(_QWORD *)(BVHDataPointerIntrinsic + 32);
        if (v20)
          v21 = v20 == *(_QWORD *)(BVHDataPointerIntrinsic + 40) + 40;
        else
          v21 = 1;
        if (v21)
          v22 = 0;
        else
          v22 = (llvm::Instruction *)(v20 - 24);
        llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)v50, v22);
        MemoryIndirectionPass::synthesizeAndInsertPrimitiveDataHandle((uint64_t)this, (llvm::IRBuilderBase *)v50, (llvm::Type **)(v19 + 40 * PrimitiveDataArgIndex), v17, (llvm::Type **)BVHDataPointerIntrinsic);
        llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v58);
        llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v57);
        if (v50[0] != v51)
          free(v50[0]);
      }
      v23 = llvm::Function::args(v7);
      v25 = v24;
      if ((_QWORD *)v23 != v24)
      {
        v26 = (llvm::Type **)(v23 + 8);
        do
        {
          if (PrimitiveDataArgIndex
            && *((_BYTE *)*(v26 - 1) + 8) == 15
            && MemoryIndirectionPass::indirectAddressSpace(this, *(v26 - 1)))
          {
            v27 = *((_QWORD *)v43 + 10);
            if (v27)
              v28 = (llvm::BasicBlock *)(v27 - 24);
            else
              v28 = 0;
            Context = llvm::BasicBlock::getContext(v28);
            v50[0] = v51;
            v50[1] = (void *)0x200000000;
            v51[6] = Context;
            v51[7] = &v57;
            v51[8] = v58;
            v51[9] = 0;
            v52 = 0;
            v53 = 512;
            v54 = 7;
            v55 = 0;
            v56 = 0;
            v57 = v42;
            v58[0] = v41;
            v51[4] = v28;
            v51[5] = (char *)v28 + 40;
            v30 = (llvm::Instruction *)llvm::BasicBlock::getFirstNonPHI(v28);
            llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)v50, v30);
            v31 = *((_QWORD *)this + 8) + 208;
            BitOrPointerCast = (llvm::Value *)(v26 - 1);
            llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>,llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v31, &BitOrPointerCast, (uint64_t)&v46);
            BitOrPointerCast = 0;
            v32 = (llvm::Type *)llvm::PointerType::get();
            v49 = 257;
            BitOrPointerCast = llvm::IRBuilderBase::CreateBitOrPointerCast((llvm::IRBuilderBase *)v50, v26 - 1, v32, (const llvm::Twine *)&v46);
            llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>,llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::try_emplace<llvm::detail::DenseSetEmpty&>(*((_QWORD *)this + 8) + 208, &BitOrPointerCast, (uint64_t)&v46);
            v33 = **(llvm::Type ***)(*(_QWORD *)BitOrPointerCast + 16);
            v49 = 257;
            v34 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v50, v33, (uint64_t)BitOrPointerCast, 259, 0, (uint64_t)&v46);
            v35 = *((_QWORD *)this + 8) + 208;
            v44 = v34;
            llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>,llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v35, &v44, (uint64_t)&v46);
            llvm::Value::replaceAllUsesWith();
            v36 = BitOrPointerCast;
            v37 = (llvm::Value *)((char *)BitOrPointerCast - 32);
            if (*((_QWORD *)BitOrPointerCast - 4))
            {
              **((_QWORD **)BitOrPointerCast - 2) = *((_QWORD *)BitOrPointerCast - 3);
              v38 = *((_QWORD *)v36 - 3);
              if (v38)
                *(_QWORD *)(v38 + 16) = *((_QWORD *)v36 - 2);
            }
            *((_QWORD *)v36 - 4) = v26 - 1;
            v39 = *v26;
            *((_QWORD *)v36 - 3) = *v26;
            if (v39)
              *((_QWORD *)v39 + 2) = (char *)v36 - 24;
            *((_QWORD *)v36 - 2) = v26;
            *v26 = v37;
            llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v58);
            llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v57);
            if (v50[0] != v51)
              free(v50[0]);
          }
          v40 = v26 + 4;
          v26 += 5;
          --PrimitiveDataArgIndex;
        }
        while (v40 != v25);
      }
      while (1)
      {
        i += 2;
        if (i == (_QWORD *)v5)
          break;
        if ((*i | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          if (i != (_QWORD *)v5)
            goto LABEL_10;
          return;
        }
      }
    }
  }
}

void sub_240FCC190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder((void **)va);
  _Unwind_Resume(a1);
}

void MemoryIndirectionPass::handleMemoryQueryFunction(MemoryIndirectionPass *this, llvm::Value **a2)
{
  llvm::BasicBlock *v4;
  llvm::BasicBlock *v5;
  llvm::Value *v6;
  uint64_t v7;
  uint64_t v8;
  llvm::Value *v10;
  llvm::BasicBlock *v11;
  uint64_t v12;
  llvm::BasicBlock *v13;
  llvm::BasicBlock *v14;
  llvm::BasicBlock *v15;
  llvm::BasicBlock *v16;
  llvm::BranchInst *v17;
  llvm::Type *v18;
  llvm::Instruction *v19;
  llvm::LLVMContext *PHI;
  llvm::Instruction *v21;
  uint64_t v22;
  llvm::CmpInst **v23;
  uint64_t v24;
  llvm::BasicBlock *v25;
  uint64_t v26;
  llvm::Value *v27;
  uint64_t v28;
  llvm::Value *v29;
  llvm::Value *v30;
  llvm::Value *v31;
  llvm::Value *v32;
  uint64_t v33;
  uint64_t v34;
  llvm::Value *v35;
  llvm::Value *v36;
  llvm::Value *v37;
  llvm::Value *v38;
  llvm::Instruction *v39;
  llvm::Value *v40;
  llvm::Type *v41;
  llvm::Value *v42;
  uint64_t v43;
  char *v44;
  size_t v45;
  llvm::Type *v46;
  uint64_t v47;
  llvm::Type *v48;
  llvm::Value *v49;
  llvm::Value *v50;
  llvm::CmpInst **v51;
  llvm::Value *v52;
  llvm::Instruction *v53;
  uint64_t v54;
  uint64_t v55;
  llvm::Value *v56;
  llvm::Value *v57;
  llvm::Value *LShr;
  llvm::Value *v59;
  uint64_t v60;
  uint64_t v61;
  llvm::Value *v62;
  llvm::Value *v63;
  llvm::Value *v64;
  llvm::Value *v65;
  llvm::Instruction *Shl;
  llvm::Value *inserted;
  llvm::Type *v68;
  llvm::Value *AlignedLoad;
  uint64_t v70;
  char *v71;
  size_t v72;
  llvm::Type *GVBaseType;
  uint64_t GEP;
  llvm::Type *v75;
  llvm::Value *v76;
  llvm::Value *v77;
  llvm::CmpInst **v78;
  llvm::LLVMContext *Select;
  llvm::Instruction *v80;
  uint64_t v81;
  llvm::CmpInst **IndirectPtrToOffset;
  uint64_t IndirectPtrToLength;
  uint64_t ICmp;
  uint64_t v85;
  llvm::LLVMContext *Cast;
  llvm::Instruction *v87;
  uint64_t v88;
  _BYTE v89[32];
  __int16 v90;
  _BYTE v91[32];
  __int16 v92;
  _BYTE v93[32];
  __int16 v94;
  uint64_t Name;
  uint64_t v96;
  llvm::BasicBlock *v97;
  _QWORD v98[4];
  __int16 v99;
  void *v100[2];
  _WORD v101[16];
  llvm::BasicBlock *v102;
  char *v103;
  llvm::ReturnInst *v104;
  uint64_t v105;
  _QWORD v106[9];

  v106[7] = *MEMORY[0x24BDAC8D0];
  if (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)a2))
  {
    v97 = 0;
    v5 = (llvm::BasicBlock *)*((_QWORD *)this + 5);
    v101[8] = 257;
    v97 = (llvm::BasicBlock *)llvm::BasicBlock::Create(v5, (llvm::LLVMContext *)v100, (const llvm::Twine *)a2, 0, v4);
    if ((*((_WORD *)a2 + 9) & 1) != 0)
      llvm::Function::BuildLazyArguments((llvm::Function *)a2);
    v6 = a2[11];
    Name = llvm::Value::getName((llvm::Value *)a2);
    v96 = v7;
    v8 = llvm::StringRef::find();
    if (llvm::StringRef::find() != -1 || v8 != -1)
      v10 = (llvm::Value *)llvm::ConstantInt::get();
    else
      v10 = 0;
    MTLIRBuilder::MTLIRBuilder<llvm::BasicBlock *&>((uint64_t)v100, &v97);
    v12 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 8) + 72) + 20);
    if ((~v12 & 0x200000400) != 0)
    {
      if ((v12 & 0x400) != 0)
      {
        IndirectPtrToOffset = (llvm::CmpInst **)MemoryIndirectionPass::createIndirectPtrToOffset(this, v6);
        IndirectPtrToLength = MemoryIndirectionPass::createIndirectPtrToLength(this, v6);
        v99 = 257;
        llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)v100, (uint64_t)IndirectPtrToOffset, (uint64_t)v98);
        v99 = 257;
        llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)v100, IndirectPtrToLength, (uint64_t)v98);
        v94 = 257;
        ICmp = llvm::IRBuilderBase::CreateICmp((uint64_t)v100, 34, IndirectPtrToOffset, IndirectPtrToLength, (uint64_t)v93);
        v85 = *((_QWORD *)this + 12);
        v92 = 257;
        Cast = (llvm::LLVMContext *)llvm::IRBuilderBase::CreateCast((uint64_t)v100, 39, ICmp, v85, (uint64_t)v91);
        v88 = llvm::ReturnInst::Create(v104, Cast, 0, v87);
        v99 = 257;
        llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)v100, v88, (uint64_t)v98);
      }
      else if ((v12 & 0x200000000) != 0)
      {
        v55 = *((_QWORD *)this + 9);
        v99 = 257;
        v56 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v100, 47, (uint64_t)v6, v55, (uint64_t)v98);
        v99 = 257;
        v57 = (llvm::Value *)llvm::ConstantInt::get();
        LShr = (llvm::Value *)llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)v100, v56, v57, (const llvm::Twine *)v98, 0);
        v99 = 257;
        v59 = (llvm::Value *)llvm::ConstantInt::get();
        v60 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)v100, v56, v59, (const llvm::Twine *)v98, 0);
        v61 = *((_QWORD *)this + 12);
        v94 = 257;
        v62 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v100, 38, v60, v61, (uint64_t)v93);
        v92 = 257;
        v63 = (llvm::Value *)llvm::ConstantInt::get();
        v64 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)v100, v62, v63, (const llvm::Twine *)v91);
        v90 = 257;
        v65 = (llvm::Value *)llvm::ConstantInt::get();
        Shl = llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)v100, v64, v65, (const llvm::Twine *)v89, 0, 0);
        inserted = (llvm::Value *)MTLBoundsCheck::SharedPassData::getOrInsertBufferUsageTableGV(*((MTLBoundsCheck::SharedPassData **)this
                                                                                                + 8));
        v68 = (llvm::Type *)*((_QWORD *)inserted + 3);
        v99 = 257;
        AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v100, v68, (uint64_t)inserted, 0, 0, (uint64_t)v98);
        v70 = *((_QWORD *)this + 8);
        v71 = (char *)llvm::Value::getName(inserted);
        GVBaseType = (llvm::Type *)MTLBoundsCheck::SharedPassData::getGVBaseType(v70, v71, v72);
        v99 = 257;
        GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)v100, GVBaseType, AlignedLoad, LShr, (const llvm::Twine *)v98);
        v75 = *(llvm::Type **)(GEP + 72);
        v99 = 257;
        v76 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v100, v75, GEP, 0, 0, (uint64_t)v98);
        v99 = 257;
        v77 = (llvm::Value *)llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)v100, v76, Shl, (const llvm::Twine *)v98, 0);
        v94 = 257;
        v78 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)v100, v77, v10, (const llvm::Twine *)v93);
        v94 = 257;
        llvm::IRBuilderBase::CreateICmp((uint64_t)v100, 32, v78, (uint64_t)v10, (uint64_t)v93);
        llvm::ConstantInt::get();
        llvm::ConstantInt::get();
        v92 = 257;
        Select = (llvm::LLVMContext *)llvm::IRBuilderBase::CreateSelect();
        v81 = llvm::ReturnInst::Create(v104, Select, 0, v80);
        v99 = 257;
        llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)v100, v81, (uint64_t)v98);
      }
    }
    else
    {
      v13 = (llvm::BasicBlock *)*((_QWORD *)this + 5);
      v98[0] = "access";
      v99 = 259;
      v14 = (llvm::BasicBlock *)llvm::BasicBlock::Create(v13, (llvm::LLVMContext *)v98, (const llvm::Twine *)a2, 0, v11);
      v15 = (llvm::BasicBlock *)*((_QWORD *)this + 5);
      v98[0] = "ret";
      v99 = 259;
      v17 = (llvm::BranchInst *)llvm::BasicBlock::Create(v15, (llvm::LLVMContext *)v98, (const llvm::Twine *)a2, 0, v16);
      v102 = v17;
      v103 = (char *)v17 + 40;
      v18 = (llvm::Type *)*((_QWORD *)this + 12);
      v99 = 257;
      PHI = (llvm::LLVMContext *)llvm::IRBuilderBase::CreatePHI((llvm::IRBuilderBase *)v100, v18, (llvm::Type *)2, (const llvm::Twine *)v98, v19);
      v22 = llvm::ReturnInst::Create(v104, PHI, 0, v21);
      v99 = 257;
      llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)v100, v22, (uint64_t)v98);
      v102 = v97;
      v103 = (char *)v97 + 40;
      v23 = (llvm::CmpInst **)MemoryIndirectionPass::createIndirectPtrToOffset(this, v6);
      v24 = MemoryIndirectionPass::createIndirectPtrToLength(this, v6);
      v99 = 257;
      llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)v100, (uint64_t)v23, (uint64_t)v98);
      v99 = 257;
      llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)v100, v24, (uint64_t)v98);
      v99 = 257;
      v25 = (llvm::BasicBlock *)llvm::IRBuilderBase::CreateICmp((uint64_t)v100, 34, v23, v24, (uint64_t)v98);
      v26 = *((_QWORD *)this + 12);
      v99 = 257;
      v27 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v100, 39, (uint64_t)v25, v26, (uint64_t)v98);
      llvm::PHINode::addIncoming(PHI, v27, v97);
      llvm::IRBuilderBase::CreateCondBr((uint64_t *)v100, v25, v17, v14, 0, 0);
      v102 = v14;
      v103 = (char *)v14 + 40;
      v28 = *((_QWORD *)this + 9);
      v99 = 257;
      v29 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v100, 47, (uint64_t)v6, v28, (uint64_t)v98);
      v99 = 257;
      v30 = (llvm::Value *)llvm::ConstantInt::get();
      v31 = (llvm::Value *)llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)v100, v29, v30, (const llvm::Twine *)v98, 0);
      v99 = 257;
      v32 = (llvm::Value *)llvm::ConstantInt::get();
      v33 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)v100, v29, v32, (const llvm::Twine *)v98, 0);
      v34 = *((_QWORD *)this + 12);
      v94 = 257;
      v35 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v100, 38, v33, v34, (uint64_t)v93);
      v92 = 257;
      v36 = (llvm::Value *)llvm::ConstantInt::get();
      v37 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)v100, v35, v36, (const llvm::Twine *)v91);
      v90 = 257;
      v38 = (llvm::Value *)llvm::ConstantInt::get();
      v39 = llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)v100, v37, v38, (const llvm::Twine *)v89, 0, 0);
      v40 = (llvm::Value *)MTLBoundsCheck::SharedPassData::getOrInsertBufferUsageTableGV(*((MTLBoundsCheck::SharedPassData **)this
                                                                                         + 8));
      v41 = (llvm::Type *)*((_QWORD *)v40 + 3);
      v99 = 257;
      v42 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v100, v41, (uint64_t)v40, 0, 0, (uint64_t)v98);
      v43 = *((_QWORD *)this + 8);
      v44 = (char *)llvm::Value::getName(v40);
      v46 = (llvm::Type *)MTLBoundsCheck::SharedPassData::getGVBaseType(v43, v44, v45);
      v99 = 257;
      v47 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)v100, v46, v42, v31, (const llvm::Twine *)v98);
      v48 = *(llvm::Type **)(v47 + 72);
      v99 = 257;
      v49 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v100, v48, v47, 0, 0, (uint64_t)v98);
      v99 = 257;
      v50 = (llvm::Value *)llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)v100, v49, v39, (const llvm::Twine *)v98, 0);
      v94 = 257;
      v51 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)v100, v50, v10, (const llvm::Twine *)v93);
      v99 = 257;
      llvm::IRBuilderBase::CreateICmp((uint64_t)v100, 32, v51, (uint64_t)v10, (uint64_t)v98);
      llvm::ConstantInt::get();
      llvm::ConstantInt::get();
      v99 = 257;
      v52 = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
      llvm::PHINode::addIncoming(PHI, v52, v14);
      v54 = llvm::BranchInst::Create(v17, 0, v53);
      v99 = 257;
      llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)v100, v54, (uint64_t)v98);
    }
    llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v106);
    llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v105);
    if (v100[0] != v101)
      free(v100[0]);
  }
}

void sub_240FCCA8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder(&a32);
  _Unwind_Resume(a1);
}

BOOL MemoryIndirectionPass::shouldModifyFunction(MemoryIndirectionPass *this, llvm::Function *a2)
{
  uint64_t Name;
  unint64_t v4;
  unint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  BOOL v16;

  Name = llvm::Value::getName(a2);
  if (v4 >= 0x1A)
  {
    if (*(_QWORD *)Name == 0x6C6174656D5F5F5FLL
      && *(_QWORD *)(Name + 8) == 0x6E6F635F7465675FLL
      && *(_QWORD *)(Name + 16) == 0x696F705F6C6F7274
      && *(_WORD *)(Name + 24) == 29806)
    {
      return 0;
    }
  }
  else if (v4 < 0x15)
  {
    goto LABEL_32;
  }
  v8 = Name + v4;
  if (*(_QWORD *)(Name + v4 - 21) == 0x4E4F435F4C544D2ELL
    && *(_QWORD *)(Name + v4 - 13) == 0x494F505F4C4F5254
    && *(_QWORD *)(Name + v4 - 8) == 0x4E465F544E494F50)
  {
    return 0;
  }
  if (v4 >= 0x1B)
  {
    v11 = *(_QWORD *)(v8 - 27);
    v12 = *(_QWORD *)(v8 - 19);
    v13 = *(_QWORD *)(v8 - 11);
    v14 = *(_QWORD *)(v8 - 8);
    v15 = v11 == 0x61705F6C6174656DLL && v12 == 0x746E6F635F686374;
    v16 = v15 && v13 == 0x6E696F705F6C6F72;
    if (v16 && v14 == 0x745F746E696F705FLL)
      return 0;
  }
LABEL_32:
  if ((llvm::GlobalValue::isDeclaration(a2) & 1) != 0)
    return 0;
  return llvm::Value::getMetadata() == 0;
}

void MemoryIndirectionPass::fixupInstructions(MemoryIndirectionPass *this, llvm::Function *a2)
{
  char *v2;
  char *v4;
  char *v5;
  char *v6;
  unsigned __int8 *v7;
  unsigned int v8;
  BOOL v9;
  int v10;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t CheckedFunction;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char *v21;
  llvm::Instruction *v22;
  llvm::Instruction *v23;
  __int16 v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  llvm::Type *v28;
  unsigned int v29;
  llvm::Instruction *IndirectLoad;
  llvm::Instruction *v31;
  llvm::Type **v32;
  llvm::Type **v33;
  uint64_t *v34;
  llvm::Type *v35;
  unsigned int v36;
  llvm::Instruction *v37;
  llvm::Instruction *IndirectStore;
  char *v39;
  _QWORD v40[4];
  __int16 v41;
  void *v42;
  unsigned int v43;
  uint64_t v44;
  void *v45;
  unsigned int v46;
  int v47;
  _QWORD v48[10];

  v48[8] = *MEMORY[0x24BDAC8D0];
  v45 = v48;
  v47 = 8;
  v2 = (char *)*((_QWORD *)a2 + 10);
  v39 = (char *)a2 + 72;
  if (v2 != (char *)a2 + 72)
  {
    do
    {
      v4 = v2 - 24;
      if (!v2)
        v4 = 0;
      v46 = 0;
      v5 = v4 + 40;
      v6 = (char *)*((_QWORD *)v4 + 6);
      if (v6 != v4 + 40)
      {
        do
        {
          v7 = (unsigned __int8 *)(v6 - 24);
          if (!v6)
            v7 = 0;
          v8 = v7[16] - 60;
          v9 = v8 > 0x18;
          v10 = (1 << v8) & 0x1000003;
          if (!v9 && v10 != 0)
          {
            v42 = v7;
            llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)&v45, (uint64_t *)&v42);
          }
          v6 = (char *)*((_QWORD *)v6 + 1);
        }
        while (v6 != v5);
        if (v46)
        {
          v12 = (uint64_t *)v45;
          v13 = 8 * v46;
          do
          {
            v14 = *v12;
            v15 = *(unsigned __int8 *)(*v12 + 16);
            switch(v15)
            {
              case '<':
                v25 = *(uint64_t **)(v14 - 32);
                v26 = (uint64_t *)(*((_QWORD *)this + 8) + 208);
                v42 = v25;
                v40[0] = 0;
                if ((llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>,llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::LookupBucketFor<llvm::Value *>(v26, &v42, v40) & 1) == 0)
                {
                  if ((v27 = *v25, v28 = *(llvm::Type **)v14, !*(_QWORD *)(v14 + 48))
                    && (*(_BYTE *)(v14 + 23) & 0x20) == 0
                    || !llvm::Instruction::getMetadataImpl())
                  {
                    if (MemoryIndirectionPass::indirectAddressSpace(this, (llvm::Type *)v27))
                    {
                      v29 = *(_DWORD *)(v27 + 8);
                      if ((v29 & 0xFE) == 0x12)
                        v29 = *(_DWORD *)(**(_QWORD **)(v27 + 16) + 8);
                      IndirectLoad = (llvm::Instruction *)MemoryIndirectionPass::createIndirectLoad((llvm::DataLayout **)this, (llvm::Value *)v25, v29 >> 8, v28, 1 << ((unint64_t)*(unsigned __int16 *)(v14 + 18) >> 1));
                      if (IndirectLoad != (llvm::Instruction *)v14)
                        llvm::ReplaceInstWithInst((llvm *)v14, IndirectLoad, v31);
                    }
                  }
                }
                break;
              case '=':
                v32 = *(llvm::Type ***)(v14 - 32);
                v33 = *(llvm::Type ***)(v14 - 64);
                if (!*(_QWORD *)(v14 + 48) && (*(_BYTE *)(v14 + 23) & 0x20) == 0
                  || !llvm::Instruction::getMetadataImpl())
                {
                  v34 = (uint64_t *)(*((_QWORD *)this + 8) + 208);
                  v42 = v32;
                  v40[0] = 0;
                  if ((llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>,llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::LookupBucketFor<llvm::Value *>(v34, &v42, v40) & 1) == 0)
                  {
                    v35 = *v32;
                    if (MemoryIndirectionPass::indirectAddressSpace(this, *v32))
                    {
                      v36 = *((_DWORD *)v35 + 2);
                      if ((v36 & 0xFE) == 0x12)
                        v36 = *(_DWORD *)(**((_QWORD **)v35 + 2) + 8);
                      IndirectStore = (llvm::Instruction *)MemoryIndirectionPass::createIndirectStore((llvm::DataLayout **)this, (void **)v32, v36 >> 8, v33, 1 << ((unint64_t)*(unsigned __int16 *)(v14 + 18) >> 1));
                    }
                    else
                    {
                      IndirectStore = (llvm::Instruction *)llvm::User::operator new((llvm::User *)0x40);
                      llvm::StoreInst::StoreInst();
                    }
                    llvm::ReplaceInstWithInst((llvm *)v14, IndirectStore, v37);
                  }
                }
                break;
              case 'T':
                v16 = *(_QWORD *)(v14 - 32);
                if (!v16 || *(_BYTE *)(v16 + 16) || *(_QWORD *)(v16 + 24) != *(_QWORD *)(v14 + 72))
                  v16 = 0;
                CheckedFunction = MemoryIndirectionPass::createCheckedFunction(this, *v12, (llvm::Value *)v16);
                v18 = CheckedFunction;
                if (CheckedFunction)
                {
                  v19 = *(_QWORD *)(CheckedFunction + 24);
                  v20 = *(_DWORD *)(v14 + 20);
                  v21 = (char *)llvm::CallBase::arg_end((llvm::CallBase *)v14);
                  llvm::SmallVector<llvm::Value *,4u>::SmallVector<llvm::Use *,void>(&v42, (char *)(v14 - 32 * (v20 & 0x7FFFFFF)), v21);
                  v41 = 257;
                  v23 = (llvm::Instruction *)llvm::CallInst::Create(v19, v18, (uint64_t)v42, v43, 0, 0);
                  if (v42 != &v44)
                    free(v42);
                  v24 = *((_WORD *)v23 + 9) & 0xFFFC | *(_WORD *)(v14 + 18) & 3;
                  *((_WORD *)v23 + 9) = v24;
                  *((_WORD *)v23 + 9) = v24 & 0xF003 | *(_WORD *)(v14 + 18) & 0xFFC;
                  llvm::ReplaceInstWithInst((llvm *)v14, v23, v22);
                }
                break;
            }
            ++v12;
            v13 -= 8;
          }
          while (v13);
        }
      }
      v2 = (char *)*((_QWORD *)v2 + 1);
    }
    while (v2 != v39);
    if (v45 != v48)
      free(v45);
  }
}

void sub_240FCD0C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;

  llvm::User::operator delete(v23);
  if (a23 != a9)
    free(a23);
  _Unwind_Resume(a1);
}

uint64_t llvm::DenseMap<llvm::Type *,llvm::Type *,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,llvm::Type *>>::shrink_and_clear(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  llvm *v6;
  uint64_t v7;

  v1 = result;
  v2 = *(unsigned int *)(result + 16);
  v3 = *(_DWORD *)(result + 8);
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 == (_DWORD)v2)
  {
    *(_QWORD *)(result + 8) = 0;
    if ((_DWORD)v2)
    {
      v6 = *(llvm **)result;
      v7 = 16 * v2;
      do
      {
        *(_QWORD *)v6 = -4096;
        v6 = (llvm *)((char *)v6 + 16);
        v7 -= 16;
      }
      while (v7);
    }
  }
  else
  {
    llvm::deallocate_buffer(*(llvm **)result, (void *)(16 * v2));
    return llvm::DenseMap<llvm::Type *,llvm::Type *,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,llvm::Type *>>::init(v1, v5);
  }
  return result;
}

void std::deque<llvm::User *>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<llvm::User *>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<llvm::User *>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<llvm::User **>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<llvm::User **>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<llvm::User **>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<llvm::User **>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_240FCD524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__split_buffer<llvm::User **>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<llvm::User **>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

uint64_t std::deque<llvm::User *>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<llvm::User **>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<llvm::User **>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

BOOL MemoryIndirectionPass::indirectAddressSpace(MemoryIndirectionPass *this, llvm::Type *a2)
{
  unsigned int v2;
  llvm::StructType *v4;

  v2 = *((_DWORD *)a2 + 2);
  if (v2 != 15)
    return 0;
  v4 = (llvm::StructType *)**((_QWORD **)a2 + 2);
  if (*((_BYTE *)v4 + 8) == 16)
  {
    if (isSpecialStructType(v4))
      return 0;
    v2 = *((_DWORD *)a2 + 2);
  }
  if ((v2 & 0xFE) == 0x12)
    v2 = *(_DWORD *)(**((_QWORD **)a2 + 2) + 8);
  return (v2 >> 8) - 1 < 2;
}

uint64_t MetalModulePass::getMetadata<int>()
{
  llvm::IntegerType::get();
  llvm::ConstantInt::get();
  return llvm::ValueAsMetadata::get();
}

uint64_t llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(uint64_t result, int a2)
{
  uint64_t v3;
  unsigned int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 8);
  if (v4 >= *(_DWORD *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v3 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v3 + 4 * v4) = a2;
  ++*(_DWORD *)(v3 + 8);
  return result;
}

_QWORD *llvm::SmallVector<llvm::Value *,8u>::SmallVector(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = a1 + 2;
  a1[1] = 0x800000000;
  llvm::SmallVectorImpl<llvm::Value *>::assign((uint64_t)a1, a2, *a3);
  return a1;
}

void sub_240FCDBF4(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  void *v3;

  v3 = v2;
  if (*v1 != v3)
    free(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t llvm::SmallVectorImpl<llvm::Value *>::assign(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t *v7;

  if (*(unsigned int *)(a1 + 12) < (unint64_t)a2)
    return llvm::SmallVectorTemplateBase<llvm::Value *,true>::growAndAssign(a1, a2, a3);
  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= a2)
    v4 = a2;
  else
    v4 = *(unsigned int *)(a1 + 8);
  if (v4)
  {
    v5 = *(uint64_t **)a1;
    do
    {
      *v5++ = a3;
      --v4;
    }
    while (v4);
  }
  v6 = v3 - a2;
  if (v3 < a2)
  {
    v7 = (uint64_t *)(*(_QWORD *)a1 + 8 * v3);
    do
      *v7++ = a3;
    while (!__CFADD__(v6++, 1));
  }
  *(_DWORD *)(a1 + 8) = a2;
  return a1;
}

uint64_t llvm::SmallVectorTemplateBase<llvm::Value *,true>::growAndAssign(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _QWORD *v7;
  uint64_t v8;

  *(_DWORD *)(a1 + 8) = 0;
  result = llvm::SmallVectorBase<unsigned int>::grow_pod();
  if (a2)
  {
    v7 = *(_QWORD **)a1;
    v8 = a2;
    do
    {
      *v7++ = a3;
      --v8;
    }
    while (v8);
  }
  *(_DWORD *)(a1 + 8) = a2;
  return result;
}

void MemoryIndirectionPass::fixIntersectCalls(llvm::Type ****this, llvm::Module *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  llvm::Value *v7;
  unint64_t v8;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  BOOL v24;
  _DWORD *v25;
  uint64_t *v26;
  int v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  llvm::Type **v31;
  llvm::Type *v32;
  llvm::Type **PointerBitCastOrAddrSpaceCast;
  uint64_t v34;
  uint64_t v35;
  uint64_t inserted;
  uint64_t Cast;
  llvm::Instruction *v38;
  uint64_t *v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  llvm::Type **v43;
  llvm::Type **v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  llvm::Type **v51;
  llvm::Type **v52;
  uint64_t v53;
  llvm::Type **v54;
  llvm::Type ***v55;
  llvm::Type *v56;
  llvm::Value *v57;
  uint64_t ConstInBoundsGEP2_32;
  uint64_t v59;
  uint64_t AlignedStore;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  llvm::Value *v73;
  llvm::Type ***v74;
  llvm::Type *v75;
  uint64_t v76;
  uint64_t v77;
  llvm::Value *v78;
  llvm::Type **v79;
  llvm::Value *v80;
  llvm::Value *v81;
  uint64_t IndirectPtrToBase;
  uint64_t v83;
  BOOL v84;
  llvm::Instruction *v85;
  _DWORD *v86;
  uint64_t *v87;
  uint64_t *v88;
  llvm::Value *v89;
  unint64_t v91;
  llvm::Value *v92;
  void **v93;
  llvm::StructType *v94;
  unint64_t v95;
  llvm::Type ***v96;
  llvm::Type *v97;
  uint64_t v98;
  llvm::Value *v99;
  uint64_t v100;
  llvm::Type *v101;
  uint64_t AlignedLoad;
  char *v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  llvm::Value *v108;
  _DWORD *v109;
  _DWORD *v110;
  _QWORD *v111;
  MemoryIndirectionPass *v112;
  llvm::Type *v113;
  llvm::Type **v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  llvm::Type ***v118;
  __int16 v119;
  void *Name;
  unint64_t v121;
  _BYTE v122[104];
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  unsigned int v126;
  _BYTE v127[32];
  _QWORD *v128;
  uint64_t v129;
  _QWORD v130[12];

  v130[10] = *MEMORY[0x24BDAC8D0];
  v4 = llvm::PointerType::get();
  v128 = v130;
  v129 = 0x500000000;
  v5 = (char *)a2 + 24;
  v6 = *((_QWORD *)a2 + 4);
  if ((char *)v6 == v5)
    return;
  v113 = (llvm::Type *)v4;
  do
  {
    if (v6)
      v7 = (llvm::Value *)(v6 - 56);
    else
      v7 = 0;
    Name = (void *)llvm::Value::getName(v7);
    v121 = v8;
    if (llvm::StringRef::find() != -1 || llvm::StringRef::find() != -1)
    {
      v125 = (uint64_t *)v7;
      LODWORD(v117) = 2;
      llvm::SmallVectorImpl<std::pair<llvm::Function *,MemoryIndirectionPass::fixIntersectCalls(llvm::Module *)::Handling>>::emplace_back<llvm::Function *,MemoryIndirectionPass::fixIntersectCalls(llvm::Module *)::Handling>((uint64_t)&v128, (uint64_t *)&v125, &v117);
    }
    if (v121 >= 4 && *(_DWORD *)Name == 779250017)
    {
      if (v121 < 0xD)
        goto LABEL_78;
      if (*(_QWORD *)Name != 0x65746E692E726961 || *(_QWORD *)((char *)Name + 5) != 0x746365737265746ELL)
      {
        if (v121 >= 0x1C)
        {
          if (*(_QWORD *)Name == 0x657365722E726961
            && *((_QWORD *)Name + 1) == 0x737265746E695F74
            && *((_QWORD *)Name + 2) == 0x715F6E6F69746365
            && *((_DWORD *)Name + 6) == 2037540213)
          {
            v125 = (uint64_t *)v7;
            LODWORD(v117) = 1;
            llvm::SmallVectorImpl<std::pair<llvm::Function *,MemoryIndirectionPass::fixIntersectCalls(llvm::Module *)::Handling>>::emplace_back<llvm::Function *,MemoryIndirectionPass::fixIntersectCalls(llvm::Module *)::Handling>((uint64_t)&v128, (uint64_t *)&v125, &v117);
            goto LABEL_78;
          }
        }
        else if (v121 < 0x17)
        {
          goto LABEL_78;
        }
        if (*(_QWORD *)((char *)Name + v121 - 23) == 0x72656C656363615FLL
          && *(_QWORD *)((char *)Name + v121 - 15) == 0x74735F6E6F697461
          && *(_QWORD *)((char *)Name + v121 - 8) == 0x6572757463757274)
        {
          if (v121 >= 0x1A
            && (*(_QWORD *)Name == 0x5F7465672E726961
              ? (v18 = *((_QWORD *)Name + 1) == 0x695F657571696E75)
              : (v18 = 0),
                v18 ? (v19 = *((_QWORD *)Name + 2) == 0x65696669746E6564) : (v19 = 0),
                v19 ? (v20 = *((unsigned __int16 *)Name + 12) == 24434) : (v20 = 0),
                v20)
            || (*(_QWORD *)Name == 0x5F7465672E726961
              ? (v21 = *((_QWORD *)Name + 1) == 0x696F705F61746164)
              : (v21 = 0),
                v21 ? (v22 = *(_QWORD *)((char *)Name + 13) == 0x5F7265746E696F70) : (v22 = 0),
                v22
             || (*(_QWORD *)Name == 0x5F7465672E726961
               ? (v23 = *((_QWORD *)Name + 1) == 0x65636E6174736E69)
               : (v23 = 0),
                 v23 ? (v24 = *(_QWORD *)((char *)Name + 15) == 0x5F746E756F635F65) : (v24 = 0),
                 v24)))
          {
            v125 = (uint64_t *)v7;
            LODWORD(v117) = 5;
            llvm::SmallVectorImpl<std::pair<llvm::Function *,MemoryIndirectionPass::fixIntersectCalls(llvm::Module *)::Handling>>::emplace_back<llvm::Function *,MemoryIndirectionPass::fixIntersectCalls(llvm::Module *)::Handling>((uint64_t)&v128, (uint64_t *)&v125, &v117);
          }
        }
        goto LABEL_78;
      }
      if (v121 >= 0x1B
        && (*(_QWORD *)Name == 0x65746E692E726961 ? (v10 = *((_QWORD *)Name + 1) == 0x69645F7463657372) : (v10 = 0),
            v10 ? (v11 = *((_QWORD *)Name + 2) == 0x6363615F74636572) : (v11 = 0),
            v11 ? (v12 = *(_QWORD *)((char *)Name + 19) == 0x7373656363615F74) : (v12 = 0),
            v12))
      {
        v125 = (uint64_t *)v7;
        LODWORD(v117) = 4;
        llvm::SmallVectorImpl<std::pair<llvm::Function *,MemoryIndirectionPass::fixIntersectCalls(llvm::Module *)::Handling>>::emplace_back<llvm::Function *,MemoryIndirectionPass::fixIntersectCalls(llvm::Module *)::Handling>((uint64_t)&v128, (uint64_t *)&v125, &v117);
      }
      else
      {
        v125 = (uint64_t *)v7;
        LODWORD(v117) = 0;
        llvm::SmallVectorImpl<std::pair<llvm::Function *,MemoryIndirectionPass::fixIntersectCalls(llvm::Module *)::Handling>>::emplace_back<llvm::Function *,MemoryIndirectionPass::fixIntersectCalls(llvm::Module *)::Handling>((uint64_t)&v128, (uint64_t *)&v125, &v117);
      }
LABEL_78:
      if (llvm::StringRef::find() != -1)
      {
        v125 = (uint64_t *)v7;
        LODWORD(v117) = 3;
        llvm::SmallVectorImpl<std::pair<llvm::Function *,MemoryIndirectionPass::fixIntersectCalls(llvm::Module *)::Handling>>::emplace_back<llvm::Function *,MemoryIndirectionPass::fixIntersectCalls(llvm::Module *)::Handling>((uint64_t)&v128, (uint64_t *)&v125, &v117);
      }
    }
    v6 = *(_QWORD *)(v6 + 8);
  }
  while ((char *)v6 != v5);
  v25 = v128;
  if ((_DWORD)v129)
  {
    v111 = &v128[2 * v129];
    v112 = (MemoryIndirectionPass *)this;
    do
    {
      v26 = *(uint64_t **)v25;
      v27 = v25[2];
      switch(v27)
      {
        case 0:
        case 4:
          v109 = v25;
          llvm::SmallVector<llvm::User *,4u>::SmallVector<llvm::Value::user_iterator_impl<llvm::User>,void>(&v125, v26[1], 0);
          v28 = v125;
          if (v126)
          {
            v108 = (llvm::Value *)v26;
            v29 = 8 * v126;
            do
            {
              v30 = *v28;
              if (*v28
                && *(_BYTE *)(v30 + 16) == 84
                && (!*(_QWORD *)(v30 + 48) && (*(_BYTE *)(v30 + 23) & 0x20) == 0 || !llvm::Instruction::getMetadataImpl()))
              {
                llvm::MDTuple::getImpl();
                llvm::Instruction::setMetadata();
                llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::IRBuilder((uint64_t)&Name, (llvm::Value *)v30, 0, 0, 0);
                v31 = *(llvm::Type ***)(v30 - 32 * (*(_DWORD *)(v30 + 20) & 0x7FFFFFF) + 128);
                v32 = *v31;
                v119 = 257;
                PointerBitCastOrAddrSpaceCast = llvm::IRBuilderBase::CreatePointerBitCastOrAddrSpaceCast((llvm::IRBuilderBase *)&Name, v31, v113, (const llvm::Twine *)&v117);
                v114 = 0;
                v115 = 0;
                v116 = 0;
                MemoryIndirectionPass::unpackAccelerationStructureValue(this, PointerBitCastOrAddrSpaceCast, (llvm::IRBuilderBase *)&Name, (uint64_t *)&v114);
                v35 = (uint64_t)v114;
                v34 = v115;
                inserted = MTLBoundsCheck::SharedPassData::getOrInsertAccelerationStructurePtrGV(this[8]);
                llvm::IRBuilderBase::CreateAlignedStore((uint64_t)&Name, PointerBitCastOrAddrSpaceCast, inserted, 0);
                v119 = 257;
                Cast = llvm::IRBuilderBase::CreateCast((uint64_t)&Name, 48, v34, (uint64_t)v32, (uint64_t)&v117);
                llvm::CallBase::setArgOperand(v30, 4u, Cast);
                if (!v27)
                  MemoryIndirectionPass::generatePrimitiveDataHandle((uint64_t)this, v108, (llvm::Value *)v30, v35, v34, (uint64_t)v32);
                if (((_BYTE)this[8][9][3] & 0x10) != 0)
                {
                  v38 = (llvm::Instruction *)MemoryIndirectionPass::createValidateAccelerationStructureTypeCall((uint64_t)this, (llvm::Instruction *)v30);
                  llvm::Instruction::insertBefore(v38, (llvm::Instruction *)v30);
                  llvm::CallBase::setArgOperand((uint64_t)v38, 0, (uint64_t)v31);
                }
                llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)&v124);
                llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v123);
                if (Name != v122)
                  free(Name);
              }
              ++v28;
              v29 -= 8;
            }
            while (v29);
            v28 = v125;
          }
          if (v28 != (uint64_t *)v127)
            free(v28);
          v25 = v109;
          goto LABEL_179;
        case 1:
          llvm::SmallVector<llvm::User *,4u>::SmallVector<llvm::Value::user_iterator_impl<llvm::User>,void>(&v125, v26[1], 0);
          v39 = v125;
          if (v126)
          {
            v110 = v25;
            v49 = 8 * v126;
            do
            {
              v50 = *v39;
              if (*v39
                && *(_BYTE *)(v50 + 16) == 84
                && (!*(_QWORD *)(v50 + 48) && (*(_BYTE *)(v50 + 23) & 0x20) == 0 || !llvm::Instruction::getMetadataImpl()))
              {
                llvm::MDTuple::getImpl();
                llvm::Instruction::setMetadata();
                llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::IRBuilder((uint64_t)&Name, (llvm::Value *)v50, 0, 0, 0);
                v51 = *(llvm::Type ***)(v50 - 32 * (*(_DWORD *)(v50 + 20) & 0x7FFFFFF) + 160);
                v119 = 257;
                v52 = llvm::IRBuilderBase::CreatePointerBitCastOrAddrSpaceCast((llvm::IRBuilderBase *)&Name, v51, v113, (const llvm::Twine *)&v117);
                v114 = 0;
                v115 = 0;
                v116 = 0;
                MemoryIndirectionPass::unpackAccelerationStructureValue(this, v52, (llvm::IRBuilderBase *)&Name, (uint64_t *)&v114);
                v54 = v114;
                v53 = v115;
                v55 = this[9];
                v117 = **(_QWORD **)(v50 - 32 * (*(_DWORD *)(v50 + 20) & 0x7FFFFFF));
                v118 = v55;
                v56 = (llvm::Type *)llvm::StructType::get();
                v57 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x48);
                v119 = 257;
                llvm::BasicBlock::getFirstNonPHI(*(llvm::BasicBlock **)(v50 + 40));
                llvm::AllocaInst::AllocaInst();
                v119 = 257;
                ConstInBoundsGEP2_32 = llvm::IRBuilderBase::CreateConstInBoundsGEP2_32((llvm::Type **)&Name, v56, v57, 0, 0, (const llvm::Twine *)&v117);
                v119 = 257;
                v59 = llvm::IRBuilderBase::CreateConstInBoundsGEP2_32((llvm::Type **)&Name, v56, v57, 0, 1u, (const llvm::Twine *)&v117);
                llvm::IRBuilderBase::CreateAlignedStore((uint64_t)&Name, v54, v59, 0);
                this = (llvm::Type ****)v112;
                AlignedStore = llvm::IRBuilderBase::CreateAlignedStore((uint64_t)&Name, *(llvm::Type ***)(v50 - 32 * (*(_DWORD *)(v50 + 20) & 0x7FFFFFF)), ConstInBoundsGEP2_32, 0);
                v61 = **(_QWORD **)(v50 - 32 * (*(_DWORD *)(v50 + 20) & 0x7FFFFFF) + 160);
                v119 = 257;
                v62 = llvm::IRBuilderBase::CreateCast((uint64_t)&Name, 48, v53, v61, (uint64_t)&v117);
                llvm::CallBase::setArgOperand(v50, 5u, v62);
                v63 = *(uint64_t **)(v50 - 32 * (*(_DWORD *)(v50 + 20) & 0x7FFFFFF));
                v64 = *v63;
                v119 = 257;
                llvm::IRBuilderBase::CreateCast((uint64_t)&Name, 49, (uint64_t)v57, v64, (uint64_t)&v117);
                llvm::Value::replaceAllUsesWith();
                if (*(_QWORD *)(AlignedStore - 64))
                {
                  **(_QWORD **)(AlignedStore - 48) = *(_QWORD *)(AlignedStore - 56);
                  v65 = *(_QWORD *)(AlignedStore - 56);
                  if (v65)
                    *(_QWORD *)(v65 + 16) = *(_QWORD *)(AlignedStore - 48);
                }
                *(_QWORD *)(AlignedStore - 64) = v63;
                v68 = v63[1];
                v67 = v63 + 1;
                v66 = v68;
                *(_QWORD *)(AlignedStore - 56) = v68;
                if (v68)
                  *(_QWORD *)(v66 + 16) = AlignedStore - 56;
                *(_QWORD *)(AlignedStore - 48) = v67;
                *v67 = AlignedStore - 64;
                llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)&v124);
                llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v123);
                if (Name != v122)
                  free(Name);
              }
              ++v39;
              v49 -= 8;
            }
            while (v49);
            v39 = v125;
            v25 = v110;
          }
          goto LABEL_152;
        case 2:
          llvm::SmallVector<llvm::User *,4u>::SmallVector<llvm::Value::user_iterator_impl<llvm::User>,void>(&v125, v26[1], 0);
          v39 = v125;
          if (!v126)
            goto LABEL_152;
          v40 = v25;
          v69 = 8 * v126;
          do
          {
            v70 = *v39;
            if (*v39
              && *(_BYTE *)(v70 + 16) == 84
              && (!*(_QWORD *)(v70 + 48) && (*(_BYTE *)(v70 + 23) & 0x20) == 0 || !llvm::Instruction::getMetadataImpl()))
            {
              llvm::MDTuple::getImpl();
              llvm::Instruction::setMetadata();
              v71 = *(_QWORD *)(v70 + 32);
              v72 = !v71 || v71 == *(_QWORD *)(v70 + 40) + 40;
              v73 = v72 ? 0 : (llvm::Value *)(v71 - 24);
              llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::IRBuilder((uint64_t)&Name, v73, 0, 0, 0);
              v74 = this[9];
              v117 = **(_QWORD **)(v70 - 32 * (*(_DWORD *)(v70 + 20) & 0x7FFFFFF));
              v118 = v74;
              v75 = (llvm::Type *)llvm::StructType::get();
              v76 = *(_QWORD *)(v70 - 32 * (*(_DWORD *)(v70 + 20) & 0x7FFFFFF));
              v77 = llvm::PointerType::get();
              v119 = 257;
              v78 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)&Name, 49, v76, v77, (uint64_t)&v117);
              v119 = 257;
              v79 = (llvm::Type **)llvm::IRBuilderBase::CreateConstInBoundsGEP2_32((llvm::Type **)&Name, v75, v78, 0, 1u, (const llvm::Twine *)&v117);
              v114 = 0;
              v115 = 0;
              v116 = 0;
              this = (llvm::Type ****)v112;
              MemoryIndirectionPass::unpackAccelerationStructureValue(v112, v79, (llvm::IRBuilderBase *)&Name, (uint64_t *)&v114);
              v80 = (llvm::Value *)v114;
              v119 = 257;
              v81 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)&Name, 48, (uint64_t)v114, (uint64_t)v113, (uint64_t)&v117);
              IndirectPtrToBase = MemoryIndirectionPass::createIndirectPtrToBase(v112, v81);
              v119 = 257;
              llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)&Name, IndirectPtrToBase, (uint64_t)&v117);
              v83 = *(_QWORD *)(IndirectPtrToBase + 32);
              v84 = !v83 || v83 == *(_QWORD *)(IndirectPtrToBase + 40) + 40;
              v85 = v84 ? 0 : (llvm::Instruction *)(v83 - 24);
              llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)&Name, v85);
              MemoryIndirectionPass::synthesizeAndInsertPrimitiveDataHandle((uint64_t)v112, (llvm::IRBuilderBase *)&Name, (llvm::Type **)v70, v80, (llvm::Type **)IndirectPtrToBase);
              llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)&v124);
              llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v123);
              if (Name != v122)
                free(Name);
            }
            ++v39;
            v69 -= 8;
          }
          while (v69);
          break;
        case 3:
          v86 = v25;
          llvm::SmallVector<llvm::User *,4u>::SmallVector<llvm::Value::user_iterator_impl<llvm::User>,void>(&v125, v26[1], 0);
          v87 = v125;
          v88 = &v125[v126];
          if (v126)
          {
            do
            {
              v89 = (llvm::Value *)*v87;
              if (*(_BYTE *)(*v87 + 16) == 84 && v89 != 0)
              {
                v91 = 0;
                v92 = (llvm::Value *)*v87;
                while (v91 < llvm::compat::getNumArgOperands(v89))
                {
                  v93 = (void **)*((_QWORD *)v92 - 4 * (*((_DWORD *)v89 + 5) & 0x7FFFFFF));
                  if (*((_BYTE *)*v93 + 8) == 15)
                  {
                    v94 = (llvm::StructType *)**((_QWORD **)*v93 + 2);
                    if (*((_BYTE *)v94 + 8) == 16)
                    {
                      Name = (void *)llvm::StructType::getName(v94);
                      v121 = v95;
                      if (llvm::StringRef::find() != -1)
                      {
                        v96 = this[9];
                        Name = *v93;
                        v121 = (unint64_t)v96;
                        v97 = (llvm::Type *)llvm::StructType::get();
                        llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::IRBuilder((uint64_t)&Name, v89, 0, 0, 0);
                        v98 = llvm::PointerType::get();
                        v119 = 257;
                        v99 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)&Name, 49, (uint64_t)v93, v98, (uint64_t)&v117);
                        v119 = 257;
                        v100 = llvm::IRBuilderBase::CreateConstInBoundsGEP2_32((llvm::Type **)&Name, v97, v99, 0, 0, (const llvm::Twine *)&v117);
                        v101 = *(llvm::Type **)(v100 + 72);
                        v119 = 257;
                        AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)&Name, v101, v100, 0, 0, (uint64_t)&v117);
                        v103 = (char *)v92 - 32 * (*((_DWORD *)v89 + 5) & 0x7FFFFFF);
                        if (*(_QWORD *)v103)
                        {
                          **((_QWORD **)v103 + 2) = *((_QWORD *)v103 + 1);
                          v104 = *((_QWORD *)v103 + 1);
                          if (v104)
                            *(_QWORD *)(v104 + 16) = *((_QWORD *)v103 + 2);
                        }
                        *(_QWORD *)v103 = AlignedLoad;
                        if (AlignedLoad)
                        {
                          v107 = *(_QWORD *)(AlignedLoad + 8);
                          v105 = (_QWORD *)(AlignedLoad + 8);
                          v106 = v107;
                          *((_QWORD *)v103 + 1) = v107;
                          if (v107)
                            *(_QWORD *)(v106 + 16) = v103 + 8;
                          *((_QWORD *)v103 + 2) = v105;
                          *v105 = v103;
                        }
                        llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)&v124);
                        llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v123);
                        if (Name != v122)
                          free(Name);
                      }
                    }
                  }
                  ++v91;
                  v92 = (llvm::Value *)((char *)v92 + 32);
                }
              }
              ++v87;
            }
            while (v87 != v88);
            v87 = v125;
          }
          if (v87 != (uint64_t *)v127)
            free(v87);
          v25 = v86;
          goto LABEL_179;
        default:
          llvm::SmallVector<llvm::User *,4u>::SmallVector<llvm::Value::user_iterator_impl<llvm::User>,void>(&v125, v26[1], 0);
          v39 = v125;
          if (!v126)
            goto LABEL_152;
          v40 = v25;
          v41 = 8 * v126;
          do
          {
            v42 = *v39;
            if (*v39
              && *(_BYTE *)(v42 + 16) == 84
              && (!*(_QWORD *)(v42 + 48) && (*(_BYTE *)(v42 + 23) & 0x20) == 0 || !llvm::Instruction::getMetadataImpl()))
            {
              llvm::MDTuple::getImpl();
              llvm::Instruction::setMetadata();
              llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::IRBuilder((uint64_t)&Name, (llvm::Value *)v42, 0, 0, 0);
              v43 = *(llvm::Type ***)(v42 - 32 * (*(_DWORD *)(v42 + 20) & 0x7FFFFFF));
              v119 = 257;
              v44 = llvm::IRBuilderBase::CreatePointerBitCastOrAddrSpaceCast((llvm::IRBuilderBase *)&Name, v43, v113, (const llvm::Twine *)&v117);
              v114 = 0;
              v115 = 0;
              v116 = 0;
              MemoryIndirectionPass::unpackAccelerationStructureValue(this, v44, (llvm::IRBuilderBase *)&Name, (uint64_t *)&v114);
              v45 = v115;
              v46 = MTLBoundsCheck::SharedPassData::getOrInsertAccelerationStructurePtrGV(this[8]);
              llvm::IRBuilderBase::CreateAlignedStore((uint64_t)&Name, v44, v46, 0);
              v47 = **(_QWORD **)(v42 - 32 * (*(_DWORD *)(v42 + 20) & 0x7FFFFFF));
              v119 = 257;
              v48 = llvm::IRBuilderBase::CreateCast((uint64_t)&Name, 48, v45, v47, (uint64_t)&v117);
              llvm::CallBase::setArgOperand(v42, 0, v48);
              llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)&v124);
              llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v123);
              if (Name != v122)
                free(Name);
            }
            ++v39;
            v41 -= 8;
          }
          while (v41);
          break;
      }
      v39 = v125;
      v25 = v40;
LABEL_152:
      if (v39 != (uint64_t *)v127)
        free(v39);
LABEL_179:
      v25 += 4;
    }
    while (v25 != (_DWORD *)v111);
    v25 = v128;
  }
  if (v25 != (_DWORD *)v130)
    free(v25);
}

void sub_240FCEC3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;
  void *v30;

  v30 = *(void **)(v28 - 192);
  if (v30 != a10)
    free(v30);
  _Unwind_Resume(exception_object);
}

uint64_t MemoryIndirectionPass::getPrimitiveDataArgIndex(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t String;
  uint64_t v8;
  BOOL v9;
  uint64_t v11;
  unsigned int *v12;

  v2 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
  v3 = *(unsigned int *)(v2 + 8);
  if (!(_DWORD)v3)
    return 0xFFFFFFFFLL;
  v4 = 0;
  v5 = 0xFFFFFFFFLL;
  do
  {
    v6 = *(_QWORD *)(v2 - 8 * v3 + 8 * v4);
    String = llvm::MDString::getString(*(llvm::MDString **)(v6 - 8 * *(unsigned int *)(v6 + 8) + 8));
    if (v8 == 18)
    {
      v9 = *(_QWORD *)String == 0x6D6972702E726961 && *(_QWORD *)(String + 8) == 0x61645F6576697469;
      if (v9 && *(_WORD *)(String + 16) == 24948)
      {
        v11 = *(_QWORD *)(*(_QWORD *)(v6 - 8 * *(unsigned int *)(v6 + 8)) + 128);
        v12 = (unsigned int *)(v11 + 24);
        if (*(_DWORD *)(v11 + 32) >= 0x41u)
          v12 = *(unsigned int **)v12;
        v5 = *v12;
      }
    }
    ++v4;
    v3 = *(unsigned int *)(v2 + 8);
  }
  while (v4 < v3);
  return v5;
}

uint64_t MemoryIndirectionPass::unpackAccelerationStructureValue@<X0>(_QWORD *a1@<X0>, llvm::Type **a2@<X1>, llvm::IRBuilderBase *a3@<X2>, uint64_t *a4@<X8>)
{
  llvm::Type *v8;
  llvm::Value *BitOrPointerCast;
  llvm::Type *v10;
  llvm::Type **ConstInBoundsGEP1_32;
  llvm::Type *v12;
  llvm::Type *v13;
  llvm::Value *v14;
  uint64_t AlignedLoad;
  llvm::Type *v16;
  llvm::Type **v17;
  llvm::Type *v18;
  llvm::Value *v19;
  uint64_t v20;
  uint64_t v21;
  llvm::Type *v22;
  llvm::Type **v23;
  llvm::Type *v24;
  llvm::Value *v25;
  uint64_t result;
  _BYTE v27[32];
  __int16 v28;

  v8 = (llvm::Type *)llvm::PointerType::get();
  v28 = 257;
  BitOrPointerCast = llvm::IRBuilderBase::CreateBitOrPointerCast(a3, a2, v8, (const llvm::Twine *)v27);
  v10 = (llvm::Type *)a1[12];
  v28 = 257;
  ConstInBoundsGEP1_32 = (llvm::Type **)llvm::IRBuilderBase::CreateConstInBoundsGEP1_32((llvm::Type **)a3, v10, BitOrPointerCast, 0, (const llvm::Twine *)v27);
  v12 = (llvm::Type *)a1[9];
  v13 = (llvm::Type *)llvm::PointerType::get();
  v28 = 257;
  v14 = llvm::IRBuilderBase::CreateBitOrPointerCast(a3, ConstInBoundsGEP1_32, v13, (const llvm::Twine *)v27);
  v28 = 257;
  AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)a3, v12, (uint64_t)v14, 0, 0, (uint64_t)v27);
  v16 = (llvm::Type *)a1[12];
  v28 = 257;
  v17 = (llvm::Type **)llvm::IRBuilderBase::CreateConstInBoundsGEP1_32((llvm::Type **)a3, v16, BitOrPointerCast, 8u, (const llvm::Twine *)v27);
  v18 = (llvm::Type *)llvm::PointerType::get();
  v28 = 257;
  v19 = llvm::IRBuilderBase::CreateBitOrPointerCast(a3, v17, v18, (const llvm::Twine *)v27);
  v28 = 257;
  v20 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)a3, v12, (uint64_t)v19, 0, 0, (uint64_t)v27);
  v21 = 0;
  if ((*(_BYTE *)(*(_QWORD *)(a1[8] + 72) + 24) & 0x10) != 0)
  {
    v22 = (llvm::Type *)a1[12];
    v28 = 257;
    v23 = (llvm::Type **)llvm::IRBuilderBase::CreateConstInBoundsGEP1_32((llvm::Type **)a3, v22, BitOrPointerCast, 0x10u, (const llvm::Twine *)v27);
    v24 = (llvm::Type *)llvm::PointerType::get();
    v28 = 257;
    v25 = llvm::IRBuilderBase::CreateBitOrPointerCast(a3, v23, v24, (const llvm::Twine *)v27);
    v28 = 257;
    v21 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)a3, v12, (uint64_t)v25, 0, 0, (uint64_t)v27);
    llvm::MDTuple::getImpl();
    llvm::Instruction::setMetadata();
    llvm::MDTuple::getImpl();
    llvm::Instruction::setMetadata();
  }
  llvm::MDTuple::getImpl();
  llvm::Instruction::setMetadata();
  llvm::MDTuple::getImpl();
  llvm::Instruction::setMetadata();
  llvm::MDTuple::getImpl();
  llvm::Instruction::setMetadata();
  llvm::MDTuple::getImpl();
  result = llvm::Instruction::setMetadata();
  *a4 = AlignedLoad;
  a4[1] = v20;
  if ((*(_BYTE *)(*(_QWORD *)(a1[8] + 72) + 24) & 0x10) != 0)
    a4[2] = v21;
  return result;
}

uint64_t MemoryIndirectionPass::generateGetBVHDataPointerIntrinsic(uint64_t a1, uint64_t a2, llvm::Value *this, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[32];
  __int16 v19;
  uint64_t v20[4];
  __int16 v21;
  uint64_t v22[2];
  uint64_t v23;
  _QWORD v24[2];

  v24[1] = *MEMORY[0x24BDAC8D0];
  v23 = a5;
  v20[0] = llvm::Value::getName(this);
  v20[1] = v8;
  v9 = llvm::StringRef::find();
  v10 = "air.get_data_pointer_instance_acceleration_structure";
  if (v9 == -1)
    v10 = "air.get_data_pointer_primitive_acceleration_structure";
  v11 = 52;
  if (v9 == -1)
    v11 = 53;
  v22[0] = (uint64_t)v10;
  v22[1] = v11;
  v12 = *(_QWORD *)(a1 + 48);
  v20[0] = llvm::PointerType::get();
  v13 = getOrInsertFunction<llvm::StringRef &,llvm::PointerType *,llvm::Type *&>(v12, v22, v20, &v23);
  v14 = *(_QWORD *)(v13 + 24);
  v15 = *(_QWORD *)(*(_QWORD *)(v14 + 16) + 8);
  v21 = 257;
  v24[0] = llvm::IRBuilderBase::CreateCast(a2, 48, a4, v15, (uint64_t)v20);
  v19 = 257;
  v16 = llvm::IRBuilderBase::CreateCall(a2, v14, v13, (uint64_t)v24, 1, (uint64_t)v18, 0);
  llvm::MDTuple::getImpl();
  llvm::Instruction::setMetadata();
  return v16;
}

uint64_t MemoryIndirectionPass::synthesizeAndInsertPrimitiveDataHandle(uint64_t a1, llvm::IRBuilderBase *this, llvm::Type **a3, llvm::Value *a4, llvm::Type **a5)
{
  llvm::Type *v10;
  llvm::Value *BitOrPointerCast;
  llvm::Type *v12;
  llvm::Value *v13;
  llvm::Instruction *Sub;
  llvm::Type *v15;
  uint64_t NullValue;
  llvm::Type *v17;
  llvm::Type **Select;
  llvm::Type *v19;
  _BYTE v21[32];
  __int16 v22;
  _BYTE v23[32];
  __int16 v24;
  _BYTE v25[32];
  __int16 v26;

  v10 = *(llvm::Type **)(a1 + 72);
  v26 = 257;
  BitOrPointerCast = llvm::IRBuilderBase::CreateBitOrPointerCast(this, a3, v10, (const llvm::Twine *)v25);
  v12 = *(llvm::Type **)(a1 + 72);
  v26 = 257;
  v13 = llvm::IRBuilderBase::CreateBitOrPointerCast(this, a5, v12, (const llvm::Twine *)v25);
  v24 = 257;
  Sub = llvm::IRBuilderBase::CreateSub(this, BitOrPointerCast, v13, (const llvm::Twine *)v23, 0, 0);
  v22 = 257;
  llvm::IRBuilderBase::CreateAdd(this, a4, Sub, (const llvm::Twine *)v21, 0, 0);
  NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 72), v15);
  v26 = 257;
  llvm::IRBuilderBase::CreateICmp((uint64_t)this, 32, (llvm::CmpInst **)BitOrPointerCast, NullValue, (uint64_t)v25);
  llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 72), v17);
  v26 = 257;
  Select = (llvm::Type **)llvm::IRBuilderBase::CreateSelect();
  v19 = *a3;
  v26 = 257;
  llvm::IRBuilderBase::CreateBitOrPointerCast(this, Select, v19, (const llvm::Twine *)v25);
  llvm::Value::replaceAllUsesWith();
  return llvm::PHINode::setIncomingValue((uint64_t)BitOrPointerCast, 0, (uint64_t)a3);
}

uint64_t llvm::SmallVectorImpl<std::pair<llvm::Function *,MemoryIndirectionPass::fixIntersectCalls(llvm::Module *)::Handling>>::emplace_back<llvm::Function *,MemoryIndirectionPass::fixIntersectCalls(llvm::Module *)::Handling>(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;

  v4 = *(unsigned int *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorTemplateBase<std::pair<unsigned int,llvm::MDNode *>,true>::push_back(a1, *a2, *a3);
    v5 = *(_QWORD *)a1;
    v7 = *(_DWORD *)(a1 + 8);
  }
  else
  {
    v5 = *(_QWORD *)a1;
    v6 = *(_QWORD *)a1 + 16 * v4;
    *(_QWORD *)v6 = *a2;
    *(_DWORD *)(v6 + 8) = *a3;
    v7 = v4 + 1;
    *(_DWORD *)(a1 + 8) = v7;
  }
  return v5 + 16 * v7 - 16;
}

void MemoryIndirectionPass::generatePrimitiveDataHandle(uint64_t a1, llvm::Value *a2, llvm::Value *this, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  BOOL v12;
  llvm::Instruction *v13;
  llvm::Type **Value;
  uint64_t v15;
  llvm::Type *v16;
  uint64_t *AlignedLoad;
  uint64_t v18;
  char *Name;
  size_t v20;
  uint64_t GVBaseType;
  uint64_t GEP;
  llvm::Type *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  llvm::Value *Cast;
  llvm::Type *v28;
  llvm::Value *BitOrPointerCast;
  llvm::Instruction *Sub;
  llvm::Value *v31;
  llvm::Value *v32;
  llvm::Value *v33;
  llvm::Type *v34;
  uint64_t NullValue;
  llvm::Type *v36;
  llvm::Type **Select;
  llvm::Type *v38;
  llvm::Value *v39;
  uint64_t InsertValue;
  _BYTE v41[32];
  __int16 v42;
  uint64_t *v43[2];
  void *v44[2];
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[2];

  v47[1] = *MEMORY[0x24BDAC8D0];
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::IRBuilder((uint64_t)v44, this, 0, 0, 0);
  MemoryIndirectionPass::generateGetBVHDataPointerIntrinsic(a1, (uint64_t)v44, a2, a5, a6);
  v11 = *((_QWORD *)this + 4);
  if (v11)
    v12 = v11 == *((_QWORD *)this + 5) + 40;
  else
    v12 = 1;
  if (v12)
    v13 = 0;
  else
    v13 = (llvm::Instruction *)(v11 - 24);
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)v44, v13);
  LODWORD(v43[0]) = 4;
  v42 = 257;
  Value = (llvm::Type **)llvm::IRBuilderBase::CreateExtractValue((uint64_t)v44, (unsigned __int8 *)this, (uint64_t)v43, 1, (uint64_t)v41);
  v15 = *(_QWORD *)(a1 + 184);
  v16 = *(llvm::Type **)(v15 + 24);
  v42 = 257;
  AlignedLoad = (uint64_t *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v44, v16, v15, 0, 0, (uint64_t)v41);
  v18 = *(_QWORD *)(a1 + 64);
  Name = (char *)llvm::Value::getName(*(llvm::Value **)(a1 + 184));
  GVBaseType = MTLBoundsCheck::SharedPassData::getGVBaseType(v18, Name, v20);
  v43[0] = (uint64_t *)llvm::ConstantInt::get();
  v43[1] = (uint64_t *)llvm::ConstantInt::get();
  v42 = 257;
  GEP = llvm::IRBuilderBase::CreateGEP((uint64_t)v44, GVBaseType, AlignedLoad, v43, 2, (uint64_t)v41);
  v23 = *(llvm::Type **)(GEP + 72);
  v42 = 257;
  v24 = (uint64_t *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v44, v23, GEP, 259, 0, (uint64_t)v41);
  v25 = *(_QWORD *)(a1 + 64) + 208;
  v43[0] = v24;
  llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>,llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v25, v43, (uint64_t)v41);
  llvm::MDTuple::getImpl();
  llvm::Instruction::setMetadata();
  v26 = *(_QWORD *)(a1 + 72);
  v42 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v44, 47, (uint64_t)v24, v26, (uint64_t)v41);
  v28 = *(llvm::Type **)(a1 + 72);
  v42 = 257;
  BitOrPointerCast = llvm::IRBuilderBase::CreateBitOrPointerCast((llvm::IRBuilderBase *)v44, Value, v28, (const llvm::Twine *)v41);
  v42 = 257;
  Sub = llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)v44, BitOrPointerCast, Cast, (const llvm::Twine *)v41, 0, 0);
  v31 = (llvm::Value *)llvm::ConstantInt::get();
  v42 = 257;
  v32 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)v44, Sub, v31, (const llvm::Twine *)v41);
  v33 = (llvm::Value *)llvm::ConstantInt::get();
  v42 = 257;
  llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)v44, v33, v32, (const llvm::Twine *)v41, 0, 0);
  NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 72), v34);
  v42 = 257;
  llvm::IRBuilderBase::CreateICmp((uint64_t)v44, 32, (llvm::CmpInst **)BitOrPointerCast, NullValue, (uint64_t)v41);
  llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 72), v36);
  v42 = 257;
  Select = (llvm::Type **)llvm::IRBuilderBase::CreateSelect();
  v38 = *Value;
  v42 = 257;
  v39 = llvm::IRBuilderBase::CreateBitOrPointerCast((llvm::IRBuilderBase *)v44, Select, v38, (const llvm::Twine *)v41);
  LODWORD(v43[0]) = 4;
  v42 = 257;
  InsertValue = llvm::IRBuilderBase::CreateInsertValue((uint64_t)v44, (uint64_t)this, (uint64_t)v39, (uint64_t)v43, 1, (uint64_t)v41);
  llvm::Value::replaceAllUsesWith();
  llvm::PHINode::setIncomingValue((uint64_t)Value, 0, (uint64_t)this);
  llvm::PHINode::setIncomingValue(InsertValue, 0, (uint64_t)this);
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v47);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v46);
  if (v44[0] != &v45)
    free(v44[0]);
}

void sub_240FCF864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder((void **)va);
  _Unwind_Resume(a1);
}

uint64_t MemoryIndirectionPass::createValidateAccelerationStructureTypeCall(uint64_t a1, llvm::Instruction *a2)
{
  llvm::Type *v4;
  _QWORD *v5;
  uint64_t Module;
  llvm::Type *Context;
  llvm::LLVMContext *v8;
  MTLBoundsCheck *VoidTy;
  uint64_t v10;
  llvm::BasicBlock *v11;
  llvm::BasicBlock *v12;
  llvm::BranchInst *v13;
  llvm::BasicBlock *v14;
  llvm::BasicBlock *v15;
  llvm::BasicBlock *v16;
  llvm::BranchInst *v17;
  llvm::Type **v18;
  llvm::Type **PointerBitCastOrAddrSpaceCast;
  const void *Name;
  llvm::LLVMContext *v21;
  const void *v22;
  uint64_t v23;
  llvm::Value *v24;
  llvm::BasicBlock *ICmp;
  llvm::Instruction *v26;
  uint64_t v27;
  llvm::Instruction *v28;
  uint64_t v29;
  uint64_t inserted;
  llvm::Type *v31;
  llvm::Value *AlignedLoad;
  uint64_t v33;
  llvm::Type *v34;
  llvm::Value *v35;
  const llvm::Twine *ImageIDFunction;
  uint64_t v37;
  llvm::Value *v38;
  MTLBoundsCheck::SharedPassData *v39;
  llvm::MDString *NameOfParentFunction;
  const void *v41;
  unsigned int v42;
  uint64_t v43;
  llvm::ConstantPointerNull *Int8PtrTy;
  llvm::PointerType *v45;
  llvm::Value *v46;
  uint64_t v47;
  llvm::Type *v48;
  uint64_t v49;
  llvm::Instruction *v50;
  uint64_t v51;
  llvm::Type **v53;
  llvm::CmpInst **v54;
  llvm::Value *v55;
  uint64_t v56[2];
  llvm::CmpInst **v57;
  llvm::BasicBlock *v58;
  void *v59[2];
  uint64_t v60;
  __int16 v61;
  llvm::BranchInst *v62;
  char *v63;
  llvm::Type *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[4];
  __int16 v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  v4 = (llvm::Type *)llvm::PointerType::get();
  v5 = (_QWORD *)((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[16];
  Module = llvm::Instruction::getModule(a2);
  Context = (llvm::Type *)llvm::Value::getContext(a2);
  v59[0] = "mtl.validate_acceleration_structure_type";
  v61 = 259;
  VoidTy = (MTLBoundsCheck *)llvm::Type::getVoidTy(Context, v8);
  v67[0] = *v5;
  v53 = (llvm::Type **)Module;
  v10 = getMangledFunction<llvm::Type *,llvm::Type *&>(Module, (llvm::Twine *)v59, VoidTy, v67, (uint64_t *)(a1 + 80));
  MTLBoundsCheck::SharedPassData::indexForInstruction(*(MTLBoundsCheck::SharedPassData **)(a1 + 64), a2);
  v55 = (llvm::Value *)llvm::ConstantInt::get();
  if (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v10))
  {
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
    *(_DWORD *)(v10 + 32) = *(_DWORD *)(v10 + 32) & 0xFFFFBFC0 | 0x4007;
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    v59[0] = "entryBlock";
    v61 = 259;
    v58 = (llvm::BasicBlock *)llvm::BasicBlock::Create(Context, (llvm::LLVMContext *)v59, (const llvm::Twine *)v10, 0, v11);
    v59[0] = "passBlock";
    v61 = 259;
    v13 = (llvm::BranchInst *)llvm::BasicBlock::Create(Context, (llvm::LLVMContext *)v59, (const llvm::Twine *)v10, 0, v12);
    v59[0] = "failBlock";
    v61 = 259;
    v15 = (llvm::BasicBlock *)llvm::BasicBlock::Create(Context, (llvm::LLVMContext *)v59, (const llvm::Twine *)v10, 0, v14);
    v59[0] = "retBlock";
    v61 = 259;
    v17 = (llvm::BranchInst *)llvm::BasicBlock::Create(Context, (llvm::LLVMContext *)v59, (const llvm::Twine *)v10, 0, v16);
    MTLIRBuilder::MTLIRBuilder<llvm::BasicBlock * const&>((uint64_t)v59, &v58);
    if ((*(_WORD *)(v10 + 18) & 1) != 0)
      llvm::Function::BuildLazyArguments((llvm::Function *)v10);
    v18 = *(llvm::Type ***)(v10 + 88);
    v68 = 257;
    PointerBitCastOrAddrSpaceCast = llvm::IRBuilderBase::CreatePointerBitCastOrAddrSpaceCast((llvm::IRBuilderBase *)v59, v18, v4, (const llvm::Twine *)v67);
    v56[0] = 0;
    v56[1] = 0;
    v57 = 0;
    MemoryIndirectionPass::unpackAccelerationStructureValue((_QWORD *)a1, PointerBitCastOrAddrSpaceCast, (llvm::IRBuilderBase *)v59, v56);
    v54 = v57;
    if ((*(_WORD *)(v10 + 18) & 1) != 0)
      llvm::Function::BuildLazyArguments((llvm::Function *)v10);
    Name = (const void *)llvm::StructType::getName(**(llvm::StructType ***)(**(_QWORD **)(v10 + 88) + 16));
    v22 = Name;
    if ((unint64_t)v21 >= 0x2A)
    {
      if (!memcmp(Name, "struct._primitive_acceleration_structure_t", 0x2AuLL))
      {
LABEL_13:
        llvm::Type::getInt64Ty(v64, v21);
        v24 = (llvm::Value *)llvm::ConstantInt::get();
        v68 = 257;
        ICmp = (llvm::BasicBlock *)llvm::IRBuilderBase::CreateICmp((uint64_t)v59, 32, v54, (uint64_t)v24, (uint64_t)v67);
        llvm::IRBuilderBase::CreateCondBr((uint64_t *)v59, ICmp, v13, v15, 0, 0);
        v62 = v13;
        v63 = (char *)v13 + 40;
        v27 = llvm::BranchInst::Create(v17, 0, v26);
        v68 = 257;
        llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)v59, v27, (uint64_t)v67);
        v62 = v15;
        v63 = (char *)v15 + 40;
        v29 = *(_QWORD *)(a1 + 64);
        if ((*(_BYTE *)(*(_QWORD *)(v29 + 72) + 20) & 2) != 0)
        {
          inserted = MTLBoundsCheck::SharedPassData::getOrInsertReportBufferGV((llvm::Type ***)v29);
          v31 = *(llvm::Type **)(inserted + 24);
          v68 = 257;
          AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v59, v31, inserted, 0, 0, (uint64_t)v67);
          v33 = MTLBoundsCheck::SharedPassData::getOrInsertDrawIDBufferGV(*(MTLBoundsCheck::SharedPassData **)(a1 + 64));
          v34 = *(llvm::Type **)(v33 + 24);
          v68 = 257;
          v35 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v59, v34, v33, 0, 0, (uint64_t)v67);
          ImageIDFunction = MTLBoundsCheck::SharedPassData::getOrInsertGetImageIDFunction(*(MTLBoundsCheck::SharedPassData **)(a1 + 64));
          if (ImageIDFunction)
            v37 = *((_QWORD *)ImageIDFunction + 3);
          else
            v37 = 0;
          v68 = 257;
          v38 = (llvm::Value *)llvm::IRBuilderBase::CreateCall((uint64_t)v59, v37, (uint64_t)ImageIDFunction, 0, 0, (uint64_t)v67, 0);
          v39 = *(MTLBoundsCheck::SharedPassData **)(a1 + 64);
          NameOfParentFunction = MTLBoundsCheck::SharedPassData::getNameOfParentFunction(v39, a2);
          v42 = MTLBoundsCheck::SharedPassData::indexForString((uint64_t)v39, NameOfParentFunction, v41);
          v43 = *(_QWORD *)(a1 + 64);
          if ((*(_BYTE *)(*(_QWORD *)(v43 + 72) + 21) & 2) != 0)
          {
            v47 = MTLBoundsCheck::SharedPassData::getOrInsertStackTraceGV((llvm::Type ***)v43);
            v48 = *(llvm::Type **)(v47 + 24);
            v68 = 257;
            v46 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v59, v48, v47, 0, 0, (uint64_t)v67);
          }
          else
          {
            Int8PtrTy = (llvm::ConstantPointerNull *)llvm::Type::getInt8PtrTy(*v53, 0);
            v46 = (llvm::Value *)llvm::ConstantPointerNull::get(Int8PtrTy, v45);
          }
          MTLIRBuilder::CreateBadAccelerationStructureCall((MTLIRBuilder *)v59, AlignedLoad, v35, v46, v38, v42, v55, v24, (llvm::Value *)v54);
        }
        v49 = llvm::BranchInst::Create(v17, 0, v28);
        v68 = 257;
        llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)v59, v49, (uint64_t)v67);
        v62 = v17;
        v63 = (char *)v17 + 40;
        v51 = llvm::ReturnInst::Create(v64, 0, 0, v50);
        v68 = 257;
        llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)v59, v51, (uint64_t)v67);
        llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)&v66);
        llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v65);
        if (v59[0] != &v60)
          free(v59[0]);
        goto LABEL_23;
      }
    }
    else if (v21 != (llvm::LLVMContext *)41)
    {
      goto LABEL_13;
    }
    memcmp(v22, "struct._instance_acceleration_structure_t", 0x29uLL);
    goto LABEL_13;
  }
  if (v10)
  {
LABEL_23:
    v23 = *(_QWORD *)(v10 + 24);
    goto LABEL_24;
  }
  v23 = 0;
LABEL_24:
  v67[0] = v5;
  v67[1] = v55;
  v61 = 257;
  return llvm::CallInst::Create(v23, v10, (uint64_t)v67, 2, 0, 0);
}

void sub_240FCFEA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder((void **)va);
  _Unwind_Resume(a1);
}

uint64_t MemoryIndirectionPass::createIndirectPtrToBase(MemoryIndirectionPass *this, llvm::Value *a2)
{
  uint64_t v4;
  MTLBoundsCheck *v5;
  uint64_t v6;
  llvm::BasicBlock *v7;
  llvm::BasicBlock *v8;
  llvm::BasicBlock *v9;
  llvm::ReturnInst *Context;
  uint64_t v11;
  uint64_t v12;
  llvm::Value *Cast;
  llvm::Value *v14;
  uint64_t *LShr;
  uint64_t v16;
  llvm::Type *v17;
  uint64_t *AlignedLoad;
  uint64_t v19;
  char *Name;
  size_t v21;
  uint64_t GVBaseType;
  uint64_t GEP;
  llvm::Type *v24;
  uint64_t v25;
  uint64_t v26;
  llvm::LLVMContext *v27;
  llvm::Instruction *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v32[4];
  __int16 v33;
  void *v34[2];
  _BYTE v35[16];
  __int16 v36;
  llvm::BasicBlock *v37;
  char *v38;
  llvm::ReturnInst *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  int v43;
  __int16 v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  MTLBoundsCheck *v50[4];
  __int16 v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 6);
  v34[0] = "mtl.ind_ptr_to_base";
  v36 = 259;
  v5 = (MTLBoundsCheck *)llvm::PointerType::get();
  v50[0] = *(MTLBoundsCheck **)a2;
  v6 = getMangledFunction<llvm::Type *>(v4, (llvm::Twine *)v34, v5, v50);
  if (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v6))
  {
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
    *(_DWORD *)(v6 + 32) = *(_DWORD *)(v6 + 32) & 0xFFFFBFC0 | 0x4007;
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    v7 = (llvm::BasicBlock *)*((_QWORD *)this + 5);
    v36 = 257;
    v9 = (llvm::BasicBlock *)llvm::BasicBlock::Create(v7, (llvm::LLVMContext *)v34, (const llvm::Twine *)v6, 0, v8);
    Context = (llvm::ReturnInst *)llvm::BasicBlock::getContext(v9);
    v34[0] = v35;
    v34[1] = (void *)0x200000000;
    v39 = Context;
    v40 = &v48;
    v41 = &v49;
    v42 = 0;
    v43 = 0;
    v44 = 512;
    v45 = 7;
    v46 = 0;
    v47 = 0;
    v48 = MEMORY[0x24BED83B8] + 16;
    v49 = MEMORY[0x24BED83F0] + 16;
    v37 = v9;
    v38 = (char *)v9 + 40;
    if ((*(_BYTE *)(v6 + 18) & 1) != 0)
      llvm::Function::BuildLazyArguments((llvm::Function *)v6);
    v11 = *(_QWORD *)(v6 + 88);
    v12 = *((_QWORD *)this + 9);
    v51 = 257;
    Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v34, 47, v11, v12, (uint64_t)v50);
    v14 = (llvm::Value *)llvm::ConstantInt::get();
    v51 = 257;
    LShr = (uint64_t *)llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)v34, Cast, v14, (const llvm::Twine *)v50, 0);
    v16 = *((_QWORD *)this + 23);
    v17 = *(llvm::Type **)(v16 + 24);
    v51 = 257;
    AlignedLoad = (uint64_t *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v34, v17, v16, 0, 0, (uint64_t)v50);
    v19 = *((_QWORD *)this + 8);
    Name = (char *)llvm::Value::getName(*((llvm::Value **)this + 23));
    GVBaseType = MTLBoundsCheck::SharedPassData::getGVBaseType(v19, Name, v21);
    v32[0] = LShr;
    v32[1] = (uint64_t *)llvm::ConstantInt::get();
    v51 = 257;
    GEP = llvm::IRBuilderBase::CreateGEP((uint64_t)v34, GVBaseType, AlignedLoad, v32, 2, (uint64_t)v50);
    v24 = *(llvm::Type **)(GEP + 72);
    v51 = 257;
    v25 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v34, v24, GEP, 259, 0, (uint64_t)v50);
    v26 = llvm::PointerType::get();
    v33 = 257;
    v27 = (llvm::LLVMContext *)llvm::IRBuilderBase::CreateCast((uint64_t)v34, 49, v25, v26, (uint64_t)v32);
    v29 = llvm::ReturnInst::Create(v39, v27, 0, v28);
    v51 = 257;
    llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)v34, v29, (uint64_t)v50);
    llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)&v49);
    llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v48);
    if (v34[0] != v35)
      free(v34[0]);
  }
  else if (!v6)
  {
    v30 = 0;
    goto LABEL_8;
  }
  v30 = *(_QWORD *)(v6 + 24);
LABEL_8:
  v50[0] = a2;
  v36 = 257;
  return llvm::CallInst::Create(v30, v6, (uint64_t)v50, 1, 0, 0);
}

void sub_240FD0288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder((void **)va);
  _Unwind_Resume(a1);
}

uint64_t getMangledFunction<llvm::Type *,llvm::Type *&>(uint64_t a1, llvm::Twine *this, MTLBoundsCheck *a3, _QWORD *a4, uint64_t *a5)
{
  llvm::Type *v9;
  std::string *v10;
  __int128 v11;
  void **v12;
  std::string::size_type v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  MTLBoundsCheck *v18;
  std::string *v19;
  __int128 v20;
  void **v21;
  std::string::size_type v22;
  std::string::size_type size;
  std::string::size_type v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  MTLBoundsCheck **v28;
  char *v29;
  std::string::size_type v30;
  MTLBoundsCheck *v31;
  uint64_t Function;
  uint64_t v33;
  void *__p[2];
  int64_t v36;
  __int16 v37;
  std::string v38;
  std::string v39;
  std::string v40;
  _QWORD v41[4];

  v41[2] = *MEMORY[0x24BDAC8D0];
  llvm::Twine::str(this);
  MTLBoundsCheck::getMangledTypeStr(a3, v9, &v39);
  v10 = std::string::insert(&v39, 0, ".");
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v36 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (v36 >= 0)
    v12 = __p;
  else
    v12 = (void **)__p[0];
  if (v36 >= 0)
    v13 = HIBYTE(v36);
  else
    v13 = (std::string::size_type)__p[1];
  std::string::append(&v40, (const std::string::value_type *)v12, v13);
  if (SHIBYTE(v36) < 0)
    operator delete(__p[0]);
  v15 = a1;
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  v16 = 0;
  memset(&v39, 0, sizeof(v39));
  v17 = *a5;
  v41[0] = *a4;
  v41[1] = v17;
  do
  {
    v18 = (MTLBoundsCheck *)v41[v16];
    MTLBoundsCheck::getMangledTypeStr(v18, (llvm::Type *)v14, &v38);
    v19 = std::string::insert(&v38, 0, ".");
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v36 = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    if (v36 >= 0)
      v21 = __p;
    else
      v21 = (void **)__p[0];
    if (v36 >= 0)
      v22 = HIBYTE(v36);
    else
      v22 = (std::string::size_type)__p[1];
    std::string::append(&v40, (const std::string::value_type *)v21, v22);
    if (SHIBYTE(v36) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    size = v39.__r_.__value_.__l.__size_;
    if (v39.__r_.__value_.__l.__size_ >= v39.__r_.__value_.__r.__words[2])
    {
      v25 = (uint64_t)(v39.__r_.__value_.__l.__size_ - v39.__r_.__value_.__r.__words[0]) >> 3;
      if ((unint64_t)(v25 + 1) >> 61)
        std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
      v26 = (uint64_t)(v39.__r_.__value_.__r.__words[2] - v39.__r_.__value_.__r.__words[0]) >> 2;
      if (v26 <= v25 + 1)
        v26 = v25 + 1;
      if (v39.__r_.__value_.__r.__words[2] - v39.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v26;
      if (v14)
        v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v39.__r_.__value_.__r.__words[2], v14);
      else
        v27 = 0;
      v28 = (MTLBoundsCheck **)&v27[8 * v25];
      *v28 = v18;
      v24 = (std::string::size_type)(v28 + 1);
      v29 = (char *)v39.__r_.__value_.__l.__size_;
      v30 = v39.__r_.__value_.__r.__words[0];
      if (v39.__r_.__value_.__l.__size_ != v39.__r_.__value_.__r.__words[0])
      {
        do
        {
          v31 = (MTLBoundsCheck *)*((_QWORD *)v29 - 1);
          v29 -= 8;
          *--v28 = v31;
        }
        while (v29 != (char *)v30);
        v29 = (char *)v39.__r_.__value_.__r.__words[0];
      }
      v39.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
      v39.__r_.__value_.__l.__size_ = v24;
      v39.__r_.__value_.__r.__words[2] = (std::string::size_type)&v27[8 * v14];
      if (v29)
        operator delete(v29);
    }
    else
    {
      *(_QWORD *)v39.__r_.__value_.__l.__size_ = v18;
      v24 = size + 8;
    }
    v39.__r_.__value_.__l.__size_ = v24;
    ++v16;
  }
  while (v16 != 2);
  Function = llvm::Module::getFunction();
  if (!Function)
  {
    v33 = llvm::FunctionType::get();
    v37 = 260;
    __p[0] = &v40;
    Function = llvm::Function::Create(v33, 0, (uint64_t)__p, v15);
  }
  if (v39.__r_.__value_.__r.__words[0])
  {
    v39.__r_.__value_.__l.__size_ = v39.__r_.__value_.__r.__words[0];
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  return Function;
}

void sub_240FD05CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (__p)
    operator delete(__p);
  if (a36 < 0)
    operator delete(a31);
  _Unwind_Resume(exception_object);
}

uint64_t llvm::IRBuilderBase::CreateCondBr(uint64_t *a1, llvm::BasicBlock *a2, llvm::BranchInst *this, llvm::BasicBlock *a4, llvm::Instruction *a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[32];
  __int16 v13;

  v9 = llvm::BranchInst::Create(this, a4, a2, 0, a5);
  v10 = llvm::IRBuilderBase::addBranchMetadata<llvm::BranchInst>((uint64_t)a1, v9, (uint64_t)a5, a6);
  v13 = 257;
  return llvm::IRBuilderBase::Insert<llvm::CastInst>(a1, v10, (uint64_t)v12);
}

uint64_t MTLIRBuilder::MTLIRBuilder<llvm::BasicBlock * const&>(uint64_t a1, llvm::BasicBlock **a2)
{
  llvm::BasicBlock *v3;
  llvm::LLVMContext *Context;

  v3 = *a2;
  Context = (llvm::LLVMContext *)llvm::BasicBlock::getContext(*a2);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x200000000;
  *(_QWORD *)(a1 + 120) = MEMORY[0x24BED83B8] + 16;
  *(_QWORD *)(a1 + 64) = Context;
  *(_QWORD *)(a1 + 72) = a1 + 120;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BED83F0] + 16;
  *(_QWORD *)(a1 + 80) = a1 + 128;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(_WORD *)(a1 + 100) = 512;
  *(_BYTE *)(a1 + 102) = 7;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 48) = v3;
  *(_QWORD *)(a1 + 56) = (char *)v3 + 40;
  MTLIRBuilder::initTypeCache((MTLIRBuilder *)a1, Context);
  return a1;
}

void sub_240FD078C(_Unwind_Exception *a1)
{
  void **v1;

  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder(v1);
  _Unwind_Resume(a1);
}

uint64_t llvm::IRBuilderBase::addBranchMetadata<llvm::BranchInst>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
    llvm::Instruction::setMetadata();
  if (a4)
    llvm::Instruction::setMetadata();
  return a2;
}

uint64_t llvm::IRBuilderBase::CreateConstInBoundsGEP2_32(llvm::Type **this, llvm::Type *a2, llvm::Value *a3, unsigned int a4, unsigned int a5, const llvm::Twine *a6)
{
  llvm::LLVMContext *v10;
  uint64_t result;
  llvm::GetElementPtrInst *v12;
  uint64_t *v13[3];

  v13[2] = *(uint64_t **)MEMORY[0x24BDAC8D0];
  llvm::Type::getInt32Ty(this[8], a2);
  v13[0] = (uint64_t *)llvm::ConstantInt::get();
  llvm::Type::getInt32Ty(this[8], v10);
  v13[1] = (uint64_t *)llvm::ConstantInt::get();
  result = (*(uint64_t (**)(llvm::Type *, llvm::Type *, llvm::Value *, uint64_t **, uint64_t, uint64_t))(*(_QWORD *)this[9] + 48))(this[9], a2, a3, v13, 2, 1);
  if (!result)
  {
    v12 = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::Create((uint64_t)a2, (uint64_t *)a3, v13, 2);
    llvm::GetElementPtrInst::setIsInBounds(v12);
    return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, (uint64_t)v12, (uint64_t)a6);
  }
  return result;
}

uint64_t getOrInsertFunction<llvm::StringRef &,llvm::PointerType *,llvm::Type *&>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;

  llvm::Module::getOrInsertFunction<llvm::Type *>(a1, *a2, a2[1], 0, *a3, *a4);
  result = v4;
  if (*(_BYTE *)(v4 + 16) == 5)
    return *(_QWORD *)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF));
  return result;
}

uint64_t llvm::Module::getOrInsertFunction<llvm::Type *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t inserted;
  uint64_t v8;
  void *v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x24BDAC8D0];
  v8 = a6;
  llvm::SmallVector<llvm::Type *,1u>::SmallVector(&v9, &v8, 1);
  llvm::FunctionType::get();
  inserted = llvm::Module::getOrInsertFunction();
  if (v9 != v10)
    free(v9);
  return inserted;
}

void sub_240FD0A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(exception_object);
}

uint64_t MemoryIndirectionPass::createIndirectPtrToOffset(MemoryIndirectionPass *this, llvm::Value *a2)
{
  uint64_t v4;
  MTLBoundsCheck *v5;
  uint64_t v6;
  llvm::BasicBlock *v7;
  llvm::BasicBlock *v8;
  llvm::BasicBlock *v9;
  llvm::ReturnInst *Context;
  uint64_t v11;
  uint64_t v12;
  llvm::Value *Cast;
  llvm::Value *v14;
  llvm::LLVMContext *v15;
  llvm::Instruction *v16;
  uint64_t v17;
  uint64_t v18;
  _WORD v20[20];
  void *v21[2];
  _BYTE v22[16];
  __int16 v23;
  llvm::BasicBlock *v24;
  char *v25;
  llvm::ReturnInst *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  __int16 v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  MTLBoundsCheck *v37[4];
  __int16 v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 6);
  v21[0] = "mtl.ind_ptr_to_offset";
  v23 = 259;
  v5 = (MTLBoundsCheck *)*((_QWORD *)this + 9);
  v37[0] = *(MTLBoundsCheck **)a2;
  v6 = getMangledFunction<llvm::Type *>(v4, (llvm::Twine *)v21, v5, v37);
  if (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v6))
  {
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
    *(_DWORD *)(v6 + 32) = *(_DWORD *)(v6 + 32) & 0xFFFFBFC0 | 0x4007;
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    v7 = (llvm::BasicBlock *)*((_QWORD *)this + 5);
    v23 = 257;
    v9 = (llvm::BasicBlock *)llvm::BasicBlock::Create(v7, (llvm::LLVMContext *)v21, (const llvm::Twine *)v6, 0, v8);
    Context = (llvm::ReturnInst *)llvm::BasicBlock::getContext(v9);
    v21[0] = v22;
    v21[1] = (void *)0x200000000;
    v26 = Context;
    v27 = &v35;
    v28 = &v36;
    v29 = 0;
    v30 = 0;
    v31 = 512;
    v32 = 7;
    v33 = 0;
    v34 = 0;
    v35 = MEMORY[0x24BED83B8] + 16;
    v36 = MEMORY[0x24BED83F0] + 16;
    v24 = v9;
    v25 = (char *)v9 + 40;
    if ((*(_BYTE *)(v6 + 18) & 1) != 0)
      llvm::Function::BuildLazyArguments((llvm::Function *)v6);
    v11 = *(_QWORD *)(v6 + 88);
    v12 = *((_QWORD *)this + 9);
    v38 = 257;
    Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v21, 47, v11, v12, (uint64_t)v37);
    v14 = (llvm::Value *)llvm::ConstantInt::get();
    v20[16] = 257;
    v15 = (llvm::LLVMContext *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)v21, Cast, v14, (const llvm::Twine *)v20);
    v17 = llvm::ReturnInst::Create(v26, v15, 0, v16);
    v38 = 257;
    llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)v21, v17, (uint64_t)v37);
    llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)&v36);
    llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v35);
    if (v21[0] != v22)
      free(v21[0]);
  }
  else if (!v6)
  {
    v18 = 0;
    goto LABEL_8;
  }
  v18 = *(_QWORD *)(v6 + 24);
LABEL_8:
  v37[0] = a2;
  v23 = 257;
  return llvm::CallInst::Create(v18, v6, (uint64_t)v37, 1, 0, 0);
}

void sub_240FD0CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder((void **)va);
  _Unwind_Resume(a1);
}

uint64_t MemoryIndirectionPass::createIndirectPtrToLength(MemoryIndirectionPass *this, llvm::Value *a2)
{
  uint64_t v4;
  MTLBoundsCheck *v5;
  uint64_t v6;
  llvm::BasicBlock *v7;
  llvm::BasicBlock *v8;
  llvm::BasicBlock *v9;
  llvm::ReturnInst *Context;
  uint64_t v11;
  uint64_t v12;
  llvm::Value *Cast;
  llvm::Value *v14;
  uint64_t *LShr;
  uint64_t v16;
  llvm::Type *v17;
  uint64_t *AlignedLoad;
  uint64_t v19;
  char *Name;
  size_t v21;
  uint64_t GVBaseType;
  uint64_t GEP;
  llvm::Type *v24;
  uint64_t v25;
  uint64_t v26;
  llvm::LLVMContext *v27;
  llvm::Instruction *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v32[4];
  __int16 v33;
  void *v34[2];
  _BYTE v35[16];
  __int16 v36;
  llvm::BasicBlock *v37;
  char *v38;
  llvm::ReturnInst *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  int v43;
  __int16 v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  MTLBoundsCheck *v50[4];
  __int16 v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 6);
  v34[0] = "mtl.ind_ptr_to_length";
  v36 = 259;
  v5 = (MTLBoundsCheck *)*((_QWORD *)this + 9);
  v50[0] = *(MTLBoundsCheck **)a2;
  v6 = getMangledFunction<llvm::Type *>(v4, (llvm::Twine *)v34, v5, v50);
  if (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v6))
  {
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
    *(_DWORD *)(v6 + 32) = *(_DWORD *)(v6 + 32) & 0xFFFFBFC0 | 0x4007;
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    v7 = (llvm::BasicBlock *)*((_QWORD *)this + 5);
    v36 = 257;
    v9 = (llvm::BasicBlock *)llvm::BasicBlock::Create(v7, (llvm::LLVMContext *)v34, (const llvm::Twine *)v6, 0, v8);
    Context = (llvm::ReturnInst *)llvm::BasicBlock::getContext(v9);
    v34[0] = v35;
    v34[1] = (void *)0x200000000;
    v39 = Context;
    v40 = &v48;
    v41 = &v49;
    v42 = 0;
    v43 = 0;
    v44 = 512;
    v45 = 7;
    v46 = 0;
    v47 = 0;
    v48 = MEMORY[0x24BED83B8] + 16;
    v49 = MEMORY[0x24BED83F0] + 16;
    v37 = v9;
    v38 = (char *)v9 + 40;
    if ((*(_BYTE *)(v6 + 18) & 1) != 0)
      llvm::Function::BuildLazyArguments((llvm::Function *)v6);
    v11 = *(_QWORD *)(v6 + 88);
    v12 = *((_QWORD *)this + 9);
    v51 = 257;
    Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v34, 47, v11, v12, (uint64_t)v50);
    v14 = (llvm::Value *)llvm::ConstantInt::get();
    v51 = 257;
    LShr = (uint64_t *)llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)v34, Cast, v14, (const llvm::Twine *)v50, 0);
    v16 = *((_QWORD *)this + 23);
    v17 = *(llvm::Type **)(v16 + 24);
    v51 = 257;
    AlignedLoad = (uint64_t *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v34, v17, v16, 0, 0, (uint64_t)v50);
    v19 = *((_QWORD *)this + 8);
    Name = (char *)llvm::Value::getName(*((llvm::Value **)this + 23));
    GVBaseType = MTLBoundsCheck::SharedPassData::getGVBaseType(v19, Name, v21);
    v32[0] = LShr;
    v32[1] = (uint64_t *)llvm::ConstantInt::get();
    v51 = 257;
    GEP = llvm::IRBuilderBase::CreateGEP((uint64_t)v34, GVBaseType, AlignedLoad, v32, 2, (uint64_t)v50);
    v24 = *(llvm::Type **)(GEP + 72);
    v51 = 257;
    v25 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v34, v24, GEP, 0, 0, (uint64_t)v50);
    v26 = *((_QWORD *)this + 9);
    v33 = 257;
    v27 = (llvm::LLVMContext *)llvm::IRBuilderBase::CreateCast((uint64_t)v34, 40, v25, v26, (uint64_t)v32);
    v29 = llvm::ReturnInst::Create(v39, v27, 0, v28);
    v51 = 257;
    llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)v34, v29, (uint64_t)v50);
    llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)&v49);
    llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v48);
    if (v34[0] != v35)
      free(v34[0]);
  }
  else if (!v6)
  {
    v30 = 0;
    goto LABEL_8;
  }
  v30 = *(_QWORD *)(v6 + 24);
LABEL_8:
  v50[0] = a2;
  v36 = 257;
  return llvm::CallInst::Create(v30, v6, (uint64_t)v50, 1, 0, 0);
}

void sub_240FD1064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder((void **)va);
  _Unwind_Resume(a1);
}

llvm::Instruction *llvm::IRBuilderBase::CreateShl(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4, uint64_t a5, uint64_t a6)
{
  llvm::Instruction *result;
  BOOL v9;

  if (!a2 || *((unsigned __int8 *)a2 + 16) > 0x14u || !a3 || *((unsigned __int8 *)a3 + 16) > 0x14u)
    return llvm::IRBuilderBase::CreateInsertNUWNSWBinOp((uint64_t *)this, 25, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6);
  result = (llvm::Instruction *)(*(uint64_t (**)(_QWORD, llvm::Value *, llvm::Value *, uint64_t, uint64_t))(**((_QWORD **)this + 9) + 152))(*((_QWORD *)this + 9), a2, a3, a5, a6);
  if (result)
    v9 = *((unsigned __int8 *)result + 16) >= 0x1Cu;
  else
    v9 = 0;
  if (v9)
    return (llvm::Instruction *)llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, (uint64_t)result, (uint64_t)a4);
  return result;
}

uint64_t MemoryIndirectionPass::createCheckedFunction(MemoryIndirectionPass *a1, uint64_t a2, llvm::Value *this)
{
  uint64_t Name;
  size_t v7;
  BOOL v12;
  uint64_t Function;
  uint64_t v17;
  uint64_t v18;
  BOOL v22;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  llvm::Type ***v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  llvm::BasicBlock *v33;
  BOOL v34;
  llvm::BasicBlock *v36;
  llvm::BasicBlock *v37;
  uint64_t Context;
  uint64_t v39;
  uint64_t v40;
  llvm::Type *v41;
  uint64_t v42;
  llvm::Type **PointerBitCastOrAddrSpaceCast;
  llvm::Value *IndirectPtrToOffset;
  llvm::Value *IndirectPtrToBase;
  llvm::Type *v46;
  llvm::Type **GEP;
  uint64_t v48;
  uint64_t v49;
  llvm::Value *v50;
  uint64_t v51;
  llvm::Instruction *v52;
  __int16 v53;
  uint64_t v54;
  char *v55;
  llvm::BasicBlock *v56;
  uint64_t v57;
  _BYTE v58[32];
  __int16 v59;
  _BYTE v60[32];
  __int16 v61;
  _BYTE v62[64];
  uint64_t v63;
  const char *v64;
  size_t v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  __int16 v69;
  llvm::BasicBlock *v70;
  char *v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  int v76;
  __int16 v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  _BYTE v85[48];
  _QWORD *v86;
  uint64_t v87;
  _BYTE v88[32];
  _QWORD *v89;
  __int128 v90;
  _QWORD v91[10];

  v91[8] = *MEMORY[0x24BDAC8D0];
  if (!this)
    return 0;
  Name = llvm::Value::getName(this);
  v64 = (const char *)Name;
  v65 = v7;
  if (v7 >= 0x17)
  {
    if (*(_QWORD *)Name == 0x5F7465732E726961
      && *(_QWORD *)(Name + 8) == 0x746E656D67617266
      && *(_QWORD *)(Name + 15) == 0x7265666675625F74)
    {
      return 0;
    }
LABEL_13:
    if (*(_QWORD *)Name == 0x5F7465732E726961
      && *(_QWORD *)(Name + 8) == 0x625F6C656E72656BLL
      && *(_QWORD *)(Name + 13) == 0x7265666675625F6CLL)
    {
      return 0;
    }
    v12 = *(_QWORD *)Name == 0x5F7465732E726961 && *(_QWORD *)(Name + 8) == 0x625F786574726576;
    if (v12 && *(_QWORD *)(Name + 13) == 0x7265666675625F78)
      return 0;
    goto LABEL_27;
  }
  if (v7 >= 0x15)
    goto LABEL_13;
  if (v7 < 4)
    return 0;
LABEL_27:
  if (*(_DWORD *)Name != 779250017)
  {
    if (v7 < 5)
      return 0;
    if (*(_DWORD *)Name != 1836477548 || *(_BYTE *)(Name + 4) != 46)
      return 0;
  }
  if ((*(_QWORD *)(a2 + 48) || (*(_BYTE *)(a2 + 23) & 0x20) != 0) && llvm::Instruction::getMetadataImpl())
    return 0;
  v17 = *((_QWORD *)this + 3);
  v18 = **(_QWORD **)(v17 + 16);
  v89 = v91;
  v90 = xmmword_24105A3F0;
  llvm::raw_svector_ostream::raw_svector_ostream((uint64_t)v62, (uint64_t)&v89);
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)v62, "mtl.indirect.", 0xDuLL);
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)v62, v64, v65);
  v86 = v88;
  v87 = 0x400000000;
  llvm::SmallVectorImpl<llvm::Value *>::resizeImpl<false>((uint64_t)&v86, (*(_DWORD *)(v17 + 12) - 1));
  if (v65 >= 0xB)
  {
    if (*(_QWORD *)v64 == 0x6D656D2E6D766C6CLL && *(_QWORD *)(v64 + 3) == 0x7970636D656D2E6DLL)
      goto LABEL_68;
    if (*(_QWORD *)v64 == 0x6D656D2E6D766C6CLL && *(_QWORD *)(v64 + 3) == 0x7465736D656D2E6DLL)
      goto LABEL_68;
    if (v65 >= 0xC)
    {
      if (*(_QWORD *)v64 != 0x6D656D2E6D766C6CLL || *((_DWORD *)v64 + 2) != 1702260589)
      {
        if (v65 >= 0x11)
        {
          v22 = *(_QWORD *)v64 == 0x6D6F74612E726961 && *((_QWORD *)v64 + 1) == 0x61626F6C672E6369;
          if (v22 && v64[16] == 108)
          {
            v24 = llvm::StringRef::find();
            v25 = -4;
            if (v24 == -1)
              v25 = -3;
            v26 = v25 + v87;
            if (__CFADD__(v25, v87))
            {
              do
              {
                v86[v26] = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * v26);
                llvm::raw_ostream::operator<<((llvm::raw_ostream *)v62, ".", 1uLL);
                llvm::raw_ostream::operator<<();
                ++v26;
              }
              while (v26 < v87);
            }
          }
        }
        goto LABEL_73;
      }
LABEL_68:
      if (v87 >= 4)
      {
        v27 = 3;
        if ((_DWORD)v87 == 5)
          v27 = 4;
        v86[v27] = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * v27);
        llvm::raw_ostream::operator<<((llvm::raw_ostream *)v62, ".", 1uLL);
        llvm::raw_ostream::operator<<();
        if ((_DWORD)v87 == 5)
        {
          v86[3] = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 96);
          llvm::raw_ostream::operator<<((llvm::raw_ostream *)v62, ".", 1uLL);
          llvm::raw_ostream::operator<<();
        }
      }
    }
  }
LABEL_73:
  Function = llvm::Module::getFunction();
  if (!Function)
  {
    v83 = v85;
    v84 = 0x200000000;
    MTLBoundsCheck::gatherMemoryArguments((uint64_t)this, (uint64_t)&v83);
    if (!(_DWORD)v84)
      goto LABEL_79;
    v28 = 0;
    v29 = (llvm::Type ***)v83;
    v30 = 24 * v84;
    do
    {
      v28 += MemoryIndirectionPass::indirectAddressSpace(a1, **v29);
      v29 += 3;
      v30 -= 24;
    }
    while (v30);
    if (v28 && *(_BYTE *)(v18 + 8) != 15)
    {
      v32 = *(const char **)v63;
      v31 = *(_QWORD *)(v63 + 8);
      v69 = 261;
      v66 = v32;
      v67 = v31;
      Function = llvm::Function::Create(v17, 7, (uint64_t)&v66, *((_QWORD *)a1 + 6));
      llvm::MDTuple::getImpl();
      llvm::Value::setMetadata();
      llvm::Function::addFnAttr();
      llvm::Function::addFnAttr();
      if (v65 >= 0x18)
      {
        v34 = *(_QWORD *)v64 == 0x776172642E726961 && *((_QWORD *)v64 + 1) == 0x64657865646E695FLL;
        if (v34 && *((_QWORD *)v64 + 2) == 0x736568637461705FLL)
        {
          if ((*(_WORD *)(Function + 18) & 1) != 0)
            llvm::Function::BuildLazyArguments((llvm::Function *)Function);
          v86[6] = *(_QWORD *)(Function + 88) + 240;
        }
      }
      v36 = (llvm::BasicBlock *)*((_QWORD *)a1 + 5);
      v66 = "entry";
      v69 = 259;
      v37 = (llvm::BasicBlock *)llvm::BasicBlock::Create(v36, (llvm::LLVMContext *)&v66, (const llvm::Twine *)Function, 0, v33);
      Context = llvm::BasicBlock::getContext(v37);
      v66 = (const char *)&v68;
      v67 = 0x200000000;
      v72 = Context;
      v73 = &v81;
      v74 = &v82;
      v75 = 0;
      v76 = 0;
      v77 = 512;
      v78 = 7;
      v79 = 0;
      v80 = 0;
      v81 = MEMORY[0x24BED83B8] + 16;
      v82 = MEMORY[0x24BED83F0] + 16;
      v55 = (char *)v37 + 40;
      v56 = v37;
      v70 = v37;
      v71 = (char *)v37 + 40;
      if ((_DWORD)v87)
      {
        v54 = v18;
        v39 = 0;
        v40 = 0;
        v57 = v17;
        do
        {
          v41 = *(llvm::Type **)(*(_QWORD *)(v17 + 16) + 8 * v40 + 8);
          if ((*(_WORD *)(Function + 18) & 1) != 0)
            llvm::Function::BuildLazyArguments((llvm::Function *)Function);
          if (!v86[v40])
          {
            v42 = *(_QWORD *)(Function + 88);
            PointerBitCastOrAddrSpaceCast = (llvm::Type **)(v42 + v39);
            if (MemoryIndirectionPass::indirectAddressSpace(a1, v41))
            {
              IndirectPtrToOffset = (llvm::Value *)MemoryIndirectionPass::createIndirectPtrToOffset(a1, (llvm::Value *)(v42 + v39));
              IndirectPtrToBase = (llvm::Value *)MemoryIndirectionPass::createIndirectPtrToBase(a1, (llvm::Value *)PointerBitCastOrAddrSpaceCast);
              v61 = 257;
              llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)&v66, (uint64_t)IndirectPtrToBase, (uint64_t)v60);
              v61 = 257;
              llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)&v66, (uint64_t)IndirectPtrToOffset, (uint64_t)v60);
              v46 = **(llvm::Type ***)(*(_QWORD *)IndirectPtrToBase + 16);
              v61 = 257;
              GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)&v66, v46, IndirectPtrToBase, IndirectPtrToOffset, (const llvm::Twine *)v60);
              v59 = 257;
              PointerBitCastOrAddrSpaceCast = llvm::IRBuilderBase::CreatePointerBitCastOrAddrSpaceCast((llvm::IRBuilderBase *)&v66, GEP, v41, (const llvm::Twine *)v58);
              v17 = v57;
            }
            v86[v40] = PointerBitCastOrAddrSpaceCast;
          }
          v48 = v87;
          ++v40;
          v39 += 40;
        }
        while (v87 > v40);
        v18 = v54;
      }
      else
      {
        v48 = 0;
      }
      v70 = v56;
      v71 = v55;
      v49 = *((_QWORD *)this + 3);
      v61 = 257;
      v50 = (llvm::Value *)llvm::IRBuilderBase::CreateCall((uint64_t)&v66, v49, (uint64_t)this, (uint64_t)v86, v48, (uint64_t)v60, 0);
      v53 = *((_WORD *)v50 + 9) & 0xFFFC | *(_WORD *)(a2 + 18) & 3;
      *((_WORD *)v50 + 9) = v53;
      *((_WORD *)v50 + 9) = v53 & 0xF003 | *(_WORD *)(a2 + 18) & 0xFFC;
      if (*(_BYTE *)(v18 + 8) == 7)
        llvm::IRBuilderBase::CreateRetVoid((llvm::ReturnInst **)&v66, (uint64_t)v50, v51, v52);
      else
        llvm::IRBuilderBase::CreateRet((llvm::ReturnInst **)&v66, v50, v51, v52);
      llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder((void **)&v66);
    }
    else
    {
LABEL_79:
      Function = 0;
    }
    if (v83 != v85)
      free(v83);
  }
  if (v86 != (_QWORD *)v88)
    free(v86);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v62);
  if (v89 != v91)
    free(v89);
  return Function;
}

void sub_240FD19B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54)
{
  void *v54;
  void *v55;
  uint64_t v56;
  void *v58;
  void *v59;

  v58 = *(void **)(v56 - 248);
  if (v58 != v55)
    free(v58);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&a26);
  v59 = *(void **)(v56 - 200);
  if (v59 != v54)
    free(v59);
  _Unwind_Resume(a1);
}

uint64_t llvm::CallBase::arg_end(llvm::CallBase *this)
{
  int v2;
  uint64_t NumSubclassExtraOperandsDynamic;

  v2 = *((unsigned __int8 *)this + 16);
  if (v2 == 84)
  {
    NumSubclassExtraOperandsDynamic = 0;
  }
  else if (v2 == 39)
  {
    NumSubclassExtraOperandsDynamic = llvm::CallBase::getNumSubclassExtraOperandsDynamic(this);
  }
  else
  {
    NumSubclassExtraOperandsDynamic = 2;
  }
  return (uint64_t)this
       + -32 * llvm::CallBase::getNumTotalBundleOperands(this)
       + -32 * NumSubclassExtraOperandsDynamic
       - 32;
}

uint64_t MemoryIndirectionPass::createIndirectLoad(llvm::DataLayout **this, llvm::Value *a2, unsigned int a3, llvm::Type *a4, int a5)
{
  unint64_t PrefTypeAlignment;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::BasicBlock *v12;
  llvm::BasicBlock *v13;
  llvm::Value *v14;
  llvm::Value *IndirectPtrToOffset;
  llvm::Value *IndirectPtrToBase;
  llvm::Type *v17;
  llvm::Type **GEP;
  llvm::Type **PointerBitCastOrAddrSpaceCast;
  llvm::Type *v20;
  unint64_t v21;
  __int16 v22;
  llvm::LLVMContext *AlignedLoad;
  llvm::Instruction *v24;
  uint64_t v25;
  uint64_t v26;
  _WORD v28[20];
  llvm::BasicBlock *v29;
  llvm::Type *v30;
  void *v31[2];
  uint64_t v32;
  __int16 v33;
  llvm::ReturnInst *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[4];
  __int16 v38;
  uint64_t v39;

  LODWORD(PrefTypeAlignment) = a5;
  v39 = *MEMORY[0x24BDAC8D0];
  v30 = (llvm::Type *)llvm::PointerType::get();
  if ((_DWORD)PrefTypeAlignment)
  {
    v9 = PrefTypeAlignment;
    PrefTypeAlignment = PrefTypeAlignment;
  }
  else
  {
    PrefTypeAlignment = llvm::DataLayout::getPrefTypeAlignment(this[7], a4);
    v9 = 0;
  }
  v10 = (uint64_t)this[6];
  v31[0] = "mtl.indirect_load.";
  v32 = v9;
  v33 = 2051;
  v37[0] = *(_QWORD *)a2;
  v11 = getMangledFunction<llvm::Type *,llvm::PointerType *&>(v10, (llvm::Twine *)v31, a4, v37, (uint64_t *)&v30);
  if (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v11))
  {
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
    *(_DWORD *)(v11 + 32) = *(_DWORD *)(v11 + 32) & 0xFFFFBFC0 | 0x4007;
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    v12 = this[5];
    v33 = 257;
    v29 = (llvm::BasicBlock *)llvm::BasicBlock::Create(v12, (llvm::LLVMContext *)v31, (const llvm::Twine *)v11, 0, v13);
    MTLIRBuilder::MTLIRBuilder<llvm::BasicBlock *&>((uint64_t)v31, &v29);
    if ((*(_WORD *)(v11 + 18) & 1) != 0)
      llvm::Function::BuildLazyArguments((llvm::Function *)v11);
    v14 = *(llvm::Value **)(v11 + 88);
    IndirectPtrToOffset = (llvm::Value *)MemoryIndirectionPass::createIndirectPtrToOffset((MemoryIndirectionPass *)this, v14);
    IndirectPtrToBase = (llvm::Value *)MemoryIndirectionPass::createIndirectPtrToBase((MemoryIndirectionPass *)this, v14);
    v38 = 257;
    llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)v31, (uint64_t)IndirectPtrToBase, (uint64_t)v37);
    v38 = 257;
    llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)v31, (uint64_t)IndirectPtrToOffset, (uint64_t)v37);
    v17 = **(llvm::Type ***)(*(_QWORD *)IndirectPtrToBase + 16);
    v38 = 257;
    GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)v31, v17, IndirectPtrToBase, IndirectPtrToOffset, (const llvm::Twine *)v37);
    v28[16] = 257;
    PointerBitCastOrAddrSpaceCast = llvm::IRBuilderBase::CreatePointerBitCastOrAddrSpaceCast((llvm::IRBuilderBase *)v31, GEP, v30, (const llvm::Twine *)v28);
    v20 = (llvm::Type *)**((_QWORD **)*PointerBitCastOrAddrSpaceCast + 2);
    v21 = __clz(PrefTypeAlignment) ^ 0x13F;
    if (PrefTypeAlignment)
      v22 = v21;
    else
      v22 = 0;
    v38 = 257;
    AlignedLoad = (llvm::LLVMContext *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v31, v20, (uint64_t)PointerBitCastOrAddrSpaceCast, v22, 0, (uint64_t)v37);
    v25 = llvm::ReturnInst::Create(v34, AlignedLoad, 0, v24);
    v38 = 257;
    llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)v31, v25, (uint64_t)v37);
    llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)&v36);
    llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v35);
    if (v31[0] != &v32)
      free(v31[0]);
  }
  else if (!v11)
  {
    v26 = 0;
    goto LABEL_14;
  }
  v26 = *(_QWORD *)(v11 + 24);
LABEL_14:
  v37[0] = a2;
  v37[1] = llvm::UndefValue::get();
  v33 = 257;
  return llvm::CallInst::Create(v26, v11, (uint64_t)v37, 2, 0, 0);
}

void sub_240FD1DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder((void **)va);
  _Unwind_Resume(a1);
}

uint64_t MemoryIndirectionPass::createIndirectStore(llvm::DataLayout **this, void **a2, unsigned int a3, llvm::Type **a4, unsigned int a5)
{
  llvm::Type *v9;
  llvm::LLVMContext *v10;
  uint64_t PrefTypeAlignment;
  uint64_t v12;
  MTLBoundsCheck *VoidTy;
  uint64_t v14;
  llvm::BasicBlock *v15;
  llvm::BasicBlock *v16;
  llvm::Value *v17;
  uint64_t v18;
  llvm::Value *v19;
  llvm::Value *IndirectPtrToOffset;
  llvm::Value *IndirectPtrToBase;
  llvm::Type *v22;
  llvm::Type **GEP;
  llvm::Type **PointerBitCastOrAddrSpaceCast;
  unint64_t v25;
  __int16 v26;
  llvm::Instruction *v27;
  uint64_t v28;
  _WORD v30[20];
  llvm::BasicBlock *v31;
  unint64_t v32;
  llvm::Type *v33;
  llvm::Type *v34;
  void *v35[2];
  unint64_t *v36;
  __int16 v37;
  llvm::ReturnInst *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41[4];
  __int16 v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v9 = *a4;
  v34 = *a4;
  v33 = (llvm::Type *)llvm::PointerType::get();
  if (a5)
    PrefTypeAlignment = a5;
  else
    PrefTypeAlignment = llvm::DataLayout::getPrefTypeAlignment(this[7], v9);
  v32 = PrefTypeAlignment;
  v35[0] = "mtl.indirect_store.";
  v36 = &v32;
  v37 = 3075;
  v12 = (uint64_t)this[6];
  VoidTy = (MTLBoundsCheck *)llvm::Type::getVoidTy(this[5], v10);
  v41[0] = *a2;
  v14 = getMangledFunction<llvm::Type *,llvm::Type *&,llvm::PointerType *&>(v12, (llvm::Twine *)v35, VoidTy, v41, (void **)&v34, (int64_t *)&v33);
  if (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v14))
  {
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
    *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 32) & 0xFFFFBFC0 | 0x4007;
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    v15 = this[5];
    v37 = 257;
    v31 = (llvm::BasicBlock *)llvm::BasicBlock::Create(v15, (llvm::LLVMContext *)v35, (const llvm::Twine *)v14, 0, v16);
    if ((*(_WORD *)(v14 + 18) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments((llvm::Function *)v14);
      v17 = *(llvm::Value **)(v14 + 88);
      if ((*(_WORD *)(v14 + 18) & 1) != 0)
      {
        llvm::Function::BuildLazyArguments((llvm::Function *)v14);
        v19 = *(llvm::Value **)(v14 + 88);
        goto LABEL_12;
      }
    }
    else
    {
      v17 = *(llvm::Value **)(v14 + 88);
    }
    v19 = v17;
LABEL_12:
    MTLIRBuilder::MTLIRBuilder<llvm::BasicBlock *&>((uint64_t)v35, &v31);
    IndirectPtrToOffset = (llvm::Value *)MemoryIndirectionPass::createIndirectPtrToOffset((MemoryIndirectionPass *)this, v17);
    IndirectPtrToBase = (llvm::Value *)MemoryIndirectionPass::createIndirectPtrToBase((MemoryIndirectionPass *)this, v17);
    v42 = 257;
    llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)v35, (uint64_t)IndirectPtrToBase, (uint64_t)v41);
    v42 = 257;
    llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)v35, (uint64_t)IndirectPtrToOffset, (uint64_t)v41);
    v22 = **(llvm::Type ***)(*(_QWORD *)IndirectPtrToBase + 16);
    v42 = 257;
    GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)v35, v22, IndirectPtrToBase, IndirectPtrToOffset, (const llvm::Twine *)v41);
    v30[16] = 257;
    PointerBitCastOrAddrSpaceCast = llvm::IRBuilderBase::CreatePointerBitCastOrAddrSpaceCast((llvm::IRBuilderBase *)v35, GEP, v33, (const llvm::Twine *)v30);
    v25 = __clz(v32) ^ 0x13F;
    if (v32)
      v26 = v25;
    else
      v26 = 0;
    llvm::IRBuilderBase::CreateAlignedStore((uint64_t)v35, (llvm::Type **)v19 + 5, (uint64_t)PointerBitCastOrAddrSpaceCast, v26);
    v28 = llvm::ReturnInst::Create(v38, 0, 0, v27);
    v42 = 257;
    llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)v35, v28, (uint64_t)v41);
    llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)&v40);
    llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v39);
    if (v35[0] != &v36)
      free(v35[0]);
    goto LABEL_17;
  }
  if (v14)
  {
LABEL_17:
    v18 = *(_QWORD *)(v14 + 24);
    goto LABEL_18;
  }
  v18 = 0;
LABEL_18:
  v41[0] = a2;
  v41[1] = a4;
  v41[2] = (void *)llvm::UndefValue::get();
  v37 = 257;
  return llvm::CallInst::Create(v18, v14, (uint64_t)v41, 3, 0, 0);
}

void sub_240FD2130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder((void **)va);
  _Unwind_Resume(a1);
}

uint64_t llvm::raw_svector_ostream::raw_svector_ostream(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = MEMORY[0x24BED83E0] + 16;
  *(_QWORD *)(a1 + 64) = a2;
  llvm::raw_ostream::SetUnbuffered((llvm::raw_ostream *)a1);
  return a1;
}

void sub_240FD21B8(_Unwind_Exception *a1)
{
  llvm::raw_ostream *v1;

  llvm::raw_ostream::~raw_ostream(v1);
  _Unwind_Resume(a1);
}

void llvm::SmallVectorImpl<llvm::Value *>::resizeImpl<false>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v2 = *(unsigned int *)(a1 + 8);
      }
      if (v2 != a2)
        bzero((void *)(*(_QWORD *)a1 + 8 * v2), 8 * a2 - 8 * v2);
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

unint64_t llvm::CallBase::getNumTotalBundleOperands(llvm::CallBase *this)
{
  unint64_t result;
  int v3;
  uint64_t Descriptor;
  uint64_t v5;

  result = llvm::CallBase::getNumOperandBundles(this);
  if ((_DWORD)result)
  {
    v3 = *(_DWORD *)(llvm::User::getDescriptor(this) + 8);
    Descriptor = llvm::User::getDescriptor(this);
    return (*(_DWORD *)(Descriptor + v5 - 4) - v3);
  }
  return result;
}

unint64_t llvm::CallBase::getNumOperandBundles(llvm::CallBase *this)
{
  uint64_t Descriptor;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  if ((*((_DWORD *)this + 5) & 0x80000000) != 0)
  {
    Descriptor = llvm::User::getDescriptor(this);
    if ((*((_DWORD *)this + 5) & 0x80000000) != 0)
    {
      v5 = llvm::User::getDescriptor(this);
      v3 = v5 + v6;
      return (unint64_t)(v3 - Descriptor) >> 4;
    }
  }
  else
  {
    Descriptor = 0;
  }
  v3 = 0;
  return (unint64_t)(v3 - Descriptor) >> 4;
}

_QWORD *llvm::SmallVector<llvm::Value *,4u>::SmallVector<llvm::Use *,void>(_QWORD *a1, char *a2, char *a3)
{
  *a1 = a1 + 2;
  a1[1] = 0x400000000;
  llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((uint64_t)a1, a2, a3);
  return a1;
}

void sub_240FD2314(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  void *v3;

  v3 = v2;
  if (*v1 != v3)
    free(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>(uint64_t result, char *a2, char *a3)
{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v4 = a2;
  v5 = result;
  v6 = a3 - a2;
  v7 = *(unsigned int *)(result + 8);
  if (v7 + ((a3 - a2) >> 5) > (unint64_t)*(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(unsigned int *)(v5 + 8);
  }
  if (v4 != a3)
  {
    v8 = (_QWORD *)(*(_QWORD *)v5 + 8 * v7);
    do
    {
      v9 = *(_QWORD *)v4;
      v4 += 32;
      *v8++ = v9;
    }
    while (v4 != a3);
  }
  *(_DWORD *)(v5 + 8) = v7 + (v6 >> 5);
  return result;
}

uint64_t getMangledFunction<llvm::Type *,llvm::PointerType *&>(uint64_t a1, llvm::Twine *this, MTLBoundsCheck *a3, _QWORD *a4, uint64_t *a5)
{
  llvm::Type *v9;
  std::string *v10;
  __int128 v11;
  void **v12;
  std::string::size_type v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  MTLBoundsCheck *v18;
  std::string *v19;
  __int128 v20;
  void **v21;
  std::string::size_type v22;
  std::string::size_type size;
  std::string::size_type v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  MTLBoundsCheck **v28;
  char *v29;
  std::string::size_type v30;
  MTLBoundsCheck *v31;
  uint64_t Function;
  uint64_t v33;
  void *__p[2];
  int64_t v36;
  __int16 v37;
  std::string v38;
  std::string v39;
  std::string v40;
  _QWORD v41[4];

  v41[2] = *MEMORY[0x24BDAC8D0];
  llvm::Twine::str(this);
  MTLBoundsCheck::getMangledTypeStr(a3, v9, &v39);
  v10 = std::string::insert(&v39, 0, ".");
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v36 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (v36 >= 0)
    v12 = __p;
  else
    v12 = (void **)__p[0];
  if (v36 >= 0)
    v13 = HIBYTE(v36);
  else
    v13 = (std::string::size_type)__p[1];
  std::string::append(&v40, (const std::string::value_type *)v12, v13);
  if (SHIBYTE(v36) < 0)
    operator delete(__p[0]);
  v15 = a1;
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  v16 = 0;
  memset(&v39, 0, sizeof(v39));
  v17 = *a5;
  v41[0] = *a4;
  v41[1] = v17;
  do
  {
    v18 = (MTLBoundsCheck *)v41[v16];
    MTLBoundsCheck::getMangledTypeStr(v18, (llvm::Type *)v14, &v38);
    v19 = std::string::insert(&v38, 0, ".");
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v36 = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    if (v36 >= 0)
      v21 = __p;
    else
      v21 = (void **)__p[0];
    if (v36 >= 0)
      v22 = HIBYTE(v36);
    else
      v22 = (std::string::size_type)__p[1];
    std::string::append(&v40, (const std::string::value_type *)v21, v22);
    if (SHIBYTE(v36) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    size = v39.__r_.__value_.__l.__size_;
    if (v39.__r_.__value_.__l.__size_ >= v39.__r_.__value_.__r.__words[2])
    {
      v25 = (uint64_t)(v39.__r_.__value_.__l.__size_ - v39.__r_.__value_.__r.__words[0]) >> 3;
      if ((unint64_t)(v25 + 1) >> 61)
        std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
      v26 = (uint64_t)(v39.__r_.__value_.__r.__words[2] - v39.__r_.__value_.__r.__words[0]) >> 2;
      if (v26 <= v25 + 1)
        v26 = v25 + 1;
      if (v39.__r_.__value_.__r.__words[2] - v39.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v26;
      if (v14)
        v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v39.__r_.__value_.__r.__words[2], v14);
      else
        v27 = 0;
      v28 = (MTLBoundsCheck **)&v27[8 * v25];
      *v28 = v18;
      v24 = (std::string::size_type)(v28 + 1);
      v29 = (char *)v39.__r_.__value_.__l.__size_;
      v30 = v39.__r_.__value_.__r.__words[0];
      if (v39.__r_.__value_.__l.__size_ != v39.__r_.__value_.__r.__words[0])
      {
        do
        {
          v31 = (MTLBoundsCheck *)*((_QWORD *)v29 - 1);
          v29 -= 8;
          *--v28 = v31;
        }
        while (v29 != (char *)v30);
        v29 = (char *)v39.__r_.__value_.__r.__words[0];
      }
      v39.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
      v39.__r_.__value_.__l.__size_ = v24;
      v39.__r_.__value_.__r.__words[2] = (std::string::size_type)&v27[8 * v14];
      if (v29)
        operator delete(v29);
    }
    else
    {
      *(_QWORD *)v39.__r_.__value_.__l.__size_ = v18;
      v24 = size + 8;
    }
    v39.__r_.__value_.__l.__size_ = v24;
    ++v16;
  }
  while (v16 != 2);
  Function = llvm::Module::getFunction();
  if (!Function)
  {
    v33 = llvm::FunctionType::get();
    v37 = 260;
    __p[0] = &v40;
    Function = llvm::Function::Create(v33, 0, (uint64_t)__p, v15);
  }
  if (v39.__r_.__value_.__r.__words[0])
  {
    v39.__r_.__value_.__l.__size_ = v39.__r_.__value_.__r.__words[0];
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  return Function;
}

void sub_240FD26B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (__p)
    operator delete(__p);
  if (a36 < 0)
    operator delete(a31);
  _Unwind_Resume(exception_object);
}

uint64_t getMangledFunction<llvm::Type *,llvm::Type *&,llvm::PointerType *&>(uint64_t a1, llvm::Twine *this, MTLBoundsCheck *a3, void **a4, void **a5, int64_t *a6)
{
  llvm::Type *v11;
  std::string *v12;
  __int128 v13;
  void **v14;
  std::string::size_type v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  MTLBoundsCheck *v20;
  std::string *v21;
  __int128 v22;
  void **v23;
  std::string::size_type v24;
  std::string::size_type size;
  std::string::size_type v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  MTLBoundsCheck **v30;
  char *v31;
  std::string::size_type v32;
  MTLBoundsCheck *v33;
  uint64_t Function;
  uint64_t v35;
  std::string v37;
  void *v38[2];
  int64_t v39;
  std::string v40;
  std::string v41;
  void *__p[2];
  int64_t v43;
  __int16 v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  llvm::Twine::str(this);
  MTLBoundsCheck::getMangledTypeStr(a3, v11, &v40);
  v12 = std::string::insert(&v40, 0, ".");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v43 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (v43 >= 0)
    v14 = __p;
  else
    v14 = (void **)__p[0];
  if (v43 >= 0)
    v15 = HIBYTE(v43);
  else
    v15 = (std::string::size_type)__p[1];
  std::string::append(&v41, (const std::string::value_type *)v14, v15);
  if (SHIBYTE(v43) < 0)
    operator delete(__p[0]);
  v17 = a1;
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  v18 = 0;
  memset(&v40, 0, sizeof(v40));
  v19 = *a5;
  __p[0] = *a4;
  __p[1] = v19;
  v43 = *a6;
  do
  {
    v20 = (MTLBoundsCheck *)__p[v18];
    MTLBoundsCheck::getMangledTypeStr(v20, (llvm::Type *)v16, &v37);
    v21 = std::string::insert(&v37, 0, ".");
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v39 = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)v38 = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if (v39 >= 0)
      v23 = v38;
    else
      v23 = (void **)v38[0];
    if (v39 >= 0)
      v24 = HIBYTE(v39);
    else
      v24 = (std::string::size_type)v38[1];
    std::string::append(&v41, (const std::string::value_type *)v23, v24);
    if (SHIBYTE(v39) < 0)
      operator delete(v38[0]);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    size = v40.__r_.__value_.__l.__size_;
    if (v40.__r_.__value_.__l.__size_ >= v40.__r_.__value_.__r.__words[2])
    {
      v27 = (uint64_t)(v40.__r_.__value_.__l.__size_ - v40.__r_.__value_.__r.__words[0]) >> 3;
      if ((unint64_t)(v27 + 1) >> 61)
        std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
      v28 = (uint64_t)(v40.__r_.__value_.__r.__words[2] - v40.__r_.__value_.__r.__words[0]) >> 2;
      if (v28 <= v27 + 1)
        v28 = v27 + 1;
      if (v40.__r_.__value_.__r.__words[2] - v40.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v28;
      if (v16)
        v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v40.__r_.__value_.__r.__words[2], v16);
      else
        v29 = 0;
      v30 = (MTLBoundsCheck **)&v29[8 * v27];
      *v30 = v20;
      v26 = (std::string::size_type)(v30 + 1);
      v31 = (char *)v40.__r_.__value_.__l.__size_;
      v32 = v40.__r_.__value_.__r.__words[0];
      if (v40.__r_.__value_.__l.__size_ != v40.__r_.__value_.__r.__words[0])
      {
        do
        {
          v33 = (MTLBoundsCheck *)*((_QWORD *)v31 - 1);
          v31 -= 8;
          *--v30 = v33;
        }
        while (v31 != (char *)v32);
        v31 = (char *)v40.__r_.__value_.__r.__words[0];
      }
      v40.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
      v40.__r_.__value_.__l.__size_ = v26;
      v40.__r_.__value_.__r.__words[2] = (std::string::size_type)&v29[8 * v16];
      if (v31)
        operator delete(v31);
    }
    else
    {
      *(_QWORD *)v40.__r_.__value_.__l.__size_ = v20;
      v26 = size + 8;
    }
    v40.__r_.__value_.__l.__size_ = v26;
    ++v18;
  }
  while (v18 != 3);
  Function = llvm::Module::getFunction();
  if (!Function)
  {
    v35 = llvm::FunctionType::get();
    v44 = 260;
    __p[0] = &v41;
    Function = llvm::Function::Create(v35, 0, (uint64_t)__p, v17);
  }
  if (v40.__r_.__value_.__r.__words[0])
  {
    v40.__r_.__value_.__l.__size_ = v40.__r_.__value_.__r.__words[0];
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  return Function;
}

void sub_240FD2A6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (__p)
    operator delete(__p);
  if (a34 < 0)
    operator delete(a29);
  _Unwind_Resume(exception_object);
}

_QWORD *createMTLICBIndirectionPass(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  MetalModulePass::MetalModulePass((uint64_t)v2, (uint64_t)&MTLICBIndirectionPass::ID, a1);
  *v2 = &off_25111EA28;
  return v2;
}

void sub_240FD2B70(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x24268D8F0](v1, 0x10E1C40C8265ECALL);
  _Unwind_Resume(a1);
}

void MTLICBIndirectionPass::~MTLICBIndirectionPass(MTLICBIndirectionPass *this)
{
  char *v2;

  *(_QWORD *)this = &off_25111E050;
  v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
}

{
  char *v2;

  *(_QWORD *)this = &off_25111E050;
  v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x24268D8F0);
}

uint64_t MTLICBIndirectionPass::runOnModule(MTLICBIndirectionPass *this, llvm::Module *a2)
{
  llvm::GlobalValue **v4;
  llvm::GlobalValue **v5;
  _DWORD *Name;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  void (*v12)(uint64_t, llvm::Instruction *);
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  BOOL v27;
  BOOL v28;
  BOOL v35;
  llvm::Instruction **v40;
  uint64_t v41;
  llvm::Instruction *v42;
  void *v44;
  unsigned int v45;
  uint64_t v46;
  void *v47;
  unsigned int v48;
  _QWORD v49[9];

  v49[8] = *MEMORY[0x24BDAC8D0];
  MetalModulePass::runOnModule(this, a2);
  llvm::SmallVector<std::reference_wrapper<llvm::Function>,8u>::SmallVector<llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,void>(&v47, *((_QWORD *)a2 + 4), (uint64_t)a2 + 24);
  v4 = (llvm::GlobalValue **)v47;
  if (v48)
  {
    v5 = (llvm::GlobalValue **)((char *)v47 + 8 * v48);
    while (1)
    {
      if ((llvm::GlobalValue::isDeclaration(*v4) & 1) == 0)
        goto LABEL_139;
      Name = (_DWORD *)llvm::Value::getName(*v4);
      if (v7 < 4 || *Name != 779250017)
        goto LABEL_139;
      v8 = (_QWORD *)llvm::Value::getName(*v4);
      v10 = v8;
      v11 = v9;
      if (v9 >= 0x25)
        break;
      if (v9 == 36)
      {
        if (!memcmp(v8, "air.set_vertex_buffer_render_command", 0x24uLL))
          goto LABEL_19;
LABEL_25:
        if (*v10 == 0x776172642E726961
          && v10[1] == 0x736568637461705FLL
          && v10[2] == 0x5F7265646E65725FLL
          && v10[3] == 0x2E646E616D6D6F63)
        {
          goto LABEL_129;
        }
        v20 = *v10 == 0x5F7465672E726961 && v10[1] == 0x6D6F635F657A6973;
        v21 = v20 && v10[2] == 0x6675625F646E616DLL;
        v22 = v21 && *(_QWORD *)((char *)v10 + 19) == 0x7265666675625F64;
        if (v22 || v11 >= 0x25 && !memcmp(v10, "air.set_pipeline_state_render_command", 0x25uLL))
          goto LABEL_129;
        goto LABEL_58;
      }
      if (v9 >= 0x20)
        goto LABEL_25;
      if (v9 >= 0x1B)
      {
        if (*v8 == 0x5F7465672E726961
          && v8[1] == 0x6D6F635F657A6973
          && v8[2] == 0x6675625F646E616DLL
          && *(_QWORD *)((char *)v8 + 19) == 0x7265666675625F64)
        {
LABEL_129:
          v12 = (void (*)(uint64_t, llvm::Instruction *))MTLICBIndirectionPass::replaceICB;
          goto LABEL_130;
        }
      }
      else if (v9 < 0x18)
      {
        if (v9 != 23)
          goto LABEL_139;
        v13 = v8[1];
        v14 = *(_QWORD *)((char *)v8 + 15);
        v15 = *v8 == 0x79706F632E726961;
        v16 = 0x5F7265646E65725FLL;
        goto LABEL_77;
      }
LABEL_58:
      v27 = *v10 == 0x657365722E726961 && v10[1] == 0x7265646E65725F74 && v10[2] == 0x646E616D6D6F635FLL;
      if (v27 || v11 >= 0x22 && !memcmp(v10, "air.draw_primitives_render_command", 0x22uLL))
        goto LABEL_129;
      v28 = *v10 == 0x79706F632E726961 && v10[1] == 0x5F7265646E65725FLL;
      if (v28 && *(_QWORD *)((char *)v10 + 15) == 0x646E616D6D6F635FLL)
        goto LABEL_129;
      if (v11 >= 0x26)
      {
        if (!memcmp(v10, "air.set_pipeline_state_compute_command", 0x26uLL))
          goto LABEL_129;
      }
      else if (v11 < 0x19)
      {
        v13 = v10[1];
        v14 = v10[2];
        v15 = *v10 == 0x79706F632E726961;
        v16 = 0x657475706D6F635FLL;
LABEL_77:
        if (v15 && v13 == v16 && v14 == 0x646E616D6D6F635FLL)
          goto LABEL_129;
        goto LABEL_139;
      }
      if (*v10 == 0x657365722E726961
        && v10[1] == 0x7475706D6F635F74
        && v10[2] == 0x6E616D6D6F635F65
        && *((_BYTE *)v10 + 24) == 100)
      {
        goto LABEL_129;
      }
      v35 = *v10 == 0x79706F632E726961 && v10[1] == 0x657475706D6F635FLL;
      if (v35 && v10[2] == 0x646E616D6D6F635FLL)
        goto LABEL_129;
      if (v11 >= 0x31)
      {
        if (!memcmp(v10, "air.set_threadgroup_memory_length_compute_command", 0x31uLL))
          goto LABEL_129;
      }
      else if (v11 < 0x1F)
      {
        goto LABEL_139;
      }
      if (*v10 == 0x5F7465732E726961
        && v10[1] == 0x5F72656972726162
        && v10[2] == 0x5F657475706D6F63
        && *(_QWORD *)((char *)v10 + 23) == 0x646E616D6D6F635FLL)
      {
        goto LABEL_129;
      }
      if (v11 >= 0x21)
      {
        if (!memcmp(v10, "air.clear_barrier_compute_command", 0x21uLL))
          goto LABEL_129;
        if (v11 >= 0x34)
        {
          if (!memcmp(v10, "air.concurrent_dispatch_threadgroups_compute_command", 0x34uLL))
            goto LABEL_129;
        }
        else if (v11 < 0x2F)
        {
          if (v11 < 0x27)
            goto LABEL_139;
          goto LABEL_128;
        }
        if (!memcmp(v10, "air.concurrent_dispatch_threads_compute_command", 0x2FuLL))
          goto LABEL_129;
LABEL_128:
        if (!memcmp(v10, "air.set_stage_in_region_compute_command", 0x27uLL))
          goto LABEL_129;
      }
LABEL_139:
      if (++v4 == v5)
      {
        v4 = (llvm::GlobalValue **)v47;
        goto LABEL_141;
      }
    }
    if (!memcmp(v8, "air.set_kernel_buffer_compute_command", 0x25uLL)
      || !memcmp(v10, "air.set_vertex_buffer_render_command", 0x24uLL))
    {
LABEL_19:
      v12 = MTLICBIndirectionPass::replaceSetBufferWithStride;
LABEL_130:
      llvm::SmallVector<llvm::User *,4u>::SmallVector<llvm::Value::user_iterator_impl<llvm::User>,void>(&v44, *((_QWORD *)*v4 + 1), 0);
      v40 = (llvm::Instruction **)v44;
      if (v45)
      {
        v41 = 8 * v45;
        do
        {
          v42 = *v40;
          if (*v40 && *((_BYTE *)v42 + 16) == 84)
            v12((uint64_t)this, v42);
          ++v40;
          v41 -= 8;
        }
        while (v41);
        v40 = (llvm::Instruction **)v44;
      }
      if (v40 != (llvm::Instruction **)&v46)
        free(v40);
      goto LABEL_139;
    }
    if (v11 >= 0x26)
    {
      if (!memcmp(v10, "air.set_fragment_buffer_render_command", 0x26uLL))
      {
        v12 = MTLICBIndirectionPass::replaceSetBuffer;
        goto LABEL_130;
      }
      if (v11 >= 0x27)
      {
        if (!memcmp(v10, "air.draw_indexed_patches_render_command", 0x27uLL))
        {
          v12 = MTLICBIndirectionPass::replaceDrawIndexedPatches;
          goto LABEL_130;
        }
        if (v11 >= 0x2A && !memcmp(v10, "air.draw_indexed_primitives_render_command", 0x2AuLL))
          goto LABEL_129;
      }
    }
    goto LABEL_25;
  }
LABEL_141:
  if (v4 != v49)
    free(v4);
  return 0;
}

void sub_240FD32DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(exception_object);
}

void MTLICBIndirectionPass::replaceSetBufferWithStride(uint64_t a1, llvm::Instruction *this)
{
  uint64_t Module;
  llvm::Type *Context;
  uint64_t v6;
  void *Name;
  size_t v8;
  std::string *p_dst;
  int64_t size;
  std::string *v11;
  size_t v12;
  std::string::size_type v13;
  _BYTE *v14;
  void *v15;
  _BYTE *v16;
  llvm::LLVMContext *v17;
  uint64_t Function;
  uint64_t v19;
  uint64_t VoidTy;
  std::string __dst;

  Module = llvm::Instruction::getModule(this);
  Context = (llvm::Type *)llvm::Value::getContext(this);
  v6 = *((_QWORD *)this - 4);
  if (!v6 || *(_BYTE *)(v6 + 16) || *(_QWORD *)(v6 + 24) != *((_QWORD *)this + 9))
    v6 = 0;
  Name = (void *)llvm::Value::getName((llvm::Value *)v6);
  if (Name)
    std::string::basic_string[abi:ne180100](&__dst, Name, v8);
  else
    memset(&__dst, 0, sizeof(__dst));
  p_dst = &__dst;
  std::string::replace(&__dst, 0, 3uLL, "mtl");
  size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  v11 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    size = __dst.__r_.__value_.__l.__size_;
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  v12 = size - 4;
  if ((unint64_t)size >= 4)
  {
    v14 = (char *)p_dst + size;
    if (size >= 5)
    {
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v11 = &__dst;
      v15 = (char *)v11->__r_.__value_.__r.__words + 4;
      do
      {
        v16 = memchr(v15, 46, v12);
        if (!v16)
          break;
        if (*v16 == 46)
          goto LABEL_20;
        v15 = v16 + 1;
        v12 = v14 - (_BYTE *)v15;
      }
      while (v14 - (_BYTE *)v15 > 0);
    }
    v16 = v14;
LABEL_20:
    if (v16 == v14)
      v13 = -1;
    else
      v13 = v16 - (_BYTE *)p_dst;
  }
  else
  {
    v13 = -1;
  }
  std::string::erase(&__dst, v13, 0xFFFFFFFFFFFFFFFFLL);
  llvm::Instruction::getModule(this);
  Function = llvm::Module::getFunction();
  if (!Function)
  {
    VoidTy = llvm::Type::getVoidTy(Context, v17);
    v19 = llvm::PointerType::get();
    Function = getOrInsertFunction<std::string &,llvm::Type *,llvm::PointerType *,llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&>(Module, (uint64_t)&__dst, &VoidTy, &v19, (uint64_t *)(a1 + 80), (uint64_t *)(a1 + 72), (uint64_t *)(a1 + 72), (uint64_t *)(a1 + 80));
    llvm::Function::addFnAttr();
    llvm::GlobalValue::setLinkage(Function, 0);
    *(_WORD *)(Function + 18) = *(_WORD *)(Function + 18) & 0xC00F | *(_WORD *)(v6 + 18) & 0x3FF0;
  }
  MTLICBIndirectionPass::replaceFunctionCall(a1, this, Function);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_240FD3538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MTLICBIndirectionPass::replaceSetBuffer(uint64_t a1, llvm::Instruction *this)
{
  uint64_t Module;
  llvm::Type *Context;
  uint64_t v6;
  void *Name;
  size_t v8;
  std::string *p_dst;
  int64_t size;
  std::string *v11;
  size_t v12;
  std::string::size_type v13;
  _BYTE *v14;
  void *v15;
  _BYTE *v16;
  llvm::LLVMContext *v17;
  uint64_t Function;
  uint64_t v19;
  uint64_t VoidTy;
  std::string __dst;

  Module = llvm::Instruction::getModule(this);
  Context = (llvm::Type *)llvm::Value::getContext(this);
  v6 = *((_QWORD *)this - 4);
  if (!v6 || *(_BYTE *)(v6 + 16) || *(_QWORD *)(v6 + 24) != *((_QWORD *)this + 9))
    v6 = 0;
  Name = (void *)llvm::Value::getName((llvm::Value *)v6);
  if (Name)
    std::string::basic_string[abi:ne180100](&__dst, Name, v8);
  else
    memset(&__dst, 0, sizeof(__dst));
  p_dst = &__dst;
  std::string::replace(&__dst, 0, 3uLL, "mtl");
  size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  v11 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    size = __dst.__r_.__value_.__l.__size_;
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  v12 = size - 4;
  if ((unint64_t)size >= 4)
  {
    v14 = (char *)p_dst + size;
    if (size >= 5)
    {
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v11 = &__dst;
      v15 = (char *)v11->__r_.__value_.__r.__words + 4;
      do
      {
        v16 = memchr(v15, 46, v12);
        if (!v16)
          break;
        if (*v16 == 46)
          goto LABEL_20;
        v15 = v16 + 1;
        v12 = v14 - (_BYTE *)v15;
      }
      while (v14 - (_BYTE *)v15 > 0);
    }
    v16 = v14;
LABEL_20:
    if (v16 == v14)
      v13 = -1;
    else
      v13 = v16 - (_BYTE *)p_dst;
  }
  else
  {
    v13 = -1;
  }
  std::string::erase(&__dst, v13, 0xFFFFFFFFFFFFFFFFLL);
  llvm::Instruction::getModule(this);
  Function = llvm::Module::getFunction();
  if (!Function)
  {
    VoidTy = llvm::Type::getVoidTy(Context, v17);
    v19 = llvm::PointerType::get();
    Function = getOrInsertFunction<std::string &,llvm::Type *,llvm::PointerType *,llvm::Type *&,llvm::Type *&,llvm::Type *&>(Module, (uint64_t)&__dst, &VoidTy, &v19, (uint64_t *)(a1 + 80), (uint64_t *)(a1 + 72), (uint64_t *)(a1 + 80));
    llvm::Function::addFnAttr();
    llvm::GlobalValue::setLinkage(Function, 0);
    *(_WORD *)(Function + 18) = *(_WORD *)(Function + 18) & 0xC00F | *(_WORD *)(v6 + 18) & 0x3FF0;
  }
  MTLICBIndirectionPass::replaceFunctionCall(a1, this, Function);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_240FD3768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MTLICBIndirectionPass::replaceDrawIndexedPatches(uint64_t a1, llvm::Instruction *this)
{
  uint64_t Module;
  uint64_t v5;
  uint64_t v6;
  void *Name;
  size_t v8;
  uint64_t Function;
  uint64_t v10;
  std::string *p_dst;
  __int16 v12;
  std::string __dst;
  void *v14;
  _QWORD v15[7];

  v15[6] = *MEMORY[0x24BDAC8D0];
  Module = llvm::Instruction::getModule(this);
  v5 = *((_QWORD *)this - 4);
  if (!v5 || *(_BYTE *)(v5 + 16) || (v6 = *(_QWORD *)(v5 + 24), v6 != *((_QWORD *)this + 9)))
  {
    v5 = 0;
    v6 = MEMORY[0x18];
  }
  Name = (void *)llvm::Value::getName((llvm::Value *)v5);
  if (Name)
    std::string::basic_string[abi:ne180100](&__dst, Name, v8);
  else
    memset(&__dst, 0, sizeof(__dst));
  std::string::replace(&__dst, 0, 3uLL, "mtl");
  llvm::Instruction::getModule(this);
  Function = llvm::Module::getFunction();
  if (!Function)
  {
    llvm::SmallVector<llvm::Type *,6u>::SmallVector<llvm::Type * const*,void>(&v14, (_BYTE *)(*(_QWORD *)(v6 + 16) + 8), (_BYTE *)(*(_QWORD *)(v6 + 16) + 8 * *(unsigned int *)(v6 + 12)));
    *(_QWORD *)v14 = llvm::PointerType::get();
    *((_QWORD *)v14 + 6) = *(_QWORD *)(a1 + 72);
    v10 = llvm::FunctionType::get();
    v12 = 260;
    p_dst = &__dst;
    Function = llvm::Function::Create(v10, 0, (uint64_t)&p_dst, Module);
    *(_QWORD *)(Function + 112) = *(_QWORD *)(v5 + 112);
    *(_WORD *)(Function + 18) = *(_WORD *)(Function + 18) & 0xC00F | *(_WORD *)(v5 + 18) & 0x3FF0;
    if (v14 != v15)
      free(v14);
  }
  MTLICBIndirectionPass::replaceFunctionCall(a1, this, Function);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_240FD3968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t *a21,uint64_t a22,uint64_t a23)
{
  if (a21 != &a23)
    free(a21);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MTLICBIndirectionPass::replaceICB(int a1, llvm::Instruction *this)
{
  uint64_t Module;
  uint64_t v5;
  void *Name;
  size_t v7;
  uint64_t Function;
  uint64_t v9;
  std::string *p_dst;
  __int16 v11;
  std::string __dst;

  Module = llvm::Instruction::getModule(this);
  v5 = *((_QWORD *)this - 4);
  if (!v5 || *(_BYTE *)(v5 + 16) || *(_QWORD *)(v5 + 24) != *((_QWORD *)this + 9))
    v5 = 0;
  Name = (void *)llvm::Value::getName((llvm::Value *)v5);
  if (Name)
    std::string::basic_string[abi:ne180100](&__dst, Name, v7);
  else
    memset(&__dst, 0, sizeof(__dst));
  std::string::replace(&__dst, 0, 3uLL, "mtl");
  llvm::Instruction::getModule(this);
  Function = llvm::Module::getFunction();
  if (!Function)
  {
    v9 = *(_QWORD *)(v5 + 24);
    v11 = 260;
    p_dst = &__dst;
    Function = llvm::Function::Create(v9, 0, (uint64_t)&p_dst, Module);
    *(_QWORD *)(Function + 112) = *(_QWORD *)(v5 + 112);
    *(_WORD *)(Function + 18) = *(_WORD *)(Function + 18) & 0xC00F | *(_WORD *)(v5 + 18) & 0x3FF0;
  }
  MTLICBIndirectionPass::replaceFunctionCall(a1, this, Function);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_240FD3AF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t getOrInsertFunction<std::string &,llvm::Type *,llvm::PointerType *,llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  LODWORD(v8) = *(char *)(a2 + 23);
  v9 = (int)v8 < 0;
  v10 = *(_QWORD *)(a2 + 8);
  if ((int)v8 < 0)
    a2 = *(_QWORD *)a2;
  v8 = v8;
  if (v9)
    v8 = v10;
  llvm::Module::getOrInsertFunction<llvm::PointerType *,llvm::Type *,llvm::Type *,llvm::Type *,llvm::Type *>(a1, a2, v8, 0, *a3, *a4, *a5, *a6, *a7, *a8);
  result = v11;
  if (*(_BYTE *)(v11 + 16) == 5)
    return *(_QWORD *)(v11 - 32 * (*(_DWORD *)(v11 + 20) & 0x7FFFFFF));
  return result;
}

void MTLICBIndirectionPass::replaceFunctionCall(int a1, llvm::CallBase *this, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  llvm::Instruction *PointerCast;
  llvm::Instruction *v10;
  llvm::Instruction *v11;
  char *v12[4];
  __int16 v13;
  void *v14;
  unsigned int v15;
  _QWORD v16[5];

  v16[4] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a3 + 24);
  v12[0] = (char *)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF);
  v12[1] = (char *)llvm::CallBase::arg_end(this);
  llvm::SmallVector<llvm::Value *,4u>::SmallVector<llvm::Use *>(&v14, v12);
  if (v15)
  {
    v5 = 0;
    do
    {
      v6 = v14;
      v7 = *((_QWORD *)v14 + v5);
      v8 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 8 * v5 + 8);
      if (*(_QWORD *)v7 != v8)
      {
        if (*(_BYTE *)(*(_QWORD *)v7 + 8) == 15 || *(_BYTE *)(v8 + 8) == 15)
        {
          v13 = 257;
          PointerCast = (llvm::Instruction *)llvm::CastInst::CreatePointerCast();
          llvm::Instruction::insertBefore(PointerCast, this);
        }
        else
        {
          PointerCast = (llvm::Instruction *)llvm::UndefValue::get();
        }
        v6[v5] = PointerCast;
      }
      ++v5;
    }
    while (v15 > v5);
  }
  v13 = 257;
  v10 = (llvm::Instruction *)llvm::CallInst::Create();
  llvm::ReplaceInstWithInst(this, v10, v11);
  if (v14 != v16)
    free(v14);
}

void sub_240FD3D10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t a15, uint64_t a16)
{
  if (a14 != &a16)
    free(a14);
  _Unwind_Resume(exception_object);
}

uint64_t llvm::Module::getOrInsertFunction<llvm::PointerType *,llvm::Type *,llvm::Type *,llvm::Type *,llvm::Type *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t inserted;
  _QWORD v12[5];
  void *v13;
  _QWORD v14[6];

  v14[5] = *MEMORY[0x24BDAC8D0];
  v12[0] = a6;
  v12[1] = a7;
  v12[2] = a8;
  v12[3] = a9;
  v12[4] = a10;
  llvm::SmallVector<llvm::Type *,5u>::SmallVector(&v13, v12, 5);
  llvm::FunctionType::get();
  inserted = llvm::Module::getOrInsertFunction();
  if (v13 != v14)
    free(v13);
  return inserted;
}

void sub_240FD3E30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(exception_object);
}

_QWORD *llvm::SmallVector<llvm::Type *,5u>::SmallVector(_QWORD *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = a1 + 2;
  a1[1] = 0x500000000;
  llvm::SmallVectorImpl<llvm::Metadata *>::append<llvm::Metadata * const*,void>((uint64_t)a1, a2, &a2[8 * a3]);
  return a1;
}

void sub_240FD3E98(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  void *v3;

  v3 = v2;
  if (*v1 != v3)
    free(*v1);
  _Unwind_Resume(exception_object);
}

_QWORD *llvm::SmallVector<llvm::Value *,4u>::SmallVector<llvm::Use *>(_QWORD *a1, char **a2)
{
  *a1 = a1 + 2;
  a1[1] = 0x400000000;
  llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((uint64_t)a1, *a2, a2[1]);
  return a1;
}

void sub_240FD3EF8(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  void *v3;

  v3 = v2;
  if (*v1 != v3)
    free(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t llvm::CallInst::Create()
{
  uint64_t v0;

  v0 = llvm::User::operator new((llvm::User *)0x50);
  llvm::Instruction::Instruction();
  *(_QWORD *)(v0 + 64) = 0;
  llvm::CallInst::init();
  return v0;
}

void sub_240FD3FC0(_Unwind_Exception *a1)
{
  llvm::Instruction *v1;

  llvm::Instruction::~Instruction(v1);
  llvm::User::operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t getOrInsertFunction<std::string &,llvm::Type *,llvm::PointerType *,llvm::Type *&,llvm::Type *&,llvm::Type *&>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  LODWORD(v7) = *(char *)(a2 + 23);
  v8 = (int)v7 < 0;
  v9 = *(_QWORD *)(a2 + 8);
  if ((int)v7 < 0)
    a2 = *(_QWORD *)a2;
  v7 = v7;
  if (v8)
    v7 = v9;
  llvm::Module::getOrInsertFunction<llvm::PointerType *,llvm::Type *,llvm::Type *,llvm::Type *>(a1, a2, v7, 0, *a3, *a4, *a5, *a6, *a7);
  result = v10;
  if (*(_BYTE *)(v10 + 16) == 5)
    return *(_QWORD *)(v10 - 32 * (*(_DWORD *)(v10 + 20) & 0x7FFFFFF));
  return result;
}

uint64_t llvm::Module::getOrInsertFunction<llvm::PointerType *,llvm::Type *,llvm::Type *,llvm::Type *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t inserted;
  _QWORD v11[4];
  void *v12;
  _QWORD v13[5];

  v13[4] = *MEMORY[0x24BDAC8D0];
  v11[0] = a6;
  v11[1] = a7;
  v11[2] = a8;
  v11[3] = a9;
  llvm::SmallVector<llvm::Type *,4u>::SmallVector(&v12, v11, 4);
  llvm::FunctionType::get();
  inserted = llvm::Module::getOrInsertFunction();
  if (v12 != v13)
    free(v12);
  return inserted;
}

void sub_240FD4144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(exception_object);
}

_QWORD *llvm::SmallVector<llvm::Type *,4u>::SmallVector(_QWORD *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = a1 + 2;
  a1[1] = 0x400000000;
  llvm::SmallVectorImpl<llvm::Metadata *>::append<llvm::Metadata * const*,void>((uint64_t)a1, a2, &a2[8 * a3]);
  return a1;
}

void sub_240FD41AC(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  void *v3;

  v3 = v2;
  if (*v1 != v3)
    free(*v1);
  _Unwind_Resume(exception_object);
}

_QWORD *llvm::SmallVector<llvm::Type *,6u>::SmallVector<llvm::Type * const*,void>(_QWORD *a1, _BYTE *a2, _BYTE *a3)
{
  *a1 = a1 + 2;
  a1[1] = 0x600000000;
  llvm::SmallVectorImpl<llvm::Metadata *>::append<llvm::Metadata * const*,void>((uint64_t)a1, a2, a3);
  return a1;
}

void sub_240FD4204(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  void *v3;

  v3 = v2;
  if (*v1 != v3)
    free(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t MTLMDBuilder::getMetadata(llvm::MDString **this, llvm::LLVMContext *a2, const char *a3)
{
  return llvm::MDString::get(*this, a2, a3);
}

uint64_t MTLMDBuilder::getMetadata()
{
  return llvm::MDString::get();
}

{
  llvm::TypeSize::operator unsigned long long();
  return MTLMDBuilder::getMetadata<unsigned long long>();
}

void MTLBoundsCheck::SharedPassData::skipIndirectionDeep(MTLBoundsCheck::SharedPassData *this, llvm::Value *a2)
{
  unsigned int i;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  unsigned int v11;
  uint64_t v12;
  llvm::Value *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _QWORD v20[5];

  v20[4] = *MEMORY[0x24BDAC8D0];
  v13 = a2;
  v18 = v20;
  v19 = 0x400000000;
  llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)&v18, (uint64_t *)&v13);
  for (i = v19; (_DWORD)v19; i = v19)
  {
    v12 = 0;
    v4 = *((_QWORD *)v18 + i - 1);
    LODWORD(v19) = i - 1;
    v12 = v4;
    v14 = 0;
    v15 = v4;
    if ((llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>,llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::LookupBucketFor<llvm::Value *>((uint64_t *)this + 26, &v15, &v14) & 1) == 0)
    {
      llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>,llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)this + 208, &v12, (uint64_t)&v15);
      v5 = v12;
      v6 = *(unsigned __int8 *)(v12 + 16);
      if (v12 && v6 >= 0x1C)
      {
        v15 = **((_QWORD **)this + 29);
        v16 = &v18;
        v17 = 0;
        llvm::MDTuple::getImpl();
        llvm::Instruction::setMetadata();
        llvm::MDTuple::getImpl();
        llvm::Instruction::setMetadata();
        if (v16 != &v18)
          free(v16);
        v5 = v12;
        v6 = *(unsigned __int8 *)(v12 + 16);
      }
      if (v6 < 0x1C)
      {
        if (v6 != 3)
        {
          if (v6 != 5)
            continue;
          v7 = *(unsigned __int16 *)(v5 + 18);
          v8 = v7 > 0x31;
          v9 = (1 << v7) & 0x3800500000000;
          if (v8 || v9 == 0)
            continue;
        }
        goto LABEL_19;
      }
      v11 = v6 - 60;
      if (v11 <= 0x11)
      {
        if (((1 << v11) & 0x38005) == 0)
        {
          if (v11 == 1)
          {
            v15 = *(_QWORD *)(v5 - 32);
            llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)&v18, &v15);
          }
          continue;
        }
LABEL_19:
        llvm::SmallVectorImpl<llvm::User *>::insert<llvm::Value::user_iterator_impl<llvm::User>,void>((uint64_t)&v18, (uint64_t)v18 + 8 * v19, *(_QWORD *)(v5 + 8), 0);
      }
    }
  }
  if (v18 != v20)
    free(v18);
}

void sub_240FD44C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16)
{
  void *v16;

  if (a16 != v16)
    free(a16);
  _Unwind_Resume(exception_object);
}

const llvm::Twine *MTLBoundsCheck::SharedPassData::getOrInsertGetImageIDFunction(MTLBoundsCheck::SharedPassData *this)
{
  llvm::LLVMContext *v2;
  const llvm::Twine *Function;
  llvm::Type **v4;
  llvm::Constant *Int64Ty;
  uint64_t v6;
  llvm::BasicBlock *v7;
  llvm::BasicBlock *v8;
  llvm::BasicBlock *v9;
  llvm::ReturnInst *Context;
  llvm::Module *v11;
  uint64_t v12;
  llvm::Type *v13;
  llvm::Type *v14;
  llvm::LLVMContext *AlignedLoad;
  llvm::Instruction *v16;
  uint64_t v17;
  llvm::Value *inserted;
  llvm::Type *v19;
  llvm::Value *v20;
  char *v21;
  char *Name;
  size_t v23;
  llvm::Type *GVBaseType;
  uint64_t ConstGEP1_64;
  llvm::Type *v26;
  llvm::LLVMContext *v27;
  llvm::Instruction *v28;
  uint64_t v29;
  _QWORD v31[4];
  __int16 v32;
  llvm::MDString *v33;
  void *v34;
  uint64_t v35;
  _BYTE v36[7];
  _QWORD v37[4];
  __int16 v38;
  void *v39[2];
  _BYTE v40[16];
  __int16 v41;
  llvm::BasicBlock *v42;
  char *v43;
  llvm::ReturnInst *v44;
  uint64_t *v45;
  _QWORD *v46;
  uint64_t v47;
  int v48;
  __int16 v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[2];

  v54[1] = *MEMORY[0x24BDAC8D0];
  Function = (const llvm::Twine *)llvm::Module::getFunction();
  if (!Function)
  {
    v4 = (llvm::Type **)*((_QWORD *)this + 29);
    v33 = *v4;
    v34 = v36;
    v35 = 0;
    Int64Ty = (llvm::Constant *)llvm::Type::getInt64Ty(*v4, v2);
    v6 = llvm::FunctionType::get();
    v39[0] = "mtl.get_image_id";
    v41 = 259;
    Function = (const llvm::Twine *)llvm::Function::Create(v6, 7, (uint64_t)v39, *((_QWORD *)this + 29));
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
    v7 = (llvm::BasicBlock *)**((_QWORD **)this + 29);
    v41 = 257;
    v9 = (llvm::BasicBlock *)llvm::BasicBlock::Create(v7, (llvm::LLVMContext *)v39, Function, 0, v8);
    Context = (llvm::ReturnInst *)llvm::BasicBlock::getContext(v9);
    v39[0] = v40;
    v39[1] = (void *)0x200000000;
    v44 = Context;
    v45 = &v53;
    v46 = v54;
    v47 = 0;
    v48 = 0;
    v49 = 512;
    v50 = 7;
    v51 = 0;
    v52 = 0;
    v53 = MEMORY[0x24BED83B8] + 16;
    v54[0] = MEMORY[0x24BED83F0] + 16;
    v42 = v9;
    v43 = (char *)v9 + 40;
    if ((*(_BYTE *)(*((_QWORD *)this + 9) + 23) & 0x40) != 0
      && MTLBoundsCheck::isLibraryModule(*((MTLBoundsCheck **)this + 29), v11))
    {
      v12 = llvm::User::operator new((llvm::User *)0x58);
      llvm::Constant::getNullValue(Int64Ty, v13);
      v37[0] = "mtl.current_image_id";
      v38 = 259;
      llvm::GlobalVariable::GlobalVariable();
      llvm::GlobalObject::setAlignment();
      llvm::GlobalValue::setVisibility(v12, 1);
      llvm::Module::getOrInsertNamedMetadata();
      MTLMDBuilder::getMDTuple<char const*,llvm::GlobalVariable *,char const*,char const*>(&v33, (llvm::LLVMContext *)"air.externally_initialized", (const char *)v12, (llvm::LLVMContext *)"uint64_t", (llvm::LLVMContext *)"mtl.current_image_id");
      llvm::NamedMDNode::addOperand();
      v14 = *(llvm::Type **)(v12 + 24);
      v32 = 257;
      AlignedLoad = (llvm::LLVMContext *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v39, v14, v12, 259, 0, (uint64_t)v31);
      v17 = llvm::ReturnInst::Create(v44, AlignedLoad, 0, v16);
      v38 = 257;
      llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)v39, v17, (uint64_t)v37);
    }
    else
    {
      inserted = (llvm::Value *)MTLBoundsCheck::SharedPassData::getOrInsertDrawIDBufferGV(this);
      v19 = (llvm::Type *)*((_QWORD *)inserted + 3);
      v38 = 257;
      v20 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v39, v19, (uint64_t)inserted, 259, 0, (uint64_t)v37);
      v21 = (char *)this + 208;
      v31[0] = v20;
      llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>,llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)this + 208, v31, (uint64_t)v37);
      Name = (char *)llvm::Value::getName(inserted);
      GVBaseType = (llvm::Type *)MTLBoundsCheck::SharedPassData::getGVBaseType((uint64_t)this, Name, v23);
      v38 = 257;
      ConstGEP1_64 = llvm::IRBuilderBase::CreateConstGEP1_64((llvm::Type **)v39, GVBaseType, v20, 1uLL, (const llvm::Twine *)v37);
      v31[0] = ConstGEP1_64;
      llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>,llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v21, v31, (uint64_t)v37);
      v26 = *(llvm::Type **)(ConstGEP1_64 + 72);
      v32 = 257;
      v27 = (llvm::LLVMContext *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v39, v26, ConstGEP1_64, 259, 0, (uint64_t)v31);
      v29 = llvm::ReturnInst::Create(v44, v27, 0, v28);
      v38 = 257;
      llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)v39, v29, (uint64_t)v37);
    }
    llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v54);
    llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v53);
    if (v39[0] != v40)
      free(v39[0]);
    if (v34 != v36)
      free(v34);
  }
  return Function;
}

void sub_240FD495C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  _DWORD *v27;
  void *v28;

  v27[5] = v27[5] & 0xF8000000 | 1;
  llvm::User::operator delete(v27);
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder(&a27);
  if (a19 != v28)
    free(a19);
  _Unwind_Resume(a1);
}

uint64_t llvm::GlobalValue::setVisibility(uint64_t this, char a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;

  v2 = this;
  v3 = *(_DWORD *)(this + 32) & 0xF;
  v4 = *(_DWORD *)(this + 32) & 0xFFFFFFCF | (16 * (a2 & 3));
  *(_DWORD *)(this + 32) = v4;
  if ((v3 - 7) < 2)
    goto LABEL_5;
  if (16 * (a2 & 3))
  {
    this = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)this);
    if ((this & 1) == 0)
    {
      v4 = *(_DWORD *)(v2 + 32);
LABEL_5:
      *(_DWORD *)(v2 + 32) = v4 | 0x4000;
    }
  }
  return this;
}

uint64_t MTLMDBuilder::getMDTuple<char const*,llvm::GlobalVariable *,char const*,char const*>(llvm::MDString **a1, llvm::LLVMContext *a2, const char *a3, llvm::LLVMContext *a4, llvm::LLVMContext *a5)
{
  const char *v8;
  const char *v9;

  llvm::MDString::get(*a1, a2, a3);
  llvm::ValueAsMetadata::get();
  llvm::MDString::get(*a1, a4, v8);
  llvm::MDString::get(*a1, a5, v9);
  return llvm::MDTuple::getImpl();
}

uint64_t MTLBoundsCheck::SharedPassData::getOrInsertDrawIDBufferGV(MTLBoundsCheck::SharedPassData *this)
{
  uint64_t GlobalVariable;
  uint64_t v4;
  llvm::MDString *v5;
  void *v6;
  uint64_t v7;
  _BYTE v8[7];
  _QWORD v9[4];

  v9[3] = *MEMORY[0x24BDAC8D0];
  GlobalVariable = llvm::Module::getGlobalVariable();
  if (!GlobalVariable)
  {
    MTLBoundsCheck::SharedPassData::getGVBaseType((uint64_t)this, "mtl.draw_id_buffer", 0x12uLL);
    llvm::PointerType::get();
    GlobalVariable = llvm::Module::getOrInsertGlobal();
    *(_DWORD *)(GlobalVariable + 32) = *(_DWORD *)(GlobalVariable + 32) & 0xFFFFA3C0 | 0x4408;
    llvm::UndefValue::get();
    llvm::GlobalVariable::setInitializer();
    v5 = (llvm::MDString *)**((_QWORD **)this + 29);
    v6 = v8;
    v7 = 0;
    v9[0] = MTLMDBuilder::getMDTuple<char const*,char const*,unsigned int,int,char const*,char const*,int,char const*,char const*,char const*,char const*>(&v5, (llvm::LLVMContext *)"air.buffer", "air.location_index", 33, 1, (llvm::LLVMContext *)"air.read", (llvm::LLVMContext *)"air.address_space", 2, (llvm::LLVMContext *)"air.arg_type_name", (llvm::LLVMContext *)"void", (llvm::LLVMContext *)"air.arg_name", (llvm::LLVMContext *)"debug.draw_id_buffer");
    v9[1] = llvm::MDString::get();
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
    v4 = GlobalVariable;
    llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>,llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)this + 208, &v4, (uint64_t)v9);
    if (v6 != v8)
      free(v6);
  }
  return GlobalVariable;
}

void sub_240FD4CCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;

  if (a16 != v16)
    free(a16);
  _Unwind_Resume(exception_object);
}

uint64_t MTLBoundsCheck::SharedPassData::getGVBaseType(uint64_t a1, char *__s1, size_t a3)
{
  llvm::LLVMContext *v4;
  llvm::Type *v5;
  uint64_t result;
  llvm::LLVMContext *v7;
  llvm::ArrayType *Int64Ty;
  const char *v9;
  llvm::LLVMContext *v10;

  switch(a3)
  {
    case 0x10uLL:
      if (memcmp(__s1, "mtl.check_buffer", a3))
        goto LABEL_25;
      v5 = **(llvm::Type ***)(a1 + 232);
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 21) & 0x20) == 0)
        return llvm::Type::getInt64Ty(v5, v4);
      return llvm::Type::getInt32Ty(v5, v4);
    case 0x11uLL:
      if (memcmp(__s1, "mtl.binding_table", a3))
        goto LABEL_25;
      Int64Ty = (llvm::ArrayType *)llvm::Type::getInt64Ty(**(llvm::Type ***)(a1 + 232), v7);
      return llvm::ArrayType::get(Int64Ty, (llvm::Type *)0x1F);
    case 0x12uLL:
      if (memcmp(__s1, "mtl.draw_id_buffer", a3))
        goto LABEL_25;
      v5 = **(llvm::Type ***)(a1 + 232);
      return llvm::Type::getInt64Ty(v5, v4);
    case 0x14uLL:
      v9 = "mtl.threadgroup_base";
      goto LABEL_24;
    case 0x15uLL:
      if (memcmp(__s1, "mtl.threadgroup_table", a3))
        goto LABEL_25;
      llvm::Type::getInt32Ty(**(llvm::Type ***)(a1 + 232), v10);
      return llvm::StructType::get();
    case 0x16uLL:
      v9 = "mtl.buffer_usage_table";
      goto LABEL_24;
    case 0x17uLL:
      if (*(_QWORD *)__s1 != 0x747865742E6C746DLL
        || *((_QWORD *)__s1 + 1) != 0x676173755F657275
        || *(_QWORD *)(__s1 + 15) != 0x656C6261745F6567)
      {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 0x1AuLL:
      v9 = "mtl.global_constants_table";
LABEL_24:
      if (memcmp(__s1, v9, a3))
        goto LABEL_25;
LABEL_22:
      result = llvm::Type::getInt8Ty(**(llvm::Type ***)(a1 + 232), (llvm::LLVMContext *)__s1);
      break;
    default:
LABEL_25:
      llvm::IntegerType::get();
      llvm::IntegerType::get();
      llvm::PointerType::get();
      result = llvm::StructType::get();
      break;
  }
  return result;
}

uint64_t MTLBoundsCheck::SharedPassData::getOrInsertBufferUsageTableGV(MTLBoundsCheck::SharedPassData *this)
{
  uint64_t GlobalVariable;
  uint64_t v4;
  llvm::MDString *v5;
  void *v6;
  uint64_t v7;
  _BYTE v8[7];
  _QWORD v9[4];

  v9[3] = *MEMORY[0x24BDAC8D0];
  GlobalVariable = llvm::Module::getGlobalVariable();
  if (!GlobalVariable)
  {
    MTLBoundsCheck::SharedPassData::getGVBaseType((uint64_t)this, "mtl.buffer_usage_table", 0x16uLL);
    llvm::PointerType::get();
    GlobalVariable = llvm::Module::getOrInsertGlobal();
    *(_DWORD *)(GlobalVariable + 32) = *(_DWORD *)(GlobalVariable + 32) & 0xFFFFA3C0 | 0x4408;
    llvm::UndefValue::get();
    llvm::GlobalVariable::setInitializer();
    v5 = (llvm::MDString *)**((_QWORD **)this + 29);
    v6 = v8;
    v7 = 0;
    v9[0] = MTLMDBuilder::getMDTuple<char const*,char const*,unsigned int,int,char const*,char const*,int,char const*,char const*,char const*,char const*>(&v5, (llvm::LLVMContext *)"air.buffer", "air.location_index", 35, 1, (llvm::LLVMContext *)"air.read", (llvm::LLVMContext *)"air.address_space", 2, (llvm::LLVMContext *)"air.arg_type_name", (llvm::LLVMContext *)"void", (llvm::LLVMContext *)"air.arg_name", (llvm::LLVMContext *)"debug.buffer_usage_table");
    v9[1] = llvm::MDString::get();
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
    v4 = GlobalVariable;
    llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>,llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)this + 208, &v4, (uint64_t)v9);
    if (v6 != v8)
      free(v6);
  }
  return GlobalVariable;
}

void sub_240FD515C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;

  if (a16 != v16)
    free(a16);
  _Unwind_Resume(exception_object);
}

uint64_t MTLMDBuilder::getMDTuple<char const*,char const*,unsigned int,int,char const*,char const*,int,char const*,char const*,char const*,char const*>(llvm::MDString **a1, llvm::LLVMContext *a2, char *a3, uint64_t a4, uint64_t a5, llvm::LLVMContext *a6, llvm::LLVMContext *a7, uint64_t a8, llvm::LLVMContext *a9, llvm::LLVMContext *a10, llvm::LLVMContext *a11, llvm::LLVMContext *a12)
{
  const char *v16;
  const char *v17;
  const char *v18;
  const char *v19;
  const char *v20;
  const char *v21;
  const char *v22;

  llvm::MDString::get(*a1, a2, a3);
  llvm::MDString::get(*a1, (llvm::LLVMContext *)a3, v16);
  MTLMDBuilder::getMetadata<unsigned int>();
  MTLMDBuilder::getMetadata<int>();
  llvm::MDString::get(*a1, a6, v17);
  llvm::MDString::get(*a1, a7, v18);
  MTLMDBuilder::getMetadata<int>();
  llvm::MDString::get(*a1, a9, v19);
  llvm::MDString::get(*a1, a10, v20);
  llvm::MDString::get(*a1, a11, v21);
  llvm::MDString::get(*a1, a12, v22);
  return llvm::MDTuple::getImpl();
}

uint64_t MTLBoundsCheck::SharedPassData::getOrInsertTextureUsageTableGV(MTLBoundsCheck::SharedPassData *this)
{
  uint64_t GlobalVariable;
  uint64_t v4;
  llvm::MDString *v5;
  void *v6;
  uint64_t v7;
  _BYTE v8[7];
  _QWORD v9[4];

  v9[3] = *MEMORY[0x24BDAC8D0];
  GlobalVariable = llvm::Module::getGlobalVariable();
  if (!GlobalVariable)
  {
    MTLBoundsCheck::SharedPassData::getGVBaseType((uint64_t)this, "mtl.texture_usage_table", 0x17uLL);
    llvm::PointerType::get();
    GlobalVariable = llvm::Module::getOrInsertGlobal();
    *(_DWORD *)(GlobalVariable + 32) = *(_DWORD *)(GlobalVariable + 32) & 0xFFFFA3C0 | 0x4408;
    llvm::UndefValue::get();
    llvm::GlobalVariable::setInitializer();
    v5 = (llvm::MDString *)**((_QWORD **)this + 29);
    v6 = v8;
    v7 = 0;
    v9[0] = MTLMDBuilder::getMDTuple<char const*,char const*,unsigned int,int,char const*,char const*,int,char const*,char const*,char const*,char const*>(&v5, (llvm::LLVMContext *)"air.buffer", "air.location_index", 36, 1, (llvm::LLVMContext *)"air.read", (llvm::LLVMContext *)"air.address_space", 2, (llvm::LLVMContext *)"air.arg_type_name", (llvm::LLVMContext *)"void", (llvm::LLVMContext *)"air.arg_name", (llvm::LLVMContext *)"debug.texture_usage_table");
    v9[1] = llvm::MDString::get();
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
    v4 = GlobalVariable;
    llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>,llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)this + 208, &v4, (uint64_t)v9);
    if (v6 != v8)
      free(v6);
  }
  return GlobalVariable;
}

void sub_240FD54B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;

  if (a16 != v16)
    free(a16);
  _Unwind_Resume(exception_object);
}

uint64_t MTLBoundsCheck::SharedPassData::getOrInsertGlobalConstantsTableGV(MTLBoundsCheck::SharedPassData *this)
{
  uint64_t GlobalVariable;
  llvm::Module *v3;
  const llvm::DataLayout *DataLayout;
  llvm::Module *v5;
  llvm::Type *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t PrefTypeAlignment;
  uint64_t v13;
  llvm::MDString *v14;
  void *v15;
  uint64_t v16;
  _BYTE v17[7];
  _QWORD v18[4];
  __int16 v19;
  _BYTE v20[432];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  GlobalVariable = llvm::Module::getGlobalVariable();
  if (!GlobalVariable)
  {
    v3 = (llvm::Module *)*((_QWORD *)this + 29);
    v14 = *(llvm::MDString **)v3;
    v15 = v17;
    v16 = 0;
    DataLayout = (const llvm::DataLayout *)llvm::Module::getDataLayout(v3);
    llvm::DataLayout::DataLayout((llvm::DataLayout *)v20, DataLayout);
    MTLBoundsCheck::SharedPassData::getGVBaseType((uint64_t)this, "mtl.global_constants_table", 0x1AuLL);
    v6 = (llvm::Type *)llvm::PointerType::get();
    if ((*(_BYTE *)(*((_QWORD *)this + 9) + 23) & 0x40) != 0
      && MTLBoundsCheck::isLibraryModule(*((MTLBoundsCheck **)this + 29), v5))
    {
      GlobalVariable = llvm::User::operator new((llvm::User *)0x58);
      llvm::UndefValue::get();
      v18[0] = "mtl.global_constants_table";
      v19 = 259;
      llvm::GlobalVariable::GlobalVariable();
      llvm::GlobalObject::setAlignment();
      llvm::GlobalValue::setVisibility(GlobalVariable, 1);
      llvm::Module::getOrInsertNamedMetadata();
      MTLMDBuilder::getMDTuple<char const*,llvm::GlobalVariable *,char const*,char const*>(&v14, (llvm::LLVMContext *)"air.externally_initialized", (const char *)GlobalVariable, (llvm::LLVMContext *)"device uint64_t *", (llvm::LLVMContext *)"mtl.global_constants_table");
      llvm::NamedMDNode::addOperand();
    }
    else
    {
      GlobalVariable = llvm::Module::getOrInsertGlobal();
      llvm::UndefValue::get();
      llvm::GlobalVariable::setInitializer();
      llvm::GlobalObject::setAlignment();
      *(_DWORD *)(GlobalVariable + 32) = *(_DWORD *)(GlobalVariable + 32) & 0xFFFFA3C0 | 0x4408;
      llvm::DataLayout::getTypeSizeInBits((uint64_t)v20, (uint64_t)v6);
      v8 = v7;
      v10 = v9;
      PrefTypeAlignment = llvm::DataLayout::getPrefTypeAlignment((llvm::DataLayout *)v20, v6);
      v18[0] = MTLMDBuilder::getMDTuple<char const*,char const*,unsigned int,int,char const*,char const*,int,char const*,llvm::TypeSize,char const*,unsigned long long,char const*,char const*,char const*,char const*>(&v14, (llvm::LLVMContext *)"air.buffer", "air.location_index", 42, 1, (llvm::LLVMContext *)"air.read", (llvm::LLVMContext *)"air.address_space", 2, (llvm::LLVMContext *)"air.arg_type_size", (unint64_t)(v8 + 7) >> 3, v10 == 1, (llvm::LLVMContext *)"air.arg_type_align_size", PrefTypeAlignment, (llvm::LLVMContext *)"air.arg_type_name", (llvm::LLVMContext *)"int", (llvm::LLVMContext *)"air.arg_name", (llvm::LLVMContext *)"debug.global_constants_table");
      v18[1] = llvm::MDString::get();
      llvm::MDTuple::getImpl();
      llvm::Value::setMetadata();
    }
    v13 = GlobalVariable;
    llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>,llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)this + 208, &v13, (uint64_t)v18);
    MEMORY[0x24268C8C4](v20);
    if (v15 != v17)
      free(v15);
  }
  return GlobalVariable;
}

void sub_240FD5800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _DWORD *v28;
  void *v29;

  v28[5] = v28[5] & 0xF8000000 | 1;
  llvm::User::operator delete(v28);
  MEMORY[0x24268C8C4](&a28);
  if (a20 != v29)
    free(a20);
  _Unwind_Resume(a1);
}

uint64_t MTLMDBuilder::getMDTuple<char const*,char const*,unsigned int,int,char const*,char const*,int,char const*,llvm::TypeSize,char const*,unsigned long long,char const*,char const*,char const*,char const*>(llvm::MDString **a1, llvm::LLVMContext *a2, char *a3, uint64_t a4, uint64_t a5, llvm::LLVMContext *a6, llvm::LLVMContext *a7, uint64_t a8, llvm::LLVMContext *a9, uint64_t a10, uint64_t a11, llvm::LLVMContext *a12, uint64_t a13, llvm::LLVMContext *a14, llvm::LLVMContext *a15, llvm::LLVMContext *a16, llvm::LLVMContext *a17)
{
  const char *v21;
  const char *v22;
  const char *v23;
  const char *v24;
  const char *v25;
  const char *v26;
  const char *v27;
  const char *v28;
  const char *v29;

  llvm::MDString::get(*a1, a2, a3);
  llvm::MDString::get(*a1, (llvm::LLVMContext *)a3, v21);
  MTLMDBuilder::getMetadata<unsigned int>();
  MTLMDBuilder::getMetadata<int>();
  llvm::MDString::get(*a1, a6, v22);
  llvm::MDString::get(*a1, a7, v23);
  MTLMDBuilder::getMetadata<int>();
  llvm::MDString::get(*a1, a9, v24);
  llvm::TypeSize::operator unsigned long long();
  MTLMDBuilder::getMetadata<unsigned long long>();
  llvm::MDString::get(*a1, a12, v25);
  MTLMDBuilder::getMetadata<unsigned long long>();
  llvm::MDString::get(*a1, a14, v26);
  llvm::MDString::get(*a1, a15, v27);
  llvm::MDString::get(*a1, a16, v28);
  llvm::MDString::get(*a1, a17, v29);
  return llvm::MDTuple::getImpl();
}

uint64_t MTLBoundsCheck::SharedPassData::getOrInsertGlobalConstantsHandleGV(llvm::Module **this)
{
  uint64_t GlobalVariable;
  llvm::Constant *v3;
  const llvm::DataLayout *DataLayout;
  llvm::Module *v5;
  MTLBoundsCheck *v6;
  llvm::Type *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t PrefTypeAlignment;
  llvm::MDString *v14;
  void *v15;
  uint64_t v16;
  _QWORD v17[4];
  __int16 v18;
  _BYTE v19[432];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  GlobalVariable = llvm::Module::getGlobalVariable();
  if (!GlobalVariable)
  {
    v3 = (llvm::Constant *)llvm::IntegerType::get();
    DataLayout = (const llvm::DataLayout *)llvm::Module::getDataLayout(this[29]);
    llvm::DataLayout::DataLayout((llvm::DataLayout *)v19, DataLayout);
    v6 = this[29];
    v14 = *(llvm::MDString **)v6;
    v15 = v17;
    v16 = 0;
    if ((*((_BYTE *)this[9] + 23) & 0x40) != 0 && MTLBoundsCheck::isLibraryModule(v6, v5))
    {
      GlobalVariable = llvm::User::operator new((llvm::User *)0x58);
      llvm::Constant::getNullValue(v3, v7);
      v17[0] = "mtl.global_constants_handle";
      v18 = 259;
      llvm::GlobalVariable::GlobalVariable();
      llvm::GlobalObject::setAlignment();
      llvm::GlobalValue::setVisibility(GlobalVariable, 1);
      llvm::Module::getOrInsertNamedMetadata();
      MTLMDBuilder::getMDTuple<char const*,llvm::GlobalVariable *,char const*,char const*>(&v14, (llvm::LLVMContext *)"air.externally_initialized", (const char *)GlobalVariable, (llvm::LLVMContext *)"uint64_t", (llvm::LLVMContext *)"mtl.global_constants_handle");
      llvm::NamedMDNode::addOperand();
    }
    else
    {
      GlobalVariable = llvm::Module::getOrInsertGlobal();
      llvm::UndefValue::get();
      llvm::GlobalVariable::setInitializer();
      llvm::GlobalObject::setAlignment();
      *(_DWORD *)(GlobalVariable + 32) = *(_DWORD *)(GlobalVariable + 32) & 0xFFFFA3C0 | 0x4408;
      llvm::DataLayout::getTypeSizeInBits((uint64_t)v19, (uint64_t)v3);
      v9 = v8;
      v11 = v10;
      PrefTypeAlignment = llvm::DataLayout::getPrefTypeAlignment((llvm::DataLayout *)v19, v3);
      v17[0] = MTLMDBuilder::getMDTuple<char const*,char const*,unsigned int,int,char const*,char const*,int,char const*,llvm::TypeSize,char const*,unsigned long long,char const*,char const*,char const*,char const*>(&v14, (llvm::LLVMContext *)"air.buffer", "air.location_index", 42, 1, (llvm::LLVMContext *)"air.read", (llvm::LLVMContext *)"air.address_space", 1, (llvm::LLVMContext *)"air.arg_type_size", (unint64_t)(v9 + 7) >> 3, v11 == 1, (llvm::LLVMContext *)"air.arg_type_align_size", PrefTypeAlignment, (llvm::LLVMContext *)"air.arg_type_name", (llvm::LLVMContext *)"long", (llvm::LLVMContext *)"air.arg_name", (llvm::LLVMContext *)"debug.global_constants_table");
      v17[1] = llvm::MDString::get();
      llvm::MDTuple::getImpl();
      llvm::Value::setMetadata();
    }
    if (v15 != v17)
      free(v15);
    MEMORY[0x24268C8C4](v19);
  }
  return GlobalVariable;
}

void sub_240FD5D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _DWORD *v26;
  void *v27;

  v26[5] = v26[5] & 0xF8000000 | 1;
  llvm::User::operator delete(v26);
  if (a19 != v27)
    free(a19);
  MEMORY[0x24268C8C4](&a26);
  _Unwind_Resume(a1);
}

uint64_t MTLBoundsCheck::SharedPassData::getOrInsertDeviceIndirectionTableGV(MTLBoundsCheck::SharedPassData *this)
{
  uint64_t GlobalVariable;
  uint64_t Impl;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm::MDString *v10;
  void *v11;
  uint64_t v12;
  _BYTE v13[4];
  int v14;
  uint64_t v15;
  llvm::MDString *v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE v19[7];
  _QWORD v20[4];

  v20[3] = *MEMORY[0x24BDAC8D0];
  GlobalVariable = llvm::Module::getGlobalVariable();
  if (!GlobalVariable)
  {
    MTLBoundsCheck::SharedPassData::getGVBaseType((uint64_t)this, "mtl.device_indirection_table", 0x1CuLL);
    llvm::PointerType::get();
    GlobalVariable = llvm::Module::getOrInsertGlobal();
    *(_DWORD *)(GlobalVariable + 32) = *(_DWORD *)(GlobalVariable + 32) & 0xFFFFA3C0 | 0x4408;
    llvm::UndefValue::get();
    llvm::GlobalVariable::setInitializer();
    v16 = (llvm::MDString *)**((_QWORD **)this + 29);
    v17 = v19;
    v18 = 0;
    LODWORD(v5) = 1;
    v15 = MTLMDBuilder::getMDTuple<int,char const*,char const*,int,int,char const*,char const*,int,char const*,char const*,char const*,char const*>(&v16, 0, (llvm::LLVMContext *)"air.buffer", (llvm::LLVMContext *)"air.location_index", 0, 1, (llvm::LLVMContext *)"air.read_write", (llvm::LLVMContext *)"air.address_space", v5, (llvm::LLVMContext *)"air.arg_type_name", (llvm::LLVMContext *)"void", (llvm::LLVMContext *)"air.arg_name", (llvm::LLVMContext *)"debug.ptr");
    v14 = 0;
    v10 = (llvm::MDString *)**((_QWORD **)this + 29);
    v11 = v13;
    v12 = 0;
    LODWORD(v20[0]) = 8;
    LODWORD(v9) = 0;
    MTLMDBuilder::emplace_back<unsigned int &,unsigned int,int,char const(&)[5],char const(&)[10],char const(&)[22],llvm::MDTuple *&>(&v10, (uint64_t)&v14, (uint64_t)v20, (uint64_t)&v9, (llvm::LLVMContext *)"void", (llvm::LLVMContext *)"debug.ptr", (llvm::LLVMContext *)"air.indirect_argument", &v15);
    v14 += 8;
    v9 = MTLMDBuilder::getMDTuple<int,char const*,char const*,int,int,char const*,char const*,char const*,char const*,char const*>(&v16, 1, (llvm::LLVMContext *)"air.indirect_constant", (llvm::LLVMContext *)"air.location_index", 1, 1, (llvm::LLVMContext *)"air.read", (llvm::LLVMContext *)"air.arg_type_name", (llvm::LLVMContext *)"int", (llvm::LLVMContext *)"air.arg_name", (llvm::LLVMContext *)"debug.length");
    LODWORD(v20[0]) = v14 + 4;
    LODWORD(v8) = 0;
    MTLMDBuilder::emplace_back<unsigned int &,unsigned int,int,char const(&)[5],char const(&)[10],char const(&)[22],llvm::MDTuple *&>(&v10, (uint64_t)&v14, (uint64_t)v20, (uint64_t)&v8, (llvm::LLVMContext *)"int", (llvm::LLVMContext *)"debug.length", (llvm::LLVMContext *)"air.indirect_argument", &v9);
    v14 += 4;
    Impl = llvm::MDTuple::getImpl();
    LODWORD(v7) = 8;
    LODWORD(v6) = v14;
    v20[0] = MTLMDBuilder::getMDTuple<char const*,char const*,unsigned int,int,char const*,char const*,int,char const*,llvm::MDTuple *,char const*,unsigned int,char const*,int,char const*,char const*,char const*,char const*>(&v16, (llvm::LLVMContext *)"air.indirect_buffer", "air.location_index", 51, 1, (llvm::LLVMContext *)"air.read", (llvm::LLVMContext *)"air.address_space", 2, (llvm::LLVMContext *)"air.struct_type_info", Impl, (llvm::LLVMContext *)"air.arg_type_size", v6, (llvm::LLVMContext *)"air.arg_type_align_size", v7, (llvm::LLVMContext *)"air.arg_type_name", (llvm::LLVMContext *)"int", (llvm::LLVMContext *)"air.arg_name", (llvm::LLVMContext *)"debug.device_indirection_table");
    v20[1] = llvm::MDString::get();
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
    v8 = GlobalVariable;
    llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>,llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)this + 208, &v8, (uint64_t)v20);
    if (v11 != v13)
      free(v11);
    if (v17 != v19)
      free(v17);
  }
  return GlobalVariable;
}

void sub_240FD6128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;
  uint64_t v25;
  void *v27;

  if (a23 != v24)
    free(a23);
  v27 = *(void **)(v25 - 120);
  if (v27 != v23)
    free(v27);
  _Unwind_Resume(exception_object);
}

uint64_t MTLMDBuilder::getMDTuple<int,char const*,char const*,int,int,char const*,char const*,int,char const*,char const*,char const*,char const*>(llvm::MDString **a1, uint64_t a2, llvm::LLVMContext *a3, llvm::LLVMContext *a4, uint64_t a5, uint64_t a6, llvm::LLVMContext *a7, llvm::LLVMContext *a8, uint64_t a9, llvm::LLVMContext *a10, llvm::LLVMContext *a11, llvm::LLVMContext *a12, llvm::LLVMContext *a13)
{
  const char *v18;
  const char *v19;
  const char *v20;
  const char *v21;
  const char *v22;
  const char *v23;
  const char *v24;
  const char *v25;

  MTLMDBuilder::getMetadata<int>();
  llvm::MDString::get(*a1, a3, v18);
  llvm::MDString::get(*a1, a4, v19);
  MTLMDBuilder::getMetadata<int>();
  MTLMDBuilder::getMetadata<int>();
  llvm::MDString::get(*a1, a7, v20);
  llvm::MDString::get(*a1, a8, v21);
  MTLMDBuilder::getMetadata<int>();
  llvm::MDString::get(*a1, a10, v22);
  llvm::MDString::get(*a1, a11, v23);
  llvm::MDString::get(*a1, a12, v24);
  llvm::MDString::get(*a1, a13, v25);
  return llvm::MDTuple::getImpl();
}

uint64_t MTLMDBuilder::emplace_back<unsigned int &,unsigned int,int,char const(&)[5],char const(&)[10],char const(&)[22],llvm::MDTuple *&>(llvm::MDString **a1, uint64_t a2, uint64_t a3, uint64_t a4, llvm::LLVMContext *a5, llvm::LLVMContext *a6, llvm::LLVMContext *a7, uint64_t *a8)
{
  const char *v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[7];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v19[0] = MTLMDBuilder::getMetadata<unsigned int>();
  v19[1] = MTLMDBuilder::getMetadata<unsigned int>();
  v19[2] = MTLMDBuilder::getMetadata<int>();
  v19[3] = llvm::MDString::get(*a1, a5, v13);
  v19[4] = llvm::MDString::get(*a1, a6, v14);
  v16 = llvm::MDString::get(*a1, a7, v15);
  v17 = *a8;
  v19[5] = v16;
  v19[6] = v17;
  return llvm::SmallVectorImpl<llvm::Metadata *>::append<llvm::Metadata * const*,void>((uint64_t)(a1 + 1), v19, &v20);
}

uint64_t MTLMDBuilder::getMDTuple<int,char const*,char const*,int,int,char const*,char const*,char const*,char const*,char const*>(llvm::MDString **a1, uint64_t a2, llvm::LLVMContext *a3, llvm::LLVMContext *a4, uint64_t a5, uint64_t a6, llvm::LLVMContext *a7, llvm::LLVMContext *a8, llvm::LLVMContext *a9, llvm::LLVMContext *a10, llvm::LLVMContext *a11)
{
  const char *v16;
  const char *v17;
  const char *v18;
  const char *v19;
  const char *v20;
  const char *v21;
  const char *v22;

  MTLMDBuilder::getMetadata<int>();
  llvm::MDString::get(*a1, a3, v16);
  llvm::MDString::get(*a1, a4, v17);
  MTLMDBuilder::getMetadata<int>();
  MTLMDBuilder::getMetadata<int>();
  llvm::MDString::get(*a1, a7, v18);
  llvm::MDString::get(*a1, a8, v19);
  llvm::MDString::get(*a1, a9, v20);
  llvm::MDString::get(*a1, a10, v21);
  llvm::MDString::get(*a1, a11, v22);
  return llvm::MDTuple::getImpl();
}

uint64_t MTLMDBuilder::getMDTuple<char const*,char const*,unsigned int,int,char const*,char const*,int,char const*,llvm::MDTuple *,char const*,unsigned int,char const*,int,char const*,char const*,char const*,char const*>(llvm::MDString **a1, llvm::LLVMContext *a2, char *a3, uint64_t a4, uint64_t a5, llvm::LLVMContext *a6, llvm::LLVMContext *a7, uint64_t a8, llvm::LLVMContext *a9, uint64_t a10, llvm::LLVMContext *a11, uint64_t a12, llvm::LLVMContext *a13, uint64_t a14, llvm::LLVMContext *a15, llvm::LLVMContext *a16, llvm::LLVMContext *a17, llvm::LLVMContext *a18)
{
  const char *v22;
  const char *v23;
  const char *v24;
  const char *v25;
  const char *v26;
  const char *v27;
  const char *v28;
  const char *v29;
  const char *v30;
  const char *v31;

  llvm::MDString::get(*a1, a2, a3);
  llvm::MDString::get(*a1, (llvm::LLVMContext *)a3, v22);
  MTLMDBuilder::getMetadata<unsigned int>();
  MTLMDBuilder::getMetadata<int>();
  llvm::MDString::get(*a1, a6, v23);
  llvm::MDString::get(*a1, a7, v24);
  MTLMDBuilder::getMetadata<int>();
  llvm::MDString::get(*a1, a9, v25);
  llvm::MDString::get(*a1, a11, v26);
  MTLMDBuilder::getMetadata<unsigned int>();
  llvm::MDString::get(*a1, a13, v27);
  MTLMDBuilder::getMetadata<int>();
  llvm::MDString::get(*a1, a15, v28);
  llvm::MDString::get(*a1, a16, v29);
  llvm::MDString::get(*a1, a17, v30);
  llvm::MDString::get(*a1, a18, v31);
  return llvm::MDTuple::getImpl();
}

uint64_t MTLBoundsCheck::SharedPassData::getOrInsertAccelerationStructurePtrGV(llvm::Type ***this)
{
  llvm::LLVMContext *v2;
  uint64_t GlobalVariable;
  uint64_t v5;
  _BYTE v6[31];

  GlobalVariable = llvm::Module::getGlobalVariable();
  if (!GlobalVariable)
  {
    llvm::Type::getInt64Ty(*this[29], v2);
    llvm::PointerType::get();
    GlobalVariable = llvm::Module::getOrInsertGlobal();
    *(_DWORD *)(GlobalVariable + 32) = *(_DWORD *)(GlobalVariable + 32) & 0xFFFFA3C0 | 0x4408;
    llvm::UndefValue::get();
    llvm::GlobalVariable::setInitializer();
    v5 = GlobalVariable;
    llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>,llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)(this + 26), &v5, (uint64_t)v6);
  }
  return GlobalVariable;
}

uint64_t MTLBoundsCheck::SharedPassData::getOrInsertBindingTableGV(MTLBoundsCheck::SharedPassData *this)
{
  uint64_t GlobalVariable;
  uint64_t v4;
  _BYTE v5[31];

  GlobalVariable = llvm::Module::getGlobalVariable();
  if (!GlobalVariable)
  {
    MTLBoundsCheck::SharedPassData::getGVBaseType((uint64_t)this, "mtl.binding_table", 0x11uLL);
    llvm::PointerType::get();
    GlobalVariable = llvm::Module::getOrInsertGlobal();
    *(_DWORD *)(GlobalVariable + 32) = *(_DWORD *)(GlobalVariable + 32) & 0xFFFFA3C0 | 0x4408;
    llvm::UndefValue::get();
    llvm::GlobalVariable::setInitializer();
    v4 = GlobalVariable;
    llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>,llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)this + 208, &v4, (uint64_t)v5);
  }
  return GlobalVariable;
}

uint64_t MTLBoundsCheck::SharedPassData::getOrInsertStackDepthGV(llvm::Type ***this)
{
  llvm::LLVMContext *v2;
  uint64_t GlobalVariable;
  uint64_t v5;
  _BYTE v6[31];

  GlobalVariable = llvm::Module::getGlobalVariable();
  if (!GlobalVariable)
  {
    llvm::Type::getInt32Ty(*this[29], v2);
    GlobalVariable = llvm::Module::getOrInsertGlobal();
    *(_DWORD *)(GlobalVariable + 32) = *(_DWORD *)(GlobalVariable + 32) & 0xFFFFA3C0 | 0x4408;
    llvm::UndefValue::get();
    llvm::GlobalVariable::setInitializer();
    v5 = GlobalVariable;
    llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>,llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)(this + 26), &v5, (uint64_t)v6);
  }
  return GlobalVariable;
}

uint64_t MTLBoundsCheck::SharedPassData::getOrInsertStackTraceGV(llvm::Type ***this)
{
  uint64_t GlobalVariable;
  uint64_t v4;
  _BYTE v5[31];

  GlobalVariable = llvm::Module::getGlobalVariable();
  if (!GlobalVariable)
  {
    llvm::Type::getInt8PtrTy(*this[29], 0);
    GlobalVariable = llvm::Module::getOrInsertGlobal();
    *(_DWORD *)(GlobalVariable + 32) = *(_DWORD *)(GlobalVariable + 32) & 0xFFFFA3C0 | 0x4408;
    llvm::UndefValue::get();
    llvm::GlobalVariable::setInitializer();
    v4 = GlobalVariable;
    llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>,llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)(this + 26), &v4, (uint64_t)v5);
  }
  return GlobalVariable;
}

uint64_t MTLBoundsCheck::SharedPassData::getOrInsertReportBufferGV(llvm::Type ***this)
{
  llvm::LLVMContext *v2;
  uint64_t GlobalVariable;
  llvm::Type *v4;
  llvm::Module *v5;
  llvm::DataLayout *DataLayout;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t PrefTypeAlignment;
  uint64_t v13;
  llvm::MDString *v14;
  void *v15;
  uint64_t v16;
  _BYTE v17[7];
  _QWORD v18[4];

  v18[3] = *MEMORY[0x24BDAC8D0];
  GlobalVariable = llvm::Module::getGlobalVariable();
  if (!GlobalVariable)
  {
    llvm::Type::getInt64Ty(*this[29], v2);
    v4 = (llvm::Type *)llvm::PointerType::get();
    GlobalVariable = llvm::Module::getOrInsertGlobal();
    *(_DWORD *)(GlobalVariable + 32) = *(_DWORD *)(GlobalVariable + 32) & 0xFFFFA3C0 | 0x4408;
    llvm::UndefValue::get();
    llvm::GlobalVariable::setInitializer();
    v5 = (llvm::Module *)this[29];
    v14 = *(llvm::MDString **)v5;
    v15 = v17;
    v16 = 0;
    DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(v5);
    llvm::DataLayout::getTypeSizeInBits((uint64_t)DataLayout, (uint64_t)v4);
    v8 = v7;
    v10 = v9;
    PrefTypeAlignment = llvm::DataLayout::getPrefTypeAlignment(DataLayout, v4);
    v18[0] = MTLMDBuilder::getMDTuple<char const*,char const*,unsigned int,int,char const*,char const*,int,char const*,llvm::TypeSize,char const*,unsigned long long,char const*,char const*,char const*,char const*>(&v14, (llvm::LLVMContext *)"air.buffer", "air.location_index", 32, 1, (llvm::LLVMContext *)"air.read_write", (llvm::LLVMContext *)"air.address_space", 1, (llvm::LLVMContext *)"air.arg_type_size", (unint64_t)(v8 + 7) >> 3, v10 == 1, (llvm::LLVMContext *)"air.arg_type_align_size", PrefTypeAlignment, (llvm::LLVMContext *)"air.arg_type_name", (llvm::LLVMContext *)"int", (llvm::LLVMContext *)"air.arg_name", (llvm::LLVMContext *)"debug.report_buffer");
    v18[1] = llvm::MDString::get();
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
    v13 = GlobalVariable;
    llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>,llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)(this + 26), &v13, (uint64_t)v18);
    if (v15 != v17)
      free(v15);
  }
  return GlobalVariable;
}

void sub_240FD6C44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;

  if (a20 != v20)
    free(a20);
  _Unwind_Resume(exception_object);
}

uint64_t MTLBoundsCheck::SharedPassData::getOrInsertCheckBufferGV(MTLBoundsCheck::SharedPassData *this)
{
  uint64_t GlobalVariable;
  llvm::Type *v3;
  llvm::Module *v4;
  llvm::DataLayout *DataLayout;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t PrefTypeAlignment;
  uint64_t v12;
  uint64_t v13;
  llvm::MDString *v14;
  void *v15;
  uint64_t v16;
  _BYTE v17[7];
  _QWORD v18[4];

  v18[3] = *MEMORY[0x24BDAC8D0];
  GlobalVariable = llvm::Module::getGlobalVariable();
  if (!GlobalVariable)
  {
    MTLBoundsCheck::SharedPassData::getGVBaseType((uint64_t)this, "mtl.check_buffer", 0x10uLL);
    v3 = (llvm::Type *)llvm::PointerType::get();
    GlobalVariable = llvm::Module::getOrInsertGlobal();
    *(_DWORD *)(GlobalVariable + 32) = *(_DWORD *)(GlobalVariable + 32) & 0xFFFFA3C0 | 0x4408;
    llvm::UndefValue::get();
    llvm::GlobalVariable::setInitializer();
    v4 = (llvm::Module *)*((_QWORD *)this + 29);
    v14 = *(llvm::MDString **)v4;
    v15 = v17;
    v16 = 0;
    DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(v4);
    llvm::DataLayout::getTypeSizeInBits((uint64_t)DataLayout, (uint64_t)v3);
    v7 = v6;
    v9 = v8;
    PrefTypeAlignment = llvm::DataLayout::getPrefTypeAlignment(DataLayout, v3);
    LODWORD(v12) = 496;
    v18[0] = MTLMDBuilder::getMDTuple<char const*,char const*,unsigned int,int,char const*,char const*,int,char const*,llvm::TypeSize,char const*,unsigned long long,char const*,unsigned int,char const*,char const*,char const*,char const*>(&v14, (llvm::LLVMContext *)"air.buffer", "air.location_index", 31, 1, (llvm::LLVMContext *)"air.read", (llvm::LLVMContext *)"air.address_space", 1, (llvm::LLVMContext *)"air.arg_type_size", (unint64_t)(v7 + 7) >> 3, v9 == 1, (llvm::LLVMContext *)"air.arg_type_align_size", PrefTypeAlignment, (llvm::LLVMContext *)"air.buffer_size", v12, (llvm::LLVMContext *)"air.arg_type_name", (llvm::LLVMContext *)"int", (llvm::LLVMContext *)"air.arg_name", (llvm::LLVMContext *)"debug.data_buffer");
    v18[1] = llvm::MDString::get();
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
    v13 = GlobalVariable;
    llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>,llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)this + 208, &v13, (uint64_t)v18);
    if (v15 != v17)
      free(v15);
  }
  return GlobalVariable;
}

void sub_240FD6EA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  void *v22;

  if (a22 != v22)
    free(a22);
  _Unwind_Resume(exception_object);
}

uint64_t MTLMDBuilder::getMDTuple<char const*,char const*,unsigned int,int,char const*,char const*,int,char const*,llvm::TypeSize,char const*,unsigned long long,char const*,unsigned int,char const*,char const*,char const*,char const*>(llvm::MDString **a1, llvm::LLVMContext *a2, char *a3, uint64_t a4, uint64_t a5, llvm::LLVMContext *a6, llvm::LLVMContext *a7, uint64_t a8, llvm::LLVMContext *a9, uint64_t a10, uint64_t a11, llvm::LLVMContext *a12, uint64_t a13, llvm::LLVMContext *a14, uint64_t a15, llvm::LLVMContext *a16, llvm::LLVMContext *a17, llvm::LLVMContext *a18, llvm::LLVMContext *a19)
{
  const char *v23;
  const char *v24;
  const char *v25;
  const char *v26;
  const char *v27;
  const char *v28;
  const char *v29;
  const char *v30;
  const char *v31;
  const char *v32;

  llvm::MDString::get(*a1, a2, a3);
  llvm::MDString::get(*a1, (llvm::LLVMContext *)a3, v23);
  MTLMDBuilder::getMetadata<unsigned int>();
  MTLMDBuilder::getMetadata<int>();
  llvm::MDString::get(*a1, a6, v24);
  llvm::MDString::get(*a1, a7, v25);
  MTLMDBuilder::getMetadata<int>();
  llvm::MDString::get(*a1, a9, v26);
  llvm::TypeSize::operator unsigned long long();
  MTLMDBuilder::getMetadata<unsigned long long>();
  llvm::MDString::get(*a1, a12, v27);
  MTLMDBuilder::getMetadata<unsigned long long>();
  llvm::MDString::get(*a1, a14, v28);
  MTLMDBuilder::getMetadata<unsigned int>();
  llvm::MDString::get(*a1, a16, v29);
  llvm::MDString::get(*a1, a17, v30);
  llvm::MDString::get(*a1, a18, v31);
  llvm::MDString::get(*a1, a19, v32);
  return llvm::MDTuple::getImpl();
}

uint64_t MTLBoundsCheck::SharedPassData::getOrInsertThreadgroupTableGV(llvm::Module **this)
{
  uint64_t GlobalVariable;
  llvm::Type *GVBaseType;
  llvm::DataLayout *DataLayout;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t PrefTypeAlignment;
  uint64_t v11;
  llvm::MDString *v12;
  void *v13;
  uint64_t v14;
  _BYTE v15[7];
  _QWORD v16[4];

  v16[3] = *MEMORY[0x24BDAC8D0];
  GlobalVariable = llvm::Module::getGlobalVariable();
  if (!GlobalVariable)
  {
    GVBaseType = (llvm::Type *)MTLBoundsCheck::SharedPassData::getGVBaseType((uint64_t)this, "mtl.threadgroup_table", 0x15uLL);
    llvm::PointerType::get();
    GlobalVariable = llvm::Module::getOrInsertGlobal();
    *(_DWORD *)(GlobalVariable + 32) = *(_DWORD *)(GlobalVariable + 32) & 0xFFFFA3C0 | 0x4408;
    llvm::PointerType::get();
    llvm::UndefValue::get();
    llvm::GlobalVariable::setInitializer();
    DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(this[29]);
    v12 = *(llvm::MDString **)this[29];
    v13 = v15;
    v14 = 0;
    llvm::DataLayout::getTypeSizeInBits((uint64_t)DataLayout, (uint64_t)GVBaseType);
    v6 = v5;
    v8 = v7;
    PrefTypeAlignment = llvm::DataLayout::getPrefTypeAlignment(DataLayout, GVBaseType);
    v16[0] = MTLMDBuilder::getMDTuple<char const*,char const*,unsigned int,int,char const*,char const*,int,char const*,llvm::TypeSize,char const*,unsigned long long,char const*,char const*,char const*,char const*>(&v12, (llvm::LLVMContext *)"air.buffer", "air.location_index", 34, 1, (llvm::LLVMContext *)"air.read", (llvm::LLVMContext *)"air.address_space", 2, (llvm::LLVMContext *)"air.arg_type_size", (unint64_t)(v6 + 7) >> 3, v8 == 1, (llvm::LLVMContext *)"air.arg_type_align_size", PrefTypeAlignment, (llvm::LLVMContext *)"air.arg_type_name", (llvm::LLVMContext *)"int", (llvm::LLVMContext *)"air.arg_name", (llvm::LLVMContext *)"debug.threadgroup_table");
    v16[1] = llvm::MDString::get();
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
    v11 = GlobalVariable;
    llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>,llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)(this + 26), &v11, (uint64_t)v16);
    if (v13 != v15)
      free(v13);
  }
  return GlobalVariable;
}

void sub_240FD7308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;

  if (a20 != v20)
    free(a20);
  _Unwind_Resume(exception_object);
}

uint64_t MTLBoundsCheck::SharedPassData::getOrInsertThreadgroupBasePointerGV(llvm::Module **this)
{
  uint64_t GlobalVariable;
  llvm::Type *GVBaseType;
  llvm::DataLayout *DataLayout;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t PrefTypeAlignment;
  uint64_t v11;
  llvm::MDString *v12;
  void *v13;
  uint64_t v14;
  _BYTE v15[7];
  _QWORD v16[4];

  v16[3] = *MEMORY[0x24BDAC8D0];
  GlobalVariable = llvm::Module::getGlobalVariable();
  if (!GlobalVariable)
  {
    GVBaseType = (llvm::Type *)MTLBoundsCheck::SharedPassData::getGVBaseType((uint64_t)this, "mtl.threadgroup_base", 0x14uLL);
    llvm::PointerType::get();
    GlobalVariable = llvm::Module::getOrInsertGlobal();
    *(_DWORD *)(GlobalVariable + 32) = *(_DWORD *)(GlobalVariable + 32) & 0xFFFFA3C0 | 0x4408;
    llvm::PointerType::get();
    llvm::UndefValue::get();
    llvm::GlobalVariable::setInitializer();
    DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(this[29]);
    v12 = *(llvm::MDString **)this[29];
    v13 = v15;
    v14 = 0;
    llvm::DataLayout::getTypeSizeInBits((uint64_t)DataLayout, (uint64_t)GVBaseType);
    v6 = v5;
    v8 = v7;
    PrefTypeAlignment = llvm::DataLayout::getPrefTypeAlignment(DataLayout, GVBaseType);
    v16[0] = MTLMDBuilder::getMDTuple<char const*,char const*,int,int,char const*,char const*,int,char const*,llvm::TypeSize,char const*,unsigned long long,char const*,char const*,char const*,char const*>(&v12, (llvm::LLVMContext *)"air.buffer", "air.location_index", 0, 1, (llvm::LLVMContext *)"air.read_write", (llvm::LLVMContext *)"air.address_space", 3, (llvm::LLVMContext *)"air.arg_type_size", (unint64_t)(v6 + 7) >> 3, v8 == 1, (llvm::LLVMContext *)"air.arg_type_align_size", PrefTypeAlignment, (llvm::LLVMContext *)"air.arg_type_name", (llvm::LLVMContext *)"int", (llvm::LLVMContext *)"air.arg_name", (llvm::LLVMContext *)"debug.threadgroup_base");
    v16[1] = llvm::MDString::get();
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
    v11 = GlobalVariable;
    llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>,llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)(this + 26), &v11, (uint64_t)v16);
    if (v13 != v15)
      free(v13);
  }
  return GlobalVariable;
}

void sub_240FD7568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;

  if (a20 != v20)
    free(a20);
  _Unwind_Resume(exception_object);
}

uint64_t MTLMDBuilder::getMDTuple<char const*,char const*,int,int,char const*,char const*,int,char const*,llvm::TypeSize,char const*,unsigned long long,char const*,char const*,char const*,char const*>(llvm::MDString **a1, llvm::LLVMContext *a2, char *a3, uint64_t a4, uint64_t a5, llvm::LLVMContext *a6, llvm::LLVMContext *a7, uint64_t a8, llvm::LLVMContext *a9, uint64_t a10, uint64_t a11, llvm::LLVMContext *a12, uint64_t a13, llvm::LLVMContext *a14, llvm::LLVMContext *a15, llvm::LLVMContext *a16, llvm::LLVMContext *a17)
{
  const char *v21;
  const char *v22;
  const char *v23;
  const char *v24;
  const char *v25;
  const char *v26;
  const char *v27;
  const char *v28;
  const char *v29;

  llvm::MDString::get(*a1, a2, a3);
  llvm::MDString::get(*a1, (llvm::LLVMContext *)a3, v21);
  MTLMDBuilder::getMetadata<int>();
  MTLMDBuilder::getMetadata<int>();
  llvm::MDString::get(*a1, a6, v22);
  llvm::MDString::get(*a1, a7, v23);
  MTLMDBuilder::getMetadata<int>();
  llvm::MDString::get(*a1, a9, v24);
  llvm::TypeSize::operator unsigned long long();
  MTLMDBuilder::getMetadata<unsigned long long>();
  llvm::MDString::get(*a1, a12, v25);
  MTLMDBuilder::getMetadata<unsigned long long>();
  llvm::MDString::get(*a1, a14, v26);
  llvm::MDString::get(*a1, a15, v27);
  llvm::MDString::get(*a1, a16, v28);
  llvm::MDString::get(*a1, a17, v29);
  return llvm::MDTuple::getImpl();
}

uint64_t MTLBoundsCheck::SharedPassData::runOnModule(MTLBoundsCheck::SharedPassData *this, llvm::Module *a2)
{
  llvm::NamedMDNode *NamedMetadata;
  uint64_t Operand;
  const char *v7;
  __int16 v8;

  *((_QWORD *)this + 29) = a2;
  MTLBoundsCheck::SharedPassData::clear(this);
  v7 = "asan_data";
  v8 = 259;
  NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(a2, (const llvm::Twine *)&v7);
  if (NamedMetadata)
  {
    Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
    MTLBoundsCheck::SerializedData::fromMetaData(*((_QWORD *)this + 8), Operand);
  }
  MTLBoundsCheck::SharedPassData::earlyFragmentTests(this);
  return 1;
}

uint64_t MTLBoundsCheck::SharedPassData::clear(MTLBoundsCheck::SharedPassData *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 8);
  llvm::SmallVectorImpl<std::string>::clear((uint64_t *)v2);
  *(_DWORD *)(v2 + 120) = 0;
  *(_DWORD *)(v2 + 392) = 0;
  *(_DWORD *)(v2 + 600) = 0;
  *(_QWORD *)(v2 + 616) = 0;
  *(_OWORD *)(v2 + 632) = 0u;
  *(_DWORD *)(v2 + 648) = 0;
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::clear((unsigned int *)this + 60);
  std::__hash_table<std::__hash_value_type<llvm::Value *,MTLBoundsCheckPass::KnownBufferData>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,MTLBoundsCheckPass::KnownBufferData>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,MTLBoundsCheckPass::KnownBufferData>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,MTLBoundsCheckPass::KnownBufferData>>>::clear((_QWORD *)this + 34);
  std::__hash_table<std::__hash_value_type<llvm::Value *,MTLBoundsCheckPass::KnownBufferData>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,MTLBoundsCheckPass::KnownBufferData>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,MTLBoundsCheckPass::KnownBufferData>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,MTLBoundsCheckPass::KnownBufferData>>>::clear((_QWORD *)this + 39);
  std::__hash_table<std::__hash_value_type<llvm::Value *,MTLBoundsCheckPass::KnownBufferData>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,MTLBoundsCheckPass::KnownBufferData>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,MTLBoundsCheckPass::KnownBufferData>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,MTLBoundsCheckPass::KnownBufferData>>>::clear((_QWORD *)this + 11);
  std::__hash_table<std::__hash_value_type<llvm::Value *,MTLBoundsCheckPass::KnownBufferData>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,MTLBoundsCheckPass::KnownBufferData>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,MTLBoundsCheckPass::KnownBufferData>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,MTLBoundsCheckPass::KnownBufferData>>>::clear((_QWORD *)this + 16);
  std::__hash_table<std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>>>::clear((uint64_t)this + 168);
  return llvm::DenseMapBase<llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>,llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::clear((uint64_t)this + 208);
}

void MTLBoundsCheck::SharedPassData::earlyFragmentTests(MTLBoundsCheck::SharedPassData *this)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  _BYTE *String;
  uint64_t v10;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  unint64_t v25;
  BOOL v28;
  BOOL v29;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  __int128 *v42;
  uint64_t v43;
  llvm::Module *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(*((_QWORD *)this + 9) + 20) & 2) != 0)
  {
    v2 = (_BYTE *)*((_QWORD *)this + 5);
    if (v2)
    {
      if (!*v2)
      {
        MTLBoundsCheck::getMetalMetadata(*((MTLBoundsCheck **)this + 29), (uint64_t)&v46);
        if (v46 == 1)
        {
          v45 = v47;
          v3 = *(_QWORD *)(v47 - 8 * *(unsigned int *)(v47 + 8) + 8);
          v4 = *(unsigned int *)(v3 + 8);
          if ((_DWORD)v4)
          {
            v5 = 0;
            v6 = 0;
            v7 = 0;
            v8 = -8 * v4;
            while (1)
            {
              String = (_BYTE *)llvm::MDString::getString(*(llvm::MDString **)(*(_QWORD *)(v3 + v8)
                                                                             - 8
                                                                             * *(unsigned int *)(*(_QWORD *)(v3 + v8)
                                                                                               + 8)));
              if (v10 == 15)
                break;
              if (v10 == 11)
              {
                if (!memcmp(String, "air.stencil", 0xBuLL))
                {
                  v6 = 1;
                  goto LABEL_20;
                }
LABEL_18:
                v12 = 0;
LABEL_19:
                v7 |= v12;
                goto LABEL_20;
              }
              if (v10 != 9)
                goto LABEL_18;
              if (*(_QWORD *)String != 0x747065642E726961 || String[8] != 104)
                goto LABEL_18;
              v5 = 1;
LABEL_20:
              v8 += 8;
              if (!v8)
                goto LABEL_24;
            }
            v12 = memcmp(String, "air.sample_mask", 0xFuLL) == 0;
            goto LABEL_19;
          }
          v7 = 0;
          v6 = 0;
          v5 = 0;
LABEL_24:
          if ((v5 & 1) == 0 && (v6 & 1) == 0)
          {
            v13 = *((_QWORD *)this + 29);
            v14 = v13 + 24;
            v15 = *(_QWORD *)(v13 + 32);
            if (v15 != v13 + 24)
            {
              v16 = 0;
              while (1)
              {
                v17 = v15 - 56;
                if (!v15)
                  v17 = 0;
                v18 = v17 + 72;
                for (i = *(_QWORD *)(v17 + 80); i != v18; i = *(_QWORD *)(i + 8))
                {
                  v20 = i - 24;
                  if (!i)
                    v20 = 0;
                  v21 = *(_QWORD *)(v20 + 48);
                  if (v21 != v20 + 40)
                  {
                    while (1)
                    {
LABEL_89:
                      if (i == v18)
                        goto LABEL_108;
                      v37 = v21 ? v21 - 24 : 0;
                      v38 = *(unsigned __int8 *)(v37 + 16);
                      if (v38 == 61)
                        break;
                      if (v38 == 84)
                      {
                        v39 = *(_QWORD *)(v37 - 32);
                        if (v39)
                        {
                          if (!*(_BYTE *)(v39 + 16) && *(_QWORD *)(v39 + 24) == *(_QWORD *)(v37 + 72))
                          {
                            *(_QWORD *)&v48 = llvm::Value::getName((llvm::Value *)v39);
                            *((_QWORD *)&v48 + 1) = v40;
                            if (llvm::compat::getNumArgOperands((llvm::CallBase *)v37))
                              v24 = *(_BYTE *)(**(_QWORD **)(v37 - 32 * (*(_DWORD *)(v37 + 20) & 0x7FFFFFF)) + 8) == 15;
                            else
                              v24 = 0;
                            v25 = *((_QWORD *)&v48 + 1);
                            if (*((_QWORD *)&v48 + 1) >= 0xAuLL)
                            {
                              if (*(_QWORD *)v48 != 0x6D6F74612E726961 || *(_WORD *)(v48 + 8) != 25449)
                                goto LABEL_52;
                              if (llvm::StringRef::find() != -1 || !v24)
                              {
                                v25 = *((_QWORD *)&v48 + 1);
                                goto LABEL_46;
                              }
                              goto LABEL_76;
                            }
LABEL_46:
                            if (v25 < 9)
                            {
LABEL_70:
                              v31 = 0;
                              goto LABEL_102;
                            }
LABEL_52:
                            if (*(_QWORD *)v48 == 0x726F74732E726961 && *(_BYTE *)(v48 + 8) == 101)
                            {
                              v32 = *(uint64_t **)(v37 - 32 * (*(_DWORD *)(v37 + 20) & 0x7FFFFFF) + 32);
                            }
                            else
                            {
                              if (v25 < 0xB
                                || (*(_QWORD *)v48 == 0x6D656D2E6D766C6CLL
                                  ? (v28 = *(_QWORD *)(v48 + 3) == 0x7970636D656D2E6DLL)
                                  : (v28 = 0),
                                    !v28
                                 && (*(_QWORD *)v48 == 0x6D656D2E6D766C6CLL
                                   ? (v29 = *(_QWORD *)(v48 + 3) == 0x7465736D656D2E6DLL)
                                   : (v29 = 0),
                                     !v29)))
                              {
                                if (*(_QWORD *)v48 != 0x746972772E726961 || *(_BYTE *)(v48 + 8) != 101)
                                {
                                  if (v25 < 0x14)
                                    goto LABEL_70;
                                  v34 = 0x6169722E64697363;
                                  v35 = bswap64(*(_QWORD *)v48);
                                  if (v35 == 0x6169722E64697363)
                                  {
                                    v34 = 0x6172645F66726167;
                                    v35 = bswap64(*(_QWORD *)(v48 + 8));
                                    if (v35 == 0x6172645F66726167)
                                    {
                                      v35 = bswap32(*(_DWORD *)(v48 + 16));
                                      if ((_DWORD)v35 == 1835363956)
                                      {
                                        v36 = 0;
                                        goto LABEL_87;
                                      }
                                      v34 = 1835363956;
                                    }
                                  }
                                  if (v35 < v34)
                                    v36 = -1;
                                  else
                                    v36 = 1;
LABEL_87:
                                  v31 = 0;
                                  if (!v36)
                                    v16 = 1;
                                  goto LABEL_102;
                                }
                                v31 = 0;
                                v16 = 1;
LABEL_102:
                                if (v31)
                                {
                                  v41 = *(_DWORD *)(v31 + 8);
                                  if ((v41 & 0xFE) == 0x12)
                                    v41 = *(_DWORD *)(**(_QWORD **)(v31 + 16) + 8);
                                  if ((v41 & 0xFFFFFF00) == 0x100)
                                    v16 = 1;
                                }
                                goto LABEL_107;
                              }
LABEL_76:
                              v32 = *(uint64_t **)(v37 - 32 * (*(_DWORD *)(v37 + 20) & 0x7FFFFFF));
                            }
LABEL_101:
                            v31 = *v32;
                            goto LABEL_102;
                          }
                        }
                      }
LABEL_107:
                      if ((v16 & 1) != 0)
                        goto LABEL_108;
                      v21 = *(_QWORD *)(v21 + 8);
                      v22 = i - 24;
                      if (!i)
                        v22 = 0;
                      if (v21 == v22 + 40)
                      {
                        while (1)
                        {
                          i = *(_QWORD *)(i + 8);
                          if (i == v18)
                            goto LABEL_108;
                          v23 = i - 24;
                          if (!i)
                            v23 = 0;
                          v21 = *(_QWORD *)(v23 + 48);
                          if (v21 != v23 + 40)
                            goto LABEL_89;
                        }
                      }
                    }
                    v32 = *(uint64_t **)(v37 - 32);
                    goto LABEL_101;
                  }
                }
LABEL_108:
                if ((v16 & 1) == 0)
                {
                  v15 = *(_QWORD *)(v15 + 8);
                  if (v15 != v14)
                    continue;
                }
                goto LABEL_112;
              }
            }
            v16 = 0;
LABEL_112:
            if (((v7 | v16) & 1) == 0)
            {
              v42 = (__int128 *)(v45 - 8 * *(unsigned int *)(v45 + 8));
              v43 = *((_QWORD *)v42 + 2);
              v48 = *v42;
              v49 = v43;
              v50 = llvm::MDString::get();
              llvm::MDTuple::getImpl();
              v44 = (llvm::Module *)*((_QWORD *)this + 29);
              *(_QWORD *)&v48 = "air.fragment";
              v51 = 259;
              llvm::Module::getNamedMetadata(v44, (const llvm::Twine *)&v48);
              llvm::NamedMDNode::setOperand();
            }
          }
        }
      }
    }
  }
}

void sub_240FD7DF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(exception_object);
}

uint64_t MTLBoundsCheck::SharedPassData::indexForString(uint64_t a1, const void *a2, const void *a3)
{
  llvm::StringMapImpl *v6;
  int Key;
  unsigned int v9;
  const void *v10[2];

  v10[0] = a2;
  v10[1] = a3;
  v6 = (llvm::StringMapImpl *)(a1 + 240);
  Key = llvm::StringMapImpl::FindKey();
  if (Key != -1 && Key != (unint64_t)*(unsigned int *)(a1 + 248))
    return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 240) + 8 * Key) + 8);
  v9 = *(_DWORD *)(*(_QWORD *)(a1 + 64) + 8);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<unsigned int &>(v6, a2, (size_t)a3, &v9);
  llvm::SmallVectorImpl<std::string>::emplace_back<llvm::StringRef>(*(_QWORD *)(a1 + 64), v10);
  return v9;
}

uint64_t *llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<unsigned int &>(llvm::StringMapImpl *a1, const void *a2, size_t a3, _DWORD *a4)
{
  uint64_t *i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v9 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v9)
  {
    while (!v9 || v9 == -8)
    {
      v10 = i[1];
      ++i;
      v9 = v10;
    }
    return i;
  }
  v11 = MEMORY[0x24268CD5C](a3 + 17, 8);
  v12 = v11;
  v13 = v11 + 16;
  if (a3)
    memcpy((void *)(v11 + 16), a2, a3);
  *(_BYTE *)(v13 + a3) = 0;
  *(_QWORD *)v12 = a3;
  *(_DWORD *)(v12 + 8) = *a4;
  *i = v12;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

uint64_t MTLBoundsCheck::SharedPassData::indexForDISubProgram(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  _QWORD *v4;
  llvm::MDString *v5;
  const void *String;
  const void *v7;
  const void *v8;
  unsigned __int8 *v9;
  llvm::MDString *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  llvm::MDString *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  unsigned __int8 *v17;
  int v18;
  unsigned __int8 *v19;
  llvm::MDString *v20;
  llvm::MDString *v21;
  _DWORD v23[3];
  unsigned __int8 *v24;
  void *v25;
  __int128 v26;
  _WORD v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v24 = a2;
  v3 = a1 + 312;
  v4 = std::__hash_table<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>>>::find<llvm::Value *>((_QWORD *)(a1 + 312), &v24);
  if (!v4)
  {
    v5 = *(llvm::MDString **)&v24[-8 * *((unsigned int *)v24 + 2) + 16];
    if (v5)
    {
      String = (const void *)llvm::MDString::getString(v5);
      v8 = v7;
    }
    else
    {
      String = 0;
      v8 = 0;
    }
    v23[1] = MTLBoundsCheck::SharedPassData::indexForString(a1, String, v8);
    v9 = v24;
    if (*v24 == 15 || (v9 = *(unsigned __int8 **)&v24[-8 * *((unsigned int *)v24 + 2)]) != 0)
    {
      v10 = *(llvm::MDString **)&v9[-8 * *((unsigned int *)v9 + 2)];
      if (v10)
        v10 = (llvm::MDString *)llvm::MDString::getString(v10);
      else
        v11 = 0;
    }
    else
    {
      v11 = 0;
      v10 = (llvm::MDString *)&unk_24105C402;
    }
    v27[4] = 261;
    v25 = v10;
    *(_QWORD *)&v26 = v11;
    if (llvm::sys::path::is_absolute())
    {
      v12 = v24;
      if (*v24 == 15 || (v12 = *(unsigned __int8 **)&v24[-8 * *((unsigned int *)v24 + 2)]) != 0)
      {
        v13 = *(llvm::MDString **)&v12[-8 * *((unsigned int *)v12 + 2)];
        if (v13)
        {
          v14 = (const void *)llvm::MDString::getString(v13);
          v16 = v15;
        }
        else
        {
          v16 = 0;
          v14 = 0;
        }
      }
      else
      {
        v16 = 0;
        v14 = &unk_24105C402;
      }
      v23[0] = MTLBoundsCheck::SharedPassData::indexForString(a1, v14, v16);
    }
    else
    {
      v25 = v27;
      v26 = xmmword_24105A430;
      v17 = v24;
      v18 = *v24;
      v19 = v24;
      if (v18 == 15 || (v19 = *(unsigned __int8 **)&v24[-8 * *((unsigned int *)v24 + 2)]) != 0)
      {
        v20 = *(llvm::MDString **)&v19[-8 * *((unsigned int *)v19 + 2) + 8];
        if (v20)
        {
          llvm::MDString::getString(v20);
          v17 = v24;
          v18 = *v24;
        }
        if (v18 == 15)
          goto LABEL_26;
      }
      v17 = *(unsigned __int8 **)&v17[-8 * *((unsigned int *)v17 + 2)];
      if (v17)
      {
LABEL_26:
        v21 = *(llvm::MDString **)&v17[-8 * *((unsigned int *)v17 + 2)];
        if (v21)
          llvm::MDString::getString(v21);
      }
      llvm::sys::path::append();
      v23[0] = MTLBoundsCheck::SharedPassData::indexForString(a1, v25, (const void *)v26);
      if (v25 != v27)
        free(v25);
    }
    v23[2] = *((_DWORD *)v24 + 6);
    v25 = (void *)*(unsigned int *)(*(_QWORD *)(a1 + 64) + 392);
    v4 = std::__hash_table<std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::__unordered_map_hasher<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::hash<llvm::DISubprogram *>,std::equal_to<llvm::DISubprogram *>,true>,std::__unordered_map_equal<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::equal_to<llvm::DISubprogram *>,std::hash<llvm::DISubprogram *>,true>,std::allocator<std::__hash_value_type<llvm::DISubprogram *,unsigned int>>>::__emplace_unique_key_args<llvm::DISubprogram *,llvm::DISubprogram *&,unsigned long>(v3, &v24, &v24, &v25);
    llvm::SmallVectorImpl<MTLBoundsCheck::DebugSubProgram>::emplace_back<MTLBoundsCheck::DebugSubProgram&>(*(_QWORD *)(a1 + 64) + 384, (uint64_t)v23);
  }
  return *((unsigned int *)v4 + 6);
}

void sub_240FD82A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33)
{
  void *v33;

  if (a33 != v33)
    free(a33);
  _Unwind_Resume(exception_object);
}

uint64_t MTLBoundsCheck::SharedPassData::indexForDILocation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  unsigned __int8 *Subprogram;
  unsigned int v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;

  v13 = a2;
  v3 = a1 + 272;
  v4 = std::__hash_table<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>>>::find<llvm::Value *>((_QWORD *)(a1 + 272), &v13);
  if (!v4)
  {
    Subprogram = (unsigned __int8 *)llvm::DILocalScope::getSubprogram(*(llvm::DILocalScope **)(v13
                                                                                             - 8
                                                                                             * *(unsigned int *)(v13 + 8)));
    v6 = MTLBoundsCheck::SharedPassData::indexForDISubProgram(a1, Subprogram);
    v10 = __PAIR64__(*(_DWORD *)(v13 + 4), v6);
    v11 = *(unsigned __int16 *)(v13 + 2);
    if (*(_DWORD *)(v13 + 8) == 2 && *(_QWORD *)(v13 - 8))
      v7 = MTLBoundsCheck::SharedPassData::indexForDILocation(a1);
    else
      v7 = -1;
    v12 = v7;
    v9 = *(unsigned int *)(*(_QWORD *)(a1 + 64) + 120);
    v4 = std::__hash_table<std::__hash_value_type<llvm::DILocation *,unsigned int>,std::__unordered_map_hasher<llvm::DILocation *,std::__hash_value_type<llvm::DILocation *,unsigned int>,std::hash<llvm::DILocation *>,std::equal_to<llvm::DILocation *>,true>,std::__unordered_map_equal<llvm::DILocation *,std::__hash_value_type<llvm::DILocation *,unsigned int>,std::equal_to<llvm::DILocation *>,std::hash<llvm::DILocation *>,true>,std::allocator<std::__hash_value_type<llvm::DILocation *,unsigned int>>>::__emplace_unique_key_args<llvm::DILocation *,llvm::DILocation *&,unsigned long>(v3, &v13, &v13, &v9);
    llvm::SmallVectorImpl<MTLBoundsCheck::DebugLocation>::emplace_back<MTLBoundsCheck::DebugLocation&>(*(_QWORD *)(a1 + 64) + 112, (uint64_t *)&v10);
  }
  return *((unsigned int *)v4 + 6);
}

llvm::MDString *MTLBoundsCheck::SharedPassData::getNameOfParentFunction(MTLBoundsCheck::SharedPassData *this, llvm::Instruction *a2)
{
  uint64_t v2;
  llvm::Value *v3;
  uint64_t Subprogram;
  llvm::MDString *result;

  v2 = *((_QWORD *)a2 + 5);
  if (!v2)
    return (llvm::MDString *)&unk_24105C402;
  v3 = *(llvm::Value **)(v2 + 56);
  if (!v3)
    return (llvm::MDString *)&unk_24105C402;
  Subprogram = llvm::Function::getSubprogram(*(llvm::Function **)(v2 + 56));
  if (!Subprogram)
    return (llvm::MDString *)llvm::Value::getName(v3);
  result = *(llvm::MDString **)(Subprogram - 8 * *(unsigned int *)(Subprogram + 8) + 16);
  if (result)
    return (llvm::MDString *)llvm::MDString::getString(result);
  return result;
}

uint64_t MTLBoundsCheck::SharedPassData::indexForInstruction(MTLBoundsCheck::SharedPassData *this, llvm::Instruction *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t MetadataImpl;

  if (!*(_BYTE *)(*((_QWORD *)this + 8) + 650) && (*((_QWORD *)a2 + 6) || (*((_BYTE *)a2 + 23) & 0x20) != 0))
  {
    MetadataImpl = llvm::Instruction::getMetadataImpl();
    if (MetadataImpl)
      return MTLBoundsCheck::SharedPassData::indexForDILocation((uint64_t)this, MetadataImpl);
  }
  if (!*((_QWORD *)a2 + 6) && (*((_BYTE *)a2 + 23) & 0x20) == 0)
    return 0xFFFFFFFFLL;
  if (!llvm::Instruction::getMetadataImpl())
    return 0xFFFFFFFFLL;
  v3 = llvm::Instruction::getMetadataImpl();
  v4 = *(_QWORD *)(v3 - 8 * *(unsigned int *)(v3 + 8));
  if (!v4)
    return 0xFFFFFFFFLL;
  v5 = *(_QWORD *)(v4 + 128);
  v6 = (unsigned int *)(v5 + 24);
  if (*(_DWORD *)(v5 + 32) >= 0x41u)
    v6 = *(unsigned int **)v6;
  return *v6;
}

void MTLBoundsCheck::SharedPassData::expandConstantExprUsers(MTLBoundsCheck::SharedPassData *this, llvm::GlobalVariable *a2)
{
  unsigned __int8 *v3;
  unsigned int v4;
  BOOL v5;
  unsigned __int8 *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  char *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  llvm::Instruction *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  llvm::Instruction *v27;
  uint64_t v28;
  _QWORD *AsInstruction;
  int v30;
  uint64_t v31;
  _QWORD **v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37[2];
  int v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  _BYTE v43[64];
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  void *v47;
  unsigned int v48;
  uint64_t v49;
  _QWORD *v50;
  unsigned int v51;
  _QWORD v52[6];

  v52[4] = *MEMORY[0x24BDAC8D0];
  llvm::Constant::removeDeadConstantUsers(a2);
  v39 = (uint64_t *)v43;
  v40 = (uint64_t *)v43;
  v41 = 8;
  v42 = 0;
  v37[0] = 0;
  v37[1] = 0;
  v38 = 0;
  llvm::SmallVector<llvm::User *,16u>::SmallVector<llvm::Value::user_iterator_impl<llvm::User>,void>(&v47, *((_QWORD *)a2 + 1), 0);
  while (v48)
  {
    v3 = (unsigned __int8 *)*((_QWORD *)v47 + --v48);
    v4 = v3[16];
    if (v3)
      v5 = v4 >= 0x1C;
    else
      v5 = 0;
    if (v5)
    {
      llvm::SmallPtrSetImpl<llvm::Instruction *>::insert((llvm::SmallPtrSetImplBase *)&v39, v3, (uint64_t)&v50);
    }
    else
    {
      if (v4 == 5)
        v6 = v3;
      else
        v6 = 0;
      v46 = v6;
      if (v6)
      {
        llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>,llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v37, &v46, (uint64_t)&v50);
        llvm::SmallVectorImpl<llvm::User *>::append<llvm::Value::user_iterator_impl<llvm::User>,void>((uint64_t)&v47, *((_QWORD *)v46 + 1), 0);
      }
    }
  }
  if (v40 == v39)
    v7 = (uint64_t *)((char *)&v41 + 4);
  else
    v7 = &v41;
  v8 = *(unsigned int *)v7;
  if ((_DWORD)v8)
  {
    v9 = 8 * v8;
    v10 = v40;
    while ((unint64_t)*v10 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v10;
      v9 -= 8;
      if (!v9)
        goto LABEL_67;
    }
  }
  else
  {
    v10 = v40;
  }
  v11 = (char *)&v40[v8];
  if (v10 != (uint64_t *)v11)
  {
LABEL_23:
    v44 = *v10;
    llvm::SmallVector<llvm::Instruction *,4u>::SmallVector(&v50, 1, &v44);
    v12 = v51;
    do
    {
      v13 = v50[--v12];
      v51 = v12;
      v14 = *(_DWORD *)(v13 + 20) & 0x7FFFFFF;
      if ((_DWORD)v14)
      {
        v15 = 0;
        v16 = 8 * v14;
        v17 = 8;
        do
        {
          v18 = *(_DWORD *)(v13 + 20);
          if ((v18 & 0x40000000) != 0)
            v19 = *(_QWORD *)(v13 - 8);
          else
            v19 = v13 - 32 * (v18 & 0x7FFFFFF);
          v20 = *(_QWORD *)(v19 + v17 - 8);
          if (v20)
            v21 = *(_BYTE *)(v20 + 16) == 5;
          else
            v21 = 0;
          if (v21)
          {
            v45 = 0;
            v46 = (unsigned __int8 *)v20;
            if ((llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>,llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::LookupBucketFor<llvm::Value *>(v37, &v46, &v45) & 1) != 0)
            {
              v22 = (llvm::Instruction *)v13;
              if (*(_BYTE *)(v13 + 16) == 83)
              {
                v23 = *(_DWORD *)(v13 + 20);
                if ((v23 & 0x40000000) != 0)
                  v24 = *(_QWORD *)(v13 - 8);
                else
                  v24 = v13 - 32 * (v23 & 0x7FFFFFF);
                v25 = *(_QWORD *)(v24 + 32 * *(unsigned int *)(v13 + 60) + v15);
                v26 = *(_QWORD *)(v25 + 40);
                if (v26 == v25 + 40)
                {
                  v22 = 0;
                }
                else
                {
                  v27 = (llvm::Instruction *)(v26 - 24);
                  if (v26)
                    v28 = v26 - 24;
                  else
                    v28 = 0;
                  if (*(unsigned __int8 *)(v28 + 16) - 29 >= 0xB)
                    v22 = 0;
                  else
                    v22 = v27;
                }
              }
              AsInstruction = (_QWORD *)llvm::ConstantExpr::getAsInstruction((llvm::ConstantExpr *)v20, 0);
              llvm::Instruction::insertBefore((llvm::Instruction *)AsInstruction, v22);
              v30 = *(_DWORD *)(v13 + 20);
              if ((v30 & 0x40000000) != 0)
                v31 = *(_QWORD *)(v13 - 8);
              else
                v31 = v13 - 32 * (v30 & 0x7FFFFFF);
              v32 = (_QWORD **)(v31 + v17);
              v33 = (_QWORD *)(v31 + v17 - 8);
              if (*v33)
              {
                *v32[1] = *v32;
                if (*v32)
                  (*v32)[2] = v32[1];
              }
              *v33 = AsInstruction;
              if (AsInstruction)
              {
                v34 = AsInstruction + 1;
                v35 = AsInstruction[1];
                v36 = (_QWORD *)(v31 + v17);
                *v36 = v35;
                if (v35)
                  *(_QWORD *)(v35 + 16) = v36;
                v36[1] = v34;
                *v34 = v33;
              }
              llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v50, (uint64_t)AsInstruction);
              if (!*(_QWORD *)(v20 + 8))
                llvm::Constant::destroyConstant((llvm::Constant *)v20);
            }
          }
          v15 += 8;
          v17 += 32;
        }
        while (v16 != v15);
        v12 = v51;
      }
    }
    while (v12);
    if (v50 != v52)
      free(v50);
    while (++v10 != (uint64_t *)v11)
    {
      if ((unint64_t)*v10 < 0xFFFFFFFFFFFFFFFELL)
      {
        if (v10 != (uint64_t *)v11)
          goto LABEL_23;
        break;
      }
    }
  }
LABEL_67:
  if (v47 != &v49)
    free(v47);
  llvm::DenseMap<llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::ConstantExpr *,void>,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>::~DenseMap((uint64_t)v37);
  if (v40 != v39)
    free(v40);
}

void sub_240FD887C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t *a27,uint64_t a28,uint64_t a29)
{
  if (a27 != &a29)
    free(a27);
  llvm::DenseMap<llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::ConstantExpr *,void>,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>::~DenseMap((uint64_t)&a9);
  if (a13 != a12)
    free(a13);
  _Unwind_Resume(a1);
}

_QWORD *llvm::SmallPtrSetImpl<llvm::Instruction *>::insert@<X0>(llvm::SmallPtrSetImplBase *a1@<X0>, const void *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *result;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  result = llvm::SmallPtrSetImplBase::insert_imp(a1, a2);
  v7 = *((_QWORD *)a1 + 1);
  v8 = 16;
  if (v7 == *(_QWORD *)a1)
    v8 = 20;
  v9 = (_QWORD *)(v7 + 8 * *(unsigned int *)((char *)a1 + v8));
  if (v9 != result)
  {
    while (*result >= 0xFFFFFFFFFFFFFFFELL)
    {
      if (++result == v9)
      {
        result = v9;
        break;
      }
    }
  }
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v6;
  return result;
}

unsigned int *llvm::StringMap<unsigned int,llvm::MallocAllocator>::clear(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (result[3])
  {
    v1 = result;
    v2 = result[2];
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(_QWORD *)v1;
        result = *(unsigned int **)(*(_QWORD *)v1 + v3);
        if (result != (unsigned int *)-8 && result != 0)
          result = (unsigned int *)llvm::deallocate_buffer((llvm *)result, (void *)(*(_QWORD *)result + 17));
        *(_QWORD *)(v5 + v3) = 0;
        v3 += 8;
      }
      while (v4 != v3);
    }
    v1[3] = 0;
    v1[4] = 0;
  }
  return result;
}

uint64_t MakeMDResolver<unsigned int>@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = &off_25111EB68;
  a2[1] = result;
  a2[3] = a2;
  return result;
}

uint64_t MakeMDResolver<BOOL>@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = &off_25111EBB0;
  a2[1] = result;
  a2[3] = a2;
  return result;
}

uint64_t MakeMDResolver<llvm::Value *>@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = &off_25111EBF8;
  a2[1] = result;
  a2[3] = a2;
  return result;
}

llvm::MDString *getStaticBoundsInfo@<X0>(llvm::MDString *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  llvm::MDString *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  __int128 *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[3];
  _QWORD *v36;
  _QWORD v37[3];
  _QWORD *v38;
  _QWORD v39[3];
  _QWORD *v40;
  _QWORD v41[3];
  _QWORD *v42;
  _QWORD v43[3];
  _QWORD *v44;
  _QWORD v45[3];
  _QWORD *v46;
  _QWORD v47[3];
  _QWORD *v48;
  _QWORD v49[2];
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  _BYTE v53[24];
  llvm::MDString *v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  v3 = a2 + 8;
  *(_BYTE *)(a2 + 12) = 0;
  v4 = a2 + 12;
  *(_BYTE *)(a2 + 16) = 0;
  *(_WORD *)(a2 + 20) = 256;
  v5 = a2 + 20;
  *(_BYTE *)(a2 + 22) = 0;
  v6 = a2 + 22;
  v7 = *((_DWORD *)result + 2);
  if (v7)
  {
    v8 = result;
    v9 = 0;
    while (1)
    {
      result = (llvm::MDString *)*((_QWORD *)v8 + v9 - v7);
      if (!*(_BYTE *)result)
        break;
LABEL_55:
      if (++v9 >= v7)
        return result;
    }
    v49[0] = llvm::MDString::getString(result);
    v49[1] = v10;
    v50 = 0u;
    v51 = 0u;
    v52 = 0;
    v47[0] = &off_25111EC40;
    v47[1] = v4;
    v48 = v47;
    v11 = llvm::StringSwitch<std::function<void ()(llvm::Metadata *)>,std::function<void ()(llvm::Metadata *)>>::Case((uint64_t)v49, "location_index", 14, (uint64_t)v47);
    v45[0] = &off_25111EBB0;
    v45[1] = v5;
    v46 = v45;
    v12 = llvm::StringSwitch<std::function<void ()(llvm::Metadata *)>,std::function<void ()(llvm::Metadata *)>>::Case(v11, "is_safe", 7, (uint64_t)v45);
    v43[0] = &off_25111EB68;
    v43[1] = v3;
    v44 = v43;
    v13 = llvm::StringSwitch<std::function<void ()(llvm::Metadata *)>,std::function<void ()(llvm::Metadata *)>>::Case(v12, "deref", 5, (uint64_t)v43);
    v41[0] = &off_25111EBF8;
    v41[1] = a2;
    v42 = v41;
    v14 = llvm::StringSwitch<std::function<void ()(llvm::Metadata *)>,std::function<void ()(llvm::Metadata *)>>::Case(v13, "base_pointer", 12, (uint64_t)v41);
    v39[0] = &off_25111EBB0;
    v39[1] = a2 + 21;
    v40 = v39;
    v15 = llvm::StringSwitch<std::function<void ()(llvm::Metadata *)>,std::function<void ()(llvm::Metadata *)>>::Case(v14, "allowGEPFold", 12, (uint64_t)v39);
    v37[0] = &off_25111EBB0;
    v37[1] = v6;
    v38 = v37;
    v16 = llvm::StringSwitch<std::function<void ()(llvm::Metadata *)>,std::function<void ()(llvm::Metadata *)>>::Case(v15, "isArgumentBuffer", 16, (uint64_t)v37);
    v35[0] = &off_25111EC88;
    v36 = v35;
    if (*(_BYTE *)(v16 + 48))
      v17 = (_QWORD *)(v16 + 16);
    else
      v17 = v35;
    std::__function::__value_func<void ()(llvm::Metadata *)>::__value_func[abi:ne180100]((uint64_t)v53, (uint64_t)v17);
    v18 = v36;
    if (v36 == v35)
    {
      v18 = v35;
      v19 = 4;
    }
    else
    {
      if (!v36)
        goto LABEL_12;
      v19 = 5;
    }
    (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_12:
    v20 = v38;
    if (v38 == v37)
    {
      v20 = v37;
      v21 = 4;
    }
    else
    {
      if (!v38)
        goto LABEL_17;
      v21 = 5;
    }
    (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_17:
    v22 = v40;
    if (v40 == v39)
    {
      v22 = v39;
      v23 = 4;
    }
    else
    {
      if (!v40)
        goto LABEL_22;
      v23 = 5;
    }
    (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_22:
    v24 = v42;
    if (v42 == v41)
    {
      v24 = v41;
      v25 = 4;
    }
    else
    {
      if (!v42)
        goto LABEL_27;
      v25 = 5;
    }
    (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_27:
    v26 = v44;
    if (v44 == v43)
    {
      v26 = v43;
      v27 = 4;
    }
    else
    {
      if (!v44)
        goto LABEL_32;
      v27 = 5;
    }
    (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_32:
    v28 = v46;
    if (v46 == v45)
    {
      v28 = v45;
      v29 = 4;
    }
    else
    {
      if (!v46)
        goto LABEL_37;
      v29 = 5;
    }
    (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_37:
    v30 = v48;
    if (v48 == v47)
    {
      v30 = v47;
      v31 = 4;
    }
    else
    {
      if (!v48)
        goto LABEL_42;
      v31 = 5;
    }
    (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_42:
    if (!(_BYTE)v52)
      goto LABEL_48;
    v32 = (__int128 *)*((_QWORD *)&v51 + 1);
    if (*((__int128 **)&v51 + 1) == &v50)
    {
      v32 = &v50;
      v33 = 4;
    }
    else
    {
      if (!*((_QWORD *)&v51 + 1))
        goto LABEL_48;
      v33 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v32 + 8 * v33))();
LABEL_48:
    v49[0] = *((_QWORD *)v8 + ++v9 - *((unsigned int *)v8 + 2));
    if (!v54)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(llvm::MDString *, _QWORD *))(*(_QWORD *)v54 + 48))(v54, v49);
    result = v54;
    if (v54 == (llvm::MDString *)v53)
    {
      result = (llvm::MDString *)v53;
      v34 = 4;
    }
    else
    {
      if (!v54)
      {
LABEL_54:
        v7 = *((_DWORD *)v8 + 2);
        goto LABEL_55;
      }
      v34 = 5;
    }
    result = (llvm::MDString *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v34))();
    goto LABEL_54;
  }
  return result;
}

void sub_240FD8DEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char *a29,char a30,uint64_t a31,uint64_t a32,char *a33,char a34,uint64_t a35,uint64_t a36,char *a37)
{
  _QWORD *v37;
  uint64_t v38;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;

  v40 = a29;
  if (a29 == &a26)
  {
    v41 = 4;
    v40 = &a26;
  }
  else
  {
    if (!a29)
      goto LABEL_6;
    v41 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v40 + 8 * v41))();
LABEL_6:
  v42 = a33;
  if (a33 == &a30)
  {
    v43 = 4;
    v42 = &a30;
  }
  else
  {
    if (!a33)
      goto LABEL_11;
    v43 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v42 + 8 * v43))();
LABEL_11:
  v44 = a37;
  if (a37 == &a34)
  {
    v45 = 4;
    v44 = &a34;
  }
  else
  {
    if (!a37)
      goto LABEL_16;
    v45 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v44 + 8 * v45))();
LABEL_16:
  if (!*(_BYTE *)(v38 - 136))
    goto LABEL_22;
  v46 = *(_QWORD **)(v38 - 144);
  if (v46 == v37)
  {
    v47 = 4;
  }
  else
  {
    if (!v46)
      goto LABEL_22;
    v47 = 5;
    v37 = *(_QWORD **)(v38 - 144);
  }
  (*(void (**)(_QWORD *))(*v37 + 8 * v47))(v37);
LABEL_22:
  _Unwind_Resume(exception_object);
}

uint64_t llvm::StringSwitch<std::function<void ()(llvm::Metadata *)>,std::function<void ()(llvm::Metadata *)>>::Case(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  size_t v6;

  if (!*(_BYTE *)(a1 + 48))
  {
    v6 = *(_QWORD *)(a1 + 8);
    if (v6 == a3 && (!v6 || !memcmp(*(const void **)a1, a2, v6)))
      llvm::optional_detail::OptionalStorage<std::function<void ()(llvm::Metadata *)>,false>::operator=(a1 + 16, a4);
  }
  return a1;
}

BOOL isSpecialStructType(llvm::StructType *a1)
{
  uint64_t Name;
  unint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  BOOL v18;
  BOOL v19;
  BOOL v28;
  BOOL v29;
  BOOL v34;

  if (!*((_QWORD *)a1 + 3))
    return 0;
  Name = llvm::StructType::getName(a1);
  v3 = (_QWORD *)Name;
  v4 = v2;
  if (v2 >= 0x10)
  {
    if (*(_QWORD *)Name == 0x5F2E746375727473 && *(_QWORD *)(Name + 8) == 0x5F65727574786574)
      return 1;
    if (*(_QWORD *)Name == 0x5F2E746375727473 && *(_QWORD *)(Name + 8) == 0x5F72656C706D6173)
      return 1;
  }
  else if (v2 < 0xE)
  {
    return 0;
  }
  if (*(_QWORD *)Name != 0x5F2E746375727473 || *(_QWORD *)(Name + 6) != 0x5F68747065645F2ELL)
  {
    if (v2 >= 0x18)
    {
      if (*(_QWORD *)Name == 0x5F2E746375727473
        && *(_QWORD *)(Name + 8) == 0x5F646E616D6D6F63
        && *(_QWORD *)(Name + 16) == 0x745F726566667562)
      {
        return 1;
      }
      if (v2 >= 0x1F)
      {
        if (*(_QWORD *)Name == 0x5F2E746375727473
          && *(_QWORD *)(Name + 8) == 0x705F7265646E6572
          && *(_QWORD *)(Name + 16) == 0x5F656E696C657069
          && *(_QWORD *)(Name + 23) == 0x745F65746174735FLL)
        {
          return 1;
        }
        if (v2 < 0x20)
        {
          if (*(_QWORD *)Name == 0x5F2E746375727473
            && *(_QWORD *)(Name + 8) == 0x6C6F707265746E69
            && *(_QWORD *)(Name + 13) == 0x745F746E616C6F70)
          {
            return 1;
          }
          v18 = *(_QWORD *)Name == 0x5F2E746375727473 && *(_QWORD *)(Name + 8) == 0x6365737265746E69;
          v19 = v18 && *(_QWORD *)(Name + 16) == 0x6575715F6E6F6974;
          if (v19 && *(_DWORD *)(Name + 24) == 1952414066)
            return 1;
          goto LABEL_113;
        }
        if (*(_QWORD *)Name == 0x5F2E746375727473
          && *(_QWORD *)(Name + 8) == 0x5F657475706D6F63
          && *(_QWORD *)(Name + 16) == 0x656E696C65706970
          && *(_QWORD *)(Name + 24) == 0x745F65746174735FLL)
        {
          return 1;
        }
        v28 = *(_QWORD *)Name == 0x5F2E746375727473 && *(_QWORD *)(Name + 8) == 0x5F656C6269736976;
        v29 = v28 && *(_QWORD *)(Name + 16) == 0x6E6F6974636E7566;
        if (v29 && *(_QWORD *)(Name + 24) == 0x745F656C6261745FLL)
          return 1;
      }
    }
    else if (v2 < 0x15)
    {
      if (v2 < 0xF)
        return 0;
      goto LABEL_123;
    }
    if (*(_QWORD *)Name == 0x5F2E746375727473
      && *(_QWORD *)(Name + 8) == 0x6C6F707265746E69
      && *(_QWORD *)(Name + 13) == 0x745F746E616C6F70)
    {
      return 1;
    }
    if (v2 >= 0x25)
    {
      if (!memcmp((const void *)Name, "struct._intersection_function_table_t", 0x25uLL))
        return 1;
    }
    else if (v2 < 0x1C)
    {
LABEL_123:
      v34 = *v3 == 0x4D2E746375727473 && *(_QWORD *)((char *)v3 + 7) == 0x48564257534C544DLL;
      return v34 || v4 >= 0x21 && !memcmp(v3, "struct._MTLAxisAlignedBoundingBox", 0x21uLL);
    }
    if (*v3 == 0x5F2E746375727473
      && v3[1] == 0x6365737265746E69
      && v3[2] == 0x6575715F6E6F6974
      && *((_DWORD *)v3 + 6) == 1952414066)
    {
      return 1;
    }
    if (v4 >= 0x2A)
    {
      if (!memcmp(v3, "struct._primitive_acceleration_structure_t", 0x2AuLL))
        return 1;
    }
    else if (v4 != 41)
    {
      if (v4 < 0x1D)
        return *v3 == 0x4D2E746375727473 && *(_QWORD *)((char *)v3 + 7) == 0x48564257534C544DLL;
      goto LABEL_113;
    }
    if (!memcmp(v3, "struct._instance_acceleration_structure_t", 0x29uLL))
      return 1;
LABEL_113:
    if (*v3 == 0x5F2E746375727473
      && v3[1] == 0x6365737265746E69
      && v3[2] == 0x7365725F6E6F6974
      && *(_QWORD *)((char *)v3 + 21) == 0x745F746C75736572)
    {
      return 1;
    }
    goto LABEL_123;
  }
  return 1;
}

uint64_t getPointerOperand(uint64_t a1)
{
  unsigned int v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v1 == 5)
  {
    v2 = *(unsigned __int16 *)(a1 + 18);
    if (v2 == 49 || v2 == 34)
    {
      v3 = *(_DWORD *)(a1 + 20);
      goto LABEL_11;
    }
    return 0;
  }
  v4 = 0;
  if (a1 && v1 >= 0x1C)
  {
    if (v1 == 77 || v1 == 62)
    {
      v3 = *(_DWORD *)(a1 + 20);
      if ((v3 & 0x40000000) != 0)
      {
        v5 = *(_QWORD *)(a1 - 8);
        return *(_QWORD *)v5;
      }
LABEL_11:
      v5 = a1 - 32 * (v3 & 0x7FFFFFF);
      return *(_QWORD *)v5;
    }
    return 0;
  }
  return v4;
}

void MTLRAUWUtility::replaceAllUsesWith(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5;
  unsigned __int8 *v6;
  unsigned int v7;
  llvm::Value *v8;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  llvm::Instruction *v21;
  uint64_t v22;
  llvm::Instruction *v23;
  char *v24;
  char *v25;
  llvm::ConstantExpr *v26;
  llvm::ConstantExpr *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  llvm::Instruction *AsInstruction;
  unsigned int v32;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  llvm::Instruction *v41;
  uint64_t v42;
  llvm::Instruction *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46[2];
  llvm::ConstantExpr *v47;
  llvm::Value *v48;
  void *v49;
  unsigned int v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  _BYTE v54[104];
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  unsigned int v58;
  _QWORD v59[6];

  v59[4] = *MEMORY[0x24BDAC8D0];
  v52 = *(void **)(a2 + 8);
  v53 = 0;
  llvm::SmallVector<llvm::User *,4u>::SmallVector<llvm::Value::user_iterator_impl<llvm::User>>(&v57, (uint64_t *)&v52);
  v5 = v58;
  if (v58)
  {
    v45 = a3;
    do
    {
      v6 = (unsigned __int8 *)v57[v5 - 1];
      v58 = v5 - 1;
      v7 = v6[16];
      if (v7 <= 0x1B)
        v8 = 0;
      else
        v8 = (llvm::Value *)v6;
      v48 = v8;
      if (v8)
      {
        MTLIRBuilder::MTLIRBuilder<llvm::Instruction *&>((uint64_t)&v52, &v48);
        if (*((_BYTE *)v48 + 16) == 83 && v48 != 0)
        {
          v10 = *((_DWORD *)v48 + 5);
          v11 = v10 & 0x7FFFFFF;
          if ((v10 & 0x7FFFFFF) != 0)
          {
            v12 = 0;
            while (1)
            {
              v13 = (char *)v48 - 32 * v11;
              if ((v10 & 0x40000000) != 0)
                v13 = (char *)*((_QWORD *)v48 - 1);
              if (*(_QWORD *)&v13[32 * v12] == a2)
                break;
              if (++v12 == v11)
                goto LABEL_84;
            }
            v19 = *(_QWORD *)&v13[32 * *((unsigned int *)v48 + 15) + 8 * v12];
            v20 = *(_QWORD *)(v19 + 40);
            if (v20 == v19 + 40)
            {
              v23 = 0;
            }
            else
            {
              v21 = (llvm::Instruction *)(v20 - 24);
              if (v20)
                v22 = v20 - 24;
              else
                v22 = 0;
              if (*(unsigned __int8 *)(v22 + 16) - 29 >= 0xB)
                v23 = 0;
              else
                v23 = v21;
            }
            llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)&v52, v23);
          }
        }
LABEL_84:
        v44 = *(_QWORD *)(a3 + 24);
        if (!v44)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v44 + 48))(v44, &v52);
        llvm::User::replaceUsesOfWith();
        llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)&v56);
        llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v55);
        if (v52 != v54)
          free(v52);
      }
      else
      {
        if (v7 == 5)
          v14 = (uint64_t)v6;
        else
          v14 = 0;
        v47 = (llvm::ConstantExpr *)v14;
        if (v14)
        {
          v52 = v54;
          v53 = 0x400000000;
          llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)&v52, (uint64_t *)&v47);
          v15 = v53;
          if ((_DWORD)v53)
          {
            v16 = 0;
            do
            {
              v17 = *(_QWORD *)(*((_QWORD *)v52 + v16) + 8);
              if (v17)
              {
                do
                {
                  v18 = *(_BYTE **)(v17 + 24);
                  if (v18[16] != 5)
                    v18 = 0;
                  v49 = v18;
                  if (v18)
                    llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)&v52, (uint64_t *)&v49);
                  v17 = *(_QWORD *)(v17 + 8);
                }
                while (v17);
                v15 = v53;
              }
              ++v16;
            }
            while (v15 > v16);
          }
          else
          {
            v15 = 0;
          }
          v24 = (char *)v52;
          v25 = (char *)v52 + 8 * v15;
          while (v25 != v24)
          {
            v27 = (llvm::ConstantExpr *)*((_QWORD *)v25 - 1);
            v25 -= 8;
            v26 = v27;
            v46[0] = *((_QWORD *)v27 + 1);
            v46[1] = 0;
            llvm::SmallVector<llvm::User *,4u>::SmallVector<llvm::Value::user_iterator_impl<llvm::User>>(&v49, v46);
            v28 = (uint64_t *)v49;
            v29 = (uint64_t *)((char *)v49 + 8 * v50);
            if (v50)
            {
              do
              {
                v30 = *v28;
                v46[0] = 0;
                AsInstruction = (llvm::Instruction *)llvm::ConstantExpr::getAsInstruction(v26, 0);
                v46[0] = (uint64_t)AsInstruction;
                v32 = *(unsigned __int8 *)(v30 + 16);
                if (v32 != 83 || v30 == 0)
                {
                  if (v32 < 0x1C || v30 == 0)
                  {
                    llvm::Value::dump(v26);
                    llvm::Value::dump((llvm::Value *)v30);
                  }
                  else
                  {
                    llvm::Instruction::insertBefore(AsInstruction, (llvm::Instruction *)v30);
                  }
                }
                else
                {
                  v35 = *(_DWORD *)(v30 + 20);
                  v36 = v35 & 0x7FFFFFF;
                  if ((v35 & 0x7FFFFFF) != 0)
                  {
                    v37 = 0;
                    while (1)
                    {
                      v38 = v30 - 32 * v36;
                      if ((v35 & 0x40000000) != 0)
                        v38 = *(_QWORD *)(v30 - 8);
                      if (*(llvm::ConstantExpr **)(v38 + 32 * v37) == v26)
                        break;
                      if (++v37 == v36)
                        goto LABEL_72;
                    }
                    v39 = *(_QWORD *)(v38 + 32 * *(unsigned int *)(v30 + 60) + 8 * v37);
                    v40 = *(_QWORD *)(v39 + 40);
                    if (v40 == v39 + 40)
                    {
                      v43 = 0;
                    }
                    else
                    {
                      v41 = (llvm::Instruction *)(v40 - 24);
                      if (v40)
                        v42 = v40 - 24;
                      else
                        v42 = 0;
                      if (*(unsigned __int8 *)(v42 + 16) - 29 >= 0xB)
                        v43 = 0;
                      else
                        v43 = v41;
                    }
                    llvm::Instruction::insertBefore(AsInstruction, v43);
                    llvm::PHINode::setIncomingValue(v30, v37, v46[0]);
                  }
                }
LABEL_72:
                llvm::User::replaceUsesOfWith();
                if (v26 == v47)
                  llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)&v57, v46);
                ++v28;
              }
              while (v28 != v29);
              v28 = (uint64_t *)v49;
            }
            if (v28 != &v51)
              free(v28);
            llvm::User::dropAllReferences((uint64_t)v26);
          }
          if (v52 != v54)
            free(v52);
          a3 = v45;
        }
        else
        {
          llvm::Value::dump((llvm::Value *)v6);
        }
      }
      v5 = v58;
    }
    while (v58);
  }
  if (v57 != v59)
    free(v57);
}

void sub_240FD9904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  _Unwind_Resume(exception_object);
}

uint64_t llvm::User::dropAllReferences(uint64_t this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD **v5;
  uint64_t v6;

  v1 = *(_DWORD *)(this + 20);
  if ((v1 & 0x40000000) != 0)
  {
    v3 = *(_QWORD *)(this - 8);
    v2 = v1 & 0x7FFFFFF;
    if (!v2)
      return this;
  }
  else
  {
    v2 = v1 & 0x7FFFFFF;
    v3 = this - 32 * v2;
    if (!v2)
      return this;
  }
  v4 = 32 * v2;
  v5 = (_QWORD **)(v3 + 16);
  do
  {
    if (*(v5 - 2))
    {
      **v5 = *(v5 - 1);
      v6 = (uint64_t)*(v5 - 1);
      if (v6)
        *(_QWORD *)(v6 + 16) = *v5;
    }
    *(v5 - 2) = 0;
    v5 += 4;
    v4 -= 32;
  }
  while (v4);
  return this;
}

void MTLBoundsCheck::SharedPassData::~SharedPassData(MTLBoundsCheck::SharedPassData *this)
{
  char *v2;

  *(_QWORD *)this = &off_25111EAC8;
  v2 = (char *)this + 88;
  std::__hash_table<llvm::Value *,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,std::allocator<llvm::Value *>>::~__hash_table((uint64_t)this + 312);
  std::__hash_table<llvm::Value *,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,std::allocator<llvm::Value *>>::~__hash_table((uint64_t)this + 272);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 240);
  llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::~DenseMap((uint64_t)this + 208);
  std::__hash_table<std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>>>::~__hash_table((uint64_t)this + 168);
  std::__hash_table<llvm::Value *,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,std::allocator<llvm::Value *>>::~__hash_table((uint64_t)this + 128);
  std::__hash_table<llvm::Value *,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,std::allocator<llvm::Value *>>::~__hash_table((uint64_t)v2);
  llvm::Pass::~Pass(this);
}

{
  char *v2;

  *(_QWORD *)this = &off_25111EAC8;
  v2 = (char *)this + 88;
  std::__hash_table<llvm::Value *,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,std::allocator<llvm::Value *>>::~__hash_table((uint64_t)this + 312);
  std::__hash_table<llvm::Value *,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,std::allocator<llvm::Value *>>::~__hash_table((uint64_t)this + 272);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 240);
  llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::~DenseMap((uint64_t)this + 208);
  std::__hash_table<std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>>>::~__hash_table((uint64_t)this + 168);
  std::__hash_table<llvm::Value *,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,std::allocator<llvm::Value *>>::~__hash_table((uint64_t)this + 128);
  std::__hash_table<llvm::Value *,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,std::allocator<llvm::Value *>>::~__hash_table((uint64_t)v2);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x24268D8F0);
}

llvm::DataLayout *llvm::DataLayout::DataLayout(llvm::DataLayout *this, const llvm::DataLayout *a2)
{
  *((_WORD *)this + 4) = 0;
  *((_WORD *)this + 10) = 0;
  *((_QWORD *)this + 4) = (char *)this + 56;
  *(_OWORD *)((char *)this + 40) = xmmword_24105A440;
  *((_QWORD *)this + 8) = (char *)this + 80;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 9) = 0x1000000000;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = (char *)this + 248;
  *((_QWORD *)this + 30) = 0x800000000;
  *((_QWORD *)this + 47) = 0;
  *((_QWORD *)this + 48) = (char *)this + 400;
  *((_QWORD *)this + 49) = 0x800000000;
  llvm::DataLayout::operator=((uint64_t)this, (uint64_t)a2);
  return this;
}

void sub_240FD9B64(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void **v5;
  void *v6;
  void *v7;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  v7 = v2;
  v9 = *(void **)(v1 + 384);
  if (v9 != v7)
    free(v9);
  v10 = *(void **)(v1 + 232);
  if (v10 != v6)
    free(v10);
  if (*(char *)(v1 + 231) < 0)
    operator delete(*v5);
  v11 = *(void **)(v1 + 64);
  if (v11 != v4)
    free(v11);
  v12 = *(void **)(v1 + 32);
  if (v12 != v3)
    free(v12);
  _Unwind_Resume(exception_object);
}

uint64_t llvm::DataLayout::operator=(uint64_t a1, uint64_t a2)
{
  llvm::DataLayout::clear((llvm::DataLayout *)a1);
  std::string::operator=((std::string *)(a1 + 208), (const std::string *)(a2 + 208));
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
  *(_QWORD *)(a1 + 12) = *(_QWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  llvm::SmallVectorImpl<unsigned char>::operator=(a1 + 32, a2 + 32);
  llvm::SmallVectorImpl<llvm::LayoutAlignElem>::operator=(a1 + 64, a2 + 64);
  llvm::SmallVectorImpl<llvm::PointerAlignElem>::operator=(a1 + 232, a2 + 232);
  llvm::SmallVectorImpl<unsigned int>::operator=(a1 + 384, a2 + 384);
  return a1;
}

uint64_t llvm::SmallVectorImpl<unsigned char>::operator=(uint64_t a1, uint64_t a2)
{
  size_t v4;
  size_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_QWORD *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4)
        memmove(*(void **)a1, *(const void **)a2, v4);
    }
    else
    {
      if (*(_QWORD *)(a1 + 16) >= v4)
      {
        if (v5)
          memmove(*(void **)a1, *(const void **)a2, *(_QWORD *)(a1 + 8));
      }
      else
      {
        *(_QWORD *)(a1 + 8) = 0;
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v5 = 0;
      }
      v6 = *(_QWORD *)(a2 + 8);
      if (v5 != v6)
        memcpy((void *)(*(_QWORD *)a1 + v5), (const void *)(*(_QWORD *)a2 + v5), *(_QWORD *)a2 + v6 - (*(_QWORD *)a2 + v5));
    }
    *(_QWORD *)(a1 + 8) = v4;
  }
  return a1;
}

uint64_t llvm::SmallVectorImpl<llvm::LayoutAlignElem>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
        memmove(*(void **)a1, *(const void **)a2, 8 * v4 - 2);
      goto LABEL_12;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if ((_DWORD)v5)
      {
        memmove(*(void **)a1, *(const void **)a2, 8 * v5 - 2);
        goto LABEL_10;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v5 = 0;
LABEL_10:
    v6 = *(unsigned int *)(a2 + 8);
    if (v5 != v6)
      memcpy((void *)(*(_QWORD *)a1 + 8 * v5), (const void *)(*(_QWORD *)a2 + 8 * v5), *(_QWORD *)a2 + 8 * v6 - (*(_QWORD *)a2 + 8 * v5));
LABEL_12:
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

uint64_t llvm::SmallVectorImpl<llvm::PointerAlignElem>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
        memmove(*(void **)a1, *(const void **)a2, 16 * v4);
      goto LABEL_12;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if ((_DWORD)v5)
      {
        memmove(*(void **)a1, *(const void **)a2, 16 * v5);
        goto LABEL_10;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v5 = 0;
LABEL_10:
    v6 = *(unsigned int *)(a2 + 8);
    if (v5 != v6)
      memcpy((void *)(*(_QWORD *)a1 + 16 * v5), (const void *)(*(_QWORD *)a2 + 16 * v5), *(_QWORD *)a2 + 16 * v6 - (*(_QWORD *)a2 + 16 * v5));
LABEL_12:
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

uint64_t llvm::SmallVectorImpl<unsigned int>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
        memmove(*(void **)a1, *(const void **)a2, 4 * v4);
      goto LABEL_12;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if ((_DWORD)v5)
      {
        memmove(*(void **)a1, *(const void **)a2, 4 * v5);
        goto LABEL_10;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v5 = 0;
LABEL_10:
    v6 = *(unsigned int *)(a2 + 8);
    if (v5 != v6)
      memcpy((void *)(*(_QWORD *)a1 + 4 * v5), (const void *)(*(_QWORD *)a2 + 4 * v5), *(_QWORD *)a2 + 4 * v6 - (*(_QWORD *)a2 + 4 * v5));
LABEL_12:
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

{
  const void *v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      llvm::SmallVectorImpl<llvm::CallInst *>::assignRemote(a1, a2);
      return a1;
    }
    v6 = *(unsigned int *)(a2 + 8);
    v7 = *(unsigned int *)(a1 + 8);
    if (v7 >= v6)
    {
      if ((_DWORD)v6)
        memmove(*(void **)a1, v4, 4 * v6);
      goto LABEL_14;
    }
    if (*(_DWORD *)(a1 + 12) >= v6)
    {
      if ((_DWORD)v7)
      {
        memmove(*(void **)a1, v4, 4 * v7);
        goto LABEL_12;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v7 = 0;
LABEL_12:
    v8 = *(unsigned int *)(a2 + 8);
    if (v7 != v8)
      memcpy((void *)(*(_QWORD *)a1 + 4 * v7), (const void *)(*(_QWORD *)a2 + 4 * v7), *(_QWORD *)a2 + 4 * v8 - (*(_QWORD *)a2 + 4 * v7));
LABEL_14:
    *(_DWORD *)(a1 + 8) = v6;
    *(_DWORD *)(a2 + 8) = 0;
  }
  return a1;
}

_QWORD *llvm::SmallVector<llvm::Instruction *,4u>::SmallVector(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = a1 + 2;
  a1[1] = 0x400000000;
  llvm::SmallVectorImpl<llvm::Value *>::assign((uint64_t)a1, a2, *a3);
  return a1;
}

void sub_240FD9FC8(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  void *v3;

  v3 = v2;
  if (*v1 != v3)
    free(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t llvm::DenseMap<llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::ConstantExpr *,void>,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>::~DenseMap(uint64_t a1)
{
  llvm::deallocate_buffer(*(llvm **)a1, (void *)(8 * *(unsigned int *)(a1 + 16)));
  return a1;
}

void llvm::SmallVectorImpl<std::string>::clear(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v2)
  {
    v3 = *a1;
    v4 = 24 * v2;
    do
    {
      if (*(char *)(v3 + v4 - 1) < 0)
        operator delete(*(void **)(v3 + v4 - 24));
      v4 -= 24;
    }
    while (v4);
  }
  *((_DWORD *)a1 + 2) = 0;
}

uint64_t llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(llvm **)(*(_QWORD *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0)
          llvm::deallocate_buffer(v5, (void *)(*(_QWORD *)v5 + 17));
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::~DenseMap(uint64_t a1)
{
  llvm::deallocate_buffer(*(llvm **)a1, (void *)(8 * *(unsigned int *)(a1 + 16)));
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

uint64_t MTLMDBuilder::getMetadata<int>()
{
  llvm::IntegerType::get();
  llvm::ConstantInt::get();
  return llvm::ValueAsMetadata::get();
}

_QWORD *std::__hash_table<std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::__unordered_map_hasher<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::hash<llvm::DISubprogram *>,std::equal_to<llvm::DISubprogram *>,true>,std::__unordered_map_equal<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::equal_to<llvm::DISubprogram *>,std::hash<llvm::DISubprogram *>,true>,std::allocator<std::__hash_value_type<llvm::DISubprogram *,unsigned int>>>::__emplace_unique_key_args<llvm::DISubprogram *,llvm::DISubprogram *&,unsigned long>(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  void **v13;
  _QWORD *v14;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v9 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v8 >> 47) ^ v8);
  v10 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = v10 & (v11 - 1);
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        do
        {
          v15 = v14[1];
          if (v15 == v10)
          {
            if (v14[2] == *a2)
              return v14;
          }
          else
          {
            if (v12.u32[0] > 1uLL)
            {
              if (v15 >= v11)
                v15 %= v11;
            }
            else
            {
              v15 &= v11 - 1;
            }
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  v14 = operator new(0x20uLL);
  *v14 = 0;
  v14[1] = v10;
  v14[2] = *a3;
  *((_DWORD *)v14 + 6) = *a4;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v11 || (float)(v17 * (float)v11) < v16)
  {
    v18 = 1;
    if (v11 >= 3)
      v18 = (v11 & (v11 - 1)) != 0;
    v19 = v18 | (2 * v11);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>>>::__rehash<true>(a1, v21);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *v14 = *v23;
LABEL_38:
    *v23 = v14;
    goto LABEL_39;
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v22 + 8 * v4) = a1 + 16;
  if (*v14)
  {
    v24 = *(_QWORD *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v24 >= v11)
        v24 %= v11;
    }
    else
    {
      v24 &= v11 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_240FDA3E8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<llvm::DILocation *,unsigned int>,std::__unordered_map_hasher<llvm::DILocation *,std::__hash_value_type<llvm::DILocation *,unsigned int>,std::hash<llvm::DILocation *>,std::equal_to<llvm::DILocation *>,true>,std::__unordered_map_equal<llvm::DILocation *,std::__hash_value_type<llvm::DILocation *,unsigned int>,std::equal_to<llvm::DILocation *>,std::hash<llvm::DILocation *>,true>,std::allocator<std::__hash_value_type<llvm::DILocation *,unsigned int>>>::__emplace_unique_key_args<llvm::DILocation *,llvm::DILocation *&,unsigned long>(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  void **v13;
  _QWORD *v14;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v9 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v8 >> 47) ^ v8);
  v10 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = v10 & (v11 - 1);
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        do
        {
          v15 = v14[1];
          if (v15 == v10)
          {
            if (v14[2] == *a2)
              return v14;
          }
          else
          {
            if (v12.u32[0] > 1uLL)
            {
              if (v15 >= v11)
                v15 %= v11;
            }
            else
            {
              v15 &= v11 - 1;
            }
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  v14 = operator new(0x20uLL);
  *v14 = 0;
  v14[1] = v10;
  v14[2] = *a3;
  *((_DWORD *)v14 + 6) = *a4;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v11 || (float)(v17 * (float)v11) < v16)
  {
    v18 = 1;
    if (v11 >= 3)
      v18 = (v11 & (v11 - 1)) != 0;
    v19 = v18 | (2 * v11);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>>>::__rehash<true>(a1, v21);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *v14 = *v23;
LABEL_38:
    *v23 = v14;
    goto LABEL_39;
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v22 + 8 * v4) = a1 + 16;
  if (*v14)
  {
    v24 = *(_QWORD *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v24 >= v11)
        v24 %= v11;
    }
    else
    {
      v24 &= v11 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_240FDA64C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *llvm::SmallVector<llvm::User *,16u>::SmallVector<llvm::Value::user_iterator_impl<llvm::User>,void>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a1 + 2;
  a1[1] = 0x1000000000;
  llvm::SmallVectorImpl<llvm::User *>::append<llvm::Value::user_iterator_impl<llvm::User>,void>((uint64_t)a1, a2, a3);
  return a1;
}

void sub_240FDA698(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  void *v3;

  v3 = v2;
  if (*v1 != v3)
    free(*v1);
  _Unwind_Resume(exception_object);
}

_QWORD *llvm::SmallPtrSetImplBase::insert_imp(llvm::SmallPtrSetImplBase *this, const void *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = *((_QWORD *)this + 1);
  if (v2 != *(_QWORD *)this)
    return (_QWORD *)llvm::SmallPtrSetImplBase::insert_imp_big(this, a2);
  v5 = *((unsigned int *)this + 5);
  if (!(_DWORD)v5)
  {
LABEL_12:
    if (v5 < *((_DWORD *)this + 4))
    {
      *((_DWORD *)this + 5) = v5 + 1;
      *(_QWORD *)(v2 + 8 * v5) = a2;
      return (_QWORD *)(*(_QWORD *)this + 8 * v5);
    }
    return (_QWORD *)llvm::SmallPtrSetImplBase::insert_imp_big(this, a2);
  }
  v6 = 0;
  v7 = 8 * v5;
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  while ((const void *)*v3 != a2)
  {
    if (*v3 == -2)
      v6 = v3;
    ++v3;
    v7 -= 8;
    if (!v7)
    {
      if (!v6)
        goto LABEL_12;
      *v6 = a2;
      --*((_DWORD *)this + 6);
      return v6;
    }
  }
  return v3;
}

void std::__function::__func<std::function<void ()(llvm::Metadata *)> MakeMDResolver<unsigned int>(unsigned int &)::$_0,std::allocator<std::function<void ()(llvm::Metadata *)> MakeMDResolver<unsigned int>(unsigned int &)::$_0>,void ()(llvm::Metadata *)>::~__func()
{
  JUMPOUT(0x24268D8F0);
}

_QWORD *std::__function::__func<std::function<void ()(llvm::Metadata *)> MakeMDResolver<unsigned int>(unsigned int &)::$_0,std::allocator<std::function<void ()(llvm::Metadata *)> MakeMDResolver<unsigned int>(unsigned int &)::$_0>,void ()(llvm::Metadata *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_25111EB68;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::function<void ()(llvm::Metadata *)> MakeMDResolver<unsigned int>(unsigned int &)::$_0,std::allocator<std::function<void ()(llvm::Metadata *)> MakeMDResolver<unsigned int>(unsigned int &)::$_0>,void ()(llvm::Metadata *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_25111EB68;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::function<void ()(llvm::Metadata *)> MakeMDResolver<unsigned int>(unsigned int &)::$_0,std::allocator<std::function<void ()(llvm::Metadata *)> MakeMDResolver<unsigned int>(unsigned int &)::$_0>,void ()(llvm::Metadata *)>::operator()(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(*(_QWORD *)a2 + 128);
  v3 = (_QWORD *)(v2 + 24);
  if (*(_DWORD *)(v2 + 32) >= 0x41u)
    v3 = (_QWORD *)*v3;
  **(_DWORD **)(result + 8) = *v3;
  return result;
}

void std::__function::__func<std::function<void ()(llvm::Metadata *)> MakeMDResolver<BOOL>(BOOL &)::$_0,std::allocator<std::function<void ()(llvm::Metadata *)> MakeMDResolver<BOOL>(BOOL &)::$_0>,void ()(llvm::Metadata *)>::~__func()
{
  JUMPOUT(0x24268D8F0);
}

_QWORD *std::__function::__func<std::function<void ()(llvm::Metadata *)> MakeMDResolver<BOOL>(BOOL &)::$_0,std::allocator<std::function<void ()(llvm::Metadata *)> MakeMDResolver<BOOL>(BOOL &)::$_0>,void ()(llvm::Metadata *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_25111EBB0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::function<void ()(llvm::Metadata *)> MakeMDResolver<BOOL>(BOOL &)::$_0,std::allocator<std::function<void ()(llvm::Metadata *)> MakeMDResolver<BOOL>(BOOL &)::$_0>,void ()(llvm::Metadata *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_25111EBB0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::function<void ()(llvm::Metadata *)> MakeMDResolver<BOOL>(BOOL &)::$_0,std::allocator<std::function<void ()(llvm::Metadata *)> MakeMDResolver<BOOL>(BOOL &)::$_0>,void ()(llvm::Metadata *)>::operator()(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(*(_QWORD *)a2 + 128);
  v3 = (_QWORD *)(v2 + 24);
  if (*(_DWORD *)(v2 + 32) >= 0x41u)
    v3 = (_QWORD *)*v3;
  **(_BYTE **)(result + 8) = *v3 != 0;
  return result;
}

void std::__function::__func<std::function<void ()(llvm::Metadata *)> MakeMDResolver<llvm::Value *>(llvm::Value * &)::$_0,std::allocator<std::function<void ()(llvm::Metadata *)> MakeMDResolver<llvm::Value *>(llvm::Value * &)::$_0>,void ()(llvm::Metadata *)>::~__func()
{
  JUMPOUT(0x24268D8F0);
}

_QWORD *std::__function::__func<std::function<void ()(llvm::Metadata *)> MakeMDResolver<llvm::Value *>(llvm::Value * &)::$_0,std::allocator<std::function<void ()(llvm::Metadata *)> MakeMDResolver<llvm::Value *>(llvm::Value * &)::$_0>,void ()(llvm::Metadata *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_25111EBF8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::function<void ()(llvm::Metadata *)> MakeMDResolver<llvm::Value *>(llvm::Value * &)::$_0,std::allocator<std::function<void ()(llvm::Metadata *)> MakeMDResolver<llvm::Value *>(llvm::Value * &)::$_0>,void ()(llvm::Metadata *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_25111EBF8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::function<void ()(llvm::Metadata *)> MakeMDResolver<llvm::Value *>(llvm::Value * &)::$_0,std::allocator<std::function<void ()(llvm::Metadata *)> MakeMDResolver<llvm::Value *>(llvm::Value * &)::$_0>,void ()(llvm::Metadata *)>::operator()(uint64_t result, uint64_t a2)
{
  **(_QWORD **)(result + 8) = *(_QWORD *)(*(_QWORD *)a2 + 128);
  return result;
}

uint64_t llvm::optional_detail::OptionalStorage<std::function<void ()(llvm::Metadata *)>,false>::operator=(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 32))
  {
    std::__function::__value_func<void ()(llvm::Metadata *)>::operator=[abi:ne180100]((_QWORD *)a1, a2);
  }
  else
  {
    std::__function::__value_func<void ()(llvm::Metadata *)>::__value_func[abi:ne180100](a1, a2);
    *(_BYTE *)(a1 + 32) = 1;
  }
  return a1;
}

_QWORD *std::__function::__value_func<void ()(llvm::Metadata *)>::operator=[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (_QWORD *)a1[3];
  a1[3] = 0;
  if (v4 == a1)
  {
    v5 = 4;
    v4 = a1;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = *(_QWORD *)(a2 + 24);
  if (v6)
  {
    if (v6 == a2)
    {
      a1[3] = a1;
      (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v6;
      *(_QWORD *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(llvm::Metadata *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void std::__function::__func<std::function<void ()(llvm::Metadata *)> MakeMDResolver<unsigned int>(llvm::Optional<unsigned int> &)::{lambda(llvm::Metadata *)#1},std::allocator<std::function<void ()(llvm::Metadata *)> MakeMDResolver<unsigned int>(llvm::Optional<unsigned int> &)::{lambda(llvm::Metadata *)#1}>,void ()(llvm::Metadata *)>::~__func()
{
  JUMPOUT(0x24268D8F0);
}

_QWORD *std::__function::__func<std::function<void ()(llvm::Metadata *)> MakeMDResolver<unsigned int>(llvm::Optional<unsigned int> &)::{lambda(llvm::Metadata *)#1},std::allocator<std::function<void ()(llvm::Metadata *)> MakeMDResolver<unsigned int>(llvm::Optional<unsigned int> &)::{lambda(llvm::Metadata *)#1}>,void ()(llvm::Metadata *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_25111EC40;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::function<void ()(llvm::Metadata *)> MakeMDResolver<unsigned int>(llvm::Optional<unsigned int> &)::{lambda(llvm::Metadata *)#1},std::allocator<std::function<void ()(llvm::Metadata *)> MakeMDResolver<unsigned int>(llvm::Optional<unsigned int> &)::{lambda(llvm::Metadata *)#1}>,void ()(llvm::Metadata *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_25111EC40;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<std::function<void ()(llvm::Metadata *)> MakeMDResolver<unsigned int>(llvm::Optional<unsigned int> &)::{lambda(llvm::Metadata *)#1},std::allocator<std::function<void ()(llvm::Metadata *)> MakeMDResolver<unsigned int>(llvm::Optional<unsigned int> &)::{lambda(llvm::Metadata *)#1}>,void ()(llvm::Metadata *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<std::function<void ()(llvm::Metadata *)> MakeMDResolver<unsigned int>(llvm::Optional<unsigned int> &)::{lambda(llvm::Metadata *)#1} &,llvm::Metadata *>((uint64_t *)(a1 + 8), a2);
}

_QWORD *std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<std::function<void ()(llvm::Metadata *)> MakeMDResolver<unsigned int>(llvm::Optional<unsigned int> &)::{lambda(llvm::Metadata *)#1} &,llvm::Metadata *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  int v9;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  v10[0] = &off_25111EB68;
  v10[1] = &v9;
  v11 = v10;
  v3 = *(_QWORD *)(v2 + 128);
  v4 = (_QWORD *)(v3 + 24);
  if (*(_DWORD *)(v3 + 32) >= 0x41u)
    v4 = (_QWORD *)*v4;
  v5 = *(_DWORD *)v4;
  v9 = v5;
  v6 = *a1;
  if (!*(_BYTE *)(*a1 + 4))
    *(_BYTE *)(v6 + 4) = 1;
  *(_DWORD *)v6 = v5;
  result = v11;
  if (v11 == v10)
  {
    v8 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void std::__function::__func<getStaticBoundsInfo(llvm::MDTuple *)::$_0,std::allocator<getStaticBoundsInfo(llvm::MDTuple *)::$_0>,void ()(llvm::Metadata *)>::~__func()
{
  JUMPOUT(0x24268D8F0);
}

_QWORD *std::__function::__func<getStaticBoundsInfo(llvm::MDTuple *)::$_0,std::allocator<getStaticBoundsInfo(llvm::MDTuple *)::$_0>,void ()(llvm::Metadata *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_25111EC88;
  return result;
}

void std::__function::__func<getStaticBoundsInfo(llvm::MDTuple *)::$_0,std::allocator<getStaticBoundsInfo(llvm::MDTuple *)::$_0>,void ()(llvm::Metadata *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_25111EC88;
}

uint64_t MTLDebugSymbolCollectionPass::runOnModule(MTLDebugSymbolCollectionPass *this, llvm::Module *a2)
{
  llvm::Module *v2;
  char v4;
  llvm::LLVMContext *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t j;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  int v14;
  BOOL v15;
  uint64_t MetadataImpl;
  llvm::Module *v18;
  llvm::Module *v19;
  char *i;

  v2 = (llvm::Module *)*((_QWORD *)a2 + 4);
  v18 = (llvm::Module *)((char *)a2 + 24);
  if (v2 == (llvm::Module *)((char *)a2 + 24))
    return 0;
  v4 = 0;
  v5 = *(llvm::LLVMContext **)a2;
  do
  {
    v6 = (char *)v2 - 56;
    if (!v2)
      v6 = 0;
    v19 = v2;
    if ((v6[33] & 0x20) == 0)
    {
      v7 = *((_QWORD *)v6 + 10);
      for (i = v6 + 72; (char *)v7 != i; v7 = *(_QWORD *)(v7 + 8))
      {
        v8 = v7 - 24;
        if (!v7)
          v8 = 0;
        v9 = v8 + 40;
        for (j = *(_QWORD *)(v8 + 48); j != v9; j = *(_QWORD *)(j + 8))
        {
          if (j)
            v11 = j - 24;
          else
            v11 = 0;
          v12 = *(unsigned __int8 *)(v11 + 16) - 60;
          v13 = v12 > 0x18;
          v14 = (1 << v12) & 0x1000003;
          v15 = v13 || v14 == 0;
          if (!v15 && (*(_QWORD *)(v11 + 48) || (*(_BYTE *)(v11 + 23) & 0x20) != 0))
          {
            MetadataImpl = llvm::Instruction::getMetadataImpl();
            if (MetadataImpl)
            {
              MTLBoundsCheck::SharedPassData::indexForDILocation(*((_QWORD *)this + 8), MetadataImpl);
              llvm::ConstantInt::get();
              llvm::ValueAsMetadata::get();
              v4 = 1;
              llvm::MDTuple::getImpl();
              llvm::Instruction::setMetadata();
            }
          }
        }
      }
    }
    v2 = (llvm::Module *)*((_QWORD *)v19 + 1);
  }
  while (v2 != v18);
  if ((v4 & 1) == 0)
    return 0;
  MTLBoundsCheck::SerializedData::toMetaData(*(MTLBoundsCheck::SerializedData **)(*((_QWORD *)this + 8) + 64), v5);
  llvm::Module::getOrInsertNamedMetadata();
  llvm::NamedMDNode::addOperand();
  return 1;
}

_QWORD *createMTLDebugSymbolCollectionPass(MTLBoundsCheck::SharedPassData *a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  MetalModulePass::MetalModulePass((uint64_t)v2, (uint64_t)&MTLDebugSymbolCollectionPass::ID, (uint64_t)a1);
  *v2 = &off_25111ECD0;
  return v2;
}

void sub_240FDAE1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x24268D8F0](v1, 0x10E1C40C8265ECALL);
  _Unwind_Resume(a1);
}

void MTLDebugSymbolCollectionPass::~MTLDebugSymbolCollectionPass(MTLDebugSymbolCollectionPass *this)
{
  char *v2;

  *(_QWORD *)this = &off_25111E050;
  v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
}

{
  char *v2;

  *(_QWORD *)this = &off_25111E050;
  v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x24268D8F0);
}

uint64_t createMTLFoldExpansionPass(MTLBoundsCheck::SharedPassData *a1)
{
  uint64_t v2;

  v2 = operator new();
  MetalModulePass::MetalModulePass(v2, (uint64_t)&MTLFoldExpansionPass::ID, (uint64_t)a1);
  *(_QWORD *)v2 = &off_25111ED70;
  *(_BYTE *)(v2 + 184) = 0;
  return v2;
}

void sub_240FDAF38(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x24268D8F0](v1, 0x10E1C40AE138AB1);
  _Unwind_Resume(a1);
}

void MTLFoldExpansionPass::~MTLFoldExpansionPass(MTLFoldExpansionPass *this)
{
  char *v2;

  *(_QWORD *)this = &off_25111E050;
  v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
}

{
  char *v2;

  *(_QWORD *)this = &off_25111E050;
  v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x24268D8F0);
}

BOOL MTLFoldExpansionPass::runOnModule(MTLFoldExpansionPass *this, llvm::Module *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *i;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *j;
  uint64_t v11;
  uint64_t v12;
  _QWORD *Name;
  unint64_t v14;
  uint64_t *v16;
  uint64_t v17;
  llvm::Instruction *v18;
  int v19;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  _QWORD v24[18];

  v24[16] = *MEMORY[0x24BDAC8D0];
  MetalModulePass::runOnModule(this, a2);
  v22 = v24;
  v23 = 0x1000000000;
  v4 = (_QWORD *)*((_QWORD *)a2 + 4);
  if (v4 == (_QWORD *)((char *)a2 + 24))
  {
    v19 = *((unsigned __int8 *)this + 184);
  }
  else
  {
    do
    {
      v5 = v4 - 7;
      if (!v4)
        v5 = 0;
      v6 = v5 + 9;
      for (i = (_QWORD *)v5[10]; i != v6; i = (_QWORD *)i[1])
      {
        v8 = i - 3;
        if (!i)
          v8 = 0;
        v9 = v8 + 5;
        for (j = (_QWORD *)v8[6]; j != v9; j = (_QWORD *)j[1])
        {
          if (j)
            v11 = (uint64_t)(j - 3);
          else
            v11 = 0;
          if (*(_BYTE *)(v11 + 16) == 84)
          {
            v12 = *(_QWORD *)(v11 - 32);
            if (v12)
            {
              if (!*(_BYTE *)(v12 + 16) && *(_QWORD *)(v12 + 24) == *(_QWORD *)(v11 + 72))
              {
                Name = (_QWORD *)llvm::Value::getName((llvm::Value *)v12);
                if (v14 >= 0xB
                  && *Name == 0x662E73646E756F62
                  && *(_QWORD *)((char *)Name + 3) == 0x646C6F662E73646ELL)
                {
                  *((_BYTE *)this + 184) = 1;
                  MTLFoldExpansionPass::createGEPFromFold(this, (llvm::Value *)v11);
                  llvm::Value::replaceAllUsesWith();
                  v21 = v11;
                  llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)&v22, &v21);
                }
              }
            }
          }
          if (*(_QWORD *)(v11 + 48) || (*(_BYTE *)(v11 + 23) & 0x20) != 0)
          {
            if (llvm::Instruction::getMetadataImpl())
              llvm::Instruction::setMetadata();
          }
        }
      }
      v4 = (_QWORD *)v4[1];
    }
    while (v4 != (_QWORD *)((char *)a2 + 24));
    v16 = (uint64_t *)v22;
    if ((_DWORD)v23)
    {
      v17 = 8 * v23;
      do
      {
        v18 = (llvm::Instruction *)*v16;
        llvm::User::dropAllReferences(*v16);
        llvm::Instruction::eraseFromParent(v18);
        ++v16;
        v17 -= 8;
      }
      while (v17);
      v16 = (uint64_t *)v22;
    }
    v19 = *((unsigned __int8 *)this + 184);
    if (v16 != v24)
      free(v16);
  }
  return v19 != 0;
}

void sub_240FDB23C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13)
{
  if (a13 != a10)
    free(a13);
  _Unwind_Resume(exception_object);
}

uint64_t MTLFoldExpansionPass::createGEPFromFold(MetalModulePass *a1, llvm::Value *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  llvm::Value *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t TypeForStride;
  llvm::Value *Cast;
  llvm::Type *v12;
  uint64_t v13;
  unsigned int i;
  uint64_t v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  llvm::Value *v21;
  llvm::Instruction *NSWFoldAdd;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t j;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  uint64_t *v38;
  uint64_t v40;
  uint64_t v41;
  _WORD v43[20];
  char v44[32];
  __int16 v45;
  uint64_t v46[4];
  __int16 v47;
  llvm::Value *v48;
  void *v49;
  unsigned int v50;
  uint64_t v51;
  __int16 v52;
  void *v53[2];
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[8];

  v56[7] = *MEMORY[0x24BDAC8D0];
  v48 = a2;
  MTLIRBuilder::MTLIRBuilder<llvm::CallInst *&>((uint64_t)v53, &v48);
  v3 = (uint64_t *)((char *)v48 - 32 * (*((_DWORD *)v48 + 5) & 0x7FFFFFF));
  v4 = *v3;
  v5 = v3[12];
  v6 = (int *)(v5 + 24);
  if (*(_DWORD *)(v5 + 32) >= 0x41u)
    v6 = *(int **)v6;
  v7 = (llvm::Value *)v3[4];
  v8 = *(_QWORD *)v4;
  v9 = **(_QWORD **)(*(_QWORD *)v4 + 16);
  TypeForStride = MetalModulePass::getTypeForStride(a1, *v6);
  if (!TypeForStride)
    TypeForStride = v9;
  if (TypeForStride != v8)
    v8 = llvm::PointerType::get();
  v52 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v53, 49, v4, v8, (uint64_t)&v49);
  v12 = **(llvm::Type ***)(*(_QWORD *)Cast + 16);
  v52 = 257;
  v13 = llvm::IRBuilderBase::CreateInBoundsGEP((llvm::IRBuilderBase *)v53, v12, Cast, v7, (const llvm::Twine *)&v49);
  v46[0] = *((_QWORD *)v48 + 1);
  v46[1] = 0;
  llvm::SmallVector<llvm::User *,8u>::SmallVector<llvm::Value::user_iterator_impl<llvm::User>>(&v49, v46);
  for (i = v50; v50; i = v50)
  {
    v15 = *((_QWORD *)v49 + i - 1);
    v16 = i - 1;
    v50 = i - 1;
    v17 = *(unsigned __int8 *)(v15 + 16);
    if (v15 && v17 == 62)
    {
      if ((*(_DWORD *)(v15 + 20) & 0x7FFFFFF) == 2)
      {
        v18 = *(_QWORD *)v48;
        v47 = 257;
        llvm::IRBuilderBase::CreateCast((uint64_t)v53, 49, v4, v18, (uint64_t)v46);
        llvm::User::replaceUsesOfWith();
        v19 = *(_QWORD *)(v15 - 32 * (*(_DWORD *)(v15 + 20) & 0x7FFFFFF) + 32);
        v20 = *((_QWORD *)a1 + 10);
        v47 = 257;
        v21 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v53, 38, v19, v20, (uint64_t)v46);
        v45 = 257;
        NSWFoldAdd = MTLIRBuilder::CreateNSWFoldAdd((MTLIRBuilder *)v53, v7, v21, (const llvm::Twine *)v44);
        v23 = *((_QWORD *)a1 + 9);
        v43[16] = 257;
        v24 = llvm::IRBuilderBase::CreateCast((uint64_t)v53, 39, (uint64_t)NSWFoldAdd, v23, (uint64_t)v43);
        v25 = v15 - 32 * (*(_DWORD *)(v15 + 20) & 0x7FFFFFF);
        v26 = (uint64_t *)(v25 + 32);
        if (*(_QWORD *)(v25 + 32))
        {
          **(_QWORD **)(v25 + 48) = *(_QWORD *)(v25 + 40);
          v27 = *(_QWORD *)(v25 + 40);
          if (v27)
            *(_QWORD *)(v27 + 16) = *(_QWORD *)(v25 + 48);
        }
        *v26 = v24;
        if (v24)
        {
          v30 = *(_QWORD *)(v24 + 8);
          v28 = (uint64_t **)(v24 + 8);
          v29 = v30;
          *(_QWORD *)(v25 + 40) = v30;
          if (v30)
            *(_QWORD *)(v29 + 16) = v25 + 40;
          *(_QWORD *)(v25 + 48) = v28;
          *v28 = v26;
        }
      }
    }
    else if (v15 && v17 == 77)
    {
      llvm::SmallVectorImpl<llvm::User *>::insert<llvm::Value::user_iterator_impl<llvm::User>,void>((uint64_t)&v49, (uint64_t)v49 + 8 * v16, *(_QWORD *)(v15 + 8), 0);
    }
    else if (v15 && v17 == 60 || v15 && v17 == 61)
    {
      v31 = **(_QWORD **)(v15 - 32);
      v47 = 257;
      llvm::IRBuilderBase::CreateCast((uint64_t)v53, 49, v13, v31, (uint64_t)v46);
      llvm::User::replaceUsesOfWith();
    }
    else if (v17 == 84 && v15 != 0)
    {
      for (j = 0; j < llvm::compat::getNumArgOperands((llvm::CallBase *)v15); ++j)
      {
        v34 = *(_QWORD *)(v15 - 32 * (*(_DWORD *)(v15 + 20) & 0x7FFFFFF) + 32 * j);
        v35 = *(_QWORD *)v34;
        if (*(_BYTE *)(*(_QWORD *)v34 + 8) == 15)
        {
          v36 = *(unsigned __int8 *)(v34 + 16);
          if (v36 >= 0x1C)
          {
            do
            {
              if (v36 != 77)
                break;
              v37 = *(_DWORD *)(v34 + 20);
              v38 = (v37 & 0x40000000) != 0 ? *(uint64_t **)(v34 - 8) : (uint64_t *)(v34 - 32 * (v37 & 0x7FFFFFF));
              v34 = *v38;
              v36 = *(unsigned __int8 *)(v34 + 16);
            }
            while (v34 && v36 > 0x1B);
          }
          if ((llvm::Value *)v34 == v48)
          {
            v47 = 257;
            v40 = llvm::IRBuilderBase::CreateCast((uint64_t)v53, 49, v13, v35, (uint64_t)v46);
            llvm::CallBase::setArgOperand(v15, j, v40);
          }
        }
      }
    }
  }
  v41 = llvm::UndefValue::get();
  if (v49 != &v51)
    free(v49);
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v56);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v55);
  if (v53[0] != &v54)
    free(v53[0]);
  return v41;
}

void sub_240FDB6AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35)
{
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder(&a35);
  _Unwind_Resume(a1);
}

uint64_t MTLIRBuilder::MTLIRBuilder<llvm::CallInst *&>(uint64_t a1, llvm::Value **a2)
{
  llvm::LLVMContext **v3;

  v3 = (llvm::LLVMContext **)llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::IRBuilder(a1, *a2, 0, 0, 0);
  MTLIRBuilder::initTypeCache((MTLIRBuilder *)v3, v3[8]);
  return a1;
}

void sub_240FDB764(_Unwind_Exception *a1)
{
  void **v1;

  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder(v1);
  _Unwind_Resume(a1);
}

uint64_t createMTLGVEmulationPass(MTLBoundsCheck::SharedPassData *a1)
{
  uint64_t v2;

  v2 = operator new();
  MetalModulePass::MetalModulePass(v2, (uint64_t)&MTLGVEmulation::ID, (uint64_t)a1);
  *(_QWORD *)v2 = &off_25111EE10;
  *(_QWORD *)(v2 + 200) = 0;
  *(_QWORD *)(v2 + 208) = 0;
  *(_QWORD *)(v2 + 216) = 0x1800000000;
  *(_QWORD *)(v2 + 232) = v2 + 248;
  *(_QWORD *)(v2 + 240) = 0x400000000;
  *(_QWORD *)(v2 + 280) = 0;
  *(_QWORD *)(v2 + 288) = 0;
  *(_DWORD *)(v2 + 296) = 0;
  *(_QWORD *)(v2 + 304) = 0;
  *(_QWORD *)(v2 + 312) = 0;
  *(_DWORD *)(v2 + 320) = 0;
  return v2;
}

void sub_240FDB800(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x24268D8F0](v1, 0x10E1C407BC3077FLL);
  _Unwind_Resume(a1);
}

void MTLGVEmulation::~MTLGVEmulation(MTLGVEmulation *this)
{
  char *v2;

  llvm::DenseMap<llvm::Function *,llvm::Value *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::Value *>>::~DenseMap((uint64_t)this + 304);
  llvm::DenseMap<llvm::Function *,llvm::Function *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::Function *>>::~DenseMap((uint64_t)this + 280);
  v2 = (char *)*((_QWORD *)this + 29);
  if (v2 != (char *)this + 248)
    free(v2);
  llvm::StringMap<GVStructElementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 200);
  *(_QWORD *)this = &off_25111E050;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 136);
  llvm::Pass::~Pass(this);
}

{
  char *v2;

  llvm::DenseMap<llvm::Function *,llvm::Value *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::Value *>>::~DenseMap((uint64_t)this + 304);
  llvm::DenseMap<llvm::Function *,llvm::Function *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::Function *>>::~DenseMap((uint64_t)this + 280);
  v2 = (char *)*((_QWORD *)this + 29);
  if (v2 != (char *)this + 248)
    free(v2);
  llvm::StringMap<GVStructElementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 200);
  *(_QWORD *)this = &off_25111E050;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 136);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x24268D8F0);
}

uint64_t MTLGVEmulation::doInitialization(MTLGVEmulation *this, llvm::Module *a2)
{
  MetalModulePass::doInitialization(this, a2);
  return 0;
}

uint64_t MTLGVEmulation::runOnModule(MTLGVEmulation *this, llvm::Module *a2)
{
  uint64_t *v4;
  llvm::Function *EntryFunction;
  llvm::Module *v6;
  uint64_t GlobalVariable;
  llvm::GlobalVariable *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  llvm::Value *v13;
  uint64_t v14;
  BOOL v15;
  _DWORD *Name;
  unint64_t v17;
  llvm::Function **v18;
  uint64_t v19;
  llvm::Function *v20;
  char shouldModifyFunction;
  char v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t updated;
  llvm::Function **v27;
  uint64_t v28;
  llvm::Function **v29;
  uint64_t v30;
  int v31;
  llvm::Function **v32;
  BOOL v33;
  llvm::Function **i;
  uint64_t v35;
  llvm::Function **v37;
  uint64_t v38[2];
  uint64_t v39;
  void *v40;
  uint64_t v41;
  _QWORD v42[9];

  v42[8] = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t *)((char *)this + 280);
  llvm::DenseMapBase<llvm::DenseMap<llvm::Type *,llvm::Type *,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,llvm::Type *>>,llvm::Type *,llvm::Type *,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,llvm::Type *>>::clear((uint64_t)this + 280);
  MetalModulePass::runOnModule(this, a2);
  MTLGVEmulation::createFwdStructType(this);
  EntryFunction = (llvm::Function *)MetalModulePass::getEntryFunction(this);
  if (MTLBoundsCheck::isLibraryModule(a2, v6))
    EntryFunction = 0;
  GlobalVariable = llvm::Module::getGlobalVariable();
  if (GlobalVariable)
  {
    v8 = (llvm::GlobalVariable *)GlobalVariable;
    v9 = *(_QWORD *)(GlobalVariable - 32);
    v40 = v42;
    v41 = 0x400000000;
    v10 = *(_DWORD *)(v9 + 20) & 0x7FFFFFF;
    if ((*(_DWORD *)(v9 + 20) & 0x7FFFFFF) != 0)
    {
      v11 = 0;
      v12 = 0;
      do
      {
        v38[0] = *(_QWORD *)(v9 - 32 * v10 + v11);
        v13 = (llvm::Value *)MTLBoundsCheck::lookThroughPointerOps(v38[0], v38);
        v14 = (uint64_t)v13;
        v15 = *((_BYTE *)v13 + 16) != 3 || v13 == 0;
        if (!v15 && (Name = (_DWORD *)llvm::Value::getName(v13), v17 >= 4) && *Name == 778859629)
        {
          llvm::UndefValue::get();
          llvm::Constant::handleOperandChange();
          v9 = *((_QWORD *)v8 - 4);
          if (!v9 || *(unsigned __int8 *)(v9 + 16) - 11 < 2)
            break;
        }
        else
        {
          v39 = v14;
          llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)&v40, &v39);
        }
        ++v12;
        v10 = *(_DWORD *)(v9 + 20) & 0x7FFFFFF;
        v11 += 32;
      }
      while (v12 < v10);
    }
    llvm::GlobalVariable::eraseFromParent(v8);
    if ((_DWORD)v41)
      llvm::appendToUsed();
    if (v40 != v42)
      free(v40);
  }
  MTLGVEmulation::gatherGVs((uint64_t)this);
  llvm::DenseMapBase<llvm::DenseMap<llvm::Type *,llvm::Type *,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,llvm::Type *>>,llvm::Type *,llvm::Type *,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,llvm::Type *>>::clear((uint64_t)v4);
  v38[0] = *((_QWORD *)a2 + 4);
  v38[1] = (uint64_t)a2 + 24;
  llvm::SmallVector<std::reference_wrapper<llvm::Function>,8u>::SmallVector<llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>>(&v40, v38);
  v18 = (llvm::Function **)v40;
  if ((_DWORD)v41)
  {
    v19 = 8 * v41;
    do
    {
      v20 = *v18;
      shouldModifyFunction = MTLGVEmulation::shouldModifyFunction(this, *v18);
      if (v20 == EntryFunction)
        v22 = 0;
      else
        v22 = shouldModifyFunction;
      if ((v22 & 1) != 0)
      {
        v39 = (uint64_t)v20;
        v38[0] = 0;
        v23 = llvm::DenseMapBase<llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>,llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::LookupBucketFor<llvm::CallGraphNode *>((uint64_t *)this + 17, &v39, v38);
        if (v38[0] == *((_QWORD *)this + 17) + 16 * *((unsigned int *)this + 38))
          v24 = 0;
        else
          v24 = v23;
        if (v24 == 1)
          v25 = *(_QWORD *)(v38[0] + 8);
        else
          v25 = 0;
        updated = MTLGVEmulation::updateFunction((uint64_t)this, (uint64_t)v20, v25);
        v38[0] = (uint64_t)v20;
        llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>,llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::FindAndConstruct(v4, v38)[1] = updated;
      }
      ++v18;
      v19 -= 8;
    }
    while (v19);
    v18 = (llvm::Function **)v40;
  }
  if (v18 != v42)
    free(v18);
  if (EntryFunction)
    MTLGVEmulation::updateEntryPoint(this, EntryFunction);
  MTLGVEmulation::updateIntersectionFunctions(this);
  MTLGVEmulation::updateIntersectCalls(this);
  MTLGVEmulation::updateAIRFunctionMetadata(this);
  MTLGVEmulation::removeGVUsages((uint64_t)this);
  MTLGVEmulation::updateAIRDyldTable(this);
  if (*((_DWORD *)this + 72))
  {
    v27 = (llvm::Function **)*((_QWORD *)this + 35);
    v28 = *((unsigned int *)this + 74);
    v29 = v27;
    if ((_DWORD)v28)
    {
      v30 = 0;
      while (((unint64_t)v27[v30] | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v30 += 2;
        if (2 * v28 == v30)
        {
          v31 = 1;
          goto LABEL_55;
        }
      }
      v29 = &v27[v30];
    }
    v32 = &v27[2 * v28];
    if (v29 == v32)
    {
      v33 = 0;
    }
    else
    {
LABEL_48:
      MTLGVEmulation::updateFunctionUses(this, *v29, v29[1]);
      MTLGVEmulation::updateIndirectCalls(this, v29[1]);
      llvm::Value::takeName();
      while (1)
      {
        v29 += 2;
        if (v29 == v32)
          break;
        if (((unint64_t)*v29 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          if (v29 != v32)
            goto LABEL_48;
          break;
        }
      }
      v27 = (llvm::Function **)*((_QWORD *)this + 35);
      v28 = *((unsigned int *)this + 74);
      v33 = *((_DWORD *)this + 72) == 0;
    }
    v31 = v28;
    if (!v33)
    {
LABEL_55:
      i = v27;
      if (v31)
      {
        v35 = 16 * v28;
        for (i = v27; ((unint64_t)*i | 0x1000) == 0xFFFFFFFFFFFFF000; i += 2)
        {
          v35 -= 16;
          if (!v35)
            return 1;
        }
      }
      v37 = &v27[2 * v28];
LABEL_61:
      if (i != v37)
      {
        llvm::UndefValue::get();
        llvm::Value::replaceNonMetadataUsesWith();
        *(_QWORD *)*i = *(_QWORD *)i[1];
        llvm::ValueAsMetadata::handleRAUW();
        llvm::Function::eraseFromParent(*i);
        while (1)
        {
          i += 2;
          if (i == v37)
            break;
          if (((unint64_t)*i | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_61;
        }
      }
    }
  }
  return 1;
}

void sub_240FDBD8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  if (a14 != a10)
    free(a14);
  _Unwind_Resume(exception_object);
}

uint64_t llvm::StringMap<GVStructElementInfo,llvm::MallocAllocator>::~StringMap(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(llvm **)(*(_QWORD *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0)
          llvm::deallocate_buffer(v5, (void *)(*(_QWORD *)v5 + 25));
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t llvm::DenseMap<llvm::Function *,llvm::Value *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::Value *>>::~DenseMap(uint64_t a1)
{
  llvm::deallocate_buffer(*(llvm **)a1, (void *)(16 * *(unsigned int *)(a1 + 16)));
  return a1;
}

void MTLGVEmulation::createFwdStructType(MTLGVEmulation *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Int8PtrTy;
  uint64_t i;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::Module *v14;
  uint64_t v15;
  const char *v16;
  const char *v17;
  size_t v18;
  size_t v19;
  _BOOL4 isLibraryModule;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  llvm::Module *v25;
  MTLBoundsCheck::SharedPassData *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *j;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  __int128 v39;
  __int128 v40;
  void *v41;
  uint64_t v42;
  _DWORD v43[2];
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  const char *v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;

  v81 = *MEMORY[0x24BDAC8D0];
  llvm::PointerType::get();
  llvm::StructType::get();
  v2 = llvm::PointerType::get();
  v3 = llvm::PointerType::get();
  v41 = "mtl.device_indirection_table";
  v42 = 28;
  v43[0] = 0;
  v44 = v2;
  v45 = "mtl.draw_id_buffer";
  v46 = 18;
  v47 = 1;
  v48 = llvm::PointerType::get();
  v49 = "mtl.report_buffer";
  v50 = 17;
  v51 = 2;
  v52 = llvm::PointerType::get();
  v53 = "mtl.check_buffer";
  v54 = 16;
  v55 = 3;
  v56 = v3;
  v57 = "mtl.texture_usage_table";
  v58 = 23;
  v59 = 4;
  v60 = llvm::PointerType::get();
  v4 = llvm::PointerType::get();
  v61 = "mtl.buffer_usage_table";
  v62 = 22;
  v63 = 5;
  v5 = *((_QWORD *)this + 10);
  v64 = v4;
  v65 = "mtl.stack_depth";
  v66 = 15;
  v67 = 10;
  v68 = v5;
  v69 = "mtl.acceleration_structure_payload";
  v70 = 34;
  v71 = 11;
  v72 = llvm::PointerType::get();
  Int8PtrTy = llvm::Type::getInt8PtrTy(**((llvm::Type ***)this + 6), 0);
  v73 = "mtl.stack_trace";
  v74 = 15;
  v75 = 12;
  v76 = Int8PtrTy;
  MTLBoundsCheck::SharedPassData::getGVBaseType(*((_QWORD *)this + 8), "mtl.binding_table", 0x11uLL);
  v77 = "mtl.binding_table";
  v78 = 17;
  v79 = 13;
  v80 = llvm::PointerType::get();
  llvm::StringMapImpl::StringMapImpl((llvm::StringMapImpl *)&v36);
  for (i = 0; i != 80; i += 8)
  {
    v8 = *(_OWORD *)&v43[i];
    v39 = *(_OWORD *)((char *)&v41 + i * 4);
    v40 = v8;
    llvm::StringMap<GVStructElementInfo,llvm::MallocAllocator>::try_emplace<GVStructElementInfo>((llvm::StringMapImpl *)&v36, (const void *)v39, *((size_t *)&v39 + 1), &v40);
  }
  v9 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = v36;
  v36 = v9;
  v10 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = v37;
  v37 = v10;
  LODWORD(v9) = *((_DWORD *)this + 54);
  *((_DWORD *)this + 54) = v38;
  v38 = v9;
  llvm::StringMap<GVStructElementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)&v36);
  MTLBoundsCheck::SharedPassData::getGVBaseType(*((_QWORD *)this + 8), "mtl.threadgroup_table", 0x15uLL);
  v11 = llvm::PointerType::get();
  if (!llvm::Module::getGlobalVariable())
    v11 = llvm::PointerType::get();
  v12 = *llvm::StringMap<GVStructElementInfo,llvm::MallocAllocator>::try_emplace<>((MTLGVEmulation *)((char *)this + 200), "mtl.threadgroup_table", 0x15uLL);
  *(_DWORD *)(v12 + 8) = 6;
  *(_QWORD *)(v12 + 16) = v11;
  MTLBoundsCheck::SharedPassData::getGVBaseType(*((_QWORD *)this + 8), "mtl.threadgroup_base", 0x14uLL);
  v13 = llvm::PointerType::get();
  v15 = *llvm::StringMap<GVStructElementInfo,llvm::MallocAllocator>::try_emplace<>((MTLGVEmulation *)((char *)this + 200), "mtl.threadgroup_base", 0x14uLL);
  *(_DWORD *)(v15 + 8) = 7;
  *(_QWORD *)(v15 + 16) = v13;
  v16 = "mtl.global_constants_handle";
  v17 = "mtl.global_constants_table";
  if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 8) + 72) + 23) & 0x40) != 0)
  {
    isLibraryModule = MTLBoundsCheck::isLibraryModule(*((MTLBoundsCheck **)this + 6), v14);
    if (isLibraryModule)
      v19 = 33;
    else
      v19 = 26;
    if (isLibraryModule)
    {
      v17 = "mtl.global_constants_table.unused";
      v18 = 34;
    }
    else
    {
      v18 = 27;
    }
    if (isLibraryModule)
      v16 = "mtl.global_constants_handle.unused";
  }
  else
  {
    v18 = 27;
    v19 = 26;
  }
  v21 = llvm::PointerType::get();
  v22 = *llvm::StringMap<GVStructElementInfo,llvm::MallocAllocator>::try_emplace<>((MTLGVEmulation *)((char *)this + 200), v17, v19);
  *(_DWORD *)(v22 + 8) = 8;
  *(_QWORD *)(v22 + 16) = v21;
  v23 = *((_QWORD *)this + 9);
  v24 = *llvm::StringMap<GVStructElementInfo,llvm::MallocAllocator>::try_emplace<>((MTLGVEmulation *)((char *)this + 200), v16, v18);
  *(_DWORD *)(v24 + 8) = 9;
  *(_QWORD *)(v24 + 16) = v23;
  if (!MTLBoundsCheck::isLibraryModule(*((MTLBoundsCheck **)this + 6), v25))
  {
    v26 = (MTLBoundsCheck::SharedPassData *)*((_QWORD *)this + 8);
    v27 = *(_QWORD *)(*((_QWORD *)v26 + 9) + 20);
    if ((v27 & 0x800000) != 0)
    {
      MTLBoundsCheck::SharedPassData::getOrInsertDeviceIndirectionTableGV(v26);
      MTLBoundsCheck::SharedPassData::getOrInsertGlobalConstantsHandleGV(*((llvm::Module ***)this + 8));
      if ((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 8) + 72) + 20) & 0x200000001) != 0)
      {
        MTLBoundsCheck::SharedPassData::getOrInsertBufferUsageTableGV(*((MTLBoundsCheck::SharedPassData **)this + 8));
        MTLBoundsCheck::SharedPassData::getOrInsertTextureUsageTableGV(*((MTLBoundsCheck::SharedPassData **)this + 8));
      }
    }
    else if ((v27 & 0x10000) != 0)
    {
      MTLBoundsCheck::SharedPassData::getOrInsertGlobalConstantsTableGV(v26);
    }
    else
    {
      MTLBoundsCheck::SharedPassData::getOrInsertCheckBufferGV(v26);
    }
    MTLBoundsCheck::SharedPassData::getOrInsertDrawIDBufferGV(*((MTLBoundsCheck::SharedPassData **)this + 8));
    MTLBoundsCheck::SharedPassData::getOrInsertReportBufferGV(*((llvm::Type ****)this + 8));
  }
  MTLBoundsCheck::SharedPassData::getOrInsertStackDepthGV(*((llvm::Type ****)this + 8));
  MTLBoundsCheck::SharedPassData::getOrInsertAccelerationStructurePtrGV(*((llvm::Type ****)this + 8));
  MTLBoundsCheck::SharedPassData::getOrInsertBindingTableGV(*((MTLBoundsCheck::SharedPassData **)this + 8));
  v28 = llvm::StructType::create();
  v41 = v43;
  v42 = 0x800000000;
  llvm::SmallVectorImpl<llvm::Value *>::resizeImpl<false>((uint64_t)&v41, *((unsigned int *)this + 53));
  v29 = *((unsigned int *)this + 52);
  if ((_DWORD)v29)
  {
    for (j = (uint64_t *)*((_QWORD *)this + 25); !*j || *j == -8; ++j)
      ;
  }
  else
  {
    j = (uint64_t *)*((_QWORD *)this + 25);
  }
  v32 = *((_QWORD *)this + 25) + 8 * v29;
  if (j != (uint64_t *)v32)
  {
    v33 = *j;
    do
    {
      *((_QWORD *)v41 + *(unsigned int *)(v33 + 8)) = *(_QWORD *)(v33 + 16);
      do
      {
        v34 = j[1];
        ++j;
        v33 = v34;
        if (v34)
          v35 = v33 == -8;
        else
          v35 = 1;
      }
      while (v35);
    }
    while (j != (uint64_t *)v32);
  }
  llvm::StructType::setBody();
  *((_QWORD *)this + 23) = v28;
  *((_QWORD *)this + 24) = llvm::PointerType::get();
  if (v41 != v43)
    free(v41);
}

void sub_240FDC4AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;

  if (a18 != v18)
    free(a18);
  _Unwind_Resume(exception_object);
}

uint64_t MTLGVEmulation::gatherGVs(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  llvm::Value *v6;
  unint64_t v7;
  int Key;
  llvm::Value *v9;

  *(_DWORD *)(this + 240) = 0;
  v1 = *(_QWORD *)(this + 48);
  v2 = v1 + 8;
  v3 = *(_QWORD *)(v1 + 16);
  if (v3 != v1 + 8)
  {
    v4 = this;
    v5 = this + 232;
    do
    {
      if (v3)
        v6 = (llvm::Value *)(v3 - 56);
      else
        v6 = 0;
      if ((*((_BYTE *)v6 + 33) & 0x1C) != 0)
      {
        this = llvm::Value::getName(v6);
        if (v7 >= 4 && *(_DWORD *)this == 778859629)
        {
          Key = llvm::StringMapImpl::FindKey();
          if (Key == -1 || Key == (unint64_t)*(unsigned int *)(v4 + 208))
          {
            this = llvm::Value::dump(v6);
            __break(1u);
            return this;
          }
          v9 = v6;
          this = llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>(v5, (uint64_t *)&v9);
        }
      }
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3 != v2);
  }
  return this;
}

uint64_t MTLGVEmulation::shouldModifyFunction(MTLGVEmulation *this, llvm::Function *a2)
{
  uint64_t Name;
  unint64_t v5;
  unint64_t v6;
  uint64_t v10;
  llvm::Function *v11;

  v10 = 0;
  v11 = a2;
  if ((llvm::DenseMapBase<llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>,llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::LookupBucketFor<llvm::CallGraphNode *>((uint64_t *)this + 20, &v11, &v10) & 1) != 0)return 0;
  Name = llvm::Value::getName(a2);
  v6 = v5;
  if (llvm::GlobalValue::isDeclaration(a2))
  {
    if (v6 >= 0x11)
    {
      if (*(_QWORD *)Name == 0x69646E692E6C746DLL
        && *(_QWORD *)(Name + 8) == 0x6D656D5F74636572
        && *(_BYTE *)(Name + 16) == 46)
      {
        return 1;
      }
    }
    else if (v6 < 4)
    {
      return 1;
    }
    if (*(_DWORD *)Name == 779250017)
      return 0;
    if (v6 >= 5 && *(_DWORD *)Name == 1836477548 && *(_BYTE *)(Name + 4) == 46)
      return 0;
    if (*(_DWORD *)Name == 778859629)
      return 0;
  }
  return 1;
}

uint64_t MTLGVEmulation::updateFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::Attribute *v6;
  uint64_t v7;
  llvm::LLVMContext *v8;
  uint64_t v9;
  llvm::Function *inserted;
  llvm::Function *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[3];
  void *v16;
  uint64_t v17;
  _QWORD v18[9];

  v18[8] = *MEMORY[0x24BDAC8D0];
  v15[2] = *(_QWORD *)(a1 + 40);
  v16 = v18;
  v17 = 0x800000000;
  llvm::AttrBuilder::addAttribute();
  llvm::AttrBuilder::addAttribute();
  v6 = *(llvm::Attribute **)(a1 + 40);
  v15[0] = llvm::DataLayout::getTypeAllocSize(*(llvm::DataLayout **)(a1 + 56), *(llvm::Type **)(a1 + 184));
  v15[1] = v7;
  v8 = (llvm::LLVMContext *)llvm::TypeSize::operator unsigned long long();
  llvm::Attribute::getWithDereferenceableBytes(v6, v8);
  llvm::AttrBuilder::addAttribute();
  v9 = llvm::AttributeSet::get();
  inserted = (llvm::Function *)MetalModulePass::insertArgument(a1, a2, *(_QWORD *)(a1 + 192), v9, 1, "shader_validation_args", 0);
  v11 = inserted;
  v15[0] = inserted;
  if ((*((_WORD *)inserted + 9) & 1) != 0)
    llvm::Function::BuildLazyArguments(inserted);
  v12 = *((_QWORD *)v11 + 11);
  llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>,llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::FindAndConstruct((uint64_t *)(a1 + 304), v15)[1] = v12;
  if (a3)
    MetalModulePass::insertFunctionArgumentMD(a1, a3, (llvm::LLVMContext *)"air.visible_input", (uint64_t)"mtl.shader_validation_args", (llvm::LLVMContext *)"shader_validation_args", 0, 0, 0);
  v13 = v15[0];
  if (v16 != v18)
    free(v16);
  return v13;
}

void sub_240FDC840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;

  if (a12 != v12)
    free(a12);
  _Unwind_Resume(exception_object);
}

void MTLGVEmulation::updateEntryPoint(MTLGVEmulation *this, llvm::Function *a2)
{
  uint64_t v3;
  llvm::BasicBlock *v4;
  llvm::Value *FirstNonPHI;
  llvm::Type *v6;
  uint64_t Alloca;
  char *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _WORD v18[20];
  llvm::Function *v19;
  void *v20[2];
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v23[1] = *MEMORY[0x24BDAC8D0];
  v19 = a2;
  v3 = *((_QWORD *)a2 + 10);
  if (v3)
    v4 = (llvm::BasicBlock *)(v3 - 24);
  else
    v4 = 0;
  FirstNonPHI = (llvm::Value *)llvm::BasicBlock::getFirstNonPHI(v4);
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::IRBuilder((uint64_t)v20, FirstNonPHI, 0, 0, 0);
  v6 = (llvm::Type *)*((_QWORD *)this + 23);
  v18[16] = 257;
  Alloca = llvm::IRBuilderBase::CreateAlloca((llvm::BasicBlock **)v20, v6, 0, (const llvm::Twine *)v18);
  llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>,llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::FindAndConstruct((uint64_t *)this + 38, &v19)[1] = Alloca;
  v8 = (char *)v19 + 72;
  for (i = *((_QWORD *)v19 + 10); (char *)i != v8; i = *(_QWORD *)(i + 8))
  {
    v10 = i - 24;
    if (!i)
      v10 = 0;
    v11 = *(_QWORD *)(v10 + 48);
    if (v11 != v10 + 40)
    {
LABEL_29:
      while ((char *)i != v8)
      {
        v12 = v11 - 24;
        if (!v11)
          v12 = 0;
        v13 = *(unsigned __int8 *)(v12 + 16);
        if (v13 == 84)
          v14 = v12;
        else
          v14 = 0;
        if (v11)
        {
          if (v13 == 84)
          {
            v15 = *(_QWORD *)(v14 - 32);
            if (!v15
              || *(_BYTE *)(v15 + 16)
              || *(_QWORD *)(v15 + 24) != *(_QWORD *)(v14 + 72)
              || MTLGVEmulation::shouldModifyFunction(this, (llvm::Function *)v15))
            {
              *(_WORD *)(v14 + 18) &= 0xFFFCu;
            }
          }
        }
        v11 = *(_QWORD *)(v11 + 8);
        v16 = i - 24;
        if (!i)
          v16 = 0;
        if (v11 == v16 + 40)
        {
          while (1)
          {
            i = *(_QWORD *)(i + 8);
            if ((char *)i == v8)
              goto LABEL_30;
            v17 = i - 24;
            if (!i)
              v17 = 0;
            v11 = *(_QWORD *)(v17 + 48);
            if (v11 != v17 + 40)
              goto LABEL_29;
          }
        }
      }
      break;
    }
  }
LABEL_30:
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v23);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v22);
  if (v20[0] != &v21)
    free(v20[0]);
}

void sub_240FDCA2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder((void **)va);
  _Unwind_Resume(a1);
}

void MTLGVEmulation::updateIntersectionFunctions(MTLGVEmulation *this)
{
  unint64_t v1;
  uint64_t v3;
  int v4;
  unsigned int PrefTypeAlignment;
  uint64_t v6;
  uint64_t v7;
  _QWORD *i;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  llvm::Type **PayloadArg;
  unsigned int v13;
  llvm::Type *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  llvm::MDString *v19;
  uint64_t String;
  uint64_t v21;
  BOOL v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  llvm::BasicBlock *v27;
  llvm::Value *v28;
  llvm::BasicBlock **v29;
  llvm::Type *v30;
  llvm::LLVMContext *Alloca;
  llvm::Type *v32;
  llvm::Value *BitOrPointerCast;
  llvm::Type *v34;
  llvm::Type *v35;
  llvm::Attribute *v36;
  uint64_t v37;
  llvm::LLVMContext *v38;
  uint64_t v39;
  llvm::Function *v40;
  uint64_t v41;
  uint64_t v42;
  llvm::BasicBlock *v43;
  llvm::Value *FirstNonPHI;
  llvm::Type *v45;
  llvm::LLVMContext *v46;
  unsigned int v47;
  llvm::Function *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  _BYTE v54[32];
  __int16 v55;
  llvm::Function *inserted;
  llvm::Function *v57[3];
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  __int16 v62;
  llvm::Type *TypeAllocSize;
  uint64_t v64;
  _BYTE v65[104];
  uint64_t v66;
  _QWORD v67[3];

  v67[1] = *MEMORY[0x24BDAC8D0];
  llvm::DataLayout::getTypeSizeInBits(*((_QWORD *)this + 7), *((_QWORD *)this + 23));
  v57[1] = (llvm::Function *)((unint64_t)(v3 + 7) >> 3);
  v57[2] = (llvm::Function *)(v4 == 1);
  PrefTypeAlignment = llvm::DataLayout::getPrefTypeAlignment(*((llvm::DataLayout **)this + 7), *((llvm::Type **)this + 23));
  if (!*((_DWORD *)this + 42))
    return;
  v6 = *((unsigned int *)this + 44);
  if ((_DWORD)v6)
  {
    v7 = 16 * v6;
    for (i = (_QWORD *)*((_QWORD *)this + 20); (*i | 0x1000) == 0xFFFFFFFFFFFFF000; i += 2)
    {
      v7 -= 16;
      if (!v7)
        return;
    }
  }
  else
  {
    i = (_QWORD *)*((_QWORD *)this + 20);
  }
  v9 = *((_QWORD *)this + 20) + 16 * v6;
  if (i == (_QWORD *)v9)
    return;
  v53 = (uint64_t *)((char *)this + 304);
  v51 = PrefTypeAlignment | 0x100000000;
LABEL_10:
  v10 = i[1];
  v57[0] = *(llvm::Function **)i;
  PayloadArg = (llvm::Type **)MTLGVEmulation::getPayloadArg((uint64_t)this, (uint64_t)v57[0], v10);
  if (!PayloadArg)
  {
    v58 = *((_QWORD *)this + 5);
    v59 = &v61;
    v60 = 0x800000000;
    llvm::AttrBuilder::addAttribute();
    llvm::AttrBuilder::addAttribute();
    v36 = (llvm::Attribute *)*((_QWORD *)this + 5);
    TypeAllocSize = (llvm::Type *)llvm::DataLayout::getTypeAllocSize(*((llvm::DataLayout **)this + 7), *((llvm::Type **)this + 23));
    v64 = v37;
    v38 = (llvm::LLVMContext *)llvm::TypeSize::operator unsigned long long();
    llvm::Attribute::getWithDereferenceableBytes(v36, v38);
    llvm::AttrBuilder::addAttribute();
    v39 = llvm::AttributeSet::get();
    inserted = 0;
    v40 = v57[0];
    v41 = llvm::PointerType::get();
    inserted = (llvm::Function *)MetalModulePass::insertArgument((uint64_t)this, (uint64_t)v40, v41, v39, 1, "shader_validation_args", 1);
    v42 = *((_QWORD *)inserted + 10);
    if (v42)
      v43 = (llvm::BasicBlock *)(v42 - 24);
    else
      v43 = 0;
    FirstNonPHI = (llvm::Value *)llvm::BasicBlock::getFirstNonPHI(v43);
    llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::IRBuilder((uint64_t)&TypeAllocSize, FirstNonPHI, 0, 0, 0);
    if ((*((_WORD *)inserted + 9) & 1) != 0)
      llvm::Function::BuildLazyArguments(inserted);
    v45 = (llvm::Type *)*((_QWORD *)this + 23);
    v55 = 257;
    v46 = (llvm::LLVMContext *)llvm::IRBuilderBase::CreateAlloca(&TypeAllocSize, v45, 0, (const llvm::Twine *)v54);
    llvm::TypeSize::operator unsigned long long();
    v49 = v49 & 0xFFFFFFFFFFFF0000 | 0x103;
    v50 = v50 & 0xFFFFFFFFFFFF0000 | 0x103;
    llvm::IRBuilderBase::CreateMemCpy((uint64_t)&TypeAllocSize, v46);
    llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>,llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::FindAndConstruct(v53, &inserted)[1] = v46;
    v47 = llvm::TypeSize::operator unsigned long long();
    MetalModulePass::insertFunctionArgumentMD((uint64_t)this, v10, (llvm::LLVMContext *)"air.payload", (uint64_t)"mtl.shader_validation_args", (llvm::LLVMContext *)"shader_validation_args", 1, v47 | 0x100000000, v51);
    v48 = inserted;
    llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>,llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::FindAndConstruct((uint64_t *)this + 35, v57)[1] = v48;
    llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v67);
    llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v66);
    if (TypeAllocSize != (llvm::Type *)v65)
      free(TypeAllocSize);
    v34 = (llvm::Type *)v59;
    v35 = (llvm::Type *)&v61;
    goto LABEL_40;
  }
  v13 = v11;
  TypeAllocSize = (llvm::Type *)*((_QWORD *)this + 23);
  v64 = **((_QWORD **)*PayloadArg + 2);
  v14 = (llvm::Type *)llvm::StructType::get();
  v15 = *(_QWORD *)(v10 - 8 * *(unsigned int *)(v10 + 8) + 16);
  v16 = *(_QWORD *)(v15 - 8 * *(unsigned int *)(v15 + 8) + 8 * v13);
  v17 = *(_DWORD *)(v16 + 8);
  if (!v17)
    goto LABEL_28;
  v18 = 0;
  while (1)
  {
    v19 = *(llvm::MDString **)(v16 - 8 * v17 + 8 * v18);
    if (!*(_BYTE *)v19)
      break;
LABEL_25:
    if (++v18 >= (unint64_t)v17)
      goto LABEL_26;
  }
  String = llvm::MDString::getString(v19);
  if (v21 != 17)
  {
    v17 = *(_DWORD *)(v16 + 8);
    goto LABEL_25;
  }
  v23 = *(_QWORD *)String == 0x5F6772612E726961
     && *(_QWORD *)(String + 8) == 0x7A69735F65707974
     && *(_BYTE *)(String + 16) == 101;
  v17 = *(_DWORD *)(v16 + 8);
  if (!v23)
    goto LABEL_25;
LABEL_26:
  if (v17 > v18)
  {
    llvm::DataLayout::getTypeSizeInBits(*((_QWORD *)this + 7), (uint64_t)v14);
    TypeAllocSize = (llvm::Type *)((unint64_t)(v24 + 7) >> 3);
    v64 = v25 == 1;
    llvm::TypeSize::operator unsigned long long();
    MetalModulePass::getMetadata<unsigned int>();
    llvm::MDNode::replaceOperandWith();
  }
LABEL_28:
  v26 = *((_QWORD *)v57[0] + 10);
  if (v26)
    v27 = (llvm::BasicBlock *)(v26 - 24);
  else
    v27 = 0;
  v28 = (llvm::Value *)llvm::BasicBlock::getFirstNonPHI(v27);
  v29 = (llvm::BasicBlock **)llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::IRBuilder((uint64_t)&TypeAllocSize, v28, 0, 0, 0);
  v30 = (llvm::Type *)*((_QWORD *)this + 23);
  v62 = 257;
  Alloca = (llvm::LLVMContext *)llvm::IRBuilderBase::CreateAlloca(v29, v30, 0, (const llvm::Twine *)&v58);
  v32 = (llvm::Type *)llvm::PointerType::get();
  v62 = 257;
  BitOrPointerCast = llvm::IRBuilderBase::CreateBitOrPointerCast((llvm::IRBuilderBase *)&TypeAllocSize, PayloadArg, v32, (const llvm::Twine *)&v58);
  v62 = 257;
  llvm::IRBuilderBase::CreateConstInBoundsGEP2_32(&TypeAllocSize, v14, BitOrPointerCast, 0, 1u, (const llvm::Twine *)&v58);
  llvm::Value::replaceAllUsesWith();
  llvm::PHINode::setIncomingValue((uint64_t)BitOrPointerCast, 0, (uint64_t)PayloadArg);
  v62 = 257;
  llvm::IRBuilderBase::CreateConstInBoundsGEP2_32(&TypeAllocSize, v14, BitOrPointerCast, 0, 0, (const llvm::Twine *)&v58);
  llvm::TypeSize::operator unsigned long long();
  v1 = v1 & 0xFFFFFFFFFFFF0000 | 0x103;
  v52 = v52 & 0xFFFFFFFFFFFF0000 | 0x103;
  llvm::IRBuilderBase::CreateMemCpy((uint64_t)&TypeAllocSize, Alloca);
  llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>,llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::FindAndConstruct(v53, v57)[1] = Alloca;
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v67);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v66);
  v34 = TypeAllocSize;
  v35 = (llvm::Type *)v65;
LABEL_40:
  if (v34 != v35)
    free(v34);
  MTLGVEmulation::updateIndirectCalls(this, v57[0]);
  while (1)
  {
    i += 2;
    if (i == (_QWORD *)v9)
      break;
    if ((*i | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if (i != (_QWORD *)v9)
        goto LABEL_10;
      return;
    }
  }
}

void sub_240FDD018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  uint64_t v32;

  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder((void **)(v32 - 248));
  if (a32 != a17)
    free(a32);
  _Unwind_Resume(a1);
}

void MTLGVEmulation::updateIntersectCalls(MTLGVEmulation *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  llvm::LLVMContext *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  llvm::Type **v14;
  llvm::Type *v15;
  llvm::Type **v16;
  uint64_t v17;
  llvm::BasicBlock *v18;
  llvm::Value *v19;
  llvm::LLVMContext *ConstInBoundsGEP2_32;
  llvm::Type *v21;
  uint64_t v22;
  int v23;
  llvm::LLVMContext *v24;
  uint64_t v25;
  uint64_t Cast;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  llvm::Instruction *v32;
  llvm::Value *FirstNonPHI;
  llvm::Type **v34;
  llvm::Type *v35;
  llvm::Value *BitOrPointerCast;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _BOOL8 v47;
  __int16 v48;
  uint64_t **v49;
  void *Name;
  uint64_t v51;
  _WORD v52[52];
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  _QWORD v57[6];

  v57[4] = *MEMORY[0x24BDAC8D0];
  v55 = v57;
  v56 = 0x400000000;
  v49 = &v55;
  llvm::InstVisitor<MTLGVEmulation::updateIntersectCalls(void)::IntersectVisitor,void>::visit<llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>>((uint64_t)&v49, *(_QWORD *)(*((_QWORD *)this + 6) + 32), *((_QWORD *)this + 6) + 24);
  v2 = v55;
  if ((_DWORD)v56)
  {
    v3 = (uint64_t *)((char *)this + 304);
    v4 = 8 * v56;
    do
    {
      v5 = *v2;
      v6 = *(_QWORD *)(*v2 - 32);
      if (!v6 || *(_BYTE *)(v6 + 16) || *(_QWORD *)(v6 + 24) != *(_QWORD *)(v5 + 72))
        v6 = 0;
      Name = (void *)llvm::Value::getName((llvm::Value *)v6);
      v51 = v7;
      if (llvm::StringRef::find() == -1)
        v8 = 6;
      else
        v8 = 7;
      if (llvm::StringRef::find() != -1 || llvm::StringRef::find() != -1)
        ++v8;
      v9 = v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF);
      v10 = *(llvm::LLVMContext **)(v9 + 32 * v8);
      if (v10)
        v11 = *((_BYTE *)v10 + 16) == 19;
      else
        v11 = 0;
      if (v11)
      {
        FirstNonPHI = (llvm::Value *)llvm::BasicBlock::getFirstNonPHI(*(llvm::BasicBlock **)(v5 + 40));
        llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::IRBuilder((uint64_t)&Name, FirstNonPHI, 0, 0, 0);
        v46 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 56);
        v34 = (llvm::Type **)llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>,llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::FindAndConstruct(v3, &v46)[1];
        v35 = (llvm::Type *)llvm::PointerType::get();
        v48 = 257;
        BitOrPointerCast = llvm::IRBuilderBase::CreateBitOrPointerCast((llvm::IRBuilderBase *)&Name, v34, v35, (const llvm::Twine *)&v46);
        llvm::DataLayout::getTypeSizeInBits(*((_QWORD *)this + 7), *((_QWORD *)this + 23));
        v46 = (unint64_t)(v37 + 7) >> 3;
        v47 = v38 == 1;
        llvm::CallBase::setArgOperand(v5, v8, (uint64_t)BitOrPointerCast);
        llvm::TypeSize::operator unsigned long long();
        v39 = llvm::ConstantInt::get();
        llvm::CallBase::setArgOperand(v5, v8 + 1, v39);
        llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)&v54);
        llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v53);
        if (Name != v52)
          free(Name);
      }
      else
      {
        v12 = *(_QWORD *)(v9 + 32 * (v8 + 1));
        if (*(_BYTE *)(v12 + 16) == 16)
          v13 = v12;
        else
          v13 = 0;
        Name = (void *)*((_QWORD *)this + 23);
        v14 = (llvm::Type **)(v13 + 24);
        if (*(_DWORD *)(v13 + 32) >= 0x41u)
          v14 = *(llvm::Type ***)(v13 + 24);
        v51 = llvm::ArrayType::get(*((llvm::ArrayType **)this + 12), *v14);
        v15 = (llvm::Type *)llvm::StructType::get();
        Name = *(void **)(*(_QWORD *)(v5 + 40) + 56);
        v16 = (llvm::Type **)llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>,llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::FindAndConstruct(v3, &Name)[1];
        v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 40) + 56) + 80);
        if (v17)
          v18 = (llvm::BasicBlock *)(v17 - 24);
        else
          v18 = 0;
        llvm::BasicBlock::getFirstNonPHI(v18);
        v19 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x48);
        v52[8] = 257;
        llvm::AllocaInst::AllocaInst();
        llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::IRBuilder((uint64_t)&Name, (llvm::Value *)v5, 0, 0, 0);
        v48 = 257;
        ConstInBoundsGEP2_32 = (llvm::LLVMContext *)llvm::IRBuilderBase::CreateConstInBoundsGEP2_32((llvm::Type **)&Name, v15, v19, 0, 0, (const llvm::Twine *)&v46);
        v21 = (llvm::Type *)llvm::PointerType::get();
        v48 = 257;
        llvm::IRBuilderBase::CreateBitOrPointerCast((llvm::IRBuilderBase *)&Name, v16, v21, (const llvm::Twine *)&v46);
        llvm::DataLayout::getTypeSizeInBits(*((_QWORD *)this + 7), *((_QWORD *)this + 23));
        v46 = (unint64_t)(v22 + 7) >> 3;
        v47 = v23 == 1;
        llvm::TypeSize::operator unsigned long long();
        v44 = v44 & 0xFFFFFFFFFFFF0000 | 0x103;
        v45 = v45 & 0xFFFFFFFFFFFF0000 | 0x103;
        llvm::IRBuilderBase::CreateMemCpy((uint64_t)&Name, ConstInBoundsGEP2_32);
        v48 = 257;
        v24 = (llvm::LLVMContext *)llvm::IRBuilderBase::CreateConstInBoundsGEP2_32((llvm::Type **)&Name, v15, v19, 0, 1u, (const llvm::Twine *)&v46);
        v42 = v42 & 0xFFFFFFFFFFFF0000 | 0x103;
        v43 = v43 & 0xFFFFFFFFFFFF0000 | 0x103;
        llvm::IRBuilderBase::CreateMemCpy((uint64_t)&Name, v24);
        v25 = llvm::PointerType::get();
        v48 = 257;
        Cast = llvm::IRBuilderBase::CreateCast((uint64_t)&Name, 49, (uint64_t)v19, v25, (uint64_t)&v46);
        llvm::CallBase::setArgOperand(v5, v8, Cast);
        llvm::DataLayout::getTypeSizeInBits(*((_QWORD *)this + 7), (uint64_t)v15);
        v46 = (unint64_t)(v27 + 7) >> 3;
        v47 = v28 == 1;
        llvm::TypeSize::operator unsigned long long();
        v29 = llvm::ConstantInt::get();
        llvm::CallBase::setArgOperand(v5, v8 + 1, v29);
        v30 = *(_QWORD *)(v5 + 32);
        if (v30)
          v31 = v30 == *(_QWORD *)(v5 + 40) + 40;
        else
          v31 = 1;
        if (v31)
          v32 = 0;
        else
          v32 = (llvm::Instruction *)(v30 - 24);
        llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)&Name, v32);
        v40 = v40 & 0xFFFFFFFFFFFF0000 | 0x103;
        v41 = v41 & 0xFFFFFFFFFFFF0000 | 0x103;
        llvm::IRBuilderBase::CreateMemCpy((uint64_t)&Name, v10);
        llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)&v54);
        llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v53);
        if (Name != v52)
          free(Name);
        v3 = (uint64_t *)((char *)this + 304);
      }
      ++v2;
      v4 -= 8;
    }
    while (v4);
    v2 = v55;
  }
  if (v2 != v57)
    free(v2);
}

void sub_240FDD6A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  void *v36;
  uint64_t v37;
  void *v39;

  v39 = *(void **)(v37 - 144);
  if (v39 != v36)
    free(v39);
  _Unwind_Resume(exception_object);
}

uint64_t MTLGVEmulation::updateAIRFunctionMetadata(MTLGVEmulation *this)
{
  uint64_t v2;
  uint64_t *v3;
  char *v4;
  llvm::Module *v5;
  char v6;
  uint64_t result;
  llvm::NamedMDNode *v8;
  int v9;
  int i;
  _QWORD v11[4];
  __int16 v12;
  uint64_t v13;

  v2 = 0;
  v3 = (uint64_t *)((char *)this + 280);
  do
  {
    v4 = off_25111EEA0[v2];
    v5 = (llvm::Module *)*((_QWORD *)this + 6);
    v12 = 257;
    if (*v4)
    {
      v11[0] = v4;
      v6 = 3;
    }
    else
    {
      v6 = 1;
    }
    LOBYTE(v12) = v6;
    result = llvm::Module::getNamedMetadata(v5, (const llvm::Twine *)v11);
    if (result)
    {
      v8 = (llvm::NamedMDNode *)result;
      result = llvm::NamedMDNode::getNumOperands((llvm::NamedMDNode *)result);
      if ((_DWORD)result)
      {
        v9 = result;
        for (i = 0; i != v9; ++i)
        {
          result = llvm::NamedMDNode::getOperand(v8);
          if (!*(_QWORD *)(*(_QWORD *)(result - 8 * *(unsigned int *)(result + 8)) + 128))
            break;
          v11[0] = *(_QWORD *)(*(_QWORD *)(result - 8 * *(unsigned int *)(result + 8)) + 128);
          v13 = 0;
          result = llvm::DenseMapBase<llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>,llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::LookupBucketFor<llvm::CallGraphNode *>(v3, v11, &v13);
          if ((result & 1) != 0)
          {
            result = *(_QWORD *)(v13 + 8);
            if (result)
            {
              llvm::ValueAsMetadata::get();
              result = llvm::MDNode::replaceOperandWith();
            }
          }
        }
      }
    }
    ++v2;
  }
  while (v2 != 5);
  return result;
}

uint64_t MTLGVEmulation::removeGVUsages(uint64_t this)
{
  uint64_t v1;
  llvm::Value **v2;
  uint64_t *v3;
  const void *Name;
  size_t v5;
  char *v6;
  uint64_t v7;
  llvm::Instruction *v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  llvm::GetElementPtrInst *v12;
  llvm::Instruction *v13;
  llvm::Instruction *v14;
  uint64_t *v15;
  uint64_t v16;
  llvm::GetElementPtrInst *v17;
  llvm::Instruction *v18;
  llvm::Instruction *v19;
  llvm::Value **v20;
  llvm::StringMapImpl *v21;
  uint64_t v22[4];
  __int16 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  void *v27;
  unsigned int v28;
  _QWORD v29[10];

  v29[8] = *MEMORY[0x24BDAC8D0];
  v1 = *(unsigned int *)(this + 240);
  if ((_DWORD)v1)
  {
    v2 = *(llvm::Value ***)(this + 232);
    v21 = (llvm::StringMapImpl *)(this + 200);
    v3 = (uint64_t *)(this + 304);
    v20 = &v2[v1];
    do
    {
      Name = (const void *)llvm::Value::getName(*v2);
      llvm::StringMap<GVStructElementInfo,llvm::MallocAllocator>::try_emplace<>(v21, Name, v5);
      v22[0] = *((_QWORD *)*v2 + 1);
      v22[1] = 0;
      llvm::SmallVector<llvm::User *,8u>::SmallVector<llvm::Value::user_iterator_impl<llvm::User>>(&v27, v22);
      v6 = (char *)v27;
      if (v28)
      {
        v7 = 8 * v28;
        do
        {
          v8 = *(llvm::Instruction **)v6;
          v9 = *(unsigned __int8 *)(*(_QWORD *)v6 + 16);
          if (*(_QWORD *)v6 && v9 == 61)
          {
            v24 = *(_QWORD *)(*((_QWORD *)v8 + 5) + 56);
            v10 = (uint64_t *)llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>,llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::FindAndConstruct(v3, &v24)[1];
            v11 = **(_QWORD **)(*v10 + 16);
            v25 = (uint64_t *)llvm::ConstantInt::get();
            v26 = llvm::ConstantInt::get();
            v23 = 257;
            v12 = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::Create(v11, v10, &v25, 2);
            llvm::GetElementPtrInst::setIsInBounds(v12);
            llvm::Instruction::insertBefore(v12, v8);
            v13 = (llvm::Instruction *)llvm::User::operator new((llvm::User *)0x40);
            llvm::StoreInst::StoreInst();
            llvm::ReplaceInstWithInst(v8, v13, v14);
          }
          else
          {
            if (v9 != 60)
              v8 = 0;
            v24 = *(_QWORD *)(*((_QWORD *)v8 + 5) + 56);
            v15 = (uint64_t *)llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>,llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::FindAndConstruct(v3, &v24)[1];
            v16 = **(_QWORD **)(*v15 + 16);
            v25 = (uint64_t *)llvm::ConstantInt::get();
            v26 = llvm::ConstantInt::get();
            v23 = 257;
            v17 = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::Create(v16, v15, &v25, 2);
            llvm::GetElementPtrInst::setIsInBounds(v17);
            llvm::Instruction::insertBefore(v17, v8);
            v18 = (llvm::Instruction *)llvm::User::operator new((llvm::User *)0x40);
            v23 = 257;
            llvm::LoadInst::LoadInst();
            llvm::ReplaceInstWithInst(v8, v18, v19);
          }
          v6 += 8;
          v7 -= 8;
        }
        while (v7);
        v6 = (char *)v27;
      }
      if (v6 != (char *)v29)
        free(v6);
      llvm::UndefValue::get();
      llvm::Value::replaceAllUsesWith();
      this = llvm::GlobalVariable::eraseFromParent(*v2++);
    }
    while (v2 != v20);
  }
  return this;
}

void sub_240FDDB3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  _Unwind_Resume(exception_object);
}

void MTLGVEmulation::updateAIRDyldTable(MTLGVEmulation *this)
{
  llvm::GlobalValue *GlobalVariable;
  llvm::Value *v3;
  llvm::Constant *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  llvm::Constant *v8;
  llvm::Value **v9;
  llvm::Value **v10;
  uint64_t *v11;
  llvm::Value *i;
  int v13;
  uint64_t isCast;
  llvm::raw_ostream *v15;
  uint64_t v16;
  llvm::raw_ostream *v17;
  uint64_t v18;
  llvm::Value *v19;
  void *v20;
  unsigned int v21;
  _QWORD v22[9];

  v22[8] = *MEMORY[0x24BDAC8D0];
  GlobalVariable = (llvm::GlobalValue *)llvm::Module::getGlobalVariable();
  if (GlobalVariable)
  {
    v3 = GlobalVariable;
    if ((llvm::GlobalValue::isDeclaration(GlobalVariable) & 1) == 0)
    {
      v4 = (llvm::Constant *)*((_QWORD *)v3 - 4);
      v5 = *((_DWORD *)v4 + 5);
      v19 = 0;
      llvm::SmallVector<llvm::Constant *,8u>::SmallVector(&v20, v5 & 0x7FFFFFF, (uint64_t *)&v19);
      v6 = *((_DWORD *)v4 + 5) & 0x7FFFFFF;
      if ((*((_DWORD *)v4 + 5) & 0x7FFFFFF) != 0)
      {
        v7 = 0;
        v8 = v4;
        do
        {
          *((_QWORD *)v20 + v7++) = *((_QWORD *)v8 - 4 * v6);
          v6 = *((_DWORD *)v4 + 5) & 0x7FFFFFF;
          v8 = (llvm::Constant *)((char *)v8 + 32);
        }
        while (v7 < v6);
      }
      v9 = (llvm::Value **)v20;
      if (v21)
      {
        v10 = (llvm::Value **)((char *)v20 + 8 * v21);
        v11 = (uint64_t *)((char *)this + 280);
        do
        {
          for (i = *v9; ; i = (llvm::Value *)*((_QWORD *)i - 4 * (*((_DWORD *)i + 5) & 0x7FFFFFF)))
          {
            v13 = *((unsigned __int8 *)i + 16);
            if (v13 != 5)
              break;
            isCast = llvm::ConstantExpr::isCast(i);
            if ((isCast & 1) == 0)
            {
              v15 = (llvm::raw_ostream *)llvm::dbgs((llvm *)isCast);
              llvm::raw_ostream::operator<<(v15, "non-cast constexpr in air.dyld_flat_table", 0x29uLL);
              llvm::Value::dump(i);
              v13 = *((unsigned __int8 *)i + 16);
              break;
            }
          }
          if (!v13)
          {
            v18 = 0;
            v19 = i;
            v16 = llvm::DenseMapBase<llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>,llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::LookupBucketFor<llvm::CallGraphNode *>(v11, &v19, &v18);
            if ((v16 & 1) != 0 && (v16 = *(_QWORD *)(v18 + 8)) != 0)
            {
              *v9 = (llvm::Value *)llvm::ConstantExpr::getPointerCast();
            }
            else
            {
              v17 = (llvm::raw_ostream *)llvm::dbgs((llvm *)v16);
              llvm::raw_ostream::operator<<(v17, "Missing replacement for function in air.dyld_flat_table", 0x37uLL);
              llvm::Value::dump(v3);
              llvm::Value::dump(*v9);
            }
          }
          ++v9;
        }
        while (v9 != v10);
      }
      llvm::ConstantArray::get();
      llvm::GlobalVariable::setInitializer();
      llvm::UndefValue::get();
      llvm::Value::replaceAllUsesWith();
      llvm::Constant::destroyConstant(v4);
      if (v20 != v22)
        free(v20);
    }
  }
}

void sub_240FDDDBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(exception_object);
}

void MTLGVEmulation::updateFunctionUses(MTLGVEmulation *this, llvm::Function *a2, llvm::Function *a3)
{
  llvm::Value **v6;
  llvm::Value **v7;
  uint64_t *v8;
  llvm::Value *v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  llvm::Value *v14;
  char *v15;
  BOOL v16;
  llvm::Instruction *PointerCast;
  llvm::Instruction *v18;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  llvm::Instruction *v29;
  uint64_t v30;
  llvm::Instruction *v31;
  llvm::Instruction *v32;
  __int16 v33;
  llvm::Instruction *v34;
  uint64_t v35[4];
  __int16 v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  _WORD v40[32];
  void *v41;
  unsigned int v42;
  _QWORD v43[6];

  v43[4] = *MEMORY[0x24BDAC8D0];
  v38 = (void *)*((_QWORD *)a2 + 1);
  v39 = 0;
  llvm::SmallVector<llvm::User *,4u>::SmallVector<llvm::Value::user_iterator_impl<llvm::User>>(&v41, (uint64_t *)&v38);
  v6 = (llvm::Value **)v41;
  if (!v42)
    goto LABEL_48;
  v7 = (llvm::Value **)((char *)v41 + 8 * v42);
  v8 = (uint64_t *)((char *)this + 304);
  do
  {
    v9 = *v6;
    v10 = *((unsigned __int8 *)*v6 + 16);
    if (*v6 && v10 == 84)
    {
      if (*((llvm::Function **)v9 - 4) == a2)
      {
        v11 = *((_QWORD *)a3 + 12);
        v35[0] = 0;
        llvm::SmallVector<llvm::Value *,8u>::SmallVector(&v38, v11, v35);
        v37 = *(_QWORD *)(*((_QWORD *)v9 + 5) + 56);
        v12 = llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>,llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::FindAndConstruct(v8, &v37);
        v13 = 0;
        *(_QWORD *)v38 = v12[1];
        v14 = v9;
        while (v13 < llvm::compat::getNumArgOperands(v9))
        {
          v15 = (char *)v38 + 8 * v13++;
          *((_QWORD *)v15 + 1) = *((_QWORD *)v14 - 4 * (*((_DWORD *)v9 + 5) & 0x7FFFFFF));
          v14 = (llvm::Value *)((char *)v14 + 32);
        }
        if (a3)
          v21 = *((_QWORD *)a3 + 3);
        else
          v21 = 0;
        v36 = 257;
        v32 = (llvm::Instruction *)llvm::CallInst::Create(v21, (uint64_t)a3, (uint64_t)v38, v39, 0, 0);
        v33 = *((_WORD *)v32 + 9) & 0xFFFC | *((_WORD *)v9 + 9) & 3;
        *((_WORD *)v32 + 9) = v33;
        *((_WORD *)v32 + 9) = v33 & 0xF003 | *((_WORD *)v9 + 9) & 0xFFC;
        llvm::ReplaceInstWithInst(v9, v32, v34);
        if (v38 != v40)
          free(v38);
        goto LABEL_46;
      }
LABEL_14:
      if (*((_QWORD *)a2 + 3) != *((_QWORD *)a3 + 3))
      {
        v40[8] = 257;
        PointerCast = (llvm::Instruction *)llvm::CastInst::CreatePointerCast();
        v18 = PointerCast;
        if (*((_BYTE *)v9 + 16) != 83 || v9 == 0)
        {
          llvm::Instruction::insertBefore(PointerCast, v9);
        }
        else
        {
          v22 = *((_DWORD *)v9 + 5);
          v23 = v22 & 0x7FFFFFF;
          if ((v22 & 0x7FFFFFF) != 0)
          {
            v24 = 0;
            v25 = 0;
            do
            {
              if ((v22 & 0x40000000) != 0)
                v26 = (char *)*((_QWORD *)v9 - 1);
              else
                v26 = (char *)v9 - 32 * v23;
              if (*(llvm::Function **)&v26[v24] == a2)
              {
                v27 = *(_QWORD *)&v26[32 * *((unsigned int *)v9 + 15) + 8 * v25];
                v28 = *(_QWORD *)(v27 + 40);
                if (v28 == v27 + 40)
                {
                  v31 = 0;
                }
                else
                {
                  v29 = (llvm::Instruction *)(v28 - 24);
                  if (v28)
                    v30 = v28 - 24;
                  else
                    v30 = 0;
                  if (*(unsigned __int8 *)(v30 + 16) - 29 >= 0xB)
                    v31 = 0;
                  else
                    v31 = v29;
                }
                llvm::Instruction::insertBefore(v18, v31);
                v22 = *((_DWORD *)v9 + 5);
              }
              ++v25;
              v23 = v22 & 0x7FFFFFF;
              v24 += 32;
            }
            while (v25 < v23);
          }
        }
      }
      llvm::User::replaceUsesOfWith();
      goto LABEL_46;
    }
    if (v9)
      v16 = v10 > 0x14;
    else
      v16 = 1;
    if (v16)
      goto LABEL_14;
    if (llvm::Value::hasNUsesOrMore(*v6))
    {
      llvm::ConstantExpr::getBitCast();
      llvm::Constant::handleOperandChange();
    }
LABEL_46:
    ++v6;
  }
  while (v6 != v7);
  v6 = (llvm::Value **)v41;
LABEL_48:
  if (v6 != v43)
    free(v6);
}

void sub_240FDE11C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  _Unwind_Resume(exception_object);
}

void MTLGVEmulation::updateIndirectCalls(MTLGVEmulation *this, llvm::Function *a2)
{
  char *v2;
  char *v3;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t inserted;
  llvm::Instruction *PointerCast;
  int NumArgOperands;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  llvm::Instruction *v20;
  int v21;
  llvm::Instruction *v22;
  char *v23;
  uint64_t v24[4];
  __int16 v25;
  llvm::Function *v26;
  void *v27;
  unsigned int v28;
  _WORD v29[32];
  char *v30;
  uint64_t v31;
  _QWORD v32[6];

  v32[4] = *MEMORY[0x24BDAC8D0];
  v26 = a2;
  v30 = (char *)v32;
  v31 = 0x400000000;
  v2 = (char *)a2 + 72;
  v3 = (char *)*((_QWORD *)a2 + 10);
  if (v3 != (char *)a2 + 72)
  {
    while (1)
    {
      v5 = v3 - 24;
      if (!v3)
        v5 = 0;
      v6 = (char *)*((_QWORD *)v5 + 6);
      if (v6 != v5 + 40)
        break;
      v3 = (char *)*((_QWORD *)v3 + 1);
      if (v3 == v2)
        return;
    }
    if (v3 != v2)
    {
      while (1)
      {
        v7 = v6 - 24;
        if (!v6)
          v7 = 0;
        if (v7[16] == 84)
        {
          v27 = v7;
          v8 = *((_QWORD *)v7 - 4);
          if (!v8 || *(_BYTE *)(v8 + 16) || *(_QWORD *)(v8 + 24) != *((_QWORD *)v7 + 9))
            llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)&v30, (uint64_t *)&v27);
        }
        v6 = (char *)*((_QWORD *)v6 + 1);
        v9 = v3 - 24;
        if (!v3)
          v9 = 0;
        if (v6 == v9 + 40)
          break;
LABEL_22:
        if (v3 == v2)
          goto LABEL_23;
      }
      while (1)
      {
        v3 = (char *)*((_QWORD *)v3 + 1);
        if (v3 == v2)
          break;
        v10 = v3 - 24;
        if (!v3)
          v10 = 0;
        v6 = (char *)*((_QWORD *)v10 + 6);
        if (v6 != v10 + 40)
          goto LABEL_22;
      }
LABEL_23:
      v11 = v30;
      if ((_DWORD)v31)
      {
        v23 = &v30[8 * v31];
        do
        {
          v12 = *(_QWORD *)v11;
          inserted = MetalModulePass::insertArgumentType((uint64_t)this, *(_QWORD *)(*(_QWORD *)v11 + 72), *((_QWORD *)this + 24), 0);
          llvm::PointerType::get();
          v29[8] = 257;
          PointerCast = (llvm::Instruction *)llvm::CastInst::CreatePointerCast();
          llvm::Instruction::insertBefore(PointerCast, (llvm::Instruction *)v12);
          NumArgOperands = llvm::compat::getNumArgOperands((llvm::CallBase *)v12);
          v24[0] = 0;
          llvm::SmallVector<llvm::Value *,8u>::SmallVector(&v27, (NumArgOperands + 1), v24);
          v16 = llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>,llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::FindAndConstruct((uint64_t *)this + 38, &v26);
          v17 = 0;
          *(_QWORD *)v27 = v16[1];
          v18 = v12;
          while (v17 < llvm::compat::getNumArgOperands((llvm::CallBase *)v12))
          {
            v19 = (char *)v27 + 8 * v17++;
            *((_QWORD *)v19 + 1) = *(_QWORD *)(v18 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF));
            v18 += 32;
          }
          v25 = 257;
          v20 = (llvm::Instruction *)llvm::CallInst::Create(inserted, (uint64_t)PointerCast, (uint64_t)v27, v28, 0, 0);
          v21 = *((_WORD *)v20 + 9) & 0xF003 | (4 * ((*(unsigned __int16 *)(v12 + 18) >> 2) & 0x3FF));
          *((_WORD *)v20 + 9) = v21;
          *((_WORD *)v20 + 9) = v21 & 0xFFFC | *(_WORD *)(v12 + 18) & 3;
          llvm::ReplaceInstWithInst((llvm *)v12, v20, v22);
          llvm::User::replaceUsesOfWith();
          if (v27 != v29)
            free(v27);
          v11 += 8;
        }
        while (v11 != v23);
        v11 = v30;
      }
      if (v11 != (char *)v32)
        free(v11);
    }
  }
}

void sub_240FDE49C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  uint64_t v19;
  void *v21;

  v21 = *(void **)(v19 - 144);
  if (v21 != a10)
    free(v21);
  _Unwind_Resume(exception_object);
}

uint64_t *llvm::StringMap<GVStructElementInfo,llvm::MallocAllocator>::try_emplace<GVStructElementInfo>(llvm::StringMapImpl *a1, const void *a2, size_t a3, _OWORD *a4)
{
  uint64_t *i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v9 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v9)
  {
    while (!v9 || v9 == -8)
    {
      v10 = i[1];
      ++i;
      v9 = v10;
    }
    return i;
  }
  v11 = MEMORY[0x24268CD5C](a3 + 25, 8);
  v12 = v11;
  v13 = v11 + 24;
  if (a3)
    memcpy((void *)(v11 + 24), a2, a3);
  *(_BYTE *)(v13 + a3) = 0;
  *(_QWORD *)v12 = a3;
  *(_OWORD *)(v12 + 8) = *a4;
  *i = v12;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

uint64_t *llvm::StringMap<GVStructElementInfo,llvm::MallocAllocator>::try_emplace<>(llvm::StringMapImpl *a1, const void *a2, size_t a3)
{
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v7 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v7)
  {
    while (!v7 || v7 == -8)
    {
      v8 = i[1];
      ++i;
      v7 = v8;
    }
    return i;
  }
  v9 = MEMORY[0x24268CD5C](a3 + 25, 8);
  v10 = (_QWORD *)v9;
  v11 = v9 + 24;
  if (a3)
    memcpy((void *)(v9 + 24), a2, a3);
  *(_BYTE *)(v11 + a3) = 0;
  v10[1] = 0;
  v10[2] = 0;
  *v10 = a3;
  *i = (uint64_t)v10;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

_QWORD *llvm::SmallVector<std::reference_wrapper<llvm::Function>,8u>::SmallVector<llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>>(_QWORD *a1, uint64_t *a2)
{
  *a1 = a1 + 2;
  a1[1] = 0x800000000;
  llvm::SmallVectorImpl<std::reference_wrapper<llvm::Function>>::append<llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,void>((uint64_t)a1, *a2, a2[1]);
  return a1;
}

void sub_240FDE738(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  void *v3;

  v3 = v2;
  if (*v1 != v3)
    free(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t llvm::IRBuilderBase::CreateAlloca(llvm::BasicBlock **this, llvm::Type *a2, llvm::Value *a3, const llvm::Twine *a4)
{
  llvm::Module *Module;
  llvm::DataLayout *DataLayout;
  uint64_t v9;

  Module = (llvm::Module *)llvm::BasicBlock::getModule(this[6]);
  DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(Module);
  llvm::DataLayout::getPrefTypeAlign(DataLayout, a2);
  v9 = llvm::User::operator new((llvm::User *)0x48);
  llvm::AllocaInst::AllocaInst();
  return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, v9, (uint64_t)a4);
}

void sub_240FDE804(_Unwind_Exception *a1)
{
  void *v1;

  llvm::User::operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t MTLGVEmulation::getPayloadArg(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  _QWORD *String;
  uint64_t v9;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  v3 = *(_QWORD *)(a3 - 8 * *(unsigned int *)(a3 + 8) + 16);
  v4 = *(unsigned int *)(v3 + 8);
  if (!(_DWORD)v4)
    return 0;
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD *)(v3 - 8 * v4 + 8 * v6);
    String = (_QWORD *)llvm::MDString::getString(*(llvm::MDString **)(v7 - 8 * *(unsigned int *)(v7 + 8) + 8));
    if (v9 == 11 && *String == 0x6C7961702E726961 && *(_QWORD *)((char *)String + 3) == 0x64616F6C7961702ELL)
      break;
    ++v6;
    v4 = *(unsigned int *)(v3 + 8);
    if (v6 >= v4)
      return 0;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(v7 - 8 * *(unsigned int *)(v7 + 8)) + 128);
  v13 = (_QWORD *)(v12 + 24);
  if (*(_DWORD *)(v12 + 32) >= 0x41u)
    v13 = (_QWORD *)*v13;
  v14 = (_QWORD *)*v13;
  if ((*(_WORD *)(a2 + 18) & 1) != 0)
    llvm::Function::BuildLazyArguments((llvm::Function *)a2);
  return *(_QWORD *)(a2 + 88) + 40 * (_QWORD)v14;
}

uint64_t llvm::IRBuilderBase::CreateMemCpy(uint64_t a1, llvm::LLVMContext *a2)
{
  llvm::Type::getInt64Ty(*(llvm::Type **)(a1 + 64), a2);
  llvm::ConstantInt::get();
  return llvm::IRBuilderBase::CreateMemTransferInst();
}

uint64_t llvm::InstVisitor<MTLGVEmulation::updateIntersectCalls(void)::IntersectVisitor,void>::visit<llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a2 != a3)
  {
    v4 = result;
    do
    {
      v5 = *(_QWORD *)(a2 + 8);
      v6 = a2 - 56;
      if (!a2)
        v6 = 0;
      v7 = v6 + 72;
      v8 = *(_QWORD *)(v6 + 80);
      if (v8 != v7)
      {
        do
        {
          v9 = *(_QWORD *)(v8 + 8);
          if (v8)
            v10 = v8 - 24;
          else
            v10 = 0;
          result = llvm::InstVisitor<MTLGVEmulation::updateIntersectCalls(void)::IntersectVisitor,void>::visit(v4, v10);
          v8 = v9;
        }
        while (v9 != v7);
      }
      a2 = v5;
    }
    while (v5 != a3);
  }
  return result;
}

uint64_t llvm::InstVisitor<MTLGVEmulation::updateIntersectCalls(void)::IntersectVisitor,void>::visit(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a2 + 40;
  v3 = *(_QWORD *)(a2 + 48);
  if (v3 != a2 + 40)
  {
    v4 = (uint64_t *)result;
    do
    {
      v5 = *(_QWORD *)(v3 + 8);
      if (v3)
        v6 = v3 - 24;
      else
        v6 = 0;
      if (*(_BYTE *)(v6 + 16) == 84)
        result = MTLGVEmulation::updateIntersectCalls(void)::IntersectVisitor::visitCallInst(v4, v6);
      v3 = v5;
    }
    while (v5 != v2);
  }
  return result;
}

uint64_t MTLGVEmulation::updateIntersectCalls(void)::IntersectVisitor::visitCallInst(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;

  result = *(_QWORD *)(a2 - 32);
  if (result)
  {
    if (!*(_BYTE *)(result + 16) && *(_QWORD *)(result + 24) == *(_QWORD *)(a2 + 72))
    {
      result = llvm::Value::getName((llvm::Value *)result);
      if (v5 >= 0xD && *(_QWORD *)result == 0x65746E692E726961 && *(_QWORD *)(result + 5) == 0x746365737265746ELL)
      {
        v7 = *a1;
        v8 = a2;
        return llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>(v7, &v8);
      }
    }
  }
  return result;
}

_QWORD *llvm::SmallVector<llvm::Constant *,8u>::SmallVector(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = a1 + 2;
  a1[1] = 0x800000000;
  llvm::SmallVectorImpl<llvm::Value *>::assign((uint64_t)a1, a2, *a3);
  return a1;
}

void sub_240FDEB88(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  void *v3;

  v3 = v2;
  if (*v1 != v3)
    free(*v1);
  _Unwind_Resume(exception_object);
}

llvm::Module *MTLAddPostVertexDumpingToModulePass::addPostVertexDumpingToModule(int a1, llvm::Module *this, int a3, int a4, _BYTE *a5, uint64_t *a6, int a7)
{
  llvm::NamedMDNode *NamedMetadata;
  uint64_t Operand;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  llvm::Function *v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  const llvm::DataLayout *DataLayout;
  unsigned int v30;
  char v31;
  int v32;
  int v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  size_t v39;
  llvm::LLVMContext *v40;
  uint64_t *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t Impl;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *p_shared_owners;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  char *v88;
  int v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  int v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  int v100;
  llvm::LLVMContext *v101;
  llvm::Type *v102;
  uint64_t *v103;
  llvm::Value *v104;
  _BYTE *v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t *v111;
  unint64_t v112;
  unint64_t v113;
  char *v114;
  uint64_t *v115;
  char *v116;
  uint64_t *v117;
  uint64_t *v118;
  uint64_t v119;
  __int128 v120;
  uint64_t Int1Ty;
  llvm::LLVMContext *v122;
  llvm::LLVMContext *v123;
  char *v124;
  char *v125;
  llvm::Type *v126;
  uint64_t LLVMVectorType;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  size_t v131;
  size_t v132;
  uint64_t v133;
  uint64_t v134;
  size_t v135;
  llvm::LLVMContext *v136;
  llvm::BasicBlock *v137;
  llvm::Value *v138;
  uint64_t v139;
  llvm::BasicBlock *v140;
  char *v141;
  char *v142;
  unsigned int v143;
  uint64_t v144;
  llvm::Function *v145;
  llvm::Value *v146;
  uint64_t v147;
  char *v148;
  uint64_t i;
  llvm::Function *v150;
  size_t v151;
  char *v152;
  size_t v153;
  llvm::BasicBlock *v154;
  unint64_t v155;
  uint64_t *v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  llvm::Value *v160;
  uint64_t Cast;
  int v162;
  unint64_t v163;
  uint64_t v165;
  unsigned __int8 *v166;
  llvm::BasicBlock *v167;
  uint64_t v168;
  const llvm::Twine *v169;
  llvm::BranchInst *v170;
  llvm::BasicBlock *v171;
  llvm::Value *v172;
  llvm::Type *v173;
  uint64_t v174;
  uint64_t v175;
  llvm::CmpInst **v176;
  llvm::Value *v177;
  uint64_t GEP;
  uint64_t v179;
  uint64_t AlignedLoad;
  llvm::BasicBlock *ICmp;
  _BYTE *v182;
  _BYTE *v183;
  uint64_t v184;
  unint64_t v185;
  char *v186;
  unsigned int VectorDataType;
  llvm::Type *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  int v193;
  unint64_t size;
  __int128 v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  uint64_t v200;
  void **v201;
  llvm::Value *v202;
  llvm::Value *v203;
  llvm::Value *v204;
  llvm::Value *v205;
  llvm::Instruction *Mul;
  llvm::Type *v207;
  uint64_t v208;
  llvm::Instruction *v209;
  uint64_t v210;
  llvm::Value *v211;
  __int128 v212;
  std::string *v213;
  __int128 v214;
  _OWORD *v215;
  __int128 v216;
  uint64_t *v217;
  llvm::Value *v218;
  llvm::Type *v219;
  llvm::Value *v220;
  uint64_t v221;
  uint64_t v222;
  llvm::LLVMContext *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  llvm::Type *v227;
  uint64_t v228;
  uint64_t v229;
  llvm::Value *v230;
  uint64_t j;
  llvm::Value *v232;
  llvm::Instruction *v233;
  llvm::Type **Element;
  uint64_t v235;
  llvm::BranchInst *v236;
  uint64_t v237;
  llvm::Instruction *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t *v243;
  size_t v244;
  uint64_t *v245;
  _QWORD *v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t *String;
  uint64_t v251;
  unint64_t v252;
  BOOL v253;
  int v254;
  int v255;
  uint64_t v256;
  char **v257;
  llvm::NamedMDNode *v258;
  llvm::BranchInst *v259;
  llvm::IRBuilderDefaultInserter *v260;
  char ***v261;
  llvm::IRBuilderFolder *v262;
  uint64_t **v263;
  _QWORD *v264;
  uint64_t v265;
  llvm::Type *Int8Ty;
  llvm::Value *v267;
  unsigned __int8 *v268;
  llvm::Value *v269;
  llvm::Type *Int32Ty;
  _BYTE *v271;
  std::string *v272;
  _BYTE *v273;
  llvm::Module *v274;
  uint64_t v275;
  std::string *v276;
  uint64_t Int64Ty;
  char *v278;
  llvm::Type *v279;
  char *v280;
  _QWORD v281[6];
  void *v282[2];
  char v283;
  const void *v284[2];
  char v285;
  __int128 v286;
  char v287;
  __int128 v288;
  char v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  _BYTE *v295;
  _BYTE *v296;
  std::vector<unsigned int> v297;
  void *v298[3];
  char *v299;
  char *v300;
  char *v301;
  uint64_t *v302;
  uint64_t *v303;
  uint64_t *v304;
  uint64_t *v305;
  uint64_t *v306;
  uint64_t *v307;
  char *v308[3];
  uint64_t v309[4];
  __int16 v310;
  __int128 v311;
  __int128 v312;
  uint64_t v313;
  _BYTE v314[24];
  __int128 v315;
  uint64_t v316;
  int v317;
  std::__shared_weak_count *v318;
  std::__shared_weak_count *v319;
  std::__shared_weak_count *v320;
  uint64_t v321;
  void *v322[2];
  _WORD v323[16];
  uint64_t v324;
  uint64_t v325;
  llvm::ReturnInst *v326;
  uint64_t *v327;
  _QWORD *v328;
  uint64_t v329;
  int v330;
  __int16 v331;
  char v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  _QWORD v336[40];

  v273 = a5;
  LODWORD(v276) = a4;
  v336[38] = *MEMORY[0x24BDAC8D0];
  v279 = *(llvm::Type **)this;
  v322[0] = "air.vertex";
  v323[8] = 259;
  v274 = this;
  NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(this, (const llvm::Twine *)v322);
  Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
  v12 = *(unsigned int *)(Operand + 8);
  v265 = Operand;
  v13 = *(_QWORD *)(*(_QWORD *)(Operand - 8 * v12) + 128);
  memset(v308, 0, sizeof(v308));
  std::vector<BOOL>::reserve(v308, *(_QWORD *)(v13 + 96));
  v306 = 0;
  v305 = 0;
  v307 = 0;
  std::vector<llvm::Metadata *>::reserve((void **)&v305, *(_QWORD *)(v13 + 96));
  v303 = 0;
  v302 = 0;
  v304 = 0;
  std::vector<llvm::Metadata *>::reserve((void **)&v302, *(_QWORD *)(v13 + 96));
  v14 = *(unsigned int *)(v265 + 8);
  if (v14 >= 4
    && (v15 = *(_QWORD *)(v265 - 8 * v14 + 24), v16 = *(unsigned int *)(v15 + 8), v16 >= 2)
    && (v17 = llvm::MDString::getString(*(llvm::MDString **)(v15 - 8 * v16)), v18 == 9)
    && (*(_QWORD *)v17 == 0x637461702E726961 ? (v19 = *(_BYTE *)(v17 + 8) == 104) : (v19 = 0), v19))
  {
    String = (unint64_t *)llvm::MDString::getString(*(llvm::MDString **)(v15
                                                                              - 8 * *(unsigned int *)(v15 + 8)
                                                                              + 8));
    if (v251 == 8)
    {
      v20 = 0;
      v252 = bswap64(*String);
      v253 = v252 >= 0x747269616E676C65;
      v254 = v252 > 0x747269616E676C65;
      v255 = !v253;
      v19 = v254 == v255;
      v256 = 1;
      if (!v19)
        v256 = 2;
    }
    else
    {
      v20 = 0;
      v256 = 2;
    }
    v260 = (llvm::IRBuilderDefaultInserter *)v256;
  }
  else
  {
    v260 = 0;
    v20 = 1;
  }
  v299 = 0;
  v300 = 0;
  v301 = 0;
  std::vector<llvm::Metadata *>::reserve((void **)&v299, 0xAuLL);
  LOBYTE(v322[0]) = -1;
  std::vector<signed char>::vector(v298, 0xAuLL, v322);
  std::vector<unsigned int>::vector(&v297, *(_QWORD *)(v13 + 96));
  v258 = NamedMetadata;
  v21 = v265;
  MTLFrameworkPass::getArgumentMetadataIndices(*(_QWORD *)(v21 - 8 * *(unsigned int *)(v21 + 8) + 16), (uint64_t)&v297);
  v271 = *(_BYTE **)(v21 - 8 * *(unsigned int *)(v21 + 8) + 16);
  v22 = *(_QWORD *)(v13 + 96);
  if ((*(_WORD *)(v13 + 18) & 1) != 0)
    llvm::Function::BuildLazyArguments((llvm::Function *)v13);
  LODWORD(v262) = v20;
  LODWORD(v261) = a7;
  LODWORD(v259) = a3;
  v269 = (llvm::Value *)v13;
  v272 = (std::string *)a6;
  if ((int)v22 >= 1)
  {
    v280 = 0;
    v23 = 0;
    v278 = 0;
    v24 = 0;
    v25 = 0;
    v275 = v22;
    v26 = (unsigned __int8 *)*((_QWORD *)v269 + 11);
    v257 = &v301;
    v263 = &v307;
    v264 = &v304;
    Int32Ty = (llvm::Type *)&v321;
    while (1)
    {
      v27 = v297.__begin_[(_QWORD)v24];
      if ((_DWORD)v27 != -1)
        break;
      LOBYTE(v33) = 0;
      LODWORD(Int64Ty) = 0;
      LOBYTE(v34) = 0;
      LODWORD(v35) = -1;
      v31 = 11;
LABEL_96:
      LOBYTE(v322[0]) = v34;
      std::vector<BOOL>::push_back((uint64_t)v308, v322);
      if (v23 >= v278)
      {
        v90 = 0xAAAAAAAAAAAAAAABLL * ((v23 - v280) >> 2);
        v91 = v90 + 1;
        if (v90 + 1 > 0x1555555555555555)
          std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
        v92 = v25;
        if (0x5555555555555556 * ((v278 - v280) >> 2) > v91)
          v91 = 0x5555555555555556 * ((v278 - v280) >> 2);
        if (0xAAAAAAAAAAAAAAABLL * ((v278 - v280) >> 2) >= 0xAAAAAAAAAAAAAAALL)
          v93 = 0x1555555555555555;
        else
          v93 = v91;
        if (v93)
        {
          if (v93 > 0x1555555555555555)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v94 = (char *)operator new(12 * v93);
        }
        else
        {
          v94 = 0;
        }
        v95 = Int64Ty;
        v96 = &v94[12 * v90];
        *v96 = v33;
        v96[1] = v31;
        *((_DWORD *)v96 + 1) = v35;
        *((_DWORD *)v96 + 2) = v95;
        if (v23 == v280)
        {
          v280 = &v94[12 * v90];
        }
        else
        {
          v97 = &v94[12 * v90];
          v98 = v280;
          do
          {
            v99 = *(_QWORD *)(v23 - 12);
            v23 -= 12;
            v100 = *((_DWORD *)v23 + 2);
            *(_QWORD *)(v97 - 12) = v99;
            v97 -= 12;
            *((_DWORD *)v97 + 2) = v100;
          }
          while (v23 != v98);
          v23 = v98;
          v280 = v97;
        }
        v278 = &v94[12 * v93];
        v88 = v96 + 12;
        if (v23)
          operator delete(v23);
        v25 = v92;
      }
      else
      {
        *v23 = v33;
        v23[1] = v31;
        v88 = v23 + 12;
        v89 = Int64Ty;
        *((_DWORD *)v23 + 1) = v35;
        *((_DWORD *)v23 + 2) = v89;
      }
      v26 += 40;
      v24 = (llvm::Function *)((char *)v24 + 1);
      v23 = v88;
      if (v24 == (llvm::Function *)v275)
        goto LABEL_119;
    }
    v28 = *(_QWORD *)&v271[8 * v27 + -8 * *((unsigned int *)v271 + 2)];
    DataLayout = (const llvm::DataLayout *)llvm::Module::getDataLayout(v274);
    llvm::DataLayout::DataLayout((llvm::DataLayout *)v322, DataLayout);
    MTLArgumentData::MTLArgumentData((MTLArgumentData *)&v311);
    v290 = 0uLL;
    LODWORD(v291) = 0;
    parseArgumentMetadata((uint64_t)&v311, v28, (uint64_t)v26, 0, (uint64_t)v322, 0, (uint64_t *)&v290, 7);
    v30 = v311;
    if ((v311 & 2) != 0)
    {
      v32 = DWORD2(v311);
    }
    else
    {
      if ((v311 & 4) != 0)
      {
        LOWORD(v309[0]) = 11;
        HIDWORD(v309[0]) = 0;
        vertexFetchBuiltInInfo((uint64_t)v309, (uint64_t)&v311);
        v31 = v309[0];
        if (SLOBYTE(v309[0]) != 11)
        {
          v35 = (unint64_t)(v300 - v299) >> 3;
          *((_BYTE *)v298[0] + SLOBYTE(v309[0])) = v35;
          v53 = v300;
          if (v300 >= v301)
          {
            v71 = (v300 - v299) >> 3;
            if ((unint64_t)(v71 + 1) >> 61)
              std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
            v72 = (v301 - v299) >> 2;
            if (v72 <= v71 + 1)
              v72 = v71 + 1;
            if ((unint64_t)(v301 - v299) >= 0x7FFFFFFFFFFFFFF8)
              v73 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v73 = v72;
            if (v73)
              v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)v257, v73);
            else
              v74 = 0;
            v75 = &v74[8 * v71];
            *(_QWORD *)v75 = v309[0];
            v54 = v75 + 8;
            v77 = v299;
            v76 = v300;
            if (v300 != v299)
            {
              do
              {
                v78 = *((_QWORD *)v76 - 1);
                v76 -= 8;
                *((_QWORD *)v75 - 1) = v78;
                v75 -= 8;
              }
              while (v76 != v77);
              v76 = v299;
            }
            v299 = v75;
            v300 = v54;
            v301 = &v74[8 * v73];
            if (v76)
              operator delete(v76);
          }
          else
          {
            *(_QWORD *)v300 = v309[0];
            v54 = v53 + 8;
          }
          LODWORD(Int64Ty) = 0;
          v300 = v54;
          goto LABEL_80;
        }
      }
      v32 = 0;
    }
    LODWORD(Int64Ty) = v32;
    if ((v276 & 1) != 0)
    {
      v31 = 11;
      LODWORD(v35) = v25;
      v25 = (v25 + 1);
    }
    else
    {
      LODWORD(Int8Ty) = v25 + 1;
      v268 = v26;
      v267 = (llvm::Value *)&v257;
      v36 = *(unsigned int *)(v28 + 8);
      ((void (*)(void))MEMORY[0x24BDAC7A8])();
      v38 = (uint64_t *)((char *)&v257 - ((v37 + 15) & 0xFFFFFFFF0));
      if (v37 >= 0x200)
        v39 = 512;
      else
        v39 = v37;
      bzero((char *)&v257 - ((v37 + 15) & 0xFFFFFFFF0), v39);
      llvm::Type::getInt32Ty(v279, v40);
      llvm::ConstantInt::get();
      *v38 = llvm::ValueAsMetadata::get();
      if ((int)v36 >= 2)
      {
        v41 = (uint64_t *)(v28 + 8 - 8 * *(unsigned int *)(v28 + 8));
        v42 = v38 + 1;
        v43 = v36 - 1;
        do
        {
          v44 = *v41++;
          *v42++ = v44;
          --v43;
        }
        while (v43);
      }
      Impl = llvm::MDTuple::getImpl();
      v46 = Impl;
      v47 = v303;
      v26 = v268;
      if (v303 >= v304)
      {
        v49 = v303 - v302;
        if ((unint64_t)(v49 + 1) >> 61)
          std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
        v50 = ((char *)v304 - (char *)v302) >> 2;
        if (v50 <= v49 + 1)
          v50 = v49 + 1;
        if ((unint64_t)((char *)v304 - (char *)v302) >= 0x7FFFFFFFFFFFFFF8)
          v51 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v51 = v50;
        if (v51)
          v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)v264, v51);
        else
          v52 = 0;
        v55 = (uint64_t *)&v52[8 * v49];
        *v55 = v46;
        v48 = v55 + 1;
        v56 = v303;
        v57 = v302;
        if (v303 != v302)
        {
          do
          {
            v58 = *--v56;
            *--v55 = v58;
          }
          while (v56 != v57);
          v56 = v302;
        }
        v302 = v55;
        v303 = v48;
        v304 = (uint64_t *)&v52[8 * v51];
        if (v56)
          operator delete(v56);
      }
      else
      {
        *v303 = Impl;
        v48 = v47 + 1;
      }
      v303 = v48;
      v59 = *(_QWORD *)v26;
      v60 = v306;
      if (v306 >= v307)
      {
        v63 = v306 - v305;
        if ((unint64_t)(v63 + 1) >> 61)
          std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
        v64 = ((char *)v307 - (char *)v305) >> 2;
        if (v64 <= v63 + 1)
          v64 = v63 + 1;
        if ((unint64_t)((char *)v307 - (char *)v305) >= 0x7FFFFFFFFFFFFFF8)
          v65 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v65 = v64;
        if (v65)
          v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)v263, v65);
        else
          v66 = 0;
        v67 = (uint64_t *)&v66[8 * v63];
        *v67 = v59;
        v61 = v67 + 1;
        v68 = v306;
        v69 = v305;
        if (v306 == v305)
        {
          v62 = Int8Ty;
        }
        else
        {
          v62 = Int8Ty;
          do
          {
            v70 = *--v68;
            *--v67 = v70;
          }
          while (v68 != v69);
          v68 = v305;
        }
        v305 = v67;
        v306 = v61;
        v307 = (uint64_t *)&v66[8 * v65];
        if (v68)
          operator delete(v68);
      }
      else
      {
        *v306 = v59;
        v61 = v60 + 1;
        v62 = Int8Ty;
      }
      v306 = v61;
      v31 = 11;
      LODWORD(v35) = v25;
      v25 = v62;
    }
LABEL_80:
    llvm::DenseMap<llvm::Metadata *,std::vector<MTLStructMemberInfo> *,llvm::DenseMapInfo<llvm::Metadata *,void>,llvm::detail::DenseMapPair<llvm::Metadata *,std::vector<MTLStructMemberInfo> *>>::~DenseMap((uint64_t)&v290);
    *(_QWORD *)&v290 = Int32Ty;
    std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v290);
    v79 = v320;
    if (v320)
    {
      p_shared_owners = (unint64_t *)&v320->__shared_owners_;
      do
        v81 = __ldaxr(p_shared_owners);
      while (__stlxr(v81 - 1, p_shared_owners));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
    }
    v82 = v319;
    if (v319)
    {
      v83 = (unint64_t *)&v319->__shared_owners_;
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
    v85 = v318;
    if (v318)
    {
      v86 = (unint64_t *)&v318->__shared_owners_;
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
    }
    v34 = (v30 >> 3) & 1;
    v33 = (v30 >> 1) & 1;
    MEMORY[0x24268C8C4](v322);
    goto LABEL_96;
  }
  v280 = 0;
LABEL_119:
  LOBYTE(v322[0]) = 0;
  std::vector<unsigned char>::vector(&v295, 0xAuLL, v322);
  v295[1] = 1;
  v102 = v279;
  v103 = (uint64_t *)v272;
  v104 = v269;
  if ((v262 & 1) != 0)
  {
    *v295 = 1;
  }
  else
  {
    v295[3] = 1;
    if (v260 == (llvm::IRBuilderDefaultInserter *)1)
    {
      v105 = v295;
      v106 = 3;
    }
    else
    {
      if (v260 != (llvm::IRBuilderDefaultInserter *)2)
        abort();
      v105 = v295;
      v106 = 2;
    }
    v105[4] = v106;
  }
  if ((_DWORD)v261)
    v295[8] = 1;
  if ((v276 & 1) != 0)
  {
    Int8Ty = 0;
    v107 = -1;
  }
  else
  {
    Int8Ty = (llvm::Type *)llvm::Type::getInt8Ty(v102, v101);
    v108 = llvm::PointerType::get();
    v109 = v108;
    v110 = v306;
    v107 = v306 - v305;
    if (v306 >= v307)
    {
      if ((unint64_t)(v107 + 1) >> 61)
        std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
      v112 = ((char *)v307 - (char *)v305) >> 2;
      if (v112 <= v107 + 1)
        v112 = v107 + 1;
      if ((unint64_t)((char *)v307 - (char *)v305) >= 0x7FFFFFFFFFFFFFF8)
        v113 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v113 = v112;
      if (v113)
        v114 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v307, v113);
      else
        v114 = 0;
      v115 = (uint64_t *)&v114[8 * v107];
      v116 = &v114[8 * v113];
      *v115 = v109;
      v111 = v115 + 1;
      v117 = v306;
      v118 = v305;
      if (v306 != v305)
      {
        do
        {
          v119 = *--v117;
          *--v115 = v119;
        }
        while (v117 != v118);
        v117 = v305;
      }
      v305 = v115;
      v306 = v111;
      v307 = (uint64_t *)v116;
      if (v117)
        operator delete(v117);
    }
    else
    {
      *v306 = v108;
      v111 = v110 + 1;
    }
    v306 = v111;
    v102 = v279;
    MTLFrameworkPass::appendBufferMetadata(v279, &v302);
  }
  *(_QWORD *)&v120 = -1;
  *((_QWORD *)&v120 + 1) = -1;
  v293 = v120;
  v294 = v120;
  v291 = v120;
  v292 = v120;
  v290 = v120;
  Int1Ty = llvm::Type::getInt1Ty(v102, v101);
  Int32Ty = (llvm::Type *)llvm::Type::getInt32Ty(v102, v122);
  Int64Ty = llvm::Type::getInt64Ty(v102, v123);
  MTLFrameworkPass::addRequiredBuiltInsToBuiltInList(&v299, v298, (uint64_t *)&v295);
  v271 = (_BYTE *)Int1Ty;
  if ((v276 & 1) == 0)
  {
    v124 = v299;
    v125 = v300;
    if (v299 != v300)
    {
      v126 = v279;
      do
      {
        LLVMVectorType = MTLFrameworkPass::getLLVMVectorType(v126, (llvm::LLVMContext *)*((unsigned int *)v124 + 1), v124[1]);
        v128 = MTLFrameworkPass::addBuiltInParameter(v126, (unint64_t)MTLFrameworkPass::vertexFetchbuiltInAIRString[*v124], (char **)&v305, (void **)&v302, LLVMVectorType, *((_DWORD *)v124 + 1), v124[1]);
        v129 = *v124;
        v124 += 8;
        *((_QWORD *)&v290 + v129) = v128;
      }
      while (v124 != v125);
    }
  }
  v261 = &v257;
  v130 = **(_QWORD **)(*((_QWORD *)v104 + 3) + 16);
  v263 = (uint64_t **)v323;
  v264 = (_QWORD *)v130;
  v322[0] = v323;
  v322[1] = (void *)0x200000000;
  v326 = v279;
  v262 = (llvm::IRBuilderFolder *)&v335;
  v327 = &v335;
  v260 = (llvm::IRBuilderDefaultInserter *)v336;
  v328 = v336;
  v329 = 0;
  v330 = 0;
  v331 = 512;
  v332 = 7;
  v325 = 0;
  v324 = 0;
  v335 = MEMORY[0x24BED83B8] + 16;
  v336[0] = MEMORY[0x24BED83F0] + 16;
  v334 = 0;
  v333 = 0;
  ((void (*)(void))MEMORY[0x24BDAC7A8])();
  if ((v134 & 0x7FFFFFE00) != 0)
    v135 = v132;
  else
    v135 = v131;
  v278 = (char *)&v257 - v133;
  bzero((char *)&v257 - v133, v135);
  v267 = 0;
  v268 = 0;
  v137 = 0;
  v275 = 0;
  v138 = 0;
  if ((v276 & 1) == 0)
  {
    llvm::Type::getVoidTy(v279, v136);
    v139 = llvm::FunctionType::get();
    *(_QWORD *)&v311 = "air.vertexDumpFunction";
    LOWORD(v313) = 259;
    v275 = llvm::Function::Create(v139, 0, (uint64_t)&v311, (uint64_t)v274);
    createDebugInfoForWrapperFunction((uint64_t)v279, (llvm::IRBuilderBase *)v322, (llvm::Value *)v275, v104);
    v141 = v299;
    v142 = v300;
    if (v299 != v300)
    {
      while (1)
      {
        v143 = *((_DWORD *)v141 + 1);
        if (v143 > 0x29)
          break;
        if (((1 << v143) & 0x10008) == 0)
        {
          if (((1 << v143) & 0x2020000000) == 0 && ((1 << v143) & 0x20200000000) == 0)
            break;
          llvm::Function::addParamAttr();
        }
        v141 += 8;
        if (v141 == v142)
          goto LABEL_162;
      }
      abort();
    }
LABEL_162:
    *(_QWORD *)&v311 = "Body";
    LOWORD(v313) = 259;
    v144 = llvm::BasicBlock::Create(v279, (llvm::LLVMContext *)&v311, (const llvm::Twine *)v275, 0, v140);
    llvm::IRBuilderBase::SetInsertPoint((uint64_t)v322, v144, v144 + 40);
    v103 = (uint64_t *)v272;
    v145 = (llvm::Function *)v275;
    v146 = v269;
    if ((*(_WORD *)(v275 + 18) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments((llvm::Function *)v275);
      v145 = (llvm::Function *)v275;
    }
    v147 = *((_QWORD *)v145 + 11);
    v148 = v278;
    for (i = v147; ; i += 40)
    {
      if ((*((_WORD *)v145 + 9) & 1) != 0)
      {
        v150 = v145;
        llvm::Function::BuildLazyArguments(v145);
        v147 = *((_QWORD *)v150 + 11);
        v145 = v150;
      }
      if (i == v147 + 40 * *((_QWORD *)v145 + 12))
        break;
      *(_QWORD *)v148 = i;
      v148 += 8;
    }
    v151 = 8 * *((_QWORD *)v146 + 12);
    ((void (*)(void))MEMORY[0x24BDAC7A8])();
    v152 = (char *)&v257 - ((v151 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v151 >= 0x200)
      v153 = 512;
    else
      v153 = v151;
    bzero((char *)&v257 - ((v151 + 15) & 0xFFFFFFFFFFFFFFF0), v153);
    bzero((char *)&v257 - ((v151 + 15) & 0xFFFFFFFFFFFFFFF0), v151);
    if (*((_QWORD *)v146 + 12))
    {
      v154 = v279;
      if ((*((_WORD *)v146 + 9) & 1) == 0 || (llvm::Function::BuildLazyArguments(v146), *((_QWORD *)v146 + 12)))
      {
        v268 = (unsigned __int8 *)v107;
        v155 = 0;
        v156 = (uint64_t *)*((_QWORD *)v146 + 11);
        v157 = 1;
        while (1)
        {
          v158 = *v156;
          if (((*(_QWORD *)&v308[0][(v155 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v155) & 1) == 0)
            break;
          v159 = v280[12 * v155 + 1];
          if (v159 != 11)
          {
            v160 = *(llvm::Value **)&v278[8 * *((unsigned int *)&v290 + 2 * v159)];
            if (*(_QWORD *)v160 == v158)
              goto LABEL_187;
            v162 = 1;
            if (v158 && *(_BYTE *)(v158 + 8) == 18)
              v162 = *(_DWORD *)(v158 + 32);
            v160 = MTLFrameworkPass::truncateVector(v279, (llvm::LLVMContext *)v322, v160, v162);
            if (*(_QWORD *)v160 == v158)
              goto LABEL_187;
            LOWORD(v313) = 257;
            Cast = llvm::IRBuilderBase::CreateCast((uint64_t)v322, 38, (uint64_t)v160, v158, (uint64_t)&v311);
            goto LABEL_186;
          }
          v160 = *(llvm::Value **)&v278[8 * *(unsigned int *)&v280[12 * v155 + 4]];
LABEL_187:
          *(_QWORD *)&v152[8 * v155] = v160;
          v156 += 5;
          v155 = v157;
          v163 = *((_QWORD *)v269 + 12);
          if (v163 <= v157++)
          {
            v154 = v279;
            v103 = (uint64_t *)v272;
            LODWORD(v107) = (_DWORD)v268;
            v146 = v269;
            goto LABEL_189;
          }
        }
        Cast = llvm::UndefValue::get();
LABEL_186:
        v160 = (llvm::Value *)Cast;
        goto LABEL_187;
      }
      v163 = 0;
LABEL_189:
      v165 = *((_QWORD *)v146 + 3);
      LOWORD(v313) = 257;
      v166 = (unsigned __int8 *)llvm::IRBuilderBase::CreateCall((uint64_t)v322, v165, (uint64_t)v146, (uint64_t)v152, v163, (uint64_t)&v311, 0);
    }
    else
    {
      v168 = *((_QWORD *)v146 + 3);
      LOWORD(v313) = 257;
      v166 = (unsigned __int8 *)llvm::IRBuilderBase::CreateCall((uint64_t)v322, v168, (uint64_t)v146, 0, 0, (uint64_t)&v311, 0);
      v154 = v279;
    }
    v268 = v166;
    v169 = (const llvm::Twine *)v275;
    *(_QWORD *)&v311 = "dumpStageOutBlock";
    LOWORD(v313) = 259;
    v170 = (llvm::BranchInst *)llvm::BasicBlock::Create(v154, (llvm::LLVMContext *)&v311, (const llvm::Twine *)v275, 0, v167);
    *(_QWORD *)&v311 = "returnVoidBlock";
    LOWORD(v313) = 259;
    v137 = (llvm::BasicBlock *)llvm::BasicBlock::Create(v154, (llvm::LLVMContext *)&v311, v169, 0, v171);
    v172 = *(llvm::Value **)&v278[8 * (int)v107];
    v173 = Int32Ty;
    v174 = llvm::PointerType::get();
    LOWORD(v313) = 257;
    v175 = llvm::IRBuilderBase::CreateCast((uint64_t)v322, 49, (uint64_t)v172, v174, (uint64_t)&v311);
    v309[0] = 0;
    v309[0] = llvm::AttributeList::addAttributeAtIndex();
    *(_QWORD *)&v311 = v175;
    *((_QWORD *)&v311 + 1) = llvm::ConstantInt::get();
    *(_QWORD *)&v312 = llvm::ConstantInt::get();
    *((_QWORD *)&v312 + 1) = llvm::ConstantInt::get();
    v313 = llvm::ConstantInt::get();
    v176 = (llvm::CmpInst **)MTLFrameworkPass::callFunction((uint64_t)v274, (uint64_t)v322, "air.atomic.global.add.u.i32", (uint64_t)v173, (uint64_t **)&v311, 5, v309[0]);
    v177 = (llvm::Value *)llvm::ConstantInt::get();
    LOWORD(v313) = 257;
    GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)v322, Int8Ty, v172, v177, (const llvm::Twine *)&v311);
    LOWORD(v313) = 257;
    v179 = llvm::IRBuilderBase::CreateCast((uint64_t)v322, 49, GEP, v174, (uint64_t)&v311);
    LOWORD(v313) = 257;
    AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v322, v173, v179, 0, 0, (uint64_t)&v311);
    v138 = (llvm::Value *)v176;
    LOWORD(v313) = 257;
    ICmp = (llvm::BasicBlock *)llvm::IRBuilderBase::CreateICmp((uint64_t)v322, 36, v176, AlignedLoad, (uint64_t)&v311);
    llvm::IRBuilderBase::CreateCondBr((uint64_t *)v322, ICmp, v170, v137, 0, 0);
    v267 = v172;
    llvm::IRBuilderBase::SetInsertPoint((uint64_t)v322, (uint64_t)v170, (uint64_t)v170 + 40);
  }
  v269 = v138;
  v259 = v137;
  *(_DWORD *)v273 = 0;
  v183 = v295;
  v182 = v296;
  if (v296 != v295)
  {
    v184 = 0;
    v185 = 0;
    v271 = v314;
    do
    {
      if (v183[v185])
      {
        v186 = &v299[8 * *((char *)v298[0] + (v184 >> 56))];
        VectorDataType = MTLDataTypeGetVectorDataType(*((_DWORD *)v186 + 1), v186[1]);
        v188 = (llvm::Type *)MTLFrameworkPass::getLLVMVectorType(v279, (llvm::LLVMContext *)*((unsigned int *)v186 + 1), v186[1]);
        v189 = (uint64_t)v188;
        if ((v276 & 1) != 0)
          v190 = 0;
        else
          v190 = *(_QWORD *)&v278[8 * *((_QWORD *)&v290 + *v186)];
        *(_QWORD *)&v311 = llvm::Type::getPrimitiveSizeInBits(v188);
        *((_QWORD *)&v311 + 1) = v191;
        v192 = (unint64_t)llvm::TypeSize::operator unsigned long long() >> 3;
        if (v192 <= 4)
          LODWORD(v192) = 4;
        v193 = *(_DWORD *)v273;
        *(_DWORD *)v273 += (v192 + 3) & 0xFFFFFFFC;
        std::string::basic_string[abi:ne180100]<0>(&v288, MTLFrameworkPass::vertexFetchbuiltInAIRString[*v186]);
        std::string::basic_string[abi:ne180100]<0>(&v286, (char *)&unk_24105C402);
        PostVertexDumpOutput::PostVertexDumpOutput((uint64_t)&v311, v189, v190, &v288, VectorDataType, 0, VectorDataType, &v286, v193);
        v103 = (uint64_t *)v272;
        size = v272->__r_.__value_.__l.__size_;
        if (size >= v272->__r_.__value_.__r.__words[2])
        {
          v198 = std::vector<PostVertexDumpOutput>::__push_back_slow_path<PostVertexDumpOutput>((uint64_t *)v272, (uint64_t)&v311);
          v199 = SHIBYTE(v316);
          v103[1] = v198;
          if (v199 < 0)
            operator delete((void *)v315);
        }
        else
        {
          *(_OWORD *)size = v311;
          v195 = v312;
          *(_QWORD *)(size + 32) = v313;
          *(_OWORD *)(size + 16) = v195;
          v313 = 0;
          v312 = 0uLL;
          v196 = *((_QWORD *)v271 + 2);
          *(_OWORD *)(size + 40) = *(_OWORD *)v271;
          *(_QWORD *)(size + 56) = v196;
          v197 = v316;
          *(_OWORD *)(size + 64) = v315;
          *(_QWORD *)(size + 80) = v197;
          v316 = 0;
          v315 = 0uLL;
          *(_DWORD *)(size + 88) = v317;
          v103[1] = size + 96;
        }
        if (SHIBYTE(v313) < 0)
          operator delete((void *)v312);
        if (v287 < 0)
          operator delete((void *)v286);
        if (v289 < 0)
          operator delete((void *)v288);
        v183 = v295;
        v182 = v296;
      }
      ++v185;
      v184 += 0x100000000000000;
    }
    while (v185 < v182 - v183);
  }
  v200 = *(_QWORD *)(v265 - 8 * *(unsigned int *)(v265 + 8) + 8);
  if ((_DWORD)v276)
    v201 = 0;
  else
    v201 = v322;
  std::string::basic_string[abi:ne180100]<0>(v284, (char *)&unk_24105C402);
  std::string::basic_string[abi:ne180100]<0>(v282, (char *)&unk_24105C402);
  v202 = v267;
  v281[0] = MEMORY[0x24BDAC760];
  v281[1] = 3221225472;
  v281[2] = ___ZN35MTLAddPostVertexDumpingToModulePass28addPostVertexDumpingToModuleEPN4llvm6ModuleEibRjRNSt3__16vectorI20PostVertexDumpOutputNS4_9allocatorIS6_EEEEb_block_invoke;
  v281[3] = &__block_descriptor_48_e508_v96__0r__Type___LLVMContext_b8b24I___Type__8__Value___Type___Use_Cb1b7Sb27b1b1b1b1b1_16_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q______24Q48Q56Q64_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q______72l;
  v281[4] = v273;
  v281[5] = v103;
  iterateAllContainedValues((uint64_t)v201, (uint64_t)v264, v268, v200, v284, 0, 0, 0, (uint64_t)v282, (uint64_t)v281);
  if (v283 < 0)
    operator delete(v282[0]);
  if (v285 < 0)
    operator delete((void *)v284[0]);
  if ((v276 & 1) == 0)
  {
    v203 = (llvm::Value *)llvm::ConstantInt::get();
    LOWORD(v313) = 257;
    v204 = (llvm::Value *)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)v322, Int8Ty, v202, v203, (const llvm::Twine *)&v311);
    v205 = (llvm::Value *)llvm::ConstantInt::get();
    LOWORD(v313) = 257;
    Mul = llvm::IRBuilderBase::CreateMul((llvm::IRBuilderBase *)v322, v269, v205, (const llvm::Twine *)&v311, 0, 0);
    v207 = (llvm::Type *)*((_QWORD *)v204 + 9);
    LOWORD(v313) = 257;
    v208 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)v322, v207, v204, Mul, (const llvm::Twine *)&v311);
    v210 = *v103;
    v278 = (char *)v103[1];
    if ((char *)v210 != v278)
    {
      v211 = (llvm::Value *)v208;
      v276 = (std::string *)&v312;
      v272 = (std::string *)&v315;
      v273 = v314;
      v271 = (_BYTE *)v208;
      do
      {
        v311 = *(_OWORD *)v210;
        if (*(char *)(v210 + 39) < 0)
        {
          std::string::__init_copy_ctor_external(v276, *(const std::string::value_type **)(v210 + 16), *(_QWORD *)(v210 + 24));
        }
        else
        {
          v212 = *(_OWORD *)(v210 + 16);
          v213 = v276;
          v276->__r_.__value_.__r.__words[2] = *(_QWORD *)(v210 + 32);
          *(_OWORD *)&v213->__r_.__value_.__l.__data_ = v212;
        }
        v214 = *(_OWORD *)(v210 + 40);
        v215 = v273;
        *((_QWORD *)v273 + 2) = *(_QWORD *)(v210 + 56);
        *v215 = v214;
        if (*(char *)(v210 + 87) < 0)
        {
          std::string::__init_copy_ctor_external(v272, *(const std::string::value_type **)(v210 + 64), *(_QWORD *)(v210 + 72));
        }
        else
        {
          v216 = *(_OWORD *)(v210 + 64);
          v217 = (uint64_t *)v272;
          v272->__r_.__value_.__r.__words[2] = *(_QWORD *)(v210 + 80);
          *(_OWORD *)v217 = v216;
        }
        v317 = *(_DWORD *)(v210 + 88);
        v218 = (llvm::Value *)*((_QWORD *)&v311 + 1);
        v219 = (llvm::Type *)*((_QWORD *)v211 + 9);
        v220 = (llvm::Value *)llvm::ConstantInt::get();
        v310 = 257;
        v221 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)v322, v219, v211, v220, (const llvm::Twine *)v309);
        v222 = llvm::PointerType::get();
        v310 = 257;
        v224 = llvm::IRBuilderBase::CreateCast((uint64_t)v322, 49, v221, v222, (uint64_t)v309);
        v225 = *(_QWORD *)v218;
        if ((*(_DWORD *)(*(_QWORD *)v218 + 8) & 0xFE) == 0x12)
        {
          v226 = *(unsigned int *)(v225 + 32);
          v227 = *(llvm::Type **)(v225 + 24);
          llvm::Type::getInt32Ty(*(llvm::Type **)v225, v223);
          v228 = llvm::PointerType::get();
          v310 = 257;
          v229 = llvm::IRBuilderBase::CreateCast((uint64_t)v322, 49, v224, v228, (uint64_t)v309);
          if ((_DWORD)v226)
          {
            v230 = (llvm::Value *)v229;
            for (j = 0; j != v226; ++j)
            {
              v232 = (llvm::Value *)llvm::ConstantInt::get();
              v310 = 257;
              Element = (llvm::Type **)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)v322, v218, v232, (const llvm::Twine *)v309, v233);
              v310 = 257;
              v235 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)v322, v227, v230, v232, (const llvm::Twine *)v309);
              llvm::IRBuilderBase::CreateAlignedStore((uint64_t)v322, Element, v235, 0);
            }
          }
        }
        else
        {
          llvm::IRBuilderBase::CreateAlignedStore((uint64_t)v322, (llvm::Type **)v218, v224, 258);
        }
        v211 = (llvm::Value *)v271;
        if (SHIBYTE(v316) < 0)
          operator delete((void *)v315);
        if (SHIBYTE(v313) < 0)
          operator delete((void *)v312);
        v210 += 96;
      }
      while ((char *)v210 != v278);
    }
    v236 = v259;
    v237 = llvm::BranchInst::Create(v259, 0, v209);
    LOWORD(v313) = 257;
    llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)v322, v237, (uint64_t)&v311);
    llvm::IRBuilderBase::SetInsertPoint((uint64_t)v322, (uint64_t)v236, (uint64_t)v236 + 40);
    v239 = llvm::ReturnInst::Create(v326, 0, 0, v238);
    LOWORD(v313) = 257;
    v240 = llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)v322, v239, (uint64_t)&v311);
    v241 = *(unsigned int *)(v265 + 8);
    MEMORY[0x24BDAC7A8](v240);
    v243 = (uint64_t *)((char *)&v257 - ((v242 + 15) & 0xFFFFFFFF0));
    if (v242 >= 0x200)
      v244 = 512;
    else
      v244 = v242;
    bzero((char *)&v257 - ((v242 + 15) & 0xFFFFFFFF0), v244);
    *v243 = llvm::ValueAsMetadata::get();
    v243[1] = llvm::MDTuple::getImpl();
    v243[2] = llvm::MDTuple::getImpl();
    if ((int)v241 >= 4)
    {
      v245 = (uint64_t *)(v265 - 8 * *(unsigned int *)(v265 + 8) + 24);
      v246 = v243 + 3;
      v247 = v241 - 3;
      do
      {
        v248 = *v245++;
        *v246++ = v248;
        --v247;
      }
      while (v247);
    }
    llvm::MDTuple::getImpl();
    llvm::NamedMDNode::eraseFromParent(v258);
    llvm::Module::getOrInsertNamedMetadata();
    llvm::NamedMDNode::addOperand();
  }
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter(v260);
  llvm::IRBuilderFolder::~IRBuilderFolder(v262);
  if (v322[0] != v263)
    free(v322[0]);
  if (v295)
  {
    v296 = v295;
    operator delete(v295);
  }
  if (v297.__begin_)
  {
    v297.__end_ = v297.__begin_;
    operator delete(v297.__begin_);
  }
  if (v298[0])
  {
    v298[1] = v298[0];
    operator delete(v298[0]);
  }
  if (v299)
  {
    v300 = v299;
    operator delete(v299);
  }
  if (v302)
  {
    v303 = v302;
    operator delete(v302);
  }
  if (v305)
  {
    v306 = v305;
    operator delete(v305);
  }
  if (v280)
    operator delete(v280);
  if (v308[0])
    operator delete(v308[0]);
  return v274;
}

void sub_240FE053C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v1[23] = 0;
  v3 = (void *)v1[64];
  if (v3)
  {
    v1[65] = v3;
    operator delete(v3);
  }
  v4 = (void *)v1[67];
  if (v4)
  {
    v1[68] = v4;
    operator delete(v4);
  }
  v5 = (void *)v1[23];
  if (v5)
    operator delete(v5);
  v6 = (void *)v1[70];
  if (v6)
    operator delete(v6);
  _Unwind_Resume(exception_object);
}

void std::vector<BOOL>::reserve(char **a1, unint64_t a2)
{
  unint64_t v3;
  char *v4;
  __int128 v5;
  char *v6;
  int v7;
  char *v8;
  int v9;
  char *v10;
  __int128 v11;

  if (a2 > (_QWORD)a1[2] << 6)
  {
    if ((a2 & 0x8000000000000000) != 0)
      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
    v10 = 0;
    v11 = 0uLL;
    std::vector<BOOL>::__vallocate[abi:ne180100](&v10, a2);
    v3 = (unint64_t)a1[1];
    v8 = *a1;
    v9 = 0;
    v6 = &v8[8 * (v3 >> 6)];
    v7 = v3 & 0x3F;
    std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(&v10, (uint64_t)&v8, (uint64_t)&v6, v3);
    v4 = *a1;
    *a1 = v10;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = v11;
    v11 = v5;
    if (v4)
      operator delete(v4);
  }
}

void sub_240FE08A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MTLArgumentData::~MTLArgumentData(MTLArgumentData *this)
{
  void **v2;

  v2 = (void **)((char *)this + 200);
  std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::shared_ptr<MTLArgumentData>::~shared_ptr[abi:ne180100]((uint64_t)this + 144);
  std::shared_ptr<MTLArgumentData>::~shared_ptr[abi:ne180100]((uint64_t)this + 128);
  std::shared_ptr<MTLArgumentData>::~shared_ptr[abi:ne180100]((uint64_t)this + 112);
}

void std::vector<BOOL>::push_back(uint64_t a1, _BYTE *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v4 == v5 << 6)
  {
    if ((uint64_t)(v4 + 1) < 0)
      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
    v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0) + 64)
      v6 = (v4 & 0xFFFFFFFFFFFFFFC0) + 64;
    if (v4 <= 0x3FFFFFFFFFFFFFFELL)
      v7 = v6;
    else
      v7 = 0x7FFFFFFFFFFFFFFFLL;
    std::vector<BOOL>::reserve((char **)a1, v7);
    v4 = *(_QWORD *)(a1 + 8);
  }
  *(_QWORD *)(a1 + 8) = v4 + 1;
  v8 = *(char **)a1;
  v9 = v4 >> 6;
  v10 = 1 << v4;
  if (*a2)
    v11 = *(_QWORD *)&v8[8 * v9] | v10;
  else
    v11 = *(_QWORD *)&v8[8 * v9] & ~v10;
  *(_QWORD *)&v8[8 * v9] = v11;
}

void PostVertexDumpOutput::~PostVertexDumpOutput(void **this)
{
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

void iterateAllContainedValues(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, const void **a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  llvm::MDString *v20;
  _QWORD *String;
  size_t v22;
  void *v23;
  size_t v24;
  size_t v26;
  void *v27;
  const char *v28;
  size_t v29;
  unsigned int v30;
  size_t v31;
  unint64_t v32;
  size_t v33;
  std::string *p_dst;
  const std::string::value_type *v35;
  std::string *v36;
  std::string::size_type size;
  std::string *v38;
  std::string::size_type v39;
  char v40;
  std::string::size_type v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  size_t v50;
  std::string *v51;
  const void *v52;
  std::string *v53;
  std::string::size_type v54;
  std::string *v55;
  __int128 v56;
  std::string *v57;
  std::string::value_type *v58;
  std::string::size_type v59;
  int v60;
  size_t v61;
  void *Name;
  void *v63;
  uint64_t v64;
  std::string *v65;
  char *v66;
  size_t v67;
  std::string *v68;
  std::string *v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t Value;
  uint64_t v74;
  uint64_t v75;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  std::string v84;
  std::string v85;
  std::string v86;
  std::string v87;
  std::string v88;
  std::string v89;
  std::string v90;
  _DWORD v91[2];
  std::string __dst;
  __int16 v93;
  std::string v94;
  std::string v95;
  std::string v96;
  uint64_t v97;

  v97 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&v95, (char *)&unk_24105C402);
  std::string::basic_string[abi:ne180100]<0>(&v94, (char *)&unk_24105C402);
  v77 = a8;
  if (a4)
  {
    v17 = *(unsigned int *)(a4 + 8);
    if ((_DWORD)v17)
    {
      v18 = 0;
      v80 = 0;
      v82 = 0;
      v78 = 0;
      v19 = 8 * v17;
      while (1)
      {
        v20 = *(llvm::MDString **)(a4 - 8 * *(unsigned int *)(a4 + 8) + v18);
        if (v20 && !*(_BYTE *)v20)
        {
          String = (_QWORD *)llvm::MDString::getString(v20);
          v23 = String;
          v24 = v22;
          if (v22 != 17)
          {
            if (v22 == 12 && *String == 0x5F6772612E726961 && *((_DWORD *)String + 2) == 1701667182)
            {
              v27 = (void *)llvm::MDString::getString(*(llvm::MDString **)(a4 - 8 * *(unsigned int *)(a4 + 8) + v18 + 8));
              if (v27)
                std::string::basic_string[abi:ne180100](&__dst, v27, v26);
              else
                memset(&__dst, 0, sizeof(__dst));
              if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v94.__r_.__value_.__l.__data_);
              v94 = __dst;
              goto LABEL_28;
            }
LABEL_16:
            if (!v18)
            {
              if (v23)
                std::string::basic_string[abi:ne180100](&__dst, v23, v24);
              else
                memset(&__dst, 0, sizeof(__dst));
              if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v95.__r_.__value_.__l.__data_);
              v95 = __dst;
            }
            goto LABEL_28;
          }
          if (memcmp(String, "air.arg_type_name", 0x11uLL))
            goto LABEL_16;
          v28 = (const char *)llvm::MDString::getString(*(llvm::MDString **)(a4
                                                                           - 8 * *(unsigned int *)(a4 + 8)
                                                                           + v18
                                                                           + 8));
          v29 = strlen(v28);
          v30 = dataTypeFromString(v28, v29);
          v31 = strlen(v28);
          v32 = pixelFormatAndALUTypeFromString(v28, v31);
          v78 = HIDWORD(v32);
          v80 = v32;
          v82 = v30;
        }
LABEL_28:
        v18 += 8;
        if (v19 == v18)
          goto LABEL_31;
      }
    }
  }
  v78 = 0;
  v80 = 0;
  v82 = 0;
LABEL_31:
  if (*((char *)a5 + 23) < 0)
  {
    if (a5[1])
      goto LABEL_33;
LABEL_46:
    std::string::basic_string[abi:ne180100]<0>(&__dst, (char *)&unk_24105C402);
    goto LABEL_47;
  }
  if (!*((_BYTE *)a5 + 23))
    goto LABEL_46;
LABEL_33:
  if (*((char *)a5 + 23) >= 0)
    v33 = *((unsigned __int8 *)a5 + 23);
  else
    v33 = (size_t)a5[1];
  std::string::basic_string[abi:ne180100]((uint64_t)&__dst, v33 + 1);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_dst = &__dst;
  else
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if (v33)
  {
    if (*((char *)a5 + 23) >= 0)
      v35 = (const std::string::value_type *)a5;
    else
      v35 = (const std::string::value_type *)*a5;
    memmove(p_dst, v35, v33);
  }
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v33) = 32;
LABEL_47:
  if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v36 = &v95;
  else
    v36 = (std::string *)v95.__r_.__value_.__r.__words[0];
  if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v95.__r_.__value_.__r.__words[2]);
  else
    size = v95.__r_.__value_.__l.__size_;
  v38 = std::string::append(&__dst, (const std::string::value_type *)v36, size);
  v39 = v38->__r_.__value_.__r.__words[0];
  v96.__r_.__value_.__r.__words[0] = v38->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v96.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v38->__r_.__value_.__r.__words[1] + 7);
  v40 = HIBYTE(v38->__r_.__value_.__r.__words[2]);
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  if (*((char *)a5 + 23) < 0)
    operator delete((void *)*a5);
  v41 = v96.__r_.__value_.__r.__words[0];
  *a5 = (const void *)v39;
  a5[1] = (const void *)v41;
  *(const void **)((char *)a5 + 15) = *(const void **)((char *)v96.__r_.__value_.__r.__words + 7);
  *((_BYTE *)a5 + 23) = v40;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (a6)
    v42 = a6;
  else
    v42 = v82;
  v43 = v80;
  if (a7)
    v43 = a7;
  v81 = v43;
  v83 = v42;
  v44 = v77;
  if (!v77)
    v44 = v78;
  v79 = v44;
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a9, (const void **)&v94.__r_.__value_.__l.__data_, (uint64_t)&__dst);
  v45 = (char *)(a9 + 23);
  if (*(char *)(a9 + 23) < 0)
    operator delete(*(void **)a9);
  *(std::string *)a9 = __dst;
  v46 = *(unsigned __int8 *)(a2 + 8);
  if (v46 == 7)
    goto LABEL_170;
  if (v46 == 16)
  {
    std::string::basic_string[abi:ne180100]<0>(&v96, (char *)&unk_24105C402);
    if (*(_QWORD *)(a2 + 24))
    {
      Name = (void *)llvm::StructType::getName((llvm::StructType *)a2);
      if (Name)
        std::string::basic_string[abi:ne180100](&__dst, Name, v61);
      else
        memset(&__dst, 0, sizeof(__dst));
      if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v96.__r_.__value_.__l.__data_);
      v96 = __dst;
    }
    if (*v45 < 0)
      v64 = *(_QWORD *)(a9 + 8);
    else
      v64 = *v45;
    if (v64)
      v65 = (std::string *)a9;
    else
      v65 = &v96;
    if (v64)
      v66 = (char *)(a9 + 23);
    else
      v66 = (char *)&v96.__r_.__value_.__r.__words[2] + 7;
    if ((v65->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v67 = HIBYTE(v65->__r_.__value_.__r.__words[2]);
    else
      v67 = v65->__r_.__value_.__l.__size_;
    v68 = &v90;
    std::string::basic_string[abi:ne180100]((uint64_t)&v90, v67 + 1);
    if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v68 = (std::string *)v90.__r_.__value_.__r.__words[0];
    if (v67)
    {
      if (*v66 >= 0)
        v69 = v65;
      else
        v69 = (std::string *)v65->__r_.__value_.__r.__words[0];
      memmove(v68, v69, v67);
    }
    *(_WORD *)((char *)&v68->__r_.__value_.__l.__data_ + v67) = 46;
    v70 = *(_DWORD *)(a2 + 12);
    v91[0] = 0;
    if (!v70)
    {
LABEL_165:
      if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v90.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_170;
      v63 = (void *)v96.__r_.__value_.__r.__words[0];
LABEL_169:
      operator delete(v63);
      goto LABEL_170;
    }
    v71 = 0;
    while (1)
    {
      v72 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v71);
      if (a1)
      {
        v93 = 257;
        Value = llvm::IRBuilderBase::CreateExtractValue(a1, a3, (uint64_t)v91, 1, (uint64_t)&__dst);
        if (!a4)
          goto LABEL_153;
      }
      else
      {
        Value = 0;
        if (!a4)
        {
LABEL_153:
          v74 = 0;
          goto LABEL_154;
        }
      }
      v74 = *(_QWORD *)(a4 - 8 * *(unsigned int *)(a4 + 8) + 8 * v91[0]);
LABEL_154:
      if (*((char *)a5 + 23) < 0)
        std::string::__init_copy_ctor_external(&v87, (const std::string::value_type *)*a5, (std::string::size_type)a5[1]);
      else
        v87 = *(std::string *)a5;
      if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v86, v90.__r_.__value_.__l.__data_, v90.__r_.__value_.__l.__size_);
      else
        v86 = v90;
      iterateAllContainedValues(a1, v72, Value, v74, &v87, v83, v81, v79, &v86, a10);
      if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v86.__r_.__value_.__l.__data_);
      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v87.__r_.__value_.__l.__data_);
      v71 = v91[0] + 1;
      v91[0] = v71;
      if (v71 >= v70)
        goto LABEL_165;
    }
  }
  if (v46 != 17)
  {
    if (*((char *)a5 + 23) < 0)
      std::string::__init_copy_ctor_external(&v85, (const std::string::value_type *)*a5, (std::string::size_type)a5[1]);
    else
      v85 = *(std::string *)a5;
    if (*v45 < 0)
    {
      std::string::__init_copy_ctor_external(&v84, *(const std::string::value_type **)a9, *(_QWORD *)(a9 + 8));
    }
    else
    {
      *(_OWORD *)&v84.__r_.__value_.__l.__data_ = *(_OWORD *)a9;
      v84.__r_.__value_.__r.__words[2] = *(_QWORD *)(a9 + 16);
    }
    (*(void (**)(uint64_t, uint64_t, unsigned __int8 *, std::string *, uint64_t, uint64_t, unint64_t, std::string *))(a10 + 16))(a10, a2, a3, &v85, v83, v81, v79, &v84);
    if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v84.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v85.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_170;
    v63 = (void *)v85.__r_.__value_.__r.__words[0];
    goto LABEL_169;
  }
  v47 = *(_QWORD *)(a2 + 32);
  if (v47)
  {
    v48 = 0;
    v75 = **(_QWORD **)(a2 + 16);
    do
    {
      if (a1)
      {
        LODWORD(v96.__r_.__value_.__l.__data_) = v48;
        v93 = 257;
        v49 = llvm::IRBuilderBase::CreateExtractValue(a1, a3, (uint64_t)&v96, 1, (uint64_t)&__dst);
      }
      else
      {
        v49 = 0;
      }
      if (*(char *)(a9 + 23) >= 0)
        v50 = *(unsigned __int8 *)(a9 + 23);
      else
        v50 = *(_QWORD *)(a9 + 8);
      std::string::basic_string[abi:ne180100]((uint64_t)&v96, v50 + 1);
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v51 = &v96;
      else
        v51 = (std::string *)v96.__r_.__value_.__r.__words[0];
      if (v50)
      {
        if (*(char *)(a9 + 23) >= 0)
          v52 = (const void *)a9;
        else
          v52 = *(const void **)a9;
        memmove(v51, v52, v50);
      }
      *(_WORD *)((char *)&v51->__r_.__value_.__l.__data_ + v50) = 91;
      std::to_string(&v90, v48);
      if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v53 = &v90;
      else
        v53 = (std::string *)v90.__r_.__value_.__r.__words[0];
      if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v54 = HIBYTE(v90.__r_.__value_.__r.__words[2]);
      else
        v54 = v90.__r_.__value_.__l.__size_;
      v55 = std::string::append(&v96, (const std::string::value_type *)v53, v54);
      v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
      __dst.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v56;
      v55->__r_.__value_.__l.__size_ = 0;
      v55->__r_.__value_.__r.__words[2] = 0;
      v55->__r_.__value_.__r.__words[0] = 0;
      v57 = std::string::append(&__dst, "]");
      v58 = (std::string::value_type *)v57->__r_.__value_.__r.__words[0];
      v59 = v57->__r_.__value_.__l.__size_;
      v91[0] = v57->__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)v91 + 3) = *(_DWORD *)((char *)&v57->__r_.__value_.__r.__words[2] + 3);
      v60 = SHIBYTE(v57->__r_.__value_.__r.__words[2]);
      v57->__r_.__value_.__l.__size_ = 0;
      v57->__r_.__value_.__r.__words[2] = 0;
      v57->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v90.__r_.__value_.__l.__data_);
      if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v96.__r_.__value_.__l.__data_);
      if (*((char *)a5 + 23) < 0)
        std::string::__init_copy_ctor_external(&v89, (const std::string::value_type *)*a5, (std::string::size_type)a5[1]);
      else
        v89 = *(std::string *)a5;
      if (v60 < 0)
      {
        std::string::__init_copy_ctor_external(&v88, v58, v59);
      }
      else
      {
        v88.__r_.__value_.__r.__words[0] = (std::string::size_type)v58;
        v88.__r_.__value_.__l.__size_ = v59;
        LODWORD(v88.__r_.__value_.__r.__words[2]) = v91[0];
        *(_DWORD *)((char *)&v88.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v91 + 3);
        *((_BYTE *)&v88.__r_.__value_.__s + 23) = v60;
      }
      iterateAllContainedValues(a1, v75, v49, 0, &v89, v83, v81, v79, &v88, a10);
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v88.__r_.__value_.__l.__data_);
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v89.__r_.__value_.__l.__data_);
        if (v60 < 0)
LABEL_110:
          operator delete(v58);
      }
      else if (v60 < 0)
      {
        goto LABEL_110;
      }
      ++v48;
    }
    while (v47 != v48);
  }
LABEL_170:
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v94.__r_.__value_.__l.__data_);
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v95.__r_.__value_.__l.__data_);
}

void sub_240FE12C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  uint64_t v62;

  if (a29 < 0)
    operator delete(__p);
  if (*(char *)(v62 - 169) < 0)
    operator delete(*(void **)(v62 - 192));
  if (*(char *)(v62 - 137) < 0)
    operator delete(*(void **)(v62 - 160));
  _Unwind_Resume(exception_object);
}

void ___ZN35MTLAddPostVertexDumpingToModulePass28addPostVertexDumpingToModuleEPN4llvm6ModuleEibRjRNSt3__16vectorI20PostVertexDumpOutputNS4_9allocatorIS6_EEEEb_block_invoke(uint64_t a1, llvm::Type *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16;
  unint64_t v17;
  int *v18;
  int v19;
  uint64_t *v20;
  unint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  std::string v27;
  std::string v28;
  __int128 v29;
  void *v30[2];
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  void *__p[2];
  uint64_t v35;
  int v36;

  *(_QWORD *)&v29 = llvm::Type::getPrimitiveSizeInBits(this);
  *((_QWORD *)&v29 + 1) = v16;
  v17 = (unint64_t)llvm::TypeSize::operator unsigned long long() >> 3;
  if (v17 <= 4)
    LODWORD(v17) = 4;
  v18 = *(int **)(a1 + 32);
  v19 = *v18;
  *v18 += (v17 + 3) & 0xFFFFFFFC;
  v20 = *(uint64_t **)(a1 + 40);
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v28 = *(std::string *)a4;
  if (*(char *)(a8 + 23) < 0)
    std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)a8, *(_QWORD *)(a8 + 8));
  else
    v27 = *(std::string *)a8;
  PostVertexDumpOutput::PostVertexDumpOutput((uint64_t)&v29, (uint64_t)this, a3, (__int128 *)&v28, a5, a6, a7, (__int128 *)&v27, v19);
  v21 = v20[1];
  if (v21 >= v20[2])
  {
    v25 = std::vector<PostVertexDumpOutput>::__push_back_slow_path<PostVertexDumpOutput>(v20, (uint64_t)&v29);
    v26 = SHIBYTE(v35);
    v20[1] = v25;
    if (v26 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)v21 = v29;
    v22 = *(_OWORD *)v30;
    *(_QWORD *)(v21 + 32) = v31;
    *(_OWORD *)(v21 + 16) = v22;
    v30[0] = 0;
    v30[1] = 0;
    v23 = v33;
    *(_OWORD *)(v21 + 40) = v32;
    *(_QWORD *)(v21 + 56) = v23;
    v24 = v35;
    *(_OWORD *)(v21 + 64) = *(_OWORD *)__p;
    *(_QWORD *)(v21 + 80) = v24;
    v31 = 0;
    __p[0] = 0;
    __p[1] = 0;
    v35 = 0;
    *(_DWORD *)(v21 + 88) = v36;
    v20[1] = v21 + 96;
  }
  if (SHIBYTE(v31) < 0)
    operator delete(v30[0]);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
}

void sub_240FE15FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

llvm::Instruction *llvm::IRBuilderBase::CreateMul(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4, uint64_t a5, uint64_t a6)
{
  llvm::Instruction *result;
  BOOL v9;

  if (!a2 || *((unsigned __int8 *)a2 + 16) > 0x14u || !a3 || *((unsigned __int8 *)a3 + 16) > 0x14u)
    return llvm::IRBuilderBase::CreateInsertNUWNSWBinOp((uint64_t *)this, 17, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6);
  result = (llvm::Instruction *)(*(uint64_t (**)(_QWORD, llvm::Value *, llvm::Value *, uint64_t, uint64_t))(**((_QWORD **)this + 9) + 88))(*((_QWORD *)this + 9), a2, a3, a5, a6);
  if (result)
    v9 = *((unsigned __int8 *)result + 16) >= 0x1Cu;
  else
    v9 = 0;
  if (v9)
    return (llvm::Instruction *)llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, (uint64_t)result, (uint64_t)a4);
  return result;
}

void MTLArgumentData::MTLArgumentData(MTLArgumentData *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  *(_DWORD *)this &= 0x1000u;
  *(_OWORD *)((char *)this + 4) = 0u;
  *(_OWORD *)((char *)this + 20) = 0u;
  *(_OWORD *)((char *)this + 36) = 0u;
  *(_OWORD *)((char *)this + 52) = 0u;
  *(_OWORD *)((char *)this + 68) = 0u;
  *(_OWORD *)((char *)this + 84) = 0u;
  *((_OWORD *)this + 6) = 0u;
  v2 = operator new(0x30uLL);
  v2[3] = 0;
  v3 = v2 + 3;
  *((_QWORD *)this + 14) = v2 + 3;
  *((_QWORD *)this + 15) = v2;
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_25111EEF8;
  v2[4] = 0;
  v2[5] = 0;
  v4 = operator new(0x30uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_25111EEF8;
  v4[3] = 0;
  v5 = v4 + 3;
  v4[4] = 0;
  v4[5] = 0;
  *((_QWORD *)this + 16) = v4 + 3;
  *((_QWORD *)this + 17) = v4;
  v6 = operator new(0x30uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_25111EEF8;
  v6[4] = 0;
  v6[5] = 0;
  v6[3] = 0;
  *((_QWORD *)this + 18) = v6 + 3;
  *((_QWORD *)this + 19) = v6;
  *((_QWORD *)this + 20) = v3;
  *((_QWORD *)this + 21) = v5;
  *((_QWORD *)this + 22) = v6 + 3;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 209) = 0u;
  *((_DWORD *)this + 57) = -1;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_QWORD *)this + 35) = 0;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
}

void sub_240FE17F4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<MTLArgumentData>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<MTLArgumentData>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::vector<MTLStructMemberInfo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_25111EEF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<MTLStructMemberInfo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_25111EEF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x24268D8F0);
}

void std::__shared_ptr_emplace<std::vector<MTLStructMemberInfo>>::__on_zero_shared(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 72;
        std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100](&v6);
        std::shared_ptr<MTLArgumentData>::~shared_ptr[abi:ne180100]((uint64_t)(v4 - 120));
        v4 -= 176;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::shared_ptr<MTLArgumentData>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

uint64_t PostVertexDumpOutput::PostVertexDumpOutput(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6, uint64_t a7, __int128 *a8, int a9)
{
  __int128 v14;
  std::string *v15;
  __int128 v16;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v14 = *a4;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(a1 + 16) = v14;
  }
  *(_QWORD *)(a1 + 40) = a5;
  *(_QWORD *)(a1 + 48) = a6;
  *(_QWORD *)(a1 + 56) = a7;
  v15 = (std::string *)(a1 + 64);
  if (*((char *)a8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)a8, *((_QWORD *)a8 + 1));
  }
  else
  {
    v16 = *a8;
    *(_QWORD *)(a1 + 80) = *((_QWORD *)a8 + 2);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
  }
  *(_DWORD *)(a1 + 88) = a9;
  return a1;
}

void sub_240FE1A0C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(const void **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  size_t v5;
  size_t v6;
  uint64_t result;
  char *v8;
  const void *v9;
  char *v10;
  const void *v11;

  if (*((char *)a1 + 23) >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  result = std::string::basic_string[abi:ne180100](a3, v6 + v5);
  if (*(char *)(result + 23) >= 0)
    v8 = (char *)result;
  else
    v8 = *(char **)result;
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0)
      v9 = a1;
    else
      v9 = *a1;
    result = (uint64_t)memmove(v8, v9, v5);
  }
  v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = *a2;
    result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

void std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;

  v4 = a1[1];
  v5 = v4 + a4;
  a1[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41)
      v6 = (v5 - 1) >> 6;
    else
      v6 = 0;
    *(_QWORD *)(*a1 + 8 * v6) = 0;
  }
  v7 = *(_DWORD *)(a2 + 8);
  v8 = *(_QWORD *)a3;
  v9 = *(_DWORD *)(a3 + 8);
  v10 = *a1 + 8 * (v4 >> 6);
  v16 = *(_QWORD *)a2;
  v17 = v7;
  v14 = v8;
  v15 = v9;
  v12 = v10;
  v13 = v4 & 0x3F;
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(&v16, &v14, &v12, (uint64_t)&v11);
}

void std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;

  v5 = *((_DWORD *)a1 + 2);
  v6 = *a2;
  v7 = *((_DWORD *)a2 + 2);
  v16 = *a1;
  v17 = v5;
  v14 = v6;
  v15 = v7;
  v8 = *((_DWORD *)a3 + 2);
  v12 = *a3;
  v13 = v8;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>((uint64_t)&v16, (uint64_t)&v14, (uint64_t)&v12, (uint64_t)&v18);
  v9 = v19;
  v10 = v20;
  v11 = v21;
  *(_QWORD *)a4 = v18;
  *(_DWORD *)(a4 + 8) = v9;
  *(_QWORD *)(a4 + 16) = v10;
  *(_DWORD *)(a4 + 24) = v11;
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  int v5;
  int i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;

  v4 = *(_QWORD **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  for (i = *(_DWORD *)(a3 + 8); *(_QWORD *)a1 != *(_QWORD *)a2 || v5 != *(_DWORD *)(a2 + 8); v5 = *(_DWORD *)(a1 + 8))
  {
    v8 = *(uint64_t **)a3;
    v9 = 1 << i;
    if (((*v4 >> v5) & 1) != 0)
      v10 = *v8 | v9;
    else
      v10 = *v8 & ~v9;
    *v8 = v10;
    if (v5 == 63)
    {
      v11 = 0;
      *(_QWORD *)a1 = v4 + 1;
    }
    else
    {
      v11 = v5 + 1;
    }
    *(_DWORD *)(a1 + 8) = v11;
    v12 = *(_DWORD *)(a3 + 8);
    if (v12 == 63)
    {
      i = 0;
      *(_QWORD *)a3 += 8;
    }
    else
    {
      i = v12 + 1;
    }
    *(_DWORD *)(a3 + 8) = i;
    v4 = *(_QWORD **)a1;
  }
  *(_QWORD *)a4 = v4;
  *(_DWORD *)(a4 + 8) = v5;
  *(_QWORD *)(a4 + 16) = *(_QWORD *)a3;
  *(_DWORD *)(a4 + 24) = i;
}

_QWORD *std::vector<signed char>::vector(_QWORD *a1, size_t a2, _BYTE *a3)
{
  size_t v5;
  _BYTE *v6;
  _BYTE *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    v5 = a2;
    std::vector<signed char>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_BYTE *)a1[1];
    v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_240FE1D4C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<signed char>::__vallocate[abi:ne180100](_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

uint64_t llvm::DenseMap<llvm::Metadata *,std::vector<MTLStructMemberInfo> *,llvm::DenseMapInfo<llvm::Metadata *,void>,llvm::detail::DenseMapPair<llvm::Metadata *,std::vector<MTLStructMemberInfo> *>>::~DenseMap(uint64_t a1)
{
  llvm::deallocate_buffer(*(llvm **)a1, (void *)(16 * *(unsigned int *)(a1 + 16)));
  return a1;
}

_QWORD *std::vector<unsigned char>::vector(_QWORD *a1, size_t a2, _BYTE *a3)
{
  size_t v5;
  _BYTE *v6;
  _BYTE *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    v5 = a2;
    std::vector<signed char>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_BYTE *)a1[1];
    v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_240FE1E40(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<PostVertexDumpOutput>::__push_back_slow_path<PostVertexDumpOutput>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v18[5];

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  v5 = v4 + 1;
  if (v4 + 1 > 0x2AAAAAAAAAAAAAALL)
    std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x155555555555555)
    v9 = 0x2AAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v18[4] = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PostVertexDumpOutput>>(v7, v9);
  v11 = &v10[96 * v4];
  v18[0] = v10;
  v18[1] = v11;
  v18[3] = &v10[96 * v12];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  v13 = *(_OWORD *)(a2 + 16);
  *((_QWORD *)v11 + 4) = *(_QWORD *)(a2 + 32);
  *((_OWORD *)v11 + 1) = v13;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v14 = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(v11 + 40) = *(_OWORD *)(a2 + 40);
  *((_QWORD *)v11 + 7) = v14;
  v15 = *(_QWORD *)(a2 + 80);
  *((_OWORD *)v11 + 4) = *(_OWORD *)(a2 + 64);
  *((_QWORD *)v11 + 10) = v15;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *((_DWORD *)v11 + 22) = *(_DWORD *)(a2 + 88);
  v18[2] = v11 + 96;
  std::vector<PostVertexDumpOutput>::__swap_out_circular_buffer(a1, v18);
  v16 = a1[1];
  std::__split_buffer<PostVertexDumpOutput>::~__split_buffer(v18);
  return v16;
}

void sub_240FE1F80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<PostVertexDumpOutput>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<PostVertexDumpOutput>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PostVertexDumpOutput>,std::reverse_iterator<PostVertexDumpOutput*>,std::reverse_iterator<PostVertexDumpOutput*>,std::reverse_iterator<PostVertexDumpOutput*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<PostVertexDumpOutput>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(96 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PostVertexDumpOutput>,std::reverse_iterator<PostVertexDumpOutput*>,std::reverse_iterator<PostVertexDumpOutput*>,std::reverse_iterator<PostVertexDumpOutput*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    do
    {
      *(_OWORD *)(v7 - 96) = *(_OWORD *)(a3 - 96);
      v8 = *(_OWORD *)(a3 - 80);
      *(_QWORD *)(v7 - 64) = *(_QWORD *)(a3 - 64);
      *(_OWORD *)(v7 - 80) = v8;
      *(_QWORD *)(a3 - 72) = 0;
      *(_QWORD *)(a3 - 64) = 0;
      *(_QWORD *)(a3 - 80) = 0;
      v9 = *(_OWORD *)(a3 - 56);
      *(_QWORD *)(v7 - 40) = *(_QWORD *)(a3 - 40);
      *(_OWORD *)(v7 - 56) = v9;
      v10 = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 - 16);
      *(_OWORD *)(v7 - 32) = v10;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 - 8);
      v7 = *((_QWORD *)&v16 + 1) - 96;
      *((_QWORD *)&v16 + 1) -= 96;
      a3 -= 96;
    }
    while (a3 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<PostVertexDumpOutput>,std::reverse_iterator<PostVertexDumpOutput*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<PostVertexDumpOutput>,std::reverse_iterator<PostVertexDumpOutput*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<PostVertexDumpOutput>,std::reverse_iterator<PostVertexDumpOutput*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<PostVertexDumpOutput>,std::reverse_iterator<PostVertexDumpOutput*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<PostVertexDumpOutput>::destroy[abi:ne180100](v3, v1);
      v1 += 96;
    }
    while (v1 != v2);
  }
}

void std::allocator<PostVertexDumpOutput>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 87) < 0)
    operator delete(*(void **)(a2 + 64));
  if (*(char *)(a2 + 39) < 0)
    operator delete(*(void **)(a2 + 16));
}

void **std::__split_buffer<PostVertexDumpOutput>::~__split_buffer(void **a1)
{
  std::__split_buffer<PostVertexDumpOutput>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<PostVertexDumpOutput>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 96;
    std::allocator<PostVertexDumpOutput>::destroy[abi:ne180100](v4, i - 96);
  }
}

uint64_t createMTLThreadgroupMemoryCheckPass(MTLBoundsCheck::SharedPassData *a1)
{
  uint64_t v2;

  v2 = operator new();
  MetalModulePass::MetalModulePass(v2, (uint64_t)&MTLThreadgroupMemoryCheckPass::ID, (uint64_t)a1);
  *(_QWORD *)v2 = &off_25111EF30;
  *(_DWORD *)(v2 + 184) = 0;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  return v2;
}

void sub_240FE22C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x24268D8F0](v1, 0x10E1C40CBA0151CLL);
  _Unwind_Resume(a1);
}

void MTLThreadgroupMemoryCheckPass::~MTLThreadgroupMemoryCheckPass(MTLThreadgroupMemoryCheckPass *this)
{
  char *v2;

  *(_QWORD *)this = &off_25111E050;
  v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
}

{
  char *v2;

  *(_QWORD *)this = &off_25111E050;
  v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x24268D8F0);
}

BOOL MTLThreadgroupMemoryCheckPass::runOnModule(MTLThreadgroupMemoryCheckPass *this, llvm::Module *a2)
{
  uint64_t v2;
  int v3;
  llvm::Module *v6;
  _QWORD *i;
  llvm::Function *v9;

  v2 = *(_QWORD *)(*((_QWORD *)this + 8) + 64);
  v3 = *(unsigned __int8 *)(v2 + 651);
  if (!*(_BYTE *)(v2 + 651))
  {
    MetalModulePass::runOnModule(this, a2);
    *((_DWORD *)this + 46) = 0;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 13) = 0u;
    if (MTLBoundsCheck::isLibraryModule(*((MTLBoundsCheck **)this + 6), v6))
    {
      MTLThreadgroupMemoryCheckPass::createTagFunctions(this, a2);
      MTLThreadgroupMemoryCheckPass::createGetLengthFunctions(this, a2);
    }
    else
    {
      if ((*(_BYTE *)(*((_QWORD *)this + 4) + 23) & 2) != 0)
      {
        MTLThreadgroupMemoryCheckPass::mergeThreadgroupGlobals(this);
        if (*((_DWORD *)this + 30) == 5)
          MTLThreadgroupMemoryCheckPass::createMeshThreadgroupGlobal(this);
      }
      MTLThreadgroupMemoryCheckPass::replaceGlobalBindings(this);
      if ((*(_BYTE *)(*((_QWORD *)this + 4) + 23) & 4) != 0)
        MTLThreadgroupMemoryCheckPass::mergeThreadgroupArguments(this);
      MTLThreadgroupMemoryCheckPass::createTagFunctions(this, a2);
      MTLThreadgroupMemoryCheckPass::createGetLengthFunctions(this, a2);
      if ((*(_BYTE *)(*((_QWORD *)this + 4) + 23) & 8) != 0)
      {
        for (i = (_QWORD *)*((_QWORD *)a2 + 4); i != (_QWORD *)((char *)a2 + 24); i = (_QWORD *)i[1])
        {
          if (i)
            v9 = (llvm::Function *)(i - 7);
          else
            v9 = 0;
          MTLThreadgroupMemoryCheckPass::applyPointerTagging(this, v9);
        }
      }
    }
    if ((*(_BYTE *)(*((_QWORD *)this + 4) + 23) & 1) != 0)
      MTLThreadgroupMemoryCheckPass::applyThreadgroupChecks((MTLBoundsCheck::SharedPassData **)this, a2);
  }
  return v3 == 0;
}

void MTLThreadgroupMemoryCheckPass::mergeThreadgroupGlobals(MTLThreadgroupMemoryCheckPass *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  llvm::GlobalVariable **v12;
  uint64_t v13;
  llvm::GlobalVariable *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  char v18;
  uint64_t inserted;
  uint64_t v20;
  uint64_t v21[3];
  uint64_t *v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[9];

  v25[8] = *MEMORY[0x24BDAC8D0];
  v20 = 0;
  v23 = v25;
  v24 = 0x400000000;
  v2 = *((_QWORD *)this + 6);
  v3 = v2 + 8;
  v4 = *(_QWORD *)(v2 + 16);
  if (v4 == v2 + 8)
  {
    *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 8) + 64) + 632) = 0;
  }
  else
  {
    v5 = 0;
    do
    {
      if (v4)
        v6 = v4 - 56;
      else
        v6 = 0;
      if ((*(_BYTE *)(v6 + 33) & 0x1C) == 0)
      {
        v7 = *(_DWORD *)(*(_QWORD *)v6 + 8);
        if (v7 == 15)
        {
          if ((v7 & 0xFE) == 0x12)
            v7 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v6 + 16) + 8);
          if ((v7 & 0xFFFFFF00) == 0x300)
          {
            v21[0] = v6;
            llvm::SmallVectorImpl<std::pair<llvm::GlobalVariable *,unsigned long long>>::emplace_back<llvm::GlobalVariable *,unsigned long long &>((uint64_t)&v23, v21, &v20);
            v21[0] = llvm::DataLayout::getTypeAllocSize(*((llvm::DataLayout **)this + 7), *(llvm::Type **)(v6 + 24));
            v21[1] = v8;
            v9 = llvm::TypeSize::operator unsigned long long();
            v5 = v20 + v9;
            v20 += v9;
          }
        }
      }
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4 != v3);
    v10 = v24;
    v11 = *((_QWORD *)this + 8);
    *(_DWORD *)(*(_QWORD *)(v11 + 64) + 632) = v5;
    if (v10)
    {
      inserted = MTLBoundsCheck::SharedPassData::getOrInsertThreadgroupBasePointerGV((llvm::Module **)v11);
      if ((_DWORD)v24)
      {
        v12 = (llvm::GlobalVariable **)v23;
        v13 = 16 * v24;
        while (1)
        {
          v14 = *v12;
          v15 = (uint64_t *)operator new(0x20uLL);
          *v15 = (uint64_t)&off_25111EFD0;
          v15[1] = (uint64_t)&inserted;
          v15[2] = (uint64_t)this;
          v15[3] = (uint64_t)v12;
          v22 = v15;
          MTLRAUWUtility::replaceAllUsesWith((uint64_t)&v18, (uint64_t)v14, (uint64_t)v21);
          v16 = v22;
          if (v22 == v21)
            break;
          if (v22)
          {
            v17 = 5;
LABEL_20:
            (*(void (**)(void))(*v16 + 8 * v17))();
          }
          llvm::GlobalVariable::dropAllReferences(*v12);
          llvm::GlobalVariable::eraseFromParent(*v12);
          v12 += 2;
          v13 -= 16;
          if (!v13)
            goto LABEL_24;
        }
        v16 = v21;
        v17 = 4;
        goto LABEL_20;
      }
    }
  }
LABEL_24:
  if (v23 != v25)
    free(v23);
}

void sub_240FE26AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;

  if (a16 != v16)
    free(a16);
  _Unwind_Resume(exception_object);
}

void MTLThreadgroupMemoryCheckPass::createMeshThreadgroupGlobal(MTLThreadgroupMemoryCheckPass *this)
{
  llvm::Type *v1;
  uint64_t v3;
  llvm::BasicBlock *v4;
  uint64_t v5;
  uint64_t FirstInsertionPt;
  uint64_t v7;
  llvm::Type **Cast;
  uint64_t inserted;
  llvm::BasicBlock *v10[4];
  __int16 v11;
  void *v12[2];
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[8];

  v15[7] = *MEMORY[0x24BDAC8D0];
  v1 = (llvm::Type *)*(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 8) + 64) + 632);
  if ((_DWORD)v1)
  {
    v3 = *(_QWORD *)(MetalModulePass::getEntryFunction(this) + 80);
    if (v3)
      v4 = (llvm::BasicBlock *)(v3 - 24);
    else
      v4 = 0;
    v10[0] = v4;
    MTLIRBuilder::MTLIRBuilder<llvm::BasicBlock *>((uint64_t)v12, v10);
    llvm::ArrayType::get(*((llvm::ArrayType **)this + 12), v1);
    v5 = llvm::User::operator new((llvm::User *)0x58);
    llvm::UndefValue::get();
    v10[0] = (llvm::BasicBlock *)"mtl.threadgroup_memory";
    v11 = 259;
    llvm::GlobalVariable::GlobalVariable();
    FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v4);
    llvm::IRBuilderBase::SetInsertPoint((uint64_t)v12, (uint64_t)v4, FirstInsertionPt);
    v7 = llvm::PointerType::get();
    v11 = 257;
    Cast = (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)v12, 49, v5, v7, (uint64_t)v10);
    inserted = MTLBoundsCheck::SharedPassData::getOrInsertThreadgroupBasePointerGV(*((llvm::Module ***)this + 8));
    llvm::IRBuilderBase::CreateAlignedStore((uint64_t)v12, Cast, inserted, 0);
    llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v15);
    llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v14);
    if (v12[0] != &v13)
      free(v12[0]);
  }
}

void sub_240FE28AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _DWORD *v17;

  v17[5] = v17[5] & 0xF8000000 | 1;
  llvm::User::operator delete(v17);
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder(&a17);
  _Unwind_Resume(a1);
}

void MTLThreadgroupMemoryCheckPass::replaceGlobalBindings(MTLThreadgroupMemoryCheckPass *this)
{
  llvm::Module *v2;
  uint64_t NamedMetadata;
  llvm::NamedMDNode *v4;
  uint64_t v5;
  uint64_t Operand;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char LocationIndex;
  _QWORD *String;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  BOOL v18;
  BOOL v19;
  uint64_t i;
  BOOL v21;
  uint64_t v22;
  unsigned __int8 *v23;
  llvm::Instruction *v24;
  llvm::Value *inserted;
  llvm::Type *v26;
  uint64_t *AlignedLoad;
  uint64_t v28;
  llvm::Value *v29;
  llvm::Type *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *Name;
  size_t v36;
  uint64_t GVBaseType;
  uint64_t v38;
  llvm::Type *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  size_t v43;
  llvm::Type *v44;
  uint64_t v45;
  llvm::Value *Cast;
  llvm::Type **GEP;
  uint64_t v48;
  llvm::Type *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  llvm::GlobalVariable **v60;
  llvm::GlobalVariable **v61;
  llvm::GlobalVariable *v62;
  llvm::Type *v63;
  llvm::NamedMDNode *v64;
  char v65;
  int v66;
  _QWORD v67[4];
  __int16 v68;
  llvm::Instruction *v69;
  _OWORD v70[2];
  __int128 v71;
  void *__p;
  char *v73;
  char *v74;
  uint64_t *v75;
  void *v76;
  uint64_t v77;
  _WORD v78[8];
  void *v79[2];
  _WORD v80[52];
  uint64_t v81;
  _QWORD v82[9];

  v82[7] = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v73 = 0;
  v74 = 0;
  v2 = (llvm::Module *)*((_QWORD *)this + 6);
  v79[0] = "air.global_bindings";
  v80[8] = 259;
  NamedMetadata = llvm::Module::getNamedMetadata(v2, (const llvm::Twine *)v79);
  v4 = (llvm::NamedMDNode *)NamedMetadata;
  if (NamedMetadata)
  {
    v5 = 0;
    v65 = 0;
    v64 = (llvm::NamedMDNode *)NamedMetadata;
    while (v5 < llvm::NamedMDNode::getNumOperands(v4))
    {
      Operand = llvm::NamedMDNode::getOperand(v4);
      v7 = Operand - 8 * *(unsigned int *)(Operand + 8);
      v8 = *(_QWORD *)(v7 + 16);
      v9 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 128);
      LocationIndex = MTLBoundsCheck::getLocationIndex(v8);
      String = (_QWORD *)llvm::MDString::getString(*(llvm::MDString **)(v8 - 8 * *(unsigned int *)(v8 + 8) + 8));
      if (v12 == 11
        && (*String == 0x747865742E726961
          ? (v13 = *(_QWORD *)((char *)String + 3) == 0x657275747865742ELL)
          : (v13 = 0),
            v13
         || (*String == 0x706D61732E726961
           ? (v14 = *(_QWORD *)((char *)String + 3) == 0x72656C706D61732ELL)
           : (v14 = 0),
             v14))
        || MTLBoundsCheck::getAddressSpace(v8) != 3)
      {
        v65 = 1;
      }
      else
      {
        v71 = 0u;
        memset(v70, 0, sizeof(v70));
        v15 = *(_QWORD *)(v9 + 8);
        if (v15)
        {
          do
          {
            v16 = *(unsigned __int8 **)(v15 + 24);
            v79[0] = v16;
            v17 = v16[16];
            if (v16)
              v18 = v17 >= 0x1C;
            else
              v18 = 0;
            if (v18)
            {
              std::deque<llvm::User *>::push_back(v70, v79);
            }
            else
            {
              if (v16)
                v19 = v17 == 5;
              else
                v19 = 0;
              if (v19)
              {
                llvm::ConstantExpr::isCast((llvm::ConstantExpr *)v16);
                v16 = (unsigned __int8 *)v79[0];
              }
              for (i = *((_QWORD *)v16 + 1); i; i = *(_QWORD *)(i + 8))
              {
                v67[0] = *(_QWORD *)(i + 24);
                if (v67[0])
                  v21 = *(unsigned __int8 *)(v67[0] + 16) >= 0x1Cu;
                else
                  v21 = 0;
                if (v21)
                  std::deque<llvm::User *>::push_back(v70, v67);
              }
            }
            v15 = *(_QWORD *)(v15 + 8);
          }
          while (v15);
          v22 = *((_QWORD *)&v71 + 1);
          if (*((_QWORD *)&v71 + 1))
          {
            v66 = 1 << LocationIndex;
            do
            {
              v23 = *(unsigned __int8 **)(*(_QWORD *)(*((_QWORD *)&v70[0] + 1)
                                                    + (((unint64_t)v71 >> 6) & 0x3FFFFFFFFFFFFF8))
                                        + 8 * (v71 & 0x1FF));
              *(_QWORD *)&v71 = v71 + 1;
              *((_QWORD *)&v71 + 1) = v22 - 1;
              if ((unint64_t)v71 >= 0x400)
              {
                operator delete(**((void ***)&v70[0] + 1));
                *((_QWORD *)&v70[0] + 1) += 8;
                *(_QWORD *)&v71 = v71 - 512;
              }
              if (v23[16] <= 0x1Bu)
                v24 = 0;
              else
                v24 = (llvm::Instruction *)v23;
              v69 = v24;
              MTLIRBuilder::MTLIRBuilder<llvm::Instruction *&>((uint64_t)v79, &v69);
              inserted = (llvm::Value *)MTLBoundsCheck::SharedPassData::getOrInsertThreadgroupBasePointerGV(*((llvm::Module ***)this + 8));
              v26 = (llvm::Type *)*((_QWORD *)inserted + 3);
              v68 = 257;
              AlignedLoad = (uint64_t *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v79, v26, (uint64_t)inserted, 0, 0, (uint64_t)v67);
              v28 = v5;
              v29 = (llvm::Value *)MTLBoundsCheck::SharedPassData::getOrInsertThreadgroupTableGV(*((llvm::Module ***)this
                                                                                                 + 8));
              v30 = (llvm::Type *)*((_QWORD *)v29 + 3);
              v68 = 257;
              v31 = (uint64_t *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v79, v30, (uint64_t)v29, 0, 0, (uint64_t)v67);
              v32 = *((_QWORD *)this + 8) + 208;
              v75 = v31;
              llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>,llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v32, &v75, (uint64_t)v67);
              v33 = *((_QWORD *)this + 8) + 208;
              v75 = AlignedLoad;
              llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>,llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v33, &v75, (uint64_t)v67);
              v34 = *((_QWORD *)this + 8);
              *(_DWORD *)(*(_QWORD *)(v34 + 64) + 636) |= v66;
              Name = (char *)llvm::Value::getName(v29);
              GVBaseType = MTLBoundsCheck::SharedPassData::getGVBaseType(v34, Name, v36);
              v75 = (uint64_t *)llvm::ConstantInt::get();
              v76 = (void *)llvm::ConstantInt::get();
              v68 = 257;
              v38 = llvm::IRBuilderBase::CreateGEP((uint64_t)v79, GVBaseType, v31, &v75, 2, (uint64_t)v67);
              v39 = *(llvm::Type **)(v38 + 72);
              v68 = 257;
              v40 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v79, v39, v38, 0, 0, (uint64_t)v67);
              v41 = *((_QWORD *)this + 8);
              v42 = (char *)llvm::Value::getName(inserted);
              v44 = (llvm::Type *)MTLBoundsCheck::SharedPassData::getGVBaseType(v41, v42, v43);
              v45 = *((_QWORD *)this + 9);
              v68 = 257;
              Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v79, 40, v40, v45, (uint64_t)v67);
              v78[4] = 257;
              GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)v79, v44, (llvm::Value *)AlignedLoad, Cast, (const llvm::Twine *)&v75);
              v48 = *((_QWORD *)this + 4);
              v75 = (uint64_t *)*((_QWORD *)this + 5);
              v76 = v78;
              v77 = 0;
              v5 = v28;
              if ((*(_BYTE *)(v48 + 23) & 8) != 0)
              {
                ++*((_DWORD *)this + 46);
                MTLMDBuilder::getMDTuple<unsigned int>();
                llvm::Instruction::setMetadata();
              }
              v49 = *(llvm::Type **)v69;
              v68 = 257;
              llvm::IRBuilderBase::CreateBitOrPointerCast((llvm::IRBuilderBase *)v79, GEP, v49, (const llvm::Twine *)v67);
              llvm::Value::replaceAllUsesWith();
              v50 = v73;
              if (v73 >= v74)
              {
                v52 = (v73 - (_BYTE *)__p) >> 3;
                if ((unint64_t)(v52 + 1) >> 61)
                  std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
                v53 = (v74 - (_BYTE *)__p) >> 2;
                if (v53 <= v52 + 1)
                  v53 = v52 + 1;
                if ((unint64_t)(v74 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
                  v54 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v54 = v53;
                if (v54)
                  v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v74, v54);
                else
                  v55 = 0;
                v56 = &v55[8 * v52];
                *(_QWORD *)v56 = v9;
                v51 = v56 + 8;
                v58 = (char *)__p;
                v57 = v73;
                if (v73 != __p)
                {
                  do
                  {
                    v59 = *((_QWORD *)v57 - 1);
                    v57 -= 8;
                    *((_QWORD *)v56 - 1) = v59;
                    v56 -= 8;
                  }
                  while (v57 != v58);
                  v57 = (char *)__p;
                }
                __p = v56;
                v73 = v51;
                v74 = &v55[8 * v54];
                if (v57)
                  operator delete(v57);
              }
              else
              {
                *(_QWORD *)v73 = v9;
                v51 = v50 + 8;
              }
              v73 = v51;
              llvm::Instruction::eraseFromParent(v69);
              if (v76 != v78)
                free(v76);
              llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v82);
              llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v81);
              if (v79[0] != v80)
                free(v79[0]);
              v22 = *((_QWORD *)&v71 + 1);
            }
            while (*((_QWORD *)&v71 + 1));
          }
        }
        std::deque<llvm::User *>::~deque[abi:ne180100](v70);
        v4 = v64;
      }
      v5 = (v5 + 1);
    }
    v60 = (llvm::GlobalVariable **)__p;
    v61 = (llvm::GlobalVariable **)v73;
    while (v60 != v61)
    {
      v62 = *v60;
      llvm::GlobalVariable::dropAllReferences(*v60);
      llvm::Constant::getNullValue(*(llvm::Constant **)v62, v63);
      llvm::Value::replaceAllUsesWith();
      llvm::GlobalVariable::eraseFromParent(v62);
      ++v60;
    }
    if ((v65 & 1) == 0)
    {
      llvm::NamedMDNode::clearOperands(v64);
      llvm::NamedMDNode::eraseFromParent(v64);
    }
  }
  if (__p)
  {
    v73 = (char *)__p;
    operator delete(__p);
  }
}

void sub_240FE2F3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MTLThreadgroupMemoryCheckPass::mergeThreadgroupArguments(MTLThreadgroupMemoryCheckPass *this)
{
  uint64_t EntryFunction;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::BasicBlock *v12;
  llvm::BasicBlock *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  const llvm::AttributeList *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t inserted;
  llvm::Type *v21;
  llvm::Value *v22;
  llvm::Type *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  char LocationIndex;
  uint64_t v30;
  char *Name;
  size_t v32;
  uint64_t GVBaseType;
  uint64_t GEP;
  llvm::Type *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  size_t v39;
  llvm::Type *v40;
  uint64_t v41;
  llvm::Value *Cast;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  llvm::LLVMContext *v47;
  llvm::Instruction *v48;
  uint64_t v49;
  const llvm::AttributeList *v50;
  uint64_t v51;
  const llvm::AttributeList *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  llvm::Value *AlignedLoad;
  llvm::Value *v58;
  uint64_t *v59;
  _BYTE v60[32];
  __int16 v61;
  llvm::BasicBlock *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  int v67[8];
  __int16 v68;
  uint64_t *v69[4];
  __int16 v70;
  void *FnAttrs;
  uint64_t v72;
  _BYTE v73[64];
  void *v74[2];
  uint64_t v75;
  __int16 v76;
  llvm::ReturnInst *v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  _BYTE v82[32];
  unsigned int *v83;
  uint64_t v84;
  _BYTE v85[16];
  void *v86[2];
  _BYTE v87[32];
  void *v88[2];
  _QWORD v89[6];

  v89[4] = *MEMORY[0x24BDAC8D0];
  v64 = *((_QWORD *)this + 5);
  v65 = v67;
  v66 = 0;
  EntryFunction = MetalModulePass::getEntryFunction(this);
  v3 = *(_QWORD *)(EntryFunction + 24);
  v63 = *(_QWORD *)(EntryFunction + 112);
  v88[0] = v89;
  v88[1] = (void *)0x400000000;
  v86[0] = v87;
  v86[1] = (void *)0x400000000;
  v83 = (unsigned int *)v85;
  v84 = 0x400000000;
  v80 = v82;
  v81 = 0x400000000;
  v67[0] = 0;
  if (*(_DWORD *)(v3 + 12) != 1)
  {
    v4 = 0;
    do
    {
      v74[0] = 0;
      v5 = *(_QWORD *)(*((_QWORD *)this + 16) - 8 * *(unsigned int *)(*((_QWORD *)this + 16) + 8) + 16);
      v6 = *(void **)(v5 - 8 * *(unsigned int *)(v5 + 8) + 8 * v4);
      v74[0] = v6;
      FnAttrs = 0;
      v7 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * (v4 + 1));
      FnAttrs = (void *)v7;
      v8 = *(_DWORD *)(v7 + 8);
      if (v8 != 15)
        goto LABEL_8;
      if ((v8 & 0xFE) == 0x12)
        v8 = *(_DWORD *)(**(_QWORD **)(v7 + 16) + 8);
      if ((v8 & 0xFFFFFF00) == 0x300
        && !MTLThreadgroupMemoryCheckPass::isMeshGridPropertiesArg((uint64_t)this, (uint64_t)v6))
      {
        llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)&v80, (uint64_t *)v74);
      }
      else
      {
LABEL_8:
        MTLMDBuilder::getMetadata<unsigned int>();
        llvm::MDNode::replaceOperandWith();
        llvm::SmallVectorImpl<unsigned int>::emplace_back<unsigned int &>((uint64_t)&v83, v67);
        llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)v88, (uint64_t *)v74);
        llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)v86, (uint64_t *)&FnAttrs);
      }
      v4 = v67[0] + 1;
      v67[0] = v4;
    }
    while (v4 < *(_DWORD *)(v3 + 12) - 1);
    if ((_DWORD)v81)
    {
      v9 = llvm::FunctionType::get();
      v10 = *(_DWORD *)(EntryFunction + 32) & 0xF;
      v76 = 257;
      v11 = llvm::Function::Create(v9, v10, (uint64_t)v74, *((_QWORD *)this + 6));
      v62 = 0;
      v12 = (llvm::BasicBlock *)*((_QWORD *)this + 5);
      v76 = 257;
      v62 = (llvm::BasicBlock *)llvm::BasicBlock::Create(v12, (llvm::LLVMContext *)v74, (const llvm::Twine *)v11, 0, v13);
      MTLIRBuilder::MTLIRBuilder<llvm::BasicBlock *&>((uint64_t)v74, &v62);
      v56 = EntryFunction;
      FnAttrs = v73;
      v72 = 0x800000000;
      llvm::SmallVectorImpl<llvm::Value *>::resizeImpl<false>((uint64_t)&FnAttrs, (*(_DWORD *)(v3 + 12) - 1));
      if ((_DWORD)v84)
      {
        v15 = 0;
        do
        {
          if ((*(_WORD *)(v11 + 18) & 1) != 0)
            llvm::Function::BuildLazyArguments((llvm::Function *)v11);
          v16 = *(_QWORD *)(v11 + 88);
          v17 = (const llvm::AttributeList *)v83[v15];
          *(_QWORD *)v67 = llvm::compat::getParamAttrs((llvm::compat *)&v63, v17, v14);
          v18 = llvm::AttributeSet::begin((llvm::AttributeSet *)v67);
          v19 = llvm::AttributeSet::end((llvm::AttributeSet *)v67);
          while (v18 != v19)
          {
            llvm::Function::addParamAttr();
            v18 += 8;
          }
          *((_QWORD *)FnAttrs + (_QWORD)v17) = v16 + 40 * v15;
          v15 = (v15 + 1);
        }
        while (v84 > v15);
      }
      inserted = MTLBoundsCheck::SharedPassData::getOrInsertThreadgroupBasePointerGV(*((llvm::Module ***)this + 8));
      v21 = *(llvm::Type **)(inserted + 24);
      v68 = 257;
      AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v74, v21, inserted, 0, 0, (uint64_t)v67);
      v22 = (llvm::Value *)MTLBoundsCheck::SharedPassData::getOrInsertThreadgroupTableGV(*((llvm::Module ***)this + 8));
      v58 = (llvm::Value *)inserted;
      v23 = (llvm::Type *)*((_QWORD *)v22 + 3);
      v68 = 257;
      v59 = (uint64_t *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v74, v23, (uint64_t)v22, 0, 0, (uint64_t)v67);
      if ((_DWORD)v81)
      {
        v24 = (uint64_t *)v80;
        v25 = 8 * v81;
        do
        {
          v26 = *(_QWORD *)(*(_QWORD *)(*v24 - 8 * *(unsigned int *)(*v24 + 8)) + 128);
          v27 = (_QWORD *)(v26 + 24);
          if (*(_DWORD *)(v26 + 32) >= 0x41u)
            v27 = (_QWORD *)*v27;
          v28 = (_QWORD *)*v27;
          LocationIndex = MTLBoundsCheck::getLocationIndex(*v24);
          v30 = *((_QWORD *)this + 8);
          *(_DWORD *)(*(_QWORD *)(v30 + 64) + 636) |= 1 << LocationIndex;
          Name = (char *)llvm::Value::getName(v22);
          GVBaseType = MTLBoundsCheck::SharedPassData::getGVBaseType(v30, Name, v32);
          v69[0] = (uint64_t *)llvm::ConstantInt::get();
          v69[1] = (uint64_t *)llvm::ConstantInt::get();
          v68 = 257;
          GEP = llvm::IRBuilderBase::CreateGEP((uint64_t)v74, GVBaseType, v59, v69, 2, (uint64_t)v67);
          v35 = *(llvm::Type **)(GEP + 72);
          v68 = 257;
          v36 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v74, v35, GEP, 0, 0, (uint64_t)v67);
          v37 = *((_QWORD *)this + 8);
          v38 = (char *)llvm::Value::getName(v58);
          v40 = (llvm::Type *)MTLBoundsCheck::SharedPassData::getGVBaseType(v37, v38, v39);
          v41 = *((_QWORD *)this + 9);
          v68 = 257;
          Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v74, 40, v36, v41, (uint64_t)v67);
          v70 = 257;
          v43 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)v74, v40, AlignedLoad, Cast, (const llvm::Twine *)v69);
          v44 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * ((_DWORD)v28 + 1));
          v61 = 257;
          v45 = llvm::IRBuilderBase::CreateCast((uint64_t)v74, 49, v43, v44, (uint64_t)v60);
          if ((*(_BYTE *)(*((_QWORD *)this + 4) + 23) & 8) != 0)
          {
            ++*((_DWORD *)this + 46);
            MTLMDBuilder::getMDTuple<unsigned int>();
            llvm::Instruction::setMetadata();
          }
          *((_QWORD *)FnAttrs + v28) = v45;
          ++v24;
          v25 -= 8;
        }
        while (v25);
      }
      if (v56)
        v46 = *(_QWORD *)(v56 + 24);
      else
        v46 = 0;
      v68 = 257;
      v47 = (llvm::LLVMContext *)llvm::IRBuilderBase::CreateCall((uint64_t)v74, v46, v56, (uint64_t)FnAttrs, v72, (uint64_t)v67, 0);
      if (*(_BYTE *)(**(_QWORD **)(v3 + 16) + 8) == 7)
        v49 = llvm::ReturnInst::Create(v77, 0, 0, v48);
      else
        v49 = llvm::ReturnInst::Create(v77, v47, 0, v48);
      v68 = 257;
      llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)v74, v49, (uint64_t)v67);
      if (FnAttrs != v73)
        free(FnAttrs);
      *(_DWORD *)(v56 + 32) = *(_DWORD *)(v56 + 32) & 0xFFFFBFC0 | 0x4007;
      llvm::Function::addFnAttr();
      llvm::Value::takeName();
      FnAttrs = (void *)llvm::compat::getFnAttrs((llvm::compat *)&v63, v50);
      v51 = llvm::AttributeSet::begin((llvm::AttributeSet *)&FnAttrs);
      v53 = llvm::AttributeSet::end((llvm::AttributeSet *)&FnAttrs);
      while (v51 != v53)
      {
        llvm::Function::addFnAttr();
        v51 += 8;
      }
      FnAttrs = (void *)llvm::compat::getRetAttrs((llvm::compat *)&v63, v52);
      v54 = (_QWORD *)llvm::AttributeSet::begin((llvm::AttributeSet *)&FnAttrs);
      v55 = llvm::AttributeSet::end((llvm::AttributeSet *)&FnAttrs);
      while (v54 != (_QWORD *)v55)
        llvm::compat::addAttribute(v11, 0, *v54++);
      llvm::MDTuple::getImpl();
      llvm::MDNode::replaceOperandWith();
      MetalModulePass::getMetadata((MetalModulePass *)&v64, (llvm::Value *)v11);
      llvm::MDNode::replaceOperandWith();
      llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)&v79);
      llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v78);
      if (v74[0] != &v75)
        free(v74[0]);
    }
  }
  if (v80 != v82)
    free(v80);
  if (v83 != (unsigned int *)v85)
    free(v83);
  if (v86[0] != v87)
    free(v86[0]);
  if (v88[0] != v89)
    free(v88[0]);
  if (v65 != v67)
    free(v65);
}

void sub_240FE377C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50)
{
  void *v50;
  uint64_t v51;
  void *v53;
  void *v54;
  void *v55;

  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder(&a50);
  if (STACK[0x200] != a13)
    free((void *)STACK[0x200]);
  v53 = *(void **)(v51 - 224);
  if (v53 != (void *)a14)
    free(v53);
  v54 = *(void **)(v51 - 192);
  if (v54 != (void *)a15)
    free(v54);
  v55 = *(void **)(v51 - 144);
  if (v55 != (void *)a16)
    free(v55);
  if (a28 != v50)
    free(a28);
  _Unwind_Resume(a1);
}

void MTLThreadgroupMemoryCheckPass::createTagFunctions(MTLThreadgroupMemoryCheckPass *this, llvm::Module *a2)
{
  MTLBoundsCheck *v4;
  llvm::BasicBlock *v5;
  uint64_t v6;
  const llvm::Twine *v7;
  llvm::LLVMContext *v8;
  llvm::BasicBlock *v9;
  llvm::Instruction *v10;
  uint64_t v11;
  uint64_t v12;
  llvm::Value *Cast;
  llvm::Value *v14;
  uint64_t v15;
  uint64_t v16;
  llvm::LLVMContext *v17;
  llvm::Instruction *v18;
  MTLBoundsCheck *v19;
  llvm::BasicBlock *v20;
  uint64_t v21;
  const llvm::Twine *v22;
  llvm::Value *v23;
  llvm::BasicBlock *v24;
  llvm::LLVMContext *v25;
  llvm::Instruction *v26;
  uint64_t v27;
  llvm::Value *v28;
  llvm::Value *LShr;
  llvm::Value *v30;
  llvm::BasicBlock *v31;
  MTLBoundsCheck *v32[4];
  __int16 v33;
  void *v34[2];
  _BYTE v35[16];
  __int16 v36;
  llvm::ReturnInst *v37;
  uint64_t v38;
  _QWORD v39[8];

  v39[7] = *MEMORY[0x24BDAC8D0];
  v34[0] = "mtl.threadgroup.strip_tag";
  v36 = 259;
  v4 = (MTLBoundsCheck *)llvm::PointerType::get();
  v32[0] = (MTLBoundsCheck *)llvm::PointerType::get();
  *((_QWORD *)this + 24) = getMangledFunction<llvm::PointerType *>((uint64_t)a2, (llvm::Twine *)v34, v4, v32);
  llvm::Function::addFnAttr();
  llvm::Function::addFnAttr();
  llvm::Function::onlyWritesMemory(*((llvm::Function **)this + 24));
  llvm::Function::addFnAttr();
  *(_DWORD *)(*((_QWORD *)this + 24) + 32) = *(_DWORD *)(*((_QWORD *)this + 24) + 32) & 0xFFFFBFC0 | 0x4007;
  v6 = *((_QWORD *)this + 24);
  v7 = (const llvm::Twine *)v6;
  if ((*(_WORD *)(v6 + 18) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments((llvm::Function *)v6);
    v7 = (const llvm::Twine *)*((_QWORD *)this + 24);
  }
  v8 = *(llvm::LLVMContext **)(v6 + 88);
  v31 = 0;
  v9 = (llvm::BasicBlock *)*((_QWORD *)this + 5);
  v36 = 257;
  v31 = (llvm::BasicBlock *)llvm::BasicBlock::Create(v9, (llvm::LLVMContext *)v34, v7, 0, v5);
  MTLIRBuilder::MTLIRBuilder<llvm::BasicBlock *&>((uint64_t)v34, &v31);
  if ((*(_BYTE *)(*((_QWORD *)this + 4) + 23) & 8) != 0)
  {
    v12 = *((_QWORD *)this + 9);
    v33 = 257;
    Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v34, 47, (uint64_t)v8, v12, (uint64_t)v32);
    v33 = 257;
    v14 = (llvm::Value *)llvm::ConstantInt::get();
    v15 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)v34, Cast, v14, (const llvm::Twine *)v32);
    v16 = *(_QWORD *)v8;
    v33 = 257;
    v17 = (llvm::LLVMContext *)llvm::IRBuilderBase::CreateCast((uint64_t)v34, 48, v15, v16, (uint64_t)v32);
    v11 = llvm::ReturnInst::Create(v37, v17, 0, v18);
  }
  else
  {
    v11 = llvm::ReturnInst::Create(v37, v8, 0, v10);
  }
  v33 = 257;
  llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)v34, v11, (uint64_t)v32);
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v39);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v38);
  if (v34[0] != v35)
    free(v34[0]);
  v34[0] = "mtl.threadgroup.get_tag";
  v36 = 259;
  v19 = (MTLBoundsCheck *)*((_QWORD *)this + 10);
  v32[0] = (MTLBoundsCheck *)llvm::PointerType::get();
  *((_QWORD *)this + 25) = getMangledFunction<llvm::PointerType *>((uint64_t)a2, (llvm::Twine *)v34, v19, v32);
  llvm::Function::addFnAttr();
  llvm::Function::addFnAttr();
  llvm::Function::onlyWritesMemory(*((llvm::Function **)this + 25));
  llvm::Function::addFnAttr();
  *(_DWORD *)(*((_QWORD *)this + 25) + 32) = *(_DWORD *)(*((_QWORD *)this + 25) + 32) & 0xFFFFBFC0 | 0x4007;
  v21 = *((_QWORD *)this + 25);
  v22 = (const llvm::Twine *)v21;
  if ((*(_WORD *)(v21 + 18) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments((llvm::Function *)v21);
    v22 = (const llvm::Twine *)*((_QWORD *)this + 25);
  }
  v23 = *(llvm::Value **)(v21 + 88);
  v24 = (llvm::BasicBlock *)*((_QWORD *)this + 5);
  v36 = 257;
  v31 = (llvm::BasicBlock *)llvm::BasicBlock::Create(v24, (llvm::LLVMContext *)v34, v22, 0, v20);
  MTLIRBuilder::MTLIRBuilder<llvm::BasicBlock *&>((uint64_t)v34, &v31);
  if ((*(_BYTE *)(*((_QWORD *)this + 4) + 23) & 8) != 0)
  {
    v33 = 257;
    v28 = (llvm::Value *)llvm::ConstantInt::get();
    LShr = (llvm::Value *)llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)v34, v23, v28, (const llvm::Twine *)v32, 0);
    v33 = 257;
    v30 = (llvm::Value *)llvm::ConstantInt::get();
    v25 = (llvm::LLVMContext *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)v34, LShr, v30, (const llvm::Twine *)v32);
  }
  else
  {
    v25 = (llvm::LLVMContext *)llvm::ConstantInt::get();
  }
  v27 = llvm::ReturnInst::Create(v37, v25, 0, v26);
  v33 = 257;
  llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)v34, v27, (uint64_t)v32);
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v39);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v38);
  if (v34[0] != v35)
    free(v34[0]);
}

void sub_240FE3CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder((void **)va);
  _Unwind_Resume(a1);
}

void MTLThreadgroupMemoryCheckPass::createGetLengthFunctions(MTLThreadgroupMemoryCheckPass *this, llvm::Module *a2)
{
  llvm::Type **v4;
  llvm::BasicBlock *v5;
  llvm::BasicBlock *v6;
  llvm::BasicBlock *v7;
  llvm::BasicBlock *v8;
  llvm::BranchInst *v9;
  llvm::BasicBlock *v10;
  llvm::BasicBlock *v11;
  llvm::BasicBlock *v12;
  uint64_t v13;
  llvm::CmpInst **v14;
  uint64_t v15;
  llvm::BasicBlock *ICmp;
  llvm::Value *inserted;
  llvm::Type *v18;
  uint64_t *AlignedLoad;
  uint64_t v20;
  char *Name;
  size_t v22;
  uint64_t GVBaseType;
  uint64_t v24;
  uint64_t v25;
  llvm::Type *v26;
  llvm::Value *v27;
  llvm::Instruction *v28;
  uint64_t v29;
  llvm::Type *v30;
  llvm::Instruction *v31;
  llvm::PHINode *PHI;
  llvm::Value *v33;
  llvm::Instruction *v34;
  uint64_t v35;
  MTLBoundsCheck *v36;
  llvm::Function **v37;
  llvm::BasicBlock *v38;
  llvm::Function *v39;
  uint64_t v40;
  llvm::Function *v41;
  uint64_t v42;
  llvm::BasicBlock *v43;
  llvm::Value *v44;
  llvm::Type *v45;
  uint64_t *v46;
  llvm::Value *v47;
  llvm::Type *v48;
  llvm::Value *v49;
  uint64_t v50;
  char *v51;
  size_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  llvm::Type *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  size_t v60;
  llvm::Type *v61;
  uint64_t v62;
  llvm::Value *v63;
  uint64_t GEP;
  uint64_t v65;
  llvm::Value *v66;
  uint64_t v67;
  llvm::Value *v68;
  llvm::Instruction *Sub;
  uint64_t v70;
  llvm::LLVMContext *v71;
  llvm::Instruction *v72;
  uint64_t v73;
  _BYTE v74[32];
  __int16 v75;
  llvm::BasicBlock *v76;
  uint64_t v77[4];
  __int16 v78;
  uint64_t *Cast;
  uint64_t v80;
  __int16 v81;
  void *v82[2];
  _BYTE v83[16];
  __int16 v84;
  llvm::BranchInst *v85;
  char *v86;
  llvm::ReturnInst *v87;
  uint64_t v88;
  _QWORD v89[9];

  v89[7] = *MEMORY[0x24BDAC8D0];
  v82[0] = "mtl.threadgroup.get_length";
  v84 = 259;
  v4 = (llvm::Type **)((char *)this + 80);
  *((_QWORD *)this + 26) = getMangledFunction<llvm::Type *&>((uint64_t)a2, (llvm::Twine *)v82, *((MTLBoundsCheck **)this + 10), (MTLBoundsCheck **)this + 10);
  llvm::Function::addFnAttr();
  llvm::Function::addFnAttr();
  llvm::Function::addFnAttr();
  *(_DWORD *)(*((_QWORD *)this + 26) + 32) = *(_DWORD *)(*((_QWORD *)this + 26) + 32) & 0xFFFFBFC0 | 0x4007;
  v5 = (llvm::BasicBlock *)*((_QWORD *)this + 5);
  v82[0] = "entry";
  v84 = 259;
  v76 = (llvm::BasicBlock *)llvm::BasicBlock::Create(v5, (llvm::LLVMContext *)v82, *((const llvm::Twine **)this + 26), 0, v6);
  v7 = (llvm::BasicBlock *)*((_QWORD *)this + 5);
  v82[0] = "goodTag";
  v84 = 259;
  v9 = (llvm::BranchInst *)llvm::BasicBlock::Create(v7, (llvm::LLVMContext *)v82, *((const llvm::Twine **)this + 26), 0, v8);
  v10 = (llvm::BasicBlock *)*((_QWORD *)this + 5);
  v82[0] = "ret";
  v84 = 259;
  v12 = (llvm::BasicBlock *)llvm::BasicBlock::Create(v10, (llvm::LLVMContext *)v82, *((const llvm::Twine **)this + 26), 0, v11);
  MTLIRBuilder::MTLIRBuilder<llvm::BasicBlock *&>((uint64_t)v82, &v76);
  v13 = *((_QWORD *)this + 26);
  if ((*(_WORD *)(v13 + 18) & 1) != 0)
    llvm::Function::BuildLazyArguments((llvm::Function *)v13);
  v14 = *(llvm::CmpInst ***)(v13 + 88);
  v15 = llvm::ConstantInt::get();
  v78 = 257;
  ICmp = (llvm::BasicBlock *)llvm::IRBuilderBase::CreateICmp((uint64_t)v82, 37, v14, v15, (uint64_t)v77);
  llvm::IRBuilderBase::CreateCondBr((uint64_t *)v82, ICmp, v9, v12, 0, 0);
  v85 = v9;
  v86 = (char *)v9 + 40;
  inserted = (llvm::Value *)MTLBoundsCheck::SharedPassData::getOrInsertThreadgroupTableGV(*((llvm::Module ***)this + 8));
  v18 = (llvm::Type *)*((_QWORD *)inserted + 3);
  v78 = 257;
  AlignedLoad = (uint64_t *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v82, v18, (uint64_t)inserted, 0, 0, (uint64_t)v77);
  v20 = *((_QWORD *)this + 8);
  Name = (char *)llvm::Value::getName(inserted);
  GVBaseType = MTLBoundsCheck::SharedPassData::getGVBaseType(v20, Name, v22);
  v24 = *((_QWORD *)this + 9);
  v78 = 257;
  Cast = (uint64_t *)llvm::IRBuilderBase::CreateCast((uint64_t)v82, 40, (uint64_t)v14, v24, (uint64_t)v77);
  v80 = llvm::ConstantInt::get();
  v75 = 257;
  v25 = llvm::IRBuilderBase::CreateGEP((uint64_t)v82, GVBaseType, AlignedLoad, &Cast, 2, (uint64_t)v74);
  v26 = *(llvm::Type **)(v25 + 72);
  v78 = 257;
  v27 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v82, v26, v25, 0, 0, (uint64_t)v77);
  v29 = llvm::BranchInst::Create(v12, 0, v28);
  v78 = 257;
  llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)v82, v29, (uint64_t)v77);
  v85 = v12;
  v86 = (char *)v12 + 40;
  v30 = *v4;
  v78 = 257;
  PHI = (llvm::PHINode *)llvm::IRBuilderBase::CreatePHI((llvm::IRBuilderBase *)v82, v30, 0, (const llvm::Twine *)v77, v31);
  llvm::PHINode::addIncoming(PHI, v27, v9);
  v33 = (llvm::Value *)llvm::ConstantInt::get();
  llvm::PHINode::addIncoming(PHI, v33, v76);
  v35 = llvm::ReturnInst::Create(v87, PHI, 0, v34);
  v78 = 257;
  llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)v82, v35, (uint64_t)v77);
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v89);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v88);
  if (v82[0] != v83)
    free(v82[0]);
  v82[0] = "mtl.threadgroup.get_pointer_offset";
  v84 = 259;
  v36 = (MTLBoundsCheck *)*((_QWORD *)this + 10);
  v77[0] = llvm::PointerType::get();
  *((_QWORD *)this + 27) = getMangledFunction<llvm::Type *&,llvm::PointerType *>((uint64_t)a2, (llvm::Twine *)v82, v36, v4, v77);
  v37 = (llvm::Function **)((char *)this + 216);
  llvm::Function::addFnAttr();
  llvm::Function::addFnAttr();
  llvm::Function::addFnAttr();
  *(_DWORD *)(*((_QWORD *)this + 27) + 32) = *(_DWORD *)(*((_QWORD *)this + 27) + 32) & 0xFFFFBFC0 | 0x4007;
  v39 = (llvm::Function *)*((_QWORD *)this + 27);
  if ((*((_WORD *)v39 + 9) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments(*v37);
    v41 = (llvm::Function *)*((_QWORD *)this + 27);
    v40 = *((_QWORD *)v39 + 11);
    if ((*((_WORD *)v41 + 9) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 27));
      v39 = v41;
      v41 = (llvm::Function *)*((_QWORD *)this + 27);
    }
    else
    {
      v39 = (llvm::Function *)*((_QWORD *)this + 27);
    }
  }
  else
  {
    v40 = *((_QWORD *)v39 + 11);
    v41 = *v37;
  }
  v42 = *((_QWORD *)v39 + 11);
  v76 = 0;
  v43 = (llvm::BasicBlock *)*((_QWORD *)this + 5);
  v82[0] = "entry";
  v84 = 259;
  v76 = (llvm::BasicBlock *)llvm::BasicBlock::Create(v43, (llvm::LLVMContext *)v82, v41, 0, v38);
  MTLIRBuilder::MTLIRBuilder<llvm::BasicBlock *&>((uint64_t)v82, &v76);
  v44 = (llvm::Value *)MTLBoundsCheck::SharedPassData::getOrInsertThreadgroupTableGV(*((llvm::Module ***)this + 8));
  v45 = (llvm::Type *)*((_QWORD *)v44 + 3);
  v78 = 257;
  v46 = (uint64_t *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v82, v45, (uint64_t)v44, 0, 0, (uint64_t)v77);
  v47 = (llvm::Value *)MTLBoundsCheck::SharedPassData::getOrInsertThreadgroupBasePointerGV(*((llvm::Module ***)this + 8));
  v48 = (llvm::Type *)*((_QWORD *)v47 + 3);
  v78 = 257;
  v49 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v82, v48, (uint64_t)v47, 0, 0, (uint64_t)v77);
  v50 = *((_QWORD *)this + 8);
  v51 = (char *)llvm::Value::getName(v44);
  v53 = MTLBoundsCheck::SharedPassData::getGVBaseType(v50, v51, v52);
  v54 = *((_QWORD *)this + 9);
  v78 = 257;
  Cast = (uint64_t *)llvm::IRBuilderBase::CreateCast((uint64_t)v82, 40, v40, v54, (uint64_t)v77);
  v80 = llvm::ConstantInt::get();
  v75 = 257;
  v55 = llvm::IRBuilderBase::CreateGEP((uint64_t)v82, v53, v46, &Cast, 2, (uint64_t)v74);
  v56 = *(llvm::Type **)(v55 + 72);
  v78 = 257;
  v57 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v82, v56, v55, 0, 0, (uint64_t)v77);
  v58 = *((_QWORD *)this + 8);
  v59 = (char *)llvm::Value::getName(v47);
  v61 = (llvm::Type *)MTLBoundsCheck::SharedPassData::getGVBaseType(v58, v59, v60);
  v62 = *((_QWORD *)this + 9);
  v78 = 257;
  v63 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v82, 40, v57, v62, (uint64_t)v77);
  v75 = 257;
  GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)v82, v61, v49, v63, (const llvm::Twine *)v74);
  v65 = *((_QWORD *)this + 9);
  v78 = 257;
  v66 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v82, 47, GEP, v65, (uint64_t)v77);
  v67 = *((_QWORD *)this + 9);
  v78 = 257;
  v68 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v82, 47, v42 + 40, v67, (uint64_t)v77);
  v75 = 257;
  Sub = llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)v82, v68, v66, (const llvm::Twine *)v74, 0, 0);
  v70 = (uint64_t)*v4;
  v81 = 257;
  v71 = (llvm::LLVMContext *)llvm::IRBuilderBase::CreateCast((uint64_t)v82, 38, (uint64_t)Sub, v70, (uint64_t)&Cast);
  v73 = llvm::ReturnInst::Create(v87, v71, 0, v72);
  v78 = 257;
  llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)v82, v73, (uint64_t)v77);
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v89);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v88);
  if (v82[0] != v83)
    free(v82[0]);
}

void sub_240FE43B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder(&a26);
  _Unwind_Resume(a1);
}

void MTLThreadgroupMemoryCheckPass::applyThreadgroupChecks(MTLBoundsCheck::SharedPassData **this, llvm::Module *a2)
{
  char *v2;
  char *v3;
  llvm::Value *v5;
  _QWORD *Name;
  unint64_t v7;
  BOOL v8;

  v2 = (char *)a2 + 24;
  v3 = (char *)*((_QWORD *)a2 + 4);
  if (v3 != (char *)a2 + 24)
  {
    do
    {
      if (v3)
        v5 = (llvm::Value *)(v3 - 56);
      else
        v5 = 0;
      Name = (_QWORD *)llvm::Value::getName(v5);
      if (v7 < 0x10 || (*Name == 0x657268742E6C746DLL ? (v8 = Name[1] == 0x2E70756F72676461) : (v8 = 0), !v8))
      {
        if ((llvm::GlobalValue::isDeclaration(v5) & 1) == 0)
          MTLThreadgroupMemoryCheckPass::applyThreadgroupChecks(this, v5);
      }
      v3 = (char *)*((_QWORD *)v3 + 1);
    }
    while (v3 != v2);
  }
}

uint64_t llvm::SmallVectorImpl<std::pair<llvm::GlobalVariable *,unsigned long long>>::emplace_back<llvm::GlobalVariable *,unsigned long long &>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;

  v4 = *(unsigned int *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorTemplateBase<std::pair<unsigned int,llvm::MDNode *>,true>::push_back(a1, *a2, *a3);
    v5 = *(_QWORD *)a1;
    v8 = *(_DWORD *)(a1 + 8);
  }
  else
  {
    v5 = *(_QWORD *)a1;
    v6 = (uint64_t *)(*(_QWORD *)a1 + 16 * v4);
    v7 = *a3;
    *v6 = *a2;
    v6[1] = v7;
    v8 = v4 + 1;
    *(_DWORD *)(a1 + 8) = v8;
  }
  return v5 + 16 * v8 - 16;
}

void std::__function::__func<MTLThreadgroupMemoryCheckPass::mergeThreadgroupGlobals(void)::{lambda(MTLIRBuilder &)#1},std::allocator<MTLThreadgroupMemoryCheckPass::mergeThreadgroupGlobals(void)::{lambda(MTLIRBuilder &)#1}>,llvm::Value * ()(MTLIRBuilder &)>::~__func()
{
  JUMPOUT(0x24268D8F0);
}

__n128 std::__function::__func<MTLThreadgroupMemoryCheckPass::mergeThreadgroupGlobals(void)::{lambda(MTLIRBuilder &)#1},std::allocator<MTLThreadgroupMemoryCheckPass::mergeThreadgroupGlobals(void)::{lambda(MTLIRBuilder &)#1}>,llvm::Value * ()(MTLIRBuilder &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_25111EFD0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<MTLThreadgroupMemoryCheckPass::mergeThreadgroupGlobals(void)::{lambda(MTLIRBuilder &)#1},std::allocator<MTLThreadgroupMemoryCheckPass::mergeThreadgroupGlobals(void)::{lambda(MTLIRBuilder &)#1}>,llvm::Value * ()(MTLIRBuilder &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_25111EFD0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<MTLThreadgroupMemoryCheckPass::mergeThreadgroupGlobals(void)::{lambda(MTLIRBuilder &)#1},std::allocator<MTLThreadgroupMemoryCheckPass::mergeThreadgroupGlobals(void)::{lambda(MTLIRBuilder &)#1}>,llvm::Value * ()(MTLIRBuilder &)>::operator()(uint64_t a1, llvm::Type **a2)
{
  return MTLThreadgroupMemoryCheckPass::mergeThreadgroupGlobals(void)::{lambda(MTLIRBuilder &)#1}::operator()(a1 + 8, a2);
}

uint64_t MTLThreadgroupMemoryCheckPass::mergeThreadgroupGlobals(void)::{lambda(MTLIRBuilder &)#1}::operator()(uint64_t a1, llvm::Type **a2)
{
  uint64_t v4;
  uint64_t v5;
  llvm::Type *v6;
  llvm::Value *AlignedLoad;
  uint64_t v8;
  char *Name;
  size_t v10;
  llvm::Type *GVBaseType;
  unint64_t v12;
  uint64_t ConstGEP1_64;
  uint64_t v14;
  uint64_t Cast;
  _WORD v17[20];
  _BYTE v18[32];
  __int16 v19;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = **(_QWORD **)a1;
  v6 = *(llvm::Type **)(v5 + 24);
  v19 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)a2, v6, v5, 0, 0, (uint64_t)v18);
  v8 = *(_QWORD *)(v4 + 64);
  Name = (char *)llvm::Value::getName(**(llvm::Value ***)a1);
  GVBaseType = (llvm::Type *)MTLBoundsCheck::SharedPassData::getGVBaseType(v8, Name, v10);
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v19 = 257;
  ConstGEP1_64 = llvm::IRBuilderBase::CreateConstGEP1_64(a2, GVBaseType, AlignedLoad, v12, (const llvm::Twine *)v18);
  v14 = ***(_QWORD ***)(a1 + 16);
  v17[16] = 257;
  Cast = llvm::IRBuilderBase::CreateCast((uint64_t)a2, 49, ConstGEP1_64, v14, (uint64_t)v17);
  if ((*(_BYTE *)(*(_QWORD *)(v4 + 32) + 23) & 8) != 0)
  {
    ++*(_DWORD *)(v4 + 184);
    MetalModulePass::getMDTuple<unsigned int>();
    llvm::Instruction::setMetadata();
  }
  return Cast;
}

uint64_t MetalModulePass::getMDTuple<unsigned int>()
{
  MetalModulePass::getMetadata<unsigned int>();
  return llvm::MDTuple::getImpl();
}

uint64_t MTLIRBuilder::MTLIRBuilder<llvm::BasicBlock *>(uint64_t a1, llvm::BasicBlock **a2)
{
  llvm::BasicBlock *v3;
  llvm::LLVMContext *Context;

  v3 = *a2;
  Context = (llvm::LLVMContext *)llvm::BasicBlock::getContext(*a2);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x200000000;
  *(_QWORD *)(a1 + 120) = MEMORY[0x24BED83B8] + 16;
  *(_QWORD *)(a1 + 64) = Context;
  *(_QWORD *)(a1 + 72) = a1 + 120;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BED83F0] + 16;
  *(_QWORD *)(a1 + 80) = a1 + 128;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(_WORD *)(a1 + 100) = 512;
  *(_BYTE *)(a1 + 102) = 7;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 48) = v3;
  *(_QWORD *)(a1 + 56) = (char *)v3 + 40;
  MTLIRBuilder::initTypeCache((MTLIRBuilder *)a1, Context);
  return a1;
}

void sub_240FE47F4(_Unwind_Exception *a1)
{
  void **v1;

  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder(v1);
  _Unwind_Resume(a1);
}

uint64_t MTLMDBuilder::getMDTuple<unsigned int>()
{
  MTLMDBuilder::getMetadata<unsigned int>();
  return llvm::MDTuple::getImpl();
}

BOOL MTLThreadgroupMemoryCheckPass::isMeshGridPropertiesArg(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  llvm::MDString *v3;
  _QWORD *String;
  uint64_t v5;

  v2 = *(unsigned int *)(a2 + 8);
  if (v2 < 2)
    return 0;
  v3 = *(llvm::MDString **)(a2 - 8 * v2 + 8);
  if (*(_BYTE *)v3)
    return 0;
  String = (_QWORD *)llvm::MDString::getString(v3);
  if (v5 != 24)
    return 0;
  return *String == 0x6873656D2E726961 && String[1] == 0x72705F646972675FLL && String[2] == 0x736569747265706FLL;
}

uint64_t getMangledFunction<llvm::PointerType *>(uint64_t a1, llvm::Twine *this, MTLBoundsCheck *a3, MTLBoundsCheck **a4)
{
  llvm::Type *v7;
  std::string *v8;
  __int128 v9;
  void **v10;
  std::string::size_type v11;
  llvm::Type *v12;
  MTLBoundsCheck *v13;
  std::string *v14;
  __int128 v15;
  void **v16;
  std::string::size_type v17;
  std::string::size_type size;
  std::string::size_type v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  MTLBoundsCheck **v24;
  std::string::size_type v25;
  char *v26;
  std::string::size_type v27;
  MTLBoundsCheck *v28;
  uint64_t Function;
  uint64_t v30;
  void *__p[2];
  int64_t v33;
  __int16 v34;
  std::string v35;
  std::string v36;
  std::string v37;

  llvm::Twine::str(this);
  MTLBoundsCheck::getMangledTypeStr(a3, v7, &v36);
  v8 = std::string::insert(&v36, 0, ".");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v33 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (v33 >= 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if (v33 >= 0)
    v11 = HIBYTE(v33);
  else
    v11 = (std::string::size_type)__p[1];
  std::string::append(&v37, (const std::string::value_type *)v10, v11);
  if (SHIBYTE(v33) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  memset(&v36, 0, sizeof(v36));
  v13 = *a4;
  MTLBoundsCheck::getMangledTypeStr(v13, v12, &v35);
  v14 = std::string::insert(&v35, 0, ".");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v33 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (v33 >= 0)
    v16 = __p;
  else
    v16 = (void **)__p[0];
  if (v33 >= 0)
    v17 = HIBYTE(v33);
  else
    v17 = (std::string::size_type)__p[1];
  std::string::append(&v37, (const std::string::value_type *)v16, v17);
  if (SHIBYTE(v33) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  size = v36.__r_.__value_.__l.__size_;
  if (v36.__r_.__value_.__l.__size_ >= v36.__r_.__value_.__r.__words[2])
  {
    v20 = (uint64_t)(v36.__r_.__value_.__l.__size_ - v36.__r_.__value_.__r.__words[0]) >> 3;
    if ((unint64_t)(v20 + 1) >> 61)
      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
    v21 = (uint64_t)(v36.__r_.__value_.__r.__words[2] - v36.__r_.__value_.__r.__words[0]) >> 2;
    if (v21 <= v20 + 1)
      v21 = v20 + 1;
    if (v36.__r_.__value_.__r.__words[2] - v36.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8)
      v22 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v22 = v21;
    if (v22)
      v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v36.__r_.__value_.__r.__words[2], v22);
    else
      v23 = 0;
    v24 = (MTLBoundsCheck **)&v23[8 * v20];
    v25 = (std::string::size_type)&v23[8 * v22];
    *v24 = v13;
    v19 = (std::string::size_type)(v24 + 1);
    v26 = (char *)v36.__r_.__value_.__l.__size_;
    v27 = v36.__r_.__value_.__r.__words[0];
    if (v36.__r_.__value_.__l.__size_ != v36.__r_.__value_.__r.__words[0])
    {
      do
      {
        v28 = (MTLBoundsCheck *)*((_QWORD *)v26 - 1);
        v26 -= 8;
        *--v24 = v28;
      }
      while (v26 != (char *)v27);
      v26 = (char *)v36.__r_.__value_.__r.__words[0];
    }
    v36.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
    v36.__r_.__value_.__l.__size_ = v19;
    v36.__r_.__value_.__r.__words[2] = v25;
    if (v26)
      operator delete(v26);
  }
  else
  {
    *(_QWORD *)v36.__r_.__value_.__l.__size_ = v13;
    v19 = size + 8;
  }
  v36.__r_.__value_.__l.__size_ = v19;
  Function = llvm::Module::getFunction();
  if (!Function)
  {
    v30 = llvm::FunctionType::get();
    v34 = 260;
    __p[0] = &v37;
    Function = llvm::Function::Create(v30, 0, (uint64_t)__p, a1);
  }
  if (v36.__r_.__value_.__r.__words[0])
  {
    v36.__r_.__value_.__l.__size_ = v36.__r_.__value_.__r.__words[0];
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  return Function;
}

void sub_240FE4B84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (__p)
    operator delete(__p);
  if (*(char *)(v28 - 33) < 0)
    operator delete(*(void **)(v28 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t llvm::Function::onlyWritesMemory(llvm::Function *this)
{
  if ((llvm::Function::hasFnAttribute() & 1) != 0)
    return 1;
  else
    return llvm::Function::hasFnAttribute();
}

uint64_t getMangledFunction<llvm::Type *&>(uint64_t a1, llvm::Twine *this, MTLBoundsCheck *a3, MTLBoundsCheck **a4)
{
  llvm::Type *v7;
  std::string *v8;
  __int128 v9;
  void **v10;
  std::string::size_type v11;
  llvm::Type *v12;
  MTLBoundsCheck *v13;
  std::string *v14;
  __int128 v15;
  void **v16;
  std::string::size_type v17;
  std::string::size_type size;
  std::string::size_type v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  MTLBoundsCheck **v24;
  std::string::size_type v25;
  char *v26;
  std::string::size_type v27;
  MTLBoundsCheck *v28;
  uint64_t Function;
  uint64_t v30;
  void *__p[2];
  int64_t v33;
  __int16 v34;
  std::string v35;
  std::string v36;
  std::string v37;

  llvm::Twine::str(this);
  MTLBoundsCheck::getMangledTypeStr(a3, v7, &v36);
  v8 = std::string::insert(&v36, 0, ".");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v33 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (v33 >= 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if (v33 >= 0)
    v11 = HIBYTE(v33);
  else
    v11 = (std::string::size_type)__p[1];
  std::string::append(&v37, (const std::string::value_type *)v10, v11);
  if (SHIBYTE(v33) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  memset(&v36, 0, sizeof(v36));
  v13 = *a4;
  MTLBoundsCheck::getMangledTypeStr(v13, v12, &v35);
  v14 = std::string::insert(&v35, 0, ".");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v33 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (v33 >= 0)
    v16 = __p;
  else
    v16 = (void **)__p[0];
  if (v33 >= 0)
    v17 = HIBYTE(v33);
  else
    v17 = (std::string::size_type)__p[1];
  std::string::append(&v37, (const std::string::value_type *)v16, v17);
  if (SHIBYTE(v33) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  size = v36.__r_.__value_.__l.__size_;
  if (v36.__r_.__value_.__l.__size_ >= v36.__r_.__value_.__r.__words[2])
  {
    v20 = (uint64_t)(v36.__r_.__value_.__l.__size_ - v36.__r_.__value_.__r.__words[0]) >> 3;
    if ((unint64_t)(v20 + 1) >> 61)
      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
    v21 = (uint64_t)(v36.__r_.__value_.__r.__words[2] - v36.__r_.__value_.__r.__words[0]) >> 2;
    if (v21 <= v20 + 1)
      v21 = v20 + 1;
    if (v36.__r_.__value_.__r.__words[2] - v36.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8)
      v22 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v22 = v21;
    if (v22)
      v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v36.__r_.__value_.__r.__words[2], v22);
    else
      v23 = 0;
    v24 = (MTLBoundsCheck **)&v23[8 * v20];
    v25 = (std::string::size_type)&v23[8 * v22];
    *v24 = v13;
    v19 = (std::string::size_type)(v24 + 1);
    v26 = (char *)v36.__r_.__value_.__l.__size_;
    v27 = v36.__r_.__value_.__r.__words[0];
    if (v36.__r_.__value_.__l.__size_ != v36.__r_.__value_.__r.__words[0])
    {
      do
      {
        v28 = (MTLBoundsCheck *)*((_QWORD *)v26 - 1);
        v26 -= 8;
        *--v24 = v28;
      }
      while (v26 != (char *)v27);
      v26 = (char *)v36.__r_.__value_.__r.__words[0];
    }
    v36.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
    v36.__r_.__value_.__l.__size_ = v19;
    v36.__r_.__value_.__r.__words[2] = v25;
    if (v26)
      operator delete(v26);
  }
  else
  {
    *(_QWORD *)v36.__r_.__value_.__l.__size_ = v13;
    v19 = size + 8;
  }
  v36.__r_.__value_.__l.__size_ = v19;
  Function = llvm::Module::getFunction();
  if (!Function)
  {
    v30 = llvm::FunctionType::get();
    v34 = 260;
    __p[0] = &v37;
    Function = llvm::Function::Create(v30, 0, (uint64_t)__p, a1);
  }
  if (v36.__r_.__value_.__r.__words[0])
  {
    v36.__r_.__value_.__l.__size_ = v36.__r_.__value_.__r.__words[0];
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  return Function;
}

void sub_240FE4EEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (__p)
    operator delete(__p);
  if (*(char *)(v28 - 33) < 0)
    operator delete(*(void **)(v28 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t getMangledFunction<llvm::Type *&,llvm::PointerType *>(uint64_t a1, llvm::Twine *this, MTLBoundsCheck *a3, _QWORD *a4, uint64_t *a5)
{
  llvm::Type *v9;
  std::string *v10;
  __int128 v11;
  void **v12;
  std::string::size_type v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  MTLBoundsCheck *v18;
  std::string *v19;
  __int128 v20;
  void **v21;
  std::string::size_type v22;
  std::string::size_type size;
  std::string::size_type v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  MTLBoundsCheck **v28;
  char *v29;
  std::string::size_type v30;
  MTLBoundsCheck *v31;
  uint64_t Function;
  uint64_t v33;
  void *__p[2];
  int64_t v36;
  __int16 v37;
  std::string v38;
  std::string v39;
  std::string v40;
  _QWORD v41[4];

  v41[2] = *MEMORY[0x24BDAC8D0];
  llvm::Twine::str(this);
  MTLBoundsCheck::getMangledTypeStr(a3, v9, &v39);
  v10 = std::string::insert(&v39, 0, ".");
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v36 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (v36 >= 0)
    v12 = __p;
  else
    v12 = (void **)__p[0];
  if (v36 >= 0)
    v13 = HIBYTE(v36);
  else
    v13 = (std::string::size_type)__p[1];
  std::string::append(&v40, (const std::string::value_type *)v12, v13);
  if (SHIBYTE(v36) < 0)
    operator delete(__p[0]);
  v15 = a1;
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  v16 = 0;
  memset(&v39, 0, sizeof(v39));
  v17 = *a5;
  v41[0] = *a4;
  v41[1] = v17;
  do
  {
    v18 = (MTLBoundsCheck *)v41[v16];
    MTLBoundsCheck::getMangledTypeStr(v18, (llvm::Type *)v14, &v38);
    v19 = std::string::insert(&v38, 0, ".");
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v36 = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    if (v36 >= 0)
      v21 = __p;
    else
      v21 = (void **)__p[0];
    if (v36 >= 0)
      v22 = HIBYTE(v36);
    else
      v22 = (std::string::size_type)__p[1];
    std::string::append(&v40, (const std::string::value_type *)v21, v22);
    if (SHIBYTE(v36) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    size = v39.__r_.__value_.__l.__size_;
    if (v39.__r_.__value_.__l.__size_ >= v39.__r_.__value_.__r.__words[2])
    {
      v25 = (uint64_t)(v39.__r_.__value_.__l.__size_ - v39.__r_.__value_.__r.__words[0]) >> 3;
      if ((unint64_t)(v25 + 1) >> 61)
        std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
      v26 = (uint64_t)(v39.__r_.__value_.__r.__words[2] - v39.__r_.__value_.__r.__words[0]) >> 2;
      if (v26 <= v25 + 1)
        v26 = v25 + 1;
      if (v39.__r_.__value_.__r.__words[2] - v39.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v26;
      if (v14)
        v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v39.__r_.__value_.__r.__words[2], v14);
      else
        v27 = 0;
      v28 = (MTLBoundsCheck **)&v27[8 * v25];
      *v28 = v18;
      v24 = (std::string::size_type)(v28 + 1);
      v29 = (char *)v39.__r_.__value_.__l.__size_;
      v30 = v39.__r_.__value_.__r.__words[0];
      if (v39.__r_.__value_.__l.__size_ != v39.__r_.__value_.__r.__words[0])
      {
        do
        {
          v31 = (MTLBoundsCheck *)*((_QWORD *)v29 - 1);
          v29 -= 8;
          *--v28 = v31;
        }
        while (v29 != (char *)v30);
        v29 = (char *)v39.__r_.__value_.__r.__words[0];
      }
      v39.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
      v39.__r_.__value_.__l.__size_ = v24;
      v39.__r_.__value_.__r.__words[2] = (std::string::size_type)&v27[8 * v14];
      if (v29)
        operator delete(v29);
    }
    else
    {
      *(_QWORD *)v39.__r_.__value_.__l.__size_ = v18;
      v24 = size + 8;
    }
    v39.__r_.__value_.__l.__size_ = v24;
    ++v16;
  }
  while (v16 != 2);
  Function = llvm::Module::getFunction();
  if (!Function)
  {
    v33 = llvm::FunctionType::get();
    v37 = 260;
    __p[0] = &v40;
    Function = llvm::Function::Create(v33, 0, (uint64_t)__p, v15);
  }
  if (v39.__r_.__value_.__r.__words[0])
  {
    v39.__r_.__value_.__l.__size_ = v39.__r_.__value_.__r.__words[0];
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  return Function;
}

void sub_240FE5290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (__p)
    operator delete(__p);
  if (a36 < 0)
    operator delete(a31);
  _Unwind_Resume(exception_object);
}

void MTLThreadgroupMemoryCheckPass::applyPointerTagging(MTLThreadgroupMemoryCheckPass *this, llvm::Function *a2)
{
  uint64_t EntryFunction;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  _QWORD *v23;
  char v24;
  uint64_t v25[3];
  void *v26;
  uint64_t v27;
  _BYTE v28[16];
  void *v29;
  uint64_t v30;
  _BYTE v31[128];
  uint64_t v32[3];
  uint64_t *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v26 = v28;
  v27 = 0x400000000;
  EntryFunction = MetalModulePass::getEntryFunction(this);
  v5 = EntryFunction + 72;
  v6 = *(_QWORD *)(EntryFunction + 80);
  if (v6 != EntryFunction + 72)
  {
    do
    {
      v7 = v6 - 24;
      if (!v6)
        v7 = 0;
      v8 = v7 + 40;
      for (i = *(_QWORD *)(v7 + 48); i != v8; i = *(_QWORD *)(i + 8))
      {
        if (i)
          v10 = i - 24;
        else
          v10 = 0;
        v32[0] = 0;
        if (*(_QWORD *)(v10 + 48) || (*(_BYTE *)(v10 + 23) & 0x20) != 0)
        {
          v32[0] = llvm::Instruction::getMetadataImpl();
          if (v32[0])
          {
            v25[0] = v10;
            llvm::SmallVectorImpl<std::pair<llvm::Instruction *,llvm::MDTuple *>>::emplace_back<llvm::Instruction *,llvm::MDTuple *&>((uint64_t)&v26, v25, v32);
            llvm::Instruction::setMetadata();
          }
        }
      }
      v6 = *(_QWORD *)(v6 + 8);
    }
    while (v6 != v5);
  }
  v11 = v26;
  if ((_DWORD)v27)
  {
    v12 = 16 * v27;
    while (1)
    {
      *(_OWORD *)v25 = *v11;
      v23 = 0;
      v13 = *(_QWORD *)(*(_QWORD *)(v25[1] - 8 * *(unsigned int *)(v25[1] + 8)) + 128);
      v14 = (_QWORD *)(v13 + 24);
      if (*(_DWORD *)(v13 + 32) >= 0x41u)
        v14 = (_QWORD *)*v14;
      v23 = (_QWORD *)*v14;
      v15 = v25[0];
      v16 = (uint64_t *)operator new(0x20uLL);
      *v16 = (uint64_t)&off_25111F018;
      v16[1] = (uint64_t)v25;
      v16[2] = (uint64_t)this;
      v16[3] = (uint64_t)&v23;
      v33 = v16;
      MTLRAUWUtility::replaceAllUsesWith((uint64_t)&v24, v15, (uint64_t)v32);
      v17 = v33;
      if (v33 == v32)
        break;
      if (v33)
      {
        v18 = 5;
LABEL_23:
        (*(void (**)(void))(*v17 + 8 * v18))();
      }
      ++v11;
      v12 -= 16;
      if (!v12)
      {
        v11 = v26;
        goto LABEL_26;
      }
    }
    v17 = v32;
    v18 = 4;
    goto LABEL_23;
  }
LABEL_26:
  if (v11 != (_OWORD *)v28)
    free(v11);
  if ((*(_BYTE *)(*((_QWORD *)this + 4) + 23) & 1) == 0)
  {
    v29 = v31;
    v30 = 0x1000000000;
    llvm::InstVisitor<MTLThreadgroupMemoryCheckPass::applyPointerTagging(llvm::Function &)::UntagVisitor,void>::visit((uint64_t)&v26, (uint64_t)a2);
    v19 = (uint64_t *)v29;
    if ((_DWORD)v30)
    {
      v20 = 8 * v30;
      while (1)
      {
        v25[0] = *v19;
        v32[0] = (uint64_t)&off_25111F060;
        v32[1] = (uint64_t)this;
        v32[2] = (uint64_t)v25;
        v33 = v32;
        MTLRAUWUtility::replaceAllUsesWith((uint64_t)&v23, v25[0], (uint64_t)v32);
        v21 = v33;
        if (v33 == v32)
          break;
        if (v33)
        {
          v22 = 5;
LABEL_35:
          (*(void (**)(void))(*v21 + 8 * v22))();
        }
        ++v19;
        v20 -= 8;
        if (!v20)
        {
          v19 = (uint64_t *)v29;
          goto LABEL_38;
        }
      }
      v21 = v32;
      v22 = 4;
      goto LABEL_35;
    }
LABEL_38:
    if (v19 != (uint64_t *)v31)
      free(v19);
  }
}

void sub_240FE5604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;

  if (a18 != v18)
    free(a18);
  _Unwind_Resume(exception_object);
}

uint64_t llvm::SmallVectorImpl<std::pair<llvm::Instruction *,llvm::MDTuple *>>::emplace_back<llvm::Instruction *,llvm::MDTuple *&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned int v7;

  v4 = *(unsigned int *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorTemplateBase<std::pair<unsigned int,llvm::MDNode *>,true>::push_back(a1, *a2, *a3);
    v5 = *(_QWORD *)a1;
    v7 = *(_DWORD *)(a1 + 8);
  }
  else
  {
    v5 = *(_QWORD *)a1;
    v6 = (uint64_t *)(*(_QWORD *)a1 + 16 * v4);
    *v6 = *a2;
    v6[1] = *a3;
    v7 = v4 + 1;
    *(_DWORD *)(a1 + 8) = v7;
  }
  return v5 + 16 * v7 - 16;
}

uint64_t llvm::InstVisitor<MTLThreadgroupMemoryCheckPass::applyPointerTagging(llvm::Function &)::UntagVisitor,void>::visit(uint64_t a1, uint64_t a2)
{
  llvm::Module *v4;
  uint64_t DataLayout;
  llvm::Type *v6;
  llvm::LLVMContext *v7;

  v4 = *(llvm::Module **)(a2 + 40);
  *(_QWORD *)a1 = v4;
  DataLayout = llvm::Module::getDataLayout(v4);
  v6 = **(llvm::Type ***)a1;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = DataLayout;
  *(_QWORD *)(a1 + 24) = llvm::Type::getInt32Ty(v6, v7);
  return llvm::InstVisitor<MTLThreadgroupMemoryCheckPass::applyPointerTagging(llvm::Function &)::UntagVisitor,void>::visit<llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::BasicBlock,false,false,void>,false,false>>(a1, *(_QWORD *)(a2 + 80), a2 + 72);
}

{
  return ((uint64_t (*)())((char *)nullsub_2 + 4 * byte_24105A486[*(unsigned __int8 *)(a2 + 16) - 29]))();
}

void std::__function::__func<MTLThreadgroupMemoryCheckPass::applyPointerTagging(llvm::Function &)::{lambda(MTLIRBuilder &)#1},std::allocator<MTLThreadgroupMemoryCheckPass::applyPointerTagging(llvm::Function &)::{lambda(MTLIRBuilder &)#1}>,llvm::Value * ()(MTLIRBuilder &)>::~__func()
{
  JUMPOUT(0x24268D8F0);
}

__n128 std::__function::__func<MTLThreadgroupMemoryCheckPass::applyPointerTagging(llvm::Function &)::{lambda(MTLIRBuilder &)#1},std::allocator<MTLThreadgroupMemoryCheckPass::applyPointerTagging(llvm::Function &)::{lambda(MTLIRBuilder &)#1}>,llvm::Value * ()(MTLIRBuilder &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_25111F018;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<MTLThreadgroupMemoryCheckPass::applyPointerTagging(llvm::Function &)::{lambda(MTLIRBuilder &)#1},std::allocator<MTLThreadgroupMemoryCheckPass::applyPointerTagging(llvm::Function &)::{lambda(MTLIRBuilder &)#1}>,llvm::Value * ()(MTLIRBuilder &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_25111F018;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<MTLThreadgroupMemoryCheckPass::applyPointerTagging(llvm::Function &)::{lambda(MTLIRBuilder &)#1},std::allocator<MTLThreadgroupMemoryCheckPass::applyPointerTagging(llvm::Function &)::{lambda(MTLIRBuilder &)#1}>,llvm::Value * ()(MTLIRBuilder &)>::operator()(uint64_t a1, llvm::IRBuilderBase *a2)
{
  return std::__invoke_void_return_wrapper<llvm::Value *,false>::__call[abi:ne180100]<MTLThreadgroupMemoryCheckPass::applyPointerTagging(llvm::Function &)::{lambda(MTLIRBuilder &)#1} &,MTLIRBuilder &>((uint64_t ***)(a1 + 8), a2);
}

uint64_t std::__invoke_void_return_wrapper<llvm::Value *,false>::__call[abi:ne180100]<MTLThreadgroupMemoryCheckPass::applyPointerTagging(llvm::Function &)::{lambda(MTLIRBuilder &)#1} &,MTLIRBuilder &>(uint64_t ***a1, llvm::IRBuilderBase *a2)
{
  uint64_t v4;
  uint64_t v5;
  llvm::Value *Cast;
  llvm::Value *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[32];
  __int16 v12;

  v4 = (uint64_t)**a1;
  v5 = (uint64_t)a1[1][9];
  v12 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)a2, 47, v4, v5, (uint64_t)v11);
  v12 = 257;
  v7 = (llvm::Value *)llvm::ConstantInt::get();
  v8 = llvm::IRBuilderBase::CreateOr(a2, Cast, v7, (const llvm::Twine *)v11);
  v9 = ***a1;
  v12 = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)a2, 48, v8, v9, (uint64_t)v11);
}

uint64_t llvm::IRBuilderBase::CreateOr(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4)
{
  uint64_t result;
  uint64_t v7;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 32))(*((_QWORD *)this + 9));
  if (!result)
  {
    v7 = llvm::BinaryOperator::Create();
    return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, v7, (uint64_t)a4);
  }
  return result;
}

uint64_t llvm::InstVisitor<MTLThreadgroupMemoryCheckPass::applyPointerTagging(llvm::Function &)::UntagVisitor,void>::visit<llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::BasicBlock,false,false,void>,false,false>>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a2 != a3)
  {
    v4 = result;
    do
    {
      v5 = *(_QWORD *)(a2 + 8);
      v6 = a2 - 24;
      if (!a2)
        v6 = 0;
      v7 = v6 + 40;
      v8 = *(_QWORD *)(v6 + 48);
      if (v8 != v7)
      {
        do
        {
          v9 = *(_QWORD *)(v8 + 8);
          if (v8)
            v10 = v8 - 24;
          else
            v10 = 0;
          result = llvm::InstVisitor<MTLThreadgroupMemoryCheckPass::applyPointerTagging(llvm::Function &)::UntagVisitor,void>::visit(v4, v10);
          v8 = v9;
        }
        while (v9 != v7);
      }
      a2 = v5;
    }
    while (v5 != a3);
  }
  return result;
}

uint64_t MemoryOpVisitor<MTLThreadgroupMemoryCheckPass::applyPointerTagging(llvm::Function &)::UntagVisitor>::visitLoadInst(uint64_t a1, uint64_t a2)
{
  llvm::DataLayout::getTypeSizeInBits(*(_QWORD *)(a1 + 16), **(_QWORD **)(**(_QWORD **)(a2 - 32) + 16));
  llvm::TypeSize::operator unsigned long long();
  llvm::ConstantInt::get();
  return MTLThreadgroupMemoryCheckPass::applyPointerTagging(llvm::Function &)::UntagVisitor::visitPointerOperand(a1, a2, *(_QWORD *)(a2 - 32));
}

uint64_t MTLThreadgroupMemoryCheckPass::applyPointerTagging(llvm::Function &)::UntagVisitor::visitPointerOperand(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;

  v4 = a3;
  v3 = *(_DWORD *)(*(_QWORD *)a3 + 8);
  if ((v3 & 0xFE) == 0x12)
    v3 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a3 + 16) + 8);
  if ((v3 & 0xFFFFFF00) == 0x300)
    return llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>(result + 32, &v4);
  return result;
}

uint64_t MemoryOpVisitor<MTLThreadgroupMemoryCheckPass::applyPointerTagging(llvm::Function &)::UntagVisitor>::visitStoreInst(uint64_t a1, uint64_t a2)
{
  llvm::DataLayout::getTypeSizeInBits(*(_QWORD *)(a1 + 16), **(_QWORD **)(**(_QWORD **)(a2 - 32) + 16));
  llvm::TypeSize::operator unsigned long long();
  llvm::ConstantInt::get();
  return MTLThreadgroupMemoryCheckPass::applyPointerTagging(llvm::Function &)::UntagVisitor::visitPointerOperand(a1, a2, *(_QWORD *)(a2 - 32));
}

uint64_t MemoryOpVisitor<MTLThreadgroupMemoryCheckPass::applyPointerTagging(llvm::Function &)::UntagVisitor>::visitCallInst(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  llvm::LLVMContext *v5;
  _BOOL4 v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v18;
  uint64_t PtrTypeFromIntrinsicNameSuffix;

  result = *(_QWORD *)(a2 - 32);
  if (!result || *(_BYTE *)(result + 16) || *(_QWORD *)(result + 24) != *(_QWORD *)(a2 + 72))
    return result;
  result = llvm::Value::getName((llvm::Value *)result);
  if ((unint64_t)v5 < 0xB)
  {
    if (v5 != (llvm::LLVMContext *)10)
      return result;
    if (*(_QWORD *)result != 0x6D6F74612E726961 || *(_WORD *)(result + 8) != 25449)
      return result;
    goto LABEL_45;
  }
  v8 = *(_QWORD *)result != 0x6D656D2E6D766C6CLL || *(_QWORD *)(result + 3) != 0x7970636D656D2E6DLL;
  v9 = 0x6C6C766D2E6D656DLL;
  v10 = bswap64(*(_QWORD *)result);
  if (v10 == 0x6C6C766D2E6D656DLL
    && (v9 = 0x6D2E6D656D636D70, v10 = bswap64(*(_QWORD *)(result + 3)), v10 == 0x6D2E6D656D636D70))
  {
    v11 = 0;
  }
  else if (v10 < v9)
  {
    v11 = -1;
  }
  else
  {
    v11 = 1;
  }
  if (!v8 || v11 == 0)
  {
    v13 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    v14 = v13[4];
    MTLThreadgroupMemoryCheckPass::applyPointerTagging(llvm::Function &)::UntagVisitor::visitPointerOperand(a1, a2, *v13);
    return MTLThreadgroupMemoryCheckPass::applyPointerTagging(llvm::Function &)::UntagVisitor::visitPointerOperand(a1, a2, v14);
  }
  if (*(_QWORD *)result == 0x6D656D2E6D766C6CLL && *(_QWORD *)(result + 3) == 0x7465736D656D2E6DLL)
    return MTLThreadgroupMemoryCheckPass::applyPointerTagging(llvm::Function &)::UntagVisitor::visitPointerOperand(a1, a2, *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)));
  if (*(_QWORD *)result == 0x6D6F74612E726961 && *(_WORD *)(result + 8) == 25449)
  {
LABEL_45:
    v18 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    PtrTypeFromIntrinsicNameSuffix = getPtrTypeFromIntrinsicNameSuffix(result, v5, *(llvm::Type **)(a1 + 8));
    goto LABEL_46;
  }
  if (*(_QWORD *)result == 0x662E73646E756F62 && *(_QWORD *)(result + 3) == 0x646C6F662E73646ELL)
  {
    v18 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    PtrTypeFromIntrinsicNameSuffix = **(_QWORD **)(*(_QWORD *)v18 + 16);
LABEL_46:
    llvm::DataLayout::getTypeSizeInBits(*(_QWORD *)(a1 + 16), PtrTypeFromIntrinsicNameSuffix);
    llvm::TypeSize::operator unsigned long long();
    llvm::ConstantInt::get();
    return MTLThreadgroupMemoryCheckPass::applyPointerTagging(llvm::Function &)::UntagVisitor::visitPointerOperand(a1, a2, v18);
  }
  return result;
}

void std::__function::__func<MTLThreadgroupMemoryCheckPass::applyPointerTagging(llvm::Function &)::{lambda(MTLIRBuilder &)#2},std::allocator<MTLThreadgroupMemoryCheckPass::applyPointerTagging(llvm::Function &)::{lambda(MTLIRBuilder &)#2}>,llvm::Value * ()(MTLIRBuilder &)>::~__func()
{
  JUMPOUT(0x24268D8F0);
}

__n128 std::__function::__func<MTLThreadgroupMemoryCheckPass::applyPointerTagging(llvm::Function &)::{lambda(MTLIRBuilder &)#2},std::allocator<MTLThreadgroupMemoryCheckPass::applyPointerTagging(llvm::Function &)::{lambda(MTLIRBuilder &)#2}>,llvm::Value * ()(MTLIRBuilder &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_25111F060;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<MTLThreadgroupMemoryCheckPass::applyPointerTagging(llvm::Function &)::{lambda(MTLIRBuilder &)#2},std::allocator<MTLThreadgroupMemoryCheckPass::applyPointerTagging(llvm::Function &)::{lambda(MTLIRBuilder &)#2}>,llvm::Value * ()(MTLIRBuilder &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_25111F060;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<MTLThreadgroupMemoryCheckPass::applyPointerTagging(llvm::Function &)::{lambda(MTLIRBuilder &)#2},std::allocator<MTLThreadgroupMemoryCheckPass::applyPointerTagging(llvm::Function &)::{lambda(MTLIRBuilder &)#2}>,llvm::Value * ()(MTLIRBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  return std::__invoke_void_return_wrapper<llvm::Value *,false>::__call[abi:ne180100]<MTLThreadgroupMemoryCheckPass::applyPointerTagging(llvm::Function &)::{lambda(MTLIRBuilder &)#2} &,MTLIRBuilder &>((_QWORD **)(a1 + 8), a2);
}

uint64_t std::__invoke_void_return_wrapper<llvm::Value *,false>::__call[abi:ne180100]<MTLThreadgroupMemoryCheckPass::applyPointerTagging(llvm::Function &)::{lambda(MTLIRBuilder &)#2} &,MTLIRBuilder &>(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _WORD v11[20];
  _BYTE v12[32];
  __int16 v13;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x24BDAC8D0];
  v4 = (*a1)[24];
  if (v4)
    v5 = *(_QWORD *)(v4 + 24);
  else
    v5 = 0;
  v6 = *a1[1];
  v7 = llvm::PointerType::get();
  v13 = 257;
  v14[0] = llvm::IRBuilderBase::CreateCast(a2, 49, v6, v7, (uint64_t)v12);
  v11[16] = 257;
  v8 = llvm::IRBuilderBase::CreateCall(a2, v5, v4, (uint64_t)v14, 1, (uint64_t)v11, 0);
  v9 = *(_QWORD *)*a1[1];
  v13 = 257;
  return llvm::IRBuilderBase::CreateCast(a2, 49, v8, v9, (uint64_t)v12);
}

void MTLThreadgroupMemoryCheckPass::applyThreadgroupChecks(MTLBoundsCheck::SharedPassData **this, llvm::Function *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  llvm::Instruction **v10;
  llvm::Instruction **v11;
  llvm::Instruction *v12;
  int v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  llvm::Instruction *v18;
  llvm::Instruction *v19;
  char *v20;
  uint64_t v21[4];
  __int16 v22;
  void *CheckedInstruction;
  unsigned int v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  _QWORD v28[18];

  v28[16] = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)a2 + 10);
  v20 = (char *)a2 + 72;
  if ((llvm::Function *)v2 != (llvm::Function *)((char *)a2 + 72))
  {
    do
    {
      v4 = v2 - 24;
      if (!v2)
        v4 = 0;
      v26 = v28;
      v27 = 0x800000000;
      v5 = v4 + 40;
      v6 = *(_QWORD *)(v4 + 48);
      if (v6 != v4 + 40)
      {
        do
        {
          if (v6)
            v7 = v6 - 24;
          else
            v7 = 0;
          v8 = *(unsigned __int8 *)(v7 + 16);
          if ((v8 - 60) >= 2)
          {
            if (v8 == 84)
            {
              v9 = *(_QWORD *)(v7 - 32);
              if (v9)
              {
                if (!*(_BYTE *)(v9 + 16) && *(_QWORD *)(v9 + 24) == *(_QWORD *)(v7 + 72))
                  llvm::Value::getName((llvm::Value *)v9);
              }
            }
          }
          else
          {
            CheckedInstruction = 0;
            CheckedInstruction = (void *)MTLThreadgroupMemoryCheckPass::createCheckedInstruction((MTLThreadgroupMemoryCheckPass *)this, (llvm::Instruction *)v7);
            if (CheckedInstruction)
            {
              v21[0] = v7;
              llvm::SmallVectorImpl<std::pair<llvm::Instruction *,llvm::MDTuple *>>::emplace_back<llvm::Instruction *,llvm::MDTuple *&>((uint64_t)&v26, v21, (uint64_t *)&CheckedInstruction);
            }
          }
          v6 = *(_QWORD *)(v6 + 8);
        }
        while (v6 != v5);
        v10 = (llvm::Instruction **)v26;
        v11 = (llvm::Instruction **)((char *)v26 + 16 * v27);
        if ((_DWORD)v27)
        {
          do
          {
            v12 = *v10;
            v13 = *((_DWORD *)*v10 + 5);
            if ((v13 & 0x40000000) != 0)
            {
              v15 = (char *)*((_QWORD *)v12 - 1);
              v14 = v13 & 0x7FFFFFF;
            }
            else
            {
              v14 = v13 & 0x7FFFFFF;
              v15 = (char *)v12 - 32 * v14;
            }
            v16 = (uint64_t)v10[1];
            llvm::SmallVector<llvm::Value *,4u>::SmallVector<llvm::Use *,void>(&CheckedInstruction, v15, &v15[32 * v14]);
            MTLBoundsCheck::SharedPassData::indexForInstruction(this[8], v12);
            v21[0] = llvm::ConstantInt::get();
            llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)&CheckedInstruction, v21);
            if (v16)
              v17 = *(_QWORD *)(v16 + 24);
            else
              v17 = 0;
            v22 = 257;
            v18 = (llvm::Instruction *)llvm::CallInst::Create(v17, v16, (uint64_t)CheckedInstruction, v24, 0, 0);
            llvm::ReplaceInstWithInst(v12, v18, v19);
            if (CheckedInstruction != &v25)
              free(CheckedInstruction);
            v10 += 2;
          }
          while (v10 != v11);
          v10 = (llvm::Instruction **)v26;
        }
        if (v10 != v28)
          free(v10);
      }
      v2 = *(_QWORD *)(v2 + 8);
    }
    while ((char *)v2 != v20);
  }
}

void sub_240FE61A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  void *v21;

  if (a21 != v21)
    free(a21);
  _Unwind_Resume(exception_object);
}

uint64_t MTLThreadgroupMemoryCheckPass::createCheckedInstruction(MTLThreadgroupMemoryCheckPass *this, llvm::Instruction *a2)
{
  int v2;

  v2 = *((unsigned __int8 *)a2 + 16);
  if (v2 == 60)
    return MTLThreadgroupMemoryCheckPass::getCheckedLoadFunction((uint64_t)this, (uint64_t)a2);
  if (v2 == 61)
    return MTLThreadgroupMemoryCheckPass::getCheckedStoreFunction((uint64_t)this, (uint64_t)a2);
  return 0;
}

uint64_t MTLThreadgroupMemoryCheckPass::getCheckedStoreFunction(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void **v5;
  int v6;
  uint64_t v7;
  MTLBoundsCheck *VoidTy;
  uint64_t v9;
  llvm::BasicBlock *v10;
  llvm::Type **v11;
  llvm::Type **v12;
  llvm::Type **v13;
  llvm::BasicBlock *v14;
  llvm::BasicBlock *v15;
  llvm::BasicBlock *v16;
  llvm::BranchInst *v17;
  llvm::BasicBlock *v18;
  llvm::BasicBlock *v19;
  llvm::BasicBlock *v20;
  llvm::BasicBlock *v21;
  llvm::BasicBlock *v22;
  uint64_t v23;
  uint64_t Cast;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  llvm::Type **v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  llvm::Value *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  llvm::Value *v42;
  llvm::CmpInst **Add;
  llvm::BasicBlock *ICmp;
  unint64_t v45;
  uint64_t v46;
  llvm::Instruction *v47;
  uint64_t v48;
  llvm::Instruction *v49;
  uint64_t inserted;
  uint64_t v51;
  uint64_t v52;
  llvm::ConstantPointerNull *Int8PtrTy;
  llvm::PointerType *v54;
  uint64_t AlignedLoad;
  uint64_t v56;
  llvm::Type *v57;
  llvm::Value *v58;
  llvm::Type *v59;
  llvm::Value *v60;
  llvm::Type *v61;
  llvm::Value *v62;
  const llvm::Twine *ImageIDFunction;
  uint64_t v64;
  llvm::Value *v65;
  uint64_t v66;
  llvm::Value *v67;
  llvm::Value *v68;
  llvm::Value *v69;
  uint64_t v70;
  llvm::Instruction *v71;
  uint64_t v72;
  llvm::Type **v74;
  llvm::BranchInst *v75;
  char v76[32];
  __int16 v77;
  char v78[32];
  __int16 v79;
  llvm::BasicBlock *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE v84[32];
  __int16 v85;
  unint64_t v86;
  _BOOL8 v87;
  __int16 v88;
  void *v89[2];
  uint64_t *v90;
  __int16 v91;
  llvm::BranchInst *v92;
  char *v93;
  llvm::ReturnInst *v94;
  uint64_t v95;
  _QWORD v96[9];

  v96[7] = *MEMORY[0x24BDAC8D0];
  v4 = **(_QWORD **)(a2 - 32);
  v83 = v4;
  if (!a2 || (v5 = (void **)a2, *(_BYTE *)(a2 + 16) != 60))
    v5 = *(void ***)(a2 - 64);
  v82 = 0;
  v82 = (uint64_t)*v5;
  v6 = *(_DWORD *)(v4 + 8);
  if ((v6 & 0xFE) == 0x12)
    v6 = *(_DWORD *)(**(_QWORD **)(v4 + 16) + 8);
  if ((v6 & 0xFFFFFF00) != 0x300)
    return 0;
  v81 = 1 << ((unint64_t)*(unsigned __int16 *)(a2 + 18) >> 1);
  v89[0] = "mtl.threadgroup.checked_store.";
  v90 = &v81;
  v91 = 3075;
  v7 = *(_QWORD *)(a1 + 48);
  VoidTy = (MTLBoundsCheck *)llvm::Type::getVoidTy(*(llvm::Type **)(a1 + 40), (llvm::LLVMContext *)a2);
  v9 = getMangledFunction<llvm::Type *&,llvm::Type *&,llvm::Type *&>(v7, (llvm::Twine *)v89, VoidTy, (void **)&v82, (void **)&v83, (int64_t *)(a1 + 80));
  if (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v9))
  {
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    *(_DWORD *)(v9 + 32) = *(_DWORD *)(v9 + 32) & 0xFFFFBFC0 | 0x4007;
    if ((*(_WORD *)(v9 + 18) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments((llvm::Function *)v9);
      v12 = *(llvm::Type ***)(v9 + 88);
      if ((*(_WORD *)(v9 + 18) & 1) == 0)
      {
        v11 = *(llvm::Type ***)(v9 + 88);
        v13 = v11;
        goto LABEL_16;
      }
      llvm::Function::BuildLazyArguments((llvm::Function *)v9);
      v11 = *(llvm::Type ***)(v9 + 88);
      if ((*(_WORD *)(v9 + 18) & 1) != 0)
      {
        llvm::Function::BuildLazyArguments((llvm::Function *)v9);
        v13 = *(llvm::Type ***)(v9 + 88);
        goto LABEL_16;
      }
    }
    else
    {
      v11 = *(llvm::Type ***)(v9 + 88);
      v12 = v11;
    }
    v13 = v11;
LABEL_16:
    v14 = *(llvm::BasicBlock **)(a1 + 40);
    v89[0] = "entry";
    v91 = 259;
    v80 = (llvm::BasicBlock *)llvm::BasicBlock::Create(v14, (llvm::LLVMContext *)v89, (const llvm::Twine *)v9, 0, v10);
    v15 = *(llvm::BasicBlock **)(a1 + 40);
    v89[0] = "pass";
    v91 = 259;
    v17 = (llvm::BranchInst *)llvm::BasicBlock::Create(v15, (llvm::LLVMContext *)v89, (const llvm::Twine *)v9, 0, v16);
    v18 = *(llvm::BasicBlock **)(a1 + 40);
    v89[0] = "fail";
    v91 = 259;
    v20 = (llvm::BasicBlock *)llvm::BasicBlock::Create(v18, (llvm::LLVMContext *)v89, (const llvm::Twine *)v9, 0, v19);
    v21 = *(llvm::BasicBlock **)(a1 + 40);
    v89[0] = "ret";
    v91 = 259;
    v75 = (llvm::BranchInst *)llvm::BasicBlock::Create(v21, (llvm::LLVMContext *)v89, (const llvm::Twine *)v9, 0, v22);
    MTLIRBuilder::MTLIRBuilder<llvm::BasicBlock *&>((uint64_t)v89, &v80);
    v23 = llvm::PointerType::get();
    v85 = 257;
    Cast = llvm::IRBuilderBase::CreateCast((uint64_t)v89, 49, (uint64_t)(v11 + 5), v23, (uint64_t)v84);
    v25 = Cast;
    v26 = *(_QWORD *)(a1 + 192);
    v74 = v13;
    if (v26)
      v27 = *(_QWORD *)(v26 + 24);
    else
      v27 = 0;
    v86 = Cast;
    v85 = 257;
    v28 = llvm::IRBuilderBase::CreateCall((uint64_t)v89, v27, v26, (uint64_t)&v86, 1, (uint64_t)v84, 0);
    v29 = *(_QWORD *)(a1 + 200);
    v30 = v12;
    if (v29)
      v31 = *(_QWORD *)(v29 + 24);
    else
      v31 = 0;
    v86 = v25;
    v85 = 257;
    v32 = llvm::IRBuilderBase::CreateCall((uint64_t)v89, v31, v29, (uint64_t)&v86, 1, (uint64_t)v84, 0);
    v33 = v32;
    v34 = *(_QWORD *)(a1 + 216);
    if (v34)
      v35 = *(_QWORD *)(v34 + 24);
    else
      v35 = 0;
    v86 = v32;
    v87 = v28;
    v85 = 257;
    v36 = (llvm::Value *)llvm::IRBuilderBase::CreateCall((uint64_t)v89, v35, v34, (uint64_t)&v86, 2, (uint64_t)v84, 0);
    v37 = *(_QWORD *)(a1 + 208);
    if (v37)
      v38 = *(_QWORD *)(v37 + 24);
    else
      v38 = 0;
    v86 = v33;
    v85 = 257;
    v39 = llvm::IRBuilderBase::CreateCall((uint64_t)v89, v38, v37, (uint64_t)&v86, 1, (uint64_t)v84, 0);
    llvm::DataLayout::getTypeSizeInBits(*(_QWORD *)(a1 + 56), v82);
    v86 = (unint64_t)(v40 + 7) >> 3;
    v87 = v41 == 1;
    llvm::TypeSize::operator unsigned long long();
    v42 = (llvm::Value *)llvm::ConstantInt::get();
    v85 = 257;
    Add = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)v89, v36, v42, (const llvm::Twine *)v84, 0, 0);
    v85 = 257;
    ICmp = (llvm::BasicBlock *)llvm::IRBuilderBase::CreateICmp((uint64_t)v89, 37, Add, v39, (uint64_t)v84);
    llvm::IRBuilderBase::CreateCondBr((uint64_t *)v89, ICmp, v17, v20, 0, 0);
    v92 = v17;
    v93 = (char *)v17 + 40;
    v45 = *(unsigned __int16 *)(a2 + 18);
    v85 = 257;
    v46 = llvm::IRBuilderBase::CreateCast((uint64_t)v89, 49, v28, v83, (uint64_t)v84);
    llvm::IRBuilderBase::CreateAlignedStore((uint64_t)v89, v30, v46, (v45 >> 1) & 0x3F | 0x100);
    v48 = llvm::BranchInst::Create(v75, 0, v47);
    v85 = 257;
    llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)v89, v48, (uint64_t)v84);
    v92 = v20;
    v93 = (char *)v20 + 40;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 32) + 20) & 2) != 0)
    {
      inserted = MTLBoundsCheck::SharedPassData::getOrInsertReportBufferGV(*(llvm::Type ****)(a1 + 64));
      v51 = MTLBoundsCheck::SharedPassData::getOrInsertDrawIDBufferGV(*(MTLBoundsCheck::SharedPassData **)(a1 + 64));
      v52 = *(_QWORD *)(a1 + 64);
      if ((*(_BYTE *)(*(_QWORD *)(v52 + 72) + 21) & 2) != 0)
      {
        v56 = MTLBoundsCheck::SharedPassData::getOrInsertStackTraceGV((llvm::Type ***)v52);
        v57 = *(llvm::Type **)(v56 + 24);
        v85 = 257;
        AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v89, v57, v56, 0, 0, (uint64_t)v84);
      }
      else
      {
        Int8PtrTy = (llvm::ConstantPointerNull *)llvm::Type::getInt8PtrTy(*(llvm::Type **)(a1 + 40), 0);
        AlignedLoad = llvm::ConstantPointerNull::get(Int8PtrTy, v54);
      }
      v58 = (llvm::Value *)AlignedLoad;
      v59 = *(llvm::Type **)(inserted + 24);
      v85 = 257;
      v60 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v89, v59, inserted, 0, 0, (uint64_t)v84);
      v61 = *(llvm::Type **)(v51 + 24);
      v88 = 257;
      v62 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v89, v61, v51, 0, 0, (uint64_t)&v86);
      ImageIDFunction = MTLBoundsCheck::SharedPassData::getOrInsertGetImageIDFunction(*(MTLBoundsCheck::SharedPassData **)(a1 + 64));
      if (ImageIDFunction)
        v64 = *((_QWORD *)ImageIDFunction + 3);
      else
        v64 = 0;
      v79 = 257;
      v65 = (llvm::Value *)llvm::IRBuilderBase::CreateCall((uint64_t)v89, v64, (uint64_t)ImageIDFunction, 0, 0, (uint64_t)v78, 0);
      v66 = *(_QWORD *)(a1 + 72);
      v77 = 257;
      v67 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v89, 39, (uint64_t)Add, v66, (uint64_t)v76);
      v68 = (llvm::Value *)llvm::ConstantInt::get();
      v69 = (llvm::Value *)llvm::ConstantInt::get();
      MTLIRBuilder::CreateBadAccessCall((llvm::Constant **)v89, v60, v62, v58, v65, v67, v68, v69, (llvm::Value *)(v74 + 10), 0);
    }
    v70 = llvm::BranchInst::Create(v75, 0, v49);
    v85 = 257;
    llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)v89, v70, (uint64_t)v84);
    v92 = v75;
    v93 = (char *)v75 + 40;
    v72 = llvm::ReturnInst::Create(v94, 0, 0, v71);
    v85 = 257;
    llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)v89, v72, (uint64_t)v84);
    llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v96);
    llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v95);
    if (v89[0] != &v90)
      free(v89[0]);
  }
  return v9;
}

void sub_240FE68B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38)
{
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder(&a38);
  _Unwind_Resume(a1);
}

uint64_t MTLThreadgroupMemoryCheckPass::getCheckedLoadFunction(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  MTLBoundsCheck **v5;
  int v6;
  MTLBoundsCheck *v7;
  uint64_t v8;
  uint64_t v9;
  llvm::BasicBlock *v10;
  uint64_t v11;
  uint64_t v12;
  llvm::BasicBlock *v13;
  llvm::BasicBlock *v14;
  llvm::BasicBlock *v15;
  llvm::BasicBlock *v16;
  llvm::BasicBlock *v17;
  llvm::BasicBlock *v18;
  llvm::BasicBlock *v19;
  uint64_t v20;
  uint64_t Cast;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  llvm::Value *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  llvm::Value *v38;
  llvm::CmpInst **Add;
  llvm::BasicBlock *ICmp;
  uint64_t v41;
  unint64_t v42;
  llvm::Value *AlignedLoad;
  llvm::Instruction *v44;
  uint64_t v45;
  llvm::Instruction *v46;
  uint64_t inserted;
  uint64_t v48;
  uint64_t v49;
  llvm::ConstantPointerNull *Int8PtrTy;
  llvm::PointerType *v51;
  uint64_t v52;
  uint64_t v53;
  llvm::Type *v54;
  llvm::Value *v55;
  llvm::Type *v56;
  llvm::Value *v57;
  llvm::Type *v58;
  llvm::Value *v59;
  const llvm::Twine *ImageIDFunction;
  uint64_t v61;
  llvm::Value *v62;
  uint64_t v63;
  llvm::Value *v64;
  llvm::Value *v65;
  llvm::Value *v66;
  uint64_t v67;
  llvm::Instruction *v68;
  llvm::PHINode *PHI;
  llvm::Type *v70;
  llvm::Value *NullValue;
  llvm::Instruction *v72;
  uint64_t v73;
  uint64_t v75;
  llvm::BasicBlock *v76;
  llvm::BranchInst *v77;
  llvm::BasicBlock *v78;
  char v79[32];
  __int16 v80;
  char v81[32];
  __int16 v82;
  llvm::BasicBlock *v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE v86[32];
  __int16 v87;
  unint64_t v88;
  _BOOL8 v89;
  __int16 v90;
  void *v91[2];
  uint64_t *v92;
  __int16 v93;
  llvm::BasicBlock *v94;
  char *v95;
  llvm::ReturnInst *v96;
  uint64_t v97;
  _QWORD v98[9];

  v98[7] = *MEMORY[0x24BDAC8D0];
  v4 = **(_QWORD **)(a2 - 32);
  v85 = v4;
  if (!a2 || (v5 = (MTLBoundsCheck **)a2, *(_BYTE *)(a2 + 16) != 60))
    v5 = *(MTLBoundsCheck ***)(a2 - 64);
  v6 = *(_DWORD *)(v4 + 8);
  if ((v6 & 0xFE) == 0x12)
    v6 = *(_DWORD *)(**(_QWORD **)(v4 + 16) + 8);
  if ((v6 & 0xFFFFFF00) != 0x300)
    return 0;
  v7 = *v5;
  v84 = 1 << ((unint64_t)*(unsigned __int16 *)(a2 + 18) >> 1);
  v8 = *(_QWORD *)(a1 + 48);
  v91[0] = "mtl.threadgroup.checked_load.";
  v92 = &v84;
  v93 = 3075;
  v9 = getMangledFunction<llvm::Type *&,llvm::Type *&>(v8, (llvm::Twine *)v91, v7, &v85, (uint64_t *)(a1 + 80));
  if (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v9))
  {
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    *(_DWORD *)(v9 + 32) = *(_DWORD *)(v9 + 32) & 0xFFFFBFC0 | 0x4007;
    if ((*(_WORD *)(v9 + 18) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments((llvm::Function *)v9);
      v11 = *(_QWORD *)(v9 + 88);
      if ((*(_WORD *)(v9 + 18) & 1) != 0)
      {
        llvm::Function::BuildLazyArguments((llvm::Function *)v9);
        v12 = *(_QWORD *)(v9 + 88);
        goto LABEL_14;
      }
    }
    else
    {
      v11 = *(_QWORD *)(v9 + 88);
    }
    v12 = v11;
LABEL_14:
    v13 = *(llvm::BasicBlock **)(a1 + 40);
    v91[0] = "entry";
    v93 = 259;
    v83 = (llvm::BasicBlock *)llvm::BasicBlock::Create(v13, (llvm::LLVMContext *)v91, (const llvm::Twine *)v9, 0, v10);
    v14 = *(llvm::BasicBlock **)(a1 + 40);
    v91[0] = "pass";
    v93 = 259;
    v76 = (llvm::BasicBlock *)llvm::BasicBlock::Create(v14, (llvm::LLVMContext *)v91, (const llvm::Twine *)v9, 0, v15);
    v16 = *(llvm::BasicBlock **)(a1 + 40);
    v91[0] = "fail";
    v93 = 259;
    v78 = (llvm::BasicBlock *)llvm::BasicBlock::Create(v16, (llvm::LLVMContext *)v91, (const llvm::Twine *)v9, 0, v17);
    v18 = *(llvm::BasicBlock **)(a1 + 40);
    v91[0] = "ret";
    v93 = 259;
    v77 = (llvm::BranchInst *)llvm::BasicBlock::Create(v18, (llvm::LLVMContext *)v91, (const llvm::Twine *)v9, 0, v19);
    MTLIRBuilder::MTLIRBuilder<llvm::BasicBlock *&>((uint64_t)v91, &v83);
    v20 = llvm::PointerType::get();
    v87 = 257;
    Cast = llvm::IRBuilderBase::CreateCast((uint64_t)v91, 49, v11, v20, (uint64_t)v86);
    v22 = Cast;
    v23 = *(_QWORD *)(a1 + 192);
    if (v23)
      v24 = *(_QWORD *)(v23 + 24);
    else
      v24 = 0;
    v88 = Cast;
    v87 = 257;
    v25 = llvm::IRBuilderBase::CreateCall((uint64_t)v91, v24, v23, (uint64_t)&v88, 1, (uint64_t)v86, 0);
    v26 = *(_QWORD *)(a1 + 200);
    v75 = v12;
    if (v26)
      v27 = *(_QWORD *)(v26 + 24);
    else
      v27 = 0;
    v88 = v22;
    v87 = 257;
    v28 = llvm::IRBuilderBase::CreateCall((uint64_t)v91, v27, v26, (uint64_t)&v88, 1, (uint64_t)v86, 0);
    v29 = v28;
    v30 = *(_QWORD *)(a1 + 216);
    if (v30)
      v31 = *(_QWORD *)(v30 + 24);
    else
      v31 = 0;
    v88 = v28;
    v89 = v25;
    v87 = 257;
    v32 = (llvm::Value *)llvm::IRBuilderBase::CreateCall((uint64_t)v91, v31, v30, (uint64_t)&v88, 2, (uint64_t)v86, 0);
    v33 = *(_QWORD *)(a1 + 208);
    if (v33)
      v34 = *(_QWORD *)(v33 + 24);
    else
      v34 = 0;
    v88 = v29;
    v87 = 257;
    v35 = llvm::IRBuilderBase::CreateCall((uint64_t)v91, v34, v33, (uint64_t)&v88, 1, (uint64_t)v86, 0);
    llvm::DataLayout::getTypeSizeInBits(*(_QWORD *)(a1 + 56), (uint64_t)v7);
    v88 = (unint64_t)(v36 + 7) >> 3;
    v89 = v37 == 1;
    llvm::TypeSize::operator unsigned long long();
    v38 = (llvm::Value *)llvm::ConstantInt::get();
    v87 = 257;
    Add = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)v91, v32, v38, (const llvm::Twine *)v86, 0, 0);
    v87 = 257;
    ICmp = (llvm::BasicBlock *)llvm::IRBuilderBase::CreateICmp((uint64_t)v91, 37, Add, v35, (uint64_t)v86);
    llvm::IRBuilderBase::CreateCondBr((uint64_t *)v91, ICmp, v76, v78, 0, 0);
    v94 = v76;
    v95 = (char *)v76 + 40;
    v87 = 257;
    v41 = llvm::IRBuilderBase::CreateCast((uint64_t)v91, 49, v25, v85, (uint64_t)v86);
    v42 = ((unint64_t)*(unsigned __int16 *)(a2 + 18) >> 1) & 0x3F | 0x100;
    v87 = 257;
    AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v91, v7, v41, v42, 0, (uint64_t)v86);
    v45 = llvm::BranchInst::Create(v77, 0, v44);
    v87 = 257;
    llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)v91, v45, (uint64_t)v86);
    v94 = v78;
    v95 = (char *)v78 + 40;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 32) + 20) & 2) != 0)
    {
      inserted = MTLBoundsCheck::SharedPassData::getOrInsertReportBufferGV(*(llvm::Type ****)(a1 + 64));
      v48 = MTLBoundsCheck::SharedPassData::getOrInsertDrawIDBufferGV(*(MTLBoundsCheck::SharedPassData **)(a1 + 64));
      v49 = *(_QWORD *)(a1 + 64);
      if ((*(_BYTE *)(*(_QWORD *)(v49 + 72) + 21) & 2) != 0)
      {
        v53 = MTLBoundsCheck::SharedPassData::getOrInsertStackTraceGV((llvm::Type ***)v49);
        v54 = *(llvm::Type **)(v53 + 24);
        v87 = 257;
        v52 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v91, v54, v53, 0, 0, (uint64_t)v86);
      }
      else
      {
        Int8PtrTy = (llvm::ConstantPointerNull *)llvm::Type::getInt8PtrTy(*(llvm::Type **)(a1 + 40), 0);
        v52 = llvm::ConstantPointerNull::get(Int8PtrTy, v51);
      }
      v55 = (llvm::Value *)v52;
      v56 = *(llvm::Type **)(inserted + 24);
      v87 = 257;
      v57 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v91, v56, inserted, 0, 0, (uint64_t)v86);
      v58 = *(llvm::Type **)(v48 + 24);
      v90 = 257;
      v59 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v91, v58, v48, 0, 0, (uint64_t)&v88);
      ImageIDFunction = MTLBoundsCheck::SharedPassData::getOrInsertGetImageIDFunction(*(MTLBoundsCheck::SharedPassData **)(a1 + 64));
      if (ImageIDFunction)
        v61 = *((_QWORD *)ImageIDFunction + 3);
      else
        v61 = 0;
      v82 = 257;
      v62 = (llvm::Value *)llvm::IRBuilderBase::CreateCall((uint64_t)v91, v61, (uint64_t)ImageIDFunction, 0, 0, (uint64_t)v81, 0);
      v63 = *(_QWORD *)(a1 + 72);
      v80 = 257;
      v64 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v91, 39, (uint64_t)Add, v63, (uint64_t)v79);
      v65 = (llvm::Value *)llvm::ConstantInt::get();
      v66 = (llvm::Value *)llvm::ConstantInt::get();
      MTLIRBuilder::CreateBadAccessCall((llvm::Constant **)v91, v57, v59, v55, v62, v64, v65, v66, (llvm::Value *)(v75 + 40), 0);
    }
    v67 = llvm::BranchInst::Create(v77, 0, v46);
    v87 = 257;
    llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)v91, v67, (uint64_t)v86);
    v94 = v77;
    v95 = (char *)v77 + 40;
    v87 = 257;
    PHI = (llvm::PHINode *)llvm::IRBuilderBase::CreatePHI((llvm::IRBuilderBase *)v91, v7, 0, (const llvm::Twine *)v86, v68);
    llvm::PHINode::addIncoming(PHI, AlignedLoad, v76);
    NullValue = (llvm::Value *)llvm::Constant::getNullValue(v7, v70);
    llvm::PHINode::addIncoming(PHI, NullValue, v78);
    v73 = llvm::ReturnInst::Create(v96, PHI, 0, v72);
    v87 = 257;
    llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)v91, v73, (uint64_t)v86);
    llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v98);
    llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v97);
    if (v91[0] != &v92)
      free(v91[0]);
  }
  return v9;
}

void sub_240FE6FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40)
{
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder(&a40);
  _Unwind_Resume(a1);
}

uint64_t getMangledFunction<llvm::Type *&,llvm::Type *&,llvm::Type *&>(uint64_t a1, llvm::Twine *this, MTLBoundsCheck *a3, void **a4, void **a5, int64_t *a6)
{
  llvm::Type *v11;
  std::string *v12;
  __int128 v13;
  void **v14;
  std::string::size_type v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  MTLBoundsCheck *v20;
  std::string *v21;
  __int128 v22;
  void **v23;
  std::string::size_type v24;
  std::string::size_type size;
  std::string::size_type v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  MTLBoundsCheck **v30;
  char *v31;
  std::string::size_type v32;
  MTLBoundsCheck *v33;
  uint64_t Function;
  uint64_t v35;
  std::string v37;
  void *v38[2];
  int64_t v39;
  std::string v40;
  std::string v41;
  void *__p[2];
  int64_t v43;
  __int16 v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  llvm::Twine::str(this);
  MTLBoundsCheck::getMangledTypeStr(a3, v11, &v40);
  v12 = std::string::insert(&v40, 0, ".");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v43 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (v43 >= 0)
    v14 = __p;
  else
    v14 = (void **)__p[0];
  if (v43 >= 0)
    v15 = HIBYTE(v43);
  else
    v15 = (std::string::size_type)__p[1];
  std::string::append(&v41, (const std::string::value_type *)v14, v15);
  if (SHIBYTE(v43) < 0)
    operator delete(__p[0]);
  v17 = a1;
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  v18 = 0;
  memset(&v40, 0, sizeof(v40));
  v19 = *a5;
  __p[0] = *a4;
  __p[1] = v19;
  v43 = *a6;
  do
  {
    v20 = (MTLBoundsCheck *)__p[v18];
    MTLBoundsCheck::getMangledTypeStr(v20, (llvm::Type *)v16, &v37);
    v21 = std::string::insert(&v37, 0, ".");
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v39 = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)v38 = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if (v39 >= 0)
      v23 = v38;
    else
      v23 = (void **)v38[0];
    if (v39 >= 0)
      v24 = HIBYTE(v39);
    else
      v24 = (std::string::size_type)v38[1];
    std::string::append(&v41, (const std::string::value_type *)v23, v24);
    if (SHIBYTE(v39) < 0)
      operator delete(v38[0]);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    size = v40.__r_.__value_.__l.__size_;
    if (v40.__r_.__value_.__l.__size_ >= v40.__r_.__value_.__r.__words[2])
    {
      v27 = (uint64_t)(v40.__r_.__value_.__l.__size_ - v40.__r_.__value_.__r.__words[0]) >> 3;
      if ((unint64_t)(v27 + 1) >> 61)
        std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
      v28 = (uint64_t)(v40.__r_.__value_.__r.__words[2] - v40.__r_.__value_.__r.__words[0]) >> 2;
      if (v28 <= v27 + 1)
        v28 = v27 + 1;
      if (v40.__r_.__value_.__r.__words[2] - v40.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v28;
      if (v16)
        v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v40.__r_.__value_.__r.__words[2], v16);
      else
        v29 = 0;
      v30 = (MTLBoundsCheck **)&v29[8 * v27];
      *v30 = v20;
      v26 = (std::string::size_type)(v30 + 1);
      v31 = (char *)v40.__r_.__value_.__l.__size_;
      v32 = v40.__r_.__value_.__r.__words[0];
      if (v40.__r_.__value_.__l.__size_ != v40.__r_.__value_.__r.__words[0])
      {
        do
        {
          v33 = (MTLBoundsCheck *)*((_QWORD *)v31 - 1);
          v31 -= 8;
          *--v30 = v33;
        }
        while (v31 != (char *)v32);
        v31 = (char *)v40.__r_.__value_.__r.__words[0];
      }
      v40.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
      v40.__r_.__value_.__l.__size_ = v26;
      v40.__r_.__value_.__r.__words[2] = (std::string::size_type)&v29[8 * v16];
      if (v31)
        operator delete(v31);
    }
    else
    {
      *(_QWORD *)v40.__r_.__value_.__l.__size_ = v20;
      v26 = size + 8;
    }
    v40.__r_.__value_.__l.__size_ = v26;
    ++v18;
  }
  while (v18 != 3);
  Function = llvm::Module::getFunction();
  if (!Function)
  {
    v35 = llvm::FunctionType::get();
    v44 = 260;
    __p[0] = &v41;
    Function = llvm::Function::Create(v35, 0, (uint64_t)__p, v17);
  }
  if (v40.__r_.__value_.__r.__words[0])
  {
    v40.__r_.__value_.__l.__size_ = v40.__r_.__value_.__r.__words[0];
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  return Function;
}

void sub_240FE736C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (__p)
    operator delete(__p);
  if (a34 < 0)
    operator delete(a29);
  _Unwind_Resume(exception_object);
}

uint64_t getMangledFunction<llvm::Type *&,llvm::Type *&>(uint64_t a1, llvm::Twine *this, MTLBoundsCheck *a3, _QWORD *a4, uint64_t *a5)
{
  llvm::Type *v9;
  std::string *v10;
  __int128 v11;
  void **v12;
  std::string::size_type v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  MTLBoundsCheck *v18;
  std::string *v19;
  __int128 v20;
  void **v21;
  std::string::size_type v22;
  std::string::size_type size;
  std::string::size_type v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  MTLBoundsCheck **v28;
  char *v29;
  std::string::size_type v30;
  MTLBoundsCheck *v31;
  uint64_t Function;
  uint64_t v33;
  void *__p[2];
  int64_t v36;
  __int16 v37;
  std::string v38;
  std::string v39;
  std::string v40;
  _QWORD v41[4];

  v41[2] = *MEMORY[0x24BDAC8D0];
  llvm::Twine::str(this);
  MTLBoundsCheck::getMangledTypeStr(a3, v9, &v39);
  v10 = std::string::insert(&v39, 0, ".");
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v36 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (v36 >= 0)
    v12 = __p;
  else
    v12 = (void **)__p[0];
  if (v36 >= 0)
    v13 = HIBYTE(v36);
  else
    v13 = (std::string::size_type)__p[1];
  std::string::append(&v40, (const std::string::value_type *)v12, v13);
  if (SHIBYTE(v36) < 0)
    operator delete(__p[0]);
  v15 = a1;
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  v16 = 0;
  memset(&v39, 0, sizeof(v39));
  v17 = *a5;
  v41[0] = *a4;
  v41[1] = v17;
  do
  {
    v18 = (MTLBoundsCheck *)v41[v16];
    MTLBoundsCheck::getMangledTypeStr(v18, (llvm::Type *)v14, &v38);
    v19 = std::string::insert(&v38, 0, ".");
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v36 = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    if (v36 >= 0)
      v21 = __p;
    else
      v21 = (void **)__p[0];
    if (v36 >= 0)
      v22 = HIBYTE(v36);
    else
      v22 = (std::string::size_type)__p[1];
    std::string::append(&v40, (const std::string::value_type *)v21, v22);
    if (SHIBYTE(v36) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    size = v39.__r_.__value_.__l.__size_;
    if (v39.__r_.__value_.__l.__size_ >= v39.__r_.__value_.__r.__words[2])
    {
      v25 = (uint64_t)(v39.__r_.__value_.__l.__size_ - v39.__r_.__value_.__r.__words[0]) >> 3;
      if ((unint64_t)(v25 + 1) >> 61)
        std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
      v26 = (uint64_t)(v39.__r_.__value_.__r.__words[2] - v39.__r_.__value_.__r.__words[0]) >> 2;
      if (v26 <= v25 + 1)
        v26 = v25 + 1;
      if (v39.__r_.__value_.__r.__words[2] - v39.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v26;
      if (v14)
        v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v39.__r_.__value_.__r.__words[2], v14);
      else
        v27 = 0;
      v28 = (MTLBoundsCheck **)&v27[8 * v25];
      *v28 = v18;
      v24 = (std::string::size_type)(v28 + 1);
      v29 = (char *)v39.__r_.__value_.__l.__size_;
      v30 = v39.__r_.__value_.__r.__words[0];
      if (v39.__r_.__value_.__l.__size_ != v39.__r_.__value_.__r.__words[0])
      {
        do
        {
          v31 = (MTLBoundsCheck *)*((_QWORD *)v29 - 1);
          v29 -= 8;
          *--v28 = v31;
        }
        while (v29 != (char *)v30);
        v29 = (char *)v39.__r_.__value_.__r.__words[0];
      }
      v39.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
      v39.__r_.__value_.__l.__size_ = v24;
      v39.__r_.__value_.__r.__words[2] = (std::string::size_type)&v27[8 * v14];
      if (v29)
        operator delete(v29);
    }
    else
    {
      *(_QWORD *)v39.__r_.__value_.__l.__size_ = v18;
      v24 = size + 8;
    }
    v39.__r_.__value_.__l.__size_ = v24;
    ++v16;
  }
  while (v16 != 2);
  Function = llvm::Module::getFunction();
  if (!Function)
  {
    v33 = llvm::FunctionType::get();
    v37 = 260;
    __p[0] = &v40;
    Function = llvm::Function::Create(v33, 0, (uint64_t)__p, v15);
  }
  if (v39.__r_.__value_.__r.__words[0])
  {
    v39.__r_.__value_.__l.__size_ = v39.__r_.__value_.__r.__words[0];
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  return Function;
}

void sub_240FE7718(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (__p)
    operator delete(__p);
  if (a36 < 0)
    operator delete(a31);
  _Unwind_Resume(exception_object);
}

void MTLFragmentInputPackingPass::fragmentInputPacking(int a1, llvm::Module *this, uint64_t a3)
{
  llvm::Module *v3;
  llvm::NamedMDNode *NamedMetadata;
  uint64_t Operand;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *String;
  uint64_t v15;
  BOOL v16;
  char *v18;
  __int128 v19;
  __int128 *v20;
  __int128 v21;
  int v22;
  int32x2_t v23;
  int32x2_t v24;
  int8x8_t v25;
  __int128 v26;
  int8x8_t v27;
  int v28;
  int32x2_t v29;
  int32x2_t v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  int v40;
  char *v41;
  int64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  __int128 v47;
  char *v48;
  char *v49;
  __int128 v50;
  char *v51;
  unsigned int ComponentCount;
  __int128 v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  _DWORD *v59;
  char *v60;
  _BYTE *v61;
  int ComponentType;
  int v63;
  __int16 v64;
  unsigned __int8 v65;
  uint64_t v66;
  unsigned __int16 *v68;
  int v69;
  BOOL v70;
  uint64_t v71;
  char *v72;
  char *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  __int128 v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  _QWORD *v87;
  char *v88;
  uint64_t v89;
  _BYTE *v90;
  unsigned int v91;
  int v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  char *v99;
  uint64_t *v100;
  char *v101;
  char *v102;
  uint64_t v103;
  const char *ShaderTypeName;
  llvm::LLVMContext *v105;
  llvm::LLVMContext *v106;
  char *v107;
  char *v108;
  char *v109;
  uint64_t Impl;
  uint64_t v111;
  uint64_t *v112;
  uint64_t *v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  char *v117;
  uint64_t *v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  const llvm::AttributeList *v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t *v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  char *v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t ParamAttrs;
  uint64_t v137;
  int v138;
  llvm::LLVMContext *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t *v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  char *v148;
  uint64_t *v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  const llvm::AttributeList *v158;
  const llvm::AttributeList *v159;
  llvm::BasicBlock *v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t i;
  unsigned __int16 *v166;
  char *v167;
  unint64_t v168;
  unsigned __int16 *v169;
  int v170;
  unint64_t v171;
  int v172;
  llvm::Value *v173;
  int *v174;
  uint64_t Element;
  unsigned int v176;
  llvm::LLVMContext *v177;
  unsigned int v178;
  llvm::Value *v179;
  llvm::Instruction *v180;
  uint64_t v181;
  llvm::LLVMContext *v182;
  uint64_t v183;
  llvm::Value *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unsigned int v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  uint64_t v192;
  llvm::Instruction *v193;
  llvm::LLVMContext *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  llvm::NamedMDNode *v203;
  uint64_t v204;
  uint64_t v205;
  int v207;
  __int128 v208;
  uint64_t v209;
  llvm::Function *v210;
  uint64_t v211;
  uint64_t v212;
  llvm::Type *v213;
  void *v214[3];
  void *v215[3];
  void *v216[3];
  void *v217;
  uint64_t *v218;
  char *v219;
  uint64_t v220;
  void *v221;
  uint64_t *v222;
  char *v223;
  std::vector<unsigned int> v224;
  void *__p;
  char *v226;
  char *v227;
  void *v228;
  char *v229;
  char *v230;
  void *v231;
  char *v232;
  unint64_t v233;
  void *v234[4];
  __int16 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  llvm::ReturnInst *v240;
  uint64_t *v241;
  uint64_t *v242;
  uint64_t v243;
  int v244;
  __int16 v245;
  char v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  void *v251[2];
  _QWORD v252[13];

  v3 = this;
  v252[10] = *MEMORY[0x24BDAC8D0];
  v213 = *(llvm::Type **)this;
  *(_QWORD *)&v236 = "air.fragment";
  LOWORD(v238) = 259;
  NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(this, (const llvm::Twine *)&v236);
  Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
  v6 = (_QWORD *)(Operand - 8 * *(unsigned int *)(Operand + 8));
  v7 = v6[2];
  v8 = *(_QWORD *)(*v6 + 128);
  v9 = *(_QWORD *)(v8 + 24);
  v231 = 0;
  v232 = 0;
  v233 = 0;
  v228 = 0;
  v229 = 0;
  v230 = 0;
  __p = 0;
  v226 = 0;
  v227 = 0;
  if (!v7)
  {
    v155 = 0;
    v195 = 0;
    goto LABEL_242;
  }
  std::vector<unsigned int>::vector(&v224, *(_QWORD *)(v8 + 96));
  MTLFrameworkPass::getArgumentMetadataIndices(v7, (uint64_t)&v224);
  v211 = v9;
  v204 = (uint64_t)v3;
  v205 = Operand;
  v203 = NamedMetadata;
  if ((*(_WORD *)(v8 + 18) & 1) != 0)
    llvm::Function::BuildLazyArguments((llvm::Function *)v8);
  v10 = 0;
  v207 = 0;
  v210 = (llvm::Function *)v8;
  v11 = *(_QWORD *)(v8 + 88);
  v208 = 0u;
  while (1)
  {
    if ((*((_WORD *)v210 + 9) & 1) != 0)
      llvm::Function::BuildLazyArguments(v210);
    if (v11 == *((_QWORD *)v210 + 11) + 40 * *((_QWORD *)v210 + 12))
      break;
    v12 = v224.__begin_[v10];
    if ((_DWORD)v12 == -1)
      goto LABEL_47;
    v13 = *(_QWORD *)(v7 - 8 * *(unsigned int *)(v7 + 8) + 8 * v12);
    String = (_QWORD *)llvm::MDString::getString(*(llvm::MDString **)(v13 - 8 * *(unsigned int *)(v13 + 8) + 8));
    if (v15 > 23)
    {
      if (v15 != 24)
      {
        if (v15 == 29 && !memcmp(String, "air.render_target_array_index", 0x1DuLL))
        {
          v207 = dataTypeFromMetadata(2u, v13);
          *((_QWORD *)&v21 + 1) = *((_QWORD *)&v208 + 1);
          *(int32x2_t *)&v21 = vadd_s32(*(int32x2_t *)&v208, (int32x2_t)0x100000001);
          v208 = v21;
        }
        goto LABEL_30;
      }
      v28 = memcmp(String, "air.viewport_array_index", 0x18uLL);
      v29.i32[0] = 0;
      v30.i32[0] = v28;
      v25 = (int8x8_t)vdup_lane_s32(vceq_s32(v30, v29), 0);
      v26 = v208;
      v27 = (int8x8_t)vadd_s32(*(int32x2_t *)&v208, (int32x2_t)0x100000001);
LABEL_29:
      *(int8x8_t *)&v26 = vbsl_s8(v25, v27, *(int8x8_t *)&v26);
      v208 = v26;
LABEL_30:
      v31 = v226;
      if (v226 >= v227)
      {
        v33 = (char *)__p;
        v34 = (v226 - (_BYTE *)__p) >> 2;
        v35 = v34 + 1;
        if ((unint64_t)(v34 + 1) >> 62)
          std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
        v36 = v227 - (_BYTE *)__p;
        if ((v227 - (_BYTE *)__p) >> 1 > v35)
          v35 = v36 >> 1;
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
          v37 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v37 = v35;
        if (v37)
        {
          v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v227, v37);
          v33 = (char *)__p;
          v31 = v226;
        }
        else
        {
          v38 = 0;
        }
        v39 = &v38[4 * v34];
        *(_DWORD *)v39 = v10;
        v32 = v39 + 4;
        while (v31 != v33)
        {
          v40 = *((_DWORD *)v31 - 1);
          v31 -= 4;
          *((_DWORD *)v39 - 1) = v40;
          v39 -= 4;
        }
        __p = v39;
        v226 = v32;
        v227 = &v38[4 * v37];
        if (v33)
          operator delete(v33);
      }
      else
      {
        *(_DWORD *)v226 = v10;
        v32 = v31 + 4;
      }
      v226 = v32;
      goto LABEL_47;
    }
    if (v15 == 15)
    {
      v22 = memcmp(String, "air.point_coord", 0xFuLL);
      v23.i32[0] = 0;
      v24.i32[0] = v22;
      v25 = (int8x8_t)vdup_lane_s32(vceq_s32(v24, v23), 0);
      v26 = v208;
      v27 = (int8x8_t)vadd_s32(*(int32x2_t *)&v208, (int32x2_t)0x100000002);
      goto LABEL_29;
    }
    if (v15 != 18)
      goto LABEL_30;
    v16 = *String == 0x676172662E726961 && String[1] == 0x706E695F746E656DLL;
    if (!v16 || *((_WORD *)String + 8) != 29813)
      goto LABEL_30;
    if (*(_QWORD *)(v11 + 8))
    {
      LODWORD(v236) = 0;
      *((_QWORD *)&v236 + 1) = 0;
      *(_QWORD *)&v237 = 0;
      *(_QWORD *)((char *)&v237 + 5) = 0;
      MTLFrameworkPass::extractVaryingInfoFromMetadata((uint64_t)&v236, v13, 2u, 0);
      LODWORD(v236) = v10;
      BYTE12(v237) |= 1u;
      v18 = v232;
      if ((unint64_t)v232 >= v233)
      {
        v41 = (char *)v231;
        v42 = (v232 - (_BYTE *)v231) >> 5;
        v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 59)
          std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
        v44 = v233 - (_QWORD)v231;
        if ((uint64_t)(v233 - (_QWORD)v231) >> 4 > v43)
          v43 = v44 >> 4;
        if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFE0)
          v45 = 0x7FFFFFFFFFFFFFFLL;
        else
          v45 = v43;
        if (v45)
        {
          v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<VaryingInfo>>((uint64_t)&v233, v45);
          v41 = (char *)v231;
          v18 = v232;
        }
        else
        {
          v46 = 0;
        }
        v47 = v237;
        v48 = &v46[32 * v42];
        *(_OWORD *)v48 = v236;
        *((_OWORD *)v48 + 1) = v47;
        if (v18 == v41)
        {
          v51 = &v46[32 * v42];
        }
        else
        {
          v49 = &v46[32 * v42];
          do
          {
            v50 = *((_OWORD *)v18 - 2);
            v51 = v49 - 32;
            *(_OWORD *)(v49 - 19) = *(_OWORD *)(v18 - 19);
            *((_OWORD *)v49 - 2) = v50;
            v18 -= 32;
            v49 -= 32;
          }
          while (v18 != v41);
        }
        v20 = (__int128 *)(v48 + 32);
        v231 = v51;
        v232 = v48 + 32;
        v233 = (unint64_t)&v46[32 * v45];
        if (v41)
          operator delete(v41);
      }
      else
      {
        v19 = v237;
        *(_OWORD *)v232 = v236;
        *((_OWORD *)v18 + 1) = v19;
        v20 = (__int128 *)(v18 + 32);
      }
      v232 = (char *)v20;
      ComponentCount = MTLDataTypeGetComponentCount(SDWORD2(v237));
      *((_QWORD *)&v53 + 1) = *((_QWORD *)&v208 + 1);
      *(int32x2_t *)&v53 = vadd_s32(*(int32x2_t *)&v208, (int32x2_t)(ComponentCount | 0x100000000));
      v208 = v53;
    }
LABEL_47:
    v11 += 40;
    ++v10;
  }
  v54 = 126 - 2 * __clz((v232 - (_BYTE *)v231) >> 5);
  if (v232 == v231)
    v55 = 0;
  else
    v55 = v54;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *,false>((unint64_t)v231, (__int128 *)v232, (uint64_t)&v236, v55, 1);
  if (((v232 - (_BYTE *)v231) & 0x1FFFFFFFE0) != 0)
  {
    v56 = 0;
    v57 = ((unint64_t)(v232 - (_BYTE *)v231) >> 5);
    do
    {
      v58 = v231;
      v59 = (char *)v231 + 32 * v56;
      v61 = v228;
      v60 = v229;
      ComponentType = MTLDataTypeGetComponentType(v59[6]);
      v63 = MTLDataTypeGetComponentCount(v59[6]);
      v64 = v63;
      v65 = v58[32 * v56 + 28];
      v66 = -1431655765 * ((v60 - v61) >> 3);
      if ((v65 & 0x38) == 0x20 || v66 == 0)
      {
LABEL_82:
        v71 = *(_QWORD *)(*(_QWORD *)(v211 + 16) + 8 * (*v59 + 1));
        if ((*(_DWORD *)(v71 + 8) & 0xFE) == 0x12)
          v71 = **(_QWORD **)(v71 + 16);
        v72 = v229;
        if (v229 >= v230)
        {
          v74 = 0xAAAAAAAAAAAAAAABLL * ((v229 - (_BYTE *)v228) >> 3);
          v75 = v74 + 1;
          if (v74 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((v230 - (_BYTE *)v228) >> 3) > v75)
            v75 = 0x5555555555555556 * ((v230 - (_BYTE *)v228) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((v230 - (_BYTE *)v228) >> 3) >= 0x555555555555555)
            v76 = 0xAAAAAAAAAAAAAAALL;
          else
            v76 = v75;
          if (v76)
            v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PackedInput>>((uint64_t)&v230, v76);
          else
            v77 = 0;
          v79 = &v77[24 * v74];
          *(_WORD *)v79 = ComponentType;
          *((_WORD *)v79 + 1) = v64;
          *((_WORD *)v79 + 2) = 1;
          *((_WORD *)v79 + 3) = v56;
          *((_QWORD *)v79 + 2) = v71;
          v81 = (char *)v228;
          v80 = v229;
          v82 = v79;
          if (v229 != v228)
          {
            do
            {
              v83 = *(_OWORD *)(v80 - 24);
              *((_QWORD *)v82 - 1) = *((_QWORD *)v80 - 1);
              *(_OWORD *)(v82 - 24) = v83;
              v82 -= 24;
              v80 -= 24;
            }
            while (v80 != v81);
            v80 = (char *)v228;
          }
          v73 = v79 + 24;
          v228 = v82;
          v229 = v79 + 24;
          v230 = &v77[24 * v76];
          if (v80)
            operator delete(v80);
        }
        else
        {
          *(_WORD *)v229 = ComponentType;
          *((_WORD *)v72 + 1) = v63;
          *((_WORD *)v72 + 2) = 1;
          *((_WORD *)v72 + 3) = v56;
          v73 = v72 + 24;
          *((_QWORD *)v72 + 2) = v71;
        }
        v229 = v73;
      }
      else
      {
        v68 = (unsigned __int16 *)((char *)v228 + 6);
        while (1)
        {
          v69 = *(v68 - 2);
          v70 = (v69 + v63) <= 4 && ComponentType == *(v68 - 3);
          if (v70 && ((v65 ^ *((_BYTE *)v231 + 32 * *v68 + 28)) & 0x3E) == 0)
            break;
          v68 += 12;
          if (!--v66)
            goto LABEL_82;
        }
        *(v68 - 2) = v69 + v63;
        v78 = *(v68 - 1);
        v68[v78] = v56;
        *(v68 - 1) = v78 + 1;
      }
      ++v56;
    }
    while (v56 != v57);
  }
  v222 = 0;
  v223 = 0;
  v221 = 0;
  std::vector<llvm::Metadata *>::reserve(&v221, (*(_DWORD *)(v211 + 12) - 1));
  v84 = *((_QWORD *)v210 + 14);
  v219 = 0;
  v220 = v84;
  v251[0] = v252;
  v251[1] = (void *)0xA00000000;
  v217 = 0;
  v218 = 0;
  std::vector<llvm::Metadata *>::reserve(&v217, (*(_DWORD *)(v211 + 12) - 1));
  v202 = 0xAAAAAAAAAAAAAAABLL * ((v229 - (_BYTE *)v228) >> 3);
  v209 = -1431655765 * ((v229 - (_BYTE *)v228) >> 3);
  if (-1431655765 * ((v229 - (_BYTE *)v228) >> 3))
  {
    v86 = 0;
    do
    {
      v87 = v228;
      v88 = (char *)v228 + 24 * v86;
      v89 = *((unsigned __int16 *)v88 + 3);
      v90 = v231;
      v91 = *((unsigned __int16 *)v88 + 1);
      v92 = MTLDataTypeGetComponentType(*((_DWORD *)v231 + 8 * v89 + 6));
      v93 = v87[3 * v86 + 2];
      if (v91 >= 2 && (v90[32 * v89 + 28] & 0x38) != 0x20)
        v93 = llvm::VectorType::get();
      v94 = v222;
      if (v222 >= (uint64_t *)v223)
      {
        v96 = ((char *)v222 - (_BYTE *)v221) >> 3;
        if ((unint64_t)(v96 + 1) >> 61)
          std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
        v97 = (v223 - (_BYTE *)v221) >> 2;
        if (v97 <= v96 + 1)
          v97 = v96 + 1;
        if ((unint64_t)(v223 - (_BYTE *)v221) >= 0x7FFFFFFFFFFFFFF8)
          v98 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v98 = v97;
        if (v98)
          v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v223, v98);
        else
          v99 = 0;
        v100 = (uint64_t *)&v99[8 * v96];
        *v100 = v93;
        v95 = v100 + 1;
        v102 = (char *)v221;
        v101 = (char *)v222;
        if (v222 != v221)
        {
          do
          {
            v103 = *((_QWORD *)v101 - 1);
            v101 -= 8;
            *--v100 = v103;
          }
          while (v101 != v102);
          v101 = (char *)v221;
        }
        v221 = v100;
        v222 = v95;
        v223 = &v99[8 * v98];
        if (v101)
          operator delete(v101);
      }
      else
      {
        *v222 = v93;
        v95 = v94 + 1;
      }
      v222 = v95;
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v251, 0);
      ShaderTypeName = MTLDataTypeGetShaderTypeName(v92, v91);
      v240 = 0;
      v238 = 0u;
      v239 = 0u;
      v236 = 0u;
      v237 = 0u;
      llvm::Type::getInt32Ty(v213, v105);
      llvm::ConstantInt::get();
      *(_QWORD *)&v236 = llvm::ValueAsMetadata::get();
      *((_QWORD *)&v236 + 1) = llvm::MDString::get();
      *(_QWORD *)&v237 = llvm::MDString::get();
      *((_QWORD *)&v237 + 1) = llvm::MDString::get();
      llvm::Type::getInt32Ty(v213, v106);
      llvm::ConstantInt::get();
      *(_QWORD *)&v238 = llvm::ValueAsMetadata::get();
      *((_QWORD *)&v238 + 1) = llvm::MDString::get();
      strlen(ShaderTypeName);
      *(_QWORD *)&v239 = llvm::MDString::get();
      v107 = &v90[32 * v89];
      v108 = MTLFrameworkPass::samplingStringFromQualifier((MTLFrameworkPass *)((v107[28] >> 3) & 7));
      strlen(v108);
      *((_QWORD *)&v239 + 1) = llvm::MDString::get();
      v109 = MTLFrameworkPass::interpolationStringFromQualifier((MTLFrameworkPass *)((v107[28] >> 1) & 3));
      strlen(v109);
      v240 = (llvm::ReturnInst *)llvm::MDString::get();
      Impl = llvm::MDTuple::getImpl();
      v111 = Impl;
      v112 = v218;
      if (v218 >= (uint64_t *)v219)
      {
        v114 = ((char *)v218 - (_BYTE *)v217) >> 3;
        if ((unint64_t)(v114 + 1) >> 61)
          std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
        v115 = (v219 - (_BYTE *)v217) >> 2;
        if (v115 <= v114 + 1)
          v115 = v114 + 1;
        if ((unint64_t)(v219 - (_BYTE *)v217) >= 0x7FFFFFFFFFFFFFF8)
          v116 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v116 = v115;
        if (v116)
          v117 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v219, v116);
        else
          v117 = 0;
        v118 = (uint64_t *)&v117[8 * v114];
        *v118 = v111;
        v113 = v118 + 1;
        v120 = (char *)v217;
        v119 = (char *)v218;
        if (v218 != v217)
        {
          do
          {
            v121 = *((_QWORD *)v119 - 1);
            v119 -= 8;
            *--v118 = v121;
          }
          while (v119 != v120);
          v119 = (char *)v217;
        }
        v217 = v118;
        v218 = v113;
        v219 = &v117[8 * v116];
        if (v119)
          operator delete(v119);
      }
      else
      {
        *v218 = Impl;
        v113 = v112 + 1;
      }
      v218 = v113;
      ++v86;
    }
    while (v86 != v209);
  }
  if (((v226 - (_BYTE *)__p) & 0x3FFFFFFFCLL) != 0)
  {
    v122 = 0;
    v123 = ((unint64_t)(v226 - (_BYTE *)__p) >> 2);
    do
    {
      v124 = (const llvm::AttributeList *)*((unsigned int *)__p + v122);
      v125 = *(_QWORD *)(*(_QWORD *)(v211 + 16) + 8 * ((_DWORD)v124 + 1));
      v126 = v222;
      if (v222 >= (uint64_t *)v223)
      {
        v128 = ((char *)v222 - (_BYTE *)v221) >> 3;
        if ((unint64_t)(v128 + 1) >> 61)
          std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
        v129 = (v223 - (_BYTE *)v221) >> 2;
        if (v129 <= v128 + 1)
          v129 = v128 + 1;
        if ((unint64_t)(v223 - (_BYTE *)v221) >= 0x7FFFFFFFFFFFFFF8)
          v130 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v130 = v129;
        if (v130)
          v131 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v223, v130);
        else
          v131 = 0;
        v132 = &v131[8 * v128];
        *(_QWORD *)v132 = v125;
        v127 = (uint64_t *)(v132 + 8);
        v134 = (char *)v221;
        v133 = (char *)v222;
        if (v222 != v221)
        {
          do
          {
            v135 = *((_QWORD *)v133 - 1);
            v133 -= 8;
            *((_QWORD *)v132 - 1) = v135;
            v132 -= 8;
          }
          while (v133 != v134);
          v133 = (char *)v221;
        }
        v221 = v132;
        v222 = v127;
        v223 = &v131[8 * v130];
        if (v133)
          operator delete(v133);
      }
      else
      {
        *v222 = v125;
        v127 = v126 + 1;
      }
      v222 = v127;
      ParamAttrs = llvm::compat::getParamAttrs((llvm::compat *)&v220, v124, v85);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v251, ParamAttrs);
      v137 = *(_QWORD *)(v7 - 8 * *(unsigned int *)(v7 + 8) + 8 * v224.__begin_[(_QWORD)v124]);
      if (v137)
      {
        v138 = *(_DWORD *)(v137 + 8);
        std::vector<llvm::Metadata *>::vector(&v236, v138);
        llvm::Type::getInt32Ty(v213, v139);
        llvm::ConstantInt::get();
        *(_QWORD *)v236 = llvm::ValueAsMetadata::get();
        if (v138 >= 2)
        {
          v140 = v137 - 8 * *(unsigned int *)(v137 + 8);
          v141 = 8;
          do
          {
            *(_QWORD *)(v236 + v141) = *(_QWORD *)(v140 + v141);
            v141 += 8;
          }
          while (8 * v138 != v141);
        }
        v142 = llvm::MDTuple::getImpl();
        if ((_QWORD)v236)
        {
          *((_QWORD *)&v236 + 1) = v236;
          operator delete((void *)v236);
        }
      }
      else
      {
        v142 = 0;
      }
      v143 = v218;
      if (v218 >= (uint64_t *)v219)
      {
        v145 = ((char *)v218 - (_BYTE *)v217) >> 3;
        if ((unint64_t)(v145 + 1) >> 61)
          std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
        v146 = (v219 - (_BYTE *)v217) >> 2;
        if (v146 <= v145 + 1)
          v146 = v145 + 1;
        if ((unint64_t)(v219 - (_BYTE *)v217) >= 0x7FFFFFFFFFFFFFF8)
          v147 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v147 = v146;
        if (v147)
          v148 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v219, v147);
        else
          v148 = 0;
        v149 = (uint64_t *)&v148[8 * v145];
        *v149 = v142;
        v144 = v149 + 1;
        v151 = (char *)v217;
        v150 = (char *)v218;
        if (v218 != v217)
        {
          do
          {
            v152 = *((_QWORD *)v150 - 1);
            v150 -= 8;
            *--v149 = v152;
          }
          while (v150 != v151);
          v150 = (char *)v217;
        }
        v217 = v149;
        v218 = v144;
        v219 = &v148[8 * v147];
        if (v150)
          operator delete(v150);
      }
      else
      {
        *v218 = v142;
        v144 = v143 + 1;
      }
      v218 = v144;
      ++v122;
    }
    while (v122 != v123);
  }
  v153 = **(_QWORD **)(*((_QWORD *)v210 + 3) + 16);
  v154 = llvm::FunctionType::get();
  *((_DWORD *)v210 + 8) = *((_DWORD *)v210 + 8) & 0xFFFFBFC0 | 0x4007;
  *(_QWORD *)&v236 = "air.packedFragmentFunction";
  LOWORD(v238) = 259;
  v3 = (llvm::Module *)v204;
  v155 = v207;
  v156 = v205;
  v157 = llvm::Function::Create(v154, 0, (uint64_t)&v236, v204);
  llvm::Function::getContext(v210);
  llvm::compat::getFnAttrs((llvm::compat *)&v220, v158);
  llvm::compat::getRetAttrs((llvm::compat *)&v220, v159);
  v212 = v153;
  *(_QWORD *)(v157 + 112) = llvm::AttributeList::get();
  *(_QWORD *)&v236 = "Body";
  LOWORD(v238) = 259;
  v161 = llvm::BasicBlock::Create(v213, (llvm::LLVMContext *)&v236, (const llvm::Twine *)v157, 0, v160);
  *(_QWORD *)&v236 = &v237;
  *((_QWORD *)&v236 + 1) = 0x200000000;
  v240 = v213;
  v241 = &v249;
  v242 = &v250;
  v243 = 0;
  v244 = 0;
  v245 = 512;
  v246 = 7;
  v239 = 0uLL;
  v248 = 0;
  v247 = 0;
  v249 = MEMORY[0x24BED83B8] + 16;
  v250 = MEMORY[0x24BED83F0] + 16;
  createDebugInfoForWrapperFunction((uint64_t)v213, (llvm::IRBuilderBase *)&v236, (llvm::Value *)v157, v210);
  llvm::IRBuilderBase::SetInsertPoint((uint64_t)&v236, v161, v161 + 40);
  v162 = *(unsigned int *)(v157 + 96);
  std::vector<llvm::Argument *>::vector(v216, v162);
  if ((*(_WORD *)(v157 + 18) & 1) != 0)
    llvm::Function::BuildLazyArguments((llvm::Function *)v157);
  if (v162)
  {
    v163 = 0;
    v164 = *(_QWORD *)(v157 + 88);
    do
    {
      *(_QWORD *)((char *)v216[0] + v163) = v164;
      v164 += 40;
      v163 += 8;
    }
    while (8 * v162 != v163);
  }
  if (*((_QWORD *)v210 + 12))
  {
    v201 = *((_QWORD *)v210 + 12);
    std::vector<llvm::Value *>::vector(v215, v201);
    if (v209)
    {
      for (i = 0; i != v209; ++i)
      {
        v166 = (unsigned __int16 *)v228;
        v167 = (char *)v228 + 24 * i;
        v170 = *((unsigned __int16 *)v167 + 2);
        v169 = (unsigned __int16 *)(v167 + 4);
        LODWORD(v168) = v170;
        if (v170)
        {
          v171 = 0;
          v172 = 0;
          v173 = (llvm::Value *)*((_QWORD *)v216[0] + i);
          do
          {
            v174 = (int *)((char *)v231 + 32 * v166[12 * i + 3 + v171]);
            if ((_DWORD)v168 == 1)
            {
              Element = (uint64_t)v173;
            }
            else
            {
              v176 = MTLDataTypeGetComponentCount(v174[6]);
              v178 = v176;
              if (v176 == 1)
              {
                llvm::Type::getInt32Ty(v213, v177);
                v179 = (llvm::Value *)llvm::ConstantInt::get();
                v235 = 257;
                Element = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)&v236, v173, v179, (const llvm::Twine *)v234, v180);
                ++v172;
              }
              else
              {
                v181 = v176;
                std::vector<llvm::Constant *>::vector(v214, v176);
                if (v178)
                {
                  v183 = 0;
                  do
                  {
                    llvm::Type::getInt32Ty(v213, v182);
                    *((_QWORD *)v214[0] + v183++) = llvm::ConstantInt::get();
                  }
                  while (v181 != v183);
                  v172 += v183;
                }
                v184 = (llvm::Value *)llvm::ConstantVector::get();
                v235 = 257;
                Element = llvm::IRBuilderBase::CreateShuffleVector((llvm::IRBuilderBase *)&v236, v173, v173, v184, (const llvm::Twine *)v234);
                if (v214[0])
                {
                  v214[1] = v214[0];
                  operator delete(v214[0]);
                }
              }
            }
            *((_QWORD *)v215[0] + *v174) = Element;
            ++v171;
            v168 = *v169;
          }
          while (v171 < v168);
        }
      }
    }
    if (((v226 - (_BYTE *)__p) & 0x3FFFFFFFCLL) != 0)
    {
      v185 = 0;
      v186 = ((unint64_t)(v226 - (_BYTE *)__p) >> 2);
      do
      {
        *((_QWORD *)v215[0] + *((unsigned int *)__p + v185)) = *((_QWORD *)v216[0] + (v202 + v185));
        ++v185;
      }
      while (v186 != v185);
    }
    v155 = v207;
    v156 = v205;
    if ((*((_WORD *)v210 + 9) & 1) != 0)
      llvm::Function::BuildLazyArguments(v210);
    v187 = 0;
    if (v201 <= 1)
      v188 = 1;
    else
      v188 = v201;
    v189 = 8 * v188;
    v190 = (_QWORD *)(*((_QWORD *)v210 + 11) + 8);
    v3 = (llvm::Module *)v204;
    do
    {
      if (!*v190)
        *(_QWORD *)((char *)v215[0] + v187) = llvm::UndefValue::get();
      v187 += 8;
      v190 += 5;
    }
    while (v189 != v187);
    v191 = *((_QWORD *)v210 + 12);
    v192 = *((_QWORD *)v210 + 3);
    v235 = 257;
    v194 = (llvm::LLVMContext *)llvm::IRBuilderBase::CreateCall((uint64_t)&v236, v192, (uint64_t)v210, (uint64_t)v215[0], v191, (uint64_t)v234, 0);
    if (v215[0])
    {
      v215[1] = v215[0];
      operator delete(v215[0]);
    }
  }
  else
  {
    v196 = *((_QWORD *)v210 + 3);
    v235 = 257;
    v194 = (llvm::LLVMContext *)llvm::IRBuilderBase::CreateCall((uint64_t)&v236, v196, (uint64_t)v210, 0, 0, (uint64_t)v234, 0);
  }
  if (*(_BYTE *)(v212 + 8) == 7)
    v197 = llvm::ReturnInst::Create(v240, 0, 0, v193);
  else
    v197 = llvm::ReturnInst::Create(v240, v194, 0, v193);
  v235 = 257;
  llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)&v236, v197, (uint64_t)v234);
  v198 = *(_DWORD *)(v156 + 8);
  std::vector<llvm::Metadata *>::vector(v234, v198);
  *(_QWORD *)v234[0] = llvm::ValueAsMetadata::get();
  *((_QWORD *)v234[0] + 1) = *(_QWORD *)(v156 - 8 * *(unsigned int *)(v156 + 8) + 8);
  *((_QWORD *)v234[0] + 2) = llvm::MDTuple::getImpl();
  if (v198 >= 4)
  {
    v199 = v156 - 8 * *(unsigned int *)(v156 + 8);
    v200 = 24;
    do
    {
      *(_QWORD *)((char *)v234[0] + v200) = *(_QWORD *)(v199 + v200);
      v200 += 8;
    }
    while (8 * v198 != v200);
  }
  llvm::MDTuple::getImpl();
  llvm::NamedMDNode::eraseFromParent(v203);
  llvm::Module::getOrInsertNamedMetadata();
  llvm::NamedMDNode::addOperand();
  if (v234[0])
  {
    v234[1] = v234[0];
    operator delete(v234[0]);
  }
  if (v216[0])
  {
    v216[1] = v216[0];
    operator delete(v216[0]);
  }
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)&v250);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v249);
  if ((__int128 *)v236 != &v237)
    free((void *)v236);
  if (v217)
  {
    v218 = (uint64_t *)v217;
    operator delete(v217);
  }
  if (v251[0] != v252)
    free(v251[0]);
  if (v221)
  {
    v222 = (uint64_t *)v221;
    operator delete(v221);
  }
  if (v224.__begin_)
  {
    v224.__end_ = v224.__begin_;
    operator delete(v224.__begin_);
  }
  v195 = v208;
LABEL_242:
  std::function<void ()(llvm::Module *,unsigned int,unsigned int,unsigned int,std::vector<PackedInput> const&,std::vector<VaryingInfo> const&)>::operator()(a3, (uint64_t)v3, SHIDWORD(v195), v195, v155);
  if (__p)
  {
    v226 = (char *)__p;
    operator delete(__p);
  }
  if (v228)
  {
    v229 = (char *)v228;
    operator delete(v228);
  }
  if (v231)
  {
    v232 = (char *)v231;
    operator delete(v231);
  }
}

void sub_240FE8B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62)
{
  uint64_t v62;
  void *v64;

  if (__p)
    operator delete(__p);
  if (a34)
    operator delete(a34);
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder(&a61);
  if (a37)
    operator delete(a37);
  v64 = *(void **)(v62 - 216);
  if (v64 != a14)
    free(v64);
  if (a41)
    operator delete(a41);
  if (a44)
    operator delete(a44);
  if (a47)
    operator delete(a47);
  if (a50)
    operator delete(a50);
  if (a53)
    operator delete(a53);
  _Unwind_Resume(a1);
}

uint64_t llvm::IRBuilderBase::CreateShuffleVector(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, const llvm::Twine *a5)
{
  _QWORD v10[9];

  v10[8] = *MEMORY[0x24BDAC8D0];
  llvm::ShuffleVectorInst::getShuffleMask();
  return llvm::IRBuilderBase::CreateShuffleVector((uint64_t)this, (uint64_t)a2, (uint64_t)a3, (uint64_t)v10, 0, (uint64_t)a5);
}

void sub_240FE8E20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  void *v10;

  if (a10 != v10)
    free(a10);
  _Unwind_Resume(exception_object);
}

uint64_t std::function<void ()(llvm::Module *,unsigned int,unsigned int,unsigned int,std::vector<PackedInput> const&,std::vector<VaryingInfo> const&)>::operator()(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v5;
  int v7;
  int v8;
  int v9;
  uint64_t v10;

  v10 = a2;
  v9 = a3;
  v7 = a5;
  v8 = a4;
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *, int *, int *, int *))(*(_QWORD *)v5 + 48))(v5, &v10, &v9, &v8, &v7);
}

uint64_t llvm::IRBuilderBase::CreateShuffleVector(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  BOOL v13;
  uint64_t v15;
  _BYTE v16[32];
  __int16 v17;

  if (a2 && *(unsigned __int8 *)(a2 + 16) <= 0x14u && a3 && *(unsigned __int8 *)(a3 + 16) <= 0x14u)
  {
    v12 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72) + 336))(*(_QWORD *)(a1 + 72), a2, a3, a4, a5);
    if (v12)
      v13 = *(unsigned __int8 *)(v12 + 16) >= 0x1Cu;
    else
      v13 = 0;
    if (v13)
      return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)a1, v12, a6);
  }
  else
  {
    v15 = llvm::User::operator new((llvm::User *)0x68);
    v17 = 257;
    MEMORY[0x24268CDE0](v15, a2, a3, a4, a5, v16, 0);
    return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)a1, v15, a6);
  }
  return v12;
}

void sub_240FE8F9C(_Unwind_Exception *a1)
{
  void *v1;

  llvm::User::operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<PackedInput>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

_QWORD *std::vector<llvm::Argument *>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<llvm::Type *>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_240FE904C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<llvm::Constant *>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<llvm::Type *>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_240FE90C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t vectorTypeGet(llvm::Type *a1)
{
  return llvm::VectorType::get();
}

BOOL isPatchControlPointInputUnused(uint64_t a1)
{
  llvm::MDString *v1;
  _QWORD *String;
  uint64_t v3;

  v1 = *(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8 * (*(_DWORD *)(a1 + 8) - 1));
  if (*(_BYTE *)v1)
    return 0;
  String = (_QWORD *)llvm::MDString::getString(v1);
  if (v3 != 14)
    return 0;
  return *String == 0x5F6772612E726961 && *(_QWORD *)((char *)String + 6) == 0x646573756E755F67;
}

char *MTLCompilerErrorObject::setErrorMessage(MTLCompilerErrorObject *this, const char *__s1)
{
  char *result;

  result = strdup(__s1);
  *(_QWORD *)this = result;
  return result;
}

uint64_t MTLCompilerErrorObject::setFormattedErrorMessage(char **this, const char *a2, ...)
{
  va_list va;

  va_start(va, a2);
  return vasprintf(this, a2, va);
}

void createDebugInfoForWrapperFunction(uint64_t a1, llvm::IRBuilderBase *a2, llvm::Value *a3, llvm::Function *this)
{
  uint64_t Subprogram;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t Name;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t Impl;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  Subprogram = llvm::Function::getSubprogram(this);
  if (Subprogram)
  {
    v8 = Subprogram;
    v9 = *(_QWORD *)(Subprogram - 8 * *(unsigned int *)(Subprogram + 8) + 8);
    Name = llvm::Value::getName(a3);
    v12 = *(unsigned int *)(v8 + 8);
    v13 = *(_BYTE *)v8 == 15 ? v8 : *(_QWORD *)(v8 - 8 * v12);
    v14 = (uint64_t *)(v8 - 8 * v12);
    v15 = v12 < 9 ? 0 : v14[8];
    LODWORD(v20) = 0;
    Impl = llvm::DISubprogram::getImpl(a1, v9, Name, v10, 0, 0, v13, 0, v14[4], v20, v15, 0, 0x1C00000140, v14[5], 0, 0, 0, 0, 0,
             (uint64_t)&unk_24105C402,
             0);
    llvm::Function::setSubprogram();
    llvm::IRBuilderBase::getCurrentDebugLocation(a2);
    v17 = v22;
    llvm::TrackingMDRef::~TrackingMDRef((llvm::TrackingMDRef *)&v22);
    if (Impl && v17 == 0)
    {
      llvm::DebugLoc::get();
      v21 = v22;
      if (v22)
      {
        llvm::MetadataTracking::track();
        v19 = v21;
      }
      else
      {
        v19 = 0;
      }
      llvm::IRBuilderBase::AddOrRemoveMetadataToCopy((uint64_t)a2, 0, v19);
      llvm::TrackingMDRef::~TrackingMDRef((llvm::TrackingMDRef *)&v21);
      llvm::TrackingMDRef::~TrackingMDRef((llvm::TrackingMDRef *)&v22);
    }
  }
}

void sub_240FE9330(_Unwind_Exception *a1)
{
  uint64_t v1;

  llvm::TrackingMDRef::~TrackingMDRef((llvm::TrackingMDRef *)(v1 - 56));
  _Unwind_Resume(a1);
}

uint64_t parseControlPointInputMetadata(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;
  unsigned int i;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;

  *(_DWORD *)a2 = *(_DWORD *)a2 & 0xFFFFB005 | 0x407A;
  v2 = *(_DWORD *)(result + 8);
  if (v2)
  {
    v4 = result;
    for (i = 0; i < v2; ++i)
    {
      result = *(_QWORD *)(v4 - 8 * *(unsigned int *)(v4 + 8) + 8 * i);
      if (!*(_BYTE *)result)
      {
        result = llvm::MDString::getString((llvm::MDString *)result);
        switch(v6)
        {
          case 0xCuLL:
            result = memcmp((const void *)result, "air.arg_name", v6);
            if (!(_DWORD)result)
            {
              result = llvm::MDString::getString(*(llvm::MDString **)(v4 - 8 * *(unsigned int *)(v4 + 8) + 8 * ++i));
              *(_QWORD *)(a2 + 16) = result;
              *(_QWORD *)(a2 + 24) = v7;
            }
            break;
          case 0xEuLL:
            result = memcmp((const void *)result, "air.arg_unused", v6);
            if (!(_DWORD)result)
              *(_DWORD *)a2 &= ~8u;
            break;
          case 0x11uLL:
            result = memcmp((const void *)result, "air.arg_type_name", v6);
            if (!(_DWORD)result)
            {
              result = llvm::MDString::getString(*(llvm::MDString **)(v4 - 8 * *(unsigned int *)(v4 + 8) + 8 * ++i));
              *(_QWORD *)(a2 + 32) = result;
              *(_QWORD *)(a2 + 40) = v8;
            }
            break;
          case 0x12uLL:
            if (*(_QWORD *)result == 0x61636F6C2E726961
              && *(_QWORD *)(result + 8) == 0x646E695F6E6F6974
              && *(_WORD *)(result + 16) == 30821)
            {
              v11 = v4 - 8 * *(unsigned int *)(v4 + 8);
              v12 = *(_QWORD *)(*(_QWORD *)(v11 + 8 * (i + 1)) + 128);
              v13 = (_QWORD *)(v12 + 24);
              if (*(_DWORD *)(v12 + 32) >= 0x41u)
                v13 = (_QWORD *)*v13;
              *(_DWORD *)(a2 + 4) = *v13;
              i += 2;
              v14 = *(_QWORD *)(*(_QWORD *)(v11 + 8 * i) + 128);
              v15 = (_QWORD *)(v14 + 24);
              if (*(_DWORD *)(v14 + 32) >= 0x41u)
                v15 = (_QWORD *)*v15;
              *(_DWORD *)(a2 + 8) = *v15;
            }
            break;
          default:
            continue;
        }
      }
    }
  }
  return result;
}

void parseArgumentMetadata(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t *a7, int a8)
{
  uint64_t v12;
  uint64_t **v13;
  uint64_t **v14;
  uint64_t **v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t **v18;
  uint64_t **v19;
  uint64_t **v20;
  uint64_t **v21;
  uint64_t **v22;
  uint64_t **v23;
  uint64_t **v24;
  uint64_t **v25;
  uint64_t **v26;
  uint64_t **v27;
  uint64_t **v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t **v31;
  uint64_t **v32;
  uint64_t **v33;
  uint64_t **v34;
  uint64_t **v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  _QWORD *String;
  size_t v40;
  _QWORD *v41;
  size_t v42;
  unsigned int v43;
  size_t v44;
  int v45;
  int v46;
  int v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BOOL4 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  llvm::MDString *v65;
  int v66;
  llvm::MDString *v67;
  unsigned int v68;
  _DWORD *v69;
  size_t v70;
  _QWORD *v71;
  size_t v72;
  const char *v73;
  uint64_t v74;
  _QWORD *v75;
  int v76;
  int v77;
  int v78;
  llvm::MDString *v80;
  uint64_t v81;
  unsigned int v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  int v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  llvm::MDString *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t NonStructMember;
  int v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  _QWORD *v104;
  int v105;
  int v106;
  int v107;
  int v108;
  const void *v109;
  size_t v110;
  int v111;
  const void *v112;
  size_t v113;
  unint64_t v114;
  unint64_t v115;
  int v116;
  unsigned int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  uint64_t v124;
  int v125;
  void *v130;
  void *__p[2];
  uint64_t v132;
  void **v133;

  if (buildInMetadataSet)
    goto LABEL_49;
  v12 = operator new();
  *(_QWORD *)(v12 + 16) = 0;
  *(_QWORD *)(v12 + 8) = 0;
  *(_QWORD *)v12 = v12 + 8;
  buildInMetadataSet = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "air.vertex_id");
  v133 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLCompilerMeshTopologyType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v12, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v133)+ 14) = 1;
  if (SHIBYTE(v132) < 0)
    operator delete(__p[0]);
  v13 = (uint64_t **)buildInMetadataSet;
  std::string::basic_string[abi:ne180100]<0>(__p, "air.instance_id");
  v133 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLCompilerMeshTopologyType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v13, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v133)+ 14) = 2;
  if (SHIBYTE(v132) < 0)
    operator delete(__p[0]);
  v14 = (uint64_t **)buildInMetadataSet;
  std::string::basic_string[abi:ne180100]<0>(__p, "air.base_vertex");
  v133 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLCompilerMeshTopologyType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v14, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v133)+ 14) = 3;
  if (SHIBYTE(v132) < 0)
    operator delete(__p[0]);
  v15 = (uint64_t **)buildInMetadataSet;
  std::string::basic_string[abi:ne180100]<0>(__p, "air.base_instance");
  v133 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLCompilerMeshTopologyType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v15, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v133)+ 14) = 4;
  if (SHIBYTE(v132) < 0)
    operator delete(__p[0]);
  v16 = (uint64_t **)buildInMetadataSet;
  std::string::basic_string[abi:ne180100]<0>(__p, "air.thread_position_in_grid");
  v133 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLCompilerMeshTopologyType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v16, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v133)+ 14) = 5;
  if (SHIBYTE(v132) < 0)
    operator delete(__p[0]);
  v17 = (uint64_t **)buildInMetadataSet;
  std::string::basic_string[abi:ne180100]<0>(__p, "air.threads_per_grid");
  v133 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLCompilerMeshTopologyType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v17, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v133)+ 14) = 6;
  if (SHIBYTE(v132) < 0)
    operator delete(__p[0]);
  v18 = (uint64_t **)buildInMetadataSet;
  std::string::basic_string[abi:ne180100]<0>(__p, "air.thread_position_in_threadgroup");
  v133 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLCompilerMeshTopologyType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v18, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v133)+ 14) = 7;
  if (SHIBYTE(v132) < 0)
    operator delete(__p[0]);
  v19 = (uint64_t **)buildInMetadataSet;
  std::string::basic_string[abi:ne180100]<0>(__p, "air.thread_index_in_threadgroup");
  v133 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLCompilerMeshTopologyType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v19, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v133)+ 14) = 8;
  if (SHIBYTE(v132) < 0)
    operator delete(__p[0]);
  v20 = (uint64_t **)buildInMetadataSet;
  std::string::basic_string[abi:ne180100]<0>(__p, "air.threads_per_threadgroup");
  v133 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLCompilerMeshTopologyType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v20, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v133)+ 14) = 9;
  if (SHIBYTE(v132) < 0)
    operator delete(__p[0]);
  v21 = (uint64_t **)buildInMetadataSet;
  std::string::basic_string[abi:ne180100]<0>(__p, "air.threadgroups_per_grid");
  v133 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLCompilerMeshTopologyType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v21, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v133)+ 14) = 11;
  if (SHIBYTE(v132) < 0)
    operator delete(__p[0]);
  v22 = (uint64_t **)buildInMetadataSet;
  std::string::basic_string[abi:ne180100]<0>(__p, "air.threadgroup_position_in_grid");
  v133 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLCompilerMeshTopologyType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v22, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v133)+ 14) = 10;
  if (SHIBYTE(v132) < 0)
    operator delete(__p[0]);
  v23 = (uint64_t **)buildInMetadataSet;
  std::string::basic_string[abi:ne180100]<0>(__p, "air.thread_execution_width");
  v133 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLCompilerMeshTopologyType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v23, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v133)+ 14) = 12;
  if (SHIBYTE(v132) < 0)
    operator delete(__p[0]);
  v24 = (uint64_t **)buildInMetadataSet;
  std::string::basic_string[abi:ne180100]<0>(__p, "air.patch_id");
  v133 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLCompilerMeshTopologyType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v24, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v133)+ 14) = 13;
  if (SHIBYTE(v132) < 0)
    operator delete(__p[0]);
  v25 = (uint64_t **)buildInMetadataSet;
  std::string::basic_string[abi:ne180100]<0>(__p, "air.position_in_patch");
  v133 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLCompilerMeshTopologyType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v25, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v133)+ 14) = 14;
  if (SHIBYTE(v132) < 0)
    operator delete(__p[0]);
  v26 = (uint64_t **)buildInMetadataSet;
  std::string::basic_string[abi:ne180100]<0>(__p, "air.stage_in_grid_origin");
  v133 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLCompilerMeshTopologyType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v26, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v133)+ 14) = 15;
  if (SHIBYTE(v132) < 0)
    operator delete(__p[0]);
  v27 = (uint64_t **)buildInMetadataSet;
  std::string::basic_string[abi:ne180100]<0>(__p, "air.stage_in_grid_size");
  v133 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLCompilerMeshTopologyType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v27, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v133)+ 14) = 16;
  if (SHIBYTE(v132) < 0)
    operator delete(__p[0]);
  v28 = (uint64_t **)buildInMetadataSet;
  std::string::basic_string[abi:ne180100]<0>(__p, "air.thread_index_in_quadgroup");
  v133 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLCompilerMeshTopologyType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v28, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v133)+ 14) = 17;
  if (SHIBYTE(v132) < 0)
    operator delete(__p[0]);
  v29 = (uint64_t **)buildInMetadataSet;
  std::string::basic_string[abi:ne180100]<0>(__p, "air.thread_index_in_simdgroup");
  v133 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLCompilerMeshTopologyType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v29, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v133)+ 14) = 18;
  if (SHIBYTE(v132) < 0)
    operator delete(__p[0]);
  v30 = (uint64_t **)buildInMetadataSet;
  std::string::basic_string[abi:ne180100]<0>(__p, "air.threads_per_quadgroup");
  v133 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLCompilerMeshTopologyType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v30, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v133)+ 14) = 19;
  if (SHIBYTE(v132) < 0)
    operator delete(__p[0]);
  v31 = (uint64_t **)buildInMetadataSet;
  std::string::basic_string[abi:ne180100]<0>(__p, "air.threads_per_simdgroup");
  v133 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLCompilerMeshTopologyType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v31, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v133)+ 14) = 20;
  if (SHIBYTE(v132) < 0)
    operator delete(__p[0]);
  v32 = (uint64_t **)buildInMetadataSet;
  std::string::basic_string[abi:ne180100]<0>(__p, "air.amplification_id");
  v133 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLCompilerMeshTopologyType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v32, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v133)+ 14) = 21;
  if (SHIBYTE(v132) < 0)
    operator delete(__p[0]);
  v33 = (uint64_t **)buildInMetadataSet;
  std::string::basic_string[abi:ne180100]<0>(__p, "air.amplification_count");
  v133 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLCompilerMeshTopologyType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v33, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v133)+ 14) = 22;
  if (SHIBYTE(v132) < 0)
    operator delete(__p[0]);
  v34 = (uint64_t **)buildInMetadataSet;
  std::string::basic_string[abi:ne180100]<0>(__p, "air.mesh_grid_properties");
  v133 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLCompilerMeshTopologyType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v34, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v133)+ 14) = 23;
  if (SHIBYTE(v132) < 0)
    operator delete(__p[0]);
  v35 = (uint64_t **)buildInMetadataSet;
  std::string::basic_string[abi:ne180100]<0>(__p, "air.mesh");
  v133 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLCompilerMeshTopologyType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v35, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v133)+ 14) = 24;
  if (SHIBYTE(v132) < 0)
  {
    operator delete(__p[0]);
    if (a3)
      goto LABEL_50;
  }
  else
  {
LABEL_49:
    if (a3)
    {
LABEL_50:
      v36 = 8 * (*(_QWORD *)(a3 + 8) != 0);
      goto LABEL_53;
    }
  }
  v36 = 8;
LABEL_53:
  v37 = *(_DWORD *)(a2 + 8);
  v38 = *(_DWORD *)a1 & 0xFFFFEFF1;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = a2;
  *(_DWORD *)a1 = v38 | v36;
  String = (_QWORD *)llvm::MDString::getString(*(llvm::MDString **)(a2
                                                                  - 8 * *(unsigned int *)(a2 + 8)
                                                                  + 8 * (a6 ^ 1u)));
  v41 = String;
  v42 = v40;
  if (a6)
    v43 = 1;
  else
    v43 = 2;
  v44 = v40 - 8;
  switch(v40)
  {
    case 8uLL:
LABEL_57:
      if (memcmp(v41, "air.mesh", v42))
        goto LABEL_132;
      *(_DWORD *)a1 |= 4u;
      *(_DWORD *)(a1 + 12) = 24;
      parseMeshStruct(a1, *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * v43));
      v45 = 0;
      v46 = 16;
      break;
    case 9uLL:
LABEL_82:
      if (!memcmp(v41, "air.byval", v42))
        goto LABEL_278;
      goto LABEL_132;
    case 0xAuLL:
LABEL_84:
      if (*v41 != 0x666675622E726961 || *((_WORD *)v41 + 4) != 29285)
        goto LABEL_132;
      goto LABEL_279;
    case 0xBuLL:
LABEL_90:
      if (!memcmp(v41, "air.texture", v42))
      {
        v45 = 0;
        v46 = 1;
      }
      else if (*v41 == 0x706D61732E726961 && *(_QWORD *)((char *)v41 + 3) == 0x72656C706D61732ELL)
      {
        v45 = 0;
        v46 = 2;
      }
      else
      {
        if (memcmp(v41, "air.payload", v42))
          goto LABEL_132;
        v45 = 8;
        v46 = 15;
      }
      break;
    case 0xCuLL:
LABEL_97:
      if (!memcmp(v41, "air.constant", v42))
      {
LABEL_278:
        v45 = 4;
        v46 = 9;
        break;
      }
      if (*v41 != 0x676174732E726961 || *((_DWORD *)v41 + 2) != 1852399461)
        goto LABEL_132;
LABEL_103:
      v45 = 0;
      v54 = *(_DWORD *)a1 | 2;
LABEL_104:
      *(_DWORD *)a1 = v54;
      goto LABEL_139;
    case 0xEuLL:
LABEL_105:
      if (memcmp(v41, "air.imageblock", v42))
        goto LABEL_132;
      v55 = (_QWORD *)llvm::MDString::getString(*(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * v43));
      if (v56 != 8)
        goto LABEL_300;
      v43 = a6 ^ 1 | 2;
      if (*v55 == 0x746963696C706D69)
      {
        v45 = 0;
        *(_DWORD *)(a1 + 184) = 0;
      }
      else
      {
        if (*v55 != 0x746963696C707865)
LABEL_300:
          abort();
        v45 = 0;
        *(_DWORD *)(a1 + 184) = 1;
      }
      v46 = 5;
      break;
    case 0xFuLL:
      if (*String != 0x637461702E726961 || *(_QWORD *)((char *)String + 7) != 0x7475706E695F6863)
        goto LABEL_132;
      *(_DWORD *)a1 |= 0x2000u;
      goto LABEL_103;
    case 0x10uLL:
      if (*String != 0x747265762E726961 || String[1] != 0x7475706E695F7865)
        goto LABEL_132;
      goto LABEL_103;
    case 0x12uLL:
LABEL_110:
      if (!memcmp(v41, "air.command_buffer", v42))
        goto LABEL_124;
      if (memcmp(v41, "air.fragment_input", v42))
        goto LABEL_132;
      v45 = 0;
      v54 = *(_DWORD *)a1 | 0x8002;
      goto LABEL_104;
    case 0x13uLL:
LABEL_113:
      if (!memcmp(v41, "air.indirect_buffer", v42))
      {
LABEL_279:
        v46 = 0;
        v45 = 1;
      }
      else
      {
        if (memcmp(v41, "air.imageblock_data", v42))
          goto LABEL_132;
        v45 = 0;
        v46 = 4;
      }
      break;
    case 0x14uLL:
      if (*String == 0x6C706D612E726961 && String[1] == 0x6F69746163696669 && *((_DWORD *)String + 4) == 1684627310)
        goto LABEL_81;
LABEL_78:
      if (!memcmp(v41, "air.function_pointer", v42))
        goto LABEL_300;
      goto LABEL_132;
    case 0x15uLL:
LABEL_116:
      if (memcmp(v41, "air.indirect_constant", v42))
        goto LABEL_132;
      v45 = 2;
      v46 = 3;
      break;
    case 0x17uLL:
      if (!memcmp(String, "air.amplification_count", v40))
      {
LABEL_81:
        *(_DWORD *)a1 |= 8u;
        switch(v44)
        {
          case 0uLL:
            goto LABEL_57;
          case 1uLL:
            goto LABEL_82;
          case 2uLL:
            goto LABEL_84;
          case 3uLL:
            goto LABEL_90;
          case 4uLL:
            goto LABEL_97;
          case 6uLL:
            goto LABEL_105;
          case 0xAuLL:
            goto LABEL_110;
          case 0xBuLL:
            goto LABEL_113;
          case 0xCuLL:
            goto LABEL_78;
          case 0xDuLL:
            goto LABEL_116;
          case 0x11uLL:
            goto LABEL_118;
          case 0x12uLL:
            goto LABEL_120;
          case 0x13uLL:
            goto LABEL_123;
          case 0x15uLL:
            goto LABEL_125;
          case 0x17uLL:
            goto LABEL_127;
          case 0x1BuLL:
            goto LABEL_129;
          case 0x1CuLL:
            goto LABEL_131;
          default:
            goto LABEL_132;
        }
      }
      goto LABEL_132;
    case 0x19uLL:
LABEL_118:
      if (memcmp(v41, "air.render_pipeline_state", v42))
        goto LABEL_132;
      v45 = 0;
      v46 = 7;
      break;
    case 0x1AuLL:
LABEL_120:
      if (!memcmp(v41, "air.compute_pipeline_state", v42))
      {
        v45 = 0;
        v46 = 6;
      }
      else if (!memcmp(v41, "air.visible_function_table", v42))
      {
        v45 = 0;
        v46 = 11;
      }
      else
      {
LABEL_132:
        v57 = buildInMetadataSet;
        if (v41)
        {
          std::string::basic_string[abi:ne180100](__p, v41, v42);
        }
        else
        {
          __p[0] = 0;
          __p[1] = 0;
          v132 = 0;
        }
        v58 = std::__tree<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>>>::find<std::string>(v57, (const void **)__p);
        if (SHIBYTE(v132) < 0)
          operator delete(__p[0]);
        v45 = 0;
        if (buildInMetadataSet + 8 != v58)
        {
          *(_DWORD *)a1 |= 4u;
          *(_DWORD *)(a1 + 12) = *(_DWORD *)(v58 + 56);
        }
LABEL_139:
        v46 = 17;
      }
      break;
    case 0x1BuLL:
LABEL_123:
      if (memcmp(v41, "air.indirect_command_buffer", v42))
        goto LABEL_132;
LABEL_124:
      v45 = 0;
      v46 = 8;
      break;
    case 0x1DuLL:
LABEL_125:
      if (memcmp(v41, "air.patch_control_point_input", v42))
        goto LABEL_132;
      v45 = 0;
      *(_QWORD *)(a1 + 96) = a2;
      *(_DWORD *)a1 |= 0x4002u;
      v46 = 17;
      goto LABEL_142;
    case 0x1FuLL:
LABEL_127:
      if (memcmp(v41, "air.intersection_function_table", v42))
        goto LABEL_132;
      v45 = 0;
      v46 = 12;
      break;
    case 0x23uLL:
LABEL_129:
      if (memcmp(v41, "air.instance_acceleration_structure", v42))
        goto LABEL_132;
      v45 = 0;
      v46 = 14;
      break;
    case 0x24uLL:
LABEL_131:
      if (memcmp(v41, "air.primitive_acceleration_structure", v42))
        goto LABEL_132;
      v45 = 0;
      v46 = 13;
      break;
    default:
      goto LABEL_132;
  }
  if (*(_QWORD *)(a1 + 96))
  {
    a2 = *(_QWORD *)(a1 + 96);
LABEL_142:
    v59 = isPatchControlPointInputUnused(a2);
    v60 = (*(_DWORD *)(*(_QWORD *)(a1 + 96) + 8) - v59);
    if (v59)
      *(_DWORD *)a1 &= ~8u;
    if (v43 < v60)
    {
      v61 = v43;
      do
      {
        v62 = *(_QWORD *)(*(_QWORD *)(a1 + 96) - 8 * *(unsigned int *)(*(_QWORD *)(a1 + 96) + 8) + 8 * v61);
        v63 = *(unsigned int *)(v62 + 8);
        v64 = v62;
        if ((_DWORD)v63)
        {
          do
          {
            v65 = *(llvm::MDString **)(v64 - 8 * *(unsigned int *)(v62 + 8));
            if (v65 && !*(_BYTE *)v65)
              llvm::MDString::getString(v65);
            v64 += 8;
            --v63;
          }
          while (v63);
        }
        ++v61;
      }
      while (v61 != v60);
    }
LABEL_234:
    v66 = 0;
    v106 = 0;
    v107 = 0;
    v108 = 0;
    if (!v45)
      goto LABEL_250;
    goto LABEL_235;
  }
  if (v43 >= v37)
    goto LABEL_234;
  v125 = 0;
  v66 = 0;
  v124 = 0;
  do
  {
    v67 = *(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * v43);
    v68 = v43 + 1;
    if (!*(_BYTE *)v67)
    {
      v69 = (_DWORD *)llvm::MDString::getString(v67);
      v71 = v69;
      v72 = v70;
      switch(v70)
      {
        case 8uLL:
          v73 = "air.read";
          goto LABEL_176;
        case 9uLL:
          v77 = memcmp(v69, "air.write", v70);
          v78 = v125;
          if (!v77)
            v78 = 1;
          goto LABEL_213;
        case 0xAuLL:
          v73 = "air.sample";
          goto LABEL_176;
        case 0xBuLL:
        case 0xFuLL:
        case 0x10uLL:
        case 0x13uLL:
        case 0x16uLL:
        case 0x19uLL:
        case 0x1AuLL:
        case 0x1BuLL:
        case 0x1CuLL:
          break;
        case 0xCuLL:
          if (*(_QWORD *)v69 == 0x5F6772612E726961 && v69[2] == 1701667182)
          {
            v80 = *(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * v68);
            v68 = v43 + 2;
            *(_QWORD *)(a1 + 16) = llvm::MDString::getString(v80);
            *(_QWORD *)(a1 + 24) = v81;
          }
          break;
        case 0xDuLL:
          v73 = "air.read_only";
LABEL_176:
          if (!memcmp(v69, v73, v72))
            v66 = 1;
          break;
        case 0xEuLL:
          if (!memcmp(v69, "air.write_only", v70))
          {
            v78 = 1;
LABEL_213:
            v125 = v78;
            break;
          }
          if (*v71 == 0x646165722E726961 && *(_QWORD *)((char *)v71 + 6) == 0x65746972775F6461)
          {
            HIDWORD(v124) = 1;
            break;
          }
          if (memcmp(v71, "air.arg_unused", v72))
            break;
          v83 = *(_DWORD *)a1 & 0xFFFFFFF7;
          goto LABEL_233;
        case 0x11uLL:
          if (!memcmp(v69, "air.arg_type_name", v70))
          {
            v96 = *(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * v68);
            v68 = v43 + 2;
            *(_QWORD *)(a1 + 32) = llvm::MDString::getString(v96);
            *(_QWORD *)(a1 + 40) = v97;
          }
          else if (!memcmp(v71, "air.arg_type_size", v72))
          {
            v101 = *(_QWORD *)(*(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * v68) + 128);
            v102 = (_QWORD *)(v101 + 24);
            if (*(_DWORD *)(v101 + 32) >= 0x41u)
              v102 = (_QWORD *)*v102;
            *(_DWORD *)(a1 + 56) = *v102;
LABEL_230:
            v68 = v43 + 2;
          }
          else if (!memcmp(v71, "air.address_space", v72))
          {
            v84 = *(_QWORD *)(*(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * v68) + 128);
            v85 = (_QWORD *)(v84 + 24);
            if (*(_DWORD *)(v84 + 32) >= 0x41u)
              v85 = (_QWORD *)*v85;
            LODWORD(v124) = *(_DWORD *)v85;
          }
          break;
        case 0x12uLL:
          if (!memcmp(v69, "air.location_index", v70))
          {
            v86 = a2 - 8 * *(unsigned int *)(a2 + 8);
            v87 = *(_QWORD *)(*(_QWORD *)(v86 + 8 * v68) + 128);
            if (*(_BYTE *)(v87 + 16) == 16)
            {
              v88 = (_QWORD *)(v87 + 24);
              if (*(_DWORD *)(v87 + 32) >= 0x41u)
                v88 = (_QWORD *)*v88;
              v89 = *(_DWORD *)v88;
            }
            else
            {
              v89 = -1;
            }
            *(_DWORD *)(a1 + 4) = v89;
            v103 = *(_QWORD *)(*(_QWORD *)(v86 + 8 * (v43 + 2)) + 128);
            if (*(_BYTE *)(v103 + 16) == 16)
            {
              v104 = (_QWORD *)(v103 + 24);
              if (*(_DWORD *)(v103 + 32) >= 0x41u)
                v104 = (_QWORD *)*v104;
              v105 = *(_DWORD *)v104;
            }
            else
            {
              v105 = -1;
            }
            *(_DWORD *)(a1 + 8) = v105;
            v68 = v43 + 3;
          }
          break;
        case 0x14uLL:
          if (memcmp(v69, "air.struct_type_info", v70))
            break;
          v130 = *(void **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * v68);
          __p[0] = v130;
          v68 = v43 + 2;
          *(_QWORD *)(a1 + 72) = v130;
          v133 = 0;
          if ((llvm::DenseMapBase<llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>,llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::LookupBucketFor<llvm::CallGraphNode *>(a7, __p, &v133) & 1) != 0&& (v90 = v133[1]) != 0)
          {
            *(_QWORD *)(a1 + 160) = v90;
          }
          else
          {
            v98 = *(_QWORD *)(a1 + 160);
            llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>,llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::FindAndConstruct(a7, &v130)[1] = v98;
            parseStructTypeMetadata((uint64_t)v130, a5, a4, *(_QWORD *)(a1 + 160), (uint64_t)a7);
            NonStructMember = findNonStructMember(*(_QWORD **)(a1 + 160));
            if (NonStructMember)
              v100 = (*(_QWORD *)(NonStructMember + 56) != 0) << 12;
            else
              v100 = 0;
            v83 = *(_DWORD *)a1 & 0xFFFFEFFF | v100;
LABEL_233:
            *(_DWORD *)a1 = v83;
          }
          break;
        case 0x15uLL:
          if (!memcmp(v69, "air.imageblock_master", v70))
          {
            v91 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * v68);
            v68 = v43 + 2;
            *(_QWORD *)(a1 + 192) = v91;
            parseStructTypeMetadata(v91, a5, a4, a1 + 200, (uint64_t)a7);
          }
          break;
        case 0x17uLL:
          if (memcmp(v69, "air.arg_type_align_size", v70))
            break;
          v92 = *(_QWORD *)(*(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * v68) + 128);
          v93 = (_QWORD *)(v92 + 24);
          if (*(_DWORD *)(v92 + 32) >= 0x41u)
            v93 = (_QWORD *)*v93;
          *(_DWORD *)(a1 + 52) = *v93;
          goto LABEL_230;
        case 0x18uLL:
          if (memcmp(v69, "air.imageblock_data_size", v70))
            break;
          v94 = *(_QWORD *)(*(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * v68) + 128);
          v95 = (_QWORD *)(v94 + 24);
          if (*(_DWORD *)(v94 + 32) >= 0x41u)
            v95 = (_QWORD *)*v95;
          *(_DWORD *)(a1 + 188) = *v95;
          goto LABEL_230;
        case 0x1DuLL:
          if (!memcmp(v69, "air.alias_implicit_imageblock", v70))
            *(_BYTE *)(a1 + 224) = 1;
          break;
        default:
          if (v70 != 43 || memcmp(v69, "air.alias_implicit_imageblock_render_target", 0x2BuLL))
            break;
          v74 = *(_QWORD *)(*(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * v68) + 128);
          if (*(_BYTE *)(v74 + 16) == 16)
          {
            v75 = (_QWORD *)(v74 + 24);
            if (*(_DWORD *)(v74 + 32) >= 0x41u)
              v75 = (_QWORD *)*v75;
            v76 = *(_DWORD *)v75;
          }
          else
          {
            v76 = -1;
          }
          *(_DWORD *)(a1 + 228) = v76;
          goto LABEL_230;
      }
    }
    v43 = v68;
  }
  while (v68 < v37);
  v107 = HIDWORD(v124);
  v106 = v125;
  v108 = v124;
  if (v45)
  {
LABEL_235:
    if (*(_QWORD *)(a1 + 72))
    {
      *(_DWORD *)(a1 + 48) = 1;
    }
    else
    {
      LODWORD(__p[0]) = 0;
      LODWORD(v133) = 0;
      v109 = *(const void **)(a1 + 32);
      if (v109)
      {
        v110 = strlen(*(const char **)(a1 + 32));
        v111 = dataTypeFromString(v109, v110, __p, &v133);
      }
      else
      {
        v111 = 0;
      }
      *(_DWORD *)(a1 + 48) = v111;
      if (!*(_DWORD *)(a1 + 52))
        *(_DWORD *)(a1 + 52) = __p[0];
      if (!*(_DWORD *)(a1 + 56))
        *(_DWORD *)(a1 + 56) = (_DWORD)v133;
      v112 = *(const void **)(a1 + 32);
      if (v112)
      {
        v113 = strlen(*(const char **)(a1 + 32));
        v114 = pixelFormatAndALUTypeFromString(v112, v113);
        v115 = HIDWORD(v114);
      }
      else
      {
        LODWORD(v114) = 0;
        LODWORD(v115) = 0;
      }
      *(_DWORD *)(a1 + 232) = v114;
      *(_DWORD *)(a1 + 236) = v115;
    }
  }
LABEL_250:
  v116 = *(_DWORD *)a1;
  v117 = *(_DWORD *)a1 & 0xFFFFF00E;
  *(_DWORD *)a1 = v117 | 1;
  switch(v46)
  {
    case 0:
      if (v108 == 2)
      {
        v121 = 17;
      }
      else
      {
        if (v108 == 3)
        {
          v118 = 561;
          goto LABEL_271;
        }
        v121 = 33;
      }
      v122 = v117 | v121;
      *(_DWORD *)a1 = v122;
      v123 = v122 | 0x400;
      if (!v106)
        v123 = v122;
      v120 = v122 | 0x200;
      if (!v107)
        v120 = v123;
      goto LABEL_272;
    case 1:
      *(_DWORD *)a1 = v117 | 0x41;
      if (v107)
      {
        v118 = 577;
        goto LABEL_271;
      }
      if (v66)
        return;
      v118 = 1089;
      goto LABEL_271;
    case 2:
      v118 = 81;
      goto LABEL_271;
    case 3:
      v119 = ((a4 & 7) << 9) | 0x81;
      goto LABEL_277;
    case 4:
      v118 = 145;
      goto LABEL_271;
    case 5:
      v118 = 161;
      goto LABEL_271;
    case 6:
      v118 = 177;
      goto LABEL_271;
    case 7:
      v118 = 193;
      goto LABEL_271;
    case 8:
      v118 = 209;
      goto LABEL_271;
    case 9:
      v118 = 225;
      goto LABEL_271;
    case 11:
      v118 = 257;
      goto LABEL_271;
    case 12:
      v118 = 273;
      goto LABEL_271;
    case 13:
      v118 = 289;
      goto LABEL_271;
    case 14:
      v118 = 305;
      goto LABEL_271;
    case 15:
      *(_DWORD *)a1 = v117 | 0x151;
      if (v107)
        goto LABEL_269;
      if (v106)
      {
        v118 = 1361;
      }
      else
      {
        if (v66 || a8 != 6)
          return;
LABEL_269:
        v118 = 849;
      }
LABEL_271:
      v120 = v117 | v118;
LABEL_272:
      *(_DWORD *)a1 = v120;
      return;
    case 16:
      v118 = 1376;
      goto LABEL_271;
    case 17:
      if ((v116 & 4) != 0)
        v119 = 96;
      else
        v119 = 112;
LABEL_277:
      v120 = v119 | v117;
      goto LABEL_272;
    default:
      return;
  }
}

void sub_240FEAB10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void parseMeshStruct(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  void *String;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  void *__p[2];
  uint64_t v22;
  void **v23;

  if (!buildInMeshTopologySet)
  {
    v4 = operator new();
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)v4 = v4 + 8;
    buildInMeshTopologySet = v4;
    std::string::basic_string[abi:ne180100]<0>(__p, "air.point");
    v23 = __p;
    *((_DWORD *)std::__tree<std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLCompilerMeshTopologyType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v4, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v23)+ 14) = 1;
    if (SHIBYTE(v22) < 0)
      operator delete(__p[0]);
    v5 = (uint64_t **)buildInMeshTopologySet;
    std::string::basic_string[abi:ne180100]<0>(__p, "air.line");
    v23 = __p;
    *((_DWORD *)std::__tree<std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLCompilerMeshTopologyType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v5, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v23)+ 14) = 2;
    if (SHIBYTE(v22) < 0)
      operator delete(__p[0]);
    v6 = (uint64_t **)buildInMeshTopologySet;
    std::string::basic_string[abi:ne180100]<0>(__p, "air.triangle");
    v23 = __p;
    *((_DWORD *)std::__tree<std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLCompilerMeshTopologyType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v23)+ 14) = 3;
    if (SHIBYTE(v22) < 0)
      operator delete(__p[0]);
  }
  llvm::MDString::getString(*(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8)));
  v7 = a2 - 8 * *(unsigned int *)(a2 + 8);
  v8 = *(_QWORD *)(v7 + 8);
  v9 = *(_QWORD *)(v7 + 16);
  *(_QWORD *)(a1 + 80) = v8;
  *(_QWORD *)(a1 + 88) = v9;
  addMeshStructMembers(v8, *(uint64_t **)(a1 + 168));
  addMeshStructMembers(v9, *(uint64_t **)(a1 + 176));
  v10 = a2 - 8 * *(unsigned int *)(a2 + 8);
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 24) + 128);
  if (*(_BYTE *)(v11 + 16) == 16)
  {
    v12 = (_QWORD *)(v11 + 24);
    if (*(_DWORD *)(v11 + 32) >= 0x41u)
      v12 = (_QWORD *)*v12;
    v13 = *(_DWORD *)v12;
  }
  else
  {
    v13 = -1;
  }
  *(_DWORD *)(a1 + 60) = v13;
  v14 = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 128);
  if (*(_BYTE *)(v14 + 16) == 16)
  {
    v15 = (_QWORD *)(v14 + 24);
    if (*(_DWORD *)(v14 + 32) >= 0x41u)
      v15 = (_QWORD *)*v15;
    v16 = *(_DWORD *)v15;
  }
  else
  {
    v16 = -1;
  }
  *(_DWORD *)(a1 + 64) = v16;
  String = (void *)llvm::MDString::getString(*(llvm::MDString **)(v10 + 40));
  v19 = buildInMeshTopologySet;
  if (String)
  {
    std::string::basic_string[abi:ne180100](__p, String, v18);
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    v22 = 0;
  }
  v20 = std::__tree<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>>>::find<std::string>(v19, (const void **)__p);
  if (SHIBYTE(v22) < 0)
    operator delete(__p[0]);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(v20 + 56);
}

void sub_240FEADF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *parseStructTypeMetadata(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  _QWORD *result;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  llvm::MDString *v15;
  uint64_t v16;
  uint64_t String;
  uint64_t v18;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  llvm::MDString *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  _BYTE v62[24];
  _BYTE *v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v61 = a3;
  result = operator new(0x28uLL);
  *result = &off_25111F0A8;
  result[1] = a2;
  result[2] = &v61;
  result[3] = a5;
  result[4] = a4;
  v63 = result;
  v10 = *(_DWORD *)(a1 + 8);
  if (!v10)
  {
LABEL_76:
    v55 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v55))();
  }
  v11 = 0;
  v12 = 0;
  do
  {
    v13 = *(unsigned int *)(a1 + 8);
    v14 = v11;
    v15 = *(llvm::MDString **)(a1 - 8 * v13 + 8 * v11);
    if (*(_BYTE *)v15)
    {
LABEL_4:
      v16 = 0;
      goto LABEL_16;
    }
    String = llvm::MDString::getString(v15);
    if (v18 == 20)
    {
      v20 = *(_QWORD *)String == 0x757274732E726961
         && *(_QWORD *)(String + 8) == 0x5F657079745F7463
         && *(_DWORD *)(String + 16) == 1868983913;
      v13 = *(unsigned int *)(a1 + 8);
      if (!v20)
        goto LABEL_4;
      v16 = *(_QWORD *)(a1 - 8 * v13 + 8 * (v11 + 1));
      v14 = v11 + 2;
      v11 += 2;
    }
    else
    {
      v16 = 0;
      v13 = *(unsigned int *)(a1 + 8);
    }
LABEL_16:
    v21 = a1 - 8 * v13;
    v22 = *(_QWORD *)(*(_QWORD *)(v21 + 8 * v14) + 128);
    v23 = (_QWORD *)(v22 + 24);
    if (*(_DWORD *)(v22 + 32) >= 0x41u)
      v23 = (_QWORD *)*v23;
    v24 = *(_QWORD *)(*(_QWORD *)(v21 + 8 * (v11 + 1)) + 128);
    v25 = (_QWORD *)(v24 + 24);
    if (*(_DWORD *)(v24 + 32) >= 0x41u)
      v25 = (_QWORD *)*v25;
    v26 = *(_QWORD *)(*(_QWORD *)(v21 + 8 * (v11 + 2)) + 128);
    v27 = (_QWORD *)(v26 + 24);
    if (*(_DWORD *)(v26 + 32) >= 0x41u)
      v27 = (_QWORD *)*v27;
    v28 = *(_DWORD *)v23;
    v29 = *(_DWORD *)v25;
    v60 = *(_DWORD *)v27;
    v59 = llvm::MDString::getString(*(llvm::MDString **)(v21 + 8 * (v11 + 3)));
    v31 = v30;
    v33 = llvm::MDString::getString(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8 * (v11 + 4)));
    v35 = v34;
    v56 = v29;
    v57 = v28;
    v58 = v16;
    v11 += 5;
    if (v11 >= v10)
    {
      v36 = 0;
      v39 = -1;
      v38 = -1;
    }
    else
    {
      v36 = 0;
      v37 = *(unsigned int *)(a1 + 8);
      v38 = -1;
      v39 = -1;
      do
      {
        v40 = *(llvm::MDString **)(a1 - 8 * v37 + 8 * v11);
        if (*(_BYTE *)v40)
          break;
        v41 = llvm::MDString::getString(v40);
        switch(v42)
        {
          case 17:
            if (*(_QWORD *)v41 != 0x646E65722E726961
              || *(_QWORD *)(v41 + 8) != 0x65677261745F7265
              || *(_BYTE *)(v41 + 16) != 116)
            {
              goto LABEL_73;
            }
            v37 = *(unsigned int *)(a1 + 8);
            v45 = *(_QWORD *)(*(_QWORD *)(a1 - 8 * v37 + 8 * (v11 + 1)) + 128);
            if (*(_BYTE *)(v45 + 16) == 16)
            {
              v46 = (_QWORD *)(v45 + 24);
              if (*(_DWORD *)(v45 + 32) >= 0x41u)
                v46 = (_QWORD *)*v46;
              v38 = *(_DWORD *)v46;
            }
            else
            {
              v38 = -1;
            }
            break;
          case 20:
            if (*(_QWORD *)v41 != 0x757274732E726961
              || *(_QWORD *)(v41 + 8) != 0x5F657079745F7463
              || *(_DWORD *)(v41 + 16) != 1868983913)
            {
              goto LABEL_73;
            }
            goto LABEL_64;
          case 21:
            if (*(_QWORD *)v41 != 0x69646E692E726961
              || *(_QWORD *)(v41 + 8) != 0x6772615F74636572
              || *(_QWORD *)(v41 + 13) != 0x746E656D75677261)
            {
              goto LABEL_73;
            }
            v37 = *(unsigned int *)(a1 + 8);
            v36 = *(_QWORD *)(a1 - 8 * v37 + 8 * (v11 + 1));
            break;
          case 22:
            if (*(_QWORD *)v41 != 0x747361722E726961
              || *(_QWORD *)(v41 + 8) != 0x726564726F5F7265
              || *(_QWORD *)(v41 + 14) != 0x70756F72675F7265)
            {
              goto LABEL_73;
            }
            v37 = *(unsigned int *)(a1 + 8);
            v51 = *(_QWORD *)(*(_QWORD *)(a1 - 8 * v37 + 8 * (v11 + 1)) + 128);
            if (*(_BYTE *)(v51 + 16) == 16)
            {
              v52 = (_QWORD *)(v51 + 24);
              if (*(_DWORD *)(v51 + 32) >= 0x41u)
                v52 = (_QWORD *)*v52;
              v39 = *(_DWORD *)v52;
            }
            else
            {
              v39 = -1;
            }
            break;
          default:
LABEL_73:
            abort();
        }
        v11 += 2;
      }
      while (v11 < v10);
    }
LABEL_64:
    std::function<void ()(unsigned int,unsigned int,unsigned int,unsigned int,llvm::StringRef,llvm::StringRef,llvm::Metadata *,llvm::Metadata *,unsigned int,unsigned int)>::operator()((uint64_t)v62, v12++, v57, v56, v60, v59, v31, v32, v33, v35, v58, v36, __SPAIR64__(v39, v38));
  }
  while (v11 < v10);
  result = v63;
  if (v63 == v62)
  {
    v55 = 4;
    result = v62;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v55))();
  }
  if (v63)
    goto LABEL_76;
  return result;
}

void sub_240FEB288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v22;
  uint64_t v23;

  v22 = a21;
  if (a21 == &a18)
  {
    v23 = 4;
    v22 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t vertexFetchBuiltInInfo(uint64_t a1, uint64_t a2)
{
  const char *v4;
  size_t v5;
  uint64_t result;
  int v7;

  v4 = *(const char **)(a2 + 32);
  v5 = strlen(v4);
  LODWORD(v4) = dataTypeFromString(v4, v5);
  *(_DWORD *)(a1 + 4) = MTLDataTypeGetComponentType((int)v4);
  result = MTLDataTypeGetComponentCount((int)v4);
  *(_BYTE *)(a1 + 1) = result;
  v7 = *(_DWORD *)(a2 + 12) - 1;
  if (v7 <= 0x15 && ((0x30F01Bu >> v7) & 1) != 0)
    *(_BYTE *)a1 = byte_24105A593[v7];
  return result;
}

uint64_t MTLDataTypeGetComponentType(int a1)
{
  if ((a1 - 3) > 0x55)
    return 0;
  else
    return dword_24105A5AC[a1 - 3];
}

uint64_t MTLDataTypeGetComponentCount(int a1)
{
  if ((a1 - 3) > 0x55)
    return 0;
  else
    return byte_24105A704[a1 - 3];
}

uint64_t dataTypeFromMetadata(unsigned int a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t i;
  llvm::MDString *v6;
  uint64_t String;
  uint64_t v8;
  BOOL v9;
  const char *v12;
  size_t v13;

  v2 = *(_DWORD *)(a2 + 8);
  v3 = v2 - a1;
  if (v2 <= a1)
    return 0;
  for (i = a1; ; ++i)
  {
    v6 = *(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * i);
    if (!*(_BYTE *)v6)
    {
      String = llvm::MDString::getString(v6);
      if (v8 == 17)
      {
        v9 = *(_QWORD *)String == 0x5F6772612E726961 && *(_QWORD *)(String + 8) == 0x6D616E5F65707974;
        if (v9 && *(_BYTE *)(String + 16) == 101)
          break;
      }
    }
    if (!--v3)
      return 0;
  }
  v12 = (const char *)llvm::MDString::getString(*(llvm::MDString **)(a2
                                                                   - 8 * *(unsigned int *)(a2 + 8)
                                                                   + 8 * (i + 1)));
  v13 = strlen(v12);
  return dataTypeFromString(v12, v13);
}

uint64_t MTLDataTypeGetSignedType(uint64_t result)
{
  int v1;

  v1 = result - 33;
  if ((result - 33) <= 0x17 && ((0xFF0F0Fu >> v1) & 1) != 0)
    return dword_24105A75C[v1];
  return result;
}

uint64_t MTLDataTypeGetVectorDataType(int a1, int a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  unsigned int v13;

  v2 = a2 - 1;
  if (a1 <= 40)
  {
    v3 = a2 + 28;
    if (v2 >= 4)
      v3 = 0;
    v10 = a2 + 32;
    if (v2 >= 4)
      v10 = 0;
    v11 = a2 + 36;
    if (v2 >= 4)
      v11 = 0;
    if (a1 != 37)
      v11 = 0;
    if (a1 != 33)
      v10 = v11;
    if (a1 != 29)
      v3 = v10;
    v12 = v2 >= 4;
    if (v2 >= 4)
      v8 = 0;
    else
      v8 = a2 + 2;
    v13 = a2 + 15;
    if (v12)
      v13 = 0;
    if (a1 != 16)
      v13 = 0;
    if (a1 != 3)
      v8 = v13;
    v9 = a1 <= 28;
  }
  else
  {
    v3 = a2 + 52;
    if (v2 >= 4)
      v3 = 0;
    v4 = a2 + 80;
    if (v2 >= 4)
      v4 = 0;
    v5 = a2 + 84;
    if (v2 >= 4)
      v5 = 0;
    if (a1 != 85)
      v5 = 0;
    if (a1 != 81)
      v4 = v5;
    if (a1 != 53)
      v3 = v4;
    v6 = a2 + 40;
    if (v2 >= 4)
      v6 = 0;
    v7 = a2 + 44;
    if (v2 < 4)
    {
      v8 = a2 + 48;
    }
    else
    {
      v7 = 0;
      v8 = 0;
    }
    if (a1 != 49)
      v8 = 0;
    if (a1 == 45)
      v8 = v7;
    if (a1 == 41)
      v8 = v6;
    v9 = a1 <= 52;
  }
  if (v9)
    return v8;
  else
    return v3;
}

const char *MTLDataTypeGetShaderTypeName(int a1, int a2)
{
  const char *result;

  switch(a2)
  {
    case 1:
      if (a1 <= 40)
      {
        if (a1 <= 28)
        {
          if (a1 == 3)
          {
            result = "float";
          }
          else
          {
            if (a1 != 16)
              goto LABEL_74;
            result = "half";
          }
        }
        else
        {
          switch(a1)
          {
            case 29:
              result = "int";
              break;
            case 33:
              result = "uint";
              break;
            case 37:
              result = "short";
              break;
            default:
              goto LABEL_74;
          }
        }
      }
      else if (a1 > 52)
      {
        switch(a1)
        {
          case '5':
            result = "BOOL";
            break;
          case 'Q':
            result = "long";
            break;
          case 'U':
            result = "ulong";
            break;
          default:
            goto LABEL_74;
        }
      }
      else
      {
        switch(a1)
        {
          case ')':
            result = "ushort";
            break;
          case '-':
            result = "char";
            break;
          case '1':
            result = "uchar";
            break;
          default:
            goto LABEL_74;
        }
      }
      break;
    case 2:
      if (a1 <= 40)
      {
        if (a1 <= 28)
        {
          if (a1 == 3)
          {
            result = "float2";
          }
          else
          {
            if (a1 != 16)
              goto LABEL_74;
            result = "half2";
          }
        }
        else
        {
          switch(a1)
          {
            case 29:
              result = "int2";
              break;
            case 33:
              result = "uint2";
              break;
            case 37:
              result = "short2";
              break;
            default:
              goto LABEL_74;
          }
        }
      }
      else if (a1 > 52)
      {
        switch(a1)
        {
          case '5':
            result = "BOOL2";
            break;
          case 'Q':
            result = "long2";
            break;
          case 'U':
            result = "ulong2";
            break;
          default:
            goto LABEL_74;
        }
      }
      else
      {
        switch(a1)
        {
          case ')':
            result = "ushort2";
            break;
          case '-':
            result = "char2";
            break;
          case '1':
            result = "uchar2";
            break;
          default:
            goto LABEL_74;
        }
      }
      break;
    case 3:
      if (a1 <= 40)
      {
        if (a1 <= 28)
        {
          if (a1 == 3)
          {
            result = "float3";
          }
          else
          {
            if (a1 != 16)
              goto LABEL_74;
            result = "half3";
          }
        }
        else
        {
          switch(a1)
          {
            case 29:
              result = "int3";
              break;
            case 33:
              result = "uint3";
              break;
            case 37:
              result = "short3";
              break;
            default:
              goto LABEL_74;
          }
        }
      }
      else if (a1 > 52)
      {
        switch(a1)
        {
          case '5':
            result = "BOOL3";
            break;
          case 'Q':
            result = "long3";
            break;
          case 'U':
            result = "ulong3";
            break;
          default:
            goto LABEL_74;
        }
      }
      else
      {
        switch(a1)
        {
          case ')':
            result = "ushort3";
            break;
          case '-':
            result = "char3";
            break;
          case '1':
            result = "uchar3";
            break;
          default:
            goto LABEL_74;
        }
      }
      break;
    case 4:
      if (a1 <= 40)
      {
        if (a1 <= 28)
        {
          if (a1 == 3)
          {
            result = "float4";
          }
          else
          {
            if (a1 != 16)
              goto LABEL_74;
            result = "half4";
          }
        }
        else
        {
          switch(a1)
          {
            case 29:
              result = "int4";
              break;
            case 33:
              result = "uint4";
              break;
            case 37:
              result = "short4";
              break;
            default:
              goto LABEL_74;
          }
        }
      }
      else if (a1 > 52)
      {
        switch(a1)
        {
          case '5':
            result = "BOOL4";
            break;
          case 'Q':
            result = "long4";
            break;
          case 'U':
            result = "ulong4";
            break;
          default:
            goto LABEL_74;
        }
      }
      else
      {
        switch(a1)
        {
          case ')':
            result = "ushort4";
            break;
          case '-':
            result = "char4";
            break;
          case '1':
            result = "uchar4";
            break;
          default:
            goto LABEL_74;
        }
      }
      break;
    default:
LABEL_74:
      result = (const char *)&unk_24105C402;
      break;
  }
  return result;
}

_BYTE *serializeFragmentLinkingInfoInternal(uint64_t a1, char a2, char a3, char a4, char a5, uint64_t *a6, unint64_t *a7)
{
  _BYTE *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  size_t v22;
  unint64_t v23;
  uint64_t v24;
  size_t v25;
  size_t v26;
  const void *v27;

  v12 = malloc_type_malloc(0x400uLL, 0xFA8FEB0CuLL);
  *v12 = a2;
  v12[1] = a3;
  v12[2] = a4;
  v12[3] = a5;
  v13 = a6[1] - *a6;
  if ((v13 & 0x1FFFFFFFE0) != 0)
  {
    v14 = 0;
    v15 = (v13 >> 5);
    v16 = 1024;
    v17 = 4;
    do
    {
      v18 = *a6;
      v19 = *a6 + 32 * v14;
      v20 = *(unsigned __int8 *)(v19 + 28);
      if ((v20 & 1) != 0)
      {
        if (v17 == -1)
          abort();
        v21 = *(_DWORD *)(v19 + 24);
        v22 = v17 + 1;
        if (v16 <= v17)
        {
          if (!v16)
            v16 = 128;
          while (v16 <= v17)
          {
            if (v16 >> 1 >= ~v16)
              v16 = v17 + 1;
            else
              v16 += v16 >> 1;
          }
          v12 = malloc_type_realloc(v12, v16, 0x227314A4uLL);
          if (!v12)
            goto LABEL_32;
        }
        v12[v17] = v21;
        if (v17 == -2)
          abort();
        v23 = v17 + 2;
        if (v16 <= v22)
        {
          do
          {
            if (v16 >> 1 >= ~v16)
              v16 = v17 + 2;
            else
              v16 += v16 >> 1;
          }
          while (v16 <= v22);
          v12 = malloc_type_realloc(v12, v16, 0x227314A4uLL);
          if (!v12)
            goto LABEL_32;
        }
        v12[v22] = (2 * v20) & 0x70 | (v20 >> 1) & 3;
        v24 = v18 + 32 * v14;
        v25 = *(_QWORD *)(v24 + 16);
        v26 = v25 + 1;
        if (v25 + 1 > -3 - v17)
          abort();
        v27 = *(const void **)(v24 + 8);
        v17 = v26 + v23;
        if (v16 < v26 + v23)
        {
          do
          {
            if (v16 >> 1 >= ~v16)
              v16 = v26 + v23;
            else
              v16 += v16 >> 1;
          }
          while (v16 < v17);
          v12 = malloc_type_realloc(v12, v16, 0x227314A4uLL);
          if (!v12)
LABEL_32:
            abort();
        }
        memcpy(&v12[v23], v27, v25);
        v12[v25 + v23] = 0;
      }
      ++v14;
    }
    while (v14 != v15);
  }
  else
  {
    v17 = 4;
  }
  *a7 = v17;
  return v12;
}

void sub_240FEBBC0(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

_BYTE *serializeFragmentPackingInfoInternal(uint64_t a1, char a2, char a3, char a4, uint64_t *a5, uint64_t *a6, unint64_t *a7)
{
  _BYTE *v11;
  unsigned int v12;
  size_t v13;
  unint64_t v14;
  __int16 v15;
  size_t v16;
  uint64_t v17;
  char v18;
  _WORD *v19;
  char v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  size_t v28;
  unint64_t v29;
  uint64_t v30;
  size_t v31;
  size_t v32;
  const void *v33;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v39;
  uint64_t v40;

  v11 = malloc_type_malloc(0x400uLL, 0xFA8FEB0CuLL);
  *v11 = a2;
  v11[1] = a3;
  v11[2] = a4;
  v12 = -1431655765 * ((a5[1] - *a5) >> 3);
  v11[3] = v12;
  v36 = v12;
  v37 = a5;
  if (v12)
  {
    v40 = 0;
    v13 = 1024;
    v14 = 4;
    do
    {
      if (v14 == -1)
        abort();
      v39 = *v37;
      v15 = *(_WORD *)(*v37 + 24 * v40);
      v16 = v14 + 1;
      if (v13 <= v14)
      {
        if (!v13)
          v13 = 128;
        while (v13 <= v14)
        {
          if (v13 >> 1 >= ~v13)
            v13 = v14 + 1;
          else
            v13 += v13 >> 1;
        }
        v11 = malloc_type_realloc(v11, v13, 0x227314A4uLL);
        if (!v11)
          goto LABEL_53;
      }
      v11[v14] = v15;
      if (v14 == -2)
        abort();
      v17 = v39 + 24 * v40;
      v20 = *(_BYTE *)(v17 + 4);
      v19 = (_WORD *)(v17 + 4);
      v18 = v20;
      v21 = *((_BYTE *)v19 - 2);
      v14 += 2;
      if (v13 <= v16)
      {
        do
        {
          if (v13 >> 1 >= ~v13)
            v13 = v14;
          else
            v13 += v13 >> 1;
        }
        while (v13 <= v16);
        v11 = malloc_type_realloc(v11, v13, 0x227314A4uLL);
        if (!v11)
LABEL_53:
          abort();
      }
      v11[v16] = v21 | (16 * v18);
      if (*v19)
      {
        v22 = 0;
        do
        {
          if (v14 == -1)
            abort();
          v23 = *(unsigned __int16 *)(v39 + 24 * v40 + 2 * v22 + 6);
          v24 = *a6;
          v25 = *a6 + 32 * v23;
          v26 = *(unsigned __int8 *)(v25 + 28);
          v27 = *(_DWORD *)(v25 + 24);
          v28 = v14 + 1;
          if (v13 <= v14)
          {
            if (!v13)
              v13 = 128;
            while (v13 <= v14)
            {
              if (v13 >> 1 >= ~v13)
                v13 = v14 + 1;
              else
                v13 += v13 >> 1;
            }
            v11 = malloc_type_realloc(v11, v13, 0x227314A4uLL);
            if (!v11)
              goto LABEL_49;
          }
          v11[v14] = v27;
          if (v14 == -2)
            abort();
          v29 = v14 + 2;
          if (v13 <= v28)
          {
            do
            {
              if (v13 >> 1 >= ~v13)
                v13 = v14 + 2;
              else
                v13 += v13 >> 1;
            }
            while (v13 <= v28);
            v11 = malloc_type_realloc(v11, v13, 0x227314A4uLL);
            if (!v11)
              goto LABEL_49;
          }
          v11[v28] = (2 * v26) & 0x70 | (v26 >> 1) & 3;
          v30 = v24 + 32 * v23;
          v31 = *(_QWORD *)(v30 + 16);
          v32 = v31 + 1;
          if (v31 + 1 > -3 - v14)
            abort();
          v33 = *(const void **)(v30 + 8);
          v14 = v32 + v29;
          if (v13 < v32 + v29)
          {
            do
            {
              if (v13 >> 1 >= ~v13)
                v13 = v32 + v29;
              else
                v13 += v13 >> 1;
            }
            while (v13 < v14);
            v11 = malloc_type_realloc(v11, v13, 0x227314A4uLL);
            if (!v11)
LABEL_49:
              abort();
          }
          memcpy(&v11[v29], v33, v31);
          v11[v31 + v29] = 0;
          ++v22;
        }
        while (v22 < (unsigned __int16)*v19);
      }
      ++v40;
    }
    while (v40 != v36);
  }
  else
  {
    v14 = 4;
  }
  *a7 = v14;
  return v11;
}

void sub_240FEBF50(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

unint64_t llvm::compat::getNumArgOperands(llvm::CallBase *a1)
{
  return (unint64_t)(llvm::CallBase::arg_end(a1) - ((_QWORD)a1 - 32 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF))) >> 5;
}

uint64_t llvm::DISubprogram::getImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a4)
  {
    llvm::MDString::get();
    if (a6)
      goto LABEL_3;
LABEL_6:
    if (!a21)
      return llvm::DISubprogram::getImpl();
    goto LABEL_4;
  }
  if (!a6)
    goto LABEL_6;
LABEL_3:
  llvm::MDString::get();
  if (a21)
LABEL_4:
    llvm::MDString::get();
  return llvm::DISubprogram::getImpl();
}

void addMeshStructMembers(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  void *v10;
  llvm::MDString *v11;
  uint64_t String;
  uint64_t v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v18;
  size_t v19;
  size_t v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  int v38;
  __int128 v39;
  uint64_t v40;
  _BYTE v41[64];
  uint64_t v42;
  void **v43;

  v27 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v27)
  {
    v3 = 0;
    v26 = (uint64_t)(a2 + 2);
    while (1)
    {
      v4 = *(_QWORD *)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8 * v3);
      v5 = *(unsigned int *)(v4 + 8);
      if ((_DWORD)v5)
        break;
      v8 = 0;
      v7 = 0;
      v10 = &unk_24105C402;
      v9 = (const char *)&unk_24105C402;
LABEL_27:
      v35 = 0;
      v32 = 0;
      v34 = 0;
      v36 = 0;
      v37 = 0;
      v38 = 0;
      memset(v41, 0, sizeof(v41));
      v42 = 0;
      v30 = v9;
      v31 = v8;
      *(_QWORD *)&v29 = v10;
      *((_QWORD *)&v29 + 1) = v7;
      v33 = 0;
      v40 = 0;
      v39 = xmmword_24105A7C0;
      v19 = strlen(v9);
      HIDWORD(v32) = dataTypeFromString(v9, v19);
      v20 = strlen(v9);
      *((_QWORD *)&v39 + 1) = pixelFormatAndALUTypeFromString(v9, v20);
      v21 = a2[1];
      if (v21 >= a2[2])
      {
        v22 = std::vector<MTLStructMemberInfo>::__push_back_slow_path<MTLStructMemberInfo const&>(a2, &v29);
      }
      else
      {
        std::allocator<MTLStructMemberInfo>::construct[abi:ne180100]<MTLStructMemberInfo,MTLStructMemberInfo const&>(v26, a2[1], &v29);
        v22 = v21 + 176;
        a2[1] = v21 + 176;
      }
      a2[1] = v22;
      v43 = (void **)v41;
      std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100](&v43);
      v23 = v37;
      if (v37)
      {
        p_shared_owners = (unint64_t *)&v37->__shared_owners_;
        do
          v25 = __ldaxr(p_shared_owners);
        while (__stlxr(v25 - 1, p_shared_owners));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      if (++v3 == v27)
        return;
    }
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = (const char *)&unk_24105C402;
    v10 = &unk_24105C402;
    while (1)
    {
      v11 = *(llvm::MDString **)(v4 - 8 * *(unsigned int *)(v4 + 8) + 8 * v6);
      if (!*(_BYTE *)v11)
      {
        String = llvm::MDString::getString(v11);
        if (v13 == 12)
        {
          if (*(_QWORD *)String == 0x5F6772612E726961 && *(_DWORD *)(String + 8) == 1701667182)
          {
            ++v6;
            v10 = (void *)llvm::MDString::getString(*(llvm::MDString **)(v4 - 8 * *(unsigned int *)(v4 + 8) + 8 * v6));
            v7 = v18;
            goto LABEL_7;
          }
        }
        else if (v13 == 17)
        {
          v14 = *(_QWORD *)String == 0x5F6772612E726961 && *(_QWORD *)(String + 8) == 0x6D616E5F65707974;
          if (v14 && *(_BYTE *)(String + 16) == 101)
          {
            ++v6;
            v9 = (const char *)llvm::MDString::getString(*(llvm::MDString **)(v4
                                                                            - 8 * *(unsigned int *)(v4 + 8)
                                                                            + 8 * v6));
            v8 = v16;
            goto LABEL_7;
          }
        }
      }
      ++v6;
LABEL_7:
      if (v6 >= v5)
        goto LABEL_27;
    }
  }
}

void sub_240FEC3D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v10;
  va_list va;

  va_start(va, a9);
  *(_QWORD *)(v9 + 8) = v10;
  MTLStructMemberInfo::~MTLStructMemberInfo((MTLStructMemberInfo *)va);
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLCompilerMeshTopologyType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;

  v6 = (void **)std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x40uLL);
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_DWORD *)v7 + 14) = 0;
    std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::__insert_node_at(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

void MTLStructMemberInfo::~MTLStructMemberInfo(MTLStructMemberInfo *this)
{
  void **v2;

  v2 = (void **)((char *)this + 104);
  std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::shared_ptr<MTLArgumentData>::~shared_ptr[abi:ne180100]((uint64_t)this + 56);
}

uint64_t std::vector<MTLStructMemberInfo>::__push_back_slow_path<MTLStructMemberInfo const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x1745D1745D1745DLL)
    std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
  if (0x5D1745D1745D1746 * ((a1[2] - *a1) >> 4) > v4)
    v4 = 0x5D1745D1745D1746 * ((a1[2] - *a1) >> 4);
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 4)) >= 0xBA2E8BA2E8BA2ELL)
    v6 = 0x1745D1745D1745DLL;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MTLStructMemberInfo>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[176 * v3];
  v13 = &v7[176 * v6];
  std::allocator<MTLStructMemberInfo>::construct[abi:ne180100]<MTLStructMemberInfo,MTLStructMemberInfo const&>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 176;
  std::vector<MTLStructMemberInfo>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<MTLStructMemberInfo>::~__split_buffer((uint64_t)&v10);
  return v8;
}

void sub_240FEC5E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<MTLStructMemberInfo>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 std::allocator<MTLStructMemberInfo>::construct[abi:ne180100]<MTLStructMemberInfo,MTLStructMemberInfo const&>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __n128 result;
  __int128 v14;

  v5 = *a3;
  v6 = a3[1];
  v7 = a3[2];
  *(_DWORD *)(a2 + 48) = *((_DWORD *)a3 + 12);
  *(_OWORD *)(a2 + 16) = v6;
  *(_OWORD *)(a2 + 32) = v7;
  *(_OWORD *)a2 = v5;
  v8 = *((_QWORD *)a3 + 8);
  *(_QWORD *)(a2 + 56) = *((_QWORD *)a3 + 7);
  *(_QWORD *)(a2 + 64) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *(__int128 *)((char *)a3 + 72);
  v12 = *(__int128 *)((char *)a3 + 88);
  *(_QWORD *)(a2 + 104) = 0;
  *(_OWORD *)(a2 + 72) = v11;
  *(_OWORD *)(a2 + 88) = v12;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  std::vector<MTLStructMemberInfo>::__init_with_size[abi:ne180100]<MTLStructMemberInfo*,MTLStructMemberInfo*>((_QWORD *)(a2 + 104), *((__int128 **)a3 + 13), *((__int128 **)a3 + 14), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)a3 + 14) - *((_QWORD *)a3 + 13)) >> 4));
  result = (__n128)a3[8];
  v14 = a3[10];
  *(_OWORD *)(a2 + 144) = a3[9];
  *(_OWORD *)(a2 + 160) = v14;
  *(__n128 *)(a2 + 128) = result;
  return result;
}

void sub_240FEC6A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<MTLArgumentData>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<MTLStructMemberInfo>::__init_with_size[abi:ne180100]<MTLStructMemberInfo*,MTLStructMemberInfo*>(_QWORD *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<MTLStructMemberInfo>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<MTLStructMemberInfo>,MTLStructMemberInfo*,MTLStructMemberInfo*,MTLStructMemberInfo*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_240FEC720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<MTLStructMemberInfo>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x1745D1745D1745ELL)
    std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MTLStructMemberInfo>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[176 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<MTLStructMemberInfo>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1745D1745D1745ELL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(176 * a2);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<MTLStructMemberInfo>,MTLStructMemberInfo*,MTLStructMemberInfo*,MTLStructMemberInfo*>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  __int128 *v6;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::allocator<MTLStructMemberInfo>::construct[abi:ne180100]<MTLStructMemberInfo,MTLStructMemberInfo&>(a1, v4, v6);
      v6 += 11;
      v4 = v12 + 176;
      v12 += 176;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<MTLStructMemberInfo>,MTLStructMemberInfo*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_240FEC870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<MTLStructMemberInfo>,MTLStructMemberInfo*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__n128 std::allocator<MTLStructMemberInfo>::construct[abi:ne180100]<MTLStructMemberInfo,MTLStructMemberInfo&>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __n128 result;
  __int128 v14;

  v5 = *a3;
  v6 = a3[1];
  v7 = a3[2];
  *(_DWORD *)(a2 + 48) = *((_DWORD *)a3 + 12);
  *(_OWORD *)(a2 + 16) = v6;
  *(_OWORD *)(a2 + 32) = v7;
  *(_OWORD *)a2 = v5;
  v8 = *((_QWORD *)a3 + 8);
  *(_QWORD *)(a2 + 56) = *((_QWORD *)a3 + 7);
  *(_QWORD *)(a2 + 64) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *(__int128 *)((char *)a3 + 72);
  v12 = *(__int128 *)((char *)a3 + 88);
  *(_QWORD *)(a2 + 104) = 0;
  *(_OWORD *)(a2 + 72) = v11;
  *(_OWORD *)(a2 + 88) = v12;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  std::vector<MTLStructMemberInfo>::__init_with_size[abi:ne180100]<MTLStructMemberInfo*,MTLStructMemberInfo*>();
  result = (__n128)a3[8];
  v14 = a3[10];
  *(_OWORD *)(a2 + 144) = a3[9];
  *(_OWORD *)(a2 + 160) = v14;
  *(__n128 *)(a2 + 128) = result;
  return result;
}

void sub_240FEC934(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<MTLArgumentData>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<MTLStructMemberInfo>,MTLStructMemberInfo*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::__allocator_destroy[abi:ne180100]<std::allocator<MTLStructMemberInfo>,std::reverse_iterator<MTLStructMemberInfo*>,std::reverse_iterator<MTLStructMemberInfo*>>(*(_QWORD *)a1, **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 8), **(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t std::__allocator_destroy[abi:ne180100]<std::allocator<MTLStructMemberInfo>,std::reverse_iterator<MTLStructMemberInfo*>,std::reverse_iterator<MTLStructMemberInfo*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void **v5;
  void **v6;
  uint64_t v8;
  uint64_t result;
  void **v10[7];

  if (a3 != a5)
  {
    v10[5] = v5;
    v10[6] = v6;
    v8 = a3;
    do
    {
      v10[0] = (void **)(v8 - 72);
      std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100](v10);
      result = std::shared_ptr<MTLArgumentData>::~shared_ptr[abi:ne180100](v8 - 120);
      v8 -= 176;
    }
    while (v8 != a5);
  }
  return result;
}

uint64_t std::vector<MTLStructMemberInfo>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<MTLStructMemberInfo>,std::reverse_iterator<MTLStructMemberInfo*>,std::reverse_iterator<MTLStructMemberInfo*>,std::reverse_iterator<MTLStructMemberInfo*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<MTLStructMemberInfo>,std::reverse_iterator<MTLStructMemberInfo*>,std::reverse_iterator<MTLStructMemberInfo*>,std::reverse_iterator<MTLStructMemberInfo*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _QWORD v16[3];
  char v17;
  __int128 v18;
  __int128 v19;

  v7 = a7;
  *(_QWORD *)&v19 = a6;
  *((_QWORD *)&v19 + 1) = a7;
  v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  if (a3 == a5)
  {
    v14 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 176);
      v9 = *(_OWORD *)(a3 - 160);
      v10 = *(_OWORD *)(a3 - 144);
      *(_DWORD *)(v7 - 128) = *(_DWORD *)(a3 - 128);
      *(_OWORD *)(v7 - 160) = v9;
      *(_OWORD *)(v7 - 144) = v10;
      *(_OWORD *)(v7 - 176) = v8;
      *(_OWORD *)(v7 - 120) = *(_OWORD *)(a3 - 120);
      *(_QWORD *)(a3 - 120) = 0;
      *(_QWORD *)(a3 - 112) = 0;
      v11 = *(_OWORD *)(a3 - 104);
      *(_OWORD *)(v7 - 88) = *(_OWORD *)(a3 - 88);
      *(_OWORD *)(v7 - 104) = v11;
      *(_QWORD *)(v7 - 64) = 0;
      *(_QWORD *)(v7 - 56) = 0;
      *(_QWORD *)(v7 - 72) = 0;
      *(_OWORD *)(v7 - 72) = *(_OWORD *)(a3 - 72);
      *(_QWORD *)(v7 - 56) = *(_QWORD *)(a3 - 56);
      *(_QWORD *)(a3 - 72) = 0;
      *(_QWORD *)(a3 - 64) = 0;
      *(_QWORD *)(a3 - 56) = 0;
      v12 = *(_OWORD *)(a3 - 16);
      v13 = *(_OWORD *)(a3 - 48);
      *(_OWORD *)(v7 - 32) = *(_OWORD *)(a3 - 32);
      *(_OWORD *)(v7 - 16) = v12;
      *(_OWORD *)(v7 - 48) = v13;
      v7 = *((_QWORD *)&v19 + 1) - 176;
      *((_QWORD *)&v19 + 1) -= 176;
      a3 -= 176;
    }
    while (a3 != a5);
    v14 = v19;
  }
  v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<MTLStructMemberInfo>,std::reverse_iterator<MTLStructMemberInfo*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return v14;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<MTLStructMemberInfo>,std::reverse_iterator<MTLStructMemberInfo*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<MTLStructMemberInfo>,std::reverse_iterator<MTLStructMemberInfo*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<MTLStructMemberInfo>,std::reverse_iterator<MTLStructMemberInfo*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[8];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v15 = v3;
  v16 = v2;
  v17 = v3;
  v18 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v10 = v7;
  v11 = v6;
  v12 = v7;
  v13 = v6;
  return std::__allocator_destroy[abi:ne180100]<std::allocator<MTLStructMemberInfo>,std::reverse_iterator<std::reverse_iterator<MTLStructMemberInfo*>>,std::reverse_iterator<std::reverse_iterator<MTLStructMemberInfo*>>>(v4, (uint64_t)v14, (uint64_t)v9);
}

uint64_t std::__allocator_destroy[abi:ne180100]<std::allocator<MTLStructMemberInfo>,std::reverse_iterator<std::reverse_iterator<MTLStructMemberInfo*>>,std::reverse_iterator<std::reverse_iterator<MTLStructMemberInfo*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  uint64_t result;
  void **v7;

  for (i = *(_QWORD *)(a2 + 32); i != *(_QWORD *)(a3 + 32); *(_QWORD *)(a2 + 32) = i)
  {
    v7 = (void **)(i + 104);
    std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100](&v7);
    result = std::shared_ptr<MTLArgumentData>::~shared_ptr[abi:ne180100](i + 56);
    i = *(_QWORD *)(a2 + 32) + 176;
  }
  return result;
}

uint64_t std::__split_buffer<MTLStructMemberInfo>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<MTLStructMemberInfo>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__split_buffer<MTLStructMemberInfo>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  void **v5;

  v2 = *(_QWORD *)(result + 16);
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      *(_QWORD *)(v4 + 16) = v2 - 176;
      v5 = (void **)(v2 - 72);
      std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100](&v5);
      result = std::shared_ptr<MTLArgumentData>::~shared_ptr[abi:ne180100](v2 - 120);
      v2 = *(_QWORD *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t std::function<void ()(unsigned int,unsigned int,unsigned int,unsigned int,llvm::StringRef,llvm::StringRef,llvm::Metadata *,llvm::Metadata *,unsigned int,unsigned int)>::operator()(uint64_t a1, int a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  int v15;
  int v16;
  int v17;
  int v18;
  _QWORD v19[2];
  _QWORD v20[2];

  v20[0] = a6;
  v20[1] = a7;
  v19[0] = a9;
  v19[1] = a10;
  v18 = a2;
  v16 = a4;
  v17 = a3;
  v15 = a5;
  v13 = *(_QWORD *)(a1 + 24);
  if (!v13)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, int *, int *, int *, int *, _QWORD *, _QWORD *, uint64_t *, uint64_t *, uint64_t *, char *))(*(_QWORD *)v13 + 48))(v13, &v18, &v17, &v16, &v15, v20, v19, &a11, &a12, &a13, (char *)&a13 + 4);
}

void std::__function::__func<parseStructTypeMetadata(llvm::MDNode *,llvm::DataLayout const&,MTLCompilerArgumentAccess,std::vector<MTLStructMemberInfo> &,llvm::DenseMap<llvm::Metadata *,std::vector<MTLStructMemberInfo>*,llvm::DenseMapInfo<llvm::Metadata *,void>,llvm::detail::DenseMapPair<llvm::Metadata *,std::vector<MTLStructMemberInfo>*>> &)::$_0,std::allocator<parseStructTypeMetadata(llvm::MDNode *,llvm::DataLayout const&,MTLCompilerArgumentAccess,std::vector<MTLStructMemberInfo> &,llvm::DenseMap<llvm::Metadata *,std::vector<MTLStructMemberInfo>*,llvm::DenseMapInfo<llvm::Metadata *,void>,llvm::detail::DenseMapPair<llvm::Metadata *,std::vector<MTLStructMemberInfo>*>> &)::$_0>,void ()(unsigned int,unsigned int,unsigned int,unsigned int,llvm::StringRef,llvm::StringRef,llvm::Metadata *,llvm::Metadata *,unsigned int,unsigned int)>::~__func()
{
  JUMPOUT(0x24268D8F0);
}

__n128 std::__function::__func<parseStructTypeMetadata(llvm::MDNode *,llvm::DataLayout const&,MTLCompilerArgumentAccess,std::vector<MTLStructMemberInfo> &,llvm::DenseMap<llvm::Metadata *,std::vector<MTLStructMemberInfo>*,llvm::DenseMapInfo<llvm::Metadata *,void>,llvm::detail::DenseMapPair<llvm::Metadata *,std::vector<MTLStructMemberInfo>*>> &)::$_0,std::allocator<parseStructTypeMetadata(llvm::MDNode *,llvm::DataLayout const&,MTLCompilerArgumentAccess,std::vector<MTLStructMemberInfo> &,llvm::DenseMap<llvm::Metadata *,std::vector<MTLStructMemberInfo>*,llvm::DenseMapInfo<llvm::Metadata *,void>,llvm::detail::DenseMapPair<llvm::Metadata *,std::vector<MTLStructMemberInfo>*>> &)::$_0>,void ()(unsigned int,unsigned int,unsigned int,unsigned int,llvm::StringRef,llvm::StringRef,llvm::Metadata *,llvm::Metadata *,unsigned int,unsigned int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_25111F0A8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<parseStructTypeMetadata(llvm::MDNode *,llvm::DataLayout const&,MTLCompilerArgumentAccess,std::vector<MTLStructMemberInfo> &,llvm::DenseMap<llvm::Metadata *,std::vector<MTLStructMemberInfo>*,llvm::DenseMapInfo<llvm::Metadata *,void>,llvm::detail::DenseMapPair<llvm::Metadata *,std::vector<MTLStructMemberInfo>*>> &)::$_0,std::allocator<parseStructTypeMetadata(llvm::MDNode *,llvm::DataLayout const&,MTLCompilerArgumentAccess,std::vector<MTLStructMemberInfo> &,llvm::DenseMap<llvm::Metadata *,std::vector<MTLStructMemberInfo>*,llvm::DenseMapInfo<llvm::Metadata *,void>,llvm::detail::DenseMapPair<llvm::Metadata *,std::vector<MTLStructMemberInfo>*>> &)::$_0>,void ()(unsigned int,unsigned int,unsigned int,unsigned int,llvm::StringRef,llvm::StringRef,llvm::Metadata *,llvm::Metadata *,unsigned int,unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_25111F0A8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<parseStructTypeMetadata(llvm::MDNode *,llvm::DataLayout const&,MTLCompilerArgumentAccess,std::vector<MTLStructMemberInfo> &,llvm::DenseMap<llvm::Metadata *,std::vector<MTLStructMemberInfo>*,llvm::DenseMapInfo<llvm::Metadata *,void>,llvm::detail::DenseMapPair<llvm::Metadata *,std::vector<MTLStructMemberInfo>*>> &)::$_0,std::allocator<parseStructTypeMetadata(llvm::MDNode *,llvm::DataLayout const&,MTLCompilerArgumentAccess,std::vector<MTLStructMemberInfo> &,llvm::DenseMap<llvm::Metadata *,std::vector<MTLStructMemberInfo>*,llvm::DenseMapInfo<llvm::Metadata *,void>,llvm::detail::DenseMapPair<llvm::Metadata *,std::vector<MTLStructMemberInfo>*>> &)::$_0>,void ()(unsigned int,unsigned int,unsigned int,unsigned int,llvm::StringRef,llvm::StringRef,llvm::Metadata *,llvm::Metadata *,unsigned int,unsigned int)>::operator()(uint64_t a1, uint64_t a2, int *a3, int *a4, int *a5, uint64_t a6, __int128 *a7, uint64_t *a8, uint64_t *a9, unsigned int *a10, unsigned int *a11)
{
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  size_t v38;
  size_t v39;
  __int128 v40;
  __int128 v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  __int128 v47;
  int v48;
  __int128 v49;
  uint64_t v50;
  _OWORD v51[4];
  uint64_t v52;

  v12 = *a3;
  v13 = *a4;
  v14 = *a5;
  v16 = *(const char **)a6;
  v15 = *(_QWORD *)(a6 + 8);
  v17 = *a8;
  v18 = *a9;
  v19 = *a10;
  v20 = *a11;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0uLL;
  v48 = 0;
  v49 = xmmword_24105A7C0;
  memset(v51, 0, sizeof(v51));
  v52 = 0;
  v41 = *a7;
  LODWORD(v44) = v12;
  LODWORD(v45) = v14;
  v50 = v17;
  v42 = v16;
  v43 = v15;
  if (v17)
  {
    v21 = 1;
    if (!v14)
      goto LABEL_7;
    goto LABEL_6;
  }
  if (v18)
  {
    v21 = 57;
    if (!v14)
      goto LABEL_7;
    goto LABEL_6;
  }
  v38 = strlen(v16);
  v21 = dataTypeFromString(v16, v38);
  v39 = strlen(v16);
  *((_QWORD *)&v49 + 1) = pixelFormatAndALUTypeFromString(v16, v39);
  if ((_DWORD)v45)
  {
LABEL_6:
    HIDWORD(v45) = v21;
    v46 = v13;
    v21 = 2;
  }
LABEL_7:
  HIDWORD(v44) = v21;
  if (v17)
    parseStructTypeMetadata(v17, *(_QWORD *)(a1 + 8), **(_DWORD **)(a1 + 16), (uint64_t)v51, *(_QWORD *)(a1 + 24));
  if (v18)
  {
    if (llvm::MDNode::classof((_BYTE *)v18))
    {
      _ZNSt3__115allocate_sharedB8ne180100I15MTLArgumentDataNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v40);
      v22 = v40;
      v40 = 0uLL;
      v23 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
      v47 = v22;
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(p_shared_owners);
        while (__stlxr(v25 - 1, p_shared_owners));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v26 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
      if (*((_QWORD *)&v40 + 1))
      {
        v27 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      parseArgumentMetadata(v47, v18, 0, **(_DWORD **)(a1 + 16), *(_QWORD *)(a1 + 8), 0, *(uint64_t **)(a1 + 24), 7);
      v29 = *(_DWORD *)(v47 + 4);
    }
    else
    {
      v30 = *(_QWORD *)(v18 + 128);
      if (*(_BYTE *)(v30 + 16) == 16)
      {
        v31 = (_QWORD *)(v30 + 24);
        if (*(_DWORD *)(v30 + 32) >= 0x41u)
          v31 = (_QWORD *)*v31;
        v29 = *(_DWORD *)v31;
      }
      else
      {
        v29 = -1;
      }
    }
    v48 = v29;
  }
  *(_QWORD *)&v49 = __PAIR64__(v20, v19);
  v32 = *(_QWORD *)(a1 + 32);
  v33 = *(_QWORD *)(v32 + 8);
  if (v33 >= *(_QWORD *)(v32 + 16))
  {
    v34 = std::vector<MTLStructMemberInfo>::__push_back_slow_path<MTLStructMemberInfo const&>(*(uint64_t **)(a1 + 32), &v41);
  }
  else
  {
    std::allocator<MTLStructMemberInfo>::construct[abi:ne180100]<MTLStructMemberInfo,MTLStructMemberInfo const&>(v32 + 16, *(_QWORD *)(v32 + 8), &v41);
    v34 = v33 + 176;
    *(_QWORD *)(v32 + 8) = v33 + 176;
  }
  *(_QWORD *)(v32 + 8) = v34;
  *(_QWORD *)&v40 = v51;
  std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  v35 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
  if (*((_QWORD *)&v47 + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_240FED0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;

  std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100](&a9);
  v20 = a19;
  if (a19)
  {
    p_shared_owners = (unint64_t *)&a19->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t llvm::MDNode::classof(_BYTE *a1)
{
  return (*a1 < 0x23uLL) & (0x7FFFFFFF0uLL >> *a1);
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100I15MTLArgumentDataNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x138uLL);
  result = _ZNSt3__120__shared_ptr_emplaceI15MTLArgumentDataNS_9allocatorIS1_EEEC2B8ne180100IJES3_Li0EEES3_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_240FED174(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceI15MTLArgumentDataNS_9allocatorIS1_EEEC2B8ne180100IJES3_Li0EEES3_DpOT_(_QWORD *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_25111F0F0;
  MTLArgumentData::MTLArgumentData((MTLArgumentData *)(a1 + 3));
  return a1;
}

void sub_240FED1BC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MTLArgumentData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_25111F0F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MTLArgumentData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_25111F0F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x24268D8F0);
}

uint64_t std::__shared_ptr_emplace<MTLArgumentData>::__on_zero_shared(uint64_t a1)
{
  char v2;

  return std::allocator<MTLArgumentData>::destroy[abi:ne180100]((uint64_t)&v2, a1 + 24);
}

uint64_t std::allocator<MTLArgumentData>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void **v4;

  v4 = (void **)(a2 + 200);
  std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::shared_ptr<MTLArgumentData>::~shared_ptr[abi:ne180100](a2 + 144);
  std::shared_ptr<MTLArgumentData>::~shared_ptr[abi:ne180100](a2 + 128);
  return std::shared_ptr<MTLArgumentData>::~shared_ptr[abi:ne180100](a2 + 112);
}

uint64_t findNonStructMember(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *i;
  uint64_t result;
  _QWORD *v4;

  v1 = (_QWORD *)a1[1];
  if ((_QWORD *)*a1 == v1)
    return 0;
  for (i = (_QWORD *)(*a1 + 104); i[1] != *i; i += 22)
  {
    result = findNonStructMember(i);
    if (result)
      return result;
    v4 = i + 9;
    if (v4 == v1)
      return 0;
  }
  return (uint64_t)(i - 13);
}

void OGLCodeGenService::OGLCodeGenService(OGLCodeGenService *this)
{
  void *v2;
  void (*v3)(void);
  void (*v4)(void);
  void *v5;
  void *v6;
  FILE *v7;
  char *v8;

  v2 = dlopen("/System/Library/Frameworks/OpenGLES.framework/libGLVMPlugin.dylib", 5);
  *(_QWORD *)this = v2;
  if (v2
    && (v3 = (void (*)(void))dlsym(v2, "oglCodeGenServiceInitialize")) != 0
    && (v4 = v3, v5 = dlsym(*(void **)this, "oglCodeGenServiceTerminate"), (*((_QWORD *)this + 1) = v5) != 0)
    && (v6 = dlsym(*(void **)this, "oglCodeGenServiceGenerateIR"), (*((_QWORD *)this + 2) = v6) != 0))
  {
    *((_QWORD *)this + 3) = dlsym(*(void **)this, "oglCodeGenServiceGenerateIRWithPluginData");
    *((_QWORD *)this + 4) = dlsym(*(void **)this, "oglCodeGenServiceGenerateIRWithPluginDataAndPluginReturnData");
    v4();
  }
  else
  {
    v7 = (FILE *)*MEMORY[0x24BDAC8D8];
    v8 = dlerror();
    fprintf(v7, "OGLCodeGenService: ERROR: %s\n", v8);
  }
}

{
  OGLCodeGenService::OGLCodeGenService(this);
}

void OGLCodeGenService::~OGLCodeGenService(void (**this)(void))
{
  this[1]();
  dlclose(*this);
  this[4] = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
}

uint64_t OGLCodeGenService::GenerateIR(OGLCodeGenService *this, uint64_t a2, llvm::LLVMContext *a3, const void *a4, uint64_t a5, const void *a6, uint64_t a7, void **a8, unint64_t *a9)
{
  char v16;
  uint64_t *v17;
  uint64_t v18;

  v16 = (char)this;
  if ((_DWORD)this)
    v17 = (uint64_t *)&OGLCodeGenService::oglCodeGenServiceGLES;
  else
    v17 = (uint64_t *)&OGLCodeGenService::oglCodeGenService;
  v18 = *v17;
  if (!*v17)
  {
    v18 = operator new();
    OGLCodeGenService::OGLCodeGenService((OGLCodeGenService *)v18);
    *v17 = v18;
  }
  if (a5 && a7 && (v16 & 1) == 0)
    return (*(uint64_t (**)(uint64_t, llvm::LLVMContext *, const void *, uint64_t, const void *, uint64_t, void **))(v18 + 32))(a2, a3, a4, a5, a6, a7, a8);
  if (!a5 || (v16 & 1) != 0)
    return (*(uint64_t (**)(uint64_t, llvm::LLVMContext *, const void *))(v18 + 16))(a2, a3, a4);
  return (*(uint64_t (**)(uint64_t, llvm::LLVMContext *, const void *, uint64_t, const void *))(v18 + 24))(a2, a3, a4, a5, a6);
}

void sub_240FED538(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x24268D8F0](v1, 0x80C402FCC0CB6);
  _Unwind_Resume(a1);
}

uint64_t moduleFromOpenCLModule(llvm::LLVMContext *a1, llvm::Module *a2, uint64_t a3, void *a4, void **a5, void **a6, uint64_t a7, uint64_t a8, unint64_t *a9)
{
  return OGLCodeGenService::GenerateIR(0, (uint64_t)a1, a2, 0, a3, a4, (uint64_t)a5, a6, a9);
}

MTLFoldMergePass *createMTLFoldMergePass(MTLBoundsCheck::SharedPassData *a1)
{
  MTLFoldMergePass *v2;

  v2 = (MTLFoldMergePass *)operator new();
  MTLFoldMergePass::MTLFoldMergePass(v2, a1);
  return v2;
}

void sub_240FED5C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x24268D8F0](v1, 0x10E3C4022B6FD81);
  _Unwind_Resume(a1);
}

void MTLFoldMergePass::MTLFoldMergePass(MTLFoldMergePass *this, MTLBoundsCheck::SharedPassData *a2)
{
  uint64_t v3;

  v3 = MetalModulePass::MetalModulePass((uint64_t)this, (uint64_t)&MTLFoldMergePass::ID, (uint64_t)a2);
  *(_QWORD *)v3 = &off_25111F128;
  *(_DWORD *)(v3 + 216) = 128;
  *((_QWORD *)this + 25) = MEMORY[0x24268CD5C](11264, 8);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>,llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>::initEmpty((uint64_t)this + 200);
  *((_BYTE *)this + 224) = 0;
  *((_BYTE *)this + 248) = 0;
}

void sub_240FED654(_Unwind_Exception *a1)
{
  MetalModulePass *v1;

  MetalModulePass::~MetalModulePass(v1);
  _Unwind_Resume(a1);
}

void MTLFoldMergePass::~MTLFoldMergePass(MTLFoldMergePass *this)
{
  *(_QWORD *)this = &off_25111F128;
  if (*((_BYTE *)this + 248))
  {
    llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>::~DenseMap((unsigned int *)this + 56);
    *((_BYTE *)this + 248) = 0;
  }
  llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>::~DenseMap((uint64_t)this + 200);
  *(_QWORD *)this = &off_25111E050;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 136);
  llvm::Pass::~Pass(this);
}

{
  *(_QWORD *)this = &off_25111F128;
  if (*((_BYTE *)this + 248))
  {
    llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>::~DenseMap((unsigned int *)this + 56);
    *((_BYTE *)this + 248) = 0;
  }
  llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>::~DenseMap((uint64_t)this + 200);
  *(_QWORD *)this = &off_25111E050;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 136);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x24268D8F0);
}

uint64_t MTLFoldMergePass::getAnalysisUsage(MTLFoldMergePass *this, llvm::AnalysisUsage *a2)
{
  return llvm::AnalysisUsage::setPreservesCFG(a2);
}

uint64_t MTLFoldMergePass::runOnModule(MTLFoldMergePass *this, llvm::Module *a2)
{
  char *v4;
  char *v5;
  int v6;
  llvm::Function *v7;

  MetalModulePass::runOnModule(this, a2);
  v4 = (char *)a2 + 24;
  v5 = (char *)*((_QWORD *)a2 + 4);
  if (v5 == (char *)a2 + 24)
  {
    LOBYTE(v6) = 0;
  }
  else
  {
    v6 = 0;
    do
    {
      if (v5)
        v7 = (llvm::Function *)(v5 - 56);
      else
        v7 = 0;
      if ((llvm::GlobalValue::isDeclaration(v7) & 1) == 0)
        v6 |= MTLFoldMergePass::runOnFunction(this, v7);
      v5 = (char *)*((_QWORD *)v5 + 1);
    }
    while (v5 != v4);
  }
  return v6 & 1;
}

void llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>::init(uint64_t a1, int a2)
{
  unint64_t v3;
  unint64_t v4;

  if (a2)
  {
    v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    *(_DWORD *)(a1 + 16) = v4;
    *(_QWORD *)a1 = MEMORY[0x24268CD5C](88 * v4, 8);
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>,llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>::initEmpty(a1);
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
  }
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>,llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>::initEmpty(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  llvm::ValueHandleBase *v3;
  llvm::ValueHandleBase *v4;
  char *v5;
  _QWORD v6[3];
  uint64_t v7;

  *(_QWORD *)(a1 + 8) = 0;
  v6[1] = 0;
  v6[2] = -4096;
  v6[0] = 2;
  v7 = 0;
  v1 = *(_DWORD *)(a1 + 16);
  if (v1)
  {
    v2 = *(_QWORD *)a1 + 88 * v1;
    v3 = (llvm::ValueHandleBase *)(*(_QWORD *)a1 + 8);
    do
    {
      v4 = llvm::ValueHandleBase::ValueHandleBase(v3, (LODWORD(v6[0]) >> 1) & 3, v6);
      v5 = (char *)v4 - 8;
      *((_QWORD *)v4 - 1) = &unk_25111F1C8;
      *((_QWORD *)v4 + 3) = v7;
      v3 = (llvm::ValueHandleBase *)((char *)v4 + 88);
    }
    while (v5 + 88 != (char *)v2);
  }
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v6);
}

void sub_240FED94C(_Unwind_Exception *a1)
{
  llvm::ValueHandleBase *v1;

  llvm::ValueHandleBase::~ValueHandleBase(v1);
  _Unwind_Resume(a1);
}

void llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>::deleted(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  _QWORD v4[4];

  v1 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v4, (*(_DWORD *)(a1 + 8) >> 1) & 3, (_QWORD *)(a1 + 8));
  v2 = *(_QWORD *)(v1 + 24);
  v3 = &unk_25111F1C8;
  v4[3] = v2;
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>,llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>::erase(v2, (uint64_t)&v3);
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v4);
}

void sub_240FED9C4(_Unwind_Exception *a1)
{
  llvm::ValueHandleBase *v1;

  llvm::ValueHandleBase::~ValueHandleBase(v1);
  _Unwind_Resume(a1);
}

void llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>::allUsesReplacedWith(uint64_t a1, llvm::Value *a2)
{
  int32x2_t *v4;
  int v5;
  uint64_t v6;
  llvm::Value *v7;
  int32x2_t *v8;
  uint64_t v9;
  void *v10;
  _BYTE v11[24];
  int32x2_t *v12;
  llvm::Value *v13;
  void *v14;
  uint64_t v15;
  void *v16[2];
  _QWORD v17[5];

  v17[4] = *MEMORY[0x24BDAC8D0];
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v11, (*(_DWORD *)(a1 + 8) >> 1) & 3, (_QWORD *)(a1 + 8));
  v4 = *(int32x2_t **)(a1 + 32);
  v10 = &unk_25111F1C8;
  v12 = v4;
  v13 = 0;
  v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>,llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>>((uint64_t *)v4, (uint64_t)&v10, &v13);
  v6 = *(_QWORD *)v4 + 88 * v4[2].u32[0];
  if (v5)
    v7 = v13;
  else
    v7 = (llvm::Value *)v6;
  if ((llvm::Value *)(*(_QWORD *)v12 + 88 * v12[2].u32[0]) != v7)
  {
    llvm::SmallVector<llvm::CallInst *,4u>::SmallVector(v16, (uint64_t)v7 + 40);
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>,llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>::erase(v12, v7);
    v8 = v12;
    v13 = a2;
    llvm::SmallVector<llvm::CallInst *,4u>::SmallVector(&v14, (uint64_t)v16);
    llvm::ValueMap<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>::insert((uint64_t)v8, &v13, (uint64_t)&v9);
    if (v14 != &v15)
      free(v14);
    if (v16[0] != v17)
      free(v16[0]);
  }
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v11);
}

void sub_240FEDB24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  llvm::ValueHandleBase *v18;
  uint64_t v19;
  uint64_t v20;
  void *v22;

  if (a18 != (void *)(v19 + 24))
    free(a18);
  v22 = *(void **)(v20 - 88);
  if (v22 != (void *)(v20 - 72))
    free(v22);
  llvm::ValueHandleBase::~ValueHandleBase(v18);
  _Unwind_Resume(a1);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>,llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>::erase(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  char *v5;
  _QWORD *v7;
  _QWORD v8[3];
  uint64_t v9;

  v7 = 0;
  v3 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>,llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>>((uint64_t *)a1, a2, &v7);
  if ((_DWORD)v3)
  {
    v4 = v7;
    v5 = (char *)v7[5];
    if (v5 != (char *)(v7 + 7))
      free(v5);
    v8[1] = 0;
    v8[2] = -8192;
    v7 = &unk_25111F1C8;
    v8[0] = 2;
    v9 = 0;
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v4 + 1), v8);
    v4[4] = v9;
    llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v8);
    *(int32x2_t *)(a1 + 8) = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  return v3;
}

void sub_240FEDC34(_Unwind_Exception *a1)
{
  llvm::ValueHandleBase *v1;

  llvm::ValueHandleBase::~ValueHandleBase(v1);
  _Unwind_Resume(a1);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>,llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>>(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  _QWORD v16[5];
  _QWORD v17[4];

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v17[1] = 0;
    v17[2] = -4096;
    v16[4] = &unk_25111F1C8;
    v17[0] = 2;
    v17[3] = 0;
    v16[1] = 0;
    v16[2] = -8192;
    v16[0] = 2;
    v16[3] = 0;
    v5 = *(_QWORD *)(a2 + 24);
    v6 = v3 - 1;
    v7 = ((v5 >> 4) ^ (v5 >> 9)) & (v3 - 1);
    v8 = v4 + 88 * v7;
    v9 = *(_QWORD *)(v8 + 24);
    if (v5 == v9)
    {
      v10 = 1;
    }
    else
    {
      v12 = 0;
      v13 = 1;
      v10 = 1;
      while (v9 != -4096)
      {
        if (v12)
          v14 = 0;
        else
          v14 = v9 == -8192;
        if (v14)
          v12 = v8;
        v15 = v7 + v13++;
        v7 = v15 & v6;
        v8 = v4 + 88 * (v15 & v6);
        v9 = *(_QWORD *)(v8 + 24);
        if (v5 == v9)
          goto LABEL_4;
      }
      v10 = 0;
      if (v12)
        v8 = v12;
    }
LABEL_4:
    *a3 = v8;
    llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v16);
    llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v17);
  }
  else
  {
    v10 = 0;
    *a3 = 0;
  }
  return v10;
}

int32x2_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>,llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>::erase(int32x2_t *a1, _QWORD *a2)
{
  _QWORD *v4;
  int32x2_t result;
  _QWORD v6[3];
  uint64_t v7;

  v4 = (_QWORD *)a2[5];
  if (v4 != a2 + 7)
    free(v4);
  v6[1] = 0;
  v6[2] = -8192;
  v6[0] = 2;
  v7 = 0;
  llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(a2 + 1), v6);
  a2[4] = v7;
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v6);
  result = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
  a1[1] = result;
  return result;
}

void sub_240FEDDE4(_Unwind_Exception *a1)
{
  llvm::ValueHandleBase *v1;

  llvm::ValueHandleBase::~ValueHandleBase(v1);
  _Unwind_Resume(a1);
}

double llvm::ValueMap<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>::insert@<D0>(uint64_t a1@<X0>, llvm::Value **a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  void *v7;
  _QWORD v8[4];
  __int128 v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _QWORD v14[5];

  v14[4] = *MEMORY[0x24BDAC8D0];
  llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v7, *a2);
  v7 = &unk_25111F1C8;
  v8[3] = a1;
  std::pair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>::pair[abi:ne180100]<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,0>(&v11, (uint64_t)&v7, (uint64_t)(a2 + 1));
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>,llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>::try_emplace<llvm::SmallVector<llvm::CallInst *,4u>>(a1, (uint64_t)&v11, (uint64_t)&v13, (uint64_t)&v9);
  if (v13 != v14)
    free(v13);
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)&v12);
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v8);
  result = *(double *)&v9;
  *(_OWORD *)a3 = v9;
  *(_BYTE *)(a3 + 16) = v10;
  return result;
}

void sub_240FEDED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  std::pair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>::~pair((uint64_t *)va1);
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)va);
  _Unwind_Resume(a1);
}

void llvm::DenseMapIterator<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>,false>::AdvancePastEmptyBuckets(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[5];
  _QWORD v4[4];

  v4[1] = 0;
  v4[2] = -4096;
  v3[4] = &unk_25111F1C8;
  v4[0] = 2;
  v4[3] = 0;
  v3[1] = 0;
  v3[2] = -8192;
  v3[0] = 2;
  v3[3] = 0;
  v2 = *a1;
  v1 = a1[1];
  while (v2 != v1 && (*(_QWORD *)(v2 + 24) | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
    v2 += 88;
    *a1 = v2;
  }
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v3);
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v4);
}

_QWORD *llvm::SmallVector<llvm::CallInst *,4u>::SmallVector(_QWORD *a1, uint64_t a2)
{
  *a1 = a1 + 2;
  a1[1] = 0x400000000;
  if (*(_DWORD *)(a2 + 8))
    llvm::SmallVectorImpl<llvm::CallInst *>::operator=((uint64_t)a1, a2);
  return a1;
}

void sub_240FEDFE0(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  void *v3;

  v3 = v2;
  if (*v1 != v3)
    free(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t llvm::SmallVectorImpl<llvm::CallInst *>::operator=(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      llvm::SmallVectorImpl<llvm::CallInst *>::assignRemote(a1, a2);
      return a1;
    }
    v6 = *(unsigned int *)(a2 + 8);
    v7 = *(unsigned int *)(a1 + 8);
    if (v7 >= v6)
    {
      if ((_DWORD)v6)
        memmove(*(void **)a1, v4, 8 * v6);
      goto LABEL_14;
    }
    if (*(_DWORD *)(a1 + 12) >= v6)
    {
      if ((_DWORD)v7)
      {
        memmove(*(void **)a1, v4, 8 * v7);
        goto LABEL_12;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v7 = 0;
LABEL_12:
    v8 = *(unsigned int *)(a2 + 8);
    if (v7 != v8)
      memcpy((void *)(*(_QWORD *)a1 + 8 * v7), (const void *)(*(_QWORD *)a2 + 8 * v7), *(_QWORD *)a2 + 8 * v8 - (*(_QWORD *)a2 + 8 * v7));
LABEL_14:
    *(_DWORD *)(a1 + 8) = v6;
    *(_DWORD *)(a2 + 8) = 0;
  }
  return a1;
}

double llvm::SmallVectorImpl<llvm::CallInst *>::assignRemote(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  double result;

  v5 = (void *)(a1 + 16);
  v4 = *(void **)a1;
  if (v4 != v5)
    free(v4);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0;
  return result;
}

_QWORD *std::pair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>::~pair(_QWORD *a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)a1[5];
  if (v2 != a1 + 7)
    free(v2);
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)(a1 + 1));
  return a1;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>,llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>::try_emplace<llvm::SmallVector<llvm::CallInst *,4u>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>,llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>>((uint64_t *)a1, a2, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>,llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>::InsertIntoBucket<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>(a1, v12, a2, a3);
    v9 = (_QWORD *)result;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + 88 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>,llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>::InsertIntoBucket<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;

  v6 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>,llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>>(a1, a3, a3, a2);
  llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v6 + 1), (_QWORD *)(a3 + 8));
  v6[4] = *(_QWORD *)(a3 + 32);
  llvm::SmallVector<llvm::CallInst *,4u>::SmallVector(v6 + 5, a4);
  return v6;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>,llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v10;
  _QWORD v11[4];

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>::grow(a1, v7);
  v10 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>,llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>>((uint64_t *)a1, a3, &v10);
  a4 = v10;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  v11[1] = 0;
  v11[2] = -4096;
  v10 = &unk_25111F1C8;
  v11[0] = 2;
  v11[3] = 0;
  if (a4[3] != -4096)
    --*(_DWORD *)(a1 + 12);
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v11);
  return a4;
}

void llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>::grow(uint64_t a1, int a2)
{
  unsigned int v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  *(_QWORD *)a1 = MEMORY[0x24268CD5C]((_QWORD *)v8, 88 * v8, 8);
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>,llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>::moveFromOldBuckets(a1, (uint64_t)v4, (char *)v4 + 88 * v3);
    llvm::deallocate_buffer(v4, (void *)(88 * v3));
  }
  else
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>,llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>::initEmpty(a1);
  }
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>,llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>::moveFromOldBuckets(uint64_t a1, uint64_t a2, char *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  _QWORD v12[2];
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD v16[2];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>,llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>::initEmpty(a1);
  v16[1] = 0;
  v17 = -4096;
  v15 = &unk_25111F1C8;
  v16[0] = 2;
  v18 = 0;
  v12[1] = 0;
  v13 = -8192;
  v12[0] = 2;
  v14 = 0;
  if ((char *)a2 != a3)
  {
    v6 = (_QWORD *)(a2 + 56);
    do
    {
      v7 = *(v6 - 4);
      if (v7 != v17 && v7 != v13)
      {
        v19 = 0;
        llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>,llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>>((uint64_t *)a1, (uint64_t)(v6 - 7), &v19);
        v9 = v19;
        llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v19 + 8), v6 - 6);
        *(_QWORD *)(v9 + 32) = *(v6 - 3);
        llvm::SmallVector<llvm::CallInst *,4u>::SmallVector((_QWORD *)(v9 + 40), (uint64_t)(v6 - 2));
        ++*(_DWORD *)(a1 + 8);
        v10 = (_QWORD *)*(v6 - 2);
        if (v6 != v10)
          free(v10);
      }
      llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)(v6 - 6));
      v11 = (char *)(v6 + 4);
      v6 += 11;
    }
    while (v11 != a3);
  }
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v12);
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v16);
}

void sub_240FEE4F8(_Unwind_Exception *a1)
{
  llvm::ValueHandleBase *v1;
  llvm::ValueHandleBase *v2;

  llvm::ValueHandleBase::~ValueHandleBase(v2);
  llvm::ValueHandleBase::~ValueHandleBase(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>::pair[abi:ne180100]<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,0>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = a2 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)(a1 + 1), (*(_DWORD *)(a2 + 8) >> 1) & 3, (_QWORD *)(a2 + 8));
  *a1 = &unk_25111F1C8;
  a1[4] = *(_QWORD *)(v5 + 24);
  llvm::SmallVector<llvm::CallInst *,4u>::SmallVector(a1 + 5, a3);
  return a1;
}

void sub_240FEE57C(_Unwind_Exception *a1)
{
  llvm::ValueHandleBase *v1;

  llvm::ValueHandleBase::~ValueHandleBase(v1);
  _Unwind_Resume(a1);
}

uint64_t llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>::~DenseMap(uint64_t a1)
{
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>,llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>::destroyAll(a1);
  llvm::deallocate_buffer(*(llvm **)a1, (void *)(88 * *(unsigned int *)(a1 + 16)));
  return a1;
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>,llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>::destroyAll(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD v5[5];
  _QWORD v6[4];

  v1 = *(_DWORD *)(a1 + 16);
  if (v1)
  {
    v6[1] = 0;
    v6[2] = -4096;
    v5[4] = &unk_25111F1C8;
    v6[0] = 2;
    v6[3] = 0;
    v5[1] = 0;
    v5[2] = -8192;
    v5[0] = 2;
    v2 = 88 * v1;
    v3 = *(_QWORD *)a1 + 56;
    v5[3] = 0;
    do
    {
      if ((*(_QWORD *)(v3 - 32) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v4 = *(void **)(v3 - 16);
        if ((void *)v3 != v4)
          free(v4);
      }
      llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)(v3 - 48));
      v3 += 88;
      v2 -= 88;
    }
    while (v2);
    llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v5);
    llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v6);
  }
}

uint64_t MTLFoldMergePass::runOnFunction(MTLFoldMergePass *this, llvm::Function *a2)
{
  char *v2;
  char *v3;
  char *v5;
  llvm::BasicBlock *v6;
  uint64_t v7;
  unsigned int v8;
  int64x2_t v9;
  uint64_t v10;
  uint64_t v11;
  int64x2_t v13;

  v2 = (char *)a2 + 72;
  v3 = (char *)*((_QWORD *)a2 + 10);
  if (v3 != (char *)a2 + 72)
  {
    v5 = (char *)this + 200;
    do
    {
      if (v3)
        v6 = (llvm::BasicBlock *)(v3 - 24);
      else
        v6 = 0;
      MTLFoldMergePass::buildFoldList((uint64_t)this, v6);
      v7 = *((_QWORD *)this + 25);
      v8 = *((_DWORD *)this + 54);
      if (*((_DWORD *)this + 52))
      {
        v13.i64[0] = *((_QWORD *)this + 25);
        v13.i64[1] = v7 + 88 * v8;
        llvm::DenseMapIterator<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>,false>::AdvancePastEmptyBuckets(v13.i64);
        v9 = v13;
        v7 = *((_QWORD *)this + 25);
        v8 = *((_DWORD *)this + 54);
      }
      else
      {
        v9 = vdupq_n_s64(v7 + 88 * (unint64_t)v8);
      }
      v13 = v9;
      v10 = v7 + 88 * v8;
      v11 = v9.i64[0];
      if (v10 != v9.i64[0])
      {
        do
        {
          MTLFoldMergePass::findCommonIndices((uint64_t)this, *(_QWORD *)(v11 + 24), v11 + 40);
          v13.i64[0] += 88;
          llvm::DenseMapIterator<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>,false>::AdvancePastEmptyBuckets(v13.i64);
          v11 = v13.i64[0];
        }
        while (v13.i64[0] != v10);
      }
      llvm::ValueMap<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>::clear((uint64_t)v5);
      v3 = (char *)*((_QWORD *)v3 + 1);
    }
    while (v3 != v2);
  }
  return 1;
}

uint64_t MTLFoldMergePass::buildFoldList(uint64_t this, llvm::BasicBlock *a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  llvm::Value *v7;
  __int128 v8;
  llvm::Value **v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  llvm::Value *v19;
  uint64_t v20;

  v2 = (char *)a2 + 40;
  v3 = (char *)*((_QWORD *)a2 + 6);
  if (v3 != (char *)a2 + 40)
  {
    v6 = (uint64_t *)(this + 200);
    do
    {
      v18 = 0;
      v19 = 0;
      if (v3)
        v4 = (uint64_t)(v3 - 24);
      else
        v4 = 0;
      v16 = 0;
      v17 = 0;
      v7 = (llvm::Value *)"bounds.fold";
      v8 = xmmword_24105A390;
      v9 = &v19;
      v10 = 1;
      v11 = &v18;
      v12 = 2;
      v13 = &v17;
      v14 = 3;
      v15 = &v16;
      this = llvm::PatternMatch::match_combine_and<llvm::PatternMatch::match_combine_and<llvm::PatternMatch::match_combine_and<llvm::PatternMatch::match_combine_and<call_match<llvm::StringRef>,llvm::PatternMatch::Argument_match<llvm::PatternMatch::bind_ty<llvm::Value>>>,llvm::PatternMatch::Argument_match<llvm::PatternMatch::bind_ty<llvm::Value>>>,llvm::PatternMatch::Argument_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>>>,llvm::PatternMatch::Argument_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>>>::match<llvm::Value>((uint64_t)&v7, v4);
      if ((_DWORD)this)
      {
        v7 = v19;
        v5 = llvm::ValueMap<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>::operator[](v6, &v7);
        v20 = v4;
        this = llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)v5, &v20);
      }
      v3 = (char *)*((_QWORD *)v3 + 1);
    }
    while (v3 != v2);
  }
  return this;
}

uint64_t MTLFoldMergePass::findCommonIndices(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *i;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned int v15;

  v13 = 0;
  v14 = 0;
  v15 = 0;
  v3 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v3)
  {
    v5 = *(uint64_t **)a3;
    v6 = 8 * v3;
    do
    {
      v12 = 0;
      v12 = *(_QWORD *)(*v5 - 32 * (*(_DWORD *)(*v5 + 20) & 0x7FFFFFF) + 32);
      v7 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>>>,llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>>>::FindAndConstruct((uint64_t *)&v13, &v12);
      llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)(v7 + 1), v5++);
      v6 -= 8;
    }
    while (v6);
    if ((_DWORD)v14)
    {
      if (v15)
      {
        v8 = 56 * v15;
        for (i = v13; (*i | 0x1000) == 0xFFFFFFFFFFFFF000; i += 7)
        {
          v8 -= 56;
          if (!v8)
            return llvm::DenseMap<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>>>::~DenseMap((uint64_t)&v13);
        }
      }
      else
      {
        i = v13;
      }
      v11 = &v13[7 * v15];
LABEL_12:
      if (i != v11)
      {
        MTLFoldMergePass::mergeCommonIndices(a1, (uint64_t)(i + 1));
        while (1)
        {
          i += 7;
          if (i == v11)
            break;
          if ((*i | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_12;
        }
      }
    }
  }
  return llvm::DenseMap<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>>>::~DenseMap((uint64_t)&v13);
}

void sub_240FEE97C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  llvm::DenseMap<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>>>::~DenseMap((uint64_t)va);
  _Unwind_Resume(a1);
}

void llvm::ValueMap<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>::clear(uint64_t a1)
{
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>,llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>::clear(a1);
  if (*(_BYTE *)(a1 + 48))
  {
    llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>::~DenseMap((unsigned int *)(a1 + 24));
    *(_BYTE *)(a1 + 48) = 0;
  }
}

_QWORD *llvm::ValueMap<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>::operator[](uint64_t *a1, llvm::Value **a2)
{
  _QWORD *v3;
  void *v5;
  _QWORD v6[4];

  llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v5, *a2);
  v5 = &unk_25111F1C8;
  v6[3] = a1;
  v3 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>,llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>::FindAndConstruct(a1, (uint64_t)&v5)+ 5;
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v6);
  return v3;
}

void sub_240FEEA28(_Unwind_Exception *a1)
{
  uint64_t v1;

  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>,llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>::FindAndConstruct(uint64_t *a1, uint64_t a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>,llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>>(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>,llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>>((uint64_t)a1, a2, a2, v7);
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v5 + 1), (_QWORD *)(a2 + 8));
    v5[4] = *(_QWORD *)(a2 + 32);
    v5[5] = v5 + 7;
    v5[6] = 0x400000000;
  }
  return v5;
}

uint64_t MTLFoldMergePass::mergeCommonIndices(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if (*(int *)(a2 + 8) >= 2)
  {
    v3 = result;
    v4 = 1;
    do
      result = MTLFoldMergePass::mergeFold(v3, **(_QWORD **)a2, *(llvm::Instruction **)(*(_QWORD *)a2 + 8 * v4++));
    while (v4 < *(int *)(a2 + 8));
  }
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>>>,llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>>>::FindAndConstruct(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>>>,llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>>>::LookupBucketFor<llvm::Value *>(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>>>,llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>>>::InsertIntoBucketImpl<llvm::Value *>((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = v5 + 3;
    v5[2] = 0x400000000;
  }
  return v5;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>>>,llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>>>::LookupBucketFor<llvm::Value *>(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 56 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 56 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_5;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>>>,llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>>>::InsertIntoBucketImpl<llvm::Value *>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>>>,llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>>>::LookupBucketFor<llvm::Value *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x24268CD5C]((_QWORD *)v8, 56 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    v10 = 56 * v3;
    llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>>>,llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>>>::moveFromOldBuckets(a1, v4, (llvm *)((char *)v4 + v10));
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)v10);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      v12 = 56 * v11;
      do
      {
        *result = -4096;
        result += 7;
        v12 -= 56;
      }
      while (v12);
    }
  }
  return result;
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>>>,llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>>>::moveFromOldBuckets(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;

  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 56 * v6;
    do
    {
      *v7 = -4096;
      v7 += 7;
      v8 -= 56;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>>>,llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>>>::LookupBucketFor<llvm::Value *>((uint64_t *)a1, a2, &v11);
      v9 = v11;
      *v11 = *a2;
      llvm::SmallVector<llvm::CallInst *,4u>::SmallVector(v9 + 1, (uint64_t)(a2 + 1));
      ++*(_DWORD *)(a1 + 8);
      v10 = (_QWORD *)a2[1];
      if (a2 + 3 != v10)
        free(v10);
    }
    a2 += 7;
  }
}

uint64_t MTLFoldMergePass::mergeFold(uint64_t a1, uint64_t a2, llvm::Instruction *a3)
{
  uint64_t v5;

  v5 = llvm::ConstantInt::get();
  llvm::CallBase::setArgOperand(a2, 2u, v5);
  llvm::Value::replaceAllUsesWith();
  llvm::User::dropAllReferences((uint64_t)a3);
  return llvm::Instruction::removeFromParent(a3);
}

uint64_t llvm::DenseMap<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>>>::~DenseMap(uint64_t a1)
{
  llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>>>,llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>>>::destroyAll(a1);
  llvm::deallocate_buffer(*(llvm **)a1, (void *)(56 * *(unsigned int *)(a1 + 16)));
  return a1;
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>>>,llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>>>::destroyAll(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v1)
  {
    v2 = 56 * v1;
    v3 = *(_QWORD *)a1 + 24;
    do
    {
      if ((*(_QWORD *)(v3 - 24) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v4 = *(void **)(v3 - 16);
        if ((void *)v3 != v4)
          free(v4);
      }
      v3 += 56;
      v2 -= 56;
    }
    while (v2);
  }
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>,llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>::clear(uint64_t a1)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD v8[2];
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD v12[2];
  uint64_t v13;
  uint64_t v14;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 || *(_DWORD *)(a1 + 12))
  {
    v3 = *(_DWORD *)(a1 + 16);
    if (v3 <= 4 * v2 || v3 < 0x41)
    {
      v12[1] = 0;
      v13 = -4096;
      v11 = &unk_25111F1C8;
      v12[0] = 2;
      v14 = 0;
      v8[1] = 0;
      v9 = -8192;
      v8[0] = 2;
      v10 = 0;
      if (v3)
      {
        v4 = 88 * v3;
        v5 = *(_QWORD *)a1 + 56;
        do
        {
          v6 = *(_QWORD *)(v5 - 32);
          if (v6 != v13)
          {
            if (v6 != v9)
            {
              v7 = *(void **)(v5 - 16);
              if ((void *)v5 != v7)
                free(v7);
            }
            llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v5 - 48), v12);
            *(_QWORD *)(v5 - 24) = v14;
          }
          v5 += 88;
          v4 -= 88;
        }
        while (v4);
      }
      *(_QWORD *)(a1 + 8) = 0;
      llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v8);
      llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v12);
    }
    else
    {
      llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>::shrink_and_clear(a1);
    }
  }
}

void sub_240FEF0D0(_Unwind_Exception *a1)
{
  llvm::ValueHandleBase *v1;
  llvm::ValueHandleBase *v2;

  llvm::ValueHandleBase::~ValueHandleBase(v2);
  llvm::ValueHandleBase::~ValueHandleBase(v1);
  _Unwind_Resume(a1);
}

void llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>::shrink_and_clear(uint64_t a1)
{
  unsigned int v2;
  int v3;
  int v4;
  int v5;

  v2 = *(_DWORD *)(a1 + 16);
  v3 = *(_DWORD *)(a1 + 8);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>,llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>::destroyAll(a1);
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 == *(_DWORD *)(a1 + 16))
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>,llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>::initEmpty(a1);
  }
  else
  {
    llvm::deallocate_buffer(*(llvm **)a1, (void *)(88 * v2));
    llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::SmallVector<llvm::CallInst *,4u>,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::SmallVector<llvm::CallInst *,4u>>>::init(a1, v5);
  }
}

MTLRuntimeStackTrace *createMTLRuntimeStackTrace(MTLBoundsCheck::SharedPassData *a1)
{
  MTLRuntimeStackTrace *v2;

  v2 = (MTLRuntimeStackTrace *)operator new();
  MTLRuntimeStackTrace::MTLRuntimeStackTrace(v2, a1);
  return v2;
}

void sub_240FEF1C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x24268D8F0](v1, 0x10E1C4006D6683FLL);
  _Unwind_Resume(a1);
}

void MTLRuntimeStackTrace::MTLRuntimeStackTrace(MTLRuntimeStackTrace *this, MTLBoundsCheck::SharedPassData *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  v3 = (_QWORD *)MetalModulePass::MetalModulePass((uint64_t)this, (uint64_t)&MTLRuntimeStackTrace::ID, (uint64_t)a2);
  *v3 = &off_25111F1F0;
  v3[25] = 0;
  v3[24] = 0;
  v4 = v3 + 24;
  v3[23] = v3 + 24;
  v5 = v3 + 23;
  std::__tree<std::__value_type<llvm::Function *,llvm::Value *>,std::__map_value_compare<llvm::Function *,std::__value_type<llvm::Function *,llvm::Value *>,std::less<llvm::Function *>,true>,std::allocator<std::__value_type<llvm::Function *,llvm::Value *>>>::destroy((uint64_t)(v3 + 23), 0);
  *v5 = v4;
  *((_QWORD *)this + 25) = 0;
  *v4 = 0;
}

void MTLRuntimeStackTrace::~MTLRuntimeStackTrace(MTLRuntimeStackTrace *this)
{
  *(_QWORD *)this = &off_25111F1F0;
  std::__tree<std::__value_type<llvm::Function *,llvm::Value *>,std::__map_value_compare<llvm::Function *,std::__value_type<llvm::Function *,llvm::Value *>,std::less<llvm::Function *>,true>,std::allocator<std::__value_type<llvm::Function *,llvm::Value *>>>::destroy((uint64_t)this + 184, *((_QWORD **)this + 24));
  *(_QWORD *)this = &off_25111E050;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 136);
  llvm::Pass::~Pass(this);
}

{
  *(_QWORD *)this = &off_25111F1F0;
  std::__tree<std::__value_type<llvm::Function *,llvm::Value *>,std::__map_value_compare<llvm::Function *,std::__value_type<llvm::Function *,llvm::Value *>,std::less<llvm::Function *>,true>,std::allocator<std::__value_type<llvm::Function *,llvm::Value *>>>::destroy((uint64_t)this + 184, *((_QWORD **)this + 24));
  *(_QWORD *)this = &off_25111E050;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 136);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x24268D8F0);
}

uint64_t MTLRuntimeStackTrace::runOnModule(MTLRuntimeStackTrace *this, llvm::Module *a2)
{
  uint64_t v4;
  llvm::Type *v5;
  uint64_t EntryFunction;
  uint64_t v7;
  llvm::BasicBlock *v8;
  uint64_t FirstInsertionPt;
  llvm::ConstantPointerNull *Int8PtrTy;
  llvm::PointerType *v11;
  llvm::Type **v12;
  uint64_t inserted;
  char *v14;
  uint64_t i;
  llvm::Function *v16;
  _QWORD *j;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *k;
  unsigned __int8 *v21;
  int v22;
  llvm::Instruction *v23;
  llvm::Value *v24;
  void *v26;
  uint64_t v27;
  _QWORD v28[10];
  int v29;
  __int16 v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[2];

  v35[1] = *MEMORY[0x24BDAC8D0];
  MetalModulePass::runOnModule(this, a2);
  std::__tree<std::__value_type<llvm::Function *,llvm::Value *>,std::__map_value_compare<llvm::Function *,std::__value_type<llvm::Function *,llvm::Value *>,std::less<llvm::Function *>,true>,std::allocator<std::__value_type<llvm::Function *,llvm::Value *>>>::destroy((uint64_t)this + 184, *((_QWORD **)this + 24));
  *((_QWORD *)this + 23) = (char *)this + 192;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  v4 = *((_QWORD *)this + 14);
  v26 = (void *)*((_QWORD *)this + 10);
  v27 = v4;
  v5 = (llvm::Type *)llvm::StructType::create();
  EntryFunction = MetalModulePass::getEntryFunction(this);
  if (EntryFunction)
  {
    v7 = *(_QWORD *)(EntryFunction + 80);
    v8 = v7 ? (llvm::BasicBlock *)(v7 - 24) : 0;
    v26 = v28;
    v27 = 0x200000000;
    v28[6] = llvm::BasicBlock::getContext(v8);
    v28[7] = &v34;
    v28[8] = v35;
    v28[9] = 0;
    v29 = 0;
    v30 = 512;
    v31 = 7;
    v32 = 0;
    v33 = 0;
    v34 = MEMORY[0x24BED83B8] + 16;
    v35[0] = MEMORY[0x24BED83F0] + 16;
    v28[4] = v8;
    v28[5] = (char *)v8 + 40;
    FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v8);
    llvm::IRBuilderBase::SetInsertPoint((uint64_t)&v26, (uint64_t)v8, FirstInsertionPt);
    Int8PtrTy = (llvm::ConstantPointerNull *)llvm::Type::getInt8PtrTy(*((llvm::Type **)this + 5), 0);
    v12 = (llvm::Type **)llvm::ConstantPointerNull::get(Int8PtrTy, v11);
    inserted = MTLBoundsCheck::SharedPassData::getOrInsertStackTraceGV(*((llvm::Type ****)this + 8));
    llvm::IRBuilderBase::CreateAlignedStore((uint64_t)&v26, v12, inserted, 0);
    llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v35);
    llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v34);
    if (v26 != v28)
      free(v26);
  }
  v14 = (char *)a2 + 24;
  for (i = *((_QWORD *)a2 + 4); (char *)i != v14; i = *(_QWORD *)(i + 8))
  {
    if (i)
      v16 = (llvm::Function *)(i - 56);
    else
      v16 = 0;
    if ((llvm::GlobalValue::isDeclaration(v16) & 1) == 0 && !llvm::Value::getMetadata())
    {
      for (j = (_QWORD *)*((_QWORD *)v16 + 10); j != (_QWORD *)((char *)v16 + 72); j = (_QWORD *)j[1])
      {
        v18 = j - 3;
        if (!j)
          v18 = 0;
        v19 = v18 + 5;
        for (k = (_QWORD *)v18[6]; k != v19; k = (_QWORD *)k[1])
        {
          v21 = (unsigned __int8 *)(k - 3);
          if (!k)
            v21 = 0;
          v22 = v21[16];
          if (v22 == 84)
            v23 = (llvm::Instruction *)v21;
          else
            v23 = 0;
          if (k && v22 == 84 && MTLRuntimeStackTrace::checkIfValidForStackTrace((uint64_t)this, (uint64_t)v23))
          {
            v24 = (llvm::Value *)MTLRuntimeStackTrace::getOrInsertFrameAlloca(this, v16, v5);
            MTLRuntimeStackTrace::addCallStackTrace((uint64_t)this, (int)v16, v23, v5, v24);
          }
        }
      }
    }
  }
  return 1;
}

void sub_240FEF5A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder(&a9);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<llvm::Function *,llvm::Value *>,std::__map_value_compare<llvm::Function *,std::__value_type<llvm::Function *,llvm::Value *>,std::less<llvm::Function *>,true>,std::allocator<std::__value_type<llvm::Function *,llvm::Value *>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<llvm::Function *,llvm::Value *>,std::__map_value_compare<llvm::Function *,std::__value_type<llvm::Function *,llvm::Value *>,std::less<llvm::Function *>,true>,std::allocator<std::__value_type<llvm::Function *,llvm::Value *>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<llvm::Function *,llvm::Value *>,std::__map_value_compare<llvm::Function *,std::__value_type<llvm::Function *,llvm::Value *>,std::less<llvm::Function *>,true>,std::allocator<std::__value_type<llvm::Function *,llvm::Value *>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

BOOL MTLRuntimeStackTrace::checkIfValidForStackTrace(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 result;
  _DWORD *Name;
  unint64_t v5;
  _DWORD *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v11;
  unint64_t v12;

  v2 = *(_QWORD *)(a2 - 32);
  result = 1;
  if (v2 && !*(_BYTE *)(v2 + 16) && *(_QWORD *)(v2 + 24) == *(_QWORD *)(a2 + 72))
  {
    Name = (_DWORD *)llvm::Value::getName(*(llvm::Value **)(a2 - 32));
    if (v5 >= 4 && *Name == 779250017)
    {
      v11 = (_QWORD *)llvm::Value::getName((llvm::Value *)v2);
      if (v12 < 0xD)
        return 0;
      if (*v11 != 0x65746E692E726961 || *(_QWORD *)((char *)v11 + 5) != 0x746365737265746ELL)
        return 0;
    }
    if (llvm::Value::getMetadata())
      return 0;
    v6 = (_DWORD *)llvm::Value::getName((llvm::Value *)v2);
    if (v7 >= 4 && *v6 == 778859629)
      return 0;
    v8 = llvm::Value::getName((llvm::Value *)v2);
    if (v9 >= 5 && *(_DWORD *)v8 == 1836477548 && *(_BYTE *)(v8 + 4) == 46)
      return 0;
  }
  return result;
}

uint64_t MTLRuntimeStackTrace::getOrInsertFrameAlloca(MTLRuntimeStackTrace *this, llvm::Function *a2, llvm::Type *a3)
{
  uint64_t **v4;
  _QWORD *i;
  unint64_t v6;
  uint64_t v7;
  llvm::BasicBlock *v8;
  llvm::Instruction *FirstNonPHIOrDbg;
  uint64_t Alloca;
  uint64_t *v12[4];
  __int16 v13;
  llvm::Function *v14;
  void *v15[2];
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[8];

  v18[7] = *MEMORY[0x24BDAC8D0];
  v14 = a2;
  v4 = (uint64_t **)((char *)this + 184);
  for (i = (_QWORD *)*((_QWORD *)this + 24); i; i = (_QWORD *)*i)
  {
    v6 = i[4];
    if (v6 <= (unint64_t)a2)
    {
      if (v6 >= (unint64_t)a2)
      {
        v15[0] = &v14;
        return std::__tree<std::__value_type<llvm::Function *,llvm::Value *>,std::__map_value_compare<llvm::Function *,std::__value_type<llvm::Function *,llvm::Value *>,std::less<llvm::Function *>,true>,std::allocator<std::__value_type<llvm::Function *,llvm::Value *>>>::__emplace_unique_key_args<llvm::Function *,std::piecewise_construct_t const&,std::tuple<llvm::Function * const&>,std::tuple<>>((uint64_t **)this + 23, (unint64_t *)&v14, (uint64_t)&std::piecewise_construct, (uint64_t **)v15)[5];
      }
      ++i;
    }
  }
  v7 = *((_QWORD *)a2 + 10);
  if (v7)
    v8 = (llvm::BasicBlock *)(v7 - 24);
  else
    v8 = 0;
  FirstNonPHIOrDbg = (llvm::Instruction *)llvm::BasicBlock::getFirstNonPHIOrDbg(v8);
  v12[0] = (uint64_t *)v8;
  MTLIRBuilder::MTLIRBuilder<llvm::BasicBlock *>((uint64_t)v15, (llvm::BasicBlock **)v12);
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)v15, FirstNonPHIOrDbg);
  v13 = 257;
  Alloca = llvm::IRBuilderBase::CreateAlloca((llvm::BasicBlock **)v15, a3, 0, (const llvm::Twine *)v12);
  v12[0] = (uint64_t *)&v14;
  std::__tree<std::__value_type<llvm::Function *,llvm::Value *>,std::__map_value_compare<llvm::Function *,std::__value_type<llvm::Function *,llvm::Value *>,std::less<llvm::Function *>,true>,std::allocator<std::__value_type<llvm::Function *,llvm::Value *>>>::__emplace_unique_key_args<llvm::Function *,std::piecewise_construct_t const&,std::tuple<llvm::Function * const&>,std::tuple<>>(v4, (unint64_t *)&v14, (uint64_t)&std::piecewise_construct, v12)[5] = Alloca;
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v18);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v17);
  if (v15[0] != &v16)
    free(v15[0]);
  return Alloca;
}

void sub_240FEF890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder((void **)va);
  _Unwind_Resume(a1);
}

void MTLRuntimeStackTrace::addCallStackTrace(uint64_t a1, int a2, llvm::Instruction *a3, llvm::Type *a4, llvm::Value *a5)
{
  uint64_t inserted;
  uint64_t ConstInBoundsGEP2_32;
  llvm::Type *v11;
  llvm::Type **AlignedLoad;
  uint64_t v13;
  llvm::Type **v14;
  llvm::Type *v15;
  llvm::Type **PointerBitCastOrAddrSpaceCast;
  uint64_t v17;
  BOOL v18;
  llvm::Instruction *v19;
  _BYTE v20[32];
  __int16 v21;
  llvm::BasicBlock *v22;
  void *v23[2];
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[8];

  v26[7] = *MEMORY[0x24BDAC8D0];
  if (MTLBoundsCheck::SharedPassData::indexForInstruction(*(MTLBoundsCheck::SharedPassData **)(a1 + 64), a3) != -1)
  {
    v22 = (llvm::BasicBlock *)*((_QWORD *)a3 + 5);
    MTLIRBuilder::MTLIRBuilder<llvm::BasicBlock *&>((uint64_t)v23, &v22);
    llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)v23, a3);
    inserted = MTLBoundsCheck::SharedPassData::getOrInsertStackTraceGV(*(llvm::Type ****)(a1 + 64));
    v21 = 257;
    ConstInBoundsGEP2_32 = llvm::IRBuilderBase::CreateConstInBoundsGEP2_32((llvm::Type **)v23, a4, a5, 0, 1u, (const llvm::Twine *)v20);
    v11 = *(llvm::Type **)(inserted + 24);
    v21 = 257;
    AlignedLoad = (llvm::Type **)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v23, v11, inserted, 0, 0, (uint64_t)v20);
    llvm::IRBuilderBase::CreateAlignedStore((uint64_t)v23, AlignedLoad, ConstInBoundsGEP2_32, 0);
    v21 = 257;
    v13 = llvm::IRBuilderBase::CreateConstInBoundsGEP2_32((llvm::Type **)v23, a4, a5, 0, 0, (const llvm::Twine *)v20);
    v14 = (llvm::Type **)llvm::ConstantInt::get();
    llvm::IRBuilderBase::CreateAlignedStore((uint64_t)v23, v14, v13, 0);
    v15 = *(llvm::Type **)(a1 + 112);
    v21 = 257;
    PointerBitCastOrAddrSpaceCast = llvm::IRBuilderBase::CreatePointerBitCastOrAddrSpaceCast((llvm::IRBuilderBase *)v23, (llvm::Type **)a5, v15, (const llvm::Twine *)v20);
    llvm::IRBuilderBase::CreateAlignedStore((uint64_t)v23, PointerBitCastOrAddrSpaceCast, inserted, 0);
    v17 = *((_QWORD *)a3 + 4);
    if (v17)
      v18 = v17 == *((_QWORD *)a3 + 5) + 40;
    else
      v18 = 1;
    if (v18)
      v19 = 0;
    else
      v19 = (llvm::Instruction *)(v17 - 24);
    llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)v23, v19);
    llvm::IRBuilderBase::CreateAlignedStore((uint64_t)v23, AlignedLoad, inserted, 0);
    llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v26);
    llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v25);
    if (v23[0] != &v24)
      free(v23[0]);
  }
}

void sub_240FEFABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<llvm::Function *,llvm::Value *>,std::__map_value_compare<llvm::Function *,std::__value_type<llvm::Function *,llvm::Value *>,std::less<llvm::Function *>,true>,std::allocator<std::__value_type<llvm::Function *,llvm::Value *>>>::__emplace_unique_key_args<llvm::Function *,std::piecewise_construct_t const&,std::tuple<llvm::Function * const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = **a4;
    v11[5] = 0;
    std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

_QWORD *createMTLMemoryCheckPass(MTLBoundsCheck::SharedPassData *a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  MetalModulePass::MetalModulePass((uint64_t)v2, (uint64_t)&MTLMemoryCheckPass::ID, (uint64_t)a1);
  *v2 = &off_25111F290;
  return v2;
}

void sub_240FEFC0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x24268D8F0](v1, 0x10E1C40C8265ECALL);
  _Unwind_Resume(a1);
}

void MTLMemoryCheckPass::~MTLMemoryCheckPass(MTLMemoryCheckPass *this)
{
  char *v2;

  *(_QWORD *)this = &off_25111E050;
  v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
}

{
  char *v2;

  *(_QWORD *)this = &off_25111E050;
  v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x24268D8F0);
}

uint64_t MTLMemoryCheckPass::runOnModule(MTLMemoryCheckPass *this, llvm::Module *a2)
{
  _QWORD *i;
  llvm::Function *v5;

  MetalModulePass::runOnModule(this, a2);
  for (i = (_QWORD *)*((_QWORD *)a2 + 4); i != (_QWORD *)((char *)a2 + 24); i = (_QWORD *)i[1])
  {
    if (i)
      v5 = (llvm::Function *)(i - 7);
    else
      v5 = 0;
    if ((*((_DWORD *)v5 + 8) & 0xF) != 1
      && (llvm::GlobalValue::isDeclaration(v5) & 1) == 0
      && !llvm::Value::getMetadata())
    {
      MTLMemoryCheckPass::runOnFunction(this, v5);
    }
  }
  return 1;
}

uint64_t MTLMemoryCheckPass::runOnFunction(MTLMemoryCheckPass *this, llvm::Function *a2)
{
  char *v2;
  char *v3;
  char *v5;
  uint64_t v6;
  llvm *v7;
  uint64_t v8;
  uint64_t *v9;
  char *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  llvm::Instruction *v17;
  llvm::Instruction *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  unsigned int v26;
  int v27;
  _QWORD v28[13];

  v28[12] = *MEMORY[0x24BDAC8D0];
  v2 = (char *)a2 + 72;
  v3 = (char *)*((_QWORD *)a2 + 10);
  if (v3 != (char *)a2 + 72)
  {
    do
    {
      v5 = v3 - 24;
      if (!v3)
        v5 = 0;
      v6 = *((_QWORD *)v5 + 6);
      v7 = (llvm *)(v6 - 24);
      if (v6)
        v8 = v6 - 24;
      else
        v8 = 0;
      v25 = v28;
      v27 = 4;
      if (*(unsigned __int8 *)(v8 + 16) - 29 >= 0xB)
      {
        do
        {
          v26 = 0;
          MTLBoundsCheck::gatherMemoryOperands((uint64_t)v7, (uint64_t)&v25);
          if (!v26)
            goto LABEL_25;
          v9 = (uint64_t *)v25;
          v10 = (char *)v25;
          while (1)
          {
            v11 = **(_QWORD **)v10;
            v12 = *(_DWORD *)(v11 + 8);
            if ((v12 & 0xFE) == 0x12)
              v12 = *(_DWORD *)(**(_QWORD **)(v11 + 16) + 8);
            if ((v12 >> 8) - 1 <= 1 && *((_DWORD *)v10 + 4) != 0)
              break;
            v10 += 24;
            if (v10 == (char *)v25 + 24 * v26)
              goto LABEL_25;
          }
          v14 = 24 * v26;
          while (1)
          {
            v15 = (uint64_t *)(*((_QWORD *)this + 8) + 208);
            v16 = *v9;
            v23 = 0;
            v24 = v16;
            if ((llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>,llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::LookupBucketFor<llvm::Value *>(v15, &v24, &v23) & 1) == 0)break;
            v9 += 3;
            v14 -= 24;
            if (!v14)
              goto LABEL_25;
          }
          if (v26
            && (v18 = (llvm::Instruction *)MTLMemoryCheckPass::createCheckedInstructionCall((uint64_t)this, (uint64_t)v7)) != 0)
          {
            llvm::ReplaceInstWithInst(v7, v18, v17);
          }
          else
          {
LABEL_25:
            v18 = v7;
          }
          v19 = *((_QWORD *)v18 + 4);
          v7 = (llvm *)(v19 - 24);
          if (v19)
            v20 = v19 == *((_QWORD *)v18 + 5) + 40;
          else
            v20 = 1;
          if (v20)
            v21 = 0;
          else
            v21 = v19 - 24;
        }
        while (*(unsigned __int8 *)(v21 + 16) - 29 > 0xA);
        if (v25 != v28)
          free(v25);
      }
      v3 = (char *)*((_QWORD *)v3 + 1);
    }
    while (v3 != v2);
  }
  return 1;
}

void sub_240FEFF58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;

  if (a12 != v12)
    free(a12);
  _Unwind_Resume(exception_object);
}

uint64_t MTLMemoryCheckPass::createCheckedInstructionCall(uint64_t a1, uint64_t a2)
{
  int v5;

  if ((*(_QWORD *)(a2 + 48) || (*(_BYTE *)(a2 + 23) & 0x20) != 0) && llvm::Instruction::getMetadataImpl())
    return 0;
  v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 == 84)
    return MTLMemoryCheckPass::createCheckedFunction(a1, a2);
  if (v5 == 61)
    return MTLMemoryCheckPass::createCheckedStoreCall(a1, a2);
  if (v5 != 60)
    return 0;
  return MTLMemoryCheckPass::createCheckedLoadCall(a1, a2);
}

uint64_t MTLMemoryCheckPass::createCheckedLoadCall(uint64_t a1, uint64_t a2)
{
  llvm::Type **v4;
  llvm::Type *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::BasicBlock *v9;
  llvm::BasicBlock *v10;
  llvm::BasicBlock *v11;
  llvm::BasicBlock *v12;
  llvm::BasicBlock *v13;
  llvm::BasicBlock *v14;
  llvm::BasicBlock *v15;
  llvm::BasicBlock *v16;
  llvm::BranchInst *v17;
  llvm::Type **v18;
  uint64_t v19;
  llvm::Type **v20;
  llvm::Type *v21;
  llvm::Type *v22;
  llvm::Type **PointerBitCastOrAddrSpaceCast;
  uint64_t v24;
  int v25;
  unint64_t v26;
  MTLBoundsCheck *ConstGEP1_64;
  llvm::CmpInst **v28;
  uint64_t v29;
  llvm::BasicBlock *ICmp;
  llvm::Instruction *v31;
  uint64_t v32;
  llvm::Instruction *v33;
  uint64_t v34;
  uint64_t inserted;
  llvm::Type *v36;
  uint64_t v37;
  uint64_t v38;
  llvm::Type *v39;
  llvm::Value *v40;
  const llvm::Twine *ImageIDFunction;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t Cast;
  uint64_t v46;
  llvm::Value *v47;
  llvm::Value *v48;
  llvm::ConstantPointerNull *Int8PtrTy;
  llvm::PointerType *v50;
  uint64_t v51;
  uint64_t v52;
  llvm::Type *v53;
  llvm::Value *v54;
  llvm::Value *v55;
  llvm::Value *v56;
  llvm::Value *v57;
  uint64_t v58;
  llvm::Type *v59;
  llvm::Instruction *v60;
  llvm::PHINode *PHI;
  llvm::Type *v62;
  llvm::Value *NullValue;
  llvm::Instruction *v64;
  uint64_t v65;
  llvm::Value *v67;
  llvm::Type **v68;
  llvm::Value *AlignedLoad;
  llvm::BasicBlock *v70;
  llvm::BasicBlock *v71;
  llvm::BasicBlock *v72;
  _QWORD v73[4];
  __int16 v74;
  uint64_t v75;
  void *v76[2];
  uint64_t v77;
  __int16 v78;
  llvm::BasicBlock *v79;
  char *v80;
  llvm::ReturnInst *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD v84[4];
  __int16 v85;
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  v75 = **(_QWORD **)(a2 - 32);
  if (!a2 || (v4 = (llvm::Type **)a2, *(_BYTE *)(a2 + 16) != 60))
    v4 = *(llvm::Type ***)(a2 - 64);
  v5 = *v4;
  v6 = *(unsigned __int16 *)(a2 + 18);
  v7 = *(_QWORD *)(a1 + 48);
  v73[0] = "mtl.checked_load.";
  v73[2] = (1 << (v6 >> 1));
  v74 = 2307;
  v84[0] = v73;
  v84[2] = ".";
  v85 = 770;
  v76[0] = v84;
  v77 = v6 & 1;
  v78 = 2306;
  v8 = getMangledFunction<llvm::Type *&,llvm::Type *&>(v7, (llvm::Twine *)v76, *(MTLBoundsCheck **)a2, &v75, (uint64_t *)(a1 + 80));
  if (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v8))
  {
    *(_DWORD *)(v8 + 32) = *(_DWORD *)(v8 + 32) & 0xFFFFBFC0 | 0x4007;
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
    v72 = 0;
    v9 = *(llvm::BasicBlock **)(a1 + 40);
    v76[0] = "entry";
    v78 = 259;
    v72 = (llvm::BasicBlock *)llvm::BasicBlock::Create(v9, (llvm::LLVMContext *)v76, (const llvm::Twine *)v8, 0, v10);
    v11 = *(llvm::BasicBlock **)(a1 + 40);
    v76[0] = "pass";
    v78 = 259;
    v71 = (llvm::BasicBlock *)llvm::BasicBlock::Create(v11, (llvm::LLVMContext *)v76, (const llvm::Twine *)v8, 0, v12);
    v13 = *(llvm::BasicBlock **)(a1 + 40);
    v76[0] = "fail";
    v78 = 259;
    v70 = (llvm::BasicBlock *)llvm::BasicBlock::Create(v13, (llvm::LLVMContext *)v76, (const llvm::Twine *)v8, 0, v14);
    v15 = *(llvm::BasicBlock **)(a1 + 40);
    v76[0] = "ret";
    v78 = 259;
    v17 = (llvm::BranchInst *)llvm::BasicBlock::Create(v15, (llvm::LLVMContext *)v76, (const llvm::Twine *)v8, 0, v16);
    if ((*(_WORD *)(v8 + 18) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments((llvm::Function *)v8);
      v18 = *(llvm::Type ***)(v8 + 88);
      if ((*(_WORD *)(v8 + 18) & 1) != 0)
      {
        llvm::Function::BuildLazyArguments((llvm::Function *)v8);
        v20 = *(llvm::Type ***)(v8 + 88);
        goto LABEL_12;
      }
    }
    else
    {
      v18 = *(llvm::Type ***)(v8 + 88);
    }
    v20 = v18;
LABEL_12:
    MTLIRBuilder::MTLIRBuilder<llvm::BasicBlock *&>((uint64_t)v76, &v72);
    v21 = *(llvm::Type **)(a1 + 96);
    v68 = v20;
    v22 = (llvm::Type *)llvm::PointerType::get();
    v85 = 257;
    PointerBitCastOrAddrSpaceCast = llvm::IRBuilderBase::CreatePointerBitCastOrAddrSpaceCast((llvm::IRBuilderBase *)v76, v18, v22, (const llvm::Twine *)v84);
    llvm::DataLayout::getTypeSizeInBits(*(_QWORD *)(a1 + 56), (uint64_t)v5);
    v73[0] = (unint64_t)(v24 + 7) >> 3;
    v73[1] = v25 == 1;
    v26 = llvm::TypeSize::operator unsigned long long();
    v85 = 257;
    ConstGEP1_64 = (MTLBoundsCheck *)llvm::IRBuilderBase::CreateConstGEP1_64((llvm::Type **)v76, v21, (llvm::Value *)PointerBitCastOrAddrSpaceCast, v26, (const llvm::Twine *)v84);
    v28 = (llvm::CmpInst **)MTLMemoryCheckPass::createQueryMemoryUsageCall(a1, ConstGEP1_64, 1);
    v85 = 257;
    llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)v76, (uint64_t)v28, (uint64_t)v84);
    v29 = llvm::ConstantInt::get();
    v85 = 257;
    ICmp = (llvm::BasicBlock *)llvm::IRBuilderBase::CreateICmp((uint64_t)v76, 32, v28, v29, (uint64_t)v84);
    llvm::IRBuilderBase::CreateCondBr((uint64_t *)v76, ICmp, v71, v70, 0, 0);
    v79 = v71;
    v80 = (char *)v71 + 40;
    v85 = 257;
    AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v76, v5, (uint64_t)v18, (v6 >> 1) & 0x3F | 0x100, v6 & 1, (uint64_t)v84);
    v32 = llvm::BranchInst::Create(v17, 0, v31);
    v85 = 257;
    llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)v76, v32, (uint64_t)v84);
    v79 = v70;
    v80 = (char *)v70 + 40;
    v34 = *(_QWORD *)(a1 + 64);
    if ((*(_BYTE *)(*(_QWORD *)(v34 + 72) + 20) & 2) != 0)
    {
      inserted = MTLBoundsCheck::SharedPassData::getOrInsertReportBufferGV((llvm::Type ***)v34);
      v36 = *(llvm::Type **)(inserted + 24);
      v85 = 257;
      v37 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v76, v36, inserted, 0, 0, (uint64_t)v84);
      v38 = MTLBoundsCheck::SharedPassData::getOrInsertDrawIDBufferGV(*(MTLBoundsCheck::SharedPassData **)(a1 + 64));
      v39 = *(llvm::Type **)(v38 + 24);
      v85 = 257;
      v40 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v76, v39, v38, 0, 0, (uint64_t)v84);
      ImageIDFunction = MTLBoundsCheck::SharedPassData::getOrInsertGetImageIDFunction(*(MTLBoundsCheck::SharedPassData **)(a1 + 64));
      if (ImageIDFunction)
        v42 = *((_QWORD *)ImageIDFunction + 3);
      else
        v42 = 0;
      v85 = 257;
      v43 = llvm::IRBuilderBase::CreateCall((uint64_t)v76, v42, (uint64_t)ImageIDFunction, 0, 0, (uint64_t)v84, 0);
      v44 = *(_QWORD *)(a1 + 72);
      v85 = 257;
      Cast = llvm::IRBuilderBase::CreateCast((uint64_t)v76, 47, (uint64_t)v18, v44, (uint64_t)v84);
      v46 = *(_QWORD *)(a1 + 64);
      v67 = (llvm::Value *)Cast;
      if ((*(_BYTE *)(*(_QWORD *)(v46 + 72) + 21) & 2) != 0)
      {
        v52 = MTLBoundsCheck::SharedPassData::getOrInsertStackTraceGV((llvm::Type ***)v46);
        v47 = (llvm::Value *)v43;
        v48 = (llvm::Value *)v37;
        v53 = *(llvm::Type **)(v52 + 24);
        v85 = 257;
        v51 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v76, v53, v52, 0, 0, (uint64_t)v84);
      }
      else
      {
        v47 = (llvm::Value *)v43;
        v48 = (llvm::Value *)v37;
        Int8PtrTy = (llvm::ConstantPointerNull *)llvm::Type::getInt8PtrTy(*(llvm::Type **)(a1 + 40), 0);
        v51 = llvm::ConstantPointerNull::get(Int8PtrTy, v50);
      }
      v54 = (llvm::Value *)v51;
      v55 = (llvm::Value *)llvm::ConstantInt::get();
      v56 = (llvm::Value *)llvm::ConstantInt::get();
      v57 = (llvm::Value *)llvm::ConstantInt::get();
      MTLIRBuilder::CreateBadAccessCall((llvm::Constant **)v76, v48, v40, v54, v47, v67, v55, v56, (llvm::Value *)(v68 + 5), v57);
    }
    v58 = llvm::BranchInst::Create(v17, 0, v33);
    v85 = 257;
    llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)v76, v58, (uint64_t)v84);
    v79 = v17;
    v80 = (char *)v17 + 40;
    v59 = *(llvm::Type **)a2;
    v85 = 257;
    PHI = (llvm::PHINode *)llvm::IRBuilderBase::CreatePHI((llvm::IRBuilderBase *)v76, v59, (llvm::Type *)2, (const llvm::Twine *)v84, v60);
    llvm::PHINode::addIncoming(PHI, AlignedLoad, v71);
    NullValue = (llvm::Value *)llvm::Constant::getNullValue(*(llvm::Constant **)a2, v62);
    llvm::PHINode::addIncoming(PHI, NullValue, v70);
    v65 = llvm::ReturnInst::Create(v81, PHI, 0, v64);
    v85 = 257;
    llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)v76, v65, (uint64_t)v84);
    llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)&v83);
    llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v82);
    if (v76[0] != &v77)
      free(v76[0]);
    goto LABEL_22;
  }
  if (v8)
  {
LABEL_22:
    v19 = *(_QWORD *)(v8 + 24);
    goto LABEL_23;
  }
  v19 = 0;
LABEL_23:
  v84[0] = *(_QWORD *)(a2 - 32);
  MTLBoundsCheck::SharedPassData::indexForInstruction(*(MTLBoundsCheck::SharedPassData **)(a1 + 64), (llvm::Instruction *)a2);
  v84[1] = llvm::ConstantInt::get();
  v78 = 257;
  return llvm::CallInst::Create(v19, v8, (uint64_t)v84, 2, 0, 0);
}

void sub_240FF06C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder((void **)va);
  _Unwind_Resume(a1);
}

uint64_t MTLMemoryCheckPass::createCheckedStoreCall(uint64_t a1, uint64_t a2)
{
  void **v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::BasicBlock *v9;
  llvm::BasicBlock *v10;
  llvm::BasicBlock *v11;
  llvm::BasicBlock *v12;
  llvm::BranchInst *v13;
  llvm::BasicBlock *v14;
  llvm::BasicBlock *v15;
  llvm::BasicBlock *v16;
  llvm::BasicBlock *v17;
  llvm::BasicBlock *v18;
  llvm::Type **v19;
  llvm::Type **v20;
  llvm::Type **v21;
  uint64_t v22;
  llvm::Type *v23;
  llvm::Type *v24;
  llvm::Type **PointerBitCastOrAddrSpaceCast;
  uint64_t v26;
  int v27;
  unint64_t v28;
  MTLBoundsCheck *ConstGEP1_64;
  llvm::CmpInst **v30;
  uint64_t v31;
  llvm::BasicBlock *ICmp;
  unint64_t v33;
  __int16 v34;
  llvm::Instruction *v35;
  uint64_t v36;
  llvm::Instruction *v37;
  uint64_t v38;
  uint64_t inserted;
  llvm::Type *v40;
  uint64_t AlignedLoad;
  uint64_t v42;
  llvm::Type *v43;
  llvm::Value *v44;
  const llvm::Twine *ImageIDFunction;
  uint64_t v46;
  llvm::Value *v47;
  uint64_t v48;
  llvm::Value *Cast;
  uint64_t v50;
  llvm::Value *v51;
  llvm::ConstantPointerNull *Int8PtrTy;
  llvm::PointerType *v53;
  uint64_t v54;
  uint64_t v55;
  llvm::Type *v56;
  llvm::Value *v57;
  llvm::Value *v58;
  llvm::Value *v59;
  llvm::Value *v60;
  uint64_t v61;
  llvm::Instruction *v62;
  uint64_t v63;
  uint64_t v64;
  llvm::Type **v66;
  llvm::BranchInst *v67;
  llvm::BasicBlock *v68;
  _QWORD v69[4];
  __int16 v70;
  unint64_t v71;
  uint64_t v72;
  void *v73;
  void *v74[2];
  uint64_t v75;
  __int16 v76;
  llvm::BranchInst *v77;
  char *v78;
  llvm::ReturnInst *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD v82[2];
  const char *v83;
  __int16 v84;
  uint64_t v85;

  v85 = *MEMORY[0x24BDAC8D0];
  v73 = **(void ***)(a2 - 32);
  if (!a2 || (v4 = (void **)a2, *(_BYTE *)(a2 + 16) != 60))
    v4 = *(void ***)(a2 - 64);
  v72 = 0;
  v5 = *v4;
  v6 = *(unsigned __int16 *)(a2 + 18);
  v71 = 1 << (v6 >> 1);
  v72 = (uint64_t)v5;
  v7 = *(_QWORD *)(a1 + 48);
  v69[0] = "mtl.checked_store.";
  v69[2] = &v71;
  v70 = 3075;
  v82[0] = v69;
  v83 = ".";
  v84 = 770;
  v74[0] = v82;
  v75 = v6 & 1;
  v76 = 2306;
  v8 = getMangledFunction<llvm::Type *&,llvm::Type *&,llvm::Type *&>(v7, (llvm::Twine *)v74, *(MTLBoundsCheck **)a2, &v73, (void **)&v72, (int64_t *)(a1 + 80));
  if (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v8))
  {
    *(_DWORD *)(v8 + 32) = *(_DWORD *)(v8 + 32) & 0xFFFFBFC0 | 0x4007;
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
    v68 = 0;
    v9 = *(llvm::BasicBlock **)(a1 + 40);
    v74[0] = "entry";
    v76 = 259;
    v68 = (llvm::BasicBlock *)llvm::BasicBlock::Create(v9, (llvm::LLVMContext *)v74, (const llvm::Twine *)v8, 0, v10);
    v11 = *(llvm::BasicBlock **)(a1 + 40);
    v74[0] = "pass";
    v76 = 259;
    v13 = (llvm::BranchInst *)llvm::BasicBlock::Create(v11, (llvm::LLVMContext *)v74, (const llvm::Twine *)v8, 0, v12);
    v14 = *(llvm::BasicBlock **)(a1 + 40);
    v74[0] = "fail";
    v76 = 259;
    v16 = (llvm::BasicBlock *)llvm::BasicBlock::Create(v14, (llvm::LLVMContext *)v74, (const llvm::Twine *)v8, 0, v15);
    v17 = *(llvm::BasicBlock **)(a1 + 40);
    v74[0] = "ret";
    v76 = 259;
    v67 = (llvm::BranchInst *)llvm::BasicBlock::Create(v17, (llvm::LLVMContext *)v74, (const llvm::Twine *)v8, 0, v18);
    if ((*(_WORD *)(v8 + 18) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments((llvm::Function *)v8);
      v20 = *(llvm::Type ***)(v8 + 88);
      if ((*(_WORD *)(v8 + 18) & 1) == 0)
      {
        v19 = *(llvm::Type ***)(v8 + 88);
        v21 = v19;
        goto LABEL_14;
      }
      llvm::Function::BuildLazyArguments((llvm::Function *)v8);
      v19 = *(llvm::Type ***)(v8 + 88);
      if ((*(_WORD *)(v8 + 18) & 1) != 0)
      {
        llvm::Function::BuildLazyArguments((llvm::Function *)v8);
        v21 = *(llvm::Type ***)(v8 + 88);
        goto LABEL_14;
      }
    }
    else
    {
      v19 = *(llvm::Type ***)(v8 + 88);
      v20 = v19;
    }
    v21 = v19;
LABEL_14:
    MTLIRBuilder::MTLIRBuilder<llvm::BasicBlock *&>((uint64_t)v74, &v68);
    v23 = *(llvm::Type **)(a1 + 96);
    v66 = v21;
    v24 = (llvm::Type *)llvm::PointerType::get();
    v84 = 257;
    PointerBitCastOrAddrSpaceCast = llvm::IRBuilderBase::CreatePointerBitCastOrAddrSpaceCast((llvm::IRBuilderBase *)v74, v20, v24, (const llvm::Twine *)v82);
    llvm::DataLayout::getTypeSizeInBits(*(_QWORD *)(a1 + 56), v72);
    v69[0] = (unint64_t)(v26 + 7) >> 3;
    v69[1] = v27 == 1;
    v28 = llvm::TypeSize::operator unsigned long long();
    v84 = 257;
    ConstGEP1_64 = (MTLBoundsCheck *)llvm::IRBuilderBase::CreateConstGEP1_64((llvm::Type **)v74, v23, (llvm::Value *)PointerBitCastOrAddrSpaceCast, v28, (const llvm::Twine *)v82);
    v30 = (llvm::CmpInst **)MTLMemoryCheckPass::createQueryMemoryUsageCall(a1, ConstGEP1_64, 2);
    v84 = 257;
    llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)v74, (uint64_t)v30, (uint64_t)v82);
    v31 = llvm::ConstantInt::get();
    v84 = 257;
    ICmp = (llvm::BasicBlock *)llvm::IRBuilderBase::CreateICmp((uint64_t)v74, 32, v30, v31, (uint64_t)v82);
    llvm::IRBuilderBase::CreateCondBr((uint64_t *)v74, ICmp, v13, v16, 0, 0);
    v77 = v13;
    v78 = (char *)v13 + 40;
    v33 = __clz(v71) ^ 0x13F;
    if (v71)
      v34 = v33;
    else
      v34 = 0;
    llvm::IRBuilderBase::CreateAlignedStore((uint64_t)v74, v19 + 5, (uint64_t)v20, v34);
    v36 = llvm::BranchInst::Create(v67, 0, v35);
    v84 = 257;
    llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)v74, v36, (uint64_t)v82);
    v77 = v16;
    v78 = (char *)v16 + 40;
    v38 = *(_QWORD *)(a1 + 64);
    if ((*(_BYTE *)(*(_QWORD *)(v38 + 72) + 20) & 2) != 0)
    {
      inserted = MTLBoundsCheck::SharedPassData::getOrInsertReportBufferGV((llvm::Type ***)v38);
      v40 = *(llvm::Type **)(inserted + 24);
      v84 = 257;
      AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v74, v40, inserted, 0, 0, (uint64_t)v82);
      v42 = MTLBoundsCheck::SharedPassData::getOrInsertDrawIDBufferGV(*(MTLBoundsCheck::SharedPassData **)(a1 + 64));
      v43 = *(llvm::Type **)(v42 + 24);
      v84 = 257;
      v44 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v74, v43, v42, 0, 0, (uint64_t)v82);
      ImageIDFunction = MTLBoundsCheck::SharedPassData::getOrInsertGetImageIDFunction(*(MTLBoundsCheck::SharedPassData **)(a1 + 64));
      if (ImageIDFunction)
        v46 = *((_QWORD *)ImageIDFunction + 3);
      else
        v46 = 0;
      v84 = 257;
      v47 = (llvm::Value *)llvm::IRBuilderBase::CreateCall((uint64_t)v74, v46, (uint64_t)ImageIDFunction, 0, 0, (uint64_t)v82, 0);
      v48 = *(_QWORD *)(a1 + 72);
      v84 = 257;
      Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v74, 47, (uint64_t)v20, v48, (uint64_t)v82);
      v50 = *(_QWORD *)(a1 + 64);
      if ((*(_BYTE *)(*(_QWORD *)(v50 + 72) + 21) & 2) != 0)
      {
        v55 = MTLBoundsCheck::SharedPassData::getOrInsertStackTraceGV((llvm::Type ***)v50);
        v51 = (llvm::Value *)AlignedLoad;
        v56 = *(llvm::Type **)(v55 + 24);
        v84 = 257;
        v54 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v74, v56, v55, 0, 0, (uint64_t)v82);
      }
      else
      {
        v51 = (llvm::Value *)AlignedLoad;
        Int8PtrTy = (llvm::ConstantPointerNull *)llvm::Type::getInt8PtrTy(*(llvm::Type **)(a1 + 40), 0);
        v54 = llvm::ConstantPointerNull::get(Int8PtrTy, v53);
      }
      v57 = (llvm::Value *)v54;
      v58 = (llvm::Value *)llvm::ConstantInt::get();
      v59 = (llvm::Value *)llvm::ConstantInt::get();
      v60 = (llvm::Value *)llvm::ConstantInt::get();
      MTLIRBuilder::CreateBadAccessCall((llvm::Constant **)v74, v51, v44, v57, v47, Cast, v58, v59, (llvm::Value *)(v66 + 10), v60);
    }
    v61 = llvm::BranchInst::Create(v67, 0, v37);
    v84 = 257;
    llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)v74, v61, (uint64_t)v82);
    v77 = v67;
    v78 = (char *)v67 + 40;
    v63 = llvm::ReturnInst::Create(v79, 0, 0, v62);
    v84 = 257;
    llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)v74, v63, (uint64_t)v82);
    llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)&v81);
    llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v80);
    if (v74[0] != &v75)
      free(v74[0]);
    goto LABEL_27;
  }
  if (v8)
  {
LABEL_27:
    v22 = *(_QWORD *)(v8 + 24);
    goto LABEL_28;
  }
  v22 = 0;
LABEL_28:
  v64 = *(_QWORD *)(a2 - 64);
  v82[0] = *(_QWORD *)(a2 - 32);
  v82[1] = v64;
  MTLBoundsCheck::SharedPassData::indexForInstruction(*(MTLBoundsCheck::SharedPassData **)(a1 + 64), (llvm::Instruction *)a2);
  v83 = (const char *)llvm::ConstantInt::get();
  v76 = 257;
  return llvm::CallInst::Create(v22, v8, (uint64_t)v82, 3, 0, 0);
}

void sub_240FF0DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder((void **)va);
  _Unwind_Resume(a1);
}

uint64_t MTLMemoryCheckPass::createCheckedFunction(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t Name;
  size_t v7;
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  BOOL v20;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char v26;
  int v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  llvm::BasicBlock *v37;
  llvm::BasicBlock *v38;
  llvm::BasicBlock *v39;
  llvm::BasicBlock *v40;
  llvm::BasicBlock *v41;
  llvm::BasicBlock *v42;
  llvm::BasicBlock *v43;
  llvm::BasicBlock *v44;
  llvm::LLVMContext *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  llvm::ValueHandleBase *v50;
  uint64_t v51;
  llvm::ValueHandleBase *v52;
  uint64_t v53;
  llvm::Type *v54;
  uint64_t v55;
  uint64_t v56;
  llvm::Instruction *v57;
  llvm::Instruction *v58;
  llvm::Value *PHI;
  uint64_t v60;
  llvm::Instruction *v61;
  llvm::Instruction *v62;
  llvm::Type *v63;
  llvm::Type *v64;
  llvm::Instruction *v65;
  llvm::Instruction *v66;
  MTLBoundsCheck::SharedPassData *v67;
  llvm::Type *v68;
  const llvm::Twine *ImageIDFunction;
  uint64_t v70;
  llvm::Value *v71;
  uint64_t inserted;
  llvm::Type *v73;
  llvm::Value *AlignedLoad;
  uint64_t v75;
  llvm::Type *v76;
  llvm::Value *v77;
  uint64_t v78;
  llvm::ConstantPointerNull *Int8PtrTy;
  llvm::PointerType *v80;
  uint64_t v81;
  uint64_t v82;
  llvm::Type *v83;
  llvm::Value *v84;
  llvm::Value *v85;
  llvm::Type *v86;
  llvm::Instruction *v87;
  llvm::Value *NullValue;
  llvm::Instruction *v89;
  llvm::BasicBlock *v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  llvm::BasicBlock *v94;
  int v95;
  llvm::BasicBlock *v96;
  llvm::Type **v97;
  llvm::Type *v98;
  llvm::Type *v99;
  llvm::Type **PointerBitCastOrAddrSpaceCast;
  MTLBoundsCheck *GEP;
  llvm::CmpInst **v102;
  uint64_t v103;
  llvm::BasicBlock *ICmp;
  llvm::Value *v105;
  uint64_t v106;
  llvm::Value *Cast;
  llvm::Value *v108;
  unint64_t i;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __int16 v115;
  uint64_t v116;
  uint64_t v117;
  llvm::BasicBlock *v118;
  llvm::PHINode *v119;
  llvm::PHINode *v120;
  llvm::PHINode *v121;
  llvm::BasicBlock *v122;
  llvm::Function *v123;
  _BYTE v124[32];
  __int16 v125;
  llvm::BasicBlock *v126;
  llvm::Value *v127;
  _BYTE v128[16];
  llvm::Type **v129;
  llvm::BasicBlock *v130;
  uint64_t v131[3];
  char v132;
  char v133;
  _BYTE v134[64];
  uint64_t v135;
  const char *v136;
  size_t v137;
  void *v138;
  uint64_t v139;
  _BYTE v140[16];
  __int16 v141;
  void *v142[4];
  __int16 v143;
  llvm::BasicBlock *v144;
  char *v145;
  void *v146[2];
  _BYTE v147[32];
  void *v148;
  __int128 v149;
  _BYTE v150[64];
  void *v151[2];
  _BYTE v152[32];
  void *v153;
  _DWORD v154[14];
  _QWORD *v155;
  uint64_t v156;
  _QWORD v157[14];

  v157[12] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a2 - 32);
  if (!v2)
    return 0;
  if (*(_BYTE *)(v2 + 16))
    return 0;
  v3 = a2;
  v4 = *(_QWORD *)(v2 + 24);
  if (v4 != *(_QWORD *)(a2 + 72))
    return 0;
  if (!llvm::GlobalValue::isDeclaration(*(llvm::GlobalValue **)(a2 - 32)))
    return 0;
  if (llvm::Value::getMetadata())
    return 0;
  Name = llvm::Value::getName((llvm::Value *)v2);
  v136 = (const char *)Name;
  v137 = v7;
  if (v7 < 4)
    return 0;
  if (*(_DWORD *)Name != 779250017)
  {
    if (v7 < 5)
      return 0;
    if (*(_DWORD *)Name != 1836477548 || *(_BYTE *)(Name + 4) != 46)
      return 0;
  }
  v155 = v157;
  v156 = 0x400000000;
  MTLBoundsCheck::gatherMemoryArguments(v2, (uint64_t)&v155);
  v11 = v155;
  if ((_DWORD)v156)
  {
    v12 = 0;
    while (1)
    {
      v13 = *(_QWORD *)v155[v12];
      v14 = *(_DWORD *)(v13 + 8);
      if ((v14 & 0xFE) == 0x12)
        v14 = *(_DWORD *)(**(_QWORD **)(v13 + 16) + 8);
      if ((v14 >> 8) - 1 < 2)
        break;
      v12 += 3;
      if (3 * v156 == v12)
        goto LABEL_21;
    }
    v15 = *(_DWORD *)(v4 + 12);
    v142[0] = 0;
    llvm::SmallVector<unsigned long,6u>::SmallVector(&v153, (v15 + 62) >> 6, (uint64_t *)v142);
    v16 = (v15 - 1);
    v154[12] = v15 - 1;
    v151[0] = v152;
    v151[1] = (void *)0x400000000;
    v148 = v150;
    v149 = xmmword_24105A3F0;
    llvm::raw_svector_ostream::raw_svector_ostream((uint64_t)v134, (uint64_t)&v148);
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)v134, "mtl.checked.", 0xCuLL);
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)v134, v136, v137);
    if (v137 < 0xB)
      goto LABEL_59;
    if ((*(_QWORD *)v136 != 0x6D656D2E6D766C6CLL || *(_QWORD *)(v136 + 3) != 0x7970636D656D2E6DLL)
      && (*(_QWORD *)v136 != 0x6D656D2E6D766C6CLL || *(_QWORD *)(v136 + 3) != 0x7465736D656D2E6DLL))
    {
      if (v137 < 0xC)
      {
LABEL_59:
        if (llvm::Module::getFunction())
        {
          v28 = *(_DWORD *)(v4 + 12);
          if (v28 != 1)
          {
            v29 = 0;
            v30 = v3;
            do
            {
              if (((*((_QWORD *)v153 + (v29 >> 6)) >> v29) & 1) == 0)
              {
                v142[0] = *(void **)(v30 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF));
                llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)v151, (uint64_t *)v142);
                v28 = *(_DWORD *)(v4 + 12);
              }
              ++v29;
              v30 += 32;
            }
            while (v29 < (v28 - 1));
          }
          MTLBoundsCheck::SharedPassData::indexForInstruction(*(MTLBoundsCheck::SharedPassData **)(a1 + 64), (llvm::Instruction *)v3);
          v142[0] = (void *)llvm::ConstantInt::get();
          llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)v151, (uint64_t *)v142);
LABEL_129:
          llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v134);
          if (v148 != v150)
            free(v148);
          v143 = 257;
          v9 = llvm::CallInst::Create();
          v115 = *(_WORD *)(v9 + 18) & 0xFFFC | *(_WORD *)(v3 + 18) & 3;
          *(_WORD *)(v9 + 18) = v115;
          *(_WORD *)(v9 + 18) = v115 & 0xF003 | *(_WORD *)(v3 + 18) & 0xFFC;
          if (v151[0] != v152)
            free(v151[0]);
          if (v153 != v154)
            free(v153);
          v11 = v155;
          goto LABEL_136;
        }
        llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::init((uint64_t)v131, 64);
        v132 = 0;
        v133 = 0;
        v146[0] = v147;
        v146[1] = (void *)0x400000000;
        v31 = *(_DWORD *)(v4 + 12);
        if (v31 != 1)
        {
          v32 = 0;
          do
          {
            if (((*((_QWORD *)v153 + (v32 >> 6)) >> v32) & 1) == 0)
            {
              v142[0] = *(void **)(*(_QWORD *)(v4 + 16) + 8 * (v32 + 1));
              llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)v146, (uint64_t *)v142);
              v142[0] = *(void **)(v3 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF) + 32 * v32);
              llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)v151, (uint64_t *)v142);
              v31 = *(_DWORD *)(v4 + 12);
            }
            ++v32;
          }
          while (v32 < (v31 - 1));
        }
        llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)v146, (uint64_t *)(a1 + 80));
        MTLBoundsCheck::SharedPassData::indexForInstruction(*(MTLBoundsCheck::SharedPassData **)(a1 + 64), (llvm::Instruction *)v3);
        v142[0] = (void *)llvm::ConstantInt::get();
        llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)v151, (uint64_t *)v142);
        v33 = llvm::FunctionType::get();
        v35 = *(void **)v135;
        v34 = *(void **)(v135 + 8);
        v143 = 261;
        v142[0] = v35;
        v142[1] = v34;
        v36 = llvm::Function::Create(v33, 7, (uint64_t)v142, *(_QWORD *)(a1 + 48));
        *(_WORD *)(v36 + 18) = *(_WORD *)(v36 + 18) & 0xC00F | *(_WORD *)(v2 + 18) & 0x3FF0;
        llvm::MDTuple::getImpl();
        llvm::Value::setMetadata();
        llvm::Function::addFnAttr();
        llvm::Function::addFnAttr();
        v130 = 0;
        v37 = *(llvm::BasicBlock **)(a1 + 40);
        v142[0] = "entry";
        v143 = 259;
        v130 = (llvm::BasicBlock *)llvm::BasicBlock::Create(v37, (llvm::LLVMContext *)v142, (const llvm::Twine *)v36, 0, v38);
        v39 = *(llvm::BasicBlock **)(a1 + 40);
        v142[0] = "pass";
        v143 = 259;
        v123 = (llvm::Function *)llvm::BasicBlock::Create(v39, (llvm::LLVMContext *)v142, (const llvm::Twine *)v36, 0, v40);
        v41 = *(llvm::BasicBlock **)(a1 + 40);
        v142[0] = "fail";
        v143 = 259;
        v122 = (llvm::BasicBlock *)llvm::BasicBlock::Create(v41, (llvm::LLVMContext *)v142, (const llvm::Twine *)v36, 0, v42);
        v43 = *(llvm::BasicBlock **)(a1 + 40);
        v142[0] = "ret";
        v143 = 259;
        v118 = (llvm::BasicBlock *)llvm::BasicBlock::Create(v43, (llvm::LLVMContext *)v142, (const llvm::Twine *)v36, 0, v44);
        v3 = llvm::Instruction::clone((llvm::Instruction *)v3);
        if ((*(_WORD *)(v36 + 18) & 1) != 0)
          llvm::Function::BuildLazyArguments((llvm::Function *)v36);
        v116 = *(_QWORD *)(v36 + 96);
        v117 = *(_QWORD *)(v36 + 88);
        MTLIRBuilder::MTLIRBuilder<llvm::BasicBlock *&>((uint64_t)v142, &v130);
        if (!(_DWORD)v16)
        {
LABEL_87:
          v54 = **(llvm::Type ***)(v4 + 16);
          v144 = v118;
          v145 = (char *)v118 + 40;
          if (v54 == (llvm::Type *)llvm::Type::getVoidTy(*(llvm::Type **)(a1 + 40), v45))
          {
            llvm::IRBuilderBase::CreateRetVoid((llvm::ReturnInst **)v142, v55, v56, v57);
            PHI = 0;
          }
          else
          {
            v141 = 257;
            PHI = (llvm::Value *)llvm::IRBuilderBase::CreatePHI((llvm::IRBuilderBase *)v142, v54, 0, (const llvm::Twine *)&v138, v58);
            llvm::IRBuilderBase::CreateRet((llvm::ReturnInst **)v142, PHI, v60, v61);
          }
          v144 = v122;
          v145 = (char *)v122 + 40;
          v63 = *(llvm::Type **)(a1 + 72);
          v141 = 257;
          v120 = (llvm::PHINode *)llvm::IRBuilderBase::CreatePHI((llvm::IRBuilderBase *)v142, v63, 0, (const llvm::Twine *)&v138, v62);
          v64 = *(llvm::Type **)(a1 + 88);
          v141 = 257;
          v121 = (llvm::PHINode *)llvm::IRBuilderBase::CreatePHI((llvm::IRBuilderBase *)v142, v64, 0, (const llvm::Twine *)&v138, v65);
          v67 = *(MTLBoundsCheck::SharedPassData **)(a1 + 64);
          if ((*(_BYTE *)(*((_QWORD *)v67 + 9) + 24) & 2) != 0)
          {
            v68 = *(llvm::Type **)(a1 + 80);
            v141 = 257;
            v119 = (llvm::PHINode *)llvm::IRBuilderBase::CreatePHI((llvm::IRBuilderBase *)v142, v68, 0, (const llvm::Twine *)&v138, v66);
            v67 = *(MTLBoundsCheck::SharedPassData **)(a1 + 64);
          }
          else
          {
            v119 = 0;
          }
          ImageIDFunction = MTLBoundsCheck::SharedPassData::getOrInsertGetImageIDFunction(v67);
          if (ImageIDFunction)
            v70 = *((_QWORD *)ImageIDFunction + 3);
          else
            v70 = 0;
          v141 = 257;
          v71 = (llvm::Value *)llvm::IRBuilderBase::CreateCall((uint64_t)v142, v70, (uint64_t)ImageIDFunction, 0, 0, (uint64_t)&v138, 0);
          inserted = MTLBoundsCheck::SharedPassData::getOrInsertReportBufferGV(*(llvm::Type ****)(a1 + 64));
          v73 = *(llvm::Type **)(inserted + 24);
          v141 = 257;
          AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v142, v73, inserted, 0, 0, (uint64_t)&v138);
          v75 = MTLBoundsCheck::SharedPassData::getOrInsertDrawIDBufferGV(*(MTLBoundsCheck::SharedPassData **)(a1 + 64));
          v76 = *(llvm::Type **)(v75 + 24);
          v141 = 257;
          v77 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v142, v76, v75, 0, 0, (uint64_t)&v138);
          v78 = *(_QWORD *)(a1 + 64);
          if ((*(_BYTE *)(*(_QWORD *)(v78 + 72) + 21) & 2) != 0)
          {
            v82 = MTLBoundsCheck::SharedPassData::getOrInsertStackTraceGV((llvm::Type ***)v78);
            v83 = *(llvm::Type **)(v82 + 24);
            v141 = 257;
            v81 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v142, v83, v82, 0, 0, (uint64_t)&v138);
          }
          else
          {
            Int8PtrTy = (llvm::ConstantPointerNull *)llvm::Type::getInt8PtrTy(*(llvm::Type **)(a1 + 40), 0);
            v81 = llvm::ConstantPointerNull::get(Int8PtrTy, v80);
          }
          v84 = (llvm::Value *)v81;
          v85 = (llvm::Value *)llvm::ConstantInt::get();
          MTLIRBuilder::CreateBadAccessCall((llvm::Constant **)v142, AlignedLoad, v77, v84, v71, v120, v85, v121, (llvm::Value *)(v117 + 40 * v116 - 40), v119);
          if (PHI)
          {
            NullValue = (llvm::Value *)llvm::Constant::getNullValue(v54, v86);
            llvm::PHINode::addIncoming(PHI, NullValue, v122);
          }
          llvm::IRBuilderBase::CreateBr((llvm::IRBuilderBase *)v142, v118, v87);
          v144 = v123;
          v145 = (char *)v123 + 40;
          v141 = 257;
          llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)v142, v3, (uint64_t)&v138);
          if (PHI)
            llvm::PHINode::addIncoming(PHI, (llvm::Value *)v3, v123);
          llvm::IRBuilderBase::CreateBr((llvm::IRBuilderBase *)v142, v118, v89);
          v138 = v140;
          v139 = 0x400000000;
          if ((_DWORD)v156)
          {
            v91 = v155;
            v92 = &v155[3 * v156];
            do
            {
              v93 = llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::operator[](v131, (llvm::Value **)v91);
              llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v128, 3u, v93);
              v127 = (llvm::Value *)v91[1];
              if (*((unsigned __int8 *)v127 + 16) >= 0x15u)
                v127 = (llvm::Value *)llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::operator[](v131, &v127)[2];
              if (MTLBoundsCheck::checkAddressSpace((uint64_t)v129))
              {
                v95 = MTLBoundsCheck::gpuOperationToResourceUsage(*((_DWORD *)v91 + 4));
                if (v95)
                {
                  v126 = 0;
                  v96 = *(llvm::BasicBlock **)(a1 + 40);
                  v125 = 257;
                  v126 = (llvm::BasicBlock *)llvm::BasicBlock::Create(v96, (llvm::LLVMContext *)v124, (const llvm::Twine *)v36, v123, v94);
                  v144 = v126;
                  v145 = (char *)v126 + 40;
                  llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)&v138, (uint64_t *)&v126);
                  v97 = v129;
                  v98 = *(llvm::Type **)(a1 + 96);
                  v99 = (llvm::Type *)llvm::PointerType::get();
                  v125 = 257;
                  PointerBitCastOrAddrSpaceCast = llvm::IRBuilderBase::CreatePointerBitCastOrAddrSpaceCast((llvm::IRBuilderBase *)v142, v97, v99, (const llvm::Twine *)v124);
                  v125 = 257;
                  GEP = (MTLBoundsCheck *)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)v142, v98, (llvm::Value *)PointerBitCastOrAddrSpaceCast, v127, (const llvm::Twine *)v124);
                  v102 = (llvm::CmpInst **)MTLMemoryCheckPass::createQueryMemoryUsageCall(a1, GEP, v95);
                  v125 = 257;
                  llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)v142, (uint64_t)v102, (uint64_t)v124);
                  v103 = llvm::ConstantInt::get();
                  v125 = 257;
                  ICmp = (llvm::BasicBlock *)llvm::IRBuilderBase::CreateICmp((uint64_t)v142, 32, v102, v103, (uint64_t)v124);
                  v105 = (llvm::Value *)llvm::ConstantInt::get();
                  llvm::PHINode::addIncoming(v121, v105, v126);
                  v106 = *(_QWORD *)(a1 + 72);
                  v125 = 257;
                  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v142, 47, (uint64_t)v129, v106, (uint64_t)v124);
                  llvm::PHINode::addIncoming(v120, Cast, v126);
                  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 72) + 24) & 2) != 0)
                  {
                    v108 = (llvm::Value *)llvm::ConstantInt::get();
                    llvm::PHINode::addIncoming(v119, v108, v126);
                  }
                  llvm::IRBuilderBase::CreateCondBr((uint64_t *)v142, ICmp, v123, v122, 0, 0);
                }
              }
              llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v128);
              v91 += 3;
            }
            while (v91 != v92);
          }
          for (i = 0; (unint64_t)v139 - 1 > i; ++i)
          {
            v110 = (uint64_t *)((char *)v138 + 8 * i);
            v111 = *(_QWORD *)(*v110 + 40);
            if (v111 == *v110 + 40)
            {
              v114 = 0;
            }
            else
            {
              v112 = v111 - 24;
              if (v111)
                v113 = v111 - 24;
              else
                v113 = 0;
              if (*(unsigned __int8 *)(v113 + 16) - 29 >= 0xB)
                v114 = 0;
              else
                v114 = v112;
            }
            llvm::BranchInst::setSuccessor(v114, 0, v110[1]);
          }
          llvm::BranchInst::Create(*(llvm::BranchInst **)v138, v130, v90);
          if (v138 != v140)
            free(v138);
          llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder(v142);
          if (v146[0] != v147)
            free(v146[0]);
          llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::~ValueMap((uint64_t)v131);
          goto LABEL_129;
        }
        v46 = 0;
        v47 = 0;
        while (1)
        {
          if ((*(_WORD *)(v2 + 18) & 1) != 0)
          {
            llvm::Function::BuildLazyArguments((llvm::Function *)v2);
            v48 = *(_QWORD *)(v2 + 88);
            if ((*(_WORD *)(v2 + 18) & 1) != 0)
            {
              llvm::Function::BuildLazyArguments((llvm::Function *)v2);
              v49 = *(_QWORD *)(v2 + 88);
              goto LABEL_80;
            }
          }
          else
          {
            v48 = *(_QWORD *)(v2 + 88);
          }
          v49 = v48;
LABEL_80:
          v138 = (void *)(v49 + 40 * v46);
          v50 = (llvm::ValueHandleBase *)llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::operator[](v131, (llvm::Value **)&v138);
          llvm::ValueHandleBase::operator=(v50, v48 + 40 * v46);
          if (((*((_QWORD *)v153 + (v46 >> 6)) >> v46) & 1) == 0)
          {
            if ((*(_WORD *)(v36 + 18) & 1) != 0)
              llvm::Function::BuildLazyArguments((llvm::Function *)v36);
            v51 = *(_QWORD *)(v36 + 88);
            if ((*(_WORD *)(v2 + 18) & 1) != 0)
              llvm::Function::BuildLazyArguments((llvm::Function *)v2);
            v138 = (void *)(*(_QWORD *)(v2 + 88) + 40 * v46);
            v52 = (llvm::ValueHandleBase *)llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::operator[](v131, (llvm::Value **)&v138);
            v53 = v51 + 40 * v47;
            llvm::ValueHandleBase::operator=(v52, v53);
            llvm::CallBase::setArgOperand(v3, v46, v53);
            ++v47;
          }
          if (++v46 == v16)
            goto LABEL_87;
        }
      }
      if (*(_QWORD *)v136 != 0x6D656D2E6D766C6CLL || *((_DWORD *)v136 + 2) != 1702260589)
      {
        if (v137 >= 0x11)
        {
          v20 = *(_QWORD *)v136 == 0x6D6F74612E726961 && *((_QWORD *)v136 + 1) == 0x61626F6C672E6369;
          if (v20 && v136[16] == 108)
          {
            v22 = llvm::StringRef::find() == -1 ? -3 : -4;
            v23 = (v22 + v16);
            if (__CFADD__(v22, (_DWORD)v16))
            {
              v24 = v3 + 32 * v23;
              do
              {
                *((_QWORD *)v153 + (v23 >> 6)) |= 1 << v23;
                llvm::raw_ostream::operator<<((llvm::raw_ostream *)v134, ".", 1uLL);
                llvm::raw_ostream::operator<<();
                LODWORD(v23) = v23 + 1;
                v24 += 32;
              }
              while (!__CFADD__(v22++, 1));
            }
          }
        }
        goto LABEL_59;
      }
    }
    if (v16 >= 4)
    {
      v26 = 3;
      if (v15 == 6)
        v26 = 4;
      *(_QWORD *)v153 |= 1 << v26;
      llvm::raw_ostream::operator<<((llvm::raw_ostream *)v134, ".", 1uLL);
      llvm::raw_ostream::operator<<();
      if (v15 == 6)
      {
        *(_QWORD *)v153 |= 8uLL;
        llvm::raw_ostream::operator<<((llvm::raw_ostream *)v134, ".", 1uLL);
        llvm::raw_ostream::operator<<();
      }
    }
    goto LABEL_59;
  }
LABEL_21:
  v9 = 0;
LABEL_136:
  if (v11 != v157)
    free(v11);
  return v9;
}

void sub_240FF1CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  uint64_t v43;
  void *v45;

  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&a43);
  if (STACK[0x280] != a17)
    free((void *)STACK[0x280]);
  if (STACK[0x2D8] != a18)
    free((void *)STACK[0x2D8]);
  if ((unint64_t *)STACK[0x308] != &STACK[0x318])
    free((void *)STACK[0x308]);
  v45 = *(void **)(v43 - 224);
  if (v45 != (void *)a19)
    free(v45);
  _Unwind_Resume(a1);
}

uint64_t MTLMemoryCheckPass::createQueryMemoryUsageCall(uint64_t a1, MTLBoundsCheck *a2, int a3)
{
  int v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  MTLBoundsCheck *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[4];
  __int16 v13;
  MTLBoundsCheck *v14[2];

  v14[1] = *(MTLBoundsCheck **)MEMORY[0x24BDAC8D0];
  v4 = a3 - 1;
  if ((a3 - 1) > 2)
    return 0;
  v5 = qword_24105A808[v4];
  v6 = off_25111F320[v4];
  v7 = *(_QWORD *)(a1 + 48);
  v13 = 261;
  v12[0] = v6;
  v12[1] = v5;
  v8 = *(MTLBoundsCheck **)(a1 + 96);
  v14[0] = (MTLBoundsCheck *)llvm::PointerType::get();
  v9 = getMangledFunction<llvm::PointerType *>(v7, (llvm::Twine *)v12, v8, v14);
  if (!llvm::Value::getMetadata())
  {
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
  }
  if (!llvm::Value::getMetadata())
  {
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
  }
  if (v9)
    v10 = *(_QWORD *)(v9 + 24);
  else
    v10 = 0;
  v14[0] = a2;
  v13 = 257;
  return llvm::CallInst::Create(v10, v9, (uint64_t)v14, 1, 0, 0);
}

uint64_t llvm::IRBuilderBase::CreateBr(llvm::IRBuilderBase *this, llvm::BasicBlock *a2, llvm::Instruction *a3)
{
  uint64_t v4;
  _BYTE v6[32];
  __int16 v7;

  v4 = llvm::BranchInst::Create(a2, 0, a3);
  v7 = 257;
  return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, v4, (uint64_t)v6);
}

uint64_t llvm::BranchInst::setSuccessor(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = result - 32;
  v4 = (_QWORD *)(result - 32 - 32 * a2);
  if (*v4)
  {
    v5 = v3 - 32 * a2;
    v7 = *(_QWORD **)(v5 + 16);
    v6 = (_QWORD *)(v5 + 16);
    *v7 = *(v6 - 1);
    v8 = *(v6 - 1);
    if (v8)
      *(_QWORD *)(v8 + 16) = *v6;
  }
  *v4 = a3;
  if (a3)
  {
    v11 = *(_QWORD *)(a3 + 8);
    v9 = (_QWORD *)(a3 + 8);
    v10 = v11;
    v12 = v3 - 32 * a2;
    *(_QWORD *)(v12 + 8) = v11;
    if (v11)
      *(_QWORD *)(v10 + 16) = v12 + 8;
    *(_QWORD *)(v12 + 16) = v9;
    *v9 = v4;
  }
  return result;
}

uint64_t llvm::BranchInst::Create(llvm::BranchInst *this, llvm::BasicBlock *a2, llvm::BasicBlock *a3)
{
  uint64_t v5;

  v5 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x24268C894](v5, this, a2);
  return v5;
}

void sub_240FF20F8(_Unwind_Exception *a1)
{
  void *v1;

  llvm::User::operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *llvm::SmallVector<unsigned long,6u>::SmallVector(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = a1 + 2;
  a1[1] = 0x600000000;
  llvm::SmallVectorImpl<unsigned long>::assign((uint64_t)a1, a2, *a3);
  return a1;
}

void sub_240FF2148(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  void *v3;

  v3 = v2;
  if (*v1 != v3)
    free(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t llvm::SmallVectorImpl<unsigned long>::assign(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;

  if (*(unsigned int *)(a1 + 12) < (unint64_t)a2)
    return llvm::SmallVectorTemplateBase<llvm::Value *,true>::growAndAssign(a1, a2, a3);
  v3 = *(uint64_t **)a1;
  v4 = *(unsigned int *)(a1 + 8);
  if (v4 >= a2)
    v5 = a2;
  else
    v5 = *(unsigned int *)(a1 + 8);
  if (v5)
  {
    v6 = *(uint64_t **)a1;
    do
    {
      *v6++ = a3;
      --v5;
    }
    while (v5);
  }
  v7 = v4 - a2;
  if (v4 < a2)
  {
    v8 = &v3[v4];
    do
      *v8++ = a3;
    while (!__CFADD__(v7++, 1));
  }
  *(_DWORD *)(a1 + 8) = a2;
  return a1;
}

void llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::init(uint64_t a1, int a2)
{
  unint64_t v3;
  unint64_t v4;

  if (a2)
  {
    v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    *(_DWORD *)(a1 + 16) = v4;
    *(_QWORD *)a1 = MEMORY[0x24268CD5C]((unint64_t)v4 << 6, 8);
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::initEmpty(a1);
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
  }
}

uint64_t AddSat(uint64_t a1, uint64_t a2)
{
  if ((unint64_t)(a2 + a1) >= 0xFFFFFFFF)
    return 0xFFFFFFFFLL;
  else
    return a2 + a1;
}

uint64_t createMTLGEPConversionPass(MTLBoundsCheck::SharedPassData *a1)
{
  uint64_t v2;

  v2 = operator new();
  MTLGEPConversionPass::MTLGEPConversionPass(v2, (uint64_t)a1);
  return v2;
}

void sub_240FF2294(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x24268D8F0](v1, 0x10E1C405FBF365DLL);
  _Unwind_Resume(a1);
}

double MTLGEPConversionPass::MTLGEPConversionPass(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  double result;

  v3 = MetalModulePass::MetalModulePass(a1, (uint64_t)&MTLGEPConversionPass::ID, a2);
  *(_QWORD *)v3 = &off_25111F348;
  *(_QWORD *)(v3 + 184) = 0;
  *(_QWORD *)(v3 + 208) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v3 + 216) = v3 + 232;
  *(_QWORD *)(v3 + 224) = 0x2000000000;
  result = 0.0;
  *(_OWORD *)(v3 + 488) = 0u;
  *(_OWORD *)(v3 + 504) = 0u;
  *(_DWORD *)(v3 + 520) = 1065353216;
  *(_OWORD *)(v3 + 528) = 0u;
  *(_OWORD *)(v3 + 544) = 0u;
  *(_DWORD *)(v3 + 560) = 1065353216;
  *(_OWORD *)(v3 + 568) = 0u;
  *(_OWORD *)(v3 + 584) = 0u;
  *(_DWORD *)(v3 + 600) = 1065353216;
  *(_OWORD *)(v3 + 608) = 0u;
  *(_OWORD *)(v3 + 624) = 0u;
  *(_DWORD *)(v3 + 640) = 1065353216;
  return result;
}

void MTLGEPConversionPass::~MTLGEPConversionPass(MTLGEPConversionPass *this)
{
  char *v2;

  *(_QWORD *)this = &off_25111F348;
  std::__hash_table<llvm::Value *,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,std::allocator<llvm::Value *>>::~__hash_table((uint64_t)this + 608);
  std::__hash_table<llvm::Value *,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,std::allocator<llvm::Value *>>::~__hash_table((uint64_t)this + 568);
  std::__hash_table<std::__hash_value_type<llvm::Value *,llvm::Optional<GEPExpressionSum>>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::Optional<GEPExpressionSum>>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::Optional<GEPExpressionSum>>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,llvm::Optional<GEPExpressionSum>>>>::~__hash_table((uint64_t)this + 528);
  std::__hash_table<std::__hash_value_type<llvm::Value *,llvm::SmallVector<std::pair<llvm::Instruction *,llvm::Value *>,8u>>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::SmallVector<std::pair<llvm::Instruction *,llvm::Value *>,8u>>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::SmallVector<std::pair<llvm::Instruction *,llvm::Value *>,8u>>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,llvm::SmallVector<std::pair<llvm::Instruction *,llvm::Value *>,8u>>>>::~__hash_table((uint64_t)this + 488);
  v2 = (char *)*((_QWORD *)this + 27);
  if (v2 != (char *)this + 232)
    free(v2);
  *(_QWORD *)this = &off_25111E050;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 136);
  llvm::Pass::~Pass(this);
}

{
  char *v2;

  *(_QWORD *)this = &off_25111F348;
  std::__hash_table<llvm::Value *,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,std::allocator<llvm::Value *>>::~__hash_table((uint64_t)this + 608);
  std::__hash_table<llvm::Value *,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,std::allocator<llvm::Value *>>::~__hash_table((uint64_t)this + 568);
  std::__hash_table<std::__hash_value_type<llvm::Value *,llvm::Optional<GEPExpressionSum>>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::Optional<GEPExpressionSum>>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::Optional<GEPExpressionSum>>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,llvm::Optional<GEPExpressionSum>>>>::~__hash_table((uint64_t)this + 528);
  std::__hash_table<std::__hash_value_type<llvm::Value *,llvm::SmallVector<std::pair<llvm::Instruction *,llvm::Value *>,8u>>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::SmallVector<std::pair<llvm::Instruction *,llvm::Value *>,8u>>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::SmallVector<std::pair<llvm::Instruction *,llvm::Value *>,8u>>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,llvm::SmallVector<std::pair<llvm::Instruction *,llvm::Value *>,8u>>>>::~__hash_table((uint64_t)this + 488);
  v2 = (char *)*((_QWORD *)this + 27);
  if (v2 != (char *)this + 232)
    free(v2);
  *(_QWORD *)this = &off_25111E050;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 136);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x24268D8F0);
}

uint64_t MTLGEPConversionPass::doInitialization(MTLGEPConversionPass *this, llvm::Module *a2)
{
  uint64_t v3;

  v3 = MetalModulePass::doInitialization(this, a2);
  *((_DWORD *)this + 46) = llvm::Module::getMDKindID();
  *((_DWORD *)this + 47) = llvm::Module::getMDKindID();
  return v3;
}

uint64_t MTLGEPConversionPass::getAnalysisUsage(MTLGEPConversionPass *this, llvm::AnalysisUsage *a2)
{
  return llvm::AnalysisUsage::setPreservesCFG(a2);
}

uint64_t MTLGEPConversionPass::runOnModule(MTLGEPConversionPass *this, llvm::Module *a2)
{
  char *v4;
  uint64_t i;
  llvm::Function *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  MetalModulePass::runOnModule(this, a2);
  std::__hash_table<std::__hash_value_type<llvm::Value *,llvm::SmallVector<std::pair<llvm::Instruction *,llvm::Value *>,8u>>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::SmallVector<std::pair<llvm::Instruction *,llvm::Value *>,8u>>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::SmallVector<std::pair<llvm::Instruction *,llvm::Value *>,8u>>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,llvm::SmallVector<std::pair<llvm::Instruction *,llvm::Value *>,8u>>>>::clear((uint64_t)this + 488);
  std::__hash_table<std::__hash_value_type<llvm::Value *,MTLBoundsCheckPass::KnownBufferData>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,MTLBoundsCheckPass::KnownBufferData>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,MTLBoundsCheckPass::KnownBufferData>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,MTLBoundsCheckPass::KnownBufferData>>>::clear((_QWORD *)this + 71);
  v4 = (char *)a2 + 24;
  for (i = *((_QWORD *)a2 + 4); (char *)i != v4; i = *(_QWORD *)(i + 8))
  {
    if (i)
      v6 = (llvm::Function *)(i - 56);
    else
      v6 = 0;
    if ((llvm::GlobalValue::isDeclaration(v6) & 1) == 0)
      MTLGEPConversionPass::runOnFunction((llvm::DataLayout **)this, v6);
  }
  v7 = *((unsigned int *)this + 56);
  if ((_DWORD)v7)
  {
    v8 = *((_QWORD *)this + 27);
    v9 = 8 * v7;
    do
    {
      v8 += 8;
      llvm::Instruction::setMetadata();
      v9 -= 8;
    }
    while (v9);
  }
  *((_DWORD *)this + 56) = 0;
  return 0;
}

uint64_t std::__hash_table<std::__hash_value_type<llvm::Value *,llvm::Optional<GEPExpressionSum>>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::Optional<GEPExpressionSum>>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::Optional<GEPExpressionSum>>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,llvm::Optional<GEPExpressionSum>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<llvm::Value *,llvm::Optional<GEPExpressionSum>>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::Optional<GEPExpressionSum>>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::Optional<GEPExpressionSum>>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,llvm::Optional<GEPExpressionSum>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<llvm::Value *,llvm::Optional<GEPExpressionSum>>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::Optional<GEPExpressionSum>>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::Optional<GEPExpressionSum>>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,llvm::Optional<GEPExpressionSum>>>>::__deallocate_node(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = v2;
      v2 = (_QWORD *)*v2;
      if (*((_BYTE *)v3 + 240))
      {
        v4 = (_QWORD *)v3[4];
        if (v4 != v3 + 6)
          free(v4);
      }
      operator delete(v3);
    }
    while (v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<llvm::Value *,llvm::SmallVector<std::pair<llvm::Instruction *,llvm::Value *>,8u>>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::SmallVector<std::pair<llvm::Instruction *,llvm::Value *>,8u>>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::SmallVector<std::pair<llvm::Instruction *,llvm::Value *>,8u>>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,llvm::SmallVector<std::pair<llvm::Instruction *,llvm::Value *>,8u>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<llvm::Value *,llvm::SmallVector<std::pair<llvm::Instruction *,llvm::Value *>,8u>>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::SmallVector<std::pair<llvm::Instruction *,llvm::Value *>,8u>>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::SmallVector<std::pair<llvm::Instruction *,llvm::Value *>,8u>>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,llvm::SmallVector<std::pair<llvm::Instruction *,llvm::Value *>,8u>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<llvm::Value *,llvm::SmallVector<std::pair<llvm::Instruction *,llvm::Value *>,8u>>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::SmallVector<std::pair<llvm::Instruction *,llvm::Value *>,8u>>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::SmallVector<std::pair<llvm::Instruction *,llvm::Value *>,8u>>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,llvm::SmallVector<std::pair<llvm::Instruction *,llvm::Value *>,8u>>>>::__deallocate_node(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (_QWORD *)v2[3];
      if (v4 != v2 + 5)
        free(v4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void MTLGEPConversionPass::runOnFunction(llvm::DataLayout **this, llvm::Function *a2)
{
  uint64_t v4;
  uint64_t *v5;
  llvm::DataLayout *i;
  llvm::Value *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  char *v13;
  _QWORD *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  char canStrideFold;
  _QWORD *v19;
  uint64_t v20;
  llvm::Instruction **v21;
  llvm::Instruction **v22;
  llvm::Instruction *v23;
  char *v24;
  _QWORD *v25[2];
  llvm::Value *v26;
  _BYTE v27[32];
  llvm::Value *v28;
  char v29[32];
  MTLGEPConversionPass *v30;
  llvm::Value **v31;
  void *v32;
  _BYTE v33[192];
  char v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[9];

  v38[7] = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)a2 + 10);
  if (v4)
    v5 = (uint64_t *)(v4 - 24);
  else
    v5 = 0;
  v31 = (llvm::Value **)v5;
  MTLIRBuilder::MTLIRBuilder<llvm::BasicBlock *>((uint64_t)&v35, (llvm::BasicBlock **)&v31);
  v30 = (MTLGEPConversionPass *)this;
  llvm::InstVisitor<MTLGEPConversionPass::FoldVisitor,void>::visit((uint64_t)v29, (uint64_t)a2);
  for (i = this[63]; i; i = *(llvm::DataLayout **)i)
  {
    v7 = (llvm::Value *)*((_QWORD *)i + 2);
    v28 = v7;
    if (*((_DWORD *)i + 8))
    {
      MetalModulePass::getStaticBoundsInfo((MetalModulePass *)this, v7, (uint64_t)v27);
      if (v27[24] && v27[21] != 0)
      {
        v9 = *((unsigned int *)i + 8);
        if ((_DWORD)v9)
        {
          v10 = *((_QWORD *)i + 3);
          v11 = v10 + 16 * v9;
          v12 = 1;
          do
          {
            v26 = *(llvm::Value **)(v10 + 8);
            v25[0] = &v26;
            v13 = std::__hash_table<std::__hash_value_type<llvm::Value *,llvm::Optional<GEPExpressionSum>>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::Optional<GEPExpressionSum>>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::Optional<GEPExpressionSum>>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,llvm::Optional<GEPExpressionSum>>>>::__emplace_unique_key_args<llvm::Value *,std::piecewise_construct_t const&,std::tuple<llvm::Value * const&>,std::tuple<>>((uint64_t)(this + 66), &v26, (uint64_t)&std::piecewise_construct, v25);
            llvm::optional_detail::OptionalStorage<GEPExpressionSum,false>::OptionalStorage(&v31, (uint64_t)(v13 + 24));
            v25[0] = (_QWORD *)llvm::DataLayout::getTypeAllocSize(this[7], **(llvm::Type ***)(*(_QWORD *)v26 + 16));
            v25[1] = v14;
            v15 = llvm::TypeSize::operator unsigned long long();
            if (v12 >= v15)
              v16 = v15;
            else
              v16 = v12;
            if (v16 == 1)
            {
              v17 = 1;
            }
            else
            {
              do
              {
                v17 = v16;
                canStrideFold = GEPExpressionSum::canStrideFold((uint64_t)&v31, v16, 1);
                v16 = 0;
              }
              while ((canStrideFold & 1) == 0);
            }
            if (v17 < v12)
              v12 = v17;
            if (v34 && v32 != v33)
              free(v32);
            v10 += 16;
          }
          while (v10 != v11);
        }
        else
        {
          v12 = 1;
        }
        v31 = &v28;
        v19 = std::__hash_table<std::__hash_value_type<llvm::Value *,ArgumentLoadInfo>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,ArgumentLoadInfo>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,ArgumentLoadInfo>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,ArgumentLoadInfo>>>::__emplace_unique_key_args<llvm::Value *,std::piecewise_construct_t const&,std::tuple<llvm::Value * const&>,std::tuple<>>((uint64_t)(this + 71), &v28, (uint64_t)&std::piecewise_construct, &v31);
        *((_DWORD *)v19 + 6) = v12;
        v20 = *((unsigned int *)i + 8);
        if ((_DWORD)v20)
        {
          v21 = (llvm::Instruction **)*((_QWORD *)i + 3);
          v22 = &v21[2 * v20];
          do
          {
            v23 = *v21;
            v26 = v21[1];
            v25[0] = &v26;
            v24 = std::__hash_table<std::__hash_value_type<llvm::Value *,llvm::Optional<GEPExpressionSum>>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::Optional<GEPExpressionSum>>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::Optional<GEPExpressionSum>>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,llvm::Optional<GEPExpressionSum>>>>::__emplace_unique_key_args<llvm::Value *,std::piecewise_construct_t const&,std::tuple<llvm::Value * const&>,std::tuple<>>((uint64_t)(this + 66), &v26, (uint64_t)&std::piecewise_construct, v25);
            llvm::optional_detail::OptionalStorage<GEPExpressionSum,false>::OptionalStorage(&v31, (uint64_t)(v24 + 24));
            if (v34)
            {
              if (GEPExpressionSum::canStrideFold((uint64_t)&v31, *((_DWORD *)v19 + 6), 1))
                MTLGEPConversionPass::foldLoad((MTLGEPConversionPass *)this, v28, v23, v26, (uint64_t **)&v31, *((_DWORD *)v19 + 6));
              if (v34 && v32 != v33)
                free(v32);
            }
            v21 += 2;
          }
          while (v21 != v22);
        }
      }
    }
  }
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v38);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v37);
  if (v35 != &v36)
    free(v35);
}

void sub_240FF2934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,int a52,void *a53)
{
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder(&a53);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<llvm::Value *,llvm::SmallVector<std::pair<llvm::Instruction *,llvm::Value *>,8u>>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::SmallVector<std::pair<llvm::Instruction *,llvm::Value *>,8u>>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::SmallVector<std::pair<llvm::Instruction *,llvm::Value *>,8u>>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,llvm::SmallVector<std::pair<llvm::Instruction *,llvm::Value *>,8u>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<llvm::Value *,llvm::SmallVector<std::pair<llvm::Instruction *,llvm::Value *>,8u>>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::SmallVector<std::pair<llvm::Instruction *,llvm::Value *>,8u>>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::SmallVector<std::pair<llvm::Instruction *,llvm::Value *>,8u>>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,llvm::SmallVector<std::pair<llvm::Instruction *,llvm::Value *>,8u>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

uint64_t GEPExpressionSum::canStrideFold(uint64_t this, unsigned int a2, int a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  if (a3)
  {
    v3 = (_QWORD *)(*(_QWORD *)this + 24);
    if (*(_DWORD *)(*(_QWORD *)this + 32) >= 0x41u)
      v3 = (_QWORD *)*v3;
    if (*v3 % (unint64_t)a2)
      return 0;
  }
  v4 = *(unsigned int *)(this + 16);
  if (!(_DWORD)v4)
    return 1;
  v5 = *(_QWORD *)(this + 8);
  v6 = 24 * v4;
  LOBYTE(this) = 1;
  do
  {
    v7 = (_QWORD *)(*(_QWORD *)v5 + 24);
    if (*(_DWORD *)(*(_QWORD *)v5 + 32) >= 0x41u)
      v7 = (_QWORD *)*v7;
    this = (*v7 % (unint64_t)a2 == 0) & this;
    v5 += 24;
    v6 -= 24;
  }
  while (v6);
  return this;
}

void MTLGEPConversionPass::foldLoad(MTLGEPConversionPass *this, llvm::Value *a2, llvm::Instruction *a3, llvm::Value *a4, uint64_t **a5, int a6)
{
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t TypeForStride;
  llvm::raw_ostream *v15;
  llvm::raw_ostream *v16;
  MTLBoundsCheck *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  llvm::Value *v21;
  llvm::Type *v22;
  uint64_t v23;
  uint64_t v24;
  llvm::Value *Cast;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  void **v29;
  __int128 v30;
  void **v31;
  void **v32;
  void **v33;
  void **v34;
  void **v35;
  __int128 *v36;
  __int128 *v37;
  void **v38;
  void **v39;
  void **v40;
  void **v41;
  void **v42;
  void **v43;
  __int128 *v44;
  __int128 *v45;
  void **v46;
  void **v47;
  void **v48;
  void **v49;
  void **v50;
  void **v51;
  __int128 *v52;
  llvm::Value *v53;
  void *v54[4];
  __int16 v55;
  void *v56[2];
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[9];

  v59[7] = *MEMORY[0x24BDAC8D0];
  v53 = a3;
  MTLIRBuilder::MTLIRBuilder<llvm::Instruction *&>((uint64_t)v56, &v53);
  v11 = GEPExpressionSum::emitDynamicALUOps(a5, (MTLIRBuilder *)v56);
  v54[0] = 0;
  *(_QWORD *)&v28 = 0;
  *(_QWORD *)&v30 = &v28;
  *((_QWORD *)&v30 + 1) = v54;
  v31 = v54;
  v32 = v54;
  v33 = v54;
  v34 = v54;
  v35 = v54;
  v36 = &v28;
  v37 = &v28;
  v38 = v54;
  v39 = v54;
  v40 = v54;
  v41 = v54;
  v42 = v54;
  v43 = v54;
  v44 = &v28;
  v45 = &v28;
  v46 = v54;
  v47 = v54;
  v48 = v54;
  v49 = v54;
  v50 = v54;
  v51 = v54;
  v52 = &v28;
  if (llvm::PatternMatch::match_combine_or<llvm::PatternMatch::match_combine_or<llvm::PatternMatch::BinaryOp_match<llvm::PatternMatch::bind_ty<llvm::Value>,llvm::PatternMatch::match_combine_or<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,llvm::PatternMatch::match_combine_or<llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,39u>,llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,40u>>>,13u,false>,llvm::PatternMatch::BinaryOp_match<llvm::PatternMatch::match_combine_or<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,llvm::PatternMatch::match_combine_or<llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,39u>,llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,40u>>>,llvm::PatternMatch::bind_ty<llvm::Value>,13u,false>>,llvm::PatternMatch::match_combine_or<llvm::PatternMatch::CastClass_match<llvm::PatternMatch::match_combine_or<llvm::PatternMatch::BinaryOp_match<llvm::PatternMatch::bind_ty<llvm::Value>,llvm::PatternMatch::match_combine_or<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,llvm::PatternMatch::match_combine_or<llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,39u>,llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,40u>>>,13u,false>,llvm::PatternMatch::BinaryOp_match<llvm::PatternMatch::match_combine_or<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,llvm::PatternMatch::match_combine_or<llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,39u>,llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,40u>>>,llvm::PatternMatch::bind_ty<llvm::Value>,13u,false>>,39u>,llvm::PatternMatch::CastClass_match<llvm::PatternMatch::match_combine_or<llvm::PatternMatch::BinaryOp_match<llvm::PatternMatch::bind_ty<llvm::Value>,llvm::PatternMatch::match_combine_or<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,llvm::PatternMatch::match_combine_or<llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,39u>,llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,40u>>>,13u,false>,llvm::PatternMatch::BinaryOp_match<llvm::PatternMatch::match_combine_or<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,llvm::PatternMatch::match_combine_or<llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,39u>,llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,40u>>>,llvm::PatternMatch::bind_ty<llvm::Value>,13u,false>>,40u>>>::match<llvm::Value>((_QWORD **)&v30, (uint64_t)v11, (BOOL)&v28))v11 = (unsigned __int8 *)v28;
  v12 = *(_QWORD *)a4;
  v13 = **(_QWORD **)(*(_QWORD *)a4 + 16);
  TypeForStride = MetalModulePass::getTypeForStride(this, a6);
  if (!TypeForStride)
  {
    v15 = (llvm::raw_ostream *)llvm::dbgs(0);
    llvm::raw_ostream::operator<<(v15, "[GEP->ADD] Nonstandard stride ", 0x1EuLL);
    v16 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    llvm::raw_ostream::operator<<(v16, "\n", 1uLL);
    TypeForStride = v13;
  }
  v17 = (MTLBoundsCheck *)v12;
  if (TypeForStride != v12)
    v17 = (MTLBoundsCheck *)llvm::PointerType::get();
  v18 = *((_QWORD *)this + 6);
  *(_QWORD *)&v30 = "bounds.fold";
  LOWORD(v33) = 259;
  v54[0] = *(void **)a2;
  v19 = getMangledFunction<llvm::Type *,llvm::Type *&,llvm::Type *&,llvm::Type *&>(v18, (llvm::Twine *)&v30, v17, v54, (void **)this + 10, (int64_t *)this + 10, (uint64_t *)this + 10);
  MetalModulePass::getStaticBoundsInfo(this, a2, (uint64_t)&v30);
  v28 = v30;
  v29 = v31;
  llvm::DataLayout::getTypeSizeInBits(*((_QWORD *)this + 7), **(_QWORD **)(v12 + 16));
  llvm::TypeSize::operator unsigned long long();
  if (v19)
    v20 = *(_QWORD *)(v19 + 24);
  else
    v20 = 0;
  v54[0] = a2;
  v54[1] = v11;
  v54[2] = (void *)llvm::ConstantInt::get();
  v54[3] = (void *)llvm::ConstantInt::get();
  LOWORD(v33) = 257;
  v21 = (llvm::Value *)llvm::IRBuilderBase::CreateCall((uint64_t)v56, v20, v19, (uint64_t)v54, 4, (uint64_t)&v30, 0);
  MetalModulePass::cacheStaticBoundsInfo((uint64_t)this, (uint64_t)v21, (uint64_t)&v28);
  v22 = **(llvm::Type ***)(*(_QWORD *)v21 + 16);
  v23 = llvm::ConstantInt::get();
  v24 = *((_QWORD *)this + 9);
  LOWORD(v33) = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v56, 39, v23, v24, (uint64_t)&v30);
  v55 = 257;
  v26 = llvm::IRBuilderBase::CreateInBoundsGEP((llvm::IRBuilderBase *)v56, v22, v21, Cast, (const llvm::Twine *)v54);
  MetalModulePass::cacheStaticBoundsInfo((uint64_t)this, v26, (uint64_t)&v28);
  LOWORD(v33) = 257;
  v27 = llvm::IRBuilderBase::CreateCast((uint64_t)v56, 49, v26, v12, (uint64_t)&v30);
  MetalModulePass::cacheStaticBoundsInfo((uint64_t)this, v27, (uint64_t)&v28);
  llvm::User::replaceUsesOfWith();
  MetalModulePass::cacheStaticBoundsInfo((uint64_t)this, (uint64_t)v53, (uint64_t)&v28);
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v59);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v58);
  if (v56[0] != &v57)
    free(v56[0]);
}

void sub_240FF2E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46)
{
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder(&a46);
  _Unwind_Resume(a1);
}

uint64_t llvm::InstVisitor<MTLGEPConversionPass::FoldVisitor,void>::visit(uint64_t a1, uint64_t a2)
{
  llvm::Module *v4;
  uint64_t DataLayout;
  llvm::Type *v6;
  llvm::LLVMContext *v7;

  v4 = *(llvm::Module **)(a2 + 40);
  *(_QWORD *)a1 = v4;
  DataLayout = llvm::Module::getDataLayout(v4);
  v6 = **(llvm::Type ***)a1;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = DataLayout;
  *(_QWORD *)(a1 + 24) = llvm::Type::getInt32Ty(v6, v7);
  return llvm::InstVisitor<MTLGEPConversionPass::FoldVisitor,void>::visit<llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::BasicBlock,false,false,void>,false,false>>(a1, *(_QWORD *)(a2 + 80), a2 + 72);
}

{
  return ((uint64_t (*)())((char *)nullsub_3 + 4 * byte_24105A820[*(unsigned __int8 *)(a2 + 16) - 29]))();
}

uint64_t llvm::InstVisitor<MTLGEPConversionPass::FoldVisitor,void>::visit<llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::BasicBlock,false,false,void>,false,false>>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a2 != a3)
  {
    v4 = result;
    do
    {
      v5 = *(_QWORD *)(a2 + 8);
      v6 = a2 - 24;
      if (!a2)
        v6 = 0;
      v7 = v6 + 40;
      v8 = *(_QWORD *)(v6 + 48);
      if (v8 != v7)
      {
        do
        {
          v9 = *(_QWORD *)(v8 + 8);
          if (v8)
            v10 = v8 - 24;
          else
            v10 = 0;
          result = llvm::InstVisitor<MTLGEPConversionPass::FoldVisitor,void>::visit(v4, v10);
          v8 = v9;
        }
        while (v9 != v7);
      }
      a2 = v5;
    }
    while (v5 != a3);
  }
  return result;
}

void MemoryOpVisitor<MTLGEPConversionPass::FoldVisitor>::visitLoadInst(uint64_t a1, llvm::Instruction *a2)
{
  llvm::DataLayout::getTypeSizeInBits(*(_QWORD *)(a1 + 16), **(_QWORD **)(**((_QWORD **)a2 - 4) + 16));
  llvm::TypeSize::operator unsigned long long();
  llvm::ConstantInt::get();
  MTLGEPConversionPass::FoldVisitor::visitPointerOperand(a1, a2, *((llvm::GetElementPtrInst **)a2 - 4));
}

void MTLGEPConversionPass::FoldVisitor::visitPointerOperand(uint64_t a1, llvm::Instruction *a2, llvm::GetElementPtrInst *a3)
{
  uint64_t v5;
  _QWORD *v6;
  llvm::Value *PointerOperand;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  llvm::Value *v11;
  llvm::GetElementPtrInst *v12;
  llvm::GetElementPtrInst **v13;
  llvm::GetElementPtrInst **v14;
  void *v15;
  _QWORD v16[25];

  v16[24] = *MEMORY[0x24BDAC8D0];
  v12 = a3;
  if (MTLBoundsCheck::checkAddressSpace((uint64_t)a3))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) + 168;
    v14 = &v12;
    v6 = std::__hash_table<std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,std::unordered_set<llvm::Value *>>>>::__emplace_unique_key_args<llvm::Value *,std::piecewise_construct_t const&,std::tuple<llvm::Value * const&>,std::tuple<>>(v5, &v12, (uint64_t)&std::piecewise_construct, &v14);
    if (v6[6] == 1)
    {
      GEPExpressionSum::GEPExpressionSum((GEPExpressionSum *)&v14, *(llvm::LLVMContext **)(*(_QWORD *)(a1 + 32) + 40));
      PointerOperand = v12;
      v11 = v12;
      if (v12)
      {
        v8 = v6 + 3;
        do
        {
          if (*((_BYTE *)PointerOperand + 16) == 62)
          {
            GEPExpressionSum::accumulateGEP((GEPExpressionSum *)&v14, *(const llvm::DataLayout **)(*(_QWORD *)(a1 + 32) + 56), PointerOperand);
            PointerOperand = v11;
          }
          PointerOperand = (llvm::Value *)getPointerOperand((uint64_t)PointerOperand);
          if (std::__hash_table<llvm::Value *,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,std::allocator<llvm::Value *>>::find<llvm::Value *>(v8, &v11))
          {
            v9 = *(_QWORD *)(a1 + 32) + 528;
            v13 = &v12;
            v10 = std::__hash_table<std::__hash_value_type<llvm::Value *,llvm::Optional<GEPExpressionSum>>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::Optional<GEPExpressionSum>>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::Optional<GEPExpressionSum>>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,llvm::Optional<GEPExpressionSum>>>>::__emplace_unique_key_args<llvm::Value *,std::piecewise_construct_t const&,std::tuple<llvm::Value * const&>,std::tuple<>>(v9, &v12, (uint64_t)&std::piecewise_construct, &v13);
            llvm::optional_detail::OptionalStorage<GEPExpressionSum,false>::operator=((uint64_t)(v10 + 24), (uint64_t *)&v14);
            MTLGEPConversionPass::addMemUser(*(MTLGEPConversionPass **)(a1 + 32), v11, a2, v12);
          }
          v11 = PointerOperand;
        }
        while (PointerOperand);
      }
      if (v15 != v16)
        free(v15);
    }
  }
}

void sub_240FF31D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *a14)
{
  _Unwind_Resume(exception_object);
}

uint64_t GEPExpressionSum::accumulateGEP(GEPExpressionSum *this, const llvm::DataLayout *a2, llvm::GetElementPtrInst *a3)
{
  uint64_t result;
  int v7;
  uint64_t v8;
  char *v9;
  char *v10;
  llvm::Type *TypeAtIndex;
  unint64_t TypeAllocSize;
  llvm::Value *v13;
  uint64_t v14;
  BOOL v15;
  _QWORD *v16;
  llvm::Value *v17[2];
  _QWORD v18[2];
  uint64_t v19;
  uint64_t v20;

  if (!llvm::GetElementPtrInst::hasAllConstantIndices(a3))
  {
    result = llvm::GEPOperator::getSourceElementType(a3);
    v7 = *((_DWORD *)a3 + 5);
    if ((v7 & 0x40000000) != 0)
    {
      v9 = (char *)*((_QWORD *)a3 - 1);
      v8 = v7 & 0x7FFFFFF;
    }
    else
    {
      v8 = v7 & 0x7FFFFFF;
      v9 = (char *)a3 - 32 * v8;
    }
    v19 = (uint64_t)(v9 + 32);
    v20 = result | 4;
    if (v8 == 1)
      return result;
    v10 = &v9[32 * v8];
    while (1)
    {
      if ((v20 & 4) != 0)
      {
        TypeAtIndex = (llvm::Type *)(v20 & 0xFFFFFFFFFFFFFFF8);
        if ((v20 & 0xFFFFFFFFFFFFFFF8) == 0)
          TypeAtIndex = (llvm::Type *)llvm::StructType::getTypeAtIndex();
        TypeAllocSize = llvm::DataLayout::getTypeAllocSize(a2, TypeAtIndex);
        v18[0] = TypeAllocSize;
        v18[1] = v13;
        v14 = *(_QWORD *)v19;
        if (*(_QWORD *)v19)
          v15 = *(_BYTE *)(*(_QWORD *)v19 + 16) == 16;
        else
          v15 = 0;
        if (v15)
        {
          v16 = (_QWORD *)(v14 + 24);
          if (*(_DWORD *)(v14 + 32) >= 0x41u)
            v16 = (_QWORD *)*v16;
          v17[0] = (llvm::Value *)(*v16 * TypeAllocSize);
          v17[1] = v13;
          llvm::TypeSize::operator unsigned long long();
          goto LABEL_25;
        }
        v17[0] = *(llvm::Value **)v19;
        llvm::SmallVectorImpl<GEPExpressionSum::IndexPair>::emplace_back<llvm::TypeSize &,llvm::Value *>((uint64_t)this + 8, (uint64_t)v18, v17);
      }
      else if ((v20 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        llvm::DataLayout::getStructLayout();
LABEL_25:
        *(_QWORD *)this = llvm::ConstantInt::get();
      }
      result = (uint64_t)llvm::generic_gep_type_iterator<llvm::Use const*>::operator++(&v19);
      if ((char *)v19 == v10)
        return result;
    }
  }
  LODWORD(v20) = 64;
  v19 = 0;
  result = llvm::GetElementPtrInst::accumulateConstantOffset();
  if ((_DWORD)result)
  {
    result = llvm::ConstantInt::get();
    *(_QWORD *)this = result;
  }
  if (v20 >= 0x41)
  {
    result = v19;
    if (v19)
      return MEMORY[0x24268D8D8](v19, 0x1000C8000313F17);
  }
  return result;
}

void sub_240FF3474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned int a14)
{
  if (a14 >= 0x41)
    GEPExpressionSum::accumulateGEP(&a13);
  _Unwind_Resume(exception_object);
}

uint64_t MTLGEPConversionPass::addMemUser(MTLGEPConversionPass *this, llvm::Value *a2, llvm::Instruction *a3, llvm::Value *a4)
{
  _QWORD *v4;
  llvm::Value *v6;
  llvm::Instruction *v7;
  llvm::Value *v8;
  llvm::Value **v9;

  v7 = a3;
  v8 = a2;
  v6 = a4;
  v9 = &v8;
  v4 = std::__hash_table<std::__hash_value_type<llvm::Value *,llvm::SmallVector<std::pair<llvm::Instruction *,llvm::Value *>,8u>>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::SmallVector<std::pair<llvm::Instruction *,llvm::Value *>,8u>>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::SmallVector<std::pair<llvm::Instruction *,llvm::Value *>,8u>>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,llvm::SmallVector<std::pair<llvm::Instruction *,llvm::Value *>,8u>>>>::__emplace_unique_key_args<llvm::Value *,std::piecewise_construct_t const&,std::tuple<llvm::Value * const&>,std::tuple<>>((uint64_t)this + 488, &v8, (uint64_t)&std::piecewise_construct, &v9);
  return llvm::SmallVectorImpl<std::pair<llvm::Instruction *,llvm::MDTuple *>>::emplace_back<llvm::Instruction *,llvm::MDTuple *&>((uint64_t)(v4 + 3), (uint64_t *)&v7, (uint64_t *)&v6);
}

void GEPExpressionSum::GEPExpressionSum(GEPExpressionSum *this, llvm::LLVMContext *a2)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = (char *)this + 24;
  *((_QWORD *)this + 2) = 0x800000000;
  llvm::Type::getInt32Ty(a2, a2);
  *(_QWORD *)this = llvm::ConstantInt::get();
}

void sub_240FF3534(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v5;

  v3 = v2;
  v5 = *(void **)(v1 + 8);
  if (v5 != v3)
    free(v5);
  _Unwind_Resume(exception_object);
}

unint64_t llvm::generic_gep_type_iterator<llvm::Use const*>::getIndexedType(uint64_t a1)
{
  uint64_t v1;
  unint64_t result;

  v1 = *(_QWORD *)(a1 + 8);
  result = v1 & 0xFFFFFFFFFFFFFFF8;
  if ((v1 & 4) == 0 || !result)
    return llvm::StructType::getTypeAtIndex();
  return result;
}

uint64_t llvm::SmallVectorImpl<GEPExpressionSum::IndexPair>::emplace_back<llvm::TypeSize &,llvm::Value *>(uint64_t a1, uint64_t a2, llvm::Value **a3)
{
  unsigned int v5;
  GEPExpressionSum::IndexPair *v6;
  unint64_t v7;
  unsigned int v8;

  v5 = *(_DWORD *)(a1 + 8);
  if (v5 >= *(_DWORD *)(a1 + 12))
    return llvm::SmallVectorTemplateBase<GEPExpressionSum::IndexPair,true>::growAndEmplaceBack<llvm::TypeSize &,llvm::Value *>(a1, a2, a3);
  v6 = (GEPExpressionSum::IndexPair *)(*(_QWORD *)a1 + 24 * v5);
  v7 = llvm::TypeSize::operator unsigned long long();
  GEPExpressionSum::IndexPair::IndexPair(v6, v7, *a3);
  v8 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v8;
  return *(_QWORD *)a1 + 24 * v8 - 24;
}

_QWORD *llvm::generic_gep_type_iterator<llvm::Use const*>::operator++(_QWORD *a1)
{
  unint64_t IndexedType;
  int v3;
  unint64_t v4;

  IndexedType = llvm::generic_gep_type_iterator<llvm::Use const*>::getIndexedType((uint64_t)a1);
  v3 = *(unsigned __int8 *)(IndexedType + 8);
  if (IndexedType && v3 == 17 || IndexedType && (v3 & 0xFE) == 0x12)
  {
    v4 = *(_QWORD *)(IndexedType + 24) | 4;
  }
  else if (v3 == 16)
  {
    v4 = IndexedType & 0xFFFFFFFFFFFFFFFBLL;
  }
  else
  {
    v4 = 0;
  }
  a1[1] = v4;
  *a1 += 32;
  return a1;
}

uint64_t llvm::SmallVectorTemplateBase<GEPExpressionSum::IndexPair,true>::growAndEmplaceBack<llvm::TypeSize &,llvm::Value *>(uint64_t a1, uint64_t a2, llvm::Value **a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  _BYTE v10[24];

  v5 = llvm::TypeSize::operator unsigned long long();
  GEPExpressionSum::IndexPair::IndexPair((GEPExpressionSum::IndexPair *)v10, v5, *a3);
  v6 = llvm::SmallVectorTemplateCommon<MTLBoundsCheck::MemoryAccessOperand,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<MTLBoundsCheck::MemoryAccessOperand,true>>(a1, (unint64_t)v10, 1);
  v7 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 8);
  v8 = *(_OWORD *)v6;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v6 + 16);
  *(_OWORD *)v7 = v8;
  LODWORD(v7) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  return *(_QWORD *)a1 + 24 * v7 - 24;
}

GEPExpressionSum::IndexPair *GEPExpressionSum::IndexPair::IndexPair(GEPExpressionSum::IndexPair *this, unint64_t a2, llvm::Value *a3)
{
  llvm::Type *Context;
  llvm::LLVMContext *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v9;
  uint64_t v10;

  *((_QWORD *)this + 1) = a3;
  *((_BYTE *)this + 16) = 0;
  Context = (llvm::Type *)llvm::Value::getContext(a3);
  llvm::Type::getInt32Ty(Context, v5);
  *(_QWORD *)this = llvm::ConstantInt::get();
  v6 = *((_QWORD *)this + 1);
  v9 = &v10;
  v10 = 0;
  if (llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::Value>,39u>::match<llvm::Value>(&v9, v6))
  {
    *((_QWORD *)this + 1) = v10;
  }
  else
  {
    v7 = *((_QWORD *)this + 1);
    v9 = &v10;
    if (llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::Value>,40u>::match<llvm::Value>(&v9, v7))
    {
      *((_QWORD *)this + 1) = v10;
      *((_BYTE *)this + 16) = 1;
    }
  }
  return this;
}

uint64_t llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::Value>,39u>::match<llvm::Value>(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  BOOL v5;
  int v6;
  unsigned int v7;
  int v8;
  uint64_t *v9;

  v3 = *(unsigned __int8 *)(a2 + 16);
  v5 = v3 < 0x1C && v3 != 5 || a2 == 0;
  v6 = v5;
  if (!v5)
  {
    v7 = v3 - 28;
    if (v3 < 0x1C)
      v7 = *(unsigned __int16 *)(a2 + 18);
    if (v7 == 39)
    {
      v8 = *(_DWORD *)(a2 + 20);
      if ((v8 & 0x40000000) != 0)
        v9 = *(uint64_t **)(a2 - 8);
      else
        v9 = (uint64_t *)(a2 - 32 * (v8 & 0x7FFFFFF));
      v2 = *v9;
      if (v2)
      {
        **a1 = v2;
        LODWORD(v2) = 1;
      }
    }
    else
    {
      LODWORD(v2) = 0;
    }
  }
  return v2 & (v6 ^ 1);
}

uint64_t llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::Value>,40u>::match<llvm::Value>(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  BOOL v5;
  int v6;
  unsigned int v7;
  int v8;
  uint64_t *v9;

  v3 = *(unsigned __int8 *)(a2 + 16);
  v5 = v3 < 0x1C && v3 != 5 || a2 == 0;
  v6 = v5;
  if (!v5)
  {
    v7 = v3 - 28;
    if (v3 < 0x1C)
      v7 = *(unsigned __int16 *)(a2 + 18);
    if (v7 == 40)
    {
      v8 = *(_DWORD *)(a2 + 20);
      if ((v8 & 0x40000000) != 0)
        v9 = *(uint64_t **)(a2 - 8);
      else
        v9 = (uint64_t *)(a2 - 32 * (v8 & 0x7FFFFFF));
      v2 = *v9;
      if (v2)
      {
        **a1 = v2;
        LODWORD(v2) = 1;
      }
    }
    else
    {
      LODWORD(v2) = 0;
    }
  }
  return v2 & (v6 ^ 1);
}

_QWORD *std::__hash_table<llvm::Value *,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,std::allocator<llvm::Value *>>::find<llvm::Value *>(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v5 == v10)
      {
        if (result[2] == *a2)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t llvm::optional_detail::OptionalStorage<GEPExpressionSum,false>::operator=(uint64_t a1, uint64_t *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v3 = *(unsigned __int8 *)(a1 + 216);
  v5 = *a2;
  v4 = (uint64_t)(a2 + 1);
  *(_QWORD *)a1 = v5;
  v6 = (_QWORD *)(a1 + 8);
  if (v3)
  {
    llvm::SmallVectorImpl<GEPExpressionSum::IndexPair>::operator=((uint64_t)v6, v4);
  }
  else
  {
    llvm::SmallVector<GEPExpressionSum::IndexPair,8u>::SmallVector(v6, v4);
    *(_BYTE *)(a1 + 216) = 1;
  }
  return a1;
}

uint64_t llvm::SmallVectorImpl<GEPExpressionSum::IndexPair>::operator=(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v4 = *(_DWORD *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4)
        memmove(*(void **)a1, *(const void **)a2, 24 * v4 - 7);
      goto LABEL_12;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if ((_DWORD)v5)
      {
        memmove(*(void **)a1, *(const void **)a2, 24 * v5 - 7);
        goto LABEL_10;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v5 = 0;
LABEL_10:
    v6 = *(unsigned int *)(a2 + 8);
    if (v5 != v6)
      memcpy((void *)(*(_QWORD *)a1 + 24 * v5), (const void *)(*(_QWORD *)a2 + 24 * v5), *(_QWORD *)a2 + 24 * v6 - (*(_QWORD *)a2 + 24 * v5));
LABEL_12:
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

_QWORD *llvm::SmallVector<GEPExpressionSum::IndexPair,8u>::SmallVector(_QWORD *a1, uint64_t a2)
{
  *a1 = a1 + 2;
  a1[1] = 0x800000000;
  if (*(_DWORD *)(a2 + 8))
    llvm::SmallVectorImpl<GEPExpressionSum::IndexPair>::operator=((uint64_t)a1, a2);
  return a1;
}

void sub_240FF3ABC(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  void *v3;

  v3 = v2;
  if (*v1 != v3)
    free(*v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<std::__hash_value_type<llvm::Value *,llvm::SmallVector<std::pair<llvm::Instruction *,llvm::Value *>,8u>>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::SmallVector<std::pair<llvm::Instruction *,llvm::Value *>,8u>>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::SmallVector<std::pair<llvm::Instruction *,llvm::Value *>,8u>>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,llvm::SmallVector<std::pair<llvm::Instruction *,llvm::Value *>,8u>>>>::__emplace_unique_key_args<llvm::Value *,std::piecewise_construct_t const&,std::tuple<llvm::Value * const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD **v12;
  _QWORD *i;
  unint64_t v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      for (i = *v12; i; i = (_QWORD *)*i)
      {
        v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10)
              v14 %= v10;
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4)
            break;
        }
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  i = operator new(0xA8uLL);
  *i = 0;
  i[1] = v9;
  i[2] = **a4;
  i[3] = i + 5;
  i[4] = 0x800000000;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *i = *v23;
LABEL_38:
    *v23 = i;
    goto LABEL_39;
  }
  *i = *v15;
  *v15 = i;
  *(_QWORD *)(v22 + 8 * v4) = v15;
  if (*i)
  {
    v24 = *(_QWORD *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10)
        v24 %= v10;
    }
    else
    {
      v24 &= v10 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_240FF3D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<llvm::Value *,llvm::SmallVector<std::pair<llvm::Instruction *,llvm::Value *>,8u>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<llvm::Value *,llvm::SmallVector<std::pair<llvm::Instruction *,llvm::Value *>,8u>>,void *>>>::operator()[abi:ne180100](uint64_t a1, _QWORD *__p)
{
  _QWORD *v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = (_QWORD *)__p[3];
    if (v3 != __p + 5)
      free(v3);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void MemoryOpVisitor<MTLGEPConversionPass::FoldVisitor>::visitStoreInst(uint64_t a1, llvm::Instruction *a2)
{
  llvm::DataLayout::getTypeSizeInBits(*(_QWORD *)(a1 + 16), **(_QWORD **)(**((_QWORD **)a2 - 4) + 16));
  llvm::TypeSize::operator unsigned long long();
  llvm::ConstantInt::get();
  MTLGEPConversionPass::FoldVisitor::visitPointerOperand(a1, a2, *((llvm::GetElementPtrInst **)a2 - 4));
}

void MemoryOpVisitor<MTLGEPConversionPass::FoldVisitor>::visitCallInst(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Name;
  llvm::LLVMContext *v6;
  _BOOL4 v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  llvm::GetElementPtrInst **v14;
  llvm::GetElementPtrInst *v15;
  llvm::GetElementPtrInst *v19;
  uint64_t PtrTypeFromIntrinsicNameSuffix;

  v3 = *(_QWORD *)(a2 - 32);
  if (!v3 || *(_BYTE *)(v3 + 16) || *(_QWORD *)(v3 + 24) != *(_QWORD *)(a2 + 72))
    return;
  Name = llvm::Value::getName((llvm::Value *)v3);
  if ((unint64_t)v6 < 0xB)
  {
    if (v6 != (llvm::LLVMContext *)10)
      return;
    if (*(_QWORD *)Name != 0x6D6F74612E726961 || *(_WORD *)(Name + 8) != 25449)
      return;
    goto LABEL_45;
  }
  v9 = *(_QWORD *)Name != 0x6D656D2E6D766C6CLL || *(_QWORD *)(Name + 3) != 0x7970636D656D2E6DLL;
  v10 = 0x6C6C766D2E6D656DLL;
  v11 = bswap64(*(_QWORD *)Name);
  if (v11 == 0x6C6C766D2E6D656DLL
    && (v10 = 0x6D2E6D656D636D70, v11 = bswap64(*(_QWORD *)(Name + 3)), v11 == 0x6D2E6D656D636D70))
  {
    v12 = 0;
  }
  else if (v11 < v10)
  {
    v12 = -1;
  }
  else
  {
    v12 = 1;
  }
  if (!v9 || v12 == 0)
  {
    v14 = (llvm::GetElementPtrInst **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    v15 = v14[4];
    MTLGEPConversionPass::FoldVisitor::visitPointerOperand(a1, (llvm::Instruction *)a2, *v14);
    MTLGEPConversionPass::FoldVisitor::visitPointerOperand(a1, (llvm::Instruction *)a2, v15);
    return;
  }
  if (*(_QWORD *)Name == 0x6D656D2E6D766C6CLL && *(_QWORD *)(Name + 3) == 0x7465736D656D2E6DLL)
  {
    MTLGEPConversionPass::FoldVisitor::visitPointerOperand(a1, (llvm::Instruction *)a2, *(llvm::GetElementPtrInst **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)));
    return;
  }
  if (*(_QWORD *)Name == 0x6D6F74612E726961 && *(_WORD *)(Name + 8) == 25449)
  {
LABEL_45:
    v19 = *(llvm::GetElementPtrInst **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    PtrTypeFromIntrinsicNameSuffix = getPtrTypeFromIntrinsicNameSuffix(Name, v6, *(llvm::Type **)(a1 + 8));
    goto LABEL_46;
  }
  if (*(_QWORD *)Name == 0x662E73646E756F62 && *(_QWORD *)(Name + 3) == 0x646C6F662E73646ELL)
  {
    v19 = *(llvm::GetElementPtrInst **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    PtrTypeFromIntrinsicNameSuffix = **(_QWORD **)(*(_QWORD *)v19 + 16);
LABEL_46:
    llvm::DataLayout::getTypeSizeInBits(*(_QWORD *)(a1 + 16), PtrTypeFromIntrinsicNameSuffix);
    llvm::TypeSize::operator unsigned long long();
    llvm::ConstantInt::get();
    MTLGEPConversionPass::FoldVisitor::visitPointerOperand(a1, (llvm::Instruction *)a2, v19);
  }
}

char *std::__hash_table<std::__hash_value_type<llvm::Value *,llvm::Optional<GEPExpressionSum>>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::Optional<GEPExpressionSum>>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::Optional<GEPExpressionSum>>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,llvm::Optional<GEPExpressionSum>>>>::__emplace_unique_key_args<llvm::Value *,std::piecewise_construct_t const&,std::tuple<llvm::Value * const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  char *v13;
  unint64_t v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          v14 = *((_QWORD *)v13 + 1);
          if (v14 == v9)
          {
            if (*((_QWORD *)v13 + 2) == *a2)
              return v13;
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10)
                v14 %= v10;
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4)
              break;
          }
          v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  v13 = (char *)operator new(0xF8uLL);
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v9;
  *((_QWORD *)v13 + 2) = **a4;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  *(_OWORD *)(v13 + 72) = 0u;
  *(_OWORD *)(v13 + 88) = 0u;
  *(_OWORD *)(v13 + 104) = 0u;
  *(_OWORD *)(v13 + 120) = 0u;
  *(_OWORD *)(v13 + 136) = 0u;
  *(_OWORD *)(v13 + 152) = 0u;
  *(_OWORD *)(v13 + 168) = 0u;
  *(_OWORD *)(v13 + 184) = 0u;
  *(_OWORD *)(v13 + 200) = 0u;
  *(_OWORD *)(v13 + 216) = 0u;
  *(_OWORD *)(v13 + 232) = 0u;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v13 = *v23;
LABEL_38:
    *v23 = v13;
    goto LABEL_39;
  }
  *(_QWORD *)v13 = *v15;
  *v15 = v13;
  *(_QWORD *)(v22 + 8 * v4) = v15;
  if (*(_QWORD *)v13)
  {
    v24 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10)
        v24 %= v10;
    }
    else
    {
      v24 &= v10 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_240FF4394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<llvm::Value *,llvm::Optional<GEPExpressionSum>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<llvm::Value *,llvm::Optional<GEPExpressionSum>>,void *>>>::operator()[abi:ne180100](uint64_t a1, _QWORD *__p)
{
  _QWORD *v3;

  if (*(_BYTE *)(a1 + 8))
  {
    if (*((_BYTE *)__p + 240))
    {
      v3 = (_QWORD *)__p[4];
      if (v3 != __p + 6)
        free(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

_BYTE *llvm::optional_detail::OptionalStorage<GEPExpressionSum,false>::OptionalStorage(_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[216] = 0;
  if (*(_BYTE *)(a2 + 216))
    llvm::optional_detail::OptionalStorage<GEPExpressionSum,false>::emplace<GEPExpressionSum const&>((uint64_t)a1, (_QWORD *)a2);
  return a1;
}

void sub_240FF4440(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  if (*(_BYTE *)(v1 + 216))
  {
    v3 = *(void **)(v1 + 8);
    if (v3 != (void *)(v1 + 24))
      free(v3);
    *(_BYTE *)(v1 + 216) = 0;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *llvm::optional_detail::OptionalStorage<GEPExpressionSum,false>::emplace<GEPExpressionSum const&>(uint64_t a1, _QWORD *a2)
{
  void *v4;
  _QWORD *result;

  if (*(_BYTE *)(a1 + 216))
  {
    v4 = *(void **)(a1 + 8);
    if (v4 != (void *)(a1 + 24))
      free(v4);
    *(_BYTE *)(a1 + 216) = 0;
  }
  *(_QWORD *)a1 = *a2;
  result = llvm::SmallVector<GEPExpressionSum::IndexPair,8u>::SmallVector((_QWORD *)(a1 + 8), (uint64_t)(a2 + 1));
  *(_BYTE *)(a1 + 216) = 1;
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<llvm::Value *,ArgumentLoadInfo>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,ArgumentLoadInfo>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,ArgumentLoadInfo>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,ArgumentLoadInfo>>>::__emplace_unique_key_args<llvm::Value *,std::piecewise_construct_t const&,std::tuple<llvm::Value * const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  _QWORD *v13;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == *a2)
              return v13;
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10)
                v14 %= v10;
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  v13 = operator new(0x20uLL);
  *v13 = 0;
  v13[1] = v9;
  v13[2] = **a4;
  *((_DWORD *)v13 + 6) = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    v17 = 1;
    if (v10 >= 3)
      v17 = (v10 & (v10 - 1)) != 0;
    v18 = v17 | (2 * v10);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>>>::__rehash<true>(a1, v20);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *v13 = *v22;
LABEL_38:
    *v22 = v13;
    goto LABEL_39;
  }
  *v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*v13)
  {
    v23 = *(_QWORD *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10)
        v23 %= v10;
    }
    else
    {
      v23 &= v10 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_240FF470C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *GEPExpressionSum::emitDynamicALUOps(uint64_t **this, MTLIRBuilder *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *NSWFoldAdd;
  uint64_t *v7;
  uint64_t v8;
  llvm::Value *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t Cast;
  llvm::Value *v13;
  unsigned __int8 *NSWFoldMul;
  BOOL v15;
  uint64_t v16;
  BOOL v17;
  _QWORD v19[4];
  __int16 v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v2 = **this;
  v3 = *((unsigned int *)this + 4);
  if ((_DWORD)v3)
  {
    NSWFoldAdd = 0;
    v7 = this[1];
    v8 = 24 * v3;
    while (1)
    {
      v9 = (llvm::Value *)v7[1];
      v10 = *(_DWORD *)(*(_QWORD *)v9 + 8) >> 8;
      v11 = *(_DWORD *)(v2 + 8);
      if (v10 < v11 >> 8)
        break;
      if (v10 > v11 >> 8)
      {
        v20 = 257;
        Cast = llvm::IRBuilderBase::CreateCast((uint64_t)a2, 38, (uint64_t)v9, v2, (uint64_t)v19);
LABEL_9:
        v9 = (llvm::Value *)Cast;
      }
      v13 = (llvm::Value *)llvm::ConstantInt::get();
      v20 = 257;
      NSWFoldMul = (unsigned __int8 *)MTLIRBuilder::CreateNSWFoldMul(a2, v13, v9, (const llvm::Twine *)v19);
      if (NSWFoldMul)
        v15 = NSWFoldMul[16] >= 0x1Cu;
      else
        v15 = 0;
      if (v15)
      {
        llvm::Value::getContext((llvm::Value *)*this);
        v19[0] = llvm::ValueAsMetadata::get();
        llvm::MDTuple::getImpl();
        llvm::Instruction::setMetadata();
      }
      if (NSWFoldAdd
        && ((v16 = *(_QWORD *)NSWFoldMul,
             *(_DWORD *)(*(_QWORD *)NSWFoldAdd + 8) >> 8 >= *(_DWORD *)(*(_QWORD *)NSWFoldMul + 8) >> 8)
         || (v20 = 257,
             NSWFoldAdd = (unsigned __int8 *)llvm::IRBuilderBase::CreateCast((uint64_t)a2, 39, (uint64_t)NSWFoldAdd, v16, (uint64_t)v19), v2 = *(_QWORD *)NSWFoldMul, NSWFoldAdd)))
      {
        v20 = 257;
        NSWFoldAdd = (unsigned __int8 *)MTLIRBuilder::CreateNSWFoldAdd(a2, (llvm::Value *)NSWFoldAdd, (llvm::Value *)NSWFoldMul, (const llvm::Twine *)v19);
      }
      else
      {
        NSWFoldAdd = NSWFoldMul;
      }
      if (NSWFoldAdd)
        v17 = NSWFoldAdd[16] >= 0x1Cu;
      else
        v17 = 0;
      if (v17)
      {
        llvm::Value::getContext((llvm::Value *)*this);
        llvm::MDTuple::getImpl();
        llvm::Instruction::setMetadata();
      }
      v7 += 3;
      v8 -= 24;
      if (!v8)
        return NSWFoldAdd;
    }
    if (*((_BYTE *)v7 + 16))
    {
      v20 = 257;
      Cast = llvm::IRBuilderBase::CreateCast((uint64_t)a2, 40, (uint64_t)v9, v2, (uint64_t)v19);
    }
    else
    {
      v20 = 257;
      Cast = llvm::IRBuilderBase::CreateCast((uint64_t)a2, 39, (uint64_t)v9, v2, (uint64_t)v19);
    }
    goto LABEL_9;
  }
  return (unsigned __int8 *)llvm::ConstantInt::get();
}

uint64_t getMangledFunction<llvm::Type *,llvm::Type *&,llvm::Type *&,llvm::Type *&>(uint64_t a1, llvm::Twine *this, MTLBoundsCheck *a3, void **a4, void **a5, int64_t *a6, uint64_t *a7)
{
  llvm::Type *v13;
  std::string *v14;
  __int128 v15;
  void **v16;
  std::string::size_type v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  MTLBoundsCheck *v23;
  std::string *v24;
  __int128 v25;
  void **v26;
  std::string::size_type v27;
  std::string::size_type size;
  std::string::size_type v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  MTLBoundsCheck **v33;
  char *v34;
  std::string::size_type v35;
  MTLBoundsCheck *v36;
  uint64_t Function;
  uint64_t v38;
  std::string v40;
  void *v41[2];
  int64_t v42;
  std::string v43;
  std::string v44;
  void *__p[2];
  int64_t v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  llvm::Twine::str(this);
  MTLBoundsCheck::getMangledTypeStr(a3, v13, &v43);
  v14 = std::string::insert(&v43, 0, ".");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v46 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (v46 >= 0)
    v16 = __p;
  else
    v16 = (void **)__p[0];
  if (v46 >= 0)
    v17 = HIBYTE(v46);
  else
    v17 = (std::string::size_type)__p[1];
  std::string::append(&v44, (const std::string::value_type *)v16, v17);
  if (SHIBYTE(v46) < 0)
    operator delete(__p[0]);
  v19 = a1;
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  v20 = 0;
  memset(&v43, 0, sizeof(v43));
  v21 = *a5;
  __p[0] = *a4;
  __p[1] = v21;
  v22 = *a7;
  v46 = *a6;
  v47 = v22;
  do
  {
    v23 = (MTLBoundsCheck *)__p[v20];
    MTLBoundsCheck::getMangledTypeStr(v23, (llvm::Type *)v18, &v40);
    v24 = std::string::insert(&v40, 0, ".");
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v42 = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)v41 = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    if (v42 >= 0)
      v26 = v41;
    else
      v26 = (void **)v41[0];
    if (v42 >= 0)
      v27 = HIBYTE(v42);
    else
      v27 = (std::string::size_type)v41[1];
    std::string::append(&v44, (const std::string::value_type *)v26, v27);
    if (SHIBYTE(v42) < 0)
      operator delete(v41[0]);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
    size = v43.__r_.__value_.__l.__size_;
    if (v43.__r_.__value_.__l.__size_ >= v43.__r_.__value_.__r.__words[2])
    {
      v30 = (uint64_t)(v43.__r_.__value_.__l.__size_ - v43.__r_.__value_.__r.__words[0]) >> 3;
      if ((unint64_t)(v30 + 1) >> 61)
        std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
      v31 = (uint64_t)(v43.__r_.__value_.__r.__words[2] - v43.__r_.__value_.__r.__words[0]) >> 2;
      if (v31 <= v30 + 1)
        v31 = v30 + 1;
      if (v43.__r_.__value_.__r.__words[2] - v43.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8)
        v18 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v18 = v31;
      if (v18)
        v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v43.__r_.__value_.__r.__words[2], v18);
      else
        v32 = 0;
      v33 = (MTLBoundsCheck **)&v32[8 * v30];
      *v33 = v23;
      v29 = (std::string::size_type)(v33 + 1);
      v34 = (char *)v43.__r_.__value_.__l.__size_;
      v35 = v43.__r_.__value_.__r.__words[0];
      if (v43.__r_.__value_.__l.__size_ != v43.__r_.__value_.__r.__words[0])
      {
        do
        {
          v36 = (MTLBoundsCheck *)*((_QWORD *)v34 - 1);
          v34 -= 8;
          *--v33 = v36;
        }
        while (v34 != (char *)v35);
        v34 = (char *)v43.__r_.__value_.__r.__words[0];
      }
      v43.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
      v43.__r_.__value_.__l.__size_ = v29;
      v43.__r_.__value_.__r.__words[2] = (std::string::size_type)&v32[8 * v18];
      if (v34)
        operator delete(v34);
    }
    else
    {
      *(_QWORD *)v43.__r_.__value_.__l.__size_ = v23;
      v29 = size + 8;
    }
    v43.__r_.__value_.__l.__size_ = v29;
    ++v20;
  }
  while (v20 != 4);
  Function = llvm::Module::getFunction();
  if (!Function)
  {
    v38 = llvm::FunctionType::get();
    v48 = 260;
    __p[0] = &v44;
    Function = llvm::Function::Create(v38, 0, (uint64_t)__p, v19);
  }
  if (v43.__r_.__value_.__r.__words[0])
  {
    v43.__r_.__value_.__l.__size_ = v43.__r_.__value_.__r.__words[0];
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  return Function;
}

void sub_240FF4D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (__p)
    operator delete(__p);
  if (a34 < 0)
    operator delete(a29);
  _Unwind_Resume(exception_object);
}

uint64_t llvm::PatternMatch::match_combine_or<llvm::PatternMatch::match_combine_or<llvm::PatternMatch::BinaryOp_match<llvm::PatternMatch::bind_ty<llvm::Value>,llvm::PatternMatch::match_combine_or<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,llvm::PatternMatch::match_combine_or<llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,39u>,llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,40u>>>,13u,false>,llvm::PatternMatch::BinaryOp_match<llvm::PatternMatch::match_combine_or<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,llvm::PatternMatch::match_combine_or<llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,39u>,llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,40u>>>,llvm::PatternMatch::bind_ty<llvm::Value>,13u,false>>,llvm::PatternMatch::match_combine_or<llvm::PatternMatch::CastClass_match<llvm::PatternMatch::match_combine_or<llvm::PatternMatch::BinaryOp_match<llvm::PatternMatch::bind_ty<llvm::Value>,llvm::PatternMatch::match_combine_or<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,llvm::PatternMatch::match_combine_or<llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,39u>,llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,40u>>>,13u,false>,llvm::PatternMatch::BinaryOp_match<llvm::PatternMatch::match_combine_or<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,llvm::PatternMatch::match_combine_or<llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,39u>,llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,40u>>>,llvm::PatternMatch::bind_ty<llvm::Value>,13u,false>>,39u>,llvm::PatternMatch::CastClass_match<llvm::PatternMatch::match_combine_or<llvm::PatternMatch::BinaryOp_match<llvm::PatternMatch::bind_ty<llvm::Value>,llvm::PatternMatch::match_combine_or<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,llvm::PatternMatch::match_combine_or<llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,39u>,llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,40u>>>,13u,false>,llvm::PatternMatch::BinaryOp_match<llvm::PatternMatch::match_combine_or<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,llvm::PatternMatch::match_combine_or<llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,39u>,llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,40u>>>,llvm::PatternMatch::bind_ty<llvm::Value>,13u,false>>,40u>>>::match<llvm::Value>@<X0>(_QWORD **a1@<X0>, uint64_t a2@<X1>, BOOL a3@<W8>)
{
  uint64_t v5;

  if (llvm::PatternMatch::BinaryOp_match<llvm::PatternMatch::bind_ty<llvm::Value>,llvm::PatternMatch::match_combine_or<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,llvm::PatternMatch::match_combine_or<llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,39u>,llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,40u>>>,13u,false>::match<llvm::Value>(a1, a2, a3)|| (llvm::PatternMatch::BinaryOp_match<llvm::PatternMatch::match_combine_or<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,llvm::PatternMatch::match_combine_or<llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,39u>,llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,40u>>>,llvm::PatternMatch::bind_ty<llvm::Value>,13u,false>::match<llvm::Value>(a1 + 4, a2, v5) & 1) != 0|| (llvm::PatternMatch::CastClass_match<llvm::PatternMatch::match_combine_or<llvm::PatternMatch::BinaryOp_match<llvm::PatternMatch::bind_ty<llvm::Value>,llvm::PatternMatch::match_combine_or<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,llvm::PatternMatch::match_combine_or<llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,39u>,llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,40u>>>,13u,false>,llvm::PatternMatch::BinaryOp_match<llvm::PatternMatch::match_combine_or<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,llvm::PatternMatch::match_combine_or<llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,39u>,llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,40u>>>,llvm::PatternMatch::bind_ty<llvm::Value>,13u,false>>,39u>::match<llvm::Value>(a1 + 8, a2) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return llvm::PatternMatch::CastClass_match<llvm::PatternMatch::match_combine_or<llvm::PatternMatch::BinaryOp_match<llvm::PatternMatch::bind_ty<llvm::Value>,llvm::PatternMatch::match_combine_or<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,llvm::PatternMatch::match_combine_or<llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,39u>,llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,40u>>>,13u,false>,llvm::PatternMatch::BinaryOp_match<llvm::PatternMatch::match_combine_or<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,llvm::PatternMatch::match_combine_or<llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,39u>,llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,40u>>>,llvm::PatternMatch::bind_ty<llvm::Value>,13u,false>>,40u>::match<llvm::Value>(a1 + 16, a2);
  }
}

BOOL llvm::PatternMatch::BinaryOp_match<llvm::PatternMatch::bind_ty<llvm::Value>,llvm::PatternMatch::match_combine_or<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,llvm::PatternMatch::match_combine_or<llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,39u>,llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,40u>>>,13u,false>::match<llvm::Value>@<W0>(_QWORD **a1@<X0>, uint64_t a2@<X1>, BOOL a3@<W8>)
{
  int v3;
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;

  v3 = *(unsigned __int8 *)(a2 + 16);
  if (v3 == 41)
  {
    v4 = *(_QWORD *)(a2 - 64);
    result = 0;
    if (v4)
    {
      **a1 = v4;
      if ((llvm::PatternMatch::match_combine_or<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,llvm::PatternMatch::match_combine_or<llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,39u>,llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,40u>>>::match<llvm::Value>(a1 + 1, *(_QWORD *)(a2 - 32)) & 1) != 0)return 1;
    }
  }
  else
  {
    if (v3 == 5)
    {
      a3 = 0;
      if (*(_WORD *)(a2 + 18) == 13)
      {
        v6 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
        if (v6)
        {
          **a1 = v6;
          if ((llvm::PatternMatch::match_combine_or<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,llvm::PatternMatch::match_combine_or<llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,39u>,llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,40u>>>::match<llvm::Value>(a1 + 1, *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32)) & 1) != 0)a3 = 1;
        }
      }
    }
    return v3 == 5 && a3;
  }
  return result;
}

uint64_t llvm::PatternMatch::BinaryOp_match<llvm::PatternMatch::match_combine_or<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,llvm::PatternMatch::match_combine_or<llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,39u>,llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,40u>>>,llvm::PatternMatch::bind_ty<llvm::Value>,13u,false>::match<llvm::Value>@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t result;
  uint64_t v7;

  v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 == 41)
  {
    result = llvm::PatternMatch::match_combine_or<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,llvm::PatternMatch::match_combine_or<llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,39u>,llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,40u>>>::match<llvm::Value>(a1, *(_QWORD *)(a2 - 64));
    if ((_DWORD)result)
    {
      v7 = *(_QWORD *)(a2 - 32);
      if (v7)
      {
        *a1[3] = v7;
        return 1;
      }
      else
      {
        return 0;
      }
    }
  }
  else
  {
    if (v5 == 5)
    {
      if (*(_WORD *)(a2 + 18) == 13
        && llvm::PatternMatch::match_combine_or<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,llvm::PatternMatch::match_combine_or<llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,39u>,llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,40u>>>::match<llvm::Value>(a1, *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF))))
      {
        a3 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
        if (a3)
        {
          *a1[3] = a3;
          LOBYTE(a3) = 1;
        }
      }
      else
      {
        LOBYTE(a3) = 0;
      }
    }
    return (v5 == 5) & a3;
  }
  return result;
}

uint64_t llvm::PatternMatch::match_combine_or<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,llvm::PatternMatch::match_combine_or<llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,39u>,llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,40u>>>::match<llvm::Value>(uint64_t **a1, uint64_t a2)
{
  if (a2 && *(_BYTE *)(a2 + 16) == 16)
  {
    **a1 = a2;
    return 1;
  }
  if ((llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,39u>::match<llvm::Value>(a1 + 1, a2) & 1) != 0)return 1;
  return llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,40u>::match<llvm::Value>(a1 + 2, a2);
}

uint64_t llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,39u>::match<llvm::Value>(_QWORD **a1, uint64_t a2)
{
  int v2;
  unsigned int v3;
  BOOL v5;
  int v6;
  unsigned int v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  BOOL v11;

  v3 = *(unsigned __int8 *)(a2 + 16);
  v5 = v3 < 0x1C && v3 != 5 || a2 == 0;
  v6 = v5;
  if (!v5)
  {
    v7 = v3 - 28;
    if (v3 < 0x1C)
      v7 = *(unsigned __int16 *)(a2 + 18);
    if (v7 == 39
      && ((v8 = *(_DWORD *)(a2 + 20), (v8 & 0x40000000) != 0)
        ? (v9 = *(uint64_t **)(a2 - 8))
        : (v9 = (uint64_t *)(a2 - 32 * (v8 & 0x7FFFFFF))),
          (v10 = *v9) != 0 ? (v11 = *(_BYTE *)(v10 + 16) == 16) : (v11 = 0),
          v11))
    {
      **a1 = v10;
      v2 = 1;
    }
    else
    {
      v2 = 0;
    }
  }
  return v2 & (v6 ^ 1u);
}

uint64_t llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,40u>::match<llvm::Value>(_QWORD **a1, uint64_t a2)
{
  int v2;
  unsigned int v3;
  BOOL v5;
  int v6;
  unsigned int v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  BOOL v11;

  v3 = *(unsigned __int8 *)(a2 + 16);
  v5 = v3 < 0x1C && v3 != 5 || a2 == 0;
  v6 = v5;
  if (!v5)
  {
    v7 = v3 - 28;
    if (v3 < 0x1C)
      v7 = *(unsigned __int16 *)(a2 + 18);
    if (v7 == 40
      && ((v8 = *(_DWORD *)(a2 + 20), (v8 & 0x40000000) != 0)
        ? (v9 = *(uint64_t **)(a2 - 8))
        : (v9 = (uint64_t *)(a2 - 32 * (v8 & 0x7FFFFFF))),
          (v10 = *v9) != 0 ? (v11 = *(_BYTE *)(v10 + 16) == 16) : (v11 = 0),
          v11))
    {
      **a1 = v10;
      v2 = 1;
    }
    else
    {
      v2 = 0;
    }
  }
  return v2 & (v6 ^ 1u);
}

uint64_t llvm::PatternMatch::CastClass_match<llvm::PatternMatch::match_combine_or<llvm::PatternMatch::BinaryOp_match<llvm::PatternMatch::bind_ty<llvm::Value>,llvm::PatternMatch::match_combine_or<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,llvm::PatternMatch::match_combine_or<llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,39u>,llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,40u>>>,13u,false>,llvm::PatternMatch::BinaryOp_match<llvm::PatternMatch::match_combine_or<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,llvm::PatternMatch::match_combine_or<llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,39u>,llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,40u>>>,llvm::PatternMatch::bind_ty<llvm::Value>,13u,false>>,39u>::match<llvm::Value>(_QWORD **a1, uint64_t a2)
{
  _QWORD **v2;
  unsigned int v3;
  BOOL v5;
  int v6;
  BOOL v7;
  unsigned int v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v2 = a1;
  v3 = *(unsigned __int8 *)(a2 + 16);
  v5 = v3 < 0x1C && v3 != 5 || a2 == 0;
  v6 = v5;
  if (!v5)
  {
    v7 = v3 >= 0x1C;
    v8 = v3 - 28;
    if (!v7)
      v8 = *(unsigned __int16 *)(a2 + 18);
    if (v8 == 39)
    {
      v9 = *(_DWORD *)(a2 + 20);
      if ((v9 & 0x40000000) != 0)
        v10 = *(uint64_t **)(a2 - 8);
      else
        v10 = (uint64_t *)(a2 - 32 * (v9 & 0x7FFFFFF));
      v11 = *v10;
      if (llvm::PatternMatch::BinaryOp_match<llvm::PatternMatch::bind_ty<llvm::Value>,llvm::PatternMatch::match_combine_or<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,llvm::PatternMatch::match_combine_or<llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,39u>,llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,40u>>>,13u,false>::match<llvm::Value>(a1, *v10, (BOOL)v10))
      {
        LODWORD(a1) = 1;
      }
      else
      {
        LODWORD(a1) = llvm::PatternMatch::BinaryOp_match<llvm::PatternMatch::match_combine_or<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,llvm::PatternMatch::match_combine_or<llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,39u>,llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,40u>>>,llvm::PatternMatch::bind_ty<llvm::Value>,13u,false>::match<llvm::Value>(v2 + 4, v11, v12);
      }
    }
    else
    {
      LODWORD(a1) = 0;
    }
  }
  return (v6 ^ 1) & a1;
}

uint64_t llvm::PatternMatch::CastClass_match<llvm::PatternMatch::match_combine_or<llvm::PatternMatch::BinaryOp_match<llvm::PatternMatch::bind_ty<llvm::Value>,llvm::PatternMatch::match_combine_or<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,llvm::PatternMatch::match_combine_or<llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,39u>,llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,40u>>>,13u,false>,llvm::PatternMatch::BinaryOp_match<llvm::PatternMatch::match_combine_or<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,llvm::PatternMatch::match_combine_or<llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,39u>,llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,40u>>>,llvm::PatternMatch::bind_ty<llvm::Value>,13u,false>>,40u>::match<llvm::Value>(_QWORD **a1, uint64_t a2)
{
  _QWORD **v2;
  unsigned int v3;
  BOOL v5;
  int v6;
  BOOL v7;
  unsigned int v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v2 = a1;
  v3 = *(unsigned __int8 *)(a2 + 16);
  v5 = v3 < 0x1C && v3 != 5 || a2 == 0;
  v6 = v5;
  if (!v5)
  {
    v7 = v3 >= 0x1C;
    v8 = v3 - 28;
    if (!v7)
      v8 = *(unsigned __int16 *)(a2 + 18);
    if (v8 == 40)
    {
      v9 = *(_DWORD *)(a2 + 20);
      if ((v9 & 0x40000000) != 0)
        v10 = *(uint64_t **)(a2 - 8);
      else
        v10 = (uint64_t *)(a2 - 32 * (v9 & 0x7FFFFFF));
      v11 = *v10;
      if (llvm::PatternMatch::BinaryOp_match<llvm::PatternMatch::bind_ty<llvm::Value>,llvm::PatternMatch::match_combine_or<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,llvm::PatternMatch::match_combine_or<llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,39u>,llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,40u>>>,13u,false>::match<llvm::Value>(a1, *v10, (BOOL)v10))
      {
        LODWORD(a1) = 1;
      }
      else
      {
        LODWORD(a1) = llvm::PatternMatch::BinaryOp_match<llvm::PatternMatch::match_combine_or<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,llvm::PatternMatch::match_combine_or<llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,39u>,llvm::PatternMatch::CastClass_match<llvm::PatternMatch::bind_ty<llvm::ConstantInt>,40u>>>,llvm::PatternMatch::bind_ty<llvm::Value>,13u,false>::match<llvm::Value>(v2 + 4, v11, v12);
      }
    }
    else
    {
      LODWORD(a1) = 0;
    }
  }
  return (v6 ^ 1) & a1;
}

_QWORD *deserializeCompilerOutputData(_QWORD *result, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v10;
  uint64_t v11;
  size_t v12;
  dispatch_data_t v13;
  char v14;

  v5 = *a3 + 8;
  v6 = *(_QWORD *)((char *)result + *a3);
  *a3 = v5;
  if (v6)
  {
    v10 = result;
    do
    {
      v11 = *(_QWORD *)((char *)v10 + v5);
      *a3 = v5 + 8;
      v14 = v11;
      v12 = *(_QWORD *)((char *)v10 + v5 + 8);
      *a3 = v5 + 16;
      result = std::__hash_table<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>>>::find<CompilerOutputType>(a4, &v14);
      if (!result || !result[3])
      {
        if (v12)
        {
          v13 = dispatch_data_create((char *)v10 + *a3, v12, 0, 0);
          result = std::__hash_table<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>>>::__emplace_unique_key_args<CompilerOutputType,CompilerOutputType&,NSObject  {objcproto16OS_dispatch_data}*>(a5, &v14, &v14, &v13);
        }
      }
      v5 = *a3 + ((v12 + 7) & 0xFFFFFFFFFFFFFFF8);
      *a3 = v5;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t **std::__hash_table<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>>>::find<CompilerOutputType>(_QWORD *a1, char *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t ***v6;
  uint64_t **result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(uint64_t ****)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t **)*result)
  {
    v8 = (unint64_t)result[1];
    if (v8 == v3)
    {
      if (*((unsigned __int8 *)result + 16) == v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>>>::__emplace_unique_key_args<CompilerOutputType,CompilerOutputType&,NSObject  {objcproto16OS_dispatch_data}*>(uint64_t a1, char *a2, _BYTE *a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  _QWORD *v12;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v9 <= v8)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (*((unsigned __int8 *)v12 + 16) == v8)
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v12 = operator new(0x20uLL);
  *v12 = 0;
  v12[1] = v8;
  *((_BYTE *)v12 + 16) = *a3;
  v12[3] = *a4;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>>>::__rehash<true>(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *v12 = *v21;
LABEL_38:
    *v21 = v12;
    goto LABEL_39;
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v20 + 8 * v4) = a1 + 16;
  if (*v12)
  {
    v22 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_240FF55D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *createMTLConstantGlobalToArgPass(MTLBoundsCheck::SharedPassData *a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  MetalModulePass::MetalModulePass((uint64_t)v2, (uint64_t)&ConstantGlobalToArgPass::ID, (uint64_t)a1);
  *v2 = &off_25111F3E8;
  return v2;
}

void sub_240FF5640(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x24268D8F0](v1, 0x10E1C40C8265ECALL);
  _Unwind_Resume(a1);
}

void ConstantGlobalToArgPass::~ConstantGlobalToArgPass(ConstantGlobalToArgPass *this)
{
  char *v2;

  *(_QWORD *)this = &off_25111E050;
  v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
}

{
  char *v2;

  *(_QWORD *)this = &off_25111E050;
  v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x24268D8F0);
}

uint64_t ConstantGlobalToArgPass::runOnModule(llvm::Module **this, llvm::Module *a2)
{
  llvm::Module *v4;
  llvm::NamedMDNode *NamedMetadata;
  llvm::NamedMDNode *v6;
  int NumOperands;
  int i;
  uint64_t Operand;
  uint64_t v10;
  llvm::Value *v11;
  _QWORD *String;
  uint64_t v13;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  ConstantGlobalToArgPass *v19;
  void *v20;
  void *v21;
  uint64_t inserted;
  unsigned int v23;
  llvm::Value **v24;
  uint64_t v25;
  ConstantGlobalToArgPass *v26;
  llvm::Type *v27;
  ConstantGlobalToArgPass *v28;
  unsigned int PrefTypeAlignment;
  void *v30;
  int v31;
  int v32;
  uint64_t v33;
  char *v34;
  unsigned int v35;
  int64x2_t v36;
  void **v37;
  unsigned __int8 *v38;
  unsigned int v39;
  llvm::Value *v40;
  int v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  llvm::ConstantExpr *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  char *v51;
  char *v52;
  llvm::Value *v53;
  llvm::Value *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  llvm::Instruction *AsInstruction;
  unsigned int v59;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  llvm::Instruction *v68;
  uint64_t v69;
  llvm::Instruction *v70;
  uint64_t v71;
  uint64_t v72;
  llvm::Instruction *v73;
  uint64_t v74;
  llvm::Instruction *v75;
  char *v76;
  llvm::Type *v77;
  llvm::Value *AlignedLoad;
  uint64_t v79;
  char *Name;
  size_t v81;
  llvm::Type *GVBaseType;
  uint64_t ConstGEP1_32;
  uint64_t v84;
  char *v86;
  llvm::Value *v87;
  unsigned int v88;
  ConstantGlobalToArgPass *v89;
  uint64_t v90[2];
  llvm::ConstantExpr *v91;
  llvm::Value *v92;
  int64x2_t v93;
  char *v94;
  int v95;
  unsigned int v96;
  unsigned int v97[6];
  char v98;
  uint64_t v99[2];
  int v100;
  void *v101;
  unsigned int v102;
  uint64_t v103;
  __int16 v104;
  void *v105[2];
  _WORD v106[52];
  uint64_t v107;
  uint64_t v108;
  llvm::Value *v109;
  unsigned int v110;
  uint64_t v111;
  __int128 v112;
  _QWORD v113[10];

  v113[8] = *MEMORY[0x24BDAC8D0];
  MetalModulePass::runOnModule((MetalModulePass *)this, a2);
  v99[0] = 0;
  v99[1] = 0;
  v100 = 0;
  v89 = (ConstantGlobalToArgPass *)this;
  v4 = this[6];
  v105[0] = "air.global_bindings";
  v106[8] = 259;
  NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v4, (const llvm::Twine *)v105);
  v6 = NamedMetadata;
  if (NamedMetadata)
  {
    NumOperands = llvm::NamedMDNode::getNumOperands(NamedMetadata);
    if (NumOperands)
    {
      for (i = 0; i != NumOperands; ++i)
      {
        Operand = llvm::NamedMDNode::getOperand(v6);
        v10 = Operand - 8 * *(unsigned int *)(Operand + 8);
        v11 = *(llvm::Value **)(*(_QWORD *)(v10 + 8) + 128);
        String = (_QWORD *)llvm::MDString::getString(*(llvm::MDString **)(*(_QWORD *)(v10 + 16)
                                                                        - 8
                                                                        * *(unsigned int *)(*(_QWORD *)(v10 + 16) + 8)
                                                                        + 8));
        if (v13 == 11)
        {
          if (*String == 0x747865742E726961 && *(_QWORD *)((char *)String + 3) == 0x657275747865742ELL)
            continue;
          if (*String == 0x706D61732E726961 && *(_QWORD *)((char *)String + 3) == 0x72656C706D61732ELL)
            continue;
        }
        *(_QWORD *)&v112 = llvm::Value::getName(v11);
        *((_QWORD *)&v112 + 1) = v16;
        llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v99, &v112, (uint64_t)v105);
      }
    }
  }
  *(_QWORD *)&v112 = v113;
  *((_QWORD *)&v112 + 1) = 0x800000000;
  v17 = (char *)a2 + 8;
  v18 = *((_QWORD *)a2 + 2);
  if ((char *)v18 == v17)
  {
    v33 = 0;
    goto LABEL_131;
  }
  v19 = v89;
  do
  {
    if (v18)
      v20 = (void *)(v18 - 56);
    else
      v20 = 0;
    if (ConstantGlobalToArgPass::shouldConvertGlobal(v19, (llvm::GlobalVariable *)v20))
    {
      v105[0] = v20;
      llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)&v112, (uint64_t *)v105);
    }
    else if (*(_BYTE *)(*(_QWORD *)v20 + 8) == 15 && MTLBoundsCheck::checkAddressSpace((uint64_t)v20))
    {
      v105[0] = (void *)llvm::Value::getName((llvm::Value *)v20);
      v105[1] = v21;
      v94 = 0;
      if ((llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>(v99, (uint64_t)v105, &v94) & 1) == 0)MTLBoundsCheck::SharedPassData::skipIndirectionDeep(*((MTLBoundsCheck::SharedPassData **)v89 + 8), (llvm::Value *)v20);
    }
    v18 = *(_QWORD *)(v18 + 8);
    v19 = v89;
  }
  while ((char *)v18 != v17);
  if (!DWORD2(v112))
  {
    v33 = 0;
    goto LABEL_131;
  }
  inserted = MTLBoundsCheck::SharedPassData::getOrInsertGlobalConstantsTableGV(*((MTLBoundsCheck::SharedPassData **)v89
                                                                               + 8));
  v96 = 128;
  v94 = (char *)MEMORY[0x24268CD5C](6144, 8);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::initEmpty((uint64_t)&v94);
  v87 = (llvm::Value *)inserted;
  LOBYTE(v97[0]) = 0;
  v98 = 0;
  if (DWORD2(v112))
  {
    v23 = 0;
    v24 = (llvm::Value **)v112;
    v25 = 8 * DWORD2(v112);
    v26 = v89;
    do
    {
      v109 = 0;
      v109 = *v24;
      v27 = (llvm::Type *)*((_QWORD *)v109 + 3);
      v28 = v26;
      PrefTypeAlignment = llvm::DataLayout::getPrefTypeAlignment(*((llvm::DataLayout **)v26 + 7), v27);
      v105[0] = (void *)llvm::DataLayout::getTypeAllocSize(*((llvm::DataLayout **)v28 + 7), v27);
      v105[1] = v30;
      v31 = llvm::TypeSize::operator unsigned long long();
      LODWORD(v101) = (v23 + (unint64_t)PrefTypeAlignment - 1) / PrefTypeAlignment * PrefTypeAlignment;
      HIDWORD(v101) = v31 - v23 + (_DWORD)v101;
      llvm::SmallVectorImpl<MTLBoundsCheck::ConstantDataHeader>::emplace_back<MTLBoundsCheck::ConstantDataHeader&>(*(_QWORD *)(*((_QWORD *)v89 + 8) + 64) + 592, (uint64_t *)&v101);
      v32 = (int)v101;
      *(_DWORD *)llvm::ValueMap<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t *)&v94, &v109) = v32;
      v23 += HIDWORD(v101);
      ++v24;
      v25 -= 8;
      v26 = v89;
    }
    while (v25);
  }
  else
  {
    v23 = 0;
    v26 = v89;
  }
  llvm::SmallVectorImpl<unsigned char>::resizeImpl<false>((_QWORD *)(*(_QWORD *)(*((_QWORD *)v26 + 8) + 64) + 608), v23);
  v34 = v94;
  v35 = v96;
  if (v95)
  {
    v105[0] = v94;
    v105[1] = &v94[48 * v96];
    llvm::DenseMapIterator<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>,false>::AdvancePastEmptyBuckets((uint64_t *)v105);
    v36 = *(int64x2_t *)v105;
    v34 = v94;
    v35 = v96;
  }
  else
  {
    v36 = vdupq_n_s64((unint64_t)&v94[48 * v96]);
  }
  v93 = v36;
  v86 = &v34[48 * v35];
LABEL_39:
  if ((char *)v93.i64[0] != v86)
  {
    v37 = *(void ***)(v93.i64[0] + 24);
    v88 = *(_DWORD *)(v93.i64[0] + 40);
    ConstantGlobalToArgPass::serializeConstantValue((llvm::DataLayout **)v89, (llvm::Type **)*(v37 - 4), v88);
    v105[0] = v37[1];
    v105[1] = 0;
    llvm::SmallVector<llvm::User *,4u>::SmallVector<llvm::Value::user_iterator_impl<llvm::User>>(&v109, (uint64_t *)v105);
    while (1)
    {
      while (1)
      {
        if (!v110)
        {
          llvm::GlobalVariable::dropAllReferences((llvm::GlobalVariable *)v37);
          llvm::GlobalVariable::eraseFromParent((llvm::GlobalVariable *)v37);
          if (v109 != (llvm::Value *)&v111)
            free(v109);
          v93.i64[0] += 48;
          llvm::DenseMapIterator<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>,false>::AdvancePastEmptyBuckets(v93.i64);
          goto LABEL_39;
        }
        v38 = (unsigned __int8 *)*((_QWORD *)v109 + --v110);
        v39 = v38[16];
        v40 = v39 <= 0x1B ? 0 : (llvm::Value *)v38;
        v92 = v40;
        if (!v40)
          break;
        MTLIRBuilder::MTLIRBuilder<llvm::Instruction *&>((uint64_t)v105, &v92);
        if (*((_BYTE *)v92 + 16) == 83 && v92 != 0)
        {
          v42 = *((_DWORD *)v92 + 5);
          v43 = v42 & 0x7FFFFFF;
          if ((v42 & 0x7FFFFFF) != 0)
          {
            v44 = 0;
            while (1)
            {
              v45 = (char *)v92 - 32 * v43;
              if ((v42 & 0x40000000) != 0)
                v45 = (char *)*((_QWORD *)v92 - 1);
              if (*(void ***)&v45[32 * v44] == v37)
                break;
              if (++v44 == v43)
                goto LABEL_123;
            }
            v71 = *(_QWORD *)&v45[32 * *((unsigned int *)v92 + 15) + 8 * v44];
            v72 = *(_QWORD *)(v71 + 40);
            if (v72 == v71 + 40)
            {
              v75 = 0;
            }
            else
            {
              v73 = (llvm::Instruction *)(v72 - 24);
              if (v72)
                v74 = v72 - 24;
              else
                v74 = 0;
              if (*(unsigned __int8 *)(v74 + 16) - 29 >= 0xB)
                v75 = 0;
              else
                v75 = v73;
            }
            llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)v105, v75);
          }
        }
LABEL_123:
        v77 = (llvm::Type *)*((_QWORD *)v87 + 3);
        v104 = 257;
        AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v105, v77, (uint64_t)v87, 0, 0, (uint64_t)&v101);
        v79 = *((_QWORD *)v89 + 8);
        Name = (char *)llvm::Value::getName(v87);
        GVBaseType = (llvm::Type *)MTLBoundsCheck::SharedPassData::getGVBaseType(v79, Name, v81);
        v104 = 257;
        ConstGEP1_32 = llvm::IRBuilderBase::CreateConstGEP1_32((llvm::Type **)v105, GVBaseType, AlignedLoad, v88, (const llvm::Twine *)&v101);
        v84 = (uint64_t)*v37;
        v104 = 257;
        llvm::IRBuilderBase::CreateCast((uint64_t)v105, 49, ConstGEP1_32, v84, (uint64_t)&v101);
        llvm::User::replaceUsesOfWith();
        llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)&v108);
        llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v107);
        v76 = (char *)v105[0];
        if (v105[0] != v106)
LABEL_124:
          free(v76);
      }
      if (v39 == 5)
        v46 = (llvm::ConstantExpr *)v38;
      else
        v46 = 0;
      v91 = v46;
      if (v46)
      {
        v105[0] = v106;
        v105[1] = (void *)0x400000000;
        llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)v105, (uint64_t *)&v91);
        v47 = LODWORD(v105[1]);
        if (LODWORD(v105[1]))
        {
          v48 = 0;
          do
          {
            v49 = *(_QWORD *)(*((_QWORD *)v105[0] + v48) + 8);
            if (v49)
            {
              do
              {
                v50 = *(_BYTE **)(v49 + 24);
                if (v50[16] != 5)
                  v50 = 0;
                v101 = v50;
                if (v50)
                  llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)v105, (uint64_t *)&v101);
                v49 = *(_QWORD *)(v49 + 8);
              }
              while (v49);
              v47 = LODWORD(v105[1]);
            }
            ++v48;
          }
          while (v47 > v48);
          v51 = (char *)v105[0];
          if (v47)
          {
            v52 = (char *)v105[0] + 8 * v47;
            do
            {
              v54 = (llvm::Value *)*((_QWORD *)v52 - 1);
              v52 -= 8;
              v53 = v54;
              v90[0] = *((_QWORD *)v54 + 1);
              v90[1] = 0;
              llvm::SmallVector<llvm::User *,4u>::SmallVector<llvm::Value::user_iterator_impl<llvm::User>>(&v101, v90);
              v55 = (uint64_t *)v101;
              if (v102)
              {
                v56 = (uint64_t *)((char *)v101 + 8 * v102);
                do
                {
                  v57 = *v55;
                  v90[0] = 0;
                  AsInstruction = (llvm::Instruction *)llvm::ConstantExpr::getAsInstruction(v91, 0);
                  v90[0] = (uint64_t)AsInstruction;
                  v59 = *(unsigned __int8 *)(v57 + 16);
                  if (v59 != 83 || v57 == 0)
                  {
                    if (v59 < 0x1C || v57 == 0)
                    {
                      llvm::Value::dump(v53);
                      llvm::Value::dump((llvm::Value *)v57);
                    }
                    else
                    {
                      llvm::Instruction::insertBefore(AsInstruction, (llvm::Instruction *)v57);
                    }
                  }
                  else
                  {
                    v62 = *(_DWORD *)(v57 + 20);
                    v63 = v62 & 0x7FFFFFF;
                    if ((v62 & 0x7FFFFFF) != 0)
                    {
                      v64 = 0;
                      while (1)
                      {
                        v65 = v57 - 32 * v63;
                        if ((v62 & 0x40000000) != 0)
                          v65 = *(_QWORD *)(v57 - 8);
                        if (*(llvm::Value **)(v65 + 32 * v64) == v53)
                          break;
                        if (++v64 == v63)
                          goto LABEL_102;
                      }
                      v66 = *(_QWORD *)(v65 + 32 * *(unsigned int *)(v57 + 60) + 8 * v64);
                      v67 = *(_QWORD *)(v66 + 40);
                      if (v67 == v66 + 40)
                      {
                        v70 = 0;
                      }
                      else
                      {
                        v68 = (llvm::Instruction *)(v67 - 24);
                        if (v67)
                          v69 = v67 - 24;
                        else
                          v69 = 0;
                        if (*(unsigned __int8 *)(v69 + 16) - 29 >= 0xB)
                          v70 = 0;
                        else
                          v70 = v68;
                      }
                      llvm::Instruction::insertBefore(AsInstruction, v70);
                      llvm::PHINode::setIncomingValue(v57, v64, v90[0]);
                    }
                  }
LABEL_102:
                  llvm::User::replaceUsesOfWith();
                  if (v53 == v91)
                    llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)&v109, v90);
                  ++v55;
                }
                while (v55 != v56);
                v55 = (uint64_t *)v101;
              }
              if (v55 != &v103)
                free(v55);
            }
            while (v52 != v51);
            v51 = (char *)v105[0];
          }
        }
        else
        {
          v51 = (char *)v105[0];
        }
        if (v51 != (char *)v106)
        {
          v76 = v51;
          goto LABEL_124;
        }
      }
      else
      {
        llvm::Value::dump((llvm::Value *)v38);
      }
    }
  }
  if (v98)
  {
    llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>::~DenseMap(v97);
    v98 = 0;
  }
  llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::~DenseMap((unsigned int *)&v94);
  v33 = 1;
LABEL_131:
  if ((_QWORD *)v112 != v113)
    free((void *)v112);
  llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::~DenseMap((uint64_t)v99);
  return v33;
}

void sub_240FF5F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,unsigned int a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43)
{
  uint64_t v43;
  void *v45;

  if (a32)
  {
    llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>::~DenseMap(a9);
    a32 = 0;
  }
  llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::~DenseMap(&a26);
  v45 = *(void **)(v43 - 192);
  if (v45 != a10)
    free(v45);
  llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::~DenseMap((uint64_t)&a34);
  _Unwind_Resume(a1);
}

uint64_t ConstantGlobalToArgPass::shouldConvertGlobal(ConstantGlobalToArgPass *this, llvm::GlobalVariable *a2)
{
  uint64_t result;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  BOOL v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t Name;
  unint64_t v15;
  BOOL v16;

  if ((*((_BYTE *)a2 + 33) & 0x1C) != 0
    || (*((_BYTE *)a2 + 80) & 1) == 0 && (llvm::GlobalValue::isDeclaration(a2) & 1) != 0
    || (llvm::GlobalValue::isDeclaration(a2) & 1) != 0)
  {
    return 0;
  }
  result = llvm::Value::hasNUsesOrMore(a2);
  if (!(_DWORD)result)
    return result;
  if ((*((_BYTE *)a2 + 80) & 2) != 0)
    return 0;
  result = ConstantGlobalToArgPass::shouldConvertType(this, *(llvm::Type **)a2);
  if ((_DWORD)result)
  {
    if ((*((_BYTE *)a2 + 23) & 0x10) == 0
      || (v5 = (_QWORD *)llvm::Value::getName(a2), v6 < 0x13)
      || (*v5 == 0x61735F7269615F5FLL ? (v7 = v5[1] == 0x74735F72656C706DLL) : (v7 = 0),
          v7 ? (v8 = *(_QWORD *)((char *)v5 + 11) == 0x65746174735F7265) : (v8 = 0),
          !v8))
    {
      v9 = *((_QWORD *)a2 + 1);
      if (!v9)
        return 1;
      while (1)
      {
        v10 = *(uint64_t **)(v9 + 24);
        if (v10 && *((_BYTE *)v10 + 16) == 5 && *((_WORD *)v10 + 9) == 49)
        {
          v12 = *v10;
          if (*(_BYTE *)(v12 + 8) == 15)
          {
            v13 = **(_QWORD **)(v12 + 16);
            if (*(_BYTE *)(v13 + 8) == 16)
            {
              if (*(_QWORD *)(v13 + 24))
              {
                Name = llvm::StructType::getName((llvm::StructType *)v13);
                if (v15 >= 0x11)
                {
                  v16 = *(_QWORD *)Name == 0x5F2E746375727473 && *(_QWORD *)(Name + 8) == 0x5F72656C706D6173;
                  if (v16 && *(_BYTE *)(Name + 16) == 116)
                    break;
                }
              }
            }
          }
        }
        v9 = *(_QWORD *)(v9 + 8);
        result = 1;
        if (!v9)
          return result;
      }
    }
    return 0;
  }
  return result;
}

uint64_t llvm::SmallVectorImpl<MTLBoundsCheck::ConstantDataHeader>::emplace_back<MTLBoundsCheck::ConstantDataHeader&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int v4;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(a1, *a2);
    v4 = *(_DWORD *)(a1 + 8);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = *a2;
    v4 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v4;
  }
  return *(_QWORD *)a1 + 8 * v4 - 8;
}

_QWORD *llvm::ValueMap<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>::operator[](uint64_t *a1, llvm::Value **a2)
{
  _QWORD *v3;
  void *v5;
  _QWORD v6[4];

  llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v5, *a2);
  v5 = &unk_25111F488;
  v6[3] = a1;
  v3 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::FindAndConstruct(a1, (uint64_t)&v5)+ 5;
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v6);
  return v3;
}

void sub_240FF62DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t ConstantGlobalToArgPass::serializeConstantValue(llvm::DataLayout **this, llvm::Type **a2, unint64_t a3)
{
  _BOOL8 v6;
  uint64_t v7;
  int v8;
  uint64_t RawDataValues;
  size_t v10;
  size_t v11;
  void *v12;
  uint64_t ***p_src;
  size_t v14;
  uint64_t v15;
  int v16;
  void *v17;
  uint64_t v18;
  int v19;
  uint64_t *LimitedValue;
  uint64_t v22;
  int v23;
  void *v24;
  size_t v25;
  llvm::Type *v26;
  uint64_t StructLayout;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  llvm::Constant *v32;
  llvm::Type *v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t i;
  llvm::Constant *AggregateElement;
  uint64_t **v39;
  unsigned int v40;
  uint64_t *__src;
  unint64_t TypeAllocSize;
  _BOOL8 v43;

  TypeAllocSize = llvm::DataLayout::getTypeAllocSize(this[7], *a2);
  v43 = v6;
  v7 = llvm::TypeSize::operator unsigned long long();
  v8 = *((unsigned __int8 *)a2 + 16);
  if ((v8 & 0xFE) == 0xE)
  {
    RawDataValues = llvm::ConstantDataSequential::getRawDataValues((llvm::ConstantDataSequential *)a2);
    v11 = v10;
    v12 = (void *)(*(_QWORD *)(*((_QWORD *)this[8] + 8) + 608) + a3);
    p_src = (uint64_t ***)RawDataValues;
    v14 = v11;
LABEL_11:
    memcpy(v12, p_src, v14);
    return v7;
  }
  if (v8 == 17)
  {
    llvm::DataLayout::getTypeSizeInBits((uint64_t)this[7], (uint64_t)*a2);
    TypeAllocSize = (unint64_t)(v18 + 7) >> 3;
    v43 = v19 == 1;
    llvm::APFloat::bitcastToAPInt((uint64_t *)&v39, (llvm::APFloat *)(a2 + 3));
    LimitedValue = llvm::APInt::getLimitedValue(&v39, 0xFFFFFFFFFFFFFFFFLL);
    if (v40 >= 0x41 && v39)
      MEMORY[0x24268D8D8](v39, 0x1000C8000313F17);
    __src = LimitedValue;
    v17 = (void *)(*(_QWORD *)(*((_QWORD *)this[8] + 8) + 608) + a3);
    v14 = llvm::TypeSize::operator unsigned long long();
    p_src = (uint64_t ***)&__src;
    goto LABEL_10;
  }
  if (v8 == 16)
  {
    llvm::DataLayout::getTypeSizeInBits((uint64_t)this[7], (uint64_t)*a2);
    TypeAllocSize = (unint64_t)(v15 + 7) >> 3;
    v43 = v16 == 1;
    v39 = (uint64_t **)llvm::APInt::getLimitedValue((uint64_t ***)a2 + 3, 0xFFFFFFFFFFFFFFFFLL);
    v17 = (void *)(*(_QWORD *)(*((_QWORD *)this[8] + 8) + 608) + a3);
    v14 = llvm::TypeSize::operator unsigned long long();
    p_src = &v39;
LABEL_10:
    v12 = v17;
    goto LABEL_11;
  }
  if ((v8 - 11) <= 2)
  {
    llvm::DataLayout::getTypeSizeInBits((uint64_t)this[7], (uint64_t)*a2);
    TypeAllocSize = (unint64_t)(v22 + 7) >> 3;
    v43 = v23 == 1;
    v24 = (void *)(*(_QWORD *)(*((_QWORD *)this[8] + 8) + 608) + a3);
    v25 = llvm::TypeSize::operator unsigned long long();
    bzero(v24, v25);
    return v7;
  }
  if (v8 != 9)
  {
    if ((v8 - 11) < 0xFDu)
    {
      llvm::Value::dump((llvm::Value *)a2);
      return v7;
    }
    v33 = *a2;
    v34 = *((unsigned __int8 *)*a2 + 8);
    if (v34 == 16)
    {
      v35 = *((_DWORD *)v33 + 3);
    }
    else
    {
      if (v34 != 17 && v34 != 18)
      {
        v36 = 1;
LABEL_30:
        for (i = 0; i != v36; ++i)
        {
          AggregateElement = (llvm::Constant *)llvm::Constant::getAggregateElement((llvm::Constant *)a2);
          a3 += ConstantGlobalToArgPass::serializeConstantValue((ConstantGlobalToArgPass *)this, AggregateElement, a3);
        }
        return v7;
      }
      v35 = *((_DWORD *)v33 + 8);
    }
    if (!v35)
      return v7;
    v36 = v35;
    goto LABEL_30;
  }
  v26 = *a2;
  StructLayout = llvm::DataLayout::getStructLayout();
  v28 = *((unsigned int *)v26 + 3);
  if ((_DWORD)v28)
  {
    v29 = 0;
    v30 = StructLayout + 16;
    do
    {
      v31 = *(_QWORD *)(v30 + 8 * v29);
      v32 = (llvm::Constant *)llvm::Constant::getAggregateElement((llvm::Constant *)a2);
      ConstantGlobalToArgPass::serializeConstantValue((ConstantGlobalToArgPass *)this, v32, v31 + a3);
      ++v29;
    }
    while (v28 != v29);
  }
  return v7;
}

void sub_240FF65B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unsigned int a11)
{
  if (a11 >= 0x41)
    GEPExpressionSum::accumulateGEP(&a10);
  _Unwind_Resume(exception_object);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, (uint64_t)a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::InsertIntoBucketImpl<llvm::StringRef>(a1, (uint64_t)a2, (uint64_t)a2, v10);
    v7 = (_QWORD *)result;
    *(_OWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  int v12;
  BOOL v13;
  int v14;
  _BOOL4 isEqual;
  _BOOL4 v16;
  uint64_t v17;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = v4 - 1;
    v8 = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue() & (v4 - 1);
    v9 = v6 + 16 * v8;
    if (llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(*(char **)a2, *(_QWORD *)(a2 + 8), *(void **)v9, *(_QWORD *)(v9 + 8)))
    {
      result = 1;
    }
    else
    {
      v11 = 0;
      v12 = 1;
      while (*(_QWORD *)v9 != -1)
      {
        if (v11)
          v13 = 0;
        else
          v13 = *(_QWORD *)v9 == -2;
        if (v13)
          v11 = v9;
        v17 = v11;
        v14 = v12 + 1;
        v8 = (v8 + v12) & v7;
        v9 = v6 + 16 * v8;
        isEqual = llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(*(char **)a2, *(_QWORD *)(a2 + 8), *(void **)v9, *(_QWORD *)(v9 + 8));
        v11 = v17;
        v16 = isEqual;
        result = 1;
        v12 = v14;
        if (v16)
          goto LABEL_5;
      }
      result = 0;
      if (v11)
        v9 = v11;
    }
  }
  else
  {
    v9 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v9;
  return result;
}

BOOL llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(char *a1, size_t __n, void *__s2, uint64_t a4)
{
  if (__s2 == (void *)-2)
    return a1 + 2 == 0;
  if (__s2 == (void *)-1)
    return a1 + 1 == 0;
  if (__n != a4)
    return 0;
  if (__n)
    return memcmp(a1, __s2, __n) == 0;
  return 1;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::InsertIntoBucketImpl<llvm::StringRef>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_OWORD *llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_OWORD *)MEMORY[0x24268CD5C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::moveFromOldBuckets(a1, v4, (_OWORD *)v4 + v3);
    return (_OWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result++ = xmmword_24105A7C0;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::moveFromOldBuckets(uint64_t result, _OWORD *a2, _OWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  _OWORD *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_OWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7++ = xmmword_24105A7C0;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if (*(_QWORD *)a2 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v9 = 0;
      result = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>((uint64_t *)v5, (uint64_t)a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t ConstantGlobalToArgPass::shouldConvertType(ConstantGlobalToArgPass *this, llvm::Type *a2)
{
  int v4;
  _QWORD *Name;
  unint64_t v6;
  BOOL v7;
  unint64_t v9;
  uint64_t result;

  while (1)
  {
    v4 = *((_DWORD *)a2 + 2);
    if (v4 != 15)
      break;
    if ((v4 & 0xFE) == 0x12)
      v4 = *(_DWORD *)(**((_QWORD **)a2 + 2) + 8);
    if ((v4 & 0xFFFFFF00) != 0x200)
      return 0;
LABEL_7:
    a2 = (llvm::Type *)**((_QWORD **)a2 + 2);
  }
  if (v4 == 17)
    goto LABEL_7;
  if (v4 != 16)
    return 1;
  if (*((_QWORD *)a2 + 3))
  {
    Name = (_QWORD *)llvm::StructType::getName(a2);
    if (v6 >= 0x15)
    {
      v7 = *Name == 0x6D2E746375727473 && Name[1] == 0x61733A3A6C617465;
      if (v7 && *(_QWORD *)((char *)Name + 13) == 0x72656C706D61733ALL)
        return 0;
    }
  }
  if (!*((_DWORD *)a2 + 3))
    return 1;
  v9 = 0;
  do
  {
    result = ConstantGlobalToArgPass::shouldConvertType(this, *(llvm::Type **)(*((_QWORD *)a2 + 2) + 8 * v9));
    if ((result & 1) == 0)
      break;
    ++v9;
  }
  while (v9 < *((unsigned int *)a2 + 3));
  return result;
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::initEmpty(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  llvm::ValueHandleBase *v3;
  llvm::ValueHandleBase *v4;
  char *v5;
  _QWORD v6[3];
  uint64_t v7;

  *(_QWORD *)(a1 + 8) = 0;
  v6[1] = 0;
  v6[2] = -4096;
  v6[0] = 2;
  v7 = 0;
  v1 = *(_DWORD *)(a1 + 16);
  if (v1)
  {
    v2 = *(_QWORD *)a1 + 48 * v1;
    v3 = (llvm::ValueHandleBase *)(*(_QWORD *)a1 + 8);
    do
    {
      v4 = llvm::ValueHandleBase::ValueHandleBase(v3, (LODWORD(v6[0]) >> 1) & 3, v6);
      v5 = (char *)v4 - 8;
      *((_QWORD *)v4 - 1) = &unk_25111F488;
      *((_QWORD *)v4 + 3) = v7;
      v3 = (llvm::ValueHandleBase *)((char *)v4 + 48);
    }
    while (v5 + 48 != (char *)v2);
  }
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v6);
}

void sub_240FF6B88(_Unwind_Exception *a1)
{
  llvm::ValueHandleBase *v1;

  llvm::ValueHandleBase::~ValueHandleBase(v1);
  _Unwind_Resume(a1);
}

void llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>::deleted(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  _QWORD v4[4];

  v1 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v4, (*(_DWORD *)(a1 + 8) >> 1) & 3, (_QWORD *)(a1 + 8));
  v2 = *(_QWORD *)(v1 + 24);
  v3 = &unk_25111F488;
  v4[3] = v2;
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::erase(v2, (uint64_t)&v3);
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v4);
}

void sub_240FF6C00(_Unwind_Exception *a1)
{
  llvm::ValueHandleBase *v1;

  llvm::ValueHandleBase::~ValueHandleBase(v1);
  _Unwind_Resume(a1);
}

void llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>::allUsesReplacedWith(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int32x2_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD v8[2];
  void *v9;
  _BYTE v10[24];
  int32x2_t *v11;

  v3 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v10, (*(_DWORD *)(a1 + 8) >> 1) & 3, (_QWORD *)(a1 + 8));
  v4 = *(int32x2_t **)(v3 + 24);
  v9 = &unk_25111F488;
  v11 = v4;
  v7[0] = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>>((uint64_t *)v4, (uint64_t)&v9, v7))v5 = v7[0];
  else
    v5 = *(_QWORD *)v4 + 48 * v4[2].u32[0];
  if (*(_QWORD *)v11 + 48 * v11[2].u32[0] != v5)
  {
    v6 = *(unsigned int *)(v5 + 40);
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::erase(v11, v5);
    v8[0] = a2;
    v8[1] = v6;
    llvm::ValueMap<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>::insert((uint64_t)v11, (uint64_t)v8, (uint64_t)v7);
  }
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v10);
}

void sub_240FF6CE0(_Unwind_Exception *a1)
{
  llvm::ValueHandleBase *v1;

  llvm::ValueHandleBase::~ValueHandleBase(v1);
  _Unwind_Resume(a1);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::erase(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v6;
  _QWORD v7[3];
  uint64_t v8;

  v6 = 0;
  v3 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>>((uint64_t *)a1, a2, &v6);
  if ((_DWORD)v3)
  {
    v4 = v6;
    v7[1] = 0;
    v7[2] = -8192;
    v6 = &unk_25111F488;
    v7[0] = 2;
    v8 = 0;
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v4 + 1), v7);
    v4[4] = v8;
    llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v7);
    *(int32x2_t *)(a1 + 8) = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  return v3;
}

void sub_240FF6D98(_Unwind_Exception *a1)
{
  llvm::ValueHandleBase *v1;

  llvm::ValueHandleBase::~ValueHandleBase(v1);
  _Unwind_Resume(a1);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>>(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  _QWORD v16[5];
  _QWORD v17[4];

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v17[1] = 0;
    v17[2] = -4096;
    v16[4] = &unk_25111F488;
    v17[0] = 2;
    v17[3] = 0;
    v16[1] = 0;
    v16[2] = -8192;
    v16[0] = 2;
    v16[3] = 0;
    v5 = *(_QWORD *)(a2 + 24);
    v6 = v3 - 1;
    v7 = ((v5 >> 4) ^ (v5 >> 9)) & (v3 - 1);
    v8 = v4 + 48 * v7;
    v9 = *(_QWORD *)(v8 + 24);
    if (v5 == v9)
    {
      v10 = 1;
    }
    else
    {
      v12 = 0;
      v13 = 1;
      v10 = 1;
      while (v9 != -4096)
      {
        if (v12)
          v14 = 0;
        else
          v14 = v9 == -8192;
        if (v14)
          v12 = v8;
        v15 = v7 + v13++;
        v7 = v15 & v6;
        v8 = v4 + 48 * (v15 & v6);
        v9 = *(_QWORD *)(v8 + 24);
        if (v5 == v9)
          goto LABEL_4;
      }
      v10 = 0;
      if (v12)
        v8 = v12;
    }
LABEL_4:
    *a3 = v8;
    llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v16);
    llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v17);
  }
  else
  {
    v10 = 0;
    *a3 = 0;
  }
  return v10;
}

int32x2_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::erase(int32x2_t *a1, uint64_t a2)
{
  int32x2_t result;
  _QWORD v5[3];
  uint64_t v6;

  v5[1] = 0;
  v5[2] = -8192;
  v5[0] = 2;
  v6 = 0;
  llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(a2 + 8), v5);
  *(_QWORD *)(a2 + 32) = v6;
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v5);
  result = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
  a1[1] = result;
  return result;
}

void sub_240FF6F34(_Unwind_Exception *a1)
{
  llvm::ValueHandleBase *v1;

  llvm::ValueHandleBase::~ValueHandleBase(v1);
  _Unwind_Resume(a1);
}

double llvm::ValueMap<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>::insert@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  void *v7;
  _QWORD v8[3];
  uint64_t v9;
  void *v10;
  _QWORD v11[4];
  int v12;
  __int128 v13;
  char v14;

  llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v7, *(llvm::Value **)a2);
  v7 = &unk_25111F488;
  v9 = a1;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v11, (LODWORD(v8[0]) >> 1) & 3, v8);
  v10 = &unk_25111F488;
  v11[3] = v9;
  v12 = *(_DWORD *)(a2 + 8);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::try_emplace<unsigned int>(a1, (uint64_t)&v10, &v12, (uint64_t)&v13);
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v11);
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v8);
  result = *(double *)&v13;
  *(_OWORD *)a3 = v13;
  *(_BYTE *)(a3 + 16) = v14;
  return result;
}

void sub_240FF7014(_Unwind_Exception *a1)
{
  llvm::ValueHandleBase *v1;
  llvm::ValueHandleBase *v2;

  llvm::ValueHandleBase::~ValueHandleBase(v2);
  llvm::ValueHandleBase::~ValueHandleBase(v1);
  _Unwind_Resume(a1);
}

void llvm::DenseMapIterator<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>,false>::AdvancePastEmptyBuckets(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[5];
  _QWORD v4[4];

  v4[1] = 0;
  v4[2] = -4096;
  v3[4] = &unk_25111F488;
  v4[0] = 2;
  v4[3] = 0;
  v3[1] = 0;
  v3[2] = -8192;
  v3[0] = 2;
  v3[3] = 0;
  v2 = *a1;
  v1 = a1[1];
  while (v2 != v1 && (*(_QWORD *)(v2 + 24) | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
    v2 += 48;
    *a1 = v2;
  }
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v3);
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v4);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::try_emplace<unsigned int>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>>((uint64_t *)a1, a2, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    v9 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>>(a1, a2, a2, v12);
    result = llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v9 + 1), (_QWORD *)(a2 + 8));
    v9[4] = *(_QWORD *)(a2 + 32);
    *((_DWORD *)v9 + 10) = *a3;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + 48 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v10;
  _QWORD v11[4];

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::grow(a1, v7);
  v10 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>>((uint64_t *)a1, a3, &v10);
  a4 = v10;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  v11[1] = 0;
  v11[2] = -4096;
  v10 = &unk_25111F488;
  v11[0] = 2;
  v11[3] = 0;
  if (a4[3] != -4096)
    --*(_DWORD *)(a1 + 12);
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v11);
  return a4;
}

void llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  *(_QWORD *)a1 = MEMORY[0x24268CD5C]((_QWORD *)v8, 48 * v8, 8);
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::moveFromOldBuckets(a1, (uint64_t)v4, (uint64_t)v4 + 48 * v3);
    llvm::deallocate_buffer(v4, (void *)(48 * v3));
  }
  else
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::initEmpty(a1);
  }
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::moveFromOldBuckets(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v8;
  _QWORD v9[2];
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD v13[2];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::initEmpty(a1);
  v13[1] = 0;
  v14 = -4096;
  v12 = &unk_25111F488;
  v13[0] = 2;
  v15 = 0;
  v9[1] = 0;
  v10 = -8192;
  v9[0] = 2;
  v11 = 0;
  while (a2 != a3)
  {
    v6 = *(_QWORD *)(a2 + 24);
    if (v6 != v14 && v6 != v10)
    {
      v16 = 0;
      llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>>((uint64_t *)a1, a2, &v16);
      v8 = v16;
      llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v16 + 8), (_QWORD *)(a2 + 8));
      *(_QWORD *)(v8 + 32) = *(_QWORD *)(a2 + 32);
      *(_DWORD *)(v8 + 40) = *(_DWORD *)(a2 + 40);
      ++*(_DWORD *)(a1 + 8);
    }
    llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)(a2 + 8));
    a2 += 48;
  }
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v9);
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v13);
}

void sub_240FF7400(_Unwind_Exception *a1)
{
  llvm::ValueHandleBase *v1;
  llvm::ValueHandleBase *v2;

  llvm::ValueHandleBase::~ValueHandleBase(v2);
  llvm::ValueHandleBase::~ValueHandleBase(v1);
  _Unwind_Resume(a1);
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::FindAndConstruct(uint64_t *a1, uint64_t a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>>(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>>((uint64_t)a1, a2, a2, v7);
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v5 + 1), (_QWORD *)(a2 + 8));
    v5[4] = *(_QWORD *)(a2 + 32);
    *((_DWORD *)v5 + 10) = 0;
  }
  return v5;
}

void llvm::SmallVectorImpl<unsigned char>::resizeImpl<false>(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;

  v2 = a1[1];
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (a1[2] < a2)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v2 = a1[1];
      }
      if (a2 != v2)
        bzero((void *)(*a1 + v2), a2 - v2);
    }
    a1[1] = a2;
  }
}

uint64_t llvm::APFloat::bitcastToAPInt(llvm::APFloat *this)
{
  llvm::detail::DoubleAPFloat *v1;
  uint64_t v2;

  v1 = (llvm::APFloat *)((char *)this + 8);
  v2 = *((_QWORD *)this + 1);
  if (llvm::APFloatBase::PPCDoubleDouble(this) == v2)
    return llvm::detail::DoubleAPFloat::bitcastToAPInt(v1);
  else
    return llvm::detail::IEEEFloat::bitcastToAPInt(v1);
}

uint64_t *llvm::APInt::getLimitedValue(uint64_t ***this, unint64_t a2)
{
  unsigned int v4;
  uint64_t *v5;

  v4 = *((_DWORD *)this + 2);
  if (v4 >= 0x41)
  {
    if (v4 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)this) > 0x40)
      return (uint64_t *)a2;
    v5 = **this;
  }
  else
  {
    v5 = (uint64_t *)*this;
  }
  if ((unint64_t)v5 <= a2)
    return v5;
  return (uint64_t *)a2;
}

unsigned int *llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::~DenseMap(unsigned int *a1)
{
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::destroyAll(a1);
  llvm::deallocate_buffer(*(llvm **)a1, (void *)(48 * a1[4]));
  return a1;
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::destroyAll(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v2;
  llvm::ValueHandleBase *v3;
  uint64_t v4;
  _QWORD v5[5];
  _QWORD v6[4];

  v1 = a1[4];
  if ((_DWORD)v1)
  {
    v6[1] = 0;
    v6[2] = -4096;
    v5[4] = &unk_25111F488;
    v6[0] = 2;
    v6[3] = 0;
    v5[1] = 0;
    v5[2] = -8192;
    v5[0] = 2;
    v2 = 48 * v1;
    v3 = (llvm::ValueHandleBase *)(*(_QWORD *)a1 + 8);
    v5[3] = 0;
    do
    {
      llvm::ValueHandleBase::~ValueHandleBase(v3);
      v3 = (llvm::ValueHandleBase *)(v4 + 48);
      v2 -= 48;
    }
    while (v2);
    llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v5);
    llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v6);
  }
}

uint64_t llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::~DenseMap(uint64_t a1)
{
  llvm::deallocate_buffer(*(llvm **)a1, (void *)(16 * *(unsigned int *)(a1 + 16)));
  return a1;
}

size_t *CompilerOutputReflectionBlock::CompilerOutputReflectionBlock(size_t *a1, void *a2, size_t a3, uint64_t a4, void *a5, size_t a6)
{
  unsigned int *v12;
  unsigned int *v13;
  size_t v14;
  size_t v15;
  uint64_t v16;
  AirReflection::Reflection *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  _BOOL4 v20;
  unint64_t v21;
  size_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  _QWORD *v27;
  char v28;
  void *v30;
  void *__src;
  void *v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;

  if (*(_QWORD *)(a4 + 16))
    v12 = (unsigned int *)LLVMGetBufferStart();
  else
    v12 = 0;
  if (*(_QWORD *)(a4 + 8))
    v13 = (unsigned int *)LLVMGetBufferStart();
  else
    v13 = 0;
  if (*(_QWORD *)(a4 + 16))
    v14 = LLVMGetBufferSize();
  else
    v14 = 0;
  v30 = v12;
  __src = a2;
  v32 = a5;
  if (!*(_QWORD *)(a4 + 8))
  {
    v20 = 0;
    v16 = *(_QWORD *)(a4 + 16);
    if (v16)
    {
      v15 = 0;
      goto LABEL_29;
    }
    v15 = 0;
    goto LABEL_27;
  }
  v15 = LLVMGetBufferSize();
  v16 = *(_QWORD *)(a4 + 8);
  if (!*(_QWORD *)(a4 + 16))
  {
    v20 = 0;
    goto LABEL_27;
  }
  if (!v16)
  {
    v20 = 0;
    goto LABEL_29;
  }
  v17 = (AirReflection::Reflection *)((char *)v13 + *v13);
  AirReflection::Reflection::Hash((AirReflection::Reflection *)((char *)v12 + *v12), &v35);
  AirReflection::Reflection::Hash(v17, &v33);
  v18 = v35;
  v19 = v33;
  if (v36 - v35 != v34 - v33)
  {
    v20 = 0;
    if (!v33)
      goto LABEL_23;
    goto LABEL_22;
  }
  v20 = memcmp(v35, v33, v36 - v35) == 0;
  if (v19)
  {
LABEL_22:
    v34 = v19;
    operator delete(v19);
    v18 = v35;
  }
LABEL_23:
  if (v18)
  {
    v36 = v18;
    operator delete(v18);
  }
  if (!*(_QWORD *)(a4 + 16))
  {
    v16 = *(_QWORD *)(a4 + 8);
LABEL_27:
    if (v16)
      v20 = 1;
  }
LABEL_29:
  v21 = (a3 + 87) & 0xFFFFFFFFFFFFFFF8;
  v22 = ((a3 + 87) | 7) + a6;
  v23 = v22 & 0xFFFFFFFFFFFFFFF8;
  v24 = ((v22 | 7) + v15) & 0xFFFFFFFFFFFFFFF8;
  if (v20)
    v25 = v23;
  else
    v25 = v24;
  if (v20)
  {
    v14 = v15;
    v26 = v24;
  }
  else
  {
    v26 = (v14 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *a1 = v26;
  v27 = malloc_type_malloc(v26, 0x1FC74800uLL);
  a1[1] = (size_t)v27;
  *(_OWORD *)v27 = xmmword_24105A890;
  v27[2] = 80;
  v27[3] = a3;
  v27[4] = v25;
  v27[5] = v14;
  v27[6] = v23;
  v27[7] = v15;
  v27[8] = v21;
  v27[9] = a6;
  if (a3)
    memcpy((void *)(a1[1] + 80), __src, a3);
  if (a6)
    memcpy((void *)(a1[1] + v21), v32, a6);
  if (v15)
    memcpy((void *)(a1[1] + v23), v13, v15);
  if (v14)
    v28 = v20;
  else
    v28 = 1;
  if ((v28 & 1) == 0)
    memcpy((void *)(a1[1] + v25), v30, v14);
  return a1;
}

void sub_240FF7930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AirReflection::Reflection::Hash@<X0>(AirReflection::Reflection *this@<X0>, unsigned __int8 **a2@<X8>)
{
  CC_SHA256_CTX c;

  CC_SHA256_Init(&c);
  AirReflection::Reflection::HashImpl((int *)this, &c);
  return flatbuffers::SignatureBuilder::Create(&c, a2);
}

void CompilerOutputReflectionBlock::~CompilerOutputReflectionBlock(void **this)
{
  free(this[1]);
}

unsigned __int8 *addBlocksForOutput(unsigned __int8 *result, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  unsigned __int8 v23;

  v6 = (uint64_t)result;
  if (a3)
  {
    v9 = *a3;
    v8 = a3[1];
    v23 = 0;
    if (v8)
    {
      *(_QWORD *)&v22 = v8;
      *((_QWORD *)&v22 + 1) = v9;
      result = std::__hash_table<std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>>>::__emplace_unique_key_args<CompilerOutputType,CompilerOutputType&,CompilerOutputBlock>((uint64_t)result, (char *)&v23, &v23, &v22);
    }
    v11 = a3[4];
    v10 = a3[5];
    v23 = 3;
    if (v10)
    {
      *(_QWORD *)&v22 = v10;
      *((_QWORD *)&v22 + 1) = v11;
      result = std::__hash_table<std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>>>::__emplace_unique_key_args<CompilerOutputType,CompilerOutputType&,CompilerOutputBlock>(v6, (char *)&v23, &v23, &v22);
    }
    v13 = a3[6];
    v12 = a3[7];
    v23 = 4;
    if (v12)
    {
      *(_QWORD *)&v22 = v12;
      *((_QWORD *)&v22 + 1) = v13;
      result = std::__hash_table<std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>>>::__emplace_unique_key_args<CompilerOutputType,CompilerOutputType&,CompilerOutputBlock>(v6, (char *)&v23, &v23, &v22);
    }
  }
  if (a2)
  {
    v14 = a2[5];
    if (v14)
    {
      v15 = a2[4];
      v23 = 1;
      *(_QWORD *)&v22 = v14;
      *((_QWORD *)&v22 + 1) = v15;
      result = std::__hash_table<std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>>>::__emplace_unique_key_args<CompilerOutputType,CompilerOutputType&,CompilerOutputBlock>(v6, (char *)&v23, &v23, &v22);
    }
    v16 = *a4;
    if (*a4)
    {
      v17 = a4[1];
      v23 = 2;
      *(_QWORD *)&v22 = v16;
      *((_QWORD *)&v22 + 1) = v17;
      result = std::__hash_table<std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>>>::__emplace_unique_key_args<CompilerOutputType,CompilerOutputType&,CompilerOutputBlock>(v6, (char *)&v23, &v23, &v22);
    }
    v18 = a2[8];
    if (v18)
    {
      v19 = a2[7];
      v23 = 6;
      *(_QWORD *)&v22 = v18;
      *((_QWORD *)&v22 + 1) = v19;
      result = std::__hash_table<std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>>>::__emplace_unique_key_args<CompilerOutputType,CompilerOutputType&,CompilerOutputBlock>(v6, (char *)&v23, &v23, &v22);
    }
    v20 = a2[19];
    if (v20)
    {
      v21 = a2[18];
      v23 = 7;
      *(_QWORD *)&v22 = v20;
      *((_QWORD *)&v22 + 1) = v21;
      return std::__hash_table<std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>>>::__emplace_unique_key_args<CompilerOutputType,CompilerOutputType&,CompilerOutputBlock>(v6, (char *)&v23, &v23, &v22);
    }
  }
  return result;
}

uint64_t sizeOfSerializedCompilerBlocks(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  if (!*(_QWORD *)(a1 + 24))
    return 0;
  v1 = *(_QWORD **)(a1 + 16);
  if (!v1)
    return 8;
  result = 8;
  do
  {
    result += ((v1[3] + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    v1 = (_QWORD *)*v1;
  }
  while (v1);
  return result;
}

_QWORD *serializeCompilerBlocks(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t **v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  size_t v10;
  uint64_t v11;
  uint64_t *v12;

  v4 = *(uint64_t ***)(a3 + 16);
  *result = *(_QWORD *)(a3 + 24);
  if (v4)
  {
    v6 = result;
    v7 = 8;
    do
    {
      v8 = *((char *)v4 + 16);
      v9 = (_QWORD *)((char *)v6 + v7);
      v10 = (size_t)v4[3];
      *v9 = v8;
      v9[1] = v10;
      v11 = v7 + 16;
      if (v10)
      {
        v12 = v4[4];
        if (v12)
          result = memcpy((char *)v6 + v11, v12, v10);
      }
      if (a4)
        *(_QWORD *)(a4 + 8 * v8) = v11;
      v7 = (((unint64_t)v4[3] + 7) & 0xFFFFFFFFFFFFFFF8) + v11;
      v4 = (uint64_t **)*v4;
    }
    while (v4);
  }
  return result;
}

uint64_t AirReflection::Reflection::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  unsigned __int16 v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  int v18;
  unsigned __int16 *v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  int *v23;
  int v24;
  unsigned __int16 *v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  int *v29;
  int v30;
  unsigned __int16 *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  int *v35;
  int v36;
  unsigned __int16 *v37;
  uint64_t v38;
  unsigned int *v39;
  uint64_t v40;
  int *v41;
  int v42;
  unsigned __int16 *v43;
  uint64_t v44;
  unsigned int *v45;
  uint64_t v46;
  int *v47;
  int v48;
  unsigned __int16 *v49;
  uint64_t v50;
  unsigned int *v51;
  uint64_t v52;
  int *v53;
  int v54;
  unsigned __int16 *v55;
  uint64_t v56;
  unsigned int *v57;
  uint64_t v58;
  int *v59;
  int v60;
  unsigned __int16 *v61;
  uint64_t v62;
  unsigned int *v63;
  uint64_t v64;
  unsigned int *v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned __int16 *v68;
  uint64_t v69;
  unsigned int *v70;
  uint64_t v71;
  int *v72;
  int v73;
  unsigned __int16 *v74;
  uint64_t v75;
  unsigned int *v76;
  uint64_t result;
  uint64_t v78;
  int *v79;
  int v80;
  int data;

  CC_SHA256_Update(c, "AirReflection.Reflection", 0x18u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
  {
    Air::Version::HashImpl((int *)((char *)a1 + v5), c);
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7 + *(unsigned int *)((char *)a1 + v7));
    data = *v8;
    CC_SHA256_Update(c, &data, 4u);
    v9 = *v8;
    if ((_DWORD)v9)
    {
      v10 = v8 + 1;
      v11 = v8 + 1;
      do
      {
        v12 = *v11++;
        AirReflection::Node::HashImpl((AirReflection::Node *)((char *)v10 + v12), c);
        v10 = v11;
        --v9;
      }
      while (v9);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14 + *(unsigned int *)((char *)a1 + v14));
    data = *v15;
    CC_SHA256_Update(c, &data, 4u);
    v16 = *v15;
    if ((_DWORD)v16)
    {
      v17 = (int *)(v15 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v18 = *v17++;
        data = v18;
        CC_SHA256_Update(c, &data, 4u);
        --v16;
      }
      while (v16);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v19 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v19 >= 0xBu && (v20 = v19[5]) != 0)
  {
    v21 = (unsigned int *)((char *)a1 + v20 + *(unsigned int *)((char *)a1 + v20));
    data = *v21;
    CC_SHA256_Update(c, &data, 4u);
    v22 = *v21;
    if ((_DWORD)v22)
    {
      v23 = (int *)(v21 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v24 = *v23++;
        data = v24;
        CC_SHA256_Update(c, &data, 4u);
        --v22;
      }
      while (v22);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v25 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v25 >= 0xDu && (v26 = v25[6]) != 0)
  {
    v27 = (unsigned int *)((char *)a1 + v26 + *(unsigned int *)((char *)a1 + v26));
    data = *v27;
    CC_SHA256_Update(c, &data, 4u);
    v28 = *v27;
    if ((_DWORD)v28)
    {
      v29 = (int *)(v27 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v30 = *v29++;
        data = v30;
        CC_SHA256_Update(c, &data, 4u);
        --v28;
      }
      while (v28);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v31 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v31 >= 0xFu && (v32 = v31[7]) != 0)
  {
    v33 = (unsigned int *)((char *)a1 + v32 + *(unsigned int *)((char *)a1 + v32));
    data = *v33;
    CC_SHA256_Update(c, &data, 4u);
    v34 = *v33;
    if ((_DWORD)v34)
    {
      v35 = (int *)(v33 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v36 = *v35++;
        data = v36;
        CC_SHA256_Update(c, &data, 4u);
        --v34;
      }
      while (v34);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v37 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v37 >= 0x11u && (v38 = v37[8]) != 0)
  {
    v39 = (unsigned int *)((char *)a1 + v38 + *(unsigned int *)((char *)a1 + v38));
    data = *v39;
    CC_SHA256_Update(c, &data, 4u);
    v40 = *v39;
    if ((_DWORD)v40)
    {
      v41 = (int *)(v39 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v42 = *v41++;
        data = v42;
        CC_SHA256_Update(c, &data, 4u);
        --v40;
      }
      while (v40);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v43 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v43 >= 0x13u && (v44 = v43[9]) != 0)
  {
    v45 = (unsigned int *)((char *)a1 + v44 + *(unsigned int *)((char *)a1 + v44));
    data = *v45;
    CC_SHA256_Update(c, &data, 4u);
    v46 = *v45;
    if ((_DWORD)v46)
    {
      v47 = (int *)(v45 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v48 = *v47++;
        data = v48;
        CC_SHA256_Update(c, &data, 4u);
        --v46;
      }
      while (v46);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v49 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v49 >= 0x15u && (v50 = v49[10]) != 0)
  {
    v51 = (unsigned int *)((char *)a1 + v50 + *(unsigned int *)((char *)a1 + v50));
    data = *v51;
    CC_SHA256_Update(c, &data, 4u);
    v52 = *v51;
    if ((_DWORD)v52)
    {
      v53 = (int *)(v51 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v54 = *v53++;
        data = v54;
        CC_SHA256_Update(c, &data, 4u);
        --v52;
      }
      while (v52);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v55 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v55 >= 0x17u && (v56 = v55[11]) != 0)
  {
    v57 = (unsigned int *)((char *)a1 + v56 + *(unsigned int *)((char *)a1 + v56));
    data = *v57;
    CC_SHA256_Update(c, &data, 4u);
    v58 = *v57;
    if ((_DWORD)v58)
    {
      v59 = (int *)(v57 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v60 = *v59++;
        data = v60;
        CC_SHA256_Update(c, &data, 4u);
        --v58;
      }
      while (v58);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v61 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v61 >= 0x19u && (v62 = v61[12]) != 0)
  {
    v63 = (unsigned int *)((char *)a1 + v62 + *(unsigned int *)((char *)a1 + v62));
    data = *v63;
    CC_SHA256_Update(c, &data, 4u);
    v64 = *v63;
    if ((_DWORD)v64)
    {
      v65 = v63 + 1;
      v66 = v63 + 1;
      do
      {
        v67 = *v66++;
        AirReflection::LocalAllocation::HashImpl((int *)((char *)v65 + v67), c);
        v65 = v66;
        --v64;
      }
      while (v64);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v68 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v68 >= 0x1Bu && (v69 = v68[13]) != 0)
  {
    v70 = (unsigned int *)((char *)a1 + v69 + *(unsigned int *)((char *)a1 + v69));
    data = *v70;
    CC_SHA256_Update(c, &data, 4u);
    v71 = *v70;
    if ((_DWORD)v71)
    {
      v72 = (int *)(v70 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v73 = *v72++;
        data = v73;
        CC_SHA256_Update(c, &data, 4u);
        --v71;
      }
      while (v71);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v74 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v74 >= 0x1Du && (v75 = v74[14]) != 0)
  {
    v76 = (unsigned int *)((char *)a1 + v75 + *(unsigned int *)((char *)a1 + v75));
    data = *v76;
    result = CC_SHA256_Update(c, &data, 4u);
    v78 = *v76;
    if ((_DWORD)v78)
    {
      v79 = (int *)(v76 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v80 = *v79++;
        data = v80;
        result = CC_SHA256_Update(c, &data, 4u);
        --v78;
      }
      while (v78);
    }
  }
  else
  {
    data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t flatbuffers::SignatureBuilder::Create@<X0>(CC_SHA256_CTX *this@<X0>, unsigned __int8 **a2@<X8>)
{
  std::vector<unsigned char>::vector(a2, 0x20uLL);
  return CC_SHA256_Final(*a2, this);
}

void sub_240FF83D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Air::Version::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  int data;
  int v6;
  int v7;

  CC_SHA256_Update(c, "Air.Version", 0xBu);
  data = *a1;
  CC_SHA256_Update(c, &data, 4u);
  v6 = a1[1];
  CC_SHA256_Update(c, &v6, 4u);
  v7 = a1[2];
  return CC_SHA256_Update(c, &v7, 4u);
}

uint64_t AirReflection::Node::HashImpl(AirReflection::Node *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  int v8;
  int *v9;
  uint64_t result;
  int *v11;
  int *v12;
  int *v13;
  int *v14;
  int *v15;
  const char *v16;
  CC_SHA256_CTX *v17;
  CC_LONG v18;
  int *v19;
  int *v20;
  int *v21;
  int *v22;
  int *v23;
  int *v24;
  int *v25;
  int *v26;
  int *v27;
  int *v28;
  int *v29;
  int *v30;
  int *v31;
  int *v32;
  int *v33;
  int *v34;
  int *v35;
  int *v36;
  int *v37;
  int *v38;
  int *v39;
  int *v40;
  int *v41;
  int *v42;
  int *v43;
  int *v44;
  int *v45;
  int *v46;
  int *v47;
  int *v48;
  int *v49;
  int *v50;
  int *v51;
  int *v52;
  int *v53;
  int *v54;
  int *v55;
  int *v56;
  int *v57;
  int *v58;
  int *v59;
  int *v60;
  int *v61;
  int *v62;
  int *v63;
  int *v64;
  int *v65;
  int *v66;
  int *v67;
  int *v68;
  int *v69;
  int *v70;
  int *v71;
  int *v72;
  int *v73;
  int *v74;
  int *v75;
  int *v76;
  int *v77;
  int *v78;
  int *v79;
  int *v80;
  int *v81;
  int *v82;
  int *v83;
  int *v84;
  int *v85;
  int *v86;
  int *v87;
  int *v88;
  int *v89;
  int *v90;
  int *v91;
  int *v92;
  int *v93;
  int *v94;
  int *v95;
  int *v96;
  int *v97;
  int *v98;
  int *v99;
  int *v100;
  int *v101;
  int *v102;
  int *v103;
  int *v104;
  int *v105;
  int *v106;
  int *v107;
  int *v108;
  int *v109;
  int *v110;
  int *v111;
  int *v112;
  int *v113;
  int *v114;
  int *v115;
  int *v116;
  int *v117;
  int *v118;
  int *v119;
  int *v120;
  int *v121;
  int *v122;
  int *v123;
  int *v124;
  int *v125;
  int *v126;
  int *v127;
  int *v128;
  int *v129;
  int *v130;
  int *v131;
  int *v132;
  int *v133;
  int *started;
  int *v135;
  int *v136;
  int *v137;
  int *v138;
  int *v139;
  int *v140;
  int *v141;
  int *v142;
  int *v143;
  int *v144;
  int *v145;
  int *v146;
  int *v147;
  int *v148;
  int *v149;
  int *v150;
  int *v151;
  int *v152;
  int *v153;
  int *v154;
  int *v155;
  int *v156;
  int *v157;
  int *v158;
  int *v159;
  int *v160;
  int *v161;
  int *v162;
  int *v163;
  int *v164;
  int *v165;
  int *v166;
  int *v167;
  int *v168;
  int *v169;
  int *v170;
  int *v171;
  int *v172;
  int *v173;
  int *v174;
  int *v175;
  int *v176;
  int *v177;
  int *v178;
  int *v179;
  int *v180;
  int *v181;
  int *v182;
  int *v183;
  int *v184;
  int *v185;
  int *v186;
  int *v187;
  int *v188;
  int *v189;
  int *v190;
  int *v191;
  int *v192;
  int *v193;
  int *v194;
  int *v195;
  int *v196;
  int *v197;
  int *v198;
  int *v199;
  int *v200;
  int *v201;
  int *v202;
  int *v203;
  int *v204;
  int *v205;
  int *v206;
  int *v207;
  int *v208;
  int *v209;
  int *v210;
  int *v211;
  int *v212;
  int *v213;
  int *v214;
  int *v215;
  int *v216;
  int *v217;
  int *v218;
  int *v219;
  int *v220;
  int *v221;
  int *v222;
  int *v223;
  int *v224;
  int *v225;
  int *v226;
  int data;
  int v228;

  CC_SHA256_Update(c, "AirReflection.Node", 0x12u);
  v4 = (unsigned __int16 *)((char *)a1 - *(int *)a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(_DWORD *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *(int *)a1);
  if (*v6 < 5u || (v7 = v6[2]) == 0)
  {
LABEL_68:
    v228 = 0;
    v16 = (const char *)&v228;
    v17 = c;
    v18 = 4;
    return CC_SHA256_Update(v17, v16, v18);
  }
  v8 = *(_DWORD *)((char *)a1 + v7);
  if (v8 < 286720)
  {
    if (v8 >= 270336)
    {
      if (v8 < 278528)
      {
        switch(v8)
        {
          case 270336:
            v15 = (int *)AirReflection::Node::node_as_BaseInstanceArg(a1);
            result = AirReflection::BaseInstanceArg::HashImpl(v15, c);
            break;
          case 270337:
            v169 = (int *)AirReflection::Node::node_as_BaseVertexArg(a1);
            result = AirReflection::BaseVertexArg::HashImpl(v169, c);
            break;
          case 270338:
            v170 = (int *)AirReflection::Node::node_as_InstanceIDArg(a1);
            result = AirReflection::InstanceIDArg::HashImpl(v170, c);
            break;
          case 270339:
            v171 = (int *)AirReflection::Node::node_as_VertexIDArg(a1);
            result = AirReflection::VertexIDArg::HashImpl(v171, c);
            break;
          case 270340:
            v172 = (int *)AirReflection::Node::node_as_VertexInputArg(a1);
            result = AirReflection::VertexInputArg::HashImpl(v172, c);
            break;
          case 270341:
            v173 = (int *)AirReflection::Node::node_as_ControlPointIndexBufferArg(a1);
            result = AirReflection::ControlPointIndexBufferArg::HashImpl(v173, c);
            break;
          case 270342:
            v174 = (int *)AirReflection::Node::node_as_PatchIDArg(a1);
            result = AirReflection::PatchIDArg::HashImpl(v174, c);
            break;
          case 270343:
            v175 = (int *)AirReflection::Node::node_as_PositionInPatchArg(a1);
            result = AirReflection::PositionInPatchArg::HashImpl(v175, c);
            break;
          case 270344:
            v176 = (int *)AirReflection::Node::node_as_PatchInputArg(a1);
            result = AirReflection::PatchInputArg::HashImpl(v176, c);
            break;
          case 270345:
            v177 = (int *)AirReflection::Node::node_as_ControlPointInputArg(a1);
            result = AirReflection::ControlPointInputArg::HashImpl(v177, c);
            break;
          case 270346:
            v178 = (int *)AirReflection::Node::node_as_ControlPointField(a1);
            result = AirReflection::ControlPointField::HashImpl(v178, c);
            break;
          case 270347:
          case 270348:
          case 270349:
            goto LABEL_68;
          case 270350:
            v179 = (int *)AirReflection::Node::node_as_AmplificationCountArg(a1);
            result = AirReflection::AmplificationCountArg::HashImpl(v179, c);
            break;
          case 270351:
            v180 = (int *)AirReflection::Node::node_as_AmplificationIDArg(a1);
            result = AirReflection::AmplificationIDArg::HashImpl(v180, c);
            break;
          default:
            switch(v8)
            {
              case 274432:
                v21 = (int *)AirReflection::Node::node_as_FragmentInputArg(a1);
                result = AirReflection::FragmentInputArg::HashImpl(v21, c);
                break;
              case 274433:
                v198 = (int *)AirReflection::Node::node_as_FrontFacingArg(a1);
                result = AirReflection::FrontFacingArg::HashImpl(v198, c);
                break;
              case 274434:
                v199 = (int *)AirReflection::Node::node_as_PositionArg(a1);
                result = AirReflection::PositionArg::HashImpl(v199, c);
                break;
              case 274435:
                v200 = (int *)AirReflection::Node::node_as_PointCoordArg(a1);
                result = AirReflection::PointCoordArg::HashImpl(v200, c);
                break;
              case 274436:
                v201 = (int *)AirReflection::Node::node_as_RenderTargetArg(a1);
                result = AirReflection::RenderTargetArg::HashImpl(v201, c);
                break;
              case 274437:
                v202 = (int *)AirReflection::Node::node_as_RenderTargetArrayIndexArg(a1);
                result = AirReflection::RenderTargetArrayIndexArg::HashImpl(v202, c);
                break;
              case 274438:
                v203 = (int *)AirReflection::Node::node_as_SampleIDArg(a1);
                result = AirReflection::SampleIDArg::HashImpl(v203, c);
                break;
              case 274439:
                v204 = (int *)AirReflection::Node::node_as_SampleMaskArg(a1);
                result = AirReflection::SampleMaskArg::HashImpl(v204, c);
                break;
              case 274440:
                v205 = (int *)AirReflection::Node::node_as_ViewportArrayIndexArg(a1);
                result = AirReflection::ViewportArrayIndexArg::HashImpl(v205, c);
                break;
              case 274445:
                v206 = (int *)AirReflection::Node::node_as_BarycentricCoordArg(a1);
                result = AirReflection::BarycentricCoordArg::HashImpl(v206, c);
                break;
              case 274446:
                v207 = (int *)AirReflection::Node::node_as_PrimitiveIDArg(a1);
                result = AirReflection::PrimitiveIDArg::HashImpl(v207, c);
                break;
              default:
                goto LABEL_68;
            }
            break;
        }
      }
      else
      {
        switch(v8)
        {
          case 282624:
            v12 = (int *)AirReflection::Node::node_as_PayloadArg(a1);
            result = AirReflection::PayloadArg::HashImpl(v12, c);
            break;
          case 282625:
            v118 = (int *)AirReflection::Node::node_as_OriginArg(a1);
            result = AirReflection::OriginArg::HashImpl(v118, c);
            break;
          case 282626:
            v119 = (int *)AirReflection::Node::node_as_DirectionArg(a1);
            result = AirReflection::DirectionArg::HashImpl(v119, c);
            break;
          case 282627:
            v120 = (int *)AirReflection::Node::node_as_MinDistanceArg(a1);
            result = AirReflection::MinDistanceArg::HashImpl(v120, c);
            break;
          case 282628:
            v121 = (int *)AirReflection::Node::node_as_MaxDistanceArg(a1);
            result = AirReflection::MaxDistanceArg::HashImpl(v121, c);
            break;
          case 282629:
            v122 = (int *)AirReflection::Node::node_as_DistanceArg(a1);
            result = AirReflection::DistanceArg::HashImpl(v122, c);
            break;
          case 282630:
            v123 = (int *)AirReflection::Node::node_as_WorldSpaceOriginArg(a1);
            result = AirReflection::WorldSpaceOriginArg::HashImpl(v123, c);
            break;
          case 282631:
            v124 = (int *)AirReflection::Node::node_as_WorldSpaceDirectionArg(a1);
            result = AirReflection::WorldSpaceDirectionArg::HashImpl(v124, c);
            break;
          case 282632:
            v125 = (int *)AirReflection::Node::node_as_GeometryIDArg(a1);
            result = AirReflection::GeometryIDArg::HashImpl(v125, c);
            break;
          case 282633:
            v126 = (int *)AirReflection::Node::node_as_UserInstanceIDArg(a1);
            result = AirReflection::UserInstanceIDArg::HashImpl(v126, c);
            break;
          case 282634:
            v127 = (int *)AirReflection::Node::node_as_GeometryIntersectionFunctionTableOffsetArg(a1);
            result = AirReflection::GeometryIntersectionFunctionTableOffsetArg::HashImpl(v127, c);
            break;
          case 282635:
            v128 = (int *)AirReflection::Node::node_as_InstanceIntersectionFunctionTableOffsetArg(a1);
            result = AirReflection::InstanceIntersectionFunctionTableOffsetArg::HashImpl(v128, c);
            break;
          case 282636:
            v129 = (int *)AirReflection::Node::node_as_OpaquePrimitiveArg(a1);
            result = AirReflection::OpaquePrimitiveArg::HashImpl(v129, c);
            break;
          case 282637:
            v130 = (int *)AirReflection::Node::node_as_ObjectToWorldTransformArg(a1);
            result = AirReflection::ObjectToWorldTransformArg::HashImpl(v130, c);
            break;
          case 282638:
            v131 = (int *)AirReflection::Node::node_as_WorldToObjectTransformArg(a1);
            result = AirReflection::WorldToObjectTransformArg::HashImpl(v131, c);
            break;
          case 282639:
            v132 = (int *)AirReflection::Node::node_as_TimeArg(a1);
            result = AirReflection::TimeArg::HashImpl(v132, c);
            break;
          case 282640:
            v133 = (int *)AirReflection::Node::node_as_KeyFrameCountArg(a1);
            result = AirReflection::KeyFrameCountArg::HashImpl(v133, c);
            break;
          case 282641:
            started = (int *)AirReflection::Node::node_as_MotionStartTimeArg(a1);
            result = AirReflection::MotionStartTimeArg::HashImpl(started, c);
            break;
          case 282642:
            v135 = (int *)AirReflection::Node::node_as_MotionEndTimeArg(a1);
            result = AirReflection::MotionEndTimeArg::HashImpl(v135, c);
            break;
          case 282643:
            v136 = (int *)AirReflection::Node::node_as_PrimitiveDataArg(a1);
            result = AirReflection::PrimitiveDataArg::HashImpl(v136, c);
            break;
          case 282644:
            v137 = (int *)AirReflection::Node::node_as_InstanceIDCountArg(a1);
            result = AirReflection::InstanceIDCountArg::HashImpl(v137, c);
            break;
          case 282645:
            v138 = (int *)AirReflection::Node::node_as_UserInstanceIDCountArg(a1);
            result = AirReflection::UserInstanceIDCountArg::HashImpl(v138, c);
            break;
          case 282646:
            v139 = (int *)AirReflection::Node::node_as_CurveParameterArg(a1);
            result = AirReflection::CurveParameterArg::HashImpl(v139, c);
            break;
          default:
            switch(v8)
            {
              case 278528:
                v26 = (int *)AirReflection::Node::node_as_PixelPositionInTileArg(a1);
                result = AirReflection::PixelPositionInTileArg::HashImpl(v26, c);
                break;
              case 278529:
                v219 = (int *)AirReflection::Node::node_as_PixelsPerTileArg(a1);
                result = AirReflection::PixelsPerTileArg::HashImpl(v219, c);
                break;
              case 278530:
                v220 = (int *)AirReflection::Node::node_as_TileIndexArg(a1);
                result = AirReflection::TileIndexArg::HashImpl(v220, c);
                break;
              case 278531:
                v221 = (int *)AirReflection::Node::node_as_ImageblockArg(a1);
                result = AirReflection::ImageblockArg::HashImpl(v221, c);
                break;
              case 278532:
                v222 = (int *)AirReflection::Node::node_as_ImageblockDataArg(a1);
                result = AirReflection::ImageblockDataArg::HashImpl(v222, c);
                break;
              default:
                goto LABEL_68;
            }
            break;
        }
      }
      return result;
    }
    if (v8 >= 143360)
    {
      switch(v8)
      {
        case 266240:
          v9 = (int *)AirReflection::Node::node_as_ThreadPositionInGridArg(a1);
          result = AirReflection::ThreadPositionInGridArg::HashImpl(v9, c);
          break;
        case 266241:
          v53 = (int *)AirReflection::Node::node_as_ThreadsPerGridArg(a1);
          result = AirReflection::ThreadsPerGridArg::HashImpl(v53, c);
          break;
        case 266242:
          v54 = (int *)AirReflection::Node::node_as_ThreadgroupPositionInGridArg(a1);
          result = AirReflection::ThreadgroupPositionInGridArg::HashImpl(v54, c);
          break;
        case 266243:
          v55 = (int *)AirReflection::Node::node_as_ThreadgroupsPerGridArg(a1);
          result = AirReflection::ThreadgroupsPerGridArg::HashImpl(v55, c);
          break;
        case 266244:
          v56 = (int *)AirReflection::Node::node_as_ThreadPositionInThreadgroupArg(a1);
          result = AirReflection::ThreadPositionInThreadgroupArg::HashImpl(v56, c);
          break;
        case 266245:
          v57 = (int *)AirReflection::Node::node_as_ThreadsPerThreadgroupArg(a1);
          result = AirReflection::ThreadsPerThreadgroupArg::HashImpl(v57, c);
          break;
        case 266246:
          v58 = (int *)AirReflection::Node::node_as_DispatchThreadsPerThreadgroupArg(a1);
          result = AirReflection::DispatchThreadsPerThreadgroupArg::HashImpl(v58, c);
          break;
        case 266247:
          v59 = (int *)AirReflection::Node::node_as_ThreadIndexInThreadgroupArg(a1);
          result = AirReflection::ThreadIndexInThreadgroupArg::HashImpl(v59, c);
          break;
        case 266248:
          v60 = (int *)AirReflection::Node::node_as_ThreadExecutionWidthArg(a1);
          result = AirReflection::ThreadExecutionWidthArg::HashImpl(v60, c);
          break;
        case 266249:
          v61 = (int *)AirReflection::Node::node_as_StageInArg(a1);
          result = AirReflection::StageInArg::HashImpl(v61, c);
          break;
        case 266250:
          v62 = (int *)AirReflection::Node::node_as_StageInGridOriginArg(a1);
          result = AirReflection::StageInGridOriginArg::HashImpl(v62, c);
          break;
        case 266251:
          v63 = (int *)AirReflection::Node::node_as_StageInGridSizeArg(a1);
          result = AirReflection::StageInGridSizeArg::HashImpl(v63, c);
          break;
        case 266252:
          v64 = (int *)AirReflection::Node::node_as_ThreadIndexInSimdgroupArg(a1);
          result = AirReflection::ThreadIndexInSimdgroupArg::HashImpl(v64, c);
          break;
        case 266253:
          v65 = (int *)AirReflection::Node::node_as_ThreadsPerSimdgroupArg(a1);
          result = AirReflection::ThreadsPerSimdgroupArg::HashImpl(v65, c);
          break;
        case 266254:
          v66 = (int *)AirReflection::Node::node_as_SimdgroupIndexInThreadgroupArg(a1);
          result = AirReflection::SimdgroupIndexInThreadgroupArg::HashImpl(v66, c);
          break;
        case 266255:
          v67 = (int *)AirReflection::Node::node_as_SimdgroupsPerThreadgroupArg(a1);
          result = AirReflection::SimdgroupsPerThreadgroupArg::HashImpl(v67, c);
          break;
        case 266256:
          v68 = (int *)AirReflection::Node::node_as_DispatchSimdgroupsPerThreadgroupArg(a1);
          result = AirReflection::DispatchSimdgroupsPerThreadgroupArg::HashImpl(v68, c);
          break;
        case 266257:
          v69 = (int *)AirReflection::Node::node_as_ThreadIndexInQuadgroupArg(a1);
          result = AirReflection::ThreadIndexInQuadgroupArg::HashImpl(v69, c);
          break;
        case 266258:
          v70 = (int *)AirReflection::Node::node_as_QuadgroupIndexInThreadgroupArg(a1);
          result = AirReflection::QuadgroupIndexInThreadgroupArg::HashImpl(v70, c);
          break;
        case 266259:
          v71 = (int *)AirReflection::Node::node_as_QuadgroupsPerThreadgroupArg(a1);
          result = AirReflection::QuadgroupsPerThreadgroupArg::HashImpl(v71, c);
          break;
        case 266260:
          v72 = (int *)AirReflection::Node::node_as_DispatchQuadgroupsPerThreadgroupArg(a1);
          result = AirReflection::DispatchQuadgroupsPerThreadgroupArg::HashImpl(v72, c);
          break;
        default:
          switch(v8)
          {
            case 262144:
              v19 = (int *)AirReflection::Node::node_as_BufferArg(a1);
              result = AirReflection::BufferArg::HashImpl(v19, c);
              break;
            case 262145:
              v185 = (int *)AirReflection::Node::node_as_SamplerArg(a1);
              result = AirReflection::SamplerArg::HashImpl(v185, c);
              break;
            case 262146:
              v186 = (int *)AirReflection::Node::node_as_TextureArg(a1);
              result = AirReflection::TextureArg::HashImpl(v186, c);
              break;
            case 262147:
              v187 = (int *)AirReflection::Node::node_as_ConstantArg(a1);
              result = AirReflection::ConstantArg::HashImpl(v187, c);
              break;
            case 262148:
              v188 = (int *)AirReflection::Node::node_as_IndirectBufferArg(a1);
              result = AirReflection::IndirectBufferArg::HashImpl(v188, c);
              break;
            case 262149:
              v189 = (int *)AirReflection::Node::node_as_IndirectConstantArg(a1);
              result = AirReflection::IndirectConstantArg::HashImpl(v189, c);
              break;
            case 262150:
              v190 = (int *)AirReflection::Node::node_as_CommandBufferArg(a1);
              result = AirReflection::CommandBufferArg::HashImpl(v190, c);
              break;
            case 262151:
              v191 = (int *)AirReflection::Node::node_as_ComputePipelineStateArg(a1);
              result = AirReflection::ComputePipelineStateArg::HashImpl(v191, c);
              break;
            case 262152:
              v192 = (int *)AirReflection::Node::node_as_RenderPipelineStateArg(a1);
              result = AirReflection::RenderPipelineStateArg::HashImpl(v192, c);
              break;
            case 262153:
              v193 = (int *)AirReflection::Node::node_as_VisibleFunctionTableArg(a1);
              result = AirReflection::VisibleFunctionTableArg::HashImpl(v193, c);
              break;
            case 262154:
              v194 = (int *)AirReflection::Node::node_as_IntersectionFunctionTableArg(a1);
              result = AirReflection::IntersectionFunctionTableArg::HashImpl(v194, c);
              break;
            case 262155:
              v195 = (int *)AirReflection::Node::node_as_InstanceAccelerationStructureArg(a1);
              result = AirReflection::InstanceAccelerationStructureArg::HashImpl(v195, c);
              break;
            case 262156:
              v196 = (int *)AirReflection::Node::node_as_PrimitiveAccelerationStructureArg(a1);
              result = AirReflection::PrimitiveAccelerationStructureArg::HashImpl(v196, c);
              break;
            case 262157:
              v197 = (int *)AirReflection::Node::node_as_BufferStrideArg(a1);
              result = AirReflection::BufferStrideArg::HashImpl(v197, c);
              break;
            default:
              switch(v8)
              {
                case 143360:
                  v27 = (int *)AirReflection::Node::node_as_MeshPrimitiveDataRet(a1);
                  result = AirReflection::MeshPrimitiveDataRet::HashImpl(v27, c);
                  break;
                case 143361:
                  v223 = (int *)AirReflection::Node::node_as_MeshVertexDataRet(a1);
                  result = AirReflection::MeshVertexDataRet::HashImpl(v223, c);
                  break;
                case 143362:
                  v224 = (int *)AirReflection::Node::node_as_PrimitiveCulledRet(a1);
                  result = AirReflection::PrimitiveCulledRet::HashImpl(v224, c);
                  break;
                case 143363:
                  v225 = (int *)AirReflection::Node::node_as_PrimitiveIDRet(a1);
                  result = AirReflection::PrimitiveIDRet::HashImpl(v225, c);
                  break;
                default:
                  goto LABEL_68;
              }
              break;
          }
          break;
      }
      return result;
    }
    if (v8 < 0x20000)
    {
      switch(v8)
      {
        case 1:
          v20 = (int *)AirReflection::Node::node_as_FragmentFunction(a1);
          result = AirReflection::FragmentFunction::HashImpl(v20, c);
          break;
        case 2:
          v34 = (int *)AirReflection::Node::node_as_KernelFunction(a1);
          result = AirReflection::KernelFunction::HashImpl(v34, c);
          break;
        case 3:
          v35 = (int *)AirReflection::Node::node_as_VertexFunction(a1);
          result = AirReflection::VertexFunction::HashImpl(v35, c);
          break;
        case 4:
          v36 = (int *)AirReflection::Node::node_as_VisibleFunction(a1);
          result = AirReflection::VisibleFunction::HashImpl(v36, c);
          break;
        case 5:
          v37 = (int *)AirReflection::Node::node_as_IntersectionFunction(a1);
          result = AirReflection::IntersectionFunction::HashImpl(v37, c);
          break;
        case 6:
          v38 = (int *)AirReflection::Node::node_as_MeshFunction(a1);
          result = AirReflection::MeshFunction::HashImpl(v38, c);
          break;
        case 7:
          v39 = (int *)AirReflection::Node::node_as_ObjectFunction(a1);
          result = AirReflection::ObjectFunction::HashImpl(v39, c);
          break;
        default:
          switch(v8)
          {
            case 4096:
              v25 = (int *)AirReflection::Node::node_as_VecTypeHintFnAttr(a1);
              result = AirReflection::VecTypeHintFnAttr::HashImpl(v25, c);
              break;
            case 4097:
              v46 = (int *)AirReflection::Node::node_as_WorkgroupSizeFnAttr(a1);
              result = AirReflection::WorkgroupSizeFnAttr::HashImpl(v46, c);
              break;
            case 4098:
              v47 = (int *)AirReflection::Node::node_as_WorkgroupSizeHintFnAttr(a1);
              result = AirReflection::WorkgroupSizeHintFnAttr::HashImpl(v47, c);
              break;
            case 4099:
              v48 = (int *)AirReflection::Node::node_as_WorkgroupMaxSizeFnAttr(a1);
              result = AirReflection::WorkgroupMaxSizeFnAttr::HashImpl(v48, c);
              break;
            case 4100:
              v49 = (int *)AirReflection::Node::node_as_PatchFnAttr(a1);
              result = AirReflection::PatchFnAttr::HashImpl(v49, c);
              break;
            case 4101:
              v50 = (int *)AirReflection::Node::node_as_MaxMeshWorkgroupsFnAttr(a1);
              result = AirReflection::MaxMeshWorkgroupsFnAttr::HashImpl(v50, c);
              break;
            default:
              goto LABEL_68;
          }
          break;
      }
      return result;
    }
    if (v8 < 135168)
    {
      switch(v8)
      {
        case 131072:
          v24 = (int *)AirReflection::Node::node_as_ClipDistanceRet(a1);
          result = AirReflection::ClipDistanceRet::HashImpl(v24, c);
          break;
        case 131073:
          v41 = (int *)AirReflection::Node::node_as_PointSizeRet(a1);
          result = AirReflection::PointSizeRet::HashImpl(v41, c);
          break;
        case 131074:
          v42 = (int *)AirReflection::Node::node_as_PositionRet(a1);
          result = AirReflection::PositionRet::HashImpl(v42, c);
          break;
        case 131075:
          v43 = (int *)AirReflection::Node::node_as_RenderTargetArrayIndexRet(a1);
          result = AirReflection::RenderTargetArrayIndexRet::HashImpl(v43, c);
          break;
        case 131076:
          v44 = (int *)AirReflection::Node::node_as_VertexOutputRet(a1);
          result = AirReflection::VertexOutputRet::HashImpl(v44, c);
          break;
        case 131077:
          v45 = (int *)AirReflection::Node::node_as_ViewportArrayIndexRet(a1);
          result = AirReflection::ViewportArrayIndexRet::HashImpl(v45, c);
          break;
        default:
          goto LABEL_68;
      }
      return result;
    }
    if (v8 < 139264)
    {
      switch(v8)
      {
        case 135168:
          v14 = (int *)AirReflection::Node::node_as_RenderTargetRet(a1);
          result = AirReflection::RenderTargetRet::HashImpl(v14, c);
          break;
        case 135169:
          v30 = (int *)AirReflection::Node::node_as_DepthRet(a1);
          result = AirReflection::DepthRet::HashImpl(v30, c);
          break;
        case 135170:
          v31 = (int *)AirReflection::Node::node_as_StencilRet(a1);
          result = AirReflection::StencilRet::HashImpl(v31, c);
          break;
        case 135171:
          v32 = (int *)AirReflection::Node::node_as_SampleMaskRet(a1);
          result = AirReflection::SampleMaskRet::HashImpl(v32, c);
          break;
        case 135172:
          v33 = (int *)AirReflection::Node::node_as_ImageblockDataRet(a1);
          result = AirReflection::ImageblockDataRet::HashImpl(v33, c);
          break;
        default:
          goto LABEL_68;
      }
      return result;
    }
    switch(v8)
    {
      case 139264:
        v51 = (int *)AirReflection::Node::node_as_AcceptIntersectionRet(a1);
        return AirReflection::AcceptIntersectionRet::HashImpl(v51, c);
      case 139265:
        v52 = (int *)AirReflection::Node::node_as_ContinueSearchRet(a1);
        return AirReflection::ContinueSearchRet::HashImpl(v52, c);
      case 139266:
        v28 = (int *)AirReflection::Node::node_as_DistanceRet(a1);
        return AirReflection::DistanceRet::HashImpl(v28, c);
    }
    goto LABEL_68;
  }
  if (v8 < 532480)
  {
    if (v8 < 528384)
    {
      switch(v8)
      {
        case 524288:
          v22 = (int *)AirReflection::Node::node_as_FunctionConstant(a1);
          result = AirReflection::FunctionConstant::HashImpl(v22, c);
          break;
        case 524289:
          v208 = (int *)AirReflection::Node::node_as_StructTypeInfo(a1);
          result = AirReflection::StructTypeInfo::HashImpl(v208, c);
          break;
        case 524290:
          v209 = (int *)AirReflection::Node::node_as_StitchingArgument(a1);
          result = AirReflection::StitchingArgument::HashImpl(v209, c);
          break;
        case 524291:
          v210 = (int *)AirReflection::Node::node_as_MeshTypeInfo(a1);
          result = AirReflection::MeshTypeInfo::HashImpl(v210, c);
          break;
        case 524292:
          v211 = (int *)AirReflection::Node::node_as_GlobalBinding(a1);
          result = AirReflection::GlobalBinding::HashImpl(v211, c);
          break;
        case 524293:
          v212 = (int *)AirReflection::Node::node_as_InlineTypeInfo(a1);
          result = AirReflection::InlineTypeInfo::HashImpl(v212, c);
          break;
        default:
          if (v8 == 286720)
          {
            v226 = (int *)AirReflection::Node::node_as_MeshArg(a1);
            result = AirReflection::MeshArg::HashImpl(v226, c);
          }
          else
          {
            if (v8 != 290816)
              goto LABEL_68;
            v29 = (int *)AirReflection::Node::node_as_MeshGridPropertiesArg(a1);
            result = AirReflection::MeshGridPropertiesArg::HashImpl(v29, c);
          }
          break;
      }
    }
    else
    {
      switch(v8)
      {
        case 528384:
          v13 = (int *)AirReflection::Node::node_as_OpaqueType(a1);
          result = AirReflection::OpaqueType::HashImpl(v13, c);
          break;
        case 528385:
          v140 = (int *)AirReflection::Node::node_as_VoidType(a1);
          result = AirReflection::VoidType::HashImpl(v140, c);
          break;
        case 528386:
          v141 = (int *)AirReflection::Node::node_as_BoolType(a1);
          result = AirReflection::BoolType::HashImpl(v141, c);
          break;
        case 528387:
          v142 = (int *)AirReflection::Node::node_as_CharType(a1);
          result = AirReflection::CharType::HashImpl(v142, c);
          break;
        case 528388:
          v143 = (int *)AirReflection::Node::node_as_UCharType(a1);
          result = AirReflection::UCharType::HashImpl(v143, c);
          break;
        case 528389:
          v144 = (int *)AirReflection::Node::node_as_ShortType(a1);
          result = AirReflection::ShortType::HashImpl(v144, c);
          break;
        case 528390:
          v145 = (int *)AirReflection::Node::node_as_UShortType(a1);
          result = AirReflection::UShortType::HashImpl(v145, c);
          break;
        case 528391:
          v146 = (int *)AirReflection::Node::node_as_IntType(a1);
          result = AirReflection::IntType::HashImpl(v146, c);
          break;
        case 528392:
          v147 = (int *)AirReflection::Node::node_as_UIntType(a1);
          result = AirReflection::UIntType::HashImpl(v147, c);
          break;
        case 528393:
          v148 = (int *)AirReflection::Node::node_as_LongType(a1);
          result = AirReflection::LongType::HashImpl(v148, c);
          break;
        case 528394:
          v149 = (int *)AirReflection::Node::node_as_ULongType(a1);
          result = AirReflection::ULongType::HashImpl(v149, c);
          break;
        case 528395:
          v150 = (int *)AirReflection::Node::node_as_LLongType(a1);
          result = AirReflection::LLongType::HashImpl(v150, c);
          break;
        case 528396:
          v151 = (int *)AirReflection::Node::node_as_ULLongType(a1);
          result = AirReflection::ULLongType::HashImpl(v151, c);
          break;
        case 528397:
          v152 = (int *)AirReflection::Node::node_as_HalfType(a1);
          result = AirReflection::HalfType::HashImpl(v152, c);
          break;
        case 528398:
          v153 = (int *)AirReflection::Node::node_as_FloatType(a1);
          result = AirReflection::FloatType::HashImpl(v153, c);
          break;
        case 528399:
          v154 = (int *)AirReflection::Node::node_as_DoubleType(a1);
          result = AirReflection::DoubleType::HashImpl(v154, c);
          break;
        case 528400:
          v155 = (int *)AirReflection::Node::node_as_BFloatType(a1);
          result = AirReflection::BFloatType::HashImpl(v155, c);
          break;
        case 528401:
          v156 = (int *)AirReflection::Node::node_as_VectorType(a1);
          result = AirReflection::VectorType::HashImpl(v156, c);
          break;
        case 528402:
          v157 = (int *)AirReflection::Node::node_as_PackedVectorType(a1);
          result = AirReflection::PackedVectorType::HashImpl(v157, c);
          break;
        case 528403:
          v158 = (int *)AirReflection::Node::node_as_MatrixType(a1);
          result = AirReflection::MatrixType::HashImpl(v158, c);
          break;
        case 528404:
          v159 = (int *)AirReflection::Node::node_as_FunctionType(a1);
          result = AirReflection::FunctionType::HashImpl(v159, c);
          break;
        case 528405:
          v160 = (int *)AirReflection::Node::node_as_PointerType(a1);
          result = AirReflection::PointerType::HashImpl(v160, c);
          break;
        case 528406:
          v161 = (int *)AirReflection::Node::node_as_LValueReferenceType(a1);
          result = AirReflection::LValueReferenceType::HashImpl(v161, c);
          break;
        case 528407:
          v162 = (int *)AirReflection::Node::node_as_RValueReferenceType(a1);
          result = AirReflection::RValueReferenceType::HashImpl(v162, c);
          break;
        case 528408:
          v163 = (int *)AirReflection::Node::node_as_ArrayType(a1);
          result = AirReflection::ArrayType::HashImpl(v163, c);
          break;
        case 528409:
          v164 = (int *)AirReflection::Node::node_as_EnumType(a1);
          result = AirReflection::EnumType::HashImpl(v164, c);
          break;
        case 528410:
          v165 = (int *)AirReflection::Node::node_as_RecordBase(a1);
          result = AirReflection::RecordBase::HashImpl(v165, c);
          break;
        case 528411:
          v166 = (int *)AirReflection::Node::node_as_RecordField(a1);
          result = AirReflection::RecordField::HashImpl(v166, c);
          break;
        case 528412:
          v167 = (int *)AirReflection::Node::node_as_StructType(a1);
          result = AirReflection::StructType::HashImpl(v167, c);
          break;
        case 528413:
          v168 = (int *)AirReflection::Node::node_as_UnionType(a1);
          result = AirReflection::UnionType::HashImpl(v168, c);
          break;
        default:
          goto LABEL_68;
      }
    }
  }
  else
  {
    if (v8 >= 536576)
    {
      switch(v8)
      {
        case 540672:
          AirReflection::Node::node_as_ClipDistanceAttr(a1);
          v16 = "AirReflection.ClipDistanceAttr";
          v17 = c;
          v18 = 30;
          return CC_SHA256_Update(v17, v16, v18);
        case 540673:
          v181 = (int *)AirReflection::Node::node_as_FunctionConstantPredicateAttr(a1);
          return AirReflection::FunctionConstantPredicateAttr::HashImpl(v181, c);
        case 540674:
          v182 = (int *)AirReflection::Node::node_as_LocationIndexAttr(a1);
          return AirReflection::LocationIndexAttr::HashImpl(v182, c);
        case 540675:
          AirReflection::Node::node_as_PointSizeAttr(a1);
          v16 = "AirReflection.PointSizeAttr";
          goto LABEL_222;
        case 540676:
          AirReflection::Node::node_as_PositionAttr(a1);
          v16 = "AirReflection.PositionAttr";
          v17 = c;
          v18 = 26;
          return CC_SHA256_Update(v17, v16, v18);
        case 540677:
          AirReflection::Node::node_as_PrimitiveCulledAttr(a1);
          v16 = "AirReflection.PrimitiveCulledAttr";
          v17 = c;
          v18 = 33;
          return CC_SHA256_Update(v17, v16, v18);
        case 540678:
          AirReflection::Node::node_as_PrimitiveIDAttr(a1);
          v16 = "AirReflection.PrimitiveIDAttr";
          v17 = c;
          v18 = 29;
          return CC_SHA256_Update(v17, v16, v18);
        case 540679:
          v183 = (int *)AirReflection::Node::node_as_RenderTargetAttr(a1);
          return AirReflection::RenderTargetAttr::HashImpl(v183, c);
        case 540680:
          AirReflection::Node::node_as_RenderTargetArrayIndexAttr(a1);
          v16 = "AirReflection.RenderTargetArrayIndexAttr";
          v17 = c;
          v18 = 40;
          return CC_SHA256_Update(v17, v16, v18);
        case 540681:
          AirReflection::Node::node_as_ViewportArrayIndexAttr(a1);
          v16 = "AirReflection.ViewportArrayIndexAttr";
          v17 = c;
          v18 = 36;
          return CC_SHA256_Update(v17, v16, v18);
        case 540682:
          v184 = (int *)AirReflection::Node::node_as_UserAttr(a1);
          return AirReflection::UserAttr::HashImpl(v184, c);
        case 540683:
          AirReflection::Node::node_as_InvariantAttr(a1);
          v16 = "AirReflection.InvariantAttr";
LABEL_222:
          v17 = c;
          v18 = 27;
          return CC_SHA256_Update(v17, v16, v18);
        case 540684:
          AirReflection::Node::node_as_SharedAttr(a1);
          v16 = "AirReflection.SharedAttr";
          v17 = c;
          v18 = 24;
          return CC_SHA256_Update(v17, v16, v18);
        default:
          switch(v8)
          {
            case 544768:
              v23 = (int *)AirReflection::Node::node_as_MeshEmulationValueGroup(a1);
              result = AirReflection::MeshEmulation::ValueGroup::HashImpl(v23, c);
              break;
            case 544769:
              v213 = (int *)AirReflection::Node::node_as_MeshEmulationBlock(a1);
              result = AirReflection::MeshEmulation::Block::HashImpl(v213, c);
              break;
            case 544770:
              v214 = (int *)AirReflection::Node::node_as_MeshEmulationMeshLayout(a1);
              result = AirReflection::MeshEmulation::MeshLayout::HashImpl(v214, c);
              break;
            case 544771:
              v215 = (int *)AirReflection::Node::node_as_MeshEmulationMeshKernel(a1);
              result = AirReflection::MeshEmulation::MeshKernel::HashImpl(v215, c);
              break;
            case 544772:
              v216 = (int *)AirReflection::Node::node_as_MeshEmulationMeshVertex(a1);
              result = AirReflection::MeshEmulation::MeshVertex::HashImpl(v216, c);
              break;
            case 544773:
              v217 = (int *)AirReflection::Node::node_as_MeshEmulationObjectKernel(a1);
              result = AirReflection::MeshEmulation::ObjectKernel::HashImpl(v217, c);
              break;
            case 544774:
              v218 = (int *)AirReflection::Node::node_as_MeshEmulationFragmentAnalysisResult(a1);
              result = AirReflection::MeshEmulation::FragmentAnalysisResult::HashImpl(v218, c);
              break;
            default:
              if (v8 != 536576)
                goto LABEL_68;
              v40 = (int *)AirReflection::Node::node_as_AddressSpaceTypeQual(a1);
              result = AirReflection::AddressSpaceTypeQual::HashImpl(v40, c);
              break;
          }
          return result;
      }
    }
    switch(v8)
    {
      case 532480:
        v11 = (int *)AirReflection::Node::node_as_ArrayOfType(a1);
        result = AirReflection::ArrayOfType::HashImpl(v11, c);
        break;
      case 532481:
        v73 = (int *)AirReflection::Node::node_as_ArrayRefOfType(a1);
        result = AirReflection::ArrayRefOfType::HashImpl(v73, c);
        break;
      case 532482:
        v74 = (int *)AirReflection::Node::node_as_Texture1dType(a1);
        result = AirReflection::Texture1dType::HashImpl(v74, c);
        break;
      case 532483:
        v75 = (int *)AirReflection::Node::node_as_Texture1dArrayType(a1);
        result = AirReflection::Texture1dArrayType::HashImpl(v75, c);
        break;
      case 532484:
        v76 = (int *)AirReflection::Node::node_as_Texture2dType(a1);
        result = AirReflection::Texture2dType::HashImpl(v76, c);
        break;
      case 532485:
        v77 = (int *)AirReflection::Node::node_as_Texture2dArrayType(a1);
        result = AirReflection::Texture2dArrayType::HashImpl(v77, c);
        break;
      case 532486:
        v78 = (int *)AirReflection::Node::node_as_Texture3dType(a1);
        result = AirReflection::Texture3dType::HashImpl(v78, c);
        break;
      case 532487:
        v79 = (int *)AirReflection::Node::node_as_TextureCubeType(a1);
        result = AirReflection::TextureCubeType::HashImpl(v79, c);
        break;
      case 532488:
        v80 = (int *)AirReflection::Node::node_as_TextureCubeArrayType(a1);
        result = AirReflection::TextureCubeArrayType::HashImpl(v80, c);
        break;
      case 532489:
        v81 = (int *)AirReflection::Node::node_as_Texture2dMsType(a1);
        result = AirReflection::Texture2dMsType::HashImpl(v81, c);
        break;
      case 532490:
        v82 = (int *)AirReflection::Node::node_as_Texture2dMsArrayType(a1);
        result = AirReflection::Texture2dMsArrayType::HashImpl(v82, c);
        break;
      case 532491:
        v83 = (int *)AirReflection::Node::node_as_TextureBuffer1dType(a1);
        result = AirReflection::TextureBuffer1dType::HashImpl(v83, c);
        break;
      case 532492:
        v84 = (int *)AirReflection::Node::node_as_Depth2dType(a1);
        result = AirReflection::Depth2dType::HashImpl(v84, c);
        break;
      case 532493:
        v85 = (int *)AirReflection::Node::node_as_Depth2dArrayType(a1);
        result = AirReflection::Depth2dArrayType::HashImpl(v85, c);
        break;
      case 532494:
        v86 = (int *)AirReflection::Node::node_as_DepthCubeType(a1);
        result = AirReflection::DepthCubeType::HashImpl(v86, c);
        break;
      case 532495:
        v87 = (int *)AirReflection::Node::node_as_DepthCubeArrayType(a1);
        result = AirReflection::DepthCubeArrayType::HashImpl(v87, c);
        break;
      case 532496:
        v88 = (int *)AirReflection::Node::node_as_Depth2dMsType(a1);
        result = AirReflection::Depth2dMsType::HashImpl(v88, c);
        break;
      case 532497:
        v89 = (int *)AirReflection::Node::node_as_Depth2dMsArrayType(a1);
        result = AirReflection::Depth2dMsArrayType::HashImpl(v89, c);
        break;
      case 532498:
        v90 = (int *)AirReflection::Node::node_as_SamplerType(a1);
        result = AirReflection::SamplerType::HashImpl(v90, c);
        break;
      case 532499:
        v91 = (int *)AirReflection::Node::node_as_PatchControlPointType(a1);
        result = AirReflection::PatchControlPointType::HashImpl(v91, c);
        break;
      case 532500:
        v92 = (int *)AirReflection::Node::node_as_ImageblockType(a1);
        result = AirReflection::ImageblockType::HashImpl(v92, c);
        break;
      case 532501:
        v93 = (int *)AirReflection::Node::node_as_R8UNormType(a1);
        result = AirReflection::R8UNormType::HashImpl(v93, c);
        break;
      case 532502:
        v94 = (int *)AirReflection::Node::node_as_R8SNormType(a1);
        result = AirReflection::R8SNormType::HashImpl(v94, c);
        break;
      case 532503:
        v95 = (int *)AirReflection::Node::node_as_R16UNormType(a1);
        result = AirReflection::R16UNormType::HashImpl(v95, c);
        break;
      case 532504:
        v96 = (int *)AirReflection::Node::node_as_R16SNormType(a1);
        result = AirReflection::R16SNormType::HashImpl(v96, c);
        break;
      case 532505:
        v97 = (int *)AirReflection::Node::node_as_RG8UNormType(a1);
        result = AirReflection::RG8UNormType::HashImpl(v97, c);
        break;
      case 532506:
        v98 = (int *)AirReflection::Node::node_as_RG8SNormType(a1);
        result = AirReflection::RG8SNormType::HashImpl(v98, c);
        break;
      case 532507:
        v99 = (int *)AirReflection::Node::node_as_RG16UNormType(a1);
        result = AirReflection::RG16UNormType::HashImpl(v99, c);
        break;
      case 532508:
        v100 = (int *)AirReflection::Node::node_as_RG16SNormType(a1);
        result = AirReflection::RG16SNormType::HashImpl(v100, c);
        break;
      case 532509:
        v101 = (int *)AirReflection::Node::node_as_RGBA8UNormType(a1);
        result = AirReflection::RGBA8UNormType::HashImpl(v101, c);
        break;
      case 532510:
        v102 = (int *)AirReflection::Node::node_as_RGBA8SNormType(a1);
        result = AirReflection::RGBA8SNormType::HashImpl(v102, c);
        break;
      case 532511:
        v103 = (int *)AirReflection::Node::node_as_RGBA16UNormType(a1);
        result = AirReflection::RGBA16UNormType::HashImpl(v103, c);
        break;
      case 532512:
        v104 = (int *)AirReflection::Node::node_as_RGBA16SNormType(a1);
        result = AirReflection::RGBA16SNormType::HashImpl(v104, c);
        break;
      case 532513:
        v105 = (int *)AirReflection::Node::node_as_SRGBA8UNormType(a1);
        result = AirReflection::SRGBA8UNormType::HashImpl(v105, c);
        break;
      case 532514:
        v106 = (int *)AirReflection::Node::node_as_RGB10A2Type(a1);
        result = AirReflection::RGB10A2Type::HashImpl(v106, c);
        break;
      case 532515:
        v107 = (int *)AirReflection::Node::node_as_RG11B10FType(a1);
        result = AirReflection::RG11B10FType::HashImpl(v107, c);
        break;
      case 532516:
        v108 = (int *)AirReflection::Node::node_as_RGB9E5Type(a1);
        result = AirReflection::RGB9E5Type::HashImpl(v108, c);
        break;
      case 532517:
        v109 = (int *)AirReflection::Node::node_as_CommandBufferType(a1);
        result = AirReflection::CommandBufferType::HashImpl(v109, c);
        break;
      case 532518:
        v110 = (int *)AirReflection::Node::node_as_ComputePipelineStateType(a1);
        result = AirReflection::ComputePipelineStateType::HashImpl(v110, c);
        break;
      case 532519:
        v111 = (int *)AirReflection::Node::node_as_RenderPipelineStateType(a1);
        result = AirReflection::RenderPipelineStateType::HashImpl(v111, c);
        break;
      case 532520:
        v112 = (int *)AirReflection::Node::node_as_InterpolantType(a1);
        result = AirReflection::InterpolantType::HashImpl(v112, c);
        break;
      case 532521:
        v113 = (int *)AirReflection::Node::node_as_VisibleFunctionTableType(a1);
        result = AirReflection::VisibleFunctionTableType::HashImpl(v113, c);
        break;
      case 532522:
        v114 = (int *)AirReflection::Node::node_as_IntersectionFunctionTableType(a1);
        result = AirReflection::IntersectionFunctionTableType::HashImpl(v114, c);
        break;
      case 532523:
        v115 = (int *)AirReflection::Node::node_as_AccelerationStructureType(a1);
        result = AirReflection::AccelerationStructureType::HashImpl(v115, c);
        break;
      case 532524:
        v116 = (int *)AirReflection::Node::node_as_MeshType(a1);
        result = AirReflection::MeshType::HashImpl(v116, c);
        break;
      case 532525:
        v117 = (int *)AirReflection::Node::node_as_MeshGridPropertiesType(a1);
        result = AirReflection::MeshGridPropertiesType::HashImpl(v117, c);
        break;
      default:
        goto LABEL_68;
    }
  }
  return result;
}

uint64_t AirReflection::LocalAllocation::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  int data;
  int v10;

  CC_SHA256_Update(c, "AirReflection.LocalAllocation", 0x1Du);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  v10 = v7;
  return CC_SHA256_Update(c, &v10, 4u);
}

uint64_t AirReflection::Node::node_as_FragmentFunction(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5 && v1[2] && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 1) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  else
    return 0;
}

uint64_t AirReflection::FragmentFunction::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  int *p_data;
  CC_LONG v9;
  CC_SHA256_CTX *v10;
  unsigned __int16 *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  int *v15;
  int v16;
  unsigned __int16 *v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  int *v21;
  int v22;
  unsigned __int16 *v23;
  uint64_t v24;
  int data;

  CC_SHA256_Update(c, "AirReflection.FragmentFunction", 0x1Eu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
  {
    v6 = (unsigned int *)((char *)a1 + v5);
    v7 = *v6;
    p_data = (int *)((char *)v6 + v7 + 4);
    v9 = *(unsigned int *)((char *)v6 + v7);
    v10 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v10 = c;
    v9 = 4;
  }
  CC_SHA256_Update(v10, p_data, v9);
  v11 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v11 >= 7u && (v12 = v11[3]) != 0)
  {
    v13 = (unsigned int *)((char *)a1 + v12 + *(unsigned int *)((char *)a1 + v12));
    data = *v13;
    CC_SHA256_Update(c, &data, 4u);
    v14 = *v13;
    if ((_DWORD)v14)
    {
      v15 = (int *)(v13 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v16 = *v15++;
        data = v16;
        CC_SHA256_Update(c, &data, 4u);
        --v14;
      }
      while (v14);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 >= 9u && (v18 = v17[4]) != 0)
  {
    v19 = (unsigned int *)((char *)a1 + v18 + *(unsigned int *)((char *)a1 + v18));
    data = *v19;
    CC_SHA256_Update(c, &data, 4u);
    v20 = *v19;
    if ((_DWORD)v20)
    {
      v21 = (int *)(v19 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v22 = *v21++;
        data = v22;
        CC_SHA256_Update(c, &data, 4u);
        --v20;
      }
      while (v20);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v23 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v23 < 0xBu)
  {
    LOBYTE(v24) = 0;
  }
  else
  {
    v24 = v23[5];
    if (v24)
      LOBYTE(v24) = *((_BYTE *)a1 + v24) != 0;
  }
  LOBYTE(data) = v24;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t AirReflection::Node::node_as_KernelFunction(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5 && v1[2] && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 2) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  else
    return 0;
}

uint64_t AirReflection::KernelFunction::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  int *p_data;
  CC_LONG v9;
  CC_SHA256_CTX *v10;
  unsigned __int16 *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  int *v15;
  int v16;
  unsigned __int16 *v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  int *v21;
  int v22;
  unsigned __int16 *v23;
  unsigned __int16 v24;
  uint64_t v25;
  unsigned __int16 *v26;
  unsigned __int16 v27;
  uint64_t v28;
  unsigned __int16 *v29;
  unsigned __int16 v30;
  uint64_t v31;
  unsigned __int16 *v32;
  unsigned __int16 v33;
  uint64_t v34;
  int data;

  CC_SHA256_Update(c, "AirReflection.KernelFunction", 0x1Cu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
  {
    v6 = (unsigned int *)((char *)a1 + v5);
    v7 = *v6;
    p_data = (int *)((char *)v6 + v7 + 4);
    v9 = *(unsigned int *)((char *)v6 + v7);
    v10 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v10 = c;
    v9 = 4;
  }
  CC_SHA256_Update(v10, p_data, v9);
  v11 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v11 >= 7u && (v12 = v11[3]) != 0)
  {
    v13 = (unsigned int *)((char *)a1 + v12 + *(unsigned int *)((char *)a1 + v12));
    data = *v13;
    CC_SHA256_Update(c, &data, 4u);
    v14 = *v13;
    if ((_DWORD)v14)
    {
      v15 = (int *)(v13 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v16 = *v15++;
        data = v16;
        CC_SHA256_Update(c, &data, 4u);
        --v14;
      }
      while (v14);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 >= 9u && (v18 = v17[4]) != 0)
  {
    v19 = (unsigned int *)((char *)a1 + v18 + *(unsigned int *)((char *)a1 + v18));
    data = *v19;
    CC_SHA256_Update(c, &data, 4u);
    v20 = *v19;
    if ((_DWORD)v20)
    {
      v21 = (int *)(v19 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v22 = *v21++;
        data = v22;
        CC_SHA256_Update(c, &data, 4u);
        --v20;
      }
      while (v20);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v23 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v23 >= 0xBu && (v24 = v23[5]) != 0)
  {
    v25 = v24;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v25);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v26 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v26 >= 0xDu && (v27 = v26[6]) != 0)
  {
    v28 = v27;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v28);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v29 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v29 >= 0xFu && (v30 = v29[7]) != 0)
  {
    v31 = v30;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v31);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v32 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v32 >= 0x11u && (v33 = v32[8]) != 0)
  {
    v34 = v33;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v34);
  }
  else
  {
    data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_VertexFunction(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5 && v1[2] && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 3) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  else
    return 0;
}

uint64_t AirReflection::VertexFunction::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  int *p_data;
  CC_LONG v9;
  CC_SHA256_CTX *v10;
  unsigned __int16 *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  int *v15;
  int v16;
  unsigned __int16 *v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  int *v21;
  int v22;
  unsigned __int16 *v23;
  unsigned __int16 v24;
  uint64_t v25;
  int data;

  CC_SHA256_Update(c, "AirReflection.VertexFunction", 0x1Cu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
  {
    v6 = (unsigned int *)((char *)a1 + v5);
    v7 = *v6;
    p_data = (int *)((char *)v6 + v7 + 4);
    v9 = *(unsigned int *)((char *)v6 + v7);
    v10 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v10 = c;
    v9 = 4;
  }
  CC_SHA256_Update(v10, p_data, v9);
  v11 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v11 >= 7u && (v12 = v11[3]) != 0)
  {
    v13 = (unsigned int *)((char *)a1 + v12 + *(unsigned int *)((char *)a1 + v12));
    data = *v13;
    CC_SHA256_Update(c, &data, 4u);
    v14 = *v13;
    if ((_DWORD)v14)
    {
      v15 = (int *)(v13 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v16 = *v15++;
        data = v16;
        CC_SHA256_Update(c, &data, 4u);
        --v14;
      }
      while (v14);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 >= 9u && (v18 = v17[4]) != 0)
  {
    v19 = (unsigned int *)((char *)a1 + v18 + *(unsigned int *)((char *)a1 + v18));
    data = *v19;
    CC_SHA256_Update(c, &data, 4u);
    v20 = *v19;
    if ((_DWORD)v20)
    {
      v21 = (int *)(v19 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v22 = *v21++;
        data = v22;
        CC_SHA256_Update(c, &data, 4u);
        --v20;
      }
      while (v20);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v23 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v23 >= 0xBu && (v24 = v23[5]) != 0)
  {
    v25 = v24;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v25);
  }
  else
  {
    data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_VisibleFunction(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5 && v1[2] && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 4) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  else
    return 0;
}

uint64_t AirReflection::VisibleFunction::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  int *p_data;
  CC_LONG v9;
  CC_SHA256_CTX *v10;
  unsigned __int16 *v11;
  uint64_t v12;
  int data;
  int v15;

  CC_SHA256_Update(c, "AirReflection.VisibleFunction", 0x1Du);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
  {
    v6 = (unsigned int *)((char *)a1 + v5);
    v7 = *v6;
    p_data = (int *)((char *)v6 + v7 + 4);
    v9 = *(unsigned int *)((char *)v6 + v7);
    v10 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v10 = c;
    v9 = 4;
  }
  CC_SHA256_Update(v10, p_data, v9);
  v11 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v11 >= 7u)
  {
    v12 = v11[3];
    if (v12)
      return AirReflection::StitchingInfo::HashImpl((int *)((char *)a1 + v12 + *(unsigned int *)((char *)a1 + v12)), c);
  }
  v15 = 0;
  return CC_SHA256_Update(c, &v15, 4u);
}

uint64_t AirReflection::Node::node_as_IntersectionFunction(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5 && v1[2] && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 5) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  else
    return 0;
}

uint64_t AirReflection::IntersectionFunction::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  int *p_data;
  CC_LONG v9;
  CC_SHA256_CTX *v10;
  unsigned __int16 *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  int *v15;
  int v16;
  unsigned __int16 *v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  int *v21;
  int v22;
  unsigned __int16 *v23;
  uint64_t v24;
  unsigned __int16 *v25;
  uint64_t v26;
  unsigned __int16 *v27;
  uint64_t v28;
  unsigned __int16 *v29;
  uint64_t v30;
  unsigned __int16 *v31;
  uint64_t v32;
  unsigned __int16 *v33;
  uint64_t v34;
  unsigned __int16 *v35;
  uint64_t v36;
  unsigned __int16 *v37;
  uint64_t v38;
  unsigned __int16 *v39;
  uint64_t v40;
  int data;

  CC_SHA256_Update(c, "AirReflection.IntersectionFunction", 0x22u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
  {
    v6 = (unsigned int *)((char *)a1 + v5);
    v7 = *v6;
    p_data = (int *)((char *)v6 + v7 + 4);
    v9 = *(unsigned int *)((char *)v6 + v7);
    v10 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v10 = c;
    v9 = 4;
  }
  CC_SHA256_Update(v10, p_data, v9);
  v11 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v11 >= 7u && (v12 = v11[3]) != 0)
  {
    v13 = (unsigned int *)((char *)a1 + v12 + *(unsigned int *)((char *)a1 + v12));
    data = *v13;
    CC_SHA256_Update(c, &data, 4u);
    v14 = *v13;
    if ((_DWORD)v14)
    {
      v15 = (int *)(v13 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v16 = *v15++;
        data = v16;
        CC_SHA256_Update(c, &data, 4u);
        --v14;
      }
      while (v14);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 >= 9u && (v18 = v17[4]) != 0)
  {
    v19 = (unsigned int *)((char *)a1 + v18 + *(unsigned int *)((char *)a1 + v18));
    data = *v19;
    CC_SHA256_Update(c, &data, 4u);
    v20 = *v19;
    if ((_DWORD)v20)
    {
      v21 = (int *)(v19 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v22 = *v21++;
        data = v22;
        CC_SHA256_Update(c, &data, 4u);
        --v20;
      }
      while (v20);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v23 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v23 < 0xBu)
  {
    LODWORD(v24) = 0;
  }
  else
  {
    v24 = v23[5];
    if (v24)
      LODWORD(v24) = *((unsigned __int8 *)a1 + v24);
  }
  data = v24;
  CC_SHA256_Update(c, &data, 4u);
  v25 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v25 < 0xDu)
  {
    LOBYTE(v26) = 0;
  }
  else
  {
    v26 = v25[6];
    if (v26)
      LOBYTE(v26) = *((_BYTE *)a1 + v26) != 0;
  }
  LOBYTE(data) = v26;
  CC_SHA256_Update(c, &data, 1u);
  v27 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v27 < 0xFu)
  {
    LOBYTE(v28) = 0;
  }
  else
  {
    v28 = v27[7];
    if (v28)
      LOBYTE(v28) = *((_BYTE *)a1 + v28) != 0;
  }
  LOBYTE(data) = v28;
  CC_SHA256_Update(c, &data, 1u);
  v29 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v29 < 0x11u)
  {
    LOBYTE(v30) = 0;
  }
  else
  {
    v30 = v29[8];
    if (v30)
      LOBYTE(v30) = *((_BYTE *)a1 + v30) != 0;
  }
  LOBYTE(data) = v30;
  CC_SHA256_Update(c, &data, 1u);
  v31 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v31 < 0x13u)
  {
    LOBYTE(v32) = 0;
  }
  else
  {
    v32 = v31[9];
    if (v32)
      LOBYTE(v32) = *((_BYTE *)a1 + v32) != 0;
  }
  LOBYTE(data) = v32;
  CC_SHA256_Update(c, &data, 1u);
  v33 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v33 < 0x15u)
  {
    LOBYTE(v34) = 0;
  }
  else
  {
    v34 = v33[10];
    if (v34)
      LOBYTE(v34) = *((_BYTE *)a1 + v34) != 0;
  }
  LOBYTE(data) = v34;
  CC_SHA256_Update(c, &data, 1u);
  v35 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v35 < 0x17u)
  {
    LOBYTE(v36) = 0;
  }
  else
  {
    v36 = v35[11];
    if (v36)
      LOBYTE(v36) = *((_BYTE *)a1 + v36) != 0;
  }
  LOBYTE(data) = v36;
  CC_SHA256_Update(c, &data, 1u);
  v37 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v37 < 0x19u)
  {
    LOBYTE(v38) = 0;
  }
  else
  {
    v38 = v37[12];
    if (v38)
      LOBYTE(v38) = *((_BYTE *)a1 + v38) != 0;
  }
  LOBYTE(data) = v38;
  CC_SHA256_Update(c, &data, 1u);
  v39 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v39 < 0x1Bu)
  {
    LODWORD(v40) = 0;
  }
  else
  {
    v40 = v39[13];
    if (v40)
      LODWORD(v40) = *(int *)((char *)a1 + v40);
  }
  data = v40;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_MeshFunction(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5 && v1[2] && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 6) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  else
    return 0;
}

uint64_t AirReflection::MeshFunction::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  int *p_data;
  CC_LONG v9;
  CC_SHA256_CTX *v10;
  unsigned __int16 *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  int *v15;
  int v16;
  unsigned __int16 *v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  int *v21;
  int v22;
  unsigned __int16 *v23;
  unsigned __int16 v24;
  uint64_t v25;
  int data;

  CC_SHA256_Update(c, "AirReflection.MeshFunction", 0x1Au);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
  {
    v6 = (unsigned int *)((char *)a1 + v5);
    v7 = *v6;
    p_data = (int *)((char *)v6 + v7 + 4);
    v9 = *(unsigned int *)((char *)v6 + v7);
    v10 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v10 = c;
    v9 = 4;
  }
  CC_SHA256_Update(v10, p_data, v9);
  v11 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v11 >= 7u && (v12 = v11[3]) != 0)
  {
    v13 = (unsigned int *)((char *)a1 + v12 + *(unsigned int *)((char *)a1 + v12));
    data = *v13;
    CC_SHA256_Update(c, &data, 4u);
    v14 = *v13;
    if ((_DWORD)v14)
    {
      v15 = (int *)(v13 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v16 = *v15++;
        data = v16;
        CC_SHA256_Update(c, &data, 4u);
        --v14;
      }
      while (v14);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 >= 9u && (v18 = v17[4]) != 0)
  {
    v19 = (unsigned int *)((char *)a1 + v18 + *(unsigned int *)((char *)a1 + v18));
    data = *v19;
    CC_SHA256_Update(c, &data, 4u);
    v20 = *v19;
    if ((_DWORD)v20)
    {
      v21 = (int *)(v19 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v22 = *v21++;
        data = v22;
        CC_SHA256_Update(c, &data, 4u);
        --v20;
      }
      while (v20);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v23 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v23 >= 0xBu && (v24 = v23[5]) != 0)
  {
    v25 = v24;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v25);
  }
  else
  {
    data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_ObjectFunction(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5 && v1[2] && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 7) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  else
    return 0;
}

uint64_t AirReflection::ObjectFunction::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  int *p_data;
  CC_LONG v9;
  CC_SHA256_CTX *v10;
  unsigned __int16 *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  int *v15;
  int v16;
  unsigned __int16 *v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  int *v21;
  int v22;
  unsigned __int16 *v23;
  unsigned __int16 v24;
  uint64_t v25;
  unsigned __int16 *v26;
  unsigned __int16 v27;
  uint64_t v28;
  int data;

  CC_SHA256_Update(c, "AirReflection.ObjectFunction", 0x1Cu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
  {
    v6 = (unsigned int *)((char *)a1 + v5);
    v7 = *v6;
    p_data = (int *)((char *)v6 + v7 + 4);
    v9 = *(unsigned int *)((char *)v6 + v7);
    v10 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v10 = c;
    v9 = 4;
  }
  CC_SHA256_Update(v10, p_data, v9);
  v11 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v11 >= 7u && (v12 = v11[3]) != 0)
  {
    v13 = (unsigned int *)((char *)a1 + v12 + *(unsigned int *)((char *)a1 + v12));
    data = *v13;
    CC_SHA256_Update(c, &data, 4u);
    v14 = *v13;
    if ((_DWORD)v14)
    {
      v15 = (int *)(v13 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v16 = *v15++;
        data = v16;
        CC_SHA256_Update(c, &data, 4u);
        --v14;
      }
      while (v14);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 >= 9u && (v18 = v17[4]) != 0)
  {
    v19 = (unsigned int *)((char *)a1 + v18 + *(unsigned int *)((char *)a1 + v18));
    data = *v19;
    CC_SHA256_Update(c, &data, 4u);
    v20 = *v19;
    if ((_DWORD)v20)
    {
      v21 = (int *)(v19 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v22 = *v21++;
        data = v22;
        CC_SHA256_Update(c, &data, 4u);
        --v20;
      }
      while (v20);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v23 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v23 >= 0xBu && (v24 = v23[5]) != 0)
  {
    v25 = v24;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v25);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v26 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v26 >= 0xDu && (v27 = v26[6]) != 0)
  {
    v28 = v27;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v28);
  }
  else
  {
    data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_VecTypeHintFnAttr(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 5 || !v1[2])
    return 0;
  v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 4096)
  {
    v3 = v1[3];
    if (v1[3])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t AirReflection::VecTypeHintFnAttr::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  int data;

  CC_SHA256_Update(c, "AirReflection.VecTypeHintFnAttr", 0x1Fu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u)
  {
    v5 = v4[2];
    if (v5)
      return CC_SHA256_Update(c, (char *)a1 + v5 + *(unsigned int *)((char *)a1 + v5) + 4, *(int *)((char *)a1 + v5 + *(unsigned int *)((char *)a1 + v5)));
  }
  data = 0;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_WorkgroupSizeFnAttr(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 4097) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::WorkgroupSizeFnAttr::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  unsigned __int16 v5;
  uint64_t v6;
  unsigned __int16 *v7;
  unsigned __int16 v8;
  uint64_t v9;
  unsigned __int16 *v10;
  unsigned __int16 v11;
  uint64_t v12;
  int data;

  CC_SHA256_Update(c, "AirReflection.WorkgroupSizeFnAttr", 0x21u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
  {
    v6 = v5;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v6);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v7 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v7 >= 7u && (v8 = v7[3]) != 0)
  {
    v9 = v8;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v9);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v10 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v10 >= 9u && (v11 = v10[4]) != 0)
  {
    v12 = v11;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v12);
  }
  else
  {
    data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_WorkgroupSizeHintFnAttr(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 4098) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::WorkgroupSizeHintFnAttr::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  unsigned __int16 v5;
  uint64_t v6;
  unsigned __int16 *v7;
  unsigned __int16 v8;
  uint64_t v9;
  unsigned __int16 *v10;
  unsigned __int16 v11;
  uint64_t v12;
  int data;

  CC_SHA256_Update(c, "AirReflection.WorkgroupSizeHintFnAttr", 0x25u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
  {
    v6 = v5;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v6);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v7 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v7 >= 7u && (v8 = v7[3]) != 0)
  {
    v9 = v8;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v9);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v10 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v10 >= 9u && (v11 = v10[4]) != 0)
  {
    v12 = v11;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v12);
  }
  else
  {
    data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_WorkgroupMaxSizeFnAttr(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 4099) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::WorkgroupMaxSizeFnAttr::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  unsigned __int16 v5;
  uint64_t v6;
  int *p_data;
  int v9;
  int data;

  CC_SHA256_Update(c, "AirReflection.WorkgroupMaxSizeFnAttr", 0x24u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
  {
    v6 = v5;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    v9 = *(int *)((char *)a1 + v6);
    p_data = &v9;
  }
  else
  {
    data = 0;
    p_data = &data;
  }
  return CC_SHA256_Update(c, p_data, 4u);
}

uint64_t AirReflection::Node::node_as_PatchFnAttr(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 4100) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::PatchFnAttr::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 v7;
  uint64_t v8;
  int *v9;
  int data;
  int v12;
  int v13;

  CC_SHA256_Update(c, "AirReflection.PatchFnAttr", 0x19u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *((unsigned __int8 *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = v7;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    v12 = *(int *)((char *)a1 + v8);
    v9 = &v12;
  }
  else
  {
    v13 = 0;
    v9 = &v13;
  }
  return CC_SHA256_Update(c, v9, 4u);
}

uint64_t AirReflection::Node::node_as_MaxMeshWorkgroupsFnAttr(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 4101) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::MaxMeshWorkgroupsFnAttr::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  unsigned __int16 v5;
  uint64_t v6;
  int *p_data;
  int v9;
  int data;

  CC_SHA256_Update(c, "AirReflection.MaxMeshWorkgroupsFnAttr", 0x25u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
  {
    v6 = v5;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    v9 = *(int *)((char *)a1 + v6);
    p_data = &v9;
  }
  else
  {
    data = 0;
    p_data = &data;
  }
  return CC_SHA256_Update(c, p_data, 4u);
}

uint64_t AirReflection::Node::node_as_ClipDistanceRet(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 5 || !v1[2])
    return 0;
  v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 0x20000)
  {
    v3 = v1[3];
    if (v1[3])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t AirReflection::ClipDistanceRet::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 v7;
  uint64_t v8;
  unsigned __int16 *v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  int *p_data;
  CC_LONG v16;
  CC_SHA256_CTX *v17;
  unsigned __int16 *v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  int *v22;
  CC_LONG v23;
  CC_SHA256_CTX *v24;
  int data;

  CC_SHA256_Update(c, "AirReflection.ClipDistanceRet", 0x1Du);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = v7;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v8);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 < 9u)
  {
    LOBYTE(v10) = 0;
  }
  else
  {
    v10 = v9[4];
    if (v10)
      LOBYTE(v10) = *((_BYTE *)a1 + v10) != 0;
  }
  LOBYTE(data) = v10;
  CC_SHA256_Update(c, &data, 1u);
  v11 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v11 >= 0xBu && (v12 = v11[5]) != 0)
  {
    v13 = (unsigned int *)((char *)a1 + v12);
    v14 = *v13;
    p_data = (int *)((char *)v13 + v14 + 4);
    v16 = *(unsigned int *)((char *)v13 + v14);
    v17 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v17 = c;
    v16 = 4;
  }
  CC_SHA256_Update(v17, p_data, v16);
  v18 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v18 >= 0xDu && (v19 = v18[6]) != 0)
  {
    v20 = (unsigned int *)((char *)a1 + v19);
    v21 = *v20;
    v22 = (int *)((char *)v20 + v21 + 4);
    v23 = *(unsigned int *)((char *)v20 + v21);
    v24 = c;
  }
  else
  {
    data = 0;
    v22 = &data;
    v24 = c;
    v23 = 4;
  }
  return CC_SHA256_Update(v24, v22, v23);
}

uint64_t AirReflection::Node::node_as_PointSizeRet(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 131073) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::PointSizeRet::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  CC_LONG v13;
  CC_SHA256_CTX *v14;
  unsigned __int16 *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  int *v19;
  CC_LONG v20;
  CC_SHA256_CTX *v21;
  char data;
  char v24;
  int v25;
  int v26;

  CC_SHA256_Update(c, "AirReflection.PointSizeRet", 0x1Au);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LOBYTE(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LOBYTE(v7) = *((_BYTE *)a1 + v7) != 0;
  }
  v24 = v7;
  CC_SHA256_Update(c, &v24, 1u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9);
    v11 = *v10;
    v12 = (int *)((char *)v10 + v11 + 4);
    v13 = *(unsigned int *)((char *)v10 + v11);
    v14 = c;
  }
  else
  {
    v25 = 0;
    v12 = &v25;
    v14 = c;
    v13 = 4;
  }
  CC_SHA256_Update(v14, v12, v13);
  v15 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v15 >= 0xBu && (v16 = v15[5]) != 0)
  {
    v17 = (unsigned int *)((char *)a1 + v16);
    v18 = *v17;
    v19 = (int *)((char *)v17 + v18 + 4);
    v20 = *(unsigned int *)((char *)v17 + v18);
    v21 = c;
  }
  else
  {
    v26 = 0;
    v19 = &v26;
    v21 = c;
    v20 = 4;
  }
  return CC_SHA256_Update(v21, v19, v20);
}

uint64_t AirReflection::Node::node_as_PositionRet(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 131074) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::PositionRet::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned __int16 *v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  int *v14;
  CC_LONG v15;
  CC_SHA256_CTX *v16;
  unsigned __int16 *v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  int *v21;
  CC_LONG v22;
  CC_SHA256_CTX *v23;
  char data;
  char v26;
  char v27;
  int v28;
  int v29;

  CC_SHA256_Update(c, "AirReflection.PositionRet", 0x19u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LOBYTE(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LOBYTE(v7) = *((_BYTE *)a1 + v7) != 0;
  }
  v26 = v7;
  CC_SHA256_Update(c, &v26, 1u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 < 9u)
  {
    LOBYTE(v9) = 0;
  }
  else
  {
    v9 = v8[4];
    if (v9)
      LOBYTE(v9) = *((_BYTE *)a1 + v9) != 0;
  }
  v27 = v9;
  CC_SHA256_Update(c, &v27, 1u);
  v10 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v10 >= 0xBu && (v11 = v10[5]) != 0)
  {
    v12 = (unsigned int *)((char *)a1 + v11);
    v13 = *v12;
    v14 = (int *)((char *)v12 + v13 + 4);
    v15 = *(unsigned int *)((char *)v12 + v13);
    v16 = c;
  }
  else
  {
    v28 = 0;
    v14 = &v28;
    v16 = c;
    v15 = 4;
  }
  CC_SHA256_Update(v16, v14, v15);
  v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 >= 0xDu && (v18 = v17[6]) != 0)
  {
    v19 = (unsigned int *)((char *)a1 + v18);
    v20 = *v19;
    v21 = (int *)((char *)v19 + v20 + 4);
    v22 = *(unsigned int *)((char *)v19 + v20);
    v23 = c;
  }
  else
  {
    v29 = 0;
    v21 = &v29;
    v23 = c;
    v22 = 4;
  }
  return CC_SHA256_Update(v23, v21, v22);
}

uint64_t AirReflection::Node::node_as_RenderTargetArrayIndexRet(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 131075) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::RenderTargetArrayIndexRet::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  CC_LONG v13;
  CC_SHA256_CTX *v14;
  unsigned __int16 *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  int *v19;
  CC_LONG v20;
  CC_SHA256_CTX *v21;
  char data;
  char v24;
  int v25;
  int v26;

  CC_SHA256_Update(c, "AirReflection.RenderTargetArrayIndexRet", 0x27u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LOBYTE(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LOBYTE(v7) = *((_BYTE *)a1 + v7) != 0;
  }
  v24 = v7;
  CC_SHA256_Update(c, &v24, 1u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9);
    v11 = *v10;
    v12 = (int *)((char *)v10 + v11 + 4);
    v13 = *(unsigned int *)((char *)v10 + v11);
    v14 = c;
  }
  else
  {
    v25 = 0;
    v12 = &v25;
    v14 = c;
    v13 = 4;
  }
  CC_SHA256_Update(v14, v12, v13);
  v15 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v15 >= 0xBu && (v16 = v15[5]) != 0)
  {
    v17 = (unsigned int *)((char *)a1 + v16);
    v18 = *v17;
    v19 = (int *)((char *)v17 + v18 + 4);
    v20 = *(unsigned int *)((char *)v17 + v18);
    v21 = c;
  }
  else
  {
    v26 = 0;
    v19 = &v26;
    v21 = c;
    v20 = 4;
  }
  return CC_SHA256_Update(v21, v19, v20);
}

uint64_t AirReflection::Node::node_as_VertexOutputRet(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 131076) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::VertexOutputRet::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *p_data;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  unsigned __int16 v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  unsigned __int16 *v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  int *v22;
  CC_LONG v23;
  CC_SHA256_CTX *v24;
  unsigned __int16 *v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  int *v29;
  CC_LONG v30;
  CC_SHA256_CTX *v31;
  int data;

  CC_SHA256_Update(c, "AirReflection.VertexOutputRet", 0x1Du);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    p_data = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, p_data, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = v14;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v15);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v16 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v16 < 0xBu)
  {
    LOBYTE(v17) = 0;
  }
  else
  {
    v17 = v16[5];
    if (v17)
      LOBYTE(v17) = *((_BYTE *)a1 + v17) != 0;
  }
  LOBYTE(data) = v17;
  CC_SHA256_Update(c, &data, 1u);
  v18 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v18 >= 0xDu && (v19 = v18[6]) != 0)
  {
    v20 = (unsigned int *)((char *)a1 + v19);
    v21 = *v20;
    v22 = (int *)((char *)v20 + v21 + 4);
    v23 = *(unsigned int *)((char *)v20 + v21);
    v24 = c;
  }
  else
  {
    data = 0;
    v22 = &data;
    v24 = c;
    v23 = 4;
  }
  CC_SHA256_Update(v24, v22, v23);
  v25 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v25 >= 0xFu && (v26 = v25[7]) != 0)
  {
    v27 = (unsigned int *)((char *)a1 + v26);
    v28 = *v27;
    v29 = (int *)((char *)v27 + v28 + 4);
    v30 = *(unsigned int *)((char *)v27 + v28);
    v31 = c;
  }
  else
  {
    data = 0;
    v29 = &data;
    v31 = c;
    v30 = 4;
  }
  return CC_SHA256_Update(v31, v29, v30);
}

uint64_t AirReflection::Node::node_as_ViewportArrayIndexRet(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 131077) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ViewportArrayIndexRet::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  CC_LONG v13;
  CC_SHA256_CTX *v14;
  unsigned __int16 *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  int *v19;
  CC_LONG v20;
  CC_SHA256_CTX *v21;
  char data;
  char v24;
  int v25;
  int v26;

  CC_SHA256_Update(c, "AirReflection.ViewportArrayIndexRet", 0x23u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LOBYTE(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LOBYTE(v7) = *((_BYTE *)a1 + v7) != 0;
  }
  v24 = v7;
  CC_SHA256_Update(c, &v24, 1u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9);
    v11 = *v10;
    v12 = (int *)((char *)v10 + v11 + 4);
    v13 = *(unsigned int *)((char *)v10 + v11);
    v14 = c;
  }
  else
  {
    v25 = 0;
    v12 = &v25;
    v14 = c;
    v13 = 4;
  }
  CC_SHA256_Update(v14, v12, v13);
  v15 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v15 >= 0xBu && (v16 = v15[5]) != 0)
  {
    v17 = (unsigned int *)((char *)a1 + v16);
    v18 = *v17;
    v19 = (int *)((char *)v17 + v18 + 4);
    v20 = *(unsigned int *)((char *)v17 + v18);
    v21 = c;
  }
  else
  {
    v26 = 0;
    v19 = &v26;
    v21 = c;
    v20 = 4;
  }
  return CC_SHA256_Update(v21, v19, v20);
}

uint64_t AirReflection::Node::node_as_RenderTargetRet(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 5 || !v1[2])
    return 0;
  v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 135168)
  {
    v3 = v1[3];
    if (v1[3])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t AirReflection::RenderTargetRet::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 v7;
  uint64_t v8;
  unsigned __int16 *v9;
  unsigned __int16 v10;
  uint64_t v11;
  unsigned __int16 *v12;
  unsigned __int16 v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  int *p_data;
  CC_LONG v22;
  CC_SHA256_CTX *v23;
  unsigned __int16 *v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  int *v28;
  CC_LONG v29;
  CC_SHA256_CTX *v30;
  int data;

  CC_SHA256_Update(c, "AirReflection.RenderTargetRet", 0x1Du);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = v7;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v8);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 >= 9u && (v10 = v9[4]) != 0)
  {
    v11 = v10;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v11);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 >= 0xBu && (v13 = v12[5]) != 0)
  {
    v14 = v13;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v14);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v15 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v15 < 0xDu)
  {
    LODWORD(v16) = 0;
  }
  else
  {
    v16 = v15[6];
    if (v16)
      LODWORD(v16) = *((unsigned __int8 *)a1 + v16);
  }
  data = v16;
  CC_SHA256_Update(c, &data, 4u);
  v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 >= 0xFu && (v18 = v17[7]) != 0)
  {
    v19 = (unsigned int *)((char *)a1 + v18);
    v20 = *v19;
    p_data = (int *)((char *)v19 + v20 + 4);
    v22 = *(unsigned int *)((char *)v19 + v20);
    v23 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v23 = c;
    v22 = 4;
  }
  CC_SHA256_Update(v23, p_data, v22);
  v24 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v24 >= 0x11u && (v25 = v24[8]) != 0)
  {
    v26 = (unsigned int *)((char *)a1 + v25);
    v27 = *v26;
    v28 = (int *)((char *)v26 + v27 + 4);
    v29 = *(unsigned int *)((char *)v26 + v27);
    v30 = c;
  }
  else
  {
    data = 0;
    v28 = &data;
    v30 = c;
    v29 = 4;
  }
  return CC_SHA256_Update(v30, v28, v29);
}

uint64_t AirReflection::Node::node_as_DepthRet(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 135169) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::DepthRet::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  CC_LONG v13;
  CC_SHA256_CTX *v14;
  unsigned __int16 *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  int *v19;
  CC_LONG v20;
  CC_SHA256_CTX *v21;
  char data;
  int v24;
  int v25;
  int v26;

  CC_SHA256_Update(c, "AirReflection.DepthRet", 0x16u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *((unsigned __int8 *)a1 + v7);
  }
  v24 = v7;
  CC_SHA256_Update(c, &v24, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9);
    v11 = *v10;
    v12 = (int *)((char *)v10 + v11 + 4);
    v13 = *(unsigned int *)((char *)v10 + v11);
    v14 = c;
  }
  else
  {
    v25 = 0;
    v12 = &v25;
    v14 = c;
    v13 = 4;
  }
  CC_SHA256_Update(v14, v12, v13);
  v15 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v15 >= 0xBu && (v16 = v15[5]) != 0)
  {
    v17 = (unsigned int *)((char *)a1 + v16);
    v18 = *v17;
    v19 = (int *)((char *)v17 + v18 + 4);
    v20 = *(unsigned int *)((char *)v17 + v18);
    v21 = c;
  }
  else
  {
    v26 = 0;
    v19 = &v26;
    v21 = c;
    v20 = 4;
  }
  return CC_SHA256_Update(v21, v19, v20);
}

uint64_t AirReflection::Node::node_as_StencilRet(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 135170) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::StencilRet::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  char data;
  int v22;
  int v23;

  CC_SHA256_Update(c, "AirReflection.StencilRet", 0x18u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v22 = 0;
    v10 = &v22;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v23 = 0;
    v17 = &v23;
    v19 = c;
    v18 = 4;
  }
  return CC_SHA256_Update(v19, v17, v18);
}

uint64_t AirReflection::Node::node_as_SampleMaskRet(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 135171) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::SampleMaskRet::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  char data;
  int v22;
  int v23;

  CC_SHA256_Update(c, "AirReflection.SampleMaskRet", 0x1Bu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v22 = 0;
    v10 = &v22;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v23 = 0;
    v17 = &v23;
    v19 = c;
    v18 = 4;
  }
  return CC_SHA256_Update(v19, v17, v18);
}

uint64_t AirReflection::Node::node_as_ImageblockDataRet(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 135172) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ImageblockDataRet::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 v7;
  uint64_t v8;
  unsigned __int16 *v9;
  unsigned __int16 v10;
  uint64_t v11;
  unsigned __int16 *v12;
  unsigned __int16 v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  unsigned __int16 *v17;
  unsigned __int16 v18;
  uint64_t v19;
  unsigned __int16 *v20;
  unsigned __int16 v21;
  uint64_t v22;
  unsigned __int16 *v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  int *p_data;
  CC_LONG v28;
  CC_SHA256_CTX *v29;
  unsigned __int16 *v30;
  uint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  int *v34;
  CC_LONG v35;
  CC_SHA256_CTX *v36;
  int data;

  CC_SHA256_Update(c, "AirReflection.ImageblockDataRet", 0x1Fu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = v7;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v8);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 >= 9u && (v10 = v9[4]) != 0)
  {
    v11 = v10;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v11);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 >= 0xBu && (v13 = v12[5]) != 0)
  {
    v14 = v13;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v14);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v15 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v15 < 0xDu)
  {
    LOBYTE(v16) = 0;
  }
  else
  {
    v16 = v15[6];
    if (v16)
      LOBYTE(v16) = *((_BYTE *)a1 + v16) != 0;
  }
  LOBYTE(data) = v16;
  CC_SHA256_Update(c, &data, 1u);
  v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 >= 0xFu && (v18 = v17[7]) != 0)
  {
    v19 = v18;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v19);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 >= 0x11u && (v21 = v20[8]) != 0)
  {
    v22 = v21;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v22);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v23 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v23 >= 0x13u && (v24 = v23[9]) != 0)
  {
    v25 = (unsigned int *)((char *)a1 + v24);
    v26 = *v25;
    p_data = (int *)((char *)v25 + v26 + 4);
    v28 = *(unsigned int *)((char *)v25 + v26);
    v29 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v29 = c;
    v28 = 4;
  }
  CC_SHA256_Update(v29, p_data, v28);
  v30 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v30 >= 0x15u && (v31 = v30[10]) != 0)
  {
    v32 = (unsigned int *)((char *)a1 + v31);
    v33 = *v32;
    v34 = (int *)((char *)v32 + v33 + 4);
    v35 = *(unsigned int *)((char *)v32 + v33);
    v36 = c;
  }
  else
  {
    data = 0;
    v34 = &data;
    v36 = c;
    v35 = 4;
  }
  return CC_SHA256_Update(v36, v34, v35);
}

uint64_t AirReflection::Node::node_as_AcceptIntersectionRet(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 5 || !v1[2])
    return 0;
  v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 139264)
  {
    v3 = v1[3];
    if (v1[3])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t AirReflection::AcceptIntersectionRet::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  char data;
  int v22;
  int v23;

  CC_SHA256_Update(c, "AirReflection.AcceptIntersectionRet", 0x23u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v22 = 0;
    v10 = &v22;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v23 = 0;
    v17 = &v23;
    v19 = c;
    v18 = 4;
  }
  return CC_SHA256_Update(v19, v17, v18);
}

uint64_t AirReflection::Node::node_as_ContinueSearchRet(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 139265) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ContinueSearchRet::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  char data;
  int v22;
  int v23;

  CC_SHA256_Update(c, "AirReflection.ContinueSearchRet", 0x1Fu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v22 = 0;
    v10 = &v22;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v23 = 0;
    v17 = &v23;
    v19 = c;
    v18 = 4;
  }
  return CC_SHA256_Update(v19, v17, v18);
}

uint64_t AirReflection::Node::node_as_DistanceRet(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 139266) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::DistanceRet::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  char data;
  int v22;
  int v23;

  CC_SHA256_Update(c, "AirReflection.DistanceRet", 0x19u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v22 = 0;
    v10 = &v22;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v23 = 0;
    v17 = &v23;
    v19 = c;
    v18 = 4;
  }
  return CC_SHA256_Update(v19, v17, v18);
}

uint64_t AirReflection::Node::node_as_MeshPrimitiveDataRet(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 5 || !v1[2])
    return 0;
  v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 143360)
  {
    v3 = v1[3];
    if (v1[3])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t AirReflection::MeshPrimitiveDataRet::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *p_data;
  CC_LONG v13;
  CC_SHA256_CTX *v14;
  unsigned __int16 *v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  int *v21;
  CC_LONG v22;
  CC_SHA256_CTX *v23;
  unsigned __int16 *v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  int *v28;
  CC_LONG v29;
  CC_SHA256_CTX *v30;
  int data;

  CC_SHA256_Update(c, "AirReflection.MeshPrimitiveDataRet", 0x22u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9);
    v11 = *v10;
    p_data = (int *)((char *)v10 + v11 + 4);
    v13 = *(unsigned int *)((char *)v10 + v11);
    v14 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v14 = c;
    v13 = 4;
  }
  CC_SHA256_Update(v14, p_data, v13);
  v15 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v15 < 0xBu)
  {
    LOBYTE(v16) = 0;
  }
  else
  {
    v16 = v15[5];
    if (v16)
      LOBYTE(v16) = *((_BYTE *)a1 + v16) != 0;
  }
  LOBYTE(data) = v16;
  CC_SHA256_Update(c, &data, 1u);
  v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 >= 0xDu && (v18 = v17[6]) != 0)
  {
    v19 = (unsigned int *)((char *)a1 + v18);
    v20 = *v19;
    v21 = (int *)((char *)v19 + v20 + 4);
    v22 = *(unsigned int *)((char *)v19 + v20);
    v23 = c;
  }
  else
  {
    data = 0;
    v21 = &data;
    v23 = c;
    v22 = 4;
  }
  CC_SHA256_Update(v23, v21, v22);
  v24 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v24 >= 0xFu && (v25 = v24[7]) != 0)
  {
    v26 = (unsigned int *)((char *)a1 + v25);
    v27 = *v26;
    v28 = (int *)((char *)v26 + v27 + 4);
    v29 = *(unsigned int *)((char *)v26 + v27);
    v30 = c;
  }
  else
  {
    data = 0;
    v28 = &data;
    v30 = c;
    v29 = 4;
  }
  return CC_SHA256_Update(v30, v28, v29);
}

uint64_t AirReflection::Node::node_as_MeshVertexDataRet(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 143361) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::MeshVertexDataRet::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *p_data;
  CC_LONG v13;
  CC_SHA256_CTX *v14;
  unsigned __int16 *v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  int *v21;
  CC_LONG v22;
  CC_SHA256_CTX *v23;
  unsigned __int16 *v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  int *v28;
  CC_LONG v29;
  CC_SHA256_CTX *v30;
  int data;

  CC_SHA256_Update(c, "AirReflection.MeshVertexDataRet", 0x1Fu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9);
    v11 = *v10;
    p_data = (int *)((char *)v10 + v11 + 4);
    v13 = *(unsigned int *)((char *)v10 + v11);
    v14 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v14 = c;
    v13 = 4;
  }
  CC_SHA256_Update(v14, p_data, v13);
  v15 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v15 < 0xBu)
  {
    LOBYTE(v16) = 0;
  }
  else
  {
    v16 = v15[5];
    if (v16)
      LOBYTE(v16) = *((_BYTE *)a1 + v16) != 0;
  }
  LOBYTE(data) = v16;
  CC_SHA256_Update(c, &data, 1u);
  v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 >= 0xDu && (v18 = v17[6]) != 0)
  {
    v19 = (unsigned int *)((char *)a1 + v18);
    v20 = *v19;
    v21 = (int *)((char *)v19 + v20 + 4);
    v22 = *(unsigned int *)((char *)v19 + v20);
    v23 = c;
  }
  else
  {
    data = 0;
    v21 = &data;
    v23 = c;
    v22 = 4;
  }
  CC_SHA256_Update(v23, v21, v22);
  v24 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v24 >= 0xFu && (v25 = v24[7]) != 0)
  {
    v26 = (unsigned int *)((char *)a1 + v25);
    v27 = *v26;
    v28 = (int *)((char *)v26 + v27 + 4);
    v29 = *(unsigned int *)((char *)v26 + v27);
    v30 = c;
  }
  else
  {
    data = 0;
    v28 = &data;
    v30 = c;
    v29 = 4;
  }
  return CC_SHA256_Update(v30, v28, v29);
}

uint64_t AirReflection::Node::node_as_PrimitiveCulledRet(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 143362) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::PrimitiveCulledRet::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  CC_LONG v13;
  CC_SHA256_CTX *v14;
  unsigned __int16 *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  int *v19;
  CC_LONG v20;
  CC_SHA256_CTX *v21;
  char data;
  char v24;
  int v25;
  int v26;

  CC_SHA256_Update(c, "AirReflection.PrimitiveCulledRet", 0x20u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LOBYTE(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LOBYTE(v7) = *((_BYTE *)a1 + v7) != 0;
  }
  v24 = v7;
  CC_SHA256_Update(c, &v24, 1u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9);
    v11 = *v10;
    v12 = (int *)((char *)v10 + v11 + 4);
    v13 = *(unsigned int *)((char *)v10 + v11);
    v14 = c;
  }
  else
  {
    v25 = 0;
    v12 = &v25;
    v14 = c;
    v13 = 4;
  }
  CC_SHA256_Update(v14, v12, v13);
  v15 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v15 >= 0xBu && (v16 = v15[5]) != 0)
  {
    v17 = (unsigned int *)((char *)a1 + v16);
    v18 = *v17;
    v19 = (int *)((char *)v17 + v18 + 4);
    v20 = *(unsigned int *)((char *)v17 + v18);
    v21 = c;
  }
  else
  {
    v26 = 0;
    v19 = &v26;
    v21 = c;
    v20 = 4;
  }
  return CC_SHA256_Update(v21, v19, v20);
}

uint64_t AirReflection::Node::node_as_PrimitiveIDRet(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 143363) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::PrimitiveIDRet::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  CC_LONG v13;
  CC_SHA256_CTX *v14;
  unsigned __int16 *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  int *v19;
  CC_LONG v20;
  CC_SHA256_CTX *v21;
  char data;
  char v24;
  int v25;
  int v26;

  CC_SHA256_Update(c, "AirReflection.PrimitiveIDRet", 0x1Cu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LOBYTE(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LOBYTE(v7) = *((_BYTE *)a1 + v7) != 0;
  }
  v24 = v7;
  CC_SHA256_Update(c, &v24, 1u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9);
    v11 = *v10;
    v12 = (int *)((char *)v10 + v11 + 4);
    v13 = *(unsigned int *)((char *)v10 + v11);
    v14 = c;
  }
  else
  {
    v25 = 0;
    v12 = &v25;
    v14 = c;
    v13 = 4;
  }
  CC_SHA256_Update(v14, v12, v13);
  v15 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v15 >= 0xBu && (v16 = v15[5]) != 0)
  {
    v17 = (unsigned int *)((char *)a1 + v16);
    v18 = *v17;
    v19 = (int *)((char *)v17 + v18 + 4);
    v20 = *(unsigned int *)((char *)v17 + v18);
    v21 = c;
  }
  else
  {
    v26 = 0;
    v19 = &v26;
    v21 = c;
    v20 = 4;
  }
  return CC_SHA256_Update(v21, v19, v20);
}

uint64_t AirReflection::Node::node_as_BufferArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 5 || !v1[2])
    return 0;
  v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 0x40000)
  {
    v3 = v1[3];
    if (v1[3])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t AirReflection::BufferArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 v7;
  uint64_t v8;
  unsigned __int16 *v9;
  unsigned __int16 v10;
  uint64_t v11;
  unsigned __int16 *v12;
  unsigned __int16 v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  int v19;
  unsigned __int16 *v20;
  unsigned __int16 v21;
  uint64_t v22;
  unsigned __int16 *v23;
  unsigned __int16 v24;
  uint64_t v25;
  unsigned __int16 *v26;
  unsigned __int16 v27;
  uint64_t v28;
  unsigned __int16 *v29;
  unsigned __int16 v30;
  uint64_t v31;
  unsigned __int16 *v32;
  uint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  int *p_data;
  CC_LONG v37;
  CC_SHA256_CTX *v38;
  unsigned __int16 *v39;
  uint64_t v40;
  unsigned int *v41;
  uint64_t v42;
  int *v43;
  CC_LONG v44;
  CC_SHA256_CTX *v45;
  unsigned __int16 *v46;
  uint64_t v47;
  unsigned __int16 *v48;
  unsigned __int16 v49;
  uint64_t v50;
  int data;

  CC_SHA256_Update(c, "AirReflection.BufferArg", 0x17u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = v7;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v8);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 >= 9u && (v10 = v9[4]) != 0)
  {
    v11 = v10;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v11);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 >= 0xBu && (v13 = v12[5]) != 0)
  {
    v14 = v13;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v14);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v15 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v15 < 0xDu)
  {
    LODWORD(v16) = 0;
  }
  else
  {
    v16 = v15[6];
    if (v16)
      LODWORD(v16) = *((unsigned __int8 *)a1 + v16);
  }
  data = v16;
  CC_SHA256_Update(c, &data, 4u);
  v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 >= 0xFu && (v18 = v17[7]) != 0)
    v19 = *((unsigned __int8 *)a1 + v18);
  else
    v19 = 1;
  data = v19;
  CC_SHA256_Update(c, &data, 4u);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 >= 0x11u && (v21 = v20[8]) != 0)
  {
    v22 = v21;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v22);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v23 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v23 >= 0x13u && (v24 = v23[9]) != 0)
  {
    v25 = v24;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v25);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v26 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v26 >= 0x15u && (v27 = v26[10]) != 0)
  {
    v28 = v27;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v28);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v29 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v29 >= 0x17u && (v30 = v29[11]) != 0)
  {
    v31 = v30;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v31);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v32 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v32 >= 0x19u && (v33 = v32[12]) != 0)
  {
    v34 = (unsigned int *)((char *)a1 + v33);
    v35 = *v34;
    p_data = (int *)((char *)v34 + v35 + 4);
    v37 = *(unsigned int *)((char *)v34 + v35);
    v38 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v38 = c;
    v37 = 4;
  }
  CC_SHA256_Update(v38, p_data, v37);
  v39 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v39 >= 0x1Bu && (v40 = v39[13]) != 0)
  {
    v41 = (unsigned int *)((char *)a1 + v40);
    v42 = *v41;
    v43 = (int *)((char *)v41 + v42 + 4);
    v44 = *(unsigned int *)((char *)v41 + v42);
    v45 = c;
  }
  else
  {
    data = 0;
    v43 = &data;
    v45 = c;
    v44 = 4;
  }
  CC_SHA256_Update(v45, v43, v44);
  v46 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v46 < 0x1Du)
  {
    LOBYTE(v47) = 0;
  }
  else
  {
    v47 = v46[14];
    if (v47)
      LOBYTE(v47) = *((_BYTE *)a1 + v47) != 0;
  }
  LOBYTE(data) = v47;
  CC_SHA256_Update(c, &data, 1u);
  v48 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v48 >= 0x1Fu && (v49 = v48[15]) != 0)
  {
    v50 = v49;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v50);
  }
  else
  {
    data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_SamplerArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 262145) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::SamplerArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 v7;
  uint64_t v8;
  unsigned __int16 *v9;
  unsigned __int16 v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  int *p_data;
  CC_LONG v17;
  CC_SHA256_CTX *v18;
  unsigned __int16 *v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  int *v23;
  CC_LONG v24;
  CC_SHA256_CTX *v25;
  unsigned __int16 *v26;
  uint64_t v27;
  int data;

  CC_SHA256_Update(c, "AirReflection.SamplerArg", 0x18u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = v7;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v8);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 >= 9u && (v10 = v9[4]) != 0)
  {
    v11 = v10;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v11);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 >= 0xBu && (v13 = v12[5]) != 0)
  {
    v14 = (unsigned int *)((char *)a1 + v13);
    v15 = *v14;
    p_data = (int *)((char *)v14 + v15 + 4);
    v17 = *(unsigned int *)((char *)v14 + v15);
    v18 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v18 = c;
    v17 = 4;
  }
  CC_SHA256_Update(v18, p_data, v17);
  v19 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v19 >= 0xDu && (v20 = v19[6]) != 0)
  {
    v21 = (unsigned int *)((char *)a1 + v20);
    v22 = *v21;
    v23 = (int *)((char *)v21 + v22 + 4);
    v24 = *(unsigned int *)((char *)v21 + v22);
    v25 = c;
  }
  else
  {
    data = 0;
    v23 = &data;
    v25 = c;
    v24 = 4;
  }
  CC_SHA256_Update(v25, v23, v24);
  v26 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v26 < 0xFu)
  {
    LOBYTE(v27) = 0;
  }
  else
  {
    v27 = v26[7];
    if (v27)
      LOBYTE(v27) = *((_BYTE *)a1 + v27) != 0;
  }
  LOBYTE(data) = v27;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t AirReflection::Node::node_as_TextureArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 262146) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::TextureArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 v7;
  uint64_t v8;
  unsigned __int16 *v9;
  unsigned __int16 v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  int *p_data;
  CC_LONG v22;
  CC_SHA256_CTX *v23;
  unsigned __int16 *v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  int *v28;
  CC_LONG v29;
  CC_SHA256_CTX *v30;
  unsigned __int16 *v31;
  uint64_t v32;
  int data;

  CC_SHA256_Update(c, "AirReflection.TextureArg", 0x18u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = v7;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v8);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 >= 9u && (v10 = v9[4]) != 0)
  {
    v11 = v10;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v11);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 < 0xBu)
  {
    LODWORD(v13) = 0;
  }
  else
  {
    v13 = v12[5];
    if (v13)
      LODWORD(v13) = *((unsigned __int8 *)a1 + v13);
  }
  data = v13;
  CC_SHA256_Update(c, &data, 4u);
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xDu && (v15 = v14[6]) != 0)
  {
    v16 = v15;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v16);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 >= 0xFu && (v18 = v17[7]) != 0)
  {
    v19 = (unsigned int *)((char *)a1 + v18);
    v20 = *v19;
    p_data = (int *)((char *)v19 + v20 + 4);
    v22 = *(unsigned int *)((char *)v19 + v20);
    v23 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v23 = c;
    v22 = 4;
  }
  CC_SHA256_Update(v23, p_data, v22);
  v24 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v24 >= 0x11u && (v25 = v24[8]) != 0)
  {
    v26 = (unsigned int *)((char *)a1 + v25);
    v27 = *v26;
    v28 = (int *)((char *)v26 + v27 + 4);
    v29 = *(unsigned int *)((char *)v26 + v27);
    v30 = c;
  }
  else
  {
    data = 0;
    v28 = &data;
    v30 = c;
    v29 = 4;
  }
  CC_SHA256_Update(v30, v28, v29);
  v31 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v31 < 0x13u)
  {
    LOBYTE(v32) = 0;
  }
  else
  {
    v32 = v31[9];
    if (v32)
      LOBYTE(v32) = *((_BYTE *)a1 + v32) != 0;
  }
  LOBYTE(data) = v32;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t AirReflection::Node::node_as_ConstantArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 262147) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ConstantArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 v7;
  uint64_t v8;
  unsigned __int16 *v9;
  unsigned __int16 v10;
  uint64_t v11;
  unsigned __int16 *v12;
  unsigned __int16 v13;
  uint64_t v14;
  unsigned __int16 *v15;
  unsigned __int16 v16;
  uint64_t v17;
  unsigned __int16 *v18;
  unsigned __int16 v19;
  uint64_t v20;
  unsigned __int16 *v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  int *p_data;
  CC_LONG v26;
  CC_SHA256_CTX *v27;
  unsigned __int16 *v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  int *v32;
  CC_LONG v33;
  CC_SHA256_CTX *v34;
  unsigned __int16 *v35;
  uint64_t v36;
  int data;

  CC_SHA256_Update(c, "AirReflection.ConstantArg", 0x19u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = v7;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v8);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 >= 9u && (v10 = v9[4]) != 0)
  {
    v11 = v10;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v11);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 >= 0xBu && (v13 = v12[5]) != 0)
  {
    v14 = v13;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v14);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v15 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v15 >= 0xDu && (v16 = v15[6]) != 0)
  {
    v17 = v16;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v17);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v18 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v18 >= 0xFu && (v19 = v18[7]) != 0)
  {
    v20 = v19;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v20);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v21 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v21 >= 0x11u && (v22 = v21[8]) != 0)
  {
    v23 = (unsigned int *)((char *)a1 + v22);
    v24 = *v23;
    p_data = (int *)((char *)v23 + v24 + 4);
    v26 = *(unsigned int *)((char *)v23 + v24);
    v27 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v27 = c;
    v26 = 4;
  }
  CC_SHA256_Update(v27, p_data, v26);
  v28 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v28 >= 0x13u && (v29 = v28[9]) != 0)
  {
    v30 = (unsigned int *)((char *)a1 + v29);
    v31 = *v30;
    v32 = (int *)((char *)v30 + v31 + 4);
    v33 = *(unsigned int *)((char *)v30 + v31);
    v34 = c;
  }
  else
  {
    data = 0;
    v32 = &data;
    v34 = c;
    v33 = 4;
  }
  CC_SHA256_Update(v34, v32, v33);
  v35 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v35 < 0x15u)
  {
    LOBYTE(v36) = 0;
  }
  else
  {
    v36 = v35[10];
    if (v36)
      LOBYTE(v36) = *((_BYTE *)a1 + v36) != 0;
  }
  LOBYTE(data) = v36;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t AirReflection::Node::node_as_IndirectBufferArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 262148) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::IndirectBufferArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 v7;
  uint64_t v8;
  unsigned __int16 *v9;
  unsigned __int16 v10;
  uint64_t v11;
  unsigned __int16 *v12;
  unsigned __int16 v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  int v19;
  unsigned __int16 *v20;
  unsigned __int16 v21;
  uint64_t v22;
  unsigned __int16 *v23;
  unsigned __int16 v24;
  uint64_t v25;
  unsigned __int16 *v26;
  unsigned __int16 v27;
  uint64_t v28;
  unsigned __int16 *v29;
  unsigned __int16 v30;
  uint64_t v31;
  unsigned __int16 *v32;
  uint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  int *p_data;
  CC_LONG v37;
  CC_SHA256_CTX *v38;
  unsigned __int16 *v39;
  uint64_t v40;
  unsigned int *v41;
  uint64_t v42;
  int *v43;
  CC_LONG v44;
  CC_SHA256_CTX *v45;
  unsigned __int16 *v46;
  uint64_t v47;
  unsigned __int16 *v48;
  unsigned __int16 v49;
  uint64_t v50;
  int data;

  CC_SHA256_Update(c, "AirReflection.IndirectBufferArg", 0x1Fu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = v7;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v8);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 >= 9u && (v10 = v9[4]) != 0)
  {
    v11 = v10;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v11);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 >= 0xBu && (v13 = v12[5]) != 0)
  {
    v14 = v13;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v14);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v15 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v15 < 0xDu)
  {
    LODWORD(v16) = 0;
  }
  else
  {
    v16 = v15[6];
    if (v16)
      LODWORD(v16) = *((unsigned __int8 *)a1 + v16);
  }
  data = v16;
  CC_SHA256_Update(c, &data, 4u);
  v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 >= 0xFu && (v18 = v17[7]) != 0)
    v19 = *((unsigned __int8 *)a1 + v18);
  else
    v19 = 1;
  data = v19;
  CC_SHA256_Update(c, &data, 4u);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 >= 0x11u && (v21 = v20[8]) != 0)
  {
    v22 = v21;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v22);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v23 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v23 >= 0x13u && (v24 = v23[9]) != 0)
  {
    v25 = v24;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v25);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v26 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v26 >= 0x15u && (v27 = v26[10]) != 0)
  {
    v28 = v27;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v28);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v29 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v29 >= 0x17u && (v30 = v29[11]) != 0)
  {
    v31 = v30;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v31);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v32 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v32 >= 0x19u && (v33 = v32[12]) != 0)
  {
    v34 = (unsigned int *)((char *)a1 + v33);
    v35 = *v34;
    p_data = (int *)((char *)v34 + v35 + 4);
    v37 = *(unsigned int *)((char *)v34 + v35);
    v38 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v38 = c;
    v37 = 4;
  }
  CC_SHA256_Update(v38, p_data, v37);
  v39 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v39 >= 0x1Bu && (v40 = v39[13]) != 0)
  {
    v41 = (unsigned int *)((char *)a1 + v40);
    v42 = *v41;
    v43 = (int *)((char *)v41 + v42 + 4);
    v44 = *(unsigned int *)((char *)v41 + v42);
    v45 = c;
  }
  else
  {
    data = 0;
    v43 = &data;
    v45 = c;
    v44 = 4;
  }
  CC_SHA256_Update(v45, v43, v44);
  v46 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v46 < 0x1Du)
  {
    LOBYTE(v47) = 0;
  }
  else
  {
    v47 = v46[14];
    if (v47)
      LOBYTE(v47) = *((_BYTE *)a1 + v47) != 0;
  }
  LOBYTE(data) = v47;
  CC_SHA256_Update(c, &data, 1u);
  v48 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v48 >= 0x1Fu && (v49 = v48[15]) != 0)
  {
    v50 = v49;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v50);
  }
  else
  {
    data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_IndirectConstantArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 262149) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::IndirectConstantArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 v7;
  uint64_t v8;
  unsigned __int16 *v9;
  unsigned __int16 v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  int *p_data;
  CC_LONG v17;
  CC_SHA256_CTX *v18;
  unsigned __int16 *v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  int *v23;
  CC_LONG v24;
  CC_SHA256_CTX *v25;
  unsigned __int16 *v26;
  uint64_t v27;
  int data;

  CC_SHA256_Update(c, "AirReflection.IndirectConstantArg", 0x21u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = v7;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v8);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 >= 9u && (v10 = v9[4]) != 0)
  {
    v11 = v10;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v11);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 >= 0xBu && (v13 = v12[5]) != 0)
  {
    v14 = (unsigned int *)((char *)a1 + v13);
    v15 = *v14;
    p_data = (int *)((char *)v14 + v15 + 4);
    v17 = *(unsigned int *)((char *)v14 + v15);
    v18 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v18 = c;
    v17 = 4;
  }
  CC_SHA256_Update(v18, p_data, v17);
  v19 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v19 >= 0xDu && (v20 = v19[6]) != 0)
  {
    v21 = (unsigned int *)((char *)a1 + v20);
    v22 = *v21;
    v23 = (int *)((char *)v21 + v22 + 4);
    v24 = *(unsigned int *)((char *)v21 + v22);
    v25 = c;
  }
  else
  {
    data = 0;
    v23 = &data;
    v25 = c;
    v24 = 4;
  }
  CC_SHA256_Update(v25, v23, v24);
  v26 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v26 < 0xFu)
  {
    LOBYTE(v27) = 0;
  }
  else
  {
    v27 = v26[7];
    if (v27)
      LOBYTE(v27) = *((_BYTE *)a1 + v27) != 0;
  }
  LOBYTE(data) = v27;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t AirReflection::Node::node_as_CommandBufferArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 262150) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::CommandBufferArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 v7;
  uint64_t v8;
  unsigned __int16 *v9;
  unsigned __int16 v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  int *p_data;
  CC_LONG v17;
  CC_SHA256_CTX *v18;
  unsigned __int16 *v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  int *v23;
  CC_LONG v24;
  CC_SHA256_CTX *v25;
  unsigned __int16 *v26;
  uint64_t v27;
  int data;

  CC_SHA256_Update(c, "AirReflection.CommandBufferArg", 0x1Eu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = v7;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v8);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 >= 9u && (v10 = v9[4]) != 0)
  {
    v11 = v10;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v11);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 >= 0xBu && (v13 = v12[5]) != 0)
  {
    v14 = (unsigned int *)((char *)a1 + v13);
    v15 = *v14;
    p_data = (int *)((char *)v14 + v15 + 4);
    v17 = *(unsigned int *)((char *)v14 + v15);
    v18 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v18 = c;
    v17 = 4;
  }
  CC_SHA256_Update(v18, p_data, v17);
  v19 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v19 >= 0xDu && (v20 = v19[6]) != 0)
  {
    v21 = (unsigned int *)((char *)a1 + v20);
    v22 = *v21;
    v23 = (int *)((char *)v21 + v22 + 4);
    v24 = *(unsigned int *)((char *)v21 + v22);
    v25 = c;
  }
  else
  {
    data = 0;
    v23 = &data;
    v25 = c;
    v24 = 4;
  }
  CC_SHA256_Update(v25, v23, v24);
  v26 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v26 < 0xFu)
  {
    LOBYTE(v27) = 0;
  }
  else
  {
    v27 = v26[7];
    if (v27)
      LOBYTE(v27) = *((_BYTE *)a1 + v27) != 0;
  }
  LOBYTE(data) = v27;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t AirReflection::Node::node_as_ComputePipelineStateArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 262151) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ComputePipelineStateArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 v7;
  uint64_t v8;
  unsigned __int16 *v9;
  unsigned __int16 v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  int *p_data;
  CC_LONG v17;
  CC_SHA256_CTX *v18;
  unsigned __int16 *v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  int *v23;
  CC_LONG v24;
  CC_SHA256_CTX *v25;
  unsigned __int16 *v26;
  uint64_t v27;
  int data;

  CC_SHA256_Update(c, "AirReflection.ComputePipelineStateArg", 0x25u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = v7;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v8);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 >= 9u && (v10 = v9[4]) != 0)
  {
    v11 = v10;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v11);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 >= 0xBu && (v13 = v12[5]) != 0)
  {
    v14 = (unsigned int *)((char *)a1 + v13);
    v15 = *v14;
    p_data = (int *)((char *)v14 + v15 + 4);
    v17 = *(unsigned int *)((char *)v14 + v15);
    v18 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v18 = c;
    v17 = 4;
  }
  CC_SHA256_Update(v18, p_data, v17);
  v19 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v19 >= 0xDu && (v20 = v19[6]) != 0)
  {
    v21 = (unsigned int *)((char *)a1 + v20);
    v22 = *v21;
    v23 = (int *)((char *)v21 + v22 + 4);
    v24 = *(unsigned int *)((char *)v21 + v22);
    v25 = c;
  }
  else
  {
    data = 0;
    v23 = &data;
    v25 = c;
    v24 = 4;
  }
  CC_SHA256_Update(v25, v23, v24);
  v26 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v26 < 0xFu)
  {
    LOBYTE(v27) = 0;
  }
  else
  {
    v27 = v26[7];
    if (v27)
      LOBYTE(v27) = *((_BYTE *)a1 + v27) != 0;
  }
  LOBYTE(data) = v27;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t AirReflection::Node::node_as_RenderPipelineStateArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 262152) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::RenderPipelineStateArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 v7;
  uint64_t v8;
  unsigned __int16 *v9;
  unsigned __int16 v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  int *p_data;
  CC_LONG v17;
  CC_SHA256_CTX *v18;
  unsigned __int16 *v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  int *v23;
  CC_LONG v24;
  CC_SHA256_CTX *v25;
  unsigned __int16 *v26;
  uint64_t v27;
  int data;

  CC_SHA256_Update(c, "AirReflection.RenderPipelineStateArg", 0x24u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = v7;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v8);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 >= 9u && (v10 = v9[4]) != 0)
  {
    v11 = v10;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v11);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 >= 0xBu && (v13 = v12[5]) != 0)
  {
    v14 = (unsigned int *)((char *)a1 + v13);
    v15 = *v14;
    p_data = (int *)((char *)v14 + v15 + 4);
    v17 = *(unsigned int *)((char *)v14 + v15);
    v18 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v18 = c;
    v17 = 4;
  }
  CC_SHA256_Update(v18, p_data, v17);
  v19 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v19 >= 0xDu && (v20 = v19[6]) != 0)
  {
    v21 = (unsigned int *)((char *)a1 + v20);
    v22 = *v21;
    v23 = (int *)((char *)v21 + v22 + 4);
    v24 = *(unsigned int *)((char *)v21 + v22);
    v25 = c;
  }
  else
  {
    data = 0;
    v23 = &data;
    v25 = c;
    v24 = 4;
  }
  CC_SHA256_Update(v25, v23, v24);
  v26 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v26 < 0xFu)
  {
    LOBYTE(v27) = 0;
  }
  else
  {
    v27 = v26[7];
    if (v27)
      LOBYTE(v27) = *((_BYTE *)a1 + v27) != 0;
  }
  LOBYTE(data) = v27;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t AirReflection::Node::node_as_VisibleFunctionTableArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 262153) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::VisibleFunctionTableArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 v7;
  uint64_t v8;
  unsigned __int16 *v9;
  unsigned __int16 v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  int *p_data;
  CC_LONG v22;
  CC_SHA256_CTX *v23;
  unsigned __int16 *v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  int *v28;
  CC_LONG v29;
  CC_SHA256_CTX *v30;
  unsigned __int16 *v31;
  uint64_t v32;
  int data;

  CC_SHA256_Update(c, "AirReflection.VisibleFunctionTableArg", 0x25u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = v7;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v8);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 >= 9u && (v10 = v9[4]) != 0)
  {
    v11 = v10;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v11);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 < 0xBu)
  {
    LODWORD(v13) = 0;
  }
  else
  {
    v13 = v12[5];
    if (v13)
      LODWORD(v13) = *((unsigned __int8 *)a1 + v13);
  }
  data = v13;
  CC_SHA256_Update(c, &data, 4u);
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xDu && (v15 = v14[6]) != 0)
  {
    v16 = v15;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v16);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 >= 0xFu && (v18 = v17[7]) != 0)
  {
    v19 = (unsigned int *)((char *)a1 + v18);
    v20 = *v19;
    p_data = (int *)((char *)v19 + v20 + 4);
    v22 = *(unsigned int *)((char *)v19 + v20);
    v23 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v23 = c;
    v22 = 4;
  }
  CC_SHA256_Update(v23, p_data, v22);
  v24 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v24 >= 0x11u && (v25 = v24[8]) != 0)
  {
    v26 = (unsigned int *)((char *)a1 + v25);
    v27 = *v26;
    v28 = (int *)((char *)v26 + v27 + 4);
    v29 = *(unsigned int *)((char *)v26 + v27);
    v30 = c;
  }
  else
  {
    data = 0;
    v28 = &data;
    v30 = c;
    v29 = 4;
  }
  CC_SHA256_Update(v30, v28, v29);
  v31 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v31 < 0x13u)
  {
    LOBYTE(v32) = 0;
  }
  else
  {
    v32 = v31[9];
    if (v32)
      LOBYTE(v32) = *((_BYTE *)a1 + v32) != 0;
  }
  LOBYTE(data) = v32;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t AirReflection::Node::node_as_IntersectionFunctionTableArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 262154) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::IntersectionFunctionTableArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 v7;
  uint64_t v8;
  unsigned __int16 *v9;
  unsigned __int16 v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  int *p_data;
  CC_LONG v22;
  CC_SHA256_CTX *v23;
  unsigned __int16 *v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  int *v28;
  CC_LONG v29;
  CC_SHA256_CTX *v30;
  unsigned __int16 *v31;
  uint64_t v32;
  int data;

  CC_SHA256_Update(c, "AirReflection.IntersectionFunctionTableArg", 0x2Au);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = v7;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v8);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 >= 9u && (v10 = v9[4]) != 0)
  {
    v11 = v10;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v11);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 < 0xBu)
  {
    LODWORD(v13) = 0;
  }
  else
  {
    v13 = v12[5];
    if (v13)
      LODWORD(v13) = *((unsigned __int8 *)a1 + v13);
  }
  data = v13;
  CC_SHA256_Update(c, &data, 4u);
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xDu && (v15 = v14[6]) != 0)
  {
    v16 = v15;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v16);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 >= 0xFu && (v18 = v17[7]) != 0)
  {
    v19 = (unsigned int *)((char *)a1 + v18);
    v20 = *v19;
    p_data = (int *)((char *)v19 + v20 + 4);
    v22 = *(unsigned int *)((char *)v19 + v20);
    v23 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v23 = c;
    v22 = 4;
  }
  CC_SHA256_Update(v23, p_data, v22);
  v24 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v24 >= 0x11u && (v25 = v24[8]) != 0)
  {
    v26 = (unsigned int *)((char *)a1 + v25);
    v27 = *v26;
    v28 = (int *)((char *)v26 + v27 + 4);
    v29 = *(unsigned int *)((char *)v26 + v27);
    v30 = c;
  }
  else
  {
    data = 0;
    v28 = &data;
    v30 = c;
    v29 = 4;
  }
  CC_SHA256_Update(v30, v28, v29);
  v31 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v31 < 0x13u)
  {
    LOBYTE(v32) = 0;
  }
  else
  {
    v32 = v31[9];
    if (v32)
      LOBYTE(v32) = *((_BYTE *)a1 + v32) != 0;
  }
  LOBYTE(data) = v32;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t AirReflection::Node::node_as_InstanceAccelerationStructureArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 262155) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::InstanceAccelerationStructureArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 v7;
  uint64_t v8;
  unsigned __int16 *v9;
  unsigned __int16 v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  int *p_data;
  CC_LONG v22;
  CC_SHA256_CTX *v23;
  unsigned __int16 *v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  int *v28;
  CC_LONG v29;
  CC_SHA256_CTX *v30;
  unsigned __int16 *v31;
  uint64_t v32;
  int data;

  CC_SHA256_Update(c, "AirReflection.InstanceAccelerationStructureArg", 0x2Eu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = v7;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v8);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 >= 9u && (v10 = v9[4]) != 0)
  {
    v11 = v10;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v11);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 < 0xBu)
  {
    LODWORD(v13) = 0;
  }
  else
  {
    v13 = v12[5];
    if (v13)
      LODWORD(v13) = *((unsigned __int8 *)a1 + v13);
  }
  data = v13;
  CC_SHA256_Update(c, &data, 4u);
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xDu && (v15 = v14[6]) != 0)
  {
    v16 = v15;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v16);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 >= 0xFu && (v18 = v17[7]) != 0)
  {
    v19 = (unsigned int *)((char *)a1 + v18);
    v20 = *v19;
    p_data = (int *)((char *)v19 + v20 + 4);
    v22 = *(unsigned int *)((char *)v19 + v20);
    v23 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v23 = c;
    v22 = 4;
  }
  CC_SHA256_Update(v23, p_data, v22);
  v24 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v24 >= 0x11u && (v25 = v24[8]) != 0)
  {
    v26 = (unsigned int *)((char *)a1 + v25);
    v27 = *v26;
    v28 = (int *)((char *)v26 + v27 + 4);
    v29 = *(unsigned int *)((char *)v26 + v27);
    v30 = c;
  }
  else
  {
    data = 0;
    v28 = &data;
    v30 = c;
    v29 = 4;
  }
  CC_SHA256_Update(v30, v28, v29);
  v31 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v31 < 0x13u)
  {
    LOBYTE(v32) = 0;
  }
  else
  {
    v32 = v31[9];
    if (v32)
      LOBYTE(v32) = *((_BYTE *)a1 + v32) != 0;
  }
  LOBYTE(data) = v32;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t AirReflection::Node::node_as_PrimitiveAccelerationStructureArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 262156) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::PrimitiveAccelerationStructureArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 v7;
  uint64_t v8;
  unsigned __int16 *v9;
  unsigned __int16 v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  int *p_data;
  CC_LONG v22;
  CC_SHA256_CTX *v23;
  unsigned __int16 *v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  int *v28;
  CC_LONG v29;
  CC_SHA256_CTX *v30;
  unsigned __int16 *v31;
  uint64_t v32;
  int data;

  CC_SHA256_Update(c, "AirReflection.PrimitiveAccelerationStructureArg", 0x2Fu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = v7;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v8);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 >= 9u && (v10 = v9[4]) != 0)
  {
    v11 = v10;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v11);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 < 0xBu)
  {
    LODWORD(v13) = 0;
  }
  else
  {
    v13 = v12[5];
    if (v13)
      LODWORD(v13) = *((unsigned __int8 *)a1 + v13);
  }
  data = v13;
  CC_SHA256_Update(c, &data, 4u);
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xDu && (v15 = v14[6]) != 0)
  {
    v16 = v15;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v16);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 >= 0xFu && (v18 = v17[7]) != 0)
  {
    v19 = (unsigned int *)((char *)a1 + v18);
    v20 = *v19;
    p_data = (int *)((char *)v19 + v20 + 4);
    v22 = *(unsigned int *)((char *)v19 + v20);
    v23 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v23 = c;
    v22 = 4;
  }
  CC_SHA256_Update(v23, p_data, v22);
  v24 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v24 >= 0x11u && (v25 = v24[8]) != 0)
  {
    v26 = (unsigned int *)((char *)a1 + v25);
    v27 = *v26;
    v28 = (int *)((char *)v26 + v27 + 4);
    v29 = *(unsigned int *)((char *)v26 + v27);
    v30 = c;
  }
  else
  {
    data = 0;
    v28 = &data;
    v30 = c;
    v29 = 4;
  }
  CC_SHA256_Update(v30, v28, v29);
  v31 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v31 < 0x13u)
  {
    LOBYTE(v32) = 0;
  }
  else
  {
    v32 = v31[9];
    if (v32)
      LOBYTE(v32) = *((_BYTE *)a1 + v32) != 0;
  }
  LOBYTE(data) = v32;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t AirReflection::Node::node_as_BufferStrideArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 262157) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::BufferStrideArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 v7;
  uint64_t v8;
  unsigned __int16 *v9;
  unsigned __int16 v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  int *p_data;
  CC_LONG v17;
  CC_SHA256_CTX *v18;
  unsigned __int16 *v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  int *v23;
  CC_LONG v24;
  CC_SHA256_CTX *v25;
  unsigned __int16 *v26;
  uint64_t v27;
  int data;

  CC_SHA256_Update(c, "AirReflection.BufferStrideArg", 0x1Du);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = v7;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v8);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 >= 9u && (v10 = v9[4]) != 0)
  {
    v11 = v10;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v11);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 >= 0xBu && (v13 = v12[5]) != 0)
  {
    v14 = (unsigned int *)((char *)a1 + v13);
    v15 = *v14;
    p_data = (int *)((char *)v14 + v15 + 4);
    v17 = *(unsigned int *)((char *)v14 + v15);
    v18 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v18 = c;
    v17 = 4;
  }
  CC_SHA256_Update(v18, p_data, v17);
  v19 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v19 >= 0xDu && (v20 = v19[6]) != 0)
  {
    v21 = (unsigned int *)((char *)a1 + v20);
    v22 = *v21;
    v23 = (int *)((char *)v21 + v22 + 4);
    v24 = *(unsigned int *)((char *)v21 + v22);
    v25 = c;
  }
  else
  {
    data = 0;
    v23 = &data;
    v25 = c;
    v24 = 4;
  }
  CC_SHA256_Update(v25, v23, v24);
  v26 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v26 < 0xFu)
  {
    LOBYTE(v27) = 0;
  }
  else
  {
    v27 = v26[7];
    if (v27)
      LOBYTE(v27) = *((_BYTE *)a1 + v27) != 0;
  }
  LOBYTE(data) = v27;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t AirReflection::Node::node_as_ThreadPositionInGridArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 5 || !v1[2])
    return 0;
  v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 266240)
  {
    v3 = v1[3];
    if (v1[3])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t AirReflection::ThreadPositionInGridArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.ThreadPositionInGridArg", 0x25u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_ThreadsPerGridArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266241) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ThreadsPerGridArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.ThreadsPerGridArg", 0x1Fu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_ThreadgroupPositionInGridArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266242) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ThreadgroupPositionInGridArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.ThreadgroupPositionInGridArg", 0x2Au);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_ThreadgroupsPerGridArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266243) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ThreadgroupsPerGridArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.ThreadgroupsPerGridArg", 0x24u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_ThreadPositionInThreadgroupArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266244) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ThreadPositionInThreadgroupArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.ThreadPositionInThreadgroupArg", 0x2Cu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_ThreadsPerThreadgroupArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266245) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ThreadsPerThreadgroupArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.ThreadsPerThreadgroupArg", 0x26u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_DispatchThreadsPerThreadgroupArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266246) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::DispatchThreadsPerThreadgroupArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.DispatchThreadsPerThreadgroupArg", 0x2Eu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_ThreadIndexInThreadgroupArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266247) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ThreadIndexInThreadgroupArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.ThreadIndexInThreadgroupArg", 0x29u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_ThreadExecutionWidthArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266248) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ThreadExecutionWidthArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.ThreadExecutionWidthArg", 0x25u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_StageInArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266249) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::StageInArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 v7;
  uint64_t v8;
  unsigned __int16 *v9;
  unsigned __int16 v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  int *p_data;
  CC_LONG v17;
  CC_SHA256_CTX *v18;
  unsigned __int16 *v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  int *v23;
  CC_LONG v24;
  CC_SHA256_CTX *v25;
  unsigned __int16 *v26;
  uint64_t v27;
  int data;

  CC_SHA256_Update(c, "AirReflection.StageInArg", 0x18u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = v7;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v8);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 >= 9u && (v10 = v9[4]) != 0)
  {
    v11 = v10;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v11);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 >= 0xBu && (v13 = v12[5]) != 0)
  {
    v14 = (unsigned int *)((char *)a1 + v13);
    v15 = *v14;
    p_data = (int *)((char *)v14 + v15 + 4);
    v17 = *(unsigned int *)((char *)v14 + v15);
    v18 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v18 = c;
    v17 = 4;
  }
  CC_SHA256_Update(v18, p_data, v17);
  v19 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v19 >= 0xDu && (v20 = v19[6]) != 0)
  {
    v21 = (unsigned int *)((char *)a1 + v20);
    v22 = *v21;
    v23 = (int *)((char *)v21 + v22 + 4);
    v24 = *(unsigned int *)((char *)v21 + v22);
    v25 = c;
  }
  else
  {
    data = 0;
    v23 = &data;
    v25 = c;
    v24 = 4;
  }
  CC_SHA256_Update(v25, v23, v24);
  v26 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v26 < 0xFu)
  {
    LOBYTE(v27) = 0;
  }
  else
  {
    v27 = v26[7];
    if (v27)
      LOBYTE(v27) = *((_BYTE *)a1 + v27) != 0;
  }
  LOBYTE(data) = v27;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t AirReflection::Node::node_as_StageInGridOriginArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266250) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::StageInGridOriginArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.StageInGridOriginArg", 0x22u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_StageInGridSizeArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266251) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::StageInGridSizeArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.StageInGridSizeArg", 0x20u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_ThreadIndexInSimdgroupArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266252) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ThreadIndexInSimdgroupArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.ThreadIndexInSimdgroupArg", 0x27u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_ThreadsPerSimdgroupArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266253) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ThreadsPerSimdgroupArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.ThreadsPerSimdgroupArg", 0x24u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_SimdgroupIndexInThreadgroupArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266254) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::SimdgroupIndexInThreadgroupArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.SimdgroupIndexInThreadgroupArg", 0x2Cu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_SimdgroupsPerThreadgroupArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266255) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::SimdgroupsPerThreadgroupArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.SimdgroupsPerThreadgroupArg", 0x29u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_DispatchSimdgroupsPerThreadgroupArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266256) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::DispatchSimdgroupsPerThreadgroupArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.DispatchSimdgroupsPerThreadgroupArg", 0x31u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_ThreadIndexInQuadgroupArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266257) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ThreadIndexInQuadgroupArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.ThreadIndexInQuadgroupArg", 0x27u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_QuadgroupIndexInThreadgroupArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266258) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::QuadgroupIndexInThreadgroupArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.QuadgroupIndexInThreadgroupArg", 0x2Cu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_QuadgroupsPerThreadgroupArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266259) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::QuadgroupsPerThreadgroupArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.QuadgroupsPerThreadgroupArg", 0x29u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_DispatchQuadgroupsPerThreadgroupArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266260) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::DispatchQuadgroupsPerThreadgroupArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.DispatchQuadgroupsPerThreadgroupArg", 0x31u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_BaseInstanceArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 5 || !v1[2])
    return 0;
  v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 270336)
  {
    v3 = v1[3];
    if (v1[3])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t AirReflection::BaseInstanceArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.BaseInstanceArg", 0x1Du);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_BaseVertexArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 270337) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::BaseVertexArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.BaseVertexArg", 0x1Bu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_InstanceIDArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 270338) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::InstanceIDArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.InstanceIDArg", 0x1Bu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_VertexIDArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 270339) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::VertexIDArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.VertexIDArg", 0x19u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_VertexInputArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 270340) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::VertexInputArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 v7;
  uint64_t v8;
  unsigned __int16 *v9;
  unsigned __int16 v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  int *p_data;
  CC_LONG v17;
  CC_SHA256_CTX *v18;
  unsigned __int16 *v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  int *v23;
  CC_LONG v24;
  CC_SHA256_CTX *v25;
  unsigned __int16 *v26;
  uint64_t v27;
  int data;

  CC_SHA256_Update(c, "AirReflection.VertexInputArg", 0x1Cu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = v7;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v8);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 >= 9u && (v10 = v9[4]) != 0)
  {
    v11 = v10;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v11);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 >= 0xBu && (v13 = v12[5]) != 0)
  {
    v14 = (unsigned int *)((char *)a1 + v13);
    v15 = *v14;
    p_data = (int *)((char *)v14 + v15 + 4);
    v17 = *(unsigned int *)((char *)v14 + v15);
    v18 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v18 = c;
    v17 = 4;
  }
  CC_SHA256_Update(v18, p_data, v17);
  v19 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v19 >= 0xDu && (v20 = v19[6]) != 0)
  {
    v21 = (unsigned int *)((char *)a1 + v20);
    v22 = *v21;
    v23 = (int *)((char *)v21 + v22 + 4);
    v24 = *(unsigned int *)((char *)v21 + v22);
    v25 = c;
  }
  else
  {
    data = 0;
    v23 = &data;
    v25 = c;
    v24 = 4;
  }
  CC_SHA256_Update(v25, v23, v24);
  v26 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v26 < 0xFu)
  {
    LOBYTE(v27) = 0;
  }
  else
  {
    v27 = v26[7];
    if (v27)
      LOBYTE(v27) = *((_BYTE *)a1 + v27) != 0;
  }
  LOBYTE(data) = v27;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t AirReflection::Node::node_as_ControlPointIndexBufferArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 270341) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ControlPointIndexBufferArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.ControlPointIndexBufferArg", 0x28u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_PatchIDArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 270342) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::PatchIDArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.PatchIDArg", 0x18u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_PositionInPatchArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 270343) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::PositionInPatchArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.PositionInPatchArg", 0x20u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_PatchInputArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 270344) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::PatchInputArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 v7;
  uint64_t v8;
  unsigned __int16 *v9;
  unsigned __int16 v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  int *p_data;
  CC_LONG v17;
  CC_SHA256_CTX *v18;
  unsigned __int16 *v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  int *v23;
  CC_LONG v24;
  CC_SHA256_CTX *v25;
  unsigned __int16 *v26;
  uint64_t v27;
  int data;

  CC_SHA256_Update(c, "AirReflection.PatchInputArg", 0x1Bu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = v7;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v8);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 >= 9u && (v10 = v9[4]) != 0)
  {
    v11 = v10;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v11);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 >= 0xBu && (v13 = v12[5]) != 0)
  {
    v14 = (unsigned int *)((char *)a1 + v13);
    v15 = *v14;
    p_data = (int *)((char *)v14 + v15 + 4);
    v17 = *(unsigned int *)((char *)v14 + v15);
    v18 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v18 = c;
    v17 = 4;
  }
  CC_SHA256_Update(v18, p_data, v17);
  v19 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v19 >= 0xDu && (v20 = v19[6]) != 0)
  {
    v21 = (unsigned int *)((char *)a1 + v20);
    v22 = *v21;
    v23 = (int *)((char *)v21 + v22 + 4);
    v24 = *(unsigned int *)((char *)v21 + v22);
    v25 = c;
  }
  else
  {
    data = 0;
    v23 = &data;
    v25 = c;
    v24 = 4;
  }
  CC_SHA256_Update(v25, v23, v24);
  v26 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v26 < 0xFu)
  {
    LOBYTE(v27) = 0;
  }
  else
  {
    v27 = v26[7];
    if (v27)
      LOBYTE(v27) = *((_BYTE *)a1 + v27) != 0;
  }
  LOBYTE(data) = v27;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t AirReflection::Node::node_as_ControlPointInputArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 270345) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ControlPointInputArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  int v11;
  unsigned __int16 *v12;
  uint64_t v13;
  char data;
  int v16;
  int v17;
  int v18;
  char v19;

  CC_SHA256_Update(c, "AirReflection.ControlPointInputArg", 0x22u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7 + *(unsigned int *)((char *)a1 + v7));
    v16 = *v8;
    CC_SHA256_Update(c, &v16, 4u);
    v9 = *v8;
    if ((_DWORD)v9)
    {
      v10 = (int *)(v8 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v11 = *v10++;
        v17 = v11;
        CC_SHA256_Update(c, &v17, 4u);
        --v9;
      }
      while (v9);
    }
  }
  else
  {
    v18 = 0;
    CC_SHA256_Update(c, &v18, 4u);
  }
  v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 < 9u)
  {
    LOBYTE(v13) = 0;
  }
  else
  {
    v13 = v12[4];
    if (v13)
      LOBYTE(v13) = *((_BYTE *)a1 + v13) != 0;
  }
  v19 = v13;
  return CC_SHA256_Update(c, &v19, 1u);
}

uint64_t AirReflection::Node::node_as_ControlPointField(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 270346) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ControlPointField::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 v7;
  uint64_t v8;
  unsigned __int16 *v9;
  unsigned __int16 v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  int *p_data;
  CC_LONG v17;
  CC_SHA256_CTX *v18;
  unsigned __int16 *v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  int *v23;
  CC_LONG v24;
  CC_SHA256_CTX *v25;
  unsigned __int16 *v26;
  uint64_t v27;
  int data;

  CC_SHA256_Update(c, "AirReflection.ControlPointField", 0x1Fu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = v7;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v8);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 >= 9u && (v10 = v9[4]) != 0)
  {
    v11 = v10;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v11);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 >= 0xBu && (v13 = v12[5]) != 0)
  {
    v14 = (unsigned int *)((char *)a1 + v13);
    v15 = *v14;
    p_data = (int *)((char *)v14 + v15 + 4);
    v17 = *(unsigned int *)((char *)v14 + v15);
    v18 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v18 = c;
    v17 = 4;
  }
  CC_SHA256_Update(v18, p_data, v17);
  v19 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v19 >= 0xDu && (v20 = v19[6]) != 0)
  {
    v21 = (unsigned int *)((char *)a1 + v20);
    v22 = *v21;
    v23 = (int *)((char *)v21 + v22 + 4);
    v24 = *(unsigned int *)((char *)v21 + v22);
    v25 = c;
  }
  else
  {
    data = 0;
    v23 = &data;
    v25 = c;
    v24 = 4;
  }
  CC_SHA256_Update(v25, v23, v24);
  v26 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v26 < 0xFu)
  {
    LOBYTE(v27) = 0;
  }
  else
  {
    v27 = v26[7];
    if (v27)
      LOBYTE(v27) = *((_BYTE *)a1 + v27) != 0;
  }
  LOBYTE(data) = v27;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t AirReflection::Node::node_as_AmplificationCountArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 270350) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::AmplificationCountArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.AmplificationCountArg", 0x23u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_AmplificationIDArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 270351) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::AmplificationIDArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.AmplificationIDArg", 0x20u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_FragmentInputArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 5 || !v1[2])
    return 0;
  v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 274432)
  {
    v3 = v1[3];
    if (v1[3])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t AirReflection::FragmentInputArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *p_data;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  unsigned __int16 v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  unsigned __int16 *v18;
  uint64_t v19;
  unsigned __int16 *v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  int *v24;
  CC_LONG v25;
  CC_SHA256_CTX *v26;
  unsigned __int16 *v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  int *v31;
  CC_LONG v32;
  CC_SHA256_CTX *v33;
  unsigned __int16 *v34;
  uint64_t v35;
  int data;

  CC_SHA256_Update(c, "AirReflection.FragmentInputArg", 0x1Eu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    p_data = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, p_data, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = v14;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v15);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v16 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v16 < 0xBu)
  {
    LODWORD(v17) = 0;
  }
  else
  {
    v17 = v16[5];
    if (v17)
      LODWORD(v17) = *((unsigned __int8 *)a1 + v17);
  }
  data = v17;
  CC_SHA256_Update(c, &data, 4u);
  v18 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v18 < 0xDu)
  {
    LODWORD(v19) = 0;
  }
  else
  {
    v19 = v18[6];
    if (v19)
      LODWORD(v19) = *((unsigned __int8 *)a1 + v19);
  }
  data = v19;
  CC_SHA256_Update(c, &data, 4u);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 >= 0xFu && (v21 = v20[7]) != 0)
  {
    v22 = (unsigned int *)((char *)a1 + v21);
    v23 = *v22;
    v24 = (int *)((char *)v22 + v23 + 4);
    v25 = *(unsigned int *)((char *)v22 + v23);
    v26 = c;
  }
  else
  {
    data = 0;
    v24 = &data;
    v26 = c;
    v25 = 4;
  }
  CC_SHA256_Update(v26, v24, v25);
  v27 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v27 >= 0x11u && (v28 = v27[8]) != 0)
  {
    v29 = (unsigned int *)((char *)a1 + v28);
    v30 = *v29;
    v31 = (int *)((char *)v29 + v30 + 4);
    v32 = *(unsigned int *)((char *)v29 + v30);
    v33 = c;
  }
  else
  {
    data = 0;
    v31 = &data;
    v33 = c;
    v32 = 4;
  }
  CC_SHA256_Update(v33, v31, v32);
  v34 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v34 < 0x13u)
  {
    LOBYTE(v35) = 0;
  }
  else
  {
    v35 = v34[9];
    if (v35)
      LOBYTE(v35) = *((_BYTE *)a1 + v35) != 0;
  }
  LOBYTE(data) = v35;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t AirReflection::Node::node_as_FrontFacingArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 274433) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::FrontFacingArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.FrontFacingArg", 0x1Cu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_PositionArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 274434) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::PositionArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  int v6;
  unsigned __int16 *v7;
  uint64_t v8;
  unsigned __int16 *v9;
  uint64_t v10;
  int v11;
  unsigned __int16 *v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  int *p_data;
  CC_LONG v17;
  CC_SHA256_CTX *v18;
  unsigned __int16 *v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  int *v23;
  CC_LONG v24;
  CC_SHA256_CTX *v25;
  unsigned __int16 *v26;
  uint64_t v27;
  int data;

  CC_SHA256_Update(c, "AirReflection.PositionArg", 0x19u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  LOBYTE(data) = v5;
  v6 = 1;
  CC_SHA256_Update(c, &data, 1u);
  v7 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v7 >= 7u)
  {
    v8 = v7[3];
    if (v8)
      v6 = *((unsigned __int8 *)a1 + v8);
  }
  data = v6;
  CC_SHA256_Update(c, &data, 4u);
  v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 >= 9u && (v10 = v9[4]) != 0)
    v11 = *((unsigned __int8 *)a1 + v10);
  else
    v11 = 3;
  data = v11;
  CC_SHA256_Update(c, &data, 4u);
  v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 >= 0xBu && (v13 = v12[5]) != 0)
  {
    v14 = (unsigned int *)((char *)a1 + v13);
    v15 = *v14;
    p_data = (int *)((char *)v14 + v15 + 4);
    v17 = *(unsigned int *)((char *)v14 + v15);
    v18 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v18 = c;
    v17 = 4;
  }
  CC_SHA256_Update(v18, p_data, v17);
  v19 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v19 >= 0xDu && (v20 = v19[6]) != 0)
  {
    v21 = (unsigned int *)((char *)a1 + v20);
    v22 = *v21;
    v23 = (int *)((char *)v21 + v22 + 4);
    v24 = *(unsigned int *)((char *)v21 + v22);
    v25 = c;
  }
  else
  {
    data = 0;
    v23 = &data;
    v25 = c;
    v24 = 4;
  }
  CC_SHA256_Update(v25, v23, v24);
  v26 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v26 < 0xFu)
  {
    LOBYTE(v27) = 0;
  }
  else
  {
    v27 = v26[7];
    if (v27)
      LOBYTE(v27) = *((_BYTE *)a1 + v27) != 0;
  }
  LOBYTE(data) = v27;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t AirReflection::Node::node_as_PointCoordArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 274435) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::PointCoordArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.PointCoordArg", 0x1Bu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_RenderTargetArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 274436) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::RenderTargetArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 v7;
  uint64_t v8;
  unsigned __int16 *v9;
  unsigned __int16 v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  int *p_data;
  CC_LONG v17;
  CC_SHA256_CTX *v18;
  unsigned __int16 *v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  int *v23;
  CC_LONG v24;
  CC_SHA256_CTX *v25;
  unsigned __int16 *v26;
  uint64_t v27;
  int data;

  CC_SHA256_Update(c, "AirReflection.RenderTargetArg", 0x1Du);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = v7;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v8);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 >= 9u && (v10 = v9[4]) != 0)
  {
    v11 = v10;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v11);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 >= 0xBu && (v13 = v12[5]) != 0)
  {
    v14 = (unsigned int *)((char *)a1 + v13);
    v15 = *v14;
    p_data = (int *)((char *)v14 + v15 + 4);
    v17 = *(unsigned int *)((char *)v14 + v15);
    v18 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v18 = c;
    v17 = 4;
  }
  CC_SHA256_Update(v18, p_data, v17);
  v19 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v19 >= 0xDu && (v20 = v19[6]) != 0)
  {
    v21 = (unsigned int *)((char *)a1 + v20);
    v22 = *v21;
    v23 = (int *)((char *)v21 + v22 + 4);
    v24 = *(unsigned int *)((char *)v21 + v22);
    v25 = c;
  }
  else
  {
    data = 0;
    v23 = &data;
    v25 = c;
    v24 = 4;
  }
  CC_SHA256_Update(v25, v23, v24);
  v26 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v26 < 0xFu)
  {
    LOBYTE(v27) = 0;
  }
  else
  {
    v27 = v26[7];
    if (v27)
      LOBYTE(v27) = *((_BYTE *)a1 + v27) != 0;
  }
  LOBYTE(data) = v27;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t AirReflection::Node::node_as_RenderTargetArrayIndexArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 274437) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::RenderTargetArrayIndexArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.RenderTargetArrayIndexArg", 0x27u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_SampleIDArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 274438) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::SampleIDArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.SampleIDArg", 0x19u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_SampleMaskArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 274439) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::SampleMaskArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  CC_LONG v13;
  CC_SHA256_CTX *v14;
  unsigned __int16 *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  int *v19;
  CC_LONG v20;
  CC_SHA256_CTX *v21;
  unsigned __int16 *v22;
  uint64_t v23;
  char data;
  char v26;
  int v27;
  int v28;
  char v29;

  CC_SHA256_Update(c, "AirReflection.SampleMaskArg", 0x1Bu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LOBYTE(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LOBYTE(v7) = *((_BYTE *)a1 + v7) != 0;
  }
  v26 = v7;
  CC_SHA256_Update(c, &v26, 1u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9);
    v11 = *v10;
    v12 = (int *)((char *)v10 + v11 + 4);
    v13 = *(unsigned int *)((char *)v10 + v11);
    v14 = c;
  }
  else
  {
    v27 = 0;
    v12 = &v27;
    v14 = c;
    v13 = 4;
  }
  CC_SHA256_Update(v14, v12, v13);
  v15 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v15 >= 0xBu && (v16 = v15[5]) != 0)
  {
    v17 = (unsigned int *)((char *)a1 + v16);
    v18 = *v17;
    v19 = (int *)((char *)v17 + v18 + 4);
    v20 = *(unsigned int *)((char *)v17 + v18);
    v21 = c;
  }
  else
  {
    v28 = 0;
    v19 = &v28;
    v21 = c;
    v20 = 4;
  }
  CC_SHA256_Update(v21, v19, v20);
  v22 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v22 < 0xDu)
  {
    LOBYTE(v23) = 0;
  }
  else
  {
    v23 = v22[6];
    if (v23)
      LOBYTE(v23) = *((_BYTE *)a1 + v23) != 0;
  }
  v29 = v23;
  return CC_SHA256_Update(c, &v29, 1u);
}

uint64_t AirReflection::Node::node_as_ViewportArrayIndexArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 274440) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ViewportArrayIndexArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.ViewportArrayIndexArg", 0x23u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_BarycentricCoordArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 274445) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::BarycentricCoordArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned __int16 *v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  int *p_data;
  CC_LONG v15;
  CC_SHA256_CTX *v16;
  unsigned __int16 *v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  int *v21;
  CC_LONG v22;
  CC_SHA256_CTX *v23;
  unsigned __int16 *v24;
  uint64_t v25;
  int data;

  CC_SHA256_Update(c, "AirReflection.BarycentricCoordArg", 0x21u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *((unsigned __int8 *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 < 9u)
  {
    LODWORD(v9) = 0;
  }
  else
  {
    v9 = v8[4];
    if (v9)
      LODWORD(v9) = *((unsigned __int8 *)a1 + v9);
  }
  data = v9;
  CC_SHA256_Update(c, &data, 4u);
  v10 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v10 >= 0xBu && (v11 = v10[5]) != 0)
  {
    v12 = (unsigned int *)((char *)a1 + v11);
    v13 = *v12;
    p_data = (int *)((char *)v12 + v13 + 4);
    v15 = *(unsigned int *)((char *)v12 + v13);
    v16 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v16 = c;
    v15 = 4;
  }
  CC_SHA256_Update(v16, p_data, v15);
  v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 >= 0xDu && (v18 = v17[6]) != 0)
  {
    v19 = (unsigned int *)((char *)a1 + v18);
    v20 = *v19;
    v21 = (int *)((char *)v19 + v20 + 4);
    v22 = *(unsigned int *)((char *)v19 + v20);
    v23 = c;
  }
  else
  {
    data = 0;
    v21 = &data;
    v23 = c;
    v22 = 4;
  }
  CC_SHA256_Update(v23, v21, v22);
  v24 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v24 < 0xFu)
  {
    LOBYTE(v25) = 0;
  }
  else
  {
    v25 = v24[7];
    if (v25)
      LOBYTE(v25) = *((_BYTE *)a1 + v25) != 0;
  }
  LOBYTE(data) = v25;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t AirReflection::Node::node_as_PrimitiveIDArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 274446) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::PrimitiveIDArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.PrimitiveIDArg", 0x1Cu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_PixelPositionInTileArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 5 || !v1[2])
    return 0;
  v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 278528)
  {
    v3 = v1[3];
    if (v1[3])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t AirReflection::PixelPositionInTileArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.PixelPositionInTileArg", 0x24u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_PixelsPerTileArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 278529) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::PixelsPerTileArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.PixelsPerTileArg", 0x1Eu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_TileIndexArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 278530) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::TileIndexArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.TileIndexArg", 0x1Au);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_ImageblockArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 278531) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ImageblockArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 v7;
  uint64_t v8;
  unsigned __int16 *v9;
  unsigned __int16 v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;
  uint64_t v16;
  unsigned __int16 *v17;
  unsigned __int16 v18;
  uint64_t v19;
  unsigned __int16 *v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  int *p_data;
  CC_LONG v25;
  CC_SHA256_CTX *v26;
  unsigned __int16 *v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  int *v31;
  CC_LONG v32;
  CC_SHA256_CTX *v33;
  unsigned __int16 *v34;
  uint64_t v35;
  int data;

  CC_SHA256_Update(c, "AirReflection.ImageblockArg", 0x1Bu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = v7;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v8);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 >= 9u && (v10 = v9[4]) != 0)
  {
    v11 = v10;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v11);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 < 0xBu)
  {
    LOBYTE(v13) = 0;
  }
  else
  {
    v13 = v12[5];
    if (v13)
      LOBYTE(v13) = *((_BYTE *)a1 + v13) != 0;
  }
  LOBYTE(data) = v13;
  CC_SHA256_Update(c, &data, 1u);
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xDu && (v15 = v14[6]) != 0)
  {
    v16 = v15;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v16);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 >= 0xFu && (v18 = v17[7]) != 0)
  {
    v19 = v18;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v19);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 >= 0x11u && (v21 = v20[8]) != 0)
  {
    v22 = (unsigned int *)((char *)a1 + v21);
    v23 = *v22;
    p_data = (int *)((char *)v22 + v23 + 4);
    v25 = *(unsigned int *)((char *)v22 + v23);
    v26 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v26 = c;
    v25 = 4;
  }
  CC_SHA256_Update(v26, p_data, v25);
  v27 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v27 >= 0x13u && (v28 = v27[9]) != 0)
  {
    v29 = (unsigned int *)((char *)a1 + v28);
    v30 = *v29;
    v31 = (int *)((char *)v29 + v30 + 4);
    v32 = *(unsigned int *)((char *)v29 + v30);
    v33 = c;
  }
  else
  {
    data = 0;
    v31 = &data;
    v33 = c;
    v32 = 4;
  }
  CC_SHA256_Update(v33, v31, v32);
  v34 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v34 < 0x15u)
  {
    LOBYTE(v35) = 0;
  }
  else
  {
    v35 = v34[10];
    if (v35)
      LOBYTE(v35) = *((_BYTE *)a1 + v35) != 0;
  }
  LOBYTE(data) = v35;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t AirReflection::Node::node_as_ImageblockDataArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 278532) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ImageblockDataArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 v7;
  uint64_t v8;
  unsigned __int16 *v9;
  unsigned __int16 v10;
  uint64_t v11;
  unsigned __int16 *v12;
  unsigned __int16 v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  unsigned __int16 *v17;
  unsigned __int16 v18;
  uint64_t v19;
  unsigned __int16 *v20;
  unsigned __int16 v21;
  uint64_t v22;
  unsigned __int16 *v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  int *p_data;
  CC_LONG v28;
  CC_SHA256_CTX *v29;
  unsigned __int16 *v30;
  uint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  int *v34;
  CC_LONG v35;
  CC_SHA256_CTX *v36;
  unsigned __int16 *v37;
  uint64_t v38;
  int data;

  CC_SHA256_Update(c, "AirReflection.ImageblockDataArg", 0x1Fu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = v7;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v8);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 >= 9u && (v10 = v9[4]) != 0)
  {
    v11 = v10;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v11);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 >= 0xBu && (v13 = v12[5]) != 0)
  {
    v14 = v13;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v14);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v15 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v15 < 0xDu)
  {
    LOBYTE(v16) = 0;
  }
  else
  {
    v16 = v15[6];
    if (v16)
      LOBYTE(v16) = *((_BYTE *)a1 + v16) != 0;
  }
  LOBYTE(data) = v16;
  CC_SHA256_Update(c, &data, 1u);
  v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 >= 0xFu && (v18 = v17[7]) != 0)
  {
    v19 = v18;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v19);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 >= 0x11u && (v21 = v20[8]) != 0)
  {
    v22 = v21;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v22);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v23 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v23 >= 0x13u && (v24 = v23[9]) != 0)
  {
    v25 = (unsigned int *)((char *)a1 + v24);
    v26 = *v25;
    p_data = (int *)((char *)v25 + v26 + 4);
    v28 = *(unsigned int *)((char *)v25 + v26);
    v29 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v29 = c;
    v28 = 4;
  }
  CC_SHA256_Update(v29, p_data, v28);
  v30 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v30 >= 0x15u && (v31 = v30[10]) != 0)
  {
    v32 = (unsigned int *)((char *)a1 + v31);
    v33 = *v32;
    v34 = (int *)((char *)v32 + v33 + 4);
    v35 = *(unsigned int *)((char *)v32 + v33);
    v36 = c;
  }
  else
  {
    data = 0;
    v34 = &data;
    v36 = c;
    v35 = 4;
  }
  CC_SHA256_Update(v36, v34, v35);
  v37 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v37 < 0x17u)
  {
    LOBYTE(v38) = 0;
  }
  else
  {
    v38 = v37[11];
    if (v38)
      LOBYTE(v38) = *((_BYTE *)a1 + v38) != 0;
  }
  LOBYTE(data) = v38;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t AirReflection::Node::node_as_PayloadArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 5 || !v1[2])
    return 0;
  v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 282624)
  {
    v3 = v1[3];
    if (v1[3])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t AirReflection::PayloadArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 v7;
  uint64_t v8;
  unsigned __int16 *v9;
  unsigned __int16 v10;
  uint64_t v11;
  unsigned __int16 *v12;
  unsigned __int16 v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  int *p_data;
  CC_LONG v20;
  CC_SHA256_CTX *v21;
  unsigned __int16 *v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  int *v26;
  CC_LONG v27;
  CC_SHA256_CTX *v28;
  unsigned __int16 *v29;
  uint64_t v30;
  unsigned __int16 *v31;
  unsigned __int16 v32;
  uint64_t v33;
  int data;

  CC_SHA256_Update(c, "AirReflection.PayloadArg", 0x18u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = v7;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v8);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 >= 9u && (v10 = v9[4]) != 0)
  {
    v11 = v10;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v11);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 >= 0xBu && (v13 = v12[5]) != 0)
  {
    v14 = v13;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v14);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v15 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v15 >= 0xDu && (v16 = v15[6]) != 0)
  {
    v17 = (unsigned int *)((char *)a1 + v16);
    v18 = *v17;
    p_data = (int *)((char *)v17 + v18 + 4);
    v20 = *(unsigned int *)((char *)v17 + v18);
    v21 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v21 = c;
    v20 = 4;
  }
  CC_SHA256_Update(v21, p_data, v20);
  v22 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v22 >= 0xFu && (v23 = v22[7]) != 0)
  {
    v24 = (unsigned int *)((char *)a1 + v23);
    v25 = *v24;
    v26 = (int *)((char *)v24 + v25 + 4);
    v27 = *(unsigned int *)((char *)v24 + v25);
    v28 = c;
  }
  else
  {
    data = 0;
    v26 = &data;
    v28 = c;
    v27 = 4;
  }
  CC_SHA256_Update(v28, v26, v27);
  v29 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v29 < 0x11u)
  {
    LOBYTE(v30) = 0;
  }
  else
  {
    v30 = v29[8];
    if (v30)
      LOBYTE(v30) = *((_BYTE *)a1 + v30) != 0;
  }
  LOBYTE(data) = v30;
  CC_SHA256_Update(c, &data, 1u);
  v31 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v31 >= 0x13u && (v32 = v31[9]) != 0)
  {
    v33 = v32;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v33);
  }
  else
  {
    data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_OriginArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 282625) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::OriginArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.OriginArg", 0x17u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_DirectionArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 282626) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::DirectionArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.DirectionArg", 0x1Au);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_MinDistanceArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 282627) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::MinDistanceArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.MinDistanceArg", 0x1Cu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_MaxDistanceArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 282628) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::MaxDistanceArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.MaxDistanceArg", 0x1Cu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_DistanceArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 282629) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::DistanceArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.DistanceArg", 0x19u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_WorldSpaceOriginArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 282630) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::WorldSpaceOriginArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.WorldSpaceOriginArg", 0x21u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_WorldSpaceDirectionArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 282631) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::WorldSpaceDirectionArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.WorldSpaceDirectionArg", 0x24u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_GeometryIDArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 282632) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::GeometryIDArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.GeometryIDArg", 0x1Bu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_UserInstanceIDArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 282633) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::UserInstanceIDArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.UserInstanceIDArg", 0x1Fu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_GeometryIntersectionFunctionTableOffsetArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 282634) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::GeometryIntersectionFunctionTableOffsetArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.GeometryIntersectionFunctionTableOffsetArg", 0x38u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_InstanceIntersectionFunctionTableOffsetArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 282635) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::InstanceIntersectionFunctionTableOffsetArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.InstanceIntersectionFunctionTableOffsetArg", 0x38u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_OpaquePrimitiveArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 282636) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::OpaquePrimitiveArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.OpaquePrimitiveArg", 0x20u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_ObjectToWorldTransformArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 282637) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ObjectToWorldTransformArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.ObjectToWorldTransformArg", 0x27u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_WorldToObjectTransformArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 282638) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::WorldToObjectTransformArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.WorldToObjectTransformArg", 0x27u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_TimeArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 282639) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::TimeArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.TimeArg", 0x15u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_KeyFrameCountArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 282640) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::KeyFrameCountArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.KeyFrameCountArg", 0x1Eu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_MotionStartTimeArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 282641) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::MotionStartTimeArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.MotionStartTimeArg", 0x20u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_MotionEndTimeArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 282642) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::MotionEndTimeArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.MotionEndTimeArg", 0x1Eu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_PrimitiveDataArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 282643) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::PrimitiveDataArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.PrimitiveDataArg", 0x1Eu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_InstanceIDCountArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 282644) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::InstanceIDCountArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.InstanceIDCountArg", 0x20u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_UserInstanceIDCountArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 282645) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::UserInstanceIDCountArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.UserInstanceIDCountArg", 0x24u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_CurveParameterArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 282646) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::CurveParameterArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.CurveParameterArg", 0x1Fu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_MeshArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 5 || !v1[2])
    return 0;
  v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 286720)
  {
    v3 = v1[3];
    if (v1[3])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t AirReflection::MeshArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 v7;
  uint64_t v8;
  unsigned __int16 *v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  int *p_data;
  CC_LONG v14;
  CC_SHA256_CTX *v15;
  unsigned __int16 *v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  int *v20;
  CC_LONG v21;
  CC_SHA256_CTX *v22;
  unsigned __int16 *v23;
  uint64_t v24;
  int data;

  CC_SHA256_Update(c, "AirReflection.MeshArg", 0x15u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = v7;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v8);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 >= 9u && (v10 = v9[4]) != 0)
  {
    v11 = (unsigned int *)((char *)a1 + v10);
    v12 = *v11;
    p_data = (int *)((char *)v11 + v12 + 4);
    v14 = *(unsigned int *)((char *)v11 + v12);
    v15 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v15 = c;
    v14 = 4;
  }
  CC_SHA256_Update(v15, p_data, v14);
  v16 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v16 >= 0xBu && (v17 = v16[5]) != 0)
  {
    v18 = (unsigned int *)((char *)a1 + v17);
    v19 = *v18;
    v20 = (int *)((char *)v18 + v19 + 4);
    v21 = *(unsigned int *)((char *)v18 + v19);
    v22 = c;
  }
  else
  {
    data = 0;
    v20 = &data;
    v22 = c;
    v21 = 4;
  }
  CC_SHA256_Update(v22, v20, v21);
  v23 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v23 < 0xDu)
  {
    LOBYTE(v24) = 0;
  }
  else
  {
    v24 = v23[6];
    if (v24)
      LOBYTE(v24) = *((_BYTE *)a1 + v24) != 0;
  }
  LOBYTE(data) = v24;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t AirReflection::Node::node_as_MeshGridPropertiesArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 5 || !v1[2])
    return 0;
  v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 290816)
  {
    v3 = v1[3];
    if (v1[3])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t AirReflection::MeshGridPropertiesArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int *v10;
  CC_LONG v11;
  CC_SHA256_CTX *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char data;
  int v24;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.MeshGridPropertiesArg", 0x23u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOBYTE(v5) = *((_BYTE *)a1 + v5) != 0;
  }
  data = v5;
  CC_SHA256_Update(c, &data, 1u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v8 = (unsigned int *)((char *)a1 + v7);
    v9 = *v8;
    v10 = (int *)((char *)v8 + v9 + 4);
    v11 = *(unsigned int *)((char *)v8 + v9);
    v12 = c;
  }
  else
  {
    v24 = 0;
    v10 = &v24;
    v12 = c;
    v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    v17 = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    v25 = 0;
    v17 = &v25;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_FunctionConstant(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 5 || !v1[2])
    return 0;
  v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 0x80000)
  {
    v3 = v1[3];
    if (v1[3])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t AirReflection::FunctionConstant::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  int *v8;
  CC_LONG v9;
  CC_SHA256_CTX *v10;
  unsigned __int16 *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  int *p_data;
  CC_LONG v16;
  CC_SHA256_CTX *v17;
  unsigned __int16 *v18;
  uint64_t v19;
  unsigned __int16 *v20;
  uint64_t v21;
  int v23;
  int data;
  int v25;
  char v26;

  CC_SHA256_Update(c, "AirReflection.FunctionConstant", 0x1Eu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
  {
    v6 = (unsigned int *)((char *)a1 + v5);
    v7 = *v6;
    v8 = (int *)((char *)v6 + v7 + 4);
    v9 = *(unsigned int *)((char *)v6 + v7);
    v10 = c;
  }
  else
  {
    v23 = 0;
    v8 = &v23;
    v10 = c;
    v9 = 4;
  }
  CC_SHA256_Update(v10, v8, v9);
  v11 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v11 >= 7u && (v12 = v11[3]) != 0)
  {
    v13 = (unsigned int *)((char *)a1 + v12);
    v14 = *v13;
    p_data = (int *)((char *)v13 + v14 + 4);
    v16 = *(unsigned int *)((char *)v13 + v14);
    v17 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v17 = c;
    v16 = 4;
  }
  CC_SHA256_Update(v17, p_data, v16);
  v18 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v18 < 9u)
  {
    LODWORD(v19) = 0;
  }
  else
  {
    v19 = v18[4];
    if (v19)
      LODWORD(v19) = *(int *)((char *)a1 + v19);
  }
  v25 = v19;
  CC_SHA256_Update(c, &v25, 4u);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[5];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_StructTypeInfo(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 524289) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::StructTypeInfo::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t result;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  int data;
  int v13;

  CC_SHA256_Update(c, "AirReflection.StructTypeInfo", 0x1Cu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
  {
    v6 = (unsigned int *)((char *)a1 + v5 + *(unsigned int *)((char *)a1 + v5));
    data = *v6;
    result = CC_SHA256_Update(c, &data, 4u);
    v8 = *v6;
    if ((_DWORD)v8)
    {
      v9 = v6 + 1;
      v10 = v6 + 1;
      do
      {
        v11 = *v10++;
        result = AirReflection::StructTypeInfoField::HashImpl((int *)((char *)v9 + v11), c);
        v9 = v10;
        --v8;
      }
      while (v8);
    }
  }
  else
  {
    v13 = 0;
    return CC_SHA256_Update(c, &v13, 4u);
  }
  return result;
}

uint64_t AirReflection::Node::node_as_StitchingArgument(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 524290) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::StitchingArgument::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  unsigned __int16 v5;
  uint64_t v6;
  int *p_data;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  CC_LONG v13;
  CC_SHA256_CTX *v14;
  int v16;
  int data;
  int v18;

  CC_SHA256_Update(c, "AirReflection.StitchingArgument", 0x1Fu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
  {
    v6 = v5;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    v16 = *(int *)((char *)a1 + v6);
    p_data = &v16;
  }
  else
  {
    data = 0;
    p_data = &data;
  }
  CC_SHA256_Update(c, p_data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 7u && (v9 = v8[3]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9);
    v11 = *v10;
    v12 = (int *)((char *)v10 + v11 + 4);
    v13 = *(unsigned int *)((char *)v10 + v11);
    v14 = c;
  }
  else
  {
    v18 = 0;
    v12 = &v18;
    v14 = c;
    v13 = 4;
  }
  return CC_SHA256_Update(v14, v12, v13);
}

uint64_t AirReflection::Node::node_as_MeshTypeInfo(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 524291) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::MeshTypeInfo::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  int *v8;
  int v9;
  unsigned __int16 *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  int *v14;
  int v15;
  unsigned __int16 *v16;
  uint64_t v17;
  unsigned __int16 *v18;
  uint64_t v19;
  unsigned __int16 *v20;
  uint64_t v21;
  int v22;
  int data;

  CC_SHA256_Update(c, "AirReflection.MeshTypeInfo", 0x1Au);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
  {
    v6 = (int *)((char *)a1 + v5 + *(unsigned int *)((char *)a1 + v5));
    data = *v6;
    CC_SHA256_Update(c, &data, 4u);
    v7 = *v6;
    if ((_DWORD)v7)
    {
      v8 = v6 + 1;
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v9 = *v8++;
        data = v9;
        CC_SHA256_Update(c, &data, 4u);
        --v7;
      }
      while (v7);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v10 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v10 >= 7u && (v11 = v10[3]) != 0)
  {
    v12 = (int *)((char *)a1 + v11 + *(unsigned int *)((char *)a1 + v11));
    data = *v12;
    CC_SHA256_Update(c, &data, 4u);
    v13 = *v12;
    if ((_DWORD)v13)
    {
      v14 = v12 + 1;
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v15 = *v14++;
        data = v15;
        CC_SHA256_Update(c, &data, 4u);
        --v13;
      }
      while (v13);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v16 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v16 < 9u)
  {
    LODWORD(v17) = 0;
  }
  else
  {
    v17 = v16[4];
    if (v17)
      LODWORD(v17) = *(int *)((char *)a1 + v17);
  }
  data = v17;
  CC_SHA256_Update(c, &data, 4u);
  v18 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v18 < 0xBu)
  {
    LODWORD(v19) = 0;
  }
  else
  {
    v19 = v18[5];
    if (v19)
      LODWORD(v19) = *(int *)((char *)a1 + v19);
  }
  data = v19;
  CC_SHA256_Update(c, &data, 4u);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 >= 0xDu && (v21 = v20[6]) != 0)
    v22 = *((unsigned __int8 *)a1 + v21);
  else
    v22 = 1;
  data = v22;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_GlobalBinding(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 524292) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::GlobalBinding::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  int *p_data;
  CC_LONG v9;
  CC_SHA256_CTX *v10;
  unsigned __int16 *v11;
  unsigned __int16 v12;
  uint64_t v13;
  int *v14;
  int data;
  int v17;
  int v18;

  CC_SHA256_Update(c, "AirReflection.GlobalBinding", 0x1Bu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
  {
    v6 = (unsigned int *)((char *)a1 + v5);
    v7 = *v6;
    p_data = (int *)((char *)v6 + v7 + 4);
    v9 = *(unsigned int *)((char *)v6 + v7);
    v10 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v10 = c;
    v9 = 4;
  }
  CC_SHA256_Update(v10, p_data, v9);
  v11 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v11 >= 7u && (v12 = v11[3]) != 0)
  {
    v13 = v12;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    v17 = *(int *)((char *)a1 + v13);
    v14 = &v17;
  }
  else
  {
    v18 = 0;
    v14 = &v18;
  }
  return CC_SHA256_Update(c, v14, 4u);
}

uint64_t AirReflection::Node::node_as_InlineTypeInfo(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 524293) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::InlineTypeInfo::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  int v6;
  unsigned __int16 *v7;
  unsigned __int16 v8;
  uint64_t v9;
  unsigned __int16 *v10;
  unsigned __int16 v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  unsigned __int16 *v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  int *p_data;
  CC_LONG v24;
  CC_SHA256_CTX *v25;
  unsigned __int16 *v26;
  unsigned __int16 v27;
  uint64_t v28;
  unsigned __int16 *v29;
  unsigned __int16 v30;
  uint64_t v31;
  int data;

  CC_SHA256_Update(c, "AirReflection.InlineTypeInfo", 0x1Cu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
    v6 = *((unsigned __int8 *)a1 + v5);
  else
    v6 = 255;
  data = v6;
  CC_SHA256_Update(c, &data, 4u);
  v7 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v7 >= 7u && (v8 = v7[3]) != 0)
  {
    v9 = v8;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v9);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v10 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v10 >= 9u && (v11 = v10[4]) != 0)
  {
    v12 = v11;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v12);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 < 0xBu)
  {
    LODWORD(v14) = 0;
  }
  else
  {
    v14 = v13[5];
    if (v14)
      LODWORD(v14) = *(int *)((char *)a1 + v14);
  }
  data = v14;
  CC_SHA256_Update(c, &data, 4u);
  v15 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v15 < 0xDu)
  {
    LODWORD(v16) = 0;
  }
  else
  {
    v16 = v15[6];
    if (v16)
      LODWORD(v16) = *(int *)((char *)a1 + v16);
  }
  data = v16;
  CC_SHA256_Update(c, &data, 4u);
  v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 < 0xFu)
  {
    LODWORD(v18) = 0;
  }
  else
  {
    v18 = v17[7];
    if (v18)
      LODWORD(v18) = *(int *)((char *)a1 + v18);
  }
  data = v18;
  CC_SHA256_Update(c, &data, 4u);
  v19 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v19 >= 0x11u && (v20 = v19[8]) != 0)
  {
    v21 = (unsigned int *)((char *)a1 + v20);
    v22 = *v21;
    p_data = (int *)((char *)v21 + v22 + 4);
    v24 = *(unsigned int *)((char *)v21 + v22);
    v25 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v25 = c;
    v24 = 4;
  }
  CC_SHA256_Update(v25, p_data, v24);
  v26 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v26 >= 0x13u && (v27 = v26[9]) != 0)
  {
    v28 = v27;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v28);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v29 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v29 >= 0x15u && (v30 = v29[10]) != 0)
  {
    v31 = v30;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v31);
  }
  else
  {
    data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_OpaqueType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 5 || !v1[2])
    return 0;
  v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 528384)
  {
    v3 = v1[3];
    if (v1[3])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t AirReflection::OpaqueType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned __int16 *v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  int *p_data;
  CC_LONG v19;
  CC_SHA256_CTX *v20;
  int data;

  CC_SHA256_Update(c, "AirReflection.OpaqueType", 0x18u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v13 = *v12++;
        data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (v15 = v14[5]) != 0)
  {
    v16 = (unsigned int *)((char *)a1 + v15);
    v17 = *v16;
    p_data = (int *)((char *)v16 + v17 + 4);
    v19 = *(unsigned int *)((char *)v16 + v17);
    v20 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v20 = c;
    v19 = 4;
  }
  return CC_SHA256_Update(v20, p_data, v19);
}

uint64_t AirReflection::Node::node_as_VoidType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528385) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::VoidType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t result;
  uint64_t v12;
  int *v13;
  int v14;
  int data;

  CC_SHA256_Update(c, "AirReflection.VoidType", 0x16u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    result = CC_SHA256_Update(c, &data, 4u);
    v12 = *v10;
    if ((_DWORD)v12)
    {
      v13 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v14 = *v13++;
        data = v14;
        result = CC_SHA256_Update(c, &data, 4u);
        --v12;
      }
      while (v12);
    }
  }
  else
  {
    data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t AirReflection::Node::node_as_BoolType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528386) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::BoolType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  int v6;
  unsigned __int16 *v7;
  uint64_t v8;
  int v9;
  unsigned __int16 *v10;
  uint64_t v11;
  int *v12;
  uint64_t result;
  uint64_t v14;
  int *v15;
  int v16;
  int data;

  CC_SHA256_Update(c, "AirReflection.BoolType", 0x16u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
    v6 = *(int *)((char *)a1 + v5);
  else
    v6 = 1;
  data = v6;
  CC_SHA256_Update(c, &data, 4u);
  v7 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v7 >= 7u && (v8 = v7[3]) != 0)
    v9 = *(int *)((char *)a1 + v8);
  else
    v9 = 1;
  data = v9;
  CC_SHA256_Update(c, &data, 4u);
  v10 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v10 >= 9u && (v11 = v10[4]) != 0)
  {
    v12 = (int *)((char *)a1 + v11 + *(unsigned int *)((char *)a1 + v11));
    data = *v12;
    result = CC_SHA256_Update(c, &data, 4u);
    v14 = *v12;
    if ((_DWORD)v14)
    {
      v15 = v12 + 1;
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v16 = *v15++;
        data = v16;
        result = CC_SHA256_Update(c, &data, 4u);
        --v14;
      }
      while (v14);
    }
  }
  else
  {
    data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t AirReflection::Node::node_as_CharType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528387) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::CharType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  int v6;
  unsigned __int16 *v7;
  uint64_t v8;
  int v9;
  unsigned __int16 *v10;
  uint64_t v11;
  int *v12;
  uint64_t result;
  uint64_t v14;
  int *v15;
  int v16;
  int data;

  CC_SHA256_Update(c, "AirReflection.CharType", 0x16u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
    v6 = *(int *)((char *)a1 + v5);
  else
    v6 = 1;
  data = v6;
  CC_SHA256_Update(c, &data, 4u);
  v7 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v7 >= 7u && (v8 = v7[3]) != 0)
    v9 = *(int *)((char *)a1 + v8);
  else
    v9 = 1;
  data = v9;
  CC_SHA256_Update(c, &data, 4u);
  v10 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v10 >= 9u && (v11 = v10[4]) != 0)
  {
    v12 = (int *)((char *)a1 + v11 + *(unsigned int *)((char *)a1 + v11));
    data = *v12;
    result = CC_SHA256_Update(c, &data, 4u);
    v14 = *v12;
    if ((_DWORD)v14)
    {
      v15 = v12 + 1;
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v16 = *v15++;
        data = v16;
        result = CC_SHA256_Update(c, &data, 4u);
        --v14;
      }
      while (v14);
    }
  }
  else
  {
    data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t AirReflection::Node::node_as_UCharType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528388) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::UCharType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  int v6;
  unsigned __int16 *v7;
  uint64_t v8;
  int v9;
  unsigned __int16 *v10;
  uint64_t v11;
  int *v12;
  uint64_t result;
  uint64_t v14;
  int *v15;
  int v16;
  int data;

  CC_SHA256_Update(c, "AirReflection.UCharType", 0x17u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
    v6 = *(int *)((char *)a1 + v5);
  else
    v6 = 1;
  data = v6;
  CC_SHA256_Update(c, &data, 4u);
  v7 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v7 >= 7u && (v8 = v7[3]) != 0)
    v9 = *(int *)((char *)a1 + v8);
  else
    v9 = 1;
  data = v9;
  CC_SHA256_Update(c, &data, 4u);
  v10 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v10 >= 9u && (v11 = v10[4]) != 0)
  {
    v12 = (int *)((char *)a1 + v11 + *(unsigned int *)((char *)a1 + v11));
    data = *v12;
    result = CC_SHA256_Update(c, &data, 4u);
    v14 = *v12;
    if ((_DWORD)v14)
    {
      v15 = v12 + 1;
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v16 = *v15++;
        data = v16;
        result = CC_SHA256_Update(c, &data, 4u);
        --v14;
      }
      while (v14);
    }
  }
  else
  {
    data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t AirReflection::Node::node_as_ShortType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528389) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ShortType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  int v6;
  unsigned __int16 *v7;
  uint64_t v8;
  int v9;
  unsigned __int16 *v10;
  uint64_t v11;
  int *v12;
  uint64_t result;
  uint64_t v14;
  int *v15;
  int v16;
  int data;

  CC_SHA256_Update(c, "AirReflection.ShortType", 0x17u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
    v6 = *(int *)((char *)a1 + v5);
  else
    v6 = 2;
  data = v6;
  CC_SHA256_Update(c, &data, 4u);
  v7 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v7 >= 7u && (v8 = v7[3]) != 0)
    v9 = *(int *)((char *)a1 + v8);
  else
    v9 = 2;
  data = v9;
  CC_SHA256_Update(c, &data, 4u);
  v10 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v10 >= 9u && (v11 = v10[4]) != 0)
  {
    v12 = (int *)((char *)a1 + v11 + *(unsigned int *)((char *)a1 + v11));
    data = *v12;
    result = CC_SHA256_Update(c, &data, 4u);
    v14 = *v12;
    if ((_DWORD)v14)
    {
      v15 = v12 + 1;
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v16 = *v15++;
        data = v16;
        result = CC_SHA256_Update(c, &data, 4u);
        --v14;
      }
      while (v14);
    }
  }
  else
  {
    data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t AirReflection::Node::node_as_UShortType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528390) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::UShortType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  int v6;
  unsigned __int16 *v7;
  uint64_t v8;
  int v9;
  unsigned __int16 *v10;
  uint64_t v11;
  int *v12;
  uint64_t result;
  uint64_t v14;
  int *v15;
  int v16;
  int data;

  CC_SHA256_Update(c, "AirReflection.UShortType", 0x18u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
    v6 = *(int *)((char *)a1 + v5);
  else
    v6 = 2;
  data = v6;
  CC_SHA256_Update(c, &data, 4u);
  v7 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v7 >= 7u && (v8 = v7[3]) != 0)
    v9 = *(int *)((char *)a1 + v8);
  else
    v9 = 2;
  data = v9;
  CC_SHA256_Update(c, &data, 4u);
  v10 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v10 >= 9u && (v11 = v10[4]) != 0)
  {
    v12 = (int *)((char *)a1 + v11 + *(unsigned int *)((char *)a1 + v11));
    data = *v12;
    result = CC_SHA256_Update(c, &data, 4u);
    v14 = *v12;
    if ((_DWORD)v14)
    {
      v15 = v12 + 1;
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v16 = *v15++;
        data = v16;
        result = CC_SHA256_Update(c, &data, 4u);
        --v14;
      }
      while (v14);
    }
  }
  else
  {
    data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t AirReflection::Node::node_as_IntType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528391) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::IntType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned __int16 *v10;
  uint64_t v11;
  int *v12;
  uint64_t result;
  uint64_t v14;
  int *v15;
  int v16;
  int data;

  CC_SHA256_Update(c, "AirReflection.IntType", 0x15u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
    v6 = *(int *)((char *)a1 + v5);
  else
    v6 = 4;
  data = v6;
  v7 = 4;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 7u)
  {
    v9 = v8[3];
    if (v9)
      v7 = *(int *)((char *)a1 + v9);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v10 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v10 >= 9u && (v11 = v10[4]) != 0)
  {
    v12 = (int *)((char *)a1 + v11 + *(unsigned int *)((char *)a1 + v11));
    data = *v12;
    result = CC_SHA256_Update(c, &data, 4u);
    v14 = *v12;
    if ((_DWORD)v14)
    {
      v15 = v12 + 1;
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v16 = *v15++;
        data = v16;
        result = CC_SHA256_Update(c, &data, 4u);
        --v14;
      }
      while (v14);
    }
  }
  else
  {
    data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t AirReflection::Node::node_as_UIntType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528392) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::UIntType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned __int16 *v10;
  uint64_t v11;
  int *v12;
  uint64_t result;
  uint64_t v14;
  int *v15;
  int v16;
  int data;

  CC_SHA256_Update(c, "AirReflection.UIntType", 0x16u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
    v6 = *(int *)((char *)a1 + v5);
  else
    v6 = 4;
  data = v6;
  v7 = 4;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 7u)
  {
    v9 = v8[3];
    if (v9)
      v7 = *(int *)((char *)a1 + v9);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v10 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v10 >= 9u && (v11 = v10[4]) != 0)
  {
    v12 = (int *)((char *)a1 + v11 + *(unsigned int *)((char *)a1 + v11));
    data = *v12;
    result = CC_SHA256_Update(c, &data, 4u);
    v14 = *v12;
    if ((_DWORD)v14)
    {
      v15 = v12 + 1;
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v16 = *v15++;
        data = v16;
        result = CC_SHA256_Update(c, &data, 4u);
        --v14;
      }
      while (v14);
    }
  }
  else
  {
    data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t AirReflection::Node::node_as_LongType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528393) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::LongType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  int v6;
  unsigned __int16 *v7;
  uint64_t v8;
  int v9;
  unsigned __int16 *v10;
  uint64_t v11;
  int *v12;
  uint64_t result;
  uint64_t v14;
  int *v15;
  int v16;
  int data;

  CC_SHA256_Update(c, "AirReflection.LongType", 0x16u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
    v6 = *(int *)((char *)a1 + v5);
  else
    v6 = 8;
  data = v6;
  CC_SHA256_Update(c, &data, 4u);
  v7 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v7 >= 7u && (v8 = v7[3]) != 0)
    v9 = *(int *)((char *)a1 + v8);
  else
    v9 = 8;
  data = v9;
  CC_SHA256_Update(c, &data, 4u);
  v10 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v10 >= 9u && (v11 = v10[4]) != 0)
  {
    v12 = (int *)((char *)a1 + v11 + *(unsigned int *)((char *)a1 + v11));
    data = *v12;
    result = CC_SHA256_Update(c, &data, 4u);
    v14 = *v12;
    if ((_DWORD)v14)
    {
      v15 = v12 + 1;
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v16 = *v15++;
        data = v16;
        result = CC_SHA256_Update(c, &data, 4u);
        --v14;
      }
      while (v14);
    }
  }
  else
  {
    data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t AirReflection::Node::node_as_ULongType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528394) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ULongType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  int v6;
  unsigned __int16 *v7;
  uint64_t v8;
  int v9;
  unsigned __int16 *v10;
  uint64_t v11;
  int *v12;
  uint64_t result;
  uint64_t v14;
  int *v15;
  int v16;
  int data;

  CC_SHA256_Update(c, "AirReflection.ULongType", 0x17u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
    v6 = *(int *)((char *)a1 + v5);
  else
    v6 = 8;
  data = v6;
  CC_SHA256_Update(c, &data, 4u);
  v7 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v7 >= 7u && (v8 = v7[3]) != 0)
    v9 = *(int *)((char *)a1 + v8);
  else
    v9 = 8;
  data = v9;
  CC_SHA256_Update(c, &data, 4u);
  v10 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v10 >= 9u && (v11 = v10[4]) != 0)
  {
    v12 = (int *)((char *)a1 + v11 + *(unsigned int *)((char *)a1 + v11));
    data = *v12;
    result = CC_SHA256_Update(c, &data, 4u);
    v14 = *v12;
    if ((_DWORD)v14)
    {
      v15 = v12 + 1;
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v16 = *v15++;
        data = v16;
        result = CC_SHA256_Update(c, &data, 4u);
        --v14;
      }
      while (v14);
    }
  }
  else
  {
    data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t AirReflection::Node::node_as_LLongType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528395) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::LLongType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  int v6;
  unsigned __int16 *v7;
  uint64_t v8;
  int v9;
  unsigned __int16 *v10;
  uint64_t v11;
  int *v12;
  uint64_t result;
  uint64_t v14;
  int *v15;
  int v16;
  int data;

  CC_SHA256_Update(c, "AirReflection.LLongType", 0x17u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
    v6 = *(int *)((char *)a1 + v5);
  else
    v6 = 16;
  data = v6;
  CC_SHA256_Update(c, &data, 4u);
  v7 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v7 >= 7u && (v8 = v7[3]) != 0)
    v9 = *(int *)((char *)a1 + v8);
  else
    v9 = 16;
  data = v9;
  CC_SHA256_Update(c, &data, 4u);
  v10 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v10 >= 9u && (v11 = v10[4]) != 0)
  {
    v12 = (int *)((char *)a1 + v11 + *(unsigned int *)((char *)a1 + v11));
    data = *v12;
    result = CC_SHA256_Update(c, &data, 4u);
    v14 = *v12;
    if ((_DWORD)v14)
    {
      v15 = v12 + 1;
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v16 = *v15++;
        data = v16;
        result = CC_SHA256_Update(c, &data, 4u);
        --v14;
      }
      while (v14);
    }
  }
  else
  {
    data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t AirReflection::Node::node_as_ULLongType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528396) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ULLongType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  int v6;
  unsigned __int16 *v7;
  uint64_t v8;
  int v9;
  unsigned __int16 *v10;
  uint64_t v11;
  int *v12;
  uint64_t result;
  uint64_t v14;
  int *v15;
  int v16;
  int data;

  CC_SHA256_Update(c, "AirReflection.ULLongType", 0x18u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
    v6 = *(int *)((char *)a1 + v5);
  else
    v6 = 16;
  data = v6;
  CC_SHA256_Update(c, &data, 4u);
  v7 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v7 >= 7u && (v8 = v7[3]) != 0)
    v9 = *(int *)((char *)a1 + v8);
  else
    v9 = 16;
  data = v9;
  CC_SHA256_Update(c, &data, 4u);
  v10 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v10 >= 9u && (v11 = v10[4]) != 0)
  {
    v12 = (int *)((char *)a1 + v11 + *(unsigned int *)((char *)a1 + v11));
    data = *v12;
    result = CC_SHA256_Update(c, &data, 4u);
    v14 = *v12;
    if ((_DWORD)v14)
    {
      v15 = v12 + 1;
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v16 = *v15++;
        data = v16;
        result = CC_SHA256_Update(c, &data, 4u);
        --v14;
      }
      while (v14);
    }
  }
  else
  {
    data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t AirReflection::Node::node_as_HalfType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528397) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::HalfType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  int v6;
  unsigned __int16 *v7;
  uint64_t v8;
  int v9;
  unsigned __int16 *v10;
  uint64_t v11;
  int *v12;
  uint64_t result;
  uint64_t v14;
  int *v15;
  int v16;
  int data;

  CC_SHA256_Update(c, "AirReflection.HalfType", 0x16u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
    v6 = *(int *)((char *)a1 + v5);
  else
    v6 = 2;
  data = v6;
  CC_SHA256_Update(c, &data, 4u);
  v7 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v7 >= 7u && (v8 = v7[3]) != 0)
    v9 = *(int *)((char *)a1 + v8);
  else
    v9 = 2;
  data = v9;
  CC_SHA256_Update(c, &data, 4u);
  v10 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v10 >= 9u && (v11 = v10[4]) != 0)
  {
    v12 = (int *)((char *)a1 + v11 + *(unsigned int *)((char *)a1 + v11));
    data = *v12;
    result = CC_SHA256_Update(c, &data, 4u);
    v14 = *v12;
    if ((_DWORD)v14)
    {
      v15 = v12 + 1;
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v16 = *v15++;
        data = v16;
        result = CC_SHA256_Update(c, &data, 4u);
        --v14;
      }
      while (v14);
    }
  }
  else
  {
    data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t AirReflection::Node::node_as_FloatType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528398) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::FloatType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned __int16 *v10;
  uint64_t v11;
  int *v12;
  uint64_t result;
  uint64_t v14;
  int *v15;
  int v16;
  int data;

  CC_SHA256_Update(c, "AirReflection.FloatType", 0x17u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
    v6 = *(int *)((char *)a1 + v5);
  else
    v6 = 4;
  data = v6;
  v7 = 4;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 7u)
  {
    v9 = v8[3];
    if (v9)
      v7 = *(int *)((char *)a1 + v9);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v10 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v10 >= 9u && (v11 = v10[4]) != 0)
  {
    v12 = (int *)((char *)a1 + v11 + *(unsigned int *)((char *)a1 + v11));
    data = *v12;
    result = CC_SHA256_Update(c, &data, 4u);
    v14 = *v12;
    if ((_DWORD)v14)
    {
      v15 = v12 + 1;
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v16 = *v15++;
        data = v16;
        result = CC_SHA256_Update(c, &data, 4u);
        --v14;
      }
      while (v14);
    }
  }
  else
  {
    data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t AirReflection::Node::node_as_DoubleType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528399) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::DoubleType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  int v6;
  unsigned __int16 *v7;
  uint64_t v8;
  int v9;
  unsigned __int16 *v10;
  uint64_t v11;
  int *v12;
  uint64_t result;
  uint64_t v14;
  int *v15;
  int v16;
  int data;

  CC_SHA256_Update(c, "AirReflection.DoubleType", 0x18u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
    v6 = *(int *)((char *)a1 + v5);
  else
    v6 = 8;
  data = v6;
  CC_SHA256_Update(c, &data, 4u);
  v7 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v7 >= 7u && (v8 = v7[3]) != 0)
    v9 = *(int *)((char *)a1 + v8);
  else
    v9 = 8;
  data = v9;
  CC_SHA256_Update(c, &data, 4u);
  v10 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v10 >= 9u && (v11 = v10[4]) != 0)
  {
    v12 = (int *)((char *)a1 + v11 + *(unsigned int *)((char *)a1 + v11));
    data = *v12;
    result = CC_SHA256_Update(c, &data, 4u);
    v14 = *v12;
    if ((_DWORD)v14)
    {
      v15 = v12 + 1;
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v16 = *v15++;
        data = v16;
        result = CC_SHA256_Update(c, &data, 4u);
        --v14;
      }
      while (v14);
    }
  }
  else
  {
    data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t AirReflection::Node::node_as_BFloatType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528400) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::BFloatType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  int v6;
  unsigned __int16 *v7;
  uint64_t v8;
  int v9;
  unsigned __int16 *v10;
  uint64_t v11;
  int *v12;
  uint64_t result;
  uint64_t v14;
  int *v15;
  int v16;
  int data;

  CC_SHA256_Update(c, "AirReflection.BFloatType", 0x18u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
    v6 = *(int *)((char *)a1 + v5);
  else
    v6 = 2;
  data = v6;
  CC_SHA256_Update(c, &data, 4u);
  v7 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v7 >= 7u && (v8 = v7[3]) != 0)
    v9 = *(int *)((char *)a1 + v8);
  else
    v9 = 2;
  data = v9;
  CC_SHA256_Update(c, &data, 4u);
  v10 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v10 >= 9u && (v11 = v10[4]) != 0)
  {
    v12 = (int *)((char *)a1 + v11 + *(unsigned int *)((char *)a1 + v11));
    data = *v12;
    result = CC_SHA256_Update(c, &data, 4u);
    v14 = *v12;
    if ((_DWORD)v14)
    {
      v15 = v12 + 1;
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v16 = *v15++;
        data = v16;
        result = CC_SHA256_Update(c, &data, 4u);
        --v14;
      }
      while (v14);
    }
  }
  else
  {
    data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t AirReflection::Node::node_as_VectorType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528401) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::VectorType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  int data;

  CC_SHA256_Update(c, "AirReflection.VectorType", 0x18u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v13 = *v12++;
        data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (v15 = v14[5]) != 0)
  {
    v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v16);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 < 0xDu)
  {
    LODWORD(v18) = 0;
  }
  else
  {
    v18 = v17[6];
    if (v18)
      LODWORD(v18) = *(int *)((char *)a1 + v18);
  }
  data = v18;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_PackedVectorType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528402) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::PackedVectorType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  int data;

  CC_SHA256_Update(c, "AirReflection.PackedVectorType", 0x1Eu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v13 = *v12++;
        data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (v15 = v14[5]) != 0)
  {
    v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v16);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 < 0xDu)
  {
    LODWORD(v18) = 0;
  }
  else
  {
    v18 = v17[6];
    if (v18)
      LODWORD(v18) = *(int *)((char *)a1 + v18);
  }
  data = v18;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_MatrixType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528403) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::MatrixType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  unsigned __int16 *v19;
  uint64_t v20;
  int data;

  CC_SHA256_Update(c, "AirReflection.MatrixType", 0x18u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v13 = *v12++;
        data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (v15 = v14[5]) != 0)
  {
    v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v16);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 < 0xDu)
  {
    LODWORD(v18) = 0;
  }
  else
  {
    v18 = v17[6];
    if (v18)
      LODWORD(v18) = *(int *)((char *)a1 + v18);
  }
  data = v18;
  CC_SHA256_Update(c, &data, 4u);
  v19 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v19 < 0xFu)
  {
    LODWORD(v20) = 0;
  }
  else
  {
    v20 = v19[7];
    if (v20)
      LODWORD(v20) = *(int *)((char *)a1 + v20);
  }
  data = v20;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_FunctionType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528404) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::FunctionType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t result;
  uint64_t v21;
  int *v22;
  int v23;
  int data;

  CC_SHA256_Update(c, "AirReflection.FunctionType", 0x1Au);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v13 = *v12++;
        data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (v15 = v14[5]) != 0)
  {
    v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v16);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 >= 0xDu && (v18 = v17[6]) != 0)
  {
    v19 = (unsigned int *)((char *)a1 + v18 + *(unsigned int *)((char *)a1 + v18));
    data = *v19;
    result = CC_SHA256_Update(c, &data, 4u);
    v21 = *v19;
    if ((_DWORD)v21)
    {
      v22 = (int *)(v19 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v23 = *v22++;
        data = v23;
        result = CC_SHA256_Update(c, &data, 4u);
        --v21;
      }
      while (v21);
    }
  }
  else
  {
    data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t AirReflection::Node::node_as_PointerType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528405) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::PointerType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;
  uint64_t v16;
  int data;

  CC_SHA256_Update(c, "AirReflection.PointerType", 0x19u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v13 = *v12++;
        data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (v15 = v14[5]) != 0)
  {
    v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v16);
  }
  else
  {
    data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_LValueReferenceType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528406) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::LValueReferenceType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;
  uint64_t v16;
  int data;

  CC_SHA256_Update(c, "AirReflection.LValueReferenceType", 0x21u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v13 = *v12++;
        data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (v15 = v14[5]) != 0)
  {
    v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v16);
  }
  else
  {
    data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_RValueReferenceType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528407) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::RValueReferenceType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;
  uint64_t v16;
  int data;

  CC_SHA256_Update(c, "AirReflection.RValueReferenceType", 0x21u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v13 = *v12++;
        data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (v15 = v14[5]) != 0)
  {
    v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v16);
  }
  else
  {
    data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_ArrayType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528408) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ArrayType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  int data;

  CC_SHA256_Update(c, "AirReflection.ArrayType", 0x17u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v13 = *v12++;
        data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (v15 = v14[5]) != 0)
  {
    v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v16);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 < 0xDu)
  {
    LODWORD(v18) = 0;
  }
  else
  {
    v18 = v17[6];
    if (v18)
      LODWORD(v18) = *(int *)((char *)a1 + v18);
  }
  data = v18;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_EnumType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528409) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::EnumType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned __int16 *v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  int *p_data;
  CC_LONG v19;
  CC_SHA256_CTX *v20;
  unsigned __int16 *v21;
  unsigned __int16 v22;
  uint64_t v23;
  int data;

  CC_SHA256_Update(c, "AirReflection.EnumType", 0x16u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v13 = *v12++;
        data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (v15 = v14[5]) != 0)
  {
    v16 = (unsigned int *)((char *)a1 + v15);
    v17 = *v16;
    p_data = (int *)((char *)v16 + v17 + 4);
    v19 = *(unsigned int *)((char *)v16 + v17);
    v20 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v20 = c;
    v19 = 4;
  }
  CC_SHA256_Update(v20, p_data, v19);
  v21 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v21 >= 0xDu && (v22 = v21[6]) != 0)
  {
    v23 = v22;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v23);
  }
  else
  {
    data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_RecordBase(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528410) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::RecordBase::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  unsigned __int16 v9;
  uint64_t v10;
  int data;

  CC_SHA256_Update(c, "AirReflection.RecordBase", 0x18u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = v9;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v10);
  }
  else
  {
    data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_RecordField(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528411) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::RecordField::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  unsigned __int16 v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  int *p_data;
  CC_LONG v16;
  CC_SHA256_CTX *v17;
  unsigned __int16 *v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  int *v22;
  int v23;
  unsigned __int16 *v24;
  unsigned __int16 v25;
  int data;

  CC_SHA256_Update(c, "AirReflection.RecordField", 0x19u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = v9;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v10);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v11 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v11 >= 0xBu && (v12 = v11[5]) != 0)
  {
    v13 = (unsigned int *)((char *)a1 + v12);
    v14 = *v13;
    p_data = (int *)((char *)v13 + v14 + 4);
    v16 = *(unsigned int *)((char *)v13 + v14);
    v17 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v17 = c;
    v16 = 4;
  }
  CC_SHA256_Update(v17, p_data, v16);
  v18 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v18 >= 0xDu && (v19 = v18[6]) != 0)
  {
    v20 = (unsigned int *)((char *)a1 + v19 + *(unsigned int *)((char *)a1 + v19));
    data = *v20;
    CC_SHA256_Update(c, &data, 4u);
    v21 = *v20;
    if ((_DWORD)v21)
    {
      v22 = (int *)(v20 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v23 = *v22++;
        data = v23;
        CC_SHA256_Update(c, &data, 4u);
        --v21;
      }
      while (v21);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v24 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v24 >= 0xFu)
  {
    v25 = v24[7];
    if (v25)
      return AirReflection::BitfieldInfo::HashImpl((int *)((char *)a1 + v25), c);
  }
  data = 0;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_StructType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528412) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::StructType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned __int16 *v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  int *p_data;
  CC_LONG v19;
  CC_SHA256_CTX *v20;
  unsigned __int16 *v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t result;
  uint64_t v25;
  int *v26;
  int v27;
  int data;

  CC_SHA256_Update(c, "AirReflection.StructType", 0x18u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v13 = *v12++;
        data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (v15 = v14[5]) != 0)
  {
    v16 = (unsigned int *)((char *)a1 + v15);
    v17 = *v16;
    p_data = (int *)((char *)v16 + v17 + 4);
    v19 = *(unsigned int *)((char *)v16 + v17);
    v20 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v20 = c;
    v19 = 4;
  }
  CC_SHA256_Update(v20, p_data, v19);
  v21 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v21 >= 0xDu && (v22 = v21[6]) != 0)
  {
    v23 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
    data = *v23;
    result = CC_SHA256_Update(c, &data, 4u);
    v25 = *v23;
    if ((_DWORD)v25)
    {
      v26 = (int *)(v23 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v27 = *v26++;
        data = v27;
        result = CC_SHA256_Update(c, &data, 4u);
        --v25;
      }
      while (v25);
    }
  }
  else
  {
    data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t AirReflection::Node::node_as_UnionType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528413) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::UnionType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned __int16 *v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  int *p_data;
  CC_LONG v19;
  CC_SHA256_CTX *v20;
  unsigned __int16 *v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t result;
  uint64_t v25;
  int *v26;
  int v27;
  int data;

  CC_SHA256_Update(c, "AirReflection.UnionType", 0x17u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v13 = *v12++;
        data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (v15 = v14[5]) != 0)
  {
    v16 = (unsigned int *)((char *)a1 + v15);
    v17 = *v16;
    p_data = (int *)((char *)v16 + v17 + 4);
    v19 = *(unsigned int *)((char *)v16 + v17);
    v20 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v20 = c;
    v19 = 4;
  }
  CC_SHA256_Update(v20, p_data, v19);
  v21 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v21 >= 0xDu && (v22 = v21[6]) != 0)
  {
    v23 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
    data = *v23;
    result = CC_SHA256_Update(c, &data, 4u);
    v25 = *v23;
    if ((_DWORD)v25)
    {
      v26 = (int *)(v23 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v27 = *v26++;
        data = v27;
        result = CC_SHA256_Update(c, &data, 4u);
        --v25;
      }
      while (v25);
    }
  }
  else
  {
    data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t AirReflection::Node::node_as_ArrayOfType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 5 || !v1[2])
    return 0;
  v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 532480)
  {
    v3 = v1[3];
    if (v1[3])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t AirReflection::ArrayOfType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  int data;

  CC_SHA256_Update(c, "AirReflection.ArrayOfType", 0x19u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v13 = *v12++;
        data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (v15 = v14[5]) != 0)
  {
    v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v16);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 < 0xDu)
  {
    LODWORD(v18) = 0;
  }
  else
  {
    v18 = v17[6];
    if (v18)
      LODWORD(v18) = *(int *)((char *)a1 + v18);
  }
  data = v18;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_ArrayRefOfType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532481) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ArrayRefOfType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;
  uint64_t v16;
  int data;

  CC_SHA256_Update(c, "AirReflection.ArrayRefOfType", 0x1Cu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v13 = *v12++;
        data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (v15 = v14[5]) != 0)
  {
    v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v16);
  }
  else
  {
    data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_Texture1dType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532482) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Texture1dType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  int data;

  CC_SHA256_Update(c, "AirReflection.Texture1dType", 0x1Bu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v13 = *v12++;
        data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (v15 = v14[5]) != 0)
  {
    v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v16);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 < 0xDu)
  {
    LODWORD(v18) = 0;
  }
  else
  {
    v18 = v17[6];
    if (v18)
      LODWORD(v18) = *((unsigned __int8 *)a1 + v18);
  }
  data = v18;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_Texture1dArrayType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532483) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Texture1dArrayType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  int data;

  CC_SHA256_Update(c, "AirReflection.Texture1dArrayType", 0x20u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v13 = *v12++;
        data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (v15 = v14[5]) != 0)
  {
    v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v16);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 < 0xDu)
  {
    LODWORD(v18) = 0;
  }
  else
  {
    v18 = v17[6];
    if (v18)
      LODWORD(v18) = *((unsigned __int8 *)a1 + v18);
  }
  data = v18;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_Texture2dType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532484) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Texture2dType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  int data;

  CC_SHA256_Update(c, "AirReflection.Texture2dType", 0x1Bu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v13 = *v12++;
        data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (v15 = v14[5]) != 0)
  {
    v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v16);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 < 0xDu)
  {
    LODWORD(v18) = 0;
  }
  else
  {
    v18 = v17[6];
    if (v18)
      LODWORD(v18) = *((unsigned __int8 *)a1 + v18);
  }
  data = v18;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_Texture2dArrayType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532485) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Texture2dArrayType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  int data;

  CC_SHA256_Update(c, "AirReflection.Texture2dArrayType", 0x20u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v13 = *v12++;
        data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (v15 = v14[5]) != 0)
  {
    v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v16);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 < 0xDu)
  {
    LODWORD(v18) = 0;
  }
  else
  {
    v18 = v17[6];
    if (v18)
      LODWORD(v18) = *((unsigned __int8 *)a1 + v18);
  }
  data = v18;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_Texture3dType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532486) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Texture3dType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  int data;

  CC_SHA256_Update(c, "AirReflection.Texture3dType", 0x1Bu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v13 = *v12++;
        data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (v15 = v14[5]) != 0)
  {
    v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v16);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 < 0xDu)
  {
    LODWORD(v18) = 0;
  }
  else
  {
    v18 = v17[6];
    if (v18)
      LODWORD(v18) = *((unsigned __int8 *)a1 + v18);
  }
  data = v18;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_TextureCubeType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532487) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::TextureCubeType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  int data;

  CC_SHA256_Update(c, "AirReflection.TextureCubeType", 0x1Du);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v13 = *v12++;
        data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (v15 = v14[5]) != 0)
  {
    v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v16);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 < 0xDu)
  {
    LODWORD(v18) = 0;
  }
  else
  {
    v18 = v17[6];
    if (v18)
      LODWORD(v18) = *((unsigned __int8 *)a1 + v18);
  }
  data = v18;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_TextureCubeArrayType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532488) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::TextureCubeArrayType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  int data;

  CC_SHA256_Update(c, "AirReflection.TextureCubeArrayType", 0x22u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v13 = *v12++;
        data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (v15 = v14[5]) != 0)
  {
    v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v16);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 < 0xDu)
  {
    LODWORD(v18) = 0;
  }
  else
  {
    v18 = v17[6];
    if (v18)
      LODWORD(v18) = *((unsigned __int8 *)a1 + v18);
  }
  data = v18;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_Texture2dMsType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532489) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Texture2dMsType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  int data;

  CC_SHA256_Update(c, "AirReflection.Texture2dMsType", 0x1Du);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v13 = *v12++;
        data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (v15 = v14[5]) != 0)
  {
    v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v16);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 < 0xDu)
  {
    LODWORD(v18) = 0;
  }
  else
  {
    v18 = v17[6];
    if (v18)
      LODWORD(v18) = *((unsigned __int8 *)a1 + v18);
  }
  data = v18;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_Texture2dMsArrayType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532490) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Texture2dMsArrayType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  int data;

  CC_SHA256_Update(c, "AirReflection.Texture2dMsArrayType", 0x22u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v13 = *v12++;
        data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (v15 = v14[5]) != 0)
  {
    v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v16);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 < 0xDu)
  {
    LODWORD(v18) = 0;
  }
  else
  {
    v18 = v17[6];
    if (v18)
      LODWORD(v18) = *((unsigned __int8 *)a1 + v18);
  }
  data = v18;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_TextureBuffer1dType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532491) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::TextureBuffer1dType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  int data;

  CC_SHA256_Update(c, "AirReflection.TextureBuffer1dType", 0x21u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v13 = *v12++;
        data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (v15 = v14[5]) != 0)
  {
    v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v16);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 < 0xDu)
  {
    LODWORD(v18) = 0;
  }
  else
  {
    v18 = v17[6];
    if (v18)
      LODWORD(v18) = *((unsigned __int8 *)a1 + v18);
  }
  data = v18;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_Depth2dType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532492) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Depth2dType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  int data;

  CC_SHA256_Update(c, "AirReflection.Depth2dType", 0x19u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v13 = *v12++;
        data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (v15 = v14[5]) != 0)
  {
    v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v16);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 < 0xDu)
  {
    LODWORD(v18) = 0;
  }
  else
  {
    v18 = v17[6];
    if (v18)
      LODWORD(v18) = *((unsigned __int8 *)a1 + v18);
  }
  data = v18;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_Depth2dArrayType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532493) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Depth2dArrayType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  int data;

  CC_SHA256_Update(c, "AirReflection.Depth2dArrayType", 0x1Eu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v13 = *v12++;
        data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (v15 = v14[5]) != 0)
  {
    v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v16);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 < 0xDu)
  {
    LODWORD(v18) = 0;
  }
  else
  {
    v18 = v17[6];
    if (v18)
      LODWORD(v18) = *((unsigned __int8 *)a1 + v18);
  }
  data = v18;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_DepthCubeType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532494) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::DepthCubeType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  int data;

  CC_SHA256_Update(c, "AirReflection.DepthCubeType", 0x1Bu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v13 = *v12++;
        data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (v15 = v14[5]) != 0)
  {
    v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v16);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 < 0xDu)
  {
    LODWORD(v18) = 0;
  }
  else
  {
    v18 = v17[6];
    if (v18)
      LODWORD(v18) = *((unsigned __int8 *)a1 + v18);
  }
  data = v18;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_DepthCubeArrayType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532495) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::DepthCubeArrayType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  int data;

  CC_SHA256_Update(c, "AirReflection.DepthCubeArrayType", 0x20u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v13 = *v12++;
        data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (v15 = v14[5]) != 0)
  {
    v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v16);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 < 0xDu)
  {
    LODWORD(v18) = 0;
  }
  else
  {
    v18 = v17[6];
    if (v18)
      LODWORD(v18) = *((unsigned __int8 *)a1 + v18);
  }
  data = v18;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_Depth2dMsType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532496) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Depth2dMsType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  int data;

  CC_SHA256_Update(c, "AirReflection.Depth2dMsType", 0x1Bu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v13 = *v12++;
        data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (v15 = v14[5]) != 0)
  {
    v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v16);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 < 0xDu)
  {
    LODWORD(v18) = 0;
  }
  else
  {
    v18 = v17[6];
    if (v18)
      LODWORD(v18) = *((unsigned __int8 *)a1 + v18);
  }
  data = v18;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_Depth2dMsArrayType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532497) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Depth2dMsArrayType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  int data;

  CC_SHA256_Update(c, "AirReflection.Depth2dMsArrayType", 0x20u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v13 = *v12++;
        data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (v15 = v14[5]) != 0)
  {
    v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v16);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 < 0xDu)
  {
    LODWORD(v18) = 0;
  }
  else
  {
    v18 = v17[6];
    if (v18)
      LODWORD(v18) = *((unsigned __int8 *)a1 + v18);
  }
  data = v18;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_SamplerType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532498) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::SamplerType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t result;
  uint64_t v12;
  int *v13;
  int v14;
  int data;

  CC_SHA256_Update(c, "AirReflection.SamplerType", 0x19u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    result = CC_SHA256_Update(c, &data, 4u);
    v12 = *v10;
    if ((_DWORD)v12)
    {
      v13 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v14 = *v13++;
        data = v14;
        result = CC_SHA256_Update(c, &data, 4u);
        --v12;
      }
      while (v12);
    }
  }
  else
  {
    data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t AirReflection::Node::node_as_PatchControlPointType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532499) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::PatchControlPointType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;
  uint64_t v16;
  int data;

  CC_SHA256_Update(c, "AirReflection.PatchControlPointType", 0x23u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v13 = *v12++;
        data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (v15 = v14[5]) != 0)
  {
    v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v16);
  }
  else
  {
    data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_ImageblockType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532500) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ImageblockType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned __int16 *v14;
  uint64_t v15;
  unsigned __int16 *v16;
  unsigned __int16 v17;
  uint64_t v18;
  int data;

  CC_SHA256_Update(c, "AirReflection.ImageblockType", 0x1Cu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v13 = *v12++;
        data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 < 0xBu)
  {
    LODWORD(v15) = 0;
  }
  else
  {
    v15 = v14[5];
    if (v15)
      LODWORD(v15) = *((unsigned __int8 *)a1 + v15);
  }
  data = v15;
  CC_SHA256_Update(c, &data, 4u);
  v16 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v16 >= 0xDu && (v17 = v16[6]) != 0)
  {
    v18 = v17;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v18);
  }
  else
  {
    data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_R8UNormType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532501) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::R8UNormType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;
  uint64_t v16;
  int data;

  CC_SHA256_Update(c, "AirReflection.R8UNormType", 0x19u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v13 = *v12++;
        data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (v15 = v14[5]) != 0)
  {
    v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v16);
  }
  else
  {
    data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_R8SNormType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532502) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::R8SNormType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;
  uint64_t v16;
  int data;

  CC_SHA256_Update(c, "AirReflection.R8SNormType", 0x19u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v13 = *v12++;
        data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (v15 = v14[5]) != 0)
  {
    v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v16);
  }
  else
  {
    data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_R16UNormType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532503) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::R16UNormType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;
  uint64_t v16;
  int data;

  CC_SHA256_Update(c, "AirReflection.R16UNormType", 0x1Au);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v13 = *v12++;
        data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (v15 = v14[5]) != 0)
  {
    v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v16);
  }
  else
  {
    data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_R16SNormType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532504) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::R16SNormType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;
  uint64_t v16;
  int data;

  CC_SHA256_Update(c, "AirReflection.R16SNormType", 0x1Au);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v13 = *v12++;
        data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (v15 = v14[5]) != 0)
  {
    v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v16);
  }
  else
  {
    data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_RG8UNormType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532505) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::RG8UNormType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;
  uint64_t v16;
  int data;

  CC_SHA256_Update(c, "AirReflection.RG8UNormType", 0x1Au);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v13 = *v12++;
        data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (v15 = v14[5]) != 0)
  {
    v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v16);
  }
  else
  {
    data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_RG8SNormType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532506) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::RG8SNormType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;
  uint64_t v16;
  int data;

  CC_SHA256_Update(c, "AirReflection.RG8SNormType", 0x1Au);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v13 = *v12++;
        data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (v15 = v14[5]) != 0)
  {
    v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v16);
  }
  else
  {
    data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_RG16UNormType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532507) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::RG16UNormType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;
  uint64_t v16;
  int data;

  CC_SHA256_Update(c, "AirReflection.RG16UNormType", 0x1Bu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v13 = *v12++;
        data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (v15 = v14[5]) != 0)
  {
    v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v16);
  }
  else
  {
    data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_RG16SNormType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532508) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::RG16SNormType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;
  uint64_t v16;
  int data;

  CC_SHA256_Update(c, "AirReflection.RG16SNormType", 0x1Bu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v13 = *v12++;
        data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (v15 = v14[5]) != 0)
  {
    v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v16);
  }
  else
  {
    data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_RGBA8UNormType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532509) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::RGBA8UNormType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;
  uint64_t v16;
  int data;

  CC_SHA256_Update(c, "AirReflection.RGBA8UNormType", 0x1Cu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v13 = *v12++;
        data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (v15 = v14[5]) != 0)
  {
    v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v16);
  }
  else
  {
    data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_RGBA8SNormType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532510) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::RGBA8SNormType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;
  uint64_t v16;
  int data;

  CC_SHA256_Update(c, "AirReflection.RGBA8SNormType", 0x1Cu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v13 = *v12++;
        data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (v15 = v14[5]) != 0)
  {
    v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v16);
  }
  else
  {
    data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_RGBA16UNormType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532511) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::RGBA16UNormType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;
  uint64_t v16;
  int data;

  CC_SHA256_Update(c, "AirReflection.RGBA16UNormType", 0x1Du);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v13 = *v12++;
        data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (v15 = v14[5]) != 0)
  {
    v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v16);
  }
  else
  {
    data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_RGBA16SNormType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532512) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::RGBA16SNormType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;
  uint64_t v16;
  int data;

  CC_SHA256_Update(c, "AirReflection.RGBA16SNormType", 0x1Du);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v13 = *v12++;
        data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (v15 = v14[5]) != 0)
  {
    v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v16);
  }
  else
  {
    data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_SRGBA8UNormType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532513) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::SRGBA8UNormType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;
  uint64_t v16;
  int data;

  CC_SHA256_Update(c, "AirReflection.SRGBA8UNormType", 0x1Du);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v13 = *v12++;
        data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (v15 = v14[5]) != 0)
  {
    v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v16);
  }
  else
  {
    data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_RGB10A2Type(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532514) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::RGB10A2Type::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;
  uint64_t v16;
  int data;

  CC_SHA256_Update(c, "AirReflection.RGB10A2Type", 0x19u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v13 = *v12++;
        data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (v15 = v14[5]) != 0)
  {
    v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v16);
  }
  else
  {
    data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_RG11B10FType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532515) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::RG11B10FType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;
  uint64_t v16;
  int data;

  CC_SHA256_Update(c, "AirReflection.RG11B10FType", 0x1Au);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v13 = *v12++;
        data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (v15 = v14[5]) != 0)
  {
    v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v16);
  }
  else
  {
    data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_RGB9E5Type(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532516) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::RGB9E5Type::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;
  uint64_t v16;
  int data;

  CC_SHA256_Update(c, "AirReflection.RGB9E5Type", 0x18u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v13 = *v12++;
        data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (v15 = v14[5]) != 0)
  {
    v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v16);
  }
  else
  {
    data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_CommandBufferType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532517) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::CommandBufferType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t result;
  uint64_t v12;
  int *v13;
  int v14;
  int data;

  CC_SHA256_Update(c, "AirReflection.CommandBufferType", 0x1Fu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    result = CC_SHA256_Update(c, &data, 4u);
    v12 = *v10;
    if ((_DWORD)v12)
    {
      v13 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v14 = *v13++;
        data = v14;
        result = CC_SHA256_Update(c, &data, 4u);
        --v12;
      }
      while (v12);
    }
  }
  else
  {
    data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t AirReflection::Node::node_as_ComputePipelineStateType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532518) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ComputePipelineStateType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t result;
  uint64_t v12;
  int *v13;
  int v14;
  int data;

  CC_SHA256_Update(c, "AirReflection.ComputePipelineStateType", 0x26u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    result = CC_SHA256_Update(c, &data, 4u);
    v12 = *v10;
    if ((_DWORD)v12)
    {
      v13 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v14 = *v13++;
        data = v14;
        result = CC_SHA256_Update(c, &data, 4u);
        --v12;
      }
      while (v12);
    }
  }
  else
  {
    data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t AirReflection::Node::node_as_RenderPipelineStateType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532519) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::RenderPipelineStateType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t result;
  uint64_t v12;
  int *v13;
  int v14;
  int data;

  CC_SHA256_Update(c, "AirReflection.RenderPipelineStateType", 0x25u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    result = CC_SHA256_Update(c, &data, 4u);
    v12 = *v10;
    if ((_DWORD)v12)
    {
      v13 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v14 = *v13++;
        data = v14;
        result = CC_SHA256_Update(c, &data, 4u);
        --v12;
      }
      while (v12);
    }
  }
  else
  {
    data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t AirReflection::Node::node_as_InterpolantType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532520) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::InterpolantType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned __int16 *v14;
  uint64_t v15;
  unsigned __int16 *v16;
  unsigned __int16 v17;
  uint64_t v18;
  int data;

  CC_SHA256_Update(c, "AirReflection.InterpolantType", 0x1Du);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v13 = *v12++;
        data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 < 0xBu)
  {
    LOBYTE(v15) = 0;
  }
  else
  {
    v15 = v14[5];
    if (v15)
      LOBYTE(v15) = *((_BYTE *)a1 + v15) != 0;
  }
  LOBYTE(data) = v15;
  CC_SHA256_Update(c, &data, 1u);
  v16 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v16 >= 0xDu && (v17 = v16[6]) != 0)
  {
    v18 = v17;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v18);
  }
  else
  {
    data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_VisibleFunctionTableType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532521) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::VisibleFunctionTableType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;
  uint64_t v16;
  int data;

  CC_SHA256_Update(c, "AirReflection.VisibleFunctionTableType", 0x26u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v13 = *v12++;
        data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (v15 = v14[5]) != 0)
  {
    v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v16);
  }
  else
  {
    data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_IntersectionFunctionTableType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532522) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::IntersectionFunctionTableType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned __int16 *v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  unsigned __int16 *v18;
  uint64_t v19;
  unsigned __int16 *v20;
  uint64_t v21;
  unsigned __int16 *v22;
  uint64_t v23;
  unsigned __int16 *v24;
  uint64_t v25;
  unsigned __int16 *v26;
  uint64_t v27;
  unsigned __int16 *v28;
  uint64_t v29;
  int data;

  CC_SHA256_Update(c, "AirReflection.IntersectionFunctionTableType", 0x2Bu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v13 = *v12++;
        data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 < 0xBu)
  {
    LOBYTE(v15) = 0;
  }
  else
  {
    v15 = v14[5];
    if (v15)
      LOBYTE(v15) = *((_BYTE *)a1 + v15) != 0;
  }
  LOBYTE(data) = v15;
  CC_SHA256_Update(c, &data, 1u);
  v16 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v16 < 0xDu)
  {
    LOBYTE(v17) = 0;
  }
  else
  {
    v17 = v16[6];
    if (v17)
      LOBYTE(v17) = *((_BYTE *)a1 + v17) != 0;
  }
  LOBYTE(data) = v17;
  CC_SHA256_Update(c, &data, 1u);
  v18 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v18 < 0xFu)
  {
    LOBYTE(v19) = 0;
  }
  else
  {
    v19 = v18[7];
    if (v19)
      LOBYTE(v19) = *((_BYTE *)a1 + v19) != 0;
  }
  LOBYTE(data) = v19;
  CC_SHA256_Update(c, &data, 1u);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0x11u)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v20[8];
    if (v21)
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  LOBYTE(data) = v21;
  CC_SHA256_Update(c, &data, 1u);
  v22 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v22 < 0x13u)
  {
    LOBYTE(v23) = 0;
  }
  else
  {
    v23 = v22[9];
    if (v23)
      LOBYTE(v23) = *((_BYTE *)a1 + v23) != 0;
  }
  LOBYTE(data) = v23;
  CC_SHA256_Update(c, &data, 1u);
  v24 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v24 < 0x15u)
  {
    LOBYTE(v25) = 0;
  }
  else
  {
    v25 = v24[10];
    if (v25)
      LOBYTE(v25) = *((_BYTE *)a1 + v25) != 0;
  }
  LOBYTE(data) = v25;
  CC_SHA256_Update(c, &data, 1u);
  v26 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v26 < 0x17u)
  {
    LOBYTE(v27) = 0;
  }
  else
  {
    v27 = v26[11];
    if (v27)
      LOBYTE(v27) = *((_BYTE *)a1 + v27) != 0;
  }
  LOBYTE(data) = v27;
  CC_SHA256_Update(c, &data, 1u);
  v28 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v28 < 0x19u)
  {
    LODWORD(v29) = 0;
  }
  else
  {
    v29 = v28[12];
    if (v29)
      LODWORD(v29) = *(int *)((char *)a1 + v29);
  }
  data = v29;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_AccelerationStructureType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532523) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::AccelerationStructureType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned __int16 *v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  unsigned __int16 *v18;
  uint64_t v19;
  int data;

  CC_SHA256_Update(c, "AirReflection.AccelerationStructureType", 0x27u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v13 = *v12++;
        data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 < 0xBu)
  {
    LOBYTE(v15) = 0;
  }
  else
  {
    v15 = v14[5];
    if (v15)
      LOBYTE(v15) = *((_BYTE *)a1 + v15) != 0;
  }
  LOBYTE(data) = v15;
  CC_SHA256_Update(c, &data, 1u);
  v16 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v16 < 0xDu)
  {
    LOBYTE(v17) = 0;
  }
  else
  {
    v17 = v16[6];
    if (v17)
      LOBYTE(v17) = *((_BYTE *)a1 + v17) != 0;
  }
  LOBYTE(data) = v17;
  CC_SHA256_Update(c, &data, 1u);
  v18 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v18 < 0xFu)
  {
    LOBYTE(v19) = 0;
  }
  else
  {
    v19 = v18[7];
    if (v19)
      LOBYTE(v19) = *((_BYTE *)a1 + v19) != 0;
  }
  LOBYTE(data) = v19;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t AirReflection::Node::node_as_MeshType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532524) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::MeshType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;
  uint64_t v16;
  unsigned __int16 *v17;
  unsigned __int16 v18;
  uint64_t v19;
  unsigned __int16 *v20;
  uint64_t v21;
  unsigned __int16 *v22;
  uint64_t v23;
  unsigned __int16 *v24;
  uint64_t v25;
  int data;

  CC_SHA256_Update(c, "AirReflection.MeshType", 0x16u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v13 = *v12++;
        data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (v15 = v14[5]) != 0)
  {
    v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v16);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 >= 0xDu && (v18 = v17[6]) != 0)
  {
    v19 = v18;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v19);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xFu)
  {
    LODWORD(v21) = 0;
  }
  else
  {
    v21 = v20[7];
    if (v21)
      LODWORD(v21) = *(int *)((char *)a1 + v21);
  }
  data = v21;
  CC_SHA256_Update(c, &data, 4u);
  v22 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v22 < 0x11u)
  {
    LODWORD(v23) = 0;
  }
  else
  {
    v23 = v22[8];
    if (v23)
      LODWORD(v23) = *(int *)((char *)a1 + v23);
  }
  data = v23;
  CC_SHA256_Update(c, &data, 4u);
  v24 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v24 < 0x13u)
  {
    LODWORD(v25) = 0;
  }
  else
  {
    v25 = v24[9];
    if (v25)
      LODWORD(v25) = *((unsigned __int8 *)a1 + v25);
  }
  data = v25;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_MeshGridPropertiesType(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532525) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::MeshGridPropertiesType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t result;
  uint64_t v12;
  int *v13;
  int v14;
  int data;

  CC_SHA256_Update(c, "AirReflection.MeshGridPropertiesType", 0x24u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (v9 = v8[4]) != 0)
  {
    v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    data = *v10;
    result = CC_SHA256_Update(c, &data, 4u);
    v12 = *v10;
    if ((_DWORD)v12)
    {
      v13 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v14 = *v13++;
        data = v14;
        result = CC_SHA256_Update(c, &data, 4u);
        --v12;
      }
      while (v12);
    }
  }
  else
  {
    data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t AirReflection::Node::node_as_AddressSpaceTypeQual(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 5 || !v1[2])
    return 0;
  v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 536576)
  {
    v3 = v1[3];
    if (v1[3])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t AirReflection::AddressSpaceTypeQual::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  int data;

  CC_SHA256_Update(c, "AirReflection.AddressSpaceTypeQual", 0x22u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *((unsigned __int8 *)a1 + v5);
  }
  data = v5;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_ClipDistanceAttr(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 5 || !v1[2])
    return 0;
  v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 540672)
  {
    v3 = v1[3];
    if (v1[3])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t AirReflection::Node::node_as_FunctionConstantPredicateAttr(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 540673) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::FunctionConstantPredicateAttr::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  unsigned __int16 v5;
  int data;

  CC_SHA256_Update(c, "AirReflection.FunctionConstantPredicateAttr", 0x2Bu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u)
  {
    v5 = v4[2];
    if (v5)
      return AirReflection::BoolValue::HashImpl((_BYTE *)a1 + v5, c);
  }
  data = 0;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_LocationIndexAttr(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 540674) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::LocationIndexAttr::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  unsigned __int16 v5;
  uint64_t v6;
  unsigned __int16 *v7;
  unsigned __int16 v8;
  uint64_t v9;
  int data;

  CC_SHA256_Update(c, "AirReflection.LocationIndexAttr", 0x1Fu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
  {
    v6 = v5;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v6);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v7 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v7 >= 7u && (v8 = v7[3]) != 0)
  {
    v9 = v8;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v9);
  }
  else
  {
    data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_PointSizeAttr(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 540675) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_PositionAttr(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 540676) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_PrimitiveCulledAttr(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 540677) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_PrimitiveIDAttr(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 540678) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_RenderTargetAttr(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 540679) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::RenderTargetAttr::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  unsigned __int16 v5;
  uint64_t v6;
  int *p_data;
  int v9;
  int data;

  CC_SHA256_Update(c, "AirReflection.RenderTargetAttr", 0x1Eu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
  {
    v6 = v5;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    v9 = *(int *)((char *)a1 + v6);
    p_data = &v9;
  }
  else
  {
    data = 0;
    p_data = &data;
  }
  return CC_SHA256_Update(c, p_data, 4u);
}

uint64_t AirReflection::Node::node_as_RenderTargetArrayIndexAttr(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 540680) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_ViewportArrayIndexAttr(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 540681) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_UserAttr(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 540682) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::UserAttr::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  int data;

  CC_SHA256_Update(c, "AirReflection.UserAttr", 0x16u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u)
  {
    v5 = v4[2];
    if (v5)
      return CC_SHA256_Update(c, (char *)a1 + v5 + *(unsigned int *)((char *)a1 + v5) + 4, *(int *)((char *)a1 + v5 + *(unsigned int *)((char *)a1 + v5)));
  }
  data = 0;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_InvariantAttr(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 540683) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_SharedAttr(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 540684) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_MeshEmulationValueGroup(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 5 || !v1[2])
    return 0;
  v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 544768)
  {
    v3 = v1[3];
    if (v1[3])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t AirReflection::MeshEmulation::ValueGroup::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned __int16 *v10;
  unsigned __int16 v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  int data;

  CC_SHA256_Update(c, "AirReflection.MeshEmulation.ValueGroup", 0x26u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 < 9u)
  {
    LODWORD(v9) = 0;
  }
  else
  {
    v9 = v8[4];
    if (v9)
      LODWORD(v9) = *(int *)((char *)a1 + v9);
  }
  data = v9;
  CC_SHA256_Update(c, &data, 4u);
  v10 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v10 >= 0xBu && (v11 = v10[5]) != 0)
  {
    v12 = v11;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v12);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 < 0xDu)
  {
    LODWORD(v14) = 0;
  }
  else
  {
    v14 = v13[6];
    if (v14)
      LODWORD(v14) = *(int *)((char *)a1 + v14);
  }
  data = v14;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_MeshEmulationBlock(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 544769) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::MeshEmulation::Block::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t result;
  uint64_t v8;
  int *v9;
  int v10;
  int data;
  int v12;
  int v13;

  CC_SHA256_Update(c, "AirReflection.MeshEmulation.Block", 0x21u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
  {
    v6 = (unsigned int *)((char *)a1 + v5 + *(unsigned int *)((char *)a1 + v5));
    data = *v6;
    result = CC_SHA256_Update(c, &data, 4u);
    v8 = *v6;
    if ((_DWORD)v8)
    {
      v9 = (int *)(v6 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v10 = *v9++;
        v12 = v10;
        result = CC_SHA256_Update(c, &v12, 4u);
        --v8;
      }
      while (v8);
    }
  }
  else
  {
    v13 = 0;
    return CC_SHA256_Update(c, &v13, 4u);
  }
  return result;
}

uint64_t AirReflection::Node::node_as_MeshEmulationMeshLayout(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 544770) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::MeshEmulation::MeshLayout::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned __int16 *v10;
  uint64_t v11;
  unsigned __int16 *v12;
  unsigned __int16 v13;
  uint64_t v14;
  unsigned __int16 *v15;
  unsigned __int16 v16;
  uint64_t v17;
  int data;

  CC_SHA256_Update(c, "AirReflection.MeshEmulation.MeshLayout", 0x26u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  data = v7;
  CC_SHA256_Update(c, &data, 4u);
  v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 < 9u)
  {
    LODWORD(v9) = 0;
  }
  else
  {
    v9 = v8[4];
    if (v9)
      LODWORD(v9) = *(int *)((char *)a1 + v9);
  }
  data = v9;
  CC_SHA256_Update(c, &data, 4u);
  v10 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v10 < 0xBu)
  {
    LODWORD(v11) = 0;
  }
  else
  {
    v11 = v10[5];
    if (v11)
      LODWORD(v11) = *(int *)((char *)a1 + v11);
  }
  data = v11;
  CC_SHA256_Update(c, &data, 4u);
  v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 >= 0xDu && (v13 = v12[6]) != 0)
  {
    v14 = v13;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v14);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v15 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v15 >= 0xFu && (v16 = v15[7]) != 0)
  {
    v17 = v16;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v17);
  }
  else
  {
    data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_MeshEmulationMeshKernel(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 544771) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::MeshEmulation::MeshKernel::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  int *p_data;
  CC_LONG v9;
  CC_SHA256_CTX *v10;
  unsigned __int16 *v11;
  uint64_t v12;
  unsigned __int16 *v13;
  unsigned __int16 v14;
  uint64_t v15;
  int data;

  CC_SHA256_Update(c, "AirReflection.MeshEmulation.MeshKernel", 0x26u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
  {
    v6 = (unsigned int *)((char *)a1 + v5);
    v7 = *v6;
    p_data = (int *)((char *)v6 + v7 + 4);
    v9 = *(unsigned int *)((char *)v6 + v7);
    v10 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v10 = c;
    v9 = 4;
  }
  CC_SHA256_Update(v10, p_data, v9);
  v11 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v11 < 7u)
  {
    LODWORD(v12) = 0;
  }
  else
  {
    v12 = v11[3];
    if (v12)
      LODWORD(v12) = *(int *)((char *)a1 + v12);
  }
  data = v12;
  CC_SHA256_Update(c, &data, 4u);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = v14;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v15);
  }
  else
  {
    data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_MeshEmulationMeshVertex(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 544772) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::MeshEmulation::MeshVertex::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  int *p_data;
  CC_LONG v9;
  CC_SHA256_CTX *v10;
  unsigned __int16 *v11;
  uint64_t v12;
  unsigned __int16 *v13;
  unsigned __int16 v14;
  uint64_t v15;
  int data;

  CC_SHA256_Update(c, "AirReflection.MeshEmulation.MeshVertex", 0x26u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
  {
    v6 = (unsigned int *)((char *)a1 + v5);
    v7 = *v6;
    p_data = (int *)((char *)v6 + v7 + 4);
    v9 = *(unsigned int *)((char *)v6 + v7);
    v10 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v10 = c;
    v9 = 4;
  }
  CC_SHA256_Update(v10, p_data, v9);
  v11 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v11 < 7u)
  {
    LODWORD(v12) = 0;
  }
  else
  {
    v12 = v11[3];
    if (v12)
      LODWORD(v12) = *(int *)((char *)a1 + v12);
  }
  data = v12;
  CC_SHA256_Update(c, &data, 4u);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = v14;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v15);
  }
  else
  {
    data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_MeshEmulationObjectKernel(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 544773) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::MeshEmulation::ObjectKernel::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  int *p_data;
  CC_LONG v9;
  CC_SHA256_CTX *v10;
  unsigned __int16 *v11;
  uint64_t v12;
  unsigned __int16 *v13;
  unsigned __int16 v14;
  uint64_t v15;
  int data;

  CC_SHA256_Update(c, "AirReflection.MeshEmulation.ObjectKernel", 0x28u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
  {
    v6 = (unsigned int *)((char *)a1 + v5);
    v7 = *v6;
    p_data = (int *)((char *)v6 + v7 + 4);
    v9 = *(unsigned int *)((char *)v6 + v7);
    v10 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v10 = c;
    v9 = 4;
  }
  CC_SHA256_Update(v10, p_data, v9);
  v11 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v11 < 7u)
  {
    LODWORD(v12) = 0;
  }
  else
  {
    v12 = v11[3];
    if (v12)
      LODWORD(v12) = *(int *)((char *)a1 + v12);
  }
  data = v12;
  CC_SHA256_Update(c, &data, 4u);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (v14 = v13[4]) != 0)
  {
    v15 = v14;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v15);
  }
  else
  {
    data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_MeshEmulationFragmentAnalysisResult(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 544774) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::MeshEmulation::FragmentAnalysisResult::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  int *p_data;
  CC_LONG v9;
  CC_SHA256_CTX *v10;
  unsigned __int16 *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t result;
  uint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  int data;
  int v20;
  int v21;

  CC_SHA256_Update(c, "AirReflection.MeshEmulation.FragmentAnalysisResult", 0x32u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
  {
    v6 = (unsigned int *)((char *)a1 + v5);
    v7 = *v6;
    p_data = (int *)((char *)v6 + v7 + 4);
    v9 = *(unsigned int *)((char *)v6 + v7);
    v10 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v10 = c;
    v9 = 4;
  }
  CC_SHA256_Update(v10, p_data, v9);
  v11 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v11 >= 7u && (v12 = v11[3]) != 0)
  {
    v13 = (unsigned int *)((char *)a1 + v12 + *(unsigned int *)((char *)a1 + v12));
    v20 = *v13;
    result = CC_SHA256_Update(c, &v20, 4u);
    v15 = *v13;
    if ((_DWORD)v15)
    {
      v16 = v13 + 1;
      v17 = v13 + 1;
      do
      {
        v18 = *v17++;
        result = CC_SHA256_Update(c, (char *)v16 + v18 + 4, *(unsigned int *)((char *)v16 + v18));
        v16 = v17;
        --v15;
      }
      while (v15);
    }
  }
  else
  {
    v21 = 0;
    return CC_SHA256_Update(c, &v21, 4u);
  }
  return result;
}

uint64_t AirReflection::StitchingInfo::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  unsigned __int16 v5;
  uint64_t v6;
  unsigned __int16 *v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t result;
  uint64_t v11;
  int *v12;
  int v13;
  int data;

  CC_SHA256_Update(c, "AirReflection.StitchingInfo", 0x1Bu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
  {
    v6 = v5;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v6);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v7 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v7 >= 7u && (v8 = v7[3]) != 0)
  {
    v9 = (unsigned int *)((char *)a1 + v8 + *(unsigned int *)((char *)a1 + v8));
    data = *v9;
    result = CC_SHA256_Update(c, &data, 4u);
    v11 = *v9;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v9 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        v13 = *v12++;
        data = v13;
        result = CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t AirReflection::StructTypeInfoField::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  unsigned __int16 v5;
  uint64_t v6;
  unsigned __int16 *v7;
  uint64_t v8;
  unsigned __int16 *v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int *p_data;
  CC_LONG v18;
  CC_SHA256_CTX *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  int *v24;
  CC_LONG v25;
  CC_SHA256_CTX *v26;
  unsigned __int16 *v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  int *v31;
  CC_LONG v32;
  CC_SHA256_CTX *v33;
  unsigned __int16 *v34;
  unsigned __int16 v35;
  uint64_t v36;
  unsigned __int16 *v37;
  unsigned __int16 v38;
  uint64_t v39;
  unsigned __int16 *v40;
  unsigned __int16 v41;
  uint64_t v42;
  unsigned __int16 *v43;
  unsigned __int16 v44;
  uint64_t v45;
  unsigned __int16 *v46;
  unsigned __int16 v47;
  uint64_t v48;
  int data;

  CC_SHA256_Update(c, "AirReflection.StructTypeInfoField", 0x21u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
  {
    v6 = v5;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v6);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v7 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v7 < 7u)
  {
    LODWORD(v8) = 0;
  }
  else
  {
    v8 = v7[3];
    if (v8)
      LODWORD(v8) = *(int *)((char *)a1 + v8);
  }
  data = v8;
  CC_SHA256_Update(c, &data, 4u);
  v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 < 9u)
  {
    LODWORD(v10) = 0;
  }
  else
  {
    v10 = v9[4];
    if (v10)
      LODWORD(v10) = *(int *)((char *)a1 + v10);
  }
  data = v10;
  CC_SHA256_Update(c, &data, 4u);
  v11 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v11 < 0xBu)
  {
    LODWORD(v12) = 0;
  }
  else
  {
    v12 = v11[5];
    if (v12)
      LODWORD(v12) = *(int *)((char *)a1 + v12);
  }
  data = v12;
  CC_SHA256_Update(c, &data, 4u);
  v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 0xDu && (v14 = v13[6]) != 0)
  {
    v15 = (unsigned int *)((char *)a1 + v14);
    v16 = *v15;
    p_data = (int *)((char *)v15 + v16 + 4);
    v18 = *(unsigned int *)((char *)v15 + v16);
    v19 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v19 = c;
    v18 = 4;
  }
  CC_SHA256_Update(v19, p_data, v18);
  v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 >= 0xFu && (v21 = v20[7]) != 0)
  {
    v22 = (unsigned int *)((char *)a1 + v21);
    v23 = *v22;
    v24 = (int *)((char *)v22 + v23 + 4);
    v25 = *(unsigned int *)((char *)v22 + v23);
    v26 = c;
  }
  else
  {
    data = 0;
    v24 = &data;
    v26 = c;
    v25 = 4;
  }
  CC_SHA256_Update(v26, v24, v25);
  v27 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v27 >= 0x11u && (v28 = v27[8]) != 0)
  {
    v29 = (unsigned int *)((char *)a1 + v28);
    v30 = *v29;
    v31 = (int *)((char *)v29 + v30 + 4);
    v32 = *(unsigned int *)((char *)v29 + v30);
    v33 = c;
  }
  else
  {
    data = 0;
    v31 = &data;
    v33 = c;
    v32 = 4;
  }
  CC_SHA256_Update(v33, v31, v32);
  v34 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v34 >= 0x13u && (v35 = v34[9]) != 0)
  {
    v36 = v35;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v36);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v37 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v37 >= 0x15u && (v38 = v37[10]) != 0)
  {
    v39 = v38;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v39);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v40 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v40 >= 0x17u && (v41 = v40[11]) != 0)
  {
    v42 = v41;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v42);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v43 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v43 >= 0x19u && (v44 = v43[12]) != 0)
  {
    v45 = v44;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    data = *(int *)((char *)a1 + v45);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v46 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v46 >= 0x1Bu && (v47 = v46[13]) != 0)
  {
    v48 = v47;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    data = *(int *)((char *)a1 + v48);
  }
  else
  {
    data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::BitfieldInfo::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  int data;
  int v6;
  int v7;

  CC_SHA256_Update(c, "AirReflection.BitfieldInfo", 0x1Au);
  data = *a1;
  CC_SHA256_Update(c, &data, 4u);
  v6 = a1[1];
  CC_SHA256_Update(c, &v6, 4u);
  v7 = a1[2];
  return CC_SHA256_Update(c, &v7, 4u);
}

uint64_t AirReflection::BoolValue::HashImpl(_BYTE *a1, CC_SHA256_CTX *c)
{
  BOOL data;

  CC_SHA256_Update(c, "AirReflection.BoolValue", 0x17u);
  data = *a1 != 0;
  return CC_SHA256_Update(c, &data, 1u);
}

_QWORD *std::vector<unsigned char>::vector(_QWORD *a1, size_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<signed char>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_241014A90(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>>>::__emplace_unique_key_args<CompilerOutputType,CompilerOutputType&,CompilerOutputBlock>(uint64_t a1, char *a2, unsigned __int8 *a3, _OWORD *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  unsigned __int8 *v12;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v9 <= v8)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = (unsigned __int8 *)*v11;
      if (*v11)
      {
        do
        {
          v13 = *((_QWORD *)v12 + 1);
          if (v13 == v8)
          {
            if (v12[16] == v8)
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4)
              break;
          }
          v12 = *(unsigned __int8 **)v12;
        }
        while (v12);
      }
    }
  }
  v12 = (unsigned __int8 *)operator new(0x28uLL);
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = v8;
  v12[16] = *a3;
  *(_OWORD *)(v12 + 24) = *a4;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>>>::__rehash<true>(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v12 = *v21;
LABEL_38:
    *v21 = v12;
    goto LABEL_39;
  }
  *(_QWORD *)v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v20 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v12)
  {
    v22 = *(_QWORD *)(*(_QWORD *)v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_241014CC4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

llvm::Value *MTLAddVertexFetchingToModulePass::convertAttributeToType(uint64_t a1, llvm::Type **a2, uint64_t a3, uint64_t a4, int a5, llvm::Value *ShuffleVector, unsigned int a7, int a8)
{
  const char **v8;
  int v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  unsigned int v19;
  int v20;
  llvm::Type *v21;
  uint64_t v22;
  llvm::Type *v23;
  llvm::IRBuilderBase *v24;
  llvm::Value *v25;
  llvm::Type *v26;
  unsigned int v27;
  llvm::Type *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  llvm::Value *v32;
  llvm::Type *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  llvm::Type *v38;
  uint64_t InsertValue;
  const char *v40;
  const char *v41;
  char *v42;
  llvm::Value *v43;
  uint64_t Int32Ty;
  _QWORD *Cast;
  uint64_t v46;
  llvm::Value *v47;
  uint64_t v48;
  llvm::LLVMContext *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t SExtOrTrunc;
  uint64_t v55;
  _QWORD *v56;
  const char *v57;
  const char *v58;
  char *v59;
  uint64_t v60;
  llvm::Value *v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  llvm::Value *v65;
  const char *v66;
  const char *v67;
  uint64_t v68;
  llvm::Value *v69;
  llvm::LLVMContext *v70;
  llvm::LLVMContext *v71;
  int v72;
  int v73;
  uint64_t v74;
  llvm::LLVMContext *v75;
  uint64_t VectorSplat;
  llvm::LLVMContext *v77;
  llvm::Type *FloatTy;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  char v83;
  llvm::Value *FDiv;
  llvm::LLVMContext *v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  llvm::Value *v93;
  llvm::LLVMContext *v94;
  llvm::Value *v95;
  llvm::Instruction *v96;
  uint64_t InsertElement;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64x2_t v104;
  int64x2_t v105;
  _DWORD *v106;
  int64x2_t v107;
  int32x2_t v108;
  int v109;
  uint64_t v110;
  int v111;
  llvm::LLVMContext *v112;
  uint64_t i;
  llvm::Value *v114;
  llvm::Instruction *v115;
  uint64_t Element;
  char v118;
  llvm::Type *v119;
  char v120;
  int v123;
  int v124;
  uint64_t v125;
  _QWORD v126[2];
  __int128 v127;
  __int128 v128;
  _OWORD v129[2];
  __int16 v130;
  char __str[32];
  __int16 v132;
  uint64_t v133;

  v133 = *MEMORY[0x24BDAC8D0];
  v8 = (const char **)&(&vertexFormats)[2 * a7];
  v125 = *((unsigned __int16 *)v8 + 5);
  if (!*((_WORD *)v8 + 5))
    return 0;
  v15 = *(unsigned __int8 *)(a4 + 8);
  if (v15 == 16)
  {
    v16 = **(_QWORD **)(a4 + 16);
    v17 = *(unsigned __int8 **)(v16 + 24);
    v18 = *(_DWORD *)(v16 + 32);
  }
  else
  {
    v17 = (unsigned __int8 *)a4;
    if ((v15 & 0xFE) == 0x12)
      v17 = **(unsigned __int8 ***)(a4 + 16);
    if (v15 == 18)
      v18 = *(_DWORD *)(a4 + 32);
    else
      v18 = 1;
  }
  v19 = *((_DWORD *)v8 + 3);
  if (v18 >= (int)v125)
    v20 = *((unsigned __int16 *)v8 + 5);
  else
    v20 = v18;
  v21 = (llvm::Type *)v17;
  v124 = v20;
  if (v20 != 1)
    v21 = (llvm::Type *)vectorTypeGet((llvm::Type *)v17);
  v123 = v18;
  if (v19 > 0xF)
    goto LABEL_25;
  if (((1 << v19) & 0xF000) == 0)
  {
    if (((1 << v19) & 0x30) != 0)
    {
      if ((*(_DWORD *)(*(_QWORD *)ShuffleVector + 8) & 0xFE) == 0x12)
      {
        if (*(_DWORD *)(*(_QWORD *)ShuffleVector + 32) == 3)
        {
          v28 = v21;
          v29 = llvm::UndefValue::get();
          v129[0] = xmmword_24105AA50;
          v132 = 257;
          ShuffleVector = (llvm::Value *)llvm::IRBuilderBase::CreateShuffleVector(a3, (uint64_t)ShuffleVector, v29, (uint64_t)v129, 4, (uint64_t)__str);
          v21 = v28;
        }
        goto LABEL_33;
      }
      v23 = *a2;
      v24 = (llvm::IRBuilderBase *)a3;
      v25 = ShuffleVector;
      v26 = v21;
      v27 = 2;
LABEL_32:
      v32 = expandVector(v23, v24, v25, v27);
      v21 = v26;
      ShuffleVector = v32;
      goto LABEL_33;
    }
    if (((1 << v19) & 0x300) != 0)
    {
      v22 = *(_QWORD *)ShuffleVector;
      if (*(_QWORD *)ShuffleVector && *(_BYTE *)(v22 + 8) == 18 && *(_DWORD *)(v22 + 32) == 4)
        goto LABEL_33;
      v23 = *a2;
      v24 = (llvm::IRBuilderBase *)a3;
      v25 = ShuffleVector;
      v26 = v21;
      v27 = 4;
      goto LABEL_32;
    }
LABEL_25:
    v30 = *(_QWORD *)ShuffleVector;
    v31 = 1;
    v119 = v21;
    if (*(_QWORD *)ShuffleVector && *(_BYTE *)(v30 + 8) == 18)
      v31 = *(_DWORD *)(v30 + 32);
    if (v124 < v31)
      ShuffleVector = MTLFrameworkPass::truncateVector(*a2, (llvm::LLVMContext *)a3, ShuffleVector, v124);
    v21 = v119;
  }
LABEL_33:
  v33 = *(llvm::Type **)(a3 + 64);
  v34 = v17[8];
  if (!v17[8])
    goto LABEL_36;
  if (v34 == 13)
  {
    v36 = *(_QWORD *)ShuffleVector;
    v37 = 1;
    v38 = v21;
    if (*(_QWORD *)ShuffleVector && *(_BYTE *)(v36 + 8) == 18)
      v37 = *(_DWORD *)(v36 + 32);
    if (v124 < v37)
      ShuffleVector = MTLFrameworkPass::truncateVector(*(llvm::Type **)(a3 + 64), (llvm::LLVMContext *)a3, ShuffleVector, v124);
    switch(v19)
    {
      case 0u:
      case 1u:
        if (!*(_BYTE *)(a1 + 8)
          || v17 != (unsigned __int8 *)llvm::Type::getInt32Ty(v33, (llvm::LLVMContext *)a2)
          && v17 != (unsigned __int8 *)llvm::Type::getInt16Ty(v33, v70)
          && v17 != (unsigned __int8 *)llvm::Type::getInt1Ty(v33, v71))
        {
          goto LABEL_96;
        }
        if (v124 < 2)
          snprintf(__str, 0x40uLL, "air.convert.%s.%s.f.%s");
        else
          snprintf(__str, 0x40uLL, "air.convert.%s.v%d%s.f.v%d%s");
        SExtOrTrunc = callUnpackFunction((uint64_t)a2, a3, __str, (uint64_t)v38, ShuffleVector);
        goto LABEL_136;
      case 2u:
      case 6u:
      case 0xAu:
        if ((a5 & 1) != 0 || *(_BYTE *)(a1 + 8))
          goto LABEL_117;
        MTLCompilerErrorObject::setFormattedErrorMessage(*(char ***)a1, "Cannot convert attribute from %s to an unsigned integer type", *v8);
        return 0;
      case 3u:
      case 7u:
      case 0xBu:
        if (!a5 || *(_BYTE *)(a1 + 8))
          goto LABEL_119;
        MTLCompilerErrorObject::setFormattedErrorMessage(*(char ***)a1, "Cannot convert attribute from %s to a signed integer type", *v8);
        return 0;
      case 8u:
        if (!*(_BYTE *)(a1 + 8))
          goto LABEL_96;
LABEL_117:
        v130 = 257;
        SExtOrTrunc = (uint64_t)llvm::IRBuilderBase::CreateSExtOrTrunc((llvm::IRBuilderBase *)a3, (llvm::Type **)ShuffleVector, v38, (const llvm::Twine *)v129);
        goto LABEL_136;
      case 9u:
        if (!*(_BYTE *)(a1 + 8))
          goto LABEL_96;
LABEL_119:
        v130 = 257;
        SExtOrTrunc = (uint64_t)llvm::IRBuilderBase::CreateZExtOrTrunc((llvm::IRBuilderBase *)a3, (llvm::Type **)ShuffleVector, v38, (const llvm::Twine *)v129);
LABEL_136:
        ShuffleVector = (llvm::Value *)SExtOrTrunc;
LABEL_137:
        if (v123 > (int)v125)
        {
          if (v124 == 1)
          {
            v127 = 0uLL;
            v128 = 0uLL;
            if (v123 >= 1)
            {
              v91 = 0;
              do
              {
                if (v17[8] == 13)
                  v92 = llvm::ConstantInt::get();
                else
                  v92 = llvm::ConstantFP::get();
                *(_QWORD *)((char *)&v127 + v91) = v92;
                v91 += 8;
              }
              while (8 * v123 != v91);
            }
            v93 = (llvm::Value *)llvm::ConstantVector::get();
            llvm::Type::getInt32Ty(v33, v94);
            v95 = (llvm::Value *)llvm::ConstantInt::get();
            v130 = 257;
            InsertElement = llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)a3, v93, ShuffleVector, v95, (const llvm::Twine *)v129, v96);
          }
          else
          {
            v127 = 0uLL;
            v128 = 0uLL;
            if (v123 >= 1)
            {
              v98 = 0;
              if (v124 <= 1)
                v99 = 1;
              else
                v99 = v124;
              v100 = 8 * v99;
              do
              {
                if (v17[8] == 13)
                  v101 = llvm::ConstantInt::get();
                else
                  v101 = llvm::ConstantFP::get();
                *(_QWORD *)((char *)&v127 + v98) = v101;
                v98 += 8;
              }
              while (v100 != v98);
            }
            v102 = llvm::ConstantVector::get();
            if (v123 > 0)
            {
              v103 = 0;
              v104 = (uint64x2_t)vdupq_n_s64((unint64_t)v123 - 1);
              v105 = (int64x2_t)xmmword_24105AA70;
              v106 = (_DWORD *)v126 + 1;
              v107 = vdupq_n_s64(2uLL);
              do
              {
                v108 = vmovn_s64((int64x2_t)vcgeq_u64(v104, (uint64x2_t)v105));
                if ((v108.i8[0] & 1) != 0)
                {
                  if (v103 >= v124)
                    v109 = v124 + 1;
                  else
                    v109 = v103;
                  *(v106 - 1) = v109;
                }
                if ((v108.i8[4] & 1) != 0)
                {
                  v110 = v103 + 1;
                  if (v103 == 2)
                    v111 = v124;
                  else
                    v111 = v124 + 1;
                  if (v110 >= v124)
                    LODWORD(v110) = v111;
                  *v106 = v110;
                }
                v103 += 2;
                v105 = vaddq_s64(v105, v107);
                v106 += 2;
              }
              while (((v123 + 1) & 0x1FFFFFFFELL) != v103);
            }
            v130 = 257;
            InsertElement = llvm::IRBuilderBase::CreateShuffleVector(a3, (uint64_t)ShuffleVector, v102, (uint64_t)v126, v123, (uint64_t)v129);
          }
          ShuffleVector = (llvm::Value *)InsertElement;
        }
        if (*(_BYTE *)(a4 + 8) != 16)
          return ShuffleVector;
        InsertValue = llvm::UndefValue::get();
        if (v123)
        {
          for (i = 0; i != v123; ++i)
          {
            llvm::Type::getInt32Ty(v33, v112);
            v114 = (llvm::Value *)llvm::ConstantInt::get();
            v130 = 257;
            Element = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)a3, ShuffleVector, v114, (const llvm::Twine *)v129, v115);
            LODWORD(v127) = 0;
            DWORD1(v127) = i;
            v130 = 257;
            InsertValue = llvm::IRBuilderBase::CreateInsertValue(a3, InsertValue, Element, (uint64_t)&v127, 2, (uint64_t)v129);
          }
        }
        return (llvm::Value *)InsertValue;
      default:
LABEL_96:
        MTLCompilerErrorObject::setFormattedErrorMessage(*(char ***)a1, "Cannot convert attribute from %s to int%d or uint%d", *v8, v123, v123);
        return 0;
    }
  }
  if (v34 != 2)
  {
    MTLCompilerErrorObject::setErrorMessage(*(MTLCompilerErrorObject **)a1, "Unsupported attribute type");
  }
  else
  {
LABEL_36:
    switch(v19)
    {
      case 0u:
        if (v17[8])
          goto LABEL_137;
        v130 = 257;
        SExtOrTrunc = llvm::IRBuilderBase::CreateFPTrunc((llvm::IRBuilderBase *)a3, ShuffleVector, v21, (const llvm::Twine *)v129);
        goto LABEL_136;
      case 1u:
        if (v34 != 2)
          goto LABEL_137;
        v130 = 257;
        SExtOrTrunc = llvm::IRBuilderBase::CreateFPExt((llvm::IRBuilderBase *)a3, ShuffleVector, v21, (const llvm::Twine *)v129);
        goto LABEL_136;
      case 2u:
      case 3u:
        v35 = (uint64_t)v21;
        if (v124 < 2)
          snprintf(__str, 0x40uLL, "air.convert.f.%s.%c.i16");
        else
          snprintf(__str, 0x40uLL, "air.convert.f.v%d%s.%c.v%di16");
        goto LABEL_125;
      case 4u:
      case 5u:
        if (a8)
        {
          v40 = "air.unpack.snorm2x16.v2f16";
          if (v19 == 5)
          {
            v40 = "air.unpack.unorm2x16.v2f16";
            v41 = "air.unpack.unorm2x16.v2f32";
          }
          else
          {
            v41 = "air.unpack.snorm2x16.v2f32";
          }
          if (v17[8])
            v42 = (char *)v41;
          else
            v42 = (char *)v40;
          v43 = ShuffleVector;
          if (v125 >= 3)
            v43 = MTLFrameworkPass::truncateVector(*(llvm::Type **)(a3 + 64), (llvm::LLVMContext *)a3, ShuffleVector, 2);
          Int32Ty = llvm::Type::getInt32Ty(v33, (llvm::LLVMContext *)a2);
          v130 = 257;
          Cast = (_QWORD *)llvm::IRBuilderBase::CreateCast(a3, 49, (uint64_t)v43, Int32Ty, (uint64_t)v129);
          v46 = vectorTypeGet((llvm::Type *)v17);
          v47 = (llvm::Value *)callUnpackFunction((uint64_t)a2, a3, v42, v46, Cast);
          if (v125 > 2)
          {
            v126[0] = 0x300000002;
            v130 = 257;
            v48 = llvm::IRBuilderBase::CreateShuffleVector(a3, (uint64_t)ShuffleVector, (uint64_t)ShuffleVector, (uint64_t)v126, 2, (uint64_t)v129);
            v50 = llvm::Type::getInt32Ty(v33, v49);
            v130 = 257;
            v51 = (_QWORD *)llvm::IRBuilderBase::CreateCast(a3, 49, v48, v50, (uint64_t)v129);
            v52 = vectorTypeGet((llvm::Type *)v17);
            v53 = callUnpackFunction((uint64_t)a2, a3, v42, v52, v51);
            v127 = xmmword_24105AA50;
            v130 = 257;
            v47 = (llvm::Value *)llvm::IRBuilderBase::CreateShuffleVector(a3, (uint64_t)v47, v53, (uint64_t)&v127, v125, (uint64_t)v129);
          }
          SExtOrTrunc = (uint64_t)MTLFrameworkPass::truncateVector(v33, (llvm::LLVMContext *)a3, v47, v124);
        }
        else
        {
          v72 = 2;
          if (v125 <= 2)
            v73 = 2;
          else
            v73 = 4;
          if (v125 > 2)
            v72 = 4;
          v74 = 115;
          if (v19 == 5)
            v74 = 117;
          snprintf(__str, 0x40uLL, "air.convert.f.v%df32.%c.v%di16", v72, v74, v72);
          llvm::Type::getFloatTy(*(llvm::Type **)(a3 + 64), v75);
          llvm::ConstantFP::get();
          v130 = 257;
          VectorSplat = llvm::IRBuilderBase::CreateVectorSplat();
          FloatTy = (llvm::Type *)llvm::Type::getFloatTy(*(llvm::Type **)(a3 + 64), v77);
          v79 = vectorTypeGet(FloatTy);
          v80 = callUnpackFunction((uint64_t)a2, a3, __str, v79, ShuffleVector);
          v81 = *(_DWORD *)(a3 + 96);
          v82 = *(_QWORD *)(a3 + 88);
          v83 = *(_BYTE *)(a3 + 100);
          v118 = *(_BYTE *)(a3 + 101);
          v120 = *(_BYTE *)(a3 + 102);
          *(_DWORD *)(a3 + 96) = -1;
          v130 = 257;
          FDiv = (llvm::Value *)llvm::IRBuilderBase::CreateFDiv(a3, v80, VectorSplat, (uint64_t)v129, 0);
          if (v19 == 4)
          {
            snprintf(__str, 0x40uLL, "air.fmax.v%df32", v73);
            llvm::Type::getFloatTy(*(llvm::Type **)(a3 + 64), v85);
            v86 = v124;
            llvm::ConstantFP::get();
            v130 = 257;
            v87 = llvm::IRBuilderBase::CreateVectorSplat();
            *(_QWORD *)&v129[0] = FDiv;
            *((_QWORD *)&v129[0] + 1) = v87;
            v88 = vectorTypeGet((llvm::Type *)v17);
            FDiv = (llvm::Value *)MTLFrameworkPass::callFunction((uint64_t)a2, a3, __str, v88, (uint64_t **)v129, 2, 0);
          }
          else
          {
            v86 = v124;
          }
          if (!v17[8])
          {
            snprintf(__str, 0x40uLL, "air.convert.f.v%df16.f.v%df32", v73, v73);
            v90 = vectorTypeGet((llvm::Type *)v17);
            FDiv = (llvm::Value *)callUnpackFunction((uint64_t)a2, a3, __str, v90, FDiv);
          }
          *(_DWORD *)(a3 + 96) = v81;
          *(_QWORD *)(a3 + 88) = v82;
          *(_BYTE *)(a3 + 100) = v83;
          *(_BYTE *)(a3 + 101) = v118;
          *(_BYTE *)(a3 + 102) = v120;
          SExtOrTrunc = (uint64_t)MTLFrameworkPass::truncateVector(v33, (llvm::LLVMContext *)a3, FDiv, v86);
        }
        goto LABEL_136;
      case 6u:
      case 7u:
        v35 = (uint64_t)v21;
        if (v124 < 2)
          snprintf(__str, 0x40uLL, "air.convert.f.%s.%c.i8");
        else
          snprintf(__str, 0x40uLL, "air.convert.f.v%d%s.%c.v%di8");
        goto LABEL_125;
      case 8u:
      case 9u:
        v55 = llvm::Type::getInt32Ty(*(llvm::Type **)(a3 + 64), (llvm::LLVMContext *)a2);
        v130 = 257;
        v56 = (_QWORD *)llvm::IRBuilderBase::CreateCast(a3, 49, (uint64_t)ShuffleVector, v55, (uint64_t)v129);
        v57 = "air.unpack.snorm4x8.v4f16";
        if (v19 == 9)
          v57 = "air.unpack.unorm4x8.v4f16";
        v58 = "air.unpack.unorm4x8.v4f32";
        if (v19 != 9)
          v58 = "air.unpack.snorm4x8.v4f32";
        if (v17[8])
          v59 = (char *)v58;
        else
          v59 = (char *)v57;
        v60 = vectorTypeGet((llvm::Type *)v17);
        v61 = (llvm::Value *)callUnpackFunction((uint64_t)a2, a3, v59, v60, v56);
        if (a7 == 42)
        {
          v127 = xmmword_24105AA80;
          v130 = 257;
          v61 = (llvm::Value *)llvm::IRBuilderBase::CreateShuffleVector(a3, (uint64_t)v61, (uint64_t)v61, (uint64_t)&v127, 4, (uint64_t)v129);
        }
        SExtOrTrunc = (uint64_t)MTLFrameworkPass::truncateVector(v33, (llvm::LLVMContext *)a3, v61, v124);
        goto LABEL_136;
      case 0xAu:
      case 0xBu:
        if (*(_BYTE *)(a1 + 8))
        {
          v35 = (uint64_t)v21;
          if (v124 < 2)
            snprintf(__str, 0x40uLL, "air.convert.f.%s.%c.i32");
          else
            snprintf(__str, 0x40uLL, "air.convert.f.v%d%s.%c.v%di32");
LABEL_125:
          SExtOrTrunc = callUnpackFunction((uint64_t)a2, a3, __str, v35, ShuffleVector);
          goto LABEL_136;
        }
        if (v34 == 2)
          v89 = "float";
        else
          v89 = "half";
LABEL_115:
        MTLCompilerErrorObject::setFormattedErrorMessage(*(char ***)a1, "Cannot convert attribute from %s to %s%d", *v8, v89, v123);
        break;
      case 0xCu:
      case 0xDu:
        if (v17[8])
          v62 = "f32";
        else
          v62 = "f16";
        v63 = 115;
        if (v19 == 13)
          v63 = 117;
        snprintf(__str, 0x40uLL, "air.unpack.%cnorm.rgb10a2.v4%s", v63, v62);
        v64 = vectorTypeGet((llvm::Type *)v17);
        v65 = (llvm::Value *)callUnpackFunction((uint64_t)a2, a3, __str, v64, ShuffleVector);
        SExtOrTrunc = (uint64_t)MTLFrameworkPass::truncateVector(v33, (llvm::LLVMContext *)a3, v65, v124);
        goto LABEL_136;
      case 0xEu:
      case 0xFu:
        if (v17[8])
          v66 = "f32";
        else
          v66 = "f16";
        v67 = "rgb9e5";
        if (v19 == 14)
          v67 = "rg11b10f";
        snprintf(__str, 0x40uLL, "air.unpack.unorm.%s.v3%s", v67, v66);
        v68 = vectorTypeGet((llvm::Type *)v17);
        v69 = (llvm::Value *)callUnpackFunction((uint64_t)a2, a3, __str, v68, ShuffleVector);
        SExtOrTrunc = (uint64_t)MTLFrameworkPass::truncateVector(v33, (llvm::LLVMContext *)a3, v69, v124);
        goto LABEL_136;
      default:
        if (v34 == 2)
          v89 = "float";
        else
          v89 = "half";
        goto LABEL_115;
    }
  }
  return 0;
}

void sub_241015C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, char a15, __int16 a16, char a17)
{
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;

  *(_DWORD *)(v17 + 96) = v19;
  *(_QWORD *)(v17 + 88) = v18;
  *(_BYTE *)(v17 + 100) = v20;
  *(_BYTE *)(v17 + 101) = a15;
  *(_BYTE *)(v17 + 102) = a17;
  _Unwind_Resume(a1);
}

llvm::Value *expandVector(llvm::Type *a1, llvm::IRBuilderBase *a2, llvm::Value *a3, unsigned int a4)
{
  llvm::Value *v5;
  llvm::Type *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;
  llvm::Value *v14;
  llvm::LLVMContext *v15;
  llvm::Value *v16;
  llvm::Instruction *v17;
  _BYTE v19[32];
  __int16 v20;
  __int128 v21;
  uint64_t v22;

  v5 = a3;
  v22 = *MEMORY[0x24BDAC8D0];
  v8 = *(llvm::Type **)a3;
  v9 = *(unsigned __int8 *)(*(_QWORD *)a3 + 8);
  if (*(_QWORD *)a3)
    v10 = v9 == 18;
  else
    v10 = 0;
  if (v10)
    v11 = *((_DWORD *)v8 + 8);
  else
    v11 = 1;
  if (v11 < a4)
  {
    if ((v9 & 0xFE) == 0x12)
    {
      v12 = llvm::UndefValue::get();
      v21 = xmmword_24105AA50;
      v20 = 257;
      return (llvm::Value *)llvm::IRBuilderBase::CreateShuffleVector((uint64_t)a2, (uint64_t)v5, v12, (uint64_t)&v21, a4, (uint64_t)v19);
    }
    else
    {
      vectorTypeGet(v8);
      v14 = (llvm::Value *)llvm::UndefValue::get();
      llvm::Type::getInt32Ty(a1, v15);
      v16 = (llvm::Value *)llvm::ConstantInt::get();
      v20 = 257;
      return (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(a2, v14, v5, v16, (const llvm::Twine *)v19, v17);
    }
  }
  return v5;
}

uint64_t llvm::IRBuilderBase::CreateFPTrunc(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Type *a3, const llvm::Twine *a4)
{
  if (*((_BYTE *)this + 100))
    return llvm::IRBuilderBase::CreateConstrainedFPCast();
  else
    return llvm::IRBuilderBase::CreateCast((uint64_t)this, 45, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
}

uint64_t llvm::IRBuilderBase::CreateFPExt(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Type *a3, const llvm::Twine *a4)
{
  if (*((_BYTE *)this + 100))
    return llvm::IRBuilderBase::CreateConstrainedFPCast();
  else
    return llvm::IRBuilderBase::CreateCast((uint64_t)this, 46, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
}

uint64_t callUnpackFunction(uint64_t a1, uint64_t a2, char *__s, uint64_t a4, _QWORD *a5)
{
  uint64_t Function;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  _QWORD v14[4];
  __int16 v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  v16[0] = a5;
  if (__s)
    strlen(__s);
  Function = llvm::Module::getFunction();
  if (Function)
    goto LABEL_7;
  v16[1] = *a5;
  v10 = 1;
  v11 = llvm::FunctionType::get();
  HIBYTE(v15) = 1;
  if (*__s)
  {
    v14[0] = __s;
    v10 = 3;
  }
  LOBYTE(v15) = v10;
  Function = llvm::Function::Create(v11, 0, (uint64_t)v14, a1);
  llvm::Function::addFnAttr();
  llvm::Function::addFnAttr();
  if (Function)
LABEL_7:
    v12 = *(_QWORD *)(Function + 24);
  else
    v12 = 0;
  v15 = 257;
  result = llvm::IRBuilderBase::CreateCall(a2, v12, Function, (uint64_t)v16, 1, (uint64_t)v14, 0);
  *(_WORD *)(result + 18) = *(_WORD *)(result + 18) & 0xFFFC | 1;
  return result;
}

uint64_t llvm::IRBuilderBase::CreateFDiv(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  if (*(_BYTE *)(a1 + 100))
    return llvm::IRBuilderBase::CreateConstrainedFPBinOp();
  result = llvm::IRBuilderBase::foldConstant(a1, 21, a2, a3, a4);
  if (!result)
  {
    v9 = llvm::BinaryOperator::Create();
    v10 = llvm::IRBuilderBase::setFPAttrs(a1, v9, a5);
    return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)a1, v10, a4);
  }
  return result;
}

llvm::Type **llvm::IRBuilderBase::CreateZExtOrTrunc(llvm::IRBuilderBase *this, llvm::Type **a2, llvm::Type *a3, const llvm::Twine *a4)
{
  unsigned int ScalarSizeInBits;
  unsigned int v9;
  uint64_t v10;

  ScalarSizeInBits = llvm::Type::getScalarSizeInBits(*a2);
  v9 = llvm::Type::getScalarSizeInBits(a3);
  if (ScalarSizeInBits >= v9)
  {
    if (ScalarSizeInBits <= v9)
      return a2;
    v10 = 38;
  }
  else
  {
    v10 = 39;
  }
  return (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)this, v10, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
}

llvm::Type **llvm::IRBuilderBase::CreateSExtOrTrunc(llvm::IRBuilderBase *this, llvm::Type **a2, llvm::Type *a3, const llvm::Twine *a4)
{
  unsigned int ScalarSizeInBits;
  unsigned int v9;
  uint64_t v10;

  ScalarSizeInBits = llvm::Type::getScalarSizeInBits(*a2);
  v9 = llvm::Type::getScalarSizeInBits(a3);
  if (ScalarSizeInBits >= v9)
  {
    if (ScalarSizeInBits <= v9)
      return a2;
    v10 = 38;
  }
  else
  {
    v10 = 40;
  }
  return (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)this, v10, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
}

uint64_t getRequiredBuiltIns(uint64_t result, _BYTE *a2, int a3, unsigned int a4, BOOL *a5, _BYTE *a6, int a7)
{
  _BYTE *v7;
  unsigned int v8;
  char v9;

  v7 = *(_BYTE **)result;
  v8 = *(unsigned __int8 *)(*(_QWORD *)result + 5);
  v9 = 2;
  switch(a3)
  {
    case 0:
      goto LABEL_7;
    case 1:
      goto LABEL_6;
    case 2:
      v7[1] = 1;
      if (a4 < 2)
        goto LABEL_7;
      v7 = (_BYTE *)(*(_QWORD *)result + 2);
LABEL_6:
      *v7 = 1;
LABEL_7:
      if (!v8)
        return result;
      v7 = *(_BYTE **)result;
      v9 = v8;
LABEL_14:
      v7[5] = v9;
      *(_BYTE *)(*(_QWORD *)result + 6) = v9;
      *(_BYTE *)(*(_QWORD *)result + 7) = v9;
      return result;
    case 3:
      v7 += 3;
      goto LABEL_6;
    case 4:
      v7[3] = 1;
      *a5 = a7 != 0;
      v7 = a6;
      goto LABEL_6;
    case 5:
      goto LABEL_10;
    case 6:
      goto LABEL_14;
    case 7:
      *a2 = 1;
LABEL_10:
      if (v8 <= 1)
        v9 = 1;
      else
        v9 = v8;
      goto LABEL_14;
    case 8:
      *a2 = 1;
      goto LABEL_14;
    default:
      abort();
  }
}

