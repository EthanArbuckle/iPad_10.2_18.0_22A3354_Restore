llvm::Value *loadPackedVector(llvm::IRBuilderBase *a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  llvm::Type *v10;
  int ScalarSizeInBits;
  llvm::Value *InsertElement;
  llvm::LLVMContext *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __int16 v18;
  uint64_t v19;
  llvm::Type *v20;
  llvm::Value *AlignedLoad;
  llvm::Value *v22;
  llvm::Instruction *v23;
  _BYTE v25[32];
  __int16 v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v8 = **(_QWORD **)(a3 + 16);
  v9 = *(_QWORD *)(v8 + 32);
  v10 = **(llvm::Type ***)(v8 + 16);
  ScalarSizeInBits = llvm::Type::getScalarSizeInBits(v10);
  vectorTypeGet(v10);
  InsertElement = (llvm::Value *)llvm::UndefValue::get();
  llvm::Type::getInt32Ty(*(llvm::Type **)a3, v13);
  if ((_DWORD)v9)
  {
    v14 = 0;
    v15 = v9;
    LODWORD(v16) = (ScalarSizeInBits + 7) >> 3;
    if (v16 >= a4)
      v16 = a4;
    else
      v16 = v16;
    v17 = __clz(v16) ^ 0x13F;
    if ((_DWORD)v16)
      v18 = v17;
    else
      v18 = 0;
    do
    {
      v27 = 0;
      v28 = 0;
      v29 = 0;
      v27 = (uint64_t *)llvm::ConstantInt::get();
      v28 = llvm::ConstantInt::get();
      v29 = llvm::ConstantInt::get();
      v26 = 257;
      v19 = llvm::IRBuilderBase::CreateGEP((uint64_t)a1, a3, a2, &v27, 3, (uint64_t)v25);
      v20 = *(llvm::Type **)(v19 + 72);
      v26 = 257;
      AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)a1, v20, v19, v18, 0, (uint64_t)v25);
      v22 = (llvm::Value *)llvm::ConstantInt::get();
      v26 = 257;
      InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(a1, InsertElement, AlignedLoad, v22, (const llvm::Twine *)v25, v23);
      ++v14;
    }
    while (v15 != v14);
  }
  return InsertElement;
}

llvm::ArrayType *getTypeFromVertexAttribFormat(llvm::Type *this, llvm::LLVMContext *a2, _QWORD *a3, _QWORD *a4, int a5)
{
  llvm::ArrayType *result;
  llvm::Type *FloatTy;

  switch((int)a2)
  {
    case 1:
    case 4:
    case 7:
    case 10:
      *a3 = 2;
      *a4 = 1;
      result = (llvm::ArrayType *)llvm::Type::getInt8Ty(this, a2);
      goto LABEL_32;
    case 2:
    case 5:
    case 8:
    case 11:
      *a3 = 3;
      *a4 = 1;
      result = (llvm::ArrayType *)llvm::Type::getInt8Ty(this, a2);
      if (!a5)
        goto LABEL_32;
      goto LABEL_17;
    case 3:
    case 6:
    case 9:
    case 12:
    case 42:
      *a3 = 4;
      *a4 = 1;
      result = (llvm::ArrayType *)llvm::Type::getInt8Ty(this, a2);
      goto LABEL_32;
    case 13:
    case 16:
    case 19:
    case 22:
      *a3 = 4;
      *a4 = 2;
      result = (llvm::ArrayType *)llvm::Type::getInt16Ty(this, a2);
      goto LABEL_32;
    case 14:
    case 17:
    case 20:
    case 23:
      *a3 = 6;
      *a4 = 2;
      result = (llvm::ArrayType *)llvm::Type::getInt16Ty(this, a2);
      if (!a5)
        goto LABEL_32;
      goto LABEL_17;
    case 15:
    case 18:
    case 21:
    case 24:
      *a3 = 8;
      *a4 = 2;
      result = (llvm::ArrayType *)llvm::Type::getInt16Ty(this, a2);
      goto LABEL_32;
    case 25:
      *a3 = 4;
      *a4 = 2;
      result = (llvm::ArrayType *)llvm::Type::getHalfTy(this, a2);
      goto LABEL_32;
    case 26:
      *a3 = 6;
      *a4 = 2;
      result = (llvm::ArrayType *)llvm::Type::getHalfTy(this, a2);
      FloatTy = result;
      if (!a5)
        goto LABEL_32;
      return (llvm::ArrayType *)getUnpackedVectorType(this, FloatTy, 3);
    case 27:
      *a3 = 8;
      *a4 = 2;
      result = (llvm::ArrayType *)llvm::Type::getHalfTy(this, a2);
      goto LABEL_32;
    case 28:
      *a3 = 4;
      *a4 = 4;
      return (llvm::ArrayType *)llvm::Type::getFloatTy(this, a2);
    case 29:
      *a3 = 8;
      *a4 = 4;
      result = (llvm::ArrayType *)llvm::Type::getFloatTy(this, a2);
      goto LABEL_32;
    case 30:
      *a3 = 12;
      *a4 = 4;
      FloatTy = (llvm::Type *)llvm::Type::getFloatTy(this, a2);
      return (llvm::ArrayType *)getUnpackedVectorType(this, FloatTy, 3);
    case 31:
      *a3 = 16;
      *a4 = 4;
      result = (llvm::ArrayType *)llvm::Type::getFloatTy(this, a2);
      goto LABEL_32;
    case 32:
    case 36:
    case 40:
    case 41:
    case 43:
    case 44:
    case 54:
    case 55:
      *a3 = 4;
      *a4 = 4;
      return (llvm::ArrayType *)llvm::Type::getInt32Ty(this, a2);
    case 33:
    case 37:
      *a3 = 8;
      *a4 = 4;
      result = (llvm::ArrayType *)llvm::Type::getInt32Ty(this, a2);
      goto LABEL_32;
    case 34:
    case 38:
      *a3 = 12;
      *a4 = 4;
      result = (llvm::ArrayType *)llvm::Type::getInt32Ty(this, a2);
LABEL_17:
      llvm::ArrayType::get(result, (llvm::Type *)3);
      return (llvm::ArrayType *)llvm::StructType::get();
    case 35:
    case 39:
      *a3 = 16;
      *a4 = 4;
      result = (llvm::ArrayType *)llvm::Type::getInt32Ty(this, a2);
      goto LABEL_32;
    case 45:
    case 46:
    case 47:
    case 48:
      *a3 = 1;
      *a4 = 1;
      result = (llvm::ArrayType *)llvm::Type::getInt8Ty(this, a2);
      if ((a5 & 1) == 0)
        goto LABEL_32;
      return result;
    case 49:
    case 50:
    case 51:
    case 52:
      *a3 = 2;
      *a4 = 2;
      result = (llvm::ArrayType *)llvm::Type::getInt16Ty(this, a2);
      if ((a5 & 1) == 0)
        goto LABEL_32;
      return result;
    case 53:
      *a3 = 2;
      *a4 = 2;
      result = (llvm::ArrayType *)llvm::Type::getHalfTy(this, a2);
      if ((a5 & 1) == 0)
LABEL_32:
        result = (llvm::ArrayType *)vectorTypeGet(result);
      break;
    default:
      result = 0;
      *a3 = 0;
      *a4 = 0;
      break;
  }
  return result;
}

uint64_t getUnpackedVectorType(llvm::LLVMContext *a1, llvm::Type *this, int a3)
{
  llvm::ArrayType::get(this, (llvm::Type *)a3);
  return llvm::StructType::get();
}

uint64_t updateMTLGLFragmentInputList(int a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  if (a1)
    return (4
                           * (MTLDataTypeGetVectorDataType((a2 >> 5) & 0x3F, ((a2 >> 11) & 3) + 1) & 0x3F)) | ((a2 & 0x1F) << 8) | 0xFFFF8000;
  return v2;
}

uint64_t MTLAddVertexFetchingToModulePass::expandVertexOutputWithFragmentInput(uint64_t a1, llvm::Type *a2, uint64_t a3, uint64_t a4, uint64_t *a5, _QWORD *a6, unsigned __int16 *a7, uint64_t a8, unsigned __int8 a9)
{
  unsigned __int16 *v9;
  _QWORD *v10;
  llvm::Type *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 updated;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  const void *v23;
  __int128 *p_dst;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  void *v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t String;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  size_t v42;
  void *v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  int v46;
  uint64_t ComponentType;
  unsigned int ComponentCount;
  char v49;
  uint64_t LLVMVectorType;
  uint64_t *v51;
  int v52;
  llvm::LLVMContext *v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  void *v58;
  int64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t i;
  uint64_t Impl;
  unsigned int v71;
  unsigned int v72;
  unsigned int j;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  const char *ShaderTypeName;
  uint64_t *k;
  int v81;
  int v82;
  int v83;
  int v85;
  std::string *v86;
  uint64_t VertexOutputMetadata;
  void *__src;
  char __srca;
  void *__srcb;
  std::string v96;
  void *__p[3];
  void *v98[2];
  char *v99;
  __int128 v100;
  __int128 v101;
  int v102;
  __int128 __dst;
  __int128 v104;
  uint64_t v105;

  v9 = a7;
  v10 = a6;
  v12 = a2;
  v105 = *MEMORY[0x24BDAC8D0];
  if (a7)
    LODWORD(v13) = *a7;
  else
    v13 = (uint64_t)(a6[1] - *a6) >> 5;
  v14 = v13;
  if (!(_DWORD)v13)
    return a3;
  v15 = 0;
  v16 = a9;
  v100 = 0u;
  v101 = 0u;
  v102 = 1065353216;
  do
  {
    while (!v9)
    {
      v20 = *v10;
      v21 = *v10 + 32 * v15;
      v22 = *(_QWORD *)(v21 + 16);
      if (v22 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v23 = *(const void **)(v21 + 8);
      if (v22 >= 0x17)
      {
        __src = *(void **)(v21 + 8);
        v25 = v16;
        v26 = v10;
        v27 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v22 | 7) != 0x17)
          v27 = v22 | 7;
        v28 = v27 + 1;
        p_dst = (__int128 *)operator new(v27 + 1);
        *((_QWORD *)&__dst + 1) = v22;
        *(_QWORD *)&v104 = v28 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
        v10 = v26;
        v16 = v25;
        v9 = 0;
        v23 = __src;
      }
      else
      {
        BYTE7(v104) = *(_QWORD *)(v21 + 16);
        p_dst = &__dst;
        if (!v22)
          goto LABEL_27;
      }
      memmove(p_dst, v23, v22);
LABEL_27:
      *((_BYTE *)p_dst + v22) = 0;
      v29 = *(_DWORD *)(v20 + 32 * v15 + 24);
      v98[0] = &__dst;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,MTLCompilerDataType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLCompilerDataType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v100, (unsigned __int8 *)&__dst, (uint64_t)&std::piecewise_construct, (__int128 **)v98)+ 10) = v29;
      v12 = a2;
      if (SBYTE7(v104) < 0)
        operator delete((void *)__dst);
      if (++v15 == v14)
      {
        v32 = a4;
        v31 = (uint64_t *)a8;
        v33 = *(unsigned int *)(a4 + 8);
        goto LABEL_44;
      }
    }
    updated = updateMTLGLFragmentInputList(v16, v9[v15 + 1]);
    v18 = updated >> 2;
    if ((updated & 3) != 0)
    {
      if ((updated & 3) != 1)
        abort();
      __dst = 0uLL;
      *(_QWORD *)&v104 = 0;
      v19 = (updated >> 8) & 0x1F;
      if (v19 == 3)
      {
        std::string::basic_string[abi:ne180100]<0>(v98, "user(sec_front_color)");
        if (SBYTE7(v104) < 0)
          operator delete((void *)__dst);
        __dst = *(_OWORD *)v98;
        *(_QWORD *)&v104 = v99;
        v98[0] = &__dst;
        *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,MTLCompilerDataType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLCompilerDataType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v100, (unsigned __int8 *)&__dst, (uint64_t)&std::piecewise_construct, (__int128 **)v98)+ 10) = v18;
        std::string::basic_string[abi:ne180100]<0>(v98, "user(sec_back_color)");
        if (SBYTE7(v104) < 0)
          operator delete((void *)__dst);
      }
      else
      {
        if (v19 != 2)
        {
LABEL_39:
          if ((SBYTE7(v104) & 0x80000000) == 0)
            goto LABEL_42;
          v30 = (void *)__dst;
          goto LABEL_41;
        }
        std::string::basic_string[abi:ne180100]<0>(v98, "user(front_color)");
        if (SBYTE7(v104) < 0)
          operator delete((void *)__dst);
        __dst = *(_OWORD *)v98;
        *(_QWORD *)&v104 = v99;
        v98[0] = &__dst;
        *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,MTLCompilerDataType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLCompilerDataType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v100, (unsigned __int8 *)&__dst, (uint64_t)&std::piecewise_construct, (__int128 **)v98)+ 10) = v18;
        std::string::basic_string[abi:ne180100]<0>(v98, "user(back_color)");
        if (SBYTE7(v104) < 0)
          operator delete((void *)__dst);
      }
      __dst = *(_OWORD *)v98;
      *(_QWORD *)&v104 = v99;
      v98[0] = &__dst;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,MTLCompilerDataType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLCompilerDataType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v100, (unsigned __int8 *)&__dst, (uint64_t)&std::piecewise_construct, (__int128 **)v98)+ 10) = v18;
      goto LABEL_39;
    }
    __dst = 0u;
    v104 = 0u;
    if (((updated >> 8) & 0x3F) - 8 > 7 || updated < 0)
      snprintf((char *)&__dst, 0x1FuLL, "user(slot%u)");
    else
      snprintf((char *)&__dst, 0x1FuLL, "user(tex_coord%u)");
    std::string::basic_string[abi:ne180100]<0>(v98, (char *)&__dst);
    __p[0] = v98;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,MTLCompilerDataType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLCompilerDataType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v100, (unsigned __int8 *)v98, (uint64_t)&std::piecewise_construct, (__int128 **)__p)+ 10) = v18;
    if (SHIBYTE(v99) < 0)
    {
      v30 = v98[0];
LABEL_41:
      operator delete(v30);
    }
LABEL_42:
    ++v15;
  }
  while (v15 != v14);
  v32 = a4;
  v31 = (uint64_t *)a8;
  v33 = *(unsigned int *)(a4 + 8);
  std::vector<MTLAddVertexFetchingToModulePass::ModifiedOutput>::resize(a8, v33);
LABEL_44:
  std::vector<llvm::Type *>::vector(v98, v33);
  if (!(_DWORD)v33)
  {
    v51 = (uint64_t *)v101;
    if (!(_QWORD)v101)
      goto LABEL_145;
    goto LABEL_73;
  }
  v34 = 0;
  __srca = 0;
  while (2)
  {
    v35 = *v31;
    v36 = *(_QWORD *)(v32 - 8 * *(unsigned int *)(v32 + 8) + 8 * v34);
    String = llvm::MDString::getString(*(llvm::MDString **)(v36 - 8 * *(unsigned int *)(v36 + 8)));
    v39 = a3;
    if (*(_BYTE *)(a3 + 8) == 16)
      v39 = *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * v34);
    if (v38 == 17)
    {
      v40 = *(_QWORD *)String == 0x747265762E726961 && *(_QWORD *)(String + 8) == 0x757074756F5F7865;
      if (v40 && *(_BYTE *)(String + 16) == 116)
      {
        v43 = (void *)llvm::MDString::getString(*(llvm::MDString **)(v36 - 8 * *(unsigned int *)(v36 + 8) + 8));
        if (v43)
        {
          std::string::basic_string[abi:ne180100](&__dst, v43, v42);
        }
        else
        {
          __dst = 0uLL;
          *(_QWORD *)&v104 = 0;
        }
        v44 = std::__hash_table<std::__hash_value_type<std::string,MTLCompilerDataType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLCompilerDataType>>>::find<std::string>(&v100, (unsigned __int8 *)&__dst);
        v45 = v44;
        if (SBYTE7(v104) < 0)
        {
          operator delete((void *)__dst);
          if (!v45)
            goto LABEL_68;
        }
        else if (!v44)
        {
          goto LABEL_68;
        }
        if (v9)
        {
          v46 = *((_DWORD *)v45 + 10);
          ComponentType = MTLDataTypeGetComponentType(v46);
          ComponentCount = MTLDataTypeGetComponentCount(v46);
          v49 = ComponentCount;
          LLVMVectorType = MTLFrameworkPass::getLLVMVectorType(a2, (llvm::LLVMContext *)ComponentType, ComponentCount);
          if (LLVMVectorType != v39)
          {
            *(_WORD *)(v35 + 2 * v34) = *(_WORD *)(v35 + 2 * v34) & 0xFC00 | (2 * (ComponentType & 0x3F)) & 0x7F | ((v49 & 7) << 7) | 1;
            __srca = 1;
            v39 = LLVMVectorType;
          }
        }
        std::__hash_table<std::__hash_value_type<std::string,MTLCompilerDataType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLCompilerDataType>>>::erase(&v100, (uint64_t *)v45);
        v32 = a4;
        v31 = (uint64_t *)a8;
      }
    }
LABEL_68:
    *((_QWORD *)v98[0] + v34++) = v39;
    if (v33 != v34)
      continue;
    break;
  }
  v51 = (uint64_t *)v101;
  v12 = a2;
  if (!(_QWORD)v101)
  {
    if ((__srca & 1) == 0)
      goto LABEL_145;
    goto LABEL_95;
  }
  do
  {
LABEL_73:
    if (*((char *)v51 + 39) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__dst, (const std::string::value_type *)v51[2], v51[3]);
    }
    else
    {
      __dst = *((_OWORD *)v51 + 1);
      *(_QWORD *)&v104 = v51[4];
    }
    DWORD2(v104) = *((_DWORD *)v51 + 10);
    v52 = DWORD2(v104);
    v53 = (llvm::LLVMContext *)MTLDataTypeGetComponentType(SDWORD2(v104));
    v54 = MTLDataTypeGetComponentCount(v52);
    v55 = MTLFrameworkPass::getLLVMVectorType(v12, v53, v54);
    v56 = v55;
    v57 = (char *)v98[1];
    if (v98[1] >= v99)
    {
      v59 = ((char *)v98[1] - (char *)v98[0]) >> 3;
      if ((unint64_t)(v59 + 1) >> 61)
        std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
      v60 = (v99 - (char *)v98[0]) >> 2;
      if (v60 <= v59 + 1)
        v60 = v59 + 1;
      if ((unint64_t)(v99 - (char *)v98[0]) >= 0x7FFFFFFFFFFFFFF8)
        v61 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v61 = v60;
      if (v61)
        v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v99, v61);
      else
        v62 = 0;
      v63 = (uint64_t *)&v62[8 * v59];
      *v63 = v56;
      v58 = v63 + 1;
      v65 = (char *)v98[0];
      v64 = (char *)v98[1];
      if (v98[1] != v98[0])
      {
        do
        {
          v66 = *((_QWORD *)v64 - 1);
          v64 -= 8;
          *--v63 = v66;
        }
        while (v64 != v65);
        v64 = (char *)v98[0];
      }
      v98[0] = v63;
      v98[1] = v58;
      v99 = &v62[8 * v61];
      if (v64)
        operator delete(v64);
    }
    else
    {
      *(_QWORD *)v98[1] = v55;
      v58 = v57 + 8;
    }
    v98[1] = v58;
    if (SBYTE7(v104) < 0)
      operator delete((void *)__dst);
    v51 = (uint64_t *)*v51;
  }
  while (v51);
LABEL_95:
  __srcb = (void *)((char *)v98[1] - (char *)v98[0]);
  std::vector<llvm::Metadata *>::vector(__p, ((char *)v98[1] - (char *)v98[0]) >> 3);
  v68 = a4;
  v67 = (_QWORD *)a8;
  if ((_DWORD)v33)
  {
    for (i = 0; i != v33; ++i)
    {
      Impl = *(_QWORD *)(v68 - 8 * *(unsigned int *)(v68 + 8) + 8 * i);
      if (v9)
      {
        v71 = *(unsigned __int16 *)(*v67 + 2 * i);
        if ((v71 & 1) != 0)
        {
          v72 = *(_DWORD *)(Impl + 8);
          std::vector<llvm::Metadata *>::vector(&__dst, v72);
          if (v72)
          {
            for (j = 0; j < v72; ++j)
            {
              v74 = *(_BYTE **)(Impl - 8 * *(unsigned int *)(Impl + 8) + 8 * j);
              if (!*v74)
              {
                v75 = llvm::MDString::getString(*(llvm::MDString **)(Impl - 8 * *(unsigned int *)(Impl + 8) + 8 * j));
                if (v76 == 17)
                {
                  v77 = *(_QWORD *)v75 == 0x5F6772612E726961 && *(_QWORD *)(v75 + 8) == 0x6D616E5F65707974;
                  if (v77 && *(_BYTE *)(v75 + 16) == 101)
                  {
                    *(_QWORD *)(__dst + 8 * j++) = v74;
                    if (j < v72)
                    {
                      ShaderTypeName = MTLDataTypeGetShaderTypeName((v71 >> 1) & 0x3F, (v71 >> 7) & 7);
                      if (ShaderTypeName)
                        strlen(ShaderTypeName);
                      v74 = (_BYTE *)llvm::MDString::get();
                    }
                  }
                }
              }
              *(_QWORD *)(__dst + 8 * j) = v74;
            }
          }
          v12 = a2;
          Impl = llvm::MDTuple::getImpl();
          v68 = a4;
          v67 = (_QWORD *)a8;
          if ((_QWORD)__dst)
          {
            *((_QWORD *)&__dst + 1) = __dst;
            operator delete((void *)__dst);
          }
        }
      }
      *((_QWORD *)__p[0] + i) = Impl;
    }
  }
  for (k = (uint64_t *)v101; k; LODWORD(v33) = v33 + 1)
  {
    if (*((char *)k + 39) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__dst, (const std::string::value_type *)k[2], k[3]);
    }
    else
    {
      __dst = *((_OWORD *)k + 1);
      *(_QWORD *)&v104 = k[4];
    }
    v81 = *((_DWORD *)k + 10);
    DWORD2(v104) = v81;
    if (SBYTE7(v104) < 0)
    {
      std::string::__init_copy_ctor_external(&v96, (const std::string::value_type *)__dst, *((std::string::size_type *)&__dst + 1));
    }
    else
    {
      *(_OWORD *)&v96.__r_.__value_.__l.__data_ = __dst;
      v96.__r_.__value_.__r.__words[2] = v104;
    }
    v82 = MTLDataTypeGetComponentType(v81);
    v83 = MTLDataTypeGetComponentCount(v81);
    if (v82 == 3 || v82 == 16)
      v85 = 1;
    else
      v85 = 2;
    if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v86 = &v96;
    else
      v86 = (std::string *)v96.__r_.__value_.__r.__words[0];
    VertexOutputMetadata = MTLFrameworkPass::createVertexOutputMetadata(v12, (const char *)v86, v82, v83, 1, v85, 0xFFFFFFFFLL, 0);
    *((_QWORD *)__p[0] + v33) = VertexOutputMetadata;
    if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v96.__r_.__value_.__l.__data_);
    if (SBYTE7(v104) < 0)
      operator delete((void *)__dst);
    k = (uint64_t *)*k;
  }
  *a5 = llvm::MDTuple::getImpl();
  if (__srcb == (void *)8)
    a3 = *(_QWORD *)v98[0];
  else
    a3 = llvm::StructType::get();
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_145:
  if (v98[0])
  {
    v98[1] = v98[0];
    operator delete(v98[0]);
  }
  std::__hash_table<std::__hash_value_type<std::string,MTLCompilerDataType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLCompilerDataType>>>::~__hash_table((uint64_t)&v100);
  return a3;
}

void sub_24101717C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  std::__hash_table<std::__hash_value_type<std::string,MTLCompilerDataType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLCompilerDataType>>>::~__hash_table((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void std::vector<MTLAddVertexFetchingToModulePass::ModifiedOutput>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 1;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 2 * a2;
  }
  else
  {
    std::vector<MTLAddVertexFetchingToModulePass::ModifiedOutput>::__append((void **)a1, a2 - v2);
  }
}

llvm::Value *MTLAddVertexFetchingToModulePass::convertVertexShaderOutput(int a1, llvm::Type *a2, unsigned __int8 *a3, llvm::Constant *this, int a5, uint64_t *a6)
{
  uint64_t NullValue;
  uint64_t v12;
  uint64_t v13;
  llvm::Value *Value;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  llvm::Type *v19;
  unsigned int v20;
  llvm::Value *v21;
  llvm::Type *v22;
  unsigned int v23;
  uint64_t FPExt;
  _BYTE v26[32];
  __int16 v27;
  int v28;

  if (*((_BYTE *)this + 8) == 16)
  {
    NullValue = llvm::Constant::getNullValue(this, a2);
    if (a5)
    {
LABEL_3:
      v12 = 0;
      v13 = *(_QWORD *)a3;
      while (1)
      {
        Value = (llvm::Value *)a3;
        if (*(_BYTE *)(v13 + 8) == 16)
        {
          v28 = v12;
          v27 = 257;
          Value = (llvm::Value *)llvm::IRBuilderBase::CreateExtractValue((uint64_t)a2, a3, (uint64_t)&v28, 1, (uint64_t)v26);
        }
        v15 = *a6;
        if (a5 != (a6[1] - *a6) >> 1)
          goto LABEL_36;
        v16 = *(unsigned __int16 *)(v15 + 2 * v12);
        if ((v16 & 1) == 0)
          goto LABEL_36;
        v17 = *(_QWORD *)Value;
        v18 = 1;
        if (*(_QWORD *)Value && *(_BYTE *)(v17 + 8) == 18)
          v18 = *(_DWORD *)(v17 + 32);
        v19 = (llvm::Type *)*((_QWORD *)a2 + 8);
        v20 = (v16 >> 7) & 7;
        if (v18 <= v20)
        {
          if (v18 >= v20)
            goto LABEL_16;
          v21 = expandVector(v19, a2, Value, v20);
        }
        else
        {
          v21 = MTLFrameworkPass::truncateVector(v19, a2, Value, v20);
        }
        Value = v21;
LABEL_16:
        v22 = this;
        if (*((_BYTE *)this + 8) == 16)
          v22 = *(llvm::Type **)(*((_QWORD *)this + 2) + 8 * v12);
        if (*(llvm::Type **)Value == v22)
          goto LABEL_36;
        v23 = (*(unsigned __int16 *)(v15 + 2 * v12) >> 1) & 0x3F;
        if (v23 <= 0x20)
        {
          switch(v23)
          {
            case 3u:
              v27 = 257;
              FPExt = llvm::IRBuilderBase::CreateFPExt(a2, Value, v22, (const llvm::Twine *)v26);
              break;
            case 0x10u:
              v27 = 257;
              FPExt = llvm::IRBuilderBase::CreateFPTrunc(a2, Value, v22, (const llvm::Twine *)v26);
              break;
            case 0x1Du:
              v27 = 257;
              FPExt = (uint64_t)llvm::IRBuilderBase::CreateSExtOrBitCast(a2, (llvm::Type **)Value, v22, (const llvm::Twine *)v26);
              break;
            default:
              goto LABEL_43;
          }
          goto LABEL_35;
        }
        if (((*(unsigned __int16 *)(v15 + 2 * v12) >> 1) & 0x3Fu) > 0x28)
        {
          if (v23 != 41)
          {
            if (v23 != 53)
LABEL_43:
              abort();
            goto LABEL_36;
          }
        }
        else
        {
          if (v23 == 33)
          {
            v27 = 257;
            FPExt = (uint64_t)llvm::IRBuilderBase::CreateZExtOrBitCast(a2, (llvm::Type **)Value, v22, (const llvm::Twine *)v26);
            goto LABEL_35;
          }
          if (v23 != 37)
            goto LABEL_43;
        }
        v27 = 257;
        FPExt = llvm::IRBuilderBase::CreateCast((uint64_t)a2, 38, (uint64_t)Value, (uint64_t)v22, (uint64_t)v26);
LABEL_35:
        Value = (llvm::Value *)FPExt;
LABEL_36:
        if (*((_BYTE *)this + 8) == 16)
        {
          v28 = v12;
          v27 = 257;
          Value = (llvm::Value *)llvm::IRBuilderBase::CreateInsertValue((uint64_t)a2, NullValue, (uint64_t)Value, (uint64_t)&v28, 1, (uint64_t)v26);
        }
        ++v12;
        NullValue = (uint64_t)Value;
        if (a5 == v12)
          return Value;
      }
    }
  }
  else
  {
    NullValue = 0;
    if (a5)
      goto LABEL_3;
  }
  return (llvm::Value *)NullValue;
}

llvm::Type **llvm::IRBuilderBase::CreateSExtOrBitCast(llvm::IRBuilderBase *this, llvm::Type **a2, llvm::Type *a3, const llvm::Twine *a4)
{
  BOOL v6;
  uint64_t SExtOrBitCast;

  if (*a2 != a3)
  {
    if (*((unsigned __int8 *)a2 + 16) > 0x14u)
    {
      SExtOrBitCast = llvm::CastInst::CreateSExtOrBitCast();
      return (llvm::Type **)llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, SExtOrBitCast, (uint64_t)a4);
    }
    else
    {
      a2 = (llvm::Type **)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 296))(*((_QWORD *)this + 9));
      if (a2)
        v6 = *((unsigned __int8 *)a2 + 16) >= 0x1Cu;
      else
        v6 = 0;
      if (v6)
        return (llvm::Type **)llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, (uint64_t)a2, (uint64_t)a4);
    }
  }
  return a2;
}

llvm::Type **llvm::IRBuilderBase::CreateZExtOrBitCast(llvm::IRBuilderBase *this, llvm::Type **a2, llvm::Type *a3, const llvm::Twine *a4)
{
  BOOL v6;
  uint64_t ZExtOrBitCast;

  if (*a2 != a3)
  {
    if (*((unsigned __int8 *)a2 + 16) > 0x14u)
    {
      ZExtOrBitCast = llvm::CastInst::CreateZExtOrBitCast();
      return (llvm::Type **)llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, ZExtOrBitCast, (uint64_t)a4);
    }
    else
    {
      a2 = (llvm::Type **)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 288))(*((_QWORD *)this + 9));
      if (a2)
        v6 = *((unsigned __int8 *)a2 + 16) >= 0x1Cu;
      else
        v6 = 0;
      if (v6)
        return (llvm::Type **)llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, (uint64_t)a2, (uint64_t)a4);
    }
  }
  return a2;
}

llvm::Module *MTLAddVertexFetchingToModulePass::addVertexFetchingToModule(uint64_t a1, llvm::Type **this, int a3, unsigned __int16 *a4, unsigned __int16 *a5, int a6, unsigned __int8 a7, int a8, unsigned __int8 a9, char a10, unsigned int a11, _QWORD *a12)
{
  llvm::NamedMDNode *NamedMetadata;
  uint64_t Operand;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const llvm::DataLayout *DataLayout;
  char v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  int *v42;
  int v43;
  int v44;
  std::vector<int>::pointer begin;
  uint64_t v46;
  size_t v47;
  int *v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  unsigned int *v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  _QWORD *v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  const llvm::DataLayout *v69;
  unsigned int v70;
  unint64_t v71;
  int v72;
  char v73;
  char v74;
  unsigned int v75;
  unsigned int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  int v81;
  int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  llvm::MDString *v87;
  _QWORD *String;
  uint64_t v89;
  BOOL v90;
  BOOL v91;
  unsigned int v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  BOOL v104;
  char v105;
  _BYTE *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  char v113;
  char *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  char *v119;
  int v120;
  llvm::LLVMContext *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  void *v127;
  int64_t v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  char v132;
  uint64_t *v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  void *v139;
  int64_t v140;
  unint64_t v141;
  unint64_t v142;
  char *v143;
  char *v144;
  char *v145;
  char *v146;
  uint64_t v147;
  char *v148;
  void *v149;
  int64_t v150;
  unint64_t v151;
  unint64_t v152;
  char *v153;
  char *v154;
  char *v155;
  char *v156;
  uint64_t v157;
  char *v158;
  void *v159;
  char *v160;
  int v161;
  char *v162;
  void *v163;
  uint64_t v164;
  int64_t v165;
  unint64_t v166;
  unint64_t v167;
  char *v168;
  char *v169;
  char *v170;
  char *v171;
  uint64_t v172;
  char *v173;
  void *v174;
  int64_t v175;
  unint64_t v176;
  unint64_t v177;
  char *v178;
  char *v179;
  char *v180;
  char *v181;
  uint64_t v182;
  int v183;
  llvm::LLVMContext *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t Impl;
  uint64_t v188;
  char *v189;
  void *v190;
  int64_t v191;
  unint64_t v192;
  unint64_t v193;
  char *v194;
  uint64_t *v195;
  char *v196;
  char *v197;
  uint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  char *v208;
  _QWORD *v209;
  unint64_t v210;
  unint64_t v211;
  char *v212;
  char *v213;
  char *v214;
  uint64_t v215;
  int v216;
  int64_t v217;
  unint64_t v218;
  unint64_t v219;
  char *v220;
  char *v221;
  char *v222;
  char *v223;
  uint64_t v224;
  int v225;
  _QWORD *v226;
  std::vector<int>::size_type v227;
  std::vector<int>::pointer v229;
  uint64_t v230;
  int *v231;
  int v232;
  uint64_t v233;
  const char *v234;
  int *v235;
  unint64_t v236;
  _QWORD *v237;
  size_t v238;
  unint64_t v239;
  uint64_t v240;
  size_t v241;
  std::vector<unsigned int> *v242;
  std::vector<unsigned int>::const_iterator v243;
  const unsigned int *end;
  BOOL v245;
  BOOL v247;
  BOOL v248;
  const char *v250;
  llvm::LLVMContext *v251;
  uint64_t v252;
  char *v253;
  uint64_t *v254;
  uint64_t v255;
  llvm::ArrayType *Int8Ty;
  uint64_t v257;
  uint64_t v258;
  _QWORD *v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  char *v263;
  void *v264;
  int64_t v265;
  unint64_t v266;
  unint64_t v267;
  char *v268;
  uint64_t *v269;
  char *v270;
  char *v271;
  uint64_t v272;
  char *v273;
  void *v274;
  int64_t v275;
  unint64_t v276;
  unint64_t v277;
  char *v278;
  uint64_t *v279;
  char *v280;
  char *v281;
  uint64_t v282;
  __int128 v283;
  llvm::LLVMContext *v284;
  uint64_t v285;
  unint64_t v286;
  char *v287;
  char *v288;
  uint64_t LLVMVectorType;
  uint64_t v290;
  char *v291;
  int64_t v292;
  void *v293;
  unint64_t v294;
  unint64_t v295;
  char *v296;
  uint64_t *v297;
  char *v298;
  char *v299;
  uint64_t v300;
  int v301;
  llvm::Type *v302;
  uint64_t Int32PtrTy;
  llvm::LLVMContext *v304;
  uint64_t Int16Ty;
  int v306;
  uint64_t v307;
  uint64_t v308;
  char *v309;
  int64_t v310;
  void *v311;
  unint64_t v312;
  unint64_t v313;
  char *v314;
  uint64_t *v315;
  char *v316;
  char *v317;
  char *v318;
  uint64_t v319;
  llvm::LLVMContext *v320;
  uint64_t v321;
  uint64_t v322;
  char *v323;
  void *v324;
  int64_t v325;
  unint64_t v326;
  unint64_t v327;
  char *v328;
  uint64_t *v329;
  char *v330;
  char *v331;
  char *v332;
  uint64_t v333;
  char *v334;
  void *v335;
  int64_t v336;
  unint64_t v337;
  unint64_t v338;
  char *v339;
  uint64_t *v340;
  char *v341;
  char *v342;
  char *v343;
  uint64_t v344;
  uint64_t v345;
  char *v346;
  _BYTE *v347;
  _BYTE *v348;
  llvm::LLVMContext *v349;
  uint64_t v350;
  unint64_t v351;
  uint64_t v352;
  char *v353;
  void *v354;
  int64_t v355;
  unint64_t v356;
  char *v357;
  uint64_t *v358;
  char *v359;
  char *v360;
  uint64_t v361;
  uint64_t v362;
  unint64_t v363;
  uint64_t v364;
  char *v365;
  void *v366;
  int64_t v367;
  unint64_t v368;
  char *v369;
  uint64_t *v370;
  char *v371;
  char *v372;
  uint64_t v373;
  llvm::LLVMContext *v374;
  llvm::LLVMContext *v375;
  std::string *v376;
  std::string::size_type size;
  std::string *v378;
  __int128 v379;
  uint64_t v380;
  char *v381;
  void *v382;
  int64_t v383;
  unint64_t v384;
  uint64_t *v385;
  char *v386;
  char *v387;
  uint64_t v388;
  int64_t v389;
  llvm::Function *v390;
  int v391;
  uint64_t VoidTy;
  uint64_t v393;
  uint64_t v394;
  llvm::Value *v395;
  llvm::BasicBlock *v396;
  const llvm::Twine *v397;
  _DWORD *v398;
  _DWORD *v399;
  unsigned int v400;
  _QWORD *i;
  llvm::Function *v402;
  uint64_t v403;
  uint64_t j;
  llvm::Constant *v405;
  llvm::LLVMContext *v406;
  unsigned int *v407;
  unint64_t v408;
  llvm::BasicBlock *v409;
  llvm::Value *v410;
  llvm::Value *v411;
  uint64_t v412;
  uint64_t v413;
  _QWORD *v414;
  uint64_t v415;
  uint64_t Cast;
  uint64_t v417;
  uint64_t *v418;
  uint64_t v419;
  uint64_t GEP;
  llvm::Type *v421;
  uint64_t AlignedLoad;
  uint64_t v423;
  llvm::Value *v424;
  uint64_t InsertElement;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  _QWORD *v429;
  llvm::Type **v430;
  llvm::Value *ZExtOrTrunc;
  llvm::Value *v432;
  llvm::Instruction *Mul;
  llvm::Value *v434;
  llvm::Value *v435;
  llvm::Type *v436;
  uint64_t v437;
  llvm::Type *v438;
  unint64_t v439;
  __int16 v440;
  llvm::Type **v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  _DWORD *v447;
  uint64_t v448;
  unsigned int *v449;
  uint64_t v450;
  int *v451;
  unsigned int v452;
  unsigned int *v453;
  unsigned int v454;
  unsigned int v455;
  int v456;
  int v457;
  unsigned int v458;
  _DWORD *v459;
  uint64_t v460;
  BOOL v461;
  int v463;
  int v464;
  unsigned int v465;
  unsigned int v466;
  unsigned int v467;
  unsigned int v468;
  __int32 *v469;
  __int32 *v470;
  __int32 *v471;
  int v472;
  uint64_t v473;
  _QWORD *v474;
  llvm::LLVMContext *v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t *v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  _DWORD *v485;
  void *v486;
  int64_t v487;
  unint64_t v488;
  uint64_t v489;
  unint64_t v490;
  char *v491;
  char *v492;
  char *v493;
  char *v494;
  char *v495;
  __int32 *v496;
  __int32 *v497;
  __int32 *v498;
  uint64_t v499;
  unint64_t v500;
  uint64_t v501;
  unint64_t v502;
  char *v503;
  __int32 *v504;
  __int32 v505;
  uint64_t k;
  uint64_t v508;
  unsigned int v509;
  int *v510;
  llvm::LLVMContext *v511;
  llvm::ArrayType *TypeFromVertexAttribFormat;
  uint64_t v513;
  uint64_t v514;
  llvm::Value *v515;
  unint64_t v516;
  llvm::LLVMContext *v517;
  uint64_t v518;
  unsigned int *v519;
  _QWORD *v520;
  llvm::LLVMContext *v521;
  uint64_t v522;
  uint64_t v523;
  llvm::Value *v524;
  int v525;
  _BYTE *v526;
  _BYTE *v527;
  unsigned int *v528;
  char *v529;
  uint64_t v530;
  uint64_t v531;
  unint64_t v532;
  char *v533;
  unsigned int v534;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  llvm::LLVMContext *v539;
  unint64_t v540;
  llvm::Value *v541;
  unint64_t v542;
  llvm::Value *v543;
  llvm::Instruction *v544;
  llvm::LLVMContext *v545;
  llvm::Value *Element;
  llvm::ArrayType *v547;
  uint64_t HalfTy;
  llvm::Value *v549;
  llvm::Instruction *v550;
  uint64_t v551;
  uint64_t *v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  unsigned int v556;
  unsigned int v557;
  unint64_t v558;
  unsigned int v559;
  unsigned int v560;
  uint64_t *v561;
  uint64_t PackedVector;
  llvm::Instruction *v563;
  uint64_t v564;
  unint64_t v565;
  unsigned int v566;
  uint64_t *v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  BOOL v572;
  BOOL v573;
  unint64_t v574;
  llvm::Value *v575;
  int v576;
  uint64_t v577;
  unsigned __int8 *v578;
  llvm::Instruction *v579;
  uint64_t v580;
  unsigned __int8 *v581;
  BOOL v582;
  char v583;
  uint64_t v584;
  int v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v590;
  uint64_t v591;
  int v592;
  llvm::NamedMDNode *v595;
  uint64_t v597;
  unsigned int v598;
  uint64_t v599;
  unsigned int v600;
  int v601;
  BOOL v602;
  unsigned int v603;
  llvm::LLVMContext *InsertValue;
  _BOOL4 v605;
  uint64_t *Alloca;
  unsigned int v608;
  int v609;
  int v610;
  unint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  llvm::Constant *v615;
  llvm::Function *v618;
  unsigned int v619;
  uint64_t v620;
  llvm::Function *v621;
  std::vector<int>::size_type __n;
  int *__na;
  unsigned int v624;
  unsigned int v625;
  char *v626;
  char *v627;
  llvm::Type *v628;
  uint64_t v629;
  uint64_t Int64Ty;
  int v631;
  llvm::Type *v632;
  llvm::Type *v633;
  int v634;
  int v635;
  uint64_t v636;
  uint64_t v637;
  const llvm::Twine *v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  int64_t v642;
  uint64_t v643;
  void *Add;
  char *v645;
  int64_t v646;
  char v647;
  uint64_t v648;
  int v649;
  llvm::Module *v650;
  int *v651;
  llvm::Type *v652;
  llvm::Type *Int32Ty;
  int v654;
  char *v655;
  char *v656;
  _QWORD *v657;
  _QWORD *v658;
  int v659;
  int v660;
  uint64_t v661;
  unint64_t v662;
  unint64_t v663;
  llvm::Type *v664;
  _QWORD v665[3];
  int *v666;
  uint64_t v667;
  char *v668;
  __int128 *v669;
  _QWORD *v670;
  int v671;
  void *v672;
  int64_t v673;
  uint64_t v674;
  uint64_t v675;
  char v676;
  unint64_t v677;
  _QWORD v678[8];
  int v679;
  void *v680;
  int64_t v681;
  uint64_t v682;
  uint64_t v683;
  char v684;
  llvm::Value *v685[3];
  __int32 *__s;
  __int32 *v687;
  __int32 *v688;
  void *v689;
  void *v690;
  unint64_t v691;
  void *v692[3];
  void *v693[3];
  void *v694[3];
  void *v695[3];
  void *v696[3];
  uint64_t v697;
  std::string v698;
  __int128 v699;
  __int128 v700;
  int v701;
  char v702;
  __int16 v703;
  void *v704[3];
  __int128 v705;
  __int128 v706;
  int v707;
  std::vector<int> v708;
  uint64_t v709[3];
  std::vector<int> v710;
  __int128 v711;
  std::string::size_type v712;
  llvm::Type *v713;
  uint64_t v714;
  std::__shared_weak_count *v715;
  std::__shared_weak_count *v716;
  std::__shared_weak_count *v717;
  uint64_t v718;
  std::vector<unsigned int> v719;
  void *v720[3];
  void *v721;
  void *v722;
  unint64_t v723;
  void *v724;
  void *v725;
  unint64_t v726;
  void *v727;
  void *v728;
  unint64_t v729;
  void *v730;
  void *v731;
  unint64_t v732;
  void *v733;
  char *v734;
  char *v735;
  void *v736[3];
  std::vector<unsigned int> v737;
  void *v738[3];
  void *v739[3];
  std::vector<int> v740;
  void *v741[3];
  void *v742[3];
  std::vector<int> v743;
  __int128 v744;
  __int128 v745;
  __int128 v746;
  __int128 v747;
  __int128 v748;
  uint64_t v749;
  std::__shared_weak_count *v750;
  std::__shared_weak_count *v751;
  std::__shared_weak_count *v752;
  _BYTE v753[96];
  std::string v754;
  __int16 v755;
  __int128 __p;
  __int128 v757;
  __int128 v758;
  __int128 v759;
  llvm::ReturnInst *v760;
  uint64_t *v761;
  _QWORD *v762;
  uint64_t v763;
  int v764;
  __int16 v765;
  char v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  _QWORD v770[42];

  v770[39] = *MEMORY[0x24BDAC8D0];
  v664 = *this;
  *(_QWORD *)&__p = "air.vertex";
  LOWORD(v758) = 259;
  v650 = (llvm::Module *)this;
  NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata((llvm::Module *)this, (const llvm::Twine *)&__p);
  if (NamedMetadata)
  {
    v602 = 0;
  }
  else
  {
    *(_QWORD *)&__p = "air.kernel";
    LOWORD(v758) = 259;
    NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v650, (const llvm::Twine *)&__p);
    v602 = NamedMetadata != 0;
  }
  v595 = NamedMetadata;
  Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
  v613 = Operand;
  v15 = (_QWORD *)(Operand - 8 * *(unsigned int *)(Operand + 8));
  v621 = *(llvm::Function **)(*v15 + 128);
  if (((a11 >> 7) & 1) == 0 || (a11 & 4) == 0 || v602 || a12[1] == *a12)
  {
    v592 = 0;
    v597 = 0;
    v591 = 0;
    v605 = 0;
  }
  else
  {
    v16 = **(_QWORD **)(*((_QWORD *)v621 + 3) + 16);
    v17 = v15[1];
    v592 = *(_DWORD *)(v17 + 8);
    __p = 0uLL;
    *(_QWORD *)&v757 = 0;
    *(_QWORD *)&v744 = 0;
    v18 = MTLAddVertexFetchingToModulePass::expandVertexOutputWithFragmentInput(Operand, v664, v16, v17, (uint64_t *)&v744, a12, 0, (uint64_t)&__p, a7);
    v605 = v18 != v16;
    v19 = v744;
    if (v18 == v16)
      v19 = 0;
    v597 = v19;
    if (v18 == v16)
      v20 = 0;
    else
      v20 = v18;
    v591 = v20;
    if ((_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
  }
  v21 = 0;
  v22 = 0;
  if (a4)
  {
    v619 = 0;
    v651 = 0;
    if (a3)
    {
      v21 = (char *)a4 + a4[2];
      v651 = (int *)((char *)a4 + a4[3]);
      v23 = a4[1];
      v22 = (v23 >> 6) & 0x1F;
      v619 = v23 >> 11;
      if (v23 >= 0x800)
      {
        if (v22)
          goto LABEL_48;
      }
    }
  }
  else
  {
    v619 = 0;
    v651 = 0;
  }
  v659 = v22;
  v626 = v21;
  v24 = *(_QWORD *)(v613 - 8 * *(unsigned int *)(v613 + 8) + 16);
  v25 = *(unsigned int *)(v24 + 8);
  if ((*((_WORD *)v621 + 9) & 1) != 0)
    llvm::Function::BuildLazyArguments(v621);
  if ((int)v25 >= 1)
  {
    v26 = 0;
    v27 = *((_QWORD *)v621 + 11);
    do
    {
      v28 = *(_QWORD *)(v24 - 8 * *(unsigned int *)(v24 + 8) + 8 * v26);
      DataLayout = (const llvm::DataLayout *)llvm::Module::getDataLayout(v650);
      llvm::DataLayout::DataLayout((llvm::DataLayout *)&__p, DataLayout);
      MTLArgumentData::MTLArgumentData((MTLArgumentData *)&v744);
      v711 = 0uLL;
      LODWORD(v712) = 0;
      parseArgumentMetadata((uint64_t)&v744, v28, v27, 0, (uint64_t)&__p, 0, (uint64_t *)&v711, 7);
      if (!a3 || (~(_DWORD)v744 & 0xA) != 0)
      {
        v27 += 40;
        v30 = 1;
      }
      else
      {
        MTLCompilerErrorObject::setErrorMessage(*(MTLCompilerErrorObject **)a1, "Vertex function requires input attributes but vertex descriptor has none");
        v30 = 0;
      }
      llvm::DenseMap<llvm::Metadata *,std::vector<MTLStructMemberInfo> *,llvm::DenseMapInfo<llvm::Metadata *,void>,llvm::detail::DenseMapPair<llvm::Metadata *,std::vector<MTLStructMemberInfo> *>>::~DenseMap((uint64_t)&v711);
      *(_QWORD *)&v711 = v753;
      std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v711);
      v31 = v752;
      if (v752)
      {
        p_shared_owners = (unint64_t *)&v752->__shared_owners_;
        do
          v33 = __ldaxr(p_shared_owners);
        while (__stlxr(v33 - 1, p_shared_owners));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      v34 = v751;
      if (v751)
      {
        v35 = (unint64_t *)&v751->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      v37 = v750;
      if (v750)
      {
        v38 = (unint64_t *)&v750->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      MEMORY[0x24268C8C4](&__p);
      if ((v30 & 1) == 0)
        return 0;
      ++v26;
    }
    while (v26 != v25);
  }
  v21 = v626;
  v22 = v659;
  if (v605)
  {
LABEL_48:
    v660 = v22;
    v627 = v21;
    v40 = 0;
    if (v619)
    {
      v41 = v619;
      v42 = v651;
      do
      {
        v43 = *v42;
        v42 += 2;
        v44 = v43 & 0x1F;
        if (v44 > v40)
          v40 = v44;
        --v41;
      }
      while (v41);
    }
    LODWORD(__p) = 0;
    std::vector<int>::vector(&v743, (v40 + 1), (const std::vector<int>::value_type *)&__p);
    begin = v743.__begin_;
    memset(v743.__begin_, 255, 4 * v40 + 4);
    if (v619)
    {
      v46 = 0;
      v47 = v619;
      v48 = v651;
      v49 = v660;
      v50 = a11;
      do
      {
        v51 = *v48;
        v48 += 2;
        begin[v51 & 0x1F] = v46++;
      }
      while (v619 != v46);
    }
    else
    {
      v47 = 0;
      v49 = v660;
      v50 = a11;
    }
    LOBYTE(__p) = 0;
    std::vector<unsigned char>::vector(v742, v47, &__p);
    LOBYTE(__p) = 0;
    std::vector<unsigned char>::vector(v741, v47, &__p);
    LODWORD(__p) = 0;
    std::vector<int>::vector(&v740, v47, (const std::vector<int>::value_type *)&__p);
    if (v619)
      memset(v740.__begin_, 255, 4 * v47);
    std::vector<llvm::MDNode *>::vector(v739, v47);
    std::vector<llvm::Type *>::vector(v738, v47);
    LODWORD(__p) = 0;
    std::vector<unsigned int>::vector(&v737, v47, (const std::vector<unsigned int>::value_type *)&__p);
    memset(v736, 0, sizeof(v736));
    std::vector<BOOL>::reserve((char **)v736, *((_QWORD *)v621 + 12));
    v734 = 0;
    v733 = 0;
    v735 = 0;
    v731 = 0;
    v730 = 0;
    v732 = 0;
    v728 = 0;
    v727 = 0;
    v729 = 0;
    v601 = (a3 ^ 1) & (v50 >> 7);
    if (v601 == 1)
      v52 = *((_QWORD *)v621 + 12);
    else
      v52 = v49;
    std::vector<llvm::Metadata *>::reserve(&v730, v52);
    std::vector<llvm::Metadata *>::reserve(&v727, (uint64_t)(v732 - (_QWORD)v730) >> 3);
    v725 = 0;
    v724 = 0;
    v726 = 0;
    std::vector<llvm::Metadata *>::reserve(&v724, v49);
    if (v619)
    {
      v53 = 0;
      v54 = -1;
      v55 = (unsigned int *)v651;
      v56 = -1;
      do
      {
        v57 = *v55;
        v55 += 2;
        v58 = v57 >> 10;
        if (v57 >> 10 == 43)
          v59 = v53;
        else
          v59 = v54;
        if (v58 == 44)
          v56 = v53;
        else
          v54 = v59;
        ++v53;
      }
      while (v47 != v53);
    }
    else
    {
      v56 = -1;
      v54 = -1;
    }
    v722 = 0;
    v721 = 0;
    v723 = 0;
    std::vector<llvm::Metadata *>::reserve(&v721, 0xAuLL);
    LOBYTE(__p) = -1;
    std::vector<signed char>::vector(v720, 0xAuLL, &__p);
    __n = v49;
    std::vector<unsigned int>::vector(&v719, *((_QWORD *)v621 + 12));
    MTLFrameworkPass::getArgumentMetadataIndices(*(_QWORD *)(v613 - 8 * *(unsigned int *)(v613 + 8) + 16), (uint64_t)&v719);
    v632 = *(llvm::Type **)(v613 - 8 * *(unsigned int *)(v613 + 8) + 16);
    v60 = *((_QWORD *)v621 + 12);
    if ((*((_WORD *)v621 + 9) & 1) != 0)
      llvm::Function::BuildLazyArguments(v621);
    v663 = v47;
    v600 = v56;
    v603 = v54;
    if ((int)v60 >= 1)
    {
      v624 = v40;
      v61 = 0;
      v62 = 0;
      v645 = 0;
      v63 = 0;
      v609 = 0;
      v647 = 0;
      v638 = 0;
      v640 = 0;
      v641 = v60;
      v629 = *((_QWORD *)v621 + 3);
      v64 = (_QWORD *)*((_QWORD *)v621 + 11);
      v65 = (a11 >> 7) & 1;
      if (!a4)
        v65 = 0;
      v598 = v65;
      v649 = -1;
      while (1)
      {
        v66 = v719.__begin_[v63];
        v657 = v64;
        v643 = v63 + 1;
        if ((_DWORD)v66 == -1)
        {
          v73 = 0;
          v72 = 0;
          LOBYTE(v70) = 0;
          LODWORD(v71) = -1;
          v74 = 11;
          goto LABEL_319;
        }
        v67 = *(_QWORD *)(*(_QWORD *)(v629 + 16) + 8 * (v63 + 1));
        v68 = *((_QWORD *)v632 + v66 - *((unsigned int *)v632 + 2));
        v69 = (const llvm::DataLayout *)llvm::Module::getDataLayout(v650);
        llvm::DataLayout::DataLayout((llvm::DataLayout *)&__p, v69);
        MTLArgumentData::MTLArgumentData((MTLArgumentData *)&v744);
        v705 = 0uLL;
        LODWORD(v706) = 0;
        parseArgumentMetadata((uint64_t)&v744, v68, (uint64_t)v64, 0, (uint64_t)&__p, 0, (uint64_t *)&v705, 7);
        v70 = (v744 >> 3) & 1;
        if (v749 && a10)
        {
          if (!v70)
          {
            LODWORD(v71) = 0;
            v72 = 0;
            goto LABEL_301;
          }
          v77 = *(_DWORD *)(v749 + 8);
          v635 = v63;
          v648 = (v77 - isPatchControlPointInputUnused(v749));
          if (v648 >= 3)
          {
            v78 = 2;
            v655 = v61;
            v614 = v68;
            while (1)
            {
              v79 = *(_QWORD *)(v749 - 8 * *(unsigned int *)(v749 + 8) + 8 * v78);
              v80 = *(_DWORD *)(v79 + 8);
              if (!v80)
                goto LABEL_148;
              v81 = 0;
              v82 = 0;
              v83 = 0;
              v84 = 0;
              v85 = 0;
              v652 = 0;
              v86 = 0;
              do
              {
                v87 = *(llvm::MDString **)(v79 - 8 * *(unsigned int *)(v79 + 8) + 8 * v85);
                if (v87 && !*(_BYTE *)v87)
                {
                  String = (_QWORD *)llvm::MDString::getString(v87);
                  if (v89 == 18)
                  {
                    if (!memcmp(String, "air.location_index", 0x12uLL))
                    {
                      MTLArgumentData::MTLArgumentData((MTLArgumentData *)&v711);
                      parseControlPointInputMetadata(v79, (uint64_t)&v711);
                      v93 = v711;
                      v84 = DWORD1(v711);
                      v652 = v713;
                      v86 = v714;
                      *(_QWORD *)&v699 = &v718;
                      std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v699);
                      v94 = v717;
                      if (v717)
                      {
                        v95 = (unint64_t *)&v717->__shared_owners_;
                        do
                          v96 = __ldaxr(v95);
                        while (__stlxr(v96 - 1, v95));
                        if (!v96)
                        {
                          ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                          std::__shared_weak_count::__release_weak(v94);
                        }
                      }
                      v97 = v716;
                      if (v716)
                      {
                        v98 = (unint64_t *)&v716->__shared_owners_;
                        do
                          v99 = __ldaxr(v98);
                        while (__stlxr(v99 - 1, v98));
                        if (!v99)
                        {
                          ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
                          std::__shared_weak_count::__release_weak(v97);
                        }
                      }
                      v100 = v715;
                      if (v715)
                      {
                        v101 = (unint64_t *)&v715->__shared_owners_;
                        do
                          v102 = __ldaxr(v101);
                        while (__stlxr(v102 - 1, v101));
                        if (!v102)
                        {
                          ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                          std::__shared_weak_count::__release_weak(v100);
                        }
                      }
                      v81 = (v93 >> 3) & 1;
                      v82 = 1;
                      v83 = v78 - 3;
                    }
                  }
                  else if (v89 == 32)
                  {
                    v90 = *String == 0x637461702E726961 && String[1] == 0x6F72746E6F635F68;
                    v91 = v90 && String[2] == 0x5F746E696F705F6CLL;
                    if (v91 && String[3] == 0x6E6F6974636E7566)
                    {
                      v638 = *(const llvm::Twine **)(*(_QWORD *)(v79 - 8 * *(unsigned int *)(v79 + 8) + 8 * ++v85)
                                                   + 128);
                      v640 = **(_QWORD **)(*((_QWORD *)v638 + 3) + 16);
                    }
                  }
                }
                ++v85;
              }
              while (v85 < v80);
              if ((v81 & v82 & 1) == 0)
                break;
              v61 = v655;
              v49 = v660;
              if (v84 > v624 || (v103 = v743.__begin_[v84], (v103 & 0x80000000) != 0))
              {
                MTLCompilerErrorObject::setFormattedErrorMessage(*(char ***)a1, "Vertex attribute %d is not defined in the vertex descriptor.", v84);
                LODWORD(v71) = 0;
                v72 = 0;
                v132 = 0;
                v73 = 1;
                v74 = 11;
                LOBYTE(v70) = 1;
                v649 = v635;
                v647 = 1;
                goto LABEL_303;
              }
              *((_BYTE *)v742[0] + v103) = 1;
              if (v86)
                v104 = *(_BYTE *)v652 != 117;
              else
                v104 = 0;
              *((_BYTE *)v741[0] + v103) = v104;
              v740.__begin_[v103] = v635;
              *((_QWORD *)v739[0] + v103) = v614;
              *((_QWORD *)v738[0] + v103) = *(_QWORD *)(*(_QWORD *)(v640 + 16) + 8 * v83);
              v737.__begin_[v103] = v83;
LABEL_151:
              if (++v78 == v648)
                goto LABEL_152;
            }
            v61 = v655;
LABEL_148:
            v49 = v660;
            goto LABEL_151;
          }
LABEL_152:
          LODWORD(v71) = 0;
          v72 = 0;
          v73 = 1;
          v74 = 11;
          LOBYTE(v70) = 1;
          v649 = v635;
          v647 = 1;
LABEL_302:
          v132 = 1;
          goto LABEL_303;
        }
        if (v749)
          v75 = 1;
        else
          v75 = (v744 >> 13) & 1;
        if ((v744 & 2) == 0)
          v75 = 1;
        if (v75 != 1 || ((v744 >> 13) & 1 & a9) != 0)
        {
          LODWORD(v71) = DWORD1(v744);
          v72 = DWORD2(v744);
          v76 = v598;
          if (!v70)
            v76 = 0;
          if (v76 == 1)
          {
            if (DWORD1(v744) <= v624 && v743.__begin_[DWORD1(v744)] != -1)
            {
              if (v601)
              {
                LOBYTE(v70) = 1;
LABEL_160:
                v108 = v68;
                v109 = (unint64_t)((_BYTE *)v731 - (_BYTE *)v730) >> 3;
                v110 = v734;
                if (v734 >= v735)
                {
                  v114 = (char *)v733;
                  v115 = (v734 - (_BYTE *)v733) >> 2;
                  v116 = v115 + 1;
                  if ((unint64_t)(v115 + 1) >> 62)
                    std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
                  v117 = v735 - (_BYTE *)v733;
                  if ((v735 - (_BYTE *)v733) >> 1 > v116)
                    v116 = v117 >> 1;
                  if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFFCLL)
                    v118 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v118 = v116;
                  if (v118)
                  {
                    v119 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v735, v118);
                    v110 = v734;
                    v114 = (char *)v733;
                  }
                  else
                  {
                    v119 = 0;
                  }
                  v160 = &v119[4 * v115];
                  *(_DWORD *)v160 = v109;
                  v111 = v160 + 4;
                  while (v110 != v114)
                  {
                    v161 = *((_DWORD *)v110 - 1);
                    v110 -= 4;
                    *((_DWORD *)v160 - 1) = v161;
                    v160 -= 4;
                  }
                  v733 = v160;
                  v734 = v111;
                  v735 = &v119[4 * v118];
                  if (v114)
                    operator delete(v114);
                }
                else
                {
                  *(_DWORD *)v734 = v109;
                  v111 = v110 + 4;
                }
                v734 = v111;
                v162 = (char *)v731;
                if ((unint64_t)v731 >= v732)
                {
                  v165 = ((_BYTE *)v731 - (_BYTE *)v730) >> 3;
                  if ((unint64_t)(v165 + 1) >> 61)
                    std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
                  v164 = v108;
                  v166 = (uint64_t)(v732 - (_QWORD)v730) >> 2;
                  if (v166 <= v165 + 1)
                    v166 = v165 + 1;
                  if (v732 - (unint64_t)v730 >= 0x7FFFFFFFFFFFFFF8)
                    v167 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v167 = v166;
                  if (v167)
                    v168 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v732, v167);
                  else
                    v168 = 0;
                  v169 = &v168[8 * v165];
                  *(_QWORD *)v169 = v67;
                  v163 = v169 + 8;
                  v170 = (char *)v731;
                  v171 = (char *)v730;
                  if (v731 != v730)
                  {
                    do
                    {
                      v172 = *((_QWORD *)v170 - 1);
                      v170 -= 8;
                      *((_QWORD *)v169 - 1) = v172;
                      v169 -= 8;
                    }
                    while (v170 != v171);
                    v170 = (char *)v730;
                  }
                  v730 = v169;
                  v731 = v163;
                  v732 = (unint64_t)&v168[8 * v167];
                  if (v170)
                    operator delete(v170);
                }
                else
                {
                  *(_QWORD *)v731 = v67;
                  v163 = v162 + 8;
                  v164 = v108;
                }
                v731 = v163;
                v173 = (char *)v728;
                if ((unint64_t)v728 >= v729)
                {
                  v175 = ((_BYTE *)v728 - (_BYTE *)v727) >> 3;
                  if ((unint64_t)(v175 + 1) >> 61)
                    std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
                  v176 = (uint64_t)(v729 - (_QWORD)v727) >> 2;
                  if (v176 <= v175 + 1)
                    v176 = v175 + 1;
                  if (v729 - (unint64_t)v727 >= 0x7FFFFFFFFFFFFFF8)
                    v177 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v177 = v176;
                  if (v177)
                    v178 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v729, v177);
                  else
                    v178 = 0;
                  v179 = &v178[8 * v175];
                  *(_QWORD *)v179 = 0;
                  v174 = v179 + 8;
                  v180 = (char *)v728;
                  v181 = (char *)v727;
                  if (v728 != v727)
                  {
                    do
                    {
                      v182 = *((_QWORD *)v180 - 1);
                      v180 -= 8;
                      *((_QWORD *)v179 - 1) = v182;
                      v179 -= 8;
                    }
                    while (v180 != v181);
                    v180 = (char *)v727;
                  }
                  v727 = v179;
                  v728 = v174;
                  v729 = (unint64_t)&v178[8 * v177];
                  if (v180)
                    operator delete(v180);
                }
                else
                {
                  *(_QWORD *)v728 = 0;
                  v174 = v173 + 8;
                }
                v728 = v174;
                v183 = *(_DWORD *)(v164 + 8);
                std::vector<llvm::Metadata *>::vector(&v711, v183);
                llvm::Type::getInt32Ty(v664, v184);
                llvm::ConstantInt::get();
                *(_QWORD *)v711 = llvm::ValueAsMetadata::get();
                if (v183 >= 2)
                {
                  v185 = v164 - 8 * *(unsigned int *)(v164 + 8);
                  v186 = 8;
                  do
                  {
                    *(_QWORD *)(v711 + v186) = *(_QWORD *)(v185 + v186);
                    v186 += 8;
                  }
                  while (8 * v183 != v186);
                }
                Impl = llvm::MDTuple::getImpl();
                v49 = v660;
                v188 = Impl;
                v189 = (char *)v725;
                if ((unint64_t)v725 >= v726)
                {
                  v191 = ((_BYTE *)v725 - (_BYTE *)v724) >> 3;
                  if ((unint64_t)(v191 + 1) >> 61)
                    std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
                  v192 = (uint64_t)(v726 - (_QWORD)v724) >> 2;
                  if (v192 <= v191 + 1)
                    v192 = v191 + 1;
                  if (v726 - (unint64_t)v724 >= 0x7FFFFFFFFFFFFFF8)
                    v193 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v193 = v192;
                  if (v193)
                    v194 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v726, v193);
                  else
                    v194 = 0;
                  v195 = (uint64_t *)&v194[8 * v191];
                  *v195 = v188;
                  v190 = v195 + 1;
                  v196 = (char *)v725;
                  v197 = (char *)v724;
                  if (v725 != v724)
                  {
                    do
                    {
                      v198 = *((_QWORD *)v196 - 1);
                      v196 -= 8;
                      *--v195 = v198;
                    }
                    while (v196 != v197);
                    v196 = (char *)v724;
                  }
                  v724 = v195;
                  v725 = v190;
                  v726 = (unint64_t)&v194[8 * v193];
                  if (v196)
                    operator delete(v196);
                }
                else
                {
                  *(_QWORD *)v725 = Impl;
                  v190 = v189 + 8;
                }
                v725 = v190;
                if ((_QWORD)v711)
                {
                  *((_QWORD *)&v711 + 1) = v711;
                  operator delete((void *)v711);
                }
                ++v609;
LABEL_301:
                v73 = 1;
                v74 = 11;
                goto LABEL_302;
              }
              goto LABEL_163;
            }
            v70 = 0;
          }
          if ((v601 & 1) != 0)
            goto LABEL_160;
          if (!v70)
            goto LABEL_301;
LABEL_163:
          if (DWORD1(v744) <= v624)
          {
            v112 = v743.__begin_[DWORD1(v744)];
            if ((v112 & 0x80000000) == 0)
            {
              *((_BYTE *)v742[0] + v112) = 1;
              v113 = BYTE8(v746);
              if (*((_QWORD *)&v746 + 1))
                v113 = *(_BYTE *)v746 != 117;
              *((_BYTE *)v741[0] + v112) = v113;
              v740.__begin_[v112] = v63;
              *((_QWORD *)v739[0] + v112) = v68;
              *((_QWORD *)v738[0] + v112) = *v64;
              v73 = 1;
              v74 = 11;
              LOBYTE(v70) = 1;
              goto LABEL_302;
            }
          }
          MTLCompilerErrorObject::setFormattedErrorMessage(*(char ***)a1, "Vertex attribute %d is not defined in the vertex descriptor.", DWORD1(v744));
          v132 = 0;
          v73 = 1;
          v74 = 11;
          LOBYTE(v70) = 1;
          goto LABEL_303;
        }
        if ((v744 & 4) == 0)
          break;
        LOWORD(v711) = 11;
        DWORD1(v711) = 0;
        vertexFetchBuiltInInfo((uint64_t)&v711, (uint64_t)&v744);
        v74 = v711;
        if (!(_BYTE)v711 && (v603 & 0x80000000) == 0)
        {
          *((_BYTE *)v742[0] + v603) = 1;
          v105 = BYTE8(v746);
          if (*((_QWORD *)&v746 + 1))
            v105 = *(_BYTE *)v746 != 117;
          v106 = v741[0];
          v107 = v603;
          goto LABEL_181;
        }
        if (v711 == 1 && (v600 & 0x80000000) == 0)
        {
          *((_BYTE *)v742[0] + v600) = 1;
          v105 = BYTE8(v746);
          if (*((_QWORD *)&v746 + 1))
            v105 = *(_BYTE *)v746 != 117;
          v106 = v741[0];
          v107 = v600;
LABEL_181:
          v106[v107] = v105;
          v740.__begin_[v107] = v63;
          *((_QWORD *)v739[0] + v107) = v68;
          *((_QWORD *)v738[0] + v107) = *v657;
LABEL_182:
          v120 = *(_DWORD *)(v68 + 8);
          std::vector<llvm::Metadata *>::vector(&v711, v120);
          llvm::Type::getInt32Ty(v664, v121);
          llvm::ConstantInt::get();
          *(_QWORD *)v711 = llvm::ValueAsMetadata::get();
          if (v120 >= 2)
          {
            v122 = v68 - 8 * *(unsigned int *)(v68 + 8);
            v123 = 8;
            do
            {
              *(_QWORD *)(v711 + v123) = *(_QWORD *)(v122 + v123);
              v123 += 8;
            }
            while (8 * v120 != v123);
          }
          v124 = llvm::MDTuple::getImpl();
          v49 = v660;
          v125 = v124;
          v126 = (char *)v725;
          if ((unint64_t)v725 >= v726)
          {
            v128 = ((_BYTE *)v725 - (_BYTE *)v724) >> 3;
            if ((unint64_t)(v128 + 1) >> 61)
              std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
            v129 = (uint64_t)(v726 - (_QWORD)v724) >> 2;
            if (v129 <= v128 + 1)
              v129 = v128 + 1;
            if (v726 - (unint64_t)v724 >= 0x7FFFFFFFFFFFFFF8)
              v130 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v130 = v129;
            if (v130)
              v131 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v726, v130);
            else
              v131 = 0;
            v133 = (uint64_t *)&v131[8 * v128];
            *v133 = v125;
            v127 = v133 + 1;
            v134 = (char *)v725;
            v135 = (char *)v724;
            if (v725 != v724)
            {
              do
              {
                v136 = *((_QWORD *)v134 - 1);
                v134 -= 8;
                *--v133 = v136;
              }
              while (v134 != v135);
              v134 = (char *)v724;
            }
            v724 = v133;
            v725 = v127;
            v726 = (unint64_t)&v131[8 * v130];
            if (v134)
              operator delete(v134);
          }
          else
          {
            *(_QWORD *)v725 = v124;
            v127 = v126 + 8;
          }
          v725 = v127;
          if ((_QWORD)v711)
          {
            *((_QWORD *)&v711 + 1) = v711;
            operator delete((void *)v711);
          }
          v137 = *v657;
          v138 = (char *)v731;
          if ((unint64_t)v731 >= v732)
          {
            v140 = ((_BYTE *)v731 - (_BYTE *)v730) >> 3;
            if ((unint64_t)(v140 + 1) >> 61)
              std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
            v141 = (uint64_t)(v732 - (_QWORD)v730) >> 2;
            if (v141 <= v140 + 1)
              v141 = v140 + 1;
            if (v732 - (unint64_t)v730 >= 0x7FFFFFFFFFFFFFF8)
              v142 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v142 = v141;
            if (v142)
              v143 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v732, v142);
            else
              v143 = 0;
            v144 = &v143[8 * v140];
            *(_QWORD *)v144 = v137;
            v139 = v144 + 8;
            v145 = (char *)v731;
            v146 = (char *)v730;
            if (v731 != v730)
            {
              do
              {
                v147 = *((_QWORD *)v145 - 1);
                v145 -= 8;
                *((_QWORD *)v144 - 1) = v147;
                v144 -= 8;
              }
              while (v145 != v146);
              v145 = (char *)v730;
            }
            v730 = v144;
            v731 = v139;
            v732 = (unint64_t)&v143[8 * v142];
            if (v145)
              operator delete(v145);
          }
          else
          {
            *(_QWORD *)v731 = v137;
            v139 = v138 + 8;
          }
          v731 = v139;
          v148 = (char *)v728;
          if ((unint64_t)v728 >= v729)
          {
            v150 = ((_BYTE *)v728 - (_BYTE *)v727) >> 3;
            if ((unint64_t)(v150 + 1) >> 61)
              std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
            v151 = (uint64_t)(v729 - (_QWORD)v727) >> 2;
            if (v151 <= v150 + 1)
              v151 = v150 + 1;
            if (v729 - (unint64_t)v727 >= 0x7FFFFFFFFFFFFFF8)
              v152 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v152 = v151;
            if (v152)
              v153 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v729, v152);
            else
              v153 = 0;
            v154 = &v153[8 * v150];
            *(_QWORD *)v154 = 0;
            v149 = v154 + 8;
            v155 = (char *)v728;
            v156 = (char *)v727;
            if (v728 != v727)
            {
              do
              {
                v157 = *((_QWORD *)v155 - 1);
                v155 -= 8;
                *((_QWORD *)v154 - 1) = v157;
                v154 -= 8;
              }
              while (v155 != v156);
              v155 = (char *)v727;
            }
            v727 = v154;
            v728 = v149;
            v729 = (unint64_t)&v153[8 * v152];
            if (v155)
              operator delete(v155);
          }
          else
          {
            *(_QWORD *)v728 = 0;
            v149 = v148 + 8;
          }
          v73 = 0;
          v72 = 0;
          LODWORD(v71) = v609;
          v728 = v149;
          v132 = 1;
          ++v609;
          goto LABEL_303;
        }
        if (v711 == 11)
          goto LABEL_182;
        v71 = (unint64_t)((_BYTE *)v722 - (_BYTE *)v721) >> 3;
        *((_BYTE *)v720[0] + (char)v711) = v71;
        v158 = (char *)v722;
        if ((unint64_t)v722 >= v723)
        {
          v217 = ((_BYTE *)v722 - (_BYTE *)v721) >> 3;
          if ((unint64_t)(v217 + 1) >> 61)
            std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
          v218 = (uint64_t)(v723 - (_QWORD)v721) >> 2;
          if (v218 <= v217 + 1)
            v218 = v217 + 1;
          if (v723 - (unint64_t)v721 >= 0x7FFFFFFFFFFFFFF8)
            v219 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v219 = v218;
          if (v219)
            v220 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v723, v219);
          else
            v220 = 0;
          v221 = &v220[8 * v217];
          *(_QWORD *)v221 = v711;
          v159 = v221 + 8;
          v222 = (char *)v722;
          v223 = (char *)v721;
          if (v722 != v721)
          {
            do
            {
              v224 = *((_QWORD *)v222 - 1);
              v222 -= 8;
              *((_QWORD *)v221 - 1) = v224;
              v221 -= 8;
            }
            while (v222 != v223);
            v222 = (char *)v721;
          }
          v721 = v221;
          v722 = v159;
          v723 = (unint64_t)&v220[8 * v219];
          if (v222)
            operator delete(v222);
        }
        else
        {
          *(_QWORD *)v722 = v711;
          v159 = v158 + 8;
        }
        v73 = 0;
        v72 = 0;
        v722 = v159;
        v132 = 1;
LABEL_303:
        llvm::DenseMap<llvm::Metadata *,std::vector<MTLStructMemberInfo> *,llvm::DenseMapInfo<llvm::Metadata *,void>,llvm::detail::DenseMapPair<llvm::Metadata *,std::vector<MTLStructMemberInfo> *>>::~DenseMap((uint64_t)&v705);
        *(_QWORD *)&v711 = v753;
        std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v711);
        v199 = v752;
        if (v752)
        {
          v200 = (unint64_t *)&v752->__shared_owners_;
          do
            v201 = __ldaxr(v200);
          while (__stlxr(v201 - 1, v200));
          if (!v201)
          {
            ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
            std::__shared_weak_count::__release_weak(v199);
          }
        }
        v202 = v751;
        if (v751)
        {
          v203 = (unint64_t *)&v751->__shared_owners_;
          do
            v204 = __ldaxr(v203);
          while (__stlxr(v204 - 1, v203));
          if (!v204)
          {
            ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
            std::__shared_weak_count::__release_weak(v202);
          }
        }
        v205 = v750;
        if (v750)
        {
          v206 = (unint64_t *)&v750->__shared_owners_;
          do
            v207 = __ldaxr(v206);
          while (__stlxr(v207 - 1, v206));
          if (!v207)
          {
            ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
            std::__shared_weak_count::__release_weak(v205);
          }
        }
        MEMORY[0x24268C8C4](&__p);
        if ((v132 & 1) == 0)
          goto LABEL_487;
LABEL_319:
        LOBYTE(__p) = v70;
        std::vector<BOOL>::push_back((uint64_t)v736, &__p);
        if (v62 >= v645)
        {
          v210 = 0xAAAAAAAAAAAAAAABLL * ((v62 - v61) >> 2) + 1;
          if (v210 > 0x1555555555555555)
            std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((v645 - v61) >> 2) > v210)
            v210 = 0x5555555555555556 * ((v645 - v61) >> 2);
          if (0xAAAAAAAAAAAAAAABLL * ((v645 - v61) >> 2) >= 0xAAAAAAAAAAAAAAALL)
            v211 = 0x1555555555555555;
          else
            v211 = v210;
          if (v211)
          {
            if (v211 > 0x1555555555555555)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v212 = (char *)operator new(12 * v211);
          }
          else
          {
            v212 = 0;
          }
          v213 = &v212[4 * ((v62 - v61) >> 2)];
          *v213 = v73;
          v213[1] = v74;
          *((_DWORD *)v213 + 1) = v71;
          *((_DWORD *)v213 + 2) = v72;
          if (v62 == v61)
          {
            v61 = &v212[4 * ((v62 - v61) >> 2)];
            v209 = v657;
          }
          else
          {
            v214 = &v212[4 * ((v62 - v61) >> 2)];
            v209 = v657;
            do
            {
              v215 = *(_QWORD *)(v62 - 12);
              v62 -= 12;
              v216 = *((_DWORD *)v62 + 2);
              *(_QWORD *)(v214 - 12) = v215;
              v214 -= 12;
              *((_DWORD *)v214 + 2) = v216;
            }
            while (v62 != v61);
            v62 = v61;
            v61 = v214;
          }
          v645 = &v212[12 * v211];
          v208 = v213 + 12;
          if (v62)
            operator delete(v62);
        }
        else
        {
          *v62 = v73;
          v62[1] = v74;
          v208 = v62 + 12;
          *((_DWORD *)v62 + 1) = v71;
          *((_DWORD *)v62 + 2) = v72;
          v209 = v657;
        }
        v64 = v209 + 5;
        v62 = v208;
        v63 = v643;
        if (v643 == v641)
          goto LABEL_356;
      }
      v74 = 11;
      goto LABEL_182;
    }
    v61 = 0;
    v638 = 0;
    v647 = 0;
    v649 = -1;
LABEL_356:
    v625 = a11 & 0x20000;
    v225 = 0;
    if (v49)
    {
      v226 = v627 + 8;
      v227 = __n;
      while (v625 || *v226 == -1 || (*v226 & 3) == 0)
      {
        if ((*(_DWORD *)(v226 - 1) & 0x1F) > v225)
          v225 = *(_DWORD *)(v226 - 1) & 0x1F;
        v226 += 2;
        if (!--v227)
          goto LABEL_367;
      }
      MTLCompilerErrorObject::setErrorMessage(*(MTLCompilerErrorObject **)a1, "Buffer stride is not a multiple of 4 bytes.");
LABEL_487:
      v650 = 0;
      goto LABEL_931;
    }
LABEL_367:
    LODWORD(__p) = 0;
    std::vector<int>::vector(&v710, (v225 + 1), (const std::vector<int>::value_type *)&__p);
    v229 = v710.__begin_;
    memset(v710.__begin_, 255, 4 * v225 + 4);
    if (v49)
    {
      v230 = 0;
      v231 = (int *)v627;
      do
      {
        v232 = *v231;
        v231 += 4;
        v229[v232 & 0x1F] = v230++;
      }
      while (__n != v230);
    }
    v656 = v61;
    memset(v709, 0, sizeof(v709));
    std::vector<std::vector<unsigned int>>::resize(v709, __n);
    if (v619)
    {
      v233 = 0;
      v234 = "Attribute %d incompatible with MTLStepFunctionPerVertex.";
      do
      {
        if (*((_BYTE *)v742[0] + v233))
        {
          v235 = &v651[2 * v233];
          v236 = ((unint64_t)*v235 >> 5) & 0x1F;
          if ((int)v236 > v225 || v710.__begin_[v236] == -1)
          {
            MTLCompilerErrorObject::setFormattedErrorMessage(*(char ***)a1, "Attribute %d refers to a buffer index %d that is not valid.", *v235 & 0x1F, v236);
            v650 = 0;
            goto LABEL_929;
          }
          v237 = (_QWORD *)llvm::MDString::getString(*(llvm::MDString **)(*((_QWORD *)v739[0] + v233)
                                                                        - 8
                                                                        * *(unsigned int *)(*((_QWORD *)v739[0] + v233)
                                                                                          + 8)
                                                                        + 8));
          v239 = *v235;
          v240 = v710.__begin_[(v239 >> 5) & 0x1F];
          v241 = v238;
          switch(*(_DWORD *)&v627[16 * v240] >> 5)
          {
            case 0:
            case 2:
            case 5:
            case 6:
            case 7:
            case 8:
              goto LABEL_376;
            case 1:
              if (v238 == 13)
              {
                v250 = "air.vertex_id";
LABEL_414:
                if (memcmp(v237, v250, v241))
                  goto LABEL_967;
                goto LABEL_376;
              }
              if (v238 == 15)
              {
                v250 = "air.instance_id";
                goto LABEL_414;
              }
              if (v238 != 16)
                goto LABEL_967;
              if (*v237 != 0x747265762E726961 || v237[1] != 0x7475706E695F7865)
                goto LABEL_967;
LABEL_376:
              v242 = (std::vector<unsigned int> *)(v709[0] + 24 * (int)v240);
              v243.__i_ = v242->__begin_;
              end = v242->__end_;
              if (v242->__begin_ != end)
              {
                while (v651[2 * v233 + 1] > v651[2 * *v243.__i_ + 1])
                {
                  if (++v243.__i_ == end)
                  {
                    v243.__i_ = v242->__end_;
                    break;
                  }
                }
              }
              LODWORD(__p) = v233;
              std::vector<unsigned int>::insert(v242, v243, (std::vector<unsigned int>::value_type *)&__p);
              break;
            case 3:
              if (v238 == 29)
              {
                if (memcmp(v237, "air.patch_control_point_input", 0x1DuLL))
                  goto LABEL_966;
              }
              else if (v238 != 15
                     || (*v237 == 0x637461702E726961
                       ? (v245 = *(_QWORD *)((char *)v237 + 7) == 0x7475706E695F6863)
                       : (v245 = 0),
                         !v245))
              {
LABEL_966:
                v234 = "Attribute %d incompatible with MTLStepFunctionPerPatch.";
LABEL_967:
                MTLCompilerErrorObject::setFormattedErrorMessage(*(char ***)a1, v234, v241, v239 & 0x1F);
                v650 = 0;
LABEL_929:
                *(_QWORD *)&__p = v709;
                std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                if (v710.__begin_)
                {
                  v710.__end_ = v710.__begin_;
                  operator delete(v710.__begin_);
                }
LABEL_931:
                if (v719.__begin_)
                {
                  v719.__end_ = v719.__begin_;
                  operator delete(v719.__begin_);
                }
                if (v720[0])
                {
                  v720[1] = v720[0];
                  operator delete(v720[0]);
                }
                if (v721)
                {
                  v722 = v721;
                  operator delete(v721);
                }
                if (v724)
                {
                  v725 = v724;
                  operator delete(v724);
                }
                if (v727)
                {
                  v728 = v727;
                  operator delete(v727);
                }
                if (v730)
                {
                  v731 = v730;
                  operator delete(v730);
                }
                if (v733)
                {
                  v734 = (char *)v733;
                  operator delete(v733);
                }
                if (v61)
                  operator delete(v61);
                if (v736[0])
                  operator delete(v736[0]);
                if (v737.__begin_)
                {
                  v737.__end_ = v737.__begin_;
                  operator delete(v737.__begin_);
                }
                if (v738[0])
                {
                  v738[1] = v738[0];
                  operator delete(v738[0]);
                }
                if (v739[0])
                {
                  v739[1] = v739[0];
                  operator delete(v739[0]);
                }
                if (v740.__begin_)
                {
                  v740.__end_ = v740.__begin_;
                  operator delete(v740.__begin_);
                }
                if (v741[0])
                {
                  v741[1] = v741[0];
                  operator delete(v741[0]);
                }
                if (v742[0])
                {
                  v742[1] = v742[0];
                  operator delete(v742[0]);
                }
                if (v743.__begin_)
                {
                  v743.__end_ = v743.__begin_;
                  operator delete(v743.__begin_);
                }
                return v650;
              }
              goto LABEL_376;
            case 4:
              if (v238 == 29)
              {
                v247 = *v237 == 0x637461702E726961 && v237[1] == 0x6F72746E6F635F68;
                v248 = v247 && v237[2] == 0x5F746E696F705F6CLL;
                if (v248 && *(_QWORD *)((char *)v237 + 21) == 0x7475706E695F746ELL)
                  goto LABEL_376;
              }
              v234 = "Attribute %d incompatible with MTLStepFunctionPerPatchControlPoint.";
              goto LABEL_967;
            default:
              abort();
          }
        }
        ++v233;
      }
      while (v233 != v663);
    }
    LODWORD(__p) = 0;
    std::vector<int>::vector(&v708, __n, (const std::vector<int>::value_type *)&__p);
    v705 = 0u;
    v706 = 0u;
    v707 = 1065353216;
    LOBYTE(__p) = 0;
    std::vector<unsigned char>::vector(v704, 0xAuLL, &__p);
    v703 = 0;
    v702 = 0;
    v699 = 0u;
    v700 = 0u;
    v701 = 1065353216;
    if (v660)
    {
      v252 = 0;
      do
      {
        if (*(_QWORD *)(v709[0] + 24 * v252 + 8) == *(_QWORD *)(v709[0] + 24 * v252))
        {
          v708.__begin_[v252] = -1;
        }
        else
        {
          v253 = &v627[16 * v252];
          v255 = *((_QWORD *)v253 + 1);
          v254 = (uint64_t *)(v253 + 8);
          if (v255 == -1)
          {
            if (v625)
              Int8Ty = (llvm::ArrayType *)llvm::Type::getInt8Ty(v664, v251);
            else
              Int8Ty = (llvm::ArrayType *)llvm::Type::getFloatTy(v664, v251);
            v257 = 1;
          }
          else if (v625)
          {
            Int8Ty = (llvm::ArrayType *)llvm::Type::getInt8Ty(v664, v251);
            v257 = *v254;
          }
          else
          {
            Int8Ty = (llvm::ArrayType *)llvm::Type::getFloatTy(v664, v251);
            v257 = (unint64_t)*v254 >> 2;
          }
          v258 = llvm::ArrayType::get(Int8Ty, (llvm::Type *)v257);
          v259 = operator new(8uLL);
          *v259 = v258;
          v260 = llvm::StructType::get();
          v261 = llvm::PointerType::get();
          v262 = (unint64_t)((_BYTE *)v731 - (_BYTE *)v730) >> 3;
          v708.__begin_[v252] = v262;
          LODWORD(__p) = v262;
          std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)&v705, (unsigned int *)&__p, &__p);
          v263 = (char *)v731;
          if ((unint64_t)v731 >= v732)
          {
            v265 = ((_BYTE *)v731 - (_BYTE *)v730) >> 3;
            if ((unint64_t)(v265 + 1) >> 61)
              goto LABEL_972;
            v266 = (uint64_t)(v732 - (_QWORD)v730) >> 2;
            if (v266 <= v265 + 1)
              v266 = v265 + 1;
            if (v732 - (unint64_t)v730 >= 0x7FFFFFFFFFFFFFF8)
              v267 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v267 = v266;
            if (v267)
              v268 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v732, v267);
            else
              v268 = 0;
            v269 = (uint64_t *)&v268[8 * v265];
            *v269 = v261;
            v264 = v269 + 1;
            v270 = (char *)v731;
            v271 = (char *)v730;
            if (v731 != v730)
            {
              do
              {
                v272 = *((_QWORD *)v270 - 1);
                v270 -= 8;
                *--v269 = v272;
              }
              while (v270 != v271);
              v270 = (char *)v730;
            }
            v730 = v269;
            v731 = v264;
            v732 = (unint64_t)&v268[8 * v267];
            if (v270)
              operator delete(v270);
          }
          else
          {
            *(_QWORD *)v731 = v261;
            v264 = v263 + 8;
          }
          v731 = v264;
          v273 = (char *)v728;
          if ((unint64_t)v728 >= v729)
          {
            v275 = ((_BYTE *)v728 - (_BYTE *)v727) >> 3;
            if ((unint64_t)(v275 + 1) >> 61)
LABEL_972:
              std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
            v276 = (uint64_t)(v729 - (_QWORD)v727) >> 2;
            if (v276 <= v275 + 1)
              v276 = v275 + 1;
            if (v729 - (unint64_t)v727 >= 0x7FFFFFFFFFFFFFF8)
              v277 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v277 = v276;
            if (v277)
              v278 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v729, v277);
            else
              v278 = 0;
            v279 = (uint64_t *)&v278[8 * v275];
            *v279 = v260;
            v274 = v279 + 1;
            v280 = (char *)v728;
            v281 = (char *)v727;
            if (v728 != v727)
            {
              do
              {
                v282 = *((_QWORD *)v280 - 1);
                v280 -= 8;
                *--v279 = v282;
              }
              while (v280 != v281);
              v280 = (char *)v727;
            }
            v727 = v279;
            v728 = v274;
            v729 = (unint64_t)&v278[8 * v277];
            if (v280)
              operator delete(v280);
          }
          else
          {
            *(_QWORD *)v728 = v260;
            v274 = v273 + 8;
          }
          v728 = v274;
          getRequiredBuiltIns((uint64_t)v704, &v702, *(_DWORD *)&v627[16 * v252] >> 5, *(_DWORD *)&v627[16 * v252 + 4], (BOOL *)&v703 + 1, &v703, a8);
          MTLFrameworkPass::appendBufferMetadata(v664, (uint64_t **)&v724);
          operator delete(v259);
        }
        ++v252;
      }
      while (v252 != __n);
    }
    *(_QWORD *)&v283 = -1;
    *((_QWORD *)&v283 + 1) = -1;
    v747 = v283;
    v748 = v283;
    v745 = v283;
    v746 = v283;
    v744 = v283;
    Int32Ty = (llvm::Type *)llvm::Type::getInt32Ty(v664, v251);
    Int64Ty = llvm::Type::getInt64Ty(v664, v284);
    MTLFrameworkPass::addRequiredBuiltInsToBuiltInList((char **)&v721, v720, (uint64_t *)v704);
    v287 = (char *)v721;
    v288 = (char *)v722;
    if (v721 != v722)
    {
      do
      {
        LLVMVectorType = MTLFrameworkPass::getLLVMVectorType(v664, (llvm::LLVMContext *)*((unsigned int *)v287 + 1), v287[1]);
        v290 = MTLFrameworkPass::addBuiltInParameter(v664, (unint64_t)MTLFrameworkPass::vertexFetchbuiltInAIRString[*v287], (char **)&v730, &v724, LLVMVectorType, *((_DWORD *)v287 + 1), v287[1]);
        v291 = (char *)v728;
        v292 = ((_BYTE *)v728 - (_BYTE *)v727) >> 3;
        if (v292 != ((_BYTE *)v731 - (_BYTE *)v730) >> 3)
        {
          if ((unint64_t)v728 >= v729)
          {
            if ((unint64_t)(v292 + 1) >> 61)
              std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
            v294 = (uint64_t)(v729 - (_QWORD)v727) >> 2;
            if (v294 <= v292 + 1)
              v294 = v292 + 1;
            if (v729 - (unint64_t)v727 >= 0x7FFFFFFFFFFFFFF8)
              v295 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v295 = v294;
            if (v295)
              v296 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v729, v295);
            else
              v296 = 0;
            v297 = (uint64_t *)&v296[8 * v292];
            *v297 = LLVMVectorType;
            v293 = v297 + 1;
            v298 = (char *)v728;
            v299 = (char *)v727;
            if (v728 != v727)
            {
              do
              {
                v300 = *((_QWORD *)v298 - 1);
                v298 -= 8;
                *--v297 = v300;
              }
              while (v298 != v299);
              v298 = (char *)v727;
            }
            v727 = v297;
            v728 = v293;
            v729 = (unint64_t)&v296[8 * v295];
            if (v298)
              operator delete(v298);
          }
          else
          {
            *(_QWORD *)v728 = LLVMVectorType;
            v293 = v291 + 8;
          }
          v728 = v293;
        }
        *((_QWORD *)&v744 + *v287) = v290;
        LODWORD(__p) = v290;
        v285 = (uint64_t)std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)&v705, (unsigned int *)&__p, &__p);
        v287 += 8;
      }
      while (v287 != v288);
    }
    if (HIBYTE(v703))
    {
      v301 = v660;
      v302 = Int32Ty;
      if (a8 == 2)
      {
        Int32PtrTy = llvm::Type::getInt32PtrTy(v664, (llvm::LLVMContext *)1);
        v306 = 33;
        v307 = 4;
        Int16Ty = (uint64_t)Int32Ty;
      }
      else
      {
        if (a8 != 1)
          abort();
        Int32PtrTy = llvm::Type::getInt16PtrTy(v664, (llvm::LLVMContext *)1);
        Int16Ty = llvm::Type::getInt16Ty(v664, v304);
        v306 = 41;
        v307 = 2;
      }
      v308 = MTLFrameworkPass::addBuiltInParameter(v664, (unint64_t)"air.control_point_index_buffer", (char **)&v730, &v724, Int32PtrTy, v306, 1);
      v309 = (char *)v728;
      v310 = ((_BYTE *)v728 - (_BYTE *)v727) >> 3;
      if (v310 != ((_BYTE *)v731 - (_BYTE *)v730) >> 3)
      {
        if ((unint64_t)v728 >= v729)
        {
          if ((unint64_t)(v310 + 1) >> 61)
            std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
          v312 = (uint64_t)(v729 - (_QWORD)v727) >> 2;
          if (v312 <= v310 + 1)
            v312 = v310 + 1;
          if (v729 - (unint64_t)v727 >= 0x7FFFFFFFFFFFFFF8)
            v313 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v313 = v312;
          if (v313)
            v314 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v729, v313);
          else
            v314 = 0;
          v315 = (uint64_t *)&v314[8 * v310];
          v316 = &v314[8 * v313];
          *v315 = Int16Ty;
          v311 = v315 + 1;
          v317 = (char *)v728;
          v318 = (char *)v727;
          if (v728 != v727)
          {
            do
            {
              v319 = *((_QWORD *)v317 - 1);
              v317 -= 8;
              *--v315 = v319;
            }
            while (v317 != v318);
            v317 = (char *)v727;
          }
          v727 = v315;
          v728 = v311;
          v729 = (unint64_t)v316;
          if (v317)
            operator delete(v317);
        }
        else
        {
          *(_QWORD *)v728 = Int16Ty;
          v311 = v309 + 8;
        }
        v728 = v311;
      }
      LODWORD(__p) = v308;
      v285 = (uint64_t)std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)&v705, (unsigned int *)&__p, &__p);
    }
    else
    {
      v307 = 0;
      v308 = -1;
      v301 = v660;
      v302 = Int32Ty;
    }
    v611 = v307;
    if (!v702)
    {
      v642 = 0;
      goto LABEL_547;
    }
    __p = 0uLL;
    *(_QWORD *)&v757 = 0;
    std::vector<llvm::Metadata *>::reserve((void **)&__p, 1uLL);
    v321 = (uint64_t)v302;
    if ((a4[1] & 1) == 0)
      v321 = llvm::Type::getInt16Ty(v664, v320);
    v322 = llvm::PointerType::get();
    v642 = ((_BYTE *)v731 - (_BYTE *)v730) >> 3;
    LODWORD(v711) = v642;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)&v705, (unsigned int *)&v711, &v711);
    v323 = (char *)v731;
    if ((unint64_t)v731 >= v732)
    {
      v325 = ((_BYTE *)v731 - (_BYTE *)v730) >> 3;
      if ((unint64_t)(v325 + 1) >> 61)
        goto LABEL_987;
      v326 = (uint64_t)(v732 - (_QWORD)v730) >> 2;
      if (v326 <= v325 + 1)
        v326 = v325 + 1;
      if (v732 - (unint64_t)v730 >= 0x7FFFFFFFFFFFFFF8)
        v327 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v327 = v326;
      if (v327)
        v328 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v732, v327);
      else
        v328 = 0;
      v329 = (uint64_t *)&v328[8 * v325];
      v330 = &v328[8 * v327];
      *v329 = v322;
      v324 = v329 + 1;
      v331 = (char *)v731;
      v332 = (char *)v730;
      if (v731 != v730)
      {
        do
        {
          v333 = *((_QWORD *)v331 - 1);
          v331 -= 8;
          *--v329 = v333;
        }
        while (v331 != v332);
        v331 = (char *)v730;
      }
      v730 = v329;
      v731 = v324;
      v732 = (unint64_t)v330;
      if (v331)
        operator delete(v331);
    }
    else
    {
      *(_QWORD *)v731 = v322;
      v324 = v323 + 8;
    }
    v731 = v324;
    v334 = (char *)v728;
    if ((unint64_t)v728 < v729)
    {
      *(_QWORD *)v728 = v321;
      v335 = v334 + 8;
LABEL_545:
      v728 = v335;
      MTLFrameworkPass::appendBufferMetadata(v664, (uint64_t **)&v724);
      v285 = __p;
      if ((_QWORD)__p)
      {
        *((_QWORD *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
LABEL_547:
      if (v301)
      {
        v345 = 0;
        do
        {
          v346 = &v627[16 * v345];
          if (*((_QWORD *)v346 + 1) == -1)
          {
            v347 = v731;
            v348 = v730;
            *(_QWORD *)&__p = *(_DWORD *)v346 & 0x1F;
            *(_QWORD *)&v711 = &__p;
            std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)&v699, (unint64_t *)&__p, (uint64_t)&std::piecewise_construct, (_QWORD **)&v711)[3] = (v347 - v348) >> 3;
            v350 = llvm::Type::getInt64Ty(v664, v349);
            v352 = v350;
            v353 = (char *)v731;
            if ((unint64_t)v731 >= v732)
            {
              v355 = ((_BYTE *)v731 - (_BYTE *)v730) >> 3;
              if ((unint64_t)(v355 + 1) >> 61)
                std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
              v356 = (uint64_t)(v732 - (_QWORD)v730) >> 2;
              if (v356 <= v355 + 1)
                v356 = v355 + 1;
              if (v732 - (unint64_t)v730 >= 0x7FFFFFFFFFFFFFF8)
                v351 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v351 = v356;
              if (v351)
                v357 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v732, v351);
              else
                v357 = 0;
              v358 = (uint64_t *)&v357[8 * v355];
              *v358 = v352;
              v354 = v358 + 1;
              v359 = (char *)v731;
              v360 = (char *)v730;
              if (v731 != v730)
              {
                do
                {
                  v361 = *((_QWORD *)v359 - 1);
                  v359 -= 8;
                  *--v358 = v361;
                }
                while (v359 != v360);
                v359 = (char *)v730;
              }
              v730 = v358;
              v731 = v354;
              v732 = (unint64_t)&v357[8 * v351];
              if (v359)
                operator delete(v359);
            }
            else
            {
              *(_QWORD *)v731 = v350;
              v354 = v353 + 8;
            }
            v731 = v354;
            v362 = llvm::Type::getInt64Ty(v664, (llvm::LLVMContext *)v351);
            v364 = v362;
            v365 = (char *)v728;
            if ((unint64_t)v728 >= v729)
            {
              v367 = ((_BYTE *)v728 - (_BYTE *)v727) >> 3;
              if ((unint64_t)(v367 + 1) >> 61)
                std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
              v368 = (uint64_t)(v729 - (_QWORD)v727) >> 2;
              if (v368 <= v367 + 1)
                v368 = v367 + 1;
              if (v729 - (unint64_t)v727 >= 0x7FFFFFFFFFFFFFF8)
                v363 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v363 = v368;
              if (v363)
                v369 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v729, v363);
              else
                v369 = 0;
              v370 = (uint64_t *)&v369[8 * v367];
              *v370 = v364;
              v366 = v370 + 1;
              v371 = (char *)v728;
              v372 = (char *)v727;
              if (v728 != v727)
              {
                do
                {
                  v373 = *((_QWORD *)v371 - 1);
                  v371 -= 8;
                  *--v370 = v373;
                }
                while (v371 != v372);
                v371 = (char *)v727;
              }
              v727 = v370;
              v728 = v366;
              v729 = (unint64_t)&v369[8 * v363];
              if (v371)
                operator delete(v371);
            }
            else
            {
              *(_QWORD *)v728 = v362;
              v366 = v365 + 8;
            }
            v728 = v366;
            v760 = 0;
            v759 = 0u;
            v758 = 0u;
            v757 = 0u;
            __p = 0u;
            llvm::Type::getInt32Ty(v664, (llvm::LLVMContext *)v363);
            llvm::ConstantInt::get();
            *(_QWORD *)&__p = llvm::ValueAsMetadata::get();
            *((_QWORD *)&__p + 1) = llvm::MDString::get();
            *(_QWORD *)&v757 = llvm::MDString::get();
            llvm::Type::getInt32Ty(v664, v374);
            llvm::ConstantInt::get();
            *((_QWORD *)&v757 + 1) = llvm::ValueAsMetadata::get();
            llvm::Type::getInt32Ty(v664, v375);
            llvm::ConstantInt::get();
            *(_QWORD *)&v758 = llvm::ValueAsMetadata::get();
            *((_QWORD *)&v758 + 1) = llvm::MDString::get();
            *(_QWORD *)&v759 = llvm::MDString::get();
            *((_QWORD *)&v759 + 1) = llvm::MDString::get();
            std::string::basic_string[abi:ne180100]<0>(&v754, "stride");
            std::to_string(&v698, *(_DWORD *)v346 & 0x1F);
            if ((v698.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v376 = &v698;
            else
              v376 = (std::string *)v698.__r_.__value_.__r.__words[0];
            if ((v698.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v698.__r_.__value_.__r.__words[2]);
            else
              size = v698.__r_.__value_.__l.__size_;
            v378 = std::string::append(&v754, (const std::string::value_type *)v376, size);
            v379 = *(_OWORD *)&v378->__r_.__value_.__l.__data_;
            v712 = v378->__r_.__value_.__r.__words[2];
            v711 = v379;
            v378->__r_.__value_.__l.__size_ = 0;
            v378->__r_.__value_.__r.__words[2] = 0;
            v378->__r_.__value_.__r.__words[0] = 0;
            v760 = (llvm::ReturnInst *)llvm::MDString::get();
            if (SHIBYTE(v712) < 0)
              operator delete((void *)v711);
            if (SHIBYTE(v698.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v698.__r_.__value_.__l.__data_);
            if (SHIBYTE(v754.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v754.__r_.__value_.__l.__data_);
            v285 = llvm::MDTuple::getImpl();
            v380 = v285;
            v381 = (char *)v725;
            if ((unint64_t)v725 >= v726)
            {
              v383 = ((_BYTE *)v725 - (_BYTE *)v724) >> 3;
              if ((unint64_t)(v383 + 1) >> 61)
                std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
              v384 = (uint64_t)(v726 - (_QWORD)v724) >> 2;
              if (v384 <= v383 + 1)
                v384 = v383 + 1;
              if (v726 - (unint64_t)v724 >= 0x7FFFFFFFFFFFFFF8)
                v286 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v286 = v384;
              if (v286)
                v285 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v726, v286);
              else
                v285 = 0;
              v385 = (uint64_t *)(v285 + 8 * v383);
              *v385 = v380;
              v382 = v385 + 1;
              v386 = (char *)v725;
              v387 = (char *)v724;
              if (v725 != v724)
              {
                do
                {
                  v388 = *((_QWORD *)v386 - 1);
                  v386 -= 8;
                  *--v385 = v388;
                }
                while (v386 != v387);
                v386 = (char *)v724;
              }
              v724 = v385;
              v725 = v382;
              v726 = v285 + 8 * v286;
              if (v386)
                operator delete(v386);
            }
            else
            {
              *(_QWORD *)v725 = v285;
              v382 = v381 + 8;
            }
            v725 = v382;
          }
          ++v345;
        }
        while (v345 != __n);
      }
      v389 = (_BYTE *)v731 - (_BYTE *)v730;
      v646 = ((_BYTE *)v731 - (_BYTE *)v730) >> 3;
      if ((v647 & 1) != 0)
      {
        v285 = llvm::StructType::get();
        v633 = (llvm::Type *)v285;
      }
      else
      {
        v633 = 0;
      }
      v390 = v638;
      v599 = **(_QWORD **)(*((_QWORD *)v621 + 3) + 16);
      v697 = 0;
      memset(&v698, 0, sizeof(v698));
      if (a6)
      {
        v391 = v660;
        VoidTy = llvm::Type::getVoidTy(v664, (llvm::LLVMContext *)v286);
        v697 = llvm::MDTuple::getImpl();
      }
      else
      {
        v391 = v660;
        if (a5)
        {
          v393 = *(_QWORD *)(v613 - 8 * *(unsigned int *)(v613 + 8) + 8);
          __p = 0uLL;
          *(_QWORD *)&v757 = 0;
          VoidTy = MTLAddVertexFetchingToModulePass::expandVertexOutputWithFragmentInput(v285, v664, v599, v393, &v697, &__p, a5, (uint64_t)&v698, a7);
        }
        else if (v605)
        {
          VoidTy = v591;
        }
        else
        {
          VoidTy = v599;
        }
      }
      v394 = llvm::FunctionType::get();
      *(_QWORD *)&__p = "air.vertexFetchFunction";
      LOWORD(v758) = 259;
      v395 = (llvm::Value *)llvm::Function::Create(v394, 0, (uint64_t)&__p, (uint64_t)v650);
      *(_QWORD *)&__p = &v757;
      *((_QWORD *)&__p + 1) = 0x200000000;
      v760 = v664;
      v761 = &v769;
      v762 = v770;
      v763 = 0;
      v764 = 0;
      v765 = 512;
      v766 = 7;
      v759 = 0uLL;
      v768 = 0;
      v767 = 0;
      v769 = MEMORY[0x24BED83B8] + 16;
      v770[0] = MEMORY[0x24BED83F0] + 16;
      v618 = v395;
      createDebugInfoForWrapperFunction((uint64_t)v664, (llvm::IRBuilderBase *)&__p, v395, v621);
      v615 = (llvm::Constant *)VoidTy;
      v397 = v618;
      if (!v602)
      {
        v398 = v721;
        v399 = v722;
        if (v721 != v722)
        {
          while (1)
          {
            v400 = v398[1];
            if (v400 > 0x29)
              break;
            if (((1 << v400) & 0x10008) == 0)
            {
              if (((1 << v400) & 0x2020000000) == 0 && ((1 << v400) & 0x20200000000) == 0)
                break;
              llvm::Function::addParamAttr();
              v397 = v618;
            }
            v398 += 2;
            if (v398 == v399)
              goto LABEL_630;
          }
          abort();
        }
LABEL_630:
        for (i = (_QWORD *)v700; i; v397 = v618)
        {
          llvm::Function::addParamAttr();
          i = (_QWORD *)*i;
        }
      }
      *(_QWORD *)&v711 = "Body";
      LOWORD(v713) = 259;
      v637 = llvm::BasicBlock::Create(v664, (llvm::LLVMContext *)&v711, v397, 0, v396);
      std::vector<llvm::Value *>::vector(v696, (int)(v389 >> 3));
      v402 = v618;
      if ((*((_WORD *)v618 + 9) & 1) != 0)
      {
        llvm::Function::BuildLazyArguments(v618);
        v402 = v618;
      }
      v403 = 0;
      for (j = *((_QWORD *)v402 + 11); ; j += 40)
      {
        if ((*((_WORD *)v402 + 9) & 1) != 0)
        {
          llvm::Function::BuildLazyArguments(v402);
          v402 = v618;
        }
        if (j == *((_QWORD *)v402 + 11) + 40 * *((_QWORD *)v402 + 12))
          break;
        *(_QWORD *)((char *)v696[0] + v403) = j;
        v403 += 8;
      }
      v636 = v637 + 40;
      llvm::IRBuilderBase::SetInsertPoint((uint64_t)&__p, v637, v637 + 40);
      v658 = v696[0];
      std::vector<llvm::Value *>::vector(v695, (int)(v389 >> 3));
      v405 = v615;
      std::vector<llvm::Value *>::vector(v694, *((_QWORD *)v621 + 12));
      if (v601)
      {
        v407 = (unsigned int *)v733;
        if (v734 != v733)
        {
          v408 = 0;
          do
          {
            *((_QWORD *)v694[0] + v407[v408]) = *((_QWORD *)v696[0] + v407[v408]);
            ++v408;
            v407 = (unsigned int *)v733;
          }
          while (v408 < (v734 - (_BYTE *)v733) >> 2);
        }
      }
      llvm::Type::getInt16Ty(v664, v406);
      if ((v647 & 1) == 0)
      {
        Add = 0;
        InsertValue = 0;
        v639 = 0;
        Alloca = 0;
        goto LABEL_679;
      }
      llvm::GlobalObject::setSection();
      *(_QWORD *)&v711 = "controlPointFunctionBody";
      LOWORD(v713) = 259;
      v639 = llvm::BasicBlock::Create(v664, (llvm::LLVMContext *)&v711, v638, 0, v409);
      InsertValue = (llvm::LLVMContext *)llvm::UndefValue::get();
      if ((*((_WORD *)v390 + 9) & 1) != 0)
      {
        llvm::Function::BuildLazyArguments(v390);
        v410 = (llvm::Value *)*((_QWORD *)v390 + 11);
        if ((*((_WORD *)v390 + 9) & 1) != 0)
        {
          llvm::Function::BuildLazyArguments(v390);
          v411 = (llvm::Value *)*((_QWORD *)v390 + 11);
          goto LABEL_650;
        }
      }
      else
      {
        v410 = (llvm::Value *)*((_QWORD *)v390 + 11);
      }
      v411 = v410;
LABEL_650:
      v412 = *((_QWORD *)v390 + 12);
      llvm::IRBuilderBase::SetInsertPoint((uint64_t)&__p, v639, v639 + 40);
      v413 = (uint64_t)v411 + 40 * v412 - 40;
      v414 = v695[0];
      v415 = llvm::PointerType::get();
      LOWORD(v713) = 257;
      Cast = llvm::IRBuilderBase::CreateCast((uint64_t)&__p, 49, v413, v415, (uint64_t)&v711);
      v417 = ((unint64_t)v389 >> 3);
      if ((int)v646 >= 1)
      {
        v418 = (uint64_t *)Cast;
        v419 = 0;
        do
        {
          LODWORD(v711) = v419;
          if (std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::find<unsigned int>(&v705, (unsigned int *)&v711))
          {
            *(_OWORD *)&v754.__r_.__value_.__l.__data_ = 0uLL;
            v754.__r_.__value_.__r.__words[0] = llvm::ConstantInt::get();
            v754.__r_.__value_.__l.__size_ = llvm::ConstantInt::get();
            LOWORD(v713) = 257;
            GEP = llvm::IRBuilderBase::CreateGEP((uint64_t)&__p, (uint64_t)v633, v418, (uint64_t **)&v754, 2, (uint64_t)&v711);
            v421 = *(llvm::Type **)(GEP + 72);
            LOWORD(v713) = 257;
            AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)&__p, v421, GEP, 0, 0, (uint64_t)&v711);
            *((_QWORD *)v695[0] + v419) = AlignedLoad;
          }
          else
          {
            *((_QWORD *)v695[0] + v419) = 0;
          }
          ++v419;
        }
        while (v417 != v419);
      }
      v61 = v656;
      if (v602)
      {
        v423 = *((_QWORD *)&v746 + 1);
        if (*((_QWORD *)&v746 + 1) != -1)
        {
          v424 = (llvm::Value *)v414[*((_QWORD *)&v746 + 1)];
          InsertElement = (uint64_t)v410;
          if ((*(_DWORD *)(*(_QWORD *)v424 + 8) & 0xFE) == 0x12)
          {
            LOWORD(v713) = 257;
            InsertElement = llvm::IRBuilderBase::CreateInsertElement((llvm::Type **)&__p, v424, v410, 0, (const llvm::Twine *)&v711);
          }
          v414[v423] = InsertElement;
        }
      }
      if ((_BYTE)v703)
      {
        v426 = *(_QWORD *)(v613 - 8 * *(unsigned int *)(v613 + 8) + 24);
        v427 = *(unsigned int *)(v426 + 8);
        if (v427 < 4)
          goto LABEL_666;
        v428 = *(_QWORD *)(*(_QWORD *)(v426 - 8 * v427 + 24) + 128);
        v429 = (_QWORD *)(v428 + 24);
        if (*(_DWORD *)(v428 + 32) >= 0x41u)
          v429 = (_QWORD *)*v429;
        if (*(_DWORD *)v429 == 63)
        {
LABEL_666:
          v430 = (llvm::Type **)callTypedFunction((uint64_t)v650, (uint64_t)&__p);
          LOWORD(v713) = 257;
          ZExtOrTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateZExtOrTrunc((llvm::IRBuilderBase *)&__p, v430, Int32Ty, (const llvm::Twine *)&v711);
        }
        else
        {
          ZExtOrTrunc = (llvm::Value *)llvm::ConstantInt::get();
        }
        v432 = (llvm::Value *)v414[*((_QWORD *)&v745 + 1)];
        LOWORD(v713) = 257;
        Mul = llvm::IRBuilderBase::CreateMul((llvm::IRBuilderBase *)&__p, v432, ZExtOrTrunc, (const llvm::Twine *)&v711, 0, 0);
        v755 = 257;
        Add = llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)&__p, Mul, v410, (const llvm::Twine *)&v754, 0, 0);
        if (HIBYTE(v703))
        {
          v434 = (llvm::Value *)v414[v308];
          LOWORD(v713) = 257;
          v435 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)&__p, 39, (uint64_t)Add, Int64Ty, (uint64_t)&v711);
          v436 = (llvm::Type *)*((_QWORD *)v727 + v308);
          LOWORD(v713) = 257;
          v437 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)&__p, v436, v434, v435, (const llvm::Twine *)&v711);
          v438 = *(llvm::Type **)(v437 + 72);
          v439 = __clz(__rbit64(v611)) | 0x100;
          if (v611)
            v440 = v439;
          else
            v440 = 0;
          LOWORD(v713) = 257;
          v441 = (llvm::Type **)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)&__p, v438, v437, v440, 0, (uint64_t)&v711);
          LOWORD(v713) = 257;
          Add = llvm::IRBuilderBase::CreateZExtOrTrunc((llvm::IRBuilderBase *)&__p, v441, Int32Ty, (const llvm::Twine *)&v711);
        }
      }
      else
      {
        Add = 0;
      }
      llvm::IRBuilderBase::SetInsertPoint((uint64_t)&__p, v637, v636);
      v658 = v696[0];
      LOWORD(v713) = 257;
      Alloca = (uint64_t *)llvm::IRBuilderBase::CreateAlloca((llvm::BasicBlock **)&__p, v633, 0, (const llvm::Twine *)&v711);
      v405 = v615;
      if ((int)v646 >= 1)
      {
        v442 = 0;
        do
        {
          LODWORD(v711) = v442;
          if (std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::find<unsigned int>(&v705, (unsigned int *)&v711))
          {
            *(_OWORD *)&v754.__r_.__value_.__l.__data_ = 0uLL;
            v754.__r_.__value_.__r.__words[0] = llvm::ConstantInt::get();
            v754.__r_.__value_.__l.__size_ = llvm::ConstantInt::get();
            v443 = Alloca[8];
            LOWORD(v713) = 257;
            v444 = llvm::IRBuilderBase::CreateGEP((uint64_t)&__p, v443, Alloca, (uint64_t **)&v754, 2, (uint64_t)&v711);
            llvm::IRBuilderBase::CreateAlignedStore((uint64_t)&__p, *((llvm::Type ***)v696[0] + v442), v444, 0);
          }
          ++v442;
        }
        while (v417 != v442);
      }
LABEL_679:
      *(_QWORD *)&v711 = 0;
      std::vector<unsigned long>::vector(&v754, v663, &v711);
      *(_QWORD *)&v711 = 0;
      std::vector<unsigned long>::vector(v693, v663, &v711);
      if (v619)
      {
        v445 = 0;
        do
        {
          if (*((_BYTE *)v742[0] + v445))
          {
            getTypeFromVertexAttribFormat(v664, (llvm::LLVMContext *)(v651[2 * v445] >> 10), (_QWORD *)(v754.__r_.__value_.__r.__words[0] + 8 * v445), (_QWORD *)v693[0] + v445, v625 != 0);
          }
          else
          {
            *((_QWORD *)v693[0] + v445) = 0;
            *(_QWORD *)(v754.__r_.__value_.__r.__words[0] + 8 * v445) = 0;
          }
          ++v445;
        }
        while (v445 != v663);
      }
      LOBYTE(v711) = 0;
      std::vector<unsigned char>::vector(v692, v663, &v711);
      v690 = 0;
      v689 = 0;
      v691 = 0;
      if (!v625 && v391)
      {
        v661 = 0;
        do
        {
          v687 = 0;
          __s = 0;
          v688 = 0;
          if (v619)
          {
            v446 = 0;
            v447 = v651 + 3;
            v448 = 1;
            do
            {
              v449 = (unsigned int *)&v651[2 * v446];
              v450 = v710.__begin_[((unint64_t)*v449 >> 5) & 0x1F];
              if (v661 == v450 && *((_BYTE *)v742[0] + v446) && *((_QWORD *)v693[0] + v446) <= 3uLL)
              {
                v451 = &v651[2 * v446];
                v454 = v451[1];
                v453 = (unsigned int *)(v451 + 1);
                v452 = v454;
                if ((v454 & 3) != 0)
                {
                  v455 = v452 & 0xFFFFFFFC;
                  *((_BYTE *)v692[0] + v446) = 1;
                  v452 = *v453;
                }
                else
                {
                  v455 = v452;
                }
                v456 = v452 + *(_QWORD *)(v754.__r_.__value_.__r.__words[0] + 8 * v446);
                v457 = 4 - (v456 & 3);
                if ((v456 & 3) == 0)
                  v457 = 0;
                v458 = v457 + v456;
                if (v446 + 1 < v663)
                {
                  v459 = v447;
                  v460 = v448;
                  do
                  {
                    if (!*((_BYTE *)v692[0] + v460))
                    {
                      v461 = *((_BYTE *)v742[0] + v460)
                          && (_DWORD)v450 == v710.__begin_[((unint64_t)*(v459 - 1) >> 5) & 0x1F];
                      if (v461 && *((_QWORD *)v693[0] + v460) <= 3uLL)
                      {
                        v463 = *v459 + *(_QWORD *)(v754.__r_.__value_.__r.__words[0] + 8 * v460);
                        v464 = 4 - (v463 & 3);
                        v465 = *v459 & 0xFFFFFFFC;
                        if ((v463 & 3) == 0)
                          v464 = 0;
                        v466 = v464 + v463;
                        if (v466 >= v458)
                          v467 = v458;
                        else
                          v467 = v466;
                        if (v455 <= v465)
                          v468 = *v459 & 0xFFFFFFFC;
                        else
                          v468 = v455;
                        if (v467 > v468)
                        {
                          *((_BYTE *)v692[0] + v460) = 1;
                          *((_BYTE *)v692[0] + v446) = 1;
                          if (v465 < v455)
                            v455 = v465;
                          if (v458 <= v466)
                            v458 = v466;
                        }
                      }
                    }
                    ++v460;
                    v459 += 2;
                  }
                  while (v663 != v460);
                }
                while (*((_BYTE *)v692[0] + v446) && v455 < v458)
                {
                  v469 = v687;
                  v470 = wmemchr(__s, v455, v687 - __s);
                  if (v470)
                    v471 = v470;
                  else
                    v471 = v469;
                  if (v471 == v687)
                  {
                    v472 = v647 & (v649 == v740.__begin_[v446]);
                    if (v472 == 1)
                    {
                      llvm::IRBuilderBase::SetInsertPoint((uint64_t)&__p, v639, v639 + 40);
                      v658 = v695[0];
                    }
                    v473 = *((_QWORD *)v727 + v642);
                    memset(v685, 0, sizeof(v685));
                    v678[0] = v664;
                    v678[1] = v650;
                    v678[2] = &__p;
                    v678[3] = &v651[2 * v446];
                    v678[4] = v455;
                    v678[5] = &v627[16 * v661];
                    v678[6] = &v744;
                    v678[7] = v658;
                    v679 = v646;
                    v680 = Add;
                    v681 = v642;
                    v682 = v473;
                    *(_QWORD *)&v711 = ((unint64_t)*v449 >> 5) & 0x1F;
                    v474 = std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::find<unsigned long>(&v699, (unint64_t *)&v711);
                    if (v474)
                      v476 = v474[3];
                    else
                      v476 = -1;
                    v683 = v476;
                    v684 = v625 >> 17;
                    fetchAttributeGEPIndexList((uint64_t)v678, v475, v685);
                    v477 = v708.__begin_[v661];
                    v478 = *((_QWORD *)v727 + v477);
                    v479 = (uint64_t *)v658[v477];
                    LOWORD(v713) = 257;
                    v480 = llvm::IRBuilderBase::CreateGEP((uint64_t)&__p, v478, v479, (uint64_t **)v685, 3, (uint64_t)&v711);
                    v481 = llvm::PointerType::get();
                    LOWORD(v713) = 257;
                    v482 = llvm::IRBuilderBase::CreateCast((uint64_t)&__p, 49, v480, v481, (uint64_t)&v711);
                    LOWORD(v713) = 257;
                    v483 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)&__p, Int32Ty, v482, 258, 0, (uint64_t)&v711);
                    v484 = v483;
                    v485 = v690;
                    if ((unint64_t)v690 >= v691)
                    {
                      v487 = ((_BYTE *)v690 - (_BYTE *)v689) >> 4;
                      v488 = v487 + 1;
                      if ((unint64_t)(v487 + 1) >> 60)
                        std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
                      v489 = v691 - (_QWORD)v689;
                      if ((uint64_t)(v691 - (_QWORD)v689) >> 3 > v488)
                        v488 = v489 >> 3;
                      if ((unint64_t)v489 >= 0x7FFFFFFFFFFFFFF0)
                        v490 = 0xFFFFFFFFFFFFFFFLL;
                      else
                        v490 = v488;
                      if (v490)
                        v491 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SmallVertexPartialLoad>>((uint64_t)&v691, v490);
                      else
                        v491 = 0;
                      v492 = &v491[16 * v487];
                      *(_DWORD *)v492 = v661;
                      *((_DWORD *)v492 + 1) = v455;
                      *((_QWORD *)v492 + 1) = v484;
                      v493 = (char *)v690;
                      v494 = (char *)v689;
                      v495 = v492;
                      if (v690 != v689)
                      {
                        do
                        {
                          *((_OWORD *)v495 - 1) = *((_OWORD *)v493 - 1);
                          v495 -= 16;
                          v493 -= 16;
                        }
                        while (v493 != v494);
                        v493 = (char *)v689;
                      }
                      v486 = v492 + 16;
                      v689 = v495;
                      v690 = v492 + 16;
                      v691 = (unint64_t)&v491[16 * v490];
                      if (v493)
                        operator delete(v493);
                    }
                    else
                    {
                      *(_DWORD *)v690 = v661;
                      v485[1] = v455;
                      v486 = v485 + 4;
                      *((_QWORD *)v485 + 1) = v483;
                    }
                    v690 = v486;
                    v496 = v687;
                    if (v687 >= v688)
                    {
                      v498 = __s;
                      v499 = v687 - __s;
                      v500 = v499 + 1;
                      if ((unint64_t)(v499 + 1) >> 62)
                        std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
                      v501 = (char *)v688 - (char *)__s;
                      if (((char *)v688 - (char *)__s) >> 1 > v500)
                        v500 = v501 >> 1;
                      if ((unint64_t)v501 >= 0x7FFFFFFFFFFFFFFCLL)
                        v502 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v502 = v500;
                      if (v502)
                      {
                        v503 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v688, v502);
                        v496 = v687;
                        v498 = __s;
                      }
                      else
                      {
                        v503 = 0;
                      }
                      v504 = (__int32 *)&v503[4 * v499];
                      *v504 = v455;
                      v497 = v504 + 1;
                      while (v496 != v498)
                      {
                        v505 = *--v496;
                        *--v504 = v505;
                      }
                      __s = v504;
                      v687 = v497;
                      v688 = (__int32 *)&v503[4 * v502];
                      if (v498)
                        operator delete(v498);
                    }
                    else
                    {
                      *v687 = v455;
                      v497 = v496 + 1;
                    }
                    v687 = v497;
                    if (v472)
                    {
                      llvm::IRBuilderBase::SetInsertPoint((uint64_t)&__p, v637, v636);
                      v658 = v696[0];
                    }
                  }
                  v455 += 4;
                }
              }
              ++v446;
              ++v448;
              v447 += 2;
            }
            while (v446 != v663);
            if (__s)
            {
              v687 = __s;
              operator delete(__s);
            }
            v61 = v656;
            v405 = v615;
          }
          ++v661;
        }
        while (v661 != __n);
      }
      if (v619)
      {
        for (k = 0; k != v663; ++k)
        {
          if (*((_BYTE *)v742[0] + k))
          {
            v508 = v740.__begin_[k];
            if ((v647 & (v649 == (_DWORD)v508)) == 1)
            {
              v509 = v737.__begin_[k];
              llvm::IRBuilderBase::SetInsertPoint((uint64_t)&__p, v639, v639 + 40);
              v658 = v695[0];
            }
            else
            {
              v509 = 0;
            }
            v510 = &v651[2 * k];
            v685[0] = 0;
            v677 = 0;
            TypeFromVertexAttribFormat = getTypeFromVertexAttribFormat(v664, (llvm::LLVMContext *)(*v510 >> 10), v685, &v677, v625 != 0);
            v513 = v710.__begin_[((unint64_t)*v510 >> 5) & 0x1F];
            if (!*(_BYTE *)(a1 + 8))
            {
              v514 = v651[2 * k + 1];
              v515 = *(llvm::Value **)&v627[16 * v513 + 8];
              if ((llvm::Value *)((char *)v685[0] + v514) > v515)
                MTLCompilerErrorObject::setFormattedErrorMessage(*(char ***)a1, "Attribute at index %d: the attribute offset (%lu) + attribute size (%lu) must be <= the stride of the buffer (%lu) at buffer index %lu.", k, v514, v685[0], v515, v590);
            }
            __na = &v651[2 * k];
            v608 = v509;
            v612 = v508;
            v620 = k;
            v610 = v647 & (v649 == (_DWORD)v508);
            if (*((_BYTE *)v692[0] + k))
            {
              v516 = v677;
              if (v677 == 1)
                v628 = (llvm::Type *)llvm::Type::getInt8Ty(v664, v511);
              else
                v628 = (llvm::Type *)llvm::Type::getInt16Ty(v664, v511);
              v654 = (int)v685[0];
              if (v685[0] > (llvm::Value *)4)
                llvm::Type::getInt64Ty(v664, v517);
              else
                llvm::Type::getInt32Ty(v664, v517);
              v523 = llvm::ConstantInt::get();
              LOWORD(v713) = 257;
              v524 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)&__p, 49, v523, (uint64_t)TypeFromVertexAttribFormat, (uint64_t)&v711);
              v525 = 0;
              v526 = v690;
              v527 = v689;
              if (v690 != v689 && v654)
              {
                v631 = v513;
                v662 = 0;
                v528 = (unsigned int *)&v651[2 * k + 1];
                do
                {
                  v529 = &v527[16 * v662];
                  v530 = *((unsigned int *)v529 + 1);
                  v531 = *v528;
                  if (v531 <= v530)
                    v532 = v530;
                  else
                    v532 = v531;
                  v533 = (char *)v685[0] + v531;
                  if ((unint64_t)v533 >= v530 + 4)
                    v534 = v530 + 4;
                  else
                    v534 = v533;
                  v634 = v534 - v532;
                  if (*(_DWORD *)v529 == v631 && (int)(v534 - v532) >= 1)
                  {
                    v536 = *((_QWORD *)v529 + 1);
                    v537 = vectorTypeGet(v628);
                    LOWORD(v713) = 257;
                    v538 = llvm::IRBuilderBase::CreateCast((uint64_t)&__p, 49, v536, v537, (uint64_t)&v711);
                    v540 = v534;
                    if (v534 > (unint64_t)v532)
                    {
                      v541 = (llvm::Value *)v538;
                      v542 = (v532 - v530) / v516;
                      do
                      {
                        llvm::Type::getInt32Ty(v664, v539);
                        v543 = (llvm::Value *)llvm::ConstantInt::get();
                        LOWORD(v713) = 257;
                        Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)&__p, v541, v543, (const llvm::Twine *)&v711, v544);
                        if (*((_BYTE *)TypeFromVertexAttribFormat + 8) == 18)
                          v547 = TypeFromVertexAttribFormat;
                        else
                          v547 = 0;
                        if (!*((_BYTE *)TypeFromVertexAttribFormat + 8)
                          || v547 && !*(_BYTE *)(*((_QWORD *)v547 + 3) + 8))
                        {
                          HalfTy = llvm::Type::getHalfTy(v664, v545);
                          LOWORD(v713) = 257;
                          Element = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)&__p, 49, (uint64_t)Element, HalfTy, (uint64_t)&v711);
                        }
                        llvm::Type::getInt32Ty(v664, v545);
                        v549 = (llvm::Value *)llvm::ConstantInt::get();
                        LOWORD(v713) = 257;
                        v524 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)&__p, v524, Element, v549, (const llvm::Twine *)&v711, v550);
                        v516 = v677;
                        v532 += v677;
                        LODWORD(v542) = v542 + 1;
                        v61 = v656;
                      }
                      while (v532 < v540);
                    }
                    v654 -= v634;
                    v526 = v690;
                    v527 = v689;
                  }
                  v525 = 0;
                  ++v662;
                }
                while (v662 < (v526 - v527) >> 4 && v654);
              }
            }
            else
            {
              v518 = *((_QWORD *)v727 + v642);
              v688 = 0;
              v687 = 0;
              __s = 0;
              v665[0] = v664;
              v665[1] = v650;
              v665[2] = &__p;
              v666 = &v651[2 * k];
              v519 = (unsigned int *)(v666 + 1);
              v667 = v666[1];
              v668 = &v627[16 * v513];
              v669 = &v744;
              v670 = v658;
              v671 = v646;
              v672 = Add;
              v673 = v642;
              v674 = v518;
              *(_QWORD *)&v711 = ((unint64_t)*v510 >> 5) & 0x1F;
              v520 = std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::find<unsigned long>(&v699, (unint64_t *)&v711);
              if (v520)
                v522 = v520[3];
              else
                v522 = -1;
              v675 = v522;
              v676 = v625 >> 17;
              fetchAttributeGEPIndexList((uint64_t)v665, v521, (llvm::Value **)&__s);
              v551 = v708.__begin_[v513];
              v552 = (uint64_t *)v658[v551];
              v553 = *((_QWORD *)v727 + v551);
              LOWORD(v713) = 257;
              v554 = llvm::IRBuilderBase::CreateGEP((uint64_t)&__p, v553, v552, (uint64_t **)&__s, 3, (uint64_t)&v711);
              v555 = llvm::PointerType::get();
              v556 = __clz(__rbit32(*v519));
              if (*v519)
                v557 = v556;
              else
                v557 = 2;
              v558 = *(_QWORD *)&v627[16 * v513 + 8];
              v559 = __clz(__rbit64(v558));
              if (v558)
                v560 = v559;
              else
                v560 = 2;
              if (v560 < v557)
                v557 = v560;
              if (v557 >= 2)
                v525 = 2;
              else
                v525 = v557;
              LOWORD(v713) = 257;
              v561 = (uint64_t *)llvm::IRBuilderBase::CreateCast((uint64_t)&__p, 49, v554, v555, (uint64_t)&v711);
              if (*((_BYTE *)TypeFromVertexAttribFormat + 8) == 16)
              {
                PackedVector = (uint64_t)loadPackedVector((llvm::IRBuilderBase *)&__p, v561, (uint64_t)TypeFromVertexAttribFormat, 1 << v525);
              }
              else
              {
                LOWORD(v713) = 257;
                PackedVector = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)&__p, TypeFromVertexAttribFormat, (uint64_t)v561, v525 | 0x100u, 0, (uint64_t)&v711);
              }
              v524 = (llvm::Value *)PackedVector;
            }
            if (v61[12 * (int)v612])
            {
              k = v620;
              v524 = MTLAddVertexFetchingToModulePass::convertAttributeToType(a1, (llvm::Type **)v650, (uint64_t)&__p, *((_QWORD *)v738[0] + v620), *((_BYTE *)v741[0] + v620) != 0, v524, *__na >> 10, v525 != 0);
              v405 = v615;
              if (!v524)
              {
                v650 = 0;
                goto LABEL_907;
              }
            }
            else
            {
              v405 = v615;
              k = v620;
            }
            if (v610)
            {
              LODWORD(__s) = v608;
              LOWORD(v713) = 257;
              InsertValue = (llvm::LLVMContext *)llvm::IRBuilderBase::CreateInsertValue((uint64_t)&__p, (uint64_t)InsertValue, (uint64_t)v524, (uint64_t)&__s, 1, (uint64_t)&v711);
              llvm::IRBuilderBase::SetInsertPoint((uint64_t)&__p, v637, v636);
              v658 = v696[0];
            }
            else
            {
              *((_QWORD *)v694[0] + v612) = v524;
            }
          }
        }
      }
      if ((v647 & 1) != 0)
      {
        llvm::IRBuilderBase::SetInsertPoint((uint64_t)&__p, v639, v639 + 40);
        v564 = llvm::ReturnInst::Create(v760, InsertValue, 0, v563);
        LOWORD(v713) = 257;
        llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)&__p, v564, (uint64_t)&v711);
        llvm::IRBuilderBase::SetInsertPoint((uint64_t)&__p, v637, v636);
        v658 = v696[0];
      }
      if (*((_QWORD *)v621 + 12))
      {
        if ((*((_WORD *)v621 + 9) & 1) == 0 || (llvm::Function::BuildLazyArguments(v621), *((_QWORD *)v621 + 12)))
        {
          v565 = 0;
          v566 = 0;
          v567 = (uint64_t *)*((_QWORD *)v621 + 11);
          while (1)
          {
            v568 = *v567;
            if (!v61[12 * v565])
              break;
            if (v649 == v566)
            {
              LOWORD(v713) = 257;
              v569 = llvm::IRBuilderBase::CreateCast((uint64_t)&__p, 49, (uint64_t)Alloca, v568, (uint64_t)&v711);
              goto LABEL_871;
            }
            if (((*(_QWORD *)((char *)v736[0] + ((v565 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v565) & 1) == 0)
              goto LABEL_870;
LABEL_872:
            v567 += 5;
            v574 = *((_QWORD *)v621 + 12);
            v565 = ++v566;
            if (v574 <= v566)
            {
              v405 = v615;
              goto LABEL_881;
            }
          }
          if (((*(_QWORD *)((char *)v736[0] + ((v565 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v565) & 1) != 0)
          {
            v570 = v61[12 * v565 + 1];
            v572 = v570 == 1 && v600 != -1;
            v573 = v603 != -1 && v570 == 0;
            if (!v573 && !v572)
            {
              if ((_DWORD)v570 == 11)
              {
                *((_QWORD *)v694[0] + v565) = v658[*(unsigned int *)&v61[12 * v565 + 4]];
              }
              else
              {
                v575 = (llvm::Value *)v658[*((unsigned int *)&v744 + 2 * v570)];
                if (*(_QWORD *)v575 != v568)
                {
                  v576 = 1;
                  if (v568 && *(_BYTE *)(v568 + 8) == 18)
                    v576 = *(_DWORD *)(v568 + 32);
                  v575 = MTLFrameworkPass::truncateVector(v664, (llvm::LLVMContext *)&__p, v575, v576);
                  if (*(_QWORD *)v575 != v568)
                  {
                    LOWORD(v713) = 257;
                    v575 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)&__p, 38, (uint64_t)v575, v568, (uint64_t)&v711);
                  }
                }
                *((_QWORD *)v694[0] + v565) = v575;
              }
            }
            goto LABEL_872;
          }
LABEL_870:
          v569 = llvm::UndefValue::get();
LABEL_871:
          *((_QWORD *)v694[0] + v565) = v569;
          goto LABEL_872;
        }
        v574 = 0;
LABEL_881:
        v577 = *((_QWORD *)v621 + 3);
        LOWORD(v713) = 257;
        v578 = (unsigned __int8 *)llvm::IRBuilderBase::CreateCall((uint64_t)&__p, v577, (uint64_t)v621, (uint64_t)v694[0], v574, (uint64_t)&v711, 0);
      }
      else
      {
        v580 = *((_QWORD *)v621 + 3);
        LOWORD(v713) = 257;
        v578 = (unsigned __int8 *)llvm::IRBuilderBase::CreateCall((uint64_t)&__p, v580, (uint64_t)v621, 0, 0, (uint64_t)&v711, 0);
      }
      v581 = v578;
      v582 = *((_BYTE *)v405 + 8) == 7 || v405 == (llvm::Constant *)v599;
      v583 = v605;
      if (v582)
        v583 = 1;
      if ((v583 & 1) == 0)
      {
        v578 = (unsigned __int8 *)MTLAddVertexFetchingToModulePass::convertVertexShaderOutput((int)v578, (llvm::Type *)&__p, v578, v405, (v698.__r_.__value_.__l.__size_ - v698.__r_.__value_.__r.__words[0]) >> 1, (uint64_t *)&v698);
        v581 = v578;
      }
      if (v605)
      {
        v711 = 0uLL;
        v712 = 0;
        v581 = (unsigned __int8 *)MTLAddVertexFetchingToModulePass::convertVertexShaderOutput((int)v578, (llvm::Type *)&__p, v581, v405, v592, (uint64_t *)&v711);
        if ((_QWORD)v711)
          operator delete((void *)v711);
      }
      if (*((_BYTE *)v405 + 8) == 7)
        v584 = llvm::ReturnInst::Create(v760, 0, 0, v579);
      else
        v584 = llvm::ReturnInst::Create(v760, (llvm::LLVMContext *)v581, 0, v579);
      LOWORD(v713) = 257;
      llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)&__p, v584, (uint64_t)&v711);
      v585 = *(_DWORD *)(v613 + 8);
      std::vector<llvm::Metadata *>::vector(&v711, v585);
      *(_QWORD *)v711 = llvm::ValueAsMetadata::get();
      if (!v605)
      {
        if (v405 == (llvm::Constant *)v599)
          v586 = *(_QWORD *)(v613 - 8 * *(unsigned int *)(v613 + 8) + 8);
        else
          v586 = v697;
        v597 = v586;
      }
      *(_QWORD *)(v711 + 8) = v597;
      *(_QWORD *)(v711 + 16) = llvm::MDTuple::getImpl();
      if (v585 >= 4)
      {
        v587 = v613 - 8 * *(unsigned int *)(v613 + 8);
        v588 = 24;
        do
        {
          *(_QWORD *)(v711 + v588) = *(_QWORD *)(v587 + v588);
          v588 += 8;
        }
        while (8 * v585 != v588);
      }
      llvm::MDTuple::getImpl();
      llvm::NamedMDNode::eraseFromParent(v595);
      llvm::Module::getOrInsertNamedMetadata();
      llvm::NamedMDNode::addOperand();
      if ((_QWORD)v711)
      {
        *((_QWORD *)&v711 + 1) = v711;
        operator delete((void *)v711);
      }
LABEL_907:
      if (v689)
      {
        v690 = v689;
        operator delete(v689);
      }
      if (v692[0])
      {
        v692[1] = v692[0];
        operator delete(v692[0]);
      }
      if (v693[0])
      {
        v693[1] = v693[0];
        operator delete(v693[0]);
      }
      if (v754.__r_.__value_.__r.__words[0])
      {
        v754.__r_.__value_.__l.__size_ = v754.__r_.__value_.__r.__words[0];
        operator delete(v754.__r_.__value_.__l.__data_);
      }
      if (v694[0])
      {
        v694[1] = v694[0];
        operator delete(v694[0]);
      }
      if (v695[0])
      {
        v695[1] = v695[0];
        operator delete(v695[0]);
      }
      if (v696[0])
      {
        v696[1] = v696[0];
        operator delete(v696[0]);
      }
      llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v770);
      llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v769);
      if ((__int128 *)__p != &v757)
        free((void *)__p);
      if (v698.__r_.__value_.__r.__words[0])
      {
        v698.__r_.__value_.__l.__size_ = v698.__r_.__value_.__r.__words[0];
        operator delete(v698.__r_.__value_.__l.__data_);
      }
      std::__hash_table<llvm::Value *,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,std::allocator<llvm::Value *>>::~__hash_table((uint64_t)&v699);
      if (v704[0])
      {
        v704[1] = v704[0];
        operator delete(v704[0]);
      }
      std::__hash_table<llvm::Value *,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,std::allocator<llvm::Value *>>::~__hash_table((uint64_t)&v705);
      if (v708.__begin_)
      {
        v708.__end_ = v708.__begin_;
        operator delete(v708.__begin_);
      }
      goto LABEL_929;
    }
    v336 = ((_BYTE *)v728 - (_BYTE *)v727) >> 3;
    if (!((unint64_t)(v336 + 1) >> 61))
    {
      v337 = (uint64_t)(v729 - (_QWORD)v727) >> 2;
      if (v337 <= v336 + 1)
        v337 = v336 + 1;
      if (v729 - (unint64_t)v727 >= 0x7FFFFFFFFFFFFFF8)
        v338 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v338 = v337;
      if (v338)
        v339 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v729, v338);
      else
        v339 = 0;
      v340 = (uint64_t *)&v339[8 * v336];
      v341 = &v339[8 * v338];
      *v340 = v321;
      v335 = v340 + 1;
      v342 = (char *)v728;
      v343 = (char *)v727;
      if (v728 != v727)
      {
        do
        {
          v344 = *((_QWORD *)v342 - 1);
          v342 -= 8;
          *--v340 = v344;
        }
        while (v342 != v343);
        v342 = (char *)v727;
      }
      v727 = v340;
      v728 = v335;
      v729 = (unint64_t)v341;
      if (v342)
        operator delete(v342);
      goto LABEL_545;
    }
LABEL_987:
    std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
  }
  return v650;
}

void sub_24101BA18(_Unwind_Exception *a1)
{
  void *v1;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  v3 = (void *)STACK[0x328];
  if (STACK[0x328])
  {
    STACK[0x330] = (unint64_t)v3;
    operator delete(v3);
  }
  v4 = (void *)STACK[0x340];
  if (STACK[0x340])
  {
    STACK[0x348] = (unint64_t)v4;
    operator delete(v4);
  }
  v5 = (void *)STACK[0x358];
  if (STACK[0x358])
  {
    STACK[0x360] = (unint64_t)v5;
    operator delete(v5);
  }
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder((void **)&STACK[0x830]);
  v6 = (void *)STACK[0x378];
  if (STACK[0x378])
  {
    STACK[0x380] = (unint64_t)v6;
    operator delete(v6);
  }
  std::__hash_table<llvm::Value *,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,std::allocator<llvm::Value *>>::~__hash_table((uint64_t)&STACK[0x390]);
  v7 = (void *)STACK[0x3C8];
  if (STACK[0x3C8])
  {
    STACK[0x3D0] = (unint64_t)v7;
    operator delete(v7);
  }
  std::__hash_table<llvm::Value *,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,std::allocator<llvm::Value *>>::~__hash_table((uint64_t)&STACK[0x3E0]);
  v8 = (void *)STACK[0x408];
  if (STACK[0x408])
  {
    STACK[0x410] = (unint64_t)v8;
    operator delete(v8);
  }
  STACK[0x830] = (unint64_t)&STACK[0x420];
  std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x830]);
  v9 = (void *)STACK[0x438];
  if (STACK[0x438])
  {
    STACK[0x440] = (unint64_t)v9;
    operator delete(v9);
  }
  v10 = (void *)STACK[0x578];
  if (STACK[0x578])
  {
    STACK[0x580] = (unint64_t)v10;
    operator delete(v10);
  }
  v11 = (void *)STACK[0x590];
  if (STACK[0x590])
  {
    STACK[0x598] = (unint64_t)v11;
    operator delete(v11);
  }
  v12 = (void *)STACK[0x5A8];
  if (STACK[0x5A8])
  {
    STACK[0x5B0] = (unint64_t)v12;
    operator delete(v12);
  }
  v13 = (void *)STACK[0x5C0];
  if (STACK[0x5C0])
  {
    STACK[0x5C8] = (unint64_t)v13;
    operator delete(v13);
  }
  v14 = (void *)STACK[0x5D8];
  if (STACK[0x5D8])
  {
    STACK[0x5E0] = (unint64_t)v14;
    operator delete(v14);
  }
  v15 = (void *)STACK[0x5F0];
  if (STACK[0x5F0])
  {
    STACK[0x5F8] = (unint64_t)v15;
    operator delete(v15);
  }
  v16 = (void *)STACK[0x608];
  if (STACK[0x608])
  {
    STACK[0x610] = (unint64_t)v16;
    operator delete(v16);
  }
  if (v1)
    operator delete(v1);
  if (STACK[0x620])
    operator delete((void *)STACK[0x620]);
  v17 = (void *)STACK[0x638];
  if (STACK[0x638])
  {
    STACK[0x640] = (unint64_t)v17;
    operator delete(v17);
  }
  v18 = (void *)STACK[0x650];
  if (STACK[0x650])
  {
    STACK[0x658] = (unint64_t)v18;
    operator delete(v18);
  }
  v19 = (void *)STACK[0x668];
  if (STACK[0x668])
  {
    STACK[0x670] = (unint64_t)v19;
    operator delete(v19);
  }
  v20 = (void *)STACK[0x680];
  if (STACK[0x680])
  {
    STACK[0x688] = (unint64_t)v20;
    operator delete(v20);
  }
  v21 = (void *)STACK[0x698];
  if (STACK[0x698])
  {
    STACK[0x6A0] = (unint64_t)v21;
    operator delete(v21);
  }
  v22 = (void *)STACK[0x6B0];
  if (STACK[0x6B0])
  {
    STACK[0x6B8] = (unint64_t)v22;
    operator delete(v22);
  }
  v23 = (void *)STACK[0x6C8];
  if (STACK[0x6C8])
  {
    STACK[0x6D0] = (unint64_t)v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

void std::vector<std::vector<unsigned int>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<unsigned int>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

std::vector<unsigned int>::iterator std::vector<unsigned int>::insert(std::vector<unsigned int> *this, std::vector<unsigned int>::const_iterator __position, std::vector<unsigned int>::value_type *__x)
{
  unsigned int *i;
  const unsigned int *end;
  std::__compressed_pair<unsigned int *> *p_end_cap;
  unsigned int *v8;
  unsigned int *value;
  std::__wrap_iter<const unsigned int *>::iterator_type v10;
  const unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  std::vector<unsigned int>::pointer begin;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int *v19;
  std::__split_buffer<unsigned int> __v;

  i = (unsigned int *)__position.__i_;
  end = this->__end_;
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v8 = value;
  if (end >= value)
  {
    begin = this->__begin_;
    v15 = end - this->__begin_ + 1;
    if (v15 >> 62)
      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
    v16 = __position.__i_ - begin;
    v17 = (char *)v8 - (char *)begin;
    if (v17 >> 1 > v15)
      v15 = v17 >> 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v18 = v15;
    __v.__end_cap_.__value_ = (std::allocator<unsigned int> *)p_end_cap;
    if (v18)
      v19 = (unsigned int *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)p_end_cap, v18);
    else
      v19 = 0;
    __v.__first_ = v19;
    __v.__begin_ = &v19[v16];
    __v.__end_ = __v.__begin_;
    __v.__end_cap_.__value_ = &v19[v18];
    std::__split_buffer<unsigned int>::push_back(&__v, __x);
    i = std::vector<unsigned int>::__swap_out_circular_buffer(this, &__v, i);
    if (__v.__end_ != __v.__begin_)
      __v.__end_ = (std::__split_buffer<unsigned int>::pointer)((char *)__v.__end_
                                                              + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
    if (__v.__first_)
      operator delete(__v.__first_);
  }
  else if (__position.__i_ == end)
  {
    *__position.__i_ = *__x;
    this->__end_ = (std::vector<unsigned int>::pointer)(__position.__i_ + 1);
  }
  else
  {
    v10 = __position.__i_ + 1;
    v11 = end - 1;
    v12 = (unsigned int *)end;
    while (v11 < end)
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    this->__end_ = v12;
    if (end != v10)
      memmove((void *)&end[-(end - v10)], __position.__i_, (char *)end - (char *)v10);
    *i = *__x;
  }
  return (std::vector<unsigned int>::iterator)i;
}

void sub_24101C278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t llvm::IRBuilderBase::CreateInsertElement(llvm::Type **this, llvm::Value *a2, llvm::Value *a3, unint64_t a4, const llvm::Twine *a5)
{
  llvm::Value *v9;
  llvm::Instruction *v10;

  llvm::Type::getInt64Ty(this[8], a2);
  v9 = (llvm::Value *)llvm::ConstantInt::get();
  return llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)this, a2, a3, v9, a5, v10);
}

uint64_t callTypedFunction(uint64_t a1, uint64_t a2)
{
  uint64_t Function;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[4];
  __int16 v9;

  Function = llvm::Module::getFunction();
  if (Function
    || (v5 = llvm::FunctionType::get(),
        v8[0] = "air.get_num_patch_control_points",
        v9 = 259,
        (Function = llvm::Function::Create(v5, 0, (uint64_t)v8, a1)) != 0))
  {
    v6 = *(_QWORD *)(Function + 24);
  }
  else
  {
    v6 = 0;
  }
  v9 = 257;
  return llvm::IRBuilderBase::CreateCall(a2, v6, Function, 0, 0, (uint64_t)v8, 0);
}

uint64_t fetchAttributeGEPIndexList@<X0>(uint64_t a1@<X0>, llvm::LLVMContext *a2@<X1>, llvm::Value **a3@<X8>)
{
  uint64_t v5;
  llvm::Type *v6;
  llvm::IRBuilderBase *v7;
  uint64_t *v8;
  uint64_t v9;
  llvm::Value *v10;
  unsigned int v11;
  int v12;
  llvm::LLVMContext *v13;
  llvm::LLVMContext *v14;
  llvm::Value *Element;
  llvm::Value *v16;
  llvm::Value *v17;
  llvm::Instruction *v18;
  llvm::Value *v19;
  llvm::Instruction *v20;
  llvm::Value *v21;
  llvm::Instruction *v22;
  llvm::Value *v23;
  llvm::LLVMContext *v24;
  uint64_t Function;
  uint64_t v26;
  llvm::Value *v27;
  llvm::Instruction *v28;
  uint64_t v29;
  llvm::Value *AlignedLoad;
  uint64_t *v31;
  uint64_t v32;
  llvm::Type *v33;
  uint64_t v34;
  uint64_t Add;
  uint64_t v36;
  llvm::Value *v37;
  llvm::Value *v38;
  llvm::Instruction *Sub;
  llvm::Value *UDiv;
  uint64_t v41;
  uint64_t v42;
  llvm::Value *Cast;
  llvm::LLVMContext *v44;
  llvm::LLVMContext *v45;
  uint64_t result;
  llvm::Value *v47;
  llvm::IRBuilderBase *v48;
  llvm::Value *v49;
  llvm::IRBuilderBase *v50;
  llvm::Value *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t Int64Ty;
  uint64_t v55;
  llvm::Value *v56;
  _BYTE v57[32];
  __int16 v58;
  _QWORD v59[4];
  __int16 v60;
  uint64_t *Int32Ty;
  uint64_t *v62;
  __int16 v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v6 = *(llvm::Type **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v7 = *(llvm::IRBuilderBase **)(a1 + 16);
  v8 = *(uint64_t **)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(llvm::Value **)(a1 + 72);
  v55 = *(_QWORD *)(a1 + 80);
  v53 = *(_QWORD *)(a1 + 88);
  v11 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4);
  v12 = **(_DWORD **)(a1 + 40) >> 5;
  llvm::Type::getInt32Ty(*(llvm::Type **)a1, a2);
  Int64Ty = llvm::Type::getInt64Ty(v6, v13);
  switch(v12)
  {
    case 0:
      Add = llvm::ConstantInt::get();
      goto LABEL_24;
    case 1:
      v36 = *v8;
      goto LABEL_26;
    case 2:
      v10 = *(llvm::Value **)(v9 + 8 * v8[1]);
      if (v11 < 2)
        goto LABEL_27;
      v37 = *(llvm::Value **)(v9 + 8 * v8[2]);
      v38 = (llvm::Value *)llvm::ConstantInt::get();
      v60 = 257;
      Sub = llvm::IRBuilderBase::CreateSub(v7, v10, v37, (const llvm::Twine *)v59, 0, 0);
      v63 = 257;
      UDiv = (llvm::Value *)llvm::IRBuilderBase::CreateUDiv(v7, Sub, v38, (const llvm::Twine *)&Int32Ty, 0);
      v58 = 257;
      Add = (uint64_t)llvm::IRBuilderBase::CreateAdd(v7, UDiv, v37, (const llvm::Twine *)v57, 0, 0);
      goto LABEL_24;
    case 3:
      v36 = v8[3];
LABEL_26:
      v10 = *(llvm::Value **)(v9 + 8 * v36);
      goto LABEL_27;
    case 4:
      goto LABEL_27;
    case 5:
    case 6:
    case 7:
    case 8:
      v52 = v5;
      Element = *(llvm::Value **)(v9 + 8 * v8[5]);
      v56 = *(llvm::Value **)(v9 + 8 * v8[6]);
      v16 = *(llvm::Value **)(v9 + 8 * v8[7]);
      if ((*(_DWORD *)(*(_QWORD *)Element + 8) & 0xFE) == 0x12)
      {
        llvm::Type::getInt32Ty(v6, v14);
        v17 = (llvm::Value *)llvm::ConstantInt::get();
        v60 = 257;
        Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v7, Element, v17, (const llvm::Twine *)v59, v18);
      }
      if ((*(_DWORD *)(*(_QWORD *)v56 + 8) & 0xFE) == 0x12)
      {
        llvm::Type::getInt32Ty(v6, v14);
        v19 = (llvm::Value *)llvm::ConstantInt::get();
        v60 = 257;
        v56 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v7, v56, v19, (const llvm::Twine *)v59, v20);
      }
      if ((*(_DWORD *)(*(_QWORD *)v16 + 8) & 0xFE) == 0x12)
      {
        llvm::Type::getInt32Ty(v6, v14);
        v21 = (llvm::Value *)llvm::ConstantInt::get();
        v60 = 257;
        v16 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v7, v16, v21, (const llvm::Twine *)v59, v22);
      }
      if (v11 >= 2)
      {
        v23 = (llvm::Value *)llvm::ConstantInt::get();
        v60 = 257;
        Element = (llvm::Value *)llvm::IRBuilderBase::CreateUDiv(v7, Element, v23, (const llvm::Twine *)v59, 0);
      }
      Function = llvm::Module::getFunction();
      if (!Function)
      {
        Int32Ty = (uint64_t *)llvm::Type::getInt32Ty(v6, v24);
        v62 = Int32Ty;
        v26 = llvm::FunctionType::get();
        v59[0] = "air.min.u.i32";
        v60 = 259;
        Function = llvm::Function::Create(v26, 0, (uint64_t)v59, v52);
      }
      v27 = (llvm::Value *)llvm::ConstantInt::get();
      v60 = 257;
      v28 = llvm::IRBuilderBase::CreateSub(v7, v16, v27, (const llvm::Twine *)v59, 0, 0);
      Int32Ty = (uint64_t *)Element;
      v62 = (uint64_t *)v28;
      if (Function)
        v29 = *(_QWORD *)(Function + 24);
      else
        v29 = 0;
      v60 = 257;
      AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateCall((uint64_t)v7, v29, Function, (uint64_t)&Int32Ty, 2, (uint64_t)v59, 0);
      if ((v12 - 7) <= 1)
      {
        v31 = *(uint64_t **)(v9 + 8 * v55);
        v60 = 257;
        Int32Ty = (uint64_t *)llvm::IRBuilderBase::CreateCast((uint64_t)v7, 39, (uint64_t)AlignedLoad, Int64Ty, (uint64_t)v59);
        v60 = 257;
        v32 = llvm::IRBuilderBase::CreateGEP((uint64_t)v7, v53, v31, &Int32Ty, 1, (uint64_t)v59);
        v33 = *(llvm::Type **)(v32 + 72);
        v60 = 257;
        AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v7, v33, v32, 0, 0, (uint64_t)v59);
      }
      v34 = *(_QWORD *)v56;
      if (*(_QWORD *)AlignedLoad != *(_QWORD *)v56)
      {
        v60 = 257;
        AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v7, 39, (uint64_t)AlignedLoad, v34, (uint64_t)v59);
      }
      v60 = 257;
      Add = (uint64_t)llvm::IRBuilderBase::CreateAdd(v7, AlignedLoad, v56, (const llvm::Twine *)v59, 0, 0);
LABEL_24:
      v10 = (llvm::Value *)Add;
LABEL_27:
      v41 = *(_QWORD *)(a1 + 16);
      v42 = llvm::Type::getInt64Ty(*(llvm::Type **)a1, v14);
      v60 = 257;
      Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v41, 39, (uint64_t)v10, v42, (uint64_t)v59);
      a3[2] = 0;
      a3[1] = 0;
      *a3 = Cast;
      llvm::Type::getInt32Ty(*(llvm::Type **)a1, v44);
      a3[1] = (llvm::Value *)llvm::ConstantInt::get();
      llvm::Type::getInt64Ty(*(llvm::Type **)a1, v45);
      result = llvm::ConstantInt::get();
      a3[2] = (llvm::Value *)result;
      if (*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) == -1)
      {
        v47 = *(llvm::Value **)(*(_QWORD *)(a1 + 56) + 8 * *(_QWORD *)(a1 + 96));
        if (v47)
        {
          v48 = *(llvm::IRBuilderBase **)(a1 + 16);
          v60 = 257;
          result = (uint64_t)llvm::IRBuilderBase::CreateMul(v48, v47, Cast, (const llvm::Twine *)v59, 0, 0);
          v49 = (llvm::Value *)result;
          if (!*(_BYTE *)(a1 + 104))
          {
            v50 = *(llvm::IRBuilderBase **)(a1 + 16);
            v60 = 257;
            v51 = (llvm::Value *)llvm::ConstantInt::get();
            result = llvm::IRBuilderBase::CreateLShr(v50, v49, v51, (const llvm::Twine *)v59, 0);
            v49 = (llvm::Value *)result;
          }
          *a3 = v49;
        }
      }
      return result;
    default:
      abort();
  }
}

uint64_t llvm::IRBuilderBase::foldConstant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  BOOL v6;
  BOOL v9;

  v5 = 0;
  if (*(unsigned __int8 *)(a3 + 16) >= 0x15u)
    a3 = 0;
  if (*(unsigned __int8 *)(a4 + 16) >= 0x15u)
    a4 = 0;
  if (a3)
    v6 = a4 == 0;
  else
    v6 = 1;
  if (!v6
    && ((v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 184))(*(_QWORD *)(a1 + 72))) != 0
      ? (v9 = *(unsigned __int8 *)(v5 + 16) >= 0x1Cu)
      : (v9 = 0),
        v9))
  {
    return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)a1, v5, a5);
  }
  else
  {
    return v5;
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::find<unsigned long>(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,MTLCompilerDataType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLCompilerDataType>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,MTLCompilerDataType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLCompilerDataType>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,MTLCompilerDataType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLCompilerDataType>>>::__deallocate_node(int a1, void **__p)
{
  void **v2;
  void **v3;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,MTLCompilerDataType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLCompilerDataType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,MTLCompilerDataType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLCompilerDataType>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_24101CD68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MTLCompilerDataType>,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,MTLCompilerDataType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLCompilerDataType>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = (std::string *)(v8 + 16);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    *((_QWORD *)v8 + 4) = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  *((_DWORD *)v8 + 10) = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_24101CE18(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MTLCompilerDataType>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v5;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      v11 = v7 + v9;
      v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      v14 = v8 + a3 + v7 + v4;
      v15 = v14 + v5;
      v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v18 = v17 + v6 + v9;
      v19 = __ROR8__(v18, 44);
      v20 = v18 + v10;
      v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      v23 = *a2;
      v22 = a2 + 4;
      v24 = v23 - 0x4B6D499041670D8DLL * v5;
      v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v26 = *(v22 - 3);
        v27 = v24 + v15 + v11 + v26;
        v28 = v22[2];
        v29 = v22[3];
        v30 = v22[1];
        v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        v31 = v13 + v20;
        v32 = *(v22 - 2);
        v33 = *(v22 - 1);
        v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        v35 = v34 + v20 + v33;
        v36 = v34 + v26 + v32;
        v15 = v36 + v33;
        v37 = __ROR8__(v36, 44) + v34;
        v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        v16 = v37 + __ROR8__(v35 + v38, 21);
        v39 = v24 + v21 + *v22;
        v20 = v39 + v30 + v28 + v29;
        v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        v13 = v38;
        v25 += 64;
      }
      while (v25);
      v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 < 9)
  {
    if (a2 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)a1 + a2 - 8);
    v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a1[1];
  v3 = 0xB492B66FBE98F273 * *a1;
  v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8);
  v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)((char *)a1 + a2 - 16);
  v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  v5 = a1[2];
  v4 = a1[3];
  v6 = __ROR8__(v3 + v4, 52);
  v7 = v3 + a1[1];
  v8 = __ROR8__(v7, 7);
  v9 = v7 + v5;
  v10 = *(_QWORD *)((char *)a1 + a2 - 32) + v5;
  v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  v12 = *(_QWORD *)((char *)a1 + a2 - 24) + v10 + v2;
  v13 = 0xC3A5C85C97CB3127 * (v12 + *(_QWORD *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t std::equal_to<std::string>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t result;

  v3 = a3;
  v4 = a2[23];
  if ((v4 & 0x80u) == 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  v6 = a3[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a3 + 1);
  if (v5 != v6)
    return 0;
  if (v7 < 0)
    v3 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
    return memcmp(*(const void **)a2, v3, *((_QWORD *)a2 + 1)) == 0;
  if (!a2[23])
    return 1;
  v8 = v4 - 1;
  do
  {
    v10 = *a2++;
    v9 = v10;
    v12 = *v3++;
    v11 = v12;
    v14 = v8-- != 0;
    result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MTLCompilerDataType>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void std::vector<MTLAddVertexFetchingToModulePass::ModifiedOutput>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int16 v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 1)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 2 * a2);
      v7 += 2 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    if ((uint64_t)(a2 + (v8 >> 1)) < 0)
      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
    v9 = v8 >> 1;
    v10 = v5 - (_BYTE *)*a1;
    if (v10 <= a2 + (v8 >> 1))
      v11 = a2 + (v8 >> 1);
    else
      v11 = v10;
    if (v10 >= 0x7FFFFFFFFFFFFFFELL)
      v12 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MTLAddVertexFetchingToModulePass::ModifiedOutput>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[2 * v9];
    v15 = &v13[2 * v12];
    bzero(v14, 2 * a2);
    v16 = &v14[2 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_WORD *)v17 - 1);
        v17 -= 2;
        *((_WORD *)v14 - 1) = v19;
        v14 -= 2;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<MTLAddVertexFetchingToModulePass::ModifiedOutput>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(2 * a2);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,MTLCompilerDataType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLCompilerDataType>>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v13 == v6)
      {
        if ((std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,MTLCompilerDataType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLCompilerDataType>>>::erase(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void **v3;
  void *__p;
  uint64_t v6;

  v2 = *a2;
  std::__hash_table<std::__hash_value_type<std::string,MTLCompilerDataType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLCompilerDataType>>>::remove(a1, a2, (uint64_t)&__p);
  v3 = (void **)__p;
  __p = 0;
  if (v3)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MTLCompilerDataType>,void *>>>::operator()[abi:ne180100]((uint64_t)&v6, v3);
  return v2;
}

_QWORD *std::__hash_table<std::__hash_value_type<std::string,MTLCompilerDataType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLCompilerDataType>>>::remove@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n, const std::vector<int>::value_type *__x)
{
  std::vector<int>::pointer end;
  int *v7;
  std::vector<int>::size_type v8;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v7 = &end[__n];
    v8 = 4 * __n;
    do
    {
      *end++ = *__x;
      v8 -= 4;
    }
    while (v8);
    this->__end_ = v7;
  }
  return this;
}

void sub_24101D7D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<llvm::MDNode *>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<llvm::Type *>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_24101D848(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<unsigned int>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::vector<unsigned int>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void std::vector<std::vector<unsigned int>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PackedInput>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<unsigned int>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_24101DA48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<unsigned int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned int>>,std::reverse_iterator<std::vector<unsigned int>*>,std::reverse_iterator<std::vector<unsigned int>*>,std::reverse_iterator<std::vector<unsigned int>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned int>>,std::reverse_iterator<std::vector<unsigned int>*>,std::reverse_iterator<std::vector<unsigned int>*>,std::reverse_iterator<std::vector<unsigned int>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned int>>,std::reverse_iterator<std::vector<unsigned int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned int>>,std::reverse_iterator<std::vector<unsigned int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned int>>,std::reverse_iterator<std::vector<unsigned int>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned int>>,std::reverse_iterator<std::vector<unsigned int>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t std::__split_buffer<std::vector<unsigned int>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::vector<unsigned int>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::vector<unsigned int>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

void std::__split_buffer<unsigned int>::push_back(std::__split_buffer<unsigned int> *this, std::__split_buffer<unsigned int>::value_type *__x)
{
  std::__split_buffer<unsigned int>::pointer end;
  std::__split_buffer<unsigned int>::pointer begin;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  int64_t v14;
  unsigned int *v15;
  unint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int *v19;
  std::__split_buffer<unsigned int>::pointer v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  int v24;
  std::__split_buffer<unsigned int>::pointer first;

  end = this->__end_;
  if (end == this->__end_cap_.__value_)
  {
    begin = this->__begin_;
    v6 = (char *)begin - (char *)this->__first_;
    if (begin <= this->__first_)
    {
      if (end == this->__first_)
        v16 = 1;
      else
        v16 = ((char *)end - (char *)this->__first_) >> 1;
      v17 = (unsigned int *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)this->__end_cap_.__value_, v16);
      v19 = (unsigned int *)((char *)v17 + (v16 & 0xFFFFFFFFFFFFFFFCLL));
      v20 = this->__begin_;
      end = v19;
      v21 = (char *)this->__end_ - (char *)v20;
      if (v21)
      {
        end = (unsigned int *)((char *)v19 + (v21 & 0xFFFFFFFFFFFFFFFCLL));
        v22 = 4 * (v21 >> 2);
        v23 = (unsigned int *)((char *)v17 + (v16 & 0xFFFFFFFFFFFFFFFCLL));
        do
        {
          v24 = *v20++;
          *v23++ = v24;
          v22 -= 4;
        }
        while (v22);
      }
      first = this->__first_;
      this->__first_ = v17;
      this->__begin_ = v19;
      this->__end_ = end;
      this->__end_cap_.__value_ = &v17[v18];
      if (first)
      {
        operator delete(first);
        end = this->__end_;
      }
    }
    else
    {
      v7 = v6 >> 2;
      v8 = v6 >> 2 < -1;
      v9 = (v6 >> 2) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &begin[-v12];
      v14 = (char *)end - (char *)begin;
      if (end != begin)
      {
        memmove(&begin[-v12], begin, (char *)end - (char *)begin);
        end = this->__begin_;
      }
      v15 = &end[v11];
      end = (unsigned int *)((char *)v13 + v14);
      this->__begin_ = v15;
    }
  }
  *end = *__x;
  this->__end_ = end + 1;
}

std::vector<unsigned int>::pointer std::vector<unsigned int>::__swap_out_circular_buffer(std::vector<unsigned int> *this, std::__split_buffer<unsigned int> *__v, std::vector<unsigned int>::pointer __p)
{
  unsigned int *begin;
  std::vector<unsigned int>::pointer v6;
  unsigned int *v7;
  std::vector<unsigned int>::pointer v8;
  unsigned int v9;
  unsigned int *end;
  std::__split_buffer<unsigned int>::pointer v11;
  int64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int *value;

  begin = __v->__begin_;
  v6 = this->__begin_;
  v7 = begin;
  if (this->__begin_ != __p)
  {
    v8 = __p;
    v7 = __v->__begin_;
    do
    {
      v9 = *--v8;
      *--v7 = v9;
    }
    while (v8 != v6);
  }
  __v->__begin_ = v7;
  end = this->__end_;
  v11 = __v->__end_;
  v12 = (char *)end - (char *)__p;
  if (end != __p)
  {
    memmove(__v->__end_, __p, (char *)end - (char *)__p);
    v7 = __v->__begin_;
  }
  __v->__end_ = (std::__split_buffer<unsigned int>::pointer)((char *)v11 + v12);
  v13 = this->__begin_;
  this->__begin_ = v7;
  __v->__begin_ = v13;
  v14 = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = v14;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

_QWORD *std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_24101E04C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *i = *v20;
LABEL_38:
    *v20 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v21 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_24101E268(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::find<unsigned int>(_QWORD *a1, unsigned int *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (v2.i32[0] - 1) & v3;
  }
  v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t *)*result)
  {
    v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

_QWORD *std::vector<unsigned long>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<llvm::Type *>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_24101E394(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<SmallVertexPartialLoad>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

uint64_t MTLVertexOutputLinkingPass::vertexOutputLinking(MTLCompilerErrorObject **a1, llvm::Module *a2, uint64_t *a3, uint64_t a4, unsigned int a5, uint64_t a6, unsigned int a7, unsigned int a8, unsigned int a9, unsigned int a10, int a11, int a12)
{
  unint64_t v18;
  llvm::NamedMDNode *NamedMetadata;
  uint64_t Operand;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *String;
  uint64_t v28;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int MatchingFragmentInput;
  unint64_t v35;
  uint64_t v36;
  int v37;
  const char *v38;
  uint64_t v39;
  void *v40;
  std::string *v41;
  llvm::Type *v43;
  void *__p[2];
  uint64_t v46;
  std::string v47;
  __int16 v48;
  void *v49;

  if (!MTLFrameworkPass::checkFragmentRenderTargetArrayIndex(a1, a11, a12))
    return 0;
  if (a5 <= 1)
    v18 = 1;
  else
    v18 = a5;
  v47.__r_.__value_.__s.__data_[0] = 0;
  std::vector<BOOL>::vector(&v49, v18, (unsigned __int8 *)&v47);
  v47.__r_.__value_.__r.__words[0] = (std::string::size_type)"air.vertex";
  v48 = 259;
  NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(a2, (const llvm::Twine *)&v47);
  Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
  v21 = (_QWORD *)(Operand - 8 * *(unsigned int *)(Operand + 8));
  v22 = v21[1];
  v23 = *(unsigned int *)(v22 + 8);
  if ((_DWORD)v23)
  {
    v24 = 0;
    v43 = *(llvm::Type **)a2;
    v25 = **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*v21 + 128) + 24) + 16);
    do
    {
      v26 = *(_QWORD *)(v22 - 8 * *(unsigned int *)(v22 + 8) + 8 * v24);
      String = (_QWORD *)llvm::MDString::getString(*(llvm::MDString **)(v26 - 8 * *(unsigned int *)(v26 + 8)));
      if (v28 > 16)
      {
        if (v28 == 29)
        {
          if (!memcmp(String, "air.render_target_array_index", 0x1DuLL))
            dataTypeFromMetadata(1u, v26);
        }
        else if (v28 == 17)
        {
          if (*String == 0x747265762E726961 && String[1] == 0x757074756F5F7865 && *((_BYTE *)String + 16) == 116)
          {
            LODWORD(v47.__r_.__value_.__l.__data_) = 0;
            MatchingFragmentInput = MTLFrameworkPass::findMatchingFragmentInput((char ***)a1, &v47, v25, v24, v26, a3, a4);
            if (MatchingFragmentInput == 1)
            {
              *(_QWORD *)((char *)v49 + (((unint64_t)LODWORD(v47.__r_.__value_.__l.__data_) >> 3) & 0x1FFFFFF8)) |= 1 << v47.__r_.__value_.__s.__data_[0];
            }
            else if (MatchingFragmentInput == 2)
            {
              goto LABEL_58;
            }
            MTLFrameworkPass::addLocationToMetadata(v43, v22, v24);
          }
          else if (!memcmp(String, "air.clip_distance", 0x11uLL))
          {
            if (*(_BYTE *)(v25 + 8) == 16
              && (v31 = *(_QWORD *)(*(_QWORD *)(v25 + 16) + 8 * v24)) != 0
              && *(_BYTE *)(v31 + 8) == 17)
            {
              v32 = *(_QWORD *)(v31 + 32);
              v33 = (unint64_t)(v32 + 3) >> 2;
            }
            else
            {
              LODWORD(v32) = 1;
              LODWORD(v33) = 1;
            }
            a8 += v32;
            a7 += v33;
          }
        }
      }
      else if (v28 == 12)
      {
        if (!memcmp(String, "air.position", 0xCuLL))
        {
          ++a7;
          a8 += 4;
        }
      }
      else if (v28 == 14 && !memcmp(String, "air.point_size", 0xEuLL))
      {
        ++a7;
        ++a8;
      }
      ++v24;
    }
    while (v23 != v24);
  }
  if (a5)
  {
    v35 = 0;
    v36 = 8;
    while (((*(_QWORD *)((char *)v49 + ((v35 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v35) & 1) != 0)
    {
      ++v35;
      v36 += 32;
      if (a5 == v35)
        goto LABEL_42;
    }
    v40 = *(void **)(*a3 + v36);
    if (v40)
    {
      std::string::basic_string[abi:ne180100](__p, v40, *(_QWORD *)(*a3 + v36 + 8));
    }
    else
    {
      __p[0] = 0;
      __p[1] = 0;
      v46 = 0;
    }
    MTLFrameworkPass::attribute_name((uint64_t)__p, &v47);
    if (SHIBYTE(v46) < 0)
      operator delete(__p[0]);
    v41 = &v47;
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v41 = (std::string *)v47.__r_.__value_.__r.__words[0];
    MTLCompilerErrorObject::setFormattedErrorMessage((char **)*a1, "Link failed: fragment input %s was not found in vertex shader outputs", (const char *)v41);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v47.__r_.__value_.__l.__data_);
  }
  else
  {
LABEL_42:
    v37 = a9;
    if (a7 <= a9)
    {
      v37 = a10;
      if (a8 <= a10)
      {
        v39 = 1;
        goto LABEL_59;
      }
      v38 = "varying components";
      a7 = a8;
    }
    else
    {
      v38 = "varyings";
    }
    MTLCompilerErrorObject::setFormattedErrorMessage((char **)*a1, "Link failed: number of shader %s (%u) exceeds limit (%u). Note that on macOS the following attributes count towards the limit: [[position]], [[clip_distance]], [[point_size]], [[point_coord]], and, when read in the fragment shader, [[viewport_array_index]] & [[render_target_array_index]].", v38, a7, v37);
  }
LABEL_58:
  v39 = 0;
LABEL_59:
  if (v49)
    operator delete(v49);
  return v39;
}

void sub_24101E798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MTLCheckPixelFormatValidPass::getArgumentTypeName(uint64_t a1, uint64_t a2, const char **a3)
{
  uint64_t v5;
  uint64_t v6;
  llvm::MDString *v7;
  uint64_t String;
  uint64_t v9;
  BOOL v10;
  const char *v12;
  const char *v13;
  const char *v14;
  size_t v15;
  uint64_t result;

  v5 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v5)
  {
    v6 = 0;
    while (1)
    {
      v7 = *(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * v6);
      if (v7)
      {
        if (!*(_BYTE *)v7)
        {
          String = llvm::MDString::getString(v7);
          if (v9 == 17)
          {
            v10 = *(_QWORD *)String == 0x5F6772612E726961 && *(_QWORD *)(String + 8) == 0x6D616E5F65707974;
            if (v10 && *(_BYTE *)(String + 16) == 101)
              break;
          }
        }
      }
      if (v5 == ++v6)
      {
        LODWORD(v6) = v5;
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((int)v6 + 1 >= v5)
    return 0;
  v12 = (const char *)llvm::MDString::getString(*(llvm::MDString **)(a2
                                                                   - 8 * *(unsigned int *)(a2 + 8)
                                                                   + 8 * (v6 + 1)));
  v14 = v13;
  v15 = strlen(v12);
  result = dataTypeFromString(v12, v15);
  *a3 = v12;
  a3[1] = v14;
  return result;
}

uint64_t MTLCheckPixelFormatValidPass::pixelColorFormatValid(MTLCompilerErrorObject **a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t InfoForDevice;
  unint64_t ComponentType;
  int v12;
  uint64_t result;
  int v14;
  int v15;
  const char *v16;
  MTLCompilerErrorObject *v17;
  const char *v18;
  unsigned int v19;
  const char *v20;
  MTLCompilerErrorObject *v21;
  void **v22;
  void *__p[2];
  uint64_t v24;
  void *__src;
  size_t __len;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  if (!a2)
  {
    if ((a5 & 1) != 0)
      return 1;
    MTLCompilerErrorObject::setErrorMessage(*a1, "Shaders reads from a color attachment whose pixel format is MTLPixelFormatInvalid");
    return 0;
  }
  v30 = 0;
  v28 = 0u;
  v29 = 0u;
  v27 = 0u;
  __src = 0;
  __len = 0;
  InfoForDevice = MTLPixelFormatGetInfoForDevice();
  if (!MTLCheckPixelFormatValidPass::getArgumentTypeName(InfoForDevice, a4, (const char **)&__src))
  {
    v14 = *(_DWORD *)(a3 + 8);
    LOBYTE(v15) = *(_DWORD *)(a3 + 8);
    if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12)
      v15 = *(_DWORD *)(**(_QWORD **)(a3 + 16) + 8);
    if ((v15 | 2) == 2)
    {
      if ((BYTE10(v27) & 3) != 0)
        goto LABEL_20;
      v16 = "Floating point fragment input cannot be read from a %s color attachment";
      v17 = *a1;
      v18 = "Floating point fragment output cannot be written to a %s color attachment";
    }
    else
    {
      if ((BYTE10(v27) & 3) == 0)
        goto LABEL_20;
      v16 = "Integer fragment input cannot be read from a %s color attachment";
      v17 = *a1;
      v18 = "Integer fragment output cannot be written to a %s color attachment";
    }
    if (a5)
      MTLCompilerErrorObject::setFormattedErrorMessage((char **)v17, v18, (_QWORD)v27);
    else
      MTLCompilerErrorObject::setFormattedErrorMessage((char **)v17, v16, (_QWORD)v27);
    return 0;
  }
  ComponentType = MTLDataTypeGetComponentType();
  if (ComponentType > 0x29)
    goto LABEL_47;
  if (((1 << ComponentType) & 0x10008) != 0)
  {
    v12 = 196608;
    goto LABEL_18;
  }
  if (((1 << ComponentType) & 0x2020000000) != 0)
  {
    v12 = 1310720;
    goto LABEL_18;
  }
  if (((1 << ComponentType) & 0x20200000000) == 0)
LABEL_47:
    abort();
  v12 = 2621440;
LABEL_18:
  if ((DWORD2(v27) & v12) == 0)
  {
    if (a5)
      v20 = "output";
    else
      v20 = "input";
    v21 = *a1;
    if (__src)
    {
      std::string::basic_string[abi:ne180100](__p, __src, __len);
      if (v24 >= 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
    }
    else
    {
      __p[0] = 0;
      __p[1] = 0;
      v22 = __p;
      v24 = 0;
    }
    MTLCompilerErrorObject::setFormattedErrorMessage((char **)v21, "%s of type %s is not compatible with a %s color attachment.", v20, (const char *)v22, (const char *)v27);
    if (SHIBYTE(v24) < 0)
      operator delete(__p[0]);
    return 0;
  }
  v14 = *(unsigned __int8 *)(a3 + 8);
LABEL_20:
  if (v14 == 18)
    v19 = *(_DWORD *)(a3 + 32);
  else
    v19 = 1;
  if (a2 == 1 && a5 && v19 <= 3)
  {
    MTLCompilerErrorObject::setFormattedErrorMessage((char **)*a1, "fragment shader color output requires 4 outputs for pixel format (%s)");
    return 0;
  }
  result = 1;
  if (a5 && v19 < v29)
  {
    MTLCompilerErrorObject::setFormattedErrorMessage((char **)*a1, "fragment shader color output does not have enough components for the pixel format (%s)");
    return 0;
  }
  return result;
}

void sub_24101EBA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MTLCheckPixelFormatValidPass::formatIsValid(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v13;
  _QWORD *String;
  uint64_t v15;
  BOOL v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  __int16 v26;

  *(_BYTE *)a7 = 0;
  v13 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * a3);
  String = (_QWORD *)llvm::MDString::getString(*(llvm::MDString **)(v13
                                                                  - 8 * *(unsigned int *)(v13 + 8)
                                                                  + 8 * (a8 ^ 1u)));
  if (v15 == 9)
  {
    if (memcmp(String, "air.depth", 9uLL) || *(_BYTE *)(a1 + 8))
      return 1;
    MTLPixelFormatGetInfoForDevice();
    MTLCompilerErrorObject::setErrorMessage(*(MTLCompilerErrorObject **)a1, "depthAttachmentPixelFormat is not valid and shader writes to depth");
  }
  else
  {
    if (v15 != 17)
      return 1;
    v16 = *String == 0x646E65722E726961 && String[1] == 0x65677261745F7265;
    if (!v16 || *((_BYTE *)String + 16) != 116)
      return 1;
    *(_BYTE *)a7 = 1;
    v18 = v13 - 8 * *(unsigned int *)(v13 + 8);
    v19 = 16;
    if (a8)
      v19 = 8;
    v20 = *(_QWORD *)(*(_QWORD *)(v18 + v19) + 128);
    if (*(_BYTE *)(v20 + 16) == 16)
    {
      v21 = (_QWORD *)(v20 + 24);
      if (*(_DWORD *)(v20 + 32) >= 0x41u)
        v21 = (_QWORD *)*v21;
      v22 = *(_DWORD *)v21;
    }
    else
    {
      v22 = -1;
    }
    v23 = *(_QWORD *)(a5 + 8 * v22);
    *(_WORD *)(a7 + 2) = v22;
    if (a8)
    {
      v24 = *(_QWORD *)(*(_QWORD *)(v18 + 16) + 128);
      if (*(_BYTE *)(v24 + 16) == 16)
      {
        v25 = (_QWORD *)(v24 + 24);
        if (*(_DWORD *)(v24 + 32) >= 0x41u)
          v25 = (_QWORD *)*v25;
        v26 = *(_WORD *)v25;
      }
      else
      {
        v26 = -1;
      }
      *(_WORD *)(a7 + 4) = v26;
    }
    if ((MTLCheckPixelFormatValidPass::pixelColorFormatValid((MTLCompilerErrorObject **)a1, v23, a4, v13, a8) & 1) != 0)
      return 1;
  }
  return 0;
}

uint64_t MTLCheckPixelFormatValidPass::checkPixelFormatValid(char ***a1, llvm::Module *this, uint64_t a3, unsigned __int16 *a4)
{
  llvm::NamedMDNode *NamedMetadata;
  uint64_t Operand;
  _QWORD *v9;
  uint64_t v10;
  llvm::Function *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  char v27;
  char v28;
  int v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t *v33;
  int v34;
  uint64_t v35;
  BOOL v36;
  llvm::Function *v37;
  _BYTE v38[4];
  __int16 v39;
  _OWORD v40[2];
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v40[0] = "air.fragment";
  LOWORD(v41) = 259;
  NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(this, (const llvm::Twine *)v40);
  Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
  v9 = (_QWORD *)(Operand - 8 * *(unsigned int *)(Operand + 8));
  v10 = v9[1];
  v11 = *(llvm::Function **)(*v9 + 128);
  v12 = **(_QWORD **)(*((_QWORD *)v11 + 3) + 16);
  v13 = *(unsigned int *)(v10 + 8);
  v44 = 0;
  v41 = 0u;
  v42 = 0u;
  memset(v40, 0, sizeof(v40));
  v14 = *(unsigned __int8 *)(a3 + 8);
  if (*(_BYTE *)(a3 + 8))
  {
    do
    {
      v15 = *a4++;
      *((_QWORD *)v40 + (v15 & 0xF)) = (unint64_t)v15 >> 4;
      --v14;
    }
    while (v14);
  }
  if ((_DWORD)v13)
  {
    v37 = v11;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    while (1)
    {
      v19 = v12;
      if (*(_BYTE *)(v12 + 8) == 16)
        v19 = *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * v16);
      result = MTLCheckPixelFormatValidPass::formatIsValid((uint64_t)a1, v10, v16, v19, (uint64_t)v40, a3, (uint64_t)v38, 1);
      if (!(_DWORD)result)
        break;
      if (v38[0])
      {
        v21 = 1 << v38[2];
        if (v39)
          v17 |= v21;
        else
          v18 |= v21;
      }
      if (v13 == ++v16)
      {
        v44 = v17;
        v11 = v37;
        goto LABEL_15;
      }
    }
  }
  else
  {
    v18 = 0;
LABEL_15:
    v22 = 0;
    v43 = v18;
    v23 = *(_DWORD *)(a3 + 8);
    v24 = BYTE2(v23);
    v25 = BYTE1(v23);
    while (2)
    {
      v26 = 0;
      v27 = 1;
      do
      {
        v28 = v27;
        if ((v27 & 1) != 0)
          v29 = v25;
        else
          v29 = v24;
        if (((1 << v22) & v29) != 0 && (*(&v43 + v26) & (1 << v22)) == 0)
        {
          MTLCompilerErrorObject::setFormattedErrorMessage(*a1, "Fragment shader does not write to render target color(0), index(%u) that is required for blending", v26);
          return 0;
        }
        v27 = 0;
        v26 = 1;
      }
      while ((v28 & 1) != 0);
      if (++v22 != 8)
        continue;
      break;
    }
    v30 = *(_QWORD *)(Operand - 8 * *(unsigned int *)(Operand + 8) + 16);
    if ((*((_WORD *)v11 + 9) & 1) != 0)
      llvm::Function::BuildLazyArguments(v11);
    if (v30 && (v31 = *(_DWORD *)(v30 + 8)) != 0)
    {
      v32 = 0;
      v33 = (uint64_t *)*((_QWORD *)v11 + 11);
      v34 = v31 - 1;
      do
      {
        v35 = *v33;
        v33 += 5;
        result = MTLCheckPixelFormatValidPass::formatIsValid((uint64_t)a1, v30, v32, v35, (uint64_t)v40, a3, (uint64_t)v38, 0);
        if ((_DWORD)result)
          v36 = v34 == v32;
        else
          v36 = 1;
        ++v32;
      }
      while (!v36);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

llvm::Value *MTLFrameworkPass::truncateVector(llvm::Type *this, llvm::LLVMContext *a2, llvm::Value *a3, int a4)
{
  llvm::Value *ShuffleVector;
  BOOL v5;
  int v7;
  llvm::Value *v11;
  llvm::Instruction *v12;
  llvm::LLVMContext *v13;
  uint64_t v14;
  llvm::Value *v15;
  void *__p[3];
  _BYTE v18[32];
  __int16 v19;

  ShuffleVector = a3;
  if (*(_QWORD *)a3)
    v5 = *(_BYTE *)(*(_QWORD *)a3 + 8) == 18;
  else
    v5 = 0;
  if (v5)
  {
    v7 = *(_DWORD *)(*(_QWORD *)a3 + 32);
    if (v7 != 1 && v7 != a4)
    {
      if (a4 == 1)
      {
        llvm::Type::getInt32Ty(this, a2);
        v11 = (llvm::Value *)llvm::ConstantInt::get();
        v19 = 257;
        return (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(a2, ShuffleVector, v11, (const llvm::Twine *)v18, v12);
      }
      else
      {
        std::vector<llvm::Constant *>::vector(__p, a4);
        if (a4 >= 1)
        {
          v14 = 0;
          do
          {
            llvm::Type::getInt32Ty(this, v13);
            *((_QWORD *)__p[0] + v14++) = llvm::ConstantInt::get();
          }
          while (a4 != v14);
        }
        v15 = (llvm::Value *)llvm::ConstantVector::get();
        v19 = 257;
        ShuffleVector = (llvm::Value *)llvm::IRBuilderBase::CreateShuffleVector(a2, ShuffleVector, ShuffleVector, v15, (const llvm::Twine *)v18);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
    }
  }
  return ShuffleVector;
}

void sub_24101F148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MTLFrameworkPass::addLocationToMetadata(llvm::Type *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm::MDString *v11;
  _QWORD *String;
  uint64_t v13;
  BOOL v14;
  BOOL v15;
  llvm::LLVMContext *v16;
  void *__p[3];

  v4 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * a3);
  v5 = *(int *)(v4 + 8);
  std::vector<llvm::Metadata *>::vector(__p, v5 + 2);
  if ((int)v5 < 1)
    goto LABEL_25;
  v6 = 0;
  v7 = 0;
  LODWORD(v8) = 0;
  do
  {
    while (1)
    {
      v9 = v4 - 8 * *(unsigned int *)(v4 + 8);
      v10 = (int)v8;
      *((_QWORD *)__p[0] + (int)v8) = *(_QWORD *)(v9 + 8 * v6);
      v8 = (int)v8 + 1;
      if (!v6 || (v7 & 1) != 0)
        break;
      v11 = *(llvm::MDString **)(v9 + 8 * (v6 - 1));
      if (*(_BYTE *)v11)
        goto LABEL_6;
      String = (_QWORD *)llvm::MDString::getString(v11);
      if (v13 == 17)
      {
        if (memcmp(String, "air.vertex_output", 0x11uLL))
          goto LABEL_6;
      }
      else if (v13 != 18
             || (*String == 0x676172662E726961 ? (v14 = String[1] == 0x706E695F746E656DLL) : (v14 = 0),
                 v14 ? (v15 = *((unsigned __int16 *)String + 8) == 29813) : (v15 = 0),
                 !v15))
      {
LABEL_6:
        v7 = 0;
        break;
      }
      *((_QWORD *)__p[0] + v8) = llvm::MDString::get();
      llvm::Type::getInt32Ty(a1, v16);
      llvm::ConstantInt::get();
      LODWORD(v8) = v10 + 3;
      *((_QWORD *)__p[0] + v10 + 2) = llvm::ValueAsMetadata::get();
      ++v6;
      v7 = 1;
      if (v6 == v5)
        goto LABEL_24;
    }
    ++v6;
  }
  while (v6 != v5);
  if ((v7 & 1) == 0)
    goto LABEL_25;
LABEL_24:
  llvm::MDTuple::getImpl();
  llvm::MDNode::replaceOperandWith();
LABEL_25:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_24101F33C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MTLFrameworkPass::createVertexOutputMetadata(llvm::Type *a1, const char *a2, int a3, int a4, int a5, int a6, uint64_t a7, int a8)
{
  llvm::LLVMContext *v15;
  int v16;
  const char *ShaderTypeName;
  int v18;
  const char *v19;
  const char *v20;
  _QWORD v22[2];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v22[0] = llvm::MDString::get();
  if (a2)
    strlen(a2);
  v24 = 0u;
  v25 = 0u;
  v23 = 0u;
  v22[1] = llvm::MDString::get();
  if (a8)
  {
    *(_QWORD *)&v23 = llvm::MDString::get();
    llvm::Type::getInt32Ty(a1, v15);
    llvm::ConstantInt::get();
    *((_QWORD *)&v23 + 1) = llvm::ValueAsMetadata::get();
    v16 = 4;
    if (!a3)
      goto LABEL_10;
  }
  else
  {
    v16 = 2;
    if (!a3)
      goto LABEL_10;
  }
  ShaderTypeName = MTLDataTypeGetShaderTypeName(a3, a4);
  v18 = v16 | 1;
  v22[v16] = llvm::MDString::get();
  if (ShaderTypeName)
    strlen(ShaderTypeName);
  v16 += 2;
  v22[v18] = llvm::MDString::get();
LABEL_10:
  if ((a5 - 1) > 3)
    v19 = (const char *)&unk_24105C402;
  else
    v19 = off_25111F4A0[a5 - 1];
  strlen(v19);
  v22[v16] = llvm::MDString::get();
  if ((a6 - 1) > 2)
    v20 = (const char *)&unk_24105C402;
  else
    v20 = off_25111F4C0[a6 - 1];
  strlen(v20);
  v22[v16 + 1] = llvm::MDString::get();
  return llvm::MDTuple::getImpl();
}

char *MTLFrameworkPass::samplingStringFromQualifier(MTLFrameworkPass *this)
{
  if (((_DWORD)this - 1) > 3)
    return (char *)&unk_24105C402;
  else
    return off_25111F4A0[(int)this - 1];
}

char *MTLFrameworkPass::interpolationStringFromQualifier(MTLFrameworkPass *this)
{
  if (((_DWORD)this - 1) > 2)
    return (char *)&unk_24105C402;
  else
    return off_25111F4C0[(int)this - 1];
}

void *MTLFrameworkPass::getArgumentMetadataIndices(uint64_t a1, uint64_t a2)
{
  void *result;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  result = memset(*(void **)a2, 255, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  v5 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = *(_DWORD **)a2;
    do
    {
      v8 = *(_QWORD *)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8 * v6);
      v9 = *(_QWORD *)(*(_QWORD *)(v8 - 8 * *(unsigned int *)(v8 + 8)) + 128);
      v10 = (_QWORD *)(v9 + 24);
      if (*(_DWORD *)(v9 + 32) >= 0x41u)
        v10 = (_QWORD *)*v10;
      v7[*v10] = v6++;
    }
    while (v5 != v6);
  }
  return result;
}

uint64_t MTLFrameworkPass::extractVaryingInfoFromMetadata(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v8;
  unsigned int v9;
  unsigned int i;
  llvm::MDString *v11;
  _DWORD *String;
  size_t v13;
  const void *v14;
  size_t v15;
  char v16;
  const char *v18;
  size_t v19;
  uint64_t result;
  char v21;
  unsigned int v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;
  BOOL v28;
  char v29;
  char v30;

  v5 = a3;
  *(_QWORD *)(a1 + 8) = llvm::MDString::getString(*(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * a3));
  *(_QWORD *)(a1 + 16) = v8;
  v9 = *(_DWORD *)(a2 + 8);
  for (i = v5 + 1; i < v9; ++i)
  {
    v11 = *(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * i);
    if (!*(_BYTE *)v11)
    {
      String = (_DWORD *)llvm::MDString::getString(v11);
      v14 = String;
      v15 = v13;
      switch(v13)
      {
        case 8uLL:
          if (!memcmp(String, "air.flat", v13))
          {
            v16 = *(_BYTE *)(a1 + 28) & 0xF9 | 4;
            goto LABEL_27;
          }
          break;
        case 9uLL:
        case 0xBuLL:
        case 0xDuLL:
        case 0xEuLL:
        case 0x10uLL:
          break;
        case 0xAuLL:
          if (!memcmp(String, "air.center", v13))
          {
            v16 = *(_BYTE *)(a1 + 28) & 0xC7 | 8;
            goto LABEL_27;
          }
          if (!memcmp(v14, "air.sample", v15))
          {
            v16 = *(_BYTE *)(a1 + 28) & 0xC7 | 0x18;
            goto LABEL_27;
          }
          break;
        case 0xCuLL:
          if (*(_QWORD *)String == 0x5F6772612E726961 && String[2] == 1701667182)
          {
            i = v5 + 2;
          }
          else if (!memcmp(String, "air.centroid", v13))
          {
            v16 = *(_BYTE *)(a1 + 28) & 0xC7 | 0x10;
            goto LABEL_27;
          }
          break;
        case 0xFuLL:
          if (!memcmp(String, "air.perspective", v13))
          {
            v16 = *(_BYTE *)(a1 + 28) & 0xF9 | 2;
            goto LABEL_27;
          }
          break;
        case 0x11uLL:
          if (!memcmp(String, "air.arg_type_name", v13))
          {
            i = v5 + 2;
            v18 = (const char *)llvm::MDString::getString(*(llvm::MDString **)(a2
                                                                             - 8 * *(unsigned int *)(a2 + 8)
                                                                             + 8 * (v5 + 2)));
            v19 = strlen(v18);
            *(_DWORD *)(a1 + 24) = dataTypeFromString(v18, v19);
          }
          break;
        case 0x12uLL:
          if (!memcmp(String, "air.no_perspective", v13))
          {
            v16 = *(_BYTE *)(a1 + 28) | 6;
            goto LABEL_27;
          }
          break;
        default:
          if (v13 == 26 && !memcmp(String, "air.interpolation_function", 0x1AuLL))
          {
            v16 = *(_BYTE *)(a1 + 28) & 0xC7 | 0x20;
LABEL_27:
            *(_BYTE *)(a1 + 28) = v16;
          }
          break;
      }
    }
    v5 = i;
  }
  result = *(unsigned int *)(a1 + 24);
  if ((_DWORD)result)
  {
    v21 = *(_BYTE *)(a1 + 28);
    goto LABEL_48;
  }
  v22 = *(_DWORD *)(a4 + 8);
  v23 = 1;
  if (a4 && *(_DWORD *)(a4 + 8) == 18)
  {
    v23 = *(_DWORD *)(a4 + 32);
    v22 = *(_DWORD *)(*(_QWORD *)(a4 + 24) + 8);
  }
  if (v22 == 13)
  {
    v25 = v22 >> 8;
    switch(v25)
    {
      case 8u:
        v24 = 45;
        goto LABEL_46;
      case 0x20u:
        v24 = 29;
        goto LABEL_46;
      case 0x10u:
        v24 = 37;
        goto LABEL_46;
    }
  }
  else
  {
    if (v22 == 2)
    {
      v24 = 3;
      goto LABEL_46;
    }
    if (!(_BYTE)v22)
    {
      v24 = 16;
LABEL_46:
      result = MTLDataTypeGetVectorDataType(v24, v23);
      *(_DWORD *)(a1 + 24) = result;
      goto LABEL_47;
    }
  }
  result = 0;
LABEL_47:
  v21 = *(_BYTE *)(a1 + 28) | 0x40;
  *(_BYTE *)(a1 + 28) = v21;
LABEL_48:
  v26 = v21 & 0x38;
  v27 = v21 & 6;
  if (v26)
    v28 = v27 == 0;
  else
    v28 = 1;
  if (v28)
  {
    result = MTLDataTypeGetComponentType(result);
    v29 = *(_BYTE *)(a1 + 28);
    if ((v29 & 0x38) == 0)
    {
      v29 = v29 & 0xC7 | 8;
      *(_BYTE *)(a1 + 28) = v29;
    }
    if ((_DWORD)result == 16 || (_DWORD)result == 3)
    {
      if ((v29 & 6) != 0)
        return result;
      v30 = 2;
    }
    else
    {
      if ((v29 & 6) != 0)
        return result;
      v30 = 4;
    }
    *(_BYTE *)(a1 + 28) = v29 & 0xF9 | v30;
  }
  return result;
}

void MTLFrameworkPass::attribute_name(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::size_type v4;
  int v5;
  std::string __str;
  size_t __idx;
  char v8;

  __idx = 0;
  v4 = std::string::find((const std::string *)a1, "generated(", 0, 0xAuLL);
  if (v4 == -1)
  {
    if (*(char *)(a1 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
    }
  }
  else
  {
    std::string::basic_string(&__str, (const std::string *)a1, v4 + 10, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v8);
    v5 = std::stoi(&__str, &__idx, 10);
    std::string::basic_string(a2, &__str, __idx, v5, (std::allocator<char> *)&v8);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_24101FA98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MTLFrameworkPass::findMatchingFragmentInput(char ***a1, _DWORD *a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  void *v18;
  std::string *p_p;
  void *__dst[2];
  uint64_t v21;
  std::string __p;
  int v23;
  void *__src;
  size_t __len[2];

  v9 = a3;
  if (*(_BYTE *)(a3 + 8) == 16)
    v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * a4);
  v23 = 0;
  __src = 0;
  memset(__len, 0, 13);
  MTLFrameworkPass::extractVaryingInfoFromMetadata((uint64_t)&v23, a5, 1u, v9);
  if (__src)
    std::string::basic_string[abi:ne180100](&__p, __src, __len[0]);
  else
    memset(&__p, 0, sizeof(__p));
  v12 = std::__tree<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>>>::find<std::string>(a7, (const void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (a7 + 8 == v12)
    return 0;
  v13 = *(unsigned int *)(v12 + 56);
  *a2 = v13;
  v14 = *a6;
  v15 = *(unsigned int *)(v14 + 32 * v13 + 24);
  if ((__len[1] & 0x4000000000) != 0)
    LODWORD(v15) = MTLDataTypeGetSignedType(v15);
  if (LODWORD(__len[1]) == (_DWORD)v15)
    return 1;
  v17 = v14 + 32 * v13;
  v18 = *(void **)(v17 + 8);
  if (v18)
  {
    std::string::basic_string[abi:ne180100](__dst, v18, *(_QWORD *)(v17 + 16));
  }
  else
  {
    __dst[0] = 0;
    __dst[1] = 0;
    v21 = 0;
  }
  MTLFrameworkPass::attribute_name((uint64_t)__dst, &__p);
  if (SHIBYTE(v21) < 0)
    operator delete(__dst[0]);
  p_p = &__p;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  MTLCompilerErrorObject::setFormattedErrorMessage(*a1, "Link failed: The type of fragment input %s does not match the type of the corresponding vertex shader output", (const char *)p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 2;
}

void sub_24101FC30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MTLFrameworkPass::checkFragmentRenderTargetArrayIndex(MTLCompilerErrorObject **a1, int a2, int a3)
{
  const char *v4;

  if (!a3)
    return 1;
  if (a2)
  {
    if (a2 == a3)
      return 1;
    v4 = "Link failed: the render_target_array_index has a different type in the fragment shader and the vertex shader";
  }
  else
  {
    v4 = "Link failed: fragment shader is reading the render_target_array_index but the vertex shader does not write it";
  }
  MTLCompilerErrorObject::setErrorMessage(*a1, v4);
  return 0;
}

void MTLFrameworkPass::appendBufferMetadata(llvm::Type *a1, uint64_t **a2)
{
  uint64_t **v4;
  llvm::LLVMContext *v5;
  llvm::LLVMContext *v6;
  uint64_t Impl;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;

  v4 = a2 + 1;
  llvm::Type::getInt32Ty(a1, (llvm::LLVMContext *)a2);
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  llvm::MDString::get();
  llvm::MDString::get();
  llvm::Type::getInt32Ty(a1, v5);
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  llvm::Type::getInt32Ty(a1, v6);
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  llvm::MDString::get();
  llvm::MDString::get();
  llvm::MDString::get();
  llvm::MDString::get();
  llvm::MDString::get();
  Impl = llvm::MDTuple::getImpl();
  v8 = *v4;
  v9 = (unint64_t)a2[2];
  if ((unint64_t)*v4 >= v9)
  {
    v11 = v8 - *a2;
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
    v12 = v9 - (_QWORD)*a2;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)(a2 + 2), v14);
    else
      v15 = 0;
    v16 = (uint64_t *)&v15[8 * v11];
    v17 = &v15[8 * v14];
    *v16 = Impl;
    v10 = v16 + 1;
    v19 = *a2;
    v18 = (char *)a2[1];
    if (v18 != (char *)*a2)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *--v16 = v20;
      }
      while (v18 != (char *)v19);
      v18 = (char *)*a2;
    }
    *a2 = v16;
    a2[1] = v10;
    a2[2] = (uint64_t *)v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v8 = Impl;
    v10 = v8 + 1;
  }
  a2[1] = v10;
}

void MTLFrameworkPass::addRequiredBuiltInsToBuiltInList(char **a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;

  v4 = *a3;
  v3 = a3[1];
  if (v3 != *a3)
  {
    v8 = 0;
    v9 = (uint64_t)(a1 + 2);
    do
    {
      v10 = (char *)(v4 + v8);
      v11 = *(unsigned __int8 *)(v4 + v8);
      if (*(_BYTE *)(v4 + v8))
      {
        if ((v8 >> 1) >= 5u)
          abort();
        v12 = *(char *)(*a2 + (char)v8);
        v13 = *(unsigned int *)&asc_24105AB48[4 * (char)v8];
        v14 = *a1;
        if ((_DWORD)v12 == -1)
        {
          *(_BYTE *)(*a2 + (char)v8) = (*((_DWORD *)a1 + 2) - (_DWORD)v14) >> 3;
          v19 = (uint64_t *)a1[1];
          v18 = (unint64_t)a1[2];
          if ((unint64_t)v19 >= v18)
          {
            v21 = ((char *)v19 - *a1) >> 3;
            if ((unint64_t)(v21 + 1) >> 61)
              std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
            v22 = v18 - (_QWORD)*a1;
            v23 = v22 >> 2;
            if (v22 >> 2 <= (unint64_t)(v21 + 1))
              v23 = v21 + 1;
            if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
              v24 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v24 = v23;
            if (v24)
              v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>(v9, v24);
            else
              v25 = 0;
            v26 = &v25[8 * v21];
            *(_QWORD *)v26 = (v11 << 8) | (v13 << 32) | v8;
            v20 = v26 + 8;
            v28 = *a1;
            v27 = a1[1];
            if (v27 != *a1)
            {
              do
              {
                v29 = *((_QWORD *)v27 - 1);
                v27 -= 8;
                *((_QWORD *)v26 - 1) = v29;
                v26 -= 8;
              }
              while (v27 != v28);
              v27 = *a1;
            }
            *a1 = v26;
            a1[1] = v20;
            a1[2] = &v25[8 * v24];
            if (v27)
              operator delete(v27);
          }
          else
          {
            *v19 = (v11 << 8) | (v13 << 32) | v8;
            v20 = (char *)(v19 + 1);
          }
          a1[1] = v20;
          v4 = *a3;
          v3 = a3[1];
        }
        else
        {
          v15 = &v14[8 * v12];
          v17 = v15[1];
          v16 = v15 + 1;
          if (v17 >= v11)
            v10 = v16;
          *v16 = *v10;
          *(_DWORD *)(v16 + 3) = v13;
        }
      }
      ++v8;
    }
    while (v8 < v3 - v4);
  }
}

uint64_t MTLFrameworkPass::getLLVMVectorType(llvm::Type *a1, llvm::LLVMContext *a2, unsigned int a3)
{
  uint64_t result;

  if ((int)a2 <= 32)
  {
    switch((_DWORD)a2)
    {
      case 3:
        result = llvm::Type::getFloatTy(a1, a2);
        break;
      case 0x10:
        result = llvm::Type::getHalfTy(a1, a2);
        break;
      case 0x1D:
        goto LABEL_9;
      default:
        goto LABEL_19;
    }
  }
  else
  {
    if ((int)a2 <= 40)
    {
      if ((_DWORD)a2 != 33)
      {
        if ((_DWORD)a2 != 37)
LABEL_19:
          abort();
        goto LABEL_13;
      }
LABEL_9:
      result = llvm::Type::getInt32Ty(a1, a2);
      goto LABEL_16;
    }
    if ((_DWORD)a2 == 41)
    {
LABEL_13:
      result = llvm::Type::getInt16Ty(a1, a2);
      goto LABEL_16;
    }
    if ((_DWORD)a2 != 53)
      goto LABEL_19;
    result = llvm::Type::getInt1Ty(a1, a2);
  }
LABEL_16:
  if (a3 >= 2)
    return llvm::VectorType::get();
  return result;
}

uint64_t MTLFrameworkPass::addBuiltInParameter(llvm::Type *a1, unint64_t a2, char **a3, void **a4, uint64_t a5, int a6, int a7)
{
  int v7;
  int v8;
  char *v12;
  llvm::Type *v13;
  char *v14;
  char *v15;
  uint64_t v18;
  unsigned int v19;
  char *v20;
  uint64_t String;
  unint64_t v23;
  const void *v24;
  size_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t *v48;
  char *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t *v59;
  char *v60;
  uint64_t *v61;
  uint64_t v62;
  int ComponentType;
  llvm::LLVMContext *ShaderTypeName;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t *v72;
  char *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t Impl;
  unint64_t v77;
  uint64_t *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  uint64_t *v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t *__p;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t *v95;

  v7 = a7;
  v8 = a6;
  v12 = (char *)a2;
  v13 = a1;
  v14 = *a3;
  v15 = a3[1];
  if (v15 == *a3)
  {
    v18 = 0;
    v20 = a3[1];
  }
  else
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (*(_QWORD *)&v14[8 * v18] == a5)
      {
        String = llvm::MDString::getString(*(llvm::MDString **)(*((_QWORD *)*a4 + v18)
                                                              - 8 * *(unsigned int *)(*((_QWORD *)*a4 + v18) + 8)
                                                              + 8));
        v23 = a2;
        if (v12)
        {
          v24 = (const void *)String;
          v25 = strlen(v12);
          if (v23 == v25 && (!v25 || !memcmp(v24, v12, v25)))
            return v18;
        }
        else if (!a2)
        {
          return v18;
        }
      }
      v18 = v19;
      v14 = *a3;
      v20 = a3[1];
    }
    while ((v20 - *a3) >> 3 > (unint64_t)v19++);
    v18 = (v20 - *a3) >> 3;
    v15 = *a3;
    v7 = a7;
    v8 = a6;
    v13 = a1;
  }
  v26 = (unint64_t)a3[2];
  if ((unint64_t)v20 >= v26)
  {
    if ((unint64_t)(v18 + 1) >> 61)
      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
    v28 = v26 - (_QWORD)v15;
    v29 = v28 >> 2;
    if (v28 >> 2 <= (unint64_t)(v18 + 1))
      v29 = v18 + 1;
    if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
      a2 = 0x1FFFFFFFFFFFFFFFLL;
    else
      a2 = v29;
    if (a2)
      v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)(a3 + 2), a2);
    else
      v30 = 0;
    v31 = &v30[8 * v18];
    v32 = &v30[8 * a2];
    *(_QWORD *)v31 = a5;
    v27 = v31 + 8;
    v34 = *a3;
    v33 = a3[1];
    if (v33 != *a3)
    {
      do
      {
        v35 = *((_QWORD *)v33 - 1);
        v33 -= 8;
        *((_QWORD *)v31 - 1) = v35;
        v31 -= 8;
      }
      while (v33 != v34);
      v33 = *a3;
    }
    *a3 = v31;
    a3[1] = v27;
    a3[2] = v32;
    if (v33)
      operator delete(v33);
  }
  else
  {
    *(_QWORD *)v20 = a5;
    v27 = v20 + 8;
  }
  a3[1] = v27;
  v95 = 0;
  llvm::Type::getInt32Ty(v13, (llvm::LLVMContext *)a2);
  llvm::ConstantInt::get();
  v36 = llvm::ValueAsMetadata::get();
  v37 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v95, 1uLL);
  *v37 = v36;
  v39 = v37 + 1;
  __p = v37;
  v95 = &v37[v38];
  v93 = v39;
  v41 = llvm::MDString::get(v13, (llvm::LLVMContext *)v12, v40);
  v42 = v41;
  if (v39 >= v95)
  {
    v44 = v39 - __p;
    if ((unint64_t)(v44 + 1) >> 61)
      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
    v45 = ((char *)v95 - (char *)__p) >> 2;
    if (v45 <= v44 + 1)
      v45 = v44 + 1;
    if ((unint64_t)((char *)v95 - (char *)__p) >= 0x7FFFFFFFFFFFFFF8)
      v46 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v46 = v45;
    if (v46)
      v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v95, v46);
    else
      v47 = 0;
    v48 = (uint64_t *)&v47[8 * v44];
    v49 = &v47[8 * v46];
    *v48 = v42;
    v43 = v48 + 1;
    v50 = v93;
    if (v93 != __p)
    {
      do
      {
        v51 = *--v50;
        *--v48 = v51;
      }
      while (v50 != __p);
      v50 = __p;
    }
    __p = v48;
    v95 = (uint64_t *)v49;
    if (v50)
      operator delete(v50);
  }
  else
  {
    *v39 = v41;
    v43 = v39 + 1;
  }
  if (v8)
  {
    v52 = llvm::MDString::get();
    v53 = v52;
    if (v43 >= v95)
    {
      v55 = v43 - __p;
      if ((unint64_t)(v55 + 1) >> 61)
        std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
      v56 = ((char *)v95 - (char *)__p) >> 2;
      if (v56 <= v55 + 1)
        v56 = v55 + 1;
      if ((unint64_t)((char *)v95 - (char *)__p) >= 0x7FFFFFFFFFFFFFF8)
        v57 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v57 = v56;
      if (v57)
        v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v95, v57);
      else
        v58 = 0;
      v59 = (uint64_t *)&v58[8 * v55];
      v60 = &v58[8 * v57];
      *v59 = v53;
      v54 = v59 + 1;
      v61 = v43;
      if (v43 != __p)
      {
        do
        {
          v62 = *--v61;
          *--v59 = v62;
        }
        while (v61 != __p);
        v61 = __p;
      }
      __p = v59;
      v95 = (uint64_t *)v60;
      if (v61)
        operator delete(v61);
    }
    else
    {
      *v43 = v52;
      v54 = v43 + 1;
    }
    v94 = v54;
    ComponentType = MTLDataTypeGetComponentType(v8);
    ShaderTypeName = (llvm::LLVMContext *)MTLDataTypeGetShaderTypeName(ComponentType, v7);
    v66 = llvm::MDString::get(v13, ShaderTypeName, v65);
    v67 = v66;
    if (v94 >= v95)
    {
      v68 = v94 - __p;
      if ((unint64_t)(v68 + 1) >> 61)
        std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
      v69 = ((char *)v95 - (char *)__p) >> 2;
      if (v69 <= v68 + 1)
        v69 = v68 + 1;
      if ((unint64_t)((char *)v95 - (char *)__p) >= 0x7FFFFFFFFFFFFFF8)
        v70 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v70 = v69;
      if (v70)
        v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v95, v70);
      else
        v71 = 0;
      v72 = (uint64_t *)&v71[8 * v68];
      v73 = &v71[8 * v70];
      *v72 = v67;
      v74 = v94;
      if (v94 != __p)
      {
        do
        {
          v75 = *--v74;
          *--v72 = v75;
        }
        while (v74 != __p);
        v74 = __p;
      }
      __p = v72;
      v95 = (uint64_t *)v73;
      if (v74)
        operator delete(v74);
    }
    else
    {
      *v94 = v66;
    }
  }
  Impl = llvm::MDTuple::getImpl();
  v77 = (unint64_t)a4[2];
  v78 = (uint64_t *)a4[1];
  if ((unint64_t)v78 >= v77)
  {
    v80 = ((char *)v78 - (_BYTE *)*a4) >> 3;
    if ((unint64_t)(v80 + 1) >> 61)
      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
    v81 = v77 - (_QWORD)*a4;
    v82 = v81 >> 2;
    if (v81 >> 2 <= (unint64_t)(v80 + 1))
      v82 = v80 + 1;
    if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8)
      v83 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v83 = v82;
    if (v83)
      v84 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)(a4 + 2), v83);
    else
      v84 = 0;
    v85 = (uint64_t *)&v84[8 * v80];
    v86 = &v84[8 * v83];
    *v85 = Impl;
    v79 = v85 + 1;
    v88 = (char *)*a4;
    v87 = (char *)a4[1];
    if (v87 != *a4)
    {
      do
      {
        v89 = *((_QWORD *)v87 - 1);
        v87 -= 8;
        *--v85 = v89;
      }
      while (v87 != v88);
      v87 = (char *)*a4;
    }
    *a4 = v85;
    a4[1] = v79;
    a4[2] = v86;
    if (v87)
      operator delete(v87);
  }
  else
  {
    *v78 = Impl;
    v79 = v78 + 1;
  }
  a4[1] = v79;
  if (__p)
    operator delete(__p);
  return v18;
}

void sub_241020744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MTLFrameworkPass::callFunction(uint64_t a1, uint64_t a2, char *__s, uint64_t a4, uint64_t **a5, uint64_t a6, uint64_t a7)
{
  uint64_t Function;
  char *v14;
  uint64_t **v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t **v30;
  _QWORD v31[4];
  __int16 v32;
  void *__p;
  char *v34;
  char *v35;

  if (__s)
    strlen(__s);
  Function = llvm::Module::getFunction();
  if (!Function)
  {
    __p = 0;
    v34 = 0;
    v35 = 0;
    if (a6)
    {
      v29 = a7;
      v30 = a5;
      v14 = 0;
      v15 = &a5[a6];
      do
      {
        v16 = **a5;
        if (v14 >= v35)
        {
          v17 = (v14 - (_BYTE *)__p) >> 3;
          if ((unint64_t)(v17 + 1) >> 61)
            std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
          v18 = (v35 - (_BYTE *)__p) >> 2;
          if (v18 <= v17 + 1)
            v18 = v17 + 1;
          if ((unint64_t)(v35 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
            v19 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v19 = v18;
          if (v19)
            v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v35, v19);
          else
            v20 = 0;
          v21 = &v20[8 * v17];
          *(_QWORD *)v21 = v16;
          v14 = v21 + 8;
          v23 = (char *)__p;
          v22 = v34;
          if (v34 != __p)
          {
            do
            {
              v24 = *((_QWORD *)v22 - 1);
              v22 -= 8;
              *((_QWORD *)v21 - 1) = v24;
              v21 -= 8;
            }
            while (v22 != v23);
            v22 = (char *)__p;
          }
          __p = v21;
          v34 = v14;
          v35 = &v20[8 * v19];
          if (v22)
            operator delete(v22);
        }
        else
        {
          *(_QWORD *)v14 = v16;
          v14 += 8;
        }
        v34 = v14;
        ++a5;
      }
      while (a5 != v15);
      a5 = v30;
      a7 = v29;
    }
    v25 = llvm::FunctionType::get();
    v26 = 1;
    HIBYTE(v32) = 1;
    if (*__s)
    {
      v31[0] = __s;
      v26 = 3;
    }
    LOBYTE(v32) = v26;
    Function = llvm::Function::Create(v25, 0, (uint64_t)v31, a1);
    *(_QWORD *)(Function + 112) = a7;
    if (__p)
    {
      v34 = (char *)__p;
      operator delete(__p);
    }
  }
  v27 = *(_QWORD *)(Function + 24);
  v32 = 257;
  return llvm::IRBuilderBase::CreateCall(a2, v27, Function, (uint64_t)a5, a6, (uint64_t)v31, 0);
}

void sub_241020978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MTLIRBuilder::initTypeCache(MTLIRBuilder *this, llvm::LLVMContext *a2)
{
  llvm::LLVMContext *v4;
  llvm::LLVMContext *v5;
  llvm::LLVMContext *v6;
  llvm::LLVMContext *v7;
  uint64_t result;

  *((_QWORD *)this + 17) = llvm::Type::getInt64Ty(a2, a2);
  *((_QWORD *)this + 18) = llvm::Type::getInt32Ty(a2, v4);
  *((_QWORD *)this + 19) = llvm::Type::getInt16Ty(a2, v5);
  *((_QWORD *)this + 20) = llvm::Type::getInt8Ty(a2, v6);
  *((_QWORD *)this + 21) = llvm::Type::getInt1Ty(a2, v7);
  result = llvm::Type::getInt8PtrTy(a2, 0);
  *((_QWORD *)this + 22) = result;
  return result;
}

llvm::Instruction *MTLIRBuilder::CreateNSWFoldMul(MTLIRBuilder *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4)
{
  BOOL v4;
  llvm::Value *v5;
  llvm::Value *v6;
  BOOL v7;
  llvm::Value *v8;
  llvm::Value *v9;
  BOOL v10;
  uint64_t v11;

  if (a2)
    v4 = *((_BYTE *)a2 + 16) == 16;
  else
    v4 = 0;
  if (v4)
    v5 = a2;
  else
    v5 = 0;
  if (v4)
    v6 = 0;
  else
    v6 = a2;
  if (a3)
    v7 = *((_BYTE *)a3 + 16) == 16;
  else
    v7 = 0;
  if (v7)
    v8 = a3;
  else
    v8 = v5;
  if (v7)
    v9 = v6;
  else
    v9 = a3;
  if (v9)
    v10 = v8 == 0;
  else
    v10 = 1;
  if (v10)
    return llvm::IRBuilderBase::CreateMul(this, a2, a3, a4, 0, 1);
  if (*((_DWORD *)v8 + 8) > 0x40u)
  {
    v11 = **((_QWORD **)v8 + 3);
    if (v11)
    {
LABEL_25:
      if (v11 == 1)
        return v9;
      return llvm::IRBuilderBase::CreateMul(this, a2, a3, a4, 0, 1);
    }
  }
  else
  {
    v11 = *((_QWORD *)v8 + 3);
    if (v11)
      goto LABEL_25;
  }
  return (llvm::Instruction *)llvm::ConstantInt::get();
}

llvm::Instruction *MTLIRBuilder::CreateNSWFoldAdd(MTLIRBuilder *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4)
{
  BOOL v4;
  llvm::Value *v5;
  llvm::Value *v6;
  BOOL v7;
  llvm::Value *v8;
  llvm::Value *v9;
  BOOL v10;
  _QWORD *v11;

  if (a2)
    v4 = *((_BYTE *)a2 + 16) == 16;
  else
    v4 = 0;
  if (v4)
    v5 = a2;
  else
    v5 = 0;
  if (v4)
    v6 = 0;
  else
    v6 = a2;
  if (a3)
    v7 = *((_BYTE *)a3 + 16) == 16;
  else
    v7 = 0;
  if (v7)
    v8 = a3;
  else
    v8 = v5;
  if (v7)
    v9 = v6;
  else
    v9 = a3;
  if (v9)
    v10 = v8 == 0;
  else
    v10 = 1;
  if (v10)
    return llvm::IRBuilderBase::CreateAdd(this, a2, a3, a4, 0, 1);
  v11 = (_QWORD *)((char *)v8 + 24);
  if (*((_DWORD *)v8 + 8) >= 0x41u)
    v11 = (_QWORD *)*v11;
  if (*v11)
    return llvm::IRBuilderBase::CreateAdd(this, a2, a3, a4, 0, 1);
  else
    return v9;
}

uint64_t MTLIRBuilder::CreateAtomicFetchAdd(MTLIRBuilder *this, llvm::Type **PointerCast, llvm::Value *a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  llvm::Type *v9;
  llvm::Type *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[32];
  __int16 v15;
  uint64_t v16[4];
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 6) + 56) + 40);
  v7 = (uint64_t *)((char *)this + 144);
  v16[0] = llvm::PointerType::get();
  v8 = getOrInsertFunction<char const(&)[28],llvm::Type *&,llvm::PointerType *,llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&>(v6, "air.atomic.global.add.u.i32", v7, v16, v7, v7, v7, v7 + 3);
  v9 = *PointerCast;
  if (v9 != (llvm::Type *)llvm::PointerType::get())
  {
    v10 = (llvm::Type *)llvm::PointerType::get();
    LOWORD(v17) = 257;
    PointerCast = llvm::IRBuilderBase::CreatePointerCast(this, PointerCast, v10, (const llvm::Twine *)v16);
  }
  if (v8)
    v11 = *(_QWORD *)(v8 + 24);
  else
    v11 = 0;
  v16[0] = (uint64_t)PointerCast;
  v16[1] = (uint64_t)a3;
  v16[2] = llvm::ConstantInt::get();
  v16[3] = llvm::ConstantInt::get();
  v17 = llvm::ConstantInt::get();
  v15 = 257;
  v12 = llvm::IRBuilderBase::CreateCall((uint64_t)this, v11, v8, (uint64_t)v16, 5, (uint64_t)v14, 0);
  *(_WORD *)(v12 + 18) = *(_WORD *)(v12 + 18) & 0xFFFC | 1;
  llvm::Value::getContext((llvm::Value *)v12);
  *(_QWORD *)(v12 + 64) = llvm::AttributeList::addAttributeAtIndex();
  llvm::Value::getContext((llvm::Value *)v12);
  *(_QWORD *)(v12 + 64) = llvm::AttributeList::addAttributeAtIndex();
  return v12;
}

uint64_t getOrInsertFunction<char const(&)[28],llvm::Type *&,llvm::PointerType *,llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&>(uint64_t a1, char *__s, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  size_t v16;
  uint64_t v17;
  uint64_t result;

  v16 = strlen(__s);
  llvm::Module::getOrInsertFunction<llvm::PointerType *,llvm::Type *,llvm::Type *,llvm::Type *,llvm::Type *>(a1, (uint64_t)__s, v16, 0, *a3, *a4, *a5, *a6, *a7, *a8);
  result = v17;
  if (*(_BYTE *)(v17 + 16) == 5)
    return *(_QWORD *)(v17 - 32 * (*(_DWORD *)(v17 + 20) & 0x7FFFFFF));
  return result;
}

llvm::Type **llvm::IRBuilderBase::CreatePointerCast(llvm::IRBuilderBase *this, llvm::Type **a2, llvm::Type *a3, const llvm::Twine *a4)
{
  BOOL v6;
  uint64_t PointerCast;

  if (*a2 != a3)
  {
    if (*((unsigned __int8 *)a2 + 16) > 0x14u)
    {
      PointerCast = llvm::CastInst::CreatePointerCast();
      return (llvm::Type **)llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, PointerCast, (uint64_t)a4);
    }
    else
    {
      a2 = (llvm::Type **)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 232))(*((_QWORD *)this + 9));
      if (a2)
        v6 = *((unsigned __int8 *)a2 + 16) >= 0x1Cu;
      else
        v6 = 0;
      if (v6)
        return (llvm::Type **)llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, (uint64_t)a2, (uint64_t)a4);
    }
  }
  return a2;
}

uint64_t MTLIRBuilder::CreateAtomicFetchOr(MTLIRBuilder *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[32];
  __int16 v14;
  uint64_t v15[6];

  v15[5] = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 6) + 56) + 40);
  v7 = (uint64_t *)((char *)this + 144);
  v15[0] = llvm::PointerType::get();
  v8 = getOrInsertFunction<char const(&)[28],llvm::Type *&,llvm::PointerType *,llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&>(v6, "air.atomic.global.or.s.i32", v7, v15, v7, v7, v7, v7 + 3);
  v9 = v8;
  if (v8)
    v10 = *(_QWORD *)(v8 + 24);
  else
    v10 = 0;
  v15[0] = (uint64_t)a2;
  v15[1] = (uint64_t)a3;
  v15[2] = llvm::ConstantInt::get();
  v15[3] = llvm::ConstantInt::get();
  v15[4] = llvm::ConstantInt::get();
  v14 = 257;
  v11 = llvm::IRBuilderBase::CreateCall((uint64_t)this, v10, v9, (uint64_t)v15, 5, (uint64_t)v13, 0);
  *(_WORD *)(v11 + 18) = *(_WORD *)(v11 + 18) & 0xFFFC | 1;
  llvm::Value::getContext((llvm::Value *)v11);
  *(_QWORD *)(v11 + 64) = llvm::AttributeList::addAttributeAtIndex();
  llvm::Value::getContext((llvm::Value *)v11);
  *(_QWORD *)(v11 + 64) = llvm::AttributeList::addAttributeAtIndex();
  return v11;
}

uint64_t MTLIRBuilder::CreateClamp(MTLIRBuilder *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[32];
  __int16 v13;
  _QWORD v14[4];

  v14[3] = *MEMORY[0x24BDAC8D0];
  v8 = getOrInsertFunction<char const(&)[16],llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&>(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 6) + 56) + 40), "air.clamp.u.i64", (uint64_t *)this + 17, (uint64_t *)this + 17, (uint64_t *)this + 17, (uint64_t *)this + 17);
  if (v8)
    v9 = *(_QWORD *)(v8 + 24);
  else
    v9 = 0;
  v14[0] = a2;
  v14[1] = a3;
  v14[2] = a4;
  v13 = 257;
  v10 = llvm::IRBuilderBase::CreateCall((uint64_t)this, v9, v8, (uint64_t)v14, 3, (uint64_t)v12, 0);
  *(_WORD *)(v10 + 18) = *(_WORD *)(v10 + 18) & 0xFFFC | 1;
  llvm::Value::getContext((llvm::Value *)v10);
  *(_QWORD *)(v10 + 64) = llvm::AttributeList::addAttributeAtIndex();
  llvm::Value::getContext((llvm::Value *)v10);
  *(_QWORD *)(v10 + 64) = llvm::AttributeList::addAttributeAtIndex();
  return v10;
}

uint64_t getOrInsertFunction<char const(&)[16],llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&>(uint64_t a1, char *__s, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  size_t v12;
  uint64_t v13;
  uint64_t result;

  v12 = strlen(__s);
  llvm::Module::getOrInsertFunction<llvm::Type *,llvm::Type *,llvm::Type *>(a1, (uint64_t)__s, v12, 0, *a3, *a4, *a5, *a6);
  result = v13;
  if (*(_BYTE *)(v13 + 16) == 5)
    return *(_QWORD *)(v13 - 32 * (*(_DWORD *)(v13 + 20) & 0x7FFFFFF));
  return result;
}

llvm::Value *MTLIRBuilder::CreateAddSat(MTLIRBuilder *this, llvm::Value *a2, llvm::Value *a3)
{
  llvm::Value *v4;
  llvm::Type **v6;
  uint64_t Function;
  uint64_t v8;
  unsigned int v9;
  int v10;
  llvm::Constant *v11;
  uint64_t v12;
  llvm::Constant *v13;
  uint64_t v14;
  uint64_t v15;
  llvm::Value **v16;
  llvm::Value *v17;
  llvm::Value *v18;
  llvm::Value *v19;
  llvm::Value *v20;
  _BOOL4 v21;
  uint64_t v22;
  llvm::Value **v23;
  llvm::Value *v24;
  llvm::Value *v25;
  llvm::Value *v26;
  llvm::Value *v27;
  _BOOL4 v28;
  uint64_t v29;
  _QWORD v31[2];
  _QWORD v32[4];
  __int16 v33;
  uint64_t v34;

  v4 = a2;
  v34 = *MEMORY[0x24BDAC8D0];
  v6 = *(llvm::Type ***)(*(_QWORD *)(*((_QWORD *)this + 6) + 56) + 40);
  llvm::Type::getInt32Ty(*v6, a2);
  Function = llvm::Module::getFunction();
  if (!Function)
  {
    v8 = llvm::FunctionType::get();
    v33 = 261;
    v32[0] = "air.add_sat.u.i32";
    v32[1] = 17;
    Function = llvm::Function::Create(v8, 0, (uint64_t)v32, (uint64_t)v6);
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
  }
  llvm::Module::getDataLayout((llvm::Module *)v6);
  v9 = *((unsigned __int8 *)v4 + 16);
  v10 = *((unsigned __int8 *)a3 + 16);
  if (!v4 || (v11 = v4, v9 != 16))
  {
    if (v9 >= 0x1C && (v12 = llvm::ConstantFoldInstruction()) != 0)
    {
      if (*(_BYTE *)(v12 + 16) == 16)
        v11 = (llvm::Constant *)v12;
      else
        v11 = 0;
    }
    else
    {
      v11 = 0;
    }
  }
  v13 = a3;
  if (v10 == 16)
    goto LABEL_17;
  if (*((unsigned __int8 *)a3 + 16) >= 0x1Cu)
  {
    v14 = llvm::ConstantFoldInstruction();
    if (v14)
    {
      if (*(_BYTE *)(v14 + 16) == 16)
        v13 = (llvm::Constant *)v14;
      else
        v13 = 0;
LABEL_17:
      if (v11 && v13)
        return (llvm::Value *)llvm::ConstantInt::get();
      if (v11)
        goto LABEL_23;
      if (v13)
      {
        if ((llvm::Constant::isZeroValue(v13) & 1) != 0)
          return v4;
        if (v4 && *((_BYTE *)v4 + 16) == 84)
        {
          v22 = *((_QWORD *)v4 - 4);
          if (!v22 || *(_BYTE *)(v22 + 16) || *(_QWORD *)(v22 + 24) != *((_QWORD *)v4 + 9))
            v22 = 0;
          if (v22 == Function)
          {
            v23 = (llvm::Value **)((char *)v4 - 32 * (*((_DWORD *)v4 + 5) & 0x7FFFFFF));
            v24 = *v23;
            v25 = v23[4];
            if (*((_BYTE *)*v23 + 16) == 16)
              v26 = *v23;
            else
              v26 = 0;
            if (*((_BYTE *)v25 + 16) == 16)
              v27 = v25;
            else
              v27 = 0;
            if (v26)
              v27 = v26;
            if (v27)
            {
              v28 = v26 == 0;
              a3 = (llvm::Value *)llvm::ConstantInt::get();
              if (v28)
                v4 = v24;
              else
                v4 = v25;
            }
          }
        }
      }
      goto LABEL_64;
    }
  }
  if (v11)
  {
LABEL_23:
    if ((llvm::Constant::isZeroValue(v11) & 1) != 0)
      return a3;
    if (*((_BYTE *)a3 + 16) == 84)
    {
      v15 = *((_QWORD *)a3 - 4);
      if (!v15 || *(_BYTE *)(v15 + 16) || *(_QWORD *)(v15 + 24) != *((_QWORD *)a3 + 9))
        v15 = 0;
      if (v15 == Function)
      {
        v16 = (llvm::Value **)((char *)a3 - 32 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF));
        v17 = *v16;
        v18 = v16[4];
        if (*((_BYTE *)*v16 + 16) == 16)
          v19 = *v16;
        else
          v19 = 0;
        if (*((_BYTE *)v18 + 16) == 16)
          v20 = v18;
        else
          v20 = 0;
        if (v19)
          v20 = v19;
        if (v20)
        {
          v21 = v19 == 0;
          v4 = (llvm::Value *)llvm::ConstantInt::get();
          if (v21)
            a3 = v17;
          else
            a3 = v18;
        }
      }
    }
  }
LABEL_64:
  if (Function)
    v29 = *(_QWORD *)(Function + 24);
  else
    v29 = 0;
  v31[0] = v4;
  v31[1] = a3;
  v33 = 257;
  v4 = (llvm::Value *)llvm::IRBuilderBase::CreateCall((uint64_t)this, v29, Function, (uint64_t)v31, 2, (uint64_t)v32, 0);
  *((_WORD *)v4 + 9) = *((_WORD *)v4 + 9) & 0xFFFC | 1;
  llvm::Value::getContext(v4);
  *((_QWORD *)v4 + 8) = llvm::AttributeList::addAttributeAtIndex();
  llvm::Value::getContext(v4);
  *((_QWORD *)v4 + 8) = llvm::AttributeList::addAttributeAtIndex();
  return v4;
}

uint64_t MTLIRBuilder::CreateBadAccessCall(llvm::Constant **this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, llvm::Value *a5, llvm::Value *a6, llvm::Value *a7, llvm::Value *a8, llvm::Value *a9, llvm::Value *a10)
{
  llvm::Value *NullValue;
  uint64_t inserted;
  uint64_t v20;
  llvm::Value *v21;
  uint64_t result;
  _BYTE v23[32];
  __int16 v24;
  _QWORD v25[10];

  NullValue = a10;
  v25[9] = *MEMORY[0x24BDAC8D0];
  if (!a10)
    NullValue = (llvm::Value *)llvm::Constant::getNullValue(this[18], a2);
  inserted = MTLIRBuilder::getOrInsertBadAccessFunction((MTLIRBuilder *)this, *(llvm::Module **)(*((_QWORD *)this[6] + 7) + 40));
  if (inserted)
    v20 = *(_QWORD *)(inserted + 24);
  else
    v20 = 0;
  v25[0] = a2;
  v25[1] = a3;
  v25[2] = a4;
  v25[3] = a5;
  v25[4] = a6;
  v25[5] = a7;
  v25[6] = a8;
  v25[7] = a9;
  v25[8] = NullValue;
  v24 = 257;
  v21 = (llvm::Value *)llvm::IRBuilderBase::CreateCall((uint64_t)this, v20, inserted, (uint64_t)v25, 9, (uint64_t)v23, 0);
  llvm::Value::getContext(v21);
  *((_QWORD *)v21 + 8) = llvm::AttributeList::addAttributeAtIndex();
  llvm::Value::getContext(v21);
  result = llvm::AttributeList::addAttributeAtIndex();
  *((_QWORD *)v21 + 8) = result;
  return result;
}

uint64_t MTLIRBuilder::getOrInsertBadAccessFunction(MTLIRBuilder *this, llvm::Module *a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t VoidTy;

  VoidTy = llvm::Type::getVoidTy(*((llvm::Type **)this + 8), a2);
  v7 = llvm::PointerType::get();
  v6 = llvm::PointerType::get();
  v4 = getOrInsertFunction<char const(&)[16],llvm::Type *,llvm::PointerType *,llvm::PointerType *,llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&>((uint64_t)a2, "mtl.bad_access", &VoidTy, &v7, &v6, (uint64_t *)this + 22, (_QWORD *)this + 17, (_QWORD *)this + 17, (_QWORD *)this + 19, (_QWORD *)this + 19, (uint64_t *)this + 18, (uint64_t *)this + 18);
  llvm::GlobalObject::setSection();
  return v4;
}

uint64_t MTLIRBuilder::CreateIsNullTextureCall(MTLIRBuilder *this, llvm::Value **a2)
{
  llvm::Value *BitOrPointerCast;
  uint64_t Name;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  const char *v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  llvm::Type *v18;
  uint64_t v19;
  BOOL v25;
  BOOL v28;
  uint64_t v30;
  int v31;
  uint64_t v39;
  uint64_t v40;
  int v41;
  __n128 v44[2];
  __int16 v45;
  uint64_t TypeByName;
  __n128 v47;
  _QWORD v48[2];

  BitOrPointerCast = (llvm::Value *)a2;
  v48[1] = *MEMORY[0x24BDAC8D0];
  Name = llvm::Value::getName(a2[3]);
  v6 = 12;
  if (v5 < 0xC)
    v6 = v5;
  v47.n128_u64[0] = Name + v6;
  v47.n128_u64[1] = v5 - v6;
  llvm::StringRef::split(&v47, 1, v44);
  v7 = v44[0].n128_u64[1];
  v8 = v44[0].n128_u64[1] - 5;
  if (v44[0].n128_u64[1] < 5)
    goto LABEL_4;
  if (v44[0].n128_u64[1] < v8)
    v8 = v44[0].n128_u64[1];
  if (!(*(_DWORD *)(v44[0].n128_u64[0] + v44[0].n128_u64[1] - 5) ^ 0x6172675F | *(unsigned __int8 *)(v44[0].n128_u64[0] + v44[0].n128_u64[1] - 1) ^ 0x64))
    v7 = v8;
  if (v7 >= 0xA)
  {
    v12 = v44[0].n128_u64[0] + v7;
    if (*(_QWORD *)(v44[0].n128_u64[0] + v7 - 10) == 0x5F65727574786574
      && *(_WORD *)(v44[0].n128_u64[0] + v7 - 2) == 25649)
    {
      v10 = "struct._texture_1d_t";
      v9 = "air.is_null_texture_1d";
      goto LABEL_5;
    }
    if (v7 >= 0x10)
    {
      if (*(_QWORD *)(v12 - 16) == 0x5F65727574786574 && *(_QWORD *)(v12 - 8) == 0x79617272615F6431)
      {
        v10 = "struct._texture_1d_array_t";
        v9 = "air.is_null_texture_1d_array";
        goto LABEL_5;
      }
      if (*(_QWORD *)(v12 - 10) != 0x5F65727574786574 || *(_WORD *)(v12 - 2) != 25650)
      {
        if (*(_QWORD *)(v12 - 16) == 0x5F65727574786574 && *(_QWORD *)(v12 - 8) == 0x79617272615F6432)
        {
          v10 = "struct._texture_2d_array_t";
          v9 = "air.is_null_texture_2d_array";
          goto LABEL_5;
        }
        goto LABEL_56;
      }
    }
    else if (*(_QWORD *)(v12 - 10) != 0x5F65727574786574 || *(_WORD *)(v12 - 2) != 25650)
    {
      if (v7 < 0xD)
      {
        if (v7 != 12
          || (*(_QWORD *)v44[0].n128_u64[0] == 0x5F65727574786574
            ? (v15 = *(_DWORD *)(v44[0].n128_u64[0] + 8) == 1700951395)
            : (v15 = 0),
              !v15))
        {
LABEL_80:
          v30 = *(_QWORD *)(v12 - 10);
          v31 = *(unsigned __int16 *)(v12 - 2);
          if (v30 == 0x5F65727574786574 && v31 == 25651)
          {
            v10 = "struct._texture_3d_t";
            v9 = "air.is_null_texture_3d";
            goto LABEL_5;
          }
          goto LABEL_13;
        }
        goto LABEL_128;
      }
LABEL_56:
      if (*(_QWORD *)(v12 - 13) == 0x5F65727574786574 && *(_QWORD *)(v12 - 8) == 0x736D5F64325F6572)
      {
        v10 = "struct._texture_2d_ms_t";
        v9 = "air.is_null_texture_2d_ms";
        goto LABEL_5;
      }
      if (v7 >= 0x13)
      {
        v25 = *(_QWORD *)(v12 - 19) == 0x5F65727574786574 && *(_QWORD *)(v12 - 11) == 0x72615F736D5F6432;
        if (v25 && *(_QWORD *)(v12 - 8) == 0x79617272615F736DLL)
        {
          v10 = "struct._texture_2d_ms_array_t";
          v9 = "air.is_null_texture_2d_ms_array";
          goto LABEL_5;
        }
      }
      if (*(_QWORD *)(v12 - 12) != 0x5F65727574786574 || *(_DWORD *)(v12 - 4) != 1700951395)
      {
        if (v7 >= 0x12)
        {
          v28 = *(_QWORD *)(v12 - 18) == 0x5F65727574786574 && *(_QWORD *)(v12 - 10) == 0x7272615F65627563;
          if (v28 && *(_WORD *)(v12 - 2) == 31073)
          {
            v10 = "struct._texture_cube_array_t";
            v9 = "air.is_null_texture_cube_array";
            goto LABEL_5;
          }
        }
        goto LABEL_80;
      }
LABEL_128:
      v10 = "struct._texture_cube_t";
      v9 = "air.is_null_texture_cube";
      goto LABEL_5;
    }
    v10 = "struct._texture_2d_t";
    v9 = "air.is_null_texture_2d";
    goto LABEL_5;
  }
  if (v7 < 8)
    goto LABEL_4;
LABEL_13:
  v11 = v44[0].n128_u64[0] + v7;
  if (*(_QWORD *)(v44[0].n128_u64[0] + v7 - 8) == 0x64325F6874706564)
  {
    v10 = "struct._depth_2d_t";
    v9 = "air.is_null_depth_2d";
    goto LABEL_5;
  }
  if (v7 >= 0xE)
  {
    if (*(_QWORD *)(v11 - 14) == 0x64325F6874706564 && *(_QWORD *)(v11 - 8) == 0x79617272615F6432)
    {
      v10 = "struct._depth_2d_array_t";
      v9 = "air.is_null_depth_2d_array";
      goto LABEL_5;
    }
  }
  else if (v7 < 0xA)
  {
    goto LABEL_4;
  }
  if (*(_QWORD *)(v11 - 10) == 0x75635F6874706564 && *(_WORD *)(v11 - 2) == 25954)
  {
    v10 = "struct._depth_cube_t";
    v9 = "air.is_null_depth_cube";
    goto LABEL_5;
  }
  if (v7 >= 0x10)
  {
    if (*(_QWORD *)(v11 - 16) == 0x75635F6874706564 && *(_QWORD *)(v11 - 8) == 0x79617272615F6562)
    {
      v10 = "struct._depth_cube_array_t";
      v9 = "air.is_null_depth_cube_array";
      goto LABEL_5;
    }
  }
  else if (v7 < 0xB)
  {
    goto LABEL_4;
  }
  if (*(_QWORD *)(v11 - 11) == 0x64325F6874706564 && *(_QWORD *)(v11 - 8) == 0x736D5F64325F6874)
  {
    v10 = "struct._depth_2d_ms_t";
    v9 = "air.is_null_depth_2d_ms";
    goto LABEL_5;
  }
  if (v7 < 0x11)
  {
LABEL_4:
    v9 = 0;
    v10 = 0;
    goto LABEL_5;
  }
  if (*(_QWORD *)(v11 - 17) == 0x64325F6874706564
    && *(_QWORD *)(v11 - 9) == 0x617272615F736D5FLL
    && *(_BYTE *)(v11 - 1) == 121)
  {
    v10 = "struct._depth_2d_ms_array_t";
    v9 = "air.is_null_depth_2d_ms_array";
  }
  else
  {
    v39 = *(_QWORD *)(v11 - 17);
    v40 = *(_QWORD *)(v11 - 9);
    v41 = *(unsigned __int8 *)(v11 - 1);
    if (v39 != 0x5F65727574786574 || v40 != 0x315F726566667562 || v41 != 100)
      goto LABEL_4;
    v10 = "struct._texture_buffer_1d_t";
    v9 = "air.is_null_texture_buffer_1d";
  }
LABEL_5:
  TypeByName = 0;
  v47.n128_u64[0] = (unint64_t)v9;
  llvm::Value::getContext(BitOrPointerCast);
  if (v10)
    strlen(v10);
  TypeByName = llvm::StructType::getTypeByName();
  if (!TypeByName)
  {
    llvm::Value::getContext(BitOrPointerCast);
    if (v10)
      strlen(v10);
    llvm::StructType::create();
  }
  TypeByName = llvm::PointerType::get();
  v16 = getOrInsertFunction<char const*&,llvm::Type *&,llvm::Type *&>(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 6) + 56) + 40), (const char **)&v47, (uint64_t *)this + 21, &TypeByName);
  if ((llvm::Function::hasFnAttribute() & 1) == 0)
  {
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
  }
  v17 = *(_QWORD *)(v16 + 24);
  v18 = *(llvm::Type **)(*(_QWORD *)(v17 + 16) + 8);
  if (v18 != *(llvm::Type **)BitOrPointerCast)
  {
    v45 = 257;
    BitOrPointerCast = llvm::IRBuilderBase::CreateBitOrPointerCast(this, (llvm::Type **)BitOrPointerCast, v18, (const llvm::Twine *)v44);
    v17 = *(_QWORD *)(v16 + 24);
  }
  v48[0] = BitOrPointerCast;
  v45 = 257;
  v19 = llvm::IRBuilderBase::CreateCall((uint64_t)this, v17, v16, (uint64_t)v48, 1, (uint64_t)v44, 0);
  *(_WORD *)(v19 + 18) = *(_WORD *)(v19 + 18) & 0xFFFC | 1;
  llvm::Value::getContext((llvm::Value *)v19);
  *(_QWORD *)(v19 + 64) = llvm::AttributeList::addAttributeAtIndex();
  llvm::Value::getContext((llvm::Value *)v19);
  *(_QWORD *)(v19 + 64) = llvm::AttributeList::addAttributeAtIndex();
  llvm::Value::getContext((llvm::Value *)v19);
  *(_QWORD *)(v19 + 64) = llvm::AttributeList::addAttributeAtIndex();
  return v19;
}

__n128 llvm::StringRef::split@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v6 = llvm::StringRef::find();
  if (v6 == -1)
  {
    a3[1].n128_u64[0] = 0;
    a3[1].n128_u64[1] = 0;
    result = *a1;
    *a3 = *a1;
  }
  else
  {
    v9 = a1->n128_u64[0];
    v8 = a1->n128_u64[1];
    if (v8 >= v6)
      v10 = v6;
    else
      v10 = a1->n128_u64[1];
    v11 = v6 + a2;
    if (v8 < v6 + a2)
      v11 = a1->n128_u64[1];
    a3->n128_u64[0] = v9;
    a3->n128_u64[1] = v10;
    a3[1].n128_u64[0] = v9 + v11;
    a3[1].n128_u64[1] = v8 - v11;
  }
  return result;
}

uint64_t getOrInsertFunction<char const*&,llvm::Type *&,llvm::Type *&>(uint64_t a1, const char **a2, uint64_t *a3, uint64_t *a4)
{
  const char *v7;
  size_t v8;
  uint64_t v9;
  uint64_t result;

  v7 = *a2;
  if (*a2)
    v8 = strlen(*a2);
  else
    v8 = 0;
  llvm::Module::getOrInsertFunction<llvm::Type *>(a1, (uint64_t)v7, v8, 0, *a3, *a4);
  result = v9;
  if (*(_BYTE *)(v9 + 16) == 5)
    return *(_QWORD *)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF));
  return result;
}

uint64_t MTLIRBuilder::CreateBadTextureCall(llvm::Constant **this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, llvm::Value *a5, llvm::Value *a6, llvm::Value *a7, llvm::Value *a8, llvm::Value *a9, llvm::Value *a10)
{
  llvm::Value *NullValue;
  uint64_t inserted;
  uint64_t v20;
  llvm::Value *v21;
  uint64_t result;
  _BYTE v23[32];
  __int16 v24;
  _QWORD v25[10];

  NullValue = a10;
  v25[9] = *MEMORY[0x24BDAC8D0];
  if (!a10)
    NullValue = (llvm::Value *)llvm::Constant::getNullValue(this[18], a2);
  inserted = MTLIRBuilder::getOrInsertBadTextureFunction((MTLIRBuilder *)this, *(llvm::Module **)(*((_QWORD *)this[6] + 7) + 40));
  v25[0] = a2;
  v25[1] = a3;
  v25[2] = a4;
  v25[3] = a5;
  v25[4] = a6;
  v25[5] = a7;
  v25[6] = a8;
  v25[7] = a9;
  v25[8] = NullValue;
  if (inserted)
    v20 = *(_QWORD *)(inserted + 24);
  else
    v20 = 0;
  v24 = 257;
  v21 = (llvm::Value *)llvm::IRBuilderBase::CreateCall((uint64_t)this, v20, inserted, (uint64_t)v25, 9, (uint64_t)v23, 0);
  llvm::Value::getContext(v21);
  *((_QWORD *)v21 + 8) = llvm::AttributeList::addAttributeAtIndex();
  llvm::Value::getContext(v21);
  result = llvm::AttributeList::addAttributeAtIndex();
  *((_QWORD *)v21 + 8) = result;
  return result;
}

uint64_t MTLIRBuilder::getOrInsertBadTextureFunction(MTLIRBuilder *this, llvm::Module *a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t VoidTy;

  VoidTy = llvm::Type::getVoidTy(*((llvm::Type **)this + 8), a2);
  v7 = llvm::PointerType::get();
  v6 = llvm::PointerType::get();
  v4 = getOrInsertFunction<char const(&)[16],llvm::Type *,llvm::PointerType *,llvm::PointerType *,llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&>((uint64_t)a2, "mtl.bad_texture", &VoidTy, &v7, &v6, (uint64_t *)this + 22, (_QWORD *)this + 17, (_QWORD *)this + 18, (_QWORD *)this + 18, (_QWORD *)this + 20, (uint64_t *)this + 20, (uint64_t *)this + 18);
  llvm::GlobalObject::setSection();
  return v4;
}

uint64_t MTLIRBuilder::getOrInsertTrapFunction(MTLIRBuilder *this, llvm::Module *a2)
{
  llvm::LLVMContext *v4;
  uint64_t Function;
  uint64_t v7;
  uint64_t v8;
  uint64_t VoidTy;

  Function = llvm::Module::getFunction();
  if (!Function)
  {
    VoidTy = llvm::Type::getVoidTy(*((llvm::Type **)this + 8), v4);
    v8 = llvm::PointerType::get();
    v7 = llvm::PointerType::get();
    Function = getOrInsertFunction<char const(&)[16],llvm::Type *,llvm::PointerType *,llvm::PointerType *,llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&>((uint64_t)a2, "mtl.report_trap", &VoidTy, &v8, &v7, (uint64_t *)this + 22, (_QWORD *)this + 17, (_QWORD *)this + 18, (uint64_t *)this + 18);
    if (Function)
      llvm::GlobalObject::setSection();
  }
  return Function;
}

uint64_t getOrInsertFunction<char const(&)[16],llvm::Type *,llvm::PointerType *,llvm::PointerType *,llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&>(uint64_t a1, char *__s, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, _QWORD *a7, _QWORD *a8, uint64_t *a9)
{
  size_t v17;
  uint64_t v18;
  uint64_t result;
  __int128 v20;

  v17 = strlen(__s);
  *((_QWORD *)&v20 + 1) = *a8;
  *(_QWORD *)&v20 = *a7;
  llvm::Module::getOrInsertFunction<llvm::PointerType *,llvm::PointerType *,llvm::Type *,llvm::Type *,llvm::Type *,llvm::Type *>(a1, (uint64_t)__s, v17, 0, *a3, *a4, *a5, *a6, v20, *a9);
  result = v18;
  if (*(_BYTE *)(v18 + 16) == 5)
    return *(_QWORD *)(v18 - 32 * (*(_DWORD *)(v18 + 20) & 0x7FFFFFF));
  return result;
}

uint64_t MTLIRBuilder::CreateTrapCall(MTLIRBuilder *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, llvm::Value *a5)
{
  uint64_t inserted;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  _WORD v15[20];
  _QWORD v16[7];

  v16[6] = *MEMORY[0x24BDAC8D0];
  inserted = MTLIRBuilder::getOrInsertTrapFunction(this, *(llvm::Module **)(*(_QWORD *)(*((_QWORD *)this + 6) + 56) + 40));
  v11 = inserted;
  if (inserted)
    v12 = *(_QWORD *)(inserted + 24);
  else
    v12 = 0;
  v16[0] = a2;
  v16[1] = a3;
  v16[2] = a4;
  v16[3] = a5;
  v16[4] = llvm::ConstantInt::get();
  v16[5] = llvm::ConstantInt::get();
  v15[16] = 257;
  v13 = llvm::IRBuilderBase::CreateCall((uint64_t)this, v12, v11, (uint64_t)v16, 6, (uint64_t)v15, 0);
  llvm::Value::getContext((llvm::Value *)v13);
  *(_QWORD *)(v13 + 64) = llvm::AttributeList::addAttributeAtIndex();
  llvm::Value::getContext((llvm::Value *)v13);
  result = llvm::AttributeList::addAttributeAtIndex();
  *(_QWORD *)(v13 + 64) = result;
  *(_WORD *)(v13 + 18) = *(_WORD *)(v13 + 18) & 0xFFFC | 1;
  return result;
}

uint64_t MTLIRBuilder::CreateStackOverflowCall(MTLIRBuilder *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, llvm::Value *a5, unsigned int a6, llvm::Value *a7)
{
  uint64_t inserted;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  _WORD v18[20];
  _QWORD v19[7];

  v19[6] = *MEMORY[0x24BDAC8D0];
  inserted = MTLIRBuilder::getOrInsertStackOverflowFunction(this, *(llvm::Module **)(*(_QWORD *)(*((_QWORD *)this + 6) + 56) + 40));
  v14 = inserted;
  if (inserted)
    v15 = *(_QWORD *)(inserted + 24);
  else
    v15 = 0;
  v19[0] = a2;
  v19[1] = a3;
  v19[2] = a4;
  v19[3] = a5;
  v19[4] = llvm::ConstantInt::get();
  v19[5] = a7;
  v18[16] = 257;
  v16 = llvm::IRBuilderBase::CreateCall((uint64_t)this, v15, v14, (uint64_t)v19, 6, (uint64_t)v18, 0);
  llvm::Value::getContext((llvm::Value *)v16);
  *(_QWORD *)(v16 + 64) = llvm::AttributeList::addAttributeAtIndex();
  llvm::Value::getContext((llvm::Value *)v16);
  result = llvm::AttributeList::addAttributeAtIndex();
  *(_QWORD *)(v16 + 64) = result;
  *(_WORD *)(v16 + 18) = *(_WORD *)(v16 + 18) & 0xFFFC | 1;
  return result;
}

uint64_t MTLIRBuilder::getOrInsertStackOverflowFunction(MTLIRBuilder *this, llvm::Module *a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t VoidTy;

  VoidTy = llvm::Type::getVoidTy(*((llvm::Type **)this + 8), a2);
  v7 = llvm::PointerType::get();
  v6 = llvm::PointerType::get();
  v4 = getOrInsertFunction<char const(&)[16],llvm::Type *,llvm::PointerType *,llvm::PointerType *,llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&>((uint64_t)a2, "mtl.stack_overflow", &VoidTy, &v7, &v6, (uint64_t *)this + 22, (_QWORD *)this + 17, (_QWORD *)this + 18, (uint64_t *)this + 18);
  llvm::GlobalObject::setSection();
  return v4;
}

uint64_t MTLIRBuilder::CreateBadAccelerationStructureCall(MTLIRBuilder *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, llvm::Value *a5, unsigned int a6, llvm::Value *a7, llvm::Value *a8, llvm::Value *a9)
{
  uint64_t inserted;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  _BYTE v21[32];
  __int16 v22;
  _QWORD v23[9];

  v23[8] = *MEMORY[0x24BDAC8D0];
  inserted = MTLIRBuilder::getOrInsertBadAccelerationStructureFunction(this, *(llvm::Module **)(*(_QWORD *)(*((_QWORD *)this + 6) + 56) + 40));
  v16 = inserted;
  if (inserted)
    v17 = *(_QWORD *)(inserted + 24);
  else
    v17 = 0;
  v23[0] = a2;
  v23[1] = a3;
  v23[2] = a4;
  v23[3] = a5;
  v23[4] = llvm::ConstantInt::get();
  v23[5] = a7;
  v23[6] = a8;
  v23[7] = a9;
  v22 = 257;
  v18 = llvm::IRBuilderBase::CreateCall((uint64_t)this, v17, v16, (uint64_t)v23, 8, (uint64_t)v21, 0);
  llvm::Value::getContext((llvm::Value *)v18);
  *(_QWORD *)(v18 + 64) = llvm::AttributeList::addAttributeAtIndex();
  llvm::Value::getContext((llvm::Value *)v18);
  result = llvm::AttributeList::addAttributeAtIndex();
  *(_QWORD *)(v18 + 64) = result;
  *(_WORD *)(v18 + 18) = *(_WORD *)(v18 + 18) & 0xFFFC | 1;
  return result;
}

uint64_t MTLIRBuilder::getOrInsertBadAccelerationStructureFunction(MTLIRBuilder *this, llvm::Module *a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t VoidTy;

  VoidTy = llvm::Type::getVoidTy(*((llvm::Type **)this + 8), a2);
  v7 = llvm::PointerType::get();
  v6 = llvm::PointerType::get();
  v4 = getOrInsertFunction<char const(&)[31],llvm::Type *,llvm::PointerType *,llvm::PointerType *,llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&>((uint64_t)a2, "mtl.bad_acceleration_structure", &VoidTy, &v7, &v6, (uint64_t *)this + 22, (_QWORD *)this + 17, (_QWORD *)this + 18, (_QWORD *)this + 18, (_QWORD *)this + 17, (uint64_t *)this + 17);
  llvm::GlobalObject::setSection();
  return v4;
}

uint64_t getOrInsertFunction<char const(&)[16],llvm::Type *,llvm::PointerType *,llvm::PointerType *,llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&>(uint64_t a1, char *__s, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, _QWORD *a7, _QWORD *a8, _QWORD *a9, _QWORD *a10, uint64_t *a11, uint64_t *a12)
{
  size_t v18;
  uint64_t v19;
  uint64_t result;
  __int128 v21;
  __int128 v22;

  v18 = strlen(__s);
  *(_QWORD *)&v22 = *a9;
  *((_QWORD *)&v22 + 1) = *a10;
  *(_QWORD *)&v21 = *a7;
  *((_QWORD *)&v21 + 1) = *a8;
  llvm::Module::getOrInsertFunction<llvm::PointerType *,llvm::PointerType *,llvm::Type *,llvm::Type *,llvm::Type *,llvm::Type *,llvm::Type *,llvm::Type *,llvm::Type *>(a1, (uint64_t)__s, v18, 0, *a3, *a4, *a5, *a6, v21, v22, *a11, *a12);
  result = v19;
  if (*(_BYTE *)(v19 + 16) == 5)
    return *(_QWORD *)(v19 - 32 * (*(_DWORD *)(v19 + 20) & 0x7FFFFFF));
  return result;
}

uint64_t getOrInsertFunction<char const(&)[31],llvm::Type *,llvm::PointerType *,llvm::PointerType *,llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&>(uint64_t a1, char *__s, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, _QWORD *a7, _QWORD *a8, _QWORD *a9, _QWORD *a10, uint64_t *a11)
{
  size_t v18;
  uint64_t v19;
  uint64_t result;
  __int128 v21;
  __int128 v22;

  v18 = strlen(__s);
  *((_QWORD *)&v22 + 1) = *a10;
  *((_QWORD *)&v21 + 1) = *a8;
  *(_QWORD *)&v22 = *a9;
  *(_QWORD *)&v21 = *a7;
  llvm::Module::getOrInsertFunction<llvm::PointerType *,llvm::PointerType *,llvm::Type *,llvm::Type *,llvm::Type *,llvm::Type *,llvm::Type *,llvm::Type *>(a1, (uint64_t)__s, v18, 0, *a3, *a4, *a5, *a6, v21, v22, *a11);
  result = v19;
  if (*(_BYTE *)(v19 + 16) == 5)
    return *(_QWORD *)(v19 - 32 * (*(_DWORD *)(v19 + 20) & 0x7FFFFFF));
  return result;
}

uint64_t llvm::Module::getOrInsertFunction<llvm::Type *,llvm::Type *,llvm::Type *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t inserted;
  _QWORD v10[3];
  void *v11;
  _QWORD v12[4];

  v12[3] = *MEMORY[0x24BDAC8D0];
  v10[0] = a6;
  v10[1] = a7;
  v10[2] = a8;
  llvm::SmallVector<llvm::Type *,3u>::SmallVector(&v11, v10, 3);
  llvm::FunctionType::get();
  inserted = llvm::Module::getOrInsertFunction();
  if (v11 != v12)
    free(v11);
  return inserted;
}

void sub_241022A94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(exception_object);
}

_QWORD *llvm::SmallVector<llvm::Type *,3u>::SmallVector(_QWORD *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = a1 + 2;
  a1[1] = 0x300000000;
  llvm::SmallVectorImpl<llvm::Metadata *>::append<llvm::Metadata * const*,void>((uint64_t)a1, a2, &a2[8 * a3]);
  return a1;
}

void sub_241022AFC(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  void *v3;

  v3 = v2;
  if (*v1 != v3)
    free(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t llvm::Module::getOrInsertFunction<llvm::PointerType *,llvm::PointerType *,llvm::Type *,llvm::Type *,llvm::Type *,llvm::Type *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10)
{
  uint64_t inserted;
  _QWORD v12[3];
  __int128 v13;
  uint64_t v14;
  void *v15;
  _QWORD v16[7];

  v16[6] = *MEMORY[0x24BDAC8D0];
  v12[0] = a6;
  v12[1] = a7;
  v12[2] = a8;
  v13 = a9;
  v14 = a10;
  llvm::SmallVector<llvm::Type *,6u>::SmallVector(&v15, v12, 6);
  llvm::FunctionType::get();
  inserted = llvm::Module::getOrInsertFunction();
  if (v15 != v16)
    free(v15);
  return inserted;
}

void sub_241022C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(exception_object);
}

_QWORD *llvm::SmallVector<llvm::Type *,6u>::SmallVector(_QWORD *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = a1 + 2;
  a1[1] = 0x600000000;
  llvm::SmallVectorImpl<llvm::Metadata *>::append<llvm::Metadata * const*,void>((uint64_t)a1, a2, &a2[8 * a3]);
  return a1;
}

void sub_241022C70(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  void *v3;

  v3 = v2;
  if (*v1 != v3)
    free(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t llvm::Module::getOrInsertFunction<llvm::PointerType *,llvm::PointerType *,llvm::Type *,llvm::Type *,llvm::Type *,llvm::Type *,llvm::Type *,llvm::Type *,llvm::Type *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, uint64_t a11, uint64_t a12)
{
  uint64_t inserted;
  _QWORD v14[3];
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  _QWORD v20[10];

  v20[9] = *MEMORY[0x24BDAC8D0];
  v14[0] = a6;
  v14[1] = a7;
  v14[2] = a8;
  v15 = a9;
  v16 = a10;
  v17 = a11;
  v18 = a12;
  llvm::SmallVector<llvm::Type *,9u>::SmallVector(&v19, v14, 9);
  llvm::FunctionType::get();
  inserted = llvm::Module::getOrInsertFunction();
  if (v19 != v20)
    free(v19);
  return inserted;
}

void sub_241022D7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(exception_object);
}

_QWORD *llvm::SmallVector<llvm::Type *,9u>::SmallVector(_QWORD *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = a1 + 2;
  a1[1] = 0x900000000;
  llvm::SmallVectorImpl<llvm::Metadata *>::append<llvm::Metadata * const*,void>((uint64_t)a1, a2, &a2[8 * a3]);
  return a1;
}

void sub_241022DE4(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  void *v3;

  v3 = v2;
  if (*v1 != v3)
    free(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t llvm::Module::getOrInsertFunction<llvm::PointerType *,llvm::PointerType *,llvm::Type *,llvm::Type *,llvm::Type *,llvm::Type *,llvm::Type *,llvm::Type *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, uint64_t a11)
{
  uint64_t inserted;
  _QWORD v13[3];
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  void *v17;
  _QWORD v18[9];

  v18[8] = *MEMORY[0x24BDAC8D0];
  v13[0] = a6;
  v13[1] = a7;
  v13[2] = a8;
  v14 = a9;
  v15 = a10;
  v16 = a11;
  llvm::SmallVector<llvm::Type *,8u>::SmallVector(&v17, v13, 8);
  llvm::FunctionType::get();
  inserted = llvm::Module::getOrInsertFunction();
  if (v17 != v18)
    free(v17);
  return inserted;
}

void sub_241022EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(exception_object);
}

_QWORD *llvm::SmallVector<llvm::Type *,8u>::SmallVector(_QWORD *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = a1 + 2;
  a1[1] = 0x800000000;
  llvm::SmallVectorImpl<llvm::Metadata *>::append<llvm::Metadata * const*,void>((uint64_t)a1, a2, &a2[8 * a3]);
  return a1;
}

void sub_241022F58(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  void *v3;

  v3 = v2;
  if (*v1 != v3)
    free(*v1);
  _Unwind_Resume(exception_object);
}

void MTLCompilerObject::getFragmentVaryingsInfo(MTLCompilerObject *this, int a2, const char *a3, unint64_t a4, MTLCompilerObject::FragmentVaryingsInfo *a5)
{
  unint64_t v6;
  int v7;
  unint64_t v8;
  __int16 v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  char *v26;
  char *v27;
  _OWORD *v28;
  __int128 v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  __int128 v42;
  unsigned int v43;
  _OWORD *v44;
  unint64_t v45;
  __int128 v46;
  _OWORD *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  __int128 v54;
  char *v55;
  char *v56;
  _OWORD *v57;
  __int128 v58;
  char **v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  const char *v64;
  unint64_t v65;
  unint64_t v66;

  if (a4)
  {
    v64 = a3;
    v65 = a4;
    *((_DWORD *)a5 + 19) = *(unsigned __int8 *)a3;
    if (a4 == 1)
      goto LABEL_71;
    *((_DWORD *)a5 + 20) = *((unsigned __int8 *)a3 + 1);
    if (a4 <= 2)
      goto LABEL_71;
    *((_DWORD *)a5 + 21) = *((unsigned __int8 *)a3 + 2);
    if (a4 == 3)
      goto LABEL_71;
    v6 = *((unsigned __int8 *)a3 + 3);
    v66 = 4;
    *((_DWORD *)a5 + 18) = v6;
    if (a2)
    {
      v59 = (char **)((char *)a5 + 24);
      std::vector<PackedInput>::reserve((void **)a5 + 3, v6);
      if (*((_DWORD *)a5 + 18))
      {
        v7 = 0;
        while (1)
        {
          v8 = v66;
          if (v66 >= v65)
            break;
          v9 = v64[v66++];
          LOWORD(v62) = v9;
          if (v8 + 1 >= v65)
            break;
          v10 = v64[v8 + 1];
          v66 = v8 + 2;
          WORD1(v62) = v10 & 0xF;
          v11 = v10 >> 4;
          WORD2(v62) = v10 >> 4;
          if (v10 >= 0x10)
          {
            v12 = 0;
            if (v11 <= 1)
              v13 = 1;
            else
              v13 = v11;
            v14 = (_OWORD *)*((_QWORD *)a5 + 1);
            do
            {
              v15 = ((uint64_t)v14 - *(_QWORD *)a5) >> 5;
              *((_WORD *)&v62 + v12 + 3) = v15;
              deserializeFragmentInput((DeserialContext *)&v64, v15, (uint64_t **)a5 + 6, (uint64_t)&v60);
              v16 = (_OWORD *)*((_QWORD *)a5 + 1);
              v17 = *((_QWORD *)a5 + 2);
              if ((unint64_t)v16 >= v17)
              {
                v19 = ((uint64_t)v16 - *(_QWORD *)a5) >> 5;
                v20 = v19 + 1;
                if ((unint64_t)(v19 + 1) >> 59)
                  goto LABEL_70;
                v21 = v17 - *(_QWORD *)a5;
                if (v21 >> 4 > v20)
                  v20 = v21 >> 4;
                if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFE0)
                  v22 = 0x7FFFFFFFFFFFFFFLL;
                else
                  v22 = v20;
                if (v22)
                  v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<VaryingInfo>>((uint64_t)a5 + 16, v22);
                else
                  v23 = 0;
                v24 = &v23[32 * v19];
                v25 = v61;
                *(_OWORD *)v24 = v60;
                *((_OWORD *)v24 + 1) = v25;
                v27 = *(char **)a5;
                v26 = (char *)*((_QWORD *)a5 + 1);
                v28 = v24;
                if (v26 != *(char **)a5)
                {
                  do
                  {
                    v29 = *((_OWORD *)v26 - 2);
                    *(_OWORD *)((char *)v28 - 19) = *(_OWORD *)(v26 - 19);
                    *(v28 - 2) = v29;
                    v28 -= 2;
                    v26 -= 32;
                  }
                  while (v26 != v27);
                  v26 = *(char **)a5;
                }
                v14 = v24 + 32;
                *(_QWORD *)a5 = v28;
                *((_QWORD *)a5 + 1) = v24 + 32;
                *((_QWORD *)a5 + 2) = &v23[32 * v22];
                if (v26)
                  operator delete(v26);
              }
              else
              {
                v18 = v61;
                *v16 = v60;
                v16[1] = v18;
                v14 = v16 + 2;
              }
              *((_QWORD *)a5 + 1) = v14;
              ++v12;
            }
            while (v12 != v13);
          }
          v31 = *((_QWORD *)a5 + 4);
          v30 = *((_QWORD *)a5 + 5);
          if (v31 >= v30)
          {
            v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - (_QWORD)*v59) >> 3);
            v34 = v33 + 1;
            if (v33 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
            v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - (_QWORD)*v59) >> 3);
            if (2 * v35 > v34)
              v34 = 2 * v35;
            if (v35 >= 0x555555555555555)
              v36 = 0xAAAAAAAAAAAAAAALL;
            else
              v36 = v34;
            if (v36)
              v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PackedInput>>((uint64_t)a5 + 40, v36);
            else
              v37 = 0;
            v38 = &v37[24 * v33];
            *(_OWORD *)v38 = v62;
            *((_QWORD *)v38 + 2) = v63;
            v40 = (char *)*((_QWORD *)a5 + 3);
            v39 = (char *)*((_QWORD *)a5 + 4);
            v41 = v38;
            if (v39 != v40)
            {
              do
              {
                v42 = *(_OWORD *)(v39 - 24);
                *((_QWORD *)v41 - 1) = *((_QWORD *)v39 - 1);
                *(_OWORD *)(v41 - 24) = v42;
                v41 -= 24;
                v39 -= 24;
              }
              while (v39 != v40);
              v39 = *v59;
            }
            v32 = v38 + 24;
            *((_QWORD *)a5 + 3) = v41;
            *((_QWORD *)a5 + 4) = v38 + 24;
            *((_QWORD *)a5 + 5) = &v37[24 * v36];
            if (v39)
              operator delete(v39);
          }
          else
          {
            *(_OWORD *)v31 = v62;
            *(_QWORD *)(v31 + 16) = v63;
            v32 = (char *)(v31 + 24);
          }
          *((_QWORD *)a5 + 4) = v32;
          if (++v7 >= *((_DWORD *)a5 + 18))
            return;
        }
LABEL_71:
        abort();
      }
    }
    else
    {
      std::vector<VaryingInfo>::reserve((void **)a5, v6);
      if (*((_DWORD *)a5 + 18))
      {
        v43 = 0;
        do
        {
          deserializeFragmentInput((DeserialContext *)&v64, v43, (uint64_t **)a5 + 6, (uint64_t)&v60);
          v44 = (_OWORD *)*((_QWORD *)a5 + 1);
          v45 = *((_QWORD *)a5 + 2);
          if ((unint64_t)v44 >= v45)
          {
            v48 = ((uint64_t)v44 - *(_QWORD *)a5) >> 5;
            v49 = v48 + 1;
            if ((unint64_t)(v48 + 1) >> 59)
LABEL_70:
              std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
            v50 = v45 - *(_QWORD *)a5;
            if (v50 >> 4 > v49)
              v49 = v50 >> 4;
            if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFE0)
              v51 = 0x7FFFFFFFFFFFFFFLL;
            else
              v51 = v49;
            if (v51)
              v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<VaryingInfo>>((uint64_t)a5 + 16, v51);
            else
              v52 = 0;
            v53 = &v52[32 * v48];
            v54 = v61;
            *(_OWORD *)v53 = v60;
            *((_OWORD *)v53 + 1) = v54;
            v56 = *(char **)a5;
            v55 = (char *)*((_QWORD *)a5 + 1);
            v57 = v53;
            if (v55 != *(char **)a5)
            {
              do
              {
                v58 = *((_OWORD *)v55 - 2);
                *(_OWORD *)((char *)v57 - 19) = *(_OWORD *)(v55 - 19);
                *(v57 - 2) = v58;
                v57 -= 2;
                v55 -= 32;
              }
              while (v55 != v56);
              v55 = *(char **)a5;
            }
            v47 = v53 + 32;
            *(_QWORD *)a5 = v57;
            *((_QWORD *)a5 + 1) = v53 + 32;
            *((_QWORD *)a5 + 2) = &v52[32 * v51];
            if (v55)
              operator delete(v55);
          }
          else
          {
            v46 = v61;
            *v44 = v60;
            v44[1] = v46;
            v47 = v44 + 2;
          }
          *((_QWORD *)a5 + 1) = v47;
          ++v43;
        }
        while (v43 < *((_DWORD *)a5 + 18));
      }
    }
  }
}

void std::vector<PackedInput>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
    v5 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 24;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PackedInput>>(v3, a2);
    v7 = &v6[24 * v5];
    v9 = &v6[24 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *(_OWORD *)(v10 - 24);
        *((_QWORD *)v12 - 1) = *((_QWORD *)v10 - 1);
        *(_OWORD *)(v12 - 24) = v13;
        v12 -= 24;
        v10 -= 24;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void deserializeFragmentInput(DeserialContext *a1@<X0>, int a2@<W1>, uint64_t **a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v11;
  char *v12;
  size_t v13;
  void *__p[2];
  char v15;
  size_t __len;
  void **v17;

  v6 = *((_QWORD *)a1 + 1);
  v5 = *((_QWORD *)a1 + 2);
  if (v5 >= v6
    || (v7 = *(_QWORD *)a1, v8 = *(unsigned __int8 *)(*(_QWORD *)a1 + v5), *((_QWORD *)a1 + 2) = v5 + 1, v5 + 1 >= v6))
  {
    abort();
  }
  v11 = *(unsigned __int8 *)(v7 + v5 + 1);
  *((_QWORD *)a1 + 2) = v5 + 2;
  __len = 0;
  v12 = (char *)DeserialContext::deserializeCStringNoCopy(a1, &__len);
  std::string::basic_string[abi:ne180100](__p, v12, __len);
  v17 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (const void **)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v17)+ 14) = a2;
  v13 = __len;
  *(_QWORD *)(a4 + 8) = v12;
  *(_QWORD *)(a4 + 16) = v13;
  *(_DWORD *)(a4 + 24) = v8;
  *(_BYTE *)(a4 + 28) = (v11 >> 1) & 0x38 | (2 * (v11 & 3));
  *(_DWORD *)a4 = a2;
  if (v15 < 0)
    operator delete(__p[0]);
}

void sub_2410235A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<VaryingInfo>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 5)
  {
    if (a2 >> 59)
      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<VaryingInfo>>(v3, a2);
    v7 = &v6[v5];
    v9 = &v6[32 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_OWORD *)v10 - 2);
        *(_OWORD *)(v12 - 19) = *(_OWORD *)(v10 - 19);
        *((_OWORD *)v12 - 2) = v13;
        v12 -= 32;
        v10 -= 32;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

const char *DeserialContext::deserializeCStringNoCopy(DeserialContext *this, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  size_t v4;
  const char *v7;
  size_t v8;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = v2 - v3;
  if (v2 <= v3 || (v7 = (const char *)(*(_QWORD *)this + v3), v8 = strnlen(v7, v4), v8 == v4))
    abort();
  if (a2)
  {
    *a2 = v8;
    v3 = *((_QWORD *)this + 2);
  }
  *((_QWORD *)this + 2) = v8 + v3 + 1;
  return v7;
}

uint64_t *std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  *((_DWORD *)v6 + 14) = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_2410237F8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,TextureTokenData>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

BOOL isBufferMetadata(uint64_t a1)
{
  llvm::MDString *v1;
  uint64_t v2;
  _QWORD *String;
  uint64_t v4;
  BOOL v7;
  const char *v8;
  size_t v9;

  v1 = *(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8);
  if (*(_BYTE *)v1)
    return 0;
  String = (_QWORD *)llvm::MDString::getString(v1);
  v2 = 0;
  if (v4 > 30)
  {
    if (v4 == 31)
    {
      return *String == 0x65746E692E726961
          && String[1] == 0x6E6F697463657372
          && String[2] == 0x6F6974636E75665FLL
          && *(_QWORD *)((char *)String + 23) == 0x656C6261745F6E6FLL;
    }
    else
    {
      if (v4 == 35)
      {
        v8 = "air.instance_acceleration_structure";
        v9 = 35;
      }
      else
      {
        if (v4 != 36)
          return v2;
        v8 = "air.primitive_acceleration_structure";
        v9 = 36;
      }
      return memcmp(String, v8, v9) == 0;
    }
  }
  else
  {
    switch(v4)
    {
      case 10:
        v7 = *String == 0x666675622E726961 && *((_WORD *)String + 4) == 29285;
        break;
      case 19:
        v7 = *String == 0x69646E692E726961
          && String[1] == 0x6675625F74636572
          && *(_QWORD *)((char *)String + 11) == 0x7265666675625F74;
        break;
      case 26:
        v7 = *String == 0x697369762E726961
          && String[1] == 0x636E75665F656C62
          && String[2] == 0x6261745F6E6F6974
          && *((_WORD *)String + 12) == 25964;
        break;
      default:
        return v2;
    }
  }
  return v7;
}

_QWORD *createMTLArgumentBufferConversionPass(MTLBoundsCheck::SharedPassData *a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  MetalModulePass::MetalModulePass((uint64_t)v2, (uint64_t)&MTLArgumentBufferConversion::ID, (uint64_t)a1);
  *v2 = &off_25111F4E8;
  return v2;
}

void sub_241023A28(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x24268D8F0](v1, 0x10E1C40C8265ECALL);
  _Unwind_Resume(a1);
}

void MTLArgumentBufferConversion::~MTLArgumentBufferConversion(MTLArgumentBufferConversion *this)
{
  char *v2;

  *(_QWORD *)this = &off_25111E050;
  v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
}

{
  char *v2;

  *(_QWORD *)this = &off_25111E050;
  v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x24268D8F0);
}

BOOL MTLArgumentBufferConversion::runOnModule(MTLArgumentBufferConversion *this, llvm::Module *a2)
{
  llvm::Module *v4;
  _BOOL4 isLibraryModule;
  uint64_t v6;
  uint64_t EntryFunction;
  uint64_t v8;
  unint64_t v9;
  unint64_t i;
  unsigned int *v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int LocationIndex;
  _DWORD *v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  llvm::ArrayType *v22;
  uint64_t v23;
  llvm::Type *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  std::string *p_dst;
  std::string::size_type size;
  std::string *v31;
  __int128 v32;
  int v33;
  int v34;
  _DWORD *v35;
  unsigned int *v36;
  char *v37;
  size_t v38;
  void *v39;
  void **v40;
  char *String;
  size_t v42;
  char *v43;
  size_t v44;
  const char *v45;
  const char *v46;
  const char *v47;
  uint64_t v48;
  int v49;
  const char *v50;
  const char *v51;
  uint64_t v52;
  int v53;
  void *v54;
  uint64_t v55;
  const char *v56;
  size_t v57;
  uint64_t Impl;
  uint64_t v59;
  uint64_t v60;
  int v61;
  _BOOL8 v62;
  uint64_t PrefTypeAlignment;
  size_t v64;
  void *Name;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  unsigned int v74;
  llvm::BasicBlock *v75;
  uint64_t v76;
  unsigned int *v77;
  unsigned int *v78;
  const llvm::AttributeList *v79;
  unsigned int v80;
  llvm::BasicBlock *v81;
  llvm::BasicBlock *v82;
  llvm::ReturnInst *Context;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  unsigned int *v87;
  uint64_t v88;
  unsigned int *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  llvm::Type *v99;
  uint64_t AlignedLoad;
  llvm::Type **v101;
  llvm::Type *v102;
  llvm::Type **PointerBitCastOrAddrSpaceCast;
  uint64_t v104;
  std::string::size_type v105;
  uint64_t v106;
  llvm::LLVMContext *v107;
  llvm::Instruction *v108;
  uint64_t v109;
  uint64_t v111;
  unsigned int *v112;
  _BOOL4 v113;
  uint64_t v114;
  llvm::Type *v115;
  llvm::Function *v116;
  unsigned int __val[2];
  void *v118[2];
  uint64_t v119;
  __n128 v120;
  char v121;
  _QWORD v122[2];
  char v123;
  _QWORD v124[2];
  char v125;
  uint64_t StructTypeInfo;
  unsigned int *v127;
  uint64_t v128;
  unsigned int v129;
  unsigned int *v130;
  uint64_t v131;
  unsigned int v132;
  std::string __dst;
  __int16 v134;
  std::string v135;
  uint64_t Metadata;
  uint64_t v137;
  uint64_t v138;
  llvm::BasicBlock *v139;
  uint64_t v140;
  llvm::ReturnInst *v141;
  uint64_t *v142;
  uint64_t *v143;
  uint64_t v144;
  int v145;
  __int16 v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void *__p[2];
  _QWORD v153[8];
  void *__src;
  size_t __len;
  uint64_t v156;
  void *v157[2];
  _BYTE v158[248];
  void *v159;
  uint64_t v160;
  _BYTE v161[248];
  void *v162;
  uint64_t v163;
  _BYTE v164[248];
  void *v165[2];
  _BYTE v166[64];
  uint64_t *v167;
  uint64_t v168;
  _QWORD v169[10];

  v169[8] = *MEMORY[0x24BDAC8D0];
  MetalModulePass::runOnModule(this, a2);
  isLibraryModule = MTLBoundsCheck::isLibraryModule(a2, v4);
  if (!isLibraryModule)
  {
    v113 = isLibraryModule;
    v130 = 0;
    v131 = 0;
    v132 = 0;
    v127 = 0;
    v128 = 0;
    v129 = 0;
    v167 = v169;
    v168 = 0x800000000;
    v165[0] = v166;
    v165[1] = (void *)0x800000000;
    v162 = v164;
    v163 = 0x1F00000000;
    if ((*(_BYTE *)(*((_QWORD *)this + 4) + 22) & 2) != 0)
    {
      v6 = 1;
      llvm::SmallVectorImpl<llvm::Value *>::resizeImpl<false>((uint64_t)&v162, 1uLL);
    }
    else
    {
      v6 = 31;
      llvm::SmallVectorImpl<llvm::Value *>::resizeImpl<false>((uint64_t)&v162, 0x1FuLL);
    }
    llvm::SmallVectorImpl<llvm::Value *>::assign((uint64_t)&v162, v6, 0);
    llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<decltype(nullptr)>((uint64_t)v165);
    v159 = 0;
    llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<decltype(nullptr)>((uint64_t)&v167);
    EntryFunction = MetalModulePass::getEntryFunction(this);
    v8 = *(_QWORD *)(*((_QWORD *)this + 16) - 8 * *(unsigned int *)(*((_QWORD *)this + 16) + 8) + 16);
    v9 = *(unsigned int *)(v8 + 8);
    if ((_DWORD)v9)
    {
      for (i = 0; i < v9; ++i)
      {
        v159 = 0;
        v11 = *(unsigned int **)(v8 - 8 * v9 + 8 * i);
        v159 = v11;
        v157[0] = 0;
        v12 = *(_QWORD *)(*(_QWORD *)&v11[-2 * v11[2]] + 128);
        v13 = (_QWORD *)(v12 + 24);
        if (*(_DWORD *)(v12 + 32) >= 0x41u)
          v13 = (_QWORD *)*v13;
        v14 = (void *)*v13;
        v157[0] = v14;
        if ((*(_WORD *)(EntryFunction + 18) & 1) != 0)
        {
          llvm::Function::BuildLazyArguments((llvm::Function *)EntryFunction);
          v14 = v157[0];
          v11 = (unsigned int *)v159;
        }
        v15 = *(_QWORD *)(EntryFunction + 88);
        v135.__r_.__value_.__r.__words[0] = 0;
        v135.__r_.__value_.__r.__words[0] = *(_QWORD *)(v15 + 40 * (_QWORD)v14);
        LOBYTE(__p[0]) = 0;
        BYTE4(__p[0]) = 0;
        if (isBufferMetadata((uint64_t)v11))
        {
          v16 = (*(_DWORD *)(v135.__r_.__value_.__r.__words[0] + 8) & 0xFE) == 0x12
              ? *(_DWORD *)(**(_QWORD **)(v135.__r_.__value_.__r.__words[0] + 16) + 8) & 0xFFFFFF00
              : *(_DWORD *)(v135.__r_.__value_.__r.__words[0] + 8) & 0xFFFFFF00;
          if (v16 == 256 || v16 == 512)
          {
            LocationIndex = MTLBoundsCheck::getLocationIndex((uint64_t)v159);
            if (!BYTE4(__p[0]))
              BYTE4(__p[0]) = 1;
            LODWORD(__p[0]) = LocationIndex;
            if (LocationIndex < 0x1F)
            {
              if ((*(_BYTE *)(*((_QWORD *)this + 4) + 22) & 2) == 0 && !*((_QWORD *)v162 + LocationIndex))
                *((_QWORD *)v162 + LocationIndex) = v135.__r_.__value_.__r.__words[0];
              v18 = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,2u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,2u>>>,unsigned int,llvm::SmallVector<unsigned int,2u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,2u>>>::FindAndConstruct((uint64_t *)&v127, __p);
              llvm::SmallVectorImpl<unsigned int>::emplace_back<unsigned long long const&>((uint64_t)(v18 + 2), (int *)v157);
              goto LABEL_26;
            }
            MTLBoundsCheck::setLocationIndex((uint64_t)v159);
          }
        }
        v19 = v168;
        LODWORD(__dst.__r_.__value_.__l.__data_) = v157[0];
        llvm::DenseMapBase<llvm::DenseMap<unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>,unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>::FindAndConstruct((uint64_t *)&v130, &__dst)[1] = v19;
        llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)&v167, (uint64_t *)&v135);
        llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)v165, (uint64_t *)&v159);
        llvm::ConstantInt::get();
        llvm::ValueAsMetadata::get();
        llvm::MDNode::replaceOperandWith();
LABEL_26:
        v9 = *(unsigned int *)(v8 + 8);
      }
    }
    if ((*(_BYTE *)(*((_QWORD *)this + 4) + 22) & 2) != 0)
    {
      v22 = (llvm::ArrayType *)llvm::PointerType::get();
      v23 = llvm::ArrayType::get(v22, (llvm::Type *)0x1F);
      *(_QWORD *)v162 = v23;
    }
    else
    {
      v20 = v163;
      if ((_DWORD)v163)
      {
        v21 = 0;
        do
        {
          if (!*((_QWORD *)v162 + v21))
          {
            *((_QWORD *)v162 + v21) = llvm::PointerType::get();
            v20 = v163;
          }
          ++v21;
        }
        while (v20 > v21);
      }
    }
    v24 = (llvm::Type *)llvm::StructType::create();
    llvm::DataLayout::getStructLayout();
    v159 = v161;
    v160 = 0x1F00000000;
    v157[0] = v158;
    v157[1] = (void *)0x1F00000000;
    llvm::SmallVectorImpl<llvm::Value *>::resizeImpl<false>((uint64_t)v157, v163);
    __val[0] = 0;
    v116 = (llvm::Function *)EntryFunction;
    if ((_DWORD)v163)
    {
      v25 = 0;
      v115 = v24;
      v114 = v8;
      do
      {
        v26 = *((_QWORD *)v24 + 2);
        if ((*(_BYTE *)(*((_QWORD *)this + 4) + 22) & 2) != 0)
          v27 = *(uint64_t **)(*(_QWORD *)v26 + 16);
        else
          v27 = (uint64_t *)(v26 + 8 * v25);
        v28 = *v27;
        std::string::basic_string[abi:ne180100]<0>(&v135, "ab.");
        std::to_string(&__dst, __val[0]);
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_dst = &__dst;
        else
          p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        else
          size = __dst.__r_.__value_.__l.__size_;
        v31 = std::string::append(&v135, (const std::string::value_type *)p_dst, size);
        v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
        v153[0] = *((_QWORD *)&v31->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v32;
        v31->__r_.__value_.__l.__size_ = 0;
        v31->__r_.__value_.__r.__words[2] = 0;
        v31->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v135.__r_.__value_.__l.__data_);
        StructTypeInfo = 0;
        if ((*(_BYTE *)(*((_QWORD *)this + 4) + 22) & 2) != 0
          || ((v135.__r_.__value_.__r.__words[0] = 0,
               v33 = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,2u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,2u>>>,unsigned int,llvm::SmallVector<unsigned int,2u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,2u>>>::LookupBucketFor<unsigned int>((uint64_t *)&v127, __val, &v135), (unsigned int *)v135.__r_.__value_.__l.__data_ != &v127[8 * v129])? (v34 = v33): (v34 = 0), v34 != 1))
        {
          String = "air.buffer";
          v42 = 10;
          v37 = "int";
          v38 = 3;
          v43 = "air.read_write";
          v44 = 14;
        }
        else
        {
          v35 = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,2u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,2u>>>,unsigned int,llvm::SmallVector<unsigned int,2u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,2u>>>::FindAndConstruct((uint64_t *)&v127, __val);
          llvm::SmallVector<unsigned int,2u>::SmallVector(&v135, (uint64_t)(v35 + 2));
          if (LODWORD(v135.__r_.__value_.__r.__words[1]) == 1)
          {
            v36 = *(unsigned int **)(v114
                                   - 8 * *(unsigned int *)(v114 + 8)
                                   + 8 * *(unsigned int *)v135.__r_.__value_.__l.__data_);
            v124[0] = "int";
            v124[1] = 3;
            v125 = 1;
            MTLBoundsCheck::getArgTypeName((uint64_t)v36, (uint64_t)v124, (uint64_t)&__dst);
            v38 = __dst.__r_.__value_.__l.__size_;
            v37 = (char *)__dst.__r_.__value_.__r.__words[0];
            v39 = (void *)HIBYTE(v153[0]);
            v40 = (void **)__p[0];
            if (v153[0] < 0)
              v39 = __p[1];
            else
              v40 = __p;
            v122[0] = v40;
            v122[1] = v39;
            v123 = 1;
            MTLBoundsCheck::getArgName(v36, (uint64_t)v122, (uint64_t)&__src);
            if (__src)
              std::string::basic_string[abi:ne180100](&__dst, __src, __len);
            else
              memset(&__dst, 0, sizeof(__dst));
            if (SHIBYTE(v153[0]) < 0)
              operator delete(__p[0]);
            *(_OWORD *)__p = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
            v153[0] = *((_QWORD *)&__dst.__r_.__value_.__l + 2);
            v120.n128_u64[0] = (unint64_t)"air.read_write";
            v120.n128_u64[1] = 14;
            v121 = 1;
            MTLBoundsCheck::getArgAccessType((uint64_t)v36, &v120, (uint64_t)&__dst);
            v44 = __dst.__r_.__value_.__l.__size_;
            v43 = (char *)__dst.__r_.__value_.__r.__words[0];
            String = (char *)llvm::MDString::getString(*(llvm::MDString **)&v36[-2 * v36[2] + 2]);
            v42 = v57;
            StructTypeInfo = MTLBoundsCheck::getStructTypeInfo((uint64_t)v36);
          }
          else
          {
            String = "air.buffer";
            v42 = 10;
            v37 = "int";
            v38 = 3;
            v43 = "air.read_write";
            v44 = 14;
          }
          if ((std::string::size_type *)v135.__r_.__value_.__l.__data_ != &v135.__r_.__value_.__r.__words[2])
            free(v135.__r_.__value_.__l.__data_);
        }
        v135.__r_.__value_.__r.__words[0] = (std::string::size_type)&v135.__r_.__value_.__r.__words[2];
        v135.__r_.__value_.__l.__size_ = 0x800000000;
        __dst.__r_.__value_.__r.__words[0] = MetalModulePass::getMetadata<unsigned int>();
        llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)&v135, (uint64_t *)&__dst);
        if (String)
          std::string::basic_string[abi:ne180100](&__dst, String, v42);
        else
          memset(&__dst, 0, sizeof(__dst));
        __src = (void *)MetalModulePass::getMetadata();
        llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)&v135, (uint64_t *)&__src);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        __dst.__r_.__value_.__r.__words[0] = MetalModulePass::getMetadata((llvm::MDString **)this, (llvm::LLVMContext *)"air.location_index", v45);
        llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)&v135, (uint64_t *)&__dst);
        __dst.__r_.__value_.__r.__words[0] = MetalModulePass::getMetadata<unsigned int>();
        llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)&v135, (uint64_t *)&__dst);
        __dst.__r_.__value_.__r.__words[0] = MetalModulePass::getMetadata<int>();
        llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)&v135, (uint64_t *)&__dst);
        if (v43)
          std::string::basic_string[abi:ne180100](&__dst, v43, v44);
        else
          memset(&__dst, 0, sizeof(__dst));
        __src = (void *)MetalModulePass::getMetadata();
        llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)&v135, (uint64_t *)&__src);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        if (StructTypeInfo)
        {
          __dst.__r_.__value_.__r.__words[0] = MetalModulePass::getMetadata((llvm::MDString **)this, (llvm::LLVMContext *)"air.struct_type_info", v46);
          llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)&v135, (uint64_t *)&__dst);
          llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)&v135, &StructTypeInfo);
        }
        if (llvm::Type::isSized(**(_QWORD **)(v28 + 16)))
        {
          __dst.__r_.__value_.__r.__words[0] = MetalModulePass::getMetadata((llvm::MDString **)this, (llvm::LLVMContext *)"air.arg_type_size", v47);
          llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)&v135, (uint64_t *)&__dst);
          llvm::DataLayout::getTypeSizeInBits(*((_QWORD *)this + 7), **(_QWORD **)(v28 + 16));
          __dst.__r_.__value_.__r.__words[0] = (unint64_t)(v48 + 7) >> 3;
          __dst.__r_.__value_.__l.__size_ = v49 == 1;
          __src = (void *)MetalModulePass::getMetadata();
          llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)&v135, (uint64_t *)&__src);
          __dst.__r_.__value_.__r.__words[0] = MetalModulePass::getMetadata((llvm::MDString **)this, (llvm::LLVMContext *)"air.arg_type_align_size", v50);
          llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)&v135, (uint64_t *)&__dst);
          llvm::DataLayout::getPrefTypeAlignment(*((llvm::DataLayout **)this + 7), **(llvm::Type ***)(v28 + 16));
          __dst.__r_.__value_.__r.__words[0] = MetalModulePass::getMetadata<unsigned long long>();
          llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)&v135, (uint64_t *)&__dst);
        }
        __dst.__r_.__value_.__r.__words[0] = MetalModulePass::getMetadata((llvm::MDString **)this, (llvm::LLVMContext *)"air.arg_type_name", v47);
        llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)&v135, (uint64_t *)&__dst);
        if (v37)
          std::string::basic_string[abi:ne180100](&__dst, v37, v38);
        else
          memset(&__dst, 0, sizeof(__dst));
        __src = (void *)MetalModulePass::getMetadata();
        llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)&v135, (uint64_t *)&__src);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        __dst.__r_.__value_.__r.__words[0] = MetalModulePass::getMetadata((llvm::MDString **)this, (llvm::LLVMContext *)"air.arg_name", v51);
        llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)&v135, (uint64_t *)&__dst);
        __dst.__r_.__value_.__r.__words[0] = MetalModulePass::getMetadata();
        llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)&v135, (uint64_t *)&__dst);
        *((_QWORD *)v157[0] + __val[0]) = llvm::MDTuple::getImpl();
        if ((std::string::size_type *)v135.__r_.__value_.__l.__data_ != &v135.__r_.__value_.__r.__words[2])
          free(v135.__r_.__value_.__l.__data_);
        llvm::DataLayout::getTypeSizeInBits(*((_QWORD *)this + 7), v28);
        __src = (void *)((unint64_t)(v52 + 7) >> 3);
        __len = v53 == 1;
        v54 = v159;
        v55 = v160;
        EntryFunction = (uint64_t)v116;
        v24 = v115;
        v135.__r_.__value_.__r.__words[0] = MetalModulePass::getMetadata<unsigned int>();
        llvm::TypeSize::operator unsigned long long();
        v135.__r_.__value_.__l.__size_ = MetalModulePass::getMetadata<unsigned int>();
        v135.__r_.__value_.__r.__words[2] = MetalModulePass::getMetadata<unsigned int>();
        if (v37)
          std::string::basic_string[abi:ne180100](&__dst, v37, v38);
        else
          memset(&__dst, 0, sizeof(__dst));
        Metadata = MetalModulePass::getMetadata();
        v137 = MetalModulePass::getMetadata();
        v138 = MetalModulePass::getMetadata((llvm::MDString **)this, (llvm::LLVMContext *)"air.indirect_argument", v56);
        v139 = (llvm::BasicBlock *)*((_QWORD *)v157[0] + __val[0]);
        llvm::SmallVectorImpl<llvm::Metadata *>::insert<llvm::Metadata * const*,void>((uint64_t)&v159, (uint64_t)v54 + 8 * v55, (uint64_t *)&v135, &v140);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        if (SHIBYTE(v153[0]) < 0)
          operator delete(__p[0]);
        v25 = __val[0] + 1;
        __val[0] = v25;
      }
      while (v163 > v25);
    }
    Impl = llvm::MDTuple::getImpl();
    llvm::DataLayout::getTypeSizeInBits(*((_QWORD *)this + 7), (uint64_t)v24);
    v60 = v59;
    v62 = v61 == 1;
    PrefTypeAlignment = llvm::DataLayout::getPrefTypeAlignment(*((llvm::DataLayout **)this + 7), v24);
    Name = (void *)llvm::StructType::getName(v24);
    if (Name)
    {
      std::string::basic_string[abi:ne180100](v118, Name, v64);
    }
    else
    {
      v118[0] = 0;
      v118[1] = 0;
      v119 = 0;
    }
    LODWORD(v111) = 1;
    v66 = MetalModulePass::getMDTuple<unsigned int,char const*,char const*,int,int,char const*,char const*,int,char const*,llvm::MDTuple *,char const*,llvm::TypeSize,char const*,unsigned long long,char const*,std::string,char const*,char const*>((llvm::MDString **)this, 0, (llvm::LLVMContext *)"air.indirect_buffer", (llvm::LLVMContext *)"air.location_index", 0, 1, (llvm::LLVMContext *)"air.read", (llvm::LLVMContext *)"air.address_space", v111, (llvm::LLVMContext *)"air.struct_type_info", Impl, (llvm::LLVMContext *)"air.arg_type_size", (unint64_t)(v60 + 7) >> 3, v62, (llvm::LLVMContext *)"air.arg_type_align_size", PrefTypeAlignment, (llvm::LLVMContext *)"air.arg_type_name", (uint64_t)v118, (llvm::LLVMContext *)"air.arg_name",
            (llvm::LLVMContext *)"debug.argument_buffer");
    if (SHIBYTE(v119) < 0)
      operator delete(v118[0]);
    *(_QWORD *)v165[0] = v66;
    *v167 = llvm::PointerType::get();
    v67 = llvm::FunctionType::get();
    llvm::Module::getFunction();
    v68 = *(_DWORD *)(EntryFunction + 32) & 0xF;
    v135.__r_.__value_.__r.__words[0] = (std::string::size_type)"mtl.argument_buffer_wrap";
    LOWORD(v137) = 259;
    v69 = llvm::Function::Create(v67, v68, (uint64_t)&v135, *((_QWORD *)this + 6));
    *(_DWORD *)(EntryFunction + 32) = *(_DWORD *)(EntryFunction + 32) & 0xFFFFBFC0 | 0x4007;
    v135.__r_.__value_.__r.__words[0] = *(_QWORD *)(EntryFunction + 112);
    StructTypeInfo = llvm::AttributeList::getAttributes((llvm::AttributeList *)&v135);
    v70 = llvm::AttributeSet::begin((llvm::AttributeSet *)&StructTypeInfo);
    v71 = llvm::AttributeSet::end((llvm::AttributeSet *)&StructTypeInfo);
    while (v70 != v71)
    {
      llvm::Function::addFnAttr();
      v70 += 8;
    }
    v135.__r_.__value_.__r.__words[0] = *(_QWORD *)(EntryFunction + 112);
    *(_QWORD *)__val = llvm::AttributeList::getAttributes((llvm::AttributeList *)&v135);
    v72 = (_QWORD *)llvm::AttributeSet::begin((llvm::AttributeSet *)__val);
    v73 = llvm::AttributeSet::end((llvm::AttributeSet *)__val);
    while (v72 != (_QWORD *)v73)
      llvm::compat::addAttribute(v69, 0, *v72++);
    llvm::Function::addParamAttr();
    llvm::Function::addParamAttr();
    llvm::Function::addParamAttr();
    __p[0] = v153;
    __p[1] = (void *)0x800000000;
    llvm::SmallVectorImpl<llvm::Value *>::resizeImpl<false>((uint64_t)__p, *(_QWORD *)(EntryFunction + 96));
    if ((_DWORD)v131)
    {
      if (v132)
      {
        v76 = 8 * v132;
        v77 = v130;
        while (*v77 >= 0xFFFFFFFE)
        {
          v77 += 2;
          v76 -= 8;
          if (!v76)
            goto LABEL_126;
        }
      }
      else
      {
        v77 = v130;
      }
      v78 = &v130[2 * v132];
      if (v77 != v78)
      {
LABEL_118:
        v79 = (const llvm::AttributeList *)*v77;
        v80 = v77[1];
        __dst.__r_.__value_.__r.__words[0] = *((_QWORD *)v116 + 14);
        llvm::compat::getParamAttrs((llvm::compat *)&__dst, v79, v74);
        llvm::AttrBuilder::AttrBuilder();
        llvm::Function::addParamAttrs();
        if ((uint64_t *)v135.__r_.__value_.__l.__size_ != &Metadata)
          free((void *)v135.__r_.__value_.__l.__size_);
        if ((*(_WORD *)(v69 + 18) & 1) != 0)
          llvm::Function::BuildLazyArguments((llvm::Function *)v69);
        *((_QWORD *)__p[0] + (_QWORD)v79) = *(_QWORD *)(v69 + 88) + 40 * v80;
        while (1)
        {
          v77 += 2;
          if (v77 == v78)
            break;
          if (*v77 < 0xFFFFFFFE)
          {
            if (v77 != v78)
              goto LABEL_118;
            break;
          }
        }
      }
    }
LABEL_126:
    v81 = (llvm::BasicBlock *)*((_QWORD *)this + 5);
    v135.__r_.__value_.__r.__words[0] = (std::string::size_type)"entry";
    LOWORD(v137) = 259;
    v82 = (llvm::BasicBlock *)llvm::BasicBlock::Create(v81, (llvm::LLVMContext *)&v135, (const llvm::Twine *)v69, 0, v75);
    Context = (llvm::ReturnInst *)llvm::BasicBlock::getContext(v82);
    v84 = (uint64_t)v116;
    v135.__r_.__value_.__r.__words[0] = (std::string::size_type)&v135.__r_.__value_.__r.__words[2];
    v135.__r_.__value_.__l.__size_ = 0x200000000;
    v141 = Context;
    v142 = &v150;
    v143 = &v151;
    v144 = 0;
    v145 = 0;
    v146 = 512;
    v147 = 7;
    v149 = 0;
    v148 = 0;
    v150 = MEMORY[0x24BED83B8] + 16;
    v151 = MEMORY[0x24BED83F0] + 16;
    v139 = v82;
    v140 = (uint64_t)v82 + 40;
    createDebugInfoForWrapperFunction(*((_QWORD *)this + 5), (llvm::IRBuilderBase *)&v135, (llvm::Value *)v69, v116);
    if ((*(_WORD *)(v69 + 18) & 1) != 0)
      llvm::Function::BuildLazyArguments((llvm::Function *)v69);
    if ((_DWORD)v128)
    {
      v85 = *(uint64_t **)(v69 + 88);
      if (v129)
      {
        v86 = 32 * v129;
        v87 = v127;
        while (*v87 >= 0xFFFFFFFE)
        {
          v87 += 8;
          v86 -= 32;
          if (!v86)
            goto LABEL_150;
        }
      }
      else
      {
        v87 = v127;
      }
      if (v87 != &v127[8 * v129])
      {
        v112 = &v127[8 * v129];
        do
        {
          v88 = v87[4];
          if ((_DWORD)v88)
          {
            v89 = (unsigned int *)*((_QWORD *)v87 + 1);
            v90 = *v87;
            v91 = 4 * v88;
            do
            {
              v92 = *v89;
              if ((*(_BYTE *)(*((_QWORD *)this + 4) + 22) & 2) != 0)
              {
                llvm::DataLayout::getTypeSizeInBits(*((_QWORD *)this + 7), *(_QWORD *)v162);
                __dst.__r_.__value_.__r.__words[0] = ((unint64_t)(v95 + 7) >> 3) * v90;
                __dst.__r_.__value_.__l.__size_ = v96 == 1;
                llvm::TypeSize::operator unsigned long long();
                v97 = **(_QWORD **)(*v85 + 16);
                __src = (void *)llvm::ConstantInt::get();
                __len = llvm::ConstantInt::get();
                v156 = llvm::ConstantInt::get();
                v134 = 257;
                v94 = llvm::IRBuilderBase::CreateInBoundsGEP((uint64_t)&v135, v97, v85, (uint64_t **)&__src, 3, (uint64_t)&__dst);
              }
              else
              {
                v93 = **(_QWORD **)(*v85 + 16);
                __src = (void *)llvm::ConstantInt::get();
                __len = llvm::ConstantInt::get();
                v134 = 257;
                v94 = llvm::IRBuilderBase::CreateInBoundsGEP((uint64_t)&v135, v93, v85, (uint64_t **)&__src, 2, (uint64_t)&__dst);
              }
              *((_QWORD *)__p[0] + v92) = v94;
              v98 = *((_QWORD *)__p[0] + v92);
              v99 = **(llvm::Type ***)(*(_QWORD *)v98 + 16);
              v134 = 257;
              AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)&v135, v99, v98, 259, 0, (uint64_t)&__dst);
              *((_QWORD *)__p[0] + v92) = AlignedLoad;
              v101 = (llvm::Type **)*((_QWORD *)__p[0] + v92);
              v102 = *(llvm::Type **)(*(_QWORD *)(*((_QWORD *)v116 + 3) + 16) + 8 * (v92 + 1));
              v134 = 257;
              PointerBitCastOrAddrSpaceCast = llvm::IRBuilderBase::CreatePointerBitCastOrAddrSpaceCast((llvm::IRBuilderBase *)&v135, v101, v102, (const llvm::Twine *)&__dst);
              *((_QWORD *)__p[0] + v92) = PointerBitCastOrAddrSpaceCast;
              if ((*(_BYTE *)(*((_QWORD *)this + 4) + 22) & 2) == 0)
              {
                v104 = llvm::MDString::getString(*((llvm::MDString **)v159 + (7 * v90 + 4)));
                v134 = 261;
                __dst.__r_.__value_.__r.__words[0] = v104;
                __dst.__r_.__value_.__l.__size_ = v105;
                llvm::Value::setName();
              }
              ++v89;
              v91 -= 4;
            }
            while (v91);
          }
          v87 += 8;
          v84 = (uint64_t)v116;
          if (v87 == v112)
            break;
          while (*v87 >= 0xFFFFFFFE)
          {
            v87 += 8;
            if (v87 == v112)
              goto LABEL_150;
          }
        }
        while (v87 != v112);
      }
    }
LABEL_150:
    if (v84)
      v106 = *(_QWORD *)(v84 + 24);
    else
      v106 = 0;
    v134 = 257;
    v107 = (llvm::LLVMContext *)llvm::IRBuilderBase::CreateCall((uint64_t)&v135, v106, v84, (uint64_t)__p[0], LODWORD(__p[1]), (uint64_t)&__dst, 0);
    *((_WORD *)v107 + 9) = *((_WORD *)v107 + 9) & 0xFFFC | 1;
    if (*(_BYTE *)(*(_QWORD *)v107 + 8) == 7)
      v109 = llvm::ReturnInst::Create(v141, 0, 0, v108);
    else
      v109 = llvm::ReturnInst::Create(v141, v107, 0, v108);
    v134 = 257;
    llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)&v135, v109, (uint64_t)&__dst);
    llvm::MDTuple::getImpl();
    llvm::ValueAsMetadata::get();
    llvm::MDNode::replaceOperandWith();
    llvm::MDNode::replaceOperandWith();
    if (*((_DWORD *)this + 30) < 2u)
      MTLArgumentBufferConversion::applyAMDVaryingWA((uint64_t)this);
    llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)&v151);
    llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v150);
    if ((std::string::size_type *)v135.__r_.__value_.__l.__data_ != &v135.__r_.__value_.__r.__words[2])
      free(v135.__r_.__value_.__l.__data_);
    if (__p[0] != v153)
      free(__p[0]);
    if (v157[0] != v158)
      free(v157[0]);
    if (v159 != v161)
      free(v159);
    if (v162 != v164)
      free(v162);
    if (v165[0] != v166)
      free(v165[0]);
    if (v167 != v169)
      free(v167);
    llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,2u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,2u>>>::~DenseMap((uint64_t)&v127);
    llvm::DenseMap<unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>::~DenseMap((uint64_t)&v130);
    isLibraryModule = v113;
  }
  return !isLibraryModule;
}

void sub_241024DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,char a52)
{
  uint64_t v52;
  void *v54;

  if (STACK[0x220] != a32)
    free((void *)STACK[0x220]);
  if (STACK[0x288] != a25)
    free((void *)STACK[0x288]);
  if (STACK[0x390] != a26)
    free((void *)STACK[0x390]);
  if (STACK[0x498] != a27)
    free((void *)STACK[0x498]);
  if (STACK[0x5A0] != a28)
    free((void *)STACK[0x5A0]);
  v54 = *(void **)(v52 - 192);
  if (v54 != (void *)a29)
    free(v54);
  llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,2u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,2u>>>::~DenseMap((uint64_t)&a49);
  llvm::DenseMap<unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>::~DenseMap((uint64_t)&a52);
  _Unwind_Resume(a1);
}

uint64_t llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<decltype(nullptr)>(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(a1, 0);
    v3 = *(_DWORD *)(a1 + 8);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v2) = 0;
    v3 = v2 + 1;
    *(_DWORD *)(a1 + 8) = v3;
  }
  return *(_QWORD *)a1 + 8 * v3 - 8;
}

uint64_t llvm::SmallVectorImpl<unsigned int>::emplace_back<unsigned long long const&>(uint64_t a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a1, *a2);
    v4 = *(_QWORD *)a1;
    v5 = *(_DWORD *)(a1 + 8);
  }
  else
  {
    v4 = *(_QWORD *)a1;
    *(_DWORD *)(*(_QWORD *)a1 + 4 * v3) = *(_QWORD *)a2;
    v5 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v5;
  }
  return v4 + 4 * v5 - 4;
}

uint64_t llvm::Type::isSized(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(a1 + 8);
  if (v1 > 0x11)
    goto LABEL_6;
  v2 = 1;
  if (((1 << v1) & 0xAC7F) != 0)
    return v2;
  if (((1 << v1) & 0x30000) == 0)
  {
LABEL_6:
    if ((v1 & 0xFE) != 0x12 && v1 != 21)
      return 0;
  }
  return llvm::Type::isSizedDerivedType();
}

uint64_t MetalModulePass::getMDTuple<unsigned int,char const*,char const*,int,int,char const*,char const*,int,char const*,llvm::MDTuple *,char const*,llvm::TypeSize,char const*,unsigned long long,char const*,std::string,char const*,char const*>(llvm::MDString **a1, uint64_t a2, llvm::LLVMContext *a3, llvm::LLVMContext *a4, uint64_t a5, uint64_t a6, llvm::LLVMContext *a7, llvm::LLVMContext *a8, uint64_t a9, llvm::LLVMContext *a10, uint64_t a11, llvm::LLVMContext *a12, uint64_t a13, uint64_t a14, llvm::LLVMContext *a15, uint64_t a16, llvm::LLVMContext *a17, uint64_t a18, llvm::LLVMContext *a19, llvm::LLVMContext *a20)
{
  const char *v25;
  const char *v26;
  const char *v27;
  const char *v28;
  const char *v29;
  const char *v30;
  const char *v31;
  const char *v32;
  const char *v33;
  const char *v34;

  MetalModulePass::getMetadata<unsigned int>();
  MetalModulePass::getMetadata(a1, a3, v25);
  MetalModulePass::getMetadata(a1, a4, v26);
  MetalModulePass::getMetadata<int>();
  MetalModulePass::getMetadata<int>();
  MetalModulePass::getMetadata(a1, a7, v27);
  MetalModulePass::getMetadata(a1, a8, v28);
  MetalModulePass::getMetadata<int>();
  MetalModulePass::getMetadata(a1, a10, v29);
  MetalModulePass::getMetadata((uint64_t)a1, a11);
  MetalModulePass::getMetadata(a1, a12, v30);
  MetalModulePass::getMetadata();
  MetalModulePass::getMetadata(a1, a15, v31);
  MetalModulePass::getMetadata<unsigned long long>();
  MetalModulePass::getMetadata(a1, a17, v32);
  MetalModulePass::getMetadata();
  MetalModulePass::getMetadata(a1, a19, v33);
  MetalModulePass::getMetadata(a1, a20, v34);
  return llvm::MDTuple::getImpl();
}

uint64_t llvm::IRBuilderBase::CreateInBoundsGEP(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t **a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  llvm::GetElementPtrInst *v13;

  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *, uint64_t **, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72)
                                                                                               + 48))(*(_QWORD *)(a1 + 72), a2, a3, a4, a5, 1);
  if (!result)
  {
    v13 = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::Create(a2, a3, a4, a5);
    llvm::GetElementPtrInst::setIsInBounds(v13);
    return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)a1, (uint64_t)v13, a6);
  }
  return result;
}

uint64_t MTLArgumentBufferConversion::applyAMDVaryingWA(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(unsigned int *)(this + 120);
  if ((_DWORD)v1)
  {
    if ((_DWORD)v1 != 1)
      abort();
    v2 = 2;
  }
  else
  {
    v2 = 1;
  }
  v3 = *(_QWORD *)(*(_QWORD *)(this + 128) - 8 * *(unsigned int *)(*(_QWORD *)(this + 128) + 8) + 8 * v2);
  v4 = *(unsigned int *)(v3 + 8);
  if ((_DWORD)v4)
  {
    for (i = 0; i != v4; ++i)
    {
      v6 = *(_QWORD *)(v3 - 8 * *(unsigned int *)(v3 + 8) + 8 * i);
      this = llvm::MDString::getString(*(llvm::MDString **)(v6 - 8 * *(unsigned int *)(v6 + 8) + 8 * v1));
      if (v7 == 17)
      {
        this = memcmp((const void *)this, "air.vertex_output", 0x11uLL);
        if ((_DWORD)this)
          continue;
      }
      else
      {
        if (v7 != 18)
          continue;
        v8 = *(_QWORD *)this == 0x676172662E726961 && *(_QWORD *)(this + 8) == 0x706E695F746E656DLL;
        if (!v8 || *(_WORD *)(this + 16) != 29813)
          continue;
      }
      this = llvm::MDString::getString(*(llvm::MDString **)(v6 - 8 * *(unsigned int *)(v6 + 8) + 8 * v2));
      if (v10 == 12)
      {
        this = memcmp((const void *)this, "packedOutput", 0xCuLL);
        if (!(_DWORD)this)
          goto LABEL_28;
      }
      else if (v10 == 11 && *(_QWORD *)this == 0x6E4964656B636170 && *(_QWORD *)(this + 3) == 0x7475706E4964656BLL)
      {
LABEL_28:
        v12 = *(unsigned int *)(v6 + 8);
        if (v2 + 1 < v12)
        {
          v13 = v2;
          do
          {
            this = *(_QWORD *)(v6 - 8 * v12 + 8 * v13 + 8);
            if (!*(_BYTE *)this)
            {
              this = llvm::MDString::getString((llvm::MDString *)this);
              if (v14 == 12 && *(_QWORD *)this == 0x61636F6C2E726961 && *(_DWORD *)(this + 8) == 1852795252)
              {
                llvm::ConstantInt::get();
                llvm::ValueAsMetadata::get();
                this = llvm::MDNode::replaceOperandWith();
              }
            }
            ++v13;
            v12 = *(unsigned int *)(v6 + 8);
          }
          while (v13 + 1 < v12);
        }
      }
    }
  }
  return this;
}

_DWORD *llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,2u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,2u>>>,unsigned int,llvm::SmallVector<unsigned int,2u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,2u>>>::FindAndConstruct(uint64_t *a1, _DWORD *a2)
{
  char v4;
  _DWORD *inserted;
  _DWORD *v7;

  v7 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,2u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,2u>>>,unsigned int,llvm::SmallVector<unsigned int,2u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,2u>>>::LookupBucketFor<unsigned int>(a1, a2, &v7);
  inserted = v7;
  if ((v4 & 1) == 0)
  {
    inserted = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,2u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,2u>>>,unsigned int,llvm::SmallVector<unsigned int,2u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,2u>>>::InsertIntoBucketImpl<unsigned int>((uint64_t)a1, (uint64_t)a2, a2, v7);
    *inserted = *a2;
    *((_QWORD *)inserted + 1) = inserted + 6;
    *((_QWORD *)inserted + 2) = 0x200000000;
  }
  return inserted;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,2u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,2u>>>,unsigned int,llvm::SmallVector<unsigned int,2u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,2u>>>::LookupBucketFor<unsigned int>(uint64_t *a1, _DWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  _DWORD *v7;
  int v8;
  uint64_t result;
  _DWORD *v10;
  int v11;
  BOOL v12;
  int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = (37 * *a2) & (v3 - 1);
    v7 = (_DWORD *)(*a1 + 32 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -1)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -2;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_DWORD *)(v4 + 32 * v6);
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_5;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

_DWORD *llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,2u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,2u>>>,unsigned int,llvm::SmallVector<unsigned int,2u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,2u>>>::InsertIntoBucketImpl<unsigned int>(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6;
  unsigned int v7;
  _DWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,2u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,2u>>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,2u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,2u>>>,unsigned int,llvm::SmallVector<unsigned int,2u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,2u>>>::LookupBucketFor<unsigned int>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_DWORD *llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,2u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,2u>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_DWORD *)MEMORY[0x24268CD5C](32 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,2u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,2u>>>,unsigned int,llvm::SmallVector<unsigned int,2u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,2u>>>::moveFromOldBuckets(a1, (uint64_t)v4, (uint64_t)v4 + 32 * v3);
    return (_DWORD *)llvm::deallocate_buffer(v4, (void *)(32 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      do
      {
        *result = -1;
        result += 8;
        v11 -= 32;
      }
      while (v11);
    }
  }
  return result;
}

void llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,2u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,2u>>>,unsigned int,llvm::SmallVector<unsigned int,2u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,2u>>>::moveFromOldBuckets(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  void *v10;
  _DWORD *v11;

  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_DWORD **)a1;
    v8 = 32 * v6;
    do
    {
      *v7 = -1;
      v7 += 8;
      v8 -= 32;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if (*(_DWORD *)a2 <= 0xFFFFFFFD)
    {
      v11 = 0;
      llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,2u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,2u>>>,unsigned int,llvm::SmallVector<unsigned int,2u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,2u>>>::LookupBucketFor<unsigned int>((uint64_t *)a1, (_DWORD *)a2, &v11);
      v9 = v11;
      *v11 = *(_DWORD *)a2;
      llvm::SmallVector<unsigned int,2u>::SmallVector((_QWORD *)v9 + 1, a2 + 8);
      ++*(_DWORD *)(a1 + 8);
      v10 = *(void **)(a2 + 8);
      if ((void *)(a2 + 24) != v10)
        free(v10);
    }
    a2 += 32;
  }
}

_QWORD *llvm::SmallVector<unsigned int,2u>::SmallVector(_QWORD *a1, uint64_t a2)
{
  *a1 = a1 + 2;
  a1[1] = 0x200000000;
  if (*(_DWORD *)(a2 + 8))
    llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)a1, a2);
  return a1;
}

{
  *a1 = a1 + 2;
  a1[1] = 0x200000000;
  if (*(_DWORD *)(a2 + 8))
    llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)a1, a2);
  return a1;
}

void sub_2410259C4(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  void *v3;

  v3 = v2;
  if (*v1 != v3)
    free(*v1);
  _Unwind_Resume(exception_object);
}

_DWORD *llvm::DenseMapBase<llvm::DenseMap<unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>,unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>::FindAndConstruct(uint64_t *a1, _DWORD *a2)
{
  char v4;
  _DWORD *inserted;
  _DWORD *v7;

  v7 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>,unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>::LookupBucketFor<unsigned int>(a1, a2, &v7);
  inserted = v7;
  if ((v4 & 1) == 0)
  {
    inserted = llvm::DenseMapBase<llvm::DenseMap<unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>,unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>::InsertIntoBucketImpl<unsigned int>((uint64_t)a1, (uint64_t)a2, a2, v7);
    *(_QWORD *)inserted = *a2;
  }
  return inserted;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>,unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>::LookupBucketFor<unsigned int>(uint64_t *a1, _DWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _DWORD *v7;
  int v8;
  uint64_t result;
  _DWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = (37 * *a2) & (v3 - 1);
    v7 = (_DWORD *)(*a1 + 8 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -1)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -2;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_DWORD *)(v4 + 8 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_5;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

_DWORD *llvm::DenseMapBase<llvm::DenseMap<unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>,unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>::InsertIntoBucketImpl<unsigned int>(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6;
  unsigned int v7;
  _DWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>,unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>::LookupBucketFor<unsigned int>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_DWORD *llvm::DenseMap<unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_DWORD *)MEMORY[0x24268CD5C](8 * v8, 4);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>,unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>::moveFromOldBuckets(a1, v4, (_DWORD *)v4 + 2 * v3);
    return (_DWORD *)llvm::deallocate_buffer(v4, (void *)(8 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 8 * v10;
      do
      {
        *result = -1;
        result += 2;
        v11 -= 8;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>,unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>::moveFromOldBuckets(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_DWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7 = -1;
      v7 += 2;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if (*a2 <= 0xFFFFFFFD)
    {
      v10 = 0;
      result = llvm::DenseMapBase<llvm::DenseMap<unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>,unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>::LookupBucketFor<unsigned int>((uint64_t *)v5, a2, &v10);
      v9 = v10;
      *v10 = *a2;
      v9[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

void sub_241025E1C(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  void *v3;

  v3 = v2;
  if (*v1 != v3)
    free(*v1);
  _Unwind_Resume(exception_object);
}

_BYTE *llvm::SmallVectorImpl<llvm::Metadata *>::insert<llvm::Metadata * const*,void>(uint64_t a1, uint64_t a2, uint64_t *__src, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  unint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;

  v5 = __src;
  v7 = *(_QWORD *)a1;
  v8 = (a2 - *(_QWORD *)a1) >> 3;
  v9 = *(unsigned int *)(a1 + 8);
  if (*(_QWORD *)a1 + 8 * v9 == a2)
  {
    llvm::SmallVectorImpl<llvm::Metadata *>::append<llvm::Metadata * const*,void>(a1, __src, a4);
    return (_BYTE *)(*(_QWORD *)a1 + 8 * v8);
  }
  else
  {
    v10 = (char *)a4 - (char *)__src;
    v11 = a4 - __src;
    if (v9 + v11 > *(unsigned int *)(a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v7 = *(_QWORD *)a1;
      v9 = *(unsigned int *)(a1 + 8);
    }
    v12 = (_BYTE *)(v7 + 8 * v8);
    v13 = (_BYTE *)(v7 + 8 * v9);
    v14 = (v13 - v12) >> 3;
    if (v14 >= v11)
    {
      llvm::SmallVectorImpl<llvm::User *>::append<std::move_iterator<llvm::User **>,void>(a1, &v13[-8 * v11], (char *)(v7 + 8 * v9));
      if (&v13[-8 * v11] != v12)
        memmove(&v12[8 * v11], v12, &v13[-8 * v11] - v12);
      if (a4 != v5)
        memmove(v12, v5, (char *)a4 - (char *)v5);
    }
    else
    {
      v15 = v9 + (v10 >> 3);
      *(_DWORD *)(a1 + 8) = v15;
      if (v8 != v9)
      {
        memcpy((void *)(v7 + 8 * v15 - 8 * v14), v12, v13 - v12);
        v16 = v12;
        do
        {
          v17 = *v5++;
          *v16++ = v17;
          --v14;
        }
        while (v14);
      }
      if (v5 != a4)
        memcpy(v13, v5, (char *)a4 - (char *)v5);
    }
  }
  return v12;
}

uint64_t llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,2u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,2u>>>::~DenseMap(uint64_t a1)
{
  llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,2u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,2u>>>,unsigned int,llvm::SmallVector<unsigned int,2u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,2u>>>::destroyAll(a1);
  llvm::deallocate_buffer(*(llvm **)a1, (void *)(32 * *(unsigned int *)(a1 + 16)));
  return a1;
}

void llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,2u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,2u>>>,unsigned int,llvm::SmallVector<unsigned int,2u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,2u>>>::destroyAll(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v1)
  {
    v2 = 32 * v1;
    v3 = *(_QWORD *)a1 + 24;
    do
    {
      if (*(_DWORD *)(v3 - 24) <= 0xFFFFFFFD)
      {
        v4 = *(void **)(v3 - 16);
        if ((void *)v3 != v4)
          free(v4);
      }
      v3 += 32;
      v2 -= 32;
    }
    while (v2);
  }
}

uint64_t llvm::DenseMap<unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>::~DenseMap(uint64_t a1)
{
  llvm::deallocate_buffer(*(llvm **)a1, (void *)(8 * *(unsigned int *)(a1 + 16)));
  return a1;
}

uint64_t MTLCompilerDumpModule(void)
{
  return 0;
}

_QWORD *MTLBuildRequestTypeToString@<X0>(_DWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  unsigned int v4;
  char *v5;

  v4 = *a1 + 1;
  if (v4 > 0x12)
    v5 = "Unknown";
  else
    v5 = off_25111F6B0[v4];
  return std::string::basic_string[abi:ne180100]<0>(a2, v5);
}

uint64_t MTLCompilerObject::MTLCompilerObject(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)(a1 + 24) = 0;
  v3 = a1 + 24;
  *(_QWORD *)(a1 + 16) = a1 + 24;
  v4 = a1 + 16;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 114) = 0u;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 136), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 136) = v5;
  }
  if (disableFreezer(void)::disableFreezerOnce != -1)
    dispatch_once(&disableFreezer(void)::disableFreezerOnce, &__block_literal_global_0);
  *(_QWORD *)(a1 + 88) = MTLGPUCompilerCreate();
  std::__tree<std::__value_type<llvm::Function *,llvm::Value *>,std::__map_value_compare<llvm::Function *,std::__value_type<llvm::Function *,llvm::Value *>,std::less<llvm::Function *>,true>,std::allocator<std::__value_type<llvm::Function *,llvm::Value *>>>::destroy(v4, *(_QWORD **)(a1 + 24));
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = v3;
  return a1;
}

void sub_24102617C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  void **v3;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  free((void *)v1[15]);
  v1[15] = 0;
  v5 = (void *)v1[8];
  if (v5)
  {
    v1[9] = (uint64_t)v5;
    operator delete(v5);
  }
  v6 = *v3;
  if (*v3)
  {
    v1[6] = (uint64_t)v6;
    operator delete(v6);
  }
  std::__tree<std::__value_type<llvm::Function *,llvm::Value *>,std::__map_value_compare<llvm::Function *,std::__value_type<llvm::Function *,llvm::Value *>,std::less<llvm::Function *>,true>,std::allocator<std::__value_type<llvm::Function *,llvm::Value *>>>::destroy(v2, (_QWORD *)v1[3]);
  v7 = v1[1];
  v1[1] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *v1;
  *v1 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  _Unwind_Resume(a1);
}

void MTLCompilerObject::~MTLCompilerObject(MTLCompilerObject *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (**v6)(void);
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *((_QWORD *)this + 9);
  v3 = v2 - *((_QWORD *)this + 8);
  if (v3)
  {
    v4 = 0;
    if ((unint64_t)(v3 >> 3) <= 1)
      v5 = 1;
    else
      v5 = v3 >> 3;
    do
    {
      v6 = *(void (***)(void))(*((_QWORD *)this + 8) + 8 * v4);
      if (v6)
      {
        MTLCompilerPluginInterface::~MTLCompilerPluginInterface(v6);
        MEMORY[0x24268D8F0]();
      }
      ++v4;
    }
    while (v5 != v4);
    v2 = *((_QWORD *)this + 8);
  }
  *((_QWORD *)this + 9) = v2;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  v7 = *((_QWORD *)this + 5);
  v8 = *((_QWORD *)this + 6);
  while (v7 != v8)
  {
    LLVMDisposeMemoryBuffer();
    v7 += 8;
  }
  MTLGPUCompilerDestroy();
  if (*((char *)this + 159) < 0)
    operator delete(*((void **)this + 17));
  free(*((void **)this + 15));
  *((_QWORD *)this + 15) = 0;
  v9 = (void *)*((_QWORD *)this + 8);
  if (v9)
  {
    *((_QWORD *)this + 9) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 5);
  if (v10)
  {
    *((_QWORD *)this + 6) = v10;
    operator delete(v10);
  }
  std::__tree<std::__value_type<llvm::Function *,llvm::Value *>,std::__map_value_compare<llvm::Function *,std::__value_type<llvm::Function *,llvm::Value *>,std::less<llvm::Function *>,true>,std::allocator<std::__value_type<llvm::Function *,llvm::Value *>>>::destroy((uint64_t)this + 16, *((_QWORD **)this + 3));
  v11 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
}

void *MTLCompilerObject::getFunctionFromLib(char **this, void *__handle, const char *__symbol)
{
  void *v5;

  v5 = dlsym(__handle, __symbol);
  if (!v5)
  {
    dlerror();
    MTLCompilerErrorObject::setFormattedErrorMessage(this + 15, "Error: %s \n", __symbol);
  }
  return v5;
}

void *MTLCompilerObject::getComposeImageFuncSPI(MTLCompilerObject *this)
{
  void *result;
  void *v3;

  result = (void *)*((_QWORD *)this + 13);
  if (!result)
  {
    v3 = (void *)*((_QWORD *)this + 12);
    if (v3 || (v3 = openLibComposeFilters(), (*((_QWORD *)this + 12) = v3) != 0))
    {
      result = dlsym(v3, "composeImageFilterFunctionsSPI");
      *((_QWORD *)this + 13) = result;
    }
    else
    {
      return (void *)*((_QWORD *)this + 13);
    }
  }
  return result;
}

void *openLibComposeFilters(void)
{
  std::string *v0;
  __int128 v1;
  void **v2;
  void *v3;
  std::string v5;
  void *__p[2];
  int64_t v7;

  std::string::basic_string[abi:ne180100]<0>(&v5, "/System/Library/PrivateFrameworks/GPUCompiler.framework/Libraries/");
  v0 = std::string::append(&v5, "libComposeFilters.dylib");
  v1 = *(_OWORD *)&v0->__r_.__value_.__l.__data_;
  v7 = v0->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v1;
  v0->__r_.__value_.__l.__size_ = 0;
  v0->__r_.__value_.__r.__words[2] = 0;
  v0->__r_.__value_.__r.__words[0] = 0;
  if (v7 >= 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  v3 = dlopen((const char *)v2, 5);
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  return v3;
}

void sub_241026484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void *MTLCompilerObject::getComposeImageFuncFromLibrariesSPI(MTLCompilerObject *this)
{
  void *result;
  void *v3;

  result = (void *)*((_QWORD *)this + 14);
  if (!result)
  {
    v3 = (void *)*((_QWORD *)this + 12);
    if (v3 || (v3 = openLibComposeFilters(), (*((_QWORD *)this + 12) = v3) != 0))
    {
      result = dlsym(v3, "composeImageFilterFunctionsFromModulesSPI");
      *((_QWORD *)this + 14) = result;
    }
    else
    {
      return (void *)*((_QWORD *)this + 14);
    }
  }
  return result;
}

uint64_t MTLCodeGenServiceCreate(__int128 *a1)
{
  uint64_t v2;

  v2 = operator new();
  MTLCompilerObject::MTLCompilerObject(v2, a1);
  return v2;
}

void sub_24102654C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x24268D8F0](v1, 0x10B2C40789B1B96);
  _Unwind_Resume(a1);
}

MTLCompilerObject *MTLCodeGenServiceDestroy(MTLCompilerObject *result)
{
  if (result)
  {
    MTLCompilerObject::~MTLCompilerObject(result);
    JUMPOUT(0x24268D8F0);
  }
  return result;
}

uint64_t MTLCompilerObject::initDriverPlugin(MTLCompilerObject *this, char *__s2, const void *a3, size_t a4)
{
  char **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;

  v9 = *((_QWORD *)this + 8);
  v8 = (char **)((char *)this + 64);
  v10 = *((_QWORD *)this + 9) - v9;
  if (v10)
  {
    v11 = 0;
    v12 = v10 >> 3;
    if (v12 <= 1)
      v13 = 1;
    else
      v13 = v12;
    do
    {
      v14 = *(_QWORD *)(v9 + 8 * v11);
      if (!strcmp(*(const char **)(v14 + 88), __s2))
      {
        if (a3)
        {
          if (*(_QWORD *)(v14 + 104) == a4 && !memcmp(a3, *(const void **)(v14 + 96), a4))
            return v11;
        }
        else if (!*(_QWORD *)(v14 + 96))
        {
          return v11;
        }
      }
      ++v11;
    }
    while (v13 != v11);
  }
  v15 = operator new();
  *(_QWORD *)(v15 + 144) = 0;
  *(_OWORD *)v15 = 0u;
  *(_OWORD *)(v15 + 16) = 0u;
  *(_OWORD *)(v15 + 32) = 0u;
  *(_OWORD *)(v15 + 48) = 0u;
  *(_OWORD *)(v15 + 64) = 0u;
  *(_OWORD *)(v15 + 80) = 0u;
  *(_OWORD *)(v15 + 96) = 0u;
  *(_OWORD *)(v15 + 112) = 0u;
  *(_OWORD *)(v15 + 123) = 0u;
  *(_BYTE *)(v15 + 136) = MTLGetEnvDefault() != 0;
  if (MTLCompilerPluginInterface::init((MTLCompilerPluginInterface *)v15, __s2, a3, a4))
  {
    v16 = *((_QWORD *)this + 10);
    v17 = (uint64_t *)*((_QWORD *)this + 9);
    if ((unint64_t)v17 >= v16)
    {
      v19 = ((char *)v17 - *v8) >> 3;
      if ((unint64_t)(v19 + 1) >> 61)
        std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
      v20 = v16 - (_QWORD)*v8;
      v21 = v20 >> 2;
      if (v20 >> 2 <= (unint64_t)(v19 + 1))
        v21 = v19 + 1;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
        v22 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v22 = v21;
      if (v22)
        v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)this + 80, v22);
      else
        v23 = 0;
      v24 = (uint64_t *)&v23[8 * v19];
      v25 = &v23[8 * v22];
      *v24 = v15;
      v18 = v24 + 1;
      v27 = (char *)*((_QWORD *)this + 8);
      v26 = (char *)*((_QWORD *)this + 9);
      if (v26 != v27)
      {
        do
        {
          v28 = *((_QWORD *)v26 - 1);
          v26 -= 8;
          *--v24 = v28;
        }
        while (v26 != v27);
        v26 = *v8;
      }
      *((_QWORD *)this + 8) = v24;
      *((_QWORD *)this + 9) = v18;
      *((_QWORD *)this + 10) = v25;
      if (v26)
        operator delete(v26);
    }
    else
    {
      *v17 = v15;
      v18 = v17 + 1;
    }
    *((_QWORD *)this + 9) = v18;
    return (((unint64_t)v18 - *((_QWORD *)this + 8)) >> 3) - 1;
  }
  else
  {
    MTLCompilerPluginInterface::~MTLCompilerPluginInterface((void (**)(void))v15);
    MEMORY[0x24268D8F0]();
    return 0xFFFFFFFFLL;
  }
}

void sub_2410267B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x24268D8F0](v1, 0x10B0C402BB109C8);
  _Unwind_Resume(a1);
}

llvm::NamedMDNode *MTLCompilerObject::collectFunctionConstants(MTLCompilerObject *this, llvm::Module *a2, FunctionDesc *a3)
{
  llvm::NamedMDNode *result;
  llvm::NamedMDNode *v5;
  uint64_t *v6;
  unsigned int NumOperands;
  uint64_t v8;
  uint64_t v9;
  uint64_t Operand;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::MDString *v14;
  uint64_t v15;
  const char *String;
  size_t v17;
  void *v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  __int16 v25;
  __int128 __dst;
  uint64_t v27;
  void *__p[2];
  uint64_t v29;
  uint64_t v30;
  __int16 v31;
  __int16 v32;

  __p[0] = "air.function_constants";
  v31 = 259;
  result = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(a2, (const llvm::Twine *)__p);
  if (result)
  {
    v5 = result;
    v6 = (uint64_t *)((char *)a3 + 72);
    NumOperands = llvm::NamedMDNode::getNumOperands(result);
    v8 = NumOperands;
    std::vector<FunctionConstantDesc>::reserve(v6, NumOperands);
    if (NumOperands)
    {
      v9 = 0;
      do
      {
        __p[0] = 0;
        __p[1] = 0;
        v29 = 0;
        Operand = llvm::NamedMDNode::getOperand(v5);
        v11 = Operand;
        v12 = *(unsigned int *)(Operand + 8);
        if (v12 >= 4)
        {
          v13 = Operand - 8 * v12;
          v14 = *(llvm::MDString **)(v13 + 16);
          v15 = *(_QWORD *)(v13 + 24);
          String = (const char *)llvm::MDString::getString(*(llvm::MDString **)(v13 + 8));
          v18 = (void *)llvm::MDString::getString(v14);
          if (v18)
          {
            std::string::basic_string[abi:ne180100](&__dst, v18, v17);
          }
          else
          {
            __dst = 0uLL;
            v27 = 0;
          }
          if (SHIBYTE(v29) < 0)
            operator delete(__p[0]);
          *(_OWORD *)__p = __dst;
          v29 = v27;
          v19 = strlen(String);
          v30 = dataTypeFromString(String, v19);
          v20 = *(_QWORD *)(v15 + 128);
          v21 = (_QWORD *)(v20 + 24);
          if (*(_DWORD *)(v20 + 32) >= 0x41u)
            v21 = (_QWORD *)*v21;
          v31 = *v21;
          if (*(_DWORD *)(v11 + 8) == 5 && (v22 = *(_QWORD *)(v11 - 8)) != 0)
          {
            v23 = *(_QWORD *)(v22 + 128);
            v24 = (_QWORD *)(v23 + 24);
            if (*(_DWORD *)(v23 + 32) >= 0x41u)
              v24 = (_QWORD *)*v24;
            v25 = *(_DWORD *)v24 != 0;
          }
          else
          {
            v25 = 1;
          }
          v32 = v25;
          std::vector<FunctionConstantDesc>::push_back[abi:ne180100](v6, (__int128 *)__p);
        }
        if (SHIBYTE(v29) < 0)
          operator delete(__p[0]);
        ++v9;
      }
      while (v8 != v9);
    }
    return (llvm::NamedMDNode *)std::vector<FunctionConstantDesc>::shrink_to_fit((uint64_t)v6);
  }
  return result;
}

void sub_241026994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<FunctionConstantDesc>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x666666666666667)
      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<FunctionConstantDesc>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 40 * v6;
    std::vector<FunctionConstantDesc>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<FunctionConstantDesc>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_241026A5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<FunctionConstantDesc>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<FunctionConstantDesc>::push_back[abi:ne180100](uint64_t *a1, __int128 *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  _QWORD v19[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - *a1) >> 3);
    v12 = v11 + 1;
    if (v11 + 1 > 0x666666666666666)
      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
    v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x333333333333333)
      v14 = 0x666666666666666;
    else
      v14 = v12;
    v19[4] = result;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<FunctionConstantDesc>>(result, v14);
    else
      v15 = 0;
    v16 = &v15[40 * v11];
    v19[0] = v15;
    v19[1] = v16;
    v19[3] = &v15[40 * v14];
    v17 = *a2;
    *((_QWORD *)v16 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v16 = v17;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v18 = *((_QWORD *)a2 + 3);
    *((_DWORD *)v16 + 8) = *((_DWORD *)a2 + 8);
    *((_QWORD *)v16 + 3) = v18;
    v19[2] = v16 + 40;
    std::vector<FunctionConstantDesc>::__swap_out_circular_buffer(a1, v19);
    v10 = a1[1];
    result = std::__split_buffer<FunctionConstantDesc>::~__split_buffer((uint64_t)v19);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v9 = *((_QWORD *)a2 + 3);
    *(_DWORD *)(v7 + 32) = *((_DWORD *)a2 + 8);
    *(_QWORD *)(v7 + 24) = v9;
    v10 = v7 + 40;
    a1[1] = v7 + 40;
  }
  a1[1] = v10;
  return result;
}

void sub_241026BB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<FunctionConstantDesc>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<FunctionConstantDesc>::shrink_to_fit(uint64_t result)
{
  unint64_t v1;
  int64x2_t v2;
  int64x2_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v1 = *(_QWORD *)result;
  v2 = *(int64x2_t *)(result + 8);
  v3 = vshrq_n_s64(vsubq_s64(v2, vdupq_n_s64(*(_QWORD *)result)), 3uLL);
  v4 = 0xCCCCCCCCCCCCCCCDLL * v3.i64[0];
  v5 = v4;
  if (0xCCCCCCCCCCCCCCCDLL * v3.i64[1] > v4)
  {
    v6 = (uint64_t *)result;
    v7 = result + 16;
    v14 = v7;
    if (v2.i64[0] == v1)
    {
      v8 = 0;
      v9 = 0;
    }
    else
    {
      v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<FunctionConstantDesc>>(v7, v4);
    }
    v10 = v8;
    v11 = &v8[40 * v5];
    v12 = v11;
    v13 = &v8[40 * v9];
    std::vector<FunctionConstantDesc>::__swap_out_circular_buffer(v6, &v10);
    return std::__split_buffer<FunctionConstantDesc>::~__split_buffer((uint64_t)&v10);
  }
  return result;
}

void sub_241026C7C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x241026C6CLL);
}

void parseFunctions(llvm::Module *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  char *v6;
  char v7;
  llvm::NamedMDNode *NamedMetadata;
  char *v9;
  char v10;
  llvm::NamedMDNode *v11;
  uint64_t Operand;
  uint64_t v13;
  llvm::Value *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t Subprogram;
  int v19;
  llvm::MDString *v20;
  uint64_t String;
  uint64_t v22;
  BOOL v23;
  _QWORD *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v30;
  unint64_t v31;
  unint64_t i;
  llvm::MDString *v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  BOOL v37;
  _QWORD *v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  BOOL v44;
  _QWORD *v45;
  uint64_t v46;
  BOOL v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  BOOL v52;
  _QWORD *v53;
  uint64_t v54;
  BOOL v55;
  BOOL v56;
  _QWORD *v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  BOOL v63;
  BOOL v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  int64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v82;
  uint64_t v83;
  int v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  unint64_t v89;
  uint64_t v90;
  void *v91;
  int8x16_t v92;
  uint64_t v93;
  uint64_t Name;
  uint64_t v95;
  int v96;
  int v97;
  unsigned int v98;
  __int128 v99;
  void *__p[2];
  __int128 v101;
  uint64_t v102;

  std::vector<FunctionDesc>::reserve(a2, 8uLL);
  v4 = 0;
  v5 = -1;
  while (1)
  {
    v6 = entryPointsMetadata[v4];
    LOWORD(Name) = 257;
    if (*v6)
    {
      v91 = v6;
      v7 = 3;
    }
    else
    {
      v7 = 1;
    }
    LOBYTE(Name) = v7;
    NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(a1, (const llvm::Twine *)&v91);
    if (!NamedMetadata || !llvm::NamedMDNode::getNumOperands(NamedMetadata))
      goto LABEL_9;
    if ((unint64_t)(entryPointsType[v4] - 5) > 1)
      break;
    v5 = v4;
LABEL_9:
    if (++v4 == 7)
      goto LABEL_12;
  }
  v5 = v4;
LABEL_12:
  v9 = entryPointsMetadata[v5];
  LOWORD(Name) = 257;
  if (*v9)
  {
    v91 = v9;
    v10 = 3;
  }
  else
  {
    v10 = 1;
  }
  LOBYTE(Name) = v10;
  v11 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(a1, (const llvm::Twine *)&v91);
  Operand = llvm::NamedMDNode::getOperand(v11);
  v13 = 0;
  v14 = *(llvm::Value **)(*(_QWORD *)(Operand - 8 * *(unsigned int *)(Operand + 8)) + 128);
  Name = 0;
  v95 = 0;
  v99 = 0u;
  *(_OWORD *)__p = 0u;
  v101 = 0u;
  v91 = v14;
  v15 = *(unsigned int *)(Operand + 8);
  v16 = Operand - 8 * v15;
  v92 = vextq_s8(*(int8x16_t *)(v16 + 8), *(int8x16_t *)(v16 + 8), 8uLL);
  if (v15 >= 4)
    v13 = *(_QWORD *)(v16 + 24);
  v93 = v13;
  Name = llvm::Value::getName(v14);
  v95 = v17;
  v96 = v5;
  Subprogram = llvm::Function::getSubprogram(v14);
  if (Subprogram)
    v19 = *(_DWORD *)(Subprogram + 24);
  else
    v19 = 0;
  v97 = v19;
  BYTE1(v98) = -4;
  if (entryPointsType[v96] == 6)
  {
    v20 = *(llvm::MDString **)(Operand - 8 * *(unsigned int *)(Operand + 8) + 24);
    String = llvm::MDString::getString(v20);
    if (v22 == 12
      && (*(_QWORD *)String == 0x616972742E726961 ? (v23 = *(_DWORD *)(String + 8) == 1701603182) : (v23 = 0), v23))
    {
      v30 = v98 & 0xFFFCFFFF | 0x10000;
    }
    else
    {
      v24 = (_QWORD *)llvm::MDString::getString(v20);
      if (v25 == 16 && (*v24 == 0x6E756F622E726961 ? (v26 = v24[1] == 0x786F625F676E6964) : (v26 = 0), v26))
      {
        v30 = v98 & 0xFFFCFFFF | 0x20000;
      }
      else
      {
        v27 = llvm::MDString::getString(v20);
        if (v28 != 9)
          goto LABEL_41;
        if (*(_QWORD *)v27 != 0x767275632E726961 || *(_BYTE *)(v27 + 8) != 101)
          goto LABEL_41;
        v30 = v98 | 0x30000;
      }
    }
    v98 = v30;
LABEL_41:
    v31 = *(unsigned int *)(Operand + 8);
    if (v31 >= 5)
    {
      for (i = 4; i < v31; ++i)
      {
        v33 = *(llvm::MDString **)(Operand - 8 * v31 + 8 * i);
        if (!*(_BYTE *)v33)
        {
          v34 = llvm::MDString::getString(*(llvm::MDString **)(Operand - 8 * v31 + 8 * i));
          if (v35 == 17
            && (*(_QWORD *)v34 == 0x616972742E726961
              ? (v36 = *(_QWORD *)(v34 + 8) == 0x7461645F656C676ELL)
              : (v36 = 0),
                v36 ? (v37 = *(_BYTE *)(v34 + 16) == 97) : (v37 = 0),
                v37))
          {
            v65 = 2;
          }
          else
          {
            v38 = (_QWORD *)llvm::MDString::getString(v33);
            if (v39 == 14
              && (*v38 == 0x74736E692E726961
                ? (v40 = *(_QWORD *)((char *)v38 + 6) == 0x676E69636E617473)
                : (v40 = 0),
                  v40))
            {
              v65 = 1;
            }
            else
            {
              v41 = llvm::MDString::getString(v33);
              if (v42 == 20
                && (*(_QWORD *)v41 == 0x6C726F772E726961
                  ? (v43 = *(_QWORD *)(v41 + 8) == 0x5F65636170735F64)
                  : (v43 = 0),
                    v43 ? (v44 = *(_DWORD *)(v41 + 16) == 1635017060) : (v44 = 0),
                    v44))
              {
                v65 = 3;
              }
              else
              {
                v45 = (_QWORD *)llvm::MDString::getString(v33);
                if (v46 == 19
                  && (*v45 == 0x74736E692E726961 ? (v47 = v45[1] == 0x746F6D5F65636E61) : (v47 = 0),
                      v47 ? (v48 = *(_QWORD *)((char *)v45 + 11) == 0x6E6F69746F6D5F65) : (v48 = 0),
                      v48))
                {
                  v65 = 4;
                }
                else
                {
                  v49 = llvm::MDString::getString(v33);
                  if (v50 == 20
                    && (*(_QWORD *)v49 == 0x6D6972702E726961
                      ? (v51 = *(_QWORD *)(v49 + 8) == 0x6F6D5F6576697469)
                      : (v51 = 0),
                        v51 ? (v52 = *(_DWORD *)(v49 + 16) == 1852795252) : (v52 = 0),
                        v52))
                  {
                    v65 = 5;
                  }
                  else
                  {
                    v53 = (_QWORD *)llvm::MDString::getString(v33);
                    if (v54 == 19
                      && (*v53 == 0x657478652E726961 ? (v55 = v53[1] == 0x6D696C5F6465646ELL) : (v55 = 0),
                          v55 ? (v56 = *(_QWORD *)((char *)v53 + 11) == 0x7374696D696C5F64) : (v56 = 0),
                          v56))
                    {
                      v65 = 6;
                    }
                    else
                    {
                      v57 = (_QWORD *)llvm::MDString::getString(v33);
                      if (v58 == 14
                        && (*v57 == 0x767275632E726961
                          ? (v59 = *(_QWORD *)((char *)v57 + 6) == 0x617461645F657672)
                          : (v59 = 0),
                            v59))
                      {
                        v65 = 7;
                      }
                      else
                      {
                        v60 = llvm::MDString::getString(v33);
                        if (v61 == 26
                          && (*(_QWORD *)v60 == 0x746C756D2E726961
                            ? (v62 = *(_QWORD *)(v60 + 8) == 0x5F6C6576656C5F69)
                            : (v62 = 0),
                              v62 ? (v63 = *(_QWORD *)(v60 + 16) == 0x69636E6174736E69) : (v63 = 0),
                              v63 ? (v64 = *(unsigned __int16 *)(v60 + 24) == 26478) : (v64 = 0),
                              v64))
                        {
                          v102 = 1;
                          std::vector<MTLTagType>::push_back[abi:ne180100]((uint64_t)&__p[1], &v102);
                          v65 = 8;
                        }
                        else
                        {
                          v65 = 0;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          v66 = (char *)v101;
          if ((unint64_t)v101 >= *((_QWORD *)&v101 + 1))
          {
            v68 = (char *)__p[1];
            v69 = (uint64_t)(v101 - (unint64_t)__p[1]) >> 3;
            v70 = v69 + 1;
            if ((unint64_t)(v69 + 1) >> 61)
              std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
            v71 = *((_QWORD *)&v101 + 1) - (unint64_t)__p[1];
            if ((uint64_t)(*((_QWORD *)&v101 + 1) - (unint64_t)__p[1]) >> 2 > v70)
              v70 = v71 >> 2;
            if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8)
              v72 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v72 = v70;
            if (v72)
            {
              v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v101 + 8, v72);
              v68 = (char *)__p[1];
              v66 = (char *)v101;
            }
            else
            {
              v73 = 0;
            }
            v74 = (uint64_t *)&v73[8 * v69];
            *v74 = v65;
            v67 = v74 + 1;
            while (v66 != v68)
            {
              v75 = *((_QWORD *)v66 - 1);
              v66 -= 8;
              *--v74 = v75;
            }
            __p[1] = v74;
            *(_QWORD *)&v101 = v67;
            *((_QWORD *)&v101 + 1) = &v73[8 * v72];
            if (v68)
              operator delete(v68);
          }
          else
          {
            *(_QWORD *)v101 = v65;
            v67 = v66 + 8;
          }
          *(_QWORD *)&v101 = v67;
          v31 = *(unsigned int *)(Operand + 8);
        }
      }
    }
  }
  if (entryPointsType[v96] == 1)
  {
    v76 = *(unsigned int *)(Operand + 8);
    if (v76 >= 4)
    {
      v77 = *(_QWORD *)(Operand - 8 * v76 + 24);
      v78 = *(unsigned int *)(v77 + 8);
      if (v78 >= 2)
      {
        v79 = llvm::MDString::getString(*(llvm::MDString **)(v77 - 8 * v78));
        if (v80 == 9 && *(_QWORD *)v79 == 0x637461702E726961 && *(_BYTE *)(v79 + 8) == 104)
        {
          v82 = (_QWORD *)llvm::MDString::getString(*(llvm::MDString **)(v77 - 8 * *(unsigned int *)(v77 + 8) + 8));
          if (v83 == 8 && *v82 == 0x656C676E61697274)
            v84 = 256;
          else
            v84 = 512;
          v85 = v98 & 0xFFFFFCFF | v84;
          v98 = v85;
          v86 = *(unsigned int *)(v77 + 8);
          if (v86 >= 4)
          {
            v87 = *(_QWORD *)(*(_QWORD *)(v77 - 8 * v86 + 24) + 128);
            v88 = (_QWORD *)(v87 + 24);
            if (*(_DWORD *)(v87 + 32) >= 0x41u)
              v88 = (_QWORD *)*v88;
            v98 = v85 & 0xFFFF03FF | ((*(_DWORD *)v88 & 0x3F) << 10);
          }
        }
      }
    }
  }
  v89 = a2[1];
  if (v89 >= a2[2])
  {
    v90 = std::vector<FunctionDesc>::__push_back_slow_path<FunctionDesc const&>(a2, (uint64_t)&v91);
  }
  else
  {
    std::allocator<FunctionDesc>::construct[abi:ne180100]<FunctionDesc,FunctionDesc const&>((uint64_t)(a2 + 2), a2[1], (uint64_t)&v91);
    v90 = v89 + 120;
    a2[1] = v89 + 120;
  }
  a2[1] = v90;
  if (__p[1])
  {
    *(void **)&v101 = __p[1];
    operator delete(__p[1]);
  }
  v102 = (uint64_t)&v99;
  std::vector<FunctionConstantDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v102);
}

void sub_24102744C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  FunctionDesc::~FunctionDesc((FunctionDesc *)va);
  _Unwind_Resume(a1);
}

void **std::vector<FunctionDesc>::reserve(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (0xEEEEEEEEEEEEEEEFLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x222222222222223)
      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<FunctionDesc>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 120 * v6;
    std::vector<FunctionDesc>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<FunctionDesc>::~__split_buffer(v7);
  }
  return result;
}

void sub_241027524(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<FunctionDesc>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::vector<MTLTagType>::push_back[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v4 = a1 + 16;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *(_QWORD **)a1;
    v9 = ((uint64_t)v6 - *(_QWORD *)a1) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>(v4, v12);
      v8 = *(_QWORD **)a1;
      v6 = *(_QWORD **)(a1 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = *a2;
    v7 = v14 + 8;
    while (v6 != v8)
    {
      v16 = *--v6;
      *((_QWORD *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v6 = *a2;
    v7 = v6 + 1;
  }
  *(_QWORD *)(a1 + 8) = v7;
}

void FunctionDesc::~FunctionDesc(FunctionDesc *this)
{
  void *v2;
  void **v3;

  v2 = (void *)*((_QWORD *)this + 12);
  if (v2)
  {
    *((_QWORD *)this + 13) = v2;
    operator delete(v2);
  }
  v3 = (void **)((char *)this + 72);
  std::vector<FunctionConstantDesc>::__destroy_vector::operator()[abi:ne180100](&v3);
}

BOOL stringStartsWith(const char *a1, const char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return strncmp(a1, __s, v4) == 0;
}

uint64_t isEntryPointFunctionType(int a1)
{
  return ((unint64_t)entryPointsType[a1] < 9) & (0x18Eu >> entryPointsType[a1]);
}

uint64_t eliminateOtherEntryPoints(llvm::Module *this, const char *a2, MTLFunctionType *a3)
{
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t NamedMetadata;
  llvm::NamedMDNode *v10;
  unsigned int v11;
  uint64_t Operand;
  uint64_t v13;
  size_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  char v20;
  uint64_t v21;
  _QWORD v22[4];
  __int16 v23;

  v6 = 0;
  v20 = 0;
  do
  {
    v7 = entryPointsMetadata[v6];
    v23 = 257;
    if (*v7)
    {
      v22[0] = v7;
      v8 = 3;
    }
    else
    {
      v8 = 1;
    }
    LOBYTE(v23) = v8;
    NamedMetadata = llvm::Module::getNamedMetadata(this, (const llvm::Twine *)v22);
    if (NamedMetadata)
    {
      v10 = (llvm::NamedMDNode *)NamedMetadata;
      v11 = 0;
      v21 = 0;
      while (v11 < llvm::NamedMDNode::getNumOperands(v10))
      {
        Operand = llvm::NamedMDNode::getOperand(v10);
        v22[0] = llvm::Value::getName(*(llvm::Value **)(*(_QWORD *)(Operand - 8 * *(unsigned int *)(Operand + 8))
                                                      + 128));
        v22[1] = v13;
        if (a2)
          v14 = strlen(a2);
        else
          v14 = 0;
        ++v11;
        if (!llvm::StringRef::compare((uint64_t)v22, a2, v14))
        {
          if (a3)
            *a3 = entryPointsType[v6];
          llvm::TrackingMDRef::reset(&v21, Operand);
          v20 = 1;
          break;
        }
      }
      v15 = entryPointsType[v6];
      v16 = v15 > 8;
      v17 = (1 << v15) & 0x18E;
      if (!v16 && v17 != 0)
      {
        llvm::NamedMDNode::eraseFromParent(v10);
        if (v21)
        {
          if (entryPointsMetadata[v6])
            strlen(entryPointsMetadata[v6]);
          llvm::Module::getOrInsertNamedMetadata();
          llvm::NamedMDNode::addOperand();
        }
      }
      llvm::TrackingMDRef::~TrackingMDRef((llvm::TrackingMDRef *)&v21);
    }
    ++v6;
  }
  while (v6 != 7);
  return v20 & 1;
}

void sub_241027870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  llvm::TrackingMDRef::~TrackingMDRef((llvm::TrackingMDRef *)va);
  _Unwind_Resume(a1);
}

_QWORD *llvm::TrackingMDRef::reset(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;

  v3 = result;
  if (*result)
    result = (_QWORD *)llvm::MetadataTracking::untrack();
  *v3 = a2;
  if (a2)
    return (_QWORD *)llvm::MetadataTracking::track();
  return result;
}

uint64_t fixLinkage(llvm::Module *this, const char *a2)
{
  char v3;
  llvm::NamedMDNode *NamedMetadata;
  uint64_t Operand;
  uint64_t v6;
  char *v7;
  char *v8;
  llvm::GlobalValue *v9;
  const char *v11;
  char v12;
  char v13;

  v3 = 1;
  v13 = 1;
  if (*a2)
  {
    v11 = a2;
    v3 = 3;
  }
  v12 = v3;
  NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(this, (const llvm::Twine *)&v11);
  Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
  v6 = *(_QWORD *)(*(_QWORD *)(Operand - 8 * *(unsigned int *)(Operand + 8)) + 128);
  v7 = (char *)this + 24;
  v8 = (char *)*((_QWORD *)this + 4);
  if (v8 != (char *)this + 24)
  {
    do
    {
      if (v8)
        v9 = (llvm::GlobalValue *)(v8 - 56);
      else
        v9 = 0;
      if ((llvm::GlobalValue::isDeclaration(v9) & 1) == 0)
        *((_DWORD *)v9 + 8) = *((_DWORD *)v9 + 8) & 0xFFFFBFC0 | 0x4007;
      v8 = (char *)*((_QWORD *)v8 + 1);
    }
    while (v8 != v7);
  }
  llvm::GlobalValue::setLinkage(v6, 0);
  return v6;
}

llvm::Constant *getLLVMConstantValue(llvm::LLVMContext *a1, MTLDataType a2, const unsigned __int8 *a3)
{
  uint64_t ComponentType;
  llvm::LLVMContext *v5;
  int ComponentCount;
  char v7;
  llvm::Constant *result;

  ComponentType = MTLDataTypeGetComponentType();
  ComponentCount = MTLDataTypeGetComponentCount();
  if (ComponentType <= 32)
  {
    switch(ComponentType)
    {
      case 3:
        llvm::Type::getFloatTy(a1, v5);
        result = (llvm::Constant *)llvm::ConstantDataVector::getFP();
        break;
      case 16:
        llvm::Type::getHalfTy(a1, v5);
        result = (llvm::Constant *)llvm::ConstantDataVector::getFP();
        break;
      case 29:
LABEL_10:
        result = (llvm::Constant *)llvm::ConstantDataVector::get();
        break;
      default:
        goto LABEL_19;
    }
  }
  else
  {
    v7 = ComponentType - 37;
    if ((unint64_t)(ComponentType - 37) > 0x30)
      goto LABEL_18;
    if (((1 << v7) & 0x11100) != 0)
    {
      result = (llvm::Constant *)llvm::ConstantDataVector::get();
    }
    else
    {
      if (((1 << v7) & 0x11) == 0)
      {
        if (((1 << v7) & 0x1100000000000) != 0)
        {
          result = (llvm::Constant *)llvm::ConstantDataVector::get();
          goto LABEL_15;
        }
LABEL_18:
        if (ComponentType != 33)
LABEL_19:
          abort();
        goto LABEL_10;
      }
      result = (llvm::Constant *)llvm::ConstantDataVector::get();
    }
  }
LABEL_15:
  if (ComponentCount == 1)
    return (llvm::Constant *)llvm::Constant::getAggregateElement(result);
  return result;
}

uint64_t MTLCompilerObject::getReadParametersFromRequest(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unsigned int *a5, uint64_t a6)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v13;
  uint64_t v15;
  unint64_t v16;
  int v17;

  *(_WORD *)a2 = *((_WORD *)a5 + 3);
  v6 = a3 + a5[2];
  *(_QWORD *)(a2 + 8) = a5[3];
  *(_QWORD *)(a2 + 16) = v6;
  LODWORD(v6) = *(_DWORD *)(a6 + 4);
  *(_BYTE *)(a2 + 65) = BYTE2(v6) & 1;
  *(_BYTE *)(a2 + 64) = (v6 & 0x8000) == 0;
  *(_DWORD *)(a2 + 80) = *(_DWORD *)(a6 + 268);
  v7 = *(_OWORD *)(a5 + 6);
  *(_OWORD *)(a2 + 100) = *(_OWORD *)(a5 + 10);
  *(_OWORD *)(a2 + 84) = v7;
  v8 = a5[5];
  *(_QWORD *)(a2 + 24) = v8;
  if ((_DWORD)v8)
    v9 = a3 + a5[4];
  else
    v9 = 0;
  *(_QWORD *)(a2 + 32) = v9;
  *(_QWORD *)(a2 + 48) = a3 + *a5;
  v10 = *(unsigned int *)(a3 + 32);
  if (v10 > a4)
    goto LABEL_14;
  v13 = *(unsigned int *)(a3 + 36);
  if ((v13 + v10) > a4)
    goto LABEL_14;
  if ((_DWORD)v13)
  {
    v15 = a3 + v10;
    if (strnlen((const char *)(a3 + v10), *(unsigned int *)(a3 + 36)) < v13)
      *(_QWORD *)(a2 + 56) = v15;
  }
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a3 + 48);
  v16 = *(unsigned int *)(a3 + 168);
  if (v16 > a4 || (v17 = *(_DWORD *)(a3 + 172), (v17 + v16) > a4))
LABEL_14:
    abort();
  if (v17)
    *(_QWORD *)(a2 + 72) = a3 + v16;
  return 1;
}

uint64_t MTLCompilerObject::upgradeAIRModule(MTLCompilerObject *this, llvm::Module *a2, int a3, int a4)
{
  _DWORD v7[2];
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (a4 | a3 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67109376;
    v7[1] = a3;
    v8 = 1024;
    v9 = a4;
    _os_log_impl(&dword_240FA3000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "MTLCompiler upgrade pass forced to use air version %d.%d", (uint8_t *)v7, 0xEu);
  }
  return MTLUpgradeAIRModule();
}

llvm::Module *MTLCompilerObject::readModuleFromBinaryRequest(uint64_t a1, unsigned __int16 *a2, llvm::LLVMContext *a3, MTLFunctionType *a4, void **a5, unint64_t *a6, int a7)
{
  void *v13;
  const void *v14;
  int v15;
  llvm::Module *v16;
  uint64_t v17;
  uint64_t v18;
  llvm::Module *v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char *v24;
  void **v25;
  void *v26;
  unsigned int VersionMetadata;
  const char *v28;
  uint64_t v29;
  char *v30;
  char v31;
  uint64_t v32;
  unint64_t *v34;
  _QWORD v36[4];
  __int16 v37;
  std::string v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  llvm::Module *v43;
  void *__p[2];
  char v45;
  unsigned __int8 v46;
  __int16 v47;
  int v48;
  uint64_t v49[4];

  v49[2] = *MEMORY[0x24BDAC8D0];
  v43 = 0;
  v13 = (void *)*((_QWORD *)a2 + 3);
  v14 = (const void *)*((_QWORD *)a2 + 4);
  v15 = *a2;
  if ((v15 | 2) == 3)
  {
    v16 = (llvm::Module *)moduleFromOpenGLBitcode(v15 == 3, a3, *((const void **)a2 + 2), *((_QWORD *)a2 + 1), v14, (unint64_t)v13, a5, a6);
    v19 = v16;
    v43 = v16;
    v20 = *a2;
    *(_BYTE *)(a1 + 128) = 1;
    if (!v16)
    {
      MTLCompilerErrorObject::setFormattedErrorMessage((char **)(a1 + 120), "Failed to process function bitcode(%d) in plugin", v20);
      return 0;
    }
    goto LABEL_14;
  }
  v21 = *((_QWORD *)a2 + 1);
  v39 = *((_QWORD *)a2 + 2);
  v40 = v21;
  v41 = &unk_24105C402;
  v42 = 0;
  llvm::getLazyBitcodeModule();
  llvm::expectedToErrorOrAndEmitErrors<std::unique_ptr<llvm::Module>>(v49, (uint64_t)__p);
  llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected((uint64_t)v49);
  if ((v45 & 1) != 0)
  {
    v16 = (llvm::Module *)MTLCompilerErrorObject::setErrorMessage((MTLCompilerErrorObject *)(a1 + 120), "Failed to read function bitcode.");
    v19 = 0;
    goto LABEL_8;
  }
  v19 = (llvm::Module *)__p[0];
  v43 = (llvm::Module *)__p[0];
  __p[0] = 0;
  v16 = (llvm::Module *)llvm::Module::materializeAll(v43);
  if (v36[0])
  {
    MTLCompilerErrorObject::setErrorMessage((MTLCompilerErrorObject *)(a1 + 120), "Failed to materializeAll.");
    v16 = (llvm::Module *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v36[0] + 8))(v36[0]);
LABEL_8:
    v22 = 1;
    goto LABEL_9;
  }
  v22 = 0;
LABEL_9:
  if ((v45 & 1) == 0)
  {
    v16 = (llvm::Module *)__p[0];
    __p[0] = 0;
    if (v16)
    {
      v23 = MEMORY[0x24268D17C]();
      v16 = (llvm::Module *)MEMORY[0x24268D8F0](v23, 0x10B2C407FF26C1CLL);
    }
  }
  if (v22)
    goto LABEL_59;
  v20 = *a2;
LABEL_14:
  if (v20 == 2)
  {
    v19 = (llvm::Module *)moduleFromOpenCLModule(a3, v19, (uint64_t)v14, v13, a5, (void **)a6, v17, v18, v34);
    v16 = 0;
    v43 = v19;
    *(_BYTE *)(a1 + 129) = 1;
    if (!v19)
    {
      MTLCompilerErrorObject::setFormattedErrorMessage((char **)(a1 + 120), "Failed to process function bitcode(%d) in plugin", *a2);
      return 0;
    }
  }
  v24 = (char *)*((_QWORD *)a2 + 7);
  if (v24)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, v24);
    v25 = (v46 & 0x80u) == 0 ? __p : (void **)__p[0];
    v26 = (v46 & 0x80u) == 0 ? (void *)v46 : __p[1];
    llvm::Module::setTargetTriple((uint64_t)v19, v25, (size_t)v26);
    if ((char)v46 < 0)
      operator delete(__p[0]);
  }
  if (*(_BYTE *)(a1 + 128)
    || (v19 = v43,
        MTLCompilerObject::upgradeAIRModule(v16, v43, *((_DWORD *)a2 + 10), *((_DWORD *)a2 + 11))))
  {
    if (*((_BYTE *)a2 + 64))
    {
      v19 = v43;
      if (*((char *)v43 + 239) < 0)
        std::string::__init_copy_ctor_external(&v38, *((const std::string::value_type **)v43 + 27), *((_QWORD *)v43 + 28));
      else
        v38 = *(std::string *)((_BYTE *)v43 + 9);
      v37 = 260;
      v36[0] = &v38;
      MEMORY[0x24268D188](__p, v36);
      v36[0] = "air.version";
      v37 = 259;
      if (llvm::Module::getNamedMetadata(v19, (const llvm::Twine *)v36))
        VersionMetadata = readVersionMetadata(v19, "air.version", 0, 0, 0);
      else
        VersionMetadata = 0;
      if (((VersionMetadata > 0x20003) & ~_os_feature_enabled_impl()) == 0 && v48 != 7)
      {
        MTLCompilerErrorObject::setErrorMessage((MTLCompilerErrorObject *)(a1 + 120), "Target OS is incompatible.");
        if ((char)v46 < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v38.__r_.__value_.__l.__data_);
        v43 = 0;
        goto LABEL_60;
      }
      if ((char)v46 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v38.__r_.__value_.__l.__data_);
    }
    if (!a7)
    {
      v29 = 0;
      *a4 = 0xFFFFLL;
      v19 = v43;
      while (1)
      {
        v30 = entryPointsMetadata[v29];
        v47 = 257;
        if (*v30)
        {
          __p[0] = v30;
          v31 = 3;
        }
        else
        {
          v31 = 1;
        }
        LOBYTE(v47) = v31;
        if (llvm::Module::getNamedMetadata(v19, (const llvm::Twine *)__p))
          break;
        if (++v29 == 7)
          return v19;
      }
      *a4 = entryPointsType[v29];
      return v19;
    }
    v28 = (const char *)*((_QWORD *)a2 + 6);
    *a4 = MTLFunctionTypeVertex;
    v19 = v43;
    if ((eliminateOtherEntryPoints(v43, v28, a4) & 1) != 0)
      return v19;
    MTLCompilerErrorObject::setFormattedErrorMessage((char **)(a1 + 120), "Function %s was not found in the module.", v28);
  }
  else
  {
    MTLCompilerErrorObject::setErrorMessage((MTLCompilerErrorObject *)(a1 + 120), "Failed to upgrade function bitcode");
  }
LABEL_59:
  v43 = 0;
  if (v19)
  {
LABEL_60:
    v32 = MEMORY[0x24268D17C](v19);
    MEMORY[0x24268D8F0](v32, 0x10B2C407FF26C1CLL);
    return 0;
  }
  return v19;
}

void sub_2410281E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,char a30,int a31,__int16 a32,char a33)
{
  std::unique_ptr<llvm::Module>::reset[abi:ne180100](&a27, 0);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<llvm::Module>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    MEMORY[0x24268D17C]();
    JUMPOUT(0x24268D8F0);
  }
  return result;
}

void llvm::expectedToErrorOrAndEmitErrors<std::unique_ptr<llvm::Module>>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((a1[1] & 1) != 0)
  {
    v4 = *a1;
    *a1 = 0;
    v7 = v4;
    v5 = llvm::errorToErrorCodeAndEmitErrors();
    *(_BYTE *)(a2 + 16) |= 1u;
    *(_QWORD *)a2 = v5;
    *(_QWORD *)(a2 + 8) = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  else
  {
    *(_BYTE *)(a2 + 16) &= ~1u;
    v3 = *a1;
    *a1 = 0;
    *(_QWORD *)a2 = v3;
  }
}

void sub_24102836C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

double llvm::Module::setTargetTriple(uint64_t a1, void *__src, size_t __len)
{
  __int128 *p_dst;
  size_t v7;
  size_t v8;
  void **v9;
  double result;
  __int128 __dst;
  unint64_t v12;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    p_dst = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&__dst + 1) = __len;
    v12 = v8 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v12) = __len;
  p_dst = &__dst;
  if (__len)
LABEL_8:
    memmove(p_dst, __src, __len);
  *((_BYTE *)p_dst + __len) = 0;
  v9 = (void **)(a1 + 216);
  if (*(char *)(a1 + 239) < 0)
    operator delete(*v9);
  result = *(double *)&__dst;
  *(_OWORD *)v9 = __dst;
  *(_QWORD *)(a1 + 232) = v12;
  return result;
}

uint64_t readVersionMetadata(llvm::Module *a1, const char *a2, unsigned int a3, int a4, int a5)
{
  char v8;
  llvm::NamedMDNode *NamedMetadata;
  uint64_t Operand;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  const char *v18;
  char v19;
  char v20;

  v8 = 1;
  v20 = 1;
  if (*a2)
  {
    v18 = a2;
    v8 = 3;
  }
  v19 = v8;
  NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(a1, (const llvm::Twine *)&v18);
  if (!NamedMetadata)
    return (a5 + (a4 << 16));
  Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
  v11 = Operand - 8 * *(unsigned int *)(Operand + 8);
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 8 * a3) + 128);
  v13 = (_QWORD *)(v12 + 24);
  if (*(_DWORD *)(v12 + 32) >= 0x41u)
    v13 = (_QWORD *)*v13;
  v14 = *(_DWORD *)v13;
  v15 = *(_QWORD *)(*(_QWORD *)(v11 + 8 * (a3 + 1)) + 128);
  v16 = (_QWORD *)(v15 + 24);
  if (*(_DWORD *)(v15 + 32) >= 0x41u)
    v16 = (_QWORD *)*v16;
  return (*(_DWORD *)v16 + (v14 << 16));
}

uint64_t MTLCompilerObject::applyConstantValues(uint64_t a1, llvm::LLVMContext *this, uint64_t a3, uint64_t a4, const char *a5, unint64_t a6, uint64_t a7, const char **a8)
{
  MTLCompilerErrorObject *v12;
  char *v13;
  int v14;
  const char *v15;
  unsigned int v17;
  _QWORD v18[3];

  v18[0] = this;
  v12 = (MTLCompilerErrorObject *)(a1 + 120);
  v18[2] = llvm::LLVMContext::getDiagnosticContext(this);
  v18[1] = llvm::LLVMContext::getDiagnosticHandlerCallBack(this);
  llvm::LLVMContext::setDiagnosticHandlerCallBack();
  v17 = 0;
  v13 = parseFunctionConstants(this, a5, a6, &v17);
  v14 = MTLGPUCompilerSpecializeFunction();
  free(v13);
  if (!v14)
  {
    if (a8)
      v15 = *a8;
    else
      v15 = "Failed to specialize function.";
    MTLCompilerErrorObject::setErrorMessage(v12, v15);
  }
  ScopedDiagnosticHandler::~ScopedDiagnosticHandler((ScopedDiagnosticHandler *)v18);
  return 0;
}

void sub_241028648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  ScopedDiagnosticHandler::~ScopedDiagnosticHandler((ScopedDiagnosticHandler *)va);
  _Unwind_Resume(a1);
}

void softDiagnosticHandler(uint64_t a1, MTLCompilerErrorObject *a2)
{
  void **v4;
  void *__p[2];
  uint64_t v6;

  __p[0] = 0;
  __p[1] = 0;
  v6 = 0;
  printDiagnosticError(a1, (uint64_t)__p);
  if (!*(_BYTE *)(a1 + 12))
  {
    if (v6 >= 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    MTLCompilerErrorObject::setErrorMessage(a2, (const char *)v4);
  }
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_2410286CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *parseFunctionConstants(llvm::LLVMContext *a1, const char *a2, unint64_t a3, unsigned int *a4)
{
  uint64_t v7;
  llvm::Constant **v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  MTLDataType v12;
  unint64_t v13;
  size_t v14;
  char *v17;
  unsigned __int8 __dst[16];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (a3 <= 3)
    goto LABEL_12;
  v7 = *(unsigned int *)a2;
  v17 = (char *)malloc_type_malloc(16 * v7, 0x1020040D5A9D86FuLL);
  if ((_DWORD)v7)
  {
    v8 = (llvm::Constant **)(v17 + 8);
    v9 = 4;
    v10 = v7;
    while (a3 > v9)
    {
      if (a3 - v9 <= 1)
        break;
      if (v9 + 2 >= a3)
        break;
      v11 = *(unsigned __int16 *)&a2[v9];
      v12 = (unint64_t)a2[v9 + 2];
      v13 = v9 + 3;
      v14 = _MTLConstantDataSize();
      if (v9 + 3 >= a3)
        break;
      v9 = v14 + v13;
      if (v14 + v13 > a3 || v14 >= 0x11)
        break;
      memcpy(__dst, &a2[v13], v14);
      *((_DWORD *)v8 - 2) = v11;
      *v8 = getLLVMConstantValue(a1, v12, __dst);
      v8 += 2;
      if (!--v10)
        goto LABEL_11;
    }
LABEL_12:
    abort();
  }
LABEL_11:
  *a4 = v7;
  return v17;
}

uint64_t MTLCompilerObject::applyConstantValuesToArchive(uint64_t a1, llvm::LLVMContext *this, uint64_t a3, uint64_t a4, const char *a5, unint64_t a6, uint64_t a7, const char **a8)
{
  MTLCompilerErrorObject *v12;
  char *v13;
  int v14;
  const char *v15;
  unsigned int v17;
  _QWORD v18[3];

  v18[0] = this;
  v12 = (MTLCompilerErrorObject *)(a1 + 120);
  v18[2] = llvm::LLVMContext::getDiagnosticContext(this);
  v18[1] = llvm::LLVMContext::getDiagnosticHandlerCallBack(this);
  llvm::LLVMContext::setDiagnosticHandlerCallBack();
  v17 = 0;
  v13 = parseFunctionConstants(this, a5, a6, &v17);
  v14 = MTLGPUCompilerSpecializeFunctionToBuffer();
  free(v13);
  if (!v14)
  {
    if (a8)
      v15 = *a8;
    else
      v15 = "Failed to specialize function.";
    MTLCompilerErrorObject::setErrorMessage(v12, v15);
  }
  ScopedDiagnosticHandler::~ScopedDiagnosticHandler((ScopedDiagnosticHandler *)v18);
  return 0;
}

void sub_24102895C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  ScopedDiagnosticHandler::~ScopedDiagnosticHandler((ScopedDiagnosticHandler *)va);
  _Unwind_Resume(a1);
}

uint64_t getSerializedModule@<X0>(signed int __val@<W1>, _QWORD *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  uint64_t result;
  int v9;
  std::string v10;
  std::string v11;
  void *__p[2];
  std::string::size_type v13;

  if (__val <= 3901)
  {
    if (!__val || __val == 3802)
      goto LABEL_23;
  }
  else if (__val == 32023 || __val == 31001 || __val == 3902)
  {
    goto LABEL_23;
  }
  std::to_string(&v10, __val);
  v4 = std::string::insert(&v10, 0, "Unexpected llvmVersion (");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v11.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = std::string::append(&v11, ") passed to getMTLBitcodeVersionFromLLVMVersion, using MTLBitcodeVersionDefault instead");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v13 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v11, (char *)&unk_24105C402);
  v9 = -1;
  MTLBuildRequestTypeToString(&v9, &v10);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    getSerializedModule();
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13) < 0)
    operator delete(__p[0]);
LABEL_23:
  result = MTLWriteAIRBitcodeToMemoryBuffer();
  *a2 = result;
  return result;
}

void sub_241028B18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  char v28;

  if (a21 < 0)
    operator delete(__p);
  if (v28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

uint64_t MTLCompilerObject::serializeLibraryReply(uint64_t a1, _QWORD *a2, char *__s1, char a4, llvm::Module **a5, unint64_t a6, unsigned int a7, uint64_t a8, char a9, unsigned int __val, uint64_t *a11)
{
  llvm::Module **v18;
  MTLCompilerObject *VersionMetadata;
  uint64_t v20;
  unint64_t v21;
  llvm::Module *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  size_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  llvm::Function *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const llvm::DataLayout *DataLayout;
  unint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *p_shared_owners;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t i;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  size_t v98;
  const void *v99;
  size_t v100;
  unint64_t v101;
  char v102;
  __int16 v103;
  unint64_t v104;
  char *v105;
  __int16 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  llvm::Module **v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *String;
  uint64_t v117;
  BOOL v118;
  BOOL v119;
  uint64_t v121;
  unsigned int v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  _OWORD *v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  char *v141;
  _QWORD *v142;
  const void *v143;
  uint64_t v144;
  int v145;
  char *v146;
  uint64_t v148;
  unint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  unsigned int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int *v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD v160[2];
  void *(*v161)(uint64_t, const void **);
  void *v162;
  __int128 *v163;
  _QWORD v164[2];
  uint64_t (*v165)(uint64_t, int);
  void *v166;
  __int128 *v167;
  _QWORD v168[3];
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  void *ptr;
  size_t size;
  unint64_t v174;
  _QWORD v175[2];
  uint64_t (*v176)(uint64_t, _QWORD *);
  void *v177;
  uint64_t *v178;
  _QWORD v179[2];
  uint64_t (*v180)(uint64_t);
  void *v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unsigned __int8 v191[32];
  int v192;
  __int128 v193;
  __int128 __n_4;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  uint64_t v199;
  void **v200[2];
  int v201;
  __int128 v202;
  uint64_t v203;
  _DWORD *v204;
  std::__shared_weak_count *v205;
  std::__shared_weak_count *v206;
  std::__shared_weak_count *v207;
  uint64_t v208;
  void **v209[15];
  std::__shared_weak_count *v210;
  std::__shared_weak_count *v211;
  std::__shared_weak_count *v212;
  _QWORD v213[33];

  v213[30] = *MEMORY[0x24BDAC8D0];
  v199 = 0;
  v197 = 0u;
  v198 = 0u;
  v195 = 0u;
  v196 = 0u;
  v193 = 0u;
  __n_4 = 0u;
  memset(v191, 0, sizeof(v191));
  v192 = 1065353216;
  v190 = 104;
  if (__s1)
  {
    DWORD2(v193) = 104;
    HIDWORD(v193) = strlen(__s1) + 1;
    v190 = HIDWORD(v193) + 104;
  }
  if ((a4 & 1) != 0)
  {
    v150 = a2;
    v152 = a7;
    if (a6)
    {
      v18 = a5;
      HIDWORD(v151) = readVersionMetadata(*a5, "air.version", 0, 1, 6);
      VersionMetadata = (MTLCompilerObject *)readVersionMetadata(*a5, "air.language_version", 1u, 1, 0);
      LODWORD(v151) = (_DWORD)VersionMetadata;
      v20 = 0;
      LOBYTE(v193) = v193 | 1;
      v187 = 0;
      v188 = 0;
      v189 = 0;
      v21 = a6;
      do
      {
        v22 = *v18;
        if ((a9 & 1) == 0)
          parseFunctions(*v18, &v187);
        VersionMetadata = MTLCompilerObject::collectFunctionConstants(VersionMetadata, v22, (FunctionDesc *)(v187 + v20));
        ++v18;
        v20 += 120;
        --v21;
      }
      while (v21);
      v23 = a8;
      v25 = v187;
      v24 = v188;
    }
    else
    {
      v23 = a8;
      v151 = 0;
      v25 = 0;
      v24 = 0;
      LOBYTE(v193) = 1;
      v187 = 0;
      v188 = 0;
      v189 = 0;
    }
    v183 = 0;
    v184 = &v183;
    v185 = 0x2020000000;
    v178 = &v183;
    v179[0] = MEMORY[0x24BDAC760];
    v179[1] = 3221225472;
    v180 = ___ZN17MTLCompilerObject21serializeLibraryReplyEPmPcbPPN4llvm6ModuleEmmP21SerializedLibraryInfobjP21FrameworkPassesOutput_block_invoke;
    v181 = &unk_25111F580;
    v182 = &v183;
    v175[0] = MEMORY[0x24BDAC760];
    v175[1] = 3221225472;
    v176 = ___ZN17MTLCompilerObject21serializeLibraryReplyEPmPcbPPN4llvm6ModuleEmmP21SerializedLibraryInfobjP21FrameworkPassesOutput_block_invoke_2;
    v177 = &unk_25111F5A8;
    v27 = 12;
    v186 = 12;
    v28 = (v24 - v25) / 120;
    if (v24 != v25)
    {
      v29 = 0;
      if (v28 <= 1)
        v30 = 1;
      else
        v30 = (v24 - v25) / 120;
      do
      {
        v31 = v187;
        v32 = v187 + v29;
        ((void (*)(_QWORD *, _QWORD))v180)(v179, *(unsigned int *)(v187 + v29 + 48));
        ((void (*)(_QWORD *, _QWORD))v180)(v179, *(unsigned int *)(v32 + 52));
        ((void (*)(_QWORD *, _QWORD))v180)(v179, *(unsigned int *)(v31 + v29 + 56));
        ((void (*)(_QWORD *, _QWORD))v180)(v179, *(unsigned int *)(v31 + v29 + 60));
        ((void (*)(_QWORD *, _QWORD))v180)(v179, *(unsigned int *)(v31 + v29 + 64));
        ((void (*)(_QWORD *, _QWORD))v180)(v179, *(unsigned __int8 *)(v31 + v29 + 68));
        ((void (*)(_QWORD *, _QWORD))v180)(v179, *(unsigned __int8 *)(v31 + v29 + 69));
        v176((uint64_t)v175, (_QWORD *)(v31 + v29 + 32));
        v29 += 120;
        --v30;
      }
      while (v30);
      v27 = v184[3];
    }
    *(_QWORD *)&__n_4 = __PAIR64__(v27, v190);
    v190 += v27;
    v174 = 0;
    v148 = v23;
    v149 = a6;
    ptr = malloc_type_malloc(v28 << 10, 0xFA8FEB0CuLL);
    size = v28 << 10;
    v169 = 0;
    v170 = 0;
    v171 = 0;
    v154 = v25;
    v155 = v24;
    if (v24 != v25)
    {
      LODWORD(v33) = 0;
      v34 = 0;
      if (v28 <= 1)
        v35 = 1;
      else
        v35 = v28;
      v153 = v35;
      while (1)
      {
        v158 = v34;
        v159 = v187;
        v36 = v187 + 120 * v34;
        *(_DWORD *)(v36 + 56) = v33;
        *(_DWORD *)(v36 + 60) = 0;
        memset(v168, 0, sizeof(v168));
        v157 = (int *)(v36 + 48);
        if ((entryPointsType[*(int *)(v36 + 48)] & 0xFFFFFFFFFFFFFFFDLL) == 1)
        {
          v37 = v159 + 120 * v34;
          v40 = *(_QWORD *)(v37 + 8);
          v39 = v37 + 8;
          v38 = v40;
          if (v40)
            v41 = *(unsigned int *)(v38 + 8);
          else
            v41 = 0;
          v42 = *(llvm::Function **)v36;
          if ((*(_WORD *)(*(_QWORD *)v36 + 18) & 1) != 0)
            llvm::Function::BuildLazyArguments(*(llvm::Function **)v36);
          if (v41)
          {
            v43 = 0;
            v44 = *((_QWORD *)v42 + 11);
            do
            {
              v45 = *(_QWORD *)(*(_QWORD *)v39 - 8 * *(unsigned int *)(*(_QWORD *)v39 + 8) + 8 * v43);
              DataLayout = (const llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)v36 + 40));
              llvm::DataLayout::DataLayout((llvm::DataLayout *)v209, DataLayout);
              MTLArgumentData::MTLArgumentData((MTLArgumentData *)&v202);
              v200[1] = 0;
              v200[0] = 0;
              v201 = 0;
              parseArgumentMetadata((uint64_t)&v202, v45, v44, 0, (uint64_t)v209, 0, (uint64_t *)v200, 7);
              if ((v202 & 2) != 0)
              {
                v47 = v170;
                if (v170 >= v171)
                {
                  v48 = std::vector<MTLArgumentData>::__push_back_slow_path<MTLArgumentData const&>(&v169, &v202);
                }
                else
                {
                  std::allocator<MTLArgumentData>::construct[abi:ne180100]<MTLArgumentData,MTLArgumentData const&>((uint64_t)&v171, v170, &v202);
                  v48 = v47 + 288;
                }
                v170 = v48;
              }
              llvm::DenseMap<llvm::Metadata *,std::vector<MTLStructMemberInfo> *,llvm::DenseMapInfo<llvm::Metadata *,void>,llvm::detail::DenseMapPair<llvm::Metadata *,std::vector<MTLStructMemberInfo> *>>::~DenseMap((uint64_t)v200);
              v200[0] = (void **)&v208;
              std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100](v200);
              v49 = v207;
              if (v207)
              {
                p_shared_owners = (unint64_t *)&v207->__shared_owners_;
                do
                  v51 = __ldaxr(p_shared_owners);
                while (__stlxr(v51 - 1, p_shared_owners));
                if (!v51)
                {
                  ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                  std::__shared_weak_count::__release_weak(v49);
                }
              }
              v52 = v206;
              if (v206)
              {
                v53 = (unint64_t *)&v206->__shared_owners_;
                do
                  v54 = __ldaxr(v53);
                while (__stlxr(v54 - 1, v53));
                if (!v54)
                {
                  ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                  std::__shared_weak_count::__release_weak(v52);
                }
              }
              v55 = v205;
              if (v205)
              {
                v56 = (unint64_t *)&v205->__shared_owners_;
                do
                  v57 = __ldaxr(v56);
                while (__stlxr(v57 - 1, v56));
                if (!v57)
                {
                  ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                  std::__shared_weak_count::__release_weak(v55);
                }
              }
              v44 += 40;
              MEMORY[0x24268C8C4](v209);
              ++v43;
            }
            while (v43 != v41);
          }
        }
        v59 = v169;
        v58 = v170;
        v60 = (uint64_t)(v170 - v169) / 288;
        v61 = 0;
        if (v170 != v169)
        {
          if (v60 <= 1)
            v62 = 1;
          else
            v62 = (uint64_t)(v170 - v169) / 288;
          v63 = 96;
          do
          {
            v64 = *(_QWORD *)(v169 + v63);
            if (v64)
            {
              v65 = *(_DWORD *)(v64 + 8);
              v66 = v65 - isPatchControlPointInputUnused(v64) - 3;
            }
            else
            {
              v66 = 1;
            }
            v61 += v66;
            v63 += 288;
            --v62;
          }
          while (v62);
        }
        v67 = v174;
        if (v174 >= 0xFFFFFFFFFFFFFFFCLL)
          goto LABEL_209;
        if (size >= v174 + 4)
        {
          v69 = (char *)ptr;
        }
        else
        {
          if (size)
            v68 = size;
          else
            v68 = 128;
          while (v68 < v174 + 4)
          {
            if (v68 >> 1 >= ~v68)
              v68 = v174 + 4;
            else
              v68 += v68 >> 1;
          }
          v69 = (char *)malloc_type_realloc(ptr, v68, 0x227314A4uLL);
          ptr = v69;
          if (!v69)
            goto LABEL_209;
          size = v68;
        }
        *(_DWORD *)&v69[v67] = v61;
        v174 = v67 + 4;
        if (v58 != v59)
        {
          v70 = 0;
          if (v60 <= 1)
            v60 = 1;
          do
          {
            v71 = v169 + 288 * v70;
            v74 = *(_QWORD *)(v71 + 96);
            v73 = v71 + 96;
            v72 = v74;
            if (v74)
            {
              v75 = *(_DWORD *)(v72 + 8);
              v76 = (v75 - isPatchControlPointInputUnused(v72));
              if (v76 >= 4)
              {
                for (i = 3; i != v76; ++i)
                {
                  v78 = *(_QWORD *)(*(_QWORD *)v73 - 8 * *(unsigned int *)(*(_QWORD *)v73 + 8) + 8 * i);
                  MTLArgumentData::MTLArgumentData((MTLArgumentData *)v209);
                  parseControlPointInputMetadata(v78, (uint64_t)v209);
                  serializeOneVertexAttribute((int *)v209, (char **)&ptr);
                  *(_QWORD *)&v202 = v213;
                  std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v202);
                  v79 = v212;
                  if (v212)
                  {
                    v80 = (unint64_t *)&v212->__shared_owners_;
                    do
                      v81 = __ldaxr(v80);
                    while (__stlxr(v81 - 1, v80));
                    if (!v81)
                    {
                      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                      std::__shared_weak_count::__release_weak(v79);
                    }
                  }
                  v82 = v211;
                  if (v211)
                  {
                    v83 = (unint64_t *)&v211->__shared_owners_;
                    do
                      v84 = __ldaxr(v83);
                    while (__stlxr(v84 - 1, v83));
                    if (!v84)
                    {
                      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                      std::__shared_weak_count::__release_weak(v82);
                    }
                  }
                  v85 = v210;
                  if (v210)
                  {
                    v86 = (unint64_t *)&v210->__shared_owners_;
                    do
                      v87 = __ldaxr(v86);
                    while (__stlxr(v87 - 1, v86));
                    if (!v87)
                    {
                      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                      std::__shared_weak_count::__release_weak(v85);
                    }
                  }
                }
              }
            }
            else
            {
              serializeOneVertexAttribute((int *)(v169 + 288 * v70), (char **)&ptr);
            }
            ++v70;
          }
          while (v70 != v60);
        }
        std::vector<MTLArgumentData>::resize(&v169, 0);
        v88 = v174;
        if (v174 > 0xFFFFFFFFFFFFFFFBLL)
LABEL_209:
          abort();
        v89 = v159 + 120 * v158;
        v92 = *(_QWORD *)(v89 + 72);
        v90 = (uint64_t *)(v89 + 72);
        v91 = v92;
        v93 = v90[1];
        v33 = v174 + 4;
        v94 = size;
        if (size >= v174 + 4)
        {
          v95 = (char *)ptr;
        }
        else
        {
          if (!size)
            v94 = 128;
          while (v94 < v33)
          {
            if (v94 >> 1 >= ~v94)
              v94 = v174 + 4;
            else
              v94 += v94 >> 1;
          }
          v95 = (char *)malloc_type_realloc(ptr, v94, 0x227314A4uLL);
          ptr = v95;
          if (!v95)
            goto LABEL_209;
          size = v94;
        }
        *(_DWORD *)&v95[v88] = -858993459 * ((v93 - v91) >> 3);
        v174 = v88 + 4;
        v96 = *v90;
        v97 = v90[1];
        while (v96 != v97)
        {
          if (*(char *)(v96 + 23) < 0)
          {
            v99 = *(const void **)v96;
            v98 = *(_QWORD *)(v96 + 8);
          }
          else
          {
            v98 = *(unsigned __int8 *)(v96 + 23);
            v99 = (const void *)v96;
          }
          v100 = v98 + 1;
          if (__CFADD__(v33, v98 + 1))
            goto LABEL_209;
          v101 = v100 + v33;
          if (v94 < v100 + v33)
          {
            if (!v94)
            {
              size = 128;
              v94 = 128;
            }
            while (v94 < v101)
            {
              if (v94 >> 1 >= ~v94)
                v94 = v100 + v33;
              else
                v94 += v94 >> 1;
            }
            v95 = (char *)malloc_type_realloc(v95, v94, 0x227314A4uLL);
            ptr = v95;
            if (!v95)
              goto LABEL_209;
            size = v94;
          }
          memcpy(&v95[v33], v99, v98);
          v95[v98 + v33] = 0;
          v174 = v101;
          if (v101 == -1)
            goto LABEL_209;
          v102 = *(_BYTE *)(v96 + 24);
          if (v94 <= v101)
          {
            if (!v94)
            {
              size = 128;
              v94 = 128;
            }
            while (v94 <= v101)
            {
              if (v94 >> 1 >= ~v94)
                v94 = v101 + 1;
              else
                v94 += v94 >> 1;
            }
            v95 = (char *)malloc_type_realloc(v95, v94, 0x227314A4uLL);
            ptr = v95;
            if (!v95)
              goto LABEL_209;
            size = v94;
          }
          v95[v101] = v102;
          v174 = v101 + 1;
          if (v101 > 0xFFFFFFFFFFFFFFFALL)
            goto LABEL_209;
          v103 = *(_WORD *)(v96 + 32);
          v104 = v101 + 5;
          if (v94 < v101 + 5)
          {
            do
            {
              if (v94 >> 1 >= ~v94)
                v94 = v101 + 5;
              else
                v94 += v94 >> 1;
            }
            while (v94 < v104);
            v95 = (char *)malloc_type_realloc(v95, v94, 0x227314A4uLL);
            ptr = v95;
            if (!v95)
              goto LABEL_209;
            size = v94;
          }
          v105 = &v95[v101 + 1];
          *(_WORD *)v105 = v103;
          *((_WORD *)v105 + 1) = 0;
          v174 = v101 + 5;
          if (v101 == -6)
            goto LABEL_209;
          v106 = *(_WORD *)(v96 + 34);
          v33 = v101 + 6;
          if (v94 <= v104)
          {
            if (!v94)
            {
              size = 128;
              v94 = 128;
            }
            while (v94 <= v104)
            {
              if (v94 >> 1 >= ~v94)
                v94 = v101 + 6;
              else
                v94 += v94 >> 1;
            }
            v95 = (char *)malloc_type_realloc(v95, v94, 0x227314A4uLL);
            ptr = v95;
            if (!v95)
              goto LABEL_209;
            size = v94;
          }
          v95[v104] = v106;
          v174 = v101 + 6;
          v96 += 40;
        }
        if (entryPointsType[*v157] == 1)
        {
          v107 = v158;
          v108 = v159 + 120 * v158;
          v111 = *(_QWORD *)(v108 + 16);
          v110 = v108 + 16;
          v109 = v111;
          v112 = a5;
          if (!v111)
            goto LABEL_172;
          v109 = *(unsigned int *)(v109 + 8);
          if (!(_DWORD)v109)
            goto LABEL_172;
          v113 = 0;
          v114 = 8 * v109;
          while (1)
          {
            v115 = *(_QWORD *)(*(_QWORD *)v110 - 8 * *(unsigned int *)(*(_QWORD *)v110 + 8) + v113);
            String = (_QWORD *)llvm::MDString::getString(*(llvm::MDString **)(v115 - 8 * *(unsigned int *)(v115 + 8)));
            if (v117 == 29)
            {
              v118 = *String == 0x646E65722E726961 && String[1] == 0x65677261745F7265;
              v119 = v118 && String[2] == 0x5F79617272615F74;
              if (v119 && *(_QWORD *)((char *)String + 21) == 0x7865646E695F7961)
                break;
            }
            v113 += 8;
            if (v114 == v113)
            {
              LOBYTE(v109) = 0;
              goto LABEL_172;
            }
          }
          LOBYTE(v109) = dataTypeFromMetadata(1u, v115);
        }
        else
        {
          LOBYTE(v109) = 0;
        }
        v112 = a5;
        v107 = v158;
LABEL_172:
        *(_BYTE *)(v159 + 120 * v107 + 68) = v109;
        v209[0] = (void **)v168;
        std::vector<MTLArgumentData>::__destroy_vector::operator()[abi:ne180100](v209);
        v34 = v107 + 1;
        if (v34 == v153)
          goto LABEL_176;
      }
    }
    v33 = 0;
    v112 = a5;
LABEL_176:
    v209[0] = (void **)&v169;
    std::vector<MTLArgumentData>::__destroy_vector::operator()[abi:ne180100](v209);
    *((_QWORD *)&__n_4 + 1) = __PAIR64__(v33, v190);
    v190 += v33;
    *(_QWORD *)&v195 = v190;
    DWORD2(v195) = v190;
    std::vector<std::unique_ptr<llvm::MemoryBuffer>>::vector(v200, v149);
    if (v149)
    {
      v121 = 0;
      v122 = 0;
      v123 = 64;
      do
      {
        if (v155 != v154)
          *(_DWORD *)(v187 + v123) = v122;
        getSerializedModule(__val, v209);
        v124 = v200[0][v121];
        v200[0][v121] = v209[0];
        if (v124)
          (*(void (**)(void *))(*(_QWORD *)v124 + 8))(v124);
        v112[v121] = 0;
        v122 += *((_DWORD *)v200[0][v121] + 4) - *((_DWORD *)v200[0][v121] + 2) + 4;
        ++v121;
        v123 += 120;
      }
      while (v149 != v121);
    }
    else
    {
      v122 = 0;
    }
    v190 += v122;
    HIDWORD(v195) = v122;
    if (v148)
      SerializedLibraryInfo::serializeDynamicLibraryDataHeader(v148, &v193, &v190);
    if (a11)
    {
      if (a11[1])
        v125 = *a11;
      else
        v125 = 0;
      CompilerOutputReflectionBlock::CompilerOutputReflectionBlock(v209, v125);
      addBlocksForOutput(v191, a11, 0, (uint64_t *)v209);
      HIDWORD(v199) = sizeOfSerializedCompilerBlocks((uint64_t)v191);
      LODWORD(v199) = v190;
      v190 += HIDWORD(v199);
      CompilerOutputReflectionBlock::~CompilerOutputReflectionBlock((void **)v209);
    }
    *(_QWORD *)&v196 = __PAIR64__(v152, v190);
    v190 += v152;
    v126 = malloc_type_malloc(v190, 0xD4A6EA62uLL);
    v26 = (uint64_t)v126;
    v127 = v193;
    v128 = v195;
    v126[1] = __n_4;
    v126[2] = v128;
    *v126 = v127;
    v129 = v196;
    v130 = v197;
    v131 = v198;
    *((_QWORD *)v126 + 12) = v199;
    v126[4] = v130;
    v126[5] = v131;
    v126[3] = v129;
    if (__s1)
    {
      memcpy((char *)v126 + DWORD2(v193), __s1, HIDWORD(v193));
      free(__s1);
    }
    *(_QWORD *)&v202 = 0;
    *((_QWORD *)&v202 + 1) = &v202;
    v203 = 0x2020000000;
    v204 = (_DWORD *)(v26 + __n_4);
    *v204 = HIDWORD(v151);
    v132 = *((_QWORD *)&v202 + 1);
    ++v204;
    **(_DWORD **)(*((_QWORD *)&v202 + 1) + 24) = v151;
    *(_QWORD *)(v132 + 24) += 4;
    v163 = &v202;
    v164[0] = MEMORY[0x24BDAC760];
    v164[1] = 3221225472;
    v165 = ___ZN17MTLCompilerObject21serializeLibraryReplyEPmPcbPPN4llvm6ModuleEmmP21SerializedLibraryInfobjP21FrameworkPassesOutput_block_invoke_3;
    v166 = &unk_25111F580;
    v167 = &v202;
    v160[0] = MEMORY[0x24BDAC760];
    v160[1] = 3221225472;
    v161 = ___ZN17MTLCompilerObject21serializeLibraryReplyEPmPcbPPN4llvm6ModuleEmmP21SerializedLibraryInfobjP21FrameworkPassesOutput_block_invoke_4;
    v162 = &unk_25111F5A8;
    v118 = v188 == v187;
    v133 = 0xEEEEEEEEEEEEEEEFLL * ((v188 - v187) >> 3);
    v134 = *((_QWORD *)&v202 + 1);
    **(_DWORD **)(*((_QWORD *)&v202 + 1) + 24) = v133;
    *(_QWORD *)(v134 + 24) += 4;
    if (!v118)
    {
      v135 = 0;
      if (v133 <= 1)
        v136 = 1;
      else
        v136 = v133;
      do
      {
        v137 = v187;
        v138 = v187 + v135;
        v165((uint64_t)v164, *(_DWORD *)(v187 + v135 + 48));
        v165((uint64_t)v164, *(_DWORD *)(v138 + 52));
        v165((uint64_t)v164, *(_DWORD *)(v137 + v135 + 56));
        v165((uint64_t)v164, *(_DWORD *)(v137 + v135 + 60));
        v165((uint64_t)v164, *(_DWORD *)(v137 + v135 + 64));
        v165((uint64_t)v164, *(unsigned __int8 *)(v137 + v135 + 68));
        v165((uint64_t)v164, *(unsigned __int8 *)(v137 + v135 + 69));
        v161((uint64_t)v160, (const void **)(v137 + v135 + 32));
        v135 += 120;
        --v136;
      }
      while (v136);
    }
    v139 = ptr;
    memcpy((void *)(v26 + DWORD2(__n_4)), ptr, v33);
    if (v148)
      SerializedLibraryInfo::serializeDynamicLibraryData(v148, (unsigned int *)&v193, v26);
    if (a11 && HIDWORD(v199))
    {
      memset(v209, 0, 64);
      serializeCompilerBlocks((_QWORD *)(v26 + v199), HIDWORD(v199), (uint64_t)v191, (uint64_t)v209);
    }
    if (v149)
    {
      v140 = 0;
      v141 = (char *)(v26 + DWORD2(v195));
      do
      {
        v142 = v200[0][v140];
        v143 = (const void *)v142[1];
        v144 = v142[2];
        v145 = v144 - (_DWORD)v143;
        *(_DWORD *)v141 = v144 - (_DWORD)v143;
        v146 = v141 + 4;
        memcpy(v146, v143, (v144 - (_DWORD)v143));
        v141 = &v146[v145];
        ++v140;
      }
      while (v149 != v140);
    }
    *v150 = v190;
    _Block_object_dispose(&v202, 8);
    v209[0] = (void **)v200;
    std::vector<std::unique_ptr<llvm::ErrorInfoBase>>::__destroy_vector::operator()[abi:ne180100](v209);
    free(v139);
    _Block_object_dispose(&v183, 8);
    v209[0] = (void **)&v187;
    std::vector<FunctionDesc>::__destroy_vector::operator()[abi:ne180100](v209);
  }
  else
  {
    MTLCompilerErrorObject::setErrorMessage((MTLCompilerErrorObject *)(a1 + 120), __s1);
    free(__s1);
    v26 = 0;
  }
  std::__hash_table<llvm::Value *,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,std::allocator<llvm::Value *>>::~__hash_table((uint64_t)v191);
  return v26;
}

void sub_241029B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  _Block_object_dispose(&STACK[0x250], 8);
  STACK[0x370] = (unint64_t)&STACK[0x238];
  std::vector<std::unique_ptr<llvm::ErrorInfoBase>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x370]);
  free(a40);
  _Block_object_dispose(&a53, 8);
  STACK[0x250] = (unint64_t)&a57;
  std::vector<FunctionDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x250]);
  std::__hash_table<llvm::Value *,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,std::allocator<llvm::Value *>>::~__hash_table((uint64_t)&a61);
  _Unwind_Resume(a1);
}

uint64_t ___ZN17MTLCompilerObject21serializeLibraryReplyEPmPcbPPN4llvm6ModuleEmmP21SerializedLibraryInfobjP21FrameworkPassesOutput_block_invoke(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) += 4;
  return result;
}

uint64_t ___ZN17MTLCompilerObject21serializeLibraryReplyEPmPcbPPN4llvm6ModuleEmmP21SerializedLibraryInfobjP21FrameworkPassesOutput_block_invoke_2(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = a2[1];
  if (!v2 || *(_BYTE *)(v2 + *a2 - 1))
    LODWORD(v2) = v2 + 1;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) += v2;
  return result;
}

void std::vector<MTLArgumentData>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = a1[1];
  v4 = 0x8E38E38E38E38E39 * ((v3 - *a1) >> 5);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<MTLArgumentData>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 288 * a2;
    while (v3 != v7)
    {
      v3 -= 288;
      std::allocator<MTLArgumentData>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
    }
    a1[1] = v7;
  }
}

uint64_t SerializedLibraryInfo::serializeDynamicLibraryDataHeader(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t result;

  v6 = *a3;
  a2[14] = *a3;
  if (*(char *)(a1 + 23) < 0)
  {
    v7 = *(_QWORD *)(a1 + 8);
    if (!v7)
      goto LABEL_6;
LABEL_5:
    LODWORD(v7) = v7 + 1;
    goto LABEL_6;
  }
  LODWORD(v7) = *(unsigned __int8 *)(a1 + 23);
  if (*(_BYTE *)(a1 + 23))
    goto LABEL_5;
  LODWORD(v7) = 0;
LABEL_6:
  v8 = v6 + v7;
  *a3 = v8;
  a2[15] = v7;
  a2[16] = v8;
  v9 = SerializedLibraryInfo::serializeStringArraySize(a1, (__int128 **)(a1 + 24));
  v10 = *a3 + v9;
  *a3 = v10;
  a2[17] = v9;
  a2[18] = v10;
  v11 = SerializedLibraryInfo::serializeStringArraySize(a1, (__int128 **)(a1 + 48));
  v12 = *a3 + v11;
  *a3 = v12;
  a2[19] = v11;
  a2[20] = v12;
  v13 = SerializedLibraryInfo::serializeStringArraySize(a1, (__int128 **)(a1 + 72));
  v14 = *a3 + v13;
  *a3 = v14;
  a2[21] = v13;
  a2[22] = v14;
  result = SerializedLibraryInfo::serializeStringArraySize(a1, (__int128 **)(a1 + 96));
  a2[23] = result;
  *a3 += result;
  return result;
}

uint64_t ___ZN17MTLCompilerObject21serializeLibraryReplyEPmPcbPPN4llvm6ModuleEmmP21SerializedLibraryInfobjP21FrameworkPassesOutput_block_invoke_3(uint64_t result, int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
  **(_DWORD **)(v2 + 24) = a2;
  *(_QWORD *)(v2 + 24) += 4;
  return result;
}

void SerializedLibraryInfo::serializeDynamicLibraryData(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  char *v6;
  const char *v7;

  if (a2[15])
  {
    v6 = (char *)(a3 + a2[14]);
    v7 = (const char *)a1;
    if (*(char *)(a1 + 23) < 0)
      v7 = *(const char **)a1;
    strcpy(v6, v7);
  }
  SerializedLibraryInfo::serializeStringArray(a1, (__int128 **)(a1 + 24), (_DWORD *)(a3 + a2[16]));
  SerializedLibraryInfo::serializeStringArray(a1, (__int128 **)(a1 + 48), (_DWORD *)(a3 + a2[18]));
  SerializedLibraryInfo::serializeStringArray(a1, (__int128 **)(a1 + 72), (_DWORD *)(a3 + a2[20]));
  SerializedLibraryInfo::serializeStringArray(a1, (__int128 **)(a1 + 96), (_DWORD *)(a3 + a2[22]));
}

char *MTLCompilerObject::serializeLibraryToArchiveReply(uint64_t a1, size_t *a2, const char **a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  const char **v9;
  unint64_t v12;
  const char **v13;
  uint64_t v14;
  size_t v15;
  unsigned int v16;
  int v17;
  int v18;
  char v19;
  char *v20;
  uint64_t v21;
  char *v22;
  size_t v23;
  const void *v24;
  uint64_t v26;
  size_t *v27;
  int v28;

  v8 = a4;
  v9 = a3;
  v28 = a5;
  v12 = 0;
  if (a4)
  {
    v13 = a3;
    v14 = a4;
    do
    {
      if (*v13)
        v12 += strlen(*v13) + 1;
      ++v13;
      --v14;
    }
    while (v14);
    if (v12 >= 0xFFFFFFFF)
      return 0;
    v15 = v12 + 104;
    a5 = v28;
  }
  else
  {
    v15 = 104;
  }
  v27 = a2;
  v26 = a1;
  if (a5)
  {
    v16 = LLVMGetBufferSize();
    if (a7)
      v17 = v15 + v16;
    else
      v17 = 0;
    v18 = v15;
    v15 += v16 + (unint64_t)a7;
    v19 = 3;
  }
  else
  {
    v18 = 0;
    v16 = 0;
    v17 = 0;
    LODWORD(a7) = 0;
    v19 = 2;
  }
  v20 = (char *)malloc_type_malloc(v15, 0x9691608AuLL);
  *v20 = v19;
  *(_DWORD *)(v20 + 1) = 0;
  *(_QWORD *)(v20 + 4) = 0x6800000000;
  *((_DWORD *)v20 + 3) = v12;
  *((_QWORD *)v20 + 3) = 0;
  *((_QWORD *)v20 + 4) = 0;
  *((_QWORD *)v20 + 2) = 0;
  *((_DWORD *)v20 + 10) = v18;
  *((_DWORD *)v20 + 11) = v16;
  *((_DWORD *)v20 + 12) = v17;
  *((_DWORD *)v20 + 13) = a7;
  *(_OWORD *)(v20 + 56) = 0u;
  *(_OWORD *)(v20 + 72) = 0u;
  *(_OWORD *)(v20 + 88) = 0u;
  if (v8)
  {
    v21 = 0;
    do
    {
      v22 = (char *)*v9;
      if (*v9)
      {
        v23 = strlen(*v9) + 1;
        if (v8 != 1)
          v22[v23] = 10;
        memcpy(&v20[v21 + 104], v22, v23);
        free(v22);
        v21 += v23;
      }
      ++v9;
      --v8;
    }
    while (v8);
  }
  if ((v28 & 1) == 0)
  {
    MTLCompilerErrorObject::setErrorMessage((MTLCompilerErrorObject *)(v26 + 120), v20 + 104);
    free(v20);
    return 0;
  }
  v24 = (const void *)LLVMGetBufferStart();
  memcpy(&v20[v18], v24, v16);
  *v27 = v15;
  return v20;
}

uint64_t countArgumentBufferResources(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  int32x2_t *v3;
  int v4;
  int32x2_t v5;
  __int32 v6;
  uint64_t v7;
  int32x2_t v8;
  unsigned int *v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD v15[2];

  v2 = a2[1];
  if (*a2 != v2)
  {
    v3 = (int32x2_t *)result;
    v4 = *(unsigned __int8 *)(result + 12);
    v5 = *(int32x2_t *)result;
    v6 = *(_DWORD *)(result + 8);
    v7 = *a2 + 104;
    do
    {
      memset(v15, 0, 13);
      if (*(_QWORD *)(v7 - 8))
      {
        result = countArgumentBufferResources(v15, v7);
        v8 = (int32x2_t)v15[0];
        LODWORD(v9) = v15[1];
        v10 = BYTE4(v15[1]);
      }
      else
      {
        v9 = *(unsigned int **)(v7 - 48);
        if (!v9)
        {
          v10 = 0;
LABEL_16:
          v8 = 0;
          goto LABEL_17;
        }
        v11 = *v9;
        if ((*v9 & 0x1000) != 0)
        {
          v4 = 1;
          v3[1].i8[4] = 1;
          v11 = *v9;
        }
        v12 = (v11 >> 4) & 0x1F;
        if ((v12 - 1) < 2)
        {
          v10 = 0;
          LODWORD(v9) = 0;
          v8 = (int32x2_t)1;
        }
        else if (v12 == 5)
        {
          v10 = 0;
          v8 = 0;
          LODWORD(v9) = 1;
        }
        else
        {
          if (v12 != 4)
          {
            v10 = 0;
            LODWORD(v9) = 0;
            goto LABEL_16;
          }
          v10 = 0;
          LODWORD(v9) = 0;
          v8 = (int32x2_t)0x100000000;
        }
      }
LABEL_17:
      v13 = *(_DWORD *)(v7 - 64);
      if (v13 <= 1)
        v13 = 1;
      v5 = vmla_s32(v5, v8, vdup_n_s32(v13));
      *v3 = v5;
      v6 += (_DWORD)v9 * v13;
      v3[1].i32[0] = v6;
      v4 |= v10;
      v3[1].i8[4] = v4;
      v14 = v7 + 72;
      v7 += 176;
    }
    while (v14 != v2);
  }
  return result;
}

uint64_t MTLSimCompiler::validSimulatorMetadata(MTLSimCompiler *this, llvm::Module *a2)
{
  uint64_t v4;
  char *v5;
  char v6;
  llvm::NamedMDNode *NamedMetadata;
  llvm::NamedMDNode *v8;
  uint64_t Operand;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  const llvm::DataLayout *DataLayout;
  _QWORD *String;
  uint64_t v22;
  BOOL v25;
  const char *p_p;
  unsigned int v27;
  size_t v28;
  int v29;
  char v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  char **v44;
  unsigned int v45;
  __int128 __p;
  uint64_t v47;
  void **v48[2];
  int v49;
  unsigned int v50;
  unsigned int v51;
  void *__src;
  size_t __len;
  uint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  std::__shared_weak_count *v57;
  std::__shared_weak_count *v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD v61[4];
  __int16 v62;
  uint64_t v63;

  v4 = 0;
  v63 = *MEMORY[0x24BDAC8D0];
  while (1)
  {
    v5 = entryPointsMetadata[v4];
    v62 = 257;
    if (*v5)
    {
      v61[0] = v5;
      v6 = 3;
    }
    else
    {
      v6 = 1;
    }
    LOBYTE(v62) = v6;
    NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(a2, (const llvm::Twine *)v61);
    v8 = NamedMetadata;
    if (NamedMetadata)
    {
      if ((int)llvm::NamedMDNode::getNumOperands(NamedMetadata) > 0)
        break;
    }
    if (++v4 == 7)
      goto LABEL_8;
  }
  Operand = llvm::NamedMDNode::getOperand(v8);
  if (!Operand)
  {
LABEL_8:
    MTLCompilerErrorObject::setErrorMessage((MTLSimCompiler *)((char *)this + 8), "invalid function metadata");
    return 0;
  }
  v42 = entryPointsType[v4];
  v11 = (_QWORD *)(Operand - 8 * *(unsigned int *)(Operand + 8));
  v12 = *(_QWORD *)(*v11 + 128);
  v13 = v11[2];
  v14 = *(unsigned int *)(v13 + 8);
  if ((*(_WORD *)(v12 + 18) & 1) != 0)
    llvm::Function::BuildLazyArguments((llvm::Function *)v12);
  if ((v42 - 1) > 2)
    abort();
  if ((int)v14 >= 1)
  {
    v15 = 0;
    v40 = 0;
    v41 = 0;
    v16 = 0;
    v45 = 0;
    v17 = 0;
    v18 = *(_QWORD *)(v12 + 88);
    v43 = 0;
    v44 = (char **)((char *)this + 8);
    while (2)
    {
      v19 = *(_QWORD *)(v13 - 8 * *(unsigned int *)(v13 + 8) + 8 * v15);
      DataLayout = (const llvm::DataLayout *)llvm::Module::getDataLayout(a2);
      llvm::DataLayout::DataLayout((llvm::DataLayout *)v61, DataLayout);
      MTLArgumentData::MTLArgumentData((MTLArgumentData *)&v50);
      v48[0] = 0;
      v48[1] = 0;
      v49 = 0;
      parseArgumentMetadata((uint64_t)&v50, v19, v18, 0, (uint64_t)v61, 0, (uint64_t *)v48, 7);
      switch((v50 >> 4) & 0x1F)
      {
        case 1u:
          ++v43;
          goto LABEL_18;
        case 2u:
LABEL_18:
          if (v51 >= 0x1F)
          {
            MTLCompilerErrorObject::setFormattedErrorMessage(v44, "buffer binding has argument index %u that is greater than %u", v51, 30);
            goto LABEL_55;
          }
          ++v17;
          goto LABEL_52;
        case 4u:
          if (v51 <= 0x1E)
            goto LABEL_52;
          MTLCompilerErrorObject::setFormattedErrorMessage(v44, "texture binding has argument index %u that is greater than %u");
          goto LABEL_55;
        case 5u:
          if (v51 < 0x10)
            goto LABEL_52;
          MTLCompilerErrorObject::setFormattedErrorMessage(v44, "sampler binding has argument index %u that is greater than %u");
          goto LABEL_55;
        case 7u:
          if (v42 != 2)
            goto LABEL_52;
          if ((v50 & 0x8000) != 0)
          {
            if ((v50 & 8) != 0)
            {
              if (__src)
              {
                std::string::basic_string[abi:ne180100](&__p, __src, __len);
                if (v47 >= 0)
                  p_p = (const char *)&__p;
                else
                  p_p = (const char *)__p;
              }
              else
              {
                __p = 0uLL;
                p_p = (const char *)&__p;
                v47 = 0;
              }
              v28 = strlen(p_p);
              v29 = dataTypeFromString(p_p, v28);
              if (SHIBYTE(v47) < 0)
                operator delete((void *)__p);
              ++v40;
              v41 += MTLDataTypeGetComponentCount(v29);
            }
          }
          else
          {
            String = (_QWORD *)llvm::MDString::getString(*(llvm::MDString **)(v55 - 8 * *(unsigned int *)(v55 + 8) + 8));
            if (v22 == 24)
            {
              v25 = memcmp(String, "air.viewport_array_index", 0x18uLL) == 0;
            }
            else
            {
              if (v22 != 29)
                goto LABEL_52;
              v25 = *String == 0x646E65722E726961
                 && String[1] == 0x65677261745F7265
                 && String[2] == 0x5F79617272615F74
                 && *(_QWORD *)((char *)String + 21) == 0x7865646E695F7961;
            }
            if (v25)
              v27 = v41 + 1;
            else
              v27 = v41;
            v41 = v27;
          }
LABEL_52:
          if (v54
            && (*(_QWORD *)((char *)&__p + 5) = 0,
                *(_QWORD *)&__p = 0,
                countArgumentBufferResources((uint64_t)&__p, v59),
                v17 += __p,
                v45 += DWORD1(__p),
                v16 += DWORD2(__p),
                BYTE12(__p)))
          {
            MTLCompilerErrorObject::setFormattedErrorMessage(v44, "pointers to an argument buffer inside another argument buffer are not supportted in the simulator");
LABEL_55:
            v30 = 0;
          }
          else
          {
            v18 += 40;
            v30 = 1;
          }
          llvm::DenseMap<llvm::Metadata *,std::vector<MTLStructMemberInfo> *,llvm::DenseMapInfo<llvm::Metadata *,void>,llvm::detail::DenseMapPair<llvm::Metadata *,std::vector<MTLStructMemberInfo> *>>::~DenseMap((uint64_t)v48);
          v48[0] = (void **)&v60;
          std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100](v48);
          v31 = v58;
          if (v58)
          {
            p_shared_owners = (unint64_t *)&v58->__shared_owners_;
            do
              v33 = __ldaxr(p_shared_owners);
            while (__stlxr(v33 - 1, p_shared_owners));
            if (!v33)
            {
              ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
              std::__shared_weak_count::__release_weak(v31);
            }
          }
          v34 = v57;
          if (v57)
          {
            v35 = (unint64_t *)&v57->__shared_owners_;
            do
              v36 = __ldaxr(v35);
            while (__stlxr(v36 - 1, v35));
            if (!v36)
            {
              ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
              std::__shared_weak_count::__release_weak(v34);
            }
          }
          v37 = v56;
          if (v56)
          {
            v38 = (unint64_t *)&v56->__shared_owners_;
            do
              v39 = __ldaxr(v38);
            while (__stlxr(v39 - 1, v38));
            if (!v39)
            {
              ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          MEMORY[0x24268C8C4](v61);
          if ((v30 & 1) == 0)
            return 0;
          if (++v15 != v14)
            continue;
          if (v17 >= 0x20)
          {
            MTLCompilerErrorObject::setFormattedErrorMessage(v44, "only %u buffers are supported in the simulator but %u were used", 31, v17);
            return 0;
          }
          if (v16 >= 0x11)
          {
            MTLCompilerErrorObject::setFormattedErrorMessage(v44, "only %u sampelrs are supported in the simulator but %u were used", 16, v16);
            return 0;
          }
          if (v45 >= 0x20)
          {
            MTLCompilerErrorObject::setFormattedErrorMessage(v44, "only %u textures are supported in the simulator but %u were used", 31, 31);
            return 0;
          }
          if (v43 >= 0xF)
          {
            MTLCompilerErrorObject::setFormattedErrorMessage(v44, "only %u constant buffers binding are supported in the simulator but %u were used", 14, v43);
            return 0;
          }
          if (v40 >= 0x3C)
          {
            MTLCompilerErrorObject::setFormattedErrorMessage(v44, "fragment shader has %u interpolated inputs but only %u are supported in the simulator", v40, 59);
            return 0;
          }
          if (v41 < 0x3D)
            return 1;
          MTLCompilerErrorObject::setFormattedErrorMessage(v44, "fragment shader has %u interpolated component inputs but only %u are supported", v41, 60);
          break;
        default:
          goto LABEL_52;
      }
      return 0;
    }
  }
  return 1;
}

void sub_24102A8A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  llvm::DenseMap<llvm::Metadata *,std::vector<MTLStructMemberInfo> *,llvm::DenseMapInfo<llvm::Metadata *,void>,llvm::detail::DenseMapPair<llvm::Metadata *,std::vector<MTLStructMemberInfo> *>>::~DenseMap((uint64_t)&a23);
  MTLArgumentData::~MTLArgumentData((MTLArgumentData *)&a26);
  MEMORY[0x24268C8C4](&a62);
  _Unwind_Resume(a1);
}

uint64_t MTLSimCompiler::buildRequestWithOptions(MTLSimCompiler *this, const void *a2, unint64_t a3, unsigned int a4, llvm::Module *a5, const void **a6, unint64_t *a7, const void **a8, unint64_t *a9, const void **a10, unint64_t *a11, const char **a12)
{
  const char **v17;
  uint64_t v18;
  char *v19;
  char v20;
  llvm::NamedMDNode *NamedMetadata;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t Operand;
  size_t v26;
  void *Name;
  uint64_t v28;
  void *__p[2];
  uint64_t v31;
  __int16 v32;
  llvm::LLVMContext *v33[3];

  *(_QWORD *)this = 0;
  v17 = (const char **)((char *)this + 8);
  v33[0] = *(llvm::LLVMContext **)a5;
  v33[2] = (llvm::LLVMContext *)llvm::LLVMContext::getDiagnosticContext(v33[0]);
  v33[1] = (llvm::LLVMContext *)llvm::LLVMContext::getDiagnosticHandlerCallBack(v33[0]);
  llvm::LLVMContext::setDiagnosticHandlerCallBack();
  if (MTLDowngradeAIRModule() && MTLSimCompiler::validSimulatorMetadata(this, a5))
  {
    v18 = 0;
    while (1)
    {
      v19 = entryPointsMetadata[v18];
      v32 = 257;
      if (*v19)
      {
        __p[0] = v19;
        v20 = 3;
      }
      else
      {
        v20 = 1;
      }
      LOBYTE(v32) = v20;
      NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(a5, (const llvm::Twine *)__p);
      if (NamedMetadata)
        break;
      if (++v18 == 7)
        goto LABEL_13;
    }
    Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
    Name = (void *)llvm::Value::getName(*(llvm::Value **)(*(_QWORD *)(Operand - 8 * *(unsigned int *)(Operand + 8))
                                                        + 128));
    if (Name)
    {
      std::string::basic_string[abi:ne180100](__p, Name, v26);
      goto LABEL_14;
    }
LABEL_13:
    __p[0] = 0;
    __p[1] = 0;
    v31 = 0;
LABEL_14:
    *(_QWORD *)this = serializeModuleToBufferAsMetallib();
    if (SHIBYTE(v31) < 0)
      operator delete(__p[0]);
    *a6 = (const void *)LLVMGetBufferStart();
    v28 = LLVMGetBufferSize();
    v23 = 0;
    v24 = 0;
    *a7 = v28;
    *a8 = 0;
    *a9 = 0;
    *a10 = 0;
    *a11 = 0;
  }
  else
  {
    v22 = MEMORY[0x24268D17C](a5);
    MEMORY[0x24268D8F0](v22, 0x10B2C407FF26C1CLL);
    v23 = *v17;
    v24 = 1;
  }
  *a12 = v23;
  ScopedDiagnosticHandler::~ScopedDiagnosticHandler((ScopedDiagnosticHandler *)v33);
  return v24;
}

void sub_24102AAE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  ScopedDiagnosticHandler::~ScopedDiagnosticHandler((ScopedDiagnosticHandler *)&a19);
  _Unwind_Resume(a1);
}

uint64_t serializeModuleToBufferAsMetallib()
{
  uint64_t v0;

  LLVMGetTarget();
  MTLMetalLibCreateExecutableWithTriple();
  LLVMExtraMakeSharedModule();
  MTLMetalFunctionCreate();
  MTLMetalLibInsertFunction();
  v0 = MTLWriteMetalLibToMemoryBuffer();
  LLVMExtraDisposeSharedModule();
  return v0;
}

_QWORD *MTLSimCompilerCreate()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  result[1] = 0;
  result[2] = 0;
  *result = 0;
  return result;
}

uint64_t MTLSimCompilerSetGPUCompiler(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = a2;
  return result;
}

uint64_t MTLSimCompilerBuildRequestWithOptions(MTLSimCompiler *a1, const void *a2, unint64_t a3, unsigned int a4, llvm::Module *a5, const void **a6, unint64_t *a7, const void **a8, unint64_t *a9, const void **a10, unint64_t *a11, const char **a12)
{
  return MTLSimCompiler::buildRequestWithOptions(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

void MTLSimCompiler::deleteCompilerReply(void **this)
{
  if (*this)
  {
    LLVMDisposeMemoryBuffer();
    *this = 0;
  }
  free(this[1]);
  this[1] = 0;
}

uint64_t MTLSimCompilerDelete(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    free(*(void **)(result + 8));
    *(_QWORD *)(v1 + 8) = 0;
    JUMPOUT(0x24268D8F0);
  }
  return result;
}

BOOL MTLCompilerObject::readVisibleFunctions(uint64_t a1, uint64_t a2, llvm::LLVMContext *a3, unsigned int a4, unsigned int a5, uint64_t a6, unint64_t a7, uint64_t a8, std::string *a9)
{
  uint64_t v12;
  std::string *v13;
  uint64_t v14;
  BOOL v15;
  unsigned int *v16;
  unint64_t v17;
  llvm::Module *v18;
  uint64_t v19;
  uint64_t v25;
  unsigned __int16 v26;
  __int128 v27;
  __int128 v28;
  std::string::value_type *v29[4];
  __int128 v30;
  _BYTE v31[28];
  uint64_t v32;

  v12 = a1;
  v32 = *MEMORY[0x24BDAC8D0];
  if (a5)
    v13 = a9;
  else
    v13 = 0;
  if (v13)
    a1 = (uint64_t)std::string::append(v13, "STRIP { ");
  if (a5)
  {
    v14 = 0;
    v15 = 0;
    v16 = (unsigned int *)(a6 + a4);
    v17 = a5;
    while (1)
    {
      v26 = 0;
      v27 = 0u;
      v28 = 0u;
      memset(v29, 0, 26);
      v30 = 0u;
      memset(v31, 0, sizeof(v31));
      MTLCompilerObject::getReadParametersFromRequest(a1, (uint64_t)&v26, a6, a7, v16, a8);
      v25 = 0;
      v18 = MTLCompilerObject::readModuleFromBinaryRequest(v12, &v26, a3, (MTLFunctionType *)&v25, 0, 0, 1);
      if (!v18)
        break;
      v19 = (uint64_t)v18;
      if (v13)
      {
        std::string::append(v13, v29[1]);
        std::string::append(v13, " { } ");
      }
      a1 = llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(a2, v19);
      v15 = ++v14 >= v17;
      v16 += 14;
      if (v17 == v14)
        goto LABEL_12;
    }
  }
  else
  {
LABEL_12:
    if (v13)
      std::string::append(v13, "}\n");
    return 1;
  }
  return v15;
}

uint64_t MTLCompilerObject::createLoaderScript(uint64_t a1, char *__s, uint64_t a3)
{
  uint64_t v5;

  strlen(__s);
  v5 = LLVMCreateMemoryBufferWithMemoryRange();
  if (MTLCreateScript())
  {
    MTLGPUCompilerSetLoaderScript();
  }
  else
  {
    MTLCompilerErrorObject::setFormattedErrorMessage((char **)(a1 + 120), "error while parsing script: %s", 0);
    free(0);
    (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(a3 + 16))(a3, 2 * (*(_QWORD *)(a1 + 120) != 0), 0, 0);
    return 0;
  }
  return v5;
}

uint64_t MTLCompilerObject::invokeFunctionLoader(uint64_t a1, unsigned int *a2, unint64_t a3, llvm::LLVMContext *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t j;
  uint64_t v30;
  std::string *p_s;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  std::string *v35;
  __int128 v36;
  int Modules;
  uint64_t v39;
  unsigned int *v40;
  llvm::LLVMContext *v41;
  uint64_t v42;
  uint64_t LoaderScript;
  std::string v44;
  void *__p[2];
  std::string::size_type v46;
  void **v47;
  std::string __s;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  void *v57;
  uint64_t v58;
  void *v59;
  unsigned int v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  _QWORD v64[2];
  _QWORD v65[6];
  _QWORD v66[2];
  _BYTE v67[128];
  _BYTE v68[128];
  _QWORD *v69;
  unsigned int v70;
  _QWORD v71[4];

  v71[1] = *MEMORY[0x24BDAC8D0];
  if (a6
    && (v14 = objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytesNoCopy:length:freeWhenDone:", a6, a7, 0),
        (v15 = (char *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x24BDD1770], "propertyListWithData:options:format:error:", v14, 0, 0, 0), "objectForKeyedSubscript:", CFSTR("LinkerScript_module")), "UTF8String")) != 0))
  {
    LoaderScript = MTLCompilerObject::createLoaderScript(a1, v15, a8);
  }
  else
  {
    LoaderScript = 0;
  }
  v57 = 0;
  v58 = 0;
  v62 = a5;
  llvm::SmallVector<LLVMOpaqueModule *,1u>::SmallVector(&v69, &v62, 1);
  if (!MTLCompilerObject::readVisibleFunctions(a1, (uint64_t)&v69, a4, a2[37], a2[36], (uint64_t)a2, a3, (uint64_t)a2, 0))
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(a8 + 16))(a8, 2 * (*(_QWORD *)(a1 + 120) != 0), 0, 0);
    v32 = 0;
    goto LABEL_51;
  }
  if (a2[38])
  {
    v41 = a4;
    v42 = a1;
    v40 = a2;
    v16 = objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytes:length:", (char *)a2 + a2[39]);
    v59 = 0;
    v17 = (void *)MEMORY[0x24BDD1620];
    v18 = (void *)MEMORY[0x24BDBCF20];
    v19 = objc_opt_class();
    v20 = objc_opt_class();
    v21 = (void *)objc_msgSend(v17, "unarchivedObjectOfClasses:fromData:error:", objc_msgSend(v18, "setWithObjects:", v19, v20, objc_opt_class(), 0), v16, &v59);
    v39 = a8;
    v62 = v64;
    v63 = 0;
    v53 = 0u;
    v54 = 0u;
    v55 = 0u;
    v56 = 0u;
    v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v53, v68, 16);
    if (v22)
    {
      v23 = *(_QWORD *)v54;
      do
      {
        for (i = 0; i != v22; ++i)
        {
          if (*(_QWORD *)v54 != v23)
            objc_enumerationMutation(v21);
          v25 = *(void **)(*((_QWORD *)&v53 + 1) + 8 * i);
          __s.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s.__r_.__value_.__r.__words[2];
          __s.__r_.__value_.__l.__size_ = 0;
          v49 = 0u;
          v50 = 0u;
          v51 = 0u;
          v52 = 0u;
          v26 = (void *)objc_msgSend(v21, "objectForKeyedSubscript:", v25);
          v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v49, v67, 16);
          if (v27)
          {
            v28 = *(_QWORD *)v50;
            do
            {
              for (j = 0; j != v27; ++j)
              {
                if (*(_QWORD *)v50 != v28)
                  objc_enumerationMutation(v26);
                llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&__s, objc_msgSend(*(id *)(*((_QWORD *)&v49 + 1) + 8 * j), "UTF8String"));
              }
              v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v49, v67, 16);
            }
            while (v27);
          }
          objc_msgSend(v25, "UTF8String");
          v30 = MTLFunctionGroupCreate();
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v62, v30);
          if ((std::string::size_type *)__s.__r_.__value_.__l.__data_ != &__s.__r_.__value_.__r.__words[2])
            free(__s.__r_.__value_.__l.__data_);
        }
        v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v53, v68, 16);
      }
      while (v22);
    }
    a1 = v42;
    MTLGPUCompilerSetFunctionGroups();
    a8 = v39;
    a2 = v40;
    a4 = v41;
    if (v62 != v64)
      free(v62);
  }
  memset(&__s, 0, sizeof(__s));
  if (MTLCompilerObject::readVisibleFunctions(a1, (uint64_t)&v69, a4, a2[41], a2[40], (uint64_t)a2, a3, (uint64_t)a2, &__s))
  {
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    {
      if (__s.__r_.__value_.__l.__size_)
      {
        p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
        goto LABEL_33;
      }
    }
    else if (*((_BYTE *)&__s.__r_.__value_.__s + 23))
    {
      p_s = &__s;
LABEL_33:
      LoaderScript = MTLCompilerObject::createLoaderScript(a1, (char *)p_s, a8);
    }
    v62 = 0;
    v63 = 0;
    v64[0] = v65;
    v64[1] = 0x400000000;
    v65[4] = v66;
    v65[5] = 0;
    v66[0] = 0;
    v66[1] = 1;
    v47 = &v62;
    __p[0] = 0;
    llvm::SmallVector<char const*,1u>::SmallVector(&v59, v70, (uint64_t *)__p);
    v33 = v60;
    if (v60)
    {
      v34 = 0;
      do
      {
        std::to_string(&v44, v34);
        v35 = std::string::insert(&v44, 0, "linked-air-blob-");
        v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v46 = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)v59 + v34) = llvm::StringSaver::save();
        if (SHIBYTE(v46) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v44.__r_.__value_.__l.__data_);
        ++v34;
      }
      while (v33 != v34);
    }
    MTLGPUCompilerSetLoadingMode();
    Modules = MTLGPUCompilerLoadModules();
    if (LoaderScript)
      LLVMDisposeMemoryBuffer();
    if (Modules)
    {
      v32 = v58;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, void *))(a8 + 16))(a8, 2, 0, 0, v57);
      free(v57);
      v32 = 0;
    }
    if (v59 != &v61)
      free(v59);
    llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl((uint64_t)&v62);
    goto LABEL_49;
  }
  (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(a8 + 16))(a8, 2 * (*(_QWORD *)(a1 + 120) != 0), 0, 0);
  v32 = 0;
LABEL_49:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
LABEL_51:
  if (v69 != v71)
    free(v69);
  return v32;
}

void sub_24102B488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t *a55,uint64_t a56,uint64_t a57,void *a58)
{
  uint64_t v58;
  void *v60;

  if (a55 != &a57)
    free(a55);
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl((uint64_t)&a58);
  if (a35 < 0)
    operator delete(__p);
  v60 = *(void **)(v58 - 128);
  if (v60 != (void *)(v58 - 112))
    free(v60);
  _Unwind_Resume(a1);
}

uint64_t MTLCompilerObject::invokeLowerModule(int a1, uint64_t a2, int a3, llvm::Module *a4, MTLFunctionType a5, uint64_t a6)
{
  llvm::NamedMDNode *MDNodeForFunctionType;
  uint64_t v11;
  uint64_t v12;
  llvm::NamedMDNode *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  llvm::MDString *v17;
  _QWORD *String;
  llvm::Type *v19;
  BOOL v20;
  BOOL v21;
  uint64_t v23;
  llvm::MDString *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unsigned int v33;

  if (*(_DWORD *)(a2 + 284))
  {
    MTLGPUCompilerHandleSPIs();
    free(0);
  }
  if (a5 <= MTLFunctionTypeObject && ((1 << a5) & 0x186) != 0)
  {
    if ((*(_BYTE *)(a2 + 5) & 8) != 0)
    {
      getMDNodeForFunctionType(a4, a5);
      MTLGPUCompilerEnableDegenerateVertexAmplificationEmulation();
    }
    if (a5 == MTLFunctionTypeFragment && (*(_BYTE *)(a2 + 5) & 0x20) != 0)
    {
      MDNodeForFunctionType = getMDNodeForFunctionType(a4, MTLFunctionTypeFragment);
      v11 = ((_QWORD *)MDNodeForFunctionType - *((unsigned int *)MDNodeForFunctionType + 2))[2];
      if (v11)
      {
        v12 = *(unsigned int *)(v11 + 8);
        if ((_DWORD)v12)
        {
          v13 = MDNodeForFunctionType;
          v14 = -8 * v12;
          while (1)
          {
            v15 = *(_QWORD *)(v11 + v14);
            v16 = *(unsigned int *)(v15 + 8);
            if (v16 >= 2)
            {
              v17 = *(llvm::MDString **)(v15 - 8 * v16 + 8);
              if (!*(_BYTE *)v17)
              {
                String = (_QWORD *)llvm::MDString::getString(v17);
                if (v19 == (llvm::Type *)29)
                {
                  v20 = *String == 0x646E65722E726961 && String[1] == 0x65677261745F7265;
                  v21 = v20 && String[2] == 0x5F79617272615F74;
                  if (v21 && *(_QWORD *)((char *)String + 21) == 0x7865646E695F7961)
                    break;
                }
              }
              v23 = *(unsigned int *)(v15 + 8);
              if (v23 >= 4)
              {
                v24 = *(llvm::MDString **)(v15 - 8 * v23 + 24);
                if (!*(_BYTE *)v24)
                {
                  v25 = (unint64_t *)llvm::MDString::getString(v24);
                  if (v19 == (llvm::Type *)29)
                  {
                    v26 = bswap64(*v25);
                    v27 = 0x6169722E72656E64;
                    if (v26 != 0x6169722E72656E64)
                      goto LABEL_33;
                    v27 = 0x65725F7461726765;
                    v26 = bswap64(v25[1]);
                    if (v26 == 0x65725F7461726765
                      && (v27 = 0x745F61727261795FLL, v26 = bswap64(v25[2]), v26 == 0x745F61727261795FLL)
                      && (v27 = 0x61795F696E646578,
                          v26 = bswap64(*(unint64_t *)((char *)v25 + 21)),
                          v26 == 0x61795F696E646578))
                    {
                      v28 = 0;
                    }
                    else
                    {
LABEL_33:
                      v28 = v26 < v27 ? -1 : 1;
                    }
                    if (!v28)
                      break;
                  }
                }
              }
            }
            v14 += 8;
            if (!v14)
              goto LABEL_38;
          }
          v30 = *(_QWORD *)(*((_QWORD *)v13 - *((unsigned int *)v13 + 2)) + 128);
          v31 = *(_QWORD *)(*(_QWORD *)(v15 - 8 * *(unsigned int *)(v15 + 8)) + 128);
          v32 = (_QWORD *)(v31 + 24);
          if (*(_DWORD *)(v31 + 32) >= 0x41u)
            v32 = (_QWORD *)*v32;
          v33 = *(_DWORD *)v32;
          if ((*(_WORD *)(v30 + 18) & 1) != 0)
            llvm::Function::BuildLazyArguments((llvm::Function *)v30);
          llvm::Constant::getNullValue(*(llvm::Constant **)(*(_QWORD *)(v30 + 88) + 40 * v33), v19);
          llvm::Value::replaceAllUsesWith();
          llvm::MDString::get();
          llvm::MDNode::replaceOperandWith();
        }
      }
    }
  }
LABEL_38:
  MTLGPUCompilerEnableRaytracingEmulation();
  MTLGPUCompilerSetRaytracingEmulationIndirectAccelerationStructures();
  MTLGPUCompilerSetRaytracingEmulationMaxAccelerationStructureTraversalDepth();
  MTLGPUCompilerEnable16BitTextureCoordinateEmulation();
  MTLGPUCompilerEnableTLSEmulation();
  MTLGPUCompilerEnableResourcePatchingInstrumentation();
  MTLGPUCompilerEnableResourceUsageInstrumentation();
  MTLGPUCompilerEnableExternallyInitializedVariableSupport();
  MTLGPUCompilerEnableBFloatEmulation();
  MTLGPUCompilerEnableDoubleEmulation();
  MTLGPUCompilerEnableGlobalBindingInDylibSupport();
  MTLGPUCompilerEnableGlobalBuiltinInDylibSupport();
  if (!MTLGPUCompilerLowerModule())
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(a6 + 16))(a6, 2, 0, 0, 0);
  free(0);
  return 0;
}

void MTLCompilerObject::loadRuntimeModules(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  const __CFString *v6;
  uint64_t *v7;
  NSObject *v8;
  uint64_t *v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  BOOL v40;
  uint64_t *v41;
  _QWORD *v42;
  uint64_t **v43;
  void *__p;
  uint64_t *v45;
  uint64_t *v46;
  void *p_p;
  char *v48;
  char *v49;
  const __CFString *v50;
  uint64_t *v51;
  _QWORD *v52[2];
  uint64_t *v53;
  uint8_t v54[4];
  uint64_t v55;
  uint8_t v56[4];
  uint64_t v57;
  uint8_t v58[4];
  _BYTE v59[28];

  *(_QWORD *)&v59[12] = *MEMORY[0x24BDAC8D0];
  v4 = objc_msgSend(MEMORY[0x24BDD1488], "bundleWithIdentifier:", CFSTR("com.apple.Metal"));
  if (!v4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      MTLCompilerObject::loadRuntimeModules();
    return;
  }
  v5 = (void *)v4;
  v52[0] = 0;
  v52[1] = 0;
  v51 = (uint64_t *)v52;
  if ((**(_DWORD **)(a2 + 32) & 0x1000000) != 0)
    v6 = CFSTR("MTLRaytracingRuntime_instrumented");
  else
    v6 = CFSTR("MTLRaytracingRuntime");
  v50 = v6;
  p_p = &v50;
  std::__tree<std::__value_type<llvm::Function *,llvm::Value *>,std::__map_value_compare<llvm::Function *,std::__value_type<llvm::Function *,llvm::Value *>,std::less<llvm::Function *>,true>,std::allocator<std::__value_type<llvm::Function *,llvm::Value *>>>::__emplace_unique_key_args<llvm::Function *,std::piecewise_construct_t const&,std::tuple<llvm::Function * const&>,std::tuple<>>(&v51, (unint64_t *)&v50, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_p)[5] = (uint64_t)"__air_raytracing_impl";
  __p = CFSTR("MTLShaderLoggingRuntime");
  p_p = &__p;
  std::__tree<std::__value_type<llvm::Function *,llvm::Value *>,std::__map_value_compare<llvm::Function *,std::__value_type<llvm::Function *,llvm::Value *>,std::less<llvm::Function *>,true>,std::allocator<std::__value_type<llvm::Function *,llvm::Value *>>>::__emplace_unique_key_args<llvm::Function *,std::piecewise_construct_t const&,std::tuple<llvm::Function * const&>,std::tuple<>>(&v51, (unint64_t *)&__p, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_p)[5] = (uint64_t)"__air_impl_os_log";
  p_p = 0;
  v48 = 0;
  v49 = 0;
  __p = 0;
  v45 = 0;
  v46 = 0;
  v7 = v51;
  if (v51 == (uint64_t *)v52)
    goto LABEL_67;
  v42 = v59;
  v43 = (uint64_t **)(a1 + 16);
  v8 = MEMORY[0x24BDACB70];
  do
  {
    v9 = v7 + 4;
    v10 = (unint64_t *)(v7 + 5);
    v11 = *(_QWORD **)(a1 + 24);
    if (!v11)
      goto LABEL_15;
    v12 = *v10;
    while (1)
    {
      v13 = v11[4];
      if (v12 >= v13)
        break;
LABEL_12:
      v11 = (_QWORD *)*v11;
      if (!v11)
        goto LABEL_15;
    }
    if (v13 < v12)
    {
      ++v11;
      goto LABEL_12;
    }
    v53 = v7 + 5;
    if (std::__tree<std::__value_type<llvm::Function *,llvm::Value *>,std::__map_value_compare<llvm::Function *,std::__value_type<llvm::Function *,llvm::Value *>,std::less<llvm::Function *>,true>,std::allocator<std::__value_type<llvm::Function *,llvm::Value *>>>::__emplace_unique_key_args<llvm::Function *,std::piecewise_construct_t const&,std::tuple<llvm::Function * const&>,std::tuple<>>(v43, (unint64_t *)v7 + 5, (uint64_t)&std::piecewise_construct, &v53)[5] != *v9)
    {
LABEL_15:
      v14 = v48;
      if (v48 >= v49)
      {
        v16 = (v48 - (_BYTE *)p_p) >> 3;
        if ((unint64_t)(v16 + 1) >> 61)
          std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
        v17 = (v49 - (_BYTE *)p_p) >> 2;
        if (v17 <= v16 + 1)
          v17 = v16 + 1;
        if ((unint64_t)(v49 - (_BYTE *)p_p) >= 0x7FFFFFFFFFFFFFF8)
          v18 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v18 = v17;
        if (v18)
          v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v49, v18);
        else
          v19 = 0;
        v20 = &v19[8 * v16];
        *(_QWORD *)v20 = *v10;
        v15 = v20 + 8;
        v22 = (char *)p_p;
        v21 = v48;
        if (v48 != p_p)
        {
          do
          {
            v23 = *((_QWORD *)v21 - 1);
            v21 -= 8;
            *((_QWORD *)v20 - 1) = v23;
            v20 -= 8;
          }
          while (v21 != v22);
          v21 = (char *)p_p;
        }
        p_p = v20;
        v48 = v15;
        v49 = &v19[8 * v18];
        if (v21)
          operator delete(v21);
      }
      else
      {
        *(_QWORD *)v48 = *v10;
        v15 = v14 + 8;
      }
      v48 = v15;
      v24 = objc_msgSend((id)objc_msgSend(v5, "URLForResource:withExtension:", *v9, CFSTR("rtlib"), v42), "fileSystemRepresentation");
      if (v24)
      {
        if (LLVMCreateMemoryBufferWithContentsOfFile())
        {
          if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
            MTLCompilerObject::loadRuntimeModules(v56, v24, &v57);
        }
        else
        {
          v25 = MTLObjectCreate();
          v26 = v25;
          if (v25)
          {
            v27 = v45;
            if (v45 >= v46)
            {
              v29 = ((char *)v45 - (_BYTE *)__p) >> 3;
              if ((unint64_t)(v29 + 1) >> 61)
                std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
              v30 = ((char *)v46 - (_BYTE *)__p) >> 2;
              if (v30 <= v29 + 1)
                v30 = v29 + 1;
              if ((unint64_t)((char *)v46 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
                v31 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v31 = v30;
              if (v31)
                v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v46, v31);
              else
                v32 = 0;
              v33 = (uint64_t *)&v32[8 * v29];
              *v33 = v26;
              v28 = v33 + 1;
              v35 = (char *)__p;
              v34 = (char *)v45;
              if (v45 != __p)
              {
                do
                {
                  v36 = *((_QWORD *)v34 - 1);
                  v34 -= 8;
                  *--v33 = v36;
                }
                while (v34 != v35);
                v34 = (char *)__p;
              }
              __p = v33;
              v45 = v28;
              v46 = (uint64_t *)&v32[8 * v31];
              if (v34)
                operator delete(v34);
            }
            else
            {
              *v45 = v25;
              v28 = v27 + 1;
            }
            v45 = v28;
            v37 = *v9;
            v53 = v7 + 5;
            std::__tree<std::__value_type<llvm::Function *,llvm::Value *>,std::__map_value_compare<llvm::Function *,std::__value_type<llvm::Function *,llvm::Value *>,std::less<llvm::Function *>,true>,std::allocator<std::__value_type<llvm::Function *,llvm::Value *>>>::__emplace_unique_key_args<llvm::Function *,std::piecewise_construct_t const&,std::tuple<llvm::Function * const&>,std::tuple<>>(v43, (unint64_t *)v7 + 5, (uint64_t)&std::piecewise_construct, &v53)[5] = v37;
          }
          else if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          {
            MTLCompilerObject::loadRuntimeModules(v58, v7 + 4, v42);
          }
        }
      }
      else if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        MTLCompilerObject::loadRuntimeModules(v54, v7 + 4, &v55);
      }
    }
    v38 = (uint64_t *)v7[1];
    if (v38)
    {
      do
      {
        v39 = v38;
        v38 = (uint64_t *)*v38;
      }
      while (v38);
    }
    else
    {
      do
      {
        v39 = (uint64_t *)v7[2];
        v40 = *v39 == (_QWORD)v7;
        v7 = v39;
      }
      while (!v40);
    }
    v7 = v39;
  }
  while (v39 != (uint64_t *)v52);
  v41 = (uint64_t *)__p;
  if (p_p != v48)
  {
    MTLGPUCompilerSetLoweringRuntimes();
    v41 = (uint64_t *)__p;
  }
  if (v41)
  {
    v45 = v41;
    operator delete(v41);
  }
LABEL_67:
  if (p_p)
  {
    v48 = (char *)p_p;
    operator delete(p_p);
  }
  std::__tree<std::__value_type<llvm::Function *,llvm::Value *>,std::__map_value_compare<llvm::Function *,std::__value_type<llvm::Function *,llvm::Value *>,std::less<llvm::Function *>,true>,std::allocator<std::__value_type<llvm::Function *,llvm::Value *>>>::destroy((uint64_t)&v51, v52[0]);
}

void sub_24102BF78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,_QWORD *a27)
{
  if (__p)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  std::__tree<std::__value_type<llvm::Function *,llvm::Value *>,std::__map_value_compare<llvm::Function *,std::__value_type<llvm::Function *,llvm::Value *>,std::less<llvm::Function *>,true>,std::allocator<std::__value_type<llvm::Function *,llvm::Value *>>>::destroy((uint64_t)&a26, a27);
  _Unwind_Resume(a1);
}

void MTLCompilerObject::downgradeAndLoadModuleRequest(llvm::legacy::PassManager **a1, uint64_t a2)
{
  _DWORD *v4;
  int v5;
  int v6;
  uint64_t v7;
  llvm::Module *v8;
  llvm::Module **v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  llvm::legacy::PassManager *v17;
  llvm::legacy::PassManager *v18;
  llvm::legacy::PassManager *v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  void *v23;
  uint64_t i;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  int v29;
  uint64_t *v30;
  void *__p;
  void *v32;
  uint64_t v33;
  _QWORD v34[3];
  char v35[8];
  void *v36[2];
  uint64_t v37;
  uint64_t v38;
  void *v39[2];
  void *v40[2];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int16 v54;
  __int128 v55;
  __int128 v56;
  _BYTE v57[26];
  __int128 v58;
  _BYTE v59[28];
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v52 = 0;
  v53 = 0;
  v50 = 0;
  v51 = 0;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v42 = 0u;
  v40[0] = 0;
  v41 = 0u;
  v37 = 0;
  *(_OWORD *)v39 = 0u;
  *(_OWORD *)v36 = 0u;
  v38 = -1;
  v40[1] = 0;
  v48 = 0;
  v49 = 0;
  v47 = 0;
  v4 = *(_DWORD **)(a2 + 32);
  v5 = v4[55];
  if (v5 == 10 || v5 == 1)
    v6 = *v4 >> 31;
  else
    v6 = 0;
  MEMORY[0x24268CA5C](v35);
  v34[0] = v35;
  v34[2] = llvm::LLVMContext::getDiagnosticContext((llvm::LLVMContext *)v35);
  v34[1] = llvm::LLVMContext::getDiagnosticHandlerCallBack((llvm::LLVMContext *)v35);
  v7 = llvm::LLVMContext::setDiagnosticHandlerCallBack();
  v54 = 0;
  v55 = 0u;
  v56 = 0u;
  memset(v57, 0, sizeof(v57));
  v58 = 0u;
  memset(v59, 0, sizeof(v59));
  MTLCompilerObject::getReadParametersFromRequest(v7, (uint64_t)&v54, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), (unsigned int *)(*(_QWORD *)(a2 + 32) + 88), *(_QWORD *)(a2 + 32));
  v8 = MTLCompilerObject::readModuleFromBinaryRequest((uint64_t)a1, &v54, (llvm::LLVMContext *)v35, (MTLFunctionType *)(a2 + 40), (void **)&v45, (unint64_t *)&v45 + 1, v5 == 1);
  *(_QWORD *)(a2 + 48) = v8;
  v9 = (llvm::Module **)(a2 + 48);
  if (!v8)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a2 + 24) + 16))(*(_QWORD *)(a2 + 24), 2 * (a1[15] != 0), 0, 0);
LABEL_31:
    free((void *)v45);
    goto LABEL_32;
  }
  if (!v6)
  {
    v12 = *(_QWORD *)(a2 + 32);
    if ((*(_BYTE *)(v12 + 3) & 4) != 0)
    {
      *(_QWORD *)(a2 + 48) = MTLCompilerObject::invokeFunctionLoader((uint64_t)a1, (unsigned int *)v12, *(_QWORD *)(a2 + 8), (llvm::LLVMContext *)v35, v8, v45, *((uint64_t *)&v45 + 1), *(_QWORD *)(a2 + 24));
      **(_DWORD **)(a2 + 32) &= ~0x4000000u;
    }
    free((void *)v45);
    *(_QWORD *)&v45 = 0;
    v13 = *(_QWORD *)(a2 + 32);
    if ((*(_BYTE *)(v13 + 3) & 2) != 0)
    {
      if (!*v9)
        goto LABEL_32;
      *(_QWORD *)(a2 + 48) = MTLCompilerObject::invokeLowerModule((int)a1, v13, (int)v35, *v9, *(MTLFunctionType *)(a2 + 40), *(_QWORD *)(a2 + 24));
      **(_DWORD **)(a2 + 32) &= ~0x2000000u;
    }
    if (*v9)
    {
      v11 = *(_QWORD *)(a2 + 32);
      goto LABEL_18;
    }
LABEL_32:
    v22 = 0;
    v23 = 0;
    goto LABEL_33;
  }
  v10 = MTLCompilerObject::runFrameworkPasses((MTLCompilerObject *)a1, (uint64_t *)a2, v36, (llvm::LLVMContext *)v35, (uint64_t)&v50);
  v11 = *(_QWORD *)(a2 + 32);
  if ((v10 & 1) == 0 && (*(_BYTE *)(v11 + 4) & 2) == 0)
    goto LABEL_31;
LABEL_18:
  if (*(_DWORD *)(v11 + 12) != 12)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, const char *))(*(_QWORD *)(a2 + 24) + 16))(*(_QWORD *)(a2 + 24), 2 * (a1[15] != 0), 0, 0, "Invalid air downgrade request data size");
    goto LABEL_31;
  }
  v14 = *(_QWORD *)a2 + *(unsigned int *)(v11 + 8);
  if ((*(_BYTE *)(v14 + 8) & 1) != 0)
  {
    if ((v15 & 1) == 0
    {
      dword_2570FBBCC = 0;
      MTLCompilerObject::downgradeAndLoadModuleRequest(BinaryRequestData &)::stats = 0u;
      unk_2570FBBBC = 0u;
      unk_2570FBBE4 = 0u;
      unk_2570FBBF4 = 0u;
      unk_2570FBC04 = 0u;
    }
    if ((v16 & 1) == 0
    {
      MTLCompilerObject::downgradeAndLoadModuleRequest(BinaryRequestData &)::symbol_serialized_data = (uint64_t)&unk_2570FBC30;
      qword_2570FBC28 = 0x400000000;
      qword_2570FBC90 = (uint64_t)&unk_2570FBCA0;
      qword_2570FBC98 = 0x1000000000;
      qword_2570FBDA0 = (uint64_t)&unk_2570FBDB0;
      qword_2570FBDA8 = 0x1000000000;
      qword_2570FBE70 = (uint64_t)&qword_2570FBE80;
      qword_2570FBE78 = 0;
      qword_2570FBE80 = (uint64_t)&unk_2570FBE98;
      qword_2570FBE90 = 0;
      qword_2570FBE88 = 0;
      __cxa_atexit((void (*)(void *))MTLBoundsCheck::SerializedData::~SerializedData, &MTLCompilerObject::downgradeAndLoadModuleRequest(BinaryRequestData &)::symbol_serialized_data, &dword_240FA3000);
    }
    qword_2570FBBA4 = qword_2570FBBA4 & 0xFFFFFFFFFFFFFFEFLL | (8 * *(unsigned __int8 *)(v14 + 8)) & 0x10 | 0xC0000;
    v17 = *a1;
    if (!*a1)
    {
      v18 = (llvm::legacy::PassManager *)operator new();
      llvm::legacy::PassManager::PassManager(v18);
      v19 = *a1;
      *a1 = v18;
      if (v19)
      {
        (*(void (**)(llvm::legacy::PassManager *))(*(_QWORD *)v19 + 8))(v19);
        v18 = *a1;
      }
      MTLAddDebugSymbolPrepassToPM((uint64_t)v18, (uint64_t)&MTLCompilerObject::downgradeAndLoadModuleRequest(BinaryRequestData &)::options, (uint64_t)&MTLCompilerObject::downgradeAndLoadModuleRequest(BinaryRequestData &)::stats, (uint64_t)&MTLCompilerObject::downgradeAndLoadModuleRequest(BinaryRequestData &)::symbol_serialized_data);
      v17 = *a1;
    }
    llvm::legacy::PassManager::run(v17, *v9);
  }
  if (!MTLDowngradeAIRModule())
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a2 + 24) + 16))(*(_QWORD *)(a2 + 24), 2 * (a1[15] != 0), 0, 0);
    goto LABEL_32;
  }
  v20 = *(_QWORD *)(a2 + 32);
  if ((*(_BYTE *)(v20 + 5) & 2) != 0)
  {
    if (((v51 - v50) & 0xFFFFFFFF0) != 0)
      v21 = 12 * ((unint64_t)(v51 - v50) >> 4) + 4;
    else
      v21 = 0;
  }
  else
  {
    v21 = 0;
  }
  v29 = (*(_DWORD *)v20 >> 30) & 1;
  v30 = (uint64_t *)v36;
  if (!v6)
    v30 = 0;
  v22 = 1;
  v23 = (void *)MTLCompilerObject::serializeLibraryReply((uint64_t)a1, &v53, 0, 1, (llvm::Module **)(a2 + 48), 1uLL, v21, 0, v29, *(_DWORD *)(v14 + 4), v30);
LABEL_33:
  ScopedDiagnosticHandler::~ScopedDiagnosticHandler((ScopedDiagnosticHandler *)v34);
  llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)v35);
  if (v22)
  {
    if (v23)
    {
      __p = 0;
      v32 = 0;
      v33 = 0;
      std::vector<CompileTimeData>::__init_with_size[abi:ne180100]<CompileTimeData*,CompileTimeData*>(&__p, v50, (uint64_t)v51, (v51 - v50) >> 4);
      serializeCompileTimeDataInReply((uint64_t)v23, (uint64_t)&__p);
      if (__p)
      {
        v32 = __p;
        operator delete(__p);
      }
      (*(void (**)(void))(*(_QWORD *)(a2 + 24) + 16))();
      free(v23);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a2 + 24) + 16))(*(_QWORD *)(a2 + 24), 2 * (a1[15] != 0), 0, 0);
    }
    if ((_QWORD)v45)
    {
      free((void *)v45);
      v45 = 0uLL;
    }
  }
  for (i = 22; i != 19; --i)
    std::unique_ptr<void,LLVMMemoryBufferDeleter>::reset[abi:ne180100]((uint64_t *)&v36[i], 0);
  v25 = (void *)v46;
  *(_QWORD *)&v46 = 0;
  if (v25)
    free(v25);
  v26 = v40[1];
  v40[1] = 0;
  if (v26)
    free(v26);
  v27 = v39[0];
  v39[0] = 0;
  if (v27)
    free(v27);
  v28 = v36[0];
  v36[0] = 0;
  if (v28)
    free(v28);
  if (v50)
  {
    v51 = v50;
    operator delete(v50);
  }
}

void sub_24102C61C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  uint64_t v23;
  void *v25;

  MEMORY[0x24268D8F0](v22, 0xA1C40BD48D6D6);
  ScopedDiagnosticHandler::~ScopedDiagnosticHandler((ScopedDiagnosticHandler *)&a15);
  llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)&a18);
  FrameworkPassesOutput::~FrameworkPassesOutput((FrameworkPassesOutput *)&a20);
  v25 = *(void **)(v23 - 240);
  if (v25)
  {
    *(_QWORD *)(v23 - 232) = v25;
    operator delete(v25);
  }
  _Unwind_Resume(a1);
}

uint64_t fatalDiagnosticHandler(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];

  if (!*(_BYTE *)(result + 12))
  {
    memset(v8, 0, sizeof(v8));
    printDiagnosticError(result, (uint64_t)v8);
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_FAULT))
      fatalDiagnosticHandler((uint64_t)v8, v1, v2, v3, v4, v5, v6, v7);
    abort();
  }
  return result;
}

void sub_24102C710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MTLCompilerObject::runFrameworkPasses(MTLCompilerObject *a1, uint64_t *a2, _QWORD *a3, llvm::LLVMContext *a4, uint64_t a5)
{
  _DWORD *v5;
  uint64_t v6;
  int v8;
  int v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  void *v18[2];
  void *__p[2];
  __int128 v20;
  char **v21;
  char *v22[4];
  int v23;

  v5 = (_DWORD *)a2[4];
  if ((*v5 & 0x80000000) == 0)
    return 1;
  v8 = (int)a4;
  v12 = v5[1];
  if ((*v5 & 0x800000) == 0 && (v12 & 2) != 0 && a3[17] == 0)
    goto LABEL_10;
  if (!MTLCompilerObject::loadModule((uint64_t)a1, a2, (uint64_t)a3, a4))
    return 0;
  if (*((_BYTE *)a1 + 128))
  {
LABEL_10:
    if ((v12 & 0x40000000) != 0)
      goto LABEL_14;
  }
  else
  {
    v14 = MTLWriteAIRReflectionToMemoryBuffer();
    std::unique_ptr<void,LLVMMemoryBufferDeleter>::reset[abi:ne180100](a3 + 21, v14);
    if ((v12 & 0x40000000) != 0)
      goto LABEL_14;
  }
  if ((MTLCompilerObject::generateReflection((uint64_t)a1, (uint64_t)a2, (uint64_t)a3) & 1) != 0)
    return 0;
LABEL_14:
  MTLCompilerObject::deserializePluginData(a1, a2, (uint64_t)a3);
  MTLCompilerObject::runDebugInstrumentationPass((uint64_t)a1, a2, a3, a5);
  if ((v12 & 2) == 0 && !MTLCompilerObject::lowerModule((uint64_t)a1, (uint64_t)a2, (uint64_t)a3, v8))
    return 0;
  *(_OWORD *)v18 = 0u;
  *(_OWORD *)__p = 0u;
  v20 = 0u;
  v21 = v22;
  memset(v22, 0, sizeof(v22));
  v23 = 0;
  if ((MTLCompilerObject::runFWPassesForFunctionType(a1, a2, v15, (MTLCompilerObject::FragmentVaryingsInfo *)v18) & 1) == 0)
    goto LABEL_21;
  if (!*((_BYTE *)a1 + 128))
  {
    v16 = MTLWriteAIRReflectionToMemoryBuffer();
    std::unique_ptr<void,LLVMMemoryBufferDeleter>::reset[abi:ne180100](a3 + 22, v16);
  }
  if ((v12 & 0x40000000) != 0
    && (MTLCompilerObject::generateReflection((uint64_t)a1, (uint64_t)a2, (uint64_t)a3) & 1) != 0)
  {
LABEL_21:
    v6 = 0;
  }
  else
  {
    MTLCompilerObject::patchReflection((uint64_t)a1, (uint64_t)a2, (uint64_t)a3);
    v6 = MTLCompilerObject::runLinkingPasses(a1, (uint64_t)a2, (uint64_t)a3, (uint64_t)v18);
  }
  std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::destroy((uint64_t)&v21, v22[0]);
  if (__p[1])
  {
    *(void **)&v20 = __p[1];
    operator delete(__p[1]);
  }
  if (v18[0])
  {
    v18[1] = v18[0];
    operator delete(v18[0]);
  }
  return v6;
}

void sub_24102C908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9)
{
  MTLCompilerObject::FragmentVaryingsInfo::~FragmentVaryingsInfo(&a9);
  _Unwind_Resume(a1);
}

void MTLBoundsCheck::SerializedData::~SerializedData(MTLBoundsCheck::SerializedData *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;

  v2 = (char *)this + 608;
  v3 = (char *)*((_QWORD *)this + 76);
  if (v3 != (char *)this + 632)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 74);
  if (v4 != v2)
    free(v4);
  v5 = (char *)*((_QWORD *)this + 48);
  if (v5 != (char *)this + 400)
    free(v5);
  v6 = (char *)*((_QWORD *)this + 14);
  if (v6 != (char *)this + 128)
    free(v6);
  llvm::SmallVector<std::string,4u>::~SmallVector((char **)this);
}

void serializeCompileTimeDataInReply(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  if (*(_DWORD *)(a1 + 52))
  {
    v3 = *(unsigned int *)(a1 + 48);
    v12 = 0;
    v13 = 0;
    v11 = 0;
    std::vector<CompileTimeData>::__init_with_size[abi:ne180100]<CompileTimeData*,CompileTimeData*>(&v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
    v4 = v11;
    if (v12 == v11)
    {
      v4 = v12;
    }
    else
    {
      v5 = a1 + v3;
      v6 = (v12 - v11) >> 4;
      *(_WORD *)v5 = v6;
      *(_BYTE *)(v5 + 2) = BYTE2(v6);
      *(_BYTE *)(v5 + 3) = BYTE3(v6);
      v7 = v6;
      if ((_DWORD)v6)
      {
        v8 = 0;
        v9 = v5 + 4;
        v10 = 16 * v7;
        do
        {
          *(_DWORD *)v9 = *(_DWORD *)&v4[v8];
          *(_QWORD *)(v9 + 4) = *(_QWORD *)&v4[v8 + 8];
          v9 += 12;
          v8 += 16;
        }
        while (v10 != v8);
LABEL_9:
        v12 = v4;
        operator delete(v4);
        return;
      }
    }
    if (!v4)
      return;
    goto LABEL_9;
  }
}

void FrameworkPassesOutput::~FrameworkPassesOutput(FrameworkPassesOutput *this)
{
  uint64_t i;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  for (i = 176; i != 152; i -= 8)
    std::unique_ptr<void,LLVMMemoryBufferDeleter>::reset[abi:ne180100]((uint64_t *)((char *)this + i), 0);
  v3 = (void *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v3)
    free(v3);
  v4 = (void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
    free(v4);
  v5 = (void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
    free(v5);
  v6 = *(void **)this;
  *(_QWORD *)this = 0;
  if (v6)
    free(v6);
}

void MTLCompilerObject::stitchFunctionDag(uint64_t a1, llvm::LLVMContext *this, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  const char *v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  int v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  BOOL v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  llvm::Module *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  llvm::Module **v54;
  char *v55;
  char *v56;
  llvm::Module *v57;
  unint64_t v58;
  int v60;
  unint64_t v61;
  unsigned int v62;
  unint64_t v63;
  int v65;
  unint64_t v66;
  uint64_t v68;
  unint64_t v69;
  int *v70;
  unsigned __int16 *v71;
  uint64_t v72;
  int *v73;
  unsigned __int16 *v74;
  uint64_t v75;
  int *v76;
  unsigned int *v77;
  unint64_t v78;
  int v79;
  unint64_t v80;
  unint64_t v81;
  int v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  uint64_t *v90;
  uint64_t *v91;
  _QWORD *i;
  char *v93;
  char *__s;
  uint64_t v96;
  char *v97;
  char *__src;
  void *__p[2];
  char v100;
  __int128 v101;
  __int128 v102;
  int v103;
  void *v104;
  char *v105;
  char *v106;
  void *v107;
  uint64_t *v108;
  uint64_t *v109;
  void *v110;
  char *v111;
  char *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  _QWORD v116[3];
  unsigned __int16 v117;
  __int128 v118;
  __int128 v119;
  _QWORD v120[4];
  __int128 v121;
  _BYTE v122[28];
  uint64_t v123;

  v123 = *MEMORY[0x24BDAC8D0];
  v116[0] = this;
  v116[2] = llvm::LLVMContext::getDiagnosticContext(this);
  v116[1] = llvm::LLVMContext::getDiagnosticHandlerCallBack(this);
  v96 = a1;
  llvm::LLVMContext::setDiagnosticHandlerCallBack();
  v113 = a4;
  v114 = a5;
  v115 = 0;
  if (a5 <= 3)
    abort();
  v115 = 4;
  v10 = DeserialContext::deserializeCStringNoCopy((DeserialContext *)&v113, 0);
  v117 = 0;
  v118 = 0u;
  v119 = 0u;
  memset(v120, 0, 26);
  v121 = 0u;
  memset(v122, 0, sizeof(v122));
  v11 = v115;
  if (v114 <= v115 || v114 - v115 < 4)
    goto LABEL_172;
  v12 = *(_DWORD *)(v113 + v115);
  v13 = v115 + 4;
  v115 += 4;
  if (v12 == 1634300534)
  {
    if (v114 > v13 && v114 - v13 >= 4)
    {
      v14 = *(_DWORD *)(v113 + v13);
      v115 = v11 + 8;
      LODWORD(v120[0]) = v14;
      if (v114 > v11 + 8 && v114 - (v11 + 8) >= 4)
      {
        v15 = *(_DWORD *)(v113 + v11 + 8);
        v115 = v11 + 12;
        HIDWORD(v120[0]) = v15;
        if (v114 > v11 + 12 && v114 - (v11 + 12) > 3)
        {
          v13 = v11 + 16;
          v115 = v11 + 16;
          goto LABEL_12;
        }
      }
    }
LABEL_172:
    abort();
  }
LABEL_12:
  __s = (char *)v10;
  if (v114 <= v13 || v114 - v13 <= 3)
    abort();
  v16 = *(unsigned int *)(v113 + v13);
  v115 = v13 + 4;
  v110 = 0;
  v111 = 0;
  v112 = 0;
  std::vector<llvm::Metadata *>::reserve(&v110, v16);
  v107 = 0;
  v108 = 0;
  v109 = 0;
  v104 = 0;
  v105 = 0;
  v106 = 0;
  std::vector<llvm::Metadata *>::reserve(&v107, v16);
  if (!(_DWORD)v16)
  {
LABEL_83:
    v58 = v115;
    if (v114 <= v115 || v114 - v115 < 4)
LABEL_174:
      abort();
    v60 = *(_DWORD *)(v113 + v115);
    v61 = v115 + 4;
    v115 += 4;
    if (v60 == 1853189491)
    {
      if (v114 <= v61 || v114 - v61 <= 3)
        goto LABEL_174;
      v62 = *(_DWORD *)(v113 + v61);
      v115 = v58 + 8;
    }
    else
    {
      v62 = 0;
    }
    v101 = 0u;
    v102 = 0u;
    v103 = 1065353216;
    std::__hash_table<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>>>::__rehash<true>((uint64_t)&v101, (unint64_t)(float)v62);
    for (; v62; --v62)
    {
      v63 = v115;
      if (v114 <= v115 || v114 - v115 <= 3)
        abort();
      v65 = *(_DWORD *)(v113 + v115);
      v66 = v115 + 4;
      v115 += 4;
      if (v65 == 1634952050)
      {
        if (v114 <= v66 || v114 - v66 <= 3)
          abort();
        v68 = *(unsigned int *)(v113 + v66);
        v69 = v63 + 8;
        v115 = v69;
        if (v69 >= v114 || (v115 = v69 + v68, v69 + v68 > v114))
          abort();
        v70 = (int *)(v113 + v69 + *(unsigned int *)(v113 + v69));
        v71 = (unsigned __int16 *)((char *)v70 - *v70);
        if (*v71 >= 9u && (v72 = v71[4]) != 0)
          v73 = (int *)((char *)v70 + v72 + *(unsigned int *)((char *)v70 + v72));
        else
          v73 = 0;
        v74 = (unsigned __int16 *)((char *)v73 - *v73);
        if (*v74 >= 7u && (v75 = v74[3]) != 0)
          v76 = (int *)((char *)v73 + v75 + *(unsigned int *)((char *)v73 + v75));
        else
          v76 = 0;
        v77 = (unsigned int *)((char *)v76 + *(unsigned __int16 *)((char *)v76 - *v76 + 4));
        std::string::basic_string[abi:ne180100](__p, (char *)v77 + *v77 + 4, *(unsigned int *)((char *)v77 + *v77));
        __src = 0;
        __src = (char *)LLVMCreateMemoryBufferWithMemoryRange();
        std::__hash_table<std::__hash_value_type<std::string,LLVMOpaqueMemoryBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,LLVMOpaqueMemoryBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,LLVMOpaqueMemoryBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,LLVMOpaqueMemoryBuffer *>>>::__emplace_unique_key_args<std::string,std::string,LLVMOpaqueMemoryBuffer *&>((uint64_t)&v101, (unsigned __int8 *)__p, (uint64_t)__p, (uint64_t *)&__src);
        if (v100 < 0)
          operator delete(__p[0]);
      }
    }
    v78 = v115;
    if (v114 > v115 && v114 - v115 >= 4)
    {
      v79 = *(_DWORD *)(v113 + v115);
      v80 = v115 + 4;
      v115 += 4;
      if (v79 != 1886676589)
      {
LABEL_125:
        if (v114 > v80 && v114 - v80 >= 4)
        {
          v82 = *(_DWORD *)(v113 + v80);
          v83 = v80 + 4;
          v115 = v80 + 4;
          if (v82 != 1634888036)
            goto LABEL_134;
          if (v114 <= v83 || v114 - v83 < 4)
            goto LABEL_173;
          v84 = *(unsigned int *)(v113 + v83);
          v85 = v80 + 8;
          v115 = v85;
          if (!(_DWORD)v84)
          {
LABEL_134:
            v86 = 0;
            goto LABEL_135;
          }
          if (v85 < v114)
          {
            v115 = v85 + v84;
            if (v85 + v84 <= v114)
            {
              v86 = v113 + v85;
LABEL_135:
              __src = 0;
              __p[0] = 0;
              strlen(__s);
              LLVMCreateMemoryBufferWithMemoryRange();
              if (MTLCreateScript())
              {
                free(__src);
                __src = 0;
                MTLGPUCompilerSetStitcherScript();
                v87 = MTLGPUCompilerStitchFunctionsToBuffer() != 0;
              }
              else
              {
                MTLCompilerErrorObject::setFormattedErrorMessage((char **)(a1 + 120), "error while parsing script: %s", __src);
                free(__src);
                v87 = 0;
                __src = 0;
              }
              LLVMDisposeMemoryBuffer();
              if (v86)
                v89 = v87;
              else
                v89 = 0;
              if (v89 == 1)
              {
                v97 = 0;
                LOBYTE(v87) = MTLCompilerObject::insertStitchedFunctionsIntoArchive(a1, v86, v88, (uint64_t)__p[0], &v101, (uint64_t)&v107, &__src);
              }
              v90 = (uint64_t *)v107;
              v91 = v108;
              while (v90 != v91)
              {
                LLVMDisposeMemoryBuffer();
                ++v90;
              }
              for (i = (_QWORD *)v102; i; i = (_QWORD *)*i)
                LLVMDisposeMemoryBuffer();
              if ((v87 & 1) != 0)
              {
                v97 = 0;
                v93 = MTLCompilerObject::serializeLibraryToArchiveReply(v96, (size_t *)&v97, (const char **)&__src, 1, 1, (uint64_t)__p[0], 0);
                if (__p[0])
                  LLVMDisposeMemoryBuffer();
                (*(void (**)(uint64_t, _QWORD, char *, char *, _QWORD))(a6 + 16))(a6, 0, v93, v97, 0);
                free(v93);
              }
              else
              {
                if (__src)
                {
                  MTLCompilerErrorObject::setFormattedErrorMessage((char **)(v96 + 120), "error: %s", __src);
                  free(__src);
                  __src = 0;
                }
                (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(a6 + 16))(a6, 2 * (*(_QWORD *)(v96 + 120) != 0), 0, 0);
              }
              std::__hash_table<std::__hash_value_type<std::string,MTLCompilerDataType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLCompilerDataType>>>::~__hash_table((uint64_t)&v101);
              goto LABEL_157;
            }
          }
        }
LABEL_173:
        abort();
      }
      v19 = v114 >= v80;
      v81 = v114 - v80;
      if (v81 != 0 && v19 && v81 > 3)
      {
        v80 = v78 + 8;
        v115 = v78 + 8;
        goto LABEL_125;
      }
    }
    abort();
  }
  v17 = 0;
  while (1)
  {
    for (v120[2] = 0; ; v120[2] = DeserialContext::deserializeCStringNoCopy((DeserialContext *)&v113, 0))
    {
      while (1)
      {
        v18 = v115;
        v19 = v114 > v115 && v114 - v115 >= 4;
        if (!v19)
          goto LABEL_164;
        v20 = *(_DWORD *)(v113 + v115);
        v21 = v115 + 4;
        v115 += 4;
        if (v20 != 1651007859)
          break;
        if (v114 <= v21 || (v115 = v18 + 36, v18 + 36 > v114))
          abort();
        v22 = v113 + v21;
        v23 = v105;
        if (v105 >= v106)
        {
          v25 = (v105 - (_BYTE *)v104) >> 3;
          if ((unint64_t)(v25 + 1) >> 61)
            std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
          v26 = (v106 - (_BYTE *)v104) >> 2;
          if (v26 <= v25 + 1)
            v26 = v25 + 1;
          if ((unint64_t)(v106 - (_BYTE *)v104) >= 0x7FFFFFFFFFFFFFF8)
            v27 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v27 = v26;
          if (v27)
            v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v106, v27);
          else
            v28 = 0;
          v29 = &v28[8 * v25];
          *(_QWORD *)v29 = v22;
          v24 = v29 + 8;
          v31 = (char *)v104;
          v30 = v105;
          if (v105 != v104)
          {
            do
            {
              v32 = *((_QWORD *)v30 - 1);
              v30 -= 8;
              *((_QWORD *)v29 - 1) = v32;
              v29 -= 8;
            }
            while (v30 != v31);
            v30 = (char *)v104;
          }
          v104 = v29;
          v105 = v24;
          v106 = &v28[8 * v27];
          if (v30)
            operator delete(v30);
        }
        else
        {
          *(_QWORD *)v105 = v22;
          v24 = v23 + 8;
        }
        v105 = v24;
      }
      if (v20 != 1953656940)
        break;
    }
    if (v20 != 1651078243)
LABEL_164:
      abort();
    if (v114 <= v21 || v114 - v21 <= 3)
      abort();
    v33 = *(unsigned int *)(v113 + v21);
    v34 = v18 + 8;
    v115 = v34;
    if (v34 >= v114 || (v115 = v34 + v33, v34 + v33 > v114))
      abort();
    v117 = 0;
    *(_QWORD *)&v118 = v33;
    *((_QWORD *)&v118 + 1) = v113 + v34;
    *(_QWORD *)&v101 = 1;
    v35 = MTLCompilerObject::readModuleFromBinaryRequest(a1, &v117, this, (MTLFunctionType *)&v101, 0, 0, 0);
    if (!v35)
      break;
    v36 = LLVMCreateMemoryBufferWithMemoryRange();
    v37 = v36;
    v38 = v108;
    if (v108 >= v109)
    {
      v40 = ((char *)v108 - (_BYTE *)v107) >> 3;
      if ((unint64_t)(v40 + 1) >> 61)
        std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
      v41 = ((char *)v109 - (_BYTE *)v107) >> 2;
      if (v41 <= v40 + 1)
        v41 = v40 + 1;
      if ((unint64_t)((char *)v109 - (_BYTE *)v107) >= 0x7FFFFFFFFFFFFFF8)
        v42 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v42 = v41;
      if (v42)
        v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v109, v42);
      else
        v43 = 0;
      v44 = (uint64_t *)&v43[8 * v40];
      *v44 = v37;
      v39 = v44 + 1;
      v46 = (char *)v107;
      v45 = (char *)v108;
      if (v108 != v107)
      {
        do
        {
          v47 = *((_QWORD *)v45 - 1);
          v45 -= 8;
          *--v44 = v47;
        }
        while (v45 != v46);
        v45 = (char *)v107;
      }
      v107 = v44;
      v108 = v39;
      v109 = (uint64_t *)&v43[8 * v42];
      if (v45)
        operator delete(v45);
    }
    else
    {
      *v108 = v36;
      v39 = v38 + 1;
    }
    v108 = v39;
    v48 = v111;
    if (v111 >= v112)
    {
      v50 = (v111 - (_BYTE *)v110) >> 3;
      if ((unint64_t)(v50 + 1) >> 61)
        std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
      v51 = (v112 - (_BYTE *)v110) >> 2;
      if (v51 <= v50 + 1)
        v51 = v50 + 1;
      if ((unint64_t)(v112 - (_BYTE *)v110) >= 0x7FFFFFFFFFFFFFF8)
        v52 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v52 = v51;
      if (v52)
        v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v112, v52);
      else
        v53 = 0;
      v54 = (llvm::Module **)&v53[8 * v50];
      *v54 = v35;
      v49 = (char *)(v54 + 1);
      v56 = (char *)v110;
      v55 = v111;
      if (v111 != v110)
      {
        do
        {
          v57 = (llvm::Module *)*((_QWORD *)v55 - 1);
          v55 -= 8;
          *--v54 = v57;
        }
        while (v55 != v56);
        v55 = (char *)v110;
      }
      v110 = v54;
      v111 = v49;
      v112 = &v53[8 * v52];
      if (v55)
        operator delete(v55);
    }
    else
    {
      *(_QWORD *)v111 = v35;
      v49 = v48 + 8;
    }
    v111 = v49;
    if (++v17 == (_DWORD)v16)
      goto LABEL_83;
  }
  (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(a6 + 16))(a6, 2 * (*(_QWORD *)(a1 + 120) != 0), 0, 0);
LABEL_157:
  if (v104)
  {
    v105 = (char *)v104;
    operator delete(v104);
  }
  if (v107)
  {
    v108 = (uint64_t *)v107;
    operator delete(v107);
  }
  if (v110)
  {
    v111 = (char *)v110;
    operator delete(v110);
  }
  ScopedDiagnosticHandler::~ScopedDiagnosticHandler((ScopedDiagnosticHandler *)v116);
}

void sub_24102D5D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  std::__hash_table<std::__hash_value_type<std::string,MTLCompilerDataType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLCompilerDataType>>>::~__hash_table((uint64_t)&a24);
  if (__p)
  {
    a30 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a32)
  {
    a33 = (uint64_t)a32;
    operator delete(a32);
  }
  if (a35)
  {
    a36 = (uint64_t)a35;
    operator delete(a35);
  }
  ScopedDiagnosticHandler::~ScopedDiagnosticHandler((ScopedDiagnosticHandler *)&a41);
  _Unwind_Resume(a1);
}

uint64_t MTLCompilerObject::insertStitchedFunctionsIntoArchive(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, char **a7)
{
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  int v14;
  uint64_t v15;

  v15 = a4;
  v12 = 0u;
  v13 = 0u;
  v14 = 1065353216;
  if (!MTLCompilerObject::extractFunctionsFromMetallib(a1, (uint64_t)&v15, (uint64_t)&v12, a7) || !MTLGPUArchiverFromId())
  {
LABEL_10:
    v10 = 0;
    goto LABEL_11;
  }
  v8 = (unsigned __int8 *)v13;
  if ((_QWORD)v13)
  {
    while (std::__hash_table<std::__hash_value_type<std::string,MTLCompilerDataType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLCompilerDataType>>>::find<std::string>(a5, v8 + 16))
    {
      LLVMCreateMemoryBufferWithMemoryRange();
      v9 = MTLGPUArchiverAddUnit();
      LLVMDisposeMemoryBuffer();
      if (!v9 || !MTLGPUArchiverAddLinkedModules())
        break;
      v8 = *(unsigned __int8 **)v8;
      if (!v8)
        goto LABEL_8;
    }
    MTLGPUArchiverDeleteWithId();
    MTLGPUArchiverDestroy();
    goto LABEL_10;
  }
LABEL_8:
  MTLGPUArchiverDestroy();
  v10 = 1;
LABEL_11:
  std::__hash_table<std::__hash_value_type<std::string,MTLCompilerDataType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLCompilerDataType>>>::~__hash_table((uint64_t)&v12);
  return v10;
}

void sub_24102D848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::__hash_table<std::__hash_value_type<std::string,MTLCompilerDataType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLCompilerDataType>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL MTLCompilerObject::extractFunctionsFromMetallib(uint64_t a1, uint64_t a2, uint64_t a3, char **a4)
{
  llvm::object::MetalLibObjectFile *v6;
  _BOOL8 v7;
  uint64_t v8;
  std::string::size_type v9;
  uint64_t v10;
  void *v11;
  char v12;
  unsigned __int8 *v13;
  void *v14;
  uint64_t v15;
  BOOL v16;
  std::string::size_type v17;
  void *v18;
  std::string::size_type v19;
  std::string __s1;
  std::string __p;
  _OWORD v23[2];
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 *v27;
  __int128 *v28;
  __int128 *v29;
  char v30;
  std::string::size_type v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  _QWORD v35[8];

  v35[6] = *MEMORY[0x24BDAC8D0];
  llvm::MemoryBufferRef::MemoryBufferRef();
  v24 = 0;
  v6 = (llvm::object::MetalLibObjectFile *)operator new();
  v23[0] = v25;
  v23[1] = v26;
  MEMORY[0x24268D1AC](v6, v23, &v24);
  if (v24)
  {
    v7 = 0;
    if (a4)
      *a4 = strdup("Failed to decode metallib");
  }
  else
  {
    llvm::object::MetalLibObjectFile::functions(v6);
    if ((v33 & 1) != 0)
    {
      if (a4)
      {
        v17 = v31;
        v31 = 0;
        *(_QWORD *)&v34 = v35;
        *((_QWORD *)&v34 + 1) = 0x200000000;
        __s1.__r_.__value_.__r.__words[0] = v17;
        v29 = &v34;
        llvm::handleAllErrors<llvm::toString(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>((uint64_t *)&__s1, (uint64_t *)&v29);
        if (__s1.__r_.__value_.__r.__words[0])
          (*(void (**)(std::string::size_type))(*(_QWORD *)__s1.__r_.__value_.__l.__data_ + 8))(__s1.__r_.__value_.__r.__words[0]);
        llvm::detail::join_impl<std::string *>((std::string *)v34, (std::string *)(v34 + 24 * DWORD2(v34)), "\n", 1uLL, &__p);
        llvm::SmallVector<std::string,4u>::~SmallVector((char **)&v34);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          v18 = (void *)__p.__r_.__value_.__r.__words[0];
          *a4 = strdup(__p.__r_.__value_.__l.__data_);
          operator delete(v18);
        }
        else
        {
          *a4 = strdup((const char *)&__p);
        }
      }
      v7 = 0;
    }
    else
    {
      v8 = v31;
      if (v31 == v32)
      {
        v7 = 1;
      }
      else
      {
        v9 = v31 + 8;
        do
        {
          v10 = *(_QWORD *)(v9 - 8);
          v11 = *(void **)(v10 + 8);
          if (v11)
            std::string::basic_string[abi:ne180100](&__p, v11, *(_QWORD *)(v10 + 16));
          else
            memset(&__p, 0, sizeof(__p));
          llvm::object::MetalLibObjectFile::moduleOfFunction((uint64_t)v6, v8, (uint64_t)&v29);
          v12 = v30;
          v7 = (v30 & 1) == 0;
          if ((v30 & 1) != 0)
          {
            if (a4)
            {
              v28 = v29;
              v29 = 0;
              *(_QWORD *)&v34 = v35;
              *((_QWORD *)&v34 + 1) = 0x200000000;
              v27 = &v34;
              llvm::handleAllErrors<llvm::toString(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>((uint64_t *)&v28, (uint64_t *)&v27);
              if (v28)
                (*(void (**)(__int128 *))(*(_QWORD *)v28 + 8))(v28);
              llvm::detail::join_impl<std::string *>((std::string *)v34, (std::string *)(v34 + 24 * DWORD2(v34)), "\n", 1uLL, &__s1);
              llvm::SmallVector<std::string,4u>::~SmallVector((char **)&v34);
              if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
              {
                v14 = (void *)__s1.__r_.__value_.__r.__words[0];
                *a4 = strdup(__s1.__r_.__value_.__l.__data_);
                operator delete(v14);
              }
              else
              {
                *a4 = strdup((const char *)&__s1);
              }
            }
          }
          else
          {
            v34 = *(_OWORD *)(*(_QWORD *)v29 + 16);
            __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            v13 = std::__hash_table<std::__hash_value_type<std::string,llvm::StringRef>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,llvm::StringRef>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,llvm::StringRef>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,llvm::StringRef>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&__s1);
            *(_OWORD *)(v13 + 40) = v34;
          }
          if ((v30 & 1) != 0)
          {
            v15 = (uint64_t)v29;
            v29 = 0;
            if (v15)
              (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if ((v12 & 1) != 0)
            break;
          v8 += 8;
          v16 = v9 == v32;
          v9 += 8;
        }
        while (!v16);
      }
    }
    if ((v33 & 1) != 0)
    {
      v19 = v31;
      v31 = 0;
      if (v19)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v19 + 8))(v19);
    }
  }
  (*(void (**)(llvm::object::MetalLibObjectFile *))(*(_QWORD *)v6 + 8))(v6);
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  return v7;
}

void sub_24102DC00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33,int a34,char *a35)
{
  uint64_t v35;

  llvm::SmallVector<std::string,4u>::~SmallVector(&a35);
  if ((a33 & 1) != 0 && a31)
    (*(void (**)(uint64_t))(*(_QWORD *)a31 + 8))(a31);
  (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  if (a22)
    (*(void (**)(uint64_t))(*(_QWORD *)a22 + 8))(a22);
  _Unwind_Resume(a1);
}

uint64_t MTLCompilerObject::invokeLoaderForSpecializedFunction(uint64_t a1, void **a2, uint64_t a3, unsigned int *a4, unint64_t a5, llvm::LLVMContext *a6, uint64_t a7)
{
  uint64_t Name;
  void *v14;
  uint64_t v15;
  void *v17;
  void *__p[2];
  uint64_t v19;

  __p[0] = 0;
  __p[1] = 0;
  v19 = 0;
  if (a3)
  {
    MTLMetalLibGetFunctionNo();
    MTLMetalFunctionGetModule();
    Name = MTLMetalFunctionGetName();
    MEMORY[0x24268D7A0](__p, Name);
    llvm::CloneModule();
    v14 = v17;
    MTLMetalLibDestroy();
  }
  else
  {
    MEMORY[0x24268D7A0](__p, (char *)a4 + a4[22]);
    v14 = *a2;
  }
  *a4 |= 0xC000000u;
  MTLCompilerObject::invokeFunctionLoader(a1, a4, a5, a6, v14, 0, 0, a7);
  v15 = serializeModuleToBufferAsMetallib();
  if (v14 == *a2)
    *a2 = 0;
  if (SHIBYTE(v19) < 0)
    operator delete(__p[0]);
  return v15;
}

void sub_24102DE44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t llvm::object::MetalLibObjectFile::moduleOfFunction@<X0>(uint64_t this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v3 = this;
  if ((*(_WORD *)(this + 70) & 1) != 0)
  {
    v7 = *(_QWORD *)(this + 408);
  }
  else
  {
    v5 = a2 - *(_QWORD *)(this + 280);
    v6 = *(_DWORD *)(*(_QWORD *)(this + 352) + (v5 >> 1));
    if (v6 == -1)
    {
      this = llvm::object::MetalLibObjectFile::materializeModuleForFunctionNo((llvm::object::MetalLibObjectFile *)this);
      v7 = v9;
      if (v9)
      {
        v8 = *(_BYTE *)(a3 + 8) | 1;
        goto LABEL_6;
      }
      v6 = *(_DWORD *)(*(_QWORD *)(v3 + 352) + 4 * (v5 >> 3));
    }
    v7 = *(_QWORD *)(v3 + 400) + 8 * v6;
  }
  v8 = *(_BYTE *)(a3 + 8) & 0xFE;
LABEL_6:
  *(_BYTE *)(a3 + 8) = v8;
  *(_QWORD *)a3 = v7;
  return this;
}

BOOL MTLCompilerObject::insertFunctionInArchive(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char **a5)
{
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  _OWORD v11[2];
  int v12;

  if (!MTLGPUArchiverFromId())
    return 0;
  LLVMCreateMemoryBufferWithMemoryRange();
  v7 = LLVMCreateMemoryBufferWithMemoryRange();
  memset(v11, 0, sizeof(v11));
  v12 = 1065353216;
  if (MTLCompilerObject::extractFunctionsFromMetallib(v7, a4, (uint64_t)v11, a5)
    && ((LLVMCreateMemoryBufferWithMemoryRange(),
         v8 = MTLGPUArchiverAddUnit(),
         LLVMDisposeMemoryBuffer(),
         LLVMDisposeMemoryBuffer(),
         LLVMDisposeMemoryBuffer(),
         v8)
     || !*a5))
  {
    v9 = MTLGPUArchiverFlush() != 0;
    MTLGPUArchiverDestroy();
  }
  else
  {
    MTLGPUArchiverDestroy();
    v9 = 0;
  }
  std::__hash_table<std::__hash_value_type<std::string,MTLCompilerDataType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLCompilerDataType>>>::~__hash_table((uint64_t)v11);
  return v9;
}

void sub_24102E080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__hash_table<std::__hash_value_type<std::string,MTLCompilerDataType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLCompilerDataType>>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MTLCompilerObject::buildSpecializedFunctionRequest(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  void **v10;
  uint64_t v11;
  void *ModuleFromBinaryRequest;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  int v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  void **v38;
  uint64_t v39;
  char *v40;
  char *v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  void *v59;
  void *v60;
  uint64_t v61;
  void *v62;
  void *v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  int v67;
  size_t v68;
  void *__p[2];
  uint64_t DiagnosticContext;
  void *v71;
  char *v72;
  unint64_t v73;
  uint8_t buf[4];
  _BYTE v75[20];
  _QWORD v76[6];
  __int128 v77;
  _BYTE v78[28];
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  v71 = 0;
  v72 = 0;
  v73 = 0;
  LODWORD(v68) = 15;
  MTLBuildRequestTypeToString(&v68, __p);
  if (logCompileBegin(std::string const&,unsigned long long &,char const*,std::string const&)::onceToken != -1)
    dispatch_once(&logCompileBegin(std::string const&,unsigned long long &,char const*,std::string const&)::onceToken, &__block_literal_global_165);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    v9 = a1 + 136;
    if (*(char *)(a1 + 159) < 0)
      v9 = *(_QWORD *)(a1 + 136);
    v10 = __p;
    if (DiagnosticContext < 0)
      v10 = (void **)__p[0];
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)v75 = v9;
    *(_WORD *)&v75[8] = 2082;
    *(_QWORD *)&v75[10] = v10;
    *(_WORD *)&v75[18] = 2080;
    v76[0] = "function specialization";
    _os_log_impl(&dword_240FA3000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "Compilation BEGIN (ParentProcessName=%{public}s) Build request: %{public}s - %s", buf, 0x20u);
  }
  v58 = mach_absolute_time();
  if (SHIBYTE(DiagnosticContext) < 0)
    operator delete(__p[0]);
  v68 = 0;
  if ((*(_BYTE *)(a2 + 5) & 2) != 0)
    v58 = mach_absolute_time();
  MEMORY[0x24268CA5C](&v67);
  __p[0] = &v67;
  DiagnosticContext = llvm::LLVMContext::getDiagnosticContext((llvm::LLVMContext *)&v67);
  __p[1] = (void *)llvm::LLVMContext::getDiagnosticHandlerCallBack((llvm::LLVMContext *)&v67);
  v11 = llvm::LLVMContext::setDiagnosticHandlerCallBack();
  *(_WORD *)buf = 0;
  *(_OWORD *)&v75[4] = 0u;
  memset(v76, 0, 42);
  v77 = 0u;
  memset(v78, 0, sizeof(v78));
  MTLCompilerObject::getReadParametersFromRequest(v11, (uint64_t)buf, a2, a3, (unsigned int *)(a2 + 88), a2);
  v66 = 1;
  ModuleFromBinaryRequest = MTLCompilerObject::readModuleFromBinaryRequest(a1, (unsigned __int16 *)buf, (llvm::LLVMContext *)&v67, (MTLFunctionType *)&v66, 0, 0, 1);
  v13 = (uint64_t)ModuleFromBinaryRequest;
  v64 = 0;
  v65 = ModuleFromBinaryRequest;
  v63 = 0;
  if (!ModuleFromBinaryRequest)
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(a5 + 16))(a5, 2 * (*(_QWORD *)(a1 + 120) != 0), 0, 0);
LABEL_36:
    v26 = 0;
    v27 = 0;
    v23 = 0;
    goto LABEL_57;
  }
  v14 = *(_DWORD *)(a2 + 160);
  v15 = *(unsigned int *)(a2 + 12);
  if (!(_DWORD)v15)
  {
    v18 = 0;
    v19 = 0;
    v17 = 0;
    if (!v14)
      goto LABEL_28;
    goto LABEL_27;
  }
  v16 = *(unsigned int *)(a2 + 8);
  if ((*(_BYTE *)(a2 + 5) & 2) != 0)
    v17 = mach_absolute_time();
  else
    v17 = 0;
  v20 = (const char *)(a2 + v16);
  v21 = a2 + 236;
  if (v14)
  {
    ModuleFromBinaryRequest = (void *)MTLCompilerObject::applyConstantValues(a1, (llvm::LLVMContext *)&v67, v13, v21, v20, v15, v77, (const char **)&v63);
    v19 = (uint64_t)ModuleFromBinaryRequest;
    if (ModuleFromBinaryRequest)
    {
      v18 = 0;
      goto LABEL_26;
    }
LABEL_35:
    free(v63);
    (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(a5 + 16))(a5, 2 * (*(_QWORD *)(a1 + 120) != 0), 0, 0);
    goto LABEL_36;
  }
  ModuleFromBinaryRequest = (void *)MTLCompilerObject::applyConstantValuesToArchive(a1, (llvm::LLVMContext *)&v67, v13, v21, v20, v15, v77, (const char **)&v63);
  v18 = (uint64_t)ModuleFromBinaryRequest;
  v64 = (uint64_t)ModuleFromBinaryRequest;
  if (!ModuleFromBinaryRequest)
    goto LABEL_35;
  v19 = 0;
LABEL_26:
  if (*(_DWORD *)(a2 + 160))
  {
LABEL_27:
    ModuleFromBinaryRequest = (void *)MTLCompilerObject::invokeLoaderForSpecializedFunction(a1, &v65, v19, (unsigned int *)a2, a3, (llvm::LLVMContext *)&v67, a5);
    v18 = (uint64_t)ModuleFromBinaryRequest;
    v64 = (uint64_t)ModuleFromBinaryRequest;
  }
LABEL_28:
  if ((*(_BYTE *)(a2 + 2) & 0x80) != 0)
  {
    v62 = 0;
    MTLCompilerObject::insertFunctionInArchive((uint64_t)ModuleFromBinaryRequest, a2, (uint64_t)buf, (uint64_t)&v64, (char **)&v62);
    if (v62)
    {
      (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a5 + 16))(a5, 2, 0, 0);
      free(v62);
      goto LABEL_36;
    }
  }
  if ((*(_BYTE *)(a2 + 5) & 2) != 0)
  {
    v23 = (unint64_t)(*(double *)&gMachTimeToNS * (double)(mach_absolute_time() - v17));
    v24 = v72;
    if ((unint64_t)v72 >= v73)
    {
      v28 = (char *)v71;
      v29 = (v72 - (_BYTE *)v71) >> 4;
      v30 = v29 + 1;
      if ((unint64_t)(v29 + 1) >> 60)
        std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
      v31 = v73 - (_QWORD)v71;
      if ((uint64_t)(v73 - (_QWORD)v71) >> 3 > v30)
        v30 = v31 >> 3;
      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0)
        v32 = 0xFFFFFFFFFFFFFFFLL;
      else
        v32 = v30;
      if (v32)
      {
        v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SmallVertexPartialLoad>>((uint64_t)&v73, v32);
        v28 = (char *)v71;
        v24 = v72;
      }
      else
      {
        v33 = 0;
      }
      v34 = &v33[16 * v29];
      v35 = &v33[16 * v32];
      *(_DWORD *)v34 = 1;
      *((_QWORD *)v34 + 1) = v23;
      v25 = v34 + 16;
      if (v24 != v28)
      {
        do
        {
          *((_OWORD *)v34 - 1) = *((_OWORD *)v24 - 1);
          v34 -= 16;
          v24 -= 16;
        }
        while (v24 != v28);
        v28 = (char *)v71;
      }
      v71 = v34;
      v72 = v25;
      v73 = (unint64_t)v35;
      if (v28)
      {
        operator delete(v28);
        v18 = v64;
      }
    }
    else
    {
      *(_DWORD *)v72 = 1;
      *((_QWORD *)v24 + 1) = v23;
      v25 = v24 + 16;
    }
    v72 = v25;
    if (((unint64_t)(v25 - (_BYTE *)v71) >> 4) == -2)
      v22 = 0;
    else
      v22 = 12 * (((unint64_t)(v25 - (_BYTE *)v71) >> 4) + 2) + 4;
  }
  else
  {
    v22 = 0;
    v23 = 0;
  }
  v26 = MTLCompilerObject::serializeLibraryToArchiveReply(a1, &v68, (const char **)&v63, 1, 1, v18, v22);
  if (v18)
    LLVMDisposeMemoryBuffer();
  v27 = 1;
LABEL_57:
  ScopedDiagnosticHandler::~ScopedDiagnosticHandler((ScopedDiagnosticHandler *)__p);
  llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)&v67);
  if (v27)
  {
    if (v26)
    {
      v67 = 15;
      MTLBuildRequestTypeToString(&v67, __p);
      v36 = (unint64_t)(*(double *)&gMachTimeToNS * (double)(mach_absolute_time() - v58));
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      {
        v37 = a1 + 136;
        if (*(char *)(a1 + 159) < 0)
          v37 = *(_QWORD *)(a1 + 136);
        v38 = __p;
        if (DiagnosticContext < 0)
          v38 = (void **)__p[0];
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)v75 = v37;
        *(_WORD *)&v75[8] = 2082;
        *(_QWORD *)&v75[10] = v38;
        *(_WORD *)&v75[18] = 2080;
        v76[0] = "function specialization";
        LOWORD(v76[1]) = 2048;
        *(double *)((char *)&v76[1] + 2) = (double)v36 * 0.000001;
        _os_log_impl(&dword_240FA3000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "Compilation SUCCESS (ParentProcessName=%{public}s) (TYPE=%{public}s - %s): Time %f ms ", buf, 0x2Au);
      }
      if (SHIBYTE(DiagnosticContext) < 0)
        operator delete(__p[0]);
      v39 = (uint64_t)v72;
      if ((*(_BYTE *)(a2 + 5) & 2) != 0)
      {
        v40 = (char *)v73;
        if ((unint64_t)v72 >= v73)
        {
          v42 = v71;
          v43 = (v72 - (_BYTE *)v71) >> 4;
          v44 = v43 + 1;
          if ((unint64_t)(v43 + 1) >> 60)
            std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
          v45 = v73 - (_QWORD)v71;
          if ((uint64_t)(v73 - (_QWORD)v71) >> 3 > v44)
            v44 = v45 >> 3;
          if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF0)
            v46 = 0xFFFFFFFFFFFFFFFLL;
          else
            v46 = v44;
          if (v46)
          {
            v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SmallVertexPartialLoad>>((uint64_t)&v73, v46);
            v42 = v71;
            v39 = (uint64_t)v72;
          }
          else
          {
            v47 = 0;
          }
          v48 = &v47[16 * v43];
          v40 = &v47[16 * v46];
          *(_DWORD *)v48 = 6;
          *((_QWORD *)v48 + 1) = v36;
          v41 = v48 + 16;
          if ((void *)v39 != v42)
          {
            do
            {
              *((_OWORD *)v48 - 1) = *(_OWORD *)(v39 - 16);
              v48 -= 16;
              v39 -= 16;
            }
            while ((void *)v39 != v42);
            v42 = v71;
          }
          v71 = v48;
          v72 = v41;
          v73 = (unint64_t)v40;
          if (v42)
          {
            operator delete(v42);
            v40 = (char *)v73;
          }
        }
        else
        {
          *(_DWORD *)v72 = 6;
          *(_QWORD *)(v39 + 8) = v36;
          v41 = (char *)(v39 + 16);
        }
        v72 = v41;
        v49 = v36 - v23;
        if (v41 >= v40)
        {
          v50 = (char *)v71;
          v51 = (v41 - (_BYTE *)v71) >> 4;
          v52 = v51 + 1;
          if ((unint64_t)(v51 + 1) >> 60)
            std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
          v53 = v40 - (_BYTE *)v71;
          if (v53 >> 3 > v52)
            v52 = v53 >> 3;
          if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF0)
            v54 = 0xFFFFFFFFFFFFFFFLL;
          else
            v54 = v52;
          if (v54)
          {
            v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SmallVertexPartialLoad>>((uint64_t)&v73, v54);
            v50 = (char *)v71;
            v41 = v72;
          }
          else
          {
            v55 = 0;
          }
          v56 = &v55[16 * v51];
          v57 = &v55[16 * v54];
          *(_DWORD *)v56 = 4;
          *((_QWORD *)v56 + 1) = v49;
          v39 = (uint64_t)(v56 + 16);
          if (v41 != v50)
          {
            do
            {
              *((_OWORD *)v56 - 1) = *((_OWORD *)v41 - 1);
              v56 -= 16;
              v41 -= 16;
            }
            while (v41 != v50);
            v50 = (char *)v71;
          }
          v71 = v56;
          v72 = (char *)v39;
          v73 = (unint64_t)v57;
          if (v50)
            operator delete(v50);
        }
        else
        {
          *(_DWORD *)v41 = 4;
          *((_QWORD *)v41 + 1) = v49;
          v39 = (uint64_t)(v41 + 16);
        }
        v72 = (char *)v39;
      }
      v59 = 0;
      v60 = 0;
      v61 = 0;
      std::vector<CompileTimeData>::__init_with_size[abi:ne180100]<CompileTimeData*,CompileTimeData*>(&v59, v71, v39, (v39 - (uint64_t)v71) >> 4);
      serializeCompileTimeDataInReply((uint64_t)v26, (uint64_t)&v59);
      if (v59)
      {
        v60 = v59;
        operator delete(v59);
      }
      (*(void (**)(uint64_t, _QWORD, char *, size_t, _QWORD))(a5 + 16))(a5, 0, v26, v68, 0);
      free(v26);
    }
    else
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(a5 + 16))(a5, 2 * (*(_QWORD *)(a1 + 120) != 0), 0, 0);
    }
  }
  if (v71)
  {
    v72 = (char *)v71;
    operator delete(v71);
  }
}

void sub_24102E914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<CompileTimeData>::push_back[abi:ne180100](void **a1, _OWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_OWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = ((char *)v7 - (_BYTE *)*a1) >> 4;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60)
      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
    v11 = v5 - (_QWORD)*a1;
    if (v11 >> 3 > v10)
      v10 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SmallVertexPartialLoad>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v9];
    v15 = &v13[16 * v12];
    *(_OWORD *)v14 = *a2;
    v8 = v14 + 16;
    v17 = (char *)*a1;
    v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v16 - 1);
        v14 -= 16;
        v16 -= 16;
      }
      while (v16 != v17);
      v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v7 = *a2;
    v8 = v7 + 1;
  }
  a1[1] = v8;
}

uint64_t MTLCompilerObject::checkNoStageInAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *String;
  uint64_t v8;
  size_t v9;
  const char *v10;
  uint64_t v12;
  uint64_t v13;
  llvm::MDString *v14;
  _QWORD *v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
  if (v2)
  {
    v3 = *(unsigned int *)(v2 + 8);
    if ((int)v3 >= 1)
    {
      v5 = 0;
      while (1)
      {
        v6 = *(_QWORD *)(v2 - 8 * *(unsigned int *)(v2 + 8) + 8 * v5);
        String = (_QWORD *)llvm::MDString::getString(*(llvm::MDString **)(v6 - 8 * *(unsigned int *)(v6 + 8) + 8));
        v9 = v8;
        if (v8 <= 15)
          break;
        if (v8 == 29)
        {
          v10 = "air.patch_control_point_input";
LABEL_18:
          if (memcmp(String, v10, v9))
            goto LABEL_19;
          goto LABEL_21;
        }
        if (v8 != 16)
          goto LABEL_19;
        if (*String != 0x747265762E726961 || String[1] != 0x7475706E695F7865)
          goto LABEL_19;
LABEL_21:
        v12 = *(unsigned int *)(v6 + 8);
        if (!(_DWORD)v12)
        {
LABEL_31:
          MTLCompilerErrorObject::setErrorMessage((MTLCompilerErrorObject *)(a1 + 120), "Function requires stage_in attributes but no descriptor was set.");
          return 0;
        }
        v13 = v6;
        while (1)
        {
          v14 = *(llvm::MDString **)(v13 - 8 * *(unsigned int *)(v6 + 8));
          if (v14)
          {
            if (!*(_BYTE *)v14)
            {
              v15 = (_QWORD *)llvm::MDString::getString(v14);
              if (v16 == 14 && *v15 == 0x5F6772612E726961 && *(_QWORD *)((char *)v15 + 6) == 0x646573756E755F67)
                break;
            }
          }
          v13 += 8;
          if (!--v12)
            goto LABEL_31;
        }
LABEL_19:
        if (++v5 == v3)
          return 1;
      }
      if (v8 == 12)
      {
        v10 = "air.stage_in";
      }
      else
      {
        if (v8 != 15)
          goto LABEL_19;
        v10 = "air.patch_input";
      }
      goto LABEL_18;
    }
  }
  return 1;
}

const char *MTLCompilerObject::validateSerializedVertexDescriptor(MTLCompilerObject *this, const char *a2, unint64_t a3)
{
  unint64_t v5;
  unint64_t v6;

  if (a3 <= 7)
    MTLCompilerErrorObject::setErrorMessage((MTLCompilerObject *)((char *)this + 120), "Invalid vertex descriptor");
  v5 = *(unsigned __int16 *)a2;
  if (v5 > a3
    || v5 < 8
    || (v6 = *((unsigned __int16 *)a2 + 1), ((v6 >> 2) & 0x1F0) + *((unsigned __int16 *)a2 + 2) > v5)
    || *((unsigned __int16 *)a2 + 3) + ((v6 >> 8) & 0xF8) > v5)
  {
    abort();
  }
  return a2;
}

uint64_t MTLCompilerObject::checkVertexRenderTargetArrayIndex(uint64_t a1, int a2, uint64_t a3, int a4)
{
  BOOL v4;
  uint64_t v5;
  const char *v6;

  if (a2 && !a3)
  {
    MTLCompilerErrorObject::setErrorMessage((MTLCompilerErrorObject *)(a1 + 120), "Vertex shader writes render_target_array_index but inputPrimitiveTopology is not specified");
    return 0;
  }
  if (a3)
    v4 = 0;
  else
    v4 = a2 == 0;
  v5 = 1;
  if (!v4 && a3 != 1 && a4 && !*(_BYTE *)(a1 + 128))
  {
    if (a3)
    {
      if (a3 == 3)
      {
        v6 = "MTLPrimitiveTopologyClassTriangle";
      }
      else
      {
        if (a3 != 2)
          abort();
        v6 = "MTLPrimitiveTopologyClassLine";
      }
    }
    else
    {
      v6 = "MTLPrimitiveTopologyClassUnspecified";
    }
    MTLCompilerErrorObject::setFormattedErrorMessage((char **)(a1 + 120), "Vertex shader writes point size but inputPrimitiveTopology is %s", v6);
    return 0;
  }
  return v5;
}

void *createSerializedCompileRequest(size_t *a1, uint64_t a2, uint64_t a3)
{
  size_t v6;
  size_t v7;
  int v8;
  void *result;
  void *memptr;

  v6 = sizeOfSerializedCompilerBlocks(a2);
  v7 = v6;
  if (a1)
    *a1 = v6;
  memptr = 0;
  v8 = malloc_type_posix_memalign(&memptr, 8uLL, v6, 0x777494A7uLL);
  result = 0;
  if (!v8)
  {
    bzero(memptr, v7);
    serializeCompilerBlocks(memptr, v7, a2, a3);
    return memptr;
  }
  return result;
}

void MTLCompilerObject::backendCompileStatelessRequest(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  void **v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  llvm::Module *ModuleFromBinaryRequest;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t i;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  int v24;
  void *__p[2];
  uint64_t DiagnosticContext;
  void *v27;
  _BYTE *v28;
  uint64_t v29;
  _OWORD v30[4];
  uint64_t v31;
  void *v32[4];
  __int128 v33;
  uint64_t v34;
  void *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint8_t buf[4];
  _BYTE v46[20];
  __int128 v47;
  _BYTE v48[26];
  __int128 v49;
  _BYTE v50[28];
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v33 = 0u;
  v34 = 0;
  memset(v32, 0, 24);
  v32[3] = (void *)-1;
  v35 = 0;
  v43 = 0;
  v44 = 0;
  v42 = 0;
  v31 = 0;
  memset(v30, 0, sizeof(v30));
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v4 = **(_DWORD **)(a2 + 32);
  v24 = 10;
  MTLBuildRequestTypeToString(&v24, __p);
  if (logCompileBegin(std::string const&,unsigned long long &,char const*,std::string const&)::onceToken != -1)
    dispatch_once(&logCompileBegin(std::string const&,unsigned long long &,char const*,std::string const&)::onceToken, &__block_literal_global_165);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    v5 = a1 + 136;
    if (*(char *)(a1 + 159) < 0)
      v5 = *(_QWORD *)(a1 + 136);
    v6 = __p;
    if (DiagnosticContext < 0)
      v6 = (void **)__p[0];
    v7 = "dynamic library";
    *(_DWORD *)buf = 136446722;
    if ((v4 & 0x40000000) == 0)
      v7 = "visible function";
    *(_QWORD *)v46 = v5;
    *(_WORD *)&v46[8] = 2082;
    *(_QWORD *)&v46[10] = v6;
    *(_WORD *)&v46[18] = 2080;
    *(_QWORD *)&v47 = v7;
    _os_log_impl(&dword_240FA3000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "Compilation BEGIN (ParentProcessName=%{public}s) Build request: %{public}s - %s", buf, 0x20u);
  }
  v8 = mach_absolute_time();
  if (SHIBYTE(DiagnosticContext) < 0)
    operator delete(__p[0]);
  MEMORY[0x24268CA5C](&v24);
  __p[0] = &v24;
  DiagnosticContext = llvm::LLVMContext::getDiagnosticContext((llvm::LLVMContext *)&v24);
  __p[1] = (void *)llvm::LLVMContext::getDiagnosticHandlerCallBack((llvm::LLVMContext *)&v24);
  v9 = llvm::LLVMContext::setDiagnosticHandlerCallBack();
  *(_WORD *)buf = 0;
  *(_OWORD *)&v46[4] = 0u;
  v47 = 0u;
  memset(v48, 0, sizeof(v48));
  v49 = 0u;
  memset(v50, 0, sizeof(v50));
  MTLCompilerObject::getReadParametersFromRequest(v9, (uint64_t)buf, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), (unsigned int *)(*(_QWORD *)(a2 + 32) + 88), *(_QWORD *)(a2 + 32));
  ModuleFromBinaryRequest = MTLCompilerObject::readModuleFromBinaryRequest(a1, (unsigned __int16 *)buf, (llvm::LLVMContext *)&v24, (MTLFunctionType *)(a2 + 40), (void **)&v40, (unint64_t *)&v40 + 1, 0);
  *(_QWORD *)(a2 + 48) = ModuleFromBinaryRequest;
  if (!ModuleFromBinaryRequest)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a2 + 24) + 16))(*(_QWORD *)(a2 + 24), 2 * (*(_QWORD *)(a1 + 120) != 0), 0, 0);
LABEL_35:
    v16 = 1;
    goto LABEL_36;
  }
  if ((MTLCompilerObject::runFrameworkPasses((MTLCompilerObject *)a1, (uint64_t *)a2, v32, (llvm::LLVMContext *)&v24, (uint64_t)&v27) & 1) == 0)
  {
    if ((_QWORD)v40)
      free((void *)v40);
    goto LABEL_35;
  }
  MTLCompilerObject::backendCompileModule(a1, (uint64_t *)a2, (uint64_t)v30, v11, (uint64_t)&v27);
  v12 = *(_QWORD *)(a2 + 32);
  if ((*(_BYTE *)(v12 + 5) & 2) != 0)
  {
    if ((v28 - (_BYTE *)v27) >> 4 == -2)
      v13 = 0;
    else
      v13 = 12 * (((v28 - (_BYTE *)v27) >> 4) + 2) + 4;
  }
  else
  {
    v13 = 0;
  }
  v14 = 0;
  v23 = 0;
  if ((*(_BYTE *)(v12 + 2) & 0x80) != 0)
  {
    v14 = MTLGPUArchiverFromId();
    v22 = v14;
    if (!v14
      || !MTLCompilerObject::storeToBinaryArchive(a1, *(unsigned int **)(a2 + 32), *(_QWORD *)(a2 + 8), (uint64_t)buf, (uint64_t)v30, *(_QWORD *)(a2 + 40), v32, (uint64_t)&v22, (char **)&v23))
    {
      (*(void (**)(void))(*(_QWORD *)(a2 + 24) + 16))();
      if ((_QWORD)v40)
        free((void *)v40);
      free(v23);
      MTLGPUArchiverDestroy();
      goto LABEL_35;
    }
  }
  v15 = MTLCompilerObject::serializeBackendCompilationOutput(a1, *(_DWORD *)(a2 + 16), a2, (uint64_t *)v32, (uint64_t)v30, (uint64_t)&v27, v8, v13);
  if (v14)
  {
    if (v15 && !MTLGPUArchiverFlush())
    {
      (*(void (**)(void))(*(_QWORD *)(a2 + 24) + 16))();
      free(v23);
    }
    MTLGPUArchiverDestroy();
  }
  v16 = 0;
LABEL_36:
  ScopedDiagnosticHandler::~ScopedDiagnosticHandler((ScopedDiagnosticHandler *)__p);
  llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)&v24);
  if (!v16 && (_QWORD)v40)
  {
    free((void *)v40);
    v40 = 0uLL;
  }
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
  for (i = 22; i != 19; --i)
    std::unique_ptr<void,LLVMMemoryBufferDeleter>::reset[abi:ne180100]((uint64_t *)&v32[i], 0);
  v18 = (void *)v41;
  *(_QWORD *)&v41 = 0;
  if (v18)
    free(v18);
  v19 = v35;
  v35 = 0;
  if (v19)
    free(v19);
  v20 = (void *)v33;
  *(_QWORD *)&v33 = 0;
  if (v20)
    free(v20);
  v21 = v32[0];
  v32[0] = 0;
  if (v21)
    free(v21);
}

void sub_24102F2A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  ScopedDiagnosticHandler::~ScopedDiagnosticHandler((ScopedDiagnosticHandler *)&a13);
  llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)&a12);
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  FrameworkPassesOutput::~FrameworkPassesOutput((FrameworkPassesOutput *)&a32);
  _Unwind_Resume(a1);
}

void MTLCompilerObject::backendCompileModule(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unsigned int v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  int v20;
  _BOOL4 v21;
  uint64_t v22;
  unsigned int *v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  int v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  char *v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE v65[32];
  unsigned int *v66;
  uint64_t v67;

  v9 = *(_DWORD *)(a2[4] + 4);
  v10 = (v9 >> 8) & 1 | *((_DWORD *)a2 + 14);
  if ((v9 & 0x200) != 0)
  {
    v10 = v10 | 2;
    v11 = mach_absolute_time();
  }
  else
  {
    v11 = 0;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * *((unsigned int *)a2 + 4));
  if (*(_BYTE *)(v12 + 137))
    *(_QWORD *)(*(_QWORD *)(v12 + 112) + 16) = *(_QWORD *)(a1 + 88);
  v13 = (_DWORD *)a2[4];
  v14 = v13[56];
  if (v14 >> 3 >= 0xFA3)
  {
    *(_DWORD *)(a3 + 24) = 1;
    v15 = "Cannot compile for given LLVM version";
LABEL_8:
    *(_QWORD *)(a3 + 16) = v15;
    return;
  }
  v16 = *a2;
  v17 = v13[2];
  if (v14)
    v18 = v14 == 32023;
  else
    v18 = 1;
  v19 = !v18;
  if (v13[12])
  {
    if (!MTLDowngradeAIRModule())
    {
      *(_DWORD *)(a3 + 24) = 1;
      v15 = *(const char **)(a1 + 120);
      goto LABEL_8;
    }
    v58 = v11;
    v13 = (_DWORD *)a2[4];
  }
  else
  {
    v58 = v11;
  }
  v59 = a5;
  v20 = v13[1];
  v21 = (v20 & 0x3001090) != 0 || *(_BYTE *)(a1 + 128) != 0;
  v22 = v16 + v17;
  if (v13[50])
  {
    v23 = (unsigned int *)(*a2 + v13[49]);
    v24 = Air::PipelineScript::pipeline_as_mesh_render((Air::PipelineScript *)((char *)v23 + *v23)) == 0;
    v13 = (_DWORD *)a2[4];
  }
  else
  {
    v24 = 1;
  }
  v25 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * *((unsigned int *)a2 + 4));
  if (!*(_BYTE *)(v25 + 136))
    goto LABEL_29;
  if (!v13[50])
    v24 = 1;
  if (!v21 && !v24)
  {
    getSerializedModule(v14, &v67);
    v29 = *(_QWORD *)(v67 + 8);
    v28 = *(_QWORD *)(v67 + 16);
    v57 = v67;
    v30 = (unsigned int *)(*a2 + *(unsigned int *)(a2[4] + 196));
    MTLCompilerObject::AIRNTGetFunctionScriptFromPipeline((const Air::PipelineScript *)((char *)v30 + *v30), (MTLFunctionType)a2[5], (uint64_t)v65);
    v31 = v66;
    v32 = *v66;
    v33 = a2[4];
    v34 = *(_QWORD *)(v33 + 208);
    v35 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8
                                                                                        * *((unsigned int *)a2 + 4))
                                                     + 48))(v22, *(unsigned int *)(v33 + 12));
    v36 = (char *)v31 + v32;
    v63 = 0;
    v64 = 0;
    v61 = 0;
    v62 = 0;
    v60 = 0;
    v37 = *(_DWORD *)(a2[4] + 4);
    v38 = &v62;
    if ((v37 & 0x200) == 0)
      v38 = 0;
    v39 = &v61;
    if ((v37 & 0x200) == 0)
      v39 = 0;
    v40 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * *((unsigned int *)a2 + 4));
    *(_DWORD *)(a3 + 24) = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, const char *, unint64_t, unint64_t, char *, const char *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, char **))(v40 + 40))(*(_QWORD *)(v40 + 128), v35, v10, v29, v28 - v29, "offline_module_name", HIDWORD(v34), v34, v36, "offline_script_name", &v64, &v63, v38, v39, &v60) ^ 1;
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * *((unsigned int *)a2 + 4)) + 56))(v35);
    v41 = v63;
    *(_QWORD *)a3 = v64;
    *(_QWORD *)(a3 + 8) = v41;
    v27 = v59;
    v42 = v60;
    v26 = v58;
    if (v60)
    {
      *(_QWORD *)(a3 + 16) = strdup(v60);
      free(v42);
    }
    else
    {
      *(_QWORD *)(a3 + 16) = 0;
    }
    v44 = v61;
    v43 = v62;
    if ((v37 & 0x200) == 0)
    {
      v43 = 0;
      v44 = 0;
    }
    *(_QWORD *)(a3 + 48) = v43;
    *(_QWORD *)(a3 + 56) = v44;
    flatbuffers::DetachedBuffer::~DetachedBuffer((flatbuffers::DetachedBuffer *)v65);
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  }
  else
  {
LABEL_29:
    *(_DWORD *)(a3 + 24) = MTLCompilerPluginInterface::compilerBuildRequest(v25, (v20 & 0x200000 | v19) != 0, v14, v22, v13[3], v10, (llvm::Module *)a2[6], (_QWORD *)a3);
    v26 = v58;
    v27 = v59;
  }
  if ((*(_BYTE *)(a2[4] + 5) & 2) != 0)
  {
    v45 = (unint64_t)(*(double *)&gMachTimeToNS * (double)(mach_absolute_time() - v26));
    *(_QWORD *)(a3 + 64) = v45;
    v46 = *(_QWORD *)(v27 + 16);
    v47 = *(_QWORD **)(v27 + 8);
    if ((unint64_t)v47 >= v46)
    {
      v49 = *(_QWORD **)v27;
      v50 = ((uint64_t)v47 - *(_QWORD *)v27) >> 4;
      v51 = v50 + 1;
      if ((unint64_t)(v50 + 1) >> 60)
        std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
      v52 = v46 - (_QWORD)v49;
      if (v52 >> 3 > v51)
        v51 = v52 >> 3;
      if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF0)
        v53 = 0xFFFFFFFFFFFFFFFLL;
      else
        v53 = v51;
      if (v53)
      {
        v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SmallVertexPartialLoad>>(v27 + 16, v53);
        v49 = *(_QWORD **)v27;
        v47 = *(_QWORD **)(v27 + 8);
      }
      else
      {
        v54 = 0;
      }
      v55 = &v54[16 * v50];
      v56 = &v54[16 * v53];
      *(_DWORD *)v55 = 5;
      *((_QWORD *)v55 + 1) = v45;
      v48 = v55 + 16;
      if (v47 != v49)
      {
        do
        {
          *((_OWORD *)v55 - 1) = *((_OWORD *)v47 - 1);
          v55 -= 16;
          v47 -= 2;
        }
        while (v47 != v49);
        v49 = *(_QWORD **)v27;
      }
      *(_QWORD *)v27 = v55;
      *(_QWORD *)(v27 + 8) = v48;
      *(_QWORD *)(v27 + 16) = v56;
      if (v49)
        operator delete(v49);
    }
    else
    {
      *(_DWORD *)v47 = 5;
      v47[1] = v45;
      v48 = (char *)(v47 + 2);
    }
    *(_QWORD *)(v27 + 8) = v48;
  }
}

void sub_24102F768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  flatbuffers::DetachedBuffer::~DetachedBuffer((flatbuffers::DetachedBuffer *)va);
  (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(a1);
}

BOOL MTLCompilerObject::storeToBinaryArchive(uint64_t a1, unsigned int *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t a8, char **a9)
{
  const char *v13;
  int v14;
  char v15;
  const Air::PipelineScript *v16;
  int8x8_t v17;
  unsigned __int16 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  unsigned int v28;
  _OWORD *v29;
  char *v30;
  int v31;
  _QWORD *v32;
  int v33;
  _OWORD *v34;
  unint64_t v35;
  __int128 v36;
  BOOL v37;
  uint64_t v38;
  int v39;
  uint64_t *v40;
  uint64_t v41;
  _BOOL8 v42;
  _BOOL4 v43;
  __int128 v44;
  uint64_t v45;
  unsigned __int8 v46;
  char v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t **i;
  int v57;
  _QWORD *v58;
  __int32 RequiredStagesPresentMask;
  int v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  int v65;
  _OWORD v66[2];
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  *a9 = 0;
  v13 = (char *)a2 + a2[49];
  v14 = strncmp(v13 + 4, "AIRP", 4uLL);
  if (v14)
  {
    RequiredStagesPresentMask = 0;
    v15 = 0;
  }
  else
  {
    v16 = (const Air::PipelineScript *)&v13[*(unsigned int *)v13];
    RequiredStagesPresentMask = getRequiredStagesPresentMask(v16);
    v17.i32[0] = RequiredStagesPresentMask;
    v15 = vaddlv_u8((uint8x8_t)vcnt_s8(v17));
    v18 = (unsigned __int16 *)((char *)v16 - *(int *)v16);
    if (*v18 >= 9u)
    {
      v19 = v18[4];
      if (v19)
      {
        v60 = *((unsigned __int8 *)v16 + v19);
        goto LABEL_7;
      }
    }
  }
  v60 = 0;
LABEL_7:
  LLVMCreateMemoryBufferWithMemoryRange();
  v20 = LLVMCreateMemoryBufferWithMemoryRange();
  v63 = 0u;
  v64 = 0u;
  v65 = 1065353216;
  v21 = a2[40] + a2[36];
  if (v14)
    v22 = 1;
  else
    v22 = (_DWORD)v21 == 0;
  v23 = !v22;
  if (!v22)
    MTLCompilerObject::readVisibleFunctions(v20, a2, a3, (uint64_t)&v63);
  if (a6 == 2 && a7[5])
    _MTLEncodeLinkingInfo();
  v61 = a6;
  LLVMCreateMemoryBufferWithMemoryRange();
  v25 = a2[46];
  v24 = a2[47];
  v26 = a2[48];
  v62 = MTLGPUArchiverAddUnit();
  if (!v14)
  {
    v29 = malloc_type_malloc(0x30uLL, 0x102204031A510F6uLL);
    v27 = v29;
    v28 = a2[69];
    if (!v28)
    {
      *((_QWORD *)v29 + 4) = -1;
      *(_QWORD *)&v44 = -1;
      *((_QWORD *)&v44 + 1) = -1;
      *v29 = v44;
      v29[1] = v44;
      *((_DWORD *)v29 + 10) = v60;
      *((_BYTE *)v29 + 45) = 0;
      *((_BYTE *)v29 + 44) = v15;
      goto LABEL_23;
    }
LABEL_22:
    memcpy(v27, (char *)a2 + a2[68], v28);
    goto LABEL_23;
  }
  v27 = 0;
  v28 = a2[69];
  if (v28)
    goto LABEL_22;
LABEL_23:
  if (!v62)
  {
    v32 = 0;
    v42 = 0;
    goto LABEL_86;
  }
  v30 = (char *)a2 + v24;
  v31 = MTLGPUArchiverSetUnitHash();
  if (v14 || !v31 || !(_DWORD)v21)
  {
    v32 = 0;
    if (!v31)
    {
      v43 = 0;
      v40 = (uint64_t *)v27;
      goto LABEL_52;
    }
    v40 = (uint64_t *)v27;
    v41 = v61;
    v38 = v62;
LABEL_42:
    if (a7[21] && a7[22])
    {
      v43 = MTLGPUArchiverSetUnitReflection() != 0;
      v40 = (uint64_t *)v27;
      v41 = v61;
      v38 = v62;
      if (v14)
      {
LABEL_52:
        if (!v40)
          goto LABEL_55;
LABEL_82:
        v54 = (void *)a7[18];
        a7[18] = v40;
        if (v54)
          free(v54);
        v45 = 48;
        goto LABEL_85;
      }
    }
    else
    {
      v43 = 1;
      if (v14)
        goto LABEL_52;
    }
    if (v43)
    {
      switch(v41)
      {
        case 1:
          *v40 = v38;
          goto LABEL_60;
        case 2:
          v40[3] = v38;
          v46 = *((_BYTE *)v40 + 45) | 1;
          goto LABEL_62;
        case 3:
          v40[4] = v38;
          goto LABEL_60;
        case 7:
          v40[1] = v38;
LABEL_60:
          v46 = *((_BYTE *)v40 + 45) | 2;
          goto LABEL_62;
        case 8:
          v40[2] = v38;
          v46 = *((_BYTE *)v40 + 45) | 4;
LABEL_62:
          *((_BYTE *)v40 + 45) = v46;
          break;
        default:
          v43 = 0;
          *a9 = strdup("Unsupported function or pipeline type");
          v46 = *((_BYTE *)v40 + 45);
          break;
      }
      v47 = *((_BYTE *)v40 + 44) - 1;
      *((_BYTE *)v40 + 44) = v47;
      if (v43 && !v47 && RequiredStagesPresentMask == v46)
      {
        *((_BYTE *)v40 + 45) = RequiredStagesPresentMask | 0x10;
        switch(v60)
        {
          case 1:
            v48 = malloc_type_malloc(0x10uLL, 0x2004093837F09uLL);
            v49 = v48;
            if ((RequiredStagesPresentMask & 1) != 0)
              v50 = v40[3];
            else
              v50 = 0;
            v48[1] = v50;
            *v48 = *v40;
            break;
          case 2:
          case 3:
            v49 = malloc_type_malloc(8uLL, 0x2004093837F09uLL);
            *v49 = v38;
            break;
          case 4:
            v51 = malloc_type_malloc(0x18uLL, 0x2004093837F09uLL);
            v49 = v51;
            if ((RequiredStagesPresentMask & 4) != 0)
              v52 = v40[2];
            else
              v52 = 0;
            *v51 = v52;
            if ((RequiredStagesPresentMask & 1) != 0)
              v53 = v40[3];
            else
              v53 = 0;
            v51[2] = v53;
            v51[1] = v40[1];
            break;
          default:
            v49 = 0;
            *a9 = strdup("Unsupported function or pipeline type");
            break;
        }
        v43 = MTLGPUArchiverAddPipeline() != 0;
        if (v49)
          free(v49);
      }
      goto LABEL_82;
    }
    goto LABEL_52;
  }
  v32 = malloc_type_malloc(8 * v21, 0x2004093837F09uLL);
  v57 = v23;
  v58 = a7;
  if (!*((_DWORD *)v30 + 1) && v25 >= 2)
  {
    v33 = 0;
    v34 = (_OWORD *)((char *)a2 + v26 + 32);
    v35 = 2;
    do
    {
      v36 = v34[1];
      v66[0] = *v34;
      v66[1] = v36;
      if (std::__hash_table<std::__hash_value_type<MTLUINT256_t,MTLOpaqueGPUArchiverUnitRef *>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,MTLOpaqueGPUArchiverUnitRef *>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,MTLOpaqueGPUArchiverUnitRef *>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,MTLOpaqueGPUArchiverUnitRef *>>>::find<MTLUINT256_t>(&v63, (unint64_t *)v66))
      {
        v32[v33++] = LLVMCreateMemoryBufferWithMemoryRange();
      }
      v34 += 2;
      if (*(_DWORD *)&v30[4 * v35])
        v37 = 1;
      else
        v37 = v35 >= v25;
      ++v35;
    }
    while (!v37);
  }
  v38 = v62;
  v39 = MTLGPUArchiverAddLinkedModules();
  a7 = v58;
  v40 = (uint64_t *)v27;
  v41 = v61;
  if (v39)
  {
    v23 = v57;
    goto LABEL_42;
  }
  v43 = 0;
  v23 = v57;
  if (v27)
    goto LABEL_82;
LABEL_55:
  v45 = 0;
LABEL_85:
  a7[19] = v45;
  v42 = v43;
LABEL_86:
  LLVMDisposeMemoryBuffer();
  LLVMDisposeMemoryBuffer();
  LLVMDisposeMemoryBuffer();
  if (v23)
  {
    do
    {
      LLVMDisposeMemoryBuffer();
      ++v32;
      --v21;
    }
    while (v21);
    for (i = (uint64_t **)v64; i; i = (uint64_t **)*i)
      free(i[6]);
  }
  std::__hash_table<llvm::Value *,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,std::allocator<llvm::Value *>>::~__hash_table((uint64_t)&v63);
  return v42;
}

void sub_24102FE18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  std::__hash_table<llvm::Value *,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,std::allocator<llvm::Value *>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t MTLCompilerObject::serializeBackendCompilationOutput(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  uint64_t v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  void **v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  _BYTE *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  char *v57;
  char *v58;
  uint64_t v59;
  int v60;
  void *__p[2];
  char v62;
  size_t v63;
  void *v64[2];
  _OWORD v65[2];
  int v66;
  _OWORD v67[2];
  __int128 v68;
  __int128 v69;
  uint8_t buf[4];
  uint64_t v71;
  __int16 v72;
  void **v73;
  __int16 v74;
  const char *v75;
  __int16 v76;
  double v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v16 = *(_QWORD *)(a3 + 32);
  if (*(_DWORD *)(v16 + 4) || *(_DWORD *)(v16 + 216) != 1)
  {
    v17 = *(_DWORD *)(a5 + 24);
    if (v17)
      v18 = 1;
    else
      v18 = *(_QWORD *)a5 == 0;
    if (v18)
      goto LABEL_9;
    memset(v65, 0, sizeof(v65));
    v66 = 1065353216;
    if (a4[1])
      v20 = *a4;
    else
      v20 = 0;
    CompilerOutputReflectionBlock::CompilerOutputReflectionBlock(v64, v20);
    addBlocksForOutput((unsigned __int8 *)v65, a4, (uint64_t *)a5, (uint64_t *)v64);
    buf[0] = 5;
    v67[0] = a8;
    std::__hash_table<std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>>>::__emplace_unique_key_args<CompilerOutputType,CompilerOutputType,CompilerOutputBlock>((uint64_t)v65, (char *)buf, buf, v67);
    v68 = 0u;
    v69 = 0u;
    memset(v67, 0, sizeof(v67));
    v63 = 0;
    v21 = (char *)createSerializedCompileRequest(&v63, (uint64_t)v65, (uint64_t)v67);
    if (!v21)
    {
      MTLCompilerErrorObject::setErrorMessage((MTLCompilerErrorObject *)(a1 + 120), "Failed to serialize reply data");
      (*(void (**)(void))(*(_QWORD *)(a3 + 24) + 16))();
      v19 = 0;
LABEL_76:
      CompilerOutputReflectionBlock::~CompilerOutputReflectionBlock(v64);
      std::__hash_table<llvm::Value *,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,std::allocator<llvm::Value *>>::~__hash_table((uint64_t)v65);
      return v19;
    }
    v60 = 1;
    MTLBuildRequestTypeToString(&v60, __p);
    v22 = (unint64_t)(*(double *)&gMachTimeToNS * (double)(mach_absolute_time() - a7));
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      v23 = a1 + 136;
      if (*(char *)(a1 + 159) < 0)
        v23 = *(_QWORD *)(a1 + 136);
      v24 = __p;
      if (v62 < 0)
        v24 = (void **)__p[0];
      *(_DWORD *)buf = 136446978;
      v71 = v23;
      v72 = 2082;
      v73 = v24;
      v74 = 2080;
      v75 = "pipeline";
      v76 = 2048;
      v77 = (double)v22 * 0.000001;
      _os_log_impl(&dword_240FA3000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "Compilation SUCCESS (ParentProcessName=%{public}s) (TYPE=%{public}s - %s): Time %f ms ", buf, 0x2Au);
    }
    if (v62 < 0)
    {
      operator delete(__p[0]);
      if (!a8)
        goto LABEL_70;
    }
    else if (!a8)
    {
      goto LABEL_70;
    }
    v26 = *(char **)(a6 + 16);
    v27 = *(char **)(a6 + 8);
    if (v27 >= v26)
    {
      v29 = *(_BYTE **)a6;
      v30 = (uint64_t)&v27[-*(_QWORD *)a6] >> 4;
      v31 = v30 + 1;
      if ((unint64_t)(v30 + 1) >> 60)
        std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
      v32 = v26 - v29;
      if (v32 >> 3 > v31)
        v31 = v32 >> 3;
      if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0)
        v33 = 0xFFFFFFFFFFFFFFFLL;
      else
        v33 = v31;
      if (v33)
      {
        v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SmallVertexPartialLoad>>(a6 + 16, v33);
        v29 = *(_BYTE **)a6;
        v27 = *(char **)(a6 + 8);
      }
      else
      {
        v34 = 0;
      }
      v35 = &v34[16 * v30];
      v26 = &v34[16 * v33];
      *(_DWORD *)v35 = 3;
      *((_QWORD *)v35 + 1) = v22;
      v28 = v35 + 16;
      if (v27 != v29)
      {
        do
        {
          *((_OWORD *)v35 - 1) = *((_OWORD *)v27 - 1);
          v35 -= 16;
          v27 -= 16;
        }
        while (v27 != v29);
        v29 = *(_BYTE **)a6;
      }
      *(_QWORD *)a6 = v35;
      *(_QWORD *)(a6 + 8) = v28;
      *(_QWORD *)(a6 + 16) = v26;
      if (v29)
      {
        operator delete(v29);
        v26 = *(char **)(a6 + 16);
      }
    }
    else
    {
      *(_DWORD *)v27 = 3;
      *((_QWORD *)v27 + 1) = v22;
      v28 = v27 + 16;
    }
    *(_QWORD *)(a6 + 8) = v28;
    v36 = v22 - *(_QWORD *)(a5 + 64);
    if (v28 >= v26)
    {
      v38 = *(_BYTE **)a6;
      v39 = (uint64_t)&v28[-*(_QWORD *)a6] >> 4;
      v40 = v39 + 1;
      if ((unint64_t)(v39 + 1) >> 60)
        std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
      v41 = v26 - v38;
      if (v41 >> 3 > v40)
        v40 = v41 >> 3;
      if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF0)
        v42 = 0xFFFFFFFFFFFFFFFLL;
      else
        v42 = v40;
      if (v42)
      {
        v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SmallVertexPartialLoad>>(a6 + 16, v42);
        v38 = *(_BYTE **)a6;
        v28 = *(char **)(a6 + 8);
      }
      else
      {
        v43 = 0;
      }
      v44 = &v43[16 * v39];
      v45 = &v43[16 * v42];
      *(_DWORD *)v44 = 4;
      *((_QWORD *)v44 + 1) = v36;
      v37 = (uint64_t)(v44 + 16);
      if (v28 != v38)
      {
        do
        {
          *((_OWORD *)v44 - 1) = *((_OWORD *)v28 - 1);
          v44 -= 16;
          v28 -= 16;
        }
        while (v28 != v38);
        v38 = *(_BYTE **)a6;
      }
      *(_QWORD *)a6 = v44;
      *(_QWORD *)(a6 + 8) = v37;
      *(_QWORD *)(a6 + 16) = v45;
      if (v38)
        operator delete(v38);
    }
    else
    {
      *(_DWORD *)v28 = 4;
      *((_QWORD *)v28 + 1) = v36;
      v37 = (uint64_t)(v28 + 16);
    }
    *(_QWORD *)(a6 + 8) = v37;
    v46 = *((_QWORD *)&v68 + 1);
    v58 = 0;
    v59 = 0;
    v57 = 0;
    std::vector<CompileTimeData>::__init_with_size[abi:ne180100]<CompileTimeData*,CompileTimeData*>(&v57, *(const void **)a6, v37, (v37 - *(_QWORD *)a6) >> 4);
    v47 = v57;
    v48 = v58 - v57;
    if (v58 == v57)
    {
      v47 = v58;
    }
    else
    {
      v49 = &v21[v46];
      *(_WORD *)v49 = v48 >> 4;
      v49[2] = (v48 >> 4) >> 16;
      v49[3] = (v48 >> 4) >> 24;
      v50 = (v48 >> 4);
      if (v50)
      {
        v51 = 0;
        v52 = v49 + 4;
        v53 = 16 * v50;
        do
        {
          *(_DWORD *)v52 = *(_DWORD *)&v47[v51];
          *(_QWORD *)(v52 + 4) = *(_QWORD *)&v47[v51 + 8];
          v52 += 12;
          v51 += 16;
        }
        while (v53 != v51);
        goto LABEL_69;
      }
    }
    if (v47)
    {
LABEL_69:
      v58 = v47;
      operator delete(v47);
    }
LABEL_70:
    v54 = *(_DWORD *)(a5 + 24);
    if (v54)
    {
      if (v54 != 1)
        abort();
      v19 = 0;
    }
    else
    {
      v19 = 1;
    }
    (*(void (**)(void))(*(_QWORD *)(a3 + 24) + 16))();
    free(v21);
    v55 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * a2);
    if (*(_BYTE *)(v55 + 138))
    {
      (*(void (**)(_QWORD))(v55 + 16))(*(_QWORD *)(v55 + 112));
      *(_BYTE *)(v55 + 138) = 0;
    }
    goto LABEL_76;
  }
  v17 = *(_DWORD *)(a5 + 24);
LABEL_9:
  if (v17)
  {
    if (v17 != 1)
      abort();
    v19 = 0;
  }
  else
  {
    v19 = 1;
  }
  (*(void (**)(void))(*(_QWORD *)(a3 + 24) + 16))();
  v25 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * a2);
  if (*(_BYTE *)(v25 + 138))
  {
    (*(void (**)(_QWORD))(v25 + 16))(*(_QWORD *)(v25 + 112));
    *(_BYTE *)(v25 + 138) = 0;
  }
  return v19;
}

void sub_241030408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,char a22)
{
  CompilerOutputReflectionBlock::~CompilerOutputReflectionBlock(&a20);
  std::__hash_table<llvm::Value *,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,std::allocator<llvm::Value *>>::~__hash_table((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t MTLCompilerObject::runFragmentPasses(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  _QWORD *v6;
  llvm::Module *v7;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  char **v13;
  char v14;

  v2 = a2[4];
  if (!*(_DWORD *)(v2 + 28))
    return 1;
  v4 = *a2 + *(unsigned int *)(v2 + 24);
  v5 = ((*(_DWORD *)(v4 + 8) & 0x20000000) != 0) | *(_BYTE *)(a1 + 128);
  *(_BYTE *)(a1 + 128) = v5;
  v6 = (_QWORD *)(a1 + 120);
  v13 = (char **)(a1 + 120);
  v14 = v5;
  v7 = (llvm::Module *)a2[6];
  v8 = (unsigned __int16 *)(*(int *)(v4 + 8) >= 0 ? v4 + 16 : v4 + 24);
  if ((MTLCheckPixelFormatValidPass::checkPixelFormatValid(&v13, v7, v4, v8) & 1) != 0)
    return 1;
  v11 = a2[6];
  if (v11)
  {
    v12 = MEMORY[0x24268D17C](v11, v9);
    MEMORY[0x24268D8F0](v12, 0x10B2C407FF26C1CLL);
  }
  a2[6] = 0;
  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a2[3] + 16))(a2[3], 2 * (*v6 != 0), 0, 0);
  return 0;
}

uint64_t MTLCompilerObject::runVertexPasses(uint64_t a1, uint64_t *a2, int a3, MTLCompilerObject::FragmentVaryingsInfo *a4)
{
  uint64_t v7;
  _DWORD *v8;
  unsigned int v9;
  uint64_t v10;
  llvm::Module *v11;
  llvm::NamedMDNode *NamedMetadata;
  uint64_t Operand;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v16;
  unsigned int v17;
  _DWORD *v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *String;
  uint64_t v24;
  BOOL v25;
  BOOL v26;
  BOOL v28;
  unsigned int v29;
  uint64_t result;
  uint64_t v31;
  const char *v32;
  const char *v33;
  unsigned int v34;
  _DWORD *v35;
  const char *v36;
  __int16 v37;

  v7 = *a2;
  v8 = (_DWORD *)a2[4];
  v9 = v8[7];
  MTLCompilerObject::getFragmentVaryingsInfo((MTLCompilerObject *)a1, (v8[1] >> 3) & 1, (const char *)(*a2 + v8[4]), v8[5], a4);
  if (v9 < 0xC)
    return 1;
  v10 = v7 + *(unsigned int *)(a2[4] + 24);
  v11 = (llvm::Module *)a2[6];
  v36 = "air.vertex";
  v37 = 259;
  NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v11, (const llvm::Twine *)&v36);
  Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
  v14 = *(_QWORD *)(Operand - 8 * *(unsigned int *)(Operand + 8) + 8);
  if (v14)
  {
    v15 = *(unsigned int *)(v14 + 8);
    v16 = *(_DWORD *)(v14 + 8) == 0;
    v19 = *(_DWORD *)(v10 + 8);
    v18 = (_DWORD *)(v10 + 8);
    v17 = v19;
    if ((_DWORD)v15)
    {
      v34 = v17;
      v35 = v18;
      v20 = 0;
      v21 = *(_QWORD *)(Operand - 8 * *(unsigned int *)(Operand + 8) + 8);
      while (1)
      {
        v22 = *(_QWORD *)(v21 - 8 * *(unsigned int *)(v14 + 8));
        String = (_QWORD *)llvm::MDString::getString(*(llvm::MDString **)(v22 - 8 * *(unsigned int *)(v22 + 8)));
        if (v24 == 14)
        {
          v28 = memcmp(String, "air.point_size", 0xEuLL) == 0;
        }
        else
        {
          if (v24 == 29)
          {
            v25 = *String == 0x646E65722E726961 && String[1] == 0x65677261745F7265;
            v26 = v25 && String[2] == 0x5F79617272615F74;
            if (v26 && *(_QWORD *)((char *)String + 21) == 0x7865646E695F7961)
            {
              *((_DWORD *)a4 + 22) = dataTypeFromMetadata(1u, v22);
              goto LABEL_20;
            }
          }
          v28 = 0;
        }
        v20 |= v28;
LABEL_20:
        v21 += 8;
        if (!--v15)
        {
          v16 = 0;
          v18 = v35;
          v17 = v34;
          goto LABEL_25;
        }
      }
    }
    v20 = 0;
  }
  else
  {
    v20 = 0;
    v29 = *(_DWORD *)(v10 + 8);
    v18 = (_DWORD *)(v10 + 8);
    v17 = v29;
    v16 = 1;
  }
LABEL_25:
  if ((MTLCompilerObject::checkVertexRenderTargetArrayIndex(a1, *((_DWORD *)a4 + 22), (v17 >> 5) & 3, v20 & 1) & 1) != 0)
  {
    result = MTLCompilerObject::checkVertexDescriptorAndAddVertexFetchingToVertexModule(a1, (uint64_t)a2, a4);
    if (!(_DWORD)result)
      return result;
    MTLCompilerObject::addPostVertexDumpingToModule(a1, (uint64_t)a2);
    if ((*(_BYTE *)(a2[4] + 4) & 0x10) != 0 || *(_BYTE *)(a1 + 128) || ((v16 ^ *v18) & 1) != 0)
      return 1;
    if ((*v18 & 1) != 0)
      v32 = "true";
    else
      v32 = "false";
    v33 = "not void";
    if (v16)
      v33 = "void";
    MTLCompilerErrorObject::setFormattedErrorMessage((char **)(a1 + 120), "RasterizationEnabled is %s but the vertex shader's return type is %s", v32, v33);
  }
  else
  {
    if (a2[6])
    {
      v31 = MEMORY[0x24268D17C]();
      MEMORY[0x24268D8F0](v31, 0x10B2C407FF26C1CLL);
    }
    a2[6] = 0;
  }
  (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(a2[3] + 16))(a2[3], 2 * (*(_QWORD *)(a1 + 120) != 0), 0, 0);
  return 0;
}

uint64_t MTLCompilerObject::checkVertexDescriptorAndAddVertexFetchingToVertexModule(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v8;
  llvm::Module *v9;
  llvm::NamedMDNode *NamedMetadata;
  uint64_t Operand;
  BOOL v12;
  _BOOL4 v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unsigned __int16 *v17;
  unsigned __int16 *v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _BOOL4 v27;
  const char *v28;
  llvm::Module *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  char v35;
  __int16 v36;

  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(unsigned int *)(v3 + 28);
  if (v4 < 0xC)
    return 1;
  v8 = *(_QWORD *)a2 + *(unsigned int *)(v3 + 24);
  v9 = *(llvm::Module **)(a2 + 48);
  v34 = "air.vertex";
  v36 = 259;
  NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v9, (const llvm::Twine *)&v34);
  Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
  v12 = (~*(_DWORD *)(*(_QWORD *)(a2 + 32) + 4) & 0x84) != 0 || *a3 == a3[1];
  v13 = !v12;
  v14 = *(_DWORD *)(v8 + 8);
  if ((v14 & 4) == 0 && !v13)
    return 1;
  if ((v14 & 4) != 0)
  {
    v15 = 20;
    if ((v14 & 0x100000) == 0)
      v15 = 12;
    v16 = v4 - v15;
    v17 = (unsigned __int16 *)(v8 + v15);
    if ((v14 & 2) != 0)
    {
      MTLCompilerObject::validateSerializedVertexDescriptor((MTLCompilerObject *)a1, (const char *)(v8 + v15), v4 - v15);
      v19 = *v17;
      v18 = (unsigned __int16 *)((char *)v17 + v19);
      v16 -= v19;
    }
    else
    {
      if ((MTLCompilerObject::checkNoStageInAttributes(a1, Operand) & 1) == 0)
      {
        v32 = *(_QWORD *)(a2 + 24);
        v33 = *(_QWORD *)(a1 + 120);
LABEL_44:
        (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(v32 + 16))(v32, 2 * (v33 != 0), 0, 0);
        return 0;
      }
      v18 = v17;
      v17 = 0;
    }
  }
  else
  {
    v17 = 0;
    v18 = (unsigned __int16 *)v8;
    v16 = v4;
  }
  v20 = *(_DWORD *)(v8 + 8);
  if ((v20 & 0x80) != 0)
  {
    if (v16 <= 1
      || (v22 = 2 * *v18 + 2, v16 < v22)
      || ((v23 = *(unsigned int *)(v8 + 4), (_DWORD)v23) ? (v24 = v4 - v23) : (v24 = 0), v16 != v24 + v22))
    {
      abort();
    }
  }
  else
  {
    v21 = (v20 & 0x82) != 0 || v13;
    if (v21 != 1)
      return 1;
    v18 = 0;
  }
  v25 = *(unsigned __int8 *)(a1 + 128);
  v27 = (v20 & 1) == 0 && v25 != 0;
  v28 = (const char *)(a1 + 120);
  v34 = v28;
  v35 = v25;
  v29 = MTLAddVertexFetchingToModulePass::addVertexFetchingToModule((uint64_t)&v34, *(llvm::Type ***)(a2 + 48), (v20 >> 2) & 1, v17, v18, v27, 1u, (v20 >> 8) & 3, (~v20 & 0xC) == 0, (~v20 & 0x14) == 0, *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4), a3);
  if (!v29)
  {
    if (*(_QWORD *)(a2 + 48))
    {
      v31 = MEMORY[0x24268D17C]();
      MEMORY[0x24268D8F0](v31, 0x10B2C407FF26C1CLL);
    }
    *(_QWORD *)(a2 + 48) = 0;
    v32 = *(_QWORD *)(a2 + 24);
    v33 = *(_QWORD *)v28;
    goto LABEL_44;
  }
  *(_QWORD *)(a2 + 48) = v29;
  return 1;
}

void MTLCompilerObject::addPostVertexDumpingToModule(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;
  unsigned int v3;
  unsigned int v4;
  void **v5;
  char v6;
  uint64_t v7[3];
  int v8;

  v2 = *(_DWORD **)(a2 + 32);
  if (v2[7] >= 0xCu)
  {
    v3 = v2[1];
    if ((v3 & 0x10) != 0)
    {
      v4 = *(_DWORD *)(*(_QWORD *)a2 + v2[6] + 8);
      v8 = 0;
      memset(v7, 0, sizeof(v7));
      v5 = (void **)(a1 + 120);
      v6 = 0;
      *(_QWORD *)(a2 + 48) = MTLAddPostVertexDumpingToModulePass::addPostVertexDumpingToModule((int)&v5, *(llvm::Module **)(a2 + 48), (v4 >> 11), 0, &v8, v7, (v3 >> 10) & 1);
      v5 = (void **)v7;
      std::vector<PostVertexDumpOutput>::__destroy_vector::operator()[abi:ne180100](&v5);
    }
  }
}

void sub_241030AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<PostVertexDumpOutput>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t MTLCompilerObject::runLinkingPasses(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t result;

  v7 = *(_QWORD *)(a2 + 40);
  if (v7 == 1)
  {
    result = MTLCompilerObject::runVertexLinkingPass((uint64_t)a1, a2, a3, a4);
    if (!(_DWORD)result)
      return result;
    v7 = *(_QWORD *)(a2 + 40);
  }
  if (v7 == 2)
    MTLCompilerObject::runFragmentLinkingPass(a1, a2, a3);
  return 1;
}

uint64_t MTLCompilerObject::runVertexLinkingPass(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _DWORD *v4;
  int v5;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  MTLCompilerErrorObject *v11;
  char v12;

  v4 = *(_DWORD **)(a2 + 32);
  v5 = v4[1];
  if ((v5 & 4) == 0)
    return 1;
  v8 = (*(unsigned __int8 *)(*(_QWORD *)a2 + v4[6] + 8) >> 5) & 3;
  v9 = (_QWORD *)(a1 + 120);
  if ((v5 & 8) == 0)
  {
    v11 = (MTLCompilerErrorObject *)(a1 + 120);
    v12 = 0;
    if ((MTLVertexOutputLinkingPass::vertexOutputLinking(&v11, *(llvm::Module **)(a2 + 48), (uint64_t *)a4, a4 + 48, *(_DWORD *)(a4 + 72), v8, *(_DWORD *)(a4 + 76), *(_DWORD *)(a4 + 80), v4[10], v4[11], *(_DWORD *)(a4 + 88), *(_DWORD *)(a4 + 84)) & 1) == 0)goto LABEL_7;
    return 1;
  }
  v11 = (MTLCompilerErrorObject *)(a1 + 120);
  v12 = 0;
  if ((MTLVertexOutputPackingPass::vertexOutputPacking(&v11, *(llvm::Module **)(a2 + 48), (uint64_t *)a4, (uint64_t *)(a4 + 24), a4 + 48, *(unsigned int *)(a4 + 72), v8, *(_DWORD *)(a4 + 76), *(_DWORD *)(a4 + 80), v4[10], v4[11], *(_DWORD *)(a4 + 88), *(_DWORD *)(a4 + 84)) & 1) != 0)return 1;
LABEL_7:
  if (*(_QWORD *)(a2 + 48))
  {
    v10 = MEMORY[0x24268D17C]();
    MEMORY[0x24268D8F0](v10, 0x10B2C407FF26C1CLL);
  }
  *(_QWORD *)(a2 + 48) = 0;
  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a2 + 24) + 16))(*(_QWORD *)(a2 + 24), 2 * (*v9 != 0), 0, 0);
  return 0;
}

_QWORD *MTLCompilerObject::runFragmentLinkingPass(_QWORD *result, uint64_t a2, uint64_t a3)
{
  int v3;
  llvm::Module *v4;
  uint64_t v5;
  llvm::Module *v6;
  _QWORD *v7;
  char v8;
  _QWORD v9[3];
  _QWORD *v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v3 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
  if ((v3 & 4) != 0)
  {
    if ((v3 & 8) != 0)
    {
      v7 = result + 15;
      v8 = 0;
      v6 = *(llvm::Module **)(a2 + 48);
      v11[0] = &off_25111F630;
      v11[1] = a3;
      v12 = v11;
      MTLFragmentInputPackingPass::fragmentInputPacking((int)&v7, v6, (uint64_t)v11);
      result = v12;
      if (v12 == v11)
      {
        v5 = 4;
        result = v11;
        return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
      }
    }
    else
    {
      v7 = result + 15;
      v8 = 0;
      v4 = *(llvm::Module **)(a2 + 48);
      v9[0] = &off_25111F678;
      v9[1] = a3;
      v10 = v9;
      MTLFragmentInputLinkingPass::fragmentInputLinking((int)&v7, v4, (uint64_t)v9);
      result = v10;
      if (v10 == v9)
      {
        v5 = 4;
        result = v9;
        return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
      }
    }
    if (!result)
      return result;
    v5 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
  }
  return result;
}

void sub_241030D8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v20;
  uint64_t v21;

  v20 = a19;
  if (a19 == &a16)
  {
    v21 = 4;
    v20 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t MTLCompilerObject::runKernelPasses(MTLCompilerObject *a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(*(_QWORD *)(a2 + 32) + 28) < 0xCu)
    return 1;
  result = MTLCompilerObject::checkVertexDescriptorAndAddVertexFetchingToKernelModule(a1, a2);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t MTLCompilerObject::checkVertexDescriptorAndAddVertexFetchingToKernelModule(MTLCompilerObject *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  llvm::Module *v7;
  llvm::NamedMDNode *NamedMetadata;
  uint64_t Operand;
  char *v10;
  char v11;
  _QWORD *v12;
  uint64_t v14;
  void *__p;
  void *v16;
  uint64_t v17;
  __int16 v18;
  _QWORD *v19;
  char v20;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)a2 + *(unsigned int *)(v4 + 24);
  v6 = *(_DWORD *)(v5 + 8);
  if ((v6 & 1) != 0)
  {
    if ((v6 & 0x20) != 0)
      v10 = (char *)(v5 + 20);
    else
      v10 = (char *)(v5 + 12);
    MTLCompilerObject::validateSerializedVertexDescriptor(this, v10, *(unsigned int *)(v4 + 28));
    if ((*(_BYTE *)(v5 + 8) & 4) == 0)
    {
      __p = 0;
      v16 = 0;
      v17 = 0;
      v11 = *((_BYTE *)this + 128);
      v12 = (_QWORD *)((char *)this + 120);
      v19 = v12;
      v20 = v11;
      if (!MTLAddVertexFetchingToModulePass::addVertexFetchingToModule((uint64_t)&v19, *(llvm::Type ***)(a2 + 48), 1, (unsigned __int16 *)v10, 0, 0, 0, 0, v11, v11, *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4), &__p))
      {
        if (*(_QWORD *)(a2 + 48))
        {
          v14 = MEMORY[0x24268D17C]();
          MEMORY[0x24268D8F0](v14, 0x10B2C407FF26C1CLL);
        }
        *(_QWORD *)(a2 + 48) = 0;
        (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a2 + 24) + 16))(*(_QWORD *)(a2 + 24), 2 * (*v12 != 0), 0, 0);
        if (__p)
        {
          v16 = __p;
          operator delete(__p);
        }
        return 0;
      }
      if (__p)
      {
        v16 = __p;
        operator delete(__p);
      }
    }
    return 1;
  }
  if ((v6 & 4) != 0)
    return 1;
  v7 = *(llvm::Module **)(a2 + 48);
  __p = "air.kernel";
  v18 = 259;
  NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v7, (const llvm::Twine *)&__p);
  Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
  if ((MTLCompilerObject::checkNoStageInAttributes((uint64_t)this, Operand) & 1) != 0)
    return 1;
  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a2 + 24) + 16))(*(_QWORD *)(a2 + 24), 2 * (*((_QWORD *)this + 15) != 0), 0, 0);
  return 0;
}

void sub_241030FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MTLCompilerObject::generateReflection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  int v7;
  _QWORD *ReflectionData;
  void *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  char v15;
  void *v16[3];
  int v17;

  v4 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
  if ((v4 & 1) == 0)
    return 0;
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  if (*(_QWORD *)(a2 + 40) == 1)
  {
    v14 = (void **)(a1 + 120);
    v15 = 0;
    MTLAddPostVertexDumpingToModulePass::addPostVertexDumpingToModule((int)&v14, *(llvm::Module **)(a2 + 48), -1, 1, &v17, (uint64_t *)v16, (v4 >> 10) & 1);
    v4 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
    v7 = v17;
  }
  else
  {
    v7 = 0;
  }
  v14 = (void **)(a1 + 120);
  v15 = 0;
  ReflectionData = MTLGenerateReflectionDataPass::generateReflectionData((uint64_t)&v14, *(llvm::Module **)(a2 + 48), v4, (_QWORD *)(a3 + 8), v7, v16, *(const void **)(a3 + 128), *(_QWORD *)(a3 + 136), (uint64_t *)(a3 + 24));
  v9 = *(void **)a3;
  *(_QWORD *)a3 = ReflectionData;
  if (v9)
    free(v9);
  v14 = v16;
  std::vector<PostVertexDumpOutput>::__destroy_vector::operator()[abi:ne180100](&v14);
  v10 = *(_QWORD *)(a2 + 32);
  if ((*(_BYTE *)(v10 + 4) & 2) == 0)
    return 0;
  if ((*(_BYTE *)(v10 + 2) & 0x80) != 0)
  {
    if (!*(_QWORD *)(a3 + 168) && !*(_BYTE *)(a1 + 128))
    {
      v12 = MTLWriteAIRReflectionToMemoryBuffer();
      std::unique_ptr<void,LLVMMemoryBufferDeleter>::reset[abi:ne180100]((uint64_t *)(a3 + 168), v12);
    }
    if (!*(_QWORD *)(a3 + 176) && !*(_BYTE *)(a1 + 128))
    {
      v13 = MTLWriteAIRReflectionToMemoryBuffer();
      std::unique_ptr<void,LLVMMemoryBufferDeleter>::reset[abi:ne180100]((uint64_t *)(a3 + 176), v13);
    }
  }
  MTLCompilerObject::patchReflection(a1, a2, a3);
  CompilerOutputReflectionBlock::CompilerOutputReflectionBlock(v16, *(_QWORD *)a3);
  (*(void (**)(void))(*(_QWORD *)(a2 + 24) + 16))();
  CompilerOutputReflectionBlock::~CompilerOutputReflectionBlock(v16);
  return 1;
}

void sub_241031174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  CompilerOutputReflectionBlock::~CompilerOutputReflectionBlock((void **)va);
  _Unwind_Resume(a1);
}

uint64_t MTLCompilerObject::generateAIRReflectionType(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v6;

  if (!*(_BYTE *)(result + 128))
  {
    v6 = MTLWriteAIRReflectionToMemoryBuffer();
    return std::unique_ptr<void,LLVMMemoryBufferDeleter>::reset[abi:ne180100]((uint64_t *)(a3 + 8 * a4 + 160), v6);
  }
  return result;
}

void MTLCompilerObject::patchReflection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v4;

  if ((*(_BYTE *)(*(_QWORD *)(a2 + 32) + 4) & 1) != 0)
  {
    v3 = a1 + 120;
    v4 = 0;
    MTLGenerateReflectionDataPass::patchTraceBufferReflectionData((MTLGenerateReflectionDataPass *)&v3, *(llvm::Module **)(a2 + 48), *(char **)a3, *(_QWORD *)(a3 + 24));
  }
}

_BYTE *MTLCompilerObject::deserializePluginData(_BYTE *result, _QWORD *a2, uint64_t a3)
{
  _BYTE *v4;
  uint64_t v5;
  const unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  const unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;

  v4 = result;
  switch(a2[5])
  {
    case 1:
      v11 = a2[4];
      v12 = (const unsigned __int8 *)(*a2 + *(unsigned int *)(v11 + 24));
      if (*(_DWORD *)(v11 + 28) >= 0xCu)
      {
        v13 = *(unsigned int *)v12;
        if ((_DWORD)v13)
        {
          result = MTLDeserializePluginDataDictionary(&v12[v13]);
          *(_QWORD *)(a3 + 112) = result;
        }
        v14 = *((unsigned int *)v12 + 1);
        if ((_DWORD)v14)
        {
          result = MTLDeserializePluginDataDictionary(&v12[v14]);
          *(_QWORD *)(a3 + 120) = result;
        }
      }
      v9 = v4[128];
      v10 = (*((_DWORD *)v12 + 2) >> 19) & 1;
      goto LABEL_21;
    case 2:
      v15 = a2[4];
      v16 = (const unsigned __int8 *)(*a2 + *(unsigned int *)(v15 + 24));
      if (*(_DWORD *)(v15 + 28) >= 0x10u)
      {
        v17 = *(unsigned int *)v16;
        if ((_DWORD)v17)
        {
          result = MTLDeserializePluginDataDictionary(&v16[v17]);
          *(_QWORD *)(a3 + 112) = result;
        }
        v18 = *((unsigned int *)v16 + 1);
        if ((_DWORD)v18)
        {
          result = MTLDeserializePluginDataDictionary(&v16[v18]);
          *(_QWORD *)(a3 + 120) = result;
        }
      }
      v9 = v4[128];
      v10 = (*((_DWORD *)v16 + 2) >> 29) & 1;
      goto LABEL_21;
    case 3:
      v19 = a2[4];
      v20 = (const unsigned __int8 *)(*a2 + *(unsigned int *)(v19 + 24));
      if (*(_DWORD *)(v19 + 28) >= 0xCu)
      {
        v21 = *(unsigned int *)v20;
        if ((_DWORD)v21)
        {
          result = MTLDeserializePluginDataDictionary(&v20[v21]);
          *(_QWORD *)(a3 + 112) = result;
        }
        v22 = *((unsigned int *)v20 + 1);
        if ((_DWORD)v22)
        {
          result = MTLDeserializePluginDataDictionary(&v20[v22]);
          *(_QWORD *)(a3 + 120) = result;
        }
      }
      v4[128] |= (v20[8] & 8) != 0;
      v4[129] |= (v20[8] & 0x10) != 0;
      return result;
    case 5:
    case 6:
      goto LABEL_2;
    case 7:
    case 8:
      v5 = a2[4];
      v6 = (const unsigned __int8 *)(*a2 + *(unsigned int *)(v5 + 24));
      if (*(_DWORD *)(v5 + 28) >= 0xCu)
      {
        v7 = *(unsigned int *)v6;
        if ((_DWORD)v7)
        {
          result = MTLDeserializePluginDataDictionary(&v6[v7]);
          *(_QWORD *)(a3 + 112) = result;
        }
        v8 = *((unsigned int *)v6 + 1);
        if ((_DWORD)v8)
        {
          result = MTLDeserializePluginDataDictionary(&v6[v8]);
          *(_QWORD *)(a3 + 120) = result;
        }
      }
      v9 = v4[128];
      v10 = (v6[8] >> 3) & 1;
LABEL_21:
      v4[128] = v10 | v9;
      break;
    default:
      if ((*(_BYTE *)(a2[4] + 3) & 0x40) != 0)
LABEL_2:
        result = deserializePluginDataForFunctionType<MTLSerializedStatelessFunctionData>(a2, a3);
      break;
  }
  return result;
}

_QWORD *deserializePluginDataForFunctionType<MTLSerializedStatelessFunctionData>(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  const unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = result[4];
  if (*(_DWORD *)(v2 + 28) >= 0x2Cu)
  {
    v4 = (const unsigned __int8 *)(*result + *(unsigned int *)(v2 + 24));
    v5 = *(unsigned int *)v4;
    if ((_DWORD)v5)
    {
      result = MTLDeserializePluginDataDictionary(&v4[v5]);
      *(_QWORD *)(a2 + 112) = result;
    }
    v6 = *((unsigned int *)v4 + 1);
    if ((_DWORD)v6)
    {
      result = MTLDeserializePluginDataDictionary(&v4[v6]);
      *(_QWORD *)(a2 + 120) = result;
    }
  }
  return result;
}

uint64_t MTLCompilerObject::runFWPassesForFunctionType(MTLCompilerObject *a1, uint64_t *a2, int a3, MTLCompilerObject::FragmentVaryingsInfo *a4)
{
  uint64_t v4;

  v4 = 1;
  switch(a2[5])
  {
    case 1:
      return MTLCompilerObject::runVertexPasses((uint64_t)a1, a2, a3, a4);
    case 2:
      return MTLCompilerObject::runFragmentPasses((uint64_t)a1, a2);
    case 3:
      return *(_DWORD *)(a2[4] + 28) < 0xCu
          || MTLCompilerObject::checkVertexDescriptorAndAddVertexFetchingToKernelModule(a1, (uint64_t)a2);
    case 5:
    case 6:
    case 7:
    case 8:
      return v4;
    default:
      return (*(unsigned __int8 *)(a2[4] + 3) >> 6) & 1;
  }
}

void MTLCompilerObject::runDebugInstrumentationPass(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t Function;
  llvm::Function *v6;
  uint8_t *v7;
  uint64_t v8;
  llvm::Instruction *v9;
  uint64_t v13;
  uint64_t v14;
  llvm::Module *v15;
  int v16;
  _QWORD *v17;
  void *v18;
  unint64_t v19;
  uint64_t v20;
  void **v21;
  unint64_t v22;
  _QWORD *v23;
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  int v33;
  void *v34[2];
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint8_t buf[32];
  __int128 v40;
  char **v41;
  char *v42[4];
  int v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a2[4] + 5) & 0x10) == 0)
  {
    Function = llvm::Module::getFunction();
    if (Function)
    {
      v6 = (llvm::Function *)Function;
      v34[0] = *(void **)(Function + 8);
      v34[1] = 0;
      llvm::SmallVector<llvm::User *,4u>::SmallVector<llvm::Value::user_iterator_impl<llvm::User>>(buf, (uint64_t *)v34);
      v7 = *(uint8_t **)buf;
      if (*(_DWORD *)&buf[8])
      {
        v8 = 8 * *(unsigned int *)&buf[8];
        do
        {
          v9 = *(llvm::Instruction **)v7;
          if (*(_QWORD *)v7 && *((_BYTE *)v9 + 16) == 84)
            llvm::Instruction::eraseFromParent(v9);
          v7 += 8;
          v8 -= 8;
        }
        while (v8);
        v7 = *(uint8_t **)buf;
      }
      if (v7 != &buf[16])
        free(v7);
      if (!*((_QWORD *)v6 + 1))
        llvm::Function::eraseFromParent(v6);
    }
    return;
  }
  v13 = mach_absolute_time();
  v14 = a2[5];
  if (v14 == 3)
  {
    if (!MTLCompilerObject::checkVertexDescriptorAndAddVertexFetchingToKernelModule((MTLCompilerObject *)a1, (uint64_t)a2))return;
    goto LABEL_22;
  }
  if (v14 != 1)
  {
LABEL_22:
    MTLCompilerObject::addDebugInstrumentationToModule(a1, (uint64_t)a2, (uint64_t)a3);
    v38 = 0;
    v36 = a1 + 120;
    v37 = 0;
    v15 = (llvm::Module *)a2[6];
    v16 = *(_DWORD *)(a2[4] + 4);
    memset(buf, 0, 24);
    v17 = MTLGenerateReflectionDataPass::generateReflectionData((uint64_t)&v36, v15, v16, &v38, 0, buf, 0, 0, a3 + 3);
    v34[0] = buf;
    std::vector<PostVertexDumpOutput>::__destroy_vector::operator()[abi:ne180100]((void ***)v34);
    v18 = (void *)*a3;
    *a3 = v17;
    if (v18)
      free(v18);
    a3[1] = v38;
    v33 = 7;
    MTLBuildRequestTypeToString(&v33, v34);
    v19 = (unint64_t)(*(double *)&gMachTimeToNS * (double)(mach_absolute_time() - v13));
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      v20 = a1 + 136;
      if (*(char *)(a1 + 159) < 0)
        v20 = *(_QWORD *)(a1 + 136);
      v21 = v34;
      if (v35 < 0)
        v21 = (void **)v34[0];
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = v20;
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v21;
      *(_WORD *)&buf[22] = 2080;
      *(_QWORD *)&buf[24] = "framework instrumentation";
      LOWORD(v40) = 2048;
      *(double *)((char *)&v40 + 2) = (double)v19 * 0.000001;
      _os_log_impl(&dword_240FA3000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "Compilation SUCCESS (ParentProcessName=%{public}s) (TYPE=%{public}s - %s): Time %f ms ", buf, 0x2Au);
    }
    if (v35 < 0)
      operator delete(v34[0]);
    if ((*(_BYTE *)(a2[4] + 5) & 2) != 0)
    {
      v22 = *(_QWORD *)(a4 + 16);
      v23 = *(_QWORD **)(a4 + 8);
      if ((unint64_t)v23 >= v22)
      {
        v25 = *(_QWORD **)a4;
        v26 = ((uint64_t)v23 - *(_QWORD *)a4) >> 4;
        v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 60)
          std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
        v28 = v22 - (_QWORD)v25;
        if (v28 >> 3 > v27)
          v27 = v28 >> 3;
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0)
          v29 = 0xFFFFFFFFFFFFFFFLL;
        else
          v29 = v27;
        if (v29)
        {
          v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SmallVertexPartialLoad>>(a4 + 16, v29);
          v25 = *(_QWORD **)a4;
          v23 = *(_QWORD **)(a4 + 8);
        }
        else
        {
          v30 = 0;
        }
        v31 = &v30[16 * v26];
        v32 = &v30[16 * v29];
        *(_DWORD *)v31 = 7;
        *((_QWORD *)v31 + 1) = v19;
        v24 = v31 + 16;
        if (v23 != v25)
        {
          do
          {
            *((_OWORD *)v31 - 1) = *((_OWORD *)v23 - 1);
            v31 -= 16;
            v23 -= 2;
          }
          while (v23 != v25);
          v25 = *(_QWORD **)a4;
        }
        *(_QWORD *)a4 = v31;
        *(_QWORD *)(a4 + 8) = v24;
        *(_QWORD *)(a4 + 16) = v32;
        if (v25)
          operator delete(v25);
      }
      else
      {
        *(_DWORD *)v23 = 7;
        v23[1] = v19;
        v24 = (char *)(v23 + 2);
      }
      *(_QWORD *)(a4 + 8) = v24;
    }
    return;
  }
  v40 = 0u;
  memset(buf, 0, sizeof(buf));
  v41 = v42;
  memset(v42, 0, sizeof(v42));
  v43 = 0;
  MTLCompilerObject::getFragmentVaryingsInfo((MTLCompilerObject *)a1, (*(_DWORD *)(a2[4] + 4) >> 3) & 1, (const char *)(*a2 + *(unsigned int *)(a2[4] + 16)), *(unsigned int *)(a2[4] + 20), (MTLCompilerObject::FragmentVaryingsInfo *)buf);
  if ((MTLCompilerObject::checkVertexDescriptorAndAddVertexFetchingToVertexModule(a1, (uint64_t)a2, buf) & 1) != 0)
  {
    MTLCompilerObject::addPostVertexDumpingToModule(a1, (uint64_t)a2);
    std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::destroy((uint64_t)&v41, v42[0]);
    if (*(_QWORD *)&buf[24])
    {
      *(_QWORD *)&v40 = *(_QWORD *)&buf[24];
      operator delete(*(void **)&buf[24]);
    }
    if (*(_QWORD *)buf)
    {
      *(_QWORD *)&buf[8] = *(_QWORD *)buf;
      operator delete(*(void **)buf);
    }
    goto LABEL_22;
  }
  std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::destroy((uint64_t)&v41, v42[0]);
  if (*(_QWORD *)&buf[24])
  {
    *(_QWORD *)&v40 = *(_QWORD *)&buf[24];
    operator delete(*(void **)&buf[24]);
  }
  if (*(_QWORD *)buf)
  {
    *(_QWORD *)&buf[8] = *(_QWORD *)buf;
    operator delete(*(void **)buf);
  }
}

void sub_24103195C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MTLCompilerObject::FragmentVaryingsInfo::~FragmentVaryingsInfo(char **this)
{
  char *v2;
  char *v3;

  std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::destroy((uint64_t)(this + 6), this[7]);
  v2 = this[3];
  if (v2)
  {
    this[4] = v2;
    operator delete(v2);
  }
  v3 = *this;
  if (*this)
  {
    this[1] = v3;
    operator delete(v3);
  }
}

void *MTLCompilerObject::addDebugInstrumentationToModule(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  const void *v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned int *v10;
  unint64_t v11;
  llvm::legacy::PassManager *v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  __int128 v16;
  llvm::legacy::PassManager *v17;
  uint64_t v18;
  const char *v19;
  llvm::NamedMDNode *NamedMetadata;
  llvm::NamedMDNode *v21;
  llvm::NamedMDNode *v22;
  llvm::Module *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  llvm::Module *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unsigned __int8 v33;
  int v34;
  uint64_t v35;
  size_t v36;
  _QWORD *v37;
  void *v38;
  int v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  char *v44;
  const char *v45;
  size_t v46;
  uint64_t v47;
  char *v48;
  int v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  unsigned int v56;
  size_t v57;
  unsigned int v58;
  char *v59;
  int v60;
  llvm::Module *v62;
  _QWORD v63[4];
  __int16 v64;
  llvm::Module *v65;
  const char *v66;
  size_t v67;
  _BYTE v68[24];
  _BYTE *v69;
  __int128 v70;
  void *v71[2];
  __int128 v72;
  int v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 __p;
  uint64_t v78;
  char *v79[2];
  _QWORD v80[24];

  v80[21] = *MEMORY[0x24BDAC8D0];
  v7 = *(const void **)a3;
  v6 = *(_QWORD *)(a3 + 8);
  if ((v8 & 1) == 0
  {
    LODWORD(xmmword_2570FBEF4) = 0;
    MTLCompilerObject::addDebugInstrumentationToModule(BinaryRequestData &,FrameworkPassesOutput &)::stats = 0u;
    unk_2570FBEE4 = 0u;
    unk_2570FBF0C = 0u;
    *(__int128 *)((char *)&xmmword_2570FBF14 + 8) = 0u;
    unk_2570FBF2C = 0u;
  }
  if ((v9 & 1) == 0
  {
    MTLCompilerObject::addDebugInstrumentationToModule(BinaryRequestData &,FrameworkPassesOutput &)::serializedData = (uint64_t)&unk_2570FBF58;
    qword_2570FBF50 = 0x400000000;
    qword_2570FBFB8 = (uint64_t)&unk_2570FBFC8;
    qword_2570FBFC0 = 0x1000000000;
    qword_2570FC0C8 = (uint64_t)&unk_2570FC0D8;
    qword_2570FC0D0 = 0x1000000000;
    qword_2570FC198 = (uint64_t)&qword_2570FC1A8;
    qword_2570FC1A0 = 0;
    qword_2570FC1A8 = (uint64_t)&qword_2570FC1C0;
    qword_2570FC1B8 = 0;
    qword_2570FC1B0 = 0;
    __cxa_atexit((void (*)(void *))MTLBoundsCheck::SerializedData::~SerializedData, &MTLCompilerObject::addDebugInstrumentationToModule(BinaryRequestData &,FrameworkPassesOutput &)::serializedData, &dword_240FA3000);
  }
  v10 = (unsigned int *)objc_msgSend((id)objc_msgSend(*(id *)(a3 + 112), "objectForKeyedSubscript:", CFSTR("MTLBoundsCheck::Options")), "bytes");
  v66 = (const char *)(*(_QWORD *)(a2 + 32) + *(unsigned int *)(*(_QWORD *)(a2 + 32) + 280));
  v67 = strlen(v66);
  if (llvm::StringRef::find() != -1)
  {
    v11 = *(_QWORD *)(v10 + 5) | 0x1000000000;
LABEL_7:
    *(_QWORD *)(v10 + 5) = v11;
    goto LABEL_8;
  }
  if (llvm::StringRef::find() != -1)
  {
    v11 = *(_QWORD *)(v10 + 5) & 0xFFFFFFE9FEDFFBFELL | 1;
    goto LABEL_7;
  }
LABEL_8:
  v12 = *(llvm::legacy::PassManager **)(a1 + 8);
  if (!v12
    || ((_QWORD)MTLCompilerObject::addDebugInstrumentationToModule(BinaryRequestData &,FrameworkPassesOutput &)::cachedOptions == *(_QWORD *)v10
      ? (v13 = *((_QWORD *)&MTLCompilerObject::addDebugInstrumentationToModule(BinaryRequestData &,FrameworkPassesOutput &)::cachedOptions
               + 1) == *((_QWORD *)v10 + 1))
      : (v13 = 0),
        v13 ? (v14 = qword_2570FBEC8 == *((_QWORD *)v10 + 2)) : (v14 = 0),
        v14 ? (v15 = dword_2570FBED0 == (unint64_t)v10[6]) : (v15 = 0),
        !v15))
  {
    v16 = *(_OWORD *)v10;
    *(__int128 *)((char *)&MTLCompilerObject::addDebugInstrumentationToModule(BinaryRequestData &,FrameworkPassesOutput &)::cachedOptions
                + 12) = *(_OWORD *)(v10 + 3);
    MTLCompilerObject::addDebugInstrumentationToModule(BinaryRequestData &,FrameworkPassesOutput &)::cachedOptions = v16;
    v17 = (llvm::legacy::PassManager *)operator new();
    llvm::legacy::PassManager::PassManager(v17);
    v18 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v17;
    if (v18)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      v17 = *(llvm::legacy::PassManager **)(a1 + 8);
    }
    MTLAddBoundsCheckPipelineToPM((uint64_t)v17, (uint64_t)&MTLCompilerObject::addDebugInstrumentationToModule(BinaryRequestData &,FrameworkPassesOutput &)::cachedOptions, (uint64_t)&MTLCompilerObject::addDebugInstrumentationToModule(BinaryRequestData &,FrameworkPassesOutput &)::stats, (uint64_t)&MTLCompilerObject::addDebugInstrumentationToModule(BinaryRequestData &,FrameworkPassesOutput &)::serializedData);
    v12 = *(llvm::legacy::PassManager **)(a1 + 8);
  }
  MTLUpdateBoundsRunPipeline(a2, v12, *(void **)(a3 + 120));
  qword_2570FBF34 = 0;
  xmmword_2570FBF14 = 0u;
  unk_2570FBF24 = 0u;
  xmmword_2570FBEF4 = 0u;
  unk_2570FBF04 = 0u;
  MTLCompilerObject::addDebugInstrumentationToModule(BinaryRequestData &,FrameworkPassesOutput &)::stats = 0u;
  unk_2570FBEE4 = 0u;
  v73 = 0;
  v72 = 0u;
  v70 = 0u;
  *(_OWORD *)v71 = 0u;
  v74 = 0u;
  v75 = 0u;
  v76 = 0u;
  __p = 0u;
  v78 = 0;
  v79[0] = (char *)v80;
  v79[1] = (char *)0x400000000;
  v19 = (const char *)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x24BDD1488], "bundleWithIdentifier:", CFSTR("com.apple.MTLCompiler")), "resourcePath"), "stringByAppendingFormat:", CFSTR("/Versions/%d"), 32023), "stringByAppendingString:", CFSTR("/libmetal_boundscheck.a")), "UTF8String");
  if (v19)
    strlen(v19);
  llvm::getLazyIRFileModule();
  v63[0] = "air.language_version";
  v64 = 259;
  NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v65, (const llvm::Twine *)v63);
  if (NamedMetadata)
    llvm::Module::eraseNamedMetadata(v65, NamedMetadata);
  v63[0] = "air.version";
  v64 = 259;
  v21 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v65, (const llvm::Twine *)v63);
  if (v21)
    llvm::Module::eraseNamedMetadata(v65, v21);
  v63[0] = "air.compile_options";
  v64 = 259;
  v22 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v65, (const llvm::Twine *)v63);
  if (v22)
    llvm::Module::eraseNamedMetadata(v65, v22);
  v23 = v65;
  v65 = 0;
  v62 = v23;
  v69 = 0;
  llvm::Linker::linkModules();
  v24 = v69;
  if (v69 == v68)
  {
    v25 = 4;
    v24 = v68;
  }
  else
  {
    if (!v69)
      goto LABEL_35;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_35:
  if (v62)
  {
    v26 = MEMORY[0x24268D17C]();
    MEMORY[0x24268D8F0](v26, 0x10B2C407FF26C1CLL);
  }
  v27 = v65;
  v65 = 0;
  if (v27)
  {
    v28 = MEMORY[0x24268D17C]();
    MEMORY[0x24268D8F0](v28, 0x10B2C407FF26C1CLL);
  }
  llvm::SmallVector<llvm::SMFixIt,4u>::~SmallVector(v79);
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  if (SHIBYTE(v76) < 0)
    operator delete(*((void **)&v75 + 1));
  if (SBYTE7(v75) < 0)
    operator delete((void *)v74);
  if (SBYTE7(v72) < 0)
    operator delete(v71[0]);
  v29 = 80;
  *(_QWORD *)(a3 + 64) = 80;
  if ((_DWORD)qword_2570FBF50)
  {
    v30 = 24 * qword_2570FBF50;
    v31 = MTLCompilerObject::addDebugInstrumentationToModule(BinaryRequestData &,FrameworkPassesOutput &)::serializedData
        + 23;
    v29 = 80;
    v32 = (char *)(MTLCompilerObject::addDebugInstrumentationToModule(BinaryRequestData &,FrameworkPassesOutput &)::serializedData
                 + 23);
    do
    {
      v34 = *v32;
      v32 += 24;
      v33 = v34;
      if (v34 < 0)
        v35 = *(_QWORD *)(v31 - 15);
      else
        v35 = v33;
      v29 += v35 + 9;
      *(_QWORD *)(a3 + 64) = v29;
      v31 = (uint64_t)v32;
      v30 -= 24;
    }
    while (v30);
  }
  v36 = v29
      + 16 * qword_2570FBFC0
      + 12 * qword_2570FC0D0
      + 8 * qword_2570FC1A0
      + v6
      + qword_2570FC1B0;
  *(_QWORD *)(a3 + 64) = v36;
  v37 = malloc_type_calloc(1uLL, v36, 0xF77D3E9FuLL);
  v38 = *(void **)(a3 + 56);
  *(_QWORD *)(a3 + 56) = v37;
  if (v38)
  {
    free(v38);
    v37 = *(_QWORD **)(a3 + 56);
  }
  *v37 = *v10;
  v37[7] = qword_2570FC1C0;
  v37[8] = qword_2570FC1C8;
  *((_WORD *)v37 + 36) = word_2570FC1D0;
  v39 = (_DWORD)v37 + 80;
  v40 = qword_2570FBF50;
  *((_DWORD *)v37 + 2) = qword_2570FBF50;
  *((_DWORD *)v37 + 3) = 72;
  if (v40)
  {
    v41 = 0;
    v42 = 0;
    v43 = 8 * v40;
    v39 += 8 * v40;
    v44 = (char *)v37;
    do
    {
      v45 = (const char *)(MTLCompilerObject::addDebugInstrumentationToModule(BinaryRequestData &,FrameworkPassesOutput &)::serializedData
                         + v41);
      if (*(char *)(MTLCompilerObject::addDebugInstrumentationToModule(BinaryRequestData &,FrameworkPassesOutput &)::serializedData
                   + v41
                   + 23) < 0)
        v46 = *((unsigned int *)v45 + 2);
      else
        v46 = *(unsigned __int8 *)(MTLCompilerObject::addDebugInstrumentationToModule(BinaryRequestData &,FrameworkPassesOutput &)::serializedData
                                 + v41
                                 + 23);
      v47 = *((unsigned int *)v37 + 3);
      v48 = &v44[v47];
      *(_DWORD *)&v44[v47 + 8] = v46;
      *(_DWORD *)&v44[v47 + 12] = v43;
      if (v45[23] < 0)
        v45 = *(const char **)v45;
      strncpy(&v44[v47 + 8 + v43], v45, v46);
      v49 = *((_DWORD *)v48 + 2) + 1;
      v43 = v43 + v49 - 8;
      v39 += v49;
      ++v42;
      v44 += 8;
      v41 += 24;
    }
    while (qword_2570FBF50 > v42);
  }
  v50 = qword_2570FBFC0;
  *((_DWORD *)v37 + 4) = qword_2570FBFC0;
  v51 = v39 - ((_DWORD)v37 + 16);
  *((_DWORD *)v37 + 5) = v51;
  memcpy((char *)v37 + v51 + 16, (const void *)qword_2570FBFB8, 16 * v50);
  LODWORD(v50) = v39 + 16 * v50;
  v52 = qword_2570FC0D0;
  *((_DWORD *)v37 + 6) = qword_2570FC0D0;
  v53 = v50 - ((_DWORD)v37 + 24);
  *((_DWORD *)v37 + 7) = v53;
  v54 = 3 * v52;
  memcpy((char *)v37 + v53 + 24, (const void *)qword_2570FC0C8, 12 * v52);
  v55 = qword_2570FC1A0;
  *((_DWORD *)v37 + 8) = qword_2570FC1A0;
  LODWORD(v50) = v50 + 4 * v54;
  v56 = v50 - ((_DWORD)v37 + 32);
  *((_DWORD *)v37 + 9) = v56;
  memcpy((char *)v37 + v56 + 32, (const void *)qword_2570FC198, 8 * v55);
  LODWORD(v50) = v50 + 8 * v55;
  v57 = qword_2570FC1B0;
  *((_DWORD *)v37 + 10) = qword_2570FC1B0;
  v58 = v50 - ((_DWORD)v37 + 40);
  *((_DWORD *)v37 + 11) = v58;
  memcpy((char *)v37 + v58 + 40, (const void *)qword_2570FC1A8, v57);
  *((_DWORD *)v37 + 12) = v6;
  v59 = (char *)(v37 + 6);
  v60 = v50 - (_DWORD)v59 + v57;
  *((_DWORD *)v59 + 1) = v60;
  return memcpy(&v59[v60], v7, v6);
}

void sub_24103215C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  std::unique_ptr<llvm::Module>::reset[abi:ne180100]((uint64_t *)va, 0);
  llvm::SMDiagnostic::~SMDiagnostic((llvm::SMDiagnostic *)va1);
  _Unwind_Resume(a1);
}

uint64_t MTLCompilerObject::loadModule(uint64_t a1, _QWORD *a2, uint64_t a3, llvm::LLVMContext *a4)
{
  _BOOL8 v4;
  void *v7;
  uint64_t v8;

  if (*(_BYTE *)(a1 + 128))
    return 1;
  v7 = (void *)a2[6];
  v8 = a2[4];
  if ((*(_BYTE *)(v8 + 3) & 4) != 0)
  {
    v7 = (void *)MTLCompilerObject::invokeFunctionLoader(a1, (unsigned int *)v8, a2[1], a4, v7, *(_QWORD *)(a3 + 128), *(_QWORD *)(a3 + 136), a2[3]);
    *(_DWORD *)a2[4] &= ~0x4000000u;
  }
  v4 = v7 != 0;
  if (!v7)
  {
    free(*(void **)(a3 + 128));
    *(_QWORD *)(a3 + 128) = 0;
  }
  a2[6] = v7;
  return v4;
}

uint64_t MTLCompilerObject::lowerModule(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  _BOOL8 v4;
  int v8;
  llvm::Module *v9;
  uint64_t v10;

  if (*(_BYTE *)(a1 + 128))
    return 1;
  v8 = a1;
  v9 = *(llvm::Module **)(a2 + 48);
  MTLCompilerObject::loadRuntimeModules(a1, a2);
  v10 = *(_QWORD *)(a2 + 32);
  if ((*(_BYTE *)(v10 + 3) & 2) != 0 && v9)
  {
    v9 = (llvm::Module *)MTLCompilerObject::invokeLowerModule(v8, v10, a4, v9, *(MTLFunctionType *)(a2 + 40), *(_QWORD *)(a2 + 24));
    **(_DWORD **)(a2 + 32) &= ~0x2000000u;
  }
  v4 = v9 != 0;
  if (!v9)
  {
    free(*(void **)(a3 + 128));
    *(_QWORD *)(a3 + 128) = 0;
  }
  *(_QWORD *)(a2 + 48) = v9;
  return v4;
}

uint64_t MTLCompilerObject::AIRNTGetVertexFunctionScript(uint64_t a1, int *a2, uint64_t a3, int *a4)
{
  int v6;
  unsigned __int16 *v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;

  if (!a4)
    return 0;
  v6 = Air::CloneVertexFunctionDescriptor<Air::VertexFunctionDescriptor>(a3, a4);
  v7 = (unsigned __int16 *)((char *)a2 - *a2);
  v8 = *v7;
  if (v8 >= 5 && v7[2])
    v9 = (uint64_t *)((char *)a2 + v7[2]);
  else
    v9 = 0;
  if (v8 >= 7 && (v10 = v7[3]) != 0)
    v11 = *((unsigned __int8 *)a2 + v10);
  else
    v11 = 0;
  *(_BYTE *)(a3 + 70) = 1;
  v12 = *(_DWORD *)(a3 + 32) - *(_DWORD *)(a3 + 48) + *(_DWORD *)(a3 + 40);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a3, 10, v6);
  flatbuffers::FlatBufferBuilder::AddStruct<Air::Version>((char *)a3, 4, v9);
  v13 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>(a3, 1);
  flatbuffers::FlatBufferBuilder::TrackField((char *)a3, 8, v13);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a3, 6, v11, 0);
  v14 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a3, v12);
  flatbuffers::FlatBufferBuilder::Finish((flatbuffers::FlatBufferBuilder *)a3, v14, "AIRF", 0);
  return *(_QWORD *)(a3 + 48) + **(unsigned int **)(a3 + 48);
}

uint64_t Air::CloneVertexFunctionDescriptor<Air::VertexFunctionDescriptor>(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int16 *v23;
  uint64_t v24;
  int v25;
  unsigned __int16 *v26;
  uint64_t v27;
  int v28;
  unsigned __int16 *v29;
  uint64_t v30;
  int v31;
  unsigned __int16 *v32;
  uint64_t v33;
  unsigned int v34;
  _BOOL4 v35;
  unsigned __int16 *v36;
  uint64_t v37;
  _BOOL4 v38;
  unsigned __int16 *v39;
  uint64_t v40;
  unsigned int v41;
  unsigned __int16 *v42;
  uint64_t v43;
  unsigned int v44;
  unsigned __int16 *v45;
  uint64_t v46;
  unsigned int v47;
  unsigned __int16 *v48;
  uint64_t v49;
  unsigned int v50;
  unsigned __int16 *v51;
  uint64_t v52;
  unsigned int v53;
  unsigned __int16 *v54;
  uint64_t v55;
  unsigned int v56;
  unsigned __int16 *v57;
  uint64_t v58;
  _BOOL4 v59;
  unsigned __int16 *v60;
  uint64_t v61;
  unsigned int v62;
  unsigned __int16 *v63;
  uint64_t v64;
  unsigned __int16 *v65;
  uint64_t v66;
  int v67;
  unsigned int *v69;

  v4 = *a2;
  v5 = -v4;
  v6 = (unsigned __int16 *)((char *)a2 - v4);
  if (*v6 >= 0x2Du && (v7 = v6[22]) != 0)
  {
    v8 = Air::CloneLinkedFunctions<Air::LinkedFunctions>(a1, (int *)((char *)a2 + v7 + *(unsigned int *)((char *)a2 + v7)));
    v5 = -(uint64_t)*a2;
  }
  else
  {
    v8 = 0;
  }
  if (*(unsigned __int16 *)((char *)a2 + v5) >= 0x1Fu && *(_WORD *)((char *)a2 + v5 + 30))
  {
    v69 = (unsigned int *)((char *)a2
                         + *(unsigned __int16 *)((char *)a2 + v5 + 30)
                         + *(unsigned int *)((char *)a2 + *(unsigned __int16 *)((char *)a2 + v5 + 30)));
    v9 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Air24PipelineBufferDescriptorEEEZNS3_29CloneVertexFunctionDescriptorINS3_24VertexFunctionDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_39VertexFunctionDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *v69, &v69, a1);
    v5 = -(uint64_t)*a2;
  }
  else
  {
    v9 = 0;
  }
  if (*(unsigned __int16 *)((char *)a2 + v5) >= 7u && *(_WORD *)((char *)a2 + v5 + 6))
  {
    v10 = Air::CloneVertexDescriptor<Air::VertexDescriptor>(a1, (int *)((char *)a2+ *(unsigned __int16 *)((char *)a2 + v5 + 6)+ *(unsigned int *)((char *)a2 + *(unsigned __int16 *)((char *)a2 + v5 + 6))));
    v5 = -(uint64_t)*a2;
  }
  else
  {
    v10 = 0;
  }
  v11 = 1;
  *(_BYTE *)(a1 + 70) = 1;
  v12 = *(_QWORD *)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = (unsigned __int16 *)((char *)a2 + v5);
  if (*v15 >= 0x1Bu)
  {
    v16 = v15[13];
    if (v16)
      v11 = *(_QWORD *)((char *)a2 + v16);
    else
      v11 = 1;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 26, v11, 1);
  v17 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v17 >= 0xDu && (v18 = v17[6]) != 0)
    v19 = *(_QWORD *)((char *)a2 + v18);
  else
    v19 = 16;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 12, v19, 16);
  v20 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v20 >= 5u && (v21 = v20[2]) != 0)
    v22 = *(_QWORD *)((char *)a2 + v21);
  else
    v22 = 1;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 4, v22, 1);
  if (v8)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 44, v8);
  v23 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v23 >= 0x29u && (v24 = v23[20]) != 0)
    v25 = *(int *)((char *)a2 + v24);
  else
    v25 = 0;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a1, 40, v25, 0);
  if (v9)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 30, v9);
  if (v10)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, v10);
  v26 = (unsigned __int16 *)((char *)a2 - *a2);
  v28 = *v26 >= 0x2Bu && (v27 = v26[21]) != 0 && *((unsigned __int8 *)a2 + v27) != 0;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 42, v28, 0);
  v29 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v29 >= 0x27u && (v30 = v29[19]) != 0)
    v31 = *((unsigned __int8 *)a2 + v30);
  else
    v31 = 255;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 38, v31, 255);
  v32 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v32 >= 0x25u && (v33 = v32[18]) != 0)
  {
    v34 = *((unsigned __int8 *)a2 + v33);
    if (v34 >= 3)
      goto LABEL_93;
  }
  else
  {
    v34 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 36, v34, 0);
  v35 = 0;
  v36 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v36 >= 0x23u)
  {
    v37 = v36[17];
    if (v37)
      v35 = *((unsigned __int8 *)a2 + v37) != 0;
    else
      v35 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 34, v35, 0);
  v38 = 0;
  v39 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v39 >= 0x21u)
  {
    v40 = v39[16];
    if (v40)
      v38 = *((unsigned __int8 *)a2 + v40) != 0;
    else
      v38 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 32, v38, 0);
  v41 = 0;
  v42 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v42 >= 0x1Du)
  {
    v43 = v42[14];
    if (v43)
    {
      v41 = *((unsigned __int8 *)a2 + v43);
      if (v41 >= 2)
        goto LABEL_93;
    }
    else
    {
      v41 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 28, v41, 0);
  v44 = 0;
  v45 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v45 >= 0x19u)
  {
    v46 = v45[12];
    if (v46)
    {
      v44 = *((unsigned __int8 *)a2 + v46);
      if (v44 >= 4)
        goto LABEL_93;
    }
    else
    {
      v44 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 24, v44, 0);
  v47 = 0;
  v48 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v48 >= 0x17u)
  {
    v49 = v48[11];
    if (v49)
    {
      v47 = *((unsigned __int8 *)a2 + v49);
      if (v47 >= 2)
        goto LABEL_93;
    }
    else
    {
      v47 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 22, v47, 0);
  v50 = 0;
  v51 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v51 >= 0x15u)
  {
    v52 = v51[10];
    if (v52)
    {
      v50 = *((unsigned __int8 *)a2 + v52);
      if (v50 >= 4)
        goto LABEL_93;
    }
    else
    {
      v50 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 20, v50, 0);
  v53 = 0;
  v54 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v54 >= 0x13u)
  {
    v55 = v54[9];
    if (v55)
    {
      v53 = *((unsigned __int8 *)a2 + v55);
      if (v53 >= 3)
        goto LABEL_93;
    }
    else
    {
      v53 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 18, v53, 0);
  v56 = 0;
  v57 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v57 >= 0x11u)
  {
    v58 = v57[8];
    if (v58)
    {
      v56 = *((unsigned __int8 *)a2 + v58);
      if (v56 >= 2)
LABEL_93:
        abort();
    }
    else
    {
      v56 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 16, v56, 0);
  v59 = 0;
  v60 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v60 >= 0xFu)
  {
    v61 = v60[7];
    if (v61)
      v59 = *((unsigned __int8 *)a2 + v61) != 0;
    else
      v59 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 14, v59, 0);
  v62 = 0;
  v63 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v63 >= 0xBu)
  {
    v64 = v63[5];
    if (v64)
    {
      v62 = *((unsigned __int8 *)a2 + v64);
      if (v62 >= 4)
        goto LABEL_93;
    }
    else
    {
      v62 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 10, v62, 0);
  v65 = (unsigned __int16 *)((char *)a2 - *a2);
  v67 = *v65 < 9u || (v66 = v65[4]) == 0 || *((unsigned __int8 *)a2 + v66) != 0;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 8, v67, 1);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v14 - (unsigned __int16)v13 + (unsigned __int16)v12);
}

uint64_t MTLCompilerObject::AIRNTGetFragmentFunctionScript(uint64_t a1, int *a2, uint64_t a3, int *a4)
{
  int v6;
  unsigned __int16 *v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;

  if (!a4)
    return 0;
  v6 = Air::CloneFragmentFunctionDescriptor<Air::FragmentFunctionDescriptor>(a3, a4);
  v7 = (unsigned __int16 *)((char *)a2 - *a2);
  v8 = *v7;
  if (v8 >= 5 && v7[2])
    v9 = (uint64_t *)((char *)a2 + v7[2]);
  else
    v9 = 0;
  if (v8 >= 7 && (v10 = v7[3]) != 0)
    v11 = *((unsigned __int8 *)a2 + v10);
  else
    v11 = 0;
  *(_BYTE *)(a3 + 70) = 1;
  v12 = *(_DWORD *)(a3 + 32) - *(_DWORD *)(a3 + 48) + *(_DWORD *)(a3 + 40);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a3, 10, v6);
  flatbuffers::FlatBufferBuilder::AddStruct<Air::Version>((char *)a3, 4, v9);
  v13 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>(a3, 2);
  flatbuffers::FlatBufferBuilder::TrackField((char *)a3, 8, v13);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a3, 6, v11, 0);
  v14 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a3, v12);
  flatbuffers::FlatBufferBuilder::Finish((flatbuffers::FlatBufferBuilder *)a3, v14, "AIRF", 0);
  return *(_QWORD *)(a3 + 48) + **(unsigned int **)(a3 + 48);
}

uint64_t Air::CloneFragmentFunctionDescriptor<Air::FragmentFunctionDescriptor>(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int16 *v24;
  uint64_t v25;
  unsigned __int16 *v26;
  uint64_t v27;
  int v28;
  unsigned __int16 *v29;
  float v30;
  uint64_t v31;
  unsigned __int16 *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int16 v35;
  uint64_t v36;
  unsigned __int16 *v37;
  uint64_t v38;
  unsigned __int16 v39;
  _BOOL4 v40;
  unsigned __int16 *v41;
  uint64_t v42;
  _BOOL4 v43;
  unsigned __int16 *v44;
  uint64_t v45;
  _BOOL4 v46;
  unsigned __int16 *v47;
  uint64_t v48;
  _BOOL4 v49;
  unsigned __int16 *v50;
  uint64_t v51;
  unsigned int v52;
  unsigned __int16 *v53;
  uint64_t v54;
  _BOOL4 v55;
  unsigned __int16 *v56;
  uint64_t v57;
  unsigned int v58;
  unsigned __int16 *v59;
  uint64_t v60;
  _BOOL4 v61;
  unsigned __int16 *v62;
  uint64_t v63;
  unsigned int v64;
  unsigned __int16 *v65;
  uint64_t v66;
  _BOOL4 v67;
  unsigned __int16 *v68;
  uint64_t v69;
  _BOOL4 v70;
  unsigned __int16 *v71;
  uint64_t v72;
  _BOOL4 v73;
  unsigned __int16 *v74;
  uint64_t v75;
  _BOOL4 v76;
  unsigned __int16 *v77;
  uint64_t v78;
  _BOOL4 v79;
  unsigned __int16 *v80;
  uint64_t v81;
  unsigned __int16 *v82;
  uint64_t v83;
  int v84;
  unsigned int *v86;

  v4 = *a2;
  v5 = -v4;
  v6 = (unsigned __int16 *)((char *)a2 - v4);
  if (*v6 >= 0x37u && (v7 = v6[27]) != 0)
  {
    v8 = Air::CloneLinkedFunctions<Air::LinkedFunctions>(a1, (int *)((char *)a2 + v7 + *(unsigned int *)((char *)a2 + v7)));
    v5 = -(uint64_t)*a2;
  }
  else
  {
    v8 = 0;
  }
  if (*(unsigned __int16 *)((char *)a2 + v5) >= 0x1Du && *(_WORD *)((char *)a2 + v5 + 28))
  {
    v86 = (unsigned int *)((char *)a2
                         + *(unsigned __int16 *)((char *)a2 + v5 + 28)
                         + *(unsigned int *)((char *)a2 + *(unsigned __int16 *)((char *)a2 + v5 + 28)));
    v9 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Air24PipelineBufferDescriptorEEEZNS3_31CloneFragmentFunctionDescriptorINS3_26FragmentFunctionDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_41FragmentFunctionDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *v86, &v86, a1);
    v5 = -(uint64_t)*a2;
  }
  else
  {
    v9 = 0;
  }
  if (*(unsigned __int16 *)((char *)a2 + v5) >= 0x17u && *(_WORD *)((char *)a2 + v5 + 22))
  {
    v86 = (unsigned int *)((char *)a2
                         + *(unsigned __int16 *)((char *)a2 + v5 + 22)
                         + *(unsigned int *)((char *)a2 + *(unsigned __int16 *)((char *)a2 + v5 + 22)));
    v10 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Air33FragmentColorAttachmentDescriptorEEEZNS3_31CloneFragmentFunctionDescriptorINS3_26FragmentFunctionDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_41FragmentFunctionDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE0_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *v86, &v86, a1);
    v5 = -(uint64_t)*a2;
  }
  else
  {
    v10 = 0;
  }
  *(_BYTE *)(a1 + 70) = 1;
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 32);
  v14 = (unsigned __int16 *)((char *)a2 + v5);
  if (*v14 >= 0x11u && (v15 = v14[8]) != 0)
    v16 = *(_QWORD *)((char *)a2 + v15);
  else
    v16 = -1;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 16, v16, -1);
  v17 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v17 >= 0xFu && (v18 = v17[7]) != 0)
    v19 = *(_QWORD *)((char *)a2 + v18);
  else
    v19 = 0;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 14, v19, 0);
  v20 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v20 >= 0xDu && (v21 = v20[6]) != 0)
    v22 = *(_QWORD *)((char *)a2 + v21);
  else
    v22 = 1;
  v23 = 1;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 12, v22, 1);
  v24 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v24 >= 5u)
  {
    v25 = v24[2];
    if (v25)
      v23 = *(_QWORD *)((char *)a2 + v25);
    else
      v23 = 1;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 4, v23, 1);
  if (v8)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 54, v8);
  v26 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v26 >= 0x35u && (v27 = v26[26]) != 0)
    v28 = *(int *)((char *)a2 + v27);
  else
    v28 = 0;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a1, 52, v28, 0);
  if (v9)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 28, v9);
  if (v10)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 22, v10);
  v29 = (unsigned __int16 *)((char *)a2 - *a2);
  v30 = 1.0;
  if (*v29 >= 0x13u)
  {
    v31 = v29[9];
    if (v31)
      v30 = *(float *)((char *)a2 + v31);
  }
  flatbuffers::FlatBufferBuilder::AddElement<float>((char *)a1, 18, v30, 1.0);
  v32 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v32 >= 0x1Bu && (v33 = v32[13]) != 0)
    v34 = *(unsigned __int16 *)((char *)a2 + v33);
  else
    v34 = 0;
  v35 = Air::ClonePixelFormat<Air::PixelFormat>(v34);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned short>((char *)a1, 26, v35, 0);
  v36 = 0;
  v37 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v37 >= 0x19u)
  {
    v38 = v37[12];
    if (v38)
      v36 = *(unsigned __int16 *)((char *)a2 + v38);
    else
      v36 = 0;
  }
  v39 = Air::ClonePixelFormat<Air::PixelFormat>(v36);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned short>((char *)a1, 24, v39, 0);
  v40 = 0;
  v41 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v41 >= 0x33u)
  {
    v42 = v41[25];
    if (v42)
      v40 = *((unsigned __int8 *)a2 + v42) != 0;
    else
      v40 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 50, v40, 0);
  v43 = 0;
  v44 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v44 >= 0x31u)
  {
    v45 = v44[24];
    if (v45)
      v43 = *((unsigned __int8 *)a2 + v45) != 0;
    else
      v43 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 48, v43, 0);
  v46 = 0;
  v47 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v47 >= 0x2Fu)
  {
    v48 = v47[23];
    if (v48)
      v46 = *((unsigned __int8 *)a2 + v48) != 0;
    else
      v46 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 46, v46, 0);
  v49 = 0;
  v50 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v50 >= 0x2Du)
  {
    v51 = v50[22];
    if (v51)
      v49 = *((unsigned __int8 *)a2 + v51) != 0;
    else
      v49 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 44, v49, 0);
  v52 = 0;
  v53 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v53 >= 0x2Bu)
  {
    v54 = v53[21];
    if (v54)
    {
      v52 = *((unsigned __int8 *)a2 + v54);
      if (v52 >= 8)
        goto LABEL_87;
    }
    else
    {
      v52 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 42, v52, 0);
  v55 = 0;
  v56 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v56 >= 0x29u)
  {
    v57 = v56[20];
    if (v57)
      v55 = *((unsigned __int8 *)a2 + v57) != 0;
    else
      v55 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 40, v55, 0);
  v58 = 0;
  v59 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v59 >= 0x27u)
  {
    v60 = v59[19];
    if (v60)
    {
      v58 = *((unsigned __int8 *)a2 + v60);
      if (v58 >= 0x10)
LABEL_87:
        abort();
    }
    else
    {
      v58 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 38, v58, 0);
  v61 = 0;
  v62 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v62 >= 0x25u)
  {
    v63 = v62[18];
    if (v63)
      v61 = *((unsigned __int8 *)a2 + v63) != 0;
    else
      v61 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 36, v61, 0);
  v64 = 0;
  v65 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v65 >= 0x23u)
  {
    v66 = v65[17];
    if (v66)
    {
      v64 = *((unsigned __int8 *)a2 + v66);
      if (v64 >= 3)
        goto LABEL_87;
    }
    else
    {
      v64 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 34, v64, 0);
  v67 = 0;
  v68 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v68 >= 0x21u)
  {
    v69 = v68[16];
    if (v69)
      v67 = *((unsigned __int8 *)a2 + v69) != 0;
    else
      v67 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 32, v67, 0);
  v70 = 0;
  v71 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v71 >= 0x1Fu)
  {
    v72 = v71[15];
    if (v72)
      v70 = *((unsigned __int8 *)a2 + v72) != 0;
    else
      v70 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 30, v70, 0);
  v73 = 0;
  v74 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v74 >= 0x15u)
  {
    v75 = v74[10];
    if (v75)
      v73 = *((unsigned __int8 *)a2 + v75) != 0;
    else
      v73 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 20, v73, 0);
  v76 = 0;
  v77 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v77 >= 0xBu)
  {
    v78 = v77[5];
    if (v78)
      v76 = *((unsigned __int8 *)a2 + v78) != 0;
    else
      v76 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 10, v76, 0);
  v79 = 0;
  v80 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v80 >= 9u)
  {
    v81 = v80[4];
    if (v81)
      v79 = *((unsigned __int8 *)a2 + v81) != 0;
    else
      v79 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 8, v79, 0);
  v82 = (unsigned __int16 *)((char *)a2 - *a2);
  v84 = *v82 < 7u || (v83 = v82[3]) == 0 || *((unsigned __int8 *)a2 + v83) != 0;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 6, v84, 1);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v13 - (unsigned __int16)v12 + (unsigned __int16)v11);
}

uint64_t MTLCompilerObject::AIRNTGetComputeFunctionScript(uint64_t a1, int *a2, uint64_t a3, int *a4)
{
  int v6;
  unsigned __int16 *v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;

  if (!a4)
    return 0;
  v6 = Air::CloneComputeFunctionDescriptor<Air::ComputeFunctionDescriptor>(a3, a4);
  v7 = (unsigned __int16 *)((char *)a2 - *a2);
  v8 = *v7;
  if (v8 >= 5 && v7[2])
    v9 = (uint64_t *)((char *)a2 + v7[2]);
  else
    v9 = 0;
  if (v8 >= 7 && (v10 = v7[3]) != 0)
    v11 = *((unsigned __int8 *)a2 + v10);
  else
    v11 = 0;
  *(_BYTE *)(a3 + 70) = 1;
  v12 = *(_DWORD *)(a3 + 32) - *(_DWORD *)(a3 + 48) + *(_DWORD *)(a3 + 40);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a3, 10, v6);
  flatbuffers::FlatBufferBuilder::AddStruct<Air::Version>((char *)a3, 4, v9);
  v13 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>(a3, 3);
  flatbuffers::FlatBufferBuilder::TrackField((char *)a3, 8, v13);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a3, 6, v11, 0);
  v14 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a3, v12);
  flatbuffers::FlatBufferBuilder::Finish((flatbuffers::FlatBufferBuilder *)a3, v14, "AIRF", 0);
  return *(_QWORD *)(a3 + 48) + **(unsigned int **)(a3 + 48);
}

uint64_t Air::CloneComputeFunctionDescriptor<Air::ComputeFunctionDescriptor>(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 *v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned __int16 *v24;
  uint64_t v25;
  _BOOL4 v26;
  unsigned __int16 *v27;
  uint64_t v28;
  _BOOL4 v29;
  unsigned __int16 *v30;
  uint64_t v31;
  _BOOL4 v32;
  unsigned __int16 *v33;
  uint64_t v34;
  unsigned int *v36;

  v4 = *a2;
  v5 = -v4;
  v6 = (unsigned __int16 *)((char *)a2 - v4);
  if (*v6 >= 0x17u && (v7 = v6[11]) != 0)
  {
    v8 = Air::CloneLinkedFunctions<Air::LinkedFunctions>(a1, (int *)((char *)a2 + v7 + *(unsigned int *)((char *)a2 + v7)));
    v5 = -(uint64_t)*a2;
  }
  else
  {
    v8 = 0;
  }
  if (*(unsigned __int16 *)((char *)a2 + v5) >= 0xDu && *(_WORD *)((char *)a2 + v5 + 12))
  {
    v36 = (unsigned int *)((char *)a2
                         + *(unsigned __int16 *)((char *)a2 + v5 + 12)
                         + *(unsigned int *)((char *)a2 + *(unsigned __int16 *)((char *)a2 + v5 + 12)));
    v9 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Air24PipelineBufferDescriptorEEEZNS3_30CloneComputeFunctionDescriptorINS3_25ComputeFunctionDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_40ComputeFunctionDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *v36, &v36, a1);
    v5 = -(uint64_t)*a2;
  }
  else
  {
    v9 = 0;
  }
  if (*(unsigned __int16 *)((char *)a2 + v5) >= 0xBu && *(_WORD *)((char *)a2 + v5 + 10))
  {
    v10 = Air::CloneStageInputOutputDescriptor<Air::StageInputOutputDescriptor>(a1, (int *)((char *)a2+ *(unsigned __int16 *)((char *)a2 + v5 + 10)+ *(unsigned int *)((char *)a2 + *(unsigned __int16 *)((char *)a2 + v5 + 10))));
    v5 = -(uint64_t)*a2;
  }
  else
  {
    v10 = 0;
  }
  v11 = 1;
  *(_BYTE *)(a1 + 70) = 1;
  v12 = (unsigned __int16 *)((char *)a2 + v5);
  if (*v12 >= 9u)
  {
    v13 = v12[4];
    if (v13)
      v11 = *(_QWORD *)((char *)a2 + v13);
    else
      v11 = 1;
  }
  v14 = *(_QWORD *)(a1 + 40);
  v15 = *(_QWORD *)(a1 + 48);
  v16 = *(_QWORD *)(a1 + 32);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 8, v11, 1);
  v17 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v17 >= 7u && (v18 = v17[3]) != 0)
    v19 = *(_QWORD *)((char *)a2 + v18);
  else
    v19 = 0;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 6, v19, 0);
  if (v8)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 22, v8);
  if (v9)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 12, v9);
  if (v10)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 10, v10);
  v20 = (unsigned __int16 *)((char *)a2 - *a2);
  v22 = *v20 >= 0x15u && (v21 = v20[10]) != 0 && *((unsigned __int8 *)a2 + v21) != 0;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 20, v22, 0);
  v23 = 0;
  v24 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v24 >= 0x13u)
  {
    v25 = v24[9];
    if (v25)
    {
      v23 = *((unsigned __int8 *)a2 + v25);
      if (v23 >= 3)
        abort();
    }
    else
    {
      v23 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 18, v23, 0);
  v26 = 0;
  v27 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v27 >= 0x11u)
  {
    v28 = v27[8];
    if (v28)
      v26 = *((unsigned __int8 *)a2 + v28) != 0;
    else
      v26 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 16, v26, 0);
  v29 = 0;
  v30 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v30 >= 0xFu)
  {
    v31 = v30[7];
    if (v31)
      v29 = *((unsigned __int8 *)a2 + v31) != 0;
    else
      v29 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 14, v29, 0);
  v32 = 0;
  v33 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v33 >= 5u)
  {
    v34 = v33[2];
    if (v34)
      v32 = *((unsigned __int8 *)a2 + v34) != 0;
    else
      v32 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 4, v32, 0);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v16 - (unsigned __int16)v15 + (unsigned __int16)v14);
}

uint64_t MTLCompilerObject::AIRNTGetTileFunctionScript(uint64_t a1, int *a2, uint64_t a3, int *a4)
{
  int v6;
  unsigned __int16 *v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;

  if (!a4)
    return 0;
  v6 = Air::CloneTileFunctionDescriptor<Air::TileFunctionDescriptor>(a3, a4);
  v7 = (unsigned __int16 *)((char *)a2 - *a2);
  v8 = *v7;
  if (v8 >= 5 && v7[2])
    v9 = (uint64_t *)((char *)a2 + v7[2]);
  else
    v9 = 0;
  if (v8 >= 7 && (v10 = v7[3]) != 0)
    v11 = *((unsigned __int8 *)a2 + v10);
  else
    v11 = 0;
  *(_BYTE *)(a3 + 70) = 1;
  v12 = *(_DWORD *)(a3 + 32) - *(_DWORD *)(a3 + 48) + *(_DWORD *)(a3 + 40);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a3, 10, v6);
  flatbuffers::FlatBufferBuilder::AddStruct<Air::Version>((char *)a3, 4, v9);
  v13 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>(a3, 4);
  flatbuffers::FlatBufferBuilder::TrackField((char *)a3, 8, v13);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a3, 6, v11, 0);
  v14 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a3, v12);
  flatbuffers::FlatBufferBuilder::Finish((flatbuffers::FlatBufferBuilder *)a3, v14, "AIRF", 0);
  return *(_QWORD *)(a3 + 48) + **(unsigned int **)(a3 + 48);
}

uint64_t Air::CloneTileFunctionDescriptor<Air::TileFunctionDescriptor>(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int16 *v21;
  uint64_t v22;
  unsigned __int16 *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int16 *v26;
  uint64_t v27;
  unsigned int v28;
  _BOOL4 v29;
  unsigned __int16 *v30;
  uint64_t v31;
  _BOOL4 v32;
  unsigned __int16 *v33;
  uint64_t v34;
  unsigned int *v36;

  v4 = *a2;
  v5 = -v4;
  v6 = (unsigned __int16 *)((char *)a2 - v4);
  if (*v6 >= 0x17u && (v7 = v6[11]) != 0)
  {
    v8 = Air::CloneLinkedFunctions<Air::LinkedFunctions>(a1, (int *)((char *)a2 + v7 + *(unsigned int *)((char *)a2 + v7)));
    v5 = -(uint64_t)*a2;
  }
  else
  {
    v8 = 0;
  }
  if (*(unsigned __int16 *)((char *)a2 + v5) >= 0x11u && *(_WORD *)((char *)a2 + v5 + 16))
  {
    v36 = (unsigned int *)((char *)a2
                         + *(unsigned __int16 *)((char *)a2 + v5 + 16)
                         + *(unsigned int *)((char *)a2 + *(unsigned __int16 *)((char *)a2 + v5 + 16)));
    v9 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Air24PipelineBufferDescriptorEEEZNS3_27CloneTileFunctionDescriptorINS3_22TileFunctionDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_37TileFunctionDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *v36, &v36, a1);
    v5 = -(uint64_t)*a2;
  }
  else
  {
    v9 = 0;
  }
  if (*(unsigned __int16 *)((char *)a2 + v5) >= 0xFu && *(_WORD *)((char *)a2 + v5 + 14))
  {
    v36 = (unsigned int *)((char *)a2
                         + *(unsigned __int16 *)((char *)a2 + v5 + 14)
                         + *(unsigned int *)((char *)a2 + *(unsigned __int16 *)((char *)a2 + v5 + 14)));
    v10 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Air29TileColorAttachmentDescriptorEEEZNS3_27CloneTileFunctionDescriptorINS3_22TileFunctionDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_37TileFunctionDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE0_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *v36, &v36, a1);
    v5 = -(uint64_t)*a2;
  }
  else
  {
    v10 = 0;
  }
  *(_BYTE *)(a1 + 70) = 1;
  v11 = (unsigned __int16 *)((char *)a2 + v5);
  if (*v11 >= 0xDu && (v12 = v11[6]) != 0)
    v13 = *(_QWORD *)((char *)a2 + v12);
  else
    v13 = 0;
  v14 = *(_QWORD *)(a1 + 40);
  v15 = *(_QWORD *)(a1 + 48);
  v16 = *(_QWORD *)(a1 + 32);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 12, v13, 0);
  v17 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v17 >= 0xBu && (v18 = v17[5]) != 0)
    v19 = *(_QWORD *)((char *)a2 + v18);
  else
    v19 = 1;
  v20 = 1;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 10, v19, 1);
  v21 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v21 >= 9u)
  {
    v22 = v21[4];
    if (v22)
      v20 = *(_QWORD *)((char *)a2 + v22);
    else
      v20 = 1;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 8, v20, 1);
  v23 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v23 >= 7u && (v24 = v23[3]) != 0)
    v25 = *(_QWORD *)((char *)a2 + v24);
  else
    v25 = 0;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 6, v25, 0);
  if (v8)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 22, v8);
  if (v9)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 16, v9);
  if (v10)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 14, v10);
  v26 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v26 >= 0x15u && (v27 = v26[10]) != 0)
  {
    v28 = *((unsigned __int8 *)a2 + v27);
    if (v28 >= 3)
      abort();
  }
  else
  {
    v28 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 20, v28, 0);
  v29 = 0;
  v30 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v30 >= 0x13u)
  {
    v31 = v30[9];
    if (v31)
      v29 = *((unsigned __int8 *)a2 + v31) != 0;
    else
      v29 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 18, v29, 0);
  v32 = 0;
  v33 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v33 >= 5u)
  {
    v34 = v33[2];
    if (v34)
      v32 = *((unsigned __int8 *)a2 + v34) != 0;
    else
      v32 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 4, v32, 0);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v16 - (unsigned __int16)v15 + (unsigned __int16)v14);
}

uint64_t MTLCompilerObject::AIRNTGetObjectFunctionScript(uint64_t a1, int *a2, uint64_t a3, int *a4)
{
  int v6;
  unsigned __int16 *v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;

  if (!a4)
    return 0;
  v6 = Air::CloneObjectFunctionDescriptor<Air::ObjectFunctionDescriptor>(a3, a4);
  v7 = (unsigned __int16 *)((char *)a2 - *a2);
  v8 = *v7;
  if (v8 >= 5 && v7[2])
    v9 = (uint64_t *)((char *)a2 + v7[2]);
  else
    v9 = 0;
  if (v8 >= 7 && (v10 = v7[3]) != 0)
    v11 = *((unsigned __int8 *)a2 + v10);
  else
    v11 = 0;
  *(_BYTE *)(a3 + 70) = 1;
  v12 = *(_DWORD *)(a3 + 32) - *(_DWORD *)(a3 + 48) + *(_DWORD *)(a3 + 40);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a3, 10, v6);
  flatbuffers::FlatBufferBuilder::AddStruct<Air::Version>((char *)a3, 4, v9);
  v13 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>(a3, 7);
  flatbuffers::FlatBufferBuilder::TrackField((char *)a3, 8, v13);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a3, 6, v11, 0);
  v14 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a3, v12);
  flatbuffers::FlatBufferBuilder::Finish((flatbuffers::FlatBufferBuilder *)a3, v14, "AIRF", 0);
  return *(_QWORD *)(a3 + 48) + **(unsigned int **)(a3 + 48);
}

uint64_t Air::CloneObjectFunctionDescriptor<Air::ObjectFunctionDescriptor>(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  unsigned __int16 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int16 *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int16 *v26;
  uint64_t v27;
  unsigned __int16 *v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  unsigned __int16 *v32;
  uint64_t v33;
  _BOOL4 v34;
  unsigned __int16 *v35;
  uint64_t v36;
  _BOOL4 v37;
  unsigned __int16 *v38;
  uint64_t v39;
  unsigned int v40;
  unsigned __int16 *v41;
  uint64_t v42;
  _BOOL4 v43;
  unsigned __int16 *v44;
  uint64_t v45;
  unsigned int *v47;

  v4 = *a2;
  v5 = -v4;
  v6 = (unsigned __int16 *)((char *)a2 - v4);
  if (*v6 >= 0x1Du && (v7 = v6[14]) != 0)
  {
    v8 = Air::CloneLinkedFunctions<Air::LinkedFunctions>(a1, (int *)((char *)a2 + v7 + *(unsigned int *)((char *)a2 + v7)));
    v5 = -(uint64_t)*a2;
  }
  else
  {
    v8 = 0;
  }
  if (*(unsigned __int16 *)((char *)a2 + v5) >= 0x13u && *(_WORD *)((char *)a2 + v5 + 18))
  {
    v47 = (unsigned int *)((char *)a2
                         + *(unsigned __int16 *)((char *)a2 + v5 + 18)
                         + *(unsigned int *)((char *)a2 + *(unsigned __int16 *)((char *)a2 + v5 + 18)));
    v9 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Air24PipelineBufferDescriptorEEEZNS3_29CloneObjectFunctionDescriptorINS3_24ObjectFunctionDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_39ObjectFunctionDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *v47, &v47, a1);
    v5 = -(uint64_t)*a2;
  }
  else
  {
    v9 = 0;
  }
  v10 = 1;
  *(_BYTE *)(a1 + 70) = 1;
  v11 = (unsigned __int16 *)((char *)a2 + v5);
  if (*v11 >= 0xFu)
  {
    v12 = v11[7];
    if (v12)
      v10 = *(_QWORD *)((char *)a2 + v12);
    else
      v10 = 1;
  }
  v13 = *(_QWORD *)(a1 + 40);
  v14 = *(_QWORD *)(a1 + 48);
  v15 = *(_QWORD *)(a1 + 32);
  v16 = 1;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 14, v10, 1);
  v17 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v17 >= 0xDu)
  {
    v18 = v17[6];
    if (v18)
      v16 = *(_QWORD *)((char *)a2 + v18);
    else
      v16 = 1;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 12, v16, 1);
  v19 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v19 >= 0xBu && (v20 = v19[5]) != 0)
    v21 = *(_QWORD *)((char *)a2 + v20);
  else
    v21 = 0;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 10, v21, 0);
  v22 = 0;
  v23 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v23 >= 9u)
  {
    v24 = v23[4];
    if (v24)
      v22 = *(_QWORD *)((char *)a2 + v24);
    else
      v22 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 8, v22, 0);
  v25 = 0;
  v26 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v26 >= 7u)
  {
    v27 = v26[3];
    if (v27)
      v25 = *(_QWORD *)((char *)a2 + v27);
    else
      v25 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 6, v25, 0);
  if (v8)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 28, v8);
  if (v9)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 18, v9);
  v28 = (unsigned __int16 *)((char *)a2 - *a2);
  v30 = *v28 >= 0x1Bu && (v29 = v28[13]) != 0 && *((unsigned __int8 *)a2 + v29) != 0;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 26, v30, 0);
  v31 = 0;
  v32 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v32 >= 0x19u)
  {
    v33 = v32[12];
    if (v33)
    {
      v31 = *((unsigned __int8 *)a2 + v33);
      if (v31 >= 3)
LABEL_53:
        abort();
    }
    else
    {
      v31 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 24, v31, 0);
  v34 = 0;
  v35 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v35 >= 0x17u)
  {
    v36 = v35[11];
    if (v36)
      v34 = *((unsigned __int8 *)a2 + v36) != 0;
    else
      v34 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 22, v34, 0);
  v37 = 0;
  v38 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v38 >= 0x15u)
  {
    v39 = v38[10];
    if (v39)
      v37 = *((unsigned __int8 *)a2 + v39) != 0;
    else
      v37 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 20, v37, 0);
  v40 = 0;
  v41 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v41 >= 0x11u)
  {
    v42 = v41[8];
    if (v42)
    {
      v40 = *((unsigned __int8 *)a2 + v42);
      if (v40 >= 2)
        goto LABEL_53;
    }
    else
    {
      v40 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 16, v40, 0);
  v43 = 0;
  v44 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v44 >= 5u)
  {
    v45 = v44[2];
    if (v45)
      v43 = *((unsigned __int8 *)a2 + v45) != 0;
    else
      v43 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 4, v43, 0);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v15 - (unsigned __int16)v14 + (unsigned __int16)v13);
}

uint64_t MTLCompilerObject::AIRNTGetMeshFunctionScript(uint64_t a1, int *a2, uint64_t a3, int *a4)
{
  int v6;
  unsigned __int16 *v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;

  if (!a4)
    return 0;
  v6 = Air::CloneMeshFunctionDescriptor<Air::MeshFunctionDescriptor>(a3, a4);
  v7 = (unsigned __int16 *)((char *)a2 - *a2);
  v8 = *v7;
  if (v8 >= 5 && v7[2])
    v9 = (uint64_t *)((char *)a2 + v7[2]);
  else
    v9 = 0;
  if (v8 >= 7 && (v10 = v7[3]) != 0)
    v11 = *((unsigned __int8 *)a2 + v10);
  else
    v11 = 0;
  *(_BYTE *)(a3 + 70) = 1;
  v12 = *(_DWORD *)(a3 + 32) - *(_DWORD *)(a3 + 48) + *(_DWORD *)(a3 + 40);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a3, 10, v6);
  flatbuffers::FlatBufferBuilder::AddStruct<Air::Version>((char *)a3, 4, v9);
  v13 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>(a3, 8);
  flatbuffers::FlatBufferBuilder::TrackField((char *)a3, 8, v13);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a3, 6, v11, 0);
  v14 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a3, v12);
  flatbuffers::FlatBufferBuilder::Finish((flatbuffers::FlatBufferBuilder *)a3, v14, "AIRF", 0);
  return *(_QWORD *)(a3 + 48) + **(unsigned int **)(a3 + 48);
}

uint64_t Air::CloneMeshFunctionDescriptor<Air::MeshFunctionDescriptor>(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  unsigned __int16 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int16 *v23;
  uint64_t v24;
  unsigned __int16 *v25;
  uint64_t v26;
  int v27;
  unsigned __int16 *v28;
  uint64_t v29;
  int v30;
  unsigned __int16 *v31;
  uint64_t v32;
  unsigned int v33;
  _BOOL4 v34;
  unsigned __int16 *v35;
  uint64_t v36;
  _BOOL4 v37;
  unsigned __int16 *v38;
  uint64_t v39;
  unsigned int v40;
  unsigned __int16 *v41;
  uint64_t v42;
  unsigned __int16 *v43;
  uint64_t v44;
  int v45;
  unsigned __int16 *v46;
  uint64_t v47;
  int v48;
  unsigned int *v50;

  v4 = *a2;
  v5 = -v4;
  v6 = (unsigned __int16 *)((char *)a2 - v4);
  if (*v6 >= 0x1Fu && (v7 = v6[15]) != 0)
  {
    v8 = Air::CloneLinkedFunctions<Air::LinkedFunctions>(a1, (int *)((char *)a2 + v7 + *(unsigned int *)((char *)a2 + v7)));
    v5 = -(uint64_t)*a2;
  }
  else
  {
    v8 = 0;
  }
  if (*(unsigned __int16 *)((char *)a2 + v5) >= 0x13u && *(_WORD *)((char *)a2 + v5 + 18))
  {
    v50 = (unsigned int *)((char *)a2
                         + *(unsigned __int16 *)((char *)a2 + v5 + 18)
                         + *(unsigned int *)((char *)a2 + *(unsigned __int16 *)((char *)a2 + v5 + 18)));
    v9 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Air24PipelineBufferDescriptorEEEZNS3_27CloneMeshFunctionDescriptorINS3_22MeshFunctionDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_37MeshFunctionDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *v50, &v50, a1);
    v5 = -(uint64_t)*a2;
  }
  else
  {
    v9 = 0;
  }
  v10 = 1;
  *(_BYTE *)(a1 + 70) = 1;
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 32);
  v14 = (unsigned __int16 *)((char *)a2 + v5);
  if (*v14 >= 0xFu)
  {
    v15 = v14[7];
    if (v15)
      v10 = *(_QWORD *)((char *)a2 + v15);
    else
      v10 = 1;
  }
  v16 = 1;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 14, v10, 1);
  v17 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v17 >= 0xBu)
  {
    v18 = v17[5];
    if (v18)
      v16 = *(_QWORD *)((char *)a2 + v18);
    else
      v16 = 1;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 10, v16, 1);
  v19 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v19 >= 9u && (v20 = v19[4]) != 0)
    v21 = *(_QWORD *)((char *)a2 + v20);
  else
    v21 = 0;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 8, v21, 0);
  v22 = 0;
  v23 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v23 >= 7u)
  {
    v24 = v23[3];
    if (v24)
      v22 = *(_QWORD *)((char *)a2 + v24);
    else
      v22 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 6, v22, 0);
  if (v8)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 30, v8);
  if (v9)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 18, v9);
  v25 = (unsigned __int16 *)((char *)a2 - *a2);
  v27 = *v25 >= 0x1Du && (v26 = v25[14]) != 0 && *((unsigned __int8 *)a2 + v26) != 0;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 28, v27, 0);
  v28 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v28 >= 0x1Bu && (v29 = v28[13]) != 0)
    v30 = *((unsigned __int8 *)a2 + v29);
  else
    v30 = 255;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 26, v30, 255);
  v31 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v31 >= 0x19u && (v32 = v31[12]) != 0)
  {
    v33 = *((unsigned __int8 *)a2 + v32);
    if (v33 >= 3)
LABEL_53:
      abort();
  }
  else
  {
    v33 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 24, v33, 0);
  v34 = 0;
  v35 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v35 >= 0x17u)
  {
    v36 = v35[11];
    if (v36)
      v34 = *((unsigned __int8 *)a2 + v36) != 0;
    else
      v34 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 22, v34, 0);
  v37 = 0;
  v38 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v38 >= 0x15u)
  {
    v39 = v38[10];
    if (v39)
      v37 = *((unsigned __int8 *)a2 + v39) != 0;
    else
      v37 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 20, v37, 0);
  v40 = 0;
  v41 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v41 >= 0x11u)
  {
    v42 = v41[8];
    if (v42)
    {
      v40 = *((unsigned __int8 *)a2 + v42);
      if (v40 >= 2)
        goto LABEL_53;
    }
    else
    {
      v40 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 16, v40, 0);
  v43 = (unsigned __int16 *)((char *)a2 - *a2);
  v45 = *v43 < 0xDu || (v44 = v43[6]) == 0 || *((unsigned __int8 *)a2 + v44) != 0;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 12, v45, 1);
  v46 = (unsigned __int16 *)((char *)a2 - *a2);
  v48 = *v46 >= 5u && (v47 = v46[2]) != 0 && *((unsigned __int8 *)a2 + v47) != 0;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 4, v48, 0);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v13 - (unsigned __int16)v12 + (unsigned __int16)v11);
}

void MTLCompilerObject::AIRNTGetFunctionScriptFromPipeline(const Air::PipelineScript *a1@<X1>, MTLFunctionType a2@<X2>, uint64_t a3@<X8>)
{
  int *v6;
  unsigned __int16 *v7;
  uint64_t v8;
  int *v9;
  int *v10;
  unsigned __int16 *v11;
  unsigned int v12;
  int *v13;
  int *v14;
  unsigned __int16 *v15;
  uint64_t v16;
  int *v17;
  int *v18;
  unsigned __int16 *v19;
  uint64_t v20;
  int *v21;
  int *v22;
  unsigned __int16 *v23;
  uint64_t v24;
  int *v25;
  int *v26;
  unsigned __int16 *v27;
  unsigned int v28;
  int *v29;
  unsigned __int16 *v30;
  int v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;

  v35 = 0;
  v36 = 0;
  v37 = xmmword_24105AF30;
  v38 = 0u;
  v39 = 0u;
  v40 = 0;
  v41 = 1;
  v42 = 256;
  v43 = 0;
  switch(a2)
  {
    case MTLFunctionTypeVertex:
      v6 = (int *)Air::PipelineScript::pipeline_as_render(a1);
      v7 = (unsigned __int16 *)((char *)v6 - *v6);
      if (*v7 >= 9u && (v8 = v7[4]) != 0)
        v9 = (int *)((char *)v6 + v8 + *(unsigned int *)((char *)v6 + v8));
      else
        v9 = 0;
      MTLCompilerObject::AIRNTGetVertexFunctionScript((uint64_t)v6, (int *)a1, (uint64_t)&v35, v9);
      goto LABEL_42;
    case MTLFunctionTypeFragment:
      if (Air::PipelineScript::pipeline_as_render(a1))
      {
        v10 = (int *)Air::PipelineScript::pipeline_as_render(a1);
        v11 = (unsigned __int16 *)((char *)v10 - *v10);
        if (*v11 >= 0xBu)
        {
          v12 = v11[5];
          if (v12)
          {
LABEL_8:
            v13 = (int *)((char *)v10 + v12 + *(int *)((char *)v10 + v12));
LABEL_41:
            MTLCompilerObject::AIRNTGetFragmentFunctionScript((uint64_t)v10, (int *)a1, (uint64_t)&v35, v13);
            goto LABEL_42;
          }
        }
LABEL_40:
        v13 = 0;
        goto LABEL_41;
      }
      if (Air::PipelineScript::pipeline_as_tile_render(a1))
        goto LABEL_32;
      if (Air::PipelineScript::pipeline_as_mesh_render(a1))
      {
        v10 = (int *)Air::PipelineScript::pipeline_as_mesh_render(a1);
        v30 = (unsigned __int16 *)((char *)v10 - *v10);
        if (*v30 >= 0xFu)
        {
          v12 = v30[7];
          if (v12)
            goto LABEL_8;
        }
        goto LABEL_40;
      }
LABEL_42:
      v31 = v36;
      v32 = v38;
      v33 = v39;
      v34 = (v38 + DWORD2(v38) - v39);
      *(_QWORD *)a3 = v35;
      *(_BYTE *)(a3 + 8) = v31;
      *(_QWORD *)(a3 + 16) = *((_QWORD *)&v32 + 1);
      *(_QWORD *)(a3 + 24) = v32;
      *(_QWORD *)(a3 + 32) = v33;
      *(_QWORD *)(a3 + 40) = v34;
      if (v31)
      {
        v35 = 0;
        v36 = 0;
      }
      v38 = 0u;
      v39 = 0u;
      flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)&v35);
      return;
    case MTLFunctionTypeKernel:
      if (Air::PipelineScript::pipeline_as_compute(a1))
      {
        v14 = (int *)Air::PipelineScript::pipeline_as_compute(a1);
        v15 = (unsigned __int16 *)((char *)v14 - *v14);
        if (*v15 >= 7u && (v16 = v15[3]) != 0)
          v17 = (int *)((char *)v14 + v16 + *(unsigned int *)((char *)v14 + v16));
        else
          v17 = 0;
        MTLCompilerObject::AIRNTGetComputeFunctionScript((uint64_t)v14, (int *)a1, (uint64_t)&v35, v17);
      }
      else if (Air::PipelineScript::pipeline_as_tile_render(a1))
      {
LABEL_32:
        v26 = (int *)Air::PipelineScript::pipeline_as_tile_render(a1);
        v27 = (unsigned __int16 *)((char *)v26 - *v26);
        if (*v27 >= 7u && (v28 = v27[3]) != 0)
          v29 = (int *)((char *)v26 + v28 + *(int *)((char *)v26 + v28));
        else
          v29 = 0;
        MTLCompilerObject::AIRNTGetTileFunctionScript((uint64_t)v26, (int *)a1, (uint64_t)&v35, v29);
      }
      goto LABEL_42;
    case MTLFunctionTypeMesh:
      if (Air::PipelineScript::pipeline_as_mesh_render(a1))
      {
        v18 = (int *)Air::PipelineScript::pipeline_as_mesh_render(a1);
        v19 = (unsigned __int16 *)((char *)v18 - *v18);
        if (*v19 >= 0xDu && (v20 = v19[6]) != 0)
          v21 = (int *)((char *)v18 + v20 + *(unsigned int *)((char *)v18 + v20));
        else
          v21 = 0;
        MTLCompilerObject::AIRNTGetMeshFunctionScript((uint64_t)v18, (int *)a1, (uint64_t)&v35, v21);
      }
      goto LABEL_42;
    case MTLFunctionTypeObject:
      if (Air::PipelineScript::pipeline_as_mesh_render(a1))
      {
        v22 = (int *)Air::PipelineScript::pipeline_as_mesh_render(a1);
        v23 = (unsigned __int16 *)((char *)v22 - *v22);
        if (*v23 >= 0xBu && (v24 = v23[5]) != 0)
          v25 = (int *)((char *)v22 + v24 + *(unsigned int *)((char *)v22 + v24));
        else
          v25 = 0;
        MTLCompilerObject::AIRNTGetObjectFunctionScript((uint64_t)v22, (int *)a1, (uint64_t)&v35, v25);
      }
      goto LABEL_42;
    default:
      goto LABEL_42;
  }
}

void sub_2410348E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)&a9);
  _Unwind_Resume(a1);
}

uint64_t Air::PipelineScript::pipeline_as_compute(Air::PipelineScript *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 9 && v1[4] && (v2 >= 0xB ? (v3 = *((_BYTE *)this + v1[4]) == 2) : (v3 = 0), v3 && (v4 = v1[5]) != 0))
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  else
    return 0;
}

uint64_t Air::PipelineScript::pipeline_as_tile_render(Air::PipelineScript *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 9 && v1[4] && (v2 >= 0xB ? (v3 = *((_BYTE *)this + v1[4]) == 3) : (v3 = 0), v3 && (v4 = v1[5]) != 0))
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  else
    return 0;
}

uint64_t Air::PipelineScript::pipeline_as_render(Air::PipelineScript *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 9 && v1[4] && (v2 >= 0xB ? (v3 = *((_BYTE *)this + v1[4]) == 1) : (v3 = 0), v3 && (v4 = v1[5]) != 0))
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  else
    return 0;
}

uint64_t Air::PipelineScript::pipeline_as_mesh_render(Air::PipelineScript *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 9 && v1[4] && (v2 >= 0xB ? (v3 = *((_BYTE *)this + v1[4]) == 4) : (v3 = 0), v3 && (v4 = v1[5]) != 0))
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  else
    return 0;
}

uint64_t MTLCompilerPluginInterface::compilerBuildRequest(uint64_t a1, int a2, signed int a3, uint64_t a4, uint64_t a5, uint64_t a6, llvm::Module *a7, _QWORD *a8)
{
  signed int v13;
  uint64_t v14;
  uint64_t (*v15)(_QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t (*v17)(_QWORD, uint64_t, uint64_t, uint64_t, llvm::Module *, _QWORD *, _QWORD *, _QWORD *, _QWORD *, _QWORD *, _QWORD *, _QWORD *);
  const char *v19;
  uint64_t v20;

  if (a2)
  {
    if (a3 == 32023)
      v13 = 0;
    else
      v13 = a3;
    getSerializedModule(v13, &v20);
    v14 = v20;
    if (*(_QWORD *)(v20 + 16) == *(_QWORD *)(v20 + 8))
    {
      v19 = "Invalid serialized bitcode";
    }
    else
    {
      v15 = *(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(a1 + 80);
      if (v15)
      {
        *(_BYTE *)(a1 + 138) = 1;
        v16 = v15(*(_QWORD *)(a1 + 112), a4, a5, a6);
LABEL_14:
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
        return v16;
      }
      v19 = "Driver does not support MTLCompilerBuildRequestWithSerializedBitcode, but MTLCompilerOptionCompilerPluginReq"
            "uiresSerializedBitcode was set.";
    }
    a8[2] = v19;
    v16 = 1;
    goto LABEL_14;
  }
  *(_BYTE *)(a1 + 138) = 1;
  v17 = *(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, llvm::Module *, _QWORD *, _QWORD *, _QWORD *, _QWORD *, _QWORD *, _QWORD *, _QWORD *))(a1 + 32);
  if (v17)
    return v17(*(_QWORD *)(a1 + 112), a4, a5, a6, a7, a8, a8 + 1, a8 + 4, a8 + 5, a8 + 6, a8 + 7, a8 + 2);
  a8[5] = 0;
  a8[7] = 0;
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, llvm::Module *, _QWORD *, _QWORD *, _QWORD *))(a1 + 24))(*(_QWORD *)(a1 + 112), a4, a5, a7, a8, a8 + 1, a8 + 2);
}

void sub_241034BB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void MTLCompilerObject::readVisibleFunctions(uint64_t a1, unsigned int *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int *v8;
  char *v9;
  uint64_t v10;
  unsigned int *v11;
  char *v12;
  _OWORD *v13;

  v7 = a2[36];
  if ((_DWORD)v7)
  {
    v8 = (unsigned int *)((char *)a2 + a2[37]);
    do
    {
      v9 = (char *)malloc_type_malloc(0x78uLL, 0x1050040A24A0AE1uLL);
      MTLCompilerObject::getReadParametersFromRequest((uint64_t)v9, (uint64_t)v9, (uint64_t)a2, a3, v8, (uint64_t)a2);
      v13 = v9 + 84;
      std::__hash_table<std::__hash_value_type<MTLUINT256_t,ReadModuleParameters *>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,ReadModuleParameters *>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,ReadModuleParameters *>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,ReadModuleParameters *>>>::__emplace_unique_key_args<MTLUINT256_t,std::piecewise_construct_t const&,std::tuple<MTLUINT256_t const&>,std::tuple<>>(a4, (unint64_t *)(v9 + 84), (uint64_t)&std::piecewise_construct, &v13)[6] = v9;
      v8 += 14;
      --v7;
    }
    while (v7);
  }
  v10 = a2[40];
  if ((_DWORD)v10)
  {
    v11 = (unsigned int *)((char *)a2 + a2[41]);
    do
    {
      v12 = (char *)malloc_type_malloc(0x78uLL, 0x1050040A24A0AE1uLL);
      MTLCompilerObject::getReadParametersFromRequest((uint64_t)v12, (uint64_t)v12, (uint64_t)a2, a3, v11, (uint64_t)a2);
      v13 = v12 + 84;
      std::__hash_table<std::__hash_value_type<MTLUINT256_t,ReadModuleParameters *>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,ReadModuleParameters *>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,ReadModuleParameters *>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,ReadModuleParameters *>>>::__emplace_unique_key_args<MTLUINT256_t,std::piecewise_construct_t const&,std::tuple<MTLUINT256_t const&>,std::tuple<>>(a4, (unint64_t *)(v12 + 84), (uint64_t)&std::piecewise_construct, &v13)[6] = v12;
      v11 += 14;
      --v10;
    }
    while (v10);
  }
}

uint64_t getRequiredStagesPresentMask(const Air::PipelineScript *this)
{
  unsigned __int16 *v1;
  uint64_t v2;
  int v4;
  int *v5;
  unsigned __int16 *v6;
  uint64_t v7;
  char *v8;
  int *v10;
  unsigned __int16 *v11;
  uint64_t v12;
  char *v13;
  int *v14;
  unsigned __int16 *v15;
  int v16;
  int *v17;
  unsigned __int16 *v18;
  _BOOL4 v19;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v1 < 9u)
    return 0;
  v2 = v1[4];
  if (!v2)
    return 0;
  v4 = *((unsigned __int8 *)this + v2);
  if ((v4 - 2) < 2)
    return 2;
  if (v4 != 1)
  {
    if (v4 == 4)
    {
      v5 = (int *)Air::PipelineScript::pipeline_as_mesh_render(this);
      v6 = (unsigned __int16 *)((char *)v5 - *v5);
      if (*v6 >= 9u && (v7 = v6[4]) != 0)
        v8 = (char *)v5 + v7 + *(unsigned int *)((char *)v5 + v7);
      else
        v8 = 0;
      v14 = (int *)Air::PipelineScript::pipeline_as_mesh_render(this);
      v15 = (unsigned __int16 *)((char *)v14 - *v14);
      v16 = 2;
      if (*v15 >= 5u)
      {
        if (v15[2])
          v16 = 6;
        else
          v16 = 2;
      }
      return v16 | (v8 != 0);
    }
    return 0;
  }
  v10 = (int *)Air::PipelineScript::pipeline_as_render(this);
  v11 = (unsigned __int16 *)((char *)v10 - *v10);
  if (*v11 >= 5u && (v12 = v11[2]) != 0)
    v13 = (char *)v10 + v12 + *(unsigned int *)((char *)v10 + v12);
  else
    v13 = 0;
  v17 = (int *)Air::PipelineScript::pipeline_as_render(this);
  v18 = (unsigned __int16 *)((char *)v17 - *v17);
  v19 = *v18 >= 7u && v18[3] != 0;
  return v19 | (2 * (v13 != 0));
}

void MTLCompilerObject::backendCompileExecutableRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Module *ModuleFromBinaryRequest;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t i;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  int v22;
  void *__p[2];
  uint64_t DiagnosticContext;
  void *v25;
  _BYTE *v26;
  uint64_t v27;
  _OWORD v28[4];
  uint64_t v29;
  void *v30[4];
  __int128 v31;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint8_t buf[4];
  _BYTE v44[20];
  __int128 v45;
  _BYTE v46[26];
  __int128 v47;
  _BYTE v48[28];
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v31 = 0u;
  v32 = 0;
  memset(v30, 0, 24);
  v30[3] = (void *)-1;
  v33 = 0;
  v41 = 0;
  v42 = 0;
  v40 = 0;
  v29 = 0;
  memset(v28, 0, sizeof(v28));
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v22 = 1;
  MTLBuildRequestTypeToString(&v22, __p);
  if (logCompileBegin(std::string const&,unsigned long long &,char const*,std::string const&)::onceToken != -1)
    dispatch_once(&logCompileBegin(std::string const&,unsigned long long &,char const*,std::string const&)::onceToken, &__block_literal_global_165);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    v4 = a1 + 136;
    if (*(char *)(a1 + 159) < 0)
      v4 = *(_QWORD *)(a1 + 136);
    v5 = __p;
    if (DiagnosticContext < 0)
      v5 = (void **)__p[0];
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)v44 = v4;
    *(_WORD *)&v44[8] = 2082;
    *(_QWORD *)&v44[10] = v5;
    *(_WORD *)&v44[18] = 2080;
    *(_QWORD *)&v45 = "pipeline";
    _os_log_impl(&dword_240FA3000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "Compilation BEGIN (ParentProcessName=%{public}s) Build request: %{public}s - %s", buf, 0x20u);
  }
  v6 = mach_absolute_time();
  if (SHIBYTE(DiagnosticContext) < 0)
    operator delete(__p[0]);
  MEMORY[0x24268CA5C](&v22);
  __p[0] = &v22;
  DiagnosticContext = llvm::LLVMContext::getDiagnosticContext((llvm::LLVMContext *)&v22);
  __p[1] = (void *)llvm::LLVMContext::getDiagnosticHandlerCallBack((llvm::LLVMContext *)&v22);
  v7 = llvm::LLVMContext::setDiagnosticHandlerCallBack();
  *(_WORD *)buf = 0;
  *(_OWORD *)&v44[4] = 0u;
  v45 = 0u;
  memset(v46, 0, sizeof(v46));
  v47 = 0u;
  memset(v48, 0, sizeof(v48));
  MTLCompilerObject::getReadParametersFromRequest(v7, (uint64_t)buf, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), (unsigned int *)(*(_QWORD *)(a2 + 32) + 88), *(_QWORD *)(a2 + 32));
  ModuleFromBinaryRequest = MTLCompilerObject::readModuleFromBinaryRequest(a1, (unsigned __int16 *)buf, (llvm::LLVMContext *)&v22, (MTLFunctionType *)(a2 + 40), (void **)&v38, (unint64_t *)&v38 + 1, 1);
  *(_QWORD *)(a2 + 48) = ModuleFromBinaryRequest;
  if (!ModuleFromBinaryRequest)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a2 + 24) + 16))(*(_QWORD *)(a2 + 24), 2 * (*(_QWORD *)(a1 + 120) != 0), 0, 0);
LABEL_16:
    if ((_QWORD)v38)
      free((void *)v38);
    goto LABEL_18;
  }
  if ((MTLCompilerObject::runFrameworkPasses((MTLCompilerObject *)a1, (uint64_t *)a2, v30, (llvm::LLVMContext *)&v22, (uint64_t)&v25) & 1) == 0)goto LABEL_16;
  MTLCompilerObject::backendCompileModule(a1, (uint64_t *)a2, (uint64_t)v28, v9, (uint64_t)&v25);
  v10 = *(_QWORD *)(a2 + 32);
  if ((*(_BYTE *)(v10 + 5) & 2) != 0)
  {
    if ((v26 - (_BYTE *)v25) >> 4 == -2)
      v11 = 0;
    else
      v11 = 12 * (((v26 - (_BYTE *)v25) >> 4) + 2) + 4;
  }
  else
  {
    v11 = 0;
  }
  v13 = 0;
  v21 = 0;
  if ((*(_BYTE *)(v10 + 2) & 0x80) != 0)
  {
    v13 = MTLGPUArchiverFromId();
    v20 = v13;
    if (!v13
      || !MTLCompilerObject::storeToBinaryArchive(a1, *(unsigned int **)(a2 + 32), *(_QWORD *)(a2 + 8), (uint64_t)buf, (uint64_t)v28, *(_QWORD *)(a2 + 40), v30, (uint64_t)&v20, (char **)&v21))
    {
      (*(void (**)(void))(*(_QWORD *)(a2 + 24) + 16))();
      if ((_QWORD)v38)
        free((void *)v38);
      free(v21);
      MTLGPUArchiverDestroy();
LABEL_18:
      v12 = 1;
      goto LABEL_31;
    }
  }
  v14 = MTLCompilerObject::serializeBackendCompilationOutput(a1, *(_DWORD *)(a2 + 16), a2, (uint64_t *)v30, (uint64_t)v28, (uint64_t)&v25, v6, v11);
  if (v13)
  {
    if (v14 && !MTLGPUArchiverFlush())
    {
      (*(void (**)(void))(*(_QWORD *)(a2 + 24) + 16))();
      free(v21);
    }
    MTLGPUArchiverDestroy();
  }
  v12 = 0;
LABEL_31:
  ScopedDiagnosticHandler::~ScopedDiagnosticHandler((ScopedDiagnosticHandler *)__p);
  llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)&v22);
  if (!v12 && (_QWORD)v38)
  {
    free((void *)v38);
    v38 = 0uLL;
  }
  if (v25)
  {
    v26 = v25;
    operator delete(v25);
  }
  for (i = 22; i != 19; --i)
    std::unique_ptr<void,LLVMMemoryBufferDeleter>::reset[abi:ne180100]((uint64_t *)&v30[i], 0);
  v16 = (void *)v39;
  *(_QWORD *)&v39 = 0;
  if (v16)
    free(v16);
  v17 = v33;
  v33 = 0;
  if (v17)
    free(v17);
  v18 = (void *)v31;
  *(_QWORD *)&v31 = 0;
  if (v18)
    free(v18);
  v19 = v30[0];
  v30[0] = 0;
  if (v19)
    free(v19);
}

void sub_2410352D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  ScopedDiagnosticHandler::~ScopedDiagnosticHandler((ScopedDiagnosticHandler *)&a13);
  llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)&a12);
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  FrameworkPassesOutput::~FrameworkPassesOutput((FrameworkPassesOutput *)&a32);
  _Unwind_Resume(a1);
}

void llvm::SMDiagnostic::~SMDiagnostic(llvm::SMDiagnostic *this)
{
  void *v2;

  llvm::SmallVector<llvm::SMFixIt,4u>::~SmallVector((char **)this + 16);
  v2 = (void *)*((_QWORD *)this + 13);
  if (v2)
  {
    *((_QWORD *)this + 14) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
}

uint64_t MTLCodeGenServiceBuildRequest(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int8 v12;
  void *v13;
  void *v14;
  const char *v15;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (!a1)
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, const char *))(a6 + 16))(a6, 2, 0, 0, "Compilation failed: compiler service missing");
  {
    MTLCodeGenServiceBuildRequest::guardSize = getpagesize();
  }
  v13 = mmap(0, MTLCodeGenServiceBuildRequest::guardSize + 0x800000, 3, 4098, 503316480, 0);
  if (v13 == (void *)-1)
  {
    v15 = "Cannot allocate stack";
  }
  else
  {
    v14 = v13;
    if (!mprotect(v13, MTLCodeGenServiceBuildRequest::guardSize, 0))
    {
      v17 = a1;
      v18 = a2;
      v19 = a3;
      v20 = a4;
      v21 = a5;
      v22 = a6;
      split_stack_call((uint64_t)v14 + MTLCodeGenServiceBuildRequest::guardSize, 0x800000, (uint64_t (*)(uint64_t))invokeBuildRequest, (uint64_t)&v17);
    }
    v15 = "Cannot set guard page protection";
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, const char *))(a6 + 16))(a6, 1, 0, 0, v15);
}

uint64_t invokeBuildRequest(unsigned int *a1)
{
  return MTLCompilerObject::buildRequest(*(_QWORD *)a1, a1[2], (void *)a1[3], *((unsigned int **)a1 + 2), *((_QWORD *)a1 + 3), *((_QWORD *)a1 + 4));
}

uint64_t ___ZL14disableFreezerv_block_invoke()
{
  getpid();
  return memorystatus_control();
}

void MTLCompilerPluginInterface::~MTLCompilerPluginInterface(void (**this)(void))
{
  void (*v2)(void);
  void (*v3)(void);
  void (*v4)(void);
  void (*v5)(void);

  if (this[14])
    this[1]();
  v2 = this[12];
  if (v2)
    free(v2);
  v3 = this[11];
  if (v3)
    free(v3);
  v4 = this[15];
  if (v4)
    dlclose(v4);
  if (this[18])
    deleteCompilerHelper();
  if (this[16])
  {
    v5 = this[9];
    if (v5)
      v5();
  }
}

BOOL MTLCompilerPluginInterface::init(MTLCompilerPluginInterface *this, char *__s1, const void *a3, size_t a4)
{
  void *v8;
  _BOOL8 result;
  unsigned __int8 v10;
  unsigned __int8 v11;
  std::string *v12;
  int64_t size;
  std::string *v14;
  uint64_t *v15;
  int v16;
  uint64_t *v17;
  int64_t v18;
  int v19;
  int64_t v20;
  std::string *v21;
  int64_t v22;
  std::string *v23;
  std::string *v24;
  int v25;
  std::string *v26;
  int64_t v27;
  char *v28;
  uint64_t *v29;
  int v30;
  uint64_t *v31;
  int64_t v32;
  int v33;
  int64_t v34;
  std::string *v35;
  int64_t v36;
  char *v37;
  char *v38;
  std::string::size_type v39;
  uint64_t v40;
  char v41;
  const char *p_p;
  void *v43;
  uint64_t v44;
  char *v45;
  void *v46;
  uint64_t (*v47)(void);
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  const void *v58;
  size_t v59;
  std::string v60;
  void *__p;
  __int128 v62;
  std::string v63;
  std::string v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  *((_BYTE *)this + 137) = 0;
  if (!strncmp(__s1, "simulatorDummyPlugin", 0x15uLL))
  {
    *((_QWORD *)this + 11) = strdup(__s1);
    *((_QWORD *)this + 15) = 0;
    *((_BYTE *)this + 137) = 1;
    goto LABEL_91;
  }
  if (!*((_BYTE *)this + 136))
  {
    if ((v10 & 1) == 0
    {
      std::string::basic_string[abi:ne180100]<0>(MTLCompilerPluginInterface::init(char const*,void const*,unsigned long)::validPathPrefixes, "/System/Library/Extensions/");
      std::string::basic_string[abi:ne180100]<0>(qword_25437B0D8, "/System/Library/PrivateFrameworks/");
      __cxa_atexit((void (*)(void *))__cxx_global_array_dtor, 0, &dword_240FA3000);
    }
    if ((v11 & 1) == 0
    {
      std::string::basic_string[abi:ne180100]<0>(MTLCompilerPluginInterface::init(char const*,void const*,unsigned long)::validPluginSuffixes, ".framework");
      std::string::basic_string[abi:ne180100]<0>(qword_25437B108, ".bundle");
      __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_146, 0, &dword_240FA3000);
    }
    std::string::basic_string[abi:ne180100]<0>(&v63, __s1);
    v58 = a3;
    v59 = a4;
    if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &v63;
    else
      v12 = (std::string *)v63.__r_.__value_.__r.__words[0];
    if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v63.__r_.__value_.__r.__words[2]);
    else
      size = v63.__r_.__value_.__l.__size_;
    v14 = (std::string *)((char *)v12 + size);
    v15 = MTLCompilerPluginInterface::init(char const*,void const*,unsigned long)::validPathPrefixes;
    while (1)
    {
      v16 = *((char *)v15 + 23);
      v17 = v16 >= 0 ? v15 : (uint64_t *)*v15;
      v18 = v16 >= 0 ? *((unsigned __int8 *)v15 + 23) : v15[1];
      if (!v18)
        break;
      if (size >= v18)
      {
        v19 = *(char *)v17;
        v20 = size;
        v21 = v12;
        do
        {
          v22 = v20 - v18;
          if (v22 == -1)
            break;
          v23 = (std::string *)memchr(v21, v19, v22 + 1);
          if (!v23)
            break;
          v24 = v23;
          if (!memcmp(v23, v17, v18))
          {
            if (v24 == v14 || v24 != v12)
              break;
            goto LABEL_34;
          }
          v21 = (std::string *)((char *)&v24->__r_.__value_.__l.__data_ + 1);
          v20 = (char *)v14 - ((char *)&v24->__r_.__value_.__l.__data_ + 1);
        }
        while (v20 >= v18);
      }
      v15 += 3;
      if (v15 == MTLCompilerPluginInterface::init(char const*,void const*,unsigned long)::validPluginSuffixes)
      {
        v25 = 1;
        goto LABEL_35;
      }
    }
LABEL_34:
    std::string::erase(&v63, 0, v18);
    v25 = 0;
LABEL_35:
    __p = operator new(0x408uLL);
    v62 = xmmword_24105AF40;
    bzero(__p, 0x401uLL);
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v60, v63.__r_.__value_.__l.__data_, v63.__r_.__value_.__l.__size_);
    else
      v60 = v63;
    v57 = v25;
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = &v60;
    else
      v26 = (std::string *)v60.__r_.__value_.__r.__words[0];
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
    else
      v27 = v60.__r_.__value_.__l.__size_;
    v28 = (char *)v26 + v27;
    v29 = MTLCompilerPluginInterface::init(char const*,void const*,unsigned long)::validPluginSuffixes;
    while (1)
    {
      v30 = *((char *)v29 + 23);
      v31 = v30 >= 0 ? v29 : (uint64_t *)*v29;
      v32 = v30 >= 0 ? *((unsigned __int8 *)v29 + 23) : v29[1];
      if (!v32)
        break;
      if (v27 >= v32)
      {
        v33 = *(char *)v31;
        v34 = v27;
        v35 = v26;
        while (1)
        {
          v36 = v34 - v32;
          if (v36 == -1)
            goto LABEL_53;
          v37 = (char *)memchr(v35, v33, v36 + 1);
          if (!v37)
            goto LABEL_53;
          v38 = v37;
          if (!memcmp(v37, v31, v32))
            break;
          v35 = (std::string *)(v38 + 1);
          v34 = v28 - (v38 + 1);
          if (v34 < v32)
            goto LABEL_53;
        }
        if (v38 != v28)
        {
          v39 = v38 - (char *)v26;
          if (v38 - (char *)v26 != -1)
            goto LABEL_65;
        }
      }
LABEL_53:
      v29 += 3;
      if (v29 == (uint64_t *)&pixelFormatTypeMapOnce)
        goto LABEL_110;
    }
    v39 = 0;
LABEL_65:
    std::string::erase(&v60, v39, v27);
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v64, v63.__r_.__value_.__l.__data_, v63.__r_.__value_.__l.__size_);
    else
      v64 = v63;
    if (*((char *)v29 + 23) < 0)
      v40 = v29[1];
    else
      v40 = *((unsigned __int8 *)v29 + 23);
    std::string::erase(&v64, 0, v40 + v39);
    MEMORY[0x24268D7A0](&__p, __s1);
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v64.__r_.__value_.__l.__data_);
    if (v57)
    {
LABEL_110:
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_FAULT))
        MTLCompilerPluginInterface::init((uint64_t)__s1, v50, v51, v52, v53, v54, v55, v56);
      abort();
    }
    if (*((_QWORD *)this + 15))
    {
      v41 = 1;
      a3 = v58;
      a4 = v59;
    }
    else
    {
      *((_QWORD *)this + 11) = strdup(__s1);
      if (v62 >= 0)
        p_p = (const char *)&__p;
      else
        p_p = (const char *)__p;
      v43 = dlopen(p_p, 5);
      a3 = v58;
      a4 = v59;
      *((_QWORD *)this + 15) = v43;
      if (v43)
      {
        v41 = 1;
      }
      else
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        {
          v44 = *((_QWORD *)this + 11);
          v45 = dlerror();
          MTLCompilerPluginInterface::init(v44, (uint64_t)v45, (uint64_t)&v64);
        }
        v41 = 0;
      }
    }
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
    if (SHIBYTE(v62) < 0)
      operator delete(__p);
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v63.__r_.__value_.__l.__data_);
      if ((v41 & 1) == 0)
        return 0;
    }
    else if ((v41 & 1) == 0)
    {
      return 0;
    }
LABEL_90:
    if (!*((_BYTE *)this + 137))
    {
      *(_QWORD *)this = dlsym(*((void **)this + 15), "MTLCompilerCreate");
      *((_QWORD *)this + 1) = dlsym(*((void **)this + 15), "MTLCompilerDelete");
      v49 = dlsym(*((void **)this + 15), "MTLCompilerBuildRequestWithOptions");
      *((_QWORD *)this + 4) = v49;
      if (!v49)
        *((_QWORD *)this + 3) = dlsym(*((void **)this + 15), "MTLCompilerBuildRequest");
      *((_QWORD *)this + 10) = dlsym(*((void **)this + 15), "MTLCompilerBuildRequestWithSerializedBitcode");
      *((_QWORD *)this + 2) = dlsym(*((void **)this + 15), "MTLCompilerReleaseReply");
      if (*((_BYTE *)this + 136))
      {
        *((_QWORD *)this + 5) = dlsym(*((void **)this + 15), "AIRNTEmitPipelineImage");
        *((_QWORD *)this + 6) = dlsym(*((void **)this + 15), "AIRNTInitCompilationContext");
        *((_QWORD *)this + 7) = dlsym(*((void **)this + 15), "AIRNTDisposeCompilationContext");
        *((_QWORD *)this + 8) = dlsym(*((void **)this + 15), "AIRNTInit");
        *((_QWORD *)this + 9) = dlsym(*((void **)this + 15), "AIRNTDispose");
      }
      goto LABEL_92;
    }
LABEL_91:
    *(_QWORD *)this = MTLSimCompilerCreate;
    *((_QWORD *)this + 1) = MTLSimCompilerDelete;
    *((_QWORD *)this + 4) = MTLSimCompilerBuildRequestWithOptions;
    *((_QWORD *)this + 2) = MTLSimCompilerReleaseReply;
LABEL_92:
    if (!*((_QWORD *)this + 14))
    {
      if (a3)
      {
        v46 = malloc_type_malloc(a4, 0xC12905A0uLL);
        *((_QWORD *)this + 12) = v46;
        *((_QWORD *)this + 13) = a4;
        memcpy(v46, a3, a4);
      }
      *((_QWORD *)this + 14) = (*(uint64_t (**)(const void *, size_t))this)(a3, a4);
    }
    if (*((_BYTE *)this + 136) && !*((_QWORD *)this + 16))
    {
      v47 = (uint64_t (*)(void))*((_QWORD *)this + 8);
      if (v47)
        v48 = v47();
      else
        v48 = 0;
      *((_QWORD *)this + 16) = v48;
    }
    return 1;
  }
  *((_QWORD *)this + 11) = strdup(__s1);
  v8 = dlopen(__s1, 5);
  *((_QWORD *)this + 15) = v8;
  if (v8)
    goto LABEL_90;
  result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (result)
  {
    MTLCompilerPluginInterface::init((uint64_t *)this + 11);
    return 0;
  }
  return result;
}

void sub_241035CB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (byte_25437B107 < 0)
    MTLCompilerPluginInterface::init();
  _Unwind_Resume(a1);
}

void std::vector<FunctionConstantDesc>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<FunctionConstantDesc>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<FunctionConstantDesc>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 40)
  {
    if (*(char *)(i - 17) < 0)
      operator delete(*(void **)(i - 40));
  }
  a1[1] = v2;
}

void printDiagnosticError(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];
  _BYTE v4[16];
  uint64_t v5;
  uint64_t v6;

  llvm::raw_string_ostream::raw_string_ostream((uint64_t)v4, a2);
  v3[0] = MEMORY[0x24BED83F8] + 16;
  v3[1] = v4;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 24))(a1, v3);
  if (v6 != v5)
    llvm::raw_ostream::flush_nonempty((llvm::raw_ostream *)v4);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v4);
}

void sub_241035E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)va);
  _Unwind_Resume(a1);
}

void ScopedDiagnosticHandler::~ScopedDiagnosticHandler(ScopedDiagnosticHandler *this)
{
  llvm::LLVMContext::setDiagnosticHandlerCallBack();
}

void logCompileError()
{
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    getSerializedModule();
}

uint64_t std::vector<MTLArgumentData>::__push_back_slow_path<MTLArgumentData const&>(uint64_t *a1, __int128 *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 5);
  v4 = v3 + 1;
  if (v3 + 1 > 0xE38E38E38E38E3)
    std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
  if (0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 5) > v4)
    v4 = 0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 5);
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 5) >= 0x71C71C71C71C71)
    v6 = 0xE38E38E38E38E3;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MTLArgumentData>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[288 * v3];
  v13 = &v7[288 * v6];
  std::allocator<MTLArgumentData>::construct[abi:ne180100]<MTLArgumentData,MTLArgumentData const&>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 288;
  std::vector<MTLArgumentData>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<MTLArgumentData>::~__split_buffer(&v10);
  return v8;
}

void sub_241036034(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<MTLArgumentData>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

__n128 std::allocator<MTLArgumentData>::construct[abi:ne180100]<MTLArgumentData,MTLArgumentData const&>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __n128 result;
  __int128 v23;
  __int128 v24;

  v5 = *a3;
  v6 = a3[2];
  *(_OWORD *)(a2 + 16) = a3[1];
  *(_OWORD *)(a2 + 32) = v6;
  *(_OWORD *)a2 = v5;
  v7 = a3[3];
  v8 = a3[4];
  v9 = a3[6];
  *(_OWORD *)(a2 + 80) = a3[5];
  *(_OWORD *)(a2 + 96) = v9;
  *(_OWORD *)(a2 + 48) = v7;
  *(_OWORD *)(a2 + 64) = v8;
  v10 = *((_QWORD *)a3 + 15);
  *(_QWORD *)(a2 + 112) = *((_QWORD *)a3 + 14);
  *(_QWORD *)(a2 + 120) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = *((_QWORD *)a3 + 17);
  *(_QWORD *)(a2 + 128) = *((_QWORD *)a3 + 16);
  *(_QWORD *)(a2 + 136) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = *((_QWORD *)a3 + 19);
  *(_QWORD *)(a2 + 144) = *((_QWORD *)a3 + 18);
  *(_QWORD *)(a2 + 152) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = a3[10];
  v20 = a3[11];
  v21 = *((_QWORD *)a3 + 24);
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a2 + 192) = v21;
  *(_OWORD *)(a2 + 176) = v20;
  *(_OWORD *)(a2 + 160) = v19;
  *(_QWORD *)(a2 + 208) = 0;
  *(_QWORD *)(a2 + 216) = 0;
  std::vector<MTLStructMemberInfo>::__init_with_size[abi:ne180100]<MTLStructMemberInfo*,MTLStructMemberInfo*>((_QWORD *)(a2 + 200), *((__int128 **)a3 + 25), *((__int128 **)a3 + 26), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)a3 + 26) - *((_QWORD *)a3 + 25)) >> 4));
  result = (__n128)a3[14];
  v23 = a3[15];
  v24 = a3[17];
  *(_OWORD *)(a2 + 256) = a3[16];
  *(_OWORD *)(a2 + 272) = v24;
  *(__n128 *)(a2 + 224) = result;
  *(_OWORD *)(a2 + 240) = v23;
  return result;
}

void sub_241036158(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::shared_ptr<MTLArgumentData>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<MTLArgumentData>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<MTLArgumentData>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<MTLArgumentData>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<MTLArgumentData>,std::reverse_iterator<MTLArgumentData*>,std::reverse_iterator<MTLArgumentData*>,std::reverse_iterator<MTLArgumentData*>>((uint64_t)(a1 + 2), a1[1], (__int128 *)a1[1], *a1, (__int128 *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<MTLArgumentData>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xE38E38E38E38E4)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(288 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<MTLArgumentData>,std::reverse_iterator<MTLArgumentData*>,std::reverse_iterator<MTLArgumentData*>,std::reverse_iterator<MTLArgumentData*>>(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, __int128 *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 *v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 18;
      std::allocator<MTLArgumentData>::construct[abi:ne180100]<MTLArgumentData,MTLArgumentData>(a1, v7 - 288, v9);
      v7 = *((_QWORD *)&v16 + 1) - 288;
      *((_QWORD *)&v16 + 1) -= 288;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<MTLArgumentData>,std::reverse_iterator<MTLArgumentData*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

__n128 std::allocator<MTLArgumentData>::construct[abi:ne180100]<MTLArgumentData,MTLArgumentData>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __n128 result;
  __int128 v11;
  __int128 v12;

  v3 = *a3;
  v4 = a3[2];
  *(_OWORD *)(a2 + 16) = a3[1];
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)a2 = v3;
  v5 = a3[3];
  v6 = a3[4];
  v7 = a3[6];
  *(_OWORD *)(a2 + 80) = a3[5];
  *(_OWORD *)(a2 + 96) = v7;
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)(a2 + 64) = v6;
  *(_OWORD *)(a2 + 112) = a3[7];
  *((_QWORD *)a3 + 14) = 0;
  *((_QWORD *)a3 + 15) = 0;
  *(_OWORD *)(a2 + 128) = a3[8];
  *((_QWORD *)a3 + 16) = 0;
  *((_QWORD *)a3 + 17) = 0;
  *(_OWORD *)(a2 + 144) = a3[9];
  *((_QWORD *)a3 + 18) = 0;
  *((_QWORD *)a3 + 19) = 0;
  v8 = a3[11];
  v9 = *((_QWORD *)a3 + 24);
  *(_OWORD *)(a2 + 160) = a3[10];
  *(_OWORD *)(a2 + 176) = v8;
  *(_QWORD *)(a2 + 192) = v9;
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a2 + 208) = 0;
  *(_QWORD *)(a2 + 216) = 0;
  *(_OWORD *)(a2 + 200) = *(__int128 *)((char *)a3 + 200);
  *(_QWORD *)(a2 + 216) = *((_QWORD *)a3 + 27);
  *((_QWORD *)a3 + 25) = 0;
  *((_QWORD *)a3 + 26) = 0;
  *((_QWORD *)a3 + 27) = 0;
  result = (__n128)a3[14];
  v11 = a3[15];
  v12 = a3[17];
  *(_OWORD *)(a2 + 256) = a3[16];
  *(_OWORD *)(a2 + 272) = v12;
  *(__n128 *)(a2 + 224) = result;
  *(_OWORD *)(a2 + 240) = v11;
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<MTLArgumentData>,std::reverse_iterator<MTLArgumentData*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<MTLArgumentData>,std::reverse_iterator<MTLArgumentData*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

uint64_t *std::_AllocatorDestroyRangeReverse<std::allocator<MTLArgumentData>,std::reverse_iterator<MTLArgumentData*>>::operator()[abi:ne180100](uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result[2] + 8);
  v2 = *(_QWORD *)(result[1] + 8);
  if (v1 != v2)
  {
    v3 = *result;
    do
    {
      result = (uint64_t *)std::allocator<MTLArgumentData>::destroy[abi:ne180100](v3, v1);
      v1 += 288;
    }
    while (v1 != v2);
  }
  return result;
}

void **std::__split_buffer<MTLArgumentData>::~__split_buffer(void **a1)
{
  std::__split_buffer<MTLArgumentData>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

uint64_t std::__split_buffer<MTLArgumentData>::clear[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 8);
  v1 = *(_QWORD *)(result + 16);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *(_QWORD *)(v3 + 32);
      *(_QWORD *)(v3 + 16) = v1 - 288;
      result = std::allocator<MTLArgumentData>::destroy[abi:ne180100](v4, v1 - 288);
      v1 = *(_QWORD *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

char *serializeOneVertexAttribute(int *a1, char **a2)
{
  size_t v2;
  size_t v3;
  char *v4;
  const void *v7;
  size_t v8;
  char *v9;
  unint64_t v10;
  int v11;
  unsigned int v12;
  size_t v13;
  char *v14;
  char *v15;
  const char *v16;
  size_t v17;
  int v18;
  unint64_t v19;
  int v20;
  size_t v21;
  char *result;

  v2 = *((_QWORD *)a1 + 3);
  v3 = v2 + 1;
  v4 = a2[2];
  if (__CFADD__(v4, v2 + 1))
    goto LABEL_35;
  v7 = (const void *)*((_QWORD *)a1 + 2);
  v8 = (size_t)a2[1];
  if (v8 >= (unint64_t)&v4[v3])
  {
    v9 = *a2;
  }
  else
  {
    if (!v8)
    {
      v8 = 128;
      a2[1] = (char *)128;
    }
    while (v8 < (unint64_t)&v4[v3])
    {
      if (v8 >> 1 >= ~v8)
        v8 = (size_t)&v4[v3];
      else
        v8 += v8 >> 1;
    }
    v9 = (char *)malloc_type_realloc(*a2, v8, 0x227314A4uLL);
    *a2 = v9;
    if (!v9)
      goto LABEL_35;
    a2[1] = (char *)v8;
    v4 = a2[2];
  }
  memcpy(&v4[(_QWORD)v9], v7, v2);
  a2[2][v2 + (_QWORD)*a2] = 0;
  v10 = (unint64_t)&a2[2][v3];
  a2[2] = (char *)v10;
  if (v10 >= 0xFFFFFFFFFFFFFFFCLL)
    goto LABEL_35;
  v12 = *a1;
  v11 = a1[1];
  v13 = (size_t)a2[1];
  if (v13 >= v10 + 4)
  {
    v14 = *a2;
  }
  else
  {
    if (!v13)
    {
      v13 = 128;
      a2[1] = (char *)128;
    }
    while (v13 < v10 + 4)
    {
      if (v13 >> 1 >= ~v13)
        v13 = v10 + 4;
      else
        v13 += v13 >> 1;
    }
    v14 = (char *)malloc_type_realloc(*a2, v13, 0x227314A4uLL);
    *a2 = v14;
    if (!v14)
      goto LABEL_35;
    a2[1] = (char *)v13;
    v10 = (unint64_t)a2[2];
  }
  v15 = &v14[v10];
  *(_WORD *)v15 = v11;
  v15[2] = BYTE2(v11);
  v15[3] = ((v12 << 17) & 0x40000000 | (((v12 >> 14) & 1) << 29) & 0x7FFFFFFF | ((v12 >> 3) << 31) | v11) >> 24;
  a2[2] += 4;
  v16 = (const char *)*((_QWORD *)a1 + 4);
  v17 = strlen(v16);
  v18 = dataTypeFromString(v16, v17);
  v19 = (unint64_t)a2[2];
  if (v19 >= 0xFFFFFFFFFFFFFFFCLL)
    goto LABEL_35;
  v20 = v18;
  v21 = (size_t)a2[1];
  if (v21 >= v19 + 4)
  {
    result = *a2;
    goto LABEL_34;
  }
  if (!v21)
  {
    v21 = 128;
    a2[1] = (char *)128;
  }
  while (v21 < v19 + 4)
  {
    if (v21 >> 1 >= ~v21)
      v21 = v19 + 4;
    else
      v21 += v21 >> 1;
  }
  result = (char *)malloc_type_realloc(*a2, v21, 0x227314A4uLL);
  *a2 = result;
  if (!result)
LABEL_35:
    abort();
  a2[1] = (char *)v21;
  v19 = (unint64_t)a2[2];
LABEL_34:
  *(_DWORD *)&result[v19] = v20;
  a2[2] += 4;
  return result;
}

uint64_t SerializedLibraryInfo::serializeStringArraySize(uint64_t a1, __int128 **a2)
{
  __int128 *v2;
  __int128 *v3;
  uint64_t v4;
  __int128 v5;
  std::string::size_type size;
  std::string v8;

  v2 = *a2;
  v3 = a2[1];
  v4 = 4;
  while (v2 != v3)
  {
    if (*((char *)v2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v5 = *v2;
      v8.__r_.__value_.__r.__words[2] = *((_QWORD *)v2 + 2);
      *(_OWORD *)&v8.__r_.__value_.__l.__data_ = v5;
    }
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    {
      size = v8.__r_.__value_.__l.__size_;
      operator delete(v8.__r_.__value_.__l.__data_);
    }
    else
    {
      size = HIBYTE(v8.__r_.__value_.__r.__words[2]);
    }
    v4 += size + 1;
    v2 = (__int128 *)((char *)v2 + 24);
  }
  return v4;
}

void SerializedLibraryInfo::serializeStringArray(uint64_t a1, __int128 **a2, _DWORD *a3)
{
  __int128 *v3;
  __int128 *v4;
  BOOL v5;
  char *v6;
  __int128 v7;
  std::string::size_type size;
  void *v9;
  std::string __src;

  v4 = *a2;
  v3 = a2[1];
  v5 = v3 == *a2;
  *a3 = -1431655765 * ((unint64_t)((char *)v3 - (char *)*a2) >> 3);
  if (!v5)
  {
    v6 = (char *)(a3 + 1);
    do
    {
      if (*((char *)v4 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__src, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
      }
      else
      {
        v7 = *v4;
        __src.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
        *(_OWORD *)&__src.__r_.__value_.__l.__data_ = v7;
      }
      if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
      {
        v9 = (void *)__src.__r_.__value_.__r.__words[0];
        strcpy(v6, __src.__r_.__value_.__l.__data_);
        size = __src.__r_.__value_.__l.__size_;
        operator delete(v9);
      }
      else
      {
        size = HIBYTE(__src.__r_.__value_.__r.__words[2]);
        strcpy(v6, (const char *)&__src);
      }
      v6 += size + 1;
      v4 = (__int128 *)((char *)v4 + 24);
    }
    while (v4 != v3);
  }
}

llvm::NamedMDNode *getMDNodeForFunctionType(llvm::Module *a1, MTLFunctionType a2)
{
  uint64_t v2;
  _BYTE *v3;
  char v4;
  llvm::NamedMDNode *result;
  llvm::NamedMDNode *v6;
  _BYTE *v7;
  char v8;
  char v9;

  v2 = a2 - 1;
  if (a2 - 1 >= 8 || ((0xF7u >> v2) & 1) == 0)
    abort();
  v3 = *off_25111F748[v2];
  v4 = 1;
  v9 = 1;
  if (*v3)
  {
    v7 = v3;
    v4 = 3;
  }
  v8 = v4;
  result = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(a1, (const llvm::Twine *)&v7);
  if (result)
  {
    v6 = result;
    if (llvm::NamedMDNode::getNumOperands(result))
      return (llvm::NamedMDNode *)llvm::NamedMDNode::getOperand(v6);
    else
      return 0;
  }
  return result;
}

char **llvm::SmallVector<std::string,4u>::~SmallVector(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 24 * v3;
    do
    {
      if (v2[v4 - 1] < 0)
        operator delete(*(void **)&v2[v4 - 24]);
      v4 -= 24;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t llvm::handleAllErrors<llvm::toString(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  *a1 = 0;
  llvm::handleErrors<llvm::toString(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>((uint64_t)&v3, a2, &v4);
  result = v3;
  if (v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return result;
}

void sub_241036948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

uint64_t llvm::handleErrors<llvm::toString(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v4;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_QWORD **)result;
  if (*(_QWORD *)result)
  {
    *(_QWORD *)result = 0;
    if ((*(unsigned int (**)(_QWORD *, _QWORD))(*v4 + 48))(v4, MEMORY[0x24BED7780]))
    {
      *a3 = 0;
      v6 = (uint64_t *)v4[1];
      v7 = (uint64_t *)v4[2];
      if (v6 != v7)
      {
        v8 = 0;
        do
        {
          v14 = v8;
          *a3 = 0;
          v9 = *v6;
          *v6 = 0;
          v12 = v9;
          llvm::handleErrorImpl<llvm::toString(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v12, a2, &v13);
          llvm::ErrorList::join(&v14, &v13, &v15);
          v8 = v15;
          *a3 = v15;
          v15 = 0;
          if (v13)
            (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
          v10 = v12;
          v12 = 0;
          if (v10)
            (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
          if (v14)
            (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
          ++v6;
        }
        while (v6 != v7);
      }
      return (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
    }
    else
    {
      v11 = v4;
      llvm::handleErrorImpl<llvm::toString(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>((uint64_t *)&v11, a2, a3);
      result = (uint64_t)v11;
      v11 = 0;
      if (result)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void sub_241036AAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t llvm::ErrorList::join@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t *v11;
  int64x2_t *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  int64x2_t v27;
  char *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  int64x2_t v48;
  char *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int64x2_t v54;
  char *v55;
  _QWORD *v56;

  result = *a1;
  v7 = *a2;
  if (!result)
  {
LABEL_33:
    *a3 = v7;
    *a2 = 0;
    return result;
  }
  if (!v7)
  {
    *a3 = result;
LABEL_57:
    *a1 = 0;
    return result;
  }
  if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)result + 48))(result, MEMORY[0x24BED7780]))
  {
    v8 = (_QWORD *)*a1;
    if (*a2)
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 48))(*a2, MEMORY[0x24BED7780]);
      v9 = (_QWORD *)*a2;
      if ((_DWORD)result)
      {
        *a2 = 0;
        v10 = (uint64_t *)v9[1];
        v11 = (uint64_t *)v9[2];
        if (v10 == v11)
          goto LABEL_26;
        v50 = v9;
        v12 = (int64x2_t *)(v8 + 1);
        v13 = v8 + 3;
        v14 = (_QWORD *)v8[2];
        do
        {
          if ((unint64_t)v14 >= *v13)
          {
            v16 = ((uint64_t)v14 - v12->i64[0]) >> 3;
            if ((unint64_t)(v16 + 1) >> 61)
              std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
            v17 = *v13 - v12->i64[0];
            v18 = v17 >> 2;
            if (v17 >> 2 <= (unint64_t)(v16 + 1))
              v18 = v16 + 1;
            if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
              v19 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v19 = v18;
            v56 = v8 + 3;
            if (v19)
              v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)(v8 + 3), v19);
            else
              v20 = 0;
            v21 = &v20[8 * v16];
            v22 = &v20[8 * v19];
            v55 = v22;
            v23 = *v10;
            *v10 = 0;
            *(_QWORD *)v21 = v23;
            v14 = v21 + 8;
            v54.i64[1] = (uint64_t)(v21 + 8);
            v25 = (_QWORD *)v8[1];
            v24 = (_QWORD *)v8[2];
            if (v24 == v25)
            {
              v27 = vdupq_n_s64((unint64_t)v24);
            }
            else
            {
              do
              {
                v26 = *--v24;
                *v24 = 0;
                *((_QWORD *)v21 - 1) = v26;
                v21 -= 8;
              }
              while (v24 != v25);
              v27 = *v12;
              v14 = (_QWORD *)v54.i64[1];
              v22 = v55;
            }
            v8[1] = v21;
            v8[2] = v14;
            v54 = v27;
            v28 = (char *)v8[3];
            v8[3] = v22;
            v55 = v28;
            v53 = v27.i64[0];
            result = std::__split_buffer<std::unique_ptr<llvm::ErrorInfoBase>>::~__split_buffer((uint64_t)&v53);
          }
          else
          {
            v15 = *v10;
            *v10 = 0;
            *v14++ = v15;
          }
          v8[2] = v14;
          ++v10;
        }
        while (v10 != v11);
        v9 = v50;
        if (v50)
LABEL_26:
          result = (*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
LABEL_56:
        *a3 = *a1;
        goto LABEL_57;
      }
    }
    else
    {
      v9 = 0;
    }
    *a2 = 0;
    result = (uint64_t)(v8 + 3);
    v34 = v8[3];
    v35 = (_QWORD *)v8[2];
    if ((unint64_t)v35 >= v34)
    {
      v37 = v8[1];
      v38 = ((uint64_t)v35 - v37) >> 3;
      if ((unint64_t)(v38 + 1) >> 61)
        std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
      v39 = v34 - v37;
      v40 = v39 >> 2;
      if (v39 >> 2 <= (unint64_t)(v38 + 1))
        v40 = v38 + 1;
      if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
        v41 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v41 = v40;
      v56 = v8 + 3;
      if (v41)
        v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>(result, v41);
      else
        v42 = 0;
      v43 = &v42[8 * v38];
      v44 = &v42[8 * v41];
      v55 = v44;
      *(_QWORD *)v43 = v9;
      v36 = v43 + 8;
      v54.i64[1] = (uint64_t)(v43 + 8);
      v46 = (_QWORD *)v8[1];
      v45 = (_QWORD *)v8[2];
      if (v45 == v46)
      {
        v48 = vdupq_n_s64((unint64_t)v45);
      }
      else
      {
        do
        {
          v47 = *--v45;
          *v45 = 0;
          *((_QWORD *)v43 - 1) = v47;
          v43 -= 8;
        }
        while (v45 != v46);
        v48 = *(int64x2_t *)(v8 + 1);
        v36 = (_QWORD *)v54.i64[1];
        v44 = v55;
      }
      v8[1] = v43;
      v8[2] = v36;
      v54 = v48;
      v49 = (char *)v8[3];
      v8[3] = v44;
      v55 = v49;
      v53 = v48.i64[0];
      result = std::__split_buffer<std::unique_ptr<llvm::ErrorInfoBase>>::~__split_buffer((uint64_t)&v53);
    }
    else
    {
      *v35 = v9;
      v36 = v35 + 1;
    }
    v8[2] = v36;
    goto LABEL_56;
  }
  if (*a2 && (*(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 48))(*a2, MEMORY[0x24BED7780]))
  {
    v29 = (uint64_t *)(*a2 + 8);
    v30 = (uint64_t *)*v29;
    v53 = *a1;
    *a1 = 0;
    std::vector<std::unique_ptr<llvm::ErrorInfoBase>>::insert(v29, v30, &v53);
    result = v53;
    v53 = 0;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    v7 = *a2;
    goto LABEL_33;
  }
  v31 = (uint64_t *)operator new();
  v32 = *a1;
  *a1 = 0;
  v51 = *a2;
  v52 = v32;
  *a2 = 0;
  llvm::ErrorList::ErrorList(v31, &v52, &v51);
  v53 = 0;
  *a3 = v31;
  std::unique_ptr<llvm::ErrorList>::reset[abi:ne180100](&v53, 0);
  v33 = v51;
  v51 = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  result = v52;
  v52 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_241036EE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

uint64_t llvm::handleErrorImpl<llvm::toString(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)*a1 + 48))(*a1, MEMORY[0x24BED5A38]);
  v7 = *a1;
  *a1 = 0;
  if ((_DWORD)result)
  {
    v8 = v7;
    llvm::ErrorHandlerTraits<void (&)(llvm::ErrorInfoBase &)>::apply<llvm::toString(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(a2, &v8, a3);
    result = v8;
    v8 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    *a3 = v7;
  }
  return result;
}

void sub_241036FEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<std::unique_ptr<llvm::ErrorInfoBase>>::insert(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;

  v4 = a2;
  v6 = a1[1];
  v9 = a1[2];
  v7 = (uint64_t)(a1 + 2);
  v8 = v9;
  if (v6 >= v9)
  {
    v12 = *a1;
    v13 = ((uint64_t)(v6 - *a1) >> 3) + 1;
    if (v13 >> 61)
      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
    v14 = ((uint64_t)a2 - v12) >> 3;
    v15 = v8 - v12;
    v16 = v15 >> 2;
    if (v15 >> 2 <= v13)
      v16 = ((uint64_t)(v6 - *a1) >> 3) + 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    v25 = v7;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>(v7, v17);
    else
      v18 = 0;
    v21 = v18;
    v22 = &v18[8 * v14];
    v23 = v22;
    v24 = &v18[8 * v17];
    std::__split_buffer<std::unique_ptr<llvm::ErrorInfoBase>>::push_back(&v21, a3);
    v4 = (uint64_t *)std::vector<std::unique_ptr<llvm::ErrorInfoBase>>::__swap_out_circular_buffer(a1, &v21, v4);
    std::__split_buffer<std::unique_ptr<llvm::ErrorInfoBase>>::~__split_buffer((uint64_t)&v21);
  }
  else if (a2 == (uint64_t *)v6)
  {
    v19 = *a3;
    *a3 = 0;
    *a2 = v19;
    a1[1] = (uint64_t)(a2 + 1);
  }
  else
  {
    std::vector<std::unique_ptr<llvm::ErrorInfoBase>>::__move_range((uint64_t)a1, a2, v6, (uint64_t)(a2 + 1));
    v10 = *a3;
    *a3 = 0;
    v11 = *v4;
    *v4 = v10;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  return v4;
}

void sub_241037140(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<llvm::ErrorInfoBase>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::unique_ptr<llvm::ErrorInfoBase>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *std::vector<std::unique_ptr<llvm::ErrorInfoBase>>::__move_range(uint64_t a1, _QWORD *a2, unint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;

  v6 = *(_QWORD **)(a1 + 8);
  v7 = (_QWORD *)((char *)v6 + (_QWORD)a2 - a4);
  v8 = v6;
  if ((unint64_t)v7 < a3)
  {
    v9 = v7;
    v8 = *(_QWORD **)(a1 + 8);
    do
    {
      v10 = *v9;
      *v9++ = 0;
      *v8++ = v10;
    }
    while ((unint64_t)v9 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,std::unique_ptr<llvm::ErrorInfoBase> *,std::unique_ptr<llvm::ErrorInfoBase> *,std::unique_ptr<llvm::ErrorInfoBase> *,0>(a2, v7, v6);
}

_QWORD *std::__split_buffer<std::unique_ptr<llvm::ErrorInfoBase>>::push_back(_QWORD *result, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  int64x2_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64x2_t v31;
  uint64_t v32;
  uint64_t v33;

  v3 = result;
  v4 = (uint64_t *)result[2];
  if (v4 == (uint64_t *)result[3])
  {
    v6 = *result;
    v5 = (uint64_t *)result[1];
    v7 = (uint64_t)v5 - *v3;
    if ((unint64_t)v5 <= *v3)
    {
      v14 = (uint64_t)v4 - v6;
      v13 = v14 == 0;
      v15 = v14 >> 2;
      if (v13)
        v16 = 1;
      else
        v16 = v15;
      v33 = v3[4];
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>(v33, v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)v3[1];
      v21 = v3[2] - (_QWORD)v20;
      if (v21)
      {
        v22 = v21 >> 3;
        v23 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * v22;
        v25 = &v17[8 * (v16 >> 2)];
        do
        {
          v26 = *v20;
          *v20++ = 0;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
        v27 = *(int64x2_t *)(v3 + 1);
      }
      else
      {
        v27 = vdupq_n_s64((unint64_t)v20);
        v23 = &v17[8 * (v16 >> 2)];
      }
      v30 = *v3;
      *v3 = v17;
      v3[1] = v19;
      v31 = v27;
      v28 = v3[3];
      v3[2] = v23;
      v3[3] = &v17[8 * v18];
      v32 = v28;
      result = (_QWORD *)std::__split_buffer<std::unique_ptr<llvm::ErrorInfoBase>>::~__split_buffer((uint64_t)&v30);
      v4 = (uint64_t *)v3[2];
    }
    else
    {
      v8 = v7 >> 3;
      v9 = v7 >> 3 < -1;
      v10 = (v7 >> 3) + 2;
      if (v9)
        v11 = v10;
      else
        v11 = v8 + 1;
      v12 = v11 >> 1;
      result = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::unique_ptr<llvm::ErrorInfoBase> *,std::unique_ptr<llvm::ErrorInfoBase> *,std::unique_ptr<llvm::ErrorInfoBase> *,0>(v5, v4, &v5[-(v11 >> 1)]);
      v3[1] -= 8 * v12;
      v3[2] = v4;
    }
  }
  v29 = *a2;
  *a2 = 0;
  *v4 = v29;
  v3[2] += 8;
  return result;
}

uint64_t std::vector<std::unique_ptr<llvm::ErrorInfoBase>>::__swap_out_circular_buffer(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  result = a2[1];
  v5 = (_QWORD *)*a1;
  v6 = result;
  if ((_QWORD *)*a1 != a3)
  {
    v6 = a2[1];
    v7 = a3;
    do
    {
      v8 = *--v7;
      *v7 = 0;
      *(_QWORD *)(v6 - 8) = v8;
      v6 -= 8;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  v9 = (_QWORD *)a1[1];
  v10 = (_QWORD *)a2[2];
  if (v9 != a3)
  {
    do
    {
      v11 = *a3;
      *a3++ = 0;
      *v10++ = v11;
    }
    while (a3 != v9);
    v6 = a2[1];
  }
  a2[2] = v10;
  v12 = (_QWORD *)*a1;
  *a1 = v6;
  a2[1] = v12;
  v13 = a1[1];
  a1[1] = a2[2];
  a2[2] = v13;
  v14 = a1[2];
  a1[2] = a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return result;
}

_QWORD *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,std::unique_ptr<llvm::ErrorInfoBase> *,std::unique_ptr<llvm::ErrorInfoBase> *,std::unique_ptr<llvm::ErrorInfoBase> *,0>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a2 != a1)
  {
    v6 = a2;
    do
    {
      v8 = *--v6;
      v7 = v8;
      *v6 = 0;
      v10 = *--a3;
      v9 = v10;
      *a3 = v7;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
    while (v6 != a1);
  }
  return a2;
}

uint64_t *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::unique_ptr<llvm::ErrorInfoBase> *,std::unique_ptr<llvm::ErrorInfoBase> *,std::unique_ptr<llvm::ErrorInfoBase> *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      v6 = *v4;
      *v4 = 0;
      v7 = *a3;
      *a3 = v6;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      ++v4;
      ++a3;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t *llvm::ErrorList::ErrorList(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  int64x2_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  int64x2_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  int64x2_t v34;
  uint64_t v35;
  uint64_t v37;
  int64x2_t v38;
  char *v39;
  _QWORD *v40;

  v6 = MEMORY[0x24BED8418] + 16;
  a1[1] = 0;
  v7 = (int64x2_t *)(a1 + 1);
  *a1 = v6;
  a1[2] = 0;
  a1[3] = 0;
  v8 = (uint64_t)(a1 + 3);
  v40 = a1 + 3;
  v9 = std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)(a1 + 3), 1uLL);
  v11 = v9;
  v12 = *a2;
  *a2 = 0;
  *v9 = v12;
  v13 = v9 + 1;
  v15 = (_QWORD *)a1[1];
  v14 = (_QWORD *)a1[2];
  if (v14 == v15)
  {
    v18 = vdupq_n_s64((unint64_t)v14);
    v16 = v9;
  }
  else
  {
    v16 = v9;
    do
    {
      v17 = *--v14;
      *v14 = 0;
      *--v16 = v17;
    }
    while (v14 != v15);
    v18 = *v7;
  }
  a1[1] = (uint64_t)v16;
  a1[2] = (uint64_t)v13;
  v38 = v18;
  v19 = a1[3];
  a1[3] = (uint64_t)&v9[v10];
  v39 = (char *)v19;
  v37 = v18.i64[0];
  std::__split_buffer<std::unique_ptr<llvm::ErrorInfoBase>>::~__split_buffer((uint64_t)&v37);
  v20 = a1[3];
  a1[2] = (uint64_t)v13;
  if ((unint64_t)v13 >= v20)
  {
    v23 = ((uint64_t)v13 - v7->i64[0]) >> 3;
    if ((unint64_t)(v23 + 1) >> 61)
      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
    v24 = v20 - v7->i64[0];
    v25 = v24 >> 2;
    if (v24 >> 2 <= (unint64_t)(v23 + 1))
      v25 = v23 + 1;
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
      v26 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v26 = v25;
    v40 = (_QWORD *)v8;
    if (v26)
      v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>(v8, v26);
    else
      v27 = 0;
    v28 = &v27[8 * v23];
    v29 = &v27[8 * v26];
    v39 = v29;
    v30 = *a3;
    *a3 = 0;
    *(_QWORD *)v28 = v30;
    v22 = v28 + 8;
    v38.i64[1] = (uint64_t)(v28 + 8);
    v32 = (_QWORD *)a1[1];
    v31 = (_QWORD *)a1[2];
    if (v31 == v32)
    {
      v34 = vdupq_n_s64((unint64_t)v31);
    }
    else
    {
      do
      {
        v33 = *--v31;
        *v31 = 0;
        *((_QWORD *)v28 - 1) = v33;
        v28 -= 8;
      }
      while (v31 != v32);
      v34 = *v7;
      v22 = (_QWORD *)v38.i64[1];
      v29 = v39;
    }
    a1[1] = (uint64_t)v28;
    a1[2] = (uint64_t)v22;
    v38 = v34;
    v35 = a1[3];
    a1[3] = (uint64_t)v29;
    v39 = (char *)v35;
    v37 = v34.i64[0];
    std::__split_buffer<std::unique_ptr<llvm::ErrorInfoBase>>::~__split_buffer((uint64_t)&v37);
  }
  else
  {
    v21 = *a3;
    *a3 = 0;
    v11[1] = v21;
    v22 = v11 + 2;
  }
  a1[2] = (uint64_t)v22;
  return a1;
}

void sub_241037664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::vector<std::unique_ptr<llvm::ErrorInfoBase>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::vector<std::unique_ptr<llvm::ErrorInfoBase>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *std::unique_ptr<llvm::ErrorList>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  void **v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = (void **)(v2 + 8);
    std::vector<std::unique_ptr<llvm::ErrorInfoBase>>::__destroy_vector::operator()[abi:ne180100](&v3);
    return (uint64_t *)MEMORY[0x24268D8F0](v2, 0xA1C4030951706);
  }
  return result;
}

void llvm::ErrorHandlerTraits<void (&)(llvm::ErrorInfoBase &)>::apply<llvm::toString(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  __int128 v7;
  void *__p[2];
  char v9;

  v4 = *a1;
  (*(void (**)(void **__return_ptr, _QWORD))(*(_QWORD *)*a2 + 24))(__p, *a2);
  v5 = llvm::SmallVectorTemplateCommon<std::string,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::string,false>>(v4, (unint64_t)__p, 1);
  v6 = *(_QWORD *)v4 + 24 * *(unsigned int *)(v4 + 8);
  v7 = *(_OWORD *)v5;
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(v5 + 16);
  *(_OWORD *)v6 = v7;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)v5 = 0;
  ++*(_DWORD *)(v4 + 8);
  if (v9 < 0)
    operator delete(__p[0]);
  *a3 = 0;
}

void sub_2410377E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t llvm::SmallVectorTemplateCommon<std::string,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::string,false>>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v8;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v6 = *(_QWORD *)a1 + 24 * v4;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorTemplateBase<std::string,false>::grow(a1);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      llvm::SmallVectorTemplateBase<std::string,false>::grow(a1);
    }
  }
  return v3;
}

void llvm::SmallVectorTemplateBase<std::string,false>::grow(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  llvm::SmallVectorTemplateBase<std::string,false>::moveElementsForGrow((__int128 **)a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

std::string *llvm::detail::join_impl<std::string *>@<X0>(std::string *result@<X0>, std::string *a2@<X1>, const std::string::value_type *a3@<X2>, std::string::size_type a4@<X3>, std::string *a5@<X8>)
{
  std::string *v8;
  std::string::size_type v10;
  std::string *v11;
  std::string::size_type size;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *i;
  int v17;
  const std::string::value_type *v18;
  std::string::size_type v19;

  a5->__r_.__value_.__r.__words[0] = 0;
  a5->__r_.__value_.__l.__size_ = 0;
  a5->__r_.__value_.__r.__words[2] = 0;
  if (result != a2)
  {
    v8 = result;
    v10 = (0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)result) >> 3) - 1) * a4;
    v11 = result;
    do
    {
      if (SHIBYTE(v11->__r_.__value_.__r.__words[2]) < 0)
        size = v11->__r_.__value_.__l.__size_;
      else
        size = HIBYTE(v11->__r_.__value_.__r.__words[2]);
      v10 += size;
      ++v11;
    }
    while (v11 != a2);
    std::string::reserve(a5, v10);
    v13 = SHIBYTE(v8->__r_.__value_.__r.__words[2]);
    if (v13 >= 0)
      v14 = (const std::string::value_type *)v8;
    else
      v14 = (const std::string::value_type *)v8->__r_.__value_.__r.__words[0];
    if (v13 >= 0)
      v15 = HIBYTE(v8->__r_.__value_.__r.__words[2]);
    else
      v15 = v8->__r_.__value_.__l.__size_;
    result = std::string::append(a5, v14, v15);
    for (i = v8 + 1; i != a2; ++i)
    {
      std::string::append(a5, a3, a4);
      v17 = SHIBYTE(i->__r_.__value_.__r.__words[2]);
      if (v17 >= 0)
        v18 = (const std::string::value_type *)i;
      else
        v18 = (const std::string::value_type *)i->__r_.__value_.__r.__words[0];
      if (v17 >= 0)
        v19 = HIBYTE(i->__r_.__value_.__r.__words[2]);
      else
        v19 = i->__r_.__value_.__l.__size_;
      result = std::string::append(a5, v18, v19);
    }
  }
  return result;
}

void sub_2410379D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

double ___ZL15logCompileBeginRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERyPKcS7__block_invoke()
{
  unint64_t v0;
  unint64_t v1;
  double result;
  mach_timebase_info info;

  mach_timebase_info(&info);
  LODWORD(v0) = info.numer;
  LODWORD(v1) = info.denom;
  result = (double)v0 / (double)v1;
  gMachTimeToNS = *(_QWORD *)&result;
  return result;
}

char *flatbuffers::FlatBufferBuilder::AddOffset<void>(char *result, uint64_t a2, int a3)
{
  char *v5;

  if (a3)
  {
    v5 = result;
    flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)result, 4uLL);
    return flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v5, a2, *((_DWORD *)v5 + 8) - *((_DWORD *)v5 + 12) + *((_DWORD *)v5 + 10) - a3 + 4, 0);
  }
  return result;
}

char *flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(char *result, uint64_t a2, int a3, int a4)
{
  char *v5;
  unsigned int v6;

  v5 = result;
  if (a3 != a4 || result[80])
  {
    v6 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)result, a3);
    return flatbuffers::FlatBufferBuilder::TrackField(v5, a2, v6);
  }
  return result;
}

uint64_t flatbuffers::FlatBufferBuilder::PushElement<unsigned int>(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 4uLL);
  v4 = *(_QWORD *)(a1 + 48);
  if ((unint64_t)(v4 - *(_QWORD *)(a1 + 56)) <= 3)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 4uLL);
    v4 = *(_QWORD *)(a1 + 48);
  }
  *(_DWORD *)(v4 - 4) = a2;
  v5 = v4 - 4;
  *(_QWORD *)(a1 + 48) = v5;
  return (*(_DWORD *)(a1 + 32) - v5 + *(_DWORD *)(a1 + 40));
}

char *flatbuffers::FlatBufferBuilder::TrackField(char *this, uint64_t a2, unsigned int a3)
{
  char *v5;
  unint64_t *v6;
  unsigned int v7;

  v5 = this;
  v6 = (unint64_t *)*((_QWORD *)this + 7);
  if (*((_QWORD *)this + 6) - (_QWORD)v6 <= 7uLL)
  {
    this = flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)this, 8uLL);
    v6 = (unint64_t *)*((_QWORD *)v5 + 7);
  }
  *v6 = a3 | (unint64_t)(a2 << 32);
  *((_QWORD *)v5 + 7) += 8;
  ++*((_DWORD *)v5 + 16);
  v7 = *((unsigned __int16 *)v5 + 34);
  if (v7 <= a2)
    LOWORD(v7) = a2;
  *((_WORD *)v5 + 34) = v7;
  return this;
}

char *flatbuffers::FlatBufferBuilder::Align(flatbuffers::FlatBufferBuilder *this, unint64_t a2)
{
  if (*((_QWORD *)this + 9) < a2)
    *((_QWORD *)this + 9) = a2;
  return flatbuffers::vector_downward::fill((char *)this, (a2 - 1) & -(uint64_t)(*((_DWORD *)this + 8) - *((_DWORD *)this + 12) + *((_DWORD *)this + 10)));
}

char *flatbuffers::vector_downward::fill(char *this, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = this;
  v4 = *((_QWORD *)this + 6);
  if (v4 - *((_QWORD *)this + 7) >= a2)
  {
    *((_QWORD *)this + 6) = v4 - a2;
    if (!a2)
      return this;
  }
  else
  {
    this = flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)this, a2);
    *((_QWORD *)v3 + 6) -= a2;
  }
  v5 = 0;
  do
    *(_BYTE *)(*((_QWORD *)v3 + 6) + v5++) = 0;
  while (a2 != v5);
  return this;
}

char *flatbuffers::vector_downward::reallocate(flatbuffers::vector_downward *this, unint64_t a2)
{
  char *v3;
  unint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *result;
  char *v11;
  char *v12;

  v4 = *((_QWORD *)this + 4);
  v3 = (char *)*((_QWORD *)this + 5);
  v5 = &v3[v4 - *((_QWORD *)this + 6)];
  v6 = *((_QWORD *)this + 7) - (_QWORD)v3;
  if (v4)
    v7 = v4 >> 1;
  else
    v7 = *((_QWORD *)this + 2);
  if (v7 <= a2)
    v7 = a2;
  v8 = (*((_QWORD *)this + 3) + v4 + v7 - 1) & -*((_QWORD *)this + 3);
  *((_QWORD *)this + 4) = v8;
  v9 = *(_QWORD *)this;
  if (!v3)
  {
    if (v9)
      result = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v8);
    else
      result = (char *)operator new[]();
    goto LABEL_13;
  }
  if (v9)
  {
    result = (char *)(*(uint64_t (**)(uint64_t, char *, unint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v9 + 32))(v9, v3, v4, v8, v5, v6);
LABEL_13:
    v11 = result;
    goto LABEL_14;
  }
  v11 = (char *)operator new[]();
  memcpy(&v11[v8 - v5], &v3[v4 - v5], v5);
  memcpy(v11, v3, v6);
  result = (char *)MEMORY[0x24268D8D8](v3, 0x1000C8077774924);
LABEL_14:
  v12 = &v11[*((_QWORD *)this + 4) - v5];
  *((_QWORD *)this + 5) = v11;
  *((_QWORD *)this + 6) = v12;
  *((_QWORD *)this + 7) = &v11[v6];
  return result;
}

char *flatbuffers::FlatBufferBuilder::AddStruct<Air::Version>(char *result, uint64_t a2, uint64_t *a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;

  if (a3)
  {
    v5 = result;
    flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)result, 4uLL);
    v6 = *((_QWORD *)v5 + 6);
    if ((unint64_t)(v6 - *((_QWORD *)v5 + 7)) <= 0xB)
    {
      flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v5, 0xCuLL);
      v6 = *((_QWORD *)v5 + 6);
    }
    *((_QWORD *)v5 + 6) = v6 - 12;
    v7 = *a3;
    *(_DWORD *)(v6 - 4) = *((_DWORD *)a3 + 2);
    *(_QWORD *)(v6 - 12) = v7;
    return flatbuffers::FlatBufferBuilder::TrackField(v5, a2, *((_DWORD *)v5 + 8) - *((_DWORD *)v5 + 12) + *((_DWORD *)v5 + 10));
  }
  return result;
}

char *flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(char *result, uint64_t a2, int a3, int a4)
{
  char *v5;
  unsigned int v6;

  v5 = result;
  if (a3 != a4 || result[80])
  {
    v6 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)result, a3);
    return flatbuffers::FlatBufferBuilder::TrackField(v5, a2, v6);
  }
  return result;
}

uint64_t flatbuffers::FlatBufferBuilder::PushElement<unsigned char>(uint64_t a1, char a2)
{
  uint64_t v4;

  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 1uLL);
  v4 = *(_QWORD *)(a1 + 48);
  if (v4 == *(_QWORD *)(a1 + 56))
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 1uLL);
    v4 = *(_QWORD *)(a1 + 48);
  }
  *(_QWORD *)(a1 + 48) = v4 - 1;
  *(_BYTE *)(v4 - 1) = a2;
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

uint64_t flatbuffers::FlatBufferBuilder::EndTable(flatbuffers::FlatBufferBuilder *this, __int16 a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int16 v7;
  unint64_t v8;
  unsigned __int16 *v9;
  uint64_t v10;
  char *v11;
  _WORD *v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  size_t v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;

  v4 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, 0);
  if ((unsigned __int16)(*((_WORD *)this + 34) + 2) <= 4u)
    v5 = 4;
  else
    v5 = (unsigned __int16)(*((_WORD *)this + 34) + 2);
  *((_WORD *)this + 34) = v5;
  v6 = *((_QWORD *)this + 6);
  if (v6 - *((_QWORD *)this + 7) < v5)
  {
    flatbuffers::vector_downward::reallocate(this, v5);
    v6 = *((_QWORD *)this + 6);
  }
  *((_QWORD *)this + 6) = v6 - v5;
  bzero((void *)(v6 - v5), v5);
  v7 = v4 - a2;
  v9 = (unsigned __int16 *)*((_QWORD *)this + 6);
  v8 = *((_QWORD *)this + 7);
  v9[1] = v7;
  *v9 = *((_WORD *)this + 34);
  v10 = *((unsigned int *)this + 16);
  v11 = (char *)(v8 - 8 * v10);
  if ((_DWORD)v10)
  {
    v12 = (_WORD *)(v8 - 8 * v10);
    do
    {
      *(unsigned __int16 *)((char *)v9 + (unsigned __int16)v12[2]) = v4 - *v12;
      v12 += 4;
    }
    while ((unint64_t)v12 < v8);
  }
  *((_QWORD *)this + 7) = v11;
  *((_DWORD *)this + 16) = 0;
  *((_WORD *)this + 34) = 0;
  v13 = *((_QWORD *)this + 4);
  v14 = *((_QWORD *)this + 5);
  v15 = v13 - (_DWORD)v9 + v14;
  if (*((_BYTE *)this + 81) && v14 < (unint64_t)v11)
  {
    v16 = *v9;
    v17 = v14 + v13;
    v18 = (unsigned int *)*((_QWORD *)this + 5);
    while (1)
    {
      v19 = *v18;
      if ((_DWORD)v16 == *(unsigned __int16 *)(v17 - v19) && !memcmp((const void *)(v17 - v19), v9, v16))
        break;
      if (++v18 >= (unsigned int *)v11)
      {
        v15 = v13 - (_DWORD)v9 + v14;
        goto LABEL_17;
      }
    }
    v9 = (unsigned __int16 *)((char *)v9 + (v13 - (_DWORD)v9 + v14 - v4));
    *((_QWORD *)this + 6) = v9;
    v15 = v19;
  }
LABEL_17:
  if (v15 == (_DWORD)v13 + (_DWORD)v14 - (_DWORD)v9)
  {
    if ((unint64_t)((char *)v9 - v11) <= 3)
    {
      flatbuffers::vector_downward::reallocate(this, 4uLL);
      v11 = (char *)*((_QWORD *)this + 7);
      v13 = *((_QWORD *)this + 4);
      v14 = *((_QWORD *)this + 5);
    }
    *(_DWORD *)v11 = v15;
    *((_QWORD *)this + 7) = v11 + 4;
  }
  *(_DWORD *)(v14 + v13 - v4) = v15 - v4;
  *((_BYTE *)this + 70) = 0;
  return v4;
}

uint64_t flatbuffers::FlatBufferBuilder::Finish(flatbuffers::FlatBufferBuilder *this, int a2, const char *a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  *((_QWORD *)this + 7) = *((_QWORD *)this + 5);
  v8 = 4;
  if (a4)
    v8 = 8;
  flatbuffers::FlatBufferBuilder::PreAlign(this, v8 + 4 * (a3 != 0), *((_QWORD *)this + 9));
  if (a3)
  {
    v9 = *((_QWORD *)this + 6);
    if ((unint64_t)(v9 - *((_QWORD *)this + 7)) <= 3)
    {
      flatbuffers::vector_downward::reallocate(this, 4uLL);
      v9 = *((_QWORD *)this + 6);
    }
    *((_QWORD *)this + 6) = v9 - 4;
    *(_DWORD *)(v9 - 4) = *(_DWORD *)a3;
  }
  flatbuffers::FlatBufferBuilder::Align(this, 4uLL);
  result = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, *((_DWORD *)this + 8) - *((_DWORD *)this + 12) + *((_DWORD *)this + 10) - a2 + 4);
  if (a4)
    result = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, *((_DWORD *)this + 8) - *((_DWORD *)this + 12) + *((_DWORD *)this + 10));
  *((_BYTE *)this + 71) = 1;
  return result;
}

char *flatbuffers::FlatBufferBuilder::PreAlign(flatbuffers::FlatBufferBuilder *this, uint64_t a2, unint64_t a3)
{
  if (*((_QWORD *)this + 9) < a3)
    *((_QWORD *)this + 9) = a3;
  return flatbuffers::vector_downward::fill((char *)this, (a3 - 1) & (-a2 - (*((_DWORD *)this + 8) - *((_DWORD *)this + 12) + *((_DWORD *)this + 10))));
}

_QWORD *flatbuffers::vector_downward::push(_QWORD *this, const unsigned __int8 *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;

  if (a3)
  {
    v5 = this;
    v6 = this[6];
    if (v6 - this[7] < a3)
    {
      flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)this, a3);
      v6 = v5[6];
    }
    v5[6] = v6 - a3;
    return memcpy((void *)(v6 - a3), __src, a3);
  }
  return this;
}

void flatbuffers::FlatBufferBuilder::~FlatBufferBuilder(flatbuffers::FlatBufferBuilder *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    std::__tree<std::__value_type<llvm::Function *,llvm::Value *>,std::__map_value_compare<llvm::Function *,std::__value_type<llvm::Function *,llvm::Value *>,std::less<llvm::Function *>,true>,std::allocator<std::__value_type<llvm::Function *,llvm::Value *>>>::destroy(*((_QWORD *)this + 11), *(_QWORD **)(v2 + 8));
    MEMORY[0x24268D8F0](v2, 0x1060C40C2B13FB5);
  }
  flatbuffers::vector_downward::~vector_downward(this);
}

void flatbuffers::vector_downward::~vector_downward(flatbuffers::vector_downward *this)
{
  flatbuffers::vector_downward::clear_buffer(this);
  if (*((_BYTE *)this + 8) && *(_QWORD *)this)
    (*(void (**)(_QWORD))(**(_QWORD **)this + 8))(*(_QWORD *)this);
  *(_QWORD *)this = 0;
  *((_BYTE *)this + 8) = 0;
}

_QWORD *flatbuffers::vector_downward::clear_buffer(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = this;
  v2 = this[5];
  if (v2)
  {
    v3 = *this;
    if (*v1)
      this = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
    else
      this = (_QWORD *)MEMORY[0x24268D8D8](v2, 0x1000C8077774924);
  }
  v1[5] = 0;
  return this;
}

void flatbuffers::DetachedBuffer::~DetachedBuffer(flatbuffers::DetachedBuffer *this)
{
  uint64_t v2;
  _OWORD *v3;
  uint64_t v4;

  v3 = (_OWORD *)((char *)this + 16);
  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v4 = *(_QWORD *)this;
    if (*(_QWORD *)this)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    else
      MEMORY[0x24268D8D8](v2, 0x1000C8077774924);
  }
  if (*((_BYTE *)this + 8) && *(_QWORD *)this)
    (*(void (**)(_QWORD))(**(_QWORD **)this + 8))(*(_QWORD *)this);
  *(_QWORD *)this = 0;
  *((_BYTE *)this + 8) = 0;
  *v3 = 0u;
  v3[1] = 0u;
}

_QWORD *std::__hash_table<std::__hash_value_type<MTLUINT256_t,ReadModuleParameters *>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,ReadModuleParameters *>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,ReadModuleParameters *>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,ReadModuleParameters *>>>::__emplace_unique_key_args<MTLUINT256_t,std::piecewise_construct_t const&,std::tuple<MTLUINT256_t const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  __int128 v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == *a2 && i[3] == a2[1] && i[4] == a2[2] && i[5] == a2[3])
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x38uLL);
  *i = 0;
  i[1] = v7;
  v16 = (*a4)[1];
  *((_OWORD *)i + 1) = **a4;
  *((_OWORD *)i + 2) = v16;
  i[6] = 0;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v8 || (float)(v18 * (float)v8) < v17)
  {
    v19 = 1;
    if (v8 >= 3)
      v19 = (v8 & (v8 - 1)) != 0;
    v20 = v19 | (2 * v8);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>>>::__rehash<true>(a1, v22);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *i = *v24;
LABEL_48:
    *v24 = i;
    goto LABEL_49;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v23 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v25 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v25 >= v8)
        v25 %= v8;
    }
    else
    {
      v25 &= v8 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_48;
  }
LABEL_49:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_241038604(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char **llvm::SmallVector<llvm::SMFixIt,4u>::~SmallVector(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 40 * v3;
    do
    {
      if (v2[v4 - 1] < 0)
        operator delete(*(void **)&v2[v4 - 24]);
      v4 -= 40;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t MTLCompilerObject::buildRequest(uint64_t a1, unsigned int a2, void *a3, unsigned int *a4, unint64_t a5, uint64_t a6)
{
  int v8;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  void *p_p;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  size_t v20;
  uint64_t MachO;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  llvm::Module *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(_QWORD, unsigned int *, unint64_t, _QWORD, _QWORD, uint8_t *, uint8_t *, __int128 *, char *, __int128 *, char *, uint8_t *);
  int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  BOOL v48;
  int v49;
  uint64_t LibraryInfo;
  unsigned int FunctionsCount;
  uint64_t v52;
  uint64_t v53;
  uint64_t Module;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  const char *v68;
  _DWORD *v69;
  uint64_t v70;
  uint64_t Function;
  _DWORD *v72;
  uint8_t v73;
  _DWORD *v74;
  uint64_t i;
  int *v76;
  int v77;
  int v78;
  int v79;
  _DWORD *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  int v88;
  uint8_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  unsigned int v97;
  unsigned int v98;
  unint64_t v99;
  _QWORD *v100;
  char *v101;
  uint64_t (*ComposeImageFuncFromLibrariesSPI)(void **, void **, void **, uint64_t *);
  uint64_t v103;
  llvm::Value *v104;
  unint64_t v105;
  uint64_t v106;
  char *v107;
  int v108;
  _QWORD *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  char *v118;
  size_t v119;
  void *Name;
  uint64_t (*ComposeImageFuncSPI)(_QWORD, void **, void **, uint64_t *);
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  void *v125;
  void *v126;
  char *v127;
  char *v128;
  uint64_t v129;
  void *v130;
  uint64_t AsObject;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  char *v135;
  uint64_t *v136;
  char *v137;
  uint64_t *v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char v143;
  unsigned int *v144;
  unint64_t v145;
  uint64_t v146;
  _DWORD *v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t *v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  char *v156;
  uint64_t *v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t *v163;
  uint64_t *v164;
  char *v165;
  char *v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  char *v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  char *v174;
  uint64_t *v175;
  char *v176;
  char *v177;
  uint64_t v178;
  char *v179;
  char *v180;
  char *v181;
  uint64_t v182;
  int v183;
  uint64_t *v184;
  uint64_t *v185;
  char **v186;
  char *v187;
  char *v188;
  char *v189;
  char *v190;
  char *v191;
  uint64_t v192;
  _QWORD *v193;
  char *v194;
  _QWORD *v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  unint64_t v199;
  char *v200;
  char *v201;
  char *v202;
  int v203;
  unint64_t v204;
  uint64_t v205;
  void *v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  char *v210;
  void *v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  unint64_t v215;
  char *v216;
  char *v217;
  unint64_t v218;
  char *v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  unint64_t v223;
  char *v224;
  char *v225;
  char *v226;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  _DWORD *v237;
  int v238;
  const char *v239;
  uint64_t v240;
  uint64_t v241;
  char **v242;
  void *v244;
  void *v245;
  uint64_t v246;
  char *v247;
  uint64_t v248;
  void *v249;
  uint64_t v250;
  void *v251;
  void *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  void *v256;
  uint64_t *v257;
  uint64_t *v258;
  void *v259;
  uint64_t *v260;
  uint64_t *v261;
  void *v262;
  char *v263;
  char *v264;
  uint64_t v265;
  char *__s1;
  void *v267;
  char *v268;
  uint64_t v269;
  uint64_t v270;
  size_t v271;
  void *__p;
  uint64_t v273;
  uint64_t DiagnosticContext;
  uint64_t v275[2];
  uint8_t buf[32];
  __int128 v277;
  __int128 v278;
  uint64_t v279;
  uint8_t v280[24];
  const char *v281;
  __int16 v282;
  double v283;
  uint64_t v284;

  v8 = (int)a3;
  v284 = *MEMORY[0x24BDAC8D0];
  llvm::install_fatal_error_handler((llvm *)fatalErrorHandler, 0, a3);
  free(*(void **)(a1 + 120));
  *(_QWORD *)(a1 + 120) = 0;
  v242 = (char **)(a1 + 120);
  *(_WORD *)(a1 + 128) = 0;
  v12 = "MTLSpecializeFunction request type is deprecated, use MTLSpecializeFunctionToArchive";
  switch(v8)
  {
    case 0:
      *(_DWORD *)v280 = 0;
      MTLBuildRequestTypeToString(v280, buf);
      MTLCompilerObject::buildRequest(a1, (uint64_t)buf);
      abort();
    case 1:
      if ((*a4 & 0x30000000) != 0x10000000)
        goto LABEL_20;
      if (MTLCompilerObject::buildRequest(unsigned int,unsigned int,void const*,unsigned long,void({block_pointer})(unsigned int,void const*,unsigned long,char const*))::requestCount > 0)
        goto LABEL_433;
      ++MTLCompilerObject::buildRequest(unsigned int,unsigned int,void const*,unsigned long,void({block_pointer})(unsigned int,void const*,unsigned long,char const*))::requestCount;
LABEL_20:
      if (a2 >= (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 3))
LABEL_433:
        abort();
      v278 = 0u;
      *(_QWORD *)buf = a4;
      *(_QWORD *)&buf[8] = a5;
      *(_QWORD *)&buf[16] = a2;
      *(_QWORD *)&buf[24] = a6;
      *(_QWORD *)&v277 = a4;
      *((_QWORD *)&v277 + 1) = 1;
      DWORD2(v278) = 0;
      MTLCompilerObject::backendCompileExecutableRequest(a1, (uint64_t)buf);
      return llvm::remove_fatal_error_handler((llvm *)MachO);
    case 3:
    case 13:
      memset(v280, 0, sizeof(v280));
      LODWORD(v267) = v8;
      MTLBuildRequestTypeToString(&v267, &__p);
      if (logCompileBegin(std::string const&,unsigned long long &,char const*,std::string const&)::onceToken != -1)
        dispatch_once(&logCompileBegin(std::string const&,unsigned long long &,char const*,std::string const&)::onceToken, &__block_literal_global_165);
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(a1 + 159) >= 0)
          v13 = a1 + 136;
        else
          v13 = *(_QWORD *)(a1 + 136);
        p_p = &__p;
        if (DiagnosticContext < 0)
          p_p = __p;
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = v13;
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = p_p;
        *(_WORD *)&buf[22] = 2080;
        *(_QWORD *)&buf[24] = "source";
        _os_log_impl(&dword_240FA3000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "Compilation BEGIN (ParentProcessName=%{public}s) Build request: %{public}s - %s", buf, 0x20u);
      }
      v15 = mach_absolute_time();
      v240 = a6;
      if (SHIBYTE(DiagnosticContext) < 0)
        operator delete(__p);
      v271 = 0;
      MEMORY[0x24268CA5C](&v270);
      v234 = a1 + 136;
      v236 = v15;
      __p = &v270;
      DiagnosticContext = llvm::LLVMContext::getDiagnosticContext((llvm::LLVMContext *)&v270);
      v273 = llvm::LLVMContext::getDiagnosticHandlerCallBack((llvm::LLVMContext *)&v270);
      llvm::LLVMContext::setDiagnosticHandlerCallBack();
      v16 = a4[1];
      v17 = (uint64_t)a4 + *a4 + 19;
      v268 = 0;
      v269 = 0;
      v267 = &v270;
      v18 = v17 & 0xFFFFFFFFFFFFFFFCLL;
      v19 = (_BYTE *)((v17 & 0xFFFFFFFFFFFFFFFCLL) + v16);
      if ((v17 & 0xFFFFFFFFFFFFFFFCLL) != 0)
        v20 = strlen((const char *)((v17 & 0xFFFFFFFFFFFFFFFCLL) + v16));
      else
        v20 = 0;
      llvm::SmallVectorImpl<char>::append<char const*,void>(&v267, v19, &v19[v20]);
      llvm::SmallVectorImpl<char>::append<char const*,void>(&v267, " ", "");
      v43 = a4[3];
      if ((v43 & 1) != 0)
      {
        llvm::SmallVectorImpl<char>::append<char const*,void>(&v267, "-Os ", "");
        v43 = a4[3];
      }
      if ((v43 & 2) != 0)
        v44 = mach_absolute_time();
      else
        v44 = 0;
      __s1 = 0;
      if (v8 == 13)
      {
        v45 = v44;
        v264 = 0;
        v265 = 0;
        v262 = 0;
        v263 = 0;
        v46 = a4[1];
        if ((_DWORD)v46)
        {
          v259 = 0;
          v260 = 0;
          v261 = 0;
          v256 = 0;
          v257 = 0;
          v258 = 0;
          v255 = 0;
          llvm::SmallVectorTemplateBase<char,true>::push_back((uint64_t)&v267, 0);
          --v268;
          v47 = MTLGPUCompilerCompileFromSource();
          v48 = v47 != 0;
          if (v47)
          {
            AsObject = MTLModuleGetAsObject();
            v132 = ((char *)v257 - (_BYTE *)v256) >> 3;
            if ((unint64_t)(v132 + 1) >> 61)
              std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
            v133 = ((char *)v258 - (_BYTE *)v256) >> 2;
            if (v133 <= v132 + 1)
              v133 = v132 + 1;
            if ((unint64_t)((char *)v258 - (_BYTE *)v256) >= 0x7FFFFFFFFFFFFFF8)
              v134 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v134 = v133;
            if (v134)
              v135 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v258, v134);
            else
              v135 = 0;
            v136 = (uint64_t *)&v135[8 * v132];
            v137 = &v135[8 * v134];
            *v136 = AsObject;
            v138 = v136 + 1;
            v140 = (char *)v256;
            v139 = (char *)v257;
            if (v257 != v256)
            {
              do
              {
                v141 = *((_QWORD *)v139 - 1);
                v139 -= 8;
                *--v136 = v141;
              }
              while (v139 != v140);
              v139 = (char *)v256;
            }
            v256 = v136;
            v257 = v138;
            v258 = (uint64_t *)v137;
            if (v139)
              operator delete(v139);
            v142 = a1;
            v257 = v138;
            if (v46 < 5)
            {
              v183 = 1;
            }
            else
            {
              v143 = 1;
              do
              {
                v144 = (unsigned int *)((v18 + 3) & 0xFFFFFFFFFFFFFFFCLL);
                if ((v143 & 1) != 0)
                  v145 = 0;
                else
                  v145 = v18 - (_QWORD)v144;
                v148 = *v144;
                v147 = v144 + 1;
                v146 = v148;
                snprintf((char *)buf, 0x20uLL, "%s%zu", "linked-air-blob-", ((char *)v260 - (_BYTE *)v259) >> 3);
                v149 = LLVMCreateMemoryBufferWithMemoryRange();
                v150 = v149;
                v151 = v260;
                if (v260 >= v261)
                {
                  v153 = ((char *)v260 - (_BYTE *)v259) >> 3;
                  if ((unint64_t)(v153 + 1) >> 61)
                    std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
                  v154 = ((char *)v261 - (_BYTE *)v259) >> 2;
                  if (v154 <= v153 + 1)
                    v154 = v153 + 1;
                  if ((unint64_t)((char *)v261 - (_BYTE *)v259) >= 0x7FFFFFFFFFFFFFF8)
                    v155 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v155 = v154;
                  if (v155)
                    v156 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v261, v155);
                  else
                    v156 = 0;
                  v157 = (uint64_t *)&v156[8 * v153];
                  *v157 = v150;
                  v152 = v157 + 1;
                  v159 = (char *)v259;
                  v158 = (char *)v260;
                  if (v260 != v259)
                  {
                    do
                    {
                      v160 = *((_QWORD *)v158 - 1);
                      v158 -= 8;
                      *--v157 = v160;
                    }
                    while (v158 != v159);
                    v158 = (char *)v259;
                  }
                  v259 = v157;
                  v260 = v152;
                  v261 = (uint64_t *)&v156[8 * v155];
                  if (v158)
                    operator delete(v158);
                }
                else
                {
                  *v260 = v149;
                  v152 = v151 + 1;
                }
                v260 = v152;
                v254 = 0;
                v161 = MTLObjectCreate();
                v162 = v161;
                if (v161)
                {
                  v163 = v257;
                  if (v257 >= v258)
                  {
                    v167 = ((char *)v257 - (_BYTE *)v256) >> 3;
                    if ((unint64_t)(v167 + 1) >> 61)
                      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
                    v168 = ((char *)v258 - (_BYTE *)v256) >> 2;
                    if (v168 <= v167 + 1)
                      v168 = v167 + 1;
                    if ((unint64_t)((char *)v258 - (_BYTE *)v256) >= 0x7FFFFFFFFFFFFFF8)
                      v169 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v169 = v168;
                    if (v169)
                      v170 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v258, v169);
                    else
                      v170 = 0;
                    v175 = (uint64_t *)&v170[8 * v167];
                    *v175 = v162;
                    v164 = v175 + 1;
                    v177 = (char *)v256;
                    v176 = (char *)v257;
                    if (v257 != v256)
                    {
                      do
                      {
                        v178 = *((_QWORD *)v176 - 1);
                        v176 -= 8;
                        *--v175 = v178;
                      }
                      while (v176 != v177);
                      v176 = (char *)v256;
                    }
                    v256 = v175;
                    v257 = v164;
                    v258 = (uint64_t *)&v170[8 * v169];
                    if (v176)
                      operator delete(v176);
                  }
                  else
                  {
                    *v257 = v161;
                    v164 = v163 + 1;
                  }
                  v257 = v164;
                }
                else
                {
                  v165 = v263;
                  if (v263 >= v264)
                  {
                    v171 = (v263 - (_BYTE *)v262) >> 3;
                    if ((unint64_t)(v171 + 1) >> 61)
                      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
                    v172 = (v264 - (_BYTE *)v262) >> 2;
                    if (v172 <= v171 + 1)
                      v172 = v171 + 1;
                    if ((unint64_t)(v264 - (_BYTE *)v262) >= 0x7FFFFFFFFFFFFFF8)
                      v173 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v173 = v172;
                    if (v173)
                      v174 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v264, v173);
                    else
                      v174 = 0;
                    v179 = &v174[8 * v171];
                    *(_QWORD *)v179 = v254;
                    v166 = v179 + 8;
                    v181 = (char *)v262;
                    v180 = v263;
                    if (v263 != v262)
                    {
                      do
                      {
                        v182 = *((_QWORD *)v180 - 1);
                        v180 -= 8;
                        *((_QWORD *)v179 - 1) = v182;
                        v179 -= 8;
                      }
                      while (v180 != v181);
                      v180 = (char *)v262;
                    }
                    v262 = v179;
                    v263 = v166;
                    v264 = &v174[8 * v173];
                    if (v180)
                      operator delete(v180);
                  }
                  else
                  {
                    *(_QWORD *)v263 = v254;
                    v166 = v165 + 8;
                  }
                  v48 = 0;
                  v263 = v166;
                }
                v183 = v48;
                if (!v48)
                  break;
                v143 = 0;
                v46 = v46 + v145 - v146 - 4;
                v18 = (unint64_t)v147 + v146;
              }
              while (v46 > 4);
            }
            a1 = v142;
            if (v183)
            {
              llvm::SmallVectorTemplateBase<char,true>::push_back((uint64_t)&v267, 0);
              --v268;
              v48 = MTLGPUCompilerLinkToBuffer() != 0;
              if (__s1)
                std::vector<char *>::push_back[abi:ne180100](&v262, &__s1);
            }
          }
          else
          {
            v48 = 0;
          }
          v184 = (uint64_t *)v259;
          v185 = v260;
          while (v184 != v185)
          {
            LLVMDisposeMemoryBuffer();
            ++v184;
          }
          if (v256)
          {
            v257 = (uint64_t *)v256;
            operator delete(v256);
          }
          if (v259)
          {
            v260 = (uint64_t *)v259;
            operator delete(v259);
          }
        }
        else
        {
          llvm::SmallVectorTemplateBase<char,true>::push_back((uint64_t)&v267, 0);
          --v268;
          v48 = MTLGPUCompilerBuildFromSourceToBuffer() != 0;
          v115 = (v263 - (_BYTE *)v262) >> 3;
          if ((unint64_t)(v115 + 1) >> 61)
            std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
          v116 = (v264 - (_BYTE *)v262) >> 2;
          if (v116 <= v115 + 1)
            v116 = v115 + 1;
          if ((unint64_t)(v264 - (_BYTE *)v262) >= 0x7FFFFFFFFFFFFFF8)
            v117 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v117 = v116;
          if (v117)
            v118 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v264, v117);
          else
            v118 = 0;
          v186 = (char **)&v118[8 * v115];
          v187 = &v118[8 * v117];
          *v186 = __s1;
          v188 = (char *)(v186 + 1);
          v190 = (char *)v262;
          v189 = v263;
          if (v263 != v262)
          {
            do
            {
              v191 = (char *)*((_QWORD *)v189 - 1);
              v189 -= 8;
              *--v186 = v191;
            }
            while (v189 != v190);
            v189 = (char *)v262;
          }
          v262 = v186;
          v263 = v188;
          v264 = v187;
          if (v189)
            operator delete(v189);
          v263 = v188;
        }
        if ((a4[3] & 2) != 0)
        {
          v99 = (unint64_t)(*(double *)&gMachTimeToNS * (double)(mach_absolute_time() - v45));
          v193 = *(_QWORD **)&v280[8];
          if (*(_QWORD *)&v280[8] >= *(_QWORD *)&v280[16])
          {
            v195 = *(_QWORD **)v280;
            v196 = (uint64_t)(*(_QWORD *)&v280[8] - *(_QWORD *)v280) >> 4;
            v197 = v196 + 1;
            if ((unint64_t)(v196 + 1) >> 60)
              std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
            v198 = *(_QWORD *)&v280[16] - *(_QWORD *)v280;
            if ((uint64_t)(*(_QWORD *)&v280[16] - *(_QWORD *)v280) >> 3 > v197)
              v197 = v198 >> 3;
            if ((unint64_t)v198 >= 0x7FFFFFFFFFFFFFF0)
              v199 = 0xFFFFFFFFFFFFFFFLL;
            else
              v199 = v197;
            if (v199)
            {
              v200 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SmallVertexPartialLoad>>((uint64_t)&v280[16], v199);
              v195 = *(_QWORD **)v280;
              v193 = *(_QWORD **)&v280[8];
            }
            else
            {
              v200 = 0;
            }
            v201 = &v200[16 * v196];
            v202 = &v200[16 * v199];
            *(_DWORD *)v201 = 0;
            *((_QWORD *)v201 + 1) = v99;
            v194 = v201 + 16;
            if (v193 != v195)
            {
              do
              {
                *((_OWORD *)v201 - 1) = *((_OWORD *)v193 - 1);
                v201 -= 16;
                v193 -= 2;
              }
              while (v193 != v195);
              v195 = *(_QWORD **)v280;
            }
            *(_QWORD *)v280 = v201;
            *(_QWORD *)&v280[8] = v194;
            *(_QWORD *)&v280[16] = v202;
            if (v195)
              operator delete(v195);
          }
          else
          {
            **(_DWORD **)&v280[8] = 0;
            v193[1] = v99;
            v194 = (char *)(v193 + 2);
          }
          *(_QWORD *)&v280[8] = v194;
          if (((unint64_t)&v194[-*(_QWORD *)v280] >> 4) == -2)
            v192 = 0;
          else
            v192 = 12 * (((unint64_t)&v194[-*(_QWORD *)v280] >> 4) + 2) + 4;
        }
        else
        {
          v192 = 0;
          v99 = 0;
        }
        v238 = v48;
        v129 = (uint64_t)MTLCompilerObject::serializeLibraryToArchiveReply(a1, &v271, (const char **)v262, (v263 - (_BYTE *)v262) >> 3, v238, v265, v192);
        if (v265)
          LLVMDisposeMemoryBuffer();
        v130 = v262;
        if (v262)
        {
          v263 = (char *)v262;
          goto LABEL_368;
        }
      }
      else
      {
        v231 = v44;
        memset(buf, 0, 24);
        v259 = 0;
        llvm::SmallVectorTemplateBase<char,true>::push_back((uint64_t)&v267, 0);
        --v268;
        v49 = MTLGPUCompilerBuildFromSource();
        v238 = v49 != 0;
        if (v49)
        {
          MTLObjectGetAsMetalLib();
          LibraryInfo = createLibraryInfo();
          FunctionsCount = MTLMetalLibGetFunctionsCount();
          if (FunctionsCount)
          {
            v232 = a1;
            v52 = 0;
            v53 = FunctionsCount;
            do
            {
              MTLMetalLibGetFunctionNo();
              Module = MTLMetalFunctionGetModule();
              v55 = Module;
              v56 = *(_QWORD *)&buf[8];
              v57 = *(_QWORD **)buf;
              if (*(_QWORD *)buf != *(_QWORD *)&buf[8])
              {
                while (*v57 != Module)
                {
                  if (++v57 == *(_QWORD **)&buf[8])
                  {
                    v57 = *(_QWORD **)&buf[8];
                    break;
                  }
                }
              }
              if (v57 == *(_QWORD **)&buf[8])
              {
                if (*(_QWORD *)&buf[8] >= *(_QWORD *)&buf[16])
                {
                  v59 = (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3;
                  if ((unint64_t)(v59 + 1) >> 61)
                    std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
                  v60 = (uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 2;
                  if (v60 <= v59 + 1)
                    v60 = v59 + 1;
                  if (*(_QWORD *)&buf[16] - *(_QWORD *)buf >= 0x7FFFFFFFFFFFFFF8uLL)
                    v61 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v61 = v60;
                  if (v61)
                    v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&buf[16], v61);
                  else
                    v62 = 0;
                  v63 = (uint64_t *)&v62[8 * v59];
                  *v63 = v55;
                  v58 = v63 + 1;
                  v65 = *(char **)buf;
                  v64 = *(char **)&buf[8];
                  if (*(_QWORD *)&buf[8] != *(_QWORD *)buf)
                  {
                    do
                    {
                      v66 = *((_QWORD *)v64 - 1);
                      v64 -= 8;
                      *--v63 = v66;
                    }
                    while (v64 != v65);
                    v64 = *(char **)buf;
                  }
                  *(_QWORD *)buf = v63;
                  *(_QWORD *)&buf[8] = v58;
                  *(_QWORD *)&buf[16] = &v62[8 * v61];
                  if (v64)
                    operator delete(v64);
                }
                else
                {
                  **(_QWORD **)&buf[8] = Module;
                  v58 = (_QWORD *)(v56 + 8);
                }
                *(_QWORD *)&buf[8] = v58;
              }
              ++v52;
            }
            while (v52 != v53);
            a1 = v232;
          }
        }
        else
        {
          LibraryInfo = 0;
        }
        v97 = a4[3];
        if ((v97 & 2) != 0)
        {
          v99 = (unint64_t)(*(double *)&gMachTimeToNS * (double)(mach_absolute_time() - v231));
          v100 = *(_QWORD **)&v280[8];
          if (*(_QWORD *)&v280[8] >= *(_QWORD *)&v280[16])
          {
            v109 = *(_QWORD **)v280;
            v110 = (uint64_t)(*(_QWORD *)&v280[8] - *(_QWORD *)v280) >> 4;
            v111 = v110 + 1;
            if ((unint64_t)(v110 + 1) >> 60)
              std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
            v112 = *(_QWORD *)&v280[16] - *(_QWORD *)v280;
            if ((uint64_t)(*(_QWORD *)&v280[16] - *(_QWORD *)v280) >> 3 > v111)
              v111 = v112 >> 3;
            if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFF0)
              v113 = 0xFFFFFFFFFFFFFFFLL;
            else
              v113 = v111;
            if (v113)
            {
              v114 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SmallVertexPartialLoad>>((uint64_t)&v280[16], v113);
              v109 = *(_QWORD **)v280;
              v100 = *(_QWORD **)&v280[8];
            }
            else
            {
              v114 = 0;
            }
            v127 = &v114[16 * v110];
            v128 = &v114[16 * v113];
            *(_DWORD *)v127 = 0;
            *((_QWORD *)v127 + 1) = v99;
            v101 = v127 + 16;
            if (v100 != v109)
            {
              do
              {
                *((_OWORD *)v127 - 1) = *((_OWORD *)v100 - 1);
                v127 -= 16;
                v100 -= 2;
              }
              while (v100 != v109);
              v109 = *(_QWORD **)v280;
            }
            *(_QWORD *)v280 = v127;
            *(_QWORD *)&v280[8] = v101;
            *(_QWORD *)&v280[16] = v128;
            if (v109)
              operator delete(v109);
          }
          else
          {
            **(_DWORD **)&v280[8] = 0;
            v100[1] = v99;
            v101 = (char *)(v100 + 2);
          }
          *(_QWORD *)&v280[8] = v101;
          if (((unint64_t)&v101[-*(_QWORD *)v280] >> 4) == -2)
            v98 = 0;
          else
            v98 = 12 * (((unint64_t)&v101[-*(_QWORD *)v280] >> 4) + 2) + 4;
          v97 = a4[3];
        }
        else
        {
          v98 = 0;
          v99 = 0;
        }
        v129 = MTLCompilerObject::serializeLibraryReply(a1, &v271, __s1, v49 != 0, *(llvm::Module ***)buf, (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3, v98, LibraryInfo, (v97 & 4) != 0, 0, 0);
        if (LibraryInfo)
        {
          v262 = (void *)(LibraryInfo + 96);
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v262);
          v262 = (void *)(LibraryInfo + 72);
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v262);
          v262 = (void *)(LibraryInfo + 48);
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v262);
          v262 = (void *)(LibraryInfo + 24);
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v262);
          if (*(char *)(LibraryInfo + 23) < 0)
            operator delete(*(void **)LibraryInfo);
          MEMORY[0x24268D8F0](LibraryInfo, 0x1032C40E1432ECELL);
        }
        if (v259)
          MTLObjectDestroy();
        v130 = *(void **)buf;
        if (*(_QWORD *)buf)
        {
          *(_QWORD *)&buf[8] = *(_QWORD *)buf;
LABEL_368:
          operator delete(v130);
        }
      }
      if (v267 != &v270)
        free(v267);
      ScopedDiagnosticHandler::~ScopedDiagnosticHandler((ScopedDiagnosticHandler *)&__p);
      llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)&v270);
      v203 = v238;
      if (!v129)
        v203 = 0;
      if (v203 == 1)
      {
        LODWORD(v267) = v8;
        MTLBuildRequestTypeToString(&v267, &__p);
        v204 = (unint64_t)(*(double *)&gMachTimeToNS * (double)(mach_absolute_time() - v236));
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
        {
          v205 = v234;
          if (*(char *)(a1 + 159) < 0)
            v205 = *(_QWORD *)(a1 + 136);
          v206 = &__p;
          if (DiagnosticContext < 0)
            v206 = __p;
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = v205;
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v206;
          *(_WORD *)&buf[22] = 2080;
          *(_QWORD *)&buf[24] = "source";
          LOWORD(v277) = 2048;
          *(double *)((char *)&v277 + 2) = (double)v204 * 0.000001;
          _os_log_impl(&dword_240FA3000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "Compilation SUCCESS (ParentProcessName=%{public}s) (TYPE=%{public}s - %s): Time %f ms ", buf, 0x2Au);
        }
        if (SHIBYTE(DiagnosticContext) < 0)
          operator delete(__p);
        v207 = *(_QWORD *)&v280[8];
        if ((a4[3] & 2) != 0)
        {
          v209 = *(char **)&v280[16];
          if (*(_QWORD *)&v280[8] >= *(_QWORD *)&v280[16])
          {
            v211 = *(void **)v280;
            v212 = (uint64_t)(*(_QWORD *)&v280[8] - *(_QWORD *)v280) >> 4;
            v213 = v212 + 1;
            if ((unint64_t)(v212 + 1) >> 60)
              std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
            v214 = *(_QWORD *)&v280[16] - *(_QWORD *)v280;
            if ((uint64_t)(*(_QWORD *)&v280[16] - *(_QWORD *)v280) >> 3 > v213)
              v213 = v214 >> 3;
            if ((unint64_t)v214 >= 0x7FFFFFFFFFFFFFF0)
              v215 = 0xFFFFFFFFFFFFFFFLL;
            else
              v215 = v213;
            if (v215)
            {
              v216 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SmallVertexPartialLoad>>((uint64_t)&v280[16], v215);
              v211 = *(void **)v280;
              v207 = *(_QWORD *)&v280[8];
            }
            else
            {
              v216 = 0;
            }
            v217 = &v216[16 * v212];
            v209 = &v216[16 * v215];
            *(_DWORD *)v217 = 6;
            *((_QWORD *)v217 + 1) = v204;
            v210 = v217 + 16;
            if ((void *)v207 != v211)
            {
              do
              {
                *((_OWORD *)v217 - 1) = *(_OWORD *)(v207 - 16);
                v217 -= 16;
                v207 -= 16;
              }
              while ((void *)v207 != v211);
              v211 = *(void **)v280;
            }
            *(_QWORD *)v280 = v217;
            *(_QWORD *)&v280[8] = v210;
            *(_QWORD *)&v280[16] = v209;
            if (v211)
            {
              operator delete(v211);
              v209 = *(char **)&v280[16];
            }
          }
          else
          {
            **(_DWORD **)&v280[8] = 6;
            *(_QWORD *)(v207 + 8) = v204;
            v210 = (char *)(v207 + 16);
          }
          *(_QWORD *)&v280[8] = v210;
          v218 = v204 - v99;
          if (v210 >= v209)
          {
            v219 = *(char **)v280;
            v220 = (uint64_t)&v210[-*(_QWORD *)v280] >> 4;
            v221 = v220 + 1;
            if ((unint64_t)(v220 + 1) >> 60)
              std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
            v222 = (uint64_t)&v209[-*(_QWORD *)v280];
            if (v222 >> 3 > v221)
              v221 = v222 >> 3;
            if ((unint64_t)v222 >= 0x7FFFFFFFFFFFFFF0)
              v223 = 0xFFFFFFFFFFFFFFFLL;
            else
              v223 = v221;
            if (v223)
            {
              v224 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SmallVertexPartialLoad>>((uint64_t)&v280[16], v223);
              v219 = *(char **)v280;
              v210 = *(char **)&v280[8];
            }
            else
            {
              v224 = 0;
            }
            v225 = &v224[16 * v220];
            v226 = &v224[16 * v223];
            *(_DWORD *)v225 = 4;
            *((_QWORD *)v225 + 1) = v218;
            v207 = (uint64_t)(v225 + 16);
            if (v210 == v219)
            {
              v208 = v240;
            }
            else
            {
              v208 = v240;
              do
              {
                *((_OWORD *)v225 - 1) = *((_OWORD *)v210 - 1);
                v225 -= 16;
                v210 -= 16;
              }
              while (v210 != v219);
              v219 = *(char **)v280;
            }
            *(_QWORD *)v280 = v225;
            *(_QWORD *)&v280[8] = v207;
            *(_QWORD *)&v280[16] = v226;
            if (v219)
              operator delete(v219);
          }
          else
          {
            *(_DWORD *)v210 = 4;
            *((_QWORD *)v210 + 1) = v218;
            v207 = (uint64_t)(v210 + 16);
            v208 = v240;
          }
          *(_QWORD *)&v280[8] = v207;
        }
        else
        {
          v208 = v240;
        }
        v251 = 0;
        v252 = 0;
        v253 = 0;
        std::vector<CompileTimeData>::__init_with_size[abi:ne180100]<CompileTimeData*,CompileTimeData*>(&v251, *(const void **)v280, v207, (v207 - *(_QWORD *)v280) >> 4);
        serializeCompileTimeDataInReply(v129, (uint64_t)&v251);
        if (v251)
        {
          v252 = v251;
          operator delete(v251);
        }
        (*(void (**)(uint64_t, _QWORD, uint64_t, size_t, _QWORD))(v208 + 16))(v208, 0, v129, v271, 0);
        v126 = (void *)v129;
        goto LABEL_423;
      }
      (*(void (**)(uint64_t))(v240 + 16))(v240);
      goto LABEL_424;
    case 4:
      LODWORD(__p) = 4;
      MTLBuildRequestTypeToString(&__p, v280);
      if (logCompileBegin(std::string const&,unsigned long long &,char const*,std::string const&)::onceToken != -1)
        dispatch_once(&logCompileBegin(std::string const&,unsigned long long &,char const*,std::string const&)::onceToken, &__block_literal_global_165);
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(a1 + 159) >= 0)
          v36 = a1 + 136;
        else
          v36 = *(_QWORD *)(a1 + 136);
        v37 = v280;
        if ((v280[23] & 0x80u) != 0)
          v37 = *(uint8_t **)v280;
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = v36;
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v37;
        *(_WORD *)&buf[22] = 2080;
        *(_QWORD *)&buf[24] = "opaque";
        _os_log_impl(&dword_240FA3000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "Compilation BEGIN (ParentProcessName=%{public}s) Build request: %{public}s - %s", buf, 0x20u);
      }
      v38 = mach_absolute_time();
      if ((char)v280[23] < 0)
        operator delete(*(void **)v280);
      v39 = *(_QWORD *)(a1 + 64);
      if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 72) - v39) >> 3))
        abort();
      v279 = 0;
      v277 = 0u;
      v278 = 0u;
      memset(buf, 0, sizeof(buf));
      v40 = *(_QWORD *)(v39 + 8 * a2);
      *(_BYTE *)(v40 + 138) = 1;
      v41 = *(uint64_t (**)(_QWORD, unsigned int *, unint64_t, _QWORD, _QWORD, uint8_t *, uint8_t *, __int128 *, char *, __int128 *, char *, uint8_t *))(v40 + 32);
      if (v41)
      {
        v42 = v41(*(_QWORD *)(v40 + 112), a4, a5, 0, 0, buf, &buf[8], &v277, (char *)&v277 + 8, &v278, (char *)&v278 + 8, &buf[16]);
      }
      else
      {
        *((_QWORD *)&v278 + 1) = 0;
        v42 = (*(uint64_t (**)(_QWORD, unsigned int *, unint64_t, _QWORD, uint8_t *, uint8_t *, uint8_t *))(v40 + 24))(*(_QWORD *)(v40 + 112), a4, a5, 0, buf, &buf[8], &buf[16]);
      }
      *(_DWORD *)&buf[24] = v42;
      if (v42)
      {
        if (v42 != 1)
          abort();
        v92 = 2;
      }
      else
      {
        v92 = 0;
      }
      (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(a6 + 16))(a6, v92, *(_QWORD *)buf, *(_QWORD *)&buf[8], *(_QWORD *)&buf[16]);
      v93 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * a2);
      if (*(_BYTE *)(v93 + 138))
      {
        (*(void (**)(_QWORD))(v93 + 16))(*(_QWORD *)(v93 + 112));
        *(_BYTE *)(v93 + 138) = 0;
      }
      LODWORD(v267) = 4;
      MTLBuildRequestTypeToString(&v267, &__p);
      v94 = mach_absolute_time();
      MachO = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)MachO)
      {
        if (*(char *)(a1 + 159) >= 0)
          v95 = a1 + 136;
        else
          v95 = *(_QWORD *)(a1 + 136);
        v96 = &__p;
        if (DiagnosticContext < 0)
          v96 = __p;
        *(_DWORD *)v280 = 136446978;
        *(_QWORD *)&v280[4] = v95;
        *(_WORD *)&v280[12] = 2082;
        *(_QWORD *)&v280[14] = v96;
        *(_WORD *)&v280[22] = 2080;
        v281 = "opaque";
        v282 = 2048;
        v283 = (double)(unint64_t)(*(double *)&gMachTimeToNS * (double)(v94 - v38)) * 0.000001;
        _os_log_impl(&dword_240FA3000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "Compilation SUCCESS (ParentProcessName=%{public}s) (TYPE=%{public}s - %s): Time %f ms ", v280, 0x2Au);
      }
      if ((SHIBYTE(DiagnosticContext) & 0x80000000) == 0)
        return llvm::remove_fatal_error_handler((llvm *)MachO);
      MachO = (uint64_t)__p;
      goto LABEL_426;
    case 5:
      v241 = a6;
      v256 = 0;
      memset(v280, 0, sizeof(v280));
      MEMORY[0x24268CA5C](&v271, "MTLSpecializeFunction request type is deprecated, use MTLSpecializeFunctionToArchive");
      __p = &v271;
      DiagnosticContext = llvm::LLVMContext::getDiagnosticContext((llvm::LLVMContext *)&v271);
      v273 = llvm::LLVMContext::getDiagnosticHandlerCallBack((llvm::LLVMContext *)&v271);
      llvm::LLVMContext::setDiagnosticHandlerCallBack();
      LODWORD(v262) = 5;
      MTLBuildRequestTypeToString(&v262, &v267);
      if (logCompileBegin(std::string const&,unsigned long long &,char const*,std::string const&)::onceToken != -1)
        dispatch_once(&logCompileBegin(std::string const&,unsigned long long &,char const*,std::string const&)::onceToken, &__block_literal_global_165);
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(a1 + 159) >= 0)
          v22 = a1 + 136;
        else
          v22 = *(_QWORD *)(a1 + 136);
        v23 = &v267;
        if (v269 < 0)
          v23 = v267;
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = v22;
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v23;
        *(_WORD *)&buf[22] = 2080;
        *(_QWORD *)&buf[24] = "CI SPI";
        _os_log_impl(&dword_240FA3000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "Compilation BEGIN (ParentProcessName=%{public}s) Build request: %{public}s - %s", buf, 0x20u);
      }
      v24 = mach_absolute_time();
      v228 = a1 + 136;
      if (SHIBYTE(v269) < 0)
        operator delete(v267);
      v229 = v24;
      v25 = a4[2];
      v26 = a4[3];
      std::vector<llvm::Module *>::vector(&v267, v25);
      v230 = v25;
      if (!(_DWORD)v25)
        goto LABEL_115;
      v27 = 0;
      v28 = (char *)a4 + v26;
      break;
    case 6:
      goto LABEL_77;
    case 7:
      *(_QWORD *)&buf[16] = 0;
      v278 = 0u;
      *(_QWORD *)buf = a4;
      *(_QWORD *)&buf[8] = a5;
      *(_QWORD *)&buf[24] = a6;
      *(_QWORD *)&v277 = a4;
      *((_QWORD *)&v277 + 1) = 1;
      DWORD2(v278) = 0;
      MTLCompilerObject::downgradeAndLoadModuleRequest((llvm::legacy::PassManager **)a1, (uint64_t)buf);
      return llvm::remove_fatal_error_handler((llvm *)MachO);
    case 8:
      MachO = MTLCompilerObject::logCompilerFailure(a1, a4, a5, a6);
      return llvm::remove_fatal_error_handler((llvm *)MachO);
    case 10:
      if (a2 >= (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 3))
        abort();
      v278 = 0u;
      *(_QWORD *)buf = a4;
      *(_QWORD *)&buf[8] = a5;
      *(_QWORD *)&buf[16] = a2;
      *(_QWORD *)&buf[24] = a6;
      *(_QWORD *)&v277 = a4;
      *((_QWORD *)&v277 + 1) = 5;
      DWORD2(v278) = 4;
      MTLCompilerObject::backendCompileStatelessRequest(a1, (uint64_t)buf);
      return llvm::remove_fatal_error_handler((llvm *)MachO);
    case 11:
      v12 = "MTLStitchFunctionDagRequest request type is deprecated, use MTLStitchFunctionDagToArchive";
LABEL_77:
      MTLCompilerErrorObject::setFormattedErrorMessage(v242, v12);
      MachO = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(a6 + 16))(a6, 2 * (*v242 != 0), 0, 0);
      return llvm::remove_fatal_error_handler((llvm *)MachO);
    case 14:
      MEMORY[0x24268CA5C](buf, "MTLSpecializeFunction request type is deprecated, use MTLSpecializeFunctionToArchive");
      MTLCompilerObject::stitchFunctionDag(a1, (llvm::LLVMContext *)buf, v35, (uint64_t)a4, a5, a6);
      llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)buf);
      return llvm::remove_fatal_error_handler((llvm *)MachO);
    case 15:
      MTLCompilerObject::buildSpecializedFunctionRequest(a1, (uint64_t)a4, a5, v11, a6);
      return llvm::remove_fatal_error_handler((llvm *)MachO);
    case 16:
      MachO = MTLCompilerObject::generateMachO(a1, (uint64_t)a4, a5, a6);
      return llvm::remove_fatal_error_handler((llvm *)MachO);
    case 17:
      MTLCompilerObject::generateBinaryArchiveID(a1, (uint64_t)a4, a5, a6);
      return llvm::remove_fatal_error_handler((llvm *)MachO);
    default:
      *(_DWORD *)v280 = -1;
      MTLBuildRequestTypeToString(v280, buf);
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        MTLCompilerObject::buildRequest();
      if ((char)buf[23] < 0)
        operator delete(*(void **)buf);
      MachO = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, const char *))(a6 + 16))(a6, 2, 0, 0, "Internal compiler error.");
      return llvm::remove_fatal_error_handler((llvm *)MachO);
  }
  do
  {
    v29 = *(unsigned int *)&v28[v27 + 4];
    v247 = (char *)a4 + *(unsigned int *)&v28[v27];
    v248 = v29;
    v249 = &unk_24105C402;
    v250 = 0;
    llvm::getLazyBitcodeModule();
    llvm::expectedToErrorOrAndEmitErrors<std::unique_ptr<llvm::Module>>(v275, (uint64_t)buf);
    llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected((uint64_t)v275);
    if ((buf[16] & 1) != 0)
    {
      (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, const char *))(v241 + 16))(v241, 2, 0, 0, "Failed to read function bitcode.");
      v31 = 1;
      goto LABEL_44;
    }
    v30 = *(llvm::Module **)buf;
    *(_QWORD *)buf = 0;
    llvm::Module::materializeAll(v30);
    if (v262)
    {
      (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, const char *))(v241 + 16))(v241, 2, 0, 0, "Failed to materializeAll.");
LABEL_38:
      v31 = 1;
      goto LABEL_42;
    }
    if (!MTLUpgradeAIRModule())
    {
      (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, const char *))(v241 + 16))(v241, 2, 0, 0, "Failed to upgrade AIR version.");
      if (v30)
      {
        v34 = MEMORY[0x24268D17C](v30);
        MEMORY[0x24268D8F0](v34, 0x10B2C407FF26C1CLL);
      }
      goto LABEL_38;
    }
    v31 = 0;
    *(_QWORD *)((char *)v267 + v27) = v30;
LABEL_42:
    if (v262)
      (*(void (**)(void *))(*(_QWORD *)v262 + 8))(v262);
LABEL_44:
    if ((buf[16] & 1) == 0)
    {
      v32 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (v32)
      {
        v33 = MEMORY[0x24268D17C]();
        MEMORY[0x24268D8F0](v33, 0x10B2C407FF26C1CLL);
      }
    }
    if (v31)
    {
      v107 = 0;
      v105 = 0;
      v108 = 1;
      goto LABEL_214;
    }
    v27 += 8;
  }
  while (8 * v230 != v27);
LABEL_115:
  std::vector<ImageFilterFunctionInfoSPI>::vector(&v262, *a4);
  std::vector<llvm::Function *>::vector(&v259, *a4);
  if (*a4)
  {
    v67 = 0;
    v68 = (const char *)(a4 + 5);
    v69 = (unsigned int *)((char *)a4 + a4[1]);
    v233 = a1;
    do
    {
      v70 = v69[2];
      if (v68)
        strlen(v68);
      Function = llvm::Module::getFunction();
      if (Function)
      {
        memset(&buf[8], 0, 24);
        v72 = v69 + 3;
        v73 = *v69 != 0;
        buf[0] = v73;
        if ((_DWORD)v70)
        {
          v235 = Function;
          v237 = v69;
          v239 = v68;
          v74 = 0;
          for (i = 0; i != v70; ++i)
          {
            v76 = &v72[3 * i];
            v78 = *v76;
            v77 = v76[1];
            v79 = v76[2];
            if ((unint64_t)v74 >= *(_QWORD *)&buf[24])
            {
              v80 = *(_DWORD **)&buf[8];
              v81 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v74 - *(_QWORD *)&buf[8]) >> 2);
              v82 = v81 + 1;
              if (v81 + 1 > 0x1555555555555555)
                std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)&buf[24] - *(_QWORD *)&buf[8]) >> 2) > v82)
                v82 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)&buf[24] - *(_QWORD *)&buf[8]) >> 2);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&buf[24] - *(_QWORD *)&buf[8]) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                v83 = 0x1555555555555555;
              else
                v83 = v82;
              if (v83)
              {
                v84 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ImageFilterFunctionArgumentInfoSPI>>((uint64_t)&buf[24], v83);
                v80 = *(_DWORD **)&buf[8];
                v74 = *(_DWORD **)&buf[16];
              }
              else
              {
                v84 = 0;
              }
              v85 = &v84[12 * v81];
              *(_DWORD *)v85 = v78;
              *((_DWORD *)v85 + 1) = v77;
              *((_DWORD *)v85 + 2) = v79;
              v86 = v85;
              if (v74 != v80)
              {
                do
                {
                  v87 = *(_QWORD *)(v74 - 3);
                  v74 -= 3;
                  v88 = v74[2];
                  *(_QWORD *)(v86 - 12) = v87;
                  v86 -= 12;
                  *((_DWORD *)v86 + 2) = v88;
                }
                while (v74 != v80);
                v80 = *(_DWORD **)&buf[8];
              }
              v74 = v85 + 12;
              *(_QWORD *)&buf[8] = v86;
              *(_QWORD *)&buf[16] = v85 + 12;
              *(_QWORD *)&buf[24] = &v84[12 * v83];
              if (v80)
                operator delete(v80);
            }
            else
            {
              *v74 = v78;
              v74[1] = v77;
              v74[2] = v79;
              v74 += 3;
            }
            *(_QWORD *)&buf[16] = v74;
          }
          v73 = buf[0];
          v69 = v237;
          v68 = v239;
          Function = v235;
        }
        *((_QWORD *)v259 + v67) = Function;
        v89 = (uint8_t *)v262 + 32 * v67;
        *v89 = v73;
        a1 = v233;
        if (v89 != buf)
          std::vector<ImageFilterFunctionArgumentInfoSPI>::__assign_with_size[abi:ne180100]<ImageFilterFunctionArgumentInfoSPI*,ImageFilterFunctionArgumentInfoSPI*>((char *)v89 + 8, *(char **)&buf[8], *(uint64_t *)&buf[16], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)&buf[8]) >> 2));
        if (*(_QWORD *)&buf[8])
        {
          *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
          operator delete(*(void **)&buf[8]);
        }
      }
      else
      {
        MTLCompilerErrorObject::setFormattedErrorMessage(v242, "Failed to find function %s in library", v68);
        (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, char *))(v241 + 16))(v241, 2, 0, 0, *v242);
      }
      v68 += strlen(v68) + 1;
      v69 += 3 * v70 + 3;
      ++v67;
    }
    while (v67 < *a4);
  }
  if ((*((_BYTE *)a4 + 17) & 2) != 0)
  {
    v91 = v241;
    v90 = mach_absolute_time();
  }
  else
  {
    v90 = 0;
    v91 = v241;
  }
  v270 = 0;
  ComposeImageFuncFromLibrariesSPI = (uint64_t (*)(void **, void **, void **, uint64_t *))MTLCompilerObject::getComposeImageFuncFromLibrariesSPI((MTLCompilerObject *)a1);
  if (ComposeImageFuncFromLibrariesSPI)
  {
    v103 = ComposeImageFuncFromLibrariesSPI(&v267, &v259, &v262, &v270);
    goto LABEL_173;
  }
  if (v230 >= 2)
  {
    MTLCompilerErrorObject::setFormattedErrorMessage(v242, "Creating a ComputePipeline from multiple libraries is unsupported. Found functions from %d modules", v230);
    goto LABEL_188;
  }
  ComposeImageFuncSPI = (uint64_t (*)(_QWORD, void **, void **, uint64_t *))MTLCompilerObject::getComposeImageFuncSPI((MTLCompilerObject *)a1);
  if (ComposeImageFuncSPI)
  {
    v103 = ComposeImageFuncSPI(*(_QWORD *)v267, &v259, &v262, &v270);
LABEL_173:
    v104 = (llvm::Value *)v103;
    if (v103)
    {
      if ((*((_BYTE *)a4 + 17) & 2) != 0)
      {
        v105 = (unint64_t)(*(double *)&gMachTimeToNS * (double)(mach_absolute_time() - v90));
        *(_DWORD *)buf = 2;
        *(_QWORD *)&buf[8] = v105;
        std::vector<CompileTimeData>::push_back[abi:ne180100]((void **)v280, buf);
        if (((*(_QWORD *)&v280[8] - *(_QWORD *)v280) >> 4) == -2)
          v106 = 0;
        else
          v106 = 12 * (((*(_QWORD *)&v280[8] - *(_QWORD *)v280) >> 4) + 2) + 4;
      }
      else
      {
        v105 = 0;
        v106 = 0;
      }
      LLVMExtraMakeSharedModule();
      Name = (void *)llvm::Value::getName(v104);
      if (Name)
        std::string::basic_string[abi:ne180100](buf, Name, v119);
      else
        memset(buf, 0, 24);
      MTLMetalFunctionCreate();
      if ((char)buf[23] < 0)
        operator delete(*(void **)buf);
      MTLMetalLibCreateExecutableWithTriple();
      MTLMetalLibInsertFunction();
      v122 = MTLWriteMetalLibToMemoryBuffer();
      v107 = MTLCompilerObject::serializeLibraryToArchiveReply(a1, (size_t *)&v256, 0, 0, 1, v122, v106);
      if (v122)
        LLVMDisposeMemoryBuffer();
      LLVMExtraDisposeSharedModule();
      v108 = 0;
      goto LABEL_211;
    }
    v242 = (char **)&v270;
LABEL_188:
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, char *))(v91 + 16))(v91, 2, 0, 0, *v242);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, const char *))(v91 + 16))(v91, 2, 0, 0, "Failed to load composeImageFunc plugin");
  }
  v107 = 0;
  v105 = 0;
  v108 = 1;
LABEL_211:
  if (v259)
  {
    v260 = (uint64_t *)v259;
    operator delete(v259);
  }
  *(_QWORD *)buf = &v262;
  std::vector<ImageFilterFunctionInfoSPI>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
LABEL_214:
  if (v267)
  {
    v268 = (char *)v267;
    operator delete(v267);
  }
  ScopedDiagnosticHandler::~ScopedDiagnosticHandler((ScopedDiagnosticHandler *)&__p);
  llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)&v271);
  if (!v108 && v107)
  {
    LODWORD(v267) = 5;
    MTLBuildRequestTypeToString(&v267, &__p);
    v123 = (unint64_t)(*(double *)&gMachTimeToNS * (double)(mach_absolute_time() - v229));
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      v124 = v228;
      if (*(char *)(a1 + 159) < 0)
        v124 = *(_QWORD *)(a1 + 136);
      v125 = &__p;
      if (DiagnosticContext < 0)
        v125 = __p;
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = v124;
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v125;
      *(_WORD *)&buf[22] = 2080;
      *(_QWORD *)&buf[24] = "CI SPI";
      LOWORD(v277) = 2048;
      *(double *)((char *)&v277 + 2) = (double)v123 * 0.000001;
      _os_log_impl(&dword_240FA3000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "Compilation SUCCESS (ParentProcessName=%{public}s) (TYPE=%{public}s - %s): Time %f ms ", buf, 0x2Au);
    }
    if (SHIBYTE(DiagnosticContext) < 0)
      operator delete(__p);
    if ((*((_BYTE *)a4 + 17) & 2) != 0)
    {
      *(_DWORD *)buf = 6;
      *(_QWORD *)&buf[8] = v123;
      std::vector<CompileTimeData>::push_back[abi:ne180100]((void **)v280, buf);
      *(_DWORD *)buf = 4;
      *(_QWORD *)&buf[8] = v123 - v105;
      std::vector<CompileTimeData>::push_back[abi:ne180100]((void **)v280, buf);
    }
    v244 = 0;
    v245 = 0;
    v246 = 0;
    std::vector<CompileTimeData>::__init_with_size[abi:ne180100]<CompileTimeData*,CompileTimeData*>(&v244, *(const void **)v280, *(uint64_t *)&v280[8], (uint64_t)(*(_QWORD *)&v280[8] - *(_QWORD *)v280) >> 4);
    serializeCompileTimeDataInReply((uint64_t)v107, (uint64_t)&v244);
    if (v244)
    {
      v245 = v244;
      operator delete(v244);
    }
    (*(void (**)(uint64_t, _QWORD, char *, void *, _QWORD))(v241 + 16))(v241, 0, v107, v256, 0);
    v126 = v107;
LABEL_423:
    free(v126);
  }
LABEL_424:
  MachO = *(_QWORD *)v280;
  if (*(_QWORD *)v280)
  {
    *(_QWORD *)&v280[8] = *(_QWORD *)v280;
LABEL_426:
    operator delete((void *)MachO);
  }
  return llvm::remove_fatal_error_handler((llvm *)MachO);
}

void sub_24103A7C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,__int16 a53,void *a54)
{
  uint64_t v54;
  void *v56;

  if (__p)
    operator delete(__p);
  *(_QWORD *)(v54 - 240) = &a44;
  std::vector<ImageFilterFunctionInfoSPI>::__destroy_vector::operator()[abi:ne180100]((void ***)(v54 - 240));
  if (a49)
  {
    a50 = (uint64_t)a49;
    operator delete(a49);
  }
  ScopedDiagnosticHandler::~ScopedDiagnosticHandler((ScopedDiagnosticHandler *)&a54);
  llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)&a53);
  v56 = *(void **)(v54 - 160);
  if (v56)
  {
    *(_QWORD *)(v54 - 152) = v56;
    operator delete(v56);
  }
  llvm::remove_fatal_error_handler((llvm *)v56);
  _Unwind_Resume(a1);
}

uint64_t fatalErrorHandler(void *a1, char *a2)
{
  std::string *p_str;
  uint64_t v3;
  std::string *v4;
  uint8_t *v5;
  __int128 v6;
  std::string *v7;
  uint64_t v8;
  uint64_t v9;
  std::string *v10;
  CC_LONG v11;
  void **i;
  void *v13;
  uint64_t j;
  uint64_t result;
  std::string::size_type size;
  std::string *v17;
  std::string *v18;
  int v19;
  std::string *v20;
  uint64_t v21;
  void **v22;
  void **v23;
  std::string *v24;
  std::string *v25;
  char *v26;
  std::string __str;
  std::string *v28;
  std::string *v29;
  uint8_t buf[16];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34[3];
  int v35;
  uint64_t v36[3];
  int v37;
  _QWORD v38[3];
  int v39;
  unsigned __int8 md[8];
  void **v41;
  void **v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&__str, a2);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    p_str = &__str;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = p_str;
    _os_log_error_impl(&dword_240FA3000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "LLVM ERROR: %s", buf, 0xCu);
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "Cannot select:");
  DWORD2(v31) = 10;
  std::string::basic_string[abi:ne180100]<0>(&v32, "unable to lower arguments");
  DWORD2(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "unable to translate");
  v35 = 21;
  std::string::basic_string[abi:ne180100]<0>(v36, "cannot select");
  v37 = 21;
  std::string::basic_string[abi:ne180100]<0>(v38, "unable to legalize");
  v39 = 21;
  v25 = 0;
  v26 = 0;
  v24 = 0;
  v22 = (void **)&v24;
  LOBYTE(v23) = 0;
  v3 = 0;
  v24 = (std::string *)operator new(0xA0uLL);
  v25 = v24;
  v26 = &v24[6].__r_.__value_.__s.__data_[16];
  v28 = v24;
  v29 = v24;
  *(_QWORD *)md = &v26;
  v41 = (void **)&v28;
  v42 = (void **)&v29;
  v4 = v24;
  v43 = 0;
  do
  {
    v5 = &buf[v3];
    if (*((char *)&v31 + v3 + 7) < 0)
    {
      std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v5, *((_QWORD *)v5 + 1));
      v7 = v29;
    }
    else
    {
      v6 = *(_OWORD *)v5;
      v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 2);
      *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v6;
      v7 = v4;
    }
    LODWORD(v4[1].__r_.__value_.__l.__data_) = *(_DWORD *)((char *)&v31 + v3 + 8);
    v4 = (std::string *)((char *)v7 + 32);
    v29 = (std::string *)((char *)v7 + 32);
    v3 += 32;
  }
  while (v3 != 160);
  v43 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fatalErrorHandler(void *,char const*,BOOL)::CollectInfo>,fatalErrorHandler(void *,char const*,BOOL)::CollectInfo*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)md);
  v8 = 0;
  v25 = v4;
  do
  {
    if (SHIBYTE(v38[v8 + 2]) < 0)
      operator delete((void *)v38[v8]);
    v8 -= 4;
  }
  while (v8 != -20);
  v9 = std::find_if[abi:ne180100]<std::__wrap_iter<fatalErrorHandler(void *,char const*,BOOL)::CollectInfo *>,fatalErrorHandler(void *,char const*,BOOL)::$_0>((uint64_t)v24, (uint64_t)v25, (const void **)&__str.__r_.__value_.__l.__data_);
  if (v25 == (std::string *)v9)
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &__str;
    else
      v10 = (std::string *)__str.__r_.__value_.__r.__words[0];
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    else
      v11 = __str.__r_.__value_.__r.__words[1];
    CC_SHA256(v10, v11, md);
    *(_OWORD *)buf = xmmword_24105AE9D;
    v31 = unk_24105AEAD;
    v32 = xmmword_24105AEBD;
    v33 = unk_24105AECD;
    std::vector<fatalErrorHandler(void *,char const*,BOOL)::AllowHashInfo,std::allocator<fatalErrorHandler(void *,char const*,BOOL)::AllowHashInfo>>::vector[abi:ne180100](&v22, buf, 2uLL);
    for (i = v22; i != v23; i += 4)
    {
      v21 = 0;
      while (*((unsigned __int8 *)i + v21) == md[v21])
      {
        if (++v21 == 32)
        {
          result = abort_with_reason();
          goto LABEL_41;
        }
      }
    }
    v13 = (void *)objc_msgSend(CFSTR("Error message SHA256: "), "mutableCopy");
    for (j = 0; j != 32; ++j)
      objc_msgSend(v13, "appendFormat:", CFSTR("%02x"), md[j]);
    objc_msgSend(v13, "UTF8String");
    result = abort_with_reason();
  }
  else
  {
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    v17 = &__str;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      size = __str.__r_.__value_.__l.__size_;
      v17 = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if (size)
    {
      v19 = 0;
      v20 = (std::string *)((char *)v17 + size);
      v18 = v17;
      while (v18->__r_.__value_.__s.__data_[0] != 10 || ++v19 < *(_DWORD *)(v9 + 24))
      {
        v18 = (std::string *)((char *)v18 + 1);
        if (!--size)
        {
          v18 = v20;
          break;
        }
      }
    }
    else
    {
      v18 = v17;
    }
    std::string::basic_string((std::string *)buf, &__str, 0, (char *)v18 - (char *)v17, (std::allocator<char> *)md);
    result = abort_with_reason();
  }
LABEL_41:
  __break(1u);
  return result;
}

void sub_24103AEE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (__p)
    operator delete(__p);
  a24 = &a13;
  std::vector<fatalErrorHandler(void *,char const*,BOOL)::CollectInfo,std::allocator<fatalErrorHandler(void *,char const*,BOOL)::CollectInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

void std::vector<char *>::push_back[abi:ne180100](void **a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = ((char *)v7 - (_BYTE *)*a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
    v10 = v5 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = *a2;
    v8 = v14 + 8;
    v17 = (char *)*a1;
    v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v7 = *a2;
    v8 = v7 + 1;
  }
  a1[1] = v8;
}

uint64_t createLibraryInfo()
{
  uint64_t v0;
  char *InstallName;
  unsigned int v2;
  char *Name;
  unsigned int v4;
  char *v5;
  unsigned int v6;
  char *v7;
  unsigned int v8;
  char *v9;
  void *v11[2];
  char v12;
  void *v13[2];
  char v14;
  void *v15[2];
  char v16;
  void *__p[2];
  char v18;
  std::string __str;

  v0 = operator new();
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_QWORD *)(v0 + 112) = 0;
  InstallName = (char *)MTLMetalLibGetInstallName();
  if (InstallName)
  {
    std::string::basic_string[abi:ne180100]<0>(&__str, InstallName);
    std::string::operator=((std::string *)v0, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (MTLMetalLibGetFunctionsCount())
  {
    v2 = 0;
    do
    {
      MTLMetalLibGetFunctionNo();
      Name = (char *)MTLMetalFunctionGetName();
      std::string::basic_string[abi:ne180100]<0>(__p, Name);
      SerializedLibraryInfo::addFunctionName((uint64_t *)v0, (__int128 *)__p);
      if (v18 < 0)
        operator delete(__p[0]);
      ++v2;
    }
    while (v2 < MTLMetalLibGetFunctionsCount());
  }
  if (MTLMetalLibGetVariablesCount())
  {
    v4 = 0;
    do
    {
      MTLMetalLibGetVariableNo();
      v5 = (char *)MTLMetalVariableGetName();
      std::string::basic_string[abi:ne180100]<0>(v15, v5);
      SerializedLibraryInfo::addVariable((uint64_t *)v0, (__int128 *)v15);
      if (v16 < 0)
        operator delete(v15[0]);
      ++v4;
    }
    while (v4 < MTLMetalLibGetVariablesCount());
  }
  if (MTLMetalLibGetImportedSymbolsCount())
  {
    v6 = 0;
    do
    {
      MTLMetalLibGetImportedSymbolNo();
      v7 = (char *)MTLMetalImportedSymbolGetName();
      std::string::basic_string[abi:ne180100]<0>(v13, v7);
      SerializedLibraryInfo::addImportedSymbol((uint64_t *)v0, (__int128 *)v13);
      if (v14 < 0)
        operator delete(v13[0]);
      ++v6;
    }
    while (v6 < MTLMetalLibGetImportedSymbolsCount());
  }
  if (MTLMetalLibGetDynamicLibrariesCount())
  {
    v8 = 0;
    do
    {
      MTLMetalLibGetDynamicLibraryNo();
      v9 = (char *)MTLMetalDynamicLibraryGetInstallName();
      std::string::basic_string[abi:ne180100]<0>(v11, v9);
      SerializedLibraryInfo::addImportedLibrary((uint64_t *)v0, (__int128 *)v11);
      if (v12 < 0)
        operator delete(v11[0]);
      ++v8;
    }
    while (v8 < MTLMetalLibGetDynamicLibrariesCount());
  }
  return v0;
}

void sub_24103B2C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 33) < 0)
    operator delete(*(void **)(v33 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t MTLCompilerObject::logCompilerFailure(uint64_t a1, _QWORD *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  FILE *v15;
  FILE *v16;
  size_t v17;
  _BYTE *v18;
  uint64_t (*v20)(uint64_t, uint64_t, _QWORD, _QWORD, const char *);
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  char **v24;
  id v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;

  v26 = a2;
  v27 = a3;
  if (a3 <= 7
    || ((v6 = *a2, v28 = 8, !v6)
      ? (v7 = 0)
      : (v7 = DeserialContext::stringFromSerializedData((DeserialContext *)&v26)),
        (v8 = objc_msgSend((id)gReplayLogDirectory, "stringByAppendingString:", v7), v27 > v28)
      ? (v9 = v27 - v28 > 7)
      : (v9 = 0),
        !v9))
  {
LABEL_29:
    abort();
  }
  v10 = v26;
  v11 = *(_QWORD *)((char *)v26 + v28);
  v12 = v28 + 8;
  v28 += 8;
  if (v11)
  {
    if (v12 >= v27)
      goto LABEL_29;
    v28 = v11 + v12;
    if (v11 + v12 > v27)
      goto LABEL_29;
    v13 = (void *)v8;
    v25 = 0;
    v14 = (void *)objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
    if (objc_msgSend(v14, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", gReplayLogDirectory, 1, 0, &v25))
    {
      v15 = fopen((const char *)objc_msgSend(v13, "UTF8String"), "wb");
      if (v15)
      {
        v16 = v15;
        v17 = fwrite((char *)v10 + v12, 1uLL, v11, v15);
        fclose(v16);
        if (v17 == v11)
        {
          v18 = malloc_type_malloc(1uLL, 0xCB5EF656uLL);
          *v18 = 1;
          return (*(uint64_t (**)(uint64_t, _QWORD, _BYTE *, uint64_t, _QWORD))(a4 + 16))(a4, 0, v18, 1, 0);
        }
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          MTLCompilerObject::logCompilerFailure(v13);
        v24 = (char **)(a1 + 120);
        objc_msgSend(v13, "UTF8String");
        MTLCompilerErrorObject::setFormattedErrorMessage(v24, "Failed to write log file (wrote %llu bytes, expected %llu bytes): %s");
      }
      else
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          MTLCompilerObject::logCompilerFailure(v13);
        v24 = (char **)(a1 + 120);
        objc_msgSend(v13, "UTF8String");
        MTLCompilerErrorObject::setFormattedErrorMessage(v24, "Failure to create log file: %s");
      }
    }
    else
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        MTLCompilerObject::logCompilerFailure(&v25);
      v24 = (char **)(a1 + 120);
      objc_msgSend((id)objc_msgSend(v25, "localizedDescription"), "UTF8String");
      MTLCompilerErrorObject::setFormattedErrorMessage(v24, "Failure to create log directory: %s");
    }
    v21 = *v24;
    v20 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, const char *))(a4 + 16);
    v22 = a4;
    v23 = 2;
  }
  else
  {
    v20 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, const char *))(a4 + 16);
    v21 = "MTLCompilerService received an empty replay block to log";
    v22 = a4;
    v23 = 1;
  }
  return v20(v22, v23, 0, 0, v21);
}

uint64_t MTLCompilerObject::generateMachO(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _BOOL4 v37;
  uint64_t v38;
  _BOOL4 v39;
  uint64_t v40;
  BOOL v41;
  void *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  void **v49;
  char *v50;
  char *v51;
  void *v52;
  uint64_t v53;
  void *p_p;
  unsigned int v55;
  uint64_t v56;
  int v57;
  BOOL v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  NSObject *v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  char v69;
  unsigned int *v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  char v78;
  unsigned int *v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int *v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  unsigned int *v90;
  uint64_t v91;
  int v92;
  void *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  char *v99;
  void **v100;
  char *v101;
  char *v102;
  void *v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  void **v110;
  char *v111;
  char *v112;
  char *v113;
  void *v114;
  _QWORD *i;
  int v116;
  char *v117;
  char *v118;
  int v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  char *v123;
  int v124;
  char *v125;
  char *v126;
  void **v127;
  char *v128;
  char *v129;
  char *v130;
  void *v131;
  char *v132;
  char *v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  char *v137;
  void **v138;
  char *v139;
  char *v140;
  char *v141;
  void *v142;
  const char **v143;
  uint64_t v144;
  size_t v145;
  const char *v146;
  char *v147;
  _BYTE *v148;
  _QWORD *v149;
  unint64_t v150;
  const char *v151;
  size_t v152;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  char *v157;
  void **v158;
  char *v159;
  char *v160;
  char *v161;
  void *v162;
  _QWORD *v163;
  int v166;
  uint64_t v167;
  _BOOL4 v168;
  uint64_t v169;
  uint64_t DynamicLibraryWriter;
  int v171;
  void *v172;
  void *__p;
  int v174;
  char v175;
  void *v176;
  void *v177;
  char *v178;
  char *v179;
  void *v180;
  __int128 v181;
  __int128 v182;
  int v183;
  _BYTE buf[32];
  __int128 v185;
  __int128 v186;
  uint64_t v187;
  uint64_t v188;
  __int16 v189;
  uint64_t v190;
  uint64_t v191;

  v191 = *MEMORY[0x24BDAC8D0];
  v181 = 0u;
  v182 = 0u;
  v183 = 1065353216;
  v179 = 0;
  v180 = 0;
  v177 = 0;
  v178 = 0;
  if (*(_DWORD *)(a2 + 88))
  {
    DynamicLibraryWriter = MTLGPUArchiverFromId();
  }
  else
  {
    if (*(_BYTE *)(a2 + 128))
      DynamicLibraryWriter = MTLGPUArchiverCreateDynamicLibraryWriter();
    else
      DynamicLibraryWriter = MTLGPUArchiverCreateExecutableWriter();
    MTLGPUArchiverToId();
  }
  if (!DynamicLibraryWriter)
  {
    __p = 0;
    if (!MTLGPUArchiverDeleteWithId())
    {
      LODWORD(v176) = 16;
      MTLBuildRequestTypeToString(&v176, buf);
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        MTLCompilerObject::generateMachO(a1);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      free(__p);
    }
    LODWORD(v176) = 16;
    MTLBuildRequestTypeToString(&v176, buf);
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      MTLCompilerObject::generateMachO(a1);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, void *))(a4 + 16))(a4, 2, 0, 0, v180);
    free(v180);
    goto LABEL_320;
  }
  v180 = 0;
  if (!MTLGPUArchiverAddTool())
  {
    __p = 0;
    if (!MTLGPUArchiverDeleteWithId())
    {
      LODWORD(v176) = 16;
      MTLBuildRequestTypeToString(&v176, buf);
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        MTLCompilerObject::generateMachO(a1);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      free(__p);
    }
    LODWORD(v176) = 16;
    MTLBuildRequestTypeToString(&v176, buf);
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      MTLCompilerObject::generateMachO(a1);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    goto LABEL_122;
  }
  if (*(_DWORD *)(a2 + 116))
  {
    if (!LLVMCreateMemoryBufferWithMemoryRange())
    {
      v176 = 0;
      if (!MTLGPUArchiverDeleteWithId())
      {
        LODWORD(__p) = 16;
        MTLBuildRequestTypeToString(&__p, buf);
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          MTLCompilerObject::generateMachO(a1);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        free(v176);
      }
      strcpy(buf, "Unable to store metal script");
      LODWORD(v172) = 16;
      MTLBuildRequestTypeToString(&v172, &__p);
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        MTLCompilerObject::generateMachO(a1);
      if (v175 < 0)
        operator delete(__p);
      (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, void *))(a4 + 16))(a4, 2, 0, 0, v180);
      MTLGPUArchiverDestroy();
      goto LABEL_320;
    }
    v5 = MTLGPUArchiverAddDescriptor();
    LLVMDisposeMemoryBuffer();
    if (!v5)
    {
      __p = 0;
      if (!MTLGPUArchiverDeleteWithId())
      {
        LODWORD(v176) = 16;
        MTLBuildRequestTypeToString(&v176, buf);
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          MTLCompilerObject::generateMachO(a1);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        free(__p);
      }
      LODWORD(v176) = 16;
      MTLBuildRequestTypeToString(&v176, buf);
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        MTLCompilerObject::generateMachO(a1);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
LABEL_122:
      (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, void *))(a4 + 16))(a4, 2, 0, 0, v180);
      free(v180);
      MTLGPUArchiverDestroy();
      goto LABEL_320;
    }
  }
  v167 = a2;
  if (!*(_DWORD *)(a2 + 108))
  {
LABEL_22:
    v14 = v167;
    v15 = malloc_type_malloc(8 * *(_QWORD *)(v167 + 8), 0x90BEEB8DuLL);
    v16 = v15;
    if (*(_QWORD *)(v167 + 8))
    {
      v17 = 0;
      v166 = 0;
      v163 = v15;
      while (1)
      {
        v18 = v14 + 104 * v17;
        v19 = (const char *)(v14 + *(_QWORD *)(v18 + 152) + 4);
        v20 = strncmp(v19, "AIRC", 4uLL);
        v21 = strncmp(v19, "AIRS", 4uLL);
        if (*(_BYTE *)(v14 + 128) == 1)
        {
          *(_QWORD *)buf = 0;
          buf[8] = 0;
          *(_OWORD *)&buf[16] = xmmword_24105AF30;
          v187 = 0x1000000000000;
          v185 = 0u;
          v186 = 0u;
          v188 = 1;
          v189 = 256;
          v190 = 0;
          __p = (void *)0x100000000;
          v174 = 0;
          flatbuffers::FlatBufferBuilder::AddStruct<Air::Version>(buf, 4, (uint64_t *)&__p);
          v22 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)buf, 2);
          flatbuffers::FlatBufferBuilder::TrackField(buf, 6, v22);
          v23 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)buf, 0);
          flatbuffers::FlatBufferBuilder::Finish((flatbuffers::FlatBufferBuilder *)buf, v23, "AIRD", 0);
          v24 = LLVMCreateMemoryBufferWithMemoryRangeCopy();
          flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)buf);
        }
        else
        {
          v24 = *(_QWORD *)(v14 + 104 * v17 + 160) ? LLVMCreateMemoryBufferWithMemoryRange() : 0;
        }
        v25 = *(_QWORD *)(v14 + 104 * v17 + 176) ? LLVMCreateMemoryBufferWithMemoryRange() : 0;
        v169 = v24;
        v26 = *(_QWORD *)(v14 + 104 * v17 + 192) ? LLVMCreateMemoryBufferWithMemoryRange() : 0;
        v27 = *(_DWORD *)(v18 + 136);
        v180 = 0;
        v28 = !v20 || v21 == 0;
        v29 = v28;
        v168 = v29;
        v30 = MTLGPUArchiverAddUnit();
        if (!v30)
          break;
        if (v20 && (v31 = v14 + 104 * v17, v33 = *(_DWORD *)(v31 + 144), v32 = (unsigned int *)(v31 + 144), v33))
        {
          v34 = 0;
          v35 = v14;
          v36 = (_QWORD *)(v14 + 104 * v17 + 232);
          LOBYTE(v37) = 1;
          do
          {
            std::__hash_table<std::__hash_value_type<MTLUINT256_t,MTLOpaqueGPUArchiverUnitRef *>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,MTLOpaqueGPUArchiverUnitRef *>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,MTLOpaqueGPUArchiverUnitRef *>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,MTLOpaqueGPUArchiverUnitRef *>>>::find<MTLUINT256_t>(&v181, (unint64_t *)(v35 + *v36));
            v37 = v37 && MTLGPUArchiverAddLinkedModulesWithReferences() != 0;
            ++v34;
            v35 += 32;
          }
          while (v34 < *v32);
          v14 = v167;
          v16 = v163;
          if (v168 || !v37)
            goto LABEL_63;
        }
        else if (v168)
        {
          break;
        }
        v16[v166] = v30;
        v38 = v169;
        if (v27)
          v39 = MTLGPUArchiverSetUnitHash() != 0;
        else
          v39 = 1;
        ++v166;
        LOBYTE(v37) = v39;
        if (!*(_QWORD *)(v14 + 104 * v17 + 224))
          goto LABEL_64;
        v40 = v14 + *(_QWORD *)(v14 + 104 * v17 + 216);
        if (*(_QWORD *)(v40 + 40) && *(_QWORD *)(v40 + 56))
        {
          LLVMCreateMemoryBufferWithMemoryRange();
          LLVMCreateMemoryBufferWithMemoryRange();
          if (v39)
            v39 = MTLGPUArchiverSetUnitReflection() != 0;
          LLVMDisposeMemoryBuffer();
          LLVMDisposeMemoryBuffer();
        }
        LOBYTE(v37) = v39;
LABEL_63:
        v38 = v169;
LABEL_64:
        if (v38)
          LLVMDisposeMemoryBuffer();
        if (v25)
          LLVMDisposeMemoryBuffer();
        if (v26)
          LLVMDisposeMemoryBuffer();
        if (v30)
          v41 = v37;
        else
          v41 = 0;
        if (!v41)
        {
          v42 = v180;
          LODWORD(v176) = 16;
          MTLBuildRequestTypeToString(&v176, &__p);
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          {
            v53 = a1 + 136;
            if (*(char *)(a1 + 159) < 0)
              v53 = *(_QWORD *)(a1 + 136);
            p_p = &__p;
            if (v175 < 0)
              p_p = __p;
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = v53;
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = p_p;
            *(_WORD *)&buf[22] = 2080;
            *(_QWORD *)&buf[24] = v42;
            _os_log_error_impl(&dword_240FA3000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "MachO serialization failed (ParentProcessName=%{public}s): %{public}s - %s", buf, 0x20u);
          }
          if (v175 < 0)
            operator delete(__p);
          v43 = v178;
          if (v178 >= v179)
          {
            v45 = (v178 - (_BYTE *)v177) >> 3;
            if ((unint64_t)(v45 + 1) >> 61)
              std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
            v46 = (v179 - (_BYTE *)v177) >> 2;
            if (v46 <= v45 + 1)
              v46 = v45 + 1;
            if ((unint64_t)(v179 - (_BYTE *)v177) >= 0x7FFFFFFFFFFFFFF8)
              v47 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v47 = v46;
            if (v47)
              v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v179, v47);
            else
              v48 = 0;
            v49 = (void **)&v48[8 * v45];
            *v49 = v180;
            v44 = (char *)(v49 + 1);
            v51 = (char *)v177;
            v50 = v178;
            if (v178 != v177)
            {
              do
              {
                v52 = (void *)*((_QWORD *)v50 - 1);
                v50 -= 8;
                *--v49 = v52;
              }
              while (v50 != v51);
              v50 = (char *)v177;
            }
            v177 = v49;
            v178 = v44;
            v179 = &v48[8 * v47];
            if (v50)
              operator delete(v50);
          }
          else
          {
            *(_QWORD *)v178 = v180;
            v44 = v43 + 8;
          }
          v178 = v44;
        }
        if ((unint64_t)++v17 >= *(_QWORD *)(v14 + 8))
          goto LABEL_123;
      }
      LOBYTE(v37) = 1;
      goto LABEL_63;
    }
LABEL_123:
    v55 = *(_DWORD *)(v14 + 100);
    v56 = *(_QWORD *)(v14 + 56);
    v180 = 0;
    if (v55 >= 0x28)
    {
      v61 = 0;
      v62 = v167 + v56;
      v63 = v55 / 0x28uLL;
      v64 = 1;
      v65 = MEMORY[0x24BDACB70];
      while (2)
      {
        switch(*(_DWORD *)(v62 + 40 * v61))
        {
          case 0:
            v66 = malloc_type_malloc(0x10uLL, 0x2004093837F09uLL);
            v67 = v66;
            v68 = v62 + 40 * v61;
            v69 = *(_BYTE *)(v68 + 32);
            v70 = (unsigned int *)(v68 + 8);
            if ((v69 & 2) != 0)
              goto LABEL_149;
            v71 = *v70;
            if ((_DWORD)v71 == -1)
            {
              v72 = 0;
            }
            else
            {
              v70 = (unsigned int *)&v16[v71];
LABEL_149:
              v72 = *(_QWORD *)v70;
            }
            *v66 = v72;
            v73 = (unsigned int *)(v62 + 40 * v61 + 16);
            if ((v69 & 1) != 0)
            {
              v75 = *(_QWORD *)v73;
            }
            else
            {
              v74 = *v73;
              if ((_DWORD)v74 == -1)
                v75 = 0;
              else
                v75 = v16[v74];
            }
            v66[1] = v75;
            goto LABEL_178;
          case 1:
          case 2:
            v67 = malloc_type_malloc(8uLL, 0x2004093837F09uLL);
            v88 = v62 + 40 * v61;
            v89 = *(_BYTE *)(v88 + 32);
            v90 = (unsigned int *)(v88 + 8);
            if ((v89 & 2) != 0)
              goto LABEL_168;
            v91 = *v90;
            if ((_DWORD)v91 == -1)
              goto LABEL_170;
            v90 = (unsigned int *)&v16[v91];
LABEL_168:
            v87 = *(_QWORD *)v90;
            goto LABEL_171;
          case 3:
            v76 = malloc_type_malloc(0x18uLL, 0x2004093837F09uLL);
            v67 = v76;
            v77 = v62 + 40 * v61;
            v78 = *(_BYTE *)(v77 + 32);
            v79 = (unsigned int *)(v77 + 16);
            if ((v78 & 2) != 0)
              goto LABEL_156;
            v80 = *v79;
            if ((_DWORD)v80 == -1)
            {
              v81 = 0;
            }
            else
            {
              v79 = (unsigned int *)&v16[v80];
LABEL_156:
              v81 = *(_QWORD *)v79;
            }
            v76[1] = v81;
            v82 = (unsigned int *)(v62 + 40 * v61 + 24);
            if ((v78 & 1) != 0)
              goto LABEL_160;
            v83 = *v82;
            if ((_DWORD)v83 == -1)
            {
              v84 = 0;
            }
            else
            {
              v82 = (unsigned int *)&v16[v83];
LABEL_160:
              v84 = *(_QWORD *)v82;
            }
            v76[2] = v84;
            v85 = (unsigned int *)(v62 + 40 * v61 + 8);
            if ((v78 & 4) != 0)
              goto LABEL_164;
            v86 = *v85;
            if ((_DWORD)v86 == -1)
            {
LABEL_170:
              v87 = 0;
            }
            else
            {
              v85 = (unsigned int *)&v16[v86];
LABEL_164:
              v87 = *(_QWORD *)v85;
            }
LABEL_171:
            *v67 = v87;
LABEL_178:
            v180 = 0;
            if ((v64 & 1) != 0)
            {
              v92 = MTLGPUArchiverAddPipeline();
              free(v67);
              if (v92)
              {
                v64 = 1;
                goto LABEL_202;
              }
            }
            else
            {
              free(v67);
            }
LABEL_182:
            v93 = v180;
            LODWORD(v176) = 16;
            MTLBuildRequestTypeToString(&v176, &__p);
            if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
            {
              v104 = a1 + 136;
              if (*(char *)(a1 + 159) < 0)
                v104 = *(_QWORD *)(a1 + 136);
              v105 = &__p;
              if (v175 < 0)
                v105 = __p;
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = v104;
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v105;
              *(_WORD *)&buf[22] = 2080;
              *(_QWORD *)&buf[24] = v93;
              _os_log_error_impl(&dword_240FA3000, v65, OS_LOG_TYPE_ERROR, "MachO serialization failed (ParentProcessName=%{public}s): %{public}s - %s", buf, 0x20u);
            }
            if (v175 < 0)
              operator delete(__p);
            v94 = v178;
            if (v178 >= v179)
            {
              v96 = (v178 - (_BYTE *)v177) >> 3;
              if ((unint64_t)(v96 + 1) >> 61)
                std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
              v97 = (v179 - (_BYTE *)v177) >> 2;
              if (v97 <= v96 + 1)
                v97 = v96 + 1;
              if ((unint64_t)(v179 - (_BYTE *)v177) >= 0x7FFFFFFFFFFFFFF8)
                v98 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v98 = v97;
              if (v98)
                v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v179, v98);
              else
                v99 = 0;
              v100 = (void **)&v99[8 * v96];
              *v100 = v180;
              v95 = (char *)(v100 + 1);
              v102 = (char *)v177;
              v101 = v178;
              if (v178 != v177)
              {
                do
                {
                  v103 = (void *)*((_QWORD *)v101 - 1);
                  v101 -= 8;
                  *--v100 = v103;
                }
                while (v101 != v102);
                v101 = (char *)v177;
              }
              v177 = v100;
              v178 = v95;
              v179 = &v99[8 * v98];
              if (v101)
                operator delete(v101);
            }
            else
            {
              *(_QWORD *)v178 = v180;
              v95 = v94 + 8;
            }
            v64 = 0;
            v178 = v95;
LABEL_202:
            if (++v61 == v63)
              break;
            continue;
          default:
            v180 = 0;
            goto LABEL_182;
        }
        break;
      }
    }
    free(v16);
    if (*(_BYTE *)(v167 + 128) == 1)
    {
      v180 = 0;
      v57 = MTLGPUArchiverSetInstallName();
      v58 = v57 != 0;
      if (!v57 && v180)
      {
        LODWORD(__p) = 16;
        MTLBuildRequestTypeToString(&__p, buf);
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          MTLCompilerObject::generateMachO(a1);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        v59 = v178;
        if (v178 >= v179)
        {
          v106 = (v178 - (_BYTE *)v177) >> 3;
          if ((unint64_t)(v106 + 1) >> 61)
            std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
          v107 = (v179 - (_BYTE *)v177) >> 2;
          if (v107 <= v106 + 1)
            v107 = v106 + 1;
          if ((unint64_t)(v179 - (_BYTE *)v177) >= 0x7FFFFFFFFFFFFFF8)
            v108 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v108 = v107;
          if (v108)
            v109 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v179, v108);
          else
            v109 = 0;
          v110 = (void **)&v109[8 * v106];
          v111 = &v109[8 * v108];
          *v110 = v180;
          v60 = (char *)(v110 + 1);
          v113 = (char *)v177;
          v112 = v178;
          if (v178 != v177)
          {
            do
            {
              v114 = (void *)*((_QWORD *)v112 - 1);
              v112 -= 8;
              *--v110 = v114;
            }
            while (v112 != v113);
            v112 = (char *)v177;
          }
          v177 = v110;
          v178 = v60;
          v179 = v111;
          if (v112)
            operator delete(v112);
        }
        else
        {
          *(_QWORD *)v178 = v180;
          v60 = v59 + 8;
        }
        v58 = 0;
        v178 = v60;
      }
    }
    else
    {
      v58 = 1;
    }
    for (i = (_QWORD *)v182; i; i = (_QWORD *)*i)
      MTLGPUArchiverUnitRefDestroy();
    v180 = 0;
    if (v58)
    {
      v116 = MTLGPUArchiverPackUnits();
      if (v116 || !v180)
      {
        if (v116)
        {
          v119 = *(unsigned __int8 *)(v167 + 129);
          if (!*(_BYTE *)(v167 + 129))
            sandbox_extension_consume();
          v124 = MTLGPUArchiverBuildToFD();
          if (!v124)
          {
            LODWORD(__p) = 16;
            MTLBuildRequestTypeToString(&__p, buf);
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              MTLCompilerObject::generateMachO(a1);
            if ((buf[23] & 0x80000000) != 0)
              operator delete(*(void **)buf);
            v125 = v178;
            if (v178 >= v179)
            {
              v154 = (v178 - (_BYTE *)v177) >> 3;
              if ((unint64_t)(v154 + 1) >> 61)
                std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
              v155 = (v179 - (_BYTE *)v177) >> 2;
              if (v155 <= v154 + 1)
                v155 = v154 + 1;
              if ((unint64_t)(v179 - (_BYTE *)v177) >= 0x7FFFFFFFFFFFFFF8)
                v156 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v156 = v155;
              if (v156)
                v157 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v179, v156);
              else
                v157 = 0;
              v158 = (void **)&v157[8 * v154];
              v159 = &v157[8 * v156];
              *v158 = v180;
              v126 = (char *)(v158 + 1);
              v161 = (char *)v177;
              v160 = v178;
              if (v178 != v177)
              {
                do
                {
                  v162 = (void *)*((_QWORD *)v160 - 1);
                  v160 -= 8;
                  *--v158 = v162;
                }
                while (v160 != v161);
                v160 = (char *)v177;
              }
              v177 = v158;
              v178 = v126;
              v179 = v159;
              if (v160)
                operator delete(v160);
            }
            else
            {
              *(_QWORD *)v178 = v180;
              v126 = v125 + 8;
            }
            v178 = v126;
          }
          if (!v119)
            sandbox_extension_release();
          if (v124)
          {
            *(_QWORD *)buf = 0;
            (*(void (**)(uint64_t, _QWORD, _BYTE *, uint64_t, _QWORD))(a4 + 16))(a4, 0, buf, 8, 0);
LABEL_319:
            MTLGPUArchiverDestroy();
            goto LABEL_320;
          }
        }
      }
      else
      {
        LODWORD(__p) = 16;
        MTLBuildRequestTypeToString(&__p, buf);
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          MTLCompilerObject::generateMachO(a1);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        v117 = v178;
        if (v178 >= v179)
        {
          v120 = (v178 - (_BYTE *)v177) >> 3;
          if ((unint64_t)(v120 + 1) >> 61)
            std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
          v121 = (v179 - (_BYTE *)v177) >> 2;
          if (v121 <= v120 + 1)
            v121 = v120 + 1;
          if ((unint64_t)(v179 - (_BYTE *)v177) >= 0x7FFFFFFFFFFFFFF8)
            v122 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v122 = v121;
          if (v122)
            v123 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v179, v122);
          else
            v123 = 0;
          v127 = (void **)&v123[8 * v120];
          v128 = &v123[8 * v122];
          *v127 = v180;
          v118 = (char *)(v127 + 1);
          v130 = (char *)v177;
          v129 = v178;
          if (v178 != v177)
          {
            do
            {
              v131 = (void *)*((_QWORD *)v129 - 1);
              v129 -= 8;
              *--v127 = v131;
            }
            while (v129 != v130);
            v129 = (char *)v177;
          }
          v177 = v127;
          v178 = v118;
          v179 = v128;
          if (v129)
            operator delete(v129);
        }
        else
        {
          *(_QWORD *)v178 = v180;
          v118 = v117 + 8;
        }
        v178 = v118;
      }
    }
    __p = 0;
    if (MTLGPUArchiverDeleteWithId())
    {
      v132 = v178;
    }
    else
    {
      LODWORD(v176) = 16;
      MTLBuildRequestTypeToString(&v176, buf);
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        MTLCompilerObject::generateMachO(a1);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      v133 = v178;
      if (v178 >= v179)
      {
        v134 = (v178 - (_BYTE *)v177) >> 3;
        if ((unint64_t)(v134 + 1) >> 61)
          std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
        v135 = (v179 - (_BYTE *)v177) >> 2;
        if (v135 <= v134 + 1)
          v135 = v134 + 1;
        if ((unint64_t)(v179 - (_BYTE *)v177) >= 0x7FFFFFFFFFFFFFF8)
          v136 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v136 = v135;
        if (v136)
          v137 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v179, v136);
        else
          v137 = 0;
        v138 = (void **)&v137[8 * v134];
        v139 = &v137[8 * v136];
        *v138 = __p;
        v132 = (char *)(v138 + 1);
        v141 = (char *)v177;
        v140 = v178;
        if (v178 != v177)
        {
          do
          {
            v142 = (void *)*((_QWORD *)v140 - 1);
            v140 -= 8;
            *--v138 = v142;
          }
          while (v140 != v141);
          v140 = (char *)v177;
        }
        v177 = v138;
        v178 = v132;
        v179 = v139;
        if (v140)
          operator delete(v140);
      }
      else
      {
        *(_QWORD *)v178 = __p;
        v132 = v133 + 8;
      }
      v178 = v132;
    }
    v143 = (const char **)v177;
    if (v132 == v177)
    {
      v145 = 25;
    }
    else
    {
      if ((unint64_t)((v132 - (_BYTE *)v177) >> 3) <= 1)
        v144 = 1;
      else
        v144 = (v132 - (_BYTE *)v177) >> 3;
      v145 = 25;
      do
      {
        v146 = *v143++;
        v145 += strlen(v146) + 1;
        --v144;
      }
      while (v144);
    }
    v147 = (char *)malloc_type_malloc(v145, 0xB0A412DBuLL);
    qmemcpy(v147, "Failed to generate machO:", 25);
    v148 = v147 + 25;
    v149 = v177;
    if (v178 != v177)
    {
      v150 = 0;
      do
      {
        v151 = (const char *)v149[v150];
        v152 = strlen(v151);
        memcpy(v148, v151, v152);
        v148 += v152;
        free(*((void **)v177 + v150));
        *v148 = 10;
        ++v150;
        v149 = v177;
      }
      while (v150 < (v178 - (_BYTE *)v177) >> 3);
    }
    *v148 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, char *))(a4 + 16))(a4, 2, 0, 0, v147);
    free(v147);
    goto LABEL_319;
  }
  v6 = 0;
  v7 = 0;
  v8 = v167 + *(_QWORD *)(v167 + 80);
  v9 = *(unsigned int *)(v167 + 104);
  while (1)
  {
    if (v7 >= v9 || (v10 = v7 + 32, v9 < v7 + 32))
      abort();
    v11 = *(_OWORD *)(v8 + v7 + 16);
    *(_OWORD *)buf = *(_OWORD *)(v8 + v7);
    *(_OWORD *)&buf[16] = v11;
    if (v9 <= v10 || v9 - v10 < 4 || v7 + 36 >= v9 || (v7 += 36 + *(unsigned int *)(v8 + v10), v7 > v9))
      abort();
    LLVMCreateMemoryBufferWithMemoryRange();
    v176 = 0;
    v12 = MTLGPUArchiverAddUnit();
    LLVMDisposeMemoryBuffer();
    if (!v12)
      break;
    v13 = MTLGPUArchiverUnitRefCreateWithUnitId();
    __p = buf;
    std::__hash_table<std::__hash_value_type<MTLUINT256_t,MTLOpaqueGPUArchiverUnitRef *>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,MTLOpaqueGPUArchiverUnitRef *>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,MTLOpaqueGPUArchiverUnitRef *>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,MTLOpaqueGPUArchiverUnitRef *>>>::__emplace_unique_key_args<MTLUINT256_t,std::piecewise_construct_t const&,std::tuple<MTLUINT256_t const&>,std::tuple<>>((uint64_t)&v181, (unint64_t *)buf, (uint64_t)&std::piecewise_construct, (_OWORD **)&__p)[6] = v13;
    if (++v6 >= *(_DWORD *)(v167 + 108))
      goto LABEL_22;
  }
  v172 = 0;
  if (!MTLGPUArchiverDeleteWithId())
  {
    v171 = 16;
    MTLBuildRequestTypeToString(&v171, &__p);
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      MTLCompilerObject::generateMachO(a1);
    if (v175 < 0)
      operator delete(__p);
    free(v172);
  }
  v171 = 16;
  MTLBuildRequestTypeToString(&v171, &__p);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    MTLCompilerObject::generateMachO(a1);
  if (v175 < 0)
    operator delete(__p);
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, void *))(a4 + 16))(a4, 2, 0, 0, v176);
  free(v176);
  MTLGPUArchiverDestroy();
LABEL_320:
  if (v177)
  {
    v178 = (char *)v177;
    operator delete(v177);
  }
  return std::__hash_table<llvm::Value *,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,std::allocator<llvm::Value *>>::~__hash_table((uint64_t)&v181);
}

void sub_24103CCC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  if (__p)
    operator delete(__p);
  std::__hash_table<llvm::Value *,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,std::allocator<llvm::Value *>>::~__hash_table((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void MTLCompilerObject::generateBinaryArchiveID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const char *v6;
  int v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  void **v12;
  size_t v13;
  void *v14[2];
  unsigned __int8 v15;
  std::string v16;
  void *__p[2];
  int64_t v18;
  char *v19;

  v19 = 0;
  if (MTLGPUArchiverCreateExecutableWriter())
  {
    v6 = (const char *)MTLGPUArchiverToId();
    if (v6)
    {
      v7 = 1;
    }
    else
    {
      LODWORD(v16.__r_.__value_.__l.__data_) = 17;
      MTLBuildRequestTypeToString(&v16, __p);
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        MTLCompilerObject::generateBinaryArchiveID();
      if (SHIBYTE(v18) < 0)
        operator delete(__p[0]);
      v7 = 0;
    }
    if ((MTLGPUArchiverFlush() & v7) != 0)
    {
      v13 = strlen(v6) + 1;
      (*(void (**)(uint64_t, _QWORD, const char *, size_t, _QWORD))(a4 + 16))(a4, 0, v6, v13, 0);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, const char *))(a4 + 16))(a4, 2, 0, 0, "Failed to generate Binary archive ID");
    }
    MTLGPUArchiverDestroy();
  }
  else
  {
    LODWORD(v16.__r_.__value_.__l.__data_) = 17;
    MTLBuildRequestTypeToString(&v16, __p);
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      MTLCompilerObject::generateMachO(a1);
    if (SHIBYTE(v18) < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(&v16, "Failed to generate Binary archive ID: ");
    std::string::basic_string[abi:ne180100]<0>(v14, v19);
    if ((v15 & 0x80u) == 0)
      v8 = v14;
    else
      v8 = (void **)v14[0];
    if ((v15 & 0x80u) == 0)
      v9 = v15;
    else
      v9 = (std::string::size_type)v14[1];
    v10 = std::string::append(&v16, (const std::string::value_type *)v8, v9);
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v18 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if ((char)v15 < 0)
      operator delete(v14[0]);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
    if (v18 >= 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, void **))(a4 + 16))(a4, 2, 0, 0, v12);
    free(v19);
    if (SHIBYTE(v18) < 0)
      operator delete(__p[0]);
  }
}

void sub_24103CFFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::find_if[abi:ne180100]<std::__wrap_iter<fatalErrorHandler(void *,char const*,BOOL)::CollectInfo *>,fatalErrorHandler(void *,char const*,BOOL)::$_0>(uint64_t a1, uint64_t a2, const void **a3)
{
  uint64_t v3;
  unint64_t v6;
  int v7;
  unint64_t v8;
  size_t v9;
  const void *v10;
  const void *v11;

  v3 = a1;
  if (a1 != a2)
  {
    v6 = *((unsigned __int8 *)a3 + 23);
    while (1)
    {
      v7 = *(char *)(v3 + 23);
      v8 = v7 >= 0 ? *(unsigned __int8 *)(v3 + 23) : *(_QWORD *)(v3 + 8);
      if ((v6 & 0x80) != 0)
      {
        if (v8 == -1)
LABEL_26:
          std::string::__throw_out_of_range[abi:ne180100]();
        v10 = *a3;
        v9 = (unint64_t)a3[1] >= v8 ? v8 : (size_t)a3[1];
      }
      else
      {
        if (v8 == -1)
          goto LABEL_26;
        v9 = v6 >= v8 ? v8 : v6;
        v10 = a3;
      }
      v11 = v7 >= 0 ? (const void *)v3 : *(const void **)v3;
      if (!memcmp(v10, v11, v9) && v9 == v8)
        break;
      v3 += 32;
      if (v3 == a2)
        return a2;
    }
  }
  return v3;
}

_QWORD *std::vector<fatalErrorHandler(void *,char const*,BOOL)::AllowHashInfo,std::allocator<fatalErrorHandler(void *,char const*,BOOL)::AllowHashInfo>>::vector[abi:ne180100](_QWORD *a1, const void *a2, unint64_t a3)
{
  size_t v6;
  char *v7;
  char *v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 59)
      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
    v6 = 32 * a3;
    v7 = (char *)operator new(32 * a3);
    *a1 = v7;
    a1[1] = v7;
    v8 = &v7[32 * a3];
    a1[2] = v8;
    memmove(v7, a2, v6);
    a1[1] = v8;
  }
  return a1;
}

void sub_24103D170(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fatalErrorHandler(void *,char const*,BOOL)::CollectInfo>,fatalErrorHandler(void *,char const*,BOOL)::CollectInfo*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 9) < 0)
        operator delete(*(void **)(v3 - 32));
      v3 -= 32;
    }
  }
  return a1;
}

void std::vector<fatalErrorHandler(void *,char const*,BOOL)::CollectInfo,std::allocator<fatalErrorHandler(void *,char const*,BOOL)::CollectInfo>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 9) < 0)
          operator delete(*(v4 - 4));
        v4 -= 4;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("basic_string");
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
}

void sub_24103D2B0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  return result;
}

_QWORD *llvm::SmallVectorImpl<char>::append<char const*,void>(_QWORD *result, _BYTE *__src, _BYTE *a3)
{
  _QWORD *v5;
  size_t v6;
  uint64_t v7;

  v5 = result;
  v6 = a3 - __src;
  v7 = result[1];
  if (result[2] < (unint64_t)(v7 + a3 - __src))
  {
    result = (_QWORD *)llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v7 = v5[1];
  }
  if (__src != a3)
  {
    result = memcpy((void *)(*v5 + v7), __src, v6);
    v7 = v5[1];
  }
  v5[1] = v7 + v6;
  return result;
}

uint64_t llvm::SmallVectorTemplateBase<char,true>::push_back(uint64_t result, char a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)result;
  v4 = *(_QWORD *)(result + 8);
  if ((unint64_t)(v4 + 1) > *(_QWORD *)(result + 16))
  {
    result = llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v4 = v3[1];
  }
  *(_BYTE *)(*v3 + v4) = a2;
  ++v3[1];
  return result;
}

uint64_t SerializedLibraryInfo::addFunctionName(uint64_t *a1, __int128 *a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t result;

  v3 = a1 + 3;
  v4 = a1[4];
  if (v4 >= a1[5])
  {
    result = std::vector<std::string>::__push_back_slow_path<std::string const&>(v3, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v3, a2);
    result = v4 + 24;
  }
  a1[4] = result;
  return result;
}

uint64_t SerializedLibraryInfo::addVariable(uint64_t *a1, __int128 *a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t result;

  v3 = a1 + 6;
  v4 = a1[7];
  if (v4 >= a1[8])
  {
    result = std::vector<std::string>::__push_back_slow_path<std::string const&>(v3, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v3, a2);
    result = v4 + 24;
  }
  a1[7] = result;
  return result;
}

uint64_t SerializedLibraryInfo::addImportedSymbol(uint64_t *a1, __int128 *a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t result;

  v3 = a1 + 9;
  v4 = a1[10];
  if (v4 >= a1[11])
  {
    result = std::vector<std::string>::__push_back_slow_path<std::string const&>(v3, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v3, a2);
    result = v4 + 24;
  }
  a1[10] = result;
  return result;
}

uint64_t SerializedLibraryInfo::addImportedLibrary(uint64_t *a1, __int128 *a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t result;

  v3 = a1 + 12;
  v4 = a1[13];
  if (v4 >= a1[14])
  {
    result = std::vector<std::string>::__push_back_slow_path<std::string const&>(v3, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v3, a2);
    result = v4 + 24;
  }
  a1[13] = result;
  return result;
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  *(_QWORD *)(a1 + 8) = v3 + 24;
}

void sub_24103D514(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::__split_buffer<std::string>::pointer end;
  __int128 v12;
  uint64_t v13;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<PackedInput>>(v7, v9);
  else
    v10 = 0;
  end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_24103D628(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::string *v4;
  std::string *begin;
  std::string *end;
  std::string *value;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100]((uint64_t)this, (void **)&this->__begin_->__r_.__value_.__l.__data_);
  if (this->__first_)
    operator delete(this->__first_);
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

_QWORD *std::vector<llvm::Module *>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<llvm::Type *>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_24103D930(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<ImageFilterFunctionInfoSPI>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<ImageFilterFunctionInfoSPI>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 32 * a2);
    a1[1] = &v4[32 * a2];
  }
  return a1;
}

void sub_24103D9B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<ImageFilterFunctionInfoSPI>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<ImageFilterFunctionInfoSPI>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<VaryingInfo>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void std::vector<ImageFilterFunctionInfoSPI>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<ImageFilterFunctionInfoSPI>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<ImageFilterFunctionInfoSPI>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 32)
  {
    v4 = *(void **)(i - 24);
    if (v4)
    {
      *(_QWORD *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

_QWORD *std::vector<llvm::Function *>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<llvm::Type *>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_24103DAEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<ImageFilterFunctionArgumentInfoSPI>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(12 * a2);
}

char *std::vector<ImageFilterFunctionArgumentInfoSPI>::__assign_with_size[abi:ne180100]<ImageFilterFunctionArgumentInfoSPI*,ImageFilterFunctionArgumentInfoSPI*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)result) >> 2) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x1555555555555555)
      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0xAAAAAAAAAAAAAAALL)
      v12 = 0x1555555555555555;
    else
      v12 = v11;
    result = std::vector<ImageFilterFunctionArgumentInfoSPI>::__vallocate[abi:ne180100](v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 2) >= a4)
    goto LABEL_16;
  v16 = &__src[4 * ((v15 - v9) >> 2)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

char *std::vector<ImageFilterFunctionArgumentInfoSPI>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x1555555555555556)
    std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ImageFilterFunctionArgumentInfoSPI>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[12 * v4];
  return result;
}

uint64_t DeserialContext::stringFromSerializedData(DeserialContext *this)
{
  unint64_t v1;
  unint64_t v2;
  size_t v3;
  const char *v5;
  size_t v6;
  size_t v7;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v1 = *((_QWORD *)this + 2);
  v3 = v2 - v1;
  if (v2 <= v1 || (v5 = (const char *)(*(_QWORD *)this + v1), v6 = strnlen(v5, v3), v6 == v3))
    abort();
  v7 = v6;
  result = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithCString:encoding:", v5, 4);
  *((_QWORD *)this + 2) += v7 + 1;
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<MTLUINT256_t,MTLOpaqueGPUArchiverUnitRef *>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,MTLOpaqueGPUArchiverUnitRef *>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,MTLOpaqueGPUArchiverUnitRef *>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,MTLOpaqueGPUArchiverUnitRef *>>>::__emplace_unique_key_args<MTLUINT256_t,std::piecewise_construct_t const&,std::tuple<MTLUINT256_t const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  __int128 v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == *a2 && i[3] == a2[1] && i[4] == a2[2] && i[5] == a2[3])
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x38uLL);
  *i = 0;
  i[1] = v7;
  v16 = (*a4)[1];
  *((_OWORD *)i + 1) = **a4;
  *((_OWORD *)i + 2) = v16;
  i[6] = 0;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v8 || (float)(v18 * (float)v8) < v17)
  {
    v19 = 1;
    if (v8 >= 3)
      v19 = (v8 & (v8 - 1)) != 0;
    v20 = v19 | (2 * v8);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>>>::__rehash<true>(a1, v22);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *i = *v24;
LABEL_48:
    *v24 = i;
    goto LABEL_49;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v23 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v25 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v25 >= v8)
        v25 %= v8;
    }
    else
    {
      v25 &= v8 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_48;
  }
LABEL_49:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_24103DF70(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<MTLUINT256_t,MTLOpaqueGPUArchiverUnitRef *>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,MTLOpaqueGPUArchiverUnitRef *>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,MTLOpaqueGPUArchiverUnitRef *>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,MTLOpaqueGPUArchiverUnitRef *>>>::find<MTLUINT256_t>(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == *a2 && result[3] == a2[1] && result[4] == a2[2] && result[5] == a2[3])
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl(uint64_t a1)
{
  void *v2;
  void *v3;

  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::DeallocateSlabs(a1, *(llvm ***)(a1 + 16), (llvm **)(*(_QWORD *)(a1 + 16) + 8 * *(unsigned int *)(a1 + 24)));
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::DeallocateCustomSizedSlabs(a1);
  v2 = *(void **)(a1 + 64);
  if (v2 != (void *)(a1 + 80))
    free(v2);
  v3 = *(void **)(a1 + 16);
  if (v3 != (void *)(a1 + 32))
    free(v3);
  return a1;
}

uint64_t llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::DeallocateSlabs(uint64_t result, llvm **a2, llvm **a3)
{
  llvm **v4;
  uint64_t v5;
  llvm **v6;
  uint64_t v7;
  llvm *v8;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = result;
    v6 = a2;
    do
    {
      v7 = (((unint64_t)v6 - *(_QWORD *)(v5 + 16)) >> 10) & 0x1FFFFFF;
      if (v7 >= 0x1E)
        LOBYTE(v7) = 30;
      v8 = *v4++;
      result = llvm::deallocate_buffer(v8, (void *)(4096 << v7));
      ++v6;
    }
    while (v4 != a3);
  }
  return result;
}

uint64_t llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::DeallocateCustomSizedSlabs(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  llvm *v4;
  void *v5;

  v1 = *(unsigned int *)(result + 72);
  if ((_DWORD)v1)
  {
    v2 = *(_QWORD *)(result + 64);
    v3 = v2 + 16 * v1;
    do
    {
      v4 = *(llvm **)v2;
      v5 = *(void **)(v2 + 8);
      v2 += 16;
      result = llvm::deallocate_buffer(v4, v5);
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t std::vector<FunctionConstantDesc>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<FunctionConstantDesc>,std::reverse_iterator<FunctionConstantDesc*>,std::reverse_iterator<FunctionConstantDesc*>,std::reverse_iterator<FunctionConstantDesc*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<FunctionConstantDesc>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(40 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<FunctionConstantDesc>,std::reverse_iterator<FunctionConstantDesc*>,std::reverse_iterator<FunctionConstantDesc*>,std::reverse_iterator<FunctionConstantDesc*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 40);
      *(_QWORD *)(v7 - 24) = *(_QWORD *)(a3 - 24);
      *(_OWORD *)(v7 - 40) = v8;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 40) = 0;
      v9 = *(_QWORD *)(a3 - 16);
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 - 8);
      *(_QWORD *)(v7 - 16) = v9;
      v7 = *((_QWORD *)&v15 + 1) - 40;
      *((_QWORD *)&v15 + 1) -= 40;
      a3 -= 40;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<FunctionConstantDesc>,std::reverse_iterator<FunctionConstantDesc*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<FunctionConstantDesc>,std::reverse_iterator<FunctionConstantDesc*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<FunctionConstantDesc>,std::reverse_iterator<FunctionConstantDesc*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<FunctionConstantDesc>,std::reverse_iterator<FunctionConstantDesc*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 40;
  }
}

uint64_t std::__split_buffer<FunctionConstantDesc>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<FunctionConstantDesc>::__destruct_at_end[abi:ne180100](a1, *(void ***)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<FunctionConstantDesc>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 5;
      *(_QWORD *)(a1 + 16) = v2 - 5;
      if (*((char *)v2 - 17) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t std::vector<FunctionDesc>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<FunctionDesc>,std::reverse_iterator<FunctionDesc*>,std::reverse_iterator<FunctionDesc*>,std::reverse_iterator<FunctionDesc*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<FunctionDesc>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x222222222222223)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(120 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<FunctionDesc>,std::reverse_iterator<FunctionDesc*>,std::reverse_iterator<FunctionDesc*>,std::reverse_iterator<FunctionDesc*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    do
    {
      *(_OWORD *)(v7 - 120) = *(_OWORD *)(a3 - 120);
      v8 = *(_OWORD *)(a3 - 104);
      v9 = *(_OWORD *)(a3 - 88);
      v10 = *(_QWORD *)(a3 - 56);
      *(_OWORD *)(v7 - 72) = *(_OWORD *)(a3 - 72);
      *(_OWORD *)(v7 - 88) = v9;
      *(_OWORD *)(v7 - 104) = v8;
      *(_QWORD *)(v7 - 56) = v10;
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_OWORD *)(v7 - 48) = *(_OWORD *)(a3 - 48);
      *(_QWORD *)(v7 - 32) = *(_QWORD *)(a3 - 32);
      *(_QWORD *)(a3 - 48) = 0;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      v7 = *((_QWORD *)&v16 + 1) - 120;
      *((_QWORD *)&v16 + 1) -= 120;
      a3 -= 120;
    }
    while (a3 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<FunctionDesc>,std::reverse_iterator<FunctionDesc*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<FunctionDesc>,std::reverse_iterator<FunctionDesc*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<FunctionDesc>,std::reverse_iterator<FunctionDesc*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<FunctionDesc>,std::reverse_iterator<FunctionDesc*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<FunctionDesc>::destroy[abi:ne180100](v3, v1);
      v1 += 120;
    }
    while (v1 != v2);
  }
}

void std::allocator<FunctionDesc>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void **v4;

  v3 = *(void **)(a2 + 96);
  if (v3)
  {
    *(_QWORD *)(a2 + 104) = v3;
    operator delete(v3);
  }
  v4 = (void **)(a2 + 72);
  std::vector<FunctionConstantDesc>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void **std::__split_buffer<FunctionDesc>::~__split_buffer(void **a1)
{
  std::__split_buffer<FunctionDesc>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<FunctionDesc>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 120;
    std::allocator<FunctionDesc>::destroy[abi:ne180100](v4, i - 120);
  }
}

uint64_t std::vector<FunctionDesc>::__push_back_slow_path<FunctionDesc const&>(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x222222222222222)
    std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
  if (0xDDDDDDDDDDDDDDDELL * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0xDDDDDDDDDDDDDDDELL * ((a1[2] - *a1) >> 3);
  if (0xEEEEEEEEEEEEEEEFLL * ((a1[2] - *a1) >> 3) >= 0x111111111111111)
    v6 = 0x222222222222222;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<FunctionDesc>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[120 * v3];
  v13 = &v7[120 * v6];
  std::allocator<FunctionDesc>::construct[abi:ne180100]<FunctionDesc,FunctionDesc const&>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 120;
  std::vector<FunctionDesc>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<FunctionDesc>::~__split_buffer(&v10);
  return v8;
}

void sub_24103E7A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<FunctionDesc>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *std::allocator<FunctionDesc>::construct[abi:ne180100]<FunctionDesc,FunctionDesc const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v4 = (_QWORD *)a2;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  v5 = *(_OWORD *)(a3 + 16);
  v6 = *(_OWORD *)(a3 + 32);
  v7 = *(_OWORD *)(a3 + 48);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a3 + 64);
  *(_OWORD *)(a2 + 32) = v6;
  *(_OWORD *)(a2 + 48) = v7;
  *(_OWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  std::vector<FunctionConstantDesc>::__init_with_size[abi:ne180100]<FunctionConstantDesc*,FunctionConstantDesc*>((std::string *)(a2 + 72), *(__int128 **)(a3 + 72), *(__int128 **)(a3 + 80), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72)) >> 3));
  v4[12] = 0;
  v4[13] = 0;
  v4 += 12;
  v4[2] = 0;
  return std::vector<MTLTagType>::__init_with_size[abi:ne180100]<MTLTagType*,MTLTagType*>(v4, *(const void **)(a3 + 96), *(_QWORD *)(a3 + 104), (uint64_t)(*(_QWORD *)(a3 + 104) - *(_QWORD *)(a3 + 96)) >> 3);
}

void sub_24103E854(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<FunctionConstantDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

std::string *std::vector<FunctionConstantDesc>::__init_with_size[abi:ne180100]<FunctionConstantDesc*,FunctionConstantDesc*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<FunctionConstantDesc>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<FunctionConstantDesc>,FunctionConstantDesc*,FunctionConstantDesc*,FunctionConstantDesc*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_24103E8D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<FunctionConstantDesc>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<FunctionConstantDesc>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x666666666666667)
    std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<FunctionConstantDesc>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<FunctionConstantDesc>,FunctionConstantDesc*,FunctionConstantDesc*,FunctionConstantDesc*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  std::string *v8;
  std::string::size_type v9;
  _QWORD v11[3];
  char v12;
  std::string *v13;
  std::string *v14;

  v4 = this;
  v13 = this;
  v14 = this;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  v12 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v8 = v14;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
        v8 = v4;
      }
      v9 = *((_QWORD *)v6 + 3);
      LODWORD(v4[1].__r_.__value_.__r.__words[1]) = *((_DWORD *)v6 + 8);
      v4[1].__r_.__value_.__r.__words[0] = v9;
      v6 = (__int128 *)((char *)v6 + 40);
      v4 = (std::string *)((char *)v8 + 40);
      v14 = (std::string *)((char *)v8 + 40);
    }
    while (v6 != a3);
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<FunctionConstantDesc>,FunctionConstantDesc*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v4;
}

void sub_24103E9FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<FunctionConstantDesc>,FunctionConstantDesc*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<FunctionConstantDesc>,FunctionConstantDesc*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<FunctionConstantDesc>,FunctionConstantDesc*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<FunctionConstantDesc>,FunctionConstantDesc*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 17) < 0)
      operator delete(*(void **)(v1 - 40));
    v1 -= 40;
  }
}

_QWORD *std::vector<MTLTagType>::__init_with_size[abi:ne180100]<MTLTagType*,MTLTagType*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<llvm::Type *>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_24103EAE4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected(uint64_t a1)
{
  uint64_t v2;

  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    v2 = *(_QWORD *)a1;
    *(_QWORD *)a1 = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  else
  {
    std::unique_ptr<llvm::Module>::reset[abi:ne180100]((uint64_t *)a1, 0);
  }
  return a1;
}

_QWORD *std::vector<CompileTimeData>::__init_with_size[abi:ne180100]<CompileTimeData*,CompileTimeData*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<CompileTimeData>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_24103EBAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<CompileTimeData>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SmallVertexPartialLoad>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void std::vector<FunctionDesc>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 120;
        std::allocator<FunctionDesc>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<MTLArgumentData>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 288;
        std::allocator<MTLArgumentData>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<MTLArgumentData>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  MTLArgumentData *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  MTLArgumentData *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void *v19[2];
  char *v20;
  char *v21;
  uint64_t v22;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(MTLArgumentData **)(v4 - 8);
  if (0x8E38E38E38E38E39 * ((v6 - (uint64_t)v7) >> 5) >= a2)
  {
    if (a2)
    {
      v13 = (MTLArgumentData *)((char *)v7 + 288 * a2);
      v14 = 288 * a2;
      do
      {
        MTLArgumentData::MTLArgumentData(v7);
        v7 = (MTLArgumentData *)((char *)v7 + 288);
        v14 -= 288;
      }
      while (v14);
      v7 = v13;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    v8 = 0x8E38E38E38E38E39 * (((uint64_t)v7 - *a1) >> 5);
    v9 = v8 + a2;
    if (v8 + a2 > 0xE38E38E38E38E3)
      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
    v10 = 0x8E38E38E38E38E39 * ((v5 - *a1) >> 5);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x71C71C71C71C71)
      v11 = 0xE38E38E38E38E3;
    else
      v11 = v9;
    v22 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MTLArgumentData>>(v4, v11);
    else
      v12 = 0;
    v15 = &v12[288 * v8];
    v19[0] = v12;
    v19[1] = v15;
    v20 = v15;
    v21 = &v12[288 * v11];
    v16 = 9 * a2;
    v17 = &v15[288 * a2];
    v18 = 32 * v16;
    do
    {
      MTLArgumentData::MTLArgumentData((MTLArgumentData *)v15);
      v15 += 288;
      v18 -= 288;
    }
    while (v18);
    v20 = v17;
    std::vector<MTLArgumentData>::__swap_out_circular_buffer(a1, v19);
    std::__split_buffer<MTLArgumentData>::~__split_buffer(v19);
  }
}

void sub_24103EE74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<MTLArgumentData>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::unique_ptr<llvm::MemoryBuffer>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<llvm::Type *>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_24103EF08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::unique_ptr<llvm::ErrorInfoBase>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *llvm::SmallVector<LLVMOpaqueModule *,1u>::SmallVector(_QWORD *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = a1 + 2;
  a1[1] = 0x100000000;
  llvm::SmallVectorImpl<llvm::Metadata *>::append<llvm::Metadata * const*,void>((uint64_t)a1, a2, &a2[8 * a3]);
  return a1;
}

void sub_24103EF58(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  void *v3;

  v3 = v2;
  if (*v1 != v3)
    free(*v1);
  _Unwind_Resume(exception_object);
}

_QWORD *llvm::SmallVector<char const*,1u>::SmallVector(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = a1 + 2;
  a1[1] = 0x100000000;
  llvm::SmallVectorImpl<llvm::Value *>::assign((uint64_t)a1, a2, *a3);
  return a1;
}

void sub_24103EFB4(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  void *v3;

  v3 = v2;
  if (*v1 != v3)
    free(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::unique_ptr<void,LLVMMemoryBufferDeleter>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
    return LLVMDisposeMemoryBuffer();
  return result;
}

void *std::__hash_table<std::__hash_value_type<std::string,LLVMOpaqueMemoryBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,LLVMOpaqueMemoryBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,LLVMOpaqueMemoryBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,LLVMOpaqueMemoryBuffer *>>>::__emplace_unique_key_args<std::string,std::string,LLVMOpaqueMemoryBuffer *&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  void **v15;
  void *i;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;

  v9 = (_QWORD *)(a1 + 24);
  v10 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v15 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      for (i = *v15; i; i = *(void **)i)
      {
        v17 = *((_QWORD *)i + 1);
        if (v17 == v11)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, (unsigned __int8 *)i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12)
              v17 %= v12;
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4)
            break;
        }
      }
    }
  }
  v18 = (_QWORD *)(a1 + 16);
  i = operator new(0x30uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v11;
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  v19 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v20 = *a4;
  *((_QWORD *)i + 4) = v19;
  *((_QWORD *)i + 5) = v20;
  v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v22 = *(float *)(a1 + 32);
  if (!v12 || (float)(v22 * (float)v12) < v21)
  {
    v23 = 1;
    if (v12 >= 3)
      v23 = (v12 & (v12 - 1)) != 0;
    v24 = v23 | (2 * v12);
    v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25)
      v26 = v25;
    else
      v26 = v24;
    std::__hash_table<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>>>::__rehash<true>(a1, v26);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v4 = v11 % v12;
      else
        v4 = v11;
    }
    else
    {
      v4 = (v12 - 1) & v11;
    }
  }
  v27 = *(_QWORD *)a1;
  v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v28)
  {
    *(_QWORD *)i = *v28;
LABEL_38:
    *v28 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *v18;
  *v18 = i;
  *(_QWORD *)(v27 + 8 * v4) = v18;
  if (*(_QWORD *)i)
  {
    v29 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v29 >= v12)
        v29 %= v12;
    }
    else
    {
      v29 &= v12 - 1;
    }
    v28 = (_QWORD *)(*(_QWORD *)a1 + 8 * v29);
    goto LABEL_38;
  }
LABEL_39:
  ++*v9;
  return i;
}

void sub_24103F268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void **v12;
  uint64_t v13;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MTLCompilerDataType>,void *>>>::operator()[abi:ne180100](v13, v12);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,llvm::StringRef>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,llvm::StringRef>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,llvm::StringRef>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,llvm::StringRef>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,llvm::StringRef>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,llvm::StringRef>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,llvm::StringRef>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,llvm::StringRef>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_24103F4F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MTLCompilerDataType>,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,llvm::StringRef>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,llvm::StringRef>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,llvm::StringRef>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,llvm::StringRef>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x38uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_24103F5A4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MTLCompilerDataType>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__function::__func<MTLCompilerObject::runFragmentLinkingPass(BinaryRequestData &,FrameworkPassesOutput &)::$_0,std::allocator<MTLCompilerObject::runFragmentLinkingPass(BinaryRequestData &,FrameworkPassesOutput &)::$_0>,void ()(llvm::Module *,unsigned int,unsigned int,unsigned int,std::vector<PackedInput> const&,std::vector<VaryingInfo> const&)>::~__func()
{
  JUMPOUT(0x24268D8F0);
}

_QWORD *std::__function::__func<MTLCompilerObject::runFragmentLinkingPass(BinaryRequestData &,FrameworkPassesOutput &)::$_0,std::allocator<MTLCompilerObject::runFragmentLinkingPass(BinaryRequestData &,FrameworkPassesOutput &)::$_0>,void ()(llvm::Module *,unsigned int,unsigned int,unsigned int,std::vector<PackedInput> const&,std::vector<VaryingInfo> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_25111F630;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MTLCompilerObject::runFragmentLinkingPass(BinaryRequestData &,FrameworkPassesOutput &)::$_0,std::allocator<MTLCompilerObject::runFragmentLinkingPass(BinaryRequestData &,FrameworkPassesOutput &)::$_0>,void ()(llvm::Module *,unsigned int,unsigned int,unsigned int,std::vector<PackedInput> const&,std::vector<VaryingInfo> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_25111F630;
  a2[1] = v2;
  return result;
}

void std::__function::__func<MTLCompilerObject::runFragmentLinkingPass(BinaryRequestData &,FrameworkPassesOutput &)::$_0,std::allocator<MTLCompilerObject::runFragmentLinkingPass(BinaryRequestData &,FrameworkPassesOutput &)::$_0>,void ()(llvm::Module *,unsigned int,unsigned int,unsigned int,std::vector<PackedInput> const&,std::vector<VaryingInfo> const&)>::operator()(uint64_t a1, _QWORD *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v7 = *(_QWORD *)(a1 + 8);
  v8 = MTLCompilerObject::serializeFragmentPackingInfo(*a2, *a3, *a4, *a5, a6, a7, v7 + 40);
  v9 = *(void **)(v7 + 32);
  *(_QWORD *)(v7 + 32) = v8;
  if (v9)
    free(v9);
}

void std::__function::__func<MTLCompilerObject::runFragmentLinkingPass(BinaryRequestData &,FrameworkPassesOutput &)::$_1,std::allocator<MTLCompilerObject::runFragmentLinkingPass(BinaryRequestData &,FrameworkPassesOutput &)::$_1>,void ()(llvm::Module *,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<VaryingInfo> const&)>::~__func()
{
  JUMPOUT(0x24268D8F0);
}

_QWORD *std::__function::__func<MTLCompilerObject::runFragmentLinkingPass(BinaryRequestData &,FrameworkPassesOutput &)::$_1,std::allocator<MTLCompilerObject::runFragmentLinkingPass(BinaryRequestData &,FrameworkPassesOutput &)::$_1>,void ()(llvm::Module *,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<VaryingInfo> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_25111F678;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MTLCompilerObject::runFragmentLinkingPass(BinaryRequestData &,FrameworkPassesOutput &)::$_1,std::allocator<MTLCompilerObject::runFragmentLinkingPass(BinaryRequestData &,FrameworkPassesOutput &)::$_1>,void ()(llvm::Module *,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<VaryingInfo> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_25111F678;
  a2[1] = v2;
  return result;
}

void std::__function::__func<MTLCompilerObject::runFragmentLinkingPass(BinaryRequestData &,FrameworkPassesOutput &)::$_1,std::allocator<MTLCompilerObject::runFragmentLinkingPass(BinaryRequestData &,FrameworkPassesOutput &)::$_1>,void ()(llvm::Module *,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<VaryingInfo> const&)>::operator()(uint64_t a1, _QWORD *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v7 = *(_QWORD *)(a1 + 8);
  v8 = MTLCompilerObject::serializeFragmentLinkingInfo(*a2, *a3, *a4, *a5, *a6, a7, v7 + 40);
  v9 = *(void **)(v7 + 32);
  *(_QWORD *)(v7 + 32) = v8;
  if (v9)
    free(v9);
}

void std::vector<PostVertexDumpOutput>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 96;
        std::allocator<PostVertexDumpOutput>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

id MTLDeserializePluginDataDictionary(const unsigned __int8 *a1)
{
  void *v2;
  unsigned int v3;
  uint64_t v4;
  unsigned __int16 *v5;
  void *v6;
  void *v7;

  if (!*a1)
    return 0;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCED8]), "initWithCapacity:", *a1);
  if (*a1)
  {
    v3 = 0;
    v4 = 1;
    do
    {
      v5 = (unsigned __int16 *)&a1[v4];
      v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD17C8]), "initWithBytesNoCopy:length:encoding:freeWhenDone:", v5 + 2, *v5, 4, 0);
      v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCE50]), "initWithBytesNoCopy:length:freeWhenDone:", (char *)v5 + *v5 + 4, v5[1], 0);
      objc_msgSend(v2, "setObject:forKey:", v7, v6);

      v4 += *v5 + (unint64_t)v5[1] + 4;
      ++v3;
    }
    while (v3 < *a1);
  }
  return v2;
}

uint64_t Air::CloneLinkedFunctions<Air::LinkedFunctions>(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned __int16 *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v17;

  v4 = *a2;
  v5 = -v4;
  v6 = (unsigned __int16 *)((char *)a2 - v4);
  if (*v6 >= 9u && (v7 = v6[4]) != 0)
  {
    v17 = (unsigned int *)((char *)a2 + v7 + *(unsigned int *)((char *)a2 + v7));
    v8 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Air13FunctionGroupEEEZNS3_20CloneLinkedFunctionsINS3_15LinkedFunctionsEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_30LinkedFunctionsCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *v17, &v17, a1);
    v5 = -(uint64_t)*a2;
  }
  else
  {
    v8 = 0;
  }
  if (*(unsigned __int16 *)((char *)a2 + v5) >= 7u && *(_WORD *)((char *)a2 + v5 + 6))
  {
    v17 = (unsigned int *)((char *)a2
                         + *(unsigned __int16 *)((char *)a2 + v5 + 6)
                         + *(unsigned int *)((char *)a2 + *(unsigned __int16 *)((char *)a2 + v5 + 6)));
    v9 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetINS_6StringEEEZN3Air20CloneLinkedFunctionsINS5_15LinkedFunctionsEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS5_30LinkedFunctionsCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE0_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *v17, &v17, (flatbuffers::FlatBufferBuilder *)a1);
    v5 = -(uint64_t)*a2;
  }
  else
  {
    v9 = 0;
  }
  v10 = (unsigned __int16 *)((char *)a2 + v5);
  if (*v10 >= 5u && (v11 = v10[2]) != 0)
  {
    v17 = (unsigned int *)((char *)a2 + v11 + *(unsigned int *)((char *)a2 + v11));
    v12 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetINS_6StringEEEZN3Air20CloneLinkedFunctionsINS5_15LinkedFunctionsEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS5_30LinkedFunctionsCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE1_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *v17, &v17, (flatbuffers::FlatBufferBuilder *)a1);
  }
  else
  {
    v12 = 0;
  }
  *(_BYTE *)(a1 + 70) = 1;
  v13 = *(_QWORD *)(a1 + 40);
  v14 = *(_QWORD *)(a1 + 48);
  v15 = *(_QWORD *)(a1 + 32);
  if (v8)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 8, v8);
  if (v9)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, v9);
  if (v12)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 4, v12);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v15 - (unsigned __int16)v14 + (unsigned __int16)v13);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Air24PipelineBufferDescriptorEEEZNS3_29CloneVertexFunctionDescriptorINS3_24VertexFunctionDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_39VertexFunctionDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *v11;
  uint64_t v12;
  void *__p;
  _BYTE *v15;

  v6 = a2;
  std::vector<flatbuffers::Offset<Air::PipelineBufferDescriptor>>::vector(&__p, a2);
  if (v6)
  {
    v8 = 0;
    do
    {
      v9 = Air::ClonePipelineBufferDescriptor<Air::PipelineBufferDescriptor>(a4, (int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4)));
      v10 = __p;
      *(_DWORD *)((char *)__p + v8) = v9;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    v10 = __p;
  }
  if (v15 == v10)
    v11 = &flatbuffers::data<flatbuffers::Offset<Air::PipelineBufferDescriptor>,std::allocator<flatbuffers::Offset<Air::PipelineBufferDescriptor>>>(std::vector<flatbuffers::Offset<Air::PipelineBufferDescriptor>> const&)::t;
  else
    v11 = v10;
  v12 = flatbuffers::FlatBufferBuilder::CreateVector<flatbuffers::String>(a1, (uint64_t)v11, (v15 - v10) >> 2);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_24103FB48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Air::CloneVertexDescriptor<Air::VertexDescriptor>(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  int v8;
  unsigned __int16 *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v16;

  v4 = *a2;
  v5 = -v4;
  v6 = (unsigned __int16 *)((char *)a2 - v4);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v16 = (unsigned int *)((char *)a2 + v7 + *(unsigned int *)((char *)a2 + v7));
    v8 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Air22BufferLayoutDescriptorEEEZNS3_21CloneVertexDescriptorINS3_16VertexDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_31VertexDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *v16, &v16, a1);
    v5 = -(uint64_t)*a2;
  }
  else
  {
    v8 = 0;
  }
  v9 = (unsigned __int16 *)((char *)a2 + v5);
  if (*v9 >= 5u && (v10 = v9[2]) != 0)
  {
    v16 = (unsigned int *)((char *)a2 + v10 + *(unsigned int *)((char *)a2 + v10));
    v11 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Air19AttributeDescriptorEEEZNS3_21CloneVertexDescriptorINS3_16VertexDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_31VertexDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE0_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *v16, &v16, a1);
  }
  else
  {
    v11 = 0;
  }
  *(_BYTE *)(a1 + 70) = 1;
  v12 = *(_QWORD *)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_QWORD *)(a1 + 32);
  if (v8)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, v8);
  if (v11)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 4, v11);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v14 - (unsigned __int16)v13 + (unsigned __int16)v12);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Air13FunctionGroupEEEZNS3_20CloneLinkedFunctionsINS3_15LinkedFunctionsEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_30LinkedFunctionsCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *v11;
  uint64_t v12;
  void *__p;
  _BYTE *v15;

  v6 = a2;
  std::vector<flatbuffers::Offset<Air::FunctionGroup>>::vector(&__p, a2);
  if (v6)
  {
    v8 = 0;
    do
    {
      v9 = Air::CloneFunctionGroup<Air::FunctionGroup>(a4, (const char *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4)));
      v10 = __p;
      *(_DWORD *)((char *)__p + v8) = v9;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    v10 = __p;
  }
  if (v15 == v10)
    v11 = &flatbuffers::data<flatbuffers::Offset<Air::FunctionGroup>,std::allocator<flatbuffers::Offset<Air::FunctionGroup>>>(std::vector<flatbuffers::Offset<Air::FunctionGroup>> const&)::t;
  else
    v11 = v10;
  v12 = flatbuffers::FlatBufferBuilder::CreateVector<flatbuffers::String>(a1, (uint64_t)v11, (v15 - v10) >> 2);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_24103FD50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetINS_6StringEEEZN3Air20CloneLinkedFunctionsINS5_15LinkedFunctionsEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS5_30LinkedFunctionsCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE0_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, _QWORD *a3, flatbuffers::FlatBufferBuilder *a4)
{
  unint64_t v6;
  uint64_t v8;
  const char *v9;
  int String;
  _BYTE *v11;
  void *v12;
  uint64_t v13;
  void *__p;
  _BYTE *v16;

  v6 = a2;
  std::vector<flatbuffers::Offset<flatbuffers::String>>::vector(&__p, a2);
  if (v6)
  {
    v8 = 0;
    do
    {
      v9 = (const char *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4));
      String = flatbuffers::FlatBufferBuilder::CreateString(a4, v9 + 4, *(unsigned int *)v9);
      v11 = __p;
      *(_DWORD *)((char *)__p + v8) = String;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    v11 = __p;
  }
  if (v16 == v11)
    v12 = &flatbuffers::data<flatbuffers::Offset<flatbuffers::String>,std::allocator<flatbuffers::Offset<flatbuffers::String>>>(std::vector<flatbuffers::Offset<flatbuffers::String>> const&)::t;
  else
    v12 = v11;
  v13 = flatbuffers::FlatBufferBuilder::CreateVector<flatbuffers::String>(a1, (uint64_t)v12, (v16 - v11) >> 2);
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  return v13;
}

void sub_24103FE34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetINS_6StringEEEZN3Air20CloneLinkedFunctionsINS5_15LinkedFunctionsEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS5_30LinkedFunctionsCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE1_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, _QWORD *a3, flatbuffers::FlatBufferBuilder *a4)
{
  unint64_t v6;
  uint64_t v8;
  const char *v9;
  int String;
  _BYTE *v11;
  void *v12;
  uint64_t v13;
  void *__p;
  _BYTE *v16;

  v6 = a2;
  std::vector<flatbuffers::Offset<flatbuffers::String>>::vector(&__p, a2);
  if (v6)
  {
    v8 = 0;
    do
    {
      v9 = (const char *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4));
      String = flatbuffers::FlatBufferBuilder::CreateString(a4, v9 + 4, *(unsigned int *)v9);
      v11 = __p;
      *(_DWORD *)((char *)__p + v8) = String;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    v11 = __p;
  }
  if (v16 == v11)
    v12 = &flatbuffers::data<flatbuffers::Offset<flatbuffers::String>,std::allocator<flatbuffers::Offset<flatbuffers::String>>>(std::vector<flatbuffers::Offset<flatbuffers::String>> const&)::t;
  else
    v12 = v11;
  v13 = flatbuffers::FlatBufferBuilder::CreateVector<flatbuffers::String>(a1, (uint64_t)v12, (v16 - v11) >> 2);
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  return v13;
}

void sub_24103FF18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<flatbuffers::Offset<Air::FunctionGroup>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_24103FF90(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Air::CloneFunctionGroup<Air::FunctionGroup>(uint64_t a1, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  int v8;
  const char *v9;
  uint64_t v10;
  int String;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v16;

  v4 = *(int *)a2;
  v5 = -v4;
  v6 = &a2[-v4];
  if (*(unsigned __int16 *)v6 >= 7u && (v7 = *((unsigned __int16 *)v6 + 3)) != 0)
  {
    v16 = &a2[v7 + *(unsigned int *)&a2[v7]];
    v8 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetINS_6StringEEEZN3Air18CloneFunctionGroupINS5_13FunctionGroupEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS5_28FunctionGroupCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *(unsigned int *)v16, &v16, (flatbuffers::FlatBufferBuilder *)a1);
    v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    v8 = 0;
  }
  v9 = &a2[v5];
  if (*(unsigned __int16 *)v9 >= 5u && (v10 = *((unsigned __int16 *)v9 + 2)) != 0)
    String = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a1, &a2[v10 + 4 + *(unsigned int *)&a2[v10]], *(unsigned int *)&a2[v10 + *(unsigned int *)&a2[v10]]);
  else
    String = 0;
  *(_BYTE *)(a1 + 70) = 1;
  v12 = *(_QWORD *)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_QWORD *)(a1 + 32);
  if (v8)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, v8);
  if (String)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 4, String);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v14 - (unsigned __int16)v13 + (unsigned __int16)v12);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetINS_6StringEEEZN3Air18CloneFunctionGroupINS5_13FunctionGroupEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS5_28FunctionGroupCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, _QWORD *a3, flatbuffers::FlatBufferBuilder *a4)
{
  unint64_t v6;
  uint64_t v8;
  const char *v9;
  int String;
  _BYTE *v11;
  void *v12;
  uint64_t v13;
  void *__p;
  _BYTE *v16;

  v6 = a2;
  std::vector<flatbuffers::Offset<flatbuffers::String>>::vector(&__p, a2);
  if (v6)
  {
    v8 = 0;
    do
    {
      v9 = (const char *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4));
      String = flatbuffers::FlatBufferBuilder::CreateString(a4, v9 + 4, *(unsigned int *)v9);
      v11 = __p;
      *(_DWORD *)((char *)__p + v8) = String;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    v11 = __p;
  }
  if (v16 == v11)
    v12 = &flatbuffers::data<flatbuffers::Offset<flatbuffers::String>,std::allocator<flatbuffers::Offset<flatbuffers::String>>>(std::vector<flatbuffers::Offset<flatbuffers::String>> const&)::t;
  else
    v12 = v11;
  v13 = flatbuffers::FlatBufferBuilder::CreateVector<flatbuffers::String>(a1, (uint64_t)v12, (v16 - v11) >> 2);
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  return v13;
}

void sub_241040188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<flatbuffers::Offset<flatbuffers::String>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_241040200(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t flatbuffers::FlatBufferBuilder::CreateVector<flatbuffers::String>(flatbuffers::FlatBufferBuilder *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *((_BYTE *)a1 + 70) = 1;
  v6 = 4 * a3;
  flatbuffers::FlatBufferBuilder::PreAlign(a1, 4 * a3, 4uLL);
  flatbuffers::FlatBufferBuilder::PreAlign(a1, v6, 4uLL);
  if (a3)
  {
    v7 = a2 - 4;
    v8 = a3;
    do
    {
      v9 = v8 - 1;
      flatbuffers::FlatBufferBuilder::PushElement<flatbuffers::String>(a1, *(_DWORD *)(v7 + 4 * v8));
      v8 = v9;
    }
    while (v9);
  }
  *((_BYTE *)a1 + 70) = 0;
  return flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)a1, a3);
}

uint64_t flatbuffers::FlatBufferBuilder::PushElement<flatbuffers::String>(flatbuffers::FlatBufferBuilder *a1, int a2)
{
  flatbuffers::FlatBufferBuilder::Align(a1, 4uLL);
  return flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)a1, *((_DWORD *)a1 + 8) - *((_DWORD *)a1 + 12) + *((_DWORD *)a1 + 10) - a2 + 4);
}

uint64_t flatbuffers::FlatBufferBuilder::CreateString(flatbuffers::FlatBufferBuilder *this, const char *a2, unint64_t a3)
{
  flatbuffers::FlatBufferBuilder::PreAlign(this, a3 + 1, 4uLL);
  flatbuffers::vector_downward::fill((char *)this, 1uLL);
  flatbuffers::vector_downward::push(this, (const unsigned __int8 *)a2, a3);
  flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, a3);
  return (*((_DWORD *)this + 8) - *((_DWORD *)this + 12) + *((_DWORD *)this + 10));
}

_QWORD *std::vector<flatbuffers::Offset<Air::PipelineBufferDescriptor>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_2410403B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Air::ClonePipelineBufferDescriptor<Air::PipelineBufferDescriptor>(uint64_t a1, int *a2)
{
  unsigned __int16 *v3;
  uint64_t v4;
  unsigned int v5;
  __int16 v6;

  *(_BYTE *)(a1 + 70) = 1;
  v3 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v3 >= 5u && (v4 = v3[2]) != 0)
  {
    v5 = *((unsigned __int8 *)a2 + v4);
    if (v5 >= 3)
      abort();
  }
  else
  {
    v5 = 0;
  }
  v6 = *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 48) + *(_QWORD *)(a1 + 40);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 4, v5, 0);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, v6);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Air22BufferLayoutDescriptorEEEZNS3_21CloneVertexDescriptorINS3_16VertexDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_31VertexDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *v11;
  uint64_t v12;
  void *__p;
  _BYTE *v15;

  v6 = a2;
  std::vector<flatbuffers::Offset<Air::BufferLayoutDescriptor>>::vector(&__p, a2);
  if (v6)
  {
    v8 = 0;
    do
    {
      v9 = Air::CloneBufferLayoutDescriptor<Air::BufferLayoutDescriptor>(a4, (int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4)));
      v10 = __p;
      *(_DWORD *)((char *)__p + v8) = v9;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    v10 = __p;
  }
  if (v15 == v10)
    v11 = &flatbuffers::data<flatbuffers::Offset<Air::BufferLayoutDescriptor>,std::allocator<flatbuffers::Offset<Air::BufferLayoutDescriptor>>>(std::vector<flatbuffers::Offset<Air::BufferLayoutDescriptor>> const&)::t;
  else
    v11 = v10;
  v12 = flatbuffers::FlatBufferBuilder::CreateVector<flatbuffers::String>(a1, (uint64_t)v11, (v15 - v10) >> 2);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_24104050C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Air19AttributeDescriptorEEEZNS3_21CloneVertexDescriptorINS3_16VertexDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_31VertexDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE0_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *v11;
  uint64_t v12;
  void *__p;
  _BYTE *v15;

  v6 = a2;
  std::vector<flatbuffers::Offset<Air::AttributeDescriptor>>::vector(&__p, a2);
  if (v6)
  {
    v8 = 0;
    do
    {
      v9 = Air::CloneAttributeDescriptor<Air::AttributeDescriptor>(a4, (int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4)));
      v10 = __p;
      *(_DWORD *)((char *)__p + v8) = v9;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    v10 = __p;
  }
  if (v15 == v10)
    v11 = &flatbuffers::data<flatbuffers::Offset<Air::AttributeDescriptor>,std::allocator<flatbuffers::Offset<Air::AttributeDescriptor>>>(std::vector<flatbuffers::Offset<Air::AttributeDescriptor>> const&)::t;
  else
    v11 = v10;
  v12 = flatbuffers::FlatBufferBuilder::CreateVector<flatbuffers::String>(a1, (uint64_t)v11, (v15 - v10) >> 2);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_2410405EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<flatbuffers::Offset<Air::BufferLayoutDescriptor>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_241040664(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Air::CloneBufferLayoutDescriptor<Air::BufferLayoutDescriptor>(uint64_t a1, int *a2)
{
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned __int16 *v14;
  uint64_t v15;

  *(_BYTE *)(a1 + 70) = 1;
  v4 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v4 >= 9u && (v5 = v4[4]) != 0)
    v6 = *(_QWORD *)((char *)a2 + v5);
  else
    v6 = 0;
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 32);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 8, v6, 0);
  v10 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v10 >= 7u && (v11 = v10[3]) != 0)
    v12 = *(_QWORD *)((char *)a2 + v11);
  else
    v12 = 1;
  v13 = 1;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 6, v12, 1);
  v14 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v14 >= 5u)
  {
    v15 = v14[2];
    if (v15)
    {
      v13 = *((unsigned __int8 *)a2 + v15);
      if (v13 >= 9)
        abort();
    }
    else
    {
      v13 = 1;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 4, v13, 1);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v9 - (unsigned __int16)v8 + (unsigned __int16)v7);
}

char *flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(char *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v5;
  unsigned int v6;

  v5 = result;
  if (a3 != a4 || result[80])
  {
    v6 = flatbuffers::FlatBufferBuilder::PushElement<unsigned long long>((uint64_t)result, a3);
    return flatbuffers::FlatBufferBuilder::TrackField(v5, a2, v6);
  }
  return result;
}

uint64_t flatbuffers::FlatBufferBuilder::PushElement<unsigned long long>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 8uLL);
  v4 = *(_QWORD *)(a1 + 48);
  if ((unint64_t)(v4 - *(_QWORD *)(a1 + 56)) <= 7)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 8uLL);
    v4 = *(_QWORD *)(a1 + 48);
  }
  *(_QWORD *)(v4 - 8) = a2;
  v5 = v4 - 8;
  *(_QWORD *)(a1 + 48) = v5;
  return (*(_DWORD *)(a1 + 32) - v5 + *(_DWORD *)(a1 + 40));
}

_QWORD *std::vector<flatbuffers::Offset<Air::AttributeDescriptor>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_241040894(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Air::CloneAttributeDescriptor<Air::AttributeDescriptor>(uint64_t a1, int *a2)
{
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 *v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned __int16 *v14;
  uint64_t v15;
  unint64_t v16;

  *(_BYTE *)(a1 + 70) = 1;
  v4 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v4 >= 7u && (v5 = v4[3]) != 0)
    v6 = *(_QWORD *)((char *)a2 + v5);
  else
    v6 = 0;
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 32);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 6, v6, 0);
  v10 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v10 >= 9u && (v11 = v10[4]) != 0)
    v12 = *(int *)((char *)a2 + v11);
  else
    v12 = 0;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a1, 8, v12, 0);
  v13 = 0;
  v14 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v14 >= 5u)
  {
    v15 = v14[2];
    if (v15)
    {
      v16 = *((unsigned __int8 *)a2 + v15);
      if (v16 >= 0x38 || ((0xFFE7FFFFFFFFFFuLL >> v16) & 1) == 0)
        abort();
      v13 = byte_24105AEEE[(char)v16];
    }
    else
    {
      v13 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 4, v13, 0);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v9 - (unsigned __int16)v8 + (unsigned __int16)v7);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Air24PipelineBufferDescriptorEEEZNS3_31CloneFragmentFunctionDescriptorINS3_26FragmentFunctionDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_41FragmentFunctionDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *v11;
  uint64_t v12;
  void *__p;
  _BYTE *v15;

  v6 = a2;
  std::vector<flatbuffers::Offset<Air::PipelineBufferDescriptor>>::vector(&__p, a2);
  if (v6)
  {
    v8 = 0;
    do
    {
      v9 = Air::ClonePipelineBufferDescriptor<Air::PipelineBufferDescriptor>(a4, (int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4)));
      v10 = __p;
      *(_DWORD *)((char *)__p + v8) = v9;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    v10 = __p;
  }
  if (v15 == v10)
    v11 = &flatbuffers::data<flatbuffers::Offset<Air::PipelineBufferDescriptor>,std::allocator<flatbuffers::Offset<Air::PipelineBufferDescriptor>>>(std::vector<flatbuffers::Offset<Air::PipelineBufferDescriptor>> const&)::t;
  else
    v11 = v10;
  v12 = flatbuffers::FlatBufferBuilder::CreateVector<flatbuffers::String>(a1, (uint64_t)v11, (v15 - v10) >> 2);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_241040A98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Air33FragmentColorAttachmentDescriptorEEEZNS3_31CloneFragmentFunctionDescriptorINS3_26FragmentFunctionDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_41FragmentFunctionDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE0_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *v11;
  uint64_t v12;
  void *__p;
  _BYTE *v15;

  v6 = a2;
  std::vector<flatbuffers::Offset<Air::FragmentColorAttachmentDescriptor>>::vector(&__p, a2);
  if (v6)
  {
    v8 = 0;
    do
    {
      v9 = Air::CloneFragmentColorAttachmentDescriptor<Air::FragmentColorAttachmentDescriptor>(a4, (int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4)));
      v10 = __p;
      *(_DWORD *)((char *)__p + v8) = v9;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    v10 = __p;
  }
  if (v15 == v10)
    v11 = &flatbuffers::data<flatbuffers::Offset<Air::FragmentColorAttachmentDescriptor>,std::allocator<flatbuffers::Offset<Air::FragmentColorAttachmentDescriptor>>>(std::vector<flatbuffers::Offset<Air::FragmentColorAttachmentDescriptor>> const&)::t;
  else
    v11 = v10;
  v12 = flatbuffers::FlatBufferBuilder::CreateVector<flatbuffers::String>(a1, (uint64_t)v11, (v15 - v10) >> 2);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_241040B78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Air::ClonePixelFormat<Air::PixelFormat>(uint64_t result)
{
  switch((int)result)
  {
    case 0:
    case 1:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 20:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 53:
    case 54:
    case 55:
    case 60:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 80:
    case 81:
    case 84:
    case 85:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 103:
    case 104:
    case 105:
    case 110:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 123:
    case 124:
    case 125:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 140:
    case 141:
    case 142:
    case 143:
    case 150:
    case 151:
    case 152:
    case 153:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 170:
    case 172:
    case 174:
    case 176:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 200:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 240:
    case 241:
    case 250:
    case 252:
    case 253:
    case 255:
    case 260:
    case 261:
    case 262:
    case 300:
    case 301:
    case 302:
    case 303:
    case 304:
    case 313:
    case 314:
    case 315:
    case 323:
    case 324:
    case 325:
    case 500:
    case 501:
    case 502:
    case 503:
    case 504:
    case 505:
    case 506:
    case 507:
    case 508:
    case 509:
    case 510:
    case 520:
    case 521:
    case 522:
    case 523:
    case 524:
    case 525:
    case 526:
    case 527:
    case 528:
    case 529:
    case 530:
    case 540:
    case 541:
    case 542:
    case 543:
    case 544:
    case 545:
    case 546:
    case 547:
    case 548:
    case 550:
    case 551:
    case 552:
    case 553:
    case 554:
    case 555:
    case 556:
    case 560:
    case 562:
    case 563:
    case 564:
    case 565:
    case 566:
    case 567:
    case 568:
    case 569:
    case 570:
    case 571:
    case 572:
    case 573:
    case 574:
    case 575:
    case 576:
    case 577:
    case 578:
    case 579:
    case 580:
    case 581:
    case 582:
    case 583:
    case 584:
    case 585:
    case 586:
    case 587:
    case 588:
    case 589:
    case 590:
    case 591:
    case 592:
    case 593:
    case 594:
    case 595:
    case 596:
    case 597:
    case 598:
    case 599:
    case 600:
    case 601:
    case 602:
    case 603:
    case 604:
    case 605:
    case 606:
    case 607:
    case 608:
    case 609:
    case 610:
    case 611:
    case 612:
    case 613:
    case 615:
    case 616:
    case 617:
    case 618:
    case 619:
    case 620:
    case 621:
    case 622:
    case 623:
    case 624:
    case 625:
    case 626:
    case 627:
    case 628:
    case 629:
    case 630:
    case 631:
    case 632:
    case 633:
    case 634:
    case 635:
    case 636:
    case 637:
    case 638:
    case 639:
    case 640:
    case 641:
    case 642:
    case 643:
    case 644:
    case 645:
      return result;
    default:
      abort();
  }
}

_QWORD *std::vector<flatbuffers::Offset<Air::FragmentColorAttachmentDescriptor>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_241040C24(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Air::CloneFragmentColorAttachmentDescriptor<Air::FragmentColorAttachmentDescriptor>(uint64_t a1, int *a2)
{
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 v10;
  unsigned __int16 *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned __int16 *v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned __int16 *v21;
  uint64_t v22;
  unsigned int v23;
  unsigned __int16 *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned __int16 *v27;
  uint64_t v28;
  _BOOL4 v29;
  unsigned __int16 *v30;
  uint64_t v31;
  unsigned __int16 *v32;
  uint64_t v33;
  int v34;

  *(_BYTE *)(a1 + 70) = 1;
  v4 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
    v6 = *(unsigned __int16 *)((char *)a2 + v5);
  else
    v6 = 0;
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = Air::ClonePixelFormat<Air::PixelFormat>(v6);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned short>((char *)a1, 4, v10, 0);
  v11 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v11 >= 0x15u && (v12 = v11[10]) != 0)
  {
    v13 = *((unsigned __int8 *)a2 + v12);
    if (v13 >= 0x13)
      goto LABEL_31;
  }
  else
  {
    v13 = 1;
  }
  v14 = 1;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 20, v13, 1);
  v15 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v15 >= 0x13u)
  {
    v16 = v15[9];
    if (v16)
    {
      v14 = *((unsigned __int8 *)a2 + v16);
      if (v14 >= 0x13)
LABEL_31:
        abort();
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 18, v14, 1);
  v17 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v17 >= 0x11u && (v18 = v17[8]) != 0)
  {
    v19 = *((unsigned __int8 *)a2 + v18);
    if (v19 >= 0x13)
      goto LABEL_31;
  }
  else
  {
    v19 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 16, v19, 0);
  v20 = 0;
  v21 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v21 >= 0xFu)
  {
    v22 = v21[7];
    if (v22)
    {
      v20 = *((unsigned __int8 *)a2 + v22);
      if (v20 >= 0x13)
        goto LABEL_31;
    }
    else
    {
      v20 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 14, v20, 0);
  v23 = 0;
  v24 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v24 >= 0xDu)
  {
    v25 = v24[6];
    if (v25)
    {
      v23 = *((unsigned __int8 *)a2 + v25);
      if (v23 >= 5)
        goto LABEL_31;
    }
    else
    {
      v23 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 12, v23, 0);
  v26 = 0;
  v27 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v27 >= 0xBu)
  {
    v28 = v27[5];
    if (v28)
    {
      v26 = *((unsigned __int8 *)a2 + v28);
      if (v26 >= 5)
        goto LABEL_31;
    }
    else
    {
      v26 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 10, v26, 0);
  v29 = 0;
  v30 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v30 >= 9u)
  {
    v31 = v30[4];
    if (v31)
      v29 = *((unsigned __int8 *)a2 + v31) != 0;
    else
      v29 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 8, v29, 0);
  v32 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v32 >= 7u && (v33 = v32[3]) != 0)
    v34 = *((unsigned __int8 *)a2 + v33);
  else
    v34 = 15;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 6, v34, 15);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v9 - (unsigned __int16)v8 + (unsigned __int16)v7);
}

char *flatbuffers::FlatBufferBuilder::AddElement<unsigned short>(char *result, uint64_t a2, int a3, int a4)
{
  char *v5;
  unsigned int v6;

  v5 = result;
  if (a3 != a4 || result[80])
  {
    v6 = flatbuffers::FlatBufferBuilder::PushElement<unsigned short>((uint64_t)result, a3);
    return flatbuffers::FlatBufferBuilder::TrackField(v5, a2, v6);
  }
  return result;
}

uint64_t flatbuffers::FlatBufferBuilder::PushElement<unsigned short>(uint64_t a1, __int16 a2)
{
  uint64_t v4;
  uint64_t v5;

  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 2uLL);
  v4 = *(_QWORD *)(a1 + 48);
  if ((unint64_t)(v4 - *(_QWORD *)(a1 + 56)) <= 1)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 2uLL);
    v4 = *(_QWORD *)(a1 + 48);
  }
  *(_WORD *)(v4 - 2) = a2;
  v5 = v4 - 2;
  *(_QWORD *)(a1 + 48) = v5;
  return (*(_DWORD *)(a1 + 32) - v5 + *(_DWORD *)(a1 + 40));
}

char *flatbuffers::FlatBufferBuilder::AddElement<float>(char *result, uint64_t a2, float a3, float a4)
{
  char *v5;
  unsigned int v6;

  v5 = result;
  if (a3 != a4 || result[80])
  {
    v6 = flatbuffers::FlatBufferBuilder::PushElement<float>((uint64_t)result, a3);
    return flatbuffers::FlatBufferBuilder::TrackField(v5, a2, v6);
  }
  return result;
}

uint64_t flatbuffers::FlatBufferBuilder::PushElement<float>(uint64_t a1, float a2)
{
  uint64_t v4;
  uint64_t v5;

  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 4uLL);
  v4 = *(_QWORD *)(a1 + 48);
  if ((unint64_t)(v4 - *(_QWORD *)(a1 + 56)) <= 3)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 4uLL);
    v4 = *(_QWORD *)(a1 + 48);
  }
  *(float *)(v4 - 4) = a2;
  v5 = v4 - 4;
  *(_QWORD *)(a1 + 48) = v5;
  return (*(_DWORD *)(a1 + 32) - v5 + *(_DWORD *)(a1 + 40));
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Air24PipelineBufferDescriptorEEEZNS3_30CloneComputeFunctionDescriptorINS3_25ComputeFunctionDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_40ComputeFunctionDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *v11;
  uint64_t v12;
  void *__p;
  _BYTE *v15;

  v6 = a2;
  std::vector<flatbuffers::Offset<Air::PipelineBufferDescriptor>>::vector(&__p, a2);
  if (v6)
  {
    v8 = 0;
    do
    {
      v9 = Air::ClonePipelineBufferDescriptor<Air::PipelineBufferDescriptor>(a4, (int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4)));
      v10 = __p;
      *(_DWORD *)((char *)__p + v8) = v9;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    v10 = __p;
  }
  if (v15 == v10)
    v11 = &flatbuffers::data<flatbuffers::Offset<Air::PipelineBufferDescriptor>,std::allocator<flatbuffers::Offset<Air::PipelineBufferDescriptor>>>(std::vector<flatbuffers::Offset<Air::PipelineBufferDescriptor>> const&)::t;
  else
    v11 = v10;
  v12 = flatbuffers::FlatBufferBuilder::CreateVector<flatbuffers::String>(a1, (uint64_t)v11, (v15 - v10) >> 2);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_241041104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Air::CloneStageInputOutputDescriptor<Air::StageInputOutputDescriptor>(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned __int16 *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int *v20;

  v4 = *a2;
  v5 = -v4;
  v6 = (unsigned __int16 *)((char *)a2 - v4);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v20 = (unsigned int *)((char *)a2 + v7 + *(unsigned int *)((char *)a2 + v7));
    v8 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Air22BufferLayoutDescriptorEEEZNS3_31CloneStageInputOutputDescriptorINS3_26StageInputOutputDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_41StageInputOutputDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *v20, &v20, a1);
    v5 = -(uint64_t)*a2;
  }
  else
  {
    v8 = 0;
  }
  if (*(unsigned __int16 *)((char *)a2 + v5) >= 5u && *(_WORD *)((char *)a2 + v5 + 4))
  {
    v20 = (unsigned int *)((char *)a2
                         + *(unsigned __int16 *)((char *)a2 + v5 + 4)
                         + *(unsigned int *)((char *)a2 + *(unsigned __int16 *)((char *)a2 + v5 + 4)));
    v9 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Air19AttributeDescriptorEEEZNS3_31CloneStageInputOutputDescriptorINS3_26StageInputOutputDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_41StageInputOutputDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE0_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *v20, &v20, a1);
    v5 = -(uint64_t)*a2;
  }
  else
  {
    v9 = 0;
  }
  *(_BYTE *)(a1 + 70) = 1;
  v10 = (unsigned __int16 *)((char *)a2 + v5);
  if (*v10 >= 9u && (v11 = v10[4]) != 0)
    v12 = *(int *)((char *)a2 + v11);
  else
    v12 = 0;
  v13 = *(_QWORD *)(a1 + 40);
  v14 = *(_QWORD *)(a1 + 48);
  v15 = *(_QWORD *)(a1 + 32);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a1, 8, v12, 0);
  if (v8)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, v8);
  if (v9)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 4, v9);
  v16 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v16 >= 0xBu && (v17 = v16[5]) != 0)
  {
    v18 = *((unsigned __int8 *)a2 + v17);
    if (v18 >= 2)
      abort();
  }
  else
  {
    v18 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 10, v18, 0);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v15 - (unsigned __int16)v14 + (unsigned __int16)v13);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Air22BufferLayoutDescriptorEEEZNS3_31CloneStageInputOutputDescriptorINS3_26StageInputOutputDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_41StageInputOutputDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *v11;
  uint64_t v12;
  void *__p;
  _BYTE *v15;

  v6 = a2;
  std::vector<flatbuffers::Offset<Air::BufferLayoutDescriptor>>::vector(&__p, a2);
  if (v6)
  {
    v8 = 0;
    do
    {
      v9 = Air::CloneBufferLayoutDescriptor<Air::BufferLayoutDescriptor>(a4, (int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4)));
      v10 = __p;
      *(_DWORD *)((char *)__p + v8) = v9;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    v10 = __p;
  }
  if (v15 == v10)
    v11 = &flatbuffers::data<flatbuffers::Offset<Air::BufferLayoutDescriptor>,std::allocator<flatbuffers::Offset<Air::BufferLayoutDescriptor>>>(std::vector<flatbuffers::Offset<Air::BufferLayoutDescriptor>> const&)::t;
  else
    v11 = v10;
  v12 = flatbuffers::FlatBufferBuilder::CreateVector<flatbuffers::String>(a1, (uint64_t)v11, (v15 - v10) >> 2);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_241041394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Air19AttributeDescriptorEEEZNS3_31CloneStageInputOutputDescriptorINS3_26StageInputOutputDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_41StageInputOutputDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE0_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *v11;
  uint64_t v12;
  void *__p;
  _BYTE *v15;

  v6 = a2;
  std::vector<flatbuffers::Offset<Air::AttributeDescriptor>>::vector(&__p, a2);
  if (v6)
  {
    v8 = 0;
    do
    {
      v9 = Air::CloneAttributeDescriptor<Air::AttributeDescriptor>(a4, (int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4)));
      v10 = __p;
      *(_DWORD *)((char *)__p + v8) = v9;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    v10 = __p;
  }
  if (v15 == v10)
    v11 = &flatbuffers::data<flatbuffers::Offset<Air::AttributeDescriptor>,std::allocator<flatbuffers::Offset<Air::AttributeDescriptor>>>(std::vector<flatbuffers::Offset<Air::AttributeDescriptor>> const&)::t;
  else
    v11 = v10;
  v12 = flatbuffers::FlatBufferBuilder::CreateVector<flatbuffers::String>(a1, (uint64_t)v11, (v15 - v10) >> 2);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_241041474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Air24PipelineBufferDescriptorEEEZNS3_27CloneTileFunctionDescriptorINS3_22TileFunctionDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_37TileFunctionDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *v11;
  uint64_t v12;
  void *__p;
  _BYTE *v15;

  v6 = a2;
  std::vector<flatbuffers::Offset<Air::PipelineBufferDescriptor>>::vector(&__p, a2);
  if (v6)
  {
    v8 = 0;
    do
    {
      v9 = Air::ClonePipelineBufferDescriptor<Air::PipelineBufferDescriptor>(a4, (int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4)));
      v10 = __p;
      *(_DWORD *)((char *)__p + v8) = v9;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    v10 = __p;
  }
  if (v15 == v10)
    v11 = &flatbuffers::data<flatbuffers::Offset<Air::PipelineBufferDescriptor>,std::allocator<flatbuffers::Offset<Air::PipelineBufferDescriptor>>>(std::vector<flatbuffers::Offset<Air::PipelineBufferDescriptor>> const&)::t;
  else
    v11 = v10;
  v12 = flatbuffers::FlatBufferBuilder::CreateVector<flatbuffers::String>(a1, (uint64_t)v11, (v15 - v10) >> 2);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_241041554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Air29TileColorAttachmentDescriptorEEEZNS3_27CloneTileFunctionDescriptorINS3_22TileFunctionDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_37TileFunctionDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE0_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *v11;
  uint64_t v12;
  void *__p;
  _BYTE *v15;

  v6 = a2;
  std::vector<flatbuffers::Offset<Air::TileColorAttachmentDescriptor>>::vector(&__p, a2);
  if (v6)
  {
    v8 = 0;
    do
    {
      v9 = Air::CloneTileColorAttachmentDescriptor<Air::TileColorAttachmentDescriptor>(a4, (int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4)));
      v10 = __p;
      *(_DWORD *)((char *)__p + v8) = v9;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    v10 = __p;
  }
  if (v15 == v10)
    v11 = &flatbuffers::data<flatbuffers::Offset<Air::TileColorAttachmentDescriptor>,std::allocator<flatbuffers::Offset<Air::TileColorAttachmentDescriptor>>>(std::vector<flatbuffers::Offset<Air::TileColorAttachmentDescriptor>> const&)::t;
  else
    v11 = v10;
  v12 = flatbuffers::FlatBufferBuilder::CreateVector<flatbuffers::String>(a1, (uint64_t)v11, (v15 - v10) >> 2);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_241041634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<flatbuffers::Offset<Air::TileColorAttachmentDescriptor>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_2410416AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Air::CloneTileColorAttachmentDescriptor<Air::TileColorAttachmentDescriptor>(uint64_t a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  unsigned __int16 v10;

  *(_BYTE *)(a1 + 70) = 1;
  v4 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v6 >= 5u && (v7 = v6[2]) != 0)
    v8 = *(unsigned __int16 *)((char *)a2 + v7);
  else
    v8 = 0;
  v9 = v5 - v3 + v4;
  v10 = Air::ClonePixelFormat<Air::PixelFormat>(v8);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned short>((char *)a1, 4, v10, 0);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, v9);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Air24PipelineBufferDescriptorEEEZNS3_29CloneObjectFunctionDescriptorINS3_24ObjectFunctionDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_39ObjectFunctionDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *v11;
  uint64_t v12;
  void *__p;
  _BYTE *v15;

  v6 = a2;
  std::vector<flatbuffers::Offset<Air::PipelineBufferDescriptor>>::vector(&__p, a2);
  if (v6)
  {
    v8 = 0;
    do
    {
      v9 = Air::ClonePipelineBufferDescriptor<Air::PipelineBufferDescriptor>(a4, (int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4)));
      v10 = __p;
      *(_DWORD *)((char *)__p + v8) = v9;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    v10 = __p;
  }
  if (v15 == v10)
    v11 = &flatbuffers::data<flatbuffers::Offset<Air::PipelineBufferDescriptor>,std::allocator<flatbuffers::Offset<Air::PipelineBufferDescriptor>>>(std::vector<flatbuffers::Offset<Air::PipelineBufferDescriptor>> const&)::t;
  else
    v11 = v10;
  v12 = flatbuffers::FlatBufferBuilder::CreateVector<flatbuffers::String>(a1, (uint64_t)v11, (v15 - v10) >> 2);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_241041804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Air24PipelineBufferDescriptorEEEZNS3_27CloneMeshFunctionDescriptorINS3_22MeshFunctionDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_37MeshFunctionDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *v11;
  uint64_t v12;
  void *__p;
  _BYTE *v15;

  v6 = a2;
  std::vector<flatbuffers::Offset<Air::PipelineBufferDescriptor>>::vector(&__p, a2);
  if (v6)
  {
    v8 = 0;
    do
    {
      v9 = Air::ClonePipelineBufferDescriptor<Air::PipelineBufferDescriptor>(a4, (int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4)));
      v10 = __p;
      *(_DWORD *)((char *)__p + v8) = v9;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    v10 = __p;
  }
  if (v15 == v10)
    v11 = &flatbuffers::data<flatbuffers::Offset<Air::PipelineBufferDescriptor>,std::allocator<flatbuffers::Offset<Air::PipelineBufferDescriptor>>>(std::vector<flatbuffers::Offset<Air::PipelineBufferDescriptor>> const&)::t;
  else
    v11 = v10;
  v12 = flatbuffers::FlatBufferBuilder::CreateVector<flatbuffers::String>(a1, (uint64_t)v11, (v15 - v10) >> 2);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_2410418E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>>>::__emplace_unique_key_args<CompilerOutputType,CompilerOutputType,CompilerOutputBlock>(uint64_t a1, char *a2, unsigned __int8 *a3, _OWORD *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  unsigned __int8 *v12;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v9 <= v8)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = (unsigned __int8 *)*v11;
      if (*v11)
      {
        do
        {
          v13 = *((_QWORD *)v12 + 1);
          if (v13 == v8)
          {
            if (v12[16] == v8)
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4)
              break;
          }
          v12 = *(unsigned __int8 **)v12;
        }
        while (v12);
      }
    }
  }
  v12 = (unsigned __int8 *)operator new(0x28uLL);
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = v8;
  v12[16] = *a3;
  *(_OWORD *)(v12 + 24) = *a4;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>>>::__rehash<true>(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v12 = *v21;
LABEL_38:
    *v21 = v12;
    goto LABEL_39;
  }
  *(_QWORD *)v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v20 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v12)
  {
    v22 = *(_QWORD *)(*(_QWORD *)v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_241041B1C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t OUTLINED_FUNCTION_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 8) = a2;
  return a1 + 136;
}

void OUTLINED_FUNCTION_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x20u);
}

void OUTLINED_FUNCTION_4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void OUTLINED_FUNCTION_8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_10(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x16u);
}

void __cxx_global_array_dtor()
{
  uint64_t i;

  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(MTLCompilerPluginInterface::init(char const*,void const*,unsigned long)::validPathPrefixes[i + 5]) < 0)
      operator delete((void *)MTLCompilerPluginInterface::init(char const*,void const*,unsigned long)::validPathPrefixes[i + 3]);
  }
}

void __cxx_global_array_dtor_146()
{
  uint64_t i;

  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(MTLCompilerPluginInterface::init(char const*,void const*,unsigned long)::validPluginSuffixes[i + 5]) < 0)
      operator delete((void *)MTLCompilerPluginInterface::init(char const*,void const*,unsigned long)::validPluginSuffixes[i + 3]);
  }
}

uint64_t split_stack_call_impl(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  return a3(a4);
}

void split_stack_call(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v8 = (_QWORD *)operator new();
  *v8 = a1;
  v8[1] = a2;
  v9 = split_stack_list();
  *(_QWORD *)(v10 + 16) = *(_QWORD *)v9;
  *(_QWORD *)v9 = v10;
  os_unfair_lock_lock((os_unfair_lock_t)&split_stack_call::backtrace_pcs_mutex);
  if (!split_stack_call::num_total_stack_split_uses++)
    backtrace_set_pcs_func();
  os_unfair_lock_unlock((os_unfair_lock_t)&split_stack_call::backtrace_pcs_mutex);
  split_stack_call_impl(a1, a2, a3, a4);
  os_unfair_lock_lock((os_unfair_lock_t)&split_stack_call::backtrace_pcs_mutex);
  if (!--split_stack_call::num_total_stack_split_uses)
    backtrace_set_pcs_func();
  os_unfair_lock_unlock((os_unfair_lock_t)&split_stack_call::backtrace_pcs_mutex);
  *(_QWORD *)v9 = *(_QWORD *)(*(_QWORD *)v9 + 16);
  JUMPOUT(0x24268D8F0);
}

void sub_241041DDC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock((os_unfair_lock_t)&split_stack_call::backtrace_pcs_mutex);
  _Unwind_Resume(a1);
}

unint64_t split_stack_pcs(unint64_t *a1, uint64_t a2, unsigned int *a3, int a4, unint64_t a5)
{
  _opaque_pthread_t *v9;
  char *stackaddr_np;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t result;
  unint64_t v15;
  unint64_t v16;
  uintptr_t v17;
  uintptr_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uintptr_t v30;
  uint64_t v31;
  _QWORD *v33;
  uintptr_t return_addr;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t vars0;

  v9 = pthread_self();
  stackaddr_np = (char *)pthread_get_stackaddr_np(v9);
  if (&stackaddr_np[-pthread_get_stacksize_np(v9)] > (char *)&vars0 || &vars0 > (uint64_t *)stackaddr_np)
    v12 = *(_QWORD **)split_stack_list();
  else
    v12 = 0;
  v37 = 0;
  v38 = 0;
  decode_stack_bounds(v12, &v38, &v37);
  if (v12)
    v13 = (_QWORD *)v12[2];
  else
    v13 = 0;
  v35 = 0;
  v36 = 0;
  v33 = v13;
  decode_stack_bounds(v13, &v36, &v35);
  *a3 = 0;
  result = pthread_stack_frame_decode_np((uintptr_t)&vars0, 0);
  v15 = v38;
  if (v38 > (unint64_t)&vars0)
    return result;
  if ((&vars0 & 1) != 0)
    return result;
  v16 = v37;
  if (v37 < (unint64_t)&vars0)
    return result;
  v17 = result;
  if (result < v38 || result > v37 || (result & 1) != 0 || result <= (unint64_t)&vars0)
    return result;
  v18 = (uintptr_t)&vars0;
  v19 = a4 + 1;
  while (1)
  {
    v20 = v17;
    if (a5)
      break;
    if (!v19)
      goto LABEL_41;
    --v19;
LABEL_25:
    result = pthread_stack_frame_decode_np(v17, 0);
    v17 = result;
    if ((result < v15 || result > v16) && (result & 1) == 0)
    {
      v21 = v36;
      if (result >= v36)
      {
        v22 = a2;
        v23 = a3;
        v24 = v35;
        if (result <= v35)
        {
          v25 = v33;
          if (v33)
            v25 = (_QWORD *)v33[2];
          v33 = v25;
          result = (unint64_t)decode_stack_bounds(v25, &v36, &v35);
          v16 = v24;
          v15 = v21;
        }
        a3 = v23;
        a2 = v22;
      }
    }
    if (v17 >= v15 && (v17 & 1) == 0 && v17 <= v16)
    {
      v18 = v20;
      if (v17 > v20)
        continue;
      v18 = v20;
      if (v20 > v16)
        continue;
      v18 = v20;
      if (v20 < v15)
        continue;
    }
    return result;
  }
  if (v15 > a5 || v16 < a5 || v17 <= a5)
    goto LABEL_25;
LABEL_41:
  while ((_DWORD)a2)
  {
    v26 = v18;
    return_addr = 0;
    result = pthread_stack_frame_decode_np(v18, &return_addr);
    v18 = result;
    if ((result < v15 || result > v16) && (result & 1) == 0)
    {
      v27 = v36;
      if (result >= v36)
      {
        v28 = v35;
        if (result <= v35)
        {
          v29 = v33;
          if (v33)
            v29 = (_QWORD *)v33[2];
          v33 = v29;
          result = (unint64_t)decode_stack_bounds(v29, &v36, &v35);
          v16 = v28;
          v15 = v27;
        }
      }
    }
    v30 = return_addr;
    v31 = *a3;
    *a3 = v31 + 1;
    a1[v31] = v30;
    if (v18 < v15 || (v18 & 1) != 0 || v18 > v16 || v18 <= v26 && v26 <= v16 && v26 >= v15)
      break;
    LODWORD(a2) = a2 - 1;
  }
  return result;
}

_QWORD *decode_stack_bounds(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  _opaque_pthread_t *v6;
  _BYTE *stackaddr_np;

  if (result)
  {
    v5 = *result;
    *a2 = *result;
    *a3 = result[1] + v5;
  }
  else
  {
    v6 = pthread_self();
    stackaddr_np = pthread_get_stackaddr_np(v6);
    *a3 = stackaddr_np;
    result = (_QWORD *)pthread_get_stacksize_np(v6);
    *a2 = stackaddr_np - (_BYTE *)result;
  }
  return result;
}

_QWORD *createMTLArgumentRewritePass(MTLBoundsCheck::SharedPassData *a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  MetalModulePass::MetalModulePass((uint64_t)v2, (uint64_t)&MTLArgumentRewritePass::ID, (uint64_t)a1);
  *v2 = &off_25111F798;
  return v2;
}

void sub_241042178(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x24268D8F0](v1, 0x10E1C40908DD517);
  _Unwind_Resume(a1);
}

_QWORD *createMTLGlobalTLSArgumentPass(MTLBoundsCheck::SharedPassData *a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  MetalModulePass::MetalModulePass((uint64_t)v2, (uint64_t)&MTLGlobalTLSArgumentPass::ID, (uint64_t)a1);
  *v2 = &off_25111F838;
  return v2;
}

void sub_2410421F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x24268D8F0](v1, 0x10E1C40C8265ECALL);
  _Unwind_Resume(a1);
}

void MTLArgumentRewritePass::~MTLArgumentRewritePass(MTLArgumentRewritePass *this)
{
  char *v2;

  *(_QWORD *)this = &off_25111E050;
  v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
}

{
  char *v2;

  *(_QWORD *)this = &off_25111E050;
  v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x24268D8F0);
}

BOOL MTLArgumentRewritePass::runOnModule(MTLArgumentRewritePass *this, llvm::Module *a2)
{
  llvm::Module *v4;
  _BOOL4 isLibraryModule;
  char *v6;
  uint64_t i;
  llvm::GlobalValue *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  _BOOL4 v15;
  int v16;
  uint64_t EntryFunction;

  MetalModulePass::runOnModule(this, a2);
  isLibraryModule = MTLBoundsCheck::isLibraryModule(a2, v4);
  if (!isLibraryModule)
  {
    v6 = (char *)a2 + 24;
    for (i = *((_QWORD *)a2 + 4); (char *)i != v6; i = *(_QWORD *)(i + 8))
    {
      if (i)
        v8 = (llvm::GlobalValue *)(i - 56);
      else
        v8 = 0;
      if ((llvm::GlobalValue::isDeclaration(v8) & 1) == 0)
      {
        v9 = *((_QWORD *)v8 + 3);
        if (8 * *(unsigned int *)(v9 + 12) != 8)
        {
          v10 = *(_QWORD *)(v9 + 16) + 8;
          v11 = 8 * ((8 * *(unsigned int *)(v9 + 12) - 8) >> 3);
          while (1)
          {
            v12 = *(_QWORD *)v10;
            v13 = *(_DWORD *)(*(_QWORD *)v10 + 8);
            if (v13 == 15)
            {
              v14 = v13 & 0xFE;
              if ((*(_BYTE *)(*((_QWORD *)this + 4) + 23) & 1) != 0)
              {
                v16 = *(_DWORD *)(*(_QWORD *)v10 + 8);
                if (v14 == 18)
                  v16 = *(_DWORD *)(**(_QWORD **)(v12 + 16) + 8);
                v15 = (v16 & 0xFFFFFF00) == 768;
              }
              else
              {
                v15 = 0;
              }
              if (v14 == 18)
                v13 = *(_DWORD *)(**(_QWORD **)(v12 + 16) + 8);
              if (((v15 | MTLBoundsCheck::checkAddressSpace((MTLBoundsCheck *)(v13 >> 8))) & 1) != 0)
                break;
            }
            v10 += 8;
            v11 -= 8;
            if (!v11)
              goto LABEL_26;
          }
          if ((*(_BYTE *)(*((_QWORD *)this + 4) + 20) & 2) != 0)
          {
            if (llvm::Function::hasFnAttribute())
              llvm::Function::removeFnAttr();
            if (llvm::Function::hasFnAttribute())
              llvm::Function::removeFnAttr();
          }
        }
      }
LABEL_26:
      ;
    }
    MTLArgumentRewritePass::stripDeadArguments(this);
    EntryFunction = MetalModulePass::getEntryFunction(this);
    MTLArgumentRewritePass::instrumentMainFunction((uint64_t)this, EntryFunction, *((_QWORD *)this + 16));
  }
  return !isLibraryModule;
}

void MTLArgumentRewritePass::stripDeadArguments(MTLArgumentRewritePass *this)
{
  uint64_t EntryFunction;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  _QWORD *String;
  uint64_t v9;
  uint64_t v10;
  int hasNUsesOrMore;
  _BOOL4 v13;
  llvm::MDString *v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  llvm::BasicBlock *v22;
  llvm::BasicBlock *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const llvm::AttributeList *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  llvm::LLVMContext *v35;
  llvm::Instruction *v36;
  uint64_t v37;
  const llvm::AttributeList *v38;
  uint64_t v39;
  const llvm::AttributeList *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  llvm::BasicBlock *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49[4];
  __int16 v50;
  void *Impl;
  uint64_t v52;
  _BYTE v53[64];
  void *v54;
  _BYTE v55[16];
  __int16 v56;
  llvm::ReturnInst *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  _BYTE v62[32];
  unsigned int *v63;
  uint64_t v64;
  _BYTE v65[16];
  _BYTE *v66;
  uint64_t v67;
  _BYTE v68[32];
  void *v69[2];
  _QWORD v70[6];

  v70[4] = *MEMORY[0x24BDAC8D0];
  v46 = *((_QWORD *)this + 5);
  v47 = v49;
  v48 = 0;
  EntryFunction = MetalModulePass::getEntryFunction(this);
  v3 = *(_QWORD *)(EntryFunction + 24);
  v45 = *(_QWORD *)(EntryFunction + 112);
  v69[0] = v70;
  v69[1] = (void *)0x400000000;
  v66 = v68;
  v67 = 0x400000000;
  v63 = (unsigned int *)v65;
  v64 = 0x400000000;
  v60 = v62;
  v61 = 0x400000000;
  LODWORD(v44) = 0;
  if (*(_DWORD *)(v3 + 12) != 1)
  {
    v4 = 0;
    do
    {
      Impl = 0;
      v5 = *(_QWORD *)(*((_QWORD *)this + 16) - 8 * *(unsigned int *)(*((_QWORD *)this + 16) + 8) + 16);
      v6 = *(unsigned int **)(v5 - 8 * *(unsigned int *)(v5 + 8) + 8 * v4);
      Impl = v6;
      v49[0] = 0;
      v49[0] = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * (v4 + 1));
      if ((*(_BYTE *)(EntryFunction + 18) & 1) != 0)
      {
        llvm::Function::BuildLazyArguments((llvm::Function *)EntryFunction);
        v4 = v44;
        v6 = (unsigned int *)Impl;
      }
      v7 = *(_QWORD *)(EntryFunction + 88);
      String = (_QWORD *)llvm::MDString::getString(*(llvm::MDString **)&v6[-2 * v6[2] + 2]);
      v10 = v9;
      hasNUsesOrMore = llvm::Value::hasNUsesOrMore((llvm::Value *)(v7 + 40 * v4));
      v13 = v10 != 14 || *String != 0x67616D692E726961 || *(_QWORD *)((char *)String + 6) != 0x6B636F6C62656761;
      if ((v13 & (hasNUsesOrMore ^ 1) & 1) == 0)
      {
        MTLMDBuilder::getMetadata<unsigned int>();
        llvm::MDNode::replaceOperandWith();
        v14 = (llvm::MDString *)*((_QWORD *)Impl + *((_DWORD *)Impl + 2) - 1 - *((unsigned int *)Impl + 2));
        if (!*(_BYTE *)v14)
        {
          v15 = (_QWORD *)llvm::MDString::getString(v14);
          if (v16 == 14 && *v15 == 0x5F6772612E726961 && *(_QWORD *)((char *)v15 + 6) == 0x646573756E755F67)
          {
            llvm::SmallVector<llvm::Metadata *,8u>::SmallVector<llvm::MDOperand const*,void>(&v54, (char *)Impl - 8 * *((unsigned int *)Impl + 2), (char *)Impl - 8);
            Impl = (void *)llvm::MDTuple::getImpl();
            if (v54 != v55)
              free(v54);
          }
        }
        llvm::SmallVectorImpl<unsigned int>::emplace_back<unsigned int &>((uint64_t)&v63, (int *)&v44);
        llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)v69, (uint64_t *)&Impl);
        llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)&v66, v49);
      }
      v4 = (_DWORD)v44 + 1;
      LODWORD(v44) = v4;
      v18 = *(_DWORD *)(v3 + 12) - 1;
    }
    while (v4 < v18);
    if ((_DWORD)v67 != v18)
    {
      v19 = llvm::FunctionType::get();
      v20 = *(_DWORD *)(EntryFunction + 32) & 0xF;
      v56 = 257;
      v21 = llvm::Function::Create(v19, v20, (uint64_t)&v54, *((_QWORD *)this + 6));
      v44 = 0;
      v22 = (llvm::BasicBlock *)*((_QWORD *)this + 5);
      v56 = 257;
      v44 = (llvm::BasicBlock *)llvm::BasicBlock::Create(v22, (llvm::LLVMContext *)&v54, (const llvm::Twine *)v21, 0, v23);
      MTLIRBuilder::MTLIRBuilder<llvm::BasicBlock *&>((uint64_t)&v54, &v44);
      Impl = v53;
      v52 = 0x800000000;
      v24 = *(_DWORD *)(v3 + 12);
      v25 = v24 - 1;
      if (v24 - 1 >= 9)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v24 = *(_DWORD *)(v3 + 12);
      }
      v26 = 8 * v24 - 8;
      if (v26)
      {
        v27 = *(_QWORD *)(v3 + 16) + 8;
        v28 = 8 * (v26 >> 3);
        do
        {
          v49[0] = llvm::UndefValue::get();
          llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)&Impl, v49);
          v27 += 8;
          v28 -= 8;
        }
        while (v28);
      }
      if ((_DWORD)v64)
      {
        v29 = 0;
        do
        {
          if ((*(_WORD *)(v21 + 18) & 1) != 0)
            llvm::Function::BuildLazyArguments((llvm::Function *)v21);
          v30 = *(_QWORD *)(v21 + 88);
          v31 = (const llvm::AttributeList *)v63[v29];
          v49[0] = llvm::compat::getParamAttrs((llvm::compat *)&v45, v31, v25);
          v32 = llvm::AttributeSet::begin((llvm::AttributeSet *)v49);
          v33 = llvm::AttributeSet::end((llvm::AttributeSet *)v49);
          while (v32 != v33)
          {
            llvm::Function::addParamAttr();
            v32 += 8;
          }
          *((_QWORD *)Impl + (_QWORD)v31) = v30 + 40 * v29;
          v29 = (v29 + 1);
        }
        while (v64 > v29);
      }
      if (EntryFunction)
        v34 = *(_QWORD *)(EntryFunction + 24);
      else
        v34 = 0;
      v50 = 257;
      v35 = (llvm::LLVMContext *)llvm::IRBuilderBase::CreateCall((uint64_t)&v54, v34, EntryFunction, (uint64_t)Impl, v52, (uint64_t)v49, 0);
      if (*(_BYTE *)(**(_QWORD **)(v3 + 16) + 8) == 7)
        v37 = llvm::ReturnInst::Create(v57, 0, 0, v36);
      else
        v37 = llvm::ReturnInst::Create(v57, v35, 0, v36);
      v50 = 257;
      llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)&v54, v37, (uint64_t)v49);
      if (Impl != v53)
        free(Impl);
      *(_DWORD *)(EntryFunction + 32) = *(_DWORD *)(EntryFunction + 32) & 0xFFFFBFC0 | 0x4007;
      llvm::Function::addFnAttr();
      llvm::Value::takeName();
      Impl = (void *)llvm::compat::getFnAttrs((llvm::compat *)&v45, v38);
      v39 = llvm::AttributeSet::begin((llvm::AttributeSet *)&Impl);
      v41 = llvm::AttributeSet::end((llvm::AttributeSet *)&Impl);
      while (v39 != v41)
      {
        llvm::Function::addFnAttr();
        v39 += 8;
      }
      Impl = (void *)llvm::compat::getRetAttrs((llvm::compat *)&v45, v40);
      v42 = (_QWORD *)llvm::AttributeSet::begin((llvm::AttributeSet *)&Impl);
      v43 = llvm::AttributeSet::end((llvm::AttributeSet *)&Impl);
      while (v42 != (_QWORD *)v43)
        llvm::compat::addAttribute(v21, 0, *v42++);
      llvm::MDTuple::getImpl();
      llvm::MDNode::replaceOperandWith();
      MetalModulePass::getMetadata((MetalModulePass *)&v46, (llvm::Value *)v21);
      llvm::MDNode::replaceOperandWith();
      llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)&v59);
      llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v58);
      if (v54 != v55)
        free(v54);
    }
  }
  if (v60 != v62)
    free(v60);
  if (v63 != (unsigned int *)v65)
    free(v63);
  if (v66 != v68)
    free(v66);
  if (v69[0] != v70)
    free(v69[0]);
  if (v47 != v49)
    free(v47);
}

void sub_241042AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59)
{
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  void *v66;
  void *v67;
  void *v68;

  if (a26 != v59)
    free(a26);
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder(&a36);
  if (a59 != a15)
    free(a59);
  v66 = *(void **)(v64 - 224);
  if (v66 != v63)
    free(v66);
  v67 = *(void **)(v64 - 192);
  if (v67 != v62)
    free(v67);
  v68 = *(void **)(v64 - 144);
  if (v68 != v61)
    free(v68);
  if (a19 != v60)
    free(a19);
  _Unwind_Resume(a1);
}

void MTLArgumentRewritePass::instrumentMainFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v5;
  uint64_t v6;
  llvm::BasicBlock *v7;
  uint64_t FirstNonPHIOrDbg;
  int i;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  llvm::Instruction *FirstNonPHI;
  uint64_t hasNUsesOrMore;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  llvm::MDString *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *String;
  uint64_t v26;
  uint64_t v27;
  llvm::Value *v28;
  int LocationIndex;
  llvm::Value *v31;
  uint64_t v32;
  llvm::Value *Cast;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  char v41;
  char v42;
  llvm::raw_ostream *v44;
  unsigned int v45;
  __int128 v46;
  char v47;
  __int16 v48;
  char v49;
  __int16 v50;
  llvm::Value *v51;
  int ParamDereferenceableBytes;
  int v53;
  char v54;
  __int16 v55;
  char v56;
  llvm::BasicBlock *v57;
  __n128 v58;
  char v59;
  __int128 v60;
  void *v61[2];
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  unsigned int v67;
  _QWORD v68[10];

  v68[8] = *MEMORY[0x24BDAC8D0];
  v5 = *(unsigned int **)(a3 - 8 * *(unsigned int *)(a3 + 8) + 16);
  v61[0] = &v5[-2 * v5[2]];
  v61[1] = v5;
  llvm::SmallVector<llvm::Metadata *,8u>::SmallVector<llvm::MDOperand const*>(&v66, (char **)v61);
  v57 = 0;
  v6 = *(_QWORD *)(a2 + 80);
  if (v6)
    v7 = (llvm::BasicBlock *)(v6 - 24);
  else
    v7 = 0;
  FirstNonPHIOrDbg = llvm::BasicBlock::getFirstNonPHIOrDbg(v7);
  for (i = *(unsigned __int8 *)(FirstNonPHIOrDbg + 16); i == 59; i = *(unsigned __int8 *)(v13 + 16))
  {
    v10 = *(_QWORD *)(FirstNonPHIOrDbg + 32);
    v11 = *(_QWORD *)(FirstNonPHIOrDbg + 40) + 40;
    FirstNonPHIOrDbg = v10 - 24;
    if (v10)
      v12 = v10 == v11;
    else
      v12 = 1;
    if (v12)
      v13 = 0;
    else
      v13 = v10 - 24;
  }
  v63 = 257;
  llvm::SplitBlock();
  v57 = v7;
  v61[0] = "instrumentBlock";
  v63 = 259;
  llvm::Value::setName();
  MTLIRBuilder::MTLIRBuilder<llvm::BasicBlock *&>((uint64_t)v61, &v57);
  FirstNonPHI = (llvm::Instruction *)llvm::BasicBlock::getFirstNonPHI(v57);
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)v61, FirstNonPHI);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 4) == 1 && v67)
  {
    v45 = 0;
    v16 = v66;
    v17 = 8 * v67;
    while (1)
    {
      v18 = *v16;
      v19 = (_QWORD *)(*v16 - 8 * *(unsigned int *)(*v16 + 8));
      v20 = *(_QWORD *)(*v19 + 128);
      v21 = (_QWORD *)(v20 + 24);
      if (*(_DWORD *)(v20 + 32) >= 0x41u)
        v21 = (_QWORD *)*v21;
      v22 = (llvm::MDString *)v19[1];
      v23 = (_QWORD *)*v21;
      if ((*(_WORD *)(a2 + 18) & 1) != 0)
        llvm::Function::BuildLazyArguments((llvm::Function *)a2);
      v24 = *(_QWORD *)(a2 + 88);
      String = (_QWORD *)llvm::MDString::getString(v22);
      v27 = v26;
      v28 = (llvm::Value *)(v24 + 40 * (_QWORD)v23);
      hasNUsesOrMore = llvm::Value::hasNUsesOrMore(v28);
      if ((hasNUsesOrMore & 1) == 0)
        goto LABEL_57;
      switch(v27)
      {
        case 19:
          hasNUsesOrMore = memcmp(String, "air.indirect_buffer", 0x13uLL);
          if ((_DWORD)hasNUsesOrMore)
            goto LABEL_55;
          v39 = *(_QWORD *)v28;
          if (*(_BYTE *)(*(_QWORD *)v28 + 8) == 15)
          {
            v51 = 0;
            ParamDereferenceableBytes = 0;
            LOBYTE(v53) = 0;
            v54 = 0;
            v55 = 256;
            v56 = 1;
            MetalModulePass::cacheStaticBoundsInfo(a1, (uint64_t)v28, (uint64_t)&v51);
            v40 = MTLArgumentRewritePass::computeArgumentCount((MTLArgumentRewritePass *)a1, **(llvm::Type ***)(v39 + 16));
            hasNUsesOrMore = MTLBoundsCheck::getLocationIndex(v18);
            if ((*(_BYTE *)(*(_QWORD *)(a1 + 32) + 22) & 0x80) == 0)
            {
              v41 = hasNUsesOrMore;
              v58.n128_u64[0] = (unint64_t)"air.read_write";
              v58.n128_u64[1] = 14;
              v59 = 1;
              MTLBoundsCheck::getArgAccessType(v18, &v58, (uint64_t)&v46);
              v60 = v46;
              v42 = 2 * v41;
              if (llvm::StringRef::find() != -1)
                *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 64) + 640) |= 1 << v42;
              hasNUsesOrMore = llvm::StringRef::find();
              if (hasNUsesOrMore != -1)
                *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 64) + 640) |= 2 << v42;
            }
            v38 = v40 + v45;
            goto LABEL_49;
          }
          break;
        case 11:
          hasNUsesOrMore = memcmp(String, "air.texture", 0xBuLL);
          if ((_DWORD)hasNUsesOrMore)
          {
            if (*String != 0x706D61732E726961 || *(_QWORD *)((char *)String + 3) != 0x72656C706D61732ELL)
            {
LABEL_55:
              if (*(_BYTE *)(*(_QWORD *)v28 + 8) == 15)
              {
                DWORD2(v46) = 0;
                BYTE12(v46) = 0;
                v47 = 0;
                v49 = 0;
                v48 = 1;
                *(_QWORD *)&v46 = v28;
                MetalModulePass::cacheStaticBoundsInfo(a1, (uint64_t)v28, (uint64_t)&v46);
              }
            }
          }
          break;
        case 10:
          if (*String != 0x666675622E726961 || *((_WORD *)String + 4) != 29285)
            goto LABEL_55;
          hasNUsesOrMore = MTLBoundsCheck::checkAddressSpace((uint64_t)v28);
          if ((_DWORD)hasNUsesOrMore)
          {
            LocationIndex = MTLBoundsCheck::getLocationIndex(v18);
            v51 = 0;
            v56 = 0;
            v55 = 256;
            v54 = 1;
            ParamDereferenceableBytes = 0;
            v53 = LocationIndex;
            if ((*(_BYTE *)(*(_QWORD *)(a1 + 32) + 20) & 0x40) != 0
              && llvm::Function::hasParamAttribute())
            {
              ParamDereferenceableBytes = llvm::AttributeList::getParamDereferenceableBytes((llvm::AttributeList *)(a2 + 112));
            }
            if ((*(_BYTE *)(*(_QWORD *)(a1 + 32) + 20) & 4) != 0)
            {
              v31 = (llvm::Value *)llvm::ConstantInt::get();
              v32 = *(_QWORD *)(a1 + 72);
              v50 = 257;
              Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v61, 47, (uint64_t)v28, v32, (uint64_t)&v46);
              v50 = 257;
              v34 = llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)v61, Cast, v31, (const llvm::Twine *)&v46);
              v35 = *(_QWORD *)v28;
              v50 = 257;
              v36 = llvm::IRBuilderBase::CreateCast((uint64_t)v61, 48, v34, v35, (uint64_t)&v46);
              llvm::Value::replaceUsesOutsideBlock();
              v28 = (llvm::Value *)v36;
            }
            v51 = v28;
            MetalModulePass::cacheStaticBoundsInfo(a1, (uint64_t)v28, (uint64_t)&v51);
            if ((*(_BYTE *)(*(_QWORD *)(a1 + 32) + 22) & 0x80) == 0)
            {
              v58.n128_u64[0] = (unint64_t)"air.read_write";
              v58.n128_u64[1] = 14;
              v59 = 1;
              MTLBoundsCheck::getArgAccessType(v18, &v58, (uint64_t)&v46);
              v60 = v46;
              v37 = 2 * LocationIndex;
              if (llvm::StringRef::find() != -1)
                *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 64) + 640) |= 1 << v37;
              hasNUsesOrMore = llvm::StringRef::find();
              if (hasNUsesOrMore != -1)
                *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 64) + 640) |= 2 << v37;
            }
            v38 = v45 + 1;
LABEL_49:
            v45 = v38;
          }
          break;
        default:
          goto LABEL_55;
      }
LABEL_57:
      ++v16;
      v17 -= 8;
      if (!v17)
        goto LABEL_60;
    }
  }
  v45 = 0;
LABEL_60:
  if (!*(_DWORD *)(a1 + 120) && *(_BYTE *)(**(_QWORD **)(*(_QWORD *)(a2 + 24) + 16) + 8) != 7)
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 64) + 640) &= 0x5555555555555555uLL;
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 32) + 22) & 1) == 0 && v45 >= 0x5C)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 64) + 648) |= 1u;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 64) + 651) = 1;
    v44 = (llvm::raw_ostream *)llvm::dbgs((llvm *)hasNUsesOrMore);
    llvm::raw_ostream::operator<<(v44, "Instrumentation failure: argumentLimits\n", 0x28uLL);
  }
  llvm::MDTuple::getImpl();
  llvm::MDNode::replaceOperandWith();
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)&v65);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v64);
  if (v61[0] != &v62)
    free(v61[0]);
  if (v66 != v68)
    free(v66);
}

void sub_2410432DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28)
{
  uint64_t v28;
  void *v30;

  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder(&a28);
  v30 = *(void **)(v28 - 176);
  if (v30 != (void *)(v28 - 160))
    free(v30);
  _Unwind_Resume(a1);
}

_QWORD *llvm::SmallVector<llvm::Metadata *,8u>::SmallVector<llvm::MDOperand const*,void>(_QWORD *a1, char *a2, char *a3)
{
  *a1 = a1 + 2;
  a1[1] = 0x800000000;
  llvm::SmallVectorImpl<llvm::User *>::append<std::move_iterator<llvm::User **>,void>((uint64_t)a1, a2, a3);
  return a1;
}

void sub_24104338C(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  void *v3;

  v3 = v2;
  if (*v1 != v3)
    free(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t MTLArgumentRewritePass::computeArgumentCount(MTLArgumentRewritePass *this, llvm::Type *a2)
{
  llvm::Type *v2;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  llvm::Type **v10;
  uint64_t v11;
  llvm::Type *v12;
  llvm::StructType *v13;

  v2 = a2;
  v4 = *((unsigned __int8 *)a2 + 8);
  if (a2 && v4 == 16)
  {
    v5 = 1;
LABEL_13:
    if (!isSpecialStructType(v2))
    {
      v8 = *((unsigned int *)v2 + 3);
      if ((_DWORD)v8)
      {
        v9 = 0;
        v10 = (llvm::Type **)*((_QWORD *)v2 + 2);
        v11 = 8 * v8;
        do
        {
          v12 = *v10++;
          v9 += MTLArgumentRewritePass::computeArgumentCount(this, v12);
          v11 -= 8;
        }
        while (v11);
        return (v9 * v5);
      }
    }
LABEL_22:
    v9 = 0;
    return (v9 * v5);
  }
  v5 = 1;
  v6 = *((unsigned __int8 *)a2 + 8);
  while (v2 && v6 == 17)
  {
    if (v4 == 17)
    {
      v7 = 1;
      do
      {
        v7 *= *((_DWORD *)v2 + 8);
        v2 = (llvm::Type *)*((_QWORD *)v2 + 3);
        v4 = *((unsigned __int8 *)v2 + 8);
      }
      while (v4 == 17);
    }
    else
    {
      v7 = 1;
    }
    v5 *= v7;
    v6 = v4;
    if (v4 == 16)
      goto LABEL_13;
  }
  v9 = 0;
  if (v2 && v6 == 15)
  {
    v13 = (llvm::StructType *)**((_QWORD **)v2 + 2);
    if (*((_BYTE *)v13 + 8) != 16 || !isSpecialStructType(v13))
    {
      v9 = 1;
      return (v9 * v5);
    }
    goto LABEL_22;
  }
  return (v9 * v5);
}

_QWORD *llvm::SmallVector<llvm::Metadata *,8u>::SmallVector<llvm::MDOperand const*>(_QWORD *a1, char **a2)
{
  *a1 = a1 + 2;
  a1[1] = 0x800000000;
  llvm::SmallVectorImpl<llvm::User *>::append<std::move_iterator<llvm::User **>,void>((uint64_t)a1, *a2, a2[1]);
  return a1;
}

void sub_241043500(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  void *v3;

  v3 = v2;
  if (*v1 != v3)
    free(*v1);
  _Unwind_Resume(exception_object);
}

void MTLGlobalTLSArgumentPass::~MTLGlobalTLSArgumentPass(MTLGlobalTLSArgumentPass *this)
{
  char *v2;

  *(_QWORD *)this = &off_25111E050;
  v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
}

{
  char *v2;

  *(_QWORD *)this = &off_25111E050;
  v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x24268D8F0);
}

uint64_t MTLGlobalTLSArgumentPass::runOnModule(llvm::BasicBlock **this, llvm::Module *a2)
{
  llvm::Module *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t Metadata;
  uint64_t *v10;
  llvm::MDString *v11;
  uint64_t v12;
  MTLGlobalTLSArgumentPass *v13;
  uint64_t EntryFunction;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  llvm::BasicBlock *v22;
  llvm::BasicBlock *v23;
  llvm::BasicBlock *v24;
  llvm::ReturnInst *Context;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  llvm::Type **AlignedLoad;
  llvm::BasicBlock *v32;
  llvm::Type *v33;
  uint64_t v34;
  unint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  llvm::LLVMContext *v38;
  llvm::Instruction *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  llvm::Function *Function;
  uint64_t v50;
  llvm::BasicBlock *v51;
  llvm::BasicBlock *v52;
  llvm::BasicBlock *v53;
  llvm::ReturnInst *v54;
  llvm::Type *v55;
  uint64_t v56;
  uint64_t v57;
  llvm::LLVMContext *Cast;
  llvm::Instruction *v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  llvm::Function *v65;
  char v66[32];
  __int16 v67;
  char v68[32];
  __int16 v69;
  __n128 v70;
  char v71;
  char v72[24];
  char v73[32];
  __int16 v74;
  void *v75[2];
  _BYTE v76[16];
  __int16 v77;
  llvm::BasicBlock *v78;
  char *v79;
  llvm::ReturnInst *v80;
  uint64_t *v81;
  _QWORD *v82;
  uint64_t v83;
  int v84;
  __int16 v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD v90[2];
  void *v91;
  uint64_t v92;
  _BYTE v93[64];
  void *v94[2];
  _BYTE v95[64];
  void *v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  _BYTE v100[64];
  void *v101;
  uint64_t v102;
  _QWORD v103[2];
  __int16 v104;
  llvm::BasicBlock *v105;
  char *v106;
  llvm::ReturnInst *v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t v110;
  int v111;
  __int16 v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  _QWORD v122[22];

  v122[20] = *MEMORY[0x24BDAC8D0];
  MetalModulePass::runOnModule((MetalModulePass *)this, a2);
  if (MTLBoundsCheck::isLibraryModule(a2, v4))
    return 0;
  v120 = v122;
  v121 = 0x400000000;
  v6 = (char *)a2 + 8;
  v7 = (char *)*((_QWORD *)a2 + 2);
  if (v7 == (char *)a2 + 8)
    goto LABEL_38;
  do
  {
    if (v7)
      v8 = v7 - 56;
    else
      v8 = 0;
    if ((v8[33] & 0x1C) != 0 && *(_BYTE *)(*(_QWORD *)v8 + 8) == 15)
    {
      Metadata = llvm::Value::getMetadata();
      if (Metadata)
      {
        llvm::Value::setMetadata();
        LOBYTE(v103[0]) = 0;
        LOBYTE(v104) = 0;
        v101 = v8;
        v10 = (uint64_t *)(Metadata - 8 * *(unsigned int *)(Metadata + 8));
        v102 = *v10;
        v11 = (llvm::MDString *)v10[1];
        if (v11)
        {
          v103[0] = llvm::MDString::getString(v11);
          v103[1] = v12;
          if (!(_BYTE)v104)
            LOBYTE(v104) = 1;
        }
        llvm::SmallVectorImpl<MTLGlobalTLSArgumentPass::runOnModule(llvm::Module &)::GVInfo>::emplace_back<MTLGlobalTLSArgumentPass::runOnModule(llvm::Module &)::GVInfo&>((uint64_t)&v120, (uint64_t)&v101);
      }
    }
    v7 = (char *)*((_QWORD *)v7 + 1);
  }
  while (v7 != v6);
  if ((_DWORD)v121
    && (v13 = (MTLGlobalTLSArgumentPass *)this,
        EntryFunction = MetalModulePass::getEntryFunction((MetalModulePass *)this),
        (v15 = EntryFunction) != 0))
  {
    v16 = *(_QWORD *)(EntryFunction + 24);
    llvm::SmallVector<llvm::Type *,8u>::SmallVector<llvm::Type * const*,void>(&v118, (_BYTE *)(*(_QWORD *)(v16 + 16) + 8), (_BYTE *)(*(_QWORD *)(v16 + 16) + 8 * *(unsigned int *)(v16 + 12)));
    if ((_DWORD)v121)
    {
      v17 = (char *)v120;
      v18 = 40 * v121;
      do
      {
        v101 = *(void **)(*(_QWORD *)v17 + 24);
        if (*((_BYTE *)v101 + 8) != 15)
          v101 = (void *)llvm::PointerType::get();
        llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)&v118, (uint64_t *)&v101);
        v17 += 40;
        v18 -= 40;
      }
      while (v18);
    }
    v19 = llvm::FunctionType::get();
    v20 = *(_DWORD *)(v15 + 32) & 0xF;
    v104 = 257;
    v21 = llvm::Function::Create(v19, v20, (uint64_t)&v101, *(_QWORD *)(v15 + 40));
    *(_QWORD *)(v21 + 112) = *(_QWORD *)(v15 + 112);
    llvm::Value::takeName();
    llvm::Function::addFnAttr();
    *(_DWORD *)(v15 + 32) = *(_DWORD *)(v15 + 32) & 0xFFFFBFC0 | 0x4007;
    v22 = this[5];
    v104 = 257;
    v24 = (llvm::BasicBlock *)llvm::BasicBlock::Create(v22, (llvm::LLVMContext *)&v101, (const llvm::Twine *)v21, 0, v23);
    Context = (llvm::ReturnInst *)llvm::BasicBlock::getContext(v24);
    v101 = v103;
    v102 = 0x200000000;
    v107 = Context;
    v108 = &v116;
    v109 = &v117;
    v110 = 0;
    v111 = 0;
    v112 = 512;
    v113 = 7;
    v115 = 0;
    v114 = 0;
    v116 = MEMORY[0x24BED83B8] + 16;
    v117 = MEMORY[0x24BED83F0] + 16;
    v105 = v24;
    v106 = (char *)v24 + 40;
    v26 = *(_QWORD *)(v15 + 96);
    v27 = v26;
    v65 = (llvm::Function *)v21;
    if (v26 < *(_QWORD *)(v21 + 96))
    {
      v28 = 0;
      v29 = *(_QWORD *)(v15 + 96);
      do
      {
        v30 = *(_QWORD *)((char *)v120 + v28);
        if ((*(_WORD *)(v21 + 18) & 1) != 0)
          llvm::Function::BuildLazyArguments((llvm::Function *)v21);
        AlignedLoad = (llvm::Type **)(*(_QWORD *)(v21 + 88) + 40 * v26 + v28);
        v32 = *(llvm::BasicBlock **)(v30 + 24);
        if (*((_BYTE *)v32 + 8) != 15 && (v32 == this[9] || v32 == this[10]))
        {
          v33 = (llvm::Type *)**((_QWORD **)*AlignedLoad + 2);
          v77 = 257;
          AlignedLoad = (llvm::Type **)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)&v101, v33, (uint64_t)AlignedLoad, 0, 0, (uint64_t)v75);
        }
        llvm::IRBuilderBase::CreateAlignedStore((uint64_t)&v101, AlignedLoad, v30, 0);
        ++v29;
        v21 = (uint64_t)v65;
        v28 += 40;
      }
      while (v29 < *((_QWORD *)v65 + 12));
      v27 = *(_QWORD *)(v15 + 96);
      v13 = (MTLGlobalTLSArgumentPass *)this;
    }
    v98 = v100;
    v99 = 0x800000000;
    if (v27)
    {
      v34 = 0;
      v35 = 0;
      do
      {
        if ((*(_WORD *)(v21 + 18) & 1) != 0)
          llvm::Function::BuildLazyArguments((llvm::Function *)v21);
        v75[0] = (void *)(*(_QWORD *)(v21 + 88) + v34);
        llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)&v98, (uint64_t *)v75);
        ++v35;
        v34 += 40;
      }
      while (v35 < *(_QWORD *)(v15 + 96));
      v36 = v98;
      LODWORD(v27) = v99;
    }
    else
    {
      v36 = v100;
    }
    v37 = *(_QWORD *)(v15 + 24);
    v77 = 257;
    v38 = (llvm::LLVMContext *)llvm::IRBuilderBase::CreateCall((uint64_t)&v101, v37, v15, (uint64_t)v36, v27, (uint64_t)v75, 0);
    if (*(_BYTE *)(**(_QWORD **)(v16 + 16) + 8) == 7)
      v40 = llvm::ReturnInst::Create(v107, 0, 0, v39);
    else
      v40 = llvm::ReturnInst::Create(v107, v38, 0, v39);
    v77 = 257;
    llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)&v101, v40, (uint64_t)v75);
    v41 = *(_QWORD *)(*((_QWORD *)v13 + 16) - 8 * *(unsigned int *)(*((_QWORD *)v13 + 16) + 8) + 16);
    llvm::SmallVector<llvm::Metadata *,8u>::SmallVector<llvm::MDOperand const*,void>(&v96, (char *)(v41 - 8 * *(unsigned int *)(v41 + 8)), (char *)v41);
    if ((_DWORD)v121)
    {
      v42 = (uint64_t *)v120;
      v64 = (uint64_t *)((char *)v120 + 40 * v121);
      v43 = 40 * v26;
      v63 = MEMORY[0x24BED83B8] + 16;
      v62 = MEMORY[0x24BED83F0] + 16;
      do
      {
        v44 = *v42;
        v45 = v42[1];
        v46 = *((unsigned __int8 *)v42 + 32);
        v94[0] = v95;
        v94[1] = (void *)0x800000000;
        v75[0] = (void *)MetalModulePass::getMetadata<unsigned long long>();
        llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)v94, (uint64_t *)v75);
        llvm::SmallVectorImpl<llvm::User *>::append<std::move_iterator<llvm::User **>,void>((uint64_t)v94, (char *)(v45 - 8 * *(unsigned int *)(v45 + 8)), (char *)v45);
        v70.n128_u64[0] = (unint64_t)"air.read_write";
        v70.n128_u64[1] = 14;
        v71 = 1;
        MTLBoundsCheck::getArgAccessType(v45, &v70, (uint64_t)v72);
        v47 = llvm::StringRef::find();
        v48 = llvm::StringRef::find();
        v90[1] = *((_QWORD *)v13 + 5);
        v91 = v93;
        v92 = 0x800000000;
        if ((*((_BYTE *)v65 + 18) & 1) != 0)
          llvm::Function::BuildLazyArguments(v65);
        if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v65 + 11) + v43) + 8) == 15)
        {
          if (v47 != -1 && v48 == -1 || v48 != -1 && v47 == -1)
            llvm::AttrBuilder::addAttribute();
          llvm::AttrBuilder::addAttribute();
        }
        llvm::Function::addParamAttrs();
        v75[0] = (void *)llvm::MDTuple::getImpl();
        llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)&v96, (uint64_t *)v75);
        v21 = (uint64_t)v65;
        if (v46)
        {
          Function = (llvm::Function *)llvm::Module::getFunction();
          v50 = (uint64_t)Function;
          if (Function)
          {
            llvm::Function::dropAllReferences(Function);
            llvm::GlobalValue::setLinkage(v50, 0);
            *(_QWORD *)(v50 + 112) = 0;
            llvm::Function::addFnAttr();
            llvm::Function::addFnAttr();
            llvm::Function::addFnAttr();
            llvm::Function::addFnAttr();
            *(_DWORD *)(v50 + 32) = *(_DWORD *)(v50 + 32) & 0xFFFFBFC0 | 0x4007;
            v51 = (llvm::BasicBlock *)*((_QWORD *)v13 + 5);
            v77 = 257;
            v53 = (llvm::BasicBlock *)llvm::BasicBlock::Create(v51, (llvm::LLVMContext *)v75, (const llvm::Twine *)v50, 0, v52);
            v54 = (llvm::ReturnInst *)llvm::BasicBlock::getContext(v53);
            v75[0] = v76;
            v75[1] = (void *)0x200000000;
            v80 = v54;
            v81 = &v89;
            v82 = v90;
            v83 = 0;
            v84 = 0;
            v85 = 512;
            v86 = 7;
            v87 = 0;
            v88 = 0;
            v89 = v63;
            v90[0] = v62;
            v78 = v53;
            v79 = (char *)v53 + 40;
            v55 = *(llvm::Type **)(v44 + 24);
            v69 = 257;
            v56 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v75, v55, v44, 0, 0, (uint64_t)v68);
            v57 = **(_QWORD **)(*(_QWORD *)(v50 + 24) + 16);
            v67 = 257;
            Cast = (llvm::LLVMContext *)llvm::IRBuilderBase::CreateCast((uint64_t)v75, 49, v56, v57, (uint64_t)v66);
            v60 = llvm::ReturnInst::Create(v80, Cast, 0, v59);
            v74 = 257;
            llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)v75, v60, (uint64_t)v73);
            llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v90);
            llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v89);
            if (v75[0] != v76)
              free(v75[0]);
          }
        }
        if (v91 != v93)
          free(v91);
        if (v94[0] != v95)
          free(v94[0]);
        v43 += 40;
        v42 += 5;
        ++v26;
      }
      while (v42 != v64);
    }
    MetalModulePass::getMetadata(v13, (llvm::Value *)v21);
    llvm::MDNode::replaceOperandWith();
    llvm::MDTuple::getImpl();
    llvm::MDNode::replaceOperandWith();
    if (v96 != &v97)
      free(v96);
    if (v98 != v100)
      free(v98);
    llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)&v117);
    llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v116);
    if (v101 != v103)
      free(v101);
    if (v118 != &v119)
      free(v118);
    v5 = 1;
  }
  else
  {
LABEL_38:
    v5 = 0;
  }
  if (v120 != v122)
    free(v120);
  return v5;
}

void sub_241043F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (STACK[0x2A8] != a12)
    free((void *)STACK[0x2A8]);
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder((void **)&STACK[0x2F8]);
  if ((unint64_t *)STACK[0x380] != &STACK[0x390])
    free((void *)STACK[0x380]);
  if (STACK[0x3D0] != a13)
    free((void *)STACK[0x3D0]);
  _Unwind_Resume(a1);
}

uint64_t llvm::SmallVectorImpl<MTLGlobalTLSArgumentPass::runOnModule(llvm::Module &)::GVInfo>::emplace_back<MTLGlobalTLSArgumentPass::runOnModule(llvm::Module &)::GVInfo&>(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= *(_DWORD *)(a1 + 12))
    return llvm::SmallVectorTemplateBase<MTLGlobalTLSArgumentPass::runOnModule(llvm::Module &)::GVInfo,true>::growAndEmplaceBack<MTLGlobalTLSArgumentPass::runOnModule(llvm::Module &)::GVInfo&>(a1, a2);
  v3 = *(_QWORD *)a1 + 40 * v2;
  v4 = *(_OWORD *)a2;
  v5 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(v3 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)v3 = v4;
  *(_OWORD *)(v3 + 16) = v5;
  LODWORD(v3) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v3;
  return *(_QWORD *)a1 + 40 * v3 - 40;
}

uint64_t llvm::SmallVectorTemplateBase<MTLGlobalTLSArgumentPass::runOnModule(llvm::Module &)::GVInfo,true>::growAndEmplaceBack<MTLGlobalTLSArgumentPass::runOnModule(llvm::Module &)::GVInfo&>(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _OWORD v9[2];
  uint64_t v10;

  v3 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v3;
  v10 = *(_QWORD *)(a2 + 32);
  v4 = llvm::SmallVectorTemplateCommon<MTLGlobalTLSArgumentPass::runOnModule(llvm::Module &)::GVInfo,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<MTLGlobalTLSArgumentPass::runOnModule(llvm::Module &)::GVInfo,true>>(a1, (unint64_t)v9, 1);
  v5 = *(_QWORD *)a1 + 40 * *(unsigned int *)(a1 + 8);
  v6 = *(_QWORD *)(v4 + 32);
  v7 = *(_OWORD *)(v4 + 16);
  *(_OWORD *)v5 = *(_OWORD *)v4;
  *(_OWORD *)(v5 + 16) = v7;
  *(_QWORD *)(v5 + 32) = v6;
  LODWORD(v5) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v5;
  return *(_QWORD *)a1 + 40 * v5 - 40;
}

unint64_t llvm::SmallVectorTemplateCommon<MTLGlobalTLSArgumentPass::runOnModule(llvm::Module &)::GVInfo,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<MTLGlobalTLSArgumentPass::runOnModule(llvm::Module &)::GVInfo,true>>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v8;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v6 = *(_QWORD *)a1 + 40 * v4;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
  }
  return v3;
}

_QWORD *llvm::SmallVector<llvm::Type *,8u>::SmallVector<llvm::Type * const*,void>(_QWORD *a1, _BYTE *a2, _BYTE *a3)
{
  *a1 = a1 + 2;
  a1[1] = 0x800000000;
  llvm::SmallVectorImpl<llvm::Metadata *>::append<llvm::Metadata * const*,void>((uint64_t)a1, a2, a3);
  return a1;
}

void sub_241044204(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  void *v3;

  v3 = v2;
  if (*v1 != v3)
    free(*v1);
  _Unwind_Resume(exception_object);
}

double createMTLNullTextureCheckPass(MTLBoundsCheck::SharedPassData *a1)
{
  _QWORD *v2;
  double result;

  v2 = (_QWORD *)operator new();
  v2[1] = 0;
  v2[2] = &NullTextureCheckPass::ID;
  *v2 = &off_25111F8D8;
  *(_QWORD *)&result = 4;
  v2[3] = 4;
  v2[4] = a1;
  return result;
}

void NullTextureCheckPass::~NullTextureCheckPass(NullTextureCheckPass *this)
{
  llvm::Pass::~Pass(this);
  JUMPOUT(0x24268D8F0);
}

BOOL NullTextureCheckPass::runOnModule(NullTextureCheckPass *this, llvm::Module *a2)
{
  _BOOL8 v2;
  unsigned int MDKindID;
  llvm::LLVMContext *v6;
  llvm::Instruction **v7;
  llvm::Instruction **v8;
  llvm::Instruction *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t CheckedTextureFunction;
  int NumArgOperands;
  unint64_t v14;
  llvm::Instruction *v15;
  uint64_t v16;
  llvm::Instruction *v17;
  llvm::Instruction *v18;
  uint64_t v20[4];
  __int16 v21;
  void *v22;
  unsigned int v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  _QWORD v27[10];

  v27[8] = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 4) + 64) + 651))
    return 0;
  MDKindID = llvm::Module::getMDKindID();
  *((_DWORD *)this + 7) = MDKindID;
  v25 = v27;
  v26 = 0x800000000;
  v22 = &v25;
  v23 = MDKindID;
  llvm::InstVisitor<NullTextureCheckPass::runOnModule(llvm::Module &)::OpVisitor,void>::visit<llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>>((uint64_t)&v22, *((_QWORD *)a2 + 4), (uint64_t)a2 + 24);
  llvm::Type::getInt32Ty(*(llvm::Type **)a2, v6);
  v7 = (llvm::Instruction **)v25;
  if ((_DWORD)v26)
  {
    v8 = (llvm::Instruction **)((char *)v25 + 8 * v26);
    do
    {
      v9 = *v7;
      MTLBoundsCheck::SharedPassData::indexForInstruction(*((MTLBoundsCheck::SharedPassData **)this + 4), *v7);
      v10 = llvm::ConstantInt::get();
      v11 = *((_QWORD *)v9 - 4);
      if (!v11 || *(_BYTE *)(v11 + 16) || *(_QWORD *)(v11 + 24) != *((_QWORD *)v9 + 9))
        v11 = 0;
      CheckedTextureFunction = NullTextureCheckPass::getCheckedTextureFunction(this, (llvm::Function *)v11);
      NumArgOperands = llvm::compat::getNumArgOperands(v9);
      v20[0] = 0;
      llvm::SmallVector<llvm::Value *,8u>::SmallVector(&v22, (NumArgOperands + 1), v20);
      v14 = 0;
      v15 = v9;
      while (v14 < llvm::compat::getNumArgOperands(v9))
      {
        *((_QWORD *)v22 + v14++) = *((_QWORD *)v15 - 4 * (*((_DWORD *)v9 + 5) & 0x7FFFFFF));
        v15 = (llvm::Instruction *)((char *)v15 + 32);
      }
      *((_QWORD *)v22 + v14) = v10;
      if (CheckedTextureFunction)
        v16 = *(_QWORD *)(CheckedTextureFunction + 24);
      else
        v16 = 0;
      v21 = 257;
      v17 = (llvm::Instruction *)llvm::CallInst::Create(v16, CheckedTextureFunction, (uint64_t)v22, v23, 0, 0);
      llvm::ReplaceInstWithInst(v9, v17, v18);
      if (v22 != &v24)
        free(v22);
      ++v7;
    }
    while (v7 != v8);
    v7 = (llvm::Instruction **)v25;
    v2 = (_DWORD)v26 != 0;
  }
  else
  {
    v2 = 0;
  }
  if (v7 != v27)
    free(v7);
  return v2;
}

void sub_2410444E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  void *v25;

  if (a25 != v25)
    free(a25);
  _Unwind_Resume(exception_object);
}

uint64_t NullTextureCheckPass::getCheckedTextureFunction(NullTextureCheckPass *this, llvm::Function *a2)
{
  llvm::Type **v4;
  uint64_t Name;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  __int128 v10;
  llvm::LLVMContext *v11;
  uint64_t Function;
  llvm::LLVMContext *v13;
  llvm::LLVMContext *v14;
  uint64_t Int64Ty;
  llvm::BasicBlock *v16;
  int v17;
  llvm::BasicBlock *v18;
  llvm::BasicBlock *v19;
  llvm::BasicBlock *v20;
  llvm::BasicBlock *v21;
  llvm::BasicBlock *v22;
  uint64_t v23;
  llvm::BasicBlock *v24;
  llvm::BasicBlock *v25;
  llvm::Value **v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  llvm::Value *v30;
  llvm::BasicBlock *v31;
  llvm::BranchInst *v32;
  uint64_t Cast;
  llvm::Value *v34;
  llvm::Value *v35;
  llvm::Value *v36;
  uint64_t v37;
  llvm::Value *v38;
  llvm::Value *v39;
  llvm::Value *v40;
  llvm::Value *inserted;
  llvm::Type *v42;
  llvm::Value *AlignedLoad;
  uint64_t v44;
  char *v45;
  size_t v46;
  llvm::Type *GVBaseType;
  uint64_t GEP;
  llvm::Type *v49;
  llvm::Value *v50;
  llvm::Value *v51;
  llvm::Value *v52;
  llvm::CmpInst **v53;
  llvm::Value *ICmp;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  llvm::Value *v59;
  llvm::Value *v60;
  llvm::Instruction *v61;
  uint64_t v62;
  llvm::Instruction *v63;
  uint64_t v64;
  uint64_t v65;
  llvm::Type *v66;
  llvm::Value *v67;
  uint64_t v68;
  llvm::Type *v69;
  llvm::Value *v70;
  const llvm::Twine *ImageIDFunction;
  uint64_t v72;
  llvm::Value *v73;
  uint64_t v74;
  llvm::ConstantPointerNull *Int8PtrTy;
  llvm::PointerType *v76;
  uint64_t v77;
  uint64_t v78;
  llvm::Type *v79;
  llvm::Value *v80;
  uint64_t Select;
  llvm::Value *v82;
  llvm::Value *v83;
  llvm::Value *v84;
  uint64_t v85;
  llvm::Instruction *v86;
  llvm::Instruction *v87;
  uint64_t v88;
  llvm::Type *v89;
  llvm::PHINode *PHI;
  llvm::Type *v91;
  llvm::Value *NullValue;
  llvm::Instruction *v93;
  llvm::Instruction *Shl;
  int v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  llvm::Value *v100;
  llvm::Value *LShr;
  llvm::Value *v102;
  uint64_t Int8Ty;
  llvm::BasicBlock *v104;
  llvm::BranchInst *v105;
  _BYTE v106[32];
  __int16 v107;
  llvm::BasicBlock *v108;
  uint64_t v109;
  uint64_t Int32Ty;
  std::string v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114[4];
  __int16 v115;
  void *v116;
  uint64_t v117;
  _BYTE v118[16];
  __int16 v119;
  std::string __p;
  __int16 v121;
  llvm::BasicBlock *v122;
  char *v123;
  llvm::ReturnInst *v124;
  uint64_t v125;
  _QWORD v126[9];

  v126[7] = *MEMORY[0x24BDAC8D0];
  v4 = (llvm::Type **)*((_QWORD *)a2 + 5);
  Name = llvm::Value::getName(a2);
  v7 = v6;
  v112 = Name;
  v113 = v6;
  v8 = *((_QWORD *)a2 + 3);
  std::string::basic_string[abi:ne180100]<0>(&__p, "mtl.checked.");
  v9 = std::string::append[abi:ne180100]<unsigned char const*,0>(&__p, (char *)(Name + 4), (char *)(Name + v7));
  if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v111, v9->__r_.__value_.__l.__data_, v9->__r_.__value_.__l.__size_);
  }
  else
  {
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v111.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v10;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  Function = llvm::Module::getFunction();
  if (!Function)
  {
    Int8Ty = llvm::Type::getInt8Ty(*v4, v11);
    Int32Ty = 0;
    Int32Ty = llvm::Type::getInt32Ty(*v4, v13);
    Int64Ty = llvm::Type::getInt64Ty(*v4, v14);
    v109 = 0;
    llvm::SmallVector<llvm::Type *,8u>::SmallVector<llvm::Type * const*,void>(&__p, (_BYTE *)(*(_QWORD *)(v8 + 16) + 8), (_BYTE *)(*(_QWORD *)(v8 + 16) + 8 * *(unsigned int *)(v8 + 12)));
    llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)&__p, &Int32Ty);
    v100 = (llvm::Value *)Int64Ty;
    v109 = llvm::FunctionType::get();
    if ((std::string::size_type *)__p.__r_.__value_.__l.__data_ != &__p.__r_.__value_.__r.__words[2])
      free(__p.__r_.__value_.__l.__data_);
    __p.__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 14);
    Function = getOrInsertFunction<std::string const&,llvm::FunctionType *&,llvm::AttributeList>();
    llvm::Function::addFnAttr();
    *(_DWORD *)(Function + 32) = *(_DWORD *)(Function + 32) & 0xFFFFBFC0 | 0x4007;
    if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 4) + 72) + 20) & 2) != 0
      && ((llvm::Function::hasFnAttribute() & 1) != 0 || llvm::Function::hasFnAttribute()))
    {
      llvm::Function::removeFnAttr();
    }
    v17 = *(unsigned __int8 *)(**(_QWORD **)(v109 + 16) + 8);
    v108 = 0;
    v18 = *v4;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"checkBlock";
    v121 = 259;
    v108 = (llvm::BasicBlock *)llvm::BasicBlock::Create(v18, (llvm::LLVMContext *)&__p, (const llvm::Twine *)Function, 0, v16);
    v19 = *v4;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"passBlock";
    v121 = 259;
    v104 = (llvm::BasicBlock *)llvm::BasicBlock::Create(v19, (llvm::LLVMContext *)&__p, (const llvm::Twine *)Function, 0, v20);
    v99 = v17;
    v21 = *v4;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"failBlock";
    v121 = 259;
    v23 = llvm::BasicBlock::Create(v21, (llvm::LLVMContext *)&__p, (const llvm::Twine *)Function, 0, v22);
    v24 = *v4;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"retBlock";
    v121 = 259;
    v105 = (llvm::BranchInst *)llvm::BasicBlock::Create(v24, (llvm::LLVMContext *)&__p, (const llvm::Twine *)Function, 0, v25);
    if ((*(_WORD *)(Function + 18) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments((llvm::Function *)Function);
      v27 = (uint64_t *)(Function + 88);
      v26 = *(llvm::Value ***)(Function + 88);
      if ((*(_WORD *)(Function + 18) & 1) != 0)
      {
        llvm::Function::BuildLazyArguments((llvm::Function *)Function);
        v98 = *v27;
LABEL_18:
        v97 = *(_QWORD *)(Function + 96);
        MTLIRBuilder::MTLIRBuilder<llvm::BasicBlock * const&>((uint64_t)&__p, &v108);
        v102 = (llvm::Value *)MTLIRBuilder::CreateIsNullTextureCall((MTLIRBuilder *)&__p, v26);
        v28 = llvm::StringRef::find();
        v29 = llvm::StringRef::find();
        if ((v28 & llvm::StringRef::find()) == 0xFFFFFFFFFFFFFFFFLL && v29 == -1
          || (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 4) + 72) + 24) & 2) == 0)
        {
          v96 = 0;
          v30 = 0;
          v31 = v102;
          v32 = (llvm::BranchInst *)v23;
        }
        else
        {
          v119 = 257;
          Cast = llvm::IRBuilderBase::CreateCast((uint64_t)&__p, 47, (uint64_t)v26, (uint64_t)v100, (uint64_t)&v116);
          v115 = 257;
          v34 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)&__p, 38, Cast, Int32Ty, (uint64_t)v114);
          v119 = 257;
          v35 = (llvm::Value *)llvm::ConstantInt::get();
          LShr = (llvm::Value *)llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)&__p, v34, v35, (const llvm::Twine *)&v116, 0);
          v119 = 257;
          v36 = (llvm::Value *)llvm::ConstantInt::get();
          v37 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)&__p, v34, v36, (const llvm::Twine *)&v116);
          v115 = 257;
          v38 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)&__p, 38, v37, Int8Ty, (uint64_t)v114);
          v107 = 257;
          v39 = (llvm::Value *)llvm::ConstantInt::get();
          Shl = llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)&__p, v38, v39, (const llvm::Twine *)v106, 0, 0);
          v40 = v34;
          inserted = (llvm::Value *)MTLBoundsCheck::SharedPassData::getOrInsertTextureUsageTableGV(*((MTLBoundsCheck::SharedPassData **)this + 4));
          v42 = (llvm::Type *)*((_QWORD *)inserted + 3);
          v119 = 257;
          AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)&__p, v42, (uint64_t)inserted, 0, 0, (uint64_t)&v116);
          v44 = *((_QWORD *)this + 4);
          v45 = (char *)llvm::Value::getName(inserted);
          GVBaseType = (llvm::Type *)MTLBoundsCheck::SharedPassData::getGVBaseType(v44, v45, v46);
          v119 = 257;
          GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)&__p, GVBaseType, AlignedLoad, LShr, (const llvm::Twine *)&v116);
          v49 = *(llvm::Type **)(GEP + 72);
          v119 = 257;
          v50 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)&__p, v49, GEP, 0, 0, (uint64_t)&v116);
          v30 = v40;
          v119 = 257;
          v51 = (llvm::Value *)llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)&__p, v50, Shl, (const llvm::Twine *)&v116, 0);
          v52 = (llvm::Value *)llvm::ConstantInt::get();
          v119 = 257;
          v53 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)&__p, v51, v52, (const llvm::Twine *)&v116);
          v119 = 257;
          ICmp = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t)&__p, 33, v53, (uint64_t)v52, (uint64_t)&v116);
          v119 = 257;
          v31 = (llvm::BasicBlock *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)&__p, ICmp, v102, (const llvm::Twine *)&v116);
          v32 = (llvm::BranchInst *)v23;
          v96 = 1;
        }
        llvm::IRBuilderBase::CreateCondBr((uint64_t *)&__p, v31, v32, v104, 0, 0);
        v122 = v104;
        v123 = (char *)v104 + 40;
        v116 = v118;
        v117 = 0x800000000;
        if ((*(_BYTE *)(Function + 18) & 1) != 0)
        {
          llvm::Function::BuildLazyArguments((llvm::Function *)Function);
          v55 = *(_QWORD *)(Function + 88);
          if ((*(_WORD *)(Function + 18) & 1) != 0)
          {
            llvm::Function::BuildLazyArguments((llvm::Function *)Function);
            v56 = *v27;
LABEL_28:
            v57 = v56 + 40 * *(_QWORD *)(Function + 96) - 40;
            if (v55 == v57)
              goto LABEL_31;
            do
            {
              v114[0] = v55;
              llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>((uint64_t)&v116, v114);
              v55 += 40;
            }
            while (v55 != v57);
            if (a2)
LABEL_31:
              v58 = *((_QWORD *)a2 + 3);
            else
              v58 = 0;
            v115 = 257;
            v59 = (llvm::Value *)llvm::IRBuilderBase::CreateCall((uint64_t)&__p, v58, (uint64_t)a2, (uint64_t)v116, v117, (uint64_t)v114, 0);
            v60 = v30;
            llvm::MDTuple::getImpl();
            llvm::Instruction::setMetadata();
            v62 = llvm::BranchInst::Create(v105, 0, v61);
            v115 = 257;
            llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)&__p, v62, (uint64_t)v114);
            v122 = v32;
            v123 = (char *)v32 + 40;
            v64 = *((_QWORD *)this + 4);
            if ((*(_BYTE *)(*(_QWORD *)(v64 + 72) + 20) & 2) != 0)
            {
              v65 = MTLBoundsCheck::SharedPassData::getOrInsertReportBufferGV((llvm::Type ***)v64);
              v66 = *(llvm::Type **)(v65 + 24);
              v115 = 257;
              v67 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)&__p, v66, v65, 0, 0, (uint64_t)v114);
              v68 = MTLBoundsCheck::SharedPassData::getOrInsertDrawIDBufferGV(*((MTLBoundsCheck::SharedPassData **)this
                                                                              + 4));
              v69 = *(llvm::Type **)(v68 + 24);
              v115 = 257;
              v70 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)&__p, v69, v68, 0, 0, (uint64_t)v114);
              ImageIDFunction = MTLBoundsCheck::SharedPassData::getOrInsertGetImageIDFunction(*((MTLBoundsCheck::SharedPassData **)this
                                                                                              + 4));
              if (ImageIDFunction)
                v72 = *((_QWORD *)ImageIDFunction + 3);
              else
                v72 = 0;
              v115 = 257;
              v73 = (llvm::Value *)llvm::IRBuilderBase::CreateCall((uint64_t)&__p, v72, (uint64_t)ImageIDFunction, 0, 0, (uint64_t)v114, 0);
              v74 = *((_QWORD *)this + 4);
              if ((*(_BYTE *)(*(_QWORD *)(v74 + 72) + 21) & 2) != 0)
              {
                v78 = MTLBoundsCheck::SharedPassData::getOrInsertStackTraceGV((llvm::Type ***)v74);
                v79 = *(llvm::Type **)(v78 + 24);
                v115 = 257;
                v77 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)&__p, v79, v78, 0, 0, (uint64_t)v114);
              }
              else
              {
                Int8PtrTy = (llvm::ConstantPointerNull *)llvm::Type::getInt8PtrTy(*v4, 0);
                v77 = llvm::ConstantPointerNull::get(Int8PtrTy, v76);
              }
              v80 = (llvm::Value *)v77;
              if (v96)
              {
                llvm::ConstantInt::get();
                llvm::ConstantInt::get();
                v115 = 257;
                Select = llvm::IRBuilderBase::CreateSelect();
              }
              else
              {
                Select = llvm::ConstantInt::get();
              }
              v82 = (llvm::Value *)Select;
              v83 = (llvm::Value *)llvm::ConstantInt::get();
              v84 = (llvm::Value *)llvm::ConstantInt::get();
              MTLIRBuilder::CreateBadTextureCall((llvm::Constant **)&__p, v67, v70, v80, v73, v82, (llvm::Value *)(v98 + 40 * v97 - 40), v83, v84, v60);
            }
            v85 = llvm::BranchInst::Create(v105, 0, v63);
            v115 = 257;
            llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)&__p, v85, (uint64_t)v114);
            v122 = v105;
            v123 = (char *)v105 + 40;
            if (v99 == 7)
            {
              v88 = llvm::ReturnInst::Create(v124, 0, 0, v86);
            }
            else
            {
              v89 = **(llvm::Type ***)(v109 + 16);
              v115 = 257;
              PHI = (llvm::PHINode *)llvm::IRBuilderBase::CreatePHI((llvm::IRBuilderBase *)&__p, v89, 0, (const llvm::Twine *)v114, v87);
              llvm::PHINode::addIncoming(PHI, v59, v104);
              NullValue = (llvm::Value *)llvm::Constant::getNullValue(**(llvm::Constant ***)(v109 + 16), v91);
              llvm::PHINode::addIncoming(PHI, NullValue, v32);
              v88 = llvm::ReturnInst::Create(v124, PHI, 0, v93);
            }
            v115 = 257;
            llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)&__p, v88, (uint64_t)v114);
            if (v116 != v118)
              free(v116);
            llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v126);
            llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v125);
            if ((std::string::size_type *)__p.__r_.__value_.__l.__data_ != &__p.__r_.__value_.__r.__words[2])
              free(__p.__r_.__value_.__l.__data_);
            goto LABEL_51;
          }
        }
        else
        {
          v55 = *v27;
        }
        v56 = v55;
        goto LABEL_28;
      }
    }
    else
    {
      v27 = (uint64_t *)(Function + 88);
      v26 = *(llvm::Value ***)(Function + 88);
    }
    v98 = (uint64_t)v26;
    goto LABEL_18;
  }
LABEL_51:
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v111.__r_.__value_.__l.__data_);
  return Function;
}

void sub_241044F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a43 != a16)
    free(a43);
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder(&a53);
  if (a34 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t llvm::InstVisitor<NullTextureCheckPass::runOnModule(llvm::Module &)::OpVisitor,void>::visit<llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a2 != a3)
  {
    v4 = result;
    do
    {
      v5 = *(_QWORD *)(a2 + 8);
      v6 = a2 - 56;
      if (!a2)
        v6 = 0;
      v7 = v6 + 72;
      v8 = *(_QWORD *)(v6 + 80);
      if (v8 != v7)
      {
        do
        {
          v9 = *(_QWORD *)(v8 + 8);
          if (v8)
            v10 = v8 - 24;
          else
            v10 = 0;
          result = llvm::InstVisitor<NullTextureCheckPass::runOnModule(llvm::Module &)::OpVisitor,void>::visit(v4, v10);
          v8 = v9;
        }
        while (v9 != v7);
      }
      a2 = v5;
    }
    while (v5 != a3);
  }
  return result;
}

uint64_t llvm::InstVisitor<NullTextureCheckPass::runOnModule(llvm::Module &)::OpVisitor,void>::visit(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  llvm::Instruction *v6;

  v2 = a2 + 40;
  v3 = *(_QWORD *)(a2 + 48);
  if (v3 != a2 + 40)
  {
    v4 = result;
    do
    {
      v5 = *(_QWORD *)(v3 + 8);
      if (v3)
        v6 = (llvm::Instruction *)(v3 - 24);
      else
        v6 = 0;
      if (*((_BYTE *)v6 + 16) == 84)
        result = NullTextureCheckPass::TextureOpVisitor<NullTextureCheckPass::runOnModule(llvm::Module &)::OpVisitor>::visitCallInst(v4, v6);
      v3 = v5;
    }
    while (v5 != v2);
  }
  return result;
}

uint64_t NullTextureCheckPass::TextureOpVisitor<NullTextureCheckPass::runOnModule(llvm::Module &)::OpVisitor>::visitCallInst(uint64_t a1, llvm::Instruction *a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  BOOL v12;
  BOOL v13;
  char v14;
  BOOL v15;
  uint64_t v29;
  int v30;
  BOOL v31;
  BOOL v34;
  BOOL v37;
  BOOL v39;
  BOOL v42;
  BOOL v44;
  BOOL v45;
  BOOL v47;
  BOOL v48;
  BOOL v50;
  BOOL v53;
  BOOL v54;
  BOOL v56;

  result = *((_QWORD *)a2 - 4);
  if (!result)
    return result;
  if (*(_BYTE *)(result + 16))
    return result;
  if (*(_QWORD *)(result + 24) != *((_QWORD *)a2 + 9))
    return result;
  result = llvm::Value::getName((llvm::Value *)result);
  if (v5 < 0xE)
    return result;
  v6 = result;
  if (*(_QWORD *)result == 0x5F7465672E726961 && *(_QWORD *)(result + 6) == 0x5F68746469775F74)
    return NullTextureCheckPass::runOnModule(llvm::Module &)::OpVisitor::visitTextureOp(a1, v6, v5, a2);
  if (v5 < 0xF)
  {
    if ((*(_QWORD *)result != 0x5F7465672E726961 || *(_QWORD *)(result + 6) != 0x5F68747065645F74)
      && (*(_QWORD *)result != 0x646165722E726961 || *(_QWORD *)(result + 6) != 0x68747065645F6461))
    {
      return result;
    }
    return NullTextureCheckPass::runOnModule(llvm::Module &)::OpVisitor::visitTextureOp(a1, v6, v5, a2);
  }
  if (*(_QWORD *)result == 0x5F7465672E726961 && *(_QWORD *)(result + 7) == 0x5F7468676965685FLL)
    return NullTextureCheckPass::runOnModule(llvm::Module &)::OpVisitor::visitTextureOp(a1, v6, v5, a2);
  if (*(_QWORD *)result == 0x5F7465672E726961 && *(_QWORD *)(result + 6) == 0x5F68747065645F74)
    return NullTextureCheckPass::runOnModule(llvm::Module &)::OpVisitor::visitTextureOp(a1, v6, v5, a2);
  if (v5 < 0x13)
  {
    v12 = 1;
    v13 = 1;
    v14 = 1;
    v15 = 1;
    if (v5 < 0x10)
      goto LABEL_81;
    goto LABEL_76;
  }
  if (*(_QWORD *)result == 0x5F7465672E726961
    && *(_QWORD *)(result + 8) == 0x69735F7961727261
    && *(_QWORD *)(result + 11) == 0x5F657A69735F7961)
  {
    return NullTextureCheckPass::runOnModule(llvm::Module &)::OpVisitor::visitTextureOp(a1, v6, v5, a2);
  }
  v13 = v5 < 0x17;
  if (v5 >= 0x17)
  {
    if (*(_QWORD *)result == 0x5F7465672E726961
      && *(_QWORD *)(result + 8) == 0x5F70696D5F6D756ELL
      && *(_QWORD *)(result + 15) == 0x5F736C6576656C5FLL)
    {
      return NullTextureCheckPass::runOnModule(llvm::Module &)::OpVisitor::visitTextureOp(a1, v6, v5, a2);
    }
LABEL_49:
    if (*(_QWORD *)result == 0x5F7465672E726961
      && *(_QWORD *)(result + 8) == 0x706D61735F6D756ELL
      && *(_DWORD *)(result + 16) == 1601398124)
    {
      return NullTextureCheckPass::runOnModule(llvm::Module &)::OpVisitor::visitTextureOp(a1, v6, v5, a2);
    }
    v12 = v5 < 0x1A;
    if (v5 >= 0x1A)
    {
      if (*(_QWORD *)result == 0x5F7465672E726961
        && *(_QWORD *)(result + 8) == 0x5F6C656E6E616863
        && *(_QWORD *)(result + 16) == 0x7079745F61746164
        && *(_WORD *)(result + 24) == 24421)
      {
        return NullTextureCheckPass::runOnModule(llvm::Module &)::OpVisitor::visitTextureOp(a1, v6, v5, a2);
      }
    }
    else if (v5 < 0x16)
    {
      v12 = 1;
      goto LABEL_76;
    }
    if (*(_QWORD *)result == 0x5F7465672E726961
      && *(_QWORD *)(result + 8) == 0x5F6C656E6E616863
      && *(_QWORD *)(result + 14) == 0x5F726564726F5F6CLL)
    {
      return NullTextureCheckPass::runOnModule(llvm::Module &)::OpVisitor::visitTextureOp(a1, v6, v5, a2);
    }
    goto LABEL_76;
  }
  if (v5 >= 0x14)
    goto LABEL_49;
  v12 = 1;
  v13 = 1;
LABEL_76:
  if (*(_QWORD *)result == 0x646165722E726961 && *(_QWORD *)(result + 8) == 0x657275747865745FLL)
    return NullTextureCheckPass::runOnModule(llvm::Module &)::OpVisitor::visitTextureOp(a1, v6, v5, a2);
  v14 = 0;
  v15 = v5 < 0x13;
LABEL_81:
  if (*(_QWORD *)result == 0x646165722E726961 && *(_QWORD *)(result + 6) == 0x68747065645F6461)
    return NullTextureCheckPass::runOnModule(llvm::Module &)::OpVisitor::visitTextureOp(a1, v6, v5, a2);
  if (v5 >= 0x11)
  {
    v29 = *(_QWORD *)(result + 8);
    v30 = *(unsigned __int8 *)(result + 16);
    v31 = *(_QWORD *)v6 == 0x746972772E726961 && v29 == 0x7275747865745F65;
    if (v31 && v30 == 101)
      return NullTextureCheckPass::runOnModule(llvm::Module &)::OpVisitor::visitTextureOp(a1, v6, v5, a2);
  }
  result = 0x68747065645F6574;
  if (*(_QWORD *)v6 == 0x746972772E726961 && *(_QWORD *)(v6 + 7) == 0x68747065645F6574)
    return NullTextureCheckPass::runOnModule(llvm::Module &)::OpVisitor::visitTextureOp(a1, v6, v5, a2);
  if (v5 >= 0x12)
  {
    result = *(unsigned __int16 *)(v6 + 16);
    v34 = *(_QWORD *)v6 == 0x706D61732E726961 && *(_QWORD *)(v6 + 8) == 0x75747865745F656CLL;
    if (v34 && (_DWORD)result == 25970)
      return NullTextureCheckPass::runOnModule(llvm::Module &)::OpVisitor::visitTextureOp(a1, v6, v5, a2);
  }
  if ((v14 & 1) == 0)
  {
    result = 0x68747065645F656CLL;
    if (*(_QWORD *)v6 == 0x706D61732E726961 && *(_QWORD *)(v6 + 8) == 0x68747065645F656CLL)
      return NullTextureCheckPass::runOnModule(llvm::Module &)::OpVisitor::visitTextureOp(a1, v6, v5, a2);
  }
  if (!v15)
  {
    v37 = *(_QWORD *)v6 == 0x706D61732E726961 && *(_QWORD *)(v6 + 8) == 0x61706D6F635F656CLL;
    if (v37 && *(_QWORD *)(v6 + 11) == 0x5F657261706D6F63)
      return NullTextureCheckPass::runOnModule(llvm::Module &)::OpVisitor::visitTextureOp(a1, v6, v5, a2);
  }
  if (v5 >= 0x12)
  {
    result = *(unsigned __int16 *)(v6 + 16);
    v39 = *(_QWORD *)v6 == 0x687461672E726961 && *(_QWORD *)(v6 + 8) == 0x75747865745F7265;
    if (v39 && (_DWORD)result == 25970)
      return NullTextureCheckPass::runOnModule(llvm::Module &)::OpVisitor::visitTextureOp(a1, v6, v5, a2);
  }
  if ((v14 & 1) == 0 && *(_QWORD *)v6 == 0x687461672E726961 && *(_QWORD *)(v6 + 8) == 0x68747065645F7265)
    return NullTextureCheckPass::runOnModule(llvm::Module &)::OpVisitor::visitTextureOp(a1, v6, v5, a2);
  if (v5 >= 0x18)
  {
    result = 0x68747065645F6572;
    v42 = *(_QWORD *)v6 == 0x687461672E726961 && *(_QWORD *)(v6 + 8) == 0x61706D6F635F7265;
    if (v42 && *(_QWORD *)(v6 + 16) == 0x68747065645F6572)
      return NullTextureCheckPass::runOnModule(llvm::Module &)::OpVisitor::visitTextureOp(a1, v6, v5, a2);
  }
  if (!v12)
  {
    v44 = *(_QWORD *)v6 == 0x636C61632E726961 && *(_QWORD *)(v6 + 8) == 0x6C635F6574616C75;
    v45 = v44 && *(_QWORD *)(v6 + 16) == 0x6F6C5F6465706D61;
    if (v45 && *(_WORD *)(v6 + 24) == 24420)
      return NullTextureCheckPass::runOnModule(llvm::Module &)::OpVisitor::visitTextureOp(a1, v6, v5, a2);
  }
  if (v5 >= 0x1C)
  {
    v47 = *(_QWORD *)v6 == 0x636C61632E726961 && *(_QWORD *)(v6 + 8) == 0x6E755F6574616C75;
    v48 = v47 && *(_QWORD *)(v6 + 16) == 0x5F6465706D616C63;
    if (v48 && *(_DWORD *)(v6 + 24) == 1600417644)
      return NullTextureCheckPass::runOnModule(llvm::Module &)::OpVisitor::visitTextureOp(a1, v6, v5, a2);
  }
  if (v5 >= 0x11)
  {
    v50 = *(_QWORD *)v6 == 0x636E65662E726961 && *(_QWORD *)(v6 + 8) == 0x7275747865745F65;
    if (v50 && *(_BYTE *)(v6 + 16) == 101)
      return NullTextureCheckPass::runOnModule(llvm::Module &)::OpVisitor::visitTextureOp(a1, v6, v5, a2);
  }
  if (*(_QWORD *)v6 == 0x636E65662E726961 && *(_QWORD *)(v6 + 7) == 0x68747065645F6563)
    return NullTextureCheckPass::runOnModule(llvm::Module &)::OpVisitor::visitTextureOp(a1, v6, v5, a2);
  if (v5 >= 0x19)
  {
    v53 = *(_QWORD *)v6 == 0x5F7465672E726961 && *(_QWORD *)(v6 + 8) == 0x695F657571696E75;
    v54 = v53 && *(_QWORD *)(v6 + 16) == 0x7275747865745F64;
    if (v54 && *(_BYTE *)(v6 + 24) == 101)
      return NullTextureCheckPass::runOnModule(llvm::Module &)::OpVisitor::visitTextureOp(a1, v6, v5, a2);
  }
  if (!v13)
  {
    v56 = *(_QWORD *)v6 == 0x5F7465672E726961 && *(_QWORD *)(v6 + 8) == 0x695F657571696E75;
    if (v56 && *(_QWORD *)(v6 + 15) == 0x68747065645F6469)
      return NullTextureCheckPass::runOnModule(llvm::Module &)::OpVisitor::visitTextureOp(a1, v6, v5, a2);
  }
  return result;
}

uint64_t NullTextureCheckPass::runOnModule(llvm::Module &)::OpVisitor::visitTextureOp(uint64_t a1, int a2, int a3, llvm::Instruction *this)
{
  uint64_t result;
  uint64_t v7;
  llvm::Instruction *v8;

  if (!*(_DWORD *)(a1 + 8)
    || !*((_QWORD *)this + 6) && (*((_BYTE *)this + 23) & 0x20) == 0
    || (result = llvm::Instruction::getMetadataImpl(this)) == 0)
  {
    v7 = *(_QWORD *)a1;
    v8 = this;
    return llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<llvm::Metadata *>(v7, (uint64_t *)&v8);
  }
  return result;
}

std::string *std::string::append[abi:ne180100]<unsigned char const*,0>(std::string *this, char *a2, char *a3)
{
  char *v4;
  unint64_t v6;
  unint64_t v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string *v10;
  unint64_t v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  _BYTE *i;
  char v16;
  std::string::size_type v17;
  void *__p[2];
  unsigned __int8 v20;

  v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v11 = this->__r_.__value_.__r.__words[2];
    v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 22;
    v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    }
    v14 = this;
    if ((v6 & 0x80) != 0)
      v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    for (i = (char *)v14 + size; v4 != a3; ++i)
    {
      v16 = *v4++;
      *i = v16;
    }
    *i = 0;
    v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      this->__r_.__value_.__l.__size_ = v17;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
  }
  else
  {
    std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    if ((v20 & 0x80u) == 0)
      v13 = v20;
    else
      v13 = (std::string::size_type)__p[1];
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0)
      operator delete(__p[0]);
  }
  return this;
}

void sub_2410459AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t getOrInsertFunction<std::string const&,llvm::FunctionType *&,llvm::AttributeList>()
{
  uint64_t v0;
  uint64_t result;

  llvm::Module::getOrInsertFunction();
  result = v0;
  if (*(_BYTE *)(v0 + 16) == 5)
    return *(_QWORD *)(v0 - 32 * (*(_DWORD *)(v0 + 20) & 0x7FFFFFF));
  return result;
}

void StitchingReflection::initializeMetadataTypeMapMap(StitchingReflection *this)
{
  uint64_t v1;
  uint64_t v2;
  std::string __p;
  std::string v4;
  std::string v5;
  std::string v6;
  std::string v7;
  std::string v8;
  std::string v9;
  std::string v10;
  std::string v11;
  std::string v12;
  std::string v13;
  std::string v14;
  std::string v15;
  std::string v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  std::string v21;
  std::string v22;
  std::string v23;
  std::string v24;
  std::string v25;
  std::string v26;
  std::string v27;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::string v35;
  std::string v36;
  std::string v37;
  std::string v38;
  std::string v39;
  std::string v40;
  std::string v41;
  std::string v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;
  std::string v53;
  std::string v54;
  std::string v55;
  std::string v56;
  std::string v57;
  std::string v58;
  std::string v59;
  std::string v60;
  std::string v61;
  std::string v62;
  std::string v63;
  std::string v64;
  std::string v65;
  std::string v66;
  std::string v67;
  std::string v68;
  std::string v69;
  std::string v70;
  std::string v71;
  std::string v72;
  std::string v73;
  std::string v74;
  std::string v75;
  std::string v76;
  std::string v77;
  std::string __s;
  std::string __str;
  __int128 v80;
  char v81;
  std::string v82;
  __int128 v83;
  char v84;
  std::string v85;
  __int128 v86;
  char v87;
  std::string v88;
  __int128 v89;
  char v90;
  std::string v91;
  __int128 v92;
  char v93;
  std::string v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  std::string v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  std::string v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  std::string v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  std::string v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  std::string v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  std::string v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  std::string v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  std::string v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  std::string v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  std::string v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  std::string v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  std::string v142;
  uint64_t v143;
  uint64_t v144;
  char v145;
  std::string v146;
  uint64_t v147;
  uint64_t v148;
  char v149;
  std::string v150;
  uint64_t v151;
  uint64_t v152;
  char v153;
  std::string v154;
  uint64_t v155;
  uint64_t v156;
  char v157;
  std::string v158;
  uint64_t v159;
  uint64_t v160;
  char v161;
  std::string v162;
  uint64_t v163;
  uint64_t v164;
  char v165;
  std::string v166;
  uint64_t v167;
  uint64_t v168;
  char v169;
  std::string v170;
  uint64_t v171;
  uint64_t v172;
  char v173;
  std::string v174;
  uint64_t v175;
  uint64_t v176;
  char v177;
  std::string v178;
  uint64_t v179;
  uint64_t v180;
  char v181;
  std::string v182;
  uint64_t v183;
  uint64_t v184;
  char v185;
  std::string v186;
  uint64_t v187;
  uint64_t v188;
  char v189;
  std::string v190;
  uint64_t v191;
  uint64_t v192;
  char v193;
  std::string v194;
  uint64_t v195;
  uint64_t v196;
  char v197;
  std::string v198;
  uint64_t v199;
  uint64_t v200;
  char v201;
  std::string v202;
  uint64_t v203;
  uint64_t v204;
  char v205;
  std::string v206;
  uint64_t v207;
  uint64_t v208;
  char v209;
  std::string v210;
  uint64_t v211;
  uint64_t v212;
  char v213;
  std::string v214;
  uint64_t v215;
  uint64_t v216;
  char v217;
  std::string v218;
  uint64_t v219;
  uint64_t v220;
  char v221;
  std::string v222;
  uint64_t v223;
  uint64_t v224;
  char v225;
  std::string v226;
  uint64_t v227;
  uint64_t v228;
  char v229;
  std::string v230;
  uint64_t v231;
  uint64_t v232;
  char v233;
  std::string v234;
  uint64_t v235;
  uint64_t v236;
  char v237;
  std::string v238;
  uint64_t v239;
  uint64_t v240;
  char v241;
  std::string v242;
  uint64_t v243;
  uint64_t v244;
  char v245;
  std::string v246;
  uint64_t v247;
  uint64_t v248;
  char v249;
  std::string v250;
  uint64_t v251;
  uint64_t v252;
  char v253;
  std::string v254;
  uint64_t v255;
  uint64_t v256;
  char v257;
  std::string v258;
  uint64_t v259;
  uint64_t v260;
  char v261;
  std::string v262;
  uint64_t v263;
  uint64_t v264;
  char v265;
  std::string v266;
  uint64_t v267;
  uint64_t v268;
  char v269;
  std::string v270;
  uint64_t v271;
  uint64_t v272;
  char v273;
  std::string v274;
  uint64_t v275;
  uint64_t v276;
  char v277;
  std::string v278;
  uint64_t v279;
  uint64_t v280;
  char v281;
  std::string v282;
  uint64_t v283;
  uint64_t v284;
  char v285;
  std::string v286;
  uint64_t v287;
  uint64_t v288;
  char v289;
  std::string v290;
  uint64_t v291;
  uint64_t v292;
  char v293;
  std::string v294;
  uint64_t v295;
  uint64_t v296;
  char v297;
  std::string v298;
  uint64_t v299;
  uint64_t v300;
  char v301;
  std::string v302;
  uint64_t v303;
  uint64_t v304;
  char v305;
  std::string v306;
  uint64_t v307;
  uint64_t v308;
  char v309;
  std::string v310;
  uint64_t v311;
  uint64_t v312;
  char v313;
  std::string v314;
  uint64_t v315;
  uint64_t v316;
  char v317;
  std::string v318;
  uint64_t v319;
  uint64_t v320;
  char v321;
  std::string v322;
  uint64_t v323;
  uint64_t v324;
  char v325;
  std::string v326;
  uint64_t v327;
  uint64_t v328;
  char v329;
  std::string v330;
  uint64_t v331;
  uint64_t v332;
  char v333;
  std::string v334;
  uint64_t v335;
  uint64_t v336;
  char v337;
  std::string v338;
  uint64_t v339;
  uint64_t v340;
  char v341;
  std::string v342;
  uint64_t v343;
  uint64_t v344;
  char v345;
  std::string v346;
  uint64_t v347;
  uint64_t v348;
  char v349;
  std::string v350;
  uint64_t v351;
  uint64_t v352;
  char v353;
  std::string v354;
  uint64_t v355;
  uint64_t v356;
  char v357;
  std::string v358;
  uint64_t v359;
  uint64_t v360;
  char v361;
  std::string v362;
  uint64_t v363;
  uint64_t v364;
  char v365;
  std::string v366;
  uint64_t v367;
  uint64_t v368;
  char v369;
  std::string v370;
  uint64_t v371;
  uint64_t v372;
  char v373;
  std::string v374;
  uint64_t v375;
  uint64_t v376;
  char v377;
  std::string v378;

  v1 = MEMORY[0x24BDAC7A8](this);
  v378.__r_.__value_.__l.__size_ = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&__s, "air.void_type");
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__str, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    __str = __s;
  v80 = xmmword_24105AF60;
  v81 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v77, "air.BOOL_type");
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v82, v77.__r_.__value_.__l.__data_, v77.__r_.__value_.__l.__size_);
  else
    v82 = v77;
  v83 = xmmword_24105AF70;
  v84 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v76, "air.char_type");
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v85, v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_);
  else
    v85 = v76;
  v86 = xmmword_24105AF80;
  v87 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v75, "air.uchar_type");
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v88, v75.__r_.__value_.__l.__data_, v75.__r_.__value_.__l.__size_);
  else
    v88 = v75;
  v89 = xmmword_24105AF90;
  v90 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v74, "air.short_type");
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v91, v74.__r_.__value_.__l.__data_, v74.__r_.__value_.__l.__size_);
  else
    v91 = v74;
  v92 = xmmword_24105AFA0;
  v93 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v73, "air.ushort_type");
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v94, v73.__r_.__value_.__l.__data_, v73.__r_.__value_.__l.__size_);
  else
    v94 = v73;
  v95 = 41;
  v96 = 0;
  v97 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v72, "air.int_type");
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v98, v72.__r_.__value_.__l.__data_, v72.__r_.__value_.__l.__size_);
  else
    v98 = v72;
  v99 = 29;
  v100 = 0;
  v101 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v71, "air.uint_type");
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v102, v71.__r_.__value_.__l.__data_, v71.__r_.__value_.__l.__size_);
  else
    v102 = v71;
  v103 = 33;
  v104 = 0;
  v105 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v70, "air.long_type");
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v106, v70.__r_.__value_.__l.__data_, v70.__r_.__value_.__l.__size_);
  else
    v106 = v70;
  v107 = 81;
  v108 = 0;
  v109 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v69, "air.ulong_type");
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v110, v69.__r_.__value_.__l.__data_, v69.__r_.__value_.__l.__size_);
  else
    v110 = v69;
  v111 = 85;
  v112 = 0;
  v113 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v68, "air.half_type");
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v114, v68.__r_.__value_.__l.__data_, v68.__r_.__value_.__l.__size_);
  else
    v114 = v68;
  v115 = 16;
  v116 = 0;
  v117 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v67, "air.float_type");
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v118, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
  else
    v118 = v67;
  v119 = 3;
  v120 = 0;
  v121 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v66, "air.double_type");
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v122, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
  else
    v122 = v66;
  v123 = 89;
  v124 = 0;
  v125 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v65, "air.bfloat_type");
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v126, v65.__r_.__value_.__l.__data_, v65.__r_.__value_.__l.__size_);
  else
    v126 = v65;
  v127 = 121;
  v128 = 0;
  v129 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v64, "air.matrix_type");
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v130, v64.__r_.__value_.__l.__data_, v64.__r_.__value_.__l.__size_);
  else
    v130 = v64;
  v131 = 136;
  v132 = 0;
  v133 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v63, "air.pointer_type");
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v134, v63.__r_.__value_.__l.__data_, v63.__r_.__value_.__l.__size_);
  else
    v134 = v63;
  v135 = 60;
  v136 = 0;
  v137 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v62, "air.lvalue_reference_type");
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v138, v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
  else
    v138 = v62;
  v139 = 60;
  v140 = 0;
  v141 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v61, "air.rvalue_reference_type");
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v142, v61.__r_.__value_.__l.__data_, v61.__r_.__value_.__l.__size_);
  else
    v142 = v61;
  v143 = 60;
  v144 = 0;
  v145 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v60, "air.array_type");
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v146, v60.__r_.__value_.__l.__data_, v60.__r_.__value_.__l.__size_);
  else
    v146 = v60;
  v147 = 2;
  v148 = 0;
  v149 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v59, "air.struct_type");
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v150, v59.__r_.__value_.__l.__data_, v59.__r_.__value_.__l.__size_);
  else
    v150 = v59;
  v151 = 1;
  v152 = 0;
  v153 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v58, "air.sampler_type");
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v154, v58.__r_.__value_.__l.__data_, v58.__r_.__value_.__l.__size_);
  else
    v154 = v58;
  v155 = 59;
  v156 = 0;
  v157 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v57, "air.instance_acceleration_structure_type");
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v158, v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
  else
    v158 = v57;
  v159 = 118;
  v160 = 0;
  v161 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v56, "air.primitive_acceleration_structure_type");
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v162, v56.__r_.__value_.__l.__data_, v56.__r_.__value_.__l.__size_);
  else
    v162 = v56;
  v163 = 117;
  v164 = 0;
  v165 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v55, "air.texture_1d_type");
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v166, v55.__r_.__value_.__l.__data_, v55.__r_.__value_.__l.__size_);
  else
    v166 = v55;
  v167 = 58;
  v168 = 0;
  v169 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v54, "air.texture_1d_array_type");
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v170, v54.__r_.__value_.__l.__data_, v54.__r_.__value_.__l.__size_);
  else
    v170 = v54;
  v171 = 58;
  v172 = 1;
  v173 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v53, "air.texture_2d_type");
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v174, v53.__r_.__value_.__l.__data_, v53.__r_.__value_.__l.__size_);
  else
    v174 = v53;
  v175 = 58;
  v176 = 2;
  v177 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v52, "air.texture_2d_array_type");
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v178, v52.__r_.__value_.__l.__data_, v52.__r_.__value_.__l.__size_);
  else
    v178 = v52;
  v179 = 58;
  v180 = 3;
  v181 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v51, "air.texture_3d_type");
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v182, v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
  else
    v182 = v51;
  v183 = 58;
  v184 = 7;
  v185 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v50, "air.texture_cube_type");
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v186, v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_);
  else
    v186 = v50;
  v187 = 58;
  v188 = 5;
  v189 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v49, "air.texture_cube_array_type");
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v190, v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
  else
    v190 = v49;
  v191 = 58;
  v192 = 6;
  v193 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v48, "air.texture_2d_ms_type");
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v194, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
  else
    v194 = v48;
  v195 = 58;
  v196 = 4;
  v197 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v47, "air.texture_2d_ms_array_type");
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v198, v47.__r_.__value_.__l.__data_, v47.__r_.__value_.__l.__size_);
  else
    v198 = v47;
  v199 = 58;
  v200 = 8;
  v201 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v46, "air.texture_buffer_1d_type");
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v202, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
  else
    v202 = v46;
  v203 = 58;
  v204 = 9;
  v205 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v45, "air.depth_2d_type");
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v206, v45.__r_.__value_.__l.__data_, v45.__r_.__value_.__l.__size_);
  else
    v206 = v45;
  v207 = 58;
  v208 = 2;
  v209 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v44, "air.depth_2d_array_type");
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v210, v44.__r_.__value_.__l.__data_, v44.__r_.__value_.__l.__size_);
  else
    v210 = v44;
  v211 = 58;
  v212 = 3;
  v213 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v43, "air.depth_cube_type");
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v214, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
  else
    v214 = v43;
  v215 = 58;
  v216 = 5;
  v217 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v42, "air.depth_cube_array_type");
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v218, v42.__r_.__value_.__l.__data_, v42.__r_.__value_.__l.__size_);
  else
    v218 = v42;
  v219 = 58;
  v220 = 6;
  v221 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v41, "air.depth_2d_ms_type");
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v222, v41.__r_.__value_.__l.__data_, v41.__r_.__value_.__l.__size_);
  else
    v222 = v41;
  v223 = 58;
  v224 = 4;
  v225 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v40, "air.depth_2d_ms_array_type");
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v226, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
  else
    v226 = v40;
  v227 = 58;
  v228 = 8;
  v229 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v39, "air.r8unorm_type");
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v230, v39.__r_.__value_.__l.__data_, v39.__r_.__value_.__l.__size_);
  else
    v230 = v39;
  v231 = 62;
  v232 = 0;
  v233 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v38, "air.r8snorm_type");
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v234, v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
  else
    v234 = v38;
  v235 = 63;
  v236 = 0;
  v237 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v37, "air.r16unorm_type");
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v238, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
  else
    v238 = v37;
  v239 = 64;
  v240 = 0;
  v241 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v36, "air.r16snorm_type");
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v242, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
  else
    v242 = v36;
  v243 = 65;
  v244 = 0;
  v245 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v35, "air.rg8unorm_type");
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v246, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
  else
    v246 = v35;
  v247 = 66;
  v248 = 0;
  v249 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v34, "air.rg8snorm_type");
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v250, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
  else
    v250 = v34;
  v251 = 67;
  v252 = 0;
  v253 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v33, "air.rg16unorm_type");
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v254, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
  else
    v254 = v33;
  v255 = 68;
  v256 = 0;
  v257 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v32, "air.rg16snorm_type");
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v258, v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
  else
    v258 = v32;
  v259 = 69;
  v260 = 0;
  v261 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v31, "air.rgba8unorm_type");
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v262, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
  else
    v262 = v31;
  v263 = 70;
  v264 = 0;
  v265 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v30, "air.rgba8snorm_type");
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v266, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
  else
    v266 = v30;
  v267 = 72;
  v268 = 0;
  v269 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v29, "air.rgba16unorm_type");
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v270, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
  else
    v270 = v29;
  v271 = 73;
  v272 = 0;
  v273 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v28, "air.rgba16snorm_type");
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v274, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
  else
    v274 = v28;
  v275 = 74;
  v276 = 0;
  v277 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v27, "air.srgba8unorm_type");
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v278, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
  else
    v278 = v27;
  v279 = 71;
  v280 = 0;
  v281 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v26, "air.rgb10a2_type");
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v282, v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
  else
    v282 = v26;
  v283 = 75;
  v284 = 0;
  v285 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v25, "air.rg11b10f_type");
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v286, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
  else
    v286 = v25;
  v287 = 92;
  v288 = 0;
  v289 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v24, "air.rgb9e5_type");
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v290, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
  else
    v290 = v24;
  v291 = 77;
  v292 = 0;
  v293 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v23, "air.visible_function_table_type");
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v294, v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
  else
    v294 = v23;
  v295 = 115;
  v296 = 0;
  v297 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v22, "air.intersection_function_table_type");
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v298, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
  else
    v298 = v22;
  v299 = 116;
  v300 = 0;
  v301 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v21, "air.vector_type");
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v302, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
  else
    v302 = v21;
  v303 = 137;
  v304 = 0;
  v305 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v20, "air.packed_vector_type");
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v306, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
  else
    v306 = v20;
  v307 = 137;
  v308 = 0;
  v309 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v19, "air.imageblock_type");
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v310, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
  else
    v310 = v19;
  v311 = 138;
  v312 = 0;
  v313 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v18, "air.opaque_type");
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v314, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
  else
    v314 = v18;
  v316 = 0;
  v315 = 0;
  v317 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v17, "air.llong_type");
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v318, v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
  else
    v318 = v17;
  v320 = 0;
  v319 = 0;
  v321 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v16, "air.ullong_type");
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v322, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
  else
    v322 = v16;
  v324 = 0;
  v323 = 0;
  v325 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v15, "air.function_type");
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v326, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
  else
    v326 = v15;
  v328 = 0;
  v327 = 0;
  v329 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v14, "air.enum_type");
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v330, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
  else
    v330 = v14;
  v332 = 0;
  v331 = 0;
  v333 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v13, "air.union_type");
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v334, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
  else
    v334 = v13;
  v336 = 0;
  v335 = 0;
  v337 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v12, "air.command_buffer_type");
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v338, v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
  else
    v338 = v12;
  v340 = 0;
  v339 = 0;
  v341 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v11, "air.compute_pipeline_state_type");
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v342, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
  else
    v342 = v11;
  v344 = 0;
  v343 = 0;
  v345 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v10, "air.render_pipeline_state_type");
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v346, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
  else
    v346 = v10;
  v348 = 0;
  v347 = 0;
  v349 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v9, "air.mesh_grid_properties_type");
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v350, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
  else
    v350 = v9;
  v352 = 0;
  v351 = 0;
  v353 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v8, "air.patch_control_point_type");
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v354, v8.__r_.__value_.__l.__data_, v8.__r_.__value_.__l.__size_);
  else
    v354 = v8;
  v356 = 0;
  v355 = 0;
  v357 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v7, "air.interpolant_type");
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v358, v7.__r_.__value_.__l.__data_, v7.__r_.__value_.__l.__size_);
  else
    v358 = v7;
  v360 = 0;
  v359 = 0;
  v361 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v6, "air.bounds_checked_buffer_type");
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v362, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  else
    v362 = v6;
  v364 = 0;
  v363 = 0;
  v365 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v5, "air.mesh_type");
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v366, v5.__r_.__value_.__l.__data_, v5.__r_.__value_.__l.__size_);
  else
    v366 = v5;
  v368 = 0;
  v367 = 0;
  v369 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v4, "air.array_of_type");
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v370, v4.__r_.__value_.__l.__data_, v4.__r_.__value_.__l.__size_);
  else
    v370 = v4;
  v372 = 0;
  v371 = 0;
  v373 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "air.array_ref_of_type");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v374, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v374 = __p;
  v376 = 0;
  v375 = 0;
  v377 = 0;
  std::__hash_table<std::__hash_value_type<std::string,std::pair<MTLDataType,std::pair<MTLTextureType,BOOL>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<MTLDataType,std::pair<MTLTextureType,BOOL>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<MTLDataType,std::pair<MTLTextureType,BOOL>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<MTLDataType,std::pair<MTLTextureType,BOOL>>>>>::__assign_unique<std::pair<std::string const,std::pair<MTLDataType,std::pair<MTLTextureType,BOOL>>> const*>((_QWORD *)(v1 + 312), &__str, &v378);
  v2 = 456;
  do
  {
    if (SHIBYTE(v77.__r_.__value_.__r.__words[v2 + 2]) < 0)
      operator delete(*(void **)((char *)&v77.__r_.__value_.__l.__data_ + v2 * 8));
    v2 -= 6;
  }
  while (v2 * 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v65.__r_.__value_.__l.__data_);
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v66.__r_.__value_.__l.__data_);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v68.__r_.__value_.__l.__data_);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v69.__r_.__value_.__l.__data_);
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v70.__r_.__value_.__l.__data_);
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v71.__r_.__value_.__l.__data_);
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v72.__r_.__value_.__l.__data_);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v74.__r_.__value_.__l.__data_);
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v75.__r_.__value_.__l.__data_);
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v76.__r_.__value_.__l.__data_);
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v77.__r_.__value_.__l.__data_);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
}

void sub_24104783C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,void *a63)
{
  char a68;
  void *a69;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  void *a77;
  char a78;
  void *a79;
  char a80;
  void *a81;
  char a82;
  void *a83;
  char a84;
  void *a85;
  char a86;
  void *a87;
  char a88;
  void *a89;
  char a90;
  void *a91;
  char a92;
  void *a93;
  unint64_t *v93;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  if (a38 < 0)
    operator delete(a33);
  if (a44 < 0)
    operator delete(a39);
  if (a50 < 0)
    operator delete(a45);
  if (a56 < 0)
    operator delete(a51);
  if (a62 < 0)
    operator delete(a57);
  if (a68 < 0)
    operator delete(a63);
  if (a72 < 0)
    operator delete(a69);
  if (a74 < 0)
    operator delete(a73);
  if (a76 < 0)
    operator delete(a75);
  if (a78 < 0)
    operator delete(a77);
  if (a80 < 0)
    operator delete(a79);
  if (a82 < 0)
    operator delete(a81);
  if (a84 < 0)
    operator delete(a83);
  if (a86 < 0)
    operator delete(a85);
  if (a88 < 0)
    operator delete(a87);
  if (a90 < 0)
    operator delete(a89);
  if (a92 < 0)
    operator delete(a91);
  if (SLOBYTE(STACK[0x20F]) < 0)
    operator delete(a93);
  if (SLOBYTE(STACK[0x227]) < 0)
    operator delete((void *)STACK[0x210]);
  if (SLOBYTE(STACK[0x23F]) < 0)
    operator delete((void *)STACK[0x228]);
  if (SLOBYTE(STACK[0x257]) < 0)
    operator delete((void *)STACK[0x240]);
  if (SLOBYTE(STACK[0x26F]) < 0)
    operator delete((void *)STACK[0x258]);
  if (SLOBYTE(STACK[0x287]) < 0)
    operator delete((void *)STACK[0x270]);
  if (SLOBYTE(STACK[0x29F]) < 0)
    operator delete((void *)STACK[0x288]);
  if (SLOBYTE(STACK[0x2B7]) < 0)
    operator delete((void *)STACK[0x2A0]);
  if (SLOBYTE(STACK[0x2CF]) < 0)
    operator delete((void *)STACK[0x2B8]);
  if (SLOBYTE(STACK[0x2E7]) < 0)
    operator delete((void *)STACK[0x2D0]);
  if (SLOBYTE(STACK[0x2FF]) < 0)
    operator delete((void *)STACK[0x2E8]);
  if (SLOBYTE(STACK[0x317]) < 0)
    operator delete((void *)STACK[0x300]);
  if (SLOBYTE(STACK[0x32F]) < 0)
    operator delete((void *)STACK[0x318]);
  if (SLOBYTE(STACK[0x347]) < 0)
    operator delete((void *)STACK[0x330]);
  if (SLOBYTE(STACK[0x35F]) < 0)
    operator delete((void *)STACK[0x348]);
  if (SLOBYTE(STACK[0x377]) < 0)
    operator delete((void *)STACK[0x360]);
  if (SLOBYTE(STACK[0x38F]) < 0)
    operator delete((void *)STACK[0x378]);
  if (SLOBYTE(STACK[0x3A7]) < 0)
    operator delete((void *)STACK[0x390]);
  if (SLOBYTE(STACK[0x3BF]) < 0)
    operator delete((void *)STACK[0x3A8]);
  if (SLOBYTE(STACK[0x3D7]) < 0)
    operator delete((void *)STACK[0x3C0]);
  if (SLOBYTE(STACK[0x3EF]) < 0)
    operator delete((void *)STACK[0x3D8]);
  if (SLOBYTE(STACK[0x407]) < 0)
    operator delete((void *)STACK[0x3F0]);
  if (SLOBYTE(STACK[0x41F]) < 0)
    operator delete((void *)STACK[0x408]);
  if (SLOBYTE(STACK[0x437]) < 0)
    operator delete((void *)STACK[0x420]);
  if (SLOBYTE(STACK[0x44F]) < 0)
    operator delete((void *)STACK[0x438]);
  if (SLOBYTE(STACK[0x467]) < 0)
    operator delete((void *)STACK[0x450]);
  if (SLOBYTE(STACK[0x47F]) < 0)
    operator delete((void *)STACK[0x468]);
  if (SLOBYTE(STACK[0x497]) < 0)
    operator delete((void *)STACK[0x480]);
  if (SLOBYTE(STACK[0x4AF]) < 0)
    operator delete((void *)STACK[0x498]);
  if (SLOBYTE(STACK[0x4C7]) < 0)
    operator delete((void *)STACK[0x4B0]);
  if (SLOBYTE(STACK[0x4DF]) < 0)
    operator delete((void *)STACK[0x4C8]);
  if (SLOBYTE(STACK[0x4F7]) < 0)
    operator delete((void *)STACK[0x4E0]);
  if (SLOBYTE(STACK[0x50F]) < 0)
    operator delete((void *)STACK[0x4F8]);
  if (SLOBYTE(STACK[0x527]) < 0)
    operator delete((void *)STACK[0x510]);
  if (SLOBYTE(STACK[0x53F]) < 0)
    operator delete((void *)STACK[0x528]);
  if (SLOBYTE(STACK[0x557]) < 0)
    operator delete((void *)STACK[0x540]);
  if (SLOBYTE(STACK[0x56F]) < 0)
    operator delete((void *)STACK[0x558]);
  if (SLOBYTE(STACK[0x587]) < 0)
    operator delete((void *)STACK[0x570]);
  if (SLOBYTE(STACK[0x59F]) < 0)
    operator delete((void *)STACK[0x588]);
  if (SLOBYTE(STACK[0x5B7]) < 0)
    operator delete((void *)STACK[0x5A0]);
  if (SLOBYTE(STACK[0x5CF]) < 0)
    operator delete((void *)STACK[0x5B8]);
  if (SLOBYTE(STACK[0x5E7]) < 0)
    operator delete((void *)STACK[0x5D0]);
  if (SLOBYTE(STACK[0x5FF]) < 0)
    operator delete((void *)STACK[0x5E8]);
  if (SLOBYTE(STACK[0x617]) < 0)
    operator delete((void *)STACK[0x600]);
  if (SLOBYTE(STACK[0x62F]) < 0)
    operator delete((void *)STACK[0x618]);
  if (SLOBYTE(STACK[0x647]) < 0)
    operator delete((void *)STACK[0x630]);
  if (SLOBYTE(STACK[0x65F]) < 0)
    operator delete((void *)STACK[0x648]);
  if (SLOBYTE(STACK[0x677]) < 0)
    operator delete((void *)STACK[0x660]);
  if (SLOBYTE(STACK[0x68F]) < 0)
    operator delete((void *)STACK[0x678]);
  if (SLOBYTE(STACK[0x6A7]) < 0)
    operator delete((void *)STACK[0x690]);
  if (SLOBYTE(STACK[0x6BF]) < 0)
    operator delete((void *)STACK[0x6A8]);
  if (SLOBYTE(STACK[0x6D7]) < 0)
    operator delete((void *)STACK[0x6C0]);
  if (SLOBYTE(STACK[0x6EF]) < 0)
    operator delete((void *)STACK[0x6D8]);
  if (SLOBYTE(STACK[0x707]) < 0)
    operator delete((void *)STACK[0x6F0]);
  if (SLOBYTE(STACK[0x71F]) < 0)
    operator delete((void *)STACK[0x708]);
  for (; v93 != &STACK[0x720]; v93 -= 6)
  {
    if (*((char *)v93 - 25) < 0)
      operator delete((void *)*(v93 - 6));
  }
  _Unwind_Resume(a1);
}

void sub_241048218()
{
  JUMPOUT(0x241047EB8);
}

void sub_241048224()
{
  JUMPOUT(0x241047EF8);
}

uint64_t StitchingReflection::StitchingReflection(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  uint64_t *v10;
  __int128 v11;
  unint64_t v12;
  unint64_t i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _OWORD v30[3];
  __int128 *v31;
  __int128 *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  uint64_t *v41;
  _BYTE v42[56];
  __int128 v43;
  __int128 v44;
  __int128 **v45;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  MTLArgumentData::MTLArgumentData((MTLArgumentData *)(a1 + 24));
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_DWORD *)(a1 + 344) = 1065353216;
  StitchingReflection::initializeMetadataTypeMapMap((StitchingReflection *)a1);
  *(_QWORD *)(a1 + 40) = &unk_24105C402;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 24) & 0xFFFFFE0F | 0x140;
  v4 = a2 - 8 * *(unsigned int *)(a2 + 8);
  v5 = *(_BYTE **)(v4 + 8);
  if (v5 && ((v6 = llvm::MDNode::classof(v5), (v7 = *(_QWORD *)(v4 + 8)) != 0) ? (v8 = v6) : (v8 = 0), v8 == 1))
  {
    StitchingReflection::getReflectionFromStitchingMetadata(a1, *(_QWORD *)(v7 - 8 * *(unsigned int *)(v7 + 8) + 8), 0, (uint64_t)&v33);
    v9 = v34;
    *(_OWORD *)(a1 + 264) = v33;
    *(_OWORD *)(a1 + 280) = v9;
    *(_OWORD *)(a1 + 296) = v35;
    v10 = *(uint64_t **)(a1 + 184);
    if (v10 != (uint64_t *)&v36)
      std::vector<MTLStructMemberInfo>::__assign_with_size[abi:ne180100]<MTLStructMemberInfo*,MTLStructMemberInfo*>(v10, (__int128 *)v36, *((__int128 **)&v36 + 1), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)&v36 + 1) - v36) >> 4));
    *(_QWORD *)&v30[0] = &v36;
  }
  else
  {
    v33 = 0u;
    v34 = 0u;
    v37 = 0;
    v35 = 0u;
    v36 = 0u;
    LODWORD(v33) = 61;
    v11 = v33;
    *(_OWORD *)(a1 + 280) = 0u;
    *(_OWORD *)(a1 + 296) = 0u;
    *(_OWORD *)(a1 + 264) = v11;
    *(_QWORD *)&v30[0] = &v36;
  }
  std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v30);
  v12 = *(unsigned int *)(a2 + 8);
  if (v12 >= 3)
  {
    for (i = 2; i < v12; ++i)
    {
      v14 = *(_QWORD *)(a2 - 8 * v12 + 8 * i);
      MTLArgumentData::MTLArgumentData((MTLArgumentData *)&v33);
      v15 = *(unsigned int *)(v14 + 8);
      if (v15 >= 3)
      {
        *(_QWORD *)&v34 = llvm::MDString::getString(*(llvm::MDString **)(v14 - 8 * v15 + 16));
        *((_QWORD *)&v34 + 1) = v16;
        v15 = *(unsigned int *)(v14 + 8);
      }
      LODWORD(v33) = v33 & 0xFFFFFE0F | 0x140;
      v17 = *(_QWORD *)(v14 - 8 * v15 + 8);
      llvm::MDString::getString(*(llvm::MDString **)(v17 - 8 * *(unsigned int *)(v17 + 8)));
      StitchingReflection::getReflectionFromStitchingMetadata(a1, *(_QWORD *)(v17 - 8 * *(unsigned int *)(v17 + 8) + 8), 0, (uint64_t)v30);
      *(_OWORD *)&v42[40] = v30[0];
      v43 = v30[1];
      v44 = v30[2];
      if (v41 != (uint64_t *)&v31)
        std::vector<MTLStructMemberInfo>::__assign_with_size[abi:ne180100]<MTLStructMemberInfo*,MTLStructMemberInfo*>(v41, v31, v32, 0x2E8BA2E8BA2E8BA3 * (v32 - v31));
      v18 = *(_QWORD *)(a1 + 8);
      if (v18 >= *(_QWORD *)(a1 + 16))
      {
        v19 = std::vector<MTLArgumentData>::__push_back_slow_path<MTLArgumentData const&>((uint64_t *)a1, &v33);
      }
      else
      {
        std::allocator<MTLArgumentData>::construct[abi:ne180100]<MTLArgumentData,MTLArgumentData const&>(a1 + 16, *(_QWORD *)(a1 + 8), &v33);
        v19 = v18 + 288;
        *(_QWORD *)(a1 + 8) = v18 + 288;
      }
      *(_QWORD *)(a1 + 8) = v19;
      v45 = &v31;
      std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
      *(_QWORD *)&v30[0] = v42;
      std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v30);
      v20 = v40;
      if (v40)
      {
        p_shared_owners = (unint64_t *)&v40->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v23 = v39;
      if (v39)
      {
        v24 = (unint64_t *)&v39->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v26 = v38;
      if (v38)
      {
        v27 = (unint64_t *)&v38->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v12 = *(unsigned int *)(a2 + 8);
    }
  }
  return a1;
}

void sub_241048588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, MTLArgumentData *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::__hash_table<std::__hash_value_type<std::string,MTLCompilerDataType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLCompilerDataType>>>::~__hash_table(a10);
  MTLArgumentData::~MTLArgumentData(a11);
  std::vector<MTLArgumentData>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  _Unwind_Resume(a1);
}

void StitchingReflection::getReflectionFromStitchingMetadata(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned __int32 v8;
  __int128 v9;
  __int128 v10;
  __n128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v17 = 0;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  StitchingReflection::stitchingArgumentTypeFromNode(a1, a2, &v11);
  v8 = v11.n128_u32[0];
  if (v11.n128_i64[0] <= 44)
  {
    if (v11.n128_i64[0] > 28)
    {
      if (v11.n128_i64[0] > 36)
      {
        if (v11.n128_u64[0] != 37 && v11.n128_u64[0] != 41)
          goto LABEL_38;
      }
      else if (v11.n128_u64[0] != 29 && v11.n128_u64[0] != 33)
      {
        goto LABEL_38;
      }
    }
    else
    {
      if (v11.n128_i64[0] <= 2)
      {
        if (v11.n128_u64[0] == 1)
        {
          StitchingReflection::initStructType(a1, a2, a3, a4);
          goto LABEL_5;
        }
        if (v11.n128_u64[0] == 2)
        {
          StitchingReflection::initArrayType(a1, a2, a4);
          goto LABEL_5;
        }
LABEL_38:
        v9 = v14;
        *(_OWORD *)a4 = v13;
        *(_OWORD *)(a4 + 16) = v9;
        v10 = v16;
        *(_OWORD *)(a4 + 32) = v15;
        *(_OWORD *)(a4 + 48) = v10;
        *(_QWORD *)(a4 + 64) = v17;
        v16 = 0uLL;
        v17 = 0;
        goto LABEL_5;
      }
      if (v11.n128_u64[0] != 3 && v11.n128_u64[0] != 16)
        goto LABEL_38;
    }
LABEL_4:
    *(_QWORD *)(a4 + 64) = 0;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_DWORD *)a4 = v8;
    goto LABEL_5;
  }
  if (v11.n128_i64[0] > 80)
  {
    if (v11.n128_i64[0] <= 120)
    {
      if (v11.n128_u64[0] != 81 && v11.n128_u64[0] != 85 && v11.n128_u64[0] != 89)
        goto LABEL_38;
    }
    else
    {
      if (v11.n128_i64[0] > 136)
      {
        if (v11.n128_u64[0] == 137)
        {
          StitchingReflection::initVectorType(a1, a2, a4);
          goto LABEL_5;
        }
        if (v11.n128_u64[0] == 138)
        {
          StitchingReflection::initImageBlockType(a1, a2, (_QWORD *)a4);
          goto LABEL_5;
        }
        goto LABEL_38;
      }
      if (v11.n128_u64[0] != 121)
      {
        if (v11.n128_u64[0] == 136)
        {
          StitchingReflection::initMatrixType(a1, a2, a4);
          goto LABEL_5;
        }
        goto LABEL_38;
      }
    }
    goto LABEL_4;
  }
  switch(v11.n128_u64[0])
  {
    case '-':
    case '1':
    case '5':
    case '=':
      goto LABEL_4;
    case ':':
      StitchingReflection::initTextureType(a1, a2, v11.n128_i32[2], v12, a4);
      break;
    case ';':
      *(_QWORD *)(a4 + 64) = 0;
      *(_OWORD *)(a4 + 32) = 0u;
      *(_OWORD *)(a4 + 48) = 0u;
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
      *(_DWORD *)a4 = 59;
      break;
    case '<':
      StitchingReflection::initPointerType(a1, a2, a4);
      break;
    default:
      goto LABEL_38;
  }
LABEL_5:
  v11.n128_u64[0] = (unint64_t)&v16;
  std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
}

void sub_241048844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  a10 = (void **)&a19;
  std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

double StitchingReflection::initScalarType@<D0>(MTLDataType a1@<X1>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)(a2 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)a2 = a1;
  return result;
}

uint64_t StitchingReflection::getMatrixType(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned int v9;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  __n128 v17;

  StitchingReflection::stitchingArgumentTypeFromNode(a1, *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 32), &v17);
  v3 = a2 - 8 * *(unsigned int *)(a2 + 8);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 128);
  if (*(_BYTE *)(v4 + 16) == 16)
  {
    v5 = (_QWORD *)(v4 + 24);
    if (*(_DWORD *)(v4 + 32) >= 0x41u)
      v5 = (_QWORD *)*v5;
    v6 = *(_DWORD *)v5;
  }
  else
  {
    v6 = -1;
  }
  v7 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 128);
  if (*(_BYTE *)(v7 + 16) == 16)
  {
    v8 = (_QWORD *)(v7 + 24);
    if (*(_DWORD *)(v7 + 32) >= 0x41u)
      v8 = (_QWORD *)*v8;
    v9 = *(_DWORD *)v8 - 2;
  }
  else
  {
    v9 = -3;
  }
  if (v17.n128_u64[0] == 121)
  {
    v11 = v9 + 133;
    if (v9 >= 3)
      v11 = 0;
    v12 = v9 + 130;
    if (v9 >= 3)
      v12 = 0;
    v13 = v9 >= 3;
    v14 = v9 + 127;
    goto LABEL_30;
  }
  if (v17.n128_u64[0] == 16)
  {
    v11 = v9 + 26;
    if (v9 >= 3)
      v11 = 0;
    v12 = v9 + 23;
    if (v9 >= 3)
      v12 = 0;
    v13 = v9 >= 3;
    v14 = v9 + 20;
LABEL_30:
    if (v13)
      v14 = 0;
    if (v6 != 2)
      v14 = 0;
    if (v6 == 3)
      v14 = v12;
    if (v6 == 4)
      return v11;
    else
      return v14;
  }
  if (v17.n128_u64[0] != 3)
    return 0;
  if (v6 == 4)
  {
    v15 = v9 >= 3;
    v16 = v9 + 13;
  }
  else
  {
    if (v6 != 3)
    {
      if (v6 == 2 && v9 < 3)
        return v9 + 7;
      return 0;
    }
    v15 = v9 >= 3;
    v16 = v9 + 10;
  }
  if (v15)
    return 0;
  else
    return v16;
}

__n128 StitchingReflection::stitchingArgumentTypeFromNode@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>)
{
  void *String;
  size_t v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  __n128 result;
  void *__p[2];
  uint64_t v11;

  String = (void *)llvm::MDString::getString(*(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8)));
  v7 = (_QWORD *)(a1 + 312);
  if (String)
  {
    std::string::basic_string[abi:ne180100](__p, String, v6);
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    v11 = 0;
  }
  v8 = std::__hash_table<std::__hash_value_type<std::string,MTLCompilerDataType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLCompilerDataType>>>::find<std::string>(v7, (unsigned __int8 *)__p);
  if (SHIBYTE(v11) < 0)
    operator delete(__p[0]);
  result = *(__n128 *)(v8 + 40);
  *a3 = result;
  a3[1].n128_u64[0] = *((_QWORD *)v8 + 7);
  return result;
}

uint64_t StitchingReflection::getVectorType(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v19;

  StitchingReflection::stitchingArgumentTypeFromNode(a1, *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 32), &v19);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 40) + 128);
  if (*(_BYTE *)(v3 + 16) == 16)
  {
    v4 = (_QWORD *)(v3 + 24);
    if (*(_DWORD *)(v3 + 32) >= 0x41u)
      v4 = (_QWORD *)*v4;
    v5 = *(_DWORD *)v4 - 2;
  }
  else
  {
    v5 = -3;
  }
  if (v19.n128_i64[0] > 44)
  {
    v6 = v5 + 82;
    if (v5 >= 3)
      v6 = 0;
    v14 = v5 + 86;
    if (v5 >= 3)
      v14 = 0;
    v15 = v5 + 122;
    if (v5 >= 3)
      v15 = 0;
    if (v19.n128_u64[0] != 121)
      v15 = 0;
    if (v19.n128_u64[0] != 85)
      v14 = v15;
    if (v19.n128_u64[0] != 81)
      v6 = v14;
    v16 = v5 + 46;
    if (v5 >= 3)
      v16 = 0;
    v17 = v5 + 50;
    if (v5 >= 3)
      v17 = 0;
    v11 = v5 >= 3;
    v12 = v5 + 54;
    if (v11)
      v12 = 0;
    if (v19.n128_u64[0] != 53)
      v12 = 0;
    if (v19.n128_u64[0] == 49)
      v12 = v17;
    if (v19.n128_u64[0] == 45)
      v12 = v16;
    v13 = (int64_t)v19.n128_u64[0] <= 80;
  }
  else
  {
    v6 = v5 + 34;
    if (v5 >= 3)
      v6 = 0;
    v7 = v5 + 38;
    if (v5 >= 3)
      v7 = 0;
    v8 = v5 + 42;
    if (v5 >= 3)
      v8 = 0;
    if (v19.n128_u64[0] != 41)
      v8 = 0;
    if (v19.n128_u64[0] != 37)
      v7 = v8;
    if (v19.n128_u64[0] != 33)
      v6 = v7;
    v9 = v5 + 4;
    if (v5 >= 3)
      v9 = 0;
    v10 = v5 + 17;
    if (v5 >= 3)
      v10 = 0;
    v11 = v5 >= 3;
    v12 = v5 + 30;
    if (v11)
      v12 = 0;
    if (v19.n128_u64[0] != 29)
      v12 = 0;
    if (v19.n128_u64[0] == 16)
      v12 = v10;
    if (v19.n128_u64[0] == 3)
      v12 = v9;
    v13 = (int64_t)v19.n128_u64[0] <= 32;
  }
  if (v13)
    return v12;
  else
    return v6;
}

unint64_t StitchingReflection::getDataType(uint64_t a1, uint64_t a2)
{
  __n128 v3;

  StitchingReflection::stitchingArgumentTypeFromNode(a1, *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 32), &v3);
  return v3.n128_u64[0];
}

uint64_t StitchingReflection::getAccessType(uint64_t a1, uint64_t a2)
{
  const void *String;
  uint64_t v3;

  String = (const void *)llvm::MDString::getString(*(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 40));
  if (v3 == 5)
    return 2 * (memcmp(String, "write", 5uLL) == 0);
  if (v3 == 10)
    return memcmp(String, "read_write", 0xAuLL) == 0;
  return 0;
}

unint64_t StitchingReflection::getTypeInfoDescriptor(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _BYTE *v9;

  v2 = (_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  v3 = *(_QWORD *)(v2[1] + 128);
  if (*(_BYTE *)(v3 + 16) == 16)
  {
    v4 = (unsigned int *)(v3 + 24);
    if (*(_DWORD *)(v3 + 32) >= 0x41u)
      v4 = *(unsigned int **)v4;
    v5 = *v4;
  }
  else
  {
    v5 = 0xFFFFFFFFLL;
  }
  v6 = *(_QWORD *)(v2[2] + 128);
  if (*(_BYTE *)(v6 + 16) == 16)
  {
    v7 = (_QWORD *)(v6 + 24);
    if (*(_DWORD *)(v6 + 32) >= 0x41u)
      v7 = (_QWORD *)*v7;
    v8 = *v7 << 32;
  }
  else
  {
    v8 = 0xFFFFFFFF00000000;
  }
  v9 = (_BYTE *)v2[3];
  if (v9)
    llvm::MDNode::classof(v9);
  return v8 | v5;
}

void StitchingReflection::traverseStruct(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4)
{
  uint64_t v4;
  _BYTE *v5;
  int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  llvm::MDString *v20;
  void *String;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  int v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  uint64_t i;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  BOOL v34;
  BOOL v35;
  __int16 v36;
  int v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  _QWORD *v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  __int128 v51;
  uint64_t j;
  unint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *p_shared_owners;
  unint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 *v65;
  __int128 *v66;
  int v67;
  int v68;
  uint64_t v69;
  __int128 v70;
  __int128 __p;
  char *v72;
  __int128 v73[2];
  __int128 v74;
  int v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  int v78;
  __int128 v79;
  uint64_t v80[4];
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 **v84;

  v4 = a2 - 8 * *(unsigned int *)(a2 + 8);
  v5 = *(_BYTE **)(v4 + 40);
  if (v5)
  {
    v8 = llvm::MDNode::classof(v5);
    v60 = *(_QWORD *)(v4 + 40);
    if (v8 && *(_QWORD *)(v4 + 40) != 0)
    {
      v59 = *(unsigned int *)(v60 + 8);
      if ((_DWORD)v59)
      {
        v10 = 0;
        v58 = a4;
        do
        {
          v75 = 0;
          v74 = 0u;
          memset(v73, 0, sizeof(v73));
          v76 = 0;
          v77 = 0;
          v78 = 0;
          v79 = xmmword_24105A7C0;
          memset(v80, 0, sizeof(v80));
          v81 = 0u;
          v82 = 0u;
          v83 = 0u;
          v11 = *(_QWORD *)(v60 - 8 * *(unsigned int *)(v60 + 8) + 8 * v10);
          v72 = 0;
          v70 = 0u;
          __p = 0u;
          v12 = *(unsigned int *)(v11 + 8);
          v13 = (_QWORD *)(v11 - 8 * v12);
          v14 = *(_QWORD *)(v13[1] + 128);
          if (*(_BYTE *)(v14 + 16) == 16)
          {
            v15 = (_QWORD *)(v14 + 24);
            if (*(_DWORD *)(v14 + 32) >= 0x41u)
              v15 = (_QWORD *)*v15;
            v16 = *(_DWORD *)v15;
          }
          else
          {
            v16 = -1;
          }
          v67 = v16;
          v17 = *(_QWORD *)(v13[2] + 128);
          if (*(_BYTE *)(v17 + 16) == 16)
          {
            v18 = (_QWORD *)(v17 + 24);
            if (*(_DWORD *)(v17 + 32) >= 0x41u)
              v18 = (_QWORD *)*v18;
            v19 = *(_DWORD *)v18;
          }
          else
          {
            v19 = -1;
          }
          v68 = v19;
          v69 = v13[3];
          v20 = (llvm::MDString *)v13[4];
          if (v20)
          {
            String = (void *)llvm::MDString::getString(v20);
            v23 = -(uint64_t)*(unsigned int *)(v11 + 8);
          }
          else
          {
            v22 = 0;
            v23 = -v12;
            String = &unk_24105C402;
          }
          *(_QWORD *)&v70 = String;
          *((_QWORD *)&v70 + 1) = v22;
          v24 = v11 + 8 * v23;
          v25 = *(_BYTE **)(v24 + 40);
          if (v25)
          {
            v26 = llvm::MDNode::classof(v25);
            v27 = *(_QWORD *)(v24 + 40);
            v28 = v27 ? v26 : 0;
            if (v28 == 1)
            {
              v29 = *(unsigned int *)(v27 + 8);
              std::vector<AttributeDescriptor>::reserve((void **)&__p, v29);
              if ((_DWORD)v29)
              {
                for (i = 0; i != v29; ++i)
                {
                  v31 = *(_QWORD *)(v27 - 8 * *(unsigned int *)(v27 + 8) + 8 * i);
                  v32 = (_QWORD *)llvm::MDString::getString(*(llvm::MDString **)(v31 - 8 * *(unsigned int *)(v31 + 8)));
                  if (v33 == 22
                    && (*v32 == 0x646E65722E726961 ? (v34 = v32[1] == 0x65677261745F7265) : (v34 = 0),
                        v34 ? (v35 = *(_QWORD *)((char *)v32 + 14) == 0x727474615F746567) : (v35 = 0),
                        v35))
                  {
                    v45 = *(_QWORD *)(*(_QWORD *)(v31 - 8 * *(unsigned int *)(v31 + 8) + 8) + 128);
                    if (*(_BYTE *)(v45 + 16) == 16)
                    {
                      v46 = (_QWORD *)(v45 + 24);
                      if (*(_DWORD *)(v45 + 32) >= 0x41u)
                        v46 = (_QWORD *)*v46;
                      v37 = *(_DWORD *)v46;
                    }
                    else
                    {
                      v37 = -1;
                    }
                    v36 = 10;
                  }
                  else
                  {
                    v36 = 0;
                    v37 = 0;
                  }
                  v38 = *((_QWORD *)&__p + 1);
                  if (*((_QWORD *)&__p + 1) >= (unint64_t)v72)
                  {
                    v40 = (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 5;
                    v41 = v40 + 1;
                    if ((unint64_t)(v40 + 1) >> 59)
                      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
                    v42 = (uint64_t)&v72[-__p];
                    if ((uint64_t)&v72[-__p] >> 4 > v41)
                      v41 = v42 >> 4;
                    if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFE0)
                      v43 = 0x7FFFFFFFFFFFFFFLL;
                    else
                      v43 = v41;
                    if (v43)
                      v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<VaryingInfo>>((uint64_t)&v72, v43);
                    else
                      v44 = 0;
                    v47 = &v44[32 * v40];
                    *(_WORD *)v47 = v36;
                    *((_WORD *)v47 + 1) = 0;
                    *((_DWORD *)v47 + 1) = v37;
                    *((_QWORD *)v47 + 2) = 0;
                    *((_QWORD *)v47 + 3) = 0;
                    *((_QWORD *)v47 + 1) = 0;
                    v48 = (char *)*((_QWORD *)&__p + 1);
                    v49 = (char *)__p;
                    v50 = v47;
                    if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
                    {
                      do
                      {
                        v51 = *((_OWORD *)v48 - 1);
                        *((_OWORD *)v50 - 2) = *((_OWORD *)v48 - 2);
                        *((_OWORD *)v50 - 1) = v51;
                        v50 -= 32;
                        v48 -= 32;
                      }
                      while (v48 != v49);
                      v48 = (char *)__p;
                    }
                    v39 = v47 + 32;
                    *(_QWORD *)&__p = v50;
                    *((_QWORD *)&__p + 1) = v47 + 32;
                    v72 = &v44[32 * v43];
                    if (v48)
                      operator delete(v48);
                  }
                  else
                  {
                    **((_WORD **)&__p + 1) = v36;
                    *(_WORD *)(v38 + 2) = 0;
                    *(_DWORD *)(v38 + 4) = v37;
                    *(_QWORD *)(v38 + 16) = 0;
                    *(_QWORD *)(v38 + 24) = 0;
                    v39 = (char *)(v38 + 32);
                    *(_QWORD *)(v38 + 8) = 0;
                  }
                  *((_QWORD *)&__p + 1) = v39;
                }
              }
            }
          }
          v73[0] = v70;
          LODWORD(v74) = v67;
          for (j = __p; j != *((_QWORD *)&__p + 1); j += 32)
          {
            if (*(_WORD *)j == 10)
              LODWORD(v79) = *(_DWORD *)(j + 4);
          }
          StitchingReflection::getReflectionFromStitchingMetadata(&v62, a1, v69, v58);
          if (v58)
          {
            DWORD1(v63) = HIDWORD(v62);
            HIDWORD(v62) = v62;
            LODWORD(v62) = 60;
          }
          v81 = v62;
          v82 = v63;
          v83 = v64;
          std::vector<MTLStructMemberInfo>::__assign_with_size[abi:ne180100]<MTLStructMemberInfo*,MTLStructMemberInfo*>(&v80[1], v65, v66, 0x2E8BA2E8BA2E8BA3 * (v66 - v65));
          v53 = a3[1];
          if (v53 >= a3[2])
          {
            v54 = std::vector<MTLStructMemberInfo>::__push_back_slow_path<MTLStructMemberInfo const&>(a3, v73);
          }
          else
          {
            std::allocator<MTLStructMemberInfo>::construct[abi:ne180100]<MTLStructMemberInfo,MTLStructMemberInfo const&>((uint64_t)(a3 + 2), a3[1], v73);
            v54 = v53 + 176;
            a3[1] = v53 + 176;
          }
          a3[1] = v54;
          v84 = &v65;
          std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v84);
          if ((_QWORD)__p)
          {
            *((_QWORD *)&__p + 1) = __p;
            operator delete((void *)__p);
          }
          *(_QWORD *)&v62 = &v80[1];
          std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
          v55 = v77;
          if (v77)
          {
            p_shared_owners = (unint64_t *)&v77->__shared_owners_;
            do
              v57 = __ldaxr(p_shared_owners);
            while (__stlxr(v57 - 1, p_shared_owners));
            if (!v57)
            {
              ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
              std::__shared_weak_count::__release_weak(v55);
            }
          }
          ++v10;
        }
        while (v10 != v59);
      }
    }
  }
}

void sub_2410492D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,char a39)
{
  if (__p)
    operator delete(__p);
  MTLStructMemberInfo::~MTLStructMemberInfo((MTLStructMemberInfo *)&a39);
  _Unwind_Resume(a1);
}

unint64_t StitchingReflection::initMatrixType@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t MatrixType;
  unint64_t result;

  *(_QWORD *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  MatrixType = StitchingReflection::getMatrixType(a1, a2);
  *(_DWORD *)a3 = MatrixType;
  result = StitchingReflection::getTypeInfoDescriptor(MatrixType, a2);
  *(_QWORD *)(a3 + 4) = result;
  return result;
}

void sub_241049380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;

  a10 = (void **)(v10 + 48);
  std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

unint64_t StitchingReflection::initVectorType@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t VectorType;
  unint64_t result;

  *(_QWORD *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  VectorType = StitchingReflection::getVectorType(a1, a2);
  *(_DWORD *)a3 = VectorType;
  result = StitchingReflection::getTypeInfoDescriptor(VectorType, a2);
  *(_QWORD *)(a3 + 4) = result;
  return result;
}

void sub_2410493EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;

  a10 = (void **)(v10 + 48);
  std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

double StitchingReflection::initSamplerType@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)a1 = 59;
  return result;
}

uint64_t StitchingReflection::initTextureType@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, unsigned __int8 a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t result;
  __n128 v9[2];

  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_QWORD *)(a5 + 64) = 0;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_DWORD *)a5 = 58;
  *(_DWORD *)(a5 + 16) = (a4 << 16) | a3;
  StitchingReflection::stitchingArgumentTypeFromNode(a1, *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 32), v9);
  *(_DWORD *)(a5 + 12) = v9[0].n128_u32[0];
  result = StitchingReflection::getAccessType(v7, a2);
  *(_DWORD *)(a5 + 24) = result;
  return result;
}

void sub_24104949C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  uint64_t v12;

  a12 = (void **)(v12 + 48);
  std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void StitchingReflection::initPointerType(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  __int128 *v12;
  __int128 *v13;
  __int128 **v14;

  *(_QWORD *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)a3 = 60;
  v5 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 32);
  StitchingReflection::getTypeInfoDescriptor(a1, v5);
  *(_DWORD *)(a3 + 24) = v6;
  StitchingReflection::getReflectionFromStitchingMetadata(&v8, a1, v5, 0);
  *(_QWORD *)(a3 + 4) = v9;
  v7 = v8;
  *(_DWORD *)(a3 + 12) = v8;
  *(_DWORD *)(a3 + 20) = v10;
  if (v7 == 1)
  {
    *(_OWORD *)(a3 + 32) = v11;
    if (&v8 != (int *)a3)
      std::vector<MTLStructMemberInfo>::__assign_with_size[abi:ne180100]<MTLStructMemberInfo*,MTLStructMemberInfo*>((uint64_t *)(a3 + 48), v12, v13, 0x2E8BA2E8BA2E8BA3 * (v13 - v12));
  }
  v14 = &v12;
  std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
}

void sub_2410495A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v11 - 40) = v10;
  std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)(v11 - 40));
  a9 = (void **)(v9 + 48);
  std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void StitchingReflection::initStructType(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t *v8;
  llvm::MDString *v9;
  void *String;
  uint64_t v11;

  *(_OWORD *)(a4 + 48) = 0u;
  v8 = (uint64_t *)(a4 + 48);
  *(_QWORD *)(a4 + 64) = 0;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_DWORD *)a4 = 1;
  *(_QWORD *)(a4 + 4) = StitchingReflection::getTypeInfoDescriptor(a1, a2);
  v9 = *(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 32);
  if (v9)
  {
    String = (void *)llvm::MDString::getString(v9);
  }
  else
  {
    v11 = 0;
    String = &unk_24105C402;
  }
  *(_QWORD *)(a4 + 32) = String;
  *(_QWORD *)(a4 + 40) = v11;
  std::vector<MTLStructMemberInfo>::__assign_with_size[abi:ne180100]<MTLStructMemberInfo const*,MTLStructMemberInfo const*>(v8, 0, 0, 0);
  StitchingReflection::traverseStruct(a1, a2, v8, a3);
}

void sub_24104968C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void StitchingReflection::initArrayType(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  int v8;
  __n128 v9[2];

  *(_QWORD *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)a3 = 2;
  *(_QWORD *)(a3 + 4) = StitchingReflection::getTypeInfoDescriptor(a1, a2);
  StitchingReflection::stitchingArgumentTypeFromNode(a1, *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 32), v9);
  *(_DWORD *)(a3 + 12) = v9[0].n128_u32[0];
  v6 = *(_QWORD *)(*(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 40) + 128);
  if (*(_BYTE *)(v6 + 16) == 16)
  {
    v7 = (_QWORD *)(v6 + 24);
    if (*(_DWORD *)(v6 + 32) >= 0x41u)
      v7 = (_QWORD *)*v7;
    v8 = *(_DWORD *)v7;
  }
  else
  {
    v8 = -1;
  }
  *(_DWORD *)(a3 + 28) = v8;
}

void sub_241049760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  uint64_t v12;

  a12 = (void **)(v12 + 48);
  std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

_QWORD *StitchingReflection::initImageBlockType@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *result;

  result = StitchingReflection::getReflectionFromStitchingMetadata(a3, a1, *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 40), 1);
  *(_DWORD *)a3 = 138;
  return result;
}

_QWORD *MTLGenerateReflectionDataPass::generateReflectionData(uint64_t a1, llvm::Module *a2, char a3, _QWORD *a4, int a5, _QWORD *a6, const void *a7, size_t a8, uint64_t *a9)
{
  _QWORD *v9;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  __int128 *v22;
  __int128 *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  const llvm::DataLayout *DataLayout;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  _BOOL4 v47;
  __int128 *v48;
  __int128 *v49;
  std::__shared_weak_count *v50;
  unint64_t *p_shared_owners;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unsigned int v59;
  uint64_t v60;
  __int128 *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  llvm::NamedMDNode *NamedMetadata;
  llvm::NamedMDNode *v84;
  unsigned int NumOperands;
  int v86;
  int i;
  uint64_t Operand;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  MTLArgumentData *v92;
  MTLArgumentData *v93;
  uint64_t v94;
  size_t v95;
  void ***v96;
  int v97;
  unint64_t v98;
  void ***v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void ***v103;
  void ***v104;
  void ***v105;
  void ***v106;
  void **v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  void ***v123;
  void ***v124;
  void ***v125;
  void ***v126;
  void ***v127;
  void ***v128;
  void **v129;
  unint64_t v130;
  void ***v131;
  void **v132;
  uint64_t v133;
  unint64_t v134;
  unsigned int v135;
  uint64_t v136;
  void ***v137;
  void ***v138;
  char v140;
  uint64_t *v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v149;
  int v150;
  unsigned int v151;
  size_t __n;
  unint64_t v153;
  int v154;
  _QWORD v155[5];
  _QWORD v156[5];
  _QWORD v157[5];
  _QWORD v158[5];
  _QWORD v159[5];
  _QWORD v160[5];
  char *v161;
  uint64_t v162;
  char *v163;
  _QWORD v164[5];
  _QWORD v165[5];
  void ***v166;
  void ***v167;
  uint64_t v168;
  _QWORD *v169;
  _QWORD v170[5];
  _QWORD v171[5];
  void ***v172;
  MTLArgumentData *v173;
  unint64_t v174;
  _QWORD v175[5];
  _QWORD v176[5];
  _QWORD v177[5];
  _QWORD v178[5];
  _QWORD v179[5];
  _QWORD v180[5];
  uint64_t v181;
  uint64_t *v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  __int128 *v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191[3];
  void *__p;
  _QWORD *v193;
  uint64_t v194;
  char **v195;
  char v196;
  __int128 v197;
  size_t __len[2];
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  uint64_t v204;
  std::__shared_weak_count *v205;
  uint64_t v206;
  std::__shared_weak_count *v207;
  std::__shared_weak_count *v208;
  std::__shared_weak_count *v209;
  __int128 v210;
  __int128 v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  uint64_t v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  uint64_t v228;
  std::__shared_weak_count *v229;
  uint64_t v230;
  std::__shared_weak_count *v231;
  std::__shared_weak_count *v232;
  std::__shared_weak_count *v233;
  __int128 v234;
  __int128 v235;
  uint64_t v236;
  __int128 *v237;
  __int128 *v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  _QWORD v243[18];

  v243[15] = *MEMORY[0x24BDAC8D0];
  if ((a3 & 1) == 0)
    return 0;
  memset(v191, 0, sizeof(v191));
  parseFunctions(a2, v191);
  v14 = v191[0];
  v189 = 0;
  v188 = 0;
  v190 = 0;
  v15 = *(int *)(v191[0] + 48);
  v16 = entryPointsType[v15];
  v186 = 0;
  v185 = 0;
  v187 = 0;
  v17 = *(_QWORD *)(v191[0] + 24);
  v18 = v16 != 5 || v17 == 0;
  v147 = a4;
  __n = a8;
  v149 = v16;
  if (v18)
  {
    v153 = v16 & 0xFFFFFFFFFFFFFFFDLL;
    v19 = &v188;
    if ((v16 & 0xFFFFFFFFFFFFFFFDLL) != 1)
      v19 = 0;
    v143 = v19;
    v183 = 0;
    v182 = 0;
    v181 = 0;
    v20 = *(_QWORD *)(v191[0] + 8);
    if (v20)
      v21 = *(_DWORD *)(v20 + 8);
    else
      v21 = 0;
    v34 = *(_QWORD *)v191[0];
    if ((*(_WORD *)(*(_QWORD *)v191[0] + 18) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments(*(llvm::Function **)v191[0]);
      LODWORD(v15) = *(_DWORD *)(v14 + 48);
    }
    if (!v21)
    {
      v150 = -1;
LABEL_99:
      v59 = 954437177 * (((uint64_t)v182 - v181) >> 5);
      if (v59)
      {
        v60 = 0;
        v61 = v186;
        do
        {
          if ((unint64_t)v61 >= v187)
          {
            v61 = (__int128 *)std::vector<MTLArgumentData>::__push_back_slow_path<MTLArgumentData const&>(&v185, (__int128 *)(v181 + v60));
          }
          else
          {
            std::allocator<MTLArgumentData>::construct[abi:ne180100]<MTLArgumentData,MTLArgumentData const&>((uint64_t)&v187, (uint64_t)v61, (__int128 *)(v181 + v60));
            v61 += 18;
          }
          v186 = v61;
          v60 += 288;
        }
        while (288 * v59 != v60);
      }
      *(_QWORD *)&v221 = &v181;
      std::vector<MTLArgumentData>::__destroy_vector::operator()[abi:ne180100]((void ***)&v221);
      v181 = 0;
      v182 = &v181;
      v183 = 0x2020000000;
      v151 = v59;
      if ((v149 | 2) == 3)
      {
        v33 = 0x38E38E38E38E38E4 * ((v189 - v188) >> 5) + 16;
        v184 = v33;
      }
      else
      {
        v33 = 12;
      }
      goto LABEL_108;
    }
    v35 = 0;
    v36 = *(_QWORD *)(v34 + 88);
    if (v153 == 1)
      v37 = &v189;
    else
      v37 = (uint64_t *)8;
    v38 = (uint64_t)&v190;
    if (v153 != 1)
      v38 = 16;
    v145 = (_QWORD *)v38;
    v150 = -1;
    while (1)
    {
      v39 = *(_QWORD *)(*(_QWORD *)(v14 + 8) - 8 * *(unsigned int *)(*(_QWORD *)(v14 + 8) + 8) + 8 * v35);
      DataLayout = (const llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)v14 + 40));
      llvm::DataLayout::DataLayout((llvm::DataLayout *)&v221, DataLayout);
      MTLArgumentData::MTLArgumentData((MTLArgumentData *)&v197);
      v166 = 0;
      v167 = 0;
      LODWORD(v168) = 0;
      parseArgumentMetadata((uint64_t)&v197, v39, v36, 0, (uint64_t)&v221, 0, (uint64_t *)&v166, v15);
      if ((v197 & 1) == 0)
      {
        if ((v197 & 4) != 0)
        {
          LODWORD(v197) = v197 | 8;
          v44 = (uint64_t)v182;
          if ((unint64_t)v182 >= v183)
          {
            v45 = std::vector<MTLArgumentData>::__push_back_slow_path<MTLArgumentData const&>(&v181, &v197);
          }
          else
          {
            std::allocator<MTLArgumentData>::construct[abi:ne180100]<MTLArgumentData,MTLArgumentData const&>((uint64_t)&v183, (uint64_t)v182, &v197);
            v45 = v44 + 288;
          }
          v182 = (uint64_t *)v45;
        }
        else if (v153 == 1 && (v197 & 0xA) == 0xA)
        {
          v41 = *v37;
          if ((unint64_t)*v37 >= *v145)
          {
            v42 = std::vector<MTLArgumentData>::__push_back_slow_path<MTLArgumentData const&>(v143, &v197);
          }
          else
          {
            std::allocator<MTLArgumentData>::construct[abi:ne180100]<MTLArgumentData,MTLArgumentData const&>((uint64_t)v145, *v37, &v197);
            v42 = v41 + 288;
            *v37 = v41 + 288;
          }
          *v37 = v42;
        }
        goto LABEL_80;
      }
      if (((v197 >> 4) & 0x1F) - 9 <= 1)
        LODWORD(v197) = v197 | 8;
      if (!__len[0])
        goto LABEL_76;
      std::string::basic_string[abi:ne180100](&__p, (void *)__len[0], __len[1]);
      if (SHIBYTE(v194) < 0)
      {
        if (v193 != (_QWORD *)12)
        {
          operator delete(__p);
LABEL_76:
          v48 = v186;
          if ((unint64_t)v186 >= v187)
            goto LABEL_78;
          goto LABEL_77;
        }
        v47 = *(_QWORD *)__p != 0x75622E6563617274 || *((_DWORD *)__p + 2) != 1919247974;
        operator delete(__p);
        if (v47)
          goto LABEL_76;
      }
      else
      {
        if (SHIBYTE(v194) != 12)
          goto LABEL_76;
        if (__p != (void *)0x75622E6563617274 || v193 != 1919247974)
          goto LABEL_76;
      }
      v150 = DWORD1(v197);
      if (a3 < 0)
        goto LABEL_80;
      v48 = v186;
      if ((unint64_t)v186 >= v187)
      {
LABEL_78:
        v49 = (__int128 *)std::vector<MTLArgumentData>::__push_back_slow_path<MTLArgumentData const&>(&v185, &v197);
        goto LABEL_79;
      }
LABEL_77:
      std::allocator<MTLArgumentData>::construct[abi:ne180100]<MTLArgumentData,MTLArgumentData const&>((uint64_t)&v187, (uint64_t)v186, &v197);
      v49 = v48 + 18;
LABEL_79:
      v186 = v49;
LABEL_80:
      llvm::DenseMap<llvm::Metadata *,std::vector<MTLStructMemberInfo> *,llvm::DenseMapInfo<llvm::Metadata *,void>,llvm::detail::DenseMapPair<llvm::Metadata *,std::vector<MTLStructMemberInfo> *>>::~DenseMap((uint64_t)&v166);
      v166 = (void ***)&v213;
      std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v166);
      v50 = v209;
      if (v209)
      {
        p_shared_owners = (unint64_t *)&v209->__shared_owners_;
        do
          v52 = __ldaxr(p_shared_owners);
        while (__stlxr(v52 - 1, p_shared_owners));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      v53 = v207;
      if (v207)
      {
        v54 = (unint64_t *)&v207->__shared_owners_;
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
      v56 = v205;
      if (v205)
      {
        v57 = (unint64_t *)&v205->__shared_owners_;
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 - 1, v57));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }
      v36 += 40;
      MEMORY[0x24268C8C4](&v221);
      if (++v35 == v21)
        goto LABEL_99;
    }
  }
  StitchingReflection::StitchingReflection((uint64_t)&v221, v17);
  std::vector<MTLArgumentData>::__insert_with_size[abi:ne180100]<std::__wrap_iter<MTLArgumentData const*>,std::__wrap_iter<MTLArgumentData const*>>(&v185, v186, (__int128 *)v221, *((__int128 **)&v221 + 1), 0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)&v221 + 1) - v221) >> 5));
  v22 = v186;
  if ((unint64_t)v186 >= v187)
  {
    v23 = (__int128 *)std::vector<MTLArgumentData>::__push_back_slow_path<MTLArgumentData const&>(&v185, (__int128 *)((char *)&v222 + 8));
  }
  else
  {
    std::allocator<MTLArgumentData>::construct[abi:ne180100]<MTLArgumentData,MTLArgumentData const&>((uint64_t)&v187, (uint64_t)v186, (__int128 *)((char *)&v222 + 8));
    v23 = v22 + 18;
  }
  v186 = v23;
  std::__hash_table<std::__hash_value_type<std::string,MTLCompilerDataType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLCompilerDataType>>>::~__hash_table((uint64_t)v243);
  *(_QWORD *)&v197 = &v239;
  std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v197);
  v24 = (std::__shared_weak_count *)v235;
  if ((_QWORD)v235)
  {
    v25 = (unint64_t *)(v235 + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = (std::__shared_weak_count *)v234;
  if ((_QWORD)v234)
  {
    v28 = (unint64_t *)(v234 + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = v232;
  if (v232)
  {
    v31 = (unint64_t *)&v232->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  *(_QWORD *)&v197 = &v221;
  std::vector<MTLArgumentData>::__destroy_vector::operator()[abi:ne180100]((void ***)&v197);
  v151 = 0;
  v181 = 0;
  v182 = &v181;
  v183 = 0x2020000000;
  v33 = 12;
  v184 = 12;
  v150 = -1;
LABEL_108:
  v184 = v33 + 8;
  v194 = 0;
  v193 = 0;
  __p = &v193;
  v62 = MEMORY[0x24BDAC760];
  v180[0] = MEMORY[0x24BDAC760];
  v180[1] = 3221225472;
  v180[2] = ___ZN29MTLGenerateReflectionDataPass22generateReflectionDataEPN4llvm6ModuleEjPmjRKNSt3__16vectorI20PostVertexDumpOutputNS4_9allocatorIS6_EEEEPvmS3__block_invoke;
  v180[3] = &unk_25111F580;
  v180[4] = &v181;
  v179[0] = MEMORY[0x24BDAC760];
  v179[1] = 3221225472;
  v179[2] = ___ZN29MTLGenerateReflectionDataPass22generateReflectionDataEPN4llvm6ModuleEjPmjRKNSt3__16vectorI20PostVertexDumpOutputNS4_9allocatorIS6_EEEEPvmS3__block_invoke_2;
  v179[3] = &unk_25111F5A8;
  v179[4] = &v181;
  serializeArguments(&v185, (uint64_t)&__p, (uint64_t)v180, (uint64_t)v179);
  v63 = entryPointsType[*(int *)(v14 + 48)];
  v146 = v182[3];
  if (v63 == 2)
  {
    v182[3] += 4;
    MTLArgumentData::MTLArgumentData((MTLArgumentData *)&v221);
    extractOutputImageBlockDataFromMetadata((FunctionDesc *)v14, (MTLArgumentData *)&v221);
    if ((v221 & 0x1F0) == 0x90)
    {
      v201 = v225;
      v202 = v226;
      v203 = v227;
      v197 = v221;
      *(_OWORD *)__len = v222;
      v199 = v223;
      v200 = v224;
      v204 = v228;
      v205 = v229;
      if (v229)
      {
        v64 = (unint64_t *)&v229->__shared_owners_;
        do
          v65 = __ldxr(v64);
        while (__stxr(v65 + 1, v64));
      }
      v206 = v230;
      v207 = v231;
      if (v231)
      {
        v66 = (unint64_t *)&v231->__shared_owners_;
        do
          v67 = __ldxr(v66);
        while (__stxr(v67 + 1, v66));
      }
      v208 = v232;
      v209 = v233;
      if (v233)
      {
        v68 = (unint64_t *)&v233->__shared_owners_;
        do
          v69 = __ldxr(v68);
        while (__stxr(v69 + 1, v68));
      }
      v210 = v234;
      v211 = v235;
      v212 = v236;
      v213 = 0;
      v215 = 0;
      v214 = 0;
      std::vector<MTLStructMemberInfo>::__init_with_size[abi:ne180100]<MTLStructMemberInfo*,MTLStructMemberInfo*>(&v213, v237, v238, 0x2E8BA2E8BA2E8BA3 * (v238 - v237));
      v216 = v239;
      v217 = v240;
      v218 = v241;
      v219 = v242;
      v167 = 0;
      v168 = 0;
      v166 = 0;
      v172 = (void ***)&v166;
      LOBYTE(v173) = 0;
      v166 = (void ***)operator new(0x120uLL);
      v167 = v166;
      v168 = (uint64_t)(v166 + 36);
      v167 = (void ***)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<MTLArgumentData>,MTLArgumentData const*,MTLArgumentData const*,MTLArgumentData*>((uint64_t)&v168, &v197, (__int128 *)&v220, (uint64_t)v166);
      v172 = (void ***)&v213;
      std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v172);
      std::shared_ptr<MTLArgumentData>::~shared_ptr[abi:ne180100]((uint64_t)&v208);
      std::shared_ptr<MTLArgumentData>::~shared_ptr[abi:ne180100]((uint64_t)&v206);
      std::shared_ptr<MTLArgumentData>::~shared_ptr[abi:ne180100]((uint64_t)&v204);
      v178[0] = v62;
      v178[1] = 3221225472;
      v178[2] = ___ZN29MTLGenerateReflectionDataPass22generateReflectionDataEPN4llvm6ModuleEjPmjRKNSt3__16vectorI20PostVertexDumpOutputNS4_9allocatorIS6_EEEEPvmS3__block_invoke_3;
      v178[3] = &unk_25111F580;
      v178[4] = &v181;
      v177[0] = v62;
      v177[1] = 3221225472;
      v177[2] = ___ZN29MTLGenerateReflectionDataPass22generateReflectionDataEPN4llvm6ModuleEjPmjRKNSt3__16vectorI20PostVertexDumpOutputNS4_9allocatorIS6_EEEEPvmS3__block_invoke_4;
      v177[3] = &unk_25111F5A8;
      v177[4] = &v181;
      serializeArguments((uint64_t *)&v166, (uint64_t)&__p, (uint64_t)v178, (uint64_t)v177);
      *(_QWORD *)&v197 = &v166;
      std::vector<MTLArgumentData>::__destroy_vector::operator()[abi:ne180100]((void ***)&v197);
      v140 = 1;
    }
    else
    {
      v140 = 0;
    }
    *(_QWORD *)&v197 = &v237;
    std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v197);
    v70 = v233;
    if (v233)
    {
      v71 = (unint64_t *)&v233->__shared_owners_;
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
    }
    v73 = v231;
    if (v231)
    {
      v74 = (unint64_t *)&v231->__shared_owners_;
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }
    v76 = v229;
    if (v229)
    {
      v77 = (unint64_t *)&v229->__shared_owners_;
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
    v63 = entryPointsType[*(int *)(v14 + 48)];
  }
  else
  {
    v140 = 0;
  }
  if ((v63 | 2) == 3)
  {
    v182[3] += 8;
    v176[0] = v62;
    v176[1] = 3221225472;
    v176[2] = ___ZN29MTLGenerateReflectionDataPass22generateReflectionDataEPN4llvm6ModuleEjPmjRKNSt3__16vectorI20PostVertexDumpOutputNS4_9allocatorIS6_EEEEPvmS3__block_invoke_5;
    v176[3] = &unk_25111F580;
    v176[4] = &v181;
    v175[0] = v62;
    v175[1] = 3221225472;
    v175[2] = ___ZN29MTLGenerateReflectionDataPass22generateReflectionDataEPN4llvm6ModuleEjPmjRKNSt3__16vectorI20PostVertexDumpOutputNS4_9allocatorIS6_EEEEPvmS3__block_invoke_6;
    v175[3] = &unk_25111F5A8;
    v175[4] = &v181;
    serializePostVertexDumpOutputs(a6, (uint64_t)v176, (uint64_t)v175);
  }
  v79 = (uint64_t)v182;
  v80 = v182[3];
  v81 = v80;
  if (a9)
  {
    *a9 = v80;
    v81 = *(_QWORD *)(v79 + 24);
  }
  v154 = v80;
  v82 = __n + v81 + 8;
  *(_QWORD *)(v79 + 24) = v82;
  v144 = entryPointsType[*(int *)(v14 + 48)];
  if (v144 == 6)
    *(_QWORD *)(v79 + 24) = v82 + ((uint64_t)(*(_QWORD *)(v14 + 104) - *(_QWORD *)(v14 + 96)) >> 1) + 8;
  v173 = 0;
  v172 = 0;
  v174 = 0;
  *(_QWORD *)&v221 = "air.global_bindings";
  LOWORD(v223) = 259;
  NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(a2, (const llvm::Twine *)&v221);
  v84 = NamedMetadata;
  if (NamedMetadata)
  {
    v221 = 0uLL;
    LODWORD(v222) = 0;
    NumOperands = llvm::NamedMDNode::getNumOperands(NamedMetadata);
    std::vector<MTLArgumentData>::reserve((uint64_t *)&v172, NumOperands);
    v86 = llvm::NamedMDNode::getNumOperands(v84);
    if (v86)
    {
      for (i = 0; i != v86; ++i)
      {
        Operand = llvm::NamedMDNode::getOperand(v84);
        v89 = Operand - 8 * *(unsigned int *)(Operand + 8);
        v90 = *(_QWORD *)(v89 + 16);
        v91 = *(_QWORD *)(*(_QWORD *)(v89 + 8) + 128);
        v92 = v173;
        if ((unint64_t)v173 >= v174)
        {
          v93 = (MTLArgumentData *)std::vector<MTLArgumentData>::__emplace_back_slow_path<>((uint64_t *)&v172);
        }
        else
        {
          MTLArgumentData::MTLArgumentData(v173);
          v93 = (MTLArgumentData *)((char *)v92 + 288);
        }
        v173 = v93;
        v94 = llvm::Module::getDataLayout(a2);
        parseArgumentMetadata((uint64_t)v93 - 288, v90, v91, 0, v94, 0, (uint64_t *)&v221, 7);
      }
    }
    llvm::DenseMap<llvm::Metadata *,std::vector<MTLStructMemberInfo> *,llvm::DenseMapInfo<llvm::Metadata *,void>,llvm::detail::DenseMapPair<llvm::Metadata *,std::vector<MTLStructMemberInfo> *>>::~DenseMap((uint64_t)&v221);
  }
  v182[3] += 4;
  v171[0] = v62;
  v171[1] = 3221225472;
  v171[2] = ___ZN29MTLGenerateReflectionDataPass22generateReflectionDataEPN4llvm6ModuleEjPmjRKNSt3__16vectorI20PostVertexDumpOutputNS4_9allocatorIS6_EEEEPvmS3__block_invoke_7;
  v171[3] = &unk_25111F580;
  v171[4] = &v181;
  v170[0] = v62;
  v170[1] = 3221225472;
  v170[2] = ___ZN29MTLGenerateReflectionDataPass22generateReflectionDataEPN4llvm6ModuleEjPmjRKNSt3__16vectorI20PostVertexDumpOutputNS4_9allocatorIS6_EEEEPvmS3__block_invoke_8;
  v170[3] = &unk_25111F5A8;
  v170[4] = &v181;
  serializeArguments((uint64_t *)&v172, (uint64_t)&__p, (uint64_t)v171, (uint64_t)v170);
  v95 = v182[3];
  v9 = malloc_type_malloc(v95, 0x8011A049uLL);
  std::__tree<std::__value_type<llvm::Function *,llvm::Value *>,std::__map_value_compare<llvm::Function *,std::__value_type<llvm::Function *,llvm::Value *>,std::less<llvm::Function *>,true>,std::allocator<std::__value_type<llvm::Function *,llvm::Value *>>>::destroy((uint64_t)&__p, v193);
  v194 = 0;
  __p = &v193;
  v193 = 0;
  v166 = 0;
  v167 = (void ***)&v166;
  v168 = 0x2020000000;
  v169 = v9;
  *v9 = 0x4E494253504C544DLL;
  v96 = v167;
  ++v169;
  *(_DWORD *)v167[3] = 0x20000;
  v96[3] = (void **)((char *)v96[3] + 4);
  v97 = v154;
  if ((v149 | 2) == 3)
  {
    v98 = 0x8E38E38E38E38E39 * ((v189 - v188) >> 5);
    v99 = v167;
    *(_DWORD *)v167[3] = v98;
    v99[3] = (void **)((char *)v99[3] + 4);
    v100 = v98;
    if ((_DWORD)v98)
    {
      v101 = 0;
      v102 = 288 * v100;
      do
      {
        v103 = v167;
        *(_DWORD *)v167[3] = *(_DWORD *)(v188 + v101 + 4);
        v103[3] = (void **)((char *)v103[3] + 4);
        v101 += 288;
      }
      while (v102 != v101);
    }
  }
  v104 = v167;
  *(_DWORD *)v167[3] = v151;
  v104[3] = (void **)((char *)v104[3] + 4);
  v105 = v167;
  *(_DWORD *)v167[3] = v146;
  v105[3] = (void **)((char *)v105[3] + 4);
  v164[4] = &v166;
  v165[0] = v62;
  v165[1] = 3221225472;
  v165[2] = ___ZN29MTLGenerateReflectionDataPass22generateReflectionDataEPN4llvm6ModuleEjPmjRKNSt3__16vectorI20PostVertexDumpOutputNS4_9allocatorIS6_EEEEPvmS3__block_invoke_9;
  v165[3] = &unk_25111F580;
  v165[4] = &v166;
  v164[0] = v62;
  v164[1] = 3221225472;
  v164[2] = ___ZN29MTLGenerateReflectionDataPass22generateReflectionDataEPN4llvm6ModuleEjPmjRKNSt3__16vectorI20PostVertexDumpOutputNS4_9allocatorIS6_EEEEPvmS3__block_invoke_10;
  v164[3] = &unk_25111F5A8;
  serializeArguments(&v185, (uint64_t)&__p, (uint64_t)v165, (uint64_t)v164);
  if (entryPointsType[*(int *)(v14 + 48)] == 2)
  {
    v106 = v167;
    v107 = v167[3];
    *(_BYTE *)v107 = v140;
    *(_WORD *)((char *)v107 + 1) = 0;
    *((_BYTE *)v107 + 3) = 0;
    v106[3] = (void **)((char *)v106[3] + 4);
    MTLArgumentData::MTLArgumentData((MTLArgumentData *)&v221);
    extractOutputImageBlockDataFromMetadata((FunctionDesc *)v14, (MTLArgumentData *)&v221);
    if ((v221 & 0x1F0) == 0x90)
    {
      v201 = v225;
      v202 = v226;
      v203 = v227;
      v197 = v221;
      *(_OWORD *)__len = v222;
      v199 = v223;
      v200 = v224;
      v204 = v228;
      v205 = v229;
      if (v229)
      {
        v108 = (unint64_t *)&v229->__shared_owners_;
        do
          v109 = __ldxr(v108);
        while (__stxr(v109 + 1, v108));
      }
      v206 = v230;
      v207 = v231;
      if (v231)
      {
        v110 = (unint64_t *)&v231->__shared_owners_;
        do
          v111 = __ldxr(v110);
        while (__stxr(v111 + 1, v110));
      }
      v208 = v232;
      v209 = v233;
      if (v233)
      {
        v112 = (unint64_t *)&v233->__shared_owners_;
        do
          v113 = __ldxr(v112);
        while (__stxr(v113 + 1, v112));
      }
      v210 = v234;
      v211 = v235;
      v212 = v236;
      v213 = 0;
      v215 = 0;
      v214 = 0;
      std::vector<MTLStructMemberInfo>::__init_with_size[abi:ne180100]<MTLStructMemberInfo*,MTLStructMemberInfo*>(&v213, v237, v238, 0x2E8BA2E8BA2E8BA3 * (v238 - v237));
      v216 = v239;
      v217 = v240;
      v218 = v241;
      v219 = v242;
      v162 = 0;
      v163 = 0;
      v161 = 0;
      v195 = &v161;
      v196 = 0;
      v161 = (char *)operator new(0x120uLL);
      v162 = (uint64_t)v161;
      v163 = v161 + 288;
      v162 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<MTLArgumentData>,MTLArgumentData const*,MTLArgumentData const*,MTLArgumentData*>((uint64_t)&v163, &v197, (__int128 *)&v220, (uint64_t)v161);
      v195 = (char **)&v213;
      std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v195);
      std::shared_ptr<MTLArgumentData>::~shared_ptr[abi:ne180100]((uint64_t)&v208);
      std::shared_ptr<MTLArgumentData>::~shared_ptr[abi:ne180100]((uint64_t)&v206);
      std::shared_ptr<MTLArgumentData>::~shared_ptr[abi:ne180100]((uint64_t)&v204);
      v160[1] = 3221225472;
      v160[2] = ___ZN29MTLGenerateReflectionDataPass22generateReflectionDataEPN4llvm6ModuleEjPmjRKNSt3__16vectorI20PostVertexDumpOutputNS4_9allocatorIS6_EEEEPvmS3__block_invoke_11;
      v160[3] = &unk_25111F580;
      v160[4] = &v166;
      v159[0] = v62;
      v159[1] = 3221225472;
      v159[2] = ___ZN29MTLGenerateReflectionDataPass22generateReflectionDataEPN4llvm6ModuleEjPmjRKNSt3__16vectorI20PostVertexDumpOutputNS4_9allocatorIS6_EEEEPvmS3__block_invoke_12;
      v159[3] = &unk_25111F5A8;
      v159[4] = &v166;
      v160[0] = v62;
      serializeArguments((uint64_t *)&v161, (uint64_t)&__p, (uint64_t)v160, (uint64_t)v159);
      *(_QWORD *)&v197 = &v161;
      std::vector<MTLArgumentData>::__destroy_vector::operator()[abi:ne180100]((void ***)&v197);
    }
    *(_QWORD *)&v197 = &v237;
    std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v197);
    v114 = v233;
    if (v233)
    {
      v115 = (unint64_t *)&v233->__shared_owners_;
      do
        v116 = __ldaxr(v115);
      while (__stlxr(v116 - 1, v115));
      if (!v116)
      {
        ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
        std::__shared_weak_count::__release_weak(v114);
      }
    }
    v117 = v231;
    if (v231)
    {
      v118 = (unint64_t *)&v231->__shared_owners_;
      do
        v119 = __ldaxr(v118);
      while (__stlxr(v119 - 1, v118));
      if (!v119)
      {
        ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
        std::__shared_weak_count::__release_weak(v117);
      }
    }
    v120 = v229;
    if (v229)
    {
      v121 = (unint64_t *)&v229->__shared_owners_;
      do
        v122 = __ldaxr(v121);
      while (__stlxr(v122 - 1, v121));
      if (!v122)
      {
        ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
        std::__shared_weak_count::__release_weak(v120);
      }
    }
    v97 = v154;
  }
  if ((v63 | 2) == 3)
  {
    v123 = v167;
    *(_DWORD *)v167[3] = a5;
    v123[3] = (void **)((char *)v123[3] + 4);
    v124 = v167;
    *(_DWORD *)v167[3] = v97;
    v124[3] = (void **)((char *)v124[3] + 4);
    v158[1] = 3221225472;
    v158[2] = ___ZN29MTLGenerateReflectionDataPass22generateReflectionDataEPN4llvm6ModuleEjPmjRKNSt3__16vectorI20PostVertexDumpOutputNS4_9allocatorIS6_EEEEPvmS3__block_invoke_13;
    v158[3] = &unk_25111F580;
    v158[4] = &v166;
    v157[0] = v62;
    v157[1] = 3221225472;
    v157[2] = ___ZN29MTLGenerateReflectionDataPass22generateReflectionDataEPN4llvm6ModuleEjPmjRKNSt3__16vectorI20PostVertexDumpOutputNS4_9allocatorIS6_EEEEPvmS3__block_invoke_14;
    v157[3] = &unk_25111F5A8;
    v157[4] = &v166;
    v158[0] = v62;
    serializePostVertexDumpOutputs(a6, (uint64_t)v158, (uint64_t)v157);
  }
  v125 = v167;
  *(_DWORD *)v167[3] = v150;
  v125[3] = (void **)((char *)v125[3] + 4);
  v126 = v167;
  *(_DWORD *)v167[3] = __n;
  v126[3] = (void **)((char *)v126[3] + 4);
  if (__n)
  {
    v127 = v167;
    memcpy(v167[3], a7, __n);
    v127[3] = (void **)((char *)v127[3] + __n);
  }
  if (v144 == 6)
  {
    v128 = v167;
    v129 = v167[3];
    *(_BYTE *)v129 = *(_BYTE *)(v14 + 70) & 3;
    *(_WORD *)((char *)v129 + 1) = 0;
    *((_BYTE *)v129 + 3) = 0;
    v128[3] = (void **)((char *)v128[3] + 4);
    v130 = *(_QWORD *)(v14 + 104) - *(_QWORD *)(v14 + 96);
    v131 = v167;
    v132 = v167[3];
    *(_BYTE *)v132 = v130 >> 3;
    *((_BYTE *)v132 + 1) = v130 >> 11;
    *((_BYTE *)v132 + 2) = v130 >> 19;
    *((_BYTE *)v132 + 3) = v130 >> 27;
    v131[3] = (void **)((char *)v131[3] + 4);
    v133 = *(_QWORD *)(v14 + 96);
    if (*(_QWORD *)(v14 + 104) != v133)
    {
      v134 = 0;
      v135 = 1;
      do
      {
        v136 = *(_QWORD *)(v133 + 8 * v134);
        v137 = v167;
        *(_DWORD *)v167[3] = v136;
        v137[3] = (void **)((char *)v137[3] + 4);
        v134 = v135;
        v133 = *(_QWORD *)(v14 + 96);
        ++v135;
      }
      while (v134 < (*(_QWORD *)(v14 + 104) - v133) >> 3);
    }
  }
  v138 = v167;
  *(_DWORD *)v167[3] = v95;
  v138[3] = (void **)((char *)v138[3] + 4);
  v156[1] = 3221225472;
  v156[2] = ___ZN29MTLGenerateReflectionDataPass22generateReflectionDataEPN4llvm6ModuleEjPmjRKNSt3__16vectorI20PostVertexDumpOutputNS4_9allocatorIS6_EEEEPvmS3__block_invoke_15;
  v156[3] = &unk_25111F580;
  v156[4] = &v166;
  v155[0] = v62;
  v155[1] = 3221225472;
  v155[2] = ___ZN29MTLGenerateReflectionDataPass22generateReflectionDataEPN4llvm6ModuleEjPmjRKNSt3__16vectorI20PostVertexDumpOutputNS4_9allocatorIS6_EEEEPvmS3__block_invoke_16;
  v155[3] = &unk_25111F5A8;
  v155[4] = &v166;
  v156[0] = v62;
  serializeArguments((uint64_t *)&v172, (uint64_t)&__p, (uint64_t)v156, (uint64_t)v155);
  *v147 = v182[3];
  _Block_object_dispose(&v166, 8);
  *(_QWORD *)&v221 = &v172;
  std::vector<MTLArgumentData>::__destroy_vector::operator()[abi:ne180100]((void ***)&v221);
  std::__tree<std::__value_type<llvm::Function *,llvm::Value *>,std::__map_value_compare<llvm::Function *,std::__value_type<llvm::Function *,llvm::Value *>,std::less<llvm::Function *>,true>,std::allocator<std::__value_type<llvm::Function *,llvm::Value *>>>::destroy((uint64_t)&__p, v193);
  _Block_object_dispose(&v181, 8);
  *(_QWORD *)&v221 = &v185;
  std::vector<MTLArgumentData>::__destroy_vector::operator()[abi:ne180100]((void ***)&v221);
  *(_QWORD *)&v221 = &v188;
  std::vector<MTLArgumentData>::__destroy_vector::operator()[abi:ne180100]((void ***)&v221);
  *(_QWORD *)&v221 = v191;
  std::vector<FunctionDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v221);
  return v9;
}

void sub_24104AC20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a66;
  unint64_t v66;

  STACK[0x368] = v66;
  llvm::DenseMap<llvm::Metadata *,std::vector<MTLStructMemberInfo> *,llvm::DenseMapInfo<llvm::Metadata *,void>,llvm::detail::DenseMapPair<llvm::Metadata *,std::vector<MTLStructMemberInfo> *>>::~DenseMap((uint64_t)&a66);
  MTLArgumentData::~MTLArgumentData((MTLArgumentData *)&STACK[0x3D0]);
  MEMORY[0x24268C8C4](&STACK[0x4F8]);
  STACK[0x4F8] = (unint64_t)&STACK[0x340];
  std::vector<MTLArgumentData>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x4F8]);
  STACK[0x3D0] = (unint64_t)&STACK[0x360];
  std::vector<MTLArgumentData>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3D0]);
  STACK[0x3D0] = (unint64_t)&STACK[0x378];
  std::vector<MTLArgumentData>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3D0]);
  STACK[0x3D0] = (unint64_t)&STACK[0x390];
  std::vector<FunctionDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3D0]);
  _Unwind_Resume(a1);
}

void StitchingReflection::~StitchingReflection(void **this)
{
  void **v2;

  std::__hash_table<std::__hash_value_type<std::string,MTLCompilerDataType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLCompilerDataType>>>::~__hash_table((uint64_t)(this + 39));
  v2 = this + 28;
  std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::shared_ptr<MTLArgumentData>::~shared_ptr[abi:ne180100]((uint64_t)(this + 21));
  std::shared_ptr<MTLArgumentData>::~shared_ptr[abi:ne180100]((uint64_t)(this + 19));
  std::shared_ptr<MTLArgumentData>::~shared_ptr[abi:ne180100]((uint64_t)(this + 17));
  v2 = this;
  std::vector<MTLArgumentData>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t serializeArguments(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  size_t v22;
  uint64_t v23;
  const char *v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD v32[2];
  __int128 v33;
  unsigned __int8 v34;

  v9 = *a1;
  v8 = a1[1];
  v10 = 0x8E38E38E38E38E39 * ((v8 - *a1) >> 5);
  result = (*(uint64_t (**)(uint64_t, unint64_t))(a3 + 16))(a3, v10);
  if (v8 != v9)
  {
    v12 = 0;
    if (v10 <= 1)
      v13 = 1;
    else
      v13 = v10;
    v14 = v13;
    do
    {
      v15 = *a1;
      v16 = (unsigned int *)(*a1 + v12);
      (*(void (**)(uint64_t, unsigned int *))(a4 + 16))(a4, v16 + 4);
      (*(void (**)(uint64_t, _QWORD))(a3 + 16))(a3, (*v16 << 6) & 0x200 | (*v16 >> 4));
      v17 = *v16;
      if ((*v16 & 4) == 0)
      {
        (*(void (**)(uint64_t, _QWORD))(a3 + 16))(a3, v16[1]);
        (*(void (**)(uint64_t, _QWORD))(a3 + 16))(a3, v16[2]);
        v17 = *v16;
      }
      switch((v17 >> 4) & 0x1F)
      {
        case 1u:
        case 2u:
        case 3u:
        case 8u:
        case 0xEu:
        case 0x15u:
          v18 = (unsigned int *)(v15 + v12);
          (*(void (**)(uint64_t, _QWORD))(a3 + 16))(a3, *(unsigned int *)(v15 + v12 + 48));
          v19 = *(unsigned int *)(v15 + v12 + 236);
          (*(void (**)(uint64_t, _QWORD))(a3 + 16))(a3, v18[58]);
          (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, v19);
          (*(void (**)(uint64_t, _QWORD))(a3 + 16))(a3, v18[13]);
          v20 = v18[14];
          goto LABEL_24;
        case 4u:
          LODWORD(v32[0]) = 0;
          v34 = 0;
          v21 = *(char **)(v15 + v12 + 32);
          v22 = strlen(v21);
          LODWORD(v21) = textureTypeFromString(v21, v22, v32, &v34);
          (*(void (**)(uint64_t, _QWORD))(a3 + 16))(a3, LODWORD(v32[0]));
          v20 = v21 | (v34 << 16);
          goto LABEL_24;
        case 5u:
        case 0xBu:
        case 0xCu:
        case 0xDu:
        case 0x10u:
        case 0x11u:
        case 0x12u:
        case 0x13u:
          break;
        case 6u:
          v23 = v15 + v12;
          v24 = *(const char **)(v15 + v12 + 32);
          v25 = strlen(v24);
          v26 = dataTypeFromString(v24, v25);
          (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, v26);
          v20 = *(unsigned int *)(v23 + 12);
          goto LABEL_24;
        case 9u:
          v27 = v15 + v12;
          goto LABEL_14;
        case 0xAu:
          v27 = v15 + v12;
          (*(void (**)(uint64_t, _QWORD))(a3 + 16))(a3, *(unsigned int *)(v15 + v12 + 184));
LABEL_14:
          (*(void (**)(uint64_t, _QWORD))(a3 + 16))(a3, *(unsigned int *)(v27 + 188));
          if (*(_QWORD *)(v27 + 192))
            serializeStructInfo((char *)(v27 + 200), a2, a3, a4, 0);
          else
            (*(void (**)(uint64_t, _QWORD))(a3 + 16))(a3, 0);
          (*(void (**)(uint64_t, _QWORD))(a3 + 16))(a3, *(unsigned __int8 *)(v15 + v12 + 224));
          v20 = *(unsigned int *)(v15 + v12 + 228);
LABEL_24:
          (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, v20);
          break;
        case 0x14u:
          v32[0] = *(_OWORD *)(v15 + v12 + 240);
          v32[1] = *(_OWORD *)(v15 + v12 + 256);
          v33 = *(_OWORD *)(v15 + v12 + 272);
          serializeStitchingTypeInfo((unsigned int *)v32, a3);
          if (LODWORD(v32[0]) == 1 || LODWORD(v32[0]) == 138 || LODWORD(v32[0]) == 60 && HIDWORD(v32[0]) == 1)
            serializeStitchingStructInfo(*(_QWORD **)(v15 + v12 + 160), v33, *((uint64_t *)&v33 + 1), a3, a4);
          break;
        case 0x16u:
          v28 = dataTypeFromString("mesh", 4uLL);
          (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, v28);
          v29 = v15 + v12;
          (*(void (**)(uint64_t, _QWORD))(a3 + 16))(a3, *(unsigned int *)(v15 + v12 + 12));
          (*(void (**)(uint64_t, _QWORD))(a3 + 16))(a3, *(unsigned int *)(v15 + v12 + 60));
          (*(void (**)(uint64_t, _QWORD))(a3 + 16))(a3, *(unsigned int *)(v15 + v12 + 64));
          (*(void (**)(uint64_t, _QWORD))(a3 + 16))(a3, *(unsigned int *)(v15 + v12 + 68));
          serializeStructInfo(*(char **)(v29 + 168), a2, a3, a4, (*(_DWORD *)v29 >> 12) & 1);
          serializeStructInfo(*(char **)(v29 + 176), a2, a3, a4, (*(_DWORD *)v29 >> 12) & 1);
          break;
        default:
          abort();
      }
      v12 += 288;
      --v14;
    }
    while (v14);
    v30 = 0;
    do
    {
      v31 = *a1 + v30;
      if (*(_QWORD *)(v31 + 72))
        result = serializeStructInfo(*(char **)(v31 + 160), a2, a3, a4, (*(_DWORD *)v31 >> 12) & 1);
      else
        result = (*(uint64_t (**)(uint64_t, _QWORD))(a3 + 16))(a3, 0);
      v30 += 288;
      --v13;
    }
    while (v13);
  }
  return result;
}

uint64_t ___ZN29MTLGenerateReflectionDataPass22generateReflectionDataEPN4llvm6ModuleEjPmjRKNSt3__16vectorI20PostVertexDumpOutputNS4_9allocatorIS6_EEEEPvmS3__block_invoke(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) += 4;
  return result;
}

uint64_t ___ZN29MTLGenerateReflectionDataPass22generateReflectionDataEPN4llvm6ModuleEjPmjRKNSt3__16vectorI20PostVertexDumpOutputNS4_9allocatorIS6_EEEEPvmS3__block_invoke_2(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = a2[1];
  if (!v2 || *(_BYTE *)(v2 + *a2 - 1))
    LODWORD(v2) = v2 + 1;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) += v2;
  return result;
}

uint64_t extractOutputImageBlockDataFromMetadata(FunctionDesc *a1, MTLArgumentData *a2)
{
  uint64_t *v3;
  const llvm::DataLayout *DataLayout;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  void **v33[2];
  int v34;
  _OWORD v35[7];
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 *v45;
  __int128 *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _BYTE v51[432];
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v3 = (uint64_t *)((char *)a1 + 16);
  DataLayout = (const llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)a1 + 40));
  llvm::DataLayout::DataLayout((llvm::DataLayout *)v51, DataLayout);
  v5 = *v3;
  if (*v3 && *(_DWORD *)(v5 + 8))
  {
    v6 = 0;
    while (1)
    {
      MTLArgumentData::MTLArgumentData((MTLArgumentData *)v35);
      v7 = *(_QWORD *)(v5 - 8 * *(unsigned int *)(v5 + 8) + 8 * v6);
      v33[0] = 0;
      v33[1] = 0;
      v34 = 0;
      parseArgumentMetadata((uint64_t)v35, v7, 0, 0, (uint64_t)v51, 1, (uint64_t *)v33, 7);
      if ((v35[0] & 0x1F0) == 0x90)
        break;
      llvm::DenseMap<llvm::Metadata *,std::vector<MTLStructMemberInfo> *,llvm::DenseMapInfo<llvm::Metadata *,void>,llvm::detail::DenseMapPair<llvm::Metadata *,std::vector<MTLStructMemberInfo> *>>::~DenseMap((uint64_t)v33);
      v33[0] = (void **)&v45;
      std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100](v33);
      v8 = v41;
      if (v41)
      {
        p_shared_owners = (unint64_t *)&v41->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v11 = v39;
      if (v39)
      {
        v12 = (unint64_t *)&v39->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      v14 = v37;
      if (v37)
      {
        v15 = (unint64_t *)&v37->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      if (++v6 >= (unint64_t)*(unsigned int *)(v5 + 8))
        return MEMORY[0x24268C8C4](v51);
    }
    v17 = v35[5];
    *((_OWORD *)a2 + 4) = v35[4];
    *((_OWORD *)a2 + 5) = v17;
    *((_OWORD *)a2 + 6) = v35[6];
    v18 = v35[1];
    *(_OWORD *)a2 = v35[0];
    *((_OWORD *)a2 + 1) = v18;
    v19 = v35[3];
    *((_OWORD *)a2 + 2) = v35[2];
    *((_OWORD *)a2 + 3) = v19;
    std::shared_ptr<std::vector<MTLStructMemberInfo>>::operator=[abi:ne180100]((_QWORD *)a2 + 14, &v36);
    std::shared_ptr<std::vector<MTLStructMemberInfo>>::operator=[abi:ne180100]((_QWORD *)a2 + 16, &v38);
    std::shared_ptr<std::vector<MTLStructMemberInfo>>::operator=[abi:ne180100]((_QWORD *)a2 + 18, &v40);
    v20 = v43;
    *((_OWORD *)a2 + 10) = v42;
    *((_OWORD *)a2 + 11) = v20;
    *((_QWORD *)a2 + 24) = v44;
    if (v35 != (_OWORD *)a2)
      std::vector<MTLStructMemberInfo>::__assign_with_size[abi:ne180100]<MTLStructMemberInfo*,MTLStructMemberInfo*>((uint64_t *)a2 + 25, v45, v46, 0x2E8BA2E8BA2E8BA3 * (v46 - v45));
    v21 = v48;
    *((_OWORD *)a2 + 14) = v47;
    *((_OWORD *)a2 + 15) = v21;
    v22 = v50;
    *((_OWORD *)a2 + 16) = v49;
    *((_OWORD *)a2 + 17) = v22;
    llvm::DenseMap<llvm::Metadata *,std::vector<MTLStructMemberInfo> *,llvm::DenseMapInfo<llvm::Metadata *,void>,llvm::detail::DenseMapPair<llvm::Metadata *,std::vector<MTLStructMemberInfo> *>>::~DenseMap((uint64_t)v33);
    v33[0] = (void **)&v45;
    std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100](v33);
    v23 = v41;
    if (v41)
    {
      v24 = (unint64_t *)&v41->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = v39;
    if (v39)
    {
      v27 = (unint64_t *)&v39->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v29 = v37;
    if (v37)
    {
      v30 = (unint64_t *)&v37->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
  }
  return MEMORY[0x24268C8C4](v51);
}

void sub_24104B608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  llvm::DenseMap<llvm::Metadata *,std::vector<MTLStructMemberInfo> *,llvm::DenseMapInfo<llvm::Metadata *,void>,llvm::detail::DenseMapPair<llvm::Metadata *,std::vector<MTLStructMemberInfo> *>>::~DenseMap((uint64_t)&a9);
  MTLArgumentData::~MTLArgumentData((MTLArgumentData *)&a12);
  MEMORY[0x24268C8C4](&a48);
  _Unwind_Resume(a1);
}

uint64_t ___ZN29MTLGenerateReflectionDataPass22generateReflectionDataEPN4llvm6ModuleEjPmjRKNSt3__16vectorI20PostVertexDumpOutputNS4_9allocatorIS6_EEEEPvmS3__block_invoke_3(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) += 4;
  return result;
}

uint64_t ___ZN29MTLGenerateReflectionDataPass22generateReflectionDataEPN4llvm6ModuleEjPmjRKNSt3__16vectorI20PostVertexDumpOutputNS4_9allocatorIS6_EEEEPvmS3__block_invoke_4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = a2[1];
  if (!v2 || *(_BYTE *)(v2 + *a2 - 1))
    LODWORD(v2) = v2 + 1;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) += v2;
  return result;
}

void serializePostVertexDumpOutputs(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  std::string::size_type size;
  std::string *v13;
  uint64_t v14;
  std::string::size_type v15;
  std::string *p_p;
  std::string *v17;
  std::string::size_type v18;
  __int128 v19;
  std::string v20;
  __int128 v21;
  uint64_t v22;
  std::string __p;
  unsigned int v24;

  (*(void (**)(uint64_t, _QWORD))(a2 + 16))(a2, -1431655765 * ((a1[1] - *a1) >> 5));
  v6 = a1[1];
  if (*a1 != v6)
  {
    v7 = *a1 + 64;
    do
    {
      v19 = *(_OWORD *)(v7 - 64);
      if (*(char *)(v7 - 25) < 0)
      {
        std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)(v7 - 48), *(_QWORD *)(v7 - 40));
      }
      else
      {
        v8 = *(_OWORD *)(v7 - 48);
        v20.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 - 32);
        *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v8;
      }
      v9 = v7 - 64;
      v10 = *(_OWORD *)(v7 - 24);
      v22 = *(_QWORD *)(v7 - 8);
      v21 = v10;
      if (*(char *)(v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v7, *(_QWORD *)(v7 + 8));
      }
      else
      {
        v11 = *(_OWORD *)v7;
        __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 16);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
      }
      v24 = *(_DWORD *)(v7 + 24);
      size = HIBYTE(v20.__r_.__value_.__r.__words[2]);
      v13 = (std::string *)v20.__r_.__value_.__r.__words[0];
      if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v20.__r_.__value_.__l.__size_;
      else
        v13 = &v20;
      v17 = v13;
      v18 = size;
      (*(void (**)(uint64_t, std::string **))(a3 + 16))(a3, &v17);
      (*(void (**)(uint64_t, _QWORD))(a2 + 16))(a2, v21);
      v14 = v22;
      (*(void (**)(uint64_t, _QWORD))(a2 + 16))(a2, DWORD2(v21));
      (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a2, v14);
      v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v15 = __p.__r_.__value_.__l.__size_;
      else
        p_p = &__p;
      v17 = p_p;
      v18 = v15;
      (*(void (**)(uint64_t, std::string **))(a3 + 16))(a3, &v17);
      (*(void (**)(uint64_t, _QWORD))(a2 + 16))(a2, v24);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
      v7 += 96;
    }
    while (v9 + 96 != v6);
  }
}

void sub_24104B860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN29MTLGenerateReflectionDataPass22generateReflectionDataEPN4llvm6ModuleEjPmjRKNSt3__16vectorI20PostVertexDumpOutputNS4_9allocatorIS6_EEEEPvmS3__block_invoke_5(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) += 4;
  return result;
}

uint64_t ___ZN29MTLGenerateReflectionDataPass22generateReflectionDataEPN4llvm6ModuleEjPmjRKNSt3__16vectorI20PostVertexDumpOutputNS4_9allocatorIS6_EEEEPvmS3__block_invoke_6(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = a2[1];
  if (!v2 || *(_BYTE *)(v2 + *a2 - 1))
    LODWORD(v2) = v2 + 1;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) += v2;
  return result;
}

uint64_t ___ZN29MTLGenerateReflectionDataPass22generateReflectionDataEPN4llvm6ModuleEjPmjRKNSt3__16vectorI20PostVertexDumpOutputNS4_9allocatorIS6_EEEEPvmS3__block_invoke_7(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) += 4;
  return result;
}

uint64_t ___ZN29MTLGenerateReflectionDataPass22generateReflectionDataEPN4llvm6ModuleEjPmjRKNSt3__16vectorI20PostVertexDumpOutputNS4_9allocatorIS6_EEEEPvmS3__block_invoke_8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = a2[1];
  if (!v2 || *(_BYTE *)(v2 + *a2 - 1))
    LODWORD(v2) = v2 + 1;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) += v2;
  return result;
}

uint64_t ___ZN29MTLGenerateReflectionDataPass22generateReflectionDataEPN4llvm6ModuleEjPmjRKNSt3__16vectorI20PostVertexDumpOutputNS4_9allocatorIS6_EEEEPvmS3__block_invoke_9(uint64_t result, int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
  **(_DWORD **)(v2 + 24) = a2;
  *(_QWORD *)(v2 + 24) += 4;
  return result;
}

uint64_t ___ZN29MTLGenerateReflectionDataPass22generateReflectionDataEPN4llvm6ModuleEjPmjRKNSt3__16vectorI20PostVertexDumpOutputNS4_9allocatorIS6_EEEEPvmS3__block_invoke_11(uint64_t result, int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
  **(_DWORD **)(v2 + 24) = a2;
  *(_QWORD *)(v2 + 24) += 4;
  return result;
}

uint64_t ___ZN29MTLGenerateReflectionDataPass22generateReflectionDataEPN4llvm6ModuleEjPmjRKNSt3__16vectorI20PostVertexDumpOutputNS4_9allocatorIS6_EEEEPvmS3__block_invoke_13(uint64_t result, int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
  **(_DWORD **)(v2 + 24) = a2;
  *(_QWORD *)(v2 + 24) += 4;
  return result;
}

uint64_t ___ZN29MTLGenerateReflectionDataPass22generateReflectionDataEPN4llvm6ModuleEjPmjRKNSt3__16vectorI20PostVertexDumpOutputNS4_9allocatorIS6_EEEEPvmS3__block_invoke_15(uint64_t result, int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
  **(_DWORD **)(v2 + 24) = a2;
  *(_QWORD *)(v2 + 24) += 4;
  return result;
}

void MTLGenerateReflectionDataPass::patchTraceBufferReflectionData(MTLGenerateReflectionDataPass *this, llvm::Module *a2, char *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  llvm::MDString *v10;
  uint64_t String;
  uint64_t v12;
  BOOL v13;
  uint64_t v15;
  uint64_t v16;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void **v28;

  v25 = 0;
  v26 = 0;
  v27 = 0;
  parseFunctions(a2, &v25);
  if (v26 == v25)
    goto LABEL_34;
  if (a4 == -1)
    goto LABEL_34;
  if (!a3)
    goto LABEL_34;
  v4 = *(_QWORD *)(v25 + 8);
  if (!v4)
    goto LABEL_34;
  v24 = *(unsigned int *)(v4 + 8);
  if (!(_DWORD)v24)
    goto LABEL_34;
  for (i = 0; i != v24; ++i)
  {
    v6 = *(_QWORD *)(v4 - 8 * *(unsigned int *)(v4 + 8) + 8 * i);
    v7 = *(_DWORD *)(v6 + 8);
    if (!v7)
      continue;
    v8 = 0;
    v9 = -1;
    while (1)
    {
      v10 = *(llvm::MDString **)(v6 - 8 * *(unsigned int *)(v6 + 8) + 8 * v8);
      if (!*(_BYTE *)v10)
      {
        String = llvm::MDString::getString(*(llvm::MDString **)(v6 - 8 * *(unsigned int *)(v6 + 8) + 8 * v8));
        if (v12 == 18)
        {
          v13 = *(_QWORD *)String == 0x61636F6C2E726961 && *(_QWORD *)(String + 8) == 0x646E695F6E6F6974;
          if (v13 && *(_WORD *)(String + 16) == 30821)
          {
            v20 = *(_QWORD *)(*(_QWORD *)(v6 - 8 * *(unsigned int *)(v6 + 8) + 8 * (v8 + 1)) + 128);
            v21 = (_QWORD *)(v20 + 24);
            if (*(_DWORD *)(v20 + 32) >= 0x41u)
              v21 = (_QWORD *)*v21;
            v9 = *(_DWORD *)v21;
            v8 += 2;
            goto LABEL_10;
          }
        }
        v15 = llvm::MDString::getString(v10);
        if (v16 == 12 && *(_QWORD *)v15 == 0x5F6772612E726961 && *(_DWORD *)(v15 + 8) == 1701667182)
        {
          v18 = (const void *)llvm::MDString::getString(*(llvm::MDString **)(v6
                                                                           - 8 * *(unsigned int *)(v6 + 8)
                                                                           + 8 * (v8 + 1)));
          if (v19 == 37 && !memcmp(v18, "__resource_tracking_impl_trace_buffer", 0x25uLL))
            break;
        }
      }
LABEL_10:
      if (++v8 >= v7)
        goto LABEL_33;
    }
    if (v9 != -1)
    {
      *(_DWORD *)&a3[a4] = v9;
      break;
    }
LABEL_33:
    ;
  }
LABEL_34:
  v28 = (void **)&v25;
  std::vector<FunctionDesc>::__destroy_vector::operator()[abi:ne180100](&v28);
}

void sub_24104BD44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a13;
  std::vector<FunctionDesc>::__destroy_vector::operator()[abi:ne180100](&a16);
  _Unwind_Resume(a1);
}

uint64_t std::vector<MTLStructMemberInfo>::__base_destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;
  void **v5;

  v3 = result;
  for (i = *(_QWORD *)(result + 8); i != a2; i -= 176)
  {
    v5 = (void **)(i - 72);
    std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100](&v5);
    result = std::shared_ptr<MTLArgumentData>::~shared_ptr[abi:ne180100](i - 120);
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

void std::vector<AttributeDescriptor>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 5)
  {
    if (a2 >> 59)
      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<VaryingInfo>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFE0];
    v9 = &v6[32 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v13;
        v12 -= 32;
        v10 -= 32;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t serializeStructInfo(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  int v20;
  uint64_t StructIndirectArgumentIndexStride;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  char *v56;
  uint64_t v57;
  char *v58;
  char **v59;
  char v60;
  __int128 v61[7];
  uint64_t v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  _QWORD v71[3];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;

  *(_QWORD *)&v76 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD **)(a2 + 8);
  if (v8)
  {
    v9 = (_QWORD *)(a2 + 8);
    do
    {
      v10 = v8[4];
      v11 = v10 >= (unint64_t)a1;
      if (v10 >= (unint64_t)a1)
        v12 = v8;
      else
        v12 = v8 + 1;
      if (v11)
        v9 = v8;
      v8 = (_QWORD *)*v12;
    }
    while (*v12);
    if (v9 != (_QWORD *)(a2 + 8) && v9[4] <= (unint64_t)a1)
      return (*(uint64_t (**)(uint64_t, _QWORD))(a3 + 16))(a3, *((unsigned int *)v9 + 10));
  }
  v13 = *(_DWORD *)(a2 + 16);
  v56 = a1;
  *(_QWORD *)&v61[0] = &v56;
  *((_DWORD *)std::__tree<std::__value_type<std::vector<MTLStructMemberInfo> const*,unsigned int>,std::__map_value_compare<std::vector<MTLStructMemberInfo> const*,std::__value_type<std::vector<MTLStructMemberInfo> const*,unsigned int>,std::less<std::vector<MTLStructMemberInfo> const*>,true>,std::allocator<std::__value_type<std::vector<MTLStructMemberInfo> const*,unsigned int>>>::__emplace_unique_key_args<std::vector<MTLStructMemberInfo> const*,std::piecewise_construct_t const&,std::tuple<std::vector<MTLStructMemberInfo> const*&&>,std::tuple<>>((uint64_t **)a2, (unint64_t *)&v56, (uint64_t)&std::piecewise_construct, (_QWORD **)v61)+ 10) = v13 + 1;
  (*(void (**)(uint64_t))(a3 + 16))(a3);
  v14 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)a1 + 1) - *(_QWORD *)a1) >> 4);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a3, v14);
  v53 = v14;
  if ((_DWORD)v14)
  {
    v16 = 0;
    do
    {
      v17 = *(_QWORD *)a1;
      (*(void (**)(uint64_t, uint64_t))(a4 + 16))(a4, *(_QWORD *)a1 + 176 * v16);
      (*(void (**)(uint64_t, _QWORD))(a3 + 16))(a3, *(unsigned int *)(v17 + 176 * v16 + 32));
      (*(void (**)(uint64_t, _QWORD))(a3 + 16))(a3, *(unsigned int *)(v17 + 176 * v16 + 72));
      v18 = v17 + 176 * v16;
      v20 = *(_DWORD *)(v18 + 40);
      v19 = (unsigned int *)(v18 + 40);
      if (v20)
      {
        (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, 2);
        (*(void (**)(uint64_t, _QWORD))(a3 + 16))(a3, 0);
        (*(void (**)(uint64_t, _QWORD))(a3 + 16))(a3, 0);
        (*(void (**)(uint64_t, _QWORD))(a3 + 16))(a3, *v19);
        (*(void (**)(uint64_t, _QWORD))(a3 + 16))(a3, *(unsigned int *)(v17 + 176 * v16 + 44));
        (*(void (**)(uint64_t, _QWORD))(a3 + 16))(a3, *(unsigned int *)(v17 + 176 * v16 + 48));
        if (a5)
        {
          if (*(_QWORD *)(v17 + 176 * v16 + 96))
            StructIndirectArgumentIndexStride = getStructIndirectArgumentIndexStride((uint64_t *)(v17 + 176 * v16 + 104));
          else
            StructIndirectArgumentIndexStride = 1;
        }
        else
        {
          StructIndirectArgumentIndexStride = 0;
        }
      }
      else
      {
        StructIndirectArgumentIndexStride = *(unsigned int *)(v17 + 176 * v16 + 36);
      }
      (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, StructIndirectArgumentIndexStride);
      v22 = v17 + 176 * v16;
      v23 = *(unsigned int *)(v22 + 88);
      (*(void (**)(uint64_t, _QWORD))(a3 + 16))(a3, *(unsigned int *)(v22 + 84));
      (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, v23);
      if (*(_QWORD *)(v17 + 176 * v16 + 96))
        serializeStructInfo(v17 + 176 * v16 + 104, a2, a3, a4, a5);
      v24 = *(_QWORD *)(v17 + 176 * v16 + 56);
      if (v24)
      {
        v25 = *(_OWORD *)v24;
        v26 = *(_OWORD *)(v24 + 32);
        v61[1] = *(_OWORD *)(v24 + 16);
        v61[2] = v26;
        v61[0] = v25;
        v27 = *(_OWORD *)(v24 + 48);
        v28 = *(_OWORD *)(v24 + 64);
        v29 = *(_OWORD *)(v24 + 96);
        v61[5] = *(_OWORD *)(v24 + 80);
        v61[6] = v29;
        v61[3] = v27;
        v61[4] = v28;
        v30 = *(std::__shared_weak_count **)(v24 + 120);
        v62 = *(_QWORD *)(v24 + 112);
        v63 = v30;
        if (v30)
        {
          p_shared_owners = (unint64_t *)&v30->__shared_owners_;
          do
            v32 = __ldxr(p_shared_owners);
          while (__stxr(v32 + 1, p_shared_owners));
        }
        v33 = *(std::__shared_weak_count **)(v24 + 136);
        v64 = *(_QWORD *)(v24 + 128);
        v65 = v33;
        if (v33)
        {
          v34 = (unint64_t *)&v33->__shared_owners_;
          do
            v35 = __ldxr(v34);
          while (__stxr(v35 + 1, v34));
        }
        v36 = *(std::__shared_weak_count **)(v24 + 152);
        v66 = *(_QWORD *)(v24 + 144);
        v67 = v36;
        if (v36)
        {
          v37 = (unint64_t *)&v36->__shared_owners_;
          do
            v38 = __ldxr(v37);
          while (__stxr(v38 + 1, v37));
        }
        v39 = *(_OWORD *)(v24 + 160);
        v40 = *(_OWORD *)(v24 + 176);
        v70 = *(_QWORD *)(v24 + 192);
        v68 = v39;
        v69 = v40;
        memset(v71, 0, sizeof(v71));
        std::vector<MTLStructMemberInfo>::__init_with_size[abi:ne180100]<MTLStructMemberInfo*,MTLStructMemberInfo*>(v71, *(__int128 **)(v24 + 200), *(__int128 **)(v24 + 208), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(v24 + 208) - *(_QWORD *)(v24 + 200)) >> 4));
        v41 = *(_OWORD *)(v24 + 224);
        v42 = *(_OWORD *)(v24 + 240);
        v43 = *(_OWORD *)(v24 + 272);
        v74 = *(_OWORD *)(v24 + 256);
        v75 = v43;
        v72 = v41;
        v73 = v42;
        v57 = 0;
        v58 = 0;
        v56 = 0;
        v59 = &v56;
        v60 = 0;
        v56 = (char *)operator new(0x120uLL);
        v57 = (uint64_t)v56;
        v58 = v56 + 288;
        v57 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<MTLArgumentData>,MTLArgumentData const*,MTLArgumentData const*,MTLArgumentData*>((uint64_t)&v58, v61, &v76, (uint64_t)v56);
        v59 = (char **)v71;
        std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
        v44 = v67;
        if (v67)
        {
          v45 = (unint64_t *)&v67->__shared_owners_;
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        v47 = v65;
        if (v65)
        {
          v48 = (unint64_t *)&v65->__shared_owners_;
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
        v50 = v63;
        if (v63)
        {
          v51 = (unint64_t *)&v63->__shared_owners_;
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
        serializeArguments(&v56, a2, a3, a4);
        *(_QWORD *)&v61[0] = &v56;
        std::vector<MTLArgumentData>::__destroy_vector::operator()[abi:ne180100]((void ***)v61);
      }
      (*(void (**)(uint64_t, _QWORD))(a3 + 16))(a3, *(unsigned int *)(v17 + 176 * v16 + 76));
      result = (*(uint64_t (**)(uint64_t, _QWORD))(a3 + 16))(a3, *(unsigned int *)(v17 + 176 * v16++ + 80));
    }
    while (v16 != v53);
  }
  return result;
}

void sub_24104C3B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23)
{
  a23 = (void **)&a18;
  std::vector<MTLArgumentData>::__destroy_vector::operator()[abi:ne180100](&a23);
  _Unwind_Resume(a1);
}

uint64_t serializeStitchingTypeInfo(unsigned int *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD))(a2 + 16))(a2, *a1);
  (*(void (**)(uint64_t, _QWORD))(a2 + 16))(a2, a1[1]);
  (*(void (**)(uint64_t, _QWORD))(a2 + 16))(a2, a1[2]);
  (*(void (**)(uint64_t, _QWORD))(a2 + 16))(a2, a1[3]);
  (*(void (**)(uint64_t, _QWORD))(a2 + 16))(a2, a1[4]);
  (*(void (**)(uint64_t, _QWORD))(a2 + 16))(a2, a1[5]);
  (*(void (**)(uint64_t, _QWORD))(a2 + 16))(a2, a1[6]);
  return (*(uint64_t (**)(uint64_t, _QWORD))(a2 + 16))(a2, a1[7]);
}

uint64_t serializeStitchingStructInfo(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  _OWORD v14[3];
  _QWORD v15[2];

  v15[0] = a2;
  v15[1] = a3;
  (*(void (**)(uint64_t, _QWORD *))(a5 + 16))(a5, v15);
  v8 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a1[1] - *a1) >> 4);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a4, v8);
  if ((_DWORD)v8)
  {
    v10 = 0;
    v11 = 176 * v8;
    do
    {
      v12 = *a1 + v10;
      (*(void (**)(uint64_t, uint64_t))(a5 + 16))(a5, v12);
      (*(void (**)(uint64_t, _QWORD))(a4 + 16))(a4, *(unsigned int *)(v12 + 32));
      (*(void (**)(uint64_t, _QWORD))(a4 + 16))(a4, *(unsigned int *)(v12 + 76));
      v13 = *(_OWORD *)(v12 + 144);
      v14[0] = *(_OWORD *)(v12 + 128);
      v14[1] = v13;
      v14[2] = *(_OWORD *)(v12 + 160);
      result = serializeStitchingTypeInfo((unsigned int *)v14, a4);
      if (LODWORD(v14[0]) == 1 || LODWORD(v14[0]) == 138 || LODWORD(v14[0]) == 60 && HIDWORD(v14[0]) == 1)
        result = serializeStitchingStructInfo(v12 + 104, *(_QWORD *)(v12 + 16), *(_QWORD *)(v12 + 24), a4, a5);
      v10 += 176;
    }
    while (v11 != v10);
  }
  return result;
}

uint64_t getStructIndirectArgumentIndexStride(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int StructIndirectArgumentIndexStride;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;

  v1 = *a1;
  v2 = a1[1] - *a1;
  if (!v2)
    return 0;
  v3 = 0x2E8BA2E8BA2E8BA3 * (v2 >> 4) - 1;
  v4 = v1 + 176 * v3;
  v5 = *(_DWORD *)(v4 + 72);
  if (*(_QWORD *)(v4 + 96))
  {
    StructIndirectArgumentIndexStride = getStructIndirectArgumentIndexStride(v1 + 176 * v3 + 104);
  }
  else
  {
    v8 = *(_QWORD *)(v1 + 176 * v3 + 56);
    if (v8)
    {
      v9 = *(_DWORD *)(v8 + 8);
      if (v9 <= 1)
        StructIndirectArgumentIndexStride = 1;
      else
        StructIndirectArgumentIndexStride = v9;
    }
    else
    {
      StructIndirectArgumentIndexStride = 1;
    }
  }
  v10 = *(_DWORD *)(v1 + 176 * v3 + 40);
  if (v10 <= 1)
    v10 = 1;
  return v5 + v10 * StructIndirectArgumentIndexStride;
}

uint64_t **std::__tree<std::__value_type<std::vector<MTLStructMemberInfo> const*,unsigned int>,std::__map_value_compare<std::vector<MTLStructMemberInfo> const*,std::__value_type<std::vector<MTLStructMemberInfo> const*,unsigned int>,std::less<std::vector<MTLStructMemberInfo> const*>,true>,std::allocator<std::__value_type<std::vector<MTLStructMemberInfo> const*,unsigned int>>>::__emplace_unique_key_args<std::vector<MTLStructMemberInfo> const*,std::piecewise_construct_t const&,std::tuple<std::vector<MTLStructMemberInfo> const*&&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  _QWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[4] = **a4;
    *((_DWORD *)v11 + 10) = 0;
    std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return (uint64_t **)v11;
  }
  return v9;
}

_QWORD *std::shared_ptr<std::vector<MTLStructMemberInfo>>::operator=[abi:ne180100](_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void **std::vector<MTLArgumentData>::reserve(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (0x8E38E38E38E38E39 * ((v4 - *a1) >> 5) < a2)
  {
    if (a2 >= 0xE38E38E38E38E4)
      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<MTLArgumentData>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 288 * v6;
    std::vector<MTLArgumentData>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<MTLArgumentData>::~__split_buffer(v7);
  }
  return result;
}

void sub_24104C880(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<MTLArgumentData>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<MTLArgumentData>::__emplace_back_slow_path<>(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  void *v11;
  MTLArgumentData *v12;
  char *v13;
  char *v14;
  uint64_t *v15;

  v2 = *a1;
  v3 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 5);
  v4 = v3 + 1;
  if (v3 + 1 > 0xE38E38E38E38E3)
    std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
  v5 = (uint64_t)(a1 + 2);
  v6 = 0x8E38E38E38E38E39 * ((a1[2] - v2) >> 5);
  if (2 * v6 > v4)
    v4 = 2 * v6;
  if (v6 >= 0x71C71C71C71C71)
    v7 = 0xE38E38E38E38E3;
  else
    v7 = v4;
  v15 = a1 + 2;
  if (v7)
    v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MTLArgumentData>>(v5, v7);
  else
    v8 = 0;
  v11 = v8;
  v12 = (MTLArgumentData *)&v8[288 * v3];
  v14 = &v8[288 * v7];
  MTLArgumentData::MTLArgumentData(v12);
  v13 = (char *)v12 + 288;
  std::vector<MTLArgumentData>::__swap_out_circular_buffer(a1, &v11);
  v9 = a1[1];
  std::__split_buffer<MTLArgumentData>::~__split_buffer(&v11);
  return v9;
}

void sub_24104C98C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<MTLArgumentData>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::pair<MTLDataType,std::pair<MTLTextureType,BOOL>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<MTLDataType,std::pair<MTLTextureType,BOOL>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<MTLDataType,std::pair<MTLTextureType,BOOL>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<MTLDataType,std::pair<MTLTextureType,BOOL>>>>>::__assign_unique<std::pair<std::string const,std::pair<MTLDataType,std::pair<MTLTextureType,BOOL>>> const*>(_QWORD *a1, std::string *__str, std::string *a3)
{
  std::string *v4;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  BOOL v9;
  void **v10;
  BOOL v11;

  v4 = __str;
  v6 = a1[1];
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v8 = a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8)
      v9 = __str == a3;
    else
      v9 = 1;
    if (v9)
    {
      v10 = (void **)v8;
    }
    else
    {
      do
      {
        std::string::operator=((std::string *)(v8 + 16), v4);
        *(_OWORD *)(v8 + 40) = *(_OWORD *)&v4[1].__r_.__value_.__l.__data_;
        *(_BYTE *)(v8 + 56) = v4[1].__r_.__value_.__s.__data_[16];
        v10 = *(void ***)v8;
        std::__hash_table<std::__hash_value_type<std::string,std::pair<MTLDataType,std::pair<MTLTextureType,BOOL>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<MTLDataType,std::pair<MTLTextureType,BOOL>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<MTLDataType,std::pair<MTLTextureType,BOOL>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<MTLDataType,std::pair<MTLTextureType,BOOL>>>>>::__node_insert_unique(a1, v8);
        v4 += 2;
        if (v10)
          v11 = v4 == a3;
        else
          v11 = 1;
        v8 = (uint64_t)v10;
      }
      while (!v11);
    }
    std::__hash_table<std::__hash_value_type<std::string,MTLCompilerDataType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLCompilerDataType>>>::__deallocate_node((int)a1, v10);
  }
  while (v4 != a3)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::pair<MTLDataType,std::pair<MTLTextureType,BOOL>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<MTLDataType,std::pair<MTLTextureType,BOOL>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<MTLDataType,std::pair<MTLTextureType,BOOL>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<MTLDataType,std::pair<MTLTextureType,BOOL>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::pair<MTLDataType,std::pair<MTLTextureType,BOOL>>> const&>((uint64_t)a1, (unsigned __int8 *)v4, (uint64_t)v4);
    v4 += 2;
  }
}

void sub_24104CA7C(void *a1)
{
  int v1;
  void **v2;

  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<std::string,MTLCompilerDataType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLCompilerDataType>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_24104CA98(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::pair<MTLDataType,std::pair<MTLTextureType,BOOL>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<MTLDataType,std::pair<MTLTextureType,BOOL>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<MTLDataType,std::pair<MTLTextureType,BOOL>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<MTLDataType,std::pair<MTLTextureType,BOOL>>>>>::__node_insert_unique(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  unsigned __int8 *v4;
  unint64_t v5;
  unsigned __int8 *v6;

  v2 = (_QWORD *)a2;
  v4 = (unsigned __int8 *)(a2 + 16);
  v5 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), a2 + 16);
  v2[1] = v5;
  v6 = std::__hash_table<std::__hash_value_type<std::string,std::pair<MTLDataType,std::pair<MTLTextureType,BOOL>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<MTLDataType,std::pair<MTLTextureType,BOOL>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<MTLDataType,std::pair<MTLTextureType,BOOL>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<MTLDataType,std::pair<MTLTextureType,BOOL>>>>>::__node_insert_unique_prepare[abi:ne180100]((uint64_t)a1, v5, v4);
  if (v6)
    return v6;
  std::__hash_table<std::__hash_value_type<std::string,std::pair<MTLDataType,std::pair<MTLTextureType,BOOL>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<MTLDataType,std::pair<MTLTextureType,BOOL>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<MTLDataType,std::pair<MTLTextureType,BOOL>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<MTLDataType,std::pair<MTLTextureType,BOOL>>>>>::__node_insert_unique_perform[abi:ne180100](a1, v2);
  return (unsigned __int8 *)v2;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::pair<MTLDataType,std::pair<MTLTextureType,BOOL>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<MTLDataType,std::pair<MTLTextureType,BOOL>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<MTLDataType,std::pair<MTLTextureType,BOOL>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<MTLDataType,std::pair<MTLTextureType,BOOL>>>>>::__node_insert_unique_prepare[abi:ne180100](uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  unint64_t v4;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *i;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
    v7.i16[0] = vaddlv_u8(v7);
    v8 = v7.u32[0];
    if (v7.u32[0] > 1uLL)
      v9 = v4 <= a2 ? a2 % v4 : a2;
    else
      v9 = (v4 - 1) & a2;
    v10 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v9);
    if (v10)
    {
      for (i = *v10; i; i = *(unsigned __int8 **)i)
      {
        v12 = *((_QWORD *)i + 1);
        if (v12 == a2)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a3) & 1) != 0)
            return i;
        }
        else
        {
          if (v8 > 1)
          {
            if (v12 >= v4)
              v12 %= v4;
          }
          else
          {
            v12 &= v4 - 1;
          }
          if (v12 != v9)
            break;
        }
      }
    }
  }
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v4 || (float)(v14 * (float)v4) < v13)
  {
    v15 = 1;
    if (v4 >= 3)
      v15 = (v4 & (v4 - 1)) != 0;
    v16 = v15 | (2 * v4);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>>>::__rehash<true>(a1, v18);
  }
  return 0;
}

_QWORD *std::__hash_table<std::__hash_value_type<std::string,std::pair<MTLDataType,std::pair<MTLTextureType,BOOL>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<MTLDataType,std::pair<MTLTextureType,BOOL>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<MTLDataType,std::pair<MTLTextureType,BOOL>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<MTLDataType,std::pair<MTLTextureType,BOOL>>>>>::__node_insert_unique_perform[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  _QWORD *v5;
  unint64_t v6;

  v2 = (int8x8_t)result[1];
  v3 = a2[1];
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    if (v3 >= *(_QWORD *)&v2)
      v3 %= *(_QWORD *)&v2;
  }
  else
  {
    v3 &= *(_QWORD *)&v2 - 1;
  }
  v5 = *(_QWORD **)(*result + 8 * v3);
  if (v5)
  {
    *a2 = *v5;
LABEL_13:
    *v5 = a2;
    goto LABEL_14;
  }
  *a2 = result[2];
  result[2] = a2;
  *(_QWORD *)(*result + 8 * v3) = result + 2;
  if (*a2)
  {
    v6 = *(_QWORD *)(*a2 + 8);
    if (v4.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v2)
        v6 %= *(_QWORD *)&v2;
    }
    else
    {
      v6 &= *(_QWORD *)&v2 - 1;
    }
    v5 = (_QWORD *)(*result + 8 * v6);
    goto LABEL_13;
  }
LABEL_14:
  ++result[3];
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::pair<MTLDataType,std::pair<MTLTextureType,BOOL>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<MTLDataType,std::pair<MTLTextureType,BOOL>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<MTLDataType,std::pair<MTLTextureType,BOOL>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<MTLDataType,std::pair<MTLTextureType,BOOL>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::pair<MTLDataType,std::pair<MTLTextureType,BOOL>>> const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::pair<MTLDataType,std::pair<MTLTextureType,BOOL>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<MTLDataType,std::pair<MTLTextureType,BOOL>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<MTLDataType,std::pair<MTLTextureType,BOOL>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<MTLDataType,std::pair<MTLTextureType,BOOL>>>>>::__construct_node_hash<std::pair<std::string const,std::pair<MTLDataType,std::pair<MTLTextureType,BOOL>>> const&>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::__unordered_map_hasher<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::hash<llvm::Value *>,std::equal_to<llvm::Value *>,true>,std::__unordered_map_equal<llvm::Value *,std::__hash_value_type<llvm::Value *,llvm::MDTuple *>,std::equal_to<llvm::Value *>,std::hash<llvm::Value *>,true>,std::allocator<std::__hash_value_type<llvm::Value *,llvm::MDTuple *>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_24104CF80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MTLCompilerDataType>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

__n128 std::__hash_table<std::__hash_value_type<std::string,std::pair<MTLDataType,std::pair<MTLTextureType,BOOL>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<MTLDataType,std::pair<MTLTextureType,BOOL>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<MTLDataType,std::pair<MTLTextureType,BOOL>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<MTLDataType,std::pair<MTLTextureType,BOOL>>>>>::__construct_node_hash<std::pair<std::string const,std::pair<MTLDataType,std::pair<MTLTextureType,BOOL>>> const&>@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *v9;
  __n128 result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x40uLL);
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)a4 = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = (std::string *)(v8 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v8 + 4) = *(_QWORD *)(a3 + 16);
  }
  result = *(__n128 *)(a3 + 24);
  *(__n128 *)(v8 + 40) = result;
  *((_QWORD *)v8 + 7) = *(_QWORD *)(a3 + 40);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_24104D038(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MTLCompilerDataType>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::vector<MTLStructMemberInfo>::__assign_with_size[abi:ne180100]<MTLStructMemberInfo*,MTLStructMemberInfo*>(uint64_t *a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t result;
  __int128 *v13;
  uint64_t v14;
  char v15;
  char v16;

  v8 = (uint64_t)(a1 + 2);
  v9 = *a1;
  if (0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 4) < a4)
  {
    std::vector<MTLStructMemberInfo>::__vdeallocate(a1);
    if (a4 > 0x1745D1745D1745DLL)
      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
    v10 = 0x5D1745D1745D1746 * ((a1[2] - *a1) >> 4);
    if (v10 <= a4)
      v10 = a4;
    if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 4)) >= 0xBA2E8BA2E8BA2ELL)
      v11 = 0x1745D1745D1745DLL;
    else
      v11 = v10;
    std::vector<MTLStructMemberInfo>::__vallocate[abi:ne180100](a1, v11);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<MTLStructMemberInfo>,MTLStructMemberInfo*,MTLStructMemberInfo*,MTLStructMemberInfo*>(v8, a2, a3, a1[1]);
    goto LABEL_11;
  }
  if (0x2E8BA2E8BA2E8BA3 * ((a1[1] - v9) >> 4) < a4)
  {
    v13 = &a2[(a1[1] - v9) >> 4];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<MTLStructMemberInfo *,MTLStructMemberInfo *,MTLStructMemberInfo *>((uint64_t)&v15, a2, v13, v9);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<MTLStructMemberInfo>,MTLStructMemberInfo*,MTLStructMemberInfo*,MTLStructMemberInfo*>(v8, v13, a3, a1[1]);
LABEL_11:
    a1[1] = result;
    return result;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<MTLStructMemberInfo *,MTLStructMemberInfo *,MTLStructMemberInfo *>((uint64_t)&v16, a2, a3, v9);
  return std::vector<MTLStructMemberInfo>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, v14);
}

void sub_24104D1D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_24104D1D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<MTLStructMemberInfo>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<MTLStructMemberInfo>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, *a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

_OWORD *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<MTLStructMemberInfo *,MTLStructMemberInfo *,MTLStructMemberInfo *>(uint64_t a1, _OWORD *a2, _OWORD *a3, uint64_t a4)
{
  _OWORD *v5;
  _OWORD *v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  if (a2 == a3)
    return a2;
  v5 = a3;
  v6 = a2 + 7;
  do
  {
    v7 = v6 - 7;
    v8 = *(v6 - 7);
    v9 = *(v6 - 6);
    v10 = *(v6 - 5);
    *(_DWORD *)(a4 + 48) = *((_DWORD *)v6 - 16);
    *(_OWORD *)(a4 + 16) = v9;
    *(_OWORD *)(a4 + 32) = v10;
    *(_OWORD *)a4 = v8;
    std::shared_ptr<std::vector<MTLStructMemberInfo>>::operator=[abi:ne180100]((_QWORD *)(a4 + 56), (uint64_t *)v6 - 7);
    v11 = *(_OWORD *)((char *)v6 - 24);
    *(_OWORD *)(a4 + 72) = *(_OWORD *)((char *)v6 - 40);
    *(_OWORD *)(a4 + 88) = v11;
    if ((_OWORD *)a4 != v6 - 7)
      std::vector<MTLStructMemberInfo>::__assign_with_size[abi:ne180100]<MTLStructMemberInfo*,MTLStructMemberInfo*>(a4 + 104);
    v12 = v6[1];
    v13 = v6[3];
    *(_OWORD *)(a4 + 144) = v6[2];
    *(_OWORD *)(a4 + 160) = v13;
    *(_OWORD *)(a4 + 128) = v12;
    a4 += 176;
    v6 += 11;
  }
  while (v7 + 11 != v5);
  return v5;
}

uint64_t std::vector<MTLStructMemberInfo>::__assign_with_size[abi:ne180100]<MTLStructMemberInfo const*,MTLStructMemberInfo const*>(uint64_t *a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t result;
  __int128 *v13;
  uint64_t v14;
  char v15;
  char v16;

  v8 = (uint64_t)(a1 + 2);
  v9 = *a1;
  if (0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 4) < a4)
  {
    std::vector<MTLStructMemberInfo>::__vdeallocate(a1);
    if (a4 > 0x1745D1745D1745DLL)
      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
    v10 = 0x5D1745D1745D1746 * ((a1[2] - *a1) >> 4);
    if (v10 <= a4)
      v10 = a4;
    if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 4)) >= 0xBA2E8BA2E8BA2ELL)
      v11 = 0x1745D1745D1745DLL;
    else
      v11 = v10;
    std::vector<MTLStructMemberInfo>::__vallocate[abi:ne180100](a1, v11);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<MTLStructMemberInfo>,MTLStructMemberInfo const*,MTLStructMemberInfo const*,MTLStructMemberInfo*>(v8, a2, a3, a1[1]);
    goto LABEL_11;
  }
  if (0x2E8BA2E8BA2E8BA3 * ((a1[1] - v9) >> 4) < a4)
  {
    v13 = &a2[(a1[1] - v9) >> 4];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<MTLStructMemberInfo *,MTLStructMemberInfo *,MTLStructMemberInfo *>((uint64_t)&v15, a2, v13, v9);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<MTLStructMemberInfo>,MTLStructMemberInfo const*,MTLStructMemberInfo const*,MTLStructMemberInfo*>(v8, v13, a3, a1[1]);
LABEL_11:
    a1[1] = result;
    return result;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<MTLStructMemberInfo *,MTLStructMemberInfo *,MTLStructMemberInfo *>((uint64_t)&v16, a2, a3, v9);
  return std::vector<MTLStructMemberInfo>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, v14);
}

void sub_24104D45C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_24104D464(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<MTLStructMemberInfo>,MTLStructMemberInfo const*,MTLStructMemberInfo const*,MTLStructMemberInfo*>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  __int128 *v6;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::allocator<MTLStructMemberInfo>::construct[abi:ne180100]<MTLStructMemberInfo,MTLStructMemberInfo const&>(a1, v4, v6);
      v6 += 11;
      v4 = v12 + 176;
      v12 += 176;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<MTLStructMemberInfo>,MTLStructMemberInfo*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_24104D500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<MTLStructMemberInfo>,MTLStructMemberInfo*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<MTLArgumentData>,MTLArgumentData const*,MTLArgumentData const*,MTLArgumentData*>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  __int128 *v6;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::allocator<MTLArgumentData>::construct[abi:ne180100]<MTLArgumentData,MTLArgumentData const&>(a1, v4, v6);
      v6 += 18;
      v4 = v12 + 288;
      v12 += 288;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<MTLArgumentData>,MTLArgumentData*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_24104D5A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<MTLArgumentData>,MTLArgumentData*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<MTLArgumentData>,MTLArgumentData*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<MTLArgumentData>,MTLArgumentData*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

uint64_t *std::_AllocatorDestroyRangeReverse<std::allocator<MTLArgumentData>,MTLArgumentData*>::operator()[abi:ne180100](uint64_t *result)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)result[1];
  v1 = (uint64_t *)result[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *result;
    do
    {
      v3 -= 288;
      result = (uint64_t *)std::allocator<MTLArgumentData>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
  return result;
}

__int128 *std::vector<MTLArgumentData>::__insert_with_size[abi:ne180100]<std::__wrap_iter<MTLArgumentData const*>,std::__wrap_iter<MTLArgumentData const*>>(uint64_t *a1, __int128 *a2, __int128 *a3, __int128 *a4, uint64_t a5)
{
  __int128 *v5;
  __int128 *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  __int128 *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void *v27[2];
  char *v28;
  char *v29;
  uint64_t v30;

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if ((uint64_t)(0x8E38E38E38E38E39 * ((uint64_t)(v11 - v12) >> 5)) >= a5)
    {
      v20 = v12 - (_QWORD)a2;
      if ((uint64_t)(0x8E38E38E38E38E39 * ((uint64_t)(v12 - (_QWORD)a2) >> 5)) >= a5)
      {
        v21 = &a3[18 * a5];
      }
      else
      {
        v21 = &a3[2 * ((uint64_t)(v12 - (_QWORD)a2) >> 5)];
        a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<MTLArgumentData>,MTLArgumentData const*,MTLArgumentData const*,MTLArgumentData*>(v9, v21, a4, *(_QWORD *)(v9 - 8));
        if (v20 < 1)
          return v5;
      }
      std::vector<MTLArgumentData>::__move_range((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)&v5[18 * a5]);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<MTLArgumentData const*,MTLArgumentData const*,MTLArgumentData*>((uint64_t)v27, (uint64_t)v7, (uint64_t)v21, (uint64_t)v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 - 0x71C71C71C71C71C7 * ((uint64_t)(v12 - *a1) >> 5);
      if (v14 > 0xE38E38E38E38E3)
        std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
      v15 = 0x8E38E38E38E38E39 * (((uint64_t)a2 - v13) >> 5);
      v16 = 0x8E38E38E38E38E39 * ((v10 - v13) >> 5);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x71C71C71C71C71)
        v18 = 0xE38E38E38E38E3;
      else
        v18 = v17;
      v30 = v9;
      if (v18)
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MTLArgumentData>>(v9, v18);
      else
        v19 = 0;
      v22 = &v19[288 * v15];
      v27[0] = v19;
      v27[1] = v22;
      v28 = v22;
      v29 = &v19[288 * v18];
      v23 = 9 * a5;
      v24 = &v22[288 * a5];
      v25 = 32 * v23;
      do
      {
        std::allocator<MTLArgumentData>::construct[abi:ne180100]<MTLArgumentData,MTLArgumentData const&>(v30, (uint64_t)v22, v7);
        v22 += 288;
        v7 += 18;
        v25 -= 288;
      }
      while (v25);
      v28 = v24;
      v5 = (__int128 *)std::vector<MTLArgumentData>::__swap_out_circular_buffer((uint64_t)a1, v27, v5);
      std::__split_buffer<MTLArgumentData>::~__split_buffer(v27);
    }
  }
  return v5;
}

void sub_24104D824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<MTLArgumentData>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 *v10;
  char v12;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v10 = (__int128 *)(a2 + v6 - a4);
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      std::allocator<MTLArgumentData>::construct[abi:ne180100]<MTLArgumentData,MTLArgumentData>(a1 + 16, v8, v10);
      v10 += 18;
      v8 += 288;
    }
    while ((unint64_t)v10 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<MTLArgumentData *,MTLArgumentData *,MTLArgumentData *>((uint64_t)&v12, a2, v7, v6);
}

uint64_t std::vector<MTLArgumentData>::__swap_out_circular_buffer(uint64_t a1, _QWORD *a2, __int128 *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = a1 + 16;
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<MTLArgumentData>,std::reverse_iterator<MTLArgumentData*>,std::reverse_iterator<MTLArgumentData*>,std::reverse_iterator<MTLArgumentData*>>(a1 + 16, (uint64_t)a3, a3, *(_QWORD *)a1, *(__int128 **)a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<MTLArgumentData>,MTLArgumentData*,MTLArgumentData*,MTLArgumentData*>(v7, a3, *(__int128 **)(a1 + 8), a2[2]);
  v9 = *(_QWORD *)a1;
  *(_QWORD *)a1 = a2[1];
  a2[1] = v9;
  v10 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = a2[2];
  a2[2] = v10;
  v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<MTLArgumentData *,MTLArgumentData *,MTLArgumentData *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  if (a3 != a2)
  {
    v7 = 0;
    do
    {
      v8 = a3 + v7;
      v9 = a4 + v7;
      v10 = (_OWORD *)(a4 + v7 - 288);
      v11 = *(_OWORD *)(a3 + v7 - 240);
      v12 = *(_OWORD *)(a3 + v7 - 224);
      v13 = *(_OWORD *)(a3 + v7 - 192);
      *(_OWORD *)(v9 - 208) = *(_OWORD *)(a3 + v7 - 208);
      *(_OWORD *)(v9 - 192) = v13;
      *(_OWORD *)(v9 - 240) = v11;
      *(_OWORD *)(v9 - 224) = v12;
      v14 = *(_OWORD *)(a3 + v7 - 288);
      v15 = *(_OWORD *)(a3 + v7 - 272);
      *(_OWORD *)(v9 - 256) = *(_OWORD *)(a3 + v7 - 256);
      *v10 = v14;
      v10[1] = v15;
      std::shared_ptr<std::vector<MTLStructMemberInfo>>::operator=[abi:ne180100](a4 + v7 - 176, (__int128 *)(a3 + v7 - 176));
      std::shared_ptr<std::vector<MTLStructMemberInfo>>::operator=[abi:ne180100](a4 + v7 - 160, (__int128 *)(a3 + v7 - 160));
      std::shared_ptr<std::vector<MTLStructMemberInfo>>::operator=[abi:ne180100](a4 + v7 - 144, (__int128 *)(a3 + v7 - 144));
      v16 = *(_QWORD *)(a3 + v7 - 96);
      v17 = *(_OWORD *)(a3 + v7 - 112);
      *(_OWORD *)(v9 - 128) = *(_OWORD *)(a3 + v7 - 128);
      *(_OWORD *)(v9 - 112) = v17;
      *(_QWORD *)(v9 - 96) = v16;
      std::vector<MTLStructMemberInfo>::__vdeallocate((uint64_t *)(a4 + v7 - 88));
      *(_OWORD *)(v9 - 88) = *(_OWORD *)(a3 + v7 - 88);
      *(_QWORD *)(v9 - 72) = *(_QWORD *)(a3 + v7 - 72);
      *(_QWORD *)(v8 - 88) = 0;
      *(_QWORD *)(v8 - 80) = 0;
      *(_QWORD *)(v8 - 72) = 0;
      v18 = *(_OWORD *)(a3 + v7 - 64);
      v19 = *(_OWORD *)(a3 + v7 - 48);
      v20 = *(_OWORD *)(a3 + v7 - 16);
      *(_OWORD *)(v9 - 32) = *(_OWORD *)(a3 + v7 - 32);
      *(_OWORD *)(v9 - 16) = v20;
      *(_OWORD *)(v9 - 64) = v18;
      *(_OWORD *)(v9 - 48) = v19;
      v7 -= 288;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

uint64_t std::shared_ptr<std::vector<MTLStructMemberInfo>>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<MTLArgumentData const*,MTLArgumentData const*,MTLArgumentData*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  if (a2 == a3)
    return a2;
  v5 = a3;
  v6 = a2 + 208;
  do
  {
    v7 = v6 - 208;
    v8 = *(_OWORD *)(v6 - 208);
    v9 = *(_OWORD *)(v6 - 176);
    *(_OWORD *)(a4 + 16) = *(_OWORD *)(v6 - 192);
    *(_OWORD *)(a4 + 32) = v9;
    *(_OWORD *)a4 = v8;
    v10 = *(_OWORD *)(v6 - 160);
    v11 = *(_OWORD *)(v6 - 144);
    v12 = *(_OWORD *)(v6 - 112);
    *(_OWORD *)(a4 + 80) = *(_OWORD *)(v6 - 128);
    *(_OWORD *)(a4 + 96) = v12;
    *(_OWORD *)(a4 + 48) = v10;
    *(_OWORD *)(a4 + 64) = v11;
    std::shared_ptr<std::vector<MTLStructMemberInfo>>::operator=[abi:ne180100]((_QWORD *)(a4 + 112), (uint64_t *)(v6 - 96));
    std::shared_ptr<std::vector<MTLStructMemberInfo>>::operator=[abi:ne180100]((_QWORD *)(a4 + 128), (uint64_t *)(v6 - 80));
    std::shared_ptr<std::vector<MTLStructMemberInfo>>::operator=[abi:ne180100]((_QWORD *)(a4 + 144), (uint64_t *)(v6 - 64));
    v13 = *(_QWORD *)(v6 - 16);
    v14 = *(_OWORD *)(v6 - 32);
    *(_OWORD *)(a4 + 160) = *(_OWORD *)(v6 - 48);
    *(_OWORD *)(a4 + 176) = v14;
    *(_QWORD *)(a4 + 192) = v13;
    if (a4 != v6 - 208)
      std::vector<MTLStructMemberInfo>::__assign_with_size[abi:ne180100]<MTLStructMemberInfo*,MTLStructMemberInfo*>((uint64_t *)(a4 + 200), *(__int128 **)(v6 - 8), *(__int128 **)v6, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)v6 - *(_QWORD *)(v6 - 8)) >> 4));
    v15 = *(_OWORD *)(v6 + 16);
    v16 = *(_OWORD *)(v6 + 32);
    v17 = *(_OWORD *)(v6 + 64);
    *(_OWORD *)(a4 + 256) = *(_OWORD *)(v6 + 48);
    *(_OWORD *)(a4 + 272) = v17;
    *(_OWORD *)(a4 + 224) = v15;
    *(_OWORD *)(a4 + 240) = v16;
    a4 += 288;
    v6 += 288;
  }
  while (v7 + 288 != v5);
  return v5;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<MTLArgumentData>,MTLArgumentData*,MTLArgumentData*,MTLArgumentData*>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  __int128 *v6;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::allocator<MTLArgumentData>::construct[abi:ne180100]<MTLArgumentData,MTLArgumentData>(a1, v4, v6);
      v6 += 18;
      v4 = v12 + 288;
      v12 += 288;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<MTLArgumentData>,MTLArgumentData*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<pixelFormatTypeMap(void)::$_0 &&>>(uint64_t a1, uint64_t a2)
{
  do
  {
    if (*(char *)(a1 - 9) < 0)
      operator delete(*(void **)(a1 - 32));
    if (*(char *)(a1 - 41) < 0)
      operator delete(*(void **)(a1 - 64));
    a1 -= 64;
  }
  while (a1 != a2);
}

void llvm::scc_iterator<llvm::CallGraph *,llvm::GraphTraits<llvm::CallGraph *>>::scc_iterator(void **a1, void **a2, uint64_t a3)
{
  void *v5;
  void *v6;

  v5 = *a1;
  if (v5)
  {
    *(_QWORD *)(a3 + 64) = v5;
    operator delete(v5);
  }
  v6 = *a2;
  if (*a2)
  {
    *(_QWORD *)(a3 + 40) = v6;
    operator delete(v6);
  }
}

uint64_t GEPExpressionSum::accumulateGEP(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result)
    return MEMORY[0x24268D8D8](result, 0x1000C8000313F17);
  return result;
}

void getSerializedModule()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_2(&dword_240FA3000, MEMORY[0x24BDACB70], v0, "Compilation FAILED (ParentProcessName=%{public}s): %{public}s - %s", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void MTLCompilerObject::loadRuntimeModules()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_error_impl(&dword_240FA3000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "[NSBundle bundleWithIdentifier:@\"com.apple.Metal\"] failed", v0, 2u);
}

void MTLCompilerObject::loadRuntimeModules(uint8_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;

  v3 = *a2;
  *(_DWORD *)a1 = 138412290;
  *a3 = v3;
  OUTLINED_FUNCTION_4(&dword_240FA3000, MEMORY[0x24BDACB70], (uint64_t)a3, "Failed to find filepath for: %@", a1);
}

{
  uint64_t v3;

  v3 = *a2;
  *(_DWORD *)a1 = 138412290;
  *a3 = v3;
  OUTLINED_FUNCTION_4(&dword_240FA3000, MEMORY[0x24BDACB70], (uint64_t)a3, "Failed to create object for %@", a1);
}

void MTLCompilerObject::loadRuntimeModules(uint8_t *a1, uint64_t a2, _QWORD *a3)
{
  *(_DWORD *)a1 = 136315138;
  *a3 = a2;
  OUTLINED_FUNCTION_4(&dword_240FA3000, MEMORY[0x24BDACB70], (uint64_t)a3, "Failed to create a memory buffer for %s", a1);
}

void fatalDiagnosticHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_8(&dword_240FA3000, MEMORY[0x24BDACB70], a3, "LLVM ERROR: %s", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_9();
}

void MTLCompilerPluginInterface::init(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_8(&dword_240FA3000, MEMORY[0x24BDACB70], a3, "Compiler plugin %s is not registered with the MTLCompilerObject", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_9();
}

void MTLCompilerPluginInterface::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a3 = 136315394;
  *(_QWORD *)(a3 + 4) = a1;
  *(_WORD *)(a3 + 12) = 2080;
  *(_QWORD *)(a3 + 14) = a2;
  OUTLINED_FUNCTION_10(&dword_240FA3000, MEMORY[0x24BDACB70], a3, "Failed to dlopen compiler plugin at %s, dlerror %s", (uint8_t *)a3);
}

void MTLCompilerPluginInterface::init()
{
  operator delete((void *)MTLCompilerPluginInterface::init(char const*,void const*,unsigned long)::validPluginSuffixes[0]);
}

{
  operator delete((void *)MTLCompilerPluginInterface::init(char const*,void const*,unsigned long)::validPathPrefixes[0]);
}

void MTLCompilerPluginInterface::init(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int16 v5;
  char *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v3 = 136315394;
  v4 = v1;
  v5 = 2080;
  v6 = dlerror();
  OUTLINED_FUNCTION_10(&dword_240FA3000, MEMORY[0x24BDACB70], v2, "Failed to dlopen compiler plugin at %s, dlerror %s", (uint8_t *)&v3);
  OUTLINED_FUNCTION_3();
}

uint64_t llvm::ErrorList::join(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *a1;
  *a1 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return MEMORY[0x24268D8F0](a2, 0xA1C4030951706);
}

void MTLCompilerObject::buildRequest()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_2(&dword_240FA3000, MEMORY[0x24BDACB70], v0, "Compilation FAILED (ParentProcessName=%{public}s): %{public}s - %s", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void MTLCompilerObject::buildRequest(uint64_t a1, uint64_t a2)
{
  logCompileError();
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void MTLCompilerObject::logCompilerFailure(void *a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  v2 = 136315138;
  v3 = objc_msgSend(a1, "UTF8String");
  OUTLINED_FUNCTION_4(&dword_240FA3000, MEMORY[0x24BDACB70], v1, "Failure to create log file: %s", (uint8_t *)&v2);
  OUTLINED_FUNCTION_9();
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  objc_msgSend(a1, "UTF8String");
  OUTLINED_FUNCTION_2(&dword_240FA3000, MEMORY[0x24BDACB70], v1, "Failed to write log file (wrote %llu bytes, expected %llu bytes): %s", v2, v3, v4, v5, 2u);
}

void MTLCompilerObject::logCompilerFailure(id *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v1 = objc_msgSend((id)objc_msgSend(*a1, "localizedDescription"), "UTF8String");
  v3 = 136315138;
  v4 = v1;
  OUTLINED_FUNCTION_4(&dword_240FA3000, MEMORY[0x24BDACB70], v2, "Failure to create log directory: %s", (uint8_t *)&v3);
  OUTLINED_FUNCTION_9();
}

void MTLCompilerObject::generateMachO(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_0(a1, *MEMORY[0x24BDAC8D0]);
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2(&dword_240FA3000, MEMORY[0x24BDACB70], v1, "MachO serialization failed (ParentProcessName=%{public}s): %{public}s - %s", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void MTLCompilerObject::generateBinaryArchiveID()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_2(&dword_240FA3000, MEMORY[0x24BDACB70], v0, "MachO serialization failed (ParentProcessName=%{public}s): %{public}s - %s", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

unsigned __int8 *__cdecl CC_SHA256(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x24BDAC358](data, *(_QWORD *)&len, md);
}

int CC_SHA256_Final(unsigned __int8 *md, CC_SHA256_CTX *c)
{
  return MEMORY[0x24BDAC360](md, c);
}

int CC_SHA256_Init(CC_SHA256_CTX *c)
{
  return MEMORY[0x24BDAC368](c);
}

int CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x24BDAC370](c, data, *(_QWORD *)&len);
}

uint64_t LLVMCreateMemoryBufferWithContentsOfFile()
{
  return MEMORY[0x24BED50E8]();
}

uint64_t LLVMCreateMemoryBufferWithMemoryRange()
{
  return MEMORY[0x24BED50F0]();
}

uint64_t LLVMCreateMemoryBufferWithMemoryRangeCopy()
{
  return MEMORY[0x24BED50F8]();
}

uint64_t LLVMDisposeMemoryBuffer()
{
  return MEMORY[0x24BED5108]();
}

uint64_t LLVMExtraDisposeSharedModule()
{
  return MEMORY[0x24BE38590]();
}

uint64_t LLVMExtraMakeSharedModule()
{
  return MEMORY[0x24BE38598]();
}

uint64_t LLVMGetBufferSize()
{
  return MEMORY[0x24BED5130]();
}

uint64_t LLVMGetBufferStart()
{
  return MEMORY[0x24BED5138]();
}

uint64_t LLVMGetTarget()
{
  return MEMORY[0x24BED5180]();
}

uint64_t MTLCreateScript()
{
  return MEMORY[0x24BE385A0]();
}

uint64_t MTLDataTypeGetComponentCount()
{
  return MEMORY[0x24BDDD1F8]();
}

uint64_t MTLDataTypeGetComponentType()
{
  return MEMORY[0x24BDDD200]();
}

uint64_t MTLDowngradeAIRModule()
{
  return MEMORY[0x24BE385A8]();
}

uint64_t MTLFunctionGroupCreate()
{
  return MEMORY[0x24BE385B0]();
}

uint64_t MTLGPUArchiverAddDescriptor()
{
  return MEMORY[0x24BE385B8]();
}

uint64_t MTLGPUArchiverAddLinkedModules()
{
  return MEMORY[0x24BE385C0]();
}

uint64_t MTLGPUArchiverAddLinkedModulesWithReferences()
{
  return MEMORY[0x24BE385C8]();
}

uint64_t MTLGPUArchiverAddPipeline()
{
  return MEMORY[0x24BE385D0]();
}

uint64_t MTLGPUArchiverAddTool()
{
  return MEMORY[0x24BE385D8]();
}

uint64_t MTLGPUArchiverAddUnit()
{
  return MEMORY[0x24BE385E0]();
}

uint64_t MTLGPUArchiverBuildToFD()
{
  return MEMORY[0x24BE385E8]();
}

uint64_t MTLGPUArchiverCreateDynamicLibraryWriter()
{
  return MEMORY[0x24BE385F0]();
}

uint64_t MTLGPUArchiverCreateExecutableWriter()
{
  return MEMORY[0x24BE385F8]();
}

uint64_t MTLGPUArchiverDeleteWithId()
{
  return MEMORY[0x24BE38600]();
}

uint64_t MTLGPUArchiverDestroy()
{
  return MEMORY[0x24BE38608]();
}

uint64_t MTLGPUArchiverFlush()
{
  return MEMORY[0x24BE38610]();
}

uint64_t MTLGPUArchiverFromId()
{
  return MEMORY[0x24BE38618]();
}

uint64_t MTLGPUArchiverPackUnits()
{
  return MEMORY[0x24BE38620]();
}

uint64_t MTLGPUArchiverSetInstallName()
{
  return MEMORY[0x24BE38628]();
}

uint64_t MTLGPUArchiverSetUnitHash()
{
  return MEMORY[0x24BE38630]();
}

uint64_t MTLGPUArchiverSetUnitReflection()
{
  return MEMORY[0x24BE38638]();
}

uint64_t MTLGPUArchiverToId()
{
  return MEMORY[0x24BE38640]();
}

uint64_t MTLGPUArchiverUnitRefCreateWithUnitId()
{
  return MEMORY[0x24BE38648]();
}

uint64_t MTLGPUArchiverUnitRefDestroy()
{
  return MEMORY[0x24BE38650]();
}

uint64_t MTLGPUCompilerBuildFromSource()
{
  return MEMORY[0x24BE38658]();
}

uint64_t MTLGPUCompilerBuildFromSourceToBuffer()
{
  return MEMORY[0x24BE38660]();
}

uint64_t MTLGPUCompilerCompileFromSource()
{
  return MEMORY[0x24BE38668]();
}

uint64_t MTLGPUCompilerCreate()
{
  return MEMORY[0x24BE38670]();
}

uint64_t MTLGPUCompilerDestroy()
{
  return MEMORY[0x24BE38678]();
}

uint64_t MTLGPUCompilerEnable16BitTextureCoordinateEmulation()
{
  return MEMORY[0x24BE38680]();
}

uint64_t MTLGPUCompilerEnableBFloatEmulation()
{
  return MEMORY[0x24BE38688]();
}

uint64_t MTLGPUCompilerEnableDegenerateVertexAmplificationEmulation()
{
  return MEMORY[0x24BE38690]();
}

uint64_t MTLGPUCompilerEnableDoubleEmulation()
{
  return MEMORY[0x24BE38698]();
}

uint64_t MTLGPUCompilerEnableExternallyInitializedVariableSupport()
{
  return MEMORY[0x24BE386A0]();
}

uint64_t MTLGPUCompilerEnableGlobalBindingInDylibSupport()
{
  return MEMORY[0x24BE386A8]();
}

uint64_t MTLGPUCompilerEnableGlobalBuiltinInDylibSupport()
{
  return MEMORY[0x24BE386B0]();
}

uint64_t MTLGPUCompilerEnableRaytracingEmulation()
{
  return MEMORY[0x24BE386B8]();
}

uint64_t MTLGPUCompilerEnableResourcePatchingInstrumentation()
{
  return MEMORY[0x24BE386C0]();
}

uint64_t MTLGPUCompilerEnableResourceUsageInstrumentation()
{
  return MEMORY[0x24BE386C8]();
}

uint64_t MTLGPUCompilerEnableTLSEmulation()
{
  return MEMORY[0x24BE386D0]();
}

uint64_t MTLGPUCompilerHandleSPIs()
{
  return MEMORY[0x24BE386D8]();
}

uint64_t MTLGPUCompilerLinkToBuffer()
{
  return MEMORY[0x24BE386E0]();
}

uint64_t MTLGPUCompilerLoadModules()
{
  return MEMORY[0x24BE386E8]();
}

uint64_t MTLGPUCompilerLowerModule()
{
  return MEMORY[0x24BE386F0]();
}

uint64_t MTLGPUCompilerSetFunctionGroups()
{
  return MEMORY[0x24BE386F8]();
}

uint64_t MTLGPUCompilerSetLoaderScript()
{
  return MEMORY[0x24BE38700]();
}

uint64_t MTLGPUCompilerSetLoadingMode()
{
  return MEMORY[0x24BE38708]();
}

uint64_t MTLGPUCompilerSetLoweringRuntimes()
{
  return MEMORY[0x24BE38710]();
}

uint64_t MTLGPUCompilerSetRaytracingEmulationIndirectAccelerationStructures()
{
  return MEMORY[0x24BE38718]();
}

uint64_t MTLGPUCompilerSetRaytracingEmulationMaxAccelerationStructureTraversalDepth()
{
  return MEMORY[0x24BE38720]();
}

uint64_t MTLGPUCompilerSetStitcherScript()
{
  return MEMORY[0x24BE38728]();
}

uint64_t MTLGPUCompilerSpecializeFunction()
{
  return MEMORY[0x24BE38730]();
}

uint64_t MTLGPUCompilerSpecializeFunctionToBuffer()
{
  return MEMORY[0x24BE38738]();
}

uint64_t MTLGPUCompilerStitchFunctionsToBuffer()
{
  return MEMORY[0x24BE38740]();
}

uint64_t MTLGetEnvDefault()
{
  return MEMORY[0x24BDDD248]();
}

uint64_t MTLGetShaderCachePath()
{
  return MEMORY[0x24BDDD258]();
}

uint64_t MTLMetalDynamicLibraryGetInstallName()
{
  return MEMORY[0x24BE38748]();
}

uint64_t MTLMetalFunctionCreate()
{
  return MEMORY[0x24BE38750]();
}

uint64_t MTLMetalFunctionGetModule()
{
  return MEMORY[0x24BE38758]();
}

uint64_t MTLMetalFunctionGetName()
{
  return MEMORY[0x24BE38760]();
}

uint64_t MTLMetalImportedSymbolGetName()
{
  return MEMORY[0x24BE38768]();
}

uint64_t MTLMetalLibCreateExecutableWithTriple()
{
  return MEMORY[0x24BE38770]();
}

uint64_t MTLMetalLibDestroy()
{
  return MEMORY[0x24BE38778]();
}

uint64_t MTLMetalLibGetDynamicLibrariesCount()
{
  return MEMORY[0x24BE38780]();
}

uint64_t MTLMetalLibGetDynamicLibraryNo()
{
  return MEMORY[0x24BE38788]();
}

uint64_t MTLMetalLibGetFunctionNo()
{
  return MEMORY[0x24BE38790]();
}

uint64_t MTLMetalLibGetFunctionsCount()
{
  return MEMORY[0x24BE38798]();
}

uint64_t MTLMetalLibGetImportedSymbolNo()
{
  return MEMORY[0x24BE387A0]();
}

uint64_t MTLMetalLibGetImportedSymbolsCount()
{
  return MEMORY[0x24BE387A8]();
}

uint64_t MTLMetalLibGetInstallName()
{
  return MEMORY[0x24BE387B0]();
}

uint64_t MTLMetalLibGetVariableNo()
{
  return MEMORY[0x24BE387B8]();
}

uint64_t MTLMetalLibGetVariablesCount()
{
  return MEMORY[0x24BE387C0]();
}

uint64_t MTLMetalLibInsertFunction()
{
  return MEMORY[0x24BE387C8]();
}

uint64_t MTLMetalVariableGetName()
{
  return MEMORY[0x24BE387D0]();
}

uint64_t MTLModuleGetAsObject()
{
  return MEMORY[0x24BE387D8]();
}

uint64_t MTLObjectCreate()
{
  return MEMORY[0x24BE387E0]();
}

uint64_t MTLObjectDestroy()
{
  return MEMORY[0x24BE387E8]();
}

uint64_t MTLObjectGetAsMetalLib()
{
  return MEMORY[0x24BE387F0]();
}

uint64_t MTLPixelFormatGetInfoForDevice()
{
  return MEMORY[0x24BDDD388]();
}

uint64_t MTLUpgradeAIRModule()
{
  return MEMORY[0x24BE387F8]();
}

uint64_t MTLWriteAIRBitcodeToMemoryBuffer()
{
  return MEMORY[0x24BE38800]();
}

uint64_t MTLWriteAIRReflectionToMemoryBuffer()
{
  return MEMORY[0x24BE38808]();
}

uint64_t MTLWriteMetalLibToMemoryBuffer()
{
  return MEMORY[0x24BE38810]();
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x24BDAC730](a1, *(_QWORD *)&a2);
}

uint64_t _MTLConstantDataSize()
{
  return MEMORY[0x24BDDD9B0]();
}

uint64_t _MTLEncodeLinkingInfo()
{
  return MEMORY[0x24BDDD9B8]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x24BDAC780](exception_object);
}

uint64_t llvm::AllocaInst::AllocaInst()
{
  return MEMORY[0x24BED5288]();
}

{
  return MEMORY[0x24BED5298]();
}

uint64_t llvm::BasicBlock::moveBefore()
{
  return MEMORY[0x24BED52A0]();
}

uint64_t llvm::BasicBlock::splitBasicBlock()
{
  return MEMORY[0x24BED52B0]();
}

uint64_t llvm::BasicBlock::BasicBlock()
{
  return MEMORY[0x24BED52C8]();
}

uint64_t llvm::BranchInst::BranchInst()
{
  return MEMORY[0x24BED52D8]();
}

{
  return MEMORY[0x24BED52E0]();
}

{
  return MEMORY[0x24BED52E8]();
}

uint64_t llvm::ConstantFP::get()
{
  return MEMORY[0x24BED5310]();
}

uint64_t llvm::DataLayout::clear(llvm::DataLayout *this)
{
  return MEMORY[0x24BED5330](this);
}

void llvm::DataLayout::~DataLayout(llvm::DataLayout *this)
{
  MEMORY[0x24BED5348](this);
}

void llvm::ModulePass::~ModulePass(llvm::ModulePass *this)
{
  MEMORY[0x24BED5360](this);
}

uint64_t llvm::ReturnInst::ReturnInst()
{
  return MEMORY[0x24BED5388]();
}

uint64_t llvm::SplitBlock()
{
  return MEMORY[0x24BED5390]();
}

uint64_t llvm::StructType::getTypeByName()
{
  return MEMORY[0x24BED5398]();
}

uint64_t llvm::StructType::get()
{
  return MEMORY[0x24BED53A0]();
}

uint64_t llvm::StructType::create()
{
  return MEMORY[0x24BED53B0]();
}

{
  return MEMORY[0x24BED53C0]();
}

{
  return MEMORY[0x24BED53C8]();
}

uint64_t llvm::StructType::setBody()
{
  return MEMORY[0x24BED53D0]();
}

uint64_t llvm::UndefValue::get()
{
  return MEMORY[0x24BED5418]();
}

uint64_t llvm::VectorType::get()
{
  return MEMORY[0x24BED5420]();
}

uint64_t llvm::APFloatBase::PPCDoubleDouble(llvm::APFloatBase *this)
{
  return MEMORY[0x24BED5450](this);
}

uint64_t llvm::AttrBuilder::addAttribute()
{
  return MEMORY[0x24BED5498]();
}

{
  return MEMORY[0x24BED54A0]();
}

uint64_t llvm::AttrBuilder::AttrBuilder()
{
  return MEMORY[0x24BED5510]();
}

uint64_t llvm::CloneModule()
{
  return MEMORY[0x24BED5530]();
}

uint64_t llvm::ConstantInt::get()
{
  return MEMORY[0x24BED5538]();
}

{
  return MEMORY[0x24BED5548]();
}

uint64_t llvm::Instruction::moveBefore()
{
  return MEMORY[0x24BED55D0]();
}

uint64_t llvm::Instruction::setIsExact(llvm::Instruction *this)
{
  return MEMORY[0x24BED55D8](this);
}

uint64_t llvm::Instruction::insertAfter(llvm::Instruction *this, llvm::Instruction *a2)
{
  return MEMORY[0x24BED55E0](this, a2);
}

uint64_t llvm::Instruction::setMetadata()
{
  return MEMORY[0x24BED55E8]();
}

{
  return MEMORY[0x24BED55F0]();
}

uint64_t llvm::Instruction::insertBefore(llvm::Instruction *this, llvm::Instruction *a2)
{
  return MEMORY[0x24BED5600](this, a2);
}

uint64_t llvm::Instruction::eraseFromParent(llvm::Instruction *this)
{
  return MEMORY[0x24BED5608](this);
}

uint64_t llvm::Instruction::removeFromParent(llvm::Instruction *this)
{
  return MEMORY[0x24BED5610](this);
}

uint64_t llvm::Instruction::setFastMathFlags()
{
  return MEMORY[0x24BED5618]();
}

uint64_t llvm::Instruction::setHasNoSignedWrap(llvm::Instruction *this)
{
  return MEMORY[0x24BED5630](this);
}

uint64_t llvm::Instruction::setHasNoUnsignedWrap(llvm::Instruction *this)
{
  return MEMORY[0x24BED5640](this);
}

uint64_t llvm::Instruction::Instruction()
{
  return MEMORY[0x24BED5660]();
}

void llvm::Instruction::~Instruction(llvm::Instruction *this)
{
  MEMORY[0x24BED5668](this);
}

uint64_t llvm::IntegerType::get()
{
  return MEMORY[0x24BED5670]();
}

uint64_t llvm::LLVMContext::setDiagnosticHandlerCallBack()
{
  return MEMORY[0x24BED56A0]();
}

uint64_t llvm::LLVMContext::LLVMContext(llvm::LLVMContext *this)
{
  return MEMORY[0x24BED56C8](this);
}

void llvm::LLVMContext::~LLVMContext(llvm::LLVMContext *this)
{
  MEMORY[0x24BED56D8](this);
}

uint64_t llvm::NamedMDNode::addOperand()
{
  return MEMORY[0x24BED56E8]();
}

uint64_t llvm::NamedMDNode::setOperand()
{
  return MEMORY[0x24BED56F0]();
}

uint64_t llvm::NamedMDNode::clearOperands(llvm::NamedMDNode *this)
{
  return MEMORY[0x24BED56F8](this);
}

uint64_t llvm::NamedMDNode::eraseFromParent(llvm::NamedMDNode *this)
{
  return MEMORY[0x24BED5700](this);
}

uint64_t llvm::PointerType::get()
{
  return MEMORY[0x24BED5758]();
}

uint64_t llvm::PointerType::get(llvm::PointerType *this, llvm::LLVMContext *a2)
{
  return MEMORY[0x24BED5760](this, a2);
}

uint64_t llvm::StringSaver::save()
{
  return MEMORY[0x24BED5788]();
}

uint64_t llvm::ValueMapper::remapFunction(llvm::ValueMapper *this, Function *a2)
{
  return MEMORY[0x24BED5798](this, a2);
}

uint64_t llvm::ValueMapper::ValueMapper()
{
  return MEMORY[0x24BED57B0]();
}

void llvm::ValueMapper::~ValueMapper(llvm::ValueMapper *this)
{
  MEMORY[0x24BED57B8](this);
}

uint64_t llvm::raw_ostream::flush_nonempty(llvm::raw_ostream *this)
{
  return MEMORY[0x24BED57C8](this);
}

uint64_t llvm::raw_ostream::SetBufferAndMode()
{
  return MEMORY[0x24BED57D0]();
}

uint64_t llvm::raw_ostream::write(llvm::raw_ostream *this, const char *a2)
{
  return MEMORY[0x24BED57D8](this, a2);
}

void llvm::raw_ostream::~raw_ostream(llvm::raw_ostream *this)
{
  MEMORY[0x24BED57F8](this);
}

uint64_t llvm::raw_ostream::operator<<()
{
  return MEMORY[0x24BED5828]();
}

{
  return MEMORY[0x24BED5838]();
}

uint64_t llvm::AttributeSet::get()
{
  return MEMORY[0x24BED5868]();
}

uint64_t llvm::ConstantExpr::getBitCast()
{
  return MEMORY[0x24BED5878]();
}

uint64_t llvm::ConstantExpr::getPointerCast()
{
  return MEMORY[0x24BED58A0]();
}

uint64_t llvm::DISubprogram::getImpl()
{
  return MEMORY[0x24BED5910]();
}

uint64_t llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue()
{
  return MEMORY[0x24BED5918]();
}

uint64_t llvm::FunctionType::get()
{
  return MEMORY[0x24BED5920]();
}

{
  return MEMORY[0x24BED5928]();
}

uint64_t llvm::GlobalObject::setSection()
{
  return MEMORY[0x24BED5930]();
}

uint64_t llvm::GlobalObject::copyMetadata()
{
  return MEMORY[0x24BED5938]();
}

uint64_t llvm::GlobalObject::setAlignment()
{
  return MEMORY[0x24BED5940]();
}

uint64_t llvm::appendToUsed()
{
  return MEMORY[0x24BED59E0]();
}

uint64_t llvm::AnalysisUsage::setPreservesCFG(llvm::AnalysisUsage *this)
{
  return MEMORY[0x24BED59F8](this);
}

uint64_t llvm::AttributeList::get()
{
  return MEMORY[0x24BED5A08]();
}

uint64_t llvm::ConstantArray::get()
{
  return MEMORY[0x24BED5A30]();
}

uint64_t llvm::IRBuilderBase::CreateSelect()
{
  return MEMORY[0x24BED5A68]();
}

uint64_t llvm::IRBuilderBase::CreateVectorSplat()
{
  return MEMORY[0x24BED5AB0]();
}

uint64_t llvm::IRBuilderBase::CreateMemTransferInst()
{
  return MEMORY[0x24BED5AD0]();
}

uint64_t llvm::IRBuilderBase::CreateConstrainedFPCast()
{
  return MEMORY[0x24BED5AE0]();
}

uint64_t llvm::IRBuilderBase::CreateConstrainedFPBinOp()
{
  return MEMORY[0x24BED5AE8]();
}

uint64_t llvm::StringMapImpl::RehashTable(llvm::StringMapImpl *this)
{
  return MEMORY[0x24BED5B28](this);
}

uint64_t llvm::StringMapImpl::LookupBucketFor()
{
  return MEMORY[0x24BED5B30]();
}

uint64_t llvm::StringMapImpl::StringMapImpl(llvm::StringMapImpl *this)
{
  return MEMORY[0x24BED5B48](this);
}

uint64_t llvm::BinaryOperator::Create()
{
  return MEMORY[0x24BED5B78]();
}

uint64_t llvm::BinaryOperator::CreateNot()
{
  return MEMORY[0x24BED5B88]();
}

uint64_t llvm::ConstantVector::get()
{
  return MEMORY[0x24BED5BA8]();
}

uint64_t llvm::GlobalVariable::setInitializer()
{
  return MEMORY[0x24BED5BF8]();
}

uint64_t llvm::GlobalVariable::eraseFromParent(llvm::GlobalVariable *this)
{
  return MEMORY[0x24BED5C00](this);
}

uint64_t llvm::GlobalVariable::dropAllReferences(llvm::GlobalVariable *this)
{
  return MEMORY[0x24BED5C10](this);
}

uint64_t llvm::GlobalVariable::GlobalVariable()
{
  return MEMORY[0x24BED5C28]();
}

uint64_t llvm::InlineFunction()
{
  return MEMORY[0x24BED5C40]();
}

uint64_t llvm::createLICMPass(llvm *this)
{
  return MEMORY[0x24BED5C90](this);
}

uint64_t llvm::createSROAPass(llvm *this)
{
  return MEMORY[0x24BED5C98](this);
}

uint64_t llvm::raw_fd_ostream::raw_fd_ostream()
{
  return MEMORY[0x24BED5CD8]();
}

void llvm::raw_fd_ostream::~raw_fd_ostream(llvm::raw_fd_ostream *this)
{
  MEMORY[0x24BED5CE0](this);
}

uint64_t llvm::FixedVectorType::get()
{
  return MEMORY[0x24BED5D38]();
}

void llvm::IRBuilderFolder::~IRBuilderFolder(llvm::IRBuilderFolder *this)
{
  MEMORY[0x24BED5D40](this);
}

uint64_t llvm::InsertValueInst::init()
{
  return MEMORY[0x24BED5D48]();
}

uint64_t llvm::MemoryBufferRef::MemoryBufferRef()
{
  return MEMORY[0x24BED5DA8]();
}

uint64_t llvm::SmallVectorBase<unsigned int>::mallocForGrow()
{
  return off_25111D500();
}

uint64_t llvm::SmallVectorBase<unsigned int>::grow_pod()
{
  return off_25111D508();
}

uint64_t llvm::SmallVectorBase<unsigned long long>::grow_pod()
{
  return off_25111D510();
}

uint64_t llvm::ValueAsMetadata::handleRAUW()
{
  return MEMORY[0x24BED5F68]();
}

uint64_t llvm::ValueAsMetadata::get()
{
  return MEMORY[0x24BED5F70]();
}

uint64_t llvm::ValueHandleBase::AddToUseList(llvm::ValueHandleBase *this)
{
  return MEMORY[0x24BED5F78](this);
}

uint64_t llvm::ValueHandleBase::RemoveFromUseList(llvm::ValueHandleBase *this)
{
  return MEMORY[0x24BED5F80](this);
}

uint64_t llvm::ValueHandleBase::AddToExistingUseList(llvm::ValueHandleBase *this, llvm::ValueHandleBase **a2)
{
  return MEMORY[0x24BED5F88](this, a2);
}

uint64_t llvm::allocate_buffer(llvm *this)
{
  return MEMORY[0x24BED5F90](this);
}

uint64_t llvm::ExtractValueInst::getIndexedType()
{
  return MEMORY[0x24BED5FA8]();
}

uint64_t llvm::ExtractValueInst::init()
{
  return MEMORY[0x24BED5FB0]();
}

uint64_t llvm::MetadataTracking::track()
{
  return MEMORY[0x24BED5FD8]();
}

uint64_t llvm::MetadataTracking::untrack()
{
  return MEMORY[0x24BED5FE8]();
}

uint64_t llvm::createNewGVNPass(llvm *this)
{
  return MEMORY[0x24BED6020](this);
}

uint64_t llvm::GetElementPtrInst::setIsInBounds(llvm::GetElementPtrInst *this)
{
  return MEMORY[0x24BED60A0](this);
}

uint64_t llvm::GetElementPtrInst::getIndexedType()
{
  return MEMORY[0x24BED60A8]();
}

uint64_t llvm::GetElementPtrInst::init()
{
  return MEMORY[0x24BED60B8]();
}

uint64_t llvm::InsertElementInst::InsertElementInst()
{
  return MEMORY[0x24BED60C8]();
}

uint64_t llvm::ShuffleVectorInst::getShuffleMask()
{
  return MEMORY[0x24BED60F8]();
}

uint64_t llvm::ShuffleVectorInst::ShuffleVectorInst()
{
  return MEMORY[0x24BED6100]();
}

uint64_t llvm::deallocate_buffer(llvm *this, void *a2)
{
  return MEMORY[0x24BED6130](this, a2);
}

uint64_t llvm::ConstantDataVector::get()
{
  return MEMORY[0x24BED6140]();
}

{
  return MEMORY[0x24BED6148]();
}

{
  return MEMORY[0x24BED6150]();
}

{
  return MEMORY[0x24BED6158]();
}

uint64_t llvm::ConstantDataVector::getFP()
{
  return MEMORY[0x24BED6160]();
}

{
  return MEMORY[0x24BED6168]();
}

uint64_t llvm::ExtractElementInst::ExtractElementInst()
{
  return MEMORY[0x24BED6190]();
}

uint64_t llvm::createEarlyCSEPass(llvm *this)
{
  return MEMORY[0x24BED61D8](this);
}

uint64_t llvm::createLoopSinkPass(llvm *this)
{
  return MEMORY[0x24BED61E0](this);
}

uint64_t llvm::createVerifierPass(llvm *this)
{
  return MEMORY[0x24BED61F0](this);
}

uint64_t llvm::ConstantPointerNull::get(llvm::ConstantPointerNull *this, llvm::PointerType *a2)
{
  return MEMORY[0x24BED6228](this, a2);
}

uint64_t llvm::ReplaceInstWithInst(llvm *this, llvm::Instruction *a2, llvm::Instruction *a3)
{
  return MEMORY[0x24BED6240](this, a2, a3);
}

uint64_t llvm::SmallPtrSetImplBase::insert_imp_big(llvm::SmallPtrSetImplBase *this, const void *a2)
{
  return MEMORY[0x24BED6260](this, a2);
}

uint64_t llvm::createGlobalDCEPass(llvm *this)
{
  return MEMORY[0x24BED62A8](this);
}

uint64_t llvm::getLazyIRFileModule()
{
  return MEMORY[0x24BED62B8]();
}

uint64_t llvm::createLoopUnrollPass(llvm *this, int a2, BOOL a3, BOOL a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  return MEMORY[0x24BED6338](this);
}

uint64_t llvm::getLazyBitcodeModule()
{
  return MEMORY[0x24BED6360]();
}

uint64_t llvm::SymbolTableListTraits<llvm::BasicBlock>::transferNodesFromList()
{
  return off_25111D630();
}

uint64_t llvm::createBarrierNoopPass(llvm *this)
{
  return MEMORY[0x24BED63D8](this);
}

uint64_t llvm::createLoopUnswitchPass(llvm *this)
{
  return MEMORY[0x24BED6448](this);
}

uint64_t llvm::ConstantFoldInstruction()
{
  return MEMORY[0x24BED6470]();
}

uint64_t llvm::createAggressiveDCEPass(llvm *this)
{
  return MEMORY[0x24BED64A8](this);
}

uint64_t llvm::createJumpThreadingPass(llvm *this)
{
  return MEMORY[0x24BED64B8](this);
}

void llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter(llvm::IRBuilderDefaultInserter *this)
{
  MEMORY[0x24BED64D8](this);
}

uint64_t llvm::SplitBlockAndInsertIfThen()
{
  return MEMORY[0x24BED6530]();
}

uint64_t llvm::createLoopSimplifyCFGPass(llvm *this)
{
  return MEMORY[0x24BED6540](this);
}

uint64_t llvm::createFunctionInliningPass(llvm *this)
{
  return MEMORY[0x24BED6570](this);
}

uint64_t llvm::remove_fatal_error_handler(llvm *this)
{
  return MEMORY[0x24BED6588](this);
}

uint64_t llvm::createCFGSimplificationPass()
{
  return MEMORY[0x24BED65B0]();
}

uint64_t llvm::install_fatal_error_handler(llvm *this, void (*a2)(void *, const char *, BOOL), void *a3)
{
  return MEMORY[0x24BED65B8](this, a2, a3);
}

uint64_t llvm::createInstSimplifyLegacyPass(llvm *this)
{
  return MEMORY[0x24BED65D0](this);
}

uint64_t llvm::SplitBlockAndInsertIfThenElse()
{
  return MEMORY[0x24BED65E8]();
}

uint64_t llvm::createAlwaysInlinerLegacyPass(llvm *this)
{
  return MEMORY[0x24BED65F0](this);
}

uint64_t llvm::errorToErrorCodeAndEmitErrors()
{
  return MEMORY[0x24BED6608]();
}

uint64_t llvm::createInstructionCombiningPass(llvm *this)
{
  return MEMORY[0x24BED6640](this);
}

uint64_t llvm::createPromoteMemoryToRegisterPass(llvm *this)
{
  return MEMORY[0x24BED6648](this);
}

uint64_t llvm::createStraightLineStrengthReducePass(llvm *this)
{
  return MEMORY[0x24BED6650](this);
}

uint64_t llvm::sys::fs::create_directory()
{
  return MEMORY[0x24BED6970]();
}

uint64_t llvm::sys::path::is_absolute()
{
  return MEMORY[0x24BED69C8]();
}

uint64_t llvm::sys::path::append()
{
  return MEMORY[0x24BED6A60]();
}

void llvm::Pass::~Pass(llvm::Pass *this)
{
  MEMORY[0x24BED6B78](this);
}

uint64_t llvm::Type::getFloatTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return MEMORY[0x24BED6BA0](this, a2);
}

uint64_t llvm::Type::getInt16Ty(llvm::Type *this, llvm::LLVMContext *a2)
{
  return MEMORY[0x24BED6BA8](this, a2);
}

uint64_t llvm::Type::getInt32Ty(llvm::Type *this, llvm::LLVMContext *a2)
{
  return MEMORY[0x24BED6BB0](this, a2);
}

uint64_t llvm::Type::getInt64Ty(llvm::Type *this, llvm::LLVMContext *a2)
{
  return MEMORY[0x24BED6BB8](this, a2);
}

uint64_t llvm::Type::getInt8PtrTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return MEMORY[0x24BED6BD0](this, a2);
}

uint64_t llvm::Type::getInt16PtrTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return MEMORY[0x24BED6BE8](this, a2);
}

uint64_t llvm::Type::getInt32PtrTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return MEMORY[0x24BED6BF0](this, a2);
}

uint64_t llvm::Type::getHalfTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return MEMORY[0x24BED6C10](this, a2);
}

uint64_t llvm::Type::getInt1Ty(llvm::Type *this, llvm::LLVMContext *a2)
{
  return MEMORY[0x24BED6C18](this, a2);
}

uint64_t llvm::Type::getInt8Ty(llvm::Type *this, llvm::LLVMContext *a2)
{
  return MEMORY[0x24BED6C20](this, a2);
}

uint64_t llvm::Type::getVoidTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return MEMORY[0x24BED6C30](this, a2);
}

uint64_t llvm::User::getDescriptor(llvm::User *this)
{
  return MEMORY[0x24BED6C38](this);
}

uint64_t llvm::User::allocHungoffUses(llvm::User *this)
{
  return MEMORY[0x24BED6C40](this);
}

uint64_t llvm::User::replaceUsesOfWith()
{
  return MEMORY[0x24BED6C48]();
}

void llvm::User::operator delete(void *a1)
{
  MEMORY[0x24BED6C50](a1);
}

uint64_t llvm::User::operator new(llvm::User *this)
{
  return MEMORY[0x24BED6C58](this);
}

{
  return MEMORY[0x24BED6C60](this);
}

{
  return MEMORY[0x24BED6C68](this);
}

uint64_t llvm::dbgs(llvm *this)
{
  return MEMORY[0x24BED6C70](this);
}

uint64_t llvm::Value::setMetadata()
{
  return MEMORY[0x24BED6F08]();
}

{
  return MEMORY[0x24BED6F10]();
}

uint64_t llvm::Value::replaceAllUsesWith()
{
  return MEMORY[0x24BED6F18]();
}

uint64_t llvm::Value::replaceUsesOutsideBlock()
{
  return MEMORY[0x24BED6F20]();
}

uint64_t llvm::Value::replaceNonMetadataUsesWith()
{
  return MEMORY[0x24BED6F28]();
}

uint64_t llvm::Value::setName()
{
  return MEMORY[0x24BED6F30]();
}

uint64_t llvm::Value::takeName()
{
  return MEMORY[0x24BED6F38]();
}

uint64_t llvm::Linker::linkModules()
{
  return MEMORY[0x24BED6F90]();
}

uint64_t llvm::MDNode::replaceOperandWith()
{
  return MEMORY[0x24BED6FB0]();
}

uint64_t llvm::Module::materializeAll(llvm::Module *this)
{
  return MEMORY[0x24BED7030](this);
}

uint64_t llvm::Module::getOrInsertGlobal()
{
  return MEMORY[0x24BED7050]();
}

uint64_t llvm::Module::eraseNamedMetadata(llvm::Module *this, llvm::NamedMDNode *a2)
{
  return MEMORY[0x24BED7060](this, a2);
}

uint64_t llvm::Module::getOrInsertFunction()
{
  return MEMORY[0x24BED7068]();
}

{
  return MEMORY[0x24BED7070]();
}

uint64_t llvm::Module::getOrInsertNamedMetadata()
{
  return MEMORY[0x24BED7090]();
}

void llvm::Module::~Module(llvm::Module *this)
{
  MEMORY[0x24BED70D8](this);
}

uint64_t llvm::Triple::Triple()
{
  return MEMORY[0x24BED7118]();
}

uint64_t llvm::legacy::PassManager::run(llvm::legacy::PassManager *this, llvm::Module *a2)
{
  return MEMORY[0x24BED72A0](this, a2);
}

uint64_t llvm::legacy::PassManager::PassManager(llvm::legacy::PassManager *this)
{
  return MEMORY[0x24BED72A8](this);
}

uint64_t llvm::object::MetalLibObjectFile::MetalLibObjectFile()
{
  return MEMORY[0x24BED7308]();
}

uint64_t llvm::CmpInst::CmpInst()
{
  return MEMORY[0x24BED7348]();
}

uint64_t llvm::MDTuple::getImpl()
{
  return MEMORY[0x24BED7350]();
}

uint64_t llvm::PHINode::growOperands(llvm::PHINode *this)
{
  return MEMORY[0x24BED7360](this);
}

uint64_t llvm::CallInst::init()
{
  return MEMORY[0x24BED73B8]();
}

uint64_t llvm::CastInst::CreatePointerCast()
{
  return MEMORY[0x24BED73E0]();
}

uint64_t llvm::CastInst::CreateSExtOrBitCast()
{
  return MEMORY[0x24BED73E8]();
}

uint64_t llvm::CastInst::CreateZExtOrBitCast()
{
  return MEMORY[0x24BED73F0]();
}

uint64_t llvm::CastInst::CreatePointerBitCastOrAddrSpaceCast()
{
  return MEMORY[0x24BED7400]();
}

uint64_t llvm::CastInst::Create()
{
  return MEMORY[0x24BED7408]();
}

uint64_t llvm::Constant::getNullValue(llvm::Constant *this, llvm::Type *a2)
{
  return MEMORY[0x24BED7410](this, a2);
}

uint64_t llvm::Constant::destroyConstant(llvm::Constant *this)
{
  return MEMORY[0x24BED7418](this);
}

uint64_t llvm::Constant::getAllOnesValue(llvm::Constant *this, llvm::Type *a2)
{
  return MEMORY[0x24BED7420](this, a2);
}

uint64_t llvm::Constant::handleOperandChange()
{
  return MEMORY[0x24BED7430]();
}

uint64_t llvm::DebugLoc::get()
{
  return MEMORY[0x24BED7438]();
}

uint64_t llvm::Function::addParamAttr()
{
  return MEMORY[0x24BED7458]();
}

{
  return MEMORY[0x24BED7460]();
}

uint64_t llvm::Function::removeFnAttr()
{
  return MEMORY[0x24BED7468]();
}

uint64_t llvm::Function::addParamAttrs()
{
  return MEMORY[0x24BED7478]();
}

uint64_t llvm::Function::setSubprogram()
{
  return MEMORY[0x24BED7490]();
}

uint64_t llvm::Function::eraseFromParent(llvm::Function *this)
{
  return MEMORY[0x24BED7498](this);
}

uint64_t llvm::Function::dropAllReferences(llvm::Function *this)
{
  return MEMORY[0x24BED74B8](this);
}

uint64_t llvm::Function::copyAttributesFrom(llvm::Function *this, const llvm::Function *a2)
{
  return MEMORY[0x24BED74C0](this, a2);
}

uint64_t llvm::Function::addAttributeAtIndex()
{
  return MEMORY[0x24BED74C8]();
}

uint64_t llvm::Function::addFnAttr()
{
  return MEMORY[0x24BED74D0]();
}

{
  return MEMORY[0x24BED74D8]();
}

{
  return MEMORY[0x24BED74E0]();
}

uint64_t llvm::Function::Function()
{
  return MEMORY[0x24BED74E8]();
}

uint64_t llvm::LoadInst::LoadInst()
{
  return MEMORY[0x24BED74F0]();
}

uint64_t llvm::MDString::get()
{
  return MEMORY[0x24BED74F8]();
}

uint64_t llvm::ArrayType::get(llvm::ArrayType *this, llvm::Type *a2)
{
  return MEMORY[0x24BED7548](this, a2);
}

uint64_t llvm::Attribute::getWithDereferenceableBytes(llvm::Attribute *this, llvm::LLVMContext *a2)
{
  return MEMORY[0x24BED7568](this, a2);
}

uint64_t llvm::CallGraph::CallGraph(llvm::CallGraph *this, llvm::Module *a2)
{
  return MEMORY[0x24BED7588](this, a2);
}

void llvm::CallGraph::~CallGraph(llvm::CallGraph *this)
{
  MEMORY[0x24BED7590](this);
}

uint64_t llvm::StoreInst::StoreInst()
{
  return MEMORY[0x24BED7868]();
}

{
  return MEMORY[0x24BED7870]();
}

uint64_t llvm::AllocaInst::isStaticAlloca(llvm::AllocaInst *this)
{
  return MEMORY[0x24BED7888](this);
}

uint64_t llvm::BasicBlock::getContext(llvm::BasicBlock *this)
{
  return MEMORY[0x24BED7898](this);
}

uint64_t llvm::BasicBlock::getFirstNonPHI(llvm::BasicBlock *this)
{
  return MEMORY[0x24BED78A8](this);
}

uint64_t llvm::BasicBlock::getFirstInsertionPt(llvm::BasicBlock *this)
{
  return MEMORY[0x24BED78C8](this);
}

uint64_t llvm::BasicBlock::getFirstNonPHIOrDbg(llvm::BasicBlock *this)
{
  return MEMORY[0x24BED78D0](this);
}

uint64_t llvm::BasicBlock::getFirstNonPHIOrDbgOrLifetime(llvm::BasicBlock *this)
{
  return MEMORY[0x24BED78E0](this);
}

uint64_t llvm::BasicBlock::getModule(llvm::BasicBlock *this)
{
  return MEMORY[0x24BED78E8](this);
}

uint64_t llvm::DataLayout::getABITypeAlign(llvm::DataLayout *this, llvm::Type *a2)
{
  return MEMORY[0x24BED7928](this, a2);
}

uint64_t llvm::DataLayout::getStructLayout()
{
  return MEMORY[0x24BED7930]();
}

uint64_t llvm::DataLayout::getPrefTypeAlign(llvm::DataLayout *this, llvm::Type *a2)
{
  return MEMORY[0x24BED7938](this, a2);
}

uint64_t llvm::DataLayout::getABITypeAlignment(llvm::DataLayout *this, llvm::Type *a2)
{
  return MEMORY[0x24BED7940](this, a2);
}

uint64_t llvm::DataLayout::getPointerAlignElem(llvm::DataLayout *this)
{
  return MEMORY[0x24BED7948](this);
}

uint64_t llvm::DataLayout::getPrefTypeAlignment(llvm::DataLayout *this, llvm::Type *a2)
{
  return MEMORY[0x24BED7950](this, a2);
}

uint64_t llvm::StructType::getTypeAtIndex()
{
  return MEMORY[0x24BED7970]();
}

uint64_t llvm::StructType::getName(llvm::StructType *this)
{
  return MEMORY[0x24BED7980](this);
}

uint64_t llvm::GEPOperator::getSourceElementType(llvm::GEPOperator *this)
{
  return MEMORY[0x24BED7988](this);
}

uint64_t llvm::GlobalValue::isDeclaration(llvm::GlobalValue *this)
{
  return MEMORY[0x24BED79A8](this);
}

uint64_t llvm::GlobalValue::hasExternalWeakLinkage(llvm::GlobalValue *this)
{
  return MEMORY[0x24BED79D0](this);
}

uint64_t llvm::Instruction::getMetadataImpl()
{
  return MEMORY[0x24BED79F0]();
}

uint64_t llvm::Instruction::getMetadataImpl(llvm::Instruction *this)
{
  return MEMORY[0x24BED79F8](this);
}

uint64_t llvm::Instruction::clone(llvm::Instruction *this)
{
  return MEMORY[0x24BED7A20](this);
}

uint64_t llvm::Instruction::getModule(llvm::Instruction *this)
{
  return MEMORY[0x24BED7A38](this);
}

uint64_t llvm::LLVMContext::getDiagnosticContext(llvm::LLVMContext *this)
{
  return MEMORY[0x24BED7A50](this);
}

uint64_t llvm::LLVMContext::getDiagnosticHandlerCallBack(llvm::LLVMContext *this)
{
  return MEMORY[0x24BED7A58](this);
}

uint64_t llvm::NamedMDNode::getOperand(llvm::NamedMDNode *this)
{
  return MEMORY[0x24BED7A68](this);
}

uint64_t llvm::NamedMDNode::getNumOperands(llvm::NamedMDNode *this)
{
  return MEMORY[0x24BED7A70](this);
}

uint64_t llvm::AttributeSet::end(llvm::AttributeSet *this)
{
  return MEMORY[0x24BED7AF8](this);
}

uint64_t llvm::AttributeSet::begin(llvm::AttributeSet *this)
{
  return MEMORY[0x24BED7B00](this);
}

uint64_t llvm::ConstantExpr::getAsInstruction(llvm::ConstantExpr *this, llvm::Instruction *a2)
{
  return MEMORY[0x24BED7B08](this, a2);
}

uint64_t llvm::ConstantExpr::isCast(llvm::ConstantExpr *this)
{
  return MEMORY[0x24BED7B10](this);
}

uint64_t llvm::DILocalScope::getSubprogram(llvm::DILocalScope *this)
{
  return MEMORY[0x24BED7B20](this);
}

uint64_t llvm::AttributeList::getFnAttrs(llvm::AttributeList *this)
{
  return MEMORY[0x24BED7B78](this);
}

uint64_t llvm::AttributeList::getRetAttrs(llvm::AttributeList *this)
{
  return MEMORY[0x24BED7B80](this);
}

uint64_t llvm::AttributeList::getAttributes(llvm::AttributeList *this)
{
  return MEMORY[0x24BED7B88](this);
}

uint64_t llvm::AttributeList::getParamAttrs(llvm::AttributeList *this)
{
  return MEMORY[0x24BED7B90](this);
}

uint64_t llvm::AttributeList::addAttributeAtIndex()
{
  return MEMORY[0x24BED7BB0]();
}

uint64_t llvm::AttributeList::removeAttributesAtIndex(llvm::AttributeList *this, llvm::LLVMContext *a2)
{
  return MEMORY[0x24BED7BE8](this, a2);
}

uint64_t llvm::AttributeList::getParamDereferenceableBytes(llvm::AttributeList *this)
{
  return MEMORY[0x24BED7BF0](this);
}

uint64_t llvm::IRBuilderBase::getCurrentDebugLocation(llvm::IRBuilderBase *this)
{
  return MEMORY[0x24BED7C00](this);
}

uint64_t llvm::StringMapImpl::FindKey()
{
  return MEMORY[0x24BED7C08]();
}

uint64_t llvm::TargetExtType::getLayoutType(llvm::TargetExtType *this)
{
  return MEMORY[0x24BED7C10](this);
}

uint64_t llvm::GetElementPtrInst::hasAllConstantIndices(llvm::GetElementPtrInst *this)
{
  return MEMORY[0x24BED7C60](this);
}

uint64_t llvm::GetElementPtrInst::accumulateConstantOffset()
{
  return MEMORY[0x24BED7C68]();
}

uint64_t llvm::ConstantDataSequential::getRawDataValues(llvm::ConstantDataSequential *this)
{
  return MEMORY[0x24BED7CB0](this);
}

uint64_t llvm::Type::getPointerTo(llvm::Type *this)
{
  return MEMORY[0x24BED7DC0](this);
}

uint64_t llvm::Type::isSizedDerivedType()
{
  return MEMORY[0x24BED7DD8]();
}

uint64_t llvm::Type::getScalarSizeInBits(llvm::Type *this)
{
  return MEMORY[0x24BED7DE0](this);
}

uint64_t llvm::Type::getPrimitiveSizeInBits(llvm::Type *this)
{
  return MEMORY[0x24BED7DE8](this);
}

uint64_t llvm::APInt::countLeadingZerosSlowCase(llvm::APInt *this)
{
  return MEMORY[0x24BED7E70](this);
}

uint64_t llvm::Twine::str(llvm::Twine *this)
{
  return MEMORY[0x24BED7F78](this);
}

uint64_t llvm::Value::getContext(llvm::Value *this)
{
  return MEMORY[0x24BED7F90](this);
}

uint64_t llvm::Value::getMetadata()
{
  return MEMORY[0x24BED7FA0]();
}

uint64_t llvm::Value::hasNUsesOrMore(llvm::Value *this)
{
  return MEMORY[0x24BED7FA8](this);
}

uint64_t llvm::Value::dump(llvm::Value *this)
{
  return MEMORY[0x24BED7FD0](this);
}

uint64_t llvm::Value::print(llvm::Value *this, llvm::raw_ostream *a2)
{
  return MEMORY[0x24BED7FD8](this, a2);
}

uint64_t llvm::Value::getName(llvm::Value *this)
{
  return MEMORY[0x24BED7FE0](this);
}

uint64_t llvm::Module::getFunction()
{
  return MEMORY[0x24BED8000]();
}

uint64_t llvm::Module::getMDKindID()
{
  return MEMORY[0x24BED8008]();
}

uint64_t llvm::Module::getDataLayout(llvm::Module *this)
{
  return MEMORY[0x24BED8010](this);
}

uint64_t llvm::Module::getNamedMetadata(llvm::Module *this, const llvm::Twine *a2)
{
  return MEMORY[0x24BED8038](this, a2);
}

uint64_t llvm::Module::getGlobalVariable()
{
  return MEMORY[0x24BED8040]();
}

uint64_t llvm::Module::print()
{
  return MEMORY[0x24BED8050]();
}

uint64_t llvm::detail::DoubleAPFloat::bitcastToAPInt(llvm::detail::DoubleAPFloat *this)
{
  return MEMORY[0x24BED80E8](this);
}

uint64_t llvm::detail::IEEEFloat::bitcastToAPInt(llvm::detail::IEEEFloat *this)
{
  return MEMORY[0x24BED8110](this);
}

uint64_t llvm::object::MetalLibObjectFile::materializeModuleForFunctionNo(llvm::object::MetalLibObjectFile *this)
{
  return MEMORY[0x24BED8158](this);
}

uint64_t llvm::object::MetalLibObjectFile::functions(llvm::object::MetalLibObjectFile *this)
{
  return MEMORY[0x24BED8160](this);
}

uint64_t llvm::Argument::getDereferenceableBytes(llvm::Argument *this)
{
  return MEMORY[0x24BED8200](this);
}

uint64_t llvm::CallBase::getNumSubclassExtraOperandsDynamic(llvm::CallBase *this)
{
  return MEMORY[0x24BED8230](this);
}

uint64_t llvm::Constant::isZeroValue(llvm::Constant *this)
{
  return MEMORY[0x24BED8248](this);
}

uint64_t llvm::Constant::getAggregateElement(llvm::Constant *this)
{
  return MEMORY[0x24BED8268](this);
}

uint64_t llvm::Constant::removeDeadConstantUsers(llvm::Constant *this)
{
  return MEMORY[0x24BED8270](this);
}

uint64_t llvm::Function::getContext(llvm::Function *this)
{
  return MEMORY[0x24BED8288](this);
}

uint64_t llvm::Function::getSubprogram(llvm::Function *this)
{
  return MEMORY[0x24BED8290](this);
}

uint64_t llvm::Function::hasFnAttribute()
{
  return MEMORY[0x24BED82A0]();
}

uint64_t llvm::Function::hasParamAttribute()
{
  return MEMORY[0x24BED82B0]();
}

uint64_t llvm::Function::BuildLazyArguments(llvm::Function *this)
{
  return MEMORY[0x24BED82B8](this);
}

uint64_t llvm::MDString::getString(llvm::MDString *this)
{
  return MEMORY[0x24BED82D0](this);
}

uint64_t llvm::TypeSize::operator unsigned long long()
{
  return MEMORY[0x24BED82D8]();
}

uint64_t llvm::StringRef::find()
{
  return MEMORY[0x24BED8380]();
}

uint64_t llvm::StringRef::split()
{
  return MEMORY[0x24BED8398]();
}

std::string::size_type std::string::find(const std::string *this, const std::string::value_type *__s, std::string::size_type __pos, std::string::size_type __n)
{
  return MEMORY[0x24BEDA9A8](this, __s, __pos, __n);
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x24BEDA9E0]();
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x24BEDAA60](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x24BEDAA70](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x24BEDAAA8](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x24BEDABB0](this);
}

void std::__call_once(std::once_flag::_State_type *a1, void *a2, void (__cdecl *a3)(void *))
{
  MEMORY[0x24BEDABC0](a1, a2, a3);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x24BEDABE8](__n);
}

std::string *__cdecl std::string::erase(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC20](this, __pos, __n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x24BEDAC38](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC40](this, __s, __n);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x24BEDAC58](this, __s);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x24BEDAC80](this, __pos, __s);
}

std::string *__cdecl std::string::replace(std::string *this, std::string::size_type __pos, std::string::size_type __n1, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x24BEDACA0](this, __pos, __n1, __s);
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
  MEMORY[0x24BEDACB8](this, __requested_capacity);
}

void std::string::__grow_by(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add)
{
  MEMORY[0x24BEDACC0](this, __old_cap, __delta_cap, __old_sz, __n_copy, __n_del, __n_add);
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x24BEDACE8](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x24BEDAD00](this, __str);
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x24BEDAEF8]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x24BEDAF00]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x24BEDB010]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x24BEDB048]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x24BEDB050]();
}

const std::error_category *std::system_category(void)
{
  return (const std::error_category *)MEMORY[0x24BEDB0B0]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB180](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB190](this);
}

int std::stoi(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x24BEDB330](__str, __idx, *(_QWORD *)&__base);
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x24BEDB448](this);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
  MEMORY[0x24BEDB500](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x24BEDB518](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x24BEDB530](this, *(_QWORD *)&__state);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x24BEDB5E8]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x24BEDB610](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x24BEDB630](retstr, __val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x24BEDB638]();
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x24BEDB688](this);
}

void std::terminate(void)
{
  MEMORY[0x24BEDB6C0]();
}

uint64_t operator delete[]()
{
  return off_25111DD70();
}

void operator delete(void *__p)
{
  off_25111DD78(__p);
}

uint64_t operator delete()
{
  return off_25111DD80();
}

uint64_t operator new[]()
{
  return off_25111DD88();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_25111DD90(__sz);
}

uint64_t operator new()
{
  return off_25111DD98();
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x24BEDB8F8](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x24BDAC7B0](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x24BEDB910](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x24BEDB928]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x24BEDB930](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x24BEDB940](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x24BEDB948](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x24BEDB950](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x24BEDB958]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x24BEDB960](a1, lptinfo, a3);
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x24BDACB60]();
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB80](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB88](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

void abort(void)
{
  MEMORY[0x24BDAD008]();
}

uint64_t abort_with_reason()
{
  return MEMORY[0x24BDAD020]();
}

uint64_t atol(const char *a1)
{
  return MEMORY[0x24BDAD260](a1);
}

uint64_t backtrace_set_pcs_func()
{
  return MEMORY[0x24BDAD298]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

uint64_t deleteCompilerHelper()
{
  return MEMORY[0x24BE63568]();
}

dispatch_data_t dispatch_data_create(const void *buffer, size_t size, dispatch_queue_t queue, dispatch_block_t destructor)
{
  return (dispatch_data_t)MEMORY[0x24BDADD60](buffer, size, queue, destructor);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x24BDADE98](predicate, block);
}

int dlclose(void *__handle)
{
  return MEMORY[0x24BDAE060](__handle);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x24BDAE068]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x24BDAE070](__path, *(_QWORD *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x24BDAE088](__handle, __symbol);
}

int fclose(FILE *a1)
{
  return MEMORY[0x24BDAE2E0](a1);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x24BDAE410](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x24BDAE428](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x24BDAE590](__ptr, __size, __nitems, __stream);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x24BDAE5F0](a1);
}

int getpagesize(void)
{
  return MEMORY[0x24BDAE6B8]();
}

pid_t getpid(void)
{
  return MEMORY[0x24BDAE6D0]();
}

long double log2(long double __x)
{
  long double result;

  MEMORY[0x24BDAEAD8](__x);
  return result;
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x24BDAEB30]();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x24BDAEC68](info);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED70](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED78](size, type_id);
}

int malloc_type_posix_memalign(void **memptr, size_t alignment, size_t size, malloc_type_id_t type_id)
{
  return MEMORY[0x24BDAED80](memptr, alignment, size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED88](ptr, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE70](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

uint64_t memorystatus_control()
{
  return MEMORY[0x24BDAEEA0]();
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x24BDAEEA8](__b, *(_QWORD *)&__c, __len);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x24BDAEFA8](a1, a2, *(_QWORD *)&a3, *(_QWORD *)&a4, *(_QWORD *)&a5, a6);
}

int mprotect(void *a1, size_t a2, int a3)
{
  return MEMORY[0x24BDAEFC8](a1, a2, *(_QWORD *)&a3);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x24BDAEFF0](a1, a2);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x24BEDCF68](a1);
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x24BEDCFA8](a1);
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x24BEDD068](obj);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x24BEDD130]();
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF460](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF488](lock);
}

int printf(const char *a1, ...)
{
  return MEMORY[0x24BDAF6A8](a1);
}

void *__cdecl pthread_get_stackaddr_np(pthread_t a1)
{
  return (void *)MEMORY[0x24BDAF840](a1);
}

size_t pthread_get_stacksize_np(pthread_t a1)
{
  return MEMORY[0x24BDAF848](a1);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x24BDAF978]();
}

uintptr_t pthread_stack_frame_decode_np(uintptr_t frame_addr, uintptr_t *return_addr)
{
  return MEMORY[0x24BDAF9C0](frame_addr, return_addr);
}

uint64_t sandbox_extension_consume()
{
  return MEMORY[0x24BDAFC00]();
}

uint64_t sandbox_extension_release()
{
  return MEMORY[0x24BDAFC20]();
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x24BDAFE40](__str, __size, __format);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x24BDAFEF0](__s1, __s2);
}

char *__cdecl strcpy(char *__dst, const char *__src)
{
  return (char *)MEMORY[0x24BDAFF00](__dst, __src);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x24BDAFF10](__s1);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x24BDAFF40](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x24BDAFF68](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x24BDAFF70](__dst, __src, __n);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x24BDAFF80](__s1, __n);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x24BDB0000](__str, __endptr, *(_QWORD *)&__base);
}

int vasprintf(char **a1, const char *a2, va_list a3)
{
  return MEMORY[0x24BDB0358](a1, a2, a3);
}

__int32 *__cdecl wmemchr(__int32 *__s, __int32 __c, size_t __n)
{
  return (__int32 *)MEMORY[0x24BDB0518](__s, *(_QWORD *)&__c, __n);
}

