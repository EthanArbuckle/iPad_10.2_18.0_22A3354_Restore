uint64_t sub_242729014(uint64_t *a1)
{
  void *v2;
  uint64_t *v3;
  void *v4;
  char v5;
  id v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  id v11;
  char v12;
  uint8_t buf[4];
  void *v14;
  __int16 v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (*((char *)a1 + 23) >= 0)
    v3 = a1;
  else
    v3 = (uint64_t *)*a1;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = 0;
  if ((objc_msgSend(v2, "fileExistsAtPath:isDirectory:", v4, &v12) & 1) != 0)
  {
    if (!v12)
    {
LABEL_15:
      v8 = 0;
      goto LABEL_16;
    }
  }
  else
  {
    v11 = 0;
    v5 = objc_msgSend(v2, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v4, 1, 0, &v11);
    v6 = v11;
    v7 = v6;
    if ((v5 & 1) == 0)
    {
      if (qword_257206B08 != -1)
        dispatch_once(&qword_257206B08, &unk_25135B9C8);
      v9 = qword_257206B00;
      if (os_log_type_enabled((os_log_t)qword_257206B00, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138543618;
        v14 = v4;
        v15 = 2114;
        v16 = v7;
        _os_log_impl(&dword_242728000, v9, OS_LOG_TYPE_INFO, "Unable to create directory at path: %{public}@, error, %{public}@", buf, 0x16u);
      }

      goto LABEL_15;
    }

  }
  v8 = 1;
LABEL_16:

  return v8;
}

void sub_242729198(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2427291C0(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  void *v6;
  void *v7;
  uint64_t *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  uint64_t *v12;
  uint64_t *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  void *v19;
  void *v20;
  _BOOL4 v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  __n128 *v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  id v40[2];
  uint8_t v41[128];
  _BYTE buf[24];
  char *v43;
  uint64_t *v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)MEMORY[0x24BDBCF48];
  if (*((char *)a1 + 23) >= 0)
    v8 = a1;
  else
    v8 = (uint64_t *)*a1;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "fileURLWithPath:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v40[0] = 0;
  objc_msgSend(v6, "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:", v10, 0, 4, v40);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  v35 = v40[0];

  if (v35)
  {
    if (qword_257206B08 != -1)
      dispatch_once(&qword_257206B08, &unk_25135B9C8);
    v11 = qword_257206B00;
    if (os_log_type_enabled((os_log_t)qword_257206B00, OS_LOG_TYPE_INFO))
    {
      if (*((char *)a1 + 23) >= 0)
        v12 = a1;
      else
        v12 = (uint64_t *)*a1;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = v12;
      *(_WORD *)&buf[12] = 2114;
      *(_QWORD *)&buf[14] = v35;
      _os_log_impl(&dword_242728000, v11, OS_LOG_TYPE_INFO, "Unable to list files at path: %{public}s, error, %{public}@", buf, 0x16u);
    }
  }
  else
  {
    if (*((char *)a2 + 23) >= 0)
      v13 = a2;
    else
      v13 = (uint64_t *)*a2;
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v13, v34);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v15 = v34;
    v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v36, v41, 16);
    if (v16)
    {
      v17 = *(_QWORD *)v37;
      do
      {
        for (i = 0; i != v16; ++i)
        {
          if (*(_QWORD *)v37 != v17)
            objc_enumerationMutation(v15);
          v19 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * i);
          objc_msgSend(v19, "pathExtension");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          v21 = objc_msgSend(v20, "compare:options:", v14, 1) == 0;

          if (v21)
          {
            v22 = (char *)objc_msgSend(objc_retainAutorelease(v19), "fileSystemRepresentation");
            v24 = a3[1];
            v23 = a3[2];
            if (v24 >= v23)
            {
              v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - *a3) >> 3);
              v27 = v26 + 1;
              if (v26 + 1 > 0xAAAAAAAAAAAAAAALL)
                sub_242729A44();
              v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a3) >> 3);
              if (2 * v28 > v27)
                v27 = 2 * v28;
              if (v28 >= 0x555555555555555)
                v29 = 0xAAAAAAAAAAAAAAALL;
              else
                v29 = v27;
              v44 = a3 + 2;
              if (v29)
                v30 = (char *)sub_242729A58((uint64_t)(a3 + 2), v29);
              else
                v30 = 0;
              *(_QWORD *)buf = v30;
              *(_QWORD *)&buf[8] = &v30[24 * v26];
              *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
              v43 = &v30[24 * v29];
              sub_242729870(*(_QWORD **)&buf[8], v22);
              *(_QWORD *)&buf[16] += 24;
              sub_2427299D0(a3, buf);
              v25 = a3[1];
              sub_242729BB0((uint64_t)buf);
            }
            else
            {
              sub_242729870((_QWORD *)a3[1], v22);
              v25 = v24 + 24;
              a3[1] = v24 + 24;
            }
            a3[1] = v25;
          }
        }
        v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v36, v41, 16);
      }
      while (v16);
    }

    v31 = (__n128 *)a3[1];
    v32 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v31 - *a3) >> 3));
    if (v31 == (__n128 *)*a3)
      v33 = 0;
    else
      v33 = v32;
    sub_242729C38((__n128 *)*a3, v31, v33, 1);

  }
}

void sub_242729588(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  void *v12;
  void *v13;
  va_list va;

  va_start(va, a12);

  sub_2427297E4((void ***)va);
  _Unwind_Resume(a1);
}

void sub_242729624(uint64_t *a1)
{
  void *v2;
  uint64_t *v3;
  void *v4;
  char v5;
  id v6;
  NSObject *v7;
  uint64_t *v8;
  id v9;
  uint8_t buf[4];
  uint64_t *v11;
  __int16 v12;
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (*((char *)a1 + 23) >= 0)
    v3 = a1;
  else
    v3 = (uint64_t *)*a1;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = 0;
  v5 = objc_msgSend(v2, "removeItemAtPath:error:", v4, &v9);
  v6 = v9;

  if ((v5 & 1) == 0)
  {
    if (qword_257206B08 != -1)
      dispatch_once(&qword_257206B08, &unk_25135B9C8);
    v7 = qword_257206B00;
    if (os_log_type_enabled((os_log_t)qword_257206B00, OS_LOG_TYPE_INFO))
    {
      if (*((char *)a1 + 23) >= 0)
        v8 = a1;
      else
        v8 = (uint64_t *)*a1;
      *(_DWORD *)buf = 136446466;
      v11 = v8;
      v12 = 2114;
      v13 = v6;
      _os_log_impl(&dword_242728000, v7, OS_LOG_TYPE_INFO, "Unable to delete file %{public}s, error, %{public}@", buf, 0x16u);
    }
  }

}

void sub_242729780(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2427297A4()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MotionSensorLogging", "MSL");
  v1 = (void *)qword_257206B00;
  qword_257206B00 = (uint64_t)v0;

}

void sub_2427297D4(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void sub_2427297E4(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_242729824((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_242729824(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

_QWORD *sub_242729870(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_242729920();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void sub_242729920()
{
  sub_242729934("basic_string");
}

void sub_242729934(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_242729984(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_25135B660, MEMORY[0x24BEDAAF0]);
}

void sub_242729970(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_242729984(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

void sub_2427299A8()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

uint64_t sub_2427299D0(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_242729A9C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void sub_242729A44()
{
  sub_242729934("vector");
}

void *sub_242729A58(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_2427299A8();
  return operator new(24 * a2);
}

uint64_t sub_242729A9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  sub_242729B38((uint64_t)v12);
  return a6;
}

uint64_t sub_242729B38(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_242729B6C(a1);
  return a1;
}

void sub_242729B6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
}

uint64_t sub_242729BB0(uint64_t a1)
{
  sub_242729BE4(a1, *(void ***)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_242729BE4(uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

void sub_242729C38(__n128 *a1, __n128 *a2, uint64_t a3, char a4)
{
  unint64_t *v8;
  unint64_t *v9;
  __n128 *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __n128 *v14;
  uint64_t v15;
  __n128 v16;
  unint64_t v17;
  __n128 v18;
  uint64_t v19;
  __n128 v20;
  unint64_t v21;
  __n128 *v22;
  __n128 *v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __int8 *v27;
  __n128 v28;
  __n128 v29;
  BOOL v30;
  BOOL v31;
  __n128 v32;
  __n128 *v33;
  _BOOL4 v34;
  __n128 *v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  __int8 *v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  __n128 *v45;
  BOOL v47;
  uint64_t v48;
  __n128 *v49;
  __n128 *v50;
  __n128 v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  __n128 v55;
  int64_t v56;
  int64_t v57;
  int64_t v58;
  uint64_t v59;
  char *v60;
  unint64_t *v61;
  __n128 v62;
  unint64_t *v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  __n128 v67;
  int64_t v68;
  __n128 *v69;
  uint64_t v70;
  __n128 *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __n128 v78;
  __n128 v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  __n128 v84;
  uint64_t v85;
  __int128 v86;
  __n128 v87;
  uint64_t v88;
  __int8 *v90;
  __n128 *v91;
  __n128 v92;
  __int8 *v93;
  BOOL v94;
  __n128 v95;
  unint64_t v96;
  __n128 *v97;
  unsigned __int8 v98;
  __n128 *v99;
  __n128 v100;
  unint64_t v101;
  __n128 v102;
  unint64_t v103;
  uint64_t v104;

  v104 = *MEMORY[0x24BDAC8D0];
LABEL_2:
  v8 = &a2[-2].n128_u64[1];
  v97 = a2 - 3;
  v99 = a2;
  v9 = &a2[-5].n128_u64[1];
  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v10) >> 3);
    switch(v12)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (sub_24272A620(v8, a1))
        {
          v42 = *a1;
          v101 = a1[1].n128_u64[0];
          v100 = v42;
          v43 = *(__n128 *)v8;
          a1[1].n128_u64[0] = v8[2];
          *a1 = v43;
          v44 = v100;
          v8[2] = v101;
          *(__n128 *)v8 = v44;
        }
        return;
      case 3:
        sub_24272A688(a1, &a1[1].n128_u64[1], v8);
        return;
      case 4:
        sub_24272A978(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, v8);
        return;
      case 5:
        sub_24272AA44(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, &a1[4].n128_u64[1], v8);
        return;
      default:
        if (v11 <= 575)
        {
          v45 = (__n128 *)((char *)a1 + 24);
          v47 = a1 == a2 || v45 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v47)
            {
              v48 = 0;
              v49 = a1;
              do
              {
                v50 = v49;
                v49 = v45;
                if (sub_24272A620(v45, v50))
                {
                  v51 = *v49;
                  v101 = v49[1].n128_u64[0];
                  v100 = v51;
                  v49->n128_u64[1] = 0;
                  v49[1].n128_u64[0] = 0;
                  v49->n128_u64[0] = 0;
                  v52 = v48;
                  while (1)
                  {
                    v53 = (char *)a1 + v52;
                    *(__n128 *)(v53 + 24) = *(__n128 *)((char *)a1 + v52);
                    *((_QWORD *)v53 + 5) = *(unint64_t *)((char *)a1[1].n128_u64 + v52);
                    v53[23] = 0;
                    *v53 = 0;
                    if (!v52)
                      break;
                    v52 -= 24;
                    if (!sub_24272A620(&v100, (unint64_t *)((char *)a1->n128_u64 + v52)))
                    {
                      v54 = (uint64_t)&a1[1].n128_i64[1] + v52;
                      goto LABEL_81;
                    }
                  }
                  v54 = (uint64_t)a1;
LABEL_81:
                  v55 = v100;
                  *(_QWORD *)(v54 + 16) = v101;
                  *(__n128 *)v54 = v55;
                }
                v45 = (__n128 *)((char *)v49 + 24);
                v48 += 24;
              }
              while (&v49[1].n128_i8[8] != (__int8 *)a2);
            }
          }
          else if (!v47)
          {
            v90 = &a1[-2].n128_i8[8];
            do
            {
              v91 = a1;
              a1 = v45;
              if (sub_24272A620(v45, v91))
              {
                v92 = *a1;
                v101 = a1[1].n128_u64[0];
                v100 = v92;
                a1->n128_u64[1] = 0;
                a1[1].n128_u64[0] = 0;
                a1->n128_u64[0] = 0;
                v93 = v90;
                do
                {
                  *((_OWORD *)v93 + 3) = *(_OWORD *)(v93 + 24);
                  *((_QWORD *)v93 + 8) = *((_QWORD *)v93 + 5);
                  v93[47] = 0;
                  v93[24] = 0;
                  v94 = sub_24272A620(&v100, v93);
                  v93 -= 24;
                }
                while (v94);
                v95 = v100;
                *((_QWORD *)v93 + 8) = v101;
                *((__n128 *)v93 + 3) = v95;
              }
              v45 = (__n128 *)((char *)a1 + 24);
              v90 += 24;
            }
            while (&a1[1].n128_i8[8] != (__int8 *)a2);
          }
          return;
        }
        if (!a3)
        {
          if (a1 != a2)
          {
            v56 = (unint64_t)(v12 - 2) >> 1;
            v57 = v56;
            do
            {
              v58 = v57;
              if (v56 >= v57)
              {
                v59 = (2 * v57) | 1;
                v60 = (char *)a1 + 24 * v59;
                if (2 * v57 + 2 < v12 && sub_24272A620(&a1->n128_u64[3 * v59], (_QWORD *)v60 + 3))
                {
                  v60 += 24;
                  v59 = 2 * v58 + 2;
                }
                v61 = &a1->n128_u64[3 * v58];
                if (!sub_24272A620(v60, v61))
                {
                  v62 = *(__n128 *)v61;
                  v101 = v61[2];
                  v100 = v62;
                  v61[1] = 0;
                  v61[2] = 0;
                  *v61 = 0;
                  do
                  {
                    v63 = (unint64_t *)v60;
                    v64 = *(_OWORD *)v60;
                    v61[2] = *((_QWORD *)v60 + 2);
                    *(_OWORD *)v61 = v64;
                    v60[23] = 0;
                    *v60 = 0;
                    if (v56 < v59)
                      break;
                    v65 = (2 * v59) | 1;
                    v60 = (char *)a1 + 24 * v65;
                    v66 = 2 * v59 + 2;
                    if (v66 < v12 && sub_24272A620(&a1->n128_u64[3 * v65], (_QWORD *)v60 + 3))
                    {
                      v60 += 24;
                      v65 = v66;
                    }
                    v61 = v63;
                    v59 = v65;
                  }
                  while (!sub_24272A620(v60, &v100));
                  v67 = v100;
                  v63[2] = v101;
                  *(__n128 *)v63 = v67;
                }
              }
              v57 = v58 - 1;
            }
            while (v58);
            v68 = v11 / 0x18uLL;
            v69 = v99;
            do
            {
              v70 = 0;
              v71 = v69;
              v96 = a1->n128_u64[0];
              v102.n128_u64[0] = a1->n128_u64[1];
              *(unint64_t *)((char *)v102.n128_u64 + 7) = *(unint64_t *)((char *)&a1->n128_u64[1] + 7);
              v98 = a1[1].n128_u8[7];
              a1->n128_u64[1] = 0;
              a1[1].n128_u64[0] = 0;
              a1->n128_u64[0] = 0;
              v72 = v68 - 2;
              if (v68 < 2)
                v72 = v68 - 1;
              v73 = v72 >> 1;
              v74 = (uint64_t)a1;
              do
              {
                v75 = v74 + 24 * v70 + 24;
                v76 = 2 * v70;
                v70 = (2 * v70) | 1;
                v77 = v76 + 2;
                if (v76 + 2 < v68 && sub_24272A620((_QWORD *)v75, (_QWORD *)(v75 + 24)))
                {
                  v75 += 24;
                  v70 = v77;
                }
                if (*(char *)(v74 + 23) < 0)
                  operator delete(*(void **)v74);
                v78 = *(__n128 *)v75;
                *(_QWORD *)(v74 + 16) = *(_QWORD *)(v75 + 16);
                *(__n128 *)v74 = v78;
                *(_BYTE *)(v75 + 23) = 0;
                *(_BYTE *)v75 = 0;
                v74 = v75;
              }
              while (v70 <= v73);
              v69 = (__n128 *)((char *)v71 - 24);
              if ((__int8 *)v75 == &v71[-2].n128_i8[8])
              {
                *(_QWORD *)v75 = v96;
                v88 = *(uint64_t *)((char *)v102.n128_i64 + 7);
                *(_QWORD *)(v75 + 8) = v102.n128_u64[0];
                *(_QWORD *)(v75 + 15) = v88;
                *(_BYTE *)(v75 + 23) = v98;
              }
              else
              {
                v79 = *v69;
                *(_QWORD *)(v75 + 16) = v71[-1].n128_u64[1];
                *(__n128 *)v75 = v79;
                v71[-2].n128_u64[1] = v96;
                v80 = v102.n128_u64[0];
                *(unint64_t *)((char *)v71[-1].n128_u64 + 7) = *(unint64_t *)((char *)v102.n128_u64 + 7);
                v71[-1].n128_u64[0] = v80;
                v71[-1].n128_u8[15] = v98;
                v81 = v75 - (_QWORD)a1 + 24;
                if (v81 >= 25)
                {
                  v82 = (v81 / 0x18uLL - 2) >> 1;
                  v83 = (char *)a1 + 24 * v82;
                  if (sub_24272A620(v83, (_QWORD *)v75))
                  {
                    v84 = *(__n128 *)v75;
                    v101 = *(_QWORD *)(v75 + 16);
                    v100 = v84;
                    *(_QWORD *)(v75 + 8) = 0;
                    *(_QWORD *)(v75 + 16) = 0;
                    *(_QWORD *)v75 = 0;
                    do
                    {
                      v85 = (uint64_t)v83;
                      v86 = *(_OWORD *)v83;
                      *(_QWORD *)(v75 + 16) = *((_QWORD *)v83 + 2);
                      *(_OWORD *)v75 = v86;
                      v83[23] = 0;
                      *v83 = 0;
                      if (!v82)
                        break;
                      v82 = (v82 - 1) >> 1;
                      v83 = (char *)a1 + 24 * v82;
                      v75 = v85;
                    }
                    while (sub_24272A620(v83, &v100));
                    v87 = v100;
                    *(_QWORD *)(v85 + 16) = v101;
                    *(__n128 *)v85 = v87;
                  }
                }
              }
            }
            while (v68-- > 2);
          }
          return;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = (__n128 *)((char *)a1 + 24 * ((unint64_t)v12 >> 1));
        if ((unint64_t)v11 < 0xC01)
        {
          sub_24272A688(v14, a1, v8);
        }
        else
        {
          sub_24272A688(a1, v14, v8);
          v15 = 3 * v13;
          sub_24272A688(&a1[1].n128_u64[1], (_QWORD *)&a1[-1] + v15 - 1, v97);
          sub_24272A688((__n128 *)a1[3].n128_u64, &a1[1].n128_u64[v15 + 1], v9);
          sub_24272A688((_QWORD *)&a1[-1] + v15 - 1, v14, &a1[1].n128_u64[v15 + 1]);
          v16 = *a1;
          v101 = a1[1].n128_u64[0];
          v100 = v16;
          v17 = v14[1].n128_u64[0];
          *a1 = *v14;
          a1[1].n128_u64[0] = v17;
          v18 = v100;
          v14[1].n128_u64[0] = v101;
          *v14 = v18;
        }
        --a3;
        if ((a4 & 1) == 0 && !sub_24272A620(&a1[-2].n128_u64[1], a1))
        {
          v32 = *a1;
          v103 = a1[1].n128_u64[0];
          v102 = v32;
          a1->n128_u64[1] = 0;
          a1[1].n128_u64[0] = 0;
          a1->n128_u64[0] = 0;
          if (sub_24272A620(&v102, v8))
          {
            v10 = a1;
            do
              v10 = (__n128 *)((char *)v10 + 24);
            while (!sub_24272A620(&v102, v10));
          }
          else
          {
            v33 = (__n128 *)((char *)a1 + 24);
            do
            {
              v10 = v33;
              if (v33 >= a2)
                break;
              v34 = sub_24272A620(&v102, v33);
              v33 = (__n128 *)((char *)v10 + 24);
            }
            while (!v34);
          }
          v35 = a2;
          if (v10 < a2)
          {
            v35 = a2;
            do
              v35 = (__n128 *)((char *)v35 - 24);
            while (sub_24272A620(&v102, v35));
          }
          while (v10 < v35)
          {
            v36 = *v10;
            v101 = v10[1].n128_u64[0];
            v100 = v36;
            v37 = *v35;
            v10[1].n128_u64[0] = v35[1].n128_u64[0];
            *v10 = v37;
            v38 = v100;
            v35[1].n128_u64[0] = v101;
            *v35 = v38;
            do
              v10 = (__n128 *)((char *)v10 + 24);
            while (!sub_24272A620(&v102, v10));
            do
              v35 = (__n128 *)((char *)v35 - 24);
            while (sub_24272A620(&v102, v35));
          }
          v39 = &v10[-2].n128_i8[8];
          if (&v10[-2].n128_i8[8] == (__int8 *)a1)
          {
            if (v10[-1].n128_i8[15] < 0)
              operator delete((void *)a1->n128_u64[0]);
          }
          else
          {
            if (a1[1].n128_i8[7] < 0)
              operator delete((void *)a1->n128_u64[0]);
            v40 = *(__n128 *)v39;
            a1[1].n128_u64[0] = v10[-1].n128_u64[1];
            *a1 = v40;
            v10[-1].n128_u8[15] = 0;
            v10[-2].n128_u8[8] = 0;
          }
          a4 = 0;
          v41 = v102;
          v10[-1].n128_u64[1] = v103;
          *(__n128 *)v39 = v41;
          continue;
        }
        v19 = 0;
        v20 = *a1;
        v103 = a1[1].n128_u64[0];
        v102 = v20;
        a1->n128_u64[1] = 0;
        a1[1].n128_u64[0] = 0;
        a1->n128_u64[0] = 0;
        do
          v19 += 3;
        while (sub_24272A620(&a1->n128_u64[v19], &v102));
        v21 = (unint64_t)&a1->n128_u64[v19];
        v22 = v99;
        if (v19 == 3)
        {
          v22 = v99;
          do
          {
            if (v21 >= (unint64_t)v22)
              break;
            v22 = (__n128 *)((char *)v22 - 24);
          }
          while (!sub_24272A620(v22, &v102));
        }
        else
        {
          do
            v22 = (__n128 *)((char *)v22 - 24);
          while (!sub_24272A620(v22, &v102));
        }
        v10 = (__n128 *)((char *)a1 + v19 * 8);
        if (v21 < (unint64_t)v22)
        {
          v23 = v22;
          do
          {
            v24 = *v10;
            v101 = v10[1].n128_u64[0];
            v100 = v24;
            v25 = *v23;
            v10[1].n128_u64[0] = v23[1].n128_u64[0];
            *v10 = v25;
            v26 = v100;
            v23[1].n128_u64[0] = v101;
            *v23 = v26;
            do
              v10 = (__n128 *)((char *)v10 + 24);
            while (sub_24272A620(v10, &v102));
            do
              v23 = (__n128 *)((char *)v23 - 24);
            while (!sub_24272A620(v23, &v102));
          }
          while (v10 < v23);
        }
        v27 = &v10[-2].n128_i8[8];
        if (&v10[-2].n128_i8[8] == (__int8 *)a1)
        {
          if (v10[-1].n128_i8[15] < 0)
            operator delete((void *)a1->n128_u64[0]);
        }
        else
        {
          if (a1[1].n128_i8[7] < 0)
            operator delete((void *)a1->n128_u64[0]);
          v28 = *(__n128 *)v27;
          a1[1].n128_u64[0] = v10[-1].n128_u64[1];
          *a1 = v28;
          v10[-1].n128_u8[15] = 0;
          v10[-2].n128_u8[8] = 0;
        }
        v29 = v102;
        v10[-1].n128_u64[1] = v103;
        *(__n128 *)v27 = v29;
        v30 = v21 >= (unint64_t)v22;
        a2 = v99;
        if (!v30)
        {
LABEL_35:
          sub_242729C38(a1, &v10[-2].n128_i8[8], a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v31 = sub_24272A7A4(a1, (__n128 *)((char *)v10 - 24));
        if (!sub_24272A7A4(v10, v99))
        {
          if (v31)
            continue;
          goto LABEL_35;
        }
        a2 = (__n128 *)((char *)v10 - 24);
        if (!v31)
          goto LABEL_2;
        return;
    }
  }
}

BOOL sub_24272A620(_QWORD *a1, _QWORD *a2)
{
  int v2;
  int v3;
  size_t v4;
  size_t v5;
  size_t v6;
  int v7;

  v2 = *((char *)a2 + 23);
  v3 = *((char *)a1 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = a1[1];
  if (v3 < 0)
    a1 = (_QWORD *)*a1;
  if (v2 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = a2[1];
  if (v2 < 0)
    a2 = (_QWORD *)*a2;
  if (v5 >= v4)
    v6 = v4;
  else
    v6 = v5;
  v7 = memcmp(a1, a2, v6);
  if (v7)
    return v7 < 0;
  else
    return v4 < v5;
}

BOOL sub_24272A688(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  BOOL v6;
  _BOOL8 result;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  v6 = sub_24272A620(a2, a1);
  result = sub_24272A620(a3, a2);
  if (v6)
  {
    if (result)
    {
      v8 = a1[2];
      v9 = *(_OWORD *)a1;
      v10 = a3[2];
      *(_OWORD *)a1 = *(_OWORD *)a3;
      a1[2] = v10;
    }
    else
    {
      v17 = a1[2];
      v18 = *(_OWORD *)a1;
      v19 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v19;
      *(_OWORD *)a2 = v18;
      a2[2] = v17;
      result = sub_24272A620(a3, a2);
      if (!result)
        return result;
      v8 = a2[2];
      v9 = *(_OWORD *)a2;
      v20 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v20;
    }
    *(_OWORD *)a3 = v9;
    a3[2] = v8;
  }
  else if (result)
  {
    v11 = a2[2];
    v12 = *(_OWORD *)a2;
    v13 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v13;
    *(_OWORD *)a3 = v12;
    a3[2] = v11;
    result = sub_24272A620(a2, a1);
    if (result)
    {
      v14 = a1[2];
      v15 = *(_OWORD *)a1;
      v16 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v16;
      *(_OWORD *)a2 = v15;
      a2[2] = v14;
    }
  }
  return result;
}

BOOL sub_24272A7A4(__n128 *a1, __n128 *a2)
{
  unint64_t v4;
  _BOOL8 result;
  __n128 *v6;
  unint64_t v7;
  __n128 v8;
  unint64_t v9;
  __n128 *v10;
  unint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  unint64_t v18;

  v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (__n128 *)((char *)a2 - 24);
      if (sub_24272A620(&a2[-2].n128_u64[1], a1))
      {
        v7 = a1[1].n128_u64[0];
        v8 = *a1;
        v9 = v6[1].n128_u64[0];
        *a1 = *v6;
        a1[1].n128_u64[0] = v9;
        *v6 = v8;
        v6[1].n128_u64[0] = v7;
      }
      return 1;
    case 3uLL:
      sub_24272A688(a1, &a1[1].n128_u64[1], &a2[-2].n128_u64[1]);
      return 1;
    case 4uLL:
      sub_24272A978(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, &a2[-2].n128_u64[1]);
      return 1;
    case 5uLL:
      sub_24272AA44(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, &a1[4].n128_u64[1], &a2[-2].n128_u64[1]);
      return 1;
    default:
      v10 = a1 + 3;
      sub_24272A688(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64);
      v11 = &a1[4].n128_u64[1];
      if (&a1[4].n128_i8[8] == (__int8 *)a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if (sub_24272A620(v11, v10))
    {
      v17 = *(_OWORD *)v11;
      v18 = v11[2];
      v11[1] = 0;
      v11[2] = 0;
      *v11 = 0;
      v14 = v12;
      while (1)
      {
        v15 = (char *)a1 + v14;
        *(__n128 *)(v15 + 72) = *(__n128 *)((char *)a1 + v14 + 48);
        *((_QWORD *)v15 + 11) = *(unint64_t *)((char *)a1[4].n128_u64 + v14);
        v15[71] = 0;
        v15[48] = 0;
        if (v14 == -48)
          break;
        v14 -= 24;
        if (!sub_24272A620(&v17, (_QWORD *)v15 + 3))
        {
          v16 = (uint64_t)&a1[4].n128_i64[1] + v14;
          goto LABEL_12;
        }
      }
      v16 = (uint64_t)a1;
LABEL_12:
      *(_OWORD *)v16 = v17;
      *(_QWORD *)(v16 + 16) = v18;
      if (++v13 == 8)
        return v11 + 3 == (unint64_t *)a2;
    }
    v10 = (__n128 *)v11;
    v12 += 24;
    v11 += 3;
    if (v11 == (unint64_t *)a2)
      return 1;
  }
}

__n128 sub_24272A978(__n128 *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  __n128 result;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  sub_24272A688(a1, a2, a3);
  if (sub_24272A620(a4, a3))
  {
    v9 = a3[2];
    v10 = *(_OWORD *)a3;
    v11 = a4[2];
    *(_OWORD *)a3 = *(_OWORD *)a4;
    a3[2] = v11;
    *(_OWORD *)a4 = v10;
    a4[2] = v9;
    if (sub_24272A620(a3, a2))
    {
      v12 = a2[2];
      v13 = *(_OWORD *)a2;
      v14 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v14;
      *(_OWORD *)a3 = v13;
      a3[2] = v12;
      if (sub_24272A620(a2, a1))
      {
        v15 = a1[1].n128_u64[0];
        result = *a1;
        v16 = a2[2];
        *a1 = *(__n128 *)a2;
        a1[1].n128_u64[0] = v16;
        *(__n128 *)a2 = result;
        a2[2] = v15;
      }
    }
  }
  return result;
}

__n128 sub_24272AA44(__n128 *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  __n128 result;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;

  sub_24272A978(a1, a2, a3, a4);
  if (sub_24272A620(a5, a4))
  {
    v11 = a4[2];
    v12 = *(_OWORD *)a4;
    v13 = a5[2];
    *(_OWORD *)a4 = *(_OWORD *)a5;
    a4[2] = v13;
    *(_OWORD *)a5 = v12;
    a5[2] = v11;
    if (sub_24272A620(a4, a3))
    {
      v14 = a3[2];
      v15 = *(_OWORD *)a3;
      v16 = a4[2];
      *(_OWORD *)a3 = *(_OWORD *)a4;
      a3[2] = v16;
      *(_OWORD *)a4 = v15;
      a4[2] = v14;
      if (sub_24272A620(a3, a2))
      {
        v17 = a2[2];
        v18 = *(_OWORD *)a2;
        v19 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v19;
        *(_OWORD *)a3 = v18;
        a3[2] = v17;
        if (sub_24272A620(a2, a1))
        {
          v20 = a1[1].n128_u64[0];
          result = *a1;
          v21 = a2[2];
          *a1 = *(__n128 *)a2;
          a1[1].n128_u64[0] = v21;
          *(__n128 *)a2 = result;
          a2[2] = v20;
        }
      }
    }
  }
  return result;
}

double sub_24272AB4C(unint64_t a1)
{
  double v2;
  uint32_t denom;
  uint32_t numer;
  uint32_t v5;
  unsigned int v6;
  uint32_t v7;
  uint32_t v8;
  mach_timebase_info info;

  v2 = *(double *)&qword_257206B60;
  if (*(double *)&qword_257206B60 == 0.0)
  {
    mach_timebase_info(&info);
    if (info.denom)
    {
      denom = info.denom;
      numer = info.numer;
      do
      {
        v5 = denom;
        denom = numer % denom;
        numer = v5;
      }
      while (denom);
    }
    else
    {
      v5 = info.numer;
    }
    v6 = 1000000000;
    v7 = info.numer / v5;
    do
    {
      v8 = v7;
      v7 = v6;
      v6 = v8 % v6;
    }
    while (v6);
    v2 = (double)(info.numer / v5 / v7) / (double)(0x3B9ACA00 / v7 * (unint64_t)(info.denom / v5));
    *(double *)&qword_257206B60 = v2;
  }
  return v2 * (double)a1;
}

CMMsl::Writer *CMMsl::Writer::Writer(CMMsl::Writer *this)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  _QWORD handler[5];

  *(_QWORD *)this = 0;
  v2 = dispatch_queue_create("CMMsl.Writer", 0);
  *((_QWORD *)this + 1) = v2;
  v3 = dispatch_source_create(MEMORY[0x24BDACA18], 0, 0, v2);
  *((_QWORD *)this + 2) = v3;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 300;
  *((_DWORD *)this + 10) = -1;
  v4 = MEMORY[0x24BDAC760];
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  handler[0] = v4;
  handler[1] = 0x40000000;
  handler[2] = sub_24272ACF0;
  handler[3] = &unk_25135B9E8;
  handler[4] = this;
  dispatch_source_set_event_handler(v3, handler);
  dispatch_source_set_timer(*((dispatch_source_t *)this + 2), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL);
  dispatch_resume(*((dispatch_object_t *)this + 2));
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  deflateInit_((z_streamp)((char *)this + 80), -1, "1.2.12", 112);
  return this;
}

void sub_24272ACF0(uint64_t a1)
{
  CMMsl::Writer::closeSensRecord(*(CMMsl::Writer **)(a1 + 32));
}

void CMMsl::Writer::closeSensRecord(CMMsl::Writer *this)
{
  char *v1;
  z_stream *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  _DWORD *v8;
  NSObject *v9;
  NSObject *v10;
  _QWORD destructor[5];

  v1 = (char *)this + 56;
  if (*((_QWORD *)this + 7))
  {
    v3 = (z_stream *)((char *)this + 80);
    while (1)
    {
      v4 = deflate(v3, 4);
      if (v4)
        break;
      CMMsl::Writer::growZlibStream((void **)this);
    }
    if (v4 == 1)
    {
      v5 = *((_QWORD *)this + 15);
      v6 = v5 + 28;
      v7 = (v5 + 35) & 0xFFFFFFFFFFFFFFF8;
      v8 = (_DWORD *)*((_QWORD *)this + 7);
      v8[3] = v5 + 12;
      if (v5 + 28 < v7)
      {
        do
          *(_BYTE *)(*(_QWORD *)v1 + v6++) = 0;
        while (v7 != v6);
        v8 = *(_DWORD **)v1;
      }
      if (*(_QWORD *)this)
      {
        (*(void (**)(_QWORD, _DWORD *, size_t))(**(_QWORD **)this + 24))(*(_QWORD *)this, v8, v7);
        free(*(void **)v1);
      }
      else
      {
        v9 = *((_QWORD *)this + 1);
        destructor[0] = MEMORY[0x24BDAC760];
        destructor[1] = 0x40000000;
        destructor[2] = sub_24272B6C8;
        destructor[3] = &unk_25135BAF0;
        destructor[4] = v8;
        v10 = dispatch_data_create(v8, v7, v9, destructor);
        dispatch_io_write(*((dispatch_io_t *)this + 3), *((_QWORD *)this + 6), v10, *((dispatch_queue_t *)this + 1), &unk_25135BB30);
        dispatch_release(v10);
      }
      *((_QWORD *)this + 6) += v7;
      *((_QWORD *)v1 + 1) = 0;
      *((_QWORD *)v1 + 2) = 0;
      *(_QWORD *)v1 = 0;
      deflateReset(v3);
      dispatch_source_set_timer(*((dispatch_source_t *)this + 2), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, (unint64_t)(1000000000 * *((_QWORD *)this + 4)) >> 1);
    }
    else
    {
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "zstream status? Msl %d\n", v4);
    }
  }
}

void CMMsl::Writer::setFlushTimeoutSeconds(CMMsl::Writer *this, uint64_t a2)
{
  NSObject *v2;
  _QWORD v3[6];

  v2 = *((_QWORD *)this + 1);
  v3[0] = MEMORY[0x24BDAC760];
  v3[1] = 0x40000000;
  v3[2] = sub_24272AEEC;
  v3[3] = &unk_25135BA08;
  v3[4] = this;
  v3[5] = a2;
  dispatch_sync(v2, v3);
}

uint64_t sub_24272AEEC(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (*(_DWORD *)(v1 + 40) != -1)
    __assert_rtn("setFlushTimeoutSeconds_block_invoke", "MSLWriter.cpp", 56, "(fFd == -1) && (\"Writer::setFlushTimeout() must be called before ::open().\")");
  *(_QWORD *)(v1 + 32) = *(_QWORD *)(result + 40);
  return result;
}

void CMMsl::Writer::~Writer(CMMsl::Writer *this)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  int v5;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    dispatch_release(v2);
  v3 = *((_QWORD *)this + 2);
  if (v3)
    dispatch_release(v3);
  v4 = *((_QWORD *)this + 3);
  if (v4)
  {
    dispatch_release(v4);
  }
  else
  {
    v5 = *((_DWORD *)this + 10);
    if ((v5 & 0x80000000) == 0)
      close(v5);
  }
  free(*((void **)this + 7));
  deflateEnd((z_streamp)((char *)this + 80));
}

uint64_t CMMsl::Writer::open(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v3;
  uint64_t v4;
  _QWORD v6[7];
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2000000000;
  v11 = 0;
  v3 = *(NSObject **)(a1 + 8);
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 0x40000000;
  v6[2] = sub_24272B038;
  v6[3] = &unk_25135BA50;
  v6[5] = a1;
  v6[6] = a2;
  v7 = a3;
  v6[4] = &v8;
  dispatch_sync(v3, v6);
  v4 = *((unsigned __int8 *)v9 + 24);
  _Block_object_dispose(&v8, 8);
  return v4;
}

dispatch_io_t sub_24272B038(uint64_t a1)
{
  uint64_t v2;
  int v3;
  off_t v4;
  off_t v5;
  unint64_t v6;
  FILE *v7;
  const char *v8;
  size_t v9;
  dispatch_io_t result;
  dispatch_fd_t v11;
  NSObject *v12;
  FILE *v13;
  const char *v14;
  size_t v15;
  _QWORD cleanup_handler[4];
  dispatch_fd_t v17;
  uint64_t __buf;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = open_dprotected_np(*(const char **)(a1 + 48), 16777730, *(_DWORD *)(a1 + 56), 0, 438);
  *(_DWORD *)(v2 + 40) = v3;
  if (v3 < 0)
  {
    v7 = (FILE *)*MEMORY[0x24BDAC8D8];
    v8 = "Cannot open Msl file\n";
    v9 = 21;
    return (dispatch_io_t)fwrite(v8, v9, 1uLL, v7);
  }
  v4 = lseek(v3, 0, 2);
  if (v4 < 0)
  {
    v7 = (FILE *)*MEMORY[0x24BDAC8D8];
    v8 = "Cannot seek to end of Msl file\n";
    v9 = 31;
    return (dispatch_io_t)fwrite(v8, v9, 1uLL, v7);
  }
  v5 = v4;
  if (lseek(*(_DWORD *)(v2 + 40), 0, 0) < 0)
  {
    v7 = (FILE *)*MEMORY[0x24BDAC8D8];
    v8 = "Cannot seek to start of Msl file\n";
    v9 = 33;
    return (dispatch_io_t)fwrite(v8, v9, 1uLL, v7);
  }
  if (v5)
  {
    __buf = 0;
    if (pread(*(_DWORD *)(v2 + 40), &__buf, 8uLL, 0) != 8)
    {
      v13 = (FILE *)*MEMORY[0x24BDAC8D8];
      v14 = "Short signature in Msl file\n";
      v15 = 28;
      return (dispatch_io_t)fwrite(v14, v15, 1uLL, v13);
    }
    if (__buf != 0xE020C5BE006C536DLL)
    {
      v13 = (FILE *)*MEMORY[0x24BDAC8D8];
      v14 = "Bad signature in Msl file\n";
      v15 = 26;
      return (dispatch_io_t)fwrite(v14, v15, 1uLL, v13);
    }
    v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v6 = 8;
    pwrite(*(_DWORD *)(v2 + 40), &unk_24291F420, 8uLL, 0);
  }
  *(_QWORD *)(v2 + 48) = v6;
  v11 = *(_DWORD *)(v2 + 40);
  v12 = *(NSObject **)(v2 + 8);
  cleanup_handler[0] = MEMORY[0x24BDAC760];
  cleanup_handler[1] = 0x40000000;
  cleanup_handler[2] = sub_24272B240;
  cleanup_handler[3] = &unk_25135BA28;
  v17 = v11;
  result = dispatch_io_create(1uLL, v11, v12, cleanup_handler);
  *(_QWORD *)(v2 + 24) = result;
  if (result)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    return result;
  }
  v13 = (FILE *)*MEMORY[0x24BDAC8D8];
  v14 = "Cannot create dispatch_io for Msl file\n";
  v15 = 39;
  return (dispatch_io_t)fwrite(v14, v15, 1uLL, v13);
}

uint64_t sub_24272B240(uint64_t a1)
{
  return close(*(_DWORD *)(a1 + 32));
}

uint64_t CMMsl::Writer::open(_QWORD *a1, uint64_t a2, char a3)
{
  *a1 = a2;
  if ((a3 & 1) == 0)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a2 + 24))(a2, &unk_24291F420, 8);
    a1[6] = 8;
  }
  return 1;
}

void CMMsl::Writer::writeItem(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD v3[6];

  v2 = *(NSObject **)(a1 + 8);
  v3[0] = MEMORY[0x24BDAC760];
  v3[1] = 0x40000000;
  v3[2] = sub_24272B2F0;
  v3[3] = &unk_25135BA70;
  v3[4] = a1;
  v3[5] = a2;
  dispatch_sync(v2, v3);
}

void sub_24272B2F0(uint64_t a1)
{
  CMMsl::Writer *v2;
  uint64_t v3;
  unsigned __int8 v4[4];
  uint64_t v5;
  const unsigned __int8 *v6;

  v2 = *(CMMsl::Writer **)(a1 + 32);
  PB::Writer::Writer((PB::Writer *)&v5);
  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), &v5);
  v3 = *((_QWORD *)v2 + 7);
  if (!v3)
  {
    CMMsl::Writer::openSensRecord(v2);
    v3 = *((_QWORD *)v2 + 7);
  }
  ++*(_DWORD *)(v3 + 16);
  *(_DWORD *)v4 = v5 - (_DWORD)v6;
  CMMsl::Writer::pumpZlib((void **)v2, v4, 4);
  CMMsl::Writer::pumpZlib((void **)v2, v6, v5 - (_DWORD)v6);
  if (!*((_QWORD *)v2 + 9))
    CMMsl::Writer::closeSensRecord(v2);
  PB::Writer::~Writer((PB::Writer *)&v5);
}

void sub_24272B39C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PB::Writer::~Writer((PB::Writer *)va);
  _Unwind_Resume(a1);
}

void CMMsl::Writer::openSensRecord(CMMsl::Writer *this)
{
  uint64_t v2;
  int tv_sec;
  unint64_t v4;
  NSObject *v5;
  dispatch_time_t v6;
  timeval v7;

  *((_QWORD *)this + 7) = malloc_type_malloc(0x8000uLL, 0x4A3B362DuLL);
  *((_OWORD *)this + 4) = xmmword_24291F410;
  gettimeofday(&v7, 0);
  v2 = *((_QWORD *)this + 7);
  *(_QWORD *)v2 = 0x5979AAB3D5E07959;
  *(_QWORD *)(v2 + 8) = 1936614771;
  tv_sec = v7.tv_sec;
  *(_DWORD *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 20) = tv_sec;
  *(_DWORD *)(v2 + 24) = 1000 * v7.tv_usec;
  *((_QWORD *)this + 13) = v2 + 28;
  *((_DWORD *)this + 28) = *((_DWORD *)this + 16) - 28;
  v4 = 1000000000 * *((_QWORD *)this + 4);
  v5 = *((_QWORD *)this + 2);
  v6 = dispatch_time(0, v4);
  dispatch_source_set_timer(v5, v6, 0xFFFFFFFFFFFFFFFFLL, v4 >> 1);
}

void **CMMsl::Writer::pumpZlib(void **this, const unsigned __int8 *a2, int a3)
{
  z_stream *v3;
  uint64_t v4;

  this[10] = (void *)a2;
  v3 = (z_stream *)(this + 10);
  *((_DWORD *)this + 22) = a3;
  if (a3)
  {
    v4 = (uint64_t)this;
    do
    {
      this = (void **)deflate(v3, 0);
      if (!(_DWORD)this && !*(_DWORD *)(v4 + 112))
        this = CMMsl::Writer::growZlibStream((void **)v4);
    }
    while (*(_DWORD *)(v4 + 88));
  }
  return this;
}

void CMMsl::Writer::flush(CMMsl::Writer *this)
{
  NSObject *v1;
  _QWORD block[5];

  v1 = *((_QWORD *)this + 1);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = sub_24272B530;
  block[3] = &unk_25135BA90;
  block[4] = this;
  dispatch_sync(v1, block);
}

void sub_24272B530(uint64_t a1)
{
  CMMsl::Writer::closeSensRecord(*(CMMsl::Writer **)(a1 + 32));
}

void CMMsl::Writer::sync(CMMsl::Writer *this)
{
  dispatch_semaphore_t v2;
  NSObject *v3;
  _QWORD v4[6];

  v2 = dispatch_semaphore_create(0);
  v3 = *((_QWORD *)this + 1);
  v4[0] = MEMORY[0x24BDAC760];
  v4[1] = 0x40000000;
  v4[2] = sub_24272B5A4;
  v4[3] = &unk_25135BAD0;
  v4[4] = this;
  v4[5] = v2;
  dispatch_sync(v3, v4);
}

void sub_24272B5A4(uint64_t a1)
{
  CMMsl::Writer *v2;
  NSObject *v3;
  uint64_t v4;
  _QWORD v5[6];

  v2 = *(CMMsl::Writer **)(a1 + 32);
  CMMsl::Writer::closeSensRecord(v2);
  v3 = *((_QWORD *)v2 + 3);
  v5[0] = MEMORY[0x24BDAC760];
  v5[1] = 0x40000000;
  v5[2] = sub_24272B628;
  v5[3] = &unk_25135BAB0;
  v4 = *(_QWORD *)(a1 + 40);
  v5[4] = v2;
  v5[5] = v4;
  dispatch_io_barrier(v3, v5);
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 40), 0xFFFFFFFFFFFFFFFFLL);
  dispatch_release(*(dispatch_object_t *)(a1 + 40));
}

intptr_t sub_24272B628(uint64_t a1)
{
  fsync(*(_DWORD *)(*(_QWORD *)(a1 + 32) + 40));
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void **CMMsl::Writer::growZlibStream(void **this)
{
  void **v1;
  char *v2;
  void *v3;
  char *v4;

  v1 = this;
  v3 = this[8];
  v2 = (char *)this[9];
  if (v2)
  {
    *((_DWORD *)this + 28) += (_DWORD)v2;
    this[8] = &v2[(_QWORD)v3];
    this[9] = 0;
  }
  else
  {
    this[8] = (void *)(2 * (_QWORD)v3);
    this = (void **)malloc_type_realloc(this[7], 2 * (_QWORD)v3, 0x59C50B5uLL);
    v1[7] = this;
    v4 = (char *)v1[15];
    v1[13] = &v4[(_QWORD)this + 28];
    *((_DWORD *)v1 + 28) = *((_DWORD *)v1 + 16) - (_DWORD)v4;
  }
  return this;
}

void sub_24272B6C8(uint64_t a1)
{
  free(*(void **)(a1 + 32));
}

void sub_24272B6D0(int a1, char a2, int a3, int __errnum)
{
  FILE *v4;
  char *v5;

  if (__errnum || (a2 & 1) == 0)
  {
    v4 = (FILE *)*MEMORY[0x24BDAC8D8];
    v5 = strerror(__errnum);
    fprintf(v4, "Msl dispatch io write error %s\n", v5);
  }
}

uint64_t CMMsl::Writer::totalSizeApproximatelyWritten(CMMsl::Writer *this)
{
  return *((_QWORD *)this + 15) + *((_QWORD *)this + 6);
}

id sub_24272B734()
{
  unsigned __int8 v0;
  _QWORD v2[10];

  v2[9] = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_257206B18);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_257206B18))
  {
    v2[0] = CFSTR("LoggingEnabled");
    v2[1] = CFSTR("FilePrefix");
    v2[2] = CFSTR("FileBasePath");
    v2[3] = CFSTR("FileSize");
    v2[4] = CFSTR("FileTimeInterval");
    v2[5] = CFSTR("FilesToKeep");
    v2[6] = CFSTR("FileExtension");
    v2[7] = CFSTR("ProtectionClass");
    v2[8] = CFSTR("FlushTimeout");
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v2, 9);
    qword_257206B10 = objc_claimAutoreleasedReturnValue();
    __cxa_guard_release(&qword_257206B18);
  }
  return (id)qword_257206B10;
}

void sub_24272B834(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_257206B18);
  _Unwind_Resume(a1);
}

void sub_24272B84C()
{
  dispatch_queue_t v0;
  void *v1;

  v0 = dispatch_queue_create("com.apple.Msl.DefaultsQueue", 0);
  v1 = (void *)qword_257206B20;
  qword_257206B20 = (uint64_t)v0;

}

void sub_24272B878(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  *(_QWORD *)a2 = 1048576000;
  *(_QWORD *)(a2 + 8) = 0x3200015180;
  sub_242729870((_QWORD *)(a2 + 16), "/tmp/");
  sub_242729870((_QWORD *)(a2 + 40), (char *)&unk_242928F37);
  sub_242729870((_QWORD *)(a2 + 64), "msl");
  *(_DWORD *)(a2 + 88) = 2;
  *(_QWORD *)(a2 + 96) = 300;
  objc_msgSend(*(id *)(a1 + 16), "allKeys");
  v12 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v12, "containsObject:", CFSTR("FilePrefix")))
  {
    objc_msgSend(*(id *)(a1 + 16), "valueForKey:", CFSTR("FilePrefix"));
    v4 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    MEMORY[0x2494E8228](a2 + 40, objc_msgSend(v4, "UTF8String"));

  }
  if (objc_msgSend(v12, "containsObject:", CFSTR("FileBasePath")))
  {
    objc_msgSend(*(id *)(a1 + 16), "valueForKey:", CFSTR("FileBasePath"));
    v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    MEMORY[0x2494E8228](a2 + 16, objc_msgSend(v5, "UTF8String"));

  }
  if (objc_msgSend(v12, "containsObject:", CFSTR("FileExtension")))
  {
    objc_msgSend(*(id *)(a1 + 16), "valueForKey:", CFSTR("FileExtension"));
    v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    MEMORY[0x2494E8228](a2 + 64, objc_msgSend(v6, "UTF8String"));

  }
  if (objc_msgSend(v12, "containsObject:", CFSTR("FileTimeInterval")))
  {
    objc_msgSend(*(id *)(a1 + 16), "valueForKey:", CFSTR("FileTimeInterval"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)(a2 + 8) = objc_msgSend(v7, "unsignedIntValue");

  }
  if (objc_msgSend(v12, "containsObject:", CFSTR("FilesToKeep")))
  {
    objc_msgSend(*(id *)(a1 + 16), "valueForKey:", CFSTR("FilesToKeep"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)(a2 + 12) = objc_msgSend(v8, "unsignedIntValue");

  }
  if (objc_msgSend(v12, "containsObject:", CFSTR("FileSize")))
  {
    objc_msgSend(*(id *)(a1 + 16), "valueForKey:", CFSTR("FileSize"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)a2 = objc_msgSend(v9, "unsignedIntValue");

  }
  if (objc_msgSend(v12, "containsObject:", CFSTR("ProtectionClass")))
  {
    objc_msgSend(*(id *)(a1 + 16), "valueForKey:", CFSTR("ProtectionClass"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)(a2 + 88) = objc_msgSend(v10, "unsignedIntValue");

  }
  if (objc_msgSend(v12, "containsObject:", CFSTR("FlushTimeout")))
  {
    objc_msgSend(*(id *)(a1 + 16), "valueForKey:", CFSTR("FlushTimeout"));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)(a2 + 96) = objc_msgSend(v11, "longLongValue");

  }
}

void sub_24272BB08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v10;
  void *v11;

  sub_24272BB9C(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_24272BB9C(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_24272BBEC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  uint64_t v32;
  void *v33;
  void *v34;
  BOOL v35;
  void *v36;
  NSObject *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t j;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint8_t v53[128];
  uint8_t buf[4];
  uint64_t v55;
  uint8_t v56[4];
  uint64_t v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a3;
  objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
  *(_QWORD *)(a1 + 16) = objc_claimAutoreleasedReturnValue();
  if (*((char *)a2 + 23) >= 0)
    v7 = a2;
  else
    v7 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v7);
  *(_QWORD *)(a1 + 24) = objc_claimAutoreleasedReturnValue();
  *(_QWORD *)(a1 + 32) = objc_msgSend(objc_alloc(MEMORY[0x24BDBCF50]), "initWithSuiteName:", *(_QWORD *)(a1 + 24));
  *(_QWORD *)(a1 + 40) = objc_opt_new();
  if (!*(_QWORD *)(a1 + 32))
  {
    if (qword_257206B38 != -1)
      dispatch_once(&qword_257206B38, &unk_25135BB90);
    v8 = qword_257206B30;
    if (os_log_type_enabled((os_log_t)qword_257206B30, OS_LOG_TYPE_FAULT))
    {
      v44 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)v56 = 138412290;
      v57 = v44;
      _os_log_fault_impl(&dword_242728000, v8, OS_LOG_TYPE_FAULT, "fUserDefaults returned nil for domain: %@", v56, 0xCu);
    }
  }
  v9 = *(void **)(a1 + 16);
  if (*(char *)(a4 + 63) >= 0)
    v10 = a4 + 40;
  else
    v10 = *(_QWORD *)(a4 + 40);
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setValue:forKey:", v11, CFSTR("FilePrefix"));

  v12 = *(void **)(a1 + 16);
  if (*(char *)(a4 + 39) >= 0)
    v13 = a4 + 16;
  else
    v13 = *(_QWORD *)(a4 + 16);
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "setValue:forKey:", v14, CFSTR("FileBasePath"));

  v15 = *(void **)(a1 + 16);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithLongLong:", *(_QWORD *)a4);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "setValue:forKey:", v16, CFSTR("FileSize"));

  v17 = *(void **)(a1 + 16);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", *(unsigned int *)(a4 + 8));
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "setValue:forKey:", v18, CFSTR("FileTimeInterval"));

  v19 = *(void **)(a1 + 16);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", *(unsigned int *)(a4 + 12));
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "setValue:forKey:", v20, CFSTR("FilesToKeep"));

  v21 = *(void **)(a1 + 16);
  if (*(char *)(a4 + 87) >= 0)
    v22 = a4 + 64;
  else
    v22 = *(_QWORD *)(a4 + 64);
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "setValue:forKey:", v23, CFSTR("FileExtension"));

  v24 = *(void **)(a1 + 16);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", *(unsigned int *)(a4 + 88));
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "setValue:forKey:", v25, CFSTR("ProtectionClass"));

  v26 = *(void **)(a1 + 16);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithLongLong:", *(_QWORD *)(a4 + 96));
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "setValue:forKey:", v27, CFSTR("FlushTimeout"));

  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  sub_24272B734();
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v49, v56, 16);
  if (v29)
  {
    v30 = *(_QWORD *)v50;
    do
    {
      for (i = 0; i != v29; ++i)
      {
        if (*(_QWORD *)v50 != v30)
          objc_enumerationMutation(v28);
        v32 = *(_QWORD *)(*((_QWORD *)&v49 + 1) + 8 * i);
        objc_msgSend(*(id *)(a1 + 32), "objectForKey:", v32);
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 32), "objectForKey:", v32);
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        v35 = v34 == 0;

        if (!v35)
        {
          v36 = (void *)objc_msgSend(v33, "copy");
          objc_msgSend(*(id *)(a1 + 16), "setObject:forKeyedSubscript:", v36, v32);

        }
      }
      v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v49, v56, 16);
    }
    while (v29);
  }

  if (qword_257206B38 != -1)
    dispatch_once(&qword_257206B38, &unk_25135BB90);
  v37 = qword_257206B30;
  if (os_log_type_enabled((os_log_t)qword_257206B30, OS_LOG_TYPE_DEBUG))
  {
    v43 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)buf = 138412290;
    v55 = v43;
    _os_log_debug_impl(&dword_242728000, v37, OS_LOG_TYPE_DEBUG, "MSL config updated from user defaults %@", buf, 0xCu);
  }
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  sub_24272B734();
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  v39 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v45, v53, 16);
  if (v39)
  {
    v40 = *(_QWORD *)v46;
    do
    {
      for (j = 0; j != v39; ++j)
      {
        if (*(_QWORD *)v46 != v40)
          objc_enumerationMutation(v38);
        objc_msgSend(*(id *)(a1 + 32), "addObserver:forKeyPath:options:context:", *(_QWORD *)(a1 + 40), *(_QWORD *)(*((_QWORD *)&v45 + 1) + 8 * j), 1, a1, (_QWORD)v45);
      }
      v39 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v45, v53, 16);
    }
    while (v39);
  }

  return a1;
}

void sub_24272C100(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id *sub_24272C1BC(id *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  sub_24272B734();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v8;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v8 != v4)
          objc_enumerationMutation(v2);
        objc_msgSend(a1[4], "removeObserver:forKeyPath:context:", a1[5], *(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * v5++), a1, (_QWORD)v7);
      }
      while (v3 != v5);
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v3);
  }

  return a1;
}

void sub_24272C2D4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_2427297D4(a1);
  _Unwind_Resume(a1);
}

void sub_24272C2F0(uint64_t a1)
{
  uint64_t v1;
  std::mutex *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v5[16];
  void *v6;
  char v7;
  void *v8;
  char v9;
  void *__p;
  char v11;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (std::mutex *)(*(_QWORD *)(v1 + 8) + 24);
  std::mutex::lock(v2);
  v3 = *(_QWORD *)(v1 + 8);
  v4 = operator new();
  sub_24272B878(v1, (uint64_t)v5);
  sub_242911F3C(v4, (uint64_t)v5);
  sub_24272C3F0((uint64_t *)(v3 + 16), v4);
  if (v11 < 0)
    operator delete(__p);
  if (v9 < 0)
    operator delete(v8);
  if (v7 < 0)
    operator delete(v6);
  *(_BYTE *)v1 = 0;
  std::mutex::unlock(v2);
}

void sub_24272C3AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::mutex *v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  sub_24272BB9C((uint64_t)va);
  MEMORY[0x2494E8384](v3, 0x1032C4044EE41C5);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_24272C3F0(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_242912148(result);
    JUMPOUT(0x2494E8384);
  }
  return result;
}

uint64_t sub_24272C42C(uint64_t a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(*(id *)(a1 + 16), "objectForKey:", CFSTR("LoggingEnabled"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "BOOLValue");

  return v2;
}

void sub_24272C46C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_24272C65C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_24272C694()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MotionSensorLogging", "MSL");
  v1 = (void *)qword_257206B30;
  qword_257206B30 = (uint64_t)v0;

}

uint64_t CMMsl::ALSData::ALSData(uint64_t this)
{
  *(_QWORD *)this = &off_25135BBC0;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135BBC0;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

void CMMsl::ALSData::~ALSData(CMMsl::ALSData *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::ALSData::ALSData(CMMsl::ALSData *this, const CMMsl::ALSData *a2)
{
  float result;

  *(_QWORD *)this = &off_25135BBC0;
  *((_DWORD *)this + 3) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    result = *((float *)a2 + 2);
    *((_BYTE *)this + 12) = 1;
    *((float *)this + 2) = result;
  }
  return result;
}

{
  float result;

  *(_QWORD *)this = &off_25135BBC0;
  *((_DWORD *)this + 3) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    result = *((float *)a2 + 2);
    *((_BYTE *)this + 12) = 1;
    *((float *)this + 2) = result;
  }
  return result;
}

uint64_t CMMsl::ALSData::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  int v5;
  void (**v7)(CMMsl::ALSData *__hidden);
  int v8;
  int v9;

  if (a1 != a2)
  {
    v7 = &off_25135BBC0;
    v3 = *(_DWORD *)(a2 + 8);
    v4 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = *(_BYTE *)(a2 + 12) & 1;
    v9 = v4;
    v5 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = v3;
    v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

{
  int v3;
  int v4;
  int v5;
  int v6;
  void (**v8)(CMMsl::ALSData *__hidden);
  int v9;
  int v10;

  if (a1 != a2)
  {
    v8 = &off_25135BBC0;
    v3 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    v4 = *(_DWORD *)(a2 + 8);
    v5 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v3;
    v10 = v5;
    v6 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = v4;
    v9 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ALSData *a2, CMMsl::ALSData *a3)
{
  int v3;
  float result;

  v3 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  result = *((float *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((float *)a2 + 2) = result;
  return result;
}

float CMMsl::ALSData::ALSData(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135BBC0;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_25135BBC0;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::ALSData::formatText(CMMsl::ALSData *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 12) & 1) != 0)
    PB::TextFormatter::format(a2, "alsTrustedLux", *((float *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ALSData::readFrom(CMMsl::ALSData *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_25;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 12) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 2) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_25:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_25;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::ALSData::writeTo(uint64_t this, PB::Writer *a2)
{
  if ((*(_BYTE *)(this + 12) & 1) != 0)
    return PB::Writer::write(a2, *(float *)(this + 8));
  return this;
}

BOOL CMMsl::ALSData::operator==(uint64_t a1, uint64_t a2)
{
  char v3;
  _BOOL8 result;

  v3 = *(_BYTE *)(a1 + 12);
  result = (*(_BYTE *)(a2 + 12) & 1) == 0;
  if ((v3 & 1) != 0)
    return (*(_BYTE *)(a2 + 12) & 1) != 0 && *(float *)(a1 + 8) == *(float *)(a2 + 8);
  return result;
}

float CMMsl::ALSData::hash_value(CMMsl::ALSData *this)
{
  float result;

  if ((*((_BYTE *)this + 12) & 1) != 0)
    return *((float *)this + 2);
  return result;
}

uint64_t CMMsl::ALSPhone::ALSPhone(uint64_t this)
{
  *(_QWORD *)this = &off_25135BBF8;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135BBF8;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::ALSPhone::~ALSPhone(CMMsl::ALSPhone *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::ALSPhone::ALSPhone(CMMsl::ALSPhone *this, const CMMsl::ALSPhone *a2)
{
  char v2;
  uint64_t v3;
  float result;

  *(_QWORD *)this = &off_25135BBF8;
  *((_DWORD *)this + 5) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *((_BYTE *)this + 20) = 1;
    *((_QWORD *)this + 1) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 4);
    *((_BYTE *)this + 20) = v2;
    *((float *)this + 4) = result;
  }
  return result;
}

{
  char v2;
  uint64_t v3;
  float result;

  *(_QWORD *)this = &off_25135BBF8;
  *((_DWORD *)this + 5) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *((_BYTE *)this + 20) = 1;
    *((_QWORD *)this + 1) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 4);
    *((_BYTE *)this + 20) = v2;
    *((float *)this + 4) = result;
  }
  return result;
}

uint64_t CMMsl::ALSPhone::operator=(uint64_t a1, uint64_t a2, float a3)
{
  void (**v4)(CMMsl::ALSPhone *__hidden);
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  int v9;
  _QWORD v11[2];
  int v12;
  int v13;

  if (a1 != a2)
  {
    v4 = &off_25135BBF8;
    v11[0] = &off_25135BBF8;
    v13 = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      v4 = *(void (***)(CMMsl::ALSPhone *__hidden))(a2 + 8);
      LOBYTE(v13) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        a3 = *(float *)(a2 + 16);
        LOBYTE(v13) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v13;
    v13 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v11[1] = v8;
    v9 = *(_DWORD *)(a1 + 16);
    *(float *)(a1 + 16) = a3;
    v12 = v9;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ALSPhone *a2, CMMsl::ALSPhone *a3)
{
  int v3;
  uint64_t v4;
  float result;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  return result;
}

float CMMsl::ALSPhone::ALSPhone(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135BBF8;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_25135BBF8;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::ALSPhone::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  _QWORD v10[2];
  int v11;
  int v12;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_DWORD *)(a2 + 16);
    v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    v12 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v10[0] = &off_25135BBF8;
    v10[1] = v7;
    v8 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v5;
    v11 = v8;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::ALSPhone::formatText(CMMsl::ALSPhone *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "lux", *((float *)this + 4));
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ALSPhone::readFrom(CMMsl::ALSPhone *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  char v24;
  uint64_t result;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_30;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v19 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v20 = *(_QWORD *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v2)
        {
          v26 = 0;
          v27 = 0;
          v23 = 0;
          if (v2 <= v19)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v19)
            {
              v23 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_47;
            }
            v28 = v19++;
            v29 = *(_BYTE *)(v20 + v28);
            *((_QWORD *)a2 + 1) = v19;
            v23 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0)
              break;
            v26 += 7;
            v14 = v27++ > 8;
            if (v14)
            {
              v23 = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v23 = 0;
LABEL_46:
          v2 = v28 + 1;
        }
        else
        {
          v21 = 0;
          v22 = 0;
          v23 = 0;
          while (1)
          {
            v2 = v19 + 1;
            *((_QWORD *)a2 + 1) = v19 + 1;
            v24 = *(_BYTE *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0)
              break;
            v21 += 7;
            v19 = v2;
            v14 = v22++ > 8;
            if (v14)
            {
              v23 = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_QWORD *)this + 1) = v23;
      }
      else
      {
LABEL_30:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_30;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::ALSPhone::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 16));
  return this;
}

BOOL CMMsl::ALSPhone::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(float *)(a1 + 16) == *(float *)(a2 + 16);
  return v2;
}

uint64_t CMMsl::ALSPhone::hash_value(CMMsl::ALSPhone *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;

  if ((*((_BYTE *)this + 20) & 1) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v3 = 0;
    return v3 ^ v1;
  }
  v1 = *((_QWORD *)this + 1);
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((float *)this + 4);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  return v3 ^ v1;
}

_QWORD *CMMsl::APSleep::APSleep(_QWORD *this)
{
  *this = &off_25135BC30;
  return this;
}

{
  *this = &off_25135BC30;
  return this;
}

void CMMsl::APSleep::~APSleep(CMMsl::APSleep *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

_QWORD *CMMsl::APSleep::APSleep(_QWORD *this, const CMMsl::APSleep *a2)
{
  *this = &off_25135BC30;
  return this;
}

{
  *this = &off_25135BC30;
  return this;
}

uint64_t CMMsl::APSleep::operator=(uint64_t a1, uint64_t a2)
{
  void (**v4)(CMMsl::APSleep *__hidden);

  if (a1 != a2)
  {
    v4 = &off_25135BC30;
    PB::Base::~Base((PB::Base *)&v4);
  }
  return a1;
}

{
  void (**v4)(CMMsl::APSleep *__hidden);

  if (a1 != a2)
  {
    v4 = &off_25135BC30;
    PB::Base::~Base((PB::Base *)&v4);
  }
  return a1;
}

_QWORD *CMMsl::APSleep::APSleep(_QWORD *result)
{
  *result = &off_25135BC30;
  return result;
}

{
  *result = &off_25135BC30;
  return result;
}

uint64_t CMMsl::APSleep::formatText(CMMsl::APSleep *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::APSleep::readFrom(CMMsl::APSleep *this, PB::Reader *a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v7;
  char v8;
  unsigned int v9;
  BOOL v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  char v15;

  while (1)
  {
    v3 = *((_QWORD *)a2 + 1);
    v4 = *((_QWORD *)a2 + 2);
    v5 = *((unsigned __int8 *)a2 + 24);
    if (v3 >= v4 || v5 != 0)
      return v5 == 0;
    v7 = *(_QWORD *)a2;
    v8 = 0;
    v9 = 0;
    v10 = v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v4;
    if (v10)
    {
      v13 = 0;
      if (v3 > v4)
        v4 = *((_QWORD *)a2 + 1);
      while (v4 != v3)
      {
        v11 = v3 + 1;
        v12 = *(_BYTE *)(v7 + v3);
        *((_QWORD *)a2 + 1) = v11;
        v13 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          goto LABEL_22;
        v8 += 7;
        v3 = v11;
        v10 = v9++ > 8;
        if (v10)
          goto LABEL_23;
      }
      v5 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v5 == 0;
    }
    v13 = 0;
    while (1)
    {
      v14 = v3 + 1;
      *((_QWORD *)a2 + 1) = v3 + 1;
      v15 = *(_BYTE *)(v7 + v3);
      v13 |= (unint64_t)(v15 & 0x7F) << v8;
      if ((v15 & 0x80) == 0)
        break;
      v8 += 7;
      v3 = v14;
      v10 = v9++ > 8;
      if (v10)
        goto LABEL_23;
    }
LABEL_22:
    if ((v13 & 7) == 4)
    {
      v5 = 0;
      return v5 == 0;
    }
LABEL_23:
    if ((PB::Reader::skip(a2) & 1) == 0)
      return 0;
  }
}

uint64_t CMMsl::APSleep::operator==()
{
  return 1;
}

uint64_t CMMsl::APSleep::hash_value(CMMsl::APSleep *this)
{
  return 0;
}

_QWORD *CMMsl::APWake::APWake(_QWORD *this)
{
  *this = &off_25135BC68;
  this[1] = 0;
  return this;
}

{
  *this = &off_25135BC68;
  this[1] = 0;
  return this;
}

void CMMsl::APWake::~APWake(CMMsl::APWake *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135BC68;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    sub_242910C5C(v2);
  PB::Base::~Base(this);
}

{
  CMMsl::APWake::~APWake(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::APWake *CMMsl::APWake::APWake(CMMsl::APWake *this, const CMMsl::APWake *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  __int128 v7;
  uint64_t v8;

  *(_QWORD *)this = &off_25135BC68;
  *((_QWORD *)this + 1) = 0;
  if (*((_QWORD *)a2 + 1))
  {
    v4 = operator new();
    v5 = v4;
    v6 = (__int128 *)*((_QWORD *)a2 + 1);
    if (*((char *)v6 + 23) < 0)
    {
      sub_242910CE8((_BYTE *)v4, *(void **)v6, *((_QWORD *)v6 + 1));
    }
    else
    {
      v7 = *v6;
      *(_QWORD *)(v4 + 16) = *((_QWORD *)v6 + 2);
      *(_OWORD *)v4 = v7;
    }
    v8 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v8)
      sub_242910C5C(v8);
  }
  return this;
}

const CMMsl::APWake *CMMsl::APWake::operator=(const CMMsl::APWake *a1, const CMMsl::APWake *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::APWake::APWake((CMMsl::APWake *)&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v6 = v3;
    CMMsl::APWake::~APWake((CMMsl::APWake *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::APWake *a2, CMMsl::APWake *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::APWake::APWake(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_25135BC68;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    sub_242910C5C(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_25135BC68;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    sub_242910C5C(v4);
  return a1;
}

uint64_t CMMsl::APWake::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = &off_25135BC68;
    v6[1] = v4;
    CMMsl::APWake::~APWake((CMMsl::APWake *)v6);
  }
  return a1;
}

uint64_t CMMsl::APWake::formatText(CMMsl::APWake *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::APWake::readFrom(CMMsl::APWake *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_25;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v19 = (_QWORD *)operator new();
        v19[1] = 0;
        v19[2] = 0;
        *v19 = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
          sub_242910C5C(v20);
        PB::Reader::read();
      }
      else
      {
LABEL_25:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_25;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::APWake::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(_QWORD *)(this + 8))
    return PB::Writer::write();
  return this;
}

uint64_t CMMsl::APWake::operator==(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 **v3;
  uint64_t result;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v16;

  v2 = *(unsigned __int8 **)(a1 + 8);
  v3 = *(unsigned __int8 ***)(a2 + 8);
  result = v3 == 0;
  if (!v2)
    return result;
  if (!v3)
    return 0;
  v5 = v2[23];
  if ((v5 & 0x80u) == 0)
    v6 = (unsigned __int8 *)v2[23];
  else
    v6 = (unsigned __int8 *)*((_QWORD *)v2 + 1);
  v7 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 23);
  v8 = (char)v7;
  if ((char)v7 < 0)
    v7 = v3[1];
  if (v6 != v7)
    return 0;
  if (v8 >= 0)
    v9 = *(unsigned __int8 **)(a2 + 8);
  else
    v9 = *v3;
  if ((v5 & 0x80) != 0)
    return !memcmp(*(const void **)v2, v9, *((_QWORD *)v2 + 1));
  if (!v2[23])
    return 1;
  v10 = v5 - 1;
  do
  {
    v12 = *v2++;
    v11 = v12;
    v14 = *v9++;
    v13 = v14;
    v16 = v10-- != 0;
    result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

BOOL sub_24272D8FC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;
  BOOL v13;
  _BOOL8 v14;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if (!a1[23])
    return 1;
  v6 = v2 - 1;
  do
  {
    v8 = *a1++;
    v7 = v8;
    v10 = *a2++;
    v9 = v10;
    v12 = v6-- != 0;
    v13 = v7 == v9;
    v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

unint64_t CMMsl::APWake::hash_value(CMMsl::APWake *this)
{
  unint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    return sub_242910D74(result);
  return result;
}

uint64_t CMMsl::ARKitWorldPose::ARKitWorldPose(uint64_t this)
{
  *(_QWORD *)this = &off_25135BCA0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 40) = 0;
  *(_DWORD *)(this + 56) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135BCA0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 40) = 0;
  *(_DWORD *)(this + 56) = 0;
  return this;
}

void CMMsl::ARKitWorldPose::~ARKitWorldPose(CMMsl::ARKitWorldPose *this)
{
  void *v2;

  *(_QWORD *)this = &off_25135BCA0;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::ARKitWorldPose::~ARKitWorldPose(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::ARKitWorldPose *CMMsl::ARKitWorldPose::ARKitWorldPose(CMMsl::ARKitWorldPose *this, const CMMsl::ARKitWorldPose *a2)
{
  _QWORD *v4;
  char v5;
  char v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v12;

  *((_QWORD *)this + 1) = 0;
  v4 = (_QWORD *)((char *)this + 8);
  *(_QWORD *)this = &off_25135BCA0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 10) = 0;
  *((_DWORD *)this + 14) = 0;
  v5 = *((_BYTE *)a2 + 56);
  if ((v5 & 1) != 0)
  {
    v7 = *((_QWORD *)a2 + 4);
    v6 = 1;
    *((_BYTE *)this + 56) = 1;
    *((_QWORD *)this + 4) = v7;
    v5 = *((_BYTE *)a2 + 56);
    if ((v5 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((*((_BYTE *)a2 + 56) & 4) != 0)
  {
LABEL_5:
    v8 = *((_DWORD *)a2 + 11);
    v6 |= 4u;
    *((_BYTE *)this + 56) = v6;
    *((_DWORD *)this + 11) = v8;
    v5 = *((_BYTE *)a2 + 56);
  }
LABEL_6:
  if ((v5 & 8) == 0)
  {
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
  v12 = *((_DWORD *)a2 + 12);
  v6 |= 8u;
  *((_BYTE *)this + 56) = v6;
  *((_DWORD *)this + 12) = v12;
  if ((*((_BYTE *)a2 + 56) & 0x10) != 0)
  {
LABEL_8:
    v9 = *((_DWORD *)a2 + 13);
    *((_BYTE *)this + 56) = v6 | 0x10;
    *((_DWORD *)this + 13) = v9;
  }
LABEL_9:
  if (this != a2)
    sub_2429111C4(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
  if ((*((_BYTE *)a2 + 56) & 2) != 0)
  {
    v10 = *((_DWORD *)a2 + 10);
    *((_BYTE *)this + 56) |= 2u;
    *((_DWORD *)this + 10) = v10;
  }
  return this;
}

uint64_t CMMsl::ARKitWorldPose::operator=(uint64_t a1, const CMMsl::ARKitWorldPose *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;

  if ((const CMMsl::ARKitWorldPose *)a1 != a2)
  {
    CMMsl::ARKitWorldPose::ARKitWorldPose((CMMsl::ARKitWorldPose *)&v9, a2);
    v3 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v16;
    v16 = v3;
    v4 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v12;
    v12 = v4;
    v5 = *(_QWORD *)(a1 + 44);
    *(_QWORD *)(a1 + 44) = v14;
    v14 = v5;
    LODWORD(v4) = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a1 + 52) = v15;
    v15 = v4;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v6;
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v11;
    v11 = v7;
    LODWORD(v7) = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v13;
    v13 = v7;
    CMMsl::ARKitWorldPose::~ARKitWorldPose((CMMsl::ARKitWorldPose *)&v9);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ARKitWorldPose *a2, CMMsl::ARKitWorldPose *a3)
{
  int v3;
  uint64_t v4;
  float result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v3;
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  result = *((float *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((float *)a2 + 13) = result;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v7;
  v8 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v8;
  LODWORD(v8) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v8;
  return result;
}

uint64_t CMMsl::ARKitWorldPose::ARKitWorldPose(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_25135BCA0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

uint64_t CMMsl::ARKitWorldPose::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;

  if (a1 != a2)
  {
    CMMsl::ARKitWorldPose::ARKitWorldPose((uint64_t)&v9, a2);
    v3 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v16;
    v16 = v3;
    v4 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v12;
    v12 = v4;
    v5 = *(_QWORD *)(a1 + 44);
    *(_QWORD *)(a1 + 44) = v14;
    v14 = v5;
    LODWORD(v4) = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a1 + 52) = v15;
    v15 = v4;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v6;
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v11;
    v11 = v7;
    LODWORD(v7) = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v13;
    v13 = v7;
    CMMsl::ARKitWorldPose::~ARKitWorldPose((CMMsl::ARKitWorldPose *)&v9);
  }
  return a1;
}

uint64_t CMMsl::ARKitWorldPose::formatText(CMMsl::ARKitWorldPose *this, PB::TextFormatter *a2, const char *a3)
{
  double *v5;
  double *v6;
  double v7;
  char v8;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (double *)*((_QWORD *)this + 1);
  v6 = (double *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "attitude", v7);
  }
  v8 = *((_BYTE *)this + 56);
  if ((v8 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "status");
    v8 = *((_BYTE *)this + 56);
    if ((v8 & 1) == 0)
    {
LABEL_5:
      if ((v8 & 4) == 0)
        goto LABEL_6;
      goto LABEL_12;
    }
  }
  else if ((*((_BYTE *)this + 56) & 1) == 0)
  {
    goto LABEL_5;
  }
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 4));
  v8 = *((_BYTE *)this + 56);
  if ((v8 & 4) == 0)
  {
LABEL_6:
    if ((v8 & 8) == 0)
      goto LABEL_7;
LABEL_13:
    PB::TextFormatter::format(a2, "y", *((float *)this + 12));
    if ((*((_BYTE *)this + 56) & 0x10) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_8;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "x", *((float *)this + 11));
  v8 = *((_BYTE *)this + 56);
  if ((v8 & 8) != 0)
    goto LABEL_13;
LABEL_7:
  if ((v8 & 0x10) != 0)
LABEL_8:
    PB::TextFormatter::format(a2, "z", *((float *)this + 13));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::ARKitWorldPose::readFrom(CMMsl::ARKitWorldPose *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  unint64_t v46;
  char *v47;
  _QWORD *v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      break;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 56) |= 1u;
        v19 = *((_QWORD *)a2 + 1);
        if (v19 > 0xFFFFFFFFFFFFFFF7 || v19 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_98;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v19);
        goto LABEL_100;
      case 2u:
        *((_BYTE *)this + 56) |= 4u;
        v20 = *((_QWORD *)a2 + 1);
        if (v20 > 0xFFFFFFFFFFFFFFFBLL || v20 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_98;
        *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v20);
        goto LABEL_35;
      case 3u:
        *((_BYTE *)this + 56) |= 8u;
        v21 = *((_QWORD *)a2 + 1);
        if (v21 > 0xFFFFFFFFFFFFFFFBLL || v21 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_98;
        *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v21);
        goto LABEL_35;
      case 4u:
        *((_BYTE *)this + 56) |= 0x10u;
        v22 = *((_QWORD *)a2 + 1);
        if (v22 > 0xFFFFFFFFFFFFFFFBLL || v22 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_98;
        *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v22);
LABEL_35:
        v23 = *((_QWORD *)a2 + 1) + 4;
        goto LABEL_101;
      case 5u:
        if ((v11 & 7) == 2)
        {
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v24 = *((_QWORD *)a2 + 1);
          v25 = *((_QWORD *)a2 + 2);
          while (v24 < v25 && !*((_BYTE *)a2 + 24))
          {
            v27 = (char *)*((_QWORD *)this + 2);
            v26 = *((_QWORD *)this + 3);
            if ((unint64_t)v27 >= v26)
            {
              v29 = (char *)*((_QWORD *)this + 1);
              v30 = (v27 - v29) >> 3;
              v31 = v30 + 1;
              if ((unint64_t)(v30 + 1) >> 61)
                goto LABEL_111;
              v32 = v26 - (_QWORD)v29;
              if (v32 >> 2 > v31)
                v31 = v32 >> 2;
              if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
                v33 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v33 = v31;
              if (v33)
              {
                v33 = (unint64_t)sub_2429112FC(v33);
                v29 = (char *)*((_QWORD *)this + 1);
                v27 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v34 = 0;
              }
              v35 = (_QWORD *)(v33 + 8 * v30);
              *v35 = 0;
              v28 = v35 + 1;
              while (v27 != v29)
              {
                v36 = *((_QWORD *)v27 - 1);
                v27 -= 8;
                *--v35 = v36;
              }
              *((_QWORD *)this + 1) = v35;
              *((_QWORD *)this + 2) = v28;
              *((_QWORD *)this + 3) = v33 + 8 * v34;
              if (v29)
                operator delete(v29);
            }
            else
            {
              *(_QWORD *)v27 = 0;
              v28 = v27 + 8;
            }
            *((_QWORD *)this + 2) = v28;
            v37 = *((_QWORD *)a2 + 1);
            if (v37 > 0xFFFFFFFFFFFFFFF7 || v37 + 8 > *((_QWORD *)a2 + 2))
            {
              *((_BYTE *)a2 + 24) = 1;
              break;
            }
            *(v28 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v37);
            v25 = *((_QWORD *)a2 + 2);
            v24 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v24;
          }
          PB::Reader::recallMark();
        }
        else
        {
          v47 = (char *)*((_QWORD *)this + 2);
          v46 = *((_QWORD *)this + 3);
          if ((unint64_t)v47 >= v46)
          {
            v53 = (char *)*((_QWORD *)this + 1);
            v54 = (v47 - v53) >> 3;
            v55 = v54 + 1;
            if ((unint64_t)(v54 + 1) >> 61)
LABEL_111:
              sub_242729A44();
            v56 = v46 - (_QWORD)v53;
            if (v56 >> 2 > v55)
              v55 = v56 >> 2;
            if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
              v57 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v57 = v55;
            if (v57)
            {
              v57 = (unint64_t)sub_2429112FC(v57);
              v53 = (char *)*((_QWORD *)this + 1);
              v47 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v58 = 0;
            }
            v59 = (_QWORD *)(v57 + 8 * v54);
            *v59 = 0;
            v48 = v59 + 1;
            while (v47 != v53)
            {
              v60 = *((_QWORD *)v47 - 1);
              v47 -= 8;
              *--v59 = v60;
            }
            *((_QWORD *)this + 1) = v59;
            *((_QWORD *)this + 2) = v48;
            *((_QWORD *)this + 3) = v57 + 8 * v58;
            if (v53)
              operator delete(v53);
          }
          else
          {
            *(_QWORD *)v47 = 0;
            v48 = v47 + 8;
          }
          *((_QWORD *)this + 2) = v48;
          v61 = *((_QWORD *)a2 + 1);
          if (v61 <= 0xFFFFFFFFFFFFFFF7 && v61 + 8 <= *((_QWORD *)a2 + 2))
          {
            *(v48 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v61);
LABEL_100:
            v23 = *((_QWORD *)a2 + 1) + 8;
LABEL_101:
            *((_QWORD *)a2 + 1) = v23;
          }
          else
          {
LABEL_98:
            *((_BYTE *)a2 + 24) = 1;
          }
        }
        break;
      case 6u:
        *((_BYTE *)this + 56) |= 2u;
        v38 = *((_QWORD *)a2 + 1);
        v39 = *((_QWORD *)a2 + 2);
        v40 = *(_QWORD *)a2;
        if (v38 <= 0xFFFFFFFFFFFFFFF5 && v38 + 10 <= v39)
        {
          v41 = 0;
          v42 = 0;
          v43 = 0;
          do
          {
            v44 = v38 + 1;
            *((_QWORD *)a2 + 1) = v38 + 1;
            v45 = *(_BYTE *)(v40 + v38);
            v43 |= (unint64_t)(v45 & 0x7F) << v41;
            if ((v45 & 0x80) == 0)
              goto LABEL_87;
            v41 += 7;
            v38 = v44;
            v14 = v42++ > 8;
          }
          while (!v14);
LABEL_75:
          LODWORD(v43) = 0;
          goto LABEL_87;
        }
        v49 = 0;
        v50 = 0;
        v43 = 0;
        if (v39 <= v38)
          v39 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v39 == v38)
          {
            LODWORD(v43) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v51 = v38 + 1;
            v52 = *(_BYTE *)(v40 + v38);
            *((_QWORD *)a2 + 1) = v51;
            v43 |= (unint64_t)(v52 & 0x7F) << v49;
            if (v52 < 0)
            {
              v49 += 7;
              v38 = v51;
              v14 = v50++ > 8;
              if (v14)
                goto LABEL_75;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v43) = 0;
          }
          break;
        }
LABEL_87:
        *((_DWORD *)this + 10) = v43;
        break;
      default:
        goto LABEL_19;
    }
LABEL_102:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v15 = 0;
  v16 = 0;
  v11 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v17 = v2 + 1;
    v18 = *(_BYTE *)(v8 + v2);
    *((_QWORD *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0)
      goto LABEL_21;
    v15 += 7;
    v2 = v17;
    v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  if ((PB::Reader::skip(a2) & 1) != 0)
    goto LABEL_102;
  return 0;
}

uint64_t CMMsl::ARKitWorldPose::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  double *v5;
  double *v6;
  double v7;

  v3 = this;
  v4 = *(_BYTE *)(this + 56);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32));
    v4 = *(_BYTE *)(v3 + 56);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
LABEL_13:
      this = PB::Writer::write(a2, *(float *)(v3 + 48));
      if ((*(_BYTE *)(v3 + 56) & 0x10) == 0)
        goto LABEL_6;
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(this + 56) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 8) != 0)
    goto LABEL_13;
LABEL_4:
  if ((v4 & 0x10) != 0)
LABEL_5:
    this = PB::Writer::write(a2, *(float *)(v3 + 52));
LABEL_6:
  v5 = *(double **)(v3 + 8);
  v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7);
  }
  if ((*(_BYTE *)(v3 + 56) & 2) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

BOOL CMMsl::ARKitWorldPose::operator==(uint64_t a1, uint64_t a2)
{
  double *v2;
  double *v3;
  double *v4;
  _BOOL8 v5;

  if ((*(_BYTE *)(a1 + 56) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 1) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 56) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 56) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 4) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 56) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 56) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 8) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 56) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 56) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 0x10) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 56) & 0x10) != 0)
  {
    return 0;
  }
  v3 = *(double **)(a1 + 8);
  v2 = *(double **)(a1 + 16);
  v4 = *(double **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 16) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v5 = (*(_BYTE *)(a2 + 56) & 2) == 0;
  if ((*(_BYTE *)(a1 + 56) & 2) != 0)
    return (*(_BYTE *)(a2 + 56) & 2) != 0 && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40);
  return v5;
}

uint64_t CMMsl::ARKitWorldPose::hash_value(CMMsl::ARKitWorldPose *this)
{
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((*((_BYTE *)this + 56) & 1) == 0)
  {
    v2 = 0;
    if ((*((_BYTE *)this + 56) & 4) != 0)
      goto LABEL_3;
LABEL_18:
    v4 = 0;
    if ((*((_BYTE *)this + 56) & 8) != 0)
      goto LABEL_7;
    goto LABEL_19;
  }
  if (*((double *)this + 4) == 0.0)
    v2 = 0;
  else
    v2 = *((_QWORD *)this + 4);
  if ((*((_BYTE *)this + 56) & 4) == 0)
    goto LABEL_18;
LABEL_3:
  v3 = *((float *)this + 11);
  if (v3 == 0.0)
    v4 = 0;
  else
    v4 = LODWORD(v3);
  if ((*((_BYTE *)this + 56) & 8) != 0)
  {
LABEL_7:
    v5 = *((float *)this + 12);
    if (v5 == 0.0)
      v6 = 0;
    else
      v6 = LODWORD(v5);
    if ((*((_BYTE *)this + 56) & 0x10) != 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  v6 = 0;
  if ((*((_BYTE *)this + 56) & 0x10) != 0)
  {
LABEL_11:
    v7 = *((float *)this + 13);
    if (v7 == 0.0)
      v8 = 0;
    else
      v8 = LODWORD(v7);
    goto LABEL_21;
  }
LABEL_20:
  v8 = 0;
LABEL_21:
  v9 = PBHashBytes();
  if ((*((_BYTE *)this + 56) & 2) != 0)
    v10 = *((int *)this + 10);
  else
    v10 = 0;
  return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v9;
}

_QWORD *CMMsl::ARSessionState::ARSessionState(_QWORD *this)
{
  *this = &off_25135BCD8;
  this[1] = 0;
  return this;
}

{
  *this = &off_25135BCD8;
  this[1] = 0;
  return this;
}

void CMMsl::ARSessionState::~ARSessionState(CMMsl::ARSessionState *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::ARSessionState::ARSessionState(uint64_t this, const CMMsl::ARSessionState *a2)
{
  int v2;

  *(_QWORD *)this = &off_25135BCD8;
  *(_QWORD *)(this + 8) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v2 = *((_DWORD *)a2 + 2);
    *(_BYTE *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

{
  int v2;

  *(_QWORD *)this = &off_25135BCD8;
  *(_QWORD *)(this + 8) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v2 = *((_DWORD *)a2 + 2);
    *(_BYTE *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::ARSessionState::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v6[0] = &off_25135BCD8;
    v3 = *(unsigned __int8 *)(a2 + 12);
    v4 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = (v3 << 31 >> 31) & *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 12) = v3 & 1;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v6[0] = &off_25135BCD8;
    v3 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 12) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::ARSessionState *a2, CMMsl::ARSessionState *a3)
{
  int v3;
  int v4;

  v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  v4 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  return this;
}

uint64_t CMMsl::ARSessionState::ARSessionState(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = &off_25135BCD8;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

{
  *(_QWORD *)result = &off_25135BCD8;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t CMMsl::ARSessionState::formatText(CMMsl::ARSessionState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 12) & 1) != 0)
    PB::TextFormatter::format(a2, "state");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ARSessionState::readFrom(CMMsl::ARSessionState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  char v24;
  uint64_t result;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_29;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 12) |= 1u;
        v19 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        v20 = *(_QWORD *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v3)
        {
          v26 = 0;
          v27 = 0;
          v23 = 0;
          if (v3 <= v19)
            v2 = *((_QWORD *)a2 + 1);
          else
            v2 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v2 == v19)
            {
              LODWORD(v23) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_43;
            }
            v28 = v19++;
            v29 = *(_BYTE *)(v20 + v28);
            *((_QWORD *)a2 + 1) = v19;
            v23 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0)
              break;
            v26 += 7;
            v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              goto LABEL_42;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v23) = 0;
LABEL_42:
          v2 = v28 + 1;
        }
        else
        {
          v21 = 0;
          v22 = 0;
          v23 = 0;
          while (1)
          {
            v2 = v19 + 1;
            *((_QWORD *)a2 + 1) = v19 + 1;
            v24 = *(_BYTE *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0)
              break;
            v21 += 7;
            v19 = v2;
            v14 = v22++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              break;
            }
          }
        }
LABEL_43:
        *((_DWORD *)this + 2) = v23;
      }
      else
      {
LABEL_29:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_29;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::ARSessionState::writeTo(uint64_t this, PB::Writer *a2)
{
  if ((*(_BYTE *)(this + 12) & 1) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

BOOL CMMsl::ARSessionState::operator==(uint64_t a1, uint64_t a2)
{
  char v3;
  _BOOL8 result;

  v3 = *(_BYTE *)(a1 + 12);
  result = (*(_BYTE *)(a2 + 12) & 1) == 0;
  if ((v3 & 1) != 0)
    return (*(_BYTE *)(a2 + 12) & 1) != 0 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t CMMsl::ARSessionState::hash_value(CMMsl::ARSessionState *this)
{
  if ((*((_BYTE *)this + 12) & 1) != 0)
    return *((int *)this + 2);
  else
    return 0;
}

uint64_t CMMsl::Accel::Accel(uint64_t this)
{
  *(_QWORD *)this = &off_25135BD10;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135BD10;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::Accel::~Accel(CMMsl::Accel *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::Accel::Accel(uint64_t this, const CMMsl::Accel *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;

  *(_QWORD *)this = &off_25135BD10;
  *(_DWORD *)(this + 32) = 0;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_BYTE *)(this + 32) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 32) & 4) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *(_BYTE *)(this + 32) = v3;
    *(_DWORD *)(this + 20) = v5;
    v2 = *((_BYTE *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    v6 = *((_DWORD *)a2 + 6);
    v3 |= 8u;
    *(_BYTE *)(this + 32) = v3;
    *(_DWORD *)(this + 24) = v6;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0)
        return this;
LABEL_12:
      v8 = *((_DWORD *)a2 + 4);
      *(_BYTE *)(this + 32) = v3 | 2;
      *(_DWORD *)(this + 16) = v8;
      return this;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *(_BYTE *)(this + 32) = v3;
  *(_DWORD *)(this + 28) = v7;
  if ((*((_BYTE *)a2 + 32) & 2) != 0)
    goto LABEL_12;
  return this;
}

uint64_t CMMsl::Accel::operator=(uint64_t a1, const CMMsl::Accel *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BYTE v8[8];
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;

  if ((const CMMsl::Accel *)a1 != a2)
  {
    CMMsl::Accel::Accel((uint64_t)v8, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v13;
    v13 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    v9 = v4;
    v5 = *(_QWORD *)(a1 + 20);
    *(_QWORD *)(a1 + 20) = v11;
    v11 = v5;
    LODWORD(v4) = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v12;
    v12 = v4;
    v6 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v10;
    v10 = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::Accel *a2, CMMsl::Accel *a3)
{
  int v3;
  uint64_t v4;
  float result;
  int v6;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  result = *((float *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((float *)a2 + 7) = result;
  v6 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v6;
  return result;
}

float CMMsl::Accel::Accel(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135BD10;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(float *)(a2 + 28);
  *(float *)(a1 + 28) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_25135BD10;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(float *)(a2 + 28);
  *(float *)(a1 + 28) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::Accel::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD v12[2];
  int v13;
  uint64_t v14;
  int v15;
  int v16;

  if (a1 != a2)
  {
    v12[0] = &off_25135BD10;
    v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_DWORD *)(a2 + 28);
    v6 = *(_DWORD *)(a2 + 16);
    v16 = *(_DWORD *)(a1 + 32);
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v12[1] = v7;
    v8 = *(_QWORD *)(a1 + 20);
    v9 = *(_QWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 32) = v3;
    *(_QWORD *)(a1 + 20) = v9;
    v14 = v8;
    LODWORD(v8) = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v5;
    v15 = v8;
    v10 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v6;
    v13 = v10;
    PB::Base::~Base((PB::Base *)v12);
  }
  return a1;
}

uint64_t CMMsl::Accel::formatText(CMMsl::Accel *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "location");
    v5 = *((_BYTE *)this + 32);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((_BYTE *)this + 32) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(a2, "y", *((float *)this + 6));
    if ((*((_BYTE *)this + 32) & 0x10) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(a2, "x", *((float *)this + 5));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 8) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 0x10) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "z", *((float *)this + 7));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::Accel::readFrom(CMMsl::Accel *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_57;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 32) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        v2 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_51;
      case 2u:
        *((_BYTE *)this + 32) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_50;
      case 3u:
        *((_BYTE *)this + 32) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_50;
      case 4u:
        *((_BYTE *)this + 32) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_50:
          v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_51:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_34:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 5u:
        *((_BYTE *)this + 32) |= 2u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v26 = 0;
          v27 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_56;
            }
            v28 = v20++;
            v29 = *(_BYTE *)(v21 + v28);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0)
              break;
            v26 += 7;
            v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_55:
              v2 = v28 + 1;
              goto LABEL_56;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
          goto LABEL_55;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_56;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_56:
        *((_DWORD *)this + 4) = v24;
        break;
      default:
        goto LABEL_19;
    }
LABEL_57:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::Accel::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_10:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

BOOL CMMsl::Accel::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 0x10) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 32) & 2) == 0;
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
    return (*(_BYTE *)(a2 + 32) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

uint64_t CMMsl::Accel::hash_value(CMMsl::Accel *this)
{
  double v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;

  if ((*((_BYTE *)this + 32) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 32) & 4) != 0)
      goto LABEL_3;
LABEL_16:
    v3 = 0;
    if ((*((_BYTE *)this + 32) & 8) != 0)
      goto LABEL_6;
LABEL_17:
    v5 = 0;
    if ((*((_BYTE *)this + 32) & 0x10) != 0)
      goto LABEL_9;
    goto LABEL_18;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 32) & 4) == 0)
    goto LABEL_16;
LABEL_3:
  v2 = *((float *)this + 5);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 32) & 8) == 0)
    goto LABEL_17;
LABEL_6:
  v4 = *((float *)this + 6);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((*((_BYTE *)this + 32) & 0x10) != 0)
  {
LABEL_9:
    v6 = *((float *)this + 7);
    v7 = LODWORD(v6);
    if (v6 == 0.0)
      v7 = 0;
    if ((*((_BYTE *)this + 32) & 2) != 0)
      goto LABEL_12;
LABEL_19:
    v8 = 0;
    return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7 ^ v8;
  }
LABEL_18:
  v7 = 0;
  if ((*((_BYTE *)this + 32) & 2) == 0)
    goto LABEL_19;
LABEL_12:
  v8 = *((int *)this + 4);
  return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7 ^ v8;
}

_QWORD *CMMsl::Accel800::Accel800(_QWORD *this)
{
  *this = &off_25135BD48;
  this[1] = 0;
  return this;
}

{
  *this = &off_25135BD48;
  this[1] = 0;
  return this;
}

void CMMsl::Accel800::~Accel800(CMMsl::Accel800 *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135BD48;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135BD48;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135BD48;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::Accel800 *CMMsl::Accel800::Accel800(CMMsl::Accel800 *this, const CMMsl::Accel **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_25135BD48;
  *((_QWORD *)this + 1) = 0;
  if (a2[1])
  {
    v4 = operator new();
    v5 = CMMsl::Accel::Accel(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return this;
}

uint64_t CMMsl::Accel800::operator=(uint64_t a1, const CMMsl::Accel **a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::Accel800 *__hidden);
  uint64_t v6;

  if ((const CMMsl::Accel **)a1 != a2)
  {
    CMMsl::Accel800::Accel800((CMMsl::Accel800 *)&v5, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v6;
    v5 = &off_25135BD48;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::Accel800 *a2, CMMsl::Accel800 *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::Accel800::Accel800(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_25135BD48;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_25135BD48;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::Accel800::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = &off_25135BD48;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::Accel800::formatText(CMMsl::Accel800 *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::Accel800::readFrom(CMMsl::Accel800 *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v19 = (_DWORD *)operator new();
        *(_QWORD *)v19 = &off_25135BD10;
        v19[8] = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = (_DWORD *)*((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_27;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::Accel800::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2);
  return this;
}

BOOL CMMsl::Accel800::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::Accel::operator==(v2, v3);
  return result;
}

CMMsl::Accel *CMMsl::Accel800::hash_value(CMMsl::Accel800 *this)
{
  CMMsl::Accel *result;

  result = (CMMsl::Accel *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::Accel *)CMMsl::Accel::hash_value(result);
  return result;
}

_QWORD *CMMsl::Accel800::makeSuper(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135BD10;
    *(_DWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t CMMsl::AccelBatch::AccelBatch(uint64_t this)
{
  *(_QWORD *)this = &off_25135BD80;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135BD80;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::AccelBatch::~AccelBatch(CMMsl::AccelBatch *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::AccelBatch::AccelBatch(uint64_t this, const CMMsl::AccelBatch *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;

  *(_QWORD *)this = &off_25135BD80;
  *(_DWORD *)(this + 32) = 0;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_BYTE *)(this + 32) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 32) & 4) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *(_BYTE *)(this + 32) = v3;
    *(_DWORD *)(this + 20) = v5;
    v2 = *((_BYTE *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    v6 = *((_DWORD *)a2 + 6);
    v3 |= 8u;
    *(_BYTE *)(this + 32) = v3;
    *(_DWORD *)(this + 24) = v6;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0)
        return this;
LABEL_12:
      v8 = *((_DWORD *)a2 + 4);
      *(_BYTE *)(this + 32) = v3 | 2;
      *(_DWORD *)(this + 16) = v8;
      return this;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *(_BYTE *)(this + 32) = v3;
  *(_DWORD *)(this + 28) = v7;
  if ((*((_BYTE *)a2 + 32) & 2) != 0)
    goto LABEL_12;
  return this;
}

uint64_t CMMsl::AccelBatch::operator=(uint64_t a1, const CMMsl::AccelBatch *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BYTE v8[8];
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;

  if ((const CMMsl::AccelBatch *)a1 != a2)
  {
    CMMsl::AccelBatch::AccelBatch((uint64_t)v8, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v13;
    v13 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    v9 = v4;
    v5 = *(_QWORD *)(a1 + 20);
    *(_QWORD *)(a1 + 20) = v11;
    v11 = v5;
    LODWORD(v4) = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v12;
    v12 = v4;
    v6 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v10;
    v10 = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::AccelBatch *a2, CMMsl::AccelBatch *a3)
{
  int v3;
  uint64_t v4;
  float result;
  int v6;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  result = *((float *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((float *)a2 + 7) = result;
  v6 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v6;
  return result;
}

float CMMsl::AccelBatch::AccelBatch(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135BD80;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(float *)(a2 + 28);
  *(float *)(a1 + 28) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_25135BD80;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(float *)(a2 + 28);
  *(float *)(a1 + 28) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::AccelBatch::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD v12[2];
  int v13;
  uint64_t v14;
  int v15;
  int v16;

  if (a1 != a2)
  {
    v12[0] = &off_25135BD80;
    v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_DWORD *)(a2 + 28);
    v6 = *(_DWORD *)(a2 + 16);
    v16 = *(_DWORD *)(a1 + 32);
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v12[1] = v7;
    v8 = *(_QWORD *)(a1 + 20);
    v9 = *(_QWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 32) = v3;
    *(_QWORD *)(a1 + 20) = v9;
    v14 = v8;
    LODWORD(v8) = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v5;
    v15 = v8;
    v10 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v6;
    v13 = v10;
    PB::Base::~Base((PB::Base *)v12);
  }
  return a1;
}

uint64_t CMMsl::AccelBatch::formatText(CMMsl::AccelBatch *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "batch");
    v5 = *((_BYTE *)this + 32);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((_BYTE *)this + 32) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(a2, "y", *((float *)this + 6));
    if ((*((_BYTE *)this + 32) & 0x10) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(a2, "x", *((float *)this + 5));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 8) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 0x10) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "z", *((float *)this + 7));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccelBatch::readFrom(CMMsl::AccelBatch *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_57;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 32) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        v2 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_51;
      case 2u:
        *((_BYTE *)this + 32) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_50;
      case 3u:
        *((_BYTE *)this + 32) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_50;
      case 4u:
        *((_BYTE *)this + 32) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_50:
          v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_51:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_34:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 5u:
        *((_BYTE *)this + 32) |= 2u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v26 = 0;
          v27 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_56;
            }
            v28 = v20++;
            v29 = *(_BYTE *)(v21 + v28);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0)
              break;
            v26 += 7;
            v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_55:
              v2 = v28 + 1;
              goto LABEL_56;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
          goto LABEL_55;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_56;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_56:
        *((_DWORD *)this + 4) = v24;
        break;
      default:
        goto LABEL_19;
    }
LABEL_57:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::AccelBatch::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_10:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

BOOL CMMsl::AccelBatch::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 0x10) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 32) & 2) == 0;
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
    return (*(_BYTE *)(a2 + 32) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

uint64_t CMMsl::AccelBatch::hash_value(CMMsl::AccelBatch *this)
{
  double v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;

  if ((*((_BYTE *)this + 32) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 32) & 4) != 0)
      goto LABEL_3;
LABEL_16:
    v3 = 0;
    if ((*((_BYTE *)this + 32) & 8) != 0)
      goto LABEL_6;
LABEL_17:
    v5 = 0;
    if ((*((_BYTE *)this + 32) & 0x10) != 0)
      goto LABEL_9;
    goto LABEL_18;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 32) & 4) == 0)
    goto LABEL_16;
LABEL_3:
  v2 = *((float *)this + 5);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 32) & 8) == 0)
    goto LABEL_17;
LABEL_6:
  v4 = *((float *)this + 6);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((*((_BYTE *)this + 32) & 0x10) != 0)
  {
LABEL_9:
    v6 = *((float *)this + 7);
    v7 = LODWORD(v6);
    if (v6 == 0.0)
      v7 = 0;
    if ((*((_BYTE *)this + 32) & 2) != 0)
      goto LABEL_12;
LABEL_19:
    v8 = 0;
    return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7 ^ v8;
  }
LABEL_18:
  v7 = 0;
  if ((*((_BYTE *)this + 32) & 2) == 0)
    goto LABEL_19;
LABEL_12:
  v8 = *((unsigned int *)this + 4);
  return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7 ^ v8;
}

_QWORD *CMMsl::AccelGesture::AccelGesture(_QWORD *this)
{
  *this = &off_25135BDB8;
  this[1] = 0;
  return this;
}

{
  *this = &off_25135BDB8;
  this[1] = 0;
  return this;
}

void CMMsl::AccelGesture::~AccelGesture(CMMsl::AccelGesture *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135BDB8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135BDB8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135BDB8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::AccelGesture *CMMsl::AccelGesture::AccelGesture(CMMsl::AccelGesture *this, const CMMsl::Accel **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_25135BDB8;
  *((_QWORD *)this + 1) = 0;
  if (a2[1])
  {
    v4 = operator new();
    v5 = CMMsl::Accel::Accel(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return this;
}

uint64_t CMMsl::AccelGesture::operator=(uint64_t a1, const CMMsl::Accel **a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::AccelGesture *__hidden);
  uint64_t v6;

  if ((const CMMsl::Accel **)a1 != a2)
  {
    CMMsl::AccelGesture::AccelGesture((CMMsl::AccelGesture *)&v5, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v6;
    v5 = &off_25135BDB8;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AccelGesture *a2, CMMsl::AccelGesture *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::AccelGesture::AccelGesture(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_25135BDB8;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_25135BDB8;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::AccelGesture::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = &off_25135BDB8;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::AccelGesture::formatText(CMMsl::AccelGesture *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccelGesture::readFrom(CMMsl::AccelGesture *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v19 = (_DWORD *)operator new();
        *(_QWORD *)v19 = &off_25135BD10;
        v19[8] = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = (_DWORD *)*((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_27;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AccelGesture::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2);
  return this;
}

BOOL CMMsl::AccelGesture::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::Accel::operator==(v2, v3);
  return result;
}

CMMsl::Accel *CMMsl::AccelGesture::hash_value(CMMsl::AccelGesture *this)
{
  CMMsl::Accel *result;

  result = (CMMsl::Accel *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::Accel *)CMMsl::Accel::hash_value(result);
  return result;
}

_QWORD *CMMsl::AccelGesture::makeSuper(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135BD10;
    *(_DWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t CMMsl::AccelGps::AccelGps(uint64_t this)
{
  *(_QWORD *)this = &off_25135BDF0;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135BDF0;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

void CMMsl::AccelGps::~AccelGps(CMMsl::AccelGps *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::AccelGps::AccelGps(CMMsl::AccelGps *this, const CMMsl::AccelGps *a2)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_QWORD *)this = &off_25135BDF0;
  *((_DWORD *)this + 7) = 0;
  v2 = *((_BYTE *)a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 28) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 28) & 2) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((_BYTE *)this + 28) = v3;
    *((_DWORD *)this + 4) = v4;
    v2 = *((_BYTE *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *((_BYTE *)this + 28) = v3;
    *((_DWORD *)this + 5) = v4;
    if ((*((_BYTE *)a2 + 28) & 8) == 0)
      return *(float *)&v4;
  }
  else if ((v2 & 8) == 0)
  {
    return *(float *)&v4;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  *((_BYTE *)this + 28) = v3 | 8;
  *((_DWORD *)this + 6) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::AccelGps::operator=(uint64_t a1, const CMMsl::AccelGps *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;

  if ((const CMMsl::AccelGps *)a1 != a2)
  {
    CMMsl::AccelGps::AccelGps((CMMsl::AccelGps *)&v9, a2);
    v3 = v11;
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v10;
    *(_QWORD *)(a1 + 16) = v3;
    v6 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v13;
    v13 = v6;
    v10 = v4;
    v11 = v5;
    v7 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v12;
    v12 = v7;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::AccelGps *a2, CMMsl::AccelGps *a3)
{
  int v3;
  uint64_t v4;
  float result;

  v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  return result;
}

float CMMsl::AccelGps::AccelGps(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135BDF0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_25135BDF0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

uint64_t CMMsl::AccelGps::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD v9[3];
  int v10;
  int v11;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    v4 = *(_DWORD *)(a2 + 24);
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    v9[0] = &off_25135BDF0;
    v11 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v3;
    v9[1] = v5;
    v9[2] = v6;
    v7 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v4;
    v10 = v7;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::AccelGps::formatText(CMMsl::AccelGps *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    v5 = *((_BYTE *)this + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "y", *((float *)this + 5));
      if ((*((_BYTE *)this + 28) & 8) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "x", *((float *)this + 4));
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "z", *((float *)this + 6));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccelGps::readFrom(CMMsl::AccelGps *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_38;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 28) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        v2 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_37;
      case 2u:
        *((_BYTE *)this + 28) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 3u:
        *((_BYTE *)this + 28) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 4u:
        *((_BYTE *)this + 28) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_36:
          v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_37:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_34:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_38:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::AccelGps::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 28);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 24));
  }
LABEL_8:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  if ((*(_BYTE *)(v3 + 28) & 8) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 24));
  return this;
}

BOOL CMMsl::AccelGps::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 28) & 8) == 0;
  if ((*(_BYTE *)(a1 + 28) & 8) != 0)
    return (*(_BYTE *)(a2 + 28) & 8) != 0 && *(float *)(a1 + 24) == *(float *)(a2 + 24);
  return v2;
}

uint64_t CMMsl::AccelGps::hash_value(CMMsl::AccelGps *this)
{
  double v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;

  if ((*((_BYTE *)this + 28) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 28) & 2) != 0)
      goto LABEL_3;
LABEL_15:
    v3 = 0;
    if ((*((_BYTE *)this + 28) & 4) != 0)
      goto LABEL_6;
    goto LABEL_16;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 28) & 2) == 0)
    goto LABEL_15;
LABEL_3:
  v2 = *((float *)this + 4);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 28) & 4) != 0)
  {
LABEL_6:
    v4 = *((float *)this + 5);
    v5 = LODWORD(v4);
    if (v4 == 0.0)
      v5 = 0;
    if ((*((_BYTE *)this + 28) & 8) != 0)
      goto LABEL_9;
LABEL_17:
    v7 = 0;
    return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7;
  }
LABEL_16:
  v5 = 0;
  if ((*((_BYTE *)this + 28) & 8) == 0)
    goto LABEL_17;
LABEL_9:
  v6 = *((float *)this + 6);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7;
}

_QWORD *CMMsl::AccelOscarEmu::AccelOscarEmu(_QWORD *this)
{
  *this = &off_25135BE28;
  this[1] = 0;
  return this;
}

{
  *this = &off_25135BE28;
  this[1] = 0;
  return this;
}

void CMMsl::AccelOscarEmu::~AccelOscarEmu(CMMsl::AccelOscarEmu *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135BE28;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135BE28;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135BE28;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::AccelOscarEmu *CMMsl::AccelOscarEmu::AccelOscarEmu(CMMsl::AccelOscarEmu *this, const CMMsl::Accel **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_25135BE28;
  *((_QWORD *)this + 1) = 0;
  if (a2[1])
  {
    v4 = operator new();
    v5 = CMMsl::Accel::Accel(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return this;
}

uint64_t CMMsl::AccelOscarEmu::operator=(uint64_t a1, const CMMsl::Accel **a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::AccelOscarEmu *__hidden);
  uint64_t v6;

  if ((const CMMsl::Accel **)a1 != a2)
  {
    CMMsl::AccelOscarEmu::AccelOscarEmu((CMMsl::AccelOscarEmu *)&v5, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v6;
    v5 = &off_25135BE28;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AccelOscarEmu *a2, CMMsl::AccelOscarEmu *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::AccelOscarEmu::AccelOscarEmu(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_25135BE28;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_25135BE28;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::AccelOscarEmu::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = &off_25135BE28;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::AccelOscarEmu::formatText(CMMsl::AccelOscarEmu *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccelOscarEmu::readFrom(CMMsl::AccelOscarEmu *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v19 = (_DWORD *)operator new();
        *(_QWORD *)v19 = &off_25135BD10;
        v19[8] = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = (_DWORD *)*((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_27;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AccelOscarEmu::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2);
  return this;
}

BOOL CMMsl::AccelOscarEmu::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::Accel::operator==(v2, v3);
  return result;
}

CMMsl::Accel *CMMsl::AccelOscarEmu::hash_value(CMMsl::AccelOscarEmu *this)
{
  CMMsl::Accel *result;

  result = (CMMsl::Accel *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::Accel *)CMMsl::Accel::hash_value(result);
  return result;
}

_QWORD *CMMsl::AccelOscarEmu::makeSuper(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135BD10;
    *(_DWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

double CMMsl::AccelTNBFrame::AccelTNBFrame(CMMsl::AccelTNBFrame *this)
{
  double result;

  *(_QWORD *)this = &off_25135BE60;
  *((_DWORD *)this + 29) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_25135BE60;
  *((_DWORD *)this + 29) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  return result;
}

void CMMsl::AccelTNBFrame::~AccelTNBFrame(CMMsl::AccelTNBFrame *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_25135BE60;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::AccelTNBFrame::~AccelTNBFrame(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::AccelTNBFrame *CMMsl::AccelTNBFrame::AccelTNBFrame(char **this, char **a2)
{
  _QWORD *v4;
  char v5;
  char *v6;
  char *v8;
  char *v9;
  char *v10;
  char v11;

  *this = (char *)&off_25135BE60;
  *(_OWORD *)(this + 1) = 0u;
  v4 = this + 1;
  *((_DWORD *)this + 29) = 0;
  *(_OWORD *)(this + 3) = 0u;
  *(_OWORD *)(this + 5) = 0u;
  *(_OWORD *)(this + 7) = 0u;
  this[9] = 0;
  if (this != a2)
  {
    sub_242911380(this + 7, a2[7], a2[8], (a2[8] - a2[7]) >> 2);
    sub_242911380(this + 4, a2[4], a2[5], (a2[5] - a2[4]) >> 2);
    sub_242911380(v4, a2[1], a2[2], (a2[2] - a2[1]) >> 2);
  }
  v5 = *((_BYTE *)a2 + 116);
  if ((v5 & 2) != 0)
  {
    v8 = a2[11];
    *((_BYTE *)this + 116) |= 2u;
    this[11] = v8;
    v5 = *((_BYTE *)a2 + 116);
    if ((v5 & 1) == 0)
    {
LABEL_5:
      if ((v5 & 8) == 0)
        goto LABEL_6;
      goto LABEL_12;
    }
  }
  else if ((*((_BYTE *)a2 + 116) & 1) == 0)
  {
    goto LABEL_5;
  }
  v9 = a2[10];
  *((_BYTE *)this + 116) |= 1u;
  this[10] = v9;
  v5 = *((_BYTE *)a2 + 116);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0)
      goto LABEL_7;
LABEL_13:
    v11 = *((_BYTE *)a2 + 112);
    *((_BYTE *)this + 116) |= 0x10u;
    *((_BYTE *)this + 112) = v11;
    if ((*((_BYTE *)a2 + 116) & 4) == 0)
      return (CMMsl::AccelTNBFrame *)this;
    goto LABEL_8;
  }
LABEL_12:
  v10 = a2[13];
  *((_BYTE *)this + 116) |= 8u;
  this[13] = v10;
  v5 = *((_BYTE *)a2 + 116);
  if ((v5 & 0x10) != 0)
    goto LABEL_13;
LABEL_7:
  if ((v5 & 4) != 0)
  {
LABEL_8:
    v6 = a2[12];
    *((_BYTE *)this + 116) |= 4u;
    this[12] = v6;
  }
  return (CMMsl::AccelTNBFrame *)this;
}

CMMsl *CMMsl::AccelTNBFrame::operator=(CMMsl *a1, char **a2)
{
  CMMsl::AccelTNBFrame *v3;
  char *v5[15];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::AccelTNBFrame::AccelTNBFrame(v5, a2);
    CMMsl::swap(a1, (CMMsl::AccelTNBFrame *)v5, v3);
    CMMsl::AccelTNBFrame::~AccelTNBFrame((CMMsl::AccelTNBFrame *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::AccelTNBFrame *a2, CMMsl::AccelTNBFrame *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double result;

  v3 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v3;
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v4;
  v5 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v5;
  v6 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v6;
  v7 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v7;
  v8 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v8;
  v9 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v9;
  v10 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v10;
  v11 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v11;
  v12 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v12;
  v13 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v13;
  v14 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v14;
  v15 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v15;
  LOBYTE(v12) = *((_BYTE *)this + 112);
  *((_BYTE *)this + 112) = *((_BYTE *)a2 + 112);
  *((_BYTE *)a2 + 112) = v12;
  result = *((double *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((double *)a2 + 12) = result;
  return result;
}

uint64_t CMMsl::AccelTNBFrame::AccelTNBFrame(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_25135BE60;
  v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  v5 = a1 + 8;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a2 + 116) = 0;
  sub_242911330(a1 + 56, (__n128 *)(a2 + 56));
  sub_242911330(v4, (__n128 *)(a2 + 32));
  sub_242911330(v5, (__n128 *)(a2 + 8));
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  return a1;
}

CMMsl *CMMsl::AccelTNBFrame::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::AccelTNBFrame *v3;
  _BYTE v5[120];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::AccelTNBFrame::AccelTNBFrame((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::AccelTNBFrame *)v5, v3);
    CMMsl::AccelTNBFrame::~AccelTNBFrame((CMMsl::AccelTNBFrame *)v5);
  }
  return a1;
}

uint64_t CMMsl::AccelTNBFrame::formatText(CMMsl::AccelTNBFrame *this, PB::TextFormatter *a2, const char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  float *v11;
  float *v12;
  float v13;
  char v14;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (float *)*((_QWORD *)this + 1);
  v6 = (float *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "B", v7);
  }
  v8 = (float *)*((_QWORD *)this + 4);
  v9 = (float *)*((_QWORD *)this + 5);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(a2, "N", v10);
  }
  v11 = (float *)*((_QWORD *)this + 7);
  v12 = (float *)*((_QWORD *)this + 8);
  while (v11 != v12)
  {
    v13 = *v11++;
    PB::TextFormatter::format(a2, "T", v13);
  }
  v14 = *((_BYTE *)this + 116);
  if ((v14 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "curvature", *((double *)this + 10));
    v14 = *((_BYTE *)this + 116);
    if ((v14 & 0x10) == 0)
    {
LABEL_9:
      if ((v14 & 2) == 0)
        goto LABEL_10;
      goto LABEL_16;
    }
  }
  else if ((*((_BYTE *)this + 116) & 0x10) == 0)
  {
    goto LABEL_9;
  }
  PB::TextFormatter::format(a2, "isValid");
  v14 = *((_BYTE *)this + 116);
  if ((v14 & 2) == 0)
  {
LABEL_10:
    if ((v14 & 4) == 0)
      goto LABEL_11;
LABEL_17:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 12));
    if ((*((_BYTE *)this + 116) & 8) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_12;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "jerkNorm", *((double *)this + 11));
  v14 = *((_BYTE *)this + 116);
  if ((v14 & 4) != 0)
    goto LABEL_17;
LABEL_11:
  if ((v14 & 8) != 0)
LABEL_12:
    PB::TextFormatter::format(a2, "torsion", *((double *)this + 13));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::AccelTNBFrame::readFrom(CMMsl::AccelTNBFrame *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  _DWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  _DWORD *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  _DWORD *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  int v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  int v67;
  BOOL v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  _DWORD *v73;
  unint64_t v74;
  char *v75;
  unint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  _DWORD *v96;
  int v97;
  _DWORD *v98;
  int v99;
  _DWORD *v100;
  int v101;
  unint64_t v102;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_21:
      v19 = v11 & 7;
      if (v19 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v20 = *((_QWORD *)a2 + 1);
            v21 = *((_QWORD *)a2 + 2);
            while (v20 < v21 && !*((_BYTE *)a2 + 24))
            {
              v23 = (char *)*((_QWORD *)this + 8);
              v22 = *((_QWORD *)this + 9);
              if ((unint64_t)v23 >= v22)
              {
                v25 = (char *)*((_QWORD *)this + 7);
                v26 = (v23 - v25) >> 2;
                v27 = v26 + 1;
                if ((unint64_t)(v26 + 1) >> 62)
                  goto LABEL_177;
                v28 = v22 - (_QWORD)v25;
                if (v28 >> 1 > v27)
                  v27 = v28 >> 1;
                if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
                  v29 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v29 = v27;
                if (v29)
                {
                  v29 = (unint64_t)sub_2429114B8(v29);
                  v25 = (char *)*((_QWORD *)this + 7);
                  v23 = (char *)*((_QWORD *)this + 8);
                }
                else
                {
                  v30 = 0;
                }
                v31 = (_DWORD *)(v29 + 4 * v26);
                *v31 = 0;
                v24 = v31 + 1;
                while (v23 != v25)
                {
                  v32 = *((_DWORD *)v23 - 1);
                  v23 -= 4;
                  *--v31 = v32;
                }
                *((_QWORD *)this + 7) = v31;
                *((_QWORD *)this + 8) = v24;
                *((_QWORD *)this + 9) = v29 + 4 * v30;
                if (v25)
                  operator delete(v25);
              }
              else
              {
                *(_DWORD *)v23 = 0;
                v24 = v23 + 4;
              }
              *((_QWORD *)this + 8) = v24;
              v33 = *((_QWORD *)a2 + 1);
              if (v33 > 0xFFFFFFFFFFFFFFFBLL || v33 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_118;
              *(v24 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v33);
              v21 = *((_QWORD *)a2 + 2);
              v20 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v20;
            }
            goto LABEL_119;
          }
          v72 = (char *)*((_QWORD *)this + 8);
          v71 = *((_QWORD *)this + 9);
          if ((unint64_t)v72 >= v71)
          {
            v78 = (char *)*((_QWORD *)this + 7);
            v79 = (v72 - v78) >> 2;
            v80 = v79 + 1;
            if ((unint64_t)(v79 + 1) >> 62)
              goto LABEL_177;
            v81 = v71 - (_QWORD)v78;
            if (v81 >> 1 > v80)
              v80 = v81 >> 1;
            if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFFCLL)
              v82 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v82 = v80;
            if (v82)
            {
              v82 = (unint64_t)sub_2429114B8(v82);
              v78 = (char *)*((_QWORD *)this + 7);
              v72 = (char *)*((_QWORD *)this + 8);
            }
            else
            {
              v83 = 0;
            }
            v96 = (_DWORD *)(v82 + 4 * v79);
            *v96 = 0;
            v73 = v96 + 1;
            while (v72 != v78)
            {
              v97 = *((_DWORD *)v72 - 1);
              v72 -= 4;
              *--v96 = v97;
            }
            *((_QWORD *)this + 7) = v96;
            *((_QWORD *)this + 8) = v73;
            *((_QWORD *)this + 9) = v82 + 4 * v83;
            if (v78)
              operator delete(v78);
          }
          else
          {
            *(_DWORD *)v72 = 0;
            v73 = v72 + 4;
          }
          *((_QWORD *)this + 8) = v73;
          goto LABEL_165;
        case 2u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v34 = *((_QWORD *)a2 + 1);
            v35 = *((_QWORD *)a2 + 2);
            while (v34 < v35 && !*((_BYTE *)a2 + 24))
            {
              v37 = (char *)*((_QWORD *)this + 5);
              v36 = *((_QWORD *)this + 6);
              if ((unint64_t)v37 >= v36)
              {
                v39 = (char *)*((_QWORD *)this + 4);
                v40 = (v37 - v39) >> 2;
                v41 = v40 + 1;
                if ((unint64_t)(v40 + 1) >> 62)
                  goto LABEL_177;
                v42 = v36 - (_QWORD)v39;
                if (v42 >> 1 > v41)
                  v41 = v42 >> 1;
                if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
                  v43 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v43 = v41;
                if (v43)
                {
                  v43 = (unint64_t)sub_2429114B8(v43);
                  v39 = (char *)*((_QWORD *)this + 4);
                  v37 = (char *)*((_QWORD *)this + 5);
                }
                else
                {
                  v44 = 0;
                }
                v45 = (_DWORD *)(v43 + 4 * v40);
                *v45 = 0;
                v38 = v45 + 1;
                while (v37 != v39)
                {
                  v46 = *((_DWORD *)v37 - 1);
                  v37 -= 4;
                  *--v45 = v46;
                }
                *((_QWORD *)this + 4) = v45;
                *((_QWORD *)this + 5) = v38;
                *((_QWORD *)this + 6) = v43 + 4 * v44;
                if (v39)
                  operator delete(v39);
              }
              else
              {
                *(_DWORD *)v37 = 0;
                v38 = v37 + 4;
              }
              *((_QWORD *)this + 5) = v38;
              v47 = *((_QWORD *)a2 + 1);
              if (v47 > 0xFFFFFFFFFFFFFFFBLL || v47 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_118;
              *(v38 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v47);
              v35 = *((_QWORD *)a2 + 2);
              v34 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v34;
            }
            goto LABEL_119;
          }
          v75 = (char *)*((_QWORD *)this + 5);
          v74 = *((_QWORD *)this + 6);
          if ((unint64_t)v75 >= v74)
          {
            v84 = (char *)*((_QWORD *)this + 4);
            v85 = (v75 - v84) >> 2;
            v86 = v85 + 1;
            if ((unint64_t)(v85 + 1) >> 62)
              goto LABEL_177;
            v87 = v74 - (_QWORD)v84;
            if (v87 >> 1 > v86)
              v86 = v87 >> 1;
            if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL)
              v88 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v88 = v86;
            if (v88)
            {
              v88 = (unint64_t)sub_2429114B8(v88);
              v84 = (char *)*((_QWORD *)this + 4);
              v75 = (char *)*((_QWORD *)this + 5);
            }
            else
            {
              v89 = 0;
            }
            v98 = (_DWORD *)(v88 + 4 * v85);
            *v98 = 0;
            v73 = v98 + 1;
            while (v75 != v84)
            {
              v99 = *((_DWORD *)v75 - 1);
              v75 -= 4;
              *--v98 = v99;
            }
            *((_QWORD *)this + 4) = v98;
            *((_QWORD *)this + 5) = v73;
            *((_QWORD *)this + 6) = v88 + 4 * v89;
            if (v84)
              operator delete(v84);
          }
          else
          {
            *(_DWORD *)v75 = 0;
            v73 = v75 + 4;
          }
          *((_QWORD *)this + 5) = v73;
          goto LABEL_165;
        case 3u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v48 = *((_QWORD *)a2 + 1);
            v49 = *((_QWORD *)a2 + 2);
            while (v48 < v49 && !*((_BYTE *)a2 + 24))
            {
              v51 = (char *)*((_QWORD *)this + 2);
              v50 = *((_QWORD *)this + 3);
              if ((unint64_t)v51 >= v50)
              {
                v53 = (char *)*((_QWORD *)this + 1);
                v54 = (v51 - v53) >> 2;
                v55 = v54 + 1;
                if ((unint64_t)(v54 + 1) >> 62)
                  goto LABEL_177;
                v56 = v50 - (_QWORD)v53;
                if (v56 >> 1 > v55)
                  v55 = v56 >> 1;
                if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL)
                  v57 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v57 = v55;
                if (v57)
                {
                  v57 = (unint64_t)sub_2429114B8(v57);
                  v53 = (char *)*((_QWORD *)this + 1);
                  v51 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v58 = 0;
                }
                v59 = (_DWORD *)(v57 + 4 * v54);
                *v59 = 0;
                v52 = v59 + 1;
                while (v51 != v53)
                {
                  v60 = *((_DWORD *)v51 - 1);
                  v51 -= 4;
                  *--v59 = v60;
                }
                *((_QWORD *)this + 1) = v59;
                *((_QWORD *)this + 2) = v52;
                *((_QWORD *)this + 3) = v57 + 4 * v58;
                if (v53)
                  operator delete(v53);
              }
              else
              {
                *(_DWORD *)v51 = 0;
                v52 = v51 + 4;
              }
              *((_QWORD *)this + 2) = v52;
              v61 = *((_QWORD *)a2 + 1);
              if (v61 > 0xFFFFFFFFFFFFFFFBLL || v61 + 4 > *((_QWORD *)a2 + 2))
              {
LABEL_118:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v52 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v61);
              v49 = *((_QWORD *)a2 + 2);
              v48 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v48;
            }
LABEL_119:
            PB::Reader::recallMark();
          }
          else
          {
            v77 = (char *)*((_QWORD *)this + 2);
            v76 = *((_QWORD *)this + 3);
            if ((unint64_t)v77 >= v76)
            {
              v90 = (char *)*((_QWORD *)this + 1);
              v91 = (v77 - v90) >> 2;
              v92 = v91 + 1;
              if ((unint64_t)(v91 + 1) >> 62)
LABEL_177:
                sub_242729A44();
              v93 = v76 - (_QWORD)v90;
              if (v93 >> 1 > v92)
                v92 = v93 >> 1;
              if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL)
                v94 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v94 = v92;
              if (v94)
              {
                v94 = (unint64_t)sub_2429114B8(v94);
                v90 = (char *)*((_QWORD *)this + 1);
                v77 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v95 = 0;
              }
              v100 = (_DWORD *)(v94 + 4 * v91);
              *v100 = 0;
              v73 = v100 + 1;
              while (v77 != v90)
              {
                v101 = *((_DWORD *)v77 - 1);
                v77 -= 4;
                *--v100 = v101;
              }
              *((_QWORD *)this + 1) = v100;
              *((_QWORD *)this + 2) = v73;
              *((_QWORD *)this + 3) = v94 + 4 * v95;
              if (v90)
                operator delete(v90);
            }
            else
            {
              *(_DWORD *)v77 = 0;
              v73 = v77 + 4;
            }
            *((_QWORD *)this + 2) = v73;
LABEL_165:
            v102 = *((_QWORD *)a2 + 1);
            if (v102 <= 0xFFFFFFFFFFFFFFFBLL && v102 + 4 <= *((_QWORD *)a2 + 2))
            {
              *(v73 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v102);
              v70 = *((_QWORD *)a2 + 1) + 4;
LABEL_169:
              *((_QWORD *)a2 + 1) = v70;
            }
            else
            {
LABEL_167:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
          break;
        case 4u:
          *((_BYTE *)this + 116) |= 2u;
          v62 = *((_QWORD *)a2 + 1);
          if (v62 > 0xFFFFFFFFFFFFFFF7 || v62 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_167;
          *((_QWORD *)this + 11) = *(_QWORD *)(*(_QWORD *)a2 + v62);
          goto LABEL_109;
        case 5u:
          *((_BYTE *)this + 116) |= 1u;
          v63 = *((_QWORD *)a2 + 1);
          if (v63 > 0xFFFFFFFFFFFFFFF7 || v63 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_167;
          *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v63);
          goto LABEL_109;
        case 6u:
          *((_BYTE *)this + 116) |= 8u;
          v64 = *((_QWORD *)a2 + 1);
          if (v64 > 0xFFFFFFFFFFFFFFF7 || v64 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_167;
          *((_QWORD *)this + 13) = *(_QWORD *)(*(_QWORD *)a2 + v64);
          goto LABEL_109;
        case 7u:
          *((_BYTE *)this + 116) |= 0x10u;
          v65 = *((_QWORD *)a2 + 1);
          if (v65 >= *((_QWORD *)a2 + 2))
          {
            v68 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v66 = v65 + 1;
            v67 = *(unsigned __int8 *)(*(_QWORD *)a2 + v65);
            *((_QWORD *)a2 + 1) = v66;
            v68 = v67 != 0;
          }
          *((_BYTE *)this + 112) = v68;
          goto LABEL_170;
        case 8u:
          *((_BYTE *)this + 116) |= 4u;
          v69 = *((_QWORD *)a2 + 1);
          if (v69 > 0xFFFFFFFFFFFFFFF7 || v69 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_167;
          *((_QWORD *)this + 12) = *(_QWORD *)(*(_QWORD *)a2 + v69);
LABEL_109:
          v70 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_169;
        default:
          goto LABEL_19;
      }
      goto LABEL_170;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_21;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    if ((PB::Reader::skip(a2) & 1) == 0)
      return 0;
LABEL_170:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
}

uint64_t CMMsl::AccelTNBFrame::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;
  float *v10;
  float *v11;
  float v12;
  char v13;

  v3 = this;
  v4 = *(float **)(this + 56);
  v5 = *(float **)(this + 64);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6);
  }
  v7 = *(float **)(v3 + 32);
  v8 = *(float **)(v3 + 40);
  while (v7 != v8)
  {
    v9 = *v7++;
    this = PB::Writer::write(a2, v9);
  }
  v10 = *(float **)(v3 + 8);
  v11 = *(float **)(v3 + 16);
  while (v10 != v11)
  {
    v12 = *v10++;
    this = PB::Writer::write(a2, v12);
  }
  v13 = *(_BYTE *)(v3 + 116);
  if ((v13 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 88));
    v13 = *(_BYTE *)(v3 + 116);
    if ((v13 & 1) == 0)
    {
LABEL_12:
      if ((v13 & 8) == 0)
        goto LABEL_13;
      goto LABEL_18;
    }
  }
  else if ((*(_BYTE *)(v3 + 116) & 1) == 0)
  {
    goto LABEL_12;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 80));
  v13 = *(_BYTE *)(v3 + 116);
  if ((v13 & 8) == 0)
  {
LABEL_13:
    if ((v13 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 104));
  v13 = *(_BYTE *)(v3 + 116);
  if ((v13 & 0x10) == 0)
  {
LABEL_14:
    if ((v13 & 4) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 96));
  }
LABEL_19:
  this = PB::Writer::write(a2);
  if ((*(_BYTE *)(v3 + 116) & 4) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 96));
  return this;
}

BOOL CMMsl::AccelTNBFrame::operator==(uint64_t a1, uint64_t a2)
{
  float *v2;
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  _BOOL8 v11;

  v3 = *(float **)(a1 + 56);
  v2 = *(float **)(a1 + 64);
  v4 = *(float **)(a2 + 56);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 64) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v6 = *(float **)(a1 + 32);
  v5 = *(float **)(a1 + 40);
  v7 = *(float **)(a2 + 32);
  if ((char *)v5 - (char *)v6 != *(_QWORD *)(a2 + 40) - (_QWORD)v7)
    return 0;
  while (v6 != v5)
  {
    if (*v6 != *v7)
      return 0;
    ++v6;
    ++v7;
  }
  v9 = *(float **)(a1 + 8);
  v8 = *(float **)(a1 + 16);
  v10 = *(float **)(a2 + 8);
  if ((char *)v8 - (char *)v9 != *(_QWORD *)(a2 + 16) - (_QWORD)v10)
    return 0;
  while (v9 != v8)
  {
    if (*v9 != *v10)
      return 0;
    ++v9;
    ++v10;
  }
  if ((*(_BYTE *)(a1 + 116) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 116) & 2) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 116) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 116) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 116) & 1) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 116) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 116) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 116) & 8) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 116) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 116) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 116) & 0x10) == 0 || *(unsigned __int8 *)(a1 + 112) != *(unsigned __int8 *)(a2 + 112))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 116) & 0x10) != 0)
  {
    return 0;
  }
  v11 = (*(_BYTE *)(a2 + 116) & 4) == 0;
  if ((*(_BYTE *)(a1 + 116) & 4) != 0)
    return (*(_BYTE *)(a2 + 116) & 4) != 0 && *(double *)(a1 + 96) == *(double *)(a2 + 96);
  return v11;
}

uint64_t CMMsl::AccelTNBFrame::hash_value(CMMsl::AccelTNBFrame *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  double v9;

  v2 = PBHashBytes();
  v3 = PBHashBytes();
  v4 = PBHashBytes();
  if ((*((_BYTE *)this + 116) & 2) == 0)
  {
    v5 = 0.0;
    if ((*((_BYTE *)this + 116) & 1) != 0)
      goto LABEL_3;
LABEL_16:
    v6 = 0.0;
    if ((*((_BYTE *)this + 116) & 8) != 0)
      goto LABEL_6;
LABEL_17:
    v7 = 0.0;
    if ((*((_BYTE *)this + 116) & 0x10) != 0)
      goto LABEL_9;
    goto LABEL_18;
  }
  v5 = *((double *)this + 11);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((*((_BYTE *)this + 116) & 1) == 0)
    goto LABEL_16;
LABEL_3:
  v6 = *((double *)this + 10);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((*((_BYTE *)this + 116) & 8) == 0)
    goto LABEL_17;
LABEL_6:
  v7 = *((double *)this + 13);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((*((_BYTE *)this + 116) & 0x10) != 0)
  {
LABEL_9:
    v8 = *((unsigned __int8 *)this + 112);
    if ((*((_BYTE *)this + 116) & 4) != 0)
      goto LABEL_10;
LABEL_19:
    v9 = 0.0;
    return v3 ^ v2 ^ v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ v8 ^ *(_QWORD *)&v9;
  }
LABEL_18:
  v8 = 0;
  if ((*((_BYTE *)this + 116) & 4) == 0)
    goto LABEL_19;
LABEL_10:
  v9 = *((double *)this + 12);
  if (v9 == 0.0)
    v9 = 0.0;
  return v3 ^ v2 ^ v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ v8 ^ *(_QWORD *)&v9;
}

uint64_t CMMsl::AccelerometerPace::AccelerometerPace(uint64_t this)
{
  *(_QWORD *)this = &off_25135BE98;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135BE98;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::AccelerometerPace::~AccelerometerPace(CMMsl::AccelerometerPace *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::AccelerometerPace::AccelerometerPace(CMMsl::AccelerometerPace *this, const CMMsl::AccelerometerPace *a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)this = &off_25135BE98;
  *((_DWORD *)this + 8) = 0;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 1) != 0)
  {
    result = *((double *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 32) = 1;
    *((double *)this + 1) = result;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 32) & 2) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 2);
    v3 |= 2u;
    *((_BYTE *)this + 32) = v3;
    *((double *)this + 2) = result;
    v2 = *((_BYTE *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    result = *((double *)a2 + 3);
    *((_BYTE *)this + 32) = v3 | 4;
    *((double *)this + 3) = result;
  }
  return result;
}

uint64_t CMMsl::AccelerometerPace::operator=(uint64_t a1, uint64_t a2, double a3, double a4, double a5)
{
  char v6;
  char v7;
  int v8;
  __int128 v9;
  uint64_t v10;
  void (**v12)(CMMsl::AccelerometerPace *__hidden);
  __int128 v13;
  uint64_t v14;
  int v15;

  if (a1 != a2)
  {
    v12 = &off_25135BE98;
    v15 = 0;
    v6 = *(_BYTE *)(a2 + 32);
    if ((v6 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      v7 = 1;
      LOBYTE(v15) = 1;
      if ((v6 & 2) != 0)
      {
LABEL_4:
        a4 = *(double *)(a2 + 16);
        v7 |= 2u;
        LOBYTE(v15) = v7;
        if ((v6 & 4) != 0)
          goto LABEL_8;
        goto LABEL_9;
      }
    }
    else
    {
      v7 = 0;
      if ((*(_BYTE *)(a2 + 32) & 2) != 0)
        goto LABEL_4;
    }
    if ((v6 & 4) != 0)
    {
LABEL_8:
      a5 = *(double *)(a2 + 24);
      LOBYTE(v15) = v7 | 4;
    }
LABEL_9:
    v8 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v15;
    v15 = v8;
    v9 = *(_OWORD *)(a1 + 8);
    *(double *)(a1 + 8) = a3;
    *(double *)(a1 + 16) = a4;
    v13 = v9;
    v10 = *(_QWORD *)(a1 + 24);
    *(double *)(a1 + 24) = a5;
    v14 = v10;
    PB::Base::~Base((PB::Base *)&v12);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::AccelerometerPace *a2, CMMsl::AccelerometerPace *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  result = *((double *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((double *)a2 + 3) = result;
  return result;
}

double CMMsl::AccelerometerPace::AccelerometerPace(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135BE98;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135BE98;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  return result;
}

uint64_t CMMsl::AccelerometerPace::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  void (**v8)(CMMsl::AccelerometerPace *__hidden);
  __int128 v9;
  uint64_t v10;
  int v11;

  if (a1 != a2)
  {
    v8 = &off_25135BE98;
    v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v4 = *(_QWORD *)(a2 + 24);
    v11 = *(_DWORD *)(a1 + 32);
    v5 = *(_OWORD *)(a1 + 8);
    v6 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    v9 = v5;
    *(_QWORD *)&v5 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v4;
    v10 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::AccelerometerPace::formatText(CMMsl::AccelerometerPace *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 1) == 0)
  {
    if ((*((_BYTE *)this + 32) & 2) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(a2, "lowerBound", *((double *)this + 2));
    if ((*((_BYTE *)this + 32) & 4) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_4;
  }
  PB::TextFormatter::format(a2, "calibrated", *((double *)this + 1));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 2) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 4) != 0)
LABEL_4:
    PB::TextFormatter::format(a2, "upperBound", *((double *)this + 3));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccelerometerPace::readFrom(CMMsl::AccelerometerPace *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          v14 = v16++ > 8;
          if (v14)
            goto LABEL_27;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v19 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((_BYTE *)this + 32) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
      }
      else if ((_DWORD)v19 == 2)
      {
        *((_BYTE *)this + 32) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
      }
      else
      {
        if ((_DWORD)v19 != 1)
        {
LABEL_27:
          result = PB::Reader::skip(a2);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          goto LABEL_37;
        }
        *((_BYTE *)this + 32) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
        {
LABEL_34:
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_37;
        }
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
      }
      v2 = *((_QWORD *)a2 + 1) + 8;
      *((_QWORD *)a2 + 1) = v2;
LABEL_37:
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::AccelerometerPace::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        return this;
      return PB::Writer::write(a2, *(double *)(v3 + 24));
    }
  }
  else if ((*(_BYTE *)(this + 32) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  if ((*(_BYTE *)(v3 + 32) & 4) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 24));
  return this;
}

BOOL CMMsl::AccelerometerPace::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 32) & 4) == 0;
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
    return (*(_BYTE *)(a2 + 32) & 4) != 0 && *(double *)(a1 + 24) == *(double *)(a2 + 24);
  return v2;
}

uint64_t CMMsl::AccelerometerPace::hash_value(CMMsl::AccelerometerPace *this)
{
  double v1;
  double v2;
  double v3;

  if ((*((_BYTE *)this + 32) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 32) & 2) != 0)
    {
LABEL_3:
      v2 = *((double *)this + 2);
      if (v2 == 0.0)
        v2 = 0.0;
      if ((*((_BYTE *)this + 32) & 4) != 0)
        goto LABEL_6;
LABEL_13:
      v3 = 0.0;
      return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3;
    }
  }
  else
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 32) & 2) != 0)
      goto LABEL_3;
  }
  v2 = 0.0;
  if ((*((_BYTE *)this + 32) & 4) == 0)
    goto LABEL_13;
LABEL_6:
  v3 = *((double *)this + 3);
  if (v3 == 0.0)
    v3 = 0.0;
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3;
}

uint64_t CMMsl::AccessoryAccel::AccessoryAccel(uint64_t this)
{
  *(_QWORD *)this = &off_25135BED0;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135BED0;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::AccessoryAccel::~AccessoryAccel(CMMsl::AccessoryAccel *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135BED0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135BED0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135BED0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::AccessoryAccel *CMMsl::AccessoryAccel::AccessoryAccel(CMMsl::AccessoryAccel *this, const CMMsl::Accel **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  const CMMsl::Accel *v8;
  int v10;
  int v11;

  *(_QWORD *)this = &off_25135BED0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 8) = 0;
  if (a2[1])
  {
    v4 = operator new();
    v5 = CMMsl::Accel::Accel(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  v7 = *((_BYTE *)a2 + 32);
  if ((v7 & 2) == 0)
  {
    if (((_BYTE)a2[4] & 4) == 0)
      goto LABEL_6;
LABEL_10:
    v11 = *((_DWORD *)a2 + 7);
    *((_BYTE *)this + 32) |= 4u;
    *((_DWORD *)this + 7) = v11;
    if (((_BYTE)a2[4] & 1) == 0)
      return this;
    goto LABEL_7;
  }
  v10 = *((_DWORD *)a2 + 6);
  *((_BYTE *)this + 32) |= 2u;
  *((_DWORD *)this + 6) = v10;
  v7 = *((_BYTE *)a2 + 32);
  if ((v7 & 4) != 0)
    goto LABEL_10;
LABEL_6:
  if ((v7 & 1) != 0)
  {
LABEL_7:
    v8 = a2[2];
    *((_BYTE *)this + 32) |= 1u;
    *((_QWORD *)this + 2) = v8;
  }
  return this;
}

uint64_t CMMsl::AccessoryAccel::operator=(uint64_t a1, const CMMsl::Accel **a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (**v9)(CMMsl::AccessoryAccel *__hidden);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  if ((const CMMsl::Accel **)a1 != a2)
  {
    CMMsl::AccessoryAccel::AccessoryAccel((CMMsl::AccessoryAccel *)&v9, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v13;
    v13 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v12;
    v12 = v4;
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
    v7 = v11;
    *(_QWORD *)(a1 + 8) = v10;
    *(_QWORD *)(a1 + 16) = v7;
    v10 = 0;
    v11 = v6;
    v9 = &off_25135BED0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AccessoryAccel *a2, CMMsl::AccessoryAccel *a3)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_DWORD *)(this + 32);
  *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  v5 = *(_DWORD *)(this + 28);
  *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
  v6 = *(_QWORD *)(this + 8);
  v7 = *(_QWORD *)(this + 16);
  v8 = *((_QWORD *)a2 + 2);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *(_QWORD *)(this + 16) = v8;
  *((_DWORD *)a2 + 7) = v5;
  *((_QWORD *)a2 + 1) = v6;
  *((_QWORD *)a2 + 2) = v7;
  return this;
}

uint64_t CMMsl::AccessoryAccel::AccessoryAccel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_25135BED0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t CMMsl::AccessoryAccel::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[4];
  int v12;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 8) = 0;
    v12 = *(_DWORD *)(a1 + 32);
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v4;
    v8 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 32) = v3;
    v9 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v11[3] = v9;
    *(_QWORD *)(a1 + 16) = v5;
    v11[1] = 0;
    v11[2] = v7;
    v11[0] = &off_25135BED0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

uint64_t CMMsl::AccessoryAccel::formatText(CMMsl::AccessoryAccel *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  char v6;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "accel");
  v6 = *((_BYTE *)this + 32);
  if ((v6 & 2) == 0)
  {
    if ((*((_BYTE *)this + 32) & 1) == 0)
      goto LABEL_5;
LABEL_9:
    PB::TextFormatter::format(a2, "sensorTime");
    if ((*((_BYTE *)this + 32) & 4) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_6;
  }
  PB::TextFormatter::format(a2, "location");
  v6 = *((_BYTE *)this + 32);
  if ((v6 & 1) != 0)
    goto LABEL_9;
LABEL_5:
  if ((v6 & 4) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "sequenceNumber");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessoryAccel::readFrom(CMMsl::AccessoryAccel *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  _DWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  unint64_t v57;
  char v58;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      break;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_25:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        v21 = (_DWORD *)operator new();
        *(_QWORD *)v21 = &off_25135BD10;
        v21[8] = 0;
        v22 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v21;
        if (v22)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          v21 = (_DWORD *)*((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v21 + 16))(v21, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
LABEL_20:
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        v4 = *((unsigned __int8 *)a2 + 24);
        if (v2 >= v3 || v4 != 0)
          return v4 == 0;
        break;
      case 2u:
        *((_BYTE *)this + 32) |= 2u;
        v23 = *((_QWORD *)a2 + 1);
        v24 = *((_QWORD *)a2 + 2);
        v25 = *(_QWORD *)a2;
        if (v23 <= 0xFFFFFFFFFFFFFFF5 && v23 + 10 <= v24)
        {
          v26 = 0;
          v27 = 0;
          v28 = 0;
          do
          {
            v29 = v23 + 1;
            *((_QWORD *)a2 + 1) = v23 + 1;
            v30 = *(_BYTE *)(v25 + v23);
            v28 |= (unint64_t)(v30 & 0x7F) << v26;
            if ((v30 & 0x80) == 0)
              goto LABEL_79;
            v26 += 7;
            v23 = v29;
            v14 = v27++ > 8;
          }
          while (!v14);
LABEL_59:
          LODWORD(v28) = 0;
          goto LABEL_79;
        }
        v47 = 0;
        v48 = 0;
        v28 = 0;
        if (v24 <= v23)
          v24 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v24 == v23)
          {
            LODWORD(v28) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v49 = v23 + 1;
            v50 = *(_BYTE *)(v25 + v23);
            *((_QWORD *)a2 + 1) = v49;
            v28 |= (unint64_t)(v50 & 0x7F) << v47;
            if (v50 < 0)
            {
              v47 += 7;
              v23 = v49;
              v14 = v48++ > 8;
              if (v14)
                goto LABEL_59;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v28) = 0;
          }
          break;
        }
LABEL_79:
        *((_DWORD *)this + 6) = v28;
        goto LABEL_20;
      case 3u:
        *((_BYTE *)this + 32) |= 4u;
        v31 = *((_QWORD *)a2 + 1);
        v32 = *((_QWORD *)a2 + 2);
        v33 = *(_QWORD *)a2;
        if (v31 <= 0xFFFFFFFFFFFFFFF5 && v31 + 10 <= v32)
        {
          v34 = 0;
          v35 = 0;
          v36 = 0;
          do
          {
            v37 = v31 + 1;
            *((_QWORD *)a2 + 1) = v31 + 1;
            v38 = *(_BYTE *)(v33 + v31);
            v36 |= (unint64_t)(v38 & 0x7F) << v34;
            if ((v38 & 0x80) == 0)
              goto LABEL_82;
            v34 += 7;
            v31 = v37;
            v14 = v35++ > 8;
          }
          while (!v14);
LABEL_66:
          LODWORD(v36) = 0;
          goto LABEL_82;
        }
        v51 = 0;
        v52 = 0;
        v36 = 0;
        if (v32 <= v31)
          v32 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v32 == v31)
          {
            LODWORD(v36) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v53 = v31 + 1;
            v54 = *(_BYTE *)(v33 + v31);
            *((_QWORD *)a2 + 1) = v53;
            v36 |= (unint64_t)(v54 & 0x7F) << v51;
            if (v54 < 0)
            {
              v51 += 7;
              v31 = v53;
              v14 = v52++ > 8;
              if (v14)
                goto LABEL_66;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v36) = 0;
          }
          break;
        }
LABEL_82:
        *((_DWORD *)this + 7) = v36;
        goto LABEL_20;
      case 4u:
        *((_BYTE *)this + 32) |= 1u;
        v39 = *((_QWORD *)a2 + 1);
        v40 = *((_QWORD *)a2 + 2);
        v41 = *(_QWORD *)a2;
        if (v39 <= 0xFFFFFFFFFFFFFFF5 && v39 + 10 <= v40)
        {
          v42 = 0;
          v43 = 0;
          v44 = 0;
          do
          {
            v45 = v39 + 1;
            *((_QWORD *)a2 + 1) = v39 + 1;
            v46 = *(_BYTE *)(v41 + v39);
            v44 |= (unint64_t)(v46 & 0x7F) << v42;
            if ((v46 & 0x80) == 0)
              goto LABEL_85;
            v42 += 7;
            v39 = v45;
            v14 = v43++ > 8;
          }
          while (!v14);
LABEL_73:
          v44 = 0;
          goto LABEL_85;
        }
        v55 = 0;
        v56 = 0;
        v44 = 0;
        if (v40 <= v39)
          v40 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v40 == v39)
          {
            v44 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v57 = v39 + 1;
            v58 = *(_BYTE *)(v41 + v39);
            *((_QWORD *)a2 + 1) = v57;
            v44 |= (unint64_t)(v58 & 0x7F) << v55;
            if (v58 < 0)
            {
              v55 += 7;
              v39 = v57;
              v14 = v56++ > 8;
              if (v14)
                goto LABEL_73;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v44 = 0;
          }
          break;
        }
LABEL_85:
        *((_QWORD *)this + 2) = v44;
        goto LABEL_20;
      default:
        goto LABEL_19;
    }
  }
  v15 = 0;
  v16 = 0;
  v11 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v17 = v2 + 1;
    v18 = *(_BYTE *)(v8 + v2);
    *((_QWORD *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0)
      goto LABEL_25;
    v15 += 7;
    v2 = v17;
    v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  result = PB::Reader::skip(a2);
  if ((_DWORD)result)
    goto LABEL_20;
  return result;
}

uint64_t CMMsl::AccessoryAccel::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  char v5;

  v3 = this;
  v4 = *(const PB::Base **)(this + 8);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = *(_BYTE *)(v3 + 32);
  if ((v5 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v5 = *(_BYTE *)(v3 + 32);
    if ((v5 & 4) == 0)
    {
LABEL_5:
      if ((v5 & 1) == 0)
        return this;
      return PB::Writer::writeVarInt(a2);
    }
  }
  else if ((*(_BYTE *)(v3 + 32) & 4) == 0)
  {
    goto LABEL_5;
  }
  this = PB::Writer::writeVarInt(a2);
  if ((*(_BYTE *)(v3 + 32) & 1) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

BOOL CMMsl::AccessoryAccel::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !CMMsl::Accel::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 2) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 4) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  result = (*(_BYTE *)(a2 + 32) & 1) == 0;
  if ((*(_BYTE *)(a1 + 32) & 1) == 0)
    return result;
  return (*(_BYTE *)(a2 + 32) & 1) != 0 && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
}

unint64_t CMMsl::AccessoryAccel::hash_value(CMMsl::AccessoryAccel *this)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    v2 = CMMsl::Accel::hash_value((CMMsl::Accel *)v2);
  if ((*((_BYTE *)this + 32) & 2) == 0)
  {
    v3 = 0;
    if ((*((_BYTE *)this + 32) & 4) != 0)
      goto LABEL_5;
LABEL_8:
    v4 = 0;
    if ((*((_BYTE *)this + 32) & 1) != 0)
      goto LABEL_6;
LABEL_9:
    v5 = 0;
    return v3 ^ v2 ^ v4 ^ v5;
  }
  v3 = *((unsigned int *)this + 6);
  if ((*((_BYTE *)this + 32) & 4) == 0)
    goto LABEL_8;
LABEL_5:
  v4 = *((unsigned int *)this + 7);
  if ((*((_BYTE *)this + 32) & 1) == 0)
    goto LABEL_9;
LABEL_6:
  v5 = *((_QWORD *)this + 2);
  return v3 ^ v2 ^ v4 ^ v5;
}

_QWORD *CMMsl::AccessoryAccel::makeAccel(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135BD10;
    *(_DWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::AccessoryAccelConfig::AccessoryAccelConfig(_QWORD *this)
{
  *this = &off_25135BF08;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &off_25135BF08;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

void CMMsl::AccessoryAccelConfig::~AccessoryAccelConfig(CMMsl::AccessoryAccelConfig *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_25135BF08;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    sub_242910C5C(v3);
  sub_242910C9C((void ***)this + 1, 0);
  PB::Base::~Base(this);
}

{
  CMMsl::AccessoryAccelConfig::~AccessoryAccelConfig(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::AccessoryAccelConfig *CMMsl::AccessoryAccelConfig::AccessoryAccelConfig(CMMsl::AccessoryAccelConfig *this, const CMMsl::AccessoryConfig **a2)
{
  void ***v4;
  CMMsl::AccessoryConfig *v5;
  CMMsl::AccessoryConfig *v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  const CMMsl::AccessoryConfig *v11;
  __int128 v12;
  uint64_t v13;
  void **v15;

  *(_QWORD *)this = &off_25135BF08;
  *((_QWORD *)this + 1) = 0;
  v4 = (void ***)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (a2[3])
  {
    v5 = (CMMsl::AccessoryConfig *)operator new();
    v6 = CMMsl::AccessoryConfig::AccessoryConfig(v5, a2[3]);
    v7 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if (a2[1])
  {
    v8 = (void **)operator new();
    PB::Data::Data();
    v15 = 0;
    sub_242910C9C(v4, v8);
    sub_242910C9C(&v15, 0);
  }
  if (a2[2])
  {
    v9 = operator new();
    v10 = v9;
    v11 = a2[2];
    if (*((char *)v11 + 23) < 0)
    {
      sub_242910CE8((_BYTE *)v9, *(void **)v11, *((_QWORD *)v11 + 1));
    }
    else
    {
      v12 = *(_OWORD *)v11;
      *(_QWORD *)(v9 + 16) = *((_QWORD *)v11 + 2);
      *(_OWORD *)v9 = v12;
    }
    v13 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v10;
    if (v13)
      sub_242910C5C(v13);
  }
  return this;
}

uint64_t CMMsl::AccessoryAccelConfig::operator=(uint64_t a1, const CMMsl::AccessoryConfig **a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  if ((const CMMsl::AccessoryConfig **)a1 != a2)
  {
    CMMsl::AccessoryAccelConfig::AccessoryAccelConfig((CMMsl::AccessoryAccelConfig *)&v6, a2);
    v3 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v4;
    CMMsl::AccessoryAccelConfig::~AccessoryAccelConfig((CMMsl::AccessoryAccelConfig *)&v6);
  }
  return a1;
}

_QWORD *CMMsl::swap(_QWORD *this, CMMsl::AccessoryAccelConfig *a2, CMMsl::AccessoryAccelConfig *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v3;
  v4 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  return this;
}

_QWORD *CMMsl::AccessoryAccelConfig::AccessoryAccelConfig(_QWORD *a1, _QWORD *a2)
{
  void ***v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = &off_25135BF08;
  a1[1] = 0;
  v4 = (void ***)(a1 + 1);
  a1[2] = 0;
  a1[3] = 0;
  v5 = a2[3];
  a2[3] = 0;
  v6 = a1[3];
  a1[3] = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (void **)a2[1];
  a2[1] = 0;
  sub_242910C9C(v4, v7);
  v8 = a2[2];
  a2[2] = 0;
  v9 = a1[2];
  a1[2] = v8;
  if (v9)
    sub_242910C5C(v9);
  return a1;
}

uint64_t CMMsl::AccessoryAccelConfig::operator=(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  if ((_QWORD *)a1 != a2)
  {
    CMMsl::AccessoryAccelConfig::AccessoryAccelConfig(&v6, a2);
    v3 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v4;
    CMMsl::AccessoryAccelConfig::~AccessoryAccelConfig((CMMsl::AccessoryAccelConfig *)&v6);
  }
  return a1;
}

uint64_t CMMsl::AccessoryAccelConfig::formatText(CMMsl::AccessoryAccelConfig *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format();
  if (*((_QWORD *)this + 2))
    PB::TextFormatter::format();
  v5 = *((_QWORD *)this + 3);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "config");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessoryAccelConfig::readFrom(CMMsl::AccessoryAccelConfig *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void ***v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void ***)((char *)this + 8);
    while (1)
    {
      v9 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_20;
      }
LABEL_24:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v21 = v12 >> 3;
      if ((v12 >> 3) == 3)
      {
        v24 = (_QWORD *)operator new();
        v24[1] = 0;
        v24[2] = 0;
        *v24 = 0;
        v25 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v24;
        if (v25)
          sub_242910C5C(v25);
        PB::Reader::read();
      }
      else if ((_DWORD)v21 == 2)
      {
        v26 = operator new();
        *(_QWORD *)v26 = 0;
        *(_QWORD *)(v26 + 8) = 0;
        v27 = 0;
        sub_242910C9C(v8, (void **)v26);
        sub_242910C9C(&v27, 0);
        PB::Reader::read();
      }
      else if ((_DWORD)v21 == 1)
      {
        v22 = operator new();
        *(_QWORD *)v22 = &off_25135BFB0;
        *(_QWORD *)(v22 + 8) = 0;
        *(_QWORD *)(v22 + 16) = 0;
        *(_QWORD *)(v22 + 24) = 0;
        *(_DWORD *)(v22 + 32) = 0;
        v23 = *((_QWORD *)this + 3);
        *((_QWORD *)this + 3) = v22;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
          v22 = *((_QWORD *)this + 3);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v22 + 16))(v22, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_20:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)a2 + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_24;
      v16 += 7;
      v2 = v18;
      v15 = v17++ > 8;
      if (v15)
        goto LABEL_20;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AccessoryConfig::AccessoryConfig(uint64_t this)
{
  *(_QWORD *)this = &off_25135BFB0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135BFB0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t CMMsl::AccessoryAccelConfig::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = this;
  v4 = *(const PB::Base **)(this + 24);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  if (*(_QWORD *)(v3 + 8))
    this = PB::Writer::write();
  if (*(_QWORD *)(v3 + 16))
    return PB::Writer::write();
  return this;
}

uint64_t CMMsl::AccessoryAccelConfig::operator==(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 **v8;
  uint64_t result;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  BOOL v21;

  v4 = a1[3];
  v5 = a2[3];
  if (v4)
  {
    if (!v5 || !CMMsl::AccessoryConfig::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = a2[1];
  if (a1[1])
  {
    if (!v6 || (PB::Data::operator==() & 1) == 0 && a1[1] | a2[1])
      return 0;
  }
  else if (v6)
  {
    return 0;
  }
  v7 = (unsigned __int8 *)a1[2];
  v8 = (unsigned __int8 **)a2[2];
  result = v8 == 0;
  if (!v7)
    return result;
  if (!v8)
    return 0;
  v10 = v7[23];
  if ((v10 & 0x80u) == 0)
    v11 = (unsigned __int8 *)v7[23];
  else
    v11 = (unsigned __int8 *)*((_QWORD *)v7 + 1);
  v12 = (unsigned __int8 *)*((unsigned __int8 *)v8 + 23);
  v13 = (char)v12;
  if ((char)v12 < 0)
    v12 = v8[1];
  if (v11 != v12)
    return 0;
  if (v13 >= 0)
    v14 = (unsigned __int8 *)a2[2];
  else
    v14 = *v8;
  if ((v10 & 0x80) != 0)
    return !memcmp(*(const void **)v7, v14, *((_QWORD *)v7 + 1));
  if (!v7[23])
    return 1;
  v15 = v10 - 1;
  do
  {
    v17 = *v7++;
    v16 = v17;
    v19 = *v14++;
    v18 = v19;
    v21 = v15-- != 0;
    result = v16 == v18;
  }
  while (v16 == v18 && v21);
  return result;
}

BOOL CMMsl::AccessoryConfig::operator==(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  unsigned __int8 *v6;
  unsigned __int8 **v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 **v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  int v18;
  unsigned __int8 *v19;
  _BOOL8 result;

  v4 = *(_BYTE *)(a1 + 32);
  v5 = *(_BYTE *)(a2 + 32);
  if ((v4 & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 2) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  v6 = *(unsigned __int8 **)(a1 + 16);
  v7 = *(unsigned __int8 ***)(a2 + 16);
  if (v6)
  {
    if (!v7)
      return 0;
    v8 = v6[23];
    if ((v8 & 0x80u) == 0)
      v9 = (unsigned __int8 *)v6[23];
    else
      v9 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
    v10 = (unsigned __int8 *)*((unsigned __int8 *)v7 + 23);
    v11 = (char)v10;
    if ((char)v10 < 0)
      v10 = v7[1];
    if (v9 != v10)
      return 0;
    if (v11 >= 0)
      v12 = *(unsigned __int8 **)(a2 + 16);
    else
      v12 = *v7;
    if ((v8 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v6, v12, *((_QWORD *)v6 + 1)))
        return 0;
    }
    else if (v6[23])
    {
      while (*v6 == *v12)
      {
        ++v6;
        ++v12;
        if (!--v8)
          goto LABEL_23;
      }
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
LABEL_23:
  v13 = *(unsigned __int8 **)(a1 + 8);
  v14 = *(unsigned __int8 ***)(a2 + 8);
  if (v13)
  {
    if (!v14)
      return 0;
    v15 = v13[23];
    if ((v15 & 0x80u) == 0)
      v16 = (unsigned __int8 *)v13[23];
    else
      v16 = (unsigned __int8 *)*((_QWORD *)v13 + 1);
    v17 = (unsigned __int8 *)*((unsigned __int8 *)v14 + 23);
    v18 = (char)v17;
    if ((char)v17 < 0)
      v17 = v14[1];
    if (v16 != v17)
      return 0;
    if (v18 >= 0)
      v19 = *(unsigned __int8 **)(a2 + 8);
    else
      v19 = *v14;
    if ((v15 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v13, v19, *((_QWORD *)v13 + 1)))
        return 0;
    }
    else if (v13[23])
    {
      while (*v13 == *v19)
      {
        ++v13;
        ++v19;
        if (!--v15)
          goto LABEL_40;
      }
      return 0;
    }
  }
  else if (v14)
  {
    return 0;
  }
LABEL_40:
  result = (v5 & 1) == 0;
  if ((v4 & 1) == 0)
    return result;
  return (v5 & 1) != 0 && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24);
}

unint64_t CMMsl::AccessoryAccelConfig::hash_value(CMMsl::AccessoryAccelConfig *this)
{
  CMMsl::AccessoryConfig *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = (CMMsl::AccessoryConfig *)*((_QWORD *)this + 3);
  if (v2)
    v3 = CMMsl::AccessoryConfig::hash_value(v2);
  else
    v3 = 0;
  if (*((_QWORD *)this + 1))
    v4 = PBHashBytes();
  else
    v4 = 0;
  v5 = *((_QWORD *)this + 2);
  if (v5)
    v5 = sub_242910D74(v5);
  return v4 ^ v3 ^ v5;
}

_QWORD *CMMsl::AccessoryAccelConfig::makeConfig(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[3])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135BFB0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = 0;
    *(_DWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[3];
    v1[3] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t CMMsl::AccessoryActivityAlseepConfidenceEpoch::AccessoryActivityAlseepConfidenceEpoch(uint64_t this)
{
  *(_QWORD *)this = &off_25135BF40;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135BF40;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::AccessoryActivityAlseepConfidenceEpoch::~AccessoryActivityAlseepConfidenceEpoch(CMMsl::AccessoryActivityAlseepConfidenceEpoch *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::AccessoryActivityAlseepConfidenceEpoch::AccessoryActivityAlseepConfidenceEpoch(uint64_t this, const CMMsl::AccessoryActivityAlseepConfidenceEpoch *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  char v5;
  int v6;
  int v7;
  int v8;
  char v9;

  *(_QWORD *)this = &off_25135BF40;
  *(_DWORD *)(this + 32) = 0;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_BYTE *)(this + 32) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 32) & 0x10) != 0)
  {
LABEL_5:
    v5 = *((_BYTE *)a2 + 28);
    v3 |= 0x10u;
    *(_BYTE *)(this + 32) = v3;
    *(_BYTE *)(this + 28) = v5;
    v2 = *((_BYTE *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *(_BYTE *)(this + 32) = v3;
    *(_DWORD *)(this + 16) = v6;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        goto LABEL_9;
      goto LABEL_13;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *(_BYTE *)(this + 32) = v3;
  *(_DWORD *)(this + 20) = v7;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      return this;
LABEL_14:
    v9 = *((_BYTE *)a2 + 29);
    *(_BYTE *)(this + 32) = v3 | 0x20;
    *(_BYTE *)(this + 29) = v9;
    return this;
  }
LABEL_13:
  v8 = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *(_BYTE *)(this + 32) = v3;
  *(_DWORD *)(this + 24) = v8;
  if ((*((_BYTE *)a2 + 32) & 0x20) != 0)
    goto LABEL_14;
  return this;
}

uint64_t CMMsl::AccessoryActivityAlseepConfidenceEpoch::operator=(uint64_t a1, const CMMsl::AccessoryActivityAlseepConfidenceEpoch *a2)
{
  int v3;
  uint64_t v4;
  int v5;
  _BYTE v7[8];
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  char v12;
  char v13;
  int v14;

  if ((const CMMsl::AccessoryActivityAlseepConfidenceEpoch *)a1 != a2)
  {
    CMMsl::AccessoryActivityAlseepConfidenceEpoch::AccessoryActivityAlseepConfidenceEpoch((uint64_t)v7, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v14;
    v14 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v8;
    v8 = v4;
    LOBYTE(v4) = *(_BYTE *)(a1 + 28);
    *(_BYTE *)(a1 + 28) = v12;
    v12 = v4;
    LODWORD(v4) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v9;
    v9 = v4;
    v5 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v10;
    v10 = v5;
    LODWORD(v4) = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v11;
    v11 = v4;
    LOBYTE(v4) = *(_BYTE *)(a1 + 29);
    *(_BYTE *)(a1 + 29) = v13;
    v13 = v4;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::AccessoryActivityAlseepConfidenceEpoch *a2, CMMsl::AccessoryActivityAlseepConfidenceEpoch *a3)
{
  int v3;
  uint64_t v4;
  float result;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LOBYTE(v4) = *((_BYTE *)this + 28);
  *((_BYTE *)this + 28) = *((_BYTE *)a2 + 28);
  *((_BYTE *)a2 + 28) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  result = *((float *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((float *)a2 + 5) = result;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LOBYTE(v4) = *((_BYTE *)this + 29);
  *((_BYTE *)this + 29) = *((_BYTE *)a2 + 29);
  *((_BYTE *)a2 + 29) = v4;
  return result;
}

float CMMsl::AccessoryActivityAlseepConfidenceEpoch::AccessoryActivityAlseepConfidenceEpoch(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135BF40;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 29) = *(_BYTE *)(a2 + 29);
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_25135BF40;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 29) = *(_BYTE *)(a2 + 29);
  return result;
}

uint64_t CMMsl::AccessoryActivityAlseepConfidenceEpoch::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  char v5;
  int v6;
  int v7;
  int v8;
  char v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  _QWORD v16[2];
  int v17;
  int v18;
  int v19;
  char v20;
  char v21;
  int v22;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_BYTE *)(a2 + 28);
    v6 = *(_DWORD *)(a2 + 16);
    v7 = *(_DWORD *)(a2 + 20);
    v8 = *(_DWORD *)(a2 + 24);
    v9 = *(_BYTE *)(a2 + 29);
    v10 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v3;
    v22 = v10;
    v11 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v16[0] = &off_25135BF40;
    v16[1] = v11;
    LOBYTE(v3) = *(_BYTE *)(a1 + 28);
    *(_BYTE *)(a1 + 28) = v5;
    v20 = v3;
    v12 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v6;
    v17 = v12;
    v13 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v7;
    v18 = v13;
    v14 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v8;
    v19 = v14;
    LOBYTE(v14) = *(_BYTE *)(a1 + 29);
    *(_BYTE *)(a1 + 29) = v9;
    v21 = v14;
    PB::Base::~Base((PB::Base *)v16);
  }
  return a1;
}

uint64_t CMMsl::AccessoryActivityAlseepConfidenceEpoch::formatText(CMMsl::AccessoryActivityAlseepConfidenceEpoch *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "asleep");
    v5 = *((_BYTE *)this + 32);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*((_BYTE *)this + 32) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "averageConfidence");
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "initialized");
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(a2, "sensorTime");
    if ((*((_BYTE *)this + 32) & 8) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "rawConfidence", *((float *)this + 5));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 1) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 8) != 0)
LABEL_7:
    PB::TextFormatter::format(a2, "sequenceNumber");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessoryActivityAlseepConfidenceEpoch::readFrom(CMMsl::AccessoryActivityAlseepConfidenceEpoch *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  int v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  int v41;
  BOOL v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_26;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_21;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_26:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 32) |= 1u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v43 = 0;
          v44 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v21)
            {
              v25 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_86;
            }
            v45 = v21++;
            v46 = *(_BYTE *)(v22 + v45);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v46 & 0x7F) << v43;
            if ((v46 & 0x80) == 0)
              break;
            v43 += 7;
            v14 = v44++ > 8;
            if (v14)
            {
              v25 = 0;
LABEL_85:
              v2 = v45 + 1;
              goto LABEL_86;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v25 = 0;
          goto LABEL_85;
        }
        v23 = 0;
        v24 = 0;
        v25 = 0;
        do
        {
          v2 = v21 + 1;
          *((_QWORD *)a2 + 1) = v21 + 1;
          v26 = *(_BYTE *)(v22 + v21);
          v25 |= (unint64_t)(v26 & 0x7F) << v23;
          if ((v26 & 0x80) == 0)
            goto LABEL_86;
          v23 += 7;
          v21 = v2;
          v14 = v24++ > 8;
        }
        while (!v14);
        v25 = 0;
LABEL_86:
        *((_QWORD *)this + 1) = v25;
        break;
      case 2u:
        *((_BYTE *)this + 32) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v28 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v27 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v28 = v27 != 0;
        }
        *((_BYTE *)this + 28) = v28;
        break;
      case 3u:
        *((_BYTE *)this + 32) |= 2u;
        v29 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v30 = *(_QWORD *)a2;
        if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
        {
          v47 = 0;
          v48 = 0;
          v33 = 0;
          if (v2 <= v29)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v29)
            {
              LODWORD(v33) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_91;
            }
            v49 = v29++;
            v50 = *(_BYTE *)(v30 + v49);
            *((_QWORD *)a2 + 1) = v29;
            v33 |= (unint64_t)(v50 & 0x7F) << v47;
            if ((v50 & 0x80) == 0)
              break;
            v47 += 7;
            v14 = v48++ > 8;
            if (v14)
            {
              LODWORD(v33) = 0;
LABEL_90:
              v2 = v49 + 1;
              goto LABEL_91;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v33) = 0;
          goto LABEL_90;
        }
        v31 = 0;
        v32 = 0;
        v33 = 0;
        do
        {
          v2 = v29 + 1;
          *((_QWORD *)a2 + 1) = v29 + 1;
          v34 = *(_BYTE *)(v30 + v29);
          v33 |= (unint64_t)(v34 & 0x7F) << v31;
          if ((v34 & 0x80) == 0)
            goto LABEL_91;
          v31 += 7;
          v29 = v2;
          v14 = v32++ > 8;
        }
        while (!v14);
        LODWORD(v33) = 0;
LABEL_91:
        *((_DWORD *)this + 4) = v33;
        break;
      case 4u:
        *((_BYTE *)this + 32) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 5u:
        *((_BYTE *)this + 32) |= 8u;
        v35 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v36 = *(_QWORD *)a2;
        if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
        {
          v51 = 0;
          v52 = 0;
          v39 = 0;
          if (v2 <= v35)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v35)
            {
              LODWORD(v39) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_96;
            }
            v53 = v35++;
            v54 = *(_BYTE *)(v36 + v53);
            *((_QWORD *)a2 + 1) = v35;
            v39 |= (unint64_t)(v54 & 0x7F) << v51;
            if ((v54 & 0x80) == 0)
              break;
            v51 += 7;
            v14 = v52++ > 8;
            if (v14)
            {
              LODWORD(v39) = 0;
LABEL_95:
              v2 = v53 + 1;
              goto LABEL_96;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v39) = 0;
          goto LABEL_95;
        }
        v37 = 0;
        v38 = 0;
        v39 = 0;
        do
        {
          v2 = v35 + 1;
          *((_QWORD *)a2 + 1) = v35 + 1;
          v40 = *(_BYTE *)(v36 + v35);
          v39 |= (unint64_t)(v40 & 0x7F) << v37;
          if ((v40 & 0x80) == 0)
            goto LABEL_96;
          v37 += 7;
          v35 = v2;
          v14 = v38++ > 8;
        }
        while (!v14);
        LODWORD(v39) = 0;
LABEL_96:
        *((_DWORD *)this + 6) = v39;
        break;
      case 6u:
        *((_BYTE *)this + 32) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v42 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v41 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v42 = v41 != 0;
        }
        *((_BYTE *)this + 29) = v42;
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::AccessoryActivityAlseepConfidenceEpoch::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(this + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      return this;
    return PB::Writer::write(a2);
  }
LABEL_12:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_BYTE *)(v3 + 32) & 0x20) != 0)
    return PB::Writer::write(a2);
  return this;
}

BOOL CMMsl::AccessoryActivityAlseepConfidenceEpoch::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 0x10) == 0 || *(unsigned __int8 *)(a1 + 28) != *(unsigned __int8 *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 8) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 32) & 0x20) == 0;
  if ((*(_BYTE *)(a1 + 32) & 0x20) != 0)
    return (*(_BYTE *)(a2 + 32) & 0x20) != 0 && *(unsigned __int8 *)(a1 + 29) == *(unsigned __int8 *)(a2 + 29);
  return v2;
}

uint64_t CMMsl::AccessoryActivityAlseepConfidenceEpoch::hash_value(CMMsl::AccessoryActivityAlseepConfidenceEpoch *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((*((_BYTE *)this + 32) & 1) != 0)
  {
    v1 = *((_QWORD *)this + 1);
    if ((*((_BYTE *)this + 32) & 0x10) != 0)
    {
LABEL_3:
      v2 = *((unsigned __int8 *)this + 28);
      if ((*((_BYTE *)this + 32) & 2) != 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else
  {
    v1 = 0;
    if ((*((_BYTE *)this + 32) & 0x10) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 32) & 2) != 0)
  {
LABEL_4:
    v3 = *((unsigned int *)this + 4);
    if ((*((_BYTE *)this + 32) & 4) != 0)
      goto LABEL_5;
LABEL_13:
    v5 = 0;
    if ((*((_BYTE *)this + 32) & 8) != 0)
      goto LABEL_8;
LABEL_14:
    v6 = 0;
    if ((*((_BYTE *)this + 32) & 0x20) != 0)
      goto LABEL_9;
LABEL_15:
    v7 = 0;
    return v2 ^ v1 ^ v3 ^ v5 ^ v6 ^ v7;
  }
LABEL_12:
  v3 = 0;
  if ((*((_BYTE *)this + 32) & 4) == 0)
    goto LABEL_13;
LABEL_5:
  v4 = *((float *)this + 5);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((*((_BYTE *)this + 32) & 8) == 0)
    goto LABEL_14;
LABEL_8:
  v6 = *((unsigned int *)this + 6);
  if ((*((_BYTE *)this + 32) & 0x20) == 0)
    goto LABEL_15;
LABEL_9:
  v7 = *((unsigned __int8 *)this + 29);
  return v2 ^ v1 ^ v3 ^ v5 ^ v6 ^ v7;
}

uint64_t CMMsl::AccessoryActivityStateUpdate::AccessoryActivityStateUpdate(uint64_t this)
{
  *(_QWORD *)this = &off_25135BF78;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135BF78;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

void CMMsl::AccessoryActivityStateUpdate::~AccessoryActivityStateUpdate(CMMsl::AccessoryActivityStateUpdate *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::AccessoryActivityStateUpdate::AccessoryActivityStateUpdate(uint64_t this, const CMMsl::AccessoryActivityStateUpdate *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;

  *(_QWORD *)this = &off_25135BF78;
  *(_DWORD *)(this + 28) = 0;
  v2 = *((_BYTE *)a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_BYTE *)(this + 28) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 28) & 2) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *(_BYTE *)(this + 28) = v3;
    *(_DWORD *)(this + 16) = v5;
    v2 = *((_BYTE *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0)
      return this;
LABEL_10:
    v7 = *((_DWORD *)a2 + 6);
    *(_BYTE *)(this + 28) = v3 | 8;
    *(_DWORD *)(this + 24) = v7;
    return this;
  }
  v6 = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *(_BYTE *)(this + 28) = v3;
  *(_DWORD *)(this + 20) = v6;
  if ((*((_BYTE *)a2 + 28) & 8) != 0)
    goto LABEL_10;
  return this;
}

uint64_t CMMsl::AccessoryActivityStateUpdate::operator=(uint64_t a1, const CMMsl::AccessoryActivityStateUpdate *a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  if ((const CMMsl::AccessoryActivityStateUpdate *)a1 != a2)
  {
    CMMsl::AccessoryActivityStateUpdate::AccessoryActivityStateUpdate((uint64_t)&v6, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v7;
    v7 = v3;
    v4 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v8;
    v8 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AccessoryActivityStateUpdate *a2, CMMsl::AccessoryActivityStateUpdate *a3)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(this + 28);
  *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  return this;
}

uint64_t CMMsl::AccessoryActivityStateUpdate::AccessoryActivityStateUpdate(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = &off_25135BF78;
  *(_DWORD *)(result + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  return result;
}

{
  *(_QWORD *)result = &off_25135BF78;
  *(_DWORD *)(result + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  return result;
}

uint64_t CMMsl::AccessoryActivityStateUpdate::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _QWORD v8[2];
  __int128 v9;

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_OWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 28) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v8[0] = &off_25135BF78;
    v8[1] = v5;
    v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v4;
    v9 = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::AccessoryActivityStateUpdate::formatText(CMMsl::AccessoryActivityStateUpdate *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "activity");
    v5 = *((_BYTE *)this + 28);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "sensorTime");
      if ((*((_BYTE *)this + 28) & 8) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "confidenceLevel");
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "sequenceNumber");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessoryActivityStateUpdate::readFrom(CMMsl::AccessoryActivityStateUpdate *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  char v43;
  char v44;
  unsigned int v45;
  unint64_t v46;
  char v47;
  char v48;
  unsigned int v49;
  unint64_t v50;
  char v51;
  char v52;
  unsigned int v53;
  unint64_t v54;
  char v55;
  char v56;
  unsigned int v57;
  unint64_t v58;
  char v59;

  v3 = *((_QWORD *)a2 + 1);
  v2 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 >= v2 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v3 > v2)
        v2 = v3;
      do
      {
        if (v2 == v3)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v3 + 1;
        v18 = *(_BYTE *)(v8 + v3);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_24;
        v15 += 7;
        v3 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v3 = *((_QWORD *)a2 + 1);
      v2 = *((_QWORD *)a2 + 2);
      goto LABEL_21;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v3 + 1;
      *((_QWORD *)a2 + 1) = v3 + 1;
      v13 = *(_BYTE *)(v8 + v3);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v3 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_24:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 28) |= 1u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v44 = 0;
          v45 = 0;
          v24 = 0;
          if (v2 <= v20)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v20)
            {
              v24 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_90;
            }
            v46 = v20++;
            v47 = *(_BYTE *)(v21 + v46);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v47 & 0x7F) << v44;
            if ((v47 & 0x80) == 0)
              break;
            v44 += 7;
            v14 = v45++ > 8;
            if (v14)
            {
              v24 = 0;
LABEL_89:
              v3 = v46 + 1;
              goto LABEL_90;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v24 = 0;
          goto LABEL_89;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v3 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_90;
          v22 += 7;
          v20 = v3;
          v14 = v23++ > 8;
        }
        while (!v14);
        v24 = 0;
LABEL_90:
        *((_QWORD *)this + 1) = v24;
        break;
      case 2u:
        *((_BYTE *)this + 28) |= 2u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v48 = 0;
          v49 = 0;
          v30 = 0;
          if (v2 <= v26)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_95;
            }
            v50 = v26++;
            v51 = *(_BYTE *)(v27 + v50);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v51 & 0x7F) << v48;
            if ((v51 & 0x80) == 0)
              break;
            v48 += 7;
            v14 = v49++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_94:
              v3 = v50 + 1;
              goto LABEL_95;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v30) = 0;
          goto LABEL_94;
        }
        v28 = 0;
        v29 = 0;
        v30 = 0;
        do
        {
          v3 = v26 + 1;
          *((_QWORD *)a2 + 1) = v26 + 1;
          v31 = *(_BYTE *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0)
            goto LABEL_95;
          v28 += 7;
          v26 = v3;
          v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_95:
        *((_DWORD *)this + 4) = v30;
        break;
      case 3u:
        *((_BYTE *)this + 28) |= 4u;
        v32 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v33 = *(_QWORD *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
        {
          v52 = 0;
          v53 = 0;
          v36 = 0;
          if (v2 <= v32)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v32)
            {
              LODWORD(v36) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_100;
            }
            v54 = v32++;
            v55 = *(_BYTE *)(v33 + v54);
            *((_QWORD *)a2 + 1) = v32;
            v36 |= (unint64_t)(v55 & 0x7F) << v52;
            if ((v55 & 0x80) == 0)
              break;
            v52 += 7;
            v14 = v53++ > 8;
            if (v14)
            {
              LODWORD(v36) = 0;
LABEL_99:
              v3 = v54 + 1;
              goto LABEL_100;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v36) = 0;
          goto LABEL_99;
        }
        v34 = 0;
        v35 = 0;
        v36 = 0;
        do
        {
          v3 = v32 + 1;
          *((_QWORD *)a2 + 1) = v32 + 1;
          v37 = *(_BYTE *)(v33 + v32);
          v36 |= (unint64_t)(v37 & 0x7F) << v34;
          if ((v37 & 0x80) == 0)
            goto LABEL_100;
          v34 += 7;
          v32 = v3;
          v14 = v35++ > 8;
        }
        while (!v14);
        LODWORD(v36) = 0;
LABEL_100:
        *((_DWORD *)this + 5) = v36;
        break;
      case 4u:
        *((_BYTE *)this + 28) |= 8u;
        v38 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v39 = *(_QWORD *)a2;
        if (v38 > 0xFFFFFFFFFFFFFFF5 || v38 + 10 > v2)
        {
          v56 = 0;
          v57 = 0;
          v42 = 0;
          if (v2 <= v38)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v38)
            {
              LODWORD(v42) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_105;
            }
            v58 = v38++;
            v59 = *(_BYTE *)(v39 + v58);
            *((_QWORD *)a2 + 1) = v38;
            v42 |= (unint64_t)(v59 & 0x7F) << v56;
            if ((v59 & 0x80) == 0)
              break;
            v56 += 7;
            v14 = v57++ > 8;
            if (v14)
            {
              LODWORD(v42) = 0;
LABEL_104:
              v3 = v58 + 1;
              goto LABEL_105;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v42) = 0;
          goto LABEL_104;
        }
        v40 = 0;
        v41 = 0;
        v42 = 0;
        do
        {
          v3 = v38 + 1;
          *((_QWORD *)a2 + 1) = v38 + 1;
          v43 = *(_BYTE *)(v39 + v38);
          v42 |= (unint64_t)(v43 & 0x7F) << v40;
          if ((v43 & 0x80) == 0)
            goto LABEL_105;
          v40 += 7;
          v38 = v3;
          v14 = v41++ > 8;
        }
        while (!v14);
        LODWORD(v42) = 0;
LABEL_105:
        *((_DWORD *)this + 6) = v42;
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v3 >= v2 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::AccessoryActivityStateUpdate::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 28);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_8:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_BYTE *)(v3 + 28) & 8) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

BOOL CMMsl::AccessoryActivityStateUpdate::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 28) & 8) == 0;
  if ((*(_BYTE *)(a1 + 28) & 8) != 0)
    return (*(_BYTE *)(a2 + 28) & 8) != 0 && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24);
  return v2;
}

uint64_t CMMsl::AccessoryActivityStateUpdate::hash_value(CMMsl::AccessoryActivityStateUpdate *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((*((_BYTE *)this + 28) & 1) != 0)
  {
    v1 = *((_QWORD *)this + 1);
    if ((*((_BYTE *)this + 28) & 2) != 0)
    {
LABEL_3:
      v2 = *((unsigned int *)this + 4);
      if ((*((_BYTE *)this + 28) & 4) != 0)
        goto LABEL_4;
LABEL_8:
      v3 = 0;
      if ((*((_BYTE *)this + 28) & 8) != 0)
        goto LABEL_5;
LABEL_9:
      v4 = 0;
      return v2 ^ v1 ^ v3 ^ v4;
    }
  }
  else
  {
    v1 = 0;
    if ((*((_BYTE *)this + 28) & 2) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 28) & 4) == 0)
    goto LABEL_8;
LABEL_4:
  v3 = *((unsigned int *)this + 5);
  if ((*((_BYTE *)this + 28) & 8) == 0)
    goto LABEL_9;
LABEL_5:
  v4 = *((unsigned int *)this + 6);
  return v2 ^ v1 ^ v3 ^ v4;
}

void CMMsl::AccessoryConfig::~AccessoryConfig(CMMsl::AccessoryConfig *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_25135BFB0;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    sub_242910C5C(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    sub_242910C5C(v3);
  PB::Base::~Base(this);
}

{
  CMMsl::AccessoryConfig::~AccessoryConfig(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::AccessoryConfig *CMMsl::AccessoryConfig::AccessoryConfig(CMMsl::AccessoryConfig *this, const CMMsl::AccessoryConfig *a2)
{
  uint64_t *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  __int128 v14;
  uint64_t v15;
  int v16;

  *(_QWORD *)this = &off_25135BFB0;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  if ((*((_BYTE *)a2 + 32) & 2) != 0)
  {
    v5 = *((_DWORD *)a2 + 7);
    *((_BYTE *)this + 32) = 2;
    *((_DWORD *)this + 7) = v5;
  }
  if (*((_QWORD *)a2 + 2))
  {
    v6 = operator new();
    v7 = v6;
    v8 = (__int128 *)*((_QWORD *)a2 + 2);
    if (*((char *)v8 + 23) < 0)
    {
      sub_242910CE8((_BYTE *)v6, *(void **)v8, *((_QWORD *)v8 + 1));
    }
    else
    {
      v9 = *v8;
      *(_QWORD *)(v6 + 16) = *((_QWORD *)v8 + 2);
      *(_OWORD *)v6 = v9;
    }
    v10 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v7;
    if (v10)
      sub_242910C5C(v10);
  }
  if (*((_QWORD *)a2 + 1))
  {
    v11 = operator new();
    v12 = v11;
    v13 = (__int128 *)*((_QWORD *)a2 + 1);
    if (*((char *)v13 + 23) < 0)
    {
      sub_242910CE8((_BYTE *)v11, *(void **)v13, *((_QWORD *)v13 + 1));
    }
    else
    {
      v14 = *v13;
      *(_QWORD *)(v11 + 16) = *((_QWORD *)v13 + 2);
      *(_OWORD *)v11 = v14;
    }
    v15 = *v4;
    *v4 = v12;
    if (v15)
      sub_242910C5C(v15);
  }
  if ((*((_BYTE *)a2 + 32) & 1) != 0)
  {
    v16 = *((_DWORD *)a2 + 6);
    *((_BYTE *)this + 32) |= 1u;
    *((_DWORD *)this + 6) = v16;
  }
  return this;
}

uint64_t CMMsl::AccessoryConfig::operator=(uint64_t a1, const CMMsl::AccessoryConfig *a2)
{
  int v3;
  __int128 v4;
  _BYTE v6[8];
  __int128 v7;
  uint64_t v8;
  int v9;

  if ((const CMMsl::AccessoryConfig *)a1 != a2)
  {
    CMMsl::AccessoryConfig::AccessoryConfig((CMMsl::AccessoryConfig *)v6, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v9;
    v9 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v4;
    *(_QWORD *)&v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v4;
    CMMsl::AccessoryConfig::~AccessoryConfig((CMMsl::AccessoryConfig *)v6);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::AccessoryConfig *a2, CMMsl::AccessoryConfig *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  double result;
  uint64_t v7;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  result = *((double *)a2 + 3);
  v7 = *((_QWORD *)this + 3);
  *((double *)this + 3) = result;
  *((_QWORD *)a2 + 3) = v7;
  return result;
}

uint64_t CMMsl::AccessoryConfig::AccessoryConfig(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)a1 = &off_25135BFB0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v5;
  if (v6)
    sub_242910C5C(v6);
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v8 = *v4;
  *v4 = v7;
  if (v8)
    sub_242910C5C(v8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t CMMsl::AccessoryConfig::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  _BYTE v6[8];
  __int128 v7;
  uint64_t v8;
  int v9;

  if (a1 != a2)
  {
    CMMsl::AccessoryConfig::AccessoryConfig((uint64_t)v6, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v9;
    v9 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v4;
    *(_QWORD *)&v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v4;
    CMMsl::AccessoryConfig::~AccessoryConfig((CMMsl::AccessoryConfig *)v6);
  }
  return a1;
}

uint64_t CMMsl::AccessoryConfig::formatText(CMMsl::AccessoryConfig *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format();
  if ((*((_BYTE *)this + 32) & 1) != 0)
    PB::TextFormatter::format(a2, "hardwareModel");
  if (*((_QWORD *)this + 2))
    PB::TextFormatter::format();
  if ((*((_BYTE *)this + 32) & 2) != 0)
    PB::TextFormatter::format(a2, "side");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessoryConfig::readFrom(CMMsl::AccessoryConfig *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      break;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 32) |= 2u;
        v20 = *((_QWORD *)a2 + 1);
        v21 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          do
          {
            v26 = v20 + 1;
            *((_QWORD *)a2 + 1) = v20 + 1;
            v27 = *(_BYTE *)(v22 + v20);
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if ((v27 & 0x80) == 0)
              goto LABEL_59;
            v23 += 7;
            v20 = v26;
            v14 = v24++ > 8;
          }
          while (!v14);
LABEL_48:
          LODWORD(v25) = 0;
          goto LABEL_59;
        }
        v39 = 0;
        v40 = 0;
        v25 = 0;
        if (v21 <= v20)
          v21 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v21 == v20)
          {
            LODWORD(v25) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v41 = v20 + 1;
            v42 = *(_BYTE *)(v22 + v20);
            *((_QWORD *)a2 + 1) = v41;
            v25 |= (unint64_t)(v42 & 0x7F) << v39;
            if (v42 < 0)
            {
              v39 += 7;
              v20 = v41;
              v14 = v40++ > 8;
              if (v14)
                goto LABEL_48;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v25) = 0;
          }
          break;
        }
LABEL_59:
        *((_DWORD *)this + 7) = v25;
        goto LABEL_64;
      case 2u:
        v28 = (_QWORD *)operator new();
        v28[1] = 0;
        v28[2] = 0;
        *v28 = 0;
        v29 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v28;
        if (v29)
          goto LABEL_33;
        goto LABEL_34;
      case 3u:
        v30 = (_QWORD *)operator new();
        v30[1] = 0;
        v30[2] = 0;
        *v30 = 0;
        v29 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v30;
        if (v29)
LABEL_33:
          sub_242910C5C(v29);
LABEL_34:
        PB::Reader::read();
        goto LABEL_64;
      case 4u:
        *((_BYTE *)this + 32) |= 1u;
        v31 = *((_QWORD *)a2 + 1);
        v32 = *((_QWORD *)a2 + 2);
        v33 = *(_QWORD *)a2;
        if (v31 <= 0xFFFFFFFFFFFFFFF5 && v31 + 10 <= v32)
        {
          v34 = 0;
          v35 = 0;
          v36 = 0;
          do
          {
            v37 = v31 + 1;
            *((_QWORD *)a2 + 1) = v31 + 1;
            v38 = *(_BYTE *)(v33 + v31);
            v36 |= (unint64_t)(v38 & 0x7F) << v34;
            if ((v38 & 0x80) == 0)
              goto LABEL_63;
            v34 += 7;
            v31 = v37;
            v14 = v35++ > 8;
          }
          while (!v14);
LABEL_55:
          LODWORD(v36) = 0;
          goto LABEL_63;
        }
        v43 = 0;
        v44 = 0;
        v36 = 0;
        if (v32 <= v31)
          v32 = *((_QWORD *)a2 + 1);
        break;
      default:
        goto LABEL_19;
    }
    while (1)
    {
      if (v32 == v31)
      {
        LODWORD(v36) = 0;
        *((_BYTE *)a2 + 24) = 1;
        goto LABEL_63;
      }
      v45 = v31 + 1;
      v46 = *(_BYTE *)(v33 + v31);
      *((_QWORD *)a2 + 1) = v45;
      v36 |= (unint64_t)(v46 & 0x7F) << v43;
      if ((v46 & 0x80) == 0)
        break;
      v43 += 7;
      v31 = v45;
      v14 = v44++ > 8;
      if (v14)
        goto LABEL_55;
    }
    if (*((_BYTE *)a2 + 24))
      LODWORD(v36) = 0;
LABEL_63:
    *((_DWORD *)this + 6) = v36;
LABEL_64:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v15 = 0;
  v16 = 0;
  v11 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v17 = v2 + 1;
    v18 = *(_BYTE *)(v8 + v2);
    *((_QWORD *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0)
      goto LABEL_21;
    v15 += 7;
    v2 = v17;
    v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  result = PB::Reader::skip(a2);
  if ((_DWORD)result)
    goto LABEL_64;
  return result;
}

uint64_t CMMsl::AccessoryConfig::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;

  v3 = this;
  if ((*(_BYTE *)(this + 32) & 2) != 0)
    this = PB::Writer::writeVarInt(a2);
  if (*(_QWORD *)(v3 + 16))
    this = PB::Writer::write();
  if (*(_QWORD *)(v3 + 8))
    this = PB::Writer::write();
  if ((*(_BYTE *)(v3 + 32) & 1) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

unint64_t CMMsl::AccessoryConfig::hash_value(CMMsl::AccessoryConfig *this)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = *((_BYTE *)this + 32);
  if ((v2 & 2) != 0)
    v3 = *((int *)this + 7);
  else
    v3 = 0;
  v4 = *((_QWORD *)this + 2);
  if (v4)
    v5 = sub_242910D74(v4);
  else
    v5 = 0;
  v6 = *((_QWORD *)this + 1);
  if (v6)
    v6 = sub_242910D74(v6);
  if ((v2 & 1) != 0)
    v7 = *((int *)this + 6);
  else
    v7 = 0;
  return v5 ^ v3 ^ v6 ^ v7;
}

uint64_t CMMsl::AccessoryDeviceMotion::AccessoryDeviceMotion(uint64_t this)
{
  *(_QWORD *)this = &off_25135BFE8;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135BFE8;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void CMMsl::AccessoryDeviceMotion::~AccessoryDeviceMotion(CMMsl::AccessoryDeviceMotion *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135BFE8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135BFE8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135BFE8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::AccessoryDeviceMotion *CMMsl::AccessoryDeviceMotion::AccessoryDeviceMotion(CMMsl::AccessoryDeviceMotion *this, const CMMsl::DeviceMotion **a2)
{
  CMMsl::DeviceMotion *v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  int v10;

  *(_QWORD *)this = &off_25135BFE8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  if (a2[1])
  {
    v4 = (CMMsl::DeviceMotion *)operator new();
    v5 = CMMsl::DeviceMotion::DeviceMotion(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v7;
    if (v6)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v6 + 8))(v6, v5);
  }
  v8 = *((_BYTE *)a2 + 24);
  if ((v8 & 1) != 0)
  {
    v9 = *((_DWORD *)a2 + 4);
    *((_BYTE *)this + 24) |= 1u;
    *((_DWORD *)this + 4) = v9;
    v8 = *((_BYTE *)a2 + 24);
  }
  if ((v8 & 2) != 0)
  {
    v10 = *((_DWORD *)a2 + 5);
    *((_BYTE *)this + 24) |= 2u;
    *((_DWORD *)this + 5) = v10;
  }
  return this;
}

uint64_t CMMsl::AccessoryDeviceMotion::operator=(uint64_t a1, const CMMsl::DeviceMotion **a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  void (**v7)(CMMsl::AccessoryDeviceMotion *__hidden);
  uint64_t v8;
  uint64_t v9;
  int v10;

  if ((const CMMsl::DeviceMotion **)a1 != a2)
  {
    CMMsl::AccessoryDeviceMotion::AccessoryDeviceMotion((CMMsl::AccessoryDeviceMotion *)&v7, a2);
    v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v8;
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v9;
    v9 = v5;
    v7 = &off_25135BFE8;
    v8 = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AccessoryDeviceMotion *a2, CMMsl::AccessoryDeviceMotion *a3)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  return this;
}

uint64_t CMMsl::AccessoryDeviceMotion::AccessoryDeviceMotion(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_25135BFE8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return a1;
}

uint64_t CMMsl::AccessoryDeviceMotion::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];
  int v10;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 24);
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v6 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 24) = v3;
    v7 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v6;
    v9[2] = v7;
    v9[0] = &off_25135BFE8;
    v9[1] = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::AccessoryDeviceMotion::formatText(CMMsl::AccessoryDeviceMotion *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  char v6;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "dm");
  v6 = *((_BYTE *)this + 24);
  if ((v6 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "location");
    v6 = *((_BYTE *)this + 24);
  }
  if ((v6 & 2) != 0)
    PB::TextFormatter::format(a2, "sequenceNumber");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessoryDeviceMotion::readFrom(CMMsl::AccessoryDeviceMotion *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  unint64_t v42;
  char v43;
  char v44;
  unsigned int v45;
  unint64_t v46;
  char v47;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_25:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v21 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((_BYTE *)this + 24) |= 2u;
        v24 = *((_QWORD *)a2 + 1);
        v25 = *((_QWORD *)a2 + 2);
        v26 = *(_QWORD *)a2;
        if (v24 > 0xFFFFFFFFFFFFFFF5 || v24 + 10 > v25)
        {
          v40 = 0;
          v41 = 0;
          v29 = 0;
          if (v25 <= v24)
            v25 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v25 == v24)
            {
              LODWORD(v29) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_66;
            }
            v42 = v24 + 1;
            v43 = *(_BYTE *)(v26 + v24);
            *((_QWORD *)a2 + 1) = v42;
            v29 |= (unint64_t)(v43 & 0x7F) << v40;
            if ((v43 & 0x80) == 0)
              break;
            v40 += 7;
            v24 = v42;
            v14 = v41++ > 8;
            if (v14)
            {
LABEL_54:
              LODWORD(v29) = 0;
              goto LABEL_66;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v29) = 0;
        }
        else
        {
          v27 = 0;
          v28 = 0;
          v29 = 0;
          while (1)
          {
            v30 = v24 + 1;
            *((_QWORD *)a2 + 1) = v24 + 1;
            v31 = *(_BYTE *)(v26 + v24);
            v29 |= (unint64_t)(v31 & 0x7F) << v27;
            if ((v31 & 0x80) == 0)
              break;
            v27 += 7;
            v24 = v30;
            v14 = v28++ > 8;
            if (v14)
              goto LABEL_54;
          }
        }
LABEL_66:
        *((_DWORD *)this + 5) = v29;
      }
      else if ((_DWORD)v21 == 2)
      {
        *((_BYTE *)this + 24) |= 1u;
        v32 = *((_QWORD *)a2 + 1);
        v33 = *((_QWORD *)a2 + 2);
        v34 = *(_QWORD *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v33)
        {
          v44 = 0;
          v45 = 0;
          v37 = 0;
          if (v33 <= v32)
            v33 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v33 == v32)
            {
              LODWORD(v37) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_69;
            }
            v46 = v32 + 1;
            v47 = *(_BYTE *)(v34 + v32);
            *((_QWORD *)a2 + 1) = v46;
            v37 |= (unint64_t)(v47 & 0x7F) << v44;
            if ((v47 & 0x80) == 0)
              break;
            v44 += 7;
            v32 = v46;
            v14 = v45++ > 8;
            if (v14)
            {
LABEL_61:
              LODWORD(v37) = 0;
              goto LABEL_69;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v37) = 0;
        }
        else
        {
          v35 = 0;
          v36 = 0;
          v37 = 0;
          while (1)
          {
            v38 = v32 + 1;
            *((_QWORD *)a2 + 1) = v32 + 1;
            v39 = *(_BYTE *)(v34 + v32);
            v37 |= (unint64_t)(v39 & 0x7F) << v35;
            if ((v39 & 0x80) == 0)
              break;
            v35 += 7;
            v32 = v38;
            v14 = v36++ > 8;
            if (v14)
              goto LABEL_61;
          }
        }
LABEL_69:
        *((_DWORD *)this + 4) = v37;
      }
      else if ((_DWORD)v21 == 1)
      {
        v22 = (_DWORD *)operator new();
        *(_QWORD *)v22 = &off_25135D0C0;
        v22[31] = 0;
        v23 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v22;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
          v22 = (_DWORD *)*((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v22 + 16))(v22, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_19:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_25;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_19;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::DeviceMotion::DeviceMotion(uint64_t this)
{
  *(_QWORD *)this = &off_25135D0C0;
  *(_DWORD *)(this + 124) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135D0C0;
  *(_DWORD *)(this + 124) = 0;
  return this;
}

uint64_t CMMsl::AccessoryDeviceMotion::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  char v5;

  v3 = this;
  v4 = *(const PB::Base **)(this + 8);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = *(_BYTE *)(v3 + 24);
  if ((v5 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v5 = *(_BYTE *)(v3 + 24);
  }
  if ((v5 & 2) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

BOOL CMMsl::AccessoryDeviceMotion::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !CMMsl::DeviceMotion::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    return 0;
  }
  result = (*(_BYTE *)(a2 + 24) & 2) == 0;
  if ((*(_BYTE *)(a1 + 24) & 2) == 0)
    return result;
  return (*(_BYTE *)(a2 + 24) & 2) != 0 && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
}

BOOL CMMsl::DeviceMotion::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 124);
  v3 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(_DWORD *)(a1 + 92) != *(_DWORD *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(_DWORD *)(a1 + 112) != *(_DWORD *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(unsigned __int8 *)(a1 + 120) != *(unsigned __int8 *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x400000) == 0;
  if ((v2 & 0x400000) != 0)
    return (v3 & 0x400000) != 0 && *(float *)(a1 + 116) == *(float *)(a2 + 116);
  return v4;
}

unint64_t CMMsl::AccessoryDeviceMotion::hash_value(CMMsl::AccessoryDeviceMotion *this)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    v2 = CMMsl::DeviceMotion::hash_value((CMMsl::DeviceMotion *)v2);
  if ((*((_BYTE *)this + 24) & 1) != 0)
  {
    v3 = *((unsigned int *)this + 4);
    if ((*((_BYTE *)this + 24) & 2) != 0)
      goto LABEL_5;
LABEL_7:
    v4 = 0;
    return v3 ^ v2 ^ v4;
  }
  v3 = 0;
  if ((*((_BYTE *)this + 24) & 2) == 0)
    goto LABEL_7;
LABEL_5:
  v4 = *((unsigned int *)this + 5);
  return v3 ^ v2 ^ v4;
}

_QWORD *CMMsl::AccessoryDeviceMotion::makeDm(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135D0C0;
    *(_DWORD *)(v2 + 124) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

double CMMsl::AccessoryDeviceMotionConfig::AccessoryDeviceMotionConfig(CMMsl::AccessoryDeviceMotionConfig *this)
{
  double result;

  *(_QWORD *)this = &off_25135C020;
  *((_DWORD *)this + 11) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_25135C020;
  *((_DWORD *)this + 11) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

void CMMsl::AccessoryDeviceMotionConfig::~AccessoryDeviceMotionConfig(CMMsl::AccessoryDeviceMotionConfig *this)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = &off_25135C020;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::AccessoryDeviceMotionConfig::~AccessoryDeviceMotionConfig(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::AccessoryDeviceMotionConfig *CMMsl::AccessoryDeviceMotionConfig::AccessoryDeviceMotionConfig(CMMsl::AccessoryDeviceMotionConfig *this, const CMMsl::AccessoryDeviceMotionConfig *a2)
{
  _QWORD *v4;
  CMMsl::AccessoryConfig *v5;
  CMMsl::AccessoryConfig *v6;
  uint64_t v7;
  char v8;

  *(_QWORD *)this = &off_25135C020;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (_QWORD *)((char *)this + 8);
  *((_DWORD *)this + 11) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (*((_QWORD *)a2 + 4))
  {
    v5 = (CMMsl::AccessoryConfig *)operator new();
    v6 = CMMsl::AccessoryConfig::AccessoryConfig(v5, *((const CMMsl::AccessoryConfig **)a2 + 4));
    v7 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if ((*((_BYTE *)a2 + 44) & 1) != 0)
  {
    v8 = *((_BYTE *)a2 + 40);
    *((_BYTE *)this + 44) |= 1u;
    *((_BYTE *)this + 40) = v8;
  }
  if (this != a2)
    sub_242911380(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  return this;
}

uint64_t CMMsl::AccessoryDeviceMotionConfig::operator=(uint64_t a1, const CMMsl::AccessoryDeviceMotionConfig *a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  char v10;
  int v11;

  if ((const CMMsl::AccessoryDeviceMotionConfig *)a1 != a2)
  {
    CMMsl::AccessoryDeviceMotionConfig::AccessoryDeviceMotionConfig((CMMsl::AccessoryDeviceMotionConfig *)&v7, a2);
    v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v11;
    v11 = v3;
    LOBYTE(v3) = *(_BYTE *)(a1 + 40);
    *(_BYTE *)(a1 + 40) = v10;
    v10 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v4;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v9 = v5;
    CMMsl::AccessoryDeviceMotionConfig::~AccessoryDeviceMotionConfig((CMMsl::AccessoryDeviceMotionConfig *)&v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AccessoryDeviceMotionConfig *a2, CMMsl::AccessoryDeviceMotionConfig *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_DWORD *)(this + 44);
  *(_DWORD *)(this + 44) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  v4 = *(_QWORD *)(this + 32);
  *(_QWORD *)(this + 32) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  LOBYTE(v4) = *(_BYTE *)(this + 40);
  *(_BYTE *)(this + 40) = *((_BYTE *)a2 + 40);
  *((_BYTE *)a2 + 40) = v4;
  v5 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  return this;
}

uint64_t CMMsl::AccessoryDeviceMotionConfig::AccessoryDeviceMotionConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_25135C020;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  sub_242911330(v4, (__n128 *)(a2 + 8));
  return a1;
}

uint64_t CMMsl::AccessoryDeviceMotionConfig::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  char v10;
  int v11;

  if (a1 != a2)
  {
    CMMsl::AccessoryDeviceMotionConfig::AccessoryDeviceMotionConfig((uint64_t)&v7, a2);
    v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v11;
    v11 = v3;
    LOBYTE(v3) = *(_BYTE *)(a1 + 40);
    *(_BYTE *)(a1 + 40) = v10;
    v10 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v4;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v9 = v5;
    CMMsl::AccessoryDeviceMotionConfig::~AccessoryDeviceMotionConfig((CMMsl::AccessoryDeviceMotionConfig *)&v7);
  }
  return a1;
}

uint64_t CMMsl::AccessoryDeviceMotionConfig::formatText(CMMsl::AccessoryDeviceMotionConfig *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  float *v6;
  float *v7;
  float v8;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 4);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "config");
  v6 = (float *)*((_QWORD *)this + 1);
  v7 = (float *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(a2, "headToHeadsetTransformation", v8);
  }
  if ((*((_BYTE *)this + 44) & 1) != 0)
    PB::TextFormatter::format(a2, "isH2HValid");
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::AccessoryDeviceMotionConfig::readFrom(CMMsl::AccessoryDeviceMotionConfig *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  _DWORD *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  BOOL v39;
  unint64_t v40;
  char *v41;
  _DWORD *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  int v50;
  unint64_t v51;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_21;
          v15 += 7;
          v2 = v17;
          v14 = v16++ > 8;
          if (v14)
            goto LABEL_19;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_21:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v19 = v11 >> 3;
      if ((v11 >> 3) == 3)
        break;
      if ((_DWORD)v19 == 2)
      {
        *((_BYTE *)this + 44) |= 1u;
        v36 = *((_QWORD *)a2 + 1);
        if (v36 >= *((_QWORD *)a2 + 2))
        {
          v39 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v37 = v36 + 1;
          v38 = *(unsigned __int8 *)(*(_QWORD *)a2 + v36);
          *((_QWORD *)a2 + 1) = v37;
          v39 = v38 != 0;
        }
        *((_BYTE *)this + 40) = v39;
        goto LABEL_79;
      }
      if ((_DWORD)v19 == 1)
      {
        v20 = operator new();
        *(_QWORD *)v20 = &off_25135BFB0;
        *(_QWORD *)(v20 + 8) = 0;
        *(_QWORD *)(v20 + 16) = 0;
        *(_QWORD *)(v20 + 24) = 0;
        *(_DWORD *)(v20 + 32) = 0;
        v21 = *((_QWORD *)this + 4);
        *((_QWORD *)this + 4) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *((_QWORD *)this + 4);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, a2) & 1) == 0)
        {
          return 0;
        }
LABEL_29:
        PB::Reader::recallMark();
        goto LABEL_79;
      }
LABEL_19:
      if ((PB::Reader::skip(a2) & 1) == 0)
        return 0;
LABEL_79:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    if ((v11 & 7) != 2)
    {
      v41 = (char *)*((_QWORD *)this + 2);
      v40 = *((_QWORD *)this + 3);
      if ((unint64_t)v41 >= v40)
      {
        v43 = (char *)*((_QWORD *)this + 1);
        v44 = (v41 - v43) >> 2;
        v45 = v44 + 1;
        if ((unint64_t)(v44 + 1) >> 62)
LABEL_86:
          sub_242729A44();
        v46 = v40 - (_QWORD)v43;
        if (v46 >> 1 > v45)
          v45 = v46 >> 1;
        if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL)
          v47 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v47 = v45;
        if (v47)
        {
          v47 = (unint64_t)sub_2429114B8(v47);
          v43 = (char *)*((_QWORD *)this + 1);
          v41 = (char *)*((_QWORD *)this + 2);
        }
        else
        {
          v48 = 0;
        }
        v49 = (_DWORD *)(v47 + 4 * v44);
        *v49 = 0;
        v42 = v49 + 1;
        while (v41 != v43)
        {
          v50 = *((_DWORD *)v41 - 1);
          v41 -= 4;
          *--v49 = v50;
        }
        *((_QWORD *)this + 1) = v49;
        *((_QWORD *)this + 2) = v42;
        *((_QWORD *)this + 3) = v47 + 4 * v48;
        if (v43)
          operator delete(v43);
      }
      else
      {
        *(_DWORD *)v41 = 0;
        v42 = v41 + 4;
      }
      *((_QWORD *)this + 2) = v42;
      v51 = *((_QWORD *)a2 + 1);
      if (v51 <= 0xFFFFFFFFFFFFFFFBLL && v51 + 4 <= *((_QWORD *)a2 + 2))
      {
        *(v42 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v51);
        *((_QWORD *)a2 + 1) += 4;
      }
      else
      {
        *((_BYTE *)a2 + 24) = 1;
      }
      goto LABEL_79;
    }
    if ((PB::Reader::placeMark() & 1) != 0)
      return 0;
    v22 = *((_QWORD *)a2 + 1);
    v23 = *((_QWORD *)a2 + 2);
    while (v22 < v23 && !*((_BYTE *)a2 + 24))
    {
      v25 = (char *)*((_QWORD *)this + 2);
      v24 = *((_QWORD *)this + 3);
      if ((unint64_t)v25 >= v24)
      {
        v27 = (char *)*((_QWORD *)this + 1);
        v28 = (v25 - v27) >> 2;
        v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 62)
          goto LABEL_86;
        v30 = v24 - (_QWORD)v27;
        if (v30 >> 1 > v29)
          v29 = v30 >> 1;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
          v31 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v31 = v29;
        if (v31)
        {
          v31 = (unint64_t)sub_2429114B8(v31);
          v27 = (char *)*((_QWORD *)this + 1);
          v25 = (char *)*((_QWORD *)this + 2);
        }
        else
        {
          v32 = 0;
        }
        v33 = (_DWORD *)(v31 + 4 * v28);
        *v33 = 0;
        v26 = v33 + 1;
        while (v25 != v27)
        {
          v34 = *((_DWORD *)v25 - 1);
          v25 -= 4;
          *--v33 = v34;
        }
        *((_QWORD *)this + 1) = v33;
        *((_QWORD *)this + 2) = v26;
        *((_QWORD *)this + 3) = v31 + 4 * v32;
        if (v27)
          operator delete(v27);
      }
      else
      {
        *(_DWORD *)v25 = 0;
        v26 = v25 + 4;
      }
      *((_QWORD *)this + 2) = v26;
      v35 = *((_QWORD *)a2 + 1);
      if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((_QWORD *)a2 + 2))
      {
        *((_BYTE *)a2 + 24) = 1;
        goto LABEL_29;
      }
      *(v26 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v35);
      v23 = *((_QWORD *)a2 + 2);
      v22 = *((_QWORD *)a2 + 1) + 4;
      *((_QWORD *)a2 + 1) = v22;
    }
    goto LABEL_29;
  }
  return v4 == 0;
}

uint64_t CMMsl::AccessoryDeviceMotionConfig::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  float *v5;
  float *v6;
  float v7;

  v3 = this;
  v4 = *(const PB::Base **)(this + 32);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  if ((*(_BYTE *)(v3 + 44) & 1) != 0)
    this = PB::Writer::write(a2);
  v6 = *(float **)(v3 + 8);
  v5 = *(float **)(v3 + 16);
  while (v6 != v5)
  {
    v7 = *v6++;
    this = PB::Writer::write(a2, v7);
  }
  return this;
}

BOOL CMMsl::AccessoryDeviceMotionConfig::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float v10;
  _BOOL8 result;
  BOOL v12;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a2 + 32);
  if (v4)
  {
    if (!v5 || !CMMsl::AccessoryConfig::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 1) == 0 || *(unsigned __int8 *)(a1 + 40) != *(unsigned __int8 *)(a2 + 40))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 1) != 0)
  {
    return 0;
  }
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(float **)(a2 + 8);
  if (v6 - v7 != *(_QWORD *)(a2 + 16) - (_QWORD)v8)
    return 0;
  if (v7 == v6)
    return 1;
  v9 = v7 + 4;
  do
  {
    v10 = *v8++;
    result = *(float *)(v9 - 4) == v10;
    v12 = *(float *)(v9 - 4) != v10 || v9 == v6;
    v9 += 4;
  }
  while (!v12);
  return result;
}

unint64_t CMMsl::AccessoryDeviceMotionConfig::hash_value(CMMsl::AccessoryDeviceMotionConfig *this)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 4);
  if (v2)
    v2 = CMMsl::AccessoryConfig::hash_value((CMMsl::AccessoryConfig *)v2);
  if ((*((_BYTE *)this + 44) & 1) != 0)
    v3 = *((unsigned __int8 *)this + 40);
  else
    v3 = 0;
  return v3 ^ v2 ^ PBHashBytes();
}

_QWORD *CMMsl::AccessoryDeviceMotionConfig::makeConfig(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[4])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135BFB0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = 0;
    *(_DWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[4];
    v1[4] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t CMMsl::AccessoryGyro::AccessoryGyro(uint64_t this)
{
  *(_QWORD *)this = &off_25135C058;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135C058;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

void CMMsl::AccessoryGyro::~AccessoryGyro(CMMsl::AccessoryGyro *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135C058;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135C058;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135C058;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::AccessoryGyro *CMMsl::AccessoryGyro::AccessoryGyro(CMMsl::AccessoryGyro *this, const CMMsl::Gyro **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  const CMMsl::Gyro *v8;
  int v10;
  int v11;
  int v12;

  *(_QWORD *)this = &off_25135C058;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 9) = 0;
  if (a2[1])
  {
    v4 = operator new();
    v5 = CMMsl::Gyro::Gyro(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  v7 = *((_BYTE *)a2 + 36);
  if ((v7 & 2) != 0)
  {
    v10 = *((_DWORD *)a2 + 6);
    *((_BYTE *)this + 36) |= 2u;
    *((_DWORD *)this + 6) = v10;
    v7 = *((_BYTE *)a2 + 36);
    if ((v7 & 4) == 0)
    {
LABEL_6:
      if ((v7 & 8) == 0)
        goto LABEL_7;
LABEL_12:
      v12 = *((_DWORD *)a2 + 8);
      *((_BYTE *)this + 36) |= 8u;
      *((_DWORD *)this + 8) = v12;
      if ((*((_BYTE *)a2 + 36) & 1) == 0)
        return this;
      goto LABEL_8;
    }
  }
  else if ((*((_BYTE *)a2 + 36) & 4) == 0)
  {
    goto LABEL_6;
  }
  v11 = *((_DWORD *)a2 + 7);
  *((_BYTE *)this + 36) |= 4u;
  *((_DWORD *)this + 7) = v11;
  v7 = *((_BYTE *)a2 + 36);
  if ((v7 & 8) != 0)
    goto LABEL_12;
LABEL_7:
  if ((v7 & 1) != 0)
  {
LABEL_8:
    v8 = a2[2];
    *((_BYTE *)this + 36) |= 1u;
    *((_QWORD *)this + 2) = v8;
  }
  return this;
}

uint64_t CMMsl::AccessoryGyro::operator=(uint64_t a1, const CMMsl::Gyro **a2)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (**v10)(CMMsl::AccessoryGyro *__hidden);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;

  if ((const CMMsl::Gyro **)a1 != a2)
  {
    CMMsl::AccessoryGyro::AccessoryGyro((CMMsl::AccessoryGyro *)&v10, a2);
    v3 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v15;
    v15 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v13;
    v13 = v4;
    v5 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v14;
    v14 = v5;
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 16);
    v8 = v12;
    *(_QWORD *)(a1 + 8) = v11;
    *(_QWORD *)(a1 + 16) = v8;
    v11 = 0;
    v12 = v7;
    v10 = &off_25135C058;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::AccessoryGyro *a2, CMMsl::AccessoryGyro *a3)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float result;

  v3 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v3;
  v4 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  v5 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v5;
  v6 = *((_QWORD *)this + 1);
  v7 = *((_QWORD *)this + 2);
  v8 = *((_QWORD *)a2 + 2);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)this + 2) = v8;
  result = *((float *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((float *)a2 + 8) = result;
  *((_QWORD *)a2 + 1) = v6;
  *((_QWORD *)a2 + 2) = v7;
  return result;
}

uint64_t CMMsl::AccessoryGyro::AccessoryGyro(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_25135C058;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t CMMsl::AccessoryGyro::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[4];
  int v13;
  int v14;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a2 + 36) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 8) = 0;
    v6 = *(_DWORD *)(a2 + 32);
    v14 = *(_DWORD *)(a1 + 36);
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v4;
    v9 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 36) = v3;
    v10 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v9;
    v12[3] = v10;
    LODWORD(v9) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v6;
    v13 = v9;
    *(_QWORD *)(a1 + 16) = v5;
    v12[1] = 0;
    v12[2] = v8;
    v12[0] = &off_25135C058;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    PB::Base::~Base((PB::Base *)v12);
  }
  return a1;
}

uint64_t CMMsl::AccessoryGyro::formatText(CMMsl::AccessoryGyro *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  char v6;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "gyro");
  v6 = *((_BYTE *)this + 36);
  if ((v6 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "location");
    v6 = *((_BYTE *)this + 36);
    if ((v6 & 1) == 0)
    {
LABEL_5:
      if ((v6 & 4) == 0)
        goto LABEL_6;
LABEL_11:
      PB::TextFormatter::format(a2, "sequenceNumber");
      if ((*((_BYTE *)this + 36) & 8) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_7;
    }
  }
  else if ((*((_BYTE *)this + 36) & 1) == 0)
  {
    goto LABEL_5;
  }
  PB::TextFormatter::format(a2, "sensorTime");
  v6 = *((_BYTE *)this + 36);
  if ((v6 & 4) != 0)
    goto LABEL_11;
LABEL_6:
  if ((v6 & 8) != 0)
LABEL_7:
    PB::TextFormatter::format(a2, "temp", *((float *)this + 8));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessoryGyro::readFrom(CMMsl::AccessoryGyro *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  _DWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  char v48;
  unsigned int v49;
  unint64_t v50;
  char v51;
  char v52;
  unsigned int v53;
  unint64_t v54;
  char v55;
  char v56;
  unsigned int v57;
  unint64_t v58;
  char v59;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      break;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_25:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        v21 = (_DWORD *)operator new();
        *(_QWORD *)v21 = &off_25135DC90;
        v21[11] = 0;
        v22 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v21;
        if (v22)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          v21 = (_DWORD *)*((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v21 + 16))(v21, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
LABEL_20:
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        v4 = *((unsigned __int8 *)a2 + 24);
        if (v2 >= v3 || v4 != 0)
          return v4 == 0;
        break;
      case 2u:
        *((_BYTE *)this + 36) |= 2u;
        v23 = *((_QWORD *)a2 + 1);
        v24 = *((_QWORD *)a2 + 2);
        v25 = *(_QWORD *)a2;
        if (v23 <= 0xFFFFFFFFFFFFFFF5 && v23 + 10 <= v24)
        {
          v26 = 0;
          v27 = 0;
          v28 = 0;
          do
          {
            v29 = v23 + 1;
            *((_QWORD *)a2 + 1) = v23 + 1;
            v30 = *(_BYTE *)(v25 + v23);
            v28 |= (unint64_t)(v30 & 0x7F) << v26;
            if ((v30 & 0x80) == 0)
              goto LABEL_83;
            v26 += 7;
            v23 = v29;
            v14 = v27++ > 8;
          }
          while (!v14);
LABEL_62:
          LODWORD(v28) = 0;
          goto LABEL_83;
        }
        v48 = 0;
        v49 = 0;
        v28 = 0;
        if (v24 <= v23)
          v24 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v24 == v23)
          {
            LODWORD(v28) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v50 = v23 + 1;
            v51 = *(_BYTE *)(v25 + v23);
            *((_QWORD *)a2 + 1) = v50;
            v28 |= (unint64_t)(v51 & 0x7F) << v48;
            if (v51 < 0)
            {
              v48 += 7;
              v23 = v50;
              v14 = v49++ > 8;
              if (v14)
                goto LABEL_62;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v28) = 0;
          }
          break;
        }
LABEL_83:
        *((_DWORD *)this + 6) = v28;
        goto LABEL_20;
      case 3u:
        *((_BYTE *)this + 36) |= 4u;
        v31 = *((_QWORD *)a2 + 1);
        v32 = *((_QWORD *)a2 + 2);
        v33 = *(_QWORD *)a2;
        if (v31 <= 0xFFFFFFFFFFFFFFF5 && v31 + 10 <= v32)
        {
          v34 = 0;
          v35 = 0;
          v36 = 0;
          do
          {
            v37 = v31 + 1;
            *((_QWORD *)a2 + 1) = v31 + 1;
            v38 = *(_BYTE *)(v33 + v31);
            v36 |= (unint64_t)(v38 & 0x7F) << v34;
            if ((v38 & 0x80) == 0)
              goto LABEL_86;
            v34 += 7;
            v31 = v37;
            v14 = v35++ > 8;
          }
          while (!v14);
LABEL_69:
          LODWORD(v36) = 0;
          goto LABEL_86;
        }
        v52 = 0;
        v53 = 0;
        v36 = 0;
        if (v32 <= v31)
          v32 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v32 == v31)
          {
            LODWORD(v36) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v54 = v31 + 1;
            v55 = *(_BYTE *)(v33 + v31);
            *((_QWORD *)a2 + 1) = v54;
            v36 |= (unint64_t)(v55 & 0x7F) << v52;
            if (v55 < 0)
            {
              v52 += 7;
              v31 = v54;
              v14 = v53++ > 8;
              if (v14)
                goto LABEL_69;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v36) = 0;
          }
          break;
        }
LABEL_86:
        *((_DWORD *)this + 7) = v36;
        goto LABEL_20;
      case 4u:
        *((_BYTE *)this + 36) |= 8u;
        v39 = *((_QWORD *)a2 + 1);
        if (v39 <= 0xFFFFFFFFFFFFFFFBLL && v39 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v39);
          *((_QWORD *)a2 + 1) += 4;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
        goto LABEL_20;
      case 5u:
        *((_BYTE *)this + 36) |= 1u;
        v40 = *((_QWORD *)a2 + 1);
        v41 = *((_QWORD *)a2 + 2);
        v42 = *(_QWORD *)a2;
        if (v40 <= 0xFFFFFFFFFFFFFFF5 && v40 + 10 <= v41)
        {
          v43 = 0;
          v44 = 0;
          v45 = 0;
          do
          {
            v46 = v40 + 1;
            *((_QWORD *)a2 + 1) = v40 + 1;
            v47 = *(_BYTE *)(v42 + v40);
            v45 |= (unint64_t)(v47 & 0x7F) << v43;
            if ((v47 & 0x80) == 0)
              goto LABEL_89;
            v43 += 7;
            v40 = v46;
            v14 = v44++ > 8;
          }
          while (!v14);
LABEL_76:
          v45 = 0;
          goto LABEL_89;
        }
        v56 = 0;
        v57 = 0;
        v45 = 0;
        if (v41 <= v40)
          v41 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v41 == v40)
          {
            v45 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v58 = v40 + 1;
            v59 = *(_BYTE *)(v42 + v40);
            *((_QWORD *)a2 + 1) = v58;
            v45 |= (unint64_t)(v59 & 0x7F) << v56;
            if (v59 < 0)
            {
              v56 += 7;
              v40 = v58;
              v14 = v57++ > 8;
              if (v14)
                goto LABEL_76;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v45 = 0;
          }
          break;
        }
LABEL_89:
        *((_QWORD *)this + 2) = v45;
        goto LABEL_20;
      default:
        goto LABEL_19;
    }
  }
  v15 = 0;
  v16 = 0;
  v11 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v17 = v2 + 1;
    v18 = *(_BYTE *)(v8 + v2);
    *((_QWORD *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0)
      goto LABEL_25;
    v15 += 7;
    v2 = v17;
    v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  result = PB::Reader::skip(a2);
  if ((_DWORD)result)
    goto LABEL_20;
  return result;
}

uint64_t CMMsl::Gyro::Gyro(uint64_t this)
{
  *(_QWORD *)this = &off_25135DC90;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135DC90;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

uint64_t CMMsl::AccessoryGyro::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  char v5;

  v3 = this;
  v4 = *(const PB::Base **)(this + 8);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = *(_BYTE *)(v3 + 36);
  if ((v5 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v5 = *(_BYTE *)(v3 + 36);
    if ((v5 & 4) == 0)
    {
LABEL_5:
      if ((v5 & 8) == 0)
        goto LABEL_6;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(v3 + 36) & 4) == 0)
  {
    goto LABEL_5;
  }
  this = PB::Writer::writeVarInt(a2);
  v5 = *(_BYTE *)(v3 + 36);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 1) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_10:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  if ((*(_BYTE *)(v3 + 36) & 1) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

BOOL CMMsl::AccessoryGyro::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !CMMsl::Gyro::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 36) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 2) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 36) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 4) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 36) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 8) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 8) != 0)
  {
    return 0;
  }
  result = (*(_BYTE *)(a2 + 36) & 1) == 0;
  if ((*(_BYTE *)(a1 + 36) & 1) == 0)
    return result;
  return (*(_BYTE *)(a2 + 36) & 1) != 0 && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
}

BOOL CMMsl::Gyro::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 44);
  v3 = *(_WORD *)(a2 + 44);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(unsigned __int8 *)(a1 + 40) != *(unsigned __int8 *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 44) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 44) & 0x100) == 0 || *(unsigned __int8 *)(a1 + 41) != *(unsigned __int8 *)(a2 + 41))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 44) & 0x100) != 0)
  {
    return 0;
  }
  v4 = (v3 & 2) == 0;
  if ((v2 & 2) != 0)
    return (v3 & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v4;
}

unint64_t CMMsl::AccessoryGyro::hash_value(CMMsl::AccessoryGyro *this)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    v2 = CMMsl::Gyro::hash_value((CMMsl::Gyro *)v2);
  if ((*((_BYTE *)this + 36) & 2) != 0)
  {
    v3 = *((unsigned int *)this + 6);
    if ((*((_BYTE *)this + 36) & 4) != 0)
    {
LABEL_5:
      v4 = *((unsigned int *)this + 7);
      if ((*((_BYTE *)this + 36) & 8) != 0)
        goto LABEL_6;
      goto LABEL_12;
    }
  }
  else
  {
    v3 = 0;
    if ((*((_BYTE *)this + 36) & 4) != 0)
      goto LABEL_5;
  }
  v4 = 0;
  if ((*((_BYTE *)this + 36) & 8) != 0)
  {
LABEL_6:
    v5 = *((float *)this + 8);
    v6 = LODWORD(v5);
    if (v5 == 0.0)
      v6 = 0;
    if ((*((_BYTE *)this + 36) & 1) != 0)
      goto LABEL_9;
LABEL_13:
    v7 = 0;
    return v3 ^ v2 ^ v4 ^ v6 ^ v7;
  }
LABEL_12:
  v6 = 0;
  if ((*((_BYTE *)this + 36) & 1) == 0)
    goto LABEL_13;
LABEL_9:
  v7 = *((_QWORD *)this + 2);
  return v3 ^ v2 ^ v4 ^ v6 ^ v7;
}

_QWORD *CMMsl::AccessoryGyro::makeGyro(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135DC90;
    *(_DWORD *)(v2 + 44) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::AccessoryGyroCachedBias::AccessoryGyroCachedBias(_QWORD *this)
{
  *this = &off_25135C090;
  this[1] = 0;
  return this;
}

{
  *this = &off_25135C090;
  this[1] = 0;
  return this;
}

void CMMsl::AccessoryGyroCachedBias::~AccessoryGyroCachedBias(CMMsl::AccessoryGyroCachedBias *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135C090;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    sub_242910C5C(v2);
  PB::Base::~Base(this);
}

{
  CMMsl::AccessoryGyroCachedBias::~AccessoryGyroCachedBias(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::AccessoryGyroCachedBias *CMMsl::AccessoryGyroCachedBias::AccessoryGyroCachedBias(CMMsl::AccessoryGyroCachedBias *this, const CMMsl::AccessoryGyroCachedBias *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  __int128 v7;
  uint64_t v8;

  *(_QWORD *)this = &off_25135C090;
  *((_QWORD *)this + 1) = 0;
  if (*((_QWORD *)a2 + 1))
  {
    v4 = operator new();
    v5 = v4;
    v6 = (__int128 *)*((_QWORD *)a2 + 1);
    if (*((char *)v6 + 23) < 0)
    {
      sub_242910CE8((_BYTE *)v4, *(void **)v6, *((_QWORD *)v6 + 1));
    }
    else
    {
      v7 = *v6;
      *(_QWORD *)(v4 + 16) = *((_QWORD *)v6 + 2);
      *(_OWORD *)v4 = v7;
    }
    v8 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v8)
      sub_242910C5C(v8);
  }
  return this;
}

const CMMsl::AccessoryGyroCachedBias *CMMsl::AccessoryGyroCachedBias::operator=(const CMMsl::AccessoryGyroCachedBias *a1, const CMMsl::AccessoryGyroCachedBias *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::AccessoryGyroCachedBias::AccessoryGyroCachedBias((CMMsl::AccessoryGyroCachedBias *)&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v6 = v3;
    CMMsl::AccessoryGyroCachedBias::~AccessoryGyroCachedBias((CMMsl::AccessoryGyroCachedBias *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AccessoryGyroCachedBias *a2, CMMsl::AccessoryGyroCachedBias *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::AccessoryGyroCachedBias::AccessoryGyroCachedBias(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_25135C090;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    sub_242910C5C(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_25135C090;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    sub_242910C5C(v4);
  return a1;
}

uint64_t CMMsl::AccessoryGyroCachedBias::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = &off_25135C090;
    v6[1] = v4;
    CMMsl::AccessoryGyroCachedBias::~AccessoryGyroCachedBias((CMMsl::AccessoryGyroCachedBias *)v6);
  }
  return a1;
}

uint64_t CMMsl::AccessoryGyroCachedBias::formatText(CMMsl::AccessoryGyroCachedBias *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessoryGyroCachedBias::readFrom(CMMsl::AccessoryGyroCachedBias *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_25;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v19 = (_QWORD *)operator new();
        v19[1] = 0;
        v19[2] = 0;
        *v19 = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
          sub_242910C5C(v20);
        PB::Reader::read();
      }
      else
      {
LABEL_25:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_25;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AccessoryGyroCachedBias::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(_QWORD *)(this + 8))
    return PB::Writer::write();
  return this;
}

uint64_t CMMsl::AccessoryGyroCachedBias::operator==(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 **v3;
  uint64_t result;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v16;

  v2 = *(unsigned __int8 **)(a1 + 8);
  v3 = *(unsigned __int8 ***)(a2 + 8);
  result = v3 == 0;
  if (!v2)
    return result;
  if (!v3)
    return 0;
  v5 = v2[23];
  if ((v5 & 0x80u) == 0)
    v6 = (unsigned __int8 *)v2[23];
  else
    v6 = (unsigned __int8 *)*((_QWORD *)v2 + 1);
  v7 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 23);
  v8 = (char)v7;
  if ((char)v7 < 0)
    v7 = v3[1];
  if (v6 != v7)
    return 0;
  if (v8 >= 0)
    v9 = *(unsigned __int8 **)(a2 + 8);
  else
    v9 = *v3;
  if ((v5 & 0x80) != 0)
    return !memcmp(*(const void **)v2, v9, *((_QWORD *)v2 + 1));
  if (!v2[23])
    return 1;
  v10 = v5 - 1;
  do
  {
    v12 = *v2++;
    v11 = v12;
    v14 = *v9++;
    v13 = v14;
    v16 = v10-- != 0;
    result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

unint64_t CMMsl::AccessoryGyroCachedBias::hash_value(CMMsl::AccessoryGyroCachedBias *this)
{
  unint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    return sub_242910D74(result);
  return result;
}

_QWORD *CMMsl::AccessoryGyroConfig::AccessoryGyroConfig(_QWORD *this)
{
  *this = &off_25135C0C8;
  this[1] = 0;
  return this;
}

{
  *this = &off_25135C0C8;
  this[1] = 0;
  return this;
}

void CMMsl::AccessoryGyroConfig::~AccessoryGyroConfig(CMMsl::AccessoryGyroConfig *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135C0C8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135C0C8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135C0C8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::AccessoryGyroConfig *CMMsl::AccessoryGyroConfig::AccessoryGyroConfig(CMMsl::AccessoryGyroConfig *this, const CMMsl::AccessoryConfig **a2)
{
  CMMsl::AccessoryConfig *v4;
  CMMsl::AccessoryConfig *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_25135C0C8;
  *((_QWORD *)this + 1) = 0;
  if (a2[1])
  {
    v4 = (CMMsl::AccessoryConfig *)operator new();
    v5 = CMMsl::AccessoryConfig::AccessoryConfig(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return this;
}

uint64_t CMMsl::AccessoryGyroConfig::operator=(uint64_t a1, const CMMsl::AccessoryConfig **a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::AccessoryGyroConfig *__hidden);
  uint64_t v6;

  if ((const CMMsl::AccessoryConfig **)a1 != a2)
  {
    CMMsl::AccessoryGyroConfig::AccessoryGyroConfig((CMMsl::AccessoryGyroConfig *)&v5, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v6;
    v5 = &off_25135C0C8;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AccessoryGyroConfig *a2, CMMsl::AccessoryGyroConfig *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::AccessoryGyroConfig::AccessoryGyroConfig(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_25135C0C8;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_25135C0C8;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::AccessoryGyroConfig::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = &off_25135C0C8;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::AccessoryGyroConfig::formatText(CMMsl::AccessoryGyroConfig *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "config");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessoryGyroConfig::readFrom(CMMsl::AccessoryGyroConfig *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v19 = operator new();
        *(_QWORD *)v19 = &off_25135BFB0;
        *(_QWORD *)(v19 + 8) = 0;
        *(_QWORD *)(v19 + 16) = 0;
        *(_QWORD *)(v19 + 24) = 0;
        *(_DWORD *)(v19 + 32) = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = *((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_27;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AccessoryGyroConfig::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2);
  return this;
}

BOOL CMMsl::AccessoryGyroConfig::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::AccessoryConfig::operator==(v2, v3);
  return result;
}

CMMsl::AccessoryConfig *CMMsl::AccessoryGyroConfig::hash_value(CMMsl::AccessoryGyroConfig *this)
{
  CMMsl::AccessoryConfig *result;

  result = (CMMsl::AccessoryConfig *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::AccessoryConfig *)CMMsl::AccessoryConfig::hash_value(result);
  return result;
}

_QWORD *CMMsl::AccessoryGyroConfig::makeConfig(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135BFB0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = 0;
    *(_DWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::AccessoryGyroGYTT::AccessoryGyroGYTT(_QWORD *this)
{
  *this = &off_25135C100;
  this[1] = 0;
  return this;
}

{
  *this = &off_25135C100;
  this[1] = 0;
  return this;
}

void CMMsl::AccessoryGyroGYTT::~AccessoryGyroGYTT(CMMsl::AccessoryGyroGYTT *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135C100;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    sub_242910C5C(v2);
  PB::Base::~Base(this);
}

{
  CMMsl::AccessoryGyroGYTT::~AccessoryGyroGYTT(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::AccessoryGyroGYTT *CMMsl::AccessoryGyroGYTT::AccessoryGyroGYTT(CMMsl::AccessoryGyroGYTT *this, const CMMsl::AccessoryGyroGYTT *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  __int128 v7;
  uint64_t v8;

  *(_QWORD *)this = &off_25135C100;
  *((_QWORD *)this + 1) = 0;
  if (*((_QWORD *)a2 + 1))
  {
    v4 = operator new();
    v5 = v4;
    v6 = (__int128 *)*((_QWORD *)a2 + 1);
    if (*((char *)v6 + 23) < 0)
    {
      sub_242910CE8((_BYTE *)v4, *(void **)v6, *((_QWORD *)v6 + 1));
    }
    else
    {
      v7 = *v6;
      *(_QWORD *)(v4 + 16) = *((_QWORD *)v6 + 2);
      *(_OWORD *)v4 = v7;
    }
    v8 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v8)
      sub_242910C5C(v8);
  }
  return this;
}

const CMMsl::AccessoryGyroGYTT *CMMsl::AccessoryGyroGYTT::operator=(const CMMsl::AccessoryGyroGYTT *a1, const CMMsl::AccessoryGyroGYTT *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::AccessoryGyroGYTT::AccessoryGyroGYTT((CMMsl::AccessoryGyroGYTT *)&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v6 = v3;
    CMMsl::AccessoryGyroGYTT::~AccessoryGyroGYTT((CMMsl::AccessoryGyroGYTT *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AccessoryGyroGYTT *a2, CMMsl::AccessoryGyroGYTT *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::AccessoryGyroGYTT::AccessoryGyroGYTT(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_25135C100;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    sub_242910C5C(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_25135C100;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    sub_242910C5C(v4);
  return a1;
}

uint64_t CMMsl::AccessoryGyroGYTT::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = &off_25135C100;
    v6[1] = v4;
    CMMsl::AccessoryGyroGYTT::~AccessoryGyroGYTT((CMMsl::AccessoryGyroGYTT *)v6);
  }
  return a1;
}

uint64_t CMMsl::AccessoryGyroGYTT::formatText(CMMsl::AccessoryGyroGYTT *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessoryGyroGYTT::readFrom(CMMsl::AccessoryGyroGYTT *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_25;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v19 = (_QWORD *)operator new();
        v19[1] = 0;
        v19[2] = 0;
        *v19 = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
          sub_242910C5C(v20);
        PB::Reader::read();
      }
      else
      {
LABEL_25:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_25;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AccessoryGyroGYTT::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(_QWORD *)(this + 8))
    return PB::Writer::write();
  return this;
}

uint64_t CMMsl::AccessoryGyroGYTT::operator==(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 **v3;
  uint64_t result;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v16;

  v2 = *(unsigned __int8 **)(a1 + 8);
  v3 = *(unsigned __int8 ***)(a2 + 8);
  result = v3 == 0;
  if (!v2)
    return result;
  if (!v3)
    return 0;
  v5 = v2[23];
  if ((v5 & 0x80u) == 0)
    v6 = (unsigned __int8 *)v2[23];
  else
    v6 = (unsigned __int8 *)*((_QWORD *)v2 + 1);
  v7 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 23);
  v8 = (char)v7;
  if ((char)v7 < 0)
    v7 = v3[1];
  if (v6 != v7)
    return 0;
  if (v8 >= 0)
    v9 = *(unsigned __int8 **)(a2 + 8);
  else
    v9 = *v3;
  if ((v5 & 0x80) != 0)
    return !memcmp(*(const void **)v2, v9, *((_QWORD *)v2 + 1));
  if (!v2[23])
    return 1;
  v10 = v5 - 1;
  do
  {
    v12 = *v2++;
    v11 = v12;
    v14 = *v9++;
    v13 = v14;
    v16 = v10-- != 0;
    result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

unint64_t CMMsl::AccessoryGyroGYTT::hash_value(CMMsl::AccessoryGyroGYTT *this)
{
  unint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    return sub_242910D74(result);
  return result;
}

uint64_t CMMsl::AccessoryHeartRate::AccessoryHeartRate(uint64_t this)
{
  *(_QWORD *)this = &off_25135C138;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135C138;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

void CMMsl::AccessoryHeartRate::~AccessoryHeartRate(CMMsl::AccessoryHeartRate *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::AccessoryHeartRate::AccessoryHeartRate(uint64_t this, const CMMsl::AccessoryHeartRate *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;

  *(_QWORD *)this = &off_25135C138;
  *(_DWORD *)(this + 36) = 0;
  v2 = *((_BYTE *)a2 + 36);
  if ((v2 & 2) != 0)
  {
    v4 = *((_QWORD *)a2 + 2);
    v3 = 2;
    *(_BYTE *)(this + 36) = 2;
    *(_QWORD *)(this + 16) = v4;
    v2 = *((_BYTE *)a2 + 36);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 36) & 8) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 7);
    v3 |= 8u;
    *(_BYTE *)(this + 36) = v3;
    *(_DWORD *)(this + 28) = v5;
    v2 = *((_BYTE *)a2 + 36);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *(_BYTE *)(this + 36) = v3;
    *(_DWORD *)(this + 24) = v6;
    v2 = *((_BYTE *)a2 + 36);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        return this;
LABEL_12:
      v8 = *((_DWORD *)a2 + 8);
      *(_BYTE *)(this + 36) = v3 | 0x10;
      *(_DWORD *)(this + 32) = v8;
      return this;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_BYTE *)(this + 36) = v3;
  *(_QWORD *)(this + 8) = v7;
  if ((*((_BYTE *)a2 + 36) & 0x10) != 0)
    goto LABEL_12;
  return this;
}

uint64_t CMMsl::AccessoryHeartRate::operator=(uint64_t a1, const CMMsl::AccessoryHeartRate *a2)
{
  int v3;
  int v4;
  __int128 v5;
  _BYTE v7[8];
  __int128 v8;
  int v9;
  uint64_t v10;
  int v11;

  if ((const CMMsl::AccessoryHeartRate *)a1 != a2)
  {
    CMMsl::AccessoryHeartRate::AccessoryHeartRate((uint64_t)v7, a2);
    v3 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v11;
    v11 = v3;
    v4 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v9;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v5;
    *(_QWORD *)&v5 = *(_QWORD *)(a1 + 28);
    *(_QWORD *)(a1 + 28) = v10;
    v10 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::AccessoryHeartRate *a2, CMMsl::AccessoryHeartRate *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  double result;
  int v7;

  v3 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v5;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  v7 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v7;
  return result;
}

double CMMsl::AccessoryHeartRate::AccessoryHeartRate(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135C138;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135C138;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return result;
}

uint64_t CMMsl::AccessoryHeartRate::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  int v5;
  __int128 v6;
  uint64_t v7;
  void (**v9)(CMMsl::AccessoryHeartRate *__hidden);
  __int128 v10;
  int v11;
  uint64_t v12;
  int v13;

  if (a1 != a2)
  {
    v9 = &off_25135C138;
    v3 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a2 + 36) = 0;
    v4 = *(_DWORD *)(a2 + 24);
    v13 = *(_DWORD *)(a1 + 36);
    v5 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v4;
    v11 = v5;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    v10 = v6;
    *(_QWORD *)&v6 = *(_QWORD *)(a1 + 28);
    v7 = *(_QWORD *)(a2 + 28);
    *(_DWORD *)(a1 + 36) = v3;
    *(_QWORD *)(a1 + 28) = v7;
    v12 = v6;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::AccessoryHeartRate::formatText(CMMsl::AccessoryHeartRate *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 36);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "confidence", *((float *)this + 6));
    v5 = *((_BYTE *)this + 36);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((_BYTE *)this + 36) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "heartRate");
  v5 = *((_BYTE *)this + 36);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(a2, "sequenceNumber");
    if ((*((_BYTE *)this + 36) & 2) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(a2, "sensorTime", *((double *)this + 1));
  v5 = *((_BYTE *)this + 36);
  if ((v5 & 0x10) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 2) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessoryHeartRate::readFrom(CMMsl::AccessoryHeartRate *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  unint64_t v38;
  char v39;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_73;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 36) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_38;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_61;
      case 2u:
        *((_BYTE *)this + 36) |= 8u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v32 = 0;
          v33 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_67;
            }
            v34 = v20++;
            v35 = *(_BYTE *)(v21 + v34);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v35 & 0x7F) << v32;
            if ((v35 & 0x80) == 0)
              break;
            v32 += 7;
            v14 = v33++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_66:
              v2 = v34 + 1;
              goto LABEL_67;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
          goto LABEL_66;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_67;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_67:
        *((_DWORD *)this + 7) = v24;
        break;
      case 3u:
        *((_BYTE *)this + 36) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_38;
        *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        v2 = *((_QWORD *)a2 + 1) + 4;
        goto LABEL_62;
      case 4u:
        *((_BYTE *)this + 36) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_61:
          v2 = *((_QWORD *)a2 + 1) + 8;
LABEL_62:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_38:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 5u:
        *((_BYTE *)this + 36) |= 0x10u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v36 = 0;
          v37 = 0;
          v30 = 0;
          if (v2 <= v26)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_72;
            }
            v38 = v26++;
            v39 = *(_BYTE *)(v27 + v38);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v39 & 0x7F) << v36;
            if ((v39 & 0x80) == 0)
              break;
            v36 += 7;
            v14 = v37++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_71:
              v2 = v38 + 1;
              goto LABEL_72;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v30) = 0;
          goto LABEL_71;
        }
        v28 = 0;
        v29 = 0;
        v30 = 0;
        do
        {
          v2 = v26 + 1;
          *((_QWORD *)a2 + 1) = v26 + 1;
          v31 = *(_BYTE *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0)
            goto LABEL_72;
          v28 += 7;
          v26 = v2;
          v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_72:
        *((_DWORD *)this + 8) = v30;
        break;
      default:
        goto LABEL_19;
    }
LABEL_73:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::AccessoryHeartRate::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 36);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16));
    v4 = *(_BYTE *)(v3 + 36);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(this + 36) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_10:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  if ((*(_BYTE *)(v3 + 36) & 0x10) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

BOOL CMMsl::AccessoryHeartRate::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 36) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 36) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 8) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 36) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 36) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 36) & 0x10) == 0;
  if ((*(_BYTE *)(a1 + 36) & 0x10) != 0)
    return (*(_BYTE *)(a2 + 36) & 0x10) != 0 && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32);
  return v2;
}

uint64_t CMMsl::AccessoryHeartRate::hash_value(CMMsl::AccessoryHeartRate *this)
{
  double v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  double v5;
  uint64_t v6;

  if ((*((_BYTE *)this + 36) & 2) != 0)
  {
    v1 = *((double *)this + 2);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 36) & 8) != 0)
    {
LABEL_3:
      v2 = *((unsigned int *)this + 7);
      if ((*((_BYTE *)this + 36) & 4) != 0)
        goto LABEL_4;
LABEL_15:
      v4 = 0;
      if ((*((_BYTE *)this + 36) & 1) != 0)
        goto LABEL_7;
      goto LABEL_16;
    }
  }
  else
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 36) & 8) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 36) & 4) == 0)
    goto LABEL_15;
LABEL_4:
  v3 = *((float *)this + 6);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  if ((*((_BYTE *)this + 36) & 1) != 0)
  {
LABEL_7:
    v5 = *((double *)this + 1);
    if (v5 == 0.0)
      v5 = 0.0;
    if ((*((_BYTE *)this + 36) & 0x10) != 0)
      goto LABEL_10;
LABEL_17:
    v6 = 0;
    return v2 ^ *(_QWORD *)&v1 ^ v4 ^ *(_QWORD *)&v5 ^ v6;
  }
LABEL_16:
  v5 = 0.0;
  if ((*((_BYTE *)this + 36) & 0x10) == 0)
    goto LABEL_17;
LABEL_10:
  v6 = *((unsigned int *)this + 8);
  return v2 ^ *(_QWORD *)&v1 ^ v4 ^ *(_QWORD *)&v5 ^ v6;
}

uint64_t CMMsl::AccessoryInEarStatus::AccessoryInEarStatus(uint64_t this)
{
  *(_QWORD *)this = &off_25135C170;
  *(_DWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135C170;
  *(_DWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

void CMMsl::AccessoryInEarStatus::~AccessoryInEarStatus(CMMsl::AccessoryInEarStatus *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::AccessoryInEarStatus::AccessoryInEarStatus(CMMsl::AccessoryInEarStatus *this, const CMMsl::AccessoryInEarStatus *a2)
{
  char v2;
  int v3;
  float result;

  *(_QWORD *)this = &off_25135C170;
  *((_DWORD *)this + 2) = 0;
  *((_DWORD *)this + 4) = 0;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v3 = *((_DWORD *)a2 + 2);
    *((_BYTE *)this + 16) = 1;
    *((_DWORD *)this + 2) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 16) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 16) & 2) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 3);
    *((_BYTE *)this + 16) = v2;
    *((float *)this + 3) = result;
  }
  return result;
}

{
  char v2;
  int v3;
  float result;

  *(_QWORD *)this = &off_25135C170;
  *((_DWORD *)this + 2) = 0;
  *((_DWORD *)this + 4) = 0;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v3 = *((_DWORD *)a2 + 2);
    *((_BYTE *)this + 16) = 1;
    *((_DWORD *)this + 2) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 16) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 16) & 2) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 3);
    *((_BYTE *)this + 16) = v2;
    *((float *)this + 3) = result;
  }
  return result;
}

float *CMMsl::AccessoryInEarStatus::operator=(float *a1, uint64_t a2, float a3)
{
  char v4;
  int v5;
  char v6;
  int v7;
  int v8;
  int v9;
  void (**v11)(CMMsl::AccessoryInEarStatus *__hidden);
  int v12;
  int v13;
  int v14;

  if (a1 != (float *)a2)
  {
    v11 = &off_25135C170;
    v14 = 0;
    v4 = *(_BYTE *)(a2 + 16);
    if ((v4 & 1) != 0)
    {
      v5 = *(_DWORD *)(a2 + 8);
      LOBYTE(v14) = 1;
      v6 = 3;
      if ((v4 & 2) != 0)
      {
LABEL_6:
        a3 = *(float *)(a2 + 12);
        LOBYTE(v14) = v6;
      }
    }
    else
    {
      v5 = 0;
      v6 = 2;
      if ((*(_BYTE *)(a2 + 16) & 2) != 0)
        goto LABEL_6;
    }
    v7 = *((_DWORD *)a1 + 4);
    *((_DWORD *)a1 + 4) = v14;
    v14 = v7;
    v8 = *((_DWORD *)a1 + 2);
    *((_DWORD *)a1 + 2) = v5;
    v12 = v8;
    v9 = *((_DWORD *)a1 + 3);
    a1[3] = a3;
    v13 = v9;
    PB::Base::~Base((PB::Base *)&v11);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::AccessoryInEarStatus *a2, CMMsl::AccessoryInEarStatus *a3)
{
  int v3;
  int v4;
  float result;

  v3 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3;
  v4 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  result = *((float *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((float *)a2 + 3) = result;
  return result;
}

float CMMsl::AccessoryInEarStatus::AccessoryInEarStatus(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135C170;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_25135C170;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  return result;
}

_DWORD *CMMsl::AccessoryInEarStatus::operator=(_DWORD *a1, _DWORD *a2)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  void (**v10)(CMMsl::AccessoryInEarStatus *__hidden);
  int v11;
  int v12;
  int v13;

  if (a1 != a2)
  {
    v10 = &off_25135C170;
    v3 = a2[4];
    a2[4] = 0;
    v4 = a2[2];
    v5 = a2[3];
    v6 = a1[4];
    a1[4] = v3;
    v13 = v6;
    v7 = a1[2];
    a1[2] = v4;
    v11 = v7;
    v8 = a1[3];
    a1[3] = v5;
    v12 = v8;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

uint64_t CMMsl::AccessoryInEarStatus::formatText(CMMsl::AccessoryInEarStatus *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 16);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "status");
    v5 = *((_BYTE *)this + 16);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((float *)this + 3));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessoryInEarStatus::readFrom(CMMsl::AccessoryInEarStatus *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  char v24;
  uint64_t result;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_30;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 16) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 3) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 16) |= 1u;
        v19 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v20 = *(_QWORD *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v2)
        {
          v26 = 0;
          v27 = 0;
          v23 = 0;
          if (v2 <= v19)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v19)
            {
              LODWORD(v23) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_47;
            }
            v28 = v19++;
            v29 = *(_BYTE *)(v20 + v28);
            *((_QWORD *)a2 + 1) = v19;
            v23 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0)
              break;
            v26 += 7;
            v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v23) = 0;
LABEL_46:
          v2 = v28 + 1;
        }
        else
        {
          v21 = 0;
          v22 = 0;
          v23 = 0;
          while (1)
          {
            v2 = v19 + 1;
            *((_QWORD *)a2 + 1) = v19 + 1;
            v24 = *(_BYTE *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0)
              break;
            v21 += 7;
            v19 = v2;
            v14 = v22++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 2) = v23;
      }
      else
      {
LABEL_30:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_30;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AccessoryInEarStatus::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 16);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 16);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 12));
  return this;
}

BOOL CMMsl::AccessoryInEarStatus::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 16) & 1) == 0 || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 16) & 2) == 0;
  if ((*(_BYTE *)(a1 + 16) & 2) != 0)
    return (*(_BYTE *)(a2 + 16) & 2) != 0 && *(float *)(a1 + 12) == *(float *)(a2 + 12);
  return v2;
}

uint64_t CMMsl::AccessoryInEarStatus::hash_value(CMMsl::AccessoryInEarStatus *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;

  if ((*((_BYTE *)this + 16) & 1) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 16) & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v3 = 0;
    return v3 ^ v1;
  }
  v1 = *((int *)this + 2);
  if ((*((_BYTE *)this + 16) & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((float *)this + 3);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  return v3 ^ v1;
}

uint64_t CMMsl::AccessoryMagnetometer::AccessoryMagnetometer(uint64_t this)
{
  *(_QWORD *)this = &off_25135C1A8;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135C1A8;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::AccessoryMagnetometer::~AccessoryMagnetometer(CMMsl::AccessoryMagnetometer *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135C1A8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135C1A8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135C1A8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::AccessoryMagnetometer *CMMsl::AccessoryMagnetometer::AccessoryMagnetometer(CMMsl::AccessoryMagnetometer *this, const CMMsl::Magnetometer **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  const CMMsl::Magnetometer *v8;
  int v10;
  int v11;

  *(_QWORD *)this = &off_25135C1A8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 8) = 0;
  if (a2[1])
  {
    v4 = operator new();
    v5 = CMMsl::Magnetometer::Magnetometer(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  v7 = *((_BYTE *)a2 + 32);
  if ((v7 & 2) == 0)
  {
    if (((_BYTE)a2[4] & 4) == 0)
      goto LABEL_6;
LABEL_10:
    v11 = *((_DWORD *)a2 + 7);
    *((_BYTE *)this + 32) |= 4u;
    *((_DWORD *)this + 7) = v11;
    if (((_BYTE)a2[4] & 1) == 0)
      return this;
    goto LABEL_7;
  }
  v10 = *((_DWORD *)a2 + 6);
  *((_BYTE *)this + 32) |= 2u;
  *((_DWORD *)this + 6) = v10;
  v7 = *((_BYTE *)a2 + 32);
  if ((v7 & 4) != 0)
    goto LABEL_10;
LABEL_6:
  if ((v7 & 1) != 0)
  {
LABEL_7:
    v8 = a2[2];
    *((_BYTE *)this + 32) |= 1u;
    *((_QWORD *)this + 2) = v8;
  }
  return this;
}

uint64_t CMMsl::AccessoryMagnetometer::operator=(uint64_t a1, const CMMsl::Magnetometer **a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (**v9)(CMMsl::AccessoryMagnetometer *__hidden);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  if ((const CMMsl::Magnetometer **)a1 != a2)
  {
    CMMsl::AccessoryMagnetometer::AccessoryMagnetometer((CMMsl::AccessoryMagnetometer *)&v9, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v13;
    v13 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v12;
    v12 = v4;
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
    v7 = v11;
    *(_QWORD *)(a1 + 8) = v10;
    *(_QWORD *)(a1 + 16) = v7;
    v10 = 0;
    v11 = v6;
    v9 = &off_25135C1A8;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AccessoryMagnetometer *a2, CMMsl::AccessoryMagnetometer *a3)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_DWORD *)(this + 32);
  *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  v5 = *(_DWORD *)(this + 28);
  *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
  v6 = *(_QWORD *)(this + 8);
  v7 = *(_QWORD *)(this + 16);
  v8 = *((_QWORD *)a2 + 2);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *(_QWORD *)(this + 16) = v8;
  *((_DWORD *)a2 + 7) = v5;
  *((_QWORD *)a2 + 1) = v6;
  *((_QWORD *)a2 + 2) = v7;
  return this;
}

uint64_t CMMsl::AccessoryMagnetometer::AccessoryMagnetometer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_25135C1A8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t CMMsl::AccessoryMagnetometer::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[4];
  int v12;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 8) = 0;
    v12 = *(_DWORD *)(a1 + 32);
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v4;
    v8 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 32) = v3;
    v9 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v11[3] = v9;
    *(_QWORD *)(a1 + 16) = v5;
    v11[1] = 0;
    v11[2] = v7;
    v11[0] = &off_25135C1A8;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

uint64_t CMMsl::AccessoryMagnetometer::formatText(CMMsl::AccessoryMagnetometer *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  char v6;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 32) & 2) != 0)
    PB::TextFormatter::format(a2, "location");
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "magnetometer");
  v6 = *((_BYTE *)this + 32);
  if ((v6 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "sensorTime");
    v6 = *((_BYTE *)this + 32);
  }
  if ((v6 & 4) != 0)
    PB::TextFormatter::format(a2, "sequenceNumber");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessoryMagnetometer::readFrom(CMMsl::AccessoryMagnetometer *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  _DWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  unint64_t v57;
  char v58;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      break;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_25:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        v21 = (_DWORD *)operator new();
        *(_QWORD *)v21 = &off_25135F200;
        v21[9] = 0;
        v22 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v21;
        if (v22)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          v21 = (_DWORD *)*((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v21 + 16))(v21, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
LABEL_20:
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        v4 = *((unsigned __int8 *)a2 + 24);
        if (v2 >= v3 || v4 != 0)
          return v4 == 0;
        break;
      case 2u:
        *((_BYTE *)this + 32) |= 2u;
        v23 = *((_QWORD *)a2 + 1);
        v24 = *((_QWORD *)a2 + 2);
        v25 = *(_QWORD *)a2;
        if (v23 <= 0xFFFFFFFFFFFFFFF5 && v23 + 10 <= v24)
        {
          v26 = 0;
          v27 = 0;
          v28 = 0;
          do
          {
            v29 = v23 + 1;
            *((_QWORD *)a2 + 1) = v23 + 1;
            v30 = *(_BYTE *)(v25 + v23);
            v28 |= (unint64_t)(v30 & 0x7F) << v26;
            if ((v30 & 0x80) == 0)
              goto LABEL_79;
            v26 += 7;
            v23 = v29;
            v14 = v27++ > 8;
          }
          while (!v14);
LABEL_59:
          LODWORD(v28) = 0;
          goto LABEL_79;
        }
        v47 = 0;
        v48 = 0;
        v28 = 0;
        if (v24 <= v23)
          v24 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v24 == v23)
          {
            LODWORD(v28) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v49 = v23 + 1;
            v50 = *(_BYTE *)(v25 + v23);
            *((_QWORD *)a2 + 1) = v49;
            v28 |= (unint64_t)(v50 & 0x7F) << v47;
            if (v50 < 0)
            {
              v47 += 7;
              v23 = v49;
              v14 = v48++ > 8;
              if (v14)
                goto LABEL_59;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v28) = 0;
          }
          break;
        }
LABEL_79:
        *((_DWORD *)this + 6) = v28;
        goto LABEL_20;
      case 3u:
        *((_BYTE *)this + 32) |= 4u;
        v31 = *((_QWORD *)a2 + 1);
        v32 = *((_QWORD *)a2 + 2);
        v33 = *(_QWORD *)a2;
        if (v31 <= 0xFFFFFFFFFFFFFFF5 && v31 + 10 <= v32)
        {
          v34 = 0;
          v35 = 0;
          v36 = 0;
          do
          {
            v37 = v31 + 1;
            *((_QWORD *)a2 + 1) = v31 + 1;
            v38 = *(_BYTE *)(v33 + v31);
            v36 |= (unint64_t)(v38 & 0x7F) << v34;
            if ((v38 & 0x80) == 0)
              goto LABEL_82;
            v34 += 7;
            v31 = v37;
            v14 = v35++ > 8;
          }
          while (!v14);
LABEL_66:
          LODWORD(v36) = 0;
          goto LABEL_82;
        }
        v51 = 0;
        v52 = 0;
        v36 = 0;
        if (v32 <= v31)
          v32 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v32 == v31)
          {
            LODWORD(v36) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v53 = v31 + 1;
            v54 = *(_BYTE *)(v33 + v31);
            *((_QWORD *)a2 + 1) = v53;
            v36 |= (unint64_t)(v54 & 0x7F) << v51;
            if (v54 < 0)
            {
              v51 += 7;
              v31 = v53;
              v14 = v52++ > 8;
              if (v14)
                goto LABEL_66;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v36) = 0;
          }
          break;
        }
LABEL_82:
        *((_DWORD *)this + 7) = v36;
        goto LABEL_20;
      case 4u:
        *((_BYTE *)this + 32) |= 1u;
        v39 = *((_QWORD *)a2 + 1);
        v40 = *((_QWORD *)a2 + 2);
        v41 = *(_QWORD *)a2;
        if (v39 <= 0xFFFFFFFFFFFFFFF5 && v39 + 10 <= v40)
        {
          v42 = 0;
          v43 = 0;
          v44 = 0;
          do
          {
            v45 = v39 + 1;
            *((_QWORD *)a2 + 1) = v39 + 1;
            v46 = *(_BYTE *)(v41 + v39);
            v44 |= (unint64_t)(v46 & 0x7F) << v42;
            if ((v46 & 0x80) == 0)
              goto LABEL_85;
            v42 += 7;
            v39 = v45;
            v14 = v43++ > 8;
          }
          while (!v14);
LABEL_73:
          v44 = 0;
          goto LABEL_85;
        }
        v55 = 0;
        v56 = 0;
        v44 = 0;
        if (v40 <= v39)
          v40 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v40 == v39)
          {
            v44 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v57 = v39 + 1;
            v58 = *(_BYTE *)(v41 + v39);
            *((_QWORD *)a2 + 1) = v57;
            v44 |= (unint64_t)(v58 & 0x7F) << v55;
            if (v58 < 0)
            {
              v55 += 7;
              v39 = v57;
              v14 = v56++ > 8;
              if (v14)
                goto LABEL_73;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v44 = 0;
          }
          break;
        }
LABEL_85:
        *((_QWORD *)this + 2) = v44;
        goto LABEL_20;
      default:
        goto LABEL_19;
    }
  }
  v15 = 0;
  v16 = 0;
  v11 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v17 = v2 + 1;
    v18 = *(_BYTE *)(v8 + v2);
    *((_QWORD *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0)
      goto LABEL_25;
    v15 += 7;
    v2 = v17;
    v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  result = PB::Reader::skip(a2);
  if ((_DWORD)result)
    goto LABEL_20;
  return result;
}

uint64_t CMMsl::Magnetometer::Magnetometer(uint64_t this)
{
  *(_QWORD *)this = &off_25135F200;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135F200;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

uint64_t CMMsl::AccessoryMagnetometer::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  char v5;

  v3 = this;
  v4 = *(const PB::Base **)(this + 8);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = *(_BYTE *)(v3 + 32);
  if ((v5 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v5 = *(_BYTE *)(v3 + 32);
    if ((v5 & 4) == 0)
    {
LABEL_5:
      if ((v5 & 1) == 0)
        return this;
      return PB::Writer::writeVarInt(a2);
    }
  }
  else if ((*(_BYTE *)(v3 + 32) & 4) == 0)
  {
    goto LABEL_5;
  }
  this = PB::Writer::writeVarInt(a2);
  if ((*(_BYTE *)(v3 + 32) & 1) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

BOOL CMMsl::AccessoryMagnetometer::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !CMMsl::Magnetometer::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 2) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 4) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  result = (*(_BYTE *)(a2 + 32) & 1) == 0;
  if ((*(_BYTE *)(a1 + 32) & 1) == 0)
    return result;
  return (*(_BYTE *)(a2 + 32) & 1) != 0 && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
}

BOOL CMMsl::Magnetometer::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 36) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 36) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 36) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 36) & 0x20) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 36) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 36) & 2) == 0;
  if ((*(_BYTE *)(a1 + 36) & 2) != 0)
    return (*(_BYTE *)(a2 + 36) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

unint64_t CMMsl::AccessoryMagnetometer::hash_value(CMMsl::AccessoryMagnetometer *this)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    v2 = CMMsl::Magnetometer::hash_value((CMMsl::Magnetometer *)v2);
  if ((*((_BYTE *)this + 32) & 2) == 0)
  {
    v3 = 0;
    if ((*((_BYTE *)this + 32) & 4) != 0)
      goto LABEL_5;
LABEL_8:
    v4 = 0;
    if ((*((_BYTE *)this + 32) & 1) != 0)
      goto LABEL_6;
LABEL_9:
    v5 = 0;
    return v3 ^ v2 ^ v4 ^ v5;
  }
  v3 = *((unsigned int *)this + 6);
  if ((*((_BYTE *)this + 32) & 4) == 0)
    goto LABEL_8;
LABEL_5:
  v4 = *((unsigned int *)this + 7);
  if ((*((_BYTE *)this + 32) & 1) == 0)
    goto LABEL_9;
LABEL_6:
  v5 = *((_QWORD *)this + 2);
  return v3 ^ v2 ^ v4 ^ v5;
}

_QWORD *CMMsl::AccessoryMagnetometer::makeMagnetometer(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135F200;
    *(_DWORD *)(v2 + 36) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::AccessoryMagnetometerConfig::AccessoryMagnetometerConfig(_QWORD *this)
{
  *this = &off_25135C1E0;
  this[1] = 0;
  return this;
}

{
  *this = &off_25135C1E0;
  this[1] = 0;
  return this;
}

void CMMsl::AccessoryMagnetometerConfig::~AccessoryMagnetometerConfig(CMMsl::AccessoryMagnetometerConfig *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135C1E0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135C1E0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135C1E0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::AccessoryMagnetometerConfig *CMMsl::AccessoryMagnetometerConfig::AccessoryMagnetometerConfig(CMMsl::AccessoryMagnetometerConfig *this, const CMMsl::AccessoryConfig **a2)
{
  CMMsl::AccessoryConfig *v4;
  CMMsl::AccessoryConfig *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_25135C1E0;
  *((_QWORD *)this + 1) = 0;
  if (a2[1])
  {
    v4 = (CMMsl::AccessoryConfig *)operator new();
    v5 = CMMsl::AccessoryConfig::AccessoryConfig(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return this;
}

uint64_t CMMsl::AccessoryMagnetometerConfig::operator=(uint64_t a1, const CMMsl::AccessoryConfig **a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::AccessoryMagnetometerConfig *__hidden);
  uint64_t v6;

  if ((const CMMsl::AccessoryConfig **)a1 != a2)
  {
    CMMsl::AccessoryMagnetometerConfig::AccessoryMagnetometerConfig((CMMsl::AccessoryMagnetometerConfig *)&v5, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v6;
    v5 = &off_25135C1E0;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AccessoryMagnetometerConfig *a2, CMMsl::AccessoryMagnetometerConfig *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::AccessoryMagnetometerConfig::AccessoryMagnetometerConfig(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_25135C1E0;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_25135C1E0;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::AccessoryMagnetometerConfig::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = &off_25135C1E0;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::AccessoryMagnetometerConfig::formatText(CMMsl::AccessoryMagnetometerConfig *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "config");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessoryMagnetometerConfig::readFrom(CMMsl::AccessoryMagnetometerConfig *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v19 = operator new();
        *(_QWORD *)v19 = &off_25135BFB0;
        *(_QWORD *)(v19 + 8) = 0;
        *(_QWORD *)(v19 + 16) = 0;
        *(_QWORD *)(v19 + 24) = 0;
        *(_DWORD *)(v19 + 32) = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = *((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_27;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AccessoryMagnetometerConfig::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2);
  return this;
}

BOOL CMMsl::AccessoryMagnetometerConfig::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::AccessoryConfig::operator==(v2, v3);
  return result;
}

CMMsl::AccessoryConfig *CMMsl::AccessoryMagnetometerConfig::hash_value(CMMsl::AccessoryMagnetometerConfig *this)
{
  CMMsl::AccessoryConfig *result;

  result = (CMMsl::AccessoryConfig *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::AccessoryConfig *)CMMsl::AccessoryConfig::hash_value(result);
  return result;
}

_QWORD *CMMsl::AccessoryMagnetometerConfig::makeConfig(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135BFB0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = 0;
    *(_DWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

double CMMsl::AccessoryPPG::AccessoryPPG(CMMsl::AccessoryPPG *this)
{
  double result;

  *(_QWORD *)this = &off_25135C218;
  *((_DWORD *)this + 56) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_25135C218;
  *((_DWORD *)this + 56) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  return result;
}

void CMMsl::AccessoryPPG::~AccessoryPPG(CMMsl::AccessoryPPG *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  *(_QWORD *)this = &off_25135C218;
  v2 = (void *)*((_QWORD *)this + 22);
  if (v2)
  {
    *((_QWORD *)this + 23) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 19);
  if (v3)
  {
    *((_QWORD *)this + 20) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 16);
  if (v4)
  {
    *((_QWORD *)this + 17) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 13);
  if (v5)
  {
    *((_QWORD *)this + 14) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 10);
  if (v6)
  {
    *((_QWORD *)this + 11) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 7);
  if (v7)
  {
    *((_QWORD *)this + 8) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 4);
  if (v8)
  {
    *((_QWORD *)this + 5) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 1);
  if (v9)
  {
    *((_QWORD *)this + 2) = v9;
    operator delete(v9);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::AccessoryPPG::~AccessoryPPG(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::AccessoryPPG *CMMsl::AccessoryPPG::AccessoryPPG(CMMsl::AccessoryPPG *this, const CMMsl::AccessoryPPG *a2)
{
  _QWORD *v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v11;

  *(_QWORD *)this = &off_25135C218;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (_QWORD *)((char *)this + 8);
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 56) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  v5 = *((_BYTE *)a2 + 224);
  if ((v5 & 2) != 0)
  {
    v7 = *((_QWORD *)a2 + 26);
    v6 = 2;
    *((_BYTE *)this + 224) = 2;
    *((_QWORD *)this + 26) = v7;
    v5 = *((_BYTE *)a2 + 224);
    if ((v5 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((*((_BYTE *)a2 + 224) & 1) != 0)
  {
LABEL_5:
    v8 = *((_QWORD *)a2 + 25);
    v6 |= 1u;
    *((_BYTE *)this + 224) = v6;
    *((_QWORD *)this + 25) = v8;
    v5 = *((_BYTE *)a2 + 224);
  }
LABEL_6:
  if ((v5 & 8) == 0)
  {
    if ((v5 & 4) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
  v11 = *((_DWORD *)a2 + 55);
  v6 |= 8u;
  *((_BYTE *)this + 224) = v6;
  *((_DWORD *)this + 55) = v11;
  if ((*((_BYTE *)a2 + 224) & 4) != 0)
  {
LABEL_8:
    v9 = *((_DWORD *)a2 + 54);
    *((_BYTE *)this + 224) = v6 | 4;
    *((_DWORD *)this + 54) = v9;
  }
LABEL_9:
  if (this != a2)
  {
    sub_242911380(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
    sub_242911380((_QWORD *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
    sub_242911380((_QWORD *)this + 7, *((char **)a2 + 7), *((char **)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 2);
    sub_242911380((_QWORD *)this + 10, *((char **)a2 + 10), *((char **)a2 + 11), (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 2);
    sub_242911380((_QWORD *)this + 16, *((char **)a2 + 16), *((char **)a2 + 17), (uint64_t)(*((_QWORD *)a2 + 17) - *((_QWORD *)a2 + 16)) >> 2);
    sub_242911380((_QWORD *)this + 19, *((char **)a2 + 19), *((char **)a2 + 20), (uint64_t)(*((_QWORD *)a2 + 20) - *((_QWORD *)a2 + 19)) >> 2);
    sub_242911380((_QWORD *)this + 22, *((char **)a2 + 22), *((char **)a2 + 23), (uint64_t)(*((_QWORD *)a2 + 23) - *((_QWORD *)a2 + 22)) >> 2);
    sub_242911380((_QWORD *)this + 13, *((char **)a2 + 13), *((char **)a2 + 14), (uint64_t)(*((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13)) >> 2);
  }
  return this;
}

CMMsl *CMMsl::AccessoryPPG::operator=(CMMsl *a1, const CMMsl::AccessoryPPG *a2)
{
  CMMsl::AccessoryPPG *v3;
  _BYTE v5[232];

  if (a1 != a2)
  {
    CMMsl::AccessoryPPG::AccessoryPPG((CMMsl::AccessoryPPG *)v5, a2);
    CMMsl::swap(a1, (CMMsl::AccessoryPPG *)v5, v3);
    CMMsl::AccessoryPPG::~AccessoryPPG((CMMsl::AccessoryPPG *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::AccessoryPPG *a2, CMMsl::AccessoryPPG *a3)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = *((_DWORD *)this + 56);
  *((_DWORD *)this + 56) = *((_DWORD *)a2 + 56);
  *((_DWORD *)a2 + 56) = v3;
  v4 = *((_DWORD *)this + 55);
  *((_DWORD *)this + 55) = *((_DWORD *)a2 + 55);
  *((_DWORD *)a2 + 55) = v4;
  v5 = *((_DWORD *)this + 54);
  *((_DWORD *)this + 54) = *((_DWORD *)a2 + 54);
  *((_DWORD *)a2 + 54) = v5;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v7;
  v8 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v8;
  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v9;
  v10 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v10;
  v11 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v11;
  v12 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v12;
  v13 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v13;
  v14 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v14;
  v15 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v15;
  v16 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v16;
  v17 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v17;
  v18 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v18;
  v19 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v19;
  v20 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v20;
  v21 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 19) = v21;
  v22 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
  *((_QWORD *)a2 + 20) = v22;
  v23 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = *((_QWORD *)a2 + 21);
  *((_QWORD *)a2 + 21) = v23;
  v24 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = *((_QWORD *)a2 + 22);
  *((_QWORD *)a2 + 22) = v24;
  v25 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = *((_QWORD *)a2 + 23);
  *((_QWORD *)a2 + 23) = v25;
  v27 = *((_QWORD *)this + 24);
  v26 = *((_QWORD *)this + 25);
  v28 = *((_QWORD *)a2 + 25);
  *((_QWORD *)this + 24) = *((_QWORD *)a2 + 24);
  *((_QWORD *)this + 25) = v28;
  result = *((double *)this + 26);
  *((_QWORD *)this + 26) = *((_QWORD *)a2 + 26);
  *((double *)a2 + 26) = result;
  *((_QWORD *)a2 + 24) = v27;
  *((_QWORD *)a2 + 25) = v26;
  v30 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v30;
  v31 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v31;
  v32 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v32;
  return result;
}

uint64_t CMMsl::AccessoryPPG::AccessoryPPG(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = &off_25135C218;
  v4 = a1 + 32;
  v5 = a1 + 80;
  v6 = a1 + 128;
  v7 = a1 + 176;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  v8 = a1 + 104;
  *(_OWORD *)(a1 + 152) = 0u;
  v9 = a1 + 152;
  *(_OWORD *)(a1 + 56) = 0u;
  v10 = a1 + 56;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  *(_DWORD *)(a2 + 224) = 0;
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  sub_242911330(v4, (__n128 *)(a2 + 32));
  sub_242911330(v10, (__n128 *)(a2 + 56));
  sub_242911330(v5, (__n128 *)(a2 + 80));
  sub_242911330(v6, (__n128 *)(a2 + 128));
  sub_242911330(v9, (__n128 *)(a2 + 152));
  sub_242911330(v7, (__n128 *)(a2 + 176));
  sub_242911330(v8, (__n128 *)(a2 + 104));
  return a1;
}

CMMsl *CMMsl::AccessoryPPG::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::AccessoryPPG *v3;
  _BYTE v5[232];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::AccessoryPPG::AccessoryPPG((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::AccessoryPPG *)v5, v3);
    CMMsl::AccessoryPPG::~AccessoryPPG((CMMsl::AccessoryPPG *)v5);
  }
  return a1;
}

uint64_t CMMsl::AccessoryPPG::formatText(CMMsl::AccessoryPPG *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v5 += 4;
    PB::TextFormatter::format(a2, "dark0");
  }
  v7 = *((_QWORD *)this + 4);
  v8 = *((_QWORD *)this + 5);
  while (v7 != v8)
  {
    v7 += 4;
    PB::TextFormatter::format(a2, "dark1");
  }
  v9 = *((_QWORD *)this + 7);
  v10 = *((_QWORD *)this + 8);
  while (v9 != v10)
  {
    v9 += 4;
    PB::TextFormatter::format(a2, "dark2");
  }
  v11 = *((_QWORD *)this + 10);
  v12 = *((_QWORD *)this + 11);
  while (v11 != v12)
  {
    v11 += 4;
    PB::TextFormatter::format(a2, "dark3");
  }
  v13 = *((_BYTE *)this + 224);
  if ((v13 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "error");
    v13 = *((_BYTE *)this + 224);
  }
  if ((v13 & 8) != 0)
    PB::TextFormatter::format(a2, "frameNum");
  v14 = *((_QWORD *)this + 13);
  v15 = *((_QWORD *)this + 14);
  while (v14 != v15)
  {
    v14 += 4;
    PB::TextFormatter::format(a2, "ledCurrent");
  }
  v16 = *((_QWORD *)this + 16);
  v17 = *((_QWORD *)this + 17);
  while (v16 != v17)
  {
    v16 += 4;
    PB::TextFormatter::format(a2, "light0");
  }
  v18 = *((_QWORD *)this + 19);
  v19 = *((_QWORD *)this + 20);
  while (v18 != v19)
  {
    v18 += 4;
    PB::TextFormatter::format(a2, "light1");
  }
  v20 = *((_QWORD *)this + 22);
  v21 = *((_QWORD *)this + 23);
  while (v20 != v21)
  {
    v20 += 4;
    PB::TextFormatter::format(a2, "rxGain");
  }
  v22 = *((_BYTE *)this + 224);
  if ((v22 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "sensorTime");
    v22 = *((_BYTE *)this + 224);
  }
  if ((v22 & 2) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 26));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::AccessoryPPG::readFrom(CMMsl::AccessoryPPG *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  char *v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  char *v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  BOOL v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  char v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  _DWORD *v76;
  char *v77;
  int v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char v83;
  unsigned int v84;
  uint64_t v85;
  unint64_t v86;
  char v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  _DWORD *v100;
  char *v101;
  int v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  char v107;
  unsigned int v108;
  uint64_t v109;
  unint64_t v110;
  char v111;
  char v112;
  unsigned int v113;
  uint64_t v114;
  unint64_t v115;
  char v116;
  unint64_t v117;
  char *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  _DWORD *v124;
  char *v125;
  int v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  char v131;
  unsigned int v132;
  uint64_t v133;
  unint64_t v134;
  char v135;
  char v136;
  unsigned int v137;
  uint64_t v138;
  unint64_t v139;
  char v140;
  unint64_t v141;
  char *v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  _DWORD *v148;
  char *v149;
  int v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  char v155;
  unsigned int v156;
  uint64_t v157;
  unint64_t v158;
  char v159;
  char v160;
  unsigned int v161;
  uint64_t v162;
  unint64_t v163;
  char v164;
  unint64_t v165;
  char *v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  _DWORD *v172;
  char *v173;
  int v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  char v179;
  unsigned int v180;
  uint64_t v181;
  unint64_t v182;
  char v183;
  char v184;
  unsigned int v185;
  uint64_t v186;
  unint64_t v187;
  char v188;
  unint64_t v189;
  char *v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  _DWORD *v196;
  char *v197;
  int v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  char v203;
  unsigned int v204;
  uint64_t v205;
  unint64_t v206;
  char v207;
  char v208;
  unsigned int v209;
  uint64_t v210;
  unint64_t v211;
  char v212;
  unint64_t v213;
  char *v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  _DWORD *v220;
  char *v221;
  int v222;
  unint64_t v223;
  unint64_t v224;
  uint64_t v225;
  char v227;
  unsigned int v228;
  uint64_t v229;
  unint64_t v230;
  char v231;
  char v232;
  unsigned int v233;
  uint64_t v234;
  unint64_t v235;
  char v236;
  char v237;
  unsigned int v238;
  unint64_t v239;
  char v240;
  char v241;
  unsigned int v242;
  unint64_t v243;
  char v244;
  char v245;
  unsigned int v246;
  unint64_t v247;
  char v248;
  unint64_t v249;
  char *v250;
  _DWORD *v251;
  unint64_t v252;
  char *v253;
  unint64_t v254;
  char *v255;
  unint64_t v256;
  char *v257;
  unint64_t v258;
  char *v259;
  unint64_t v260;
  char *v261;
  unint64_t v262;
  char *v263;
  unint64_t v264;
  char *v265;
  char *v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t v271;
  char *v272;
  uint64_t v273;
  unint64_t v274;
  uint64_t v275;
  unint64_t v276;
  uint64_t v277;
  char *v278;
  uint64_t v279;
  unint64_t v280;
  uint64_t v281;
  unint64_t v282;
  uint64_t v283;
  char *v284;
  uint64_t v285;
  unint64_t v286;
  uint64_t v287;
  unint64_t v288;
  uint64_t v289;
  char *v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  unint64_t v294;
  uint64_t v295;
  char *v296;
  uint64_t v297;
  unint64_t v298;
  uint64_t v299;
  unint64_t v300;
  uint64_t v301;
  char *v302;
  uint64_t v303;
  unint64_t v304;
  uint64_t v305;
  unint64_t v306;
  uint64_t v307;
  char *v308;
  uint64_t v309;
  unint64_t v310;
  uint64_t v311;
  unint64_t v312;
  uint64_t v313;
  _DWORD *v314;
  int v315;
  unint64_t v316;
  unint64_t v317;
  uint64_t v318;
  char v319;
  unsigned int v320;
  unint64_t v322;
  char v323;
  uint64_t v324;
  unint64_t v325;
  char v326;
  _DWORD *v327;
  int v328;
  unint64_t v329;
  unint64_t v330;
  uint64_t v331;
  char v332;
  unsigned int v333;
  unint64_t v335;
  char v336;
  unint64_t v337;
  char v338;
  _DWORD *v339;
  int v340;
  unint64_t v341;
  unint64_t v342;
  uint64_t v343;
  char v344;
  unsigned int v345;
  unint64_t v347;
  char v348;
  unint64_t v349;
  char v350;
  _DWORD *v351;
  int v352;
  unint64_t v353;
  unint64_t v354;
  uint64_t v355;
  char v356;
  unsigned int v357;
  unint64_t v359;
  char v360;
  unint64_t v361;
  char v362;
  _DWORD *v363;
  int v364;
  unint64_t v365;
  unint64_t v366;
  uint64_t v367;
  char v368;
  unsigned int v369;
  unint64_t v371;
  char v372;
  unint64_t v373;
  char v374;
  _DWORD *v375;
  int v376;
  unint64_t v377;
  unint64_t v378;
  uint64_t v379;
  char v380;
  unsigned int v381;
  unint64_t v383;
  char v384;
  unint64_t v385;
  char v386;
  _DWORD *v387;
  int v388;
  unint64_t v389;
  unint64_t v390;
  uint64_t v391;
  char v392;
  unsigned int v393;
  unint64_t v395;
  char v396;
  unint64_t v397;
  char v398;
  _DWORD *v399;
  int v400;
  unint64_t v401;
  unint64_t v402;
  uint64_t v403;
  char v404;
  unsigned int v405;
  unint64_t v407;
  char v408;
  unint64_t v409;
  char v410;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v58 = v10++ > 8;
        if (v58)
          goto LABEL_19;
      }
LABEL_21:
      v18 = v11 & 7;
      if (v18 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 224) |= 2u;
          v19 = *((_QWORD *)a2 + 1);
          if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *((_QWORD *)a2 + 2))
          {
            *((_QWORD *)this + 26) = *(_QWORD *)(*(_QWORD *)a2 + v19);
            *((_QWORD *)a2 + 1) += 8;
          }
          else
          {
            *((_BYTE *)a2 + 24) = 1;
          }
          goto LABEL_704;
        case 2u:
          *((_BYTE *)this + 224) |= 1u;
          v20 = *((_QWORD *)a2 + 1);
          v21 = *((_QWORD *)a2 + 2);
          v22 = *(_QWORD *)a2;
          if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
          {
            v23 = 0;
            v24 = 0;
            v25 = 0;
            do
            {
              v26 = v20 + 1;
              *((_QWORD *)a2 + 1) = v20 + 1;
              v27 = *(_BYTE *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0)
                goto LABEL_516;
              v23 += 7;
              v20 = v26;
              v58 = v24++ > 8;
            }
            while (!v58);
LABEL_415:
            v25 = 0;
            goto LABEL_516;
          }
          v237 = 0;
          v238 = 0;
          v25 = 0;
          if (v21 <= v20)
            v21 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v21 == v20)
            {
              v25 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v239 = v20 + 1;
              v240 = *(_BYTE *)(v22 + v20);
              *((_QWORD *)a2 + 1) = v239;
              v25 |= (unint64_t)(v240 & 0x7F) << v237;
              if (v240 < 0)
              {
                v237 += 7;
                v20 = v239;
                v58 = v238++ > 8;
                if (v58)
                  goto LABEL_415;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v25 = 0;
            }
            break;
          }
LABEL_516:
          *((_QWORD *)this + 25) = v25;
          goto LABEL_704;
        case 3u:
          *((_BYTE *)this + 224) |= 8u;
          v28 = *((_QWORD *)a2 + 1);
          v29 = *((_QWORD *)a2 + 2);
          v30 = *(_QWORD *)a2;
          if (v28 <= 0xFFFFFFFFFFFFFFF5 && v28 + 10 <= v29)
          {
            v31 = 0;
            v32 = 0;
            v33 = 0;
            do
            {
              v34 = v28 + 1;
              *((_QWORD *)a2 + 1) = v28 + 1;
              v35 = *(_BYTE *)(v30 + v28);
              v33 |= (unint64_t)(v35 & 0x7F) << v31;
              if ((v35 & 0x80) == 0)
                goto LABEL_519;
              v31 += 7;
              v28 = v34;
              v58 = v32++ > 8;
            }
            while (!v58);
LABEL_422:
            LODWORD(v33) = 0;
            goto LABEL_519;
          }
          v241 = 0;
          v242 = 0;
          v33 = 0;
          if (v29 <= v28)
            v29 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v29 == v28)
            {
              LODWORD(v33) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v243 = v28 + 1;
              v244 = *(_BYTE *)(v30 + v28);
              *((_QWORD *)a2 + 1) = v243;
              v33 |= (unint64_t)(v244 & 0x7F) << v241;
              if (v244 < 0)
              {
                v241 += 7;
                v28 = v243;
                v58 = v242++ > 8;
                if (v58)
                  goto LABEL_422;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v33) = 0;
            }
            break;
          }
LABEL_519:
          *((_DWORD *)this + 55) = v33;
          goto LABEL_704;
        case 4u:
          *((_BYTE *)this + 224) |= 4u;
          v36 = *((_QWORD *)a2 + 1);
          v37 = *((_QWORD *)a2 + 2);
          v38 = *(_QWORD *)a2;
          if (v36 <= 0xFFFFFFFFFFFFFFF5 && v36 + 10 <= v37)
          {
            v39 = 0;
            v40 = 0;
            v41 = 0;
            do
            {
              v42 = v36 + 1;
              *((_QWORD *)a2 + 1) = v36 + 1;
              v43 = *(_BYTE *)(v38 + v36);
              v41 |= (unint64_t)(v43 & 0x7F) << v39;
              if ((v43 & 0x80) == 0)
                goto LABEL_522;
              v39 += 7;
              v36 = v42;
              v58 = v40++ > 8;
            }
            while (!v58);
LABEL_429:
            LODWORD(v41) = 0;
            goto LABEL_522;
          }
          v245 = 0;
          v246 = 0;
          v41 = 0;
          if (v37 <= v36)
            v37 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v37 == v36)
            {
              LODWORD(v41) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v247 = v36 + 1;
              v248 = *(_BYTE *)(v38 + v36);
              *((_QWORD *)a2 + 1) = v247;
              v41 |= (unint64_t)(v248 & 0x7F) << v245;
              if (v248 < 0)
              {
                v245 += 7;
                v36 = v247;
                v58 = v246++ > 8;
                if (v58)
                  goto LABEL_429;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v41) = 0;
            }
            break;
          }
LABEL_522:
          *((_DWORD *)this + 54) = v41;
          goto LABEL_704;
        case 5u:
          if (v18 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            if (*((_QWORD *)a2 + 1) < *((_QWORD *)a2 + 2) && !*((_BYTE *)a2 + 24))
            {
              v44 = (char *)*((_QWORD *)this + 2);
              do
              {
                v45 = *((_QWORD *)this + 3);
                if ((unint64_t)v44 >= v45)
                {
                  v46 = (char *)*((_QWORD *)this + 1);
                  v47 = (v44 - v46) >> 2;
                  v48 = v47 + 1;
                  if ((unint64_t)(v47 + 1) >> 62)
                    goto LABEL_713;
                  v49 = v45 - (_QWORD)v46;
                  if (v49 >> 1 > v48)
                    v48 = v49 >> 1;
                  if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
                    v50 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v50 = v48;
                  if (v50)
                  {
                    v50 = (unint64_t)sub_2429114B8(v50);
                    v46 = (char *)*((_QWORD *)this + 1);
                    v44 = (char *)*((_QWORD *)this + 2);
                  }
                  else
                  {
                    v51 = 0;
                  }
                  v52 = (_DWORD *)(v50 + 4 * v47);
                  *v52 = 0;
                  v53 = (char *)(v52 + 1);
                  while (v44 != v46)
                  {
                    v54 = *((_DWORD *)v44 - 1);
                    v44 -= 4;
                    *--v52 = v54;
                  }
                  *((_QWORD *)this + 1) = v52;
                  *((_QWORD *)this + 2) = v53;
                  *((_QWORD *)this + 3) = v50 + 4 * v51;
                  if (v46)
                    operator delete(v46);
                  v44 = v53;
                }
                else
                {
                  *(_DWORD *)v44 = 0;
                  v44 += 4;
                }
                *((_QWORD *)this + 2) = v44;
                v56 = *((_QWORD *)a2 + 1);
                v55 = *((_QWORD *)a2 + 2);
                v57 = *(_QWORD *)a2;
                v58 = v56 > 0xFFFFFFFFFFFFFFF5 || v56 + 10 > v55;
                if (v58)
                {
                  v59 = 0;
                  v60 = 0;
                  v66 = 0;
                  if (v55 <= v56)
                    v61 = *((_QWORD *)a2 + 1);
                  else
                    v61 = *((_QWORD *)a2 + 2);
                  while (1)
                  {
                    if (v61 == v56)
                      goto LABEL_407;
                    v62 = v56++;
                    v63 = *(_BYTE *)(v57 + v62);
                    *((_QWORD *)a2 + 1) = v56;
                    v66 |= (unint64_t)(v63 & 0x7F) << v59;
                    if ((v63 & 0x80) == 0)
                      break;
                    v59 += 7;
                    v58 = v60++ > 8;
                    if (v58)
                    {
                      LODWORD(v66) = 0;
                      goto LABEL_88;
                    }
                  }
                  if (*((_BYTE *)a2 + 24))
                    LODWORD(v66) = 0;
LABEL_88:
                  v67 = v62 + 1;
                }
                else
                {
                  v64 = 0;
                  v65 = 0;
                  v66 = 0;
                  while (1)
                  {
                    v67 = v56 + 1;
                    *((_QWORD *)a2 + 1) = v56 + 1;
                    v68 = *(_BYTE *)(v57 + v56);
                    v66 |= (unint64_t)(v68 & 0x7F) << v64;
                    if ((v68 & 0x80) == 0)
                      break;
                    v64 += 7;
                    v56 = v67;
                    v58 = v65++ > 8;
                    if (v58)
                    {
                      LODWORD(v66) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v44 - 1) = v66;
              }
              while (v67 < v55 && !*((_BYTE *)a2 + 24));
            }
            goto LABEL_408;
          }
          v250 = (char *)*((_QWORD *)this + 2);
          v249 = *((_QWORD *)this + 3);
          if ((unint64_t)v250 >= v249)
          {
            v266 = (char *)*((_QWORD *)this + 1);
            v267 = (v250 - v266) >> 2;
            v268 = v267 + 1;
            if ((unint64_t)(v267 + 1) >> 62)
              goto LABEL_713;
            v269 = v249 - (_QWORD)v266;
            if (v269 >> 1 > v268)
              v268 = v269 >> 1;
            if ((unint64_t)v269 >= 0x7FFFFFFFFFFFFFFCLL)
              v270 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v270 = v268;
            if (v270)
            {
              v270 = (unint64_t)sub_2429114B8(v270);
              v266 = (char *)*((_QWORD *)this + 1);
              v250 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v271 = 0;
            }
            v314 = (_DWORD *)(v270 + 4 * v267);
            *v314 = 0;
            v251 = v314 + 1;
            while (v250 != v266)
            {
              v315 = *((_DWORD *)v250 - 1);
              v250 -= 4;
              *--v314 = v315;
            }
            *((_QWORD *)this + 1) = v314;
            *((_QWORD *)this + 2) = v251;
            *((_QWORD *)this + 3) = v270 + 4 * v271;
            if (v266)
              operator delete(v266);
          }
          else
          {
            *(_DWORD *)v250 = 0;
            v251 = v250 + 4;
          }
          *((_QWORD *)this + 2) = v251;
          v316 = *((_QWORD *)a2 + 1);
          v317 = *((_QWORD *)a2 + 2);
          v318 = *(_QWORD *)a2;
          v319 = 0;
          v320 = 0;
          if (v316 <= 0xFFFFFFFFFFFFFFF5 && v316 + 10 <= v317)
          {
            v324 = 0;
            while (1)
            {
              v325 = v316 + 1;
              *((_QWORD *)a2 + 1) = v316 + 1;
              v326 = *(_BYTE *)(v318 + v316);
              v324 |= (unint64_t)(v326 & 0x7F) << v319;
              if ((v326 & 0x80) == 0)
                goto LABEL_703;
              v319 += 7;
              v316 = v325;
              v58 = v320++ > 8;
              if (v58)
                goto LABEL_702;
            }
          }
          v324 = 0;
          if (v317 <= v316)
            v317 = *((_QWORD *)a2 + 1);
          while (v317 != v316)
          {
            v322 = v316 + 1;
            v323 = *(_BYTE *)(v318 + v316);
            *((_QWORD *)a2 + 1) = v322;
            v324 |= (unint64_t)(v323 & 0x7F) << v319;
            if ((v323 & 0x80) == 0)
              goto LABEL_696;
            v319 += 7;
            v316 = v322;
            v58 = v320++ > 8;
            if (v58)
              goto LABEL_702;
          }
          goto LABEL_695;
        case 6u:
          if (v18 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            if (*((_QWORD *)a2 + 1) < *((_QWORD *)a2 + 2) && !*((_BYTE *)a2 + 24))
            {
              v44 = (char *)*((_QWORD *)this + 5);
              do
              {
                v69 = *((_QWORD *)this + 6);
                if ((unint64_t)v44 >= v69)
                {
                  v70 = (char *)*((_QWORD *)this + 4);
                  v71 = (v44 - v70) >> 2;
                  v72 = v71 + 1;
                  if ((unint64_t)(v71 + 1) >> 62)
                    goto LABEL_713;
                  v73 = v69 - (_QWORD)v70;
                  if (v73 >> 1 > v72)
                    v72 = v73 >> 1;
                  if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL)
                    v74 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v74 = v72;
                  if (v74)
                  {
                    v74 = (unint64_t)sub_2429114B8(v74);
                    v70 = (char *)*((_QWORD *)this + 4);
                    v44 = (char *)*((_QWORD *)this + 5);
                  }
                  else
                  {
                    v75 = 0;
                  }
                  v76 = (_DWORD *)(v74 + 4 * v71);
                  *v76 = 0;
                  v77 = (char *)(v76 + 1);
                  while (v44 != v70)
                  {
                    v78 = *((_DWORD *)v44 - 1);
                    v44 -= 4;
                    *--v76 = v78;
                  }
                  *((_QWORD *)this + 4) = v76;
                  *((_QWORD *)this + 5) = v77;
                  *((_QWORD *)this + 6) = v74 + 4 * v75;
                  if (v70)
                    operator delete(v70);
                  v44 = v77;
                }
                else
                {
                  *(_DWORD *)v44 = 0;
                  v44 += 4;
                }
                *((_QWORD *)this + 5) = v44;
                v80 = *((_QWORD *)a2 + 1);
                v79 = *((_QWORD *)a2 + 2);
                v81 = *(_QWORD *)a2;
                if (v80 > 0xFFFFFFFFFFFFFFF5 || v80 + 10 > v79)
                {
                  v83 = 0;
                  v84 = 0;
                  v90 = 0;
                  if (v79 <= v80)
                    v85 = *((_QWORD *)a2 + 1);
                  else
                    v85 = *((_QWORD *)a2 + 2);
                  while (1)
                  {
                    if (v85 == v80)
                      goto LABEL_407;
                    v86 = v80++;
                    v87 = *(_BYTE *)(v81 + v86);
                    *((_QWORD *)a2 + 1) = v80;
                    v90 |= (unint64_t)(v87 & 0x7F) << v83;
                    if ((v87 & 0x80) == 0)
                      break;
                    v83 += 7;
                    v58 = v84++ > 8;
                    if (v58)
                    {
                      LODWORD(v90) = 0;
                      goto LABEL_133;
                    }
                  }
                  if (*((_BYTE *)a2 + 24))
                    LODWORD(v90) = 0;
LABEL_133:
                  v91 = v86 + 1;
                }
                else
                {
                  v88 = 0;
                  v89 = 0;
                  v90 = 0;
                  while (1)
                  {
                    v91 = v80 + 1;
                    *((_QWORD *)a2 + 1) = v80 + 1;
                    v92 = *(_BYTE *)(v81 + v80);
                    v90 |= (unint64_t)(v92 & 0x7F) << v88;
                    if ((v92 & 0x80) == 0)
                      break;
                    v88 += 7;
                    v80 = v91;
                    v58 = v89++ > 8;
                    if (v58)
                    {
                      LODWORD(v90) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v44 - 1) = v90;
              }
              while (v91 < v79 && !*((_BYTE *)a2 + 24));
            }
            goto LABEL_408;
          }
          v253 = (char *)*((_QWORD *)this + 5);
          v252 = *((_QWORD *)this + 6);
          if ((unint64_t)v253 >= v252)
          {
            v272 = (char *)*((_QWORD *)this + 4);
            v273 = (v253 - v272) >> 2;
            v274 = v273 + 1;
            if ((unint64_t)(v273 + 1) >> 62)
              goto LABEL_713;
            v275 = v252 - (_QWORD)v272;
            if (v275 >> 1 > v274)
              v274 = v275 >> 1;
            if ((unint64_t)v275 >= 0x7FFFFFFFFFFFFFFCLL)
              v276 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v276 = v274;
            if (v276)
            {
              v276 = (unint64_t)sub_2429114B8(v276);
              v272 = (char *)*((_QWORD *)this + 4);
              v253 = (char *)*((_QWORD *)this + 5);
            }
            else
            {
              v277 = 0;
            }
            v327 = (_DWORD *)(v276 + 4 * v273);
            *v327 = 0;
            v251 = v327 + 1;
            while (v253 != v272)
            {
              v328 = *((_DWORD *)v253 - 1);
              v253 -= 4;
              *--v327 = v328;
            }
            *((_QWORD *)this + 4) = v327;
            *((_QWORD *)this + 5) = v251;
            *((_QWORD *)this + 6) = v276 + 4 * v277;
            if (v272)
              operator delete(v272);
          }
          else
          {
            *(_DWORD *)v253 = 0;
            v251 = v253 + 4;
          }
          *((_QWORD *)this + 5) = v251;
          v329 = *((_QWORD *)a2 + 1);
          v330 = *((_QWORD *)a2 + 2);
          v331 = *(_QWORD *)a2;
          v332 = 0;
          v333 = 0;
          if (v329 <= 0xFFFFFFFFFFFFFFF5 && v329 + 10 <= v330)
          {
            v324 = 0;
            while (1)
            {
              v337 = v329 + 1;
              *((_QWORD *)a2 + 1) = v329 + 1;
              v338 = *(_BYTE *)(v331 + v329);
              v324 |= (unint64_t)(v338 & 0x7F) << v332;
              if ((v338 & 0x80) == 0)
                goto LABEL_703;
              v332 += 7;
              v329 = v337;
              v58 = v333++ > 8;
              if (v58)
                goto LABEL_702;
            }
          }
          v324 = 0;
          if (v330 <= v329)
            v330 = *((_QWORD *)a2 + 1);
          while (v330 != v329)
          {
            v335 = v329 + 1;
            v336 = *(_BYTE *)(v331 + v329);
            *((_QWORD *)a2 + 1) = v335;
            v324 |= (unint64_t)(v336 & 0x7F) << v332;
            if ((v336 & 0x80) == 0)
              goto LABEL_696;
            v332 += 7;
            v329 = v335;
            v58 = v333++ > 8;
            if (v58)
              goto LABEL_702;
          }
          goto LABEL_695;
        case 7u:
          if (v18 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            if (*((_QWORD *)a2 + 1) < *((_QWORD *)a2 + 2) && !*((_BYTE *)a2 + 24))
            {
              v44 = (char *)*((_QWORD *)this + 8);
              do
              {
                v93 = *((_QWORD *)this + 9);
                if ((unint64_t)v44 >= v93)
                {
                  v94 = (char *)*((_QWORD *)this + 7);
                  v95 = (v44 - v94) >> 2;
                  v96 = v95 + 1;
                  if ((unint64_t)(v95 + 1) >> 62)
                    goto LABEL_713;
                  v97 = v93 - (_QWORD)v94;
                  if (v97 >> 1 > v96)
                    v96 = v97 >> 1;
                  if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFFCLL)
                    v98 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v98 = v96;
                  if (v98)
                  {
                    v98 = (unint64_t)sub_2429114B8(v98);
                    v94 = (char *)*((_QWORD *)this + 7);
                    v44 = (char *)*((_QWORD *)this + 8);
                  }
                  else
                  {
                    v99 = 0;
                  }
                  v100 = (_DWORD *)(v98 + 4 * v95);
                  *v100 = 0;
                  v101 = (char *)(v100 + 1);
                  while (v44 != v94)
                  {
                    v102 = *((_DWORD *)v44 - 1);
                    v44 -= 4;
                    *--v100 = v102;
                  }
                  *((_QWORD *)this + 7) = v100;
                  *((_QWORD *)this + 8) = v101;
                  *((_QWORD *)this + 9) = v98 + 4 * v99;
                  if (v94)
                    operator delete(v94);
                  v44 = v101;
                }
                else
                {
                  *(_DWORD *)v44 = 0;
                  v44 += 4;
                }
                *((_QWORD *)this + 8) = v44;
                v104 = *((_QWORD *)a2 + 1);
                v103 = *((_QWORD *)a2 + 2);
                v105 = *(_QWORD *)a2;
                if (v104 > 0xFFFFFFFFFFFFFFF5 || v104 + 10 > v103)
                {
                  v107 = 0;
                  v108 = 0;
                  v114 = 0;
                  if (v103 <= v104)
                    v109 = *((_QWORD *)a2 + 1);
                  else
                    v109 = *((_QWORD *)a2 + 2);
                  while (1)
                  {
                    if (v109 == v104)
                      goto LABEL_407;
                    v110 = v104++;
                    v111 = *(_BYTE *)(v105 + v110);
                    *((_QWORD *)a2 + 1) = v104;
                    v114 |= (unint64_t)(v111 & 0x7F) << v107;
                    if ((v111 & 0x80) == 0)
                      break;
                    v107 += 7;
                    v58 = v108++ > 8;
                    if (v58)
                    {
                      LODWORD(v114) = 0;
                      goto LABEL_178;
                    }
                  }
                  if (*((_BYTE *)a2 + 24))
                    LODWORD(v114) = 0;
LABEL_178:
                  v115 = v110 + 1;
                }
                else
                {
                  v112 = 0;
                  v113 = 0;
                  v114 = 0;
                  while (1)
                  {
                    v115 = v104 + 1;
                    *((_QWORD *)a2 + 1) = v104 + 1;
                    v116 = *(_BYTE *)(v105 + v104);
                    v114 |= (unint64_t)(v116 & 0x7F) << v112;
                    if ((v116 & 0x80) == 0)
                      break;
                    v112 += 7;
                    v104 = v115;
                    v58 = v113++ > 8;
                    if (v58)
                    {
                      LODWORD(v114) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v44 - 1) = v114;
              }
              while (v115 < v103 && !*((_BYTE *)a2 + 24));
            }
            goto LABEL_408;
          }
          v255 = (char *)*((_QWORD *)this + 8);
          v254 = *((_QWORD *)this + 9);
          if ((unint64_t)v255 >= v254)
          {
            v278 = (char *)*((_QWORD *)this + 7);
            v279 = (v255 - v278) >> 2;
            v280 = v279 + 1;
            if ((unint64_t)(v279 + 1) >> 62)
              goto LABEL_713;
            v281 = v254 - (_QWORD)v278;
            if (v281 >> 1 > v280)
              v280 = v281 >> 1;
            if ((unint64_t)v281 >= 0x7FFFFFFFFFFFFFFCLL)
              v282 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v282 = v280;
            if (v282)
            {
              v282 = (unint64_t)sub_2429114B8(v282);
              v278 = (char *)*((_QWORD *)this + 7);
              v255 = (char *)*((_QWORD *)this + 8);
            }
            else
            {
              v283 = 0;
            }
            v339 = (_DWORD *)(v282 + 4 * v279);
            *v339 = 0;
            v251 = v339 + 1;
            while (v255 != v278)
            {
              v340 = *((_DWORD *)v255 - 1);
              v255 -= 4;
              *--v339 = v340;
            }
            *((_QWORD *)this + 7) = v339;
            *((_QWORD *)this + 8) = v251;
            *((_QWORD *)this + 9) = v282 + 4 * v283;
            if (v278)
              operator delete(v278);
          }
          else
          {
            *(_DWORD *)v255 = 0;
            v251 = v255 + 4;
          }
          *((_QWORD *)this + 8) = v251;
          v341 = *((_QWORD *)a2 + 1);
          v342 = *((_QWORD *)a2 + 2);
          v343 = *(_QWORD *)a2;
          v344 = 0;
          v345 = 0;
          if (v341 <= 0xFFFFFFFFFFFFFFF5 && v341 + 10 <= v342)
          {
            v324 = 0;
            while (1)
            {
              v349 = v341 + 1;
              *((_QWORD *)a2 + 1) = v341 + 1;
              v350 = *(_BYTE *)(v343 + v341);
              v324 |= (unint64_t)(v350 & 0x7F) << v344;
              if ((v350 & 0x80) == 0)
                goto LABEL_703;
              v344 += 7;
              v341 = v349;
              v58 = v345++ > 8;
              if (v58)
                goto LABEL_702;
            }
          }
          v324 = 0;
          if (v342 <= v341)
            v342 = *((_QWORD *)a2 + 1);
          while (v342 != v341)
          {
            v347 = v341 + 1;
            v348 = *(_BYTE *)(v343 + v341);
            *((_QWORD *)a2 + 1) = v347;
            v324 |= (unint64_t)(v348 & 0x7F) << v344;
            if ((v348 & 0x80) == 0)
              goto LABEL_696;
            v344 += 7;
            v341 = v347;
            v58 = v345++ > 8;
            if (v58)
              goto LABEL_702;
          }
          goto LABEL_695;
        case 8u:
          if (v18 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            if (*((_QWORD *)a2 + 1) < *((_QWORD *)a2 + 2) && !*((_BYTE *)a2 + 24))
            {
              v44 = (char *)*((_QWORD *)this + 11);
              do
              {
                v117 = *((_QWORD *)this + 12);
                if ((unint64_t)v44 >= v117)
                {
                  v118 = (char *)*((_QWORD *)this + 10);
                  v119 = (v44 - v118) >> 2;
                  v120 = v119 + 1;
                  if ((unint64_t)(v119 + 1) >> 62)
                    goto LABEL_713;
                  v121 = v117 - (_QWORD)v118;
                  if (v121 >> 1 > v120)
                    v120 = v121 >> 1;
                  if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFFCLL)
                    v122 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v122 = v120;
                  if (v122)
                  {
                    v122 = (unint64_t)sub_2429114B8(v122);
                    v118 = (char *)*((_QWORD *)this + 10);
                    v44 = (char *)*((_QWORD *)this + 11);
                  }
                  else
                  {
                    v123 = 0;
                  }
                  v124 = (_DWORD *)(v122 + 4 * v119);
                  *v124 = 0;
                  v125 = (char *)(v124 + 1);
                  while (v44 != v118)
                  {
                    v126 = *((_DWORD *)v44 - 1);
                    v44 -= 4;
                    *--v124 = v126;
                  }
                  *((_QWORD *)this + 10) = v124;
                  *((_QWORD *)this + 11) = v125;
                  *((_QWORD *)this + 12) = v122 + 4 * v123;
                  if (v118)
                    operator delete(v118);
                  v44 = v125;
                }
                else
                {
                  *(_DWORD *)v44 = 0;
                  v44 += 4;
                }
                *((_QWORD *)this + 11) = v44;
                v128 = *((_QWORD *)a2 + 1);
                v127 = *((_QWORD *)a2 + 2);
                v129 = *(_QWORD *)a2;
                if (v128 > 0xFFFFFFFFFFFFFFF5 || v128 + 10 > v127)
                {
                  v131 = 0;
                  v132 = 0;
                  v138 = 0;
                  if (v127 <= v128)
                    v133 = *((_QWORD *)a2 + 1);
                  else
                    v133 = *((_QWORD *)a2 + 2);
                  while (1)
                  {
                    if (v133 == v128)
                      goto LABEL_407;
                    v134 = v128++;
                    v135 = *(_BYTE *)(v129 + v134);
                    *((_QWORD *)a2 + 1) = v128;
                    v138 |= (unint64_t)(v135 & 0x7F) << v131;
                    if ((v135 & 0x80) == 0)
                      break;
                    v131 += 7;
                    v58 = v132++ > 8;
                    if (v58)
                    {
                      LODWORD(v138) = 0;
                      goto LABEL_223;
                    }
                  }
                  if (*((_BYTE *)a2 + 24))
                    LODWORD(v138) = 0;
LABEL_223:
                  v139 = v134 + 1;
                }
                else
                {
                  v136 = 0;
                  v137 = 0;
                  v138 = 0;
                  while (1)
                  {
                    v139 = v128 + 1;
                    *((_QWORD *)a2 + 1) = v128 + 1;
                    v140 = *(_BYTE *)(v129 + v128);
                    v138 |= (unint64_t)(v140 & 0x7F) << v136;
                    if ((v140 & 0x80) == 0)
                      break;
                    v136 += 7;
                    v128 = v139;
                    v58 = v137++ > 8;
                    if (v58)
                    {
                      LODWORD(v138) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v44 - 1) = v138;
              }
              while (v139 < v127 && !*((_BYTE *)a2 + 24));
            }
            goto LABEL_408;
          }
          v257 = (char *)*((_QWORD *)this + 11);
          v256 = *((_QWORD *)this + 12);
          if ((unint64_t)v257 >= v256)
          {
            v284 = (char *)*((_QWORD *)this + 10);
            v285 = (v257 - v284) >> 2;
            v286 = v285 + 1;
            if ((unint64_t)(v285 + 1) >> 62)
              goto LABEL_713;
            v287 = v256 - (_QWORD)v284;
            if (v287 >> 1 > v286)
              v286 = v287 >> 1;
            if ((unint64_t)v287 >= 0x7FFFFFFFFFFFFFFCLL)
              v288 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v288 = v286;
            if (v288)
            {
              v288 = (unint64_t)sub_2429114B8(v288);
              v284 = (char *)*((_QWORD *)this + 10);
              v257 = (char *)*((_QWORD *)this + 11);
            }
            else
            {
              v289 = 0;
            }
            v351 = (_DWORD *)(v288 + 4 * v285);
            *v351 = 0;
            v251 = v351 + 1;
            while (v257 != v284)
            {
              v352 = *((_DWORD *)v257 - 1);
              v257 -= 4;
              *--v351 = v352;
            }
            *((_QWORD *)this + 10) = v351;
            *((_QWORD *)this + 11) = v251;
            *((_QWORD *)this + 12) = v288 + 4 * v289;
            if (v284)
              operator delete(v284);
          }
          else
          {
            *(_DWORD *)v257 = 0;
            v251 = v257 + 4;
          }
          *((_QWORD *)this + 11) = v251;
          v353 = *((_QWORD *)a2 + 1);
          v354 = *((_QWORD *)a2 + 2);
          v355 = *(_QWORD *)a2;
          v356 = 0;
          v357 = 0;
          if (v353 <= 0xFFFFFFFFFFFFFFF5 && v353 + 10 <= v354)
          {
            v324 = 0;
            while (1)
            {
              v361 = v353 + 1;
              *((_QWORD *)a2 + 1) = v353 + 1;
              v362 = *(_BYTE *)(v355 + v353);
              v324 |= (unint64_t)(v362 & 0x7F) << v356;
              if ((v362 & 0x80) == 0)
                goto LABEL_703;
              v356 += 7;
              v353 = v361;
              v58 = v357++ > 8;
              if (v58)
                goto LABEL_702;
            }
          }
          v324 = 0;
          if (v354 <= v353)
            v354 = *((_QWORD *)a2 + 1);
          while (v354 != v353)
          {
            v359 = v353 + 1;
            v360 = *(_BYTE *)(v355 + v353);
            *((_QWORD *)a2 + 1) = v359;
            v324 |= (unint64_t)(v360 & 0x7F) << v356;
            if ((v360 & 0x80) == 0)
              goto LABEL_696;
            v356 += 7;
            v353 = v359;
            v58 = v357++ > 8;
            if (v58)
              goto LABEL_702;
          }
          goto LABEL_695;
        case 9u:
          if (v18 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            if (*((_QWORD *)a2 + 1) < *((_QWORD *)a2 + 2) && !*((_BYTE *)a2 + 24))
            {
              v44 = (char *)*((_QWORD *)this + 17);
              do
              {
                v141 = *((_QWORD *)this + 18);
                if ((unint64_t)v44 >= v141)
                {
                  v142 = (char *)*((_QWORD *)this + 16);
                  v143 = (v44 - v142) >> 2;
                  v144 = v143 + 1;
                  if ((unint64_t)(v143 + 1) >> 62)
                    goto LABEL_713;
                  v145 = v141 - (_QWORD)v142;
                  if (v145 >> 1 > v144)
                    v144 = v145 >> 1;
                  if ((unint64_t)v145 >= 0x7FFFFFFFFFFFFFFCLL)
                    v146 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v146 = v144;
                  if (v146)
                  {
                    v146 = (unint64_t)sub_2429114B8(v146);
                    v142 = (char *)*((_QWORD *)this + 16);
                    v44 = (char *)*((_QWORD *)this + 17);
                  }
                  else
                  {
                    v147 = 0;
                  }
                  v148 = (_DWORD *)(v146 + 4 * v143);
                  *v148 = 0;
                  v149 = (char *)(v148 + 1);
                  while (v44 != v142)
                  {
                    v150 = *((_DWORD *)v44 - 1);
                    v44 -= 4;
                    *--v148 = v150;
                  }
                  *((_QWORD *)this + 16) = v148;
                  *((_QWORD *)this + 17) = v149;
                  *((_QWORD *)this + 18) = v146 + 4 * v147;
                  if (v142)
                    operator delete(v142);
                  v44 = v149;
                }
                else
                {
                  *(_DWORD *)v44 = 0;
                  v44 += 4;
                }
                *((_QWORD *)this + 17) = v44;
                v152 = *((_QWORD *)a2 + 1);
                v151 = *((_QWORD *)a2 + 2);
                v153 = *(_QWORD *)a2;
                if (v152 > 0xFFFFFFFFFFFFFFF5 || v152 + 10 > v151)
                {
                  v155 = 0;
                  v156 = 0;
                  v162 = 0;
                  if (v151 <= v152)
                    v157 = *((_QWORD *)a2 + 1);
                  else
                    v157 = *((_QWORD *)a2 + 2);
                  while (1)
                  {
                    if (v157 == v152)
                      goto LABEL_407;
                    v158 = v152++;
                    v159 = *(_BYTE *)(v153 + v158);
                    *((_QWORD *)a2 + 1) = v152;
                    v162 |= (unint64_t)(v159 & 0x7F) << v155;
                    if ((v159 & 0x80) == 0)
                      break;
                    v155 += 7;
                    v58 = v156++ > 8;
                    if (v58)
                    {
                      LODWORD(v162) = 0;
                      goto LABEL_268;
                    }
                  }
                  if (*((_BYTE *)a2 + 24))
                    LODWORD(v162) = 0;
LABEL_268:
                  v163 = v158 + 1;
                }
                else
                {
                  v160 = 0;
                  v161 = 0;
                  v162 = 0;
                  while (1)
                  {
                    v163 = v152 + 1;
                    *((_QWORD *)a2 + 1) = v152 + 1;
                    v164 = *(_BYTE *)(v153 + v152);
                    v162 |= (unint64_t)(v164 & 0x7F) << v160;
                    if ((v164 & 0x80) == 0)
                      break;
                    v160 += 7;
                    v152 = v163;
                    v58 = v161++ > 8;
                    if (v58)
                    {
                      LODWORD(v162) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v44 - 1) = v162;
              }
              while (v163 < v151 && !*((_BYTE *)a2 + 24));
            }
            goto LABEL_408;
          }
          v259 = (char *)*((_QWORD *)this + 17);
          v258 = *((_QWORD *)this + 18);
          if ((unint64_t)v259 >= v258)
          {
            v290 = (char *)*((_QWORD *)this + 16);
            v291 = (v259 - v290) >> 2;
            v292 = v291 + 1;
            if ((unint64_t)(v291 + 1) >> 62)
              goto LABEL_713;
            v293 = v258 - (_QWORD)v290;
            if (v293 >> 1 > v292)
              v292 = v293 >> 1;
            if ((unint64_t)v293 >= 0x7FFFFFFFFFFFFFFCLL)
              v294 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v294 = v292;
            if (v294)
            {
              v294 = (unint64_t)sub_2429114B8(v294);
              v290 = (char *)*((_QWORD *)this + 16);
              v259 = (char *)*((_QWORD *)this + 17);
            }
            else
            {
              v295 = 0;
            }
            v363 = (_DWORD *)(v294 + 4 * v291);
            *v363 = 0;
            v251 = v363 + 1;
            while (v259 != v290)
            {
              v364 = *((_DWORD *)v259 - 1);
              v259 -= 4;
              *--v363 = v364;
            }
            *((_QWORD *)this + 16) = v363;
            *((_QWORD *)this + 17) = v251;
            *((_QWORD *)this + 18) = v294 + 4 * v295;
            if (v290)
              operator delete(v290);
          }
          else
          {
            *(_DWORD *)v259 = 0;
            v251 = v259 + 4;
          }
          *((_QWORD *)this + 17) = v251;
          v365 = *((_QWORD *)a2 + 1);
          v366 = *((_QWORD *)a2 + 2);
          v367 = *(_QWORD *)a2;
          v368 = 0;
          v369 = 0;
          if (v365 <= 0xFFFFFFFFFFFFFFF5 && v365 + 10 <= v366)
          {
            v324 = 0;
            while (1)
            {
              v373 = v365 + 1;
              *((_QWORD *)a2 + 1) = v365 + 1;
              v374 = *(_BYTE *)(v367 + v365);
              v324 |= (unint64_t)(v374 & 0x7F) << v368;
              if ((v374 & 0x80) == 0)
                goto LABEL_703;
              v368 += 7;
              v365 = v373;
              v58 = v369++ > 8;
              if (v58)
                goto LABEL_702;
            }
          }
          v324 = 0;
          if (v366 <= v365)
            v366 = *((_QWORD *)a2 + 1);
          while (v366 != v365)
          {
            v371 = v365 + 1;
            v372 = *(_BYTE *)(v367 + v365);
            *((_QWORD *)a2 + 1) = v371;
            v324 |= (unint64_t)(v372 & 0x7F) << v368;
            if ((v372 & 0x80) == 0)
              goto LABEL_696;
            v368 += 7;
            v365 = v371;
            v58 = v369++ > 8;
            if (v58)
              goto LABEL_702;
          }
          goto LABEL_695;
        case 0xAu:
          if (v18 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            if (*((_QWORD *)a2 + 1) < *((_QWORD *)a2 + 2) && !*((_BYTE *)a2 + 24))
            {
              v44 = (char *)*((_QWORD *)this + 20);
              do
              {
                v165 = *((_QWORD *)this + 21);
                if ((unint64_t)v44 >= v165)
                {
                  v166 = (char *)*((_QWORD *)this + 19);
                  v167 = (v44 - v166) >> 2;
                  v168 = v167 + 1;
                  if ((unint64_t)(v167 + 1) >> 62)
                    goto LABEL_713;
                  v169 = v165 - (_QWORD)v166;
                  if (v169 >> 1 > v168)
                    v168 = v169 >> 1;
                  if ((unint64_t)v169 >= 0x7FFFFFFFFFFFFFFCLL)
                    v170 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v170 = v168;
                  if (v170)
                  {
                    v170 = (unint64_t)sub_2429114B8(v170);
                    v166 = (char *)*((_QWORD *)this + 19);
                    v44 = (char *)*((_QWORD *)this + 20);
                  }
                  else
                  {
                    v171 = 0;
                  }
                  v172 = (_DWORD *)(v170 + 4 * v167);
                  *v172 = 0;
                  v173 = (char *)(v172 + 1);
                  while (v44 != v166)
                  {
                    v174 = *((_DWORD *)v44 - 1);
                    v44 -= 4;
                    *--v172 = v174;
                  }
                  *((_QWORD *)this + 19) = v172;
                  *((_QWORD *)this + 20) = v173;
                  *((_QWORD *)this + 21) = v170 + 4 * v171;
                  if (v166)
                    operator delete(v166);
                  v44 = v173;
                }
                else
                {
                  *(_DWORD *)v44 = 0;
                  v44 += 4;
                }
                *((_QWORD *)this + 20) = v44;
                v176 = *((_QWORD *)a2 + 1);
                v175 = *((_QWORD *)a2 + 2);
                v177 = *(_QWORD *)a2;
                if (v176 > 0xFFFFFFFFFFFFFFF5 || v176 + 10 > v175)
                {
                  v179 = 0;
                  v180 = 0;
                  v186 = 0;
                  if (v175 <= v176)
                    v181 = *((_QWORD *)a2 + 1);
                  else
                    v181 = *((_QWORD *)a2 + 2);
                  while (1)
                  {
                    if (v181 == v176)
                      goto LABEL_407;
                    v182 = v176++;
                    v183 = *(_BYTE *)(v177 + v182);
                    *((_QWORD *)a2 + 1) = v176;
                    v186 |= (unint64_t)(v183 & 0x7F) << v179;
                    if ((v183 & 0x80) == 0)
                      break;
                    v179 += 7;
                    v58 = v180++ > 8;
                    if (v58)
                    {
                      LODWORD(v186) = 0;
                      goto LABEL_313;
                    }
                  }
                  if (*((_BYTE *)a2 + 24))
                    LODWORD(v186) = 0;
LABEL_313:
                  v187 = v182 + 1;
                }
                else
                {
                  v184 = 0;
                  v185 = 0;
                  v186 = 0;
                  while (1)
                  {
                    v187 = v176 + 1;
                    *((_QWORD *)a2 + 1) = v176 + 1;
                    v188 = *(_BYTE *)(v177 + v176);
                    v186 |= (unint64_t)(v188 & 0x7F) << v184;
                    if ((v188 & 0x80) == 0)
                      break;
                    v184 += 7;
                    v176 = v187;
                    v58 = v185++ > 8;
                    if (v58)
                    {
                      LODWORD(v186) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v44 - 1) = v186;
              }
              while (v187 < v175 && !*((_BYTE *)a2 + 24));
            }
            goto LABEL_408;
          }
          v261 = (char *)*((_QWORD *)this + 20);
          v260 = *((_QWORD *)this + 21);
          if ((unint64_t)v261 >= v260)
          {
            v296 = (char *)*((_QWORD *)this + 19);
            v297 = (v261 - v296) >> 2;
            v298 = v297 + 1;
            if ((unint64_t)(v297 + 1) >> 62)
              goto LABEL_713;
            v299 = v260 - (_QWORD)v296;
            if (v299 >> 1 > v298)
              v298 = v299 >> 1;
            if ((unint64_t)v299 >= 0x7FFFFFFFFFFFFFFCLL)
              v300 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v300 = v298;
            if (v300)
            {
              v300 = (unint64_t)sub_2429114B8(v300);
              v296 = (char *)*((_QWORD *)this + 19);
              v261 = (char *)*((_QWORD *)this + 20);
            }
            else
            {
              v301 = 0;
            }
            v375 = (_DWORD *)(v300 + 4 * v297);
            *v375 = 0;
            v251 = v375 + 1;
            while (v261 != v296)
            {
              v376 = *((_DWORD *)v261 - 1);
              v261 -= 4;
              *--v375 = v376;
            }
            *((_QWORD *)this + 19) = v375;
            *((_QWORD *)this + 20) = v251;
            *((_QWORD *)this + 21) = v300 + 4 * v301;
            if (v296)
              operator delete(v296);
          }
          else
          {
            *(_DWORD *)v261 = 0;
            v251 = v261 + 4;
          }
          *((_QWORD *)this + 20) = v251;
          v377 = *((_QWORD *)a2 + 1);
          v378 = *((_QWORD *)a2 + 2);
          v379 = *(_QWORD *)a2;
          v380 = 0;
          v381 = 0;
          if (v377 <= 0xFFFFFFFFFFFFFFF5 && v377 + 10 <= v378)
          {
            v324 = 0;
            while (1)
            {
              v385 = v377 + 1;
              *((_QWORD *)a2 + 1) = v377 + 1;
              v386 = *(_BYTE *)(v379 + v377);
              v324 |= (unint64_t)(v386 & 0x7F) << v380;
              if ((v386 & 0x80) == 0)
                goto LABEL_703;
              v380 += 7;
              v377 = v385;
              v58 = v381++ > 8;
              if (v58)
                goto LABEL_702;
            }
          }
          v324 = 0;
          if (v378 <= v377)
            v378 = *((_QWORD *)a2 + 1);
          while (v378 != v377)
          {
            v383 = v377 + 1;
            v384 = *(_BYTE *)(v379 + v377);
            *((_QWORD *)a2 + 1) = v383;
            v324 |= (unint64_t)(v384 & 0x7F) << v380;
            if ((v384 & 0x80) == 0)
              goto LABEL_696;
            v380 += 7;
            v377 = v383;
            v58 = v381++ > 8;
            if (v58)
              goto LABEL_702;
          }
          goto LABEL_695;
        case 0xBu:
          if (v18 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            if (*((_QWORD *)a2 + 1) < *((_QWORD *)a2 + 2) && !*((_BYTE *)a2 + 24))
            {
              v44 = (char *)*((_QWORD *)this + 23);
              do
              {
                v189 = *((_QWORD *)this + 24);
                if ((unint64_t)v44 >= v189)
                {
                  v190 = (char *)*((_QWORD *)this + 22);
                  v191 = (v44 - v190) >> 2;
                  v192 = v191 + 1;
                  if ((unint64_t)(v191 + 1) >> 62)
                    goto LABEL_713;
                  v193 = v189 - (_QWORD)v190;
                  if (v193 >> 1 > v192)
                    v192 = v193 >> 1;
                  if ((unint64_t)v193 >= 0x7FFFFFFFFFFFFFFCLL)
                    v194 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v194 = v192;
                  if (v194)
                  {
                    v194 = (unint64_t)sub_2429114B8(v194);
                    v190 = (char *)*((_QWORD *)this + 22);
                    v44 = (char *)*((_QWORD *)this + 23);
                  }
                  else
                  {
                    v195 = 0;
                  }
                  v196 = (_DWORD *)(v194 + 4 * v191);
                  *v196 = 0;
                  v197 = (char *)(v196 + 1);
                  while (v44 != v190)
                  {
                    v198 = *((_DWORD *)v44 - 1);
                    v44 -= 4;
                    *--v196 = v198;
                  }
                  *((_QWORD *)this + 22) = v196;
                  *((_QWORD *)this + 23) = v197;
                  *((_QWORD *)this + 24) = v194 + 4 * v195;
                  if (v190)
                    operator delete(v190);
                  v44 = v197;
                }
                else
                {
                  *(_DWORD *)v44 = 0;
                  v44 += 4;
                }
                *((_QWORD *)this + 23) = v44;
                v200 = *((_QWORD *)a2 + 1);
                v199 = *((_QWORD *)a2 + 2);
                v201 = *(_QWORD *)a2;
                if (v200 > 0xFFFFFFFFFFFFFFF5 || v200 + 10 > v199)
                {
                  v203 = 0;
                  v204 = 0;
                  v210 = 0;
                  if (v199 <= v200)
                    v205 = *((_QWORD *)a2 + 1);
                  else
                    v205 = *((_QWORD *)a2 + 2);
                  while (1)
                  {
                    if (v205 == v200)
                      goto LABEL_407;
                    v206 = v200++;
                    v207 = *(_BYTE *)(v201 + v206);
                    *((_QWORD *)a2 + 1) = v200;
                    v210 |= (unint64_t)(v207 & 0x7F) << v203;
                    if ((v207 & 0x80) == 0)
                      break;
                    v203 += 7;
                    v58 = v204++ > 8;
                    if (v58)
                    {
                      LODWORD(v210) = 0;
                      goto LABEL_358;
                    }
                  }
                  if (*((_BYTE *)a2 + 24))
                    LODWORD(v210) = 0;
LABEL_358:
                  v211 = v206 + 1;
                }
                else
                {
                  v208 = 0;
                  v209 = 0;
                  v210 = 0;
                  while (1)
                  {
                    v211 = v200 + 1;
                    *((_QWORD *)a2 + 1) = v200 + 1;
                    v212 = *(_BYTE *)(v201 + v200);
                    v210 |= (unint64_t)(v212 & 0x7F) << v208;
                    if ((v212 & 0x80) == 0)
                      break;
                    v208 += 7;
                    v200 = v211;
                    v58 = v209++ > 8;
                    if (v58)
                    {
                      LODWORD(v210) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v44 - 1) = v210;
              }
              while (v211 < v199 && !*((_BYTE *)a2 + 24));
            }
            goto LABEL_408;
          }
          v263 = (char *)*((_QWORD *)this + 23);
          v262 = *((_QWORD *)this + 24);
          if ((unint64_t)v263 >= v262)
          {
            v302 = (char *)*((_QWORD *)this + 22);
            v303 = (v263 - v302) >> 2;
            v304 = v303 + 1;
            if ((unint64_t)(v303 + 1) >> 62)
              goto LABEL_713;
            v305 = v262 - (_QWORD)v302;
            if (v305 >> 1 > v304)
              v304 = v305 >> 1;
            if ((unint64_t)v305 >= 0x7FFFFFFFFFFFFFFCLL)
              v306 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v306 = v304;
            if (v306)
            {
              v306 = (unint64_t)sub_2429114B8(v306);
              v302 = (char *)*((_QWORD *)this + 22);
              v263 = (char *)*((_QWORD *)this + 23);
            }
            else
            {
              v307 = 0;
            }
            v387 = (_DWORD *)(v306 + 4 * v303);
            *v387 = 0;
            v251 = v387 + 1;
            while (v263 != v302)
            {
              v388 = *((_DWORD *)v263 - 1);
              v263 -= 4;
              *--v387 = v388;
            }
            *((_QWORD *)this + 22) = v387;
            *((_QWORD *)this + 23) = v251;
            *((_QWORD *)this + 24) = v306 + 4 * v307;
            if (v302)
              operator delete(v302);
          }
          else
          {
            *(_DWORD *)v263 = 0;
            v251 = v263 + 4;
          }
          *((_QWORD *)this + 23) = v251;
          v389 = *((_QWORD *)a2 + 1);
          v390 = *((_QWORD *)a2 + 2);
          v391 = *(_QWORD *)a2;
          v392 = 0;
          v393 = 0;
          if (v389 <= 0xFFFFFFFFFFFFFFF5 && v389 + 10 <= v390)
          {
            v324 = 0;
            while (1)
            {
              v397 = v389 + 1;
              *((_QWORD *)a2 + 1) = v389 + 1;
              v398 = *(_BYTE *)(v391 + v389);
              v324 |= (unint64_t)(v398 & 0x7F) << v392;
              if ((v398 & 0x80) == 0)
                goto LABEL_703;
              v392 += 7;
              v389 = v397;
              v58 = v393++ > 8;
              if (v58)
                goto LABEL_702;
            }
          }
          v324 = 0;
          if (v390 <= v389)
            v390 = *((_QWORD *)a2 + 1);
          while (v390 != v389)
          {
            v395 = v389 + 1;
            v396 = *(_BYTE *)(v391 + v389);
            *((_QWORD *)a2 + 1) = v395;
            v324 |= (unint64_t)(v396 & 0x7F) << v392;
            if ((v396 & 0x80) == 0)
              goto LABEL_696;
            v392 += 7;
            v389 = v395;
            v58 = v393++ > 8;
            if (v58)
              goto LABEL_702;
          }
          goto LABEL_695;
        case 0xCu:
          if (v18 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            if (*((_QWORD *)a2 + 1) < *((_QWORD *)a2 + 2) && !*((_BYTE *)a2 + 24))
            {
              v44 = (char *)*((_QWORD *)this + 14);
              do
              {
                v213 = *((_QWORD *)this + 15);
                if ((unint64_t)v44 >= v213)
                {
                  v214 = (char *)*((_QWORD *)this + 13);
                  v215 = (v44 - v214) >> 2;
                  v216 = v215 + 1;
                  if ((unint64_t)(v215 + 1) >> 62)
                    goto LABEL_713;
                  v217 = v213 - (_QWORD)v214;
                  if (v217 >> 1 > v216)
                    v216 = v217 >> 1;
                  if ((unint64_t)v217 >= 0x7FFFFFFFFFFFFFFCLL)
                    v218 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v218 = v216;
                  if (v218)
                  {
                    v218 = (unint64_t)sub_2429114B8(v218);
                    v214 = (char *)*((_QWORD *)this + 13);
                    v44 = (char *)*((_QWORD *)this + 14);
                  }
                  else
                  {
                    v219 = 0;
                  }
                  v220 = (_DWORD *)(v218 + 4 * v215);
                  *v220 = 0;
                  v221 = (char *)(v220 + 1);
                  while (v44 != v214)
                  {
                    v222 = *((_DWORD *)v44 - 1);
                    v44 -= 4;
                    *--v220 = v222;
                  }
                  *((_QWORD *)this + 13) = v220;
                  *((_QWORD *)this + 14) = v221;
                  *((_QWORD *)this + 15) = v218 + 4 * v219;
                  if (v214)
                    operator delete(v214);
                  v44 = v221;
                }
                else
                {
                  *(_DWORD *)v44 = 0;
                  v44 += 4;
                }
                *((_QWORD *)this + 14) = v44;
                v224 = *((_QWORD *)a2 + 1);
                v223 = *((_QWORD *)a2 + 2);
                v225 = *(_QWORD *)a2;
                if (v224 <= 0xFFFFFFFFFFFFFFF5 && v224 + 10 <= v223)
                {
                  v232 = 0;
                  v233 = 0;
                  v234 = 0;
                  while (1)
                  {
                    v235 = v224 + 1;
                    *((_QWORD *)a2 + 1) = v224 + 1;
                    v236 = *(_BYTE *)(v225 + v224);
                    v234 |= (unint64_t)(v236 & 0x7F) << v232;
                    if ((v236 & 0x80) == 0)
                      goto LABEL_404;
                    v232 += 7;
                    v224 = v235;
                    v58 = v233++ > 8;
                    if (v58)
                    {
                      LODWORD(v234) = 0;
                      goto LABEL_404;
                    }
                  }
                }
                v227 = 0;
                v228 = 0;
                v234 = 0;
                if (v223 <= v224)
                  v229 = *((_QWORD *)a2 + 1);
                else
                  v229 = *((_QWORD *)a2 + 2);
                while (1)
                {
                  if (v229 == v224)
                  {
LABEL_407:
                    *((_BYTE *)a2 + 24) = 1;
                    *((_DWORD *)v44 - 1) = 0;
                    goto LABEL_408;
                  }
                  v230 = v224++;
                  v231 = *(_BYTE *)(v225 + v230);
                  *((_QWORD *)a2 + 1) = v224;
                  v234 |= (unint64_t)(v231 & 0x7F) << v227;
                  if ((v231 & 0x80) == 0)
                    break;
                  v227 += 7;
                  v58 = v228++ > 8;
                  if (v58)
                  {
                    LODWORD(v234) = 0;
                    goto LABEL_403;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v234) = 0;
LABEL_403:
                v235 = v230 + 1;
LABEL_404:
                *((_DWORD *)v44 - 1) = v234;
              }
              while (v235 < v223 && !*((_BYTE *)a2 + 24));
            }
LABEL_408:
            PB::Reader::recallMark();
          }
          else
          {
            v265 = (char *)*((_QWORD *)this + 14);
            v264 = *((_QWORD *)this + 15);
            if ((unint64_t)v265 >= v264)
            {
              v308 = (char *)*((_QWORD *)this + 13);
              v309 = (v265 - v308) >> 2;
              v310 = v309 + 1;
              if ((unint64_t)(v309 + 1) >> 62)
LABEL_713:
                sub_242729A44();
              v311 = v264 - (_QWORD)v308;
              if (v311 >> 1 > v310)
                v310 = v311 >> 1;
              if ((unint64_t)v311 >= 0x7FFFFFFFFFFFFFFCLL)
                v312 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v312 = v310;
              if (v312)
              {
                v312 = (unint64_t)sub_2429114B8(v312);
                v308 = (char *)*((_QWORD *)this + 13);
                v265 = (char *)*((_QWORD *)this + 14);
              }
              else
              {
                v313 = 0;
              }
              v399 = (_DWORD *)(v312 + 4 * v309);
              *v399 = 0;
              v251 = v399 + 1;
              while (v265 != v308)
              {
                v400 = *((_DWORD *)v265 - 1);
                v265 -= 4;
                *--v399 = v400;
              }
              *((_QWORD *)this + 13) = v399;
              *((_QWORD *)this + 14) = v251;
              *((_QWORD *)this + 15) = v312 + 4 * v313;
              if (v308)
                operator delete(v308);
            }
            else
            {
              *(_DWORD *)v265 = 0;
              v251 = v265 + 4;
            }
            *((_QWORD *)this + 14) = v251;
            v401 = *((_QWORD *)a2 + 1);
            v402 = *((_QWORD *)a2 + 2);
            v403 = *(_QWORD *)a2;
            v404 = 0;
            v405 = 0;
            if (v401 > 0xFFFFFFFFFFFFFFF5 || v401 + 10 > v402)
            {
              v324 = 0;
              if (v402 <= v401)
                v402 = *((_QWORD *)a2 + 1);
              while (v402 != v401)
              {
                v407 = v401 + 1;
                v408 = *(_BYTE *)(v403 + v401);
                *((_QWORD *)a2 + 1) = v407;
                v324 |= (unint64_t)(v408 & 0x7F) << v404;
                if ((v408 & 0x80) == 0)
                {
LABEL_696:
                  if (*((_BYTE *)a2 + 24))
                    LODWORD(v324) = 0;
                  goto LABEL_703;
                }
                v404 += 7;
                v401 = v407;
                v58 = v405++ > 8;
                if (v58)
                {
LABEL_702:
                  LODWORD(v324) = 0;
                  goto LABEL_703;
                }
              }
LABEL_695:
              LODWORD(v324) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v324 = 0;
              while (1)
              {
                v409 = v401 + 1;
                *((_QWORD *)a2 + 1) = v401 + 1;
                v410 = *(_BYTE *)(v403 + v401);
                v324 |= (unint64_t)(v410 & 0x7F) << v404;
                if ((v410 & 0x80) == 0)
                  break;
                v404 += 7;
                v401 = v409;
                v58 = v405++ > 8;
                if (v58)
                  goto LABEL_702;
              }
            }
LABEL_703:
            *(v251 - 1) = v324;
          }
          break;
        default:
          goto LABEL_19;
      }
      goto LABEL_704;
    }
    v14 = 0;
    v15 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v11 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_21;
      v14 += 7;
      v2 = v16;
      v58 = v15++ > 8;
    }
    while (!v58);
LABEL_19:
    if ((PB::Reader::skip(a2) & 1) == 0)
      return 0;
LABEL_704:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
}

uint64_t CMMsl::AccessoryPPG::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = this;
  v4 = *(_BYTE *)(this + 224);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 208));
    v4 = *(_BYTE *)(v3 + 224);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
LABEL_33:
      this = PB::Writer::writeVarInt(a2);
      if ((*(_BYTE *)(v3 + 224) & 4) == 0)
        goto LABEL_6;
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(this + 224) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 224);
  if ((v4 & 8) != 0)
    goto LABEL_33;
LABEL_4:
  if ((v4 & 4) != 0)
LABEL_5:
    this = PB::Writer::writeVarInt(a2);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 8);
  v6 = *(_QWORD *)(v3 + 16);
  while (v5 != v6)
  {
    v5 += 4;
    this = PB::Writer::writeVarInt(a2);
  }
  v7 = *(_QWORD *)(v3 + 32);
  v8 = *(_QWORD *)(v3 + 40);
  while (v7 != v8)
  {
    v7 += 4;
    this = PB::Writer::writeVarInt(a2);
  }
  v9 = *(_QWORD *)(v3 + 56);
  v10 = *(_QWORD *)(v3 + 64);
  while (v9 != v10)
  {
    v9 += 4;
    this = PB::Writer::writeVarInt(a2);
  }
  v11 = *(_QWORD *)(v3 + 80);
  v12 = *(_QWORD *)(v3 + 88);
  while (v11 != v12)
  {
    v11 += 4;
    this = PB::Writer::writeVarInt(a2);
  }
  v13 = *(_QWORD *)(v3 + 128);
  v14 = *(_QWORD *)(v3 + 136);
  while (v13 != v14)
  {
    v13 += 4;
    this = PB::Writer::writeVarInt(a2);
  }
  v15 = *(_QWORD *)(v3 + 152);
  v16 = *(_QWORD *)(v3 + 160);
  while (v15 != v16)
  {
    v15 += 4;
    this = PB::Writer::writeVarInt(a2);
  }
  v17 = *(_QWORD *)(v3 + 176);
  v18 = *(_QWORD *)(v3 + 184);
  while (v17 != v18)
  {
    v17 += 4;
    this = PB::Writer::writeVarInt(a2);
  }
  v20 = *(_QWORD *)(v3 + 104);
  v19 = *(_QWORD *)(v3 + 112);
  while (v20 != v19)
  {
    v20 += 4;
    this = PB::Writer::writeVarInt(a2);
  }
  return this;
}

BOOL CMMsl::AccessoryPPG::operator==(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  size_t v6;
  const void *v7;
  const void *v8;
  size_t v9;
  const void *v10;
  const void *v11;
  size_t v12;
  const void *v13;
  const void *v14;
  size_t v15;
  const void *v16;
  const void *v17;
  size_t v18;
  const void *v19;
  const void *v20;
  size_t v21;
  const void *v22;
  const void *v23;
  size_t v24;
  const void *v25;
  const void *v26;
  size_t v27;

  if ((*(_BYTE *)(a1 + 224) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 224) & 2) == 0 || *(double *)(a1 + 208) != *(double *)(a2 + 208))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 224) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 224) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 224) & 1) == 0 || *(_QWORD *)(a1 + 200) != *(_QWORD *)(a2 + 200))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 224) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 224) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 224) & 8) == 0 || *(_DWORD *)(a1 + 220) != *(_DWORD *)(a2 + 220))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 224) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 224) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 224) & 4) == 0 || *(_DWORD *)(a1 + 216) != *(_DWORD *)(a2 + 216))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 224) & 4) != 0)
  {
    return 0;
  }
  v4 = *(const void **)(a1 + 8);
  v5 = *(const void **)(a2 + 8);
  v6 = *(_QWORD *)(a1 + 16) - (_QWORD)v4;
  if (v6 == *(_QWORD *)(a2 + 16) - (_QWORD)v5 && !memcmp(v4, v5, v6))
  {
    v7 = *(const void **)(a1 + 32);
    v8 = *(const void **)(a2 + 32);
    v9 = *(_QWORD *)(a1 + 40) - (_QWORD)v7;
    if (v9 == *(_QWORD *)(a2 + 40) - (_QWORD)v8 && !memcmp(v7, v8, v9))
    {
      v10 = *(const void **)(a1 + 56);
      v11 = *(const void **)(a2 + 56);
      v12 = *(_QWORD *)(a1 + 64) - (_QWORD)v10;
      if (v12 == *(_QWORD *)(a2 + 64) - (_QWORD)v11 && !memcmp(v10, v11, v12))
      {
        v13 = *(const void **)(a1 + 80);
        v14 = *(const void **)(a2 + 80);
        v15 = *(_QWORD *)(a1 + 88) - (_QWORD)v13;
        if (v15 == *(_QWORD *)(a2 + 88) - (_QWORD)v14 && !memcmp(v13, v14, v15))
        {
          v16 = *(const void **)(a1 + 128);
          v17 = *(const void **)(a2 + 128);
          v18 = *(_QWORD *)(a1 + 136) - (_QWORD)v16;
          if (v18 == *(_QWORD *)(a2 + 136) - (_QWORD)v17 && !memcmp(v16, v17, v18))
          {
            v19 = *(const void **)(a1 + 152);
            v20 = *(const void **)(a2 + 152);
            v21 = *(_QWORD *)(a1 + 160) - (_QWORD)v19;
            if (v21 == *(_QWORD *)(a2 + 160) - (_QWORD)v20 && !memcmp(v19, v20, v21))
            {
              v22 = *(const void **)(a1 + 176);
              v23 = *(const void **)(a2 + 176);
              v24 = *(_QWORD *)(a1 + 184) - (_QWORD)v22;
              if (v24 == *(_QWORD *)(a2 + 184) - (_QWORD)v23 && !memcmp(v22, v23, v24))
              {
                v25 = *(const void **)(a1 + 104);
                v26 = *(const void **)(a2 + 104);
                v27 = *(_QWORD *)(a1 + 112) - (_QWORD)v25;
                if (v27 == *(_QWORD *)(a2 + 112) - (_QWORD)v26)
                  return memcmp(v25, v26, v27) == 0;
              }
            }
          }
        }
      }
    }
  }
  return 0;
}

uint64_t CMMsl::AccessoryPPG::hash_value(CMMsl::AccessoryPPG *this)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((*((_BYTE *)this + 224) & 2) != 0)
  {
    v1 = *((double *)this + 26);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 224) & 1) != 0)
    {
LABEL_3:
      v2 = *((_QWORD *)this + 25);
      if ((*((_BYTE *)this + 224) & 8) != 0)
        goto LABEL_4;
LABEL_10:
      v3 = 0;
      if ((*((_BYTE *)this + 224) & 4) != 0)
        goto LABEL_5;
LABEL_11:
      v4 = 0;
      goto LABEL_12;
    }
  }
  else
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 224) & 1) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 224) & 8) == 0)
    goto LABEL_10;
LABEL_4:
  v3 = *((unsigned int *)this + 55);
  if ((*((_BYTE *)this + 224) & 4) == 0)
    goto LABEL_11;
LABEL_5:
  v4 = *((unsigned int *)this + 54);
LABEL_12:
  v5 = v2 ^ *(_QWORD *)&v1 ^ v3 ^ v4 ^ PBHashBytes();
  v6 = PBHashBytes();
  v7 = v5 ^ v6 ^ PBHashBytes();
  v8 = PBHashBytes();
  v9 = v8 ^ PBHashBytes();
  v10 = v7 ^ v9 ^ PBHashBytes();
  v11 = PBHashBytes();
  return v10 ^ v11 ^ PBHashBytes();
}

uint64_t CMMsl::AccessoryProx::AccessoryProx(uint64_t this)
{
  *(_QWORD *)this = &off_25135C250;
  *(_DWORD *)(this + 56) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135C250;
  *(_DWORD *)(this + 56) = 0;
  return this;
}

void CMMsl::AccessoryProx::~AccessoryProx(CMMsl::AccessoryProx *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::AccessoryProx::AccessoryProx(uint64_t this, const CMMsl::AccessoryProx *a2)
{
  __int16 v2;
  __int16 v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;

  *(_QWORD *)this = &off_25135C250;
  *(_DWORD *)(this + 56) = 0;
  v2 = *((_WORD *)a2 + 28);
  if ((v2 & 4) != 0)
  {
    v4 = *((_DWORD *)a2 + 6);
    v3 = 4;
    *(_WORD *)(this + 56) = 4;
    *(_DWORD *)(this + 24) = v4;
    v2 = *((_WORD *)a2 + 28);
    if ((v2 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 9);
    v3 |= 0x20u;
    *(_WORD *)(this + 56) = v3;
    *(_DWORD *)(this + 36) = v5;
    v2 = *((_WORD *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 0x200) != 0)
  {
    v6 = *((_DWORD *)a2 + 13);
    v3 |= 0x200u;
    *(_WORD *)(this + 56) = v3;
    *(_DWORD *)(this + 52) = v6;
    v2 = *((_WORD *)a2 + 28);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0)
        goto LABEL_9;
      goto LABEL_17;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 8);
  v3 |= 0x10u;
  *(_WORD *)(this + 56) = v3;
  *(_DWORD *)(this + 32) = v7;
  v2 = *((_WORD *)a2 + 28);
  if ((v2 & 2) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_18;
  }
LABEL_17:
  v8 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_WORD *)(this + 56) = v3;
  *(_QWORD *)(this + 16) = v8;
  v2 = *((_WORD *)a2 + 28);
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_19;
  }
LABEL_18:
  v9 = *((_DWORD *)a2 + 12);
  v3 |= 0x100u;
  *(_WORD *)(this + 56) = v3;
  *(_DWORD *)(this + 48) = v9;
  v2 = *((_WORD *)a2 + 28);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_20;
  }
LABEL_19:
  v10 = *((_DWORD *)a2 + 11);
  v3 |= 0x80u;
  *(_WORD *)(this + 56) = v3;
  *(_DWORD *)(this + 44) = v10;
  v2 = *((_WORD *)a2 + 28);
  if ((v2 & 0x40) == 0)
  {
LABEL_12:
    if ((v2 & 1) == 0)
      goto LABEL_13;
    goto LABEL_21;
  }
LABEL_20:
  v11 = *((_DWORD *)a2 + 10);
  v3 |= 0x40u;
  *(_WORD *)(this + 56) = v3;
  *(_DWORD *)(this + 40) = v11;
  v2 = *((_WORD *)a2 + 28);
  if ((v2 & 1) == 0)
  {
LABEL_13:
    if ((v2 & 8) == 0)
      return this;
LABEL_22:
    v13 = *((_DWORD *)a2 + 7);
    *(_WORD *)(this + 56) = v3 | 8;
    *(_DWORD *)(this + 28) = v13;
    return this;
  }
LABEL_21:
  v12 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 56) = v3;
  *(_QWORD *)(this + 8) = v12;
  if ((*((_WORD *)a2 + 28) & 8) != 0)
    goto LABEL_22;
  return this;
}

uint64_t CMMsl::AccessoryProx::operator=(uint64_t a1, const CMMsl::AccessoryProx *a2)
{
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;

  if ((const CMMsl::AccessoryProx *)a1 != a2)
  {
    CMMsl::AccessoryProx::AccessoryProx((uint64_t)&v13, a2);
    v3 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v22;
    v22 = v3;
    v4 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v16;
    v16 = v4;
    v5 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v18;
    v18 = v5;
    v6 = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a1 + 52) = v21;
    v21 = v6;
    v7 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v15;
    v15 = v7;
    v8 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v20;
    v20 = v8;
    v9 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v19;
    v19 = v9;
    v10 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v14;
    v14 = v10;
    v11 = *(_QWORD *)(a1 + 28);
    *(_QWORD *)(a1 + 28) = v17;
    v17 = v11;
    PB::Base::~Base((PB::Base *)&v13);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::AccessoryProx *a2, CMMsl::AccessoryProx *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  double result;
  int v9;
  int v10;
  int v11;
  uint64_t v12;

  v3 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v3;
  v4 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  v5 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v5;
  v6 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v6;
  v7 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v7;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  v9 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v9;
  v10 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v10;
  v11 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v11;
  v12 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v12;
  LODWORD(v12) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v12;
  return result;
}

double CMMsl::AccessoryProx::AccessoryProx(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135C250;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  return result;
}

uint64_t CMMsl::AccessoryProx::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[3];
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a2 + 56) = 0;
    v4 = *(_DWORD *)(a2 + 24);
    v5 = *(_DWORD *)(a2 + 36);
    v6 = *(_DWORD *)(a2 + 52);
    v7 = *(_QWORD *)(a2 + 16);
    v8 = *(_DWORD *)(a2 + 48);
    v9 = *(_QWORD *)(a2 + 8);
    v26 = *(_DWORD *)(a1 + 56);
    v24 = *(_DWORD *)(a1 + 48);
    v10 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    v11 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v4;
    v20 = v11;
    v12 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v5;
    v22 = v12;
    v13 = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a1 + 52) = v6;
    v25 = v13;
    v14 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v7;
    v19[2] = v14;
    v23 = *(_QWORD *)(a1 + 40);
    v19[0] = &off_25135C250;
    v19[1] = v10;
    v15 = *(_QWORD *)(a1 + 28);
    v16 = *(_QWORD *)(a2 + 28);
    v17 = *(_QWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 56) = v3;
    *(_DWORD *)(a1 + 48) = v8;
    *(_QWORD *)(a1 + 40) = v17;
    *(_QWORD *)(a1 + 28) = v16;
    v21 = v15;
    PB::Base::~Base((PB::Base *)v19);
  }
  return a1;
}

uint64_t CMMsl::AccessoryProx::formatText(CMMsl::AccessoryProx *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 28);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "base", *((float *)this + 6));
    v5 = *((_WORD *)this + 28);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "broken");
  v5 = *((_WORD *)this + 28);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "location");
  v5 = *((_WORD *)this + 28);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "peak", *((float *)this + 9));
  v5 = *((_WORD *)this + 28);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 1) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "sensor");
  v5 = *((_WORD *)this + 28);
  if ((v5 & 1) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "sensorTime");
  v5 = *((_WORD *)this + 28);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "sequenceNumber");
  v5 = *((_WORD *)this + 28);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
LABEL_21:
    PB::TextFormatter::format(a2, "temp", *((float *)this + 13));
    if ((*((_WORD *)this + 28) & 2) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_11;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "status");
  v5 = *((_WORD *)this + 28);
  if ((v5 & 0x200) != 0)
    goto LABEL_21;
LABEL_10:
  if ((v5 & 2) != 0)
LABEL_11:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessoryProx::readFrom(CMMsl::AccessoryProx *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  uint64_t v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  char v55;
  char v56;
  unsigned int v57;
  unint64_t v58;
  char v59;
  char v60;
  unsigned int v61;
  unint64_t v62;
  char v63;
  char v64;
  unsigned int v65;
  unint64_t v66;
  char v67;
  char v68;
  unsigned int v69;
  unint64_t v70;
  char v71;
  char v72;
  unsigned int v73;
  unint64_t v74;
  char v75;
  char v76;
  unsigned int v77;
  unint64_t v78;
  char v79;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_152;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 28) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_42;
        *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_32;
      case 2u:
        *((_WORD *)this + 28) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_42;
        *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_32;
      case 3u:
        *((_WORD *)this + 28) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_42;
        *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_32:
        v2 = *((_QWORD *)a2 + 1) + 4;
        goto LABEL_121;
      case 4u:
        *((_WORD *)this + 28) |= 8u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v56 = 0;
          v57 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_126;
            }
            v58 = v20++;
            v59 = *(_BYTE *)(v21 + v58);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v59 & 0x7F) << v56;
            if ((v59 & 0x80) == 0)
              break;
            v56 += 7;
            v14 = v57++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_125:
              v2 = v58 + 1;
              goto LABEL_126;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
          goto LABEL_125;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_126;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_126:
        *((_DWORD *)this + 7) = v24;
        break;
      case 5u:
        *((_WORD *)this + 28) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
LABEL_121:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_42:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 6u:
        *((_WORD *)this + 28) |= 0x100u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v60 = 0;
          v61 = 0;
          v30 = 0;
          if (v2 <= v26)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_131;
            }
            v62 = v26++;
            v63 = *(_BYTE *)(v27 + v62);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v63 & 0x7F) << v60;
            if ((v63 & 0x80) == 0)
              break;
            v60 += 7;
            v14 = v61++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_130:
              v2 = v62 + 1;
              goto LABEL_131;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v30) = 0;
          goto LABEL_130;
        }
        v28 = 0;
        v29 = 0;
        v30 = 0;
        do
        {
          v2 = v26 + 1;
          *((_QWORD *)a2 + 1) = v26 + 1;
          v31 = *(_BYTE *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0)
            goto LABEL_131;
          v28 += 7;
          v26 = v2;
          v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_131:
        *((_DWORD *)this + 12) = v30;
        break;
      case 7u:
        *((_WORD *)this + 28) |= 0x80u;
        v32 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v33 = *(_QWORD *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
        {
          v64 = 0;
          v65 = 0;
          v36 = 0;
          if (v2 <= v32)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v32)
            {
              LODWORD(v36) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_136;
            }
            v66 = v32++;
            v67 = *(_BYTE *)(v33 + v66);
            *((_QWORD *)a2 + 1) = v32;
            v36 |= (unint64_t)(v67 & 0x7F) << v64;
            if ((v67 & 0x80) == 0)
              break;
            v64 += 7;
            v14 = v65++ > 8;
            if (v14)
            {
              LODWORD(v36) = 0;
LABEL_135:
              v2 = v66 + 1;
              goto LABEL_136;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v36) = 0;
          goto LABEL_135;
        }
        v34 = 0;
        v35 = 0;
        v36 = 0;
        do
        {
          v2 = v32 + 1;
          *((_QWORD *)a2 + 1) = v32 + 1;
          v37 = *(_BYTE *)(v33 + v32);
          v36 |= (unint64_t)(v37 & 0x7F) << v34;
          if ((v37 & 0x80) == 0)
            goto LABEL_136;
          v34 += 7;
          v32 = v2;
          v14 = v35++ > 8;
        }
        while (!v14);
        LODWORD(v36) = 0;
LABEL_136:
        *((_DWORD *)this + 11) = v36;
        break;
      case 8u:
        *((_WORD *)this + 28) |= 0x40u;
        v38 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v39 = *(_QWORD *)a2;
        if (v38 > 0xFFFFFFFFFFFFFFF5 || v38 + 10 > v2)
        {
          v68 = 0;
          v69 = 0;
          v42 = 0;
          if (v2 <= v38)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v38)
            {
              LODWORD(v42) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_141;
            }
            v70 = v38++;
            v71 = *(_BYTE *)(v39 + v70);
            *((_QWORD *)a2 + 1) = v38;
            v42 |= (unint64_t)(v71 & 0x7F) << v68;
            if ((v71 & 0x80) == 0)
              break;
            v68 += 7;
            v14 = v69++ > 8;
            if (v14)
            {
              LODWORD(v42) = 0;
LABEL_140:
              v2 = v70 + 1;
              goto LABEL_141;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v42) = 0;
          goto LABEL_140;
        }
        v40 = 0;
        v41 = 0;
        v42 = 0;
        do
        {
          v2 = v38 + 1;
          *((_QWORD *)a2 + 1) = v38 + 1;
          v43 = *(_BYTE *)(v39 + v38);
          v42 |= (unint64_t)(v43 & 0x7F) << v40;
          if ((v43 & 0x80) == 0)
            goto LABEL_141;
          v40 += 7;
          v38 = v2;
          v14 = v41++ > 8;
        }
        while (!v14);
        LODWORD(v42) = 0;
LABEL_141:
        *((_DWORD *)this + 10) = v42;
        break;
      case 9u:
        *((_WORD *)this + 28) |= 0x10u;
        v44 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v45 = *(_QWORD *)a2;
        if (v44 > 0xFFFFFFFFFFFFFFF5 || v44 + 10 > v2)
        {
          v72 = 0;
          v73 = 0;
          v48 = 0;
          if (v2 <= v44)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v44)
            {
              LODWORD(v48) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_146;
            }
            v74 = v44++;
            v75 = *(_BYTE *)(v45 + v74);
            *((_QWORD *)a2 + 1) = v44;
            v48 |= (unint64_t)(v75 & 0x7F) << v72;
            if ((v75 & 0x80) == 0)
              break;
            v72 += 7;
            v14 = v73++ > 8;
            if (v14)
            {
              LODWORD(v48) = 0;
LABEL_145:
              v2 = v74 + 1;
              goto LABEL_146;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v48) = 0;
          goto LABEL_145;
        }
        v46 = 0;
        v47 = 0;
        v48 = 0;
        do
        {
          v2 = v44 + 1;
          *((_QWORD *)a2 + 1) = v44 + 1;
          v49 = *(_BYTE *)(v45 + v44);
          v48 |= (unint64_t)(v49 & 0x7F) << v46;
          if ((v49 & 0x80) == 0)
            goto LABEL_146;
          v46 += 7;
          v44 = v2;
          v14 = v47++ > 8;
        }
        while (!v14);
        LODWORD(v48) = 0;
LABEL_146:
        *((_DWORD *)this + 8) = v48;
        break;
      case 0xAu:
        *((_WORD *)this + 28) |= 1u;
        v50 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v51 = *(_QWORD *)a2;
        if (v50 > 0xFFFFFFFFFFFFFFF5 || v50 + 10 > v2)
        {
          v76 = 0;
          v77 = 0;
          v54 = 0;
          if (v2 <= v50)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v50)
            {
              v54 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_151;
            }
            v78 = v50++;
            v79 = *(_BYTE *)(v51 + v78);
            *((_QWORD *)a2 + 1) = v50;
            v54 |= (unint64_t)(v79 & 0x7F) << v76;
            if ((v79 & 0x80) == 0)
              break;
            v76 += 7;
            v14 = v77++ > 8;
            if (v14)
            {
              v54 = 0;
LABEL_150:
              v2 = v78 + 1;
              goto LABEL_151;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v54 = 0;
          goto LABEL_150;
        }
        v52 = 0;
        v53 = 0;
        v54 = 0;
        do
        {
          v2 = v50 + 1;
          *((_QWORD *)a2 + 1) = v50 + 1;
          v55 = *(_BYTE *)(v51 + v50);
          v54 |= (unint64_t)(v55 & 0x7F) << v52;
          if ((v55 & 0x80) == 0)
            goto LABEL_151;
          v52 += 7;
          v50 = v2;
          v14 = v53++ > 8;
        }
        while (!v14);
        v54 = 0;
LABEL_151:
        *((_QWORD *)this + 1) = v54;
        break;
      default:
        goto LABEL_19;
    }
LABEL_152:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::AccessoryProx::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 56);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 24));
    v4 = *(_WORD *)(v3 + 56);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 1) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_20:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_WORD *)(v3 + 56) & 1) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

BOOL CMMsl::AccessoryProx::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 56);
  v3 = *(_WORD *)(a2 + 56);
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 56) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 56) & 0x200) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 56) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 56) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 56) & 0x100) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 56) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  v4 = (v3 & 8) == 0;
  if ((v2 & 8) != 0)
    return (v3 & 8) != 0 && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28);
  return v4;
}

uint64_t CMMsl::AccessoryProx::hash_value(CMMsl::AccessoryProx *this)
{
  __int16 v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;

  v1 = *((_WORD *)this + 28);
  if ((v1 & 4) == 0)
  {
    v2 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_3;
LABEL_21:
    v4 = 0;
    if ((*((_WORD *)this + 28) & 0x200) != 0)
      goto LABEL_6;
LABEL_22:
    v6 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_9;
    goto LABEL_23;
  }
  v14 = *((float *)this + 6);
  v2 = LODWORD(v14);
  if (v14 == 0.0)
    v2 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_21;
LABEL_3:
  v3 = *((float *)this + 9);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  if ((*((_WORD *)this + 28) & 0x200) == 0)
    goto LABEL_22;
LABEL_6:
  v5 = *((float *)this + 13);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_9:
    v7 = *((unsigned int *)this + 8);
    if ((v1 & 2) != 0)
      goto LABEL_10;
LABEL_24:
    v8 = 0.0;
    if ((*((_WORD *)this + 28) & 0x100) != 0)
      goto LABEL_13;
    goto LABEL_25;
  }
LABEL_23:
  v7 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_24;
LABEL_10:
  v8 = *((double *)this + 2);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((*((_WORD *)this + 28) & 0x100) != 0)
  {
LABEL_13:
    v9 = *((unsigned int *)this + 12);
    if ((v1 & 0x80) != 0)
      goto LABEL_14;
    goto LABEL_26;
  }
LABEL_25:
  v9 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_14:
    v10 = *((unsigned int *)this + 11);
    if ((v1 & 0x40) != 0)
      goto LABEL_15;
    goto LABEL_27;
  }
LABEL_26:
  v10 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_15:
    v11 = *((unsigned int *)this + 10);
    if ((v1 & 1) != 0)
      goto LABEL_16;
LABEL_28:
    v12 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_17;
LABEL_29:
    v13 = 0;
    return v4 ^ v2 ^ v6 ^ v7 ^ *(_QWORD *)&v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13;
  }
LABEL_27:
  v11 = 0;
  if ((v1 & 1) == 0)
    goto LABEL_28;
LABEL_16:
  v12 = *((_QWORD *)this + 1);
  if ((v1 & 8) == 0)
    goto LABEL_29;
LABEL_17:
  v13 = *((unsigned int *)this + 7);
  return v4 ^ v2 ^ v6 ^ v7 ^ *(_QWORD *)&v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13;
}

double CMMsl::AccessoryProxSensorDrop::AccessoryProxSensorDrop(CMMsl::AccessoryProxSensorDrop *this)
{
  double result;

  *(_QWORD *)this = &off_25135C288;
  *((_DWORD *)this + 26) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_25135C288;
  *((_DWORD *)this + 26) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  return result;
}

void CMMsl::AccessoryProxSensorDrop::~AccessoryProxSensorDrop(CMMsl::AccessoryProxSensorDrop *this)
{
  void *v2;
  void *v3;
  void **v4;

  *(_QWORD *)this = &off_25135C288;
  v4 = (void **)((char *)this + 56);
  sub_242910B70(&v4);
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::AccessoryProxSensorDrop::~AccessoryProxSensorDrop(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::AccessoryProxSensorDrop *CMMsl::AccessoryProxSensorDrop::AccessoryProxSensorDrop(CMMsl::AccessoryProxSensorDrop *this, const CMMsl::AccessoryProxSensorDrop *a2)
{
  _QWORD *v4;
  uint64_t **v5;
  char v6;
  int v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  char v11;
  int v12;
  int v14;
  int v15;
  int v16;

  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (_QWORD *)((char *)this + 8);
  *(_OWORD *)((char *)this + 56) = 0u;
  v5 = (uint64_t **)((char *)this + 56);
  *(_QWORD *)this = &off_25135C288;
  *((_DWORD *)this + 26) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 9) = 0;
  if ((*((_BYTE *)a2 + 104) & 8) == 0)
  {
    v6 = 4;
    if ((*((_BYTE *)a2 + 104) & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v7 = *((_DWORD *)a2 + 23);
  *((_BYTE *)this + 104) = 8;
  *((_DWORD *)this + 23) = v7;
  v6 = 12;
  if ((*((_BYTE *)a2 + 104) & 4) != 0)
  {
LABEL_5:
    v8 = *((_DWORD *)a2 + 22);
    *((_BYTE *)this + 104) = v6;
    *((_DWORD *)this + 22) = v8;
  }
LABEL_6:
  v9 = (uint64_t *)*((_QWORD *)a2 + 7);
  v10 = (uint64_t *)*((_QWORD *)a2 + 8);
  while (v9 != v10)
    sub_24273F69C(v5, *v9++);
  if (this != a2)
  {
    sub_242911380(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
    sub_242911380((_QWORD *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
  }
  v11 = *((_BYTE *)a2 + 104);
  if ((v11 & 1) != 0)
  {
    v14 = *((_DWORD *)a2 + 20);
    *((_BYTE *)this + 104) |= 1u;
    *((_DWORD *)this + 20) = v14;
    v11 = *((_BYTE *)a2 + 104);
    if ((v11 & 0x10) == 0)
    {
LABEL_13:
      if ((v11 & 2) == 0)
        goto LABEL_14;
LABEL_19:
      v16 = *((_DWORD *)a2 + 21);
      *((_BYTE *)this + 104) |= 2u;
      *((_DWORD *)this + 21) = v16;
      if ((*((_BYTE *)a2 + 104) & 0x20) == 0)
        return this;
      goto LABEL_15;
    }
  }
  else if ((*((_BYTE *)a2 + 104) & 0x10) == 0)
  {
    goto LABEL_13;
  }
  v15 = *((_DWORD *)a2 + 24);
  *((_BYTE *)this + 104) |= 0x10u;
  *((_DWORD *)this + 24) = v15;
  v11 = *((_BYTE *)a2 + 104);
  if ((v11 & 2) != 0)
    goto LABEL_19;
LABEL_14:
  if ((v11 & 0x20) != 0)
  {
LABEL_15:
    v12 = *((_DWORD *)a2 + 25);
    *((_BYTE *)this + 104) |= 0x20u;
    *((_DWORD *)this + 25) = v12;
  }
  return this;
}

uint64_t sub_24273F69C(uint64_t **a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  char v6;
  char v7;
  int v8;
  int v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  int64x2_t v23;
  unint64_t v24;
  uint64_t v25;
  int64x2_t v26;
  unint64_t v27;
  _QWORD *v28;

  result = operator new();
  v5 = result;
  *(_QWORD *)result = &off_25135CD78;
  *(_DWORD *)(result + 16) = 0;
  v6 = *(_BYTE *)(a2 + 16);
  if ((v6 & 1) != 0)
  {
    v8 = *(_DWORD *)(a2 + 8);
    *(_BYTE *)(result + 16) = 1;
    *(_DWORD *)(result + 8) = v8;
    v7 = 3;
    if ((v6 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v7 = 2;
  if ((*(_BYTE *)(a2 + 16) & 2) != 0)
  {
LABEL_5:
    v9 = *(_DWORD *)(a2 + 12);
    *(_BYTE *)(result + 16) = v7;
    *(_DWORD *)(result + 12) = v9;
  }
LABEL_6:
  v10 = (unint64_t)a1[2];
  v11 = a1[1];
  if ((unint64_t)v11 >= v10)
  {
    v13 = v11 - *a1;
    if ((unint64_t)(v13 + 1) >> 61)
      sub_242729A44();
    v14 = v10 - (_QWORD)*a1;
    v15 = v14 >> 2;
    if (v14 >> 2 <= (unint64_t)(v13 + 1))
      v15 = v13 + 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    v28 = a1 + 2;
    if (v16)
      v16 = (unint64_t)sub_2429112FC(v16);
    else
      v17 = 0;
    v18 = (uint64_t *)(v16 + 8 * v13);
    v19 = v16 + 8 * v17;
    v27 = v19;
    *v18 = v5;
    v12 = v18 + 1;
    v26.i64[1] = (uint64_t)(v18 + 1);
    v21 = *a1;
    v20 = a1[1];
    if (v20 == *a1)
    {
      v23 = vdupq_n_s64((unint64_t)v20);
    }
    else
    {
      do
      {
        v22 = *--v20;
        *v20 = 0;
        *--v18 = v22;
      }
      while (v20 != v21);
      v23 = *(int64x2_t *)a1;
      v12 = (uint64_t *)v26.i64[1];
      v19 = v27;
    }
    *a1 = v18;
    a1[1] = v12;
    v26 = v23;
    v24 = (unint64_t)a1[2];
    a1[2] = (uint64_t *)v19;
    v27 = v24;
    v25 = v23.i64[0];
    result = sub_2429114EC((uint64_t)&v25);
  }
  else
  {
    *v11 = result;
    v12 = v11 + 1;
  }
  a1[1] = v12;
  return result;
}

void sub_24273F80C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::AccessoryProxSensorDrop::operator=(uint64_t a1, const CMMsl::AccessoryProxSensorDrop *a2)
{
  CMMsl::AccessoryProxSensorDrop *v3;
  _BYTE v5[112];

  if ((const CMMsl::AccessoryProxSensorDrop *)a1 != a2)
  {
    CMMsl::AccessoryProxSensorDrop::AccessoryProxSensorDrop((CMMsl::AccessoryProxSensorDrop *)v5, a2);
    CMMsl::swap(a1, (CMMsl::AccessoryProxSensorDrop *)v5, v3);
    CMMsl::AccessoryProxSensorDrop::~AccessoryProxSensorDrop((CMMsl::AccessoryProxSensorDrop *)v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AccessoryProxSensorDrop *a2, CMMsl::AccessoryProxSensorDrop *a3)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(_DWORD *)(this + 104);
  *(_DWORD *)(this + 104) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v3;
  v4 = *(_DWORD *)(this + 92);
  *(_DWORD *)(this + 92) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v4;
  v5 = *(_DWORD *)(this + 88);
  *(_DWORD *)(this + 88) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v5;
  v6 = *(_QWORD *)(this + 56);
  *(_QWORD *)(this + 56) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v6;
  v7 = *(_QWORD *)(this + 64);
  *(_QWORD *)(this + 64) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v7;
  v8 = *(_QWORD *)(this + 72);
  *(_QWORD *)(this + 72) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v8;
  v9 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v9;
  v10 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v10;
  v11 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v11;
  v12 = *(_QWORD *)(this + 32);
  *(_QWORD *)(this + 32) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v12;
  v13 = *(_QWORD *)(this + 40);
  *(_QWORD *)(this + 40) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v13;
  v14 = *(_QWORD *)(this + 48);
  *(_QWORD *)(this + 48) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v14;
  LODWORD(v14) = *(_DWORD *)(this + 80);
  *(_DWORD *)(this + 80) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v14;
  LODWORD(v14) = *(_DWORD *)(this + 96);
  *(_DWORD *)(this + 96) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v14;
  LODWORD(v14) = *(_DWORD *)(this + 84);
  *(_DWORD *)(this + 84) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v14;
  LODWORD(v14) = *(_DWORD *)(this + 100);
  *(_DWORD *)(this + 100) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v14;
  return this;
}

uint64_t CMMsl::AccessoryProxSensorDrop::AccessoryProxSensorDrop(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;

  *(_QWORD *)a1 = &off_25135C288;
  v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  v5 = a1 + 8;
  *(_OWORD *)(a1 + 56) = 0u;
  v6 = (_OWORD *)(a1 + 56);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a2 + 104) = 0;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  sub_242910BEC((_QWORD *)(a1 + 56));
  *v6 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  sub_242911330(v5, (__n128 *)(a2 + 8));
  sub_242911330(v4, (__n128 *)(a2 + 32));
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  return a1;
}

uint64_t CMMsl::AccessoryProxSensorDrop::operator=(uint64_t a1, uint64_t a2)
{
  CMMsl::AccessoryProxSensorDrop *v3;
  _BYTE v5[112];

  if (a1 != a2)
  {
    CMMsl::AccessoryProxSensorDrop::AccessoryProxSensorDrop((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::AccessoryProxSensorDrop *)v5, v3);
    CMMsl::AccessoryProxSensorDrop::~AccessoryProxSensorDrop((CMMsl::AccessoryProxSensorDrop *)v5);
  }
  return a1;
}

uint64_t CMMsl::AccessoryProxSensorDrop::formatText(CMMsl::AccessoryProxSensorDrop *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;
  float *v6;
  float *v7;
  float v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;
  float *v13;
  float *v14;
  float v15;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 104);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "conchaDropped");
    v5 = *((_BYTE *)this + 104);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else if ((*((_BYTE *)this + 104) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "conchaRecovered");
  v5 = *((_BYTE *)this + 104);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "iedState");
  if ((*((_BYTE *)this + 104) & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "location");
LABEL_6:
  v6 = (float *)*((_QWORD *)this + 1);
  v7 = (float *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(a2, "mean", v8);
  }
  v9 = (uint64_t *)*((_QWORD *)this + 7);
  v10 = (uint64_t *)*((_QWORD *)this + 8);
  while (v9 != v10)
  {
    v11 = *v9++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v11 + 32))(v11, a2, "optical");
  }
  v12 = *((_BYTE *)this + 104);
  if ((v12 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "tragusDropped");
    v12 = *((_BYTE *)this + 104);
  }
  if ((v12 & 0x20) != 0)
    PB::TextFormatter::format(a2, "tragusRecovered");
  v13 = (float *)*((_QWORD *)this + 4);
  v14 = (float *)*((_QWORD *)this + 5);
  while (v13 != v14)
  {
    v15 = *v13++;
    PB::TextFormatter::format(a2, "variance", v15);
  }
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::AccessoryProxSensorDrop::readFrom(CMMsl::AccessoryProxSensorDrop *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  _DWORD *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  _DWORD *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  _DWORD *v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char v70;
  unsigned int v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  char v78;
  unsigned int v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  char v86;
  unsigned int v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  char v94;
  unsigned int v95;
  uint64_t v96;
  unint64_t v97;
  char v98;
  char v99;
  unsigned int v100;
  unint64_t v101;
  char v102;
  char v103;
  unsigned int v104;
  unint64_t v105;
  char v106;
  unint64_t v107;
  char *v108;
  _DWORD *v109;
  unint64_t v110;
  char *v111;
  char v112;
  unsigned int v113;
  unint64_t v114;
  char v115;
  char v116;
  unsigned int v117;
  unint64_t v118;
  char v119;
  char v120;
  unsigned int v121;
  unint64_t v122;
  char v123;
  char v124;
  unsigned int v125;
  unint64_t v126;
  char v127;
  char *v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  _DWORD *v140;
  int v141;
  _DWORD *v142;
  int v143;
  unint64_t v144;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  v8 = (uint64_t **)((char *)this + 56);
  while (2)
  {
    v9 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_20;
      }
LABEL_26:
      v21 = v12 & 7;
      if (v21 != 4)
      {
        switch((v12 >> 3))
        {
          case 1u:
            *((_BYTE *)this + 104) |= 8u;
            v22 = *((_QWORD *)a2 + 1);
            v23 = *((_QWORD *)a2 + 2);
            v24 = *(_QWORD *)a2;
            if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
            {
              v25 = 0;
              v26 = 0;
              v27 = 0;
              do
              {
                v28 = v22 + 1;
                *((_QWORD *)a2 + 1) = v22 + 1;
                v29 = *(_BYTE *)(v24 + v22);
                v27 |= (unint64_t)(v29 & 0x7F) << v25;
                if ((v29 & 0x80) == 0)
                  goto LABEL_193;
                v25 += 7;
                v22 = v28;
                v15 = v26++ > 8;
              }
              while (!v15);
LABEL_127:
              LODWORD(v27) = 0;
              goto LABEL_193;
            }
            v99 = 0;
            v100 = 0;
            v27 = 0;
            if (v23 <= v22)
              v23 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v23 == v22)
              {
                LODWORD(v27) = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v101 = v22 + 1;
                v102 = *(_BYTE *)(v24 + v22);
                *((_QWORD *)a2 + 1) = v101;
                v27 |= (unint64_t)(v102 & 0x7F) << v99;
                if (v102 < 0)
                {
                  v99 += 7;
                  v22 = v101;
                  v15 = v100++ > 8;
                  if (v15)
                    goto LABEL_127;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v27) = 0;
              }
              break;
            }
LABEL_193:
            *((_DWORD *)this + 23) = v27;
            goto LABEL_21;
          case 2u:
            *((_BYTE *)this + 104) |= 4u;
            v30 = *((_QWORD *)a2 + 1);
            v31 = *((_QWORD *)a2 + 2);
            v32 = *(_QWORD *)a2;
            if (v30 <= 0xFFFFFFFFFFFFFFF5 && v30 + 10 <= v31)
            {
              v33 = 0;
              v34 = 0;
              v35 = 0;
              do
              {
                v36 = v30 + 1;
                *((_QWORD *)a2 + 1) = v30 + 1;
                v37 = *(_BYTE *)(v32 + v30);
                v35 |= (unint64_t)(v37 & 0x7F) << v33;
                if ((v37 & 0x80) == 0)
                  goto LABEL_196;
                v33 += 7;
                v30 = v36;
                v15 = v34++ > 8;
              }
              while (!v15);
LABEL_134:
              LODWORD(v35) = 0;
              goto LABEL_196;
            }
            v103 = 0;
            v104 = 0;
            v35 = 0;
            if (v31 <= v30)
              v31 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v31 == v30)
              {
                LODWORD(v35) = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v105 = v30 + 1;
                v106 = *(_BYTE *)(v32 + v30);
                *((_QWORD *)a2 + 1) = v105;
                v35 |= (unint64_t)(v106 & 0x7F) << v103;
                if (v106 < 0)
                {
                  v103 += 7;
                  v30 = v105;
                  v15 = v104++ > 8;
                  if (v15)
                    goto LABEL_134;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v35) = 0;
              }
              break;
            }
LABEL_196:
            *((_DWORD *)this + 22) = v35;
            goto LABEL_21;
          case 3u:
            sub_2427406E4(v8);
            v38 = *(_QWORD *)(*((_QWORD *)this + 8) - 8);
            if (!PB::Reader::placeMark()
              || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v38 + 16))(v38, a2) & 1) == 0)
            {
              return 0;
            }
            goto LABEL_168;
          case 4u:
            if (v21 == 2)
            {
              if ((PB::Reader::placeMark() & 1) != 0)
                return 0;
              v39 = *((_QWORD *)a2 + 1);
              v40 = *((_QWORD *)a2 + 2);
              while (v39 < v40 && !*((_BYTE *)a2 + 24))
              {
                v42 = (char *)*((_QWORD *)this + 2);
                v41 = *((_QWORD *)this + 3);
                if ((unint64_t)v42 >= v41)
                {
                  v44 = (char *)*((_QWORD *)this + 1);
                  v45 = (v42 - v44) >> 2;
                  v46 = v45 + 1;
                  if ((unint64_t)(v45 + 1) >> 62)
                    goto LABEL_232;
                  v47 = v41 - (_QWORD)v44;
                  if (v47 >> 1 > v46)
                    v46 = v47 >> 1;
                  if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL)
                    v48 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v48 = v46;
                  if (v48)
                  {
                    v48 = (unint64_t)sub_2429114B8(v48);
                    v44 = (char *)*((_QWORD *)this + 1);
                    v42 = (char *)*((_QWORD *)this + 2);
                  }
                  else
                  {
                    v49 = 0;
                  }
                  v50 = (_DWORD *)(v48 + 4 * v45);
                  *v50 = 0;
                  v43 = v50 + 1;
                  while (v42 != v44)
                  {
                    v51 = *((_DWORD *)v42 - 1);
                    v42 -= 4;
                    *--v50 = v51;
                  }
                  *((_QWORD *)this + 1) = v50;
                  *((_QWORD *)this + 2) = v43;
                  *((_QWORD *)this + 3) = v48 + 4 * v49;
                  if (v44)
                    operator delete(v44);
                }
                else
                {
                  *(_DWORD *)v42 = 0;
                  v43 = v42 + 4;
                }
                *((_QWORD *)this + 2) = v43;
                v52 = *((_QWORD *)a2 + 1);
                if (v52 > 0xFFFFFFFFFFFFFFFBLL || v52 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_167;
                *(v43 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v52);
                v40 = *((_QWORD *)a2 + 2);
                v39 = *((_QWORD *)a2 + 1) + 4;
                *((_QWORD *)a2 + 1) = v39;
              }
              goto LABEL_168;
            }
            v108 = (char *)*((_QWORD *)this + 2);
            v107 = *((_QWORD *)this + 3);
            if ((unint64_t)v108 >= v107)
            {
              v128 = (char *)*((_QWORD *)this + 1);
              v129 = (v108 - v128) >> 2;
              v130 = v129 + 1;
              if ((unint64_t)(v129 + 1) >> 62)
                goto LABEL_232;
              v131 = v107 - (_QWORD)v128;
              if (v131 >> 1 > v130)
                v130 = v131 >> 1;
              if ((unint64_t)v131 >= 0x7FFFFFFFFFFFFFFCLL)
                v132 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v132 = v130;
              if (v132)
              {
                v132 = (unint64_t)sub_2429114B8(v132);
                v128 = (char *)*((_QWORD *)this + 1);
                v108 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v133 = 0;
              }
              v140 = (_DWORD *)(v132 + 4 * v129);
              *v140 = 0;
              v109 = v140 + 1;
              while (v108 != v128)
              {
                v141 = *((_DWORD *)v108 - 1);
                v108 -= 4;
                *--v140 = v141;
              }
              *((_QWORD *)this + 1) = v140;
              *((_QWORD *)this + 2) = v109;
              *((_QWORD *)this + 3) = v132 + 4 * v133;
              if (v128)
                operator delete(v128);
            }
            else
            {
              *(_DWORD *)v108 = 0;
              v109 = v108 + 4;
            }
            *((_QWORD *)this + 2) = v109;
            goto LABEL_223;
          case 5u:
            if (v21 == 2)
            {
              if ((PB::Reader::placeMark() & 1) != 0)
                return 0;
              v53 = *((_QWORD *)a2 + 1);
              v54 = *((_QWORD *)a2 + 2);
              while (v53 < v54 && !*((_BYTE *)a2 + 24))
              {
                v56 = (char *)*((_QWORD *)this + 5);
                v55 = *((_QWORD *)this + 6);
                if ((unint64_t)v56 >= v55)
                {
                  v58 = (char *)*((_QWORD *)this + 4);
                  v59 = (v56 - v58) >> 2;
                  v60 = v59 + 1;
                  if ((unint64_t)(v59 + 1) >> 62)
                    goto LABEL_232;
                  v61 = v55 - (_QWORD)v58;
                  if (v61 >> 1 > v60)
                    v60 = v61 >> 1;
                  if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL)
                    v62 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v62 = v60;
                  if (v62)
                  {
                    v62 = (unint64_t)sub_2429114B8(v62);
                    v58 = (char *)*((_QWORD *)this + 4);
                    v56 = (char *)*((_QWORD *)this + 5);
                  }
                  else
                  {
                    v63 = 0;
                  }
                  v64 = (_DWORD *)(v62 + 4 * v59);
                  *v64 = 0;
                  v57 = v64 + 1;
                  while (v56 != v58)
                  {
                    v65 = *((_DWORD *)v56 - 1);
                    v56 -= 4;
                    *--v64 = v65;
                  }
                  *((_QWORD *)this + 4) = v64;
                  *((_QWORD *)this + 5) = v57;
                  *((_QWORD *)this + 6) = v62 + 4 * v63;
                  if (v58)
                    operator delete(v58);
                }
                else
                {
                  *(_DWORD *)v56 = 0;
                  v57 = v56 + 4;
                }
                *((_QWORD *)this + 5) = v57;
                v66 = *((_QWORD *)a2 + 1);
                if (v66 > 0xFFFFFFFFFFFFFFFBLL || v66 + 4 > *((_QWORD *)a2 + 2))
                {
LABEL_167:
                  *((_BYTE *)a2 + 24) = 1;
                  break;
                }
                *(v57 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v66);
                v54 = *((_QWORD *)a2 + 2);
                v53 = *((_QWORD *)a2 + 1) + 4;
                *((_QWORD *)a2 + 1) = v53;
              }
LABEL_168:
              PB::Reader::recallMark();
            }
            else
            {
              v111 = (char *)*((_QWORD *)this + 5);
              v110 = *((_QWORD *)this + 6);
              if ((unint64_t)v111 >= v110)
              {
                v134 = (char *)*((_QWORD *)this + 4);
                v135 = (v111 - v134) >> 2;
                v136 = v135 + 1;
                if ((unint64_t)(v135 + 1) >> 62)
LABEL_232:
                  sub_242729A44();
                v137 = v110 - (_QWORD)v134;
                if (v137 >> 1 > v136)
                  v136 = v137 >> 1;
                if ((unint64_t)v137 >= 0x7FFFFFFFFFFFFFFCLL)
                  v138 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v138 = v136;
                if (v138)
                {
                  v138 = (unint64_t)sub_2429114B8(v138);
                  v134 = (char *)*((_QWORD *)this + 4);
                  v111 = (char *)*((_QWORD *)this + 5);
                }
                else
                {
                  v139 = 0;
                }
                v142 = (_DWORD *)(v138 + 4 * v135);
                *v142 = 0;
                v109 = v142 + 1;
                while (v111 != v134)
                {
                  v143 = *((_DWORD *)v111 - 1);
                  v111 -= 4;
                  *--v142 = v143;
                }
                *((_QWORD *)this + 4) = v142;
                *((_QWORD *)this + 5) = v109;
                *((_QWORD *)this + 6) = v138 + 4 * v139;
                if (v134)
                  operator delete(v134);
              }
              else
              {
                *(_DWORD *)v111 = 0;
                v109 = v111 + 4;
              }
              *((_QWORD *)this + 5) = v109;
LABEL_223:
              v144 = *((_QWORD *)a2 + 1);
              if (v144 <= 0xFFFFFFFFFFFFFFFBLL && v144 + 4 <= *((_QWORD *)a2 + 2))
              {
                *(v109 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v144);
                *((_QWORD *)a2 + 1) += 4;
              }
              else
              {
                *((_BYTE *)a2 + 24) = 1;
              }
            }
LABEL_21:
            v2 = *((_QWORD *)a2 + 1);
            v3 = *((_QWORD *)a2 + 2);
            v4 = *((unsigned __int8 *)a2 + 24);
            if (v2 >= v3 || v4 != 0)
              return v4 == 0;
            continue;
          case 6u:
            *((_BYTE *)this + 104) |= 1u;
            v67 = *((_QWORD *)a2 + 1);
            v68 = *((_QWORD *)a2 + 2);
            v69 = *(_QWORD *)a2;
            if (v67 <= 0xFFFFFFFFFFFFFFF5 && v67 + 10 <= v68)
            {
              v70 = 0;
              v71 = 0;
              v72 = 0;
              do
              {
                v73 = v67 + 1;
                *((_QWORD *)a2 + 1) = v67 + 1;
                v74 = *(_BYTE *)(v69 + v67);
                v72 |= (unint64_t)(v74 & 0x7F) << v70;
                if ((v74 & 0x80) == 0)
                  goto LABEL_199;
                v70 += 7;
                v67 = v73;
                v15 = v71++ > 8;
              }
              while (!v15);
LABEL_145:
              LODWORD(v72) = 0;
              goto LABEL_199;
            }
            v112 = 0;
            v113 = 0;
            v72 = 0;
            if (v68 <= v67)
              v68 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v68 == v67)
              {
                LODWORD(v72) = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v114 = v67 + 1;
                v115 = *(_BYTE *)(v69 + v67);
                *((_QWORD *)a2 + 1) = v114;
                v72 |= (unint64_t)(v115 & 0x7F) << v112;
                if (v115 < 0)
                {
                  v112 += 7;
                  v67 = v114;
                  v15 = v113++ > 8;
                  if (v15)
                    goto LABEL_145;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v72) = 0;
              }
              break;
            }
LABEL_199:
            *((_DWORD *)this + 20) = v72;
            goto LABEL_21;
          case 7u:
            *((_BYTE *)this + 104) |= 0x10u;
            v75 = *((_QWORD *)a2 + 1);
            v76 = *((_QWORD *)a2 + 2);
            v77 = *(_QWORD *)a2;
            if (v75 <= 0xFFFFFFFFFFFFFFF5 && v75 + 10 <= v76)
            {
              v78 = 0;
              v79 = 0;
              v80 = 0;
              do
              {
                v81 = v75 + 1;
                *((_QWORD *)a2 + 1) = v75 + 1;
                v82 = *(_BYTE *)(v77 + v75);
                v80 |= (unint64_t)(v82 & 0x7F) << v78;
                if ((v82 & 0x80) == 0)
                  goto LABEL_202;
                v78 += 7;
                v75 = v81;
                v15 = v79++ > 8;
              }
              while (!v15);
LABEL_152:
              LODWORD(v80) = 0;
              goto LABEL_202;
            }
            v116 = 0;
            v117 = 0;
            v80 = 0;
            if (v76 <= v75)
              v76 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v76 == v75)
              {
                LODWORD(v80) = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v118 = v75 + 1;
                v119 = *(_BYTE *)(v77 + v75);
                *((_QWORD *)a2 + 1) = v118;
                v80 |= (unint64_t)(v119 & 0x7F) << v116;
                if (v119 < 0)
                {
                  v116 += 7;
                  v75 = v118;
                  v15 = v117++ > 8;
                  if (v15)
                    goto LABEL_152;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v80) = 0;
              }
              break;
            }
LABEL_202:
            *((_DWORD *)this + 24) = v80;
            goto LABEL_21;
          case 8u:
            *((_BYTE *)this + 104) |= 2u;
            v83 = *((_QWORD *)a2 + 1);
            v84 = *((_QWORD *)a2 + 2);
            v85 = *(_QWORD *)a2;
            if (v83 <= 0xFFFFFFFFFFFFFFF5 && v83 + 10 <= v84)
            {
              v86 = 0;
              v87 = 0;
              v88 = 0;
              do
              {
                v89 = v83 + 1;
                *((_QWORD *)a2 + 1) = v83 + 1;
                v90 = *(_BYTE *)(v85 + v83);
                v88 |= (unint64_t)(v90 & 0x7F) << v86;
                if ((v90 & 0x80) == 0)
                  goto LABEL_205;
                v86 += 7;
                v83 = v89;
                v15 = v87++ > 8;
              }
              while (!v15);
LABEL_159:
              LODWORD(v88) = 0;
              goto LABEL_205;
            }
            v120 = 0;
            v121 = 0;
            v88 = 0;
            if (v84 <= v83)
              v84 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v84 == v83)
              {
                LODWORD(v88) = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v122 = v83 + 1;
                v123 = *(_BYTE *)(v85 + v83);
                *((_QWORD *)a2 + 1) = v122;
                v88 |= (unint64_t)(v123 & 0x7F) << v120;
                if (v123 < 0)
                {
                  v120 += 7;
                  v83 = v122;
                  v15 = v121++ > 8;
                  if (v15)
                    goto LABEL_159;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v88) = 0;
              }
              break;
            }
LABEL_205:
            *((_DWORD *)this + 21) = v88;
            goto LABEL_21;
          case 9u:
            *((_BYTE *)this + 104) |= 0x20u;
            v91 = *((_QWORD *)a2 + 1);
            v92 = *((_QWORD *)a2 + 2);
            v93 = *(_QWORD *)a2;
            if (v91 <= 0xFFFFFFFFFFFFFFF5 && v91 + 10 <= v92)
            {
              v94 = 0;
              v95 = 0;
              v96 = 0;
              do
              {
                v97 = v91 + 1;
                *((_QWORD *)a2 + 1) = v91 + 1;
                v98 = *(_BYTE *)(v93 + v91);
                v96 |= (unint64_t)(v98 & 0x7F) << v94;
                if ((v98 & 0x80) == 0)
                  goto LABEL_208;
                v94 += 7;
                v91 = v97;
                v15 = v95++ > 8;
              }
              while (!v15);
LABEL_166:
              LODWORD(v96) = 0;
              goto LABEL_208;
            }
            v124 = 0;
            v125 = 0;
            v96 = 0;
            if (v92 <= v91)
              v92 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v92 == v91)
              {
                LODWORD(v96) = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v126 = v91 + 1;
                v127 = *(_BYTE *)(v93 + v91);
                *((_QWORD *)a2 + 1) = v126;
                v96 |= (unint64_t)(v127 & 0x7F) << v124;
                if (v127 < 0)
                {
                  v124 += 7;
                  v91 = v126;
                  v15 = v125++ > 8;
                  if (v15)
                    goto LABEL_166;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v96) = 0;
              }
              break;
            }
LABEL_208:
            *((_DWORD *)this + 25) = v96;
            goto LABEL_21;
          default:
            goto LABEL_20;
        }
      }
      v4 = 0;
      return v4 == 0;
    }
    break;
  }
  v16 = 0;
  v17 = 0;
  v12 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v18 = v2 + 1;
    v19 = *(_BYTE *)(v9 + v2);
    *((_QWORD *)a2 + 1) = v18;
    v12 |= (unint64_t)(v19 & 0x7F) << v16;
    if ((v19 & 0x80) == 0)
      goto LABEL_26;
    v16 += 7;
    v2 = v18;
    v15 = v17++ > 8;
  }
  while (!v15);
LABEL_20:
  if ((PB::Reader::skip(a2) & 1) != 0)
    goto LABEL_21;
  return 0;
}

uint64_t sub_2427406E4(uint64_t **a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int64x2_t v17;
  unint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  unint64_t v21;
  _QWORD *v22;

  result = operator new();
  v3 = result;
  *(_QWORD *)result = &off_25135CD78;
  *(_DWORD *)(result + 16) = 0;
  v4 = (unint64_t)a1[2];
  v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = v5 - *a1;
    if ((unint64_t)(v7 + 1) >> 61)
      sub_242729A44();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v22 = a1 + 2;
    if (v10)
      v10 = (unint64_t)sub_2429112FC(v10);
    else
      v11 = 0;
    v12 = (uint64_t *)(v10 + 8 * v7);
    v13 = v10 + 8 * v11;
    v21 = v13;
    *v12 = v3;
    v6 = v12 + 1;
    v20.i64[1] = (uint64_t)(v12 + 1);
    v15 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *--v14;
        *v14 = 0;
        *--v12 = v16;
      }
      while (v14 != v15);
      v17 = *(int64x2_t *)a1;
      v6 = (uint64_t *)v20.i64[1];
      v13 = v21;
    }
    *a1 = v12;
    a1[1] = v6;
    v20 = v17;
    v18 = (unint64_t)a1[2];
    a1[2] = (uint64_t *)v13;
    v21 = v18;
    v19 = v17.i64[0];
    result = sub_2429114EC((uint64_t)&v19);
  }
  else
  {
    *v5 = result;
    v6 = v5 + 1;
  }
  a1[1] = v6;
  return result;
}

void sub_242740818(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::AccessoryProxSensorDrop::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  const PB::Base **v5;
  const PB::Base **v6;
  const PB::Base *v7;
  float *v8;
  float *v9;
  float v10;
  float *v11;
  float *v12;
  float v13;
  char v14;

  v3 = this;
  v4 = *(_BYTE *)(this + 104);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 104);
  }
  if ((v4 & 4) != 0)
    this = PB::Writer::writeVarInt(a2);
  v5 = *(const PB::Base ***)(v3 + 56);
  v6 = *(const PB::Base ***)(v3 + 64);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::writeSubmessage(a2, v7);
  }
  v8 = *(float **)(v3 + 8);
  v9 = *(float **)(v3 + 16);
  while (v8 != v9)
  {
    v10 = *v8++;
    this = PB::Writer::write(a2, v10);
  }
  v11 = *(float **)(v3 + 32);
  v12 = *(float **)(v3 + 40);
  while (v11 != v12)
  {
    v13 = *v11++;
    this = PB::Writer::write(a2, v13);
  }
  v14 = *(_BYTE *)(v3 + 104);
  if ((v14 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v14 = *(_BYTE *)(v3 + 104);
    if ((v14 & 0x10) == 0)
    {
LABEL_16:
      if ((v14 & 2) == 0)
        goto LABEL_17;
      goto LABEL_21;
    }
  }
  else if ((*(_BYTE *)(v3 + 104) & 0x10) == 0)
  {
    goto LABEL_16;
  }
  this = PB::Writer::writeVarInt(a2);
  v14 = *(_BYTE *)(v3 + 104);
  if ((v14 & 2) == 0)
  {
LABEL_17:
    if ((v14 & 0x20) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_21:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_BYTE *)(v3 + 104) & 0x20) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

BOOL CMMsl::AccessoryProxSensorDrop::operator==(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _BOOL8 result;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  float *v14;
  float *v15;

  v4 = *(_BYTE *)(a1 + 104);
  v5 = *(_BYTE *)(a2 + 104);
  if ((v4 & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 104) & 8) == 0 || *(_DWORD *)(a1 + 92) != *(_DWORD *)(a2 + 92))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 104) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 104) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 104) & 4) == 0 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 104) & 4) != 0)
  {
    return 0;
  }
  v6 = *(uint64_t **)(a1 + 56);
  v7 = *(uint64_t **)(a1 + 64);
  v8 = *(uint64_t **)(a2 + 56);
  if ((char *)v7 - (char *)v6 != *(_QWORD *)(a2 + 64) - (_QWORD)v8)
    return 0;
  while (v6 != v7)
  {
    result = CMMsl::ClefMeasurement::operator==(*v6, *v8);
    if (!result)
      return result;
    ++v6;
    ++v8;
  }
  v11 = *(float **)(a1 + 8);
  v10 = *(float **)(a1 + 16);
  v12 = *(float **)(a2 + 8);
  if ((char *)v10 - (char *)v11 != *(_QWORD *)(a2 + 16) - (_QWORD)v12)
    return 0;
  while (v11 != v10)
  {
    if (*v11 != *v12)
      return 0;
    ++v11;
    ++v12;
  }
  v14 = *(float **)(a1 + 32);
  v13 = *(float **)(a1 + 40);
  v15 = *(float **)(a2 + 32);
  if ((char *)v13 - (char *)v14 != *(_QWORD *)(a2 + 40) - (_QWORD)v15)
    return 0;
  while (v14 != v13)
  {
    if (*v14 != *v15)
      return 0;
    ++v14;
    ++v15;
  }
  if ((v4 & 1) != 0)
  {
    if ((v5 & 1) == 0 || *(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80))
      return 0;
  }
  else if ((v5 & 1) != 0)
  {
    return 0;
  }
  if ((v4 & 0x10) != 0)
  {
    if ((v5 & 0x10) == 0 || *(_DWORD *)(a1 + 96) != *(_DWORD *)(a2 + 96))
      return 0;
  }
  else if ((v5 & 0x10) != 0)
  {
    return 0;
  }
  if ((v4 & 2) != 0)
  {
    if ((v5 & 2) == 0 || *(_DWORD *)(a1 + 84) != *(_DWORD *)(a2 + 84))
      return 0;
  }
  else if ((v5 & 2) != 0)
  {
    return 0;
  }
  result = (v5 & 0x20) == 0;
  if ((v4 & 0x20) == 0)
    return result;
  return (v5 & 0x20) != 0 && *(_DWORD *)(a1 + 100) == *(_DWORD *)(a2 + 100);
}

uint64_t CMMsl::AccessoryProxSensorDrop::hash_value(CMMsl::AccessoryProxSensorDrop *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((*((_BYTE *)this + 104) & 8) != 0)
  {
    v2 = *((unsigned int *)this + 23);
    if ((*((_BYTE *)this + 104) & 4) != 0)
      goto LABEL_3;
  }
  else
  {
    v2 = 0;
    if ((*((_BYTE *)this + 104) & 4) != 0)
    {
LABEL_3:
      v3 = *((unsigned int *)this + 22);
      goto LABEL_6;
    }
  }
  v3 = 0;
LABEL_6:
  v4 = sub_242740C00(*((uint64_t **)this + 7), *((uint64_t **)this + 8));
  v5 = PBHashBytes();
  v6 = PBHashBytes();
  if ((*((_BYTE *)this + 104) & 1) != 0)
  {
    v7 = *((unsigned int *)this + 20);
    if ((*((_BYTE *)this + 104) & 0x10) != 0)
    {
LABEL_8:
      v8 = *((unsigned int *)this + 24);
      if ((*((_BYTE *)this + 104) & 2) != 0)
        goto LABEL_9;
LABEL_13:
      v9 = 0;
      if ((*((_BYTE *)this + 104) & 0x20) != 0)
        goto LABEL_10;
LABEL_14:
      v10 = 0;
      return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10;
    }
  }
  else
  {
    v7 = 0;
    if ((*((_BYTE *)this + 104) & 0x10) != 0)
      goto LABEL_8;
  }
  v8 = 0;
  if ((*((_BYTE *)this + 104) & 2) == 0)
    goto LABEL_13;
LABEL_9:
  v9 = *((unsigned int *)this + 21);
  if ((*((_BYTE *)this + 104) & 0x20) == 0)
    goto LABEL_14;
LABEL_10:
  v10 = *((unsigned int *)this + 25);
  return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10;
}

uint64_t sub_242740C00(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  float v4;
  float v5;
  uint64_t v6;
  char v7;
  int v9;
  BOOL v10;
  uint64_t v11;

  if (a1 == a2)
    return 0;
  v2 = 0;
  do
  {
    v3 = *a1++;
    v4 = *(float *)(v3 + 8);
    v5 = *(float *)(v3 + 12);
    v6 = LODWORD(v4);
    v7 = *(_BYTE *)(v3 + 16);
    if (v4 == 0.0 || (v7 & 1) == 0)
      v6 = 0;
    v9 = v7 & 2;
    v10 = v5 == 0.0 || v9 == 0;
    v11 = LODWORD(v5);
    if (v10)
      v11 = 0;
    v2 ^= v6 ^ v11;
  }
  while (a1 != a2);
  return v2;
}

uint64_t CMMsl::AccessoryProxTempComp::AccessoryProxTempComp(uint64_t this)
{
  *(_QWORD *)this = &off_25135C2C0;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135C2C0;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

void CMMsl::AccessoryProxTempComp::~AccessoryProxTempComp(CMMsl::AccessoryProxTempComp *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::AccessoryProxTempComp::AccessoryProxTempComp(uint64_t this, const CMMsl::AccessoryProxTempComp *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  char v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;

  *(_QWORD *)this = &off_25135C2C0;
  *(_DWORD *)(this + 44) = 0;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_BYTE *)(this + 44) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 44);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 44) & 4) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *(_BYTE *)(this + 44) = v3;
    *(_DWORD *)(this + 20) = v5;
    v2 = *((_BYTE *)a2 + 44);
  }
LABEL_6:
  if (v2 < 0)
  {
    v6 = *((_BYTE *)a2 + 40);
    v3 |= 0x80u;
    *(_BYTE *)(this + 44) = v3;
    *(_BYTE *)(this + 40) = v6;
    v2 = *((_BYTE *)a2 + 44);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        goto LABEL_9;
      goto LABEL_15;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *(_BYTE *)(this + 44) = v3;
  *(_DWORD *)(this + 28) = v7;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_16;
  }
LABEL_15:
  v8 = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *(_BYTE *)(this + 44) = v3;
  *(_DWORD *)(this + 24) = v8;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0)
      goto LABEL_11;
    goto LABEL_17;
  }
LABEL_16:
  v9 = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *(_BYTE *)(this + 44) = v3;
  *(_DWORD *)(this + 36) = v9;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 2) == 0)
  {
LABEL_11:
    if ((v2 & 0x20) == 0)
      return this;
LABEL_18:
    v11 = *((_DWORD *)a2 + 8);
    *(_BYTE *)(this + 44) = v3 | 0x20;
    *(_DWORD *)(this + 32) = v11;
    return this;
  }
LABEL_17:
  v10 = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *(_BYTE *)(this + 44) = v3;
  *(_DWORD *)(this + 16) = v10;
  if ((*((_BYTE *)a2 + 44) & 0x20) != 0)
    goto LABEL_18;
  return this;
}

uint64_t CMMsl::AccessoryProxTempComp::operator=(uint64_t a1, const CMMsl::AccessoryProxTempComp *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  char v11;
  int v12;

  if ((const CMMsl::AccessoryProxTempComp *)a1 != a2)
  {
    CMMsl::AccessoryProxTempComp::AccessoryProxTempComp((uint64_t)&v7, a2);
    v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v12;
    v12 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v8;
    v8 = v4;
    LOBYTE(v3) = *(_BYTE *)(a1 + 40);
    *(_BYTE *)(a1 + 40) = v11;
    v11 = v3;
    v5 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v9;
    v9 = v5;
    *(_QWORD *)&v5 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v10;
    v10 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::AccessoryProxTempComp *a2, CMMsl::AccessoryProxTempComp *a3)
{
  int v3;
  double result;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;

  v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  v5 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v5;
  LOBYTE(v5) = *((_BYTE *)this + 40);
  *((_BYTE *)this + 40) = *((_BYTE *)a2 + 40);
  *((_BYTE *)a2 + 40) = v5;
  v6 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v6;
  v7 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v7;
  v8 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v8;
  v9 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v9;
  v10 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v10;
  return result;
}

double CMMsl::AccessoryProxTempComp::AccessoryProxTempComp(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135C2C0;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135C2C0;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return result;
}

uint64_t CMMsl::AccessoryProxTempComp::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  __int128 v13;
  uint64_t v14;
  char v15;
  int v16;

  if (a1 != a2)
  {
    v12[0] = &off_25135C2C0;
    v3 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a2 + 44) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_BYTE *)(a2 + 40);
    v16 = *(_DWORD *)(a1 + 44);
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v12[1] = v6;
    v7 = *(_BYTE *)(a1 + 40);
    *(_BYTE *)(a1 + 40) = v5;
    v15 = v7;
    v8 = *(_OWORD *)(a2 + 16);
    v13 = *(_OWORD *)(a1 + 16);
    v9 = *(_QWORD *)(a1 + 32);
    v10 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 44) = v3;
    *(_OWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 32) = v10;
    v14 = v9;
    PB::Base::~Base((PB::Base *)v12);
  }
  return a1;
}

uint64_t CMMsl::AccessoryProxTempComp::formatText(CMMsl::AccessoryProxTempComp *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "conchaTemp");
    v5 = *((_BYTE *)this + 44);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((*((_BYTE *)this + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "location");
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "prescalar");
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "pwrState");
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
LABEL_17:
    PB::TextFormatter::format(a2, "valid");
    if ((*((_BYTE *)this + 44) & 0x40) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_9;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "tragusTemp");
  v5 = *((_BYTE *)this + 44);
  if (v5 < 0)
    goto LABEL_17;
LABEL_8:
  if ((v5 & 0x40) != 0)
LABEL_9:
    PB::TextFormatter::format(a2, "wdtPeriod");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessoryProxTempComp::readFrom(CMMsl::AccessoryProxTempComp *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  int v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  unint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  unint64_t v77;
  char v78;
  char v79;
  unsigned int v80;
  unint64_t v81;
  char v82;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_26;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_21;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_26:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 44) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 2u:
        *((_BYTE *)this + 44) |= 4u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v59 = 0;
          v60 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_124;
            }
            v61 = v21++;
            v62 = *(_BYTE *)(v22 + v61);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v62 & 0x7F) << v59;
            if ((v62 & 0x80) == 0)
              break;
            v59 += 7;
            v14 = v60++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
LABEL_123:
              v2 = v61 + 1;
              goto LABEL_124;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v25) = 0;
          goto LABEL_123;
        }
        v23 = 0;
        v24 = 0;
        v25 = 0;
        do
        {
          v2 = v21 + 1;
          *((_QWORD *)a2 + 1) = v21 + 1;
          v26 = *(_BYTE *)(v22 + v21);
          v25 |= (unint64_t)(v26 & 0x7F) << v23;
          if ((v26 & 0x80) == 0)
            goto LABEL_124;
          v23 += 7;
          v21 = v2;
          v14 = v24++ > 8;
        }
        while (!v14);
        LODWORD(v25) = 0;
LABEL_124:
        *((_DWORD *)this + 5) = v25;
        break;
      case 3u:
        *((_BYTE *)this + 44) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v28 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v27 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v28 = v27 != 0;
        }
        *((_BYTE *)this + 40) = v28;
        break;
      case 4u:
        *((_BYTE *)this + 44) |= 0x10u;
        v29 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v30 = *(_QWORD *)a2;
        if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
        {
          v63 = 0;
          v64 = 0;
          v33 = 0;
          if (v2 <= v29)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v29)
            {
              LODWORD(v33) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_129;
            }
            v65 = v29++;
            v66 = *(_BYTE *)(v30 + v65);
            *((_QWORD *)a2 + 1) = v29;
            v33 |= (unint64_t)(v66 & 0x7F) << v63;
            if ((v66 & 0x80) == 0)
              break;
            v63 += 7;
            v14 = v64++ > 8;
            if (v14)
            {
              LODWORD(v33) = 0;
LABEL_128:
              v2 = v65 + 1;
              goto LABEL_129;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v33) = 0;
          goto LABEL_128;
        }
        v31 = 0;
        v32 = 0;
        v33 = 0;
        do
        {
          v2 = v29 + 1;
          *((_QWORD *)a2 + 1) = v29 + 1;
          v34 = *(_BYTE *)(v30 + v29);
          v33 |= (unint64_t)(v34 & 0x7F) << v31;
          if ((v34 & 0x80) == 0)
            goto LABEL_129;
          v31 += 7;
          v29 = v2;
          v14 = v32++ > 8;
        }
        while (!v14);
        LODWORD(v33) = 0;
LABEL_129:
        *((_DWORD *)this + 7) = v33;
        break;
      case 5u:
        *((_BYTE *)this + 44) |= 8u;
        v35 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v36 = *(_QWORD *)a2;
        if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
        {
          v67 = 0;
          v68 = 0;
          v39 = 0;
          if (v2 <= v35)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v35)
            {
              LODWORD(v39) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_134;
            }
            v69 = v35++;
            v70 = *(_BYTE *)(v36 + v69);
            *((_QWORD *)a2 + 1) = v35;
            v39 |= (unint64_t)(v70 & 0x7F) << v67;
            if ((v70 & 0x80) == 0)
              break;
            v67 += 7;
            v14 = v68++ > 8;
            if (v14)
            {
              LODWORD(v39) = 0;
LABEL_133:
              v2 = v69 + 1;
              goto LABEL_134;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v39) = 0;
          goto LABEL_133;
        }
        v37 = 0;
        v38 = 0;
        v39 = 0;
        do
        {
          v2 = v35 + 1;
          *((_QWORD *)a2 + 1) = v35 + 1;
          v40 = *(_BYTE *)(v36 + v35);
          v39 |= (unint64_t)(v40 & 0x7F) << v37;
          if ((v40 & 0x80) == 0)
            goto LABEL_134;
          v37 += 7;
          v35 = v2;
          v14 = v38++ > 8;
        }
        while (!v14);
        LODWORD(v39) = 0;
LABEL_134:
        *((_DWORD *)this + 6) = v39;
        break;
      case 6u:
        *((_BYTE *)this + 44) |= 0x40u;
        v41 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v42 = *(_QWORD *)a2;
        if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
        {
          v71 = 0;
          v72 = 0;
          v45 = 0;
          if (v2 <= v41)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v41)
            {
              LODWORD(v45) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_139;
            }
            v73 = v41++;
            v74 = *(_BYTE *)(v42 + v73);
            *((_QWORD *)a2 + 1) = v41;
            v45 |= (unint64_t)(v74 & 0x7F) << v71;
            if ((v74 & 0x80) == 0)
              break;
            v71 += 7;
            v14 = v72++ > 8;
            if (v14)
            {
              LODWORD(v45) = 0;
LABEL_138:
              v2 = v73 + 1;
              goto LABEL_139;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v45) = 0;
          goto LABEL_138;
        }
        v43 = 0;
        v44 = 0;
        v45 = 0;
        do
        {
          v2 = v41 + 1;
          *((_QWORD *)a2 + 1) = v41 + 1;
          v46 = *(_BYTE *)(v42 + v41);
          v45 |= (unint64_t)(v46 & 0x7F) << v43;
          if ((v46 & 0x80) == 0)
            goto LABEL_139;
          v43 += 7;
          v41 = v2;
          v14 = v44++ > 8;
        }
        while (!v14);
        LODWORD(v45) = 0;
LABEL_139:
        *((_DWORD *)this + 9) = v45;
        break;
      case 7u:
        *((_BYTE *)this + 44) |= 2u;
        v47 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v48 = *(_QWORD *)a2;
        if (v47 > 0xFFFFFFFFFFFFFFF5 || v47 + 10 > v2)
        {
          v75 = 0;
          v76 = 0;
          v51 = 0;
          if (v2 <= v47)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v47)
            {
              LODWORD(v51) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_144;
            }
            v77 = v47++;
            v78 = *(_BYTE *)(v48 + v77);
            *((_QWORD *)a2 + 1) = v47;
            v51 |= (unint64_t)(v78 & 0x7F) << v75;
            if ((v78 & 0x80) == 0)
              break;
            v75 += 7;
            v14 = v76++ > 8;
            if (v14)
            {
              LODWORD(v51) = 0;
LABEL_143:
              v2 = v77 + 1;
              goto LABEL_144;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v51) = 0;
          goto LABEL_143;
        }
        v49 = 0;
        v50 = 0;
        v51 = 0;
        do
        {
          v2 = v47 + 1;
          *((_QWORD *)a2 + 1) = v47 + 1;
          v52 = *(_BYTE *)(v48 + v47);
          v51 |= (unint64_t)(v52 & 0x7F) << v49;
          if ((v52 & 0x80) == 0)
            goto LABEL_144;
          v49 += 7;
          v47 = v2;
          v14 = v50++ > 8;
        }
        while (!v14);
        LODWORD(v51) = 0;
LABEL_144:
        *((_DWORD *)this + 4) = v51;
        break;
      case 8u:
        *((_BYTE *)this + 44) |= 0x20u;
        v53 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v54 = *(_QWORD *)a2;
        if (v53 > 0xFFFFFFFFFFFFFFF5 || v53 + 10 > v2)
        {
          v79 = 0;
          v80 = 0;
          v57 = 0;
          if (v2 <= v53)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v53)
            {
              LODWORD(v57) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_149;
            }
            v81 = v53++;
            v82 = *(_BYTE *)(v54 + v81);
            *((_QWORD *)a2 + 1) = v53;
            v57 |= (unint64_t)(v82 & 0x7F) << v79;
            if ((v82 & 0x80) == 0)
              break;
            v79 += 7;
            v14 = v80++ > 8;
            if (v14)
            {
              LODWORD(v57) = 0;
LABEL_148:
              v2 = v81 + 1;
              goto LABEL_149;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v57) = 0;
          goto LABEL_148;
        }
        v55 = 0;
        v56 = 0;
        v57 = 0;
        do
        {
          v2 = v53 + 1;
          *((_QWORD *)a2 + 1) = v53 + 1;
          v58 = *(_BYTE *)(v54 + v53);
          v57 |= (unint64_t)(v58 & 0x7F) << v55;
          if ((v58 & 0x80) == 0)
            goto LABEL_149;
          v55 += 7;
          v53 = v2;
          v14 = v56++ > 8;
        }
        while (!v14);
        LODWORD(v57) = 0;
LABEL_149:
        *((_DWORD *)this + 8) = v57;
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::AccessoryProxTempComp::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 44);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x80) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(this + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x80) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 2) == 0)
  {
LABEL_8:
    if ((v4 & 0x20) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_16:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_BYTE *)(v3 + 44) & 0x20) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

BOOL CMMsl::AccessoryProxTempComp::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(unsigned __int8 *)(a1 + 44);
  v3 = *(unsigned __int8 *)(a2 + 44);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v3 & v2 & 0x80) != 0)
  {
    if (*(unsigned __int8 *)(a1 + 40) != *(unsigned __int8 *)(a2 + 40))
      return 0;
  }
  else if (((v3 | v2) & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x20) == 0;
  if ((v2 & 0x20) != 0)
    return (v3 & 0x20) != 0 && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32);
  return v4;
}

uint64_t CMMsl::AccessoryProxTempComp::hash_value(CMMsl::AccessoryProxTempComp *this)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((*((_BYTE *)this + 44) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 44) & 4) != 0)
    {
LABEL_3:
      v2 = *((unsigned int *)this + 5);
      if ((*((_BYTE *)this + 44) & 0x80) != 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 44) & 4) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 44) & 0x80) != 0)
  {
LABEL_4:
    v3 = *((unsigned __int8 *)this + 40);
    if ((*((_BYTE *)this + 44) & 0x10) != 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  v3 = 0;
  if ((*((_BYTE *)this + 44) & 0x10) != 0)
  {
LABEL_5:
    v4 = *((unsigned int *)this + 7);
    if ((*((_BYTE *)this + 44) & 8) != 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  v4 = 0;
  if ((*((_BYTE *)this + 44) & 8) != 0)
  {
LABEL_6:
    v5 = *((unsigned int *)this + 6);
    if ((*((_BYTE *)this + 44) & 0x40) != 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  v5 = 0;
  if ((*((_BYTE *)this + 44) & 0x40) != 0)
  {
LABEL_7:
    v6 = *((unsigned int *)this + 9);
    if ((*((_BYTE *)this + 44) & 2) != 0)
      goto LABEL_8;
LABEL_18:
    v7 = 0;
    if ((*((_BYTE *)this + 44) & 0x20) != 0)
      goto LABEL_9;
LABEL_19:
    v8 = 0;
    return v2 ^ *(_QWORD *)&v1 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8;
  }
LABEL_17:
  v6 = 0;
  if ((*((_BYTE *)this + 44) & 2) == 0)
    goto LABEL_18;
LABEL_8:
  v7 = *((int *)this + 4);
  if ((*((_BYTE *)this + 44) & 0x20) == 0)
    goto LABEL_19;
LABEL_9:
  v8 = *((int *)this + 8);
  return v2 ^ *(_QWORD *)&v1 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8;
}

double CMMsl::AccessoryProximityConfig::AccessoryProximityConfig(CMMsl::AccessoryProximityConfig *this)
{
  double result;

  *(_QWORD *)this = &off_25135C2F8;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_25135C2F8;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  return result;
}

void CMMsl::AccessoryProximityConfig::~AccessoryProximityConfig(CMMsl::AccessoryProximityConfig *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_25135C2F8;
  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
    sub_242910C5C(v2);
  sub_242910C9C((void ***)this + 4, 0);
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    sub_242910C5C(v3);
  sub_242910C9C((void ***)this + 2, 0);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  PB::Base::~Base(this);
}

{
  CMMsl::AccessoryProximityConfig::~AccessoryProximityConfig(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::AccessoryProximityConfig *CMMsl::AccessoryProximityConfig::AccessoryProximityConfig(CMMsl::AccessoryProximityConfig *this, const CMMsl::AccessoryConfig **a2)
{
  CMMsl::AccessoryConfig **v4;
  CMMsl::AccessoryConfig *v5;
  CMMsl::AccessoryConfig *v6;
  CMMsl::AccessoryConfig *v7;
  void **v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  const CMMsl::AccessoryConfig *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const CMMsl::AccessoryConfig *v17;
  __int128 v18;
  uint64_t v19;
  void **v21;

  *(_QWORD *)this = &off_25135C2F8;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (CMMsl::AccessoryConfig **)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  if (a2[1])
  {
    v5 = (CMMsl::AccessoryConfig *)operator new();
    v6 = CMMsl::AccessoryConfig::AccessoryConfig(v5, a2[1]);
    v7 = *v4;
    *v4 = v6;
    if (v7)
      (*(void (**)(CMMsl::AccessoryConfig *))(*(_QWORD *)v7 + 8))(v7);
  }
  if (a2[2])
  {
    v8 = (void **)operator new();
    PB::Data::Data();
    v21 = 0;
    sub_242910C9C((void ***)this + 2, v8);
    sub_242910C9C(&v21, 0);
  }
  if (a2[4])
  {
    v9 = (void **)operator new();
    PB::Data::Data();
    v21 = 0;
    sub_242910C9C((void ***)this + 4, v9);
    sub_242910C9C(&v21, 0);
  }
  if (a2[3])
  {
    v10 = operator new();
    v11 = v10;
    v12 = a2[3];
    if (*((char *)v12 + 23) < 0)
    {
      sub_242910CE8((_BYTE *)v10, *(void **)v12, *((_QWORD *)v12 + 1));
    }
    else
    {
      v13 = *(_OWORD *)v12;
      *(_QWORD *)(v10 + 16) = *((_QWORD *)v12 + 2);
      *(_OWORD *)v10 = v13;
    }
    v14 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v11;
    if (v14)
      sub_242910C5C(v14);
  }
  if (a2[5])
  {
    v15 = operator new();
    v16 = v15;
    v17 = a2[5];
    if (*((char *)v17 + 23) < 0)
    {
      sub_242910CE8((_BYTE *)v15, *(void **)v17, *((_QWORD *)v17 + 1));
    }
    else
    {
      v18 = *(_OWORD *)v17;
      *(_QWORD *)(v15 + 16) = *((_QWORD *)v17 + 2);
      *(_OWORD *)v15 = v18;
    }
    v19 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v16;
    if (v19)
      sub_242910C5C(v19);
  }
  return this;
}

uint64_t CMMsl::AccessoryProximityConfig::operator=(uint64_t a1, const CMMsl::AccessoryConfig **a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  if ((const CMMsl::AccessoryConfig **)a1 != a2)
  {
    CMMsl::AccessoryProximityConfig::AccessoryProximityConfig((CMMsl::AccessoryProximityConfig *)&v7, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v3;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v9 = v4;
    v5 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v10;
    v10 = v5;
    CMMsl::AccessoryProximityConfig::~AccessoryProximityConfig((CMMsl::AccessoryProximityConfig *)&v7);
  }
  return a1;
}

_QWORD *CMMsl::swap(_QWORD *this, CMMsl::AccessoryProximityConfig *a2, CMMsl::AccessoryProximityConfig *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = this[4];
  this[4] = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v5;
  v6 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  v7 = this[5];
  this[5] = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v7;
  return this;
}

uint64_t CMMsl::AccessoryProximityConfig::AccessoryProximityConfig(uint64_t a1, _QWORD *a2)
{
  void ***v4;
  void ***v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = &off_25135C2F8;
  v4 = (void ***)(a1 + 16);
  v5 = (void ***)(a1 + 32);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  v6 = a2[1];
  a2[1] = 0;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = (void **)a2[2];
  a2[2] = 0;
  sub_242910C9C(v4, v8);
  v9 = (void **)a2[4];
  a2[4] = 0;
  sub_242910C9C(v5, v9);
  v10 = a2[3];
  a2[3] = 0;
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v10;
  if (v11)
    sub_242910C5C(v11);
  v12 = a2[5];
  a2[5] = 0;
  v13 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v12;
  if (v13)
    sub_242910C5C(v13);
  return a1;
}

uint64_t CMMsl::AccessoryProximityConfig::operator=(uint64_t a1, _QWORD *a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  if ((_QWORD *)a1 != a2)
  {
    CMMsl::AccessoryProximityConfig::AccessoryProximityConfig((uint64_t)&v7, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v3;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v9 = v4;
    v5 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v10;
    v10 = v5;
    CMMsl::AccessoryProximityConfig::~AccessoryProximityConfig((CMMsl::AccessoryProximityConfig *)&v7);
  }
  return a1;
}

uint64_t CMMsl::AccessoryProximityConfig::formatText(CMMsl::AccessoryProximityConfig *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "config");
  if (*((_QWORD *)this + 2))
    PB::TextFormatter::format();
  if (*((_QWORD *)this + 3))
    PB::TextFormatter::format();
  if (*((_QWORD *)this + 4))
    PB::TextFormatter::format();
  if (*((_QWORD *)this + 5))
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessoryProximityConfig::readFrom(CMMsl::AccessoryProximityConfig *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void ***v8;
  void ***v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  void **v29[2];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  v8 = (void ***)((char *)this + 32);
  v9 = (void ***)((char *)this + 16);
  while (1)
  {
    v10 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        v16 = v12++ > 8;
        if (v16)
          goto LABEL_20;
      }
LABEL_22:
      if ((v13 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          v22 = operator new();
          *(_QWORD *)v22 = &off_25135BFB0;
          *(_QWORD *)(v22 + 8) = 0;
          *(_QWORD *)(v22 + 16) = 0;
          *(_QWORD *)(v22 + 24) = 0;
          *(_DWORD *)(v22 + 32) = 0;
          v23 = *((_QWORD *)this + 1);
          *((_QWORD *)this + 1) = v22;
          if (v23)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
            v22 = *((_QWORD *)this + 1);
          }
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v22 + 16))(v22, a2) & 1) == 0)
          {
            return 0;
          }
          PB::Reader::recallMark();
          break;
        case 2u:
          v24 = operator new();
          *(_QWORD *)v24 = 0;
          *(_QWORD *)(v24 + 8) = 0;
          v29[0] = 0;
          sub_242910C9C(v9, (void **)v24);
          sub_242910C9C(v29, 0);
          goto LABEL_31;
        case 3u:
          v25 = operator new();
          *(_QWORD *)v25 = 0;
          *(_QWORD *)(v25 + 8) = 0;
          v29[0] = 0;
          sub_242910C9C(v8, (void **)v25);
          sub_242910C9C(v29, 0);
LABEL_31:
          PB::Reader::read();
          goto LABEL_37;
        case 4u:
          v26 = (_QWORD *)operator new();
          v26[1] = 0;
          v26[2] = 0;
          *v26 = 0;
          v27 = *((_QWORD *)this + 3);
          *((_QWORD *)this + 3) = v26;
          if (v27)
            goto LABEL_35;
          goto LABEL_36;
        case 5u:
          v28 = (_QWORD *)operator new();
          v28[1] = 0;
          v28[2] = 0;
          *v28 = 0;
          v27 = *((_QWORD *)this + 5);
          *((_QWORD *)this + 5) = v28;
          if (v27)
LABEL_35:
            sub_242910C5C(v27);
LABEL_36:
          PB::Reader::read();
          goto LABEL_37;
        default:
          goto LABEL_20;
      }
      goto LABEL_37;
    }
    v17 = 0;
    v18 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v19 = v2 + 1;
      v20 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)a2 + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0)
        goto LABEL_22;
      v17 += 7;
      v2 = v19;
      v16 = v18++ > 8;
    }
    while (!v16);
LABEL_20:
    result = PB::Reader::skip(a2);
    if (!(_DWORD)result)
      return result;
LABEL_37:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
}

uint64_t CMMsl::AccessoryProximityConfig::writeTo(uint64_t this, PB::Writer *a2)
{
  _QWORD *v3;
  const PB::Base *v4;

  v3 = (_QWORD *)this;
  v4 = *(const PB::Base **)(this + 8);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  if (v3[2])
    this = PB::Writer::write();
  if (v3[4])
    this = PB::Writer::write();
  if (v3[3])
    this = PB::Writer::write();
  if (v3[5])
    return PB::Writer::write();
  return this;
}

BOOL CMMsl::AccessoryProximityConfig::operator==(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 **v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  int v13;
  unsigned __int8 *v14;
  _BOOL8 result;
  uint64_t v16;
  unsigned __int8 *v17;
  BOOL v18;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = a2[1];
  if (v4)
  {
    if (!v5 || !CMMsl::AccessoryConfig::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = a2[2];
  if (*(_QWORD *)(a1 + 16))
  {
    if (!v6 || (PB::Data::operator==() & 1) == 0 && *(_QWORD *)(a1 + 16) | a2[2])
      return 0;
  }
  else if (v6)
  {
    return 0;
  }
  v7 = a2[4];
  if (*(_QWORD *)(a1 + 32))
  {
    if (!v7 || (PB::Data::operator==() & 1) == 0 && *(_QWORD *)(a1 + 32) | a2[4])
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  v8 = *(unsigned __int8 **)(a1 + 24);
  v9 = (unsigned __int8 **)a2[3];
  if (!v8)
  {
    if (!v9)
      goto LABEL_38;
    return 0;
  }
  if (!v9)
    return 0;
  v10 = v8[23];
  if ((v10 & 0x80u) == 0)
    v11 = (unsigned __int8 *)v8[23];
  else
    v11 = (unsigned __int8 *)*((_QWORD *)v8 + 1);
  v12 = (unsigned __int8 *)*((unsigned __int8 *)v9 + 23);
  v13 = (char)v12;
  if ((char)v12 < 0)
    v12 = v9[1];
  if (v11 != v12)
    return 0;
  if (v13 >= 0)
    v14 = (unsigned __int8 *)a2[3];
  else
    v14 = *v9;
  if ((v10 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v8, v14, *((_QWORD *)v8 + 1)))
      goto LABEL_38;
    return 0;
  }
  if (v8[23])
  {
    while (*v8 == *v14)
    {
      ++v8;
      ++v14;
      if (!--v10)
        goto LABEL_38;
    }
    return 0;
  }
LABEL_38:
  v16 = *(_QWORD *)(a1 + 40);
  v17 = (unsigned __int8 *)a2[5];
  result = (v16 | (unint64_t)v17) == 0;
  if (v16)
    v18 = v17 == 0;
  else
    v18 = 1;
  if (!v18)
    return sub_24272D8FC(*(unsigned __int8 **)(a1 + 40), v17);
  return result;
}

unint64_t CMMsl::AccessoryProximityConfig::hash_value(CMMsl::AccessoryProximityConfig *this)
{
  CMMsl::AccessoryConfig *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = (CMMsl::AccessoryConfig *)*((_QWORD *)this + 1);
  if (v2)
    v3 = CMMsl::AccessoryConfig::hash_value(v2);
  else
    v3 = 0;
  if (*((_QWORD *)this + 2))
    v4 = PBHashBytes();
  else
    v4 = 0;
  if (*((_QWORD *)this + 4))
    v5 = PBHashBytes();
  else
    v5 = 0;
  v6 = *((_QWORD *)this + 3);
  if (v6)
    v7 = sub_242910D74(v6);
  else
    v7 = 0;
  v8 = *((_QWORD *)this + 5);
  if (v8)
    v8 = sub_242910D74(v8);
  return v4 ^ v3 ^ v5 ^ v7 ^ v8;
}

_QWORD *CMMsl::AccessoryProximityConfig::makeConfig(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135BFB0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = 0;
    *(_DWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t CMMsl::AccessorySleepStateConfidenceEpoch::AccessorySleepStateConfidenceEpoch(uint64_t this)
{
  *(_QWORD *)this = &off_25135C330;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135C330;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::AccessorySleepStateConfidenceEpoch::~AccessorySleepStateConfidenceEpoch(CMMsl::AccessorySleepStateConfidenceEpoch *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::AccessorySleepStateConfidenceEpoch::AccessorySleepStateConfidenceEpoch(uint64_t this, const CMMsl::AccessorySleepStateConfidenceEpoch *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  char v5;
  int v6;
  int v7;
  int v8;
  char v9;

  *(_QWORD *)this = &off_25135C330;
  *(_DWORD *)(this + 32) = 0;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_BYTE *)(this + 32) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 32) & 0x10) != 0)
  {
LABEL_5:
    v5 = *((_BYTE *)a2 + 28);
    v3 |= 0x10u;
    *(_BYTE *)(this + 32) = v3;
    *(_BYTE *)(this + 28) = v5;
    v2 = *((_BYTE *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *(_BYTE *)(this + 32) = v3;
    *(_DWORD *)(this + 16) = v6;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        goto LABEL_9;
      goto LABEL_13;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *(_BYTE *)(this + 32) = v3;
  *(_DWORD *)(this + 20) = v7;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      return this;
LABEL_14:
    v9 = *((_BYTE *)a2 + 29);
    *(_BYTE *)(this + 32) = v3 | 0x20;
    *(_BYTE *)(this + 29) = v9;
    return this;
  }
LABEL_13:
  v8 = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *(_BYTE *)(this + 32) = v3;
  *(_DWORD *)(this + 24) = v8;
  if ((*((_BYTE *)a2 + 32) & 0x20) != 0)
    goto LABEL_14;
  return this;
}

uint64_t CMMsl::AccessorySleepStateConfidenceEpoch::operator=(uint64_t a1, const CMMsl::AccessorySleepStateConfidenceEpoch *a2)
{
  int v3;
  uint64_t v4;
  int v5;
  _BYTE v7[8];
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  char v12;
  char v13;
  int v14;

  if ((const CMMsl::AccessorySleepStateConfidenceEpoch *)a1 != a2)
  {
    CMMsl::AccessorySleepStateConfidenceEpoch::AccessorySleepStateConfidenceEpoch((uint64_t)v7, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v14;
    v14 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v8;
    v8 = v4;
    LOBYTE(v4) = *(_BYTE *)(a1 + 28);
    *(_BYTE *)(a1 + 28) = v12;
    v12 = v4;
    LODWORD(v4) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v9;
    v9 = v4;
    v5 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v10;
    v10 = v5;
    LODWORD(v4) = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v11;
    v11 = v4;
    LOBYTE(v4) = *(_BYTE *)(a1 + 29);
    *(_BYTE *)(a1 + 29) = v13;
    v13 = v4;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::AccessorySleepStateConfidenceEpoch *a2, CMMsl::AccessorySleepStateConfidenceEpoch *a3)
{
  int v3;
  uint64_t v4;
  float result;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LOBYTE(v4) = *((_BYTE *)this + 28);
  *((_BYTE *)this + 28) = *((_BYTE *)a2 + 28);
  *((_BYTE *)a2 + 28) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  result = *((float *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((float *)a2 + 5) = result;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LOBYTE(v4) = *((_BYTE *)this + 29);
  *((_BYTE *)this + 29) = *((_BYTE *)a2 + 29);
  *((_BYTE *)a2 + 29) = v4;
  return result;
}

float CMMsl::AccessorySleepStateConfidenceEpoch::AccessorySleepStateConfidenceEpoch(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135C330;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 29) = *(_BYTE *)(a2 + 29);
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_25135C330;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 29) = *(_BYTE *)(a2 + 29);
  return result;
}

uint64_t CMMsl::AccessorySleepStateConfidenceEpoch::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  char v5;
  int v6;
  int v7;
  int v8;
  char v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  _QWORD v16[2];
  int v17;
  int v18;
  int v19;
  char v20;
  char v21;
  int v22;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_BYTE *)(a2 + 28);
    v6 = *(_DWORD *)(a2 + 16);
    v7 = *(_DWORD *)(a2 + 20);
    v8 = *(_DWORD *)(a2 + 24);
    v9 = *(_BYTE *)(a2 + 29);
    v10 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v3;
    v22 = v10;
    v11 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v16[0] = &off_25135C330;
    v16[1] = v11;
    LOBYTE(v3) = *(_BYTE *)(a1 + 28);
    *(_BYTE *)(a1 + 28) = v5;
    v20 = v3;
    v12 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v6;
    v17 = v12;
    v13 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v7;
    v18 = v13;
    v14 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v8;
    v19 = v14;
    LOBYTE(v14) = *(_BYTE *)(a1 + 29);
    *(_BYTE *)(a1 + 29) = v9;
    v21 = v14;
    PB::Base::~Base((PB::Base *)v16);
  }
  return a1;
}

uint64_t CMMsl::AccessorySleepStateConfidenceEpoch::formatText(CMMsl::AccessorySleepStateConfidenceEpoch *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "asleep");
    v5 = *((_BYTE *)this + 32);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*((_BYTE *)this + 32) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "averageConfidence");
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "initialized");
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(a2, "sensorTime");
    if ((*((_BYTE *)this + 32) & 8) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "rawConfidence", *((float *)this + 5));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 1) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 8) != 0)
LABEL_7:
    PB::TextFormatter::format(a2, "sequenceNumber");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessorySleepStateConfidenceEpoch::readFrom(CMMsl::AccessorySleepStateConfidenceEpoch *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  int v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  int v41;
  BOOL v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_26;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_21;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_26:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 32) |= 1u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v43 = 0;
          v44 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v21)
            {
              v25 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_86;
            }
            v45 = v21++;
            v46 = *(_BYTE *)(v22 + v45);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v46 & 0x7F) << v43;
            if ((v46 & 0x80) == 0)
              break;
            v43 += 7;
            v14 = v44++ > 8;
            if (v14)
            {
              v25 = 0;
LABEL_85:
              v2 = v45 + 1;
              goto LABEL_86;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v25 = 0;
          goto LABEL_85;
        }
        v23 = 0;
        v24 = 0;
        v25 = 0;
        do
        {
          v2 = v21 + 1;
          *((_QWORD *)a2 + 1) = v21 + 1;
          v26 = *(_BYTE *)(v22 + v21);
          v25 |= (unint64_t)(v26 & 0x7F) << v23;
          if ((v26 & 0x80) == 0)
            goto LABEL_86;
          v23 += 7;
          v21 = v2;
          v14 = v24++ > 8;
        }
        while (!v14);
        v25 = 0;
LABEL_86:
        *((_QWORD *)this + 1) = v25;
        break;
      case 2u:
        *((_BYTE *)this + 32) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v28 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v27 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v28 = v27 != 0;
        }
        *((_BYTE *)this + 28) = v28;
        break;
      case 3u:
        *((_BYTE *)this + 32) |= 2u;
        v29 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v30 = *(_QWORD *)a2;
        if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
        {
          v47 = 0;
          v48 = 0;
          v33 = 0;
          if (v2 <= v29)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v29)
            {
              LODWORD(v33) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_91;
            }
            v49 = v29++;
            v50 = *(_BYTE *)(v30 + v49);
            *((_QWORD *)a2 + 1) = v29;
            v33 |= (unint64_t)(v50 & 0x7F) << v47;
            if ((v50 & 0x80) == 0)
              break;
            v47 += 7;
            v14 = v48++ > 8;
            if (v14)
            {
              LODWORD(v33) = 0;
LABEL_90:
              v2 = v49 + 1;
              goto LABEL_91;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v33) = 0;
          goto LABEL_90;
        }
        v31 = 0;
        v32 = 0;
        v33 = 0;
        do
        {
          v2 = v29 + 1;
          *((_QWORD *)a2 + 1) = v29 + 1;
          v34 = *(_BYTE *)(v30 + v29);
          v33 |= (unint64_t)(v34 & 0x7F) << v31;
          if ((v34 & 0x80) == 0)
            goto LABEL_91;
          v31 += 7;
          v29 = v2;
          v14 = v32++ > 8;
        }
        while (!v14);
        LODWORD(v33) = 0;
LABEL_91:
        *((_DWORD *)this + 4) = v33;
        break;
      case 4u:
        *((_BYTE *)this + 32) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 5u:
        *((_BYTE *)this + 32) |= 8u;
        v35 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v36 = *(_QWORD *)a2;
        if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
        {
          v51 = 0;
          v52 = 0;
          v39 = 0;
          if (v2 <= v35)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v35)
            {
              LODWORD(v39) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_96;
            }
            v53 = v35++;
            v54 = *(_BYTE *)(v36 + v53);
            *((_QWORD *)a2 + 1) = v35;
            v39 |= (unint64_t)(v54 & 0x7F) << v51;
            if ((v54 & 0x80) == 0)
              break;
            v51 += 7;
            v14 = v52++ > 8;
            if (v14)
            {
              LODWORD(v39) = 0;
LABEL_95:
              v2 = v53 + 1;
              goto LABEL_96;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v39) = 0;
          goto LABEL_95;
        }
        v37 = 0;
        v38 = 0;
        v39 = 0;
        do
        {
          v2 = v35 + 1;
          *((_QWORD *)a2 + 1) = v35 + 1;
          v40 = *(_BYTE *)(v36 + v35);
          v39 |= (unint64_t)(v40 & 0x7F) << v37;
          if ((v40 & 0x80) == 0)
            goto LABEL_96;
          v37 += 7;
          v35 = v2;
          v14 = v38++ > 8;
        }
        while (!v14);
        LODWORD(v39) = 0;
LABEL_96:
        *((_DWORD *)this + 6) = v39;
        break;
      case 6u:
        *((_BYTE *)this + 32) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v42 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v41 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v42 = v41 != 0;
        }
        *((_BYTE *)this + 29) = v42;
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::AccessorySleepStateConfidenceEpoch::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(this + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      return this;
    return PB::Writer::write(a2);
  }
LABEL_12:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_BYTE *)(v3 + 32) & 0x20) != 0)
    return PB::Writer::write(a2);
  return this;
}

BOOL CMMsl::AccessorySleepStateConfidenceEpoch::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 0x10) == 0 || *(unsigned __int8 *)(a1 + 28) != *(unsigned __int8 *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 8) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 32) & 0x20) == 0;
  if ((*(_BYTE *)(a1 + 32) & 0x20) != 0)
    return (*(_BYTE *)(a2 + 32) & 0x20) != 0 && *(unsigned __int8 *)(a1 + 29) == *(unsigned __int8 *)(a2 + 29);
  return v2;
}

uint64_t CMMsl::AccessorySleepStateConfidenceEpoch::hash_value(CMMsl::AccessorySleepStateConfidenceEpoch *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((*((_BYTE *)this + 32) & 1) != 0)
  {
    v1 = *((_QWORD *)this + 1);
    if ((*((_BYTE *)this + 32) & 0x10) != 0)
    {
LABEL_3:
      v2 = *((unsigned __int8 *)this + 28);
      if ((*((_BYTE *)this + 32) & 2) != 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else
  {
    v1 = 0;
    if ((*((_BYTE *)this + 32) & 0x10) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 32) & 2) != 0)
  {
LABEL_4:
    v3 = *((unsigned int *)this + 4);
    if ((*((_BYTE *)this + 32) & 4) != 0)
      goto LABEL_5;
LABEL_13:
    v5 = 0;
    if ((*((_BYTE *)this + 32) & 8) != 0)
      goto LABEL_8;
LABEL_14:
    v6 = 0;
    if ((*((_BYTE *)this + 32) & 0x20) != 0)
      goto LABEL_9;
LABEL_15:
    v7 = 0;
    return v2 ^ v1 ^ v3 ^ v5 ^ v6 ^ v7;
  }
LABEL_12:
  v3 = 0;
  if ((*((_BYTE *)this + 32) & 4) == 0)
    goto LABEL_13;
LABEL_5:
  v4 = *((float *)this + 5);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((*((_BYTE *)this + 32) & 8) == 0)
    goto LABEL_14;
LABEL_8:
  v6 = *((unsigned int *)this + 6);
  if ((*((_BYTE *)this + 32) & 0x20) == 0)
    goto LABEL_15;
LABEL_9:
  v7 = *((unsigned __int8 *)this + 29);
  return v2 ^ v1 ^ v3 ^ v5 ^ v6 ^ v7;
}

uint64_t CMMsl::AccessorySleepStateUpdate::AccessorySleepStateUpdate(uint64_t this)
{
  *(_QWORD *)this = &off_25135C368;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135C368;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

void CMMsl::AccessorySleepStateUpdate::~AccessorySleepStateUpdate(CMMsl::AccessorySleepStateUpdate *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::AccessorySleepStateUpdate::AccessorySleepStateUpdate(uint64_t this, const CMMsl::AccessorySleepStateUpdate *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;

  *(_QWORD *)this = &off_25135C368;
  *(_DWORD *)(this + 28) = 0;
  v2 = *((_BYTE *)a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_BYTE *)(this + 28) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 28) & 2) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *(_BYTE *)(this + 28) = v3;
    *(_DWORD *)(this + 16) = v5;
    v2 = *((_BYTE *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0)
      return this;
LABEL_10:
    v7 = *((_DWORD *)a2 + 6);
    *(_BYTE *)(this + 28) = v3 | 8;
    *(_DWORD *)(this + 24) = v7;
    return this;
  }
  v6 = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *(_BYTE *)(this + 28) = v3;
  *(_DWORD *)(this + 20) = v6;
  if ((*((_BYTE *)a2 + 28) & 8) != 0)
    goto LABEL_10;
  return this;
}

uint64_t CMMsl::AccessorySleepStateUpdate::operator=(uint64_t a1, const CMMsl::AccessorySleepStateUpdate *a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  if ((const CMMsl::AccessorySleepStateUpdate *)a1 != a2)
  {
    CMMsl::AccessorySleepStateUpdate::AccessorySleepStateUpdate((uint64_t)&v6, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v7;
    v7 = v3;
    v4 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v8;
    v8 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AccessorySleepStateUpdate *a2, CMMsl::AccessorySleepStateUpdate *a3)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(this + 28);
  *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  return this;
}

uint64_t CMMsl::AccessorySleepStateUpdate::AccessorySleepStateUpdate(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = &off_25135C368;
  *(_DWORD *)(result + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  return result;
}

{
  *(_QWORD *)result = &off_25135C368;
  *(_DWORD *)(result + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  return result;
}

uint64_t CMMsl::AccessorySleepStateUpdate::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _QWORD v8[2];
  __int128 v9;

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_OWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 28) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v8[0] = &off_25135C368;
    v8[1] = v5;
    v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v4;
    v9 = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::AccessorySleepStateUpdate::formatText(CMMsl::AccessorySleepStateUpdate *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "activity");
    v5 = *((_BYTE *)this + 28);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "sensorTime");
      if ((*((_BYTE *)this + 28) & 8) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "confidenceLevel");
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "sequenceNumber");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessorySleepStateUpdate::readFrom(CMMsl::AccessorySleepStateUpdate *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  char v43;
  char v44;
  unsigned int v45;
  unint64_t v46;
  char v47;
  char v48;
  unsigned int v49;
  unint64_t v50;
  char v51;
  char v52;
  unsigned int v53;
  unint64_t v54;
  char v55;
  char v56;
  unsigned int v57;
  unint64_t v58;
  char v59;

  v3 = *((_QWORD *)a2 + 1);
  v2 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 >= v2 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v3 > v2)
        v2 = v3;
      do
      {
        if (v2 == v3)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v3 + 1;
        v18 = *(_BYTE *)(v8 + v3);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_24;
        v15 += 7;
        v3 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v3 = *((_QWORD *)a2 + 1);
      v2 = *((_QWORD *)a2 + 2);
      goto LABEL_21;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v3 + 1;
      *((_QWORD *)a2 + 1) = v3 + 1;
      v13 = *(_BYTE *)(v8 + v3);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v3 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_24:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 28) |= 1u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v44 = 0;
          v45 = 0;
          v24 = 0;
          if (v2 <= v20)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v20)
            {
              v24 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_90;
            }
            v46 = v20++;
            v47 = *(_BYTE *)(v21 + v46);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v47 & 0x7F) << v44;
            if ((v47 & 0x80) == 0)
              break;
            v44 += 7;
            v14 = v45++ > 8;
            if (v14)
            {
              v24 = 0;
LABEL_89:
              v3 = v46 + 1;
              goto LABEL_90;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v24 = 0;
          goto LABEL_89;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v3 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_90;
          v22 += 7;
          v20 = v3;
          v14 = v23++ > 8;
        }
        while (!v14);
        v24 = 0;
LABEL_90:
        *((_QWORD *)this + 1) = v24;
        break;
      case 2u:
        *((_BYTE *)this + 28) |= 2u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v48 = 0;
          v49 = 0;
          v30 = 0;
          if (v2 <= v26)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_95;
            }
            v50 = v26++;
            v51 = *(_BYTE *)(v27 + v50);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v51 & 0x7F) << v48;
            if ((v51 & 0x80) == 0)
              break;
            v48 += 7;
            v14 = v49++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_94:
              v3 = v50 + 1;
              goto LABEL_95;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v30) = 0;
          goto LABEL_94;
        }
        v28 = 0;
        v29 = 0;
        v30 = 0;
        do
        {
          v3 = v26 + 1;
          *((_QWORD *)a2 + 1) = v26 + 1;
          v31 = *(_BYTE *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0)
            goto LABEL_95;
          v28 += 7;
          v26 = v3;
          v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_95:
        *((_DWORD *)this + 4) = v30;
        break;
      case 3u:
        *((_BYTE *)this + 28) |= 4u;
        v32 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v33 = *(_QWORD *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
        {
          v52 = 0;
          v53 = 0;
          v36 = 0;
          if (v2 <= v32)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v32)
            {
              LODWORD(v36) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_100;
            }
            v54 = v32++;
            v55 = *(_BYTE *)(v33 + v54);
            *((_QWORD *)a2 + 1) = v32;
            v36 |= (unint64_t)(v55 & 0x7F) << v52;
            if ((v55 & 0x80) == 0)
              break;
            v52 += 7;
            v14 = v53++ > 8;
            if (v14)
            {
              LODWORD(v36) = 0;
LABEL_99:
              v3 = v54 + 1;
              goto LABEL_100;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v36) = 0;
          goto LABEL_99;
        }
        v34 = 0;
        v35 = 0;
        v36 = 0;
        do
        {
          v3 = v32 + 1;
          *((_QWORD *)a2 + 1) = v32 + 1;
          v37 = *(_BYTE *)(v33 + v32);
          v36 |= (unint64_t)(v37 & 0x7F) << v34;
          if ((v37 & 0x80) == 0)
            goto LABEL_100;
          v34 += 7;
          v32 = v3;
          v14 = v35++ > 8;
        }
        while (!v14);
        LODWORD(v36) = 0;
LABEL_100:
        *((_DWORD *)this + 5) = v36;
        break;
      case 4u:
        *((_BYTE *)this + 28) |= 8u;
        v38 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v39 = *(_QWORD *)a2;
        if (v38 > 0xFFFFFFFFFFFFFFF5 || v38 + 10 > v2)
        {
          v56 = 0;
          v57 = 0;
          v42 = 0;
          if (v2 <= v38)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v38)
            {
              LODWORD(v42) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_105;
            }
            v58 = v38++;
            v59 = *(_BYTE *)(v39 + v58);
            *((_QWORD *)a2 + 1) = v38;
            v42 |= (unint64_t)(v59 & 0x7F) << v56;
            if ((v59 & 0x80) == 0)
              break;
            v56 += 7;
            v14 = v57++ > 8;
            if (v14)
            {
              LODWORD(v42) = 0;
LABEL_104:
              v3 = v58 + 1;
              goto LABEL_105;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v42) = 0;
          goto LABEL_104;
        }
        v40 = 0;
        v41 = 0;
        v42 = 0;
        do
        {
          v3 = v38 + 1;
          *((_QWORD *)a2 + 1) = v38 + 1;
          v43 = *(_BYTE *)(v39 + v38);
          v42 |= (unint64_t)(v43 & 0x7F) << v40;
          if ((v43 & 0x80) == 0)
            goto LABEL_105;
          v40 += 7;
          v38 = v3;
          v14 = v41++ > 8;
        }
        while (!v14);
        LODWORD(v42) = 0;
LABEL_105:
        *((_DWORD *)this + 6) = v42;
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v3 >= v2 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::AccessorySleepStateUpdate::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 28);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_8:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_BYTE *)(v3 + 28) & 8) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

BOOL CMMsl::AccessorySleepStateUpdate::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 28) & 8) == 0;
  if ((*(_BYTE *)(a1 + 28) & 8) != 0)
    return (*(_BYTE *)(a2 + 28) & 8) != 0 && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24);
  return v2;
}

uint64_t CMMsl::AccessorySleepStateUpdate::hash_value(CMMsl::AccessorySleepStateUpdate *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((*((_BYTE *)this + 28) & 1) != 0)
  {
    v1 = *((_QWORD *)this + 1);
    if ((*((_BYTE *)this + 28) & 2) != 0)
    {
LABEL_3:
      v2 = *((unsigned int *)this + 4);
      if ((*((_BYTE *)this + 28) & 4) != 0)
        goto LABEL_4;
LABEL_8:
      v3 = 0;
      if ((*((_BYTE *)this + 28) & 8) != 0)
        goto LABEL_5;
LABEL_9:
      v4 = 0;
      return v2 ^ v1 ^ v3 ^ v4;
    }
  }
  else
  {
    v1 = 0;
    if ((*((_BYTE *)this + 28) & 2) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 28) & 4) == 0)
    goto LABEL_8;
LABEL_4:
  v3 = *((unsigned int *)this + 5);
  if ((*((_BYTE *)this + 28) & 8) == 0)
    goto LABEL_9;
LABEL_5:
  v4 = *((unsigned int *)this + 6);
  return v2 ^ v1 ^ v3 ^ v4;
}

uint64_t CMMsl::AccessoryStepDetectorDebug::AccessoryStepDetectorDebug(uint64_t this)
{
  *(_QWORD *)this = &off_25135C3A0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135C3A0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

void CMMsl::AccessoryStepDetectorDebug::~AccessoryStepDetectorDebug(CMMsl::AccessoryStepDetectorDebug *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_25135C3A0;
  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  PB::Base::~Base(this);
}

{
  CMMsl::AccessoryStepDetectorDebug::~AccessoryStepDetectorDebug(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::AccessoryStepDetectorDebug *CMMsl::AccessoryStepDetectorDebug::AccessoryStepDetectorDebug(CMMsl::AccessoryStepDetectorDebug *this, const CMMsl::AccessoryStepDetectorDebug *a2)
{
  char v4;
  char v5;
  uint64_t v6;
  int v7;
  char v8;
  CMMsl::StepLikelihoodFeatures *v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t StepFeatures;
  uint64_t v15;
  int v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)this = &off_25135C3A0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 15) = 0;
  v4 = *((_BYTE *)a2 + 60);
  if ((v4 & 4) != 0)
  {
    v6 = *((_QWORD *)a2 + 4);
    v5 = 4;
    *((_BYTE *)this + 60) = 4;
    *((_QWORD *)this + 4) = v6;
    v4 = *((_BYTE *)a2 + 60);
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = 0;
  if ((*((_BYTE *)a2 + 60) & 0x10) != 0)
  {
LABEL_5:
    v7 = *((_DWORD *)a2 + 13);
    v5 |= 0x10u;
    *((_BYTE *)this + 60) = v5;
    *((_DWORD *)this + 13) = v7;
    v4 = *((_BYTE *)a2 + 60);
  }
LABEL_6:
  if ((v4 & 8) != 0)
  {
    v17 = *((_DWORD *)a2 + 12);
    v5 |= 8u;
    *((_BYTE *)this + 60) = v5;
    *((_DWORD *)this + 12) = v17;
    v4 = *((_BYTE *)a2 + 60);
    if ((v4 & 2) == 0)
    {
LABEL_8:
      if ((v4 & 1) == 0)
        goto LABEL_9;
LABEL_20:
      v19 = *((_QWORD *)a2 + 2);
      v5 |= 1u;
      *((_BYTE *)this + 60) = v5;
      *((_QWORD *)this + 2) = v19;
      if ((*((_BYTE *)a2 + 60) & 0x20) == 0)
        goto LABEL_11;
      goto LABEL_10;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_8;
  }
  v18 = *((_QWORD *)a2 + 3);
  v5 |= 2u;
  *((_BYTE *)this + 60) = v5;
  *((_QWORD *)this + 3) = v18;
  v4 = *((_BYTE *)a2 + 60);
  if ((v4 & 1) != 0)
    goto LABEL_20;
LABEL_9:
  if ((v4 & 0x20) != 0)
  {
LABEL_10:
    v8 = *((_BYTE *)a2 + 56);
    *((_BYTE *)this + 60) = v5 | 0x20;
    *((_BYTE *)this + 56) = v8;
  }
LABEL_11:
  if (*((_QWORD *)a2 + 5))
  {
    v9 = (CMMsl::StepLikelihoodFeatures *)operator new();
    v10 = CMMsl::StepLikelihoodFeatures::StepLikelihoodFeatures(v9, *((const CMMsl::StepLikelihoodFeatures **)a2 + 5));
    v11 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v12;
    if (v11)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v11 + 8))(v11, v10);
  }
  if (*((_QWORD *)a2 + 1))
  {
    v13 = operator new();
    StepFeatures = CMMsl::FirstStepFeatures::FirstStepFeatures(v13, *((const CMMsl::FirstStepFeatures **)a2 + 1));
    v15 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = StepFeatures;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  return this;
}

uint64_t CMMsl::AccessoryStepDetectorDebug::operator=(uint64_t a1, const CMMsl::AccessoryStepDetectorDebug *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;

  if ((const CMMsl::AccessoryStepDetectorDebug *)a1 != a2)
  {
    CMMsl::AccessoryStepDetectorDebug::AccessoryStepDetectorDebug((CMMsl::AccessoryStepDetectorDebug *)&v10, a2);
    v3 = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a1 + 60) = v17;
    v17 = v3;
    v4 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v13;
    v13 = v4;
    v5 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v15;
    v15 = v5;
    v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v12;
    v12 = v6;
    LOBYTE(v3) = *(_BYTE *)(a1 + 56);
    *(_BYTE *)(a1 + 56) = v16;
    v16 = v3;
    v7 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v14;
    v14 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v11;
    v11 = v8;
    CMMsl::AccessoryStepDetectorDebug::~AccessoryStepDetectorDebug((CMMsl::AccessoryStepDetectorDebug *)&v10);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::AccessoryStepDetectorDebug *a2, CMMsl::AccessoryStepDetectorDebug *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  double result;
  uint64_t v9;
  uint64_t v10;

  v3 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v3;
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  v5 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v5;
  v6 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  LOBYTE(v6) = *((_BYTE *)this + 56);
  *((_BYTE *)this + 56) = *((_BYTE *)a2 + 56);
  *((_BYTE *)a2 + 56) = v6;
  v9 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v9;
  v10 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v10;
  return result;
}

uint64_t CMMsl::AccessoryStepDetectorDebug::AccessoryStepDetectorDebug(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = &off_25135C3A0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  v5 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return a1;
}

uint64_t CMMsl::AccessoryStepDetectorDebug::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;

  if (a1 != a2)
  {
    CMMsl::AccessoryStepDetectorDebug::AccessoryStepDetectorDebug((uint64_t)&v10, a2);
    v3 = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a1 + 60) = v17;
    v17 = v3;
    v4 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v13;
    v13 = v4;
    v5 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v15;
    v15 = v5;
    v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v12;
    v12 = v6;
    LOBYTE(v3) = *(_BYTE *)(a1 + 56);
    *(_BYTE *)(a1 + 56) = v16;
    v16 = v3;
    v7 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v14;
    v14 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v11;
    v11 = v8;
    CMMsl::AccessoryStepDetectorDebug::~AccessoryStepDetectorDebug((CMMsl::AccessoryStepDetectorDebug *)&v10);
  }
  return a1;
}

uint64_t CMMsl::AccessoryStepDetectorDebug::formatText(CMMsl::AccessoryStepDetectorDebug *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  char v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 60) & 0x20) != 0)
    PB::TextFormatter::format(a2, "detectedSteps");
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "firstStepFeatures");
  v6 = *((_BYTE *)this + 60);
  if ((v6 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "fsmEndState");
    v6 = *((_BYTE *)this + 60);
    if ((v6 & 0x10) == 0)
    {
LABEL_7:
      if ((v6 & 1) == 0)
        goto LABEL_8;
      goto LABEL_16;
    }
  }
  else if ((*((_BYTE *)this + 60) & 0x10) == 0)
  {
    goto LABEL_7;
  }
  PB::TextFormatter::format(a2, "fsmStartState");
  v6 = *((_BYTE *)this + 60);
  if ((v6 & 1) == 0)
  {
LABEL_8:
    if ((v6 & 2) == 0)
      goto LABEL_9;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "impulseEndTime", *((double *)this + 2));
  v6 = *((_BYTE *)this + 60);
  if ((v6 & 2) == 0)
  {
LABEL_9:
    if ((v6 & 4) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "impulseStartTime", *((double *)this + 3));
  if ((*((_BYTE *)this + 60) & 4) != 0)
LABEL_10:
    PB::TextFormatter::format(a2, "imuTimestamp", *((double *)this + 4));
LABEL_11:
  v7 = *((_QWORD *)this + 5);
  if (v7)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "stepLikelihoodFeatures");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessoryStepDetectorDebug::readFrom(CMMsl::AccessoryStepDetectorDebug *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  BOOL v43;
  _DWORD *v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      break;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_25:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 60) |= 4u;
        v21 = *((_QWORD *)a2 + 1);
        if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_49;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v21);
        goto LABEL_76;
      case 2u:
        *((_BYTE *)this + 60) |= 0x10u;
        v22 = *((_QWORD *)a2 + 1);
        v23 = *((_QWORD *)a2 + 2);
        v24 = *(_QWORD *)a2;
        if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
        {
          v25 = 0;
          v26 = 0;
          v27 = 0;
          do
          {
            v28 = v22 + 1;
            *((_QWORD *)a2 + 1) = v22 + 1;
            v29 = *(_BYTE *)(v24 + v22);
            v27 |= (unint64_t)(v29 & 0x7F) << v25;
            if ((v29 & 0x80) == 0)
              goto LABEL_80;
            v25 += 7;
            v22 = v28;
            v14 = v26++ > 8;
          }
          while (!v14);
LABEL_65:
          LODWORD(v27) = 0;
          goto LABEL_80;
        }
        v47 = 0;
        v48 = 0;
        v27 = 0;
        if (v23 <= v22)
          v23 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v23 == v22)
          {
            LODWORD(v27) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v49 = v22 + 1;
            v50 = *(_BYTE *)(v24 + v22);
            *((_QWORD *)a2 + 1) = v49;
            v27 |= (unint64_t)(v50 & 0x7F) << v47;
            if (v50 < 0)
            {
              v47 += 7;
              v22 = v49;
              v14 = v48++ > 8;
              if (v14)
                goto LABEL_65;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v27) = 0;
          }
          break;
        }
LABEL_80:
        *((_DWORD *)this + 13) = v27;
        goto LABEL_20;
      case 3u:
        *((_BYTE *)this + 60) |= 8u;
        v30 = *((_QWORD *)a2 + 1);
        v31 = *((_QWORD *)a2 + 2);
        v32 = *(_QWORD *)a2;
        if (v30 <= 0xFFFFFFFFFFFFFFF5 && v30 + 10 <= v31)
        {
          v33 = 0;
          v34 = 0;
          v35 = 0;
          do
          {
            v36 = v30 + 1;
            *((_QWORD *)a2 + 1) = v30 + 1;
            v37 = *(_BYTE *)(v32 + v30);
            v35 |= (unint64_t)(v37 & 0x7F) << v33;
            if ((v37 & 0x80) == 0)
              goto LABEL_84;
            v33 += 7;
            v30 = v36;
            v14 = v34++ > 8;
          }
          while (!v14);
LABEL_72:
          LODWORD(v35) = 0;
          goto LABEL_84;
        }
        v51 = 0;
        v52 = 0;
        v35 = 0;
        if (v31 <= v30)
          v31 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v31 == v30)
          {
            LODWORD(v35) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v53 = v30 + 1;
            v54 = *(_BYTE *)(v32 + v30);
            *((_QWORD *)a2 + 1) = v53;
            v35 |= (unint64_t)(v54 & 0x7F) << v51;
            if (v54 < 0)
            {
              v51 += 7;
              v30 = v53;
              v14 = v52++ > 8;
              if (v14)
                goto LABEL_72;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v35) = 0;
          }
          break;
        }
LABEL_84:
        *((_DWORD *)this + 12) = v35;
        goto LABEL_20;
      case 4u:
        *((_BYTE *)this + 60) |= 2u;
        v38 = *((_QWORD *)a2 + 1);
        if (v38 > 0xFFFFFFFFFFFFFFF7 || v38 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_49;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v38);
        goto LABEL_76;
      case 5u:
        *((_BYTE *)this + 60) |= 1u;
        v39 = *((_QWORD *)a2 + 1);
        if (v39 <= 0xFFFFFFFFFFFFFFF7 && v39 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v39);
LABEL_76:
          *((_QWORD *)a2 + 1) += 8;
        }
        else
        {
LABEL_49:
          *((_BYTE *)a2 + 24) = 1;
        }
        goto LABEL_20;
      case 6u:
        *((_BYTE *)this + 60) |= 0x20u;
        v40 = *((_QWORD *)a2 + 1);
        if (v40 >= *((_QWORD *)a2 + 2))
        {
          v43 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v41 = v40 + 1;
          v42 = *(unsigned __int8 *)(*(_QWORD *)a2 + v40);
          *((_QWORD *)a2 + 1) = v41;
          v43 = v42 != 0;
        }
        *((_BYTE *)this + 56) = v43;
        goto LABEL_20;
      case 7u:
        v44 = (_DWORD *)operator new();
        *(_QWORD *)v44 = &off_251361378;
        v44[24] = 0;
        v45 = *((_QWORD *)this + 5);
        *((_QWORD *)this + 5) = v44;
        if (v45)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
          v44 = (_DWORD *)*((_QWORD *)this + 5);
        }
        goto LABEL_56;
      case 8u:
        v44 = (_DWORD *)operator new();
        *(_QWORD *)v44 = &off_25135D910;
        v44[11] = 0;
        v46 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v44;
        if (v46)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
          v44 = (_DWORD *)*((_QWORD *)this + 1);
        }
LABEL_56:
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v44 + 16))(v44, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
LABEL_20:
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        v4 = *((unsigned __int8 *)a2 + 24);
        if (v2 >= v3 || v4 != 0)
          return v4 == 0;
        break;
      default:
        goto LABEL_19;
    }
  }
  v15 = 0;
  v16 = 0;
  v11 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v17 = v2 + 1;
    v18 = *(_BYTE *)(v8 + v2);
    *((_QWORD *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0)
      goto LABEL_25;
    v15 += 7;
    v2 = v17;
    v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  result = PB::Reader::skip(a2);
  if ((_DWORD)result)
    goto LABEL_20;
  return result;
}

uint64_t CMMsl::StepLikelihoodFeatures::StepLikelihoodFeatures(uint64_t this)
{
  *(_QWORD *)this = &off_251361378;
  *(_DWORD *)(this + 96) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251361378;
  *(_DWORD *)(this + 96) = 0;
  return this;
}

uint64_t CMMsl::FirstStepFeatures::FirstStepFeatures(uint64_t this)
{
  *(_QWORD *)this = &off_25135D910;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135D910;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

uint64_t CMMsl::AccessoryStepDetectorDebug::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  const PB::Base *v5;
  const PB::Base *v6;

  v3 = this;
  v4 = *(_BYTE *)(this + 60);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32));
    v4 = *(_BYTE *)(v3 + 60);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((*(_BYTE *)(this + 60) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 60);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 60);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 60);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  if ((*(_BYTE *)(v3 + 60) & 0x20) != 0)
LABEL_7:
    this = PB::Writer::write(a2);
LABEL_8:
  v5 = *(const PB::Base **)(v3 + 40);
  if (v5)
    this = PB::Writer::writeSubmessage(a2, v5);
  v6 = *(const PB::Base **)(v3 + 8);
  if (v6)
    return PB::Writer::writeSubmessage(a2, v6);
  return this;
}

BOOL CMMsl::AccessoryStepDetectorDebug::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;

  if ((*(_BYTE *)(a1 + 60) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 60) & 4) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 60) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 60) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 60) & 0x10) == 0 || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 60) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 60) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 60) & 8) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 60) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 60) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 60) & 2) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 60) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 60) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 60) & 1) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 60) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 60) & 0x20) != 0)
  {
    if ((*(_BYTE *)(a2 + 60) & 0x20) == 0 || *(unsigned __int8 *)(a1 + 56) != *(unsigned __int8 *)(a2 + 56))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 60) & 0x20) != 0)
  {
    return 0;
  }
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a2 + 40);
  if (v4)
  {
    if (!v5 || !CMMsl::StepLikelihoodFeatures::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = *(_QWORD *)(a2 + 8);
  result = v6 == 0;
  if (!*(_QWORD *)(a1 + 8))
    return result;
  return v6 && CMMsl::FirstStepFeatures::operator==(*(_QWORD *)(a1 + 8), v6);
}

BOOL CMMsl::StepLikelihoodFeatures::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 96);
  v3 = *(_WORD *)(a2 + 96);
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 96) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 96) & 0x400) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 96) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 96) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 96) & 0x200) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 96) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 96) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 96) & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 96) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  v4 = (v3 & 1) == 0;
  if ((v2 & 1) != 0)
    return (v3 & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  return v4;
}

BOOL CMMsl::FirstStepFeatures::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 44) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 44) & 0x10) == 0;
  if ((*(_BYTE *)(a1 + 44) & 0x10) != 0)
    return (*(_BYTE *)(a2 + 44) & 0x10) != 0 && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40);
  return v2;
}

unint64_t CMMsl::AccessoryStepDetectorDebug::hash_value(CMMsl::AccessoryStepDetectorDebug *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CMMsl::StepLikelihoodFeatures *v8;
  uint64_t v9;
  unint64_t v10;

  if ((*((_BYTE *)this + 60) & 4) != 0)
  {
    if (*((double *)this + 4) == 0.0)
      v2 = 0;
    else
      v2 = *((_QWORD *)this + 4);
    if ((*((_BYTE *)this + 60) & 0x10) != 0)
    {
LABEL_3:
      v3 = *((unsigned int *)this + 13);
      if ((*((_BYTE *)this + 60) & 8) != 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else
  {
    v2 = 0;
    if ((*((_BYTE *)this + 60) & 0x10) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((*((_BYTE *)this + 60) & 8) != 0)
  {
LABEL_4:
    v4 = *((unsigned int *)this + 12);
    if ((*((_BYTE *)this + 60) & 2) != 0)
      goto LABEL_5;
LABEL_20:
    v5 = 0;
    if ((*((_BYTE *)this + 60) & 1) != 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_19:
  v4 = 0;
  if ((*((_BYTE *)this + 60) & 2) == 0)
    goto LABEL_20;
LABEL_5:
  if (*((double *)this + 3) == 0.0)
    v5 = 0;
  else
    v5 = *((_QWORD *)this + 3);
  if ((*((_BYTE *)this + 60) & 1) != 0)
  {
LABEL_9:
    if (*((double *)this + 2) == 0.0)
      v6 = 0;
    else
      v6 = *((_QWORD *)this + 2);
    if ((*((_BYTE *)this + 60) & 0x20) != 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  v6 = 0;
  if ((*((_BYTE *)this + 60) & 0x20) != 0)
  {
LABEL_13:
    v7 = *((unsigned __int8 *)this + 56);
    goto LABEL_23;
  }
LABEL_22:
  v7 = 0;
LABEL_23:
  v8 = (CMMsl::StepLikelihoodFeatures *)*((_QWORD *)this + 5);
  if (v8)
    v9 = CMMsl::StepLikelihoodFeatures::hash_value(v8);
  else
    v9 = 0;
  v10 = *((_QWORD *)this + 1);
  if (v10)
    v10 = CMMsl::FirstStepFeatures::hash_value((CMMsl::FirstStepFeatures *)v10);
  return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v9 ^ v10;
}

_QWORD *CMMsl::AccessoryStepDetectorDebug::makeStepLikelihoodFeatures(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[5])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251361378;
    *(_DWORD *)(v2 + 96) = 0;
    this = (_QWORD *)v1[5];
    v1[5] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::AccessoryStepDetectorDebug::makeFirstStepFeatures(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135D910;
    *(_DWORD *)(v2 + 44) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t CMMsl::AccessoryWake::AccessoryWake(uint64_t this)
{
  *(_QWORD *)this = &off_25135C3D8;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135C3D8;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

void CMMsl::AccessoryWake::~AccessoryWake(CMMsl::AccessoryWake *this)
{
  void *v2;

  *(_QWORD *)this = &off_25135C3D8;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::AccessoryWake::~AccessoryWake(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::AccessoryWake *CMMsl::AccessoryWake::AccessoryWake(CMMsl::AccessoryWake *this, const CMMsl::AccessoryWake *a2)
{
  _QWORD *v3;
  char v4;
  char v5;
  int v6;
  uint64_t v7;
  int v8;
  int v10;

  *(_QWORD *)this = &off_25135C3D8;
  *((_QWORD *)this + 1) = 0;
  v3 = (_QWORD *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 13) = 0;
  v4 = *((_BYTE *)a2 + 52);
  if ((v4 & 4) != 0)
  {
    v6 = *((_DWORD *)a2 + 11);
    v5 = 4;
    *((_BYTE *)this + 52) = 4;
    *((_DWORD *)this + 11) = v6;
    v4 = *((_BYTE *)a2 + 52);
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = 0;
  if ((*((_BYTE *)a2 + 52) & 1) != 0)
  {
LABEL_5:
    v7 = *((_QWORD *)a2 + 4);
    v5 |= 1u;
    *((_BYTE *)this + 52) = v5;
    *((_QWORD *)this + 4) = v7;
    v4 = *((_BYTE *)a2 + 52);
  }
LABEL_6:
  if ((v4 & 8) == 0)
  {
    if ((v4 & 2) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
  v10 = *((_DWORD *)a2 + 12);
  v5 |= 8u;
  *((_BYTE *)this + 52) = v5;
  *((_DWORD *)this + 12) = v10;
  if ((*((_BYTE *)a2 + 52) & 2) != 0)
  {
LABEL_8:
    v8 = *((_DWORD *)a2 + 10);
    *((_BYTE *)this + 52) = v5 | 2;
    *((_DWORD *)this + 10) = v8;
  }
LABEL_9:
  if (this != a2)
    sub_242911380(v3, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  return this;
}

uint64_t CMMsl::AccessoryWake::operator=(uint64_t a1, const CMMsl::AccessoryWake *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  _BYTE v8[8];
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  if ((const CMMsl::AccessoryWake *)a1 != a2)
  {
    CMMsl::AccessoryWake::AccessoryWake((CMMsl::AccessoryWake *)v8, a2);
    v3 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v11;
    v11 = v3;
    v4 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v12 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v9 = v5;
    v6 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v10;
    v10 = v6;
    CMMsl::AccessoryWake::~AccessoryWake((CMMsl::AccessoryWake *)v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::AccessoryWake *a2, CMMsl::AccessoryWake *a3)
{
  int v3;
  int v4;
  double result;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v3;
  v4 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  result = *((double *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((double *)a2 + 4) = result;
  v6 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v6;
  v7 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v7;
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v8;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v9;
  v10 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v10;
  return result;
}

uint64_t CMMsl::AccessoryWake::AccessoryWake(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_25135C3D8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  return a1;
}

{
  *(_QWORD *)a1 = &off_25135C3D8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  return a1;
}

uint64_t CMMsl::AccessoryWake::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  void (**v12)(CMMsl::AccessoryWake *__hidden);
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;

  if (a1 != a2)
  {
    v12 = &off_25135C3D8;
    v3 = *(_QWORD *)(a2 + 32);
    v4 = *(_QWORD *)(a2 + 24);
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v6 = *(_OWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 52) = 0;
    v7 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v3;
    v15 = v7;
    v8 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v6;
    v16 = v8;
    v9 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    v13 = v9;
    v10 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v4;
    v14 = v10;
    CMMsl::AccessoryWake::~AccessoryWake((CMMsl::AccessoryWake *)&v12);
  }
  return a1;
}

uint64_t CMMsl::AccessoryWake::formatText(CMMsl::AccessoryWake *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 52);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "hostState");
    v5 = *((_BYTE *)this + 52);
  }
  if ((v5 & 4) != 0)
    PB::TextFormatter::format(a2, "location");
  v6 = *((_QWORD *)this + 1);
  v7 = *((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v6 += 4;
    PB::TextFormatter::format(a2, "s7q8");
  }
  v8 = *((_BYTE *)this + 52);
  if ((v8 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "sensorState");
    v8 = *((_BYTE *)this + 52);
  }
  if ((v8 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 4));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::AccessoryWake::readFrom(CMMsl::AccessoryWake *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  char *v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  char *v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  BOOL v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  char v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  char v69;
  unsigned int v70;
  unint64_t v71;
  char v72;
  char v73;
  unsigned int v74;
  unint64_t v75;
  char v76;
  char v77;
  unsigned int v78;
  unint64_t v79;
  char v80;
  unint64_t v81;
  char *v82;
  _DWORD *v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  _DWORD *v90;
  int v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  char v95;
  unsigned int v96;
  unint64_t v98;
  char v99;
  uint64_t v100;
  unint64_t v101;
  char v102;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (2)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v58 = v10++ > 8;
        if (v58)
          goto LABEL_19;
      }
LABEL_25:
      if ((v11 & 7) != 4)
      {
        switch((v11 >> 3))
        {
          case 1u:
            *((_BYTE *)this + 52) |= 4u;
            v19 = *((_QWORD *)a2 + 1);
            v20 = *((_QWORD *)a2 + 2);
            v21 = *(_QWORD *)a2;
            if (v19 <= 0xFFFFFFFFFFFFFFF5 && v19 + 10 <= v20)
            {
              v22 = 0;
              v23 = 0;
              v24 = 0;
              do
              {
                v25 = v19 + 1;
                *((_QWORD *)a2 + 1) = v19 + 1;
                v26 = *(_BYTE *)(v21 + v19);
                v24 |= (unint64_t)(v26 & 0x7F) << v22;
                if ((v26 & 0x80) == 0)
                  goto LABEL_135;
                v22 += 7;
                v19 = v25;
                v58 = v23++ > 8;
              }
              while (!v58);
LABEL_102:
              LODWORD(v24) = 0;
              goto LABEL_135;
            }
            v69 = 0;
            v70 = 0;
            v24 = 0;
            if (v20 <= v19)
              v20 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v20 == v19)
              {
                LODWORD(v24) = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v71 = v19 + 1;
                v72 = *(_BYTE *)(v21 + v19);
                *((_QWORD *)a2 + 1) = v71;
                v24 |= (unint64_t)(v72 & 0x7F) << v69;
                if (v72 < 0)
                {
                  v69 += 7;
                  v19 = v71;
                  v58 = v70++ > 8;
                  if (v58)
                    goto LABEL_102;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v24) = 0;
              }
              break;
            }
LABEL_135:
            *((_DWORD *)this + 11) = v24;
            goto LABEL_20;
          case 2u:
            *((_BYTE *)this + 52) |= 1u;
            v27 = *((_QWORD *)a2 + 1);
            if (v27 <= 0xFFFFFFFFFFFFFFF7 && v27 + 8 <= *((_QWORD *)a2 + 2))
            {
              *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v27);
              *((_QWORD *)a2 + 1) += 8;
            }
            else
            {
              *((_BYTE *)a2 + 24) = 1;
            }
            goto LABEL_20;
          case 3u:
            *((_BYTE *)this + 52) |= 8u;
            v28 = *((_QWORD *)a2 + 1);
            v29 = *((_QWORD *)a2 + 2);
            v30 = *(_QWORD *)a2;
            if (v28 <= 0xFFFFFFFFFFFFFFF5 && v28 + 10 <= v29)
            {
              v31 = 0;
              v32 = 0;
              v33 = 0;
              do
              {
                v34 = v28 + 1;
                *((_QWORD *)a2 + 1) = v28 + 1;
                v35 = *(_BYTE *)(v30 + v28);
                v33 |= (unint64_t)(v35 & 0x7F) << v31;
                if ((v35 & 0x80) == 0)
                  goto LABEL_138;
                v31 += 7;
                v28 = v34;
                v58 = v32++ > 8;
              }
              while (!v58);
LABEL_109:
              LODWORD(v33) = 0;
              goto LABEL_138;
            }
            v73 = 0;
            v74 = 0;
            v33 = 0;
            if (v29 <= v28)
              v29 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v29 == v28)
              {
                LODWORD(v33) = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v75 = v28 + 1;
                v76 = *(_BYTE *)(v30 + v28);
                *((_QWORD *)a2 + 1) = v75;
                v33 |= (unint64_t)(v76 & 0x7F) << v73;
                if (v76 < 0)
                {
                  v73 += 7;
                  v28 = v75;
                  v58 = v74++ > 8;
                  if (v58)
                    goto LABEL_109;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v33) = 0;
              }
              break;
            }
LABEL_138:
            *((_DWORD *)this + 12) = v33;
            goto LABEL_20;
          case 4u:
            *((_BYTE *)this + 52) |= 2u;
            v36 = *((_QWORD *)a2 + 1);
            v37 = *((_QWORD *)a2 + 2);
            v38 = *(_QWORD *)a2;
            if (v36 <= 0xFFFFFFFFFFFFFFF5 && v36 + 10 <= v37)
            {
              v39 = 0;
              v40 = 0;
              v41 = 0;
              do
              {
                v42 = v36 + 1;
                *((_QWORD *)a2 + 1) = v36 + 1;
                v43 = *(_BYTE *)(v38 + v36);
                v41 |= (unint64_t)(v43 & 0x7F) << v39;
                if ((v43 & 0x80) == 0)
                  goto LABEL_141;
                v39 += 7;
                v36 = v42;
                v58 = v40++ > 8;
              }
              while (!v58);
LABEL_116:
              LODWORD(v41) = 0;
              goto LABEL_141;
            }
            v77 = 0;
            v78 = 0;
            v41 = 0;
            if (v37 <= v36)
              v37 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v37 == v36)
              {
                LODWORD(v41) = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v79 = v36 + 1;
                v80 = *(_BYTE *)(v38 + v36);
                *((_QWORD *)a2 + 1) = v79;
                v41 |= (unint64_t)(v80 & 0x7F) << v77;
                if (v80 < 0)
                {
                  v77 += 7;
                  v36 = v79;
                  v58 = v78++ > 8;
                  if (v58)
                    goto LABEL_116;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v41) = 0;
              }
              break;
            }
LABEL_141:
            *((_DWORD *)this + 10) = v41;
            goto LABEL_20;
          case 5u:
            if ((v11 & 7) == 2)
            {
              if ((PB::Reader::placeMark() & 1) != 0)
                return 0;
              if (*((_QWORD *)a2 + 1) < *((_QWORD *)a2 + 2) && !*((_BYTE *)a2 + 24))
              {
                v44 = (char *)*((_QWORD *)this + 2);
                do
                {
                  v45 = *((_QWORD *)this + 3);
                  if ((unint64_t)v44 >= v45)
                  {
                    v46 = (char *)*((_QWORD *)this + 1);
                    v47 = (v44 - v46) >> 2;
                    v48 = v47 + 1;
                    if ((unint64_t)(v47 + 1) >> 62)
                      goto LABEL_172;
                    v49 = v45 - (_QWORD)v46;
                    if (v49 >> 1 > v48)
                      v48 = v49 >> 1;
                    if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
                      v50 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v50 = v48;
                    if (v50)
                    {
                      v50 = (unint64_t)sub_2429114B8(v50);
                      v46 = (char *)*((_QWORD *)this + 1);
                      v44 = (char *)*((_QWORD *)this + 2);
                    }
                    else
                    {
                      v51 = 0;
                    }
                    v52 = (_DWORD *)(v50 + 4 * v47);
                    *v52 = 0;
                    v53 = (char *)(v52 + 1);
                    while (v44 != v46)
                    {
                      v54 = *((_DWORD *)v44 - 1);
                      v44 -= 4;
                      *--v52 = v54;
                    }
                    *((_QWORD *)this + 1) = v52;
                    *((_QWORD *)this + 2) = v53;
                    *((_QWORD *)this + 3) = v50 + 4 * v51;
                    if (v46)
                      operator delete(v46);
                    v44 = v53;
                  }
                  else
                  {
                    *(_DWORD *)v44 = 0;
                    v44 += 4;
                  }
                  *((_QWORD *)this + 2) = v44;
                  v56 = *((_QWORD *)a2 + 1);
                  v55 = *((_QWORD *)a2 + 2);
                  v57 = *(_QWORD *)a2;
                  v58 = v56 > 0xFFFFFFFFFFFFFFF5 || v56 + 10 > v55;
                  if (!v58)
                  {
                    v64 = 0;
                    v65 = 0;
                    v66 = 0;
                    while (1)
                    {
                      v67 = v56 + 1;
                      *((_QWORD *)a2 + 1) = v56 + 1;
                      v68 = *(_BYTE *)(v57 + v56);
                      v66 |= (unint64_t)(v68 & 0x7F) << v64;
                      if ((v68 & 0x80) == 0)
                        goto LABEL_93;
                      v64 += 7;
                      v56 = v67;
                      v58 = v65++ > 8;
                      if (v58)
                      {
                        LODWORD(v66) = 0;
                        goto LABEL_93;
                      }
                    }
                  }
                  v59 = 0;
                  v60 = 0;
                  v66 = 0;
                  if (v55 <= v56)
                    v61 = *((_QWORD *)a2 + 1);
                  else
                    v61 = *((_QWORD *)a2 + 2);
                  while (1)
                  {
                    if (v61 == v56)
                    {
                      *((_BYTE *)a2 + 24) = 1;
                      *((_DWORD *)v44 - 1) = 0;
                      goto LABEL_129;
                    }
                    v62 = v56++;
                    v63 = *(_BYTE *)(v57 + v62);
                    *((_QWORD *)a2 + 1) = v56;
                    v66 |= (unint64_t)(v63 & 0x7F) << v59;
                    if ((v63 & 0x80) == 0)
                      break;
                    v59 += 7;
                    v58 = v60++ > 8;
                    if (v58)
                    {
                      LODWORD(v66) = 0;
                      goto LABEL_92;
                    }
                  }
                  if (*((_BYTE *)a2 + 24))
                    LODWORD(v66) = 0;
LABEL_92:
                  v67 = v62 + 1;
LABEL_93:
                  *((_DWORD *)v44 - 1) = v66;
                }
                while (v67 < v55 && !*((_BYTE *)a2 + 24));
              }
LABEL_129:
              PB::Reader::recallMark();
            }
            else
            {
              v82 = (char *)*((_QWORD *)this + 2);
              v81 = *((_QWORD *)this + 3);
              if ((unint64_t)v82 >= v81)
              {
                v84 = (char *)*((_QWORD *)this + 1);
                v85 = (v82 - v84) >> 2;
                v86 = v85 + 1;
                if ((unint64_t)(v85 + 1) >> 62)
LABEL_172:
                  sub_242729A44();
                v87 = v81 - (_QWORD)v84;
                if (v87 >> 1 > v86)
                  v86 = v87 >> 1;
                if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL)
                  v88 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v88 = v86;
                if (v88)
                {
                  v88 = (unint64_t)sub_2429114B8(v88);
                  v84 = (char *)*((_QWORD *)this + 1);
                  v82 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v89 = 0;
                }
                v90 = (_DWORD *)(v88 + 4 * v85);
                *v90 = 0;
                v83 = v90 + 1;
                while (v82 != v84)
                {
                  v91 = *((_DWORD *)v82 - 1);
                  v82 -= 4;
                  *--v90 = v91;
                }
                *((_QWORD *)this + 1) = v90;
                *((_QWORD *)this + 2) = v83;
                *((_QWORD *)this + 3) = v88 + 4 * v89;
                if (v84)
                  operator delete(v84);
              }
              else
              {
                *(_DWORD *)v82 = 0;
                v83 = v82 + 4;
              }
              *((_QWORD *)this + 2) = v83;
              v92 = *((_QWORD *)a2 + 1);
              v93 = *((_QWORD *)a2 + 2);
              v94 = *(_QWORD *)a2;
              v95 = 0;
              v96 = 0;
              if (v92 > 0xFFFFFFFFFFFFFFF5 || v92 + 10 > v93)
              {
                v100 = 0;
                if (v93 <= v92)
                  v93 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v93 == v92)
                  {
                    LODWORD(v100) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_167;
                  }
                  v98 = v92 + 1;
                  v99 = *(_BYTE *)(v94 + v92);
                  *((_QWORD *)a2 + 1) = v98;
                  v100 |= (unint64_t)(v99 & 0x7F) << v95;
                  if ((v99 & 0x80) == 0)
                    break;
                  v95 += 7;
                  v92 = v98;
                  v58 = v96++ > 8;
                  if (v58)
                  {
LABEL_163:
                    LODWORD(v100) = 0;
                    goto LABEL_167;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v100) = 0;
              }
              else
              {
                v100 = 0;
                while (1)
                {
                  v101 = v92 + 1;
                  *((_QWORD *)a2 + 1) = v92 + 1;
                  v102 = *(_BYTE *)(v94 + v92);
                  v100 |= (unint64_t)(v102 & 0x7F) << v95;
                  if ((v102 & 0x80) == 0)
                    break;
                  v95 += 7;
                  v92 = v101;
                  v58 = v96++ > 8;
                  if (v58)
                    goto LABEL_163;
                }
              }
LABEL_167:
              *(v83 - 1) = v100;
            }
LABEL_20:
            v2 = *((_QWORD *)a2 + 1);
            v3 = *((_QWORD *)a2 + 2);
            v4 = *((unsigned __int8 *)a2 + 24);
            if (v2 >= v3 || v4 != 0)
              return v4 == 0;
            continue;
          default:
            goto LABEL_19;
        }
      }
      v4 = 0;
      return v4 == 0;
    }
    break;
  }
  v14 = 0;
  v15 = 0;
  v11 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v16 = v2 + 1;
    v17 = *(_BYTE *)(v8 + v2);
    *((_QWORD *)a2 + 1) = v16;
    v11 |= (unint64_t)(v17 & 0x7F) << v14;
    if ((v17 & 0x80) == 0)
      goto LABEL_25;
    v14 += 7;
    v2 = v16;
    v58 = v15++ > 8;
  }
  while (!v58);
LABEL_19:
  if ((PB::Reader::skip(a2) & 1) != 0)
    goto LABEL_20;
  return 0;
}

uint64_t CMMsl::AccessoryWake::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  v3 = this;
  v4 = *(_BYTE *)(this + 52);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 52);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
LABEL_12:
      this = PB::Writer::writeVarInt(a2);
      if ((*(_BYTE *)(v3 + 52) & 2) == 0)
        goto LABEL_6;
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(this + 52) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  v4 = *(_BYTE *)(v3 + 52);
  if ((v4 & 8) != 0)
    goto LABEL_12;
LABEL_4:
  if ((v4 & 2) != 0)
LABEL_5:
    this = PB::Writer::writeVarInt(a2);
LABEL_6:
  v6 = *(_QWORD *)(v3 + 8);
  v5 = *(_QWORD *)(v3 + 16);
  while (v6 != v5)
  {
    v6 += 4;
    this = PB::Writer::writeVarInt(a2);
  }
  return this;
}

BOOL CMMsl::AccessoryWake::operator==(uint64_t a1, uint64_t a2)
{
  size_t v2;

  if ((*(_BYTE *)(a1 + 52) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 52) & 4) == 0 || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 52) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 52) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 52) & 1) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 52) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 52) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 52) & 8) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 52) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 52) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 52) & 2) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 52) & 2) != 0)
  {
    return 0;
  }
  v2 = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);
  if (v2 == *(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8))
    return memcmp(*(const void **)(a1 + 8), *(const void **)(a2 + 8), v2) == 0;
  return 0;
}

uint64_t CMMsl::AccessoryWake::hash_value(CMMsl::AccessoryWake *this)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;

  if ((*((_BYTE *)this + 52) & 4) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 52) & 1) != 0)
      goto LABEL_3;
LABEL_9:
    v2 = 0.0;
    if ((*((_BYTE *)this + 52) & 8) != 0)
      goto LABEL_6;
LABEL_10:
    v3 = 0;
    if ((*((_BYTE *)this + 52) & 2) != 0)
      goto LABEL_7;
LABEL_11:
    v4 = 0;
    return *(_QWORD *)&v2 ^ v1 ^ v3 ^ v4 ^ PBHashBytes();
  }
  v1 = *((unsigned int *)this + 11);
  if ((*((_BYTE *)this + 52) & 1) == 0)
    goto LABEL_9;
LABEL_3:
  v2 = *((double *)this + 4);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 52) & 8) == 0)
    goto LABEL_10;
LABEL_6:
  v3 = *((unsigned int *)this + 12);
  if ((*((_BYTE *)this + 52) & 2) == 0)
    goto LABEL_11;
LABEL_7:
  v4 = *((unsigned int *)this + 10);
  return *(_QWORD *)&v2 ^ v1 ^ v3 ^ v4 ^ PBHashBytes();
}

double CMMsl::AccessoryWakeDebug::AccessoryWakeDebug(CMMsl::AccessoryWakeDebug *this)
{
  double result;

  *(_QWORD *)this = &off_25135C410;
  *((_DWORD *)this + 48) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_25135C410;
  *((_DWORD *)this + 48) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  return result;
}

void CMMsl::AccessoryWakeDebug::~AccessoryWakeDebug(CMMsl::AccessoryWakeDebug *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  *(_QWORD *)this = &off_25135C410;
  v2 = (void *)*((_QWORD *)this + 16);
  if (v2)
  {
    *((_QWORD *)this + 17) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 13);
  if (v3)
  {
    *((_QWORD *)this + 14) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 10);
  if (v4)
  {
    *((_QWORD *)this + 11) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 7);
  if (v5)
  {
    *((_QWORD *)this + 8) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 4);
  if (v6)
  {
    *((_QWORD *)this + 5) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 1);
  if (v7)
  {
    *((_QWORD *)this + 2) = v7;
    operator delete(v7);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::AccessoryWakeDebug::~AccessoryWakeDebug(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::AccessoryWakeDebug *CMMsl::AccessoryWakeDebug::AccessoryWakeDebug(CMMsl::AccessoryWakeDebug *this, const CMMsl::AccessoryWakeDebug *a2)
{
  _QWORD *v4;
  uint64_t v5;
  __int16 v6;
  int v7;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;

  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (_QWORD *)((char *)this + 8);
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_QWORD *)this = &off_25135C410;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 48) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  if ((*((_WORD *)a2 + 96) & 1) != 0)
  {
    v5 = *((_QWORD *)a2 + 19);
    *((_WORD *)this + 96) = 1;
    *((_QWORD *)this + 19) = v5;
  }
  if (this != a2)
  {
    sub_242911380(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
    sub_242911380((_QWORD *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
    sub_242911380((_QWORD *)this + 10, *((char **)a2 + 10), *((char **)a2 + 11), (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 2);
    sub_242911380((_QWORD *)this + 7, *((char **)a2 + 7), *((char **)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 2);
  }
  v6 = *((_WORD *)a2 + 96);
  if ((v6 & 0x80) != 0)
  {
    v9 = *((_DWORD *)a2 + 46);
    *((_WORD *)this + 96) |= 0x80u;
    *((_DWORD *)this + 46) = v9;
    v6 = *((_WORD *)a2 + 96);
    if ((v6 & 0x40) == 0)
    {
LABEL_7:
      if ((v6 & 0x100) == 0)
        goto LABEL_8;
      goto LABEL_19;
    }
  }
  else if ((v6 & 0x40) == 0)
  {
    goto LABEL_7;
  }
  v10 = *((_DWORD *)a2 + 45);
  *((_WORD *)this + 96) |= 0x40u;
  *((_DWORD *)this + 45) = v10;
  v6 = *((_WORD *)a2 + 96);
  if ((v6 & 0x100) == 0)
  {
LABEL_8:
    if ((v6 & 4) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  v11 = *((_DWORD *)a2 + 47);
  *((_WORD *)this + 96) |= 0x100u;
  *((_DWORD *)this + 47) = v11;
  v6 = *((_WORD *)a2 + 96);
  if ((v6 & 4) == 0)
  {
LABEL_9:
    if ((v6 & 8) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  v12 = *((_DWORD *)a2 + 41);
  *((_WORD *)this + 96) |= 4u;
  *((_DWORD *)this + 41) = v12;
  v6 = *((_WORD *)a2 + 96);
  if ((v6 & 8) == 0)
  {
LABEL_10:
    if ((v6 & 0x20) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  v13 = *((_DWORD *)a2 + 42);
  *((_WORD *)this + 96) |= 8u;
  *((_DWORD *)this + 42) = v13;
  v6 = *((_WORD *)a2 + 96);
  if ((v6 & 0x20) == 0)
  {
LABEL_11:
    if ((v6 & 0x10) == 0)
      goto LABEL_12;
    goto LABEL_23;
  }
LABEL_22:
  v14 = *((_DWORD *)a2 + 44);
  *((_WORD *)this + 96) |= 0x20u;
  *((_DWORD *)this + 44) = v14;
  v6 = *((_WORD *)a2 + 96);
  if ((v6 & 0x10) == 0)
  {
LABEL_12:
    if ((v6 & 2) == 0)
      goto LABEL_14;
    goto LABEL_13;
  }
LABEL_23:
  v15 = *((_DWORD *)a2 + 43);
  *((_WORD *)this + 96) |= 0x10u;
  *((_DWORD *)this + 43) = v15;
  if ((*((_WORD *)a2 + 96) & 2) != 0)
  {
LABEL_13:
    v7 = *((_DWORD *)a2 + 40);
    *((_WORD *)this + 96) |= 2u;
    *((_DWORD *)this + 40) = v7;
  }
LABEL_14:
  if (this != a2)
  {
    sub_242911380((_QWORD *)this + 13, *((char **)a2 + 13), *((char **)a2 + 14), (uint64_t)(*((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13)) >> 2);
    sub_242911380((_QWORD *)this + 16, *((char **)a2 + 16), *((char **)a2 + 17), (uint64_t)(*((_QWORD *)a2 + 17) - *((_QWORD *)a2 + 16)) >> 2);
  }
  return this;
}

CMMsl *CMMsl::AccessoryWakeDebug::operator=(CMMsl *a1, const CMMsl::AccessoryWakeDebug *a2)
{
  CMMsl::AccessoryWakeDebug *v3;
  _BYTE v5[200];

  if (a1 != a2)
  {
    CMMsl::AccessoryWakeDebug::AccessoryWakeDebug((CMMsl::AccessoryWakeDebug *)v5, a2);
    CMMsl::swap(a1, (CMMsl::AccessoryWakeDebug *)v5, v3);
    CMMsl::AccessoryWakeDebug::~AccessoryWakeDebug((CMMsl::AccessoryWakeDebug *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::AccessoryWakeDebug *a2, CMMsl::AccessoryWakeDebug *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = *((_DWORD *)this + 48);
  *((_DWORD *)this + 48) = *((_DWORD *)a2 + 48);
  *((_DWORD *)a2 + 48) = v3;
  v4 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 19) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  v8 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v8;
  v9 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v9;
  v10 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v10;
  v11 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v11;
  v12 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v12;
  v13 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v13;
  v14 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v14;
  v15 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v15;
  v16 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v16;
  LODWORD(v4) = *((_DWORD *)this + 46);
  *((_DWORD *)this + 46) = *((_DWORD *)a2 + 46);
  *((_DWORD *)a2 + 46) = v4;
  LODWORD(v16) = *((_DWORD *)this + 45);
  *((_DWORD *)this + 45) = *((_DWORD *)a2 + 45);
  *((_DWORD *)a2 + 45) = v16;
  LODWORD(v16) = *((_DWORD *)this + 47);
  *((_DWORD *)this + 47) = *((_DWORD *)a2 + 47);
  *((_DWORD *)a2 + 47) = v16;
  LODWORD(v4) = *((_DWORD *)this + 41);
  *((_DWORD *)this + 41) = *((_DWORD *)a2 + 41);
  *((_DWORD *)a2 + 41) = v4;
  LODWORD(v4) = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v4;
  LODWORD(v16) = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v16;
  LODWORD(v4) = *((_DWORD *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((_DWORD *)a2 + 43) = v4;
  result = *((float *)this + 40);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
  *((float *)a2 + 40) = result;
  v18 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v18;
  v19 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v19;
  v20 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v20;
  v21 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v21;
  v22 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v22;
  v23 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v23;
  return result;
}

uint64_t CMMsl::AccessoryWakeDebug::AccessoryWakeDebug(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = &off_25135C410;
  v4 = a1 + 32;
  v5 = a1 + 80;
  v6 = a1 + 128;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  v7 = a1 + 104;
  *(_OWORD *)(a1 + 56) = 0u;
  v8 = a1 + 56;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_DWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  sub_242911330(v4, (__n128 *)(a2 + 32));
  sub_242911330(v5, (__n128 *)(a2 + 80));
  sub_242911330(v8, (__n128 *)(a2 + 56));
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  sub_242911330(v7, (__n128 *)(a2 + 104));
  sub_242911330(v6, (__n128 *)(a2 + 128));
  return a1;
}

CMMsl *CMMsl::AccessoryWakeDebug::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::AccessoryWakeDebug *v3;
  _BYTE v5[200];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::AccessoryWakeDebug::AccessoryWakeDebug((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::AccessoryWakeDebug *)v5, v3);
    CMMsl::AccessoryWakeDebug::~AccessoryWakeDebug((CMMsl::AccessoryWakeDebug *)v5);
  }
  return a1;
}

uint64_t CMMsl::AccessoryWakeDebug::formatText(CMMsl::AccessoryWakeDebug *this, PB::TextFormatter *a2, const char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  float *v11;
  float *v12;
  float v13;
  __int16 v14;
  float *v15;
  float *v16;
  float v17;
  __int16 v18;
  float *v19;
  float *v20;
  float v21;
  __int16 v22;
  float *v23;
  float *v24;
  float v25;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (float *)*((_QWORD *)this + 1);
  v6 = (float *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "accelDecimated", v7);
  }
  if ((*((_WORD *)this + 96) & 2) != 0)
    PB::TextFormatter::format(a2, "accelFrontVariance", *((float *)this + 40));
  v8 = (float *)*((_QWORD *)this + 4);
  v9 = (float *)*((_QWORD *)this + 5);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(a2, "accelMean", v10);
  }
  v11 = (float *)*((_QWORD *)this + 7);
  v12 = (float *)*((_QWORD *)this + 8);
  while (v11 != v12)
  {
    v13 = *v11++;
    PB::TextFormatter::format(a2, "accelNormAutocorr", v13);
  }
  v14 = *((_WORD *)this + 96);
  if ((v14 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "accelNormMean", *((float *)this + 41));
    v14 = *((_WORD *)this + 96);
  }
  if ((v14 & 8) != 0)
    PB::TextFormatter::format(a2, "accelNormVariance", *((float *)this + 42));
  v15 = (float *)*((_QWORD *)this + 10);
  v16 = (float *)*((_QWORD *)this + 11);
  while (v15 != v16)
  {
    v17 = *v15++;
    PB::TextFormatter::format(a2, "accelVariance", v17);
  }
  v18 = *((_WORD *)this + 96);
  if ((v18 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "currentAngleDelta", *((float *)this + 43));
    v18 = *((_WORD *)this + 96);
    if ((v18 & 0x20) == 0)
    {
LABEL_17:
      if ((v18 & 0x40) == 0)
        goto LABEL_19;
      goto LABEL_18;
    }
  }
  else if ((v18 & 0x20) == 0)
  {
    goto LABEL_17;
  }
  PB::TextFormatter::format(a2, "currentMotionState");
  if ((*((_WORD *)this + 96) & 0x40) != 0)
LABEL_18:
    PB::TextFormatter::format(a2, "lagAtMaxAutocorr");
LABEL_19:
  v19 = (float *)*((_QWORD *)this + 13);
  v20 = (float *)*((_QWORD *)this + 14);
  while (v19 != v20)
  {
    v21 = *v19++;
    PB::TextFormatter::format(a2, "lastBaseline", v21);
  }
  v22 = *((_WORD *)this + 96);
  if ((v22 & 0x80) != 0)
  {
    PB::TextFormatter::format(a2, "maxAutocorr", *((float *)this + 46));
    v22 = *((_WORD *)this + 96);
  }
  if ((v22 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 19));
  v23 = (float *)*((_QWORD *)this + 16);
  v24 = (float *)*((_QWORD *)this + 17);
  while (v23 != v24)
  {
    v25 = *v23++;
    PB::TextFormatter::format(a2, "walkingBaseline", v25);
  }
  if ((*((_WORD *)this + 96) & 0x100) != 0)
    PB::TextFormatter::format(a2, "widthAtMaxAutocorr");
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::AccessoryWakeDebug::readFrom(CMMsl::AccessoryWakeDebug *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  _DWORD *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  _DWORD *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  _DWORD *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  _DWORD *v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  _DWORD *v75;
  int v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char v82;
  unsigned int v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  char v90;
  unsigned int v91;
  uint64_t v92;
  unint64_t v93;
  char v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  char v100;
  unsigned int v101;
  uint64_t v102;
  unint64_t v103;
  char v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  char *v110;
  _DWORD *v111;
  char *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  _DWORD *v118;
  int v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  char *v124;
  _DWORD *v125;
  char *v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  _DWORD *v132;
  int v133;
  unint64_t v134;
  unint64_t v135;
  char *v136;
  _DWORD *v137;
  unint64_t v138;
  char *v139;
  unint64_t v140;
  char *v141;
  unint64_t v142;
  char *v143;
  char v144;
  unsigned int v145;
  unint64_t v146;
  char v147;
  char v148;
  unsigned int v149;
  unint64_t v150;
  char v151;
  char v152;
  unsigned int v153;
  unint64_t v154;
  char v155;
  unint64_t v156;
  char *v157;
  unint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  _DWORD *v196;
  int v197;
  _DWORD *v198;
  int v199;
  _DWORD *v200;
  int v201;
  _DWORD *v202;
  int v203;
  _DWORD *v204;
  int v205;
  _DWORD *v206;
  int v207;
  unint64_t v208;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_21:
      v19 = v11 & 7;
      if (v19 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_WORD *)this + 96) |= 1u;
          v20 = *((_QWORD *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_345;
          *((_QWORD *)this + 19) = *(_QWORD *)(*(_QWORD *)a2 + v20);
          v21 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_348;
        case 2u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v22 = *((_QWORD *)a2 + 1);
            v23 = *((_QWORD *)a2 + 2);
            while (v22 < v23 && !*((_BYTE *)a2 + 24))
            {
              v25 = (char *)*((_QWORD *)this + 2);
              v24 = *((_QWORD *)this + 3);
              if ((unint64_t)v25 >= v24)
              {
                v27 = (char *)*((_QWORD *)this + 1);
                v28 = (v25 - v27) >> 2;
                v29 = v28 + 1;
                if ((unint64_t)(v28 + 1) >> 62)
                  goto LABEL_358;
                v30 = v24 - (_QWORD)v27;
                if (v30 >> 1 > v29)
                  v29 = v30 >> 1;
                if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
                  v31 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v31 = v29;
                if (v31)
                {
                  v31 = (unint64_t)sub_2429114B8(v31);
                  v27 = (char *)*((_QWORD *)this + 1);
                  v25 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v32 = 0;
                }
                v33 = (_DWORD *)(v31 + 4 * v28);
                *v33 = 0;
                v26 = v33 + 1;
                while (v25 != v27)
                {
                  v34 = *((_DWORD *)v25 - 1);
                  v25 -= 4;
                  *--v33 = v34;
                }
                *((_QWORD *)this + 1) = v33;
                *((_QWORD *)this + 2) = v26;
                *((_QWORD *)this + 3) = v31 + 4 * v32;
                if (v27)
                  operator delete(v27);
              }
              else
              {
                *(_DWORD *)v25 = 0;
                v26 = v25 + 4;
              }
              *((_QWORD *)this + 2) = v26;
              v35 = *((_QWORD *)a2 + 1);
              if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_206;
              *(v26 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v35);
              v23 = *((_QWORD *)a2 + 2);
              v22 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v22;
            }
            goto LABEL_207;
          }
          v136 = (char *)*((_QWORD *)this + 2);
          v135 = *((_QWORD *)this + 3);
          if ((unint64_t)v136 >= v135)
          {
            v160 = (char *)*((_QWORD *)this + 1);
            v161 = (v136 - v160) >> 2;
            v162 = v161 + 1;
            if ((unint64_t)(v161 + 1) >> 62)
              goto LABEL_358;
            v163 = v135 - (_QWORD)v160;
            if (v163 >> 1 > v162)
              v162 = v163 >> 1;
            if ((unint64_t)v163 >= 0x7FFFFFFFFFFFFFFCLL)
              v164 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v164 = v162;
            if (v164)
            {
              v164 = (unint64_t)sub_2429114B8(v164);
              v160 = (char *)*((_QWORD *)this + 1);
              v136 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v165 = 0;
            }
            v196 = (_DWORD *)(v164 + 4 * v161);
            *v196 = 0;
            v137 = v196 + 1;
            while (v136 != v160)
            {
              v197 = *((_DWORD *)v136 - 1);
              v136 -= 4;
              *--v196 = v197;
            }
            *((_QWORD *)this + 1) = v196;
            *((_QWORD *)this + 2) = v137;
            *((_QWORD *)this + 3) = v164 + 4 * v165;
            if (v160)
              operator delete(v160);
          }
          else
          {
            *(_DWORD *)v136 = 0;
            v137 = v136 + 4;
          }
          *((_QWORD *)this + 2) = v137;
          goto LABEL_343;
        case 3u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v36 = *((_QWORD *)a2 + 1);
            v37 = *((_QWORD *)a2 + 2);
            while (v36 < v37 && !*((_BYTE *)a2 + 24))
            {
              v39 = (char *)*((_QWORD *)this + 5);
              v38 = *((_QWORD *)this + 6);
              if ((unint64_t)v39 >= v38)
              {
                v41 = (char *)*((_QWORD *)this + 4);
                v42 = (v39 - v41) >> 2;
                v43 = v42 + 1;
                if ((unint64_t)(v42 + 1) >> 62)
                  goto LABEL_358;
                v44 = v38 - (_QWORD)v41;
                if (v44 >> 1 > v43)
                  v43 = v44 >> 1;
                if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL)
                  v45 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v45 = v43;
                if (v45)
                {
                  v45 = (unint64_t)sub_2429114B8(v45);
                  v41 = (char *)*((_QWORD *)this + 4);
                  v39 = (char *)*((_QWORD *)this + 5);
                }
                else
                {
                  v46 = 0;
                }
                v47 = (_DWORD *)(v45 + 4 * v42);
                *v47 = 0;
                v40 = v47 + 1;
                while (v39 != v41)
                {
                  v48 = *((_DWORD *)v39 - 1);
                  v39 -= 4;
                  *--v47 = v48;
                }
                *((_QWORD *)this + 4) = v47;
                *((_QWORD *)this + 5) = v40;
                *((_QWORD *)this + 6) = v45 + 4 * v46;
                if (v41)
                  operator delete(v41);
              }
              else
              {
                *(_DWORD *)v39 = 0;
                v40 = v39 + 4;
              }
              *((_QWORD *)this + 5) = v40;
              v49 = *((_QWORD *)a2 + 1);
              if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_206;
              *(v40 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v49);
              v37 = *((_QWORD *)a2 + 2);
              v36 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v36;
            }
            goto LABEL_207;
          }
          v139 = (char *)*((_QWORD *)this + 5);
          v138 = *((_QWORD *)this + 6);
          if ((unint64_t)v139 >= v138)
          {
            v166 = (char *)*((_QWORD *)this + 4);
            v167 = (v139 - v166) >> 2;
            v168 = v167 + 1;
            if ((unint64_t)(v167 + 1) >> 62)
              goto LABEL_358;
            v169 = v138 - (_QWORD)v166;
            if (v169 >> 1 > v168)
              v168 = v169 >> 1;
            if ((unint64_t)v169 >= 0x7FFFFFFFFFFFFFFCLL)
              v170 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v170 = v168;
            if (v170)
            {
              v170 = (unint64_t)sub_2429114B8(v170);
              v166 = (char *)*((_QWORD *)this + 4);
              v139 = (char *)*((_QWORD *)this + 5);
            }
            else
            {
              v171 = 0;
            }
            v198 = (_DWORD *)(v170 + 4 * v167);
            *v198 = 0;
            v137 = v198 + 1;
            while (v139 != v166)
            {
              v199 = *((_DWORD *)v139 - 1);
              v139 -= 4;
              *--v198 = v199;
            }
            *((_QWORD *)this + 4) = v198;
            *((_QWORD *)this + 5) = v137;
            *((_QWORD *)this + 6) = v170 + 4 * v171;
            if (v166)
              operator delete(v166);
          }
          else
          {
            *(_DWORD *)v139 = 0;
            v137 = v139 + 4;
          }
          *((_QWORD *)this + 5) = v137;
          goto LABEL_343;
        case 4u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v50 = *((_QWORD *)a2 + 1);
            v51 = *((_QWORD *)a2 + 2);
            while (v50 < v51 && !*((_BYTE *)a2 + 24))
            {
              v53 = (char *)*((_QWORD *)this + 11);
              v52 = *((_QWORD *)this + 12);
              if ((unint64_t)v53 >= v52)
              {
                v55 = (char *)*((_QWORD *)this + 10);
                v56 = (v53 - v55) >> 2;
                v57 = v56 + 1;
                if ((unint64_t)(v56 + 1) >> 62)
                  goto LABEL_358;
                v58 = v52 - (_QWORD)v55;
                if (v58 >> 1 > v57)
                  v57 = v58 >> 1;
                if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL)
                  v59 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v59 = v57;
                if (v59)
                {
                  v59 = (unint64_t)sub_2429114B8(v59);
                  v55 = (char *)*((_QWORD *)this + 10);
                  v53 = (char *)*((_QWORD *)this + 11);
                }
                else
                {
                  v60 = 0;
                }
                v61 = (_DWORD *)(v59 + 4 * v56);
                *v61 = 0;
                v54 = v61 + 1;
                while (v53 != v55)
                {
                  v62 = *((_DWORD *)v53 - 1);
                  v53 -= 4;
                  *--v61 = v62;
                }
                *((_QWORD *)this + 10) = v61;
                *((_QWORD *)this + 11) = v54;
                *((_QWORD *)this + 12) = v59 + 4 * v60;
                if (v55)
                  operator delete(v55);
              }
              else
              {
                *(_DWORD *)v53 = 0;
                v54 = v53 + 4;
              }
              *((_QWORD *)this + 11) = v54;
              v63 = *((_QWORD *)a2 + 1);
              if (v63 > 0xFFFFFFFFFFFFFFFBLL || v63 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_206;
              *(v54 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v63);
              v51 = *((_QWORD *)a2 + 2);
              v50 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v50;
            }
            goto LABEL_207;
          }
          v141 = (char *)*((_QWORD *)this + 11);
          v140 = *((_QWORD *)this + 12);
          if ((unint64_t)v141 >= v140)
          {
            v172 = (char *)*((_QWORD *)this + 10);
            v173 = (v141 - v172) >> 2;
            v174 = v173 + 1;
            if ((unint64_t)(v173 + 1) >> 62)
              goto LABEL_358;
            v175 = v140 - (_QWORD)v172;
            if (v175 >> 1 > v174)
              v174 = v175 >> 1;
            if ((unint64_t)v175 >= 0x7FFFFFFFFFFFFFFCLL)
              v176 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v176 = v174;
            if (v176)
            {
              v176 = (unint64_t)sub_2429114B8(v176);
              v172 = (char *)*((_QWORD *)this + 10);
              v141 = (char *)*((_QWORD *)this + 11);
            }
            else
            {
              v177 = 0;
            }
            v200 = (_DWORD *)(v176 + 4 * v173);
            *v200 = 0;
            v137 = v200 + 1;
            while (v141 != v172)
            {
              v201 = *((_DWORD *)v141 - 1);
              v141 -= 4;
              *--v200 = v201;
            }
            *((_QWORD *)this + 10) = v200;
            *((_QWORD *)this + 11) = v137;
            *((_QWORD *)this + 12) = v176 + 4 * v177;
            if (v172)
              operator delete(v172);
          }
          else
          {
            *(_DWORD *)v141 = 0;
            v137 = v141 + 4;
          }
          *((_QWORD *)this + 11) = v137;
          goto LABEL_343;
        case 5u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v64 = *((_QWORD *)a2 + 1);
            v65 = *((_QWORD *)a2 + 2);
            while (v64 < v65 && !*((_BYTE *)a2 + 24))
            {
              v67 = (char *)*((_QWORD *)this + 8);
              v66 = *((_QWORD *)this + 9);
              if ((unint64_t)v67 >= v66)
              {
                v69 = (char *)*((_QWORD *)this + 7);
                v70 = (v67 - v69) >> 2;
                v71 = v70 + 1;
                if ((unint64_t)(v70 + 1) >> 62)
                  goto LABEL_358;
                v72 = v66 - (_QWORD)v69;
                if (v72 >> 1 > v71)
                  v71 = v72 >> 1;
                if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL)
                  v73 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v73 = v71;
                if (v73)
                {
                  v73 = (unint64_t)sub_2429114B8(v73);
                  v69 = (char *)*((_QWORD *)this + 7);
                  v67 = (char *)*((_QWORD *)this + 8);
                }
                else
                {
                  v74 = 0;
                }
                v75 = (_DWORD *)(v73 + 4 * v70);
                *v75 = 0;
                v68 = v75 + 1;
                while (v67 != v69)
                {
                  v76 = *((_DWORD *)v67 - 1);
                  v67 -= 4;
                  *--v75 = v76;
                }
                *((_QWORD *)this + 7) = v75;
                *((_QWORD *)this + 8) = v68;
                *((_QWORD *)this + 9) = v73 + 4 * v74;
                if (v69)
                  operator delete(v69);
              }
              else
              {
                *(_DWORD *)v67 = 0;
                v68 = v67 + 4;
              }
              *((_QWORD *)this + 8) = v68;
              v77 = *((_QWORD *)a2 + 1);
              if (v77 > 0xFFFFFFFFFFFFFFFBLL || v77 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_206;
              *(v68 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v77);
              v65 = *((_QWORD *)a2 + 2);
              v64 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v64;
            }
            goto LABEL_207;
          }
          v143 = (char *)*((_QWORD *)this + 8);
          v142 = *((_QWORD *)this + 9);
          if ((unint64_t)v143 >= v142)
          {
            v178 = (char *)*((_QWORD *)this + 7);
            v179 = (v143 - v178) >> 2;
            v180 = v179 + 1;
            if ((unint64_t)(v179 + 1) >> 62)
              goto LABEL_358;
            v181 = v142 - (_QWORD)v178;
            if (v181 >> 1 > v180)
              v180 = v181 >> 1;
            if ((unint64_t)v181 >= 0x7FFFFFFFFFFFFFFCLL)
              v182 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v182 = v180;
            if (v182)
            {
              v182 = (unint64_t)sub_2429114B8(v182);
              v178 = (char *)*((_QWORD *)this + 7);
              v143 = (char *)*((_QWORD *)this + 8);
            }
            else
            {
              v183 = 0;
            }
            v202 = (_DWORD *)(v182 + 4 * v179);
            *v202 = 0;
            v137 = v202 + 1;
            while (v143 != v178)
            {
              v203 = *((_DWORD *)v143 - 1);
              v143 -= 4;
              *--v202 = v203;
            }
            *((_QWORD *)this + 7) = v202;
            *((_QWORD *)this + 8) = v137;
            *((_QWORD *)this + 9) = v182 + 4 * v183;
            if (v178)
              operator delete(v178);
          }
          else
          {
            *(_DWORD *)v143 = 0;
            v137 = v143 + 4;
          }
          *((_QWORD *)this + 8) = v137;
          goto LABEL_343;
        case 6u:
          *((_WORD *)this + 96) |= 0x80u;
          v78 = *((_QWORD *)a2 + 1);
          if (v78 > 0xFFFFFFFFFFFFFFFBLL || v78 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_345;
          *((_DWORD *)this + 46) = *(_DWORD *)(*(_QWORD *)a2 + v78);
          goto LABEL_347;
        case 7u:
          *((_WORD *)this + 96) |= 0x40u;
          v79 = *((_QWORD *)a2 + 1);
          v80 = *((_QWORD *)a2 + 2);
          v81 = *(_QWORD *)a2;
          if (v79 <= 0xFFFFFFFFFFFFFFF5 && v79 + 10 <= v80)
          {
            v82 = 0;
            v83 = 0;
            v84 = 0;
            do
            {
              v85 = v79 + 1;
              *((_QWORD *)a2 + 1) = v79 + 1;
              v86 = *(_BYTE *)(v81 + v79);
              v84 |= (unint64_t)(v86 & 0x7F) << v82;
              if ((v86 & 0x80) == 0)
                goto LABEL_294;
              v82 += 7;
              v79 = v85;
              v14 = v83++ > 8;
            }
            while (!v14);
LABEL_222:
            LODWORD(v84) = 0;
            goto LABEL_294;
          }
          v144 = 0;
          v145 = 0;
          v84 = 0;
          if (v80 <= v79)
            v80 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v80 == v79)
            {
              LODWORD(v84) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v146 = v79 + 1;
              v147 = *(_BYTE *)(v81 + v79);
              *((_QWORD *)a2 + 1) = v146;
              v84 |= (unint64_t)(v147 & 0x7F) << v144;
              if (v147 < 0)
              {
                v144 += 7;
                v79 = v146;
                v14 = v145++ > 8;
                if (v14)
                  goto LABEL_222;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v84) = 0;
            }
            break;
          }
LABEL_294:
          *((_DWORD *)this + 45) = v84;
          goto LABEL_349;
        case 8u:
          *((_WORD *)this + 96) |= 0x100u;
          v87 = *((_QWORD *)a2 + 1);
          v88 = *((_QWORD *)a2 + 2);
          v89 = *(_QWORD *)a2;
          if (v87 <= 0xFFFFFFFFFFFFFFF5 && v87 + 10 <= v88)
          {
            v90 = 0;
            v91 = 0;
            v92 = 0;
            do
            {
              v93 = v87 + 1;
              *((_QWORD *)a2 + 1) = v87 + 1;
              v94 = *(_BYTE *)(v89 + v87);
              v92 |= (unint64_t)(v94 & 0x7F) << v90;
              if ((v94 & 0x80) == 0)
                goto LABEL_297;
              v90 += 7;
              v87 = v93;
              v14 = v91++ > 8;
            }
            while (!v14);
LABEL_229:
            LODWORD(v92) = 0;
            goto LABEL_297;
          }
          v148 = 0;
          v149 = 0;
          v92 = 0;
          if (v88 <= v87)
            v88 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v88 == v87)
            {
              LODWORD(v92) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v150 = v87 + 1;
              v151 = *(_BYTE *)(v89 + v87);
              *((_QWORD *)a2 + 1) = v150;
              v92 |= (unint64_t)(v151 & 0x7F) << v148;
              if (v151 < 0)
              {
                v148 += 7;
                v87 = v150;
                v14 = v149++ > 8;
                if (v14)
                  goto LABEL_229;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v92) = 0;
            }
            break;
          }
LABEL_297:
          *((_DWORD *)this + 47) = v92;
          goto LABEL_349;
        case 9u:
          *((_WORD *)this + 96) |= 4u;
          v95 = *((_QWORD *)a2 + 1);
          if (v95 > 0xFFFFFFFFFFFFFFFBLL || v95 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_345;
          *((_DWORD *)this + 41) = *(_DWORD *)(*(_QWORD *)a2 + v95);
          goto LABEL_347;
        case 0xAu:
          *((_WORD *)this + 96) |= 8u;
          v96 = *((_QWORD *)a2 + 1);
          if (v96 > 0xFFFFFFFFFFFFFFFBLL || v96 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_345;
          *((_DWORD *)this + 42) = *(_DWORD *)(*(_QWORD *)a2 + v96);
          goto LABEL_347;
        case 0xBu:
          *((_WORD *)this + 96) |= 0x20u;
          v97 = *((_QWORD *)a2 + 1);
          v98 = *((_QWORD *)a2 + 2);
          v99 = *(_QWORD *)a2;
          if (v97 <= 0xFFFFFFFFFFFFFFF5 && v97 + 10 <= v98)
          {
            v100 = 0;
            v101 = 0;
            v102 = 0;
            do
            {
              v103 = v97 + 1;
              *((_QWORD *)a2 + 1) = v97 + 1;
              v104 = *(_BYTE *)(v99 + v97);
              v102 |= (unint64_t)(v104 & 0x7F) << v100;
              if ((v104 & 0x80) == 0)
                goto LABEL_300;
              v100 += 7;
              v97 = v103;
              v14 = v101++ > 8;
            }
            while (!v14);
LABEL_236:
            LODWORD(v102) = 0;
            goto LABEL_300;
          }
          v152 = 0;
          v153 = 0;
          v102 = 0;
          if (v98 <= v97)
            v98 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v98 == v97)
            {
              LODWORD(v102) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v154 = v97 + 1;
              v155 = *(_BYTE *)(v99 + v97);
              *((_QWORD *)a2 + 1) = v154;
              v102 |= (unint64_t)(v155 & 0x7F) << v152;
              if (v155 < 0)
              {
                v152 += 7;
                v97 = v154;
                v14 = v153++ > 8;
                if (v14)
                  goto LABEL_236;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v102) = 0;
            }
            break;
          }
LABEL_300:
          *((_DWORD *)this + 44) = v102;
          goto LABEL_349;
        case 0xCu:
          *((_WORD *)this + 96) |= 0x10u;
          v105 = *((_QWORD *)a2 + 1);
          if (v105 > 0xFFFFFFFFFFFFFFFBLL || v105 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_345;
          *((_DWORD *)this + 43) = *(_DWORD *)(*(_QWORD *)a2 + v105);
          goto LABEL_347;
        case 0xDu:
          *((_WORD *)this + 96) |= 2u;
          v106 = *((_QWORD *)a2 + 1);
          if (v106 > 0xFFFFFFFFFFFFFFFBLL || v106 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_345;
          *((_DWORD *)this + 40) = *(_DWORD *)(*(_QWORD *)a2 + v106);
          goto LABEL_347;
        case 0xEu:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v107 = *((_QWORD *)a2 + 1);
            v108 = *((_QWORD *)a2 + 2);
            while (v107 < v108 && !*((_BYTE *)a2 + 24))
            {
              v110 = (char *)*((_QWORD *)this + 14);
              v109 = *((_QWORD *)this + 15);
              if ((unint64_t)v110 >= v109)
              {
                v112 = (char *)*((_QWORD *)this + 13);
                v113 = (v110 - v112) >> 2;
                v114 = v113 + 1;
                if ((unint64_t)(v113 + 1) >> 62)
                  goto LABEL_358;
                v115 = v109 - (_QWORD)v112;
                if (v115 >> 1 > v114)
                  v114 = v115 >> 1;
                if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFFCLL)
                  v116 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v116 = v114;
                if (v116)
                {
                  v116 = (unint64_t)sub_2429114B8(v116);
                  v112 = (char *)*((_QWORD *)this + 13);
                  v110 = (char *)*((_QWORD *)this + 14);
                }
                else
                {
                  v117 = 0;
                }
                v118 = (_DWORD *)(v116 + 4 * v113);
                *v118 = 0;
                v111 = v118 + 1;
                while (v110 != v112)
                {
                  v119 = *((_DWORD *)v110 - 1);
                  v110 -= 4;
                  *--v118 = v119;
                }
                *((_QWORD *)this + 13) = v118;
                *((_QWORD *)this + 14) = v111;
                *((_QWORD *)this + 15) = v116 + 4 * v117;
                if (v112)
                  operator delete(v112);
              }
              else
              {
                *(_DWORD *)v110 = 0;
                v111 = v110 + 4;
              }
              *((_QWORD *)this + 14) = v111;
              v120 = *((_QWORD *)a2 + 1);
              if (v120 > 0xFFFFFFFFFFFFFFFBLL || v120 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_206;
              *(v111 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v120);
              v108 = *((_QWORD *)a2 + 2);
              v107 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v107;
            }
            goto LABEL_207;
          }
          v157 = (char *)*((_QWORD *)this + 14);
          v156 = *((_QWORD *)this + 15);
          if ((unint64_t)v157 >= v156)
          {
            v184 = (char *)*((_QWORD *)this + 13);
            v185 = (v157 - v184) >> 2;
            v186 = v185 + 1;
            if ((unint64_t)(v185 + 1) >> 62)
              goto LABEL_358;
            v187 = v156 - (_QWORD)v184;
            if (v187 >> 1 > v186)
              v186 = v187 >> 1;
            if ((unint64_t)v187 >= 0x7FFFFFFFFFFFFFFCLL)
              v188 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v188 = v186;
            if (v188)
            {
              v188 = (unint64_t)sub_2429114B8(v188);
              v184 = (char *)*((_QWORD *)this + 13);
              v157 = (char *)*((_QWORD *)this + 14);
            }
            else
            {
              v189 = 0;
            }
            v204 = (_DWORD *)(v188 + 4 * v185);
            *v204 = 0;
            v137 = v204 + 1;
            while (v157 != v184)
            {
              v205 = *((_DWORD *)v157 - 1);
              v157 -= 4;
              *--v204 = v205;
            }
            *((_QWORD *)this + 13) = v204;
            *((_QWORD *)this + 14) = v137;
            *((_QWORD *)this + 15) = v188 + 4 * v189;
            if (v184)
              operator delete(v184);
          }
          else
          {
            *(_DWORD *)v157 = 0;
            v137 = v157 + 4;
          }
          *((_QWORD *)this + 14) = v137;
          goto LABEL_343;
        case 0xFu:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v121 = *((_QWORD *)a2 + 1);
            v122 = *((_QWORD *)a2 + 2);
            while (v121 < v122 && !*((_BYTE *)a2 + 24))
            {
              v124 = (char *)*((_QWORD *)this + 17);
              v123 = *((_QWORD *)this + 18);
              if ((unint64_t)v124 >= v123)
              {
                v126 = (char *)*((_QWORD *)this + 16);
                v127 = (v124 - v126) >> 2;
                v128 = v127 + 1;
                if ((unint64_t)(v127 + 1) >> 62)
                  goto LABEL_358;
                v129 = v123 - (_QWORD)v126;
                if (v129 >> 1 > v128)
                  v128 = v129 >> 1;
                if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFFCLL)
                  v130 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v130 = v128;
                if (v130)
                {
                  v130 = (unint64_t)sub_2429114B8(v130);
                  v126 = (char *)*((_QWORD *)this + 16);
                  v124 = (char *)*((_QWORD *)this + 17);
                }
                else
                {
                  v131 = 0;
                }
                v132 = (_DWORD *)(v130 + 4 * v127);
                *v132 = 0;
                v125 = v132 + 1;
                while (v124 != v126)
                {
                  v133 = *((_DWORD *)v124 - 1);
                  v124 -= 4;
                  *--v132 = v133;
                }
                *((_QWORD *)this + 16) = v132;
                *((_QWORD *)this + 17) = v125;
                *((_QWORD *)this + 18) = v130 + 4 * v131;
                if (v126)
                  operator delete(v126);
              }
              else
              {
                *(_DWORD *)v124 = 0;
                v125 = v124 + 4;
              }
              *((_QWORD *)this + 17) = v125;
              v134 = *((_QWORD *)a2 + 1);
              if (v134 > 0xFFFFFFFFFFFFFFFBLL || v134 + 4 > *((_QWORD *)a2 + 2))
              {
LABEL_206:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v125 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v134);
              v122 = *((_QWORD *)a2 + 2);
              v121 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v121;
            }
LABEL_207:
            PB::Reader::recallMark();
          }
          else
          {
            v159 = (char *)*((_QWORD *)this + 17);
            v158 = *((_QWORD *)this + 18);
            if ((unint64_t)v159 >= v158)
            {
              v190 = (char *)*((_QWORD *)this + 16);
              v191 = (v159 - v190) >> 2;
              v192 = v191 + 1;
              if ((unint64_t)(v191 + 1) >> 62)
LABEL_358:
                sub_242729A44();
              v193 = v158 - (_QWORD)v190;
              if (v193 >> 1 > v192)
                v192 = v193 >> 1;
              if ((unint64_t)v193 >= 0x7FFFFFFFFFFFFFFCLL)
                v194 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v194 = v192;
              if (v194)
              {
                v194 = (unint64_t)sub_2429114B8(v194);
                v190 = (char *)*((_QWORD *)this + 16);
                v159 = (char *)*((_QWORD *)this + 17);
              }
              else
              {
                v195 = 0;
              }
              v206 = (_DWORD *)(v194 + 4 * v191);
              *v206 = 0;
              v137 = v206 + 1;
              while (v159 != v190)
              {
                v207 = *((_DWORD *)v159 - 1);
                v159 -= 4;
                *--v206 = v207;
              }
              *((_QWORD *)this + 16) = v206;
              *((_QWORD *)this + 17) = v137;
              *((_QWORD *)this + 18) = v194 + 4 * v195;
              if (v190)
                operator delete(v190);
            }
            else
            {
              *(_DWORD *)v159 = 0;
              v137 = v159 + 4;
            }
            *((_QWORD *)this + 17) = v137;
LABEL_343:
            v208 = *((_QWORD *)a2 + 1);
            if (v208 <= 0xFFFFFFFFFFFFFFFBLL && v208 + 4 <= *((_QWORD *)a2 + 2))
            {
              *(v137 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v208);
LABEL_347:
              v21 = *((_QWORD *)a2 + 1) + 4;
LABEL_348:
              *((_QWORD *)a2 + 1) = v21;
            }
            else
            {
LABEL_345:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
          break;
        default:
          goto LABEL_19;
      }
      goto LABEL_349;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_21;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    if ((PB::Reader::skip(a2) & 1) == 0)
      return 0;
LABEL_349:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
}

uint64_t CMMsl::AccessoryWakeDebug::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;
  float *v10;
  float *v11;
  float v12;
  float *v13;
  float *v14;
  float v15;
  __int16 v16;
  float *v17;
  float *v18;
  float v19;
  float *v20;
  float *v21;
  float v22;

  v3 = this;
  if ((*(_WORD *)(this + 192) & 1) != 0)
    this = PB::Writer::write(a2, *(double *)(this + 152));
  v4 = *(float **)(v3 + 8);
  v5 = *(float **)(v3 + 16);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6);
  }
  v7 = *(float **)(v3 + 32);
  v8 = *(float **)(v3 + 40);
  while (v7 != v8)
  {
    v9 = *v7++;
    this = PB::Writer::write(a2, v9);
  }
  v10 = *(float **)(v3 + 80);
  v11 = *(float **)(v3 + 88);
  while (v10 != v11)
  {
    v12 = *v10++;
    this = PB::Writer::write(a2, v12);
  }
  v13 = *(float **)(v3 + 56);
  v14 = *(float **)(v3 + 64);
  while (v13 != v14)
  {
    v15 = *v13++;
    this = PB::Writer::write(a2, v15);
  }
  v16 = *(_WORD *)(v3 + 192);
  if ((v16 & 0x80) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 184));
    v16 = *(_WORD *)(v3 + 192);
    if ((v16 & 0x40) == 0)
    {
LABEL_17:
      if ((v16 & 0x100) == 0)
        goto LABEL_18;
      goto LABEL_33;
    }
  }
  else if ((v16 & 0x40) == 0)
  {
    goto LABEL_17;
  }
  this = PB::Writer::writeVarInt(a2);
  v16 = *(_WORD *)(v3 + 192);
  if ((v16 & 0x100) == 0)
  {
LABEL_18:
    if ((v16 & 4) == 0)
      goto LABEL_19;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::writeVarInt(a2);
  v16 = *(_WORD *)(v3 + 192);
  if ((v16 & 4) == 0)
  {
LABEL_19:
    if ((v16 & 8) == 0)
      goto LABEL_20;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 164));
  v16 = *(_WORD *)(v3 + 192);
  if ((v16 & 8) == 0)
  {
LABEL_20:
    if ((v16 & 0x20) == 0)
      goto LABEL_21;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 168));
  v16 = *(_WORD *)(v3 + 192);
  if ((v16 & 0x20) == 0)
  {
LABEL_21:
    if ((v16 & 0x10) == 0)
      goto LABEL_22;
LABEL_37:
    this = PB::Writer::write(a2, *(float *)(v3 + 172));
    if ((*(_WORD *)(v3 + 192) & 2) == 0)
      goto LABEL_24;
    goto LABEL_23;
  }
LABEL_36:
  this = PB::Writer::writeVarInt(a2);
  v16 = *(_WORD *)(v3 + 192);
  if ((v16 & 0x10) != 0)
    goto LABEL_37;
LABEL_22:
  if ((v16 & 2) != 0)
LABEL_23:
    this = PB::Writer::write(a2, *(float *)(v3 + 160));
LABEL_24:
  v17 = *(float **)(v3 + 104);
  v18 = *(float **)(v3 + 112);
  while (v17 != v18)
  {
    v19 = *v17++;
    this = PB::Writer::write(a2, v19);
  }
  v21 = *(float **)(v3 + 128);
  v20 = *(float **)(v3 + 136);
  while (v21 != v20)
  {
    v22 = *v21++;
    this = PB::Writer::write(a2, v22);
  }
  return this;
}

BOOL CMMsl::AccessoryWakeDebug::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  float *v14;
  float *v15;
  float *v16;
  float *v17;
  float *v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  uint64_t v22;
  float v23;
  _BOOL8 result;
  BOOL v25;

  v2 = *(_WORD *)(a1 + 192);
  v3 = *(_WORD *)(a2 + 192);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 152) != *(double *)(a2 + 152))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  v5 = *(float **)(a1 + 8);
  v4 = *(float **)(a1 + 16);
  v6 = *(float **)(a2 + 8);
  if ((char *)v4 - (char *)v5 != *(_QWORD *)(a2 + 16) - (_QWORD)v6)
    return 0;
  while (v5 != v4)
  {
    if (*v5 != *v6)
      return 0;
    ++v5;
    ++v6;
  }
  v8 = *(float **)(a1 + 32);
  v7 = *(float **)(a1 + 40);
  v9 = *(float **)(a2 + 32);
  if ((char *)v7 - (char *)v8 != *(_QWORD *)(a2 + 40) - (_QWORD)v9)
    return 0;
  while (v8 != v7)
  {
    if (*v8 != *v9)
      return 0;
    ++v8;
    ++v9;
  }
  v11 = *(float **)(a1 + 80);
  v10 = *(float **)(a1 + 88);
  v12 = *(float **)(a2 + 80);
  if ((char *)v10 - (char *)v11 != *(_QWORD *)(a2 + 88) - (_QWORD)v12)
    return 0;
  while (v11 != v10)
  {
    if (*v11 != *v12)
      return 0;
    ++v11;
    ++v12;
  }
  v14 = *(float **)(a1 + 56);
  v13 = *(float **)(a1 + 64);
  v15 = *(float **)(a2 + 56);
  if ((char *)v13 - (char *)v14 != *(_QWORD *)(a2 + 64) - (_QWORD)v15)
    return 0;
  while (v14 != v13)
  {
    if (*v14 != *v15)
      return 0;
    ++v14;
    ++v15;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 184) != *(float *)(a2 + 184))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 180) != *(_DWORD *)(a2 + 180))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 192) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 192) & 0x100) == 0 || *(_DWORD *)(a1 + 188) != *(_DWORD *)(a2 + 188))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 192) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 164) != *(float *)(a2 + 164))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 168) != *(float *)(a2 + 168))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 176) != *(_DWORD *)(a2 + 176))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 172) != *(float *)(a2 + 172))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 160) != *(float *)(a2 + 160))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  v17 = *(float **)(a1 + 104);
  v16 = *(float **)(a1 + 112);
  v18 = *(float **)(a2 + 104);
  if ((char *)v16 - (char *)v17 != *(_QWORD *)(a2 + 112) - (_QWORD)v18)
    return 0;
  while (v17 != v16)
  {
    if (*v17 != *v18)
      return 0;
    ++v17;
    ++v18;
  }
  v20 = *(_QWORD *)(a1 + 128);
  v19 = *(_QWORD *)(a1 + 136);
  v21 = *(float **)(a2 + 128);
  if (v19 - v20 != *(_QWORD *)(a2 + 136) - (_QWORD)v21)
    return 0;
  if (v20 == v19)
    return 1;
  v22 = v20 + 4;
  do
  {
    v23 = *v21++;
    result = *(float *)(v22 - 4) == v23;
    v25 = *(float *)(v22 - 4) != v23 || v22 == v19;
    v22 += 4;
  }
  while (!v25);
  return result;
}

uint64_t CMMsl::AccessoryWakeDebug::hash_value(CMMsl::AccessoryWakeDebug *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  uint64_t v22;

  if ((*((_WORD *)this + 96) & 1) != 0)
  {
    if (*((double *)this + 19) == 0.0)
      v2 = 0;
    else
      v2 = *((_QWORD *)this + 19);
  }
  else
  {
    v2 = 0;
  }
  v3 = PBHashBytes();
  v4 = PBHashBytes();
  v5 = PBHashBytes();
  v6 = PBHashBytes();
  v7 = *((_WORD *)this + 96);
  if ((v7 & 0x80) != 0)
  {
    v20 = *((float *)this + 46);
    v8 = LODWORD(v20);
    if (v20 == 0.0)
      v8 = 0;
    if ((v7 & 0x40) != 0)
    {
LABEL_8:
      v9 = *((int *)this + 45);
      if ((*((_WORD *)this + 96) & 0x100) != 0)
        goto LABEL_9;
      goto LABEL_27;
    }
  }
  else
  {
    v8 = 0;
    if ((v7 & 0x40) != 0)
      goto LABEL_8;
  }
  v9 = 0;
  if ((*((_WORD *)this + 96) & 0x100) != 0)
  {
LABEL_9:
    v10 = *((int *)this + 47);
    if ((v7 & 4) != 0)
      goto LABEL_10;
LABEL_28:
    v12 = 0;
    if ((v7 & 8) != 0)
      goto LABEL_13;
LABEL_29:
    v14 = 0;
    if ((v7 & 0x20) != 0)
      goto LABEL_16;
    goto LABEL_30;
  }
LABEL_27:
  v10 = 0;
  if ((v7 & 4) == 0)
    goto LABEL_28;
LABEL_10:
  v11 = *((float *)this + 41);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((v7 & 8) == 0)
    goto LABEL_29;
LABEL_13:
  v13 = *((float *)this + 42);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((v7 & 0x20) != 0)
  {
LABEL_16:
    v15 = *((int *)this + 44);
    if ((v7 & 0x10) != 0)
      goto LABEL_17;
    goto LABEL_31;
  }
LABEL_30:
  v15 = 0;
  if ((v7 & 0x10) != 0)
  {
LABEL_17:
    v16 = *((float *)this + 43);
    v17 = LODWORD(v16);
    if (v16 == 0.0)
      v17 = 0;
    if ((v7 & 2) != 0)
      goto LABEL_20;
LABEL_32:
    v19 = 0;
    goto LABEL_33;
  }
LABEL_31:
  v17 = 0;
  if ((v7 & 2) == 0)
    goto LABEL_32;
LABEL_20:
  v18 = *((float *)this + 40);
  v19 = LODWORD(v18);
  if (v18 == 0.0)
    v19 = 0;
LABEL_33:
  v21 = v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v8 ^ v9;
  v22 = v10 ^ v12 ^ v14 ^ v15 ^ v17 ^ v19 ^ PBHashBytes();
  return v21 ^ v22 ^ PBHashBytes();
}

uint64_t CMMsl::AirpodEvent::AirpodEvent(uint64_t this)
{
  *(_QWORD *)this = &off_25135C448;
  *(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135C448;
  *(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void CMMsl::AirpodEvent::~AirpodEvent(CMMsl::AirpodEvent *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::AirpodEvent::AirpodEvent(uint64_t this, const CMMsl::AirpodEvent *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;

  *(_QWORD *)this = &off_25135C448;
  *(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 24) = 0;
  v2 = *((_BYTE *)a2 + 24);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_BYTE *)(this + 24) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 24);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 24) & 4) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *(_BYTE *)(this + 24) = v3;
    *(_DWORD *)(this + 20) = v5;
    v2 = *((_BYTE *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 24) = v3 | 2;
    *(_DWORD *)(this + 16) = v6;
  }
  return this;
}

uint64_t CMMsl::AirpodEvent::operator=(uint64_t a1, uint64_t a2, double a3)
{
  void (**v4)(CMMsl::AirpodEvent *__hidden);
  char v5;
  char v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  int v13;

  if (a1 != a2)
  {
    v4 = &off_25135C448;
    v12[0] = &off_25135C448;
    v13 = 0;
    v5 = *(_BYTE *)(a2 + 24);
    if ((v5 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      v6 = 1;
      LOBYTE(v13) = 1;
      if ((v5 & 4) != 0)
      {
LABEL_4:
        LODWORD(v4) = *(_DWORD *)(a2 + 20);
        v6 |= 4u;
        LOBYTE(v13) = v6;
        if ((v5 & 2) != 0)
        {
LABEL_5:
          v7 = *(_DWORD *)(a2 + 16);
          LOBYTE(v13) = v6 | 2;
LABEL_9:
          v8 = v13;
          v13 = *(_DWORD *)(a1 + 24);
          v9 = *(_QWORD *)(a1 + 8);
          v10 = *(_QWORD *)(a1 + 16);
          *(double *)(a1 + 8) = a3;
          *(_DWORD *)(a1 + 20) = (_DWORD)v4;
          *(_DWORD *)(a1 + 24) = v8;
          *(_DWORD *)(a1 + 16) = v7;
          v12[1] = v9;
          v12[2] = v10;
          PB::Base::~Base((PB::Base *)v12);
          return a1;
        }
LABEL_8:
        v7 = 0;
        goto LABEL_9;
      }
    }
    else
    {
      v6 = 0;
      if ((*(_BYTE *)(a2 + 24) & 4) != 0)
        goto LABEL_4;
    }
    if ((v5 & 2) != 0)
      goto LABEL_5;
    goto LABEL_8;
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::AirpodEvent *a2, CMMsl::AirpodEvent *a3)
{
  int v3;
  uint64_t v4;
  double result;
  uint64_t v6;

  v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  result = *((double *)a2 + 2);
  v6 = *((_QWORD *)this + 2);
  *((double *)this + 2) = result;
  *((_QWORD *)a2 + 2) = v6;
  return result;
}

double CMMsl::AirpodEvent::AirpodEvent(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135C448;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135C448;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::AirpodEvent::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  int v8;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    v7[0] = &off_25135C448;
    v8 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v3;
    v7[1] = v4;
    v7[2] = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

uint64_t CMMsl::AirpodEvent::formatText(CMMsl::AirpodEvent *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 2) == 0)
  {
    if ((*((_BYTE *)this + 24) & 4) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(a2, "location");
    if ((*((_BYTE *)this + 24) & 1) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_4;
  }
  PB::TextFormatter::format(a2, "eventTag");
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 4) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 1) != 0)
LABEL_4:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AirpodEvent::readFrom(CMMsl::AirpodEvent *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t result;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  char v33;
  char v34;
  unsigned int v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  unint64_t v40;
  char v41;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v19 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((_BYTE *)this + 24) |= 2u;
        v22 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v23 = *(_QWORD *)a2;
        if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v2)
        {
          v34 = 0;
          v35 = 0;
          v26 = 0;
          if (v2 <= v22)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v22)
            {
              LODWORD(v26) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_67;
            }
            v36 = v22++;
            v37 = *(_BYTE *)(v23 + v36);
            *((_QWORD *)a2 + 1) = v22;
            v26 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0)
              break;
            v34 += 7;
            v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v26) = 0;
              goto LABEL_66;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v26) = 0;
LABEL_66:
          v2 = v36 + 1;
        }
        else
        {
          v24 = 0;
          v25 = 0;
          v26 = 0;
          while (1)
          {
            v2 = v22 + 1;
            *((_QWORD *)a2 + 1) = v22 + 1;
            v27 = *(_BYTE *)(v23 + v22);
            v26 |= (unint64_t)(v27 & 0x7F) << v24;
            if ((v27 & 0x80) == 0)
              break;
            v24 += 7;
            v22 = v2;
            v14 = v25++ > 8;
            if (v14)
            {
              LODWORD(v26) = 0;
              break;
            }
          }
        }
LABEL_67:
        *((_DWORD *)this + 4) = v26;
      }
      else if ((_DWORD)v19 == 2)
      {
        *((_BYTE *)this + 24) |= 4u;
        v28 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v29 = *(_QWORD *)a2;
        if (v28 > 0xFFFFFFFFFFFFFFF5 || v28 + 10 > v2)
        {
          v38 = 0;
          v39 = 0;
          v32 = 0;
          if (v2 <= v28)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v28)
            {
              LODWORD(v32) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_72;
            }
            v40 = v28++;
            v41 = *(_BYTE *)(v29 + v40);
            *((_QWORD *)a2 + 1) = v28;
            v32 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0)
              break;
            v38 += 7;
            v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v32) = 0;
              goto LABEL_71;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v32) = 0;
LABEL_71:
          v2 = v40 + 1;
        }
        else
        {
          v30 = 0;
          v31 = 0;
          v32 = 0;
          while (1)
          {
            v2 = v28 + 1;
            *((_QWORD *)a2 + 1) = v28 + 1;
            v33 = *(_BYTE *)(v29 + v28);
            v32 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0)
              break;
            v30 += 7;
            v28 = v2;
            v14 = v31++ > 8;
            if (v14)
            {
              LODWORD(v32) = 0;
              break;
            }
          }
        }
LABEL_72:
        *((_DWORD *)this + 5) = v32;
      }
      else if ((_DWORD)v19 == 1)
      {
        *((_BYTE *)this + 24) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_27;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AirpodEvent::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 24);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 24);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        return this;
      return PB::Writer::writeVarInt(a2);
    }
  }
  else if ((*(_BYTE *)(this + 24) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  if ((*(_BYTE *)(v3 + 24) & 2) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

BOOL CMMsl::AirpodEvent::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 24) & 2) == 0;
  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
    return (*(_BYTE *)(a2 + 24) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

uint64_t CMMsl::AirpodEvent::hash_value(CMMsl::AirpodEvent *this)
{
  double v1;
  uint64_t v2;
  uint64_t v3;

  if ((*((_BYTE *)this + 24) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 24) & 4) != 0)
      goto LABEL_3;
LABEL_8:
    v2 = 0;
    if ((*((_BYTE *)this + 24) & 2) != 0)
      goto LABEL_4;
LABEL_9:
    v3 = 0;
    return v2 ^ *(_QWORD *)&v1 ^ v3;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 24) & 4) == 0)
    goto LABEL_8;
LABEL_3:
  v2 = *((unsigned int *)this + 5);
  if ((*((_BYTE *)this + 24) & 2) == 0)
    goto LABEL_9;
LABEL_4:
  v3 = *((int *)this + 4);
  return v2 ^ *(_QWORD *)&v1 ^ v3;
}

uint64_t CMMsl::Altimeter::Altimeter(uint64_t this)
{
  *(_QWORD *)this = &off_25135C480;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135C480;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

void CMMsl::Altimeter::~Altimeter(CMMsl::Altimeter *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::Altimeter::Altimeter(CMMsl::Altimeter *this, const CMMsl::Altimeter *a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)this = &off_25135C480;
  *((_DWORD *)this + 10) = 0;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 8) != 0)
  {
    result = *((double *)a2 + 4);
    v3 = 8;
    *((_BYTE *)this + 40) = 8;
    *((double *)this + 4) = result;
    v2 = *((_BYTE *)a2 + 40);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 40) & 4) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 3);
    v3 |= 4u;
    *((_BYTE *)this + 40) = v3;
    *((double *)this + 3) = result;
    v2 = *((_BYTE *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 2) == 0)
  {
    if ((v2 & 1) == 0)
      return result;
LABEL_10:
    result = *((double *)a2 + 1);
    *((_BYTE *)this + 40) = v3 | 1;
    *((double *)this + 1) = result;
    return result;
  }
  result = *((double *)a2 + 2);
  v3 |= 2u;
  *((_BYTE *)this + 40) = v3;
  *((double *)this + 2) = result;
  if ((*((_BYTE *)a2 + 40) & 1) != 0)
    goto LABEL_10;
  return result;
}

uint64_t CMMsl::Altimeter::operator=(uint64_t a1, const CMMsl::Altimeter *a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  int v10;

  if ((const CMMsl::Altimeter *)a1 != a2)
  {
    CMMsl::Altimeter::Altimeter((CMMsl::Altimeter *)&v7, a2);
    v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v10;
    v10 = v3;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::Altimeter *a2, CMMsl::Altimeter *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::Altimeter::Altimeter(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135C480;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135C480;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::Altimeter::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  void (**v8)(CMMsl::Altimeter *__hidden);
  __int128 v9;
  __int128 v10;
  int v11;

  if (a1 != a2)
  {
    v8 = &off_25135C480;
    v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    v11 = *(_DWORD *)(a1 + 40);
    v10 = *(_OWORD *)(a1 + 24);
    v4 = *(_OWORD *)(a1 + 8);
    v5 = *(_OWORD *)(a2 + 8);
    v6 = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 40) = v3;
    *(_OWORD *)(a1 + 24) = v6;
    *(_OWORD *)(a1 + 8) = v5;
    v9 = v4;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::Altimeter::formatText(CMMsl::Altimeter *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "machAbsTimestamp", *((double *)this + 1));
    v5 = *((_BYTE *)this + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "relativeAltitude", *((double *)this + 3));
      if ((*((_BYTE *)this + 40) & 8) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "pressure", *((double *)this + 2));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 4));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::Altimeter::readFrom(CMMsl::Altimeter *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_37;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 40) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 2u:
        *((_BYTE *)this + 40) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 3u:
        *((_BYTE *)this + 40) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 4u:
        *((_BYTE *)this + 40) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_36:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_34:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_37:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::Altimeter::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 40);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32));
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 8));
  }
LABEL_8:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  if ((*(_BYTE *)(v3 + 40) & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 8));
  return this;
}

BOOL CMMsl::Altimeter::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 40) & 1) == 0;
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    return (*(_BYTE *)(a2 + 40) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  return v2;
}

uint64_t CMMsl::Altimeter::hash_value(CMMsl::Altimeter *this)
{
  double v1;
  double v2;
  double v3;
  double v4;

  if ((*((_BYTE *)this + 40) & 8) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 40) & 4) != 0)
      goto LABEL_3;
LABEL_15:
    v2 = 0.0;
    if ((*((_BYTE *)this + 40) & 2) != 0)
      goto LABEL_6;
    goto LABEL_16;
  }
  v1 = *((double *)this + 4);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 40) & 4) == 0)
    goto LABEL_15;
LABEL_3:
  v2 = *((double *)this + 3);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 40) & 2) != 0)
  {
LABEL_6:
    v3 = *((double *)this + 2);
    if (v3 == 0.0)
      v3 = 0.0;
    if ((*((_BYTE *)this + 40) & 1) != 0)
      goto LABEL_9;
LABEL_17:
    v4 = 0.0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4;
  }
LABEL_16:
  v3 = 0.0;
  if ((*((_BYTE *)this + 40) & 1) == 0)
    goto LABEL_17;
LABEL_9:
  v4 = *((double *)this + 1);
  if (v4 == 0.0)
    v4 = 0.0;
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4;
}

uint64_t CMMsl::AltimeterKF::AltimeterKF(uint64_t this)
{
  *(_QWORD *)this = &off_25135C4B8;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135C4B8;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

void CMMsl::AltimeterKF::~AltimeterKF(CMMsl::AltimeterKF *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::AltimeterKF::AltimeterKF(uint64_t this, const CMMsl::AltimeterKF *a2)
{
  __int16 v2;
  __int16 v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  char v15;

  *(_QWORD *)this = &off_25135C4B8;
  *(_DWORD *)(this + 64) = 0;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x10) != 0)
  {
    v4 = *((_DWORD *)a2 + 8);
    v3 = 16;
    *(_WORD *)(this + 64) = 16;
    *(_DWORD *)(this + 32) = v4;
    v2 = *((_WORD *)a2 + 32);
    if ((v2 & 0x400) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_WORD *)a2 + 32) & 0x400) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 14);
    v3 |= 0x400u;
    *(_WORD *)(this + 64) = v3;
    *(_DWORD *)(this + 56) = v5;
    v2 = *((_WORD *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    v6 = *((_DWORD *)a2 + 7);
    v3 |= 8u;
    *(_WORD *)(this + 64) = v3;
    *(_DWORD *)(this + 28) = v6;
    v2 = *((_WORD *)a2 + 32);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 0x80) == 0)
        goto LABEL_9;
      goto LABEL_19;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 6);
  v3 |= 4u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 24) = v7;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x80) == 0)
  {
LABEL_9:
    if ((v2 & 2) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  v8 = *((_DWORD *)a2 + 11);
  v3 |= 0x80u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 44) = v8;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 2) == 0)
  {
LABEL_10:
    if ((v2 & 1) == 0)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_20:
  v9 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_WORD *)(this + 64) = v3;
  *(_QWORD *)(this + 16) = v9;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 1) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_22;
  }
LABEL_21:
  v10 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 64) = v3;
  *(_QWORD *)(this + 8) = v10;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_23;
  }
LABEL_22:
  v11 = *((_DWORD *)a2 + 12);
  v3 |= 0x100u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 48) = v11;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 0x40) == 0)
      goto LABEL_14;
    goto LABEL_24;
  }
LABEL_23:
  v12 = *((_DWORD *)a2 + 13);
  v3 |= 0x200u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 52) = v12;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x40) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_25;
  }
LABEL_24:
  v13 = *((_DWORD *)a2 + 10);
  v3 |= 0x40u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 40) = v13;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 0x800) == 0)
      return this;
LABEL_26:
    v15 = *((_BYTE *)a2 + 60);
    *(_WORD *)(this + 64) = v3 | 0x800;
    *(_BYTE *)(this + 60) = v15;
    return this;
  }
LABEL_25:
  v14 = *((_DWORD *)a2 + 9);
  v3 |= 0x20u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 36) = v14;
  if ((*((_WORD *)a2 + 32) & 0x800) != 0)
    goto LABEL_26;
  return this;
}

CMMsl *CMMsl::AltimeterKF::operator=(CMMsl *a1, const CMMsl::AltimeterKF *a2)
{
  CMMsl::AltimeterKF *v3;
  _BYTE v5[72];

  if (a1 != a2)
  {
    CMMsl::AltimeterKF::AltimeterKF((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::AltimeterKF *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::AltimeterKF *a2, CMMsl::AltimeterKF *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  float result;

  v3 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  v4 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  v5 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v5;
  v6 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v6;
  v7 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v7;
  v8 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v8;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v9;
  v10 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v10;
  v11 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v11;
  v12 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v12;
  v13 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v13;
  result = *((float *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((float *)a2 + 9) = result;
  LOBYTE(v10) = *((_BYTE *)this + 60);
  *((_BYTE *)this + 60) = *((_BYTE *)a2 + 60);
  *((_BYTE *)a2 + 60) = v10;
  return result;
}

float CMMsl::AltimeterKF::AltimeterKF(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135C4B8;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  result = *(float *)(a2 + 36);
  *(float *)(a1 + 36) = result;
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  return result;
}

CMMsl *CMMsl::AltimeterKF::operator=(CMMsl *this, uint64_t a2, CMMsl::AltimeterKF *a3)
{
  __int128 v4;
  __int128 v5;
  void (**v7)(CMMsl::AltimeterKF *__hidden);
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int v11;
  char v12;
  int v13;

  if (this != (CMMsl *)a2)
  {
    v7 = &off_25135C4B8;
    v13 = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(a2 + 64) = 0;
    v11 = *(_DWORD *)(a2 + 56);
    v4 = *(_OWORD *)(a2 + 8);
    v10 = *(_OWORD *)(a2 + 40);
    v5 = *(_OWORD *)(a2 + 24);
    v8 = v4;
    v9 = v5;
    v12 = *(_BYTE *)(a2 + 60);
    CMMsl::swap(this, (CMMsl::AltimeterKF *)&v7, a3);
    PB::Base::~Base((PB::Base *)&v7);
  }
  return this;
}

uint64_t CMMsl::AltimeterKF::formatText(CMMsl::AltimeterKF *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "accelBiasZ", *((float *)this + 6));
    v5 = *((_WORD *)this + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x800) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "accelZ", *((float *)this + 7));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x800) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "compensate");
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "height", *((float *)this + 8));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "inertialCompOffset", *((float *)this + 9));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "inertialCompPressure", *((float *)this + 10));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "kfPressure", *((float *)this + 11));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "rawPressure", *((float *)this + 12));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 1) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "rawPressureTemperature", *((float *)this + 13));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 1) == 0)
  {
LABEL_11:
    if ((v5 & 2) == 0)
      goto LABEL_12;
LABEL_25:
    PB::TextFormatter::format(a2, "timestamp");
    if ((*((_WORD *)this + 32) & 0x400) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_13;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "rawPressureTimestamp");
  v5 = *((_WORD *)this + 32);
  if ((v5 & 2) != 0)
    goto LABEL_25;
LABEL_12:
  if ((v5 & 0x400) != 0)
LABEL_13:
    PB::TextFormatter::format(a2, "verticalSpeed", *((float *)this + 14));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AltimeterKF::readFrom(CMMsl::AltimeterKF *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  int v32;
  BOOL v33;
  char v34;
  unsigned int v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  unint64_t v40;
  char v41;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_94;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 32) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_63;
        *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_83;
      case 2u:
        *((_WORD *)this + 32) |= 0x400u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_63;
        *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_83;
      case 3u:
        *((_WORD *)this + 32) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_63;
        *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_83;
      case 4u:
        *((_WORD *)this + 32) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_63;
        *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_83;
      case 5u:
        *((_WORD *)this + 32) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_63;
        *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_83;
      case 6u:
        *((_WORD *)this + 32) |= 2u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v34 = 0;
          v35 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              v24 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_88;
            }
            v36 = v20++;
            v37 = *(_BYTE *)(v21 + v36);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0)
              break;
            v34 += 7;
            v14 = v35++ > 8;
            if (v14)
            {
              v24 = 0;
LABEL_87:
              v2 = v36 + 1;
              goto LABEL_88;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v24 = 0;
          goto LABEL_87;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_88;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        v24 = 0;
LABEL_88:
        *((_QWORD *)this + 2) = v24;
        break;
      case 7u:
        *((_WORD *)this + 32) |= 1u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v38 = 0;
          v39 = 0;
          v30 = 0;
          if (v2 <= v26)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v26)
            {
              v30 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_93;
            }
            v40 = v26++;
            v41 = *(_BYTE *)(v27 + v40);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0)
              break;
            v38 += 7;
            v14 = v39++ > 8;
            if (v14)
            {
              v30 = 0;
LABEL_92:
              v2 = v40 + 1;
              goto LABEL_93;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v30 = 0;
          goto LABEL_92;
        }
        v28 = 0;
        v29 = 0;
        v30 = 0;
        do
        {
          v2 = v26 + 1;
          *((_QWORD *)a2 + 1) = v26 + 1;
          v31 = *(_BYTE *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0)
            goto LABEL_93;
          v28 += 7;
          v26 = v2;
          v14 = v29++ > 8;
        }
        while (!v14);
        v30 = 0;
LABEL_93:
        *((_QWORD *)this + 1) = v30;
        break;
      case 8u:
        *((_WORD *)this + 32) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_63;
        *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_83;
      case 9u:
        *((_WORD *)this + 32) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_63;
        *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_83;
      case 0xAu:
        *((_WORD *)this + 32) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_63;
        *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_83;
      case 0xBu:
        *((_WORD *)this + 32) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_83:
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_63:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 0xCu:
        *((_WORD *)this + 32) |= 0x800u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v33 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v32 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v33 = v32 != 0;
        }
        *((_BYTE *)this + 60) = v33;
        break;
      default:
        goto LABEL_19;
    }
LABEL_94:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::AltimeterKF::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 64);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 32));
    v4 = *(_WORD *)(v3 + 64);
    if ((v4 & 0x400) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((*(_WORD *)(this + 64) & 0x400) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x80) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 2) == 0)
  {
LABEL_7:
    if ((v4 & 1) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x40) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0)
      return this;
    return PB::Writer::write(a2);
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  if ((*(_WORD *)(v3 + 64) & 0x800) != 0)
    return PB::Writer::write(a2);
  return this;
}

BOOL CMMsl::AltimeterKF::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 64);
  v3 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x400) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x100) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x200) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x800) == 0;
  if ((*(_WORD *)(a1 + 64) & 0x800) != 0)
    return (*(_WORD *)(a2 + 64) & 0x800) != 0 && *(unsigned __int8 *)(a1 + 60) == *(unsigned __int8 *)(a2 + 60);
  return v4;
}

uint64_t CMMsl::AltimeterKF::hash_value(CMMsl::AltimeterKF *this)
{
  __int16 v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  float v22;

  v1 = *((_WORD *)this + 32);
  if ((v1 & 0x10) == 0)
  {
    v2 = 0;
    if ((*((_WORD *)this + 32) & 0x400) != 0)
      goto LABEL_3;
LABEL_33:
    v4 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_6;
LABEL_34:
    v6 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_9;
LABEL_35:
    v8 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_12;
LABEL_36:
    v10 = 0;
    if ((v1 & 2) != 0)
      goto LABEL_15;
    goto LABEL_37;
  }
  v22 = *((float *)this + 8);
  v2 = LODWORD(v22);
  if (v22 == 0.0)
    v2 = 0;
  if ((*((_WORD *)this + 32) & 0x400) == 0)
    goto LABEL_33;
LABEL_3:
  v3 = *((float *)this + 14);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_34;
LABEL_6:
  v5 = *((float *)this + 7);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((v1 & 4) == 0)
    goto LABEL_35;
LABEL_9:
  v7 = *((float *)this + 6);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_36;
LABEL_12:
  v9 = *((float *)this + 11);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_15:
    v11 = *((_QWORD *)this + 2);
    if ((v1 & 1) != 0)
      goto LABEL_16;
    goto LABEL_38;
  }
LABEL_37:
  v11 = 0;
  if ((v1 & 1) != 0)
  {
LABEL_16:
    v12 = *((_QWORD *)this + 1);
    if ((*((_WORD *)this + 32) & 0x100) != 0)
      goto LABEL_17;
LABEL_39:
    v14 = 0;
    if ((*((_WORD *)this + 32) & 0x200) != 0)
      goto LABEL_20;
LABEL_40:
    v16 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_23;
LABEL_41:
    v18 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_26;
    goto LABEL_42;
  }
LABEL_38:
  v12 = 0;
  if ((*((_WORD *)this + 32) & 0x100) == 0)
    goto LABEL_39;
LABEL_17:
  v13 = *((float *)this + 12);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((*((_WORD *)this + 32) & 0x200) == 0)
    goto LABEL_40;
LABEL_20:
  v15 = *((float *)this + 13);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_41;
LABEL_23:
  v17 = *((float *)this + 10);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_26:
    v19 = *((float *)this + 9);
    v20 = LODWORD(v19);
    if (v19 == 0.0)
      v20 = 0;
    if ((*((_WORD *)this + 32) & 0x800) != 0)
      goto LABEL_29;
LABEL_43:
    v21 = 0;
    return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v11 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v21;
  }
LABEL_42:
  v20 = 0;
  if ((*((_WORD *)this + 32) & 0x800) == 0)
    goto LABEL_43;
LABEL_29:
  v21 = *((unsigned __int8 *)this + 60);
  return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v11 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v21;
}

uint64_t CMMsl::AnchorCorrection::AnchorCorrection(uint64_t this)
{
  *(_QWORD *)this = &off_25135C4F0;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135C4F0;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void CMMsl::AnchorCorrection::~AnchorCorrection(CMMsl::AnchorCorrection *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135C4F0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135C4F0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135C4F0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::AnchorCorrection *CMMsl::AnchorCorrection::AnchorCorrection(CMMsl::AnchorCorrection *this, const CMMsl::DeviceMotionCorrection **a2)
{
  CMMsl::DeviceMotionCorrection *v4;
  CMMsl::DeviceMotionCorrection *v5;
  uint64_t v6;
  const CMMsl::DeviceMotionCorrection *v7;

  *(_QWORD *)this = &off_25135C4F0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  if (a2[1])
  {
    v4 = (CMMsl::DeviceMotionCorrection *)operator new();
    v5 = CMMsl::DeviceMotionCorrection::DeviceMotionCorrection(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  if (((_BYTE)a2[3] & 1) != 0)
  {
    v7 = a2[2];
    *((_BYTE *)this + 24) |= 1u;
    *((_QWORD *)this + 2) = v7;
  }
  return this;
}

uint64_t CMMsl::AnchorCorrection::operator=(uint64_t a1, const CMMsl::DeviceMotionCorrection **a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  void (**v7)(CMMsl::AnchorCorrection *__hidden);
  uint64_t v8;
  uint64_t v9;
  int v10;

  if ((const CMMsl::DeviceMotionCorrection **)a1 != a2)
  {
    CMMsl::AnchorCorrection::AnchorCorrection((CMMsl::AnchorCorrection *)&v7, a2);
    v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v8;
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v9;
    v9 = v5;
    v7 = &off_25135C4F0;
    v8 = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::AnchorCorrection *a2, CMMsl::AnchorCorrection *a3)
{
  int v3;
  uint64_t v4;
  double result;

  v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

uint64_t CMMsl::AnchorCorrection::AnchorCorrection(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_25135C4F0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_25135C4F0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t CMMsl::AnchorCorrection::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  int v11;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v3;
    v11 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v8 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v5;
    v10[2] = v8;
    v10[0] = &off_25135C4F0;
    v10[1] = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::AnchorCorrection::formatText(CMMsl::AnchorCorrection *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "correction");
  if ((*((_BYTE *)this + 24) & 1) != 0)
    PB::TextFormatter::format(a2, "lastConvergenceTimestamp", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AnchorCorrection::readFrom(CMMsl::AnchorCorrection *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_28;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 24) |= 1u;
        v22 = *((_QWORD *)a2 + 1);
        if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v22);
          *((_QWORD *)a2 + 1) += 8;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else if ((v11 >> 3) == 1)
      {
        v19 = operator new();
        *(_QWORD *)v19 = &off_25135D130;
        *(_DWORD *)(v19 + 160) = 0;
        *(_OWORD *)(v19 + 8) = 0u;
        *(_OWORD *)(v19 + 24) = 0u;
        *(_OWORD *)(v19 + 40) = 0u;
        *(_OWORD *)(v19 + 56) = 0u;
        *(_OWORD *)(v19 + 72) = 0u;
        *(_OWORD *)(v19 + 88) = 0u;
        *(_OWORD *)(v19 + 104) = 0u;
        *(_OWORD *)(v19 + 120) = 0u;
        *(_OWORD *)(v19 + 136) = 0u;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = *((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_28:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_28;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

double CMMsl::DeviceMotionCorrection::DeviceMotionCorrection(CMMsl::DeviceMotionCorrection *this)
{
  double result;

  *(_QWORD *)this = &off_25135D130;
  *((_DWORD *)this + 40) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_25135D130;
  *((_DWORD *)this + 40) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  return result;
}

uint64_t CMMsl::AnchorCorrection::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = this;
  v4 = *(const PB::Base **)(this + 8);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  if ((*(_BYTE *)(v3 + 24) & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 16));
  return this;
}

BOOL CMMsl::AnchorCorrection::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !CMMsl::DeviceMotionCorrection::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  result = (*(_BYTE *)(a2 + 24) & 1) == 0;
  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
    return result;
  return (*(_BYTE *)(a2 + 24) & 1) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
}

BOOL CMMsl::DeviceMotionCorrection::operator==(uint64_t a1, uint64_t a2)
{
  float *v2;
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  float *v14;
  float *v15;
  float *v16;
  uint64_t v17;
  uint64_t v18;
  float *v19;
  uint64_t v20;
  float v21;
  _BOOL8 result;
  BOOL v23;

  if ((*(_BYTE *)(a1 + 160) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 160) & 1) == 0 || *(double *)(a1 + 152) != *(double *)(a2 + 152))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 160) & 1) != 0)
  {
    return 0;
  }
  v3 = *(float **)(a1 + 32);
  v2 = *(float **)(a1 + 40);
  v4 = *(float **)(a2 + 32);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 40) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v6 = *(float **)(a1 + 56);
  v5 = *(float **)(a1 + 64);
  v7 = *(float **)(a2 + 56);
  if ((char *)v5 - (char *)v6 != *(_QWORD *)(a2 + 64) - (_QWORD)v7)
    return 0;
  while (v6 != v5)
  {
    if (*v6 != *v7)
      return 0;
    ++v6;
    ++v7;
  }
  v9 = *(float **)(a1 + 104);
  v8 = *(float **)(a1 + 112);
  v10 = *(float **)(a2 + 104);
  if ((char *)v8 - (char *)v9 != *(_QWORD *)(a2 + 112) - (_QWORD)v10)
    return 0;
  while (v9 != v8)
  {
    if (*v9 != *v10)
      return 0;
    ++v9;
    ++v10;
  }
  v12 = *(float **)(a1 + 8);
  v11 = *(float **)(a1 + 16);
  v13 = *(float **)(a2 + 8);
  if ((char *)v11 - (char *)v12 != *(_QWORD *)(a2 + 16) - (_QWORD)v13)
    return 0;
  while (v12 != v11)
  {
    if (*v12 != *v13)
      return 0;
    ++v12;
    ++v13;
  }
  v15 = *(float **)(a1 + 80);
  v14 = *(float **)(a1 + 88);
  v16 = *(float **)(a2 + 80);
  if ((char *)v14 - (char *)v15 != *(_QWORD *)(a2 + 88) - (_QWORD)v16)
    return 0;
  while (v15 != v14)
  {
    if (*v15 != *v16)
      return 0;
    ++v15;
    ++v16;
  }
  v18 = *(_QWORD *)(a1 + 128);
  v17 = *(_QWORD *)(a1 + 136);
  v19 = *(float **)(a2 + 128);
  if (v17 - v18 != *(_QWORD *)(a2 + 136) - (_QWORD)v19)
    return 0;
  if (v18 == v17)
    return 1;
  v20 = v18 + 4;
  do
  {
    v21 = *v19++;
    result = *(float *)(v20 - 4) == v21;
    v23 = *(float *)(v20 - 4) != v21 || v20 == v17;
    v20 += 4;
  }
  while (!v23);
  return result;
}

unint64_t CMMsl::AnchorCorrection::hash_value(CMMsl::AnchorCorrection *this)
{
  unint64_t v2;
  double v3;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    v2 = CMMsl::DeviceMotionCorrection::hash_value((CMMsl::DeviceMotionCorrection *)v2);
  if ((*((_BYTE *)this + 24) & 1) != 0)
  {
    v3 = *((double *)this + 2);
    if (v3 == 0.0)
      v3 = 0.0;
  }
  else
  {
    v3 = 0.0;
  }
  return *(_QWORD *)&v3 ^ v2;
}

_QWORD *CMMsl::AnchorCorrection::makeCorrection(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135D130;
    *(_DWORD *)(v2 + 160) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_OWORD *)(v2 + 120) = 0u;
    *(_OWORD *)(v2 + 136) = 0u;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t CMMsl::AnchorMotionCorrespondence::AnchorMotionCorrespondence(uint64_t this)
{
  *(_QWORD *)this = &off_25135C528;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135C528;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

void CMMsl::AnchorMotionCorrespondence::~AnchorMotionCorrespondence(CMMsl::AnchorMotionCorrespondence *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::AnchorMotionCorrespondence::AnchorMotionCorrespondence(CMMsl::AnchorMotionCorrespondence *this, const CMMsl::AnchorMotionCorrespondence *a2)
{
  char v2;
  char v3;
  double result;
  char v5;

  *(_QWORD *)this = &off_25135C528;
  *((_DWORD *)this + 11) = 0;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 8) != 0)
  {
    result = *((double *)a2 + 4);
    v3 = 8;
    *((_BYTE *)this + 44) = 8;
    *((double *)this + 4) = result;
    v2 = *((_BYTE *)a2 + 44);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 44) & 4) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 3);
    v3 |= 4u;
    *((_BYTE *)this + 44) = v3;
    *((double *)this + 3) = result;
    v2 = *((_BYTE *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    result = *((double *)a2 + 2);
    v3 |= 2u;
    *((_BYTE *)this + 44) = v3;
    *((double *)this + 2) = result;
    v2 = *((_BYTE *)a2 + 44);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0)
        return result;
LABEL_12:
      result = *((double *)a2 + 1);
      *((_BYTE *)this + 44) = v3 | 1;
      *((double *)this + 1) = result;
      return result;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v5 = *((_BYTE *)a2 + 40);
  v3 |= 0x10u;
  *((_BYTE *)this + 44) = v3;
  *((_BYTE *)this + 40) = v5;
  if ((*((_BYTE *)a2 + 44) & 1) != 0)
    goto LABEL_12;
  return result;
}

uint64_t CMMsl::AnchorMotionCorrespondence::operator=(uint64_t a1, const CMMsl::AnchorMotionCorrespondence *a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  char v10;
  int v11;

  if ((const CMMsl::AnchorMotionCorrespondence *)a1 != a2)
  {
    CMMsl::AnchorMotionCorrespondence::AnchorMotionCorrespondence((CMMsl::AnchorMotionCorrespondence *)&v7, a2);
    v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v11;
    v11 = v3;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v9 = v4;
    LOBYTE(v3) = *(_BYTE *)(a1 + 40);
    *(_BYTE *)(a1 + 40) = v10;
    v10 = v3;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::AnchorMotionCorrespondence *a2, CMMsl::AnchorMotionCorrespondence *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  LOBYTE(v3) = *((_BYTE *)this + 40);
  *((_BYTE *)this + 40) = *((_BYTE *)a2 + 40);
  *((_BYTE *)a2 + 40) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::AnchorMotionCorrespondence::AnchorMotionCorrespondence(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135C528;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135C528;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::AnchorMotionCorrespondence::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  char v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  void (**v10)(CMMsl::AnchorMotionCorrespondence *__hidden);
  __int128 v11;
  __int128 v12;
  char v13;
  int v14;

  if (a1 != a2)
  {
    v10 = &off_25135C528;
    v3 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a2 + 44) = 0;
    v4 = *(_BYTE *)(a2 + 40);
    v14 = *(_DWORD *)(a1 + 44);
    v12 = *(_OWORD *)(a1 + 24);
    v5 = *(_BYTE *)(a1 + 40);
    *(_BYTE *)(a1 + 40) = v4;
    v13 = v5;
    v6 = *(_OWORD *)(a1 + 8);
    v7 = *(_OWORD *)(a2 + 8);
    v8 = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 44) = v3;
    *(_OWORD *)(a1 + 24) = v8;
    *(_OWORD *)(a1 + 8) = v7;
    v11 = v6;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

uint64_t CMMsl::AnchorMotionCorrespondence::formatText(CMMsl::AnchorMotionCorrespondence *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "dThetaNorm", *((double *)this + 1));
    v5 = *((_BYTE *)this + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((_BYTE *)this + 44) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "lastCorrespondenceTimestamp", *((double *)this + 2));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(a2, "state");
    if ((*((_BYTE *)this + 44) & 8) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(a2, "lastUpdateTimestamp", *((double *)this + 3));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 0x10) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 8) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 4));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AnchorMotionCorrespondence::readFrom(CMMsl::AnchorMotionCorrespondence *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v20;
  BOOL v21;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_41;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 44) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_36;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_40;
      case 2u:
        *((_BYTE *)this + 44) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_36;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_40;
      case 3u:
        *((_BYTE *)this + 44) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_36;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_40;
      case 4u:
        *((_BYTE *)this + 44) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v21 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v21 = v20 != 0;
        }
        *((_BYTE *)this + 40) = v21;
        break;
      case 5u:
        *((_BYTE *)this + 44) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_40:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_36:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_41:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::AnchorMotionCorrespondence::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 44);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32));
    v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(this + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 8));
  }
LABEL_10:
  this = PB::Writer::write(a2);
  if ((*(_BYTE *)(v3 + 44) & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 8));
  return this;
}

BOOL CMMsl::AnchorMotionCorrespondence::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 44) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 0x10) == 0 || *(unsigned __int8 *)(a1 + 40) != *(unsigned __int8 *)(a2 + 40))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 0x10) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 44) & 1) == 0;
  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
    return (*(_BYTE *)(a2 + 44) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  return v2;
}

uint64_t CMMsl::AnchorMotionCorrespondence::hash_value(CMMsl::AnchorMotionCorrespondence *this)
{
  double v1;
  double v2;
  double v3;
  uint64_t v4;
  double v5;

  if ((*((_BYTE *)this + 44) & 8) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 44) & 4) != 0)
      goto LABEL_3;
LABEL_16:
    v2 = 0.0;
    if ((*((_BYTE *)this + 44) & 2) != 0)
      goto LABEL_6;
LABEL_17:
    v3 = 0.0;
    if ((*((_BYTE *)this + 44) & 0x10) != 0)
      goto LABEL_9;
    goto LABEL_18;
  }
  v1 = *((double *)this + 4);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 44) & 4) == 0)
    goto LABEL_16;
LABEL_3:
  v2 = *((double *)this + 3);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 44) & 2) == 0)
    goto LABEL_17;
LABEL_6:
  v3 = *((double *)this + 2);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((*((_BYTE *)this + 44) & 0x10) != 0)
  {
LABEL_9:
    v4 = *((unsigned __int8 *)this + 40);
    if ((*((_BYTE *)this + 44) & 1) != 0)
      goto LABEL_10;
LABEL_19:
    v5 = 0.0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ v4 ^ *(_QWORD *)&v5;
  }
LABEL_18:
  v4 = 0;
  if ((*((_BYTE *)this + 44) & 1) == 0)
    goto LABEL_19;
LABEL_10:
  v5 = *((double *)this + 1);
  if (v5 == 0.0)
    v5 = 0.0;
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ v4 ^ *(_QWORD *)&v5;
}

_QWORD *CMMsl::AppleCV3DSLAMState::AppleCV3DSLAMState(_QWORD *this)
{
  *this = &off_25135C560;
  this[1] = 0;
  return this;
}

{
  *this = &off_25135C560;
  this[1] = 0;
  return this;
}

void CMMsl::AppleCV3DSLAMState::~AppleCV3DSLAMState(CMMsl::AppleCV3DSLAMState *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135C560;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135C560;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135C560;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::AppleCV3DSLAMState *CMMsl::AppleCV3DSLAMState::AppleCV3DSLAMState(CMMsl::AppleCV3DSLAMState *this, const CMMsl::CV3DSLAMState **a2)
{
  CMMsl::CV3DSLAMState *v4;
  CMMsl::CV3DSLAMState *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_25135C560;
  *((_QWORD *)this + 1) = 0;
  if (a2[1])
  {
    v4 = (CMMsl::CV3DSLAMState *)operator new();
    v5 = CMMsl::CV3DSLAMState::CV3DSLAMState(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return this;
}

uint64_t CMMsl::AppleCV3DSLAMState::operator=(uint64_t a1, const CMMsl::CV3DSLAMState **a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::AppleCV3DSLAMState *__hidden);
  uint64_t v6;

  if ((const CMMsl::CV3DSLAMState **)a1 != a2)
  {
    CMMsl::AppleCV3DSLAMState::AppleCV3DSLAMState((CMMsl::AppleCV3DSLAMState *)&v5, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v6;
    v5 = &off_25135C560;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AppleCV3DSLAMState *a2, CMMsl::AppleCV3DSLAMState *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::AppleCV3DSLAMState::AppleCV3DSLAMState(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_25135C560;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_25135C560;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::AppleCV3DSLAMState::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = &off_25135C560;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::AppleCV3DSLAMState::formatText(CMMsl::AppleCV3DSLAMState *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AppleCV3DSLAMState::readFrom(CMMsl::AppleCV3DSLAMState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v19 = operator new();
        *(_QWORD *)v19 = &off_25135CBF0;
        *(_DWORD *)(v19 + 88) = 0;
        *(_OWORD *)(v19 + 8) = 0u;
        *(_OWORD *)(v19 + 24) = 0u;
        *(_OWORD *)(v19 + 40) = 0u;
        *(_OWORD *)(v19 + 56) = 0u;
        *(_QWORD *)(v19 + 72) = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = *((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_27;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

double CMMsl::CV3DSLAMState::CV3DSLAMState(CMMsl::CV3DSLAMState *this)
{
  double result;

  *(_QWORD *)this = &off_25135CBF0;
  *((_DWORD *)this + 22) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_25135CBF0;
  *((_DWORD *)this + 22) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  return result;
}

uint64_t CMMsl::AppleCV3DSLAMState::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2);
  return this;
}

BOOL CMMsl::AppleCV3DSLAMState::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::CV3DSLAMState::operator==(v2, v3);
  return result;
}

BOOL CMMsl::CV3DSLAMState::operator==(uint64_t a1, uint64_t a2)
{
  double *v2;
  double *v3;
  double *v4;
  double *v5;
  double *v6;
  double *v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  uint64_t v11;
  double v12;
  _BOOL8 result;
  BOOL v14;

  if ((*(_BYTE *)(a1 + 88) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 88) & 1) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 88) & 1) != 0)
  {
    return 0;
  }
  v3 = *(double **)(a1 + 8);
  v2 = *(double **)(a1 + 16);
  v4 = *(double **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 16) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v6 = *(double **)(a1 + 32);
  v5 = *(double **)(a1 + 40);
  v7 = *(double **)(a2 + 32);
  if ((char *)v5 - (char *)v6 != *(_QWORD *)(a2 + 40) - (_QWORD)v7)
    return 0;
  while (v6 != v5)
  {
    if (*v6 != *v7)
      return 0;
    ++v6;
    ++v7;
  }
  v9 = *(_QWORD *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 64);
  v10 = *(double **)(a2 + 56);
  if (v8 - v9 != *(_QWORD *)(a2 + 64) - (_QWORD)v10)
    return 0;
  if (v9 == v8)
    return 1;
  v11 = v9 + 8;
  do
  {
    v12 = *v10++;
    result = *(double *)(v11 - 8) == v12;
    v14 = *(double *)(v11 - 8) != v12 || v11 == v8;
    v11 += 8;
  }
  while (!v14);
  return result;
}

CMMsl::CV3DSLAMState *CMMsl::AppleCV3DSLAMState::hash_value(CMMsl::AppleCV3DSLAMState *this)
{
  CMMsl::CV3DSLAMState *result;

  result = (CMMsl::CV3DSLAMState *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::CV3DSLAMState *)CMMsl::CV3DSLAMState::hash_value(result);
  return result;
}

_QWORD *CMMsl::AppleCV3DSLAMState::makeSuper(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135CBF0;
    *(_DWORD *)(v2 + 88) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_QWORD *)(v2 + 72) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

double CMMsl::AudioAccessoryDeviceMotion::AudioAccessoryDeviceMotion(CMMsl::AudioAccessoryDeviceMotion *this)
{
  double result;

  *(_QWORD *)this = &off_25135C598;
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 27) = 0;
  *((_DWORD *)this + 29) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_25135C598;
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 27) = 0;
  *((_DWORD *)this + 29) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

void CMMsl::AudioAccessoryDeviceMotion::~AudioAccessoryDeviceMotion(CMMsl::AudioAccessoryDeviceMotion *this)
{
  uint64_t v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_25135C598;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::AudioAccessoryDeviceMotion::~AudioAccessoryDeviceMotion(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::AudioAccessoryDeviceMotion *CMMsl::AudioAccessoryDeviceMotion::AudioAccessoryDeviceMotion(CMMsl::AudioAccessoryDeviceMotion *this, const CMMsl::AudioAccessoryDeviceMotion *a2)
{
  _QWORD *v4;
  CMMsl::AuxiliaryDeviceMotion *v5;
  CMMsl::AuxiliaryDeviceMotion *v6;
  uint64_t v7;
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;
  char v12;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;

  *(_QWORD *)this = &off_25135C598;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (_QWORD *)((char *)this + 8);
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 27) = 0;
  *((_DWORD *)this + 29) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if (*((_QWORD *)a2 + 9))
  {
    v5 = (CMMsl::AuxiliaryDeviceMotion *)operator new();
    v6 = CMMsl::AuxiliaryDeviceMotion::AuxiliaryDeviceMotion(v5, *((const CMMsl::AuxiliaryDeviceMotion **)a2 + 9));
    v7 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if (this != a2)
    sub_242911380(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  v8 = *((_WORD *)a2 + 58);
  if ((v8 & 0x40) != 0)
  {
    v14 = *((_DWORD *)a2 + 24);
    *((_WORD *)this + 58) |= 0x40u;
    *((_DWORD *)this + 24) = v14;
    v8 = *((_WORD *)a2 + 58);
    if ((v8 & 0x20) == 0)
    {
LABEL_8:
      if ((v8 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_25;
    }
  }
  else if ((v8 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  v15 = *((_DWORD *)a2 + 23);
  *((_WORD *)this + 58) |= 0x20u;
  *((_DWORD *)this + 23) = v15;
  v8 = *((_WORD *)a2 + 58);
  if ((v8 & 0x10) == 0)
  {
LABEL_9:
    if ((v8 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  v16 = *((_DWORD *)a2 + 22);
  *((_WORD *)this + 58) |= 0x10u;
  *((_DWORD *)this + 22) = v16;
  v8 = *((_WORD *)a2 + 58);
  if ((v8 & 0x100) == 0)
  {
LABEL_10:
    if ((v8 & 2) == 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  v17 = *((_DWORD *)a2 + 26);
  *((_WORD *)this + 58) |= 0x100u;
  *((_DWORD *)this + 26) = v17;
  v8 = *((_WORD *)a2 + 58);
  if ((v8 & 2) == 0)
  {
LABEL_11:
    if ((v8 & 0x200) == 0)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  v18 = *((_QWORD *)a2 + 8);
  *((_WORD *)this + 58) |= 2u;
  *((_QWORD *)this + 8) = v18;
  v8 = *((_WORD *)a2 + 58);
  if ((v8 & 0x200) == 0)
  {
LABEL_12:
    if ((v8 & 1) == 0)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  v19 = *((_DWORD *)a2 + 27);
  *((_WORD *)this + 58) |= 0x200u;
  *((_DWORD *)this + 27) = v19;
  v8 = *((_WORD *)a2 + 58);
  if ((v8 & 1) == 0)
  {
LABEL_13:
    if ((v8 & 8) == 0)
      goto LABEL_14;
    goto LABEL_30;
  }
LABEL_29:
  v20 = *((_QWORD *)a2 + 7);
  *((_WORD *)this + 58) |= 1u;
  *((_QWORD *)this + 7) = v20;
  v8 = *((_WORD *)a2 + 58);
  if ((v8 & 8) == 0)
  {
LABEL_14:
    if ((v8 & 0x80) == 0)
      goto LABEL_16;
    goto LABEL_15;
  }
LABEL_30:
  v21 = *((_DWORD *)a2 + 21);
  *((_WORD *)this + 58) |= 8u;
  *((_DWORD *)this + 21) = v21;
  if ((*((_WORD *)a2 + 58) & 0x80) != 0)
  {
LABEL_15:
    v9 = *((_DWORD *)a2 + 25);
    *((_WORD *)this + 58) |= 0x80u;
    *((_DWORD *)this + 25) = v9;
  }
LABEL_16:
  if (this != a2)
    sub_242911380((_QWORD *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
  v10 = *((_WORD *)a2 + 58);
  if ((v10 & 4) != 0)
  {
    v11 = *((_DWORD *)a2 + 20);
    *((_WORD *)this + 58) |= 4u;
    *((_DWORD *)this + 20) = v11;
    v10 = *((_WORD *)a2 + 58);
  }
  if ((v10 & 0x400) != 0)
  {
    v12 = *((_BYTE *)a2 + 112);
    *((_WORD *)this + 58) |= 0x400u;
    *((_BYTE *)this + 112) = v12;
  }
  return this;
}

CMMsl *CMMsl::AudioAccessoryDeviceMotion::operator=(CMMsl *a1, const CMMsl::AudioAccessoryDeviceMotion *a2)
{
  CMMsl::AudioAccessoryDeviceMotion *v3;
  _BYTE v5[120];

  if (a1 != a2)
  {
    CMMsl::AudioAccessoryDeviceMotion::AudioAccessoryDeviceMotion((CMMsl::AudioAccessoryDeviceMotion *)v5, a2);
    CMMsl::swap(a1, (CMMsl::AudioAccessoryDeviceMotion *)v5, v3);
    CMMsl::AudioAccessoryDeviceMotion::~AudioAccessoryDeviceMotion((CMMsl::AudioAccessoryDeviceMotion *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::AudioAccessoryDeviceMotion *a2, CMMsl::AudioAccessoryDeviceMotion *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float result;

  v3 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v3;
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  v8 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v8;
  LODWORD(v7) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v7;
  LODWORD(v7) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v7;
  v9 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v9;
  v10 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v10;
  v11 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v11;
  v12 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v12;
  v14 = *((_QWORD *)this + 6);
  v13 = *((_QWORD *)this + 7);
  v15 = *((_QWORD *)a2 + 7);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)this + 7) = v15;
  LODWORD(v9) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v9;
  result = *((float *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((float *)a2 + 25) = result;
  *((_QWORD *)a2 + 6) = v14;
  *((_QWORD *)a2 + 7) = v13;
  LODWORD(v13) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 112);
  *((_BYTE *)this + 112) = *((_BYTE *)a2 + 112);
  *((_BYTE *)a2 + 112) = v13;
  return result;
}

uint64_t CMMsl::AudioAccessoryDeviceMotion::AudioAccessoryDeviceMotion(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_OWORD *)(a1 + 8) = 0u;
  v4 = a1 + 8;
  *(_QWORD *)a1 = &off_25135C598;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 108) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a2 + 116) = 0;
  v5 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  v6 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  sub_242911330(v4, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  sub_242911330(a1 + 32, (__n128 *)(a2 + 32));
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  return a1;
}

CMMsl *CMMsl::AudioAccessoryDeviceMotion::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::AudioAccessoryDeviceMotion *v3;
  _BYTE v5[120];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::AudioAccessoryDeviceMotion::AudioAccessoryDeviceMotion((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::AudioAccessoryDeviceMotion *)v5, v3);
    CMMsl::AudioAccessoryDeviceMotion::~AudioAccessoryDeviceMotion((CMMsl::AudioAccessoryDeviceMotion *)v5);
  }
  return a1;
}

uint64_t CMMsl::AudioAccessoryDeviceMotion::formatText(CMMsl::AudioAccessoryDeviceMotion *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;
  float *v6;
  float *v7;
  float v8;
  float *v9;
  float *v10;
  float v11;
  __int16 v12;
  uint64_t v13;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 58);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "activity");
    v5 = *((_WORD *)this + 58);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "arrivalTimestamp", *((float *)this + 21));
  if ((*((_WORD *)this + 58) & 1) != 0)
LABEL_4:
    PB::TextFormatter::format(a2, "btcTimestamp");
LABEL_5:
  v6 = (float *)*((_QWORD *)this + 1);
  v7 = (float *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(a2, "filteredAcceleration", v8);
  }
  v9 = (float *)*((_QWORD *)this + 4);
  v10 = (float *)*((_QWORD *)this + 5);
  while (v9 != v10)
  {
    v11 = *v9++;
    PB::TextFormatter::format(a2, "gyroBias", v11);
  }
  v12 = *((_WORD *)this + 58);
  if ((v12 & 0x400) != 0)
  {
    PB::TextFormatter::format(a2, "isInEar");
    v12 = *((_WORD *)this + 58);
    if ((v12 & 0x10) == 0)
    {
LABEL_11:
      if ((v12 & 0x20) == 0)
        goto LABEL_12;
      goto LABEL_27;
    }
  }
  else if ((v12 & 0x10) == 0)
  {
    goto LABEL_11;
  }
  PB::TextFormatter::format(a2, "location");
  v12 = *((_WORD *)this + 58);
  if ((v12 & 0x20) == 0)
  {
LABEL_12:
    if ((v12 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "quiescentMode");
  v12 = *((_WORD *)this + 58);
  if ((v12 & 0x40) == 0)
  {
LABEL_13:
    if ((v12 & 0x80) == 0)
      goto LABEL_14;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "quiescentNoise", *((float *)this + 24));
  v12 = *((_WORD *)this + 58);
  if ((v12 & 0x80) == 0)
  {
LABEL_14:
    if ((v12 & 2) == 0)
      goto LABEL_15;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "sampleLatency", *((float *)this + 25));
  v12 = *((_WORD *)this + 58);
  if ((v12 & 2) == 0)
  {
LABEL_15:
    if ((v12 & 0x100) == 0)
      goto LABEL_17;
    goto LABEL_16;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "sensorTimeUponReceival", *((double *)this + 8));
  if ((*((_WORD *)this + 58) & 0x100) != 0)
LABEL_16:
    PB::TextFormatter::format(a2, "sequenceNumber");
LABEL_17:
  v13 = *((_QWORD *)this + 9);
  if (v13)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v13 + 32))(v13, a2, "super");
  if ((*((_WORD *)this + 58) & 0x200) != 0)
    PB::TextFormatter::format(a2, "timeSyncStatus");
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::AudioAccessoryDeviceMotion::readFrom(CMMsl::AudioAccessoryDeviceMotion *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  _DWORD *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char v75;
  unsigned int v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  _DWORD *v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  _DWORD *v93;
  int v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  char v99;
  unsigned int v100;
  uint64_t v101;
  unint64_t v102;
  char v103;
  unint64_t v104;
  unint64_t v105;
  int v106;
  BOOL v107;
  unint64_t v108;
  char *v109;
  _DWORD *v110;
  char v111;
  unsigned int v112;
  unint64_t v113;
  char v114;
  char v115;
  unsigned int v116;
  unint64_t v117;
  char v118;
  char v119;
  unsigned int v120;
  unint64_t v121;
  char v122;
  char v123;
  unsigned int v124;
  unint64_t v125;
  char v126;
  char v127;
  unsigned int v128;
  unint64_t v129;
  char v130;
  unint64_t v131;
  char *v132;
  char v133;
  unsigned int v134;
  unint64_t v135;
  char v136;
  char *v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  _DWORD *v149;
  int v150;
  _DWORD *v151;
  int v152;
  unint64_t v153;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (2)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_25:
      v20 = v11 & 7;
      if (v20 != 4)
      {
        switch((v11 >> 3))
        {
          case 1u:
            v21 = operator new();
            *(_QWORD *)v21 = &off_25135C5D0;
            *(_DWORD *)(v21 + 152) = 0;
            *(_OWORD *)(v21 + 8) = 0u;
            *(_OWORD *)(v21 + 24) = 0u;
            *(_OWORD *)(v21 + 40) = 0u;
            *(_OWORD *)(v21 + 56) = 0u;
            *(_OWORD *)(v21 + 72) = 0u;
            *(_OWORD *)(v21 + 88) = 0u;
            *(_OWORD *)(v21 + 104) = 0u;
            *(_QWORD *)(v21 + 120) = 0;
            v22 = *((_QWORD *)this + 9);
            *((_QWORD *)this + 9) = v21;
            if (v22)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
              v21 = *((_QWORD *)this + 9);
            }
            if (!PB::Reader::placeMark()
              || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v21 + 16))(v21, a2) & 1) == 0)
            {
              return 0;
            }
            goto LABEL_185;
          case 2u:
            if (v20 == 2)
            {
              if ((PB::Reader::placeMark() & 1) != 0)
                return 0;
              v23 = *((_QWORD *)a2 + 1);
              v24 = *((_QWORD *)a2 + 2);
              while (v23 < v24 && !*((_BYTE *)a2 + 24))
              {
                v26 = (char *)*((_QWORD *)this + 2);
                v25 = *((_QWORD *)this + 3);
                if ((unint64_t)v26 >= v25)
                {
                  v28 = (char *)*((_QWORD *)this + 1);
                  v29 = (v26 - v28) >> 2;
                  v30 = v29 + 1;
                  if ((unint64_t)(v29 + 1) >> 62)
                    goto LABEL_250;
                  v31 = v25 - (_QWORD)v28;
                  if (v31 >> 1 > v30)
                    v30 = v31 >> 1;
                  if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
                    v32 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v32 = v30;
                  if (v32)
                  {
                    v32 = (unint64_t)sub_2429114B8(v32);
                    v28 = (char *)*((_QWORD *)this + 1);
                    v26 = (char *)*((_QWORD *)this + 2);
                  }
                  else
                  {
                    v33 = 0;
                  }
                  v34 = (_DWORD *)(v32 + 4 * v29);
                  *v34 = 0;
                  v27 = v34 + 1;
                  while (v26 != v28)
                  {
                    v35 = *((_DWORD *)v26 - 1);
                    v26 -= 4;
                    *--v34 = v35;
                  }
                  *((_QWORD *)this + 1) = v34;
                  *((_QWORD *)this + 2) = v27;
                  *((_QWORD *)this + 3) = v32 + 4 * v33;
                  if (v28)
                    operator delete(v28);
                }
                else
                {
                  *(_DWORD *)v26 = 0;
                  v27 = v26 + 4;
                }
                *((_QWORD *)this + 2) = v27;
                v36 = *((_QWORD *)a2 + 1);
                if (v36 > 0xFFFFFFFFFFFFFFFBLL || v36 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_184;
                *(v27 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v36);
                v24 = *((_QWORD *)a2 + 2);
                v23 = *((_QWORD *)a2 + 1) + 4;
                *((_QWORD *)a2 + 1) = v23;
              }
              goto LABEL_185;
            }
            v109 = (char *)*((_QWORD *)this + 2);
            v108 = *((_QWORD *)this + 3);
            if ((unint64_t)v109 >= v108)
            {
              v137 = (char *)*((_QWORD *)this + 1);
              v138 = (v109 - v137) >> 2;
              v139 = v138 + 1;
              if ((unint64_t)(v138 + 1) >> 62)
                goto LABEL_250;
              v140 = v108 - (_QWORD)v137;
              if (v140 >> 1 > v139)
                v139 = v140 >> 1;
              if ((unint64_t)v140 >= 0x7FFFFFFFFFFFFFFCLL)
                v141 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v141 = v139;
              if (v141)
              {
                v141 = (unint64_t)sub_2429114B8(v141);
                v137 = (char *)*((_QWORD *)this + 1);
                v109 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v142 = 0;
              }
              v149 = (_DWORD *)(v141 + 4 * v138);
              *v149 = 0;
              v110 = v149 + 1;
              while (v109 != v137)
              {
                v150 = *((_DWORD *)v109 - 1);
                v109 -= 4;
                *--v149 = v150;
              }
              *((_QWORD *)this + 1) = v149;
              *((_QWORD *)this + 2) = v110;
              *((_QWORD *)this + 3) = v141 + 4 * v142;
              if (v137)
                operator delete(v137);
            }
            else
            {
              *(_DWORD *)v109 = 0;
              v110 = v109 + 4;
            }
            *((_QWORD *)this + 2) = v110;
            goto LABEL_240;
          case 3u:
            *((_WORD *)this + 58) |= 0x40u;
            v37 = *((_QWORD *)a2 + 1);
            if (v37 > 0xFFFFFFFFFFFFFFFBLL || v37 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_242;
            *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v37);
            goto LABEL_244;
          case 4u:
            *((_WORD *)this + 58) |= 0x20u;
            v38 = *((_QWORD *)a2 + 1);
            v39 = *((_QWORD *)a2 + 2);
            v40 = *(_QWORD *)a2;
            if (v38 <= 0xFFFFFFFFFFFFFFF5 && v38 + 10 <= v39)
            {
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v44 = v38 + 1;
                *((_QWORD *)a2 + 1) = v38 + 1;
                v45 = *(_BYTE *)(v40 + v38);
                v43 |= (unint64_t)(v45 & 0x7F) << v41;
                if ((v45 & 0x80) == 0)
                  goto LABEL_210;
                v41 += 7;
                v38 = v44;
                v14 = v42++ > 8;
              }
              while (!v14);
LABEL_144:
              LODWORD(v43) = 0;
              goto LABEL_210;
            }
            v111 = 0;
            v112 = 0;
            v43 = 0;
            if (v39 <= v38)
              v39 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v39 == v38)
              {
                LODWORD(v43) = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v113 = v38 + 1;
                v114 = *(_BYTE *)(v40 + v38);
                *((_QWORD *)a2 + 1) = v113;
                v43 |= (unint64_t)(v114 & 0x7F) << v111;
                if (v114 < 0)
                {
                  v111 += 7;
                  v38 = v113;
                  v14 = v112++ > 8;
                  if (v14)
                    goto LABEL_144;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v43) = 0;
              }
              break;
            }
LABEL_210:
            *((_DWORD *)this + 23) = v43;
            goto LABEL_20;
          case 5u:
            *((_WORD *)this + 58) |= 0x10u;
            v46 = *((_QWORD *)a2 + 1);
            v47 = *((_QWORD *)a2 + 2);
            v48 = *(_QWORD *)a2;
            if (v46 <= 0xFFFFFFFFFFFFFFF5 && v46 + 10 <= v47)
            {
              v49 = 0;
              v50 = 0;
              v51 = 0;
              do
              {
                v52 = v46 + 1;
                *((_QWORD *)a2 + 1) = v46 + 1;
                v53 = *(_BYTE *)(v48 + v46);
                v51 |= (unint64_t)(v53 & 0x7F) << v49;
                if ((v53 & 0x80) == 0)
                  goto LABEL_213;
                v49 += 7;
                v46 = v52;
                v14 = v50++ > 8;
              }
              while (!v14);
LABEL_151:
              LODWORD(v51) = 0;
              goto LABEL_213;
            }
            v115 = 0;
            v116 = 0;
            v51 = 0;
            if (v47 <= v46)
              v47 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v47 == v46)
              {
                LODWORD(v51) = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v117 = v46 + 1;
                v118 = *(_BYTE *)(v48 + v46);
                *((_QWORD *)a2 + 1) = v117;
                v51 |= (unint64_t)(v118 & 0x7F) << v115;
                if (v118 < 0)
                {
                  v115 += 7;
                  v46 = v117;
                  v14 = v116++ > 8;
                  if (v14)
                    goto LABEL_151;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v51) = 0;
              }
              break;
            }
LABEL_213:
            *((_DWORD *)this + 22) = v51;
            goto LABEL_20;
          case 6u:
            *((_WORD *)this + 58) |= 0x100u;
            v54 = *((_QWORD *)a2 + 1);
            v55 = *((_QWORD *)a2 + 2);
            v56 = *(_QWORD *)a2;
            if (v54 <= 0xFFFFFFFFFFFFFFF5 && v54 + 10 <= v55)
            {
              v57 = 0;
              v58 = 0;
              v59 = 0;
              do
              {
                v60 = v54 + 1;
                *((_QWORD *)a2 + 1) = v54 + 1;
                v61 = *(_BYTE *)(v56 + v54);
                v59 |= (unint64_t)(v61 & 0x7F) << v57;
                if ((v61 & 0x80) == 0)
                  goto LABEL_216;
                v57 += 7;
                v54 = v60;
                v14 = v58++ > 8;
              }
              while (!v14);
LABEL_158:
              LODWORD(v59) = 0;
              goto LABEL_216;
            }
            v119 = 0;
            v120 = 0;
            v59 = 0;
            if (v55 <= v54)
              v55 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v55 == v54)
              {
                LODWORD(v59) = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v121 = v54 + 1;
                v122 = *(_BYTE *)(v56 + v54);
                *((_QWORD *)a2 + 1) = v121;
                v59 |= (unint64_t)(v122 & 0x7F) << v119;
                if (v122 < 0)
                {
                  v119 += 7;
                  v54 = v121;
                  v14 = v120++ > 8;
                  if (v14)
                    goto LABEL_158;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v59) = 0;
              }
              break;
            }
LABEL_216:
            *((_DWORD *)this + 26) = v59;
            goto LABEL_20;
          case 7u:
            *((_WORD *)this + 58) |= 2u;
            v62 = *((_QWORD *)a2 + 1);
            if (v62 > 0xFFFFFFFFFFFFFFF7 || v62 + 8 > *((_QWORD *)a2 + 2))
              goto LABEL_242;
            *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v62);
            v63 = *((_QWORD *)a2 + 1) + 8;
            goto LABEL_245;
          case 8u:
            *((_WORD *)this + 58) |= 0x200u;
            v64 = *((_QWORD *)a2 + 1);
            v65 = *((_QWORD *)a2 + 2);
            v66 = *(_QWORD *)a2;
            if (v64 <= 0xFFFFFFFFFFFFFFF5 && v64 + 10 <= v65)
            {
              v67 = 0;
              v68 = 0;
              v69 = 0;
              do
              {
                v70 = v64 + 1;
                *((_QWORD *)a2 + 1) = v64 + 1;
                v71 = *(_BYTE *)(v66 + v64);
                v69 |= (unint64_t)(v71 & 0x7F) << v67;
                if ((v71 & 0x80) == 0)
                  goto LABEL_219;
                v67 += 7;
                v64 = v70;
                v14 = v68++ > 8;
              }
              while (!v14);
LABEL_165:
              LODWORD(v69) = 0;
              goto LABEL_219;
            }
            v123 = 0;
            v124 = 0;
            v69 = 0;
            if (v65 <= v64)
              v65 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v65 == v64)
              {
                LODWORD(v69) = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v125 = v64 + 1;
                v126 = *(_BYTE *)(v66 + v64);
                *((_QWORD *)a2 + 1) = v125;
                v69 |= (unint64_t)(v126 & 0x7F) << v123;
                if (v126 < 0)
                {
                  v123 += 7;
                  v64 = v125;
                  v14 = v124++ > 8;
                  if (v14)
                    goto LABEL_165;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v69) = 0;
              }
              break;
            }
LABEL_219:
            *((_DWORD *)this + 27) = v69;
            goto LABEL_20;
          case 9u:
            *((_WORD *)this + 58) |= 1u;
            v72 = *((_QWORD *)a2 + 1);
            v73 = *((_QWORD *)a2 + 2);
            v74 = *(_QWORD *)a2;
            if (v72 <= 0xFFFFFFFFFFFFFFF5 && v72 + 10 <= v73)
            {
              v75 = 0;
              v76 = 0;
              v77 = 0;
              do
              {
                v78 = v72 + 1;
                *((_QWORD *)a2 + 1) = v72 + 1;
                v79 = *(_BYTE *)(v74 + v72);
                v77 |= (unint64_t)(v79 & 0x7F) << v75;
                if ((v79 & 0x80) == 0)
                  goto LABEL_222;
                v75 += 7;
                v72 = v78;
                v14 = v76++ > 8;
              }
              while (!v14);
LABEL_172:
              v77 = 0;
              goto LABEL_222;
            }
            v127 = 0;
            v128 = 0;
            v77 = 0;
            if (v73 <= v72)
              v73 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v73 == v72)
              {
                v77 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v129 = v72 + 1;
                v130 = *(_BYTE *)(v74 + v72);
                *((_QWORD *)a2 + 1) = v129;
                v77 |= (unint64_t)(v130 & 0x7F) << v127;
                if (v130 < 0)
                {
                  v127 += 7;
                  v72 = v129;
                  v14 = v128++ > 8;
                  if (v14)
                    goto LABEL_172;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  v77 = 0;
              }
              break;
            }
LABEL_222:
            *((_QWORD *)this + 7) = v77;
            goto LABEL_20;
          case 0xAu:
            *((_WORD *)this + 58) |= 8u;
            v80 = *((_QWORD *)a2 + 1);
            if (v80 > 0xFFFFFFFFFFFFFFFBLL || v80 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_242;
            *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v80);
            goto LABEL_244;
          case 0xBu:
            *((_WORD *)this + 58) |= 0x80u;
            v81 = *((_QWORD *)a2 + 1);
            if (v81 > 0xFFFFFFFFFFFFFFFBLL || v81 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_242;
            *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v81);
            goto LABEL_244;
          case 0xCu:
            if (v20 == 2)
            {
              if ((PB::Reader::placeMark() & 1) != 0)
                return 0;
              v82 = *((_QWORD *)a2 + 1);
              v83 = *((_QWORD *)a2 + 2);
              while (v82 < v83 && !*((_BYTE *)a2 + 24))
              {
                v85 = (char *)*((_QWORD *)this + 5);
                v84 = *((_QWORD *)this + 6);
                if ((unint64_t)v85 >= v84)
                {
                  v87 = (char *)*((_QWORD *)this + 4);
                  v88 = (v85 - v87) >> 2;
                  v89 = v88 + 1;
                  if ((unint64_t)(v88 + 1) >> 62)
                    goto LABEL_250;
                  v90 = v84 - (_QWORD)v87;
                  if (v90 >> 1 > v89)
                    v89 = v90 >> 1;
                  if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFFCLL)
                    v91 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v91 = v89;
                  if (v91)
                  {
                    v91 = (unint64_t)sub_2429114B8(v91);
                    v87 = (char *)*((_QWORD *)this + 4);
                    v85 = (char *)*((_QWORD *)this + 5);
                  }
                  else
                  {
                    v92 = 0;
                  }
                  v93 = (_DWORD *)(v91 + 4 * v88);
                  *v93 = 0;
                  v86 = v93 + 1;
                  while (v85 != v87)
                  {
                    v94 = *((_DWORD *)v85 - 1);
                    v85 -= 4;
                    *--v93 = v94;
                  }
                  *((_QWORD *)this + 4) = v93;
                  *((_QWORD *)this + 5) = v86;
                  *((_QWORD *)this + 6) = v91 + 4 * v92;
                  if (v87)
                    operator delete(v87);
                }
                else
                {
                  *(_DWORD *)v85 = 0;
                  v86 = v85 + 4;
                }
                *((_QWORD *)this + 5) = v86;
                v95 = *((_QWORD *)a2 + 1);
                if (v95 > 0xFFFFFFFFFFFFFFFBLL || v95 + 4 > *((_QWORD *)a2 + 2))
                {
LABEL_184:
                  *((_BYTE *)a2 + 24) = 1;
                  break;
                }
                *(v86 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v95);
                v83 = *((_QWORD *)a2 + 2);
                v82 = *((_QWORD *)a2 + 1) + 4;
                *((_QWORD *)a2 + 1) = v82;
              }
LABEL_185:
              PB::Reader::recallMark();
            }
            else
            {
              v132 = (char *)*((_QWORD *)this + 5);
              v131 = *((_QWORD *)this + 6);
              if ((unint64_t)v132 >= v131)
              {
                v143 = (char *)*((_QWORD *)this + 4);
                v144 = (v132 - v143) >> 2;
                v145 = v144 + 1;
                if ((unint64_t)(v144 + 1) >> 62)
LABEL_250:
                  sub_242729A44();
                v146 = v131 - (_QWORD)v143;
                if (v146 >> 1 > v145)
                  v145 = v146 >> 1;
                if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFFCLL)
                  v147 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v147 = v145;
                if (v147)
                {
                  v147 = (unint64_t)sub_2429114B8(v147);
                  v143 = (char *)*((_QWORD *)this + 4);
                  v132 = (char *)*((_QWORD *)this + 5);
                }
                else
                {
                  v148 = 0;
                }
                v151 = (_DWORD *)(v147 + 4 * v144);
                *v151 = 0;
                v110 = v151 + 1;
                while (v132 != v143)
                {
                  v152 = *((_DWORD *)v132 - 1);
                  v132 -= 4;
                  *--v151 = v152;
                }
                *((_QWORD *)this + 4) = v151;
                *((_QWORD *)this + 5) = v110;
                *((_QWORD *)this + 6) = v147 + 4 * v148;
                if (v143)
                  operator delete(v143);
              }
              else
              {
                *(_DWORD *)v132 = 0;
                v110 = v132 + 4;
              }
              *((_QWORD *)this + 5) = v110;
LABEL_240:
              v153 = *((_QWORD *)a2 + 1);
              if (v153 <= 0xFFFFFFFFFFFFFFFBLL && v153 + 4 <= *((_QWORD *)a2 + 2))
              {
                *(v110 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v153);
LABEL_244:
                v63 = *((_QWORD *)a2 + 1) + 4;
LABEL_245:
                *((_QWORD *)a2 + 1) = v63;
              }
              else
              {
LABEL_242:
                *((_BYTE *)a2 + 24) = 1;
              }
            }
LABEL_20:
            v2 = *((_QWORD *)a2 + 1);
            v3 = *((_QWORD *)a2 + 2);
            v4 = *((unsigned __int8 *)a2 + 24);
            if (v2 >= v3 || v4 != 0)
              return v4 == 0;
            continue;
          case 0xDu:
            *((_WORD *)this + 58) |= 4u;
            v96 = *((_QWORD *)a2 + 1);
            v97 = *((_QWORD *)a2 + 2);
            v98 = *(_QWORD *)a2;
            if (v96 <= 0xFFFFFFFFFFFFFFF5 && v96 + 10 <= v97)
            {
              v99 = 0;
              v100 = 0;
              v101 = 0;
              do
              {
                v102 = v96 + 1;
                *((_QWORD *)a2 + 1) = v96 + 1;
                v103 = *(_BYTE *)(v98 + v96);
                v101 |= (unint64_t)(v103 & 0x7F) << v99;
                if ((v103 & 0x80) == 0)
                  goto LABEL_225;
                v99 += 7;
                v96 = v102;
                v14 = v100++ > 8;
              }
              while (!v14);
LABEL_181:
              LODWORD(v101) = 0;
              goto LABEL_225;
            }
            v133 = 0;
            v134 = 0;
            v101 = 0;
            if (v97 <= v96)
              v97 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v97 == v96)
              {
                LODWORD(v101) = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v135 = v96 + 1;
                v136 = *(_BYTE *)(v98 + v96);
                *((_QWORD *)a2 + 1) = v135;
                v101 |= (unint64_t)(v136 & 0x7F) << v133;
                if (v136 < 0)
                {
                  v133 += 7;
                  v96 = v135;
                  v14 = v134++ > 8;
                  if (v14)
                    goto LABEL_181;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v101) = 0;
              }
              break;
            }
LABEL_225:
            *((_DWORD *)this + 20) = v101;
            goto LABEL_20;
          case 0xEu:
            *((_WORD *)this + 58) |= 0x400u;
            v104 = *((_QWORD *)a2 + 1);
            if (v104 >= *((_QWORD *)a2 + 2))
            {
              v107 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v105 = v104 + 1;
              v106 = *(unsigned __int8 *)(*(_QWORD *)a2 + v104);
              *((_QWORD *)a2 + 1) = v105;
              v107 = v106 != 0;
            }
            *((_BYTE *)this + 112) = v107;
            goto LABEL_20;
          default:
            goto LABEL_19;
        }
      }
      v4 = 0;
      return v4 == 0;
    }
    break;
  }
  v15 = 0;
  v16 = 0;
  v11 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v17 = v2 + 1;
    v18 = *(_BYTE *)(v8 + v2);
    *((_QWORD *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0)
      goto LABEL_25;
    v15 += 7;
    v2 = v17;
    v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  if ((PB::Reader::skip(a2) & 1) != 0)
    goto LABEL_20;
  return 0;
}

double CMMsl::AuxiliaryDeviceMotion::AuxiliaryDeviceMotion(CMMsl::AuxiliaryDeviceMotion *this)
{
  double result;

  *(_QWORD *)this = &off_25135C5D0;
  *((_DWORD *)this + 38) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_QWORD *)this + 15) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_25135C5D0;
  *((_DWORD *)this + 38) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_QWORD *)this + 15) = 0;
  return result;
}

uint64_t CMMsl::AudioAccessoryDeviceMotion::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  float *v5;
  float *v6;
  float v7;
  __int16 v8;
  float *v9;
  float *v10;
  float v11;
  __int16 v12;

  v3 = this;
  v4 = *(const PB::Base **)(this + 72);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = *(float **)(v3 + 8);
  v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7);
  }
  v8 = *(_WORD *)(v3 + 116);
  if ((v8 & 0x40) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 96));
    v8 = *(_WORD *)(v3 + 116);
    if ((v8 & 0x20) == 0)
    {
LABEL_8:
      if ((v8 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_25;
    }
  }
  else if ((v8 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  this = PB::Writer::writeVarInt(a2);
  v8 = *(_WORD *)(v3 + 116);
  if ((v8 & 0x10) == 0)
  {
LABEL_9:
    if ((v8 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::writeVarInt(a2);
  v8 = *(_WORD *)(v3 + 116);
  if ((v8 & 0x100) == 0)
  {
LABEL_10:
    if ((v8 & 2) == 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::writeVarInt(a2);
  v8 = *(_WORD *)(v3 + 116);
  if ((v8 & 2) == 0)
  {
LABEL_11:
    if ((v8 & 0x200) == 0)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  v8 = *(_WORD *)(v3 + 116);
  if ((v8 & 0x200) == 0)
  {
LABEL_12:
    if ((v8 & 1) == 0)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::writeVarInt(a2);
  v8 = *(_WORD *)(v3 + 116);
  if ((v8 & 1) == 0)
  {
LABEL_13:
    if ((v8 & 8) == 0)
      goto LABEL_14;
LABEL_30:
    this = PB::Writer::write(a2, *(float *)(v3 + 84));
    if ((*(_WORD *)(v3 + 116) & 0x80) == 0)
      goto LABEL_16;
    goto LABEL_15;
  }
LABEL_29:
  this = PB::Writer::writeVarInt(a2);
  v8 = *(_WORD *)(v3 + 116);
  if ((v8 & 8) != 0)
    goto LABEL_30;
LABEL_14:
  if ((v8 & 0x80) != 0)
LABEL_15:
    this = PB::Writer::write(a2, *(float *)(v3 + 100));
LABEL_16:
  v9 = *(float **)(v3 + 32);
  v10 = *(float **)(v3 + 40);
  while (v9 != v10)
  {
    v11 = *v9++;
    this = PB::Writer::write(a2, v11);
  }
  v12 = *(_WORD *)(v3 + 116);
  if ((v12 & 4) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v12 = *(_WORD *)(v3 + 116);
  }
  if ((v12 & 0x400) != 0)
    return PB::Writer::write(a2);
  return this;
}

BOOL CMMsl::AudioAccessoryDeviceMotion::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  float *v6;
  float *v7;
  float *v8;
  __int16 v9;
  __int16 v10;
  float *v11;
  float *v12;
  float *v13;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 72);
  v5 = *(_QWORD *)(a2 + 72);
  if (v4)
  {
    if (!v5 || !CMMsl::AuxiliaryDeviceMotion::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v7 = *(float **)(a1 + 8);
  v6 = *(float **)(a1 + 16);
  v8 = *(float **)(a2 + 8);
  if ((char *)v6 - (char *)v7 == *(_QWORD *)(a2 + 16) - (_QWORD)v8)
  {
    while (v7 != v6)
    {
      if (*v7 != *v8)
        return 0;
      ++v7;
      ++v8;
    }
    v9 = *(_WORD *)(a1 + 116);
    v10 = *(_WORD *)(a2 + 116);
    if ((v9 & 0x40) != 0)
    {
      if ((v10 & 0x40) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
        return 0;
    }
    else if ((v10 & 0x40) != 0)
    {
      return 0;
    }
    if ((v9 & 0x20) != 0)
    {
      if ((v10 & 0x20) == 0 || *(_DWORD *)(a1 + 92) != *(_DWORD *)(a2 + 92))
        return 0;
    }
    else if ((v10 & 0x20) != 0)
    {
      return 0;
    }
    if ((v9 & 0x10) != 0)
    {
      if ((v10 & 0x10) == 0 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88))
        return 0;
    }
    else if ((v10 & 0x10) != 0)
    {
      return 0;
    }
    if ((*(_WORD *)(a1 + 116) & 0x100) != 0)
    {
      if ((*(_WORD *)(a2 + 116) & 0x100) == 0 || *(_DWORD *)(a1 + 104) != *(_DWORD *)(a2 + 104))
        return 0;
    }
    else if ((*(_WORD *)(a2 + 116) & 0x100) != 0)
    {
      return 0;
    }
    if ((v9 & 2) != 0)
    {
      if ((v10 & 2) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
        return 0;
    }
    else if ((v10 & 2) != 0)
    {
      return 0;
    }
    if ((*(_WORD *)(a1 + 116) & 0x200) != 0)
    {
      if ((*(_WORD *)(a2 + 116) & 0x200) == 0 || *(_DWORD *)(a1 + 108) != *(_DWORD *)(a2 + 108))
        return 0;
    }
    else if ((*(_WORD *)(a2 + 116) & 0x200) != 0)
    {
      return 0;
    }
    if ((v9 & 1) != 0)
    {
      if ((v10 & 1) == 0 || *(_QWORD *)(a1 + 56) != *(_QWORD *)(a2 + 56))
        return 0;
    }
    else if ((v10 & 1) != 0)
    {
      return 0;
    }
    if ((v9 & 8) != 0)
    {
      if ((v10 & 8) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
        return 0;
    }
    else if ((v10 & 8) != 0)
    {
      return 0;
    }
    if ((v9 & 0x80) != 0)
    {
      if ((v10 & 0x80) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
        return 0;
    }
    else if ((v10 & 0x80) != 0)
    {
      return 0;
    }
    v12 = *(float **)(a1 + 32);
    v11 = *(float **)(a1 + 40);
    v13 = *(float **)(a2 + 32);
    if ((char *)v11 - (char *)v12 == *(_QWORD *)(a2 + 40) - (_QWORD)v13)
    {
      while (v12 != v11)
      {
        if (*v12 != *v13)
          return 0;
        ++v12;
        ++v13;
      }
      if ((v9 & 4) != 0)
      {
        if ((v10 & 4) == 0 || *(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80))
          return 0;
      }
      else if ((v10 & 4) != 0)
      {
        return 0;
      }
      result = (v10 & 0x400) == 0;
      if ((*(_WORD *)(a1 + 116) & 0x400) == 0)
        return result;
      if ((*(_WORD *)(a2 + 116) & 0x400) != 0 && *(unsigned __int8 *)(a1 + 112) == *(unsigned __int8 *)(a2 + 112))
        return 1;
    }
  }
  return 0;
}

BOOL CMMsl::AuxiliaryDeviceMotion::operator==(uint64_t a1, uint64_t a2)
{
  float *v2;
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  float *v14;
  float *v15;
  float *v16;
  _BOOL8 v17;

  if ((*(_BYTE *)(a1 + 152) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 152) & 2) == 0 || *(double *)(a1 + 136) != *(double *)(a2 + 136))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 152) & 2) != 0)
  {
    return 0;
  }
  v3 = *(float **)(a1 + 56);
  v2 = *(float **)(a1 + 64);
  v4 = *(float **)(a2 + 56);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 64) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v6 = *(float **)(a1 + 80);
  v5 = *(float **)(a1 + 88);
  v7 = *(float **)(a2 + 80);
  if ((char *)v5 - (char *)v6 != *(_QWORD *)(a2 + 88) - (_QWORD)v7)
    return 0;
  while (v6 != v5)
  {
    if (*v6 != *v7)
      return 0;
    ++v6;
    ++v7;
  }
  v9 = *(float **)(a1 + 32);
  v8 = *(float **)(a1 + 40);
  v10 = *(float **)(a2 + 32);
  if ((char *)v8 - (char *)v9 != *(_QWORD *)(a2 + 40) - (_QWORD)v10)
    return 0;
  while (v9 != v8)
  {
    if (*v9 != *v10)
      return 0;
    ++v9;
    ++v10;
  }
  v12 = *(float **)(a1 + 8);
  v11 = *(float **)(a1 + 16);
  v13 = *(float **)(a2 + 8);
  if ((char *)v11 - (char *)v12 != *(_QWORD *)(a2 + 16) - (_QWORD)v13)
    return 0;
  while (v12 != v11)
  {
    if (*v12 != *v13)
      return 0;
    ++v12;
    ++v13;
  }
  if ((*(_BYTE *)(a1 + 152) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 152) & 8) == 0 || *(_DWORD *)(a1 + 148) != *(_DWORD *)(a2 + 148))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 152) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 152) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 152) & 1) == 0 || *(_QWORD *)(a1 + 128) != *(_QWORD *)(a2 + 128))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 152) & 1) != 0)
  {
    return 0;
  }
  v15 = *(float **)(a1 + 104);
  v14 = *(float **)(a1 + 112);
  v16 = *(float **)(a2 + 104);
  if ((char *)v14 - (char *)v15 != *(_QWORD *)(a2 + 112) - (_QWORD)v16)
    return 0;
  while (v15 != v14)
  {
    if (*v15 != *v16)
      return 0;
    ++v15;
    ++v16;
  }
  v17 = (*(_BYTE *)(a2 + 152) & 4) == 0;
  if ((*(_BYTE *)(a1 + 152) & 4) != 0)
    return (*(_BYTE *)(a2 + 152) & 4) != 0 && *(_DWORD *)(a1 + 144) == *(_DWORD *)(a2 + 144);
  return v17;
}

uint64_t CMMsl::AudioAccessoryDeviceMotion::hash_value(CMMsl::AudioAccessoryDeviceMotion *this)
{
  CMMsl::AuxiliaryDeviceMotion *v2;
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v2 = (CMMsl::AuxiliaryDeviceMotion *)*((_QWORD *)this + 9);
  if (v2)
    v22 = CMMsl::AuxiliaryDeviceMotion::hash_value(v2);
  else
    v22 = 0;
  v3 = PBHashBytes();
  v4 = *((_WORD *)this + 58);
  if ((v4 & 0x40) != 0)
  {
    v13 = *((float *)this + 24);
    if (v13 == 0.0)
      v5 = 0;
    else
      v5 = LODWORD(v13);
    if ((v4 & 0x20) != 0)
    {
LABEL_6:
      v6 = *((unsigned int *)this + 23);
      if ((v4 & 0x10) != 0)
        goto LABEL_7;
      goto LABEL_23;
    }
  }
  else
  {
    v5 = 0;
    if ((v4 & 0x20) != 0)
      goto LABEL_6;
  }
  v6 = 0;
  if ((v4 & 0x10) != 0)
  {
LABEL_7:
    v7 = *((unsigned int *)this + 22);
    if ((*((_WORD *)this + 58) & 0x100) != 0)
      goto LABEL_8;
    goto LABEL_24;
  }
LABEL_23:
  v7 = 0;
  if ((*((_WORD *)this + 58) & 0x100) != 0)
  {
LABEL_8:
    v21 = *((unsigned int *)this + 26);
    if ((v4 & 2) != 0)
      goto LABEL_9;
LABEL_25:
    v8 = 0;
    if ((*((_WORD *)this + 58) & 0x200) != 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_24:
  v21 = 0;
  if ((v4 & 2) == 0)
    goto LABEL_25;
LABEL_9:
  if (*((double *)this + 8) == 0.0)
    v8 = 0;
  else
    v8 = *((_QWORD *)this + 8);
  if ((*((_WORD *)this + 58) & 0x200) != 0)
  {
LABEL_13:
    v9 = *((int *)this + 27);
    if ((v4 & 1) != 0)
      goto LABEL_14;
    goto LABEL_27;
  }
LABEL_26:
  v9 = 0;
  if ((v4 & 1) != 0)
  {
LABEL_14:
    v10 = *((_QWORD *)this + 7);
    if ((v4 & 8) != 0)
      goto LABEL_15;
    goto LABEL_28;
  }
LABEL_27:
  v10 = 0;
  if ((v4 & 8) != 0)
  {
LABEL_15:
    v11 = *((float *)this + 21);
    if (v11 == 0.0)
      v12 = 0;
    else
      v12 = LODWORD(v11);
    goto LABEL_29;
  }
LABEL_28:
  v12 = 0;
LABEL_29:
  v14 = v3;
  if ((v4 & 0x80) != 0)
  {
    v16 = *((float *)this + 25);
    if (v16 == 0.0)
      v15 = 0;
    else
      v15 = LODWORD(v16);
  }
  else
  {
    v15 = 0;
  }
  v17 = PBHashBytes();
  if ((*((_WORD *)this + 58) & 4) != 0)
    v18 = *((unsigned int *)this + 20);
  else
    v18 = 0;
  if ((*((_WORD *)this + 58) & 0x400) != 0)
    v19 = *((unsigned __int8 *)this + 112);
  else
    v19 = 0;
  return v14 ^ v22 ^ v5 ^ v6 ^ v7 ^ v21 ^ v8 ^ v9 ^ v10 ^ v12 ^ v15 ^ v17 ^ v18 ^ v19;
}

_QWORD *CMMsl::AudioAccessoryDeviceMotion::makeSuper(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[9])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135C5D0;
    *(_DWORD *)(v2 + 152) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_QWORD *)(v2 + 120) = 0;
    this = (_QWORD *)v1[9];
    v1[9] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void CMMsl::AuxiliaryDeviceMotion::~AuxiliaryDeviceMotion(CMMsl::AuxiliaryDeviceMotion *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)this = &off_25135C5D0;
  v2 = (void *)*((_QWORD *)this + 13);
  if (v2)
  {
    *((_QWORD *)this + 14) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 10);
  if (v3)
  {
    *((_QWORD *)this + 11) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 7);
  if (v4)
  {
    *((_QWORD *)this + 8) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 4);
  if (v5)
  {
    *((_QWORD *)this + 5) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 1);
  if (v6)
  {
    *((_QWORD *)this + 2) = v6;
    operator delete(v6);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::AuxiliaryDeviceMotion::~AuxiliaryDeviceMotion(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::AuxiliaryDeviceMotion *CMMsl::AuxiliaryDeviceMotion::AuxiliaryDeviceMotion(CMMsl::AuxiliaryDeviceMotion *this, const CMMsl::AuxiliaryDeviceMotion *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  int v10;

  *(_QWORD *)this = &off_25135C5D0;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (_QWORD *)((char *)this + 8);
  *(_OWORD *)((char *)this + 56) = 0u;
  v5 = (_QWORD *)((char *)this + 56);
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 38) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_QWORD *)this + 15) = 0;
  if ((*((_BYTE *)a2 + 152) & 2) != 0)
  {
    v6 = *((_QWORD *)a2 + 17);
    *((_BYTE *)this + 152) = 2;
    *((_QWORD *)this + 17) = v6;
  }
  if (this != a2)
  {
    sub_242911380(v5, *((char **)a2 + 7), *((char **)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 2);
    sub_242911380((_QWORD *)this + 10, *((char **)a2 + 10), *((char **)a2 + 11), (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 2);
    sub_242911380((_QWORD *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
    sub_242911380(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  }
  v7 = *((_BYTE *)a2 + 152);
  if ((v7 & 8) != 0)
  {
    v8 = *((_DWORD *)a2 + 37);
    *((_BYTE *)this + 152) |= 8u;
    *((_DWORD *)this + 37) = v8;
    v7 = *((_BYTE *)a2 + 152);
  }
  if ((v7 & 1) != 0)
  {
    v9 = *((_QWORD *)a2 + 16);
    *((_BYTE *)this + 152) |= 1u;
    *((_QWORD *)this + 16) = v9;
  }
  if (this != a2)
    sub_242911380((_QWORD *)this + 13, *((char **)a2 + 13), *((char **)a2 + 14), (uint64_t)(*((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13)) >> 2);
  if ((*((_BYTE *)a2 + 152) & 4) != 0)
  {
    v10 = *((_DWORD *)a2 + 36);
    *((_BYTE *)this + 152) |= 4u;
    *((_DWORD *)this + 36) = v10;
  }
  return this;
}

CMMsl *CMMsl::AuxiliaryDeviceMotion::operator=(CMMsl *a1, const CMMsl::AuxiliaryDeviceMotion *a2)
{
  CMMsl::AuxiliaryDeviceMotion *v3;
  _BYTE v5[160];

  if (a1 != a2)
  {
    CMMsl::AuxiliaryDeviceMotion::AuxiliaryDeviceMotion((CMMsl::AuxiliaryDeviceMotion *)v5, a2);
    CMMsl::swap(a1, (CMMsl::AuxiliaryDeviceMotion *)v5, v3);
    CMMsl::AuxiliaryDeviceMotion::~AuxiliaryDeviceMotion((CMMsl::AuxiliaryDeviceMotion *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::AuxiliaryDeviceMotion *a2, CMMsl::AuxiliaryDeviceMotion *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double result;

  v3 = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v3;
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v4;
  v5 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v5;
  v6 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v6;
  v7 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v7;
  v8 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v8;
  v9 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v9;
  v10 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v10;
  v11 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v11;
  v12 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v12;
  v13 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v13;
  v14 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v14;
  v15 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v15;
  LODWORD(v15) = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v15;
  v16 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v16;
  v17 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v17;
  v19 = *((_QWORD *)this + 15);
  v18 = *((_QWORD *)this + 16);
  v20 = *((_QWORD *)a2 + 16);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)this + 16) = v20;
  result = *((double *)this + 17);
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  *((double *)a2 + 17) = result;
  *((_QWORD *)a2 + 15) = v19;
  *((_QWORD *)a2 + 16) = v18;
  LODWORD(v18) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v18;
  return result;
}

uint64_t CMMsl::AuxiliaryDeviceMotion::AuxiliaryDeviceMotion(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = &off_25135C5D0;
  v4 = a1 + 32;
  v5 = a1 + 80;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  v6 = a1 + 104;
  *(_OWORD *)(a1 + 8) = 0u;
  v7 = a1 + 8;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  sub_242911330(a1 + 56, (__n128 *)(a2 + 56));
  sub_242911330(v5, (__n128 *)(a2 + 80));
  sub_242911330(v4, (__n128 *)(a2 + 32));
  sub_242911330(v7, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  sub_242911330(v6, (__n128 *)(a2 + 104));
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  return a1;
}

CMMsl *CMMsl::AuxiliaryDeviceMotion::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::AuxiliaryDeviceMotion *v3;
  _BYTE v5[160];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::AuxiliaryDeviceMotion::AuxiliaryDeviceMotion((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::AuxiliaryDeviceMotion *)v5, v3);
    CMMsl::AuxiliaryDeviceMotion::~AuxiliaryDeviceMotion((CMMsl::AuxiliaryDeviceMotion *)v5);
  }
  return a1;
}

uint64_t CMMsl::AuxiliaryDeviceMotion::formatText(CMMsl::AuxiliaryDeviceMotion *this, PB::TextFormatter *a2, const char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  float *v11;
  float *v12;
  float v13;
  float *v14;
  float *v15;
  float v16;
  char v17;
  float *v18;
  float *v19;
  float v20;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (float *)*((_QWORD *)this + 1);
  v6 = (float *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "acceleration", v7);
  }
  v8 = (float *)*((_QWORD *)this + 4);
  v9 = (float *)*((_QWORD *)this + 5);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(a2, "biasCovariance", v10);
  }
  v11 = (float *)*((_QWORD *)this + 7);
  v12 = (float *)*((_QWORD *)this + 8);
  while (v11 != v12)
  {
    v13 = *v11++;
    PB::TextFormatter::format(a2, "quaternion", v13);
  }
  v14 = (float *)*((_QWORD *)this + 10);
  v15 = (float *)*((_QWORD *)this + 11);
  while (v14 != v15)
  {
    v16 = *v14++;
    PB::TextFormatter::format(a2, "rotationRate", v16);
  }
  v17 = *((_BYTE *)this + 152);
  if ((v17 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "sensorTime");
    v17 = *((_BYTE *)this + 152);
    if ((v17 & 4) == 0)
    {
LABEL_11:
      if ((v17 & 8) == 0)
        goto LABEL_12;
      goto LABEL_19;
    }
  }
  else if ((*((_BYTE *)this + 152) & 4) == 0)
  {
    goto LABEL_11;
  }
  PB::TextFormatter::format(a2, "status");
  v17 = *((_BYTE *)this + 152);
  if ((v17 & 8) == 0)
  {
LABEL_12:
    if ((v17 & 2) == 0)
      goto LABEL_14;
    goto LABEL_13;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "statusDeprecated");
  if ((*((_BYTE *)this + 152) & 2) != 0)
LABEL_13:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 17));
LABEL_14:
  v18 = (float *)*((_QWORD *)this + 13);
  v19 = (float *)*((_QWORD *)this + 14);
  while (v18 != v19)
  {
    v20 = *v18++;
    PB::TextFormatter::format(a2, "userAcceleration", v20);
  }
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::AuxiliaryDeviceMotion::readFrom(CMMsl::AuxiliaryDeviceMotion *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  _DWORD *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  _DWORD *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  _DWORD *v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  _DWORD *v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  _DWORD *v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  _DWORD *v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char v82;
  unsigned int v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  char v90;
  unsigned int v91;
  uint64_t v92;
  unint64_t v93;
  char v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  char *v98;
  _DWORD *v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  _DWORD *v106;
  int v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  char v112;
  unsigned int v113;
  uint64_t v114;
  unint64_t v115;
  char v116;
  unint64_t v117;
  char *v118;
  _DWORD *v119;
  unint64_t v120;
  char *v121;
  unint64_t v122;
  char *v123;
  unint64_t v124;
  char *v125;
  char v126;
  unsigned int v127;
  unint64_t v128;
  char v129;
  char v130;
  unsigned int v131;
  unint64_t v132;
  char v133;
  unint64_t v134;
  char *v135;
  char v136;
  unsigned int v137;
  unint64_t v138;
  char v139;
  char *v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  _DWORD *v170;
  int v171;
  _DWORD *v172;
  int v173;
  _DWORD *v174;
  int v175;
  _DWORD *v176;
  int v177;
  _DWORD *v178;
  int v179;
  unint64_t v180;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (2)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_25:
      v20 = v11 & 7;
      if (v20 != 4)
      {
        switch((v11 >> 3))
        {
          case 1u:
            *((_BYTE *)this + 152) |= 2u;
            v21 = *((_QWORD *)a2 + 1);
            if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((_QWORD *)a2 + 2))
              goto LABEL_293;
            *((_QWORD *)this + 17) = *(_QWORD *)(*(_QWORD *)a2 + v21);
            v22 = *((_QWORD *)a2 + 1) + 8;
            goto LABEL_295;
          case 2u:
            if (v20 == 2)
            {
              if ((PB::Reader::placeMark() & 1) != 0)
                return 0;
              v23 = *((_QWORD *)a2 + 1);
              v24 = *((_QWORD *)a2 + 2);
              while (v23 < v24 && !*((_BYTE *)a2 + 24))
              {
                v26 = (char *)*((_QWORD *)this + 8);
                v25 = *((_QWORD *)this + 9);
                if ((unint64_t)v26 >= v25)
                {
                  v28 = (char *)*((_QWORD *)this + 7);
                  v29 = (v26 - v28) >> 2;
                  v30 = v29 + 1;
                  if ((unint64_t)(v29 + 1) >> 62)
                    goto LABEL_300;
                  v31 = v25 - (_QWORD)v28;
                  if (v31 >> 1 > v30)
                    v30 = v31 >> 1;
                  if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
                    v32 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v32 = v30;
                  if (v32)
                  {
                    v32 = (unint64_t)sub_2429114B8(v32);
                    v28 = (char *)*((_QWORD *)this + 7);
                    v26 = (char *)*((_QWORD *)this + 8);
                  }
                  else
                  {
                    v33 = 0;
                  }
                  v34 = (_DWORD *)(v32 + 4 * v29);
                  *v34 = 0;
                  v27 = v34 + 1;
                  while (v26 != v28)
                  {
                    v35 = *((_DWORD *)v26 - 1);
                    v26 -= 4;
                    *--v34 = v35;
                  }
                  *((_QWORD *)this + 7) = v34;
                  *((_QWORD *)this + 8) = v27;
                  *((_QWORD *)this + 9) = v32 + 4 * v33;
                  if (v28)
                    operator delete(v28);
                }
                else
                {
                  *(_DWORD *)v26 = 0;
                  v27 = v26 + 4;
                }
                *((_QWORD *)this + 8) = v27;
                v36 = *((_QWORD *)a2 + 1);
                if (v36 > 0xFFFFFFFFFFFFFFFBLL || v36 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_171;
                *(v27 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v36);
                v24 = *((_QWORD *)a2 + 2);
                v23 = *((_QWORD *)a2 + 1) + 4;
                *((_QWORD *)a2 + 1) = v23;
              }
              goto LABEL_172;
            }
            v118 = (char *)*((_QWORD *)this + 8);
            v117 = *((_QWORD *)this + 9);
            if ((unint64_t)v118 >= v117)
            {
              v140 = (char *)*((_QWORD *)this + 7);
              v141 = (v118 - v140) >> 2;
              v142 = v141 + 1;
              if ((unint64_t)(v141 + 1) >> 62)
                goto LABEL_300;
              v143 = v117 - (_QWORD)v140;
              if (v143 >> 1 > v142)
                v142 = v143 >> 1;
              if ((unint64_t)v143 >= 0x7FFFFFFFFFFFFFFCLL)
                v144 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v144 = v142;
              if (v144)
              {
                v144 = (unint64_t)sub_2429114B8(v144);
                v140 = (char *)*((_QWORD *)this + 7);
                v118 = (char *)*((_QWORD *)this + 8);
              }
              else
              {
                v145 = 0;
              }
              v170 = (_DWORD *)(v144 + 4 * v141);
              *v170 = 0;
              v119 = v170 + 1;
              while (v118 != v140)
              {
                v171 = *((_DWORD *)v118 - 1);
                v118 -= 4;
                *--v170 = v171;
              }
              *((_QWORD *)this + 7) = v170;
              *((_QWORD *)this + 8) = v119;
              *((_QWORD *)this + 9) = v144 + 4 * v145;
              if (v140)
                operator delete(v140);
            }
            else
            {
              *(_DWORD *)v118 = 0;
              v119 = v118 + 4;
            }
            *((_QWORD *)this + 8) = v119;
            goto LABEL_291;
          case 3u:
            if (v20 == 2)
            {
              if ((PB::Reader::placeMark() & 1) != 0)
                return 0;
              v37 = *((_QWORD *)a2 + 1);
              v38 = *((_QWORD *)a2 + 2);
              while (v37 < v38 && !*((_BYTE *)a2 + 24))
              {
                v40 = (char *)*((_QWORD *)this + 11);
                v39 = *((_QWORD *)this + 12);
                if ((unint64_t)v40 >= v39)
                {
                  v42 = (char *)*((_QWORD *)this + 10);
                  v43 = (v40 - v42) >> 2;
                  v44 = v43 + 1;
                  if ((unint64_t)(v43 + 1) >> 62)
                    goto LABEL_300;
                  v45 = v39 - (_QWORD)v42;
                  if (v45 >> 1 > v44)
                    v44 = v45 >> 1;
                  if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL)
                    v46 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v46 = v44;
                  if (v46)
                  {
                    v46 = (unint64_t)sub_2429114B8(v46);
                    v42 = (char *)*((_QWORD *)this + 10);
                    v40 = (char *)*((_QWORD *)this + 11);
                  }
                  else
                  {
                    v47 = 0;
                  }
                  v48 = (_DWORD *)(v46 + 4 * v43);
                  *v48 = 0;
                  v41 = v48 + 1;
                  while (v40 != v42)
                  {
                    v49 = *((_DWORD *)v40 - 1);
                    v40 -= 4;
                    *--v48 = v49;
                  }
                  *((_QWORD *)this + 10) = v48;
                  *((_QWORD *)this + 11) = v41;
                  *((_QWORD *)this + 12) = v46 + 4 * v47;
                  if (v42)
                    operator delete(v42);
                }
                else
                {
                  *(_DWORD *)v40 = 0;
                  v41 = v40 + 4;
                }
                *((_QWORD *)this + 11) = v41;
                v50 = *((_QWORD *)a2 + 1);
                if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_171;
                *(v41 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v50);
                v38 = *((_QWORD *)a2 + 2);
                v37 = *((_QWORD *)a2 + 1) + 4;
                *((_QWORD *)a2 + 1) = v37;
              }
              goto LABEL_172;
            }
            v121 = (char *)*((_QWORD *)this + 11);
            v120 = *((_QWORD *)this + 12);
            if ((unint64_t)v121 >= v120)
            {
              v146 = (char *)*((_QWORD *)this + 10);
              v147 = (v121 - v146) >> 2;
              v148 = v147 + 1;
              if ((unint64_t)(v147 + 1) >> 62)
                goto LABEL_300;
              v149 = v120 - (_QWORD)v146;
              if (v149 >> 1 > v148)
                v148 = v149 >> 1;
              if ((unint64_t)v149 >= 0x7FFFFFFFFFFFFFFCLL)
                v150 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v150 = v148;
              if (v150)
              {
                v150 = (unint64_t)sub_2429114B8(v150);
                v146 = (char *)*((_QWORD *)this + 10);
                v121 = (char *)*((_QWORD *)this + 11);
              }
              else
              {
                v151 = 0;
              }
              v172 = (_DWORD *)(v150 + 4 * v147);
              *v172 = 0;
              v119 = v172 + 1;
              while (v121 != v146)
              {
                v173 = *((_DWORD *)v121 - 1);
                v121 -= 4;
                *--v172 = v173;
              }
              *((_QWORD *)this + 10) = v172;
              *((_QWORD *)this + 11) = v119;
              *((_QWORD *)this + 12) = v150 + 4 * v151;
              if (v146)
                operator delete(v146);
            }
            else
            {
              *(_DWORD *)v121 = 0;
              v119 = v121 + 4;
            }
            *((_QWORD *)this + 11) = v119;
            goto LABEL_291;
          case 4u:
            if (v20 == 2)
            {
              if ((PB::Reader::placeMark() & 1) != 0)
                return 0;
              v51 = *((_QWORD *)a2 + 1);
              v52 = *((_QWORD *)a2 + 2);
              while (v51 < v52 && !*((_BYTE *)a2 + 24))
              {
                v54 = (char *)*((_QWORD *)this + 5);
                v53 = *((_QWORD *)this + 6);
                if ((unint64_t)v54 >= v53)
                {
                  v56 = (char *)*((_QWORD *)this + 4);
                  v57 = (v54 - v56) >> 2;
                  v58 = v57 + 1;
                  if ((unint64_t)(v57 + 1) >> 62)
                    goto LABEL_300;
                  v59 = v53 - (_QWORD)v56;
                  if (v59 >> 1 > v58)
                    v58 = v59 >> 1;
                  if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFFCLL)
                    v60 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v60 = v58;
                  if (v60)
                  {
                    v60 = (unint64_t)sub_2429114B8(v60);
                    v56 = (char *)*((_QWORD *)this + 4);
                    v54 = (char *)*((_QWORD *)this + 5);
                  }
                  else
                  {
                    v61 = 0;
                  }
                  v62 = (_DWORD *)(v60 + 4 * v57);
                  *v62 = 0;
                  v55 = v62 + 1;
                  while (v54 != v56)
                  {
                    v63 = *((_DWORD *)v54 - 1);
                    v54 -= 4;
                    *--v62 = v63;
                  }
                  *((_QWORD *)this + 4) = v62;
                  *((_QWORD *)this + 5) = v55;
                  *((_QWORD *)this + 6) = v60 + 4 * v61;
                  if (v56)
                    operator delete(v56);
                }
                else
                {
                  *(_DWORD *)v54 = 0;
                  v55 = v54 + 4;
                }
                *((_QWORD *)this + 5) = v55;
                v64 = *((_QWORD *)a2 + 1);
                if (v64 > 0xFFFFFFFFFFFFFFFBLL || v64 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_171;
                *(v55 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v64);
                v52 = *((_QWORD *)a2 + 2);
                v51 = *((_QWORD *)a2 + 1) + 4;
                *((_QWORD *)a2 + 1) = v51;
              }
              goto LABEL_172;
            }
            v123 = (char *)*((_QWORD *)this + 5);
            v122 = *((_QWORD *)this + 6);
            if ((unint64_t)v123 >= v122)
            {
              v152 = (char *)*((_QWORD *)this + 4);
              v153 = (v123 - v152) >> 2;
              v154 = v153 + 1;
              if ((unint64_t)(v153 + 1) >> 62)
                goto LABEL_300;
              v155 = v122 - (_QWORD)v152;
              if (v155 >> 1 > v154)
                v154 = v155 >> 1;
              if ((unint64_t)v155 >= 0x7FFFFFFFFFFFFFFCLL)
                v156 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v156 = v154;
              if (v156)
              {
                v156 = (unint64_t)sub_2429114B8(v156);
                v152 = (char *)*((_QWORD *)this + 4);
                v123 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v157 = 0;
              }
              v174 = (_DWORD *)(v156 + 4 * v153);
              *v174 = 0;
              v119 = v174 + 1;
              while (v123 != v152)
              {
                v175 = *((_DWORD *)v123 - 1);
                v123 -= 4;
                *--v174 = v175;
              }
              *((_QWORD *)this + 4) = v174;
              *((_QWORD *)this + 5) = v119;
              *((_QWORD *)this + 6) = v156 + 4 * v157;
              if (v152)
                operator delete(v152);
            }
            else
            {
              *(_DWORD *)v123 = 0;
              v119 = v123 + 4;
            }
            *((_QWORD *)this + 5) = v119;
            goto LABEL_291;
          case 5u:
            if (v20 == 2)
            {
              if ((PB::Reader::placeMark() & 1) != 0)
                return 0;
              v65 = *((_QWORD *)a2 + 1);
              v66 = *((_QWORD *)a2 + 2);
              while (v65 < v66 && !*((_BYTE *)a2 + 24))
              {
                v68 = (char *)*((_QWORD *)this + 2);
                v67 = *((_QWORD *)this + 3);
                if ((unint64_t)v68 >= v67)
                {
                  v70 = (char *)*((_QWORD *)this + 1);
                  v71 = (v68 - v70) >> 2;
                  v72 = v71 + 1;
                  if ((unint64_t)(v71 + 1) >> 62)
                    goto LABEL_300;
                  v73 = v67 - (_QWORD)v70;
                  if (v73 >> 1 > v72)
                    v72 = v73 >> 1;
                  if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL)
                    v74 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v74 = v72;
                  if (v74)
                  {
                    v74 = (unint64_t)sub_2429114B8(v74);
                    v70 = (char *)*((_QWORD *)this + 1);
                    v68 = (char *)*((_QWORD *)this + 2);
                  }
                  else
                  {
                    v75 = 0;
                  }
                  v76 = (_DWORD *)(v74 + 4 * v71);
                  *v76 = 0;
                  v69 = v76 + 1;
                  while (v68 != v70)
                  {
                    v77 = *((_DWORD *)v68 - 1);
                    v68 -= 4;
                    *--v76 = v77;
                  }
                  *((_QWORD *)this + 1) = v76;
                  *((_QWORD *)this + 2) = v69;
                  *((_QWORD *)this + 3) = v74 + 4 * v75;
                  if (v70)
                    operator delete(v70);
                }
                else
                {
                  *(_DWORD *)v68 = 0;
                  v69 = v68 + 4;
                }
                *((_QWORD *)this + 2) = v69;
                v78 = *((_QWORD *)a2 + 1);
                if (v78 > 0xFFFFFFFFFFFFFFFBLL || v78 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_171;
                *(v69 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v78);
                v66 = *((_QWORD *)a2 + 2);
                v65 = *((_QWORD *)a2 + 1) + 4;
                *((_QWORD *)a2 + 1) = v65;
              }
              goto LABEL_172;
            }
            v125 = (char *)*((_QWORD *)this + 2);
            v124 = *((_QWORD *)this + 3);
            if ((unint64_t)v125 >= v124)
            {
              v158 = (char *)*((_QWORD *)this + 1);
              v159 = (v125 - v158) >> 2;
              v160 = v159 + 1;
              if ((unint64_t)(v159 + 1) >> 62)
                goto LABEL_300;
              v161 = v124 - (_QWORD)v158;
              if (v161 >> 1 > v160)
                v160 = v161 >> 1;
              if ((unint64_t)v161 >= 0x7FFFFFFFFFFFFFFCLL)
                v162 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v162 = v160;
              if (v162)
              {
                v162 = (unint64_t)sub_2429114B8(v162);
                v158 = (char *)*((_QWORD *)this + 1);
                v125 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v163 = 0;
              }
              v176 = (_DWORD *)(v162 + 4 * v159);
              *v176 = 0;
              v119 = v176 + 1;
              while (v125 != v158)
              {
                v177 = *((_DWORD *)v125 - 1);
                v125 -= 4;
                *--v176 = v177;
              }
              *((_QWORD *)this + 1) = v176;
              *((_QWORD *)this + 2) = v119;
              *((_QWORD *)this + 3) = v162 + 4 * v163;
              if (v158)
                operator delete(v158);
            }
            else
            {
              *(_DWORD *)v125 = 0;
              v119 = v125 + 4;
            }
            *((_QWORD *)this + 2) = v119;
            goto LABEL_291;
          case 6u:
            *((_BYTE *)this + 152) |= 8u;
            v79 = *((_QWORD *)a2 + 1);
            v80 = *((_QWORD *)a2 + 2);
            v81 = *(_QWORD *)a2;
            if (v79 <= 0xFFFFFFFFFFFFFFF5 && v79 + 10 <= v80)
            {
              v82 = 0;
              v83 = 0;
              v84 = 0;
              do
              {
                v85 = v79 + 1;
                *((_QWORD *)a2 + 1) = v79 + 1;
                v86 = *(_BYTE *)(v81 + v79);
                v84 |= (unint64_t)(v86 & 0x7F) << v82;
                if ((v86 & 0x80) == 0)
                  goto LABEL_249;
                v82 += 7;
                v79 = v85;
                v14 = v83++ > 8;
              }
              while (!v14);
LABEL_187:
              LODWORD(v84) = 0;
              goto LABEL_249;
            }
            v126 = 0;
            v127 = 0;
            v84 = 0;
            if (v80 <= v79)
              v80 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v80 == v79)
              {
                LODWORD(v84) = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v128 = v79 + 1;
                v129 = *(_BYTE *)(v81 + v79);
                *((_QWORD *)a2 + 1) = v128;
                v84 |= (unint64_t)(v129 & 0x7F) << v126;
                if (v129 < 0)
                {
                  v126 += 7;
                  v79 = v128;
                  v14 = v127++ > 8;
                  if (v14)
                    goto LABEL_187;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v84) = 0;
              }
              break;
            }
LABEL_249:
            *((_DWORD *)this + 37) = v84;
            goto LABEL_20;
          case 7u:
            *((_BYTE *)this + 152) |= 1u;
            v87 = *((_QWORD *)a2 + 1);
            v88 = *((_QWORD *)a2 + 2);
            v89 = *(_QWORD *)a2;
            if (v87 <= 0xFFFFFFFFFFFFFFF5 && v87 + 10 <= v88)
            {
              v90 = 0;
              v91 = 0;
              v92 = 0;
              do
              {
                v93 = v87 + 1;
                *((_QWORD *)a2 + 1) = v87 + 1;
                v94 = *(_BYTE *)(v89 + v87);
                v92 |= (unint64_t)(v94 & 0x7F) << v90;
                if ((v94 & 0x80) == 0)
                  goto LABEL_252;
                v90 += 7;
                v87 = v93;
                v14 = v91++ > 8;
              }
              while (!v14);
LABEL_194:
              v92 = 0;
              goto LABEL_252;
            }
            v130 = 0;
            v131 = 0;
            v92 = 0;
            if (v88 <= v87)
              v88 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v88 == v87)
              {
                v92 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v132 = v87 + 1;
                v133 = *(_BYTE *)(v89 + v87);
                *((_QWORD *)a2 + 1) = v132;
                v92 |= (unint64_t)(v133 & 0x7F) << v130;
                if (v133 < 0)
                {
                  v130 += 7;
                  v87 = v132;
                  v14 = v131++ > 8;
                  if (v14)
                    goto LABEL_194;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  v92 = 0;
              }
              break;
            }
LABEL_252:
            *((_QWORD *)this + 16) = v92;
            goto LABEL_20;
          case 8u:
            if (v20 == 2)
            {
              if ((PB::Reader::placeMark() & 1) != 0)
                return 0;
              v95 = *((_QWORD *)a2 + 1);
              v96 = *((_QWORD *)a2 + 2);
              while (v95 < v96 && !*((_BYTE *)a2 + 24))
              {
                v98 = (char *)*((_QWORD *)this + 14);
                v97 = *((_QWORD *)this + 15);
                if ((unint64_t)v98 >= v97)
                {
                  v100 = (char *)*((_QWORD *)this + 13);
                  v101 = (v98 - v100) >> 2;
                  v102 = v101 + 1;
                  if ((unint64_t)(v101 + 1) >> 62)
                    goto LABEL_300;
                  v103 = v97 - (_QWORD)v100;
                  if (v103 >> 1 > v102)
                    v102 = v103 >> 1;
                  if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFFCLL)
                    v104 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v104 = v102;
                  if (v104)
                  {
                    v104 = (unint64_t)sub_2429114B8(v104);
                    v100 = (char *)*((_QWORD *)this + 13);
                    v98 = (char *)*((_QWORD *)this + 14);
                  }
                  else
                  {
                    v105 = 0;
                  }
                  v106 = (_DWORD *)(v104 + 4 * v101);
                  *v106 = 0;
                  v99 = v106 + 1;
                  while (v98 != v100)
                  {
                    v107 = *((_DWORD *)v98 - 1);
                    v98 -= 4;
                    *--v106 = v107;
                  }
                  *((_QWORD *)this + 13) = v106;
                  *((_QWORD *)this + 14) = v99;
                  *((_QWORD *)this + 15) = v104 + 4 * v105;
                  if (v100)
                    operator delete(v100);
                }
                else
                {
                  *(_DWORD *)v98 = 0;
                  v99 = v98 + 4;
                }
                *((_QWORD *)this + 14) = v99;
                v108 = *((_QWORD *)a2 + 1);
                if (v108 > 0xFFFFFFFFFFFFFFFBLL || v108 + 4 > *((_QWORD *)a2 + 2))
                {
LABEL_171:
                  *((_BYTE *)a2 + 24) = 1;
                  break;
                }
                *(v99 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v108);
                v96 = *((_QWORD *)a2 + 2);
                v95 = *((_QWORD *)a2 + 1) + 4;
                *((_QWORD *)a2 + 1) = v95;
              }
LABEL_172:
              PB::Reader::recallMark();
            }
            else
            {
              v135 = (char *)*((_QWORD *)this + 14);
              v134 = *((_QWORD *)this + 15);
              if ((unint64_t)v135 >= v134)
              {
                v164 = (char *)*((_QWORD *)this + 13);
                v165 = (v135 - v164) >> 2;
                v166 = v165 + 1;
                if ((unint64_t)(v165 + 1) >> 62)
LABEL_300:
                  sub_242729A44();
                v167 = v134 - (_QWORD)v164;
                if (v167 >> 1 > v166)
                  v166 = v167 >> 1;
                if ((unint64_t)v167 >= 0x7FFFFFFFFFFFFFFCLL)
                  v168 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v168 = v166;
                if (v168)
                {
                  v168 = (unint64_t)sub_2429114B8(v168);
                  v164 = (char *)*((_QWORD *)this + 13);
                  v135 = (char *)*((_QWORD *)this + 14);
                }
                else
                {
                  v169 = 0;
                }
                v178 = (_DWORD *)(v168 + 4 * v165);
                *v178 = 0;
                v119 = v178 + 1;
                while (v135 != v164)
                {
                  v179 = *((_DWORD *)v135 - 1);
                  v135 -= 4;
                  *--v178 = v179;
                }
                *((_QWORD *)this + 13) = v178;
                *((_QWORD *)this + 14) = v119;
                *((_QWORD *)this + 15) = v168 + 4 * v169;
                if (v164)
                  operator delete(v164);
              }
              else
              {
                *(_DWORD *)v135 = 0;
                v119 = v135 + 4;
              }
              *((_QWORD *)this + 14) = v119;
LABEL_291:
              v180 = *((_QWORD *)a2 + 1);
              if (v180 <= 0xFFFFFFFFFFFFFFFBLL && v180 + 4 <= *((_QWORD *)a2 + 2))
              {
                *(v119 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v180);
                v22 = *((_QWORD *)a2 + 1) + 4;
LABEL_295:
                *((_QWORD *)a2 + 1) = v22;
              }
              else
              {
LABEL_293:
                *((_BYTE *)a2 + 24) = 1;
              }
            }
LABEL_20:
            v2 = *((_QWORD *)a2 + 1);
            v3 = *((_QWORD *)a2 + 2);
            v4 = *((unsigned __int8 *)a2 + 24);
            if (v2 >= v3 || v4 != 0)
              return v4 == 0;
            continue;
          case 9u:
            *((_BYTE *)this + 152) |= 4u;
            v109 = *((_QWORD *)a2 + 1);
            v110 = *((_QWORD *)a2 + 2);
            v111 = *(_QWORD *)a2;
            if (v109 <= 0xFFFFFFFFFFFFFFF5 && v109 + 10 <= v110)
            {
              v112 = 0;
              v113 = 0;
              v114 = 0;
              do
              {
                v115 = v109 + 1;
                *((_QWORD *)a2 + 1) = v109 + 1;
                v116 = *(_BYTE *)(v111 + v109);
                v114 |= (unint64_t)(v116 & 0x7F) << v112;
                if ((v116 & 0x80) == 0)
                  goto LABEL_255;
                v112 += 7;
                v109 = v115;
                v14 = v113++ > 8;
              }
              while (!v14);
LABEL_203:
              LODWORD(v114) = 0;
              goto LABEL_255;
            }
            v136 = 0;
            v137 = 0;
            v114 = 0;
            if (v110 <= v109)
              v110 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v110 == v109)
              {
                LODWORD(v114) = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v138 = v109 + 1;
                v139 = *(_BYTE *)(v111 + v109);
                *((_QWORD *)a2 + 1) = v138;
                v114 |= (unint64_t)(v139 & 0x7F) << v136;
                if (v139 < 0)
                {
                  v136 += 7;
                  v109 = v138;
                  v14 = v137++ > 8;
                  if (v14)
                    goto LABEL_203;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v114) = 0;
              }
              break;
            }
LABEL_255:
            *((_DWORD *)this + 36) = v114;
            goto LABEL_20;
          default:
            goto LABEL_19;
        }
      }
      v4 = 0;
      return v4 == 0;
    }
    break;
  }
  v15 = 0;
  v16 = 0;
  v11 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v17 = v2 + 1;
    v18 = *(_BYTE *)(v8 + v2);
    *((_QWORD *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0)
      goto LABEL_25;
    v15 += 7;
    v2 = v17;
    v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  if ((PB::Reader::skip(a2) & 1) != 0)
    goto LABEL_20;
  return 0;
}

uint64_t CMMsl::AuxiliaryDeviceMotion::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;
  float *v10;
  float *v11;
  float v12;
  float *v13;
  float *v14;
  float v15;
  char v16;
  float *v17;
  float *v18;
  float v19;

  v3 = this;
  if ((*(_BYTE *)(this + 152) & 2) != 0)
    this = PB::Writer::write(a2, *(double *)(this + 136));
  v4 = *(float **)(v3 + 56);
  v5 = *(float **)(v3 + 64);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6);
  }
  v7 = *(float **)(v3 + 80);
  v8 = *(float **)(v3 + 88);
  while (v7 != v8)
  {
    v9 = *v7++;
    this = PB::Writer::write(a2, v9);
  }
  v10 = *(float **)(v3 + 32);
  v11 = *(float **)(v3 + 40);
  while (v10 != v11)
  {
    v12 = *v10++;
    this = PB::Writer::write(a2, v12);
  }
  v13 = *(float **)(v3 + 8);
  v14 = *(float **)(v3 + 16);
  while (v13 != v14)
  {
    v15 = *v13++;
    this = PB::Writer::write(a2, v15);
  }
  v16 = *(_BYTE *)(v3 + 152);
  if ((v16 & 8) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v16 = *(_BYTE *)(v3 + 152);
  }
  if ((v16 & 1) != 0)
    this = PB::Writer::writeVarInt(a2);
  v17 = *(float **)(v3 + 104);
  v18 = *(float **)(v3 + 112);
  while (v17 != v18)
  {
    v19 = *v17++;
    this = PB::Writer::write(a2, v19);
  }
  if ((*(_BYTE *)(v3 + 152) & 4) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::AuxiliaryDeviceMotion::hash_value(CMMsl::AuxiliaryDeviceMotion *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((*((_BYTE *)this + 152) & 2) != 0)
  {
    if (*((double *)this + 17) == 0.0)
      v2 = 0;
    else
      v2 = *((_QWORD *)this + 17);
  }
  else
  {
    v2 = 0;
  }
  v3 = PBHashBytes();
  v4 = PBHashBytes();
  v5 = PBHashBytes();
  v6 = PBHashBytes();
  if ((*((_BYTE *)this + 152) & 8) != 0)
  {
    v7 = *((unsigned int *)this + 37);
    if ((*((_BYTE *)this + 152) & 1) != 0)
      goto LABEL_8;
  }
  else
  {
    v7 = 0;
    if ((*((_BYTE *)this + 152) & 1) != 0)
    {
LABEL_8:
      v8 = *((_QWORD *)this + 16);
      goto LABEL_11;
    }
  }
  v8 = 0;
LABEL_11:
  v9 = PBHashBytes();
  if ((*((_BYTE *)this + 152) & 4) != 0)
    v10 = *((unsigned int *)this + 36);
  else
    v10 = 0;
  return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10;
}

uint64_t CMMsl::AveragedALSData::AveragedALSData(uint64_t this)
{
  *(_QWORD *)this = &off_25135C608;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135C608;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::AveragedALSData::~AveragedALSData(CMMsl::AveragedALSData *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::AveragedALSData::AveragedALSData(CMMsl::AveragedALSData *this, const CMMsl::AveragedALSData *a2)
{
  char v2;
  uint64_t v3;

  *(_QWORD *)this = &off_25135C608;
  *((_DWORD *)this + 5) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) == 0)
  {
    v2 = 2;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return *(float *)&v3;
    goto LABEL_5;
  }
  v3 = *((_QWORD *)a2 + 1);
  *((_BYTE *)this + 20) = 1;
  *((_QWORD *)this + 1) = v3;
  v2 = 3;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    LODWORD(v3) = *((_DWORD *)a2 + 4);
    *((_BYTE *)this + 20) = v2;
    *((_DWORD *)this + 4) = v3;
  }
  return *(float *)&v3;
}

{
  char v2;
  uint64_t v3;

  *(_QWORD *)this = &off_25135C608;
  *((_DWORD *)this + 5) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) == 0)
  {
    v2 = 2;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return *(float *)&v3;
    goto LABEL_5;
  }
  v3 = *((_QWORD *)a2 + 1);
  *((_BYTE *)this + 20) = 1;
  *((_QWORD *)this + 1) = v3;
  v2 = 3;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    LODWORD(v3) = *((_DWORD *)a2 + 4);
    *((_BYTE *)this + 20) = v2;
    *((_DWORD *)this + 4) = v3;
  }
  return *(float *)&v3;
}

uint64_t CMMsl::AveragedALSData::operator=(uint64_t a1, uint64_t a2, double a3, float a4)
{
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  int v9;
  _QWORD v11[2];
  int v12;
  int v13;

  if (a1 != a2)
  {
    v11[0] = &off_25135C608;
    v13 = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      LOBYTE(v13) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        a4 = *(float *)(a2 + 16);
        LOBYTE(v13) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v13;
    v13 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    *(double *)(a1 + 8) = a3;
    v11[1] = v8;
    v9 = *(_DWORD *)(a1 + 16);
    *(float *)(a1 + 16) = a4;
    v12 = v9;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::AveragedALSData *a2, CMMsl::AveragedALSData *a3)
{
  int v3;
  uint64_t v4;
  float result;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  return result;
}

float CMMsl::AveragedALSData::AveragedALSData(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135C608;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_25135C608;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::AveragedALSData::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  _QWORD v9[2];
  int v10;
  int v11;

  if (a1 != a2)
  {
    v9[0] = &off_25135C608;
    v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_DWORD *)(a2 + 16);
    v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    v11 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v9[1] = v7;
    LODWORD(v4) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v5;
    v10 = v4;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::AveragedALSData::formatText(CMMsl::AveragedALSData *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "alsTrustedLux", *((float *)this + 4));
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "startTime", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AveragedALSData::readFrom(CMMsl::AveragedALSData *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          v14 = v16++ > 8;
          if (v14)
            goto LABEL_26;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_26;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_30;
        *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        v2 = *((_QWORD *)a2 + 1) + 4;
      }
      else
      {
        if ((v11 >> 3) != 1)
        {
LABEL_26:
          result = PB::Reader::skip(a2);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          goto LABEL_33;
        }
        *((_BYTE *)this + 20) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
        {
LABEL_30:
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_33;
        }
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        v2 = *((_QWORD *)a2 + 1) + 8;
      }
      *((_QWORD *)a2 + 1) = v2;
LABEL_33:
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::AveragedALSData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 16));
  return this;
}

BOOL CMMsl::AveragedALSData::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(float *)(a1 + 16) == *(float *)(a2 + 16);
  return v2;
}

uint64_t CMMsl::AveragedALSData::hash_value(CMMsl::AveragedALSData *this)
{
  double v1;
  float v2;
  uint64_t v3;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_9:
    v3 = 0;
    return v3 ^ *(_QWORD *)&v1;
  }
  v1 = 0.0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_9;
LABEL_3:
  v2 = *((float *)this + 4);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  return v3 ^ *(_QWORD *)&v1;
}

uint64_t CMMsl::BTConnection::BTConnection(uint64_t this)
{
  *(_QWORD *)this = &off_25135C640;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135C640;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

void CMMsl::BTConnection::~BTConnection(CMMsl::BTConnection *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::BTConnection::BTConnection(uint64_t this, const CMMsl::BTConnection *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)this = &off_25135C640;
  *(_DWORD *)(this + 28) = 0;
  v2 = *((_BYTE *)a2 + 28);
  if ((v2 & 2) != 0)
  {
    v4 = *((_QWORD *)a2 + 2);
    v3 = 2;
    *(_BYTE *)(this + 28) = 2;
    *(_QWORD *)(this + 16) = v4;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 28) & 1) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 1);
    v3 |= 1u;
    *(_BYTE *)(this + 28) = v3;
    *(_QWORD *)(this + 8) = v5;
    v2 = *((_BYTE *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *((_BYTE *)a2 + 24);
    *(_BYTE *)(this + 28) = v3 | 4;
    *(_BYTE *)(this + 24) = v6;
  }
  return this;
}

uint64_t CMMsl::BTConnection::operator=(uint64_t a1, uint64_t a2, double a3, double a4)
{
  char v4;
  char v6;
  char v7;
  int v8;
  __int128 v9;
  void (**v11)(CMMsl::BTConnection *__hidden);
  __int128 v12;
  char v13;
  int v14;

  if (a1 != a2)
  {
    v11 = &off_25135C640;
    v14 = 0;
    v6 = *(_BYTE *)(a2 + 28);
    if ((v6 & 2) != 0)
    {
      a3 = *(double *)(a2 + 16);
      v7 = 2;
      LOBYTE(v14) = 2;
      if ((v6 & 1) != 0)
      {
LABEL_4:
        a4 = *(double *)(a2 + 8);
        v7 |= 1u;
        LOBYTE(v14) = v7;
        if ((v6 & 4) != 0)
          goto LABEL_8;
        goto LABEL_9;
      }
    }
    else
    {
      v7 = 0;
      if ((*(_BYTE *)(a2 + 28) & 1) != 0)
        goto LABEL_4;
    }
    if ((v6 & 4) != 0)
    {
LABEL_8:
      v4 = *(_BYTE *)(a2 + 24);
      LOBYTE(v14) = v7 | 4;
    }
LABEL_9:
    v8 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v14;
    v14 = v8;
    v9 = *(_OWORD *)(a1 + 8);
    *(double *)(a1 + 8) = a4;
    *(double *)(a1 + 16) = a3;
    v12 = v9;
    LOBYTE(v8) = *(_BYTE *)(a1 + 24);
    *(_BYTE *)(a1 + 24) = v4;
    v13 = v8;
    PB::Base::~Base((PB::Base *)&v11);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::BTConnection *a2, CMMsl::BTConnection *a3)
{
  int v3;
  uint64_t v4;
  double result;

  v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  LOBYTE(v3) = *((_BYTE *)this + 24);
  *((_BYTE *)this + 24) = *((_BYTE *)a2 + 24);
  *((_BYTE *)a2 + 24) = v3;
  return result;
}

double CMMsl::BTConnection::BTConnection(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135C640;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135C640;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return result;
}

uint64_t CMMsl::BTConnection::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  __int128 v5;
  __int128 v6;
  void (**v8)(CMMsl::BTConnection *__hidden);
  __int128 v9;
  char v10;
  int v11;

  if (a1 != a2)
  {
    v8 = &off_25135C640;
    v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    v4 = *(_BYTE *)(a2 + 24);
    v11 = *(_DWORD *)(a1 + 28);
    v5 = *(_OWORD *)(a1 + 8);
    v6 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 28) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    v9 = v5;
    LOBYTE(v3) = *(_BYTE *)(a1 + 24);
    *(_BYTE *)(a1 + 24) = v4;
    v10 = v3;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::BTConnection::formatText(CMMsl::BTConnection *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 4) == 0)
  {
    if ((*((_BYTE *)this + 28) & 1) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(a2, "fEndTime", *((double *)this + 1));
    if ((*((_BYTE *)this + 28) & 2) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_4;
  }
  PB::TextFormatter::format(a2, "fConnected");
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 1) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 2) != 0)
LABEL_4:
    PB::TextFormatter::format(a2, "fStartTime", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BTConnection::readFrom(CMMsl::BTConnection *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t result;
  int v21;
  BOOL v22;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          v14 = v16++ > 8;
          if (v14)
            goto LABEL_27;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v19 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((_BYTE *)this + 28) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v22 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v21 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v22 = v21 != 0;
        }
        *((_BYTE *)this + 24) = v22;
        goto LABEL_38;
      }
      if ((_DWORD)v19 == 2)
      {
        *((_BYTE *)this + 28) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_33;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
      }
      else
      {
        if ((_DWORD)v19 != 1)
        {
LABEL_27:
          result = PB::Reader::skip(a2);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          goto LABEL_38;
        }
        *((_BYTE *)this + 28) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
        {
LABEL_33:
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_38;
        }
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
      }
      v2 = *((_QWORD *)a2 + 1) + 8;
      *((_QWORD *)a2 + 1) = v2;
LABEL_38:
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::BTConnection::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 28);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16));
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        return this;
      return PB::Writer::write(a2);
    }
  }
  else if ((*(_BYTE *)(this + 28) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  if ((*(_BYTE *)(v3 + 28) & 4) != 0)
    return PB::Writer::write(a2);
  return this;
}

BOOL CMMsl::BTConnection::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 28) & 4) == 0;
  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
    return (*(_BYTE *)(a2 + 28) & 4) != 0 && *(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24);
  return v2;
}

uint64_t CMMsl::BTConnection::hash_value(CMMsl::BTConnection *this)
{
  double v1;
  double v2;
  uint64_t v3;

  if ((*((_BYTE *)this + 28) & 2) != 0)
  {
    v1 = *((double *)this + 2);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 28) & 1) != 0)
    {
LABEL_3:
      v2 = *((double *)this + 1);
      if (v2 == 0.0)
        v2 = 0.0;
      if ((*((_BYTE *)this + 28) & 4) != 0)
        goto LABEL_6;
LABEL_11:
      v3 = 0;
      return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ v3;
    }
  }
  else
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 28) & 1) != 0)
      goto LABEL_3;
  }
  v2 = 0.0;
  if ((*((_BYTE *)this + 28) & 4) == 0)
    goto LABEL_11;
LABEL_6:
  v3 = *((unsigned __int8 *)this + 24);
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ v3;
}

uint64_t CMMsl::BacklightState::BacklightState(uint64_t this)
{
  *(_DWORD *)(this + 28) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = &off_25135C678;
  return this;
}

{
  *(_DWORD *)(this + 28) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = &off_25135C678;
  return this;
}

void CMMsl::BacklightState::~BacklightState(CMMsl::BacklightState *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_25135C678;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    sub_242910C5C(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    sub_242910C5C(v3);
  PB::Base::~Base(this);
}

{
  CMMsl::BacklightState::~BacklightState(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::BacklightState *CMMsl::BacklightState::BacklightState(CMMsl::BacklightState *this, const CMMsl::BacklightState *a2)
{
  uint64_t *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  __int128 v14;
  uint64_t v15;

  *(_QWORD *)this = &off_25135C678;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 7) = 0;
  *((_QWORD *)this + 2) = 0;
  if ((*((_BYTE *)a2 + 28) & 1) != 0)
  {
    v5 = *((_DWORD *)a2 + 6);
    *((_BYTE *)this + 28) = 1;
    *((_DWORD *)this + 6) = v5;
  }
  if (*((_QWORD *)a2 + 1))
  {
    v6 = operator new();
    v7 = v6;
    v8 = (__int128 *)*((_QWORD *)a2 + 1);
    if (*((char *)v8 + 23) < 0)
    {
      sub_242910CE8((_BYTE *)v6, *(void **)v8, *((_QWORD *)v8 + 1));
    }
    else
    {
      v9 = *v8;
      *(_QWORD *)(v6 + 16) = *((_QWORD *)v8 + 2);
      *(_OWORD *)v6 = v9;
    }
    v10 = *v4;
    *v4 = v7;
    if (v10)
      sub_242910C5C(v10);
  }
  if (*((_QWORD *)a2 + 2))
  {
    v11 = operator new();
    v12 = v11;
    v13 = (__int128 *)*((_QWORD *)a2 + 2);
    if (*((char *)v13 + 23) < 0)
    {
      sub_242910CE8((_BYTE *)v11, *(void **)v13, *((_QWORD *)v13 + 1));
    }
    else
    {
      v14 = *v13;
      *(_QWORD *)(v11 + 16) = *((_QWORD *)v13 + 2);
      *(_OWORD *)v11 = v14;
    }
    v15 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v12;
    if (v15)
      sub_242910C5C(v15);
  }
  return this;
}

uint64_t CMMsl::BacklightState::operator=(uint64_t a1, const CMMsl::BacklightState *a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  if ((const CMMsl::BacklightState *)a1 != a2)
  {
    CMMsl::BacklightState::BacklightState((CMMsl::BacklightState *)&v6, a2);
    v3 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v4;
    CMMsl::BacklightState::~BacklightState((CMMsl::BacklightState *)&v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::BacklightState *a2, CMMsl::BacklightState *a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_DWORD *)(this + 28);
  *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  v4 = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  v5 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  return this;
}

uint64_t CMMsl::BacklightState::BacklightState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_25135C678;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    sub_242910C5C(v5);
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  if (v7)
    sub_242910C5C(v7);
  return a1;
}

uint64_t CMMsl::BacklightState::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  if (a1 != a2)
  {
    CMMsl::BacklightState::BacklightState((uint64_t)&v6, a2);
    v3 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v4;
    CMMsl::BacklightState::~BacklightState((CMMsl::BacklightState *)&v6);
  }
  return a1;
}

uint64_t CMMsl::BacklightState::formatText(CMMsl::BacklightState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 28) & 1) != 0)
    PB::TextFormatter::format(a2, "backlightState");
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format();
  if (*((_QWORD *)this + 2))
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BacklightState::readFrom(CMMsl::BacklightState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int i;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t result;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  char v32;
  unsigned int v33;
  unint64_t v34;
  char v35;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  for (i = *((unsigned __int8 *)a2 + 24); v2 < v3 && i == 0; i = *((unsigned __int8 *)a2 + 24))
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_20;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
        if (v14)
          goto LABEL_31;
      }
      i = 1;
      *((_BYTE *)a2 + 24) = 1;
      return i == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_31;
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      i = 0;
      return i == 0;
    }
    v19 = v11 >> 3;
    if ((v11 >> 3) == 3)
    {
      v29 = (_QWORD *)operator new();
      v29[1] = 0;
      v29[2] = 0;
      *v29 = 0;
      v30 = *((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = v29;
      if (v30)
        goto LABEL_36;
    }
    else
    {
      if ((_DWORD)v19 != 2)
      {
        if ((_DWORD)v19 == 1)
        {
          *((_BYTE *)this + 28) |= 1u;
          v20 = *((_QWORD *)a2 + 1);
          v21 = *((_QWORD *)a2 + 2);
          v22 = *(_QWORD *)a2;
          if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v21)
          {
            v32 = 0;
            v33 = 0;
            v25 = 0;
            if (v21 <= v20)
              v21 = *((_QWORD *)a2 + 1);
            while (1)
            {
              if (v21 == v20)
              {
                LODWORD(v25) = 0;
                *((_BYTE *)a2 + 24) = 1;
                goto LABEL_48;
              }
              v34 = v20 + 1;
              v35 = *(_BYTE *)(v22 + v20);
              *((_QWORD *)a2 + 1) = v34;
              v25 |= (unint64_t)(v35 & 0x7F) << v32;
              if ((v35 & 0x80) == 0)
                break;
              v32 += 7;
              v20 = v34;
              v14 = v33++ > 8;
              if (v14)
              {
LABEL_44:
                LODWORD(v25) = 0;
                goto LABEL_48;
              }
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v25) = 0;
          }
          else
          {
            v23 = 0;
            v24 = 0;
            v25 = 0;
            while (1)
            {
              v26 = v20 + 1;
              *((_QWORD *)a2 + 1) = v20 + 1;
              v27 = *(_BYTE *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0)
                break;
              v23 += 7;
              v20 = v26;
              v14 = v24++ > 8;
              if (v14)
                goto LABEL_44;
            }
          }
LABEL_48:
          *((_DWORD *)this + 6) = v25;
        }
        else
        {
LABEL_31:
          result = PB::Reader::skip(a2);
          if (!(_DWORD)result)
            return result;
        }
        goto LABEL_49;
      }
      v31 = (_QWORD *)operator new();
      v31[1] = 0;
      v31[2] = 0;
      *v31 = 0;
      v30 = *((_QWORD *)this + 1);
      *((_QWORD *)this + 1) = v31;
      if (v30)
LABEL_36:
        sub_242910C5C(v30);
    }
    PB::Reader::read();
LABEL_49:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
  }
  return i == 0;
}

uint64_t CMMsl::BacklightState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v2;

  v2 = this;
  if ((*(_BYTE *)(this + 28) & 1) != 0)
    this = PB::Writer::writeVarInt(a2);
  if (*(_QWORD *)(v2 + 8))
    this = PB::Writer::write();
  if (*(_QWORD *)(v2 + 16))
    return PB::Writer::write();
  return this;
}

uint64_t CMMsl::BacklightState::operator==(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 **v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  uint64_t result;
  unsigned __int8 *v12;
  unsigned __int8 **v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  unsigned __int8 *v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  BOOL v25;

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    return 0;
  }
  v4 = *(unsigned __int8 **)(a1 + 8);
  v5 = *(unsigned __int8 ***)(a2 + 8);
  if (v4)
  {
    if (!v5)
      return 0;
    v6 = v4[23];
    if ((v6 & 0x80u) == 0)
      v7 = (unsigned __int8 *)v4[23];
    else
      v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
    v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    v9 = (char)v8;
    if ((char)v8 < 0)
      v8 = v5[1];
    if (v7 != v8)
      return 0;
    if (v9 >= 0)
      v10 = *(unsigned __int8 **)(a2 + 8);
    else
      v10 = *v5;
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((_QWORD *)v4 + 1)))
        return 0;
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6)
          goto LABEL_26;
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_26:
  v12 = *(unsigned __int8 **)(a1 + 16);
  v13 = *(unsigned __int8 ***)(a2 + 16);
  result = v13 == 0;
  if (!v12)
    return result;
  if (!v13)
    return 0;
  v14 = v12[23];
  if ((v14 & 0x80u) == 0)
    v15 = (unsigned __int8 *)v12[23];
  else
    v15 = (unsigned __int8 *)*((_QWORD *)v12 + 1);
  v16 = (unsigned __int8 *)*((unsigned __int8 *)v13 + 23);
  v17 = (char)v16;
  if ((char)v16 < 0)
    v16 = v13[1];
  if (v15 != v16)
    return 0;
  if (v17 >= 0)
    v18 = *(unsigned __int8 **)(a2 + 16);
  else
    v18 = *v13;
  if ((v14 & 0x80) != 0)
    return !memcmp(*(const void **)v12, v18, *((_QWORD *)v12 + 1));
  if (!v12[23])
    return 1;
  v19 = v14 - 1;
  do
  {
    v21 = *v12++;
    v20 = v21;
    v23 = *v18++;
    v22 = v23;
    v25 = v19-- != 0;
    result = v20 == v22;
  }
  while (v20 == v22 && v25);
  return result;
}

unint64_t CMMsl::BacklightState::hash_value(CMMsl::BacklightState *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if ((*((_BYTE *)this + 28) & 1) != 0)
    v2 = *((unsigned int *)this + 6);
  else
    v2 = 0;
  v3 = *((_QWORD *)this + 1);
  if (v3)
    v4 = sub_242910D74(v3);
  else
    v4 = 0;
  v5 = *((_QWORD *)this + 2);
  if (v5)
    v5 = sub_242910D74(v5);
  return v4 ^ v2 ^ v5;
}

uint64_t CMMsl::BasebandCompassCoex::BasebandCompassCoex(uint64_t this)
{
  *(_QWORD *)this = &off_25135C6B0;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135C6B0;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

void CMMsl::BasebandCompassCoex::~BasebandCompassCoex(CMMsl::BasebandCompassCoex *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::BasebandCompassCoex::BasebandCompassCoex(uint64_t this, const CMMsl::BasebandCompassCoex *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  char v6;
  int v7;

  *(_QWORD *)this = &off_25135C6B0;
  *(_DWORD *)(this + 28) = 0;
  v2 = *((_BYTE *)a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_BYTE *)(this + 28) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 28) & 4) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *(_BYTE *)(this + 28) = v3;
    *(_DWORD *)(this + 20) = v5;
    v2 = *((_BYTE *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0)
      return this;
LABEL_10:
    v7 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 28) = v3 | 2;
    *(_DWORD *)(this + 16) = v7;
    return this;
  }
  v6 = *((_BYTE *)a2 + 24);
  v3 |= 8u;
  *(_BYTE *)(this + 28) = v3;
  *(_BYTE *)(this + 24) = v6;
  if ((*((_BYTE *)a2 + 28) & 2) != 0)
    goto LABEL_10;
  return this;
}

uint64_t CMMsl::BasebandCompassCoex::operator=(uint64_t a1, const CMMsl::BasebandCompassCoex *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;

  if ((const CMMsl::BasebandCompassCoex *)a1 != a2)
  {
    CMMsl::BasebandCompassCoex::BasebandCompassCoex((uint64_t)&v8, a2);
    v3 = v10;
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v3;
    v6 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v12;
    v12 = v6;
    LOBYTE(v6) = *(_BYTE *)(a1 + 24);
    *(_BYTE *)(a1 + 24) = v11;
    v11 = v6;
    v9 = v4;
    v10 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::BasebandCompassCoex *a2, CMMsl::BasebandCompassCoex *a3)
{
  int v3;
  double result;
  int v5;
  int v6;

  v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  v5 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v5;
  LOBYTE(v5) = *((_BYTE *)this + 24);
  *((_BYTE *)this + 24) = *((_BYTE *)a2 + 24);
  *((_BYTE *)a2 + 24) = v5;
  v6 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v6;
  return result;
}

double CMMsl::BasebandCompassCoex::BasebandCompassCoex(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135C6B0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135C6B0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::BasebandCompassCoex::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _QWORD v9[3];
  char v10;
  int v11;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    v4 = *(_BYTE *)(a2 + 24);
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    v7 = *(_BYTE *)(a1 + 24);
    *(_BYTE *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    v9[0] = &off_25135C6B0;
    v11 = *(_DWORD *)(a1 + 28);
    v10 = v7;
    *(_DWORD *)(a1 + 28) = v3;
    v9[1] = v5;
    v9[2] = v6;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::BasebandCompassCoex::formatText(CMMsl::BasebandCompassCoex *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "inCoex");
    v5 = *((_BYTE *)this + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "subType");
      if ((*((_BYTE *)this + 28) & 1) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "reserved");
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 1) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BasebandCompassCoex::readFrom(CMMsl::BasebandCompassCoex *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  int v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_26;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_21;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_26:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 28) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 2u:
        *((_BYTE *)this + 28) |= 4u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v35 = 0;
          v36 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_68;
            }
            v37 = v21++;
            v38 = *(_BYTE *)(v22 + v37);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v38 & 0x7F) << v35;
            if ((v38 & 0x80) == 0)
              break;
            v35 += 7;
            v14 = v36++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
LABEL_67:
              v2 = v37 + 1;
              goto LABEL_68;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v25) = 0;
          goto LABEL_67;
        }
        v23 = 0;
        v24 = 0;
        v25 = 0;
        do
        {
          v2 = v21 + 1;
          *((_QWORD *)a2 + 1) = v21 + 1;
          v26 = *(_BYTE *)(v22 + v21);
          v25 |= (unint64_t)(v26 & 0x7F) << v23;
          if ((v26 & 0x80) == 0)
            goto LABEL_68;
          v23 += 7;
          v21 = v2;
          v14 = v24++ > 8;
        }
        while (!v14);
        LODWORD(v25) = 0;
LABEL_68:
        *((_DWORD *)this + 5) = v25;
        break;
      case 3u:
        *((_BYTE *)this + 28) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v28 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v27 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v28 = v27 != 0;
        }
        *((_BYTE *)this + 24) = v28;
        break;
      case 4u:
        *((_BYTE *)this + 28) |= 2u;
        v29 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v30 = *(_QWORD *)a2;
        if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
        {
          v39 = 0;
          v40 = 0;
          v33 = 0;
          if (v2 <= v29)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v29)
            {
              LODWORD(v33) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_73;
            }
            v41 = v29++;
            v42 = *(_BYTE *)(v30 + v41);
            *((_QWORD *)a2 + 1) = v29;
            v33 |= (unint64_t)(v42 & 0x7F) << v39;
            if ((v42 & 0x80) == 0)
              break;
            v39 += 7;
            v14 = v40++ > 8;
            if (v14)
            {
              LODWORD(v33) = 0;
LABEL_72:
              v2 = v41 + 1;
              goto LABEL_73;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v33) = 0;
          goto LABEL_72;
        }
        v31 = 0;
        v32 = 0;
        v33 = 0;
        do
        {
          v2 = v29 + 1;
          *((_QWORD *)a2 + 1) = v29 + 1;
          v34 = *(_BYTE *)(v30 + v29);
          v33 |= (unint64_t)(v34 & 0x7F) << v31;
          if ((v34 & 0x80) == 0)
            goto LABEL_73;
          v31 += 7;
          v29 = v2;
          v14 = v32++ > 8;
        }
        while (!v14);
        LODWORD(v33) = 0;
LABEL_73:
        *((_DWORD *)this + 4) = v33;
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::BasebandCompassCoex::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 28);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_8:
  this = PB::Writer::write(a2);
  if ((*(_BYTE *)(v3 + 28) & 2) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

BOOL CMMsl::BasebandCompassCoex::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 8) == 0 || *(unsigned __int8 *)(a1 + 24) != *(unsigned __int8 *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 8) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 28) & 2) == 0;
  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
    return (*(_BYTE *)(a2 + 28) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

uint64_t CMMsl::BasebandCompassCoex::hash_value(CMMsl::BasebandCompassCoex *this)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((*((_BYTE *)this + 28) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 28) & 4) != 0)
    {
LABEL_3:
      v2 = *((unsigned int *)this + 5);
      if ((*((_BYTE *)this + 28) & 8) != 0)
        goto LABEL_4;
LABEL_10:
      v3 = 0;
      if ((*((_BYTE *)this + 28) & 2) != 0)
        goto LABEL_5;
LABEL_11:
      v4 = 0;
      return v2 ^ *(_QWORD *)&v1 ^ v3 ^ v4;
    }
  }
  else
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 28) & 4) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 28) & 8) == 0)
    goto LABEL_10;
LABEL_4:
  v3 = *((unsigned __int8 *)this + 24);
  if ((*((_BYTE *)this + 28) & 2) == 0)
    goto LABEL_11;
LABEL_5:
  v4 = *((unsigned int *)this + 4);
  return v2 ^ *(_QWORD *)&v1 ^ v3 ^ v4;
}

uint64_t CMMsl::BasebandCompassCoexConstraints::BasebandCompassCoexConstraints(uint64_t this)
{
  *(_QWORD *)this = &off_25135C6E8;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135C6E8;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

void CMMsl::BasebandCompassCoexConstraints::~BasebandCompassCoexConstraints(CMMsl::BasebandCompassCoexConstraints *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::BasebandCompassCoexConstraints::BasebandCompassCoexConstraints(uint64_t this, const CMMsl::BasebandCompassCoexConstraints *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  char v8;
  char v9;
  char v10;
  int v11;
  int v12;
  int v13;
  char v14;

  *(_QWORD *)this = &off_25135C6E8;
  *(_DWORD *)(this + 48) = 0;
  v2 = *((_WORD *)a2 + 24);
  if ((v2 & 2) != 0)
  {
    v4 = *((_QWORD *)a2 + 2);
    v3 = 2;
    *(_WORD *)(this + 48) = 2;
    *(_QWORD *)(this + 16) = v4;
    v2 = *((_WORD *)a2 + 24);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 1) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 1);
    v3 |= 1u;
    *(_WORD *)(this + 48) = v3;
    *(_QWORD *)(this + 8) = v5;
    v2 = *((_WORD *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 0x40) != 0)
  {
    v6 = *((_DWORD *)a2 + 10);
    v3 |= 0x40u;
    *(_WORD *)(this + 48) = v3;
    *(_DWORD *)(this + 40) = v6;
    v2 = *((_WORD *)a2 + 24);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x400) == 0)
        goto LABEL_9;
      goto LABEL_18;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 28) = v7;
  v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x400) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  v8 = *((_BYTE *)a2 + 47);
  v3 |= 0x400u;
  *(_WORD *)(this + 48) = v3;
  *(_BYTE *)(this + 47) = v8;
  v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  v9 = *((_BYTE *)a2 + 45);
  v3 |= 0x100u;
  *(_WORD *)(this + 48) = v3;
  *(_BYTE *)(this + 45) = v9;
  v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_21;
  }
LABEL_20:
  v10 = *((_BYTE *)a2 + 44);
  v3 |= 0x80u;
  *(_WORD *)(this + 48) = v3;
  *(_BYTE *)(this + 44) = v10;
  v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x20) == 0)
  {
LABEL_12:
    if ((v2 & 0x10) == 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  v11 = *((_DWORD *)a2 + 9);
  v3 |= 0x20u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 36) = v11;
  v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x10) == 0)
  {
LABEL_13:
    if ((v2 & 4) == 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  v12 = *((_DWORD *)a2 + 8);
  v3 |= 0x10u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 32) = v12;
  v2 = *((_WORD *)a2 + 24);
  if ((v2 & 4) == 0)
  {
LABEL_14:
    if ((v2 & 0x200) == 0)
      return this;
LABEL_24:
    v14 = *((_BYTE *)a2 + 46);
    *(_WORD *)(this + 48) = v3 | 0x200;
    *(_BYTE *)(this + 46) = v14;
    return this;
  }
LABEL_23:
  v13 = *((_DWORD *)a2 + 6);
  v3 |= 4u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 24) = v13;
  if ((*((_WORD *)a2 + 24) & 0x200) != 0)
    goto LABEL_24;
  return this;
}

CMMsl *CMMsl::BasebandCompassCoexConstraints::operator=(CMMsl *a1, const CMMsl::BasebandCompassCoexConstraints *a2)
{
  CMMsl::BasebandCompassCoexConstraints *v3;
  _BYTE v5[56];

  if (a1 != a2)
  {
    CMMsl::BasebandCompassCoexConstraints::BasebandCompassCoexConstraints((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::BasebandCompassCoexConstraints *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::BasebandCompassCoexConstraints *a2, CMMsl::BasebandCompassCoexConstraints *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  float result;

  v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  LODWORD(v5) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v5;
  LODWORD(v5) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v5;
  LOBYTE(v3) = *((_BYTE *)this + 47);
  *((_BYTE *)this + 47) = *((_BYTE *)a2 + 47);
  *((_BYTE *)a2 + 47) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 45);
  *((_BYTE *)this + 45) = *((_BYTE *)a2 + 45);
  *((_BYTE *)a2 + 45) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 44);
  *((_BYTE *)this + 44) = *((_BYTE *)a2 + 44);
  *((_BYTE *)a2 + 44) = v3;
  v6 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v6;
  LODWORD(v5) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v5;
  result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  LOBYTE(v6) = *((_BYTE *)this + 46);
  *((_BYTE *)this + 46) = *((_BYTE *)a2 + 46);
  *((_BYTE *)a2 + 46) = v6;
  return result;
}

float CMMsl::BasebandCompassCoexConstraints::BasebandCompassCoexConstraints(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135C6E8;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_BYTE *)(a1 + 47) = *(_BYTE *)(a2 + 47);
  *(_BYTE *)(a1 + 45) = *(_BYTE *)(a2 + 45);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  *(_BYTE *)(a1 + 46) = *(_BYTE *)(a2 + 46);
  return result;
}

CMMsl *CMMsl::BasebandCompassCoexConstraints::operator=(CMMsl *this, uint64_t a2, CMMsl::BasebandCompassCoexConstraints *a3)
{
  void (**v5)(CMMsl::BasebandCompassCoexConstraints *__hidden);
  __int128 v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;

  if (this != (CMMsl *)a2)
  {
    v5 = &off_25135C6E8;
    v12 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a2 + 48) = 0;
    v6 = *(_OWORD *)(a2 + 8);
    v10 = *(_DWORD *)(a2 + 40);
    v9 = *(_DWORD *)(a2 + 36);
    v8 = *(_DWORD *)(a2 + 32);
    v7 = *(_QWORD *)(a2 + 24);
    v11 = *(_DWORD *)(a2 + 44);
    CMMsl::swap(this, (CMMsl::BasebandCompassCoexConstraints *)&v5, a3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return this;
}

uint64_t CMMsl::BasebandCompassCoexConstraints::formatText(CMMsl::BasebandCompassCoexConstraints *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 24);
  if ((v5 & 0x80) != 0)
  {
    PB::TextFormatter::format(a2, "activeCoex");
    v5 = *((_WORD *)this + 24);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "avgTemperature", *((float *)this + 6));
  v5 = *((_WORD *)this + 24);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "blackout");
  v5 = *((_WORD *)this + 24);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "gradient", *((float *)this + 7));
  v5 = *((_WORD *)this + 24);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x200) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "instTemperature", *((float *)this + 8));
  v5 = *((_WORD *)this + 24);
  if ((v5 & 0x200) == 0)
  {
LABEL_7:
    if ((v5 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "isSettle");
  v5 = *((_WORD *)this + 24);
  if ((v5 & 0x400) == 0)
  {
LABEL_8:
    if ((v5 & 1) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "rapidGradientChange");
  v5 = *((_WORD *)this + 24);
  if ((v5 & 1) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 1));
  v5 = *((_WORD *)this + 24);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0)
      goto LABEL_11;
LABEL_23:
    PB::TextFormatter::format(a2, "temperature", *((float *)this + 10));
    if ((*((_WORD *)this + 24) & 2) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "state");
  v5 = *((_WORD *)this + 24);
  if ((v5 & 0x40) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v5 & 2) != 0)
LABEL_12:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BasebandCompassCoexConstraints::readFrom(CMMsl::BasebandCompassCoexConstraints *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v20;
  BOOL v21;
  int v22;
  BOOL v23;
  int v24;
  BOOL v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  int v32;
  BOOL v33;
  char v34;
  unsigned int v35;
  unint64_t v36;
  char v37;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_80;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 24) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_54;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_29;
      case 2u:
        *((_WORD *)this + 24) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_54;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_29:
        v2 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_74;
      case 3u:
        *((_WORD *)this + 24) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_54;
        *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_73;
      case 4u:
        *((_WORD *)this + 24) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_54;
        *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_73;
      case 5u:
        *((_WORD *)this + 24) |= 0x400u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v21 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v21 = v20 != 0;
        }
        *((_BYTE *)this + 47) = v21;
        break;
      case 6u:
        *((_WORD *)this + 24) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v23 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v22 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v23 = v22 != 0;
        }
        *((_BYTE *)this + 45) = v23;
        break;
      case 7u:
        *((_WORD *)this + 24) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v25 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v24 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v25 = v24 != 0;
        }
        *((_BYTE *)this + 44) = v25;
        break;
      case 8u:
        *((_WORD *)this + 24) |= 0x20u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v34 = 0;
          v35 = 0;
          v30 = 0;
          if (v2 <= v26)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_79;
            }
            v36 = v26++;
            v37 = *(_BYTE *)(v27 + v36);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0)
              break;
            v34 += 7;
            v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_78:
              v2 = v36 + 1;
              goto LABEL_79;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v30) = 0;
          goto LABEL_78;
        }
        v28 = 0;
        v29 = 0;
        v30 = 0;
        do
        {
          v2 = v26 + 1;
          *((_QWORD *)a2 + 1) = v26 + 1;
          v31 = *(_BYTE *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0)
            goto LABEL_79;
          v28 += 7;
          v26 = v2;
          v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_79:
        *((_DWORD *)this + 9) = v30;
        break;
      case 9u:
        *((_WORD *)this + 24) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_54;
        *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_73;
      case 0xAu:
        *((_WORD *)this + 24) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_73:
          v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_74:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_54:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 0xBu:
        *((_WORD *)this + 24) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v33 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v32 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v33 = v32 != 0;
        }
        *((_BYTE *)this + 46) = v33;
        break;
      default:
        goto LABEL_19;
    }
LABEL_80:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::BasebandCompassCoexConstraints::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 48);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16));
    v4 = *(_WORD *)(v3 + 48);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v4 & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x400) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x400) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x20) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 4) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_11:
    if ((v4 & 0x200) == 0)
      return this;
    return PB::Writer::write(a2);
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  if ((*(_WORD *)(v3 + 48) & 0x200) != 0)
    return PB::Writer::write(a2);
  return this;
}

BOOL CMMsl::BasebandCompassCoexConstraints::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 48);
  v3 = *(_WORD *)(a2 + 48);
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 48) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 48) & 0x400) == 0 || *(unsigned __int8 *)(a1 + 47) != *(unsigned __int8 *)(a2 + 47))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 48) & 0x400) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 48) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 48) & 0x100) == 0 || *(unsigned __int8 *)(a1 + 45) != *(unsigned __int8 *)(a2 + 45))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 48) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(unsigned __int8 *)(a1 + 44) != *(unsigned __int8 *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x200) == 0;
  if ((*(_WORD *)(a1 + 48) & 0x200) != 0)
    return (*(_WORD *)(a2 + 48) & 0x200) != 0 && *(unsigned __int8 *)(a1 + 46) == *(unsigned __int8 *)(a2 + 46);
  return v4;
}

uint64_t CMMsl::BasebandCompassCoexConstraints::hash_value(CMMsl::BasebandCompassCoexConstraints *this)
{
  __int16 v1;
  double v2;
  double v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *((_WORD *)this + 24);
  if ((v1 & 2) == 0)
  {
    v2 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_3;
LABEL_26:
    v3 = 0.0;
    if ((v1 & 0x40) != 0)
      goto LABEL_6;
LABEL_27:
    v5 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_9;
LABEL_28:
    v7 = 0;
    if ((*((_WORD *)this + 24) & 0x400) != 0)
      goto LABEL_12;
    goto LABEL_29;
  }
  v2 = *((double *)this + 2);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_26;
LABEL_3:
  v3 = *((double *)this + 1);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 0x40) == 0)
    goto LABEL_27;
LABEL_6:
  v4 = *((float *)this + 10);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_28;
LABEL_9:
  v6 = *((float *)this + 7);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  if ((*((_WORD *)this + 24) & 0x400) != 0)
  {
LABEL_12:
    v8 = *((unsigned __int8 *)this + 47);
    if ((*((_WORD *)this + 24) & 0x100) != 0)
      goto LABEL_13;
    goto LABEL_30;
  }
LABEL_29:
  v8 = 0;
  if ((*((_WORD *)this + 24) & 0x100) != 0)
  {
LABEL_13:
    v9 = *((unsigned __int8 *)this + 45);
    if ((v1 & 0x80) != 0)
      goto LABEL_14;
    goto LABEL_31;
  }
LABEL_30:
  v9 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_14:
    v10 = *((unsigned __int8 *)this + 44);
    if ((v1 & 0x20) != 0)
      goto LABEL_15;
    goto LABEL_32;
  }
LABEL_31:
  v10 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_15:
    v11 = *((unsigned int *)this + 9);
    if ((v1 & 0x10) != 0)
      goto LABEL_16;
LABEL_33:
    v13 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_19;
    goto LABEL_34;
  }
LABEL_32:
  v11 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_33;
LABEL_16:
  v12 = *((float *)this + 8);
  v13 = LODWORD(v12);
  if (v12 == 0.0)
    v13 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_19:
    v14 = *((float *)this + 6);
    v15 = LODWORD(v14);
    if (v14 == 0.0)
      v15 = 0;
    if ((*((_WORD *)this + 24) & 0x200) != 0)
      goto LABEL_22;
LABEL_35:
    v16 = 0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ v5 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v13 ^ v15 ^ v16;
  }
LABEL_34:
  v15 = 0;
  if ((*((_WORD *)this + 24) & 0x200) == 0)
    goto LABEL_35;
LABEL_22:
  v16 = *((unsigned __int8 *)this + 46);
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ v5 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v13 ^ v15 ^ v16;
}

uint64_t CMMsl::BasebandSpeed::BasebandSpeed(uint64_t this)
{
  *(_QWORD *)this = &off_25135C720;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135C720;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::BasebandSpeed::~BasebandSpeed(CMMsl::BasebandSpeed *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::BasebandSpeed::BasebandSpeed(uint64_t this, const CMMsl::BasebandSpeed *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;

  *(_QWORD *)this = &off_25135C720;
  *(_DWORD *)(this + 32) = 0;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_BYTE *)(this + 32) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 32) & 0x10) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 7);
    v3 |= 0x10u;
    *(_BYTE *)(this + 32) = v3;
    *(_DWORD *)(this + 28) = v5;
    v2 = *((_BYTE *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    v6 = *((_DWORD *)a2 + 6);
    v3 |= 8u;
    *(_BYTE *)(this + 32) = v3;
    *(_DWORD *)(this + 24) = v6;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0)
        return this;
LABEL_12:
      v8 = *((_DWORD *)a2 + 4);
      *(_BYTE *)(this + 32) = v3 | 2;
      *(_DWORD *)(this + 16) = v8;
      return this;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *(_BYTE *)(this + 32) = v3;
  *(_DWORD *)(this + 20) = v7;
  if ((*((_BYTE *)a2 + 32) & 2) != 0)
    goto LABEL_12;
  return this;
}

uint64_t CMMsl::BasebandSpeed::operator=(uint64_t a1, const CMMsl::BasebandSpeed *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  _BYTE v7[8];
  uint64_t v8;
  __int128 v9;
  int v10;

  if ((const CMMsl::BasebandSpeed *)a1 != a2)
  {
    CMMsl::BasebandSpeed::BasebandSpeed((uint64_t)v7, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v8;
    v8 = v4;
    v5 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v9;
    v9 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::BasebandSpeed *a2, CMMsl::BasebandSpeed *a3)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(this + 32);
  *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 28);
  *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  return this;
}

uint64_t CMMsl::BasebandSpeed::BasebandSpeed(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = &off_25135C720;
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(result + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  *(_QWORD *)result = &off_25135C720;
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(result + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::BasebandSpeed::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  _QWORD v9[2];
  __int128 v10;
  int v11;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v11 = *(_DWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v9[0] = &off_25135C720;
    v9[1] = v5;
    v6 = *(_OWORD *)(a1 + 16);
    v7 = *(_OWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 16) = v7;
    v10 = v6;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::BasebandSpeed::formatText(CMMsl::BasebandSpeed *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "reserved");
    v5 = *((_BYTE *)this + 32);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((_BYTE *)this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "scaledValue");
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(a2, "speedThreshold");
    if ((*((_BYTE *)this + 32) & 1) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(a2, "speedRange");
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 0x10) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 1) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "timestamp");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BasebandSpeed::readFrom(CMMsl::BasebandSpeed *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  char v49;
  char v50;
  unsigned int v51;
  unint64_t v52;
  char v53;
  char v54;
  unsigned int v55;
  unint64_t v56;
  char v57;
  char v58;
  unsigned int v59;
  unint64_t v60;
  char v61;
  char v62;
  unsigned int v63;
  unint64_t v64;
  char v65;
  char v66;
  unsigned int v67;
  unint64_t v68;
  char v69;

  v3 = *((_QWORD *)a2 + 1);
  v2 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 >= v2 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v3 > v2)
        v2 = v3;
      do
      {
        if (v2 == v3)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v3 + 1;
        v18 = *(_BYTE *)(v8 + v3);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_24;
        v15 += 7;
        v3 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v3 = *((_QWORD *)a2 + 1);
      v2 = *((_QWORD *)a2 + 2);
      goto LABEL_21;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v3 + 1;
      *((_QWORD *)a2 + 1) = v3 + 1;
      v13 = *(_BYTE *)(v8 + v3);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v3 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_24:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 32) |= 1u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v50 = 0;
          v51 = 0;
          v24 = 0;
          if (v2 <= v20)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v20)
            {
              v24 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_105;
            }
            v52 = v20++;
            v53 = *(_BYTE *)(v21 + v52);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v53 & 0x7F) << v50;
            if ((v53 & 0x80) == 0)
              break;
            v50 += 7;
            v14 = v51++ > 8;
            if (v14)
            {
              v24 = 0;
LABEL_104:
              v3 = v52 + 1;
              goto LABEL_105;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v24 = 0;
          goto LABEL_104;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v3 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_105;
          v22 += 7;
          v20 = v3;
          v14 = v23++ > 8;
        }
        while (!v14);
        v24 = 0;
LABEL_105:
        *((_QWORD *)this + 1) = v24;
        break;
      case 2u:
        *((_BYTE *)this + 32) |= 0x10u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v54 = 0;
          v55 = 0;
          v30 = 0;
          if (v2 <= v26)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_110;
            }
            v56 = v26++;
            v57 = *(_BYTE *)(v27 + v56);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v57 & 0x7F) << v54;
            if ((v57 & 0x80) == 0)
              break;
            v54 += 7;
            v14 = v55++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_109:
              v3 = v56 + 1;
              goto LABEL_110;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v30) = 0;
          goto LABEL_109;
        }
        v28 = 0;
        v29 = 0;
        v30 = 0;
        do
        {
          v3 = v26 + 1;
          *((_QWORD *)a2 + 1) = v26 + 1;
          v31 = *(_BYTE *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0)
            goto LABEL_110;
          v28 += 7;
          v26 = v3;
          v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_110:
        *((_DWORD *)this + 7) = v30;
        break;
      case 3u:
        *((_BYTE *)this + 32) |= 8u;
        v32 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v33 = *(_QWORD *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
        {
          v58 = 0;
          v59 = 0;
          v36 = 0;
          if (v2 <= v32)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v32)
            {
              LODWORD(v36) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_115;
            }
            v60 = v32++;
            v61 = *(_BYTE *)(v33 + v60);
            *((_QWORD *)a2 + 1) = v32;
            v36 |= (unint64_t)(v61 & 0x7F) << v58;
            if ((v61 & 0x80) == 0)
              break;
            v58 += 7;
            v14 = v59++ > 8;
            if (v14)
            {
              LODWORD(v36) = 0;
LABEL_114:
              v3 = v60 + 1;
              goto LABEL_115;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v36) = 0;
          goto LABEL_114;
        }
        v34 = 0;
        v35 = 0;
        v36 = 0;
        do
        {
          v3 = v32 + 1;
          *((_QWORD *)a2 + 1) = v32 + 1;
          v37 = *(_BYTE *)(v33 + v32);
          v36 |= (unint64_t)(v37 & 0x7F) << v34;
          if ((v37 & 0x80) == 0)
            goto LABEL_115;
          v34 += 7;
          v32 = v3;
          v14 = v35++ > 8;
        }
        while (!v14);
        LODWORD(v36) = 0;
LABEL_115:
        *((_DWORD *)this + 6) = v36;
        break;
      case 4u:
        *((_BYTE *)this + 32) |= 4u;
        v38 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v39 = *(_QWORD *)a2;
        if (v38 > 0xFFFFFFFFFFFFFFF5 || v38 + 10 > v2)
        {
          v62 = 0;
          v63 = 0;
          v42 = 0;
          if (v2 <= v38)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v38)
            {
              LODWORD(v42) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_120;
            }
            v64 = v38++;
            v65 = *(_BYTE *)(v39 + v64);
            *((_QWORD *)a2 + 1) = v38;
            v42 |= (unint64_t)(v65 & 0x7F) << v62;
            if ((v65 & 0x80) == 0)
              break;
            v62 += 7;
            v14 = v63++ > 8;
            if (v14)
            {
              LODWORD(v42) = 0;
LABEL_119:
              v3 = v64 + 1;
              goto LABEL_120;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v42) = 0;
          goto LABEL_119;
        }
        v40 = 0;
        v41 = 0;
        v42 = 0;
        do
        {
          v3 = v38 + 1;
          *((_QWORD *)a2 + 1) = v38 + 1;
          v43 = *(_BYTE *)(v39 + v38);
          v42 |= (unint64_t)(v43 & 0x7F) << v40;
          if ((v43 & 0x80) == 0)
            goto LABEL_120;
          v40 += 7;
          v38 = v3;
          v14 = v41++ > 8;
        }
        while (!v14);
        LODWORD(v42) = 0;
LABEL_120:
        *((_DWORD *)this + 5) = v42;
        break;
      case 5u:
        *((_BYTE *)this + 32) |= 2u;
        v44 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v45 = *(_QWORD *)a2;
        if (v44 > 0xFFFFFFFFFFFFFFF5 || v44 + 10 > v2)
        {
          v66 = 0;
          v67 = 0;
          v48 = 0;
          if (v2 <= v44)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v44)
            {
              LODWORD(v48) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_125;
            }
            v68 = v44++;
            v69 = *(_BYTE *)(v45 + v68);
            *((_QWORD *)a2 + 1) = v44;
            v48 |= (unint64_t)(v69 & 0x7F) << v66;
            if ((v69 & 0x80) == 0)
              break;
            v66 += 7;
            v14 = v67++ > 8;
            if (v14)
            {
              LODWORD(v48) = 0;
LABEL_124:
              v3 = v68 + 1;
              goto LABEL_125;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v48) = 0;
          goto LABEL_124;
        }
        v46 = 0;
        v47 = 0;
        v48 = 0;
        do
        {
          v3 = v44 + 1;
          *((_QWORD *)a2 + 1) = v44 + 1;
          v49 = *(_BYTE *)(v45 + v44);
          v48 |= (unint64_t)(v49 & 0x7F) << v46;
          if ((v49 & 0x80) == 0)
            goto LABEL_125;
          v46 += 7;
          v44 = v3;
          v14 = v47++ > 8;
        }
        while (!v14);
        LODWORD(v48) = 0;
LABEL_125:
        *((_DWORD *)this + 4) = v48;
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v3 >= v2 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::BasebandSpeed::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(this + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_10:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

BOOL CMMsl::BasebandSpeed::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 0x10) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 8) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 32) & 2) == 0;
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
    return (*(_BYTE *)(a2 + 32) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

uint64_t CMMsl::BasebandSpeed::hash_value(CMMsl::BasebandSpeed *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((*((_BYTE *)this + 32) & 1) != 0)
  {
    v1 = *((_QWORD *)this + 1);
    if ((*((_BYTE *)this + 32) & 0x10) != 0)
    {
LABEL_3:
      v2 = *((unsigned int *)this + 7);
      if ((*((_BYTE *)this + 32) & 8) != 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v1 = 0;
    if ((*((_BYTE *)this + 32) & 0x10) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 32) & 8) != 0)
  {
LABEL_4:
    v3 = *((unsigned int *)this + 6);
    if ((*((_BYTE *)this + 32) & 4) != 0)
      goto LABEL_5;
LABEL_10:
    v4 = 0;
    if ((*((_BYTE *)this + 32) & 2) != 0)
      goto LABEL_6;
LABEL_11:
    v5 = 0;
    return v2 ^ v1 ^ v3 ^ v4 ^ v5;
  }
LABEL_9:
  v3 = 0;
  if ((*((_BYTE *)this + 32) & 4) == 0)
    goto LABEL_10;
LABEL_5:
  v4 = *((unsigned int *)this + 5);
  if ((*((_BYTE *)this + 32) & 2) == 0)
    goto LABEL_11;
LABEL_6:
  v5 = *((unsigned int *)this + 4);
  return v2 ^ v1 ^ v3 ^ v4 ^ v5;
}

uint64_t CMMsl::BaselineResetCheck::BaselineResetCheck(uint64_t this)
{
  *(_QWORD *)this = &off_25135C758;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135C758;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

void CMMsl::BaselineResetCheck::~BaselineResetCheck(CMMsl::BaselineResetCheck *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::BaselineResetCheck::BaselineResetCheck(CMMsl::BaselineResetCheck *this, const CMMsl::BaselineResetCheck *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  float result;

  *(_QWORD *)this = &off_25135C758;
  *((_DWORD *)this + 7) = 0;
  v2 = *((_BYTE *)a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 28) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 28) & 0x10) != 0)
  {
LABEL_5:
    v5 = *((_BYTE *)a2 + 25);
    v3 |= 0x10u;
    *((_BYTE *)this + 28) = v3;
    *((_BYTE *)this + 25) = v5;
    v2 = *((_BYTE *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    v6 = *((_BYTE *)a2 + 24);
    v3 |= 8u;
    *((_BYTE *)this + 28) = v3;
    *((_BYTE *)this + 24) = v6;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0)
        return result;
LABEL_12:
      result = *((float *)a2 + 4);
      *((_BYTE *)this + 28) = v3 | 2;
      *((float *)this + 4) = result;
      return result;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  result = *((float *)a2 + 5);
  v3 |= 4u;
  *((_BYTE *)this + 28) = v3;
  *((float *)this + 5) = result;
  if ((*((_BYTE *)a2 + 28) & 2) != 0)
    goto LABEL_12;
  return result;
}

uint64_t CMMsl::BaselineResetCheck::operator=(uint64_t a1, const CMMsl::BaselineResetCheck *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  int v11;

  if ((const CMMsl::BaselineResetCheck *)a1 != a2)
  {
    CMMsl::BaselineResetCheck::BaselineResetCheck((CMMsl::BaselineResetCheck *)&v7, a2);
    v3 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v11;
    v11 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v8;
    v8 = v4;
    LOWORD(v4) = *(_WORD *)(a1 + 24);
    *(_WORD *)(a1 + 24) = v10;
    v10 = v4;
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v9;
    v9 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::BaselineResetCheck *a2, CMMsl::BaselineResetCheck *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  float result;

  v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LOBYTE(v4) = *((_BYTE *)this + 25);
  *((_BYTE *)this + 25) = *((_BYTE *)a2 + 25);
  *((_BYTE *)a2 + 25) = v4;
  LOBYTE(v4) = *((_BYTE *)this + 24);
  *((_BYTE *)this + 24) = *((_BYTE *)a2 + 24);
  *((_BYTE *)a2 + 24) = v4;
  v5 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v5;
  result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  return result;
}

float CMMsl::BaselineResetCheck::BaselineResetCheck(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135C758;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_25135C758;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::BaselineResetCheck::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  __int16 v11;
  int v12;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_WORD *)(a2 + 24);
    v12 = *(_DWORD *)(a1 + 28);
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v10[0] = &off_25135C758;
    v10[1] = v6;
    LOWORD(v4) = *(_WORD *)(a1 + 24);
    *(_WORD *)(a1 + 24) = v5;
    v11 = v4;
    v7 = *(_QWORD *)(a1 + 16);
    v8 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 28) = v3;
    *(_QWORD *)(a1 + 16) = v8;
    v10[2] = v7;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::BaselineResetCheck::formatText(CMMsl::BaselineResetCheck *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "lux", *((float *)this + 4));
    v5 = *((_BYTE *)this + 28);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((_BYTE *)this + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "minPostSUIProx", *((float *)this + 5));
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(a2, "resetTriggered");
    if ((*((_BYTE *)this + 28) & 1) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(a2, "possibleObstructed");
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 0x10) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 1) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "timestamp");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BaselineResetCheck::readFrom(CMMsl::BaselineResetCheck *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  char v31;
  unsigned int v32;
  unint64_t v33;
  char v34;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_26;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_21;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_26:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 28) |= 1u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v31 = 0;
          v32 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v21)
            {
              v25 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_62;
            }
            v33 = v21++;
            v34 = *(_BYTE *)(v22 + v33);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v34 & 0x7F) << v31;
            if ((v34 & 0x80) == 0)
              break;
            v31 += 7;
            v14 = v32++ > 8;
            if (v14)
            {
              v25 = 0;
LABEL_61:
              v2 = v33 + 1;
              goto LABEL_62;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v25 = 0;
          goto LABEL_61;
        }
        v23 = 0;
        v24 = 0;
        v25 = 0;
        do
        {
          v2 = v21 + 1;
          *((_QWORD *)a2 + 1) = v21 + 1;
          v26 = *(_BYTE *)(v22 + v21);
          v25 |= (unint64_t)(v26 & 0x7F) << v23;
          if ((v26 & 0x80) == 0)
            goto LABEL_62;
          v23 += 7;
          v21 = v2;
          v14 = v24++ > 8;
        }
        while (!v14);
        v25 = 0;
LABEL_62:
        *((_QWORD *)this + 1) = v25;
        break;
      case 2u:
        *((_BYTE *)this + 28) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v28 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v27 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v28 = v27 != 0;
        }
        *((_BYTE *)this + 25) = v28;
        break;
      case 3u:
        *((_BYTE *)this + 28) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v30 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v29 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v30 = v29 != 0;
        }
        *((_BYTE *)this + 24) = v30;
        break;
      case 4u:
        *((_BYTE *)this + 28) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_44;
        *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_57;
      case 5u:
        *((_BYTE *)this + 28) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_57:
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_44:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::BaselineResetCheck::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 28);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(this + 28) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = PB::Writer::write(a2);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 16));
  }
LABEL_10:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  if ((*(_BYTE *)(v3 + 28) & 2) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 16));
  return this;
}

BOOL CMMsl::BaselineResetCheck::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 0x10) == 0 || *(unsigned __int8 *)(a1 + 25) != *(unsigned __int8 *)(a2 + 25))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 8) == 0 || *(unsigned __int8 *)(a1 + 24) != *(unsigned __int8 *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 28) & 2) == 0;
  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
    return (*(_BYTE *)(a2 + 28) & 2) != 0 && *(float *)(a1 + 16) == *(float *)(a2 + 16);
  return v2;
}

uint64_t CMMsl::BaselineResetCheck::hash_value(CMMsl::BaselineResetCheck *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;

  if ((*((_BYTE *)this + 28) & 1) != 0)
  {
    v1 = *((_QWORD *)this + 1);
    if ((*((_BYTE *)this + 28) & 0x10) != 0)
    {
LABEL_3:
      v2 = *((unsigned __int8 *)this + 25);
      if ((*((_BYTE *)this + 28) & 8) != 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else
  {
    v1 = 0;
    if ((*((_BYTE *)this + 28) & 0x10) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 28) & 8) != 0)
  {
LABEL_4:
    v3 = *((unsigned __int8 *)this + 24);
    if ((*((_BYTE *)this + 28) & 4) != 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  v3 = 0;
  if ((*((_BYTE *)this + 28) & 4) != 0)
  {
LABEL_5:
    v4 = *((float *)this + 5);
    v5 = LODWORD(v4);
    if (v4 == 0.0)
      v5 = 0;
    if ((*((_BYTE *)this + 28) & 2) != 0)
      goto LABEL_8;
LABEL_15:
    v7 = 0;
    return v2 ^ v1 ^ v3 ^ v5 ^ v7;
  }
LABEL_14:
  v5 = 0;
  if ((*((_BYTE *)this + 28) & 2) == 0)
    goto LABEL_15;
LABEL_8:
  v6 = *((float *)this + 4);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  return v2 ^ v1 ^ v3 ^ v5 ^ v7;
}

uint64_t CMMsl::BatchedLocationFromOdometer::BatchedLocationFromOdometer(uint64_t this)
{
  *(_QWORD *)this = &off_25135C790;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135C790;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::BatchedLocationFromOdometer::~BatchedLocationFromOdometer(CMMsl::BatchedLocationFromOdometer *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135C790;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135C790;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135C790;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::BatchedLocationFromOdometer *CMMsl::BatchedLocationFromOdometer::BatchedLocationFromOdometer(CMMsl::BatchedLocationFromOdometer *this, const CMMsl::MotionGPSLocation **a2)
{
  CMMsl::MotionGPSLocation *v4;
  CMMsl::MotionGPSLocation *v5;
  uint64_t v6;
  int v7;

  *(_QWORD *)this = &off_25135C790;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 5) = 0;
  if (a2[1])
  {
    v4 = (CMMsl::MotionGPSLocation *)operator new();
    v5 = CMMsl::MotionGPSLocation::MotionGPSLocation(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v7 = *((_DWORD *)a2 + 4);
    *((_BYTE *)this + 20) |= 1u;
    *((_DWORD *)this + 4) = v7;
  }
  return this;
}

uint64_t CMMsl::BatchedLocationFromOdometer::operator=(uint64_t a1, const CMMsl::MotionGPSLocation **a2)
{
  uint64_t v3;
  uint64_t v4;
  void (**v6)(CMMsl::BatchedLocationFromOdometer *__hidden);
  uint64_t v7;
  uint64_t v8;

  if ((const CMMsl::MotionGPSLocation **)a1 != a2)
  {
    CMMsl::BatchedLocationFromOdometer::BatchedLocationFromOdometer((CMMsl::BatchedLocationFromOdometer *)&v6, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v7;
    v4 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v8;
    v8 = v4;
    v6 = &off_25135C790;
    v7 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::BatchedLocationFromOdometer *a2, CMMsl::BatchedLocationFromOdometer *a3)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  return this;
}

uint64_t CMMsl::BatchedLocationFromOdometer::BatchedLocationFromOdometer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_25135C790;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_25135C790;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t CMMsl::BatchedLocationFromOdometer::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v4;
    v8[2] = v6;
    v8[0] = &off_25135C790;
    v8[1] = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::BatchedLocationFromOdometer::formatText(CMMsl::BatchedLocationFromOdometer *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 20) & 1) != 0)
    PB::TextFormatter::format(a2, "batchedLocationFixType");
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BatchedLocationFromOdometer::readFrom(CMMsl::BatchedLocationFromOdometer *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  unint64_t v32;
  char v33;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_28;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 1u;
        v22 = *((_QWORD *)a2 + 1);
        v23 = *((_QWORD *)a2 + 2);
        v24 = *(_QWORD *)a2;
        if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v23)
        {
          v30 = 0;
          v31 = 0;
          v27 = 0;
          if (v23 <= v22)
            v23 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v23 == v22)
            {
              LODWORD(v27) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_47;
            }
            v32 = v22 + 1;
            v33 = *(_BYTE *)(v24 + v22);
            *((_QWORD *)a2 + 1) = v32;
            v27 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0)
              break;
            v30 += 7;
            v22 = v32;
            v14 = v31++ > 8;
            if (v14)
            {
LABEL_43:
              LODWORD(v27) = 0;
              goto LABEL_47;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v27) = 0;
        }
        else
        {
          v25 = 0;
          v26 = 0;
          v27 = 0;
          while (1)
          {
            v28 = v22 + 1;
            *((_QWORD *)a2 + 1) = v22 + 1;
            v29 = *(_BYTE *)(v24 + v22);
            v27 |= (unint64_t)(v29 & 0x7F) << v25;
            if ((v29 & 0x80) == 0)
              break;
            v25 += 7;
            v22 = v28;
            v14 = v26++ > 8;
            if (v14)
              goto LABEL_43;
          }
        }
LABEL_47:
        *((_DWORD *)this + 4) = v27;
      }
      else if ((v11 >> 3) == 1)
      {
        v19 = operator new();
        *(_QWORD *)v19 = &off_25135F468;
        *(_QWORD *)(v19 + 112) = 0;
        *(_DWORD *)(v19 + 180) = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = *((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_28:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_28;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::MotionGPSLocation::MotionGPSLocation(uint64_t this)
{
  *(_QWORD *)this = &off_25135F468;
  *(_QWORD *)(this + 112) = 0;
  *(_DWORD *)(this + 180) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135F468;
  *(_QWORD *)(this + 112) = 0;
  *(_DWORD *)(this + 180) = 0;
  return this;
}

uint64_t CMMsl::BatchedLocationFromOdometer::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = this;
  v4 = *(const PB::Base **)(this + 8);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  if ((*(_BYTE *)(v3 + 20) & 1) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

BOOL CMMsl::BatchedLocationFromOdometer::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !CMMsl::MotionGPSLocation::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  result = (*(_BYTE *)(a2 + 20) & 1) == 0;
  if ((*(_BYTE *)(a1 + 20) & 1) == 0)
    return result;
  return (*(_BYTE *)(a2 + 20) & 1) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
}

BOOL CMMsl::MotionGPSLocation::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;
  int v9;
  int v10;

  v2 = *(_DWORD *)(a1 + 180);
  v3 = *(_DWORD *)(a2 + 180);
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(double *)(a1 + 96) != *(double *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(double *)(a1 + 120) != *(double *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  v9 = *(_DWORD *)(a1 + 180);
  v10 = *(_DWORD *)(a2 + 180);
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(_DWORD *)(a1 + 164) != *(_DWORD *)(a2 + 164))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(float *)(a1 + 168) != *(float *)(a2 + 168))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(_DWORD *)(a1 + 172) != *(_DWORD *)(a2 + 172))
      return 0;
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v9 & 0x20000) != 0)
  {
    if ((v10 & 0x20000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140))
      return 0;
  }
  else if ((v10 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v9 & 0x80000) != 0)
  {
    if ((v10 & 0x80000) == 0 || *(float *)(a1 + 148) != *(float *)(a2 + 148))
      return 0;
  }
  else if ((v10 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v9 & 0x40000) != 0)
  {
    if ((v10 & 0x40000) == 0 || *(float *)(a1 + 144) != *(float *)(a2 + 144))
      return 0;
  }
  else if ((v10 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v9 & 0x200000) != 0)
  {
    if ((v10 & 0x200000) == 0 || *(_DWORD *)(a1 + 156) != *(_DWORD *)(a2 + 156))
      return 0;
  }
  else if ((v10 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(_DWORD *)(a1 + 176) != *(_DWORD *)(a2 + 176))
      return 0;
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v9 & 0x400000) != 0)
  {
    if ((v10 & 0x400000) == 0 || *(_DWORD *)(a1 + 160) != *(_DWORD *)(a2 + 160))
      return 0;
  }
  else if ((v10 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v9 & 0x10000) != 0)
  {
    if ((v10 & 0x10000) == 0 || *(_DWORD *)(a1 + 136) != *(_DWORD *)(a2 + 136))
      return 0;
  }
  else if ((v10 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v9 & 0x100000) != 0)
  {
    if ((v10 & 0x100000) == 0 || *(_DWORD *)(a1 + 152) != *(_DWORD *)(a2 + 152))
      return 0;
  }
  else if ((v10 & 0x100000) != 0)
  {
    return 0;
  }
  v4 = *(_QWORD *)(a1 + 112);
  v5 = *(_QWORD *)(a2 + 112);
  if (v4)
  {
    if (!v5 || !CMMsl::TrackRunData::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  if ((v9 & 0x8000) != 0)
  {
    if ((v10 & 0x8000) == 0 || *(_DWORD *)(a1 + 132) != *(_DWORD *)(a2 + 132))
      return 0;
  }
  else if ((v10 & 0x8000) != 0)
  {
    return 0;
  }
  result = (v10 & 0x4000) == 0;
  if ((v9 & 0x4000) == 0)
    return result;
  return (v10 & 0x4000) != 0 && *(float *)(a1 + 128) == *(float *)(a2 + 128);
}

unint64_t CMMsl::BatchedLocationFromOdometer::hash_value(CMMsl::BatchedLocationFromOdometer *this)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    v2 = CMMsl::MotionGPSLocation::hash_value((CMMsl::MotionGPSLocation *)v2);
  if ((*((_BYTE *)this + 20) & 1) != 0)
    v3 = *((unsigned int *)this + 4);
  else
    v3 = 0;
  return v3 ^ v2;
}

_QWORD *CMMsl::BatchedLocationFromOdometer::makeSuper(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135F468;
    *(_QWORD *)(v2 + 112) = 0;
    *(_DWORD *)(v2 + 180) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t CMMsl::BatterySaverModeStatus::BatterySaverModeStatus(uint64_t this)
{
  *(_QWORD *)this = &off_25135C7C8;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135C7C8;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

void CMMsl::BatterySaverModeStatus::~BatterySaverModeStatus(CMMsl::BatterySaverModeStatus *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::BatterySaverModeStatus::BatterySaverModeStatus(uint64_t this, const CMMsl::BatterySaverModeStatus *a2)
{
  char v2;

  *(_QWORD *)this = &off_25135C7C8;
  *(_DWORD *)(this + 12) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v2 = *((_BYTE *)a2 + 8);
    *(_BYTE *)(this + 12) = 1;
    *(_BYTE *)(this + 8) = v2;
  }
  return this;
}

{
  char v2;

  *(_QWORD *)this = &off_25135C7C8;
  *(_DWORD *)(this + 12) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v2 = *((_BYTE *)a2 + 8);
    *(_BYTE *)(this + 12) = 1;
    *(_BYTE *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::BatterySaverModeStatus::operator=(uint64_t a1, uint64_t a2)
{
  char v3;
  int v4;
  char v5;
  void (**v7)(CMMsl::BatterySaverModeStatus *__hidden);
  char v8;
  int v9;

  if (a1 != a2)
  {
    v7 = &off_25135C7C8;
    v3 = *(_BYTE *)(a2 + 8);
    v4 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = *(_BYTE *)(a2 + 12) & 1;
    v9 = v4;
    v5 = *(_BYTE *)(a1 + 8);
    *(_BYTE *)(a1 + 8) = v3;
    v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

{
  int v3;
  char v4;
  int v5;
  void (**v7)(CMMsl::BatterySaverModeStatus *__hidden);
  char v8;
  int v9;

  if (a1 != a2)
  {
    v7 = &off_25135C7C8;
    v3 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    v4 = *(_BYTE *)(a2 + 8);
    v5 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v3;
    v9 = v5;
    LOBYTE(v3) = *(_BYTE *)(a1 + 8);
    *(_BYTE *)(a1 + 8) = v4;
    v8 = v3;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::BatterySaverModeStatus *a2, CMMsl::BatterySaverModeStatus *a3)
{
  int v3;

  v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  LOBYTE(v3) = *(_BYTE *)(this + 8);
  *(_BYTE *)(this + 8) = *((_BYTE *)a2 + 8);
  *((_BYTE *)a2 + 8) = v3;
  return this;
}

uint64_t CMMsl::BatterySaverModeStatus::BatterySaverModeStatus(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = &off_25135C7C8;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

{
  *(_QWORD *)result = &off_25135C7C8;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

uint64_t CMMsl::BatterySaverModeStatus::formatText(CMMsl::BatterySaverModeStatus *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 12) & 1) != 0)
    PB::TextFormatter::format(a2, "isBatterySaverModeEnabled");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BatterySaverModeStatus::readFrom(CMMsl::BatterySaverModeStatus *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v19;
  BOOL v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_24;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 12) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        if (v2 >= v3)
        {
          v20 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v19 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v20 = v19 != 0;
        }
        *((_BYTE *)this + 8) = v20;
      }
      else
      {
LABEL_24:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_24;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::BatterySaverModeStatus::writeTo(uint64_t this, PB::Writer *a2)
{
  if ((*(_BYTE *)(this + 12) & 1) != 0)
    return PB::Writer::write(a2);
  return this;
}

BOOL CMMsl::BatterySaverModeStatus::operator==(uint64_t a1, uint64_t a2)
{
  char v3;
  _BOOL8 result;

  v3 = *(_BYTE *)(a1 + 12);
  result = (*(_BYTE *)(a2 + 12) & 1) == 0;
  if ((v3 & 1) != 0)
    return (*(_BYTE *)(a2 + 12) & 1) != 0 && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8);
  return result;
}

uint64_t CMMsl::BatterySaverModeStatus::hash_value(CMMsl::BatterySaverModeStatus *this)
{
  if ((*((_BYTE *)this + 12) & 1) != 0)
    return *((unsigned __int8 *)this + 8);
  else
    return 0;
}

uint64_t CMMsl::BatteryStatus::BatteryStatus(uint64_t this)
{
  *(_QWORD *)this = &off_25135C800;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135C800;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

void CMMsl::BatteryStatus::~BatteryStatus(CMMsl::BatteryStatus *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::BatteryStatus::BatteryStatus(uint64_t this, const CMMsl::BatteryStatus *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  int v7;
  char v8;
  int v9;

  *(_QWORD *)this = &off_25135C800;
  *(_DWORD *)(this + 28) = 0;
  v2 = *((_BYTE *)a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_BYTE *)(this + 28) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 28) & 8) != 0)
  {
LABEL_5:
    v5 = *((_BYTE *)a2 + 24);
    v3 |= 8u;
    *(_BYTE *)(this + 28) = v3;
    *(_BYTE *)(this + 24) = v5;
    v2 = *((_BYTE *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    v6 = *((_BYTE *)a2 + 25);
    v3 |= 0x10u;
    *(_BYTE *)(this + 28) = v3;
    *(_BYTE *)(this + 25) = v6;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_13;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *(_BYTE *)(this + 28) = v3;
  *(_DWORD *)(this + 20) = v7;
  v2 = *((_BYTE *)a2 + 28);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 2) == 0)
      return this;
LABEL_14:
    v9 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 28) = v3 | 2;
    *(_DWORD *)(this + 16) = v9;
    return this;
  }
LABEL_13:
  v8 = *((_BYTE *)a2 + 26);
  v3 |= 0x20u;
  *(_BYTE *)(this + 28) = v3;
  *(_BYTE *)(this + 26) = v8;
  if ((*((_BYTE *)a2 + 28) & 2) != 0)
    goto LABEL_14;
  return this;
}

uint64_t CMMsl::BatteryStatus::operator=(uint64_t a1, const CMMsl::BatteryStatus *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  char v12;
  int v13;

  if ((const CMMsl::BatteryStatus *)a1 != a2)
  {
    CMMsl::BatteryStatus::BatteryStatus((uint64_t)&v8, a2);
    v3 = v10;
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v3;
    v6 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v13;
    v13 = v6;
    LOWORD(v6) = *(_WORD *)(a1 + 24);
    *(_WORD *)(a1 + 24) = v11;
    v11 = v6;
    LOBYTE(v6) = *(_BYTE *)(a1 + 26);
    *(_BYTE *)(a1 + 26) = v12;
    v12 = v6;
    v9 = v4;
    v10 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::BatteryStatus *a2, CMMsl::BatteryStatus *a3)
{
  int v3;
  double result;
  int v5;
  int v6;

  v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  LOBYTE(v3) = *((_BYTE *)this + 24);
  *((_BYTE *)this + 24) = *((_BYTE *)a2 + 24);
  *((_BYTE *)a2 + 24) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 25);
  *((_BYTE *)this + 25) = *((_BYTE *)a2 + 25);
  *((_BYTE *)a2 + 25) = v3;
  v5 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v5;
  LOBYTE(v5) = *((_BYTE *)this + 26);
  *((_BYTE *)this + 26) = *((_BYTE *)a2 + 26);
  *((_BYTE *)a2 + 26) = v5;
  v6 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v6;
  return result;
}

double CMMsl::BatteryStatus::BatteryStatus(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135C800;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135C800;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::BatteryStatus::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int16 v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  _QWORD v10[3];
  __int16 v11;
  char v12;
  int v13;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    v4 = *(_WORD *)(a2 + 24);
    v5 = *(_BYTE *)(a2 + 26);
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    v8 = *(_WORD *)(a1 + 24);
    *(_WORD *)(a1 + 24) = v4;
    LOBYTE(v4) = *(_BYTE *)(a1 + 26);
    *(_BYTE *)(a1 + 26) = v5;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    v10[0] = &off_25135C800;
    v13 = *(_DWORD *)(a1 + 28);
    v11 = v8;
    v12 = v4;
    *(_DWORD *)(a1 + 28) = v3;
    v10[1] = v6;
    v10[2] = v7;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::BatteryStatus::formatText(CMMsl::BatteryStatus *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "charged");
    v5 = *((_BYTE *)this + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*((_BYTE *)this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "chargerFamily");
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "chargerType");
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(a2, "level", *((double *)this + 1));
    if ((*((_BYTE *)this + 28) & 0x20) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "connected");
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 1) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 0x20) != 0)
LABEL_7:
    PB::TextFormatter::format(a2, "wasConnected");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BatteryStatus::readFrom(CMMsl::BatteryStatus *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  int v23;
  BOOL v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  char v30;
  int v31;
  BOOL v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_26;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_21;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_26:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 28) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 2u:
        *((_BYTE *)this + 28) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v22 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v21 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v22 = v21 != 0;
        }
        *((_BYTE *)this + 24) = v22;
        break;
      case 3u:
        *((_BYTE *)this + 28) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v24 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v23 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v24 = v23 != 0;
        }
        *((_BYTE *)this + 25) = v24;
        break;
      case 4u:
        *((_BYTE *)this + 28) |= 4u;
        v25 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v26 = *(_QWORD *)a2;
        if (v25 > 0xFFFFFFFFFFFFFFF5 || v25 + 10 > v2)
        {
          v39 = 0;
          v40 = 0;
          v29 = 0;
          if (v2 <= v25)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v25)
            {
              LODWORD(v29) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_76;
            }
            v41 = v25++;
            v42 = *(_BYTE *)(v26 + v41);
            *((_QWORD *)a2 + 1) = v25;
            v29 |= (unint64_t)(v42 & 0x7F) << v39;
            if ((v42 & 0x80) == 0)
              break;
            v39 += 7;
            v14 = v40++ > 8;
            if (v14)
            {
              LODWORD(v29) = 0;
LABEL_75:
              v2 = v41 + 1;
              goto LABEL_76;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v29) = 0;
          goto LABEL_75;
        }
        v27 = 0;
        v28 = 0;
        v29 = 0;
        do
        {
          v2 = v25 + 1;
          *((_QWORD *)a2 + 1) = v25 + 1;
          v30 = *(_BYTE *)(v26 + v25);
          v29 |= (unint64_t)(v30 & 0x7F) << v27;
          if ((v30 & 0x80) == 0)
            goto LABEL_76;
          v27 += 7;
          v25 = v2;
          v14 = v28++ > 8;
        }
        while (!v14);
        LODWORD(v29) = 0;
LABEL_76:
        *((_DWORD *)this + 5) = v29;
        break;
      case 5u:
        *((_BYTE *)this + 28) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v32 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v31 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v32 = v31 != 0;
        }
        *((_BYTE *)this + 26) = v32;
        break;
      case 6u:
        *((_BYTE *)this + 28) |= 2u;
        v33 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v34 = *(_QWORD *)a2;
        if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
        {
          v43 = 0;
          v44 = 0;
          v37 = 0;
          if (v2 <= v33)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v33)
            {
              LODWORD(v37) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_81;
            }
            v45 = v33++;
            v46 = *(_BYTE *)(v34 + v45);
            *((_QWORD *)a2 + 1) = v33;
            v37 |= (unint64_t)(v46 & 0x7F) << v43;
            if ((v46 & 0x80) == 0)
              break;
            v43 += 7;
            v14 = v44++ > 8;
            if (v14)
            {
              LODWORD(v37) = 0;
LABEL_80:
              v2 = v45 + 1;
              goto LABEL_81;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v37) = 0;
          goto LABEL_80;
        }
        v35 = 0;
        v36 = 0;
        v37 = 0;
        do
        {
          v2 = v33 + 1;
          *((_QWORD *)a2 + 1) = v33 + 1;
          v38 = *(_BYTE *)(v34 + v33);
          v37 |= (unint64_t)(v38 & 0x7F) << v35;
          if ((v38 & 0x80) == 0)
            goto LABEL_81;
          v35 += 7;
          v33 = v2;
          v14 = v36++ > 8;
        }
        while (!v14);
        LODWORD(v37) = 0;
LABEL_81:
        *((_DWORD *)this + 4) = v37;
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::BatteryStatus::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 28);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(this + 28) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::write(a2);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_12:
  this = PB::Writer::write(a2);
  if ((*(_BYTE *)(v3 + 28) & 2) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

BOOL CMMsl::BatteryStatus::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 8) == 0 || *(unsigned __int8 *)(a1 + 24) != *(unsigned __int8 *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 0x10) == 0 || *(unsigned __int8 *)(a1 + 25) != *(unsigned __int8 *)(a2 + 25))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 0x20) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 0x20) == 0 || *(unsigned __int8 *)(a1 + 26) != *(unsigned __int8 *)(a2 + 26))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 0x20) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 28) & 2) == 0;
  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
    return (*(_BYTE *)(a2 + 28) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

uint64_t CMMsl::BatteryStatus::hash_value(CMMsl::BatteryStatus *this)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*((_BYTE *)this + 28) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 28) & 8) != 0)
    {
LABEL_3:
      v2 = *((unsigned __int8 *)this + 24);
      if ((*((_BYTE *)this + 28) & 0x10) != 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 28) & 8) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 28) & 0x10) != 0)
  {
LABEL_4:
    v3 = *((unsigned __int8 *)this + 25);
    if ((*((_BYTE *)this + 28) & 4) != 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  v3 = 0;
  if ((*((_BYTE *)this + 28) & 4) != 0)
  {
LABEL_5:
    v4 = *((unsigned int *)this + 5);
    if ((*((_BYTE *)this + 28) & 0x20) != 0)
      goto LABEL_6;
LABEL_14:
    v5 = 0;
    if ((*((_BYTE *)this + 28) & 2) != 0)
      goto LABEL_7;
LABEL_15:
    v6 = 0;
    return v2 ^ *(_QWORD *)&v1 ^ v3 ^ v4 ^ v5 ^ v6;
  }
LABEL_13:
  v4 = 0;
  if ((*((_BYTE *)this + 28) & 0x20) == 0)
    goto LABEL_14;
LABEL_6:
  v5 = *((unsigned __int8 *)this + 26);
  if ((*((_BYTE *)this + 28) & 2) == 0)
    goto LABEL_15;
LABEL_7:
  v6 = *((int *)this + 4);
  return v2 ^ *(_QWORD *)&v1 ^ v3 ^ v4 ^ v5 ^ v6;
}

uint64_t CMMsl::BioMotionAnchor::BioMotionAnchor(uint64_t this)
{
  *(_QWORD *)this = &off_25135C838;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135C838;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

void CMMsl::BioMotionAnchor::~BioMotionAnchor(CMMsl::BioMotionAnchor *this)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = &off_25135C838;
  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::BioMotionAnchor::~BioMotionAnchor(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::BioMotionAnchor *CMMsl::BioMotionAnchor::BioMotionAnchor(CMMsl::BioMotionAnchor *this, const CMMsl::BioMotionAnchor *a2)
{
  _QWORD *v4;
  CMMsl::Pose *v5;
  CMMsl::Pose *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;

  *((_QWORD *)this + 1) = 0;
  v4 = (_QWORD *)((char *)this + 8);
  *(_QWORD *)this = &off_25135C838;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 13) = 0;
  if (*((_QWORD *)a2 + 5))
  {
    v5 = (CMMsl::Pose *)operator new();
    v6 = CMMsl::Pose::Pose(v5, *((const CMMsl::Pose **)a2 + 5));
    v7 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if (this != a2)
    sub_2429111C4(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
  v8 = *((_BYTE *)a2 + 52);
  if ((v8 & 1) != 0)
  {
    v9 = *((_QWORD *)a2 + 4);
    *((_BYTE *)this + 52) |= 1u;
    *((_QWORD *)this + 4) = v9;
    v8 = *((_BYTE *)a2 + 52);
  }
  if ((v8 & 2) != 0)
  {
    v10 = *((_BYTE *)a2 + 48);
    *((_BYTE *)this + 52) |= 2u;
    *((_BYTE *)this + 48) = v10;
  }
  return this;
}

uint64_t CMMsl::BioMotionAnchor::operator=(uint64_t a1, const CMMsl::BioMotionAnchor *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[8];
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;

  if ((const CMMsl::BioMotionAnchor *)a1 != a2)
  {
    CMMsl::BioMotionAnchor::BioMotionAnchor((CMMsl::BioMotionAnchor *)v9, a2);
    v3 = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a1 + 52) = v15;
    v15 = v3;
    v4 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v13;
    v13 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v5;
    v6 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v11;
    v11 = v6;
    v7 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v12;
    v12 = v7;
    LOBYTE(v6) = *(_BYTE *)(a1 + 48);
    *(_BYTE *)(a1 + 48) = v14;
    v14 = v6;
    CMMsl::BioMotionAnchor::~BioMotionAnchor((CMMsl::BioMotionAnchor *)v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::BioMotionAnchor *a2, CMMsl::BioMotionAnchor *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  v3 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v3;
  v4 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  result = *((double *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((double *)a2 + 4) = result;
  LOBYTE(v7) = *((_BYTE *)this + 48);
  *((_BYTE *)this + 48) = *((_BYTE *)a2 + 48);
  *((_BYTE *)a2 + 48) = v7;
  return result;
}

uint64_t CMMsl::BioMotionAnchor::BioMotionAnchor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_25135C838;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  sub_242911330(v4, (__n128 *)(a2 + 8));
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t CMMsl::BioMotionAnchor::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[8];
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;

  if (a1 != a2)
  {
    CMMsl::BioMotionAnchor::BioMotionAnchor((uint64_t)v9, a2);
    v3 = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a1 + 52) = v15;
    v15 = v3;
    v4 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v13;
    v13 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v5;
    v6 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v11;
    v11 = v6;
    v7 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v12;
    v12 = v7;
    LOBYTE(v6) = *(_BYTE *)(a1 + 48);
    *(_BYTE *)(a1 + 48) = v14;
    v14 = v6;
    CMMsl::BioMotionAnchor::~BioMotionAnchor((CMMsl::BioMotionAnchor *)v9);
  }
  return a1;
}

uint64_t CMMsl::BioMotionAnchor::formatText(CMMsl::BioMotionAnchor *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  double *v6;
  double *v7;
  double v8;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 52) & 1) != 0)
    PB::TextFormatter::format(a2, "bioMotionTimestamp", *((double *)this + 4));
  v5 = *((_QWORD *)this + 5);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "pose");
  if ((*((_BYTE *)this + 52) & 2) != 0)
    PB::TextFormatter::format(a2, "runSmoother");
  v6 = (double *)*((_QWORD *)this + 1);
  v7 = (double *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(a2, "velocity", v8);
  }
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::BioMotionAnchor::readFrom(CMMsl::BioMotionAnchor *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  BOOL v39;
  unint64_t v40;
  char *v41;
  _QWORD *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (2)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_23:
      if ((v11 & 7) != 4)
      {
        switch((v11 >> 3))
        {
          case 1u:
            v19 = operator new();
            *(_QWORD *)v19 = &off_2513600E0;
            *(_DWORD *)(v19 + 64) = 0;
            *(_OWORD *)(v19 + 8) = 0u;
            *(_OWORD *)(v19 + 24) = 0u;
            *(_OWORD *)(v19 + 40) = 0u;
            v20 = *((_QWORD *)this + 5);
            *((_QWORD *)this + 5) = v19;
            if (v20)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
              v19 = *((_QWORD *)this + 5);
            }
            if (PB::Reader::placeMark()
              && ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) != 0)
            {
              goto LABEL_29;
            }
            return 0;
          case 2u:
            if ((v11 & 7) == 2)
            {
              if ((PB::Reader::placeMark() & 1) != 0)
                return 0;
              v21 = *((_QWORD *)a2 + 1);
              v22 = *((_QWORD *)a2 + 2);
              while (v21 < v22 && !*((_BYTE *)a2 + 24))
              {
                v24 = (char *)*((_QWORD *)this + 2);
                v23 = *((_QWORD *)this + 3);
                if ((unint64_t)v24 >= v23)
                {
                  v26 = (char *)*((_QWORD *)this + 1);
                  v27 = (v24 - v26) >> 3;
                  v28 = v27 + 1;
                  if ((unint64_t)(v27 + 1) >> 61)
                    goto LABEL_87;
                  v29 = v23 - (_QWORD)v26;
                  if (v29 >> 2 > v28)
                    v28 = v29 >> 2;
                  if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
                    v30 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v30 = v28;
                  if (v30)
                  {
                    v30 = (unint64_t)sub_2429112FC(v30);
                    v26 = (char *)*((_QWORD *)this + 1);
                    v24 = (char *)*((_QWORD *)this + 2);
                  }
                  else
                  {
                    v31 = 0;
                  }
                  v32 = (_QWORD *)(v30 + 8 * v27);
                  *v32 = 0;
                  v25 = v32 + 1;
                  while (v24 != v26)
                  {
                    v33 = *((_QWORD *)v24 - 1);
                    v24 -= 8;
                    *--v32 = v33;
                  }
                  *((_QWORD *)this + 1) = v32;
                  *((_QWORD *)this + 2) = v25;
                  *((_QWORD *)this + 3) = v30 + 8 * v31;
                  if (v26)
                    operator delete(v26);
                }
                else
                {
                  *(_QWORD *)v24 = 0;
                  v25 = v24 + 8;
                }
                *((_QWORD *)this + 2) = v25;
                v34 = *((_QWORD *)a2 + 1);
                if (v34 > 0xFFFFFFFFFFFFFFF7 || v34 + 8 > *((_QWORD *)a2 + 2))
                {
                  *((_BYTE *)a2 + 24) = 1;
                  break;
                }
                *(v25 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v34);
                v22 = *((_QWORD *)a2 + 2);
                v21 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v21;
              }
LABEL_29:
              PB::Reader::recallMark();
            }
            else
            {
              v41 = (char *)*((_QWORD *)this + 2);
              v40 = *((_QWORD *)this + 3);
              if ((unint64_t)v41 >= v40)
              {
                v43 = (char *)*((_QWORD *)this + 1);
                v44 = (v41 - v43) >> 3;
                v45 = v44 + 1;
                if ((unint64_t)(v44 + 1) >> 61)
LABEL_87:
                  sub_242729A44();
                v46 = v40 - (_QWORD)v43;
                if (v46 >> 2 > v45)
                  v45 = v46 >> 2;
                if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
                  v47 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v47 = v45;
                if (v47)
                {
                  v47 = (unint64_t)sub_2429112FC(v47);
                  v43 = (char *)*((_QWORD *)this + 1);
                  v41 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v48 = 0;
                }
                v49 = (_QWORD *)(v47 + 8 * v44);
                *v49 = 0;
                v42 = v49 + 1;
                while (v41 != v43)
                {
                  v50 = *((_QWORD *)v41 - 1);
                  v41 -= 8;
                  *--v49 = v50;
                }
                *((_QWORD *)this + 1) = v49;
                *((_QWORD *)this + 2) = v42;
                *((_QWORD *)this + 3) = v47 + 8 * v48;
                if (v43)
                  operator delete(v43);
              }
              else
              {
                *(_QWORD *)v41 = 0;
                v42 = v41 + 8;
              }
              *((_QWORD *)this + 2) = v42;
              v51 = *((_QWORD *)a2 + 1);
              if (v51 <= 0xFFFFFFFFFFFFFFF7 && v51 + 8 <= *((_QWORD *)a2 + 2))
              {
                *(v42 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v51);
LABEL_82:
                *((_QWORD *)a2 + 1) += 8;
              }
              else
              {
LABEL_80:
                *((_BYTE *)a2 + 24) = 1;
              }
            }
LABEL_20:
            v2 = *((_QWORD *)a2 + 1);
            v3 = *((_QWORD *)a2 + 2);
            v4 = *((unsigned __int8 *)a2 + 24);
            if (v2 >= v3 || *((_BYTE *)a2 + 24))
              return v4 == 0;
            continue;
          case 3u:
            *((_BYTE *)this + 52) |= 1u;
            v35 = *((_QWORD *)a2 + 1);
            if (v35 > 0xFFFFFFFFFFFFFFF7 || v35 + 8 > *((_QWORD *)a2 + 2))
              goto LABEL_80;
            *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v35);
            goto LABEL_82;
          case 4u:
            *((_BYTE *)this + 52) |= 2u;
            v36 = *((_QWORD *)a2 + 1);
            if (v36 >= *((_QWORD *)a2 + 2))
            {
              v39 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v37 = v36 + 1;
              v38 = *(unsigned __int8 *)(*(_QWORD *)a2 + v36);
              *((_QWORD *)a2 + 1) = v37;
              v39 = v38 != 0;
            }
            *((_BYTE *)this + 48) = v39;
            goto LABEL_20;
          default:
            goto LABEL_19;
        }
      }
      v4 = 0;
      return v4 == 0;
    }
    break;
  }
  v15 = 0;
  v16 = 0;
  v11 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v17 = v2 + 1;
    v18 = *(_BYTE *)(v8 + v2);
    *((_QWORD *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0)
      goto LABEL_23;
    v15 += 7;
    v2 = v17;
    v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  if ((PB::Reader::skip(a2) & 1) != 0)
    goto LABEL_20;
  return 0;
}

double CMMsl::Pose::Pose(CMMsl::Pose *this)
{
  double result;

  *(_QWORD *)this = &off_2513600E0;
  *((_DWORD *)this + 16) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_2513600E0;
  *((_DWORD *)this + 16) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

uint64_t CMMsl::BioMotionAnchor::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  double *v5;
  double *v6;
  double v7;
  char v8;

  v3 = this;
  v4 = *(const PB::Base **)(this + 40);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = *(double **)(v3 + 8);
  v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7);
  }
  v8 = *(_BYTE *)(v3 + 52);
  if ((v8 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 32));
    v8 = *(_BYTE *)(v3 + 52);
  }
  if ((v8 & 2) != 0)
    return PB::Writer::write(a2);
  return this;
}

BOOL CMMsl::BioMotionAnchor::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  double *v6;
  double *v7;
  double *v8;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a2 + 40);
  if (v4)
  {
    if (!v5 || !CMMsl::Pose::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v7 = *(double **)(a1 + 8);
  v6 = *(double **)(a1 + 16);
  v8 = *(double **)(a2 + 8);
  if ((char *)v6 - (char *)v7 == *(_QWORD *)(a2 + 16) - (_QWORD)v8)
  {
    while (v7 != v6)
    {
      if (*v7 != *v8)
        return 0;
      ++v7;
      ++v8;
    }
    if ((*(_BYTE *)(a1 + 52) & 1) != 0)
    {
      if ((*(_BYTE *)(a2 + 52) & 1) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
        return 0;
    }
    else if ((*(_BYTE *)(a2 + 52) & 1) != 0)
    {
      return 0;
    }
    result = (*(_BYTE *)(a2 + 52) & 2) == 0;
    if ((*(_BYTE *)(a1 + 52) & 2) == 0)
      return result;
    if ((*(_BYTE *)(a2 + 52) & 2) != 0 && *(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48))
      return 1;
  }
  return 0;
}

BOOL CMMsl::Pose::operator==(uint64_t a1, uint64_t a2)
{
  double *v2;
  double *v3;
  double *v4;
  uint64_t v5;
  uint64_t v6;
  double *v7;
  uint64_t v8;
  double v9;
  _BOOL8 result;
  BOOL v11;

  if ((*(_BYTE *)(a1 + 64) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 64) & 1) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 64) & 1) != 0)
  {
    return 0;
  }
  v3 = *(double **)(a1 + 8);
  v2 = *(double **)(a1 + 16);
  v4 = *(double **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 16) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v6 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v7 = *(double **)(a2 + 32);
  if (v5 - v6 != *(_QWORD *)(a2 + 40) - (_QWORD)v7)
    return 0;
  if (v6 == v5)
    return 1;
  v8 = v6 + 8;
  do
  {
    v9 = *v7++;
    result = *(double *)(v8 - 8) == v9;
    v11 = *(double *)(v8 - 8) != v9 || v8 == v5;
    v8 += 8;
  }
  while (!v11);
  return result;
}

uint64_t CMMsl::BioMotionAnchor::hash_value(CMMsl::BioMotionAnchor *this)
{
  CMMsl::Pose *v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;

  v2 = (CMMsl::Pose *)*((_QWORD *)this + 5);
  if (v2)
    v3 = CMMsl::Pose::hash_value(v2);
  else
    v3 = 0;
  v4 = PBHashBytes();
  if ((*((_BYTE *)this + 52) & 1) != 0)
  {
    v5 = *((double *)this + 4);
    if (v5 == 0.0)
      v5 = 0.0;
    if ((*((_BYTE *)this + 52) & 2) != 0)
      goto LABEL_6;
LABEL_10:
    v6 = 0;
    return v4 ^ v3 ^ *(_QWORD *)&v5 ^ v6;
  }
  v5 = 0.0;
  if ((*((_BYTE *)this + 52) & 2) == 0)
    goto LABEL_10;
LABEL_6:
  v6 = *((unsigned __int8 *)this + 48);
  return v4 ^ v3 ^ *(_QWORD *)&v5 ^ v6;
}

_QWORD *CMMsl::BioMotionAnchor::makePose(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[5])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_2513600E0;
    *(_DWORD *)(v2 + 64) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    this = (_QWORD *)v1[5];
    v1[5] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::BioMotionAnchorPose::BioMotionAnchorPose(_QWORD *this)
{
  *this = &off_25135C870;
  this[1] = 0;
  return this;
}

{
  *this = &off_25135C870;
  this[1] = 0;
  return this;
}

void CMMsl::BioMotionAnchorPose::~BioMotionAnchorPose(CMMsl::BioMotionAnchorPose *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135C870;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135C870;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135C870;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::BioMotionAnchorPose *CMMsl::BioMotionAnchorPose::BioMotionAnchorPose(CMMsl::BioMotionAnchorPose *this, const CMMsl::BioMotionAnchor **a2)
{
  CMMsl::BioMotionAnchor *v4;
  CMMsl::BioMotionAnchor *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_25135C870;
  *((_QWORD *)this + 1) = 0;
  if (a2[1])
  {
    v4 = (CMMsl::BioMotionAnchor *)operator new();
    v5 = CMMsl::BioMotionAnchor::BioMotionAnchor(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return this;
}

uint64_t CMMsl::BioMotionAnchorPose::operator=(uint64_t a1, const CMMsl::BioMotionAnchor **a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::BioMotionAnchorPose *__hidden);
  uint64_t v6;

  if ((const CMMsl::BioMotionAnchor **)a1 != a2)
  {
    CMMsl::BioMotionAnchorPose::BioMotionAnchorPose((CMMsl::BioMotionAnchorPose *)&v5, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v6;
    v5 = &off_25135C870;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::BioMotionAnchorPose *a2, CMMsl::BioMotionAnchorPose *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::BioMotionAnchorPose::BioMotionAnchorPose(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_25135C870;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_25135C870;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::BioMotionAnchorPose::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = &off_25135C870;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::BioMotionAnchorPose::formatText(CMMsl::BioMotionAnchorPose *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BioMotionAnchorPose::readFrom(CMMsl::BioMotionAnchorPose *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v19 = operator new();
        *(_QWORD *)v19 = &off_25135C838;
        *(_QWORD *)(v19 + 8) = 0;
        *(_QWORD *)(v19 + 16) = 0;
        *(_QWORD *)(v19 + 24) = 0;
        *(_QWORD *)(v19 + 40) = 0;
        *(_DWORD *)(v19 + 52) = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = *((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_27;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::BioMotionAnchorPose::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2);
  return this;
}

BOOL CMMsl::BioMotionAnchorPose::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::BioMotionAnchor::operator==(v2, v3);
  return result;
}

CMMsl::BioMotionAnchor *CMMsl::BioMotionAnchorPose::hash_value(CMMsl::BioMotionAnchorPose *this)
{
  CMMsl::BioMotionAnchor *result;

  result = (CMMsl::BioMotionAnchor *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::BioMotionAnchor *)CMMsl::BioMotionAnchor::hash_value(result);
  return result;
}

_QWORD *CMMsl::BioMotionAnchorPose::makeSuper(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135C838;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = 0;
    *(_QWORD *)(v2 + 40) = 0;
    *(_DWORD *)(v2 + 52) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t CMMsl::BioMotionClassification::BioMotionClassification(uint64_t this)
{
  *(_QWORD *)this = &off_25135C8A8;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135C8A8;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

void CMMsl::BioMotionClassification::~BioMotionClassification(CMMsl::BioMotionClassification *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::BioMotionClassification::BioMotionClassification(CMMsl::BioMotionClassification *this, const CMMsl::BioMotionClassification *a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)this = &off_25135C8A8;
  *((_DWORD *)this + 12) = 0;
  v2 = *((_BYTE *)a2 + 48);
  if ((v2 & 0x10) != 0)
  {
    result = *((double *)a2 + 5);
    v3 = 16;
    *((_BYTE *)this + 48) = 16;
    *((double *)this + 5) = result;
    v2 = *((_BYTE *)a2 + 48);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 48) & 2) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 2);
    v3 |= 2u;
    *((_BYTE *)this + 48) = v3;
    *((double *)this + 2) = result;
    v2 = *((_BYTE *)a2 + 48);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    result = *((double *)a2 + 4);
    v3 |= 8u;
    *((_BYTE *)this + 48) = v3;
    *((double *)this + 4) = result;
    v2 = *((_BYTE *)a2 + 48);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0)
        return result;
LABEL_12:
      result = *((double *)a2 + 1);
      *((_BYTE *)this + 48) = v3 | 1;
      *((double *)this + 1) = result;
      return result;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  result = *((double *)a2 + 3);
  v3 |= 4u;
  *((_BYTE *)this + 48) = v3;
  *((double *)this + 3) = result;
  if ((*((_BYTE *)a2 + 48) & 1) != 0)
    goto LABEL_12;
  return result;
}

uint64_t CMMsl::BioMotionClassification::operator=(uint64_t a1, const CMMsl::BioMotionClassification *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _BYTE v8[8];
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  int v12;

  if ((const CMMsl::BioMotionClassification *)a1 != a2)
  {
    CMMsl::BioMotionClassification::BioMotionClassification((CMMsl::BioMotionClassification *)v8, a2);
    v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v12;
    v12 = v3;
    v4 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v11;
    v11 = v4;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v9 = v6;
    v10 = v5;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::BioMotionClassification *a2, CMMsl::BioMotionClassification *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  v4 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::BioMotionClassification::BioMotionClassification(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135C8A8;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135C8A8;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::BioMotionClassification::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  void (**v10)(CMMsl::BioMotionClassification *__hidden);
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;

  if (a1 != a2)
  {
    v10 = &off_25135C8A8;
    v3 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a2 + 48) = 0;
    v4 = *(_QWORD *)(a2 + 40);
    v14 = *(_DWORD *)(a1 + 48);
    v13 = *(_QWORD *)(a1 + 40);
    v5 = *(_OWORD *)(a1 + 24);
    v6 = *(_OWORD *)(a1 + 8);
    v7 = *(_OWORD *)(a2 + 8);
    v8 = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 48) = v3;
    *(_QWORD *)(a1 + 40) = v4;
    *(_OWORD *)(a1 + 24) = v8;
    *(_OWORD *)(a1 + 8) = v7;
    v11 = v6;
    v12 = v5;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

uint64_t CMMsl::BioMotionClassification::formatText(CMMsl::BioMotionClassification *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 48);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "probabilityGenericMotion", *((double *)this + 1));
    v5 = *((_BYTE *)this + 48);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((_BYTE *)this + 48) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "probabilityHeadMotion", *((double *)this + 2));
  v5 = *((_BYTE *)this + 48);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(a2, "probabilityTorsoMotion", *((double *)this + 4));
    if ((*((_BYTE *)this + 48) & 0x10) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(a2, "probabilityPedestrianMotion", *((double *)this + 3));
  v5 = *((_BYTE *)this + 48);
  if ((v5 & 8) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 0x10) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 5));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BioMotionClassification::readFrom(CMMsl::BioMotionClassification *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_40;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 48) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_37;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_39;
      case 2u:
        *((_BYTE *)this + 48) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_37;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_39;
      case 3u:
        *((_BYTE *)this + 48) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_37;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_39;
      case 4u:
        *((_BYTE *)this + 48) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_37;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_39;
      case 5u:
        *((_BYTE *)this + 48) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_39:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_37:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_40:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::BioMotionClassification::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 48);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 40));
    v4 = *(_BYTE *)(v3 + 48);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(this + 48) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 8));
  }
LABEL_10:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  if ((*(_BYTE *)(v3 + 48) & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 8));
  return this;
}

BOOL CMMsl::BioMotionClassification::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 48) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 48) & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 48) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 48) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 48) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 48) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 48) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 48) & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 48) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 48) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 48) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 48) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 48) & 1) == 0;
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
    return (*(_BYTE *)(a2 + 48) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  return v2;
}

uint64_t CMMsl::BioMotionClassification::hash_value(CMMsl::BioMotionClassification *this)
{
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;

  if ((*((_BYTE *)this + 48) & 0x10) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 48) & 2) != 0)
      goto LABEL_3;
LABEL_18:
    v2 = 0.0;
    if ((*((_BYTE *)this + 48) & 8) != 0)
      goto LABEL_6;
LABEL_19:
    v3 = 0.0;
    if ((*((_BYTE *)this + 48) & 4) != 0)
      goto LABEL_9;
    goto LABEL_20;
  }
  v1 = *((double *)this + 5);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 48) & 2) == 0)
    goto LABEL_18;
LABEL_3:
  v2 = *((double *)this + 2);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 48) & 8) == 0)
    goto LABEL_19;
LABEL_6:
  v3 = *((double *)this + 4);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((*((_BYTE *)this + 48) & 4) != 0)
  {
LABEL_9:
    v4 = *((double *)this + 3);
    if (v4 == 0.0)
      v4 = 0.0;
    if ((*((_BYTE *)this + 48) & 1) != 0)
      goto LABEL_12;
LABEL_21:
    v5 = 0.0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5;
  }
LABEL_20:
  v4 = 0.0;
  if ((*((_BYTE *)this + 48) & 1) == 0)
    goto LABEL_21;
LABEL_12:
  v5 = *((double *)this + 1);
  if (v5 == 0.0)
    v5 = 0.0;
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5;
}

double CMMsl::BioMotionLinkLengthFitParameters::BioMotionLinkLengthFitParameters(CMMsl::BioMotionLinkLengthFitParameters *this)
{
  double result;

  *(_QWORD *)this = &off_25135C8E0;
  *((_DWORD *)this + 36) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_25135C8E0;
  *((_DWORD *)this + 36) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  return result;
}

void CMMsl::BioMotionLinkLengthFitParameters::~BioMotionLinkLengthFitParameters(CMMsl::BioMotionLinkLengthFitParameters *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = &off_25135C8E0;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 7);
  if (v3)
  {
    *((_QWORD *)this + 8) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 5) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 1);
  if (v5)
  {
    *((_QWORD *)this + 2) = v5;
    operator delete(v5);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::BioMotionLinkLengthFitParameters::~BioMotionLinkLengthFitParameters(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::BioMotionLinkLengthFitParameters *CMMsl::BioMotionLinkLengthFitParameters::BioMotionLinkLengthFitParameters(CMMsl::BioMotionLinkLengthFitParameters *this, const CMMsl::BioMotionLinkLengthFitParameters *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = &off_25135C8E0;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (_QWORD *)((char *)this + 8);
  *(_OWORD *)((char *)this + 56) = 0u;
  v5 = (_QWORD *)((char *)this + 56);
  *((_DWORD *)this + 36) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  if ((*((_BYTE *)a2 + 144) & 4) != 0)
  {
    v6 = *((_QWORD *)a2 + 15);
    *((_BYTE *)this + 144) = 4;
    *((_QWORD *)this + 15) = v6;
  }
  if (this != a2)
  {
    sub_2429111C4((_QWORD *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3);
    sub_2429111C4((_QWORD *)this + 10, *((char **)a2 + 10), *((char **)a2 + 11), (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 3);
    sub_2429111C4(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
    sub_2429111C4(v5, *((char **)a2 + 7), *((char **)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 3);
  }
  v7 = *((_BYTE *)a2 + 144);
  if ((v7 & 1) != 0)
  {
    v10 = *((_QWORD *)a2 + 13);
    *((_BYTE *)this + 144) |= 1u;
    *((_QWORD *)this + 13) = v10;
    v7 = *((_BYTE *)a2 + 144);
    if ((v7 & 2) == 0)
    {
LABEL_7:
      if ((v7 & 8) == 0)
        goto LABEL_8;
LABEL_13:
      v12 = *((_QWORD *)a2 + 16);
      *((_BYTE *)this + 144) |= 8u;
      *((_QWORD *)this + 16) = v12;
      if ((*((_BYTE *)a2 + 144) & 0x10) == 0)
        return this;
      goto LABEL_9;
    }
  }
  else if ((*((_BYTE *)a2 + 144) & 2) == 0)
  {
    goto LABEL_7;
  }
  v11 = *((_QWORD *)a2 + 14);
  *((_BYTE *)this + 144) |= 2u;
  *((_QWORD *)this + 14) = v11;
  v7 = *((_BYTE *)a2 + 144);
  if ((v7 & 8) != 0)
    goto LABEL_13;
LABEL_8:
  if ((v7 & 0x10) != 0)
  {
LABEL_9:
    v8 = *((_QWORD *)a2 + 17);
    *((_BYTE *)this + 144) |= 0x10u;
    *((_QWORD *)this + 17) = v8;
  }
  return this;
}

CMMsl *CMMsl::BioMotionLinkLengthFitParameters::operator=(CMMsl *a1, const CMMsl::BioMotionLinkLengthFitParameters *a2)
{
  CMMsl::BioMotionLinkLengthFitParameters *v3;
  _BYTE v5[152];

  if (a1 != a2)
  {
    CMMsl::BioMotionLinkLengthFitParameters::BioMotionLinkLengthFitParameters((CMMsl::BioMotionLinkLengthFitParameters *)v5, a2);
    CMMsl::swap(a1, (CMMsl::BioMotionLinkLengthFitParameters *)v5, v3);
    CMMsl::BioMotionLinkLengthFitParameters::~BioMotionLinkLengthFitParameters((CMMsl::BioMotionLinkLengthFitParameters *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::BioMotionLinkLengthFitParameters *a2, CMMsl::BioMotionLinkLengthFitParameters *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double result;

  v3 = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v3;
  v4 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v4;
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v5;
  v6 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v6;
  v7 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v7;
  v8 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v8;
  v9 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v9;
  v10 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v10;
  v11 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v11;
  v12 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v12;
  v13 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v13;
  v14 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v14;
  v15 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v15;
  v16 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v16;
  v17 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v17;
  v18 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v18;
  v19 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v19;
  result = *((double *)this + 17);
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  *((double *)a2 + 17) = result;
  return result;
}

uint64_t CMMsl::BioMotionLinkLengthFitParameters::BioMotionLinkLengthFitParameters(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_25135C8E0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  sub_242911330(a1 + 32, (__n128 *)(a2 + 32));
  sub_242911330(a1 + 80, (__n128 *)(a2 + 80));
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  sub_242911330(a1 + 56, (__n128 *)(a2 + 56));
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  return a1;
}

CMMsl *CMMsl::BioMotionLinkLengthFitParameters::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::BioMotionLinkLengthFitParameters *v3;
  _BYTE v5[152];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::BioMotionLinkLengthFitParameters::BioMotionLinkLengthFitParameters((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::BioMotionLinkLengthFitParameters *)v5, v3);
    CMMsl::BioMotionLinkLengthFitParameters::~BioMotionLinkLengthFitParameters((CMMsl::BioMotionLinkLengthFitParameters *)v5);
  }
  return a1;
}

uint64_t CMMsl::BioMotionLinkLengthFitParameters::formatText(CMMsl::BioMotionLinkLengthFitParameters *this, PB::TextFormatter *a2, const char *a3)
{
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;
  double *v11;
  double *v12;
  double v13;
  double *v14;
  double *v15;
  double v16;
  char v17;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (double *)*((_QWORD *)this + 1);
  v6 = (double *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "centerOfRotationEstVars", v7);
  }
  v8 = (double *)*((_QWORD *)this + 4);
  v9 = (double *)*((_QWORD *)this + 5);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(a2, "centerOfRotationEsts", v10);
  }
  v11 = (double *)*((_QWORD *)this + 7);
  v12 = (double *)*((_QWORD *)this + 8);
  while (v11 != v12)
  {
    v13 = *v11++;
    PB::TextFormatter::format(a2, "linkLengthEstVars", v13);
  }
  v14 = (double *)*((_QWORD *)this + 10);
  v15 = (double *)*((_QWORD *)this + 11);
  while (v14 != v15)
  {
    v16 = *v14++;
    PB::TextFormatter::format(a2, "linkLengthEsts", v16);
  }
  v17 = *((_BYTE *)this + 144);
  if ((v17 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "positionResidualNormMean", *((double *)this + 13));
    v17 = *((_BYTE *)this + 144);
    if ((v17 & 2) == 0)
    {
LABEL_11:
      if ((v17 & 4) == 0)
        goto LABEL_12;
      goto LABEL_18;
    }
  }
  else if ((*((_BYTE *)this + 144) & 2) == 0)
  {
    goto LABEL_11;
  }
  PB::TextFormatter::format(a2, "positionResidualNormVar", *((double *)this + 14));
  v17 = *((_BYTE *)this + 144);
  if ((v17 & 4) == 0)
  {
LABEL_12:
    if ((v17 & 8) == 0)
      goto LABEL_13;
LABEL_19:
    PB::TextFormatter::format(a2, "timestampBegin", *((double *)this + 16));
    if ((*((_BYTE *)this + 144) & 0x10) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_14;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 15));
  v17 = *((_BYTE *)this + 144);
  if ((v17 & 8) != 0)
    goto LABEL_19;
LABEL_13:
  if ((v17 & 0x10) != 0)
LABEL_14:
    PB::TextFormatter::format(a2, "timestampEnd", *((double *)this + 17));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::BioMotionLinkLengthFitParameters::readFrom(CMMsl::BioMotionLinkLengthFitParameters *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  _QWORD *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  _QWORD *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  _QWORD *v83;
  unint64_t v84;
  char *v85;
  unint64_t v86;
  char *v87;
  unint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  unint64_t v122;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_21:
      v19 = v11 & 7;
      if (v19 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 144) |= 4u;
          v20 = *((_QWORD *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_206;
          *((_QWORD *)this + 15) = *(_QWORD *)(*(_QWORD *)a2 + v20);
          goto LABEL_208;
        case 2u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v21 = *((_QWORD *)a2 + 1);
            v22 = *((_QWORD *)a2 + 2);
            while (v21 < v22 && !*((_BYTE *)a2 + 24))
            {
              v24 = (char *)*((_QWORD *)this + 5);
              v23 = *((_QWORD *)this + 6);
              if ((unint64_t)v24 >= v23)
              {
                v26 = (char *)*((_QWORD *)this + 4);
                v27 = (v24 - v26) >> 3;
                v28 = v27 + 1;
                if ((unint64_t)(v27 + 1) >> 61)
                  goto LABEL_216;
                v29 = v23 - (_QWORD)v26;
                if (v29 >> 2 > v28)
                  v28 = v29 >> 2;
                if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
                  v30 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v30 = v28;
                if (v30)
                {
                  v30 = (unint64_t)sub_2429112FC(v30);
                  v26 = (char *)*((_QWORD *)this + 4);
                  v24 = (char *)*((_QWORD *)this + 5);
                }
                else
                {
                  v31 = 0;
                }
                v32 = (_QWORD *)(v30 + 8 * v27);
                *v32 = 0;
                v25 = v32 + 1;
                while (v24 != v26)
                {
                  v33 = *((_QWORD *)v24 - 1);
                  v24 -= 8;
                  *--v32 = v33;
                }
                *((_QWORD *)this + 4) = v32;
                *((_QWORD *)this + 5) = v25;
                *((_QWORD *)this + 6) = v30 + 8 * v31;
                if (v26)
                  operator delete(v26);
              }
              else
              {
                *(_QWORD *)v24 = 0;
                v25 = v24 + 8;
              }
              *((_QWORD *)this + 5) = v25;
              v34 = *((_QWORD *)a2 + 1);
              if (v34 > 0xFFFFFFFFFFFFFFF7 || v34 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_134;
              *(v25 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v34);
              v22 = *((_QWORD *)a2 + 2);
              v21 = *((_QWORD *)a2 + 1) + 8;
              *((_QWORD *)a2 + 1) = v21;
            }
            goto LABEL_135;
          }
          v82 = (char *)*((_QWORD *)this + 5);
          v81 = *((_QWORD *)this + 6);
          if ((unint64_t)v82 >= v81)
          {
            v90 = (char *)*((_QWORD *)this + 4);
            v91 = (v82 - v90) >> 3;
            v92 = v91 + 1;
            if ((unint64_t)(v91 + 1) >> 61)
              goto LABEL_216;
            v93 = v81 - (_QWORD)v90;
            if (v93 >> 2 > v92)
              v92 = v93 >> 2;
            if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF8)
              v94 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v94 = v92;
            if (v94)
            {
              v94 = (unint64_t)sub_2429112FC(v94);
              v90 = (char *)*((_QWORD *)this + 4);
              v82 = (char *)*((_QWORD *)this + 5);
            }
            else
            {
              v95 = 0;
            }
            v114 = (_QWORD *)(v94 + 8 * v91);
            *v114 = 0;
            v83 = v114 + 1;
            while (v82 != v90)
            {
              v115 = *((_QWORD *)v82 - 1);
              v82 -= 8;
              *--v114 = v115;
            }
            *((_QWORD *)this + 4) = v114;
            *((_QWORD *)this + 5) = v83;
            *((_QWORD *)this + 6) = v94 + 8 * v95;
            if (v90)
              operator delete(v90);
          }
          else
          {
            *(_QWORD *)v82 = 0;
            v83 = v82 + 8;
          }
          *((_QWORD *)this + 5) = v83;
          goto LABEL_204;
        case 3u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v35 = *((_QWORD *)a2 + 1);
            v36 = *((_QWORD *)a2 + 2);
            while (v35 < v36 && !*((_BYTE *)a2 + 24))
            {
              v38 = (char *)*((_QWORD *)this + 11);
              v37 = *((_QWORD *)this + 12);
              if ((unint64_t)v38 >= v37)
              {
                v40 = (char *)*((_QWORD *)this + 10);
                v41 = (v38 - v40) >> 3;
                v42 = v41 + 1;
                if ((unint64_t)(v41 + 1) >> 61)
                  goto LABEL_216;
                v43 = v37 - (_QWORD)v40;
                if (v43 >> 2 > v42)
                  v42 = v43 >> 2;
                if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
                  v44 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v44 = v42;
                if (v44)
                {
                  v44 = (unint64_t)sub_2429112FC(v44);
                  v40 = (char *)*((_QWORD *)this + 10);
                  v38 = (char *)*((_QWORD *)this + 11);
                }
                else
                {
                  v45 = 0;
                }
                v46 = (_QWORD *)(v44 + 8 * v41);
                *v46 = 0;
                v39 = v46 + 1;
                while (v38 != v40)
                {
                  v47 = *((_QWORD *)v38 - 1);
                  v38 -= 8;
                  *--v46 = v47;
                }
                *((_QWORD *)this + 10) = v46;
                *((_QWORD *)this + 11) = v39;
                *((_QWORD *)this + 12) = v44 + 8 * v45;
                if (v40)
                  operator delete(v40);
              }
              else
              {
                *(_QWORD *)v38 = 0;
                v39 = v38 + 8;
              }
              *((_QWORD *)this + 11) = v39;
              v48 = *((_QWORD *)a2 + 1);
              if (v48 > 0xFFFFFFFFFFFFFFF7 || v48 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_134;
              *(v39 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v48);
              v36 = *((_QWORD *)a2 + 2);
              v35 = *((_QWORD *)a2 + 1) + 8;
              *((_QWORD *)a2 + 1) = v35;
            }
            goto LABEL_135;
          }
          v85 = (char *)*((_QWORD *)this + 11);
          v84 = *((_QWORD *)this + 12);
          if ((unint64_t)v85 >= v84)
          {
            v96 = (char *)*((_QWORD *)this + 10);
            v97 = (v85 - v96) >> 3;
            v98 = v97 + 1;
            if ((unint64_t)(v97 + 1) >> 61)
              goto LABEL_216;
            v99 = v84 - (_QWORD)v96;
            if (v99 >> 2 > v98)
              v98 = v99 >> 2;
            if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFF8)
              v100 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v100 = v98;
            if (v100)
            {
              v100 = (unint64_t)sub_2429112FC(v100);
              v96 = (char *)*((_QWORD *)this + 10);
              v85 = (char *)*((_QWORD *)this + 11);
            }
            else
            {
              v101 = 0;
            }
            v116 = (_QWORD *)(v100 + 8 * v97);
            *v116 = 0;
            v83 = v116 + 1;
            while (v85 != v96)
            {
              v117 = *((_QWORD *)v85 - 1);
              v85 -= 8;
              *--v116 = v117;
            }
            *((_QWORD *)this + 10) = v116;
            *((_QWORD *)this + 11) = v83;
            *((_QWORD *)this + 12) = v100 + 8 * v101;
            if (v96)
              operator delete(v96);
          }
          else
          {
            *(_QWORD *)v85 = 0;
            v83 = v85 + 8;
          }
          *((_QWORD *)this + 11) = v83;
          goto LABEL_204;
        case 4u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v49 = *((_QWORD *)a2 + 1);
            v50 = *((_QWORD *)a2 + 2);
            while (v49 < v50 && !*((_BYTE *)a2 + 24))
            {
              v52 = (char *)*((_QWORD *)this + 2);
              v51 = *((_QWORD *)this + 3);
              if ((unint64_t)v52 >= v51)
              {
                v54 = (char *)*((_QWORD *)this + 1);
                v55 = (v52 - v54) >> 3;
                v56 = v55 + 1;
                if ((unint64_t)(v55 + 1) >> 61)
                  goto LABEL_216;
                v57 = v51 - (_QWORD)v54;
                if (v57 >> 2 > v56)
                  v56 = v57 >> 2;
                if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
                  v58 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v58 = v56;
                if (v58)
                {
                  v58 = (unint64_t)sub_2429112FC(v58);
                  v54 = (char *)*((_QWORD *)this + 1);
                  v52 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v59 = 0;
                }
                v60 = (_QWORD *)(v58 + 8 * v55);
                *v60 = 0;
                v53 = v60 + 1;
                while (v52 != v54)
                {
                  v61 = *((_QWORD *)v52 - 1);
                  v52 -= 8;
                  *--v60 = v61;
                }
                *((_QWORD *)this + 1) = v60;
                *((_QWORD *)this + 2) = v53;
                *((_QWORD *)this + 3) = v58 + 8 * v59;
                if (v54)
                  operator delete(v54);
              }
              else
              {
                *(_QWORD *)v52 = 0;
                v53 = v52 + 8;
              }
              *((_QWORD *)this + 2) = v53;
              v62 = *((_QWORD *)a2 + 1);
              if (v62 > 0xFFFFFFFFFFFFFFF7 || v62 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_134;
              *(v53 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v62);
              v50 = *((_QWORD *)a2 + 2);
              v49 = *((_QWORD *)a2 + 1) + 8;
              *((_QWORD *)a2 + 1) = v49;
            }
            goto LABEL_135;
          }
          v87 = (char *)*((_QWORD *)this + 2);
          v86 = *((_QWORD *)this + 3);
          if ((unint64_t)v87 >= v86)
          {
            v102 = (char *)*((_QWORD *)this + 1);
            v103 = (v87 - v102) >> 3;
            v104 = v103 + 1;
            if ((unint64_t)(v103 + 1) >> 61)
              goto LABEL_216;
            v105 = v86 - (_QWORD)v102;
            if (v105 >> 2 > v104)
              v104 = v105 >> 2;
            if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFF8)
              v106 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v106 = v104;
            if (v106)
            {
              v106 = (unint64_t)sub_2429112FC(v106);
              v102 = (char *)*((_QWORD *)this + 1);
              v87 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v107 = 0;
            }
            v118 = (_QWORD *)(v106 + 8 * v103);
            *v118 = 0;
            v83 = v118 + 1;
            while (v87 != v102)
            {
              v119 = *((_QWORD *)v87 - 1);
              v87 -= 8;
              *--v118 = v119;
            }
            *((_QWORD *)this + 1) = v118;
            *((_QWORD *)this + 2) = v83;
            *((_QWORD *)this + 3) = v106 + 8 * v107;
            if (v102)
              operator delete(v102);
          }
          else
          {
            *(_QWORD *)v87 = 0;
            v83 = v87 + 8;
          }
          *((_QWORD *)this + 2) = v83;
          goto LABEL_204;
        case 5u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v63 = *((_QWORD *)a2 + 1);
            v64 = *((_QWORD *)a2 + 2);
            while (v63 < v64 && !*((_BYTE *)a2 + 24))
            {
              v66 = (char *)*((_QWORD *)this + 8);
              v65 = *((_QWORD *)this + 9);
              if ((unint64_t)v66 >= v65)
              {
                v68 = (char *)*((_QWORD *)this + 7);
                v69 = (v66 - v68) >> 3;
                v70 = v69 + 1;
                if ((unint64_t)(v69 + 1) >> 61)
                  goto LABEL_216;
                v71 = v65 - (_QWORD)v68;
                if (v71 >> 2 > v70)
                  v70 = v71 >> 2;
                if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8)
                  v72 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v72 = v70;
                if (v72)
                {
                  v72 = (unint64_t)sub_2429112FC(v72);
                  v68 = (char *)*((_QWORD *)this + 7);
                  v66 = (char *)*((_QWORD *)this + 8);
                }
                else
                {
                  v73 = 0;
                }
                v74 = (_QWORD *)(v72 + 8 * v69);
                *v74 = 0;
                v67 = v74 + 1;
                while (v66 != v68)
                {
                  v75 = *((_QWORD *)v66 - 1);
                  v66 -= 8;
                  *--v74 = v75;
                }
                *((_QWORD *)this + 7) = v74;
                *((_QWORD *)this + 8) = v67;
                *((_QWORD *)this + 9) = v72 + 8 * v73;
                if (v68)
                  operator delete(v68);
              }
              else
              {
                *(_QWORD *)v66 = 0;
                v67 = v66 + 8;
              }
              *((_QWORD *)this + 8) = v67;
              v76 = *((_QWORD *)a2 + 1);
              if (v76 > 0xFFFFFFFFFFFFFFF7 || v76 + 8 > *((_QWORD *)a2 + 2))
              {
LABEL_134:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v67 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v76);
              v64 = *((_QWORD *)a2 + 2);
              v63 = *((_QWORD *)a2 + 1) + 8;
              *((_QWORD *)a2 + 1) = v63;
            }
LABEL_135:
            PB::Reader::recallMark();
          }
          else
          {
            v89 = (char *)*((_QWORD *)this + 8);
            v88 = *((_QWORD *)this + 9);
            if ((unint64_t)v89 >= v88)
            {
              v108 = (char *)*((_QWORD *)this + 7);
              v109 = (v89 - v108) >> 3;
              v110 = v109 + 1;
              if ((unint64_t)(v109 + 1) >> 61)
LABEL_216:
                sub_242729A44();
              v111 = v88 - (_QWORD)v108;
              if (v111 >> 2 > v110)
                v110 = v111 >> 2;
              if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFF8)
                v112 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v112 = v110;
              if (v112)
              {
                v112 = (unint64_t)sub_2429112FC(v112);
                v108 = (char *)*((_QWORD *)this + 7);
                v89 = (char *)*((_QWORD *)this + 8);
              }
              else
              {
                v113 = 0;
              }
              v120 = (_QWORD *)(v112 + 8 * v109);
              *v120 = 0;
              v83 = v120 + 1;
              while (v89 != v108)
              {
                v121 = *((_QWORD *)v89 - 1);
                v89 -= 8;
                *--v120 = v121;
              }
              *((_QWORD *)this + 7) = v120;
              *((_QWORD *)this + 8) = v83;
              *((_QWORD *)this + 9) = v112 + 8 * v113;
              if (v108)
                operator delete(v108);
            }
            else
            {
              *(_QWORD *)v89 = 0;
              v83 = v89 + 8;
            }
            *((_QWORD *)this + 8) = v83;
LABEL_204:
            v122 = *((_QWORD *)a2 + 1);
            if (v122 <= 0xFFFFFFFFFFFFFFF7 && v122 + 8 <= *((_QWORD *)a2 + 2))
            {
              *(v83 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v122);
LABEL_208:
              *((_QWORD *)a2 + 1) += 8;
            }
            else
            {
LABEL_206:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
          break;
        case 6u:
          *((_BYTE *)this + 144) |= 1u;
          v77 = *((_QWORD *)a2 + 1);
          if (v77 > 0xFFFFFFFFFFFFFFF7 || v77 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_206;
          *((_QWORD *)this + 13) = *(_QWORD *)(*(_QWORD *)a2 + v77);
          goto LABEL_208;
        case 7u:
          *((_BYTE *)this + 144) |= 2u;
          v78 = *((_QWORD *)a2 + 1);
          if (v78 > 0xFFFFFFFFFFFFFFF7 || v78 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_206;
          *((_QWORD *)this + 14) = *(_QWORD *)(*(_QWORD *)a2 + v78);
          goto LABEL_208;
        case 8u:
          *((_BYTE *)this + 144) |= 8u;
          v79 = *((_QWORD *)a2 + 1);
          if (v79 > 0xFFFFFFFFFFFFFFF7 || v79 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_206;
          *((_QWORD *)this + 16) = *(_QWORD *)(*(_QWORD *)a2 + v79);
          goto LABEL_208;
        case 9u:
          *((_BYTE *)this + 144) |= 0x10u;
          v80 = *((_QWORD *)a2 + 1);
          if (v80 > 0xFFFFFFFFFFFFFFF7 || v80 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_206;
          *((_QWORD *)this + 17) = *(_QWORD *)(*(_QWORD *)a2 + v80);
          goto LABEL_208;
        default:
          goto LABEL_19;
      }
      goto LABEL_209;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_21;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    if ((PB::Reader::skip(a2) & 1) == 0)
      return 0;
LABEL_209:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
}

uint64_t CMMsl::BioMotionLinkLengthFitParameters::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  double *v4;
  double *v5;
  double v6;
  double *v7;
  double *v8;
  double v9;
  double *v10;
  double *v11;
  double v12;
  double *v13;
  double *v14;
  double v15;
  char v16;

  v3 = this;
  if ((*(_BYTE *)(this + 144) & 4) != 0)
    this = PB::Writer::write(a2, *(double *)(this + 120));
  v4 = *(double **)(v3 + 32);
  v5 = *(double **)(v3 + 40);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6);
  }
  v7 = *(double **)(v3 + 80);
  v8 = *(double **)(v3 + 88);
  while (v7 != v8)
  {
    v9 = *v7++;
    this = PB::Writer::write(a2, v9);
  }
  v10 = *(double **)(v3 + 8);
  v11 = *(double **)(v3 + 16);
  while (v10 != v11)
  {
    v12 = *v10++;
    this = PB::Writer::write(a2, v12);
  }
  v13 = *(double **)(v3 + 56);
  v14 = *(double **)(v3 + 64);
  while (v13 != v14)
  {
    v15 = *v13++;
    this = PB::Writer::write(a2, v15);
  }
  v16 = *(_BYTE *)(v3 + 144);
  if ((v16 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 104));
    v16 = *(_BYTE *)(v3 + 144);
    if ((v16 & 2) == 0)
    {
LABEL_17:
      if ((v16 & 8) == 0)
        goto LABEL_18;
      goto LABEL_22;
    }
  }
  else if ((*(_BYTE *)(v3 + 144) & 2) == 0)
  {
    goto LABEL_17;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 112));
  v16 = *(_BYTE *)(v3 + 144);
  if ((v16 & 8) == 0)
  {
LABEL_18:
    if ((v16 & 0x10) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 136));
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 128));
  if ((*(_BYTE *)(v3 + 144) & 0x10) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 136));
  return this;
}

BOOL CMMsl::BioMotionLinkLengthFitParameters::operator==(uint64_t a1, uint64_t a2)
{
  double *v2;
  double *v3;
  double *v4;
  double *v5;
  double *v6;
  double *v7;
  double *v8;
  double *v9;
  double *v10;
  double *v11;
  double *v12;
  double *v13;
  _BOOL8 v14;

  if ((*(_BYTE *)(a1 + 144) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 144) & 4) == 0 || *(double *)(a1 + 120) != *(double *)(a2 + 120))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 144) & 4) != 0)
  {
    return 0;
  }
  v3 = *(double **)(a1 + 32);
  v2 = *(double **)(a1 + 40);
  v4 = *(double **)(a2 + 32);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 40) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v6 = *(double **)(a1 + 80);
  v5 = *(double **)(a1 + 88);
  v7 = *(double **)(a2 + 80);
  if ((char *)v5 - (char *)v6 != *(_QWORD *)(a2 + 88) - (_QWORD)v7)
    return 0;
  while (v6 != v5)
  {
    if (*v6 != *v7)
      return 0;
    ++v6;
    ++v7;
  }
  v9 = *(double **)(a1 + 8);
  v8 = *(double **)(a1 + 16);
  v10 = *(double **)(a2 + 8);
  if ((char *)v8 - (char *)v9 != *(_QWORD *)(a2 + 16) - (_QWORD)v10)
    return 0;
  while (v9 != v8)
  {
    if (*v9 != *v10)
      return 0;
    ++v9;
    ++v10;
  }
  v12 = *(double **)(a1 + 56);
  v11 = *(double **)(a1 + 64);
  v13 = *(double **)(a2 + 56);
  if ((char *)v11 - (char *)v12 != *(_QWORD *)(a2 + 64) - (_QWORD)v13)
    return 0;
  while (v12 != v11)
  {
    if (*v12 != *v13)
      return 0;
    ++v12;
    ++v13;
  }
  if ((*(_BYTE *)(a1 + 144) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 144) & 1) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 144) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 144) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 144) & 2) == 0 || *(double *)(a1 + 112) != *(double *)(a2 + 112))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 144) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 144) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 144) & 8) == 0 || *(double *)(a1 + 128) != *(double *)(a2 + 128))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 144) & 8) != 0)
  {
    return 0;
  }
  v14 = (*(_BYTE *)(a2 + 144) & 0x10) == 0;
  if ((*(_BYTE *)(a1 + 144) & 0x10) != 0)
    return (*(_BYTE *)(a2 + 144) & 0x10) != 0 && *(double *)(a1 + 136) == *(double *)(a2 + 136);
  return v14;
}

uint64_t CMMsl::BioMotionLinkLengthFitParameters::hash_value(CMMsl::BioMotionLinkLengthFitParameters *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;

  if ((*((_BYTE *)this + 144) & 4) != 0)
  {
    if (*((double *)this + 15) == 0.0)
      v2 = 0;
    else
      v2 = *((_QWORD *)this + 15);
  }
  else
  {
    v2 = 0;
  }
  v3 = PBHashBytes();
  v4 = PBHashBytes();
  v5 = PBHashBytes();
  v6 = PBHashBytes();
  if ((*((_BYTE *)this + 144) & 1) == 0)
  {
    v7 = 0.0;
    if ((*((_BYTE *)this + 144) & 2) != 0)
      goto LABEL_8;
LABEL_20:
    v8 = 0.0;
    if ((*((_BYTE *)this + 144) & 8) != 0)
      goto LABEL_11;
    goto LABEL_21;
  }
  v7 = *((double *)this + 13);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((*((_BYTE *)this + 144) & 2) == 0)
    goto LABEL_20;
LABEL_8:
  v8 = *((double *)this + 14);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((*((_BYTE *)this + 144) & 8) != 0)
  {
LABEL_11:
    v9 = *((double *)this + 16);
    if (v9 == 0.0)
      v9 = 0.0;
    if ((*((_BYTE *)this + 144) & 0x10) != 0)
      goto LABEL_14;
LABEL_22:
    v10 = 0.0;
    return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10;
  }
LABEL_21:
  v9 = 0.0;
  if ((*((_BYTE *)this + 144) & 0x10) == 0)
    goto LABEL_22;
LABEL_14:
  v10 = *((double *)this + 17);
  if (v10 == 0.0)
    v10 = 0.0;
  return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10;
}

uint64_t CMMsl::BioMotionOnlineLinkLengthUpdate::BioMotionOnlineLinkLengthUpdate(uint64_t this)
{
  *(_QWORD *)this = &off_25135C918;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135C918;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::BioMotionOnlineLinkLengthUpdate::~BioMotionOnlineLinkLengthUpdate(CMMsl::BioMotionOnlineLinkLengthUpdate *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::BioMotionOnlineLinkLengthUpdate::BioMotionOnlineLinkLengthUpdate(uint64_t this, const CMMsl::BioMotionOnlineLinkLengthUpdate *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;

  *(_QWORD *)this = &off_25135C918;
  *(_DWORD *)(this + 20) = 0;
  v2 = *((_BYTE *)a2 + 20);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 20);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v5 = *((_BYTE *)a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(this + 20) = v3;
    *(_BYTE *)(this + 16) = v5;
    v2 = *((_BYTE *)a2 + 20);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0)
      return this;
LABEL_10:
    v7 = *((_BYTE *)a2 + 18);
    *(_BYTE *)(this + 20) = v3 | 8;
    *(_BYTE *)(this + 18) = v7;
    return this;
  }
  v6 = *((_BYTE *)a2 + 17);
  v3 |= 4u;
  *(_BYTE *)(this + 20) = v3;
  *(_BYTE *)(this + 17) = v6;
  if ((*((_BYTE *)a2 + 20) & 8) != 0)
    goto LABEL_10;
  return this;
}

uint64_t CMMsl::BioMotionOnlineLinkLengthUpdate::operator=(uint64_t a1, const CMMsl::BioMotionOnlineLinkLengthUpdate *a2)
{
  int v3;
  uint64_t v4;
  _BYTE v6[8];
  uint64_t v7;
  __int16 v8;
  char v9;
  int v10;

  if ((const CMMsl::BioMotionOnlineLinkLengthUpdate *)a1 != a2)
  {
    CMMsl::BioMotionOnlineLinkLengthUpdate::BioMotionOnlineLinkLengthUpdate((uint64_t)v6, a2);
    v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v7;
    v7 = v4;
    LOWORD(v3) = *(_WORD *)(a1 + 16);
    *(_WORD *)(a1 + 16) = v8;
    v8 = v3;
    LOBYTE(v3) = *(_BYTE *)(a1 + 18);
    *(_BYTE *)(a1 + 18) = v9;
    v9 = v3;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::BioMotionOnlineLinkLengthUpdate *a2, CMMsl::BioMotionOnlineLinkLengthUpdate *a3)
{
  int v3;
  double result;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  LOBYTE(v3) = *((_BYTE *)this + 16);
  *((_BYTE *)this + 16) = *((_BYTE *)a2 + 16);
  *((_BYTE *)a2 + 16) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 17);
  *((_BYTE *)this + 17) = *((_BYTE *)a2 + 17);
  *((_BYTE *)a2 + 17) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 18);
  *((_BYTE *)this + 18) = *((_BYTE *)a2 + 18);
  *((_BYTE *)a2 + 18) = v3;
  return result;
}

double CMMsl::BioMotionOnlineLinkLengthUpdate::BioMotionOnlineLinkLengthUpdate(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135C918;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135C918;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  return result;
}

uint64_t CMMsl::BioMotionOnlineLinkLengthUpdate::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  char v6;
  int v7;
  uint64_t v8;
  _QWORD v10[2];
  __int16 v11;
  char v12;
  int v13;

  if (a1 != a2)
  {
    v10[0] = &off_25135C918;
    v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_WORD *)(a2 + 16);
    v6 = *(_BYTE *)(a2 + 18);
    v7 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    v13 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v10[1] = v8;
    LOWORD(v3) = *(_WORD *)(a1 + 16);
    *(_WORD *)(a1 + 16) = v5;
    v11 = v3;
    LOBYTE(v3) = *(_BYTE *)(a1 + 18);
    *(_BYTE *)(a1 + 18) = v6;
    v12 = v3;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::BioMotionOnlineLinkLengthUpdate::formatText(CMMsl::BioMotionOnlineLinkLengthUpdate *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "timestampEnd", *((double *)this + 1));
    v5 = *((_BYTE *)this + 20);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "updatedLinkLengthY");
      if ((*((_BYTE *)this + 20) & 8) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 20) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "updatedLinkLengthX");
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "updatedLinkLengthZ");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BioMotionOnlineLinkLengthUpdate::readFrom(CMMsl::BioMotionOnlineLinkLengthUpdate *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v20;
  BOOL v21;
  int v22;
  BOOL v23;
  int v24;
  BOOL v25;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
        break;
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_24;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
LABEL_21:
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_24:
    if ((v11 & 7) != 4)
    {
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 20) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
          {
            *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
            v2 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v2;
          }
          else
          {
            *((_BYTE *)a2 + 24) = 1;
          }
          goto LABEL_21;
        case 2u:
          *((_BYTE *)this + 20) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 >= *((_QWORD *)a2 + 2))
          {
            v21 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v20 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
            *((_QWORD *)a2 + 1) = v2;
            v21 = v20 != 0;
          }
          *((_BYTE *)this + 16) = v21;
          goto LABEL_21;
        case 3u:
          *((_BYTE *)this + 20) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 >= *((_QWORD *)a2 + 2))
          {
            v23 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v22 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
            *((_QWORD *)a2 + 1) = v2;
            v23 = v22 != 0;
          }
          *((_BYTE *)this + 17) = v23;
          goto LABEL_21;
        case 4u:
          *((_BYTE *)this + 20) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 >= *((_QWORD *)a2 + 2))
          {
            v25 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v24 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
            *((_QWORD *)a2 + 1) = v2;
            v25 = v24 != 0;
          }
          *((_BYTE *)this + 18) = v25;
          goto LABEL_21;
        default:
          goto LABEL_19;
      }
    }
    v4 = 0;
  }
  return v4 == 0;
}

uint64_t CMMsl::BioMotionOnlineLinkLengthUpdate::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 20);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 20) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2);
  v4 = *(_BYTE *)(v3 + 20);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return this;
    return PB::Writer::write(a2);
  }
LABEL_8:
  this = PB::Writer::write(a2);
  if ((*(_BYTE *)(v3 + 20) & 8) != 0)
    return PB::Writer::write(a2);
  return this;
}

BOOL CMMsl::BioMotionOnlineLinkLengthUpdate::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 2) == 0 || *(unsigned __int8 *)(a1 + 16) != *(unsigned __int8 *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 20) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 4) == 0 || *(unsigned __int8 *)(a1 + 17) != *(unsigned __int8 *)(a2 + 17))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 8) == 0;
  if ((*(_BYTE *)(a1 + 20) & 8) != 0)
    return (*(_BYTE *)(a2 + 20) & 8) != 0 && *(unsigned __int8 *)(a1 + 18) == *(unsigned __int8 *)(a2 + 18);
  return v2;
}

uint64_t CMMsl::BioMotionOnlineLinkLengthUpdate::hash_value(CMMsl::BioMotionOnlineLinkLengthUpdate *this)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
    {
LABEL_3:
      v2 = *((unsigned __int8 *)this + 16);
      if ((*((_BYTE *)this + 20) & 4) != 0)
        goto LABEL_4;
LABEL_10:
      v3 = 0;
      if ((*((_BYTE *)this + 20) & 8) != 0)
        goto LABEL_5;
LABEL_11:
      v4 = 0;
      return v2 ^ *(_QWORD *)&v1 ^ v3 ^ v4;
    }
  }
  else
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 20) & 4) == 0)
    goto LABEL_10;
LABEL_4:
  v3 = *((unsigned __int8 *)this + 17);
  if ((*((_BYTE *)this + 20) & 8) == 0)
    goto LABEL_11;
LABEL_5:
  v4 = *((unsigned __int8 *)this + 18);
  return v2 ^ *(_QWORD *)&v1 ^ v3 ^ v4;
}

double CMMsl::BioMotionPose::BioMotionPose(CMMsl::BioMotionPose *this)
{
  double result;

  *(_QWORD *)this = &off_25135C950;
  *((_DWORD *)this + 36) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_QWORD *)this + 15) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_25135C950;
  *((_DWORD *)this + 36) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_QWORD *)this + 15) = 0;
  return result;
}

void CMMsl::BioMotionPose::~BioMotionPose(CMMsl::BioMotionPose *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)this = &off_25135C950;
  v2 = (void *)*((_QWORD *)this + 13);
  if (v2)
  {
    *((_QWORD *)this + 14) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 10);
  if (v3)
  {
    *((_QWORD *)this + 11) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 7);
  if (v4)
  {
    *((_QWORD *)this + 8) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 4);
  if (v5)
  {
    *((_QWORD *)this + 5) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 1);
  if (v6)
  {
    *((_QWORD *)this + 2) = v6;
    operator delete(v6);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::BioMotionPose::~BioMotionPose(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::BioMotionPose *CMMsl::BioMotionPose::BioMotionPose(char **this, char **a2)
{
  _QWORD *v4;
  char v5;
  int v6;
  int v8;
  char *v9;

  *this = (char *)&off_25135C950;
  *(_OWORD *)(this + 1) = 0u;
  v4 = this + 1;
  *(_OWORD *)(this + 7) = 0u;
  *(_OWORD *)(this + 13) = 0u;
  *((_DWORD *)this + 36) = 0;
  *(_OWORD *)(this + 3) = 0u;
  *(_OWORD *)(this + 5) = 0u;
  *(_OWORD *)(this + 9) = 0u;
  *(_OWORD *)(this + 11) = 0u;
  this[15] = 0;
  if (this != a2)
  {
    sub_2429111C4(v4, a2[1], a2[2], (a2[2] - a2[1]) >> 3);
    sub_2429111C4(this + 7, a2[7], a2[8], (a2[8] - a2[7]) >> 3);
    sub_2429111C4(this + 4, a2[4], a2[5], (a2[5] - a2[4]) >> 3);
    sub_2429111C4(this + 10, a2[10], a2[11], (a2[11] - a2[10]) >> 3);
    sub_2429111C4(this + 13, a2[13], a2[14], (a2[14] - a2[13]) >> 3);
  }
  v5 = *((_BYTE *)a2 + 144);
  if ((v5 & 4) == 0)
  {
    if (((_BYTE)a2[18] & 1) == 0)
      goto LABEL_5;
LABEL_9:
    v9 = a2[16];
    *((_BYTE *)this + 144) |= 1u;
    this[16] = v9;
    if (((_BYTE)a2[18] & 2) == 0)
      return (CMMsl::BioMotionPose *)this;
    goto LABEL_6;
  }
  v8 = *((_DWORD *)a2 + 35);
  *((_BYTE *)this + 144) |= 4u;
  *((_DWORD *)this + 35) = v8;
  v5 = *((_BYTE *)a2 + 144);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_5:
  if ((v5 & 2) != 0)
  {
LABEL_6:
    v6 = *((_DWORD *)a2 + 34);
    *((_BYTE *)this + 144) |= 2u;
    *((_DWORD *)this + 34) = v6;
  }
  return (CMMsl::BioMotionPose *)this;
}

CMMsl *CMMsl::BioMotionPose::operator=(CMMsl *a1, char **a2)
{
  CMMsl::BioMotionPose *v3;
  char *v5[19];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::BioMotionPose::BioMotionPose(v5, a2);
    CMMsl::swap(a1, (CMMsl::BioMotionPose *)v5, v3);
    CMMsl::BioMotionPose::~BioMotionPose((CMMsl::BioMotionPose *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::BioMotionPose *a2, CMMsl::BioMotionPose *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double result;

  v3 = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  v7 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v7;
  v8 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v8;
  v9 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v9;
  v10 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v10;
  v11 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v11;
  v12 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v12;
  v13 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v13;
  v14 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v14;
  v15 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v15;
  v16 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v16;
  v17 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v17;
  v18 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v18;
  LODWORD(v18) = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v18;
  result = *((double *)this + 16);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((double *)a2 + 16) = result;
  LODWORD(v18) = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v18;
  return result;
}

uint64_t CMMsl::BioMotionPose::BioMotionPose(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = &off_25135C950;
  v4 = a1 + 32;
  v5 = a1 + 80;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  v6 = a1 + 104;
  *(_OWORD *)(a1 + 56) = 0u;
  v7 = a1 + 56;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a2 + 144) = 0;
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  sub_242911330(v7, (__n128 *)(a2 + 56));
  sub_242911330(v4, (__n128 *)(a2 + 32));
  sub_242911330(v5, (__n128 *)(a2 + 80));
  sub_242911330(v6, (__n128 *)(a2 + 104));
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  return a1;
}

CMMsl *CMMsl::BioMotionPose::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::BioMotionPose *v3;
  _BYTE v5[152];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::BioMotionPose::BioMotionPose((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::BioMotionPose *)v5, v3);
    CMMsl::BioMotionPose::~BioMotionPose((CMMsl::BioMotionPose *)v5);
  }
  return a1;
}

uint64_t CMMsl::BioMotionPose::formatText(CMMsl::BioMotionPose *this, PB::TextFormatter *a2, const char *a3)
{
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;
  char v11;
  double *v12;
  double *v13;
  double v14;
  double *v15;
  double *v16;
  double v17;
  double *v18;
  double *v19;
  double v20;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (double *)*((_QWORD *)this + 1);
  v6 = (double *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "attitude", v7);
  }
  if ((*((_BYTE *)this + 144) & 2) != 0)
    PB::TextFormatter::format(a2, "modelType");
  v8 = (double *)*((_QWORD *)this + 4);
  v9 = (double *)*((_QWORD *)this + 5);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(a2, "rotationRate", v10);
  }
  v11 = *((_BYTE *)this + 144);
  if ((v11 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "status");
    v11 = *((_BYTE *)this + 144);
  }
  if ((v11 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 16));
  v12 = (double *)*((_QWORD *)this + 7);
  v13 = (double *)*((_QWORD *)this + 8);
  while (v12 != v13)
  {
    v14 = *v12++;
    PB::TextFormatter::format(a2, "translation", v14);
  }
  v15 = (double *)*((_QWORD *)this + 10);
  v16 = (double *)*((_QWORD *)this + 11);
  while (v15 != v16)
  {
    v17 = *v15++;
    PB::TextFormatter::format(a2, "userAcceleration", v17);
  }
  v18 = (double *)*((_QWORD *)this + 13);
  v19 = (double *)*((_QWORD *)this + 14);
  while (v18 != v19)
  {
    v20 = *v18++;
    PB::TextFormatter::format(a2, "velocity", v20);
  }
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::BioMotionPose::readFrom(CMMsl::BioMotionPose *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  _QWORD *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  _QWORD *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  _QWORD *v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  char v93;
  unsigned int v94;
  uint64_t v95;
  unint64_t v96;
  char v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  char v102;
  unsigned int v103;
  uint64_t v104;
  unint64_t v105;
  char v106;
  unint64_t v107;
  char *v108;
  _QWORD *v109;
  unint64_t v110;
  char *v111;
  unint64_t v112;
  char *v113;
  unint64_t v114;
  char *v115;
  unint64_t v116;
  char *v117;
  char v118;
  unsigned int v119;
  unint64_t v120;
  char v121;
  char v122;
  unsigned int v123;
  unint64_t v124;
  char v125;
  char *v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  unint64_t v166;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_21:
      v19 = v11 & 7;
      if (v19 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v20 = *((_QWORD *)a2 + 1);
            v21 = *((_QWORD *)a2 + 2);
            while (v20 < v21 && !*((_BYTE *)a2 + 24))
            {
              v23 = (char *)*((_QWORD *)this + 2);
              v22 = *((_QWORD *)this + 3);
              if ((unint64_t)v23 >= v22)
              {
                v25 = (char *)*((_QWORD *)this + 1);
                v26 = (v23 - v25) >> 3;
                v27 = v26 + 1;
                if ((unint64_t)(v26 + 1) >> 61)
                  goto LABEL_283;
                v28 = v22 - (_QWORD)v25;
                if (v28 >> 2 > v27)
                  v27 = v28 >> 2;
                if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
                  v29 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v29 = v27;
                if (v29)
                {
                  v29 = (unint64_t)sub_2429112FC(v29);
                  v25 = (char *)*((_QWORD *)this + 1);
                  v23 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v30 = 0;
                }
                v31 = (_QWORD *)(v29 + 8 * v26);
                *v31 = 0;
                v24 = v31 + 1;
                while (v23 != v25)
                {
                  v32 = *((_QWORD *)v23 - 1);
                  v23 -= 8;
                  *--v31 = v32;
                }
                *((_QWORD *)this + 1) = v31;
                *((_QWORD *)this + 2) = v24;
                *((_QWORD *)this + 3) = v29 + 8 * v30;
                if (v25)
                  operator delete(v25);
              }
              else
              {
                *(_QWORD *)v23 = 0;
                v24 = v23 + 8;
              }
              *((_QWORD *)this + 2) = v24;
              v33 = *((_QWORD *)a2 + 1);
              if (v33 > 0xFFFFFFFFFFFFFFF7 || v33 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_160;
              *(v24 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v33);
              v21 = *((_QWORD *)a2 + 2);
              v20 = *((_QWORD *)a2 + 1) + 8;
              *((_QWORD *)a2 + 1) = v20;
            }
            goto LABEL_161;
          }
          v108 = (char *)*((_QWORD *)this + 2);
          v107 = *((_QWORD *)this + 3);
          if ((unint64_t)v108 >= v107)
          {
            v126 = (char *)*((_QWORD *)this + 1);
            v127 = (v108 - v126) >> 3;
            v128 = v127 + 1;
            if ((unint64_t)(v127 + 1) >> 61)
              goto LABEL_283;
            v129 = v107 - (_QWORD)v126;
            if (v129 >> 2 > v128)
              v128 = v129 >> 2;
            if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFF8)
              v130 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v130 = v128;
            if (v130)
            {
              v130 = (unint64_t)sub_2429112FC(v130);
              v126 = (char *)*((_QWORD *)this + 1);
              v108 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v131 = 0;
            }
            v156 = (_QWORD *)(v130 + 8 * v127);
            *v156 = 0;
            v109 = v156 + 1;
            while (v108 != v126)
            {
              v157 = *((_QWORD *)v108 - 1);
              v108 -= 8;
              *--v156 = v157;
            }
            *((_QWORD *)this + 1) = v156;
            *((_QWORD *)this + 2) = v109;
            *((_QWORD *)this + 3) = v130 + 8 * v131;
            if (v126)
              operator delete(v126);
          }
          else
          {
            *(_QWORD *)v108 = 0;
            v109 = v108 + 8;
          }
          *((_QWORD *)this + 2) = v109;
          goto LABEL_269;
        case 2u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v34 = *((_QWORD *)a2 + 1);
            v35 = *((_QWORD *)a2 + 2);
            while (v34 < v35 && !*((_BYTE *)a2 + 24))
            {
              v37 = (char *)*((_QWORD *)this + 8);
              v36 = *((_QWORD *)this + 9);
              if ((unint64_t)v37 >= v36)
              {
                v39 = (char *)*((_QWORD *)this + 7);
                v40 = (v37 - v39) >> 3;
                v41 = v40 + 1;
                if ((unint64_t)(v40 + 1) >> 61)
                  goto LABEL_283;
                v42 = v36 - (_QWORD)v39;
                if (v42 >> 2 > v41)
                  v41 = v42 >> 2;
                if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
                  v43 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v43 = v41;
                if (v43)
                {
                  v43 = (unint64_t)sub_2429112FC(v43);
                  v39 = (char *)*((_QWORD *)this + 7);
                  v37 = (char *)*((_QWORD *)this + 8);
                }
                else
                {
                  v44 = 0;
                }
                v45 = (_QWORD *)(v43 + 8 * v40);
                *v45 = 0;
                v38 = v45 + 1;
                while (v37 != v39)
                {
                  v46 = *((_QWORD *)v37 - 1);
                  v37 -= 8;
                  *--v45 = v46;
                }
                *((_QWORD *)this + 7) = v45;
                *((_QWORD *)this + 8) = v38;
                *((_QWORD *)this + 9) = v43 + 8 * v44;
                if (v39)
                  operator delete(v39);
              }
              else
              {
                *(_QWORD *)v37 = 0;
                v38 = v37 + 8;
              }
              *((_QWORD *)this + 8) = v38;
              v47 = *((_QWORD *)a2 + 1);
              if (v47 > 0xFFFFFFFFFFFFFFF7 || v47 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_160;
              *(v38 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v47);
              v35 = *((_QWORD *)a2 + 2);
              v34 = *((_QWORD *)a2 + 1) + 8;
              *((_QWORD *)a2 + 1) = v34;
            }
            goto LABEL_161;
          }
          v111 = (char *)*((_QWORD *)this + 8);
          v110 = *((_QWORD *)this + 9);
          if ((unint64_t)v111 >= v110)
          {
            v132 = (char *)*((_QWORD *)this + 7);
            v133 = (v111 - v132) >> 3;
            v134 = v133 + 1;
            if ((unint64_t)(v133 + 1) >> 61)
              goto LABEL_283;
            v135 = v110 - (_QWORD)v132;
            if (v135 >> 2 > v134)
              v134 = v135 >> 2;
            if ((unint64_t)v135 >= 0x7FFFFFFFFFFFFFF8)
              v136 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v136 = v134;
            if (v136)
            {
              v136 = (unint64_t)sub_2429112FC(v136);
              v132 = (char *)*((_QWORD *)this + 7);
              v111 = (char *)*((_QWORD *)this + 8);
            }
            else
            {
              v137 = 0;
            }
            v158 = (_QWORD *)(v136 + 8 * v133);
            *v158 = 0;
            v109 = v158 + 1;
            while (v111 != v132)
            {
              v159 = *((_QWORD *)v111 - 1);
              v111 -= 8;
              *--v158 = v159;
            }
            *((_QWORD *)this + 7) = v158;
            *((_QWORD *)this + 8) = v109;
            *((_QWORD *)this + 9) = v136 + 8 * v137;
            if (v132)
              operator delete(v132);
          }
          else
          {
            *(_QWORD *)v111 = 0;
            v109 = v111 + 8;
          }
          *((_QWORD *)this + 8) = v109;
          goto LABEL_269;
        case 3u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v48 = *((_QWORD *)a2 + 1);
            v49 = *((_QWORD *)a2 + 2);
            while (v48 < v49 && !*((_BYTE *)a2 + 24))
            {
              v51 = (char *)*((_QWORD *)this + 5);
              v50 = *((_QWORD *)this + 6);
              if ((unint64_t)v51 >= v50)
              {
                v53 = (char *)*((_QWORD *)this + 4);
                v54 = (v51 - v53) >> 3;
                v55 = v54 + 1;
                if ((unint64_t)(v54 + 1) >> 61)
                  goto LABEL_283;
                v56 = v50 - (_QWORD)v53;
                if (v56 >> 2 > v55)
                  v55 = v56 >> 2;
                if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
                  v57 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v57 = v55;
                if (v57)
                {
                  v57 = (unint64_t)sub_2429112FC(v57);
                  v53 = (char *)*((_QWORD *)this + 4);
                  v51 = (char *)*((_QWORD *)this + 5);
                }
                else
                {
                  v58 = 0;
                }
                v59 = (_QWORD *)(v57 + 8 * v54);
                *v59 = 0;
                v52 = v59 + 1;
                while (v51 != v53)
                {
                  v60 = *((_QWORD *)v51 - 1);
                  v51 -= 8;
                  *--v59 = v60;
                }
                *((_QWORD *)this + 4) = v59;
                *((_QWORD *)this + 5) = v52;
                *((_QWORD *)this + 6) = v57 + 8 * v58;
                if (v53)
                  operator delete(v53);
              }
              else
              {
                *(_QWORD *)v51 = 0;
                v52 = v51 + 8;
              }
              *((_QWORD *)this + 5) = v52;
              v61 = *((_QWORD *)a2 + 1);
              if (v61 > 0xFFFFFFFFFFFFFFF7 || v61 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_160;
              *(v52 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v61);
              v49 = *((_QWORD *)a2 + 2);
              v48 = *((_QWORD *)a2 + 1) + 8;
              *((_QWORD *)a2 + 1) = v48;
            }
            goto LABEL_161;
          }
          v113 = (char *)*((_QWORD *)this + 5);
          v112 = *((_QWORD *)this + 6);
          if ((unint64_t)v113 >= v112)
          {
            v138 = (char *)*((_QWORD *)this + 4);
            v139 = (v113 - v138) >> 3;
            v140 = v139 + 1;
            if ((unint64_t)(v139 + 1) >> 61)
              goto LABEL_283;
            v141 = v112 - (_QWORD)v138;
            if (v141 >> 2 > v140)
              v140 = v141 >> 2;
            if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFF8)
              v142 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v142 = v140;
            if (v142)
            {
              v142 = (unint64_t)sub_2429112FC(v142);
              v138 = (char *)*((_QWORD *)this + 4);
              v113 = (char *)*((_QWORD *)this + 5);
            }
            else
            {
              v143 = 0;
            }
            v160 = (_QWORD *)(v142 + 8 * v139);
            *v160 = 0;
            v109 = v160 + 1;
            while (v113 != v138)
            {
              v161 = *((_QWORD *)v113 - 1);
              v113 -= 8;
              *--v160 = v161;
            }
            *((_QWORD *)this + 4) = v160;
            *((_QWORD *)this + 5) = v109;
            *((_QWORD *)this + 6) = v142 + 8 * v143;
            if (v138)
              operator delete(v138);
          }
          else
          {
            *(_QWORD *)v113 = 0;
            v109 = v113 + 8;
          }
          *((_QWORD *)this + 5) = v109;
          goto LABEL_269;
        case 4u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v62 = *((_QWORD *)a2 + 1);
            v63 = *((_QWORD *)a2 + 2);
            while (v62 < v63 && !*((_BYTE *)a2 + 24))
            {
              v65 = (char *)*((_QWORD *)this + 11);
              v64 = *((_QWORD *)this + 12);
              if ((unint64_t)v65 >= v64)
              {
                v67 = (char *)*((_QWORD *)this + 10);
                v68 = (v65 - v67) >> 3;
                v69 = v68 + 1;
                if ((unint64_t)(v68 + 1) >> 61)
                  goto LABEL_283;
                v70 = v64 - (_QWORD)v67;
                if (v70 >> 2 > v69)
                  v69 = v70 >> 2;
                if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8)
                  v71 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v71 = v69;
                if (v71)
                {
                  v71 = (unint64_t)sub_2429112FC(v71);
                  v67 = (char *)*((_QWORD *)this + 10);
                  v65 = (char *)*((_QWORD *)this + 11);
                }
                else
                {
                  v72 = 0;
                }
                v73 = (_QWORD *)(v71 + 8 * v68);
                *v73 = 0;
                v66 = v73 + 1;
                while (v65 != v67)
                {
                  v74 = *((_QWORD *)v65 - 1);
                  v65 -= 8;
                  *--v73 = v74;
                }
                *((_QWORD *)this + 10) = v73;
                *((_QWORD *)this + 11) = v66;
                *((_QWORD *)this + 12) = v71 + 8 * v72;
                if (v67)
                  operator delete(v67);
              }
              else
              {
                *(_QWORD *)v65 = 0;
                v66 = v65 + 8;
              }
              *((_QWORD *)this + 11) = v66;
              v75 = *((_QWORD *)a2 + 1);
              if (v75 > 0xFFFFFFFFFFFFFFF7 || v75 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_160;
              *(v66 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v75);
              v63 = *((_QWORD *)a2 + 2);
              v62 = *((_QWORD *)a2 + 1) + 8;
              *((_QWORD *)a2 + 1) = v62;
            }
            goto LABEL_161;
          }
          v115 = (char *)*((_QWORD *)this + 11);
          v114 = *((_QWORD *)this + 12);
          if ((unint64_t)v115 >= v114)
          {
            v144 = (char *)*((_QWORD *)this + 10);
            v145 = (v115 - v144) >> 3;
            v146 = v145 + 1;
            if ((unint64_t)(v145 + 1) >> 61)
              goto LABEL_283;
            v147 = v114 - (_QWORD)v144;
            if (v147 >> 2 > v146)
              v146 = v147 >> 2;
            if ((unint64_t)v147 >= 0x7FFFFFFFFFFFFFF8)
              v148 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v148 = v146;
            if (v148)
            {
              v148 = (unint64_t)sub_2429112FC(v148);
              v144 = (char *)*((_QWORD *)this + 10);
              v115 = (char *)*((_QWORD *)this + 11);
            }
            else
            {
              v149 = 0;
            }
            v162 = (_QWORD *)(v148 + 8 * v145);
            *v162 = 0;
            v109 = v162 + 1;
            while (v115 != v144)
            {
              v163 = *((_QWORD *)v115 - 1);
              v115 -= 8;
              *--v162 = v163;
            }
            *((_QWORD *)this + 10) = v162;
            *((_QWORD *)this + 11) = v109;
            *((_QWORD *)this + 12) = v148 + 8 * v149;
            if (v144)
              operator delete(v144);
          }
          else
          {
            *(_QWORD *)v115 = 0;
            v109 = v115 + 8;
          }
          *((_QWORD *)this + 11) = v109;
          goto LABEL_269;
        case 5u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v76 = *((_QWORD *)a2 + 1);
            v77 = *((_QWORD *)a2 + 2);
            while (v76 < v77 && !*((_BYTE *)a2 + 24))
            {
              v79 = (char *)*((_QWORD *)this + 14);
              v78 = *((_QWORD *)this + 15);
              if ((unint64_t)v79 >= v78)
              {
                v81 = (char *)*((_QWORD *)this + 13);
                v82 = (v79 - v81) >> 3;
                v83 = v82 + 1;
                if ((unint64_t)(v82 + 1) >> 61)
                  goto LABEL_283;
                v84 = v78 - (_QWORD)v81;
                if (v84 >> 2 > v83)
                  v83 = v84 >> 2;
                if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFF8)
                  v85 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v85 = v83;
                if (v85)
                {
                  v85 = (unint64_t)sub_2429112FC(v85);
                  v81 = (char *)*((_QWORD *)this + 13);
                  v79 = (char *)*((_QWORD *)this + 14);
                }
                else
                {
                  v86 = 0;
                }
                v87 = (_QWORD *)(v85 + 8 * v82);
                *v87 = 0;
                v80 = v87 + 1;
                while (v79 != v81)
                {
                  v88 = *((_QWORD *)v79 - 1);
                  v79 -= 8;
                  *--v87 = v88;
                }
                *((_QWORD *)this + 13) = v87;
                *((_QWORD *)this + 14) = v80;
                *((_QWORD *)this + 15) = v85 + 8 * v86;
                if (v81)
                  operator delete(v81);
              }
              else
              {
                *(_QWORD *)v79 = 0;
                v80 = v79 + 8;
              }
              *((_QWORD *)this + 14) = v80;
              v89 = *((_QWORD *)a2 + 1);
              if (v89 > 0xFFFFFFFFFFFFFFF7 || v89 + 8 > *((_QWORD *)a2 + 2))
              {
LABEL_160:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v80 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v89);
              v77 = *((_QWORD *)a2 + 2);
              v76 = *((_QWORD *)a2 + 1) + 8;
              *((_QWORD *)a2 + 1) = v76;
            }
LABEL_161:
            PB::Reader::recallMark();
          }
          else
          {
            v117 = (char *)*((_QWORD *)this + 14);
            v116 = *((_QWORD *)this + 15);
            if ((unint64_t)v117 >= v116)
            {
              v150 = (char *)*((_QWORD *)this + 13);
              v151 = (v117 - v150) >> 3;
              v152 = v151 + 1;
              if ((unint64_t)(v151 + 1) >> 61)
LABEL_283:
                sub_242729A44();
              v153 = v116 - (_QWORD)v150;
              if (v153 >> 2 > v152)
                v152 = v153 >> 2;
              if ((unint64_t)v153 >= 0x7FFFFFFFFFFFFFF8)
                v154 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v154 = v152;
              if (v154)
              {
                v154 = (unint64_t)sub_2429112FC(v154);
                v150 = (char *)*((_QWORD *)this + 13);
                v117 = (char *)*((_QWORD *)this + 14);
              }
              else
              {
                v155 = 0;
              }
              v164 = (_QWORD *)(v154 + 8 * v151);
              *v164 = 0;
              v109 = v164 + 1;
              while (v117 != v150)
              {
                v165 = *((_QWORD *)v117 - 1);
                v117 -= 8;
                *--v164 = v165;
              }
              *((_QWORD *)this + 13) = v164;
              *((_QWORD *)this + 14) = v109;
              *((_QWORD *)this + 15) = v154 + 8 * v155;
              if (v150)
                operator delete(v150);
            }
            else
            {
              *(_QWORD *)v117 = 0;
              v109 = v117 + 8;
            }
            *((_QWORD *)this + 14) = v109;
LABEL_269:
            v166 = *((_QWORD *)a2 + 1);
            if (v166 <= 0xFFFFFFFFFFFFFFF7 && v166 + 8 <= *((_QWORD *)a2 + 2))
            {
              *(v109 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v166);
LABEL_273:
              *((_QWORD *)a2 + 1) += 8;
            }
            else
            {
LABEL_271:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
          break;
        case 6u:
          *((_BYTE *)this + 144) |= 4u;
          v90 = *((_QWORD *)a2 + 1);
          v91 = *((_QWORD *)a2 + 2);
          v92 = *(_QWORD *)a2;
          if (v90 <= 0xFFFFFFFFFFFFFFF5 && v90 + 10 <= v91)
          {
            v93 = 0;
            v94 = 0;
            v95 = 0;
            do
            {
              v96 = v90 + 1;
              *((_QWORD *)a2 + 1) = v90 + 1;
              v97 = *(_BYTE *)(v92 + v90);
              v95 |= (unint64_t)(v97 & 0x7F) << v93;
              if ((v97 & 0x80) == 0)
                goto LABEL_230;
              v93 += 7;
              v90 = v96;
              v14 = v94++ > 8;
            }
            while (!v14);
LABEL_178:
            LODWORD(v95) = 0;
            goto LABEL_230;
          }
          v118 = 0;
          v119 = 0;
          v95 = 0;
          if (v91 <= v90)
            v91 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v91 == v90)
            {
              LODWORD(v95) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v120 = v90 + 1;
              v121 = *(_BYTE *)(v92 + v90);
              *((_QWORD *)a2 + 1) = v120;
              v95 |= (unint64_t)(v121 & 0x7F) << v118;
              if (v121 < 0)
              {
                v118 += 7;
                v90 = v120;
                v14 = v119++ > 8;
                if (v14)
                  goto LABEL_178;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v95) = 0;
            }
            break;
          }
LABEL_230:
          *((_DWORD *)this + 35) = v95;
          goto LABEL_274;
        case 7u:
          *((_BYTE *)this + 144) |= 1u;
          v98 = *((_QWORD *)a2 + 1);
          if (v98 > 0xFFFFFFFFFFFFFFF7 || v98 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_271;
          *((_QWORD *)this + 16) = *(_QWORD *)(*(_QWORD *)a2 + v98);
          goto LABEL_273;
        case 8u:
          *((_BYTE *)this + 144) |= 2u;
          v99 = *((_QWORD *)a2 + 1);
          v100 = *((_QWORD *)a2 + 2);
          v101 = *(_QWORD *)a2;
          if (v99 <= 0xFFFFFFFFFFFFFFF5 && v99 + 10 <= v100)
          {
            v102 = 0;
            v103 = 0;
            v104 = 0;
            do
            {
              v105 = v99 + 1;
              *((_QWORD *)a2 + 1) = v99 + 1;
              v106 = *(_BYTE *)(v101 + v99);
              v104 |= (unint64_t)(v106 & 0x7F) << v102;
              if ((v106 & 0x80) == 0)
                goto LABEL_233;
              v102 += 7;
              v99 = v105;
              v14 = v103++ > 8;
            }
            while (!v14);
LABEL_185:
            LODWORD(v104) = 0;
            goto LABEL_233;
          }
          v122 = 0;
          v123 = 0;
          v104 = 0;
          if (v100 <= v99)
            v100 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v100 == v99)
            {
              LODWORD(v104) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v124 = v99 + 1;
              v125 = *(_BYTE *)(v101 + v99);
              *((_QWORD *)a2 + 1) = v124;
              v104 |= (unint64_t)(v125 & 0x7F) << v122;
              if (v125 < 0)
              {
                v122 += 7;
                v99 = v124;
                v14 = v123++ > 8;
                if (v14)
                  goto LABEL_185;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v104) = 0;
            }
            break;
          }
LABEL_233:
          *((_DWORD *)this + 34) = v104;
          goto LABEL_274;
        default:
          goto LABEL_19;
      }
      goto LABEL_274;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_21;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    if ((PB::Reader::skip(a2) & 1) == 0)
      return 0;
LABEL_274:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
}

uint64_t CMMsl::BioMotionPose::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  double *v4;
  double *v5;
  double v6;
  double *v7;
  double *v8;
  double v9;
  double *v10;
  double *v11;
  double v12;
  double *v13;
  double *v14;
  double v15;
  double *v16;
  double *v17;
  double v18;
  char v19;

  v3 = this;
  v4 = *(double **)(this + 8);
  v5 = *(double **)(this + 16);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6);
  }
  v7 = *(double **)(v3 + 56);
  v8 = *(double **)(v3 + 64);
  while (v7 != v8)
  {
    v9 = *v7++;
    this = PB::Writer::write(a2, v9);
  }
  v10 = *(double **)(v3 + 32);
  v11 = *(double **)(v3 + 40);
  while (v10 != v11)
  {
    v12 = *v10++;
    this = PB::Writer::write(a2, v12);
  }
  v13 = *(double **)(v3 + 80);
  v14 = *(double **)(v3 + 88);
  while (v13 != v14)
  {
    v15 = *v13++;
    this = PB::Writer::write(a2, v15);
  }
  v16 = *(double **)(v3 + 104);
  v17 = *(double **)(v3 + 112);
  while (v16 != v17)
  {
    v18 = *v16++;
    this = PB::Writer::write(a2, v18);
  }
  v19 = *(_BYTE *)(v3 + 144);
  if ((v19 & 4) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v19 = *(_BYTE *)(v3 + 144);
    if ((v19 & 1) == 0)
    {
LABEL_18:
      if ((v19 & 2) == 0)
        return this;
      return PB::Writer::writeVarInt(a2);
    }
  }
  else if ((*(_BYTE *)(v3 + 144) & 1) == 0)
  {
    goto LABEL_18;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 128));
  if ((*(_BYTE *)(v3 + 144) & 2) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

BOOL CMMsl::BioMotionPose::operator==(uint64_t a1, uint64_t a2)
{
  double *v2;
  double *v3;
  double *v4;
  double *v5;
  double *v6;
  double *v7;
  double *v8;
  double *v9;
  double *v10;
  double *v11;
  double *v12;
  double *v13;
  double *v14;
  double *v15;
  double *v16;
  _BOOL8 v17;

  v3 = *(double **)(a1 + 8);
  v2 = *(double **)(a1 + 16);
  v4 = *(double **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 16) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v6 = *(double **)(a1 + 56);
  v5 = *(double **)(a1 + 64);
  v7 = *(double **)(a2 + 56);
  if ((char *)v5 - (char *)v6 != *(_QWORD *)(a2 + 64) - (_QWORD)v7)
    return 0;
  while (v6 != v5)
  {
    if (*v6 != *v7)
      return 0;
    ++v6;
    ++v7;
  }
  v9 = *(double **)(a1 + 32);
  v8 = *(double **)(a1 + 40);
  v10 = *(double **)(a2 + 32);
  if ((char *)v8 - (char *)v9 != *(_QWORD *)(a2 + 40) - (_QWORD)v10)
    return 0;
  while (v9 != v8)
  {
    if (*v9 != *v10)
      return 0;
    ++v9;
    ++v10;
  }
  v12 = *(double **)(a1 + 80);
  v11 = *(double **)(a1 + 88);
  v13 = *(double **)(a2 + 80);
  if ((char *)v11 - (char *)v12 != *(_QWORD *)(a2 + 88) - (_QWORD)v13)
    return 0;
  while (v12 != v11)
  {
    if (*v12 != *v13)
      return 0;
    ++v12;
    ++v13;
  }
  v15 = *(double **)(a1 + 104);
  v14 = *(double **)(a1 + 112);
  v16 = *(double **)(a2 + 104);
  if ((char *)v14 - (char *)v15 != *(_QWORD *)(a2 + 112) - (_QWORD)v16)
    return 0;
  while (v15 != v14)
  {
    if (*v15 != *v16)
      return 0;
    ++v15;
    ++v16;
  }
  if ((*(_BYTE *)(a1 + 144) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 144) & 4) == 0 || *(_DWORD *)(a1 + 140) != *(_DWORD *)(a2 + 140))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 144) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 144) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 144) & 1) == 0 || *(double *)(a1 + 128) != *(double *)(a2 + 128))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 144) & 1) != 0)
  {
    return 0;
  }
  v17 = (*(_BYTE *)(a2 + 144) & 2) == 0;
  if ((*(_BYTE *)(a1 + 144) & 2) != 0)
    return (*(_BYTE *)(a2 + 144) & 2) != 0 && *(_DWORD *)(a1 + 136) == *(_DWORD *)(a2 + 136);
  return v17;
}

uint64_t CMMsl::BioMotionPose::hash_value(CMMsl::BioMotionPose *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;

  v2 = PBHashBytes();
  v3 = PBHashBytes();
  v4 = PBHashBytes();
  v5 = PBHashBytes();
  v6 = PBHashBytes();
  if ((*((_BYTE *)this + 144) & 4) != 0)
  {
    v7 = *((unsigned int *)this + 35);
    if ((*((_BYTE *)this + 144) & 1) != 0)
    {
LABEL_3:
      v8 = *((double *)this + 16);
      if (v8 == 0.0)
        v8 = 0.0;
      if ((*((_BYTE *)this + 144) & 2) != 0)
        goto LABEL_6;
LABEL_9:
      v9 = 0;
      return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ *(_QWORD *)&v8 ^ v9;
    }
  }
  else
  {
    v7 = 0;
    if ((*((_BYTE *)this + 144) & 1) != 0)
      goto LABEL_3;
  }
  v8 = 0.0;
  if ((*((_BYTE *)this + 144) & 2) == 0)
    goto LABEL_9;
LABEL_6:
  v9 = *((unsigned int *)this + 34);
  return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ *(_QWORD *)&v8 ^ v9;
}

uint64_t CMMsl::BioMotionPredictedPose::BioMotionPredictedPose(uint64_t this)
{
  *(_QWORD *)this = &off_25135C988;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135C988;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

void CMMsl::BioMotionPredictedPose::~BioMotionPredictedPose(CMMsl::BioMotionPredictedPose *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135C988;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135C988;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135C988;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::BioMotionPredictedPose *CMMsl::BioMotionPredictedPose::BioMotionPredictedPose(CMMsl::BioMotionPredictedPose *this, const CMMsl::PoseState **a2)
{
  CMMsl::PoseState *v4;
  CMMsl::PoseState *v5;
  uint64_t v6;
  char v7;
  const CMMsl::PoseState *v8;
  int v9;

  *(_QWORD *)this = &off_25135C988;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 7) = 0;
  if (a2[1])
  {
    v4 = (CMMsl::PoseState *)operator new();
    v5 = CMMsl::PoseState::PoseState(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  v7 = *((_BYTE *)a2 + 28);
  if ((v7 & 1) != 0)
  {
    v8 = a2[2];
    *((_BYTE *)this + 28) |= 1u;
    *((_QWORD *)this + 2) = v8;
    v7 = *((_BYTE *)a2 + 28);
  }
  if ((v7 & 2) != 0)
  {
    v9 = *((_DWORD *)a2 + 6);
    *((_BYTE *)this + 28) |= 2u;
    *((_DWORD *)this + 6) = v9;
  }
  return this;
}

const CMMsl::PoseState **CMMsl::BioMotionPredictedPose::operator=(const CMMsl::PoseState **a1, const CMMsl::PoseState **a2)
{
  const CMMsl::PoseState *v3;
  const CMMsl::PoseState *v4;
  const CMMsl::PoseState *v5;
  const CMMsl::PoseState *v6;
  void (**v8)(CMMsl::BioMotionPredictedPose *__hidden);
  const CMMsl::PoseState *v9;
  const CMMsl::PoseState *v10;
  const CMMsl::PoseState *v11;

  if (a1 != a2)
  {
    CMMsl::BioMotionPredictedPose::BioMotionPredictedPose((CMMsl::BioMotionPredictedPose *)&v8, a2);
    v3 = a1[1];
    a1[1] = v9;
    v4 = v11;
    v5 = a1[2];
    v6 = a1[3];
    a1[2] = v10;
    a1[3] = v4;
    v10 = v5;
    v11 = v6;
    v8 = &off_25135C988;
    v9 = 0;
    if (v3)
      (*(void (**)(const CMMsl::PoseState *))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::BioMotionPredictedPose *a2, CMMsl::BioMotionPredictedPose *a3)
{
  int v3;
  uint64_t v4;
  double result;

  v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  return result;
}

uint64_t CMMsl::BioMotionPredictedPose::BioMotionPredictedPose(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_25135C988;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

_QWORD *CMMsl::BioMotionPredictedPose::operator=(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];

  if (a1 != (_QWORD *)a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a2 + 16);
    v5 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 28) = 0;
    v6 = a1[1];
    a1[1] = v3;
    v7 = a1[2];
    v8 = a1[3];
    a1[2] = v4;
    a1[3] = v5;
    v10[2] = v7;
    v10[3] = v8;
    v10[0] = &off_25135C988;
    v10[1] = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::BioMotionPredictedPose::formatText(CMMsl::BioMotionPredictedPose *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 28) & 2) != 0)
    PB::TextFormatter::format(a2, "modelType");
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "state");
  if ((*((_BYTE *)this + 28) & 1) != 0)
    PB::TextFormatter::format(a2, "targetTimestamp", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BioMotionPredictedPose::readFrom(CMMsl::BioMotionPredictedPose *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_25:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v21 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((_BYTE *)this + 28) |= 2u;
        v24 = *((_QWORD *)a2 + 1);
        v25 = *((_QWORD *)a2 + 2);
        v26 = *(_QWORD *)a2;
        if (v24 > 0xFFFFFFFFFFFFFFF5 || v24 + 10 > v25)
        {
          v33 = 0;
          v34 = 0;
          v29 = 0;
          if (v25 <= v24)
            v25 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v25 == v24)
            {
              LODWORD(v29) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_55;
            }
            v35 = v24 + 1;
            v36 = *(_BYTE *)(v26 + v24);
            *((_QWORD *)a2 + 1) = v35;
            v29 |= (unint64_t)(v36 & 0x7F) << v33;
            if ((v36 & 0x80) == 0)
              break;
            v33 += 7;
            v24 = v35;
            v14 = v34++ > 8;
            if (v14)
            {
LABEL_50:
              LODWORD(v29) = 0;
              goto LABEL_55;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v29) = 0;
        }
        else
        {
          v27 = 0;
          v28 = 0;
          v29 = 0;
          while (1)
          {
            v30 = v24 + 1;
            *((_QWORD *)a2 + 1) = v24 + 1;
            v31 = *(_BYTE *)(v26 + v24);
            v29 |= (unint64_t)(v31 & 0x7F) << v27;
            if ((v31 & 0x80) == 0)
              break;
            v27 += 7;
            v24 = v30;
            v14 = v28++ > 8;
            if (v14)
              goto LABEL_50;
          }
        }
LABEL_55:
        *((_DWORD *)this + 6) = v29;
      }
      else if ((_DWORD)v21 == 2)
      {
        *((_BYTE *)this + 28) |= 1u;
        v32 = *((_QWORD *)a2 + 1);
        if (v32 <= 0xFFFFFFFFFFFFFFF7 && v32 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v32);
          *((_QWORD *)a2 + 1) += 8;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else if ((_DWORD)v21 == 1)
      {
        v22 = operator new();
        *(_QWORD *)v22 = &off_251360118;
        *(_DWORD *)(v22 + 44) = 0;
        *(_OWORD *)(v22 + 8) = 0u;
        *(_OWORD *)(v22 + 24) = 0u;
        v23 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v22;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
          v22 = *((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v22 + 16))(v22, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_19:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_25;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_19;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

double CMMsl::PoseState::PoseState(CMMsl::PoseState *this)
{
  double result;

  *(_QWORD *)this = &off_251360118;
  *((_DWORD *)this + 11) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_251360118;
  *((_DWORD *)this + 11) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

uint64_t CMMsl::BioMotionPredictedPose::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  char v5;

  v3 = this;
  v4 = *(const PB::Base **)(this + 8);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = *(_BYTE *)(v3 + 28);
  if ((v5 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 16));
    v5 = *(_BYTE *)(v3 + 28);
  }
  if ((v5 & 2) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

BOOL CMMsl::BioMotionPredictedPose::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !CMMsl::PoseState::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    return 0;
  }
  result = (*(_BYTE *)(a2 + 28) & 2) == 0;
  if ((*(_BYTE *)(a1 + 28) & 2) == 0)
    return result;
  return (*(_BYTE *)(a2 + 28) & 2) != 0 && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24);
}

BOOL CMMsl::PoseState::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  double *v6;
  double *v7;
  double *v8;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a2 + 32);
  if (v4)
  {
    if (!v5 || !CMMsl::Pose::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v7 = *(double **)(a1 + 8);
  v6 = *(double **)(a1 + 16);
  v8 = *(double **)(a2 + 8);
  if ((char *)v6 - (char *)v7 != *(_QWORD *)(a2 + 16) - (_QWORD)v8)
    return 0;
  while (v7 != v6)
  {
    if (*v7 != *v8)
      return 0;
    ++v7;
    ++v8;
  }
  result = (*(_BYTE *)(a2 + 44) & 1) == 0;
  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
    return (*(_BYTE *)(a2 + 44) & 1) != 0 && *(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40);
  return result;
}

unint64_t CMMsl::BioMotionPredictedPose::hash_value(CMMsl::BioMotionPredictedPose *this)
{
  unint64_t v2;
  double v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    v2 = CMMsl::PoseState::hash_value((CMMsl::PoseState *)v2);
  if ((*((_BYTE *)this + 28) & 1) != 0)
  {
    v3 = *((double *)this + 2);
    if (v3 == 0.0)
      v3 = 0.0;
    if ((*((_BYTE *)this + 28) & 2) != 0)
      goto LABEL_5;
LABEL_9:
    v4 = 0;
    return *(_QWORD *)&v3 ^ v2 ^ v4;
  }
  v3 = 0.0;
  if ((*((_BYTE *)this + 28) & 2) == 0)
    goto LABEL_9;
LABEL_5:
  v4 = *((unsigned int *)this + 6);
  return *(_QWORD *)&v3 ^ v2 ^ v4;
}

_QWORD *CMMsl::BioMotionPredictedPose::makeState(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251360118;
    *(_DWORD *)(v2 + 44) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::BioMotionPropagatedAnchor::BioMotionPropagatedAnchor(_QWORD *this)
{
  *this = &off_25135C9C0;
  this[1] = 0;
  return this;
}

{
  *this = &off_25135C9C0;
  this[1] = 0;
  return this;
}

void CMMsl::BioMotionPropagatedAnchor::~BioMotionPropagatedAnchor(CMMsl::BioMotionPropagatedAnchor *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135C9C0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135C9C0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135C9C0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::BioMotionPropagatedAnchor *CMMsl::BioMotionPropagatedAnchor::BioMotionPropagatedAnchor(CMMsl::BioMotionPropagatedAnchor *this, const CMMsl::PropagatedAnchor **a2)
{
  CMMsl::PropagatedAnchor *v4;
  CMMsl::PropagatedAnchor *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_25135C9C0;
  *((_QWORD *)this + 1) = 0;
  if (a2[1])
  {
    v4 = (CMMsl::PropagatedAnchor *)operator new();
    v5 = CMMsl::PropagatedAnchor::PropagatedAnchor(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return this;
}

uint64_t CMMsl::BioMotionPropagatedAnchor::operator=(uint64_t a1, const CMMsl::PropagatedAnchor **a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::BioMotionPropagatedAnchor *__hidden);
  uint64_t v6;

  if ((const CMMsl::PropagatedAnchor **)a1 != a2)
  {
    CMMsl::BioMotionPropagatedAnchor::BioMotionPropagatedAnchor((CMMsl::BioMotionPropagatedAnchor *)&v5, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v6;
    v5 = &off_25135C9C0;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::BioMotionPropagatedAnchor *a2, CMMsl::BioMotionPropagatedAnchor *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::BioMotionPropagatedAnchor::BioMotionPropagatedAnchor(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_25135C9C0;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_25135C9C0;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::BioMotionPropagatedAnchor::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = &off_25135C9C0;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::BioMotionPropagatedAnchor::formatText(CMMsl::BioMotionPropagatedAnchor *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BioMotionPropagatedAnchor::readFrom(CMMsl::BioMotionPropagatedAnchor *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v19 = operator new();
        *(_QWORD *)v19 = &off_251360540;
        *(_QWORD *)(v19 + 8) = 0;
        *(_QWORD *)(v19 + 16) = 0;
        *(_QWORD *)(v19 + 24) = 0;
        *(_QWORD *)(v19 + 40) = 0;
        *(_DWORD *)(v19 + 48) = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = *((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_27;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PropagatedAnchor::PropagatedAnchor(uint64_t this)
{
  *(_QWORD *)this = &off_251360540;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251360540;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

uint64_t CMMsl::BioMotionPropagatedAnchor::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2);
  return this;
}

BOOL CMMsl::BioMotionPropagatedAnchor::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::PropagatedAnchor::operator==(v2, v3);
  return result;
}

BOOL CMMsl::PropagatedAnchor::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  double *v6;
  double *v7;
  double *v8;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a2 + 40);
  if (v4)
  {
    if (!v5 || !CMMsl::Pose::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v7 = *(double **)(a1 + 8);
  v6 = *(double **)(a1 + 16);
  v8 = *(double **)(a2 + 8);
  if ((char *)v6 - (char *)v7 != *(_QWORD *)(a2 + 16) - (_QWORD)v8)
    return 0;
  while (v7 != v6)
  {
    if (*v7 != *v8)
      return 0;
    ++v7;
    ++v8;
  }
  result = (*(_BYTE *)(a2 + 48) & 1) == 0;
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
    return (*(_BYTE *)(a2 + 48) & 1) != 0 && *(double *)(a1 + 32) == *(double *)(a2 + 32);
  return result;
}

CMMsl::PropagatedAnchor *CMMsl::BioMotionPropagatedAnchor::hash_value(CMMsl::BioMotionPropagatedAnchor *this)
{
  CMMsl::PropagatedAnchor *result;

  result = (CMMsl::PropagatedAnchor *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::PropagatedAnchor *)CMMsl::PropagatedAnchor::hash_value(result);
  return result;
}

_QWORD *CMMsl::BioMotionPropagatedAnchor::makeSuper(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251360540;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = 0;
    *(_QWORD *)(v2 + 40) = 0;
    *(_DWORD *)(v2 + 48) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t CMMsl::BleedToZeroCorrection::BleedToZeroCorrection(uint64_t this)
{
  *(_QWORD *)this = &off_25135C9F8;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135C9F8;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::BleedToZeroCorrection::~BleedToZeroCorrection(CMMsl::BleedToZeroCorrection *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135C9F8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135C9F8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135C9F8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::BleedToZeroCorrection *CMMsl::BleedToZeroCorrection::BleedToZeroCorrection(CMMsl::BleedToZeroCorrection *this, const CMMsl::DeviceMotionCorrection **a2)
{
  CMMsl::DeviceMotionCorrection *v4;
  CMMsl::DeviceMotionCorrection *v5;
  uint64_t v6;
  char v7;

  *(_QWORD *)this = &off_25135C9F8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 5) = 0;
  if (a2[1])
  {
    v4 = (CMMsl::DeviceMotionCorrection *)operator new();
    v5 = CMMsl::DeviceMotionCorrection::DeviceMotionCorrection(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v7 = *((_BYTE *)a2 + 16);
    *((_BYTE *)this + 20) |= 1u;
    *((_BYTE *)this + 16) = v7;
  }
  return this;
}

uint64_t CMMsl::BleedToZeroCorrection::operator=(uint64_t a1, const CMMsl::DeviceMotionCorrection **a2)
{
  int v3;
  uint64_t v4;
  void (**v6)(CMMsl::BleedToZeroCorrection *__hidden);
  uint64_t v7;
  char v8;
  int v9;

  if ((const CMMsl::DeviceMotionCorrection **)a1 != a2)
  {
    CMMsl::BleedToZeroCorrection::BleedToZeroCorrection((CMMsl::BleedToZeroCorrection *)&v6, a2);
    v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v9;
    v9 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v7;
    LOBYTE(v3) = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v8;
    v8 = v3;
    v6 = &off_25135C9F8;
    v7 = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::BleedToZeroCorrection *a2, CMMsl::BleedToZeroCorrection *a3)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LOBYTE(v4) = *(_BYTE *)(this + 16);
  *(_BYTE *)(this + 16) = *((_BYTE *)a2 + 16);
  *((_BYTE *)a2 + 16) = v4;
  return this;
}

uint64_t CMMsl::BleedToZeroCorrection::BleedToZeroCorrection(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_25135C9F8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_25135C9F8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t CMMsl::BleedToZeroCorrection::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  _QWORD v9[2];
  char v10;
  int v11;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v5 = *(_BYTE *)(a2 + 16);
    v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    v11 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    LOBYTE(v3) = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v5;
    v10 = v3;
    v9[0] = &off_25135C9F8;
    v9[1] = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::BleedToZeroCorrection::formatText(CMMsl::BleedToZeroCorrection *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "correction");
  if ((*((_BYTE *)this + 20) & 1) != 0)
    PB::TextFormatter::format(a2, "withAnchoredStaticPose");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BleedToZeroCorrection::readFrom(CMMsl::BleedToZeroCorrection *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  unint64_t v23;
  int v24;
  BOOL v25;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_28;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 1u;
        v22 = *((_QWORD *)a2 + 1);
        if (v22 >= *((_QWORD *)a2 + 2))
        {
          v25 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v23 = v22 + 1;
          v24 = *(unsigned __int8 *)(*(_QWORD *)a2 + v22);
          *((_QWORD *)a2 + 1) = v23;
          v25 = v24 != 0;
        }
        *((_BYTE *)this + 16) = v25;
      }
      else if ((v11 >> 3) == 1)
      {
        v19 = operator new();
        *(_QWORD *)v19 = &off_25135D130;
        *(_DWORD *)(v19 + 160) = 0;
        *(_OWORD *)(v19 + 8) = 0u;
        *(_OWORD *)(v19 + 24) = 0u;
        *(_OWORD *)(v19 + 40) = 0u;
        *(_OWORD *)(v19 + 56) = 0u;
        *(_OWORD *)(v19 + 72) = 0u;
        *(_OWORD *)(v19 + 88) = 0u;
        *(_OWORD *)(v19 + 104) = 0u;
        *(_OWORD *)(v19 + 120) = 0u;
        *(_OWORD *)(v19 + 136) = 0u;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = *((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_28:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_28;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::BleedToZeroCorrection::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = this;
  v4 = *(const PB::Base **)(this + 8);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  if ((*(_BYTE *)(v3 + 20) & 1) != 0)
    return PB::Writer::write(a2);
  return this;
}

BOOL CMMsl::BleedToZeroCorrection::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !CMMsl::DeviceMotionCorrection::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  result = (*(_BYTE *)(a2 + 20) & 1) == 0;
  if ((*(_BYTE *)(a1 + 20) & 1) == 0)
    return result;
  return (*(_BYTE *)(a2 + 20) & 1) != 0 && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
}

unint64_t CMMsl::BleedToZeroCorrection::hash_value(CMMsl::BleedToZeroCorrection *this)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    v2 = CMMsl::DeviceMotionCorrection::hash_value((CMMsl::DeviceMotionCorrection *)v2);
  if ((*((_BYTE *)this + 20) & 1) != 0)
    v3 = *((unsigned __int8 *)this + 16);
  else
    v3 = 0;
  return v3 ^ v2;
}

_QWORD *CMMsl::BleedToZeroCorrection::makeCorrection(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135D130;
    *(_DWORD *)(v2 + 160) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_OWORD *)(v2 + 120) = 0u;
    *(_OWORD *)(v2 + 136) = 0u;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t CMMsl::BodyMetrics::BodyMetrics(uint64_t this)
{
  *(_QWORD *)this = &off_25135CA30;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135CA30;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

void CMMsl::BodyMetrics::~BodyMetrics(CMMsl::BodyMetrics *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::BodyMetrics::BodyMetrics(CMMsl::BodyMetrics *this, const CMMsl::BodyMetrics *a2)
{
  __int16 v2;
  __int16 v3;
  int v4;
  float result;
  int v6;
  char v7;
  int v8;

  *(_QWORD *)this = &off_25135CA30;
  *((_DWORD *)this + 16) = 0;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x10) != 0)
  {
    v4 = *((_DWORD *)a2 + 6);
    v3 = 16;
    *((_WORD *)this + 32) = 16;
    *((_DWORD *)this + 6) = v4;
    v2 = *((_WORD *)a2 + 32);
    if ((v2 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 7);
    v3 |= 0x20u;
    *((_WORD *)this + 32) = v3;
    *((float *)this + 7) = result;
    v2 = *((_WORD *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 0x1000) != 0)
  {
    result = *((float *)a2 + 14);
    v3 |= 0x1000u;
    *((_WORD *)this + 32) = v3;
    *((float *)this + 14) = result;
    v2 = *((_WORD *)a2 + 32);
    if ((v2 & 0x800) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0)
        goto LABEL_9;
      goto LABEL_21;
    }
  }
  else if ((v2 & 0x800) == 0)
  {
    goto LABEL_8;
  }
  result = *((float *)a2 + 13);
  v3 |= 0x800u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 13) = result;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 2) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  result = *((float *)a2 + 3);
  v3 |= 2u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 3) = result;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  result = *((float *)a2 + 9);
  v3 |= 0x80u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 9) = result;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  result = *((float *)a2 + 8);
  v3 |= 0x40u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 8) = result;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_25;
  }
LABEL_24:
  result = *((float *)a2 + 10);
  v3 |= 0x100u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 10) = result;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 8) == 0)
      goto LABEL_14;
    goto LABEL_26;
  }
LABEL_25:
  result = *((float *)a2 + 11);
  v3 |= 0x200u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 11) = result;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 8) == 0)
  {
LABEL_14:
    if ((v2 & 0x400) == 0)
      goto LABEL_15;
    goto LABEL_27;
  }
LABEL_26:
  v6 = *((_DWORD *)a2 + 5);
  v3 |= 8u;
  *((_WORD *)this + 32) = v3;
  *((_DWORD *)this + 5) = v6;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x400) == 0)
  {
LABEL_15:
    if ((v2 & 0x2000) == 0)
      goto LABEL_16;
    goto LABEL_28;
  }
LABEL_27:
  result = *((float *)a2 + 12);
  v3 |= 0x400u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 12) = result;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x2000) == 0)
  {
LABEL_16:
    if ((v2 & 4) == 0)
      goto LABEL_17;
    goto LABEL_29;
  }
LABEL_28:
  v7 = *((_BYTE *)a2 + 60);
  v3 |= 0x2000u;
  *((_WORD *)this + 32) = v3;
  *((_BYTE *)this + 60) = v7;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 4) == 0)
  {
LABEL_17:
    if ((v2 & 1) == 0)
      return result;
LABEL_30:
    result = *((float *)a2 + 2);
    *((_WORD *)this + 32) = v3 | 1;
    *((float *)this + 2) = result;
    return result;
  }
LABEL_29:
  v8 = *((_DWORD *)a2 + 4);
  v3 |= 4u;
  *((_WORD *)this + 32) = v3;
  *((_DWORD *)this + 4) = v8;
  if ((*((_WORD *)a2 + 32) & 1) != 0)
    goto LABEL_30;
  return result;
}

CMMsl *CMMsl::BodyMetrics::operator=(CMMsl *a1, const CMMsl::BodyMetrics *a2)
{
  CMMsl::BodyMetrics *v3;
  _BYTE v5[72];

  if (a1 != a2)
  {
    CMMsl::BodyMetrics::BodyMetrics((CMMsl::BodyMetrics *)v5, a2);
    CMMsl::swap(a1, (CMMsl::BodyMetrics *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::BodyMetrics *a2, CMMsl::BodyMetrics *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  float result;

  v3 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  v4 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  v5 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v5;
  v6 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v6;
  v7 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v7;
  v8 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v8;
  v9 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v9;
  v10 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v10;
  v11 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v11;
  v12 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v12;
  v13 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v13;
  v14 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v14;
  LOBYTE(v13) = *((_BYTE *)this + 60);
  *((_BYTE *)this + 60) = *((_BYTE *)a2 + 60);
  *((_BYTE *)a2 + 60) = v13;
  v15 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v15;
  result = *((float *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((float *)a2 + 2) = result;
  return result;
}

float CMMsl::BodyMetrics::BodyMetrics(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135CA30;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

CMMsl *CMMsl::BodyMetrics::operator=(CMMsl *this, uint64_t a2, CMMsl::BodyMetrics *a3)
{
  uint64_t v4;
  _QWORD v6[3];
  int v7;
  __int128 v8;
  __int128 v9;
  char v10;
  int v11;

  if (this != (CMMsl *)a2)
  {
    v6[0] = &off_25135CA30;
    v11 = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(a2 + 64) = 0;
    v7 = *(_DWORD *)(a2 + 24);
    v8 = *(_OWORD *)(a2 + 28);
    v9 = *(_OWORD *)(a2 + 44);
    v10 = *(_BYTE *)(a2 + 60);
    v4 = *(_QWORD *)(a2 + 16);
    v6[1] = *(_QWORD *)(a2 + 8);
    v6[2] = v4;
    CMMsl::swap(this, (CMMsl::BodyMetrics *)v6, a3);
    PB::Base::~Base((PB::Base *)v6);
  }
  return this;
}

uint64_t CMMsl::BodyMetrics::formatText(CMMsl::BodyMetrics *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 32);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "adaptiveExerciseMinuteThreshold", *((float *)this + 2));
    v5 = *((_WORD *)this + 32);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x2000) == 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "age", *((float *)this + 3));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x2000) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "betaBlockerUse");
  v5 = *((_WORD *)this + 32);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "biologicalSex");
  v5 = *((_WORD *)this + 32);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "condition");
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "gender");
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "heightM", *((float *)this + 7));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x40) == 0)
  {
LABEL_9:
    if ((v5 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "hrmax", *((float *)this + 8));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x80) == 0)
  {
LABEL_10:
    if ((v5 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "hrmin", *((float *)this + 9));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x100) == 0)
  {
LABEL_11:
    if ((v5 & 0x200) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "hronset", *((float *)this + 10));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x200) == 0)
  {
LABEL_12:
    if ((v5 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "pal", *((float *)this + 11));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x400) == 0)
  {
LABEL_13:
    if ((v5 & 0x800) == 0)
      goto LABEL_14;
LABEL_29:
    PB::TextFormatter::format(a2, "vo2max", *((float *)this + 13));
    if ((*((_WORD *)this + 32) & 0x1000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_15;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "runVo2max", *((float *)this + 12));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x800) != 0)
    goto LABEL_29;
LABEL_14:
  if ((v5 & 0x1000) != 0)
LABEL_15:
    PB::TextFormatter::format(a2, "weightKG", *((float *)this + 14));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BodyMetrics::readFrom(CMMsl::BodyMetrics *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  int v32;
  BOOL v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  unint64_t v42;
  char v43;
  char v44;
  unsigned int v45;
  unint64_t v46;
  char v47;
  char v48;
  unsigned int v49;
  unint64_t v50;
  char v51;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_116;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 32) |= 0x10u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v40 = 0;
          v41 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_105;
            }
            v42 = v20++;
            v43 = *(_BYTE *)(v21 + v42);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v43 & 0x7F) << v40;
            if ((v43 & 0x80) == 0)
              break;
            v40 += 7;
            v14 = v41++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_104:
              v2 = v42 + 1;
              goto LABEL_105;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
          goto LABEL_104;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_105;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_105:
        *((_DWORD *)this + 6) = v24;
        break;
      case 2u:
        *((_WORD *)this + 32) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_75;
        *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_100;
      case 3u:
        *((_WORD *)this + 32) |= 0x1000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_75;
        *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_100;
      case 4u:
        *((_WORD *)this + 32) |= 0x800u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_75;
        *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_100;
      case 5u:
        *((_WORD *)this + 32) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_75;
        *((_DWORD *)this + 3) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_100;
      case 6u:
        *((_WORD *)this + 32) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_75;
        *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_100;
      case 7u:
        *((_WORD *)this + 32) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_75;
        *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_100;
      case 8u:
        *((_WORD *)this + 32) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_75;
        *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_100;
      case 9u:
        *((_WORD *)this + 32) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_75;
        *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_100;
      case 0xAu:
        *((_WORD *)this + 32) |= 8u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v44 = 0;
          v45 = 0;
          v30 = 0;
          if (v2 <= v26)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_110;
            }
            v46 = v26++;
            v47 = *(_BYTE *)(v27 + v46);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v47 & 0x7F) << v44;
            if ((v47 & 0x80) == 0)
              break;
            v44 += 7;
            v14 = v45++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_109:
              v2 = v46 + 1;
              goto LABEL_110;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v30) = 0;
          goto LABEL_109;
        }
        v28 = 0;
        v29 = 0;
        v30 = 0;
        do
        {
          v2 = v26 + 1;
          *((_QWORD *)a2 + 1) = v26 + 1;
          v31 = *(_BYTE *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0)
            goto LABEL_110;
          v28 += 7;
          v26 = v2;
          v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_110:
        *((_DWORD *)this + 5) = v30;
        break;
      case 0xBu:
        *((_WORD *)this + 32) |= 0x400u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_75;
        *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_100;
      case 0xCu:
        *((_WORD *)this + 32) |= 0x2000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v33 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v32 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v33 = v32 != 0;
        }
        *((_BYTE *)this + 60) = v33;
        break;
      case 0xDu:
        *((_WORD *)this + 32) |= 4u;
        v34 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v35 = *(_QWORD *)a2;
        if (v34 > 0xFFFFFFFFFFFFFFF5 || v34 + 10 > v2)
        {
          v48 = 0;
          v49 = 0;
          v38 = 0;
          if (v2 <= v34)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v34)
            {
              LODWORD(v38) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_115;
            }
            v50 = v34++;
            v51 = *(_BYTE *)(v35 + v50);
            *((_QWORD *)a2 + 1) = v34;
            v38 |= (unint64_t)(v51 & 0x7F) << v48;
            if ((v51 & 0x80) == 0)
              break;
            v48 += 7;
            v14 = v49++ > 8;
            if (v14)
            {
              LODWORD(v38) = 0;
LABEL_114:
              v2 = v50 + 1;
              goto LABEL_115;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v38) = 0;
          goto LABEL_114;
        }
        v36 = 0;
        v37 = 0;
        v38 = 0;
        do
        {
          v2 = v34 + 1;
          *((_QWORD *)a2 + 1) = v34 + 1;
          v39 = *(_BYTE *)(v35 + v34);
          v38 |= (unint64_t)(v39 & 0x7F) << v36;
          if ((v39 & 0x80) == 0)
            goto LABEL_115;
          v36 += 7;
          v34 = v2;
          v14 = v37++ > 8;
        }
        while (!v14);
        LODWORD(v38) = 0;
LABEL_115:
        *((_DWORD *)this + 4) = v38;
        break;
      case 0xEu:
        *((_WORD *)this + 32) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 2) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_100:
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_75:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_116:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::BodyMetrics::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 64);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_WORD *)(v3 + 64);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x1000) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x1000) == 0)
  {
LABEL_4:
    if ((v4 & 0x800) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x800) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(float *)(v3 + 12));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 8) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x400) == 0)
  {
LABEL_12:
    if ((v4 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x2000) == 0)
  {
LABEL_13:
    if ((v4 & 4) == 0)
      goto LABEL_14;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_14:
    if ((v4 & 1) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 8));
  }
LABEL_28:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_WORD *)(v3 + 64) & 1) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 8));
  return this;
}

BOOL CMMsl::BodyMetrics::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 64);
  v3 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x1000) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x1000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x800) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 12) != *(float *)(a2 + 12))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x100) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x200) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x400) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x400) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x2000) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x2000) == 0 || *(unsigned __int8 *)(a1 + 60) != *(unsigned __int8 *)(a2 + 60))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  v4 = (v3 & 1) == 0;
  if ((v2 & 1) != 0)
    return (v3 & 1) != 0 && *(float *)(a1 + 8) == *(float *)(a2 + 8);
  return v4;
}

uint64_t CMMsl::BodyMetrics::hash_value(CMMsl::BodyMetrics *this)
{
  __int16 v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  uint64_t v25;

  v1 = *((_WORD *)this + 32);
  if ((v1 & 0x10) == 0)
  {
    v2 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_3;
LABEL_37:
    v4 = 0;
    if ((*((_WORD *)this + 32) & 0x1000) != 0)
      goto LABEL_6;
LABEL_38:
    v6 = 0;
    if ((*((_WORD *)this + 32) & 0x800) != 0)
      goto LABEL_9;
LABEL_39:
    v8 = 0;
    if ((v1 & 2) != 0)
      goto LABEL_12;
LABEL_40:
    v10 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_15;
LABEL_41:
    v12 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_18;
LABEL_42:
    v14 = 0;
    if ((*((_WORD *)this + 32) & 0x100) != 0)
      goto LABEL_21;
LABEL_43:
    v16 = 0;
    if ((*((_WORD *)this + 32) & 0x200) != 0)
      goto LABEL_24;
LABEL_44:
    v18 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_27;
    goto LABEL_45;
  }
  v2 = *((unsigned int *)this + 6);
  if ((v1 & 0x20) == 0)
    goto LABEL_37;
LABEL_3:
  v3 = *((float *)this + 7);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  if ((*((_WORD *)this + 32) & 0x1000) == 0)
    goto LABEL_38;
LABEL_6:
  v5 = *((float *)this + 14);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((*((_WORD *)this + 32) & 0x800) == 0)
    goto LABEL_39;
LABEL_9:
  v7 = *((float *)this + 13);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_40;
LABEL_12:
  v9 = *((float *)this + 3);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_41;
LABEL_15:
  v11 = *((float *)this + 9);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_42;
LABEL_18:
  v13 = *((float *)this + 8);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((*((_WORD *)this + 32) & 0x100) == 0)
    goto LABEL_43;
LABEL_21:
  v15 = *((float *)this + 10);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  if ((*((_WORD *)this + 32) & 0x200) == 0)
    goto LABEL_44;
LABEL_24:
  v17 = *((float *)this + 11);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_27:
    v19 = *((unsigned int *)this + 5);
    if ((*((_WORD *)this + 32) & 0x400) != 0)
      goto LABEL_28;
LABEL_46:
    v21 = 0;
    if ((*((_WORD *)this + 32) & 0x2000) != 0)
      goto LABEL_31;
    goto LABEL_47;
  }
LABEL_45:
  v19 = 0;
  if ((*((_WORD *)this + 32) & 0x400) == 0)
    goto LABEL_46;
LABEL_28:
  v20 = *((float *)this + 12);
  v21 = LODWORD(v20);
  if (v20 == 0.0)
    v21 = 0;
  if ((*((_WORD *)this + 32) & 0x2000) != 0)
  {
LABEL_31:
    v22 = *((unsigned __int8 *)this + 60);
    if ((v1 & 4) != 0)
      goto LABEL_32;
    goto LABEL_48;
  }
LABEL_47:
  v22 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_32:
    v23 = *((unsigned int *)this + 4);
    if ((v1 & 1) != 0)
      goto LABEL_33;
LABEL_49:
    v25 = 0;
    return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v19 ^ v21 ^ v22 ^ v23 ^ v25;
  }
LABEL_48:
  v23 = 0;
  if ((v1 & 1) == 0)
    goto LABEL_49;
LABEL_33:
  v24 = *((float *)this + 2);
  v25 = LODWORD(v24);
  if (v24 == 0.0)
    v25 = 0;
  return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v19 ^ v21 ^ v22 ^ v23 ^ v25;
}

_QWORD *CMMsl::BraveHeartAccel::BraveHeartAccel(_QWORD *this)
{
  *this = &off_25135CA68;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &off_25135CA68;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

void CMMsl::BraveHeartAccel::~BraveHeartAccel(CMMsl::BraveHeartAccel *this)
{
  void **v2;

  *(_QWORD *)this = &off_25135CA68;
  v2 = (void **)((char *)this + 8);
  sub_242910B70(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_25135CA68;
  v2 = (void **)((char *)this + 8);
  sub_242910B70(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_25135CA68;
  v2 = (void **)((char *)this + 8);
  sub_242910B70(&v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::BraveHeartAccel *CMMsl::BraveHeartAccel::BraveHeartAccel(CMMsl::BraveHeartAccel *this, const CMMsl::BraveHeartAccel *a2)
{
  int64x2_t *v3;
  const CMMsl::Accel **v4;
  const CMMsl::Accel **i;
  const CMMsl::Accel *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  int64x2_t v21;
  unint64_t v22;
  uint64_t v24;
  int64x2_t v25;
  unint64_t v26;
  char *v27;

  *((_QWORD *)this + 1) = 0;
  v3 = (int64x2_t *)((char *)this + 8);
  *(_QWORD *)this = &off_25135CA68;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  v4 = (const CMMsl::Accel **)*((_QWORD *)a2 + 1);
  for (i = (const CMMsl::Accel **)*((_QWORD *)a2 + 2); v4 != i; ++v4)
  {
    v6 = *v4;
    v7 = operator new();
    CMMsl::Accel::Accel(v7, v6);
    v9 = (uint64_t *)*((_QWORD *)this + 2);
    v8 = *((_QWORD *)this + 3);
    if ((unint64_t)v9 >= v8)
    {
      v11 = ((uint64_t)v9 - v3->i64[0]) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        sub_242729A44();
      v12 = v8 - v3->i64[0];
      v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1))
        v13 = v11 + 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      v27 = (char *)this + 24;
      if (v14)
        v14 = (unint64_t)sub_2429112FC(v14);
      else
        v15 = 0;
      v16 = (uint64_t *)(v14 + 8 * v11);
      v17 = v14 + 8 * v15;
      v26 = v17;
      *v16 = v7;
      v10 = v16 + 1;
      v25.i64[1] = (uint64_t)(v16 + 1);
      v19 = (_QWORD *)*((_QWORD *)this + 1);
      v18 = (_QWORD *)*((_QWORD *)this + 2);
      if (v18 == v19)
      {
        v21 = vdupq_n_s64((unint64_t)v18);
      }
      else
      {
        do
        {
          v20 = *--v18;
          *v18 = 0;
          *--v16 = v20;
        }
        while (v18 != v19);
        v21 = *v3;
        v10 = (_QWORD *)v25.i64[1];
        v17 = v26;
      }
      *((_QWORD *)this + 1) = v16;
      *((_QWORD *)this + 2) = v10;
      v25 = v21;
      v22 = *((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = v17;
      v26 = v22;
      v24 = v21.i64[0];
      sub_2429114EC((uint64_t)&v24);
    }
    else
    {
      *v9 = v7;
      v10 = v9 + 1;
    }
    *((_QWORD *)this + 2) = v10;
  }
  return this;
}

void sub_24275BBC8(void *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  sub_2427297D4(a1);
}

uint64_t CMMsl::BraveHeartAccel::operator=(uint64_t a1, const CMMsl::BraveHeartAccel *a2)
{
  __int128 v3;
  uint64_t v4;
  void (**v6)(CMMsl::BraveHeartAccel *__hidden);
  __int128 v7;
  uint64_t v8;
  void **v9;

  if ((const CMMsl::BraveHeartAccel *)a1 != a2)
  {
    CMMsl::BraveHeartAccel::BraveHeartAccel((CMMsl::BraveHeartAccel *)&v6, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v4;
    v6 = &off_25135CA68;
    v9 = (void **)&v7;
    sub_242910B70(&v9);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

_QWORD *CMMsl::swap(_QWORD *this, CMMsl::BraveHeartAccel *a2, CMMsl::BraveHeartAccel *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  return this;
}

_QWORD *CMMsl::BraveHeartAccel::BraveHeartAccel(_QWORD *a1, uint64_t a2)
{
  _OWORD *v4;

  *a1 = &off_25135CA68;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v4 = a1 + 1;
  sub_242910BEC(a1 + 1);
  *v4 = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

{
  _OWORD *v4;

  *a1 = &off_25135CA68;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v4 = a1 + 1;
  sub_242910BEC(a1 + 1);
  *v4 = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

uint64_t CMMsl::BraveHeartAccel::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  void (**v9)(CMMsl::BraveHeartAccel *__hidden);
  __int128 v10;
  uint64_t v11;
  void **v12;

  if (a1 != a2)
  {
    v9 = &off_25135CA68;
    v10 = 0uLL;
    v11 = 0;
    sub_242910BEC(&v10);
    v4 = *(_QWORD *)(a2 + 24);
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    v10 = v6;
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v4;
    v11 = v7;
    v12 = (void **)&v10;
    v9 = &off_25135CA68;
    sub_242910B70(&v12);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::BraveHeartAccel::formatText(CMMsl::BraveHeartAccel *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "accel");
  }
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BraveHeartAccel::readFrom(CMMsl::BraveHeartAccel *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  char *v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  int64x2_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64x2_t v41;
  unint64_t v42;
  char *v43;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (char *)this + 24;
    while (1)
    {
      v9 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_25;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v12 >> 3) == 1)
      {
        v20 = operator new();
        v21 = v20;
        *(_QWORD *)v20 = &off_25135BD10;
        *(_DWORD *)(v20 + 32) = 0;
        v23 = (uint64_t *)*((_QWORD *)this + 2);
        v22 = *((_QWORD *)this + 3);
        if ((unint64_t)v23 >= v22)
        {
          v26 = *((_QWORD *)this + 1);
          v27 = ((uint64_t)v23 - v26) >> 3;
          if ((unint64_t)(v27 + 1) >> 61)
            sub_242729A44();
          v28 = v22 - v26;
          v29 = v28 >> 2;
          if (v28 >> 2 <= (unint64_t)(v27 + 1))
            v29 = v27 + 1;
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
            v30 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v30 = v29;
          v43 = v8;
          if (v30)
            v30 = (unint64_t)sub_2429112FC(v30);
          else
            v31 = 0;
          v32 = (uint64_t *)(v30 + 8 * v27);
          v33 = v30 + 8 * v31;
          v42 = v33;
          *v32 = v21;
          v24 = v32 + 1;
          v41.i64[1] = (uint64_t)(v32 + 1);
          v35 = (_QWORD *)*((_QWORD *)this + 1);
          v34 = (_QWORD *)*((_QWORD *)this + 2);
          if (v34 == v35)
          {
            v37 = vdupq_n_s64((unint64_t)v34);
          }
          else
          {
            do
            {
              v36 = *--v34;
              *v34 = 0;
              *--v32 = v36;
            }
            while (v34 != v35);
            v37 = *(int64x2_t *)((char *)this + 8);
            v24 = (_QWORD *)v41.i64[1];
            v33 = v42;
          }
          *((_QWORD *)this + 1) = v32;
          *((_QWORD *)this + 2) = v24;
          v41 = v37;
          v38 = *((_QWORD *)this + 3);
          *((_QWORD *)this + 3) = v33;
          v42 = v38;
          v40 = v37.i64[0];
          sub_2429114EC((uint64_t)&v40);
        }
        else
        {
          *v23 = v20;
          v24 = v23 + 1;
        }
        *((_QWORD *)this + 2) = v24;
        v39 = *(v24 - 1);
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v39 + 16))(v39, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_25:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)a2 + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      v15 = v17++ > 8;
      if (v15)
        goto LABEL_25;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sub_24275C120(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::BraveHeartAccel::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base **v2;
  const PB::Base **i;
  const PB::Base *v5;

  v2 = *(const PB::Base ***)(this + 8);
  for (i = *(const PB::Base ***)(this + 16); v2 != i; this = PB::Writer::writeSubmessage(a2, v5))
    v5 = *v2++;
  return this;
}

BOOL CMMsl::BraveHeartAccel::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;
  BOOL v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(uint64_t **)(a2 + 8);
  if (v3 - v2 != *(_QWORD *)(a2 + 16) - (_QWORD)v4)
    return 0;
  if (v2 == v3)
    return 1;
  v5 = v2 + 8;
  do
  {
    v6 = *v4++;
    result = CMMsl::Accel::operator==(*(_QWORD *)(v5 - 8), v6);
    v8 = !result || v5 == v3;
    v5 += 8;
  }
  while (!v8);
  return result;
}

BOOL sub_24275C1F8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 result;
  BOOL v9;

  if (a2 - a1 != a4 - (_QWORD)a3)
    return 0;
  if (a1 == a2)
    return 1;
  v5 = a3;
  v6 = a1 + 8;
  do
  {
    v7 = *v5++;
    result = CMMsl::Accel::operator==(*(_QWORD *)(v6 - 8), v7);
    v9 = !result || v6 == a2;
    v6 += 8;
  }
  while (!v9);
  return result;
}

uint64_t CMMsl::BraveHeartAccel::hash_value(CMMsl::BraveHeartAccel *this)
{
  CMMsl::Accel **v1;
  CMMsl::Accel **v2;
  uint64_t v3;
  CMMsl::Accel *v4;

  v1 = (CMMsl::Accel **)*((_QWORD *)this + 1);
  v2 = (CMMsl::Accel **)*((_QWORD *)this + 2);
  if (v1 == v2)
    return 0;
  v3 = 0;
  do
  {
    v4 = *v1++;
    v3 ^= CMMsl::Accel::hash_value(v4);
  }
  while (v1 != v2);
  return v3;
}

_QWORD *CMMsl::BraveHeartDeviceMotion::BraveHeartDeviceMotion(_QWORD *this)
{
  *this = &off_25135CAA0;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &off_25135CAA0;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

void CMMsl::BraveHeartDeviceMotion::~BraveHeartDeviceMotion(CMMsl::BraveHeartDeviceMotion *this)
{
  void **v2;

  *(_QWORD *)this = &off_25135CAA0;
  v2 = (void **)((char *)this + 8);
  sub_242910B70(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_25135CAA0;
  v2 = (void **)((char *)this + 8);
  sub_242910B70(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_25135CAA0;
  v2 = (void **)((char *)this + 8);
  sub_242910B70(&v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::BraveHeartDeviceMotion *CMMsl::BraveHeartDeviceMotion::BraveHeartDeviceMotion(CMMsl::BraveHeartDeviceMotion *this, const CMMsl::BraveHeartDeviceMotion *a2)
{
  int64x2_t *v3;
  const CMMsl::DeviceMotion **v4;
  const CMMsl::DeviceMotion **i;
  const CMMsl::DeviceMotion *v6;
  CMMsl::DeviceMotion *v7;
  unint64_t v8;
  CMMsl::DeviceMotion **v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  CMMsl::DeviceMotion **v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  CMMsl::DeviceMotion *v20;
  int64x2_t v21;
  unint64_t v22;
  uint64_t v24;
  int64x2_t v25;
  unint64_t v26;
  char *v27;

  *((_QWORD *)this + 1) = 0;
  v3 = (int64x2_t *)((char *)this + 8);
  *(_QWORD *)this = &off_25135CAA0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  v4 = (const CMMsl::DeviceMotion **)*((_QWORD *)a2 + 1);
  for (i = (const CMMsl::DeviceMotion **)*((_QWORD *)a2 + 2); v4 != i; ++v4)
  {
    v6 = *v4;
    v7 = (CMMsl::DeviceMotion *)operator new();
    CMMsl::DeviceMotion::DeviceMotion(v7, v6);
    v9 = (CMMsl::DeviceMotion **)*((_QWORD *)this + 2);
    v8 = *((_QWORD *)this + 3);
    if ((unint64_t)v9 >= v8)
    {
      v11 = ((uint64_t)v9 - v3->i64[0]) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        sub_242729A44();
      v12 = v8 - v3->i64[0];
      v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1))
        v13 = v11 + 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      v27 = (char *)this + 24;
      if (v14)
        v14 = (unint64_t)sub_2429112FC(v14);
      else
        v15 = 0;
      v16 = (CMMsl::DeviceMotion **)(v14 + 8 * v11);
      v17 = v14 + 8 * v15;
      v26 = v17;
      *v16 = v7;
      v10 = v16 + 1;
      v25.i64[1] = (uint64_t)(v16 + 1);
      v19 = (_QWORD *)*((_QWORD *)this + 1);
      v18 = (_QWORD *)*((_QWORD *)this + 2);
      if (v18 == v19)
      {
        v21 = vdupq_n_s64((unint64_t)v18);
      }
      else
      {
        do
        {
          v20 = (CMMsl::DeviceMotion *)*--v18;
          *v18 = 0;
          *--v16 = v20;
        }
        while (v18 != v19);
        v21 = *v3;
        v10 = (_QWORD *)v25.i64[1];
        v17 = v26;
      }
      *((_QWORD *)this + 1) = v16;
      *((_QWORD *)this + 2) = v10;
      v25 = v21;
      v22 = *((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = v17;
      v26 = v22;
      v24 = v21.i64[0];
      sub_2429114EC((uint64_t)&v24);
    }
    else
    {
      *v9 = v7;
      v10 = v9 + 1;
    }
    *((_QWORD *)this + 2) = v10;
  }
  return this;
}

void sub_24275C538(void *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  sub_2427297D4(a1);
}

uint64_t CMMsl::BraveHeartDeviceMotion::operator=(uint64_t a1, const CMMsl::BraveHeartDeviceMotion *a2)
{
  __int128 v3;
  uint64_t v4;
  void (**v6)(CMMsl::BraveHeartDeviceMotion *__hidden);
  __int128 v7;
  uint64_t v8;
  void **v9;

  if ((const CMMsl::BraveHeartDeviceMotion *)a1 != a2)
  {
    CMMsl::BraveHeartDeviceMotion::BraveHeartDeviceMotion((CMMsl::BraveHeartDeviceMotion *)&v6, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v4;
    v6 = &off_25135CAA0;
    v9 = (void **)&v7;
    sub_242910B70(&v9);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

_QWORD *CMMsl::swap(_QWORD *this, CMMsl::BraveHeartDeviceMotion *a2, CMMsl::BraveHeartDeviceMotion *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  return this;
}

_QWORD *CMMsl::BraveHeartDeviceMotion::BraveHeartDeviceMotion(_QWORD *a1, uint64_t a2)
{
  _OWORD *v4;

  *a1 = &off_25135CAA0;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v4 = a1 + 1;
  sub_242910BEC(a1 + 1);
  *v4 = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

{
  _OWORD *v4;

  *a1 = &off_25135CAA0;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v4 = a1 + 1;
  sub_242910BEC(a1 + 1);
  *v4 = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

uint64_t CMMsl::BraveHeartDeviceMotion::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  void (**v9)(CMMsl::BraveHeartDeviceMotion *__hidden);
  __int128 v10;
  uint64_t v11;
  void **v12;

  if (a1 != a2)
  {
    v9 = &off_25135CAA0;
    v10 = 0uLL;
    v11 = 0;
    sub_242910BEC(&v10);
    v4 = *(_QWORD *)(a2 + 24);
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    v10 = v6;
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v4;
    v11 = v7;
    v12 = (void **)&v10;
    v9 = &off_25135CAA0;
    sub_242910B70(&v12);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::BraveHeartDeviceMotion::formatText(CMMsl::BraveHeartDeviceMotion *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "deviceMotion");
  }
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BraveHeartDeviceMotion::readFrom(CMMsl::BraveHeartDeviceMotion *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  char *v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  int64x2_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64x2_t v41;
  unint64_t v42;
  char *v43;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (char *)this + 24;
    while (1)
    {
      v9 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_25;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v12 >> 3) == 1)
      {
        v20 = operator new();
        v21 = v20;
        *(_QWORD *)v20 = &off_25135D0C0;
        *(_DWORD *)(v20 + 124) = 0;
        v23 = (uint64_t *)*((_QWORD *)this + 2);
        v22 = *((_QWORD *)this + 3);
        if ((unint64_t)v23 >= v22)
        {
          v26 = *((_QWORD *)this + 1);
          v27 = ((uint64_t)v23 - v26) >> 3;
          if ((unint64_t)(v27 + 1) >> 61)
            sub_242729A44();
          v28 = v22 - v26;
          v29 = v28 >> 2;
          if (v28 >> 2 <= (unint64_t)(v27 + 1))
            v29 = v27 + 1;
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
            v30 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v30 = v29;
          v43 = v8;
          if (v30)
            v30 = (unint64_t)sub_2429112FC(v30);
          else
            v31 = 0;
          v32 = (uint64_t *)(v30 + 8 * v27);
          v33 = v30 + 8 * v31;
          v42 = v33;
          *v32 = v21;
          v24 = v32 + 1;
          v41.i64[1] = (uint64_t)(v32 + 1);
          v35 = (_QWORD *)*((_QWORD *)this + 1);
          v34 = (_QWORD *)*((_QWORD *)this + 2);
          if (v34 == v35)
          {
            v37 = vdupq_n_s64((unint64_t)v34);
          }
          else
          {
            do
            {
              v36 = *--v34;
              *v34 = 0;
              *--v32 = v36;
            }
            while (v34 != v35);
            v37 = *(int64x2_t *)((char *)this + 8);
            v24 = (_QWORD *)v41.i64[1];
            v33 = v42;
          }
          *((_QWORD *)this + 1) = v32;
          *((_QWORD *)this + 2) = v24;
          v41 = v37;
          v38 = *((_QWORD *)this + 3);
          *((_QWORD *)this + 3) = v33;
          v42 = v38;
          v40 = v37.i64[0];
          sub_2429114EC((uint64_t)&v40);
        }
        else
        {
          *v23 = v20;
          v24 = v23 + 1;
        }
        *((_QWORD *)this + 2) = v24;
        v39 = *(v24 - 1);
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v39 + 16))(v39, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_25:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)a2 + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      v15 = v17++ > 8;
      if (v15)
        goto LABEL_25;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sub_24275CA90(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::BraveHeartDeviceMotion::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base **v2;
  const PB::Base **i;
  const PB::Base *v5;

  v2 = *(const PB::Base ***)(this + 8);
  for (i = *(const PB::Base ***)(this + 16); v2 != i; this = PB::Writer::writeSubmessage(a2, v5))
    v5 = *v2++;
  return this;
}

BOOL CMMsl::BraveHeartDeviceMotion::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;
  BOOL v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(uint64_t **)(a2 + 8);
  if (v3 - v2 != *(_QWORD *)(a2 + 16) - (_QWORD)v4)
    return 0;
  if (v2 == v3)
    return 1;
  v5 = v2 + 8;
  do
  {
    v6 = *v4++;
    result = CMMsl::DeviceMotion::operator==(*(_QWORD *)(v5 - 8), v6);
    v8 = !result || v5 == v3;
    v5 += 8;
  }
  while (!v8);
  return result;
}

BOOL sub_24275CB68(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 result;
  BOOL v9;

  if (a2 - a1 != a4 - (_QWORD)a3)
    return 0;
  if (a1 == a2)
    return 1;
  v5 = a3;
  v6 = a1 + 8;
  do
  {
    v7 = *v5++;
    result = CMMsl::DeviceMotion::operator==(*(_QWORD *)(v6 - 8), v7);
    v9 = !result || v6 == a2;
    v6 += 8;
  }
  while (!v9);
  return result;
}

uint64_t CMMsl::BraveHeartDeviceMotion::hash_value(CMMsl::BraveHeartDeviceMotion *this)
{
  CMMsl::DeviceMotion **v1;
  CMMsl::DeviceMotion **v2;
  uint64_t v3;
  CMMsl::DeviceMotion *v4;

  v1 = (CMMsl::DeviceMotion **)*((_QWORD *)this + 1);
  v2 = (CMMsl::DeviceMotion **)*((_QWORD *)this + 2);
  if (v1 == v2)
    return 0;
  v3 = 0;
  do
  {
    v4 = *v1++;
    v3 ^= CMMsl::DeviceMotion::hash_value(v4);
  }
  while (v1 != v2);
  return v3;
}

uint64_t CMMsl::BraveHeartNatalieData::BraveHeartNatalieData(uint64_t this)
{
  *(_QWORD *)this = &off_25135CAD8;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135CAD8;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

void CMMsl::BraveHeartNatalieData::~BraveHeartNatalieData(CMMsl::BraveHeartNatalieData *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::BraveHeartNatalieData::BraveHeartNatalieData(uint64_t this, const CMMsl::BraveHeartNatalieData *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  *(_QWORD *)this = &off_25135CAD8;
  *(_DWORD *)(this + 44) = 0;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 8) != 0)
  {
    v4 = *((_QWORD *)a2 + 4);
    v3 = 8;
    *(_BYTE *)(this + 44) = 8;
    *(_QWORD *)(this + 32) = v4;
    v2 = *((_BYTE *)a2 + 44);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 44) & 2) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 2);
    v3 |= 2u;
    *(_BYTE *)(this + 44) = v3;
    *(_QWORD *)(this + 16) = v5;
    v2 = *((_BYTE *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *((_QWORD *)a2 + 3);
    v3 |= 4u;
    *(_BYTE *)(this + 44) = v3;
    *(_QWORD *)(this + 24) = v6;
    v2 = *((_BYTE *)a2 + 44);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        return this;
LABEL_12:
      v8 = *((_DWORD *)a2 + 10);
      *(_BYTE *)(this + 44) = v3 | 0x10;
      *(_DWORD *)(this + 40) = v8;
      return this;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_BYTE *)(this + 44) = v3;
  *(_QWORD *)(this + 8) = v7;
  if ((*((_BYTE *)a2 + 44) & 0x10) != 0)
    goto LABEL_12;
  return this;
}

uint64_t CMMsl::BraveHeartNatalieData::operator=(uint64_t a1, const CMMsl::BraveHeartNatalieData *a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  if ((const CMMsl::BraveHeartNatalieData *)a1 != a2)
  {
    CMMsl::BraveHeartNatalieData::BraveHeartNatalieData((uint64_t)&v6, a2);
    v3 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    v8 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v4;
    *(_QWORD *)&v4 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v9;
    v9 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::BraveHeartNatalieData *a2, CMMsl::BraveHeartNatalieData *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;
  int v8;

  v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  v8 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v8;
  return result;
}

double CMMsl::BraveHeartNatalieData::BraveHeartNatalieData(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135CAD8;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135CAD8;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return result;
}

uint64_t CMMsl::BraveHeartNatalieData::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  void (**v7)(CMMsl::BraveHeartNatalieData *__hidden);
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v7 = &off_25135CAD8;
    v3 = *(_QWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 44) = 0;
    v9 = *(_OWORD *)(a1 + 24);
    v4 = *(_OWORD *)(a1 + 8);
    v5 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v5;
    v8 = v4;
    *(_QWORD *)&v4 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v3;
    v10 = v4;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::BraveHeartNatalieData::formatText(CMMsl::BraveHeartNatalieData *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "basalNatalies", *((double *)this + 1));
    v5 = *((_BYTE *)this + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((_BYTE *)this + 44) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "mets", *((double *)this + 2));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(a2, "session");
    if ((*((_BYTE *)this + 44) & 8) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(a2, "natalies", *((double *)this + 3));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 0x10) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 8) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "startDate", *((double *)this + 4));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BraveHeartNatalieData::readFrom(CMMsl::BraveHeartNatalieData *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_56;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 44) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_50;
      case 2u:
        *((_BYTE *)this + 44) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_50;
      case 3u:
        *((_BYTE *)this + 44) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_50;
      case 4u:
        *((_BYTE *)this + 44) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_50:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_34:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 5u:
        *((_BYTE *)this + 44) |= 0x10u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v26 = 0;
          v27 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_55;
            }
            v28 = v20++;
            v29 = *(_BYTE *)(v21 + v28);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0)
              break;
            v26 += 7;
            v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_54:
              v2 = v28 + 1;
              goto LABEL_55;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
          goto LABEL_54;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_55;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_55:
        *((_DWORD *)this + 10) = v24;
        break;
      default:
        goto LABEL_19;
    }
LABEL_56:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::BraveHeartNatalieData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 44);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32));
    v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(this + 44) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_10:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  if ((*(_BYTE *)(v3 + 44) & 0x10) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

BOOL CMMsl::BraveHeartNatalieData::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 44) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 44) & 0x10) == 0;
  if ((*(_BYTE *)(a1 + 44) & 0x10) != 0)
    return (*(_BYTE *)(a2 + 44) & 0x10) != 0 && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40);
  return v2;
}

uint64_t CMMsl::BraveHeartNatalieData::hash_value(CMMsl::BraveHeartNatalieData *this)
{
  double v1;
  double v2;
  double v3;
  double v4;
  uint64_t v5;

  if ((*((_BYTE *)this + 44) & 8) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 44) & 2) != 0)
      goto LABEL_3;
LABEL_16:
    v2 = 0.0;
    if ((*((_BYTE *)this + 44) & 4) != 0)
      goto LABEL_6;
LABEL_17:
    v3 = 0.0;
    if ((*((_BYTE *)this + 44) & 1) != 0)
      goto LABEL_9;
    goto LABEL_18;
  }
  v1 = *((double *)this + 4);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 44) & 2) == 0)
    goto LABEL_16;
LABEL_3:
  v2 = *((double *)this + 2);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 44) & 4) == 0)
    goto LABEL_17;
LABEL_6:
  v3 = *((double *)this + 3);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((*((_BYTE *)this + 44) & 1) != 0)
  {
LABEL_9:
    v4 = *((double *)this + 1);
    if (v4 == 0.0)
      v4 = 0.0;
    if ((*((_BYTE *)this + 44) & 0x10) != 0)
      goto LABEL_12;
LABEL_19:
    v5 = 0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4 ^ v5;
  }
LABEL_18:
  v4 = 0.0;
  if ((*((_BYTE *)this + 44) & 0x10) == 0)
    goto LABEL_19;
LABEL_12:
  v5 = *((int *)this + 10);
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4 ^ v5;
}

_QWORD *CMMsl::BraveHeartVO2MaxInput::BraveHeartVO2MaxInput(_QWORD *this)
{
  *this = &off_25135CB10;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &off_25135CB10;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

void CMMsl::BraveHeartVO2MaxInput::~BraveHeartVO2MaxInput(CMMsl::BraveHeartVO2MaxInput *this)
{
  void **v2;

  *(_QWORD *)this = &off_25135CB10;
  v2 = (void **)((char *)this + 8);
  sub_242910B70(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_25135CB10;
  v2 = (void **)((char *)this + 8);
  sub_242910B70(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_25135CB10;
  v2 = (void **)((char *)this + 8);
  sub_242910B70(&v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::BraveHeartVO2MaxInput *CMMsl::BraveHeartVO2MaxInput::BraveHeartVO2MaxInput(CMMsl::BraveHeartVO2MaxInput *this, const CMMsl::BraveHeartVO2MaxInput *a2)
{
  int64x2_t *v3;
  const CMMsl::VO2MaxInput **v4;
  const CMMsl::VO2MaxInput **i;
  const CMMsl::VO2MaxInput *v6;
  CMMsl::VO2MaxInput *v7;
  unint64_t v8;
  CMMsl::VO2MaxInput **v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  CMMsl::VO2MaxInput **v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  CMMsl::VO2MaxInput *v20;
  int64x2_t v21;
  unint64_t v22;
  uint64_t v24;
  int64x2_t v25;
  unint64_t v26;
  char *v27;

  *((_QWORD *)this + 1) = 0;
  v3 = (int64x2_t *)((char *)this + 8);
  *(_QWORD *)this = &off_25135CB10;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  v4 = (const CMMsl::VO2MaxInput **)*((_QWORD *)a2 + 1);
  for (i = (const CMMsl::VO2MaxInput **)*((_QWORD *)a2 + 2); v4 != i; ++v4)
  {
    v6 = *v4;
    v7 = (CMMsl::VO2MaxInput *)operator new();
    CMMsl::VO2MaxInput::VO2MaxInput(v7, v6);
    v9 = (CMMsl::VO2MaxInput **)*((_QWORD *)this + 2);
    v8 = *((_QWORD *)this + 3);
    if ((unint64_t)v9 >= v8)
    {
      v11 = ((uint64_t)v9 - v3->i64[0]) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        sub_242729A44();
      v12 = v8 - v3->i64[0];
      v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1))
        v13 = v11 + 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      v27 = (char *)this + 24;
      if (v14)
        v14 = (unint64_t)sub_2429112FC(v14);
      else
        v15 = 0;
      v16 = (CMMsl::VO2MaxInput **)(v14 + 8 * v11);
      v17 = v14 + 8 * v15;
      v26 = v17;
      *v16 = v7;
      v10 = v16 + 1;
      v25.i64[1] = (uint64_t)(v16 + 1);
      v19 = (_QWORD *)*((_QWORD *)this + 1);
      v18 = (_QWORD *)*((_QWORD *)this + 2);
      if (v18 == v19)
      {
        v21 = vdupq_n_s64((unint64_t)v18);
      }
      else
      {
        do
        {
          v20 = (CMMsl::VO2MaxInput *)*--v18;
          *v18 = 0;
          *--v16 = v20;
        }
        while (v18 != v19);
        v21 = *v3;
        v10 = (_QWORD *)v25.i64[1];
        v17 = v26;
      }
      *((_QWORD *)this + 1) = v16;
      *((_QWORD *)this + 2) = v10;
      v25 = v21;
      v22 = *((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = v17;
      v26 = v22;
      v24 = v21.i64[0];
      sub_2429114EC((uint64_t)&v24);
    }
    else
    {
      *v9 = v7;
      v10 = v9 + 1;
    }
    *((_QWORD *)this + 2) = v10;
  }
  return this;
}

void sub_24275D798(void *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  sub_2427297D4(a1);
}

uint64_t CMMsl::BraveHeartVO2MaxInput::operator=(uint64_t a1, const CMMsl::BraveHeartVO2MaxInput *a2)
{
  __int128 v3;
  uint64_t v4;
  void (**v6)(CMMsl::BraveHeartVO2MaxInput *__hidden);
  __int128 v7;
  uint64_t v8;
  void **v9;

  if ((const CMMsl::BraveHeartVO2MaxInput *)a1 != a2)
  {
    CMMsl::BraveHeartVO2MaxInput::BraveHeartVO2MaxInput((CMMsl::BraveHeartVO2MaxInput *)&v6, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v4;
    v6 = &off_25135CB10;
    v9 = (void **)&v7;
    sub_242910B70(&v9);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

_QWORD *CMMsl::swap(_QWORD *this, CMMsl::BraveHeartVO2MaxInput *a2, CMMsl::BraveHeartVO2MaxInput *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  return this;
}

_QWORD *CMMsl::BraveHeartVO2MaxInput::BraveHeartVO2MaxInput(_QWORD *a1, uint64_t a2)
{
  _OWORD *v4;

  *a1 = &off_25135CB10;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v4 = a1 + 1;
  sub_242910BEC(a1 + 1);
  *v4 = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

{
  _OWORD *v4;

  *a1 = &off_25135CB10;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v4 = a1 + 1;
  sub_242910BEC(a1 + 1);
  *v4 = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

uint64_t CMMsl::BraveHeartVO2MaxInput::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  void (**v9)(CMMsl::BraveHeartVO2MaxInput *__hidden);
  __int128 v10;
  uint64_t v11;
  void **v12;

  if (a1 != a2)
  {
    v9 = &off_25135CB10;
    v10 = 0uLL;
    v11 = 0;
    sub_242910BEC(&v10);
    v4 = *(_QWORD *)(a2 + 24);
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    v10 = v6;
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v4;
    v11 = v7;
    v12 = (void **)&v10;
    v9 = &off_25135CB10;
    sub_242910B70(&v12);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::BraveHeartVO2MaxInput::formatText(CMMsl::BraveHeartVO2MaxInput *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "vo2MaxInput");
  }
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BraveHeartVO2MaxInput::readFrom(CMMsl::BraveHeartVO2MaxInput *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  char *v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  int64x2_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64x2_t v41;
  unint64_t v42;
  char *v43;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (char *)this + 24;
    while (1)
    {
      v9 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_25;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v12 >> 3) == 1)
      {
        v20 = operator new();
        v21 = v20;
        *(_QWORD *)v20 = &off_2513617D8;
        *(_DWORD *)(v20 + 88) = 0;
        v23 = (uint64_t *)*((_QWORD *)this + 2);
        v22 = *((_QWORD *)this + 3);
        if ((unint64_t)v23 >= v22)
        {
          v26 = *((_QWORD *)this + 1);
          v27 = ((uint64_t)v23 - v26) >> 3;
          if ((unint64_t)(v27 + 1) >> 61)
            sub_242729A44();
          v28 = v22 - v26;
          v29 = v28 >> 2;
          if (v28 >> 2 <= (unint64_t)(v27 + 1))
            v29 = v27 + 1;
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
            v30 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v30 = v29;
          v43 = v8;
          if (v30)
            v30 = (unint64_t)sub_2429112FC(v30);
          else
            v31 = 0;
          v32 = (uint64_t *)(v30 + 8 * v27);
          v33 = v30 + 8 * v31;
          v42 = v33;
          *v32 = v21;
          v24 = v32 + 1;
          v41.i64[1] = (uint64_t)(v32 + 1);
          v35 = (_QWORD *)*((_QWORD *)this + 1);
          v34 = (_QWORD *)*((_QWORD *)this + 2);
          if (v34 == v35)
          {
            v37 = vdupq_n_s64((unint64_t)v34);
          }
          else
          {
            do
            {
              v36 = *--v34;
              *v34 = 0;
              *--v32 = v36;
            }
            while (v34 != v35);
            v37 = *(int64x2_t *)((char *)this + 8);
            v24 = (_QWORD *)v41.i64[1];
            v33 = v42;
          }
          *((_QWORD *)this + 1) = v32;
          *((_QWORD *)this + 2) = v24;
          v41 = v37;
          v38 = *((_QWORD *)this + 3);
          *((_QWORD *)this + 3) = v33;
          v42 = v38;
          v40 = v37.i64[0];
          sub_2429114EC((uint64_t)&v40);
        }
        else
        {
          *v23 = v20;
          v24 = v23 + 1;
        }
        *((_QWORD *)this + 2) = v24;
        v39 = *(v24 - 1);
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v39 + 16))(v39, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_25:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)a2 + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      v15 = v17++ > 8;
      if (v15)
        goto LABEL_25;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sub_24275DCF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::BraveHeartVO2MaxInput::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base **v2;
  const PB::Base **i;
  const PB::Base *v5;

  v2 = *(const PB::Base ***)(this + 8);
  for (i = *(const PB::Base ***)(this + 16); v2 != i; this = PB::Writer::writeSubmessage(a2, v5))
    v5 = *v2++;
  return this;
}

BOOL CMMsl::BraveHeartVO2MaxInput::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;
  BOOL v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(uint64_t **)(a2 + 8);
  if (v3 - v2 != *(_QWORD *)(a2 + 16) - (_QWORD)v4)
    return 0;
  if (v2 == v3)
    return 1;
  v5 = v2 + 8;
  do
  {
    v6 = *v4++;
    result = CMMsl::VO2MaxInput::operator==(*(_QWORD *)(v5 - 8), v6);
    v8 = !result || v5 == v3;
    v5 += 8;
  }
  while (!v8);
  return result;
}

BOOL sub_24275DDC8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 result;
  BOOL v9;

  if (a2 - a1 != a4 - (_QWORD)a3)
    return 0;
  if (a1 == a2)
    return 1;
  v5 = a3;
  v6 = a1 + 8;
  do
  {
    v7 = *v5++;
    result = CMMsl::VO2MaxInput::operator==(*(_QWORD *)(v6 - 8), v7);
    v9 = !result || v6 == a2;
    v6 += 8;
  }
  while (!v9);
  return result;
}

uint64_t CMMsl::BraveHeartVO2MaxInput::hash_value(CMMsl::BraveHeartVO2MaxInput *this)
{
  CMMsl::VO2MaxInput **v1;
  CMMsl::VO2MaxInput **v2;
  uint64_t v3;
  CMMsl::VO2MaxInput *v4;

  v1 = (CMMsl::VO2MaxInput **)*((_QWORD *)this + 1);
  v2 = (CMMsl::VO2MaxInput **)*((_QWORD *)this + 2);
  if (v1 == v2)
    return 0;
  v3 = 0;
  do
  {
    v4 = *v1++;
    v3 ^= CMMsl::VO2MaxInput::hash_value(v4);
  }
  while (v1 != v2);
  return v3;
}

uint64_t CMMsl::BraveHeartWorkoutEvent::BraveHeartWorkoutEvent(uint64_t this)
{
  *(_QWORD *)this = &off_25135CB48;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135CB48;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void CMMsl::BraveHeartWorkoutEvent::~BraveHeartWorkoutEvent(CMMsl::BraveHeartWorkoutEvent *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::BraveHeartWorkoutEvent::BraveHeartWorkoutEvent(CMMsl::BraveHeartWorkoutEvent *this, const CMMsl::BraveHeartWorkoutEvent *a2)
{
  char v2;
  char v3;
  int v4;
  int v5;
  double result;

  *(_QWORD *)this = &off_25135CB48;
  *((_DWORD *)this + 6) = 0;
  v2 = *((_BYTE *)a2 + 24);
  if ((v2 & 4) != 0)
  {
    v4 = *((_DWORD *)a2 + 5);
    v3 = 4;
    *((_BYTE *)this + 24) = 4;
    *((_DWORD *)this + 5) = v4;
    v2 = *((_BYTE *)a2 + 24);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 24) & 2) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((_BYTE *)this + 24) = v3;
    *((_DWORD *)this + 4) = v5;
    v2 = *((_BYTE *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    result = *((double *)a2 + 1);
    *((_BYTE *)this + 24) = v3 | 1;
    *((double *)this + 1) = result;
  }
  return result;
}

uint64_t CMMsl::BraveHeartWorkoutEvent::operator=(uint64_t a1, uint64_t a2, double a3)
{
  int v3;
  void (**v5)(CMMsl::BraveHeartWorkoutEvent *__hidden);
  char v6;
  char v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  int v13;

  if (a1 != a2)
  {
    v5 = &off_25135CB48;
    v12[0] = &off_25135CB48;
    v13 = 0;
    v6 = *(_BYTE *)(a2 + 24);
    if ((v6 & 4) != 0)
    {
      LODWORD(v5) = *(_DWORD *)(a2 + 20);
      v7 = 4;
      LOBYTE(v13) = 4;
      if ((v6 & 2) != 0)
      {
LABEL_4:
        v3 = *(_DWORD *)(a2 + 16);
        v7 |= 2u;
        LOBYTE(v13) = v7;
        if ((v6 & 1) != 0)
          goto LABEL_8;
        goto LABEL_9;
      }
    }
    else
    {
      v7 = 0;
      if ((*(_BYTE *)(a2 + 24) & 2) != 0)
        goto LABEL_4;
    }
    if ((v6 & 1) != 0)
    {
LABEL_8:
      a3 = *(double *)(a2 + 8);
      LOBYTE(v13) = v7 | 1;
    }
LABEL_9:
    v8 = v13;
    v13 = *(_DWORD *)(a1 + 24);
    v10 = *(_QWORD *)(a1 + 8);
    v9 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 20) = (_DWORD)v5;
    *(_DWORD *)(a1 + 24) = v8;
    *(_DWORD *)(a1 + 16) = v3;
    *(double *)(a1 + 8) = a3;
    v12[1] = v10;
    v12[2] = v9;
    PB::Base::~Base((PB::Base *)v12);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::BraveHeartWorkoutEvent *a2, CMMsl::BraveHeartWorkoutEvent *a3)
{
  int v3;
  int v4;
  int v5;
  double result;

  v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  v4 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::BraveHeartWorkoutEvent::BraveHeartWorkoutEvent(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135CB48;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135CB48;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::BraveHeartWorkoutEvent::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];
  int v10;

  if (a1 != a2)
  {
    v9[0] = &off_25135CB48;
    v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v10 = *(_DWORD *)(a1 + 24);
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 24) = v3;
    v7 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    v9[1] = v7;
    v9[2] = v6;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::BraveHeartWorkoutEvent::formatText(CMMsl::BraveHeartWorkoutEvent *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 1) == 0)
  {
    if ((*((_BYTE *)this + 24) & 2) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(a2, "eventType");
    if ((*((_BYTE *)this + 24) & 4) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_4;
  }
  PB::TextFormatter::format(a2, "eventTime", *((double *)this + 1));
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 2) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 4) != 0)
LABEL_4:
    PB::TextFormatter::format(a2, "workoutType");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BraveHeartWorkoutEvent::readFrom(CMMsl::BraveHeartWorkoutEvent *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  char v33;
  char v34;
  unsigned int v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  unint64_t v40;
  char v41;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_31;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v19 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((_BYTE *)this + 24) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else if ((_DWORD)v19 == 2)
      {
        *((_BYTE *)this + 24) |= 2u;
        v28 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v29 = *(_QWORD *)a2;
        if (v28 > 0xFFFFFFFFFFFFFFF5 || v28 + 10 > v2)
        {
          v38 = 0;
          v39 = 0;
          v32 = 0;
          if (v2 <= v28)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v28)
            {
              LODWORD(v32) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_72;
            }
            v40 = v28++;
            v41 = *(_BYTE *)(v29 + v40);
            *((_QWORD *)a2 + 1) = v28;
            v32 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0)
              break;
            v38 += 7;
            v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v32) = 0;
              goto LABEL_71;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v32) = 0;
LABEL_71:
          v2 = v40 + 1;
        }
        else
        {
          v30 = 0;
          v31 = 0;
          v32 = 0;
          while (1)
          {
            v2 = v28 + 1;
            *((_QWORD *)a2 + 1) = v28 + 1;
            v33 = *(_BYTE *)(v29 + v28);
            v32 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0)
              break;
            v30 += 7;
            v28 = v2;
            v14 = v31++ > 8;
            if (v14)
            {
              LODWORD(v32) = 0;
              break;
            }
          }
        }
LABEL_72:
        *((_DWORD *)this + 4) = v32;
      }
      else if ((_DWORD)v19 == 1)
      {
        *((_BYTE *)this + 24) |= 4u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v34 = 0;
          v35 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_67;
            }
            v36 = v20++;
            v37 = *(_BYTE *)(v21 + v36);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0)
              break;
            v34 += 7;
            v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_66;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
LABEL_66:
          v2 = v36 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)a2 + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_67:
        *((_DWORD *)this + 5) = v24;
      }
      else
      {
LABEL_31:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_31;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::BraveHeartWorkoutEvent::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 24);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 24);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        return this;
      return PB::Writer::write(a2, *(double *)(v3 + 8));
    }
  }
  else if ((*(_BYTE *)(this + 24) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  if ((*(_BYTE *)(v3 + 24) & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 8));
  return this;
}

BOOL CMMsl::BraveHeartWorkoutEvent::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 24) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 24) & 1) == 0;
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    return (*(_BYTE *)(a2 + 24) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  return v2;
}

uint64_t CMMsl::BraveHeartWorkoutEvent::hash_value(CMMsl::BraveHeartWorkoutEvent *this)
{
  uint64_t v1;
  uint64_t v2;
  double v3;

  if ((*((_BYTE *)this + 24) & 4) != 0)
  {
    v1 = *((unsigned int *)this + 5);
    if ((*((_BYTE *)this + 24) & 2) != 0)
    {
LABEL_3:
      v2 = *((int *)this + 4);
      if ((*((_BYTE *)this + 24) & 1) != 0)
        goto LABEL_4;
LABEL_9:
      v3 = 0.0;
      return v2 ^ v1 ^ *(_QWORD *)&v3;
    }
  }
  else
  {
    v1 = 0;
    if ((*((_BYTE *)this + 24) & 2) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 24) & 1) == 0)
    goto LABEL_9;
LABEL_4:
  v3 = *((double *)this + 1);
  if (v3 == 0.0)
    v3 = 0.0;
  return v2 ^ v1 ^ *(_QWORD *)&v3;
}

uint64_t CMMsl::BumpToWakeState::BumpToWakeState(uint64_t this)
{
  *(_QWORD *)this = &off_25135CB80;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135CB80;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::BumpToWakeState::~BumpToWakeState(CMMsl::BumpToWakeState *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::BumpToWakeState::BumpToWakeState(uint64_t this, const CMMsl::BumpToWakeState *a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)this = &off_25135CB80;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)this = &off_25135CB80;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::BumpToWakeState::operator=(uint64_t a1, uint64_t a2)
{
  int v2;
  void (**v4)(CMMsl::BumpToWakeState *__hidden);
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  uint64_t v12;

  if (a1 != a2)
  {
    v4 = &off_25135CB80;
    v11[0] = &off_25135CB80;
    HIDWORD(v12) = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      v4 = *(void (***)(CMMsl::BumpToWakeState *__hidden))(a2 + 8);
      BYTE4(v12) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        v2 = *(_DWORD *)(a2 + 16);
        BYTE4(v12) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = HIDWORD(v12);
    v8 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v11[1] = v8;
    v9 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v2;
    *(_DWORD *)(a1 + 20) = v7;
    v12 = v9;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v8[0] = &off_25135CB80;
    v8[1] = v5;
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v4;
    v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::BumpToWakeState *a2, CMMsl::BumpToWakeState *a3)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  return this;
}

uint64_t CMMsl::BumpToWakeState::BumpToWakeState(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = &off_25135CB80;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  *(_QWORD *)result = &off_25135CB80;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::BumpToWakeState::formatText(CMMsl::BumpToWakeState *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "state");
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BumpToWakeState::readFrom(CMMsl::BumpToWakeState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  char v24;
  uint64_t result;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  unint64_t v38;
  char v39;

  v3 = *((_QWORD *)a2 + 1);
  v2 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v3 + 1;
        *((_QWORD *)a2 + 1) = v3 + 1;
        v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v3 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_30;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v36 = 0;
          v37 = 0;
          v30 = 0;
          if (v2 <= v26)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_64;
            }
            v38 = v26++;
            v39 = *(_BYTE *)(v27 + v38);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v39 & 0x7F) << v36;
            if ((v39 & 0x80) == 0)
              break;
            v36 += 7;
            v14 = v37++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              goto LABEL_63;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v30) = 0;
LABEL_63:
          v3 = v38 + 1;
        }
        else
        {
          v28 = 0;
          v29 = 0;
          v30 = 0;
          while (1)
          {
            v3 = v26 + 1;
            *((_QWORD *)a2 + 1) = v26 + 1;
            v31 = *(_BYTE *)(v27 + v26);
            v30 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v26 = v3;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              break;
            }
          }
        }
LABEL_64:
        *((_DWORD *)this + 4) = v30;
      }
      else if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v19 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v20 = *(_QWORD *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v2)
        {
          v32 = 0;
          v33 = 0;
          v23 = 0;
          if (v2 <= v19)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v19)
            {
              v23 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_60;
            }
            v34 = v19++;
            v35 = *(_BYTE *)(v20 + v34);
            *((_QWORD *)a2 + 1) = v19;
            v23 |= (unint64_t)(v35 & 0x7F) << v32;
            if ((v35 & 0x80) == 0)
              break;
            v32 += 7;
            v14 = v33++ > 8;
            if (v14)
            {
              v23 = 0;
              goto LABEL_59;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v23 = 0;
LABEL_59:
          v3 = v34 + 1;
        }
        else
        {
          v21 = 0;
          v22 = 0;
          v23 = 0;
          while (1)
          {
            v3 = v19 + 1;
            *((_QWORD *)a2 + 1) = v19 + 1;
            v24 = *(_BYTE *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0)
              break;
            v21 += 7;
            v19 = v3;
            v14 = v22++ > 8;
            if (v14)
            {
              v23 = 0;
              break;
            }
          }
        }
LABEL_60:
        *((_QWORD *)this + 1) = v23;
      }
      else
      {
LABEL_30:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v3 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v2 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v3 > v2)
      v2 = v3;
    while (v2 != v3)
    {
      v17 = v3 + 1;
      v18 = *(_BYTE *)(v8 + v3);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v3 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_30;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::BumpToWakeState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

BOOL CMMsl::BumpToWakeState::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

uint64_t CMMsl::BumpToWakeState::hash_value(CMMsl::BumpToWakeState *this)
{
  uint64_t v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((_QWORD *)this + 1);
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_5:
    v2 = 0;
    return v2 ^ v1;
  }
  v1 = 0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_5;
LABEL_3:
  v2 = *((unsigned int *)this + 4);
  return v2 ^ v1;
}

double CMMsl::CV3DPredictedPose::CV3DPredictedPose(CMMsl::CV3DPredictedPose *this)
{
  double result;

  *(_QWORD *)this = &off_25135CBB8;
  *((_DWORD *)this + 18) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_25135CBB8;
  *((_DWORD *)this + 18) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

void CMMsl::CV3DPredictedPose::~CV3DPredictedPose(CMMsl::CV3DPredictedPose *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_25135CBB8;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::CV3DPredictedPose::~CV3DPredictedPose(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::CV3DPredictedPose *CMMsl::CV3DPredictedPose::CV3DPredictedPose(CMMsl::CV3DPredictedPose *this, const CMMsl::CV3DPredictedPose *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_25135CBB8;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (_QWORD *)((char *)this + 8);
  *((_DWORD *)this + 18) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if ((*((_BYTE *)a2 + 72) & 2) != 0)
  {
    v5 = *((_QWORD *)a2 + 8);
    *((_BYTE *)this + 72) = 2;
    *((_QWORD *)this + 8) = v5;
  }
  if (this != a2)
  {
    sub_2429111C4(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
    sub_2429111C4((_QWORD *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3);
  }
  if ((*((_BYTE *)a2 + 72) & 1) != 0)
  {
    v6 = *((_QWORD *)a2 + 7);
    *((_BYTE *)this + 72) |= 1u;
    *((_QWORD *)this + 7) = v6;
  }
  return this;
}

uint64_t CMMsl::CV3DPredictedPose::operator=(uint64_t a1, const CMMsl::CV3DPredictedPose *a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;

  if ((const CMMsl::CV3DPredictedPose *)a1 != a2)
  {
    CMMsl::CV3DPredictedPose::CV3DPredictedPose((CMMsl::CV3DPredictedPose *)&v9, a2);
    v3 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v14;
    v14 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v11 = v5;
    v6 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v12 = v6;
    v7 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v13;
    v13 = v7;
    CMMsl::CV3DPredictedPose::~CV3DPredictedPose((CMMsl::CV3DPredictedPose *)&v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::CV3DPredictedPose *a2, CMMsl::CV3DPredictedPose *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;

  v3 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v3;
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  v8 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v8;
  v9 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v9;
  v10 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v10;
  result = *((double *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((double *)a2 + 7) = result;
  return result;
}

uint64_t CMMsl::CV3DPredictedPose::CV3DPredictedPose(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = &off_25135CBB8;
  v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  sub_242911330(v4, (__n128 *)(a2 + 32));
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

uint64_t CMMsl::CV3DPredictedPose::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;

  if (a1 != a2)
  {
    CMMsl::CV3DPredictedPose::CV3DPredictedPose((uint64_t)&v9, a2);
    v3 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v14;
    v14 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v11 = v5;
    v6 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v12 = v6;
    v7 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v13;
    v13 = v7;
    CMMsl::CV3DPredictedPose::~CV3DPredictedPose((CMMsl::CV3DPredictedPose *)&v9);
  }
  return a1;
}

uint64_t CMMsl::CV3DPredictedPose::formatText(CMMsl::CV3DPredictedPose *this, PB::TextFormatter *a2, const char *a3)
{
  double *v5;
  double *v6;
  double v7;
  char v8;
  double *v9;
  double *v10;
  double v11;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (double *)*((_QWORD *)this + 1);
  v6 = (double *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "rotationMatrix", v7);
  }
  v8 = *((_BYTE *)this + 72);
  if ((v8 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "targetTimestamp", *((double *)this + 7));
    v8 = *((_BYTE *)this + 72);
  }
  if ((v8 & 2) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 8));
  v9 = (double *)*((_QWORD *)this + 4);
  v10 = (double *)*((_QWORD *)this + 5);
  while (v9 != v10)
  {
    v11 = *v9++;
    PB::TextFormatter::format(a2, "translation", v11);
  }
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::CV3DPredictedPose::readFrom(CMMsl::CV3DPredictedPose *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  _QWORD *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  _QWORD *v52;
  unint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_21:
      v19 = v11 & 7;
      if (v19 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 72) |= 2u;
          v20 = *((_QWORD *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_115;
          *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v20);
          goto LABEL_117;
        case 2u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v21 = *((_QWORD *)a2 + 1);
            v22 = *((_QWORD *)a2 + 2);
            while (v21 < v22 && !*((_BYTE *)a2 + 24))
            {
              v24 = (char *)*((_QWORD *)this + 2);
              v23 = *((_QWORD *)this + 3);
              if ((unint64_t)v24 >= v23)
              {
                v26 = (char *)*((_QWORD *)this + 1);
                v27 = (v24 - v26) >> 3;
                v28 = v27 + 1;
                if ((unint64_t)(v27 + 1) >> 61)
                  goto LABEL_125;
                v29 = v23 - (_QWORD)v26;
                if (v29 >> 2 > v28)
                  v28 = v29 >> 2;
                if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
                  v30 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v30 = v28;
                if (v30)
                {
                  v30 = (unint64_t)sub_2429112FC(v30);
                  v26 = (char *)*((_QWORD *)this + 1);
                  v24 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v31 = 0;
                }
                v32 = (_QWORD *)(v30 + 8 * v27);
                *v32 = 0;
                v25 = v32 + 1;
                while (v24 != v26)
                {
                  v33 = *((_QWORD *)v24 - 1);
                  v24 -= 8;
                  *--v32 = v33;
                }
                *((_QWORD *)this + 1) = v32;
                *((_QWORD *)this + 2) = v25;
                *((_QWORD *)this + 3) = v30 + 8 * v31;
                if (v26)
                  operator delete(v26);
              }
              else
              {
                *(_QWORD *)v24 = 0;
                v25 = v24 + 8;
              }
              *((_QWORD *)this + 2) = v25;
              v34 = *((_QWORD *)a2 + 1);
              if (v34 > 0xFFFFFFFFFFFFFFF7 || v34 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_81;
              *(v25 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v34);
              v22 = *((_QWORD *)a2 + 2);
              v21 = *((_QWORD *)a2 + 1) + 8;
              *((_QWORD *)a2 + 1) = v21;
            }
            goto LABEL_82;
          }
          v51 = (char *)*((_QWORD *)this + 2);
          v50 = *((_QWORD *)this + 3);
          if ((unint64_t)v51 >= v50)
          {
            v55 = (char *)*((_QWORD *)this + 1);
            v56 = (v51 - v55) >> 3;
            v57 = v56 + 1;
            if ((unint64_t)(v56 + 1) >> 61)
              goto LABEL_125;
            v58 = v50 - (_QWORD)v55;
            if (v58 >> 2 > v57)
              v57 = v58 >> 2;
            if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8)
              v59 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v59 = v57;
            if (v59)
            {
              v59 = (unint64_t)sub_2429112FC(v59);
              v55 = (char *)*((_QWORD *)this + 1);
              v51 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v60 = 0;
            }
            v67 = (_QWORD *)(v59 + 8 * v56);
            *v67 = 0;
            v52 = v67 + 1;
            while (v51 != v55)
            {
              v68 = *((_QWORD *)v51 - 1);
              v51 -= 8;
              *--v67 = v68;
            }
            *((_QWORD *)this + 1) = v67;
            *((_QWORD *)this + 2) = v52;
            *((_QWORD *)this + 3) = v59 + 8 * v60;
            if (v55)
              operator delete(v55);
          }
          else
          {
            *(_QWORD *)v51 = 0;
            v52 = v51 + 8;
          }
          *((_QWORD *)this + 2) = v52;
          goto LABEL_113;
        case 3u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v35 = *((_QWORD *)a2 + 1);
            v36 = *((_QWORD *)a2 + 2);
            while (v35 < v36 && !*((_BYTE *)a2 + 24))
            {
              v38 = (char *)*((_QWORD *)this + 5);
              v37 = *((_QWORD *)this + 6);
              if ((unint64_t)v38 >= v37)
              {
                v40 = (char *)*((_QWORD *)this + 4);
                v41 = (v38 - v40) >> 3;
                v42 = v41 + 1;
                if ((unint64_t)(v41 + 1) >> 61)
                  goto LABEL_125;
                v43 = v37 - (_QWORD)v40;
                if (v43 >> 2 > v42)
                  v42 = v43 >> 2;
                if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
                  v44 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v44 = v42;
                if (v44)
                {
                  v44 = (unint64_t)sub_2429112FC(v44);
                  v40 = (char *)*((_QWORD *)this + 4);
                  v38 = (char *)*((_QWORD *)this + 5);
                }
                else
                {
                  v45 = 0;
                }
                v46 = (_QWORD *)(v44 + 8 * v41);
                *v46 = 0;
                v39 = v46 + 1;
                while (v38 != v40)
                {
                  v47 = *((_QWORD *)v38 - 1);
                  v38 -= 8;
                  *--v46 = v47;
                }
                *((_QWORD *)this + 4) = v46;
                *((_QWORD *)this + 5) = v39;
                *((_QWORD *)this + 6) = v44 + 8 * v45;
                if (v40)
                  operator delete(v40);
              }
              else
              {
                *(_QWORD *)v38 = 0;
                v39 = v38 + 8;
              }
              *((_QWORD *)this + 5) = v39;
              v48 = *((_QWORD *)a2 + 1);
              if (v48 > 0xFFFFFFFFFFFFFFF7 || v48 + 8 > *((_QWORD *)a2 + 2))
              {
LABEL_81:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v39 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v48);
              v36 = *((_QWORD *)a2 + 2);
              v35 = *((_QWORD *)a2 + 1) + 8;
              *((_QWORD *)a2 + 1) = v35;
            }
LABEL_82:
            PB::Reader::recallMark();
          }
          else
          {
            v54 = (char *)*((_QWORD *)this + 5);
            v53 = *((_QWORD *)this + 6);
            if ((unint64_t)v54 >= v53)
            {
              v61 = (char *)*((_QWORD *)this + 4);
              v62 = (v54 - v61) >> 3;
              v63 = v62 + 1;
              if ((unint64_t)(v62 + 1) >> 61)
LABEL_125:
                sub_242729A44();
              v64 = v53 - (_QWORD)v61;
              if (v64 >> 2 > v63)
                v63 = v64 >> 2;
              if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
                v65 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v65 = v63;
              if (v65)
              {
                v65 = (unint64_t)sub_2429112FC(v65);
                v61 = (char *)*((_QWORD *)this + 4);
                v54 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v66 = 0;
              }
              v69 = (_QWORD *)(v65 + 8 * v62);
              *v69 = 0;
              v52 = v69 + 1;
              while (v54 != v61)
              {
                v70 = *((_QWORD *)v54 - 1);
                v54 -= 8;
                *--v69 = v70;
              }
              *((_QWORD *)this + 4) = v69;
              *((_QWORD *)this + 5) = v52;
              *((_QWORD *)this + 6) = v65 + 8 * v66;
              if (v61)
                operator delete(v61);
            }
            else
            {
              *(_QWORD *)v54 = 0;
              v52 = v54 + 8;
            }
            *((_QWORD *)this + 5) = v52;
LABEL_113:
            v71 = *((_QWORD *)a2 + 1);
            if (v71 <= 0xFFFFFFFFFFFFFFF7 && v71 + 8 <= *((_QWORD *)a2 + 2))
            {
              *(v52 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v71);
LABEL_117:
              *((_QWORD *)a2 + 1) += 8;
            }
            else
            {
LABEL_115:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
          break;
        case 4u:
          *((_BYTE *)this + 72) |= 1u;
          v49 = *((_QWORD *)a2 + 1);
          if (v49 > 0xFFFFFFFFFFFFFFF7 || v49 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_115;
          *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v49);
          goto LABEL_117;
        default:
          goto LABEL_19;
      }
      goto LABEL_118;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_21;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    if ((PB::Reader::skip(a2) & 1) == 0)
      return 0;
LABEL_118:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
}

uint64_t CMMsl::CV3DPredictedPose::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  double *v4;
  double *v5;
  double v6;
  double *v7;
  double *v8;
  double v9;

  v3 = this;
  if ((*(_BYTE *)(this + 72) & 2) != 0)
    this = PB::Writer::write(a2, *(double *)(this + 64));
  v4 = *(double **)(v3 + 8);
  v5 = *(double **)(v3 + 16);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6);
  }
  v7 = *(double **)(v3 + 32);
  v8 = *(double **)(v3 + 40);
  while (v7 != v8)
  {
    v9 = *v7++;
    this = PB::Writer::write(a2, v9);
  }
  if ((*(_BYTE *)(v3 + 72) & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 56));
  return this;
}

BOOL CMMsl::CV3DPredictedPose::operator==(uint64_t a1, uint64_t a2)
{
  double *v2;
  double *v3;
  double *v4;
  double *v5;
  double *v6;
  double *v7;
  _BOOL8 v8;

  if ((*(_BYTE *)(a1 + 72) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 72) & 2) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 72) & 2) != 0)
  {
    return 0;
  }
  v3 = *(double **)(a1 + 8);
  v2 = *(double **)(a1 + 16);
  v4 = *(double **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 16) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v6 = *(double **)(a1 + 32);
  v5 = *(double **)(a1 + 40);
  v7 = *(double **)(a2 + 32);
  if ((char *)v5 - (char *)v6 != *(_QWORD *)(a2 + 40) - (_QWORD)v7)
    return 0;
  while (v6 != v5)
  {
    if (*v6 != *v7)
      return 0;
    ++v6;
    ++v7;
  }
  v8 = (*(_BYTE *)(a2 + 72) & 1) == 0;
  if ((*(_BYTE *)(a1 + 72) & 1) != 0)
    return (*(_BYTE *)(a2 + 72) & 1) != 0 && *(double *)(a1 + 56) == *(double *)(a2 + 56);
  return v8;
}

uint64_t CMMsl::CV3DPredictedPose::hash_value(CMMsl::CV3DPredictedPose *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;

  if ((*((_BYTE *)this + 72) & 2) != 0)
  {
    if (*((double *)this + 8) == 0.0)
      v2 = 0;
    else
      v2 = *((_QWORD *)this + 8);
  }
  else
  {
    v2 = 0;
  }
  v3 = PBHashBytes();
  v4 = PBHashBytes();
  if ((*((_BYTE *)this + 72) & 1) != 0)
  {
    v5 = *((double *)this + 7);
    if (v5 == 0.0)
      v5 = 0.0;
  }
  else
  {
    v5 = 0.0;
  }
  return v3 ^ v2 ^ v4 ^ *(_QWORD *)&v5;
}

void CMMsl::CV3DSLAMState::~CV3DSLAMState(CMMsl::CV3DSLAMState *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_25135CBF0;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::CV3DSLAMState::~CV3DSLAMState(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::CV3DSLAMState *CMMsl::CV3DSLAMState::CV3DSLAMState(CMMsl::CV3DSLAMState *this, const CMMsl::CV3DSLAMState *a2)
{
  _QWORD *v4;
  uint64_t v5;

  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (_QWORD *)((char *)this + 8);
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_QWORD *)this = &off_25135CBF0;
  *((_DWORD *)this + 22) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 9) = 0;
  if ((*((_BYTE *)a2 + 88) & 1) != 0)
  {
    v5 = *((_QWORD *)a2 + 10);
    *((_BYTE *)this + 88) = 1;
    *((_QWORD *)this + 10) = v5;
  }
  if (this != a2)
  {
    sub_2429111C4(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
    sub_2429111C4((_QWORD *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3);
    sub_2429111C4((_QWORD *)this + 7, *((char **)a2 + 7), *((char **)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 3);
  }
  return this;
}

uint64_t CMMsl::CV3DSLAMState::operator=(uint64_t a1, const CMMsl::CV3DSLAMState *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;

  if ((const CMMsl::CV3DSLAMState *)a1 != a2)
  {
    CMMsl::CV3DSLAMState::CV3DSLAMState((CMMsl::CV3DSLAMState *)&v11, a2);
    v3 = *(_DWORD *)(a1 + 88);
    *(_DWORD *)(a1 + 88) = v18;
    v18 = v3;
    v4 = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v17;
    v17 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    v12 = v5;
    v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v13;
    v13 = v6;
    v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v14;
    v14 = v7;
    v8 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v15;
    v15 = v8;
    v9 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v16;
    v16 = v9;
    CMMsl::CV3DSLAMState::~CV3DSLAMState((CMMsl::CV3DSLAMState *)&v11);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::CV3DSLAMState *a2, CMMsl::CV3DSLAMState *a3)
{
  int v3;
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v3;
  result = *((double *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((double *)a2 + 10) = result;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  v8 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v8;
  v9 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v9;
  v10 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v10;
  v11 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v11;
  v12 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v12;
  v13 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v13;
  return result;
}

uint64_t CMMsl::CV3DSLAMState::CV3DSLAMState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_25135CBF0;
  v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  v5 = a1 + 56;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  sub_242911330(v4, (__n128 *)(a2 + 32));
  sub_242911330(v5, (__n128 *)(a2 + 56));
  return a1;
}

uint64_t CMMsl::CV3DSLAMState::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;

  if (a1 != a2)
  {
    CMMsl::CV3DSLAMState::CV3DSLAMState((uint64_t)&v11, a2);
    v3 = *(_DWORD *)(a1 + 88);
    *(_DWORD *)(a1 + 88) = v18;
    v18 = v3;
    v4 = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v17;
    v17 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    v12 = v5;
    v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v13;
    v13 = v6;
    v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v14;
    v14 = v7;
    v8 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v15;
    v15 = v8;
    v9 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v16;
    v16 = v9;
    CMMsl::CV3DSLAMState::~CV3DSLAMState((CMMsl::CV3DSLAMState *)&v11);
  }
  return a1;
}

uint64_t CMMsl::CV3DSLAMState::formatText(CMMsl::CV3DSLAMState *this, PB::TextFormatter *a2, const char *a3)
{
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;
  double *v11;
  double *v12;
  double v13;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (double *)*((_QWORD *)this + 1);
  v6 = (double *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "rotationMatrix", v7);
  }
  if ((*((_BYTE *)this + 88) & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 10));
  v8 = (double *)*((_QWORD *)this + 4);
  v9 = (double *)*((_QWORD *)this + 5);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(a2, "translation", v10);
  }
  v11 = (double *)*((_QWORD *)this + 7);
  v12 = (double *)*((_QWORD *)this + 8);
  while (v11 != v12)
  {
    v13 = *v11++;
    PB::TextFormatter::format(a2, "velocity", v13);
  }
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::CV3DSLAMState::readFrom(CMMsl::CV3DSLAMState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  _QWORD *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  _QWORD *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  _QWORD *v65;
  unint64_t v66;
  char *v67;
  unint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  unint64_t v94;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_21:
      v19 = v11 & 7;
      if (v19 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 88) |= 1u;
          v20 = *((_QWORD *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_153;
          *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v20);
          goto LABEL_155;
        case 2u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v21 = *((_QWORD *)a2 + 1);
            v22 = *((_QWORD *)a2 + 2);
            while (v21 < v22 && !*((_BYTE *)a2 + 24))
            {
              v24 = (char *)*((_QWORD *)this + 2);
              v23 = *((_QWORD *)this + 3);
              if ((unint64_t)v24 >= v23)
              {
                v26 = (char *)*((_QWORD *)this + 1);
                v27 = (v24 - v26) >> 3;
                v28 = v27 + 1;
                if ((unint64_t)(v27 + 1) >> 61)
                  goto LABEL_163;
                v29 = v23 - (_QWORD)v26;
                if (v29 >> 2 > v28)
                  v28 = v29 >> 2;
                if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
                  v30 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v30 = v28;
                if (v30)
                {
                  v30 = (unint64_t)sub_2429112FC(v30);
                  v26 = (char *)*((_QWORD *)this + 1);
                  v24 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v31 = 0;
                }
                v32 = (_QWORD *)(v30 + 8 * v27);
                *v32 = 0;
                v25 = v32 + 1;
                while (v24 != v26)
                {
                  v33 = *((_QWORD *)v24 - 1);
                  v24 -= 8;
                  *--v32 = v33;
                }
                *((_QWORD *)this + 1) = v32;
                *((_QWORD *)this + 2) = v25;
                *((_QWORD *)this + 3) = v30 + 8 * v31;
                if (v26)
                  operator delete(v26);
              }
              else
              {
                *(_QWORD *)v24 = 0;
                v25 = v24 + 8;
              }
              *((_QWORD *)this + 2) = v25;
              v34 = *((_QWORD *)a2 + 1);
              if (v34 > 0xFFFFFFFFFFFFFFF7 || v34 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_104;
              *(v25 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v34);
              v22 = *((_QWORD *)a2 + 2);
              v21 = *((_QWORD *)a2 + 1) + 8;
              *((_QWORD *)a2 + 1) = v21;
            }
            goto LABEL_105;
          }
          v64 = (char *)*((_QWORD *)this + 2);
          v63 = *((_QWORD *)this + 3);
          if ((unint64_t)v64 >= v63)
          {
            v70 = (char *)*((_QWORD *)this + 1);
            v71 = (v64 - v70) >> 3;
            v72 = v71 + 1;
            if ((unint64_t)(v71 + 1) >> 61)
              goto LABEL_163;
            v73 = v63 - (_QWORD)v70;
            if (v73 >> 2 > v72)
              v72 = v73 >> 2;
            if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF8)
              v74 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v74 = v72;
            if (v74)
            {
              v74 = (unint64_t)sub_2429112FC(v74);
              v70 = (char *)*((_QWORD *)this + 1);
              v64 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v75 = 0;
            }
            v88 = (_QWORD *)(v74 + 8 * v71);
            *v88 = 0;
            v65 = v88 + 1;
            while (v64 != v70)
            {
              v89 = *((_QWORD *)v64 - 1);
              v64 -= 8;
              *--v88 = v89;
            }
            *((_QWORD *)this + 1) = v88;
            *((_QWORD *)this + 2) = v65;
            *((_QWORD *)this + 3) = v74 + 8 * v75;
            if (v70)
              operator delete(v70);
          }
          else
          {
            *(_QWORD *)v64 = 0;
            v65 = v64 + 8;
          }
          *((_QWORD *)this + 2) = v65;
          goto LABEL_151;
        case 3u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v35 = *((_QWORD *)a2 + 1);
            v36 = *((_QWORD *)a2 + 2);
            while (v35 < v36 && !*((_BYTE *)a2 + 24))
            {
              v38 = (char *)*((_QWORD *)this + 5);
              v37 = *((_QWORD *)this + 6);
              if ((unint64_t)v38 >= v37)
              {
                v40 = (char *)*((_QWORD *)this + 4);
                v41 = (v38 - v40) >> 3;
                v42 = v41 + 1;
                if ((unint64_t)(v41 + 1) >> 61)
                  goto LABEL_163;
                v43 = v37 - (_QWORD)v40;
                if (v43 >> 2 > v42)
                  v42 = v43 >> 2;
                if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
                  v44 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v44 = v42;
                if (v44)
                {
                  v44 = (unint64_t)sub_2429112FC(v44);
                  v40 = (char *)*((_QWORD *)this + 4);
                  v38 = (char *)*((_QWORD *)this + 5);
                }
                else
                {
                  v45 = 0;
                }
                v46 = (_QWORD *)(v44 + 8 * v41);
                *v46 = 0;
                v39 = v46 + 1;
                while (v38 != v40)
                {
                  v47 = *((_QWORD *)v38 - 1);
                  v38 -= 8;
                  *--v46 = v47;
                }
                *((_QWORD *)this + 4) = v46;
                *((_QWORD *)this + 5) = v39;
                *((_QWORD *)this + 6) = v44 + 8 * v45;
                if (v40)
                  operator delete(v40);
              }
              else
              {
                *(_QWORD *)v38 = 0;
                v39 = v38 + 8;
              }
              *((_QWORD *)this + 5) = v39;
              v48 = *((_QWORD *)a2 + 1);
              if (v48 > 0xFFFFFFFFFFFFFFF7 || v48 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_104;
              *(v39 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v48);
              v36 = *((_QWORD *)a2 + 2);
              v35 = *((_QWORD *)a2 + 1) + 8;
              *((_QWORD *)a2 + 1) = v35;
            }
            goto LABEL_105;
          }
          v67 = (char *)*((_QWORD *)this + 5);
          v66 = *((_QWORD *)this + 6);
          if ((unint64_t)v67 >= v66)
          {
            v76 = (char *)*((_QWORD *)this + 4);
            v77 = (v67 - v76) >> 3;
            v78 = v77 + 1;
            if ((unint64_t)(v77 + 1) >> 61)
              goto LABEL_163;
            v79 = v66 - (_QWORD)v76;
            if (v79 >> 2 > v78)
              v78 = v79 >> 2;
            if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF8)
              v80 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v80 = v78;
            if (v80)
            {
              v80 = (unint64_t)sub_2429112FC(v80);
              v76 = (char *)*((_QWORD *)this + 4);
              v67 = (char *)*((_QWORD *)this + 5);
            }
            else
            {
              v81 = 0;
            }
            v90 = (_QWORD *)(v80 + 8 * v77);
            *v90 = 0;
            v65 = v90 + 1;
            while (v67 != v76)
            {
              v91 = *((_QWORD *)v67 - 1);
              v67 -= 8;
              *--v90 = v91;
            }
            *((_QWORD *)this + 4) = v90;
            *((_QWORD *)this + 5) = v65;
            *((_QWORD *)this + 6) = v80 + 8 * v81;
            if (v76)
              operator delete(v76);
          }
          else
          {
            *(_QWORD *)v67 = 0;
            v65 = v67 + 8;
          }
          *((_QWORD *)this + 5) = v65;
          goto LABEL_151;
        case 4u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v49 = *((_QWORD *)a2 + 1);
            v50 = *((_QWORD *)a2 + 2);
            while (v49 < v50 && !*((_BYTE *)a2 + 24))
            {
              v52 = (char *)*((_QWORD *)this + 8);
              v51 = *((_QWORD *)this + 9);
              if ((unint64_t)v52 >= v51)
              {
                v54 = (char *)*((_QWORD *)this + 7);
                v55 = (v52 - v54) >> 3;
                v56 = v55 + 1;
                if ((unint64_t)(v55 + 1) >> 61)
                  goto LABEL_163;
                v57 = v51 - (_QWORD)v54;
                if (v57 >> 2 > v56)
                  v56 = v57 >> 2;
                if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
                  v58 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v58 = v56;
                if (v58)
                {
                  v58 = (unint64_t)sub_2429112FC(v58);
                  v54 = (char *)*((_QWORD *)this + 7);
                  v52 = (char *)*((_QWORD *)this + 8);
                }
                else
                {
                  v59 = 0;
                }
                v60 = (_QWORD *)(v58 + 8 * v55);
                *v60 = 0;
                v53 = v60 + 1;
                while (v52 != v54)
                {
                  v61 = *((_QWORD *)v52 - 1);
                  v52 -= 8;
                  *--v60 = v61;
                }
                *((_QWORD *)this + 7) = v60;
                *((_QWORD *)this + 8) = v53;
                *((_QWORD *)this + 9) = v58 + 8 * v59;
                if (v54)
                  operator delete(v54);
              }
              else
              {
                *(_QWORD *)v52 = 0;
                v53 = v52 + 8;
              }
              *((_QWORD *)this + 8) = v53;
              v62 = *((_QWORD *)a2 + 1);
              if (v62 > 0xFFFFFFFFFFFFFFF7 || v62 + 8 > *((_QWORD *)a2 + 2))
              {
LABEL_104:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v53 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v62);
              v50 = *((_QWORD *)a2 + 2);
              v49 = *((_QWORD *)a2 + 1) + 8;
              *((_QWORD *)a2 + 1) = v49;
            }
LABEL_105:
            PB::Reader::recallMark();
          }
          else
          {
            v69 = (char *)*((_QWORD *)this + 8);
            v68 = *((_QWORD *)this + 9);
            if ((unint64_t)v69 >= v68)
            {
              v82 = (char *)*((_QWORD *)this + 7);
              v83 = (v69 - v82) >> 3;
              v84 = v83 + 1;
              if ((unint64_t)(v83 + 1) >> 61)
LABEL_163:
                sub_242729A44();
              v85 = v68 - (_QWORD)v82;
              if (v85 >> 2 > v84)
                v84 = v85 >> 2;
              if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8)
                v86 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v86 = v84;
              if (v86)
              {
                v86 = (unint64_t)sub_2429112FC(v86);
                v82 = (char *)*((_QWORD *)this + 7);
                v69 = (char *)*((_QWORD *)this + 8);
              }
              else
              {
                v87 = 0;
              }
              v92 = (_QWORD *)(v86 + 8 * v83);
              *v92 = 0;
              v65 = v92 + 1;
              while (v69 != v82)
              {
                v93 = *((_QWORD *)v69 - 1);
                v69 -= 8;
                *--v92 = v93;
              }
              *((_QWORD *)this + 7) = v92;
              *((_QWORD *)this + 8) = v65;
              *((_QWORD *)this + 9) = v86 + 8 * v87;
              if (v82)
                operator delete(v82);
            }
            else
            {
              *(_QWORD *)v69 = 0;
              v65 = v69 + 8;
            }
            *((_QWORD *)this + 8) = v65;
LABEL_151:
            v94 = *((_QWORD *)a2 + 1);
            if (v94 <= 0xFFFFFFFFFFFFFFF7 && v94 + 8 <= *((_QWORD *)a2 + 2))
            {
              *(v65 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v94);
LABEL_155:
              *((_QWORD *)a2 + 1) += 8;
            }
            else
            {
LABEL_153:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
          break;
        default:
          goto LABEL_19;
      }
      goto LABEL_156;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_21;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    if ((PB::Reader::skip(a2) & 1) == 0)
      return 0;
LABEL_156:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
}

uint64_t CMMsl::CV3DSLAMState::writeTo(uint64_t this, PB::Writer *a2)
{
  _QWORD *v3;
  double *v4;
  double *v5;
  double v6;
  double *v7;
  double *v8;
  double v9;
  double *v10;
  double *v11;
  double v12;

  v3 = (_QWORD *)this;
  if ((*(_BYTE *)(this + 88) & 1) != 0)
    this = PB::Writer::write(a2, *(double *)(this + 80));
  v4 = (double *)v3[1];
  v5 = (double *)v3[2];
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6);
  }
  v7 = (double *)v3[4];
  v8 = (double *)v3[5];
  while (v7 != v8)
  {
    v9 = *v7++;
    this = PB::Writer::write(a2, v9);
  }
  v11 = (double *)v3[7];
  v10 = (double *)v3[8];
  while (v11 != v10)
  {
    v12 = *v11++;
    this = PB::Writer::write(a2, v12);
  }
  return this;
}

uint64_t CMMsl::CV3DSLAMState::hash_value(CMMsl::CV3DSLAMState *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if ((*((_BYTE *)this + 88) & 1) != 0)
  {
    if (*((double *)this + 10) == 0.0)
      v1 = 0;
    else
      v1 = *((_QWORD *)this + 10);
  }
  else
  {
    v1 = 0;
  }
  v2 = PBHashBytes() ^ v1;
  v3 = PBHashBytes();
  return v2 ^ v3 ^ PBHashBytes();
}

uint64_t CMMsl::CVWatchCalories::CVWatchCalories(uint64_t this)
{
  *(_QWORD *)this = &off_25135CC28;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135CC28;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

void CMMsl::CVWatchCalories::~CVWatchCalories(CMMsl::CVWatchCalories *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::CVWatchCalories::CVWatchCalories(CMMsl::CVWatchCalories *this, const CMMsl::CVWatchCalories *a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)this = &off_25135CC28;
  *((_DWORD *)this + 7) = 0;
  v2 = *((_BYTE *)a2 + 28);
  if ((v2 & 4) != 0)
  {
    LODWORD(result) = *((_DWORD *)a2 + 6);
    v3 = 4;
    *((_BYTE *)this + 28) = 4;
    *((_DWORD *)this + 6) = LODWORD(result);
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 28) & 2) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 2);
    v3 |= 2u;
    *((_BYTE *)this + 28) = v3;
    *((double *)this + 2) = result;
    v2 = *((_BYTE *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    result = *((double *)a2 + 1);
    *((_BYTE *)this + 28) = v3 | 1;
    *((double *)this + 1) = result;
  }
  return result;
}

uint64_t CMMsl::CVWatchCalories::operator=(uint64_t a1, uint64_t a2, float a3, double a4, double a5)
{
  char v6;
  char v7;
  int v8;
  int v9;
  __int128 v10;
  void (**v12)(CMMsl::CVWatchCalories *__hidden);
  __int128 v13;
  int v14;
  int v15;

  if (a1 != a2)
  {
    v12 = &off_25135CC28;
    v15 = 0;
    v6 = *(_BYTE *)(a2 + 28);
    if ((v6 & 4) != 0)
    {
      a3 = *(float *)(a2 + 24);
      v7 = 4;
      LOBYTE(v15) = 4;
      if ((v6 & 2) != 0)
      {
LABEL_4:
        a4 = *(double *)(a2 + 16);
        v7 |= 2u;
        LOBYTE(v15) = v7;
        if ((v6 & 1) != 0)
          goto LABEL_8;
        goto LABEL_9;
      }
    }
    else
    {
      v7 = 0;
      if ((*(_BYTE *)(a2 + 28) & 2) != 0)
        goto LABEL_4;
    }
    if ((v6 & 1) != 0)
    {
LABEL_8:
      a5 = *(double *)(a2 + 8);
      LOBYTE(v15) = v7 | 1;
    }
LABEL_9:
    v8 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v15;
    v15 = v8;
    v9 = *(_DWORD *)(a1 + 24);
    *(float *)(a1 + 24) = a3;
    v14 = v9;
    v10 = *(_OWORD *)(a1 + 8);
    *(double *)(a1 + 8) = a5;
    *(double *)(a1 + 16) = a4;
    v13 = v10;
    PB::Base::~Base((PB::Base *)&v12);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::CVWatchCalories *a2, CMMsl::CVWatchCalories *a3)
{
  int v3;
  int v4;
  uint64_t v5;
  double result;

  v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  v4 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::CVWatchCalories::CVWatchCalories(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135CC28;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135CC28;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::CVWatchCalories::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  int v5;
  __int128 v6;
  __int128 v7;
  void (**v9)(CMMsl::CVWatchCalories *__hidden);
  __int128 v10;
  int v11;
  int v12;

  if (a1 != a2)
  {
    v9 = &off_25135CC28;
    v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    v4 = *(_DWORD *)(a2 + 24);
    v12 = *(_DWORD *)(a1 + 28);
    v5 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v4;
    v11 = v5;
    v6 = *(_OWORD *)(a1 + 8);
    v7 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 28) = v3;
    *(_OWORD *)(a1 + 8) = v7;
    v10 = v6;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::CVWatchCalories::formatText(CMMsl::CVWatchCalories *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 4) == 0)
  {
    if ((*((_BYTE *)this + 28) & 1) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(a2, "globalMachtime", *((double *)this + 1));
    if ((*((_BYTE *)this + 28) & 2) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_4;
  }
  PB::TextFormatter::format(a2, "calories_kCal", *((float *)this + 6));
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 1) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 2) != 0)
LABEL_4:
    PB::TextFormatter::format(a2, "localMachtime", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::CVWatchCalories::readFrom(CMMsl::CVWatchCalories *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          v14 = v16++ > 8;
          if (v14)
            goto LABEL_27;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v19 = v11 >> 3;
      if ((v11 >> 3) == 3)
        break;
      if ((_DWORD)v19 == 2)
      {
        *((_BYTE *)this + 28) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_36:
        v2 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_37;
      }
      if ((_DWORD)v19 != 1)
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        goto LABEL_38;
      }
      *((_BYTE *)this + 28) |= 4u;
      v2 = *((_QWORD *)a2 + 1);
      if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
      {
LABEL_34:
        *((_BYTE *)a2 + 24) = 1;
        goto LABEL_38;
      }
      *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
      v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_37:
      *((_QWORD *)a2 + 1) = v2;
LABEL_38:
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    *((_BYTE *)this + 28) |= 1u;
    v2 = *((_QWORD *)a2 + 1);
    if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
      goto LABEL_34;
    *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
    goto LABEL_36;
  }
  return v4 == 0;
}

uint64_t CMMsl::CVWatchCalories::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 28);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 24));
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        return this;
      return PB::Writer::write(a2, *(double *)(v3 + 8));
    }
  }
  else if ((*(_BYTE *)(this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  if ((*(_BYTE *)(v3 + 28) & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 8));
  return this;
}

BOOL CMMsl::CVWatchCalories::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 28) & 1) == 0;
  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
    return (*(_BYTE *)(a2 + 28) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  return v2;
}

uint64_t CMMsl::CVWatchCalories::hash_value(CMMsl::CVWatchCalories *this)
{
  uint64_t v1;
  double v2;
  double v3;
  float v4;

  if ((*((_BYTE *)this + 28) & 4) != 0)
  {
    v4 = *((float *)this + 6);
    v1 = LODWORD(v4);
    if (v4 == 0.0)
      v1 = 0;
    if ((*((_BYTE *)this + 28) & 2) != 0)
    {
LABEL_3:
      v2 = *((double *)this + 2);
      if (v2 == 0.0)
        v2 = 0.0;
      if ((*((_BYTE *)this + 28) & 1) != 0)
        goto LABEL_6;
LABEL_13:
      v3 = 0.0;
      return *(_QWORD *)&v2 ^ v1 ^ *(_QWORD *)&v3;
    }
  }
  else
  {
    v1 = 0;
    if ((*((_BYTE *)this + 28) & 2) != 0)
      goto LABEL_3;
  }
  v2 = 0.0;
  if ((*((_BYTE *)this + 28) & 1) == 0)
    goto LABEL_13;
LABEL_6:
  v3 = *((double *)this + 1);
  if (v3 == 0.0)
    v3 = 0.0;
  return *(_QWORD *)&v2 ^ v1 ^ *(_QWORD *)&v3;
}

_QWORD *CMMsl::CalorieControllerMETsConsumed::CalorieControllerMETsConsumed(_QWORD *this)
{
  *this = &off_25135CC60;
  *(_QWORD *)((char *)this + 164) = 0;
  return this;
}

{
  *this = &off_25135CC60;
  *(_QWORD *)((char *)this + 164) = 0;
  return this;
}

void CMMsl::CalorieControllerMETsConsumed::~CalorieControllerMETsConsumed(CMMsl::CalorieControllerMETsConsumed *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::CalorieControllerMETsConsumed::CalorieControllerMETsConsumed(CMMsl::CalorieControllerMETsConsumed *this, const CMMsl::CalorieControllerMETsConsumed *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  char v14;
  char v15;
  int v16;

  *(_QWORD *)this = &off_25135CC60;
  *(_QWORD *)((char *)this + 164) = 0;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x2000000) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 30);
    v3 = 0x2000000;
    *(_QWORD *)((char *)this + 164) = 0x2000000;
    *((_DWORD *)this + 30) = v4;
    v2 = *(_QWORD *)((char *)a2 + 164);
    if ((v2 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 12);
    v3 |= 0x80uLL;
    *(_QWORD *)((char *)this + 164) = v3;
    *((_DWORD *)this + 12) = v4;
    v2 = *(_QWORD *)((char *)a2 + 164);
  }
LABEL_6:
  if ((v2 & 0x10000) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 21);
    v3 |= 0x10000uLL;
    *(_QWORD *)((char *)this + 164) = v3;
    *((_DWORD *)this + 21) = v4;
    v2 = *(_QWORD *)((char *)a2 + 164);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x40000000) == 0)
        goto LABEL_9;
      goto LABEL_45;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v5 = *((_DWORD *)a2 + 8);
  v3 |= 8uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 8) = v5;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_9:
    if ((v2 & 0x400000000) == 0)
      goto LABEL_10;
    goto LABEL_46;
  }
LABEL_45:
  LODWORD(v4) = *((_DWORD *)a2 + 35);
  v3 |= 0x40000000uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 35) = v4;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_10:
    if ((v2 & 0x400000) == 0)
      goto LABEL_11;
    goto LABEL_47;
  }
LABEL_46:
  LODWORD(v4) = *((_DWORD *)a2 + 39);
  v3 |= 0x400000000uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 39) = v4;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x400000) == 0)
  {
LABEL_11:
    if ((v2 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_48;
  }
LABEL_47:
  LODWORD(v4) = *((_DWORD *)a2 + 27);
  v3 |= 0x400000uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 27) = v4;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x20) == 0)
  {
LABEL_12:
    if ((v2 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_49;
  }
LABEL_48:
  LODWORD(v4) = *((_DWORD *)a2 + 10);
  v3 |= 0x20uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 10) = v4;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x40) == 0)
  {
LABEL_13:
    if ((v2 & 2) == 0)
      goto LABEL_14;
    goto LABEL_50;
  }
LABEL_49:
  LODWORD(v4) = *((_DWORD *)a2 + 11);
  v3 |= 0x40uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 11) = v4;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 2) == 0)
  {
LABEL_14:
    if ((v2 & 0x2000000000) == 0)
      goto LABEL_15;
    goto LABEL_51;
  }
LABEL_50:
  v4 = *((_QWORD *)a2 + 2);
  v3 |= 2uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_QWORD *)this + 2) = v4;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x2000000000) == 0)
  {
LABEL_15:
    if ((v2 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_52;
  }
LABEL_51:
  v6 = *((_BYTE *)a2 + 162);
  v3 |= 0x2000000000uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_BYTE *)this + 162) = v6;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x800) == 0)
  {
LABEL_16:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_17;
    goto LABEL_53;
  }
LABEL_52:
  LODWORD(v4) = *((_DWORD *)a2 + 16);
  v3 |= 0x800uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 16) = v4;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_18;
    goto LABEL_54;
  }
LABEL_53:
  LODWORD(v4) = *((_DWORD *)a2 + 33);
  v3 |= 0x10000000uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 33) = v4;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_19;
    goto LABEL_55;
  }
LABEL_54:
  v7 = *((_DWORD *)a2 + 32);
  v3 |= 0x8000000uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 32) = v7;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_19:
    if ((v2 & 0x20000000) == 0)
      goto LABEL_20;
    goto LABEL_56;
  }
LABEL_55:
  LODWORD(v4) = *((_DWORD *)a2 + 31);
  v3 |= 0x4000000uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 31) = v4;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_20:
    if ((v2 & 0x200) == 0)
      goto LABEL_21;
    goto LABEL_57;
  }
LABEL_56:
  LODWORD(v4) = *((_DWORD *)a2 + 34);
  v3 |= 0x20000000uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 34) = v4;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x200) == 0)
  {
LABEL_21:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_22;
    goto LABEL_58;
  }
LABEL_57:
  LODWORD(v4) = *((_DWORD *)a2 + 14);
  v3 |= 0x200uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 14) = v4;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_22:
    if ((v2 & 0x2000) == 0)
      goto LABEL_23;
    goto LABEL_59;
  }
LABEL_58:
  LODWORD(v4) = *((_DWORD *)a2 + 29);
  v3 |= 0x1000000uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 29) = v4;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x2000) == 0)
  {
LABEL_23:
    if ((v2 & 0x200000000) == 0)
      goto LABEL_24;
    goto LABEL_60;
  }
LABEL_59:
  v8 = *((_DWORD *)a2 + 18);
  v3 |= 0x2000uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 18) = v8;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_24:
    if ((v2 & 0x4000) == 0)
      goto LABEL_25;
    goto LABEL_61;
  }
LABEL_60:
  LODWORD(v4) = *((_DWORD *)a2 + 38);
  v3 |= 0x200000000uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 38) = v4;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x4000) == 0)
  {
LABEL_25:
    if ((v2 & 0x8000) == 0)
      goto LABEL_26;
    goto LABEL_62;
  }
LABEL_61:
  LODWORD(v4) = *((_DWORD *)a2 + 19);
  v3 |= 0x4000uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 19) = v4;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x8000) == 0)
  {
LABEL_26:
    if ((v2 & 0x1000) == 0)
      goto LABEL_27;
    goto LABEL_63;
  }
LABEL_62:
  LODWORD(v4) = *((_DWORD *)a2 + 20);
  v3 |= 0x8000uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 20) = v4;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x1000) == 0)
  {
LABEL_27:
    if ((v2 & 0x200000) == 0)
      goto LABEL_28;
    goto LABEL_64;
  }
LABEL_63:
  v9 = *((_DWORD *)a2 + 17);
  v3 |= 0x1000uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 17) = v9;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x200000) == 0)
  {
LABEL_28:
    if ((v2 & 0x100000) == 0)
      goto LABEL_29;
    goto LABEL_65;
  }
LABEL_64:
  LODWORD(v4) = *((_DWORD *)a2 + 26);
  v3 |= 0x200000uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 26) = v4;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x100000) == 0)
  {
LABEL_29:
    if ((v2 & 4) == 0)
      goto LABEL_30;
    goto LABEL_66;
  }
LABEL_65:
  LODWORD(v4) = *((_DWORD *)a2 + 25);
  v3 |= 0x100000uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 25) = v4;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 4) == 0)
  {
LABEL_30:
    if ((v2 & 1) == 0)
      goto LABEL_31;
    goto LABEL_67;
  }
LABEL_66:
  v10 = *((_QWORD *)a2 + 3);
  v3 |= 4uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_QWORD *)this + 3) = v10;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 1) == 0)
  {
LABEL_31:
    if ((v2 & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_68;
  }
LABEL_67:
  v11 = *((_QWORD *)a2 + 1);
  v3 |= 1uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_QWORD *)this + 1) = v11;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_32:
    if ((v2 & 0x80000) == 0)
      goto LABEL_33;
    goto LABEL_69;
  }
LABEL_68:
  LODWORD(v4) = *((_DWORD *)a2 + 36);
  v3 |= 0x80000000uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 36) = v4;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x80000) == 0)
  {
LABEL_33:
    if ((v2 & 0x10) == 0)
      goto LABEL_34;
    goto LABEL_70;
  }
LABEL_69:
  v12 = *((_DWORD *)a2 + 24);
  v3 |= 0x80000uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 24) = v12;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x10) == 0)
  {
LABEL_34:
    if ((v2 & 0x1000000000) == 0)
      goto LABEL_35;
    goto LABEL_71;
  }
LABEL_70:
  v13 = *((_DWORD *)a2 + 9);
  v3 |= 0x10uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 9) = v13;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x1000000000) == 0)
  {
LABEL_35:
    if ((v2 & 0x800000000) == 0)
      goto LABEL_36;
    goto LABEL_72;
  }
LABEL_71:
  v14 = *((_BYTE *)a2 + 161);
  v3 |= 0x1000000000uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_BYTE *)this + 161) = v14;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x800000000) == 0)
  {
LABEL_36:
    if ((v2 & 0x800000) == 0)
      goto LABEL_37;
    goto LABEL_73;
  }
LABEL_72:
  v15 = *((_BYTE *)a2 + 160);
  v3 |= 0x800000000uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_BYTE *)this + 160) = v15;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x800000) == 0)
  {
LABEL_37:
    if ((v2 & 0x20000) == 0)
      goto LABEL_38;
    goto LABEL_74;
  }
LABEL_73:
  LODWORD(v4) = *((_DWORD *)a2 + 28);
  v3 |= 0x800000uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 28) = v4;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x20000) == 0)
  {
LABEL_38:
    if ((v2 & 0x40000) == 0)
      goto LABEL_39;
    goto LABEL_75;
  }
LABEL_74:
  LODWORD(v4) = *((_DWORD *)a2 + 22);
  v3 |= 0x20000uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 22) = v4;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x40000) == 0)
  {
LABEL_39:
    if ((v2 & 0x400) == 0)
      goto LABEL_40;
    goto LABEL_76;
  }
LABEL_75:
  LODWORD(v4) = *((_DWORD *)a2 + 23);
  v3 |= 0x40000uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 23) = v4;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x400) == 0)
  {
LABEL_40:
    if ((v2 & 0x100) == 0)
      goto LABEL_41;
    goto LABEL_77;
  }
LABEL_76:
  v16 = *((_DWORD *)a2 + 15);
  v3 |= 0x400uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 15) = v16;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x100) == 0)
  {
LABEL_41:
    if ((v2 & 0x100000000) == 0)
      return *(float *)&v4;
    goto LABEL_78;
  }
LABEL_77:
  LODWORD(v4) = *((_DWORD *)a2 + 13);
  v3 |= 0x100uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 13) = v4;
  if ((*(_QWORD *)((_BYTE *)a2 + 164) & 0x100000000) == 0)
    return *(float *)&v4;
LABEL_78:
  LODWORD(v4) = *((_DWORD *)a2 + 37);
  *(_QWORD *)((char *)this + 164) = v3 | 0x100000000;
  *((_DWORD *)this + 37) = v4;
  return *(float *)&v4;
}

CMMsl *CMMsl::CalorieControllerMETsConsumed::operator=(CMMsl *a1, const CMMsl::CalorieControllerMETsConsumed *a2)
{
  CMMsl::CalorieControllerMETsConsumed *v3;
  _BYTE v5[176];

  if (a1 != a2)
  {
    CMMsl::CalorieControllerMETsConsumed::CalorieControllerMETsConsumed((CMMsl::CalorieControllerMETsConsumed *)v5, a2);
    CMMsl::swap(a1, (CMMsl::CalorieControllerMETsConsumed *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::CalorieControllerMETsConsumed *a2, CMMsl::CalorieControllerMETsConsumed *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float result;

  v3 = *(_QWORD *)((char *)this + 164);
  *(_QWORD *)((char *)this + 164) = *(_QWORD *)((char *)a2 + 164);
  *(_QWORD *)((char *)a2 + 164) = v3;
  v4 = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v4;
  v5 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v5;
  v6 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v6;
  LODWORD(v3) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v7 = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v7;
  v8 = *((_DWORD *)this + 39);
  *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
  *((_DWORD *)a2 + 39) = v8;
  v9 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v9;
  v10 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v10;
  v11 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v11;
  v12 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v12;
  LOBYTE(v3) = *((_BYTE *)this + 162);
  *((_BYTE *)this + 162) = *((_BYTE *)a2 + 162);
  *((_BYTE *)a2 + 162) = v3;
  LODWORD(v12) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v12;
  LODWORD(v12) = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v12;
  LODWORD(v3) = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v3;
  LODWORD(v12) = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v12;
  LODWORD(v12) = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v12;
  LODWORD(v12) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v12;
  LODWORD(v12) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v12;
  LODWORD(v3) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v3;
  LODWORD(v12) = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v12;
  LODWORD(v12) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v12;
  LODWORD(v12) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v12;
  LODWORD(v3) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v3;
  LODWORD(v12) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v12;
  LODWORD(v12) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v12;
  v13 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v13;
  v14 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v14;
  LODWORD(v12) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v12;
  LODWORD(v14) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v14;
  LODWORD(v14) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v14;
  LOBYTE(v14) = *((_BYTE *)this + 161);
  *((_BYTE *)this + 161) = *((_BYTE *)a2 + 161);
  *((_BYTE *)a2 + 161) = v14;
  LOBYTE(v14) = *((_BYTE *)this + 160);
  *((_BYTE *)this + 160) = *((_BYTE *)a2 + 160);
  *((_BYTE *)a2 + 160) = v14;
  LODWORD(v12) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v12;
  LODWORD(v12) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v12;
  LODWORD(v12) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v12;
  LODWORD(v14) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v14;
  LODWORD(v12) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v12;
  result = *((float *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((float *)a2 + 37) = result;
  return result;
}

float CMMsl::CalorieControllerMETsConsumed::CalorieControllerMETsConsumed(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135CC60;
  *(_QWORD *)(a1 + 164) = *(_QWORD *)(a2 + 164);
  *(_QWORD *)(a2 + 164) = 0;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 162) = *(_BYTE *)(a2 + 162);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_BYTE *)(a1 + 161) = *(_BYTE *)(a2 + 161);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  result = *(float *)(a2 + 148);
  *(float *)(a1 + 148) = result;
  return result;
}

CMMsl *CMMsl::CalorieControllerMETsConsumed::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::CalorieControllerMETsConsumed *v3;
  _BYTE v5[176];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::CalorieControllerMETsConsumed::CalorieControllerMETsConsumed((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::CalorieControllerMETsConsumed *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::CalorieControllerMETsConsumed::formatText(CMMsl::CalorieControllerMETsConsumed *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "activity");
    v5 = *(_QWORD *)((char *)this + 164);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_43;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "activityTypeWithoutOverride");
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0)
      goto LABEL_5;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "avgTruthMets", *((float *)this + 10));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "basalCalories");
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "basalMets", *((float *)this + 11));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "computeTime", *((float *)this + 12));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "currentPace", *((float *)this + 13));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "distance", *((float *)this + 14));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "distanceSource");
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "duration", *((float *)this + 16));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x1000) == 0)
  {
LABEL_12:
    if ((v5 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "elevationAscended");
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x2000) == 0)
  {
LABEL_13:
    if ((v5 & 0x4000) == 0)
      goto LABEL_14;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "gradeType");
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x4000) == 0)
  {
LABEL_14:
    if ((v5 & 0x8000) == 0)
      goto LABEL_15;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "heartRate", *((float *)this + 19));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x8000) == 0)
  {
LABEL_15:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_16;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "heartRateConfidence", *((float *)this + 20));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x800000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000000000) == 0)
      goto LABEL_17;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "isMotionOverrideSet");
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x1000000000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000000000) == 0)
      goto LABEL_18;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "isStanding");
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x2000000000) == 0)
  {
LABEL_18:
    if ((v5 & 0x10000) == 0)
      goto LABEL_19;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "isStored");
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x10000) == 0)
  {
LABEL_19:
    if ((v5 & 0x20000) == 0)
      goto LABEL_20;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "now", *((float *)this + 21));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x20000) == 0)
  {
LABEL_20:
    if ((v5 & 0x40000) == 0)
      goto LABEL_21;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "pedDistance", *((float *)this + 22));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x40000) == 0)
  {
LABEL_21:
    if ((v5 & 0x80000) == 0)
      goto LABEL_22;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "pedRawDistance", *((float *)this + 23));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x80000) == 0)
  {
LABEL_22:
    if ((v5 & 0x100000) == 0)
      goto LABEL_23;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "pushCount");
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x100000) == 0)
  {
LABEL_23:
    if ((v5 & 0x200000) == 0)
      goto LABEL_24;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "rawFMMets", *((float *)this + 25));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x200000) == 0)
  {
LABEL_24:
    if ((v5 & 0x400000) == 0)
      goto LABEL_25;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "rawHRMets", *((float *)this + 26));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x400000) == 0)
  {
LABEL_25:
    if ((v5 & 0x800000) == 0)
      goto LABEL_26;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "rawTruthMets", *((float *)this + 27));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x800000) == 0)
  {
LABEL_26:
    if ((v5 & 2) == 0)
      goto LABEL_27;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "rawWRMets", *((float *)this + 28));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 2) == 0)
  {
LABEL_27:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_28;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "recordInterval", *((double *)this + 2));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_29;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "speed", *((float *)this + 29));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_30;
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "startTime", *((float *)this + 30));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_31;
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(a2, "stepBegin", *((float *)this + 31));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_32;
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(a2, "stepCount");
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_33;
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(a2, "stepDuration", *((float *)this + 33));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_33:
    if ((v5 & 4) == 0)
      goto LABEL_34;
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(a2, "stepEnd", *((float *)this + 34));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 4) == 0)
  {
LABEL_34:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_35;
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(a2, "totalCalories");
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_36;
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(a2, "userMets", *((float *)this + 35));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_37;
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(a2, "vectorMag", *((float *)this + 36));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_37:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_38;
LABEL_77:
    PB::TextFormatter::format(a2, "verticalSpeed", *((float *)this + 38));
    if ((*(_QWORD *)((_BYTE *)this + 164) & 0x400000000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_39;
  }
LABEL_76:
  PB::TextFormatter::format(a2, "vectorMagCmSimOnly", *((float *)this + 37));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x200000000) != 0)
    goto LABEL_77;
LABEL_38:
  if ((v5 & 0x400000000) != 0)
LABEL_39:
    PB::TextFormatter::format(a2, "wrMets", *((float *)this + 39));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::CalorieControllerMETsConsumed::readFrom(CMMsl::CalorieControllerMETsConsumed *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  BOOL v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char v70;
  unsigned int v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  char v97;
  unsigned int v98;
  uint64_t v99;
  unint64_t v100;
  char v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  char v105;
  unsigned int v106;
  uint64_t v107;
  unint64_t v108;
  char v109;
  unint64_t v110;
  unint64_t v111;
  int v112;
  BOOL v113;
  unint64_t v114;
  unint64_t v115;
  int v116;
  BOOL v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  char v124;
  unsigned int v125;
  uint64_t v126;
  unint64_t v127;
  char v128;
  unint64_t v129;
  unint64_t v130;
  char v131;
  unsigned int v132;
  unint64_t v133;
  char v134;
  char v135;
  unsigned int v136;
  unint64_t v137;
  char v138;
  char v139;
  unsigned int v140;
  unint64_t v141;
  char v142;
  char v143;
  unsigned int v144;
  unint64_t v145;
  char v146;
  char v147;
  unsigned int v148;
  unint64_t v149;
  char v150;
  char v151;
  unsigned int v152;
  unint64_t v153;
  char v154;
  char v155;
  unsigned int v156;
  unint64_t v157;
  char v158;
  char v159;
  unsigned int v160;
  unint64_t v161;
  char v162;
  char v163;
  unsigned int v164;
  unint64_t v165;
  char v166;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      break;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *(_QWORD *)((char *)this + 164) |= 0x2000000uLL;
        v20 = *((_QWORD *)a2 + 1);
        if (v20 > 0xFFFFFFFFFFFFFFFBLL || v20 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_169;
        *((_DWORD *)this + 30) = *(_DWORD *)(*(_QWORD *)a2 + v20);
        goto LABEL_240;
      case 2u:
        *(_QWORD *)((char *)this + 164) |= 0x80uLL;
        v21 = *((_QWORD *)a2 + 1);
        if (v21 > 0xFFFFFFFFFFFFFFFBLL || v21 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_169;
        *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v21);
        goto LABEL_240;
      case 3u:
        *(_QWORD *)((char *)this + 164) |= 0x10000uLL;
        v22 = *((_QWORD *)a2 + 1);
        if (v22 > 0xFFFFFFFFFFFFFFFBLL || v22 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_169;
        *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v22);
        goto LABEL_240;
      case 4u:
        *(_QWORD *)((char *)this + 164) |= 8uLL;
        v23 = *((_QWORD *)a2 + 1);
        v24 = *((_QWORD *)a2 + 2);
        v25 = *(_QWORD *)a2;
        if (v23 <= 0xFFFFFFFFFFFFFFF5 && v23 + 10 <= v24)
        {
          v26 = 0;
          v27 = 0;
          v28 = 0;
          do
          {
            v29 = v23 + 1;
            *((_QWORD *)a2 + 1) = v23 + 1;
            v30 = *(_BYTE *)(v25 + v23);
            v28 |= (unint64_t)(v30 & 0x7F) << v26;
            if ((v30 & 0x80) == 0)
              goto LABEL_250;
            v26 += 7;
            v23 = v29;
            v14 = v27++ > 8;
          }
          while (!v14);
LABEL_176:
          LODWORD(v28) = 0;
          goto LABEL_250;
        }
        v131 = 0;
        v132 = 0;
        v28 = 0;
        if (v24 <= v23)
          v24 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v24 == v23)
          {
            LODWORD(v28) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v133 = v23 + 1;
            v134 = *(_BYTE *)(v25 + v23);
            *((_QWORD *)a2 + 1) = v133;
            v28 |= (unint64_t)(v134 & 0x7F) << v131;
            if (v134 < 0)
            {
              v131 += 7;
              v23 = v133;
              v14 = v132++ > 8;
              if (v14)
                goto LABEL_176;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v28) = 0;
          }
          break;
        }
LABEL_250:
        *((_DWORD *)this + 8) = v28;
        goto LABEL_242;
      case 5u:
        *(_QWORD *)((char *)this + 164) |= 0x40000000uLL;
        v31 = *((_QWORD *)a2 + 1);
        if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_169;
        *((_DWORD *)this + 35) = *(_DWORD *)(*(_QWORD *)a2 + v31);
        goto LABEL_240;
      case 6u:
        *(_QWORD *)((char *)this + 164) |= 0x400000000uLL;
        v32 = *((_QWORD *)a2 + 1);
        if (v32 > 0xFFFFFFFFFFFFFFFBLL || v32 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_169;
        *((_DWORD *)this + 39) = *(_DWORD *)(*(_QWORD *)a2 + v32);
        goto LABEL_240;
      case 7u:
        *(_QWORD *)((char *)this + 164) |= 0x400000uLL;
        v33 = *((_QWORD *)a2 + 1);
        if (v33 > 0xFFFFFFFFFFFFFFFBLL || v33 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_169;
        *((_DWORD *)this + 27) = *(_DWORD *)(*(_QWORD *)a2 + v33);
        goto LABEL_240;
      case 8u:
        *(_QWORD *)((char *)this + 164) |= 0x20uLL;
        v34 = *((_QWORD *)a2 + 1);
        if (v34 > 0xFFFFFFFFFFFFFFFBLL || v34 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_169;
        *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v34);
        goto LABEL_240;
      case 9u:
        *(_QWORD *)((char *)this + 164) |= 0x40uLL;
        v35 = *((_QWORD *)a2 + 1);
        if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_169;
        *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v35);
        goto LABEL_240;
      case 0xAu:
        *(_QWORD *)((char *)this + 164) |= 2uLL;
        v36 = *((_QWORD *)a2 + 1);
        if (v36 > 0xFFFFFFFFFFFFFFF7 || v36 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_169;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v36);
        v37 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_241;
      case 0xBu:
        *(_QWORD *)((char *)this + 164) |= 0x2000000000uLL;
        v38 = *((_QWORD *)a2 + 1);
        if (v38 >= *((_QWORD *)a2 + 2))
        {
          v41 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v39 = v38 + 1;
          v40 = *(unsigned __int8 *)(*(_QWORD *)a2 + v38);
          *((_QWORD *)a2 + 1) = v39;
          v41 = v40 != 0;
        }
        *((_BYTE *)this + 162) = v41;
        goto LABEL_242;
      case 0xCu:
        *(_QWORD *)((char *)this + 164) |= 0x800uLL;
        v42 = *((_QWORD *)a2 + 1);
        if (v42 > 0xFFFFFFFFFFFFFFFBLL || v42 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_169;
        *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v42);
        goto LABEL_240;
      case 0xDu:
        *(_QWORD *)((char *)this + 164) |= 0x10000000uLL;
        v43 = *((_QWORD *)a2 + 1);
        if (v43 > 0xFFFFFFFFFFFFFFFBLL || v43 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_169;
        *((_DWORD *)this + 33) = *(_DWORD *)(*(_QWORD *)a2 + v43);
        goto LABEL_240;
      case 0xEu:
        *(_QWORD *)((char *)this + 164) |= 0x8000000uLL;
        v44 = *((_QWORD *)a2 + 1);
        v45 = *((_QWORD *)a2 + 2);
        v46 = *(_QWORD *)a2;
        if (v44 <= 0xFFFFFFFFFFFFFFF5 && v44 + 10 <= v45)
        {
          v47 = 0;
          v48 = 0;
          v49 = 0;
          do
          {
            v50 = v44 + 1;
            *((_QWORD *)a2 + 1) = v44 + 1;
            v51 = *(_BYTE *)(v46 + v44);
            v49 |= (unint64_t)(v51 & 0x7F) << v47;
            if ((v51 & 0x80) == 0)
              goto LABEL_254;
            v47 += 7;
            v44 = v50;
            v14 = v48++ > 8;
          }
          while (!v14);
LABEL_185:
          LODWORD(v49) = 0;
          goto LABEL_254;
        }
        v135 = 0;
        v136 = 0;
        v49 = 0;
        if (v45 <= v44)
          v45 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v45 == v44)
          {
            LODWORD(v49) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v137 = v44 + 1;
            v138 = *(_BYTE *)(v46 + v44);
            *((_QWORD *)a2 + 1) = v137;
            v49 |= (unint64_t)(v138 & 0x7F) << v135;
            if (v138 < 0)
            {
              v135 += 7;
              v44 = v137;
              v14 = v136++ > 8;
              if (v14)
                goto LABEL_185;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v49) = 0;
          }
          break;
        }
LABEL_254:
        *((_DWORD *)this + 32) = v49;
        goto LABEL_242;
      case 0xFu:
        *(_QWORD *)((char *)this + 164) |= 0x4000000uLL;
        v52 = *((_QWORD *)a2 + 1);
        if (v52 > 0xFFFFFFFFFFFFFFFBLL || v52 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_169;
        *((_DWORD *)this + 31) = *(_DWORD *)(*(_QWORD *)a2 + v52);
        goto LABEL_240;
      case 0x10u:
        *(_QWORD *)((char *)this + 164) |= 0x20000000uLL;
        v53 = *((_QWORD *)a2 + 1);
        if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_169;
        *((_DWORD *)this + 34) = *(_DWORD *)(*(_QWORD *)a2 + v53);
        goto LABEL_240;
      case 0x11u:
        *(_QWORD *)((char *)this + 164) |= 0x200uLL;
        v54 = *((_QWORD *)a2 + 1);
        if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_169;
        *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v54);
        goto LABEL_240;
      case 0x12u:
        *(_QWORD *)((char *)this + 164) |= 0x1000000uLL;
        v55 = *((_QWORD *)a2 + 1);
        if (v55 > 0xFFFFFFFFFFFFFFFBLL || v55 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_169;
        *((_DWORD *)this + 29) = *(_DWORD *)(*(_QWORD *)a2 + v55);
        goto LABEL_240;
      case 0x13u:
        *(_QWORD *)((char *)this + 164) |= 0x2000uLL;
        v56 = *((_QWORD *)a2 + 1);
        v57 = *((_QWORD *)a2 + 2);
        v58 = *(_QWORD *)a2;
        if (v56 <= 0xFFFFFFFFFFFFFFF5 && v56 + 10 <= v57)
        {
          v59 = 0;
          v60 = 0;
          v61 = 0;
          do
          {
            v62 = v56 + 1;
            *((_QWORD *)a2 + 1) = v56 + 1;
            v63 = *(_BYTE *)(v58 + v56);
            v61 |= (unint64_t)(v63 & 0x7F) << v59;
            if ((v63 & 0x80) == 0)
              goto LABEL_258;
            v59 += 7;
            v56 = v62;
            v14 = v60++ > 8;
          }
          while (!v14);
LABEL_192:
          LODWORD(v61) = 0;
          goto LABEL_258;
        }
        v139 = 0;
        v140 = 0;
        v61 = 0;
        if (v57 <= v56)
          v57 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v57 == v56)
          {
            LODWORD(v61) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v141 = v56 + 1;
            v142 = *(_BYTE *)(v58 + v56);
            *((_QWORD *)a2 + 1) = v141;
            v61 |= (unint64_t)(v142 & 0x7F) << v139;
            if (v142 < 0)
            {
              v139 += 7;
              v56 = v141;
              v14 = v140++ > 8;
              if (v14)
                goto LABEL_192;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v61) = 0;
          }
          break;
        }
LABEL_258:
        *((_DWORD *)this + 18) = v61;
        goto LABEL_242;
      case 0x14u:
        *(_QWORD *)((char *)this + 164) |= 0x200000000uLL;
        v64 = *((_QWORD *)a2 + 1);
        if (v64 > 0xFFFFFFFFFFFFFFFBLL || v64 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_169;
        *((_DWORD *)this + 38) = *(_DWORD *)(*(_QWORD *)a2 + v64);
        goto LABEL_240;
      case 0x15u:
        *(_QWORD *)((char *)this + 164) |= 0x4000uLL;
        v65 = *((_QWORD *)a2 + 1);
        if (v65 > 0xFFFFFFFFFFFFFFFBLL || v65 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_169;
        *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v65);
        goto LABEL_240;
      case 0x16u:
        *(_QWORD *)((char *)this + 164) |= 0x8000uLL;
        v66 = *((_QWORD *)a2 + 1);
        if (v66 > 0xFFFFFFFFFFFFFFFBLL || v66 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_169;
        *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v66);
        goto LABEL_240;
      case 0x17u:
        *(_QWORD *)((char *)this + 164) |= 0x1000uLL;
        v67 = *((_QWORD *)a2 + 1);
        v68 = *((_QWORD *)a2 + 2);
        v69 = *(_QWORD *)a2;
        if (v67 <= 0xFFFFFFFFFFFFFFF5 && v67 + 10 <= v68)
        {
          v70 = 0;
          v71 = 0;
          v72 = 0;
          do
          {
            v73 = v67 + 1;
            *((_QWORD *)a2 + 1) = v67 + 1;
            v74 = *(_BYTE *)(v69 + v67);
            v72 |= (unint64_t)(v74 & 0x7F) << v70;
            if ((v74 & 0x80) == 0)
              goto LABEL_262;
            v70 += 7;
            v67 = v73;
            v14 = v71++ > 8;
          }
          while (!v14);
LABEL_199:
          LODWORD(v72) = 0;
          goto LABEL_262;
        }
        v143 = 0;
        v144 = 0;
        v72 = 0;
        if (v68 <= v67)
          v68 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v68 == v67)
          {
            LODWORD(v72) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v145 = v67 + 1;
            v146 = *(_BYTE *)(v69 + v67);
            *((_QWORD *)a2 + 1) = v145;
            v72 |= (unint64_t)(v146 & 0x7F) << v143;
            if (v146 < 0)
            {
              v143 += 7;
              v67 = v145;
              v14 = v144++ > 8;
              if (v14)
                goto LABEL_199;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v72) = 0;
          }
          break;
        }
LABEL_262:
        *((_DWORD *)this + 17) = v72;
        goto LABEL_242;
      case 0x18u:
        *(_QWORD *)((char *)this + 164) |= 0x200000uLL;
        v75 = *((_QWORD *)a2 + 1);
        if (v75 > 0xFFFFFFFFFFFFFFFBLL || v75 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_169;
        *((_DWORD *)this + 26) = *(_DWORD *)(*(_QWORD *)a2 + v75);
        goto LABEL_240;
      case 0x19u:
        *(_QWORD *)((char *)this + 164) |= 0x100000uLL;
        v76 = *((_QWORD *)a2 + 1);
        if (v76 > 0xFFFFFFFFFFFFFFFBLL || v76 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_169;
        *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v76);
        goto LABEL_240;
      case 0x1Au:
        *(_QWORD *)((char *)this + 164) |= 4uLL;
        v77 = *((_QWORD *)a2 + 1);
        v78 = *((_QWORD *)a2 + 2);
        v79 = *(_QWORD *)a2;
        if (v77 <= 0xFFFFFFFFFFFFFFF5 && v77 + 10 <= v78)
        {
          v80 = 0;
          v81 = 0;
          v82 = 0;
          do
          {
            v83 = v77 + 1;
            *((_QWORD *)a2 + 1) = v77 + 1;
            v84 = *(_BYTE *)(v79 + v77);
            v82 |= (unint64_t)(v84 & 0x7F) << v80;
            if ((v84 & 0x80) == 0)
              goto LABEL_266;
            v80 += 7;
            v77 = v83;
            v14 = v81++ > 8;
          }
          while (!v14);
LABEL_206:
          v82 = 0;
          goto LABEL_266;
        }
        v147 = 0;
        v148 = 0;
        v82 = 0;
        if (v78 <= v77)
          v78 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v78 == v77)
          {
            v82 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v149 = v77 + 1;
            v150 = *(_BYTE *)(v79 + v77);
            *((_QWORD *)a2 + 1) = v149;
            v82 |= (unint64_t)(v150 & 0x7F) << v147;
            if (v150 < 0)
            {
              v147 += 7;
              v77 = v149;
              v14 = v148++ > 8;
              if (v14)
                goto LABEL_206;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v82 = 0;
          }
          break;
        }
LABEL_266:
        *((_QWORD *)this + 3) = v82;
        goto LABEL_242;
      case 0x1Bu:
        *(_QWORD *)((char *)this + 164) |= 1uLL;
        v85 = *((_QWORD *)a2 + 1);
        v86 = *((_QWORD *)a2 + 2);
        v87 = *(_QWORD *)a2;
        if (v85 <= 0xFFFFFFFFFFFFFFF5 && v85 + 10 <= v86)
        {
          v88 = 0;
          v89 = 0;
          v90 = 0;
          do
          {
            v91 = v85 + 1;
            *((_QWORD *)a2 + 1) = v85 + 1;
            v92 = *(_BYTE *)(v87 + v85);
            v90 |= (unint64_t)(v92 & 0x7F) << v88;
            if ((v92 & 0x80) == 0)
              goto LABEL_282;
            v88 += 7;
            v85 = v91;
            v14 = v89++ > 8;
          }
          while (!v14);
LABEL_213:
          v90 = 0;
          goto LABEL_282;
        }
        v151 = 0;
        v152 = 0;
        v90 = 0;
        if (v86 <= v85)
          v86 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v86 == v85)
          {
            v90 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v153 = v85 + 1;
            v154 = *(_BYTE *)(v87 + v85);
            *((_QWORD *)a2 + 1) = v153;
            v90 |= (unint64_t)(v154 & 0x7F) << v151;
            if (v154 < 0)
            {
              v151 += 7;
              v85 = v153;
              v14 = v152++ > 8;
              if (v14)
                goto LABEL_213;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v90 = 0;
          }
          break;
        }
LABEL_282:
        *((_QWORD *)this + 1) = v90;
        goto LABEL_242;
      case 0x1Cu:
        *(_QWORD *)((char *)this + 164) |= 0x80000000uLL;
        v93 = *((_QWORD *)a2 + 1);
        if (v93 > 0xFFFFFFFFFFFFFFFBLL || v93 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_169;
        *((_DWORD *)this + 36) = *(_DWORD *)(*(_QWORD *)a2 + v93);
        goto LABEL_240;
      case 0x1Du:
        *(_QWORD *)((char *)this + 164) |= 0x80000uLL;
        v94 = *((_QWORD *)a2 + 1);
        v95 = *((_QWORD *)a2 + 2);
        v96 = *(_QWORD *)a2;
        if (v94 <= 0xFFFFFFFFFFFFFFF5 && v94 + 10 <= v95)
        {
          v97 = 0;
          v98 = 0;
          v99 = 0;
          do
          {
            v100 = v94 + 1;
            *((_QWORD *)a2 + 1) = v94 + 1;
            v101 = *(_BYTE *)(v96 + v94);
            v99 |= (unint64_t)(v101 & 0x7F) << v97;
            if ((v101 & 0x80) == 0)
              goto LABEL_271;
            v97 += 7;
            v94 = v100;
            v14 = v98++ > 8;
          }
          while (!v14);
LABEL_220:
          LODWORD(v99) = 0;
          goto LABEL_271;
        }
        v155 = 0;
        v156 = 0;
        v99 = 0;
        if (v95 <= v94)
          v95 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v95 == v94)
          {
            LODWORD(v99) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v157 = v94 + 1;
            v158 = *(_BYTE *)(v96 + v94);
            *((_QWORD *)a2 + 1) = v157;
            v99 |= (unint64_t)(v158 & 0x7F) << v155;
            if (v158 < 0)
            {
              v155 += 7;
              v94 = v157;
              v14 = v156++ > 8;
              if (v14)
                goto LABEL_220;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v99) = 0;
          }
          break;
        }
LABEL_271:
        *((_DWORD *)this + 24) = v99;
        goto LABEL_242;
      case 0x1Eu:
        *(_QWORD *)((char *)this + 164) |= 0x10uLL;
        v102 = *((_QWORD *)a2 + 1);
        v103 = *((_QWORD *)a2 + 2);
        v104 = *(_QWORD *)a2;
        if (v102 <= 0xFFFFFFFFFFFFFFF5 && v102 + 10 <= v103)
        {
          v105 = 0;
          v106 = 0;
          v107 = 0;
          do
          {
            v108 = v102 + 1;
            *((_QWORD *)a2 + 1) = v102 + 1;
            v109 = *(_BYTE *)(v104 + v102);
            v107 |= (unint64_t)(v109 & 0x7F) << v105;
            if ((v109 & 0x80) == 0)
              goto LABEL_275;
            v105 += 7;
            v102 = v108;
            v14 = v106++ > 8;
          }
          while (!v14);
LABEL_227:
          LODWORD(v107) = 0;
          goto LABEL_275;
        }
        v159 = 0;
        v160 = 0;
        v107 = 0;
        if (v103 <= v102)
          v103 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v103 == v102)
          {
            LODWORD(v107) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v161 = v102 + 1;
            v162 = *(_BYTE *)(v104 + v102);
            *((_QWORD *)a2 + 1) = v161;
            v107 |= (unint64_t)(v162 & 0x7F) << v159;
            if (v162 < 0)
            {
              v159 += 7;
              v102 = v161;
              v14 = v160++ > 8;
              if (v14)
                goto LABEL_227;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v107) = 0;
          }
          break;
        }
LABEL_275:
        *((_DWORD *)this + 9) = v107;
        goto LABEL_242;
      case 0x1Fu:
        *(_QWORD *)((char *)this + 164) |= 0x1000000000uLL;
        v110 = *((_QWORD *)a2 + 1);
        if (v110 >= *((_QWORD *)a2 + 2))
        {
          v113 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v111 = v110 + 1;
          v112 = *(unsigned __int8 *)(*(_QWORD *)a2 + v110);
          *((_QWORD *)a2 + 1) = v111;
          v113 = v112 != 0;
        }
        *((_BYTE *)this + 161) = v113;
        goto LABEL_242;
      case 0x20u:
        *(_QWORD *)((char *)this + 164) |= 0x800000000uLL;
        v114 = *((_QWORD *)a2 + 1);
        if (v114 >= *((_QWORD *)a2 + 2))
        {
          v117 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v115 = v114 + 1;
          v116 = *(unsigned __int8 *)(*(_QWORD *)a2 + v114);
          *((_QWORD *)a2 + 1) = v115;
          v117 = v116 != 0;
        }
        *((_BYTE *)this + 160) = v117;
        goto LABEL_242;
      case 0x21u:
        *(_QWORD *)((char *)this + 164) |= 0x800000uLL;
        v118 = *((_QWORD *)a2 + 1);
        if (v118 > 0xFFFFFFFFFFFFFFFBLL || v118 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_169;
        *((_DWORD *)this + 28) = *(_DWORD *)(*(_QWORD *)a2 + v118);
        goto LABEL_240;
      case 0x22u:
        *(_QWORD *)((char *)this + 164) |= 0x20000uLL;
        v119 = *((_QWORD *)a2 + 1);
        if (v119 > 0xFFFFFFFFFFFFFFFBLL || v119 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_169;
        *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v119);
        goto LABEL_240;
      case 0x23u:
        *(_QWORD *)((char *)this + 164) |= 0x40000uLL;
        v120 = *((_QWORD *)a2 + 1);
        if (v120 > 0xFFFFFFFFFFFFFFFBLL || v120 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_169;
        *((_DWORD *)this + 23) = *(_DWORD *)(*(_QWORD *)a2 + v120);
        goto LABEL_240;
      case 0x24u:
        *(_QWORD *)((char *)this + 164) |= 0x400uLL;
        v121 = *((_QWORD *)a2 + 1);
        v122 = *((_QWORD *)a2 + 2);
        v123 = *(_QWORD *)a2;
        if (v121 <= 0xFFFFFFFFFFFFFFF5 && v121 + 10 <= v122)
        {
          v124 = 0;
          v125 = 0;
          v126 = 0;
          do
          {
            v127 = v121 + 1;
            *((_QWORD *)a2 + 1) = v121 + 1;
            v128 = *(_BYTE *)(v123 + v121);
            v126 |= (unint64_t)(v128 & 0x7F) << v124;
            if ((v128 & 0x80) == 0)
              goto LABEL_279;
            v124 += 7;
            v121 = v127;
            v14 = v125++ > 8;
          }
          while (!v14);
LABEL_238:
          LODWORD(v126) = 0;
          goto LABEL_279;
        }
        v163 = 0;
        v164 = 0;
        v126 = 0;
        if (v122 <= v121)
          v122 = *((_QWORD *)a2 + 1);
        break;
      case 0x25u:
        *(_QWORD *)((char *)this + 164) |= 0x100uLL;
        v129 = *((_QWORD *)a2 + 1);
        if (v129 > 0xFFFFFFFFFFFFFFFBLL || v129 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_169;
        *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v129);
        goto LABEL_240;
      case 0x26u:
        *(_QWORD *)((char *)this + 164) |= 0x100000000uLL;
        v130 = *((_QWORD *)a2 + 1);
        if (v130 <= 0xFFFFFFFFFFFFFFFBLL && v130 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 37) = *(_DWORD *)(*(_QWORD *)a2 + v130);
LABEL_240:
          v37 = *((_QWORD *)a2 + 1) + 4;
LABEL_241:
          *((_QWORD *)a2 + 1) = v37;
        }
        else
        {
LABEL_169:
          *((_BYTE *)a2 + 24) = 1;
        }
        goto LABEL_242;
      default:
        goto LABEL_19;
    }
    while (1)
    {
      if (v122 == v121)
      {
        LODWORD(v126) = 0;
        *((_BYTE *)a2 + 24) = 1;
        goto LABEL_279;
      }
      v165 = v121 + 1;
      v166 = *(_BYTE *)(v123 + v121);
      *((_QWORD *)a2 + 1) = v165;
      v126 |= (unint64_t)(v166 & 0x7F) << v163;
      if ((v166 & 0x80) == 0)
        break;
      v163 += 7;
      v121 = v165;
      v14 = v164++ > 8;
      if (v14)
        goto LABEL_238;
    }
    if (*((_BYTE *)a2 + 24))
      LODWORD(v126) = 0;
LABEL_279:
    *((_DWORD *)this + 15) = v126;
LABEL_242:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v15 = 0;
  v16 = 0;
  v11 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v17 = v2 + 1;
    v18 = *(_BYTE *)(v8 + v2);
    *((_QWORD *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0)
      goto LABEL_21;
    v15 += 7;
    v2 = v17;
    v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  result = PB::Reader::skip(a2);
  if ((_DWORD)result)
    goto LABEL_242;
  return result;
}

uint64_t CMMsl::CalorieControllerMETsConsumed::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = this;
  v4 = *(_QWORD *)(this + 164);
  if ((v4 & 0x2000000) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 120));
    v4 = *(_QWORD *)(v3 + 164);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 0x10000) == 0)
        goto LABEL_4;
      goto LABEL_42;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x10000) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 84));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_6;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x400000000) == 0)
      goto LABEL_7;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(float *)(v3 + 140));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_7:
    if ((v4 & 0x400000) == 0)
      goto LABEL_8;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(float *)(v3 + 156));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x400000) == 0)
  {
LABEL_8:
    if ((v4 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(float *)(v3 + 108));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x20) == 0)
  {
LABEL_9:
    if ((v4 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x40) == 0)
  {
LABEL_10:
    if ((v4 & 2) == 0)
      goto LABEL_11;
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 2) == 0)
  {
LABEL_11:
    if ((v4 & 0x2000000000) == 0)
      goto LABEL_12;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x2000000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x800) == 0)
  {
LABEL_13:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_14;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(float *)(v3 + 64));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_15;
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(float *)(v3 + 132));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_16;
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_17;
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2, *(float *)(v3 + 124));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x200) == 0)
      goto LABEL_18;
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::write(a2, *(float *)(v3 + 136));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x200) == 0)
  {
LABEL_18:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_19;
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x2000) == 0)
      goto LABEL_20;
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(float *)(v3 + 116));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x2000) == 0)
  {
LABEL_20:
    if ((v4 & 0x200000000) == 0)
      goto LABEL_21;
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_21:
    if ((v4 & 0x4000) == 0)
      goto LABEL_22;
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(float *)(v3 + 152));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x4000) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000) == 0)
      goto LABEL_23;
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::write(a2, *(float *)(v3 + 76));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x8000) == 0)
  {
LABEL_23:
    if ((v4 & 0x1000) == 0)
      goto LABEL_24;
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::write(a2, *(float *)(v3 + 80));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x1000) == 0)
  {
LABEL_24:
    if ((v4 & 0x200000) == 0)
      goto LABEL_25;
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x200000) == 0)
  {
LABEL_25:
    if ((v4 & 0x100000) == 0)
      goto LABEL_26;
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::write(a2, *(float *)(v3 + 104));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x100000) == 0)
  {
LABEL_26:
    if ((v4 & 4) == 0)
      goto LABEL_27;
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::write(a2, *(float *)(v3 + 100));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 4) == 0)
  {
LABEL_27:
    if ((v4 & 1) == 0)
      goto LABEL_28;
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 1) == 0)
  {
LABEL_28:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x80000) == 0)
      goto LABEL_30;
    goto LABEL_68;
  }
LABEL_67:
  this = PB::Writer::write(a2, *(float *)(v3 + 144));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x80000) == 0)
  {
LABEL_30:
    if ((v4 & 0x10) == 0)
      goto LABEL_31;
    goto LABEL_69;
  }
LABEL_68:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x10) == 0)
  {
LABEL_31:
    if ((v4 & 0x1000000000) == 0)
      goto LABEL_32;
    goto LABEL_70;
  }
LABEL_69:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x1000000000) == 0)
  {
LABEL_32:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_33;
    goto LABEL_71;
  }
LABEL_70:
  this = PB::Writer::write(a2);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_33:
    if ((v4 & 0x800000) == 0)
      goto LABEL_34;
    goto LABEL_72;
  }
LABEL_71:
  this = PB::Writer::write(a2);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x800000) == 0)
  {
LABEL_34:
    if ((v4 & 0x20000) == 0)
      goto LABEL_35;
    goto LABEL_73;
  }
LABEL_72:
  this = PB::Writer::write(a2, *(float *)(v3 + 112));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x20000) == 0)
  {
LABEL_35:
    if ((v4 & 0x40000) == 0)
      goto LABEL_36;
    goto LABEL_74;
  }
LABEL_73:
  this = PB::Writer::write(a2, *(float *)(v3 + 88));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x40000) == 0)
  {
LABEL_36:
    if ((v4 & 0x400) == 0)
      goto LABEL_37;
    goto LABEL_75;
  }
LABEL_74:
  this = PB::Writer::write(a2, *(float *)(v3 + 92));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x400) == 0)
  {
LABEL_37:
    if ((v4 & 0x100) == 0)
      goto LABEL_38;
    goto LABEL_76;
  }
LABEL_75:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x100) == 0)
  {
LABEL_38:
    if ((v4 & 0x100000000) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 148));
  }
LABEL_76:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  if ((*(_QWORD *)(v3 + 164) & 0x100000000) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 148));
  return this;
}

BOOL CMMsl::CalorieControllerMETsConsumed::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 v4;

  v2 = *(_QWORD *)(a1 + 164);
  v3 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140))
      return 0;
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000) != 0)
  {
    if ((v3 & 0x400000000) == 0 || *(float *)(a1 + 156) != *(float *)(a2 + 156))
      return 0;
  }
  else if ((v3 & 0x400000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000000) != 0)
  {
    if ((v3 & 0x2000000000) == 0 || *(unsigned __int8 *)(a1 + 162) != *(unsigned __int8 *)(a2 + 162))
      return 0;
  }
  else if ((v3 & 0x2000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132))
      return 0;
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(_DWORD *)(a1 + 128) != *(_DWORD *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124))
      return 0;
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(float *)(a1 + 136) != *(float *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000) != 0)
  {
    if ((v3 & 0x200000000) == 0 || *(float *)(a1 + 152) != *(float *)(a2 + 152))
      return 0;
  }
  else if ((v3 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000) != 0)
  {
    if ((v3 & 0x80000000) == 0 || *(float *)(a1 + 144) != *(float *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 0x80000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(_DWORD *)(a1 + 96) != *(_DWORD *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000) != 0)
  {
    if ((v3 & 0x1000000000) == 0 || *(unsigned __int8 *)(a1 + 161) != *(unsigned __int8 *)(a2 + 161))
      return 0;
  }
  else if ((v3 & 0x1000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000) != 0)
  {
    if ((v3 & 0x800000000) == 0 || *(unsigned __int8 *)(a1 + 160) != *(unsigned __int8 *)(a2 + 160))
      return 0;
  }
  else if ((v3 & 0x800000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x100000000) == 0;
  if ((v2 & 0x100000000) != 0)
    return (v3 & 0x100000000) != 0 && *(float *)(a1 + 148) == *(float *)(a2 + 148);
  return v4;
}

uint64_t CMMsl::CalorieControllerMETsConsumed::hash_value(CMMsl::CalorieControllerMETsConsumed *this)
{
  uint64_t v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  double v17;
  float v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float v51;
  uint64_t v52;
  float v53;
  uint64_t v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  float v58;
  uint64_t v59;
  float v60;
  uint64_t v61;
  float v62;
  uint64_t v64;
  uint64_t v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v1 = *(_QWORD *)((char *)this + 164);
  if ((v1 & 0x2000000) == 0)
  {
    v2 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_3;
LABEL_104:
    v74 = 0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_6;
LABEL_105:
    v73 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_9;
    goto LABEL_106;
  }
  v62 = *((float *)this + 30);
  if (v62 == 0.0)
    v2 = 0;
  else
    v2 = LODWORD(v62);
  if ((v1 & 0x80) == 0)
    goto LABEL_104;
LABEL_3:
  v3 = *((float *)this + 12);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  v74 = v4;
  if ((v1 & 0x10000) == 0)
    goto LABEL_105;
LABEL_6:
  v5 = *((float *)this + 21);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  v73 = v6;
  if ((v1 & 8) != 0)
  {
LABEL_9:
    v72 = *((int *)this + 8);
    if ((v1 & 0x40000000) != 0)
      goto LABEL_10;
LABEL_107:
    v71 = 0;
    if ((v1 & 0x400000000) != 0)
      goto LABEL_13;
LABEL_108:
    v70 = 0;
    if ((v1 & 0x400000) != 0)
      goto LABEL_16;
LABEL_109:
    v69 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_19;
LABEL_110:
    v68 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_22;
LABEL_111:
    v67 = 0;
    if ((v1 & 2) != 0)
      goto LABEL_25;
LABEL_112:
    v66 = 0.0;
    if ((v1 & 0x2000000000) != 0)
      goto LABEL_28;
    goto LABEL_113;
  }
LABEL_106:
  v72 = 0;
  if ((v1 & 0x40000000) == 0)
    goto LABEL_107;
LABEL_10:
  v7 = *((float *)this + 35);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  v71 = v8;
  if ((v1 & 0x400000000) == 0)
    goto LABEL_108;
LABEL_13:
  v9 = *((float *)this + 39);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  v70 = v10;
  if ((v1 & 0x400000) == 0)
    goto LABEL_109;
LABEL_16:
  v11 = *((float *)this + 27);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  v69 = v12;
  if ((v1 & 0x20) == 0)
    goto LABEL_110;
LABEL_19:
  v13 = *((float *)this + 10);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  v68 = v14;
  if ((v1 & 0x40) == 0)
    goto LABEL_111;
LABEL_22:
  v15 = *((float *)this + 11);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  v67 = v16;
  if ((v1 & 2) == 0)
    goto LABEL_112;
LABEL_25:
  v17 = *((double *)this + 2);
  if (v17 == 0.0)
    v17 = 0.0;
  v66 = v17;
  if ((v1 & 0x2000000000) != 0)
  {
LABEL_28:
    v65 = *((unsigned __int8 *)this + 162);
    if ((v1 & 0x800) != 0)
      goto LABEL_29;
LABEL_114:
    v64 = 0;
    if ((v1 & 0x10000000) != 0)
      goto LABEL_32;
LABEL_115:
    v21 = 0;
    if ((v1 & 0x8000000) != 0)
      goto LABEL_36;
    goto LABEL_116;
  }
LABEL_113:
  v65 = 0;
  if ((v1 & 0x800) == 0)
    goto LABEL_114;
LABEL_29:
  v18 = *((float *)this + 16);
  v19 = LODWORD(v18);
  if (v18 == 0.0)
    v19 = 0;
  v64 = v19;
  if ((v1 & 0x10000000) == 0)
    goto LABEL_115;
LABEL_32:
  v20 = *((float *)this + 33);
  if (v20 == 0.0)
    v21 = 0;
  else
    v21 = LODWORD(v20);
  if ((v1 & 0x8000000) != 0)
  {
LABEL_36:
    v22 = *((int *)this + 32);
    if ((v1 & 0x4000000) != 0)
      goto LABEL_37;
LABEL_117:
    v24 = 0;
    if ((v1 & 0x20000000) != 0)
      goto LABEL_41;
LABEL_118:
    v26 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_45;
LABEL_119:
    v28 = 0;
    if ((v1 & 0x1000000) != 0)
      goto LABEL_49;
LABEL_120:
    v30 = 0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_53;
    goto LABEL_121;
  }
LABEL_116:
  v22 = 0;
  if ((v1 & 0x4000000) == 0)
    goto LABEL_117;
LABEL_37:
  v23 = *((float *)this + 31);
  if (v23 == 0.0)
    v24 = 0;
  else
    v24 = LODWORD(v23);
  if ((v1 & 0x20000000) == 0)
    goto LABEL_118;
LABEL_41:
  v25 = *((float *)this + 34);
  if (v25 == 0.0)
    v26 = 0;
  else
    v26 = LODWORD(v25);
  if ((v1 & 0x200) == 0)
    goto LABEL_119;
LABEL_45:
  v27 = *((float *)this + 14);
  if (v27 == 0.0)
    v28 = 0;
  else
    v28 = LODWORD(v27);
  if ((v1 & 0x1000000) == 0)
    goto LABEL_120;
LABEL_49:
  v29 = *((float *)this + 29);
  if (v29 == 0.0)
    v30 = 0;
  else
    v30 = LODWORD(v29);
  if ((v1 & 0x2000) != 0)
  {
LABEL_53:
    v31 = *((int *)this + 18);
    if ((v1 & 0x200000000) != 0)
      goto LABEL_54;
LABEL_122:
    v33 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_58;
LABEL_123:
    v35 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_62;
LABEL_124:
    v37 = 0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_66;
    goto LABEL_125;
  }
LABEL_121:
  v31 = 0;
  if ((v1 & 0x200000000) == 0)
    goto LABEL_122;
LABEL_54:
  v32 = *((float *)this + 38);
  if (v32 == 0.0)
    v33 = 0;
  else
    v33 = LODWORD(v32);
  if ((v1 & 0x4000) == 0)
    goto LABEL_123;
LABEL_58:
  v34 = *((float *)this + 19);
  if (v34 == 0.0)
    v35 = 0;
  else
    v35 = LODWORD(v34);
  if ((v1 & 0x8000) == 0)
    goto LABEL_124;
LABEL_62:
  v36 = *((float *)this + 20);
  if (v36 == 0.0)
    v37 = 0;
  else
    v37 = LODWORD(v36);
  if ((v1 & 0x1000) != 0)
  {
LABEL_66:
    v38 = *((int *)this + 17);
    if ((v1 & 0x200000) != 0)
      goto LABEL_67;
LABEL_126:
    v40 = 0;
    if ((v1 & 0x100000) != 0)
      goto LABEL_71;
LABEL_127:
    v42 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_75;
    goto LABEL_128;
  }
LABEL_125:
  v38 = 0;
  if ((v1 & 0x200000) == 0)
    goto LABEL_126;
LABEL_67:
  v39 = *((float *)this + 26);
  if (v39 == 0.0)
    v40 = 0;
  else
    v40 = LODWORD(v39);
  if ((v1 & 0x100000) == 0)
    goto LABEL_127;
LABEL_71:
  v41 = *((float *)this + 25);
  if (v41 == 0.0)
    v42 = 0;
  else
    v42 = LODWORD(v41);
  if ((v1 & 4) != 0)
  {
LABEL_75:
    v43 = *((_QWORD *)this + 3);
    if ((v1 & 1) != 0)
      goto LABEL_76;
    goto LABEL_129;
  }
LABEL_128:
  v43 = 0;
  if ((v1 & 1) != 0)
  {
LABEL_76:
    v44 = *((_QWORD *)this + 1);
    if ((v1 & 0x80000000) != 0)
      goto LABEL_77;
LABEL_130:
    v46 = 0;
    if ((v1 & 0x80000) != 0)
      goto LABEL_80;
    goto LABEL_131;
  }
LABEL_129:
  v44 = 0;
  if ((v1 & 0x80000000) == 0)
    goto LABEL_130;
LABEL_77:
  v45 = *((float *)this + 36);
  v46 = LODWORD(v45);
  if (v45 == 0.0)
    v46 = 0;
  if ((v1 & 0x80000) != 0)
  {
LABEL_80:
    v47 = *((int *)this + 24);
    if ((v1 & 0x10) != 0)
      goto LABEL_81;
    goto LABEL_132;
  }
LABEL_131:
  v47 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_81:
    v48 = *((int *)this + 9);
    if ((v1 & 0x1000000000) != 0)
      goto LABEL_82;
    goto LABEL_133;
  }
LABEL_132:
  v48 = 0;
  if ((v1 & 0x1000000000) != 0)
  {
LABEL_82:
    v49 = *((unsigned __int8 *)this + 161);
    if ((v1 & 0x800000000) != 0)
      goto LABEL_83;
    goto LABEL_134;
  }
LABEL_133:
  v49 = 0;
  if ((v1 & 0x800000000) != 0)
  {
LABEL_83:
    v50 = *((unsigned __int8 *)this + 160);
    if ((v1 & 0x800000) != 0)
      goto LABEL_84;
LABEL_135:
    v52 = 0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_87;
LABEL_136:
    v54 = 0;
    if ((v1 & 0x40000) != 0)
      goto LABEL_90;
LABEL_137:
    v56 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_93;
    goto LABEL_138;
  }
LABEL_134:
  v50 = 0;
  if ((v1 & 0x800000) == 0)
    goto LABEL_135;
LABEL_84:
  v51 = *((float *)this + 28);
  v52 = LODWORD(v51);
  if (v51 == 0.0)
    v52 = 0;
  if ((v1 & 0x20000) == 0)
    goto LABEL_136;
LABEL_87:
  v53 = *((float *)this + 22);
  v54 = LODWORD(v53);
  if (v53 == 0.0)
    v54 = 0;
  if ((v1 & 0x40000) == 0)
    goto LABEL_137;
LABEL_90:
  v55 = *((float *)this + 23);
  v56 = LODWORD(v55);
  if (v55 == 0.0)
    v56 = 0;
  if ((v1 & 0x400) != 0)
  {
LABEL_93:
    v57 = *((unsigned int *)this + 15);
    if ((v1 & 0x100) != 0)
      goto LABEL_94;
    goto LABEL_139;
  }
LABEL_138:
  v57 = 0;
  if ((v1 & 0x100) != 0)
  {
LABEL_94:
    v58 = *((float *)this + 13);
    v59 = LODWORD(v58);
    if (v58 == 0.0)
      v59 = 0;
    if ((v1 & 0x100000000) != 0)
      goto LABEL_97;
LABEL_140:
    v61 = 0;
    return v74 ^ v2 ^ v73 ^ v72 ^ v71 ^ v70 ^ v69 ^ v68 ^ v67 ^ *(_QWORD *)&v66 ^ v65 ^ v64 ^ v21 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v31 ^ v33 ^ v35 ^ v37 ^ v38 ^ v40 ^ v42 ^ v43 ^ v44 ^ v46 ^ v47 ^ v48 ^ v49 ^ v50 ^ v52 ^ v54 ^ v56 ^ v57 ^ v59 ^ v61;
  }
LABEL_139:
  v59 = 0;
  if ((v1 & 0x100000000) == 0)
    goto LABEL_140;
LABEL_97:
  v60 = *((float *)this + 37);
  v61 = LODWORD(v60);
  if (v60 == 0.0)
    v61 = 0;
  return v74 ^ v2 ^ v73 ^ v72 ^ v71 ^ v70 ^ v69 ^ v68 ^ v67 ^ *(_QWORD *)&v66 ^ v65 ^ v64 ^ v21 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v31 ^ v33 ^ v35 ^ v37 ^ v38 ^ v40 ^ v42 ^ v43 ^ v44 ^ v46 ^ v47 ^ v48 ^ v49 ^ v50 ^ v52 ^ v54 ^ v56 ^ v57 ^ v59 ^ v61;
}

uint64_t CMMsl::CalorimetryPauseEvent::CalorimetryPauseEvent(uint64_t this)
{
  *(_QWORD *)this = &off_25135CC98;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135CC98;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

void CMMsl::CalorimetryPauseEvent::~CalorimetryPauseEvent(CMMsl::CalorimetryPauseEvent *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::CalorimetryPauseEvent::CalorimetryPauseEvent(uint64_t this, const CMMsl::CalorimetryPauseEvent *a2)
{
  char v2;

  *(_QWORD *)this = &off_25135CC98;
  *(_DWORD *)(this + 12) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v2 = *((_BYTE *)a2 + 8);
    *(_BYTE *)(this + 12) = 1;
    *(_BYTE *)(this + 8) = v2;
  }
  return this;
}

{
  char v2;

  *(_QWORD *)this = &off_25135CC98;
  *(_DWORD *)(this + 12) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v2 = *((_BYTE *)a2 + 8);
    *(_BYTE *)(this + 12) = 1;
    *(_BYTE *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::CalorimetryPauseEvent::operator=(uint64_t a1, uint64_t a2)
{
  char v3;
  int v4;
  char v5;
  void (**v7)(CMMsl::CalorimetryPauseEvent *__hidden);
  char v8;
  int v9;

  if (a1 != a2)
  {
    v7 = &off_25135CC98;
    v3 = *(_BYTE *)(a2 + 8);
    v4 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = *(_BYTE *)(a2 + 12) & 1;
    v9 = v4;
    v5 = *(_BYTE *)(a1 + 8);
    *(_BYTE *)(a1 + 8) = v3;
    v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

{
  int v3;
  char v4;
  int v5;
  void (**v7)(CMMsl::CalorimetryPauseEvent *__hidden);
  char v8;
  int v9;

  if (a1 != a2)
  {
    v7 = &off_25135CC98;
    v3 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    v4 = *(_BYTE *)(a2 + 8);
    v5 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v3;
    v9 = v5;
    LOBYTE(v3) = *(_BYTE *)(a1 + 8);
    *(_BYTE *)(a1 + 8) = v4;
    v8 = v3;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::CalorimetryPauseEvent *a2, CMMsl::CalorimetryPauseEvent *a3)
{
  int v3;

  v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  LOBYTE(v3) = *(_BYTE *)(this + 8);
  *(_BYTE *)(this + 8) = *((_BYTE *)a2 + 8);
  *((_BYTE *)a2 + 8) = v3;
  return this;
}

uint64_t CMMsl::CalorimetryPauseEvent::CalorimetryPauseEvent(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = &off_25135CC98;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

{
  *(_QWORD *)result = &off_25135CC98;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

uint64_t CMMsl::CalorimetryPauseEvent::formatText(CMMsl::CalorimetryPauseEvent *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 12) & 1) != 0)
    PB::TextFormatter::format(a2, "pause");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::CalorimetryPauseEvent::readFrom(CMMsl::CalorimetryPauseEvent *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v19;
  BOOL v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_24;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 12) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        if (v2 >= v3)
        {
          v20 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v19 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v20 = v19 != 0;
        }
        *((_BYTE *)this + 8) = v20;
      }
      else
      {
LABEL_24:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_24;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::CalorimetryPauseEvent::writeTo(uint64_t this, PB::Writer *a2)
{
  if ((*(_BYTE *)(this + 12) & 1) != 0)
    return PB::Writer::write(a2);
  return this;
}

BOOL CMMsl::CalorimetryPauseEvent::operator==(uint64_t a1, uint64_t a2)
{
  char v3;
  _BOOL8 result;

  v3 = *(_BYTE *)(a1 + 12);
  result = (*(_BYTE *)(a2 + 12) & 1) == 0;
  if ((v3 & 1) != 0)
    return (*(_BYTE *)(a2 + 12) & 1) != 0 && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8);
  return result;
}

uint64_t CMMsl::CalorimetryPauseEvent::hash_value(CMMsl::CalorimetryPauseEvent *this)
{
  if ((*((_BYTE *)this + 12) & 1) != 0)
    return *((unsigned __int8 *)this + 8);
  else
    return 0;
}

uint64_t CMMsl::CatherineHealthKitData::CatherineHealthKitData(uint64_t this)
{
  *(_QWORD *)this = &off_25135CCD0;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135CCD0;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

void CMMsl::CatherineHealthKitData::~CatherineHealthKitData(CMMsl::CatherineHealthKitData *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::CatherineHealthKitData::CatherineHealthKitData(uint64_t this, const CMMsl::CatherineHealthKitData *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  *(_QWORD *)this = &off_25135CCD0;
  *(_DWORD *)(this + 36) = 0;
  v2 = *((_BYTE *)a2 + 36);
  if ((v2 & 4) != 0)
  {
    v4 = *((_QWORD *)a2 + 3);
    v3 = 4;
    *(_BYTE *)(this + 36) = 4;
    *(_QWORD *)(this + 24) = v4;
    v2 = *((_BYTE *)a2 + 36);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 36) & 1) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 1);
    v3 |= 1u;
    *(_BYTE *)(this + 36) = v3;
    *(_QWORD *)(this + 8) = v5;
    v2 = *((_BYTE *)a2 + 36);
  }
LABEL_6:
  if ((v2 & 2) == 0)
  {
    if ((v2 & 8) == 0)
      return this;
LABEL_10:
    v7 = *((_DWORD *)a2 + 8);
    *(_BYTE *)(this + 36) = v3 | 8;
    *(_DWORD *)(this + 32) = v7;
    return this;
  }
  v6 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_BYTE *)(this + 36) = v3;
  *(_QWORD *)(this + 16) = v6;
  if ((*((_BYTE *)a2 + 36) & 8) != 0)
    goto LABEL_10;
  return this;
}

uint64_t CMMsl::CatherineHealthKitData::operator=(uint64_t a1, const CMMsl::CatherineHealthKitData *a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[8];
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  if ((const CMMsl::CatherineHealthKitData *)a1 != a2)
  {
    CMMsl::CatherineHealthKitData::CatherineHealthKitData((uint64_t)v7, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v3;
    *(_QWORD *)&v3 = v10;
    v4 = *(_QWORD *)(a1 + 24);
    v5 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 24) = v9;
    *(_QWORD *)(a1 + 32) = v3;
    v9 = v4;
    v10 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::CatherineHealthKitData *a2, CMMsl::CatherineHealthKitData *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  double result;
  int v7;

  v3 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v3;
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  v7 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v7;
  return result;
}

double CMMsl::CatherineHealthKitData::CatherineHealthKitData(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135CCD0;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135CCD0;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return result;
}

uint64_t CMMsl::CatherineHealthKitData::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  void (**v8)(CMMsl::CatherineHealthKitData *__hidden);
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    v8 = &off_25135CCD0;
    v3 = *(_QWORD *)(a2 + 24);
    v4 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 36) = 0;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    v9 = v5;
    *(_QWORD *)&v5 = *(_QWORD *)(a1 + 24);
    v6 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 24) = v3;
    *(_QWORD *)(a1 + 32) = v4;
    v10 = v5;
    v11 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::CatherineHealthKitData::formatText(CMMsl::CatherineHealthKitData *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 36);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "endDate", *((double *)this + 1));
    v5 = *((_BYTE *)this + 36);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "hr", *((double *)this + 2));
      if ((*((_BYTE *)this + 36) & 4) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 36) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "hkType");
  v5 = *((_BYTE *)this + 36);
  if ((v5 & 2) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 4) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "startDate", *((double *)this + 3));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::CatherineHealthKitData::readFrom(CMMsl::CatherineHealthKitData *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_53;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 36) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_31;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_47;
      case 2u:
        *((_BYTE *)this + 36) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_31;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_47;
      case 3u:
        *((_BYTE *)this + 36) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_47:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_31:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 4u:
        *((_BYTE *)this + 36) |= 8u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v26 = 0;
          v27 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_52;
            }
            v28 = v20++;
            v29 = *(_BYTE *)(v21 + v28);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0)
              break;
            v26 += 7;
            v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_51:
              v2 = v28 + 1;
              goto LABEL_52;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
          goto LABEL_51;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_52;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_52:
        *((_DWORD *)this + 8) = v24;
        break;
      default:
        goto LABEL_19;
    }
LABEL_53:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::CatherineHealthKitData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 36);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24));
    v4 = *(_BYTE *)(v3 + 36);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 36) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_8:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  if ((*(_BYTE *)(v3 + 36) & 8) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

BOOL CMMsl::CatherineHealthKitData::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 36) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 36) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 36) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 36) & 8) == 0;
  if ((*(_BYTE *)(a1 + 36) & 8) != 0)
    return (*(_BYTE *)(a2 + 36) & 8) != 0 && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32);
  return v2;
}

uint64_t CMMsl::CatherineHealthKitData::hash_value(CMMsl::CatherineHealthKitData *this)
{
  double v1;
  double v2;
  double v3;
  uint64_t v4;

  if ((*((_BYTE *)this + 36) & 4) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 36) & 1) != 0)
      goto LABEL_3;
LABEL_13:
    v2 = 0.0;
    if ((*((_BYTE *)this + 36) & 2) != 0)
      goto LABEL_6;
    goto LABEL_14;
  }
  v1 = *((double *)this + 3);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 36) & 1) == 0)
    goto LABEL_13;
LABEL_3:
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 36) & 2) != 0)
  {
LABEL_6:
    v3 = *((double *)this + 2);
    if (v3 == 0.0)
      v3 = 0.0;
    if ((*((_BYTE *)this + 36) & 8) != 0)
      goto LABEL_9;
LABEL_15:
    v4 = 0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ v4;
  }
LABEL_14:
  v3 = 0.0;
  if ((*((_BYTE *)this + 36) & 8) == 0)
    goto LABEL_15;
LABEL_9:
  v4 = *((unsigned int *)this + 8);
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ v4;
}

uint64_t CMMsl::ClefCalibration::ClefCalibration(uint64_t this)
{
  *(_QWORD *)this = &off_25135CD08;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135CD08;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

void CMMsl::ClefCalibration::~ClefCalibration(CMMsl::ClefCalibration *this)
{
  void **v2;

  *(_QWORD *)this = &off_25135CD08;
  v2 = (void **)((char *)this + 8);
  sub_242910B70(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_25135CD08;
  v2 = (void **)((char *)this + 8);
  sub_242910B70(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_25135CD08;
  v2 = (void **)((char *)this + 8);
  sub_242910B70(&v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::ClefCalibration *CMMsl::ClefCalibration::ClefCalibration(CMMsl::ClefCalibration *this, const CMMsl::ClefCalibration *a2)
{
  int64x2_t *v3;
  char v4;
  char v5;
  int v6;
  int v7;
  int v8;
  const CMMsl::ClefCalibrationPoint **v9;
  const CMMsl::ClefCalibrationPoint **i;
  const CMMsl::ClefCalibrationPoint *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  int64x2_t v26;
  unint64_t v27;
  int v29;
  int v30;
  char v31;
  int v32;
  int v33;
  uint64_t v34;
  int64x2_t v35;
  unint64_t v36;
  char *v37;

  *(_QWORD *)this = &off_25135CD08;
  *((_QWORD *)this + 1) = 0;
  v3 = (int64x2_t *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 16) = 0;
  v4 = *((_BYTE *)a2 + 64);
  if ((v4 & 2) != 0)
  {
    v6 = *((_DWORD *)a2 + 9);
    v5 = 2;
    *((_BYTE *)this + 64) = 2;
    *((_DWORD *)this + 9) = v6;
    v4 = *((_BYTE *)a2 + 64);
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = 0;
  if ((*((_BYTE *)a2 + 64) & 8) != 0)
  {
LABEL_5:
    v7 = *((_DWORD *)a2 + 11);
    v5 |= 8u;
    *((_BYTE *)this + 64) = v5;
    *((_DWORD *)this + 11) = v7;
    v4 = *((_BYTE *)a2 + 64);
  }
LABEL_6:
  if ((v4 & 1) != 0)
  {
    v29 = *((_DWORD *)a2 + 8);
    v5 |= 1u;
    *((_BYTE *)this + 64) = v5;
    *((_DWORD *)this + 8) = v29;
    v4 = *((_BYTE *)a2 + 64);
    if ((v4 & 4) == 0)
    {
LABEL_8:
      if ((v4 & 0x80) == 0)
        goto LABEL_9;
      goto LABEL_34;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_8;
  }
  v30 = *((_DWORD *)a2 + 10);
  v5 |= 4u;
  *((_BYTE *)this + 64) = v5;
  *((_DWORD *)this + 10) = v30;
  v4 = *((_BYTE *)a2 + 64);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_35;
  }
LABEL_34:
  v31 = *((_BYTE *)a2 + 60);
  v5 |= 0x80u;
  *((_BYTE *)this + 64) = v5;
  *((_BYTE *)this + 60) = v31;
  v4 = *((_BYTE *)a2 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 0x20) == 0)
      goto LABEL_11;
    goto LABEL_36;
  }
LABEL_35:
  v32 = *((_DWORD *)a2 + 12);
  v5 |= 0x10u;
  *((_BYTE *)this + 64) = v5;
  *((_DWORD *)this + 12) = v32;
  v4 = *((_BYTE *)a2 + 64);
  if ((v4 & 0x20) == 0)
  {
LABEL_11:
    if ((v4 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_12;
  }
LABEL_36:
  v33 = *((_DWORD *)a2 + 13);
  v5 |= 0x20u;
  *((_BYTE *)this + 64) = v5;
  *((_DWORD *)this + 13) = v33;
  if ((*((_BYTE *)a2 + 64) & 0x40) != 0)
  {
LABEL_12:
    v8 = *((_DWORD *)a2 + 14);
    *((_BYTE *)this + 64) = v5 | 0x40;
    *((_DWORD *)this + 14) = v8;
  }
LABEL_13:
  v9 = (const CMMsl::ClefCalibrationPoint **)*((_QWORD *)a2 + 1);
  for (i = (const CMMsl::ClefCalibrationPoint **)*((_QWORD *)a2 + 2); v9 != i; ++v9)
  {
    v11 = *v9;
    v12 = operator new();
    CMMsl::ClefCalibrationPoint::ClefCalibrationPoint(v12, v11);
    v14 = (uint64_t *)*((_QWORD *)this + 2);
    v13 = *((_QWORD *)this + 3);
    if ((unint64_t)v14 >= v13)
    {
      v16 = ((uint64_t)v14 - v3->i64[0]) >> 3;
      if ((unint64_t)(v16 + 1) >> 61)
        sub_242729A44();
      v17 = v13 - v3->i64[0];
      v18 = v17 >> 2;
      if (v17 >> 2 <= (unint64_t)(v16 + 1))
        v18 = v16 + 1;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v18;
      v37 = (char *)this + 24;
      if (v19)
        v19 = (unint64_t)sub_2429112FC(v19);
      else
        v20 = 0;
      v21 = (uint64_t *)(v19 + 8 * v16);
      v22 = v19 + 8 * v20;
      v36 = v22;
      *v21 = v12;
      v15 = v21 + 1;
      v35.i64[1] = (uint64_t)(v21 + 1);
      v24 = (_QWORD *)*((_QWORD *)this + 1);
      v23 = (_QWORD *)*((_QWORD *)this + 2);
      if (v23 == v24)
      {
        v26 = vdupq_n_s64((unint64_t)v23);
      }
      else
      {
        do
        {
          v25 = *--v23;
          *v23 = 0;
          *--v21 = v25;
        }
        while (v23 != v24);
        v26 = *v3;
        v15 = (_QWORD *)v35.i64[1];
        v22 = v36;
      }
      *((_QWORD *)this + 1) = v21;
      *((_QWORD *)this + 2) = v15;
      v35 = v26;
      v27 = *((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = v22;
      v36 = v27;
      v34 = v26.i64[0];
      sub_2429114EC((uint64_t)&v34);
    }
    else
    {
      *v14 = v12;
      v15 = v14 + 1;
    }
    *((_QWORD *)this + 2) = v15;
  }
  return this;
}

void sub_242764884(void *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  sub_2427297D4(a1);
}

uint64_t CMMsl::ClefCalibration::operator=(uint64_t a1, const CMMsl::ClefCalibration *a2)
{
  CMMsl::ClefCalibration *v3;
  void (**v5)(CMMsl::ClefCalibration *__hidden);
  uint64_t v6;
  void **v7;

  if ((const CMMsl::ClefCalibration *)a1 != a2)
  {
    CMMsl::ClefCalibration::ClefCalibration((CMMsl::ClefCalibration *)&v5, a2);
    CMMsl::swap(a1, (CMMsl::ClefCalibration *)&v5, v3);
    v5 = &off_25135CD08;
    v7 = (void **)&v6;
    sub_242910B70(&v7);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::ClefCalibration *a2, CMMsl::ClefCalibration *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(_DWORD *)(this + 64);
  *(_DWORD *)(this + 64) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  v4 = *(_DWORD *)(this + 36);
  *(_DWORD *)(this + 36) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  v5 = *(_DWORD *)(this + 44);
  *(_DWORD *)(this + 44) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v5;
  v6 = *(_DWORD *)(this + 32);
  *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v6;
  v7 = *(_DWORD *)(this + 40);
  *(_DWORD *)(this + 40) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v7;
  LOBYTE(v7) = *(_BYTE *)(this + 60);
  *(_BYTE *)(this + 60) = *((_BYTE *)a2 + 60);
  *((_BYTE *)a2 + 60) = v7;
  v8 = *(_DWORD *)(this + 48);
  *(_DWORD *)(this + 48) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v8;
  v9 = *(_DWORD *)(this + 52);
  *(_DWORD *)(this + 52) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v9;
  v10 = *(_DWORD *)(this + 56);
  *(_DWORD *)(this + 56) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v10;
  v11 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v11;
  v12 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v12;
  v13 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v13;
  return this;
}

uint64_t CMMsl::ClefCalibration::ClefCalibration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = &off_25135CD08;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  v5 = *(_QWORD **)(a1 + 8);
  if (v5)
  {
    v6 = *(_QWORD **)(a1 + 16);
    v7 = *(void **)(a1 + 8);
    if (v6 != v5)
    {
      do
      {
        v9 = *--v6;
        v8 = v9;
        *v6 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
      while (v6 != v5);
      v7 = *(void **)v4;
    }
    *(_QWORD *)(a1 + 16) = v5;
    operator delete(v7);
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = 0;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

uint64_t CMMsl::ClefCalibration::operator=(uint64_t a1, uint64_t a2)
{
  CMMsl::ClefCalibration *v3;
  void (**v5)(CMMsl::ClefCalibration *__hidden);
  uint64_t v6;
  void **v7;

  if (a1 != a2)
  {
    CMMsl::ClefCalibration::ClefCalibration((uint64_t)&v5, a2);
    CMMsl::swap(a1, (CMMsl::ClefCalibration *)&v5, v3);
    v5 = &off_25135CD08;
    v7 = (void **)&v6;
    sub_242910B70(&v7);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::ClefCalibration::formatText(CMMsl::ClefCalibration *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 64);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "gain");
    v5 = *((_BYTE *)this + 64);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((*((_BYTE *)this + 64) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "location");
  if ((*((_BYTE *)this + 64) & 4) != 0)
LABEL_4:
    PB::TextFormatter::format(a2, "offset");
LABEL_5:
  v6 = (uint64_t *)*((_QWORD *)this + 1);
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "point");
  }
  v9 = *((_BYTE *)this + 64);
  if ((v9 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "sensor");
    v9 = *((_BYTE *)this + 64);
    if ((v9 & 0x10) == 0)
    {
LABEL_9:
      if ((v9 & 0x20) == 0)
        goto LABEL_10;
      goto LABEL_19;
    }
  }
  else if ((*((_BYTE *)this + 64) & 0x10) == 0)
  {
    goto LABEL_9;
  }
  PB::TextFormatter::format(a2, "tempCalA");
  v9 = *((_BYTE *)this + 64);
  if ((v9 & 0x20) == 0)
  {
LABEL_10:
    if ((v9 & 0x80) == 0)
      goto LABEL_11;
LABEL_20:
    PB::TextFormatter::format(a2, "tempCalEnabled");
    if ((*((_BYTE *)this + 64) & 0x40) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_12;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "tempCalB");
  v9 = *((_BYTE *)this + 64);
  if (v9 < 0)
    goto LABEL_20;
LABEL_11:
  if ((v9 & 0x40) != 0)
LABEL_12:
    PB::TextFormatter::format(a2, "tempCalT0");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ClefCalibration::readFrom(CMMsl::ClefCalibration *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  char *v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t result;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  BOOL v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char v61;
  unsigned int v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char v69;
  unsigned int v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char v77;
  unsigned int v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t *v85;
  _QWORD *v86;
  char v87;
  unsigned int v88;
  unint64_t v89;
  char v90;
  char v91;
  unsigned int v92;
  unint64_t v93;
  char v94;
  char v95;
  unsigned int v96;
  unint64_t v97;
  char v98;
  char v99;
  unsigned int v100;
  unint64_t v101;
  char v102;
  char v103;
  unsigned int v104;
  unint64_t v105;
  char v106;
  char v107;
  unsigned int v108;
  unint64_t v109;
  char v110;
  char v111;
  unsigned int v112;
  unint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  unint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  uint64_t v125;
  int64x2_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int64x2_t v130;
  unint64_t v131;
  char *v132;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  v8 = (char *)this + 24;
  while (1)
  {
    v9 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      break;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v14 = *(_BYTE *)(v9 + v2);
      v12 |= (unint64_t)(v14 & 0x7F) << v10;
      if ((v14 & 0x80) == 0)
        break;
      v10 += 7;
      v2 = v13;
      v15 = v11++ > 8;
      if (v15)
        goto LABEL_20;
    }
LABEL_26:
    if ((v12 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v12 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 64) |= 2u;
        v22 = *((_QWORD *)a2 + 1);
        v23 = *((_QWORD *)a2 + 2);
        v24 = *(_QWORD *)a2;
        if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
        {
          v25 = 0;
          v26 = 0;
          v27 = 0;
          do
          {
            v28 = v22 + 1;
            *((_QWORD *)a2 + 1) = v22 + 1;
            v29 = *(_BYTE *)(v24 + v22);
            v27 |= (unint64_t)(v29 & 0x7F) << v25;
            if ((v29 & 0x80) == 0)
              goto LABEL_167;
            v25 += 7;
            v22 = v28;
            v15 = v26++ > 8;
          }
          while (!v15);
LABEL_110:
          LODWORD(v27) = 0;
          goto LABEL_167;
        }
        v99 = 0;
        v100 = 0;
        v27 = 0;
        if (v23 <= v22)
          v23 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v23 == v22)
          {
            LODWORD(v27) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v101 = v22 + 1;
            v102 = *(_BYTE *)(v24 + v22);
            *((_QWORD *)a2 + 1) = v101;
            v27 |= (unint64_t)(v102 & 0x7F) << v99;
            if (v102 < 0)
            {
              v99 += 7;
              v22 = v101;
              v15 = v100++ > 8;
              if (v15)
                goto LABEL_110;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v27) = 0;
          }
          break;
        }
LABEL_167:
        *((_DWORD *)this + 9) = v27;
        goto LABEL_21;
      case 2u:
        *((_BYTE *)this + 64) |= 8u;
        v58 = *((_QWORD *)a2 + 1);
        v59 = *((_QWORD *)a2 + 2);
        v60 = *(_QWORD *)a2;
        if (v58 <= 0xFFFFFFFFFFFFFFF5 && v58 + 10 <= v59)
        {
          v61 = 0;
          v62 = 0;
          v63 = 0;
          do
          {
            v64 = v58 + 1;
            *((_QWORD *)a2 + 1) = v58 + 1;
            v65 = *(_BYTE *)(v60 + v58);
            v63 |= (unint64_t)(v65 & 0x7F) << v61;
            if ((v65 & 0x80) == 0)
              goto LABEL_170;
            v61 += 7;
            v58 = v64;
            v15 = v62++ > 8;
          }
          while (!v15);
LABEL_117:
          LODWORD(v63) = 0;
          goto LABEL_170;
        }
        v103 = 0;
        v104 = 0;
        v63 = 0;
        if (v59 <= v58)
          v59 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v59 == v58)
          {
            LODWORD(v63) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v105 = v58 + 1;
            v106 = *(_BYTE *)(v60 + v58);
            *((_QWORD *)a2 + 1) = v105;
            v63 |= (unint64_t)(v106 & 0x7F) << v103;
            if (v106 < 0)
            {
              v103 += 7;
              v58 = v105;
              v15 = v104++ > 8;
              if (v15)
                goto LABEL_117;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v63) = 0;
          }
          break;
        }
LABEL_170:
        *((_DWORD *)this + 11) = v63;
        goto LABEL_21;
      case 3u:
        *((_BYTE *)this + 64) |= 1u;
        v34 = *((_QWORD *)a2 + 1);
        v35 = *((_QWORD *)a2 + 2);
        v36 = *(_QWORD *)a2;
        if (v34 <= 0xFFFFFFFFFFFFFFF5 && v34 + 10 <= v35)
        {
          v37 = 0;
          v38 = 0;
          v39 = 0;
          do
          {
            v40 = v34 + 1;
            *((_QWORD *)a2 + 1) = v34 + 1;
            v41 = *(_BYTE *)(v36 + v34);
            v39 |= (unint64_t)(v41 & 0x7F) << v37;
            if ((v41 & 0x80) == 0)
              goto LABEL_158;
            v37 += 7;
            v34 = v40;
            v15 = v38++ > 8;
          }
          while (!v15);
LABEL_89:
          LODWORD(v39) = 0;
          goto LABEL_158;
        }
        v87 = 0;
        v88 = 0;
        v39 = 0;
        if (v35 <= v34)
          v35 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v35 == v34)
          {
            LODWORD(v39) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v89 = v34 + 1;
            v90 = *(_BYTE *)(v36 + v34);
            *((_QWORD *)a2 + 1) = v89;
            v39 |= (unint64_t)(v90 & 0x7F) << v87;
            if (v90 < 0)
            {
              v87 += 7;
              v34 = v89;
              v15 = v88++ > 8;
              if (v15)
                goto LABEL_89;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v39) = 0;
          }
          break;
        }
LABEL_158:
        *((_DWORD *)this + 8) = v39;
        goto LABEL_21;
      case 4u:
        *((_BYTE *)this + 64) |= 4u;
        v42 = *((_QWORD *)a2 + 1);
        v43 = *((_QWORD *)a2 + 2);
        v44 = *(_QWORD *)a2;
        if (v42 <= 0xFFFFFFFFFFFFFFF5 && v42 + 10 <= v43)
        {
          v45 = 0;
          v46 = 0;
          v47 = 0;
          do
          {
            v48 = v42 + 1;
            *((_QWORD *)a2 + 1) = v42 + 1;
            v49 = *(_BYTE *)(v44 + v42);
            v47 |= (unint64_t)(v49 & 0x7F) << v45;
            if ((v49 & 0x80) == 0)
              goto LABEL_161;
            v45 += 7;
            v42 = v48;
            v15 = v46++ > 8;
          }
          while (!v15);
LABEL_96:
          LODWORD(v47) = 0;
          goto LABEL_161;
        }
        v91 = 0;
        v92 = 0;
        v47 = 0;
        if (v43 <= v42)
          v43 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v43 == v42)
          {
            LODWORD(v47) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v93 = v42 + 1;
            v94 = *(_BYTE *)(v44 + v42);
            *((_QWORD *)a2 + 1) = v93;
            v47 |= (unint64_t)(v94 & 0x7F) << v91;
            if (v94 < 0)
            {
              v91 += 7;
              v42 = v93;
              v15 = v92++ > 8;
              if (v15)
                goto LABEL_96;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v47) = 0;
          }
          break;
        }
LABEL_161:
        *((_DWORD *)this + 10) = v47;
        goto LABEL_21;
      case 5u:
        *((_BYTE *)this + 64) |= 0x80u;
        v30 = *((_QWORD *)a2 + 1);
        if (v30 >= *((_QWORD *)a2 + 2))
        {
          v33 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v31 = v30 + 1;
          v32 = *(unsigned __int8 *)(*(_QWORD *)a2 + v30);
          *((_QWORD *)a2 + 1) = v31;
          v33 = v32 != 0;
        }
        *((_BYTE *)this + 60) = v33;
        goto LABEL_21;
      case 6u:
        *((_BYTE *)this + 64) |= 0x10u;
        v66 = *((_QWORD *)a2 + 1);
        v67 = *((_QWORD *)a2 + 2);
        v68 = *(_QWORD *)a2;
        if (v66 <= 0xFFFFFFFFFFFFFFF5 && v66 + 10 <= v67)
        {
          v69 = 0;
          v70 = 0;
          v71 = 0;
          do
          {
            v72 = v66 + 1;
            *((_QWORD *)a2 + 1) = v66 + 1;
            v73 = *(_BYTE *)(v68 + v66);
            v71 |= (unint64_t)(v73 & 0x7F) << v69;
            if ((v73 & 0x80) == 0)
              goto LABEL_173;
            v69 += 7;
            v66 = v72;
            v15 = v70++ > 8;
          }
          while (!v15);
LABEL_124:
          LODWORD(v71) = 0;
          goto LABEL_173;
        }
        v107 = 0;
        v108 = 0;
        v71 = 0;
        if (v67 <= v66)
          v67 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v67 == v66)
          {
            LODWORD(v71) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v109 = v66 + 1;
            v110 = *(_BYTE *)(v68 + v66);
            *((_QWORD *)a2 + 1) = v109;
            v71 |= (unint64_t)(v110 & 0x7F) << v107;
            if (v110 < 0)
            {
              v107 += 7;
              v66 = v109;
              v15 = v108++ > 8;
              if (v15)
                goto LABEL_124;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v71) = 0;
          }
          break;
        }
LABEL_173:
        *((_DWORD *)this + 12) = v71;
        goto LABEL_21;
      case 7u:
        *((_BYTE *)this + 64) |= 0x20u;
        v74 = *((_QWORD *)a2 + 1);
        v75 = *((_QWORD *)a2 + 2);
        v76 = *(_QWORD *)a2;
        if (v74 <= 0xFFFFFFFFFFFFFFF5 && v74 + 10 <= v75)
        {
          v77 = 0;
          v78 = 0;
          v79 = 0;
          do
          {
            v80 = v74 + 1;
            *((_QWORD *)a2 + 1) = v74 + 1;
            v81 = *(_BYTE *)(v76 + v74);
            v79 |= (unint64_t)(v81 & 0x7F) << v77;
            if ((v81 & 0x80) == 0)
              goto LABEL_176;
            v77 += 7;
            v74 = v80;
            v15 = v78++ > 8;
          }
          while (!v15);
LABEL_131:
          LODWORD(v79) = 0;
          goto LABEL_176;
        }
        v111 = 0;
        v112 = 0;
        v79 = 0;
        if (v75 <= v74)
          v75 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v75 == v74)
          {
            LODWORD(v79) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v113 = v74 + 1;
            v114 = *(_BYTE *)(v76 + v74);
            *((_QWORD *)a2 + 1) = v113;
            v79 |= (unint64_t)(v114 & 0x7F) << v111;
            if (v114 < 0)
            {
              v111 += 7;
              v74 = v113;
              v15 = v112++ > 8;
              if (v15)
                goto LABEL_131;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v79) = 0;
          }
          break;
        }
LABEL_176:
        *((_DWORD *)this + 13) = v79;
        goto LABEL_21;
      case 8u:
        *((_BYTE *)this + 64) |= 0x40u;
        v50 = *((_QWORD *)a2 + 1);
        v51 = *((_QWORD *)a2 + 2);
        v52 = *(_QWORD *)a2;
        if (v50 <= 0xFFFFFFFFFFFFFFF5 && v50 + 10 <= v51)
        {
          v53 = 0;
          v54 = 0;
          v55 = 0;
          do
          {
            v56 = v50 + 1;
            *((_QWORD *)a2 + 1) = v50 + 1;
            v57 = *(_BYTE *)(v52 + v50);
            v55 |= (unint64_t)(v57 & 0x7F) << v53;
            if ((v57 & 0x80) == 0)
              goto LABEL_164;
            v53 += 7;
            v50 = v56;
            v15 = v54++ > 8;
          }
          while (!v15);
LABEL_103:
          LODWORD(v55) = 0;
          goto LABEL_164;
        }
        v95 = 0;
        v96 = 0;
        v55 = 0;
        if (v51 <= v50)
          v51 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v51 == v50)
          {
            LODWORD(v55) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v97 = v50 + 1;
            v98 = *(_BYTE *)(v52 + v50);
            *((_QWORD *)a2 + 1) = v97;
            v55 |= (unint64_t)(v98 & 0x7F) << v95;
            if (v98 < 0)
            {
              v95 += 7;
              v50 = v97;
              v15 = v96++ > 8;
              if (v15)
                goto LABEL_103;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v55) = 0;
          }
          break;
        }
LABEL_164:
        *((_DWORD *)this + 14) = v55;
        goto LABEL_21;
      case 9u:
        v82 = operator new();
        v83 = v82;
        *(_QWORD *)v82 = &off_25135CD40;
        *(_DWORD *)(v82 + 20) = 0;
        v85 = (uint64_t *)*((_QWORD *)this + 2);
        v84 = *((_QWORD *)this + 3);
        if ((unint64_t)v85 >= v84)
        {
          v115 = *((_QWORD *)this + 1);
          v116 = ((uint64_t)v85 - v115) >> 3;
          if ((unint64_t)(v116 + 1) >> 61)
            sub_242729A44();
          v117 = v84 - v115;
          v118 = v117 >> 2;
          if (v117 >> 2 <= (unint64_t)(v116 + 1))
            v118 = v116 + 1;
          if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFF8)
            v119 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v119 = v118;
          v132 = v8;
          if (v119)
            v119 = (unint64_t)sub_2429112FC(v119);
          else
            v120 = 0;
          v121 = (uint64_t *)(v119 + 8 * v116);
          v122 = v119 + 8 * v120;
          v131 = v122;
          *v121 = v83;
          v86 = v121 + 1;
          v130.i64[1] = (uint64_t)(v121 + 1);
          v124 = (_QWORD *)*((_QWORD *)this + 1);
          v123 = (_QWORD *)*((_QWORD *)this + 2);
          if (v123 == v124)
          {
            v126 = vdupq_n_s64((unint64_t)v123);
          }
          else
          {
            do
            {
              v125 = *--v123;
              *v123 = 0;
              *--v121 = v125;
            }
            while (v123 != v124);
            v126 = *(int64x2_t *)((char *)this + 8);
            v86 = (_QWORD *)v130.i64[1];
            v122 = v131;
          }
          *((_QWORD *)this + 1) = v121;
          *((_QWORD *)this + 2) = v86;
          v130 = v126;
          v127 = *((_QWORD *)this + 3);
          *((_QWORD *)this + 3) = v122;
          v131 = v127;
          v129 = v126.i64[0];
          sub_2429114EC((uint64_t)&v129);
        }
        else
        {
          *v85 = v82;
          v86 = v85 + 1;
        }
        *((_QWORD *)this + 2) = v86;
        v128 = *(v86 - 1);
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v128 + 16))(v128, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
LABEL_21:
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        v4 = *((unsigned __int8 *)a2 + 24);
        if (v2 >= v3 || v4 != 0)
          return v4 == 0;
        break;
      default:
        goto LABEL_20;
    }
  }
  v16 = 0;
  v17 = 0;
  v12 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v18 = v2 + 1;
    v19 = *(_BYTE *)(v9 + v2);
    *((_QWORD *)a2 + 1) = v18;
    v12 |= (unint64_t)(v19 & 0x7F) << v16;
    if ((v19 & 0x80) == 0)
      goto LABEL_26;
    v16 += 7;
    v2 = v18;
    v15 = v17++ > 8;
  }
  while (!v15);
LABEL_20:
  result = PB::Reader::skip(a2);
  if ((_DWORD)result)
    goto LABEL_21;
  return result;
}

void sub_242765610(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::ClefCalibration::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  const PB::Base **v5;
  const PB::Base **v6;
  const PB::Base *v7;

  v3 = this;
  v4 = *(_BYTE *)(this + 64);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 64);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((*(_BYTE *)(this + 64) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 0x80) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2);
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0)
      goto LABEL_8;
LABEL_20:
    this = PB::Writer::writeVarInt(a2);
    if ((*(_BYTE *)(v3 + 64) & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_19:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 0x20) != 0)
    goto LABEL_20;
LABEL_8:
  if ((v4 & 0x40) != 0)
LABEL_9:
    this = PB::Writer::writeVarInt(a2);
LABEL_10:
  v6 = *(const PB::Base ***)(v3 + 8);
  v5 = *(const PB::Base ***)(v3 + 16);
  while (v6 != v5)
  {
    v7 = *v6++;
    this = PB::Writer::writeSubmessage(a2, v7);
  }
  return this;
}

BOOL CMMsl::ClefCalibration::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  v2 = *(unsigned __int8 *)(a1 + 64);
  v3 = *(unsigned __int8 *)(a2 + 64);
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v3 & v2 & 0x80) == 0)
  {
    if (((v3 | v2) & 0x80) != 0)
      return 0;
LABEL_25:
    if ((v2 & 0x10) != 0)
    {
      if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48))
        return 0;
    }
    else if ((v3 & 0x10) != 0)
    {
      return 0;
    }
    if ((v2 & 0x20) != 0)
    {
      if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52))
        return 0;
    }
    else if ((v3 & 0x20) != 0)
    {
      return 0;
    }
    if ((v2 & 0x40) != 0)
    {
      if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56))
        return 0;
    }
    else if ((v3 & 0x40) != 0)
    {
      return 0;
    }
    return sub_242765880(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(uint64_t **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  if (*(unsigned __int8 *)(a1 + 60) == *(unsigned __int8 *)(a2 + 60))
    goto LABEL_25;
  return 0;
}

BOOL sub_242765880(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 result;
  BOOL v9;

  if (a2 - a1 != a4 - (_QWORD)a3)
    return 0;
  if (a1 == a2)
    return 1;
  v5 = a3;
  v6 = a1 + 8;
  do
  {
    v7 = *v5++;
    result = CMMsl::ClefCalibrationPoint::operator==(*(_QWORD *)(v6 - 8), v7);
    v9 = !result || v6 == a2;
    v6 += 8;
  }
  while (!v9);
  return result;
}

uint64_t CMMsl::ClefCalibration::hash_value(CMMsl::ClefCalibration *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if ((*((_BYTE *)this + 64) & 2) != 0)
  {
    v1 = *((unsigned int *)this + 9);
    if ((*((_BYTE *)this + 64) & 8) != 0)
    {
LABEL_3:
      v2 = *((unsigned int *)this + 11);
      if ((*((_BYTE *)this + 64) & 1) != 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else
  {
    v1 = 0;
    if ((*((_BYTE *)this + 64) & 8) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 64) & 1) != 0)
  {
LABEL_4:
    v3 = *((int *)this + 8);
    if ((*((_BYTE *)this + 64) & 4) != 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  v3 = 0;
  if ((*((_BYTE *)this + 64) & 4) != 0)
  {
LABEL_5:
    v4 = *((int *)this + 10);
    if ((*((_BYTE *)this + 64) & 0x80) != 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  v4 = 0;
  if ((*((_BYTE *)this + 64) & 0x80) != 0)
  {
LABEL_6:
    v5 = *((unsigned __int8 *)this + 60);
    if ((*((_BYTE *)this + 64) & 0x10) != 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  v5 = 0;
  if ((*((_BYTE *)this + 64) & 0x10) != 0)
  {
LABEL_7:
    v6 = *((int *)this + 12);
    if ((*((_BYTE *)this + 64) & 0x20) != 0)
      goto LABEL_8;
LABEL_16:
    v7 = 0;
    if ((*((_BYTE *)this + 64) & 0x40) != 0)
      goto LABEL_9;
    goto LABEL_17;
  }
LABEL_15:
  v6 = 0;
  if ((*((_BYTE *)this + 64) & 0x20) == 0)
    goto LABEL_16;
LABEL_8:
  v7 = *((int *)this + 13);
  if ((*((_BYTE *)this + 64) & 0x40) != 0)
  {
LABEL_9:
    v8 = *((int *)this + 14);
    goto LABEL_18;
  }
LABEL_17:
  v8 = 0;
LABEL_18:
  v10 = (uint64_t *)*((_QWORD *)this + 1);
  v9 = (uint64_t *)*((_QWORD *)this + 2);
  if (v10 == v9)
  {
    v11 = 0;
  }
  else
  {
    v11 = 0;
    do
    {
      v13 = *v10++;
      v12 = v13;
      v14 = *(_BYTE *)(v13 + 20);
      v15 = *(int *)(v13 + 8);
      v16 = *(int *)(v13 + 12);
      if ((v14 & 1) == 0)
        v15 = 0;
      v17 = *(int *)(v12 + 16);
      if ((v14 & 4) == 0)
        v17 = 0;
      if ((v14 & 2) != 0)
        v18 = v16;
      else
        v18 = 0;
      v11 ^= v15 ^ v17 ^ v18;
    }
    while (v10 != v9);
  }
  return v2 ^ v1 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v11;
}

uint64_t CMMsl::ClefCalibrationPoint::ClefCalibrationPoint(uint64_t this)
{
  *(_QWORD *)this = &off_25135CD40;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135CD40;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::ClefCalibrationPoint::~ClefCalibrationPoint(CMMsl::ClefCalibrationPoint *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::ClefCalibrationPoint::ClefCalibrationPoint(uint64_t this, const CMMsl::ClefCalibrationPoint *a2)
{
  char v2;
  char v3;
  int v4;
  int v5;
  int v6;

  *(_QWORD *)this = &off_25135CD40;
  *(_DWORD *)(this + 20) = 0;
  v2 = *((_BYTE *)a2 + 20);
  if ((v2 & 1) != 0)
  {
    v4 = *((_DWORD *)a2 + 2);
    v3 = 1;
    *(_BYTE *)(this + 20) = 1;
    *(_DWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 20);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 20) & 4) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 4);
    v3 |= 4u;
    *(_BYTE *)(this + 20) = v3;
    *(_DWORD *)(this + 16) = v5;
    v2 = *((_BYTE *)a2 + 20);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *((_DWORD *)a2 + 3);
    *(_BYTE *)(this + 20) = v3 | 2;
    *(_DWORD *)(this + 12) = v6;
  }
  return this;
}

uint64_t CMMsl::ClefCalibrationPoint::operator=(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  void (**v5)(CMMsl::ClefCalibrationPoint *__hidden);
  char v6;
  char v7;
  int v8;
  __int128 v9;
  void (**v11)(CMMsl::ClefCalibrationPoint *__hidden);
  __int128 v12;

  if (a1 != a2)
  {
    v5 = &off_25135CD40;
    v11 = &off_25135CD40;
    HIDWORD(v12) = 0;
    v6 = *(_BYTE *)(a2 + 20);
    if ((v6 & 1) != 0)
    {
      LODWORD(v5) = *(_DWORD *)(a2 + 8);
      v7 = 1;
      BYTE12(v12) = 1;
      if ((v6 & 4) != 0)
      {
LABEL_4:
        v2 = *(_DWORD *)(a2 + 16);
        v7 |= 4u;
        BYTE12(v12) = v7;
        if ((v6 & 2) != 0)
          goto LABEL_8;
        goto LABEL_9;
      }
    }
    else
    {
      v7 = 0;
      if ((*(_BYTE *)(a2 + 20) & 4) != 0)
        goto LABEL_4;
    }
    if ((v6 & 2) != 0)
    {
LABEL_8:
      v3 = *(_DWORD *)(a2 + 12);
      BYTE12(v12) = v7 | 2;
    }
LABEL_9:
    v8 = HIDWORD(v12);
    v9 = *(_OWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 16) = v2;
    *(_DWORD *)(a1 + 20) = v8;
    *(_DWORD *)(a1 + 8) = (_DWORD)v5;
    *(_DWORD *)(a1 + 12) = v3;
    v12 = v9;
    PB::Base::~Base((PB::Base *)&v11);
  }
  return a1;
}

{
  __int128 v3;
  __int128 v4;
  void (**v6)(CMMsl::ClefCalibrationPoint *__hidden);
  __int128 v7;

  if (a1 != a2)
  {
    v6 = &off_25135CD40;
    v3 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v3;
    v7 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

_DWORD *CMMsl::swap(_DWORD *this, CMMsl::ClefCalibrationPoint *a2, CMMsl::ClefCalibrationPoint *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;

  v3 = this[5];
  this[5] = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  v4 = this[2];
  this[2] = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  v5 = this[4];
  this[4] = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  v6 = this[3];
  this[3] = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v6;
  return this;
}

uint64_t CMMsl::ClefCalibrationPoint::ClefCalibrationPoint(uint64_t result, _DWORD *a2)
{
  *(_QWORD *)result = &off_25135CD40;
  *(_DWORD *)(result + 20) = a2[5];
  a2[5] = 0;
  *(_DWORD *)(result + 8) = a2[2];
  *(_DWORD *)(result + 16) = a2[4];
  *(_DWORD *)(result + 12) = a2[3];
  return result;
}

{
  *(_QWORD *)result = &off_25135CD40;
  *(_DWORD *)(result + 20) = a2[5];
  a2[5] = 0;
  *(_DWORD *)(result + 8) = a2[2];
  *(_DWORD *)(result + 16) = a2[4];
  *(_DWORD *)(result + 12) = a2[3];
  return result;
}

uint64_t CMMsl::ClefCalibrationPoint::formatText(CMMsl::ClefCalibrationPoint *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 1) == 0)
  {
    if ((*((_BYTE *)this + 20) & 2) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(a2, "distance");
    if ((*((_BYTE *)this + 20) & 4) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_4;
  }
  PB::TextFormatter::format(a2, "base");
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 4) != 0)
LABEL_4:
    PB::TextFormatter::format(a2, "peak");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ClefCalibrationPoint::readFrom(CMMsl::ClefCalibrationPoint *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;

  v3 = *((_QWORD *)a2 + 1);
  v2 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v3 + 1;
        *((_QWORD *)a2 + 1) = v3 + 1;
        v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v3 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_31;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v19 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((_BYTE *)this + 20) |= 2u;
        v27 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v28 = *(_QWORD *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v43 = 0;
          v44 = 0;
          v31 = 0;
          if (v2 <= v27)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_83;
            }
            v45 = v27++;
            v46 = *(_BYTE *)(v28 + v45);
            *((_QWORD *)a2 + 1) = v27;
            v31 |= (unint64_t)(v46 & 0x7F) << v43;
            if ((v46 & 0x80) == 0)
              break;
            v43 += 7;
            v14 = v44++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_82;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v31) = 0;
LABEL_82:
          v3 = v45 + 1;
        }
        else
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          while (1)
          {
            v3 = v27 + 1;
            *((_QWORD *)a2 + 1) = v27 + 1;
            v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0)
              break;
            v29 += 7;
            v27 = v3;
            v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_83:
        *((_DWORD *)this + 3) = v31;
      }
      else if ((_DWORD)v19 == 2)
      {
        *((_BYTE *)this + 20) |= 4u;
        v33 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v34 = *(_QWORD *)a2;
        if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
        {
          v47 = 0;
          v48 = 0;
          v37 = 0;
          if (v2 <= v33)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v33)
            {
              LODWORD(v37) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_88;
            }
            v49 = v33++;
            v50 = *(_BYTE *)(v34 + v49);
            *((_QWORD *)a2 + 1) = v33;
            v37 |= (unint64_t)(v50 & 0x7F) << v47;
            if ((v50 & 0x80) == 0)
              break;
            v47 += 7;
            v14 = v48++ > 8;
            if (v14)
            {
              LODWORD(v37) = 0;
              goto LABEL_87;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v37) = 0;
LABEL_87:
          v3 = v49 + 1;
        }
        else
        {
          v35 = 0;
          v36 = 0;
          v37 = 0;
          while (1)
          {
            v3 = v33 + 1;
            *((_QWORD *)a2 + 1) = v33 + 1;
            v38 = *(_BYTE *)(v34 + v33);
            v37 |= (unint64_t)(v38 & 0x7F) << v35;
            if ((v38 & 0x80) == 0)
              break;
            v35 += 7;
            v33 = v3;
            v14 = v36++ > 8;
            if (v14)
            {
              LODWORD(v37) = 0;
              break;
            }
          }
        }
LABEL_88:
        *((_DWORD *)this + 4) = v37;
      }
      else if ((_DWORD)v19 == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v39 = 0;
          v40 = 0;
          v24 = 0;
          if (v2 <= v20)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_78;
            }
            v41 = v20++;
            v42 = *(_BYTE *)(v21 + v41);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v42 & 0x7F) << v39;
            if ((v42 & 0x80) == 0)
              break;
            v39 += 7;
            v14 = v40++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_77;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
LABEL_77:
          v3 = v41 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v3 = v20 + 1;
            *((_QWORD *)a2 + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v3;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_78:
        *((_DWORD *)this + 2) = v24;
      }
      else
      {
LABEL_31:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v3 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v2 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v3 > v2)
      v2 = v3;
    while (v2 != v3)
    {
      v17 = v3 + 1;
      v18 = *(_BYTE *)(v8 + v3);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v3 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_31;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::ClefCalibrationPoint::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 20);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        return this;
      return PB::Writer::writeVarInt(a2);
    }
  }
  else if ((*(_BYTE *)(this + 20) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  if ((*(_BYTE *)(v3 + 20) & 2) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

BOOL CMMsl::ClefCalibrationPoint::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 20) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 4) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12);
  return v2;
}

uint64_t CMMsl::ClefCalibrationPoint::hash_value(CMMsl::ClefCalibrationPoint *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if ((*((_BYTE *)this + 20) & 1) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 20) & 4) != 0)
      goto LABEL_3;
LABEL_6:
    v2 = 0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_4;
LABEL_7:
    v3 = 0;
    return v2 ^ v1 ^ v3;
  }
  v1 = *((int *)this + 2);
  if ((*((_BYTE *)this + 20) & 4) == 0)
    goto LABEL_6;
LABEL_3:
  v2 = *((int *)this + 4);
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_7;
LABEL_4:
  v3 = *((int *)this + 3);
  return v2 ^ v1 ^ v3;
}

uint64_t CMMsl::ClefMeasurement::ClefMeasurement(uint64_t this)
{
  *(_QWORD *)this = &off_25135CD78;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135CD78;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

void CMMsl::ClefMeasurement::~ClefMeasurement(CMMsl::ClefMeasurement *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::ClefMeasurement::ClefMeasurement(CMMsl::ClefMeasurement *this, const CMMsl::ClefMeasurement *a2)
{
  char v2;
  float result;

  *(_QWORD *)this = &off_25135CD78;
  *((_DWORD *)this + 4) = 0;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    result = *((float *)a2 + 2);
    *((_BYTE *)this + 16) = 1;
    *((float *)this + 2) = result;
    v2 = 3;
    if ((*((_BYTE *)a2 + 16) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 16) & 2) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 3);
    *((_BYTE *)this + 16) = v2;
    *((float *)this + 3) = result;
  }
  return result;
}

{
  char v2;
  float result;

  *(_QWORD *)this = &off_25135CD78;
  *((_DWORD *)this + 4) = 0;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    result = *((float *)a2 + 2);
    *((_BYTE *)this + 16) = 1;
    *((float *)this + 2) = result;
    v2 = 3;
    if ((*((_BYTE *)a2 + 16) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 16) & 2) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 3);
    *((_BYTE *)this + 16) = v2;
    *((float *)this + 3) = result;
  }
  return result;
}

uint64_t CMMsl::ClefMeasurement::operator=(uint64_t a1, uint64_t a2, float a3, float a4)
{
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  _QWORD v10[2];
  int v11;

  if (a1 != a2)
  {
    v10[0] = &off_25135CD78;
    v11 = 0;
    v5 = *(_BYTE *)(a2 + 16);
    if ((v5 & 1) != 0)
    {
      a3 = *(float *)(a2 + 8);
      LOBYTE(v11) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        a4 = *(float *)(a2 + 12);
        LOBYTE(v11) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 16) & 2) != 0)
        goto LABEL_6;
    }
    v7 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v11;
    v11 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    *(float *)(a1 + 8) = a3;
    *(float *)(a1 + 12) = a4;
    v10[1] = v8;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ClefMeasurement *a2, CMMsl::ClefMeasurement *a3)
{
  int v3;
  int v4;
  float result;

  v3 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3;
  v4 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  result = *((float *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((float *)a2 + 3) = result;
  return result;
}

float CMMsl::ClefMeasurement::ClefMeasurement(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135CD78;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_25135CD78;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  return result;
}

uint64_t CMMsl::ClefMeasurement::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];
  int v8;

  if (a1 != a2)
  {
    v7[0] = &off_25135CD78;
    v3 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 0;
    v8 = *(_DWORD *)(a1 + 16);
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 16) = v3;
    *(_QWORD *)(a1 + 8) = v5;
    v7[1] = v4;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

uint64_t CMMsl::ClefMeasurement::formatText(CMMsl::ClefMeasurement *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 16);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "concha", *((float *)this + 2));
    v5 = *((_BYTE *)this + 16);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "tragus", *((float *)this + 3));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ClefMeasurement::readFrom(CMMsl::ClefMeasurement *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          v14 = v16++ > 8;
          if (v14)
            goto LABEL_26;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_26;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 16) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_30;
        *((_DWORD *)this + 3) = *(_DWORD *)(*(_QWORD *)a2 + v2);
      }
      else
      {
        if ((v11 >> 3) != 1)
        {
LABEL_26:
          result = PB::Reader::skip(a2);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          goto LABEL_33;
        }
        *((_BYTE *)this + 16) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
        {
LABEL_30:
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_33;
        }
        *((_DWORD *)this + 2) = *(_DWORD *)(*(_QWORD *)a2 + v2);
      }
      v2 = *((_QWORD *)a2 + 1) + 4;
      *((_QWORD *)a2 + 1) = v2;
LABEL_33:
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::ClefMeasurement::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 16);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 8));
    v4 = *(_BYTE *)(v3 + 16);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 12));
  return this;
}

BOOL CMMsl::ClefMeasurement::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 16) & 1) == 0 || *(float *)(a1 + 8) != *(float *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 16) & 2) == 0;
  if ((*(_BYTE *)(a1 + 16) & 2) != 0)
    return (*(_BYTE *)(a2 + 16) & 2) != 0 && *(float *)(a1 + 12) == *(float *)(a2 + 12);
  return v2;
}

uint64_t CMMsl::ClefMeasurement::hash_value(CMMsl::ClefMeasurement *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  float v4;

  if ((*((_BYTE *)this + 16) & 1) != 0)
  {
    v4 = *((float *)this + 2);
    v1 = LODWORD(v4);
    if (v4 == 0.0)
      v1 = 0;
    if ((*((_BYTE *)this + 16) & 2) != 0)
      goto LABEL_3;
LABEL_9:
    v3 = 0;
    return v3 ^ v1;
  }
  v1 = 0;
  if ((*((_BYTE *)this + 16) & 2) == 0)
    goto LABEL_9;
LABEL_3:
  v2 = *((float *)this + 3);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  return v3 ^ v1;
}

uint64_t CMMsl::ClefTemperature::ClefTemperature(uint64_t this)
{
  *(_QWORD *)this = &off_25135CDB0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135CDB0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

void CMMsl::ClefTemperature::~ClefTemperature(CMMsl::ClefTemperature *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::ClefTemperature::ClefTemperature(uint64_t this, const CMMsl::ClefTemperature *a2)
{
  char v2;
  int v3;
  int v4;

  *(_QWORD *)this = &off_25135CDB0;
  *(_DWORD *)(this + 16) = 0;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v3 = *((_DWORD *)a2 + 2);
    *(_BYTE *)(this + 16) = 1;
    *(_DWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 16) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 16) & 2) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 3);
    *(_BYTE *)(this + 16) = v2;
    *(_DWORD *)(this + 12) = v4;
  }
  return this;
}

{
  char v2;
  int v3;
  int v4;

  *(_QWORD *)this = &off_25135CDB0;
  *(_DWORD *)(this + 16) = 0;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v3 = *((_DWORD *)a2 + 2);
    *(_BYTE *)(this + 16) = 1;
    *(_DWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 16) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 16) & 2) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 3);
    *(_BYTE *)(this + 16) = v2;
    *(_DWORD *)(this + 12) = v4;
  }
  return this;
}

uint64_t CMMsl::ClefTemperature::operator=(uint64_t a1, uint64_t a2)
{
  int v2;
  void (**v4)(CMMsl::ClefTemperature *__hidden);
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  _QWORD v10[2];
  int v11;

  if (a1 != a2)
  {
    v4 = &off_25135CDB0;
    v10[0] = &off_25135CDB0;
    v11 = 0;
    v5 = *(_BYTE *)(a2 + 16);
    if ((v5 & 1) != 0)
    {
      LODWORD(v4) = *(_DWORD *)(a2 + 8);
      LOBYTE(v11) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        v2 = *(_DWORD *)(a2 + 12);
        LOBYTE(v11) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 16) & 2) != 0)
        goto LABEL_6;
    }
    v7 = v11;
    v11 = *(_DWORD *)(a1 + 16);
    v8 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = (_DWORD)v4;
    *(_DWORD *)(a1 + 12) = v2;
    *(_DWORD *)(a1 + 16) = v7;
    v10[1] = v8;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

{
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];
  int v8;

  if (a1 != a2)
  {
    v7[0] = &off_25135CDB0;
    v3 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 0;
    v8 = *(_DWORD *)(a1 + 16);
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 16) = v3;
    *(_QWORD *)(a1 + 8) = v5;
    v7[1] = v4;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

_DWORD *CMMsl::swap(_DWORD *this, CMMsl::ClefTemperature *a2, CMMsl::ClefTemperature *a3)
{
  int v3;
  int v4;
  int v5;

  v3 = this[4];
  this[4] = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3;
  v4 = this[2];
  this[2] = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  v5 = this[3];
  this[3] = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v5;
  return this;
}

uint64_t CMMsl::ClefTemperature::ClefTemperature(uint64_t result, _DWORD *a2)
{
  *(_QWORD *)result = &off_25135CDB0;
  *(_DWORD *)(result + 16) = a2[4];
  a2[4] = 0;
  *(_DWORD *)(result + 8) = a2[2];
  *(_DWORD *)(result + 12) = a2[3];
  return result;
}

{
  *(_QWORD *)result = &off_25135CDB0;
  *(_DWORD *)(result + 16) = a2[4];
  a2[4] = 0;
  *(_DWORD *)(result + 8) = a2[2];
  *(_DWORD *)(result + 12) = a2[3];
  return result;
}

uint64_t CMMsl::ClefTemperature::formatText(CMMsl::ClefTemperature *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 16);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "conchaTemp");
    v5 = *((_BYTE *)this + 16);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "tragusTemp");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ClefTemperature::readFrom(CMMsl::ClefTemperature *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  char v24;
  uint64_t result;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  unint64_t v38;
  char v39;

  v3 = *((_QWORD *)a2 + 1);
  v2 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v3 + 1;
        *((_QWORD *)a2 + 1) = v3 + 1;
        v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v3 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_30;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 16) |= 2u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v36 = 0;
          v37 = 0;
          v30 = 0;
          if (v2 <= v26)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_64;
            }
            v38 = v26++;
            v39 = *(_BYTE *)(v27 + v38);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v39 & 0x7F) << v36;
            if ((v39 & 0x80) == 0)
              break;
            v36 += 7;
            v14 = v37++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              goto LABEL_63;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v30) = 0;
LABEL_63:
          v3 = v38 + 1;
        }
        else
        {
          v28 = 0;
          v29 = 0;
          v30 = 0;
          while (1)
          {
            v3 = v26 + 1;
            *((_QWORD *)a2 + 1) = v26 + 1;
            v31 = *(_BYTE *)(v27 + v26);
            v30 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v26 = v3;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              break;
            }
          }
        }
LABEL_64:
        *((_DWORD *)this + 3) = v30;
      }
      else if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 16) |= 1u;
        v19 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v20 = *(_QWORD *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v2)
        {
          v32 = 0;
          v33 = 0;
          v23 = 0;
          if (v2 <= v19)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v19)
            {
              LODWORD(v23) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_60;
            }
            v34 = v19++;
            v35 = *(_BYTE *)(v20 + v34);
            *((_QWORD *)a2 + 1) = v19;
            v23 |= (unint64_t)(v35 & 0x7F) << v32;
            if ((v35 & 0x80) == 0)
              break;
            v32 += 7;
            v14 = v33++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              goto LABEL_59;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v23) = 0;
LABEL_59:
          v3 = v34 + 1;
        }
        else
        {
          v21 = 0;
          v22 = 0;
          v23 = 0;
          while (1)
          {
            v3 = v19 + 1;
            *((_QWORD *)a2 + 1) = v19 + 1;
            v24 = *(_BYTE *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0)
              break;
            v21 += 7;
            v19 = v3;
            v14 = v22++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              break;
            }
          }
        }
LABEL_60:
        *((_DWORD *)this + 2) = v23;
      }
      else
      {
LABEL_30:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v3 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v2 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v3 > v2)
      v2 = v3;
    while (v2 != v3)
    {
      v17 = v3 + 1;
      v18 = *(_BYTE *)(v8 + v3);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v3 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_30;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::ClefTemperature::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 16);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 16);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

BOOL CMMsl::ClefTemperature::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 16) & 1) == 0 || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 16) & 2) == 0;
  if ((*(_BYTE *)(a1 + 16) & 2) != 0)
    return (*(_BYTE *)(a2 + 16) & 2) != 0 && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12);
  return v2;
}

uint64_t CMMsl::ClefTemperature::hash_value(CMMsl::ClefTemperature *this)
{
  uint64_t v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 16) & 1) != 0)
  {
    v1 = *((int *)this + 2);
    if ((*((_BYTE *)this + 16) & 2) != 0)
      goto LABEL_3;
LABEL_5:
    v2 = 0;
    return v2 ^ v1;
  }
  v1 = 0;
  if ((*((_BYTE *)this + 16) & 2) == 0)
    goto LABEL_5;
LABEL_3:
  v2 = *((int *)this + 3);
  return v2 ^ v1;
}

uint64_t CMMsl::CoarseElevationChange::CoarseElevationChange(uint64_t this)
{
  *(_QWORD *)this = &off_25135CDE8;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135CDE8;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::CoarseElevationChange::~CoarseElevationChange(CMMsl::CoarseElevationChange *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::CoarseElevationChange::CoarseElevationChange(uint64_t this, const CMMsl::CoarseElevationChange *a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)this = &off_25135CDE8;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)this = &off_25135CDE8;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::CoarseElevationChange::operator=(uint64_t a1, uint64_t a2, double a3)
{
  int v3;
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  uint64_t v12;

  if (a1 != a2)
  {
    v11[0] = &off_25135CDE8;
    HIDWORD(v12) = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      BYTE4(v12) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        v3 = *(_DWORD *)(a2 + 16);
        BYTE4(v12) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = HIDWORD(v12);
    v8 = *(_QWORD *)(a1 + 8);
    v9 = *(_QWORD *)(a1 + 16);
    *(double *)(a1 + 8) = a3;
    *(_DWORD *)(a1 + 16) = v3;
    *(_DWORD *)(a1 + 20) = v7;
    v11[1] = v8;
    v12 = v9;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::CoarseElevationChange *a2, CMMsl::CoarseElevationChange *a3)
{
  int v3;
  double result;
  int v5;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  return result;
}

double CMMsl::CoarseElevationChange::CoarseElevationChange(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135CDE8;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135CDE8;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::CoarseElevationChange::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  if (a1 != a2)
  {
    v8[0] = &off_25135CDE8;
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    v8[1] = v5;
    v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::CoarseElevationChange::formatText(CMMsl::CoarseElevationChange *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "elevationAscended");
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "startTime", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::CoarseElevationChange::readFrom(CMMsl::CoarseElevationChange *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_26;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v26 = 0;
          v27 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_47;
            }
            v28 = v20++;
            v29 = *(_BYTE *)(v21 + v28);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0)
              break;
            v26 += 7;
            v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
LABEL_46:
          v2 = v28 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)a2 + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 4) = v24;
      }
      else if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_26:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_26;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::CoarseElevationChange::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

BOOL CMMsl::CoarseElevationChange::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

uint64_t CMMsl::CoarseElevationChange::hash_value(CMMsl::CoarseElevationChange *this)
{
  double v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v2 = 0;
    return v2 ^ *(_QWORD *)&v1;
  }
  v1 = 0.0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((unsigned int *)this + 4);
  return v2 ^ *(_QWORD *)&v1;
}

uint64_t CMMsl::Compass::Compass(uint64_t this)
{
  *(_QWORD *)this = &off_25135CE20;
  *(_DWORD *)(this + 68) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135CE20;
  *(_DWORD *)(this + 68) = 0;
  return this;
}

void CMMsl::Compass::~Compass(CMMsl::Compass *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::Compass::Compass(CMMsl::Compass *this, const CMMsl::Compass *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  int v5;

  *(_QWORD *)this = &off_25135CE20;
  *((_DWORD *)this + 17) = 0;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_WORD *)this + 34) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_WORD *)a2 + 34);
    if ((v2 & 0x800) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_WORD *)a2 + 34) & 0x800) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 14);
    v3 |= 0x800u;
    *((_WORD *)this + 34) = v3;
    *((_DWORD *)this + 14) = v4;
    v2 = *((_WORD *)a2 + 34);
  }
LABEL_6:
  if ((v2 & 0x2000) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 16);
    v3 |= 0x2000u;
    *((_WORD *)this + 34) = v3;
    *((_DWORD *)this + 16) = v4;
    v2 = *((_WORD *)a2 + 34);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x100) == 0)
        goto LABEL_9;
      goto LABEL_21;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *((_WORD *)this + 34) = v3;
  *((_DWORD *)this + 4) = v4;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x100) == 0)
  {
LABEL_9:
    if ((v2 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  LODWORD(v4) = *((_DWORD *)a2 + 11);
  v3 |= 0x100u;
  *((_WORD *)this + 34) = v3;
  *((_DWORD *)this + 11) = v4;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x200) == 0)
  {
LABEL_10:
    if ((v2 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  LODWORD(v4) = *((_DWORD *)a2 + 12);
  v3 |= 0x200u;
  *((_WORD *)this + 34) = v3;
  *((_DWORD *)this + 12) = v4;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x400) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  LODWORD(v4) = *((_DWORD *)a2 + 13);
  v3 |= 0x400u;
  *((_WORD *)this + 34) = v3;
  *((_DWORD *)this + 13) = v4;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0)
      goto LABEL_13;
    goto LABEL_25;
  }
LABEL_24:
  LODWORD(v4) = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *((_WORD *)this + 34) = v3;
  *((_DWORD *)this + 5) = v4;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_26;
  }
LABEL_25:
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *((_WORD *)this + 34) = v3;
  *((_DWORD *)this + 6) = v4;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x10) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_27;
  }
LABEL_26:
  LODWORD(v4) = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *((_WORD *)this + 34) = v3;
  *((_DWORD *)this + 7) = v4;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 0x1000) == 0)
      goto LABEL_16;
    goto LABEL_28;
  }
LABEL_27:
  v5 = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *((_WORD *)this + 34) = v3;
  *((_DWORD *)this + 8) = v5;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x1000) == 0)
  {
LABEL_16:
    if ((v2 & 0x80) == 0)
      goto LABEL_17;
    goto LABEL_29;
  }
LABEL_28:
  LODWORD(v4) = *((_DWORD *)a2 + 15);
  v3 |= 0x1000u;
  *((_WORD *)this + 34) = v3;
  *((_DWORD *)this + 15) = v4;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x80) == 0)
  {
LABEL_17:
    if ((v2 & 0x40) == 0)
      return *(float *)&v4;
    goto LABEL_30;
  }
LABEL_29:
  LODWORD(v4) = *((_DWORD *)a2 + 10);
  v3 |= 0x80u;
  *((_WORD *)this + 34) = v3;
  *((_DWORD *)this + 10) = v4;
  if ((*((_WORD *)a2 + 34) & 0x40) == 0)
    return *(float *)&v4;
LABEL_30:
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  *((_WORD *)this + 34) = v3 | 0x40;
  *((_DWORD *)this + 9) = v4;
  return *(float *)&v4;
}

CMMsl *CMMsl::Compass::operator=(CMMsl *a1, const CMMsl::Compass *a2)
{
  CMMsl::Compass *v3;
  _BYTE v5[72];

  if (a1 != a2)
  {
    CMMsl::Compass::Compass((CMMsl::Compass *)v5, a2);
    CMMsl::swap(a1, (CMMsl::Compass *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::Compass *a2, CMMsl::Compass *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  float result;

  v3 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  LODWORD(v4) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  v5 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v5;
  LODWORD(v4) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  result = *((float *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((float *)a2 + 9) = result;
  return result;
}

float CMMsl::Compass::Compass(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135CE20;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a2 + 68) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  result = *(float *)(a2 + 36);
  *(float *)(a1 + 36) = result;
  return result;
}

CMMsl *CMMsl::Compass::operator=(CMMsl *this, uint64_t a2, CMMsl::Compass *a3)
{
  _QWORD v5[2];
  __int128 v6;
  int v7;
  __int128 v8;
  __int128 v9;
  int v10;

  if (this != (CMMsl *)a2)
  {
    v5[0] = &off_25135CE20;
    v10 = *(_DWORD *)(a2 + 68);
    *(_DWORD *)(a2 + 68) = 0;
    v5[1] = *(_QWORD *)(a2 + 8);
    v6 = *(_OWORD *)(a2 + 16);
    v7 = *(_DWORD *)(a2 + 32);
    v9 = *(_OWORD *)(a2 + 52);
    v8 = *(_OWORD *)(a2 + 36);
    CMMsl::swap(this, (CMMsl::Compass *)v5, a3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return this;
}

uint64_t CMMsl::Compass::formatText(CMMsl::Compass *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 34);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "accuracy", *((float *)this + 4));
    v5 = *((_WORD *)this + 34);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "biasX", *((float *)this + 5));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "biasY", *((float *)this + 6));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "biasZ", *((float *)this + 7));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "calibrationLevel");
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "horizontal", *((float *)this + 9));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "inclination", *((float *)this + 10));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "magneticFieldX", *((float *)this + 11));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "magneticFieldY", *((float *)this + 12));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "magneticFieldZ", *((float *)this + 13));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "magneticHeading", *((float *)this + 14));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 1) == 0)
      goto LABEL_14;
LABEL_29:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    if ((*((_WORD *)this + 34) & 0x2000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_15;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "magnitude", *((float *)this + 15));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 1) != 0)
    goto LABEL_29;
LABEL_14:
  if ((v5 & 0x2000) != 0)
LABEL_15:
    PB::TextFormatter::format(a2, "trueHeading", *((float *)this + 16));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::Compass::readFrom(CMMsl::Compass *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_84;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 34) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_68;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        v2 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_78;
      case 2u:
        *((_WORD *)this + 34) |= 0x800u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_68;
        *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_77;
      case 3u:
        *((_WORD *)this + 34) |= 0x2000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_68;
        *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_77;
      case 4u:
        *((_WORD *)this + 34) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_68;
        *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_77;
      case 5u:
        *((_WORD *)this + 34) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_68;
        *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_77;
      case 6u:
        *((_WORD *)this + 34) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_68;
        *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_77;
      case 7u:
        *((_WORD *)this + 34) |= 0x400u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_68;
        *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_77;
      case 8u:
        *((_WORD *)this + 34) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_68;
        *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_77;
      case 9u:
        *((_WORD *)this + 34) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_68;
        *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_77;
      case 0xAu:
        *((_WORD *)this + 34) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_68;
        *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_77;
      case 0xBu:
        *((_WORD *)this + 34) |= 0x20u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v26 = 0;
          v27 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_83;
            }
            v28 = v20++;
            v29 = *(_BYTE *)(v21 + v28);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0)
              break;
            v26 += 7;
            v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_82:
              v2 = v28 + 1;
              goto LABEL_83;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
          goto LABEL_82;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_83;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_83:
        *((_DWORD *)this + 8) = v24;
        break;
      case 0xCu:
        *((_WORD *)this + 34) |= 0x1000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_68;
        *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_77;
      case 0xDu:
        *((_WORD *)this + 34) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_68;
        *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_77;
      case 0xEu:
        *((_WORD *)this + 34) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_77:
          v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_78:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_68:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_84:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::Compass::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 68);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_WORD *)(v3 + 68);
    if ((v4 & 0x800) == 0)
    {
LABEL_3:
      if ((v4 & 0x2000) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((*(_WORD *)(this + 68) & 0x800) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x2000) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(float *)(v3 + 64));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x100) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x1000) == 0)
  {
LABEL_13:
    if ((v4 & 0x80) == 0)
      goto LABEL_14;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(float *)(v3 + 60));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x80) == 0)
  {
LABEL_14:
    if ((v4 & 0x40) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 36));
  }
LABEL_28:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  if ((*(_WORD *)(v3 + 68) & 0x40) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 36));
  return this;
}

BOOL CMMsl::Compass::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 68);
  v3 = *(_WORD *)(a2 + 68);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x800) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 68) & 0x800) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x2000) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x2000) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 68) & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x100) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 68) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x200) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 68) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x400) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 68) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x1000) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 68) & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x40) == 0;
  if ((v2 & 0x40) != 0)
    return (v3 & 0x40) != 0 && *(float *)(a1 + 36) == *(float *)(a2 + 36);
  return v4;
}

uint64_t CMMsl::Compass::hash_value(CMMsl::Compass *this)
{
  __int16 v1;
  double v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  float v26;
  uint64_t v27;

  v1 = *((_WORD *)this + 34);
  if ((v1 & 1) == 0)
  {
    v2 = 0.0;
    if ((*((_WORD *)this + 34) & 0x800) != 0)
      goto LABEL_3;
LABEL_43:
    v4 = 0;
    if ((*((_WORD *)this + 34) & 0x2000) != 0)
      goto LABEL_6;
LABEL_44:
    v6 = 0;
    if ((v1 & 2) != 0)
      goto LABEL_9;
LABEL_45:
    v8 = 0;
    if ((*((_WORD *)this + 34) & 0x100) != 0)
      goto LABEL_12;
LABEL_46:
    v10 = 0;
    if ((*((_WORD *)this + 34) & 0x200) != 0)
      goto LABEL_15;
LABEL_47:
    v12 = 0;
    if ((*((_WORD *)this + 34) & 0x400) != 0)
      goto LABEL_18;
LABEL_48:
    v14 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_21;
LABEL_49:
    v16 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_24;
LABEL_50:
    v18 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_27;
LABEL_51:
    v20 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_30;
    goto LABEL_52;
  }
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_WORD *)this + 34) & 0x800) == 0)
    goto LABEL_43;
LABEL_3:
  v3 = *((float *)this + 14);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  if ((*((_WORD *)this + 34) & 0x2000) == 0)
    goto LABEL_44;
LABEL_6:
  v5 = *((float *)this + 16);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_45;
LABEL_9:
  v7 = *((float *)this + 4);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((*((_WORD *)this + 34) & 0x100) == 0)
    goto LABEL_46;
LABEL_12:
  v9 = *((float *)this + 11);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((*((_WORD *)this + 34) & 0x200) == 0)
    goto LABEL_47;
LABEL_15:
  v11 = *((float *)this + 12);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((*((_WORD *)this + 34) & 0x400) == 0)
    goto LABEL_48;
LABEL_18:
  v13 = *((float *)this + 13);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((v1 & 4) == 0)
    goto LABEL_49;
LABEL_21:
  v15 = *((float *)this + 5);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_50;
LABEL_24:
  v17 = *((float *)this + 6);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_51;
LABEL_27:
  v19 = *((float *)this + 7);
  v20 = LODWORD(v19);
  if (v19 == 0.0)
    v20 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_30:
    v21 = *((int *)this + 8);
    if ((*((_WORD *)this + 34) & 0x1000) != 0)
      goto LABEL_31;
LABEL_53:
    v23 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_34;
    goto LABEL_54;
  }
LABEL_52:
  v21 = 0;
  if ((*((_WORD *)this + 34) & 0x1000) == 0)
    goto LABEL_53;
LABEL_31:
  v22 = *((float *)this + 15);
  v23 = LODWORD(v22);
  if (v22 == 0.0)
    v23 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_34:
    v24 = *((float *)this + 10);
    v25 = LODWORD(v24);
    if (v24 == 0.0)
      v25 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_37;
LABEL_55:
    v27 = 0;
    return v4 ^ *(_QWORD *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v21 ^ v23 ^ v25 ^ v27;
  }
LABEL_54:
  v25 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_55;
LABEL_37:
  v26 = *((float *)this + 9);
  v27 = LODWORD(v26);
  if (v26 == 0.0)
    v27 = 0;
  return v4 ^ *(_QWORD *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v21 ^ v23 ^ v25 ^ v27;
}

uint64_t CMMsl::CompassAlignment::CompassAlignment(uint64_t this)
{
  *(_QWORD *)this = &off_25135CE58;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135CE58;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::CompassAlignment::~CompassAlignment(CMMsl::CompassAlignment *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::CompassAlignment::CompassAlignment(uint64_t this, const CMMsl::CompassAlignment *a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)this = &off_25135CE58;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)this = &off_25135CE58;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::CompassAlignment::operator=(uint64_t a1, uint64_t a2, double a3)
{
  int v3;
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  uint64_t v12;

  if (a1 != a2)
  {
    v11[0] = &off_25135CE58;
    HIDWORD(v12) = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      BYTE4(v12) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        v3 = *(_DWORD *)(a2 + 16);
        BYTE4(v12) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = HIDWORD(v12);
    v8 = *(_QWORD *)(a1 + 8);
    v9 = *(_QWORD *)(a1 + 16);
    *(double *)(a1 + 8) = a3;
    *(_DWORD *)(a1 + 16) = v3;
    *(_DWORD *)(a1 + 20) = v7;
    v11[1] = v8;
    v12 = v9;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::CompassAlignment *a2, CMMsl::CompassAlignment *a3)
{
  int v3;
  double result;
  int v5;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  return result;
}

double CMMsl::CompassAlignment::CompassAlignment(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135CE58;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135CE58;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::CompassAlignment::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  if (a1 != a2)
  {
    v8[0] = &off_25135CE58;
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    v8[1] = v5;
    v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::CompassAlignment::formatText(CMMsl::CompassAlignment *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "compassJustAlignedToStableField");
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::CompassAlignment::readFrom(CMMsl::CompassAlignment *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_26;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v26 = 0;
          v27 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_47;
            }
            v28 = v20++;
            v29 = *(_BYTE *)(v21 + v28);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0)
              break;
            v26 += 7;
            v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
LABEL_46:
          v2 = v28 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)a2 + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 4) = v24;
      }
      else if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_26:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_26;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::CompassAlignment::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

BOOL CMMsl::CompassAlignment::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

uint64_t CMMsl::CompassAlignment::hash_value(CMMsl::CompassAlignment *this)
{
  double v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v2 = 0;
    return v2 ^ *(_QWORD *)&v1;
  }
  v1 = 0.0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((int *)this + 4);
  return v2 ^ *(_QWORD *)&v1;
}

uint64_t CMMsl::CompassCalibration::CompassCalibration(uint64_t this)
{
  *(_QWORD *)this = &off_25135CE90;
  *(_DWORD *)(this + 80) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135CE90;
  *(_DWORD *)(this + 80) = 0;
  return this;
}

void CMMsl::CompassCalibration::~CompassCalibration(CMMsl::CompassCalibration *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::CompassCalibration::CompassCalibration(CMMsl::CompassCalibration *this, const CMMsl::CompassCalibration *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  char v6;
  char v7;

  *(_QWORD *)this = &off_25135CE90;
  *((_DWORD *)this + 20) = 0;
  v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_DWORD *)this + 20) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_DWORD *)a2 + 20);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((_DWORD *)this + 20) = v3;
    *((_DWORD *)this + 4) = v4;
    v2 = *((_DWORD *)a2 + 20);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *((_DWORD *)this + 20) = v3;
    *((_DWORD *)this + 5) = v4;
    v2 = *((_DWORD *)a2 + 20);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x2000) == 0)
        goto LABEL_9;
      goto LABEL_25;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 6) = v4;
  v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x2000) == 0)
  {
LABEL_9:
    if ((v2 & 0x4000) == 0)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  LODWORD(v4) = *((_DWORD *)a2 + 16);
  v3 |= 0x2000u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 16) = v4;
  v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x4000) == 0)
  {
LABEL_10:
    if ((v2 & 0x8000) == 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  LODWORD(v4) = *((_DWORD *)a2 + 17);
  v3 |= 0x4000u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 17) = v4;
  v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x8000) == 0)
  {
LABEL_11:
    if ((v2 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  LODWORD(v4) = *((_DWORD *)a2 + 18);
  v3 |= 0x8000u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 18) = v4;
  v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x1000) == 0)
  {
LABEL_12:
    if ((v2 & 0x20) == 0)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  LODWORD(v4) = *((_DWORD *)a2 + 15);
  v3 |= 0x1000u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 15) = v4;
  v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x20) == 0)
  {
LABEL_13:
    if ((v2 & 0x40) == 0)
      goto LABEL_14;
    goto LABEL_30;
  }
LABEL_29:
  LODWORD(v4) = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 8) = v4;
  v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x40) == 0)
  {
LABEL_14:
    if ((v2 & 0x80) == 0)
      goto LABEL_15;
    goto LABEL_31;
  }
LABEL_30:
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 9) = v4;
  v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x80) == 0)
  {
LABEL_15:
    if ((v2 & 0x200) == 0)
      goto LABEL_16;
    goto LABEL_32;
  }
LABEL_31:
  LODWORD(v4) = *((_DWORD *)a2 + 10);
  v3 |= 0x80u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 10) = v4;
  v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x200) == 0)
  {
LABEL_16:
    if ((v2 & 0x400) == 0)
      goto LABEL_17;
    goto LABEL_33;
  }
LABEL_32:
  LODWORD(v4) = *((_DWORD *)a2 + 12);
  v3 |= 0x200u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 12) = v4;
  v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x400) == 0)
  {
LABEL_17:
    if ((v2 & 0x800) == 0)
      goto LABEL_18;
    goto LABEL_34;
  }
LABEL_33:
  LODWORD(v4) = *((_DWORD *)a2 + 13);
  v3 |= 0x400u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 13) = v4;
  v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x800) == 0)
  {
LABEL_18:
    if ((v2 & 0x10) == 0)
      goto LABEL_19;
    goto LABEL_35;
  }
LABEL_34:
  LODWORD(v4) = *((_DWORD *)a2 + 14);
  v3 |= 0x800u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 14) = v4;
  v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x10) == 0)
  {
LABEL_19:
    if ((v2 & 0x20000) == 0)
      goto LABEL_20;
    goto LABEL_36;
  }
LABEL_35:
  v5 = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 7) = v5;
  v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x20000) == 0)
  {
LABEL_20:
    if ((v2 & 0x10000) == 0)
      goto LABEL_21;
    goto LABEL_37;
  }
LABEL_36:
  v6 = *((_BYTE *)a2 + 77);
  v3 |= 0x20000u;
  *((_DWORD *)this + 20) = v3;
  *((_BYTE *)this + 77) = v6;
  v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x10000) == 0)
  {
LABEL_21:
    if ((v2 & 0x100) == 0)
      return *(float *)&v4;
    goto LABEL_38;
  }
LABEL_37:
  v7 = *((_BYTE *)a2 + 76);
  v3 |= 0x10000u;
  *((_DWORD *)this + 20) = v3;
  *((_BYTE *)this + 76) = v7;
  if ((*((_DWORD *)a2 + 20) & 0x100) == 0)
    return *(float *)&v4;
LABEL_38:
  LODWORD(v4) = *((_DWORD *)a2 + 11);
  *((_DWORD *)this + 20) = v3 | 0x100;
  *((_DWORD *)this + 11) = v4;
  return *(float *)&v4;
}

CMMsl *CMMsl::CompassCalibration::operator=(CMMsl *a1, const CMMsl::CompassCalibration *a2)
{
  CMMsl::CompassCalibration *v3;
  _BYTE v5[88];

  if (a1 != a2)
  {
    CMMsl::CompassCalibration::CompassCalibration((CMMsl::CompassCalibration *)v5, a2);
    CMMsl::swap(a1, (CMMsl::CompassCalibration *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::CompassCalibration *a2, CMMsl::CompassCalibration *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  float result;

  v3 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v4;
  LODWORD(v4) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v4;
  LODWORD(v4) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v4;
  LODWORD(v4) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  v5 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v5;
  LOBYTE(v5) = *((_BYTE *)this + 77);
  *((_BYTE *)this + 77) = *((_BYTE *)a2 + 77);
  *((_BYTE *)a2 + 77) = v5;
  LOBYTE(v5) = *((_BYTE *)this + 76);
  *((_BYTE *)this + 76) = *((_BYTE *)a2 + 76);
  *((_BYTE *)a2 + 76) = v5;
  result = *((float *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((float *)a2 + 11) = result;
  return result;
}

float CMMsl::CompassCalibration::CompassCalibration(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135CE90;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  result = *(float *)(a2 + 44);
  *(float *)(a1 + 44) = result;
  return result;
}

CMMsl *CMMsl::CompassCalibration::operator=(CMMsl *this, uint64_t a2, CMMsl::CompassCalibration *a3)
{
  uint64_t v4;
  __int128 v5;
  _QWORD v7[3];
  int v8;
  int v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  char v14;
  char v15;
  int v16;

  if (this != (CMMsl *)a2)
  {
    v7[0] = &off_25135CE90;
    v16 = *(_DWORD *)(a2 + 80);
    *(_DWORD *)(a2 + 80) = 0;
    v4 = *(_QWORD *)(a2 + 16);
    v7[1] = *(_QWORD *)(a2 + 8);
    v7[2] = v4;
    v8 = *(_DWORD *)(a2 + 24);
    v12 = *(_QWORD *)(a2 + 64);
    v13 = *(_DWORD *)(a2 + 72);
    v9 = *(_DWORD *)(a2 + 28);
    v15 = *(_BYTE *)(a2 + 77);
    v14 = *(_BYTE *)(a2 + 76);
    v5 = *(_OWORD *)(a2 + 32);
    v11 = *(_OWORD *)(a2 + 48);
    v10 = v5;
    CMMsl::swap(this, (CMMsl::CompassCalibration *)v7, a3);
    PB::Base::~Base((PB::Base *)v7);
  }
  return this;
}

uint64_t CMMsl::CompassCalibration::formatText(CMMsl::CompassCalibration *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x10000) != 0)
  {
    PB::TextFormatter::format(a2, "apAwake");
    v5 = *((_DWORD *)this + 20);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_23;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "biasX", *((float *)this + 4));
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "biasY", *((float *)this + 5));
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "biasZ", *((float *)this + 6));
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "calibrationLevel");
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "cost", *((float *)this + 8));
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "coverage", *((float *)this + 9));
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x20000) == 0)
      goto LABEL_10;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "earthDiffRatio", *((float *)this + 10));
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x20000) == 0)
  {
LABEL_10:
    if ((v5 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "hasConsistency");
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x100) == 0)
  {
LABEL_11:
    if ((v5 & 0x200) == 0)
      goto LABEL_12;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "planarity", *((float *)this + 11));
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x200) == 0)
  {
LABEL_12:
    if ((v5 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "poseX", *((float *)this + 12));
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x400) == 0)
  {
LABEL_13:
    if ((v5 & 0x800) == 0)
      goto LABEL_14;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "poseY", *((float *)this + 13));
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x800) == 0)
  {
LABEL_14:
    if ((v5 & 0x1000) == 0)
      goto LABEL_15;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "poseZ", *((float *)this + 14));
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x1000) == 0)
  {
LABEL_15:
    if ((v5 & 0x2000) == 0)
      goto LABEL_16;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "quality", *((float *)this + 15));
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x2000) == 0)
  {
LABEL_16:
    if ((v5 & 0x4000) == 0)
      goto LABEL_17;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "scaleX", *((float *)this + 16));
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x4000) == 0)
  {
LABEL_17:
    if ((v5 & 0x8000) == 0)
      goto LABEL_18;
LABEL_37:
    PB::TextFormatter::format(a2, "scaleZ", *((float *)this + 18));
    if ((*((_DWORD *)this + 20) & 1) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_19;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "scaleY", *((float *)this + 17));
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x8000) != 0)
    goto LABEL_37;
LABEL_18:
  if ((v5 & 1) != 0)
LABEL_19:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::CompassCalibration::readFrom(CMMsl::CompassCalibration *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  int v26;
  BOOL v27;
  int v28;
  BOOL v29;
  char v30;
  unsigned int v31;
  unint64_t v32;
  char v33;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_98;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 20) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_78;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        v2 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_92;
      case 2u:
        *((_DWORD *)this + 20) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_78;
        *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_91;
      case 3u:
        *((_DWORD *)this + 20) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_78;
        *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_91;
      case 4u:
        *((_DWORD *)this + 20) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_78;
        *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_91;
      case 5u:
        *((_DWORD *)this + 20) |= 0x2000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_78;
        *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_91;
      case 6u:
        *((_DWORD *)this + 20) |= 0x4000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_78;
        *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_91;
      case 7u:
        *((_DWORD *)this + 20) |= 0x8000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_78;
        *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_91;
      case 8u:
        *((_DWORD *)this + 20) |= 0x1000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_78;
        *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_91;
      case 9u:
        *((_DWORD *)this + 20) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_78;
        *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_91;
      case 0xAu:
        *((_DWORD *)this + 20) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_78;
        *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_91;
      case 0xBu:
        *((_DWORD *)this + 20) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_78;
        *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_91;
      case 0xCu:
        *((_DWORD *)this + 20) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_78;
        *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_91;
      case 0xDu:
        *((_DWORD *)this + 20) |= 0x400u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_78;
        *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_91;
      case 0xEu:
        *((_DWORD *)this + 20) |= 0x800u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_78;
        *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_91;
      case 0xFu:
        *((_DWORD *)this + 20) |= 0x10u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v30 = 0;
          v31 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_97;
            }
            v32 = v20++;
            v33 = *(_BYTE *)(v21 + v32);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0)
              break;
            v30 += 7;
            v14 = v31++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_96:
              v2 = v32 + 1;
              goto LABEL_97;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
          goto LABEL_96;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_97;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_97:
        *((_DWORD *)this + 7) = v24;
        break;
      case 0x10u:
        *((_DWORD *)this + 20) |= 0x20000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v27 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v26 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v27 = v26 != 0;
        }
        *((_BYTE *)this + 77) = v27;
        break;
      case 0x11u:
        *((_DWORD *)this + 20) |= 0x10000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v29 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v28 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v29 = v28 != 0;
        }
        *((_BYTE *)this + 76) = v29;
        break;
      case 0x12u:
        *((_DWORD *)this + 20) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_91:
          v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_92:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_78:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_98:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::CompassCalibration::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 80);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_DWORD *)(v3 + 80);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_22;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x2000) == 0)
      goto LABEL_6;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x2000) == 0)
  {
LABEL_6:
    if ((v4 & 0x4000) == 0)
      goto LABEL_7;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x4000) == 0)
  {
LABEL_7:
    if ((v4 & 0x8000) == 0)
      goto LABEL_8;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 68));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x8000) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0)
      goto LABEL_9;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(float *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(float *)(v3 + 60));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x40) == 0)
  {
LABEL_11:
    if ((v4 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x80) == 0)
  {
LABEL_12:
    if ((v4 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x200) == 0)
  {
LABEL_13:
    if ((v4 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x400) == 0)
  {
LABEL_14:
    if ((v4 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x800) == 0)
  {
LABEL_15:
    if ((v4 & 0x10) == 0)
      goto LABEL_16;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x10) == 0)
  {
LABEL_16:
    if ((v4 & 0x20000) == 0)
      goto LABEL_17;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x20000) == 0)
  {
LABEL_17:
    if ((v4 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x10000) == 0)
  {
LABEL_18:
    if ((v4 & 0x100) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 44));
  }
LABEL_36:
  this = PB::Writer::write(a2);
  if ((*(_DWORD *)(v3 + 80) & 0x100) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 44));
  return this;
}

BOOL CMMsl::CompassCalibration::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 80);
  v3 = *(_DWORD *)(a2 + 80);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(unsigned __int8 *)(a1 + 77) != *(unsigned __int8 *)(a2 + 77))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(unsigned __int8 *)(a1 + 76) != *(unsigned __int8 *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  v4 = (*(_DWORD *)(a2 + 80) & 0x100) == 0;
  if ((v2 & 0x100) != 0)
    return (v3 & 0x100) != 0 && *(float *)(a1 + 44) == *(float *)(a2 + 44);
  return v4;
}

uint64_t CMMsl::CompassCalibration::hash_value(CMMsl::CompassCalibration *this)
{
  int v1;
  double v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  uint64_t v33;

  v1 = *((_DWORD *)this + 20);
  if ((v1 & 1) == 0)
  {
    v2 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_3;
LABEL_51:
    v4 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_6;
LABEL_52:
    v6 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_9;
LABEL_53:
    v8 = 0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_12;
LABEL_54:
    v10 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_15;
LABEL_55:
    v12 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_18;
LABEL_56:
    v14 = 0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_21;
LABEL_57:
    v16 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_24;
LABEL_58:
    v18 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_27;
LABEL_59:
    v20 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_30;
LABEL_60:
    v22 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_33;
LABEL_61:
    v24 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_36;
LABEL_62:
    v26 = 0;
    if ((v1 & 0x800) != 0)
      goto LABEL_39;
LABEL_63:
    v28 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_42;
    goto LABEL_64;
  }
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_51;
LABEL_3:
  v3 = *((float *)this + 4);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  if ((v1 & 4) == 0)
    goto LABEL_52;
LABEL_6:
  v5 = *((float *)this + 5);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_53;
LABEL_9:
  v7 = *((float *)this + 6);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_54;
LABEL_12:
  v9 = *((float *)this + 16);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_55;
LABEL_15:
  v11 = *((float *)this + 17);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((v1 & 0x8000) == 0)
    goto LABEL_56;
LABEL_18:
  v13 = *((float *)this + 18);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((v1 & 0x1000) == 0)
    goto LABEL_57;
LABEL_21:
  v15 = *((float *)this + 15);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_58;
LABEL_24:
  v17 = *((float *)this + 8);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_59;
LABEL_27:
  v19 = *((float *)this + 9);
  v20 = LODWORD(v19);
  if (v19 == 0.0)
    v20 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_60;
LABEL_30:
  v21 = *((float *)this + 10);
  v22 = LODWORD(v21);
  if (v21 == 0.0)
    v22 = 0;
  if ((v1 & 0x200) == 0)
    goto LABEL_61;
LABEL_33:
  v23 = *((float *)this + 12);
  v24 = LODWORD(v23);
  if (v23 == 0.0)
    v24 = 0;
  if ((v1 & 0x400) == 0)
    goto LABEL_62;
LABEL_36:
  v25 = *((float *)this + 13);
  v26 = LODWORD(v25);
  if (v25 == 0.0)
    v26 = 0;
  if ((v1 & 0x800) == 0)
    goto LABEL_63;
LABEL_39:
  v27 = *((float *)this + 14);
  v28 = LODWORD(v27);
  if (v27 == 0.0)
    v28 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_42:
    v29 = *((int *)this + 7);
    if ((v1 & 0x20000) != 0)
      goto LABEL_43;
    goto LABEL_65;
  }
LABEL_64:
  v29 = 0;
  if ((v1 & 0x20000) != 0)
  {
LABEL_43:
    v30 = *((unsigned __int8 *)this + 77);
    if ((v1 & 0x10000) != 0)
      goto LABEL_44;
    goto LABEL_66;
  }
LABEL_65:
  v30 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_44:
    v31 = *((unsigned __int8 *)this + 76);
    if ((v1 & 0x100) != 0)
      goto LABEL_45;
LABEL_67:
    v33 = 0;
    return v4 ^ *(_QWORD *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v29 ^ v30 ^ v31 ^ v33;
  }
LABEL_66:
  v31 = 0;
  if ((v1 & 0x100) == 0)
    goto LABEL_67;
LABEL_45:
  v32 = *((float *)this + 11);
  v33 = LODWORD(v32);
  if (v32 == 0.0)
    v33 = 0;
  return v4 ^ *(_QWORD *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v29 ^ v30 ^ v31 ^ v33;
}

uint64_t CMMsl::CompassCalibrationAttempt::CompassCalibrationAttempt(uint64_t this)
{
  *(_QWORD *)this = &off_25135CEC8;
  *(_DWORD *)(this + 80) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135CEC8;
  *(_DWORD *)(this + 80) = 0;
  return this;
}

void CMMsl::CompassCalibrationAttempt::~CompassCalibrationAttempt(CMMsl::CompassCalibrationAttempt *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::CompassCalibrationAttempt::CompassCalibrationAttempt(CMMsl::CompassCalibrationAttempt *this, const CMMsl::CompassCalibrationAttempt *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  char v5;
  int v6;

  *(_QWORD *)this = &off_25135CEC8;
  *((_DWORD *)this + 20) = 0;
  v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_DWORD *)this + 20) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_DWORD *)a2 + 20);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((_DWORD *)this + 20) = v3;
    *((_DWORD *)this + 4) = v4;
    v2 = *((_DWORD *)a2 + 20);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *((_DWORD *)this + 20) = v3;
    *((_DWORD *)this + 5) = v4;
    v2 = *((_DWORD *)a2 + 20);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x800) == 0)
        goto LABEL_9;
      goto LABEL_24;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 6) = v4;
  v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x800) == 0)
  {
LABEL_9:
    if ((v2 & 0x1000) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  LODWORD(v4) = *((_DWORD *)a2 + 14);
  v3 |= 0x800u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 14) = v4;
  v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x1000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  LODWORD(v4) = *((_DWORD *)a2 + 15);
  v3 |= 0x1000u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 15) = v4;
  v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x2000) == 0)
  {
LABEL_11:
    if ((v2 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  LODWORD(v4) = *((_DWORD *)a2 + 16);
  v3 |= 0x2000u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 16) = v4;
  v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x400) == 0)
  {
LABEL_12:
    if ((v2 & 0x10) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  LODWORD(v4) = *((_DWORD *)a2 + 13);
  v3 |= 0x400u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 13) = v4;
  v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x10) == 0)
  {
LABEL_13:
    if ((v2 & 0x8000) == 0)
      goto LABEL_14;
    goto LABEL_29;
  }
LABEL_28:
  LODWORD(v4) = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 7) = v4;
  v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x8000) == 0)
  {
LABEL_14:
    if ((v2 & 0x10000) == 0)
      goto LABEL_15;
    goto LABEL_30;
  }
LABEL_29:
  LODWORD(v4) = *((_DWORD *)a2 + 18);
  v3 |= 0x8000u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 18) = v4;
  v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x10000) == 0)
  {
LABEL_15:
    if ((v2 & 0x20) == 0)
      goto LABEL_16;
    goto LABEL_31;
  }
LABEL_30:
  v5 = *((_BYTE *)a2 + 76);
  v3 |= 0x10000u;
  *((_DWORD *)this + 20) = v3;
  *((_BYTE *)this + 76) = v5;
  v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x20) == 0)
  {
LABEL_16:
    if ((v2 & 0x40) == 0)
      goto LABEL_17;
    goto LABEL_32;
  }
LABEL_31:
  LODWORD(v4) = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 8) = v4;
  v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x40) == 0)
  {
LABEL_17:
    if ((v2 & 0x80) == 0)
      goto LABEL_18;
    goto LABEL_33;
  }
LABEL_32:
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 9) = v4;
  v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x80) == 0)
  {
LABEL_18:
    if ((v2 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_34;
  }
LABEL_33:
  LODWORD(v4) = *((_DWORD *)a2 + 10);
  v3 |= 0x80u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 10) = v4;
  v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x4000) == 0)
  {
LABEL_19:
    if ((v2 & 0x100) == 0)
      goto LABEL_20;
    goto LABEL_35;
  }
LABEL_34:
  LODWORD(v4) = *((_DWORD *)a2 + 17);
  v3 |= 0x4000u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 17) = v4;
  v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x100) == 0)
  {
LABEL_20:
    if ((v2 & 0x200) == 0)
      return *(float *)&v4;
    goto LABEL_36;
  }
LABEL_35:
  v6 = *((_DWORD *)a2 + 11);
  v3 |= 0x100u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 11) = v6;
  if ((*((_DWORD *)a2 + 20) & 0x200) == 0)
    return *(float *)&v4;
LABEL_36:
  LODWORD(v4) = *((_DWORD *)a2 + 12);
  *((_DWORD *)this + 20) = v3 | 0x200;
  *((_DWORD *)this + 12) = v4;
  return *(float *)&v4;
}

CMMsl *CMMsl::CompassCalibrationAttempt::operator=(CMMsl *a1, const CMMsl::CompassCalibrationAttempt *a2)
{
  CMMsl::CompassCalibrationAttempt *v3;
  _BYTE v5[88];

  if (a1 != a2)
  {
    CMMsl::CompassCalibrationAttempt::CompassCalibrationAttempt((CMMsl::CompassCalibrationAttempt *)v5, a2);
    CMMsl::swap(a1, (CMMsl::CompassCalibrationAttempt *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::CompassCalibrationAttempt *a2, CMMsl::CompassCalibrationAttempt *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  float result;

  v3 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  LODWORD(v4) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  LODWORD(v4) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v4;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v4;
  LOBYTE(v3) = *((_BYTE *)this + 76);
  *((_BYTE *)this + 76) = *((_BYTE *)a2 + 76);
  *((_BYTE *)a2 + 76) = v3;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v4;
  v5 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v5;
  result = *((float *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((float *)a2 + 12) = result;
  return result;
}

float CMMsl::CompassCalibrationAttempt::CompassCalibrationAttempt(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135CEC8;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  result = *(float *)(a2 + 48);
  *(float *)(a1 + 48) = result;
  return result;
}

CMMsl *CMMsl::CompassCalibrationAttempt::operator=(CMMsl *this, uint64_t a2, CMMsl::CompassCalibrationAttempt *a3)
{
  _QWORD v5[2];
  __int128 v6;
  uint64_t v7;
  int v8;
  int v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  char v13;
  int v14;

  if (this != (CMMsl *)a2)
  {
    v5[0] = &off_25135CEC8;
    v14 = *(_DWORD *)(a2 + 80);
    *(_DWORD *)(a2 + 80) = 0;
    v5[1] = *(_QWORD *)(a2 + 8);
    v6 = *(_OWORD *)(a2 + 16);
    v12 = *(_DWORD *)(a2 + 72);
    v13 = *(_BYTE *)(a2 + 76);
    v7 = *(_QWORD *)(a2 + 32);
    v8 = *(_DWORD *)(a2 + 40);
    v11 = *(_QWORD *)(a2 + 64);
    v9 = *(_DWORD *)(a2 + 44);
    v10 = *(_OWORD *)(a2 + 48);
    CMMsl::swap(this, (CMMsl::CompassCalibrationAttempt *)v5, a3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return this;
}

uint64_t CMMsl::CompassCalibrationAttempt::formatText(CMMsl::CompassCalibrationAttempt *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "biasX", *((float *)this + 4));
    v5 = *((_DWORD *)this + 20);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_22;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "biasY", *((float *)this + 5));
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "biasZ", *((float *)this + 6));
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "cost", *((float *)this + 7));
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "coverage2d", *((float *)this + 8));
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "coverage3d", *((float *)this + 9));
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x10000) == 0)
      goto LABEL_9;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "earthDiffRatio", *((float *)this + 10));
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x10000) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "isPlanar");
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "numberOfSamples");
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "planarity", *((float *)this + 12));
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "quality", *((float *)this + 13));
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "scaleX", *((float *)this + 14));
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "scaleY", *((float *)this + 15));
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "scaleZ", *((float *)this + 16));
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 1) == 0)
      goto LABEL_17;
LABEL_35:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    if ((*((_DWORD *)this + 20) & 0x8000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_18;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "timeSpan", *((float *)this + 17));
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 1) != 0)
    goto LABEL_35;
LABEL_17:
  if ((v5 & 0x8000) != 0)
LABEL_18:
    PB::TextFormatter::format(a2, "unitDistance", *((float *)this + 18));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::CompassCalibrationAttempt::readFrom(CMMsl::CompassCalibrationAttempt *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  char v27;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_94;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 20) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_76;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        v2 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_88;
      case 2u:
        *((_DWORD *)this + 20) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_76;
        *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_87;
      case 3u:
        *((_DWORD *)this + 20) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_76;
        *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_87;
      case 4u:
        *((_DWORD *)this + 20) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_76;
        *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_87;
      case 5u:
        *((_DWORD *)this + 20) |= 0x800u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_76;
        *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_87;
      case 6u:
        *((_DWORD *)this + 20) |= 0x1000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_76;
        *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_87;
      case 7u:
        *((_DWORD *)this + 20) |= 0x2000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_76;
        *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_87;
      case 8u:
        *((_DWORD *)this + 20) |= 0x400u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_76;
        *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_87;
      case 9u:
        *((_DWORD *)this + 20) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_76;
        *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_87;
      case 0xAu:
        *((_DWORD *)this + 20) |= 0x8000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_76;
        *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_87;
      case 0xBu:
        *((_DWORD *)this + 20) |= 0x10000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v21 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v21 = v20 != 0;
        }
        *((_BYTE *)this + 76) = v21;
        break;
      case 0xCu:
        *((_DWORD *)this + 20) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_76;
        *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_87;
      case 0xDu:
        *((_DWORD *)this + 20) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_76;
        *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_87;
      case 0xEu:
        *((_DWORD *)this + 20) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_76;
        *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_87;
      case 0xFu:
        *((_DWORD *)this + 20) |= 0x4000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_76;
        *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_87;
      case 0x10u:
        *((_DWORD *)this + 20) |= 0x100u;
        v22 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v23 = *(_QWORD *)a2;
        if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v2)
        {
          v28 = 0;
          v29 = 0;
          v26 = 0;
          if (v2 <= v22)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v22)
            {
              LODWORD(v26) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_93;
            }
            v30 = v22++;
            v31 = *(_BYTE *)(v23 + v30);
            *((_QWORD *)a2 + 1) = v22;
            v26 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v26) = 0;
LABEL_92:
              v2 = v30 + 1;
              goto LABEL_93;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v26) = 0;
          goto LABEL_92;
        }
        v24 = 0;
        v25 = 0;
        v26 = 0;
        do
        {
          v2 = v22 + 1;
          *((_QWORD *)a2 + 1) = v22 + 1;
          v27 = *(_BYTE *)(v23 + v22);
          v26 |= (unint64_t)(v27 & 0x7F) << v24;
          if ((v27 & 0x80) == 0)
            goto LABEL_93;
          v24 += 7;
          v22 = v2;
          v14 = v25++ > 8;
        }
        while (!v14);
        LODWORD(v26) = 0;
LABEL_93:
        *((_DWORD *)this + 11) = v26;
        break;
      case 0x11u:
        *((_DWORD *)this + 20) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_87:
          v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_88:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_76:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_94:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::CompassCalibrationAttempt::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 80);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_DWORD *)(v3 + 80);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_21;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0)
      goto LABEL_6;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x1000) == 0)
      goto LABEL_7;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x1000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0)
      goto LABEL_8;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 60));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x400) == 0)
      goto LABEL_9;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x400) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 0x8000) == 0)
      goto LABEL_11;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x8000) == 0)
  {
LABEL_11:
    if ((v4 & 0x10000) == 0)
      goto LABEL_12;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(float *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x10000) == 0)
  {
LABEL_12:
    if ((v4 & 0x20) == 0)
      goto LABEL_13;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x20) == 0)
  {
LABEL_13:
    if ((v4 & 0x40) == 0)
      goto LABEL_14;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x40) == 0)
  {
LABEL_14:
    if ((v4 & 0x80) == 0)
      goto LABEL_15;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x80) == 0)
  {
LABEL_15:
    if ((v4 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x4000) == 0)
  {
LABEL_16:
    if ((v4 & 0x100) == 0)
      goto LABEL_17;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 68));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x100) == 0)
  {
LABEL_17:
    if ((v4 & 0x200) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 48));
  }
LABEL_34:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_DWORD *)(v3 + 80) & 0x200) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 48));
  return this;
}

BOOL CMMsl::CompassCalibrationAttempt::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 80);
  v3 = *(_DWORD *)(a2 + 80);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(unsigned __int8 *)(a1 + 76) != *(unsigned __int8 *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  v4 = (*(_DWORD *)(a2 + 80) & 0x200) == 0;
  if ((v2 & 0x200) != 0)
    return (v3 & 0x200) != 0 && *(float *)(a1 + 48) == *(float *)(a2 + 48);
  return v4;
}

uint64_t CMMsl::CompassCalibrationAttempt::hash_value(CMMsl::CompassCalibrationAttempt *this)
{
  int v1;
  double v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  uint64_t v32;

  v1 = *((_DWORD *)this + 20);
  if ((v1 & 1) == 0)
  {
    v2 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_3;
LABEL_50:
    v4 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_6;
LABEL_51:
    v6 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_9;
LABEL_52:
    v8 = 0;
    if ((v1 & 0x800) != 0)
      goto LABEL_12;
LABEL_53:
    v10 = 0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_15;
LABEL_54:
    v12 = 0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_18;
LABEL_55:
    v14 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_21;
LABEL_56:
    v16 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_24;
LABEL_57:
    v18 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_27;
LABEL_58:
    v20 = 0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_30;
    goto LABEL_59;
  }
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_50;
LABEL_3:
  v3 = *((float *)this + 4);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  if ((v1 & 4) == 0)
    goto LABEL_51;
LABEL_6:
  v5 = *((float *)this + 5);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_52;
LABEL_9:
  v7 = *((float *)this + 6);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 0x800) == 0)
    goto LABEL_53;
LABEL_12:
  v9 = *((float *)this + 14);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((v1 & 0x1000) == 0)
    goto LABEL_54;
LABEL_15:
  v11 = *((float *)this + 15);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_55;
LABEL_18:
  v13 = *((float *)this + 16);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((v1 & 0x400) == 0)
    goto LABEL_56;
LABEL_21:
  v15 = *((float *)this + 13);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_57;
LABEL_24:
  v17 = *((float *)this + 7);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  if ((v1 & 0x8000) == 0)
    goto LABEL_58;
LABEL_27:
  v19 = *((float *)this + 18);
  v20 = LODWORD(v19);
  if (v19 == 0.0)
    v20 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_30:
    v21 = *((unsigned __int8 *)this + 76);
    if ((v1 & 0x20) != 0)
      goto LABEL_31;
LABEL_60:
    v23 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_34;
LABEL_61:
    v25 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_37;
LABEL_62:
    v27 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_40;
LABEL_63:
    v29 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_43;
    goto LABEL_64;
  }
LABEL_59:
  v21 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_60;
LABEL_31:
  v22 = *((float *)this + 8);
  v23 = LODWORD(v22);
  if (v22 == 0.0)
    v23 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_61;
LABEL_34:
  v24 = *((float *)this + 9);
  v25 = LODWORD(v24);
  if (v24 == 0.0)
    v25 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_62;
LABEL_37:
  v26 = *((float *)this + 10);
  v27 = LODWORD(v26);
  if (v26 == 0.0)
    v27 = 0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_63;
LABEL_40:
  v28 = *((float *)this + 17);
  v29 = LODWORD(v28);
  if (v28 == 0.0)
    v29 = 0;
  if ((v1 & 0x100) != 0)
  {
LABEL_43:
    v30 = *((unsigned int *)this + 11);
    if ((v1 & 0x200) != 0)
      goto LABEL_44;
LABEL_65:
    v32 = 0;
    return v4 ^ *(_QWORD *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v21 ^ v23 ^ v25 ^ v27 ^ v29 ^ v30 ^ v32;
  }
LABEL_64:
  v30 = 0;
  if ((v1 & 0x200) == 0)
    goto LABEL_65;
LABEL_44:
  v31 = *((float *)this + 12);
  v32 = LODWORD(v31);
  if (v31 == 0.0)
    v32 = 0;
  return v4 ^ *(_QWORD *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v21 ^ v23 ^ v25 ^ v27 ^ v29 ^ v30 ^ v32;
}

double CMMsl::CompassConstraints::CompassConstraints(CMMsl::CompassConstraints *this)
{
  double result;

  *(_QWORD *)this = &off_25135CF00;
  *((_DWORD *)this + 31) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_25135CF00;
  *((_DWORD *)this + 31) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

void CMMsl::CompassConstraints::~CompassConstraints(CMMsl::CompassConstraints *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_25135CF00;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::CompassConstraints::~CompassConstraints(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::CompassConstraints *CMMsl::CompassConstraints::CompassConstraints(CMMsl::CompassConstraints *this, const CMMsl::CompassConstraints *a2)
{
  _QWORD *v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  char v21;
  char v22;
  int v23;
  int v24;
  int v25;

  *(_QWORD *)this = &off_25135CF00;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (_QWORD *)((char *)this + 8);
  *((_DWORD *)this + 31) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  v5 = *((_DWORD *)a2 + 31);
  if ((v5 & 1) != 0)
  {
    v7 = *((_QWORD *)a2 + 7);
    v6 = 1;
    *((_DWORD *)this + 31) = 1;
    *((_QWORD *)this + 7) = v7;
    v5 = *((_DWORD *)a2 + 31);
    if ((v5 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((v5 & 0x80) != 0)
  {
LABEL_5:
    v8 = *((_DWORD *)a2 + 22);
    v6 |= 0x80u;
    *((_DWORD *)this + 31) = v6;
    *((_DWORD *)this + 22) = v8;
    v5 = *((_DWORD *)a2 + 31);
  }
LABEL_6:
  if ((v5 & 0x4000) != 0)
  {
    v13 = *((_DWORD *)a2 + 29);
    v6 |= 0x4000u;
    *((_DWORD *)this + 31) = v6;
    *((_DWORD *)this + 29) = v13;
    v5 = *((_DWORD *)a2 + 31);
    if ((v5 & 4) == 0)
    {
LABEL_8:
      if ((v5 & 0x20) == 0)
        goto LABEL_10;
      goto LABEL_9;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_8;
  }
  v14 = *((_DWORD *)a2 + 17);
  v6 |= 4u;
  *((_DWORD *)this + 31) = v6;
  *((_DWORD *)this + 17) = v14;
  if ((*((_DWORD *)a2 + 31) & 0x20) != 0)
  {
LABEL_9:
    v9 = *((_DWORD *)a2 + 20);
    *((_DWORD *)this + 31) = v6 | 0x20;
    *((_DWORD *)this + 20) = v9;
  }
LABEL_10:
  if (this != a2)
  {
    sub_242911380(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
    sub_242911380((_QWORD *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
  }
  v10 = *((_DWORD *)a2 + 31);
  if ((v10 & 0x800) != 0)
  {
    v15 = *((_DWORD *)a2 + 26);
    *((_DWORD *)this + 31) |= 0x800u;
    *((_DWORD *)this + 26) = v15;
    v10 = *((_DWORD *)a2 + 31);
    if ((v10 & 0x100) == 0)
    {
LABEL_14:
      if ((v10 & 2) == 0)
        goto LABEL_15;
      goto LABEL_31;
    }
  }
  else if ((v10 & 0x100) == 0)
  {
    goto LABEL_14;
  }
  v16 = *((_DWORD *)a2 + 23);
  *((_DWORD *)this + 31) |= 0x100u;
  *((_DWORD *)this + 23) = v16;
  v10 = *((_DWORD *)a2 + 31);
  if ((v10 & 2) == 0)
  {
LABEL_15:
    if ((v10 & 0x10) == 0)
      goto LABEL_16;
    goto LABEL_32;
  }
LABEL_31:
  v17 = *((_DWORD *)a2 + 16);
  *((_DWORD *)this + 31) |= 2u;
  *((_DWORD *)this + 16) = v17;
  v10 = *((_DWORD *)a2 + 31);
  if ((v10 & 0x10) == 0)
  {
LABEL_16:
    if ((v10 & 8) == 0)
      goto LABEL_17;
    goto LABEL_33;
  }
LABEL_32:
  v18 = *((_DWORD *)a2 + 19);
  *((_DWORD *)this + 31) |= 0x10u;
  *((_DWORD *)this + 19) = v18;
  v10 = *((_DWORD *)a2 + 31);
  if ((v10 & 8) == 0)
  {
LABEL_17:
    if ((v10 & 0x400) == 0)
      goto LABEL_18;
    goto LABEL_34;
  }
LABEL_33:
  v19 = *((_DWORD *)a2 + 18);
  *((_DWORD *)this + 31) |= 8u;
  *((_DWORD *)this + 18) = v19;
  v10 = *((_DWORD *)a2 + 31);
  if ((v10 & 0x400) == 0)
  {
LABEL_18:
    if ((v10 & 0x10000) == 0)
      goto LABEL_19;
    goto LABEL_35;
  }
LABEL_34:
  v20 = *((_DWORD *)a2 + 25);
  *((_DWORD *)this + 31) |= 0x400u;
  *((_DWORD *)this + 25) = v20;
  v10 = *((_DWORD *)a2 + 31);
  if ((v10 & 0x10000) == 0)
  {
LABEL_19:
    if ((v10 & 0x8000) == 0)
      goto LABEL_20;
    goto LABEL_36;
  }
LABEL_35:
  v21 = *((_BYTE *)a2 + 121);
  *((_DWORD *)this + 31) |= 0x10000u;
  *((_BYTE *)this + 121) = v21;
  v10 = *((_DWORD *)a2 + 31);
  if ((v10 & 0x8000) == 0)
  {
LABEL_20:
    if ((v10 & 0x200) == 0)
      goto LABEL_21;
    goto LABEL_37;
  }
LABEL_36:
  v22 = *((_BYTE *)a2 + 120);
  *((_DWORD *)this + 31) |= 0x8000u;
  *((_BYTE *)this + 120) = v22;
  v10 = *((_DWORD *)a2 + 31);
  if ((v10 & 0x200) == 0)
  {
LABEL_21:
    if ((v10 & 0x1000) == 0)
      goto LABEL_22;
    goto LABEL_38;
  }
LABEL_37:
  v23 = *((_DWORD *)a2 + 24);
  *((_DWORD *)this + 31) |= 0x200u;
  *((_DWORD *)this + 24) = v23;
  v10 = *((_DWORD *)a2 + 31);
  if ((v10 & 0x1000) == 0)
  {
LABEL_22:
    if ((v10 & 0x40) == 0)
      goto LABEL_23;
LABEL_39:
    v25 = *((_DWORD *)a2 + 21);
    *((_DWORD *)this + 31) |= 0x40u;
    *((_DWORD *)this + 21) = v25;
    if ((*((_DWORD *)a2 + 31) & 0x2000) == 0)
      return this;
    goto LABEL_24;
  }
LABEL_38:
  v24 = *((_DWORD *)a2 + 27);
  *((_DWORD *)this + 31) |= 0x1000u;
  *((_DWORD *)this + 27) = v24;
  v10 = *((_DWORD *)a2 + 31);
  if ((v10 & 0x40) != 0)
    goto LABEL_39;
LABEL_23:
  if ((v10 & 0x2000) != 0)
  {
LABEL_24:
    v11 = *((_DWORD *)a2 + 28);
    *((_DWORD *)this + 31) |= 0x2000u;
    *((_DWORD *)this + 28) = v11;
  }
  return this;
}

CMMsl *CMMsl::CompassConstraints::operator=(CMMsl *a1, const CMMsl::CompassConstraints *a2)
{
  CMMsl::CompassConstraints *v3;
  _BYTE v5[128];

  if (a1 != a2)
  {
    CMMsl::CompassConstraints::CompassConstraints((CMMsl::CompassConstraints *)v5, a2);
    CMMsl::swap(a1, (CMMsl::CompassConstraints *)v5, v3);
    CMMsl::CompassConstraints::~CompassConstraints((CMMsl::CompassConstraints *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::CompassConstraints *a2, CMMsl::CompassConstraints *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float result;

  v3 = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v3;
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v4;
  LODWORD(v4) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v4;
  LODWORD(v4) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v4;
  LODWORD(v4) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  v8 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v8;
  v9 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v9;
  v10 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v10;
  LODWORD(v4) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v4;
  LODWORD(v4) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v4;
  LODWORD(v4) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v4;
  LODWORD(v10) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v10;
  LODWORD(v10) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v10;
  LODWORD(v4) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v4;
  LOBYTE(v10) = *((_BYTE *)this + 121);
  *((_BYTE *)this + 121) = *((_BYTE *)a2 + 121);
  *((_BYTE *)a2 + 121) = v10;
  LOBYTE(v10) = *((_BYTE *)this + 120);
  *((_BYTE *)this + 120) = *((_BYTE *)a2 + 120);
  *((_BYTE *)a2 + 120) = v10;
  LODWORD(v4) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v4;
  LODWORD(v4) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v4;
  LODWORD(v4) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v4;
  result = *((float *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((float *)a2 + 28) = result;
  return result;
}

uint64_t CMMsl::CompassConstraints::CompassConstraints(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = &off_25135CF00;
  v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a2 + 124) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  sub_242911330(v4, (__n128 *)(a2 + 32));
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_BYTE *)(a1 + 121) = *(_BYTE *)(a2 + 121);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  return a1;
}

CMMsl *CMMsl::CompassConstraints::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::CompassConstraints *v3;
  _BYTE v5[128];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::CompassConstraints::CompassConstraints((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::CompassConstraints *)v5, v3);
    CMMsl::CompassConstraints::~CompassConstraints((CMMsl::CompassConstraints *)v5);
  }
  return a1;
}

uint64_t CMMsl::CompassConstraints::formatText(CMMsl::CompassConstraints *this, PB::TextFormatter *a2, const char *a3)
{
  float *v5;
  float *v6;
  float v7;
  int v8;
  float *v9;
  float *v10;
  float v11;
  int v12;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 124) & 2) != 0)
    PB::TextFormatter::format(a2, "attitudeDelta", *((float *)this + 16));
  v5 = (float *)*((_QWORD *)this + 1);
  v6 = (float *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "calibratedField", v7);
  }
  v8 = *((_DWORD *)this + 31);
  if ((v8 & 0x8000) != 0)
  {
    PB::TextFormatter::format(a2, "doCorrection");
    v8 = *((_DWORD *)this + 31);
    if ((v8 & 4) == 0)
    {
LABEL_7:
      if ((v8 & 8) == 0)
        goto LABEL_8;
      goto LABEL_28;
    }
  }
  else if ((v8 & 4) == 0)
  {
    goto LABEL_7;
  }
  PB::TextFormatter::format(a2, "horizontal", *((float *)this + 17));
  v8 = *((_DWORD *)this + 31);
  if ((v8 & 8) == 0)
  {
LABEL_8:
    if ((v8 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "isOnSphere");
  v8 = *((_DWORD *)this + 31);
  if ((v8 & 0x10) == 0)
  {
LABEL_9:
    if ((v8 & 0x10000) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "isRotating");
  if ((*((_DWORD *)this + 31) & 0x10000) != 0)
LABEL_10:
    PB::TextFormatter::format(a2, "isTraversingSphere");
LABEL_11:
  v9 = (float *)*((_QWORD *)this + 4);
  v10 = (float *)*((_QWORD *)this + 5);
  while (v9 != v10)
  {
    v11 = *v9++;
    PB::TextFormatter::format(a2, "predictedField", v11);
  }
  v12 = *((_DWORD *)this + 31);
  if ((v12 & 0x20) != 0)
  {
    PB::TextFormatter::format(a2, "scale", *((float *)this + 20));
    v12 = *((_DWORD *)this + 31);
    if ((v12 & 0x40) == 0)
    {
LABEL_15:
      if ((v12 & 1) == 0)
        goto LABEL_16;
      goto LABEL_33;
    }
  }
  else if ((v12 & 0x40) == 0)
  {
    goto LABEL_15;
  }
  PB::TextFormatter::format(a2, "timerUnitDistanceThreshold", *((float *)this + 21));
  v12 = *((_DWORD *)this + 31);
  if ((v12 & 1) == 0)
  {
LABEL_16:
    if ((v12 & 0x80) == 0)
      goto LABEL_17;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 7));
  v12 = *((_DWORD *)this + 31);
  if ((v12 & 0x80) == 0)
  {
LABEL_17:
    if ((v12 & 0x100) == 0)
      goto LABEL_18;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "unitDistance", *((float *)this + 22));
  v12 = *((_DWORD *)this + 31);
  if ((v12 & 0x100) == 0)
  {
LABEL_18:
    if ((v12 & 0x200) == 0)
      goto LABEL_19;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "unitDistanceLargeBufferDelta", *((float *)this + 23));
  v12 = *((_DWORD *)this + 31);
  if ((v12 & 0x200) == 0)
  {
LABEL_19:
    if ((v12 & 0x400) == 0)
      goto LABEL_20;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "unitDistanceLargeBufferMax", *((float *)this + 24));
  v12 = *((_DWORD *)this + 31);
  if ((v12 & 0x400) == 0)
  {
LABEL_20:
    if ((v12 & 0x800) == 0)
      goto LABEL_21;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "unitDistanceReference", *((float *)this + 25));
  v12 = *((_DWORD *)this + 31);
  if ((v12 & 0x800) == 0)
  {
LABEL_21:
    if ((v12 & 0x1000) == 0)
      goto LABEL_22;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "unitDistanceSmallBufferDelta", *((float *)this + 26));
  v12 = *((_DWORD *)this + 31);
  if ((v12 & 0x1000) == 0)
  {
LABEL_22:
    if ((v12 & 0x2000) == 0)
      goto LABEL_23;
LABEL_40:
    PB::TextFormatter::format(a2, "unitDistanceThresholdApplied", *((float *)this + 28));
    if ((*((_DWORD *)this + 31) & 0x4000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_24;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "unitDistanceThreshold", *((float *)this + 27));
  v12 = *((_DWORD *)this + 31);
  if ((v12 & 0x2000) != 0)
    goto LABEL_40;
LABEL_23:
  if ((v12 & 0x4000) != 0)
LABEL_24:
    PB::TextFormatter::format(a2, "vertical", *((float *)this + 29));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::CompassConstraints::readFrom(CMMsl::CompassConstraints *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  _DWORD *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  _DWORD *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char v68;
  unsigned int v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  int v76;
  BOOL v77;
  unint64_t v78;
  unint64_t v79;
  int v80;
  BOOL v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  _DWORD *v88;
  unint64_t v89;
  char *v90;
  char v91;
  unsigned int v92;
  unint64_t v93;
  char v94;
  char v95;
  unsigned int v96;
  unint64_t v97;
  char v98;
  char *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  _DWORD *v111;
  int v112;
  _DWORD *v113;
  int v114;
  unint64_t v115;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_21:
      v19 = v11 & 7;
      if (v19 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_DWORD *)this + 31) |= 1u;
          v20 = *((_QWORD *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_192;
          *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v20);
          v21 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_195;
        case 2u:
          *((_DWORD *)this + 31) |= 0x80u;
          v22 = *((_QWORD *)a2 + 1);
          if (v22 > 0xFFFFFFFFFFFFFFFBLL || v22 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_192;
          *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v22);
          goto LABEL_194;
        case 3u:
          *((_DWORD *)this + 31) |= 0x4000u;
          v23 = *((_QWORD *)a2 + 1);
          if (v23 > 0xFFFFFFFFFFFFFFFBLL || v23 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_192;
          *((_DWORD *)this + 29) = *(_DWORD *)(*(_QWORD *)a2 + v23);
          goto LABEL_194;
        case 4u:
          *((_DWORD *)this + 31) |= 4u;
          v24 = *((_QWORD *)a2 + 1);
          if (v24 > 0xFFFFFFFFFFFFFFFBLL || v24 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_192;
          *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v24);
          goto LABEL_194;
        case 5u:
          *((_DWORD *)this + 31) |= 0x20u;
          v25 = *((_QWORD *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFFBLL || v25 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_192;
          *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v25);
          goto LABEL_194;
        case 6u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v26 = *((_QWORD *)a2 + 1);
            v27 = *((_QWORD *)a2 + 2);
            while (v26 < v27 && !*((_BYTE *)a2 + 24))
            {
              v29 = (char *)*((_QWORD *)this + 2);
              v28 = *((_QWORD *)this + 3);
              if ((unint64_t)v29 >= v28)
              {
                v31 = (char *)*((_QWORD *)this + 1);
                v32 = (v29 - v31) >> 2;
                v33 = v32 + 1;
                if ((unint64_t)(v32 + 1) >> 62)
                  goto LABEL_205;
                v34 = v28 - (_QWORD)v31;
                if (v34 >> 1 > v33)
                  v33 = v34 >> 1;
                if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL)
                  v35 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v35 = v33;
                if (v35)
                {
                  v35 = (unint64_t)sub_2429114B8(v35);
                  v31 = (char *)*((_QWORD *)this + 1);
                  v29 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v36 = 0;
                }
                v37 = (_DWORD *)(v35 + 4 * v32);
                *v37 = 0;
                v30 = v37 + 1;
                while (v29 != v31)
                {
                  v38 = *((_DWORD *)v29 - 1);
                  v29 -= 4;
                  *--v37 = v38;
                }
                *((_QWORD *)this + 1) = v37;
                *((_QWORD *)this + 2) = v30;
                *((_QWORD *)this + 3) = v35 + 4 * v36;
                if (v31)
                  operator delete(v31);
              }
              else
              {
                *(_DWORD *)v29 = 0;
                v30 = v29 + 4;
              }
              *((_QWORD *)this + 2) = v30;
              v39 = *((_QWORD *)a2 + 1);
              if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_150;
              *(v30 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v39);
              v27 = *((_QWORD *)a2 + 2);
              v26 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v26;
            }
            goto LABEL_151;
          }
          v87 = (char *)*((_QWORD *)this + 2);
          v86 = *((_QWORD *)this + 3);
          if ((unint64_t)v87 >= v86)
          {
            v99 = (char *)*((_QWORD *)this + 1);
            v100 = (v87 - v99) >> 2;
            v101 = v100 + 1;
            if ((unint64_t)(v100 + 1) >> 62)
              goto LABEL_205;
            v102 = v86 - (_QWORD)v99;
            if (v102 >> 1 > v101)
              v101 = v102 >> 1;
            if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFFCLL)
              v103 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v103 = v101;
            if (v103)
            {
              v103 = (unint64_t)sub_2429114B8(v103);
              v99 = (char *)*((_QWORD *)this + 1);
              v87 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v104 = 0;
            }
            v111 = (_DWORD *)(v103 + 4 * v100);
            *v111 = 0;
            v88 = v111 + 1;
            while (v87 != v99)
            {
              v112 = *((_DWORD *)v87 - 1);
              v87 -= 4;
              *--v111 = v112;
            }
            *((_QWORD *)this + 1) = v111;
            *((_QWORD *)this + 2) = v88;
            *((_QWORD *)this + 3) = v103 + 4 * v104;
            if (v99)
              operator delete(v99);
          }
          else
          {
            *(_DWORD *)v87 = 0;
            v88 = v87 + 4;
          }
          *((_QWORD *)this + 2) = v88;
          goto LABEL_190;
        case 7u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v40 = *((_QWORD *)a2 + 1);
            v41 = *((_QWORD *)a2 + 2);
            while (v40 < v41 && !*((_BYTE *)a2 + 24))
            {
              v43 = (char *)*((_QWORD *)this + 5);
              v42 = *((_QWORD *)this + 6);
              if ((unint64_t)v43 >= v42)
              {
                v45 = (char *)*((_QWORD *)this + 4);
                v46 = (v43 - v45) >> 2;
                v47 = v46 + 1;
                if ((unint64_t)(v46 + 1) >> 62)
                  goto LABEL_205;
                v48 = v42 - (_QWORD)v45;
                if (v48 >> 1 > v47)
                  v47 = v48 >> 1;
                if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL)
                  v49 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v49 = v47;
                if (v49)
                {
                  v49 = (unint64_t)sub_2429114B8(v49);
                  v45 = (char *)*((_QWORD *)this + 4);
                  v43 = (char *)*((_QWORD *)this + 5);
                }
                else
                {
                  v50 = 0;
                }
                v51 = (_DWORD *)(v49 + 4 * v46);
                *v51 = 0;
                v44 = v51 + 1;
                while (v43 != v45)
                {
                  v52 = *((_DWORD *)v43 - 1);
                  v43 -= 4;
                  *--v51 = v52;
                }
                *((_QWORD *)this + 4) = v51;
                *((_QWORD *)this + 5) = v44;
                *((_QWORD *)this + 6) = v49 + 4 * v50;
                if (v45)
                  operator delete(v45);
              }
              else
              {
                *(_DWORD *)v43 = 0;
                v44 = v43 + 4;
              }
              *((_QWORD *)this + 5) = v44;
              v53 = *((_QWORD *)a2 + 1);
              if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((_QWORD *)a2 + 2))
              {
LABEL_150:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v44 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v53);
              v41 = *((_QWORD *)a2 + 2);
              v40 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v40;
            }
LABEL_151:
            PB::Reader::recallMark();
          }
          else
          {
            v90 = (char *)*((_QWORD *)this + 5);
            v89 = *((_QWORD *)this + 6);
            if ((unint64_t)v90 >= v89)
            {
              v105 = (char *)*((_QWORD *)this + 4);
              v106 = (v90 - v105) >> 2;
              v107 = v106 + 1;
              if ((unint64_t)(v106 + 1) >> 62)
LABEL_205:
                sub_242729A44();
              v108 = v89 - (_QWORD)v105;
              if (v108 >> 1 > v107)
                v107 = v108 >> 1;
              if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFFCLL)
                v109 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v109 = v107;
              if (v109)
              {
                v109 = (unint64_t)sub_2429114B8(v109);
                v105 = (char *)*((_QWORD *)this + 4);
                v90 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v110 = 0;
              }
              v113 = (_DWORD *)(v109 + 4 * v106);
              *v113 = 0;
              v88 = v113 + 1;
              while (v90 != v105)
              {
                v114 = *((_DWORD *)v90 - 1);
                v90 -= 4;
                *--v113 = v114;
              }
              *((_QWORD *)this + 4) = v113;
              *((_QWORD *)this + 5) = v88;
              *((_QWORD *)this + 6) = v109 + 4 * v110;
              if (v105)
                operator delete(v105);
            }
            else
            {
              *(_DWORD *)v90 = 0;
              v88 = v90 + 4;
            }
            *((_QWORD *)this + 5) = v88;
LABEL_190:
            v115 = *((_QWORD *)a2 + 1);
            if (v115 <= 0xFFFFFFFFFFFFFFFBLL && v115 + 4 <= *((_QWORD *)a2 + 2))
            {
              *(v88 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v115);
LABEL_194:
              v21 = *((_QWORD *)a2 + 1) + 4;
LABEL_195:
              *((_QWORD *)a2 + 1) = v21;
            }
            else
            {
LABEL_192:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
          break;
        case 8u:
          *((_DWORD *)this + 31) |= 0x800u;
          v54 = *((_QWORD *)a2 + 1);
          if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_192;
          *((_DWORD *)this + 26) = *(_DWORD *)(*(_QWORD *)a2 + v54);
          goto LABEL_194;
        case 9u:
          *((_DWORD *)this + 31) |= 0x100u;
          v55 = *((_QWORD *)a2 + 1);
          if (v55 > 0xFFFFFFFFFFFFFFFBLL || v55 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_192;
          *((_DWORD *)this + 23) = *(_DWORD *)(*(_QWORD *)a2 + v55);
          goto LABEL_194;
        case 0xAu:
          *((_DWORD *)this + 31) |= 2u;
          v56 = *((_QWORD *)a2 + 1);
          if (v56 > 0xFFFFFFFFFFFFFFFBLL || v56 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_192;
          *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v56);
          goto LABEL_194;
        case 0xBu:
          *((_DWORD *)this + 31) |= 0x10u;
          v57 = *((_QWORD *)a2 + 1);
          v58 = *((_QWORD *)a2 + 2);
          v59 = *(_QWORD *)a2;
          if (v57 <= 0xFFFFFFFFFFFFFFF5 && v57 + 10 <= v58)
          {
            v60 = 0;
            v61 = 0;
            v62 = 0;
            do
            {
              v63 = v57 + 1;
              *((_QWORD *)a2 + 1) = v57 + 1;
              v64 = *(_BYTE *)(v59 + v57);
              v62 |= (unint64_t)(v64 & 0x7F) << v60;
              if ((v64 & 0x80) == 0)
                goto LABEL_172;
              v60 += 7;
              v57 = v63;
              v14 = v61++ > 8;
            }
            while (!v14);
LABEL_138:
            LODWORD(v62) = 0;
            goto LABEL_172;
          }
          v91 = 0;
          v92 = 0;
          v62 = 0;
          if (v58 <= v57)
            v58 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v58 == v57)
            {
              LODWORD(v62) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v93 = v57 + 1;
              v94 = *(_BYTE *)(v59 + v57);
              *((_QWORD *)a2 + 1) = v93;
              v62 |= (unint64_t)(v94 & 0x7F) << v91;
              if (v94 < 0)
              {
                v91 += 7;
                v57 = v93;
                v14 = v92++ > 8;
                if (v14)
                  goto LABEL_138;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v62) = 0;
            }
            break;
          }
LABEL_172:
          *((_DWORD *)this + 19) = v62;
          goto LABEL_196;
        case 0xCu:
          *((_DWORD *)this + 31) |= 8u;
          v65 = *((_QWORD *)a2 + 1);
          v66 = *((_QWORD *)a2 + 2);
          v67 = *(_QWORD *)a2;
          if (v65 <= 0xFFFFFFFFFFFFFFF5 && v65 + 10 <= v66)
          {
            v68 = 0;
            v69 = 0;
            v70 = 0;
            do
            {
              v71 = v65 + 1;
              *((_QWORD *)a2 + 1) = v65 + 1;
              v72 = *(_BYTE *)(v67 + v65);
              v70 |= (unint64_t)(v72 & 0x7F) << v68;
              if ((v72 & 0x80) == 0)
                goto LABEL_175;
              v68 += 7;
              v65 = v71;
              v14 = v69++ > 8;
            }
            while (!v14);
LABEL_145:
            LODWORD(v70) = 0;
            goto LABEL_175;
          }
          v95 = 0;
          v96 = 0;
          v70 = 0;
          if (v66 <= v65)
            v66 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v66 == v65)
            {
              LODWORD(v70) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v97 = v65 + 1;
              v98 = *(_BYTE *)(v67 + v65);
              *((_QWORD *)a2 + 1) = v97;
              v70 |= (unint64_t)(v98 & 0x7F) << v95;
              if (v98 < 0)
              {
                v95 += 7;
                v65 = v97;
                v14 = v96++ > 8;
                if (v14)
                  goto LABEL_145;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v70) = 0;
            }
            break;
          }
LABEL_175:
          *((_DWORD *)this + 18) = v70;
          goto LABEL_196;
        case 0xDu:
          *((_DWORD *)this + 31) |= 0x400u;
          v73 = *((_QWORD *)a2 + 1);
          if (v73 > 0xFFFFFFFFFFFFFFFBLL || v73 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_192;
          *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v73);
          goto LABEL_194;
        case 0xEu:
          *((_DWORD *)this + 31) |= 0x10000u;
          v74 = *((_QWORD *)a2 + 1);
          if (v74 >= *((_QWORD *)a2 + 2))
          {
            v77 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v75 = v74 + 1;
            v76 = *(unsigned __int8 *)(*(_QWORD *)a2 + v74);
            *((_QWORD *)a2 + 1) = v75;
            v77 = v76 != 0;
          }
          *((_BYTE *)this + 121) = v77;
          goto LABEL_196;
        case 0xFu:
          *((_DWORD *)this + 31) |= 0x8000u;
          v78 = *((_QWORD *)a2 + 1);
          if (v78 >= *((_QWORD *)a2 + 2))
          {
            v81 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v79 = v78 + 1;
            v80 = *(unsigned __int8 *)(*(_QWORD *)a2 + v78);
            *((_QWORD *)a2 + 1) = v79;
            v81 = v80 != 0;
          }
          *((_BYTE *)this + 120) = v81;
          goto LABEL_196;
        case 0x10u:
          *((_DWORD *)this + 31) |= 0x200u;
          v82 = *((_QWORD *)a2 + 1);
          if (v82 > 0xFFFFFFFFFFFFFFFBLL || v82 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_192;
          *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v82);
          goto LABEL_194;
        case 0x11u:
          *((_DWORD *)this + 31) |= 0x1000u;
          v83 = *((_QWORD *)a2 + 1);
          if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_192;
          *((_DWORD *)this + 27) = *(_DWORD *)(*(_QWORD *)a2 + v83);
          goto LABEL_194;
        case 0x12u:
          *((_DWORD *)this + 31) |= 0x40u;
          v84 = *((_QWORD *)a2 + 1);
          if (v84 > 0xFFFFFFFFFFFFFFFBLL || v84 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_192;
          *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v84);
          goto LABEL_194;
        case 0x13u:
          *((_DWORD *)this + 31) |= 0x2000u;
          v85 = *((_QWORD *)a2 + 1);
          if (v85 > 0xFFFFFFFFFFFFFFFBLL || v85 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_192;
          *((_DWORD *)this + 28) = *(_DWORD *)(*(_QWORD *)a2 + v85);
          goto LABEL_194;
        default:
          goto LABEL_19;
      }
      goto LABEL_196;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_21;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    if ((PB::Reader::skip(a2) & 1) == 0)
      return 0;
LABEL_196:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
}

uint64_t CMMsl::CompassConstraints::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  int v11;

  v3 = this;
  v4 = *(_DWORD *)(this + 124);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 56));
    v4 = *(_DWORD *)(v3 + 124);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 0x4000) == 0)
        goto LABEL_4;
      goto LABEL_28;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x4000) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
LABEL_29:
    this = PB::Writer::write(a2, *(float *)(v3 + 68));
    if ((*(_DWORD *)(v3 + 124) & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(float *)(v3 + 116));
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 4) != 0)
    goto LABEL_29;
LABEL_5:
  if ((v4 & 0x20) != 0)
LABEL_6:
    this = PB::Writer::write(a2, *(float *)(v3 + 80));
LABEL_7:
  v5 = *(float **)(v3 + 8);
  v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7);
  }
  v8 = *(float **)(v3 + 32);
  v9 = *(float **)(v3 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    this = PB::Writer::write(a2, v10);
  }
  v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x800) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 104));
    v11 = *(_DWORD *)(v3 + 124);
    if ((v11 & 0x100) == 0)
    {
LABEL_15:
      if ((v11 & 2) == 0)
        goto LABEL_16;
      goto LABEL_33;
    }
  }
  else if ((v11 & 0x100) == 0)
  {
    goto LABEL_15;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 92));
  v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 2) == 0)
  {
LABEL_16:
    if ((v11 & 0x10) == 0)
      goto LABEL_17;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 64));
  v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x10) == 0)
  {
LABEL_17:
    if ((v11 & 8) == 0)
      goto LABEL_18;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::writeVarInt(a2);
  v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 8) == 0)
  {
LABEL_18:
    if ((v11 & 0x400) == 0)
      goto LABEL_19;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::writeVarInt(a2);
  v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x400) == 0)
  {
LABEL_19:
    if ((v11 & 0x10000) == 0)
      goto LABEL_20;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 100));
  v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x10000) == 0)
  {
LABEL_20:
    if ((v11 & 0x8000) == 0)
      goto LABEL_21;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2);
  v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x8000) == 0)
  {
LABEL_21:
    if ((v11 & 0x200) == 0)
      goto LABEL_22;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2);
  v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x200) == 0)
  {
LABEL_22:
    if ((v11 & 0x1000) == 0)
      goto LABEL_23;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 96));
  v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x1000) == 0)
  {
LABEL_23:
    if ((v11 & 0x40) == 0)
      goto LABEL_24;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(float *)(v3 + 108));
  v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x40) == 0)
  {
LABEL_24:
    if ((v11 & 0x2000) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 112));
  }
LABEL_41:
  this = PB::Writer::write(a2, *(float *)(v3 + 84));
  if ((*(_DWORD *)(v3 + 124) & 0x2000) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 112));
  return this;
}

BOOL CMMsl::CompassConstraints::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  _BOOL8 v10;

  v2 = *(_DWORD *)(a1 + 124);
  v3 = *(_DWORD *)(a2 + 124);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  v5 = *(float **)(a1 + 8);
  v4 = *(float **)(a1 + 16);
  v6 = *(float **)(a2 + 8);
  if ((char *)v4 - (char *)v5 != *(_QWORD *)(a2 + 16) - (_QWORD)v6)
    return 0;
  while (v5 != v4)
  {
    if (*v5 != *v6)
      return 0;
    ++v5;
    ++v6;
  }
  v8 = *(float **)(a1 + 32);
  v7 = *(float **)(a1 + 40);
  v9 = *(float **)(a2 + 32);
  if ((char *)v7 - (char *)v8 != *(_QWORD *)(a2 + 40) - (_QWORD)v9)
    return 0;
  while (v8 != v7)
  {
    if (*v8 != *v9)
      return 0;
    ++v8;
    ++v9;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(unsigned __int8 *)(a1 + 121) != *(unsigned __int8 *)(a2 + 121))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(unsigned __int8 *)(a1 + 120) != *(unsigned __int8 *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  v10 = (*(_DWORD *)(a2 + 124) & 0x2000) == 0;
  if ((v2 & 0x2000) != 0)
    return (v3 & 0x2000) != 0 && *(float *)(a1 + 112) == *(float *)(a2 + 112);
  return v10;
}

uint64_t CMMsl::CompassConstraints::hash_value(CMMsl::CompassConstraints *this)
{
  int v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  float v34;

  v2 = *((_DWORD *)this + 31);
  if ((v2 & 1) == 0)
  {
    v3 = 0;
    if ((v2 & 0x80) != 0)
      goto LABEL_3;
LABEL_22:
    v5 = 0;
    if ((v2 & 0x4000) != 0)
      goto LABEL_7;
LABEL_23:
    v7 = 0;
    if ((v2 & 4) != 0)
      goto LABEL_11;
    goto LABEL_24;
  }
  if (*((double *)this + 7) == 0.0)
    v3 = 0;
  else
    v3 = *((_QWORD *)this + 7);
  if ((v2 & 0x80) == 0)
    goto LABEL_22;
LABEL_3:
  v4 = *((float *)this + 22);
  if (v4 == 0.0)
    v5 = 0;
  else
    v5 = LODWORD(v4);
  if ((v2 & 0x4000) == 0)
    goto LABEL_23;
LABEL_7:
  v6 = *((float *)this + 29);
  if (v6 == 0.0)
    v7 = 0;
  else
    v7 = LODWORD(v6);
  if ((v2 & 4) != 0)
  {
LABEL_11:
    v8 = *((float *)this + 17);
    if (v8 == 0.0)
      v9 = 0;
    else
      v9 = LODWORD(v8);
    if ((v2 & 0x20) != 0)
      goto LABEL_15;
LABEL_25:
    v11 = 0;
    goto LABEL_26;
  }
LABEL_24:
  v9 = 0;
  if ((v2 & 0x20) == 0)
    goto LABEL_25;
LABEL_15:
  v10 = *((float *)this + 20);
  if (v10 == 0.0)
    v11 = 0;
  else
    v11 = LODWORD(v10);
LABEL_26:
  v12 = PBHashBytes();
  v13 = PBHashBytes();
  v14 = *((_DWORD *)this + 31);
  if ((v14 & 0x800) == 0)
  {
    v15 = 0;
    if ((v14 & 0x100) != 0)
      goto LABEL_28;
LABEL_56:
    v17 = 0;
    if ((v14 & 2) != 0)
      goto LABEL_31;
LABEL_57:
    v19 = 0;
    if ((v14 & 0x10) != 0)
      goto LABEL_34;
    goto LABEL_58;
  }
  v34 = *((float *)this + 26);
  v15 = LODWORD(v34);
  if (v34 == 0.0)
    v15 = 0;
  if ((v14 & 0x100) == 0)
    goto LABEL_56;
LABEL_28:
  v16 = *((float *)this + 23);
  v17 = LODWORD(v16);
  if (v16 == 0.0)
    v17 = 0;
  if ((v14 & 2) == 0)
    goto LABEL_57;
LABEL_31:
  v18 = *((float *)this + 16);
  v19 = LODWORD(v18);
  if (v18 == 0.0)
    v19 = 0;
  if ((v14 & 0x10) != 0)
  {
LABEL_34:
    v20 = *((unsigned int *)this + 19);
    if ((v14 & 8) != 0)
      goto LABEL_35;
    goto LABEL_59;
  }
LABEL_58:
  v20 = 0;
  if ((v14 & 8) != 0)
  {
LABEL_35:
    v21 = *((unsigned int *)this + 18);
    if ((v14 & 0x400) != 0)
      goto LABEL_36;
LABEL_60:
    v23 = 0;
    if ((v14 & 0x10000) != 0)
      goto LABEL_39;
    goto LABEL_61;
  }
LABEL_59:
  v21 = 0;
  if ((v14 & 0x400) == 0)
    goto LABEL_60;
LABEL_36:
  v22 = *((float *)this + 25);
  v23 = LODWORD(v22);
  if (v22 == 0.0)
    v23 = 0;
  if ((v14 & 0x10000) != 0)
  {
LABEL_39:
    v24 = *((unsigned __int8 *)this + 121);
    if ((v14 & 0x8000) != 0)
      goto LABEL_40;
    goto LABEL_62;
  }
LABEL_61:
  v24 = 0;
  if ((v14 & 0x8000) != 0)
  {
LABEL_40:
    v25 = *((unsigned __int8 *)this + 120);
    if ((v14 & 0x200) != 0)
      goto LABEL_41;
LABEL_63:
    v27 = 0;
    if ((v14 & 0x1000) != 0)
      goto LABEL_44;
LABEL_64:
    v29 = 0;
    if ((v14 & 0x40) != 0)
      goto LABEL_47;
    goto LABEL_65;
  }
LABEL_62:
  v25 = 0;
  if ((v14 & 0x200) == 0)
    goto LABEL_63;
LABEL_41:
  v26 = *((float *)this + 24);
  v27 = LODWORD(v26);
  if (v26 == 0.0)
    v27 = 0;
  if ((v14 & 0x1000) == 0)
    goto LABEL_64;
LABEL_44:
  v28 = *((float *)this + 27);
  v29 = LODWORD(v28);
  if (v28 == 0.0)
    v29 = 0;
  if ((v14 & 0x40) != 0)
  {
LABEL_47:
    v30 = *((float *)this + 21);
    v31 = LODWORD(v30);
    if (v30 == 0.0)
      v31 = 0;
    if ((v14 & 0x2000) != 0)
      goto LABEL_50;
LABEL_66:
    v33 = 0;
    return v5 ^ v3 ^ v7 ^ v9 ^ v11 ^ v12 ^ v13 ^ v15 ^ v17 ^ v19 ^ v20 ^ v21 ^ v23 ^ v24 ^ v25 ^ v27 ^ v29 ^ v31 ^ v33;
  }
LABEL_65:
  v31 = 0;
  if ((v14 & 0x2000) == 0)
    goto LABEL_66;
LABEL_50:
  v32 = *((float *)this + 28);
  v33 = LODWORD(v32);
  if (v32 == 0.0)
    v33 = 0;
  return v5 ^ v3 ^ v7 ^ v9 ^ v11 ^ v12 ^ v13 ^ v15 ^ v17 ^ v19 ^ v20 ^ v21 ^ v23 ^ v24 ^ v25 ^ v27 ^ v29 ^ v31 ^ v33;
}

_QWORD *CMMsl::CompassCorrection::CompassCorrection(_QWORD *this)
{
  *this = &off_25135CF38;
  this[1] = 0;
  return this;
}

{
  *this = &off_25135CF38;
  this[1] = 0;
  return this;
}

void CMMsl::CompassCorrection::~CompassCorrection(CMMsl::CompassCorrection *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135CF38;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135CF38;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135CF38;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::CompassCorrection *CMMsl::CompassCorrection::CompassCorrection(CMMsl::CompassCorrection *this, const CMMsl::DeviceMotionCorrection **a2)
{
  CMMsl::DeviceMotionCorrection *v4;
  CMMsl::DeviceMotionCorrection *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_25135CF38;
  *((_QWORD *)this + 1) = 0;
  if (a2[1])
  {
    v4 = (CMMsl::DeviceMotionCorrection *)operator new();
    v5 = CMMsl::DeviceMotionCorrection::DeviceMotionCorrection(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return this;
}

uint64_t CMMsl::CompassCorrection::operator=(uint64_t a1, const CMMsl::DeviceMotionCorrection **a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::CompassCorrection *__hidden);
  uint64_t v6;

  if ((const CMMsl::DeviceMotionCorrection **)a1 != a2)
  {
    CMMsl::CompassCorrection::CompassCorrection((CMMsl::CompassCorrection *)&v5, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v6;
    v5 = &off_25135CF38;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::CompassCorrection *a2, CMMsl::CompassCorrection *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::CompassCorrection::CompassCorrection(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_25135CF38;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_25135CF38;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::CompassCorrection::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = &off_25135CF38;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::CompassCorrection::formatText(CMMsl::CompassCorrection *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "correction");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::CompassCorrection::readFrom(CMMsl::CompassCorrection *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v19 = operator new();
        *(_QWORD *)v19 = &off_25135D130;
        *(_DWORD *)(v19 + 160) = 0;
        *(_OWORD *)(v19 + 8) = 0u;
        *(_OWORD *)(v19 + 24) = 0u;
        *(_OWORD *)(v19 + 40) = 0u;
        *(_OWORD *)(v19 + 56) = 0u;
        *(_OWORD *)(v19 + 72) = 0u;
        *(_OWORD *)(v19 + 88) = 0u;
        *(_OWORD *)(v19 + 104) = 0u;
        *(_OWORD *)(v19 + 120) = 0u;
        *(_OWORD *)(v19 + 136) = 0u;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = *((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_27;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::CompassCorrection::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2);
  return this;
}

BOOL CMMsl::CompassCorrection::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::DeviceMotionCorrection::operator==(v2, v3);
  return result;
}

CMMsl::DeviceMotionCorrection *CMMsl::CompassCorrection::hash_value(CMMsl::CompassCorrection *this)
{
  CMMsl::DeviceMotionCorrection *result;

  result = (CMMsl::DeviceMotionCorrection *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::DeviceMotionCorrection *)CMMsl::DeviceMotionCorrection::hash_value(result);
  return result;
}

_QWORD *CMMsl::CompassCorrection::makeCorrection(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135D130;
    *(_DWORD *)(v2 + 160) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_OWORD *)(v2 + 120) = 0u;
    *(_OWORD *)(v2 + 136) = 0u;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t CMMsl::ComplexHandMotion::ComplexHandMotion(uint64_t this)
{
  *(_QWORD *)this = &off_25135CF70;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135CF70;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

void CMMsl::ComplexHandMotion::~ComplexHandMotion(CMMsl::ComplexHandMotion *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::ComplexHandMotion::ComplexHandMotion(uint64_t this, const CMMsl::ComplexHandMotion *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  *(_QWORD *)this = &off_25135CF70;
  *(_DWORD *)(this + 28) = 0;
  v2 = *((_BYTE *)a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_BYTE *)(this + 28) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 28) & 2) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 2);
    v3 |= 2u;
    *(_BYTE *)(this + 28) = v3;
    *(_QWORD *)(this + 16) = v5;
    v2 = *((_BYTE *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 4) == 0)
      return this;
LABEL_10:
    v7 = *((_BYTE *)a2 + 24);
    *(_BYTE *)(this + 28) = v3 | 4;
    *(_BYTE *)(this + 24) = v7;
    return this;
  }
  v6 = *((_BYTE *)a2 + 25);
  v3 |= 8u;
  *(_BYTE *)(this + 28) = v3;
  *(_BYTE *)(this + 25) = v6;
  if ((*((_BYTE *)a2 + 28) & 4) != 0)
    goto LABEL_10;
  return this;
}

uint64_t CMMsl::ComplexHandMotion::operator=(uint64_t a1, const CMMsl::ComplexHandMotion *a2)
{
  int v3;
  __int128 v4;
  uint64_t v6;
  __int128 v7;
  __int16 v8;
  int v9;

  if ((const CMMsl::ComplexHandMotion *)a1 != a2)
  {
    CMMsl::ComplexHandMotion::ComplexHandMotion((uint64_t)&v6, a2);
    v3 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v9;
    v9 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v4;
    LOWORD(v3) = *(_WORD *)(a1 + 24);
    *(_WORD *)(a1 + 24) = v8;
    v8 = v3;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::ComplexHandMotion *a2, CMMsl::ComplexHandMotion *a3)
{
  int v3;
  uint64_t v4;
  double result;

  v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  LOBYTE(v3) = *((_BYTE *)this + 25);
  *((_BYTE *)this + 25) = *((_BYTE *)a2 + 25);
  *((_BYTE *)a2 + 25) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 24);
  *((_BYTE *)this + 24) = *((_BYTE *)a2 + 24);
  *((_BYTE *)a2 + 24) = v3;
  return result;
}

double CMMsl::ComplexHandMotion::ComplexHandMotion(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135CF70;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135CF70;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return result;
}

uint64_t CMMsl::ComplexHandMotion::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int16 v4;
  __int128 v5;
  __int128 v6;
  void (**v8)(CMMsl::ComplexHandMotion *__hidden);
  __int128 v9;
  __int16 v10;
  int v11;

  if (a1 != a2)
  {
    v8 = &off_25135CF70;
    v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    v4 = *(_WORD *)(a2 + 24);
    v11 = *(_DWORD *)(a1 + 28);
    v5 = *(_OWORD *)(a1 + 8);
    v6 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 28) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    v9 = v5;
    LOWORD(v3) = *(_WORD *)(a1 + 24);
    *(_WORD *)(a1 + 24) = v4;
    v10 = v3;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::ComplexHandMotion::formatText(CMMsl::ComplexHandMotion *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "finalDecision");
    v5 = *((_BYTE *)this + 28);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "timeStart", *((double *)this + 1));
      if ((*((_BYTE *)this + 28) & 2) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 28) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "instantDecision");
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 2) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "timeStop", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ComplexHandMotion::readFrom(CMMsl::ComplexHandMotion *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v20;
  BOOL v21;
  int v22;
  BOOL v23;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_39;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 28) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_28;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_38;
      case 2u:
        *((_BYTE *)this + 28) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_38:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_28:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 3u:
        *((_BYTE *)this + 28) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v21 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v21 = v20 != 0;
        }
        *((_BYTE *)this + 25) = v21;
        break;
      case 4u:
        *((_BYTE *)this + 28) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v23 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v22 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v23 = v22 != 0;
        }
        *((_BYTE *)this + 24) = v23;
        break;
      default:
        goto LABEL_19;
    }
LABEL_39:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::ComplexHandMotion::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 28);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      return this;
    return PB::Writer::write(a2);
  }
LABEL_8:
  this = PB::Writer::write(a2);
  if ((*(_BYTE *)(v3 + 28) & 4) != 0)
    return PB::Writer::write(a2);
  return this;
}

BOOL CMMsl::ComplexHandMotion::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 8) == 0 || *(unsigned __int8 *)(a1 + 25) != *(unsigned __int8 *)(a2 + 25))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 8) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 28) & 4) == 0;
  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
    return (*(_BYTE *)(a2 + 28) & 4) != 0 && *(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24);
  return v2;
}

uint64_t CMMsl::ComplexHandMotion::hash_value(CMMsl::ComplexHandMotion *this)
{
  double v1;
  double v2;
  uint64_t v3;
  uint64_t v4;

  if ((*((_BYTE *)this + 28) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 28) & 2) != 0)
      goto LABEL_3;
LABEL_11:
    v2 = 0.0;
    if ((*((_BYTE *)this + 28) & 8) != 0)
      goto LABEL_6;
LABEL_12:
    v3 = 0;
    if ((*((_BYTE *)this + 28) & 4) != 0)
      goto LABEL_7;
LABEL_13:
    v4 = 0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ v3 ^ v4;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 28) & 2) == 0)
    goto LABEL_11;
LABEL_3:
  v2 = *((double *)this + 2);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 28) & 8) == 0)
    goto LABEL_12;
LABEL_6:
  v3 = *((unsigned __int8 *)this + 25);
  if ((*((_BYTE *)this + 28) & 4) == 0)
    goto LABEL_13;
LABEL_7:
  v4 = *((unsigned __int8 *)this + 24);
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ v3 ^ v4;
}

_QWORD *CMMsl::ConstrainedIntegratorModelPredictedPose::ConstrainedIntegratorModelPredictedPose(_QWORD *this)
{
  *this = &off_25135CFA8;
  this[1] = 0;
  return this;
}

{
  *this = &off_25135CFA8;
  this[1] = 0;
  return this;
}

void CMMsl::ConstrainedIntegratorModelPredictedPose::~ConstrainedIntegratorModelPredictedPose(CMMsl::ConstrainedIntegratorModelPredictedPose *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135CFA8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135CFA8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135CFA8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::ConstrainedIntegratorModelPredictedPose *CMMsl::ConstrainedIntegratorModelPredictedPose::ConstrainedIntegratorModelPredictedPose(CMMsl::ConstrainedIntegratorModelPredictedPose *this, const CMMsl::PoseState ***a2)
{
  CMMsl::BioMotionPredictedPose *v4;
  CMMsl::BioMotionPredictedPose *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_25135CFA8;
  *((_QWORD *)this + 1) = 0;
  if (a2[1])
  {
    v4 = (CMMsl::BioMotionPredictedPose *)operator new();
    v5 = CMMsl::BioMotionPredictedPose::BioMotionPredictedPose(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return this;
}

uint64_t CMMsl::ConstrainedIntegratorModelPredictedPose::operator=(uint64_t a1, const CMMsl::PoseState ***a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::ConstrainedIntegratorModelPredictedPose *__hidden);
  uint64_t v6;

  if ((const CMMsl::PoseState ***)a1 != a2)
  {
    CMMsl::ConstrainedIntegratorModelPredictedPose::ConstrainedIntegratorModelPredictedPose((CMMsl::ConstrainedIntegratorModelPredictedPose *)&v5, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v6;
    v5 = &off_25135CFA8;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::ConstrainedIntegratorModelPredictedPose *a2, CMMsl::ConstrainedIntegratorModelPredictedPose *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::ConstrainedIntegratorModelPredictedPose::ConstrainedIntegratorModelPredictedPose(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_25135CFA8;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_25135CFA8;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::ConstrainedIntegratorModelPredictedPose::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = &off_25135CFA8;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::ConstrainedIntegratorModelPredictedPose::formatText(CMMsl::ConstrainedIntegratorModelPredictedPose *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ConstrainedIntegratorModelPredictedPose::readFrom(CMMsl::ConstrainedIntegratorModelPredictedPose *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v19 = operator new();
        *(_QWORD *)v19 = &off_25135C988;
        *(_QWORD *)(v19 + 8) = 0;
        *(_DWORD *)(v19 + 28) = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = *((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_27;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::ConstrainedIntegratorModelPredictedPose::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2);
  return this;
}

BOOL CMMsl::ConstrainedIntegratorModelPredictedPose::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::BioMotionPredictedPose::operator==(v2, v3);
  return result;
}

CMMsl::BioMotionPredictedPose *CMMsl::ConstrainedIntegratorModelPredictedPose::hash_value(CMMsl::ConstrainedIntegratorModelPredictedPose *this)
{
  CMMsl::BioMotionPredictedPose *result;

  result = (CMMsl::BioMotionPredictedPose *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::BioMotionPredictedPose *)CMMsl::BioMotionPredictedPose::hash_value(result);
  return result;
}

_QWORD *CMMsl::ConstrainedIntegratorModelPredictedPose::makeSuper(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135C988;
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 28) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::ConstrainedIntegratorPose::ConstrainedIntegratorPose(_QWORD *this)
{
  *this = &off_25135CFE0;
  this[1] = 0;
  return this;
}

{
  *this = &off_25135CFE0;
  this[1] = 0;
  return this;
}

void CMMsl::ConstrainedIntegratorPose::~ConstrainedIntegratorPose(CMMsl::ConstrainedIntegratorPose *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135CFE0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135CFE0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135CFE0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::ConstrainedIntegratorPose *CMMsl::ConstrainedIntegratorPose::ConstrainedIntegratorPose(CMMsl::ConstrainedIntegratorPose *this, char ***a2)
{
  char **v4;
  CMMsl::BioMotionPose *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_25135CFE0;
  *((_QWORD *)this + 1) = 0;
  if (a2[1])
  {
    v4 = (char **)operator new();
    v5 = CMMsl::BioMotionPose::BioMotionPose(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return this;
}

uint64_t CMMsl::ConstrainedIntegratorPose::operator=(uint64_t a1, char ***a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::ConstrainedIntegratorPose *__hidden);
  uint64_t v6;

  if ((char ***)a1 != a2)
  {
    CMMsl::ConstrainedIntegratorPose::ConstrainedIntegratorPose((CMMsl::ConstrainedIntegratorPose *)&v5, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v6;
    v5 = &off_25135CFE0;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::ConstrainedIntegratorPose *a2, CMMsl::ConstrainedIntegratorPose *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::ConstrainedIntegratorPose::ConstrainedIntegratorPose(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_25135CFE0;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_25135CFE0;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::ConstrainedIntegratorPose::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = &off_25135CFE0;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::ConstrainedIntegratorPose::formatText(CMMsl::ConstrainedIntegratorPose *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ConstrainedIntegratorPose::readFrom(CMMsl::ConstrainedIntegratorPose *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v19 = operator new();
        *(_QWORD *)v19 = &off_25135C950;
        *(_DWORD *)(v19 + 144) = 0;
        *(_OWORD *)(v19 + 8) = 0u;
        *(_OWORD *)(v19 + 24) = 0u;
        *(_OWORD *)(v19 + 40) = 0u;
        *(_OWORD *)(v19 + 56) = 0u;
        *(_OWORD *)(v19 + 72) = 0u;
        *(_OWORD *)(v19 + 88) = 0u;
        *(_OWORD *)(v19 + 104) = 0u;
        *(_QWORD *)(v19 + 120) = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = *((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_27;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::ConstrainedIntegratorPose::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2);
  return this;
}

BOOL CMMsl::ConstrainedIntegratorPose::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::BioMotionPose::operator==(v2, v3);
  return result;
}

CMMsl::BioMotionPose *CMMsl::ConstrainedIntegratorPose::hash_value(CMMsl::ConstrainedIntegratorPose *this)
{
  CMMsl::BioMotionPose *result;

  result = (CMMsl::BioMotionPose *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::BioMotionPose *)CMMsl::BioMotionPose::hash_value(result);
  return result;
}

_QWORD *CMMsl::ConstrainedIntegratorPose::makeSuper(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135C950;
    *(_DWORD *)(v2 + 144) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_QWORD *)(v2 + 120) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t CMMsl::CoprocessorReplyGaitMetrics::CoprocessorReplyGaitMetrics(uint64_t this)
{
  *(_QWORD *)this = &off_25135D018;
  *(_DWORD *)(this + 92) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135D018;
  *(_DWORD *)(this + 92) = 0;
  return this;
}

void CMMsl::CoprocessorReplyGaitMetrics::~CoprocessorReplyGaitMetrics(CMMsl::CoprocessorReplyGaitMetrics *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::CoprocessorReplyGaitMetrics::CoprocessorReplyGaitMetrics(CMMsl::CoprocessorReplyGaitMetrics *this, const CMMsl::CoprocessorReplyGaitMetrics *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  float result;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;

  *(_QWORD *)this = &off_25135D018;
  *((_DWORD *)this + 23) = 0;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_DWORD *)this + 23) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_DWORD *)a2 + 23);
    if ((v2 & 0x80000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x80000) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 22);
    v3 |= 0x80000u;
    *((_DWORD *)this + 23) = v3;
    *((float *)this + 22) = result;
    v2 = *((_DWORD *)a2 + 23);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    result = *((float *)a2 + 7);
    v3 |= 0x10u;
    *((_DWORD *)this + 23) = v3;
    *((float *)this + 7) = result;
    v2 = *((_DWORD *)a2 + 23);
    if ((v2 & 0x8000) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_27;
    }
  }
  else if ((v2 & 0x8000) == 0)
  {
    goto LABEL_8;
  }
  result = *((float *)a2 + 18);
  v3 |= 0x8000u;
  *((_DWORD *)this + 23) = v3;
  *((float *)this + 18) = result;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0)
      goto LABEL_10;
    goto LABEL_28;
  }
LABEL_27:
  v6 = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *((_DWORD *)this + 23) = v3;
  *((_DWORD *)this + 8) = v6;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 8) == 0)
  {
LABEL_10:
    if ((v2 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_29;
  }
LABEL_28:
  v7 = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *((_DWORD *)this + 23) = v3;
  *((_DWORD *)this + 6) = v7;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x800) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_30;
  }
LABEL_29:
  v8 = *((_DWORD *)a2 + 14);
  v3 |= 0x800u;
  *((_DWORD *)this + 23) = v3;
  *((_DWORD *)this + 14) = v8;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0)
      goto LABEL_13;
    goto LABEL_31;
  }
LABEL_30:
  v9 = *((_DWORD *)a2 + 11);
  v3 |= 0x100u;
  *((_DWORD *)this + 23) = v3;
  *((_DWORD *)this + 11) = v9;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_32;
  }
LABEL_31:
  v10 = *((_DWORD *)a2 + 10);
  v3 |= 0x80u;
  *((_DWORD *)this + 23) = v3;
  *((_DWORD *)this + 10) = v10;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x200) == 0)
  {
LABEL_14:
    if ((v2 & 4) == 0)
      goto LABEL_15;
    goto LABEL_33;
  }
LABEL_32:
  v11 = *((_DWORD *)a2 + 12);
  v3 |= 0x200u;
  *((_DWORD *)this + 23) = v3;
  *((_DWORD *)this + 12) = v11;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 4) == 0)
  {
LABEL_15:
    if ((v2 & 2) == 0)
      goto LABEL_16;
    goto LABEL_34;
  }
LABEL_33:
  result = *((float *)a2 + 5);
  v3 |= 4u;
  *((_DWORD *)this + 23) = v3;
  *((float *)this + 5) = result;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 2) == 0)
  {
LABEL_16:
    if ((v2 & 0x400) == 0)
      goto LABEL_17;
    goto LABEL_35;
  }
LABEL_34:
  result = *((float *)a2 + 4);
  v3 |= 2u;
  *((_DWORD *)this + 23) = v3;
  *((float *)this + 4) = result;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x400) == 0)
  {
LABEL_17:
    if ((v2 & 0x40) == 0)
      goto LABEL_18;
    goto LABEL_36;
  }
LABEL_35:
  v12 = *((_DWORD *)a2 + 13);
  v3 |= 0x400u;
  *((_DWORD *)this + 23) = v3;
  *((_DWORD *)this + 13) = v12;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x40) == 0)
  {
LABEL_18:
    if ((v2 & 0x1000) == 0)
      goto LABEL_19;
    goto LABEL_37;
  }
LABEL_36:
  v13 = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *((_DWORD *)this + 23) = v3;
  *((_DWORD *)this + 9) = v13;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x1000) == 0)
  {
LABEL_19:
    if ((v2 & 0x2000) == 0)
      goto LABEL_20;
    goto LABEL_38;
  }
LABEL_37:
  result = *((float *)a2 + 15);
  v3 |= 0x1000u;
  *((_DWORD *)this + 23) = v3;
  *((float *)this + 15) = result;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x2000) == 0)
  {
LABEL_20:
    if ((v2 & 0x4000) == 0)
      goto LABEL_21;
    goto LABEL_39;
  }
LABEL_38:
  result = *((float *)a2 + 16);
  v3 |= 0x2000u;
  *((_DWORD *)this + 23) = v3;
  *((float *)this + 16) = result;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x4000) == 0)
  {
LABEL_21:
    if ((v2 & 0x10000) == 0)
      goto LABEL_22;
    goto LABEL_40;
  }
LABEL_39:
  result = *((float *)a2 + 17);
  v3 |= 0x4000u;
  *((_DWORD *)this + 23) = v3;
  *((float *)this + 17) = result;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x10000) == 0)
  {
LABEL_22:
    if ((v2 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_41;
  }
LABEL_40:
  result = *((float *)a2 + 19);
  v3 |= 0x10000u;
  *((_DWORD *)this + 23) = v3;
  *((float *)this + 19) = result;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x20000) == 0)
  {
LABEL_23:
    if ((v2 & 0x40000) == 0)
      return result;
LABEL_42:
    result = *((float *)a2 + 21);
    *((_DWORD *)this + 23) = v3 | 0x40000;
    *((float *)this + 21) = result;
    return result;
  }
LABEL_41:
  result = *((float *)a2 + 20);
  v3 |= 0x20000u;
  *((_DWORD *)this + 23) = v3;
  *((float *)this + 20) = result;
  if ((*((_DWORD *)a2 + 23) & 0x40000) != 0)
    goto LABEL_42;
  return result;
}

CMMsl *CMMsl::CoprocessorReplyGaitMetrics::operator=(CMMsl *a1, const CMMsl::CoprocessorReplyGaitMetrics *a2)
{
  CMMsl::CoprocessorReplyGaitMetrics *v3;
  _BYTE v5[96];

  if (a1 != a2)
  {
    CMMsl::CoprocessorReplyGaitMetrics::CoprocessorReplyGaitMetrics((CMMsl::CoprocessorReplyGaitMetrics *)v5, a2);
    CMMsl::swap(a1, (CMMsl::CoprocessorReplyGaitMetrics *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::CoprocessorReplyGaitMetrics *a2, CMMsl::CoprocessorReplyGaitMetrics *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  float result;

  v3 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v5;
  v6 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v6;
  v7 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v7;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  v8 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v8;
  v9 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v9;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  v10 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v10;
  v11 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v11;
  v12 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v12;
  v13 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v13;
  v14 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v14;
  result = *((float *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((float *)a2 + 21) = result;
  return result;
}

float CMMsl::CoprocessorReplyGaitMetrics::CoprocessorReplyGaitMetrics(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135D018;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a2 + 92) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  result = *(float *)(a2 + 84);
  *(float *)(a1 + 84) = result;
  return result;
}

CMMsl *CMMsl::CoprocessorReplyGaitMetrics::operator=(CMMsl *this, uint64_t a2, CMMsl::CoprocessorReplyGaitMetrics *a3)
{
  uint64_t v4;
  _QWORD v6[3];
  int v7;
  int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  __int128 v13;
  int v14;

  if (this != (CMMsl *)a2)
  {
    v14 = *(_DWORD *)(a2 + 92);
    *(_DWORD *)(a2 + 92) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v6[0] = &off_25135D018;
    v6[1] = v4;
    v8 = *(_DWORD *)(a2 + 28);
    v7 = *(_DWORD *)(a2 + 24);
    v11 = *(_DWORD *)(a2 + 56);
    v6[2] = *(_QWORD *)(a2 + 16);
    v10 = *(_QWORD *)(a2 + 48);
    v9 = *(_OWORD *)(a2 + 32);
    v12 = *(_OWORD *)(a2 + 60);
    v13 = *(_OWORD *)(a2 + 76);
    CMMsl::swap(this, (CMMsl::CoprocessorReplyGaitMetrics *)v6, a3);
    PB::Base::~Base((PB::Base *)v6);
  }
  return this;
}

uint64_t CMMsl::CoprocessorReplyGaitMetrics::formatText(CMMsl::CoprocessorReplyGaitMetrics *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "asymmetryProbabilityEstimate", *((float *)this + 4));
    v5 = *((_DWORD *)this + 23);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_25;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "cycleTime", *((float *)this + 5));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "deviceSide");
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "doubleSupportEstimate", *((float *)this + 7));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "gaitPhase");
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "segmentsRejectedByIsCadenceConcordant");
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "segmentsRejectedByIsFeasibleWalkingSpeed");
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "segmentsRejectedByIsNotRunning");
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "segmentsRejectedByIsPendular");
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "segmentsRejectedByIsSufficientVerticalTwist");
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "segmentsRejectedByIsSwingStanceCycle");
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0)
      goto LABEL_14;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "stepIndexOfHarmonicityAP", *((float *)this + 15));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x2000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "stepIndexOfHarmonicityML", *((float *)this + 16));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0)
      goto LABEL_16;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "stepIndexOfHarmonicityVT", *((float *)this + 17));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000) == 0)
      goto LABEL_17;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "stepLengthEstimate", *((float *)this + 18));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "swingIndexOfHarmonicityAP", *((float *)this + 19));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0)
      goto LABEL_19;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "swingIndexOfHarmonicityML", *((float *)this + 20));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 1) == 0)
      goto LABEL_20;
LABEL_41:
    PB::TextFormatter::format(a2, "timestamp");
    if ((*((_DWORD *)this + 23) & 0x80000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_21;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "swingIndexOfHarmonicityVT", *((float *)this + 21));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 1) != 0)
    goto LABEL_41;
LABEL_20:
  if ((v5 & 0x80000) != 0)
LABEL_21:
    PB::TextFormatter::format(a2, "walkSpeedEstimate", *((float *)this + 22));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::CoprocessorReplyGaitMetrics::readFrom(CMMsl::CoprocessorReplyGaitMetrics *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  uint64_t v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  char v55;
  unint64_t v56;
  uint64_t v57;
  char v58;
  unsigned int v59;
  uint64_t v60;
  char v61;
  unint64_t v62;
  uint64_t v63;
  char v64;
  unsigned int v65;
  uint64_t v66;
  char v67;
  unint64_t v68;
  uint64_t v69;
  char v70;
  unsigned int v71;
  uint64_t v72;
  char v73;
  char v74;
  unsigned int v75;
  unint64_t v76;
  char v77;
  char v78;
  unsigned int v79;
  unint64_t v80;
  char v81;
  char v82;
  unsigned int v83;
  unint64_t v84;
  char v85;
  char v86;
  unsigned int v87;
  unint64_t v88;
  char v89;
  char v90;
  unsigned int v91;
  unint64_t v92;
  char v93;
  char v94;
  unsigned int v95;
  unint64_t v96;
  char v97;
  char v98;
  unsigned int v99;
  unint64_t v100;
  char v101;
  char v102;
  unsigned int v103;
  unint64_t v104;
  char v105;
  char v106;
  unsigned int v107;
  unint64_t v108;
  char v109;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_229;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 23) |= 1u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v74 = 0;
          v75 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              v24 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_188;
            }
            v76 = v20++;
            v77 = *(_BYTE *)(v21 + v76);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v77 & 0x7F) << v74;
            if ((v77 & 0x80) == 0)
              break;
            v74 += 7;
            v14 = v75++ > 8;
            if (v14)
            {
              v24 = 0;
LABEL_187:
              v2 = v76 + 1;
              goto LABEL_188;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v24 = 0;
          goto LABEL_187;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_188;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        v24 = 0;
LABEL_188:
        *((_QWORD *)this + 1) = v24;
        break;
      case 2u:
        *((_DWORD *)this + 23) |= 0x80000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_118;
        *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_183;
      case 3u:
        *((_DWORD *)this + 23) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_118;
        *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_183;
      case 4u:
        *((_DWORD *)this + 23) |= 0x8000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_118;
        *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_183;
      case 5u:
        *((_DWORD *)this + 23) |= 0x20u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v78 = 0;
          v79 = 0;
          v30 = 0;
          if (v2 <= v26)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_193;
            }
            v80 = v26++;
            v81 = *(_BYTE *)(v27 + v80);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v81 & 0x7F) << v78;
            if ((v81 & 0x80) == 0)
              break;
            v78 += 7;
            v14 = v79++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_192:
              v2 = v80 + 1;
              goto LABEL_193;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v30) = 0;
          goto LABEL_192;
        }
        v28 = 0;
        v29 = 0;
        v30 = 0;
        do
        {
          v2 = v26 + 1;
          *((_QWORD *)a2 + 1) = v26 + 1;
          v31 = *(_BYTE *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0)
            goto LABEL_193;
          v28 += 7;
          v26 = v2;
          v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_193:
        *((_DWORD *)this + 8) = v30;
        break;
      case 6u:
        *((_DWORD *)this + 23) |= 8u;
        v32 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v33 = *(_QWORD *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
        {
          v82 = 0;
          v83 = 0;
          v36 = 0;
          if (v2 <= v32)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v32)
            {
              LODWORD(v36) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_198;
            }
            v84 = v32++;
            v85 = *(_BYTE *)(v33 + v84);
            *((_QWORD *)a2 + 1) = v32;
            v36 |= (unint64_t)(v85 & 0x7F) << v82;
            if ((v85 & 0x80) == 0)
              break;
            v82 += 7;
            v14 = v83++ > 8;
            if (v14)
            {
              LODWORD(v36) = 0;
LABEL_197:
              v2 = v84 + 1;
              goto LABEL_198;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v36) = 0;
          goto LABEL_197;
        }
        v34 = 0;
        v35 = 0;
        v36 = 0;
        do
        {
          v2 = v32 + 1;
          *((_QWORD *)a2 + 1) = v32 + 1;
          v37 = *(_BYTE *)(v33 + v32);
          v36 |= (unint64_t)(v37 & 0x7F) << v34;
          if ((v37 & 0x80) == 0)
            goto LABEL_198;
          v34 += 7;
          v32 = v2;
          v14 = v35++ > 8;
        }
        while (!v14);
        LODWORD(v36) = 0;
LABEL_198:
        *((_DWORD *)this + 6) = v36;
        break;
      case 7u:
        *((_DWORD *)this + 23) |= 0x800u;
        v38 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v39 = *(_QWORD *)a2;
        if (v38 > 0xFFFFFFFFFFFFFFF5 || v38 + 10 > v2)
        {
          v86 = 0;
          v87 = 0;
          v42 = 0;
          if (v2 <= v38)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v38)
            {
              LODWORD(v42) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_203;
            }
            v88 = v38++;
            v89 = *(_BYTE *)(v39 + v88);
            *((_QWORD *)a2 + 1) = v38;
            v42 |= (unint64_t)(v89 & 0x7F) << v86;
            if ((v89 & 0x80) == 0)
              break;
            v86 += 7;
            v14 = v87++ > 8;
            if (v14)
            {
              LODWORD(v42) = 0;
LABEL_202:
              v2 = v88 + 1;
              goto LABEL_203;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v42) = 0;
          goto LABEL_202;
        }
        v40 = 0;
        v41 = 0;
        v42 = 0;
        do
        {
          v2 = v38 + 1;
          *((_QWORD *)a2 + 1) = v38 + 1;
          v43 = *(_BYTE *)(v39 + v38);
          v42 |= (unint64_t)(v43 & 0x7F) << v40;
          if ((v43 & 0x80) == 0)
            goto LABEL_203;
          v40 += 7;
          v38 = v2;
          v14 = v41++ > 8;
        }
        while (!v14);
        LODWORD(v42) = 0;
LABEL_203:
        *((_DWORD *)this + 14) = v42;
        break;
      case 8u:
        *((_DWORD *)this + 23) |= 0x100u;
        v44 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v45 = *(_QWORD *)a2;
        if (v44 > 0xFFFFFFFFFFFFFFF5 || v44 + 10 > v2)
        {
          v90 = 0;
          v91 = 0;
          v48 = 0;
          if (v2 <= v44)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v44)
            {
              LODWORD(v48) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_208;
            }
            v92 = v44++;
            v93 = *(_BYTE *)(v45 + v92);
            *((_QWORD *)a2 + 1) = v44;
            v48 |= (unint64_t)(v93 & 0x7F) << v90;
            if ((v93 & 0x80) == 0)
              break;
            v90 += 7;
            v14 = v91++ > 8;
            if (v14)
            {
              LODWORD(v48) = 0;
LABEL_207:
              v2 = v92 + 1;
              goto LABEL_208;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v48) = 0;
          goto LABEL_207;
        }
        v46 = 0;
        v47 = 0;
        v48 = 0;
        do
        {
          v2 = v44 + 1;
          *((_QWORD *)a2 + 1) = v44 + 1;
          v49 = *(_BYTE *)(v45 + v44);
          v48 |= (unint64_t)(v49 & 0x7F) << v46;
          if ((v49 & 0x80) == 0)
            goto LABEL_208;
          v46 += 7;
          v44 = v2;
          v14 = v47++ > 8;
        }
        while (!v14);
        LODWORD(v48) = 0;
LABEL_208:
        *((_DWORD *)this + 11) = v48;
        break;
      case 9u:
        *((_DWORD *)this + 23) |= 0x80u;
        v50 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v51 = *(_QWORD *)a2;
        if (v50 > 0xFFFFFFFFFFFFFFF5 || v50 + 10 > v2)
        {
          v94 = 0;
          v95 = 0;
          v54 = 0;
          if (v2 <= v50)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v50)
            {
              LODWORD(v54) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_213;
            }
            v96 = v50++;
            v97 = *(_BYTE *)(v51 + v96);
            *((_QWORD *)a2 + 1) = v50;
            v54 |= (unint64_t)(v97 & 0x7F) << v94;
            if ((v97 & 0x80) == 0)
              break;
            v94 += 7;
            v14 = v95++ > 8;
            if (v14)
            {
              LODWORD(v54) = 0;
LABEL_212:
              v2 = v96 + 1;
              goto LABEL_213;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v54) = 0;
          goto LABEL_212;
        }
        v52 = 0;
        v53 = 0;
        v54 = 0;
        do
        {
          v2 = v50 + 1;
          *((_QWORD *)a2 + 1) = v50 + 1;
          v55 = *(_BYTE *)(v51 + v50);
          v54 |= (unint64_t)(v55 & 0x7F) << v52;
          if ((v55 & 0x80) == 0)
            goto LABEL_213;
          v52 += 7;
          v50 = v2;
          v14 = v53++ > 8;
        }
        while (!v14);
        LODWORD(v54) = 0;
LABEL_213:
        *((_DWORD *)this + 10) = v54;
        break;
      case 0xAu:
        *((_DWORD *)this + 23) |= 0x200u;
        v56 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v57 = *(_QWORD *)a2;
        if (v56 > 0xFFFFFFFFFFFFFFF5 || v56 + 10 > v2)
        {
          v98 = 0;
          v99 = 0;
          v60 = 0;
          if (v2 <= v56)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v56)
            {
              LODWORD(v60) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_218;
            }
            v100 = v56++;
            v101 = *(_BYTE *)(v57 + v100);
            *((_QWORD *)a2 + 1) = v56;
            v60 |= (unint64_t)(v101 & 0x7F) << v98;
            if ((v101 & 0x80) == 0)
              break;
            v98 += 7;
            v14 = v99++ > 8;
            if (v14)
            {
              LODWORD(v60) = 0;
LABEL_217:
              v2 = v100 + 1;
              goto LABEL_218;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v60) = 0;
          goto LABEL_217;
        }
        v58 = 0;
        v59 = 0;
        v60 = 0;
        do
        {
          v2 = v56 + 1;
          *((_QWORD *)a2 + 1) = v56 + 1;
          v61 = *(_BYTE *)(v57 + v56);
          v60 |= (unint64_t)(v61 & 0x7F) << v58;
          if ((v61 & 0x80) == 0)
            goto LABEL_218;
          v58 += 7;
          v56 = v2;
          v14 = v59++ > 8;
        }
        while (!v14);
        LODWORD(v60) = 0;
LABEL_218:
        *((_DWORD *)this + 12) = v60;
        break;
      case 0xBu:
        *((_DWORD *)this + 23) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_118;
        *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_183;
      case 0xCu:
        *((_DWORD *)this + 23) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_118;
        *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_183;
      case 0xDu:
        *((_DWORD *)this + 23) |= 0x400u;
        v62 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v63 = *(_QWORD *)a2;
        if (v62 > 0xFFFFFFFFFFFFFFF5 || v62 + 10 > v2)
        {
          v102 = 0;
          v103 = 0;
          v66 = 0;
          if (v2 <= v62)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v62)
            {
              LODWORD(v66) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_223;
            }
            v104 = v62++;
            v105 = *(_BYTE *)(v63 + v104);
            *((_QWORD *)a2 + 1) = v62;
            v66 |= (unint64_t)(v105 & 0x7F) << v102;
            if ((v105 & 0x80) == 0)
              break;
            v102 += 7;
            v14 = v103++ > 8;
            if (v14)
            {
              LODWORD(v66) = 0;
LABEL_222:
              v2 = v104 + 1;
              goto LABEL_223;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v66) = 0;
          goto LABEL_222;
        }
        v64 = 0;
        v65 = 0;
        v66 = 0;
        do
        {
          v2 = v62 + 1;
          *((_QWORD *)a2 + 1) = v62 + 1;
          v67 = *(_BYTE *)(v63 + v62);
          v66 |= (unint64_t)(v67 & 0x7F) << v64;
          if ((v67 & 0x80) == 0)
            goto LABEL_223;
          v64 += 7;
          v62 = v2;
          v14 = v65++ > 8;
        }
        while (!v14);
        LODWORD(v66) = 0;
LABEL_223:
        *((_DWORD *)this + 13) = v66;
        break;
      case 0xEu:
        *((_DWORD *)this + 23) |= 0x40u;
        v68 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v69 = *(_QWORD *)a2;
        if (v68 > 0xFFFFFFFFFFFFFFF5 || v68 + 10 > v2)
        {
          v106 = 0;
          v107 = 0;
          v72 = 0;
          if (v2 <= v68)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v68)
            {
              LODWORD(v72) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_228;
            }
            v108 = v68++;
            v109 = *(_BYTE *)(v69 + v108);
            *((_QWORD *)a2 + 1) = v68;
            v72 |= (unint64_t)(v109 & 0x7F) << v106;
            if ((v109 & 0x80) == 0)
              break;
            v106 += 7;
            v14 = v107++ > 8;
            if (v14)
            {
              LODWORD(v72) = 0;
LABEL_227:
              v2 = v108 + 1;
              goto LABEL_228;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v72) = 0;
          goto LABEL_227;
        }
        v70 = 0;
        v71 = 0;
        v72 = 0;
        do
        {
          v2 = v68 + 1;
          *((_QWORD *)a2 + 1) = v68 + 1;
          v73 = *(_BYTE *)(v69 + v68);
          v72 |= (unint64_t)(v73 & 0x7F) << v70;
          if ((v73 & 0x80) == 0)
            goto LABEL_228;
          v70 += 7;
          v68 = v2;
          v14 = v71++ > 8;
        }
        while (!v14);
        LODWORD(v72) = 0;
LABEL_228:
        *((_DWORD *)this + 9) = v72;
        break;
      case 0xFu:
        *((_DWORD *)this + 23) |= 0x1000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_118;
        *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_183;
      case 0x10u:
        *((_DWORD *)this + 23) |= 0x2000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_118;
        *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_183;
      case 0x11u:
        *((_DWORD *)this + 23) |= 0x4000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_118;
        *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_183;
      case 0x12u:
        *((_DWORD *)this + 23) |= 0x10000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_118;
        *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_183;
      case 0x13u:
        *((_DWORD *)this + 23) |= 0x20000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_118;
        *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_183;
      case 0x14u:
        *((_DWORD *)this + 23) |= 0x40000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_183:
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_118:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_229:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::CoprocessorReplyGaitMetrics::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 92);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_DWORD *)(v3 + 92);
    if ((v4 & 0x80000) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_24;
    }
  }
  else if ((v4 & 0x80000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x8000) == 0)
      goto LABEL_5;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x8000) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0)
      goto LABEL_7;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x800) == 0)
      goto LABEL_8;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x800) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x200) == 0)
  {
LABEL_11:
    if ((v4 & 4) == 0)
      goto LABEL_12;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 4) == 0)
  {
LABEL_12:
    if ((v4 & 2) == 0)
      goto LABEL_13;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 2) == 0)
  {
LABEL_13:
    if ((v4 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x400) == 0)
  {
LABEL_14:
    if ((v4 & 0x40) == 0)
      goto LABEL_15;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x40) == 0)
  {
LABEL_15:
    if ((v4 & 0x1000) == 0)
      goto LABEL_16;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x1000) == 0)
  {
LABEL_16:
    if ((v4 & 0x2000) == 0)
      goto LABEL_17;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 60));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x2000) == 0)
  {
LABEL_17:
    if ((v4 & 0x4000) == 0)
      goto LABEL_18;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x4000) == 0)
  {
LABEL_18:
    if ((v4 & 0x10000) == 0)
      goto LABEL_19;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 68));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x10000) == 0)
  {
LABEL_19:
    if ((v4 & 0x20000) == 0)
      goto LABEL_20;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 76));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x20000) == 0)
  {
LABEL_20:
    if ((v4 & 0x40000) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 84));
  }
LABEL_40:
  this = PB::Writer::write(a2, *(float *)(v3 + 80));
  if ((*(_DWORD *)(v3 + 92) & 0x40000) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 84));
  return this;
}

BOOL CMMsl::CoprocessorReplyGaitMetrics::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 92);
  v3 = *(_DWORD *)(a2 + 92);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x40000) == 0;
  if ((v2 & 0x40000) != 0)
    return (v3 & 0x40000) != 0 && *(float *)(a1 + 84) == *(float *)(a2 + 84);
  return v4;
}

uint64_t CMMsl::CoprocessorReplyGaitMetrics::hash_value(CMMsl::CoprocessorReplyGaitMetrics *this)
{
  int v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  float v31;
  uint64_t v32;

  v1 = *((_DWORD *)this + 23);
  if ((v1 & 1) == 0)
  {
    v2 = 0;
    if ((v1 & 0x80000) != 0)
      goto LABEL_3;
LABEL_45:
    v4 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_6;
LABEL_46:
    v6 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_9;
LABEL_47:
    v8 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_12;
    goto LABEL_48;
  }
  v2 = *((_QWORD *)this + 1);
  if ((v1 & 0x80000) == 0)
    goto LABEL_45;
LABEL_3:
  v3 = *((float *)this + 22);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_46;
LABEL_6:
  v5 = *((float *)this + 7);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((v1 & 0x8000) == 0)
    goto LABEL_47;
LABEL_9:
  v7 = *((float *)this + 18);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_12:
    v9 = *((unsigned int *)this + 8);
    if ((v1 & 8) != 0)
      goto LABEL_13;
    goto LABEL_49;
  }
LABEL_48:
  v9 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_13:
    v10 = *((unsigned int *)this + 6);
    if ((v1 & 0x800) != 0)
      goto LABEL_14;
    goto LABEL_50;
  }
LABEL_49:
  v10 = 0;
  if ((v1 & 0x800) != 0)
  {
LABEL_14:
    v11 = *((unsigned int *)this + 14);
    if ((v1 & 0x100) != 0)
      goto LABEL_15;
    goto LABEL_51;
  }
LABEL_50:
  v11 = 0;
  if ((v1 & 0x100) != 0)
  {
LABEL_15:
    v12 = *((unsigned int *)this + 11);
    if ((v1 & 0x80) != 0)
      goto LABEL_16;
    goto LABEL_52;
  }
LABEL_51:
  v12 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_16:
    v13 = *((unsigned int *)this + 10);
    if ((v1 & 0x200) != 0)
      goto LABEL_17;
    goto LABEL_53;
  }
LABEL_52:
  v13 = 0;
  if ((v1 & 0x200) != 0)
  {
LABEL_17:
    v14 = *((unsigned int *)this + 12);
    if ((v1 & 4) != 0)
      goto LABEL_18;
LABEL_54:
    v16 = 0;
    if ((v1 & 2) != 0)
      goto LABEL_21;
LABEL_55:
    v18 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_24;
    goto LABEL_56;
  }
LABEL_53:
  v14 = 0;
  if ((v1 & 4) == 0)
    goto LABEL_54;
LABEL_18:
  v15 = *((float *)this + 5);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_55;
LABEL_21:
  v17 = *((float *)this + 4);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  if ((v1 & 0x400) != 0)
  {
LABEL_24:
    v19 = *((unsigned int *)this + 13);
    if ((v1 & 0x40) != 0)
      goto LABEL_25;
    goto LABEL_57;
  }
LABEL_56:
  v19 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_25:
    v20 = *((unsigned int *)this + 9);
    if ((v1 & 0x1000) != 0)
      goto LABEL_26;
LABEL_58:
    v22 = 0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_29;
LABEL_59:
    v24 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_32;
LABEL_60:
    v26 = 0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_35;
LABEL_61:
    v28 = 0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_38;
    goto LABEL_62;
  }
LABEL_57:
  v20 = 0;
  if ((v1 & 0x1000) == 0)
    goto LABEL_58;
LABEL_26:
  v21 = *((float *)this + 15);
  v22 = LODWORD(v21);
  if (v21 == 0.0)
    v22 = 0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_59;
LABEL_29:
  v23 = *((float *)this + 16);
  v24 = LODWORD(v23);
  if (v23 == 0.0)
    v24 = 0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_60;
LABEL_32:
  v25 = *((float *)this + 17);
  v26 = LODWORD(v25);
  if (v25 == 0.0)
    v26 = 0;
  if ((v1 & 0x10000) == 0)
    goto LABEL_61;
LABEL_35:
  v27 = *((float *)this + 19);
  v28 = LODWORD(v27);
  if (v27 == 0.0)
    v28 = 0;
  if ((v1 & 0x20000) != 0)
  {
LABEL_38:
    v29 = *((float *)this + 20);
    v30 = LODWORD(v29);
    if (v29 == 0.0)
      v30 = 0;
    if ((v1 & 0x40000) != 0)
      goto LABEL_41;
LABEL_63:
    v32 = 0;
    return v4 ^ v2 ^ v6 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v16 ^ v18 ^ v19 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v32;
  }
LABEL_62:
  v30 = 0;
  if ((v1 & 0x40000) == 0)
    goto LABEL_63;
LABEL_41:
  v31 = *((float *)this + 21);
  v32 = LODWORD(v31);
  if (v31 == 0.0)
    v32 = 0;
  return v4 ^ v2 ^ v6 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v16 ^ v18 ^ v19 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v32;
}

uint64_t CMMsl::CourseConstraints::CourseConstraints(uint64_t this)
{
  *(_QWORD *)this = &off_25135D050;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135D050;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::CourseConstraints::~CourseConstraints(CMMsl::CourseConstraints *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::CourseConstraints::CourseConstraints(CMMsl::CourseConstraints *this, const CMMsl::CourseConstraints *a2)
{
  char v2;
  uint64_t v3;

  *(_QWORD *)this = &off_25135D050;
  *((_DWORD *)this + 5) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) == 0)
  {
    v2 = 2;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return *(float *)&v3;
    goto LABEL_5;
  }
  v3 = *((_QWORD *)a2 + 1);
  *((_BYTE *)this + 20) = 1;
  *((_QWORD *)this + 1) = v3;
  v2 = 3;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    LODWORD(v3) = *((_DWORD *)a2 + 4);
    *((_BYTE *)this + 20) = v2;
    *((_DWORD *)this + 4) = v3;
  }
  return *(float *)&v3;
}

{
  char v2;
  uint64_t v3;

  *(_QWORD *)this = &off_25135D050;
  *((_DWORD *)this + 5) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) == 0)
  {
    v2 = 2;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return *(float *)&v3;
    goto LABEL_5;
  }
  v3 = *((_QWORD *)a2 + 1);
  *((_BYTE *)this + 20) = 1;
  *((_QWORD *)this + 1) = v3;
  v2 = 3;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    LODWORD(v3) = *((_DWORD *)a2 + 4);
    *((_BYTE *)this + 20) = v2;
    *((_DWORD *)this + 4) = v3;
  }
  return *(float *)&v3;
}

uint64_t CMMsl::CourseConstraints::operator=(uint64_t a1, uint64_t a2, double a3, float a4)
{
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  int v9;
  _QWORD v11[2];
  int v12;
  int v13;

  if (a1 != a2)
  {
    v11[0] = &off_25135D050;
    v13 = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      LOBYTE(v13) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        a4 = *(float *)(a2 + 16);
        LOBYTE(v13) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v13;
    v13 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    *(double *)(a1 + 8) = a3;
    v11[1] = v8;
    v9 = *(_DWORD *)(a1 + 16);
    *(float *)(a1 + 16) = a4;
    v12 = v9;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::CourseConstraints *a2, CMMsl::CourseConstraints *a3)
{
  int v3;
  uint64_t v4;
  float result;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  return result;
}

float CMMsl::CourseConstraints::CourseConstraints(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135D050;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_25135D050;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::CourseConstraints::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  _QWORD v9[2];
  int v10;
  int v11;

  if (a1 != a2)
  {
    v9[0] = &off_25135D050;
    v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_DWORD *)(a2 + 16);
    v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    v11 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v9[1] = v7;
    LODWORD(v4) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v5;
    v10 = v4;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::CourseConstraints::formatText(CMMsl::CourseConstraints *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "yaw", *((float *)this + 4));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::CourseConstraints::readFrom(CMMsl::CourseConstraints *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          v14 = v16++ > 8;
          if (v14)
            goto LABEL_26;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_26;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_30;
        *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        v2 = *((_QWORD *)a2 + 1) + 4;
      }
      else
      {
        if ((v11 >> 3) != 1)
        {
LABEL_26:
          result = PB::Reader::skip(a2);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          goto LABEL_33;
        }
        *((_BYTE *)this + 20) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
        {
LABEL_30:
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_33;
        }
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        v2 = *((_QWORD *)a2 + 1) + 8;
      }
      *((_QWORD *)a2 + 1) = v2;
LABEL_33:
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::CourseConstraints::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 16));
  return this;
}

BOOL CMMsl::CourseConstraints::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(float *)(a1 + 16) == *(float *)(a2 + 16);
  return v2;
}

uint64_t CMMsl::CourseConstraints::hash_value(CMMsl::CourseConstraints *this)
{
  double v1;
  float v2;
  uint64_t v3;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_9:
    v3 = 0;
    return v3 ^ *(_QWORD *)&v1;
  }
  v1 = 0.0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_9;
LABEL_3:
  v2 = *((float *)this + 4);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  return v3 ^ *(_QWORD *)&v1;
}

_QWORD *CMMsl::CourseCorrection::CourseCorrection(_QWORD *this)
{
  *this = &off_25135D088;
  this[1] = 0;
  return this;
}

{
  *this = &off_25135D088;
  this[1] = 0;
  return this;
}

void CMMsl::CourseCorrection::~CourseCorrection(CMMsl::CourseCorrection *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135D088;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135D088;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135D088;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::CourseCorrection *CMMsl::CourseCorrection::CourseCorrection(CMMsl::CourseCorrection *this, const CMMsl::DeviceMotionCorrection **a2)
{
  CMMsl::DeviceMotionCorrection *v4;
  CMMsl::DeviceMotionCorrection *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_25135D088;
  *((_QWORD *)this + 1) = 0;
  if (a2[1])
  {
    v4 = (CMMsl::DeviceMotionCorrection *)operator new();
    v5 = CMMsl::DeviceMotionCorrection::DeviceMotionCorrection(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return this;
}

uint64_t CMMsl::CourseCorrection::operator=(uint64_t a1, const CMMsl::DeviceMotionCorrection **a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::CourseCorrection *__hidden);
  uint64_t v6;

  if ((const CMMsl::DeviceMotionCorrection **)a1 != a2)
  {
    CMMsl::CourseCorrection::CourseCorrection((CMMsl::CourseCorrection *)&v5, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v6;
    v5 = &off_25135D088;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::CourseCorrection *a2, CMMsl::CourseCorrection *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::CourseCorrection::CourseCorrection(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_25135D088;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_25135D088;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::CourseCorrection::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = &off_25135D088;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::CourseCorrection::formatText(CMMsl::CourseCorrection *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "correction");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::CourseCorrection::readFrom(CMMsl::CourseCorrection *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v19 = operator new();
        *(_QWORD *)v19 = &off_25135D130;
        *(_DWORD *)(v19 + 160) = 0;
        *(_OWORD *)(v19 + 8) = 0u;
        *(_OWORD *)(v19 + 24) = 0u;
        *(_OWORD *)(v19 + 40) = 0u;
        *(_OWORD *)(v19 + 56) = 0u;
        *(_OWORD *)(v19 + 72) = 0u;
        *(_OWORD *)(v19 + 88) = 0u;
        *(_OWORD *)(v19 + 104) = 0u;
        *(_OWORD *)(v19 + 120) = 0u;
        *(_OWORD *)(v19 + 136) = 0u;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = *((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_27;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::CourseCorrection::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2);
  return this;
}

BOOL CMMsl::CourseCorrection::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::DeviceMotionCorrection::operator==(v2, v3);
  return result;
}

CMMsl::DeviceMotionCorrection *CMMsl::CourseCorrection::hash_value(CMMsl::CourseCorrection *this)
{
  CMMsl::DeviceMotionCorrection *result;

  result = (CMMsl::DeviceMotionCorrection *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::DeviceMotionCorrection *)CMMsl::DeviceMotionCorrection::hash_value(result);
  return result;
}

_QWORD *CMMsl::CourseCorrection::makeCorrection(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135D130;
    *(_DWORD *)(v2 + 160) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_OWORD *)(v2 + 120) = 0u;
    *(_OWORD *)(v2 + 136) = 0u;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void CMMsl::DeviceMotion::~DeviceMotion(CMMsl::DeviceMotion *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::DeviceMotion::DeviceMotion(CMMsl::DeviceMotion *this, const CMMsl::DeviceMotion *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  char v10;

  *(_QWORD *)this = &off_25135D0C0;
  *((_DWORD *)this + 31) = 0;
  v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x10) != 0)
  {
    v4 = *((_QWORD *)a2 + 5);
    v3 = 16;
    *((_DWORD *)this + 31) = 16;
    *((_QWORD *)this + 5) = v4;
    v2 = *((_DWORD *)a2 + 31);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    v4 = *((_QWORD *)a2 + 2);
    v3 |= 2u;
    *((_DWORD *)this + 31) = v3;
    *((_QWORD *)this + 2) = v4;
    v2 = *((_DWORD *)a2 + 31);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v4 = *((_QWORD *)a2 + 3);
    v3 |= 4u;
    *((_DWORD *)this + 31) = v3;
    *((_QWORD *)this + 3) = v4;
    v2 = *((_DWORD *)a2 + 31);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0)
        goto LABEL_9;
      goto LABEL_31;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v4 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *((_DWORD *)this + 31) = v3;
  *((_QWORD *)this + 4) = v4;
  v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 0x40000) == 0)
      goto LABEL_10;
    goto LABEL_32;
  }
LABEL_31:
  v4 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *((_DWORD *)this + 31) = v3;
  *((_QWORD *)this + 1) = v4;
  v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x40000) == 0)
  {
LABEL_10:
    if ((v2 & 0x80000) == 0)
      goto LABEL_11;
    goto LABEL_33;
  }
LABEL_32:
  LODWORD(v4) = *((_DWORD *)a2 + 25);
  v3 |= 0x40000u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 25) = v4;
  v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x80000) == 0)
  {
LABEL_11:
    if ((v2 & 0x100000) == 0)
      goto LABEL_12;
    goto LABEL_34;
  }
LABEL_33:
  LODWORD(v4) = *((_DWORD *)a2 + 26);
  v3 |= 0x80000u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 26) = v4;
  v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x100000) == 0)
  {
LABEL_12:
    if ((v2 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_35;
  }
LABEL_34:
  LODWORD(v4) = *((_DWORD *)a2 + 27);
  v3 |= 0x100000u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 27) = v4;
  v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x2000) == 0)
  {
LABEL_13:
    if ((v2 & 0x4000) == 0)
      goto LABEL_14;
    goto LABEL_36;
  }
LABEL_35:
  LODWORD(v4) = *((_DWORD *)a2 + 20);
  v3 |= 0x2000u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 20) = v4;
  v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x4000) == 0)
  {
LABEL_14:
    if ((v2 & 0x8000) == 0)
      goto LABEL_15;
    goto LABEL_37;
  }
LABEL_36:
  LODWORD(v4) = *((_DWORD *)a2 + 21);
  v3 |= 0x4000u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 21) = v4;
  v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x8000) == 0)
  {
LABEL_15:
    if ((v2 & 0x100) == 0)
      goto LABEL_16;
    goto LABEL_38;
  }
LABEL_37:
  LODWORD(v4) = *((_DWORD *)a2 + 22);
  v3 |= 0x8000u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 22) = v4;
  v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x100) == 0)
  {
LABEL_16:
    if ((v2 & 0x200) == 0)
      goto LABEL_17;
    goto LABEL_39;
  }
LABEL_38:
  LODWORD(v4) = *((_DWORD *)a2 + 15);
  v3 |= 0x100u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 15) = v4;
  v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x200) == 0)
  {
LABEL_17:
    if ((v2 & 0x400) == 0)
      goto LABEL_18;
    goto LABEL_40;
  }
LABEL_39:
  LODWORD(v4) = *((_DWORD *)a2 + 16);
  v3 |= 0x200u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 16) = v4;
  v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x400) == 0)
  {
LABEL_18:
    if ((v2 & 0x80) == 0)
      goto LABEL_19;
    goto LABEL_41;
  }
LABEL_40:
  LODWORD(v4) = *((_DWORD *)a2 + 17);
  v3 |= 0x400u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 17) = v4;
  v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x80) == 0)
  {
LABEL_19:
    if ((v2 & 0x800) == 0)
      goto LABEL_20;
    goto LABEL_42;
  }
LABEL_41:
  v5 = *((_DWORD *)a2 + 14);
  v3 |= 0x80u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 14) = v5;
  v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x800) == 0)
  {
LABEL_20:
    if ((v2 & 0x20000) == 0)
      goto LABEL_21;
    goto LABEL_43;
  }
LABEL_42:
  LODWORD(v4) = *((_DWORD *)a2 + 18);
  v3 |= 0x800u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 18) = v4;
  v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x20000) == 0)
  {
LABEL_21:
    if ((v2 & 0x20) == 0)
      goto LABEL_22;
    goto LABEL_44;
  }
LABEL_43:
  LODWORD(v4) = *((_DWORD *)a2 + 24);
  v3 |= 0x20000u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 24) = v4;
  v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x20) == 0)
  {
LABEL_22:
    if ((v2 & 0x1000) == 0)
      goto LABEL_23;
    goto LABEL_45;
  }
LABEL_44:
  LODWORD(v4) = *((_DWORD *)a2 + 12);
  v3 |= 0x20u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 12) = v4;
  v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x1000) == 0)
  {
LABEL_23:
    if ((v2 & 0x40) == 0)
      goto LABEL_24;
    goto LABEL_46;
  }
LABEL_45:
  v6 = *((_DWORD *)a2 + 19);
  v3 |= 0x1000u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 19) = v6;
  v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x40) == 0)
  {
LABEL_24:
    if ((v2 & 0x10000) == 0)
      goto LABEL_25;
    goto LABEL_47;
  }
LABEL_46:
  v7 = *((_DWORD *)a2 + 13);
  v3 |= 0x40u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 13) = v7;
  v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x10000) == 0)
  {
LABEL_25:
    if ((v2 & 0x200000) == 0)
      goto LABEL_26;
    goto LABEL_48;
  }
LABEL_47:
  v8 = *((_DWORD *)a2 + 23);
  v3 |= 0x10000u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 23) = v8;
  v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x200000) == 0)
  {
LABEL_26:
    if ((v2 & 0x800000) == 0)
      goto LABEL_27;
    goto LABEL_49;
  }
LABEL_48:
  v9 = *((_DWORD *)a2 + 28);
  v3 |= 0x200000u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 28) = v9;
  v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x800000) == 0)
  {
LABEL_27:
    if ((v2 & 0x400000) == 0)
      return *(float *)&v4;
    goto LABEL_50;
  }
LABEL_49:
  v10 = *((_BYTE *)a2 + 120);
  v3 |= 0x800000u;
  *((_DWORD *)this + 31) = v3;
  *((_BYTE *)this + 120) = v10;
  if ((*((_DWORD *)a2 + 31) & 0x400000) == 0)
    return *(float *)&v4;
LABEL_50:
  LODWORD(v4) = *((_DWORD *)a2 + 29);
  *((_DWORD *)this + 31) = v3 | 0x400000;
  *((_DWORD *)this + 29) = v4;
  return *(float *)&v4;
}

CMMsl *CMMsl::DeviceMotion::operator=(CMMsl *a1, const CMMsl::DeviceMotion *a2)
{
  CMMsl::DeviceMotion *v3;
  _BYTE v5[128];

  if (a1 != a2)
  {
    CMMsl::DeviceMotion::DeviceMotion((CMMsl::DeviceMotion *)v5, a2);
    CMMsl::swap(a1, (CMMsl::DeviceMotion *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::DeviceMotion *a2, CMMsl::DeviceMotion *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  float result;

  v3 = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v3;
  v4 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  v7 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v7;
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v8;
  LODWORD(v8) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v8;
  LODWORD(v8) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v8;
  LODWORD(v8) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v8;
  LODWORD(v8) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v8;
  LODWORD(v8) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v8;
  LODWORD(v8) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v8;
  LODWORD(v8) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v8;
  LODWORD(v8) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v8;
  LODWORD(v8) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v8;
  v9 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v9;
  LODWORD(v8) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v8;
  LODWORD(v8) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v8;
  LODWORD(v8) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v8;
  v10 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v10;
  v11 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v11;
  v12 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v12;
  v13 = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 120);
  *((_BYTE *)this + 120) = *((_BYTE *)a2 + 120);
  *((_BYTE *)a2 + 120) = v13;
  result = *((float *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((float *)a2 + 29) = result;
  return result;
}

float CMMsl::DeviceMotion::DeviceMotion(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135D0C0;
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a2 + 124) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  result = *(float *)(a2 + 116);
  *(float *)(a1 + 116) = result;
  return result;
}

CMMsl *CMMsl::DeviceMotion::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::DeviceMotion *v3;
  _BYTE v5[128];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::DeviceMotion::DeviceMotion((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::DeviceMotion *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::DeviceMotion::formatText(CMMsl::DeviceMotion *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(a2, "accuracy", *((float *)this + 12));
    v5 = *((_DWORD *)this + 31);
    if ((v5 & 0x40) == 0)
    {
LABEL_3:
      if ((v5 & 0x800000) == 0)
        goto LABEL_4;
      goto LABEL_29;
    }
  }
  else if ((v5 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "clientID");
  v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x800000) == 0)
  {
LABEL_4:
    if ((v5 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "isGyroOn");
  v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x80) == 0)
  {
LABEL_5:
    if ((v5 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "magneticFieldCalibrationLevel");
  v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x100) == 0)
  {
LABEL_6:
    if ((v5 & 0x200) == 0)
      goto LABEL_7;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "magneticFieldX", *((float *)this + 15));
  v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x200) == 0)
  {
LABEL_7:
    if ((v5 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "magneticFieldY", *((float *)this + 16));
  v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x400) == 0)
  {
LABEL_8:
    if ((v5 & 0x800) == 0)
      goto LABEL_9;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "magneticFieldZ", *((float *)this + 17));
  v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x800) == 0)
  {
LABEL_9:
    if ((v5 & 0x1000) == 0)
      goto LABEL_10;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "magneticHeading", *((float *)this + 18));
  v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x1000) == 0)
  {
LABEL_10:
    if ((v5 & 1) == 0)
      goto LABEL_11;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "mode");
  v5 = *((_DWORD *)this + 31);
  if ((v5 & 1) == 0)
  {
LABEL_11:
    if ((v5 & 2) == 0)
      goto LABEL_12;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "quaternionW", *((double *)this + 1));
  v5 = *((_DWORD *)this + 31);
  if ((v5 & 2) == 0)
  {
LABEL_12:
    if ((v5 & 4) == 0)
      goto LABEL_13;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "quaternionX", *((double *)this + 2));
  v5 = *((_DWORD *)this + 31);
  if ((v5 & 4) == 0)
  {
LABEL_13:
    if ((v5 & 8) == 0)
      goto LABEL_14;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "quaternionY", *((double *)this + 3));
  v5 = *((_DWORD *)this + 31);
  if ((v5 & 8) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "quaternionZ", *((double *)this + 4));
  v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "rotationRateX", *((float *)this + 20));
  v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "rotationRateY", *((float *)this + 21));
  v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "rotationRateZ", *((float *)this + 22));
  v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x10) == 0)
      goto LABEL_19;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "status");
  v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x10) == 0)
  {
LABEL_19:
    if ((v5 & 0x20000) == 0)
      goto LABEL_20;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 5));
  v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x20000) == 0)
  {
LABEL_20:
    if ((v5 & 0x40000) == 0)
      goto LABEL_21;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "trueHeading", *((float *)this + 24));
  v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x40000) == 0)
  {
LABEL_21:
    if ((v5 & 0x80000) == 0)
      goto LABEL_22;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "userAccelerationX", *((float *)this + 25));
  v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x80000) == 0)
  {
LABEL_22:
    if ((v5 & 0x100000) == 0)
      goto LABEL_23;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "userAccelerationY", *((float *)this + 26));
  v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x100000) == 0)
  {
LABEL_23:
    if ((v5 & 0x200000) == 0)
      goto LABEL_24;
LABEL_49:
    PB::TextFormatter::format(a2, "variant");
    if ((*((_DWORD *)this + 31) & 0x400000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_25;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "userAccelerationZ", *((float *)this + 27));
  v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x200000) != 0)
    goto LABEL_49;
LABEL_24:
  if ((v5 & 0x400000) != 0)
LABEL_25:
    PB::TextFormatter::format(a2, "visionCompassBias", *((float *)this + 29));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::DeviceMotion::readFrom(CMMsl::DeviceMotion *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  char v49;
  int v50;
  BOOL v51;
  char v52;
  unsigned int v53;
  unint64_t v54;
  char v55;
  char v56;
  unsigned int v57;
  unint64_t v58;
  char v59;
  char v60;
  unsigned int v61;
  unint64_t v62;
  char v63;
  char v64;
  unsigned int v65;
  unint64_t v66;
  char v67;
  char v68;
  unsigned int v69;
  unint64_t v70;
  char v71;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_155;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 31) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_114;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_38;
      case 2u:
        *((_DWORD *)this + 31) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_114;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_38;
      case 3u:
        *((_DWORD *)this + 31) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_114;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_38;
      case 4u:
        *((_DWORD *)this + 31) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_114;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_38;
      case 5u:
        *((_DWORD *)this + 31) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_114;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_38:
        v2 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_154;
      case 6u:
        *((_DWORD *)this + 31) |= 0x40000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_114;
        *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_153;
      case 7u:
        *((_DWORD *)this + 31) |= 0x80000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_114;
        *((_DWORD *)this + 26) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_153;
      case 8u:
        *((_DWORD *)this + 31) |= 0x100000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_114;
        *((_DWORD *)this + 27) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_153;
      case 9u:
        *((_DWORD *)this + 31) |= 0x2000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_114;
        *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_153;
      case 0xAu:
        *((_DWORD *)this + 31) |= 0x4000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_114;
        *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_153;
      case 0xBu:
        *((_DWORD *)this + 31) |= 0x8000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_114;
        *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_153;
      case 0xCu:
        *((_DWORD *)this + 31) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_114;
        *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_153;
      case 0xDu:
        *((_DWORD *)this + 31) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_114;
        *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_153;
      case 0xEu:
        *((_DWORD *)this + 31) |= 0x400u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_114;
        *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_153;
      case 0xFu:
        *((_DWORD *)this + 31) |= 0x80u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v52 = 0;
          v53 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_164;
            }
            v54 = v20++;
            v55 = *(_BYTE *)(v21 + v54);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v55 & 0x7F) << v52;
            if ((v55 & 0x80) == 0)
              break;
            v52 += 7;
            v14 = v53++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_163:
              v2 = v54 + 1;
              goto LABEL_164;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
          goto LABEL_163;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_164;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_164:
        *((_DWORD *)this + 14) = v24;
        break;
      case 0x10u:
        *((_DWORD *)this + 31) |= 0x800u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_114;
        *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_153;
      case 0x11u:
        *((_DWORD *)this + 31) |= 0x20000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_114;
        *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_153;
      case 0x12u:
        *((_DWORD *)this + 31) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_114;
        *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_153;
      case 0x13u:
        *((_DWORD *)this + 31) |= 0x1000u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v56 = 0;
          v57 = 0;
          v30 = 0;
          if (v2 <= v26)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_169;
            }
            v58 = v26++;
            v59 = *(_BYTE *)(v27 + v58);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v59 & 0x7F) << v56;
            if ((v59 & 0x80) == 0)
              break;
            v56 += 7;
            v14 = v57++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_168:
              v2 = v58 + 1;
              goto LABEL_169;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v30) = 0;
          goto LABEL_168;
        }
        v28 = 0;
        v29 = 0;
        v30 = 0;
        do
        {
          v2 = v26 + 1;
          *((_QWORD *)a2 + 1) = v26 + 1;
          v31 = *(_BYTE *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0)
            goto LABEL_169;
          v28 += 7;
          v26 = v2;
          v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_169:
        *((_DWORD *)this + 19) = v30;
        break;
      case 0x14u:
        *((_DWORD *)this + 31) |= 0x40u;
        v32 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v33 = *(_QWORD *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
        {
          v60 = 0;
          v61 = 0;
          v36 = 0;
          if (v2 <= v32)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v32)
            {
              LODWORD(v36) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_174;
            }
            v62 = v32++;
            v63 = *(_BYTE *)(v33 + v62);
            *((_QWORD *)a2 + 1) = v32;
            v36 |= (unint64_t)(v63 & 0x7F) << v60;
            if ((v63 & 0x80) == 0)
              break;
            v60 += 7;
            v14 = v61++ > 8;
            if (v14)
            {
              LODWORD(v36) = 0;
LABEL_173:
              v2 = v62 + 1;
              goto LABEL_174;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v36) = 0;
          goto LABEL_173;
        }
        v34 = 0;
        v35 = 0;
        v36 = 0;
        do
        {
          v2 = v32 + 1;
          *((_QWORD *)a2 + 1) = v32 + 1;
          v37 = *(_BYTE *)(v33 + v32);
          v36 |= (unint64_t)(v37 & 0x7F) << v34;
          if ((v37 & 0x80) == 0)
            goto LABEL_174;
          v34 += 7;
          v32 = v2;
          v14 = v35++ > 8;
        }
        while (!v14);
        LODWORD(v36) = 0;
LABEL_174:
        *((_DWORD *)this + 13) = v36;
        break;
      case 0x15u:
        *((_DWORD *)this + 31) |= 0x10000u;
        v38 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v39 = *(_QWORD *)a2;
        if (v38 > 0xFFFFFFFFFFFFFFF5 || v38 + 10 > v2)
        {
          v64 = 0;
          v65 = 0;
          v42 = 0;
          if (v2 <= v38)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v38)
            {
              LODWORD(v42) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_179;
            }
            v66 = v38++;
            v67 = *(_BYTE *)(v39 + v66);
            *((_QWORD *)a2 + 1) = v38;
            v42 |= (unint64_t)(v67 & 0x7F) << v64;
            if ((v67 & 0x80) == 0)
              break;
            v64 += 7;
            v14 = v65++ > 8;
            if (v14)
            {
              LODWORD(v42) = 0;
LABEL_178:
              v2 = v66 + 1;
              goto LABEL_179;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v42) = 0;
          goto LABEL_178;
        }
        v40 = 0;
        v41 = 0;
        v42 = 0;
        do
        {
          v2 = v38 + 1;
          *((_QWORD *)a2 + 1) = v38 + 1;
          v43 = *(_BYTE *)(v39 + v38);
          v42 |= (unint64_t)(v43 & 0x7F) << v40;
          if ((v43 & 0x80) == 0)
            goto LABEL_179;
          v40 += 7;
          v38 = v2;
          v14 = v41++ > 8;
        }
        while (!v14);
        LODWORD(v42) = 0;
LABEL_179:
        *((_DWORD *)this + 23) = v42;
        break;
      case 0x16u:
        *((_DWORD *)this + 31) |= 0x200000u;
        v44 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v45 = *(_QWORD *)a2;
        if (v44 > 0xFFFFFFFFFFFFFFF5 || v44 + 10 > v2)
        {
          v68 = 0;
          v69 = 0;
          v48 = 0;
          if (v2 <= v44)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v44)
            {
              LODWORD(v48) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_184;
            }
            v70 = v44++;
            v71 = *(_BYTE *)(v45 + v70);
            *((_QWORD *)a2 + 1) = v44;
            v48 |= (unint64_t)(v71 & 0x7F) << v68;
            if ((v71 & 0x80) == 0)
              break;
            v68 += 7;
            v14 = v69++ > 8;
            if (v14)
            {
              LODWORD(v48) = 0;
LABEL_183:
              v2 = v70 + 1;
              goto LABEL_184;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v48) = 0;
          goto LABEL_183;
        }
        v46 = 0;
        v47 = 0;
        v48 = 0;
        do
        {
          v2 = v44 + 1;
          *((_QWORD *)a2 + 1) = v44 + 1;
          v49 = *(_BYTE *)(v45 + v44);
          v48 |= (unint64_t)(v49 & 0x7F) << v46;
          if ((v49 & 0x80) == 0)
            goto LABEL_184;
          v46 += 7;
          v44 = v2;
          v14 = v47++ > 8;
        }
        while (!v14);
        LODWORD(v48) = 0;
LABEL_184:
        *((_DWORD *)this + 28) = v48;
        break;
      case 0x17u:
        *((_DWORD *)this + 31) |= 0x800000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v51 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v50 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v51 = v50 != 0;
        }
        *((_BYTE *)this + 120) = v51;
        break;
      case 0x18u:
        *((_DWORD *)this + 31) |= 0x400000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 29) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_153:
          v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_154:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_114:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_155:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::DeviceMotion::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 124);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 40));
    v4 = *(_DWORD *)(v3 + 124);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_28;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 0x40000) == 0)
      goto LABEL_7;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x40000) == 0)
  {
LABEL_7:
    if ((v4 & 0x80000) == 0)
      goto LABEL_8;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 100));
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x80000) == 0)
  {
LABEL_8:
    if ((v4 & 0x100000) == 0)
      goto LABEL_9;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 104));
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x100000) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 108));
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 0x4000) == 0)
      goto LABEL_11;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x4000) == 0)
  {
LABEL_11:
    if ((v4 & 0x8000) == 0)
      goto LABEL_12;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 84));
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x8000) == 0)
  {
LABEL_12:
    if ((v4 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x100) == 0)
  {
LABEL_13:
    if ((v4 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 60));
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x200) == 0)
  {
LABEL_14:
    if ((v4 & 0x400) == 0)
      goto LABEL_15;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x400) == 0)
  {
LABEL_15:
    if ((v4 & 0x80) == 0)
      goto LABEL_16;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 68));
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x80) == 0)
  {
LABEL_16:
    if ((v4 & 0x800) == 0)
      goto LABEL_17;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x800) == 0)
  {
LABEL_17:
    if ((v4 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(float *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x20000) == 0)
  {
LABEL_18:
    if ((v4 & 0x20) == 0)
      goto LABEL_19;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 96));
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x20) == 0)
  {
LABEL_19:
    if ((v4 & 0x1000) == 0)
      goto LABEL_20;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x1000) == 0)
  {
LABEL_20:
    if ((v4 & 0x40) == 0)
      goto LABEL_21;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x40) == 0)
  {
LABEL_21:
    if ((v4 & 0x10000) == 0)
      goto LABEL_22;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x10000) == 0)
  {
LABEL_22:
    if ((v4 & 0x200000) == 0)
      goto LABEL_23;
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x200000) == 0)
  {
LABEL_23:
    if ((v4 & 0x800000) == 0)
      goto LABEL_24;
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x800000) == 0)
  {
LABEL_24:
    if ((v4 & 0x400000) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 116));
  }
LABEL_48:
  this = PB::Writer::write(a2);
  if ((*(_DWORD *)(v3 + 124) & 0x400000) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 116));
  return this;
}

uint64_t CMMsl::DeviceMotion::hash_value(CMMsl::DeviceMotion *this)
{
  int v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  uint64_t v38;

  v1 = *((_DWORD *)this + 31);
  if ((v1 & 0x10) == 0)
  {
    v2 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_3;
LABEL_63:
    v3 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_6;
LABEL_64:
    v4 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_9;
LABEL_65:
    v5 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_12;
LABEL_66:
    v6 = 0.0;
    if ((v1 & 0x40000) != 0)
      goto LABEL_15;
LABEL_67:
    v8 = 0;
    if ((v1 & 0x80000) != 0)
      goto LABEL_18;
LABEL_68:
    v10 = 0;
    if ((v1 & 0x100000) != 0)
      goto LABEL_21;
LABEL_69:
    v12 = 0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_24;
LABEL_70:
    v14 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_27;
LABEL_71:
    v16 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_30;
LABEL_72:
    v18 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_33;
LABEL_73:
    v20 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_36;
LABEL_74:
    v22 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_39;
LABEL_75:
    v24 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_42;
    goto LABEL_76;
  }
  v2 = *((double *)this + 5);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_63;
LABEL_3:
  v3 = *((double *)this + 2);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 4) == 0)
    goto LABEL_64;
LABEL_6:
  v4 = *((double *)this + 3);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_65;
LABEL_9:
  v5 = *((double *)this + 4);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_66;
LABEL_12:
  v6 = *((double *)this + 1);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((v1 & 0x40000) == 0)
    goto LABEL_67;
LABEL_15:
  v7 = *((float *)this + 25);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 0x80000) == 0)
    goto LABEL_68;
LABEL_18:
  v9 = *((float *)this + 26);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((v1 & 0x100000) == 0)
    goto LABEL_69;
LABEL_21:
  v11 = *((float *)this + 27);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_70;
LABEL_24:
  v13 = *((float *)this + 20);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_71;
LABEL_27:
  v15 = *((float *)this + 21);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  if ((v1 & 0x8000) == 0)
    goto LABEL_72;
LABEL_30:
  v17 = *((float *)this + 22);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  if ((v1 & 0x100) == 0)
    goto LABEL_73;
LABEL_33:
  v19 = *((float *)this + 15);
  v20 = LODWORD(v19);
  if (v19 == 0.0)
    v20 = 0;
  if ((v1 & 0x200) == 0)
    goto LABEL_74;
LABEL_36:
  v21 = *((float *)this + 16);
  v22 = LODWORD(v21);
  if (v21 == 0.0)
    v22 = 0;
  if ((v1 & 0x400) == 0)
    goto LABEL_75;
LABEL_39:
  v23 = *((float *)this + 17);
  v24 = LODWORD(v23);
  if (v23 == 0.0)
    v24 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_42:
    v25 = *((int *)this + 14);
    if ((v1 & 0x800) != 0)
      goto LABEL_43;
LABEL_77:
    v27 = 0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_46;
LABEL_78:
    v29 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_49;
LABEL_79:
    v31 = 0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_52;
    goto LABEL_80;
  }
LABEL_76:
  v25 = 0;
  if ((v1 & 0x800) == 0)
    goto LABEL_77;
LABEL_43:
  v26 = *((float *)this + 18);
  v27 = LODWORD(v26);
  if (v26 == 0.0)
    v27 = 0;
  if ((v1 & 0x20000) == 0)
    goto LABEL_78;
LABEL_46:
  v28 = *((float *)this + 24);
  v29 = LODWORD(v28);
  if (v28 == 0.0)
    v29 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_79;
LABEL_49:
  v30 = *((float *)this + 12);
  v31 = LODWORD(v30);
  if (v30 == 0.0)
    v31 = 0;
  if ((v1 & 0x1000) != 0)
  {
LABEL_52:
    v32 = *((unsigned int *)this + 19);
    if ((v1 & 0x40) != 0)
      goto LABEL_53;
    goto LABEL_81;
  }
LABEL_80:
  v32 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_53:
    v33 = *((unsigned int *)this + 13);
    if ((v1 & 0x10000) != 0)
      goto LABEL_54;
    goto LABEL_82;
  }
LABEL_81:
  v33 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_54:
    v34 = *((unsigned int *)this + 23);
    if ((v1 & 0x200000) != 0)
      goto LABEL_55;
    goto LABEL_83;
  }
LABEL_82:
  v34 = 0;
  if ((v1 & 0x200000) != 0)
  {
LABEL_55:
    v35 = *((unsigned int *)this + 28);
    if ((v1 & 0x800000) != 0)
      goto LABEL_56;
    goto LABEL_84;
  }
LABEL_83:
  v35 = 0;
  if ((v1 & 0x800000) != 0)
  {
LABEL_56:
    v36 = *((unsigned __int8 *)this + 120);
    if ((v1 & 0x400000) != 0)
      goto LABEL_57;
LABEL_85:
    v38 = 0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v25 ^ v27 ^ v29 ^ v31 ^ v32 ^ v33 ^ v34 ^ v35 ^ v36 ^ v38;
  }
LABEL_84:
  v36 = 0;
  if ((v1 & 0x400000) == 0)
    goto LABEL_85;
LABEL_57:
  v37 = *((float *)this + 29);
  v38 = LODWORD(v37);
  if (v37 == 0.0)
    v38 = 0;
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v25 ^ v27 ^ v29 ^ v31 ^ v32 ^ v33 ^ v34 ^ v35 ^ v36 ^ v38;
}

uint64_t CMMsl::DeviceMotionAlwaysOn::DeviceMotionAlwaysOn(uint64_t this)
{
  *(_QWORD *)this = &off_25135D0F8;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135D0F8;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::DeviceMotionAlwaysOn::~DeviceMotionAlwaysOn(CMMsl::DeviceMotionAlwaysOn *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135D0F8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135D0F8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135D0F8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::DeviceMotionAlwaysOn *CMMsl::DeviceMotionAlwaysOn::DeviceMotionAlwaysOn(CMMsl::DeviceMotionAlwaysOn *this, const CMMsl::DeviceMotion **a2)
{
  CMMsl::DeviceMotion *v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;

  *(_QWORD *)this = &off_25135D0F8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 5) = 0;
  if (a2[1])
  {
    v4 = (CMMsl::DeviceMotion *)operator new();
    v5 = CMMsl::DeviceMotion::DeviceMotion(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v7;
    if (v6)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v6 + 8))(v6, v5);
  }
  v8 = *((_BYTE *)a2 + 20);
  if ((v8 & 1) != 0)
  {
    v9 = *((_BYTE *)a2 + 16);
    *((_BYTE *)this + 20) |= 1u;
    *((_BYTE *)this + 16) = v9;
    v8 = *((_BYTE *)a2 + 20);
  }
  if ((v8 & 2) != 0)
  {
    v10 = *((_BYTE *)a2 + 17);
    *((_BYTE *)this + 20) |= 2u;
    *((_BYTE *)this + 17) = v10;
  }
  return this;
}

uint64_t CMMsl::DeviceMotionAlwaysOn::operator=(uint64_t a1, const CMMsl::DeviceMotion **a2)
{
  int v3;
  uint64_t v4;
  void (**v6)(CMMsl::DeviceMotionAlwaysOn *__hidden);
  uint64_t v7;
  __int16 v8;
  int v9;

  if ((const CMMsl::DeviceMotion **)a1 != a2)
  {
    CMMsl::DeviceMotionAlwaysOn::DeviceMotionAlwaysOn((CMMsl::DeviceMotionAlwaysOn *)&v6, a2);
    v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v9;
    v9 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v7;
    LOWORD(v3) = *(_WORD *)(a1 + 16);
    *(_WORD *)(a1 + 16) = v8;
    v8 = v3;
    v6 = &off_25135D0F8;
    v7 = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::DeviceMotionAlwaysOn *a2, CMMsl::DeviceMotionAlwaysOn *a3)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LOBYTE(v4) = *(_BYTE *)(this + 16);
  *(_BYTE *)(this + 16) = *((_BYTE *)a2 + 16);
  *((_BYTE *)a2 + 16) = v4;
  LOBYTE(v4) = *(_BYTE *)(this + 17);
  *(_BYTE *)(this + 17) = *((_BYTE *)a2 + 17);
  *((_BYTE *)a2 + 17) = v4;
  return this;
}

uint64_t CMMsl::DeviceMotionAlwaysOn::DeviceMotionAlwaysOn(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_25135D0F8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  return a1;
}

uint64_t CMMsl::DeviceMotionAlwaysOn::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  int v6;
  uint64_t v7;
  _QWORD v9[2];
  __int16 v10;
  int v11;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v5 = *(_WORD *)(a2 + 16);
    v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    v11 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    LOWORD(v3) = *(_WORD *)(a1 + 16);
    *(_WORD *)(a1 + 16) = v5;
    v10 = v3;
    v9[0] = &off_25135D0F8;
    v9[1] = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::DeviceMotionAlwaysOn::formatText(CMMsl::DeviceMotionAlwaysOn *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  char v6;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "deviceMotion");
  v6 = *((_BYTE *)this + 20);
  if ((v6 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "inQuiescentMode");
    v6 = *((_BYTE *)this + 20);
  }
  if ((v6 & 2) != 0)
    PB::TextFormatter::format(a2, "shouldGyroBeOn");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::DeviceMotionAlwaysOn::readFrom(CMMsl::DeviceMotionAlwaysOn *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  BOOL v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  BOOL v30;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_23:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((_BYTE *)this + 20) |= 2u;
        v23 = *((_QWORD *)a2 + 1);
        if (v23 >= *((_QWORD *)a2 + 2))
        {
          v26 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v24 = v23 + 1;
          v25 = *(unsigned __int8 *)(*(_QWORD *)a2 + v23);
          *((_QWORD *)a2 + 1) = v24;
          v26 = v25 != 0;
        }
        *((_BYTE *)this + 17) = v26;
      }
      else if ((_DWORD)v20 == 2)
      {
        *((_BYTE *)this + 20) |= 1u;
        v27 = *((_QWORD *)a2 + 1);
        if (v27 >= *((_QWORD *)a2 + 2))
        {
          v30 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v28 = v27 + 1;
          v29 = *(unsigned __int8 *)(*(_QWORD *)a2 + v27);
          *((_QWORD *)a2 + 1) = v28;
          v30 = v29 != 0;
        }
        *((_BYTE *)this + 16) = v30;
      }
      else if ((_DWORD)v20 == 1)
      {
        v21 = (_DWORD *)operator new();
        *(_QWORD *)v21 = &off_25135D0C0;
        v21[31] = 0;
        v22 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v21;
        if (v22)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          v21 = (_DWORD *)*((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v21 + 16))(v21, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_19:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_23;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_19;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::DeviceMotionAlwaysOn::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  char v5;

  v3 = this;
  v4 = *(const PB::Base **)(this + 8);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = *(_BYTE *)(v3 + 20);
  if ((v5 & 1) != 0)
  {
    this = PB::Writer::write(a2);
    v5 = *(_BYTE *)(v3 + 20);
  }
  if ((v5 & 2) != 0)
    return PB::Writer::write(a2);
  return this;
}

BOOL CMMsl::DeviceMotionAlwaysOn::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !CMMsl::DeviceMotion::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(unsigned __int8 *)(a1 + 16) != *(unsigned __int8 *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  result = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) == 0)
    return result;
  return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(unsigned __int8 *)(a1 + 17) == *(unsigned __int8 *)(a2 + 17);
}

unint64_t CMMsl::DeviceMotionAlwaysOn::hash_value(CMMsl::DeviceMotionAlwaysOn *this)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    v2 = CMMsl::DeviceMotion::hash_value((CMMsl::DeviceMotion *)v2);
  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v3 = *((unsigned __int8 *)this + 16);
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_5;
LABEL_7:
    v4 = 0;
    return v3 ^ v2 ^ v4;
  }
  v3 = 0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_7;
LABEL_5:
  v4 = *((unsigned __int8 *)this + 17);
  return v3 ^ v2 ^ v4;
}

_QWORD *CMMsl::DeviceMotionAlwaysOn::makeDeviceMotion(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135D0C0;
    *(_DWORD *)(v2 + 124) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void CMMsl::DeviceMotionCorrection::~DeviceMotionCorrection(CMMsl::DeviceMotionCorrection *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  *(_QWORD *)this = &off_25135D130;
  v2 = (void *)*((_QWORD *)this + 16);
  if (v2)
  {
    *((_QWORD *)this + 17) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 13);
  if (v3)
  {
    *((_QWORD *)this + 14) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 10);
  if (v4)
  {
    *((_QWORD *)this + 11) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 7);
  if (v5)
  {
    *((_QWORD *)this + 8) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 4);
  if (v6)
  {
    *((_QWORD *)this + 5) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 1);
  if (v7)
  {
    *((_QWORD *)this + 2) = v7;
    operator delete(v7);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::DeviceMotionCorrection::~DeviceMotionCorrection(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::DeviceMotionCorrection *CMMsl::DeviceMotionCorrection::DeviceMotionCorrection(CMMsl::DeviceMotionCorrection *this, const CMMsl::DeviceMotionCorrection *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (_QWORD *)((char *)this + 8);
  *(_OWORD *)((char *)this + 56) = 0u;
  v5 = (_QWORD *)((char *)this + 56);
  *(_QWORD *)this = &off_25135D130;
  *(_OWORD *)((char *)this + 104) = 0u;
  v6 = (_QWORD *)((char *)this + 104);
  *((_DWORD *)this + 40) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  if ((*((_BYTE *)a2 + 160) & 1) != 0)
  {
    v7 = *((_QWORD *)a2 + 19);
    *((_BYTE *)this + 160) = 1;
    *((_QWORD *)this + 19) = v7;
  }
  if (this != a2)
  {
    sub_242911380((_QWORD *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
    sub_242911380(v5, *((char **)a2 + 7), *((char **)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 2);
    sub_242911380(v6, *((char **)a2 + 13), *((char **)a2 + 14), (uint64_t)(*((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13)) >> 2);
    sub_242911380(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
    sub_242911380((_QWORD *)this + 10, *((char **)a2 + 10), *((char **)a2 + 11), (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 2);
    sub_242911380((_QWORD *)this + 16, *((char **)a2 + 16), *((char **)a2 + 17), (uint64_t)(*((_QWORD *)a2 + 17) - *((_QWORD *)a2 + 16)) >> 2);
  }
  return this;
}

CMMsl *CMMsl::DeviceMotionCorrection::operator=(CMMsl *a1, const CMMsl::DeviceMotionCorrection *a2)
{
  CMMsl::DeviceMotionCorrection *v3;
  _BYTE v5[168];

  if (a1 != a2)
  {
    CMMsl::DeviceMotionCorrection::DeviceMotionCorrection((CMMsl::DeviceMotionCorrection *)v5, a2);
    CMMsl::swap(a1, (CMMsl::DeviceMotionCorrection *)v5, v3);
    CMMsl::DeviceMotionCorrection::~DeviceMotionCorrection((CMMsl::DeviceMotionCorrection *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::DeviceMotionCorrection *a2, CMMsl::DeviceMotionCorrection *a3)
{
  int v3;
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = *((_DWORD *)this + 40);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
  *((_DWORD *)a2 + 40) = v3;
  result = *((double *)this + 19);
  *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
  *((double *)a2 + 19) = result;
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v5;
  v6 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v6;
  v7 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v7;
  v8 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v8;
  v9 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v9;
  v10 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v10;
  v11 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v11;
  v12 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v12;
  v13 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v13;
  v14 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v14;
  v15 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v15;
  v16 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v16;
  v17 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v17;
  v18 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v18;
  v19 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v19;
  v20 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v20;
  v21 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v21;
  v22 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v22;
  return result;
}

uint64_t CMMsl::DeviceMotionCorrection::DeviceMotionCorrection(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_25135D130;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  sub_242911330(a1 + 32, (__n128 *)(a2 + 32));
  sub_242911330(a1 + 56, (__n128 *)(a2 + 56));
  sub_242911330(a1 + 104, (__n128 *)(a2 + 104));
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  sub_242911330(a1 + 80, (__n128 *)(a2 + 80));
  sub_242911330(a1 + 128, (__n128 *)(a2 + 128));
  return a1;
}

CMMsl *CMMsl::DeviceMotionCorrection::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::DeviceMotionCorrection *v3;
  _BYTE v5[168];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::DeviceMotionCorrection::DeviceMotionCorrection((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::DeviceMotionCorrection *)v5, v3);
    CMMsl::DeviceMotionCorrection::~DeviceMotionCorrection((CMMsl::DeviceMotionCorrection *)v5);
  }
  return a1;
}

uint64_t CMMsl::DeviceMotionCorrection::formatText(CMMsl::DeviceMotionCorrection *this, PB::TextFormatter *a2, const char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  float *v11;
  float *v12;
  float v13;
  float *v14;
  float *v15;
  float v16;
  float *v17;
  float *v18;
  float v19;
  float *v20;
  float *v21;
  float v22;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (float *)*((_QWORD *)this + 1);
  v6 = (float *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "dx", v7);
  }
  v8 = (float *)*((_QWORD *)this + 4);
  v9 = (float *)*((_QWORD *)this + 5);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(a2, "estimate", v10);
  }
  v11 = (float *)*((_QWORD *)this + 7);
  v12 = (float *)*((_QWORD *)this + 8);
  while (v11 != v12)
  {
    v13 = *v11++;
    PB::TextFormatter::format(a2, "measurement", v13);
  }
  v14 = (float *)*((_QWORD *)this + 10);
  v15 = (float *)*((_QWORD *)this + 11);
  while (v14 != v15)
  {
    v16 = *v14++;
    PB::TextFormatter::format(a2, "noisevariance", v16);
  }
  v17 = (float *)*((_QWORD *)this + 13);
  v18 = (float *)*((_QWORD *)this + 14);
  while (v17 != v18)
  {
    v19 = *v17++;
    PB::TextFormatter::format(a2, "residual", v19);
  }
  v20 = (float *)*((_QWORD *)this + 16);
  v21 = (float *)*((_QWORD *)this + 17);
  while (v20 != v21)
  {
    v22 = *v20++;
    PB::TextFormatter::format(a2, "statevariance", v22);
  }
  if ((*((_BYTE *)this + 160) & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 19));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::DeviceMotionCorrection::readFrom(CMMsl::DeviceMotionCorrection *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  _DWORD *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  _DWORD *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  _DWORD *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  _DWORD *v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  _DWORD *v75;
  int v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  _DWORD *v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  _DWORD *v89;
  int v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char *v95;
  _DWORD *v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  _DWORD *v103;
  int v104;
  unint64_t v105;
  unint64_t v106;
  char *v107;
  _DWORD *v108;
  unint64_t v109;
  char *v110;
  unint64_t v111;
  char *v112;
  unint64_t v113;
  char *v114;
  unint64_t v115;
  char *v116;
  unint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  _DWORD *v155;
  int v156;
  _DWORD *v157;
  int v158;
  _DWORD *v159;
  int v160;
  _DWORD *v161;
  int v162;
  _DWORD *v163;
  int v164;
  _DWORD *v165;
  int v166;
  unint64_t v167;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_21:
      v19 = v11 & 7;
      if (v19 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 160) |= 1u;
          v20 = *((_QWORD *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_276;
          *((_QWORD *)this + 19) = *(_QWORD *)(*(_QWORD *)a2 + v20);
          v21 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_278;
        case 2u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v22 = *((_QWORD *)a2 + 1);
            v23 = *((_QWORD *)a2 + 2);
            while (v22 < v23 && !*((_BYTE *)a2 + 24))
            {
              v25 = (char *)*((_QWORD *)this + 5);
              v24 = *((_QWORD *)this + 6);
              if ((unint64_t)v25 >= v24)
              {
                v27 = (char *)*((_QWORD *)this + 4);
                v28 = (v25 - v27) >> 2;
                v29 = v28 + 1;
                if ((unint64_t)(v28 + 1) >> 62)
                  goto LABEL_286;
                v30 = v24 - (_QWORD)v27;
                if (v30 >> 1 > v29)
                  v29 = v30 >> 1;
                if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
                  v31 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v31 = v29;
                if (v31)
                {
                  v31 = (unint64_t)sub_2429114B8(v31);
                  v27 = (char *)*((_QWORD *)this + 4);
                  v25 = (char *)*((_QWORD *)this + 5);
                }
                else
                {
                  v32 = 0;
                }
                v33 = (_DWORD *)(v31 + 4 * v28);
                *v33 = 0;
                v26 = v33 + 1;
                while (v25 != v27)
                {
                  v34 = *((_DWORD *)v25 - 1);
                  v25 -= 4;
                  *--v33 = v34;
                }
                *((_QWORD *)this + 4) = v33;
                *((_QWORD *)this + 5) = v26;
                *((_QWORD *)this + 6) = v31 + 4 * v32;
                if (v27)
                  operator delete(v27);
              }
              else
              {
                *(_DWORD *)v25 = 0;
                v26 = v25 + 4;
              }
              *((_QWORD *)this + 5) = v26;
              v35 = *((_QWORD *)a2 + 1);
              if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_170;
              *(v26 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v35);
              v23 = *((_QWORD *)a2 + 2);
              v22 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v22;
            }
            goto LABEL_171;
          }
          v107 = (char *)*((_QWORD *)this + 5);
          v106 = *((_QWORD *)this + 6);
          if ((unint64_t)v107 >= v106)
          {
            v119 = (char *)*((_QWORD *)this + 4);
            v120 = (v107 - v119) >> 2;
            v121 = v120 + 1;
            if ((unint64_t)(v120 + 1) >> 62)
              goto LABEL_286;
            v122 = v106 - (_QWORD)v119;
            if (v122 >> 1 > v121)
              v121 = v122 >> 1;
            if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFFCLL)
              v123 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v123 = v121;
            if (v123)
            {
              v123 = (unint64_t)sub_2429114B8(v123);
              v119 = (char *)*((_QWORD *)this + 4);
              v107 = (char *)*((_QWORD *)this + 5);
            }
            else
            {
              v124 = 0;
            }
            v155 = (_DWORD *)(v123 + 4 * v120);
            *v155 = 0;
            v108 = v155 + 1;
            while (v107 != v119)
            {
              v156 = *((_DWORD *)v107 - 1);
              v107 -= 4;
              *--v155 = v156;
            }
            *((_QWORD *)this + 4) = v155;
            *((_QWORD *)this + 5) = v108;
            *((_QWORD *)this + 6) = v123 + 4 * v124;
            if (v119)
              operator delete(v119);
          }
          else
          {
            *(_DWORD *)v107 = 0;
            v108 = v107 + 4;
          }
          *((_QWORD *)this + 5) = v108;
          goto LABEL_274;
        case 3u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v36 = *((_QWORD *)a2 + 1);
            v37 = *((_QWORD *)a2 + 2);
            while (v36 < v37 && !*((_BYTE *)a2 + 24))
            {
              v39 = (char *)*((_QWORD *)this + 8);
              v38 = *((_QWORD *)this + 9);
              if ((unint64_t)v39 >= v38)
              {
                v41 = (char *)*((_QWORD *)this + 7);
                v42 = (v39 - v41) >> 2;
                v43 = v42 + 1;
                if ((unint64_t)(v42 + 1) >> 62)
                  goto LABEL_286;
                v44 = v38 - (_QWORD)v41;
                if (v44 >> 1 > v43)
                  v43 = v44 >> 1;
                if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL)
                  v45 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v45 = v43;
                if (v45)
                {
                  v45 = (unint64_t)sub_2429114B8(v45);
                  v41 = (char *)*((_QWORD *)this + 7);
                  v39 = (char *)*((_QWORD *)this + 8);
                }
                else
                {
                  v46 = 0;
                }
                v47 = (_DWORD *)(v45 + 4 * v42);
                *v47 = 0;
                v40 = v47 + 1;
                while (v39 != v41)
                {
                  v48 = *((_DWORD *)v39 - 1);
                  v39 -= 4;
                  *--v47 = v48;
                }
                *((_QWORD *)this + 7) = v47;
                *((_QWORD *)this + 8) = v40;
                *((_QWORD *)this + 9) = v45 + 4 * v46;
                if (v41)
                  operator delete(v41);
              }
              else
              {
                *(_DWORD *)v39 = 0;
                v40 = v39 + 4;
              }
              *((_QWORD *)this + 8) = v40;
              v49 = *((_QWORD *)a2 + 1);
              if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_170;
              *(v40 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v49);
              v37 = *((_QWORD *)a2 + 2);
              v36 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v36;
            }
            goto LABEL_171;
          }
          v110 = (char *)*((_QWORD *)this + 8);
          v109 = *((_QWORD *)this + 9);
          if ((unint64_t)v110 >= v109)
          {
            v125 = (char *)*((_QWORD *)this + 7);
            v126 = (v110 - v125) >> 2;
            v127 = v126 + 1;
            if ((unint64_t)(v126 + 1) >> 62)
              goto LABEL_286;
            v128 = v109 - (_QWORD)v125;
            if (v128 >> 1 > v127)
              v127 = v128 >> 1;
            if ((unint64_t)v128 >= 0x7FFFFFFFFFFFFFFCLL)
              v129 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v129 = v127;
            if (v129)
            {
              v129 = (unint64_t)sub_2429114B8(v129);
              v125 = (char *)*((_QWORD *)this + 7);
              v110 = (char *)*((_QWORD *)this + 8);
            }
            else
            {
              v130 = 0;
            }
            v157 = (_DWORD *)(v129 + 4 * v126);
            *v157 = 0;
            v108 = v157 + 1;
            while (v110 != v125)
            {
              v158 = *((_DWORD *)v110 - 1);
              v110 -= 4;
              *--v157 = v158;
            }
            *((_QWORD *)this + 7) = v157;
            *((_QWORD *)this + 8) = v108;
            *((_QWORD *)this + 9) = v129 + 4 * v130;
            if (v125)
              operator delete(v125);
          }
          else
          {
            *(_DWORD *)v110 = 0;
            v108 = v110 + 4;
          }
          *((_QWORD *)this + 8) = v108;
          goto LABEL_274;
        case 4u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v50 = *((_QWORD *)a2 + 1);
            v51 = *((_QWORD *)a2 + 2);
            while (v50 < v51 && !*((_BYTE *)a2 + 24))
            {
              v53 = (char *)*((_QWORD *)this + 14);
              v52 = *((_QWORD *)this + 15);
              if ((unint64_t)v53 >= v52)
              {
                v55 = (char *)*((_QWORD *)this + 13);
                v56 = (v53 - v55) >> 2;
                v57 = v56 + 1;
                if ((unint64_t)(v56 + 1) >> 62)
                  goto LABEL_286;
                v58 = v52 - (_QWORD)v55;
                if (v58 >> 1 > v57)
                  v57 = v58 >> 1;
                if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL)
                  v59 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v59 = v57;
                if (v59)
                {
                  v59 = (unint64_t)sub_2429114B8(v59);
                  v55 = (char *)*((_QWORD *)this + 13);
                  v53 = (char *)*((_QWORD *)this + 14);
                }
                else
                {
                  v60 = 0;
                }
                v61 = (_DWORD *)(v59 + 4 * v56);
                *v61 = 0;
                v54 = v61 + 1;
                while (v53 != v55)
                {
                  v62 = *((_DWORD *)v53 - 1);
                  v53 -= 4;
                  *--v61 = v62;
                }
                *((_QWORD *)this + 13) = v61;
                *((_QWORD *)this + 14) = v54;
                *((_QWORD *)this + 15) = v59 + 4 * v60;
                if (v55)
                  operator delete(v55);
              }
              else
              {
                *(_DWORD *)v53 = 0;
                v54 = v53 + 4;
              }
              *((_QWORD *)this + 14) = v54;
              v63 = *((_QWORD *)a2 + 1);
              if (v63 > 0xFFFFFFFFFFFFFFFBLL || v63 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_170;
              *(v54 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v63);
              v51 = *((_QWORD *)a2 + 2);
              v50 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v50;
            }
            goto LABEL_171;
          }
          v112 = (char *)*((_QWORD *)this + 14);
          v111 = *((_QWORD *)this + 15);
          if ((unint64_t)v112 >= v111)
          {
            v131 = (char *)*((_QWORD *)this + 13);
            v132 = (v112 - v131) >> 2;
            v133 = v132 + 1;
            if ((unint64_t)(v132 + 1) >> 62)
              goto LABEL_286;
            v134 = v111 - (_QWORD)v131;
            if (v134 >> 1 > v133)
              v133 = v134 >> 1;
            if ((unint64_t)v134 >= 0x7FFFFFFFFFFFFFFCLL)
              v135 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v135 = v133;
            if (v135)
            {
              v135 = (unint64_t)sub_2429114B8(v135);
              v131 = (char *)*((_QWORD *)this + 13);
              v112 = (char *)*((_QWORD *)this + 14);
            }
            else
            {
              v136 = 0;
            }
            v159 = (_DWORD *)(v135 + 4 * v132);
            *v159 = 0;
            v108 = v159 + 1;
            while (v112 != v131)
            {
              v160 = *((_DWORD *)v112 - 1);
              v112 -= 4;
              *--v159 = v160;
            }
            *((_QWORD *)this + 13) = v159;
            *((_QWORD *)this + 14) = v108;
            *((_QWORD *)this + 15) = v135 + 4 * v136;
            if (v131)
              operator delete(v131);
          }
          else
          {
            *(_DWORD *)v112 = 0;
            v108 = v112 + 4;
          }
          *((_QWORD *)this + 14) = v108;
          goto LABEL_274;
        case 5u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v64 = *((_QWORD *)a2 + 1);
            v65 = *((_QWORD *)a2 + 2);
            while (v64 < v65 && !*((_BYTE *)a2 + 24))
            {
              v67 = (char *)*((_QWORD *)this + 2);
              v66 = *((_QWORD *)this + 3);
              if ((unint64_t)v67 >= v66)
              {
                v69 = (char *)*((_QWORD *)this + 1);
                v70 = (v67 - v69) >> 2;
                v71 = v70 + 1;
                if ((unint64_t)(v70 + 1) >> 62)
                  goto LABEL_286;
                v72 = v66 - (_QWORD)v69;
                if (v72 >> 1 > v71)
                  v71 = v72 >> 1;
                if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL)
                  v73 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v73 = v71;
                if (v73)
                {
                  v73 = (unint64_t)sub_2429114B8(v73);
                  v69 = (char *)*((_QWORD *)this + 1);
                  v67 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v74 = 0;
                }
                v75 = (_DWORD *)(v73 + 4 * v70);
                *v75 = 0;
                v68 = v75 + 1;
                while (v67 != v69)
                {
                  v76 = *((_DWORD *)v67 - 1);
                  v67 -= 4;
                  *--v75 = v76;
                }
                *((_QWORD *)this + 1) = v75;
                *((_QWORD *)this + 2) = v68;
                *((_QWORD *)this + 3) = v73 + 4 * v74;
                if (v69)
                  operator delete(v69);
              }
              else
              {
                *(_DWORD *)v67 = 0;
                v68 = v67 + 4;
              }
              *((_QWORD *)this + 2) = v68;
              v77 = *((_QWORD *)a2 + 1);
              if (v77 > 0xFFFFFFFFFFFFFFFBLL || v77 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_170;
              *(v68 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v77);
              v65 = *((_QWORD *)a2 + 2);
              v64 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v64;
            }
            goto LABEL_171;
          }
          v114 = (char *)*((_QWORD *)this + 2);
          v113 = *((_QWORD *)this + 3);
          if ((unint64_t)v114 >= v113)
          {
            v137 = (char *)*((_QWORD *)this + 1);
            v138 = (v114 - v137) >> 2;
            v139 = v138 + 1;
            if ((unint64_t)(v138 + 1) >> 62)
              goto LABEL_286;
            v140 = v113 - (_QWORD)v137;
            if (v140 >> 1 > v139)
              v139 = v140 >> 1;
            if ((unint64_t)v140 >= 0x7FFFFFFFFFFFFFFCLL)
              v141 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v141 = v139;
            if (v141)
            {
              v141 = (unint64_t)sub_2429114B8(v141);
              v137 = (char *)*((_QWORD *)this + 1);
              v114 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v142 = 0;
            }
            v161 = (_DWORD *)(v141 + 4 * v138);
            *v161 = 0;
            v108 = v161 + 1;
            while (v114 != v137)
            {
              v162 = *((_DWORD *)v114 - 1);
              v114 -= 4;
              *--v161 = v162;
            }
            *((_QWORD *)this + 1) = v161;
            *((_QWORD *)this + 2) = v108;
            *((_QWORD *)this + 3) = v141 + 4 * v142;
            if (v137)
              operator delete(v137);
          }
          else
          {
            *(_DWORD *)v114 = 0;
            v108 = v114 + 4;
          }
          *((_QWORD *)this + 2) = v108;
          goto LABEL_274;
        case 6u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v78 = *((_QWORD *)a2 + 1);
            v79 = *((_QWORD *)a2 + 2);
            while (v78 < v79 && !*((_BYTE *)a2 + 24))
            {
              v81 = (char *)*((_QWORD *)this + 11);
              v80 = *((_QWORD *)this + 12);
              if ((unint64_t)v81 >= v80)
              {
                v83 = (char *)*((_QWORD *)this + 10);
                v84 = (v81 - v83) >> 2;
                v85 = v84 + 1;
                if ((unint64_t)(v84 + 1) >> 62)
                  goto LABEL_286;
                v86 = v80 - (_QWORD)v83;
                if (v86 >> 1 > v85)
                  v85 = v86 >> 1;
                if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFFCLL)
                  v87 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v87 = v85;
                if (v87)
                {
                  v87 = (unint64_t)sub_2429114B8(v87);
                  v83 = (char *)*((_QWORD *)this + 10);
                  v81 = (char *)*((_QWORD *)this + 11);
                }
                else
                {
                  v88 = 0;
                }
                v89 = (_DWORD *)(v87 + 4 * v84);
                *v89 = 0;
                v82 = v89 + 1;
                while (v81 != v83)
                {
                  v90 = *((_DWORD *)v81 - 1);
                  v81 -= 4;
                  *--v89 = v90;
                }
                *((_QWORD *)this + 10) = v89;
                *((_QWORD *)this + 11) = v82;
                *((_QWORD *)this + 12) = v87 + 4 * v88;
                if (v83)
                  operator delete(v83);
              }
              else
              {
                *(_DWORD *)v81 = 0;
                v82 = v81 + 4;
              }
              *((_QWORD *)this + 11) = v82;
              v91 = *((_QWORD *)a2 + 1);
              if (v91 > 0xFFFFFFFFFFFFFFFBLL || v91 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_170;
              *(v82 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v91);
              v79 = *((_QWORD *)a2 + 2);
              v78 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v78;
            }
            goto LABEL_171;
          }
          v116 = (char *)*((_QWORD *)this + 11);
          v115 = *((_QWORD *)this + 12);
          if ((unint64_t)v116 >= v115)
          {
            v143 = (char *)*((_QWORD *)this + 10);
            v144 = (v116 - v143) >> 2;
            v145 = v144 + 1;
            if ((unint64_t)(v144 + 1) >> 62)
              goto LABEL_286;
            v146 = v115 - (_QWORD)v143;
            if (v146 >> 1 > v145)
              v145 = v146 >> 1;
            if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFFCLL)
              v147 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v147 = v145;
            if (v147)
            {
              v147 = (unint64_t)sub_2429114B8(v147);
              v143 = (char *)*((_QWORD *)this + 10);
              v116 = (char *)*((_QWORD *)this + 11);
            }
            else
            {
              v148 = 0;
            }
            v163 = (_DWORD *)(v147 + 4 * v144);
            *v163 = 0;
            v108 = v163 + 1;
            while (v116 != v143)
            {
              v164 = *((_DWORD *)v116 - 1);
              v116 -= 4;
              *--v163 = v164;
            }
            *((_QWORD *)this + 10) = v163;
            *((_QWORD *)this + 11) = v108;
            *((_QWORD *)this + 12) = v147 + 4 * v148;
            if (v143)
              operator delete(v143);
          }
          else
          {
            *(_DWORD *)v116 = 0;
            v108 = v116 + 4;
          }
          *((_QWORD *)this + 11) = v108;
          goto LABEL_274;
        case 7u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v92 = *((_QWORD *)a2 + 1);
            v93 = *((_QWORD *)a2 + 2);
            while (v92 < v93 && !*((_BYTE *)a2 + 24))
            {
              v95 = (char *)*((_QWORD *)this + 17);
              v94 = *((_QWORD *)this + 18);
              if ((unint64_t)v95 >= v94)
              {
                v97 = (char *)*((_QWORD *)this + 16);
                v98 = (v95 - v97) >> 2;
                v99 = v98 + 1;
                if ((unint64_t)(v98 + 1) >> 62)
                  goto LABEL_286;
                v100 = v94 - (_QWORD)v97;
                if (v100 >> 1 > v99)
                  v99 = v100 >> 1;
                if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFFCLL)
                  v101 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v101 = v99;
                if (v101)
                {
                  v101 = (unint64_t)sub_2429114B8(v101);
                  v97 = (char *)*((_QWORD *)this + 16);
                  v95 = (char *)*((_QWORD *)this + 17);
                }
                else
                {
                  v102 = 0;
                }
                v103 = (_DWORD *)(v101 + 4 * v98);
                *v103 = 0;
                v96 = v103 + 1;
                while (v95 != v97)
                {
                  v104 = *((_DWORD *)v95 - 1);
                  v95 -= 4;
                  *--v103 = v104;
                }
                *((_QWORD *)this + 16) = v103;
                *((_QWORD *)this + 17) = v96;
                *((_QWORD *)this + 18) = v101 + 4 * v102;
                if (v97)
                  operator delete(v97);
              }
              else
              {
                *(_DWORD *)v95 = 0;
                v96 = v95 + 4;
              }
              *((_QWORD *)this + 17) = v96;
              v105 = *((_QWORD *)a2 + 1);
              if (v105 > 0xFFFFFFFFFFFFFFFBLL || v105 + 4 > *((_QWORD *)a2 + 2))
              {
LABEL_170:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v96 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v105);
              v93 = *((_QWORD *)a2 + 2);
              v92 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v92;
            }
LABEL_171:
            PB::Reader::recallMark();
          }
          else
          {
            v118 = (char *)*((_QWORD *)this + 17);
            v117 = *((_QWORD *)this + 18);
            if ((unint64_t)v118 >= v117)
            {
              v149 = (char *)*((_QWORD *)this + 16);
              v150 = (v118 - v149) >> 2;
              v151 = v150 + 1;
              if ((unint64_t)(v150 + 1) >> 62)
LABEL_286:
                sub_242729A44();
              v152 = v117 - (_QWORD)v149;
              if (v152 >> 1 > v151)
                v151 = v152 >> 1;
              if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFFCLL)
                v153 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v153 = v151;
              if (v153)
              {
                v153 = (unint64_t)sub_2429114B8(v153);
                v149 = (char *)*((_QWORD *)this + 16);
                v118 = (char *)*((_QWORD *)this + 17);
              }
              else
              {
                v154 = 0;
              }
              v165 = (_DWORD *)(v153 + 4 * v150);
              *v165 = 0;
              v108 = v165 + 1;
              while (v118 != v149)
              {
                v166 = *((_DWORD *)v118 - 1);
                v118 -= 4;
                *--v165 = v166;
              }
              *((_QWORD *)this + 16) = v165;
              *((_QWORD *)this + 17) = v108;
              *((_QWORD *)this + 18) = v153 + 4 * v154;
              if (v149)
                operator delete(v149);
            }
            else
            {
              *(_DWORD *)v118 = 0;
              v108 = v118 + 4;
            }
            *((_QWORD *)this + 17) = v108;
LABEL_274:
            v167 = *((_QWORD *)a2 + 1);
            if (v167 <= 0xFFFFFFFFFFFFFFFBLL && v167 + 4 <= *((_QWORD *)a2 + 2))
            {
              *(v108 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v167);
              v21 = *((_QWORD *)a2 + 1) + 4;
LABEL_278:
              *((_QWORD *)a2 + 1) = v21;
            }
            else
            {
LABEL_276:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
          break;
        default:
          goto LABEL_19;
      }
      goto LABEL_279;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_21;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    if ((PB::Reader::skip(a2) & 1) == 0)
      return 0;
LABEL_279:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
}

uint64_t CMMsl::DeviceMotionCorrection::writeTo(uint64_t this, PB::Writer *a2)
{
  _QWORD *v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;
  float *v10;
  float *v11;
  float v12;
  float *v13;
  float *v14;
  float v15;
  float *v16;
  float *v17;
  float v18;
  float *v19;
  float *v20;
  float v21;

  v3 = (_QWORD *)this;
  if ((*(_BYTE *)(this + 160) & 1) != 0)
    this = PB::Writer::write(a2, *(double *)(this + 152));
  v4 = (float *)v3[4];
  v5 = (float *)v3[5];
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6);
  }
  v7 = (float *)v3[7];
  v8 = (float *)v3[8];
  while (v7 != v8)
  {
    v9 = *v7++;
    this = PB::Writer::write(a2, v9);
  }
  v10 = (float *)v3[13];
  v11 = (float *)v3[14];
  while (v10 != v11)
  {
    v12 = *v10++;
    this = PB::Writer::write(a2, v12);
  }
  v13 = (float *)v3[1];
  v14 = (float *)v3[2];
  while (v13 != v14)
  {
    v15 = *v13++;
    this = PB::Writer::write(a2, v15);
  }
  v16 = (float *)v3[10];
  v17 = (float *)v3[11];
  while (v16 != v17)
  {
    v18 = *v16++;
    this = PB::Writer::write(a2, v18);
  }
  v20 = (float *)v3[16];
  v19 = (float *)v3[17];
  while (v20 != v19)
  {
    v21 = *v20++;
    this = PB::Writer::write(a2, v21);
  }
  return this;
}

uint64_t CMMsl::DeviceMotionCorrection::hash_value(CMMsl::DeviceMotionCorrection *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*((_BYTE *)this + 160) & 1) != 0)
  {
    if (*((double *)this + 19) == 0.0)
      v1 = 0;
    else
      v1 = *((_QWORD *)this + 19);
  }
  else
  {
    v1 = 0;
  }
  v2 = PBHashBytes() ^ v1;
  v3 = PBHashBytes();
  v4 = v2 ^ v3 ^ PBHashBytes();
  v5 = PBHashBytes();
  v6 = v5 ^ PBHashBytes();
  return v4 ^ v6 ^ PBHashBytes();
}

double CMMsl::DeviceMotionCovariance::DeviceMotionCovariance(CMMsl::DeviceMotionCovariance *this)
{
  double result;

  *(_QWORD *)this = &off_25135D168;
  *((_DWORD *)this + 16) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_25135D168;
  *((_DWORD *)this + 16) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

void CMMsl::DeviceMotionCovariance::~DeviceMotionCovariance(CMMsl::DeviceMotionCovariance *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_25135D168;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::DeviceMotionCovariance::~DeviceMotionCovariance(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::DeviceMotionCovariance *CMMsl::DeviceMotionCovariance::DeviceMotionCovariance(CMMsl::DeviceMotionCovariance *this, const CMMsl::DeviceMotionCovariance *a2)
{
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_25135D168;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (_QWORD *)((char *)this + 8);
  *((_DWORD *)this + 16) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if ((*((_BYTE *)a2 + 64) & 1) != 0)
  {
    v5 = *((_QWORD *)a2 + 7);
    *((_BYTE *)this + 64) = 1;
    *((_QWORD *)this + 7) = v5;
  }
  if (this != a2)
  {
    sub_242911380((_QWORD *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
    sub_242911380(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  }
  return this;
}

uint64_t CMMsl::DeviceMotionCovariance::operator=(uint64_t a1, const CMMsl::DeviceMotionCovariance *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _BYTE v9[8];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;

  if ((const CMMsl::DeviceMotionCovariance *)a1 != a2)
  {
    CMMsl::DeviceMotionCovariance::DeviceMotionCovariance((CMMsl::DeviceMotionCovariance *)v9, a2);
    v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v14;
    v14 = v3;
    v4 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v13;
    v13 = v4;
    v5 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v6;
    v7 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v11 = v7;
    v12 = v5;
    CMMsl::DeviceMotionCovariance::~DeviceMotionCovariance((CMMsl::DeviceMotionCovariance *)v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::DeviceMotionCovariance *a2, CMMsl::DeviceMotionCovariance *a3)
{
  int v3;
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  result = *((double *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((double *)a2 + 7) = result;
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v5;
  v6 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v6;
  v7 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v7;
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v8;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v9;
  v10 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v10;
  return result;
}

uint64_t CMMsl::DeviceMotionCovariance::DeviceMotionCovariance(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_25135D168;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  sub_242911330(a1 + 32, (__n128 *)(a2 + 32));
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  return a1;
}

uint64_t CMMsl::DeviceMotionCovariance::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _BYTE v9[8];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;

  if (a1 != a2)
  {
    CMMsl::DeviceMotionCovariance::DeviceMotionCovariance((uint64_t)v9, a2);
    v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v14;
    v14 = v3;
    v4 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v13;
    v13 = v4;
    v5 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v6;
    v7 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v11 = v7;
    v12 = v5;
    CMMsl::DeviceMotionCovariance::~DeviceMotionCovariance((CMMsl::DeviceMotionCovariance *)v9);
  }
  return a1;
}

uint64_t CMMsl::DeviceMotionCovariance::formatText(CMMsl::DeviceMotionCovariance *this, PB::TextFormatter *a2, const char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (float *)*((_QWORD *)this + 1);
  v6 = (float *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "biasvariance", v7);
  }
  v8 = (float *)*((_QWORD *)this + 4);
  v9 = (float *)*((_QWORD *)this + 5);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(a2, "statevariance", v10);
  }
  if ((*((_BYTE *)this + 64) & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 7));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::DeviceMotionCovariance::readFrom(CMMsl::DeviceMotionCovariance *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  _DWORD *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  _DWORD *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  _DWORD *v53;
  unint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  _DWORD *v68;
  int v69;
  _DWORD *v70;
  int v71;
  unint64_t v72;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          v14 = v16++ > 8;
          if (v14)
            goto LABEL_27;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      v19 = v11 & 7;
      if (v19 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
        break;
      if ((_DWORD)v20 == 2)
      {
        if (v19 == 2)
        {
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v37 = *((_QWORD *)a2 + 1);
          v38 = *((_QWORD *)a2 + 2);
          while (v37 < v38 && !*((_BYTE *)a2 + 24))
          {
            v40 = (char *)*((_QWORD *)this + 5);
            v39 = *((_QWORD *)this + 6);
            if ((unint64_t)v40 >= v39)
            {
              v42 = (char *)*((_QWORD *)this + 4);
              v43 = (v40 - v42) >> 2;
              v44 = v43 + 1;
              if ((unint64_t)(v43 + 1) >> 62)
                goto LABEL_125;
              v45 = v39 - (_QWORD)v42;
              if (v45 >> 1 > v44)
                v44 = v45 >> 1;
              if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL)
                v46 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v46 = v44;
              if (v46)
              {
                v46 = (unint64_t)sub_2429114B8(v46);
                v42 = (char *)*((_QWORD *)this + 4);
                v40 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v47 = 0;
              }
              v48 = (_DWORD *)(v46 + 4 * v43);
              *v48 = 0;
              v41 = v48 + 1;
              while (v40 != v42)
              {
                v49 = *((_DWORD *)v40 - 1);
                v40 -= 4;
                *--v48 = v49;
              }
              *((_QWORD *)this + 4) = v48;
              *((_QWORD *)this + 5) = v41;
              *((_QWORD *)this + 6) = v46 + 4 * v47;
              if (v42)
                operator delete(v42);
            }
            else
            {
              *(_DWORD *)v40 = 0;
              v41 = v40 + 4;
            }
            *((_QWORD *)this + 5) = v41;
            v50 = *((_QWORD *)a2 + 1);
            if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_81;
            *(v41 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v50);
            v38 = *((_QWORD *)a2 + 2);
            v37 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v37;
          }
          goto LABEL_82;
        }
        v55 = (char *)*((_QWORD *)this + 5);
        v54 = *((_QWORD *)this + 6);
        if ((unint64_t)v55 >= v54)
        {
          v62 = (char *)*((_QWORD *)this + 4);
          v63 = (v55 - v62) >> 2;
          v64 = v63 + 1;
          if ((unint64_t)(v63 + 1) >> 62)
LABEL_125:
            sub_242729A44();
          v65 = v54 - (_QWORD)v62;
          if (v65 >> 1 > v64)
            v64 = v65 >> 1;
          if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL)
            v66 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v66 = v64;
          if (v66)
          {
            v66 = (unint64_t)sub_2429114B8(v66);
            v62 = (char *)*((_QWORD *)this + 4);
            v55 = (char *)*((_QWORD *)this + 5);
          }
          else
          {
            v67 = 0;
          }
          v70 = (_DWORD *)(v66 + 4 * v63);
          *v70 = 0;
          v53 = v70 + 1;
          while (v55 != v62)
          {
            v71 = *((_DWORD *)v55 - 1);
            v55 -= 4;
            *--v70 = v71;
          }
          *((_QWORD *)this + 4) = v70;
          *((_QWORD *)this + 5) = v53;
          *((_QWORD *)this + 6) = v66 + 4 * v67;
          if (v62)
            operator delete(v62);
        }
        else
        {
          *(_DWORD *)v55 = 0;
          v53 = v55 + 4;
        }
        *((_QWORD *)this + 5) = v53;
LABEL_113:
        v72 = *((_QWORD *)a2 + 1);
        if (v72 > 0xFFFFFFFFFFFFFFFBLL || v72 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_115;
        *(v53 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v72);
        v22 = *((_QWORD *)a2 + 1) + 4;
        goto LABEL_117;
      }
      if ((_DWORD)v20 != 1)
      {
LABEL_27:
        if ((PB::Reader::skip(a2) & 1) == 0)
          return 0;
        goto LABEL_118;
      }
      *((_BYTE *)this + 64) |= 1u;
      v21 = *((_QWORD *)a2 + 1);
      if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((_QWORD *)a2 + 2))
      {
LABEL_115:
        *((_BYTE *)a2 + 24) = 1;
        goto LABEL_118;
      }
      *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v21);
      v22 = *((_QWORD *)a2 + 1) + 8;
LABEL_117:
      *((_QWORD *)a2 + 1) = v22;
LABEL_118:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    if (v19 == 2)
    {
      if ((PB::Reader::placeMark() & 1) != 0)
        return 0;
      v23 = *((_QWORD *)a2 + 1);
      v24 = *((_QWORD *)a2 + 2);
      while (v23 < v24 && !*((_BYTE *)a2 + 24))
      {
        v26 = (char *)*((_QWORD *)this + 2);
        v25 = *((_QWORD *)this + 3);
        if ((unint64_t)v26 >= v25)
        {
          v28 = (char *)*((_QWORD *)this + 1);
          v29 = (v26 - v28) >> 2;
          v30 = v29 + 1;
          if ((unint64_t)(v29 + 1) >> 62)
            goto LABEL_125;
          v31 = v25 - (_QWORD)v28;
          if (v31 >> 1 > v30)
            v30 = v31 >> 1;
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
            v32 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v32 = v30;
          if (v32)
          {
            v32 = (unint64_t)sub_2429114B8(v32);
            v28 = (char *)*((_QWORD *)this + 1);
            v26 = (char *)*((_QWORD *)this + 2);
          }
          else
          {
            v33 = 0;
          }
          v34 = (_DWORD *)(v32 + 4 * v29);
          *v34 = 0;
          v27 = v34 + 1;
          while (v26 != v28)
          {
            v35 = *((_DWORD *)v26 - 1);
            v26 -= 4;
            *--v34 = v35;
          }
          *((_QWORD *)this + 1) = v34;
          *((_QWORD *)this + 2) = v27;
          *((_QWORD *)this + 3) = v32 + 4 * v33;
          if (v28)
            operator delete(v28);
        }
        else
        {
          *(_DWORD *)v26 = 0;
          v27 = v26 + 4;
        }
        *((_QWORD *)this + 2) = v27;
        v36 = *((_QWORD *)a2 + 1);
        if (v36 > 0xFFFFFFFFFFFFFFFBLL || v36 + 4 > *((_QWORD *)a2 + 2))
        {
LABEL_81:
          *((_BYTE *)a2 + 24) = 1;
          break;
        }
        *(v27 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v36);
        v24 = *((_QWORD *)a2 + 2);
        v23 = *((_QWORD *)a2 + 1) + 4;
        *((_QWORD *)a2 + 1) = v23;
      }
LABEL_82:
      PB::Reader::recallMark();
      goto LABEL_118;
    }
    v52 = (char *)*((_QWORD *)this + 2);
    v51 = *((_QWORD *)this + 3);
    if ((unint64_t)v52 >= v51)
    {
      v56 = (char *)*((_QWORD *)this + 1);
      v57 = (v52 - v56) >> 2;
      v58 = v57 + 1;
      if ((unint64_t)(v57 + 1) >> 62)
        goto LABEL_125;
      v59 = v51 - (_QWORD)v56;
      if (v59 >> 1 > v58)
        v58 = v59 >> 1;
      if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFFCLL)
        v60 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v60 = v58;
      if (v60)
      {
        v60 = (unint64_t)sub_2429114B8(v60);
        v56 = (char *)*((_QWORD *)this + 1);
        v52 = (char *)*((_QWORD *)this + 2);
      }
      else
      {
        v61 = 0;
      }
      v68 = (_DWORD *)(v60 + 4 * v57);
      *v68 = 0;
      v53 = v68 + 1;
      while (v52 != v56)
      {
        v69 = *((_DWORD *)v52 - 1);
        v52 -= 4;
        *--v68 = v69;
      }
      *((_QWORD *)this + 1) = v68;
      *((_QWORD *)this + 2) = v53;
      *((_QWORD *)this + 3) = v60 + 4 * v61;
      if (v56)
        operator delete(v56);
    }
    else
    {
      *(_DWORD *)v52 = 0;
      v53 = v52 + 4;
    }
    *((_QWORD *)this + 2) = v53;
    goto LABEL_113;
  }
  return v4 == 0;
}

uint64_t CMMsl::DeviceMotionCovariance::writeTo(uint64_t this, PB::Writer *a2)
{
  _QWORD *v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;

  v3 = (_QWORD *)this;
  if ((*(_BYTE *)(this + 64) & 1) != 0)
    this = PB::Writer::write(a2, *(double *)(this + 56));
  v4 = (float *)v3[4];
  v5 = (float *)v3[5];
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6);
  }
  v8 = (float *)v3[1];
  v7 = (float *)v3[2];
  while (v8 != v7)
  {
    v9 = *v8++;
    this = PB::Writer::write(a2, v9);
  }
  return this;
}

BOOL CMMsl::DeviceMotionCovariance::operator==(uint64_t a1, uint64_t a2)
{
  float *v2;
  float *v3;
  float *v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  float v9;
  _BOOL8 result;
  BOOL v11;

  if ((*(_BYTE *)(a1 + 64) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 64) & 1) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 64) & 1) != 0)
  {
    return 0;
  }
  v3 = *(float **)(a1 + 32);
  v2 = *(float **)(a1 + 40);
  v4 = *(float **)(a2 + 32);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 40) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(float **)(a2 + 8);
  if (v5 - v6 != *(_QWORD *)(a2 + 16) - (_QWORD)v7)
    return 0;
  if (v6 == v5)
    return 1;
  v8 = v6 + 4;
  do
  {
    v9 = *v7++;
    result = *(float *)(v8 - 4) == v9;
    v11 = *(float *)(v8 - 4) != v9 || v8 == v5;
    v8 += 4;
  }
  while (!v11);
  return result;
}

uint64_t CMMsl::DeviceMotionCovariance::hash_value(CMMsl::DeviceMotionCovariance *this)
{
  uint64_t v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 64) & 1) != 0)
  {
    if (*((double *)this + 7) == 0.0)
      v1 = 0;
    else
      v1 = *((_QWORD *)this + 7);
  }
  else
  {
    v1 = 0;
  }
  v2 = PBHashBytes() ^ v1;
  return v2 ^ PBHashBytes();
}

uint64_t CMMsl::DirectionOfTravelMetrics::DirectionOfTravelMetrics(uint64_t this)
{
  *(_QWORD *)this = &off_25135D1A0;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135D1A0;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

void CMMsl::DirectionOfTravelMetrics::~DirectionOfTravelMetrics(CMMsl::DirectionOfTravelMetrics *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::DirectionOfTravelMetrics::DirectionOfTravelMetrics(CMMsl::DirectionOfTravelMetrics *this, const CMMsl::DirectionOfTravelMetrics *a2)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_QWORD *)this = &off_25135D1A0;
  *((_DWORD *)this + 7) = 0;
  v2 = *((_BYTE *)a2 + 28);
  if ((v2 & 2) != 0)
  {
    v4 = *((_QWORD *)a2 + 2);
    v3 = 2;
    *((_BYTE *)this + 28) = 2;
    *((_QWORD *)this + 2) = v4;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 28) & 1) != 0)
  {
LABEL_5:
    v4 = *((_QWORD *)a2 + 1);
    v3 |= 1u;
    *((_BYTE *)this + 28) = v3;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_BYTE *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 6);
    *((_BYTE *)this + 28) = v3 | 4;
    *((_DWORD *)this + 6) = v4;
  }
  return *(float *)&v4;
}

uint64_t CMMsl::DirectionOfTravelMetrics::operator=(uint64_t a1, uint64_t a2, double a3, double a4, float a5)
{
  char v6;
  char v7;
  int v8;
  __int128 v9;
  int v10;
  void (**v12)(CMMsl::DirectionOfTravelMetrics *__hidden);
  __int128 v13;
  int v14;
  int v15;

  if (a1 != a2)
  {
    v12 = &off_25135D1A0;
    v15 = 0;
    v6 = *(_BYTE *)(a2 + 28);
    if ((v6 & 2) != 0)
    {
      a3 = *(double *)(a2 + 16);
      v7 = 2;
      LOBYTE(v15) = 2;
      if ((v6 & 1) != 0)
      {
LABEL_4:
        a4 = *(double *)(a2 + 8);
        v7 |= 1u;
        LOBYTE(v15) = v7;
        if ((v6 & 4) != 0)
          goto LABEL_8;
        goto LABEL_9;
      }
    }
    else
    {
      v7 = 0;
      if ((*(_BYTE *)(a2 + 28) & 1) != 0)
        goto LABEL_4;
    }
    if ((v6 & 4) != 0)
    {
LABEL_8:
      a5 = *(float *)(a2 + 24);
      LOBYTE(v15) = v7 | 4;
    }
LABEL_9:
    v8 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v15;
    v15 = v8;
    v9 = *(_OWORD *)(a1 + 8);
    *(double *)(a1 + 8) = a4;
    *(double *)(a1 + 16) = a3;
    v13 = v9;
    v10 = *(_DWORD *)(a1 + 24);
    *(float *)(a1 + 24) = a5;
    v14 = v10;
    PB::Base::~Base((PB::Base *)&v12);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::DirectionOfTravelMetrics *a2, CMMsl::DirectionOfTravelMetrics *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  float result;

  v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  return result;
}

float CMMsl::DirectionOfTravelMetrics::DirectionOfTravelMetrics(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135D1A0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_25135D1A0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

uint64_t CMMsl::DirectionOfTravelMetrics::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  __int128 v5;
  __int128 v6;
  void (**v8)(CMMsl::DirectionOfTravelMetrics *__hidden);
  __int128 v9;
  int v10;
  int v11;

  if (a1 != a2)
  {
    v8 = &off_25135D1A0;
    v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    v4 = *(_DWORD *)(a2 + 24);
    v11 = *(_DWORD *)(a1 + 28);
    v5 = *(_OWORD *)(a1 + 8);
    v6 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 28) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    v9 = v5;
    LODWORD(v5) = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v4;
    v10 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::DirectionOfTravelMetrics::formatText(CMMsl::DirectionOfTravelMetrics *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 4) == 0)
  {
    if ((*((_BYTE *)this + 28) & 1) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(a2, "theta", *((double *)this + 1));
    if ((*((_BYTE *)this + 28) & 2) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_4;
  }
  PB::TextFormatter::format(a2, "cadence", *((float *)this + 6));
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 1) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 2) != 0)
LABEL_4:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::DirectionOfTravelMetrics::readFrom(CMMsl::DirectionOfTravelMetrics *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          v14 = v16++ > 8;
          if (v14)
            goto LABEL_27;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v19 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((_BYTE *)this + 28) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        v2 = *((_QWORD *)a2 + 1) + 4;
      }
      else
      {
        if ((_DWORD)v19 == 2)
        {
          *((_BYTE *)this + 28) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_34;
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        }
        else
        {
          if ((_DWORD)v19 != 1)
          {
LABEL_27:
            result = PB::Reader::skip(a2);
            if (!(_DWORD)result)
              return result;
            v2 = *((_QWORD *)a2 + 1);
            goto LABEL_38;
          }
          *((_BYTE *)this + 28) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          {
LABEL_34:
            *((_BYTE *)a2 + 24) = 1;
            goto LABEL_38;
          }
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        }
        v2 = *((_QWORD *)a2 + 1) + 8;
      }
      *((_QWORD *)a2 + 1) = v2;
LABEL_38:
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::DirectionOfTravelMetrics::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 28);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16));
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        return this;
      return PB::Writer::write(a2, *(float *)(v3 + 24));
    }
  }
  else if ((*(_BYTE *)(this + 28) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  if ((*(_BYTE *)(v3 + 28) & 4) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 24));
  return this;
}

BOOL CMMsl::DirectionOfTravelMetrics::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 28) & 4) == 0;
  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
    return (*(_BYTE *)(a2 + 28) & 4) != 0 && *(float *)(a1 + 24) == *(float *)(a2 + 24);
  return v2;
}

uint64_t CMMsl::DirectionOfTravelMetrics::hash_value(CMMsl::DirectionOfTravelMetrics *this)
{
  double v1;
  double v2;
  float v3;
  uint64_t v4;

  if ((*((_BYTE *)this + 28) & 2) != 0)
  {
    v1 = *((double *)this + 2);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 28) & 1) != 0)
    {
LABEL_3:
      v2 = *((double *)this + 1);
      if (v2 == 0.0)
        v2 = 0.0;
      if ((*((_BYTE *)this + 28) & 4) != 0)
        goto LABEL_6;
LABEL_13:
      v4 = 0;
      return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ v4;
    }
  }
  else
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 28) & 1) != 0)
      goto LABEL_3;
  }
  v2 = 0.0;
  if ((*((_BYTE *)this + 28) & 4) == 0)
    goto LABEL_13;
LABEL_6:
  v3 = *((float *)this + 6);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ v4;
}

uint64_t CMMsl::DisplacingState::DisplacingState(uint64_t this)
{
  *(_QWORD *)this = &off_25135D1D8;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135D1D8;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::DisplacingState::~DisplacingState(CMMsl::DisplacingState *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::DisplacingState::DisplacingState(uint64_t this, const CMMsl::DisplacingState *a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)this = &off_25135D1D8;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)this = &off_25135D1D8;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::DisplacingState::operator=(uint64_t a1, uint64_t a2, double a3)
{
  int v3;
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  uint64_t v12;

  if (a1 != a2)
  {
    v11[0] = &off_25135D1D8;
    HIDWORD(v12) = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      BYTE4(v12) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        v3 = *(_DWORD *)(a2 + 16);
        BYTE4(v12) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = HIDWORD(v12);
    v8 = *(_QWORD *)(a1 + 8);
    v9 = *(_QWORD *)(a1 + 16);
    *(double *)(a1 + 8) = a3;
    *(_DWORD *)(a1 + 16) = v3;
    *(_DWORD *)(a1 + 20) = v7;
    v11[1] = v8;
    v12 = v9;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::DisplacingState *a2, CMMsl::DisplacingState *a3)
{
  int v3;
  double result;
  int v5;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  return result;
}

double CMMsl::DisplacingState::DisplacingState(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135D1D8;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135D1D8;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::DisplacingState::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  if (a1 != a2)
  {
    v8[0] = &off_25135D1D8;
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    v8[1] = v5;
    v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::DisplacingState::formatText(CMMsl::DisplacingState *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "displacingState");
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::DisplacingState::readFrom(CMMsl::DisplacingState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_26;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v26 = 0;
          v27 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_47;
            }
            v28 = v20++;
            v29 = *(_BYTE *)(v21 + v28);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0)
              break;
            v26 += 7;
            v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
LABEL_46:
          v2 = v28 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)a2 + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 4) = v24;
      }
      else if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_26:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_26;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::DisplacingState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

BOOL CMMsl::DisplacingState::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

uint64_t CMMsl::DisplacingState::hash_value(CMMsl::DisplacingState *this)
{
  double v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v2 = 0;
    return v2 ^ *(_QWORD *)&v1;
  }
  v1 = 0.0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((unsigned int *)this + 4);
  return v2 ^ *(_QWORD *)&v1;
}

uint64_t CMMsl::DisplayStatus::DisplayStatus(uint64_t this)
{
  *(_QWORD *)this = &off_25135D210;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135D210;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

void CMMsl::DisplayStatus::~DisplayStatus(CMMsl::DisplayStatus *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::DisplayStatus::DisplayStatus(uint64_t this, const CMMsl::DisplayStatus *a2)
{
  char v2;

  *(_QWORD *)this = &off_25135D210;
  *(_DWORD *)(this + 12) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v2 = *((_BYTE *)a2 + 8);
    *(_BYTE *)(this + 12) = 1;
    *(_BYTE *)(this + 8) = v2;
  }
  return this;
}

{
  char v2;

  *(_QWORD *)this = &off_25135D210;
  *(_DWORD *)(this + 12) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v2 = *((_BYTE *)a2 + 8);
    *(_BYTE *)(this + 12) = 1;
    *(_BYTE *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::DisplayStatus::operator=(uint64_t a1, uint64_t a2)
{
  char v3;
  int v4;
  char v5;
  void (**v7)(CMMsl::DisplayStatus *__hidden);
  char v8;
  int v9;

  if (a1 != a2)
  {
    v7 = &off_25135D210;
    v3 = *(_BYTE *)(a2 + 8);
    v4 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = *(_BYTE *)(a2 + 12) & 1;
    v9 = v4;
    v5 = *(_BYTE *)(a1 + 8);
    *(_BYTE *)(a1 + 8) = v3;
    v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

{
  int v3;
  char v4;
  int v5;
  void (**v7)(CMMsl::DisplayStatus *__hidden);
  char v8;
  int v9;

  if (a1 != a2)
  {
    v7 = &off_25135D210;
    v3 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    v4 = *(_BYTE *)(a2 + 8);
    v5 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v3;
    v9 = v5;
    LOBYTE(v3) = *(_BYTE *)(a1 + 8);
    *(_BYTE *)(a1 + 8) = v4;
    v8 = v3;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::DisplayStatus *a2, CMMsl::DisplayStatus *a3)
{
  int v3;

  v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  LOBYTE(v3) = *(_BYTE *)(this + 8);
  *(_BYTE *)(this + 8) = *((_BYTE *)a2 + 8);
  *((_BYTE *)a2 + 8) = v3;
  return this;
}

uint64_t CMMsl::DisplayStatus::DisplayStatus(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = &off_25135D210;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

{
  *(_QWORD *)result = &off_25135D210;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

uint64_t CMMsl::DisplayStatus::formatText(CMMsl::DisplayStatus *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 12) & 1) != 0)
    PB::TextFormatter::format(a2, "displayOn");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::DisplayStatus::readFrom(CMMsl::DisplayStatus *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v19;
  BOOL v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_24;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 12) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        if (v2 >= v3)
        {
          v20 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v19 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v20 = v19 != 0;
        }
        *((_BYTE *)this + 8) = v20;
      }
      else
      {
LABEL_24:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_24;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::DisplayStatus::writeTo(uint64_t this, PB::Writer *a2)
{
  if ((*(_BYTE *)(this + 12) & 1) != 0)
    return PB::Writer::write(a2);
  return this;
}

BOOL CMMsl::DisplayStatus::operator==(uint64_t a1, uint64_t a2)
{
  char v3;
  _BOOL8 result;

  v3 = *(_BYTE *)(a1 + 12);
  result = (*(_BYTE *)(a2 + 12) & 1) == 0;
  if ((v3 & 1) != 0)
    return (*(_BYTE *)(a2 + 12) & 1) != 0 && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8);
  return result;
}

uint64_t CMMsl::DisplayStatus::hash_value(CMMsl::DisplayStatus *this)
{
  if ((*((_BYTE *)this + 12) & 1) != 0)
    return *((unsigned __int8 *)this + 8);
  else
    return 0;
}

double CMMsl::DoTEstimatorHandSwing::DoTEstimatorHandSwing(CMMsl::DoTEstimatorHandSwing *this)
{
  double result;

  *(_QWORD *)this = &off_25135D248;
  *((_DWORD *)this + 36) = 0;
  *((_DWORD *)this + 40) = 0;
  *((_DWORD *)this + 42) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_25135D248;
  *((_DWORD *)this + 36) = 0;
  *((_DWORD *)this + 40) = 0;
  *((_DWORD *)this + 42) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  return result;
}

void CMMsl::DoTEstimatorHandSwing::~DoTEstimatorHandSwing(CMMsl::DoTEstimatorHandSwing *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  *(_QWORD *)this = &off_25135D248;
  v2 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (void *)*((_QWORD *)this + 10);
  if (v4)
  {
    *((_QWORD *)this + 11) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 7);
  if (v5)
  {
    *((_QWORD *)this + 8) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 4);
  if (v6)
  {
    *((_QWORD *)this + 5) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 1);
  if (v7)
  {
    *((_QWORD *)this + 2) = v7;
    operator delete(v7);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::DoTEstimatorHandSwing::~DoTEstimatorHandSwing(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::DoTEstimatorHandSwing *CMMsl::DoTEstimatorHandSwing::DoTEstimatorHandSwing(CMMsl::DoTEstimatorHandSwing *this, const CMMsl::DoTEstimatorHandSwing *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  __int16 v7;
  int v8;
  CMMsl::SwingDoTCandidate *v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  CMMsl::SwingDoTCandidate *v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  int v18;
  int v20;
  uint64_t v21;
  int v22;
  char v23;
  int v24;
  int v25;
  int v26;

  *(_QWORD *)this = &off_25135D248;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (_QWORD *)((char *)this + 8);
  *(_OWORD *)((char *)this + 56) = 0u;
  v5 = (_QWORD *)((char *)this + 56);
  *((_DWORD *)this + 36) = 0;
  *((_DWORD *)this + 40) = 0;
  *((_DWORD *)this + 42) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  if ((*((_WORD *)a2 + 84) & 2) != 0)
  {
    v6 = *((_QWORD *)a2 + 16);
    *((_WORD *)this + 84) = 2;
    *((_QWORD *)this + 16) = v6;
  }
  if (this != a2)
  {
    sub_242911380((_QWORD *)this + 10, *((char **)a2 + 10), *((char **)a2 + 11), (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 2);
    sub_242911380(v5, *((char **)a2 + 7), *((char **)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 2);
  }
  v7 = *((_WORD *)a2 + 84);
  if ((v7 & 0x20) == 0)
  {
    if ((v7 & 1) == 0)
      goto LABEL_7;
LABEL_26:
    v21 = *((_QWORD *)a2 + 15);
    *((_WORD *)this + 84) |= 1u;
    *((_QWORD *)this + 15) = v21;
    if ((*((_WORD *)a2 + 84) & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
  v20 = *((_DWORD *)a2 + 37);
  *((_WORD *)this + 84) |= 0x20u;
  *((_DWORD *)this + 37) = v20;
  v7 = *((_WORD *)a2 + 84);
  if ((v7 & 1) != 0)
    goto LABEL_26;
LABEL_7:
  if ((v7 & 0x100) != 0)
  {
LABEL_8:
    v8 = *((_DWORD *)a2 + 40);
    *((_WORD *)this + 84) |= 0x100u;
    *((_DWORD *)this + 40) = v8;
  }
LABEL_9:
  if (*((_QWORD *)a2 + 13))
  {
    v9 = (CMMsl::SwingDoTCandidate *)operator new();
    v10 = CMMsl::SwingDoTCandidate::SwingDoTCandidate(v9, *((const CMMsl::SwingDoTCandidate **)a2 + 13));
    v11 = *((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = v12;
    if (v11)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v11 + 8))(v11, v10);
  }
  if (*((_QWORD *)a2 + 14))
  {
    v13 = (CMMsl::SwingDoTCandidate *)operator new();
    v14 = CMMsl::SwingDoTCandidate::SwingDoTCandidate(v13, *((const CMMsl::SwingDoTCandidate **)a2 + 14));
    v15 = *((_QWORD *)this + 14);
    *((_QWORD *)this + 14) = v16;
    if (v15)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v15 + 8))(v15, v14);
  }
  v17 = *((_WORD *)a2 + 84);
  if ((v17 & 0x10) != 0)
  {
    v22 = *((_DWORD *)a2 + 36);
    *((_WORD *)this + 84) |= 0x10u;
    *((_DWORD *)this + 36) = v22;
    v17 = *((_WORD *)a2 + 84);
    if ((v17 & 0x200) == 0)
    {
LABEL_17:
      if ((v17 & 4) == 0)
        goto LABEL_18;
      goto LABEL_30;
    }
  }
  else if ((*((_WORD *)a2 + 84) & 0x200) == 0)
  {
    goto LABEL_17;
  }
  v23 = *((_BYTE *)a2 + 164);
  *((_WORD *)this + 84) |= 0x200u;
  *((_BYTE *)this + 164) = v23;
  v17 = *((_WORD *)a2 + 84);
  if ((v17 & 4) == 0)
  {
LABEL_18:
    if ((v17 & 8) == 0)
      goto LABEL_19;
    goto LABEL_31;
  }
LABEL_30:
  v24 = *((_DWORD *)a2 + 34);
  *((_WORD *)this + 84) |= 4u;
  *((_DWORD *)this + 34) = v24;
  v17 = *((_WORD *)a2 + 84);
  if ((v17 & 8) == 0)
  {
LABEL_19:
    if ((v17 & 0x40) == 0)
      goto LABEL_20;
    goto LABEL_32;
  }
LABEL_31:
  v25 = *((_DWORD *)a2 + 35);
  *((_WORD *)this + 84) |= 8u;
  *((_DWORD *)this + 35) = v25;
  v17 = *((_WORD *)a2 + 84);
  if ((v17 & 0x40) == 0)
  {
LABEL_20:
    if ((v17 & 0x80) == 0)
      goto LABEL_22;
    goto LABEL_21;
  }
LABEL_32:
  v26 = *((_DWORD *)a2 + 38);
  *((_WORD *)this + 84) |= 0x40u;
  *((_DWORD *)this + 38) = v26;
  if ((*((_WORD *)a2 + 84) & 0x80) != 0)
  {
LABEL_21:
    v18 = *((_DWORD *)a2 + 39);
    *((_WORD *)this + 84) |= 0x80u;
    *((_DWORD *)this + 39) = v18;
  }
LABEL_22:
  if (this != a2)
  {
    sub_242911380(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
    sub_242911380((_QWORD *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
  }
  return this;
}

CMMsl *CMMsl::DoTEstimatorHandSwing::operator=(CMMsl *a1, const CMMsl::DoTEstimatorHandSwing *a2)
{
  CMMsl::DoTEstimatorHandSwing *v3;
  _BYTE v5[176];

  if (a1 != a2)
  {
    CMMsl::DoTEstimatorHandSwing::DoTEstimatorHandSwing((CMMsl::DoTEstimatorHandSwing *)v5, a2);
    CMMsl::swap(a1, (CMMsl::DoTEstimatorHandSwing *)v5, v3);
    CMMsl::DoTEstimatorHandSwing::~DoTEstimatorHandSwing((CMMsl::DoTEstimatorHandSwing *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::DoTEstimatorHandSwing *a2, CMMsl::DoTEstimatorHandSwing *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v3;
  v4 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v4;
  v5 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v5;
  v6 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v6;
  v7 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v7;
  v8 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v8;
  v9 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v9;
  v10 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v10;
  LODWORD(v4) = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v4;
  v11 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v11;
  v12 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v12;
  v13 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v13;
  LODWORD(v13) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 164);
  *((_BYTE *)this + 164) = *((_BYTE *)a2 + 164);
  *((_BYTE *)a2 + 164) = v13;
  LODWORD(v11) = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v11;
  LODWORD(v11) = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v11;
  LODWORD(v13) = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v13;
  result = *(double *)((char *)a2 + 156);
  v15 = *(_QWORD *)((char *)this + 156);
  *(double *)((char *)this + 156) = result;
  *(_QWORD *)((char *)a2 + 156) = v15;
  v16 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v16;
  v17 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v17;
  v18 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v18;
  v19 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v19;
  v20 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v20;
  v21 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v21;
  return result;
}

uint64_t CMMsl::DoTEstimatorHandSwing::DoTEstimatorHandSwing(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_OWORD *)(a1 + 8) = 0u;
  v4 = a1 + 8;
  *(_QWORD *)a1 = &off_25135D248;
  *(_DWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  sub_242911330(a1 + 80, (__n128 *)(a2 + 80));
  sub_242911330(a1 + 56, (__n128 *)(a2 + 56));
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  v5 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = 0;
  v6 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  v8 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 164) = *(_BYTE *)(a2 + 164);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  sub_242911330(v4, (__n128 *)(a2 + 8));
  sub_242911330(a1 + 32, (__n128 *)(a2 + 32));
  return a1;
}

CMMsl *CMMsl::DoTEstimatorHandSwing::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::DoTEstimatorHandSwing *v3;
  _BYTE v5[176];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::DoTEstimatorHandSwing::DoTEstimatorHandSwing((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::DoTEstimatorHandSwing *)v5, v3);
    CMMsl::DoTEstimatorHandSwing::~DoTEstimatorHandSwing((CMMsl::DoTEstimatorHandSwing *)v5);
  }
  return a1;
}

uint64_t CMMsl::DoTEstimatorHandSwing::formatText(CMMsl::DoTEstimatorHandSwing *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;
  float *v6;
  float *v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  float *v12;
  float v13;
  __int16 v14;
  float *v15;
  float *v16;
  float v17;
  float *v18;
  float *v19;
  float v20;
  __int16 v21;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 84);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "AzABufferMean", *((float *)this + 34));
    v5 = *((_WORD *)this + 84);
  }
  if ((v5 & 8) != 0)
    PB::TextFormatter::format(a2, "AzBBufferMean", *((float *)this + 35));
  v6 = (float *)*((_QWORD *)this + 1);
  v7 = (float *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(a2, "cachedAttitude", v8);
  }
  v9 = *((_QWORD *)this + 13);
  if (v9)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, a2, "candidateA");
  v10 = *((_QWORD *)this + 14);
  if (v10)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v10 + 32))(v10, a2, "candidateB");
  v11 = (float *)*((_QWORD *)this + 4);
  v12 = (float *)*((_QWORD *)this + 5);
  while (v11 != v12)
  {
    v13 = *v11++;
    PB::TextFormatter::format(a2, "currAttitude", v13);
  }
  v14 = *((_WORD *)this + 84);
  if ((v14 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "disambiguationFlag");
    v14 = *((_WORD *)this + 84);
    if ((v14 & 1) == 0)
    {
LABEL_15:
      if ((v14 & 0x20) == 0)
        goto LABEL_17;
      goto LABEL_16;
    }
  }
  else if ((v14 & 1) == 0)
  {
    goto LABEL_15;
  }
  PB::TextFormatter::format(a2, "lastDoTUpdateTime", *((double *)this + 15));
  if ((*((_WORD *)this + 84) & 0x20) != 0)
LABEL_16:
    PB::TextFormatter::format(a2, "lastEstimatedDoTAngleRad", *((float *)this + 37));
LABEL_17:
  v15 = (float *)*((_QWORD *)this + 7);
  v16 = (float *)*((_QWORD *)this + 8);
  while (v15 != v16)
  {
    v17 = *v15++;
    PB::TextFormatter::format(a2, "lpfInertialRotationRate", v17);
  }
  v18 = (float *)*((_QWORD *)this + 10);
  v19 = (float *)*((_QWORD *)this + 11);
  while (v18 != v19)
  {
    v20 = *v18++;
    PB::TextFormatter::format(a2, "lpfInertialUserAccel", v20);
  }
  v21 = *((_WORD *)this + 84);
  if ((v21 & 0x200) != 0)
  {
    PB::TextFormatter::format(a2, "newDisambiguation");
    v21 = *((_WORD *)this + 84);
    if ((v21 & 0x40) == 0)
    {
LABEL_23:
      if ((v21 & 0x80) == 0)
        goto LABEL_24;
      goto LABEL_33;
    }
  }
  else if ((v21 & 0x40) == 0)
  {
    goto LABEL_23;
  }
  PB::TextFormatter::format(a2, "numAbortedPeaks");
  v21 = *((_WORD *)this + 84);
  if ((v21 & 0x80) == 0)
  {
LABEL_24:
    if ((v21 & 0x100) == 0)
      goto LABEL_25;
LABEL_34:
    PB::TextFormatter::format(a2, "stateFSM");
    if ((*((_WORD *)this + 84) & 2) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_26;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "numLargeYawDetections");
  v21 = *((_WORD *)this + 84);
  if ((v21 & 0x100) != 0)
    goto LABEL_34;
LABEL_25:
  if ((v21 & 2) != 0)
LABEL_26:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 16));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::DoTEstimatorHandSwing::readFrom(CMMsl::DoTEstimatorHandSwing *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  _DWORD *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  _DWORD *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  _DWORD *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  unint64_t v71;
  unint64_t v72;
  int v73;
  BOOL v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  char *v96;
  _DWORD *v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  _DWORD *v104;
  int v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  char *v110;
  _DWORD *v111;
  char *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  _DWORD *v118;
  int v119;
  unint64_t v120;
  unint64_t v121;
  char *v122;
  _DWORD *v123;
  unint64_t v124;
  char *v125;
  char v126;
  unsigned int v127;
  unint64_t v128;
  char v129;
  char v130;
  unsigned int v131;
  unint64_t v132;
  char v133;
  char v134;
  unsigned int v135;
  unint64_t v136;
  char v137;
  char v138;
  unsigned int v139;
  unint64_t v140;
  char v141;
  unint64_t v142;
  char *v143;
  unint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  _DWORD *v170;
  int v171;
  _DWORD *v172;
  int v173;
  _DWORD *v174;
  int v175;
  _DWORD *v176;
  int v177;
  unint64_t v178;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_21:
      v19 = v11 & 7;
      if (v19 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_WORD *)this + 84) |= 2u;
          v20 = *((_QWORD *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_290;
          *((_QWORD *)this + 16) = *(_QWORD *)(*(_QWORD *)a2 + v20);
          goto LABEL_80;
        case 2u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v21 = *((_QWORD *)a2 + 1);
            v22 = *((_QWORD *)a2 + 2);
            while (v21 < v22 && !*((_BYTE *)a2 + 24))
            {
              v24 = (char *)*((_QWORD *)this + 11);
              v23 = *((_QWORD *)this + 12);
              if ((unint64_t)v24 >= v23)
              {
                v26 = (char *)*((_QWORD *)this + 10);
                v27 = (v24 - v26) >> 2;
                v28 = v27 + 1;
                if ((unint64_t)(v27 + 1) >> 62)
                  goto LABEL_303;
                v29 = v23 - (_QWORD)v26;
                if (v29 >> 1 > v28)
                  v28 = v29 >> 1;
                if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL)
                  v30 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v30 = v28;
                if (v30)
                {
                  v30 = (unint64_t)sub_2429114B8(v30);
                  v26 = (char *)*((_QWORD *)this + 10);
                  v24 = (char *)*((_QWORD *)this + 11);
                }
                else
                {
                  v31 = 0;
                }
                v32 = (_DWORD *)(v30 + 4 * v27);
                *v32 = 0;
                v25 = v32 + 1;
                while (v24 != v26)
                {
                  v33 = *((_DWORD *)v24 - 1);
                  v24 -= 4;
                  *--v32 = v33;
                }
                *((_QWORD *)this + 10) = v32;
                *((_QWORD *)this + 11) = v25;
                *((_QWORD *)this + 12) = v30 + 4 * v31;
                if (v26)
                  operator delete(v26);
              }
              else
              {
                *(_DWORD *)v24 = 0;
                v25 = v24 + 4;
              }
              *((_QWORD *)this + 11) = v25;
              v34 = *((_QWORD *)a2 + 1);
              if (v34 > 0xFFFFFFFFFFFFFFFBLL || v34 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_172;
              *(v25 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v34);
              v22 = *((_QWORD *)a2 + 2);
              v21 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v21;
            }
            goto LABEL_173;
          }
          v122 = (char *)*((_QWORD *)this + 11);
          v121 = *((_QWORD *)this + 12);
          if ((unint64_t)v122 >= v121)
          {
            v146 = (char *)*((_QWORD *)this + 10);
            v147 = (v122 - v146) >> 2;
            v148 = v147 + 1;
            if ((unint64_t)(v147 + 1) >> 62)
              goto LABEL_303;
            v149 = v121 - (_QWORD)v146;
            if (v149 >> 1 > v148)
              v148 = v149 >> 1;
            if ((unint64_t)v149 >= 0x7FFFFFFFFFFFFFFCLL)
              v150 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v150 = v148;
            if (v150)
            {
              v150 = (unint64_t)sub_2429114B8(v150);
              v146 = (char *)*((_QWORD *)this + 10);
              v122 = (char *)*((_QWORD *)this + 11);
            }
            else
            {
              v151 = 0;
            }
            v170 = (_DWORD *)(v150 + 4 * v147);
            *v170 = 0;
            v123 = v170 + 1;
            while (v122 != v146)
            {
              v171 = *((_DWORD *)v122 - 1);
              v122 -= 4;
              *--v170 = v171;
            }
            *((_QWORD *)this + 10) = v170;
            *((_QWORD *)this + 11) = v123;
            *((_QWORD *)this + 12) = v150 + 4 * v151;
            if (v146)
              operator delete(v146);
          }
          else
          {
            *(_DWORD *)v122 = 0;
            v123 = v122 + 4;
          }
          *((_QWORD *)this + 11) = v123;
          goto LABEL_288;
        case 3u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v35 = *((_QWORD *)a2 + 1);
            v36 = *((_QWORD *)a2 + 2);
            while (v35 < v36 && !*((_BYTE *)a2 + 24))
            {
              v38 = (char *)*((_QWORD *)this + 8);
              v37 = *((_QWORD *)this + 9);
              if ((unint64_t)v38 >= v37)
              {
                v40 = (char *)*((_QWORD *)this + 7);
                v41 = (v38 - v40) >> 2;
                v42 = v41 + 1;
                if ((unint64_t)(v41 + 1) >> 62)
                  goto LABEL_303;
                v43 = v37 - (_QWORD)v40;
                if (v43 >> 1 > v42)
                  v42 = v43 >> 1;
                if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL)
                  v44 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v44 = v42;
                if (v44)
                {
                  v44 = (unint64_t)sub_2429114B8(v44);
                  v40 = (char *)*((_QWORD *)this + 7);
                  v38 = (char *)*((_QWORD *)this + 8);
                }
                else
                {
                  v45 = 0;
                }
                v46 = (_DWORD *)(v44 + 4 * v41);
                *v46 = 0;
                v39 = v46 + 1;
                while (v38 != v40)
                {
                  v47 = *((_DWORD *)v38 - 1);
                  v38 -= 4;
                  *--v46 = v47;
                }
                *((_QWORD *)this + 7) = v46;
                *((_QWORD *)this + 8) = v39;
                *((_QWORD *)this + 9) = v44 + 4 * v45;
                if (v40)
                  operator delete(v40);
              }
              else
              {
                *(_DWORD *)v38 = 0;
                v39 = v38 + 4;
              }
              *((_QWORD *)this + 8) = v39;
              v48 = *((_QWORD *)a2 + 1);
              if (v48 > 0xFFFFFFFFFFFFFFFBLL || v48 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_172;
              *(v39 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v48);
              v36 = *((_QWORD *)a2 + 2);
              v35 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v35;
            }
            goto LABEL_173;
          }
          v125 = (char *)*((_QWORD *)this + 8);
          v124 = *((_QWORD *)this + 9);
          if ((unint64_t)v125 >= v124)
          {
            v152 = (char *)*((_QWORD *)this + 7);
            v153 = (v125 - v152) >> 2;
            v154 = v153 + 1;
            if ((unint64_t)(v153 + 1) >> 62)
              goto LABEL_303;
            v155 = v124 - (_QWORD)v152;
            if (v155 >> 1 > v154)
              v154 = v155 >> 1;
            if ((unint64_t)v155 >= 0x7FFFFFFFFFFFFFFCLL)
              v156 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v156 = v154;
            if (v156)
            {
              v156 = (unint64_t)sub_2429114B8(v156);
              v152 = (char *)*((_QWORD *)this + 7);
              v125 = (char *)*((_QWORD *)this + 8);
            }
            else
            {
              v157 = 0;
            }
            v172 = (_DWORD *)(v156 + 4 * v153);
            *v172 = 0;
            v123 = v172 + 1;
            while (v125 != v152)
            {
              v173 = *((_DWORD *)v125 - 1);
              v125 -= 4;
              *--v172 = v173;
            }
            *((_QWORD *)this + 7) = v172;
            *((_QWORD *)this + 8) = v123;
            *((_QWORD *)this + 9) = v156 + 4 * v157;
            if (v152)
              operator delete(v152);
          }
          else
          {
            *(_DWORD *)v125 = 0;
            v123 = v125 + 4;
          }
          *((_QWORD *)this + 8) = v123;
          goto LABEL_288;
        case 4u:
          *((_WORD *)this + 84) |= 0x20u;
          v49 = *((_QWORD *)a2 + 1);
          if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_290;
          *((_DWORD *)this + 37) = *(_DWORD *)(*(_QWORD *)a2 + v49);
          goto LABEL_292;
        case 5u:
          *((_WORD *)this + 84) |= 1u;
          v50 = *((_QWORD *)a2 + 1);
          if (v50 > 0xFFFFFFFFFFFFFFF7 || v50 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_290;
          *((_QWORD *)this + 15) = *(_QWORD *)(*(_QWORD *)a2 + v50);
LABEL_80:
          v51 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_293;
        case 6u:
          *((_WORD *)this + 84) |= 0x100u;
          v52 = *((_QWORD *)a2 + 1);
          v53 = *((_QWORD *)a2 + 2);
          v54 = *(_QWORD *)a2;
          if (v52 <= 0xFFFFFFFFFFFFFFF5 && v52 + 10 <= v53)
          {
            v55 = 0;
            v56 = 0;
            v57 = 0;
            do
            {
              v58 = v52 + 1;
              *((_QWORD *)a2 + 1) = v52 + 1;
              v59 = *(_BYTE *)(v54 + v52);
              v57 |= (unint64_t)(v59 & 0x7F) << v55;
              if ((v59 & 0x80) == 0)
                goto LABEL_250;
              v55 += 7;
              v52 = v58;
              v14 = v56++ > 8;
            }
            while (!v14);
LABEL_184:
            LODWORD(v57) = 0;
            goto LABEL_250;
          }
          v126 = 0;
          v127 = 0;
          v57 = 0;
          if (v53 <= v52)
            v53 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v53 == v52)
            {
              LODWORD(v57) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v128 = v52 + 1;
              v129 = *(_BYTE *)(v54 + v52);
              *((_QWORD *)a2 + 1) = v128;
              v57 |= (unint64_t)(v129 & 0x7F) << v126;
              if (v129 < 0)
              {
                v126 += 7;
                v52 = v128;
                v14 = v127++ > 8;
                if (v14)
                  goto LABEL_184;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v57) = 0;
            }
            break;
          }
LABEL_250:
          *((_DWORD *)this + 40) = v57;
          goto LABEL_294;
        case 7u:
          v60 = (_DWORD *)operator new();
          *(_QWORD *)v60 = &off_2513614C8;
          v60[8] = 0;
          v61 = *((_QWORD *)this + 13);
          *((_QWORD *)this + 13) = v60;
          if (v61)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
            v60 = (_DWORD *)*((_QWORD *)this + 13);
          }
          goto LABEL_92;
        case 8u:
          v60 = (_DWORD *)operator new();
          *(_QWORD *)v60 = &off_2513614C8;
          v60[8] = 0;
          v62 = *((_QWORD *)this + 14);
          *((_QWORD *)this + 14) = v60;
          if (v62)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
            v60 = (_DWORD *)*((_QWORD *)this + 14);
          }
LABEL_92:
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v60 + 16))(v60, a2) & 1) == 0)
          {
            return 0;
          }
          goto LABEL_173;
        case 9u:
          *((_WORD *)this + 84) |= 0x10u;
          v63 = *((_QWORD *)a2 + 1);
          v64 = *((_QWORD *)a2 + 2);
          v65 = *(_QWORD *)a2;
          if (v63 <= 0xFFFFFFFFFFFFFFF5 && v63 + 10 <= v64)
          {
            v66 = 0;
            v67 = 0;
            v68 = 0;
            do
            {
              v69 = v63 + 1;
              *((_QWORD *)a2 + 1) = v63 + 1;
              v70 = *(_BYTE *)(v65 + v63);
              v68 |= (unint64_t)(v70 & 0x7F) << v66;
              if ((v70 & 0x80) == 0)
                goto LABEL_253;
              v66 += 7;
              v63 = v69;
              v14 = v67++ > 8;
            }
            while (!v14);
LABEL_191:
            LODWORD(v68) = 0;
            goto LABEL_253;
          }
          v130 = 0;
          v131 = 0;
          v68 = 0;
          if (v64 <= v63)
            v64 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v64 == v63)
            {
              LODWORD(v68) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v132 = v63 + 1;
              v133 = *(_BYTE *)(v65 + v63);
              *((_QWORD *)a2 + 1) = v132;
              v68 |= (unint64_t)(v133 & 0x7F) << v130;
              if (v133 < 0)
              {
                v130 += 7;
                v63 = v132;
                v14 = v131++ > 8;
                if (v14)
                  goto LABEL_191;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v68) = 0;
            }
            break;
          }
LABEL_253:
          *((_DWORD *)this + 36) = v68;
          goto LABEL_294;
        case 0xAu:
          *((_WORD *)this + 84) |= 0x200u;
          v71 = *((_QWORD *)a2 + 1);
          if (v71 >= *((_QWORD *)a2 + 2))
          {
            v74 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v72 = v71 + 1;
            v73 = *(unsigned __int8 *)(*(_QWORD *)a2 + v71);
            *((_QWORD *)a2 + 1) = v72;
            v74 = v73 != 0;
          }
          *((_BYTE *)this + 164) = v74;
          goto LABEL_294;
        case 0xBu:
          *((_WORD *)this + 84) |= 4u;
          v75 = *((_QWORD *)a2 + 1);
          if (v75 > 0xFFFFFFFFFFFFFFFBLL || v75 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_290;
          *((_DWORD *)this + 34) = *(_DWORD *)(*(_QWORD *)a2 + v75);
          goto LABEL_292;
        case 0xCu:
          *((_WORD *)this + 84) |= 8u;
          v76 = *((_QWORD *)a2 + 1);
          if (v76 > 0xFFFFFFFFFFFFFFFBLL || v76 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_290;
          *((_DWORD *)this + 35) = *(_DWORD *)(*(_QWORD *)a2 + v76);
          goto LABEL_292;
        case 0xDu:
          *((_WORD *)this + 84) |= 0x40u;
          v77 = *((_QWORD *)a2 + 1);
          v78 = *((_QWORD *)a2 + 2);
          v79 = *(_QWORD *)a2;
          if (v77 <= 0xFFFFFFFFFFFFFFF5 && v77 + 10 <= v78)
          {
            v80 = 0;
            v81 = 0;
            v82 = 0;
            do
            {
              v83 = v77 + 1;
              *((_QWORD *)a2 + 1) = v77 + 1;
              v84 = *(_BYTE *)(v79 + v77);
              v82 |= (unint64_t)(v84 & 0x7F) << v80;
              if ((v84 & 0x80) == 0)
                goto LABEL_256;
              v80 += 7;
              v77 = v83;
              v14 = v81++ > 8;
            }
            while (!v14);
LABEL_200:
            LODWORD(v82) = 0;
            goto LABEL_256;
          }
          v134 = 0;
          v135 = 0;
          v82 = 0;
          if (v78 <= v77)
            v78 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v78 == v77)
            {
              LODWORD(v82) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v136 = v77 + 1;
              v137 = *(_BYTE *)(v79 + v77);
              *((_QWORD *)a2 + 1) = v136;
              v82 |= (unint64_t)(v137 & 0x7F) << v134;
              if (v137 < 0)
              {
                v134 += 7;
                v77 = v136;
                v14 = v135++ > 8;
                if (v14)
                  goto LABEL_200;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v82) = 0;
            }
            break;
          }
LABEL_256:
          *((_DWORD *)this + 38) = v82;
          goto LABEL_294;
        case 0xEu:
          *((_WORD *)this + 84) |= 0x80u;
          v85 = *((_QWORD *)a2 + 1);
          v86 = *((_QWORD *)a2 + 2);
          v87 = *(_QWORD *)a2;
          if (v85 <= 0xFFFFFFFFFFFFFFF5 && v85 + 10 <= v86)
          {
            v88 = 0;
            v89 = 0;
            v90 = 0;
            do
            {
              v91 = v85 + 1;
              *((_QWORD *)a2 + 1) = v85 + 1;
              v92 = *(_BYTE *)(v87 + v85);
              v90 |= (unint64_t)(v92 & 0x7F) << v88;
              if ((v92 & 0x80) == 0)
                goto LABEL_259;
              v88 += 7;
              v85 = v91;
              v14 = v89++ > 8;
            }
            while (!v14);
LABEL_207:
            LODWORD(v90) = 0;
            goto LABEL_259;
          }
          v138 = 0;
          v139 = 0;
          v90 = 0;
          if (v86 <= v85)
            v86 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v86 == v85)
            {
              LODWORD(v90) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v140 = v85 + 1;
              v141 = *(_BYTE *)(v87 + v85);
              *((_QWORD *)a2 + 1) = v140;
              v90 |= (unint64_t)(v141 & 0x7F) << v138;
              if (v141 < 0)
              {
                v138 += 7;
                v85 = v140;
                v14 = v139++ > 8;
                if (v14)
                  goto LABEL_207;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v90) = 0;
            }
            break;
          }
LABEL_259:
          *((_DWORD *)this + 39) = v90;
          goto LABEL_294;
        case 0xFu:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v93 = *((_QWORD *)a2 + 1);
            v94 = *((_QWORD *)a2 + 2);
            while (v93 < v94 && !*((_BYTE *)a2 + 24))
            {
              v96 = (char *)*((_QWORD *)this + 2);
              v95 = *((_QWORD *)this + 3);
              if ((unint64_t)v96 >= v95)
              {
                v98 = (char *)*((_QWORD *)this + 1);
                v99 = (v96 - v98) >> 2;
                v100 = v99 + 1;
                if ((unint64_t)(v99 + 1) >> 62)
                  goto LABEL_303;
                v101 = v95 - (_QWORD)v98;
                if (v101 >> 1 > v100)
                  v100 = v101 >> 1;
                if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFFCLL)
                  v102 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v102 = v100;
                if (v102)
                {
                  v102 = (unint64_t)sub_2429114B8(v102);
                  v98 = (char *)*((_QWORD *)this + 1);
                  v96 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v103 = 0;
                }
                v104 = (_DWORD *)(v102 + 4 * v99);
                *v104 = 0;
                v97 = v104 + 1;
                while (v96 != v98)
                {
                  v105 = *((_DWORD *)v96 - 1);
                  v96 -= 4;
                  *--v104 = v105;
                }
                *((_QWORD *)this + 1) = v104;
                *((_QWORD *)this + 2) = v97;
                *((_QWORD *)this + 3) = v102 + 4 * v103;
                if (v98)
                  operator delete(v98);
              }
              else
              {
                *(_DWORD *)v96 = 0;
                v97 = v96 + 4;
              }
              *((_QWORD *)this + 2) = v97;
              v106 = *((_QWORD *)a2 + 1);
              if (v106 > 0xFFFFFFFFFFFFFFFBLL || v106 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_172;
              *(v97 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v106);
              v94 = *((_QWORD *)a2 + 2);
              v93 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v93;
            }
            goto LABEL_173;
          }
          v143 = (char *)*((_QWORD *)this + 2);
          v142 = *((_QWORD *)this + 3);
          if ((unint64_t)v143 >= v142)
          {
            v158 = (char *)*((_QWORD *)this + 1);
            v159 = (v143 - v158) >> 2;
            v160 = v159 + 1;
            if ((unint64_t)(v159 + 1) >> 62)
              goto LABEL_303;
            v161 = v142 - (_QWORD)v158;
            if (v161 >> 1 > v160)
              v160 = v161 >> 1;
            if ((unint64_t)v161 >= 0x7FFFFFFFFFFFFFFCLL)
              v162 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v162 = v160;
            if (v162)
            {
              v162 = (unint64_t)sub_2429114B8(v162);
              v158 = (char *)*((_QWORD *)this + 1);
              v143 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v163 = 0;
            }
            v174 = (_DWORD *)(v162 + 4 * v159);
            *v174 = 0;
            v123 = v174 + 1;
            while (v143 != v158)
            {
              v175 = *((_DWORD *)v143 - 1);
              v143 -= 4;
              *--v174 = v175;
            }
            *((_QWORD *)this + 1) = v174;
            *((_QWORD *)this + 2) = v123;
            *((_QWORD *)this + 3) = v162 + 4 * v163;
            if (v158)
              operator delete(v158);
          }
          else
          {
            *(_DWORD *)v143 = 0;
            v123 = v143 + 4;
          }
          *((_QWORD *)this + 2) = v123;
          goto LABEL_288;
        case 0x10u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v107 = *((_QWORD *)a2 + 1);
            v108 = *((_QWORD *)a2 + 2);
            while (v107 < v108 && !*((_BYTE *)a2 + 24))
            {
              v110 = (char *)*((_QWORD *)this + 5);
              v109 = *((_QWORD *)this + 6);
              if ((unint64_t)v110 >= v109)
              {
                v112 = (char *)*((_QWORD *)this + 4);
                v113 = (v110 - v112) >> 2;
                v114 = v113 + 1;
                if ((unint64_t)(v113 + 1) >> 62)
                  goto LABEL_303;
                v115 = v109 - (_QWORD)v112;
                if (v115 >> 1 > v114)
                  v114 = v115 >> 1;
                if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFFCLL)
                  v116 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v116 = v114;
                if (v116)
                {
                  v116 = (unint64_t)sub_2429114B8(v116);
                  v112 = (char *)*((_QWORD *)this + 4);
                  v110 = (char *)*((_QWORD *)this + 5);
                }
                else
                {
                  v117 = 0;
                }
                v118 = (_DWORD *)(v116 + 4 * v113);
                *v118 = 0;
                v111 = v118 + 1;
                while (v110 != v112)
                {
                  v119 = *((_DWORD *)v110 - 1);
                  v110 -= 4;
                  *--v118 = v119;
                }
                *((_QWORD *)this + 4) = v118;
                *((_QWORD *)this + 5) = v111;
                *((_QWORD *)this + 6) = v116 + 4 * v117;
                if (v112)
                  operator delete(v112);
              }
              else
              {
                *(_DWORD *)v110 = 0;
                v111 = v110 + 4;
              }
              *((_QWORD *)this + 5) = v111;
              v120 = *((_QWORD *)a2 + 1);
              if (v120 > 0xFFFFFFFFFFFFFFFBLL || v120 + 4 > *((_QWORD *)a2 + 2))
              {
LABEL_172:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v111 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v120);
              v108 = *((_QWORD *)a2 + 2);
              v107 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v107;
            }
LABEL_173:
            PB::Reader::recallMark();
          }
          else
          {
            v145 = (char *)*((_QWORD *)this + 5);
            v144 = *((_QWORD *)this + 6);
            if ((unint64_t)v145 >= v144)
            {
              v164 = (char *)*((_QWORD *)this + 4);
              v165 = (v145 - v164) >> 2;
              v166 = v165 + 1;
              if ((unint64_t)(v165 + 1) >> 62)
LABEL_303:
                sub_242729A44();
              v167 = v144 - (_QWORD)v164;
              if (v167 >> 1 > v166)
                v166 = v167 >> 1;
              if ((unint64_t)v167 >= 0x7FFFFFFFFFFFFFFCLL)
                v168 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v168 = v166;
              if (v168)
              {
                v168 = (unint64_t)sub_2429114B8(v168);
                v164 = (char *)*((_QWORD *)this + 4);
                v145 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v169 = 0;
              }
              v176 = (_DWORD *)(v168 + 4 * v165);
              *v176 = 0;
              v123 = v176 + 1;
              while (v145 != v164)
              {
                v177 = *((_DWORD *)v145 - 1);
                v145 -= 4;
                *--v176 = v177;
              }
              *((_QWORD *)this + 4) = v176;
              *((_QWORD *)this + 5) = v123;
              *((_QWORD *)this + 6) = v168 + 4 * v169;
              if (v164)
                operator delete(v164);
            }
            else
            {
              *(_DWORD *)v145 = 0;
              v123 = v145 + 4;
            }
            *((_QWORD *)this + 5) = v123;
LABEL_288:
            v178 = *((_QWORD *)a2 + 1);
            if (v178 <= 0xFFFFFFFFFFFFFFFBLL && v178 + 4 <= *((_QWORD *)a2 + 2))
            {
              *(v123 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v178);
LABEL_292:
              v51 = *((_QWORD *)a2 + 1) + 4;
LABEL_293:
              *((_QWORD *)a2 + 1) = v51;
            }
            else
            {
LABEL_290:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
          break;
        default:
          goto LABEL_19;
      }
      goto LABEL_294;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_21;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    if ((PB::Reader::skip(a2) & 1) == 0)
      return 0;
LABEL_294:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
}

uint64_t CMMsl::SwingDoTCandidate::SwingDoTCandidate(uint64_t this)
{
  *(_QWORD *)this = &off_2513614C8;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_2513614C8;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t CMMsl::DoTEstimatorHandSwing::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;
  __int16 v10;
  const PB::Base *v11;
  const PB::Base *v12;
  __int16 v13;
  float *v14;
  float *v15;
  float v16;
  float *v17;
  float *v18;
  float v19;

  v3 = this;
  if ((*(_WORD *)(this + 168) & 2) != 0)
    this = PB::Writer::write(a2, *(double *)(this + 128));
  v4 = *(float **)(v3 + 80);
  v5 = *(float **)(v3 + 88);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6);
  }
  v7 = *(float **)(v3 + 56);
  v8 = *(float **)(v3 + 64);
  while (v7 != v8)
  {
    v9 = *v7++;
    this = PB::Writer::write(a2, v9);
  }
  v10 = *(_WORD *)(v3 + 168);
  if ((v10 & 0x20) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 148));
    v10 = *(_WORD *)(v3 + 168);
    if ((v10 & 1) == 0)
    {
LABEL_11:
      if ((v10 & 0x100) == 0)
        goto LABEL_13;
      goto LABEL_12;
    }
  }
  else if ((v10 & 1) == 0)
  {
    goto LABEL_11;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 120));
  if ((*(_WORD *)(v3 + 168) & 0x100) != 0)
LABEL_12:
    this = PB::Writer::writeVarInt(a2);
LABEL_13:
  v11 = *(const PB::Base **)(v3 + 104);
  if (v11)
    this = PB::Writer::writeSubmessage(a2, v11);
  v12 = *(const PB::Base **)(v3 + 112);
  if (v12)
    this = PB::Writer::writeSubmessage(a2, v12);
  v13 = *(_WORD *)(v3 + 168);
  if ((v13 & 0x10) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v13 = *(_WORD *)(v3 + 168);
    if ((v13 & 0x200) == 0)
    {
LABEL_19:
      if ((v13 & 4) == 0)
        goto LABEL_20;
      goto LABEL_36;
    }
  }
  else if ((*(_WORD *)(v3 + 168) & 0x200) == 0)
  {
    goto LABEL_19;
  }
  this = PB::Writer::write(a2);
  v13 = *(_WORD *)(v3 + 168);
  if ((v13 & 4) == 0)
  {
LABEL_20:
    if ((v13 & 8) == 0)
      goto LABEL_21;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 136));
  v13 = *(_WORD *)(v3 + 168);
  if ((v13 & 8) == 0)
  {
LABEL_21:
    if ((v13 & 0x40) == 0)
      goto LABEL_22;
LABEL_38:
    this = PB::Writer::writeVarInt(a2);
    if ((*(_WORD *)(v3 + 168) & 0x80) == 0)
      goto LABEL_24;
    goto LABEL_23;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 140));
  v13 = *(_WORD *)(v3 + 168);
  if ((v13 & 0x40) != 0)
    goto LABEL_38;
LABEL_22:
  if ((v13 & 0x80) != 0)
LABEL_23:
    this = PB::Writer::writeVarInt(a2);
LABEL_24:
  v14 = *(float **)(v3 + 8);
  v15 = *(float **)(v3 + 16);
  while (v14 != v15)
  {
    v16 = *v14++;
    this = PB::Writer::write(a2, v16);
  }
  v18 = *(float **)(v3 + 32);
  v17 = *(float **)(v3 + 40);
  while (v18 != v17)
  {
    v19 = *v18++;
    this = PB::Writer::write(a2, v19);
  }
  return this;
}

BOOL CMMsl::DoTEstimatorHandSwing::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v4;
  __int16 v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  float *v17;
  float *v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  uint64_t v22;
  float v23;
  _BOOL8 result;
  BOOL v25;

  v4 = *(_WORD *)(a1 + 168);
  v5 = *(_WORD *)(a2 + 168);
  if ((v4 & 2) != 0)
  {
    if ((v5 & 2) == 0 || *(double *)(a1 + 128) != *(double *)(a2 + 128))
      return 0;
  }
  else if ((v5 & 2) != 0)
  {
    return 0;
  }
  v7 = *(float **)(a1 + 80);
  v6 = *(float **)(a1 + 88);
  v8 = *(float **)(a2 + 80);
  if ((char *)v6 - (char *)v7 != *(_QWORD *)(a2 + 88) - (_QWORD)v8)
    return 0;
  while (v7 != v6)
  {
    if (*v7 != *v8)
      return 0;
    ++v7;
    ++v8;
  }
  v10 = *(float **)(a1 + 56);
  v9 = *(float **)(a1 + 64);
  v11 = *(float **)(a2 + 56);
  if ((char *)v9 - (char *)v10 != *(_QWORD *)(a2 + 64) - (_QWORD)v11)
    return 0;
  while (v10 != v9)
  {
    if (*v10 != *v11)
      return 0;
    ++v10;
    ++v11;
  }
  if ((v4 & 0x20) != 0)
  {
    if ((v5 & 0x20) == 0 || *(float *)(a1 + 148) != *(float *)(a2 + 148))
      return 0;
  }
  else if ((v5 & 0x20) != 0)
  {
    return 0;
  }
  if ((v4 & 1) != 0)
  {
    if ((v5 & 1) == 0 || *(double *)(a1 + 120) != *(double *)(a2 + 120))
      return 0;
  }
  else if ((v5 & 1) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 168) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 168) & 0x100) == 0 || *(_DWORD *)(a1 + 160) != *(_DWORD *)(a2 + 160))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 168) & 0x100) != 0)
  {
    return 0;
  }
  v12 = *(_QWORD *)(a1 + 104);
  v13 = *(_QWORD *)(a2 + 104);
  if (v12)
  {
    if (!v13 || !CMMsl::SwingDoTCandidate::operator==(v12, v13))
      return 0;
  }
  else if (v13)
  {
    return 0;
  }
  v14 = *(_QWORD *)(a1 + 112);
  v15 = *(_QWORD *)(a2 + 112);
  if (!v14)
  {
    if (!v15)
      goto LABEL_39;
    return 0;
  }
  if (!v15 || !CMMsl::SwingDoTCandidate::operator==(v14, v15))
    return 0;
LABEL_39:
  if ((v4 & 0x10) != 0)
  {
    if ((v5 & 0x10) == 0 || *(_DWORD *)(a1 + 144) != *(_DWORD *)(a2 + 144))
      return 0;
  }
  else if ((v5 & 0x10) != 0)
  {
    return 0;
  }
  if ((v4 & 0x200) != 0)
  {
    if ((v5 & 0x200) == 0 || *(unsigned __int8 *)(a1 + 164) != *(unsigned __int8 *)(a2 + 164))
      return 0;
  }
  else if ((v5 & 0x200) != 0)
  {
    return 0;
  }
  if ((v4 & 4) != 0)
  {
    if ((v5 & 4) == 0 || *(float *)(a1 + 136) != *(float *)(a2 + 136))
      return 0;
  }
  else if ((v5 & 4) != 0)
  {
    return 0;
  }
  if ((v4 & 8) != 0)
  {
    if ((v5 & 8) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140))
      return 0;
  }
  else if ((v5 & 8) != 0)
  {
    return 0;
  }
  if ((v4 & 0x40) != 0)
  {
    if ((v5 & 0x40) == 0 || *(_DWORD *)(a1 + 152) != *(_DWORD *)(a2 + 152))
      return 0;
  }
  else if ((v5 & 0x40) != 0)
  {
    return 0;
  }
  if ((v4 & 0x80) != 0)
  {
    if ((v5 & 0x80) == 0 || *(_DWORD *)(a1 + 156) != *(_DWORD *)(a2 + 156))
      return 0;
  }
  else if ((v5 & 0x80) != 0)
  {
    return 0;
  }
  v17 = *(float **)(a1 + 8);
  v16 = *(float **)(a1 + 16);
  v18 = *(float **)(a2 + 8);
  if ((char *)v16 - (char *)v17 != *(_QWORD *)(a2 + 16) - (_QWORD)v18)
    return 0;
  while (v17 != v16)
  {
    if (*v17 != *v18)
      return 0;
    ++v17;
    ++v18;
  }
  v20 = *(_QWORD *)(a1 + 32);
  v19 = *(_QWORD *)(a1 + 40);
  v21 = *(float **)(a2 + 32);
  if (v19 - v20 != *(_QWORD *)(a2 + 40) - (_QWORD)v21)
    return 0;
  if (v20 == v19)
    return 1;
  v22 = v20 + 4;
  do
  {
    v23 = *v21++;
    result = *(float *)(v22 - 4) == v23;
    v25 = *(float *)(v22 - 4) != v23 || v22 == v19;
    v22 += 4;
  }
  while (!v25);
  return result;
}

