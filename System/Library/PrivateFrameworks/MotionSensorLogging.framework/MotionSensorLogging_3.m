_QWORD *CMMsl::Item::makeKappaTriggerClustersResult(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[218])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135ED68;
    *(_DWORD *)(v2 + 96) = 0;
    this = (_QWORD *)v1[218];
    v1[218] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeSimActivityEvent(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[357])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251360D90;
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 24) = 0;
    this = (_QWORD *)v1[357];
    v1[357] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePdrFeatures(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[278])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135FA50;
    *(_DWORD *)(v2 + 108) = 0;
    this = (_QWORD *)v1[278];
    v1[278] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePdrDOTEstimatorStateBody(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[272])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135F900;
    *(_DWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[272];
    v1[272] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePdrDOTEstimatorStateArmSwing(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[271])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135F8C8;
    *(_DWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[271];
    v1[271] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePdrDOTEstimatorStateHeading(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[275])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135F9A8;
    *(_DWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[275];
    v1[275] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeAccessoryActivityAsleepConfidenceEpoch(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[13])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135BF40;
    *(_DWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[13];
    v1[13] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePdrSpeedEstimatorStateDebug(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[286])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135FBD8;
    *(_DWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[286];
    v1[286] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePrecisionFindingDOTEstimate(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[309])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_2513601F8;
    *(_DWORD *)(v2 + 24) = 0;
    this = (_QWORD *)v1[309];
    v1[309] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePrecisionFindingState(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[312])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_2513602A0;
    *(_DWORD *)(v2 + 92) = 0;
    this = (_QWORD *)v1[312];
    v1[312] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeKappaRoadsResult(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[211])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135EBE0;
    *(_DWORD *)(v2 + 40) = 0;
    this = (_QWORD *)v1[211];
    v1[211] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePrecisionFindingVelocityEstimate(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[313])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_2513602D8;
    *(_DWORD *)(v2 + 44) = 0;
    this = (_QWORD *)v1[313];
    v1[313] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePrecisionFindingRangeFilter(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[310])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251360230;
    *(_DWORD *)(v2 + 40) = 0;
    this = (_QWORD *)v1[310];
    v1[310] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePdrDOTMeasurementSelectorState(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[277])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135FA18;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = 0;
    *(_DWORD *)(v2 + 52) = 0;
    this = (_QWORD *)v1[277];
    v1[277] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeBumpToWakeState(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[72])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135CB80;
    *(_DWORD *)(v2 + 20) = 0;
    this = (_QWORD *)v1[72];
    v1[72] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePdrDOTEstimatorUncertaintyModelOnBody(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[276])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135F9E0;
    *(_DWORD *)(v2 + 40) = 0;
    this = (_QWORD *)v1[276];
    v1[276] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePeerState(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[293])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135FE78;
    *(_DWORD *)(v2 + 20) = 0;
    this = (_QWORD *)v1[293];
    v1[293] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeMagnetometerCalibratorFilterParameters(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[241])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135F238;
    *(_DWORD *)(v2 + 112) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    this = (_QWORD *)v1[241];
    v1[241] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeKappaActivityPhone(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[188])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135E6D8;
    *(_DWORD *)(v2 + 140) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    this = (_QWORD *)v1[188];
    v1[188] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeKappaActivityWatch(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[189])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135E710;
    *(_DWORD *)(v2 + 104) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    this = (_QWORD *)v1[189];
    v1[189] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePrecisionFindingSessionStartStop(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[311])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251360268;
    *(_DWORD *)(v2 + 20) = 0;
    this = (_QWORD *)v1[311];
    v1[311] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePdrDOTEstimatorStateDebug(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[274])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135F970;
    *(_DWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[274];
    v1[274] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePdrDOTEstimatorStateBodyDebug(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[273])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135F938;
    *(_DWORD *)(v2 + 72) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    this = (_QWORD *)v1[273];
    v1[273] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeKappaPeakDetectorMapResult(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[202])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135E9E8;
    *(_DWORD *)(v2 + 152) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    this = (_QWORD *)v1[202];
    v1[202] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeKappaPeakDetectorMapMagTimestamps(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[201])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135E9B0;
    *(_DWORD *)(v2 + 44) = 0;
    this = (_QWORD *)v1[201];
    v1[201] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePrecisionFindingVerticalState(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[314])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251360310;
    *(_DWORD *)(v2 + 60) = 0;
    this = (_QWORD *)v1[314];
    v1[314] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeAltimeter(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[39])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135C480;
    *(_DWORD *)(v2 + 40) = 0;
    this = (_QWORD *)v1[39];
    v1[39] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeFaceDownDetection(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[113])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135D590;
    *(_DWORD *)(v2 + 88) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    this = (_QWORD *)v1[113];
    v1[113] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePencilFusionDMYawAlignmentUpdate(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[295])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135FEE8;
    *(_DWORD *)(v2 + 64) = 0;
    this = (_QWORD *)v1[295];
    v1[295] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePencilFusionRingSensorTrustModelUpdate(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[298])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135FF90;
    *(_DWORD *)(v2 + 24) = 0;
    *(_DWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[298];
    v1[298] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeAccessorySleepStateUpdate(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[32])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135C368;
    *(_DWORD *)(v2 + 28) = 0;
    this = (_QWORD *)v1[32];
    v1[32] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeAccessorySleepStateConfidenceEpoch(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[31])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135C330;
    *(_DWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[31];
    v1[31] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeSafetyHertzSample(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[352])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251360C08;
    *(_DWORD *)(v2 + 24) = 0;
    this = (_QWORD *)v1[352];
    v1[352] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeSafetyCompanionStatus(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[351])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251360BD0;
    *(_DWORD *)(v2 + 20) = 0;
    this = (_QWORD *)v1[351];
    v1[351] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePtsConsumedGNSS(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[328])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    v2[1] = 0;
    v2[2] = 0;
    *v2 = &off_25135FC48;
    this = (_QWORD *)v1[328];
    v1[328] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePtsForwardPropagation(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[329])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135FC80;
    *(_QWORD *)(v2 + 48) = 0;
    *(_DWORD *)(v2 + 64) = 0;
    this = (_QWORD *)v1[329];
    v1[329] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePtsReconstructedRoute(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[331])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_25135FCF0;
    v2[1] = 0;
    this = (_QWORD *)v1[331];
    v1[331] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeHeadToHeadsetAttitudeEstimatorMeasurementUpdate(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[161])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135E0B8;
    *(_QWORD *)(v2 + 168) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    this = (_QWORD *)v1[161];
    v1[161] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePtsMapMatchedRoute(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[330])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_25135FCB8;
    v2[1] = 0;
    this = (_QWORD *)v1[330];
    v1[330] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeAnchorMotionCorrespondence(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[42])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135C528;
    *(_DWORD *)(v2 + 44) = 0;
    this = (_QWORD *)v1[42];
    v1[42] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeKData1(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[185])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135E5F8;
    *(_DWORD *)(v2 + 20) = 0;
    this = (_QWORD *)v1[185];
    v1[185] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeKData2(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[186])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135E630;
    *(_DWORD *)(v2 + 100) = 0;
    this = (_QWORD *)v1[186];
    v1[186] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeKData3(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[187])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135E668;
    *(_DWORD *)(v2 + 28) = 0;
    this = (_QWORD *)v1[187];
    v1[187] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeSafetyRemoteSample(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[353])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251360C40;
    *(_DWORD *)(v2 + 52) = 0;
    this = (_QWORD *)v1[353];
    v1[353] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeSafetyTrustedAudioResult(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[354])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_251360C78;
    *(_QWORD *)((char *)v2 + 188) = 0;
    this = (_QWORD *)v1[354];
    v1[354] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeSpuPlaybackExampleDeviceMotion(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[368])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_251360B60;
    v2[1] = 0;
    this = (_QWORD *)v1[368];
    v1[368] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeSpuPlaybackExampleMotionStateUpdate(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[369])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_251360B98;
    v2[1] = 0;
    this = (_QWORD *)v1[369];
    v1[369] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeInterpolatedAccessoryAccel(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[179])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_25135E4A8;
    v2[1] = 0;
    this = (_QWORD *)v1[179];
    v1[179] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void CMMsl::JitterBufferLevel::~JitterBufferLevel(CMMsl::JitterBufferLevel *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::JitterBufferLevel::JitterBufferLevel(uint64_t this, const CMMsl::JitterBufferLevel *a2)
{
  char v2;
  char v3;
  int v4;
  int v5;
  int v6;

  *(_QWORD *)this = &off_25135E550;
  *(_DWORD *)(this + 20) = 0;
  v2 = *((_BYTE *)a2 + 20);
  if ((v2 & 4) != 0)
  {
    v4 = *((_DWORD *)a2 + 4);
    v3 = 4;
    *(_BYTE *)(this + 20) = 4;
    *(_DWORD *)(this + 16) = v4;
    v2 = *((_BYTE *)a2 + 20);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 2);
    v3 |= 1u;
    *(_BYTE *)(this + 20) = v3;
    *(_DWORD *)(this + 8) = v5;
    v2 = *((_BYTE *)a2 + 20);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *((_DWORD *)a2 + 3);
    *(_BYTE *)(this + 20) = v3 | 2;
    *(_DWORD *)(this + 12) = v6;
  }
  return this;
}

uint64_t CMMsl::JitterBufferLevel::operator=(uint64_t a1, uint64_t a2, float a3)
{
  int v3;
  int v4;
  char v6;
  char v7;
  int v8;
  int v9;
  uint64_t v10;
  _QWORD v12[2];
  int v13;
  int v14;

  if (a1 != a2)
  {
    v12[0] = &off_25135E550;
    v14 = 0;
    v6 = *(_BYTE *)(a2 + 20);
    if ((v6 & 4) != 0)
    {
      a3 = *(float *)(a2 + 16);
      v7 = 4;
      LOBYTE(v14) = 4;
      if ((v6 & 1) != 0)
      {
LABEL_4:
        v3 = *(_DWORD *)(a2 + 8);
        v7 |= 1u;
        LOBYTE(v14) = v7;
        if ((v6 & 2) != 0)
          goto LABEL_8;
        goto LABEL_9;
      }
    }
    else
    {
      v7 = 0;
      if ((*(_BYTE *)(a2 + 20) & 1) != 0)
        goto LABEL_4;
    }
    if ((v6 & 2) != 0)
    {
LABEL_8:
      v4 = *(_DWORD *)(a2 + 12);
      LOBYTE(v14) = v7 | 2;
    }
LABEL_9:
    v8 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v14;
    v14 = v8;
    v9 = *(_DWORD *)(a1 + 16);
    *(float *)(a1 + 16) = a3;
    v13 = v9;
    v10 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = v3;
    *(_DWORD *)(a1 + 12) = v4;
    v12[1] = v10;
    PB::Base::~Base((PB::Base *)v12);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::JitterBufferLevel *a2, CMMsl::JitterBufferLevel *a3)
{
  int v3;
  float result;
  int v5;
  int v6;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  v5 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v5;
  v6 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v6;
  return result;
}

float CMMsl::JitterBufferLevel::JitterBufferLevel(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135E550;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_25135E550;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  return result;
}

uint64_t CMMsl::JitterBufferLevel::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  int v10;
  int v11;

  if (a1 != a2)
  {
    v9[0] = &off_25135E550;
    v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_DWORD *)(a2 + 16);
    v11 = *(_DWORD *)(a1 + 20);
    v5 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v4;
    v10 = v5;
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 20) = v3;
    *(_QWORD *)(a1 + 8) = v7;
    v9[1] = v6;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::JitterBufferLevel::formatText(CMMsl::JitterBufferLevel *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 1) == 0)
  {
    if ((*((_BYTE *)this + 20) & 2) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(a2, "threshold");
    if ((*((_BYTE *)this + 20) & 4) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_4;
  }
  PB::TextFormatter::format(a2, "level");
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 4) != 0)
LABEL_4:
    PB::TextFormatter::format(a2, "timestamp", *((float *)this + 4));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::JitterBufferLevel::readFrom(CMMsl::JitterBufferLevel *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t result;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  char v33;
  char v34;
  unsigned int v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  unint64_t v40;
  char v41;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v19 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((_BYTE *)this + 20) |= 2u;
        v22 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v23 = *(_QWORD *)a2;
        if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v2)
        {
          v34 = 0;
          v35 = 0;
          v26 = 0;
          if (v2 <= v22)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v22)
            {
              LODWORD(v26) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_67;
            }
            v36 = v22++;
            v37 = *(_BYTE *)(v23 + v36);
            *((_QWORD *)a2 + 1) = v22;
            v26 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0)
              break;
            v34 += 7;
            v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v26) = 0;
              goto LABEL_66;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v26) = 0;
LABEL_66:
          v2 = v36 + 1;
        }
        else
        {
          v24 = 0;
          v25 = 0;
          v26 = 0;
          while (1)
          {
            v2 = v22 + 1;
            *((_QWORD *)a2 + 1) = v22 + 1;
            v27 = *(_BYTE *)(v23 + v22);
            v26 |= (unint64_t)(v27 & 0x7F) << v24;
            if ((v27 & 0x80) == 0)
              break;
            v24 += 7;
            v22 = v2;
            v14 = v25++ > 8;
            if (v14)
            {
              LODWORD(v26) = 0;
              break;
            }
          }
        }
LABEL_67:
        *((_DWORD *)this + 3) = v26;
      }
      else if ((_DWORD)v19 == 2)
      {
        *((_BYTE *)this + 20) |= 1u;
        v28 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v29 = *(_QWORD *)a2;
        if (v28 > 0xFFFFFFFFFFFFFFF5 || v28 + 10 > v2)
        {
          v38 = 0;
          v39 = 0;
          v32 = 0;
          if (v2 <= v28)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v28)
            {
              LODWORD(v32) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_72;
            }
            v40 = v28++;
            v41 = *(_BYTE *)(v29 + v40);
            *((_QWORD *)a2 + 1) = v28;
            v32 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0)
              break;
            v38 += 7;
            v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v32) = 0;
              goto LABEL_71;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v32) = 0;
LABEL_71:
          v2 = v40 + 1;
        }
        else
        {
          v30 = 0;
          v31 = 0;
          v32 = 0;
          while (1)
          {
            v2 = v28 + 1;
            *((_QWORD *)a2 + 1) = v28 + 1;
            v33 = *(_BYTE *)(v29 + v28);
            v32 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0)
              break;
            v30 += 7;
            v28 = v2;
            v14 = v31++ > 8;
            if (v14)
            {
              LODWORD(v32) = 0;
              break;
            }
          }
        }
LABEL_72:
        *((_DWORD *)this + 2) = v32;
      }
      else if ((_DWORD)v19 == 1)
      {
        *((_BYTE *)this + 20) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_27;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::JitterBufferLevel::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 16));
    v4 = *(_BYTE *)(v3 + 20);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        return this;
      return PB::Writer::writeVarInt(a2);
    }
  }
  else if ((*(_BYTE *)(this + 20) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  if ((*(_BYTE *)(v3 + 20) & 2) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::JitterBufferLevel::hash_value(CMMsl::JitterBufferLevel *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  float v4;

  if ((*((_BYTE *)this + 20) & 4) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 20) & 1) != 0)
      goto LABEL_3;
LABEL_8:
    v2 = 0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_4;
LABEL_9:
    v3 = 0;
    return v2 ^ v1 ^ v3;
  }
  v4 = *((float *)this + 4);
  v1 = LODWORD(v4);
  if (v4 == 0.0)
    v1 = 0;
  if ((*((_BYTE *)this + 20) & 1) == 0)
    goto LABEL_8;
LABEL_3:
  v2 = *((unsigned int *)this + 2);
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_9;
LABEL_4:
  v3 = *((unsigned int *)this + 3);
  return v2 ^ v1 ^ v3;
}

void CMMsl::JointLinkModelPose::~JointLinkModelPose(CMMsl::JointLinkModelPose *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135E588;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135E588;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135E588;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::JointLinkModelPose *CMMsl::JointLinkModelPose::JointLinkModelPose(CMMsl::JointLinkModelPose *this, char ***a2)
{
  char **v4;
  CMMsl::BioMotionPose *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_25135E588;
  *((_QWORD *)this + 1) = 0;
  if (a2[1])
  {
    v4 = (char **)operator new();
    v5 = CMMsl::BioMotionPose::BioMotionPose(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return this;
}

uint64_t CMMsl::JointLinkModelPose::operator=(uint64_t a1, char ***a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::JointLinkModelPose *__hidden);
  uint64_t v6;

  if ((char ***)a1 != a2)
  {
    CMMsl::JointLinkModelPose::JointLinkModelPose((CMMsl::JointLinkModelPose *)&v5, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v6;
    v5 = &off_25135E588;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::JointLinkModelPose *a2, CMMsl::JointLinkModelPose *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::JointLinkModelPose::JointLinkModelPose(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_25135E588;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_25135E588;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::JointLinkModelPose::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = &off_25135E588;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::JointLinkModelPose::formatText(CMMsl::JointLinkModelPose *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::JointLinkModelPose::readFrom(CMMsl::JointLinkModelPose *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v19 = operator new();
        *(_QWORD *)v19 = &off_25135C950;
        *(_DWORD *)(v19 + 144) = 0;
        *(_OWORD *)(v19 + 8) = 0u;
        *(_OWORD *)(v19 + 24) = 0u;
        *(_OWORD *)(v19 + 40) = 0u;
        *(_OWORD *)(v19 + 56) = 0u;
        *(_OWORD *)(v19 + 72) = 0u;
        *(_OWORD *)(v19 + 88) = 0u;
        *(_OWORD *)(v19 + 104) = 0u;
        *(_QWORD *)(v19 + 120) = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = *((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_27;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::JointLinkModelPose::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2);
  return this;
}

CMMsl::BioMotionPose *CMMsl::JointLinkModelPose::hash_value(CMMsl::JointLinkModelPose *this)
{
  CMMsl::BioMotionPose *result;

  result = (CMMsl::BioMotionPose *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::BioMotionPose *)CMMsl::BioMotionPose::hash_value(result);
  return result;
}

_QWORD *CMMsl::JointLinkModelPose::makeSuper(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135C950;
    *(_DWORD *)(v2 + 144) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_QWORD *)(v2 + 120) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void CMMsl::JointLinkModelPredictedPose::~JointLinkModelPredictedPose(CMMsl::JointLinkModelPredictedPose *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135E5C0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135E5C0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135E5C0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::JointLinkModelPredictedPose *CMMsl::JointLinkModelPredictedPose::JointLinkModelPredictedPose(CMMsl::JointLinkModelPredictedPose *this, const CMMsl::PoseState ***a2)
{
  CMMsl::BioMotionPredictedPose *v4;
  CMMsl::BioMotionPredictedPose *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_25135E5C0;
  *((_QWORD *)this + 1) = 0;
  if (a2[1])
  {
    v4 = (CMMsl::BioMotionPredictedPose *)operator new();
    v5 = CMMsl::BioMotionPredictedPose::BioMotionPredictedPose(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return this;
}

uint64_t CMMsl::JointLinkModelPredictedPose::operator=(uint64_t a1, const CMMsl::PoseState ***a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::JointLinkModelPredictedPose *__hidden);
  uint64_t v6;

  if ((const CMMsl::PoseState ***)a1 != a2)
  {
    CMMsl::JointLinkModelPredictedPose::JointLinkModelPredictedPose((CMMsl::JointLinkModelPredictedPose *)&v5, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v6;
    v5 = &off_25135E5C0;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::JointLinkModelPredictedPose *a2, CMMsl::JointLinkModelPredictedPose *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::JointLinkModelPredictedPose::JointLinkModelPredictedPose(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_25135E5C0;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_25135E5C0;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::JointLinkModelPredictedPose::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = &off_25135E5C0;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::JointLinkModelPredictedPose::formatText(CMMsl::JointLinkModelPredictedPose *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::JointLinkModelPredictedPose::readFrom(CMMsl::JointLinkModelPredictedPose *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v19 = operator new();
        *(_QWORD *)v19 = &off_25135C988;
        *(_QWORD *)(v19 + 8) = 0;
        *(_DWORD *)(v19 + 28) = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = *((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_27;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::JointLinkModelPredictedPose::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2);
  return this;
}

CMMsl::BioMotionPredictedPose *CMMsl::JointLinkModelPredictedPose::hash_value(CMMsl::JointLinkModelPredictedPose *this)
{
  CMMsl::BioMotionPredictedPose *result;

  result = (CMMsl::BioMotionPredictedPose *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::BioMotionPredictedPose *)CMMsl::BioMotionPredictedPose::hash_value(result);
  return result;
}

_QWORD *CMMsl::JointLinkModelPredictedPose::makeSuper(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135C988;
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 28) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void CMMsl::KData1::~KData1(CMMsl::KData1 *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::KData1::KData1(uint64_t this, const CMMsl::KData1 *a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)this = &off_25135E5F8;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::KData1::operator=(uint64_t a1, uint64_t a2)
{
  int v2;
  void (**v4)(CMMsl::KData1 *__hidden);
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  uint64_t v12;

  if (a1 != a2)
  {
    v4 = &off_25135E5F8;
    v11[0] = &off_25135E5F8;
    HIDWORD(v12) = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      v4 = *(void (***)(CMMsl::KData1 *__hidden))(a2 + 8);
      BYTE4(v12) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        v2 = *(_DWORD *)(a2 + 16);
        BYTE4(v12) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = HIDWORD(v12);
    v8 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v11[1] = v8;
    v9 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v2;
    *(_DWORD *)(a1 + 20) = v7;
    v12 = v9;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v8[0] = &off_25135E5F8;
    v8[1] = v5;
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v4;
    v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::KData1 *a2, CMMsl::KData1 *a3)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  return this;
}

uint64_t CMMsl::KData1::formatText(CMMsl::KData1 *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "state");
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KData1::readFrom(CMMsl::KData1 *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  char v24;
  uint64_t result;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  unint64_t v38;
  char v39;

  v3 = *((_QWORD *)a2 + 1);
  v2 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v3 + 1;
        *((_QWORD *)a2 + 1) = v3 + 1;
        v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v3 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_30;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v36 = 0;
          v37 = 0;
          v30 = 0;
          if (v2 <= v26)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_64;
            }
            v38 = v26++;
            v39 = *(_BYTE *)(v27 + v38);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v39 & 0x7F) << v36;
            if ((v39 & 0x80) == 0)
              break;
            v36 += 7;
            v14 = v37++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              goto LABEL_63;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v30) = 0;
LABEL_63:
          v3 = v38 + 1;
        }
        else
        {
          v28 = 0;
          v29 = 0;
          v30 = 0;
          while (1)
          {
            v3 = v26 + 1;
            *((_QWORD *)a2 + 1) = v26 + 1;
            v31 = *(_BYTE *)(v27 + v26);
            v30 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v26 = v3;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              break;
            }
          }
        }
LABEL_64:
        *((_DWORD *)this + 4) = v30;
      }
      else if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v19 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v20 = *(_QWORD *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v2)
        {
          v32 = 0;
          v33 = 0;
          v23 = 0;
          if (v2 <= v19)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v19)
            {
              v23 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_60;
            }
            v34 = v19++;
            v35 = *(_BYTE *)(v20 + v34);
            *((_QWORD *)a2 + 1) = v19;
            v23 |= (unint64_t)(v35 & 0x7F) << v32;
            if ((v35 & 0x80) == 0)
              break;
            v32 += 7;
            v14 = v33++ > 8;
            if (v14)
            {
              v23 = 0;
              goto LABEL_59;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v23 = 0;
LABEL_59:
          v3 = v34 + 1;
        }
        else
        {
          v21 = 0;
          v22 = 0;
          v23 = 0;
          while (1)
          {
            v3 = v19 + 1;
            *((_QWORD *)a2 + 1) = v19 + 1;
            v24 = *(_BYTE *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0)
              break;
            v21 += 7;
            v19 = v3;
            v14 = v22++ > 8;
            if (v14)
            {
              v23 = 0;
              break;
            }
          }
        }
LABEL_60:
        *((_QWORD *)this + 1) = v23;
      }
      else
      {
LABEL_30:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v3 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v2 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v3 > v2)
      v2 = v3;
    while (v2 != v3)
    {
      v17 = v3 + 1;
      v18 = *(_BYTE *)(v8 + v3);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v3 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_30;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::KData1::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::KData1::hash_value(CMMsl::KData1 *this)
{
  uint64_t v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((_QWORD *)this + 1);
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_5:
    v2 = 0;
    return v2 ^ v1;
  }
  v1 = 0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_5;
LABEL_3:
  v2 = *((unsigned int *)this + 4);
  return v2 ^ v1;
}

void CMMsl::KData2::~KData2(CMMsl::KData2 *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::KData2::KData2(uint64_t this, const CMMsl::KData2 *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  char v23;

  *(_QWORD *)this = &off_25135E630;
  *(_DWORD *)(this + 100) = 0;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 4) != 0)
  {
    v4 = *((_QWORD *)a2 + 3);
    v3 = 4;
    *(_DWORD *)(this + 100) = 4;
    *(_QWORD *)(this + 24) = v4;
    v2 = *((_DWORD *)a2 + 25);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 8) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 8);
    v3 |= 8u;
    *(_DWORD *)(this + 100) = v3;
    *(_DWORD *)(this + 32) = v5;
    v2 = *((_DWORD *)a2 + 25);
  }
LABEL_6:
  if ((v2 & 0x400) != 0)
  {
    v6 = *((_DWORD *)a2 + 15);
    v3 |= 0x400u;
    *(_DWORD *)(this + 100) = v3;
    *(_DWORD *)(this + 60) = v6;
    v2 = *((_DWORD *)a2 + 25);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_27;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_DWORD *)(this + 100) = v3;
  *(_QWORD *)(this + 16) = v7;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0)
      goto LABEL_10;
    goto LABEL_28;
  }
LABEL_27:
  v8 = *((_DWORD *)a2 + 10);
  v3 |= 0x20u;
  *(_DWORD *)(this + 100) = v3;
  *(_DWORD *)(this + 40) = v8;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 1) == 0)
  {
LABEL_10:
    if ((v2 & 0x1000) == 0)
      goto LABEL_11;
    goto LABEL_29;
  }
LABEL_28:
  v9 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_DWORD *)(this + 100) = v3;
  *(_QWORD *)(this + 8) = v9;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x1000) == 0)
  {
LABEL_11:
    if ((v2 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_30;
  }
LABEL_29:
  v10 = *((_DWORD *)a2 + 17);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 100) = v3;
  *(_DWORD *)(this + 68) = v10;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x800) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0)
      goto LABEL_13;
    goto LABEL_31;
  }
LABEL_30:
  v11 = *((_DWORD *)a2 + 16);
  v3 |= 0x800u;
  *(_DWORD *)(this + 100) = v3;
  *(_DWORD *)(this + 64) = v11;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 0x40) == 0)
      goto LABEL_14;
    goto LABEL_32;
  }
LABEL_31:
  v12 = *((_DWORD *)a2 + 12);
  v3 |= 0x80u;
  *(_DWORD *)(this + 100) = v3;
  *(_DWORD *)(this + 48) = v12;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x40) == 0)
  {
LABEL_14:
    if ((v2 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_33;
  }
LABEL_32:
  v13 = *((_DWORD *)a2 + 11);
  v3 |= 0x40u;
  *(_DWORD *)(this + 100) = v3;
  *(_DWORD *)(this + 44) = v13;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x2000) == 0)
  {
LABEL_15:
    if ((v2 & 0x100) == 0)
      goto LABEL_16;
    goto LABEL_34;
  }
LABEL_33:
  v14 = *((_DWORD *)a2 + 18);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 100) = v3;
  *(_DWORD *)(this + 72) = v14;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x100) == 0)
  {
LABEL_16:
    if ((v2 & 0x40000) == 0)
      goto LABEL_17;
    goto LABEL_35;
  }
LABEL_34:
  v15 = *((_DWORD *)a2 + 13);
  v3 |= 0x100u;
  *(_DWORD *)(this + 100) = v3;
  *(_DWORD *)(this + 52) = v15;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x40000) == 0)
  {
LABEL_17:
    if ((v2 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_36;
  }
LABEL_35:
  v16 = *((_DWORD *)a2 + 23);
  v3 |= 0x40000u;
  *(_DWORD *)(this + 100) = v3;
  *(_DWORD *)(this + 92) = v16;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x20000) == 0)
  {
LABEL_18:
    if ((v2 & 0x200) == 0)
      goto LABEL_19;
    goto LABEL_37;
  }
LABEL_36:
  v17 = *((_DWORD *)a2 + 22);
  v3 |= 0x20000u;
  *(_DWORD *)(this + 100) = v3;
  *(_DWORD *)(this + 88) = v17;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x200) == 0)
  {
LABEL_19:
    if ((v2 & 0x10) == 0)
      goto LABEL_20;
    goto LABEL_38;
  }
LABEL_37:
  v18 = *((_DWORD *)a2 + 14);
  v3 |= 0x200u;
  *(_DWORD *)(this + 100) = v3;
  *(_DWORD *)(this + 56) = v18;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x10) == 0)
  {
LABEL_20:
    if ((v2 & 0x10000) == 0)
      goto LABEL_21;
    goto LABEL_39;
  }
LABEL_38:
  v19 = *((_DWORD *)a2 + 9);
  v3 |= 0x10u;
  *(_DWORD *)(this + 100) = v3;
  *(_DWORD *)(this + 36) = v19;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x10000) == 0)
  {
LABEL_21:
    if ((v2 & 0x8000) == 0)
      goto LABEL_22;
    goto LABEL_40;
  }
LABEL_39:
  v20 = *((_DWORD *)a2 + 21);
  v3 |= 0x10000u;
  *(_DWORD *)(this + 100) = v3;
  *(_DWORD *)(this + 84) = v20;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x8000) == 0)
  {
LABEL_22:
    if ((v2 & 0x4000) == 0)
      goto LABEL_23;
    goto LABEL_41;
  }
LABEL_40:
  v21 = *((_DWORD *)a2 + 20);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 100) = v3;
  *(_DWORD *)(this + 80) = v21;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x4000) == 0)
  {
LABEL_23:
    if ((v2 & 0x80000) == 0)
      return this;
LABEL_42:
    v23 = *((_BYTE *)a2 + 96);
    *(_DWORD *)(this + 100) = v3 | 0x80000;
    *(_BYTE *)(this + 96) = v23;
    return this;
  }
LABEL_41:
  v22 = *((_DWORD *)a2 + 19);
  v3 |= 0x4000u;
  *(_DWORD *)(this + 100) = v3;
  *(_DWORD *)(this + 76) = v22;
  if ((*((_DWORD *)a2 + 25) & 0x80000) != 0)
    goto LABEL_42;
  return this;
}

CMMsl *CMMsl::KData2::operator=(CMMsl *a1, const CMMsl::KData2 *a2)
{
  CMMsl::KData2 *v3;
  _BYTE v5[104];

  if (a1 != a2)
  {
    CMMsl::KData2::KData2((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KData2 *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KData2 *a2, CMMsl::KData2 *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  float result;

  v3 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v3;
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  v5 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v7;
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v8;
  LODWORD(v8) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v8;
  LODWORD(v8) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v8;
  LODWORD(v8) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v8;
  LODWORD(v8) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v8;
  v9 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v9;
  v10 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v10;
  v11 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v11;
  v12 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v12;
  v13 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v13;
  v14 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v14;
  v15 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v15;
  v16 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v16;
  result = *((float *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((float *)a2 + 19) = result;
  LOBYTE(v8) = *((_BYTE *)this + 96);
  *((_BYTE *)this + 96) = *((_BYTE *)a2 + 96);
  *((_BYTE *)a2 + 96) = v8;
  return result;
}

float CMMsl::KData2::KData2(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135E630;
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a2 + 100) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  result = *(float *)(a2 + 76);
  *(float *)(a1 + 76) = result;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  return result;
}

CMMsl *CMMsl::KData2::operator=(CMMsl *this, uint64_t a2, CMMsl::KData2 *a3)
{
  void (**v5)(CMMsl::KData2 *__hidden);
  __int128 v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  char v16;
  int v17;

  if (this != (CMMsl *)a2)
  {
    v5 = &off_25135E630;
    v17 = *(_DWORD *)(a2 + 100);
    *(_DWORD *)(a2 + 100) = 0;
    v7 = *(_QWORD *)(a2 + 24);
    v8 = *(_DWORD *)(a2 + 32);
    v12 = *(_DWORD *)(a2 + 60);
    v6 = *(_OWORD *)(a2 + 8);
    v13 = *(_QWORD *)(a2 + 64);
    v10 = *(_QWORD *)(a2 + 44);
    v15 = *(_QWORD *)(a2 + 88);
    v11 = *(_QWORD *)(a2 + 52);
    v9 = *(_QWORD *)(a2 + 36);
    v14 = *(_OWORD *)(a2 + 72);
    v16 = *(_BYTE *)(a2 + 96);
    CMMsl::swap(this, (CMMsl::KData2 *)&v5, a3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return this;
}

uint64_t CMMsl::KData2::formatText(CMMsl::KData2 *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "dataBufferSize");
    v5 = *((_DWORD *)this + 25);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x80000) == 0)
        goto LABEL_4;
      goto LABEL_25;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "gestureLengthSeconds", *((float *)this + 9));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x80000) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "isWristLooselyLevel");
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "negPeakHeight", *((float *)this + 10));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "negPeakLeftHalfWidth");
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0)
      goto LABEL_8;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "negPeakRightHalfWidth");
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "negPeakTimestampUs");
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "negPeakTotalAngleDegrees", *((float *)this + 13));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "pauseBtwPeaksSeconds", *((float *)this + 14));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "posPeakHeight", *((float *)this + 15));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "posPeakLeftHalfWidth");
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 2) == 0)
      goto LABEL_14;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "posPeakRightHalfWidth");
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 2) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "posPeakTimestampUs");
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "posPeakTotalAngleDegrees", *((float *)this + 18));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "rotZRangeDuringGestureRad", *((float *)this + 19));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "screenTiltAtEndDegrees", *((float *)this + 20));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 4) == 0)
      goto LABEL_19;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "screenTiltAtStartDegrees", *((float *)this + 21));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 4) == 0)
  {
LABEL_19:
    if ((v5 & 0x20000) == 0)
      goto LABEL_20;
LABEL_41:
    PB::TextFormatter::format(a2, "wristAngleDiffBtwPeaksDegrees", *((float *)this + 22));
    if ((*((_DWORD *)this + 25) & 0x40000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_21;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "timestampUs");
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x20000) != 0)
    goto LABEL_41;
LABEL_20:
  if ((v5 & 0x40000) != 0)
LABEL_21:
    PB::TextFormatter::format(a2, "wristAngleToHorizontalDegrees", *((float *)this + 23));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KData2::readFrom(CMMsl::KData2 *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  uint64_t v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  char v55;
  unint64_t v56;
  uint64_t v57;
  char v58;
  unsigned int v59;
  uint64_t v60;
  char v61;
  unint64_t v62;
  uint64_t v63;
  char v64;
  unsigned int v65;
  uint64_t v66;
  char v67;
  int v68;
  BOOL v69;
  char v70;
  unsigned int v71;
  unint64_t v72;
  char v73;
  char v74;
  unsigned int v75;
  unint64_t v76;
  char v77;
  char v78;
  unsigned int v79;
  unint64_t v80;
  char v81;
  char v82;
  unsigned int v83;
  unint64_t v84;
  char v85;
  char v86;
  unsigned int v87;
  unint64_t v88;
  char v89;
  char v90;
  unsigned int v91;
  unint64_t v92;
  char v93;
  char v94;
  unsigned int v95;
  unint64_t v96;
  char v97;
  char v98;
  unsigned int v99;
  unint64_t v100;
  char v101;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_214;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 25) |= 4u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v70 = 0;
          v71 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              v24 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_178;
            }
            v72 = v20++;
            v73 = *(_BYTE *)(v21 + v72);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v73 & 0x7F) << v70;
            if ((v73 & 0x80) == 0)
              break;
            v70 += 7;
            v14 = v71++ > 8;
            if (v14)
            {
              v24 = 0;
LABEL_177:
              v2 = v72 + 1;
              goto LABEL_178;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v24 = 0;
          goto LABEL_177;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_178;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        v24 = 0;
LABEL_178:
        *((_QWORD *)this + 3) = v24;
        break;
      case 2u:
        *((_DWORD *)this + 25) |= 8u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v74 = 0;
          v75 = 0;
          v30 = 0;
          if (v2 <= v26)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_183;
            }
            v76 = v26++;
            v77 = *(_BYTE *)(v27 + v76);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v77 & 0x7F) << v74;
            if ((v77 & 0x80) == 0)
              break;
            v74 += 7;
            v14 = v75++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_182:
              v2 = v76 + 1;
              goto LABEL_183;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v30) = 0;
          goto LABEL_182;
        }
        v28 = 0;
        v29 = 0;
        v30 = 0;
        do
        {
          v2 = v26 + 1;
          *((_QWORD *)a2 + 1) = v26 + 1;
          v31 = *(_BYTE *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0)
            goto LABEL_183;
          v28 += 7;
          v26 = v2;
          v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_183:
        *((_DWORD *)this + 8) = v30;
        break;
      case 3u:
        *((_DWORD *)this + 25) |= 0x400u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_111;
        *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_173;
      case 4u:
        *((_DWORD *)this + 25) |= 2u;
        v32 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v33 = *(_QWORD *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
        {
          v78 = 0;
          v79 = 0;
          v36 = 0;
          if (v2 <= v32)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v32)
            {
              v36 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_188;
            }
            v80 = v32++;
            v81 = *(_BYTE *)(v33 + v80);
            *((_QWORD *)a2 + 1) = v32;
            v36 |= (unint64_t)(v81 & 0x7F) << v78;
            if ((v81 & 0x80) == 0)
              break;
            v78 += 7;
            v14 = v79++ > 8;
            if (v14)
            {
              v36 = 0;
LABEL_187:
              v2 = v80 + 1;
              goto LABEL_188;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v36 = 0;
          goto LABEL_187;
        }
        v34 = 0;
        v35 = 0;
        v36 = 0;
        do
        {
          v2 = v32 + 1;
          *((_QWORD *)a2 + 1) = v32 + 1;
          v37 = *(_BYTE *)(v33 + v32);
          v36 |= (unint64_t)(v37 & 0x7F) << v34;
          if ((v37 & 0x80) == 0)
            goto LABEL_188;
          v34 += 7;
          v32 = v2;
          v14 = v35++ > 8;
        }
        while (!v14);
        v36 = 0;
LABEL_188:
        *((_QWORD *)this + 2) = v36;
        break;
      case 5u:
        *((_DWORD *)this + 25) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_111;
        *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_173;
      case 6u:
        *((_DWORD *)this + 25) |= 1u;
        v38 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v39 = *(_QWORD *)a2;
        if (v38 > 0xFFFFFFFFFFFFFFF5 || v38 + 10 > v2)
        {
          v82 = 0;
          v83 = 0;
          v42 = 0;
          if (v2 <= v38)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v38)
            {
              v42 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_193;
            }
            v84 = v38++;
            v85 = *(_BYTE *)(v39 + v84);
            *((_QWORD *)a2 + 1) = v38;
            v42 |= (unint64_t)(v85 & 0x7F) << v82;
            if ((v85 & 0x80) == 0)
              break;
            v82 += 7;
            v14 = v83++ > 8;
            if (v14)
            {
              v42 = 0;
LABEL_192:
              v2 = v84 + 1;
              goto LABEL_193;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v42 = 0;
          goto LABEL_192;
        }
        v40 = 0;
        v41 = 0;
        v42 = 0;
        do
        {
          v2 = v38 + 1;
          *((_QWORD *)a2 + 1) = v38 + 1;
          v43 = *(_BYTE *)(v39 + v38);
          v42 |= (unint64_t)(v43 & 0x7F) << v40;
          if ((v43 & 0x80) == 0)
            goto LABEL_193;
          v40 += 7;
          v38 = v2;
          v14 = v41++ > 8;
        }
        while (!v14);
        v42 = 0;
LABEL_193:
        *((_QWORD *)this + 1) = v42;
        break;
      case 7u:
        *((_DWORD *)this + 25) |= 0x1000u;
        v44 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v45 = *(_QWORD *)a2;
        if (v44 > 0xFFFFFFFFFFFFFFF5 || v44 + 10 > v2)
        {
          v86 = 0;
          v87 = 0;
          v48 = 0;
          if (v2 <= v44)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v44)
            {
              LODWORD(v48) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_198;
            }
            v88 = v44++;
            v89 = *(_BYTE *)(v45 + v88);
            *((_QWORD *)a2 + 1) = v44;
            v48 |= (unint64_t)(v89 & 0x7F) << v86;
            if ((v89 & 0x80) == 0)
              break;
            v86 += 7;
            v14 = v87++ > 8;
            if (v14)
            {
              LODWORD(v48) = 0;
LABEL_197:
              v2 = v88 + 1;
              goto LABEL_198;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v48) = 0;
          goto LABEL_197;
        }
        v46 = 0;
        v47 = 0;
        v48 = 0;
        do
        {
          v2 = v44 + 1;
          *((_QWORD *)a2 + 1) = v44 + 1;
          v49 = *(_BYTE *)(v45 + v44);
          v48 |= (unint64_t)(v49 & 0x7F) << v46;
          if ((v49 & 0x80) == 0)
            goto LABEL_198;
          v46 += 7;
          v44 = v2;
          v14 = v47++ > 8;
        }
        while (!v14);
        LODWORD(v48) = 0;
LABEL_198:
        *((_DWORD *)this + 17) = v48;
        break;
      case 8u:
        *((_DWORD *)this + 25) |= 0x800u;
        v50 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v51 = *(_QWORD *)a2;
        if (v50 > 0xFFFFFFFFFFFFFFF5 || v50 + 10 > v2)
        {
          v90 = 0;
          v91 = 0;
          v54 = 0;
          if (v2 <= v50)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v50)
            {
              LODWORD(v54) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_203;
            }
            v92 = v50++;
            v93 = *(_BYTE *)(v51 + v92);
            *((_QWORD *)a2 + 1) = v50;
            v54 |= (unint64_t)(v93 & 0x7F) << v90;
            if ((v93 & 0x80) == 0)
              break;
            v90 += 7;
            v14 = v91++ > 8;
            if (v14)
            {
              LODWORD(v54) = 0;
LABEL_202:
              v2 = v92 + 1;
              goto LABEL_203;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v54) = 0;
          goto LABEL_202;
        }
        v52 = 0;
        v53 = 0;
        v54 = 0;
        do
        {
          v2 = v50 + 1;
          *((_QWORD *)a2 + 1) = v50 + 1;
          v55 = *(_BYTE *)(v51 + v50);
          v54 |= (unint64_t)(v55 & 0x7F) << v52;
          if ((v55 & 0x80) == 0)
            goto LABEL_203;
          v52 += 7;
          v50 = v2;
          v14 = v53++ > 8;
        }
        while (!v14);
        LODWORD(v54) = 0;
LABEL_203:
        *((_DWORD *)this + 16) = v54;
        break;
      case 9u:
        *((_DWORD *)this + 25) |= 0x80u;
        v56 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v57 = *(_QWORD *)a2;
        if (v56 > 0xFFFFFFFFFFFFFFF5 || v56 + 10 > v2)
        {
          v94 = 0;
          v95 = 0;
          v60 = 0;
          if (v2 <= v56)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v56)
            {
              LODWORD(v60) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_208;
            }
            v96 = v56++;
            v97 = *(_BYTE *)(v57 + v96);
            *((_QWORD *)a2 + 1) = v56;
            v60 |= (unint64_t)(v97 & 0x7F) << v94;
            if ((v97 & 0x80) == 0)
              break;
            v94 += 7;
            v14 = v95++ > 8;
            if (v14)
            {
              LODWORD(v60) = 0;
LABEL_207:
              v2 = v96 + 1;
              goto LABEL_208;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v60) = 0;
          goto LABEL_207;
        }
        v58 = 0;
        v59 = 0;
        v60 = 0;
        do
        {
          v2 = v56 + 1;
          *((_QWORD *)a2 + 1) = v56 + 1;
          v61 = *(_BYTE *)(v57 + v56);
          v60 |= (unint64_t)(v61 & 0x7F) << v58;
          if ((v61 & 0x80) == 0)
            goto LABEL_208;
          v58 += 7;
          v56 = v2;
          v14 = v59++ > 8;
        }
        while (!v14);
        LODWORD(v60) = 0;
LABEL_208:
        *((_DWORD *)this + 12) = v60;
        break;
      case 0xAu:
        *((_DWORD *)this + 25) |= 0x40u;
        v62 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v63 = *(_QWORD *)a2;
        if (v62 > 0xFFFFFFFFFFFFFFF5 || v62 + 10 > v2)
        {
          v98 = 0;
          v99 = 0;
          v66 = 0;
          if (v2 <= v62)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v62)
            {
              LODWORD(v66) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_213;
            }
            v100 = v62++;
            v101 = *(_BYTE *)(v63 + v100);
            *((_QWORD *)a2 + 1) = v62;
            v66 |= (unint64_t)(v101 & 0x7F) << v98;
            if ((v101 & 0x80) == 0)
              break;
            v98 += 7;
            v14 = v99++ > 8;
            if (v14)
            {
              LODWORD(v66) = 0;
LABEL_212:
              v2 = v100 + 1;
              goto LABEL_213;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v66) = 0;
          goto LABEL_212;
        }
        v64 = 0;
        v65 = 0;
        v66 = 0;
        do
        {
          v2 = v62 + 1;
          *((_QWORD *)a2 + 1) = v62 + 1;
          v67 = *(_BYTE *)(v63 + v62);
          v66 |= (unint64_t)(v67 & 0x7F) << v64;
          if ((v67 & 0x80) == 0)
            goto LABEL_213;
          v64 += 7;
          v62 = v2;
          v14 = v65++ > 8;
        }
        while (!v14);
        LODWORD(v66) = 0;
LABEL_213:
        *((_DWORD *)this + 11) = v66;
        break;
      case 0xBu:
        *((_DWORD *)this + 25) |= 0x2000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_111;
        *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_173;
      case 0xCu:
        *((_DWORD *)this + 25) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_111;
        *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_173;
      case 0xDu:
        *((_DWORD *)this + 25) |= 0x40000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_111;
        *((_DWORD *)this + 23) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_173;
      case 0xEu:
        *((_DWORD *)this + 25) |= 0x20000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_111;
        *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_173;
      case 0xFu:
        *((_DWORD *)this + 25) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_111;
        *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_173;
      case 0x10u:
        *((_DWORD *)this + 25) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_111;
        *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_173;
      case 0x11u:
        *((_DWORD *)this + 25) |= 0x10000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_111;
        *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_173;
      case 0x12u:
        *((_DWORD *)this + 25) |= 0x8000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_111;
        *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_173;
      case 0x13u:
        *((_DWORD *)this + 25) |= 0x4000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_173:
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_111:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 0x14u:
        *((_DWORD *)this + 25) |= 0x80000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v69 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v68 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v69 = v68 != 0;
        }
        *((_BYTE *)this + 96) = v69;
        break;
      default:
        goto LABEL_19;
    }
LABEL_214:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::KData2::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 100);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_DWORD *)(v3 + 100);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0)
        goto LABEL_4;
      goto LABEL_24;
    }
  }
  else if ((v4 & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 60));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0)
      goto LABEL_7;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 1) == 0)
  {
LABEL_7:
    if ((v4 & 0x1000) == 0)
      goto LABEL_8;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x1000) == 0)
  {
LABEL_8:
    if ((v4 & 0x800) == 0)
      goto LABEL_9;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x800) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x40) == 0)
  {
LABEL_11:
    if ((v4 & 0x2000) == 0)
      goto LABEL_12;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x2000) == 0)
  {
LABEL_12:
    if ((v4 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x100) == 0)
  {
LABEL_13:
    if ((v4 & 0x40000) == 0)
      goto LABEL_14;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x40000) == 0)
  {
LABEL_14:
    if ((v4 & 0x20000) == 0)
      goto LABEL_15;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 92));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x20000) == 0)
  {
LABEL_15:
    if ((v4 & 0x200) == 0)
      goto LABEL_16;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x200) == 0)
  {
LABEL_16:
    if ((v4 & 0x10) == 0)
      goto LABEL_17;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x10) == 0)
  {
LABEL_17:
    if ((v4 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x10000) == 0)
  {
LABEL_18:
    if ((v4 & 0x8000) == 0)
      goto LABEL_19;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 84));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x8000) == 0)
  {
LABEL_19:
    if ((v4 & 0x4000) == 0)
      goto LABEL_20;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x4000) == 0)
  {
LABEL_20:
    if ((v4 & 0x80000) == 0)
      return this;
    return PB::Writer::write(a2);
  }
LABEL_40:
  this = PB::Writer::write(a2, *(float *)(v3 + 76));
  if ((*(_DWORD *)(v3 + 100) & 0x80000) != 0)
    return PB::Writer::write(a2);
  return this;
}

uint64_t CMMsl::KData2::hash_value(CMMsl::KData2 *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  uint64_t v32;

  v1 = *((_DWORD *)this + 25);
  if ((v1 & 4) != 0)
  {
    v2 = *((_QWORD *)this + 3);
    if ((v1 & 8) != 0)
    {
LABEL_3:
      v3 = *((int *)this + 8);
      if ((v1 & 0x400) != 0)
        goto LABEL_4;
LABEL_46:
      v5 = 0;
      if ((v1 & 2) != 0)
        goto LABEL_7;
      goto LABEL_47;
    }
  }
  else
  {
    v2 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((v1 & 0x400) == 0)
    goto LABEL_46;
LABEL_4:
  v4 = *((float *)this + 15);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_7:
    v6 = *((_QWORD *)this + 2);
    if ((v1 & 0x20) != 0)
      goto LABEL_8;
LABEL_48:
    v8 = 0;
    if ((v1 & 1) != 0)
      goto LABEL_11;
    goto LABEL_49;
  }
LABEL_47:
  v6 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_48;
LABEL_8:
  v7 = *((float *)this + 10);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 1) != 0)
  {
LABEL_11:
    v9 = *((_QWORD *)this + 1);
    if ((v1 & 0x1000) != 0)
      goto LABEL_12;
    goto LABEL_50;
  }
LABEL_49:
  v9 = 0;
  if ((v1 & 0x1000) != 0)
  {
LABEL_12:
    v10 = *((unsigned int *)this + 17);
    if ((v1 & 0x800) != 0)
      goto LABEL_13;
    goto LABEL_51;
  }
LABEL_50:
  v10 = 0;
  if ((v1 & 0x800) != 0)
  {
LABEL_13:
    v11 = *((unsigned int *)this + 16);
    if ((v1 & 0x80) != 0)
      goto LABEL_14;
    goto LABEL_52;
  }
LABEL_51:
  v11 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_14:
    v12 = *((unsigned int *)this + 12);
    if ((v1 & 0x40) != 0)
      goto LABEL_15;
    goto LABEL_53;
  }
LABEL_52:
  v12 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_15:
    v13 = *((unsigned int *)this + 11);
    if ((v1 & 0x2000) != 0)
      goto LABEL_16;
LABEL_54:
    v15 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_19;
LABEL_55:
    v17 = 0;
    if ((v1 & 0x40000) != 0)
      goto LABEL_22;
LABEL_56:
    v19 = 0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_25;
LABEL_57:
    v21 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_28;
LABEL_58:
    v23 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_31;
LABEL_59:
    v25 = 0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_34;
LABEL_60:
    v27 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_37;
LABEL_61:
    v29 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_40;
    goto LABEL_62;
  }
LABEL_53:
  v13 = 0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_54;
LABEL_16:
  v14 = *((float *)this + 18);
  v15 = LODWORD(v14);
  if (v14 == 0.0)
    v15 = 0;
  if ((v1 & 0x100) == 0)
    goto LABEL_55;
LABEL_19:
  v16 = *((float *)this + 13);
  v17 = LODWORD(v16);
  if (v16 == 0.0)
    v17 = 0;
  if ((v1 & 0x40000) == 0)
    goto LABEL_56;
LABEL_22:
  v18 = *((float *)this + 23);
  v19 = LODWORD(v18);
  if (v18 == 0.0)
    v19 = 0;
  if ((v1 & 0x20000) == 0)
    goto LABEL_57;
LABEL_25:
  v20 = *((float *)this + 22);
  v21 = LODWORD(v20);
  if (v20 == 0.0)
    v21 = 0;
  if ((v1 & 0x200) == 0)
    goto LABEL_58;
LABEL_28:
  v22 = *((float *)this + 14);
  v23 = LODWORD(v22);
  if (v22 == 0.0)
    v23 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_59;
LABEL_31:
  v24 = *((float *)this + 9);
  v25 = LODWORD(v24);
  if (v24 == 0.0)
    v25 = 0;
  if ((v1 & 0x10000) == 0)
    goto LABEL_60;
LABEL_34:
  v26 = *((float *)this + 21);
  v27 = LODWORD(v26);
  if (v26 == 0.0)
    v27 = 0;
  if ((v1 & 0x8000) == 0)
    goto LABEL_61;
LABEL_37:
  v28 = *((float *)this + 20);
  v29 = LODWORD(v28);
  if (v28 == 0.0)
    v29 = 0;
  if ((v1 & 0x4000) != 0)
  {
LABEL_40:
    v30 = *((float *)this + 19);
    v31 = LODWORD(v30);
    if (v30 == 0.0)
      v31 = 0;
    if ((v1 & 0x80000) != 0)
      goto LABEL_43;
LABEL_63:
    v32 = 0;
    return v3 ^ v2 ^ v5 ^ v6 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v15 ^ v17 ^ v19 ^ v21 ^ v23 ^ v25 ^ v27 ^ v29 ^ v31 ^ v32;
  }
LABEL_62:
  v31 = 0;
  if ((v1 & 0x80000) == 0)
    goto LABEL_63;
LABEL_43:
  v32 = *((unsigned __int8 *)this + 96);
  return v3 ^ v2 ^ v5 ^ v6 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v15 ^ v17 ^ v19 ^ v21 ^ v23 ^ v25 ^ v27 ^ v29 ^ v31 ^ v32;
}

void CMMsl::KData3::~KData3(CMMsl::KData3 *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::KData3::KData3(CMMsl::KData3 *this, const CMMsl::KData3 *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  float result;

  *(_QWORD *)this = &off_25135E668;
  *((_DWORD *)this + 7) = 0;
  v2 = *((_BYTE *)a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 28) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 28) & 8) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 6);
    v3 |= 8u;
    *((_BYTE *)this + 28) = v3;
    *((float *)this + 6) = result;
    v2 = *((_BYTE *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 2) == 0)
      return result;
LABEL_10:
    result = *((float *)a2 + 4);
    *((_BYTE *)this + 28) = v3 | 2;
    *((float *)this + 4) = result;
    return result;
  }
  result = *((float *)a2 + 5);
  v3 |= 4u;
  *((_BYTE *)this + 28) = v3;
  *((float *)this + 5) = result;
  if ((*((_BYTE *)a2 + 28) & 2) != 0)
    goto LABEL_10;
  return result;
}

uint64_t CMMsl::KData3::operator=(uint64_t a1, const CMMsl::KData3 *a2)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;

  if ((const CMMsl::KData3 *)a1 != a2)
  {
    CMMsl::KData3::KData3((CMMsl::KData3 *)&v8, a2);
    v3 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v12;
    v12 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    v9 = v4;
    v5 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v11;
    v11 = v5;
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v10;
    v10 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KData3 *a2, CMMsl::KData3 *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  float result;

  v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v5;
  v6 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v6;
  result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  return result;
}

float CMMsl::KData3::KData3(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135E668;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_25135E668;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::KData3::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  int v11;
  int v12;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_DWORD *)(a2 + 24);
    v12 = *(_DWORD *)(a1 + 28);
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v10[0] = &off_25135E668;
    v10[1] = v6;
    v11 = *(_DWORD *)(a1 + 24);
    v7 = *(_QWORD *)(a1 + 16);
    v8 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 28) = v3;
    *(_DWORD *)(a1 + 24) = v5;
    *(_QWORD *)(a1 + 16) = v8;
    v10[2] = v7;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::KData3::formatText(CMMsl::KData3 *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "maxSymmetryAllowanceFactor", *((float *)this + 4));
    v5 = *((_BYTE *)this + 28);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "minTwistAngleThresholdDeg", *((float *)this + 6));
      if ((*((_BYTE *)this + 28) & 1) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "minPeakRotationRateThresholdRps", *((float *)this + 5));
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 8) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 1) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "timestampUs");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KData3::readFrom(CMMsl::KData3 *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_53;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 28) |= 1u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v26 = 0;
          v27 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              v24 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_52;
            }
            v28 = v20++;
            v29 = *(_BYTE *)(v21 + v28);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0)
              break;
            v26 += 7;
            v14 = v27++ > 8;
            if (v14)
            {
              v24 = 0;
LABEL_51:
              v2 = v28 + 1;
              goto LABEL_52;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v24 = 0;
          goto LABEL_51;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_52;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        v24 = 0;
LABEL_52:
        *((_QWORD *)this + 1) = v24;
        break;
      case 2u:
        *((_BYTE *)this + 28) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_38;
        *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_47;
      case 3u:
        *((_BYTE *)this + 28) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_38;
        *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_47;
      case 4u:
        *((_BYTE *)this + 28) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_47:
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_38:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_53:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::KData3::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 28);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 28) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 16));
  }
LABEL_8:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  if ((*(_BYTE *)(v3 + 28) & 2) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 16));
  return this;
}

uint64_t CMMsl::KData3::hash_value(CMMsl::KData3 *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;

  if ((*((_BYTE *)this + 28) & 1) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 28) & 8) != 0)
      goto LABEL_3;
LABEL_13:
    v3 = 0;
    if ((*((_BYTE *)this + 28) & 4) != 0)
      goto LABEL_6;
    goto LABEL_14;
  }
  v1 = *((_QWORD *)this + 1);
  if ((*((_BYTE *)this + 28) & 8) == 0)
    goto LABEL_13;
LABEL_3:
  v2 = *((float *)this + 6);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 28) & 4) != 0)
  {
LABEL_6:
    v4 = *((float *)this + 5);
    v5 = LODWORD(v4);
    if (v4 == 0.0)
      v5 = 0;
    if ((*((_BYTE *)this + 28) & 2) != 0)
      goto LABEL_9;
LABEL_15:
    v7 = 0;
    return v3 ^ v1 ^ v5 ^ v7;
  }
LABEL_14:
  v5 = 0;
  if ((*((_BYTE *)this + 28) & 2) == 0)
    goto LABEL_15;
LABEL_9:
  v6 = *((float *)this + 4);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  return v3 ^ v1 ^ v5 ^ v7;
}

void CMMsl::KMVelocityEstimatorState::~KMVelocityEstimatorState(CMMsl::KMVelocityEstimatorState *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::KMVelocityEstimatorState::KMVelocityEstimatorState(CMMsl::KMVelocityEstimatorState *this, const CMMsl::KMVelocityEstimatorState *a2)
{
  __int16 v2;
  __int16 v3;
  double result;
  char v5;
  char v6;
  char v7;

  *(_QWORD *)this = &off_25135E6A0;
  *((_DWORD *)this + 13) = 0;
  v2 = *((_WORD *)a2 + 26);
  if ((v2 & 1) != 0)
  {
    result = *((double *)a2 + 1);
    v3 = 1;
    *((_WORD *)this + 26) = 1;
    *((double *)this + 1) = result;
    v2 = *((_WORD *)a2 + 26);
    if ((v2 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    LODWORD(result) = *((_DWORD *)a2 + 9);
    v3 |= 0x20u;
    *((_WORD *)this + 26) = v3;
    *((_DWORD *)this + 9) = LODWORD(result);
    v2 = *((_WORD *)a2 + 26);
  }
LABEL_6:
  if ((v2 & 0x40) != 0)
  {
    LODWORD(result) = *((_DWORD *)a2 + 10);
    v3 |= 0x40u;
    *((_WORD *)this + 26) = v3;
    *((_DWORD *)this + 10) = LODWORD(result);
    v2 = *((_WORD *)a2 + 26);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0)
        goto LABEL_9;
      goto LABEL_18;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(result) = *((_DWORD *)a2 + 11);
  v3 |= 0x80u;
  *((_WORD *)this + 26) = v3;
  *((_DWORD *)this + 11) = LODWORD(result);
  v2 = *((_WORD *)a2 + 26);
  if ((v2 & 4) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  LODWORD(result) = *((_DWORD *)a2 + 6);
  v3 |= 4u;
  *((_WORD *)this + 26) = v3;
  *((_DWORD *)this + 6) = LODWORD(result);
  v2 = *((_WORD *)a2 + 26);
  if ((v2 & 8) == 0)
  {
LABEL_10:
    if ((v2 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  LODWORD(result) = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *((_WORD *)this + 26) = v3;
  *((_DWORD *)this + 7) = LODWORD(result);
  v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x10) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_21;
  }
LABEL_20:
  LODWORD(result) = *((_DWORD *)a2 + 8);
  v3 |= 0x10u;
  *((_WORD *)this + 26) = v3;
  *((_DWORD *)this + 8) = LODWORD(result);
  v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  v5 = *((_BYTE *)a2 + 48);
  v3 |= 0x100u;
  *((_WORD *)this + 26) = v3;
  *((_BYTE *)this + 48) = v5;
  v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  v6 = *((_BYTE *)a2 + 49);
  v3 |= 0x200u;
  *((_WORD *)this + 26) = v3;
  *((_BYTE *)this + 49) = v6;
  v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x400) == 0)
  {
LABEL_14:
    if ((v2 & 2) == 0)
      return result;
LABEL_24:
    result = *((double *)a2 + 2);
    *((_WORD *)this + 26) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
LABEL_23:
  v7 = *((_BYTE *)a2 + 50);
  v3 |= 0x400u;
  *((_WORD *)this + 26) = v3;
  *((_BYTE *)this + 50) = v7;
  if ((*((_WORD *)a2 + 26) & 2) != 0)
    goto LABEL_24;
  return result;
}

CMMsl *CMMsl::KMVelocityEstimatorState::operator=(CMMsl *a1, const CMMsl::KMVelocityEstimatorState *a2)
{
  CMMsl::KMVelocityEstimatorState *v3;
  _BYTE v5[56];

  if (a1 != a2)
  {
    CMMsl::KMVelocityEstimatorState::KMVelocityEstimatorState((CMMsl::KMVelocityEstimatorState *)v5, a2);
    CMMsl::swap(a1, (CMMsl::KMVelocityEstimatorState *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::KMVelocityEstimatorState *a2, CMMsl::KMVelocityEstimatorState *a3)
{
  int v3;
  uint64_t v4;
  double result;

  v3 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LOBYTE(v3) = *((_BYTE *)this + 48);
  *((_BYTE *)this + 48) = *((_BYTE *)a2 + 48);
  *((_BYTE *)a2 + 48) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 49);
  *((_BYTE *)this + 49) = *((_BYTE *)a2 + 49);
  *((_BYTE *)a2 + 49) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 50);
  *((_BYTE *)this + 50) = *((_BYTE *)a2 + 50);
  *((_BYTE *)a2 + 50) = v3;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::KMVelocityEstimatorState::KMVelocityEstimatorState(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135E6A0;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 50);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

CMMsl *CMMsl::KMVelocityEstimatorState::operator=(CMMsl *this, uint64_t a2, CMMsl::KMVelocityEstimatorState *a3)
{
  __int128 v4;
  void (**v6)(CMMsl::KMVelocityEstimatorState *__hidden);
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  char v10;
  __int16 v11;
  int v12;

  if (this != (CMMsl *)a2)
  {
    v6 = &off_25135E6A0;
    v12 = *(_DWORD *)(a2 + 52);
    *(_DWORD *)(a2 + 52) = 0;
    v9 = *(_QWORD *)(a2 + 40);
    v4 = *(_OWORD *)(a2 + 24);
    v10 = *(_BYTE *)(a2 + 48);
    v11 = *(_WORD *)(a2 + 49);
    v7 = *(_OWORD *)(a2 + 8);
    v8 = v4;
    CMMsl::swap(this, (CMMsl::KMVelocityEstimatorState *)&v6, a3);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return this;
}

uint64_t CMMsl::KMVelocityEstimatorState::formatText(CMMsl::KMVelocityEstimatorState *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 26);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    v5 = *((_WORD *)this + 26);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 2));
  v5 = *((_WORD *)this + 26);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "validX");
  v5 = *((_WORD *)this + 26);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 0x400) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "validY");
  v5 = *((_WORD *)this + 26);
  if ((v5 & 0x400) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "validZ");
  v5 = *((_WORD *)this + 26);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "velocityUncX", *((float *)this + 6));
  v5 = *((_WORD *)this + 26);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "velocityUncY", *((float *)this + 7));
  v5 = *((_WORD *)this + 26);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "velocityUncZ", *((float *)this + 8));
  v5 = *((_WORD *)this + 26);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0)
      goto LABEL_11;
LABEL_23:
    PB::TextFormatter::format(a2, "velocityY", *((float *)this + 10));
    if ((*((_WORD *)this + 26) & 0x80) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "velocityX", *((float *)this + 9));
  v5 = *((_WORD *)this + 26);
  if ((v5 & 0x40) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v5 & 0x80) != 0)
LABEL_12:
    PB::TextFormatter::format(a2, "velocityZ", *((float *)this + 11));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KMVelocityEstimatorState::readFrom(CMMsl::KMVelocityEstimatorState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v20;
  BOOL v21;
  int v22;
  BOOL v23;
  int v24;
  BOOL v25;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_63;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 26) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_53;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_61;
      case 2u:
        *((_WORD *)this + 26) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_53;
        *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_44;
      case 3u:
        *((_WORD *)this + 26) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_53;
        *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_44;
      case 4u:
        *((_WORD *)this + 26) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_53;
        *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_44;
      case 5u:
        *((_WORD *)this + 26) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_53;
        *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_44;
      case 6u:
        *((_WORD *)this + 26) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_53;
        *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_44;
      case 7u:
        *((_WORD *)this + 26) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_53;
        *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_44:
        v2 = *((_QWORD *)a2 + 1) + 4;
        goto LABEL_62;
      case 8u:
        *((_WORD *)this + 26) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v21 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v21 = v20 != 0;
        }
        *((_BYTE *)this + 48) = v21;
        break;
      case 9u:
        *((_WORD *)this + 26) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v25 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v24 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v25 = v24 != 0;
        }
        *((_BYTE *)this + 49) = v25;
        break;
      case 0xAu:
        *((_WORD *)this + 26) |= 0x400u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v23 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v22 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v23 = v22 != 0;
        }
        *((_BYTE *)this + 50) = v23;
        break;
      case 0xBu:
        *((_WORD *)this + 26) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_61:
          v2 = *((_QWORD *)a2 + 1) + 8;
LABEL_62:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_53:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_63:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::KMVelocityEstimatorState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 52);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_WORD *)(v3 + 52);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x10) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x400) == 0)
  {
LABEL_11:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 16));
  }
LABEL_22:
  this = PB::Writer::write(a2);
  if ((*(_WORD *)(v3 + 52) & 2) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 16));
  return this;
}

uint64_t CMMsl::KMVelocityEstimatorState::hash_value(CMMsl::KMVelocityEstimatorState *this)
{
  __int16 v1;
  double v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;

  v1 = *((_WORD *)this + 26);
  if ((v1 & 1) == 0)
  {
    v2 = 0.0;
    if ((v1 & 0x20) != 0)
      goto LABEL_3;
LABEL_30:
    v4 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_6;
LABEL_31:
    v6 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_9;
LABEL_32:
    v8 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_12;
LABEL_33:
    v10 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_15;
LABEL_34:
    v12 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_18;
LABEL_35:
    v14 = 0;
    if ((*((_WORD *)this + 26) & 0x100) != 0)
      goto LABEL_21;
    goto LABEL_36;
  }
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 0x20) == 0)
    goto LABEL_30;
LABEL_3:
  v3 = *((float *)this + 9);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_31;
LABEL_6:
  v5 = *((float *)this + 10);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_32;
LABEL_9:
  v7 = *((float *)this + 11);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 4) == 0)
    goto LABEL_33;
LABEL_12:
  v9 = *((float *)this + 6);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_34;
LABEL_15:
  v11 = *((float *)this + 7);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_35;
LABEL_18:
  v13 = *((float *)this + 8);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((*((_WORD *)this + 26) & 0x100) != 0)
  {
LABEL_21:
    v15 = *((unsigned __int8 *)this + 48);
    if ((*((_WORD *)this + 26) & 0x200) != 0)
      goto LABEL_22;
    goto LABEL_37;
  }
LABEL_36:
  v15 = 0;
  if ((*((_WORD *)this + 26) & 0x200) != 0)
  {
LABEL_22:
    v16 = *((unsigned __int8 *)this + 49);
    if ((*((_WORD *)this + 26) & 0x400) != 0)
      goto LABEL_23;
    goto LABEL_38;
  }
LABEL_37:
  v16 = 0;
  if ((*((_WORD *)this + 26) & 0x400) != 0)
  {
LABEL_23:
    v17 = *((unsigned __int8 *)this + 50);
    if ((v1 & 2) != 0)
      goto LABEL_24;
LABEL_39:
    v18 = 0.0;
    return v4 ^ *(_QWORD *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v15 ^ v16 ^ v17 ^ *(_QWORD *)&v18;
  }
LABEL_38:
  v17 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_39;
LABEL_24:
  v18 = *((double *)this + 2);
  if (v18 == 0.0)
    v18 = 0.0;
  return v4 ^ *(_QWORD *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v15 ^ v16 ^ v17 ^ *(_QWORD *)&v18;
}

void CMMsl::KappaActivityPhone::~KappaActivityPhone(CMMsl::KappaActivityPhone *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = &off_25135E6D8;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 7);
  if (v3)
  {
    *((_QWORD *)this + 8) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 5) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 1);
  if (v5)
  {
    *((_QWORD *)this + 2) = v5;
    operator delete(v5);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::KappaActivityPhone::~KappaActivityPhone(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::KappaActivityPhone *CMMsl::KappaActivityPhone::KappaActivityPhone(CMMsl::KappaActivityPhone *this, const CMMsl::KappaActivityPhone *a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  char v8;
  int v9;
  int v11;
  int v12;
  int v13;

  *(_QWORD *)this = &off_25135E6D8;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (_QWORD *)((char *)this + 8);
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 35) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  if ((*((_BYTE *)a2 + 140) & 1) != 0)
  {
    v5 = *((_QWORD *)a2 + 13);
    *((_BYTE *)this + 140) = 1;
    *((_QWORD *)this + 13) = v5;
  }
  if (this != a2)
    sub_242911380(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  if ((*((_BYTE *)a2 + 140) & 4) != 0)
  {
    v6 = *((_DWORD *)a2 + 30);
    *((_BYTE *)this + 140) |= 4u;
    *((_DWORD *)this + 30) = v6;
  }
  if (this != a2)
    sub_242911380((_QWORD *)this + 10, *((char **)a2 + 10), *((char **)a2 + 11), (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 2);
  if ((*((_BYTE *)a2 + 140) & 2) != 0)
  {
    v7 = *((_QWORD *)a2 + 14);
    *((_BYTE *)this + 140) |= 2u;
    *((_QWORD *)this + 14) = v7;
  }
  if (this != a2)
  {
    sub_242911380((_QWORD *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
    sub_242911380((_QWORD *)this + 7, *((char **)a2 + 7), *((char **)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 2);
  }
  v8 = *((_BYTE *)a2 + 140);
  if ((v8 & 0x20) != 0)
  {
    v11 = *((_DWORD *)a2 + 33);
    *((_BYTE *)this + 140) |= 0x20u;
    *((_DWORD *)this + 33) = v11;
    v8 = *((_BYTE *)a2 + 140);
    if ((v8 & 8) == 0)
    {
LABEL_15:
      if ((v8 & 0x10) == 0)
        goto LABEL_16;
LABEL_21:
      v13 = *((_DWORD *)a2 + 32);
      *((_BYTE *)this + 140) |= 0x10u;
      *((_DWORD *)this + 32) = v13;
      if ((*((_BYTE *)a2 + 140) & 0x40) == 0)
        return this;
      goto LABEL_17;
    }
  }
  else if ((*((_BYTE *)a2 + 140) & 8) == 0)
  {
    goto LABEL_15;
  }
  v12 = *((_DWORD *)a2 + 31);
  *((_BYTE *)this + 140) |= 8u;
  *((_DWORD *)this + 31) = v12;
  v8 = *((_BYTE *)a2 + 140);
  if ((v8 & 0x10) != 0)
    goto LABEL_21;
LABEL_16:
  if ((v8 & 0x40) != 0)
  {
LABEL_17:
    v9 = *((_DWORD *)a2 + 34);
    *((_BYTE *)this + 140) |= 0x40u;
    *((_DWORD *)this + 34) = v9;
  }
  return this;
}

CMMsl *CMMsl::KappaActivityPhone::operator=(CMMsl *a1, const CMMsl::KappaActivityPhone *a2)
{
  CMMsl::KappaActivityPhone *v3;
  _BYTE v5[144];

  if (a1 != a2)
  {
    CMMsl::KappaActivityPhone::KappaActivityPhone((CMMsl::KappaActivityPhone *)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaActivityPhone *)v5, v3);
    CMMsl::KappaActivityPhone::~KappaActivityPhone((CMMsl::KappaActivityPhone *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaActivityPhone *a2, CMMsl::KappaActivityPhone *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  float result;

  v3 = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  LODWORD(v6) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v6;
  v7 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v7;
  v8 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v8;
  v10 = *((_QWORD *)this + 12);
  v9 = *((_QWORD *)this + 13);
  v11 = *((_QWORD *)a2 + 13);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)this + 13) = v11;
  *((_QWORD *)a2 + 12) = v10;
  *((_QWORD *)a2 + 13) = v9;
  v12 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v12;
  v13 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v13;
  v14 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v14;
  v15 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v15;
  v16 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v16;
  v17 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v17;
  v18 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v18;
  v19 = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v19;
  v20 = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v20;
  v21 = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v21;
  result = *((float *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((float *)a2 + 34) = result;
  return result;
}

uint64_t CMMsl::KappaActivityPhone::KappaActivityPhone(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_25135E6D8;
  v4 = a1 + 32;
  v5 = a1 + 80;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v6 = a1 + 56;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a2 + 140) = 0;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  sub_242911330(v5, (__n128 *)(a2 + 80));
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  sub_242911330(v4, (__n128 *)(a2 + 32));
  sub_242911330(v6, (__n128 *)(a2 + 56));
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  return a1;
}

CMMsl *CMMsl::KappaActivityPhone::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::KappaActivityPhone *v3;
  _BYTE v5[144];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaActivityPhone::KappaActivityPhone((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaActivityPhone *)v5, v3);
    CMMsl::KappaActivityPhone::~KappaActivityPhone((CMMsl::KappaActivityPhone *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaActivityPhone::formatText(CMMsl::KappaActivityPhone *this, PB::TextFormatter *a2, const char *a3)
{
  float *v5;
  float *v6;
  float v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  float *v14;
  float *v15;
  float v16;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 140) & 4) != 0)
    PB::TextFormatter::format(a2, "armTimeActivityHints");
  v5 = (float *)*((_QWORD *)this + 1);
  v6 = (float *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "armTimeImuConfidences", v7);
  }
  v8 = *((_BYTE *)this + 140);
  if ((v8 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "sessionBtHintPercentage", *((float *)this + 31));
    v8 = *((_BYTE *)this + 140);
    if ((v8 & 0x10) == 0)
    {
LABEL_7:
      if ((v8 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  else if ((*((_BYTE *)this + 140) & 0x10) == 0)
  {
    goto LABEL_7;
  }
  PB::TextFormatter::format(a2, "sessionGpsHintPercentage", *((float *)this + 32));
  if ((*((_BYTE *)this + 140) & 0x20) != 0)
LABEL_8:
    PB::TextFormatter::format(a2, "sessionImuHintPercentage", *((float *)this + 33));
LABEL_9:
  v9 = *((_QWORD *)this + 4);
  v10 = *((_QWORD *)this + 5);
  while (v9 != v10)
  {
    v9 += 4;
    PB::TextFormatter::format(a2, "sessionSwivelAngleDegHistogram");
  }
  v11 = *((_QWORD *)this + 7);
  v12 = *((_QWORD *)this + 8);
  while (v11 != v12)
  {
    v11 += 4;
    PB::TextFormatter::format(a2, "sessionTiltAngleDegHistogram");
  }
  v13 = *((_BYTE *)this + 140);
  if ((v13 & 0x40) != 0)
  {
    PB::TextFormatter::format(a2, "sessionWifiHintPercentage", *((float *)this + 34));
    v13 = *((_BYTE *)this + 140);
    if ((v13 & 1) == 0)
    {
LABEL_15:
      if ((v13 & 2) == 0)
        goto LABEL_17;
      goto LABEL_16;
    }
  }
  else if ((*((_BYTE *)this + 140) & 1) == 0)
  {
    goto LABEL_15;
  }
  PB::TextFormatter::format(a2, "timestamp");
  if ((*((_BYTE *)this + 140) & 2) != 0)
LABEL_16:
    PB::TextFormatter::format(a2, "triggerTimeLastHighImuDrivingConfidenceTimestamp");
LABEL_17:
  v14 = (float *)*((_QWORD *)this + 10);
  v15 = (float *)*((_QWORD *)this + 11);
  while (v14 != v15)
  {
    v16 = *v14++;
    PB::TextFormatter::format(a2, "windowAfterArmImuConfidences", v16);
  }
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::KappaActivityPhone::readFrom(CMMsl::KappaActivityPhone *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  _DWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  _DWORD *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  _DWORD *v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  char *v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  _DWORD *v79;
  char *v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  BOOL v85;
  char v86;
  unsigned int v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  char v91;
  unsigned int v92;
  uint64_t v93;
  unint64_t v94;
  char v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  _DWORD *v103;
  char *v104;
  int v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  char v110;
  unsigned int v111;
  uint64_t v112;
  unint64_t v113;
  char v114;
  char v115;
  unsigned int v116;
  uint64_t v117;
  unint64_t v118;
  char v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  char v124;
  unsigned int v125;
  unint64_t v126;
  char v127;
  unint64_t v128;
  char *v129;
  _DWORD *v130;
  char v131;
  unsigned int v132;
  unint64_t v133;
  char v134;
  unint64_t v135;
  char *v136;
  char v137;
  unsigned int v138;
  unint64_t v139;
  char v140;
  unint64_t v141;
  char *v142;
  _DWORD *v143;
  unint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  _DWORD *v170;
  int v171;
  _DWORD *v172;
  int v173;
  unint64_t v174;
  _DWORD *v175;
  int v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  char v180;
  unsigned int v181;
  unint64_t v183;
  char v184;
  uint64_t v185;
  unint64_t v186;
  char v187;
  _DWORD *v188;
  int v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  char v193;
  unsigned int v194;
  unint64_t v196;
  char v197;
  unint64_t v198;
  char v199;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v85 = v10++ > 8;
        if (v85)
          goto LABEL_19;
      }
LABEL_21:
      v18 = v11 & 7;
      if (v18 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 140) |= 1u;
          v19 = *((_QWORD *)a2 + 1);
          v20 = *((_QWORD *)a2 + 2);
          v21 = *(_QWORD *)a2;
          if (v19 <= 0xFFFFFFFFFFFFFFF5 && v19 + 10 <= v20)
          {
            v22 = 0;
            v23 = 0;
            v24 = 0;
            do
            {
              v25 = v19 + 1;
              *((_QWORD *)a2 + 1) = v19 + 1;
              v26 = *(_BYTE *)(v21 + v19);
              v24 |= (unint64_t)(v26 & 0x7F) << v22;
              if ((v26 & 0x80) == 0)
                goto LABEL_263;
              v22 += 7;
              v19 = v25;
              v85 = v23++ > 8;
            }
            while (!v85);
LABEL_200:
            v24 = 0;
            goto LABEL_263;
          }
          v124 = 0;
          v125 = 0;
          v24 = 0;
          if (v20 <= v19)
            v20 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v20 == v19)
            {
              v24 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v126 = v19 + 1;
              v127 = *(_BYTE *)(v21 + v19);
              *((_QWORD *)a2 + 1) = v126;
              v24 |= (unint64_t)(v127 & 0x7F) << v124;
              if (v127 < 0)
              {
                v124 += 7;
                v19 = v126;
                v85 = v125++ > 8;
                if (v85)
                  goto LABEL_200;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v24 = 0;
            }
            break;
          }
LABEL_263:
          *((_QWORD *)this + 13) = v24;
          goto LABEL_337;
        case 2u:
          if (v18 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v27 = *((_QWORD *)a2 + 1);
            v28 = *((_QWORD *)a2 + 2);
            while (v27 < v28 && !*((_BYTE *)a2 + 24))
            {
              v30 = (char *)*((_QWORD *)this + 2);
              v29 = *((_QWORD *)this + 3);
              if ((unint64_t)v30 >= v29)
              {
                v32 = (char *)*((_QWORD *)this + 1);
                v33 = (v30 - v32) >> 2;
                v34 = v33 + 1;
                if ((unint64_t)(v33 + 1) >> 62)
                  goto LABEL_346;
                v35 = v29 - (_QWORD)v32;
                if (v35 >> 1 > v34)
                  v34 = v35 >> 1;
                if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
                  v36 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v36 = v34;
                if (v36)
                {
                  v36 = (unint64_t)sub_2429114B8(v36);
                  v32 = (char *)*((_QWORD *)this + 1);
                  v30 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v37 = 0;
                }
                v38 = (_DWORD *)(v36 + 4 * v33);
                *v38 = 0;
                v31 = v38 + 1;
                while (v30 != v32)
                {
                  v39 = *((_DWORD *)v30 - 1);
                  v30 -= 4;
                  *--v38 = v39;
                }
                *((_QWORD *)this + 1) = v38;
                *((_QWORD *)this + 2) = v31;
                *((_QWORD *)this + 3) = v36 + 4 * v37;
                if (v32)
                  operator delete(v32);
              }
              else
              {
                *(_DWORD *)v30 = 0;
                v31 = v30 + 4;
              }
              *((_QWORD *)this + 2) = v31;
              v40 = *((_QWORD *)a2 + 1);
              if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_224;
              *(v31 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v40);
              v28 = *((_QWORD *)a2 + 2);
              v27 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v27;
            }
            goto LABEL_225;
          }
          v129 = (char *)*((_QWORD *)this + 2);
          v128 = *((_QWORD *)this + 3);
          if ((unint64_t)v129 >= v128)
          {
            v146 = (char *)*((_QWORD *)this + 1);
            v147 = (v129 - v146) >> 2;
            v148 = v147 + 1;
            if ((unint64_t)(v147 + 1) >> 62)
              goto LABEL_346;
            v149 = v128 - (_QWORD)v146;
            if (v149 >> 1 > v148)
              v148 = v149 >> 1;
            if ((unint64_t)v149 >= 0x7FFFFFFFFFFFFFFCLL)
              v150 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v150 = v148;
            if (v150)
            {
              v150 = (unint64_t)sub_2429114B8(v150);
              v146 = (char *)*((_QWORD *)this + 1);
              v129 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v151 = 0;
            }
            v170 = (_DWORD *)(v150 + 4 * v147);
            *v170 = 0;
            v130 = v170 + 1;
            while (v129 != v146)
            {
              v171 = *((_DWORD *)v129 - 1);
              v129 -= 4;
              *--v170 = v171;
            }
            *((_QWORD *)this + 1) = v170;
            *((_QWORD *)this + 2) = v130;
            *((_QWORD *)this + 3) = v150 + 4 * v151;
            if (v146)
              operator delete(v146);
          }
          else
          {
            *(_DWORD *)v129 = 0;
            v130 = v129 + 4;
          }
          *((_QWORD *)this + 2) = v130;
          goto LABEL_284;
        case 3u:
          *((_BYTE *)this + 140) |= 4u;
          v41 = *((_QWORD *)a2 + 1);
          v42 = *((_QWORD *)a2 + 2);
          v43 = *(_QWORD *)a2;
          if (v41 <= 0xFFFFFFFFFFFFFFF5 && v41 + 10 <= v42)
          {
            v44 = 0;
            v45 = 0;
            v46 = 0;
            do
            {
              v47 = v41 + 1;
              *((_QWORD *)a2 + 1) = v41 + 1;
              v48 = *(_BYTE *)(v43 + v41);
              v46 |= (unint64_t)(v48 & 0x7F) << v44;
              if ((v48 & 0x80) == 0)
                goto LABEL_266;
              v44 += 7;
              v41 = v47;
              v85 = v45++ > 8;
            }
            while (!v85);
LABEL_209:
            LODWORD(v46) = 0;
            goto LABEL_266;
          }
          v131 = 0;
          v132 = 0;
          v46 = 0;
          if (v42 <= v41)
            v42 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v42 == v41)
            {
              LODWORD(v46) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v133 = v41 + 1;
              v134 = *(_BYTE *)(v43 + v41);
              *((_QWORD *)a2 + 1) = v133;
              v46 |= (unint64_t)(v134 & 0x7F) << v131;
              if (v134 < 0)
              {
                v131 += 7;
                v41 = v133;
                v85 = v132++ > 8;
                if (v85)
                  goto LABEL_209;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v46) = 0;
            }
            break;
          }
LABEL_266:
          *((_DWORD *)this + 30) = v46;
          goto LABEL_337;
        case 4u:
          if (v18 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v49 = *((_QWORD *)a2 + 1);
            v50 = *((_QWORD *)a2 + 2);
            while (v49 < v50 && !*((_BYTE *)a2 + 24))
            {
              v52 = (char *)*((_QWORD *)this + 11);
              v51 = *((_QWORD *)this + 12);
              if ((unint64_t)v52 >= v51)
              {
                v54 = (char *)*((_QWORD *)this + 10);
                v55 = (v52 - v54) >> 2;
                v56 = v55 + 1;
                if ((unint64_t)(v55 + 1) >> 62)
                  goto LABEL_346;
                v57 = v51 - (_QWORD)v54;
                if (v57 >> 1 > v56)
                  v56 = v57 >> 1;
                if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL)
                  v58 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v58 = v56;
                if (v58)
                {
                  v58 = (unint64_t)sub_2429114B8(v58);
                  v54 = (char *)*((_QWORD *)this + 10);
                  v52 = (char *)*((_QWORD *)this + 11);
                }
                else
                {
                  v59 = 0;
                }
                v60 = (_DWORD *)(v58 + 4 * v55);
                *v60 = 0;
                v53 = v60 + 1;
                while (v52 != v54)
                {
                  v61 = *((_DWORD *)v52 - 1);
                  v52 -= 4;
                  *--v60 = v61;
                }
                *((_QWORD *)this + 10) = v60;
                *((_QWORD *)this + 11) = v53;
                *((_QWORD *)this + 12) = v58 + 4 * v59;
                if (v54)
                  operator delete(v54);
              }
              else
              {
                *(_DWORD *)v52 = 0;
                v53 = v52 + 4;
              }
              *((_QWORD *)this + 11) = v53;
              v62 = *((_QWORD *)a2 + 1);
              if (v62 > 0xFFFFFFFFFFFFFFFBLL || v62 + 4 > *((_QWORD *)a2 + 2))
              {
LABEL_224:
                *((_BYTE *)a2 + 24) = 1;
                goto LABEL_225;
              }
              *(v53 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v62);
              v50 = *((_QWORD *)a2 + 2);
              v49 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v49;
            }
            goto LABEL_225;
          }
          v136 = (char *)*((_QWORD *)this + 11);
          v135 = *((_QWORD *)this + 12);
          if ((unint64_t)v136 >= v135)
          {
            v152 = (char *)*((_QWORD *)this + 10);
            v153 = (v136 - v152) >> 2;
            v154 = v153 + 1;
            if ((unint64_t)(v153 + 1) >> 62)
LABEL_346:
              sub_242729A44();
            v155 = v135 - (_QWORD)v152;
            if (v155 >> 1 > v154)
              v154 = v155 >> 1;
            if ((unint64_t)v155 >= 0x7FFFFFFFFFFFFFFCLL)
              v156 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v156 = v154;
            if (v156)
            {
              v156 = (unint64_t)sub_2429114B8(v156);
              v152 = (char *)*((_QWORD *)this + 10);
              v136 = (char *)*((_QWORD *)this + 11);
            }
            else
            {
              v157 = 0;
            }
            v172 = (_DWORD *)(v156 + 4 * v153);
            *v172 = 0;
            v130 = v172 + 1;
            while (v136 != v152)
            {
              v173 = *((_DWORD *)v136 - 1);
              v136 -= 4;
              *--v172 = v173;
            }
            *((_QWORD *)this + 10) = v172;
            *((_QWORD *)this + 11) = v130;
            *((_QWORD *)this + 12) = v156 + 4 * v157;
            if (v152)
              operator delete(v152);
          }
          else
          {
            *(_DWORD *)v136 = 0;
            v130 = v136 + 4;
          }
          *((_QWORD *)this + 11) = v130;
LABEL_284:
          v174 = *((_QWORD *)a2 + 1);
          if (v174 <= 0xFFFFFFFFFFFFFFFBLL && v174 + 4 <= *((_QWORD *)a2 + 2))
          {
            *(v130 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v174);
LABEL_288:
            *((_QWORD *)a2 + 1) += 4;
          }
          else
          {
LABEL_286:
            *((_BYTE *)a2 + 24) = 1;
          }
          goto LABEL_337;
        case 5u:
          *((_BYTE *)this + 140) |= 2u;
          v63 = *((_QWORD *)a2 + 1);
          v64 = *((_QWORD *)a2 + 2);
          v65 = *(_QWORD *)a2;
          if (v63 <= 0xFFFFFFFFFFFFFFF5 && v63 + 10 <= v64)
          {
            v66 = 0;
            v67 = 0;
            v68 = 0;
            do
            {
              v69 = v63 + 1;
              *((_QWORD *)a2 + 1) = v63 + 1;
              v70 = *(_BYTE *)(v65 + v63);
              v68 |= (unint64_t)(v70 & 0x7F) << v66;
              if ((v70 & 0x80) == 0)
                goto LABEL_269;
              v66 += 7;
              v63 = v69;
              v85 = v67++ > 8;
            }
            while (!v85);
LABEL_218:
            v68 = 0;
            goto LABEL_269;
          }
          v137 = 0;
          v138 = 0;
          v68 = 0;
          if (v64 <= v63)
            v64 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v64 == v63)
            {
              v68 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v139 = v63 + 1;
              v140 = *(_BYTE *)(v65 + v63);
              *((_QWORD *)a2 + 1) = v139;
              v68 |= (unint64_t)(v140 & 0x7F) << v137;
              if (v140 < 0)
              {
                v137 += 7;
                v63 = v139;
                v85 = v138++ > 8;
                if (v85)
                  goto LABEL_218;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v68 = 0;
            }
            break;
          }
LABEL_269:
          *((_QWORD *)this + 14) = v68;
          goto LABEL_337;
        case 6u:
          if (v18 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            if (*((_QWORD *)a2 + 1) < *((_QWORD *)a2 + 2) && !*((_BYTE *)a2 + 24))
            {
              v71 = (char *)*((_QWORD *)this + 5);
              do
              {
                v72 = *((_QWORD *)this + 6);
                if ((unint64_t)v71 >= v72)
                {
                  v73 = (char *)*((_QWORD *)this + 4);
                  v74 = (v71 - v73) >> 2;
                  v75 = v74 + 1;
                  if ((unint64_t)(v74 + 1) >> 62)
                    goto LABEL_347;
                  v76 = v72 - (_QWORD)v73;
                  if (v76 >> 1 > v75)
                    v75 = v76 >> 1;
                  if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFFCLL)
                    v77 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v77 = v75;
                  if (v77)
                  {
                    v77 = (unint64_t)sub_2429114B8(v77);
                    v73 = (char *)*((_QWORD *)this + 4);
                    v71 = (char *)*((_QWORD *)this + 5);
                  }
                  else
                  {
                    v78 = 0;
                  }
                  v79 = (_DWORD *)(v77 + 4 * v74);
                  *v79 = 0;
                  v80 = (char *)(v79 + 1);
                  while (v71 != v73)
                  {
                    v81 = *((_DWORD *)v71 - 1);
                    v71 -= 4;
                    *--v79 = v81;
                  }
                  *((_QWORD *)this + 4) = v79;
                  *((_QWORD *)this + 5) = v80;
                  *((_QWORD *)this + 6) = v77 + 4 * v78;
                  if (v73)
                    operator delete(v73);
                  v71 = v80;
                }
                else
                {
                  *(_DWORD *)v71 = 0;
                  v71 += 4;
                }
                *((_QWORD *)this + 5) = v71;
                v83 = *((_QWORD *)a2 + 1);
                v82 = *((_QWORD *)a2 + 2);
                v84 = *(_QWORD *)a2;
                v85 = v83 > 0xFFFFFFFFFFFFFFF5 || v83 + 10 > v82;
                if (v85)
                {
                  v86 = 0;
                  v87 = 0;
                  v93 = 0;
                  if (v82 <= v83)
                    v88 = *((_QWORD *)a2 + 1);
                  else
                    v88 = *((_QWORD *)a2 + 2);
                  while (1)
                  {
                    if (v88 == v83)
                      goto LABEL_223;
                    v89 = v83++;
                    v90 = *(_BYTE *)(v84 + v89);
                    *((_QWORD *)a2 + 1) = v83;
                    v93 |= (unint64_t)(v90 & 0x7F) << v86;
                    if ((v90 & 0x80) == 0)
                      break;
                    v86 += 7;
                    v85 = v87++ > 8;
                    if (v85)
                    {
                      LODWORD(v93) = 0;
                      goto LABEL_133;
                    }
                  }
                  if (*((_BYTE *)a2 + 24))
                    LODWORD(v93) = 0;
LABEL_133:
                  v94 = v89 + 1;
                }
                else
                {
                  v91 = 0;
                  v92 = 0;
                  v93 = 0;
                  while (1)
                  {
                    v94 = v83 + 1;
                    *((_QWORD *)a2 + 1) = v83 + 1;
                    v95 = *(_BYTE *)(v84 + v83);
                    v93 |= (unint64_t)(v95 & 0x7F) << v91;
                    if ((v95 & 0x80) == 0)
                      break;
                    v91 += 7;
                    v83 = v94;
                    v85 = v92++ > 8;
                    if (v85)
                    {
                      LODWORD(v93) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v71 - 1) = v93;
              }
              while (v94 < v82 && !*((_BYTE *)a2 + 24));
            }
            goto LABEL_225;
          }
          v142 = (char *)*((_QWORD *)this + 5);
          v141 = *((_QWORD *)this + 6);
          if ((unint64_t)v142 >= v141)
          {
            v158 = (char *)*((_QWORD *)this + 4);
            v159 = (v142 - v158) >> 2;
            v160 = v159 + 1;
            if ((unint64_t)(v159 + 1) >> 62)
              goto LABEL_347;
            v161 = v141 - (_QWORD)v158;
            if (v161 >> 1 > v160)
              v160 = v161 >> 1;
            if ((unint64_t)v161 >= 0x7FFFFFFFFFFFFFFCLL)
              v162 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v162 = v160;
            if (v162)
            {
              v162 = (unint64_t)sub_2429114B8(v162);
              v158 = (char *)*((_QWORD *)this + 4);
              v142 = (char *)*((_QWORD *)this + 5);
            }
            else
            {
              v163 = 0;
            }
            v175 = (_DWORD *)(v162 + 4 * v159);
            *v175 = 0;
            v143 = v175 + 1;
            while (v142 != v158)
            {
              v176 = *((_DWORD *)v142 - 1);
              v142 -= 4;
              *--v175 = v176;
            }
            *((_QWORD *)this + 4) = v175;
            *((_QWORD *)this + 5) = v143;
            *((_QWORD *)this + 6) = v162 + 4 * v163;
            if (v158)
              operator delete(v158);
          }
          else
          {
            *(_DWORD *)v142 = 0;
            v143 = v142 + 4;
          }
          *((_QWORD *)this + 5) = v143;
          v177 = *((_QWORD *)a2 + 1);
          v178 = *((_QWORD *)a2 + 2);
          v179 = *(_QWORD *)a2;
          v180 = 0;
          v181 = 0;
          if (v177 <= 0xFFFFFFFFFFFFFFF5 && v177 + 10 <= v178)
          {
            v185 = 0;
            while (1)
            {
              v186 = v177 + 1;
              *((_QWORD *)a2 + 1) = v177 + 1;
              v187 = *(_BYTE *)(v179 + v177);
              v185 |= (unint64_t)(v187 & 0x7F) << v180;
              if ((v187 & 0x80) == 0)
                goto LABEL_336;
              v180 += 7;
              v177 = v186;
              v85 = v181++ > 8;
              if (v85)
                goto LABEL_332;
            }
          }
          v185 = 0;
          if (v178 <= v177)
            v178 = *((_QWORD *)a2 + 1);
          while (v178 != v177)
          {
            v183 = v177 + 1;
            v184 = *(_BYTE *)(v179 + v177);
            *((_QWORD *)a2 + 1) = v183;
            v185 |= (unint64_t)(v184 & 0x7F) << v180;
            if ((v184 & 0x80) == 0)
              goto LABEL_334;
            v180 += 7;
            v177 = v183;
            v85 = v181++ > 8;
            if (v85)
              goto LABEL_332;
          }
          goto LABEL_333;
        case 7u:
          if (v18 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            if (*((_QWORD *)a2 + 1) < *((_QWORD *)a2 + 2) && !*((_BYTE *)a2 + 24))
            {
              v71 = (char *)*((_QWORD *)this + 8);
              do
              {
                v96 = *((_QWORD *)this + 9);
                if ((unint64_t)v71 >= v96)
                {
                  v97 = (char *)*((_QWORD *)this + 7);
                  v98 = (v71 - v97) >> 2;
                  v99 = v98 + 1;
                  if ((unint64_t)(v98 + 1) >> 62)
                    goto LABEL_347;
                  v100 = v96 - (_QWORD)v97;
                  if (v100 >> 1 > v99)
                    v99 = v100 >> 1;
                  if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFFCLL)
                    v101 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v101 = v99;
                  if (v101)
                  {
                    v101 = (unint64_t)sub_2429114B8(v101);
                    v97 = (char *)*((_QWORD *)this + 7);
                    v71 = (char *)*((_QWORD *)this + 8);
                  }
                  else
                  {
                    v102 = 0;
                  }
                  v103 = (_DWORD *)(v101 + 4 * v98);
                  *v103 = 0;
                  v104 = (char *)(v103 + 1);
                  while (v71 != v97)
                  {
                    v105 = *((_DWORD *)v71 - 1);
                    v71 -= 4;
                    *--v103 = v105;
                  }
                  *((_QWORD *)this + 7) = v103;
                  *((_QWORD *)this + 8) = v104;
                  *((_QWORD *)this + 9) = v101 + 4 * v102;
                  if (v97)
                    operator delete(v97);
                  v71 = v104;
                }
                else
                {
                  *(_DWORD *)v71 = 0;
                  v71 += 4;
                }
                *((_QWORD *)this + 8) = v71;
                v107 = *((_QWORD *)a2 + 1);
                v106 = *((_QWORD *)a2 + 2);
                v108 = *(_QWORD *)a2;
                if (v107 <= 0xFFFFFFFFFFFFFFF5 && v107 + 10 <= v106)
                {
                  v115 = 0;
                  v116 = 0;
                  v117 = 0;
                  while (1)
                  {
                    v118 = v107 + 1;
                    *((_QWORD *)a2 + 1) = v107 + 1;
                    v119 = *(_BYTE *)(v108 + v107);
                    v117 |= (unint64_t)(v119 & 0x7F) << v115;
                    if ((v119 & 0x80) == 0)
                      goto LABEL_179;
                    v115 += 7;
                    v107 = v118;
                    v85 = v116++ > 8;
                    if (v85)
                    {
                      LODWORD(v117) = 0;
                      goto LABEL_179;
                    }
                  }
                }
                v110 = 0;
                v111 = 0;
                v117 = 0;
                if (v106 <= v107)
                  v112 = *((_QWORD *)a2 + 1);
                else
                  v112 = *((_QWORD *)a2 + 2);
                while (1)
                {
                  if (v112 == v107)
                  {
LABEL_223:
                    *((_BYTE *)a2 + 24) = 1;
                    *((_DWORD *)v71 - 1) = 0;
                    goto LABEL_225;
                  }
                  v113 = v107++;
                  v114 = *(_BYTE *)(v108 + v113);
                  *((_QWORD *)a2 + 1) = v107;
                  v117 |= (unint64_t)(v114 & 0x7F) << v110;
                  if ((v114 & 0x80) == 0)
                    break;
                  v110 += 7;
                  v85 = v111++ > 8;
                  if (v85)
                  {
                    LODWORD(v117) = 0;
                    goto LABEL_178;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v117) = 0;
LABEL_178:
                v118 = v113 + 1;
LABEL_179:
                *((_DWORD *)v71 - 1) = v117;
              }
              while (v118 < v106 && !*((_BYTE *)a2 + 24));
            }
LABEL_225:
            PB::Reader::recallMark();
          }
          else
          {
            v145 = (char *)*((_QWORD *)this + 8);
            v144 = *((_QWORD *)this + 9);
            if ((unint64_t)v145 >= v144)
            {
              v164 = (char *)*((_QWORD *)this + 7);
              v165 = (v145 - v164) >> 2;
              v166 = v165 + 1;
              if ((unint64_t)(v165 + 1) >> 62)
LABEL_347:
                sub_242729A44();
              v167 = v144 - (_QWORD)v164;
              if (v167 >> 1 > v166)
                v166 = v167 >> 1;
              if ((unint64_t)v167 >= 0x7FFFFFFFFFFFFFFCLL)
                v168 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v168 = v166;
              if (v168)
              {
                v168 = (unint64_t)sub_2429114B8(v168);
                v164 = (char *)*((_QWORD *)this + 7);
                v145 = (char *)*((_QWORD *)this + 8);
              }
              else
              {
                v169 = 0;
              }
              v188 = (_DWORD *)(v168 + 4 * v165);
              *v188 = 0;
              v143 = v188 + 1;
              while (v145 != v164)
              {
                v189 = *((_DWORD *)v145 - 1);
                v145 -= 4;
                *--v188 = v189;
              }
              *((_QWORD *)this + 7) = v188;
              *((_QWORD *)this + 8) = v143;
              *((_QWORD *)this + 9) = v168 + 4 * v169;
              if (v164)
                operator delete(v164);
            }
            else
            {
              *(_DWORD *)v145 = 0;
              v143 = v145 + 4;
            }
            *((_QWORD *)this + 8) = v143;
            v190 = *((_QWORD *)a2 + 1);
            v191 = *((_QWORD *)a2 + 2);
            v192 = *(_QWORD *)a2;
            v193 = 0;
            v194 = 0;
            if (v190 > 0xFFFFFFFFFFFFFFF5 || v190 + 10 > v191)
            {
              v185 = 0;
              if (v191 <= v190)
                v191 = *((_QWORD *)a2 + 1);
              while (v191 != v190)
              {
                v196 = v190 + 1;
                v197 = *(_BYTE *)(v192 + v190);
                *((_QWORD *)a2 + 1) = v196;
                v185 |= (unint64_t)(v197 & 0x7F) << v193;
                if ((v197 & 0x80) == 0)
                {
LABEL_334:
                  if (*((_BYTE *)a2 + 24))
                    LODWORD(v185) = 0;
                  goto LABEL_336;
                }
                v193 += 7;
                v190 = v196;
                v85 = v194++ > 8;
                if (v85)
                {
LABEL_332:
                  LODWORD(v185) = 0;
                  goto LABEL_336;
                }
              }
LABEL_333:
              LODWORD(v185) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v185 = 0;
              while (1)
              {
                v198 = v190 + 1;
                *((_QWORD *)a2 + 1) = v190 + 1;
                v199 = *(_BYTE *)(v192 + v190);
                v185 |= (unint64_t)(v199 & 0x7F) << v193;
                if ((v199 & 0x80) == 0)
                  break;
                v193 += 7;
                v190 = v198;
                v85 = v194++ > 8;
                if (v85)
                  goto LABEL_332;
              }
            }
LABEL_336:
            *(v143 - 1) = v185;
          }
          break;
        case 8u:
          *((_BYTE *)this + 140) |= 0x20u;
          v120 = *((_QWORD *)a2 + 1);
          if (v120 > 0xFFFFFFFFFFFFFFFBLL || v120 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_286;
          *((_DWORD *)this + 33) = *(_DWORD *)(*(_QWORD *)a2 + v120);
          goto LABEL_288;
        case 9u:
          *((_BYTE *)this + 140) |= 8u;
          v121 = *((_QWORD *)a2 + 1);
          if (v121 > 0xFFFFFFFFFFFFFFFBLL || v121 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_286;
          *((_DWORD *)this + 31) = *(_DWORD *)(*(_QWORD *)a2 + v121);
          goto LABEL_288;
        case 0xAu:
          *((_BYTE *)this + 140) |= 0x10u;
          v122 = *((_QWORD *)a2 + 1);
          if (v122 > 0xFFFFFFFFFFFFFFFBLL || v122 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_286;
          *((_DWORD *)this + 32) = *(_DWORD *)(*(_QWORD *)a2 + v122);
          goto LABEL_288;
        case 0xBu:
          *((_BYTE *)this + 140) |= 0x40u;
          v123 = *((_QWORD *)a2 + 1);
          if (v123 > 0xFFFFFFFFFFFFFFFBLL || v123 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_286;
          *((_DWORD *)this + 34) = *(_DWORD *)(*(_QWORD *)a2 + v123);
          goto LABEL_288;
        default:
          goto LABEL_19;
      }
      goto LABEL_337;
    }
    v14 = 0;
    v15 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v11 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_21;
      v14 += 7;
      v2 = v16;
      v85 = v15++ > 8;
    }
    while (!v85);
LABEL_19:
    if ((PB::Reader::skip(a2) & 1) == 0)
      return 0;
LABEL_337:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
}

uint64_t CMMsl::KappaActivityPhone::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v3 = this;
  if ((*(_BYTE *)(this + 140) & 1) != 0)
    this = PB::Writer::writeVarInt(a2);
  v4 = *(float **)(v3 + 8);
  v5 = *(float **)(v3 + 16);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6);
  }
  if ((*(_BYTE *)(v3 + 140) & 4) != 0)
    this = PB::Writer::writeVarInt(a2);
  v7 = *(float **)(v3 + 80);
  v8 = *(float **)(v3 + 88);
  while (v7 != v8)
  {
    v9 = *v7++;
    this = PB::Writer::write(a2, v9);
  }
  if ((*(_BYTE *)(v3 + 140) & 2) != 0)
    this = PB::Writer::writeVarInt(a2);
  v10 = *(_QWORD *)(v3 + 32);
  v11 = *(_QWORD *)(v3 + 40);
  while (v10 != v11)
  {
    v10 += 4;
    this = PB::Writer::writeVarInt(a2);
  }
  v12 = *(_QWORD *)(v3 + 56);
  v13 = *(_QWORD *)(v3 + 64);
  while (v12 != v13)
  {
    v12 += 4;
    this = PB::Writer::writeVarInt(a2);
  }
  v14 = *(_BYTE *)(v3 + 140);
  if ((v14 & 0x20) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 132));
    v14 = *(_BYTE *)(v3 + 140);
    if ((v14 & 8) == 0)
    {
LABEL_21:
      if ((v14 & 0x10) == 0)
        goto LABEL_22;
      goto LABEL_26;
    }
  }
  else if ((*(_BYTE *)(v3 + 140) & 8) == 0)
  {
    goto LABEL_21;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 124));
  v14 = *(_BYTE *)(v3 + 140);
  if ((v14 & 0x10) == 0)
  {
LABEL_22:
    if ((v14 & 0x40) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 136));
  }
LABEL_26:
  this = PB::Writer::write(a2, *(float *)(v3 + 128));
  if ((*(_BYTE *)(v3 + 140) & 0x40) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 136));
  return this;
}

uint64_t CMMsl::KappaActivityPhone::hash_value(CMMsl::KappaActivityPhone *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  float v16;

  if ((*((_BYTE *)this + 140) & 1) != 0)
    v2 = *((_QWORD *)this + 13);
  else
    v2 = 0;
  v3 = PBHashBytes();
  if ((*((_BYTE *)this + 140) & 4) != 0)
    v4 = *((unsigned int *)this + 30);
  else
    v4 = 0;
  v5 = PBHashBytes();
  if ((*((_BYTE *)this + 140) & 2) != 0)
    v6 = *((_QWORD *)this + 14);
  else
    v6 = 0;
  v7 = PBHashBytes();
  v8 = PBHashBytes();
  if ((*((_BYTE *)this + 140) & 0x20) == 0)
  {
    v9 = 0;
    if ((*((_BYTE *)this + 140) & 8) != 0)
      goto LABEL_12;
LABEL_24:
    v11 = 0;
    if ((*((_BYTE *)this + 140) & 0x10) != 0)
      goto LABEL_15;
    goto LABEL_25;
  }
  v16 = *((float *)this + 33);
  v9 = LODWORD(v16);
  if (v16 == 0.0)
    v9 = 0;
  if ((*((_BYTE *)this + 140) & 8) == 0)
    goto LABEL_24;
LABEL_12:
  v10 = *((float *)this + 31);
  v11 = LODWORD(v10);
  if (v10 == 0.0)
    v11 = 0;
  if ((*((_BYTE *)this + 140) & 0x10) != 0)
  {
LABEL_15:
    v12 = *((float *)this + 32);
    v13 = LODWORD(v12);
    if (v12 == 0.0)
      v13 = 0;
    if ((*((_BYTE *)this + 140) & 0x40) != 0)
      goto LABEL_18;
LABEL_26:
    v15 = 0;
    return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v11 ^ v13 ^ v15;
  }
LABEL_25:
  v13 = 0;
  if ((*((_BYTE *)this + 140) & 0x40) == 0)
    goto LABEL_26;
LABEL_18:
  v14 = *((float *)this + 34);
  v15 = LODWORD(v14);
  if (v14 == 0.0)
    v15 = 0;
  return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v11 ^ v13 ^ v15;
}

void CMMsl::KappaActivityWatch::~KappaActivityWatch(CMMsl::KappaActivityWatch *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_25135E710;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::KappaActivityWatch::~KappaActivityWatch(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::KappaActivityWatch *CMMsl::KappaActivityWatch::KappaActivityWatch(CMMsl::KappaActivityWatch *this, const CMMsl::KappaActivityWatch *a2)
{
  _QWORD *v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  __int16 v8;
  int v9;
  int v10;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;

  *(_QWORD *)this = &off_25135E710;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (_QWORD *)((char *)this + 8);
  *((_DWORD *)this + 26) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if ((*((_WORD *)a2 + 52) & 1) != 0)
  {
    v5 = *((_QWORD *)a2 + 7);
    *((_WORD *)this + 52) = 1;
    *((_QWORD *)this + 7) = v5;
  }
  if (this != a2)
    sub_242911380((_QWORD *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
  v6 = *((_WORD *)a2 + 52);
  if ((v6 & 0x100) != 0)
  {
    v12 = *((_DWORD *)a2 + 25);
    *((_WORD *)this + 52) |= 0x100u;
    *((_DWORD *)this + 25) = v12;
    v6 = *((_WORD *)a2 + 52);
    if ((v6 & 0x40) == 0)
    {
LABEL_7:
      if ((v6 & 0x80) == 0)
        goto LABEL_8;
      goto LABEL_21;
    }
  }
  else if ((v6 & 0x40) == 0)
  {
    goto LABEL_7;
  }
  v13 = *((_DWORD *)a2 + 23);
  *((_WORD *)this + 52) |= 0x40u;
  *((_DWORD *)this + 23) = v13;
  v6 = *((_WORD *)a2 + 52);
  if ((v6 & 0x80) == 0)
  {
LABEL_8:
    if ((v6 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  v14 = *((_DWORD *)a2 + 24);
  *((_WORD *)this + 52) |= 0x80u;
  *((_DWORD *)this + 24) = v14;
  v6 = *((_WORD *)a2 + 52);
  if ((v6 & 0x20) == 0)
  {
LABEL_9:
    if ((v6 & 2) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  v15 = *((_DWORD *)a2 + 22);
  *((_WORD *)this + 52) |= 0x20u;
  *((_DWORD *)this + 22) = v15;
  v6 = *((_WORD *)a2 + 52);
  if ((v6 & 2) == 0)
  {
LABEL_10:
    if ((v6 & 4) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_23:
  v16 = *((_QWORD *)a2 + 8);
  *((_WORD *)this + 52) |= 2u;
  *((_QWORD *)this + 8) = v16;
  if ((*((_WORD *)a2 + 52) & 4) != 0)
  {
LABEL_11:
    v7 = *((_QWORD *)a2 + 9);
    *((_WORD *)this + 52) |= 4u;
    *((_QWORD *)this + 9) = v7;
  }
LABEL_12:
  if (this != a2)
    sub_242911380(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  v8 = *((_WORD *)a2 + 52);
  if ((v8 & 0x10) != 0)
  {
    v9 = *((_DWORD *)a2 + 21);
    *((_WORD *)this + 52) |= 0x10u;
    *((_DWORD *)this + 21) = v9;
    v8 = *((_WORD *)a2 + 52);
  }
  if ((v8 & 8) != 0)
  {
    v10 = *((_DWORD *)a2 + 20);
    *((_WORD *)this + 52) |= 8u;
    *((_DWORD *)this + 20) = v10;
  }
  return this;
}

CMMsl *CMMsl::KappaActivityWatch::operator=(CMMsl *a1, const CMMsl::KappaActivityWatch *a2)
{
  CMMsl::KappaActivityWatch *v3;
  _BYTE v5[112];

  if (a1 != a2)
  {
    CMMsl::KappaActivityWatch::KappaActivityWatch((CMMsl::KappaActivityWatch *)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaActivityWatch *)v5, v3);
    CMMsl::KappaActivityWatch::~KappaActivityWatch((CMMsl::KappaActivityWatch *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaActivityWatch *a2, CMMsl::KappaActivityWatch *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  float result;

  v3 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v3;
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  v5 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v5;
  v7 = *((_QWORD *)this + 6);
  v6 = *((_QWORD *)this + 7);
  v8 = *((_QWORD *)a2 + 7);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)this + 7) = v8;
  *((_QWORD *)a2 + 6) = v7;
  *((_QWORD *)a2 + 7) = v6;
  v9 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v9;
  v10 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v10;
  v11 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v11;
  LODWORD(v6) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v6;
  v12 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v12;
  v13 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v13;
  v14 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v14;
  v15 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v15;
  v16 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v16;
  v17 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v17;
  result = *((float *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((float *)a2 + 20) = result;
  return result;
}

uint64_t CMMsl::KappaActivityWatch::KappaActivityWatch(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_25135E710;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  sub_242911330(a1 + 32, (__n128 *)(a2 + 32));
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  return a1;
}

CMMsl *CMMsl::KappaActivityWatch::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::KappaActivityWatch *v3;
  _BYTE v5[112];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaActivityWatch::KappaActivityWatch((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaActivityWatch *)v5, v3);
    CMMsl::KappaActivityWatch::~KappaActivityWatch((CMMsl::KappaActivityWatch *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaActivityWatch::formatText(CMMsl::KappaActivityWatch *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 52);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "sessionGreenFieldPercentage", *((float *)this + 20));
    v5 = *((_WORD *)this + 52);
  }
  if ((v5 & 0x10) != 0)
    PB::TextFormatter::format(a2, "sessionHighRotationPercentage", *((float *)this + 21));
  v6 = *((_QWORD *)this + 1);
  v7 = *((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v6 += 4;
    PB::TextFormatter::format(a2, "sessionMeanPoseAngleXHistogram");
  }
  v8 = *((_WORD *)this + 52);
  if ((v8 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "timestamp");
    v8 = *((_WORD *)this + 52);
    if ((v8 & 0x20) == 0)
    {
LABEL_9:
      if ((v8 & 2) == 0)
        goto LABEL_10;
      goto LABEL_20;
    }
  }
  else if ((v8 & 0x20) == 0)
  {
    goto LABEL_9;
  }
  PB::TextFormatter::format(a2, "triggerTimeInternalDrivingState");
  v8 = *((_WORD *)this + 52);
  if ((v8 & 2) == 0)
  {
LABEL_10:
    if ((v8 & 4) == 0)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "triggerTimeLastHighElevationGainTimestamp");
  v8 = *((_WORD *)this + 52);
  if ((v8 & 4) == 0)
  {
LABEL_11:
    if ((v8 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "triggerTimeLastHighImuDrivingConfidenceTimestamp");
  v8 = *((_WORD *)this + 52);
  if ((v8 & 0x40) == 0)
  {
LABEL_12:
    if ((v8 & 0x80) == 0)
      goto LABEL_13;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "windowAfterArmGreenFieldPercentage", *((float *)this + 23));
  v8 = *((_WORD *)this + 52);
  if ((v8 & 0x80) == 0)
  {
LABEL_13:
    if ((v8 & 0x100) == 0)
      goto LABEL_15;
    goto LABEL_14;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "windowAfterArmHighImuDrivingConfidencePercentage", *((float *)this + 24));
  if ((*((_WORD *)this + 52) & 0x100) != 0)
LABEL_14:
    PB::TextFormatter::format(a2, "windowAfterArmHighRotationPercentage", *((float *)this + 25));
LABEL_15:
  v9 = *((_QWORD *)this + 4);
  v10 = *((_QWORD *)this + 5);
  while (v9 != v10)
  {
    v9 += 4;
    PB::TextFormatter::format(a2, "windowAfterArmMeanPoseAngleXHistogram");
  }
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::KappaActivityWatch::readFrom(CMMsl::KappaActivityWatch *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  char *v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  BOOL v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char v58;
  unsigned int v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  char v74;
  unsigned int v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  _DWORD *v86;
  char *v87;
  int v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  char v93;
  unsigned int v94;
  uint64_t v95;
  unint64_t v96;
  char v97;
  char v98;
  unsigned int v99;
  uint64_t v100;
  unint64_t v101;
  char v102;
  unint64_t v103;
  unint64_t v104;
  char v105;
  unsigned int v106;
  unint64_t v107;
  char v108;
  unint64_t v109;
  char *v110;
  _DWORD *v111;
  char v112;
  unsigned int v113;
  unint64_t v114;
  char v115;
  char v116;
  unsigned int v117;
  unint64_t v118;
  char v119;
  char v120;
  unsigned int v121;
  unint64_t v122;
  char v123;
  unint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  _DWORD *v138;
  int v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  char v143;
  unsigned int v144;
  unint64_t v146;
  char v147;
  uint64_t v148;
  unint64_t v149;
  char v150;
  _DWORD *v151;
  int v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  char v156;
  unsigned int v157;
  unint64_t v159;
  char v160;
  unint64_t v161;
  char v162;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v41 = v10++ > 8;
        if (v41)
          goto LABEL_19;
      }
LABEL_21:
      v18 = v11 & 7;
      if (v18 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_WORD *)this + 52) |= 1u;
          v19 = *((_QWORD *)a2 + 1);
          v20 = *((_QWORD *)a2 + 2);
          v21 = *(_QWORD *)a2;
          if (v19 <= 0xFFFFFFFFFFFFFFF5 && v19 + 10 <= v20)
          {
            v22 = 0;
            v23 = 0;
            v24 = 0;
            do
            {
              v25 = v19 + 1;
              *((_QWORD *)a2 + 1) = v19 + 1;
              v26 = *(_BYTE *)(v21 + v19);
              v24 |= (unint64_t)(v26 & 0x7F) << v22;
              if ((v26 & 0x80) == 0)
                goto LABEL_214;
              v22 += 7;
              v19 = v25;
              v41 = v23++ > 8;
            }
            while (!v41);
LABEL_162:
            v24 = 0;
            goto LABEL_214;
          }
          v105 = 0;
          v106 = 0;
          v24 = 0;
          if (v20 <= v19)
            v20 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v20 == v19)
            {
              v24 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v107 = v19 + 1;
              v108 = *(_BYTE *)(v21 + v19);
              *((_QWORD *)a2 + 1) = v107;
              v24 |= (unint64_t)(v108 & 0x7F) << v105;
              if (v108 < 0)
              {
                v105 += 7;
                v19 = v107;
                v41 = v106++ > 8;
                if (v41)
                  goto LABEL_162;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v24 = 0;
            }
            break;
          }
LABEL_214:
          *((_QWORD *)this + 7) = v24;
          goto LABEL_272;
        case 2u:
          if (v18 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            if (*((_QWORD *)a2 + 1) < *((_QWORD *)a2 + 2) && !*((_BYTE *)a2 + 24))
            {
              v27 = (char *)*((_QWORD *)this + 5);
              do
              {
                v28 = *((_QWORD *)this + 6);
                if ((unint64_t)v27 >= v28)
                {
                  v29 = (char *)*((_QWORD *)this + 4);
                  v30 = (v27 - v29) >> 2;
                  v31 = v30 + 1;
                  if ((unint64_t)(v30 + 1) >> 62)
                    goto LABEL_281;
                  v32 = v28 - (_QWORD)v29;
                  if (v32 >> 1 > v31)
                    v31 = v32 >> 1;
                  if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
                    v33 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v33 = v31;
                  if (v33)
                  {
                    v33 = (unint64_t)sub_2429114B8(v33);
                    v29 = (char *)*((_QWORD *)this + 4);
                    v27 = (char *)*((_QWORD *)this + 5);
                  }
                  else
                  {
                    v34 = 0;
                  }
                  v35 = (_DWORD *)(v33 + 4 * v30);
                  *v35 = 0;
                  v36 = (char *)(v35 + 1);
                  while (v27 != v29)
                  {
                    v37 = *((_DWORD *)v27 - 1);
                    v27 -= 4;
                    *--v35 = v37;
                  }
                  *((_QWORD *)this + 4) = v35;
                  *((_QWORD *)this + 5) = v36;
                  *((_QWORD *)this + 6) = v33 + 4 * v34;
                  if (v29)
                    operator delete(v29);
                  v27 = v36;
                }
                else
                {
                  *(_DWORD *)v27 = 0;
                  v27 += 4;
                }
                *((_QWORD *)this + 5) = v27;
                v39 = *((_QWORD *)a2 + 1);
                v38 = *((_QWORD *)a2 + 2);
                v40 = *(_QWORD *)a2;
                v41 = v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v38;
                if (v41)
                {
                  v42 = 0;
                  v43 = 0;
                  v49 = 0;
                  if (v38 <= v39)
                    v44 = *((_QWORD *)a2 + 1);
                  else
                    v44 = *((_QWORD *)a2 + 2);
                  while (1)
                  {
                    if (v44 == v39)
                      goto LABEL_188;
                    v45 = v39++;
                    v46 = *(_BYTE *)(v40 + v45);
                    *((_QWORD *)a2 + 1) = v39;
                    v49 |= (unint64_t)(v46 & 0x7F) << v42;
                    if ((v46 & 0x80) == 0)
                      break;
                    v42 += 7;
                    v41 = v43++ > 8;
                    if (v41)
                    {
                      LODWORD(v49) = 0;
                      goto LABEL_71;
                    }
                  }
                  if (*((_BYTE *)a2 + 24))
                    LODWORD(v49) = 0;
LABEL_71:
                  v50 = v45 + 1;
                }
                else
                {
                  v47 = 0;
                  v48 = 0;
                  v49 = 0;
                  while (1)
                  {
                    v50 = v39 + 1;
                    *((_QWORD *)a2 + 1) = v39 + 1;
                    v51 = *(_BYTE *)(v40 + v39);
                    v49 |= (unint64_t)(v51 & 0x7F) << v47;
                    if ((v51 & 0x80) == 0)
                      break;
                    v47 += 7;
                    v39 = v50;
                    v41 = v48++ > 8;
                    if (v41)
                    {
                      LODWORD(v49) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v27 - 1) = v49;
              }
              while (v50 < v38 && !*((_BYTE *)a2 + 24));
            }
            goto LABEL_189;
          }
          v110 = (char *)*((_QWORD *)this + 5);
          v109 = *((_QWORD *)this + 6);
          if ((unint64_t)v110 >= v109)
          {
            v126 = (char *)*((_QWORD *)this + 4);
            v127 = (v110 - v126) >> 2;
            v128 = v127 + 1;
            if ((unint64_t)(v127 + 1) >> 62)
              goto LABEL_281;
            v129 = v109 - (_QWORD)v126;
            if (v129 >> 1 > v128)
              v128 = v129 >> 1;
            if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFFCLL)
              v130 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v130 = v128;
            if (v130)
            {
              v130 = (unint64_t)sub_2429114B8(v130);
              v126 = (char *)*((_QWORD *)this + 4);
              v110 = (char *)*((_QWORD *)this + 5);
            }
            else
            {
              v131 = 0;
            }
            v138 = (_DWORD *)(v130 + 4 * v127);
            *v138 = 0;
            v111 = v138 + 1;
            while (v110 != v126)
            {
              v139 = *((_DWORD *)v110 - 1);
              v110 -= 4;
              *--v138 = v139;
            }
            *((_QWORD *)this + 4) = v138;
            *((_QWORD *)this + 5) = v111;
            *((_QWORD *)this + 6) = v130 + 4 * v131;
            if (v126)
              operator delete(v126);
          }
          else
          {
            *(_DWORD *)v110 = 0;
            v111 = v110 + 4;
          }
          *((_QWORD *)this + 5) = v111;
          v140 = *((_QWORD *)a2 + 1);
          v141 = *((_QWORD *)a2 + 2);
          v142 = *(_QWORD *)a2;
          v143 = 0;
          v144 = 0;
          if (v140 <= 0xFFFFFFFFFFFFFFF5 && v140 + 10 <= v141)
          {
            v148 = 0;
            while (1)
            {
              v149 = v140 + 1;
              *((_QWORD *)a2 + 1) = v140 + 1;
              v150 = *(_BYTE *)(v142 + v140);
              v148 |= (unint64_t)(v150 & 0x7F) << v143;
              if ((v150 & 0x80) == 0)
                goto LABEL_271;
              v143 += 7;
              v140 = v149;
              v41 = v144++ > 8;
              if (v41)
                goto LABEL_267;
            }
          }
          v148 = 0;
          if (v141 <= v140)
            v141 = *((_QWORD *)a2 + 1);
          while (v141 != v140)
          {
            v146 = v140 + 1;
            v147 = *(_BYTE *)(v142 + v140);
            *((_QWORD *)a2 + 1) = v146;
            v148 |= (unint64_t)(v147 & 0x7F) << v143;
            if ((v147 & 0x80) == 0)
              goto LABEL_269;
            v143 += 7;
            v140 = v146;
            v41 = v144++ > 8;
            if (v41)
              goto LABEL_267;
          }
          goto LABEL_268;
        case 3u:
          *((_WORD *)this + 52) |= 0x100u;
          v52 = *((_QWORD *)a2 + 1);
          if (v52 > 0xFFFFFFFFFFFFFFFBLL || v52 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_155;
          *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v52);
          goto LABEL_191;
        case 4u:
          *((_WORD *)this + 52) |= 0x40u;
          v53 = *((_QWORD *)a2 + 1);
          if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_155;
          *((_DWORD *)this + 23) = *(_DWORD *)(*(_QWORD *)a2 + v53);
          goto LABEL_191;
        case 5u:
          *((_WORD *)this + 52) |= 0x80u;
          v54 = *((_QWORD *)a2 + 1);
          if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_155;
          *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v54);
          goto LABEL_191;
        case 6u:
          *((_WORD *)this + 52) |= 0x20u;
          v55 = *((_QWORD *)a2 + 1);
          v56 = *((_QWORD *)a2 + 2);
          v57 = *(_QWORD *)a2;
          if (v55 <= 0xFFFFFFFFFFFFFFF5 && v55 + 10 <= v56)
          {
            v58 = 0;
            v59 = 0;
            v60 = 0;
            do
            {
              v61 = v55 + 1;
              *((_QWORD *)a2 + 1) = v55 + 1;
              v62 = *(_BYTE *)(v57 + v55);
              v60 |= (unint64_t)(v62 & 0x7F) << v58;
              if ((v62 & 0x80) == 0)
                goto LABEL_217;
              v58 += 7;
              v55 = v61;
              v41 = v59++ > 8;
            }
            while (!v41);
LABEL_171:
            LODWORD(v60) = 0;
            goto LABEL_217;
          }
          v112 = 0;
          v113 = 0;
          v60 = 0;
          if (v56 <= v55)
            v56 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v56 == v55)
            {
              LODWORD(v60) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v114 = v55 + 1;
              v115 = *(_BYTE *)(v57 + v55);
              *((_QWORD *)a2 + 1) = v114;
              v60 |= (unint64_t)(v115 & 0x7F) << v112;
              if (v115 < 0)
              {
                v112 += 7;
                v55 = v114;
                v41 = v113++ > 8;
                if (v41)
                  goto LABEL_171;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v60) = 0;
            }
            break;
          }
LABEL_217:
          *((_DWORD *)this + 22) = v60;
          goto LABEL_272;
        case 7u:
          *((_WORD *)this + 52) |= 2u;
          v63 = *((_QWORD *)a2 + 1);
          v64 = *((_QWORD *)a2 + 2);
          v65 = *(_QWORD *)a2;
          if (v63 <= 0xFFFFFFFFFFFFFFF5 && v63 + 10 <= v64)
          {
            v66 = 0;
            v67 = 0;
            v68 = 0;
            do
            {
              v69 = v63 + 1;
              *((_QWORD *)a2 + 1) = v63 + 1;
              v70 = *(_BYTE *)(v65 + v63);
              v68 |= (unint64_t)(v70 & 0x7F) << v66;
              if ((v70 & 0x80) == 0)
                goto LABEL_220;
              v66 += 7;
              v63 = v69;
              v41 = v67++ > 8;
            }
            while (!v41);
LABEL_178:
            v68 = 0;
            goto LABEL_220;
          }
          v116 = 0;
          v117 = 0;
          v68 = 0;
          if (v64 <= v63)
            v64 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v64 == v63)
            {
              v68 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v118 = v63 + 1;
              v119 = *(_BYTE *)(v65 + v63);
              *((_QWORD *)a2 + 1) = v118;
              v68 |= (unint64_t)(v119 & 0x7F) << v116;
              if (v119 < 0)
              {
                v116 += 7;
                v63 = v118;
                v41 = v117++ > 8;
                if (v41)
                  goto LABEL_178;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v68 = 0;
            }
            break;
          }
LABEL_220:
          *((_QWORD *)this + 8) = v68;
          goto LABEL_272;
        case 8u:
          *((_WORD *)this + 52) |= 4u;
          v71 = *((_QWORD *)a2 + 1);
          v72 = *((_QWORD *)a2 + 2);
          v73 = *(_QWORD *)a2;
          if (v71 <= 0xFFFFFFFFFFFFFFF5 && v71 + 10 <= v72)
          {
            v74 = 0;
            v75 = 0;
            v76 = 0;
            do
            {
              v77 = v71 + 1;
              *((_QWORD *)a2 + 1) = v71 + 1;
              v78 = *(_BYTE *)(v73 + v71);
              v76 |= (unint64_t)(v78 & 0x7F) << v74;
              if ((v78 & 0x80) == 0)
                goto LABEL_223;
              v74 += 7;
              v71 = v77;
              v41 = v75++ > 8;
            }
            while (!v41);
LABEL_185:
            v76 = 0;
            goto LABEL_223;
          }
          v120 = 0;
          v121 = 0;
          v76 = 0;
          if (v72 <= v71)
            v72 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v72 == v71)
            {
              v76 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v122 = v71 + 1;
              v123 = *(_BYTE *)(v73 + v71);
              *((_QWORD *)a2 + 1) = v122;
              v76 |= (unint64_t)(v123 & 0x7F) << v120;
              if (v123 < 0)
              {
                v120 += 7;
                v71 = v122;
                v41 = v121++ > 8;
                if (v41)
                  goto LABEL_185;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v76 = 0;
            }
            break;
          }
LABEL_223:
          *((_QWORD *)this + 9) = v76;
          goto LABEL_272;
        case 9u:
          if (v18 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            if (*((_QWORD *)a2 + 1) < *((_QWORD *)a2 + 2) && !*((_BYTE *)a2 + 24))
            {
              v27 = (char *)*((_QWORD *)this + 2);
              do
              {
                v79 = *((_QWORD *)this + 3);
                if ((unint64_t)v27 >= v79)
                {
                  v80 = (char *)*((_QWORD *)this + 1);
                  v81 = (v27 - v80) >> 2;
                  v82 = v81 + 1;
                  if ((unint64_t)(v81 + 1) >> 62)
                    goto LABEL_281;
                  v83 = v79 - (_QWORD)v80;
                  if (v83 >> 1 > v82)
                    v82 = v83 >> 1;
                  if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFFCLL)
                    v84 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v84 = v82;
                  if (v84)
                  {
                    v84 = (unint64_t)sub_2429114B8(v84);
                    v80 = (char *)*((_QWORD *)this + 1);
                    v27 = (char *)*((_QWORD *)this + 2);
                  }
                  else
                  {
                    v85 = 0;
                  }
                  v86 = (_DWORD *)(v84 + 4 * v81);
                  *v86 = 0;
                  v87 = (char *)(v86 + 1);
                  while (v27 != v80)
                  {
                    v88 = *((_DWORD *)v27 - 1);
                    v27 -= 4;
                    *--v86 = v88;
                  }
                  *((_QWORD *)this + 1) = v86;
                  *((_QWORD *)this + 2) = v87;
                  *((_QWORD *)this + 3) = v84 + 4 * v85;
                  if (v80)
                    operator delete(v80);
                  v27 = v87;
                }
                else
                {
                  *(_DWORD *)v27 = 0;
                  v27 += 4;
                }
                *((_QWORD *)this + 2) = v27;
                v90 = *((_QWORD *)a2 + 1);
                v89 = *((_QWORD *)a2 + 2);
                v91 = *(_QWORD *)a2;
                if (v90 <= 0xFFFFFFFFFFFFFFF5 && v90 + 10 <= v89)
                {
                  v98 = 0;
                  v99 = 0;
                  v100 = 0;
                  while (1)
                  {
                    v101 = v90 + 1;
                    *((_QWORD *)a2 + 1) = v90 + 1;
                    v102 = *(_BYTE *)(v91 + v90);
                    v100 |= (unint64_t)(v102 & 0x7F) << v98;
                    if ((v102 & 0x80) == 0)
                      goto LABEL_147;
                    v98 += 7;
                    v90 = v101;
                    v41 = v99++ > 8;
                    if (v41)
                    {
                      LODWORD(v100) = 0;
                      goto LABEL_147;
                    }
                  }
                }
                v93 = 0;
                v94 = 0;
                v100 = 0;
                if (v89 <= v90)
                  v95 = *((_QWORD *)a2 + 1);
                else
                  v95 = *((_QWORD *)a2 + 2);
                while (1)
                {
                  if (v95 == v90)
                  {
LABEL_188:
                    *((_BYTE *)a2 + 24) = 1;
                    *((_DWORD *)v27 - 1) = 0;
                    goto LABEL_189;
                  }
                  v96 = v90++;
                  v97 = *(_BYTE *)(v91 + v96);
                  *((_QWORD *)a2 + 1) = v90;
                  v100 |= (unint64_t)(v97 & 0x7F) << v93;
                  if ((v97 & 0x80) == 0)
                    break;
                  v93 += 7;
                  v41 = v94++ > 8;
                  if (v41)
                  {
                    LODWORD(v100) = 0;
                    goto LABEL_146;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v100) = 0;
LABEL_146:
                v101 = v96 + 1;
LABEL_147:
                *((_DWORD *)v27 - 1) = v100;
              }
              while (v101 < v89 && !*((_BYTE *)a2 + 24));
            }
LABEL_189:
            PB::Reader::recallMark();
          }
          else
          {
            v125 = (char *)*((_QWORD *)this + 2);
            v124 = *((_QWORD *)this + 3);
            if ((unint64_t)v125 >= v124)
            {
              v132 = (char *)*((_QWORD *)this + 1);
              v133 = (v125 - v132) >> 2;
              v134 = v133 + 1;
              if ((unint64_t)(v133 + 1) >> 62)
LABEL_281:
                sub_242729A44();
              v135 = v124 - (_QWORD)v132;
              if (v135 >> 1 > v134)
                v134 = v135 >> 1;
              if ((unint64_t)v135 >= 0x7FFFFFFFFFFFFFFCLL)
                v136 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v136 = v134;
              if (v136)
              {
                v136 = (unint64_t)sub_2429114B8(v136);
                v132 = (char *)*((_QWORD *)this + 1);
                v125 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v137 = 0;
              }
              v151 = (_DWORD *)(v136 + 4 * v133);
              *v151 = 0;
              v111 = v151 + 1;
              while (v125 != v132)
              {
                v152 = *((_DWORD *)v125 - 1);
                v125 -= 4;
                *--v151 = v152;
              }
              *((_QWORD *)this + 1) = v151;
              *((_QWORD *)this + 2) = v111;
              *((_QWORD *)this + 3) = v136 + 4 * v137;
              if (v132)
                operator delete(v132);
            }
            else
            {
              *(_DWORD *)v125 = 0;
              v111 = v125 + 4;
            }
            *((_QWORD *)this + 2) = v111;
            v153 = *((_QWORD *)a2 + 1);
            v154 = *((_QWORD *)a2 + 2);
            v155 = *(_QWORD *)a2;
            v156 = 0;
            v157 = 0;
            if (v153 > 0xFFFFFFFFFFFFFFF5 || v153 + 10 > v154)
            {
              v148 = 0;
              if (v154 <= v153)
                v154 = *((_QWORD *)a2 + 1);
              while (v154 != v153)
              {
                v159 = v153 + 1;
                v160 = *(_BYTE *)(v155 + v153);
                *((_QWORD *)a2 + 1) = v159;
                v148 |= (unint64_t)(v160 & 0x7F) << v156;
                if ((v160 & 0x80) == 0)
                {
LABEL_269:
                  if (*((_BYTE *)a2 + 24))
                    LODWORD(v148) = 0;
                  goto LABEL_271;
                }
                v156 += 7;
                v153 = v159;
                v41 = v157++ > 8;
                if (v41)
                {
LABEL_267:
                  LODWORD(v148) = 0;
                  goto LABEL_271;
                }
              }
LABEL_268:
              LODWORD(v148) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v148 = 0;
              while (1)
              {
                v161 = v153 + 1;
                *((_QWORD *)a2 + 1) = v153 + 1;
                v162 = *(_BYTE *)(v155 + v153);
                v148 |= (unint64_t)(v162 & 0x7F) << v156;
                if ((v162 & 0x80) == 0)
                  break;
                v156 += 7;
                v153 = v161;
                v41 = v157++ > 8;
                if (v41)
                  goto LABEL_267;
              }
            }
LABEL_271:
            *(v111 - 1) = v148;
          }
          break;
        case 0xAu:
          *((_WORD *)this + 52) |= 0x10u;
          v103 = *((_QWORD *)a2 + 1);
          if (v103 > 0xFFFFFFFFFFFFFFFBLL || v103 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_155;
          *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v103);
          goto LABEL_191;
        case 0xBu:
          *((_WORD *)this + 52) |= 8u;
          v104 = *((_QWORD *)a2 + 1);
          if (v104 <= 0xFFFFFFFFFFFFFFFBLL && v104 + 4 <= *((_QWORD *)a2 + 2))
          {
            *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v104);
LABEL_191:
            *((_QWORD *)a2 + 1) += 4;
          }
          else
          {
LABEL_155:
            *((_BYTE *)a2 + 24) = 1;
          }
          goto LABEL_272;
        default:
          goto LABEL_19;
      }
      goto LABEL_272;
    }
    v14 = 0;
    v15 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v11 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_21;
      v14 += 7;
      v2 = v16;
      v41 = v15++ > 8;
    }
    while (!v41);
LABEL_19:
    if ((PB::Reader::skip(a2) & 1) == 0)
      return 0;
LABEL_272:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
}

uint64_t CMMsl::KappaActivityWatch::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;

  v3 = this;
  if ((*(_WORD *)(this + 104) & 1) != 0)
    this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 32);
  v5 = *(_QWORD *)(v3 + 40);
  while (v4 != v5)
  {
    v4 += 4;
    this = PB::Writer::writeVarInt(a2);
  }
  v6 = *(_WORD *)(v3 + 104);
  if ((v6 & 0x100) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 100));
    v6 = *(_WORD *)(v3 + 104);
    if ((v6 & 0x40) == 0)
    {
LABEL_8:
      if ((v6 & 0x80) == 0)
        goto LABEL_9;
      goto LABEL_22;
    }
  }
  else if ((v6 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 92));
  v6 = *(_WORD *)(v3 + 104);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 96));
  v6 = *(_WORD *)(v3 + 104);
  if ((v6 & 0x20) == 0)
  {
LABEL_10:
    if ((v6 & 2) == 0)
      goto LABEL_11;
LABEL_24:
    this = PB::Writer::writeVarInt(a2);
    if ((*(_WORD *)(v3 + 104) & 4) == 0)
      goto LABEL_13;
    goto LABEL_12;
  }
LABEL_23:
  this = PB::Writer::writeVarInt(a2);
  v6 = *(_WORD *)(v3 + 104);
  if ((v6 & 2) != 0)
    goto LABEL_24;
LABEL_11:
  if ((v6 & 4) != 0)
LABEL_12:
    this = PB::Writer::writeVarInt(a2);
LABEL_13:
  v7 = *(_QWORD *)(v3 + 8);
  v8 = *(_QWORD *)(v3 + 16);
  while (v7 != v8)
  {
    v7 += 4;
    this = PB::Writer::writeVarInt(a2);
  }
  v9 = *(_WORD *)(v3 + 104);
  if ((v9 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 84));
    v9 = *(_WORD *)(v3 + 104);
  }
  if ((v9 & 8) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 80));
  return this;
}

uint64_t CMMsl::KappaActivityWatch::hash_value(CMMsl::KappaActivityWatch *this)
{
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;

  if ((*((_WORD *)this + 52) & 1) != 0)
    v2 = *((_QWORD *)this + 7);
  else
    v2 = 0;
  v3 = PBHashBytes();
  v4 = *((_WORD *)this + 52);
  if ((v4 & 0x100) == 0)
  {
    v5 = 0;
    if ((v4 & 0x40) != 0)
      goto LABEL_6;
LABEL_21:
    v7 = 0;
    if ((v4 & 0x80) != 0)
      goto LABEL_10;
LABEL_22:
    v9 = 0;
    if ((v4 & 0x20) != 0)
      goto LABEL_14;
    goto LABEL_23;
  }
  v13 = *((float *)this + 25);
  if (v13 == 0.0)
    v5 = 0;
  else
    v5 = LODWORD(v13);
  if ((v4 & 0x40) == 0)
    goto LABEL_21;
LABEL_6:
  v6 = *((float *)this + 23);
  if (v6 == 0.0)
    v7 = 0;
  else
    v7 = LODWORD(v6);
  if ((v4 & 0x80) == 0)
    goto LABEL_22;
LABEL_10:
  v8 = *((float *)this + 24);
  if (v8 == 0.0)
    v9 = 0;
  else
    v9 = LODWORD(v8);
  if ((v4 & 0x20) != 0)
  {
LABEL_14:
    v10 = *((unsigned int *)this + 22);
    if ((v4 & 2) != 0)
      goto LABEL_15;
LABEL_24:
    v11 = 0;
    if ((v4 & 4) != 0)
      goto LABEL_16;
    goto LABEL_25;
  }
LABEL_23:
  v10 = 0;
  if ((v4 & 2) == 0)
    goto LABEL_24;
LABEL_15:
  v11 = *((_QWORD *)this + 8);
  if ((v4 & 4) != 0)
  {
LABEL_16:
    v12 = *((_QWORD *)this + 9);
    goto LABEL_26;
  }
LABEL_25:
  v12 = 0;
LABEL_26:
  v14 = PBHashBytes();
  v15 = *((_WORD *)this + 52);
  if ((v15 & 0x10) != 0)
  {
    v19 = *((float *)this + 21);
    v16 = LODWORD(v19);
    if (v19 == 0.0)
      v16 = 0;
    if ((v15 & 8) != 0)
      goto LABEL_28;
LABEL_34:
    v18 = 0;
    return v3 ^ v2 ^ v5 ^ v7 ^ v9 ^ v10 ^ v11 ^ v12 ^ v14 ^ v16 ^ v18;
  }
  v16 = 0;
  if ((v15 & 8) == 0)
    goto LABEL_34;
LABEL_28:
  v17 = *((float *)this + 20);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  return v3 ^ v2 ^ v5 ^ v7 ^ v9 ^ v10 ^ v11 ^ v12 ^ v14 ^ v16 ^ v18;
}

void CMMsl::KappaAirbagResult::~KappaAirbagResult(CMMsl::KappaAirbagResult *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::KappaAirbagResult::KappaAirbagResult(uint64_t this, const CMMsl::KappaAirbagResult *a2)
{
  __int16 v2;
  __int16 v3;
  char v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  *(_QWORD *)this = &off_25135E748;
  *(_DWORD *)(this + 68) = 0;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x400) != 0)
  {
    v4 = *((_BYTE *)a2 + 64);
    v3 = 1024;
    *(_WORD *)(this + 68) = 1024;
    *(_BYTE *)(this + 64) = v4;
    v2 = *((_WORD *)a2 + 34);
    if ((v2 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 13);
    v3 |= 0x80u;
    *(_WORD *)(this + 68) = v3;
    *(_DWORD *)(this + 52) = v5;
    v2 = *((_WORD *)a2 + 34);
  }
LABEL_6:
  if ((v2 & 0x40) != 0)
  {
    v6 = *((_DWORD *)a2 + 12);
    v3 |= 0x40u;
    *(_WORD *)(this + 68) = v3;
    *(_DWORD *)(this + 48) = v6;
    v2 = *((_WORD *)a2 + 34);
    if ((v2 & 0x200) == 0)
    {
LABEL_8:
      if ((v2 & 0x100) == 0)
        goto LABEL_9;
      goto LABEL_18;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 15);
  v3 |= 0x200u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 60) = v7;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x100) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  v8 = *((_DWORD *)a2 + 14);
  v3 |= 0x100u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 56) = v8;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  v9 = *((_QWORD *)a2 + 3);
  v3 |= 4u;
  *(_WORD *)(this + 68) = v3;
  *(_QWORD *)(this + 24) = v9;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x10) == 0)
  {
LABEL_11:
    if ((v2 & 1) == 0)
      goto LABEL_12;
    goto LABEL_21;
  }
LABEL_20:
  v10 = *((_DWORD *)a2 + 10);
  v3 |= 0x10u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 40) = v10;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 1) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  v11 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 68) = v3;
  *(_QWORD *)(this + 8) = v11;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 0x20) == 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  v12 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_WORD *)(this + 68) = v3;
  *(_QWORD *)(this + 16) = v12;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x20) == 0)
  {
LABEL_14:
    if ((v2 & 8) == 0)
      return this;
LABEL_24:
    v14 = *((_QWORD *)a2 + 4);
    *(_WORD *)(this + 68) = v3 | 8;
    *(_QWORD *)(this + 32) = v14;
    return this;
  }
LABEL_23:
  v13 = *((_DWORD *)a2 + 11);
  v3 |= 0x20u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 44) = v13;
  if ((*((_WORD *)a2 + 34) & 8) != 0)
    goto LABEL_24;
  return this;
}

CMMsl *CMMsl::KappaAirbagResult::operator=(CMMsl *a1, const CMMsl::KappaAirbagResult *a2)
{
  CMMsl::KappaAirbagResult *v3;
  _BYTE v5[72];

  if (a1 != a2)
  {
    CMMsl::KappaAirbagResult::KappaAirbagResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaAirbagResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaAirbagResult *a2, CMMsl::KappaAirbagResult *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float result;
  uint64_t v12;

  v3 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 64);
  *((_BYTE *)this + 64) = *((_BYTE *)a2 + 64);
  *((_BYTE *)a2 + 64) = v3;
  v4 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  v5 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v5;
  v6 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v6;
  v7 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v7;
  v8 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v8;
  LODWORD(v8) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v8;
  v9 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v9;
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v10;
  result = *((float *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((float *)a2 + 11) = result;
  v12 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v12;
  return result;
}

float CMMsl::KappaAirbagResult::KappaAirbagResult(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135E748;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a2 + 68) = 0;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(float *)(a2 + 44);
  *(float *)(a1 + 44) = result;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

CMMsl *CMMsl::KappaAirbagResult::operator=(CMMsl *this, uint64_t a2, CMMsl::KappaAirbagResult *a3)
{
  __int128 v4;
  __int128 v5;
  void (**v7)(CMMsl::KappaAirbagResult *__hidden);
  __int128 v8;
  __int128 v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  int v15;

  if (this != (CMMsl *)a2)
  {
    v7 = &off_25135E748;
    v15 = *(_DWORD *)(a2 + 68);
    *(_DWORD *)(a2 + 68) = 0;
    v14 = *(_BYTE *)(a2 + 64);
    v12 = *(_DWORD *)(a2 + 52);
    v13 = *(_QWORD *)(a2 + 56);
    v10 = *(_DWORD *)(a2 + 40);
    v4 = *(_OWORD *)(a2 + 8);
    v11 = *(_QWORD *)(a2 + 44);
    v5 = *(_OWORD *)(a2 + 24);
    v8 = v4;
    v9 = v5;
    CMMsl::swap(this, (CMMsl::KappaAirbagResult *)&v7, a3);
    PB::Base::~Base((PB::Base *)&v7);
  }
  return this;
}

uint64_t CMMsl::KappaAirbagResult::formatText(CMMsl::KappaAirbagResult *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "diffPeakTimestampTrigger");
    v5 = *((_WORD *)this + 34);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "epochFirstTimestamp");
  v5 = *((_WORD *)this + 34);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "epochLastTimestamp");
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x400) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "maxAccelNormInWindow", *((float *)this + 11));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x400) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "pass");
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 4) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "peakPressure", *((float *)this + 12));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 4) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "peakTimestamp");
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "pressureODR");
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 8) == 0)
      goto LABEL_11;
LABEL_23:
    PB::TextFormatter::format(a2, "timestamp");
    if ((*((_WORD *)this + 34) & 0x200) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "riseTime", *((float *)this + 14));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 8) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v5 & 0x200) != 0)
LABEL_12:
    PB::TextFormatter::format(a2, "width", *((float *)this + 15));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaAirbagResult::readFrom(CMMsl::KappaAirbagResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  unint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  unint64_t v77;
  char v78;
  char v79;
  unsigned int v80;
  unint64_t v81;
  char v82;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_26;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_21;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_26:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 34) |= 0x400u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v22 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v21 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v22 = v21 != 0;
        }
        *((_BYTE *)this + 64) = v22;
        break;
      case 2u:
        *((_WORD *)this + 34) |= 0x80u;
        v23 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v24 = *(_QWORD *)a2;
        if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
        {
          v59 = 0;
          v60 = 0;
          v27 = 0;
          if (v2 <= v23)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v23)
            {
              LODWORD(v27) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_134;
            }
            v61 = v23++;
            v62 = *(_BYTE *)(v24 + v61);
            *((_QWORD *)a2 + 1) = v23;
            v27 |= (unint64_t)(v62 & 0x7F) << v59;
            if ((v62 & 0x80) == 0)
              break;
            v59 += 7;
            v14 = v60++ > 8;
            if (v14)
            {
              LODWORD(v27) = 0;
LABEL_133:
              v2 = v61 + 1;
              goto LABEL_134;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v27) = 0;
          goto LABEL_133;
        }
        v25 = 0;
        v26 = 0;
        v27 = 0;
        do
        {
          v2 = v23 + 1;
          *((_QWORD *)a2 + 1) = v23 + 1;
          v28 = *(_BYTE *)(v24 + v23);
          v27 |= (unint64_t)(v28 & 0x7F) << v25;
          if ((v28 & 0x80) == 0)
            goto LABEL_134;
          v25 += 7;
          v23 = v2;
          v14 = v26++ > 8;
        }
        while (!v14);
        LODWORD(v27) = 0;
LABEL_134:
        *((_DWORD *)this + 13) = v27;
        break;
      case 3u:
        *((_WORD *)this + 34) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_76;
        *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_129;
      case 4u:
        *((_WORD *)this + 34) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_76;
        *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_129;
      case 5u:
        *((_WORD *)this + 34) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_76;
        *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_129;
      case 6u:
        *((_WORD *)this + 34) |= 4u;
        v29 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v30 = *(_QWORD *)a2;
        if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
        {
          v63 = 0;
          v64 = 0;
          v33 = 0;
          if (v2 <= v29)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v29)
            {
              v33 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_139;
            }
            v65 = v29++;
            v66 = *(_BYTE *)(v30 + v65);
            *((_QWORD *)a2 + 1) = v29;
            v33 |= (unint64_t)(v66 & 0x7F) << v63;
            if ((v66 & 0x80) == 0)
              break;
            v63 += 7;
            v14 = v64++ > 8;
            if (v14)
            {
              v33 = 0;
LABEL_138:
              v2 = v65 + 1;
              goto LABEL_139;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v33 = 0;
          goto LABEL_138;
        }
        v31 = 0;
        v32 = 0;
        v33 = 0;
        do
        {
          v2 = v29 + 1;
          *((_QWORD *)a2 + 1) = v29 + 1;
          v34 = *(_BYTE *)(v30 + v29);
          v33 |= (unint64_t)(v34 & 0x7F) << v31;
          if ((v34 & 0x80) == 0)
            goto LABEL_139;
          v31 += 7;
          v29 = v2;
          v14 = v32++ > 8;
        }
        while (!v14);
        v33 = 0;
LABEL_139:
        *((_QWORD *)this + 3) = v33;
        break;
      case 7u:
        *((_WORD *)this + 34) |= 0x10u;
        v35 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v36 = *(_QWORD *)a2;
        if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
        {
          v67 = 0;
          v68 = 0;
          v39 = 0;
          if (v2 <= v35)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v35)
            {
              LODWORD(v39) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_144;
            }
            v69 = v35++;
            v70 = *(_BYTE *)(v36 + v69);
            *((_QWORD *)a2 + 1) = v35;
            v39 |= (unint64_t)(v70 & 0x7F) << v67;
            if ((v70 & 0x80) == 0)
              break;
            v67 += 7;
            v14 = v68++ > 8;
            if (v14)
            {
              LODWORD(v39) = 0;
LABEL_143:
              v2 = v69 + 1;
              goto LABEL_144;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v39) = 0;
          goto LABEL_143;
        }
        v37 = 0;
        v38 = 0;
        v39 = 0;
        do
        {
          v2 = v35 + 1;
          *((_QWORD *)a2 + 1) = v35 + 1;
          v40 = *(_BYTE *)(v36 + v35);
          v39 |= (unint64_t)(v40 & 0x7F) << v37;
          if ((v40 & 0x80) == 0)
            goto LABEL_144;
          v37 += 7;
          v35 = v2;
          v14 = v38++ > 8;
        }
        while (!v14);
        LODWORD(v39) = 0;
LABEL_144:
        *((_DWORD *)this + 10) = v39;
        break;
      case 8u:
        *((_WORD *)this + 34) |= 1u;
        v41 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v42 = *(_QWORD *)a2;
        if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
        {
          v71 = 0;
          v72 = 0;
          v45 = 0;
          if (v2 <= v41)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v41)
            {
              v45 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_149;
            }
            v73 = v41++;
            v74 = *(_BYTE *)(v42 + v73);
            *((_QWORD *)a2 + 1) = v41;
            v45 |= (unint64_t)(v74 & 0x7F) << v71;
            if ((v74 & 0x80) == 0)
              break;
            v71 += 7;
            v14 = v72++ > 8;
            if (v14)
            {
              v45 = 0;
LABEL_148:
              v2 = v73 + 1;
              goto LABEL_149;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v45 = 0;
          goto LABEL_148;
        }
        v43 = 0;
        v44 = 0;
        v45 = 0;
        do
        {
          v2 = v41 + 1;
          *((_QWORD *)a2 + 1) = v41 + 1;
          v46 = *(_BYTE *)(v42 + v41);
          v45 |= (unint64_t)(v46 & 0x7F) << v43;
          if ((v46 & 0x80) == 0)
            goto LABEL_149;
          v43 += 7;
          v41 = v2;
          v14 = v44++ > 8;
        }
        while (!v14);
        v45 = 0;
LABEL_149:
        *((_QWORD *)this + 1) = v45;
        break;
      case 9u:
        *((_WORD *)this + 34) |= 2u;
        v47 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v48 = *(_QWORD *)a2;
        if (v47 > 0xFFFFFFFFFFFFFFF5 || v47 + 10 > v2)
        {
          v75 = 0;
          v76 = 0;
          v51 = 0;
          if (v2 <= v47)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v47)
            {
              v51 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_154;
            }
            v77 = v47++;
            v78 = *(_BYTE *)(v48 + v77);
            *((_QWORD *)a2 + 1) = v47;
            v51 |= (unint64_t)(v78 & 0x7F) << v75;
            if ((v78 & 0x80) == 0)
              break;
            v75 += 7;
            v14 = v76++ > 8;
            if (v14)
            {
              v51 = 0;
LABEL_153:
              v2 = v77 + 1;
              goto LABEL_154;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v51 = 0;
          goto LABEL_153;
        }
        v49 = 0;
        v50 = 0;
        v51 = 0;
        do
        {
          v2 = v47 + 1;
          *((_QWORD *)a2 + 1) = v47 + 1;
          v52 = *(_BYTE *)(v48 + v47);
          v51 |= (unint64_t)(v52 & 0x7F) << v49;
          if ((v52 & 0x80) == 0)
            goto LABEL_154;
          v49 += 7;
          v47 = v2;
          v14 = v50++ > 8;
        }
        while (!v14);
        v51 = 0;
LABEL_154:
        *((_QWORD *)this + 2) = v51;
        break;
      case 0xAu:
        *((_WORD *)this + 34) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_129:
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_76:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 0xBu:
        *((_WORD *)this + 34) |= 8u;
        v53 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v54 = *(_QWORD *)a2;
        if (v53 > 0xFFFFFFFFFFFFFFF5 || v53 + 10 > v2)
        {
          v79 = 0;
          v80 = 0;
          v57 = 0;
          if (v2 <= v53)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v53)
            {
              v57 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_159;
            }
            v81 = v53++;
            v82 = *(_BYTE *)(v54 + v81);
            *((_QWORD *)a2 + 1) = v53;
            v57 |= (unint64_t)(v82 & 0x7F) << v79;
            if ((v82 & 0x80) == 0)
              break;
            v79 += 7;
            v14 = v80++ > 8;
            if (v14)
            {
              v57 = 0;
LABEL_158:
              v2 = v81 + 1;
              goto LABEL_159;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v57 = 0;
          goto LABEL_158;
        }
        v55 = 0;
        v56 = 0;
        v57 = 0;
        do
        {
          v2 = v53 + 1;
          *((_QWORD *)a2 + 1) = v53 + 1;
          v58 = *(_BYTE *)(v54 + v53);
          v57 |= (unint64_t)(v58 & 0x7F) << v55;
          if ((v58 & 0x80) == 0)
            goto LABEL_159;
          v55 += 7;
          v53 = v2;
          v14 = v56++ > 8;
        }
        while (!v14);
        v57 = 0;
LABEL_159:
        *((_QWORD *)this + 4) = v57;
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::KappaAirbagResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 68);
  if ((v4 & 0x400) != 0)
  {
    this = PB::Writer::write(a2);
    v4 = *(_WORD *)(v3 + 68);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x200) == 0)
  {
LABEL_5:
    if ((v4 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(float *)(v3 + 60));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x100) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x10) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 0x20) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x20) == 0)
  {
LABEL_11:
    if ((v4 & 8) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  if ((*(_WORD *)(v3 + 68) & 8) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::KappaAirbagResult::hash_value(CMMsl::KappaAirbagResult *this)
{
  __int16 v1;
  uint64_t v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *((_WORD *)this + 34);
  if ((v1 & 0x400) != 0)
  {
    v2 = *((unsigned __int8 *)this + 64);
    if ((v1 & 0x80) != 0)
    {
LABEL_3:
      v3 = *((int *)this + 13);
      if ((v1 & 0x40) != 0)
        goto LABEL_4;
LABEL_23:
      v5 = 0;
      if ((*((_WORD *)this + 34) & 0x200) != 0)
        goto LABEL_7;
LABEL_24:
      v7 = 0;
      if ((*((_WORD *)this + 34) & 0x100) != 0)
        goto LABEL_10;
LABEL_25:
      v9 = 0;
      if ((v1 & 4) != 0)
        goto LABEL_13;
      goto LABEL_26;
    }
  }
  else
  {
    v2 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_23;
LABEL_4:
  v4 = *((float *)this + 12);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((*((_WORD *)this + 34) & 0x200) == 0)
    goto LABEL_24;
LABEL_7:
  v6 = *((float *)this + 15);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  if ((*((_WORD *)this + 34) & 0x100) == 0)
    goto LABEL_25;
LABEL_10:
  v8 = *((float *)this + 14);
  v9 = LODWORD(v8);
  if (v8 == 0.0)
    v9 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_13:
    v10 = *((_QWORD *)this + 3);
    if ((v1 & 0x10) != 0)
      goto LABEL_14;
    goto LABEL_27;
  }
LABEL_26:
  v10 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_14:
    v11 = *((int *)this + 10);
    if ((v1 & 1) != 0)
      goto LABEL_15;
    goto LABEL_28;
  }
LABEL_27:
  v11 = 0;
  if ((v1 & 1) != 0)
  {
LABEL_15:
    v12 = *((_QWORD *)this + 1);
    if ((v1 & 2) != 0)
      goto LABEL_16;
    goto LABEL_29;
  }
LABEL_28:
  v12 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_16:
    v13 = *((_QWORD *)this + 2);
    if ((v1 & 0x20) != 0)
      goto LABEL_17;
    goto LABEL_30;
  }
LABEL_29:
  v13 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_17:
    v14 = *((float *)this + 11);
    v15 = LODWORD(v14);
    if (v14 == 0.0)
      v15 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_20;
LABEL_31:
    v16 = 0;
    return v3 ^ v2 ^ v5 ^ v7 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v15 ^ v16;
  }
LABEL_30:
  v15 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_31;
LABEL_20:
  v16 = *((_QWORD *)this + 4);
  return v3 ^ v2 ^ v5 ^ v7 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v15 ^ v16;
}

void CMMsl::KappaAudioResult::~KappaAudioResult(CMMsl::KappaAudioResult *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::KappaAudioResult::KappaAudioResult(CMMsl::KappaAudioResult *this, const CMMsl::KappaAudioResult *a2)
{
  int v2;
  int v3;
  char v4;
  int v5;
  float result;
  char v7;
  char v8;
  char v9;
  char v10;
  int v11;
  int v12;
  int v13;

  *(_QWORD *)this = &off_25135E780;
  *((_DWORD *)this + 27) = 0;
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x800000) != 0)
  {
    v4 = *((_BYTE *)a2 + 100);
    v3 = 0x800000;
    *((_DWORD *)this + 27) = 0x800000;
    *((_BYTE *)this + 100) = v4;
    v2 = *((_DWORD *)a2 + 27);
    if ((v2 & 0x80000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x80000) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 21);
    v3 |= 0x80000u;
    *((_DWORD *)this + 27) = v3;
    *((_DWORD *)this + 21) = v5;
    v2 = *((_DWORD *)a2 + 27);
  }
LABEL_6:
  if ((v2 & 0x20000) != 0)
  {
    result = *((float *)a2 + 19);
    v3 |= 0x20000u;
    *((_DWORD *)this + 27) = v3;
    *((float *)this + 19) = result;
    v2 = *((_DWORD *)a2 + 27);
    if ((v2 & 0x10000) == 0)
    {
LABEL_8:
      if ((v2 & 0x8000) == 0)
        goto LABEL_9;
      goto LABEL_35;
    }
  }
  else if ((v2 & 0x10000) == 0)
  {
    goto LABEL_8;
  }
  result = *((float *)a2 + 18);
  v3 |= 0x10000u;
  *((_DWORD *)this + 27) = v3;
  *((float *)this + 18) = result;
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x8000) == 0)
  {
LABEL_9:
    if ((v2 & 0x200000) == 0)
      goto LABEL_10;
    goto LABEL_36;
  }
LABEL_35:
  result = *((float *)a2 + 17);
  v3 |= 0x8000u;
  *((_DWORD *)this + 27) = v3;
  *((float *)this + 17) = result;
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x200000) == 0)
  {
LABEL_10:
    if ((v2 & 0x40000) == 0)
      goto LABEL_11;
    goto LABEL_37;
  }
LABEL_36:
  result = *((float *)a2 + 23);
  v3 |= 0x200000u;
  *((_DWORD *)this + 27) = v3;
  *((float *)this + 23) = result;
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x40000) == 0)
  {
LABEL_11:
    if ((v2 & 0x400000) == 0)
      goto LABEL_12;
    goto LABEL_38;
  }
LABEL_37:
  result = *((float *)a2 + 20);
  v3 |= 0x40000u;
  *((_DWORD *)this + 27) = v3;
  *((float *)this + 20) = result;
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x400000) == 0)
  {
LABEL_12:
    if ((v2 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_39;
  }
LABEL_38:
  result = *((float *)a2 + 24);
  v3 |= 0x400000u;
  *((_DWORD *)this + 27) = v3;
  *((float *)this + 24) = result;
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x1000) == 0)
  {
LABEL_13:
    if ((v2 & 0x100000) == 0)
      goto LABEL_14;
    goto LABEL_40;
  }
LABEL_39:
  result = *((float *)a2 + 14);
  v3 |= 0x1000u;
  *((_DWORD *)this + 27) = v3;
  *((float *)this + 14) = result;
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x100000) == 0)
  {
LABEL_14:
    if ((v2 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_41;
  }
LABEL_40:
  result = *((float *)a2 + 22);
  v3 |= 0x100000u;
  *((_DWORD *)this + 27) = v3;
  *((float *)this + 22) = result;
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x4000) == 0)
  {
LABEL_15:
    if ((v2 & 0x2000) == 0)
      goto LABEL_16;
    goto LABEL_42;
  }
LABEL_41:
  result = *((float *)a2 + 16);
  v3 |= 0x4000u;
  *((_DWORD *)this + 27) = v3;
  *((float *)this + 16) = result;
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x2000) == 0)
  {
LABEL_16:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_17;
    goto LABEL_43;
  }
LABEL_42:
  result = *((float *)a2 + 15);
  v3 |= 0x2000u;
  *((_DWORD *)this + 27) = v3;
  *((float *)this + 15) = result;
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_18;
    goto LABEL_44;
  }
LABEL_43:
  v7 = *((_BYTE *)a2 + 103);
  v3 |= 0x4000000u;
  *((_DWORD *)this + 27) = v3;
  *((_BYTE *)this + 103) = v7;
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_19;
    goto LABEL_45;
  }
LABEL_44:
  v8 = *((_BYTE *)a2 + 102);
  v3 |= 0x2000000u;
  *((_DWORD *)this + 27) = v3;
  *((_BYTE *)this + 102) = v8;
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_19:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_20;
    goto LABEL_46;
  }
LABEL_45:
  v9 = *((_BYTE *)a2 + 101);
  v3 |= 0x1000000u;
  *((_DWORD *)this + 27) = v3;
  *((_BYTE *)this + 101) = v9;
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_20:
    if ((v2 & 2) == 0)
      goto LABEL_21;
    goto LABEL_47;
  }
LABEL_46:
  v10 = *((_BYTE *)a2 + 104);
  v3 |= 0x8000000u;
  *((_DWORD *)this + 27) = v3;
  *((_BYTE *)this + 104) = v10;
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 2) == 0)
  {
LABEL_21:
    if ((v2 & 0x800) == 0)
      goto LABEL_22;
    goto LABEL_48;
  }
LABEL_47:
  v11 = *((_DWORD *)a2 + 3);
  v3 |= 2u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 3) = v11;
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x800) == 0)
  {
LABEL_22:
    if ((v2 & 0x100) == 0)
      goto LABEL_23;
    goto LABEL_49;
  }
LABEL_48:
  result = *((float *)a2 + 13);
  v3 |= 0x800u;
  *((_DWORD *)this + 27) = v3;
  *((float *)this + 13) = result;
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x100) == 0)
  {
LABEL_23:
    if ((v2 & 0x80) == 0)
      goto LABEL_24;
    goto LABEL_50;
  }
LABEL_49:
  v12 = *((_DWORD *)a2 + 10);
  v3 |= 0x100u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 10) = v12;
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x80) == 0)
  {
LABEL_24:
    if ((v2 & 0x40) == 0)
      goto LABEL_25;
    goto LABEL_51;
  }
LABEL_50:
  v13 = *((_DWORD *)a2 + 9);
  v3 |= 0x80u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 9) = v13;
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x40) == 0)
  {
LABEL_25:
    if ((v2 & 0x20) == 0)
      goto LABEL_26;
    goto LABEL_52;
  }
LABEL_51:
  result = *((float *)a2 + 8);
  v3 |= 0x40u;
  *((_DWORD *)this + 27) = v3;
  *((float *)this + 8) = result;
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x20) == 0)
  {
LABEL_26:
    if ((v2 & 8) == 0)
      goto LABEL_27;
    goto LABEL_53;
  }
LABEL_52:
  result = *((float *)a2 + 7);
  v3 |= 0x20u;
  *((_DWORD *)this + 27) = v3;
  *((float *)this + 7) = result;
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 8) == 0)
  {
LABEL_27:
    if ((v2 & 4) == 0)
      goto LABEL_28;
    goto LABEL_54;
  }
LABEL_53:
  result = *((float *)a2 + 5);
  v3 |= 8u;
  *((_DWORD *)this + 27) = v3;
  *((float *)this + 5) = result;
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 4) == 0)
  {
LABEL_28:
    if ((v2 & 1) == 0)
      goto LABEL_29;
    goto LABEL_55;
  }
LABEL_54:
  result = *((float *)a2 + 4);
  v3 |= 4u;
  *((_DWORD *)this + 27) = v3;
  *((float *)this + 4) = result;
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 1) == 0)
  {
LABEL_29:
    if ((v2 & 0x10) == 0)
      goto LABEL_30;
    goto LABEL_56;
  }
LABEL_55:
  result = *((float *)a2 + 2);
  v3 |= 1u;
  *((_DWORD *)this + 27) = v3;
  *((float *)this + 2) = result;
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x10) == 0)
  {
LABEL_30:
    if ((v2 & 0x400) == 0)
      goto LABEL_31;
    goto LABEL_57;
  }
LABEL_56:
  result = *((float *)a2 + 6);
  v3 |= 0x10u;
  *((_DWORD *)this + 27) = v3;
  *((float *)this + 6) = result;
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x400) == 0)
  {
LABEL_31:
    if ((v2 & 0x200) == 0)
      return result;
LABEL_58:
    result = *((float *)a2 + 11);
    *((_DWORD *)this + 27) = v3 | 0x200;
    *((float *)this + 11) = result;
    return result;
  }
LABEL_57:
  result = *((float *)a2 + 12);
  v3 |= 0x400u;
  *((_DWORD *)this + 27) = v3;
  *((float *)this + 12) = result;
  if ((*((_DWORD *)a2 + 27) & 0x200) != 0)
    goto LABEL_58;
  return result;
}

CMMsl *CMMsl::KappaAudioResult::operator=(CMMsl *a1, const CMMsl::KappaAudioResult *a2)
{
  CMMsl::KappaAudioResult *v3;
  _BYTE v5[112];

  if (a1 != a2)
  {
    CMMsl::KappaAudioResult::KappaAudioResult((CMMsl::KappaAudioResult *)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaAudioResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaAudioResult *a2, CMMsl::KappaAudioResult *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  float result;

  v3 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 100);
  *((_BYTE *)this + 100) = *((_BYTE *)a2 + 100);
  *((_BYTE *)a2 + 100) = v3;
  v4 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v4;
  v5 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v5;
  v6 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v6;
  v7 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v7;
  v8 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v8;
  v9 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v9;
  v10 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v10;
  v11 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v11;
  v12 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v12;
  v13 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v13;
  v14 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v14;
  LOBYTE(v4) = *((_BYTE *)this + 103);
  *((_BYTE *)this + 103) = *((_BYTE *)a2 + 103);
  *((_BYTE *)a2 + 103) = v4;
  LOBYTE(v4) = *((_BYTE *)this + 102);
  *((_BYTE *)this + 102) = *((_BYTE *)a2 + 102);
  *((_BYTE *)a2 + 102) = v4;
  LOBYTE(v4) = *((_BYTE *)this + 101);
  *((_BYTE *)this + 101) = *((_BYTE *)a2 + 101);
  *((_BYTE *)a2 + 101) = v4;
  LOBYTE(v4) = *((_BYTE *)this + 104);
  *((_BYTE *)this + 104) = *((_BYTE *)a2 + 104);
  *((_BYTE *)a2 + 104) = v4;
  v15 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v15;
  v16 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v16;
  v17 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v17;
  v18 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v18;
  v19 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v19;
  v20 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v20;
  v21 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v21;
  v22 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v22;
  v23 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v23;
  v24 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v24;
  v25 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v25;
  result = *((float *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((float *)a2 + 11) = result;
  return result;
}

float CMMsl::KappaAudioResult::KappaAudioResult(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135E780;
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a2 + 108) = 0;
  *(_BYTE *)(a1 + 100) = *(_BYTE *)(a2 + 100);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 103) = *(_BYTE *)(a2 + 103);
  *(_BYTE *)(a1 + 102) = *(_BYTE *)(a2 + 102);
  *(_BYTE *)(a1 + 101) = *(_BYTE *)(a2 + 101);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  result = *(float *)(a2 + 44);
  *(float *)(a1 + 44) = result;
  return result;
}

CMMsl *CMMsl::KappaAudioResult::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::KappaAudioResult *v3;
  _BYTE v5[112];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaAudioResult::KappaAudioResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaAudioResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaAudioResult::formatText(CMMsl::KappaAudioResult *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "configDelaySpreadFpThreshold", *((float *)this + 2));
    v5 = *((_DWORD *)this + 27);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_33;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "configFeatureSamples");
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "configNonPlanarDelaySpreadThreshold", *((float *)this + 4));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "configNonPlanarPaprThreshold", *((float *)this + 5));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "configPeakEnergyFpThreshold", *((float *)this + 6));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "configPlanarDelaySpreadThreshold", *((float *)this + 7));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "configPlanarPaprThreshold", *((float *)this + 8));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "configPostTriggerLimitTime");
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "configPreTriggerLimitTime");
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "configRawRmsMaxFpThreshold", *((float *)this + 11));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "configRawRmsMeanFpThreshold", *((float *)this + 12));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "configRmsClipMinAmp", *((float *)this + 13));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x800000) == 0)
      goto LABEL_15;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "delaySpread", *((float *)this + 14));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x800000) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_16;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "isAudioTPQ");
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_17;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "isFpThresholdsMet");
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_17:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_18;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "isNonPlanarTp");
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_18:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_19;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "isPlanarTp");
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_19:
    if ((v5 & 0x2000) == 0)
      goto LABEL_20;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "isTauBarWithinRange");
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x2000) == 0)
  {
LABEL_20:
    if ((v5 & 0x4000) == 0)
      goto LABEL_21;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "papr", *((float *)this + 15));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x4000) == 0)
  {
LABEL_21:
    if ((v5 & 0x8000) == 0)
      goto LABEL_22;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "peakEnergy", *((float *)this + 16));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x8000) == 0)
  {
LABEL_22:
    if ((v5 & 0x10000) == 0)
      goto LABEL_23;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "rawRmsMax", *((float *)this + 17));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x10000) == 0)
  {
LABEL_23:
    if ((v5 & 0x20000) == 0)
      goto LABEL_24;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "rawRmsMean", *((float *)this + 18));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x20000) == 0)
  {
LABEL_24:
    if ((v5 & 0x40000) == 0)
      goto LABEL_25;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "rawRmsSum", *((float *)this + 19));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x40000) == 0)
  {
LABEL_25:
    if ((v5 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "rmsClipSum", *((float *)this + 20));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x80000) == 0)
  {
LABEL_26:
    if ((v5 & 0x100000) == 0)
      goto LABEL_27;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "sampleCount");
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x100000) == 0)
  {
LABEL_27:
    if ((v5 & 0x200000) == 0)
      goto LABEL_28;
LABEL_57:
    PB::TextFormatter::format(a2, "tTimesRmsClipSum", *((float *)this + 23));
    if ((*((_DWORD *)this + 27) & 0x400000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_29;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "t2TimesRmsClipSum", *((float *)this + 22));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x200000) != 0)
    goto LABEL_57;
LABEL_28:
  if ((v5 & 0x400000) != 0)
LABEL_29:
    PB::TextFormatter::format(a2, "tauBar", *((float *)this + 24));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaAudioResult::readFrom(CMMsl::KappaAudioResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  char v27;
  int v28;
  BOOL v29;
  int v30;
  BOOL v31;
  int v32;
  BOOL v33;
  int v34;
  BOOL v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  char v47;
  unint64_t v48;
  uint64_t v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  char v53;
  char v54;
  unsigned int v55;
  unint64_t v56;
  char v57;
  char v58;
  unsigned int v59;
  unint64_t v60;
  char v61;
  char v62;
  unsigned int v63;
  unint64_t v64;
  char v65;
  char v66;
  unsigned int v67;
  unint64_t v68;
  char v69;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_158;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 27) |= 0x800000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v21 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v21 = v20 != 0;
        }
        *((_BYTE *)this + 100) = v21;
        break;
      case 2u:
        *((_DWORD *)this + 27) |= 0x80000u;
        v22 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v23 = *(_QWORD *)a2;
        if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v2)
        {
          v54 = 0;
          v55 = 0;
          v26 = 0;
          if (v2 <= v22)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v22)
            {
              LODWORD(v26) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_167;
            }
            v56 = v22++;
            v57 = *(_BYTE *)(v23 + v56);
            *((_QWORD *)a2 + 1) = v22;
            v26 |= (unint64_t)(v57 & 0x7F) << v54;
            if ((v57 & 0x80) == 0)
              break;
            v54 += 7;
            v14 = v55++ > 8;
            if (v14)
            {
              LODWORD(v26) = 0;
LABEL_166:
              v2 = v56 + 1;
              goto LABEL_167;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v26) = 0;
          goto LABEL_166;
        }
        v24 = 0;
        v25 = 0;
        v26 = 0;
        do
        {
          v2 = v22 + 1;
          *((_QWORD *)a2 + 1) = v22 + 1;
          v27 = *(_BYTE *)(v23 + v22);
          v26 |= (unint64_t)(v27 & 0x7F) << v24;
          if ((v27 & 0x80) == 0)
            goto LABEL_167;
          v24 += 7;
          v22 = v2;
          v14 = v25++ > 8;
        }
        while (!v14);
        LODWORD(v26) = 0;
LABEL_167:
        *((_DWORD *)this + 21) = v26;
        break;
      case 3u:
        *((_DWORD *)this + 27) |= 0x20000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_117;
        *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_157;
      case 4u:
        *((_DWORD *)this + 27) |= 0x10000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_117;
        *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_157;
      case 5u:
        *((_DWORD *)this + 27) |= 0x8000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_117;
        *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_157;
      case 6u:
        *((_DWORD *)this + 27) |= 0x200000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_117;
        *((_DWORD *)this + 23) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_157;
      case 7u:
        *((_DWORD *)this + 27) |= 0x40000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_117;
        *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_157;
      case 8u:
        *((_DWORD *)this + 27) |= 0x400000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_117;
        *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_157;
      case 9u:
        *((_DWORD *)this + 27) |= 0x1000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_117;
        *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_157;
      case 0xAu:
        *((_DWORD *)this + 27) |= 0x100000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_117;
        *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_157;
      case 0xBu:
        *((_DWORD *)this + 27) |= 0x4000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_117;
        *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_157;
      case 0xCu:
        *((_DWORD *)this + 27) |= 0x2000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_117;
        *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_157;
      case 0xDu:
        *((_DWORD *)this + 27) |= 0x4000000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v29 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v28 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v29 = v28 != 0;
        }
        *((_BYTE *)this + 103) = v29;
        break;
      case 0xEu:
        *((_DWORD *)this + 27) |= 0x2000000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v31 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v30 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v31 = v30 != 0;
        }
        *((_BYTE *)this + 102) = v31;
        break;
      case 0xFu:
        *((_DWORD *)this + 27) |= 0x1000000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v33 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v32 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v33 = v32 != 0;
        }
        *((_BYTE *)this + 101) = v33;
        break;
      case 0x10u:
        *((_DWORD *)this + 27) |= 0x8000000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v35 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v34 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v35 = v34 != 0;
        }
        *((_BYTE *)this + 104) = v35;
        break;
      case 0x11u:
        *((_DWORD *)this + 27) |= 2u;
        v36 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v37 = *(_QWORD *)a2;
        if (v36 > 0xFFFFFFFFFFFFFFF5 || v36 + 10 > v2)
        {
          v58 = 0;
          v59 = 0;
          v40 = 0;
          if (v2 <= v36)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v36)
            {
              LODWORD(v40) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_172;
            }
            v60 = v36++;
            v61 = *(_BYTE *)(v37 + v60);
            *((_QWORD *)a2 + 1) = v36;
            v40 |= (unint64_t)(v61 & 0x7F) << v58;
            if ((v61 & 0x80) == 0)
              break;
            v58 += 7;
            v14 = v59++ > 8;
            if (v14)
            {
              LODWORD(v40) = 0;
LABEL_171:
              v2 = v60 + 1;
              goto LABEL_172;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v40) = 0;
          goto LABEL_171;
        }
        v38 = 0;
        v39 = 0;
        v40 = 0;
        do
        {
          v2 = v36 + 1;
          *((_QWORD *)a2 + 1) = v36 + 1;
          v41 = *(_BYTE *)(v37 + v36);
          v40 |= (unint64_t)(v41 & 0x7F) << v38;
          if ((v41 & 0x80) == 0)
            goto LABEL_172;
          v38 += 7;
          v36 = v2;
          v14 = v39++ > 8;
        }
        while (!v14);
        LODWORD(v40) = 0;
LABEL_172:
        *((_DWORD *)this + 3) = v40;
        break;
      case 0x12u:
        *((_DWORD *)this + 27) |= 0x800u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_117;
        *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_157;
      case 0x13u:
        *((_DWORD *)this + 27) |= 0x100u;
        v42 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v43 = *(_QWORD *)a2;
        if (v42 > 0xFFFFFFFFFFFFFFF5 || v42 + 10 > v2)
        {
          v62 = 0;
          v63 = 0;
          v46 = 0;
          if (v2 <= v42)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v42)
            {
              LODWORD(v46) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_177;
            }
            v64 = v42++;
            v65 = *(_BYTE *)(v43 + v64);
            *((_QWORD *)a2 + 1) = v42;
            v46 |= (unint64_t)(v65 & 0x7F) << v62;
            if ((v65 & 0x80) == 0)
              break;
            v62 += 7;
            v14 = v63++ > 8;
            if (v14)
            {
              LODWORD(v46) = 0;
LABEL_176:
              v2 = v64 + 1;
              goto LABEL_177;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v46) = 0;
          goto LABEL_176;
        }
        v44 = 0;
        v45 = 0;
        v46 = 0;
        do
        {
          v2 = v42 + 1;
          *((_QWORD *)a2 + 1) = v42 + 1;
          v47 = *(_BYTE *)(v43 + v42);
          v46 |= (unint64_t)(v47 & 0x7F) << v44;
          if ((v47 & 0x80) == 0)
            goto LABEL_177;
          v44 += 7;
          v42 = v2;
          v14 = v45++ > 8;
        }
        while (!v14);
        LODWORD(v46) = 0;
LABEL_177:
        *((_DWORD *)this + 10) = v46;
        break;
      case 0x14u:
        *((_DWORD *)this + 27) |= 0x80u;
        v48 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v49 = *(_QWORD *)a2;
        if (v48 > 0xFFFFFFFFFFFFFFF5 || v48 + 10 > v2)
        {
          v66 = 0;
          v67 = 0;
          v52 = 0;
          if (v2 <= v48)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v48)
            {
              LODWORD(v52) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_182;
            }
            v68 = v48++;
            v69 = *(_BYTE *)(v49 + v68);
            *((_QWORD *)a2 + 1) = v48;
            v52 |= (unint64_t)(v69 & 0x7F) << v66;
            if ((v69 & 0x80) == 0)
              break;
            v66 += 7;
            v14 = v67++ > 8;
            if (v14)
            {
              LODWORD(v52) = 0;
LABEL_181:
              v2 = v68 + 1;
              goto LABEL_182;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v52) = 0;
          goto LABEL_181;
        }
        v50 = 0;
        v51 = 0;
        v52 = 0;
        do
        {
          v2 = v48 + 1;
          *((_QWORD *)a2 + 1) = v48 + 1;
          v53 = *(_BYTE *)(v49 + v48);
          v52 |= (unint64_t)(v53 & 0x7F) << v50;
          if ((v53 & 0x80) == 0)
            goto LABEL_182;
          v50 += 7;
          v48 = v2;
          v14 = v51++ > 8;
        }
        while (!v14);
        LODWORD(v52) = 0;
LABEL_182:
        *((_DWORD *)this + 9) = v52;
        break;
      case 0x15u:
        *((_DWORD *)this + 27) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_117;
        *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_157;
      case 0x16u:
        *((_DWORD *)this + 27) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_117;
        *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_157;
      case 0x17u:
        *((_DWORD *)this + 27) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_117;
        *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_157;
      case 0x18u:
        *((_DWORD *)this + 27) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_117;
        *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_157;
      case 0x19u:
        *((_DWORD *)this + 27) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_117;
        *((_DWORD *)this + 2) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_157;
      case 0x1Au:
        *((_DWORD *)this + 27) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_117;
        *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_157;
      case 0x1Bu:
        *((_DWORD *)this + 27) |= 0x400u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_117;
        *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_157;
      case 0x1Cu:
        *((_DWORD *)this + 27) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_157:
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_117:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_158:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::KappaAudioResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 108);
  if ((v4 & 0x800000) != 0)
  {
    this = PB::Writer::write(a2);
    v4 = *(_DWORD *)(v3 + 108);
    if ((v4 & 0x80000) == 0)
    {
LABEL_3:
      if ((v4 & 0x20000) == 0)
        goto LABEL_4;
      goto LABEL_32;
    }
  }
  else if ((v4 & 0x80000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x20000) == 0)
  {
LABEL_4:
    if ((v4 & 0x10000) == 0)
      goto LABEL_5;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 76));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x10000) == 0)
  {
LABEL_5:
    if ((v4 & 0x8000) == 0)
      goto LABEL_6;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x8000) == 0)
  {
LABEL_6:
    if ((v4 & 0x200000) == 0)
      goto LABEL_7;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 68));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x200000) == 0)
  {
LABEL_7:
    if ((v4 & 0x40000) == 0)
      goto LABEL_8;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 92));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x40000) == 0)
  {
LABEL_8:
    if ((v4 & 0x400000) == 0)
      goto LABEL_9;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x400000) == 0)
  {
LABEL_9:
    if ((v4 & 0x1000) == 0)
      goto LABEL_10;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 96));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x1000) == 0)
  {
LABEL_10:
    if ((v4 & 0x100000) == 0)
      goto LABEL_11;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x100000) == 0)
  {
LABEL_11:
    if ((v4 & 0x4000) == 0)
      goto LABEL_12;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x4000) == 0)
  {
LABEL_12:
    if ((v4 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(float *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x2000) == 0)
  {
LABEL_13:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_14;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(float *)(v3 + 60));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_15;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_16;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_17;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_17:
    if ((v4 & 2) == 0)
      goto LABEL_18;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 2) == 0)
  {
LABEL_18:
    if ((v4 & 0x800) == 0)
      goto LABEL_19;
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x800) == 0)
  {
LABEL_19:
    if ((v4 & 0x100) == 0)
      goto LABEL_20;
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x100) == 0)
  {
LABEL_20:
    if ((v4 & 0x80) == 0)
      goto LABEL_21;
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x80) == 0)
  {
LABEL_21:
    if ((v4 & 0x40) == 0)
      goto LABEL_22;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x40) == 0)
  {
LABEL_22:
    if ((v4 & 0x20) == 0)
      goto LABEL_23;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x20) == 0)
  {
LABEL_23:
    if ((v4 & 8) == 0)
      goto LABEL_24;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 8) == 0)
  {
LABEL_24:
    if ((v4 & 4) == 0)
      goto LABEL_25;
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 4) == 0)
  {
LABEL_25:
    if ((v4 & 1) == 0)
      goto LABEL_26;
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 1) == 0)
  {
LABEL_26:
    if ((v4 & 0x10) == 0)
      goto LABEL_27;
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2, *(float *)(v3 + 8));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x10) == 0)
  {
LABEL_27:
    if ((v4 & 0x400) == 0)
      goto LABEL_28;
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x400) == 0)
  {
LABEL_28:
    if ((v4 & 0x200) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 44));
  }
LABEL_56:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  if ((*(_DWORD *)(v3 + 108) & 0x200) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 44));
  return this;
}

uint64_t CMMsl::KappaAudioResult::hash_value(CMMsl::KappaAudioResult *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  float v45;
  uint64_t v46;
  float v47;
  uint64_t v48;

  v1 = *((_DWORD *)this + 27);
  if ((v1 & 0x800000) != 0)
  {
    v2 = *((unsigned __int8 *)this + 100);
    if ((v1 & 0x80000) != 0)
    {
LABEL_3:
      v3 = *((unsigned int *)this + 21);
      if ((v1 & 0x20000) != 0)
        goto LABEL_4;
LABEL_70:
      v5 = 0;
      if ((v1 & 0x10000) != 0)
        goto LABEL_7;
LABEL_71:
      v7 = 0;
      if ((v1 & 0x8000) != 0)
        goto LABEL_10;
LABEL_72:
      v9 = 0;
      if ((v1 & 0x200000) != 0)
        goto LABEL_13;
LABEL_73:
      v11 = 0;
      if ((v1 & 0x40000) != 0)
        goto LABEL_16;
LABEL_74:
      v13 = 0;
      if ((v1 & 0x400000) != 0)
        goto LABEL_19;
LABEL_75:
      v15 = 0;
      if ((v1 & 0x1000) != 0)
        goto LABEL_22;
LABEL_76:
      v17 = 0;
      if ((v1 & 0x100000) != 0)
        goto LABEL_25;
LABEL_77:
      v19 = 0;
      if ((v1 & 0x4000) != 0)
        goto LABEL_28;
LABEL_78:
      v21 = 0;
      if ((v1 & 0x2000) != 0)
        goto LABEL_31;
LABEL_79:
      v23 = 0;
      if ((v1 & 0x4000000) != 0)
        goto LABEL_34;
      goto LABEL_80;
    }
  }
  else
  {
    v2 = 0;
    if ((v1 & 0x80000) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((v1 & 0x20000) == 0)
    goto LABEL_70;
LABEL_4:
  v4 = *((float *)this + 19);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((v1 & 0x10000) == 0)
    goto LABEL_71;
LABEL_7:
  v6 = *((float *)this + 18);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  if ((v1 & 0x8000) == 0)
    goto LABEL_72;
LABEL_10:
  v8 = *((float *)this + 17);
  v9 = LODWORD(v8);
  if (v8 == 0.0)
    v9 = 0;
  if ((v1 & 0x200000) == 0)
    goto LABEL_73;
LABEL_13:
  v10 = *((float *)this + 23);
  v11 = LODWORD(v10);
  if (v10 == 0.0)
    v11 = 0;
  if ((v1 & 0x40000) == 0)
    goto LABEL_74;
LABEL_16:
  v12 = *((float *)this + 20);
  v13 = LODWORD(v12);
  if (v12 == 0.0)
    v13 = 0;
  if ((v1 & 0x400000) == 0)
    goto LABEL_75;
LABEL_19:
  v14 = *((float *)this + 24);
  v15 = LODWORD(v14);
  if (v14 == 0.0)
    v15 = 0;
  if ((v1 & 0x1000) == 0)
    goto LABEL_76;
LABEL_22:
  v16 = *((float *)this + 14);
  v17 = LODWORD(v16);
  if (v16 == 0.0)
    v17 = 0;
  if ((v1 & 0x100000) == 0)
    goto LABEL_77;
LABEL_25:
  v18 = *((float *)this + 22);
  v19 = LODWORD(v18);
  if (v18 == 0.0)
    v19 = 0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_78;
LABEL_28:
  v20 = *((float *)this + 16);
  v21 = LODWORD(v20);
  if (v20 == 0.0)
    v21 = 0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_79;
LABEL_31:
  v22 = *((float *)this + 15);
  v23 = LODWORD(v22);
  if (v22 == 0.0)
    v23 = 0;
  if ((v1 & 0x4000000) != 0)
  {
LABEL_34:
    v24 = *((unsigned __int8 *)this + 103);
    if ((v1 & 0x2000000) != 0)
      goto LABEL_35;
    goto LABEL_81;
  }
LABEL_80:
  v24 = 0;
  if ((v1 & 0x2000000) != 0)
  {
LABEL_35:
    v25 = *((unsigned __int8 *)this + 102);
    if ((v1 & 0x1000000) != 0)
      goto LABEL_36;
    goto LABEL_82;
  }
LABEL_81:
  v25 = 0;
  if ((v1 & 0x1000000) != 0)
  {
LABEL_36:
    v26 = *((unsigned __int8 *)this + 101);
    if ((v1 & 0x8000000) != 0)
      goto LABEL_37;
    goto LABEL_83;
  }
LABEL_82:
  v26 = 0;
  if ((v1 & 0x8000000) != 0)
  {
LABEL_37:
    v27 = *((unsigned __int8 *)this + 104);
    if ((v1 & 2) != 0)
      goto LABEL_38;
    goto LABEL_84;
  }
LABEL_83:
  v27 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_38:
    v28 = *((int *)this + 3);
    if ((v1 & 0x800) != 0)
      goto LABEL_39;
LABEL_85:
    v30 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_42;
    goto LABEL_86;
  }
LABEL_84:
  v28 = 0;
  if ((v1 & 0x800) == 0)
    goto LABEL_85;
LABEL_39:
  v29 = *((float *)this + 13);
  v30 = LODWORD(v29);
  if (v29 == 0.0)
    v30 = 0;
  if ((v1 & 0x100) != 0)
  {
LABEL_42:
    v31 = *((int *)this + 10);
    if ((v1 & 0x80) != 0)
      goto LABEL_43;
    goto LABEL_87;
  }
LABEL_86:
  v31 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_43:
    v32 = *((int *)this + 9);
    if ((v1 & 0x40) != 0)
      goto LABEL_44;
LABEL_88:
    v34 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_47;
LABEL_89:
    v36 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_50;
LABEL_90:
    v38 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_53;
LABEL_91:
    v40 = 0;
    if ((v1 & 1) != 0)
      goto LABEL_56;
LABEL_92:
    v42 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_59;
LABEL_93:
    v44 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_62;
    goto LABEL_94;
  }
LABEL_87:
  v32 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_88;
LABEL_44:
  v33 = *((float *)this + 8);
  v34 = LODWORD(v33);
  if (v33 == 0.0)
    v34 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_89;
LABEL_47:
  v35 = *((float *)this + 7);
  v36 = LODWORD(v35);
  if (v35 == 0.0)
    v36 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_90;
LABEL_50:
  v37 = *((float *)this + 5);
  v38 = LODWORD(v37);
  if (v37 == 0.0)
    v38 = 0;
  if ((v1 & 4) == 0)
    goto LABEL_91;
LABEL_53:
  v39 = *((float *)this + 4);
  v40 = LODWORD(v39);
  if (v39 == 0.0)
    v40 = 0;
  if ((v1 & 1) == 0)
    goto LABEL_92;
LABEL_56:
  v41 = *((float *)this + 2);
  v42 = LODWORD(v41);
  if (v41 == 0.0)
    v42 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_93;
LABEL_59:
  v43 = *((float *)this + 6);
  v44 = LODWORD(v43);
  if (v43 == 0.0)
    v44 = 0;
  if ((v1 & 0x400) != 0)
  {
LABEL_62:
    v45 = *((float *)this + 12);
    v46 = LODWORD(v45);
    if (v45 == 0.0)
      v46 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_65;
LABEL_95:
    v48 = 0;
    return v3 ^ v2 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13 ^ v15 ^ v17 ^ v19 ^ v21 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v30 ^ v31 ^ v32 ^ v34 ^ v36 ^ v38 ^ v40 ^ v42 ^ v44 ^ v46 ^ v48;
  }
LABEL_94:
  v46 = 0;
  if ((v1 & 0x200) == 0)
    goto LABEL_95;
LABEL_65:
  v47 = *((float *)this + 11);
  v48 = LODWORD(v47);
  if (v47 == 0.0)
    v48 = 0;
  return v3 ^ v2 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13 ^ v15 ^ v17 ^ v19 ^ v21 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v30 ^ v31 ^ v32 ^ v34 ^ v36 ^ v38 ^ v40 ^ v42 ^ v44 ^ v46 ^ v48;
}

void CMMsl::KappaBaroResult::~KappaBaroResult(CMMsl::KappaBaroResult *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::KappaBaroResult::KappaBaroResult(CMMsl::KappaBaroResult *this, const CMMsl::KappaBaroResult *a2)
{
  int v2;
  int v3;
  char v4;
  float result;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  *(_QWORD *)this = &off_25135E7B8;
  *((_DWORD *)this + 38) = 0;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x20000000) != 0)
  {
    v4 = *((_BYTE *)a2 + 148);
    v3 = 0x20000000;
    *((_DWORD *)this + 38) = 0x20000000;
    *((_BYTE *)this + 148) = v4;
    v2 = *((_DWORD *)a2 + 38);
    if ((v2 & 0x200000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x200000) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 29);
    v3 |= 0x200000u;
    *((_DWORD *)this + 38) = v3;
    *((float *)this + 29) = result;
    v2 = *((_DWORD *)a2 + 38);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *((_QWORD *)a2 + 3);
    v3 |= 4u;
    *((_DWORD *)this + 38) = v3;
    *((_QWORD *)this + 3) = v6;
    v2 = *((_DWORD *)a2 + 38);
    if ((v2 & 0x10000000) == 0)
    {
LABEL_8:
      if ((v2 & 0x4000000) == 0)
        goto LABEL_9;
      goto LABEL_37;
    }
  }
  else if ((v2 & 0x10000000) == 0)
  {
    goto LABEL_8;
  }
  result = *((float *)a2 + 36);
  v3 |= 0x10000000u;
  *((_DWORD *)this + 38) = v3;
  *((float *)this + 36) = result;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_9:
    if ((v2 & 0x100000) == 0)
      goto LABEL_10;
    goto LABEL_38;
  }
LABEL_37:
  result = *((float *)a2 + 34);
  v3 |= 0x4000000u;
  *((_DWORD *)this + 38) = v3;
  *((float *)this + 34) = result;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x100000) == 0)
  {
LABEL_10:
    if ((v2 & 0x40000) == 0)
      goto LABEL_11;
    goto LABEL_39;
  }
LABEL_38:
  v7 = *((_DWORD *)a2 + 28);
  v3 |= 0x100000u;
  *((_DWORD *)this + 38) = v3;
  *((_DWORD *)this + 28) = v7;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x40000) == 0)
  {
LABEL_11:
    if ((v2 & 0x10) == 0)
      goto LABEL_12;
    goto LABEL_40;
  }
LABEL_39:
  v8 = *((_DWORD *)a2 + 26);
  v3 |= 0x40000u;
  *((_DWORD *)this + 38) = v3;
  *((_DWORD *)this + 26) = v8;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x10) == 0)
  {
LABEL_12:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_13;
    goto LABEL_41;
  }
LABEL_40:
  v9 = *((_QWORD *)a2 + 5);
  v3 |= 0x10u;
  *((_DWORD *)this + 38) = v3;
  *((_QWORD *)this + 5) = v9;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_13:
    if ((v2 & 0x8000) == 0)
      goto LABEL_14;
    goto LABEL_42;
  }
LABEL_41:
  result = *((float *)a2 + 35);
  v3 |= 0x8000000u;
  *((_DWORD *)this + 38) = v3;
  *((float *)this + 35) = result;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x8000) == 0)
  {
LABEL_14:
    if ((v2 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_43;
  }
LABEL_42:
  v10 = *((_DWORD *)a2 + 23);
  v3 |= 0x8000u;
  *((_DWORD *)this + 38) = v3;
  *((_DWORD *)this + 23) = v10;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x4000) == 0)
  {
LABEL_15:
    if ((v2 & 0x800000) == 0)
      goto LABEL_16;
    goto LABEL_44;
  }
LABEL_43:
  v11 = *((_DWORD *)a2 + 22);
  v3 |= 0x4000u;
  *((_DWORD *)this + 38) = v3;
  *((_DWORD *)this + 22) = v11;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x800000) == 0)
  {
LABEL_16:
    if ((v2 & 0x400000) == 0)
      goto LABEL_17;
    goto LABEL_45;
  }
LABEL_44:
  result = *((float *)a2 + 31);
  v3 |= 0x800000u;
  *((_DWORD *)this + 38) = v3;
  *((float *)this + 31) = result;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x400000) == 0)
  {
LABEL_17:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_18;
    goto LABEL_46;
  }
LABEL_45:
  result = *((float *)a2 + 30);
  v3 |= 0x400000u;
  *((_DWORD *)this + 38) = v3;
  *((float *)this + 30) = result;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_47;
  }
LABEL_46:
  result = *((float *)a2 + 32);
  v3 |= 0x1000000u;
  *((_DWORD *)this + 38) = v3;
  *((float *)this + 32) = result;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x2000) == 0)
  {
LABEL_19:
    if ((v2 & 0x1000) == 0)
      goto LABEL_20;
    goto LABEL_48;
  }
LABEL_47:
  result = *((float *)a2 + 21);
  v3 |= 0x2000u;
  *((_DWORD *)this + 38) = v3;
  *((float *)this + 21) = result;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x1000) == 0)
  {
LABEL_20:
    if ((v2 & 0x800) == 0)
      goto LABEL_21;
    goto LABEL_49;
  }
LABEL_48:
  result = *((float *)a2 + 20);
  v3 |= 0x1000u;
  *((_DWORD *)this + 38) = v3;
  *((float *)this + 20) = result;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x800) == 0)
  {
LABEL_21:
    if ((v2 & 0x400) == 0)
      goto LABEL_22;
    goto LABEL_50;
  }
LABEL_49:
  result = *((float *)a2 + 19);
  v3 |= 0x800u;
  *((_DWORD *)this + 38) = v3;
  *((float *)this + 19) = result;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x400) == 0)
  {
LABEL_22:
    if ((v2 & 0x200) == 0)
      goto LABEL_23;
    goto LABEL_51;
  }
LABEL_50:
  result = *((float *)a2 + 18);
  v3 |= 0x400u;
  *((_DWORD *)this + 38) = v3;
  *((float *)this + 18) = result;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x200) == 0)
  {
LABEL_23:
    if ((v2 & 1) == 0)
      goto LABEL_24;
    goto LABEL_52;
  }
LABEL_51:
  result = *((float *)a2 + 17);
  v3 |= 0x200u;
  *((_DWORD *)this + 38) = v3;
  *((float *)this + 17) = result;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 1) == 0)
  {
LABEL_24:
    if ((v2 & 2) == 0)
      goto LABEL_25;
    goto LABEL_53;
  }
LABEL_52:
  v12 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *((_DWORD *)this + 38) = v3;
  *((_QWORD *)this + 1) = v12;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 2) == 0)
  {
LABEL_25:
    if ((v2 & 0x10000) == 0)
      goto LABEL_26;
    goto LABEL_54;
  }
LABEL_53:
  v13 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *((_DWORD *)this + 38) = v3;
  *((_QWORD *)this + 2) = v13;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x10000) == 0)
  {
LABEL_26:
    if ((v2 & 0x20) == 0)
      goto LABEL_27;
    goto LABEL_55;
  }
LABEL_54:
  result = *((float *)a2 + 24);
  v3 |= 0x10000u;
  *((_DWORD *)this + 38) = v3;
  *((float *)this + 24) = result;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x20) == 0)
  {
LABEL_27:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_28;
    goto LABEL_56;
  }
LABEL_55:
  v14 = *((_QWORD *)a2 + 6);
  v3 |= 0x20u;
  *((_DWORD *)this + 38) = v3;
  *((_QWORD *)this + 6) = v14;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_28:
    if ((v2 & 0x20000) == 0)
      goto LABEL_29;
    goto LABEL_57;
  }
LABEL_56:
  result = *((float *)a2 + 33);
  v3 |= 0x2000000u;
  *((_DWORD *)this + 38) = v3;
  *((float *)this + 33) = result;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x20000) == 0)
  {
LABEL_29:
    if ((v2 & 0x100) == 0)
      goto LABEL_30;
    goto LABEL_58;
  }
LABEL_57:
  result = *((float *)a2 + 25);
  v3 |= 0x20000u;
  *((_DWORD *)this + 38) = v3;
  *((float *)this + 25) = result;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x100) == 0)
  {
LABEL_30:
    if ((v2 & 0x80000) == 0)
      goto LABEL_31;
    goto LABEL_59;
  }
LABEL_58:
  result = *((float *)a2 + 16);
  v3 |= 0x100u;
  *((_DWORD *)this + 38) = v3;
  *((float *)this + 16) = result;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x80000) == 0)
  {
LABEL_31:
    if ((v2 & 0x40) == 0)
      goto LABEL_32;
    goto LABEL_60;
  }
LABEL_59:
  v15 = *((_DWORD *)a2 + 27);
  v3 |= 0x80000u;
  *((_DWORD *)this + 38) = v3;
  *((_DWORD *)this + 27) = v15;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x40) == 0)
  {
LABEL_32:
    if ((v2 & 8) == 0)
      goto LABEL_33;
    goto LABEL_61;
  }
LABEL_60:
  result = *((float *)a2 + 14);
  v3 |= 0x40u;
  *((_DWORD *)this + 38) = v3;
  *((float *)this + 14) = result;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 8) == 0)
  {
LABEL_33:
    if ((v2 & 0x80) == 0)
      return result;
LABEL_62:
    result = *((float *)a2 + 15);
    *((_DWORD *)this + 38) = v3 | 0x80;
    *((float *)this + 15) = result;
    return result;
  }
LABEL_61:
  v16 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *((_DWORD *)this + 38) = v3;
  *((_QWORD *)this + 4) = v16;
  if ((*((_DWORD *)a2 + 38) & 0x80) != 0)
    goto LABEL_62;
  return result;
}

CMMsl *CMMsl::KappaBaroResult::operator=(CMMsl *a1, const CMMsl::KappaBaroResult *a2)
{
  CMMsl::KappaBaroResult *v3;
  _BYTE v5[160];

  if (a1 != a2)
  {
    CMMsl::KappaBaroResult::KappaBaroResult((CMMsl::KappaBaroResult *)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaBaroResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaBaroResult *a2, CMMsl::KappaBaroResult *a3)
{
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  float result;

  v3 = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 148);
  *((_BYTE *)this + 148) = *((_BYTE *)a2 + 148);
  *((_BYTE *)a2 + 148) = v3;
  v4 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v4;
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  v6 = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v6;
  v7 = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v7;
  LODWORD(v5) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v5;
  LODWORD(v5) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v5;
  v8 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v8;
  v9 = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v9;
  LODWORD(v8) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v8;
  LODWORD(v8) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v8;
  v10 = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v10;
  v11 = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v11;
  v12 = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v12;
  v13 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v13;
  v14 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v14;
  v15 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v15;
  v16 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v16;
  v17 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v17;
  v18 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v18;
  v19 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v19;
  v20 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v20;
  v21 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v21;
  v22 = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v22;
  v23 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v23;
  v24 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v24;
  LODWORD(v21) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v21;
  v25 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v25;
  v26 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v26;
  result = *((float *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((float *)a2 + 15) = result;
  return result;
}

float CMMsl::KappaBaroResult::KappaBaroResult(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135E7B8;
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a2 + 152) = 0;
  *(_BYTE *)(a1 + 148) = *(_BYTE *)(a2 + 148);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  result = *(float *)(a2 + 60);
  *(float *)(a1 + 60) = result;
  return result;
}

CMMsl *CMMsl::KappaBaroResult::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::KappaBaroResult *v3;
  _BYTE v5[160];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaBaroResult::KappaBaroResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaBaroResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaBaroResult::formatText(CMMsl::KappaBaroResult *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x20000000) != 0)
  {
    PB::TextFormatter::format(a2, "airbagDetected");
    v5 = *((_DWORD *)this + 38);
    if ((v5 & 0x40) == 0)
    {
LABEL_3:
      if ((v5 & 0x80) == 0)
        goto LABEL_4;
      goto LABEL_35;
    }
  }
  else if ((v5 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "configMaximumAccelBaroTimeDifferenceThreshold", *((float *)this + 14));
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x80) == 0)
  {
LABEL_4:
    if ((v5 & 0x100) == 0)
      goto LABEL_5;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "configMinimumAccelNormInWindowThreshold", *((float *)this + 15));
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x100) == 0)
  {
LABEL_5:
    if ((v5 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "configMinimumAccelNormOverEpochThreshold", *((float *)this + 16));
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x200) == 0)
  {
LABEL_6:
    if ((v5 & 0x400) == 0)
      goto LABEL_7;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "configMinimumAccelNormThreshold", *((float *)this + 17));
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x400) == 0)
  {
LABEL_7:
    if ((v5 & 0x800) == 0)
      goto LABEL_8;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "configMinimumWidthThreshold", *((float *)this + 18));
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x800) == 0)
  {
LABEL_8:
    if ((v5 & 0x1000) == 0)
      goto LABEL_9;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "configPeakPressureThreshold", *((float *)this + 19));
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x1000) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "configRiseTimeThreshold", *((float *)this + 20));
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x2000) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000) == 0)
      goto LABEL_11;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "configWidthThreshold", *((float *)this + 21));
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x4000) == 0)
  {
LABEL_11:
    if ((v5 & 0x8000) == 0)
      goto LABEL_12;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "diffPeakTimeTrigger");
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x8000) == 0)
  {
LABEL_12:
    if ((v5 & 1) == 0)
      goto LABEL_13;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "diffTimeTrigger");
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 1) == 0)
  {
LABEL_13:
    if ((v5 & 2) == 0)
      goto LABEL_14;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "epochFirstTimestamp");
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 2) == 0)
  {
LABEL_14:
    if ((v5 & 4) == 0)
      goto LABEL_15;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "epochLastTimestamp");
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 4) == 0)
  {
LABEL_15:
    if ((v5 & 0x10000) == 0)
      goto LABEL_16;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "eventStartTime");
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x10000) == 0)
  {
LABEL_16:
    if ((v5 & 0x20000) == 0)
      goto LABEL_17;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "maxAccelNormInWindow", *((float *)this + 24));
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x20000) == 0)
  {
LABEL_17:
    if ((v5 & 8) == 0)
      goto LABEL_18;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "maxAccelNormOverEpoch", *((float *)this + 25));
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 8) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0)
      goto LABEL_19;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "maxAccelNormOverEpochTimestamp");
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 0x80000) == 0)
      goto LABEL_20;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "numAirbags");
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x80000) == 0)
  {
LABEL_20:
    if ((v5 & 0x100000) == 0)
      goto LABEL_21;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "numBarosInEpoch");
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x100000) == 0)
  {
LABEL_21:
    if ((v5 & 0x200000) == 0)
      goto LABEL_22;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "odr");
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x200000) == 0)
  {
LABEL_22:
    if ((v5 & 0x10) == 0)
      goto LABEL_23;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "peakPressure", *((float *)this + 29));
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x10) == 0)
  {
LABEL_23:
    if ((v5 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "peakTimestamp");
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x400000) == 0)
  {
LABEL_24:
    if ((v5 & 0x800000) == 0)
      goto LABEL_25;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "postEventPressureMedian", *((float *)this + 30));
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x800000) == 0)
  {
LABEL_25:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_26;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "preEventPressureMedian", *((float *)this + 31));
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_27;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "prePostEventPressureMedian", *((float *)this + 32));
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_28;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "pressureMedian", *((float *)this + 33));
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_29;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "riseTime", *((float *)this + 34));
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x20) == 0)
      goto LABEL_30;
LABEL_61:
    PB::TextFormatter::format(a2, "timestamp");
    if ((*((_DWORD *)this + 38) & 0x10000000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_31;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "riseTimeTo80", *((float *)this + 35));
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x20) != 0)
    goto LABEL_61;
LABEL_30:
  if ((v5 & 0x10000000) != 0)
LABEL_31:
    PB::TextFormatter::format(a2, "width", *((float *)this + 36));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaBaroResult::readFrom(CMMsl::KappaBaroResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  unint64_t v21;
  int v22;
  BOOL v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char v54;
  unsigned int v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char v63;
  unsigned int v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  char v87;
  unsigned int v88;
  uint64_t v89;
  unint64_t v90;
  char v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  char v95;
  unsigned int v96;
  uint64_t v97;
  unint64_t v98;
  char v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char v104;
  unsigned int v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  char v115;
  unsigned int v116;
  uint64_t v117;
  unint64_t v118;
  char v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  char v124;
  unsigned int v125;
  uint64_t v126;
  unint64_t v127;
  char v128;
  unint64_t v129;
  char v130;
  unsigned int v131;
  unint64_t v132;
  char v133;
  char v134;
  unsigned int v135;
  unint64_t v136;
  char v137;
  char v138;
  unsigned int v139;
  unint64_t v140;
  char v141;
  char v142;
  unsigned int v143;
  unint64_t v144;
  char v145;
  char v146;
  unsigned int v147;
  unint64_t v148;
  char v149;
  char v150;
  unsigned int v151;
  unint64_t v152;
  char v153;
  char v154;
  unsigned int v155;
  unint64_t v156;
  char v157;
  char v158;
  unsigned int v159;
  unint64_t v160;
  char v161;
  char v162;
  unsigned int v163;
  unint64_t v164;
  char v165;
  char v166;
  unsigned int v167;
  unint64_t v168;
  char v169;
  char v170;
  unsigned int v171;
  unint64_t v172;
  char v173;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      break;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 38) |= 0x20000000u;
        v20 = *((_QWORD *)a2 + 1);
        if (v20 >= *((_QWORD *)a2 + 2))
        {
          v23 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v21 = v20 + 1;
          v22 = *(unsigned __int8 *)(*(_QWORD *)a2 + v20);
          *((_QWORD *)a2 + 1) = v21;
          v23 = v22 != 0;
        }
        *((_BYTE *)this + 148) = v23;
        goto LABEL_237;
      case 2u:
        *((_DWORD *)this + 38) |= 0x200000u;
        v24 = *((_QWORD *)a2 + 1);
        if (v24 > 0xFFFFFFFFFFFFFFFBLL || v24 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_155;
        *((_DWORD *)this + 29) = *(_DWORD *)(*(_QWORD *)a2 + v24);
        goto LABEL_236;
      case 3u:
        *((_DWORD *)this + 38) |= 4u;
        v25 = *((_QWORD *)a2 + 1);
        v26 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v25 <= 0xFFFFFFFFFFFFFFF5 && v25 + 10 <= v26)
        {
          v28 = 0;
          v29 = 0;
          v30 = 0;
          do
          {
            v31 = v25 + 1;
            *((_QWORD *)a2 + 1) = v25 + 1;
            v32 = *(_BYTE *)(v27 + v25);
            v30 |= (unint64_t)(v32 & 0x7F) << v28;
            if ((v32 & 0x80) == 0)
              goto LABEL_245;
            v28 += 7;
            v25 = v31;
            v14 = v29++ > 8;
          }
          while (!v14);
LABEL_164:
          v30 = 0;
          goto LABEL_245;
        }
        v130 = 0;
        v131 = 0;
        v30 = 0;
        if (v26 <= v25)
          v26 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v26 == v25)
          {
            v30 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v132 = v25 + 1;
            v133 = *(_BYTE *)(v27 + v25);
            *((_QWORD *)a2 + 1) = v132;
            v30 |= (unint64_t)(v133 & 0x7F) << v130;
            if (v133 < 0)
            {
              v130 += 7;
              v25 = v132;
              v14 = v131++ > 8;
              if (v14)
                goto LABEL_164;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v30 = 0;
          }
          break;
        }
LABEL_245:
        *((_QWORD *)this + 3) = v30;
        goto LABEL_237;
      case 4u:
        *((_DWORD *)this + 38) |= 0x10000000u;
        v33 = *((_QWORD *)a2 + 1);
        if (v33 > 0xFFFFFFFFFFFFFFFBLL || v33 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_155;
        *((_DWORD *)this + 36) = *(_DWORD *)(*(_QWORD *)a2 + v33);
        goto LABEL_236;
      case 5u:
        *((_DWORD *)this + 38) |= 0x4000000u;
        v34 = *((_QWORD *)a2 + 1);
        if (v34 > 0xFFFFFFFFFFFFFFFBLL || v34 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_155;
        *((_DWORD *)this + 34) = *(_DWORD *)(*(_QWORD *)a2 + v34);
        goto LABEL_236;
      case 6u:
        *((_DWORD *)this + 38) |= 0x100000u;
        v35 = *((_QWORD *)a2 + 1);
        v36 = *((_QWORD *)a2 + 2);
        v37 = *(_QWORD *)a2;
        if (v35 <= 0xFFFFFFFFFFFFFFF5 && v35 + 10 <= v36)
        {
          v38 = 0;
          v39 = 0;
          v40 = 0;
          do
          {
            v41 = v35 + 1;
            *((_QWORD *)a2 + 1) = v35 + 1;
            v42 = *(_BYTE *)(v37 + v35);
            v40 |= (unint64_t)(v42 & 0x7F) << v38;
            if ((v42 & 0x80) == 0)
              goto LABEL_249;
            v38 += 7;
            v35 = v41;
            v14 = v39++ > 8;
          }
          while (!v14);
LABEL_171:
          LODWORD(v40) = 0;
          goto LABEL_249;
        }
        v134 = 0;
        v135 = 0;
        v40 = 0;
        if (v36 <= v35)
          v36 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v36 == v35)
          {
            LODWORD(v40) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v136 = v35 + 1;
            v137 = *(_BYTE *)(v37 + v35);
            *((_QWORD *)a2 + 1) = v136;
            v40 |= (unint64_t)(v137 & 0x7F) << v134;
            if (v137 < 0)
            {
              v134 += 7;
              v35 = v136;
              v14 = v135++ > 8;
              if (v14)
                goto LABEL_171;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v40) = 0;
          }
          break;
        }
LABEL_249:
        *((_DWORD *)this + 28) = v40;
        goto LABEL_237;
      case 7u:
        *((_DWORD *)this + 38) |= 0x40000u;
        v43 = *((_QWORD *)a2 + 1);
        v44 = *((_QWORD *)a2 + 2);
        v45 = *(_QWORD *)a2;
        if (v43 <= 0xFFFFFFFFFFFFFFF5 && v43 + 10 <= v44)
        {
          v46 = 0;
          v47 = 0;
          v48 = 0;
          do
          {
            v49 = v43 + 1;
            *((_QWORD *)a2 + 1) = v43 + 1;
            v50 = *(_BYTE *)(v45 + v43);
            v48 |= (unint64_t)(v50 & 0x7F) << v46;
            if ((v50 & 0x80) == 0)
              goto LABEL_253;
            v46 += 7;
            v43 = v49;
            v14 = v47++ > 8;
          }
          while (!v14);
LABEL_178:
          LODWORD(v48) = 0;
          goto LABEL_253;
        }
        v138 = 0;
        v139 = 0;
        v48 = 0;
        if (v44 <= v43)
          v44 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v44 == v43)
          {
            LODWORD(v48) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v140 = v43 + 1;
            v141 = *(_BYTE *)(v45 + v43);
            *((_QWORD *)a2 + 1) = v140;
            v48 |= (unint64_t)(v141 & 0x7F) << v138;
            if (v141 < 0)
            {
              v138 += 7;
              v43 = v140;
              v14 = v139++ > 8;
              if (v14)
                goto LABEL_178;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v48) = 0;
          }
          break;
        }
LABEL_253:
        *((_DWORD *)this + 26) = v48;
        goto LABEL_237;
      case 8u:
        *((_DWORD *)this + 38) |= 0x10u;
        v51 = *((_QWORD *)a2 + 1);
        v52 = *((_QWORD *)a2 + 2);
        v53 = *(_QWORD *)a2;
        if (v51 <= 0xFFFFFFFFFFFFFFF5 && v51 + 10 <= v52)
        {
          v54 = 0;
          v55 = 0;
          v56 = 0;
          do
          {
            v57 = v51 + 1;
            *((_QWORD *)a2 + 1) = v51 + 1;
            v58 = *(_BYTE *)(v53 + v51);
            v56 |= (unint64_t)(v58 & 0x7F) << v54;
            if ((v58 & 0x80) == 0)
              goto LABEL_257;
            v54 += 7;
            v51 = v57;
            v14 = v55++ > 8;
          }
          while (!v14);
LABEL_185:
          v56 = 0;
          goto LABEL_257;
        }
        v142 = 0;
        v143 = 0;
        v56 = 0;
        if (v52 <= v51)
          v52 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v52 == v51)
          {
            v56 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v144 = v51 + 1;
            v145 = *(_BYTE *)(v53 + v51);
            *((_QWORD *)a2 + 1) = v144;
            v56 |= (unint64_t)(v145 & 0x7F) << v142;
            if (v145 < 0)
            {
              v142 += 7;
              v51 = v144;
              v14 = v143++ > 8;
              if (v14)
                goto LABEL_185;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v56 = 0;
          }
          break;
        }
LABEL_257:
        *((_QWORD *)this + 5) = v56;
        goto LABEL_237;
      case 9u:
        *((_DWORD *)this + 38) |= 0x8000000u;
        v59 = *((_QWORD *)a2 + 1);
        if (v59 > 0xFFFFFFFFFFFFFFFBLL || v59 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_155;
        *((_DWORD *)this + 35) = *(_DWORD *)(*(_QWORD *)a2 + v59);
        goto LABEL_236;
      case 0xAu:
        *((_DWORD *)this + 38) |= 0x8000u;
        v60 = *((_QWORD *)a2 + 1);
        v61 = *((_QWORD *)a2 + 2);
        v62 = *(_QWORD *)a2;
        if (v60 <= 0xFFFFFFFFFFFFFFF5 && v60 + 10 <= v61)
        {
          v63 = 0;
          v64 = 0;
          v65 = 0;
          do
          {
            v66 = v60 + 1;
            *((_QWORD *)a2 + 1) = v60 + 1;
            v67 = *(_BYTE *)(v62 + v60);
            v65 |= (unint64_t)(v67 & 0x7F) << v63;
            if ((v67 & 0x80) == 0)
              goto LABEL_261;
            v63 += 7;
            v60 = v66;
            v14 = v64++ > 8;
          }
          while (!v14);
LABEL_192:
          LODWORD(v65) = 0;
          goto LABEL_261;
        }
        v146 = 0;
        v147 = 0;
        v65 = 0;
        if (v61 <= v60)
          v61 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v61 == v60)
          {
            LODWORD(v65) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v148 = v60 + 1;
            v149 = *(_BYTE *)(v62 + v60);
            *((_QWORD *)a2 + 1) = v148;
            v65 |= (unint64_t)(v149 & 0x7F) << v146;
            if (v149 < 0)
            {
              v146 += 7;
              v60 = v148;
              v14 = v147++ > 8;
              if (v14)
                goto LABEL_192;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v65) = 0;
          }
          break;
        }
LABEL_261:
        *((_DWORD *)this + 23) = v65;
        goto LABEL_237;
      case 0xBu:
        *((_DWORD *)this + 38) |= 0x4000u;
        v68 = *((_QWORD *)a2 + 1);
        v69 = *((_QWORD *)a2 + 2);
        v70 = *(_QWORD *)a2;
        if (v68 <= 0xFFFFFFFFFFFFFFF5 && v68 + 10 <= v69)
        {
          v71 = 0;
          v72 = 0;
          v73 = 0;
          do
          {
            v74 = v68 + 1;
            *((_QWORD *)a2 + 1) = v68 + 1;
            v75 = *(_BYTE *)(v70 + v68);
            v73 |= (unint64_t)(v75 & 0x7F) << v71;
            if ((v75 & 0x80) == 0)
              goto LABEL_265;
            v71 += 7;
            v68 = v74;
            v14 = v72++ > 8;
          }
          while (!v14);
LABEL_199:
          LODWORD(v73) = 0;
          goto LABEL_265;
        }
        v150 = 0;
        v151 = 0;
        v73 = 0;
        if (v69 <= v68)
          v69 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v69 == v68)
          {
            LODWORD(v73) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v152 = v68 + 1;
            v153 = *(_BYTE *)(v70 + v68);
            *((_QWORD *)a2 + 1) = v152;
            v73 |= (unint64_t)(v153 & 0x7F) << v150;
            if (v153 < 0)
            {
              v150 += 7;
              v68 = v152;
              v14 = v151++ > 8;
              if (v14)
                goto LABEL_199;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v73) = 0;
          }
          break;
        }
LABEL_265:
        *((_DWORD *)this + 22) = v73;
        goto LABEL_237;
      case 0xCu:
        *((_DWORD *)this + 38) |= 0x800000u;
        v76 = *((_QWORD *)a2 + 1);
        if (v76 > 0xFFFFFFFFFFFFFFFBLL || v76 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_155;
        *((_DWORD *)this + 31) = *(_DWORD *)(*(_QWORD *)a2 + v76);
        goto LABEL_236;
      case 0xDu:
        *((_DWORD *)this + 38) |= 0x400000u;
        v77 = *((_QWORD *)a2 + 1);
        if (v77 > 0xFFFFFFFFFFFFFFFBLL || v77 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_155;
        *((_DWORD *)this + 30) = *(_DWORD *)(*(_QWORD *)a2 + v77);
        goto LABEL_236;
      case 0xEu:
        *((_DWORD *)this + 38) |= 0x1000000u;
        v78 = *((_QWORD *)a2 + 1);
        if (v78 > 0xFFFFFFFFFFFFFFFBLL || v78 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_155;
        *((_DWORD *)this + 32) = *(_DWORD *)(*(_QWORD *)a2 + v78);
        goto LABEL_236;
      case 0xFu:
        *((_DWORD *)this + 38) |= 0x2000u;
        v79 = *((_QWORD *)a2 + 1);
        if (v79 > 0xFFFFFFFFFFFFFFFBLL || v79 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_155;
        *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v79);
        goto LABEL_236;
      case 0x10u:
        *((_DWORD *)this + 38) |= 0x1000u;
        v80 = *((_QWORD *)a2 + 1);
        if (v80 > 0xFFFFFFFFFFFFFFFBLL || v80 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_155;
        *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v80);
        goto LABEL_236;
      case 0x11u:
        *((_DWORD *)this + 38) |= 0x800u;
        v81 = *((_QWORD *)a2 + 1);
        if (v81 > 0xFFFFFFFFFFFFFFFBLL || v81 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_155;
        *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v81);
        goto LABEL_236;
      case 0x12u:
        *((_DWORD *)this + 38) |= 0x400u;
        v82 = *((_QWORD *)a2 + 1);
        if (v82 > 0xFFFFFFFFFFFFFFFBLL || v82 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_155;
        *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v82);
        goto LABEL_236;
      case 0x13u:
        *((_DWORD *)this + 38) |= 0x200u;
        v83 = *((_QWORD *)a2 + 1);
        if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_155;
        *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v83);
        goto LABEL_236;
      case 0x14u:
        *((_DWORD *)this + 38) |= 1u;
        v84 = *((_QWORD *)a2 + 1);
        v85 = *((_QWORD *)a2 + 2);
        v86 = *(_QWORD *)a2;
        if (v84 <= 0xFFFFFFFFFFFFFFF5 && v84 + 10 <= v85)
        {
          v87 = 0;
          v88 = 0;
          v89 = 0;
          do
          {
            v90 = v84 + 1;
            *((_QWORD *)a2 + 1) = v84 + 1;
            v91 = *(_BYTE *)(v86 + v84);
            v89 |= (unint64_t)(v91 & 0x7F) << v87;
            if ((v91 & 0x80) == 0)
              goto LABEL_269;
            v87 += 7;
            v84 = v90;
            v14 = v88++ > 8;
          }
          while (!v14);
LABEL_206:
          v89 = 0;
          goto LABEL_269;
        }
        v154 = 0;
        v155 = 0;
        v89 = 0;
        if (v85 <= v84)
          v85 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v85 == v84)
          {
            v89 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v156 = v84 + 1;
            v157 = *(_BYTE *)(v86 + v84);
            *((_QWORD *)a2 + 1) = v156;
            v89 |= (unint64_t)(v157 & 0x7F) << v154;
            if (v157 < 0)
            {
              v154 += 7;
              v84 = v156;
              v14 = v155++ > 8;
              if (v14)
                goto LABEL_206;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v89 = 0;
          }
          break;
        }
LABEL_269:
        *((_QWORD *)this + 1) = v89;
        goto LABEL_237;
      case 0x15u:
        *((_DWORD *)this + 38) |= 2u;
        v92 = *((_QWORD *)a2 + 1);
        v93 = *((_QWORD *)a2 + 2);
        v94 = *(_QWORD *)a2;
        if (v92 <= 0xFFFFFFFFFFFFFFF5 && v92 + 10 <= v93)
        {
          v95 = 0;
          v96 = 0;
          v97 = 0;
          do
          {
            v98 = v92 + 1;
            *((_QWORD *)a2 + 1) = v92 + 1;
            v99 = *(_BYTE *)(v94 + v92);
            v97 |= (unint64_t)(v99 & 0x7F) << v95;
            if ((v99 & 0x80) == 0)
              goto LABEL_273;
            v95 += 7;
            v92 = v98;
            v14 = v96++ > 8;
          }
          while (!v14);
LABEL_213:
          v97 = 0;
          goto LABEL_273;
        }
        v158 = 0;
        v159 = 0;
        v97 = 0;
        if (v93 <= v92)
          v93 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v93 == v92)
          {
            v97 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v160 = v92 + 1;
            v161 = *(_BYTE *)(v94 + v92);
            *((_QWORD *)a2 + 1) = v160;
            v97 |= (unint64_t)(v161 & 0x7F) << v158;
            if (v161 < 0)
            {
              v158 += 7;
              v92 = v160;
              v14 = v159++ > 8;
              if (v14)
                goto LABEL_213;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v97 = 0;
          }
          break;
        }
LABEL_273:
        *((_QWORD *)this + 2) = v97;
        goto LABEL_237;
      case 0x16u:
        *((_DWORD *)this + 38) |= 0x10000u;
        v100 = *((_QWORD *)a2 + 1);
        if (v100 > 0xFFFFFFFFFFFFFFFBLL || v100 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_155;
        *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v100);
        goto LABEL_236;
      case 0x17u:
        *((_DWORD *)this + 38) |= 0x20u;
        v101 = *((_QWORD *)a2 + 1);
        v102 = *((_QWORD *)a2 + 2);
        v103 = *(_QWORD *)a2;
        if (v101 <= 0xFFFFFFFFFFFFFFF5 && v101 + 10 <= v102)
        {
          v104 = 0;
          v105 = 0;
          v106 = 0;
          do
          {
            v107 = v101 + 1;
            *((_QWORD *)a2 + 1) = v101 + 1;
            v108 = *(_BYTE *)(v103 + v101);
            v106 |= (unint64_t)(v108 & 0x7F) << v104;
            if ((v108 & 0x80) == 0)
              goto LABEL_277;
            v104 += 7;
            v101 = v107;
            v14 = v105++ > 8;
          }
          while (!v14);
LABEL_220:
          v106 = 0;
          goto LABEL_277;
        }
        v162 = 0;
        v163 = 0;
        v106 = 0;
        if (v102 <= v101)
          v102 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v102 == v101)
          {
            v106 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v164 = v101 + 1;
            v165 = *(_BYTE *)(v103 + v101);
            *((_QWORD *)a2 + 1) = v164;
            v106 |= (unint64_t)(v165 & 0x7F) << v162;
            if (v165 < 0)
            {
              v162 += 7;
              v101 = v164;
              v14 = v163++ > 8;
              if (v14)
                goto LABEL_220;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v106 = 0;
          }
          break;
        }
LABEL_277:
        *((_QWORD *)this + 6) = v106;
        goto LABEL_237;
      case 0x18u:
        *((_DWORD *)this + 38) |= 0x2000000u;
        v109 = *((_QWORD *)a2 + 1);
        if (v109 > 0xFFFFFFFFFFFFFFFBLL || v109 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_155;
        *((_DWORD *)this + 33) = *(_DWORD *)(*(_QWORD *)a2 + v109);
        goto LABEL_236;
      case 0x19u:
        *((_DWORD *)this + 38) |= 0x20000u;
        v110 = *((_QWORD *)a2 + 1);
        if (v110 > 0xFFFFFFFFFFFFFFFBLL || v110 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_155;
        *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v110);
        goto LABEL_236;
      case 0x1Au:
        *((_DWORD *)this + 38) |= 0x100u;
        v111 = *((_QWORD *)a2 + 1);
        if (v111 > 0xFFFFFFFFFFFFFFFBLL || v111 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_155;
        *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v111);
        goto LABEL_236;
      case 0x1Bu:
        *((_DWORD *)this + 38) |= 0x80000u;
        v112 = *((_QWORD *)a2 + 1);
        v113 = *((_QWORD *)a2 + 2);
        v114 = *(_QWORD *)a2;
        if (v112 <= 0xFFFFFFFFFFFFFFF5 && v112 + 10 <= v113)
        {
          v115 = 0;
          v116 = 0;
          v117 = 0;
          do
          {
            v118 = v112 + 1;
            *((_QWORD *)a2 + 1) = v112 + 1;
            v119 = *(_BYTE *)(v114 + v112);
            v117 |= (unint64_t)(v119 & 0x7F) << v115;
            if ((v119 & 0x80) == 0)
              goto LABEL_281;
            v115 += 7;
            v112 = v118;
            v14 = v116++ > 8;
          }
          while (!v14);
LABEL_227:
          LODWORD(v117) = 0;
          goto LABEL_281;
        }
        v166 = 0;
        v167 = 0;
        v117 = 0;
        if (v113 <= v112)
          v113 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v113 == v112)
          {
            LODWORD(v117) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v168 = v112 + 1;
            v169 = *(_BYTE *)(v114 + v112);
            *((_QWORD *)a2 + 1) = v168;
            v117 |= (unint64_t)(v169 & 0x7F) << v166;
            if (v169 < 0)
            {
              v166 += 7;
              v112 = v168;
              v14 = v167++ > 8;
              if (v14)
                goto LABEL_227;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v117) = 0;
          }
          break;
        }
LABEL_281:
        *((_DWORD *)this + 27) = v117;
        goto LABEL_237;
      case 0x1Cu:
        *((_DWORD *)this + 38) |= 0x40u;
        v120 = *((_QWORD *)a2 + 1);
        if (v120 > 0xFFFFFFFFFFFFFFFBLL || v120 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_155;
        *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v120);
        goto LABEL_236;
      case 0x1Du:
        *((_DWORD *)this + 38) |= 8u;
        v121 = *((_QWORD *)a2 + 1);
        v122 = *((_QWORD *)a2 + 2);
        v123 = *(_QWORD *)a2;
        if (v121 <= 0xFFFFFFFFFFFFFFF5 && v121 + 10 <= v122)
        {
          v124 = 0;
          v125 = 0;
          v126 = 0;
          do
          {
            v127 = v121 + 1;
            *((_QWORD *)a2 + 1) = v121 + 1;
            v128 = *(_BYTE *)(v123 + v121);
            v126 |= (unint64_t)(v128 & 0x7F) << v124;
            if ((v128 & 0x80) == 0)
              goto LABEL_285;
            v124 += 7;
            v121 = v127;
            v14 = v125++ > 8;
          }
          while (!v14);
LABEL_234:
          v126 = 0;
          goto LABEL_285;
        }
        v170 = 0;
        v171 = 0;
        v126 = 0;
        if (v122 <= v121)
          v122 = *((_QWORD *)a2 + 1);
        break;
      case 0x1Eu:
        *((_DWORD *)this + 38) |= 0x80u;
        v129 = *((_QWORD *)a2 + 1);
        if (v129 <= 0xFFFFFFFFFFFFFFFBLL && v129 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v129);
LABEL_236:
          *((_QWORD *)a2 + 1) += 4;
        }
        else
        {
LABEL_155:
          *((_BYTE *)a2 + 24) = 1;
        }
        goto LABEL_237;
      default:
        goto LABEL_19;
    }
    while (1)
    {
      if (v122 == v121)
      {
        v126 = 0;
        *((_BYTE *)a2 + 24) = 1;
        goto LABEL_285;
      }
      v172 = v121 + 1;
      v173 = *(_BYTE *)(v123 + v121);
      *((_QWORD *)a2 + 1) = v172;
      v126 |= (unint64_t)(v173 & 0x7F) << v170;
      if ((v173 & 0x80) == 0)
        break;
      v170 += 7;
      v121 = v172;
      v14 = v171++ > 8;
      if (v14)
        goto LABEL_234;
    }
    if (*((_BYTE *)a2 + 24))
      v126 = 0;
LABEL_285:
    *((_QWORD *)this + 4) = v126;
LABEL_237:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v15 = 0;
  v16 = 0;
  v11 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v17 = v2 + 1;
    v18 = *(_BYTE *)(v8 + v2);
    *((_QWORD *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0)
      goto LABEL_21;
    v15 += 7;
    v2 = v17;
    v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  result = PB::Reader::skip(a2);
  if ((_DWORD)result)
    goto LABEL_237;
  return result;
}

uint64_t CMMsl::KappaBaroResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 152);
  if ((v4 & 0x20000000) != 0)
  {
    this = PB::Writer::write(a2);
    v4 = *(_DWORD *)(v3 + 152);
    if ((v4 & 0x200000) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_34;
    }
  }
  else if ((v4 & 0x200000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 116));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_5;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_5:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_6;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 144));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x100000) == 0)
      goto LABEL_7;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 136));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x100000) == 0)
  {
LABEL_7:
    if ((v4 & 0x40000) == 0)
      goto LABEL_8;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x40000) == 0)
  {
LABEL_8:
    if ((v4 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x10) == 0)
  {
LABEL_9:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_10;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x8000) == 0)
      goto LABEL_11;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(float *)(v3 + 140));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x8000) == 0)
  {
LABEL_11:
    if ((v4 & 0x4000) == 0)
      goto LABEL_12;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x4000) == 0)
  {
LABEL_12:
    if ((v4 & 0x800000) == 0)
      goto LABEL_13;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x800000) == 0)
  {
LABEL_13:
    if ((v4 & 0x400000) == 0)
      goto LABEL_14;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(float *)(v3 + 124));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x400000) == 0)
  {
LABEL_14:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_15;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(float *)(v3 + 120));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x2000) == 0)
      goto LABEL_16;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(float *)(v3 + 128));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x2000) == 0)
  {
LABEL_16:
    if ((v4 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(float *)(v3 + 84));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x1000) == 0)
  {
LABEL_17:
    if ((v4 & 0x800) == 0)
      goto LABEL_18;
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(float *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x800) == 0)
  {
LABEL_18:
    if ((v4 & 0x400) == 0)
      goto LABEL_19;
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(float *)(v3 + 76));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x400) == 0)
  {
LABEL_19:
    if ((v4 & 0x200) == 0)
      goto LABEL_20;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(float *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x200) == 0)
  {
LABEL_20:
    if ((v4 & 1) == 0)
      goto LABEL_21;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(float *)(v3 + 68));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 1) == 0)
  {
LABEL_21:
    if ((v4 & 2) == 0)
      goto LABEL_22;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 2) == 0)
  {
LABEL_22:
    if ((v4 & 0x10000) == 0)
      goto LABEL_23;
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x10000) == 0)
  {
LABEL_23:
    if ((v4 & 0x20) == 0)
      goto LABEL_24;
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::write(a2, *(float *)(v3 + 96));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x20) == 0)
  {
LABEL_24:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_25;
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x20000) == 0)
      goto LABEL_26;
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::write(a2, *(float *)(v3 + 132));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x20000) == 0)
  {
LABEL_26:
    if ((v4 & 0x100) == 0)
      goto LABEL_27;
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::write(a2, *(float *)(v3 + 100));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x100) == 0)
  {
LABEL_27:
    if ((v4 & 0x80000) == 0)
      goto LABEL_28;
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(float *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x80000) == 0)
  {
LABEL_28:
    if ((v4 & 0x40) == 0)
      goto LABEL_29;
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x40) == 0)
  {
LABEL_29:
    if ((v4 & 8) == 0)
      goto LABEL_30;
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 8) == 0)
  {
LABEL_30:
    if ((v4 & 0x80) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 60));
  }
LABEL_60:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_DWORD *)(v3 + 152) & 0x80) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 60));
  return this;
}

uint64_t CMMsl::KappaBaroResult::hash_value(CMMsl::KappaBaroResult *this)
{
  int v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v1 = *((_DWORD *)this + 38);
  if ((v1 & 0x20000000) == 0)
  {
    v51 = 0;
    if ((v1 & 0x200000) != 0)
      goto LABEL_3;
LABEL_84:
    v50 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_6;
    goto LABEL_85;
  }
  v51 = *((unsigned __int8 *)this + 148);
  if ((v1 & 0x200000) == 0)
    goto LABEL_84;
LABEL_3:
  v2 = *((float *)this + 29);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  v50 = v3;
  if ((v1 & 4) != 0)
  {
LABEL_6:
    v49 = *((_QWORD *)this + 3);
    if ((v1 & 0x10000000) != 0)
      goto LABEL_7;
LABEL_86:
    v5 = 0;
    if ((v1 & 0x4000000) != 0)
      goto LABEL_11;
LABEL_87:
    v7 = 0;
    if ((v1 & 0x100000) != 0)
      goto LABEL_15;
    goto LABEL_88;
  }
LABEL_85:
  v49 = 0;
  if ((v1 & 0x10000000) == 0)
    goto LABEL_86;
LABEL_7:
  v4 = *((float *)this + 36);
  if (v4 == 0.0)
    v5 = 0;
  else
    v5 = LODWORD(v4);
  if ((v1 & 0x4000000) == 0)
    goto LABEL_87;
LABEL_11:
  v6 = *((float *)this + 34);
  if (v6 == 0.0)
    v7 = 0;
  else
    v7 = LODWORD(v6);
  if ((v1 & 0x100000) != 0)
  {
LABEL_15:
    v8 = *((int *)this + 28);
    if ((v1 & 0x40000) != 0)
      goto LABEL_16;
    goto LABEL_89;
  }
LABEL_88:
  v8 = 0;
  if ((v1 & 0x40000) != 0)
  {
LABEL_16:
    v9 = *((unsigned int *)this + 26);
    if ((v1 & 0x10) != 0)
      goto LABEL_17;
    goto LABEL_90;
  }
LABEL_89:
  v9 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_17:
    v10 = *((_QWORD *)this + 5);
    if ((v1 & 0x8000000) != 0)
      goto LABEL_18;
LABEL_91:
    v12 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_22;
    goto LABEL_92;
  }
LABEL_90:
  v10 = 0;
  if ((v1 & 0x8000000) == 0)
    goto LABEL_91;
LABEL_18:
  v11 = *((float *)this + 35);
  if (v11 == 0.0)
    v12 = 0;
  else
    v12 = LODWORD(v11);
  if ((v1 & 0x8000) != 0)
  {
LABEL_22:
    v13 = *((int *)this + 23);
    if ((v1 & 0x4000) != 0)
      goto LABEL_23;
    goto LABEL_93;
  }
LABEL_92:
  v13 = 0;
  if ((v1 & 0x4000) != 0)
  {
LABEL_23:
    v14 = *((int *)this + 22);
    if ((v1 & 0x800000) != 0)
      goto LABEL_24;
LABEL_94:
    v16 = 0;
    if ((v1 & 0x400000) != 0)
      goto LABEL_28;
LABEL_95:
    v18 = 0;
    if ((v1 & 0x1000000) != 0)
      goto LABEL_32;
LABEL_96:
    v20 = 0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_36;
LABEL_97:
    v22 = 0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_40;
LABEL_98:
    v24 = 0;
    if ((v1 & 0x800) != 0)
      goto LABEL_44;
LABEL_99:
    v26 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_48;
LABEL_100:
    v28 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_52;
LABEL_101:
    v30 = 0;
    if ((v1 & 1) != 0)
      goto LABEL_56;
    goto LABEL_102;
  }
LABEL_93:
  v14 = 0;
  if ((v1 & 0x800000) == 0)
    goto LABEL_94;
LABEL_24:
  v15 = *((float *)this + 31);
  if (v15 == 0.0)
    v16 = 0;
  else
    v16 = LODWORD(v15);
  if ((v1 & 0x400000) == 0)
    goto LABEL_95;
LABEL_28:
  v17 = *((float *)this + 30);
  if (v17 == 0.0)
    v18 = 0;
  else
    v18 = LODWORD(v17);
  if ((v1 & 0x1000000) == 0)
    goto LABEL_96;
LABEL_32:
  v19 = *((float *)this + 32);
  if (v19 == 0.0)
    v20 = 0;
  else
    v20 = LODWORD(v19);
  if ((v1 & 0x2000) == 0)
    goto LABEL_97;
LABEL_36:
  v21 = *((float *)this + 21);
  if (v21 == 0.0)
    v22 = 0;
  else
    v22 = LODWORD(v21);
  if ((v1 & 0x1000) == 0)
    goto LABEL_98;
LABEL_40:
  v23 = *((float *)this + 20);
  if (v23 == 0.0)
    v24 = 0;
  else
    v24 = LODWORD(v23);
  if ((v1 & 0x800) == 0)
    goto LABEL_99;
LABEL_44:
  v25 = *((float *)this + 19);
  if (v25 == 0.0)
    v26 = 0;
  else
    v26 = LODWORD(v25);
  if ((v1 & 0x400) == 0)
    goto LABEL_100;
LABEL_48:
  v27 = *((float *)this + 18);
  if (v27 == 0.0)
    v28 = 0;
  else
    v28 = LODWORD(v27);
  if ((v1 & 0x200) == 0)
    goto LABEL_101;
LABEL_52:
  v29 = *((float *)this + 17);
  if (v29 == 0.0)
    v30 = 0;
  else
    v30 = LODWORD(v29);
  if ((v1 & 1) != 0)
  {
LABEL_56:
    v31 = *((_QWORD *)this + 1);
    if ((v1 & 2) != 0)
      goto LABEL_57;
    goto LABEL_103;
  }
LABEL_102:
  v31 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_57:
    v32 = *((_QWORD *)this + 2);
    if ((v1 & 0x10000) != 0)
      goto LABEL_58;
LABEL_104:
    v34 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_62;
    goto LABEL_105;
  }
LABEL_103:
  v32 = 0;
  if ((v1 & 0x10000) == 0)
    goto LABEL_104;
LABEL_58:
  v33 = *((float *)this + 24);
  if (v33 == 0.0)
    v34 = 0;
  else
    v34 = LODWORD(v33);
  if ((v1 & 0x20) != 0)
  {
LABEL_62:
    v35 = *((_QWORD *)this + 6);
    if ((v1 & 0x2000000) != 0)
      goto LABEL_63;
LABEL_106:
    v37 = 0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_67;
LABEL_107:
    v39 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_71;
LABEL_108:
    v41 = 0;
    if ((v1 & 0x80000) != 0)
      goto LABEL_75;
    goto LABEL_109;
  }
LABEL_105:
  v35 = 0;
  if ((v1 & 0x2000000) == 0)
    goto LABEL_106;
LABEL_63:
  v36 = *((float *)this + 33);
  if (v36 == 0.0)
    v37 = 0;
  else
    v37 = LODWORD(v36);
  if ((v1 & 0x20000) == 0)
    goto LABEL_107;
LABEL_67:
  v38 = *((float *)this + 25);
  if (v38 == 0.0)
    v39 = 0;
  else
    v39 = LODWORD(v38);
  if ((v1 & 0x100) == 0)
    goto LABEL_108;
LABEL_71:
  v40 = *((float *)this + 16);
  if (v40 == 0.0)
    v41 = 0;
  else
    v41 = LODWORD(v40);
  if ((v1 & 0x80000) != 0)
  {
LABEL_75:
    v42 = *((unsigned int *)this + 27);
    if ((v1 & 0x40) != 0)
      goto LABEL_76;
LABEL_110:
    v44 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_79;
    goto LABEL_111;
  }
LABEL_109:
  v42 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_110;
LABEL_76:
  v43 = *((float *)this + 14);
  v44 = LODWORD(v43);
  if (v43 == 0.0)
    v44 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_79:
    v45 = *((_QWORD *)this + 4);
    if ((v1 & 0x80) != 0)
      goto LABEL_80;
LABEL_112:
    v47 = 0;
    return v50 ^ v51 ^ v49 ^ v5 ^ v7 ^ v8 ^ v9 ^ v10 ^ v12 ^ v13 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v31 ^ v32 ^ v34 ^ v35 ^ v37 ^ v39 ^ v41 ^ v42 ^ v44 ^ v45 ^ v47;
  }
LABEL_111:
  v45 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_112;
LABEL_80:
  v46 = *((float *)this + 15);
  v47 = LODWORD(v46);
  if (v46 == 0.0)
    v47 = 0;
  return v50 ^ v51 ^ v49 ^ v5 ^ v7 ^ v8 ^ v9 ^ v10 ^ v12 ^ v13 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v31 ^ v32 ^ v34 ^ v35 ^ v37 ^ v39 ^ v41 ^ v42 ^ v44 ^ v45 ^ v47;
}

void CMMsl::KappaCrashResult::~KappaCrashResult(CMMsl::KappaCrashResult *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::KappaCrashResult::KappaCrashResult(CMMsl::KappaCrashResult *this, const CMMsl::KappaCrashResult *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  __int16 v7;
  uint64_t v8;
  float result;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  int v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  int v22;
  char v23;

  *(_QWORD *)this = &off_25135E7F0;
  v2 = (uint64_t *)((char *)this + 280);
  *((_QWORD *)this + 35) = 0;
  *((_DWORD *)this + 72) = 0;
  v3 = (uint64_t *)((char *)a2 + 280);
  v4 = *((_QWORD *)a2 + 35);
  if ((v4 & 1) != 0)
  {
    v6 = 0;
    v8 = *((_QWORD *)a2 + 1);
    *((_WORD *)this + 144) = 0;
    v5 = 1;
    *v2 = 1;
    *((_QWORD *)this + 1) = v8;
    v4 = *v3;
    v7 = *((_WORD *)a2 + 144);
    if ((*v3 & 0x2000000000000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = 0;
  v6 = 0;
  v7 = *((_WORD *)a2 + 144);
  if ((v4 & 0x2000000000000) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 52);
    v5 |= 0x2000000000000uLL;
    *v2 = v5;
    *((_WORD *)this + 144) = 0;
    *((float *)this + 52) = result;
    v4 = *v3;
    v7 = *((_WORD *)a2 + 144);
  }
LABEL_6:
  if ((v7 & 0x100) != 0)
  {
    v10 = *((_BYTE *)a2 + 276);
    v6 = 256;
    *v2 = v5;
    *((_WORD *)this + 144) = 256;
    *((_BYTE *)this + 276) = v10;
    v4 = *v3;
    v7 = *((_WORD *)a2 + 144);
    if ((v7 & 0x80) == 0)
    {
LABEL_8:
      if ((v7 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_83;
    }
  }
  else if ((v7 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  v11 = *((_BYTE *)a2 + 275);
  v6 |= 0x80u;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((_BYTE *)this + 275) = v11;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((v7 & 0x20) == 0)
  {
LABEL_9:
    if ((v7 & 4) == 0)
      goto LABEL_10;
    goto LABEL_84;
  }
LABEL_83:
  v12 = *((_BYTE *)a2 + 273);
  v6 |= 0x20u;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((_BYTE *)this + 273) = v12;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((v7 & 4) == 0)
  {
LABEL_10:
    if ((v7 & 2) == 0)
      goto LABEL_11;
    goto LABEL_85;
  }
LABEL_84:
  v13 = *((_BYTE *)a2 + 270);
  v6 |= 4u;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((_BYTE *)this + 270) = v13;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((v7 & 2) == 0)
  {
LABEL_11:
    if ((v4 & 0x40000) == 0)
      goto LABEL_12;
    goto LABEL_86;
  }
LABEL_85:
  v14 = *((_BYTE *)a2 + 269);
  v6 |= 2u;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((_BYTE *)this + 269) = v14;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x40000) == 0)
  {
LABEL_12:
    if ((v7 & 1) == 0)
      goto LABEL_13;
    goto LABEL_87;
  }
LABEL_86:
  v15 = *((_DWORD *)a2 + 21);
  v5 |= 0x40000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((_DWORD *)this + 21) = v15;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((v7 & 1) == 0)
  {
LABEL_13:
    if ((v7 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_88;
  }
LABEL_87:
  v16 = *((_BYTE *)a2 + 268);
  v6 |= 1u;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((_BYTE *)this + 268) = v16;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((v7 & 0x10) == 0)
  {
LABEL_14:
    if ((v4 & 0x20000) == 0)
      goto LABEL_15;
    goto LABEL_89;
  }
LABEL_88:
  v17 = *((_BYTE *)a2 + 272);
  v6 |= 0x10u;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((_BYTE *)this + 272) = v17;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x20000) == 0)
  {
LABEL_15:
    if ((v4 & 0x10000) == 0)
      goto LABEL_16;
    goto LABEL_90;
  }
LABEL_89:
  result = *((float *)a2 + 20);
  v5 |= 0x20000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 20) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x10000) == 0)
  {
LABEL_16:
    if ((v4 & 0x400000) == 0)
      goto LABEL_17;
    goto LABEL_91;
  }
LABEL_90:
  result = *((float *)a2 + 19);
  v5 |= 0x10000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 19) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x400000) == 0)
  {
LABEL_17:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_18;
    goto LABEL_92;
  }
LABEL_91:
  result = *((float *)a2 + 25);
  v5 |= 0x400000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 25) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x8000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x100000000) == 0)
      goto LABEL_19;
    goto LABEL_93;
  }
LABEL_92:
  result = *((float *)a2 + 30);
  v5 |= 0x8000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 30) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x100000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x4000000000000) == 0)
      goto LABEL_20;
    goto LABEL_94;
  }
LABEL_93:
  result = *((float *)a2 + 35);
  v5 |= 0x100000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 35) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x4000000000000) == 0)
  {
LABEL_20:
    if ((v4 & 0x800000) == 0)
      goto LABEL_21;
    goto LABEL_95;
  }
LABEL_94:
  result = *((float *)a2 + 53);
  v5 |= 0x4000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 53) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x800000) == 0)
  {
LABEL_21:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_22;
    goto LABEL_96;
  }
LABEL_95:
  result = *((float *)a2 + 26);
  v5 |= 0x800000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 26) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x10000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x200000000) == 0)
      goto LABEL_23;
    goto LABEL_97;
  }
LABEL_96:
  result = *((float *)a2 + 31);
  v5 |= 0x10000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 31) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x200000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x8000000000000) == 0)
      goto LABEL_24;
    goto LABEL_98;
  }
LABEL_97:
  result = *((float *)a2 + 36);
  v5 |= 0x200000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 36) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x8000000000000) == 0)
  {
LABEL_24:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_25;
    goto LABEL_99;
  }
LABEL_98:
  result = *((float *)a2 + 54);
  v5 |= 0x8000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 54) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_26;
    goto LABEL_100;
  }
LABEL_99:
  result = *((float *)a2 + 27);
  v5 |= 0x1000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 27) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x20000000) == 0)
  {
LABEL_26:
    if ((v4 & 0x400000000) == 0)
      goto LABEL_27;
    goto LABEL_101;
  }
LABEL_100:
  result = *((float *)a2 + 32);
  v5 |= 0x20000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 32) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x400000000) == 0)
  {
LABEL_27:
    if ((v4 & 0x10000000000000) == 0)
      goto LABEL_28;
    goto LABEL_102;
  }
LABEL_101:
  result = *((float *)a2 + 37);
  v5 |= 0x400000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 37) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x10000000000000) == 0)
  {
LABEL_28:
    if ((v4 & 0x80000) == 0)
      goto LABEL_29;
    goto LABEL_103;
  }
LABEL_102:
  result = *((float *)a2 + 55);
  v5 |= 0x10000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 55) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x80000) == 0)
  {
LABEL_29:
    if ((v4 & 0x100000) == 0)
      goto LABEL_30;
    goto LABEL_104;
  }
LABEL_103:
  result = *((float *)a2 + 22);
  v5 |= 0x80000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 22) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x100000) == 0)
  {
LABEL_30:
    if ((v4 & 0x200000) == 0)
      goto LABEL_31;
    goto LABEL_105;
  }
LABEL_104:
  result = *((float *)a2 + 23);
  v5 |= 0x100000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 23) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x200000) == 0)
  {
LABEL_31:
    if ((v4 & 0x100000000000000) == 0)
      goto LABEL_32;
    goto LABEL_106;
  }
LABEL_105:
  result = *((float *)a2 + 24);
  v5 |= 0x200000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 24) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x100000000000000) == 0)
  {
LABEL_32:
    if ((v4 & 0x80000000000000) == 0)
      goto LABEL_33;
    goto LABEL_107;
  }
LABEL_106:
  result = *((float *)a2 + 59);
  v5 |= 0x100000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 59) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x80000000000000) == 0)
  {
LABEL_33:
    if ((v4 & 0x200000000000000) == 0)
      goto LABEL_34;
    goto LABEL_108;
  }
LABEL_107:
  result = *((float *)a2 + 58);
  v5 |= 0x80000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 58) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x200000000000000) == 0)
  {
LABEL_34:
    if ((v4 & 0x40) == 0)
      goto LABEL_35;
    goto LABEL_109;
  }
LABEL_108:
  result = *((float *)a2 + 60);
  v5 |= 0x200000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 60) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x40) == 0)
  {
LABEL_35:
    if ((v4 & 2) == 0)
      goto LABEL_36;
    goto LABEL_110;
  }
LABEL_109:
  result = *((float *)a2 + 9);
  v5 |= 0x40uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 9) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 2) == 0)
  {
LABEL_36:
    if ((v4 & 0x8000) == 0)
      goto LABEL_37;
    goto LABEL_111;
  }
LABEL_110:
  result = *((float *)a2 + 4);
  v5 |= 2uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 4) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x8000) == 0)
  {
LABEL_37:
    if ((v7 & 0x800) == 0)
      goto LABEL_38;
    goto LABEL_112;
  }
LABEL_111:
  result = *((float *)a2 + 18);
  v5 |= 0x8000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 18) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((v7 & 0x800) == 0)
  {
LABEL_38:
    if ((v7 & 8) == 0)
      goto LABEL_39;
    goto LABEL_113;
  }
LABEL_112:
  v18 = *((_BYTE *)a2 + 279);
  v6 |= 0x800u;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((_BYTE *)this + 279) = v18;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((v7 & 8) == 0)
  {
LABEL_39:
    if ((v4 & 0x80) == 0)
      goto LABEL_40;
    goto LABEL_114;
  }
LABEL_113:
  v19 = *((_BYTE *)a2 + 271);
  v6 |= 8u;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((_BYTE *)this + 271) = v19;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x80) == 0)
  {
LABEL_40:
    if ((v4 & 0x400) == 0)
      goto LABEL_41;
    goto LABEL_115;
  }
LABEL_114:
  result = *((float *)a2 + 10);
  v5 |= 0x80uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 10) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x400) == 0)
  {
LABEL_41:
    if ((v4 & 0x200) == 0)
      goto LABEL_42;
    goto LABEL_116;
  }
LABEL_115:
  result = *((float *)a2 + 13);
  v5 |= 0x400uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 13) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x200) == 0)
  {
LABEL_42:
    if ((v4 & 0x100) == 0)
      goto LABEL_43;
    goto LABEL_117;
  }
LABEL_116:
  result = *((float *)a2 + 12);
  v5 |= 0x200uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 12) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x100) == 0)
  {
LABEL_43:
    if ((v4 & 4) == 0)
      goto LABEL_44;
    goto LABEL_118;
  }
LABEL_117:
  result = *((float *)a2 + 11);
  v5 |= 0x100uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 11) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 4) == 0)
  {
LABEL_44:
    if ((v4 & 0x20) == 0)
      goto LABEL_45;
    goto LABEL_119;
  }
LABEL_118:
  result = *((float *)a2 + 5);
  v5 |= 4uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 5) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x20) == 0)
  {
LABEL_45:
    if ((v4 & 0x10) == 0)
      goto LABEL_46;
    goto LABEL_120;
  }
LABEL_119:
  result = *((float *)a2 + 8);
  v5 |= 0x20uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 8) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x10) == 0)
  {
LABEL_46:
    if ((v4 & 8) == 0)
      goto LABEL_47;
    goto LABEL_121;
  }
LABEL_120:
  result = *((float *)a2 + 7);
  v5 |= 0x10uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 7) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 8) == 0)
  {
LABEL_47:
    if ((v4 & 0x800) == 0)
      goto LABEL_48;
    goto LABEL_122;
  }
LABEL_121:
  result = *((float *)a2 + 6);
  v5 |= 8uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 6) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x800) == 0)
  {
LABEL_48:
    if ((v4 & 0x4000) == 0)
      goto LABEL_49;
    goto LABEL_123;
  }
LABEL_122:
  result = *((float *)a2 + 14);
  v5 |= 0x800uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 14) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x4000) == 0)
  {
LABEL_49:
    if ((v4 & 0x2000) == 0)
      goto LABEL_50;
    goto LABEL_124;
  }
LABEL_123:
  result = *((float *)a2 + 17);
  v5 |= 0x4000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 17) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x2000) == 0)
  {
LABEL_50:
    if ((v4 & 0x1000) == 0)
      goto LABEL_51;
    goto LABEL_125;
  }
LABEL_124:
  result = *((float *)a2 + 16);
  v5 |= 0x2000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 16) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x1000) == 0)
  {
LABEL_51:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_52;
    goto LABEL_126;
  }
LABEL_125:
  result = *((float *)a2 + 15);
  v5 |= 0x1000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 15) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x2000000) == 0)
  {
LABEL_52:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_53;
    goto LABEL_127;
  }
LABEL_126:
  result = *((float *)a2 + 28);
  v5 |= 0x2000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 28) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x40000000) == 0)
  {
LABEL_53:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_54;
    goto LABEL_128;
  }
LABEL_127:
  result = *((float *)a2 + 33);
  v5 |= 0x40000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 33) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x800000000) == 0)
  {
LABEL_54:
    if ((v4 & 0x20000000000000) == 0)
      goto LABEL_55;
    goto LABEL_129;
  }
LABEL_128:
  result = *((float *)a2 + 38);
  v5 |= 0x800000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 38) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x20000000000000) == 0)
  {
LABEL_55:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_56;
    goto LABEL_130;
  }
LABEL_129:
  result = *((float *)a2 + 56);
  v5 |= 0x20000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 56) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x4000000) == 0)
  {
LABEL_56:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_57;
    goto LABEL_131;
  }
LABEL_130:
  result = *((float *)a2 + 29);
  v5 |= 0x4000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 29) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x80000000) == 0)
  {
LABEL_57:
    if ((v4 & 0x1000000000) == 0)
      goto LABEL_58;
    goto LABEL_132;
  }
LABEL_131:
  result = *((float *)a2 + 34);
  v5 |= 0x80000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 34) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x1000000000) == 0)
  {
LABEL_58:
    if ((v4 & 0x40000000000000) == 0)
      goto LABEL_59;
    goto LABEL_133;
  }
LABEL_132:
  result = *((float *)a2 + 39);
  v5 |= 0x1000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 39) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x40000000000000) == 0)
  {
LABEL_59:
    if ((v7 & 0x40) == 0)
      goto LABEL_60;
    goto LABEL_134;
  }
LABEL_133:
  result = *((float *)a2 + 57);
  v5 |= 0x40000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 57) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((v7 & 0x40) == 0)
  {
LABEL_60:
    if ((v4 & 0x1000000000000000) == 0)
      goto LABEL_61;
    goto LABEL_135;
  }
LABEL_134:
  v20 = *((_BYTE *)a2 + 274);
  v6 |= 0x40u;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((_BYTE *)this + 274) = v20;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x1000000000000000) == 0)
  {
LABEL_61:
    if ((v4 & 0x400000000000000) == 0)
      goto LABEL_62;
    goto LABEL_136;
  }
LABEL_135:
  result = *((float *)a2 + 63);
  v5 |= 0x1000000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 63) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x400000000000000) == 0)
  {
LABEL_62:
    if ((v7 & 0x200) == 0)
      goto LABEL_63;
    goto LABEL_137;
  }
LABEL_136:
  result = *((float *)a2 + 61);
  v5 |= 0x400000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 61) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((v7 & 0x200) == 0)
  {
LABEL_63:
    if ((v4 & 0x2000000000) == 0)
      goto LABEL_64;
    goto LABEL_138;
  }
LABEL_137:
  v21 = *((_BYTE *)a2 + 277);
  v6 |= 0x200u;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((_BYTE *)this + 277) = v21;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x2000000000) == 0)
  {
LABEL_64:
    if ((v4 & 0x4000000000) == 0)
      goto LABEL_65;
    goto LABEL_139;
  }
LABEL_138:
  result = *((float *)a2 + 40);
  v5 |= 0x2000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 40) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x4000000000) == 0)
  {
LABEL_65:
    if ((v4 & 0x8000000000) == 0)
      goto LABEL_66;
    goto LABEL_140;
  }
LABEL_139:
  result = *((float *)a2 + 41);
  v5 |= 0x4000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 41) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x8000000000) == 0)
  {
LABEL_66:
    if ((v4 & 0x20000000000) == 0)
      goto LABEL_67;
    goto LABEL_141;
  }
LABEL_140:
  result = *((float *)a2 + 42);
  v5 |= 0x8000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 42) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x20000000000) == 0)
  {
LABEL_67:
    if ((v4 & 0x10000000000) == 0)
      goto LABEL_68;
    goto LABEL_142;
  }
LABEL_141:
  result = *((float *)a2 + 44);
  v5 |= 0x20000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 44) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x10000000000) == 0)
  {
LABEL_68:
    if ((v4 & 0x40000000000) == 0)
      goto LABEL_69;
    goto LABEL_143;
  }
LABEL_142:
  result = *((float *)a2 + 43);
  v5 |= 0x10000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 43) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x40000000000) == 0)
  {
LABEL_69:
    if ((v4 & 0x80000000000) == 0)
      goto LABEL_70;
    goto LABEL_144;
  }
LABEL_143:
  result = *((float *)a2 + 45);
  v5 |= 0x40000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 45) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x80000000000) == 0)
  {
LABEL_70:
    if ((v4 & 0x100000000000) == 0)
      goto LABEL_71;
    goto LABEL_145;
  }
LABEL_144:
  result = *((float *)a2 + 46);
  v5 |= 0x80000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 46) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x100000000000) == 0)
  {
LABEL_71:
    if ((v4 & 0x200000000000) == 0)
      goto LABEL_72;
    goto LABEL_146;
  }
LABEL_145:
  result = *((float *)a2 + 47);
  v5 |= 0x100000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 47) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x200000000000) == 0)
  {
LABEL_72:
    if ((v4 & 0x800000000000) == 0)
      goto LABEL_73;
    goto LABEL_147;
  }
LABEL_146:
  result = *((float *)a2 + 48);
  v5 |= 0x200000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 48) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x800000000000) == 0)
  {
LABEL_73:
    if ((v4 & 0x400000000000) == 0)
      goto LABEL_74;
    goto LABEL_148;
  }
LABEL_147:
  result = *((float *)a2 + 50);
  v5 |= 0x800000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 50) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x400000000000) == 0)
  {
LABEL_74:
    if ((v4 & 0x1000000000000) == 0)
      goto LABEL_75;
    goto LABEL_149;
  }
LABEL_148:
  result = *((float *)a2 + 49);
  v5 |= 0x400000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 49) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x1000000000000) == 0)
  {
LABEL_75:
    if ((v4 & 0x800000000000000) == 0)
      goto LABEL_76;
    goto LABEL_150;
  }
LABEL_149:
  result = *((float *)a2 + 51);
  v5 |= 0x1000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 51) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x800000000000000) == 0)
  {
LABEL_76:
    if ((v7 & 0x400) == 0)
      goto LABEL_77;
    goto LABEL_151;
  }
LABEL_150:
  v22 = *((_DWORD *)a2 + 62);
  v5 |= 0x800000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((_DWORD *)this + 62) = v22;
  v4 = *v3;
  if ((*((_WORD *)a2 + 144) & 0x400) == 0)
  {
LABEL_77:
    if ((v4 & 0x4000000000000000) == 0)
      goto LABEL_78;
    goto LABEL_152;
  }
LABEL_151:
  v23 = *((_BYTE *)a2 + 278);
  v6 |= 0x400u;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((_BYTE *)this + 278) = v23;
  v4 = *v3;
  if ((*v3 & 0x4000000000000000) == 0)
  {
LABEL_78:
    if ((v4 & 0x8000000000000000) == 0)
      goto LABEL_79;
    goto LABEL_153;
  }
LABEL_152:
  result = *((float *)a2 + 65);
  v5 |= 0x4000000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 65) = result;
  v4 = *v3;
  if ((*v3 & 0x8000000000000000) == 0)
  {
LABEL_79:
    if ((v4 & 0x2000000000000000) == 0)
      return result;
LABEL_154:
    result = *((float *)a2 + 64);
    *v2 = v5 | 0x2000000000000000;
    *((_WORD *)this + 144) = v6;
    *((float *)this + 64) = result;
    return result;
  }
LABEL_153:
  result = *((float *)a2 + 66);
  v5 |= 0x8000000000000000;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 66) = result;
  if ((*v3 & 0x2000000000000000) != 0)
    goto LABEL_154;
  return result;
}

CMMsl *CMMsl::KappaCrashResult::operator=(CMMsl *a1, const CMMsl::KappaCrashResult *a2)
{
  CMMsl::KappaCrashResult *v3;
  _QWORD v5[38];

  v5[37] = *MEMORY[0x24BDAC8D0];
  if (a1 != a2)
  {
    CMMsl::KappaCrashResult::KappaCrashResult((CMMsl::KappaCrashResult *)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaCrashResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaCrashResult *a2, CMMsl::KappaCrashResult *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  float result;

  v3 = *((_DWORD *)this + 72);
  v4 = *((_QWORD *)this + 35);
  v5 = *((_DWORD *)a2 + 72);
  *((_QWORD *)this + 35) = *((_QWORD *)a2 + 35);
  *((_DWORD *)this + 72) = v5;
  *((_QWORD *)a2 + 35) = v4;
  *((_DWORD *)a2 + 72) = v3;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  v7 = *((_DWORD *)this + 52);
  *((_DWORD *)this + 52) = *((_DWORD *)a2 + 52);
  *((_DWORD *)a2 + 52) = v7;
  LOBYTE(v6) = *((_BYTE *)this + 276);
  *((_BYTE *)this + 276) = *((_BYTE *)a2 + 276);
  *((_BYTE *)a2 + 276) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 275);
  *((_BYTE *)this + 275) = *((_BYTE *)a2 + 275);
  *((_BYTE *)a2 + 275) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 273);
  *((_BYTE *)this + 273) = *((_BYTE *)a2 + 273);
  *((_BYTE *)a2 + 273) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 270);
  *((_BYTE *)this + 270) = *((_BYTE *)a2 + 270);
  *((_BYTE *)a2 + 270) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 269);
  *((_BYTE *)this + 269) = *((_BYTE *)a2 + 269);
  *((_BYTE *)a2 + 269) = v6;
  LODWORD(v6) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 268);
  *((_BYTE *)this + 268) = *((_BYTE *)a2 + 268);
  *((_BYTE *)a2 + 268) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 272);
  *((_BYTE *)this + 272) = *((_BYTE *)a2 + 272);
  *((_BYTE *)a2 + 272) = v6;
  v8 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v8;
  v9 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v9;
  v10 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v10;
  v11 = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v11;
  v12 = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v12;
  v13 = *((_DWORD *)this + 53);
  *((_DWORD *)this + 53) = *((_DWORD *)a2 + 53);
  *((_DWORD *)a2 + 53) = v13;
  v14 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v14;
  v15 = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v15;
  v16 = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v16;
  v17 = *((_DWORD *)this + 54);
  *((_DWORD *)this + 54) = *((_DWORD *)a2 + 54);
  *((_DWORD *)a2 + 54) = v17;
  v18 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v18;
  v19 = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v19;
  v20 = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v20;
  v21 = *((_DWORD *)this + 55);
  *((_DWORD *)this + 55) = *((_DWORD *)a2 + 55);
  *((_DWORD *)a2 + 55) = v21;
  v22 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v22;
  v23 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v23;
  v24 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v24;
  v25 = *((_DWORD *)this + 59);
  *((_DWORD *)this + 59) = *((_DWORD *)a2 + 59);
  *((_DWORD *)a2 + 59) = v25;
  v26 = *((_DWORD *)this + 58);
  *((_DWORD *)this + 58) = *((_DWORD *)a2 + 58);
  *((_DWORD *)a2 + 58) = v26;
  v27 = *((_DWORD *)this + 60);
  *((_DWORD *)this + 60) = *((_DWORD *)a2 + 60);
  *((_DWORD *)a2 + 60) = v27;
  v28 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v28;
  v29 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v29;
  v30 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v30;
  LOBYTE(v6) = *((_BYTE *)this + 279);
  *((_BYTE *)this + 279) = *((_BYTE *)a2 + 279);
  *((_BYTE *)a2 + 279) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 271);
  *((_BYTE *)this + 271) = *((_BYTE *)a2 + 271);
  *((_BYTE *)a2 + 271) = v6;
  v31 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v31;
  v32 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v32;
  v33 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v33;
  v34 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v34;
  v35 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v35;
  v36 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v36;
  v37 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v37;
  v38 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v38;
  v39 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v39;
  v40 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v40;
  v41 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v41;
  v42 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v42;
  v43 = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v43;
  v44 = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v44;
  v45 = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v45;
  v46 = *((_DWORD *)this + 56);
  *((_DWORD *)this + 56) = *((_DWORD *)a2 + 56);
  *((_DWORD *)a2 + 56) = v46;
  v47 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v47;
  v48 = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v48;
  v49 = *((_DWORD *)this + 39);
  *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
  *((_DWORD *)a2 + 39) = v49;
  v50 = *((_DWORD *)this + 57);
  *((_DWORD *)this + 57) = *((_DWORD *)a2 + 57);
  *((_DWORD *)a2 + 57) = v50;
  LOBYTE(v6) = *((_BYTE *)this + 274);
  *((_BYTE *)this + 274) = *((_BYTE *)a2 + 274);
  *((_BYTE *)a2 + 274) = v6;
  v51 = *((_DWORD *)this + 63);
  *((_DWORD *)this + 63) = *((_DWORD *)a2 + 63);
  *((_DWORD *)a2 + 63) = v51;
  v52 = *((_DWORD *)this + 61);
  *((_DWORD *)this + 61) = *((_DWORD *)a2 + 61);
  *((_DWORD *)a2 + 61) = v52;
  LOBYTE(v6) = *((_BYTE *)this + 277);
  *((_BYTE *)this + 277) = *((_BYTE *)a2 + 277);
  *((_BYTE *)a2 + 277) = v6;
  v53 = *((_DWORD *)this + 40);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
  *((_DWORD *)a2 + 40) = v53;
  v54 = *((_DWORD *)this + 41);
  *((_DWORD *)this + 41) = *((_DWORD *)a2 + 41);
  *((_DWORD *)a2 + 41) = v54;
  v55 = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v55;
  v56 = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v56;
  v57 = *((_DWORD *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((_DWORD *)a2 + 43) = v57;
  v58 = *((_DWORD *)this + 45);
  *((_DWORD *)this + 45) = *((_DWORD *)a2 + 45);
  *((_DWORD *)a2 + 45) = v58;
  v59 = *((_DWORD *)this + 46);
  *((_DWORD *)this + 46) = *((_DWORD *)a2 + 46);
  *((_DWORD *)a2 + 46) = v59;
  v60 = *((_DWORD *)this + 47);
  *((_DWORD *)this + 47) = *((_DWORD *)a2 + 47);
  *((_DWORD *)a2 + 47) = v60;
  v61 = *((_DWORD *)this + 48);
  *((_DWORD *)this + 48) = *((_DWORD *)a2 + 48);
  *((_DWORD *)a2 + 48) = v61;
  v62 = *((_DWORD *)this + 50);
  *((_DWORD *)this + 50) = *((_DWORD *)a2 + 50);
  *((_DWORD *)a2 + 50) = v62;
  v63 = *((_DWORD *)this + 49);
  *((_DWORD *)this + 49) = *((_DWORD *)a2 + 49);
  *((_DWORD *)a2 + 49) = v63;
  v64 = *((_DWORD *)this + 51);
  *((_DWORD *)this + 51) = *((_DWORD *)a2 + 51);
  *((_DWORD *)a2 + 51) = v64;
  LODWORD(v6) = *((_DWORD *)this + 62);
  *((_DWORD *)this + 62) = *((_DWORD *)a2 + 62);
  *((_DWORD *)a2 + 62) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 278);
  *((_BYTE *)this + 278) = *((_BYTE *)a2 + 278);
  *((_BYTE *)a2 + 278) = v6;
  v65 = *((_DWORD *)this + 65);
  *((_DWORD *)this + 65) = *((_DWORD *)a2 + 65);
  *((_DWORD *)a2 + 65) = v65;
  v66 = *((_DWORD *)this + 66);
  *((_DWORD *)this + 66) = *((_DWORD *)a2 + 66);
  *((_DWORD *)a2 + 66) = v66;
  result = *((float *)this + 64);
  *((_DWORD *)this + 64) = *((_DWORD *)a2 + 64);
  *((float *)a2 + 64) = result;
  return result;
}

float CMMsl::KappaCrashResult::KappaCrashResult(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float result;

  *(_QWORD *)a1 = &off_25135E7F0;
  v2 = *(_QWORD *)(a2 + 280);
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 280) = v2;
  *(_DWORD *)(a2 + 288) = 0;
  *(_QWORD *)(a2 + 280) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 276) = *(_BYTE *)(a2 + 276);
  *(_BYTE *)(a1 + 275) = *(_BYTE *)(a2 + 275);
  *(_BYTE *)(a1 + 273) = *(_BYTE *)(a2 + 273);
  *(_BYTE *)(a1 + 270) = *(_BYTE *)(a2 + 270);
  *(_BYTE *)(a1 + 269) = *(_BYTE *)(a2 + 269);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_BYTE *)(a1 + 268) = *(_BYTE *)(a2 + 268);
  *(_BYTE *)(a1 + 272) = *(_BYTE *)(a2 + 272);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 236) = *(_DWORD *)(a2 + 236);
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 232);
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 279) = *(_BYTE *)(a2 + 279);
  *(_BYTE *)(a1 + 271) = *(_BYTE *)(a2 + 271);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 228) = *(_DWORD *)(a2 + 228);
  *(_BYTE *)(a1 + 274) = *(_BYTE *)(a2 + 274);
  *(_DWORD *)(a1 + 252) = *(_DWORD *)(a2 + 252);
  *(_DWORD *)(a1 + 244) = *(_DWORD *)(a2 + 244);
  *(_BYTE *)(a1 + 277) = *(_BYTE *)(a2 + 277);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 196);
  *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  *(_BYTE *)(a1 + 278) = *(_BYTE *)(a2 + 278);
  *(_DWORD *)(a1 + 260) = *(_DWORD *)(a2 + 260);
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 264);
  result = *(float *)(a2 + 256);
  *(float *)(a1 + 256) = result;
  return result;
}

CMMsl *CMMsl::KappaCrashResult::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::KappaCrashResult *v3;
  _QWORD v5[38];

  v5[37] = *MEMORY[0x24BDAC8D0];
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaCrashResult::KappaCrashResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaCrashResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaCrashResult::formatText(CMMsl::KappaCrashResult *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t v6;
  __int16 v7;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)((char *)this + 280);
  v6 = *((_QWORD *)this + 35);
  if ((v6 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "audioDvChaosThreshold", *((float *)this + 4));
    v6 = *v5;
    v7 = *((_WORD *)this + 144);
    if ((*v5 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v7 = *((_WORD *)this + 144);
  if ((v6 & 4) != 0)
  {
LABEL_5:
    PB::TextFormatter::format(a2, "audioDvChaosThresholdCenter", *((float *)this + 5));
    v6 = *v5;
    v7 = *((_WORD *)this + 144);
  }
LABEL_6:
  if ((v6 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "audioDvChaosThresholdMax", *((float *)this + 6));
    v6 = *v5;
    v7 = *((_WORD *)this + 144);
    if ((*v5 & 0x10) == 0)
    {
LABEL_8:
      if ((v6 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_84;
    }
  }
  else if ((v6 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  PB::TextFormatter::format(a2, "audioDvChaosThresholdMin", *((float *)this + 7));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v6 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_85;
  }
LABEL_84:
  PB::TextFormatter::format(a2, "audioDvChaosThresholdStretch", *((float *)this + 8));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v6 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_86;
  }
LABEL_85:
  PB::TextFormatter::format(a2, "audioDvEnergyThreshold", *((float *)this + 9));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x80) == 0)
  {
LABEL_11:
    if ((v6 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_87;
  }
LABEL_86:
  PB::TextFormatter::format(a2, "audioDvEnergyThresholdCenter", *((float *)this + 10));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x100) == 0)
  {
LABEL_12:
    if ((v6 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_88;
  }
LABEL_87:
  PB::TextFormatter::format(a2, "audioDvEnergyThresholdMax", *((float *)this + 11));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x200) == 0)
  {
LABEL_13:
    if ((v6 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_89;
  }
LABEL_88:
  PB::TextFormatter::format(a2, "audioDvEnergyThresholdMin", *((float *)this + 12));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x400) == 0)
  {
LABEL_14:
    if ((v6 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_90;
  }
LABEL_89:
  PB::TextFormatter::format(a2, "audioDvEnergyThresholdStretch", *((float *)this + 13));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x800) == 0)
  {
LABEL_15:
    if ((v6 & 0x1000) == 0)
      goto LABEL_16;
    goto LABEL_91;
  }
LABEL_90:
  PB::TextFormatter::format(a2, "audioDvMaxRmsThresholdCenter", *((float *)this + 14));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x1000) == 0)
  {
LABEL_16:
    if ((v6 & 0x2000) == 0)
      goto LABEL_17;
    goto LABEL_92;
  }
LABEL_91:
  PB::TextFormatter::format(a2, "audioDvMaxRmsThresholdMax", *((float *)this + 15));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x2000) == 0)
  {
LABEL_17:
    if ((v6 & 0x4000) == 0)
      goto LABEL_18;
    goto LABEL_93;
  }
LABEL_92:
  PB::TextFormatter::format(a2, "audioDvMaxRmsThresholdMin", *((float *)this + 16));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x4000) == 0)
  {
LABEL_18:
    if ((v6 & 0x8000) == 0)
      goto LABEL_19;
    goto LABEL_94;
  }
LABEL_93:
  PB::TextFormatter::format(a2, "audioDvMaxRmsThresholdStretch", *((float *)this + 17));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x8000) == 0)
  {
LABEL_19:
    if ((v7 & 1) == 0)
      goto LABEL_20;
    goto LABEL_95;
  }
LABEL_94:
  PB::TextFormatter::format(a2, "audioDvRmsThreshold", *((float *)this + 18));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((v7 & 1) == 0)
  {
LABEL_20:
    if ((v6 & 0x10000) == 0)
      goto LABEL_21;
    goto LABEL_96;
  }
LABEL_95:
  PB::TextFormatter::format(a2, "crashDetectorDecision");
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x10000) == 0)
  {
LABEL_21:
    if ((v6 & 0x20000) == 0)
      goto LABEL_22;
    goto LABEL_97;
  }
LABEL_96:
  PB::TextFormatter::format(a2, "deltaVXYBiggestImpact", *((float *)this + 19));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x20000) == 0)
  {
LABEL_22:
    if ((v6 & 0x40000) == 0)
      goto LABEL_23;
    goto LABEL_98;
  }
LABEL_97:
  PB::TextFormatter::format(a2, "deltaVXYOverEpoch", *((float *)this + 20));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x40000) == 0)
  {
LABEL_23:
    if ((v6 & 0x80000) == 0)
      goto LABEL_24;
    goto LABEL_99;
  }
LABEL_98:
  PB::TextFormatter::format(a2, "detectorRegime");
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x80000) == 0)
  {
LABEL_24:
    if ((v6 & 0x100000) == 0)
      goto LABEL_25;
    goto LABEL_100;
  }
LABEL_99:
  PB::TextFormatter::format(a2, "detectorRegimeAccelnormThreshold1", *((float *)this + 22));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x100000) == 0)
  {
LABEL_25:
    if ((v6 & 0x200000) == 0)
      goto LABEL_26;
    goto LABEL_101;
  }
LABEL_100:
  PB::TextFormatter::format(a2, "detectorRegimeAccelnormThreshold2", *((float *)this + 23));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x200000) == 0)
  {
LABEL_26:
    if ((v6 & 0x400000) == 0)
      goto LABEL_27;
    goto LABEL_102;
  }
LABEL_101:
  PB::TextFormatter::format(a2, "detectorRegimeAccelnormThreshold3", *((float *)this + 24));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x400000) == 0)
  {
LABEL_27:
    if ((v6 & 0x800000) == 0)
      goto LABEL_28;
    goto LABEL_103;
  }
LABEL_102:
  PB::TextFormatter::format(a2, "detectorRegimeDeltaVThreshold1", *((float *)this + 25));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x800000) == 0)
  {
LABEL_28:
    if ((v6 & 0x1000000) == 0)
      goto LABEL_29;
    goto LABEL_104;
  }
LABEL_103:
  PB::TextFormatter::format(a2, "detectorRegimeDeltaVThreshold1WithAudio", *((float *)this + 26));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x1000000) == 0)
  {
LABEL_29:
    if ((v6 & 0x2000000) == 0)
      goto LABEL_30;
    goto LABEL_105;
  }
LABEL_104:
  PB::TextFormatter::format(a2, "detectorRegimeDeltaVThreshold1WithoutAudio", *((float *)this + 27));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x2000000) == 0)
  {
LABEL_30:
    if ((v6 & 0x4000000) == 0)
      goto LABEL_31;
    goto LABEL_106;
  }
LABEL_105:
  PB::TextFormatter::format(a2, "detectorRegimeDeltaVThreshold1WithoutAudioStandaloneBaroNeeded", *((float *)this + 28));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x4000000) == 0)
  {
LABEL_31:
    if ((v6 & 0x8000000) == 0)
      goto LABEL_32;
    goto LABEL_107;
  }
LABEL_106:
  PB::TextFormatter::format(a2, "detectorRegimeDeltaVThreshold1WithoutAudioStandaloneFull", *((float *)this + 29));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x8000000) == 0)
  {
LABEL_32:
    if ((v6 & 0x10000000) == 0)
      goto LABEL_33;
    goto LABEL_108;
  }
LABEL_107:
  PB::TextFormatter::format(a2, "detectorRegimeDeltaVThreshold2", *((float *)this + 30));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x10000000) == 0)
  {
LABEL_33:
    if ((v6 & 0x20000000) == 0)
      goto LABEL_34;
    goto LABEL_109;
  }
LABEL_108:
  PB::TextFormatter::format(a2, "detectorRegimeDeltaVThreshold2WithAudio", *((float *)this + 31));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x20000000) == 0)
  {
LABEL_34:
    if ((v6 & 0x40000000) == 0)
      goto LABEL_35;
    goto LABEL_110;
  }
LABEL_109:
  PB::TextFormatter::format(a2, "detectorRegimeDeltaVThreshold2WithoutAudio", *((float *)this + 32));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x40000000) == 0)
  {
LABEL_35:
    if ((v6 & 0x80000000) == 0)
      goto LABEL_36;
    goto LABEL_111;
  }
LABEL_110:
  PB::TextFormatter::format(a2, "detectorRegimeDeltaVThreshold2WithoutAudioStandaloneBaroNeeded", *((float *)this + 33));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x80000000) == 0)
  {
LABEL_36:
    if ((v6 & 0x100000000) == 0)
      goto LABEL_37;
    goto LABEL_112;
  }
LABEL_111:
  PB::TextFormatter::format(a2, "detectorRegimeDeltaVThreshold2WithoutAudioStandaloneFull", *((float *)this + 34));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x100000000) == 0)
  {
LABEL_37:
    if ((v6 & 0x200000000) == 0)
      goto LABEL_38;
    goto LABEL_113;
  }
LABEL_112:
  PB::TextFormatter::format(a2, "detectorRegimeDeltaVThreshold3", *((float *)this + 35));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x200000000) == 0)
  {
LABEL_38:
    if ((v6 & 0x400000000) == 0)
      goto LABEL_39;
    goto LABEL_114;
  }
LABEL_113:
  PB::TextFormatter::format(a2, "detectorRegimeDeltaVThreshold3WithAudio", *((float *)this + 36));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x400000000) == 0)
  {
LABEL_39:
    if ((v6 & 0x800000000) == 0)
      goto LABEL_40;
    goto LABEL_115;
  }
LABEL_114:
  PB::TextFormatter::format(a2, "detectorRegimeDeltaVThreshold3WithoutAudio", *((float *)this + 37));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x800000000) == 0)
  {
LABEL_40:
    if ((v6 & 0x1000000000) == 0)
      goto LABEL_41;
    goto LABEL_116;
  }
LABEL_115:
  PB::TextFormatter::format(a2, "detectorRegimeDeltaVThreshold3WithoutAudioStandaloneBaroNeeded", *((float *)this + 38));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x1000000000) == 0)
  {
LABEL_41:
    if ((v7 & 2) == 0)
      goto LABEL_42;
    goto LABEL_117;
  }
LABEL_116:
  PB::TextFormatter::format(a2, "detectorRegimeDeltaVThreshold3WithoutAudioStandaloneFull", *((float *)this + 39));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((v7 & 2) == 0)
  {
LABEL_42:
    if ((v7 & 4) == 0)
      goto LABEL_43;
    goto LABEL_118;
  }
LABEL_117:
  PB::TextFormatter::format(a2, "hasAudioInEpoch");
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((v7 & 4) == 0)
  {
LABEL_43:
    if ((v7 & 8) == 0)
      goto LABEL_44;
    goto LABEL_119;
  }
LABEL_118:
  PB::TextFormatter::format(a2, "isAudio");
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((v7 & 8) == 0)
  {
LABEL_44:
    if ((v7 & 0x10) == 0)
      goto LABEL_45;
    goto LABEL_120;
  }
LABEL_119:
  PB::TextFormatter::format(a2, "isAudioDv");
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((v7 & 0x10) == 0)
  {
LABEL_45:
    if ((v7 & 0x20) == 0)
      goto LABEL_46;
    goto LABEL_121;
  }
LABEL_120:
  PB::TextFormatter::format(a2, "isAudioSupported");
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((v7 & 0x20) == 0)
  {
LABEL_46:
    if ((v7 & 0x40) == 0)
      goto LABEL_47;
    goto LABEL_122;
  }
LABEL_121:
  PB::TextFormatter::format(a2, "isBaro");
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((v7 & 0x40) == 0)
  {
LABEL_47:
    if ((v7 & 0x80) == 0)
      goto LABEL_48;
    goto LABEL_123;
  }
LABEL_122:
  PB::TextFormatter::format(a2, "isCompanionConnected");
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((v7 & 0x80) == 0)
  {
LABEL_48:
    if ((v7 & 0x100) == 0)
      goto LABEL_49;
    goto LABEL_124;
  }
LABEL_123:
  PB::TextFormatter::format(a2, "isFreeFall");
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((v7 & 0x100) == 0)
  {
LABEL_49:
    if ((v7 & 0x200) == 0)
      goto LABEL_50;
    goto LABEL_125;
  }
LABEL_124:
  PB::TextFormatter::format(a2, "isPulse");
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((v7 & 0x200) == 0)
  {
LABEL_50:
    if ((v6 & 0x2000000000) == 0)
      goto LABEL_51;
    goto LABEL_126;
  }
LABEL_125:
  PB::TextFormatter::format(a2, "lowSenseCrashDetectorDecision");
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x2000000000) == 0)
  {
LABEL_51:
    if ((v6 & 0x4000000000) == 0)
      goto LABEL_52;
    goto LABEL_127;
  }
LABEL_126:
  PB::TextFormatter::format(a2, "lowSenseWithAudioDeltaVThreshold1", *((float *)this + 40));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x4000000000) == 0)
  {
LABEL_52:
    if ((v6 & 0x8000000000) == 0)
      goto LABEL_53;
    goto LABEL_128;
  }
LABEL_127:
  PB::TextFormatter::format(a2, "lowSenseWithAudioDeltaVThreshold2", *((float *)this + 41));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x8000000000) == 0)
  {
LABEL_53:
    if ((v6 & 0x10000000000) == 0)
      goto LABEL_54;
    goto LABEL_129;
  }
LABEL_128:
  PB::TextFormatter::format(a2, "lowSenseWithAudioDeltaVThreshold3", *((float *)this + 42));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x10000000000) == 0)
  {
LABEL_54:
    if ((v6 & 0x20000000000) == 0)
      goto LABEL_55;
    goto LABEL_130;
  }
LABEL_129:
  PB::TextFormatter::format(a2, "lowSenseWithAudioMaxPulseThreshold", *((float *)this + 43));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x20000000000) == 0)
  {
LABEL_55:
    if ((v6 & 0x40000000000) == 0)
      goto LABEL_56;
    goto LABEL_131;
  }
LABEL_130:
  PB::TextFormatter::format(a2, "lowSenseWithAudioMaxaccelnormThreshold", *((float *)this + 44));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x40000000000) == 0)
  {
LABEL_56:
    if ((v6 & 0x80000000000) == 0)
      goto LABEL_57;
    goto LABEL_132;
  }
LABEL_131:
  PB::TextFormatter::format(a2, "lowSenseWithAudioPeakPressureThreshold", *((float *)this + 45));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x80000000000) == 0)
  {
LABEL_57:
    if ((v6 & 0x100000000000) == 0)
      goto LABEL_58;
    goto LABEL_133;
  }
LABEL_132:
  PB::TextFormatter::format(a2, "lowSenseWithoutAudioDeltaVThreshold1", *((float *)this + 46));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x100000000000) == 0)
  {
LABEL_58:
    if ((v6 & 0x200000000000) == 0)
      goto LABEL_59;
    goto LABEL_134;
  }
LABEL_133:
  PB::TextFormatter::format(a2, "lowSenseWithoutAudioDeltaVThreshold2", *((float *)this + 47));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x200000000000) == 0)
  {
LABEL_59:
    if ((v6 & 0x400000000000) == 0)
      goto LABEL_60;
    goto LABEL_135;
  }
LABEL_134:
  PB::TextFormatter::format(a2, "lowSenseWithoutAudioDeltaVThreshold3", *((float *)this + 48));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x400000000000) == 0)
  {
LABEL_60:
    if ((v6 & 0x800000000000) == 0)
      goto LABEL_61;
    goto LABEL_136;
  }
LABEL_135:
  PB::TextFormatter::format(a2, "lowSenseWithoutAudioMaxPulseThreshold", *((float *)this + 49));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x800000000000) == 0)
  {
LABEL_61:
    if ((v6 & 0x1000000000000) == 0)
      goto LABEL_62;
    goto LABEL_137;
  }
LABEL_136:
  PB::TextFormatter::format(a2, "lowSenseWithoutAudioMaxaccelnormThreshold", *((float *)this + 50));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x1000000000000) == 0)
  {
LABEL_62:
    if ((v6 & 0x2000000000000) == 0)
      goto LABEL_63;
    goto LABEL_138;
  }
LABEL_137:
  PB::TextFormatter::format(a2, "lowSenseWithoutAudioPeakPressureThreshold", *((float *)this + 51));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x2000000000000) == 0)
  {
LABEL_63:
    if ((v6 & 0x4000000000000) == 0)
      goto LABEL_64;
    goto LABEL_139;
  }
LABEL_138:
  PB::TextFormatter::format(a2, "maxAccelNorm", *((float *)this + 52));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x4000000000000) == 0)
  {
LABEL_64:
    if ((v6 & 0x8000000000000) == 0)
      goto LABEL_65;
    goto LABEL_140;
  }
LABEL_139:
  PB::TextFormatter::format(a2, "maxAccelNormThreshold", *((float *)this + 53));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x8000000000000) == 0)
  {
LABEL_65:
    if ((v6 & 0x10000000000000) == 0)
      goto LABEL_66;
    goto LABEL_141;
  }
LABEL_140:
  PB::TextFormatter::format(a2, "maxAccelNormThresholdWithAudio", *((float *)this + 54));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x10000000000000) == 0)
  {
LABEL_66:
    if ((v6 & 0x20000000000000) == 0)
      goto LABEL_67;
    goto LABEL_142;
  }
LABEL_141:
  PB::TextFormatter::format(a2, "maxAccelNormThresholdWithoutAudio", *((float *)this + 55));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x20000000000000) == 0)
  {
LABEL_67:
    if ((v6 & 0x40000000000000) == 0)
      goto LABEL_68;
    goto LABEL_143;
  }
LABEL_142:
  PB::TextFormatter::format(a2, "maxAccelNormThresholdWithoutAudioStandaloneBaroNeeded", *((float *)this + 56));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x40000000000000) == 0)
  {
LABEL_68:
    if ((v6 & 0x80000000000000) == 0)
      goto LABEL_69;
    goto LABEL_144;
  }
LABEL_143:
  PB::TextFormatter::format(a2, "maxAccelNormThresholdWithoutAudioStandaloneFull", *((float *)this + 57));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x80000000000000) == 0)
  {
LABEL_69:
    if ((v6 & 0x100000000000000) == 0)
      goto LABEL_70;
    goto LABEL_145;
  }
LABEL_144:
  PB::TextFormatter::format(a2, "maxAudioChaos", *((float *)this + 58));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x100000000000000) == 0)
  {
LABEL_70:
    if ((v6 & 0x200000000000000) == 0)
      goto LABEL_71;
    goto LABEL_146;
  }
LABEL_145:
  PB::TextFormatter::format(a2, "maxAudioEnergy", *((float *)this + 59));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x200000000000000) == 0)
  {
LABEL_71:
    if ((v6 & 0x400000000000000) == 0)
      goto LABEL_72;
    goto LABEL_147;
  }
LABEL_146:
  PB::TextFormatter::format(a2, "maxAudioRms", *((float *)this + 60));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x400000000000000) == 0)
  {
LABEL_72:
    if ((v6 & 0x800000000000000) == 0)
      goto LABEL_73;
    goto LABEL_148;
  }
LABEL_147:
  PB::TextFormatter::format(a2, "maxPulse", *((float *)this + 61));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x800000000000000) == 0)
  {
LABEL_73:
    if ((v6 & 0x1000000000000000) == 0)
      goto LABEL_74;
    goto LABEL_149;
  }
LABEL_148:
  PB::TextFormatter::format(a2, "numShortAudio");
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x1000000000000000) == 0)
  {
LABEL_74:
    if ((v6 & 0x2000000000000000) == 0)
      goto LABEL_75;
    goto LABEL_150;
  }
LABEL_149:
  PB::TextFormatter::format(a2, "peakPressure", *((float *)this + 63));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x2000000000000000) == 0)
  {
LABEL_75:
    if ((v7 & 0x400) == 0)
      goto LABEL_76;
    goto LABEL_151;
  }
LABEL_150:
  PB::TextFormatter::format(a2, "shortAudioMaxPulseThreshold", *((float *)this + 64));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((v7 & 0x400) == 0)
  {
LABEL_76:
    if ((v6 & 0x4000000000000000) == 0)
      goto LABEL_77;
    goto LABEL_152;
  }
LABEL_151:
  PB::TextFormatter::format(a2, "shortAudioMet");
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x4000000000000000) == 0)
  {
LABEL_77:
    if ((v6 & 0x8000000000000000) == 0)
      goto LABEL_78;
    goto LABEL_153;
  }
LABEL_152:
  PB::TextFormatter::format(a2, "shortAudioNumThreshold", *((float *)this + 65));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x8000000000000000) == 0)
  {
LABEL_78:
    if ((v7 & 0x800) == 0)
      goto LABEL_79;
LABEL_154:
    PB::TextFormatter::format(a2, "strongerAudio");
    if ((*v5 & 1) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_80;
  }
LABEL_153:
  PB::TextFormatter::format(a2, "shortAudioPeakPressureThreshold", *((float *)this + 66));
  v6 = *v5;
  if ((*((_WORD *)this + 144) & 0x800) != 0)
    goto LABEL_154;
LABEL_79:
  if ((v6 & 1) != 0)
LABEL_80:
    PB::TextFormatter::format(a2, "timestamp");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaCrashResult::readFrom(CMMsl::KappaCrashResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  char *v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t result;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  BOOL v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  BOOL v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  BOOL v47;
  unint64_t v48;
  unint64_t v49;
  int v50;
  BOOL v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  unint64_t v60;
  unint64_t v61;
  int v62;
  BOOL v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  BOOL v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  int v90;
  BOOL v91;
  unint64_t v92;
  unint64_t v93;
  int v94;
  BOOL v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  int v118;
  BOOL v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  int v124;
  BOOL v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  char v141;
  unsigned int v142;
  uint64_t v143;
  unint64_t v144;
  char v145;
  unint64_t v146;
  unint64_t v147;
  int v148;
  BOOL v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  char v155;
  unsigned int v156;
  unint64_t v157;
  char v158;
  char v159;
  unsigned int v160;
  unint64_t v161;
  char v162;
  char v163;
  unsigned int v164;
  unint64_t v165;
  char v166;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (char *)this + 280;
    do
    {
      v9 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v16 = 0;
        v17 = 0;
        v12 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v18 = v2 + 1;
          v19 = *(_BYTE *)(v9 + v2);
          *((_QWORD *)a2 + 1) = v18;
          v12 |= (unint64_t)(v19 & 0x7F) << v16;
          if ((v19 & 0x80) == 0)
            goto LABEL_22;
          v16 += 7;
          v2 = v18;
          v15 = v17++ > 8;
          if (v15)
            goto LABEL_20;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_20;
      }
LABEL_22:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v21 = v12 >> 3;
      if ((int)(v12 >> 3) <= 100000)
      {
        switch((int)v21)
        {
          case 1:
            *(_QWORD *)v8 |= 1uLL;
            v22 = *((_QWORD *)a2 + 1);
            v23 = *((_QWORD *)a2 + 2);
            v24 = *(_QWORD *)a2;
            if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
            {
              v25 = 0;
              v26 = 0;
              v27 = 0;
              do
              {
                v28 = v22 + 1;
                *((_QWORD *)a2 + 1) = v22 + 1;
                v29 = *(_BYTE *)(v24 + v22);
                v27 |= (unint64_t)(v29 & 0x7F) << v25;
                if ((v29 & 0x80) == 0)
                  goto LABEL_312;
                v25 += 7;
                v22 = v28;
                v15 = v26++ > 8;
              }
              while (!v15);
LABEL_262:
              v27 = 0;
              goto LABEL_312;
            }
            v155 = 0;
            v156 = 0;
            v27 = 0;
            if (v23 <= v22)
              v23 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v23 == v22)
              {
                v27 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v157 = v22 + 1;
                v158 = *(_BYTE *)(v24 + v22);
                *((_QWORD *)a2 + 1) = v157;
                v27 |= (unint64_t)(v158 & 0x7F) << v155;
                if (v158 < 0)
                {
                  v155 += 7;
                  v22 = v157;
                  v15 = v156++ > 8;
                  if (v15)
                    goto LABEL_262;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  v27 = 0;
              }
              break;
            }
LABEL_312:
            *((_QWORD *)this + 1) = v27;
            goto LABEL_304;
          case 2:
            *(_QWORD *)v8 |= 0x2000000000000uLL;
            v31 = *((_QWORD *)a2 + 1);
            if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 52) = *(_DWORD *)(*(_QWORD *)a2 + v31);
            goto LABEL_303;
          case 3:
            *((_WORD *)v8 + 4) |= 0x100u;
            v32 = *((_QWORD *)a2 + 1);
            if (v32 >= *((_QWORD *)a2 + 2))
            {
              v35 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v33 = v32 + 1;
              v34 = *(unsigned __int8 *)(*(_QWORD *)a2 + v32);
              *((_QWORD *)a2 + 1) = v33;
              v35 = v34 != 0;
            }
            *((_BYTE *)this + 276) = v35;
            goto LABEL_304;
          case 4:
            *((_WORD *)v8 + 4) |= 0x80u;
            v36 = *((_QWORD *)a2 + 1);
            if (v36 >= *((_QWORD *)a2 + 2))
            {
              v39 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v37 = v36 + 1;
              v38 = *(unsigned __int8 *)(*(_QWORD *)a2 + v36);
              *((_QWORD *)a2 + 1) = v37;
              v39 = v38 != 0;
            }
            *((_BYTE *)this + 275) = v39;
            goto LABEL_304;
          case 5:
            *((_WORD *)v8 + 4) |= 0x20u;
            v40 = *((_QWORD *)a2 + 1);
            if (v40 >= *((_QWORD *)a2 + 2))
            {
              v43 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v41 = v40 + 1;
              v42 = *(unsigned __int8 *)(*(_QWORD *)a2 + v40);
              *((_QWORD *)a2 + 1) = v41;
              v43 = v42 != 0;
            }
            *((_BYTE *)this + 273) = v43;
            goto LABEL_304;
          case 6:
            *((_WORD *)v8 + 4) |= 4u;
            v44 = *((_QWORD *)a2 + 1);
            if (v44 >= *((_QWORD *)a2 + 2))
            {
              v47 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v45 = v44 + 1;
              v46 = *(unsigned __int8 *)(*(_QWORD *)a2 + v44);
              *((_QWORD *)a2 + 1) = v45;
              v47 = v46 != 0;
            }
            *((_BYTE *)this + 270) = v47;
            goto LABEL_304;
          case 7:
            *((_WORD *)v8 + 4) |= 2u;
            v48 = *((_QWORD *)a2 + 1);
            if (v48 >= *((_QWORD *)a2 + 2))
            {
              v51 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v49 = v48 + 1;
              v50 = *(unsigned __int8 *)(*(_QWORD *)a2 + v48);
              *((_QWORD *)a2 + 1) = v49;
              v51 = v50 != 0;
            }
            *((_BYTE *)this + 269) = v51;
            goto LABEL_304;
          case 8:
            *(_QWORD *)v8 |= 0x40000uLL;
            v52 = *((_QWORD *)a2 + 1);
            v53 = *((_QWORD *)a2 + 2);
            v54 = *(_QWORD *)a2;
            if (v52 <= 0xFFFFFFFFFFFFFFF5 && v52 + 10 <= v53)
            {
              v55 = 0;
              v56 = 0;
              v57 = 0;
              do
              {
                v58 = v52 + 1;
                *((_QWORD *)a2 + 1) = v52 + 1;
                v59 = *(_BYTE *)(v54 + v52);
                v57 |= (unint64_t)(v59 & 0x7F) << v55;
                if ((v59 & 0x80) == 0)
                  goto LABEL_316;
                v55 += 7;
                v52 = v58;
                v15 = v56++ > 8;
              }
              while (!v15);
LABEL_279:
              LODWORD(v57) = 0;
              goto LABEL_316;
            }
            v159 = 0;
            v160 = 0;
            v57 = 0;
            if (v53 <= v52)
              v53 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v53 == v52)
              {
                LODWORD(v57) = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v161 = v52 + 1;
                v162 = *(_BYTE *)(v54 + v52);
                *((_QWORD *)a2 + 1) = v161;
                v57 |= (unint64_t)(v162 & 0x7F) << v159;
                if (v162 < 0)
                {
                  v159 += 7;
                  v52 = v161;
                  v15 = v160++ > 8;
                  if (v15)
                    goto LABEL_279;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v57) = 0;
              }
              break;
            }
LABEL_316:
            *((_DWORD *)this + 21) = v57;
            goto LABEL_304;
          case 9:
            *((_WORD *)v8 + 4) |= 1u;
            v60 = *((_QWORD *)a2 + 1);
            if (v60 >= *((_QWORD *)a2 + 2))
            {
              v63 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v61 = v60 + 1;
              v62 = *(unsigned __int8 *)(*(_QWORD *)a2 + v60);
              *((_QWORD *)a2 + 1) = v61;
              v63 = v62 != 0;
            }
            *((_BYTE *)this + 268) = v63;
            goto LABEL_304;
          case 10:
            *((_WORD *)v8 + 4) |= 0x10u;
            v64 = *((_QWORD *)a2 + 1);
            if (v64 >= *((_QWORD *)a2 + 2))
            {
              v67 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v65 = v64 + 1;
              v66 = *(unsigned __int8 *)(*(_QWORD *)a2 + v64);
              *((_QWORD *)a2 + 1) = v65;
              v67 = v66 != 0;
            }
            *((_BYTE *)this + 272) = v67;
            goto LABEL_304;
          case 11:
            *(_QWORD *)v8 |= 0x20000uLL;
            v68 = *((_QWORD *)a2 + 1);
            if (v68 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v68);
            goto LABEL_303;
          case 12:
            *(_QWORD *)v8 |= 0x10000uLL;
            v69 = *((_QWORD *)a2 + 1);
            if (v69 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v69);
            goto LABEL_303;
          case 13:
            *(_QWORD *)v8 |= 0x400000uLL;
            v70 = *((_QWORD *)a2 + 1);
            if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v70);
            goto LABEL_303;
          case 14:
            *(_QWORD *)v8 |= 0x8000000uLL;
            v71 = *((_QWORD *)a2 + 1);
            if (v71 > 0xFFFFFFFFFFFFFFFBLL || v71 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 30) = *(_DWORD *)(*(_QWORD *)a2 + v71);
            goto LABEL_303;
          case 15:
            *(_QWORD *)v8 |= 0x100000000uLL;
            v72 = *((_QWORD *)a2 + 1);
            if (v72 > 0xFFFFFFFFFFFFFFFBLL || v72 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 35) = *(_DWORD *)(*(_QWORD *)a2 + v72);
            goto LABEL_303;
          case 16:
            *(_QWORD *)v8 |= 0x4000000000000uLL;
            v73 = *((_QWORD *)a2 + 1);
            if (v73 > 0xFFFFFFFFFFFFFFFBLL || v73 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 53) = *(_DWORD *)(*(_QWORD *)a2 + v73);
            goto LABEL_303;
          case 17:
            *(_QWORD *)v8 |= 0x800000uLL;
            v74 = *((_QWORD *)a2 + 1);
            if (v74 > 0xFFFFFFFFFFFFFFFBLL || v74 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 26) = *(_DWORD *)(*(_QWORD *)a2 + v74);
            goto LABEL_303;
          case 18:
            *(_QWORD *)v8 |= 0x10000000uLL;
            v75 = *((_QWORD *)a2 + 1);
            if (v75 > 0xFFFFFFFFFFFFFFFBLL || v75 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 31) = *(_DWORD *)(*(_QWORD *)a2 + v75);
            goto LABEL_303;
          case 19:
            *(_QWORD *)v8 |= 0x200000000uLL;
            v76 = *((_QWORD *)a2 + 1);
            if (v76 > 0xFFFFFFFFFFFFFFFBLL || v76 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 36) = *(_DWORD *)(*(_QWORD *)a2 + v76);
            goto LABEL_303;
          case 20:
            *(_QWORD *)v8 |= 0x8000000000000uLL;
            v77 = *((_QWORD *)a2 + 1);
            if (v77 > 0xFFFFFFFFFFFFFFFBLL || v77 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 54) = *(_DWORD *)(*(_QWORD *)a2 + v77);
            goto LABEL_303;
          case 21:
            *(_QWORD *)v8 |= 0x1000000uLL;
            v78 = *((_QWORD *)a2 + 1);
            if (v78 > 0xFFFFFFFFFFFFFFFBLL || v78 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 27) = *(_DWORD *)(*(_QWORD *)a2 + v78);
            goto LABEL_303;
          case 22:
            *(_QWORD *)v8 |= 0x20000000uLL;
            v79 = *((_QWORD *)a2 + 1);
            if (v79 > 0xFFFFFFFFFFFFFFFBLL || v79 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 32) = *(_DWORD *)(*(_QWORD *)a2 + v79);
            goto LABEL_303;
          case 23:
            *(_QWORD *)v8 |= 0x400000000uLL;
            v80 = *((_QWORD *)a2 + 1);
            if (v80 > 0xFFFFFFFFFFFFFFFBLL || v80 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 37) = *(_DWORD *)(*(_QWORD *)a2 + v80);
            goto LABEL_303;
          case 24:
            *(_QWORD *)v8 |= 0x10000000000000uLL;
            v81 = *((_QWORD *)a2 + 1);
            if (v81 > 0xFFFFFFFFFFFFFFFBLL || v81 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 55) = *(_DWORD *)(*(_QWORD *)a2 + v81);
            goto LABEL_303;
          case 25:
            *(_QWORD *)v8 |= 0x100000000000000uLL;
            v82 = *((_QWORD *)a2 + 1);
            if (v82 > 0xFFFFFFFFFFFFFFFBLL || v82 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 59) = *(_DWORD *)(*(_QWORD *)a2 + v82);
            goto LABEL_303;
          case 26:
            *(_QWORD *)v8 |= 0x80000000000000uLL;
            v83 = *((_QWORD *)a2 + 1);
            if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 58) = *(_DWORD *)(*(_QWORD *)a2 + v83);
            goto LABEL_303;
          case 27:
            *(_QWORD *)v8 |= 0x200000000000000uLL;
            v84 = *((_QWORD *)a2 + 1);
            if (v84 > 0xFFFFFFFFFFFFFFFBLL || v84 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 60) = *(_DWORD *)(*(_QWORD *)a2 + v84);
            goto LABEL_303;
          case 28:
            *(_QWORD *)v8 |= 0x40uLL;
            v85 = *((_QWORD *)a2 + 1);
            if (v85 > 0xFFFFFFFFFFFFFFFBLL || v85 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v85);
            goto LABEL_303;
          case 29:
            *(_QWORD *)v8 |= 2uLL;
            v86 = *((_QWORD *)a2 + 1);
            if (v86 > 0xFFFFFFFFFFFFFFFBLL || v86 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v86);
            goto LABEL_303;
          case 30:
            *(_QWORD *)v8 |= 0x8000uLL;
            v87 = *((_QWORD *)a2 + 1);
            if (v87 > 0xFFFFFFFFFFFFFFFBLL || v87 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v87);
            goto LABEL_303;
          case 31:
            *((_WORD *)v8 + 4) |= 0x800u;
            v88 = *((_QWORD *)a2 + 1);
            if (v88 >= *((_QWORD *)a2 + 2))
            {
              v91 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v89 = v88 + 1;
              v90 = *(unsigned __int8 *)(*(_QWORD *)a2 + v88);
              *((_QWORD *)a2 + 1) = v89;
              v91 = v90 != 0;
            }
            *((_BYTE *)this + 279) = v91;
            goto LABEL_304;
          case 32:
            *((_WORD *)v8 + 4) |= 8u;
            v92 = *((_QWORD *)a2 + 1);
            if (v92 >= *((_QWORD *)a2 + 2))
            {
              v95 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v93 = v92 + 1;
              v94 = *(unsigned __int8 *)(*(_QWORD *)a2 + v92);
              *((_QWORD *)a2 + 1) = v93;
              v95 = v94 != 0;
            }
            *((_BYTE *)this + 271) = v95;
            goto LABEL_304;
          case 33:
            *(_QWORD *)v8 |= 0x80uLL;
            v96 = *((_QWORD *)a2 + 1);
            if (v96 > 0xFFFFFFFFFFFFFFFBLL || v96 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v96);
            goto LABEL_303;
          case 34:
            *(_QWORD *)v8 |= 0x400uLL;
            v97 = *((_QWORD *)a2 + 1);
            if (v97 > 0xFFFFFFFFFFFFFFFBLL || v97 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v97);
            goto LABEL_303;
          case 35:
            *(_QWORD *)v8 |= 0x200uLL;
            v98 = *((_QWORD *)a2 + 1);
            if (v98 > 0xFFFFFFFFFFFFFFFBLL || v98 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v98);
            goto LABEL_303;
          case 36:
            *(_QWORD *)v8 |= 0x100uLL;
            v99 = *((_QWORD *)a2 + 1);
            if (v99 > 0xFFFFFFFFFFFFFFFBLL || v99 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v99);
            goto LABEL_303;
          case 37:
            *(_QWORD *)v8 |= 4uLL;
            v100 = *((_QWORD *)a2 + 1);
            if (v100 > 0xFFFFFFFFFFFFFFFBLL || v100 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v100);
            goto LABEL_303;
          case 38:
            *(_QWORD *)v8 |= 0x20uLL;
            v101 = *((_QWORD *)a2 + 1);
            if (v101 > 0xFFFFFFFFFFFFFFFBLL || v101 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v101);
            goto LABEL_303;
          case 39:
            *(_QWORD *)v8 |= 0x10uLL;
            v102 = *((_QWORD *)a2 + 1);
            if (v102 > 0xFFFFFFFFFFFFFFFBLL || v102 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v102);
            goto LABEL_303;
          case 40:
            *(_QWORD *)v8 |= 8uLL;
            v103 = *((_QWORD *)a2 + 1);
            if (v103 > 0xFFFFFFFFFFFFFFFBLL || v103 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v103);
            goto LABEL_303;
          case 41:
            *(_QWORD *)v8 |= 0x800uLL;
            v104 = *((_QWORD *)a2 + 1);
            if (v104 > 0xFFFFFFFFFFFFFFFBLL || v104 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v104);
            goto LABEL_303;
          case 42:
            *(_QWORD *)v8 |= 0x4000uLL;
            v105 = *((_QWORD *)a2 + 1);
            if (v105 > 0xFFFFFFFFFFFFFFFBLL || v105 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v105);
            goto LABEL_303;
          case 43:
            *(_QWORD *)v8 |= 0x2000uLL;
            v106 = *((_QWORD *)a2 + 1);
            if (v106 > 0xFFFFFFFFFFFFFFFBLL || v106 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v106);
            goto LABEL_303;
          case 44:
            *(_QWORD *)v8 |= 0x1000uLL;
            v107 = *((_QWORD *)a2 + 1);
            if (v107 > 0xFFFFFFFFFFFFFFFBLL || v107 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v107);
            goto LABEL_303;
          case 45:
            *(_QWORD *)v8 |= 0x2000000uLL;
            v108 = *((_QWORD *)a2 + 1);
            if (v108 > 0xFFFFFFFFFFFFFFFBLL || v108 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 28) = *(_DWORD *)(*(_QWORD *)a2 + v108);
            goto LABEL_303;
          case 46:
            *(_QWORD *)v8 |= 0x40000000uLL;
            v109 = *((_QWORD *)a2 + 1);
            if (v109 > 0xFFFFFFFFFFFFFFFBLL || v109 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 33) = *(_DWORD *)(*(_QWORD *)a2 + v109);
            goto LABEL_303;
          case 47:
            *(_QWORD *)v8 |= 0x800000000uLL;
            v110 = *((_QWORD *)a2 + 1);
            if (v110 > 0xFFFFFFFFFFFFFFFBLL || v110 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 38) = *(_DWORD *)(*(_QWORD *)a2 + v110);
            goto LABEL_303;
          case 48:
            *(_QWORD *)v8 |= 0x20000000000000uLL;
            v111 = *((_QWORD *)a2 + 1);
            if (v111 > 0xFFFFFFFFFFFFFFFBLL || v111 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 56) = *(_DWORD *)(*(_QWORD *)a2 + v111);
            goto LABEL_303;
          case 49:
            *(_QWORD *)v8 |= 0x4000000uLL;
            v112 = *((_QWORD *)a2 + 1);
            if (v112 > 0xFFFFFFFFFFFFFFFBLL || v112 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 29) = *(_DWORD *)(*(_QWORD *)a2 + v112);
            goto LABEL_303;
          case 50:
            *(_QWORD *)v8 |= 0x80000000uLL;
            v113 = *((_QWORD *)a2 + 1);
            if (v113 > 0xFFFFFFFFFFFFFFFBLL || v113 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 34) = *(_DWORD *)(*(_QWORD *)a2 + v113);
            goto LABEL_303;
          case 51:
            *(_QWORD *)v8 |= 0x1000000000uLL;
            v114 = *((_QWORD *)a2 + 1);
            if (v114 > 0xFFFFFFFFFFFFFFFBLL || v114 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 39) = *(_DWORD *)(*(_QWORD *)a2 + v114);
            goto LABEL_303;
          case 52:
            *(_QWORD *)v8 |= 0x40000000000000uLL;
            v115 = *((_QWORD *)a2 + 1);
            if (v115 > 0xFFFFFFFFFFFFFFFBLL || v115 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 57) = *(_DWORD *)(*(_QWORD *)a2 + v115);
            goto LABEL_303;
          case 53:
            *((_WORD *)v8 + 4) |= 0x40u;
            v116 = *((_QWORD *)a2 + 1);
            if (v116 >= *((_QWORD *)a2 + 2))
            {
              v119 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v117 = v116 + 1;
              v118 = *(unsigned __int8 *)(*(_QWORD *)a2 + v116);
              *((_QWORD *)a2 + 1) = v117;
              v119 = v118 != 0;
            }
            *((_BYTE *)this + 274) = v119;
            goto LABEL_304;
          case 54:
            *(_QWORD *)v8 |= 0x1000000000000000uLL;
            v120 = *((_QWORD *)a2 + 1);
            if (v120 > 0xFFFFFFFFFFFFFFFBLL || v120 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 63) = *(_DWORD *)(*(_QWORD *)a2 + v120);
            goto LABEL_303;
          case 55:
            *(_QWORD *)v8 |= 0x400000000000000uLL;
            v121 = *((_QWORD *)a2 + 1);
            if (v121 > 0xFFFFFFFFFFFFFFFBLL || v121 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 61) = *(_DWORD *)(*(_QWORD *)a2 + v121);
            goto LABEL_303;
          case 56:
            *((_WORD *)v8 + 4) |= 0x200u;
            v122 = *((_QWORD *)a2 + 1);
            if (v122 >= *((_QWORD *)a2 + 2))
            {
              v125 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v123 = v122 + 1;
              v124 = *(unsigned __int8 *)(*(_QWORD *)a2 + v122);
              *((_QWORD *)a2 + 1) = v123;
              v125 = v124 != 0;
            }
            *((_BYTE *)this + 277) = v125;
            goto LABEL_304;
          case 57:
            *(_QWORD *)v8 |= 0x2000000000uLL;
            v126 = *((_QWORD *)a2 + 1);
            if (v126 > 0xFFFFFFFFFFFFFFFBLL || v126 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 40) = *(_DWORD *)(*(_QWORD *)a2 + v126);
            goto LABEL_303;
          case 58:
            *(_QWORD *)v8 |= 0x4000000000uLL;
            v127 = *((_QWORD *)a2 + 1);
            if (v127 > 0xFFFFFFFFFFFFFFFBLL || v127 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 41) = *(_DWORD *)(*(_QWORD *)a2 + v127);
            goto LABEL_303;
          case 59:
            *(_QWORD *)v8 |= 0x8000000000uLL;
            v128 = *((_QWORD *)a2 + 1);
            if (v128 > 0xFFFFFFFFFFFFFFFBLL || v128 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 42) = *(_DWORD *)(*(_QWORD *)a2 + v128);
            goto LABEL_303;
          case 60:
            *(_QWORD *)v8 |= 0x20000000000uLL;
            v129 = *((_QWORD *)a2 + 1);
            if (v129 > 0xFFFFFFFFFFFFFFFBLL || v129 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 44) = *(_DWORD *)(*(_QWORD *)a2 + v129);
            goto LABEL_303;
          case 61:
            *(_QWORD *)v8 |= 0x10000000000uLL;
            v130 = *((_QWORD *)a2 + 1);
            if (v130 > 0xFFFFFFFFFFFFFFFBLL || v130 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 43) = *(_DWORD *)(*(_QWORD *)a2 + v130);
            goto LABEL_303;
          case 62:
            *(_QWORD *)v8 |= 0x40000000000uLL;
            v131 = *((_QWORD *)a2 + 1);
            if (v131 > 0xFFFFFFFFFFFFFFFBLL || v131 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 45) = *(_DWORD *)(*(_QWORD *)a2 + v131);
            goto LABEL_303;
          case 63:
            *(_QWORD *)v8 |= 0x80000000000uLL;
            v132 = *((_QWORD *)a2 + 1);
            if (v132 > 0xFFFFFFFFFFFFFFFBLL || v132 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 46) = *(_DWORD *)(*(_QWORD *)a2 + v132);
            goto LABEL_303;
          case 64:
            *(_QWORD *)v8 |= 0x100000000000uLL;
            v133 = *((_QWORD *)a2 + 1);
            if (v133 > 0xFFFFFFFFFFFFFFFBLL || v133 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 47) = *(_DWORD *)(*(_QWORD *)a2 + v133);
            goto LABEL_303;
          case 65:
            *(_QWORD *)v8 |= 0x200000000000uLL;
            v134 = *((_QWORD *)a2 + 1);
            if (v134 > 0xFFFFFFFFFFFFFFFBLL || v134 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 48) = *(_DWORD *)(*(_QWORD *)a2 + v134);
            goto LABEL_303;
          case 66:
            *(_QWORD *)v8 |= 0x800000000000uLL;
            v135 = *((_QWORD *)a2 + 1);
            if (v135 > 0xFFFFFFFFFFFFFFFBLL || v135 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 50) = *(_DWORD *)(*(_QWORD *)a2 + v135);
            goto LABEL_303;
          case 67:
            *(_QWORD *)v8 |= 0x400000000000uLL;
            v136 = *((_QWORD *)a2 + 1);
            if (v136 > 0xFFFFFFFFFFFFFFFBLL || v136 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 49) = *(_DWORD *)(*(_QWORD *)a2 + v136);
            goto LABEL_303;
          case 68:
            *(_QWORD *)v8 |= 0x1000000000000uLL;
            v137 = *((_QWORD *)a2 + 1);
            if (v137 > 0xFFFFFFFFFFFFFFFBLL || v137 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 51) = *(_DWORD *)(*(_QWORD *)a2 + v137);
            goto LABEL_303;
          case 69:
            *(_QWORD *)v8 |= 0x800000000000000uLL;
            v138 = *((_QWORD *)a2 + 1);
            v139 = *((_QWORD *)a2 + 2);
            v140 = *(_QWORD *)a2;
            if (v138 <= 0xFFFFFFFFFFFFFFF5 && v138 + 10 <= v139)
            {
              v141 = 0;
              v142 = 0;
              v143 = 0;
              do
              {
                v144 = v138 + 1;
                *((_QWORD *)a2 + 1) = v138 + 1;
                v145 = *(_BYTE *)(v140 + v138);
                v143 |= (unint64_t)(v145 & 0x7F) << v141;
                if ((v145 & 0x80) == 0)
                  goto LABEL_320;
                v141 += 7;
                v138 = v144;
                v15 = v142++ > 8;
              }
              while (!v15);
LABEL_298:
              LODWORD(v143) = 0;
              goto LABEL_320;
            }
            v163 = 0;
            v164 = 0;
            v143 = 0;
            if (v139 <= v138)
              v139 = *((_QWORD *)a2 + 1);
            break;
          case 70:
            *((_WORD *)v8 + 4) |= 0x400u;
            v146 = *((_QWORD *)a2 + 1);
            if (v146 >= *((_QWORD *)a2 + 2))
            {
              v149 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v147 = v146 + 1;
              v148 = *(unsigned __int8 *)(*(_QWORD *)a2 + v146);
              *((_QWORD *)a2 + 1) = v147;
              v149 = v148 != 0;
            }
            *((_BYTE *)this + 278) = v149;
            goto LABEL_304;
          case 71:
            *(_QWORD *)v8 |= 0x4000000000000000uLL;
            v150 = *((_QWORD *)a2 + 1);
            if (v150 > 0xFFFFFFFFFFFFFFFBLL || v150 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 65) = *(_DWORD *)(*(_QWORD *)a2 + v150);
            goto LABEL_303;
          case 72:
            *(_QWORD *)v8 |= 0x8000000000000000;
            v151 = *((_QWORD *)a2 + 1);
            if (v151 > 0xFFFFFFFFFFFFFFFBLL || v151 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_249;
            *((_DWORD *)this + 66) = *(_DWORD *)(*(_QWORD *)a2 + v151);
            goto LABEL_303;
          case 73:
            *(_QWORD *)v8 |= 0x2000000000000000uLL;
            v152 = *((_QWORD *)a2 + 1);
            if (v152 > 0xFFFFFFFFFFFFFFFBLL || v152 + 4 > *((_QWORD *)a2 + 2))
            {
LABEL_249:
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_304;
            }
            *((_DWORD *)this + 64) = *(_DWORD *)(*(_QWORD *)a2 + v152);
            goto LABEL_303;
          default:
            goto LABEL_20;
        }
        while (1)
        {
          if (v139 == v138)
          {
            LODWORD(v143) = 0;
            *((_BYTE *)a2 + 24) = 1;
            goto LABEL_320;
          }
          v165 = v138 + 1;
          v166 = *(_BYTE *)(v140 + v138);
          *((_QWORD *)a2 + 1) = v165;
          v143 |= (unint64_t)(v166 & 0x7F) << v163;
          if ((v166 & 0x80) == 0)
            break;
          v163 += 7;
          v138 = v165;
          v15 = v164++ > 8;
          if (v15)
            goto LABEL_298;
        }
        if (*((_BYTE *)a2 + 24))
          LODWORD(v143) = 0;
LABEL_320:
        *((_DWORD *)this + 62) = v143;
        goto LABEL_304;
      }
      switch((_DWORD)v21)
      {
        case 0x186A1:
          *(_QWORD *)v8 |= 0x80000uLL;
          v153 = *((_QWORD *)a2 + 1);
          if (v153 <= 0xFFFFFFFFFFFFFFFBLL && v153 + 4 <= *((_QWORD *)a2 + 2))
          {
            *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v153);
            goto LABEL_303;
          }
          break;
        case 0x186A2:
          *(_QWORD *)v8 |= 0x100000uLL;
          v154 = *((_QWORD *)a2 + 1);
          if (v154 <= 0xFFFFFFFFFFFFFFFBLL && v154 + 4 <= *((_QWORD *)a2 + 2))
          {
            *((_DWORD *)this + 23) = *(_DWORD *)(*(_QWORD *)a2 + v154);
            goto LABEL_303;
          }
          break;
        case 0x186A3:
          *(_QWORD *)v8 |= 0x200000uLL;
          v30 = *((_QWORD *)a2 + 1);
          if (v30 <= 0xFFFFFFFFFFFFFFFBLL && v30 + 4 <= *((_QWORD *)a2 + 2))
          {
            *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v30);
LABEL_303:
            *((_QWORD *)a2 + 1) += 4;
            goto LABEL_304;
          }
          break;
        default:
LABEL_20:
          result = PB::Reader::skip(a2);
          if (!(_DWORD)result)
            return result;
          goto LABEL_304;
      }
      *((_BYTE *)a2 + 24) = 1;
LABEL_304:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && v4 == 0);
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaCrashResult::writeTo(uint64_t this, PB::Writer *a2)
{
  float *v3;
  uint64_t *v4;
  uint64_t v5;
  __int16 v6;

  v3 = (float *)this;
  v4 = (uint64_t *)(this + 280);
  v5 = *(_QWORD *)(this + 280);
  if ((v5 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v5 = *v4;
    v6 = *((_WORD *)v4 + 4);
    if ((*v4 & 0x2000000000000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = *(_WORD *)(this + 288);
  if ((v5 & 0x2000000000000) != 0)
  {
LABEL_5:
    this = PB::Writer::write(a2, v3[52]);
    v5 = *v4;
    v6 = *((_WORD *)v4 + 4);
  }
LABEL_6:
  if ((v6 & 0x100) != 0)
  {
    this = PB::Writer::write(a2);
    v5 = *v4;
    v6 = *((_WORD *)v4 + 4);
    if ((v6 & 0x80) == 0)
    {
LABEL_8:
      if ((v6 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_84;
    }
  }
  else if ((v6 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  this = PB::Writer::write(a2);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((v6 & 0x20) == 0)
  {
LABEL_9:
    if ((v6 & 4) == 0)
      goto LABEL_10;
    goto LABEL_85;
  }
LABEL_84:
  this = PB::Writer::write(a2);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((v6 & 4) == 0)
  {
LABEL_10:
    if ((v6 & 2) == 0)
      goto LABEL_11;
    goto LABEL_86;
  }
LABEL_85:
  this = PB::Writer::write(a2);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((v6 & 2) == 0)
  {
LABEL_11:
    if ((v5 & 0x40000) == 0)
      goto LABEL_12;
    goto LABEL_87;
  }
LABEL_86:
  this = PB::Writer::write(a2);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x40000) == 0)
  {
LABEL_12:
    if ((v6 & 1) == 0)
      goto LABEL_13;
    goto LABEL_88;
  }
LABEL_87:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((v6 & 1) == 0)
  {
LABEL_13:
    if ((v6 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_89;
  }
LABEL_88:
  this = PB::Writer::write(a2);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((v6 & 0x10) == 0)
  {
LABEL_14:
    if ((v5 & 0x20000) == 0)
      goto LABEL_15;
    goto LABEL_90;
  }
LABEL_89:
  this = PB::Writer::write(a2);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x20000) == 0)
  {
LABEL_15:
    if ((v5 & 0x10000) == 0)
      goto LABEL_16;
    goto LABEL_91;
  }
LABEL_90:
  this = PB::Writer::write(a2, v3[20]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x10000) == 0)
  {
LABEL_16:
    if ((v5 & 0x400000) == 0)
      goto LABEL_17;
    goto LABEL_92;
  }
LABEL_91:
  this = PB::Writer::write(a2, v3[19]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x400000) == 0)
  {
LABEL_17:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_18;
    goto LABEL_93;
  }
LABEL_92:
  this = PB::Writer::write(a2, v3[25]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x8000000) == 0)
  {
LABEL_18:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_19;
    goto LABEL_94;
  }
LABEL_93:
  this = PB::Writer::write(a2, v3[30]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x100000000) == 0)
  {
LABEL_19:
    if ((v5 & 0x4000000000000) == 0)
      goto LABEL_20;
    goto LABEL_95;
  }
LABEL_94:
  this = PB::Writer::write(a2, v3[35]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x4000000000000) == 0)
  {
LABEL_20:
    if ((v5 & 0x800000) == 0)
      goto LABEL_21;
    goto LABEL_96;
  }
LABEL_95:
  this = PB::Writer::write(a2, v3[53]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x800000) == 0)
  {
LABEL_21:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_22;
    goto LABEL_97;
  }
LABEL_96:
  this = PB::Writer::write(a2, v3[26]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x10000000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_23;
    goto LABEL_98;
  }
LABEL_97:
  this = PB::Writer::write(a2, v3[31]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x200000000) == 0)
  {
LABEL_23:
    if ((v5 & 0x8000000000000) == 0)
      goto LABEL_24;
    goto LABEL_99;
  }
LABEL_98:
  this = PB::Writer::write(a2, v3[36]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x8000000000000) == 0)
  {
LABEL_24:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_25;
    goto LABEL_100;
  }
LABEL_99:
  this = PB::Writer::write(a2, v3[54]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_26;
    goto LABEL_101;
  }
LABEL_100:
  this = PB::Writer::write(a2, v3[27]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x20000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_27;
    goto LABEL_102;
  }
LABEL_101:
  this = PB::Writer::write(a2, v3[32]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x400000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x10000000000000) == 0)
      goto LABEL_28;
    goto LABEL_103;
  }
LABEL_102:
  this = PB::Writer::write(a2, v3[37]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x10000000000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x100000000000000) == 0)
      goto LABEL_29;
    goto LABEL_104;
  }
LABEL_103:
  this = PB::Writer::write(a2, v3[55]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x100000000000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x80000000000000) == 0)
      goto LABEL_30;
    goto LABEL_105;
  }
LABEL_104:
  this = PB::Writer::write(a2, v3[59]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x80000000000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x200000000000000) == 0)
      goto LABEL_31;
    goto LABEL_106;
  }
LABEL_105:
  this = PB::Writer::write(a2, v3[58]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x200000000000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x40) == 0)
      goto LABEL_32;
    goto LABEL_107;
  }
LABEL_106:
  this = PB::Writer::write(a2, v3[60]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x40) == 0)
  {
LABEL_32:
    if ((v5 & 2) == 0)
      goto LABEL_33;
    goto LABEL_108;
  }
LABEL_107:
  this = PB::Writer::write(a2, v3[9]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 2) == 0)
  {
LABEL_33:
    if ((v5 & 0x8000) == 0)
      goto LABEL_34;
    goto LABEL_109;
  }
LABEL_108:
  this = PB::Writer::write(a2, v3[4]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x8000) == 0)
  {
LABEL_34:
    if ((v6 & 0x800) == 0)
      goto LABEL_35;
    goto LABEL_110;
  }
LABEL_109:
  this = PB::Writer::write(a2, v3[18]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((v6 & 0x800) == 0)
  {
LABEL_35:
    if ((v6 & 8) == 0)
      goto LABEL_36;
    goto LABEL_111;
  }
LABEL_110:
  this = PB::Writer::write(a2);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((v6 & 8) == 0)
  {
LABEL_36:
    if ((v5 & 0x80) == 0)
      goto LABEL_37;
    goto LABEL_112;
  }
LABEL_111:
  this = PB::Writer::write(a2);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x80) == 0)
  {
LABEL_37:
    if ((v5 & 0x400) == 0)
      goto LABEL_38;
    goto LABEL_113;
  }
LABEL_112:
  this = PB::Writer::write(a2, v3[10]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x400) == 0)
  {
LABEL_38:
    if ((v5 & 0x200) == 0)
      goto LABEL_39;
    goto LABEL_114;
  }
LABEL_113:
  this = PB::Writer::write(a2, v3[13]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x200) == 0)
  {
LABEL_39:
    if ((v5 & 0x100) == 0)
      goto LABEL_40;
    goto LABEL_115;
  }
LABEL_114:
  this = PB::Writer::write(a2, v3[12]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x100) == 0)
  {
LABEL_40:
    if ((v5 & 4) == 0)
      goto LABEL_41;
    goto LABEL_116;
  }
LABEL_115:
  this = PB::Writer::write(a2, v3[11]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 4) == 0)
  {
LABEL_41:
    if ((v5 & 0x20) == 0)
      goto LABEL_42;
    goto LABEL_117;
  }
LABEL_116:
  this = PB::Writer::write(a2, v3[5]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x20) == 0)
  {
LABEL_42:
    if ((v5 & 0x10) == 0)
      goto LABEL_43;
    goto LABEL_118;
  }
LABEL_117:
  this = PB::Writer::write(a2, v3[8]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x10) == 0)
  {
LABEL_43:
    if ((v5 & 8) == 0)
      goto LABEL_44;
    goto LABEL_119;
  }
LABEL_118:
  this = PB::Writer::write(a2, v3[7]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 8) == 0)
  {
LABEL_44:
    if ((v5 & 0x800) == 0)
      goto LABEL_45;
    goto LABEL_120;
  }
LABEL_119:
  this = PB::Writer::write(a2, v3[6]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x800) == 0)
  {
LABEL_45:
    if ((v5 & 0x4000) == 0)
      goto LABEL_46;
    goto LABEL_121;
  }
LABEL_120:
  this = PB::Writer::write(a2, v3[14]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x4000) == 0)
  {
LABEL_46:
    if ((v5 & 0x2000) == 0)
      goto LABEL_47;
    goto LABEL_122;
  }
LABEL_121:
  this = PB::Writer::write(a2, v3[17]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x2000) == 0)
  {
LABEL_47:
    if ((v5 & 0x1000) == 0)
      goto LABEL_48;
    goto LABEL_123;
  }
LABEL_122:
  this = PB::Writer::write(a2, v3[16]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x1000) == 0)
  {
LABEL_48:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_49;
    goto LABEL_124;
  }
LABEL_123:
  this = PB::Writer::write(a2, v3[15]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x2000000) == 0)
  {
LABEL_49:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_50;
    goto LABEL_125;
  }
LABEL_124:
  this = PB::Writer::write(a2, v3[28]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x40000000) == 0)
  {
LABEL_50:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_51;
    goto LABEL_126;
  }
LABEL_125:
  this = PB::Writer::write(a2, v3[33]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x800000000) == 0)
  {
LABEL_51:
    if ((v5 & 0x20000000000000) == 0)
      goto LABEL_52;
    goto LABEL_127;
  }
LABEL_126:
  this = PB::Writer::write(a2, v3[38]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x20000000000000) == 0)
  {
LABEL_52:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_53;
    goto LABEL_128;
  }
LABEL_127:
  this = PB::Writer::write(a2, v3[56]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x4000000) == 0)
  {
LABEL_53:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_54;
    goto LABEL_129;
  }
LABEL_128:
  this = PB::Writer::write(a2, v3[29]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x80000000) == 0)
  {
LABEL_54:
    if ((v5 & 0x1000000000) == 0)
      goto LABEL_55;
    goto LABEL_130;
  }
LABEL_129:
  this = PB::Writer::write(a2, v3[34]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x1000000000) == 0)
  {
LABEL_55:
    if ((v5 & 0x40000000000000) == 0)
      goto LABEL_56;
    goto LABEL_131;
  }
LABEL_130:
  this = PB::Writer::write(a2, v3[39]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x40000000000000) == 0)
  {
LABEL_56:
    if ((v6 & 0x40) == 0)
      goto LABEL_57;
    goto LABEL_132;
  }
LABEL_131:
  this = PB::Writer::write(a2, v3[57]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((v6 & 0x40) == 0)
  {
LABEL_57:
    if ((v5 & 0x1000000000000000) == 0)
      goto LABEL_58;
    goto LABEL_133;
  }
LABEL_132:
  this = PB::Writer::write(a2);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x1000000000000000) == 0)
  {
LABEL_58:
    if ((v5 & 0x400000000000000) == 0)
      goto LABEL_59;
    goto LABEL_134;
  }
LABEL_133:
  this = PB::Writer::write(a2, v3[63]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x400000000000000) == 0)
  {
LABEL_59:
    if ((v6 & 0x200) == 0)
      goto LABEL_60;
    goto LABEL_135;
  }
LABEL_134:
  this = PB::Writer::write(a2, v3[61]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((v6 & 0x200) == 0)
  {
LABEL_60:
    if ((v5 & 0x2000000000) == 0)
      goto LABEL_61;
    goto LABEL_136;
  }
LABEL_135:
  this = PB::Writer::write(a2);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x2000000000) == 0)
  {
LABEL_61:
    if ((v5 & 0x4000000000) == 0)
      goto LABEL_62;
    goto LABEL_137;
  }
LABEL_136:
  this = PB::Writer::write(a2, v3[40]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x4000000000) == 0)
  {
LABEL_62:
    if ((v5 & 0x8000000000) == 0)
      goto LABEL_63;
    goto LABEL_138;
  }
LABEL_137:
  this = PB::Writer::write(a2, v3[41]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x8000000000) == 0)
  {
LABEL_63:
    if ((v5 & 0x20000000000) == 0)
      goto LABEL_64;
    goto LABEL_139;
  }
LABEL_138:
  this = PB::Writer::write(a2, v3[42]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x20000000000) == 0)
  {
LABEL_64:
    if ((v5 & 0x10000000000) == 0)
      goto LABEL_65;
    goto LABEL_140;
  }
LABEL_139:
  this = PB::Writer::write(a2, v3[44]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x10000000000) == 0)
  {
LABEL_65:
    if ((v5 & 0x40000000000) == 0)
      goto LABEL_66;
    goto LABEL_141;
  }
LABEL_140:
  this = PB::Writer::write(a2, v3[43]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x40000000000) == 0)
  {
LABEL_66:
    if ((v5 & 0x80000000000) == 0)
      goto LABEL_67;
    goto LABEL_142;
  }
LABEL_141:
  this = PB::Writer::write(a2, v3[45]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x80000000000) == 0)
  {
LABEL_67:
    if ((v5 & 0x100000000000) == 0)
      goto LABEL_68;
    goto LABEL_143;
  }
LABEL_142:
  this = PB::Writer::write(a2, v3[46]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x100000000000) == 0)
  {
LABEL_68:
    if ((v5 & 0x200000000000) == 0)
      goto LABEL_69;
    goto LABEL_144;
  }
LABEL_143:
  this = PB::Writer::write(a2, v3[47]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x200000000000) == 0)
  {
LABEL_69:
    if ((v5 & 0x800000000000) == 0)
      goto LABEL_70;
    goto LABEL_145;
  }
LABEL_144:
  this = PB::Writer::write(a2, v3[48]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x800000000000) == 0)
  {
LABEL_70:
    if ((v5 & 0x400000000000) == 0)
      goto LABEL_71;
    goto LABEL_146;
  }
LABEL_145:
  this = PB::Writer::write(a2, v3[50]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x400000000000) == 0)
  {
LABEL_71:
    if ((v5 & 0x1000000000000) == 0)
      goto LABEL_72;
    goto LABEL_147;
  }
LABEL_146:
  this = PB::Writer::write(a2, v3[49]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x1000000000000) == 0)
  {
LABEL_72:
    if ((v5 & 0x800000000000000) == 0)
      goto LABEL_73;
    goto LABEL_148;
  }
LABEL_147:
  this = PB::Writer::write(a2, v3[51]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x800000000000000) == 0)
  {
LABEL_73:
    if ((v6 & 0x400) == 0)
      goto LABEL_74;
    goto LABEL_149;
  }
LABEL_148:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  if ((v4[1] & 0x400) == 0)
  {
LABEL_74:
    if ((v5 & 0x4000000000000000) == 0)
      goto LABEL_75;
    goto LABEL_150;
  }
LABEL_149:
  this = PB::Writer::write(a2);
  v5 = *v4;
  if ((*v4 & 0x4000000000000000) == 0)
  {
LABEL_75:
    if ((v5 & 0x8000000000000000) == 0)
      goto LABEL_76;
    goto LABEL_151;
  }
LABEL_150:
  this = PB::Writer::write(a2, v3[65]);
  v5 = *v4;
  if ((*v4 & 0x8000000000000000) == 0)
  {
LABEL_76:
    if ((v5 & 0x2000000000000000) == 0)
      goto LABEL_78;
    goto LABEL_77;
  }
LABEL_151:
  this = PB::Writer::write(a2, v3[66]);
  v5 = *v4;
  if ((*v4 & 0x2000000000000000) != 0)
  {
LABEL_77:
    this = PB::Writer::write(a2, v3[64]);
    v5 = *v4;
  }
LABEL_78:
  if ((v5 & 0x80000) != 0)
  {
    this = PB::Writer::write(a2, v3[22]);
    v5 = *v4;
    if ((*v4 & 0x100000) == 0)
    {
LABEL_80:
      if ((v5 & 0x200000) == 0)
        return this;
      return PB::Writer::write(a2, v3[24]);
    }
  }
  else if ((v5 & 0x100000) == 0)
  {
    goto LABEL_80;
  }
  this = PB::Writer::write(a2, v3[23]);
  if ((*v4 & 0x200000) != 0)
    return PB::Writer::write(a2, v3[24]);
  return this;
}

uint64_t CMMsl::KappaCrashResult::hash_value(CMMsl::KappaCrashResult *this)
{
  __int16 v1;
  uint64_t v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  float v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  float v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  float v46;
  uint64_t v47;
  float v48;
  uint64_t v49;
  float v50;
  uint64_t v51;
  float v52;
  uint64_t v53;
  float v54;
  uint64_t v55;
  float v56;
  uint64_t v57;
  float v58;
  uint64_t v59;
  float v60;
  uint64_t v61;
  float v62;
  uint64_t v63;
  float v64;
  uint64_t v65;
  float v66;
  uint64_t v67;
  float v68;
  uint64_t v69;
  float v70;
  uint64_t v71;
  float v72;
  uint64_t v73;
  float v74;
  uint64_t v75;
  float v76;
  uint64_t v77;
  float v78;
  uint64_t v79;
  float v80;
  uint64_t v81;
  float v82;
  uint64_t v83;
  float v84;
  uint64_t v85;
  float v86;
  uint64_t v87;
  float v88;
  uint64_t v89;
  float v90;
  uint64_t v91;
  uint64_t v92;
  float v93;
  uint64_t v94;
  float v95;
  uint64_t v96;
  uint64_t v97;
  float v98;
  uint64_t v99;
  float v100;
  uint64_t v101;
  float v102;
  uint64_t v103;
  float v104;
  uint64_t v105;
  float v106;
  uint64_t v107;
  float v108;
  uint64_t v109;
  float v110;
  uint64_t v111;
  float v112;
  uint64_t v113;
  float v114;
  uint64_t v115;
  float v116;
  uint64_t v117;
  float v118;
  uint64_t v119;
  float v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  float v124;
  uint64_t v125;
  float v126;
  uint64_t v127;
  float v128;
  uint64_t v129;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;

  v1 = *((_WORD *)this + 144);
  v2 = *((_QWORD *)this + 35);
  if ((v2 & 1) == 0)
  {
    v3 = 0;
    if ((v2 & 0x2000000000000) != 0)
      goto LABEL_3;
LABEL_203:
    v179 = 0;
    if ((*((_WORD *)this + 144) & 0x100) != 0)
      goto LABEL_6;
    goto LABEL_204;
  }
  v3 = *((_QWORD *)this + 1);
  if ((v2 & 0x2000000000000) == 0)
    goto LABEL_203;
LABEL_3:
  v4 = *((float *)this + 52);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  v179 = v5;
  if ((*((_WORD *)this + 144) & 0x100) != 0)
  {
LABEL_6:
    v178 = *((unsigned __int8 *)this + 276);
    if ((v1 & 0x80) != 0)
      goto LABEL_7;
    goto LABEL_205;
  }
LABEL_204:
  v178 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_7:
    v177 = *((unsigned __int8 *)this + 275);
    if ((v1 & 0x20) != 0)
      goto LABEL_8;
    goto LABEL_206;
  }
LABEL_205:
  v177 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_8:
    v176 = *((unsigned __int8 *)this + 273);
    if ((v1 & 4) != 0)
      goto LABEL_9;
    goto LABEL_207;
  }
LABEL_206:
  v176 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_9:
    v175 = *((unsigned __int8 *)this + 270);
    if ((v1 & 2) != 0)
      goto LABEL_10;
    goto LABEL_208;
  }
LABEL_207:
  v175 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_10:
    v174 = *((unsigned __int8 *)this + 269);
    if ((v2 & 0x40000) != 0)
      goto LABEL_11;
    goto LABEL_209;
  }
LABEL_208:
  v174 = 0;
  if ((v2 & 0x40000) != 0)
  {
LABEL_11:
    v173 = *((int *)this + 21);
    if ((v1 & 1) != 0)
      goto LABEL_12;
    goto LABEL_210;
  }
LABEL_209:
  v173 = 0;
  if ((v1 & 1) != 0)
  {
LABEL_12:
    v172 = *((unsigned __int8 *)this + 268);
    if ((v1 & 0x10) != 0)
      goto LABEL_13;
    goto LABEL_211;
  }
LABEL_210:
  v172 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_13:
    v171 = *((unsigned __int8 *)this + 272);
    if ((v2 & 0x20000) != 0)
      goto LABEL_14;
LABEL_212:
    v170 = 0;
    if ((v2 & 0x10000) != 0)
      goto LABEL_17;
LABEL_213:
    v169 = 0;
    if ((v2 & 0x400000) != 0)
      goto LABEL_20;
LABEL_214:
    v168 = 0;
    if ((v2 & 0x8000000) != 0)
      goto LABEL_23;
LABEL_215:
    v167 = 0;
    if ((v2 & 0x100000000) != 0)
      goto LABEL_26;
LABEL_216:
    v166 = 0;
    if ((v2 & 0x4000000000000) != 0)
      goto LABEL_29;
LABEL_217:
    v165 = 0;
    if ((v2 & 0x800000) != 0)
      goto LABEL_32;
LABEL_218:
    v164 = 0;
    if ((v2 & 0x10000000) != 0)
      goto LABEL_35;
LABEL_219:
    v163 = 0;
    if ((v2 & 0x200000000) != 0)
      goto LABEL_38;
LABEL_220:
    v162 = 0;
    if ((v2 & 0x8000000000000) != 0)
      goto LABEL_41;
LABEL_221:
    v161 = 0;
    if ((v2 & 0x1000000) != 0)
      goto LABEL_44;
LABEL_222:
    v160 = 0;
    if ((v2 & 0x20000000) != 0)
      goto LABEL_47;
LABEL_223:
    v159 = 0;
    if ((v2 & 0x400000000) != 0)
      goto LABEL_50;
LABEL_224:
    v158 = 0;
    if ((v2 & 0x10000000000000) != 0)
      goto LABEL_53;
LABEL_225:
    v157 = 0;
    if ((v2 & 0x80000) != 0)
      goto LABEL_56;
LABEL_226:
    v156 = 0;
    if ((v2 & 0x100000) != 0)
      goto LABEL_59;
LABEL_227:
    v155 = 0;
    if ((v2 & 0x200000) != 0)
      goto LABEL_62;
LABEL_228:
    v154 = 0;
    if ((v2 & 0x100000000000000) != 0)
      goto LABEL_65;
LABEL_229:
    v153 = 0;
    if ((v2 & 0x80000000000000) != 0)
      goto LABEL_68;
LABEL_230:
    v152 = 0;
    if ((v2 & 0x200000000000000) != 0)
      goto LABEL_71;
LABEL_231:
    v151 = 0;
    if ((v2 & 0x40) != 0)
      goto LABEL_74;
LABEL_232:
    v150 = 0;
    if ((v2 & 2) != 0)
      goto LABEL_77;
LABEL_233:
    v149 = 0;
    if ((v2 & 0x8000) != 0)
      goto LABEL_80;
LABEL_234:
    v148 = 0;
    if ((*((_WORD *)this + 144) & 0x800) != 0)
      goto LABEL_83;
    goto LABEL_235;
  }
LABEL_211:
  v171 = 0;
  if ((v2 & 0x20000) == 0)
    goto LABEL_212;
LABEL_14:
  v6 = *((float *)this + 20);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  v170 = v7;
  if ((v2 & 0x10000) == 0)
    goto LABEL_213;
LABEL_17:
  v8 = *((float *)this + 19);
  v9 = LODWORD(v8);
  if (v8 == 0.0)
    v9 = 0;
  v169 = v9;
  if ((v2 & 0x400000) == 0)
    goto LABEL_214;
LABEL_20:
  v10 = *((float *)this + 25);
  v11 = LODWORD(v10);
  if (v10 == 0.0)
    v11 = 0;
  v168 = v11;
  if ((v2 & 0x8000000) == 0)
    goto LABEL_215;
LABEL_23:
  v12 = *((float *)this + 30);
  v13 = LODWORD(v12);
  if (v12 == 0.0)
    v13 = 0;
  v167 = v13;
  if ((v2 & 0x100000000) == 0)
    goto LABEL_216;
LABEL_26:
  v14 = *((float *)this + 35);
  v15 = LODWORD(v14);
  if (v14 == 0.0)
    v15 = 0;
  v166 = v15;
  if ((v2 & 0x4000000000000) == 0)
    goto LABEL_217;
LABEL_29:
  v16 = *((float *)this + 53);
  v17 = LODWORD(v16);
  if (v16 == 0.0)
    v17 = 0;
  v165 = v17;
  if ((v2 & 0x800000) == 0)
    goto LABEL_218;
LABEL_32:
  v18 = *((float *)this + 26);
  v19 = LODWORD(v18);
  if (v18 == 0.0)
    v19 = 0;
  v164 = v19;
  if ((v2 & 0x10000000) == 0)
    goto LABEL_219;
LABEL_35:
  v20 = *((float *)this + 31);
  v21 = LODWORD(v20);
  if (v20 == 0.0)
    v21 = 0;
  v163 = v21;
  if ((v2 & 0x200000000) == 0)
    goto LABEL_220;
LABEL_38:
  v22 = *((float *)this + 36);
  v23 = LODWORD(v22);
  if (v22 == 0.0)
    v23 = 0;
  v162 = v23;
  if ((v2 & 0x8000000000000) == 0)
    goto LABEL_221;
LABEL_41:
  v24 = *((float *)this + 54);
  v25 = LODWORD(v24);
  if (v24 == 0.0)
    v25 = 0;
  v161 = v25;
  if ((v2 & 0x1000000) == 0)
    goto LABEL_222;
LABEL_44:
  v26 = *((float *)this + 27);
  v27 = LODWORD(v26);
  if (v26 == 0.0)
    v27 = 0;
  v160 = v27;
  if ((v2 & 0x20000000) == 0)
    goto LABEL_223;
LABEL_47:
  v28 = *((float *)this + 32);
  v29 = LODWORD(v28);
  if (v28 == 0.0)
    v29 = 0;
  v159 = v29;
  if ((v2 & 0x400000000) == 0)
    goto LABEL_224;
LABEL_50:
  v30 = *((float *)this + 37);
  v31 = LODWORD(v30);
  if (v30 == 0.0)
    v31 = 0;
  v158 = v31;
  if ((v2 & 0x10000000000000) == 0)
    goto LABEL_225;
LABEL_53:
  v32 = *((float *)this + 55);
  v33 = LODWORD(v32);
  if (v32 == 0.0)
    v33 = 0;
  v157 = v33;
  if ((v2 & 0x80000) == 0)
    goto LABEL_226;
LABEL_56:
  v34 = *((float *)this + 22);
  v35 = LODWORD(v34);
  if (v34 == 0.0)
    v35 = 0;
  v156 = v35;
  if ((v2 & 0x100000) == 0)
    goto LABEL_227;
LABEL_59:
  v36 = *((float *)this + 23);
  v37 = LODWORD(v36);
  if (v36 == 0.0)
    v37 = 0;
  v155 = v37;
  if ((v2 & 0x200000) == 0)
    goto LABEL_228;
LABEL_62:
  v38 = *((float *)this + 24);
  v39 = LODWORD(v38);
  if (v38 == 0.0)
    v39 = 0;
  v154 = v39;
  if ((v2 & 0x100000000000000) == 0)
    goto LABEL_229;
LABEL_65:
  v40 = *((float *)this + 59);
  v41 = LODWORD(v40);
  if (v40 == 0.0)
    v41 = 0;
  v153 = v41;
  if ((v2 & 0x80000000000000) == 0)
    goto LABEL_230;
LABEL_68:
  v42 = *((float *)this + 58);
  v43 = LODWORD(v42);
  if (v42 == 0.0)
    v43 = 0;
  v152 = v43;
  if ((v2 & 0x200000000000000) == 0)
    goto LABEL_231;
LABEL_71:
  v44 = *((float *)this + 60);
  v45 = LODWORD(v44);
  if (v44 == 0.0)
    v45 = 0;
  v151 = v45;
  if ((v2 & 0x40) == 0)
    goto LABEL_232;
LABEL_74:
  v46 = *((float *)this + 9);
  v47 = LODWORD(v46);
  if (v46 == 0.0)
    v47 = 0;
  v150 = v47;
  if ((v2 & 2) == 0)
    goto LABEL_233;
LABEL_77:
  v48 = *((float *)this + 4);
  v49 = LODWORD(v48);
  if (v48 == 0.0)
    v49 = 0;
  v149 = v49;
  if ((v2 & 0x8000) == 0)
    goto LABEL_234;
LABEL_80:
  v50 = *((float *)this + 18);
  v51 = LODWORD(v50);
  if (v50 == 0.0)
    v51 = 0;
  v148 = v51;
  if ((*((_WORD *)this + 144) & 0x800) != 0)
  {
LABEL_83:
    v147 = *((unsigned __int8 *)this + 279);
    if ((v1 & 8) != 0)
      goto LABEL_84;
    goto LABEL_236;
  }
LABEL_235:
  v147 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_84:
    v146 = *((unsigned __int8 *)this + 271);
    if ((v2 & 0x80) != 0)
      goto LABEL_85;
LABEL_237:
    v145 = 0;
    if ((v2 & 0x400) != 0)
      goto LABEL_88;
LABEL_238:
    v144 = 0;
    if ((v2 & 0x200) != 0)
      goto LABEL_91;
LABEL_239:
    v143 = 0;
    if ((v2 & 0x100) != 0)
      goto LABEL_94;
LABEL_240:
    v142 = 0;
    if ((v2 & 4) != 0)
      goto LABEL_97;
LABEL_241:
    v141 = 0;
    if ((v2 & 0x20) != 0)
      goto LABEL_100;
LABEL_242:
    v140 = 0;
    if ((v2 & 0x10) != 0)
      goto LABEL_103;
LABEL_243:
    v139 = 0;
    if ((v2 & 8) != 0)
      goto LABEL_106;
LABEL_244:
    v138 = 0;
    if ((v2 & 0x800) != 0)
      goto LABEL_109;
LABEL_245:
    v137 = 0;
    if ((v2 & 0x4000) != 0)
      goto LABEL_112;
LABEL_246:
    v136 = 0;
    if ((v2 & 0x2000) != 0)
      goto LABEL_115;
LABEL_247:
    v135 = 0;
    if ((v2 & 0x1000) != 0)
      goto LABEL_118;
LABEL_248:
    v134 = 0;
    if ((v2 & 0x2000000) != 0)
      goto LABEL_121;
LABEL_249:
    v133 = 0;
    if ((v2 & 0x40000000) != 0)
      goto LABEL_124;
LABEL_250:
    v132 = 0;
    if ((v2 & 0x800000000) != 0)
      goto LABEL_127;
LABEL_251:
    v131 = 0;
    if ((v2 & 0x20000000000000) != 0)
      goto LABEL_130;
LABEL_252:
    v83 = 0;
    if ((v2 & 0x4000000) != 0)
      goto LABEL_134;
LABEL_253:
    v85 = 0;
    if ((v2 & 0x80000000) != 0)
      goto LABEL_138;
LABEL_254:
    v87 = 0;
    if ((v2 & 0x1000000000) != 0)
      goto LABEL_141;
LABEL_255:
    v89 = 0;
    if ((v2 & 0x40000000000000) != 0)
      goto LABEL_144;
LABEL_256:
    v91 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_147;
    goto LABEL_257;
  }
LABEL_236:
  v146 = 0;
  if ((v2 & 0x80) == 0)
    goto LABEL_237;
LABEL_85:
  v52 = *((float *)this + 10);
  v53 = LODWORD(v52);
  if (v52 == 0.0)
    v53 = 0;
  v145 = v53;
  if ((v2 & 0x400) == 0)
    goto LABEL_238;
LABEL_88:
  v54 = *((float *)this + 13);
  v55 = LODWORD(v54);
  if (v54 == 0.0)
    v55 = 0;
  v144 = v55;
  if ((v2 & 0x200) == 0)
    goto LABEL_239;
LABEL_91:
  v56 = *((float *)this + 12);
  v57 = LODWORD(v56);
  if (v56 == 0.0)
    v57 = 0;
  v143 = v57;
  if ((v2 & 0x100) == 0)
    goto LABEL_240;
LABEL_94:
  v58 = *((float *)this + 11);
  v59 = LODWORD(v58);
  if (v58 == 0.0)
    v59 = 0;
  v142 = v59;
  if ((v2 & 4) == 0)
    goto LABEL_241;
LABEL_97:
  v60 = *((float *)this + 5);
  v61 = LODWORD(v60);
  if (v60 == 0.0)
    v61 = 0;
  v141 = v61;
  if ((v2 & 0x20) == 0)
    goto LABEL_242;
LABEL_100:
  v62 = *((float *)this + 8);
  v63 = LODWORD(v62);
  if (v62 == 0.0)
    v63 = 0;
  v140 = v63;
  if ((v2 & 0x10) == 0)
    goto LABEL_243;
LABEL_103:
  v64 = *((float *)this + 7);
  v65 = LODWORD(v64);
  if (v64 == 0.0)
    v65 = 0;
  v139 = v65;
  if ((v2 & 8) == 0)
    goto LABEL_244;
LABEL_106:
  v66 = *((float *)this + 6);
  v67 = LODWORD(v66);
  if (v66 == 0.0)
    v67 = 0;
  v138 = v67;
  if ((v2 & 0x800) == 0)
    goto LABEL_245;
LABEL_109:
  v68 = *((float *)this + 14);
  v69 = LODWORD(v68);
  if (v68 == 0.0)
    v69 = 0;
  v137 = v69;
  if ((v2 & 0x4000) == 0)
    goto LABEL_246;
LABEL_112:
  v70 = *((float *)this + 17);
  v71 = LODWORD(v70);
  if (v70 == 0.0)
    v71 = 0;
  v136 = v71;
  if ((v2 & 0x2000) == 0)
    goto LABEL_247;
LABEL_115:
  v72 = *((float *)this + 16);
  v73 = LODWORD(v72);
  if (v72 == 0.0)
    v73 = 0;
  v135 = v73;
  if ((v2 & 0x1000) == 0)
    goto LABEL_248;
LABEL_118:
  v74 = *((float *)this + 15);
  v75 = LODWORD(v74);
  if (v74 == 0.0)
    v75 = 0;
  v134 = v75;
  if ((v2 & 0x2000000) == 0)
    goto LABEL_249;
LABEL_121:
  v76 = *((float *)this + 28);
  v77 = LODWORD(v76);
  if (v76 == 0.0)
    v77 = 0;
  v133 = v77;
  if ((v2 & 0x40000000) == 0)
    goto LABEL_250;
LABEL_124:
  v78 = *((float *)this + 33);
  v79 = LODWORD(v78);
  if (v78 == 0.0)
    v79 = 0;
  v132 = v79;
  if ((v2 & 0x800000000) == 0)
    goto LABEL_251;
LABEL_127:
  v80 = *((float *)this + 38);
  v81 = LODWORD(v80);
  if (v80 == 0.0)
    v81 = 0;
  v131 = v81;
  if ((v2 & 0x20000000000000) == 0)
    goto LABEL_252;
LABEL_130:
  v82 = *((float *)this + 56);
  if (v82 == 0.0)
    v83 = 0;
  else
    v83 = LODWORD(v82);
  if ((v2 & 0x4000000) == 0)
    goto LABEL_253;
LABEL_134:
  v84 = *((float *)this + 29);
  if (v84 == 0.0)
    v85 = 0;
  else
    v85 = LODWORD(v84);
  if ((v2 & 0x80000000) == 0)
    goto LABEL_254;
LABEL_138:
  v86 = *((float *)this + 34);
  v87 = LODWORD(v86);
  if (v86 == 0.0)
    v87 = 0;
  if ((v2 & 0x1000000000) == 0)
    goto LABEL_255;
LABEL_141:
  v88 = *((float *)this + 39);
  v89 = LODWORD(v88);
  if (v88 == 0.0)
    v89 = 0;
  if ((v2 & 0x40000000000000) == 0)
    goto LABEL_256;
LABEL_144:
  v90 = *((float *)this + 57);
  v91 = LODWORD(v90);
  if (v90 == 0.0)
    v91 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_147:
    v92 = *((unsigned __int8 *)this + 274);
    if ((v2 & 0x1000000000000000) != 0)
      goto LABEL_148;
LABEL_258:
    v94 = 0;
    if ((v2 & 0x400000000000000) != 0)
      goto LABEL_151;
LABEL_259:
    v96 = 0;
    if ((*((_WORD *)this + 144) & 0x200) != 0)
      goto LABEL_154;
    goto LABEL_260;
  }
LABEL_257:
  v92 = 0;
  if ((v2 & 0x1000000000000000) == 0)
    goto LABEL_258;
LABEL_148:
  v93 = *((float *)this + 63);
  v94 = LODWORD(v93);
  if (v93 == 0.0)
    v94 = 0;
  if ((v2 & 0x400000000000000) == 0)
    goto LABEL_259;
LABEL_151:
  v95 = *((float *)this + 61);
  v96 = LODWORD(v95);
  if (v95 == 0.0)
    v96 = 0;
  if ((*((_WORD *)this + 144) & 0x200) != 0)
  {
LABEL_154:
    v97 = *((unsigned __int8 *)this + 277);
    if ((v2 & 0x2000000000) != 0)
      goto LABEL_155;
LABEL_261:
    v99 = 0;
    if ((v2 & 0x4000000000) != 0)
      goto LABEL_158;
LABEL_262:
    v101 = 0;
    if ((v2 & 0x8000000000) != 0)
      goto LABEL_161;
LABEL_263:
    v103 = 0;
    if ((v2 & 0x20000000000) != 0)
      goto LABEL_164;
LABEL_264:
    v105 = 0;
    if ((v2 & 0x10000000000) != 0)
      goto LABEL_167;
LABEL_265:
    v107 = 0;
    if ((v2 & 0x40000000000) != 0)
      goto LABEL_170;
LABEL_266:
    v109 = 0;
    if ((v2 & 0x80000000000) != 0)
      goto LABEL_173;
LABEL_267:
    v111 = 0;
    if ((v2 & 0x100000000000) != 0)
      goto LABEL_176;
LABEL_268:
    v113 = 0;
    if ((v2 & 0x200000000000) != 0)
      goto LABEL_179;
LABEL_269:
    v115 = 0;
    if ((v2 & 0x800000000000) != 0)
      goto LABEL_182;
LABEL_270:
    v117 = 0;
    if ((v2 & 0x400000000000) != 0)
      goto LABEL_185;
LABEL_271:
    v119 = 0;
    if ((v2 & 0x1000000000000) != 0)
      goto LABEL_188;
LABEL_272:
    v121 = 0;
    if ((v2 & 0x800000000000000) != 0)
      goto LABEL_191;
    goto LABEL_273;
  }
LABEL_260:
  v97 = 0;
  if ((v2 & 0x2000000000) == 0)
    goto LABEL_261;
LABEL_155:
  v98 = *((float *)this + 40);
  v99 = LODWORD(v98);
  if (v98 == 0.0)
    v99 = 0;
  if ((v2 & 0x4000000000) == 0)
    goto LABEL_262;
LABEL_158:
  v100 = *((float *)this + 41);
  v101 = LODWORD(v100);
  if (v100 == 0.0)
    v101 = 0;
  if ((v2 & 0x8000000000) == 0)
    goto LABEL_263;
LABEL_161:
  v102 = *((float *)this + 42);
  v103 = LODWORD(v102);
  if (v102 == 0.0)
    v103 = 0;
  if ((v2 & 0x20000000000) == 0)
    goto LABEL_264;
LABEL_164:
  v104 = *((float *)this + 44);
  v105 = LODWORD(v104);
  if (v104 == 0.0)
    v105 = 0;
  if ((v2 & 0x10000000000) == 0)
    goto LABEL_265;
LABEL_167:
  v106 = *((float *)this + 43);
  v107 = LODWORD(v106);
  if (v106 == 0.0)
    v107 = 0;
  if ((v2 & 0x40000000000) == 0)
    goto LABEL_266;
LABEL_170:
  v108 = *((float *)this + 45);
  v109 = LODWORD(v108);
  if (v108 == 0.0)
    v109 = 0;
  if ((v2 & 0x80000000000) == 0)
    goto LABEL_267;
LABEL_173:
  v110 = *((float *)this + 46);
  v111 = LODWORD(v110);
  if (v110 == 0.0)
    v111 = 0;
  if ((v2 & 0x100000000000) == 0)
    goto LABEL_268;
LABEL_176:
  v112 = *((float *)this + 47);
  v113 = LODWORD(v112);
  if (v112 == 0.0)
    v113 = 0;
  if ((v2 & 0x200000000000) == 0)
    goto LABEL_269;
LABEL_179:
  v114 = *((float *)this + 48);
  v115 = LODWORD(v114);
  if (v114 == 0.0)
    v115 = 0;
  if ((v2 & 0x800000000000) == 0)
    goto LABEL_270;
LABEL_182:
  v116 = *((float *)this + 50);
  v117 = LODWORD(v116);
  if (v116 == 0.0)
    v117 = 0;
  if ((v2 & 0x400000000000) == 0)
    goto LABEL_271;
LABEL_185:
  v118 = *((float *)this + 49);
  v119 = LODWORD(v118);
  if (v118 == 0.0)
    v119 = 0;
  if ((v2 & 0x1000000000000) == 0)
    goto LABEL_272;
LABEL_188:
  v120 = *((float *)this + 51);
  v121 = LODWORD(v120);
  if (v120 == 0.0)
    v121 = 0;
  if ((v2 & 0x800000000000000) != 0)
  {
LABEL_191:
    v122 = *((int *)this + 62);
    if ((*((_WORD *)this + 144) & 0x400) != 0)
      goto LABEL_192;
    goto LABEL_274;
  }
LABEL_273:
  v122 = 0;
  if ((*((_WORD *)this + 144) & 0x400) != 0)
  {
LABEL_192:
    v123 = *((unsigned __int8 *)this + 278);
    if ((v2 & 0x4000000000000000) != 0)
      goto LABEL_193;
LABEL_275:
    v125 = 0;
    if (v2 < 0)
      goto LABEL_196;
    goto LABEL_276;
  }
LABEL_274:
  v123 = 0;
  if ((v2 & 0x4000000000000000) == 0)
    goto LABEL_275;
LABEL_193:
  v124 = *((float *)this + 65);
  v125 = LODWORD(v124);
  if (v124 == 0.0)
    v125 = 0;
  if (v2 < 0)
  {
LABEL_196:
    v126 = *((float *)this + 66);
    v127 = LODWORD(v126);
    if (v126 == 0.0)
      v127 = 0;
    if ((v2 & 0x2000000000000000) != 0)
      goto LABEL_199;
LABEL_277:
    v129 = 0;
    return v179 ^ v3 ^ v178 ^ v177 ^ v176 ^ v175 ^ v174 ^ v173 ^ v172 ^ v171 ^ v170 ^ v169 ^ v168 ^ v167 ^ v166 ^ v165 ^ v164 ^ v163 ^ v162 ^ v161 ^ v160 ^ v159 ^ v158 ^ v157 ^ v156 ^ v155 ^ v154 ^ v153 ^ v152 ^ v151 ^ v150 ^ v149 ^ v148 ^ v147 ^ v146 ^ v145 ^ v144 ^ v143 ^ v142 ^ v141 ^ v140 ^ v139 ^ v138 ^ v137 ^ v136 ^ v135 ^ v134 ^ v133 ^ v132 ^ v131 ^ v83 ^ v85 ^ v87 ^ v89 ^ v91 ^ v92 ^ v94 ^ v96 ^ v97 ^ v99 ^ v101 ^ v103 ^ v105 ^ v107 ^ v109 ^ v111 ^ v113 ^ v115 ^ v117 ^ v119 ^ v121 ^ v122 ^ v123 ^ v125 ^ v127 ^ v129;
  }
LABEL_276:
  v127 = 0;
  if ((v2 & 0x2000000000000000) == 0)
    goto LABEL_277;
LABEL_199:
  v128 = *((float *)this + 64);
  v129 = LODWORD(v128);
  if (v128 == 0.0)
    v129 = 0;
  return v179 ^ v3 ^ v178 ^ v177 ^ v176 ^ v175 ^ v174 ^ v173 ^ v172 ^ v171 ^ v170 ^ v169 ^ v168 ^ v167 ^ v166 ^ v165 ^ v164 ^ v163 ^ v162 ^ v161 ^ v160 ^ v159 ^ v158 ^ v157 ^ v156 ^ v155 ^ v154 ^ v153 ^ v152 ^ v151 ^ v150 ^ v149 ^ v148 ^ v147 ^ v146 ^ v145 ^ v144 ^ v143 ^ v142 ^ v141 ^ v140 ^ v139 ^ v138 ^ v137 ^ v136 ^ v135 ^ v134 ^ v133 ^ v132 ^ v131 ^ v83 ^ v85 ^ v87 ^ v89 ^ v91 ^ v92 ^ v94 ^ v96 ^ v97 ^ v99 ^ v101 ^ v103 ^ v105 ^ v107 ^ v109 ^ v111 ^ v113 ^ v115 ^ v117 ^ v119 ^ v121 ^ v122 ^ v123 ^ v125 ^ v127 ^ v129;
}

void CMMsl::KappaDirectionOfTravel::~KappaDirectionOfTravel(CMMsl::KappaDirectionOfTravel *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_25135E828;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::KappaDirectionOfTravel::~KappaDirectionOfTravel(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::KappaDirectionOfTravel *CMMsl::KappaDirectionOfTravel::KappaDirectionOfTravel(CMMsl::KappaDirectionOfTravel *this, const CMMsl::KappaDirectionOfTravel *a2)
{
  _QWORD *v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)this = &off_25135E828;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (_QWORD *)((char *)this + 8);
  *((_DWORD *)this + 36) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  v5 = *((_DWORD *)a2 + 36);
  if ((v5 & 8) != 0)
  {
    v7 = *((_QWORD *)a2 + 10);
    v6 = 8;
    *((_DWORD *)this + 36) = 8;
    *((_QWORD *)this + 10) = v7;
    v5 = *((_DWORD *)a2 + 36);
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((v5 & 0x20) != 0)
  {
LABEL_5:
    v8 = *((_DWORD *)a2 + 23);
    v6 |= 0x20u;
    *((_DWORD *)this + 36) = v6;
    *((_DWORD *)this + 23) = v8;
    v5 = *((_DWORD *)a2 + 36);
  }
LABEL_6:
  if ((v5 & 0x40) != 0)
  {
    v11 = *((_DWORD *)a2 + 24);
    v6 |= 0x40u;
    *((_DWORD *)this + 36) = v6;
    *((_DWORD *)this + 24) = v11;
    v5 = *((_DWORD *)a2 + 36);
    if ((v5 & 0x80) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_28;
    }
  }
  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  v12 = *((_DWORD *)a2 + 25);
  v6 |= 0x80u;
  *((_DWORD *)this + 36) = v6;
  *((_DWORD *)this + 25) = v12;
  v5 = *((_DWORD *)a2 + 36);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_29;
  }
LABEL_28:
  v13 = *((_DWORD *)a2 + 22);
  v6 |= 0x10u;
  *((_DWORD *)this + 36) = v6;
  *((_DWORD *)this + 22) = v13;
  v5 = *((_DWORD *)a2 + 36);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_30;
  }
LABEL_29:
  v14 = *((_DWORD *)a2 + 28);
  v6 |= 0x400u;
  *((_DWORD *)this + 36) = v6;
  *((_DWORD *)this + 28) = v14;
  v5 = *((_DWORD *)a2 + 36);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_31;
  }
LABEL_30:
  v15 = *((_DWORD *)a2 + 29);
  v6 |= 0x800u;
  *((_DWORD *)this + 36) = v6;
  *((_DWORD *)this + 29) = v15;
  v5 = *((_DWORD *)a2 + 36);
  if ((v5 & 0x1000) == 0)
  {
LABEL_12:
    if ((v5 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_32;
  }
LABEL_31:
  v16 = *((_DWORD *)a2 + 30);
  v6 |= 0x1000u;
  *((_DWORD *)this + 36) = v6;
  *((_DWORD *)this + 30) = v16;
  v5 = *((_DWORD *)a2 + 36);
  if ((v5 & 0x200) == 0)
  {
LABEL_13:
    if ((v5 & 0x100) == 0)
      goto LABEL_14;
    goto LABEL_33;
  }
LABEL_32:
  v17 = *((_DWORD *)a2 + 27);
  v6 |= 0x200u;
  *((_DWORD *)this + 36) = v6;
  *((_DWORD *)this + 27) = v17;
  v5 = *((_DWORD *)a2 + 36);
  if ((v5 & 0x100) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_34;
  }
LABEL_33:
  v18 = *((_DWORD *)a2 + 26);
  v6 |= 0x100u;
  *((_DWORD *)this + 36) = v6;
  *((_DWORD *)this + 26) = v18;
  v5 = *((_DWORD *)a2 + 36);
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0)
      goto LABEL_16;
    goto LABEL_35;
  }
LABEL_34:
  v19 = *((_DWORD *)a2 + 32);
  v6 |= 0x4000u;
  *((_DWORD *)this + 36) = v6;
  *((_DWORD *)this + 32) = v19;
  v5 = *((_DWORD *)a2 + 36);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000) == 0)
      goto LABEL_17;
    goto LABEL_36;
  }
LABEL_35:
  v20 = *((_DWORD *)a2 + 33);
  v6 |= 0x8000u;
  *((_DWORD *)this + 36) = v6;
  *((_DWORD *)this + 33) = v20;
  v5 = *((_DWORD *)a2 + 36);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_18;
    goto LABEL_37;
  }
LABEL_36:
  v21 = *((_DWORD *)a2 + 34);
  v6 |= 0x10000u;
  *((_DWORD *)this + 36) = v6;
  *((_DWORD *)this + 34) = v21;
  v5 = *((_DWORD *)a2 + 36);
  if ((v5 & 0x2000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_38;
  }
LABEL_37:
  v22 = *((_DWORD *)a2 + 31);
  v6 |= 0x2000u;
  *((_DWORD *)this + 36) = v6;
  *((_DWORD *)this + 31) = v22;
  v5 = *((_DWORD *)a2 + 36);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 4) == 0)
      goto LABEL_20;
    goto LABEL_39;
  }
LABEL_38:
  v6 |= 0x20000u;
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)this + 36) = v6;
  v5 = *((_DWORD *)a2 + 36);
  if ((v5 & 4) == 0)
  {
LABEL_20:
    if ((v5 & 1) == 0)
      goto LABEL_21;
    goto LABEL_40;
  }
LABEL_39:
  v23 = *((_QWORD *)a2 + 9);
  v6 |= 4u;
  *((_DWORD *)this + 36) = v6;
  *((_QWORD *)this + 9) = v23;
  v5 = *((_DWORD *)a2 + 36);
  if ((v5 & 1) == 0)
  {
LABEL_21:
    if ((v5 & 2) == 0)
      goto LABEL_23;
    goto LABEL_22;
  }
LABEL_40:
  v24 = *((_QWORD *)a2 + 7);
  v6 |= 1u;
  *((_DWORD *)this + 36) = v6;
  *((_QWORD *)this + 7) = v24;
  if ((*((_DWORD *)a2 + 36) & 2) != 0)
  {
LABEL_22:
    v9 = *((_QWORD *)a2 + 8);
    *((_DWORD *)this + 36) = v6 | 2;
    *((_QWORD *)this + 8) = v9;
  }
LABEL_23:
  if (this != a2)
  {
    sub_242911380((_QWORD *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
    sub_242911380(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  }
  return this;
}

CMMsl *CMMsl::KappaDirectionOfTravel::operator=(CMMsl *a1, const CMMsl::KappaDirectionOfTravel *a2)
{
  CMMsl::KappaDirectionOfTravel *v3;
  _BYTE v5[152];

  if (a1 != a2)
  {
    CMMsl::KappaDirectionOfTravel::KappaDirectionOfTravel((CMMsl::KappaDirectionOfTravel *)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaDirectionOfTravel *)v5, v3);
    CMMsl::KappaDirectionOfTravel::~KappaDirectionOfTravel((CMMsl::KappaDirectionOfTravel *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaDirectionOfTravel *a2, CMMsl::KappaDirectionOfTravel *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  float result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v3;
  v4 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v4;
  LODWORD(v4) = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v4;
  v5 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v5;
  v6 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v6;
  v7 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v7;
  v9 = *((_QWORD *)this + 6);
  v8 = *((_QWORD *)this + 7);
  v10 = *((_QWORD *)a2 + 7);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)this + 7) = v10;
  *((_QWORD *)a2 + 7) = v8;
  v11 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  v12 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v12;
  v13 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v13;
  v14 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v14;
  v15 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v15;
  v16 = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v16;
  v17 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v17;
  v18 = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v18;
  v19 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v19;
  v20 = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v20;
  v21 = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v21;
  v22 = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v22;
  result = *((float *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((float *)a2 + 31) = result;
  *((_QWORD *)a2 + 8) = v11;
  *((_QWORD *)a2 + 6) = v9;
  v24 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v24;
  v25 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v25;
  v26 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v26;
  return result;
}

uint64_t CMMsl::KappaDirectionOfTravel::KappaDirectionOfTravel(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_25135E828;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  sub_242911330(a1 + 32, (__n128 *)(a2 + 32));
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  return a1;
}

CMMsl *CMMsl::KappaDirectionOfTravel::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::KappaDirectionOfTravel *v3;
  _BYTE v5[152];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaDirectionOfTravel::KappaDirectionOfTravel((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaDirectionOfTravel *)v5, v3);
    CMMsl::KappaDirectionOfTravel::~KappaDirectionOfTravel((CMMsl::KappaDirectionOfTravel *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaDirectionOfTravel::formatText(CMMsl::KappaDirectionOfTravel *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;
  float *v6;
  float *v7;
  float v8;
  int v9;
  float *v10;
  float *v11;
  float v12;
  int v13;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 36);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "combinedUnc", *((float *)this + 22));
    v5 = *((_DWORD *)this + 36);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_29;
    }
  }
  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "combinedX", *((float *)this + 23));
  v5 = *((_DWORD *)this + 36);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "combinedY", *((float *)this + 24));
  if ((*((_DWORD *)this + 36) & 0x80) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "combinedZ", *((float *)this + 25));
LABEL_6:
  v6 = (float *)*((_QWORD *)this + 1);
  v7 = (float *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(a2, "inerAccelApproachMx", v8);
  }
  v9 = *((_DWORD *)this + 36);
  if ((v9 & 0x100) != 0)
  {
    PB::TextFormatter::format(a2, "inerAccelCount");
    v9 = *((_DWORD *)this + 36);
    if ((v9 & 0x200) == 0)
    {
LABEL_10:
      if ((v9 & 0x400) == 0)
        goto LABEL_11;
      goto LABEL_33;
    }
  }
  else if ((v9 & 0x200) == 0)
  {
    goto LABEL_10;
  }
  PB::TextFormatter::format(a2, "inertialApproachUnc", *((float *)this + 27));
  v9 = *((_DWORD *)this + 36);
  if ((v9 & 0x400) == 0)
  {
LABEL_11:
    if ((v9 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "inertialApproachX", *((float *)this + 28));
  v9 = *((_DWORD *)this + 36);
  if ((v9 & 0x800) == 0)
  {
LABEL_12:
    if ((v9 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "inertialApproachY", *((float *)this + 29));
  v9 = *((_DWORD *)this + 36);
  if ((v9 & 0x1000) == 0)
  {
LABEL_13:
    if ((v9 & 1) == 0)
      goto LABEL_14;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "inertialApproachZ", *((float *)this + 30));
  v9 = *((_DWORD *)this + 36);
  if ((v9 & 1) == 0)
  {
LABEL_14:
    if ((v9 & 2) == 0)
      goto LABEL_15;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "previousTimeAccel");
  v9 = *((_DWORD *)this + 36);
  if ((v9 & 2) == 0)
  {
LABEL_15:
    if ((v9 & 4) == 0)
      goto LABEL_17;
    goto LABEL_16;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "previousTimeSag");
  if ((*((_DWORD *)this + 36) & 4) != 0)
LABEL_16:
    PB::TextFormatter::format(a2, "previousTimestamp");
LABEL_17:
  v10 = (float *)*((_QWORD *)this + 4);
  v11 = (float *)*((_QWORD *)this + 5);
  while (v10 != v11)
  {
    v12 = *v10++;
    PB::TextFormatter::format(a2, "sagittalApproachMx", v12);
  }
  v13 = *((_DWORD *)this + 36);
  if ((v13 & 0x2000) != 0)
  {
    PB::TextFormatter::format(a2, "sagittalApproachUnc", *((float *)this + 31));
    v13 = *((_DWORD *)this + 36);
    if ((v13 & 0x4000) == 0)
    {
LABEL_21:
      if ((v13 & 0x8000) == 0)
        goto LABEL_22;
      goto LABEL_41;
    }
  }
  else if ((v13 & 0x4000) == 0)
  {
    goto LABEL_21;
  }
  PB::TextFormatter::format(a2, "sagittalApproachX", *((float *)this + 32));
  v13 = *((_DWORD *)this + 36);
  if ((v13 & 0x8000) == 0)
  {
LABEL_22:
    if ((v13 & 0x10000) == 0)
      goto LABEL_23;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "sagittalApproachY", *((float *)this + 33));
  v13 = *((_DWORD *)this + 36);
  if ((v13 & 0x10000) == 0)
  {
LABEL_23:
    if ((v13 & 0x20000) == 0)
      goto LABEL_24;
LABEL_43:
    PB::TextFormatter::format(a2, "sagittalCount");
    if ((*((_DWORD *)this + 36) & 8) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_25;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "sagittalApproachZ", *((float *)this + 34));
  v13 = *((_DWORD *)this + 36);
  if ((v13 & 0x20000) != 0)
    goto LABEL_43;
LABEL_24:
  if ((v13 & 8) != 0)
LABEL_25:
    PB::TextFormatter::format(a2, "timestamp");
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::KappaDirectionOfTravel::readFrom(CMMsl::KappaDirectionOfTravel *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char v75;
  unsigned int v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  char *v83;
  _DWORD *v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  _DWORD *v91;
  int v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  _DWORD *v98;
  char *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  _DWORD *v105;
  int v106;
  unint64_t v107;
  char v108;
  unsigned int v109;
  unint64_t v110;
  char v111;
  char v112;
  unsigned int v113;
  unint64_t v114;
  char v115;
  char v116;
  unsigned int v117;
  unint64_t v118;
  char v119;
  char v120;
  unsigned int v121;
  unint64_t v122;
  char v123;
  char v124;
  unsigned int v125;
  unint64_t v126;
  char v127;
  char v128;
  unsigned int v129;
  unint64_t v130;
  char v131;
  unint64_t v132;
  char *v133;
  _DWORD *v134;
  unint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  _DWORD *v149;
  int v150;
  _DWORD *v151;
  int v152;
  unint64_t v153;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_21:
      v19 = v11 & 7;
      if (v19 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_DWORD *)this + 36) |= 8u;
          v20 = *((_QWORD *)a2 + 1);
          v21 = *((_QWORD *)a2 + 2);
          v22 = *(_QWORD *)a2;
          if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
          {
            v23 = 0;
            v24 = 0;
            v25 = 0;
            do
            {
              v26 = v20 + 1;
              *((_QWORD *)a2 + 1) = v20 + 1;
              v27 = *(_BYTE *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0)
                goto LABEL_221;
              v23 += 7;
              v20 = v26;
              v14 = v24++ > 8;
            }
            while (!v14);
LABEL_155:
            v25 = 0;
            goto LABEL_221;
          }
          v108 = 0;
          v109 = 0;
          v25 = 0;
          if (v21 <= v20)
            v21 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v21 == v20)
            {
              v25 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v110 = v20 + 1;
              v111 = *(_BYTE *)(v22 + v20);
              *((_QWORD *)a2 + 1) = v110;
              v25 |= (unint64_t)(v111 & 0x7F) << v108;
              if (v111 < 0)
              {
                v108 += 7;
                v20 = v110;
                v14 = v109++ > 8;
                if (v14)
                  goto LABEL_155;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v25 = 0;
            }
            break;
          }
LABEL_221:
          *((_QWORD *)this + 10) = v25;
          goto LABEL_256;
        case 2u:
          *((_DWORD *)this + 36) |= 0x20u;
          v28 = *((_QWORD *)a2 + 1);
          if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_253;
          *((_DWORD *)this + 23) = *(_DWORD *)(*(_QWORD *)a2 + v28);
          goto LABEL_255;
        case 3u:
          *((_DWORD *)this + 36) |= 0x40u;
          v29 = *((_QWORD *)a2 + 1);
          if (v29 > 0xFFFFFFFFFFFFFFFBLL || v29 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_253;
          *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v29);
          goto LABEL_255;
        case 4u:
          *((_DWORD *)this + 36) |= 0x80u;
          v30 = *((_QWORD *)a2 + 1);
          if (v30 > 0xFFFFFFFFFFFFFFFBLL || v30 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_253;
          *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v30);
          goto LABEL_255;
        case 5u:
          *((_DWORD *)this + 36) |= 0x10u;
          v31 = *((_QWORD *)a2 + 1);
          if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_253;
          *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v31);
          goto LABEL_255;
        case 6u:
          *((_DWORD *)this + 36) |= 0x400u;
          v32 = *((_QWORD *)a2 + 1);
          if (v32 > 0xFFFFFFFFFFFFFFFBLL || v32 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_253;
          *((_DWORD *)this + 28) = *(_DWORD *)(*(_QWORD *)a2 + v32);
          goto LABEL_255;
        case 7u:
          *((_DWORD *)this + 36) |= 0x800u;
          v33 = *((_QWORD *)a2 + 1);
          if (v33 > 0xFFFFFFFFFFFFFFFBLL || v33 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_253;
          *((_DWORD *)this + 29) = *(_DWORD *)(*(_QWORD *)a2 + v33);
          goto LABEL_255;
        case 8u:
          *((_DWORD *)this + 36) |= 0x1000u;
          v34 = *((_QWORD *)a2 + 1);
          if (v34 > 0xFFFFFFFFFFFFFFFBLL || v34 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_253;
          *((_DWORD *)this + 30) = *(_DWORD *)(*(_QWORD *)a2 + v34);
          goto LABEL_255;
        case 9u:
          *((_DWORD *)this + 36) |= 0x200u;
          v35 = *((_QWORD *)a2 + 1);
          if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_253;
          *((_DWORD *)this + 27) = *(_DWORD *)(*(_QWORD *)a2 + v35);
          goto LABEL_255;
        case 0xAu:
          *((_DWORD *)this + 36) |= 0x100u;
          v36 = *((_QWORD *)a2 + 1);
          v37 = *((_QWORD *)a2 + 2);
          v38 = *(_QWORD *)a2;
          if (v36 <= 0xFFFFFFFFFFFFFFF5 && v36 + 10 <= v37)
          {
            v39 = 0;
            v40 = 0;
            v41 = 0;
            do
            {
              v42 = v36 + 1;
              *((_QWORD *)a2 + 1) = v36 + 1;
              v43 = *(_BYTE *)(v38 + v36);
              v41 |= (unint64_t)(v43 & 0x7F) << v39;
              if ((v43 & 0x80) == 0)
                goto LABEL_224;
              v39 += 7;
              v36 = v42;
              v14 = v40++ > 8;
            }
            while (!v14);
LABEL_162:
            LODWORD(v41) = 0;
            goto LABEL_224;
          }
          v112 = 0;
          v113 = 0;
          v41 = 0;
          if (v37 <= v36)
            v37 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v37 == v36)
            {
              LODWORD(v41) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v114 = v36 + 1;
              v115 = *(_BYTE *)(v38 + v36);
              *((_QWORD *)a2 + 1) = v114;
              v41 |= (unint64_t)(v115 & 0x7F) << v112;
              if (v115 < 0)
              {
                v112 += 7;
                v36 = v114;
                v14 = v113++ > 8;
                if (v14)
                  goto LABEL_162;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v41) = 0;
            }
            break;
          }
LABEL_224:
          *((_DWORD *)this + 26) = v41;
          goto LABEL_256;
        case 0xBu:
          *((_DWORD *)this + 36) |= 0x4000u;
          v44 = *((_QWORD *)a2 + 1);
          if (v44 > 0xFFFFFFFFFFFFFFFBLL || v44 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_253;
          *((_DWORD *)this + 32) = *(_DWORD *)(*(_QWORD *)a2 + v44);
          goto LABEL_255;
        case 0xCu:
          *((_DWORD *)this + 36) |= 0x8000u;
          v45 = *((_QWORD *)a2 + 1);
          if (v45 > 0xFFFFFFFFFFFFFFFBLL || v45 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_253;
          *((_DWORD *)this + 33) = *(_DWORD *)(*(_QWORD *)a2 + v45);
          goto LABEL_255;
        case 0xDu:
          *((_DWORD *)this + 36) |= 0x10000u;
          v46 = *((_QWORD *)a2 + 1);
          if (v46 > 0xFFFFFFFFFFFFFFFBLL || v46 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_253;
          *((_DWORD *)this + 34) = *(_DWORD *)(*(_QWORD *)a2 + v46);
          goto LABEL_255;
        case 0xEu:
          *((_DWORD *)this + 36) |= 0x2000u;
          v47 = *((_QWORD *)a2 + 1);
          if (v47 > 0xFFFFFFFFFFFFFFFBLL || v47 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_253;
          *((_DWORD *)this + 31) = *(_DWORD *)(*(_QWORD *)a2 + v47);
          goto LABEL_255;
        case 0xFu:
          *((_DWORD *)this + 36) |= 0x20000u;
          v48 = *((_QWORD *)a2 + 1);
          v49 = *((_QWORD *)a2 + 2);
          v50 = *(_QWORD *)a2;
          if (v48 <= 0xFFFFFFFFFFFFFFF5 && v48 + 10 <= v49)
          {
            v51 = 0;
            v52 = 0;
            v53 = 0;
            do
            {
              v54 = v48 + 1;
              *((_QWORD *)a2 + 1) = v48 + 1;
              v55 = *(_BYTE *)(v50 + v48);
              v53 |= (unint64_t)(v55 & 0x7F) << v51;
              if ((v55 & 0x80) == 0)
                goto LABEL_227;
              v51 += 7;
              v48 = v54;
              v14 = v52++ > 8;
            }
            while (!v14);
LABEL_169:
            LODWORD(v53) = 0;
            goto LABEL_227;
          }
          v116 = 0;
          v117 = 0;
          v53 = 0;
          if (v49 <= v48)
            v49 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v49 == v48)
            {
              LODWORD(v53) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v118 = v48 + 1;
              v119 = *(_BYTE *)(v50 + v48);
              *((_QWORD *)a2 + 1) = v118;
              v53 |= (unint64_t)(v119 & 0x7F) << v116;
              if (v119 < 0)
              {
                v116 += 7;
                v48 = v118;
                v14 = v117++ > 8;
                if (v14)
                  goto LABEL_169;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v53) = 0;
            }
            break;
          }
LABEL_227:
          *((_DWORD *)this + 35) = v53;
          goto LABEL_256;
        case 0x10u:
          *((_DWORD *)this + 36) |= 4u;
          v56 = *((_QWORD *)a2 + 1);
          v57 = *((_QWORD *)a2 + 2);
          v58 = *(_QWORD *)a2;
          if (v56 <= 0xFFFFFFFFFFFFFFF5 && v56 + 10 <= v57)
          {
            v59 = 0;
            v60 = 0;
            v61 = 0;
            do
            {
              v62 = v56 + 1;
              *((_QWORD *)a2 + 1) = v56 + 1;
              v63 = *(_BYTE *)(v58 + v56);
              v61 |= (unint64_t)(v63 & 0x7F) << v59;
              if ((v63 & 0x80) == 0)
                goto LABEL_230;
              v59 += 7;
              v56 = v62;
              v14 = v60++ > 8;
            }
            while (!v14);
LABEL_176:
            v61 = 0;
            goto LABEL_230;
          }
          v120 = 0;
          v121 = 0;
          v61 = 0;
          if (v57 <= v56)
            v57 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v57 == v56)
            {
              v61 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v122 = v56 + 1;
              v123 = *(_BYTE *)(v58 + v56);
              *((_QWORD *)a2 + 1) = v122;
              v61 |= (unint64_t)(v123 & 0x7F) << v120;
              if (v123 < 0)
              {
                v120 += 7;
                v56 = v122;
                v14 = v121++ > 8;
                if (v14)
                  goto LABEL_176;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v61 = 0;
            }
            break;
          }
LABEL_230:
          *((_QWORD *)this + 9) = v61;
          goto LABEL_256;
        case 0x11u:
          *((_DWORD *)this + 36) |= 1u;
          v64 = *((_QWORD *)a2 + 1);
          v65 = *((_QWORD *)a2 + 2);
          v66 = *(_QWORD *)a2;
          if (v64 <= 0xFFFFFFFFFFFFFFF5 && v64 + 10 <= v65)
          {
            v67 = 0;
            v68 = 0;
            v69 = 0;
            do
            {
              v70 = v64 + 1;
              *((_QWORD *)a2 + 1) = v64 + 1;
              v71 = *(_BYTE *)(v66 + v64);
              v69 |= (unint64_t)(v71 & 0x7F) << v67;
              if ((v71 & 0x80) == 0)
                goto LABEL_233;
              v67 += 7;
              v64 = v70;
              v14 = v68++ > 8;
            }
            while (!v14);
LABEL_183:
            v69 = 0;
            goto LABEL_233;
          }
          v124 = 0;
          v125 = 0;
          v69 = 0;
          if (v65 <= v64)
            v65 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v65 == v64)
            {
              v69 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v126 = v64 + 1;
              v127 = *(_BYTE *)(v66 + v64);
              *((_QWORD *)a2 + 1) = v126;
              v69 |= (unint64_t)(v127 & 0x7F) << v124;
              if (v127 < 0)
              {
                v124 += 7;
                v64 = v126;
                v14 = v125++ > 8;
                if (v14)
                  goto LABEL_183;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v69 = 0;
            }
            break;
          }
LABEL_233:
          *((_QWORD *)this + 7) = v69;
          goto LABEL_256;
        case 0x12u:
          *((_DWORD *)this + 36) |= 2u;
          v72 = *((_QWORD *)a2 + 1);
          v73 = *((_QWORD *)a2 + 2);
          v74 = *(_QWORD *)a2;
          if (v72 <= 0xFFFFFFFFFFFFFFF5 && v72 + 10 <= v73)
          {
            v75 = 0;
            v76 = 0;
            v77 = 0;
            do
            {
              v78 = v72 + 1;
              *((_QWORD *)a2 + 1) = v72 + 1;
              v79 = *(_BYTE *)(v74 + v72);
              v77 |= (unint64_t)(v79 & 0x7F) << v75;
              if ((v79 & 0x80) == 0)
                goto LABEL_236;
              v75 += 7;
              v72 = v78;
              v14 = v76++ > 8;
            }
            while (!v14);
LABEL_190:
            v77 = 0;
            goto LABEL_236;
          }
          v128 = 0;
          v129 = 0;
          v77 = 0;
          if (v73 <= v72)
            v73 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v73 == v72)
            {
              v77 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v130 = v72 + 1;
              v131 = *(_BYTE *)(v74 + v72);
              *((_QWORD *)a2 + 1) = v130;
              v77 |= (unint64_t)(v131 & 0x7F) << v128;
              if (v131 < 0)
              {
                v128 += 7;
                v72 = v130;
                v14 = v129++ > 8;
                if (v14)
                  goto LABEL_190;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v77 = 0;
            }
            break;
          }
LABEL_236:
          *((_QWORD *)this + 8) = v77;
          goto LABEL_256;
        case 0x13u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v80 = *((_QWORD *)a2 + 1);
            v81 = *((_QWORD *)a2 + 2);
            while (v80 < v81 && !*((_BYTE *)a2 + 24))
            {
              v83 = (char *)*((_QWORD *)this + 5);
              v82 = *((_QWORD *)this + 6);
              if ((unint64_t)v83 >= v82)
              {
                v85 = (char *)*((_QWORD *)this + 4);
                v86 = (v83 - v85) >> 2;
                v87 = v86 + 1;
                if ((unint64_t)(v86 + 1) >> 62)
                  goto LABEL_265;
                v88 = v82 - (_QWORD)v85;
                if (v88 >> 1 > v87)
                  v87 = v88 >> 1;
                if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFFCLL)
                  v89 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v89 = v87;
                if (v89)
                {
                  v89 = (unint64_t)sub_2429114B8(v89);
                  v85 = (char *)*((_QWORD *)this + 4);
                  v83 = (char *)*((_QWORD *)this + 5);
                }
                else
                {
                  v90 = 0;
                }
                v91 = (_DWORD *)(v89 + 4 * v86);
                *v91 = 0;
                v84 = v91 + 1;
                while (v83 != v85)
                {
                  v92 = *((_DWORD *)v83 - 1);
                  v83 -= 4;
                  *--v91 = v92;
                }
                *((_QWORD *)this + 4) = v91;
                *((_QWORD *)this + 5) = v84;
                *((_QWORD *)this + 6) = v89 + 4 * v90;
                if (v85)
                  operator delete(v85);
              }
              else
              {
                *(_DWORD *)v83 = 0;
                v84 = v83 + 4;
              }
              *((_QWORD *)this + 5) = v84;
              v93 = *((_QWORD *)a2 + 1);
              if (v93 > 0xFFFFFFFFFFFFFFFBLL || v93 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_195;
              *(v84 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v93);
              v81 = *((_QWORD *)a2 + 2);
              v80 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v80;
            }
            goto LABEL_196;
          }
          v133 = (char *)*((_QWORD *)this + 5);
          v132 = *((_QWORD *)this + 6);
          if ((unint64_t)v133 >= v132)
          {
            v137 = (char *)*((_QWORD *)this + 4);
            v138 = (v133 - v137) >> 2;
            v139 = v138 + 1;
            if ((unint64_t)(v138 + 1) >> 62)
              goto LABEL_265;
            v140 = v132 - (_QWORD)v137;
            if (v140 >> 1 > v139)
              v139 = v140 >> 1;
            if ((unint64_t)v140 >= 0x7FFFFFFFFFFFFFFCLL)
              v141 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v141 = v139;
            if (v141)
            {
              v141 = (unint64_t)sub_2429114B8(v141);
              v137 = (char *)*((_QWORD *)this + 4);
              v133 = (char *)*((_QWORD *)this + 5);
            }
            else
            {
              v142 = 0;
            }
            v149 = (_DWORD *)(v141 + 4 * v138);
            *v149 = 0;
            v134 = v149 + 1;
            while (v133 != v137)
            {
              v150 = *((_DWORD *)v133 - 1);
              v133 -= 4;
              *--v149 = v150;
            }
            *((_QWORD *)this + 4) = v149;
            *((_QWORD *)this + 5) = v134;
            *((_QWORD *)this + 6) = v141 + 4 * v142;
            if (v137)
              operator delete(v137);
          }
          else
          {
            *(_DWORD *)v133 = 0;
            v134 = v133 + 4;
          }
          *((_QWORD *)this + 5) = v134;
          goto LABEL_251;
        case 0x14u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v94 = *((_QWORD *)a2 + 1);
            v95 = *((_QWORD *)a2 + 2);
            while (v94 < v95 && !*((_BYTE *)a2 + 24))
            {
              v97 = (char *)*((_QWORD *)this + 2);
              v96 = *((_QWORD *)this + 3);
              if ((unint64_t)v97 >= v96)
              {
                v99 = (char *)*((_QWORD *)this + 1);
                v100 = (v97 - v99) >> 2;
                v101 = v100 + 1;
                if ((unint64_t)(v100 + 1) >> 62)
                  goto LABEL_265;
                v102 = v96 - (_QWORD)v99;
                if (v102 >> 1 > v101)
                  v101 = v102 >> 1;
                if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFFCLL)
                  v103 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v103 = v101;
                if (v103)
                {
                  v103 = (unint64_t)sub_2429114B8(v103);
                  v99 = (char *)*((_QWORD *)this + 1);
                  v97 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v104 = 0;
                }
                v105 = (_DWORD *)(v103 + 4 * v100);
                *v105 = 0;
                v98 = v105 + 1;
                while (v97 != v99)
                {
                  v106 = *((_DWORD *)v97 - 1);
                  v97 -= 4;
                  *--v105 = v106;
                }
                *((_QWORD *)this + 1) = v105;
                *((_QWORD *)this + 2) = v98;
                *((_QWORD *)this + 3) = v103 + 4 * v104;
                if (v99)
                  operator delete(v99);
              }
              else
              {
                *(_DWORD *)v97 = 0;
                v98 = v97 + 4;
              }
              *((_QWORD *)this + 2) = v98;
              v107 = *((_QWORD *)a2 + 1);
              if (v107 > 0xFFFFFFFFFFFFFFFBLL || v107 + 4 > *((_QWORD *)a2 + 2))
              {
LABEL_195:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v98 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v107);
              v95 = *((_QWORD *)a2 + 2);
              v94 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v94;
            }
LABEL_196:
            PB::Reader::recallMark();
          }
          else
          {
            v136 = (char *)*((_QWORD *)this + 2);
            v135 = *((_QWORD *)this + 3);
            if ((unint64_t)v136 >= v135)
            {
              v143 = (char *)*((_QWORD *)this + 1);
              v144 = (v136 - v143) >> 2;
              v145 = v144 + 1;
              if ((unint64_t)(v144 + 1) >> 62)
LABEL_265:
                sub_242729A44();
              v146 = v135 - (_QWORD)v143;
              if (v146 >> 1 > v145)
                v145 = v146 >> 1;
              if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFFCLL)
                v147 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v147 = v145;
              if (v147)
              {
                v147 = (unint64_t)sub_2429114B8(v147);
                v143 = (char *)*((_QWORD *)this + 1);
                v136 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v148 = 0;
              }
              v151 = (_DWORD *)(v147 + 4 * v144);
              *v151 = 0;
              v134 = v151 + 1;
              while (v136 != v143)
              {
                v152 = *((_DWORD *)v136 - 1);
                v136 -= 4;
                *--v151 = v152;
              }
              *((_QWORD *)this + 1) = v151;
              *((_QWORD *)this + 2) = v134;
              *((_QWORD *)this + 3) = v147 + 4 * v148;
              if (v143)
                operator delete(v143);
            }
            else
            {
              *(_DWORD *)v136 = 0;
              v134 = v136 + 4;
            }
            *((_QWORD *)this + 2) = v134;
LABEL_251:
            v153 = *((_QWORD *)a2 + 1);
            if (v153 <= 0xFFFFFFFFFFFFFFFBLL && v153 + 4 <= *((_QWORD *)a2 + 2))
            {
              *(v134 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v153);
LABEL_255:
              *((_QWORD *)a2 + 1) += 4;
            }
            else
            {
LABEL_253:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
          break;
        default:
          goto LABEL_19;
      }
      goto LABEL_256;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_21;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    if ((PB::Reader::skip(a2) & 1) == 0)
      return 0;
LABEL_256:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
}

uint64_t CMMsl::KappaDirectionOfTravel::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;

  v3 = this;
  v4 = *(_DWORD *)(this + 144);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_DWORD *)(v3 + 144);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_29;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 92));
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(float *)(v3 + 96));
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 100));
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x400) == 0)
      goto LABEL_7;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x400) == 0)
  {
LABEL_7:
    if ((v4 & 0x800) == 0)
      goto LABEL_8;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 112));
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x800) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0)
      goto LABEL_9;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 116));
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 120));
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 108));
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x100) == 0)
  {
LABEL_11:
    if ((v4 & 0x4000) == 0)
      goto LABEL_12;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x4000) == 0)
  {
LABEL_12:
    if ((v4 & 0x8000) == 0)
      goto LABEL_13;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 128));
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x8000) == 0)
  {
LABEL_13:
    if ((v4 & 0x10000) == 0)
      goto LABEL_14;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 132));
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x10000) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 136));
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x2000) == 0)
  {
LABEL_15:
    if ((v4 & 0x20000) == 0)
      goto LABEL_16;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(float *)(v3 + 124));
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x20000) == 0)
  {
LABEL_16:
    if ((v4 & 4) == 0)
      goto LABEL_17;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 4) == 0)
  {
LABEL_17:
    if ((v4 & 1) == 0)
      goto LABEL_18;
LABEL_43:
    this = PB::Writer::writeVarInt(a2);
    if ((*(_DWORD *)(v3 + 144) & 2) == 0)
      goto LABEL_20;
    goto LABEL_19;
  }
LABEL_42:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 1) != 0)
    goto LABEL_43;
LABEL_18:
  if ((v4 & 2) != 0)
LABEL_19:
    this = PB::Writer::writeVarInt(a2);
LABEL_20:
  v5 = *(float **)(v3 + 32);
  v6 = *(float **)(v3 + 40);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7);
  }
  v9 = *(float **)(v3 + 8);
  v8 = *(float **)(v3 + 16);
  while (v9 != v8)
  {
    v10 = *v9++;
    this = PB::Writer::write(a2, v10);
  }
  return this;
}

uint64_t CMMsl::KappaDirectionOfTravel::hash_value(CMMsl::KappaDirectionOfTravel *this)
{
  int v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v2 = *((_DWORD *)this + 36);
  if ((v2 & 8) == 0)
  {
    v3 = 0;
    if ((v2 & 0x20) != 0)
      goto LABEL_3;
LABEL_45:
    v5 = 0;
    if ((v2 & 0x40) != 0)
      goto LABEL_6;
LABEL_46:
    v7 = 0;
    if ((v2 & 0x80) != 0)
      goto LABEL_9;
LABEL_47:
    v9 = 0;
    if ((v2 & 0x10) != 0)
      goto LABEL_12;
LABEL_48:
    v11 = 0;
    if ((v2 & 0x400) != 0)
      goto LABEL_15;
LABEL_49:
    v13 = 0;
    if ((v2 & 0x800) != 0)
      goto LABEL_18;
LABEL_50:
    v15 = 0;
    if ((v2 & 0x1000) != 0)
      goto LABEL_21;
LABEL_51:
    v17 = 0;
    if ((v2 & 0x200) != 0)
      goto LABEL_24;
LABEL_52:
    v19 = 0;
    if ((v2 & 0x100) != 0)
      goto LABEL_27;
    goto LABEL_53;
  }
  v3 = *((_QWORD *)this + 10);
  if ((v2 & 0x20) == 0)
    goto LABEL_45;
LABEL_3:
  v4 = *((float *)this + 23);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((v2 & 0x40) == 0)
    goto LABEL_46;
LABEL_6:
  v6 = *((float *)this + 24);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  if ((v2 & 0x80) == 0)
    goto LABEL_47;
LABEL_9:
  v8 = *((float *)this + 25);
  v9 = LODWORD(v8);
  if (v8 == 0.0)
    v9 = 0;
  if ((v2 & 0x10) == 0)
    goto LABEL_48;
LABEL_12:
  v10 = *((float *)this + 22);
  v11 = LODWORD(v10);
  if (v10 == 0.0)
    v11 = 0;
  if ((v2 & 0x400) == 0)
    goto LABEL_49;
LABEL_15:
  v12 = *((float *)this + 28);
  v13 = LODWORD(v12);
  if (v12 == 0.0)
    v13 = 0;
  if ((v2 & 0x800) == 0)
    goto LABEL_50;
LABEL_18:
  v14 = *((float *)this + 29);
  v15 = LODWORD(v14);
  if (v14 == 0.0)
    v15 = 0;
  if ((v2 & 0x1000) == 0)
    goto LABEL_51;
LABEL_21:
  v16 = *((float *)this + 30);
  v17 = LODWORD(v16);
  if (v16 == 0.0)
    v17 = 0;
  if ((v2 & 0x200) == 0)
    goto LABEL_52;
LABEL_24:
  v18 = *((float *)this + 27);
  v19 = LODWORD(v18);
  if (v18 == 0.0)
    v19 = 0;
  if ((v2 & 0x100) != 0)
  {
LABEL_27:
    v20 = *((unsigned int *)this + 26);
    if ((v2 & 0x4000) != 0)
      goto LABEL_28;
LABEL_54:
    v22 = 0;
    if ((v2 & 0x8000) != 0)
      goto LABEL_31;
LABEL_55:
    v24 = 0;
    if ((v2 & 0x10000) != 0)
      goto LABEL_34;
LABEL_56:
    v26 = 0;
    if ((v2 & 0x2000) != 0)
      goto LABEL_37;
LABEL_57:
    v28 = 0;
    if ((v2 & 0x20000) != 0)
      goto LABEL_40;
    goto LABEL_58;
  }
LABEL_53:
  v20 = 0;
  if ((v2 & 0x4000) == 0)
    goto LABEL_54;
LABEL_28:
  v21 = *((float *)this + 32);
  v22 = LODWORD(v21);
  if (v21 == 0.0)
    v22 = 0;
  if ((v2 & 0x8000) == 0)
    goto LABEL_55;
LABEL_31:
  v23 = *((float *)this + 33);
  v24 = LODWORD(v23);
  if (v23 == 0.0)
    v24 = 0;
  if ((v2 & 0x10000) == 0)
    goto LABEL_56;
LABEL_34:
  v25 = *((float *)this + 34);
  v26 = LODWORD(v25);
  if (v25 == 0.0)
    v26 = 0;
  if ((v2 & 0x2000) == 0)
    goto LABEL_57;
LABEL_37:
  v27 = *((float *)this + 31);
  v28 = LODWORD(v27);
  if (v27 == 0.0)
    v28 = 0;
  if ((v2 & 0x20000) != 0)
  {
LABEL_40:
    v29 = *((unsigned int *)this + 35);
    if ((v2 & 4) != 0)
      goto LABEL_41;
    goto LABEL_59;
  }
LABEL_58:
  v29 = 0;
  if ((v2 & 4) != 0)
  {
LABEL_41:
    v30 = *((_QWORD *)this + 9);
    if ((v2 & 1) != 0)
      goto LABEL_42;
LABEL_60:
    v31 = 0;
    if ((v2 & 2) != 0)
      goto LABEL_43;
LABEL_61:
    v32 = 0;
    goto LABEL_62;
  }
LABEL_59:
  v30 = 0;
  if ((v2 & 1) == 0)
    goto LABEL_60;
LABEL_42:
  v31 = *((_QWORD *)this + 7);
  if ((v2 & 2) == 0)
    goto LABEL_61;
LABEL_43:
  v32 = *((_QWORD *)this + 8);
LABEL_62:
  v33 = v5 ^ v3 ^ v7 ^ v9 ^ v11 ^ v13 ^ v15 ^ v17 ^ v19 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v29 ^ v30 ^ v31 ^ v32 ^ PBHashBytes();
  return v33 ^ PBHashBytes();
}

void CMMsl::KappaGpsResult::~KappaGpsResult(CMMsl::KappaGpsResult *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::KappaGpsResult::KappaGpsResult(uint64_t this, const CMMsl::KappaGpsResult *a2)
{
  int v2;
  int v3;
  char v4;
  char v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  char v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  char v31;
  char v32;

  *(_QWORD *)this = &off_25135E860;
  *(_DWORD *)(this + 132) = 0;
  v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x4000000) != 0)
  {
    v4 = *((_BYTE *)a2 + 126);
    v3 = 0x4000000;
    *(_DWORD *)(this + 132) = 0x4000000;
    *(_BYTE *)(this + 126) = v4;
    v2 = *((_DWORD *)a2 + 33);
    if ((v2 & 0x8000000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x8000000) != 0)
  {
LABEL_5:
    v5 = *((_BYTE *)a2 + 127);
    v3 |= 0x8000000u;
    *(_DWORD *)(this + 132) = v3;
    *(_BYTE *)(this + 127) = v5;
    v2 = *((_DWORD *)a2 + 33);
  }
LABEL_6:
  if ((v2 & 0x80000) != 0)
  {
    v6 = *((_DWORD *)a2 + 26);
    v3 |= 0x80000u;
    *(_DWORD *)(this + 132) = v3;
    *(_DWORD *)(this + 104) = v6;
    v2 = *((_DWORD *)a2 + 33);
    if ((v2 & 0x800000) == 0)
    {
LABEL_8:
      if ((v2 & 0x100000) == 0)
        goto LABEL_9;
      goto LABEL_36;
    }
  }
  else if ((v2 & 0x800000) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 30);
  v3 |= 0x800000u;
  *(_DWORD *)(this + 132) = v3;
  *(_DWORD *)(this + 120) = v7;
  v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x100000) == 0)
  {
LABEL_9:
    if ((v2 & 0x20000) == 0)
      goto LABEL_10;
    goto LABEL_37;
  }
LABEL_36:
  v8 = *((_DWORD *)a2 + 27);
  v3 |= 0x100000u;
  *(_DWORD *)(this + 132) = v3;
  *(_DWORD *)(this + 108) = v8;
  v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x20000) == 0)
  {
LABEL_10:
    if ((v2 & 0x10000) == 0)
      goto LABEL_11;
    goto LABEL_38;
  }
LABEL_37:
  v9 = *((_DWORD *)a2 + 24);
  v3 |= 0x20000u;
  *(_DWORD *)(this + 132) = v3;
  *(_DWORD *)(this + 96) = v9;
  v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x10000) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_39;
  }
LABEL_38:
  v10 = *((_DWORD *)a2 + 23);
  v3 |= 0x10000u;
  *(_DWORD *)(this + 132) = v3;
  *(_DWORD *)(this + 92) = v10;
  v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0)
      goto LABEL_13;
    goto LABEL_40;
  }
LABEL_39:
  v11 = *((_DWORD *)a2 + 15);
  v3 |= 0x100u;
  *(_DWORD *)(this + 132) = v3;
  *(_DWORD *)(this + 60) = v11;
  v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 0x40) == 0)
      goto LABEL_14;
    goto LABEL_41;
  }
LABEL_40:
  v12 = *((_DWORD *)a2 + 14);
  v3 |= 0x80u;
  *(_DWORD *)(this + 132) = v3;
  *(_DWORD *)(this + 56) = v12;
  v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x40) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_42;
  }
LABEL_41:
  v13 = *((_DWORD *)a2 + 13);
  v3 |= 0x40u;
  *(_DWORD *)(this + 132) = v3;
  *(_DWORD *)(this + 52) = v13;
  v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_43;
  }
LABEL_42:
  v14 = *((_DWORD *)a2 + 12);
  v3 |= 0x20u;
  *(_DWORD *)(this + 132) = v3;
  *(_DWORD *)(this + 48) = v14;
  v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x800) == 0)
  {
LABEL_16:
    if ((v2 & 0x4000) == 0)
      goto LABEL_17;
    goto LABEL_44;
  }
LABEL_43:
  v15 = *((_DWORD *)a2 + 18);
  v3 |= 0x800u;
  *(_DWORD *)(this + 132) = v3;
  *(_DWORD *)(this + 72) = v15;
  v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x4000) == 0)
  {
LABEL_17:
    if ((v2 & 0x200000) == 0)
      goto LABEL_18;
    goto LABEL_45;
  }
LABEL_44:
  v16 = *((_DWORD *)a2 + 21);
  v3 |= 0x4000u;
  *(_DWORD *)(this + 132) = v3;
  *(_DWORD *)(this + 84) = v16;
  v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x200000) == 0)
  {
LABEL_18:
    if ((v2 & 0x40000) == 0)
      goto LABEL_19;
    goto LABEL_46;
  }
LABEL_45:
  v17 = *((_DWORD *)a2 + 28);
  v3 |= 0x200000u;
  *(_DWORD *)(this + 132) = v3;
  *(_DWORD *)(this + 112) = v17;
  v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x40000) == 0)
  {
LABEL_19:
    if ((v2 & 8) == 0)
      goto LABEL_20;
    goto LABEL_47;
  }
LABEL_46:
  v18 = *((_DWORD *)a2 + 25);
  v3 |= 0x40000u;
  *(_DWORD *)(this + 132) = v3;
  *(_DWORD *)(this + 100) = v18;
  v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 8) == 0)
  {
LABEL_20:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_21;
    goto LABEL_48;
  }
LABEL_47:
  v19 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *(_DWORD *)(this + 132) = v3;
  *(_QWORD *)(this + 32) = v19;
  v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_21:
    if ((v2 & 0x8000) == 0)
      goto LABEL_22;
    goto LABEL_49;
  }
LABEL_48:
  v20 = *((_BYTE *)a2 + 124);
  v3 |= 0x1000000u;
  *(_DWORD *)(this + 132) = v3;
  *(_BYTE *)(this + 124) = v20;
  v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x8000) == 0)
  {
LABEL_22:
    if ((v2 & 0x10) == 0)
      goto LABEL_23;
    goto LABEL_50;
  }
LABEL_49:
  v21 = *((_DWORD *)a2 + 22);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 132) = v3;
  *(_DWORD *)(this + 88) = v21;
  v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x10) == 0)
  {
LABEL_23:
    if ((v2 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_51;
  }
LABEL_50:
  v22 = *((_QWORD *)a2 + 5);
  v3 |= 0x10u;
  *(_DWORD *)(this + 132) = v3;
  *(_QWORD *)(this + 40) = v22;
  v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x400000) == 0)
  {
LABEL_24:
    if ((v2 & 4) == 0)
      goto LABEL_25;
    goto LABEL_52;
  }
LABEL_51:
  v23 = *((_DWORD *)a2 + 29);
  v3 |= 0x400000u;
  *(_DWORD *)(this + 132) = v3;
  *(_DWORD *)(this + 116) = v23;
  v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 4) == 0)
  {
LABEL_25:
    if ((v2 & 0x2000) == 0)
      goto LABEL_26;
    goto LABEL_53;
  }
LABEL_52:
  v24 = *((_QWORD *)a2 + 3);
  v3 |= 4u;
  *(_DWORD *)(this + 132) = v3;
  *(_QWORD *)(this + 24) = v24;
  v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x2000) == 0)
  {
LABEL_26:
    if ((v2 & 2) == 0)
      goto LABEL_27;
    goto LABEL_54;
  }
LABEL_53:
  v25 = *((_DWORD *)a2 + 20);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 132) = v3;
  *(_DWORD *)(this + 80) = v25;
  v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 2) == 0)
  {
LABEL_27:
    if ((v2 & 0x1000) == 0)
      goto LABEL_28;
    goto LABEL_55;
  }
LABEL_54:
  v26 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_DWORD *)(this + 132) = v3;
  *(_QWORD *)(this + 16) = v26;
  v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x1000) == 0)
  {
LABEL_28:
    if ((v2 & 1) == 0)
      goto LABEL_29;
    goto LABEL_56;
  }
LABEL_55:
  v27 = *((_DWORD *)a2 + 19);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 132) = v3;
  *(_DWORD *)(this + 76) = v27;
  v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 1) == 0)
  {
LABEL_29:
    if ((v2 & 0x200) == 0)
      goto LABEL_30;
    goto LABEL_57;
  }
LABEL_56:
  v28 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_DWORD *)(this + 132) = v3;
  *(_QWORD *)(this + 8) = v28;
  v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x200) == 0)
  {
LABEL_30:
    if ((v2 & 0x400) == 0)
      goto LABEL_31;
    goto LABEL_58;
  }
LABEL_57:
  v29 = *((_DWORD *)a2 + 16);
  v3 |= 0x200u;
  *(_DWORD *)(this + 132) = v3;
  *(_DWORD *)(this + 64) = v29;
  v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x400) == 0)
  {
LABEL_31:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_32;
    goto LABEL_59;
  }
LABEL_58:
  v30 = *((_DWORD *)a2 + 17);
  v3 |= 0x400u;
  *(_DWORD *)(this + 132) = v3;
  *(_DWORD *)(this + 68) = v30;
  v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_32:
    if ((v2 & 0x2000000) == 0)
      return this;
LABEL_60:
    v32 = *((_BYTE *)a2 + 125);
    *(_DWORD *)(this + 132) = v3 | 0x2000000;
    *(_BYTE *)(this + 125) = v32;
    return this;
  }
LABEL_59:
  v31 = *((_BYTE *)a2 + 128);
  v3 |= 0x10000000u;
  *(_DWORD *)(this + 132) = v3;
  *(_BYTE *)(this + 128) = v31;
  if ((*((_DWORD *)a2 + 33) & 0x2000000) != 0)
    goto LABEL_60;
  return this;
}

CMMsl *CMMsl::KappaGpsResult::operator=(CMMsl *a1, const CMMsl::KappaGpsResult *a2)
{
  CMMsl::KappaGpsResult *v3;
  _BYTE v5[136];

  if (a1 != a2)
  {
    CMMsl::KappaGpsResult::KappaGpsResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaGpsResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaGpsResult *a2, CMMsl::KappaGpsResult *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  float result;

  v3 = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 126);
  *((_BYTE *)this + 126) = *((_BYTE *)a2 + 126);
  *((_BYTE *)a2 + 126) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 127);
  *((_BYTE *)this + 127) = *((_BYTE *)a2 + 127);
  *((_BYTE *)a2 + 127) = v3;
  v4 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v4;
  v5 = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v5;
  v6 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v6;
  v7 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v7;
  v8 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v8;
  v9 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v9;
  v10 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v10;
  v11 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v11;
  v12 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v12;
  v13 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v13;
  v14 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v14;
  v15 = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v15;
  v16 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v16;
  v17 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v17;
  LOBYTE(v17) = *((_BYTE *)this + 124);
  *((_BYTE *)this + 124) = *((_BYTE *)a2 + 124);
  *((_BYTE *)a2 + 124) = v17;
  LODWORD(v17) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v17;
  v18 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v18;
  v19 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v19;
  v20 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v20;
  v21 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v21;
  v22 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v22;
  v23 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v23;
  v24 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v24;
  v25 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v25;
  result = *((float *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((float *)a2 + 17) = result;
  LOBYTE(v24) = *((_BYTE *)this + 128);
  *((_BYTE *)this + 128) = *((_BYTE *)a2 + 128);
  *((_BYTE *)a2 + 128) = v24;
  LOBYTE(v24) = *((_BYTE *)this + 125);
  *((_BYTE *)this + 125) = *((_BYTE *)a2 + 125);
  *((_BYTE *)a2 + 125) = v24;
  return result;
}

float CMMsl::KappaGpsResult::KappaGpsResult(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135E860;
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a2 + 132) = 0;
  *(_BYTE *)(a1 + 126) = *(_BYTE *)(a2 + 126);
  *(_BYTE *)(a1 + 127) = *(_BYTE *)(a2 + 127);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 124) = *(_BYTE *)(a2 + 124);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  result = *(float *)(a2 + 68);
  *(float *)(a1 + 68) = result;
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_BYTE *)(a1 + 125) = *(_BYTE *)(a2 + 125);
  return result;
}

CMMsl *CMMsl::KappaGpsResult::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::KappaGpsResult *v3;
  _BYTE v5[136];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaGpsResult::KappaGpsResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaGpsResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaGpsResult::formatText(CMMsl::KappaGpsResult *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(a2, "configSuddenTransitionDurationThreshold", *((float *)this + 12));
    v5 = *((_DWORD *)this + 33);
    if ((v5 & 0x40) == 0)
    {
LABEL_3:
      if ((v5 & 0x80) == 0)
        goto LABEL_4;
      goto LABEL_34;
    }
  }
  else if ((v5 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "configTransitionEndSpeedThreshold", *((float *)this + 13));
  v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x80) == 0)
  {
LABEL_4:
    if ((v5 & 0x100) == 0)
      goto LABEL_5;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "configTransitionStartSpeedThreshold", *((float *)this + 14));
  v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x100) == 0)
  {
LABEL_5:
    if ((v5 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "deltaTriggerTime");
  v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x200) == 0)
  {
LABEL_6:
    if ((v5 & 0x400) == 0)
      goto LABEL_7;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "gpsSpeedMetersPerSecond", *((float *)this + 16));
  v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x400) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0)
      goto LABEL_8;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "gpsSpeedMilesPerHour", *((float *)this + 17));
  v5 = *((_DWORD *)this + 33);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 0x800) == 0)
      goto LABEL_9;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "gpsTimestamp");
  v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x800) == 0)
  {
LABEL_9:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_10;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "highSpeedMetersPerSecondThreshold", *((float *)this + 18));
  v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_11;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "isGPSDetected");
  v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_12;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "isGPSDetectedDebug");
  v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_13;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "isSuddenTransitionDetected");
  v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "isTransitionDetected");
  v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "lastDetectedTransitionSpeedEnd", *((float *)this + 19));
  v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 2) == 0)
      goto LABEL_16;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "lastDetectedTransitionSpeedStart", *((float *)this + 20));
  v5 = *((_DWORD *)this + 33);
  if ((v5 & 2) == 0)
  {
LABEL_16:
    if ((v5 & 4) == 0)
      goto LABEL_17;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "lastDetectedTransitionTimeEnd");
  v5 = *((_DWORD *)this + 33);
  if ((v5 & 4) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_18;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "lastDetectedTransitionTimeStart");
  v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_18:
    if ((v5 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "loggedAtEpoch");
  v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x4000) == 0)
  {
LABEL_19:
    if ((v5 & 0x8000) == 0)
      goto LABEL_20;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "lowSpeedMetersPerSecondThresold", *((float *)this + 21));
  v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x8000) == 0)
  {
LABEL_20:
    if ((v5 & 0x10000) == 0)
      goto LABEL_21;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "state");
  v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x10000) == 0)
  {
LABEL_21:
    if ((v5 & 0x20000) == 0)
      goto LABEL_22;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "streamEndSpeed", *((float *)this + 23));
  v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x20000) == 0)
  {
LABEL_22:
    if ((v5 & 8) == 0)
      goto LABEL_23;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "streamStartSpeed", *((float *)this + 24));
  v5 = *((_DWORD *)this + 33);
  if ((v5 & 8) == 0)
  {
LABEL_23:
    if ((v5 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "timestamp");
  v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x40000) == 0)
  {
LABEL_24:
    if ((v5 & 0x80000) == 0)
      goto LABEL_25;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "transitionBaseDuration", *((float *)this + 25));
  v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x80000) == 0)
  {
LABEL_25:
    if ((v5 & 0x100000) == 0)
      goto LABEL_26;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "transitionDuration", *((float *)this + 26));
  v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x100000) == 0)
  {
LABEL_26:
    if ((v5 & 0x200000) == 0)
      goto LABEL_27;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "transitionEndSpeed", *((float *)this + 27));
  v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x200000) == 0)
  {
LABEL_27:
    if ((v5 & 0x400000) == 0)
      goto LABEL_28;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "transitionEpsilonDuration", *((float *)this + 28));
  v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x400000) == 0)
  {
LABEL_28:
    if ((v5 & 0x800000) == 0)
      goto LABEL_29;
LABEL_59:
    PB::TextFormatter::format(a2, "transitionStartSpeed", *((float *)this + 30));
    if ((*((_DWORD *)this + 33) & 0x10) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_30;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "transitionSpeedStart", *((float *)this + 29));
  v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x800000) != 0)
    goto LABEL_59;
LABEL_29:
  if ((v5 & 0x10) != 0)
LABEL_30:
    PB::TextFormatter::format(a2, "transitionTimeStart");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaGpsResult::readFrom(CMMsl::KappaGpsResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  int v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  int v35;
  BOOL v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  char v42;
  int v43;
  BOOL v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  char v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  char v68;
  int v69;
  BOOL v70;
  int v71;
  BOOL v72;
  char v73;
  unsigned int v74;
  unint64_t v75;
  char v76;
  char v77;
  unsigned int v78;
  unint64_t v79;
  char v80;
  char v81;
  unsigned int v82;
  unint64_t v83;
  char v84;
  char v85;
  unsigned int v86;
  unint64_t v87;
  char v88;
  char v89;
  unsigned int v90;
  unint64_t v91;
  char v92;
  char v93;
  unsigned int v94;
  unint64_t v95;
  char v96;
  char v97;
  unsigned int v98;
  unint64_t v99;
  char v100;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_198;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    v20 = v11 >> 3;
    if ((int)(v11 >> 3) > 200)
    {
      switch((int)v20)
      {
        case 201:
          *((_DWORD *)this + 33) |= 8u;
          v23 = *((_QWORD *)a2 + 1);
          v2 = *((_QWORD *)a2 + 2);
          v24 = *(_QWORD *)a2;
          if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
          {
            v73 = 0;
            v74 = 0;
            v27 = 0;
            if (v2 <= v23)
              v2 = *((_QWORD *)a2 + 1);
            while (1)
            {
              if (v2 == v23)
              {
                v27 = 0;
                *((_BYTE *)a2 + 24) = 1;
                goto LABEL_207;
              }
              v75 = v23++;
              v76 = *(_BYTE *)(v24 + v75);
              *((_QWORD *)a2 + 1) = v23;
              v27 |= (unint64_t)(v76 & 0x7F) << v73;
              if ((v76 & 0x80) == 0)
                break;
              v73 += 7;
              v14 = v74++ > 8;
              if (v14)
              {
                v27 = 0;
LABEL_206:
                v2 = v75 + 1;
                goto LABEL_207;
              }
            }
            if (*((_BYTE *)a2 + 24))
              v27 = 0;
            goto LABEL_206;
          }
          v25 = 0;
          v26 = 0;
          v27 = 0;
          do
          {
            v2 = v23 + 1;
            *((_QWORD *)a2 + 1) = v23 + 1;
            v28 = *(_BYTE *)(v24 + v23);
            v27 |= (unint64_t)(v28 & 0x7F) << v25;
            if ((v28 & 0x80) == 0)
              goto LABEL_207;
            v25 += 7;
            v23 = v2;
            v14 = v26++ > 8;
          }
          while (!v14);
          v27 = 0;
LABEL_207:
          *((_QWORD *)this + 4) = v27;
          break;
        case 202:
          *((_DWORD *)this + 33) |= 0x1000000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 >= *((_QWORD *)a2 + 2))
          {
            v44 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v43 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
            *((_QWORD *)a2 + 1) = v2;
            v44 = v43 != 0;
          }
          *((_BYTE *)this + 124) = v44;
          break;
        case 203:
          *((_DWORD *)this + 33) |= 0x8000u;
          v45 = *((_QWORD *)a2 + 1);
          v2 = *((_QWORD *)a2 + 2);
          v46 = *(_QWORD *)a2;
          if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
          {
            v85 = 0;
            v86 = 0;
            v49 = 0;
            if (v2 <= v45)
              v2 = *((_QWORD *)a2 + 1);
            while (1)
            {
              if (v2 == v45)
              {
                LODWORD(v49) = 0;
                *((_BYTE *)a2 + 24) = 1;
                goto LABEL_222;
              }
              v87 = v45++;
              v88 = *(_BYTE *)(v46 + v87);
              *((_QWORD *)a2 + 1) = v45;
              v49 |= (unint64_t)(v88 & 0x7F) << v85;
              if ((v88 & 0x80) == 0)
                break;
              v85 += 7;
              v14 = v86++ > 8;
              if (v14)
              {
                LODWORD(v49) = 0;
LABEL_221:
                v2 = v87 + 1;
                goto LABEL_222;
              }
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v49) = 0;
            goto LABEL_221;
          }
          v47 = 0;
          v48 = 0;
          v49 = 0;
          do
          {
            v2 = v45 + 1;
            *((_QWORD *)a2 + 1) = v45 + 1;
            v50 = *(_BYTE *)(v46 + v45);
            v49 |= (unint64_t)(v50 & 0x7F) << v47;
            if ((v50 & 0x80) == 0)
              goto LABEL_222;
            v47 += 7;
            v45 = v2;
            v14 = v48++ > 8;
          }
          while (!v14);
          LODWORD(v49) = 0;
LABEL_222:
          *((_DWORD *)this + 22) = v49;
          break;
        case 204:
          *((_DWORD *)this + 33) |= 0x10u;
          v51 = *((_QWORD *)a2 + 1);
          v2 = *((_QWORD *)a2 + 2);
          v52 = *(_QWORD *)a2;
          if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
          {
            v89 = 0;
            v90 = 0;
            v55 = 0;
            if (v2 <= v51)
              v2 = *((_QWORD *)a2 + 1);
            while (1)
            {
              if (v2 == v51)
              {
                v55 = 0;
                *((_BYTE *)a2 + 24) = 1;
                goto LABEL_227;
              }
              v91 = v51++;
              v92 = *(_BYTE *)(v52 + v91);
              *((_QWORD *)a2 + 1) = v51;
              v55 |= (unint64_t)(v92 & 0x7F) << v89;
              if ((v92 & 0x80) == 0)
                break;
              v89 += 7;
              v14 = v90++ > 8;
              if (v14)
              {
                v55 = 0;
LABEL_226:
                v2 = v91 + 1;
                goto LABEL_227;
              }
            }
            if (*((_BYTE *)a2 + 24))
              v55 = 0;
            goto LABEL_226;
          }
          v53 = 0;
          v54 = 0;
          v55 = 0;
          do
          {
            v2 = v51 + 1;
            *((_QWORD *)a2 + 1) = v51 + 1;
            v56 = *(_BYTE *)(v52 + v51);
            v55 |= (unint64_t)(v56 & 0x7F) << v53;
            if ((v56 & 0x80) == 0)
              goto LABEL_227;
            v53 += 7;
            v51 = v2;
            v14 = v54++ > 8;
          }
          while (!v14);
          v55 = 0;
LABEL_227:
          *((_QWORD *)this + 5) = v55;
          break;
        case 205:
          *((_DWORD *)this + 33) |= 0x400000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_136;
          *((_DWORD *)this + 29) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_197;
        case 206:
          *((_DWORD *)this + 33) |= 4u;
          v57 = *((_QWORD *)a2 + 1);
          v2 = *((_QWORD *)a2 + 2);
          v58 = *(_QWORD *)a2;
          if (v57 > 0xFFFFFFFFFFFFFFF5 || v57 + 10 > v2)
          {
            v93 = 0;
            v94 = 0;
            v61 = 0;
            if (v2 <= v57)
              v2 = *((_QWORD *)a2 + 1);
            while (1)
            {
              if (v2 == v57)
              {
                v61 = 0;
                *((_BYTE *)a2 + 24) = 1;
                goto LABEL_232;
              }
              v95 = v57++;
              v96 = *(_BYTE *)(v58 + v95);
              *((_QWORD *)a2 + 1) = v57;
              v61 |= (unint64_t)(v96 & 0x7F) << v93;
              if ((v96 & 0x80) == 0)
                break;
              v93 += 7;
              v14 = v94++ > 8;
              if (v14)
              {
                v61 = 0;
LABEL_231:
                v2 = v95 + 1;
                goto LABEL_232;
              }
            }
            if (*((_BYTE *)a2 + 24))
              v61 = 0;
            goto LABEL_231;
          }
          v59 = 0;
          v60 = 0;
          v61 = 0;
          do
          {
            v2 = v57 + 1;
            *((_QWORD *)a2 + 1) = v57 + 1;
            v62 = *(_BYTE *)(v58 + v57);
            v61 |= (unint64_t)(v62 & 0x7F) << v59;
            if ((v62 & 0x80) == 0)
              goto LABEL_232;
            v59 += 7;
            v57 = v2;
            v14 = v60++ > 8;
          }
          while (!v14);
          v61 = 0;
LABEL_232:
          *((_QWORD *)this + 3) = v61;
          break;
        case 207:
          *((_DWORD *)this + 33) |= 0x2000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_136;
          *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_197;
        case 208:
          *((_DWORD *)this + 33) |= 2u;
          v63 = *((_QWORD *)a2 + 1);
          v2 = *((_QWORD *)a2 + 2);
          v64 = *(_QWORD *)a2;
          if (v63 > 0xFFFFFFFFFFFFFFF5 || v63 + 10 > v2)
          {
            v97 = 0;
            v98 = 0;
            v67 = 0;
            if (v2 <= v63)
              v2 = *((_QWORD *)a2 + 1);
            while (1)
            {
              if (v2 == v63)
              {
                v67 = 0;
                *((_BYTE *)a2 + 24) = 1;
                goto LABEL_237;
              }
              v99 = v63++;
              v100 = *(_BYTE *)(v64 + v99);
              *((_QWORD *)a2 + 1) = v63;
              v67 |= (unint64_t)(v100 & 0x7F) << v97;
              if ((v100 & 0x80) == 0)
                break;
              v97 += 7;
              v14 = v98++ > 8;
              if (v14)
              {
                v67 = 0;
LABEL_236:
                v2 = v99 + 1;
                goto LABEL_237;
              }
            }
            if (*((_BYTE *)a2 + 24))
              v67 = 0;
            goto LABEL_236;
          }
          v65 = 0;
          v66 = 0;
          v67 = 0;
          do
          {
            v2 = v63 + 1;
            *((_QWORD *)a2 + 1) = v63 + 1;
            v68 = *(_BYTE *)(v64 + v63);
            v67 |= (unint64_t)(v68 & 0x7F) << v65;
            if ((v68 & 0x80) == 0)
              goto LABEL_237;
            v65 += 7;
            v63 = v2;
            v14 = v66++ > 8;
          }
          while (!v14);
          v67 = 0;
LABEL_237:
          *((_QWORD *)this + 2) = v67;
          break;
        case 209:
          *((_DWORD *)this + 33) |= 0x1000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          {
LABEL_136:
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_197:
            v2 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v2;
          }
          break;
        default:
          switch((int)v20)
          {
            case 301:
              *((_DWORD *)this + 33) |= 1u;
              v29 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v30 = *(_QWORD *)a2;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                v77 = 0;
                v78 = 0;
                v33 = 0;
                if (v2 <= v29)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v29)
                  {
                    v33 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_212;
                  }
                  v79 = v29++;
                  v80 = *(_BYTE *)(v30 + v79);
                  *((_QWORD *)a2 + 1) = v29;
                  v33 |= (unint64_t)(v80 & 0x7F) << v77;
                  if ((v80 & 0x80) == 0)
                    break;
                  v77 += 7;
                  v14 = v78++ > 8;
                  if (v14)
                  {
                    v33 = 0;
LABEL_211:
                    v2 = v79 + 1;
                    goto LABEL_212;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v33 = 0;
                goto LABEL_211;
              }
              v31 = 0;
              v32 = 0;
              v33 = 0;
              do
              {
                v2 = v29 + 1;
                *((_QWORD *)a2 + 1) = v29 + 1;
                v34 = *(_BYTE *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0)
                  goto LABEL_212;
                v31 += 7;
                v29 = v2;
                v14 = v32++ > 8;
              }
              while (!v14);
              v33 = 0;
LABEL_212:
              *((_QWORD *)this + 1) = v33;
              break;
            case 302:
              *((_DWORD *)this + 33) |= 0x200u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_136;
              *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_197;
            case 303:
              *((_DWORD *)this + 33) |= 0x400u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_136;
              *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_197;
            case 304:
              *((_DWORD *)this + 33) |= 0x10000000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v70 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v69 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v70 = v69 != 0;
              }
              *((_BYTE *)this + 128) = v70;
              goto LABEL_198;
            case 305:
              *((_DWORD *)this + 33) |= 0x2000000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v72 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v71 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v72 = v71 != 0;
              }
              *((_BYTE *)this + 125) = v72;
              goto LABEL_198;
            default:
              goto LABEL_19;
          }
          break;
      }
    }
    else
    {
      switch((int)v20)
      {
        case 1:
          *((_DWORD *)this + 33) |= 0x4000000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 >= *((_QWORD *)a2 + 2))
          {
            v22 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v21 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
            *((_QWORD *)a2 + 1) = v2;
            v22 = v21 != 0;
          }
          *((_BYTE *)this + 126) = v22;
          break;
        case 2:
          *((_DWORD *)this + 33) |= 0x8000000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 >= *((_QWORD *)a2 + 2))
          {
            v36 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v35 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
            *((_QWORD *)a2 + 1) = v2;
            v36 = v35 != 0;
          }
          *((_BYTE *)this + 127) = v36;
          break;
        case 3:
          *((_DWORD *)this + 33) |= 0x80000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_136;
          *((_DWORD *)this + 26) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_197;
        case 4:
          *((_DWORD *)this + 33) |= 0x800000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_136;
          *((_DWORD *)this + 30) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_197;
        case 5:
          *((_DWORD *)this + 33) |= 0x100000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_136;
          *((_DWORD *)this + 27) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_197;
        case 6:
          *((_DWORD *)this + 33) |= 0x20000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_136;
          *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_197;
        case 7:
          *((_DWORD *)this + 33) |= 0x10000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_136;
          *((_DWORD *)this + 23) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_197;
        case 8:
          *((_DWORD *)this + 33) |= 0x100u;
          v37 = *((_QWORD *)a2 + 1);
          v2 = *((_QWORD *)a2 + 2);
          v38 = *(_QWORD *)a2;
          if (v37 > 0xFFFFFFFFFFFFFFF5 || v37 + 10 > v2)
          {
            v81 = 0;
            v82 = 0;
            v41 = 0;
            if (v2 <= v37)
              v2 = *((_QWORD *)a2 + 1);
            while (1)
            {
              if (v2 == v37)
              {
                LODWORD(v41) = 0;
                *((_BYTE *)a2 + 24) = 1;
                goto LABEL_217;
              }
              v83 = v37++;
              v84 = *(_BYTE *)(v38 + v83);
              *((_QWORD *)a2 + 1) = v37;
              v41 |= (unint64_t)(v84 & 0x7F) << v81;
              if ((v84 & 0x80) == 0)
                break;
              v81 += 7;
              v14 = v82++ > 8;
              if (v14)
              {
                LODWORD(v41) = 0;
LABEL_216:
                v2 = v83 + 1;
                goto LABEL_217;
              }
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v41) = 0;
            goto LABEL_216;
          }
          v39 = 0;
          v40 = 0;
          v41 = 0;
          do
          {
            v2 = v37 + 1;
            *((_QWORD *)a2 + 1) = v37 + 1;
            v42 = *(_BYTE *)(v38 + v37);
            v41 |= (unint64_t)(v42 & 0x7F) << v39;
            if ((v42 & 0x80) == 0)
              goto LABEL_217;
            v39 += 7;
            v37 = v2;
            v14 = v40++ > 8;
          }
          while (!v14);
          LODWORD(v41) = 0;
LABEL_217:
          *((_DWORD *)this + 15) = v41;
          break;
        case 9:
          *((_DWORD *)this + 33) |= 0x80u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_136;
          *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_197;
        case 10:
          *((_DWORD *)this + 33) |= 0x40u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_136;
          *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_197;
        case 11:
          *((_DWORD *)this + 33) |= 0x20u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_136;
          *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_197;
        default:
          switch((int)v20)
          {
            case 'e':
              *((_DWORD *)this + 33) |= 0x800u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_136;
              *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              break;
            case 'f':
              *((_DWORD *)this + 33) |= 0x4000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_136;
              *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              break;
            case 'g':
              *((_DWORD *)this + 33) |= 0x200000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_136;
              *((_DWORD *)this + 28) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              break;
            case 'h':
              *((_DWORD *)this + 33) |= 0x40000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_136;
              *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              break;
            default:
              goto LABEL_19;
          }
          goto LABEL_197;
      }
    }
LABEL_198:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::KappaGpsResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 132);
  if ((v4 & 0x4000000) != 0)
  {
    this = PB::Writer::write(a2);
    v4 = *(_DWORD *)(v3 + 132);
    if ((v4 & 0x8000000) == 0)
    {
LABEL_3:
      if ((v4 & 0x80000) == 0)
        goto LABEL_4;
      goto LABEL_33;
    }
  }
  else if ((v4 & 0x8000000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x80000) == 0)
  {
LABEL_4:
    if ((v4 & 0x800000) == 0)
      goto LABEL_5;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 104));
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x800000) == 0)
  {
LABEL_5:
    if ((v4 & 0x100000) == 0)
      goto LABEL_6;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 120));
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x100000) == 0)
  {
LABEL_6:
    if ((v4 & 0x20000) == 0)
      goto LABEL_7;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 108));
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x20000) == 0)
  {
LABEL_7:
    if ((v4 & 0x10000) == 0)
      goto LABEL_8;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 96));
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x10000) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 92));
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x40) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x800) == 0)
  {
LABEL_13:
    if ((v4 & 0x4000) == 0)
      goto LABEL_14;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x4000) == 0)
  {
LABEL_14:
    if ((v4 & 0x200000) == 0)
      goto LABEL_15;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(float *)(v3 + 84));
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x200000) == 0)
  {
LABEL_15:
    if ((v4 & 0x40000) == 0)
      goto LABEL_16;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(float *)(v3 + 112));
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x40000) == 0)
  {
LABEL_16:
    if ((v4 & 8) == 0)
      goto LABEL_17;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(float *)(v3 + 100));
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 8) == 0)
  {
LABEL_17:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_18;
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x8000) == 0)
      goto LABEL_19;
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x8000) == 0)
  {
LABEL_19:
    if ((v4 & 0x10) == 0)
      goto LABEL_20;
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x10) == 0)
  {
LABEL_20:
    if ((v4 & 0x400000) == 0)
      goto LABEL_21;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x400000) == 0)
  {
LABEL_21:
    if ((v4 & 4) == 0)
      goto LABEL_22;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(float *)(v3 + 116));
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 4) == 0)
  {
LABEL_22:
    if ((v4 & 0x2000) == 0)
      goto LABEL_23;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x2000) == 0)
  {
LABEL_23:
    if ((v4 & 2) == 0)
      goto LABEL_24;
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(float *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 2) == 0)
  {
LABEL_24:
    if ((v4 & 0x1000) == 0)
      goto LABEL_25;
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x1000) == 0)
  {
LABEL_25:
    if ((v4 & 1) == 0)
      goto LABEL_26;
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2, *(float *)(v3 + 76));
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 1) == 0)
  {
LABEL_26:
    if ((v4 & 0x200) == 0)
      goto LABEL_27;
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x200) == 0)
  {
LABEL_27:
    if ((v4 & 0x400) == 0)
      goto LABEL_28;
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::write(a2, *(float *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x400) == 0)
  {
LABEL_28:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_29;
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(float *)(v3 + 68));
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x2000000) == 0)
      return this;
    return PB::Writer::write(a2);
  }
LABEL_58:
  this = PB::Writer::write(a2);
  if ((*(_DWORD *)(v3 + 132) & 0x2000000) != 0)
    return PB::Writer::write(a2);
  return this;
}

uint64_t CMMsl::KappaGpsResult::hash_value(CMMsl::KappaGpsResult *this)
{
  int v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;

  v1 = *((_DWORD *)this + 33);
  if ((v1 & 0x4000000) != 0)
  {
    v48 = *((unsigned __int8 *)this + 126);
    if ((v1 & 0x8000000) != 0)
    {
LABEL_3:
      v2 = *((unsigned __int8 *)this + 127);
      if ((v1 & 0x80000) != 0)
        goto LABEL_4;
LABEL_84:
      v4 = 0;
      if ((v1 & 0x800000) != 0)
        goto LABEL_8;
LABEL_85:
      v6 = 0;
      if ((v1 & 0x100000) != 0)
        goto LABEL_12;
LABEL_86:
      v8 = 0;
      if ((v1 & 0x20000) != 0)
        goto LABEL_16;
LABEL_87:
      v10 = 0;
      if ((v1 & 0x10000) != 0)
        goto LABEL_20;
LABEL_88:
      v12 = 0;
      if ((v1 & 0x100) != 0)
        goto LABEL_24;
      goto LABEL_89;
    }
  }
  else
  {
    v48 = 0;
    if ((v1 & 0x8000000) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((v1 & 0x80000) == 0)
    goto LABEL_84;
LABEL_4:
  v3 = *((float *)this + 26);
  if (v3 == 0.0)
    v4 = 0;
  else
    v4 = LODWORD(v3);
  if ((v1 & 0x800000) == 0)
    goto LABEL_85;
LABEL_8:
  v5 = *((float *)this + 30);
  if (v5 == 0.0)
    v6 = 0;
  else
    v6 = LODWORD(v5);
  if ((v1 & 0x100000) == 0)
    goto LABEL_86;
LABEL_12:
  v7 = *((float *)this + 27);
  if (v7 == 0.0)
    v8 = 0;
  else
    v8 = LODWORD(v7);
  if ((v1 & 0x20000) == 0)
    goto LABEL_87;
LABEL_16:
  v9 = *((float *)this + 24);
  if (v9 == 0.0)
    v10 = 0;
  else
    v10 = LODWORD(v9);
  if ((v1 & 0x10000) == 0)
    goto LABEL_88;
LABEL_20:
  v11 = *((float *)this + 23);
  if (v11 == 0.0)
    v12 = 0;
  else
    v12 = LODWORD(v11);
  if ((v1 & 0x100) != 0)
  {
LABEL_24:
    v13 = *((int *)this + 15);
    if ((v1 & 0x80) != 0)
      goto LABEL_25;
LABEL_90:
    v15 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_29;
LABEL_91:
    v17 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_33;
LABEL_92:
    v19 = 0;
    if ((v1 & 0x800) != 0)
      goto LABEL_37;
LABEL_93:
    v21 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_41;
LABEL_94:
    v23 = 0;
    if ((v1 & 0x200000) != 0)
      goto LABEL_45;
LABEL_95:
    v25 = 0;
    if ((v1 & 0x40000) != 0)
      goto LABEL_49;
LABEL_96:
    v27 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_53;
    goto LABEL_97;
  }
LABEL_89:
  v13 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_90;
LABEL_25:
  v14 = *((float *)this + 14);
  if (v14 == 0.0)
    v15 = 0;
  else
    v15 = LODWORD(v14);
  if ((v1 & 0x40) == 0)
    goto LABEL_91;
LABEL_29:
  v16 = *((float *)this + 13);
  if (v16 == 0.0)
    v17 = 0;
  else
    v17 = LODWORD(v16);
  if ((v1 & 0x20) == 0)
    goto LABEL_92;
LABEL_33:
  v18 = *((float *)this + 12);
  if (v18 == 0.0)
    v19 = 0;
  else
    v19 = LODWORD(v18);
  if ((v1 & 0x800) == 0)
    goto LABEL_93;
LABEL_37:
  v20 = *((float *)this + 18);
  if (v20 == 0.0)
    v21 = 0;
  else
    v21 = LODWORD(v20);
  if ((v1 & 0x4000) == 0)
    goto LABEL_94;
LABEL_41:
  v22 = *((float *)this + 21);
  if (v22 == 0.0)
    v23 = 0;
  else
    v23 = LODWORD(v22);
  if ((v1 & 0x200000) == 0)
    goto LABEL_95;
LABEL_45:
  v24 = *((float *)this + 28);
  if (v24 == 0.0)
    v25 = 0;
  else
    v25 = LODWORD(v24);
  if ((v1 & 0x40000) == 0)
    goto LABEL_96;
LABEL_49:
  v26 = *((float *)this + 25);
  if (v26 == 0.0)
    v27 = 0;
  else
    v27 = LODWORD(v26);
  if ((v1 & 8) != 0)
  {
LABEL_53:
    v28 = *((_QWORD *)this + 4);
    if ((v1 & 0x1000000) != 0)
      goto LABEL_54;
    goto LABEL_98;
  }
LABEL_97:
  v28 = 0;
  if ((v1 & 0x1000000) != 0)
  {
LABEL_54:
    v29 = *((unsigned __int8 *)this + 124);
    if ((v1 & 0x8000) != 0)
      goto LABEL_55;
    goto LABEL_99;
  }
LABEL_98:
  v29 = 0;
  if ((v1 & 0x8000) != 0)
  {
LABEL_55:
    v30 = *((int *)this + 22);
    if ((v1 & 0x10) != 0)
      goto LABEL_56;
    goto LABEL_100;
  }
LABEL_99:
  v30 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_56:
    v31 = *((_QWORD *)this + 5);
    if ((v1 & 0x400000) != 0)
      goto LABEL_57;
LABEL_101:
    v33 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_61;
    goto LABEL_102;
  }
LABEL_100:
  v31 = 0;
  if ((v1 & 0x400000) == 0)
    goto LABEL_101;
LABEL_57:
  v32 = *((float *)this + 29);
  if (v32 == 0.0)
    v33 = 0;
  else
    v33 = LODWORD(v32);
  if ((v1 & 4) != 0)
  {
LABEL_61:
    v34 = *((_QWORD *)this + 3);
    if ((v1 & 0x2000) != 0)
      goto LABEL_62;
LABEL_103:
    v36 = 0;
    if ((v1 & 2) != 0)
      goto LABEL_66;
    goto LABEL_104;
  }
LABEL_102:
  v34 = 0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_103;
LABEL_62:
  v35 = *((float *)this + 20);
  if (v35 == 0.0)
    v36 = 0;
  else
    v36 = LODWORD(v35);
  if ((v1 & 2) != 0)
  {
LABEL_66:
    v37 = *((_QWORD *)this + 2);
    if ((v1 & 0x1000) != 0)
      goto LABEL_67;
LABEL_105:
    v39 = 0;
    if ((v1 & 1) != 0)
      goto LABEL_71;
    goto LABEL_106;
  }
LABEL_104:
  v37 = 0;
  if ((v1 & 0x1000) == 0)
    goto LABEL_105;
LABEL_67:
  v38 = *((float *)this + 19);
  if (v38 == 0.0)
    v39 = 0;
  else
    v39 = LODWORD(v38);
  if ((v1 & 1) != 0)
  {
LABEL_71:
    v40 = *((_QWORD *)this + 1);
    if ((v1 & 0x200) != 0)
      goto LABEL_72;
LABEL_107:
    v42 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_76;
LABEL_108:
    v44 = 0;
    if ((v1 & 0x10000000) != 0)
      goto LABEL_80;
LABEL_109:
    v45 = 0;
    if ((v1 & 0x2000000) != 0)
      goto LABEL_81;
LABEL_110:
    v46 = 0;
    return v2 ^ v48 ^ v4 ^ v6 ^ v8 ^ v10 ^ v12 ^ v13 ^ v15 ^ v17 ^ v19 ^ v21 ^ v23 ^ v25 ^ v27 ^ v28 ^ v29 ^ v30 ^ v31 ^ v33 ^ v34 ^ v36 ^ v37 ^ v39 ^ v40 ^ v42 ^ v44 ^ v45 ^ v46;
  }
LABEL_106:
  v40 = 0;
  if ((v1 & 0x200) == 0)
    goto LABEL_107;
LABEL_72:
  v41 = *((float *)this + 16);
  if (v41 == 0.0)
    v42 = 0;
  else
    v42 = LODWORD(v41);
  if ((v1 & 0x400) == 0)
    goto LABEL_108;
LABEL_76:
  v43 = *((float *)this + 17);
  if (v43 == 0.0)
    v44 = 0;
  else
    v44 = LODWORD(v43);
  if ((v1 & 0x10000000) == 0)
    goto LABEL_109;
LABEL_80:
  v45 = *((unsigned __int8 *)this + 128);
  if ((v1 & 0x2000000) == 0)
    goto LABEL_110;
LABEL_81:
  v46 = *((unsigned __int8 *)this + 125);
  return v2 ^ v48 ^ v4 ^ v6 ^ v8 ^ v10 ^ v12 ^ v13 ^ v15 ^ v17 ^ v19 ^ v21 ^ v23 ^ v25 ^ v27 ^ v28 ^ v29 ^ v30 ^ v31 ^ v33 ^ v34 ^ v36 ^ v37 ^ v39 ^ v40 ^ v42 ^ v44 ^ v45 ^ v46;
}

void CMMsl::KappaGravityAutocorrelationResult::~KappaGravityAutocorrelationResult(CMMsl::KappaGravityAutocorrelationResult *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::KappaGravityAutocorrelationResult::KappaGravityAutocorrelationResult(uint64_t this, const CMMsl::KappaGravityAutocorrelationResult *a2)
{
  __int16 v2;
  __int16 v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  *(_QWORD *)this = &off_25135E898;
  *(_DWORD *)(this + 64) = 0;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x40) != 0)
  {
    v4 = *((_DWORD *)a2 + 11);
    v3 = 64;
    *(_WORD *)(this + 64) = 64;
    *(_DWORD *)(this + 44) = v4;
    v2 = *((_WORD *)a2 + 32);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 9);
    v3 |= 0x10u;
    *(_WORD *)(this + 64) = v3;
    *(_DWORD *)(this + 36) = v5;
    v2 = *((_WORD *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    v6 = *((_DWORD *)a2 + 10);
    v3 |= 0x20u;
    *(_WORD *)(this + 64) = v3;
    *(_DWORD *)(this + 40) = v6;
    v2 = *((_WORD *)a2 + 32);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0)
        goto LABEL_9;
      goto LABEL_19;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 8);
  v3 |= 8u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 32) = v7;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 4) == 0)
  {
LABEL_9:
    if ((v2 & 0x800) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  v8 = *((_QWORD *)a2 + 3);
  v3 |= 4u;
  *(_WORD *)(this + 64) = v3;
  *(_QWORD *)(this + 24) = v8;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x800) == 0)
  {
LABEL_10:
    if ((v2 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_20:
  v9 = *((_BYTE *)a2 + 61);
  v3 |= 0x800u;
  *(_WORD *)(this + 64) = v3;
  *(_BYTE *)(this + 61) = v9;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x400) == 0)
  {
LABEL_11:
    if ((v2 & 1) == 0)
      goto LABEL_12;
    goto LABEL_22;
  }
LABEL_21:
  v10 = *((_BYTE *)a2 + 60);
  v3 |= 0x400u;
  *(_WORD *)(this + 64) = v3;
  *(_BYTE *)(this + 60) = v10;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 1) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0)
      goto LABEL_13;
    goto LABEL_23;
  }
LABEL_22:
  v11 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 64) = v3;
  *(_QWORD *)(this + 8) = v11;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_24;
  }
LABEL_23:
  v12 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_WORD *)(this + 64) = v3;
  *(_QWORD *)(this + 16) = v12;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x200) == 0)
  {
LABEL_14:
    if ((v2 & 0x100) == 0)
      goto LABEL_15;
    goto LABEL_25;
  }
LABEL_24:
  v13 = *((_DWORD *)a2 + 14);
  v3 |= 0x200u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 56) = v13;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x100) == 0)
  {
LABEL_15:
    if ((v2 & 0x80) == 0)
      return this;
LABEL_26:
    v15 = *((_DWORD *)a2 + 12);
    *(_WORD *)(this + 64) = v3 | 0x80;
    *(_DWORD *)(this + 48) = v15;
    return this;
  }
LABEL_25:
  v14 = *((_DWORD *)a2 + 13);
  v3 |= 0x100u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 52) = v14;
  if ((*((_WORD *)a2 + 32) & 0x80) != 0)
    goto LABEL_26;
  return this;
}

CMMsl *CMMsl::KappaGravityAutocorrelationResult::operator=(CMMsl *a1, const CMMsl::KappaGravityAutocorrelationResult *a2)
{
  CMMsl::KappaGravityAutocorrelationResult *v3;
  _BYTE v5[72];

  if (a1 != a2)
  {
    CMMsl::KappaGravityAutocorrelationResult::KappaGravityAutocorrelationResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaGravityAutocorrelationResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaGravityAutocorrelationResult *a2, CMMsl::KappaGravityAutocorrelationResult *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float result;

  v3 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  v4 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  v5 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v5;
  v6 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v6;
  v7 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v7;
  v8 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v8;
  LOBYTE(v8) = *((_BYTE *)this + 61);
  *((_BYTE *)this + 61) = *((_BYTE *)a2 + 61);
  *((_BYTE *)a2 + 61) = v8;
  LOBYTE(v8) = *((_BYTE *)this + 60);
  *((_BYTE *)this + 60) = *((_BYTE *)a2 + 60);
  *((_BYTE *)a2 + 60) = v8;
  v9 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v9;
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v10;
  LODWORD(v10) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v10;
  result = *((float *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((float *)a2 + 13) = result;
  LODWORD(v10) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v10;
  return result;
}

float CMMsl::KappaGravityAutocorrelationResult::KappaGravityAutocorrelationResult(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135E898;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 61) = *(_BYTE *)(a2 + 61);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  result = *(float *)(a2 + 52);
  *(float *)(a1 + 52) = result;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  return result;
}

CMMsl *CMMsl::KappaGravityAutocorrelationResult::operator=(CMMsl *this, uint64_t a2, CMMsl::KappaGravityAutocorrelationResult *a3)
{
  uint64_t v4;
  void (**v6)(CMMsl::KappaGravityAutocorrelationResult *__hidden);
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  __int16 v14;
  int v15;

  if (this != (CMMsl *)a2)
  {
    v6 = &off_25135E898;
    v15 = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(a2 + 64) = 0;
    v4 = *(_QWORD *)(a2 + 40);
    v9 = *(_QWORD *)(a2 + 32);
    v10 = v4;
    v8 = *(_QWORD *)(a2 + 24);
    v14 = *(_WORD *)(a2 + 60);
    v7 = *(_OWORD *)(a2 + 8);
    v13 = *(_DWORD *)(a2 + 56);
    v12 = *(_DWORD *)(a2 + 52);
    v11 = *(_DWORD *)(a2 + 48);
    CMMsl::swap(this, (CMMsl::KappaGravityAutocorrelationResult *)&v6, a3);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return this;
}

uint64_t CMMsl::KappaGravityAutocorrelationResult::formatText(CMMsl::KappaGravityAutocorrelationResult *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 32);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "autocorrelationRangeValCriticalThreshold", *((float *)this + 8));
    v5 = *((_WORD *)this + 32);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "autocorrelationRangeValThreshold", *((float *)this + 9));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "autocorrelationTimeVariationCriticalThreshold");
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "autocorrelationTimeVariationThreshold");
  v5 = *((_WORD *)this + 32);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 2) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "epochFirstTimestamp");
  v5 = *((_WORD *)this + 32);
  if ((v5 & 2) == 0)
  {
LABEL_7:
    if ((v5 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "epochLastTimestamp");
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x400) == 0)
  {
LABEL_8:
    if ((v5 & 0x800) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "isCriticalFP");
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x800) == 0)
  {
LABEL_9:
    if ((v5 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "isPeriodic");
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x80) == 0)
  {
LABEL_10:
    if ((v5 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "numDmSamplesEpoch");
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x100) == 0)
  {
LABEL_11:
    if ((v5 & 0x200) == 0)
      goto LABEL_12;
LABEL_25:
    PB::TextFormatter::format(a2, "timeVariation");
    if ((*((_WORD *)this + 32) & 4) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_13;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "rangeVal", *((float *)this + 13));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x200) != 0)
    goto LABEL_25;
LABEL_12:
  if ((v5 & 4) != 0)
LABEL_13:
    PB::TextFormatter::format(a2, "timestamp");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaGravityAutocorrelationResult::readFrom(CMMsl::KappaGravityAutocorrelationResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  char v33;
  int v34;
  BOOL v35;
  int v36;
  BOOL v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  uint64_t v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  char v55;
  unint64_t v56;
  uint64_t v57;
  char v58;
  unsigned int v59;
  uint64_t v60;
  char v61;
  unint64_t v62;
  uint64_t v63;
  char v64;
  unsigned int v65;
  uint64_t v66;
  char v67;
  char v68;
  unsigned int v69;
  unint64_t v70;
  char v71;
  char v72;
  unsigned int v73;
  unint64_t v74;
  char v75;
  char v76;
  unsigned int v77;
  unint64_t v78;
  char v79;
  char v80;
  unsigned int v81;
  unint64_t v82;
  char v83;
  char v84;
  unsigned int v85;
  unint64_t v86;
  char v87;
  char v88;
  unsigned int v89;
  unint64_t v90;
  char v91;
  char v92;
  unsigned int v93;
  unint64_t v94;
  char v95;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_26:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v21 = v11 >> 3;
      if ((int)(v11 >> 3) > 202)
      {
        switch((int)v21)
        {
          case 301:
            *((_WORD *)this + 32) |= 1u;
            v28 = *((_QWORD *)a2 + 1);
            v2 = *((_QWORD *)a2 + 2);
            v29 = *(_QWORD *)a2;
            if (v28 > 0xFFFFFFFFFFFFFFF5 || v28 + 10 > v2)
            {
              v72 = 0;
              v73 = 0;
              v32 = 0;
              if (v2 <= v28)
                v2 = *((_QWORD *)a2 + 1);
              while (1)
              {
                if (v2 == v28)
                {
                  v32 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                  goto LABEL_159;
                }
                v74 = v28++;
                v75 = *(_BYTE *)(v29 + v74);
                *((_QWORD *)a2 + 1) = v28;
                v32 |= (unint64_t)(v75 & 0x7F) << v72;
                if ((v75 & 0x80) == 0)
                  break;
                v72 += 7;
                v14 = v73++ > 8;
                if (v14)
                {
                  v32 = 0;
LABEL_158:
                  v2 = v74 + 1;
                  goto LABEL_159;
                }
              }
              if (*((_BYTE *)a2 + 24))
                v32 = 0;
              goto LABEL_158;
            }
            v30 = 0;
            v31 = 0;
            v32 = 0;
            do
            {
              v2 = v28 + 1;
              *((_QWORD *)a2 + 1) = v28 + 1;
              v33 = *(_BYTE *)(v29 + v28);
              v32 |= (unint64_t)(v33 & 0x7F) << v30;
              if ((v33 & 0x80) == 0)
                goto LABEL_159;
              v30 += 7;
              v28 = v2;
              v14 = v31++ > 8;
            }
            while (!v14);
            v32 = 0;
LABEL_159:
            *((_QWORD *)this + 1) = v32;
            break;
          case 302:
            *((_WORD *)this + 32) |= 2u;
            v44 = *((_QWORD *)a2 + 1);
            v2 = *((_QWORD *)a2 + 2);
            v45 = *(_QWORD *)a2;
            if (v44 > 0xFFFFFFFFFFFFFFF5 || v44 + 10 > v2)
            {
              v80 = 0;
              v81 = 0;
              v48 = 0;
              if (v2 <= v44)
                v2 = *((_QWORD *)a2 + 1);
              while (1)
              {
                if (v2 == v44)
                {
                  v48 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                  goto LABEL_169;
                }
                v82 = v44++;
                v83 = *(_BYTE *)(v45 + v82);
                *((_QWORD *)a2 + 1) = v44;
                v48 |= (unint64_t)(v83 & 0x7F) << v80;
                if ((v83 & 0x80) == 0)
                  break;
                v80 += 7;
                v14 = v81++ > 8;
                if (v14)
                {
                  v48 = 0;
LABEL_168:
                  v2 = v82 + 1;
                  goto LABEL_169;
                }
              }
              if (*((_BYTE *)a2 + 24))
                v48 = 0;
              goto LABEL_168;
            }
            v46 = 0;
            v47 = 0;
            v48 = 0;
            do
            {
              v2 = v44 + 1;
              *((_QWORD *)a2 + 1) = v44 + 1;
              v49 = *(_BYTE *)(v45 + v44);
              v48 |= (unint64_t)(v49 & 0x7F) << v46;
              if ((v49 & 0x80) == 0)
                goto LABEL_169;
              v46 += 7;
              v44 = v2;
              v14 = v47++ > 8;
            }
            while (!v14);
            v48 = 0;
LABEL_169:
            *((_QWORD *)this + 2) = v48;
            break;
          case 303:
            *((_WORD *)this + 32) |= 0x200u;
            v50 = *((_QWORD *)a2 + 1);
            v2 = *((_QWORD *)a2 + 2);
            v51 = *(_QWORD *)a2;
            if (v50 > 0xFFFFFFFFFFFFFFF5 || v50 + 10 > v2)
            {
              v84 = 0;
              v85 = 0;
              v54 = 0;
              if (v2 <= v50)
                v2 = *((_QWORD *)a2 + 1);
              while (1)
              {
                if (v2 == v50)
                {
                  LODWORD(v54) = 0;
                  *((_BYTE *)a2 + 24) = 1;
                  goto LABEL_174;
                }
                v86 = v50++;
                v87 = *(_BYTE *)(v51 + v86);
                *((_QWORD *)a2 + 1) = v50;
                v54 |= (unint64_t)(v87 & 0x7F) << v84;
                if ((v87 & 0x80) == 0)
                  break;
                v84 += 7;
                v14 = v85++ > 8;
                if (v14)
                {
                  LODWORD(v54) = 0;
LABEL_173:
                  v2 = v86 + 1;
                  goto LABEL_174;
                }
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v54) = 0;
              goto LABEL_173;
            }
            v52 = 0;
            v53 = 0;
            v54 = 0;
            do
            {
              v2 = v50 + 1;
              *((_QWORD *)a2 + 1) = v50 + 1;
              v55 = *(_BYTE *)(v51 + v50);
              v54 |= (unint64_t)(v55 & 0x7F) << v52;
              if ((v55 & 0x80) == 0)
                goto LABEL_174;
              v52 += 7;
              v50 = v2;
              v14 = v53++ > 8;
            }
            while (!v14);
            LODWORD(v54) = 0;
LABEL_174:
            *((_DWORD *)this + 14) = v54;
            break;
          case 304:
            *((_WORD *)this + 32) |= 0x100u;
            v2 = *((_QWORD *)a2 + 1);
            if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
            {
              *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_149:
              v2 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v2;
            }
            else
            {
LABEL_80:
              *((_BYTE *)a2 + 24) = 1;
            }
            break;
          case 305:
            *((_WORD *)this + 32) |= 0x80u;
            v56 = *((_QWORD *)a2 + 1);
            v2 = *((_QWORD *)a2 + 2);
            v57 = *(_QWORD *)a2;
            if (v56 > 0xFFFFFFFFFFFFFFF5 || v56 + 10 > v2)
            {
              v88 = 0;
              v89 = 0;
              v60 = 0;
              if (v2 <= v56)
                v2 = *((_QWORD *)a2 + 1);
              while (1)
              {
                if (v2 == v56)
                {
                  LODWORD(v60) = 0;
                  *((_BYTE *)a2 + 24) = 1;
                  goto LABEL_179;
                }
                v90 = v56++;
                v91 = *(_BYTE *)(v57 + v90);
                *((_QWORD *)a2 + 1) = v56;
                v60 |= (unint64_t)(v91 & 0x7F) << v88;
                if ((v91 & 0x80) == 0)
                  break;
                v88 += 7;
                v14 = v89++ > 8;
                if (v14)
                {
                  LODWORD(v60) = 0;
LABEL_178:
                  v2 = v90 + 1;
                  goto LABEL_179;
                }
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v60) = 0;
              goto LABEL_178;
            }
            v58 = 0;
            v59 = 0;
            v60 = 0;
            do
            {
              v2 = v56 + 1;
              *((_QWORD *)a2 + 1) = v56 + 1;
              v61 = *(_BYTE *)(v57 + v56);
              v60 |= (unint64_t)(v61 & 0x7F) << v58;
              if ((v61 & 0x80) == 0)
                goto LABEL_179;
              v58 += 7;
              v56 = v2;
              v14 = v59++ > 8;
            }
            while (!v14);
            LODWORD(v60) = 0;
LABEL_179:
            *((_DWORD *)this + 12) = v60;
            break;
          default:
            if ((_DWORD)v21 != 203)
              goto LABEL_19;
            *((_WORD *)this + 32) |= 0x400u;
            v2 = *((_QWORD *)a2 + 1);
            if (v2 >= *((_QWORD *)a2 + 2))
            {
              v37 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v36 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
              *((_QWORD *)a2 + 1) = v2;
              v37 = v36 != 0;
            }
            *((_BYTE *)this + 60) = v37;
            break;
        }
      }
      else
      {
        switch((int)v21)
        {
          case 'e':
            *((_WORD *)this + 32) |= 0x40u;
            v22 = *((_QWORD *)a2 + 1);
            v2 = *((_QWORD *)a2 + 2);
            v23 = *(_QWORD *)a2;
            if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v2)
            {
              v68 = 0;
              v69 = 0;
              v26 = 0;
              if (v2 <= v22)
                v2 = *((_QWORD *)a2 + 1);
              while (1)
              {
                if (v2 == v22)
                {
                  LODWORD(v26) = 0;
                  *((_BYTE *)a2 + 24) = 1;
                  goto LABEL_154;
                }
                v70 = v22++;
                v71 = *(_BYTE *)(v23 + v70);
                *((_QWORD *)a2 + 1) = v22;
                v26 |= (unint64_t)(v71 & 0x7F) << v68;
                if ((v71 & 0x80) == 0)
                  break;
                v68 += 7;
                v14 = v69++ > 8;
                if (v14)
                {
                  LODWORD(v26) = 0;
LABEL_153:
                  v2 = v70 + 1;
                  goto LABEL_154;
                }
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v26) = 0;
              goto LABEL_153;
            }
            v24 = 0;
            v25 = 0;
            v26 = 0;
            do
            {
              v2 = v22 + 1;
              *((_QWORD *)a2 + 1) = v22 + 1;
              v27 = *(_BYTE *)(v23 + v22);
              v26 |= (unint64_t)(v27 & 0x7F) << v24;
              if ((v27 & 0x80) == 0)
                goto LABEL_154;
              v24 += 7;
              v22 = v2;
              v14 = v25++ > 8;
            }
            while (!v14);
            LODWORD(v26) = 0;
LABEL_154:
            *((_DWORD *)this + 11) = v26;
            break;
          case 'f':
            *((_WORD *)this + 32) |= 0x10u;
            v2 = *((_QWORD *)a2 + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_80;
            *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
            goto LABEL_149;
          case 'g':
            *((_WORD *)this + 32) |= 0x20u;
            v38 = *((_QWORD *)a2 + 1);
            v2 = *((_QWORD *)a2 + 2);
            v39 = *(_QWORD *)a2;
            if (v38 > 0xFFFFFFFFFFFFFFF5 || v38 + 10 > v2)
            {
              v76 = 0;
              v77 = 0;
              v42 = 0;
              if (v2 <= v38)
                v2 = *((_QWORD *)a2 + 1);
              while (1)
              {
                if (v2 == v38)
                {
                  LODWORD(v42) = 0;
                  *((_BYTE *)a2 + 24) = 1;
                  goto LABEL_164;
                }
                v78 = v38++;
                v79 = *(_BYTE *)(v39 + v78);
                *((_QWORD *)a2 + 1) = v38;
                v42 |= (unint64_t)(v79 & 0x7F) << v76;
                if ((v79 & 0x80) == 0)
                  break;
                v76 += 7;
                v14 = v77++ > 8;
                if (v14)
                {
                  LODWORD(v42) = 0;
LABEL_163:
                  v2 = v78 + 1;
                  goto LABEL_164;
                }
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v42) = 0;
              goto LABEL_163;
            }
            v40 = 0;
            v41 = 0;
            v42 = 0;
            do
            {
              v2 = v38 + 1;
              *((_QWORD *)a2 + 1) = v38 + 1;
              v43 = *(_BYTE *)(v39 + v38);
              v42 |= (unint64_t)(v43 & 0x7F) << v40;
              if ((v43 & 0x80) == 0)
                goto LABEL_164;
              v40 += 7;
              v38 = v2;
              v14 = v41++ > 8;
            }
            while (!v14);
            LODWORD(v42) = 0;
LABEL_164:
            *((_DWORD *)this + 10) = v42;
            break;
          case 'h':
            *((_WORD *)this + 32) |= 8u;
            v2 = *((_QWORD *)a2 + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_80;
            *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
            goto LABEL_149;
          default:
            if ((_DWORD)v21 == 201)
            {
              *((_WORD *)this + 32) |= 4u;
              v62 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v63 = *(_QWORD *)a2;
              if (v62 > 0xFFFFFFFFFFFFFFF5 || v62 + 10 > v2)
              {
                v92 = 0;
                v93 = 0;
                v66 = 0;
                if (v2 <= v62)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v62)
                  {
                    v66 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_184;
                  }
                  v94 = v62++;
                  v95 = *(_BYTE *)(v63 + v94);
                  *((_QWORD *)a2 + 1) = v62;
                  v66 |= (unint64_t)(v95 & 0x7F) << v92;
                  if ((v95 & 0x80) == 0)
                    break;
                  v92 += 7;
                  v14 = v93++ > 8;
                  if (v14)
                  {
                    v66 = 0;
                    goto LABEL_183;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v66 = 0;
LABEL_183:
                v2 = v94 + 1;
              }
              else
              {
                v64 = 0;
                v65 = 0;
                v66 = 0;
                while (1)
                {
                  v2 = v62 + 1;
                  *((_QWORD *)a2 + 1) = v62 + 1;
                  v67 = *(_BYTE *)(v63 + v62);
                  v66 |= (unint64_t)(v67 & 0x7F) << v64;
                  if ((v67 & 0x80) == 0)
                    break;
                  v64 += 7;
                  v62 = v2;
                  v14 = v65++ > 8;
                  if (v14)
                  {
                    v66 = 0;
                    break;
                  }
                }
              }
LABEL_184:
              *((_QWORD *)this + 3) = v66;
            }
            else if ((_DWORD)v21 == 202)
            {
              *((_WORD *)this + 32) |= 0x800u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v35 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v34 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v35 = v34 != 0;
              }
              *((_BYTE *)this + 61) = v35;
            }
            else
            {
LABEL_19:
              result = PB::Reader::skip(a2);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
            }
            break;
        }
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_26;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_19;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaGravityAutocorrelationResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 64);
  if ((v4 & 0x40) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_WORD *)(v3 + 64);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 0x800) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x800) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x200) == 0)
  {
LABEL_11:
    if ((v4 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x100) == 0)
  {
LABEL_12:
    if ((v4 & 0x80) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  if ((*(_WORD *)(v3 + 64) & 0x80) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::KappaGravityAutocorrelationResult::hash_value(CMMsl::KappaGravityAutocorrelationResult *this)
{
  __int16 v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *((_WORD *)this + 32);
  if ((v1 & 0x40) == 0)
  {
    v2 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_3;
LABEL_21:
    v4 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_6;
    goto LABEL_22;
  }
  v2 = *((int *)this + 11);
  if ((v1 & 0x10) == 0)
    goto LABEL_21;
LABEL_3:
  v3 = *((float *)this + 9);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_6:
    v5 = *((int *)this + 10);
    if ((v1 & 8) != 0)
      goto LABEL_7;
LABEL_23:
    v7 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_22:
  v5 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_23;
LABEL_7:
  v6 = *((float *)this + 8);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_10:
    v8 = *((_QWORD *)this + 3);
    if ((*((_WORD *)this + 32) & 0x800) != 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  v8 = 0;
  if ((*((_WORD *)this + 32) & 0x800) != 0)
  {
LABEL_11:
    v9 = *((unsigned __int8 *)this + 61);
    if ((*((_WORD *)this + 32) & 0x400) != 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  v9 = 0;
  if ((*((_WORD *)this + 32) & 0x400) != 0)
  {
LABEL_12:
    v10 = *((unsigned __int8 *)this + 60);
    if ((v1 & 1) != 0)
      goto LABEL_13;
    goto LABEL_27;
  }
LABEL_26:
  v10 = 0;
  if ((v1 & 1) != 0)
  {
LABEL_13:
    v11 = *((_QWORD *)this + 1);
    if ((v1 & 2) != 0)
      goto LABEL_14;
    goto LABEL_28;
  }
LABEL_27:
  v11 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_14:
    v12 = *((_QWORD *)this + 2);
    if ((*((_WORD *)this + 32) & 0x200) != 0)
      goto LABEL_15;
    goto LABEL_29;
  }
LABEL_28:
  v12 = 0;
  if ((*((_WORD *)this + 32) & 0x200) != 0)
  {
LABEL_15:
    v13 = *((int *)this + 14);
    if ((*((_WORD *)this + 32) & 0x100) != 0)
      goto LABEL_16;
    goto LABEL_30;
  }
LABEL_29:
  v13 = 0;
  if ((*((_WORD *)this + 32) & 0x100) != 0)
  {
LABEL_16:
    v14 = *((float *)this + 13);
    v15 = LODWORD(v14);
    if (v14 == 0.0)
      v15 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_19;
LABEL_31:
    v16 = 0;
    return v4 ^ v2 ^ v5 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v15 ^ v16;
  }
LABEL_30:
  v15 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_31;
LABEL_19:
  v16 = *((int *)this + 12);
  return v4 ^ v2 ^ v5 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v15 ^ v16;
}

void CMMsl::KappaHighSpeedCrashResult::~KappaHighSpeedCrashResult(CMMsl::KappaHighSpeedCrashResult *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::KappaHighSpeedCrashResult::KappaHighSpeedCrashResult(uint64_t this, const CMMsl::KappaHighSpeedCrashResult *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;

  *(_QWORD *)this = &off_25135E8D0;
  *(_DWORD *)(this + 68) = 0;
  v2 = *((_DWORD *)a2 + 17);
  if ((v2 & 4) != 0)
  {
    v4 = *((_DWORD *)a2 + 5);
    v3 = 4;
    *(_DWORD *)(this + 68) = 4;
    *(_DWORD *)(this + 20) = v4;
    v2 = *((_DWORD *)a2 + 17);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *(_DWORD *)(this + 68) = v3;
    *(_DWORD *)(this + 16) = v5;
    v2 = *((_DWORD *)a2 + 17);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    v6 = *((_DWORD *)a2 + 6);
    v3 |= 8u;
    *(_DWORD *)(this + 68) = v3;
    *(_DWORD *)(this + 24) = v6;
    v2 = *((_DWORD *)a2 + 17);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x800) == 0)
        goto LABEL_9;
      goto LABEL_28;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_DWORD *)(this + 68) = v3;
  *(_QWORD *)(this + 8) = v7;
  v2 = *((_DWORD *)a2 + 17);
  if ((v2 & 0x800) == 0)
  {
LABEL_9:
    if ((v2 & 0x1000) == 0)
      goto LABEL_10;
    goto LABEL_29;
  }
LABEL_28:
  v8 = *((_BYTE *)a2 + 56);
  v3 |= 0x800u;
  *(_DWORD *)(this + 68) = v3;
  *(_BYTE *)(this + 56) = v8;
  v2 = *((_DWORD *)a2 + 17);
  if ((v2 & 0x1000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_30;
  }
LABEL_29:
  v9 = *((_BYTE *)a2 + 57);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 68) = v3;
  *(_BYTE *)(this + 57) = v9;
  v2 = *((_DWORD *)a2 + 17);
  if ((v2 & 0x2000) == 0)
  {
LABEL_11:
    if ((v2 & 0x100000) == 0)
      goto LABEL_12;
    goto LABEL_31;
  }
LABEL_30:
  v10 = *((_BYTE *)a2 + 58);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 68) = v3;
  *(_BYTE *)(this + 58) = v10;
  v2 = *((_DWORD *)a2 + 17);
  if ((v2 & 0x100000) == 0)
  {
LABEL_12:
    if ((v2 & 0x40000) == 0)
      goto LABEL_13;
    goto LABEL_32;
  }
LABEL_31:
  v11 = *((_BYTE *)a2 + 65);
  v3 |= 0x100000u;
  *(_DWORD *)(this + 68) = v3;
  *(_BYTE *)(this + 65) = v11;
  v2 = *((_DWORD *)a2 + 17);
  if ((v2 & 0x40000) == 0)
  {
LABEL_13:
    if ((v2 & 0x8000) == 0)
      goto LABEL_14;
    goto LABEL_33;
  }
LABEL_32:
  v12 = *((_BYTE *)a2 + 63);
  v3 |= 0x40000u;
  *(_DWORD *)(this + 68) = v3;
  *(_BYTE *)(this + 63) = v12;
  v2 = *((_DWORD *)a2 + 17);
  if ((v2 & 0x8000) == 0)
  {
LABEL_14:
    if ((v2 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_34;
  }
LABEL_33:
  v13 = *((_BYTE *)a2 + 60);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 68) = v3;
  *(_BYTE *)(this + 60) = v13;
  v2 = *((_DWORD *)a2 + 17);
  if ((v2 & 0x4000) == 0)
  {
LABEL_15:
    if ((v2 & 0x80000) == 0)
      goto LABEL_16;
    goto LABEL_35;
  }
LABEL_34:
  v14 = *((_BYTE *)a2 + 59);
  v3 |= 0x4000u;
  *(_DWORD *)(this + 68) = v3;
  *(_BYTE *)(this + 59) = v14;
  v2 = *((_DWORD *)a2 + 17);
  if ((v2 & 0x80000) == 0)
  {
LABEL_16:
    if ((v2 & 0x10000) == 0)
      goto LABEL_17;
    goto LABEL_36;
  }
LABEL_35:
  v15 = *((_BYTE *)a2 + 64);
  v3 |= 0x80000u;
  *(_DWORD *)(this + 68) = v3;
  *(_BYTE *)(this + 64) = v15;
  v2 = *((_DWORD *)a2 + 17);
  if ((v2 & 0x10000) == 0)
  {
LABEL_17:
    if ((v2 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_37;
  }
LABEL_36:
  v16 = *((_BYTE *)a2 + 61);
  v3 |= 0x10000u;
  *(_DWORD *)(this + 68) = v3;
  *(_BYTE *)(this + 61) = v16;
  v2 = *((_DWORD *)a2 + 17);
  if ((v2 & 0x20000) == 0)
  {
LABEL_18:
    if ((v2 & 0x400) == 0)
      goto LABEL_19;
    goto LABEL_38;
  }
LABEL_37:
  v17 = *((_BYTE *)a2 + 62);
  v3 |= 0x20000u;
  *(_DWORD *)(this + 68) = v3;
  *(_BYTE *)(this + 62) = v17;
  v2 = *((_DWORD *)a2 + 17);
  if ((v2 & 0x400) == 0)
  {
LABEL_19:
    if ((v2 & 0x100) == 0)
      goto LABEL_20;
    goto LABEL_39;
  }
LABEL_38:
  v18 = *((_DWORD *)a2 + 13);
  v3 |= 0x400u;
  *(_DWORD *)(this + 68) = v3;
  *(_DWORD *)(this + 52) = v18;
  v2 = *((_DWORD *)a2 + 17);
  if ((v2 & 0x100) == 0)
  {
LABEL_20:
    if ((v2 & 0x20) == 0)
      goto LABEL_21;
    goto LABEL_40;
  }
LABEL_39:
  v19 = *((_DWORD *)a2 + 11);
  v3 |= 0x100u;
  *(_DWORD *)(this + 68) = v3;
  *(_DWORD *)(this + 44) = v19;
  v2 = *((_DWORD *)a2 + 17);
  if ((v2 & 0x20) == 0)
  {
LABEL_21:
    if ((v2 & 0x10) == 0)
      goto LABEL_22;
    goto LABEL_41;
  }
LABEL_40:
  v20 = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *(_DWORD *)(this + 68) = v3;
  *(_DWORD *)(this + 32) = v20;
  v2 = *((_DWORD *)a2 + 17);
  if ((v2 & 0x10) == 0)
  {
LABEL_22:
    if ((v2 & 0x200) == 0)
      goto LABEL_23;
    goto LABEL_42;
  }
LABEL_41:
  v21 = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *(_DWORD *)(this + 68) = v3;
  *(_DWORD *)(this + 28) = v21;
  v2 = *((_DWORD *)a2 + 17);
  if ((v2 & 0x200) == 0)
  {
LABEL_23:
    if ((v2 & 0x40) == 0)
      goto LABEL_24;
    goto LABEL_43;
  }
LABEL_42:
  v22 = *((_DWORD *)a2 + 12);
  v3 |= 0x200u;
  *(_DWORD *)(this + 68) = v3;
  *(_DWORD *)(this + 48) = v22;
  v2 = *((_DWORD *)a2 + 17);
  if ((v2 & 0x40) == 0)
  {
LABEL_24:
    if ((v2 & 0x80) == 0)
      return this;
LABEL_44:
    v24 = *((_DWORD *)a2 + 10);
    *(_DWORD *)(this + 68) = v3 | 0x80;
    *(_DWORD *)(this + 40) = v24;
    return this;
  }
LABEL_43:
  v23 = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *(_DWORD *)(this + 68) = v3;
  *(_DWORD *)(this + 36) = v23;
  if ((*((_DWORD *)a2 + 17) & 0x80) != 0)
    goto LABEL_44;
  return this;
}

CMMsl *CMMsl::KappaHighSpeedCrashResult::operator=(CMMsl *a1, const CMMsl::KappaHighSpeedCrashResult *a2)
{
  CMMsl::KappaHighSpeedCrashResult *v3;
  _BYTE v5[72];

  if (a1 != a2)
  {
    CMMsl::KappaHighSpeedCrashResult::KappaHighSpeedCrashResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaHighSpeedCrashResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaHighSpeedCrashResult *a2, CMMsl::KappaHighSpeedCrashResult *a3)
{
  int v3;
  int v4;
  int v5;
  float result;
  uint64_t v7;

  v3 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v3;
  v4 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 56);
  *((_BYTE *)this + 56) = *((_BYTE *)a2 + 56);
  *((_BYTE *)a2 + 56) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 57);
  *((_BYTE *)this + 57) = *((_BYTE *)a2 + 57);
  *((_BYTE *)a2 + 57) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 58);
  *((_BYTE *)this + 58) = *((_BYTE *)a2 + 58);
  *((_BYTE *)a2 + 58) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 65);
  *((_BYTE *)this + 65) = *((_BYTE *)a2 + 65);
  *((_BYTE *)a2 + 65) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 63);
  *((_BYTE *)this + 63) = *((_BYTE *)a2 + 63);
  *((_BYTE *)a2 + 63) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 60);
  *((_BYTE *)this + 60) = *((_BYTE *)a2 + 60);
  *((_BYTE *)a2 + 60) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 59);
  *((_BYTE *)this + 59) = *((_BYTE *)a2 + 59);
  *((_BYTE *)a2 + 59) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 64);
  *((_BYTE *)this + 64) = *((_BYTE *)a2 + 64);
  *((_BYTE *)a2 + 64) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 61);
  *((_BYTE *)this + 61) = *((_BYTE *)a2 + 61);
  *((_BYTE *)a2 + 61) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 62);
  *((_BYTE *)this + 62) = *((_BYTE *)a2 + 62);
  *((_BYTE *)a2 + 62) = v7;
  LODWORD(v7) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v7;
  LODWORD(v7) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v7;
  LODWORD(v7) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v7;
  LODWORD(v7) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v7;
  LODWORD(v7) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v7;
  LODWORD(v7) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v7;
  LODWORD(v7) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v7;
  return result;
}

float CMMsl::KappaHighSpeedCrashResult::KappaHighSpeedCrashResult(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135E8D0;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a2 + 68) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 58);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  *(_BYTE *)(a1 + 63) = *(_BYTE *)(a2 + 63);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  *(_BYTE *)(a1 + 59) = *(_BYTE *)(a2 + 59);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 61) = *(_BYTE *)(a2 + 61);
  *(_BYTE *)(a1 + 62) = *(_BYTE *)(a2 + 62);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return result;
}

CMMsl *CMMsl::KappaHighSpeedCrashResult::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::KappaHighSpeedCrashResult *v3;
  _BYTE v5[72];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaHighSpeedCrashResult::KappaHighSpeedCrashResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaHighSpeedCrashResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaHighSpeedCrashResult::formatText(CMMsl::KappaHighSpeedCrashResult *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 17);
  if ((v5 & 0x800) != 0)
  {
    PB::TextFormatter::format(a2, "crashDetectorDecision");
    v5 = *((_DWORD *)this + 17);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_26;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "detectorPostTriggerTimeOffsetWindow", *((float *)this + 4));
  v5 = *((_DWORD *)this + 17);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x1000) == 0)
      goto LABEL_5;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "detectorPreTriggerTimeOffsetWindow", *((float *)this + 5));
  v5 = *((_DWORD *)this + 17);
  if ((v5 & 0x1000) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "earlyCrashDetectorDecision");
  v5 = *((_DWORD *)this + 17);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x2000) == 0)
      goto LABEL_7;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "epochLatchingCount", *((float *)this + 6));
  v5 = *((_DWORD *)this + 17);
  if ((v5 & 0x2000) == 0)
  {
LABEL_7:
    if ((v5 & 0x4000) == 0)
      goto LABEL_8;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "hasAudioInEpoch");
  v5 = *((_DWORD *)this + 17);
  if ((v5 & 0x4000) == 0)
  {
LABEL_8:
    if ((v5 & 0x8000) == 0)
      goto LABEL_9;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "isAudio");
  v5 = *((_DWORD *)this + 17);
  if ((v5 & 0x8000) == 0)
  {
LABEL_9:
    if ((v5 & 0x10000) == 0)
      goto LABEL_10;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "isBaro");
  v5 = *((_DWORD *)this + 17);
  if ((v5 & 0x10000) == 0)
  {
LABEL_10:
    if ((v5 & 0x20000) == 0)
      goto LABEL_11;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "isDescalationDecided");
  v5 = *((_DWORD *)this + 17);
  if ((v5 & 0x20000) == 0)
  {
LABEL_11:
    if ((v5 & 0x40000) == 0)
      goto LABEL_12;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "isDescalationRequired");
  v5 = *((_DWORD *)this + 17);
  if ((v5 & 0x40000) == 0)
  {
LABEL_12:
    if ((v5 & 0x80000) == 0)
      goto LABEL_13;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "isFreeFall");
  v5 = *((_DWORD *)this + 17);
  if ((v5 & 0x80000) == 0)
  {
LABEL_13:
    if ((v5 & 0x100000) == 0)
      goto LABEL_14;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "isGPS");
  v5 = *((_DWORD *)this + 17);
  if ((v5 & 0x100000) == 0)
  {
LABEL_14:
    if ((v5 & 0x10) == 0)
      goto LABEL_15;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "isPulse");
  v5 = *((_DWORD *)this + 17);
  if ((v5 & 0x10) == 0)
  {
LABEL_15:
    if ((v5 & 0x20) == 0)
      goto LABEL_16;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "latchedIsAudio");
  v5 = *((_DWORD *)this + 17);
  if ((v5 & 0x20) == 0)
  {
LABEL_16:
    if ((v5 & 0x40) == 0)
      goto LABEL_17;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "latchedIsBaro");
  v5 = *((_DWORD *)this + 17);
  if ((v5 & 0x40) == 0)
  {
LABEL_17:
    if ((v5 & 0x80) == 0)
      goto LABEL_18;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "latchedIsDescalationDecided");
  v5 = *((_DWORD *)this + 17);
  if ((v5 & 0x80) == 0)
  {
LABEL_18:
    if ((v5 & 0x100) == 0)
      goto LABEL_19;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "latchedIsDescalationRequired");
  v5 = *((_DWORD *)this + 17);
  if ((v5 & 0x100) == 0)
  {
LABEL_19:
    if ((v5 & 0x200) == 0)
      goto LABEL_20;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "latchedIsFreeFall");
  v5 = *((_DWORD *)this + 17);
  if ((v5 & 0x200) == 0)
  {
LABEL_20:
    if ((v5 & 0x400) == 0)
      goto LABEL_21;
LABEL_43:
    PB::TextFormatter::format(a2, "latchedIsPulse");
    if ((*((_DWORD *)this + 17) & 1) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_22;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "latchedIsGPS");
  v5 = *((_DWORD *)this + 17);
  if ((v5 & 0x400) != 0)
    goto LABEL_43;
LABEL_21:
  if ((v5 & 1) != 0)
LABEL_22:
    PB::TextFormatter::format(a2, "timestamp");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaHighSpeedCrashResult::readFrom(CMMsl::KappaHighSpeedCrashResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int i;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  char v27;
  int v28;
  BOOL v29;
  int v30;
  BOOL v31;
  int v32;
  BOOL v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  char v39;
  int v40;
  BOOL v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  char v47;
  unint64_t v48;
  uint64_t v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  char v53;
  unint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  uint64_t v58;
  char v59;
  unint64_t v60;
  uint64_t v61;
  char v62;
  unsigned int v63;
  uint64_t v64;
  char v65;
  unint64_t v66;
  uint64_t v67;
  char v68;
  unsigned int v69;
  uint64_t v70;
  char v71;
  unint64_t v72;
  uint64_t v73;
  char v74;
  unsigned int v75;
  uint64_t v76;
  char v77;
  int v78;
  BOOL v79;
  int v80;
  BOOL v81;
  int v82;
  BOOL v83;
  int v84;
  BOOL v85;
  int v86;
  BOOL v87;
  int v88;
  BOOL v89;
  char v90;
  unsigned int v91;
  unint64_t v92;
  char v93;
  char v94;
  unsigned int v95;
  unint64_t v96;
  char v97;
  char v98;
  unsigned int v99;
  unint64_t v100;
  char v101;
  char v102;
  unsigned int v103;
  unint64_t v104;
  char v105;
  char v106;
  unsigned int v107;
  unint64_t v108;
  char v109;
  char v110;
  unsigned int v111;
  unint64_t v112;
  char v113;
  char v114;
  unsigned int v115;
  unint64_t v116;
  char v117;
  char v118;
  unsigned int v119;
  unint64_t v120;
  char v121;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  for (i = *((unsigned __int8 *)a2 + 24); v2 < v3 && i == 0; i = *((unsigned __int8 *)a2 + 24))
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_26;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
        if (v14)
          goto LABEL_19;
      }
      i = 1;
      *((_BYTE *)a2 + 24) = 1;
      return i == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_26:
    if ((v11 & 7) == 4)
    {
      i = 0;
      return i == 0;
    }
    v21 = v11 >> 3;
    if ((int)(v11 >> 3) > 200)
    {
      switch((int)v21)
      {
        case 301:
          *((_DWORD *)this + 17) |= 0x100000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 >= *((_QWORD *)a2 + 2))
          {
            v29 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v28 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
            *((_QWORD *)a2 + 1) = v2;
            v29 = v28 != 0;
          }
          *((_BYTE *)this + 65) = v29;
          break;
        case 302:
          *((_DWORD *)this + 17) |= 0x40000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 >= *((_QWORD *)a2 + 2))
          {
            v79 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v78 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
            *((_QWORD *)a2 + 1) = v2;
            v79 = v78 != 0;
          }
          *((_BYTE *)this + 63) = v79;
          break;
        case 303:
          *((_DWORD *)this + 17) |= 0x8000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 >= *((_QWORD *)a2 + 2))
          {
            v81 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v80 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
            *((_QWORD *)a2 + 1) = v2;
            v81 = v80 != 0;
          }
          *((_BYTE *)this + 60) = v81;
          break;
        case 304:
          *((_DWORD *)this + 17) |= 0x4000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 >= *((_QWORD *)a2 + 2))
          {
            v83 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v82 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
            *((_QWORD *)a2 + 1) = v2;
            v83 = v82 != 0;
          }
          *((_BYTE *)this + 59) = v83;
          break;
        case 305:
          *((_DWORD *)this + 17) |= 0x80000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 >= *((_QWORD *)a2 + 2))
          {
            v85 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v84 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
            *((_QWORD *)a2 + 1) = v2;
            v85 = v84 != 0;
          }
          *((_BYTE *)this + 64) = v85;
          break;
        case 306:
          *((_DWORD *)this + 17) |= 0x10000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 >= *((_QWORD *)a2 + 2))
          {
            v87 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v86 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
            *((_QWORD *)a2 + 1) = v2;
            v87 = v86 != 0;
          }
          *((_BYTE *)this + 61) = v87;
          break;
        case 307:
          *((_DWORD *)this + 17) |= 0x20000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 >= *((_QWORD *)a2 + 2))
          {
            v89 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v88 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
            *((_QWORD *)a2 + 1) = v2;
            v89 = v88 != 0;
          }
          *((_BYTE *)this + 62) = v89;
          break;
        default:
          switch((int)v21)
          {
            case 401:
              *((_DWORD *)this + 17) |= 0x400u;
              v22 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v23 = *(_QWORD *)a2;
              if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v2)
              {
                v94 = 0;
                v95 = 0;
                v26 = 0;
                if (v2 <= v22)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v22)
                  {
                    LODWORD(v26) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_211;
                  }
                  v96 = v22++;
                  v97 = *(_BYTE *)(v23 + v96);
                  *((_QWORD *)a2 + 1) = v22;
                  v26 |= (unint64_t)(v97 & 0x7F) << v94;
                  if ((v97 & 0x80) == 0)
                    break;
                  v94 += 7;
                  v14 = v95++ > 8;
                  if (v14)
                  {
                    LODWORD(v26) = 0;
                    goto LABEL_210;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v26) = 0;
LABEL_210:
                v2 = v96 + 1;
              }
              else
              {
                v24 = 0;
                v25 = 0;
                v26 = 0;
                while (1)
                {
                  v2 = v22 + 1;
                  *((_QWORD *)a2 + 1) = v22 + 1;
                  v27 = *(_BYTE *)(v23 + v22);
                  v26 |= (unint64_t)(v27 & 0x7F) << v24;
                  if ((v27 & 0x80) == 0)
                    break;
                  v24 += 7;
                  v22 = v2;
                  v14 = v25++ > 8;
                  if (v14)
                  {
                    LODWORD(v26) = 0;
                    break;
                  }
                }
              }
LABEL_211:
              *((_DWORD *)this + 13) = v26;
              break;
            case 402:
              *((_DWORD *)this + 17) |= 0x100u;
              v42 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v43 = *(_QWORD *)a2;
              if (v42 > 0xFFFFFFFFFFFFFFF5 || v42 + 10 > v2)
              {
                v98 = 0;
                v99 = 0;
                v46 = 0;
                if (v2 <= v42)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v42)
                  {
                    LODWORD(v46) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_216;
                  }
                  v100 = v42++;
                  v101 = *(_BYTE *)(v43 + v100);
                  *((_QWORD *)a2 + 1) = v42;
                  v46 |= (unint64_t)(v101 & 0x7F) << v98;
                  if ((v101 & 0x80) == 0)
                    break;
                  v98 += 7;
                  v14 = v99++ > 8;
                  if (v14)
                  {
                    LODWORD(v46) = 0;
                    goto LABEL_215;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v46) = 0;
LABEL_215:
                v2 = v100 + 1;
              }
              else
              {
                v44 = 0;
                v45 = 0;
                v46 = 0;
                while (1)
                {
                  v2 = v42 + 1;
                  *((_QWORD *)a2 + 1) = v42 + 1;
                  v47 = *(_BYTE *)(v43 + v42);
                  v46 |= (unint64_t)(v47 & 0x7F) << v44;
                  if ((v47 & 0x80) == 0)
                    break;
                  v44 += 7;
                  v42 = v2;
                  v14 = v45++ > 8;
                  if (v14)
                  {
                    LODWORD(v46) = 0;
                    break;
                  }
                }
              }
LABEL_216:
              *((_DWORD *)this + 11) = v46;
              break;
            case 403:
              *((_DWORD *)this + 17) |= 0x20u;
              v48 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v49 = *(_QWORD *)a2;
              if (v48 > 0xFFFFFFFFFFFFFFF5 || v48 + 10 > v2)
              {
                v102 = 0;
                v103 = 0;
                v52 = 0;
                if (v2 <= v48)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v48)
                  {
                    LODWORD(v52) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_221;
                  }
                  v104 = v48++;
                  v105 = *(_BYTE *)(v49 + v104);
                  *((_QWORD *)a2 + 1) = v48;
                  v52 |= (unint64_t)(v105 & 0x7F) << v102;
                  if ((v105 & 0x80) == 0)
                    break;
                  v102 += 7;
                  v14 = v103++ > 8;
                  if (v14)
                  {
                    LODWORD(v52) = 0;
                    goto LABEL_220;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v52) = 0;
LABEL_220:
                v2 = v104 + 1;
              }
              else
              {
                v50 = 0;
                v51 = 0;
                v52 = 0;
                while (1)
                {
                  v2 = v48 + 1;
                  *((_QWORD *)a2 + 1) = v48 + 1;
                  v53 = *(_BYTE *)(v49 + v48);
                  v52 |= (unint64_t)(v53 & 0x7F) << v50;
                  if ((v53 & 0x80) == 0)
                    break;
                  v50 += 7;
                  v48 = v2;
                  v14 = v51++ > 8;
                  if (v14)
                  {
                    LODWORD(v52) = 0;
                    break;
                  }
                }
              }
LABEL_221:
              *((_DWORD *)this + 8) = v52;
              break;
            case 404:
              *((_DWORD *)this + 17) |= 0x10u;
              v54 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v55 = *(_QWORD *)a2;
              if (v54 > 0xFFFFFFFFFFFFFFF5 || v54 + 10 > v2)
              {
                v106 = 0;
                v107 = 0;
                v58 = 0;
                if (v2 <= v54)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v54)
                  {
                    LODWORD(v58) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_226;
                  }
                  v108 = v54++;
                  v109 = *(_BYTE *)(v55 + v108);
                  *((_QWORD *)a2 + 1) = v54;
                  v58 |= (unint64_t)(v109 & 0x7F) << v106;
                  if ((v109 & 0x80) == 0)
                    break;
                  v106 += 7;
                  v14 = v107++ > 8;
                  if (v14)
                  {
                    LODWORD(v58) = 0;
                    goto LABEL_225;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v58) = 0;
LABEL_225:
                v2 = v108 + 1;
              }
              else
              {
                v56 = 0;
                v57 = 0;
                v58 = 0;
                while (1)
                {
                  v2 = v54 + 1;
                  *((_QWORD *)a2 + 1) = v54 + 1;
                  v59 = *(_BYTE *)(v55 + v54);
                  v58 |= (unint64_t)(v59 & 0x7F) << v56;
                  if ((v59 & 0x80) == 0)
                    break;
                  v56 += 7;
                  v54 = v2;
                  v14 = v57++ > 8;
                  if (v14)
                  {
                    LODWORD(v58) = 0;
                    break;
                  }
                }
              }
LABEL_226:
              *((_DWORD *)this + 7) = v58;
              break;
            case 405:
              *((_DWORD *)this + 17) |= 0x200u;
              v60 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v61 = *(_QWORD *)a2;
              if (v60 > 0xFFFFFFFFFFFFFFF5 || v60 + 10 > v2)
              {
                v110 = 0;
                v111 = 0;
                v64 = 0;
                if (v2 <= v60)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v60)
                  {
                    LODWORD(v64) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_231;
                  }
                  v112 = v60++;
                  v113 = *(_BYTE *)(v61 + v112);
                  *((_QWORD *)a2 + 1) = v60;
                  v64 |= (unint64_t)(v113 & 0x7F) << v110;
                  if ((v113 & 0x80) == 0)
                    break;
                  v110 += 7;
                  v14 = v111++ > 8;
                  if (v14)
                  {
                    LODWORD(v64) = 0;
                    goto LABEL_230;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v64) = 0;
LABEL_230:
                v2 = v112 + 1;
              }
              else
              {
                v62 = 0;
                v63 = 0;
                v64 = 0;
                while (1)
                {
                  v2 = v60 + 1;
                  *((_QWORD *)a2 + 1) = v60 + 1;
                  v65 = *(_BYTE *)(v61 + v60);
                  v64 |= (unint64_t)(v65 & 0x7F) << v62;
                  if ((v65 & 0x80) == 0)
                    break;
                  v62 += 7;
                  v60 = v2;
                  v14 = v63++ > 8;
                  if (v14)
                  {
                    LODWORD(v64) = 0;
                    break;
                  }
                }
              }
LABEL_231:
              *((_DWORD *)this + 12) = v64;
              break;
            case 406:
              *((_DWORD *)this + 17) |= 0x40u;
              v66 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v67 = *(_QWORD *)a2;
              if (v66 > 0xFFFFFFFFFFFFFFF5 || v66 + 10 > v2)
              {
                v114 = 0;
                v115 = 0;
                v70 = 0;
                if (v2 <= v66)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v66)
                  {
                    LODWORD(v70) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_236;
                  }
                  v116 = v66++;
                  v117 = *(_BYTE *)(v67 + v116);
                  *((_QWORD *)a2 + 1) = v66;
                  v70 |= (unint64_t)(v117 & 0x7F) << v114;
                  if ((v117 & 0x80) == 0)
                    break;
                  v114 += 7;
                  v14 = v115++ > 8;
                  if (v14)
                  {
                    LODWORD(v70) = 0;
                    goto LABEL_235;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v70) = 0;
LABEL_235:
                v2 = v116 + 1;
              }
              else
              {
                v68 = 0;
                v69 = 0;
                v70 = 0;
                while (1)
                {
                  v2 = v66 + 1;
                  *((_QWORD *)a2 + 1) = v66 + 1;
                  v71 = *(_BYTE *)(v67 + v66);
                  v70 |= (unint64_t)(v71 & 0x7F) << v68;
                  if ((v71 & 0x80) == 0)
                    break;
                  v68 += 7;
                  v66 = v2;
                  v14 = v69++ > 8;
                  if (v14)
                  {
                    LODWORD(v70) = 0;
                    break;
                  }
                }
              }
LABEL_236:
              *((_DWORD *)this + 9) = v70;
              break;
            case 407:
              *((_DWORD *)this + 17) |= 0x80u;
              v72 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v73 = *(_QWORD *)a2;
              if (v72 > 0xFFFFFFFFFFFFFFF5 || v72 + 10 > v2)
              {
                v118 = 0;
                v119 = 0;
                v76 = 0;
                if (v2 <= v72)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v72)
                  {
                    LODWORD(v76) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_241;
                  }
                  v120 = v72++;
                  v121 = *(_BYTE *)(v73 + v120);
                  *((_QWORD *)a2 + 1) = v72;
                  v76 |= (unint64_t)(v121 & 0x7F) << v118;
                  if ((v121 & 0x80) == 0)
                    break;
                  v118 += 7;
                  v14 = v119++ > 8;
                  if (v14)
                  {
                    LODWORD(v76) = 0;
                    goto LABEL_240;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v76) = 0;
LABEL_240:
                v2 = v120 + 1;
              }
              else
              {
                v74 = 0;
                v75 = 0;
                v76 = 0;
                while (1)
                {
                  v2 = v72 + 1;
                  *((_QWORD *)a2 + 1) = v72 + 1;
                  v77 = *(_BYTE *)(v73 + v72);
                  v76 |= (unint64_t)(v77 & 0x7F) << v74;
                  if ((v77 & 0x80) == 0)
                    break;
                  v74 += 7;
                  v72 = v2;
                  v14 = v75++ > 8;
                  if (v14)
                  {
                    LODWORD(v76) = 0;
                    break;
                  }
                }
              }
LABEL_241:
              *((_DWORD *)this + 10) = v76;
              break;
            default:
              if ((_DWORD)v21 != 201)
                goto LABEL_19;
              *((_DWORD *)this + 17) |= 0x2000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v33 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v32 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v33 = v32 != 0;
              }
              *((_BYTE *)this + 58) = v33;
              break;
          }
          break;
      }
      goto LABEL_21;
    }
    if ((int)v21 > 100)
    {
      switch((_DWORD)v21)
      {
        case 'e':
          *((_DWORD *)this + 17) |= 1u;
          v34 = *((_QWORD *)a2 + 1);
          v2 = *((_QWORD *)a2 + 2);
          v35 = *(_QWORD *)a2;
          if (v34 > 0xFFFFFFFFFFFFFFF5 || v34 + 10 > v2)
          {
            v90 = 0;
            v91 = 0;
            v38 = 0;
            if (v2 <= v34)
              v2 = *((_QWORD *)a2 + 1);
            while (1)
            {
              if (v2 == v34)
              {
                v38 = 0;
                *((_BYTE *)a2 + 24) = 1;
                goto LABEL_206;
              }
              v92 = v34++;
              v93 = *(_BYTE *)(v35 + v92);
              *((_QWORD *)a2 + 1) = v34;
              v38 |= (unint64_t)(v93 & 0x7F) << v90;
              if ((v93 & 0x80) == 0)
                break;
              v90 += 7;
              v14 = v91++ > 8;
              if (v14)
              {
                v38 = 0;
                goto LABEL_205;
              }
            }
            if (*((_BYTE *)a2 + 24))
              v38 = 0;
LABEL_205:
            v2 = v92 + 1;
          }
          else
          {
            v36 = 0;
            v37 = 0;
            v38 = 0;
            while (1)
            {
              v2 = v34 + 1;
              *((_QWORD *)a2 + 1) = v34 + 1;
              v39 = *(_BYTE *)(v35 + v34);
              v38 |= (unint64_t)(v39 & 0x7F) << v36;
              if ((v39 & 0x80) == 0)
                break;
              v36 += 7;
              v34 = v2;
              v14 = v37++ > 8;
              if (v14)
              {
                v38 = 0;
                break;
              }
            }
          }
LABEL_206:
          *((_QWORD *)this + 1) = v38;
          break;
        case 'f':
          *((_DWORD *)this + 17) |= 0x800u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 >= *((_QWORD *)a2 + 2))
          {
            v41 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v40 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
            *((_QWORD *)a2 + 1) = v2;
            v41 = v40 != 0;
          }
          *((_BYTE *)this + 56) = v41;
          break;
        case 'g':
          *((_DWORD *)this + 17) |= 0x1000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 >= *((_QWORD *)a2 + 2))
          {
            v31 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v30 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
            *((_QWORD *)a2 + 1) = v2;
            v31 = v30 != 0;
          }
          *((_BYTE *)this + 57) = v31;
          break;
        default:
LABEL_19:
          result = PB::Reader::skip(a2);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          break;
      }
    }
    else
    {
      switch((_DWORD)v21)
      {
        case 1:
          *((_DWORD *)this + 17) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
          {
            *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
            goto LABEL_201;
          }
          break;
        case 2:
          *((_DWORD *)this + 17) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
          {
            *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
            goto LABEL_201;
          }
          break;
        case 3:
          *((_DWORD *)this + 17) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
          {
            *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_201:
            v2 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v2;
            goto LABEL_21;
          }
          break;
        default:
          goto LABEL_19;
      }
      *((_BYTE *)a2 + 24) = 1;
    }
LABEL_21:
    v3 = *((_QWORD *)a2 + 2);
  }
  return i == 0;
}

uint64_t CMMsl::KappaHighSpeedCrashResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 68);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 20));
    v4 = *(_DWORD *)(v3 + 68);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_25;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0)
      goto LABEL_6;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x1000) == 0)
      goto LABEL_7;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x1000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0)
      goto LABEL_8;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x100000) == 0)
      goto LABEL_9;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x100000) == 0)
  {
LABEL_9:
    if ((v4 & 0x40000) == 0)
      goto LABEL_10;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x40000) == 0)
  {
LABEL_10:
    if ((v4 & 0x8000) == 0)
      goto LABEL_11;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x8000) == 0)
  {
LABEL_11:
    if ((v4 & 0x4000) == 0)
      goto LABEL_12;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x4000) == 0)
  {
LABEL_12:
    if ((v4 & 0x80000) == 0)
      goto LABEL_13;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x80000) == 0)
  {
LABEL_13:
    if ((v4 & 0x10000) == 0)
      goto LABEL_14;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x10000) == 0)
  {
LABEL_14:
    if ((v4 & 0x20000) == 0)
      goto LABEL_15;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x20000) == 0)
  {
LABEL_15:
    if ((v4 & 0x400) == 0)
      goto LABEL_16;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x400) == 0)
  {
LABEL_16:
    if ((v4 & 0x100) == 0)
      goto LABEL_17;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x100) == 0)
  {
LABEL_17:
    if ((v4 & 0x20) == 0)
      goto LABEL_18;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x20) == 0)
  {
LABEL_18:
    if ((v4 & 0x10) == 0)
      goto LABEL_19;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x10) == 0)
  {
LABEL_19:
    if ((v4 & 0x200) == 0)
      goto LABEL_20;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x200) == 0)
  {
LABEL_20:
    if ((v4 & 0x40) == 0)
      goto LABEL_21;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x40) == 0)
  {
LABEL_21:
    if ((v4 & 0x80) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_42:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_DWORD *)(v3 + 68) & 0x80) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::KappaHighSpeedCrashResult::hash_value(CMMsl::KappaHighSpeedCrashResult *this)
{
  int v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;

  v1 = *((_DWORD *)this + 17);
  if ((v1 & 4) == 0)
  {
    v2 = 0;
    if ((v1 & 2) != 0)
      goto LABEL_3;
LABEL_30:
    v4 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_6;
LABEL_31:
    v6 = 0;
    if ((v1 & 1) != 0)
      goto LABEL_9;
    goto LABEL_32;
  }
  v25 = *((float *)this + 5);
  v2 = LODWORD(v25);
  if (v25 == 0.0)
    v2 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_30;
LABEL_3:
  v3 = *((float *)this + 4);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_31;
LABEL_6:
  v5 = *((float *)this + 6);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((v1 & 1) != 0)
  {
LABEL_9:
    v7 = *((_QWORD *)this + 1);
    if ((v1 & 0x800) != 0)
      goto LABEL_10;
    goto LABEL_33;
  }
LABEL_32:
  v7 = 0;
  if ((v1 & 0x800) != 0)
  {
LABEL_10:
    v8 = *((unsigned __int8 *)this + 56);
    if ((v1 & 0x1000) != 0)
      goto LABEL_11;
    goto LABEL_34;
  }
LABEL_33:
  v8 = 0;
  if ((v1 & 0x1000) != 0)
  {
LABEL_11:
    v9 = *((unsigned __int8 *)this + 57);
    if ((v1 & 0x2000) != 0)
      goto LABEL_12;
    goto LABEL_35;
  }
LABEL_34:
  v9 = 0;
  if ((v1 & 0x2000) != 0)
  {
LABEL_12:
    v10 = *((unsigned __int8 *)this + 58);
    if ((v1 & 0x100000) != 0)
      goto LABEL_13;
    goto LABEL_36;
  }
LABEL_35:
  v10 = 0;
  if ((v1 & 0x100000) != 0)
  {
LABEL_13:
    v11 = *((unsigned __int8 *)this + 65);
    if ((v1 & 0x40000) != 0)
      goto LABEL_14;
    goto LABEL_37;
  }
LABEL_36:
  v11 = 0;
  if ((v1 & 0x40000) != 0)
  {
LABEL_14:
    v12 = *((unsigned __int8 *)this + 63);
    if ((v1 & 0x8000) != 0)
      goto LABEL_15;
    goto LABEL_38;
  }
LABEL_37:
  v12 = 0;
  if ((v1 & 0x8000) != 0)
  {
LABEL_15:
    v13 = *((unsigned __int8 *)this + 60);
    if ((v1 & 0x4000) != 0)
      goto LABEL_16;
    goto LABEL_39;
  }
LABEL_38:
  v13 = 0;
  if ((v1 & 0x4000) != 0)
  {
LABEL_16:
    v14 = *((unsigned __int8 *)this + 59);
    if ((v1 & 0x80000) != 0)
      goto LABEL_17;
    goto LABEL_40;
  }
LABEL_39:
  v14 = 0;
  if ((v1 & 0x80000) != 0)
  {
LABEL_17:
    v15 = *((unsigned __int8 *)this + 64);
    if ((v1 & 0x10000) != 0)
      goto LABEL_18;
    goto LABEL_41;
  }
LABEL_40:
  v15 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_18:
    v16 = *((unsigned __int8 *)this + 61);
    if ((v1 & 0x20000) != 0)
      goto LABEL_19;
    goto LABEL_42;
  }
LABEL_41:
  v16 = 0;
  if ((v1 & 0x20000) != 0)
  {
LABEL_19:
    v17 = *((unsigned __int8 *)this + 62);
    if ((v1 & 0x400) != 0)
      goto LABEL_20;
    goto LABEL_43;
  }
LABEL_42:
  v17 = 0;
  if ((v1 & 0x400) != 0)
  {
LABEL_20:
    v18 = *((unsigned int *)this + 13);
    if ((v1 & 0x100) != 0)
      goto LABEL_21;
    goto LABEL_44;
  }
LABEL_43:
  v18 = 0;
  if ((v1 & 0x100) != 0)
  {
LABEL_21:
    v19 = *((unsigned int *)this + 11);
    if ((v1 & 0x20) != 0)
      goto LABEL_22;
    goto LABEL_45;
  }
LABEL_44:
  v19 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_22:
    v20 = *((unsigned int *)this + 8);
    if ((v1 & 0x10) != 0)
      goto LABEL_23;
    goto LABEL_46;
  }
LABEL_45:
  v20 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_23:
    v21 = *((unsigned int *)this + 7);
    if ((v1 & 0x200) != 0)
      goto LABEL_24;
    goto LABEL_47;
  }
LABEL_46:
  v21 = 0;
  if ((v1 & 0x200) != 0)
  {
LABEL_24:
    v22 = *((unsigned int *)this + 12);
    if ((v1 & 0x40) != 0)
      goto LABEL_25;
LABEL_48:
    v23 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_26;
LABEL_49:
    v24 = 0;
    return v4 ^ v2 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24;
  }
LABEL_47:
  v22 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_48;
LABEL_25:
  v23 = *((unsigned int *)this + 9);
  if ((v1 & 0x80) == 0)
    goto LABEL_49;
LABEL_26:
  v24 = *((unsigned int *)this + 10);
  return v4 ^ v2 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24;
}

void CMMsl::KappaLackOfMotionResult::~KappaLackOfMotionResult(CMMsl::KappaLackOfMotionResult *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::KappaLackOfMotionResult::KappaLackOfMotionResult(uint64_t this, const CMMsl::KappaLackOfMotionResult *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  char v12;
  char v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  char v22;

  *(_QWORD *)this = &off_25135E908;
  *(_DWORD *)(this + 92) = 0;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x200) != 0)
  {
    v4 = *((_DWORD *)a2 + 15);
    v3 = 512;
    *(_DWORD *)(this + 92) = 512;
    *(_DWORD *)(this + 60) = v4;
    v2 = *((_DWORD *)a2 + 23);
    if ((v2 & 0x4000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x4000) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 20);
    v3 |= 0x4000u;
    *(_DWORD *)(this + 92) = v3;
    *(_DWORD *)(this + 80) = v5;
    v2 = *((_DWORD *)a2 + 23);
  }
LABEL_6:
  if ((v2 & 0x400) != 0)
  {
    v6 = *((_DWORD *)a2 + 16);
    v3 |= 0x400u;
    *(_DWORD *)(this + 92) = v3;
    *(_DWORD *)(this + 64) = v6;
    v2 = *((_DWORD *)a2 + 23);
    if ((v2 & 0x8000) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0)
        goto LABEL_9;
      goto LABEL_26;
    }
  }
  else if ((v2 & 0x8000) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 21);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 84) = v7;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 4) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0)
      goto LABEL_10;
    goto LABEL_27;
  }
LABEL_26:
  v8 = *((_QWORD *)a2 + 3);
  v3 |= 4u;
  *(_DWORD *)(this + 92) = v3;
  *(_QWORD *)(this + 24) = v8;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 8) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_28;
  }
LABEL_27:
  v9 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *(_DWORD *)(this + 92) = v3;
  *(_QWORD *)(this + 32) = v9;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x2000) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_29;
  }
LABEL_28:
  v10 = *((_DWORD *)a2 + 19);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 76) = v10;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x40000) == 0)
      goto LABEL_13;
    goto LABEL_30;
  }
LABEL_29:
  v11 = *((_DWORD *)a2 + 14);
  v3 |= 0x100u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 56) = v11;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x40000) == 0)
  {
LABEL_13:
    if ((v2 & 0x20000) == 0)
      goto LABEL_14;
    goto LABEL_31;
  }
LABEL_30:
  v12 = *((_BYTE *)a2 + 90);
  v3 |= 0x40000u;
  *(_DWORD *)(this + 92) = v3;
  *(_BYTE *)(this + 90) = v12;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x20000) == 0)
  {
LABEL_14:
    if ((v2 & 0x1000) == 0)
      goto LABEL_15;
    goto LABEL_32;
  }
LABEL_31:
  v13 = *((_BYTE *)a2 + 89);
  v3 |= 0x20000u;
  *(_DWORD *)(this + 92) = v3;
  *(_BYTE *)(this + 89) = v13;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x1000) == 0)
  {
LABEL_15:
    if ((v2 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_33;
  }
LABEL_32:
  v14 = *((_DWORD *)a2 + 18);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 72) = v14;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x800) == 0)
  {
LABEL_16:
    if ((v2 & 2) == 0)
      goto LABEL_17;
    goto LABEL_34;
  }
LABEL_33:
  v15 = *((_DWORD *)a2 + 17);
  v3 |= 0x800u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 68) = v15;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 2) == 0)
  {
LABEL_17:
    if ((v2 & 1) == 0)
      goto LABEL_18;
    goto LABEL_35;
  }
LABEL_34:
  v16 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_DWORD *)(this + 92) = v3;
  *(_QWORD *)(this + 16) = v16;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 1) == 0)
  {
LABEL_18:
    if ((v2 & 0x10) == 0)
      goto LABEL_19;
    goto LABEL_36;
  }
LABEL_35:
  v17 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_DWORD *)(this + 92) = v3;
  *(_QWORD *)(this + 8) = v17;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x10) == 0)
  {
LABEL_19:
    if ((v2 & 0x40) == 0)
      goto LABEL_20;
    goto LABEL_37;
  }
LABEL_36:
  v18 = *((_DWORD *)a2 + 10);
  v3 |= 0x10u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 40) = v18;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x40) == 0)
  {
LABEL_20:
    if ((v2 & 0x80) == 0)
      goto LABEL_21;
    goto LABEL_38;
  }
LABEL_37:
  v19 = *((_DWORD *)a2 + 12);
  v3 |= 0x40u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 48) = v19;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x80) == 0)
  {
LABEL_21:
    if ((v2 & 0x20) == 0)
      goto LABEL_22;
    goto LABEL_39;
  }
LABEL_38:
  v20 = *((_DWORD *)a2 + 13);
  v3 |= 0x80u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 52) = v20;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x20) == 0)
  {
LABEL_22:
    if ((v2 & 0x10000) == 0)
      return this;
LABEL_40:
    v22 = *((_BYTE *)a2 + 88);
    *(_DWORD *)(this + 92) = v3 | 0x10000;
    *(_BYTE *)(this + 88) = v22;
    return this;
  }
LABEL_39:
  v21 = *((_DWORD *)a2 + 11);
  v3 |= 0x20u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 44) = v21;
  if ((*((_DWORD *)a2 + 23) & 0x10000) != 0)
    goto LABEL_40;
  return this;
}

CMMsl *CMMsl::KappaLackOfMotionResult::operator=(CMMsl *a1, const CMMsl::KappaLackOfMotionResult *a2)
{
  CMMsl::KappaLackOfMotionResult *v3;
  _BYTE v5[96];

  if (a1 != a2)
  {
    CMMsl::KappaLackOfMotionResult::KappaLackOfMotionResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaLackOfMotionResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaLackOfMotionResult *a2, CMMsl::KappaLackOfMotionResult *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  float result;

  v3 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v3;
  v4 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  v5 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v5;
  v6 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v6;
  v7 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v7;
  v8 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v8;
  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v9;
  LODWORD(v9) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v9;
  LODWORD(v9) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v9;
  LOBYTE(v9) = *((_BYTE *)this + 90);
  *((_BYTE *)this + 90) = *((_BYTE *)a2 + 90);
  *((_BYTE *)a2 + 90) = v9;
  LOBYTE(v9) = *((_BYTE *)this + 89);
  *((_BYTE *)this + 89) = *((_BYTE *)a2 + 89);
  *((_BYTE *)a2 + 89) = v9;
  LODWORD(v9) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v9;
  LODWORD(v9) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v9;
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v10;
  v11 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v11;
  v12 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v12;
  v13 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v13;
  v14 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v14;
  result = *((float *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((float *)a2 + 11) = result;
  LOBYTE(v11) = *((_BYTE *)this + 88);
  *((_BYTE *)this + 88) = *((_BYTE *)a2 + 88);
  *((_BYTE *)a2 + 88) = v11;
  return result;
}

float CMMsl::KappaLackOfMotionResult::KappaLackOfMotionResult(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135E908;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a2 + 92) = 0;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 90) = *(_BYTE *)(a2 + 90);
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  result = *(float *)(a2 + 44);
  *(float *)(a1 + 44) = result;
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  return result;
}

CMMsl *CMMsl::KappaLackOfMotionResult::operator=(CMMsl *this, uint64_t a2, CMMsl::KappaLackOfMotionResult *a3)
{
  void (**v5)(CMMsl::KappaLackOfMotionResult *__hidden);
  __int128 v6;
  __int128 v7;
  __int128 v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  __int16 v15;
  int v16;

  if (this != (CMMsl *)a2)
  {
    v5 = &off_25135E908;
    v16 = *(_DWORD *)(a2 + 92);
    *(_DWORD *)(a2 + 92) = 0;
    v10 = *(_QWORD *)(a2 + 60);
    v13 = *(_QWORD *)(a2 + 80);
    v7 = *(_OWORD *)(a2 + 24);
    v12 = *(_DWORD *)(a2 + 76);
    v9 = *(_DWORD *)(a2 + 56);
    v15 = *(_WORD *)(a2 + 89);
    v11 = *(_QWORD *)(a2 + 68);
    v6 = *(_OWORD *)(a2 + 8);
    v8 = *(_OWORD *)(a2 + 40);
    v14 = *(_BYTE *)(a2 + 88);
    CMMsl::swap(this, (CMMsl::KappaLackOfMotionResult *)&v5, a3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return this;
}

uint64_t CMMsl::KappaLackOfMotionResult::formatText(CMMsl::KappaLackOfMotionResult *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "gpsDeltaTimestamp");
    v5 = *((_DWORD *)this + 23);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_24;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "gpsDeltaTimestampSeconds", *((float *)this + 10));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "gpsIsRealSample", *((float *)this + 11));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "gpsSpeedMetersPerSecond", *((float *)this + 12));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 2) == 0)
      goto LABEL_7;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "gpsSpeedMilesPerHour", *((float *)this + 13));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 2) == 0)
  {
LABEL_7:
    if ((v5 & 0x10000) == 0)
      goto LABEL_8;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "gpsTimestamp");
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x10000) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "loggedAtEpoch");
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x20000) == 0)
      goto LABEL_10;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "movingGpsCount");
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x20000) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "movingGpsCountResetRequired");
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "movingSpeedMetersPerSecondThreshold", *((float *)this + 15));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "movingSpeedMetersPerSecondThresholdFromSydneyB", *((float *)this + 16));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "numLowOrFakeSamplesInHistory");
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "numSamplesInHistory");
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x40000) == 0)
      goto LABEL_16;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "staticGpsCount");
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x40000) == 0)
  {
LABEL_16:
    if ((v5 & 0x4000) == 0)
      goto LABEL_17;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "staticGpsCountResetRequired");
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x4000) == 0)
  {
LABEL_17:
    if ((v5 & 0x8000) == 0)
      goto LABEL_18;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "staticSpeedMetersPerSecondThreshold", *((float *)this + 20));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x8000) == 0)
  {
LABEL_18:
    if ((v5 & 4) == 0)
      goto LABEL_19;
LABEL_39:
    PB::TextFormatter::format(a2, "timestamp");
    if ((*((_DWORD *)this + 23) & 8) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_20;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "staticSpeedMetersPerSecondThresholdFromSydneyB", *((float *)this + 21));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 4) != 0)
    goto LABEL_39;
LABEL_19:
  if ((v5 & 8) != 0)
LABEL_20:
    PB::TextFormatter::format(a2, "triggerTimestamp");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaLackOfMotionResult::readFrom(CMMsl::KappaLackOfMotionResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  int v39;
  BOOL v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  char v58;
  int v59;
  BOOL v60;
  int v61;
  BOOL v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  char v68;
  unint64_t v69;
  uint64_t v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  unint64_t v77;
  char v78;
  char v79;
  unsigned int v80;
  unint64_t v81;
  char v82;
  char v83;
  unsigned int v84;
  unint64_t v85;
  char v86;
  char v87;
  unsigned int v88;
  unint64_t v89;
  char v90;
  char v91;
  unsigned int v92;
  unint64_t v93;
  char v94;
  char v95;
  unsigned int v96;
  unint64_t v97;
  char v98;
  char v99;
  unsigned int v100;
  unint64_t v101;
  char v102;
  char v103;
  unsigned int v104;
  unint64_t v105;
  char v106;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_216;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    v20 = v11 >> 3;
    switch((v11 >> 3))
    {
      case 'e':
        *((_DWORD *)this + 23) |= 4u;
        v27 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v28 = *(_QWORD *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v79 = 0;
          v80 = 0;
          v31 = 0;
          if (v2 <= v27)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v27)
            {
              v31 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_185;
            }
            v81 = v27++;
            v82 = *(_BYTE *)(v28 + v81);
            *((_QWORD *)a2 + 1) = v27;
            v31 |= (unint64_t)(v82 & 0x7F) << v79;
            if ((v82 & 0x80) == 0)
              break;
            v79 += 7;
            v14 = v80++ > 8;
            if (v14)
            {
              v31 = 0;
LABEL_184:
              v2 = v81 + 1;
              goto LABEL_185;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v31 = 0;
          goto LABEL_184;
        }
        v29 = 0;
        v30 = 0;
        v31 = 0;
        do
        {
          v2 = v27 + 1;
          *((_QWORD *)a2 + 1) = v27 + 1;
          v32 = *(_BYTE *)(v28 + v27);
          v31 |= (unint64_t)(v32 & 0x7F) << v29;
          if ((v32 & 0x80) == 0)
            goto LABEL_185;
          v29 += 7;
          v27 = v2;
          v14 = v30++ > 8;
        }
        while (!v14);
        v31 = 0;
LABEL_185:
        *((_QWORD *)this + 3) = v31;
        break;
      case 'f':
        *((_DWORD *)this + 23) |= 8u;
        v41 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v42 = *(_QWORD *)a2;
        if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
        {
          v87 = 0;
          v88 = 0;
          v45 = 0;
          if (v2 <= v41)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v41)
            {
              v45 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_195;
            }
            v89 = v41++;
            v90 = *(_BYTE *)(v42 + v89);
            *((_QWORD *)a2 + 1) = v41;
            v45 |= (unint64_t)(v90 & 0x7F) << v87;
            if ((v90 & 0x80) == 0)
              break;
            v87 += 7;
            v14 = v88++ > 8;
            if (v14)
            {
              v45 = 0;
LABEL_194:
              v2 = v89 + 1;
              goto LABEL_195;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v45 = 0;
          goto LABEL_194;
        }
        v43 = 0;
        v44 = 0;
        v45 = 0;
        do
        {
          v2 = v41 + 1;
          *((_QWORD *)a2 + 1) = v41 + 1;
          v46 = *(_BYTE *)(v42 + v41);
          v45 |= (unint64_t)(v46 & 0x7F) << v43;
          if ((v46 & 0x80) == 0)
            goto LABEL_195;
          v43 += 7;
          v41 = v2;
          v14 = v44++ > 8;
        }
        while (!v14);
        v45 = 0;
LABEL_195:
        *((_QWORD *)this + 4) = v45;
        break;
      case 'g':
        *((_DWORD *)this + 23) |= 0x2000u;
        v47 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v48 = *(_QWORD *)a2;
        if (v47 > 0xFFFFFFFFFFFFFFF5 || v47 + 10 > v2)
        {
          v91 = 0;
          v92 = 0;
          v51 = 0;
          if (v2 <= v47)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v47)
            {
              LODWORD(v51) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_200;
            }
            v93 = v47++;
            v94 = *(_BYTE *)(v48 + v93);
            *((_QWORD *)a2 + 1) = v47;
            v51 |= (unint64_t)(v94 & 0x7F) << v91;
            if ((v94 & 0x80) == 0)
              break;
            v91 += 7;
            v14 = v92++ > 8;
            if (v14)
            {
              LODWORD(v51) = 0;
LABEL_199:
              v2 = v93 + 1;
              goto LABEL_200;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v51) = 0;
          goto LABEL_199;
        }
        v49 = 0;
        v50 = 0;
        v51 = 0;
        do
        {
          v2 = v47 + 1;
          *((_QWORD *)a2 + 1) = v47 + 1;
          v52 = *(_BYTE *)(v48 + v47);
          v51 |= (unint64_t)(v52 & 0x7F) << v49;
          if ((v52 & 0x80) == 0)
            goto LABEL_200;
          v49 += 7;
          v47 = v2;
          v14 = v50++ > 8;
        }
        while (!v14);
        LODWORD(v51) = 0;
LABEL_200:
        *((_DWORD *)this + 19) = v51;
        break;
      case 'h':
        *((_DWORD *)this + 23) |= 0x100u;
        v53 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v54 = *(_QWORD *)a2;
        if (v53 > 0xFFFFFFFFFFFFFFF5 || v53 + 10 > v2)
        {
          v95 = 0;
          v96 = 0;
          v57 = 0;
          if (v2 <= v53)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v53)
            {
              LODWORD(v57) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_205;
            }
            v97 = v53++;
            v98 = *(_BYTE *)(v54 + v97);
            *((_QWORD *)a2 + 1) = v53;
            v57 |= (unint64_t)(v98 & 0x7F) << v95;
            if ((v98 & 0x80) == 0)
              break;
            v95 += 7;
            v14 = v96++ > 8;
            if (v14)
            {
              LODWORD(v57) = 0;
LABEL_204:
              v2 = v97 + 1;
              goto LABEL_205;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v57) = 0;
          goto LABEL_204;
        }
        v55 = 0;
        v56 = 0;
        v57 = 0;
        do
        {
          v2 = v53 + 1;
          *((_QWORD *)a2 + 1) = v53 + 1;
          v58 = *(_BYTE *)(v54 + v53);
          v57 |= (unint64_t)(v58 & 0x7F) << v55;
          if ((v58 & 0x80) == 0)
            goto LABEL_205;
          v55 += 7;
          v53 = v2;
          v14 = v56++ > 8;
        }
        while (!v14);
        LODWORD(v57) = 0;
LABEL_205:
        *((_DWORD *)this + 14) = v57;
        break;
      case 'i':
        *((_DWORD *)this + 23) |= 0x40000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v60 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v59 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v60 = v59 != 0;
        }
        *((_BYTE *)this + 90) = v60;
        break;
      case 'j':
        *((_DWORD *)this + 23) |= 0x20000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v62 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v61 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v62 = v61 != 0;
        }
        *((_BYTE *)this + 89) = v62;
        break;
      case 'k':
        *((_DWORD *)this + 23) |= 0x1000u;
        v63 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v64 = *(_QWORD *)a2;
        if (v63 > 0xFFFFFFFFFFFFFFF5 || v63 + 10 > v2)
        {
          v99 = 0;
          v100 = 0;
          v67 = 0;
          if (v2 <= v63)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v63)
            {
              LODWORD(v67) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_210;
            }
            v101 = v63++;
            v102 = *(_BYTE *)(v64 + v101);
            *((_QWORD *)a2 + 1) = v63;
            v67 |= (unint64_t)(v102 & 0x7F) << v99;
            if ((v102 & 0x80) == 0)
              break;
            v99 += 7;
            v14 = v100++ > 8;
            if (v14)
            {
              LODWORD(v67) = 0;
LABEL_209:
              v2 = v101 + 1;
              goto LABEL_210;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v67) = 0;
          goto LABEL_209;
        }
        v65 = 0;
        v66 = 0;
        v67 = 0;
        do
        {
          v2 = v63 + 1;
          *((_QWORD *)a2 + 1) = v63 + 1;
          v68 = *(_BYTE *)(v64 + v63);
          v67 |= (unint64_t)(v68 & 0x7F) << v65;
          if ((v68 & 0x80) == 0)
            goto LABEL_210;
          v65 += 7;
          v63 = v2;
          v14 = v66++ > 8;
        }
        while (!v14);
        LODWORD(v67) = 0;
LABEL_210:
        *((_DWORD *)this + 18) = v67;
        break;
      case 'l':
        *((_DWORD *)this + 23) |= 0x800u;
        v69 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v70 = *(_QWORD *)a2;
        if (v69 > 0xFFFFFFFFFFFFFFF5 || v69 + 10 > v2)
        {
          v103 = 0;
          v104 = 0;
          v73 = 0;
          if (v2 <= v69)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v69)
            {
              LODWORD(v73) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_215;
            }
            v105 = v69++;
            v106 = *(_BYTE *)(v70 + v105);
            *((_QWORD *)a2 + 1) = v69;
            v73 |= (unint64_t)(v106 & 0x7F) << v103;
            if ((v106 & 0x80) == 0)
              break;
            v103 += 7;
            v14 = v104++ > 8;
            if (v14)
            {
              LODWORD(v73) = 0;
LABEL_214:
              v2 = v105 + 1;
              goto LABEL_215;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v73) = 0;
          goto LABEL_214;
        }
        v71 = 0;
        v72 = 0;
        v73 = 0;
        do
        {
          v2 = v69 + 1;
          *((_QWORD *)a2 + 1) = v69 + 1;
          v74 = *(_BYTE *)(v70 + v69);
          v73 |= (unint64_t)(v74 & 0x7F) << v71;
          if ((v74 & 0x80) == 0)
            goto LABEL_215;
          v71 += 7;
          v69 = v2;
          v14 = v72++ > 8;
        }
        while (!v14);
        LODWORD(v73) = 0;
LABEL_215:
        *((_DWORD *)this + 17) = v73;
        break;
      default:
        switch((int)v20)
        {
          case 201:
            *((_DWORD *)this + 23) |= 2u;
            v21 = *((_QWORD *)a2 + 1);
            v2 = *((_QWORD *)a2 + 2);
            v22 = *(_QWORD *)a2;
            if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
            {
              v75 = 0;
              v76 = 0;
              v25 = 0;
              if (v2 <= v21)
                v2 = *((_QWORD *)a2 + 1);
              while (1)
              {
                if (v2 == v21)
                {
                  v25 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                  goto LABEL_180;
                }
                v77 = v21++;
                v78 = *(_BYTE *)(v22 + v77);
                *((_QWORD *)a2 + 1) = v21;
                v25 |= (unint64_t)(v78 & 0x7F) << v75;
                if ((v78 & 0x80) == 0)
                  break;
                v75 += 7;
                v14 = v76++ > 8;
                if (v14)
                {
                  v25 = 0;
LABEL_179:
                  v2 = v77 + 1;
                  goto LABEL_180;
                }
              }
              if (*((_BYTE *)a2 + 24))
                v25 = 0;
              goto LABEL_179;
            }
            v23 = 0;
            v24 = 0;
            v25 = 0;
            do
            {
              v2 = v21 + 1;
              *((_QWORD *)a2 + 1) = v21 + 1;
              v26 = *(_BYTE *)(v22 + v21);
              v25 |= (unint64_t)(v26 & 0x7F) << v23;
              if ((v26 & 0x80) == 0)
                goto LABEL_180;
              v23 += 7;
              v21 = v2;
              v14 = v24++ > 8;
            }
            while (!v14);
            v25 = 0;
LABEL_180:
            *((_QWORD *)this + 2) = v25;
            goto LABEL_216;
          case 202:
            *((_DWORD *)this + 23) |= 1u;
            v33 = *((_QWORD *)a2 + 1);
            v2 = *((_QWORD *)a2 + 2);
            v34 = *(_QWORD *)a2;
            if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
            {
              v83 = 0;
              v84 = 0;
              v37 = 0;
              if (v2 <= v33)
                v2 = *((_QWORD *)a2 + 1);
              while (1)
              {
                if (v2 == v33)
                {
                  v37 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                  goto LABEL_190;
                }
                v85 = v33++;
                v86 = *(_BYTE *)(v34 + v85);
                *((_QWORD *)a2 + 1) = v33;
                v37 |= (unint64_t)(v86 & 0x7F) << v83;
                if ((v86 & 0x80) == 0)
                  break;
                v83 += 7;
                v14 = v84++ > 8;
                if (v14)
                {
                  v37 = 0;
LABEL_189:
                  v2 = v85 + 1;
                  goto LABEL_190;
                }
              }
              if (*((_BYTE *)a2 + 24))
                v37 = 0;
              goto LABEL_189;
            }
            v35 = 0;
            v36 = 0;
            v37 = 0;
            do
            {
              v2 = v33 + 1;
              *((_QWORD *)a2 + 1) = v33 + 1;
              v38 = *(_BYTE *)(v34 + v33);
              v37 |= (unint64_t)(v38 & 0x7F) << v35;
              if ((v38 & 0x80) == 0)
                goto LABEL_190;
              v35 += 7;
              v33 = v2;
              v14 = v36++ > 8;
            }
            while (!v14);
            v37 = 0;
LABEL_190:
            *((_QWORD *)this + 1) = v37;
            break;
          case 203:
            *((_DWORD *)this + 23) |= 0x10u;
            v2 = *((_QWORD *)a2 + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_111;
            *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
            goto LABEL_175;
          case 204:
            *((_DWORD *)this + 23) |= 0x40u;
            v2 = *((_QWORD *)a2 + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_111;
            *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
            goto LABEL_175;
          case 205:
            *((_DWORD *)this + 23) |= 0x80u;
            v2 = *((_QWORD *)a2 + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_111;
            *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
            goto LABEL_175;
          case 206:
            *((_DWORD *)this + 23) |= 0x20u;
            v2 = *((_QWORD *)a2 + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            {
LABEL_111:
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_175:
              v2 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v2;
            }
            goto LABEL_216;
          case 207:
            *((_DWORD *)this + 23) |= 0x10000u;
            v2 = *((_QWORD *)a2 + 1);
            if (v2 >= *((_QWORD *)a2 + 2))
            {
              v40 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v39 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
              *((_QWORD *)a2 + 1) = v2;
              v40 = v39 != 0;
            }
            *((_BYTE *)this + 88) = v40;
            goto LABEL_216;
          default:
            switch((int)v20)
            {
              case 1:
                *((_DWORD *)this + 23) |= 0x200u;
                v2 = *((_QWORD *)a2 + 1);
                if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_111;
                *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v2);
                break;
              case 2:
                *((_DWORD *)this + 23) |= 0x4000u;
                v2 = *((_QWORD *)a2 + 1);
                if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_111;
                *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v2);
                break;
              case 3:
                *((_DWORD *)this + 23) |= 0x400u;
                v2 = *((_QWORD *)a2 + 1);
                if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_111;
                *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v2);
                break;
              case 4:
                *((_DWORD *)this + 23) |= 0x8000u;
                v2 = *((_QWORD *)a2 + 1);
                if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_111;
                *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v2);
                break;
              default:
                goto LABEL_19;
            }
            goto LABEL_175;
        }
        break;
    }
LABEL_216:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::KappaLackOfMotionResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 92);
  if ((v4 & 0x200) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 60));
    v4 = *(_DWORD *)(v3 + 92);
    if ((v4 & 0x4000) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0)
        goto LABEL_4;
      goto LABEL_23;
    }
  }
  else if ((v4 & 0x4000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 0x8000) == 0)
      goto LABEL_5;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x8000) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      goto LABEL_6;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 84));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0)
      goto LABEL_7;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0)
      goto LABEL_8;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x40000) == 0)
      goto LABEL_10;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x40000) == 0)
  {
LABEL_10:
    if ((v4 & 0x20000) == 0)
      goto LABEL_11;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x20000) == 0)
  {
LABEL_11:
    if ((v4 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x1000) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x800) == 0)
  {
LABEL_13:
    if ((v4 & 2) == 0)
      goto LABEL_14;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 2) == 0)
  {
LABEL_14:
    if ((v4 & 1) == 0)
      goto LABEL_15;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 1) == 0)
  {
LABEL_15:
    if ((v4 & 0x10) == 0)
      goto LABEL_16;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x10) == 0)
  {
LABEL_16:
    if ((v4 & 0x40) == 0)
      goto LABEL_17;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x40) == 0)
  {
LABEL_17:
    if ((v4 & 0x80) == 0)
      goto LABEL_18;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x80) == 0)
  {
LABEL_18:
    if ((v4 & 0x20) == 0)
      goto LABEL_19;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x20) == 0)
  {
LABEL_19:
    if ((v4 & 0x10000) == 0)
      return this;
    return PB::Writer::write(a2);
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  if ((*(_DWORD *)(v3 + 92) & 0x10000) != 0)
    return PB::Writer::write(a2);
  return this;
}

uint64_t CMMsl::KappaLackOfMotionResult::hash_value(CMMsl::KappaLackOfMotionResult *this)
{
  int v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  float v28;

  v1 = *((_DWORD *)this + 23);
  if ((v1 & 0x200) == 0)
  {
    v2 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_3;
LABEL_38:
    v4 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_6;
LABEL_39:
    v6 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_9;
LABEL_40:
    v8 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_12;
    goto LABEL_41;
  }
  v28 = *((float *)this + 15);
  v2 = LODWORD(v28);
  if (v28 == 0.0)
    v2 = 0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_38;
LABEL_3:
  v3 = *((float *)this + 20);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  if ((v1 & 0x400) == 0)
    goto LABEL_39;
LABEL_6:
  v5 = *((float *)this + 16);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((v1 & 0x8000) == 0)
    goto LABEL_40;
LABEL_9:
  v7 = *((float *)this + 21);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_12:
    v9 = *((_QWORD *)this + 3);
    if ((v1 & 8) != 0)
      goto LABEL_13;
    goto LABEL_42;
  }
LABEL_41:
  v9 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_13:
    v10 = *((_QWORD *)this + 4);
    if ((v1 & 0x2000) != 0)
      goto LABEL_14;
    goto LABEL_43;
  }
LABEL_42:
  v10 = 0;
  if ((v1 & 0x2000) != 0)
  {
LABEL_14:
    v11 = *((int *)this + 19);
    if ((v1 & 0x100) != 0)
      goto LABEL_15;
    goto LABEL_44;
  }
LABEL_43:
  v11 = 0;
  if ((v1 & 0x100) != 0)
  {
LABEL_15:
    v12 = *((int *)this + 14);
    if ((v1 & 0x40000) != 0)
      goto LABEL_16;
    goto LABEL_45;
  }
LABEL_44:
  v12 = 0;
  if ((v1 & 0x40000) != 0)
  {
LABEL_16:
    v13 = *((unsigned __int8 *)this + 90);
    if ((v1 & 0x20000) != 0)
      goto LABEL_17;
    goto LABEL_46;
  }
LABEL_45:
  v13 = 0;
  if ((v1 & 0x20000) != 0)
  {
LABEL_17:
    v14 = *((unsigned __int8 *)this + 89);
    if ((v1 & 0x1000) != 0)
      goto LABEL_18;
    goto LABEL_47;
  }
LABEL_46:
  v14 = 0;
  if ((v1 & 0x1000) != 0)
  {
LABEL_18:
    v15 = *((int *)this + 18);
    if ((v1 & 0x800) != 0)
      goto LABEL_19;
    goto LABEL_48;
  }
LABEL_47:
  v15 = 0;
  if ((v1 & 0x800) != 0)
  {
LABEL_19:
    v16 = *((int *)this + 17);
    if ((v1 & 2) != 0)
      goto LABEL_20;
    goto LABEL_49;
  }
LABEL_48:
  v16 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_20:
    v17 = *((_QWORD *)this + 2);
    if ((v1 & 1) != 0)
      goto LABEL_21;
    goto LABEL_50;
  }
LABEL_49:
  v17 = 0;
  if ((v1 & 1) != 0)
  {
LABEL_21:
    v18 = *((_QWORD *)this + 1);
    if ((v1 & 0x10) != 0)
      goto LABEL_22;
LABEL_51:
    v20 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_25;
LABEL_52:
    v22 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_28;
LABEL_53:
    v24 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_31;
    goto LABEL_54;
  }
LABEL_50:
  v18 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_51;
LABEL_22:
  v19 = *((float *)this + 10);
  v20 = LODWORD(v19);
  if (v19 == 0.0)
    v20 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_52;
LABEL_25:
  v21 = *((float *)this + 12);
  v22 = LODWORD(v21);
  if (v21 == 0.0)
    v22 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_53;
LABEL_28:
  v23 = *((float *)this + 13);
  v24 = LODWORD(v23);
  if (v23 == 0.0)
    v24 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_31:
    v25 = *((float *)this + 11);
    v26 = LODWORD(v25);
    if (v25 == 0.0)
      v26 = 0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_34;
LABEL_55:
    v27 = 0;
    return v4 ^ v2 ^ v6 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v27;
  }
LABEL_54:
  v26 = 0;
  if ((v1 & 0x10000) == 0)
    goto LABEL_55;
LABEL_34:
  v27 = *((unsigned __int8 *)this + 88);
  return v4 ^ v2 ^ v6 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v27;
}

void CMMsl::KappaLocalAudioResult::~KappaLocalAudioResult(CMMsl::KappaLocalAudioResult *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::KappaLocalAudioResult::KappaLocalAudioResult(CMMsl::KappaLocalAudioResult *this, const CMMsl::KappaLocalAudioResult *a2)
{
  uint64_t v2;
  uint64_t v3;
  float result;
  int v5;
  int v6;
  int v7;
  int v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)this = &off_25135E940;
  *(_QWORD *)((char *)this + 172) = 0;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x20000000) != 0)
  {
    result = *((float *)a2 + 35);
    v3 = 0x20000000;
    *(_QWORD *)((char *)this + 172) = 0x20000000;
    *((float *)this + 35) = result;
    v2 = *(_QWORD *)((char *)a2 + 172);
    if ((v2 & 0x8000000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x8000000) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 33);
    v3 |= 0x8000000uLL;
    *(_QWORD *)((char *)this + 172) = v3;
    *((float *)this + 33) = result;
    v2 = *(_QWORD *)((char *)a2 + 172);
  }
LABEL_6:
  if ((v2 & 0x2000000) != 0)
  {
    result = *((float *)a2 + 31);
    v3 |= 0x2000000uLL;
    *(_QWORD *)((char *)this + 172) = v3;
    *((float *)this + 31) = result;
    v2 = *(_QWORD *)((char *)a2 + 172);
    if ((v2 & 0x80000000) == 0)
    {
LABEL_8:
      if ((v2 & 0x100000) == 0)
        goto LABEL_9;
      goto LABEL_53;
    }
  }
  else if ((v2 & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  result = *((float *)a2 + 37);
  v3 |= 0x80000000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((float *)this + 37) = result;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x100000) == 0)
  {
LABEL_9:
    if ((v2 & 0x80000) == 0)
      goto LABEL_10;
    goto LABEL_54;
  }
LABEL_53:
  v5 = *((_DWORD *)a2 + 26);
  v3 |= 0x100000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((_DWORD *)this + 26) = v5;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x80000) == 0)
  {
LABEL_10:
    if ((v2 & 0x800000) == 0)
      goto LABEL_11;
    goto LABEL_55;
  }
LABEL_54:
  v6 = *((_DWORD *)a2 + 25);
  v3 |= 0x80000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((_DWORD *)this + 25) = v6;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x800000) == 0)
  {
LABEL_11:
    if ((v2 & 0x40000000) == 0)
      goto LABEL_12;
    goto LABEL_56;
  }
LABEL_55:
  result = *((float *)a2 + 29);
  v3 |= 0x800000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((float *)this + 29) = result;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_12:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_13;
    goto LABEL_57;
  }
LABEL_56:
  result = *((float *)a2 + 36);
  v3 |= 0x40000000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((float *)this + 36) = result;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_13:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_14;
    goto LABEL_58;
  }
LABEL_57:
  result = *((float *)a2 + 34);
  v3 |= 0x10000000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((float *)this + 34) = result;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_14:
    if ((v2 & 0x100000000) == 0)
      goto LABEL_15;
    goto LABEL_59;
  }
LABEL_58:
  result = *((float *)a2 + 32);
  v3 |= 0x4000000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((float *)this + 32) = result;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x100000000) == 0)
  {
LABEL_15:
    if ((v2 & 0x200000) == 0)
      goto LABEL_16;
    goto LABEL_60;
  }
LABEL_59:
  result = *((float *)a2 + 38);
  v3 |= 0x100000000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((float *)this + 38) = result;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x200000) == 0)
  {
LABEL_16:
    if ((v2 & 0x400000) == 0)
      goto LABEL_17;
    goto LABEL_61;
  }
LABEL_60:
  v7 = *((_DWORD *)a2 + 27);
  v3 |= 0x200000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((_DWORD *)this + 27) = v7;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x400000) == 0)
  {
LABEL_17:
    if ((v2 & 0x40000000000) == 0)
      goto LABEL_18;
    goto LABEL_62;
  }
LABEL_61:
  v8 = *((_DWORD *)a2 + 28);
  v3 |= 0x400000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((_DWORD *)this + 28) = v8;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x40000000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x10000) == 0)
      goto LABEL_19;
    goto LABEL_63;
  }
LABEL_62:
  v9 = *((_BYTE *)a2 + 165);
  v3 |= 0x40000000000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((_BYTE *)this + 165) = v9;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x10000) == 0)
  {
LABEL_19:
    if ((v2 & 0x4000) == 0)
      goto LABEL_20;
    goto LABEL_64;
  }
LABEL_63:
  result = *((float *)a2 + 22);
  v3 |= 0x10000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((float *)this + 22) = result;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x4000) == 0)
  {
LABEL_20:
    if ((v2 & 0x1000) == 0)
      goto LABEL_21;
    goto LABEL_65;
  }
LABEL_64:
  result = *((float *)a2 + 20);
  v3 |= 0x4000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((float *)this + 20) = result;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x1000) == 0)
  {
LABEL_21:
    if ((v2 & 0x20000) == 0)
      goto LABEL_22;
    goto LABEL_66;
  }
LABEL_65:
  result = *((float *)a2 + 18);
  v3 |= 0x1000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((float *)this + 18) = result;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x20000) == 0)
  {
LABEL_22:
    if ((v2 & 0x10000000000) == 0)
      goto LABEL_23;
    goto LABEL_67;
  }
LABEL_66:
  result = *((float *)a2 + 23);
  v3 |= 0x20000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((float *)this + 23) = result;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x10000000000) == 0)
  {
LABEL_23:
    if ((v2 & 0x200000000) == 0)
      goto LABEL_24;
    goto LABEL_68;
  }
LABEL_67:
  v10 = *((_BYTE *)a2 + 163);
  v3 |= 0x10000000000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((_BYTE *)this + 163) = v10;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_24:
    if ((v2 & 0x100000000000) == 0)
      goto LABEL_25;
    goto LABEL_69;
  }
LABEL_68:
  v11 = *((_BYTE *)a2 + 156);
  v3 |= 0x200000000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((_BYTE *)this + 156) = v11;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x100000000000) == 0)
  {
LABEL_25:
    if ((v2 & 0x800000000) == 0)
      goto LABEL_26;
    goto LABEL_70;
  }
LABEL_69:
  v12 = *((_BYTE *)a2 + 167);
  v3 |= 0x100000000000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((_BYTE *)this + 167) = v12;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x800000000) == 0)
  {
LABEL_26:
    if ((v2 & 0x4000000000) == 0)
      goto LABEL_27;
    goto LABEL_71;
  }
LABEL_70:
  v13 = *((_BYTE *)a2 + 158);
  v3 |= 0x800000000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((_BYTE *)this + 158) = v13;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x4000000000) == 0)
  {
LABEL_27:
    if ((v2 & 0x80000000000) == 0)
      goto LABEL_28;
    goto LABEL_72;
  }
LABEL_71:
  v14 = *((_BYTE *)a2 + 161);
  v3 |= 0x4000000000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((_BYTE *)this + 161) = v14;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x80000000000) == 0)
  {
LABEL_28:
    if ((v2 & 0x8000) == 0)
      goto LABEL_29;
    goto LABEL_73;
  }
LABEL_72:
  v15 = *((_BYTE *)a2 + 166);
  v3 |= 0x80000000000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((_BYTE *)this + 166) = v15;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x8000) == 0)
  {
LABEL_29:
    if ((v2 & 0x2000) == 0)
      goto LABEL_30;
    goto LABEL_74;
  }
LABEL_73:
  result = *((float *)a2 + 21);
  v3 |= 0x8000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((float *)this + 21) = result;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x2000) == 0)
  {
LABEL_30:
    if ((v2 & 0x40000) == 0)
      goto LABEL_31;
    goto LABEL_75;
  }
LABEL_74:
  result = *((float *)a2 + 19);
  v3 |= 0x2000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((float *)this + 19) = result;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x40000) == 0)
  {
LABEL_31:
    if ((v2 & 0x20000000000) == 0)
      goto LABEL_32;
    goto LABEL_76;
  }
LABEL_75:
  result = *((float *)a2 + 24);
  v3 |= 0x40000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((float *)this + 24) = result;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x20000000000) == 0)
  {
LABEL_32:
    if ((v2 & 0x400000000) == 0)
      goto LABEL_33;
    goto LABEL_77;
  }
LABEL_76:
  v16 = *((_BYTE *)a2 + 164);
  v3 |= 0x20000000000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((_BYTE *)this + 164) = v16;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_33:
    if ((v2 & 0x200000000000) == 0)
      goto LABEL_34;
    goto LABEL_78;
  }
LABEL_77:
  v17 = *((_BYTE *)a2 + 157);
  v3 |= 0x400000000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((_BYTE *)this + 157) = v17;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x200000000000) == 0)
  {
LABEL_34:
    if ((v2 & 0x1000000000) == 0)
      goto LABEL_35;
    goto LABEL_79;
  }
LABEL_78:
  v18 = *((_BYTE *)a2 + 168);
  v3 |= 0x200000000000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((_BYTE *)this + 168) = v18;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x1000000000) == 0)
  {
LABEL_35:
    if ((v2 & 0x8000000000) == 0)
      goto LABEL_36;
    goto LABEL_80;
  }
LABEL_79:
  v19 = *((_BYTE *)a2 + 159);
  v3 |= 0x1000000000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((_BYTE *)this + 159) = v19;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x8000000000) == 0)
  {
LABEL_36:
    if ((v2 & 0x2000000000) == 0)
      goto LABEL_37;
    goto LABEL_81;
  }
LABEL_80:
  v20 = *((_BYTE *)a2 + 162);
  v3 |= 0x8000000000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((_BYTE *)this + 162) = v20;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x2000000000) == 0)
  {
LABEL_37:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_38;
    goto LABEL_82;
  }
LABEL_81:
  v21 = *((_BYTE *)a2 + 160);
  v3 |= 0x2000000000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((_BYTE *)this + 160) = v21;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_38:
    if ((v2 & 4) == 0)
      goto LABEL_39;
    goto LABEL_83;
  }
LABEL_82:
  v22 = *((_DWORD *)a2 + 30);
  v3 |= 0x1000000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((_DWORD *)this + 30) = v22;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 4) == 0)
  {
LABEL_39:
    if ((v2 & 8) == 0)
      goto LABEL_40;
    goto LABEL_84;
  }
LABEL_83:
  v23 = *((_QWORD *)a2 + 3);
  v3 |= 4uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((_QWORD *)this + 3) = v23;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 8) == 0)
  {
LABEL_40:
    if ((v2 & 0x10) == 0)
      goto LABEL_41;
    goto LABEL_85;
  }
LABEL_84:
  v24 = *((_QWORD *)a2 + 4);
  v3 |= 8uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((_QWORD *)this + 4) = v24;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x10) == 0)
  {
LABEL_41:
    if ((v2 & 0x80) == 0)
      goto LABEL_42;
    goto LABEL_86;
  }
LABEL_85:
  result = *((float *)a2 + 10);
  v3 |= 0x10uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((float *)this + 10) = result;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x80) == 0)
  {
LABEL_42:
    if ((v2 & 0x100) == 0)
      goto LABEL_43;
    goto LABEL_87;
  }
LABEL_86:
  result = *((float *)a2 + 13);
  v3 |= 0x80uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((float *)this + 13) = result;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x100) == 0)
  {
LABEL_43:
    if ((v2 & 0x800) == 0)
      goto LABEL_44;
    goto LABEL_88;
  }
LABEL_87:
  result = *((float *)a2 + 14);
  v3 |= 0x100uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((float *)this + 14) = result;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x800) == 0)
  {
LABEL_44:
    if ((v2 & 1) == 0)
      goto LABEL_45;
    goto LABEL_89;
  }
LABEL_88:
  result = *((float *)a2 + 17);
  v3 |= 0x800uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((float *)this + 17) = result;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 1) == 0)
  {
LABEL_45:
    if ((v2 & 2) == 0)
      goto LABEL_46;
    goto LABEL_90;
  }
LABEL_89:
  v25 = *((_QWORD *)a2 + 1);
  v3 |= 1uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((_QWORD *)this + 1) = v25;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 2) == 0)
  {
LABEL_46:
    if ((v2 & 0x20) == 0)
      goto LABEL_47;
    goto LABEL_91;
  }
LABEL_90:
  v26 = *((_QWORD *)a2 + 2);
  v3 |= 2uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((_QWORD *)this + 2) = v26;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x20) == 0)
  {
LABEL_47:
    if ((v2 & 0x40) == 0)
      goto LABEL_48;
    goto LABEL_92;
  }
LABEL_91:
  result = *((float *)a2 + 11);
  v3 |= 0x20uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((float *)this + 11) = result;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x40) == 0)
  {
LABEL_48:
    if ((v2 & 0x200) == 0)
      goto LABEL_49;
    goto LABEL_93;
  }
LABEL_92:
  result = *((float *)a2 + 12);
  v3 |= 0x40uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((float *)this + 12) = result;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x200) == 0)
  {
LABEL_49:
    if ((v2 & 0x400) == 0)
      return result;
LABEL_94:
    result = *((float *)a2 + 16);
    *(_QWORD *)((char *)this + 172) = v3 | 0x400;
    *((float *)this + 16) = result;
    return result;
  }
LABEL_93:
  result = *((float *)a2 + 15);
  v3 |= 0x200uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((float *)this + 15) = result;
  if ((*(_QWORD *)((_BYTE *)a2 + 172) & 0x400) != 0)
    goto LABEL_94;
  return result;
}

CMMsl *CMMsl::KappaLocalAudioResult::operator=(CMMsl *a1, const CMMsl::KappaLocalAudioResult *a2)
{
  CMMsl::KappaLocalAudioResult *v3;
  _BYTE v5[184];

  if (a1 != a2)
  {
    CMMsl::KappaLocalAudioResult::KappaLocalAudioResult((CMMsl::KappaLocalAudioResult *)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaLocalAudioResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaLocalAudioResult *a2, CMMsl::KappaLocalAudioResult *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  float result;

  v3 = *(_QWORD *)((char *)this + 172);
  *(_QWORD *)((char *)this + 172) = *(_QWORD *)((char *)a2 + 172);
  *(_QWORD *)((char *)a2 + 172) = v3;
  v4 = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v4;
  v5 = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v5;
  v6 = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v6;
  v7 = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v7;
  LODWORD(v3) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v3;
  LODWORD(v3) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v3;
  v8 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v8;
  v9 = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v9;
  v10 = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v10;
  v11 = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v11;
  v12 = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v12;
  LODWORD(v3) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v3;
  LODWORD(v3) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 165);
  *((_BYTE *)this + 165) = *((_BYTE *)a2 + 165);
  *((_BYTE *)a2 + 165) = v3;
  v13 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v13;
  v14 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v14;
  v15 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v15;
  v16 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v16;
  LOBYTE(v3) = *((_BYTE *)this + 163);
  *((_BYTE *)this + 163) = *((_BYTE *)a2 + 163);
  *((_BYTE *)a2 + 163) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 156);
  *((_BYTE *)this + 156) = *((_BYTE *)a2 + 156);
  *((_BYTE *)a2 + 156) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 167);
  *((_BYTE *)this + 167) = *((_BYTE *)a2 + 167);
  *((_BYTE *)a2 + 167) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 158);
  *((_BYTE *)this + 158) = *((_BYTE *)a2 + 158);
  *((_BYTE *)a2 + 158) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 161);
  *((_BYTE *)this + 161) = *((_BYTE *)a2 + 161);
  *((_BYTE *)a2 + 161) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 166);
  *((_BYTE *)this + 166) = *((_BYTE *)a2 + 166);
  *((_BYTE *)a2 + 166) = v3;
  v17 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v17;
  v18 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v18;
  v19 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v19;
  LOBYTE(v3) = *((_BYTE *)this + 164);
  *((_BYTE *)this + 164) = *((_BYTE *)a2 + 164);
  *((_BYTE *)a2 + 164) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 157);
  *((_BYTE *)this + 157) = *((_BYTE *)a2 + 157);
  *((_BYTE *)a2 + 157) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 168);
  *((_BYTE *)this + 168) = *((_BYTE *)a2 + 168);
  *((_BYTE *)a2 + 168) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 159);
  *((_BYTE *)this + 159) = *((_BYTE *)a2 + 159);
  *((_BYTE *)a2 + 159) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 162);
  *((_BYTE *)this + 162) = *((_BYTE *)a2 + 162);
  *((_BYTE *)a2 + 162) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 160);
  *((_BYTE *)this + 160) = *((_BYTE *)a2 + 160);
  *((_BYTE *)a2 + 160) = v3;
  LODWORD(v3) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v3;
  v20 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v20;
  v21 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v21;
  v22 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v22;
  v23 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v23;
  v24 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v24;
  v25 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v25;
  v26 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v26;
  v27 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v27;
  v28 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v28;
  v29 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v29;
  v30 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v30;
  result = *((float *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((float *)a2 + 16) = result;
  return result;
}

float CMMsl::KappaLocalAudioResult::KappaLocalAudioResult(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135E940;
  *(_QWORD *)(a1 + 172) = *(_QWORD *)(a2 + 172);
  *(_QWORD *)(a2 + 172) = 0;
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 165) = *(_BYTE *)(a2 + 165);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_BYTE *)(a1 + 163) = *(_BYTE *)(a2 + 163);
  *(_BYTE *)(a1 + 156) = *(_BYTE *)(a2 + 156);
  *(_BYTE *)(a1 + 167) = *(_BYTE *)(a2 + 167);
  *(_BYTE *)(a1 + 158) = *(_BYTE *)(a2 + 158);
  *(_BYTE *)(a1 + 161) = *(_BYTE *)(a2 + 161);
  *(_BYTE *)(a1 + 166) = *(_BYTE *)(a2 + 166);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 164) = *(_BYTE *)(a2 + 164);
  *(_BYTE *)(a1 + 157) = *(_BYTE *)(a2 + 157);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_BYTE *)(a1 + 159) = *(_BYTE *)(a2 + 159);
  *(_BYTE *)(a1 + 162) = *(_BYTE *)(a2 + 162);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  result = *(float *)(a2 + 64);
  *(float *)(a1 + 64) = result;
  return result;
}

CMMsl *CMMsl::KappaLocalAudioResult::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::KappaLocalAudioResult *v3;
  _BYTE v5[184];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaLocalAudioResult::KappaLocalAudioResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaLocalAudioResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaLocalAudioResult::formatText(CMMsl::KappaLocalAudioResult *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "chaosAtMaxEnergy", *((float *)this + 10));
    v5 = *(_QWORD *)((char *)this + 172);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_51;
    }
  }
  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "chaosAtMaxEnergyRollover", *((float *)this + 11));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "chaosAtMaxEnergyRolloverTimestamp", *((float *)this + 12));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x80) == 0)
  {
LABEL_5:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_6;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "chaosAtMaxEnergyTimestamp", *((float *)this + 13));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_6:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_7;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "chaosMet");
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_7:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_8;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "chaosMetRollover");
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x800000000) == 0)
  {
LABEL_8:
    if ((v5 & 0x1000000000) == 0)
      goto LABEL_9;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "chaosOrSaturationMet");
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x1000000000) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000000000) == 0)
      goto LABEL_10;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "chaosOrSaturationMetRollover");
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x2000000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000000000) == 0)
      goto LABEL_11;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "didProcess");
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x4000000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x8000000000) == 0)
      goto LABEL_12;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "energyAndChaosOrSaturationMet");
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x8000000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "energyAndChaosOrSaturationMetRollover");
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x100) == 0)
  {
LABEL_13:
    if ((v5 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "energyAtMaxChaos", *((float *)this + 14));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x200) == 0)
  {
LABEL_14:
    if ((v5 & 0x400) == 0)
      goto LABEL_15;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "energyAtMaxChaosRollover", *((float *)this + 15));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "energyAtMaxChaosRolloverTimestamp", *((float *)this + 16));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000000000) == 0)
      goto LABEL_17;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "energyAtMaxChaosTimestamp", *((float *)this + 17));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x10000000000) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000000000) == 0)
      goto LABEL_18;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "energyMet");
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x20000000000) == 0)
  {
LABEL_18:
    if ((v5 & 1) == 0)
      goto LABEL_19;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "energyMetRollover");
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 1) == 0)
  {
LABEL_19:
    if ((v5 & 2) == 0)
      goto LABEL_20;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "epochFirstTimestamp");
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 2) == 0)
  {
LABEL_20:
    if ((v5 & 0x1000) == 0)
      goto LABEL_21;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "epochLastTimestamp");
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x1000) == 0)
  {
LABEL_21:
    if ((v5 & 0x2000) == 0)
      goto LABEL_22;
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "maxChaos", *((float *)this + 18));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x2000) == 0)
  {
LABEL_22:
    if ((v5 & 0x4000) == 0)
      goto LABEL_23;
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(a2, "maxChaosRollover", *((float *)this + 19));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x4000) == 0)
  {
LABEL_23:
    if ((v5 & 0x8000) == 0)
      goto LABEL_24;
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(a2, "maxEnergy", *((float *)this + 20));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x8000) == 0)
  {
LABEL_24:
    if ((v5 & 0x10000) == 0)
      goto LABEL_25;
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(a2, "maxEnergyRollover", *((float *)this + 21));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x10000) == 0)
  {
LABEL_25:
    if ((v5 & 0x20000) == 0)
      goto LABEL_26;
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(a2, "maxRMS", *((float *)this + 22));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x20000) == 0)
  {
LABEL_26:
    if ((v5 & 0x40000) == 0)
      goto LABEL_27;
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(a2, "maxSaturation", *((float *)this + 23));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x40000) == 0)
  {
LABEL_27:
    if ((v5 & 0x80000) == 0)
      goto LABEL_28;
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(a2, "maxSaturationRollover", *((float *)this + 24));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x80000) == 0)
  {
LABEL_28:
    if ((v5 & 0x100000) == 0)
      goto LABEL_29;
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(a2, "parameterRollingEnergyWindowSize");
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x100000) == 0)
  {
LABEL_29:
    if ((v5 & 0x200000) == 0)
      goto LABEL_30;
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(a2, "parameterRollingPercentileWindowSize");
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x200000) == 0)
  {
LABEL_30:
    if ((v5 & 0x400000) == 0)
      goto LABEL_31;
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(a2, "parameterRolloverRollingEnergyWindowSize");
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x400000) == 0)
  {
LABEL_31:
    if ((v5 & 0x800000) == 0)
      goto LABEL_32;
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(a2, "parameterRolloverRollingPercentileWindowSize");
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x800000) == 0)
  {
LABEL_32:
    if ((v5 & 0x40000000000) == 0)
      goto LABEL_33;
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(a2, "parameterSaturationY", *((float *)this + 29));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x40000000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x80000000000) == 0)
      goto LABEL_34;
    goto LABEL_81;
  }
LABEL_80:
  PB::TextFormatter::format(a2, "passThru");
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x80000000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_35;
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(a2, "passThruRollover");
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x100000000000) == 0)
      goto LABEL_36;
    goto LABEL_83;
  }
LABEL_82:
  PB::TextFormatter::format(a2, "rmsSampleCount");
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x100000000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x200000000000) == 0)
      goto LABEL_37;
    goto LABEL_84;
  }
LABEL_83:
  PB::TextFormatter::format(a2, "saturationMet");
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x200000000000) == 0)
  {
LABEL_37:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_38;
    goto LABEL_85;
  }
LABEL_84:
  PB::TextFormatter::format(a2, "saturationMetRollover");
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_38:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_39;
    goto LABEL_86;
  }
LABEL_85:
  PB::TextFormatter::format(a2, "thresholdChaos", *((float *)this + 31));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_39:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_40;
    goto LABEL_87;
  }
LABEL_86:
  PB::TextFormatter::format(a2, "thresholdChaosRollover", *((float *)this + 32));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_40:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_41;
    goto LABEL_88;
  }
LABEL_87:
  PB::TextFormatter::format(a2, "thresholdEnergy", *((float *)this + 33));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_41:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_42;
    goto LABEL_89;
  }
LABEL_88:
  PB::TextFormatter::format(a2, "thresholdEnergyRollover", *((float *)this + 34));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_42:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_43;
    goto LABEL_90;
  }
LABEL_89:
  PB::TextFormatter::format(a2, "thresholdMaxRMS", *((float *)this + 35));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_43:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_44;
    goto LABEL_91;
  }
LABEL_90:
  PB::TextFormatter::format(a2, "thresholdMaxRMSRollover", *((float *)this + 36));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_44:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_45;
    goto LABEL_92;
  }
LABEL_91:
  PB::TextFormatter::format(a2, "thresholdSaturationTime", *((float *)this + 37));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_45:
    if ((v5 & 4) == 0)
      goto LABEL_46;
LABEL_93:
    PB::TextFormatter::format(a2, "timestamp");
    if ((*(_QWORD *)((_BYTE *)this + 172) & 8) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_47;
  }
LABEL_92:
  PB::TextFormatter::format(a2, "thresholdSaturationTimeRollover", *((float *)this + 38));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 4) != 0)
    goto LABEL_93;
LABEL_46:
  if ((v5 & 8) != 0)
LABEL_47:
    PB::TextFormatter::format(a2, "triggerTimestamp");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaLocalAudioResult::readFrom(CMMsl::KappaLocalAudioResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  BOOL v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  int v76;
  BOOL v77;
  unint64_t v78;
  unint64_t v79;
  int v80;
  BOOL v81;
  unint64_t v82;
  unint64_t v83;
  int v84;
  BOOL v85;
  unint64_t v86;
  unint64_t v87;
  int v88;
  BOOL v89;
  unint64_t v90;
  unint64_t v91;
  int v92;
  BOOL v93;
  unint64_t v94;
  unint64_t v95;
  int v96;
  BOOL v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  int v103;
  BOOL v104;
  unint64_t v105;
  unint64_t v106;
  int v107;
  BOOL v108;
  unint64_t v109;
  unint64_t v110;
  int v111;
  BOOL v112;
  unint64_t v113;
  unint64_t v114;
  int v115;
  BOOL v116;
  unint64_t v117;
  unint64_t v118;
  int v119;
  BOOL v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  char v124;
  unsigned int v125;
  uint64_t v126;
  unint64_t v127;
  char v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  char v132;
  unsigned int v133;
  uint64_t v134;
  unint64_t v135;
  char v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  char v140;
  unsigned int v141;
  uint64_t v142;
  unint64_t v143;
  char v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  char v152;
  unsigned int v153;
  uint64_t v154;
  unint64_t v155;
  char v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  char v160;
  unsigned int v161;
  uint64_t v162;
  unint64_t v163;
  char v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  char v169;
  unsigned int v170;
  unint64_t v171;
  char v172;
  char v173;
  unsigned int v174;
  unint64_t v175;
  char v176;
  char v177;
  unsigned int v178;
  unint64_t v179;
  char v180;
  char v181;
  unsigned int v182;
  unint64_t v183;
  char v184;
  char v185;
  unsigned int v186;
  unint64_t v187;
  char v188;
  char v189;
  unsigned int v190;
  unint64_t v191;
  char v192;
  char v193;
  unsigned int v194;
  unint64_t v195;
  char v196;
  char v197;
  unsigned int v198;
  unint64_t v199;
  char v200;
  char v201;
  unsigned int v202;
  unint64_t v203;
  char v204;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      break;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    v20 = v11 >> 3;
    switch((v11 >> 3))
    {
      case 'e':
        *(_QWORD *)((char *)this + 172) |= 0x40000000000uLL;
        v22 = *((_QWORD *)a2 + 1);
        if (v22 >= *((_QWORD *)a2 + 2))
        {
          v25 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v23 = v22 + 1;
          v24 = *(unsigned __int8 *)(*(_QWORD *)a2 + v22);
          *((_QWORD *)a2 + 1) = v23;
          v25 = v24 != 0;
        }
        *((_BYTE *)this + 165) = v25;
        goto LABEL_278;
      case 'f':
        *(_QWORD *)((char *)this + 172) |= 0x10000uLL;
        v70 = *((_QWORD *)a2 + 1);
        if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_186;
        *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v70);
        goto LABEL_277;
      case 'g':
        *(_QWORD *)((char *)this + 172) |= 0x4000uLL;
        v71 = *((_QWORD *)a2 + 1);
        if (v71 > 0xFFFFFFFFFFFFFFFBLL || v71 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_186;
        *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v71);
        goto LABEL_277;
      case 'h':
        *(_QWORD *)((char *)this + 172) |= 0x1000uLL;
        v72 = *((_QWORD *)a2 + 1);
        if (v72 > 0xFFFFFFFFFFFFFFFBLL || v72 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_186;
        *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v72);
        goto LABEL_277;
      case 'i':
        *(_QWORD *)((char *)this + 172) |= 0x20000uLL;
        v73 = *((_QWORD *)a2 + 1);
        if (v73 > 0xFFFFFFFFFFFFFFFBLL || v73 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_186;
        *((_DWORD *)this + 23) = *(_DWORD *)(*(_QWORD *)a2 + v73);
        goto LABEL_277;
      case 'j':
        *(_QWORD *)((char *)this + 172) |= 0x10000000000uLL;
        v74 = *((_QWORD *)a2 + 1);
        if (v74 >= *((_QWORD *)a2 + 2))
        {
          v77 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v75 = v74 + 1;
          v76 = *(unsigned __int8 *)(*(_QWORD *)a2 + v74);
          *((_QWORD *)a2 + 1) = v75;
          v77 = v76 != 0;
        }
        *((_BYTE *)this + 163) = v77;
        goto LABEL_278;
      case 'k':
        *(_QWORD *)((char *)this + 172) |= 0x200000000uLL;
        v78 = *((_QWORD *)a2 + 1);
        if (v78 >= *((_QWORD *)a2 + 2))
        {
          v81 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v79 = v78 + 1;
          v80 = *(unsigned __int8 *)(*(_QWORD *)a2 + v78);
          *((_QWORD *)a2 + 1) = v79;
          v81 = v80 != 0;
        }
        *((_BYTE *)this + 156) = v81;
        goto LABEL_278;
      case 'l':
        *(_QWORD *)((char *)this + 172) |= 0x100000000000uLL;
        v82 = *((_QWORD *)a2 + 1);
        if (v82 >= *((_QWORD *)a2 + 2))
        {
          v85 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v83 = v82 + 1;
          v84 = *(unsigned __int8 *)(*(_QWORD *)a2 + v82);
          *((_QWORD *)a2 + 1) = v83;
          v85 = v84 != 0;
        }
        *((_BYTE *)this + 167) = v85;
        goto LABEL_278;
      case 'm':
        *(_QWORD *)((char *)this + 172) |= 0x800000000uLL;
        v86 = *((_QWORD *)a2 + 1);
        if (v86 >= *((_QWORD *)a2 + 2))
        {
          v89 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v87 = v86 + 1;
          v88 = *(unsigned __int8 *)(*(_QWORD *)a2 + v86);
          *((_QWORD *)a2 + 1) = v87;
          v89 = v88 != 0;
        }
        *((_BYTE *)this + 158) = v89;
        goto LABEL_278;
      case 'n':
        *(_QWORD *)((char *)this + 172) |= 0x4000000000uLL;
        v90 = *((_QWORD *)a2 + 1);
        if (v90 >= *((_QWORD *)a2 + 2))
        {
          v93 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v91 = v90 + 1;
          v92 = *(unsigned __int8 *)(*(_QWORD *)a2 + v90);
          *((_QWORD *)a2 + 1) = v91;
          v93 = v92 != 0;
        }
        *((_BYTE *)this + 161) = v93;
        goto LABEL_278;
      case 'o':
        *(_QWORD *)((char *)this + 172) |= 0x80000000000uLL;
        v94 = *((_QWORD *)a2 + 1);
        if (v94 >= *((_QWORD *)a2 + 2))
        {
          v97 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v95 = v94 + 1;
          v96 = *(unsigned __int8 *)(*(_QWORD *)a2 + v94);
          *((_QWORD *)a2 + 1) = v95;
          v97 = v96 != 0;
        }
        *((_BYTE *)this + 166) = v97;
        goto LABEL_278;
      case 'p':
        *(_QWORD *)((char *)this + 172) |= 0x8000uLL;
        v98 = *((_QWORD *)a2 + 1);
        if (v98 > 0xFFFFFFFFFFFFFFFBLL || v98 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_186;
        *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v98);
        goto LABEL_277;
      case 'q':
        *(_QWORD *)((char *)this + 172) |= 0x2000uLL;
        v99 = *((_QWORD *)a2 + 1);
        if (v99 > 0xFFFFFFFFFFFFFFFBLL || v99 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_186;
        *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v99);
        goto LABEL_277;
      case 'r':
        *(_QWORD *)((char *)this + 172) |= 0x40000uLL;
        v100 = *((_QWORD *)a2 + 1);
        if (v100 > 0xFFFFFFFFFFFFFFFBLL || v100 + 4 > *((_QWORD *)a2 + 2))
        {
LABEL_186:
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v100);
LABEL_277:
          *((_QWORD *)a2 + 1) += 4;
        }
        goto LABEL_278;
      case 's':
        *(_QWORD *)((char *)this + 172) |= 0x20000000000uLL;
        v101 = *((_QWORD *)a2 + 1);
        if (v101 >= *((_QWORD *)a2 + 2))
        {
          v104 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v102 = v101 + 1;
          v103 = *(unsigned __int8 *)(*(_QWORD *)a2 + v101);
          *((_QWORD *)a2 + 1) = v102;
          v104 = v103 != 0;
        }
        *((_BYTE *)this + 164) = v104;
        goto LABEL_278;
      case 't':
        *(_QWORD *)((char *)this + 172) |= 0x400000000uLL;
        v105 = *((_QWORD *)a2 + 1);
        if (v105 >= *((_QWORD *)a2 + 2))
        {
          v108 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v106 = v105 + 1;
          v107 = *(unsigned __int8 *)(*(_QWORD *)a2 + v105);
          *((_QWORD *)a2 + 1) = v106;
          v108 = v107 != 0;
        }
        *((_BYTE *)this + 157) = v108;
        goto LABEL_278;
      case 'u':
        *(_QWORD *)((char *)this + 172) |= 0x200000000000uLL;
        v109 = *((_QWORD *)a2 + 1);
        if (v109 >= *((_QWORD *)a2 + 2))
        {
          v112 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v110 = v109 + 1;
          v111 = *(unsigned __int8 *)(*(_QWORD *)a2 + v109);
          *((_QWORD *)a2 + 1) = v110;
          v112 = v111 != 0;
        }
        *((_BYTE *)this + 168) = v112;
        goto LABEL_278;
      case 'v':
        *(_QWORD *)((char *)this + 172) |= 0x1000000000uLL;
        v113 = *((_QWORD *)a2 + 1);
        if (v113 >= *((_QWORD *)a2 + 2))
        {
          v116 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v114 = v113 + 1;
          v115 = *(unsigned __int8 *)(*(_QWORD *)a2 + v113);
          *((_QWORD *)a2 + 1) = v114;
          v116 = v115 != 0;
        }
        *((_BYTE *)this + 159) = v116;
        goto LABEL_278;
      case 'w':
        *(_QWORD *)((char *)this + 172) |= 0x8000000000uLL;
        v117 = *((_QWORD *)a2 + 1);
        if (v117 >= *((_QWORD *)a2 + 2))
        {
          v120 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v118 = v117 + 1;
          v119 = *(unsigned __int8 *)(*(_QWORD *)a2 + v117);
          *((_QWORD *)a2 + 1) = v118;
          v120 = v119 != 0;
        }
        *((_BYTE *)this + 162) = v120;
        goto LABEL_278;
      default:
        switch((int)v20)
        {
          case 201:
            *(_QWORD *)((char *)this + 172) |= 0x2000000000uLL;
            v26 = *((_QWORD *)a2 + 1);
            if (v26 >= *((_QWORD *)a2 + 2))
            {
              v29 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v27 = v26 + 1;
              v28 = *(unsigned __int8 *)(*(_QWORD *)a2 + v26);
              *((_QWORD *)a2 + 1) = v27;
              v29 = v28 != 0;
            }
            *((_BYTE *)this + 160) = v29;
            goto LABEL_278;
          case 202:
            *(_QWORD *)((char *)this + 172) |= 0x1000000uLL;
            v121 = *((_QWORD *)a2 + 1);
            v122 = *((_QWORD *)a2 + 2);
            v123 = *(_QWORD *)a2;
            if (v121 <= 0xFFFFFFFFFFFFFFF5 && v121 + 10 <= v122)
            {
              v124 = 0;
              v125 = 0;
              v126 = 0;
              do
              {
                v127 = v121 + 1;
                *((_QWORD *)a2 + 1) = v121 + 1;
                v128 = *(_BYTE *)(v123 + v121);
                v126 |= (unint64_t)(v128 & 0x7F) << v124;
                if ((v128 & 0x80) == 0)
                  goto LABEL_302;
                v124 += 7;
                v121 = v127;
                v14 = v125++ > 8;
              }
              while (!v14);
LABEL_247:
              LODWORD(v126) = 0;
              goto LABEL_302;
            }
            v185 = 0;
            v186 = 0;
            v126 = 0;
            if (v122 <= v121)
              v122 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v122 == v121)
              {
                LODWORD(v126) = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v187 = v121 + 1;
                v188 = *(_BYTE *)(v123 + v121);
                *((_QWORD *)a2 + 1) = v187;
                v126 |= (unint64_t)(v188 & 0x7F) << v185;
                if (v188 < 0)
                {
                  v185 += 7;
                  v121 = v187;
                  v14 = v186++ > 8;
                  if (v14)
                    goto LABEL_247;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v126) = 0;
              }
              break;
            }
LABEL_302:
            *((_DWORD *)this + 30) = v126;
            goto LABEL_278;
          case 203:
            *(_QWORD *)((char *)this + 172) |= 4uLL;
            v129 = *((_QWORD *)a2 + 1);
            v130 = *((_QWORD *)a2 + 2);
            v131 = *(_QWORD *)a2;
            if (v129 <= 0xFFFFFFFFFFFFFFF5 && v129 + 10 <= v130)
            {
              v132 = 0;
              v133 = 0;
              v134 = 0;
              do
              {
                v135 = v129 + 1;
                *((_QWORD *)a2 + 1) = v129 + 1;
                v136 = *(_BYTE *)(v131 + v129);
                v134 |= (unint64_t)(v136 & 0x7F) << v132;
                if ((v136 & 0x80) == 0)
                  goto LABEL_306;
                v132 += 7;
                v129 = v135;
                v14 = v133++ > 8;
              }
              while (!v14);
LABEL_254:
              v134 = 0;
              goto LABEL_306;
            }
            v189 = 0;
            v190 = 0;
            v134 = 0;
            if (v130 <= v129)
              v130 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v130 == v129)
              {
                v134 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v191 = v129 + 1;
                v192 = *(_BYTE *)(v131 + v129);
                *((_QWORD *)a2 + 1) = v191;
                v134 |= (unint64_t)(v192 & 0x7F) << v189;
                if (v192 < 0)
                {
                  v189 += 7;
                  v129 = v191;
                  v14 = v190++ > 8;
                  if (v14)
                    goto LABEL_254;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  v134 = 0;
              }
              break;
            }
LABEL_306:
            *((_QWORD *)this + 3) = v134;
            goto LABEL_278;
          case 204:
            *(_QWORD *)((char *)this + 172) |= 8uLL;
            v137 = *((_QWORD *)a2 + 1);
            v138 = *((_QWORD *)a2 + 2);
            v139 = *(_QWORD *)a2;
            if (v137 <= 0xFFFFFFFFFFFFFFF5 && v137 + 10 <= v138)
            {
              v140 = 0;
              v141 = 0;
              v142 = 0;
              do
              {
                v143 = v137 + 1;
                *((_QWORD *)a2 + 1) = v137 + 1;
                v144 = *(_BYTE *)(v139 + v137);
                v142 |= (unint64_t)(v144 & 0x7F) << v140;
                if ((v144 & 0x80) == 0)
                  goto LABEL_310;
                v140 += 7;
                v137 = v143;
                v14 = v141++ > 8;
              }
              while (!v14);
LABEL_261:
              v142 = 0;
              goto LABEL_310;
            }
            v193 = 0;
            v194 = 0;
            v142 = 0;
            if (v138 <= v137)
              v138 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v138 == v137)
              {
                v142 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v195 = v137 + 1;
                v196 = *(_BYTE *)(v139 + v137);
                *((_QWORD *)a2 + 1) = v195;
                v142 |= (unint64_t)(v196 & 0x7F) << v193;
                if (v196 < 0)
                {
                  v193 += 7;
                  v137 = v195;
                  v14 = v194++ > 8;
                  if (v14)
                    goto LABEL_261;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  v142 = 0;
              }
              break;
            }
LABEL_310:
            *((_QWORD *)this + 4) = v142;
            goto LABEL_278;
          case 205:
            *(_QWORD *)((char *)this + 172) |= 0x10uLL;
            v145 = *((_QWORD *)a2 + 1);
            if (v145 > 0xFFFFFFFFFFFFFFFBLL || v145 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_186;
            *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v145);
            goto LABEL_277;
          case 206:
            *(_QWORD *)((char *)this + 172) |= 0x80uLL;
            v146 = *((_QWORD *)a2 + 1);
            if (v146 > 0xFFFFFFFFFFFFFFFBLL || v146 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_186;
            *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v146);
            goto LABEL_277;
          case 207:
            *(_QWORD *)((char *)this + 172) |= 0x100uLL;
            v147 = *((_QWORD *)a2 + 1);
            if (v147 > 0xFFFFFFFFFFFFFFFBLL || v147 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_186;
            *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v147);
            goto LABEL_277;
          case 208:
            *(_QWORD *)((char *)this + 172) |= 0x800uLL;
            v148 = *((_QWORD *)a2 + 1);
            if (v148 > 0xFFFFFFFFFFFFFFFBLL || v148 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_186;
            *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v148);
            goto LABEL_277;
          case 209:
            *(_QWORD *)((char *)this + 172) |= 1uLL;
            v149 = *((_QWORD *)a2 + 1);
            v150 = *((_QWORD *)a2 + 2);
            v151 = *(_QWORD *)a2;
            if (v149 <= 0xFFFFFFFFFFFFFFF5 && v149 + 10 <= v150)
            {
              v152 = 0;
              v153 = 0;
              v154 = 0;
              do
              {
                v155 = v149 + 1;
                *((_QWORD *)a2 + 1) = v149 + 1;
                v156 = *(_BYTE *)(v151 + v149);
                v154 |= (unint64_t)(v156 & 0x7F) << v152;
                if ((v156 & 0x80) == 0)
                  goto LABEL_314;
                v152 += 7;
                v149 = v155;
                v14 = v153++ > 8;
              }
              while (!v14);
LABEL_268:
              v154 = 0;
              goto LABEL_314;
            }
            v197 = 0;
            v198 = 0;
            v154 = 0;
            if (v150 <= v149)
              v150 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v150 == v149)
              {
                v154 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v199 = v149 + 1;
                v200 = *(_BYTE *)(v151 + v149);
                *((_QWORD *)a2 + 1) = v199;
                v154 |= (unint64_t)(v200 & 0x7F) << v197;
                if (v200 < 0)
                {
                  v197 += 7;
                  v149 = v199;
                  v14 = v198++ > 8;
                  if (v14)
                    goto LABEL_268;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  v154 = 0;
              }
              break;
            }
LABEL_314:
            *((_QWORD *)this + 1) = v154;
            goto LABEL_278;
          case 210:
            *(_QWORD *)((char *)this + 172) |= 2uLL;
            v157 = *((_QWORD *)a2 + 1);
            v158 = *((_QWORD *)a2 + 2);
            v159 = *(_QWORD *)a2;
            if (v157 <= 0xFFFFFFFFFFFFFFF5 && v157 + 10 <= v158)
            {
              v160 = 0;
              v161 = 0;
              v162 = 0;
              do
              {
                v163 = v157 + 1;
                *((_QWORD *)a2 + 1) = v157 + 1;
                v164 = *(_BYTE *)(v159 + v157);
                v162 |= (unint64_t)(v164 & 0x7F) << v160;
                if ((v164 & 0x80) == 0)
                  goto LABEL_318;
                v160 += 7;
                v157 = v163;
                v14 = v161++ > 8;
              }
              while (!v14);
LABEL_275:
              v162 = 0;
              goto LABEL_318;
            }
            v201 = 0;
            v202 = 0;
            v162 = 0;
            if (v158 <= v157)
              v158 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v158 == v157)
              {
                v162 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v203 = v157 + 1;
                v204 = *(_BYTE *)(v159 + v157);
                *((_QWORD *)a2 + 1) = v203;
                v162 |= (unint64_t)(v204 & 0x7F) << v201;
                if (v204 < 0)
                {
                  v201 += 7;
                  v157 = v203;
                  v14 = v202++ > 8;
                  if (v14)
                    goto LABEL_275;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  v162 = 0;
              }
              break;
            }
LABEL_318:
            *((_QWORD *)this + 2) = v162;
            goto LABEL_278;
          case 211:
            *(_QWORD *)((char *)this + 172) |= 0x20uLL;
            v165 = *((_QWORD *)a2 + 1);
            if (v165 > 0xFFFFFFFFFFFFFFFBLL || v165 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_186;
            *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v165);
            goto LABEL_277;
          case 212:
            *(_QWORD *)((char *)this + 172) |= 0x40uLL;
            v166 = *((_QWORD *)a2 + 1);
            if (v166 > 0xFFFFFFFFFFFFFFFBLL || v166 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_186;
            *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v166);
            goto LABEL_277;
          case 213:
            *(_QWORD *)((char *)this + 172) |= 0x200uLL;
            v167 = *((_QWORD *)a2 + 1);
            if (v167 > 0xFFFFFFFFFFFFFFFBLL || v167 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_186;
            *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v167);
            goto LABEL_277;
          case 214:
            *(_QWORD *)((char *)this + 172) |= 0x400uLL;
            v168 = *((_QWORD *)a2 + 1);
            if (v168 > 0xFFFFFFFFFFFFFFFBLL || v168 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_186;
            *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v168);
            goto LABEL_277;
          default:
            switch((int)v20)
            {
              case 1:
                *(_QWORD *)((char *)this + 172) |= 0x20000000uLL;
                v21 = *((_QWORD *)a2 + 1);
                if (v21 > 0xFFFFFFFFFFFFFFFBLL || v21 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_186;
                *((_DWORD *)this + 35) = *(_DWORD *)(*(_QWORD *)a2 + v21);
                goto LABEL_277;
              case 2:
                *(_QWORD *)((char *)this + 172) |= 0x8000000uLL;
                v30 = *((_QWORD *)a2 + 1);
                if (v30 > 0xFFFFFFFFFFFFFFFBLL || v30 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_186;
                *((_DWORD *)this + 33) = *(_DWORD *)(*(_QWORD *)a2 + v30);
                goto LABEL_277;
              case 3:
                *(_QWORD *)((char *)this + 172) |= 0x2000000uLL;
                v31 = *((_QWORD *)a2 + 1);
                if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_186;
                *((_DWORD *)this + 31) = *(_DWORD *)(*(_QWORD *)a2 + v31);
                goto LABEL_277;
              case 4:
                *(_QWORD *)((char *)this + 172) |= 0x80000000uLL;
                v32 = *((_QWORD *)a2 + 1);
                if (v32 > 0xFFFFFFFFFFFFFFFBLL || v32 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_186;
                *((_DWORD *)this + 37) = *(_DWORD *)(*(_QWORD *)a2 + v32);
                goto LABEL_277;
              case 5:
                *(_QWORD *)((char *)this + 172) |= 0x100000uLL;
                v33 = *((_QWORD *)a2 + 1);
                v34 = *((_QWORD *)a2 + 2);
                v35 = *(_QWORD *)a2;
                if (v33 <= 0xFFFFFFFFFFFFFFF5 && v33 + 10 <= v34)
                {
                  v36 = 0;
                  v37 = 0;
                  v38 = 0;
                  do
                  {
                    v39 = v33 + 1;
                    *((_QWORD *)a2 + 1) = v33 + 1;
                    v40 = *(_BYTE *)(v35 + v33);
                    v38 |= (unint64_t)(v40 & 0x7F) << v36;
                    if ((v40 & 0x80) == 0)
                      goto LABEL_286;
                    v36 += 7;
                    v33 = v39;
                    v14 = v37++ > 8;
                  }
                  while (!v14);
LABEL_197:
                  LODWORD(v38) = 0;
                  goto LABEL_286;
                }
                v169 = 0;
                v170 = 0;
                v38 = 0;
                if (v34 <= v33)
                  v34 = *((_QWORD *)a2 + 1);
                while (2)
                {
                  if (v34 == v33)
                  {
                    LODWORD(v38) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                  }
                  else
                  {
                    v171 = v33 + 1;
                    v172 = *(_BYTE *)(v35 + v33);
                    *((_QWORD *)a2 + 1) = v171;
                    v38 |= (unint64_t)(v172 & 0x7F) << v169;
                    if (v172 < 0)
                    {
                      v169 += 7;
                      v33 = v171;
                      v14 = v170++ > 8;
                      if (v14)
                        goto LABEL_197;
                      continue;
                    }
                    if (*((_BYTE *)a2 + 24))
                      LODWORD(v38) = 0;
                  }
                  break;
                }
LABEL_286:
                *((_DWORD *)this + 26) = v38;
                goto LABEL_278;
              case 6:
                *(_QWORD *)((char *)this + 172) |= 0x80000uLL;
                v41 = *((_QWORD *)a2 + 1);
                v42 = *((_QWORD *)a2 + 2);
                v43 = *(_QWORD *)a2;
                if (v41 <= 0xFFFFFFFFFFFFFFF5 && v41 + 10 <= v42)
                {
                  v44 = 0;
                  v45 = 0;
                  v46 = 0;
                  do
                  {
                    v47 = v41 + 1;
                    *((_QWORD *)a2 + 1) = v41 + 1;
                    v48 = *(_BYTE *)(v43 + v41);
                    v46 |= (unint64_t)(v48 & 0x7F) << v44;
                    if ((v48 & 0x80) == 0)
                      goto LABEL_290;
                    v44 += 7;
                    v41 = v47;
                    v14 = v45++ > 8;
                  }
                  while (!v14);
LABEL_204:
                  LODWORD(v46) = 0;
                  goto LABEL_290;
                }
                v173 = 0;
                v174 = 0;
                v46 = 0;
                if (v42 <= v41)
                  v42 = *((_QWORD *)a2 + 1);
                while (2)
                {
                  if (v42 == v41)
                  {
                    LODWORD(v46) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                  }
                  else
                  {
                    v175 = v41 + 1;
                    v176 = *(_BYTE *)(v43 + v41);
                    *((_QWORD *)a2 + 1) = v175;
                    v46 |= (unint64_t)(v176 & 0x7F) << v173;
                    if (v176 < 0)
                    {
                      v173 += 7;
                      v41 = v175;
                      v14 = v174++ > 8;
                      if (v14)
                        goto LABEL_204;
                      continue;
                    }
                    if (*((_BYTE *)a2 + 24))
                      LODWORD(v46) = 0;
                  }
                  break;
                }
LABEL_290:
                *((_DWORD *)this + 25) = v46;
                goto LABEL_278;
              case 7:
                *(_QWORD *)((char *)this + 172) |= 0x800000uLL;
                v49 = *((_QWORD *)a2 + 1);
                if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_186;
                *((_DWORD *)this + 29) = *(_DWORD *)(*(_QWORD *)a2 + v49);
                goto LABEL_277;
              case 8:
                *(_QWORD *)((char *)this + 172) |= 0x40000000uLL;
                v50 = *((_QWORD *)a2 + 1);
                if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_186;
                *((_DWORD *)this + 36) = *(_DWORD *)(*(_QWORD *)a2 + v50);
                goto LABEL_277;
              case 9:
                *(_QWORD *)((char *)this + 172) |= 0x10000000uLL;
                v51 = *((_QWORD *)a2 + 1);
                if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_186;
                *((_DWORD *)this + 34) = *(_DWORD *)(*(_QWORD *)a2 + v51);
                goto LABEL_277;
              case 10:
                *(_QWORD *)((char *)this + 172) |= 0x4000000uLL;
                v52 = *((_QWORD *)a2 + 1);
                if (v52 > 0xFFFFFFFFFFFFFFFBLL || v52 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_186;
                *((_DWORD *)this + 32) = *(_DWORD *)(*(_QWORD *)a2 + v52);
                goto LABEL_277;
              case 11:
                *(_QWORD *)((char *)this + 172) |= 0x100000000uLL;
                v53 = *((_QWORD *)a2 + 1);
                if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_186;
                *((_DWORD *)this + 38) = *(_DWORD *)(*(_QWORD *)a2 + v53);
                goto LABEL_277;
              case 12:
                *(_QWORD *)((char *)this + 172) |= 0x200000uLL;
                v54 = *((_QWORD *)a2 + 1);
                v55 = *((_QWORD *)a2 + 2);
                v56 = *(_QWORD *)a2;
                if (v54 <= 0xFFFFFFFFFFFFFFF5 && v54 + 10 <= v55)
                {
                  v57 = 0;
                  v58 = 0;
                  v59 = 0;
                  do
                  {
                    v60 = v54 + 1;
                    *((_QWORD *)a2 + 1) = v54 + 1;
                    v61 = *(_BYTE *)(v56 + v54);
                    v59 |= (unint64_t)(v61 & 0x7F) << v57;
                    if ((v61 & 0x80) == 0)
                      goto LABEL_294;
                    v57 += 7;
                    v54 = v60;
                    v14 = v58++ > 8;
                  }
                  while (!v14);
LABEL_211:
                  LODWORD(v59) = 0;
                  goto LABEL_294;
                }
                v177 = 0;
                v178 = 0;
                v59 = 0;
                if (v55 <= v54)
                  v55 = *((_QWORD *)a2 + 1);
                while (2)
                {
                  if (v55 == v54)
                  {
                    LODWORD(v59) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                  }
                  else
                  {
                    v179 = v54 + 1;
                    v180 = *(_BYTE *)(v56 + v54);
                    *((_QWORD *)a2 + 1) = v179;
                    v59 |= (unint64_t)(v180 & 0x7F) << v177;
                    if (v180 < 0)
                    {
                      v177 += 7;
                      v54 = v179;
                      v14 = v178++ > 8;
                      if (v14)
                        goto LABEL_211;
                      continue;
                    }
                    if (*((_BYTE *)a2 + 24))
                      LODWORD(v59) = 0;
                  }
                  break;
                }
LABEL_294:
                *((_DWORD *)this + 27) = v59;
                goto LABEL_278;
              case 13:
                *(_QWORD *)((char *)this + 172) |= 0x400000uLL;
                v62 = *((_QWORD *)a2 + 1);
                v63 = *((_QWORD *)a2 + 2);
                v64 = *(_QWORD *)a2;
                if (v62 <= 0xFFFFFFFFFFFFFFF5 && v62 + 10 <= v63)
                {
                  v65 = 0;
                  v66 = 0;
                  v67 = 0;
                  do
                  {
                    v68 = v62 + 1;
                    *((_QWORD *)a2 + 1) = v62 + 1;
                    v69 = *(_BYTE *)(v64 + v62);
                    v67 |= (unint64_t)(v69 & 0x7F) << v65;
                    if ((v69 & 0x80) == 0)
                      goto LABEL_298;
                    v65 += 7;
                    v62 = v68;
                    v14 = v66++ > 8;
                  }
                  while (!v14);
LABEL_218:
                  LODWORD(v67) = 0;
                  goto LABEL_298;
                }
                v181 = 0;
                v182 = 0;
                v67 = 0;
                if (v63 <= v62)
                  v63 = *((_QWORD *)a2 + 1);
                break;
              default:
                goto LABEL_19;
            }
            break;
        }
        break;
    }
    while (1)
    {
      if (v63 == v62)
      {
        LODWORD(v67) = 0;
        *((_BYTE *)a2 + 24) = 1;
        goto LABEL_298;
      }
      v183 = v62 + 1;
      v184 = *(_BYTE *)(v64 + v62);
      *((_QWORD *)a2 + 1) = v183;
      v67 |= (unint64_t)(v184 & 0x7F) << v181;
      if ((v184 & 0x80) == 0)
        break;
      v181 += 7;
      v62 = v183;
      v14 = v182++ > 8;
      if (v14)
        goto LABEL_218;
    }
    if (*((_BYTE *)a2 + 24))
      LODWORD(v67) = 0;
LABEL_298:
    *((_DWORD *)this + 28) = v67;
LABEL_278:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v15 = 0;
  v16 = 0;
  v11 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v17 = v2 + 1;
    v18 = *(_BYTE *)(v8 + v2);
    *((_QWORD *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0)
      goto LABEL_21;
    v15 += 7;
    v2 = v17;
    v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  result = PB::Reader::skip(a2);
  if ((_DWORD)result)
    goto LABEL_278;
  return result;
}

uint64_t CMMsl::KappaLocalAudioResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = this;
  v4 = *(_QWORD *)(this + 172);
  if ((v4 & 0x20000000) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 140));
    v4 = *(_QWORD *)(v3 + 172);
    if ((v4 & 0x8000000) == 0)
    {
LABEL_3:
      if ((v4 & 0x2000000) == 0)
        goto LABEL_4;
      goto LABEL_50;
    }
  }
  else if ((v4 & 0x8000000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 132));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_4:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(float *)(v3 + 124));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_5:
    if ((v4 & 0x100000) == 0)
      goto LABEL_6;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(float *)(v3 + 148));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x100000) == 0)
  {
LABEL_6:
    if ((v4 & 0x80000) == 0)
      goto LABEL_7;
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x80000) == 0)
  {
LABEL_7:
    if ((v4 & 0x800000) == 0)
      goto LABEL_8;
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x800000) == 0)
  {
LABEL_8:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_9;
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2, *(float *)(v3 + 116));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_10;
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::write(a2, *(float *)(v3 + 144));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_11;
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::write(a2, *(float *)(v3 + 136));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x100000000) == 0)
      goto LABEL_12;
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(float *)(v3 + 128));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x200000) == 0)
      goto LABEL_13;
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::write(a2, *(float *)(v3 + 152));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x200000) == 0)
  {
LABEL_13:
    if ((v4 & 0x400000) == 0)
      goto LABEL_14;
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x400000) == 0)
  {
LABEL_14:
    if ((v4 & 0x40000000000) == 0)
      goto LABEL_15;
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x40000000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x10000) == 0)
      goto LABEL_16;
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::write(a2);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x10000) == 0)
  {
LABEL_16:
    if ((v4 & 0x4000) == 0)
      goto LABEL_17;
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::write(a2, *(float *)(v3 + 88));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x4000) == 0)
  {
LABEL_17:
    if ((v4 & 0x1000) == 0)
      goto LABEL_18;
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::write(a2, *(float *)(v3 + 80));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x1000) == 0)
  {
LABEL_18:
    if ((v4 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::write(a2, *(float *)(v3 + 72));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x20000) == 0)
  {
LABEL_19:
    if ((v4 & 0x10000000000) == 0)
      goto LABEL_20;
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::write(a2, *(float *)(v3 + 92));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x10000000000) == 0)
  {
LABEL_20:
    if ((v4 & 0x200000000) == 0)
      goto LABEL_21;
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::write(a2);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_21:
    if ((v4 & 0x100000000000) == 0)
      goto LABEL_22;
    goto LABEL_68;
  }
LABEL_67:
  this = PB::Writer::write(a2);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x100000000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_23;
    goto LABEL_69;
  }
LABEL_68:
  this = PB::Writer::write(a2);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x4000000000) == 0)
      goto LABEL_24;
    goto LABEL_70;
  }
LABEL_69:
  this = PB::Writer::write(a2);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x4000000000) == 0)
  {
LABEL_24:
    if ((v4 & 0x80000000000) == 0)
      goto LABEL_25;
    goto LABEL_71;
  }
LABEL_70:
  this = PB::Writer::write(a2);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x80000000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x8000) == 0)
      goto LABEL_26;
    goto LABEL_72;
  }
LABEL_71:
  this = PB::Writer::write(a2);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x8000) == 0)
  {
LABEL_26:
    if ((v4 & 0x2000) == 0)
      goto LABEL_27;
    goto LABEL_73;
  }
LABEL_72:
  this = PB::Writer::write(a2, *(float *)(v3 + 84));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x2000) == 0)
  {
LABEL_27:
    if ((v4 & 0x40000) == 0)
      goto LABEL_28;
    goto LABEL_74;
  }
LABEL_73:
  this = PB::Writer::write(a2, *(float *)(v3 + 76));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x40000) == 0)
  {
LABEL_28:
    if ((v4 & 0x20000000000) == 0)
      goto LABEL_29;
    goto LABEL_75;
  }
LABEL_74:
  this = PB::Writer::write(a2, *(float *)(v3 + 96));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x20000000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x400000000) == 0)
      goto LABEL_30;
    goto LABEL_76;
  }
LABEL_75:
  this = PB::Writer::write(a2);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_30:
    if ((v4 & 0x200000000000) == 0)
      goto LABEL_31;
    goto LABEL_77;
  }
LABEL_76:
  this = PB::Writer::write(a2);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x200000000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x1000000000) == 0)
      goto LABEL_32;
    goto LABEL_78;
  }
LABEL_77:
  this = PB::Writer::write(a2);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x1000000000) == 0)
  {
LABEL_32:
    if ((v4 & 0x8000000000) == 0)
      goto LABEL_33;
    goto LABEL_79;
  }
LABEL_78:
  this = PB::Writer::write(a2);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x8000000000) == 0)
  {
LABEL_33:
    if ((v4 & 0x2000000000) == 0)
      goto LABEL_34;
    goto LABEL_80;
  }
LABEL_79:
  this = PB::Writer::write(a2);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x2000000000) == 0)
  {
LABEL_34:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_35;
    goto LABEL_81;
  }
LABEL_80:
  this = PB::Writer::write(a2);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_35:
    if ((v4 & 4) == 0)
      goto LABEL_36;
    goto LABEL_82;
  }
LABEL_81:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 4) == 0)
  {
LABEL_36:
    if ((v4 & 8) == 0)
      goto LABEL_37;
    goto LABEL_83;
  }
LABEL_82:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 8) == 0)
  {
LABEL_37:
    if ((v4 & 0x10) == 0)
      goto LABEL_38;
    goto LABEL_84;
  }
LABEL_83:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x10) == 0)
  {
LABEL_38:
    if ((v4 & 0x80) == 0)
      goto LABEL_39;
    goto LABEL_85;
  }
LABEL_84:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x80) == 0)
  {
LABEL_39:
    if ((v4 & 0x100) == 0)
      goto LABEL_40;
    goto LABEL_86;
  }
LABEL_85:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x100) == 0)
  {
LABEL_40:
    if ((v4 & 0x800) == 0)
      goto LABEL_41;
    goto LABEL_87;
  }
LABEL_86:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x800) == 0)
  {
LABEL_41:
    if ((v4 & 1) == 0)
      goto LABEL_42;
    goto LABEL_88;
  }
LABEL_87:
  this = PB::Writer::write(a2, *(float *)(v3 + 68));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 1) == 0)
  {
LABEL_42:
    if ((v4 & 2) == 0)
      goto LABEL_43;
    goto LABEL_89;
  }
LABEL_88:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 2) == 0)
  {
LABEL_43:
    if ((v4 & 0x20) == 0)
      goto LABEL_44;
    goto LABEL_90;
  }
LABEL_89:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x20) == 0)
  {
LABEL_44:
    if ((v4 & 0x40) == 0)
      goto LABEL_45;
    goto LABEL_91;
  }
LABEL_90:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x40) == 0)
  {
LABEL_45:
    if ((v4 & 0x200) == 0)
      goto LABEL_46;
    goto LABEL_92;
  }
LABEL_91:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x200) == 0)
  {
LABEL_46:
    if ((v4 & 0x400) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 64));
  }
LABEL_92:
  this = PB::Writer::write(a2, *(float *)(v3 + 60));
  if ((*(_QWORD *)(v3 + 172) & 0x400) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 64));
  return this;
}

uint64_t CMMsl::KappaLocalAudioResult::hash_value(CMMsl::KappaLocalAudioResult *this)
{
  uint64_t v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  uint64_t v47;
  float v48;
  uint64_t v49;
  float v50;
  uint64_t v51;
  float v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  uint64_t v57;
  float v58;
  uint64_t v59;
  float v60;
  uint64_t v61;
  float v62;
  uint64_t v63;
  float v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v1 = *(_QWORD *)((char *)this + 172);
  if ((v1 & 0x20000000) == 0)
  {
    v2 = 0;
    if ((v1 & 0x8000000) != 0)
      goto LABEL_3;
LABEL_101:
    v84 = 0;
    if ((v1 & 0x2000000) != 0)
      goto LABEL_6;
LABEL_102:
    v83 = 0;
    if ((v1 & 0x80000000) != 0)
      goto LABEL_9;
LABEL_103:
    v82 = 0;
    if ((v1 & 0x100000) != 0)
      goto LABEL_12;
    goto LABEL_104;
  }
  v64 = *((float *)this + 35);
  if (v64 == 0.0)
    v2 = 0;
  else
    v2 = LODWORD(v64);
  if ((v1 & 0x8000000) == 0)
    goto LABEL_101;
LABEL_3:
  v3 = *((float *)this + 33);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  v84 = v4;
  if ((v1 & 0x2000000) == 0)
    goto LABEL_102;
LABEL_6:
  v5 = *((float *)this + 31);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  v83 = v6;
  if ((v1 & 0x80000000) == 0)
    goto LABEL_103;
LABEL_9:
  v7 = *((float *)this + 37);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  v82 = v8;
  if ((v1 & 0x100000) != 0)
  {
LABEL_12:
    v81 = *((int *)this + 26);
    if ((v1 & 0x80000) != 0)
      goto LABEL_13;
    goto LABEL_105;
  }
LABEL_104:
  v81 = 0;
  if ((v1 & 0x80000) != 0)
  {
LABEL_13:
    v80 = *((int *)this + 25);
    if ((v1 & 0x800000) != 0)
      goto LABEL_14;
LABEL_106:
    v79 = 0;
    if ((v1 & 0x40000000) != 0)
      goto LABEL_17;
LABEL_107:
    v78 = 0;
    if ((v1 & 0x10000000) != 0)
      goto LABEL_20;
LABEL_108:
    v77 = 0;
    if ((v1 & 0x4000000) != 0)
      goto LABEL_23;
LABEL_109:
    v76 = 0;
    if ((v1 & 0x100000000) != 0)
      goto LABEL_26;
LABEL_110:
    v75 = 0;
    if ((v1 & 0x200000) != 0)
      goto LABEL_29;
    goto LABEL_111;
  }
LABEL_105:
  v80 = 0;
  if ((v1 & 0x800000) == 0)
    goto LABEL_106;
LABEL_14:
  v9 = *((float *)this + 29);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  v79 = v10;
  if ((v1 & 0x40000000) == 0)
    goto LABEL_107;
LABEL_17:
  v11 = *((float *)this + 36);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  v78 = v12;
  if ((v1 & 0x10000000) == 0)
    goto LABEL_108;
LABEL_20:
  v13 = *((float *)this + 34);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  v77 = v14;
  if ((v1 & 0x4000000) == 0)
    goto LABEL_109;
LABEL_23:
  v15 = *((float *)this + 32);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  v76 = v16;
  if ((v1 & 0x100000000) == 0)
    goto LABEL_110;
LABEL_26:
  v17 = *((float *)this + 38);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  v75 = v18;
  if ((v1 & 0x200000) != 0)
  {
LABEL_29:
    v74 = *((int *)this + 27);
    if ((v1 & 0x400000) != 0)
      goto LABEL_30;
    goto LABEL_112;
  }
LABEL_111:
  v74 = 0;
  if ((v1 & 0x400000) != 0)
  {
LABEL_30:
    v73 = *((int *)this + 28);
    if ((v1 & 0x40000000000) != 0)
      goto LABEL_31;
    goto LABEL_113;
  }
LABEL_112:
  v73 = 0;
  if ((v1 & 0x40000000000) != 0)
  {
LABEL_31:
    v72 = *((unsigned __int8 *)this + 165);
    if ((v1 & 0x10000) != 0)
      goto LABEL_32;
LABEL_114:
    v71 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_35;
LABEL_115:
    v70 = 0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_38;
LABEL_116:
    v69 = 0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_41;
LABEL_117:
    v68 = 0;
    if ((v1 & 0x10000000000) != 0)
      goto LABEL_44;
    goto LABEL_118;
  }
LABEL_113:
  v72 = 0;
  if ((v1 & 0x10000) == 0)
    goto LABEL_114;
LABEL_32:
  v19 = *((float *)this + 22);
  v20 = LODWORD(v19);
  if (v19 == 0.0)
    v20 = 0;
  v71 = v20;
  if ((v1 & 0x4000) == 0)
    goto LABEL_115;
LABEL_35:
  v21 = *((float *)this + 20);
  v22 = LODWORD(v21);
  if (v21 == 0.0)
    v22 = 0;
  v70 = v22;
  if ((v1 & 0x1000) == 0)
    goto LABEL_116;
LABEL_38:
  v23 = *((float *)this + 18);
  v24 = LODWORD(v23);
  if (v23 == 0.0)
    v24 = 0;
  v69 = v24;
  if ((v1 & 0x20000) == 0)
    goto LABEL_117;
LABEL_41:
  v25 = *((float *)this + 23);
  v26 = LODWORD(v25);
  if (v25 == 0.0)
    v26 = 0;
  v68 = v26;
  if ((v1 & 0x10000000000) != 0)
  {
LABEL_44:
    v67 = *((unsigned __int8 *)this + 163);
    if ((v1 & 0x200000000) != 0)
      goto LABEL_45;
    goto LABEL_119;
  }
LABEL_118:
  v67 = 0;
  if ((v1 & 0x200000000) != 0)
  {
LABEL_45:
    v66 = *((unsigned __int8 *)this + 156);
    if ((v1 & 0x100000000000) != 0)
      goto LABEL_46;
    goto LABEL_120;
  }
LABEL_119:
  v66 = 0;
  if ((v1 & 0x100000000000) != 0)
  {
LABEL_46:
    v27 = *((unsigned __int8 *)this + 167);
    if ((v1 & 0x800000000) != 0)
      goto LABEL_47;
    goto LABEL_121;
  }
LABEL_120:
  v27 = 0;
  if ((v1 & 0x800000000) != 0)
  {
LABEL_47:
    v28 = *((unsigned __int8 *)this + 158);
    if ((v1 & 0x4000000000) != 0)
      goto LABEL_48;
    goto LABEL_122;
  }
LABEL_121:
  v28 = 0;
  if ((v1 & 0x4000000000) != 0)
  {
LABEL_48:
    v29 = *((unsigned __int8 *)this + 161);
    if ((v1 & 0x80000000000) != 0)
      goto LABEL_49;
    goto LABEL_123;
  }
LABEL_122:
  v29 = 0;
  if ((v1 & 0x80000000000) != 0)
  {
LABEL_49:
    v30 = *((unsigned __int8 *)this + 166);
    if ((v1 & 0x8000) != 0)
      goto LABEL_50;
LABEL_124:
    v32 = 0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_54;
LABEL_125:
    v34 = 0;
    if ((v1 & 0x40000) != 0)
      goto LABEL_58;
LABEL_126:
    v36 = 0;
    if ((v1 & 0x20000000000) != 0)
      goto LABEL_62;
    goto LABEL_127;
  }
LABEL_123:
  v30 = 0;
  if ((v1 & 0x8000) == 0)
    goto LABEL_124;
LABEL_50:
  v31 = *((float *)this + 21);
  if (v31 == 0.0)
    v32 = 0;
  else
    v32 = LODWORD(v31);
  if ((v1 & 0x2000) == 0)
    goto LABEL_125;
LABEL_54:
  v33 = *((float *)this + 19);
  if (v33 == 0.0)
    v34 = 0;
  else
    v34 = LODWORD(v33);
  if ((v1 & 0x40000) == 0)
    goto LABEL_126;
LABEL_58:
  v35 = *((float *)this + 24);
  if (v35 == 0.0)
    v36 = 0;
  else
    v36 = LODWORD(v35);
  if ((v1 & 0x20000000000) != 0)
  {
LABEL_62:
    v37 = *((unsigned __int8 *)this + 164);
    if ((v1 & 0x400000000) != 0)
      goto LABEL_63;
    goto LABEL_128;
  }
LABEL_127:
  v37 = 0;
  if ((v1 & 0x400000000) != 0)
  {
LABEL_63:
    v38 = *((unsigned __int8 *)this + 157);
    if ((v1 & 0x200000000000) != 0)
      goto LABEL_64;
    goto LABEL_129;
  }
LABEL_128:
  v38 = 0;
  if ((v1 & 0x200000000000) != 0)
  {
LABEL_64:
    v39 = *((unsigned __int8 *)this + 168);
    if ((v1 & 0x1000000000) != 0)
      goto LABEL_65;
    goto LABEL_130;
  }
LABEL_129:
  v39 = 0;
  if ((v1 & 0x1000000000) != 0)
  {
LABEL_65:
    v40 = *((unsigned __int8 *)this + 159);
    if ((v1 & 0x8000000000) != 0)
      goto LABEL_66;
    goto LABEL_131;
  }
LABEL_130:
  v40 = 0;
  if ((v1 & 0x8000000000) != 0)
  {
LABEL_66:
    v41 = *((unsigned __int8 *)this + 162);
    if ((v1 & 0x2000000000) != 0)
      goto LABEL_67;
    goto LABEL_132;
  }
LABEL_131:
  v41 = 0;
  if ((v1 & 0x2000000000) != 0)
  {
LABEL_67:
    v42 = *((unsigned __int8 *)this + 160);
    if ((v1 & 0x1000000) != 0)
      goto LABEL_68;
    goto LABEL_133;
  }
LABEL_132:
  v42 = 0;
  if ((v1 & 0x1000000) != 0)
  {
LABEL_68:
    v43 = *((int *)this + 30);
    if ((v1 & 4) != 0)
      goto LABEL_69;
    goto LABEL_134;
  }
LABEL_133:
  v43 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_69:
    v44 = *((_QWORD *)this + 3);
    if ((v1 & 8) != 0)
      goto LABEL_70;
    goto LABEL_135;
  }
LABEL_134:
  v44 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_70:
    v45 = *((_QWORD *)this + 4);
    if ((v1 & 0x10) != 0)
      goto LABEL_71;
LABEL_136:
    v47 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_74;
LABEL_137:
    v49 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_77;
LABEL_138:
    v51 = 0;
    if ((v1 & 0x800) != 0)
      goto LABEL_80;
LABEL_139:
    v53 = 0;
    if ((v1 & 1) != 0)
      goto LABEL_83;
    goto LABEL_140;
  }
LABEL_135:
  v45 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_136;
LABEL_71:
  v46 = *((float *)this + 10);
  v47 = LODWORD(v46);
  if (v46 == 0.0)
    v47 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_137;
LABEL_74:
  v48 = *((float *)this + 13);
  v49 = LODWORD(v48);
  if (v48 == 0.0)
    v49 = 0;
  if ((v1 & 0x100) == 0)
    goto LABEL_138;
LABEL_77:
  v50 = *((float *)this + 14);
  v51 = LODWORD(v50);
  if (v50 == 0.0)
    v51 = 0;
  if ((v1 & 0x800) == 0)
    goto LABEL_139;
LABEL_80:
  v52 = *((float *)this + 17);
  v53 = LODWORD(v52);
  if (v52 == 0.0)
    v53 = 0;
  if ((v1 & 1) != 0)
  {
LABEL_83:
    v54 = *((_QWORD *)this + 1);
    if ((v1 & 2) != 0)
      goto LABEL_84;
    goto LABEL_141;
  }
LABEL_140:
  v54 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_84:
    v55 = *((_QWORD *)this + 2);
    if ((v1 & 0x20) != 0)
      goto LABEL_85;
LABEL_142:
    v57 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_88;
LABEL_143:
    v59 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_91;
    goto LABEL_144;
  }
LABEL_141:
  v55 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_142;
LABEL_85:
  v56 = *((float *)this + 11);
  v57 = LODWORD(v56);
  if (v56 == 0.0)
    v57 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_143;
LABEL_88:
  v58 = *((float *)this + 12);
  v59 = LODWORD(v58);
  if (v58 == 0.0)
    v59 = 0;
  if ((v1 & 0x200) != 0)
  {
LABEL_91:
    v60 = *((float *)this + 15);
    v61 = LODWORD(v60);
    if (v60 == 0.0)
      v61 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_94;
LABEL_145:
    v63 = 0;
    return v84 ^ v2 ^ v83 ^ v82 ^ v81 ^ v80 ^ v79 ^ v78 ^ v77 ^ v76 ^ v75 ^ v74 ^ v73 ^ v72 ^ v71 ^ v70 ^ v69 ^ v68 ^ v67 ^ v66 ^ v27 ^ v28 ^ v29 ^ v30 ^ v32 ^ v34 ^ v36 ^ v37 ^ v38 ^ v39 ^ v40 ^ v41 ^ v42 ^ v43 ^ v44 ^ v45 ^ v47 ^ v49 ^ v51 ^ v53 ^ v54 ^ v55 ^ v57 ^ v59 ^ v61 ^ v63;
  }
LABEL_144:
  v61 = 0;
  if ((v1 & 0x400) == 0)
    goto LABEL_145;
LABEL_94:
  v62 = *((float *)this + 16);
  v63 = LODWORD(v62);
  if (v62 == 0.0)
    v63 = 0;
  return v84 ^ v2 ^ v83 ^ v82 ^ v81 ^ v80 ^ v79 ^ v78 ^ v77 ^ v76 ^ v75 ^ v74 ^ v73 ^ v72 ^ v71 ^ v70 ^ v69 ^ v68 ^ v67 ^ v66 ^ v27 ^ v28 ^ v29 ^ v30 ^ v32 ^ v34 ^ v36 ^ v37 ^ v38 ^ v39 ^ v40 ^ v41 ^ v42 ^ v43 ^ v44 ^ v45 ^ v47 ^ v49 ^ v51 ^ v53 ^ v54 ^ v55 ^ v57 ^ v59 ^ v61 ^ v63;
}

void CMMsl::KappaMildImpactResult::~KappaMildImpactResult(CMMsl::KappaMildImpactResult *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::KappaMildImpactResult::KappaMildImpactResult(uint64_t this, const CMMsl::KappaMildImpactResult *a2)
{
  char v2;
  char v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;

  *(_QWORD *)this = &off_25135E978;
  *(_DWORD *)(this + 28) = 0;
  v2 = *((_BYTE *)a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *((_DWORD *)a2 + 2);
    v3 = 1;
    *(_BYTE *)(this + 28) = 1;
    *(_DWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 28) & 8) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 5);
    v3 |= 8u;
    *(_BYTE *)(this + 28) = v3;
    *(_DWORD *)(this + 20) = v5;
    v2 = *((_BYTE *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    v6 = *((_DWORD *)a2 + 6);
    v3 |= 0x10u;
    *(_BYTE *)(this + 28) = v3;
    *(_DWORD *)(this + 24) = v6;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0)
        return this;
LABEL_12:
      v8 = *((_DWORD *)a2 + 4);
      *(_BYTE *)(this + 28) = v3 | 4;
      *(_DWORD *)(this + 16) = v8;
      return this;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 3);
  v3 |= 2u;
  *(_BYTE *)(this + 28) = v3;
  *(_DWORD *)(this + 12) = v7;
  if ((*((_BYTE *)a2 + 28) & 4) != 0)
    goto LABEL_12;
  return this;
}

uint64_t CMMsl::KappaMildImpactResult::operator=(uint64_t a1, const CMMsl::KappaMildImpactResult *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;

  if ((const CMMsl::KappaMildImpactResult *)a1 != a2)
  {
    CMMsl::KappaMildImpactResult::KappaMildImpactResult((uint64_t)&v8, a2);
    v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v11;
    v11 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v12;
    v12 = v4;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    v9 = v5;
    v6 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v10;
    v10 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaMildImpactResult *a2, CMMsl::KappaMildImpactResult *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  float result;
  int v8;

  v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  v4 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  v5 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v5;
  v6 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v6;
  result = *((float *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((float *)a2 + 3) = result;
  v8 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v8;
  return result;
}

float CMMsl::KappaMildImpactResult::KappaMildImpactResult(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135E978;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_25135E978;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::KappaMildImpactResult::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _QWORD v10[2];
  int v11;
  int v12;
  uint64_t v13;

  if (a1 != a2)
  {
    v10[0] = &off_25135E978;
    v3 = *(_DWORD *)(a2 + 20);
    v4 = *(_DWORD *)(a2 + 16);
    v5 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 28) = 0;
    v12 = *(_DWORD *)(a1 + 20);
    v13 = *(_QWORD *)(a1 + 24);
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 20) = v3;
    *(_QWORD *)(a1 + 24) = v5;
    *(_QWORD *)(a1 + 8) = v7;
    v10[1] = v6;
    v8 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v4;
    v11 = v8;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::KappaMildImpactResult::formatText(CMMsl::KappaMildImpactResult *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "configThreshold1", *((float *)this + 2));
    v5 = *((_BYTE *)this + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((_BYTE *)this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "debugX", *((float *)this + 3));
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(a2, "outputA", *((float *)this + 5));
    if ((*((_BYTE *)this + 28) & 0x10) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(a2, "debugY");
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 8) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 0x10) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "outputB");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaMildImpactResult::readFrom(CMMsl::KappaMildImpactResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  unint64_t v38;
  char v39;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_72;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 0x186A0u:
        *((_BYTE *)this + 28) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_38;
        *((_DWORD *)this + 2) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_61;
      case 0x186A1u:
        *((_BYTE *)this + 28) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_38;
        *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_61;
      case 0x186A2u:
        *((_BYTE *)this + 28) |= 0x10u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v32 = 0;
          v33 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_66;
            }
            v34 = v20++;
            v35 = *(_BYTE *)(v21 + v34);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v35 & 0x7F) << v32;
            if ((v35 & 0x80) == 0)
              break;
            v32 += 7;
            v14 = v33++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_65:
              v2 = v34 + 1;
              goto LABEL_66;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
          goto LABEL_65;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_66;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_66:
        *((_DWORD *)this + 6) = v24;
        break;
      case 0x186A3u:
        *((_BYTE *)this + 28) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 3) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_61:
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_38:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 0x186A4u:
        *((_BYTE *)this + 28) |= 4u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v36 = 0;
          v37 = 0;
          v30 = 0;
          if (v2 <= v26)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_71;
            }
            v38 = v26++;
            v39 = *(_BYTE *)(v27 + v38);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v39 & 0x7F) << v36;
            if ((v39 & 0x80) == 0)
              break;
            v36 += 7;
            v14 = v37++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_70:
              v2 = v38 + 1;
              goto LABEL_71;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v30) = 0;
          goto LABEL_70;
        }
        v28 = 0;
        v29 = 0;
        v30 = 0;
        do
        {
          v2 = v26 + 1;
          *((_QWORD *)a2 + 1) = v26 + 1;
          v31 = *(_BYTE *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0)
            goto LABEL_71;
          v28 += 7;
          v26 = v2;
          v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_71:
        *((_DWORD *)this + 4) = v30;
        break;
      default:
        goto LABEL_19;
    }
LABEL_72:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::KappaMildImpactResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 28);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 8));
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(this + 28) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_10:
  this = PB::Writer::write(a2, *(float *)(v3 + 12));
  if ((*(_BYTE *)(v3 + 28) & 4) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::KappaMildImpactResult::hash_value(CMMsl::KappaMildImpactResult *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  float v8;

  if ((*((_BYTE *)this + 28) & 1) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 28) & 8) != 0)
      goto LABEL_3;
LABEL_14:
    v3 = 0;
    if ((*((_BYTE *)this + 28) & 0x10) != 0)
      goto LABEL_6;
    goto LABEL_15;
  }
  v8 = *((float *)this + 2);
  v1 = LODWORD(v8);
  if (v8 == 0.0)
    v1 = 0;
  if ((*((_BYTE *)this + 28) & 8) == 0)
    goto LABEL_14;
LABEL_3:
  v2 = *((float *)this + 5);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 28) & 0x10) != 0)
  {
LABEL_6:
    v4 = *((int *)this + 6);
    if ((*((_BYTE *)this + 28) & 2) != 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  v4 = 0;
  if ((*((_BYTE *)this + 28) & 2) != 0)
  {
LABEL_7:
    v5 = *((float *)this + 3);
    v6 = LODWORD(v5);
    if (v5 == 0.0)
      v6 = 0;
    if ((*((_BYTE *)this + 28) & 4) != 0)
      goto LABEL_10;
LABEL_17:
    v7 = 0;
    return v3 ^ v1 ^ v4 ^ v6 ^ v7;
  }
LABEL_16:
  v6 = 0;
  if ((*((_BYTE *)this + 28) & 4) == 0)
    goto LABEL_17;
LABEL_10:
  v7 = *((int *)this + 4);
  return v3 ^ v1 ^ v4 ^ v6 ^ v7;
}

void CMMsl::KappaPeakDetectorMapMagTimestamps::~KappaPeakDetectorMapMagTimestamps(CMMsl::KappaPeakDetectorMapMagTimestamps *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::KappaPeakDetectorMapMagTimestamps::KappaPeakDetectorMapMagTimestamps(uint64_t this, const CMMsl::KappaPeakDetectorMapMagTimestamps *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  *(_QWORD *)this = &off_25135E9B0;
  *(_DWORD *)(this + 44) = 0;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 8) != 0)
  {
    v4 = *((_QWORD *)a2 + 4);
    v3 = 8;
    *(_BYTE *)(this + 44) = 8;
    *(_QWORD *)(this + 32) = v4;
    v2 = *((_BYTE *)a2 + 44);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 44) & 1) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 1);
    v3 |= 1u;
    *(_BYTE *)(this + 44) = v3;
    *(_QWORD *)(this + 8) = v5;
    v2 = *((_BYTE *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *((_QWORD *)a2 + 2);
    v3 |= 2u;
    *(_BYTE *)(this + 44) = v3;
    *(_QWORD *)(this + 16) = v6;
    v2 = *((_BYTE *)a2 + 44);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0)
        return this;
LABEL_12:
      v8 = *((_QWORD *)a2 + 3);
      *(_BYTE *)(this + 44) = v3 | 4;
      *(_QWORD *)(this + 24) = v8;
      return this;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 10);
  v3 |= 0x10u;
  *(_BYTE *)(this + 44) = v3;
  *(_DWORD *)(this + 40) = v7;
  if ((*((_BYTE *)a2 + 44) & 4) != 0)
    goto LABEL_12;
  return this;
}

uint64_t CMMsl::KappaPeakDetectorMapMagTimestamps::operator=(uint64_t a1, const CMMsl::KappaPeakDetectorMapMagTimestamps *a2)
{
  int v3;
  __int128 v4;
  int v5;
  __int128 v6;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  int v11;
  int v12;

  if ((const CMMsl::KappaPeakDetectorMapMagTimestamps *)a1 != a2)
  {
    CMMsl::KappaPeakDetectorMapMagTimestamps::KappaPeakDetectorMapMagTimestamps((uint64_t)&v8, a2);
    v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v12;
    v12 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v9 = v4;
    v5 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v11;
    v11 = v5;
    v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    v10 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaPeakDetectorMapMagTimestamps *a2, CMMsl::KappaPeakDetectorMapMagTimestamps *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float result;
  uint64_t v8;

  v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  result = *((float *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((float *)a2 + 10) = result;
  v8 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v8;
  return result;
}

float CMMsl::KappaPeakDetectorMapMagTimestamps::KappaPeakDetectorMapMagTimestamps(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135E9B0;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(float *)(a2 + 40);
  *(float *)(a1 + 40) = result;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_25135E9B0;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(float *)(a2 + 40);
  *(float *)(a1 + 40) = result;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return result;
}

uint64_t CMMsl::KappaPeakDetectorMapMagTimestamps::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  __int128 v5;
  int v6;
  __int128 v7;
  __int128 v8;
  void (**v10)(CMMsl::KappaPeakDetectorMapMagTimestamps *__hidden);
  __int128 v11;
  __int128 v12;
  int v13;
  int v14;

  if (a1 != a2)
  {
    v10 = &off_25135E9B0;
    v3 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a2 + 44) = 0;
    v4 = *(_DWORD *)(a2 + 40);
    v14 = *(_DWORD *)(a1 + 44);
    v5 = *(_OWORD *)(a2 + 8);
    v11 = *(_OWORD *)(a1 + 8);
    v6 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v4;
    v13 = v6;
    v7 = *(_OWORD *)(a1 + 24);
    v8 = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 44) = v3;
    *(_OWORD *)(a1 + 8) = v5;
    *(_OWORD *)(a1 + 24) = v8;
    v12 = v7;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

uint64_t CMMsl::KappaPeakDetectorMapMagTimestamps::formatText(CMMsl::KappaPeakDetectorMapMagTimestamps *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "epochFirstTimestamp");
    v5 = *((_BYTE *)this + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((_BYTE *)this + 44) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "epochLastTimestamp");
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(a2, "maxNormValue", *((float *)this + 10));
    if ((*((_BYTE *)this + 44) & 8) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(a2, "maxNormTimestamp");
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 0x10) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 8) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "timestamp");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaPeakDetectorMapMagTimestamps::readFrom(CMMsl::KappaPeakDetectorMapMagTimestamps *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_26;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_21;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_26:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 44) |= 8u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v45 = 0;
          v46 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v21)
            {
              v25 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_92;
            }
            v47 = v21++;
            v48 = *(_BYTE *)(v22 + v47);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v48 & 0x7F) << v45;
            if ((v48 & 0x80) == 0)
              break;
            v45 += 7;
            v14 = v46++ > 8;
            if (v14)
            {
              v25 = 0;
LABEL_91:
              v2 = v47 + 1;
              goto LABEL_92;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v25 = 0;
          goto LABEL_91;
        }
        v23 = 0;
        v24 = 0;
        v25 = 0;
        do
        {
          v2 = v21 + 1;
          *((_QWORD *)a2 + 1) = v21 + 1;
          v26 = *(_BYTE *)(v22 + v21);
          v25 |= (unint64_t)(v26 & 0x7F) << v23;
          if ((v26 & 0x80) == 0)
            goto LABEL_92;
          v23 += 7;
          v21 = v2;
          v14 = v24++ > 8;
        }
        while (!v14);
        v25 = 0;
LABEL_92:
        *((_QWORD *)this + 4) = v25;
        break;
      case 2u:
        *((_BYTE *)this + 44) |= 1u;
        v27 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v28 = *(_QWORD *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v49 = 0;
          v50 = 0;
          v31 = 0;
          if (v2 <= v27)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v27)
            {
              v31 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_97;
            }
            v51 = v27++;
            v52 = *(_BYTE *)(v28 + v51);
            *((_QWORD *)a2 + 1) = v27;
            v31 |= (unint64_t)(v52 & 0x7F) << v49;
            if ((v52 & 0x80) == 0)
              break;
            v49 += 7;
            v14 = v50++ > 8;
            if (v14)
            {
              v31 = 0;
LABEL_96:
              v2 = v51 + 1;
              goto LABEL_97;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v31 = 0;
          goto LABEL_96;
        }
        v29 = 0;
        v30 = 0;
        v31 = 0;
        do
        {
          v2 = v27 + 1;
          *((_QWORD *)a2 + 1) = v27 + 1;
          v32 = *(_BYTE *)(v28 + v27);
          v31 |= (unint64_t)(v32 & 0x7F) << v29;
          if ((v32 & 0x80) == 0)
            goto LABEL_97;
          v29 += 7;
          v27 = v2;
          v14 = v30++ > 8;
        }
        while (!v14);
        v31 = 0;
LABEL_97:
        *((_QWORD *)this + 1) = v31;
        break;
      case 3u:
        *((_BYTE *)this + 44) |= 2u;
        v33 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v34 = *(_QWORD *)a2;
        if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
        {
          v53 = 0;
          v54 = 0;
          v37 = 0;
          if (v2 <= v33)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v33)
            {
              v37 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_102;
            }
            v55 = v33++;
            v56 = *(_BYTE *)(v34 + v55);
            *((_QWORD *)a2 + 1) = v33;
            v37 |= (unint64_t)(v56 & 0x7F) << v53;
            if ((v56 & 0x80) == 0)
              break;
            v53 += 7;
            v14 = v54++ > 8;
            if (v14)
            {
              v37 = 0;
LABEL_101:
              v2 = v55 + 1;
              goto LABEL_102;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v37 = 0;
          goto LABEL_101;
        }
        v35 = 0;
        v36 = 0;
        v37 = 0;
        do
        {
          v2 = v33 + 1;
          *((_QWORD *)a2 + 1) = v33 + 1;
          v38 = *(_BYTE *)(v34 + v33);
          v37 |= (unint64_t)(v38 & 0x7F) << v35;
          if ((v38 & 0x80) == 0)
            goto LABEL_102;
          v35 += 7;
          v33 = v2;
          v14 = v36++ > 8;
        }
        while (!v14);
        v37 = 0;
LABEL_102:
        *((_QWORD *)this + 2) = v37;
        break;
      case 4u:
        *((_BYTE *)this + 44) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 5u:
        *((_BYTE *)this + 44) |= 4u;
        v39 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v40 = *(_QWORD *)a2;
        if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
        {
          v57 = 0;
          v58 = 0;
          v43 = 0;
          if (v2 <= v39)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v39)
            {
              v43 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_107;
            }
            v59 = v39++;
            v60 = *(_BYTE *)(v40 + v59);
            *((_QWORD *)a2 + 1) = v39;
            v43 |= (unint64_t)(v60 & 0x7F) << v57;
            if ((v60 & 0x80) == 0)
              break;
            v57 += 7;
            v14 = v58++ > 8;
            if (v14)
            {
              v43 = 0;
LABEL_106:
              v2 = v59 + 1;
              goto LABEL_107;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v43 = 0;
          goto LABEL_106;
        }
        v41 = 0;
        v42 = 0;
        v43 = 0;
        do
        {
          v2 = v39 + 1;
          *((_QWORD *)a2 + 1) = v39 + 1;
          v44 = *(_BYTE *)(v40 + v39);
          v43 |= (unint64_t)(v44 & 0x7F) << v41;
          if ((v44 & 0x80) == 0)
            goto LABEL_107;
          v41 += 7;
          v39 = v2;
          v14 = v42++ > 8;
        }
        while (!v14);
        v43 = 0;
LABEL_107:
        *((_QWORD *)this + 3) = v43;
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::KappaPeakDetectorMapMagTimestamps::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 44);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(this + 44) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_10:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  if ((*(_BYTE *)(v3 + 44) & 4) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::KappaPeakDetectorMapMagTimestamps::hash_value(CMMsl::KappaPeakDetectorMapMagTimestamps *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  uint64_t v6;

  if ((*((_BYTE *)this + 44) & 8) != 0)
  {
    v1 = *((_QWORD *)this + 4);
    if ((*((_BYTE *)this + 44) & 1) != 0)
    {
LABEL_3:
      v2 = *((_QWORD *)this + 1);
      if ((*((_BYTE *)this + 44) & 2) != 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else
  {
    v1 = 0;
    if ((*((_BYTE *)this + 44) & 1) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 44) & 2) != 0)
  {
LABEL_4:
    v3 = *((_QWORD *)this + 2);
    if ((*((_BYTE *)this + 44) & 0x10) != 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  v3 = 0;
  if ((*((_BYTE *)this + 44) & 0x10) != 0)
  {
LABEL_5:
    v4 = *((float *)this + 10);
    v5 = LODWORD(v4);
    if (v4 == 0.0)
      v5 = 0;
    if ((*((_BYTE *)this + 44) & 4) != 0)
      goto LABEL_8;
LABEL_13:
    v6 = 0;
    return v2 ^ v1 ^ v3 ^ v5 ^ v6;
  }
LABEL_12:
  v5 = 0;
  if ((*((_BYTE *)this + 44) & 4) == 0)
    goto LABEL_13;
LABEL_8:
  v6 = *((_QWORD *)this + 3);
  return v2 ^ v1 ^ v3 ^ v5 ^ v6;
}

void CMMsl::KappaPeakDetectorMapResult::~KappaPeakDetectorMapResult(CMMsl::KappaPeakDetectorMapResult *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_25135E9E8;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::KappaPeakDetectorMapResult::~KappaPeakDetectorMapResult(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::KappaPeakDetectorMapResult *CMMsl::KappaPeakDetectorMapResult::KappaPeakDetectorMapResult(CMMsl::KappaPeakDetectorMapResult *this, const CMMsl::KappaPeakDetectorMapResult *a2)
{
  _QWORD *v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  char v11;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)this = &off_25135E9E8;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (_QWORD *)((char *)this + 8);
  *((_DWORD *)this + 38) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  v5 = *((_DWORD *)a2 + 38);
  if ((v5 & 0x80) != 0)
  {
    v7 = *((_DWORD *)a2 + 28);
    v6 = 128;
    *((_DWORD *)this + 38) = 128;
    *((_DWORD *)this + 28) = v7;
    v5 = *((_DWORD *)a2 + 38);
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((v5 & 8) != 0)
  {
LABEL_5:
    v8 = *((_QWORD *)a2 + 10);
    v6 |= 8u;
    *((_DWORD *)this + 38) = v6;
    *((_QWORD *)this + 10) = v8;
    v5 = *((_DWORD *)a2 + 38);
  }
LABEL_6:
  if ((v5 & 0x800) != 0)
  {
    v13 = *((_DWORD *)a2 + 32);
    v6 |= 0x800u;
    *((_DWORD *)this + 38) = v6;
    *((_DWORD *)this + 32) = v13;
    v5 = *((_DWORD *)a2 + 38);
    if ((v5 & 0x10) == 0)
    {
LABEL_8:
      if ((v5 & 0x4000) == 0)
        goto LABEL_9;
      goto LABEL_29;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v14 = *((_QWORD *)a2 + 11);
  v6 |= 0x10u;
  *((_DWORD *)this + 38) = v6;
  *((_QWORD *)this + 11) = v14;
  v5 = *((_DWORD *)a2 + 38);
  if ((v5 & 0x4000) == 0)
  {
LABEL_9:
    if ((v5 & 0x8000) == 0)
      goto LABEL_10;
    goto LABEL_30;
  }
LABEL_29:
  v15 = *((_DWORD *)a2 + 35);
  v6 |= 0x4000u;
  *((_DWORD *)this + 38) = v6;
  *((_DWORD *)this + 35) = v15;
  v5 = *((_DWORD *)a2 + 38);
  if ((v5 & 0x8000) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_31;
  }
LABEL_30:
  v16 = *((_DWORD *)a2 + 36);
  v6 |= 0x8000u;
  *((_DWORD *)this + 38) = v6;
  *((_DWORD *)this + 36) = v16;
  v5 = *((_DWORD *)a2 + 38);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_32;
  }
LABEL_31:
  v17 = *((_DWORD *)a2 + 30);
  v6 |= 0x200u;
  *((_DWORD *)this + 38) = v6;
  *((_DWORD *)this + 30) = v17;
  v5 = *((_DWORD *)a2 + 38);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x20) == 0)
      goto LABEL_13;
    goto LABEL_33;
  }
LABEL_32:
  v18 = *((_DWORD *)a2 + 31);
  v6 |= 0x400u;
  *((_DWORD *)this + 38) = v6;
  *((_DWORD *)this + 31) = v18;
  v5 = *((_DWORD *)a2 + 38);
  if ((v5 & 0x20) == 0)
  {
LABEL_13:
    if ((v5 & 0x100) == 0)
      goto LABEL_14;
    goto LABEL_34;
  }
LABEL_33:
  v19 = *((_QWORD *)a2 + 12);
  v6 |= 0x20u;
  *((_DWORD *)this + 38) = v6;
  *((_QWORD *)this + 12) = v19;
  v5 = *((_DWORD *)a2 + 38);
  if ((v5 & 0x100) == 0)
  {
LABEL_14:
    if ((v5 & 0x10000) == 0)
      goto LABEL_15;
    goto LABEL_35;
  }
LABEL_34:
  v20 = *((_DWORD *)a2 + 29);
  v6 |= 0x100u;
  *((_DWORD *)this + 38) = v6;
  *((_DWORD *)this + 29) = v20;
  v5 = *((_DWORD *)a2 + 38);
  if ((v5 & 0x10000) == 0)
  {
LABEL_15:
    if ((v5 & 0x40) == 0)
      goto LABEL_16;
    goto LABEL_36;
  }
LABEL_35:
  v21 = *((_BYTE *)a2 + 148);
  v6 |= 0x10000u;
  *((_DWORD *)this + 38) = v6;
  *((_BYTE *)this + 148) = v21;
  v5 = *((_DWORD *)a2 + 38);
  if ((v5 & 0x40) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_37;
  }
LABEL_36:
  v22 = *((_QWORD *)a2 + 13);
  v6 |= 0x40u;
  *((_DWORD *)this + 38) = v6;
  *((_QWORD *)this + 13) = v22;
  v5 = *((_DWORD *)a2 + 38);
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 4) == 0)
      goto LABEL_18;
    goto LABEL_38;
  }
LABEL_37:
  v23 = *((_DWORD *)a2 + 33);
  v6 |= 0x1000u;
  *((_DWORD *)this + 38) = v6;
  *((_DWORD *)this + 33) = v23;
  v5 = *((_DWORD *)a2 + 38);
  if ((v5 & 4) == 0)
  {
LABEL_18:
    if ((v5 & 0x2000) == 0)
      goto LABEL_20;
    goto LABEL_19;
  }
LABEL_38:
  v24 = *((_QWORD *)a2 + 9);
  v6 |= 4u;
  *((_DWORD *)this + 38) = v6;
  *((_QWORD *)this + 9) = v24;
  if ((*((_DWORD *)a2 + 38) & 0x2000) != 0)
  {
LABEL_19:
    v9 = *((_DWORD *)a2 + 34);
    *((_DWORD *)this + 38) = v6 | 0x2000;
    *((_DWORD *)this + 34) = v9;
  }
LABEL_20:
  if (this != a2)
  {
    sub_2429111C4(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
    sub_242911380((_QWORD *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
  }
  v10 = *((_DWORD *)a2 + 38);
  if ((v10 & 1) == 0)
  {
    if ((v10 & 2) == 0)
      goto LABEL_24;
LABEL_41:
    v26 = *((_QWORD *)a2 + 8);
    *((_DWORD *)this + 38) |= 2u;
    *((_QWORD *)this + 8) = v26;
    if ((*((_DWORD *)a2 + 38) & 0x20000) == 0)
      return this;
    goto LABEL_25;
  }
  v25 = *((_QWORD *)a2 + 7);
  *((_DWORD *)this + 38) |= 1u;
  *((_QWORD *)this + 7) = v25;
  v10 = *((_DWORD *)a2 + 38);
  if ((v10 & 2) != 0)
    goto LABEL_41;
LABEL_24:
  if ((v10 & 0x20000) != 0)
  {
LABEL_25:
    v11 = *((_BYTE *)a2 + 149);
    *((_DWORD *)this + 38) |= 0x20000u;
    *((_BYTE *)this + 149) = v11;
  }
  return this;
}

CMMsl *CMMsl::KappaPeakDetectorMapResult::operator=(CMMsl *a1, const CMMsl::KappaPeakDetectorMapResult *a2)
{
  CMMsl::KappaPeakDetectorMapResult *v3;
  _BYTE v5[160];

  if (a1 != a2)
  {
    CMMsl::KappaPeakDetectorMapResult::KappaPeakDetectorMapResult((CMMsl::KappaPeakDetectorMapResult *)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaPeakDetectorMapResult *)v5, v3);
    CMMsl::KappaPeakDetectorMapResult::~KappaPeakDetectorMapResult((CMMsl::KappaPeakDetectorMapResult *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaPeakDetectorMapResult *a2, CMMsl::KappaPeakDetectorMapResult *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  float result;
  uint64_t v24;

  v3 = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v3;
  v4 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v4;
  v5 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v5;
  v6 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 148);
  *((_BYTE *)this + 148) = *((_BYTE *)a2 + 148);
  *((_BYTE *)a2 + 148) = v6;
  v7 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v7;
  LODWORD(v7) = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v7;
  v8 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v8;
  v9 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v9;
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v10;
  v11 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v11;
  v12 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v12;
  v13 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v13;
  v14 = *((_QWORD *)this + 6);
  v15 = *((_QWORD *)this + 7);
  v16 = *((_QWORD *)a2 + 7);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)this + 7) = v16;
  v17 = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v17;
  v18 = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v18;
  v19 = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v19;
  v20 = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v20;
  v21 = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v21;
  v22 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v22;
  result = *((float *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((float *)a2 + 34) = result;
  *((_QWORD *)a2 + 6) = v14;
  *((_QWORD *)a2 + 7) = v15;
  v24 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v24;
  LOBYTE(v24) = *((_BYTE *)this + 149);
  *((_BYTE *)this + 149) = *((_BYTE *)a2 + 149);
  *((_BYTE *)a2 + 149) = v24;
  return result;
}

uint64_t CMMsl::KappaPeakDetectorMapResult::KappaPeakDetectorMapResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = &off_25135E9E8;
  v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a2 + 152) = 0;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_BYTE *)(a1 + 148) = *(_BYTE *)(a2 + 148);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  sub_242911330(v4, (__n128 *)(a2 + 32));
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 149) = *(_BYTE *)(a2 + 149);
  return a1;
}

CMMsl *CMMsl::KappaPeakDetectorMapResult::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::KappaPeakDetectorMapResult *v3;
  _BYTE v5[160];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaPeakDetectorMapResult::KappaPeakDetectorMapResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaPeakDetectorMapResult *)v5, v3);
    CMMsl::KappaPeakDetectorMapResult::~KappaPeakDetectorMapResult((CMMsl::KappaPeakDetectorMapResult *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaPeakDetectorMapResult::formatText(CMMsl::KappaPeakDetectorMapResult *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  float *v7;
  float *v8;
  float v9;
  int v10;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 152) & 0x80) != 0)
    PB::TextFormatter::format(a2, "accelPeakThreshold", *((float *)this + 28));
  v5 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v5 += 8;
    PB::TextFormatter::format(a2, "allMaxNormTimestamps");
  }
  v7 = (float *)*((_QWORD *)this + 4);
  v8 = (float *)*((_QWORD *)this + 5);
  while (v7 != v8)
  {
    v9 = *v7++;
    PB::TextFormatter::format(a2, "allMaxNormValues", v9);
  }
  v10 = *((_DWORD *)this + 38);
  if ((v10 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "epochFirstTimestamp");
    v10 = *((_DWORD *)this + 38);
    if ((v10 & 2) == 0)
    {
LABEL_9:
      if ((v10 & 0x10000) == 0)
        goto LABEL_10;
      goto LABEL_28;
    }
  }
  else if ((v10 & 2) == 0)
  {
    goto LABEL_9;
  }
  PB::TextFormatter::format(a2, "epochLastTimestamp");
  v10 = *((_DWORD *)this + 38);
  if ((v10 & 0x10000) == 0)
  {
LABEL_10:
    if ((v10 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "isMAPDetected");
  v10 = *((_DWORD *)this + 38);
  if ((v10 & 0x100) == 0)
  {
LABEL_11:
    if ((v10 & 0x200) == 0)
      goto LABEL_12;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "magnitudePercentileThreshold", *((float *)this + 29));
  v10 = *((_DWORD *)this + 38);
  if ((v10 & 0x200) == 0)
  {
LABEL_12:
    if ((v10 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "magnitudePeriodicityLowerPercentile", *((float *)this + 30));
  v10 = *((_DWORD *)this + 38);
  if ((v10 & 0x400) == 0)
  {
LABEL_13:
    if ((v10 & 0x800) == 0)
      goto LABEL_14;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "magnitudePeriodicityUpperPercentile", *((float *)this + 31));
  v10 = *((_DWORD *)this + 38);
  if ((v10 & 0x800) == 0)
  {
LABEL_14:
    if ((v10 & 0x1000) == 0)
      goto LABEL_15;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "minNumPeaks");
  v10 = *((_DWORD *)this + 38);
  if ((v10 & 0x1000) == 0)
  {
LABEL_15:
    if ((v10 & 0x2000) == 0)
      goto LABEL_16;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "numPeaks");
  v10 = *((_DWORD *)this + 38);
  if ((v10 & 0x2000) == 0)
  {
LABEL_16:
    if ((v10 & 0x20000) == 0)
      goto LABEL_17;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "peakMagnitudePercentileDiff", *((float *)this + 34));
  v10 = *((_DWORD *)this + 38);
  if ((v10 & 0x20000) == 0)
  {
LABEL_17:
    if ((v10 & 4) == 0)
      goto LABEL_18;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "peakSeparation");
  v10 = *((_DWORD *)this + 38);
  if ((v10 & 4) == 0)
  {
LABEL_18:
    if ((v10 & 8) == 0)
      goto LABEL_19;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "peakTimeDeltaPercentileDiff");
  v10 = *((_DWORD *)this + 38);
  if ((v10 & 8) == 0)
  {
LABEL_19:
    if ((v10 & 0x10) == 0)
      goto LABEL_20;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "peakToPeakMinimumSeparation");
  v10 = *((_DWORD *)this + 38);
  if ((v10 & 0x10) == 0)
  {
LABEL_20:
    if ((v10 & 0x20) == 0)
      goto LABEL_21;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "peakToPeakSeparationThreshold");
  v10 = *((_DWORD *)this + 38);
  if ((v10 & 0x20) == 0)
  {
LABEL_21:
    if ((v10 & 0x4000) == 0)
      goto LABEL_22;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "timePercentileDiffThreshold");
  v10 = *((_DWORD *)this + 38);
  if ((v10 & 0x4000) == 0)
  {
LABEL_22:
    if ((v10 & 0x8000) == 0)
      goto LABEL_23;
LABEL_41:
    PB::TextFormatter::format(a2, "timePeriodicityUpperPercentile", *((float *)this + 36));
    if ((*((_DWORD *)this + 38) & 0x40) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_24;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "timePeriodicityLowerPercentile", *((float *)this + 35));
  v10 = *((_DWORD *)this + 38);
  if ((v10 & 0x8000) != 0)
    goto LABEL_41;
LABEL_23:
  if ((v10 & 0x40) != 0)
LABEL_24:
    PB::TextFormatter::format(a2, "timestamp");
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::KappaPeakDetectorMapResult::readFrom(CMMsl::KappaPeakDetectorMapResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char v68;
  unsigned int v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char v77;
  unsigned int v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  unint64_t v82;
  char *v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  BOOL v97;
  char v98;
  unsigned int v99;
  uint64_t v100;
  unint64_t v101;
  char v102;
  char v103;
  unsigned int v104;
  uint64_t v105;
  unint64_t v106;
  char v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  char *v111;
  _DWORD *v112;
  char *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  _DWORD *v119;
  int v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  char v125;
  unsigned int v126;
  uint64_t v127;
  unint64_t v128;
  char v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  char v133;
  unsigned int v134;
  uint64_t v135;
  unint64_t v136;
  char v137;
  unint64_t v138;
  unint64_t v139;
  int v140;
  BOOL v141;
  unint64_t v142;
  unint64_t v143;
  int v144;
  BOOL v145;
  char v146;
  unsigned int v147;
  unint64_t v148;
  char v149;
  char v150;
  unsigned int v151;
  unint64_t v152;
  char v153;
  char v154;
  unsigned int v155;
  unint64_t v156;
  char v157;
  char v158;
  unsigned int v159;
  unint64_t v160;
  char v161;
  char v162;
  unsigned int v163;
  unint64_t v164;
  char v165;
  char v166;
  unsigned int v167;
  unint64_t v168;
  char v169;
  char v170;
  unsigned int v171;
  unint64_t v172;
  char v173;
  unint64_t v174;
  char *v175;
  _QWORD *v176;
  unint64_t v177;
  char *v178;
  _DWORD *v179;
  char v180;
  unsigned int v181;
  unint64_t v182;
  char v183;
  char v184;
  unsigned int v185;
  unint64_t v186;
  char v187;
  char *v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  uint64_t v204;
  char v205;
  unsigned int v206;
  unint64_t v208;
  char v209;
  uint64_t v210;
  unint64_t v211;
  char v212;
  _DWORD *v213;
  int v214;
  unint64_t v215;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v14 = 0;
      v15 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v16 = v2 + 1;
        v17 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v16;
        v11 |= (unint64_t)(v17 & 0x7F) << v14;
        if ((v17 & 0x80) == 0)
          goto LABEL_21;
        v14 += 7;
        v2 = v16;
        v97 = v15++ > 8;
        if (v97)
          goto LABEL_19;
      }
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v97 = v10++ > 8;
      if (v97)
        goto LABEL_19;
    }
LABEL_21:
    v18 = v11 & 7;
    if (v18 == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    v19 = v11 >> 3;
    if ((int)(v11 >> 3) > 100)
      break;
    switch((int)v19)
    {
      case 1:
        *((_DWORD *)this + 38) |= 0x80u;
        v20 = *((_QWORD *)a2 + 1);
        if (v20 > 0xFFFFFFFFFFFFFFFBLL || v20 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_340;
        *((_DWORD *)this + 28) = *(_DWORD *)(*(_QWORD *)a2 + v20);
        goto LABEL_342;
      case 2:
        *((_DWORD *)this + 38) |= 8u;
        v37 = *((_QWORD *)a2 + 1);
        v38 = *((_QWORD *)a2 + 2);
        v39 = *(_QWORD *)a2;
        if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
        {
          v40 = 0;
          v41 = 0;
          v42 = 0;
          do
          {
            v43 = v37 + 1;
            *((_QWORD *)a2 + 1) = v37 + 1;
            v44 = *(_BYTE *)(v39 + v37);
            v42 |= (unint64_t)(v44 & 0x7F) << v40;
            if ((v44 & 0x80) == 0)
              goto LABEL_289;
            v40 += 7;
            v37 = v43;
            v97 = v41++ > 8;
          }
          while (!v97);
LABEL_204:
          v42 = 0;
          goto LABEL_289;
        }
        v154 = 0;
        v155 = 0;
        v42 = 0;
        if (v38 <= v37)
          v38 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v38 == v37)
          {
            v42 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v156 = v37 + 1;
            v157 = *(_BYTE *)(v39 + v37);
            *((_QWORD *)a2 + 1) = v156;
            v42 |= (unint64_t)(v157 & 0x7F) << v154;
            if (v157 < 0)
            {
              v154 += 7;
              v37 = v156;
              v97 = v155++ > 8;
              if (v97)
                goto LABEL_204;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v42 = 0;
          }
          break;
        }
LABEL_289:
        *((_QWORD *)this + 10) = v42;
        goto LABEL_347;
      case 3:
        *((_DWORD *)this + 38) |= 0x800u;
        v45 = *((_QWORD *)a2 + 1);
        v46 = *((_QWORD *)a2 + 2);
        v47 = *(_QWORD *)a2;
        if (v45 <= 0xFFFFFFFFFFFFFFF5 && v45 + 10 <= v46)
        {
          v48 = 0;
          v49 = 0;
          v50 = 0;
          do
          {
            v51 = v45 + 1;
            *((_QWORD *)a2 + 1) = v45 + 1;
            v52 = *(_BYTE *)(v47 + v45);
            v50 |= (unint64_t)(v52 & 0x7F) << v48;
            if ((v52 & 0x80) == 0)
              goto LABEL_292;
            v48 += 7;
            v45 = v51;
            v97 = v49++ > 8;
          }
          while (!v97);
LABEL_211:
          LODWORD(v50) = 0;
          goto LABEL_292;
        }
        v158 = 0;
        v159 = 0;
        v50 = 0;
        if (v46 <= v45)
          v46 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v46 == v45)
          {
            LODWORD(v50) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v160 = v45 + 1;
            v161 = *(_BYTE *)(v47 + v45);
            *((_QWORD *)a2 + 1) = v160;
            v50 |= (unint64_t)(v161 & 0x7F) << v158;
            if (v161 < 0)
            {
              v158 += 7;
              v45 = v160;
              v97 = v159++ > 8;
              if (v97)
                goto LABEL_211;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v50) = 0;
          }
          break;
        }
LABEL_292:
        *((_DWORD *)this + 32) = v50;
        goto LABEL_347;
      case 4:
        *((_DWORD *)this + 38) |= 0x10u;
        v53 = *((_QWORD *)a2 + 1);
        v54 = *((_QWORD *)a2 + 2);
        v55 = *(_QWORD *)a2;
        if (v53 <= 0xFFFFFFFFFFFFFFF5 && v53 + 10 <= v54)
        {
          v56 = 0;
          v57 = 0;
          v58 = 0;
          do
          {
            v59 = v53 + 1;
            *((_QWORD *)a2 + 1) = v53 + 1;
            v60 = *(_BYTE *)(v55 + v53);
            v58 |= (unint64_t)(v60 & 0x7F) << v56;
            if ((v60 & 0x80) == 0)
              goto LABEL_295;
            v56 += 7;
            v53 = v59;
            v97 = v57++ > 8;
          }
          while (!v97);
LABEL_218:
          v58 = 0;
          goto LABEL_295;
        }
        v162 = 0;
        v163 = 0;
        v58 = 0;
        if (v54 <= v53)
          v54 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v54 == v53)
          {
            v58 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v164 = v53 + 1;
            v165 = *(_BYTE *)(v55 + v53);
            *((_QWORD *)a2 + 1) = v164;
            v58 |= (unint64_t)(v165 & 0x7F) << v162;
            if (v165 < 0)
            {
              v162 += 7;
              v53 = v164;
              v97 = v163++ > 8;
              if (v97)
                goto LABEL_218;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v58 = 0;
          }
          break;
        }
LABEL_295:
        *((_QWORD *)this + 11) = v58;
        goto LABEL_347;
      case 5:
        *((_DWORD *)this + 38) |= 0x4000u;
        v61 = *((_QWORD *)a2 + 1);
        if (v61 > 0xFFFFFFFFFFFFFFFBLL || v61 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_340;
        *((_DWORD *)this + 35) = *(_DWORD *)(*(_QWORD *)a2 + v61);
        goto LABEL_342;
      case 6:
        *((_DWORD *)this + 38) |= 0x8000u;
        v62 = *((_QWORD *)a2 + 1);
        if (v62 > 0xFFFFFFFFFFFFFFFBLL || v62 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_340;
        *((_DWORD *)this + 36) = *(_DWORD *)(*(_QWORD *)a2 + v62);
        goto LABEL_342;
      case 7:
        *((_DWORD *)this + 38) |= 0x200u;
        v63 = *((_QWORD *)a2 + 1);
        if (v63 > 0xFFFFFFFFFFFFFFFBLL || v63 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_340;
        *((_DWORD *)this + 30) = *(_DWORD *)(*(_QWORD *)a2 + v63);
        goto LABEL_342;
      case 8:
        *((_DWORD *)this + 38) |= 0x400u;
        v64 = *((_QWORD *)a2 + 1);
        if (v64 > 0xFFFFFFFFFFFFFFFBLL || v64 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_340;
        *((_DWORD *)this + 31) = *(_DWORD *)(*(_QWORD *)a2 + v64);
        goto LABEL_342;
      case 9:
        *((_DWORD *)this + 38) |= 0x20u;
        v65 = *((_QWORD *)a2 + 1);
        v66 = *((_QWORD *)a2 + 2);
        v67 = *(_QWORD *)a2;
        if (v65 <= 0xFFFFFFFFFFFFFFF5 && v65 + 10 <= v66)
        {
          v68 = 0;
          v69 = 0;
          v70 = 0;
          do
          {
            v71 = v65 + 1;
            *((_QWORD *)a2 + 1) = v65 + 1;
            v72 = *(_BYTE *)(v67 + v65);
            v70 |= (unint64_t)(v72 & 0x7F) << v68;
            if ((v72 & 0x80) == 0)
              goto LABEL_298;
            v68 += 7;
            v65 = v71;
            v97 = v69++ > 8;
          }
          while (!v97);
LABEL_225:
          v70 = 0;
          goto LABEL_298;
        }
        v166 = 0;
        v167 = 0;
        v70 = 0;
        if (v66 <= v65)
          v66 = *((_QWORD *)a2 + 1);
        break;
      case 10:
        *((_DWORD *)this + 38) |= 0x100u;
        v73 = *((_QWORD *)a2 + 1);
        if (v73 > 0xFFFFFFFFFFFFFFFBLL || v73 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_340;
        *((_DWORD *)this + 29) = *(_DWORD *)(*(_QWORD *)a2 + v73);
        goto LABEL_342;
      default:
        goto LABEL_19;
    }
    while (1)
    {
      if (v66 == v65)
      {
        v70 = 0;
        *((_BYTE *)a2 + 24) = 1;
        goto LABEL_298;
      }
      v168 = v65 + 1;
      v169 = *(_BYTE *)(v67 + v65);
      *((_QWORD *)a2 + 1) = v168;
      v70 |= (unint64_t)(v169 & 0x7F) << v166;
      if ((v169 & 0x80) == 0)
        break;
      v166 += 7;
      v65 = v168;
      v97 = v167++ > 8;
      if (v97)
        goto LABEL_225;
    }
    if (*((_BYTE *)a2 + 24))
      v70 = 0;
LABEL_298:
    *((_QWORD *)this + 12) = v70;
LABEL_347:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  switch((int)v19)
  {
    case 201:
      *((_DWORD *)this + 38) |= 0x1000u;
      v21 = *((_QWORD *)a2 + 1);
      v22 = *((_QWORD *)a2 + 2);
      v23 = *(_QWORD *)a2;
      if (v21 <= 0xFFFFFFFFFFFFFFF5 && v21 + 10 <= v22)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        do
        {
          v27 = v21 + 1;
          *((_QWORD *)a2 + 1) = v21 + 1;
          v28 = *(_BYTE *)(v23 + v21);
          v26 |= (unint64_t)(v28 & 0x7F) << v24;
          if ((v28 & 0x80) == 0)
            goto LABEL_283;
          v24 += 7;
          v21 = v27;
          v97 = v25++ > 8;
        }
        while (!v97);
LABEL_190:
        LODWORD(v26) = 0;
        goto LABEL_283;
      }
      v146 = 0;
      v147 = 0;
      v26 = 0;
      if (v22 <= v21)
        v22 = *((_QWORD *)a2 + 1);
      while (2)
      {
        if (v22 == v21)
        {
          LODWORD(v26) = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v148 = v21 + 1;
          v149 = *(_BYTE *)(v23 + v21);
          *((_QWORD *)a2 + 1) = v148;
          v26 |= (unint64_t)(v149 & 0x7F) << v146;
          if (v149 < 0)
          {
            v146 += 7;
            v21 = v148;
            v97 = v147++ > 8;
            if (v97)
              goto LABEL_190;
            continue;
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v26) = 0;
        }
        break;
      }
LABEL_283:
      *((_DWORD *)this + 33) = v26;
      goto LABEL_347;
    case 202:
      *((_DWORD *)this + 38) |= 4u;
      v74 = *((_QWORD *)a2 + 1);
      v75 = *((_QWORD *)a2 + 2);
      v76 = *(_QWORD *)a2;
      if (v74 <= 0xFFFFFFFFFFFFFFF5 && v74 + 10 <= v75)
      {
        v77 = 0;
        v78 = 0;
        v79 = 0;
        do
        {
          v80 = v74 + 1;
          *((_QWORD *)a2 + 1) = v74 + 1;
          v81 = *(_BYTE *)(v76 + v74);
          v79 |= (unint64_t)(v81 & 0x7F) << v77;
          if ((v81 & 0x80) == 0)
            goto LABEL_301;
          v77 += 7;
          v74 = v80;
          v97 = v78++ > 8;
        }
        while (!v97);
LABEL_232:
        v79 = 0;
        goto LABEL_301;
      }
      v170 = 0;
      v171 = 0;
      v79 = 0;
      if (v75 <= v74)
        v75 = *((_QWORD *)a2 + 1);
      while (2)
      {
        if (v75 == v74)
        {
          v79 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v172 = v74 + 1;
          v173 = *(_BYTE *)(v76 + v74);
          *((_QWORD *)a2 + 1) = v172;
          v79 |= (unint64_t)(v173 & 0x7F) << v170;
          if (v173 < 0)
          {
            v170 += 7;
            v74 = v172;
            v97 = v171++ > 8;
            if (v97)
              goto LABEL_232;
            continue;
          }
          if (*((_BYTE *)a2 + 24))
            v79 = 0;
        }
        break;
      }
LABEL_301:
      *((_QWORD *)this + 9) = v79;
      goto LABEL_347;
    case 203:
      *((_DWORD *)this + 38) |= 0x2000u;
      v82 = *((_QWORD *)a2 + 1);
      if (v82 > 0xFFFFFFFFFFFFFFFBLL || v82 + 4 > *((_QWORD *)a2 + 2))
        goto LABEL_340;
      *((_DWORD *)this + 34) = *(_DWORD *)(*(_QWORD *)a2 + v82);
      goto LABEL_342;
    case 204:
      if (v18 != 2)
      {
        v175 = (char *)*((_QWORD *)this + 2);
        v174 = *((_QWORD *)this + 3);
        if ((unint64_t)v175 >= v174)
        {
          v188 = (char *)*((_QWORD *)this + 1);
          v189 = (v175 - v188) >> 3;
          v190 = v189 + 1;
          if ((unint64_t)(v189 + 1) >> 61)
LABEL_357:
            sub_242729A44();
          v191 = v174 - (_QWORD)v188;
          if (v191 >> 2 > v190)
            v190 = v191 >> 2;
          if ((unint64_t)v191 >= 0x7FFFFFFFFFFFFFF8)
            v192 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v192 = v190;
          if (v192)
          {
            v192 = (unint64_t)sub_2429112FC(v192);
            v188 = (char *)*((_QWORD *)this + 1);
            v175 = (char *)*((_QWORD *)this + 2);
          }
          else
          {
            v193 = 0;
          }
          v200 = (_QWORD *)(v192 + 8 * v189);
          *v200 = 0;
          v176 = v200 + 1;
          while (v175 != v188)
          {
            v201 = *((_QWORD *)v175 - 1);
            v175 -= 8;
            *--v200 = v201;
          }
          *((_QWORD *)this + 1) = v200;
          *((_QWORD *)this + 2) = v176;
          *((_QWORD *)this + 3) = v192 + 8 * v193;
          if (v188)
            operator delete(v188);
        }
        else
        {
          *(_QWORD *)v175 = 0;
          v176 = v175 + 8;
        }
        *((_QWORD *)this + 2) = v176;
        v202 = *((_QWORD *)a2 + 1);
        v203 = *((_QWORD *)a2 + 2);
        v204 = *(_QWORD *)a2;
        v205 = 0;
        v206 = 0;
        if (v202 > 0xFFFFFFFFFFFFFFF5 || v202 + 10 > v203)
        {
          v210 = 0;
          if (v203 <= v202)
            v203 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v203 == v202)
            {
              v210 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_346;
            }
            v208 = v202 + 1;
            v209 = *(_BYTE *)(v204 + v202);
            *((_QWORD *)a2 + 1) = v208;
            v210 |= (unint64_t)(v209 & 0x7F) << v205;
            if ((v209 & 0x80) == 0)
              break;
            v205 += 7;
            v202 = v208;
            v97 = v206++ > 8;
            if (v97)
            {
LABEL_331:
              v210 = 0;
              goto LABEL_346;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v210 = 0;
        }
        else
        {
          v210 = 0;
          while (1)
          {
            v211 = v202 + 1;
            *((_QWORD *)a2 + 1) = v202 + 1;
            v212 = *(_BYTE *)(v204 + v202);
            v210 |= (unint64_t)(v212 & 0x7F) << v205;
            if ((v212 & 0x80) == 0)
              break;
            v205 += 7;
            v202 = v211;
            v97 = v206++ > 8;
            if (v97)
              goto LABEL_331;
          }
        }
LABEL_346:
        *(v176 - 1) = v210;
        goto LABEL_347;
      }
      if ((PB::Reader::placeMark() & 1) != 0)
        return 0;
      if (*((_QWORD *)a2 + 1) < *((_QWORD *)a2 + 2) && !*((_BYTE *)a2 + 24))
      {
        v83 = (char *)*((_QWORD *)this + 2);
        do
        {
          v84 = *((_QWORD *)this + 3);
          if ((unint64_t)v83 >= v84)
          {
            v85 = (char *)*((_QWORD *)this + 1);
            v86 = (v83 - v85) >> 3;
            v87 = v86 + 1;
            if ((unint64_t)(v86 + 1) >> 61)
              goto LABEL_357;
            v88 = v84 - (_QWORD)v85;
            if (v88 >> 2 > v87)
              v87 = v88 >> 2;
            if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF8)
              v89 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v89 = v87;
            if (v89)
            {
              v89 = (unint64_t)sub_2429112FC(v89);
              v85 = (char *)*((_QWORD *)this + 1);
              v83 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v90 = 0;
            }
            v91 = (_QWORD *)(v89 + 8 * v86);
            *v91 = 0;
            v92 = (char *)(v91 + 1);
            while (v83 != v85)
            {
              v93 = *((_QWORD *)v83 - 1);
              v83 -= 8;
              *--v91 = v93;
            }
            *((_QWORD *)this + 1) = v91;
            *((_QWORD *)this + 2) = v92;
            *((_QWORD *)this + 3) = v89 + 8 * v90;
            if (v85)
              operator delete(v85);
            v83 = v92;
          }
          else
          {
            *(_QWORD *)v83 = 0;
            v83 += 8;
          }
          *((_QWORD *)this + 2) = v83;
          v95 = *((_QWORD *)a2 + 1);
          v94 = *((_QWORD *)a2 + 2);
          v96 = *(_QWORD *)a2;
          v97 = v95 > 0xFFFFFFFFFFFFFFF5 || v95 + 10 > v94;
          if (!v97)
          {
            v103 = 0;
            v104 = 0;
            v105 = 0;
            while (1)
            {
              v106 = v95 + 1;
              *((_QWORD *)a2 + 1) = v95 + 1;
              v107 = *(_BYTE *)(v96 + v95);
              v105 |= (unint64_t)(v107 & 0x7F) << v103;
              if ((v107 & 0x80) == 0)
                goto LABEL_139;
              v103 += 7;
              v95 = v106;
              v97 = v104++ > 8;
              if (v97)
              {
                v105 = 0;
                goto LABEL_139;
              }
            }
          }
          v98 = 0;
          v99 = 0;
          v105 = 0;
          if (v94 <= v95)
            v100 = *((_QWORD *)a2 + 1);
          else
            v100 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v100 == v95)
            {
              *((_BYTE *)a2 + 24) = 1;
              *((_QWORD *)v83 - 1) = 0;
              goto LABEL_309;
            }
            v101 = v95++;
            v102 = *(_BYTE *)(v96 + v101);
            *((_QWORD *)a2 + 1) = v95;
            v105 |= (unint64_t)(v102 & 0x7F) << v98;
            if ((v102 & 0x80) == 0)
              break;
            v98 += 7;
            v97 = v99++ > 8;
            if (v97)
            {
              v105 = 0;
              goto LABEL_138;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v105 = 0;
LABEL_138:
          v106 = v101 + 1;
LABEL_139:
          *((_QWORD *)v83 - 1) = v105;
        }
        while (v106 < v94 && !*((_BYTE *)a2 + 24));
      }
      goto LABEL_309;
    case 205:
      if (v18 != 2)
      {
        v178 = (char *)*((_QWORD *)this + 5);
        v177 = *((_QWORD *)this + 6);
        if ((unint64_t)v178 >= v177)
        {
          v194 = (char *)*((_QWORD *)this + 4);
          v195 = (v178 - v194) >> 2;
          v196 = v195 + 1;
          if ((unint64_t)(v195 + 1) >> 62)
LABEL_356:
            sub_242729A44();
          v197 = v177 - (_QWORD)v194;
          if (v197 >> 1 > v196)
            v196 = v197 >> 1;
          if ((unint64_t)v197 >= 0x7FFFFFFFFFFFFFFCLL)
            v198 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v198 = v196;
          if (v198)
          {
            v198 = (unint64_t)sub_2429114B8(v198);
            v194 = (char *)*((_QWORD *)this + 4);
            v178 = (char *)*((_QWORD *)this + 5);
          }
          else
          {
            v199 = 0;
          }
          v213 = (_DWORD *)(v198 + 4 * v195);
          *v213 = 0;
          v179 = v213 + 1;
          while (v178 != v194)
          {
            v214 = *((_DWORD *)v178 - 1);
            v178 -= 4;
            *--v213 = v214;
          }
          *((_QWORD *)this + 4) = v213;
          *((_QWORD *)this + 5) = v179;
          *((_QWORD *)this + 6) = v198 + 4 * v199;
          if (v194)
            operator delete(v194);
        }
        else
        {
          *(_DWORD *)v178 = 0;
          v179 = v178 + 4;
        }
        *((_QWORD *)this + 5) = v179;
        v215 = *((_QWORD *)a2 + 1);
        if (v215 <= 0xFFFFFFFFFFFFFFFBLL && v215 + 4 <= *((_QWORD *)a2 + 2))
        {
          *(v179 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v215);
LABEL_342:
          *((_QWORD *)a2 + 1) += 4;
        }
        else
        {
LABEL_340:
          *((_BYTE *)a2 + 24) = 1;
        }
        goto LABEL_347;
      }
      if ((PB::Reader::placeMark() & 1) == 0)
      {
        v108 = *((_QWORD *)a2 + 1);
        v109 = *((_QWORD *)a2 + 2);
        while (v108 < v109 && !*((_BYTE *)a2 + 24))
        {
          v111 = (char *)*((_QWORD *)this + 5);
          v110 = *((_QWORD *)this + 6);
          if ((unint64_t)v111 >= v110)
          {
            v113 = (char *)*((_QWORD *)this + 4);
            v114 = (v111 - v113) >> 2;
            v115 = v114 + 1;
            if ((unint64_t)(v114 + 1) >> 62)
              goto LABEL_356;
            v116 = v110 - (_QWORD)v113;
            if (v116 >> 1 > v115)
              v115 = v116 >> 1;
            if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFFCLL)
              v117 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v117 = v115;
            if (v117)
            {
              v117 = (unint64_t)sub_2429114B8(v117);
              v113 = (char *)*((_QWORD *)this + 4);
              v111 = (char *)*((_QWORD *)this + 5);
            }
            else
            {
              v118 = 0;
            }
            v119 = (_DWORD *)(v117 + 4 * v114);
            *v119 = 0;
            v112 = v119 + 1;
            while (v111 != v113)
            {
              v120 = *((_DWORD *)v111 - 1);
              v111 -= 4;
              *--v119 = v120;
            }
            *((_QWORD *)this + 4) = v119;
            *((_QWORD *)this + 5) = v112;
            *((_QWORD *)this + 6) = v117 + 4 * v118;
            if (v113)
              operator delete(v113);
          }
          else
          {
            *(_DWORD *)v111 = 0;
            v112 = v111 + 4;
          }
          *((_QWORD *)this + 5) = v112;
          v121 = *((_QWORD *)a2 + 1);
          if (v121 > 0xFFFFFFFFFFFFFFFBLL || v121 + 4 > *((_QWORD *)a2 + 2))
          {
            *((_BYTE *)a2 + 24) = 1;
            break;
          }
          *(v112 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v121);
          v109 = *((_QWORD *)a2 + 2);
          v108 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v108;
        }
LABEL_309:
        PB::Reader::recallMark();
        goto LABEL_347;
      }
      return 0;
    case 206:
      *((_DWORD *)this + 38) |= 1u;
      v122 = *((_QWORD *)a2 + 1);
      v123 = *((_QWORD *)a2 + 2);
      v124 = *(_QWORD *)a2;
      if (v122 <= 0xFFFFFFFFFFFFFFF5 && v122 + 10 <= v123)
      {
        v125 = 0;
        v126 = 0;
        v127 = 0;
        do
        {
          v128 = v122 + 1;
          *((_QWORD *)a2 + 1) = v122 + 1;
          v129 = *(_BYTE *)(v124 + v122);
          v127 |= (unint64_t)(v129 & 0x7F) << v125;
          if ((v129 & 0x80) == 0)
            goto LABEL_304;
          v125 += 7;
          v122 = v128;
          v97 = v126++ > 8;
        }
        while (!v97);
LABEL_243:
        v127 = 0;
        goto LABEL_304;
      }
      v180 = 0;
      v181 = 0;
      v127 = 0;
      if (v123 <= v122)
        v123 = *((_QWORD *)a2 + 1);
      while (2)
      {
        if (v123 == v122)
        {
          v127 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v182 = v122 + 1;
          v183 = *(_BYTE *)(v124 + v122);
          *((_QWORD *)a2 + 1) = v182;
          v127 |= (unint64_t)(v183 & 0x7F) << v180;
          if (v183 < 0)
          {
            v180 += 7;
            v122 = v182;
            v97 = v181++ > 8;
            if (v97)
              goto LABEL_243;
            continue;
          }
          if (*((_BYTE *)a2 + 24))
            v127 = 0;
        }
        break;
      }
LABEL_304:
      *((_QWORD *)this + 7) = v127;
      goto LABEL_347;
    case 207:
      *((_DWORD *)this + 38) |= 2u;
      v130 = *((_QWORD *)a2 + 1);
      v131 = *((_QWORD *)a2 + 2);
      v132 = *(_QWORD *)a2;
      if (v130 <= 0xFFFFFFFFFFFFFFF5 && v130 + 10 <= v131)
      {
        v133 = 0;
        v134 = 0;
        v135 = 0;
        do
        {
          v136 = v130 + 1;
          *((_QWORD *)a2 + 1) = v130 + 1;
          v137 = *(_BYTE *)(v132 + v130);
          v135 |= (unint64_t)(v137 & 0x7F) << v133;
          if ((v137 & 0x80) == 0)
            goto LABEL_307;
          v133 += 7;
          v130 = v136;
          v97 = v134++ > 8;
        }
        while (!v97);
LABEL_250:
        v135 = 0;
        goto LABEL_307;
      }
      v184 = 0;
      v185 = 0;
      v135 = 0;
      if (v131 <= v130)
        v131 = *((_QWORD *)a2 + 1);
      while (2)
      {
        if (v131 == v130)
        {
          v135 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v186 = v130 + 1;
          v187 = *(_BYTE *)(v132 + v130);
          *((_QWORD *)a2 + 1) = v186;
          v135 |= (unint64_t)(v187 & 0x7F) << v184;
          if (v187 < 0)
          {
            v184 += 7;
            v130 = v186;
            v97 = v185++ > 8;
            if (v97)
              goto LABEL_250;
            continue;
          }
          if (*((_BYTE *)a2 + 24))
            v135 = 0;
        }
        break;
      }
LABEL_307:
      *((_QWORD *)this + 8) = v135;
      goto LABEL_347;
    case 208:
      *((_DWORD *)this + 38) |= 0x20000u;
      v138 = *((_QWORD *)a2 + 1);
      if (v138 >= *((_QWORD *)a2 + 2))
      {
        v141 = 0;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v139 = v138 + 1;
        v140 = *(unsigned __int8 *)(*(_QWORD *)a2 + v138);
        *((_QWORD *)a2 + 1) = v139;
        v141 = v140 != 0;
      }
      *((_BYTE *)this + 149) = v141;
      goto LABEL_347;
    default:
      if ((_DWORD)v19 == 101)
      {
        *((_DWORD *)this + 38) |= 0x10000u;
        v142 = *((_QWORD *)a2 + 1);
        if (v142 >= *((_QWORD *)a2 + 2))
        {
          v145 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v143 = v142 + 1;
          v144 = *(unsigned __int8 *)(*(_QWORD *)a2 + v142);
          *((_QWORD *)a2 + 1) = v143;
          v145 = v144 != 0;
        }
        *((_BYTE *)this + 148) = v145;
      }
      else if ((_DWORD)v19 == 102)
      {
        *((_DWORD *)this + 38) |= 0x40u;
        v29 = *((_QWORD *)a2 + 1);
        v30 = *((_QWORD *)a2 + 2);
        v31 = *(_QWORD *)a2;
        if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v30)
        {
          v150 = 0;
          v151 = 0;
          v34 = 0;
          if (v30 <= v29)
            v30 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v30 == v29)
            {
              v34 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_286;
            }
            v152 = v29 + 1;
            v153 = *(_BYTE *)(v31 + v29);
            *((_QWORD *)a2 + 1) = v152;
            v34 |= (unint64_t)(v153 & 0x7F) << v150;
            if ((v153 & 0x80) == 0)
              break;
            v150 += 7;
            v29 = v152;
            v97 = v151++ > 8;
            if (v97)
            {
LABEL_197:
              v34 = 0;
              goto LABEL_286;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v34 = 0;
        }
        else
        {
          v32 = 0;
          v33 = 0;
          v34 = 0;
          while (1)
          {
            v35 = v29 + 1;
            *((_QWORD *)a2 + 1) = v29 + 1;
            v36 = *(_BYTE *)(v31 + v29);
            v34 |= (unint64_t)(v36 & 0x7F) << v32;
            if ((v36 & 0x80) == 0)
              break;
            v32 += 7;
            v29 = v35;
            v97 = v33++ > 8;
            if (v97)
              goto LABEL_197;
          }
        }
LABEL_286:
        *((_QWORD *)this + 13) = v34;
      }
      else
      {
LABEL_19:
        if ((PB::Reader::skip(a2) & 1) == 0)
          return 0;
      }
      goto LABEL_347;
  }
}

uint64_t CMMsl::KappaPeakDetectorMapResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  float *v8;
  float v9;
  int v10;

  v3 = this;
  v4 = *(_DWORD *)(this + 152);
  if ((v4 & 0x80) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 112));
    v4 = *(_DWORD *)(v3 + 152);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x800) == 0)
        goto LABEL_4;
      goto LABEL_29;
    }
  }
  else if ((v4 & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x800) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 0x4000) == 0)
      goto LABEL_6;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x4000) == 0)
  {
LABEL_6:
    if ((v4 & 0x8000) == 0)
      goto LABEL_7;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 140));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x8000) == 0)
  {
LABEL_7:
    if ((v4 & 0x200) == 0)
      goto LABEL_8;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 144));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x200) == 0)
  {
LABEL_8:
    if ((v4 & 0x400) == 0)
      goto LABEL_9;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 120));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x400) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 124));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x100) == 0)
  {
LABEL_11:
    if ((v4 & 0x10000) == 0)
      goto LABEL_12;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 116));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x10000) == 0)
  {
LABEL_12:
    if ((v4 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x40) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x1000) == 0)
  {
LABEL_14:
    if ((v4 & 4) == 0)
      goto LABEL_15;
LABEL_40:
    this = PB::Writer::writeVarInt(a2);
    if ((*(_DWORD *)(v3 + 152) & 0x2000) == 0)
      goto LABEL_17;
    goto LABEL_16;
  }
LABEL_39:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 4) != 0)
    goto LABEL_40;
LABEL_15:
  if ((v4 & 0x2000) != 0)
LABEL_16:
    this = PB::Writer::write(a2, *(float *)(v3 + 136));
LABEL_17:
  v5 = *(_QWORD *)(v3 + 8);
  v6 = *(_QWORD *)(v3 + 16);
  while (v5 != v6)
  {
    v5 += 8;
    this = PB::Writer::writeVarInt(a2);
  }
  v7 = *(float **)(v3 + 32);
  v8 = *(float **)(v3 + 40);
  while (v7 != v8)
  {
    v9 = *v7++;
    this = PB::Writer::write(a2, v9);
  }
  v10 = *(_DWORD *)(v3 + 152);
  if ((v10 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v10 = *(_DWORD *)(v3 + 152);
    if ((v10 & 2) == 0)
    {
LABEL_25:
      if ((v10 & 0x20000) == 0)
        return this;
      return PB::Writer::write(a2);
    }
  }
  else if ((v10 & 2) == 0)
  {
    goto LABEL_25;
  }
  this = PB::Writer::writeVarInt(a2);
  if ((*(_DWORD *)(v3 + 152) & 0x20000) != 0)
    return PB::Writer::write(a2);
  return this;
}

uint64_t CMMsl::KappaPeakDetectorMapResult::hash_value(CMMsl::KappaPeakDetectorMapResult *this)
{
  int v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v2 = *((_DWORD *)this + 38);
  if ((v2 & 0x80) != 0)
  {
    v20 = *((float *)this + 28);
    v21 = LODWORD(v20);
    if (v20 == 0.0)
      v21 = 0;
    v35 = v21;
    if ((v2 & 8) != 0)
    {
LABEL_3:
      v34 = *((_QWORD *)this + 10);
      if ((v2 & 0x800) != 0)
        goto LABEL_4;
      goto LABEL_35;
    }
  }
  else
  {
    v35 = 0;
    if ((v2 & 8) != 0)
      goto LABEL_3;
  }
  v34 = 0;
  if ((v2 & 0x800) != 0)
  {
LABEL_4:
    v33 = *((unsigned int *)this + 32);
    if ((v2 & 0x10) != 0)
      goto LABEL_5;
    goto LABEL_36;
  }
LABEL_35:
  v33 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    v32 = *((_QWORD *)this + 11);
    if ((v2 & 0x4000) != 0)
      goto LABEL_6;
LABEL_37:
    v31 = 0;
    if ((v2 & 0x8000) != 0)
      goto LABEL_9;
LABEL_38:
    v30 = 0;
    if ((v2 & 0x200) != 0)
      goto LABEL_12;
LABEL_39:
    v29 = 0;
    if ((v2 & 0x400) != 0)
      goto LABEL_15;
LABEL_40:
    v10 = 0;
    if ((v2 & 0x20) != 0)
      goto LABEL_19;
    goto LABEL_41;
  }
LABEL_36:
  v32 = 0;
  if ((v2 & 0x4000) == 0)
    goto LABEL_37;
LABEL_6:
  v3 = *((float *)this + 35);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  v31 = v4;
  if ((v2 & 0x8000) == 0)
    goto LABEL_38;
LABEL_9:
  v5 = *((float *)this + 36);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  v30 = v6;
  if ((v2 & 0x200) == 0)
    goto LABEL_39;
LABEL_12:
  v7 = *((float *)this + 30);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  v29 = v8;
  if ((v2 & 0x400) == 0)
    goto LABEL_40;
LABEL_15:
  v9 = *((float *)this + 31);
  if (v9 == 0.0)
    v10 = 0;
  else
    v10 = LODWORD(v9);
  if ((v2 & 0x20) != 0)
  {
LABEL_19:
    v11 = *((_QWORD *)this + 12);
    if ((v2 & 0x100) != 0)
      goto LABEL_20;
LABEL_42:
    v13 = 0;
    if ((v2 & 0x10000) != 0)
      goto LABEL_24;
    goto LABEL_43;
  }
LABEL_41:
  v11 = 0;
  if ((v2 & 0x100) == 0)
    goto LABEL_42;
LABEL_20:
  v12 = *((float *)this + 29);
  if (v12 == 0.0)
    v13 = 0;
  else
    v13 = LODWORD(v12);
  if ((v2 & 0x10000) != 0)
  {
LABEL_24:
    v14 = *((unsigned __int8 *)this + 148);
    if ((v2 & 0x40) != 0)
      goto LABEL_25;
    goto LABEL_44;
  }
LABEL_43:
  v14 = 0;
  if ((v2 & 0x40) != 0)
  {
LABEL_25:
    v15 = *((_QWORD *)this + 13);
    if ((v2 & 0x1000) != 0)
      goto LABEL_26;
    goto LABEL_45;
  }
LABEL_44:
  v15 = 0;
  if ((v2 & 0x1000) != 0)
  {
LABEL_26:
    v16 = *((int *)this + 33);
    if ((v2 & 4) != 0)
      goto LABEL_27;
    goto LABEL_46;
  }
LABEL_45:
  v16 = 0;
  if ((v2 & 4) != 0)
  {
LABEL_27:
    v17 = *((_QWORD *)this + 9);
    if ((v2 & 0x2000) != 0)
      goto LABEL_28;
LABEL_47:
    v19 = 0;
    goto LABEL_48;
  }
LABEL_46:
  v17 = 0;
  if ((v2 & 0x2000) == 0)
    goto LABEL_47;
LABEL_28:
  v18 = *((float *)this + 34);
  if (v18 == 0.0)
    v19 = 0;
  else
    v19 = LODWORD(v18);
LABEL_48:
  v22 = PBHashBytes();
  v23 = PBHashBytes();
  v24 = *((_DWORD *)this + 38);
  if ((v24 & 1) == 0)
  {
    v25 = 0;
    if ((v24 & 2) != 0)
      goto LABEL_50;
LABEL_53:
    v26 = 0;
    if ((v24 & 0x20000) != 0)
      goto LABEL_51;
LABEL_54:
    v27 = 0;
    return v34 ^ v35 ^ v33 ^ v32 ^ v31 ^ v30 ^ v29 ^ v10 ^ v11 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v19 ^ v22 ^ v23 ^ v25 ^ v26 ^ v27;
  }
  v25 = *((_QWORD *)this + 7);
  if ((v24 & 2) == 0)
    goto LABEL_53;
LABEL_50:
  v26 = *((_QWORD *)this + 8);
  if ((v24 & 0x20000) == 0)
    goto LABEL_54;
LABEL_51:
  v27 = *((unsigned __int8 *)this + 149);
  return v34 ^ v35 ^ v33 ^ v32 ^ v31 ^ v30 ^ v29 ^ v10 ^ v11 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v19 ^ v22 ^ v23 ^ v25 ^ v26 ^ v27;
}

void CMMsl::KappaPulseDeltaV::~KappaPulseDeltaV(CMMsl::KappaPulseDeltaV *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::KappaPulseDeltaV::KappaPulseDeltaV(uint64_t this, const CMMsl::KappaPulseDeltaV *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  char v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)this = &off_25135EA20;
  *(_DWORD *)(this + 72) = 0;
  *(_DWORD *)(this + 112) = 0;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x40) != 0)
  {
    v4 = *((_QWORD *)a2 + 7);
    v3 = 64;
    *(_DWORD *)(this + 112) = 64;
    *(_QWORD *)(this + 56) = v4;
    v2 = *((_DWORD *)a2 + 28);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 8) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 4);
    v3 |= 8u;
    *(_DWORD *)(this + 112) = v3;
    *(_QWORD *)(this + 32) = v5;
    v2 = *((_DWORD *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    v6 = *((_QWORD *)a2 + 1);
    v3 |= 1u;
    *(_DWORD *)(this + 112) = v3;
    *(_QWORD *)(this + 8) = v6;
    v2 = *((_DWORD *)a2 + 28);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 0x1000) == 0)
        goto LABEL_9;
      goto LABEL_26;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 16);
  v3 |= 0x80u;
  *(_DWORD *)(this + 112) = v3;
  *(_DWORD *)(this + 64) = v7;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x1000) == 0)
  {
LABEL_9:
    if ((v2 & 0x4000) == 0)
      goto LABEL_10;
    goto LABEL_27;
  }
LABEL_26:
  v8 = *((_DWORD *)a2 + 21);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 112) = v3;
  *(_DWORD *)(this + 84) = v8;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x4000) == 0)
  {
LABEL_10:
    if ((v2 & 0x10000) == 0)
      goto LABEL_11;
    goto LABEL_28;
  }
LABEL_27:
  v9 = *((_DWORD *)a2 + 23);
  v3 |= 0x4000u;
  *(_DWORD *)(this + 112) = v3;
  *(_DWORD *)(this + 92) = v9;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x10000) == 0)
  {
LABEL_11:
    if ((v2 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_29;
  }
LABEL_28:
  v10 = *((_DWORD *)a2 + 25);
  v3 |= 0x10000u;
  *(_DWORD *)(this + 112) = v3;
  *(_DWORD *)(this + 100) = v10;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x400) == 0)
  {
LABEL_12:
    if ((v2 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_30;
  }
LABEL_29:
  v11 = *((_DWORD *)a2 + 19);
  v3 |= 0x400u;
  *(_DWORD *)(this + 112) = v3;
  *(_DWORD *)(this + 76) = v11;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x2000) == 0)
  {
LABEL_13:
    if ((v2 & 0x8000) == 0)
      goto LABEL_14;
    goto LABEL_31;
  }
LABEL_30:
  v12 = *((_DWORD *)a2 + 22);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 112) = v3;
  *(_DWORD *)(this + 88) = v12;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x8000) == 0)
  {
LABEL_14:
    if ((v2 & 0x20000) == 0)
      goto LABEL_15;
    goto LABEL_32;
  }
LABEL_31:
  v13 = *((_DWORD *)a2 + 24);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 112) = v3;
  *(_DWORD *)(this + 96) = v13;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x20000) == 0)
  {
LABEL_15:
    if ((v2 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_33;
  }
LABEL_32:
  v14 = *((_DWORD *)a2 + 26);
  v3 |= 0x20000u;
  *(_DWORD *)(this + 112) = v3;
  *(_DWORD *)(this + 104) = v14;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x800) == 0)
  {
LABEL_16:
    if ((v2 & 0x100) == 0)
      goto LABEL_17;
    goto LABEL_34;
  }
LABEL_33:
  v15 = *((_DWORD *)a2 + 20);
  v3 |= 0x800u;
  *(_DWORD *)(this + 112) = v3;
  *(_DWORD *)(this + 80) = v15;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x100) == 0)
  {
LABEL_17:
    if ((v2 & 0x40000) == 0)
      goto LABEL_18;
    goto LABEL_35;
  }
LABEL_34:
  v16 = *((_DWORD *)a2 + 17);
  v3 |= 0x100u;
  *(_DWORD *)(this + 112) = v3;
  *(_DWORD *)(this + 68) = v16;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x40000) == 0)
  {
LABEL_18:
    if ((v2 & 0x200) == 0)
      goto LABEL_19;
    goto LABEL_36;
  }
LABEL_35:
  v17 = *((_BYTE *)a2 + 108);
  v3 |= 0x40000u;
  *(_DWORD *)(this + 112) = v3;
  *(_BYTE *)(this + 108) = v17;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x200) == 0)
  {
LABEL_19:
    if ((v2 & 2) == 0)
      goto LABEL_20;
    goto LABEL_37;
  }
LABEL_36:
  v18 = *((_DWORD *)a2 + 18);
  v3 |= 0x200u;
  *(_DWORD *)(this + 112) = v3;
  *(_DWORD *)(this + 72) = v18;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 2) == 0)
  {
LABEL_20:
    if ((v2 & 0x20) == 0)
      goto LABEL_21;
    goto LABEL_38;
  }
LABEL_37:
  v19 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_DWORD *)(this + 112) = v3;
  *(_QWORD *)(this + 16) = v19;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x20) == 0)
  {
LABEL_21:
    if ((v2 & 0x10) == 0)
      goto LABEL_22;
    goto LABEL_39;
  }
LABEL_38:
  v20 = *((_QWORD *)a2 + 6);
  v3 |= 0x20u;
  *(_DWORD *)(this + 112) = v3;
  *(_QWORD *)(this + 48) = v20;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x10) == 0)
  {
LABEL_22:
    if ((v2 & 4) == 0)
      return this;
LABEL_40:
    v22 = *((_QWORD *)a2 + 3);
    *(_DWORD *)(this + 112) = v3 | 4;
    *(_QWORD *)(this + 24) = v22;
    return this;
  }
LABEL_39:
  v21 = *((_QWORD *)a2 + 5);
  v3 |= 0x10u;
  *(_DWORD *)(this + 112) = v3;
  *(_QWORD *)(this + 40) = v21;
  if ((*((_DWORD *)a2 + 28) & 4) != 0)
    goto LABEL_40;
  return this;
}

CMMsl *CMMsl::KappaPulseDeltaV::operator=(CMMsl *a1, const CMMsl::KappaPulseDeltaV *a2)
{
  CMMsl::KappaPulseDeltaV *v3;
  _BYTE v5[120];

  if (a1 != a2)
  {
    CMMsl::KappaPulseDeltaV::KappaPulseDeltaV((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaPulseDeltaV *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaPulseDeltaV *a2, CMMsl::KappaPulseDeltaV *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  float result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v3;
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v4;
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v5;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  v7 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v7;
  v8 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v8;
  v9 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v9;
  v10 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v10;
  v11 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v11;
  v12 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v12;
  v13 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v13;
  v14 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v14;
  v15 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v15;
  result = *((float *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((float *)a2 + 17) = result;
  LOBYTE(v6) = *((_BYTE *)this + 108);
  *((_BYTE *)this + 108) = *((_BYTE *)a2 + 108);
  *((_BYTE *)a2 + 108) = v6;
  LODWORD(v6) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v6;
  v17 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v17;
  v18 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v18;
  v19 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v19;
  v20 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v20;
  return result;
}

float CMMsl::KappaPulseDeltaV::KappaPulseDeltaV(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135EA20;
  *(_DWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  result = *(float *)(a2 + 68);
  *(float *)(a1 + 68) = result;
  *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return result;
}

CMMsl *CMMsl::KappaPulseDeltaV::operator=(CMMsl *this, uint64_t a2, CMMsl::KappaPulseDeltaV *a3)
{
  __int128 v4;
  __int128 v5;
  void (**v7)(CMMsl::KappaPulseDeltaV *__hidden);
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  __int128 v15;
  char v16;
  int v17;

  if (this != (CMMsl *)a2)
  {
    v7 = &off_25135EA20;
    v17 = *(_DWORD *)(a2 + 112);
    *(_DWORD *)(a2 + 112) = 0;
    v11 = *(_QWORD *)(a2 + 56);
    v15 = *(_OWORD *)(a2 + 92);
    v14 = *(_OWORD *)(a2 + 76);
    v12 = *(_QWORD *)(a2 + 64);
    v16 = *(_BYTE *)(a2 + 108);
    v13 = *(_DWORD *)(a2 + 72);
    v4 = *(_OWORD *)(a2 + 8);
    v10 = *(_OWORD *)(a2 + 40);
    v5 = *(_OWORD *)(a2 + 24);
    v8 = v4;
    v9 = v5;
    CMMsl::swap(this, (CMMsl::KappaPulseDeltaV *)&v7, a3);
    PB::Base::~Base((PB::Base *)&v7);
  }
  return this;
}

uint64_t CMMsl::KappaPulseDeltaV::formatText(CMMsl::KappaPulseDeltaV *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x80) != 0)
  {
    PB::TextFormatter::format(a2, "accelMagnitude", *((float *)this + 16));
    v5 = *((_DWORD *)this + 28);
    if ((v5 & 0x100) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
      goto LABEL_24;
    }
  }
  else if ((v5 & 0x100) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "deltaVThisImpact", *((float *)this + 17));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0)
      goto LABEL_5;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "dimensions");
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0)
      goto LABEL_6;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "epochCounter");
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0)
      goto LABEL_7;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "jHG");
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "jImpactStart");
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "jLG");
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v5 & 0x40000) == 0)
      goto LABEL_10;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "nextTimestamp");
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x40000) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "partOfHgPath");
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "pointType");
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "runningArclengthOverEpoch", *((float *)this + 19));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "runningArclengthThisImpact", *((float *)this + 20));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "runningDeltaVXOverEpoch", *((float *)this + 21));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "runningDeltaVXThisImpact", *((float *)this + 22));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "runningDeltaVYOverEpoch", *((float *)this + 23));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "runningDeltaVYThisImpact", *((float *)this + 24));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0)
      goto LABEL_19;
LABEL_39:
    PB::TextFormatter::format(a2, "runningDeltaVZThisImpact", *((float *)this + 26));
    if ((*((_DWORD *)this + 28) & 0x40) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_20;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "runningDeltaVZOverEpoch", *((float *)this + 25));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x20000) != 0)
    goto LABEL_39;
LABEL_19:
  if ((v5 & 0x40) != 0)
LABEL_20:
    PB::TextFormatter::format(a2, "timestamp");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaPulseDeltaV::readFrom(CMMsl::KappaPulseDeltaV *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  char v37;
  int v38;
  BOOL v39;
  unint64_t v40;
  uint64_t v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  char v51;
  unint64_t v52;
  uint64_t v53;
  char v54;
  unsigned int v55;
  uint64_t v56;
  char v57;
  unint64_t v58;
  uint64_t v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  char v63;
  unint64_t v64;
  uint64_t v65;
  char v66;
  unsigned int v67;
  uint64_t v68;
  char v69;
  char v70;
  unsigned int v71;
  unint64_t v72;
  char v73;
  char v74;
  unsigned int v75;
  unint64_t v76;
  char v77;
  char v78;
  unsigned int v79;
  unint64_t v80;
  char v81;
  char v82;
  unsigned int v83;
  unint64_t v84;
  char v85;
  char v86;
  unsigned int v87;
  unint64_t v88;
  char v89;
  char v90;
  unsigned int v91;
  unint64_t v92;
  char v93;
  char v94;
  unsigned int v95;
  unint64_t v96;
  char v97;
  char v98;
  unsigned int v99;
  unint64_t v100;
  char v101;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_211;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 28) |= 0x40u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v70 = 0;
          v71 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              v24 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_175;
            }
            v72 = v20++;
            v73 = *(_BYTE *)(v21 + v72);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v73 & 0x7F) << v70;
            if ((v73 & 0x80) == 0)
              break;
            v70 += 7;
            v14 = v71++ > 8;
            if (v14)
            {
              v24 = 0;
LABEL_174:
              v2 = v72 + 1;
              goto LABEL_175;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v24 = 0;
          goto LABEL_174;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_175;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        v24 = 0;
LABEL_175:
        *((_QWORD *)this + 7) = v24;
        break;
      case 2u:
        *((_DWORD *)this + 28) |= 8u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v74 = 0;
          v75 = 0;
          v30 = 0;
          if (v2 <= v26)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v26)
            {
              v30 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_180;
            }
            v76 = v26++;
            v77 = *(_BYTE *)(v27 + v76);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v77 & 0x7F) << v74;
            if ((v77 & 0x80) == 0)
              break;
            v74 += 7;
            v14 = v75++ > 8;
            if (v14)
            {
              v30 = 0;
LABEL_179:
              v2 = v76 + 1;
              goto LABEL_180;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v30 = 0;
          goto LABEL_179;
        }
        v28 = 0;
        v29 = 0;
        v30 = 0;
        do
        {
          v2 = v26 + 1;
          *((_QWORD *)a2 + 1) = v26 + 1;
          v31 = *(_BYTE *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0)
            goto LABEL_180;
          v28 += 7;
          v26 = v2;
          v14 = v29++ > 8;
        }
        while (!v14);
        v30 = 0;
LABEL_180:
        *((_QWORD *)this + 4) = -(v30 & 1) ^ (v30 >> 1);
        break;
      case 3u:
        *((_DWORD *)this + 28) |= 1u;
        v32 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v33 = *(_QWORD *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
        {
          v78 = 0;
          v79 = 0;
          v36 = 0;
          if (v2 <= v32)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v32)
            {
              v36 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_185;
            }
            v80 = v32++;
            v81 = *(_BYTE *)(v33 + v80);
            *((_QWORD *)a2 + 1) = v32;
            v36 |= (unint64_t)(v81 & 0x7F) << v78;
            if ((v81 & 0x80) == 0)
              break;
            v78 += 7;
            v14 = v79++ > 8;
            if (v14)
            {
              v36 = 0;
LABEL_184:
              v2 = v80 + 1;
              goto LABEL_185;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v36 = 0;
          goto LABEL_184;
        }
        v34 = 0;
        v35 = 0;
        v36 = 0;
        do
        {
          v2 = v32 + 1;
          *((_QWORD *)a2 + 1) = v32 + 1;
          v37 = *(_BYTE *)(v33 + v32);
          v36 |= (unint64_t)(v37 & 0x7F) << v34;
          if ((v37 & 0x80) == 0)
            goto LABEL_185;
          v34 += 7;
          v32 = v2;
          v14 = v35++ > 8;
        }
        while (!v14);
        v36 = 0;
LABEL_185:
        *((_QWORD *)this + 1) = v36;
        break;
      case 4u:
        *((_DWORD *)this + 28) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_73;
        *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_170;
      case 5u:
        *((_DWORD *)this + 28) |= 0x1000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_73;
        *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_170;
      case 6u:
        *((_DWORD *)this + 28) |= 0x4000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_73;
        *((_DWORD *)this + 23) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_170;
      case 7u:
        *((_DWORD *)this + 28) |= 0x10000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_73;
        *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_170;
      case 8u:
        *((_DWORD *)this + 28) |= 0x400u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_73;
        *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_170;
      case 9u:
        *((_DWORD *)this + 28) |= 0x2000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_73;
        *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_170;
      case 0xAu:
        *((_DWORD *)this + 28) |= 0x8000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_73;
        *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_170;
      case 0xBu:
        *((_DWORD *)this + 28) |= 0x20000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_73;
        *((_DWORD *)this + 26) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_170;
      case 0xCu:
        *((_DWORD *)this + 28) |= 0x800u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_73;
        *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_170;
      case 0xDu:
        *((_DWORD *)this + 28) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_170:
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_73:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 0xEu:
        *((_DWORD *)this + 28) |= 0x40000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v39 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v38 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v39 = v38 != 0;
        }
        *((_BYTE *)this + 108) = v39;
        break;
      case 0xFu:
        *((_DWORD *)this + 28) |= 0x200u;
        v40 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v41 = *(_QWORD *)a2;
        if (v40 > 0xFFFFFFFFFFFFFFF5 || v40 + 10 > v2)
        {
          v82 = 0;
          v83 = 0;
          v44 = 0;
          if (v2 <= v40)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v40)
            {
              LODWORD(v44) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_190;
            }
            v84 = v40++;
            v85 = *(_BYTE *)(v41 + v84);
            *((_QWORD *)a2 + 1) = v40;
            v44 |= (unint64_t)(v85 & 0x7F) << v82;
            if ((v85 & 0x80) == 0)
              break;
            v82 += 7;
            v14 = v83++ > 8;
            if (v14)
            {
              LODWORD(v44) = 0;
LABEL_189:
              v2 = v84 + 1;
              goto LABEL_190;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v44) = 0;
          goto LABEL_189;
        }
        v42 = 0;
        v43 = 0;
        v44 = 0;
        do
        {
          v2 = v40 + 1;
          *((_QWORD *)a2 + 1) = v40 + 1;
          v45 = *(_BYTE *)(v41 + v40);
          v44 |= (unint64_t)(v45 & 0x7F) << v42;
          if ((v45 & 0x80) == 0)
            goto LABEL_190;
          v42 += 7;
          v40 = v2;
          v14 = v43++ > 8;
        }
        while (!v14);
        LODWORD(v44) = 0;
LABEL_190:
        *((_DWORD *)this + 18) = v44;
        break;
      case 0x10u:
        *((_DWORD *)this + 28) |= 2u;
        v46 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v47 = *(_QWORD *)a2;
        if (v46 > 0xFFFFFFFFFFFFFFF5 || v46 + 10 > v2)
        {
          v86 = 0;
          v87 = 0;
          v50 = 0;
          if (v2 <= v46)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v46)
            {
              v50 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_195;
            }
            v88 = v46++;
            v89 = *(_BYTE *)(v47 + v88);
            *((_QWORD *)a2 + 1) = v46;
            v50 |= (unint64_t)(v89 & 0x7F) << v86;
            if ((v89 & 0x80) == 0)
              break;
            v86 += 7;
            v14 = v87++ > 8;
            if (v14)
            {
              v50 = 0;
LABEL_194:
              v2 = v88 + 1;
              goto LABEL_195;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v50 = 0;
          goto LABEL_194;
        }
        v48 = 0;
        v49 = 0;
        v50 = 0;
        do
        {
          v2 = v46 + 1;
          *((_QWORD *)a2 + 1) = v46 + 1;
          v51 = *(_BYTE *)(v47 + v46);
          v50 |= (unint64_t)(v51 & 0x7F) << v48;
          if ((v51 & 0x80) == 0)
            goto LABEL_195;
          v48 += 7;
          v46 = v2;
          v14 = v49++ > 8;
        }
        while (!v14);
        v50 = 0;
LABEL_195:
        *((_QWORD *)this + 2) = v50;
        break;
      case 0x11u:
        *((_DWORD *)this + 28) |= 0x20u;
        v52 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v53 = *(_QWORD *)a2;
        if (v52 > 0xFFFFFFFFFFFFFFF5 || v52 + 10 > v2)
        {
          v90 = 0;
          v91 = 0;
          v56 = 0;
          if (v2 <= v52)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v52)
            {
              v56 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_200;
            }
            v92 = v52++;
            v93 = *(_BYTE *)(v53 + v92);
            *((_QWORD *)a2 + 1) = v52;
            v56 |= (unint64_t)(v93 & 0x7F) << v90;
            if ((v93 & 0x80) == 0)
              break;
            v90 += 7;
            v14 = v91++ > 8;
            if (v14)
            {
              v56 = 0;
LABEL_199:
              v2 = v92 + 1;
              goto LABEL_200;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v56 = 0;
          goto LABEL_199;
        }
        v54 = 0;
        v55 = 0;
        v56 = 0;
        do
        {
          v2 = v52 + 1;
          *((_QWORD *)a2 + 1) = v52 + 1;
          v57 = *(_BYTE *)(v53 + v52);
          v56 |= (unint64_t)(v57 & 0x7F) << v54;
          if ((v57 & 0x80) == 0)
            goto LABEL_200;
          v54 += 7;
          v52 = v2;
          v14 = v55++ > 8;
        }
        while (!v14);
        v56 = 0;
LABEL_200:
        *((_QWORD *)this + 6) = v56;
        break;
      case 0x12u:
        *((_DWORD *)this + 28) |= 0x10u;
        v58 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v59 = *(_QWORD *)a2;
        if (v58 > 0xFFFFFFFFFFFFFFF5 || v58 + 10 > v2)
        {
          v94 = 0;
          v95 = 0;
          v62 = 0;
          if (v2 <= v58)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v58)
            {
              v62 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_205;
            }
            v96 = v58++;
            v97 = *(_BYTE *)(v59 + v96);
            *((_QWORD *)a2 + 1) = v58;
            v62 |= (unint64_t)(v97 & 0x7F) << v94;
            if ((v97 & 0x80) == 0)
              break;
            v94 += 7;
            v14 = v95++ > 8;
            if (v14)
            {
              v62 = 0;
LABEL_204:
              v2 = v96 + 1;
              goto LABEL_205;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v62 = 0;
          goto LABEL_204;
        }
        v60 = 0;
        v61 = 0;
        v62 = 0;
        do
        {
          v2 = v58 + 1;
          *((_QWORD *)a2 + 1) = v58 + 1;
          v63 = *(_BYTE *)(v59 + v58);
          v62 |= (unint64_t)(v63 & 0x7F) << v60;
          if ((v63 & 0x80) == 0)
            goto LABEL_205;
          v60 += 7;
          v58 = v2;
          v14 = v61++ > 8;
        }
        while (!v14);
        v62 = 0;
LABEL_205:
        *((_QWORD *)this + 5) = v62;
        break;
      case 0x13u:
        *((_DWORD *)this + 28) |= 4u;
        v64 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v65 = *(_QWORD *)a2;
        if (v64 > 0xFFFFFFFFFFFFFFF5 || v64 + 10 > v2)
        {
          v98 = 0;
          v99 = 0;
          v68 = 0;
          if (v2 <= v64)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v64)
            {
              v68 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_210;
            }
            v100 = v64++;
            v101 = *(_BYTE *)(v65 + v100);
            *((_QWORD *)a2 + 1) = v64;
            v68 |= (unint64_t)(v101 & 0x7F) << v98;
            if ((v101 & 0x80) == 0)
              break;
            v98 += 7;
            v14 = v99++ > 8;
            if (v14)
            {
              v68 = 0;
LABEL_209:
              v2 = v100 + 1;
              goto LABEL_210;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v68 = 0;
          goto LABEL_209;
        }
        v66 = 0;
        v67 = 0;
        v68 = 0;
        do
        {
          v2 = v64 + 1;
          *((_QWORD *)a2 + 1) = v64 + 1;
          v69 = *(_BYTE *)(v65 + v64);
          v68 |= (unint64_t)(v69 & 0x7F) << v66;
          if ((v69 & 0x80) == 0)
            goto LABEL_210;
          v66 += 7;
          v64 = v2;
          v14 = v67++ > 8;
        }
        while (!v14);
        v68 = 0;
LABEL_210:
        *((_QWORD *)this + 3) = v68;
        break;
      default:
        goto LABEL_19;
    }
LABEL_211:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::KappaPulseDeltaV::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 112);
  if ((v4 & 0x40) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_DWORD *)(v3 + 112);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_23;
    }
  }
  else if ((v4 & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeSInt(a2);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 0x1000) == 0)
      goto LABEL_6;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x1000) == 0)
  {
LABEL_6:
    if ((v4 & 0x4000) == 0)
      goto LABEL_7;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 84));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x4000) == 0)
  {
LABEL_7:
    if ((v4 & 0x10000) == 0)
      goto LABEL_8;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(float *)(v3 + 92));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x10000) == 0)
  {
LABEL_8:
    if ((v4 & 0x400) == 0)
      goto LABEL_9;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(float *)(v3 + 100));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x400) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(float *)(v3 + 76));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 0x8000) == 0)
      goto LABEL_11;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(float *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x8000) == 0)
  {
LABEL_11:
    if ((v4 & 0x20000) == 0)
      goto LABEL_12;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 96));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x20000) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 104));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x800) == 0)
  {
LABEL_13:
    if ((v4 & 0x100) == 0)
      goto LABEL_14;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x100) == 0)
  {
LABEL_14:
    if ((v4 & 0x40000) == 0)
      goto LABEL_15;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 68));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x40000) == 0)
  {
LABEL_15:
    if ((v4 & 0x200) == 0)
      goto LABEL_16;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x200) == 0)
  {
LABEL_16:
    if ((v4 & 2) == 0)
      goto LABEL_17;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 2) == 0)
  {
LABEL_17:
    if ((v4 & 0x20) == 0)
      goto LABEL_18;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x20) == 0)
  {
LABEL_18:
    if ((v4 & 0x10) == 0)
      goto LABEL_19;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x10) == 0)
  {
LABEL_19:
    if ((v4 & 4) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_38:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_DWORD *)(v3 + 112) & 4) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::KappaPulseDeltaV::hash_value(CMMsl::KappaPulseDeltaV *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *((_DWORD *)this + 28);
  if ((v1 & 0x40) != 0)
  {
    v2 = *((_QWORD *)this + 7);
    if ((v1 & 8) != 0)
    {
LABEL_3:
      v3 = *((_QWORD *)this + 4);
      if ((v1 & 1) != 0)
        goto LABEL_4;
      goto LABEL_43;
    }
  }
  else
  {
    v2 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((v1 & 1) != 0)
  {
LABEL_4:
    v4 = *((_QWORD *)this + 1);
    if ((v1 & 0x80) != 0)
      goto LABEL_5;
LABEL_44:
    v6 = 0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_8;
LABEL_45:
    v8 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_11;
LABEL_46:
    v10 = 0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_14;
LABEL_47:
    v12 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_17;
LABEL_48:
    v14 = 0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_20;
LABEL_49:
    v16 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_23;
LABEL_50:
    v18 = 0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_26;
LABEL_51:
    v20 = 0;
    if ((v1 & 0x800) != 0)
      goto LABEL_29;
LABEL_52:
    v22 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_32;
LABEL_53:
    v24 = 0;
    if ((v1 & 0x40000) != 0)
      goto LABEL_35;
    goto LABEL_54;
  }
LABEL_43:
  v4 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_44;
LABEL_5:
  v5 = *((float *)this + 16);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((v1 & 0x1000) == 0)
    goto LABEL_45;
LABEL_8:
  v7 = *((float *)this + 21);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_46;
LABEL_11:
  v9 = *((float *)this + 23);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((v1 & 0x10000) == 0)
    goto LABEL_47;
LABEL_14:
  v11 = *((float *)this + 25);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((v1 & 0x400) == 0)
    goto LABEL_48;
LABEL_17:
  v13 = *((float *)this + 19);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_49;
LABEL_20:
  v15 = *((float *)this + 22);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  if ((v1 & 0x8000) == 0)
    goto LABEL_50;
LABEL_23:
  v17 = *((float *)this + 24);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  if ((v1 & 0x20000) == 0)
    goto LABEL_51;
LABEL_26:
  v19 = *((float *)this + 26);
  v20 = LODWORD(v19);
  if (v19 == 0.0)
    v20 = 0;
  if ((v1 & 0x800) == 0)
    goto LABEL_52;
LABEL_29:
  v21 = *((float *)this + 20);
  v22 = LODWORD(v21);
  if (v21 == 0.0)
    v22 = 0;
  if ((v1 & 0x100) == 0)
    goto LABEL_53;
LABEL_32:
  v23 = *((float *)this + 17);
  v24 = LODWORD(v23);
  if (v23 == 0.0)
    v24 = 0;
  if ((v1 & 0x40000) != 0)
  {
LABEL_35:
    v25 = *((unsigned __int8 *)this + 108);
    if ((v1 & 0x200) != 0)
      goto LABEL_36;
    goto LABEL_55;
  }
LABEL_54:
  v25 = 0;
  if ((v1 & 0x200) != 0)
  {
LABEL_36:
    v26 = *((int *)this + 18);
    if ((v1 & 2) != 0)
      goto LABEL_37;
    goto LABEL_56;
  }
LABEL_55:
  v26 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_37:
    v27 = *((_QWORD *)this + 2);
    if ((v1 & 0x20) != 0)
      goto LABEL_38;
    goto LABEL_57;
  }
LABEL_56:
  v27 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_38:
    v28 = *((_QWORD *)this + 6);
    if ((v1 & 0x10) != 0)
      goto LABEL_39;
LABEL_58:
    v29 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_40;
LABEL_59:
    v30 = 0;
    return v3 ^ v2 ^ v4 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v30;
  }
LABEL_57:
  v28 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_58;
LABEL_39:
  v29 = *((_QWORD *)this + 5);
  if ((v1 & 4) == 0)
    goto LABEL_59;
LABEL_40:
  v30 = *((_QWORD *)this + 3);
  return v3 ^ v2 ^ v4 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v30;
}

void CMMsl::KappaPulseInertialAccel::~KappaPulseInertialAccel(CMMsl::KappaPulseInertialAccel *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::KappaPulseInertialAccel::KappaPulseInertialAccel(CMMsl::KappaPulseInertialAccel *this, const CMMsl::KappaPulseInertialAccel *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  double result;
  uint64_t v6;

  *(_QWORD *)this = &off_25135EA58;
  *((_DWORD *)this + 20) = 0;
  v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x100) != 0)
  {
    v4 = *((_QWORD *)a2 + 9);
    v3 = 256;
    *((_WORD *)this + 40) = 256;
    *((_QWORD *)this + 9) = v4;
    v2 = *((_WORD *)a2 + 40);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 2);
    v3 |= 2u;
    *((_WORD *)this + 40) = v3;
    *((double *)this + 2) = result;
    v2 = *((_WORD *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    result = *((double *)a2 + 3);
    v3 |= 4u;
    *((_WORD *)this + 40) = v3;
    *((double *)this + 3) = result;
    v2 = *((_WORD *)a2 + 40);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0)
        goto LABEL_9;
      goto LABEL_16;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  result = *((double *)a2 + 4);
  v3 |= 8u;
  *((_WORD *)this + 40) = v3;
  *((double *)this + 4) = result;
  v2 = *((_WORD *)a2 + 40);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_17;
  }
LABEL_16:
  v6 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *((_WORD *)this + 40) = v3;
  *((_QWORD *)this + 1) = v6;
  v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_18;
  }
LABEL_17:
  result = *((double *)a2 + 6);
  v3 |= 0x20u;
  *((_WORD *)this + 40) = v3;
  *((double *)this + 6) = result;
  v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_19;
  }
LABEL_18:
  result = *((double *)a2 + 7);
  v3 |= 0x40u;
  *((_WORD *)this + 40) = v3;
  *((double *)this + 7) = result;
  v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x80) == 0)
  {
LABEL_12:
    if ((v2 & 0x10) == 0)
      return result;
LABEL_20:
    result = *((double *)a2 + 5);
    *((_WORD *)this + 40) = v3 | 0x10;
    *((double *)this + 5) = result;
    return result;
  }
LABEL_19:
  result = *((double *)a2 + 8);
  v3 |= 0x80u;
  *((_WORD *)this + 40) = v3;
  *((double *)this + 8) = result;
  if ((*((_WORD *)a2 + 40) & 0x10) != 0)
    goto LABEL_20;
  return result;
}

uint64_t CMMsl::KappaPulseInertialAccel::operator=(uint64_t a1, const CMMsl::KappaPulseInertialAccel *a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[8];
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  if ((const CMMsl::KappaPulseInertialAccel *)a1 != a2)
  {
    CMMsl::KappaPulseInertialAccel::KappaPulseInertialAccel((CMMsl::KappaPulseInertialAccel *)v12, a2);
    v3 = v16;
    v4 = *(_OWORD *)(a1 + 32);
    v16 = *(_OWORD *)(a1 + 48);
    v5 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v17;
    v17 = v5;
    v6 = v15;
    v7 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v14;
    *(_OWORD *)(a1 + 32) = v6;
    *(_OWORD *)(a1 + 48) = v3;
    v8 = *(_DWORD *)(a1 + 80);
    *(_DWORD *)(a1 + 80) = v19;
    v19 = v8;
    v9 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v18;
    v18 = v9;
    v10 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v13;
    v13 = v10;
    v14 = v7;
    v15 = v4;
    PB::Base::~Base((PB::Base *)v12);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::KappaPulseInertialAccel *a2, CMMsl::KappaPulseInertialAccel *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  v3 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v3;
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  v7 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v7;
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v8;
  v9 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v9;
  v10 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v10;
  v11 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v11;
  result = *((double *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((double *)a2 + 5) = result;
  return result;
}

double CMMsl::KappaPulseInertialAccel::KappaPulseInertialAccel(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135EA58;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  result = *(double *)(a2 + 40);
  *(double *)(a1 + 40) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135EA58;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  result = *(double *)(a2 + 40);
  *(double *)(a1 + 40) = result;
  return result;
}

uint64_t CMMsl::KappaPulseInertialAccel::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _QWORD v14[2];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 80);
    *(_DWORD *)(a2 + 80) = 0;
    v4 = *(_QWORD *)(a2 + 72);
    v5 = *(_QWORD *)(a2 + 8);
    v6 = *(_QWORD *)(a2 + 64);
    v20 = *(_DWORD *)(a1 + 80);
    v7 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v4;
    v19 = v7;
    v8 = *(_OWORD *)(a2 + 16);
    v9 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v5;
    v14[0] = &off_25135EA58;
    v14[1] = v9;
    v10 = *(_OWORD *)(a1 + 32);
    v17 = *(_OWORD *)(a1 + 48);
    v18 = *(_QWORD *)(a1 + 64);
    v11 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v11;
    v12 = *(_OWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 80) = v3;
    *(_QWORD *)(a1 + 64) = v6;
    *(_OWORD *)(a1 + 16) = v8;
    v15 = v12;
    v16 = v10;
    PB::Base::~Base((PB::Base *)v14);
  }
  return a1;
}

uint64_t CMMsl::KappaPulseInertialAccel::formatText(CMMsl::KappaPulseInertialAccel *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 40);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "epochCounter");
    v5 = *((_WORD *)this + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "inertialAccelX", *((double *)this + 2));
  v5 = *((_WORD *)this + 40);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "inertialAccelY", *((double *)this + 3));
  v5 = *((_WORD *)this + 40);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "inertialAccelZ", *((double *)this + 4));
  v5 = *((_WORD *)this + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "quaternionW", *((double *)this + 5));
  v5 = *((_WORD *)this + 40);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "quaternionX", *((double *)this + 6));
  v5 = *((_WORD *)this + 40);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
LABEL_19:
    PB::TextFormatter::format(a2, "quaternionZ", *((double *)this + 8));
    if ((*((_WORD *)this + 40) & 0x100) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_10;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "quaternionY", *((double *)this + 7));
  v5 = *((_WORD *)this + 40);
  if ((v5 & 0x80) != 0)
    goto LABEL_19;
LABEL_9:
  if ((v5 & 0x100) != 0)
LABEL_10:
    PB::TextFormatter::format(a2, "timestamp");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaPulseInertialAccel::readFrom(CMMsl::KappaPulseInertialAccel *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  unint64_t v38;
  char v39;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_84;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 40) |= 0x100u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v32 = 0;
          v33 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              v24 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_78;
            }
            v34 = v20++;
            v35 = *(_BYTE *)(v21 + v34);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v35 & 0x7F) << v32;
            if ((v35 & 0x80) == 0)
              break;
            v32 += 7;
            v14 = v33++ > 8;
            if (v14)
            {
              v24 = 0;
LABEL_77:
              v2 = v34 + 1;
              goto LABEL_78;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v24 = 0;
          goto LABEL_77;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_78;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        v24 = 0;
LABEL_78:
        *((_QWORD *)this + 9) = v24;
        break;
      case 2u:
        *((_WORD *)this + 40) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_57;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_73;
      case 3u:
        *((_WORD *)this + 40) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_57;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_73;
      case 4u:
        *((_WORD *)this + 40) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_57;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_73;
      case 5u:
        *((_WORD *)this + 40) |= 1u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v36 = 0;
          v37 = 0;
          v30 = 0;
          if (v2 <= v26)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v26)
            {
              v30 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_83;
            }
            v38 = v26++;
            v39 = *(_BYTE *)(v27 + v38);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v39 & 0x7F) << v36;
            if ((v39 & 0x80) == 0)
              break;
            v36 += 7;
            v14 = v37++ > 8;
            if (v14)
            {
              v30 = 0;
LABEL_82:
              v2 = v38 + 1;
              goto LABEL_83;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v30 = 0;
          goto LABEL_82;
        }
        v28 = 0;
        v29 = 0;
        v30 = 0;
        do
        {
          v2 = v26 + 1;
          *((_QWORD *)a2 + 1) = v26 + 1;
          v31 = *(_BYTE *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0)
            goto LABEL_83;
          v28 += 7;
          v26 = v2;
          v14 = v29++ > 8;
        }
        while (!v14);
        v30 = 0;
LABEL_83:
        *((_QWORD *)this + 1) = v30;
        break;
      case 6u:
        *((_WORD *)this + 40) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_57;
        *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_73;
      case 7u:
        *((_WORD *)this + 40) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_57;
        *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_73;
      case 8u:
        *((_WORD *)this + 40) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_57;
        *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_73;
      case 9u:
        *((_WORD *)this + 40) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_73:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_57:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_84:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::KappaPulseInertialAccel::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 80);
  if ((v4 & 0x100) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_WORD *)(v3 + 80);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 40));
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  if ((*(_WORD *)(v3 + 80) & 0x10) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 40));
  return this;
}

uint64_t CMMsl::KappaPulseInertialAccel::hash_value(CMMsl::KappaPulseInertialAccel *this)
{
  __int16 v1;
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;

  v1 = *((_WORD *)this + 40);
  if ((v1 & 0x100) == 0)
  {
    v2 = 0;
    if ((v1 & 2) != 0)
      goto LABEL_3;
LABEL_26:
    v3 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_6;
LABEL_27:
    v4 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_9;
LABEL_28:
    v5 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_12;
    goto LABEL_29;
  }
  v2 = *((_QWORD *)this + 9);
  if ((v1 & 2) == 0)
    goto LABEL_26;
LABEL_3:
  v3 = *((double *)this + 2);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 4) == 0)
    goto LABEL_27;
LABEL_6:
  v4 = *((double *)this + 3);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_28;
LABEL_9:
  v5 = *((double *)this + 4);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((v1 & 1) != 0)
  {
LABEL_12:
    v6 = *((_QWORD *)this + 1);
    if ((v1 & 0x20) != 0)
      goto LABEL_13;
LABEL_30:
    v7 = 0.0;
    if ((v1 & 0x40) != 0)
      goto LABEL_16;
LABEL_31:
    v8 = 0.0;
    if ((v1 & 0x80) != 0)
      goto LABEL_19;
    goto LABEL_32;
  }
LABEL_29:
  v6 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_30;
LABEL_13:
  v7 = *((double *)this + 6);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((v1 & 0x40) == 0)
    goto LABEL_31;
LABEL_16:
  v8 = *((double *)this + 7);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((v1 & 0x80) != 0)
  {
LABEL_19:
    v9 = *((double *)this + 8);
    if (v9 == 0.0)
      v9 = 0.0;
    if ((v1 & 0x10) != 0)
      goto LABEL_22;
LABEL_33:
    v10 = 0.0;
    return *(_QWORD *)&v3 ^ v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10;
  }
LABEL_32:
  v9 = 0.0;
  if ((v1 & 0x10) == 0)
    goto LABEL_33;
LABEL_22:
  v10 = *((double *)this + 5);
  if (v10 == 0.0)
    v10 = 0.0;
  return *(_QWORD *)&v3 ^ v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10;
}

void CMMsl::KappaPulseInertialHgAccel::~KappaPulseInertialHgAccel(CMMsl::KappaPulseInertialHgAccel *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::KappaPulseInertialHgAccel::KappaPulseInertialHgAccel(CMMsl::KappaPulseInertialHgAccel *this, const CMMsl::KappaPulseInertialHgAccel *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  double result;
  uint64_t v6;

  *(_QWORD *)this = &off_25135EA90;
  *((_DWORD *)this + 26) = 0;
  v2 = *((_WORD *)a2 + 52);
  if ((v2 & 0x800) != 0)
  {
    v4 = *((_QWORD *)a2 + 12);
    v3 = 2048;
    *((_WORD *)this + 52) = 2048;
    *((_QWORD *)this + 12) = v4;
    v2 = *((_WORD *)a2 + 52);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 5);
    v3 |= 0x10u;
    *((_WORD *)this + 52) = v3;
    *((double *)this + 5) = result;
    v2 = *((_WORD *)a2 + 52);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    result = *((double *)a2 + 6);
    v3 |= 0x20u;
    *((_WORD *)this + 52) = v3;
    *((double *)this + 6) = result;
    v2 = *((_WORD *)a2 + 52);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        goto LABEL_9;
      goto LABEL_19;
    }
  }
  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  result = *((double *)a2 + 7);
  v3 |= 0x40u;
  *((_WORD *)this + 52) = v3;
  *((double *)this + 7) = result;
  v2 = *((_WORD *)a2 + 52);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  v6 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *((_WORD *)this + 52) = v3;
  *((_QWORD *)this + 4) = v6;
  v2 = *((_WORD *)a2 + 52);
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_20:
  result = *((double *)a2 + 9);
  v3 |= 0x100u;
  *((_WORD *)this + 52) = v3;
  *((double *)this + 9) = result;
  v2 = *((_WORD *)a2 + 52);
  if ((v2 & 0x200) == 0)
  {
LABEL_11:
    if ((v2 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_22;
  }
LABEL_21:
  result = *((double *)a2 + 10);
  v3 |= 0x200u;
  *((_WORD *)this + 52) = v3;
  *((double *)this + 10) = result;
  v2 = *((_WORD *)a2 + 52);
  if ((v2 & 0x400) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0)
      goto LABEL_13;
    goto LABEL_23;
  }
LABEL_22:
  result = *((double *)a2 + 11);
  v3 |= 0x400u;
  *((_WORD *)this + 52) = v3;
  *((double *)this + 11) = result;
  v2 = *((_WORD *)a2 + 52);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 1) == 0)
      goto LABEL_14;
    goto LABEL_24;
  }
LABEL_23:
  result = *((double *)a2 + 8);
  v3 |= 0x80u;
  *((_WORD *)this + 52) = v3;
  *((double *)this + 8) = result;
  v2 = *((_WORD *)a2 + 52);
  if ((v2 & 1) == 0)
  {
LABEL_14:
    if ((v2 & 2) == 0)
      goto LABEL_15;
    goto LABEL_25;
  }
LABEL_24:
  result = *((double *)a2 + 1);
  v3 |= 1u;
  *((_WORD *)this + 52) = v3;
  *((double *)this + 1) = result;
  v2 = *((_WORD *)a2 + 52);
  if ((v2 & 2) == 0)
  {
LABEL_15:
    if ((v2 & 4) == 0)
      return result;
LABEL_26:
    result = *((double *)a2 + 3);
    *((_WORD *)this + 52) = v3 | 4;
    *((double *)this + 3) = result;
    return result;
  }
LABEL_25:
  result = *((double *)a2 + 2);
  v3 |= 2u;
  *((_WORD *)this + 52) = v3;
  *((double *)this + 2) = result;
  if ((*((_WORD *)a2 + 52) & 4) != 0)
    goto LABEL_26;
  return result;
}

CMMsl *CMMsl::KappaPulseInertialHgAccel::operator=(CMMsl *a1, const CMMsl::KappaPulseInertialHgAccel *a2)
{
  CMMsl::KappaPulseInertialHgAccel *v3;
  _BYTE v5[112];

  if (a1 != a2)
  {
    CMMsl::KappaPulseInertialHgAccel::KappaPulseInertialHgAccel((CMMsl::KappaPulseInertialHgAccel *)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaPulseInertialHgAccel *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::KappaPulseInertialHgAccel *a2, CMMsl::KappaPulseInertialHgAccel *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double result;

  v3 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v3;
  v4 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v4;
  v5 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v5;
  v6 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v6;
  v7 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v7;
  v8 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v8;
  v9 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v9;
  v10 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v10;
  v11 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v11;
  v12 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v12;
  v13 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v13;
  v14 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v14;
  result = *((double *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((double *)a2 + 3) = result;
  return result;
}

double CMMsl::KappaPulseInertialHgAccel::KappaPulseInertialHgAccel(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135EA90;
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  return result;
}

CMMsl *CMMsl::KappaPulseInertialHgAccel::operator=(CMMsl *this, uint64_t a2, CMMsl::KappaPulseInertialHgAccel *a3)
{
  void (**v5)(CMMsl::KappaPulseInertialHgAccel *__hidden);
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  if (this != (CMMsl *)a2)
  {
    v5 = &off_25135EA90;
    v14 = *(_DWORD *)(a2 + 104);
    *(_DWORD *)(a2 + 104) = 0;
    v13 = *(_QWORD *)(a2 + 96);
    v9 = *(_OWORD *)(a2 + 40);
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_OWORD *)(a2 + 72);
    v12 = *(_QWORD *)(a2 + 88);
    v10 = *(_OWORD *)(a2 + 56);
    v6 = *(_OWORD *)(a2 + 8);
    v7 = *(_QWORD *)(a2 + 24);
    CMMsl::swap(this, (CMMsl::KappaPulseInertialHgAccel *)&v5, a3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return this;
}

uint64_t CMMsl::KappaPulseInertialHgAccel::formatText(CMMsl::KappaPulseInertialHgAccel *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 52);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "bodyAccelX", *((double *)this + 1));
    v5 = *((_WORD *)this + 52);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "bodyAccelY", *((double *)this + 2));
  v5 = *((_WORD *)this + 52);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "bodyAccelZ", *((double *)this + 3));
  v5 = *((_WORD *)this + 52);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "epochCounter");
  v5 = *((_WORD *)this + 52);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "inertialAccelX", *((double *)this + 5));
  v5 = *((_WORD *)this + 52);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "inertialAccelY", *((double *)this + 6));
  v5 = *((_WORD *)this + 52);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "inertialAccelZ", *((double *)this + 7));
  v5 = *((_WORD *)this + 52);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "quaternionW", *((double *)this + 8));
  v5 = *((_WORD *)this + 52);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "quaternionX", *((double *)this + 9));
  v5 = *((_WORD *)this + 52);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
LABEL_25:
    PB::TextFormatter::format(a2, "quaternionZ", *((double *)this + 11));
    if ((*((_WORD *)this + 52) & 0x800) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_13;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "quaternionY", *((double *)this + 10));
  v5 = *((_WORD *)this + 52);
  if ((v5 & 0x400) != 0)
    goto LABEL_25;
LABEL_12:
  if ((v5 & 0x800) != 0)
LABEL_13:
    PB::TextFormatter::format(a2, "timestamp");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaPulseInertialHgAccel::readFrom(CMMsl::KappaPulseInertialHgAccel *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  unint64_t v38;
  char v39;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_93;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 52) |= 0x800u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v32 = 0;
          v33 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              v24 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_87;
            }
            v34 = v20++;
            v35 = *(_BYTE *)(v21 + v34);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v35 & 0x7F) << v32;
            if ((v35 & 0x80) == 0)
              break;
            v32 += 7;
            v14 = v33++ > 8;
            if (v14)
            {
              v24 = 0;
LABEL_86:
              v2 = v34 + 1;
              goto LABEL_87;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v24 = 0;
          goto LABEL_86;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_87;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        v24 = 0;
LABEL_87:
        *((_QWORD *)this + 12) = v24;
        break;
      case 2u:
        *((_WORD *)this + 52) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_66;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_82;
      case 3u:
        *((_WORD *)this + 52) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_66;
        *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_82;
      case 4u:
        *((_WORD *)this + 52) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_66;
        *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_82;
      case 5u:
        *((_WORD *)this + 52) |= 8u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v36 = 0;
          v37 = 0;
          v30 = 0;
          if (v2 <= v26)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v26)
            {
              v30 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_92;
            }
            v38 = v26++;
            v39 = *(_BYTE *)(v27 + v38);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v39 & 0x7F) << v36;
            if ((v39 & 0x80) == 0)
              break;
            v36 += 7;
            v14 = v37++ > 8;
            if (v14)
            {
              v30 = 0;
LABEL_91:
              v2 = v38 + 1;
              goto LABEL_92;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v30 = 0;
          goto LABEL_91;
        }
        v28 = 0;
        v29 = 0;
        v30 = 0;
        do
        {
          v2 = v26 + 1;
          *((_QWORD *)a2 + 1) = v26 + 1;
          v31 = *(_BYTE *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0)
            goto LABEL_92;
          v28 += 7;
          v26 = v2;
          v14 = v29++ > 8;
        }
        while (!v14);
        v30 = 0;
LABEL_92:
        *((_QWORD *)this + 4) = v30;
        break;
      case 6u:
        *((_WORD *)this + 52) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_66;
        *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_82;
      case 7u:
        *((_WORD *)this + 52) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_66;
        *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_82;
      case 8u:
        *((_WORD *)this + 52) |= 0x400u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_66;
        *((_QWORD *)this + 11) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_82;
      case 9u:
        *((_WORD *)this + 52) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_66;
        *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_82;
      case 0xAu:
        *((_WORD *)this + 52) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_66;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_82;
      case 0xBu:
        *((_WORD *)this + 52) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_66;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_82;
      case 0xCu:
        *((_WORD *)this + 52) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_82:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_66:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_93:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::KappaPulseInertialHgAccel::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 104);
  if ((v4 & 0x800) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_WORD *)(v3 + 104);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 104);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 104);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 104);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 104);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 0x200) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(double *)(v3 + 72));
  v4 = *(_WORD *)(v3 + 104);
  if ((v4 & 0x200) == 0)
  {
LABEL_8:
    if ((v4 & 0x400) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 80));
  v4 = *(_WORD *)(v3 + 104);
  if ((v4 & 0x400) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 88));
  v4 = *(_WORD *)(v3 + 104);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 1) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  v4 = *(_WORD *)(v3 + 104);
  if ((v4 & 1) == 0)
  {
LABEL_11:
    if ((v4 & 2) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 104);
  if ((v4 & 2) == 0)
  {
LABEL_12:
    if ((v4 & 4) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 24));
  }
LABEL_24:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  if ((*(_WORD *)(v3 + 104) & 4) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 24));
  return this;
}

uint64_t CMMsl::KappaPulseInertialHgAccel::hash_value(CMMsl::KappaPulseInertialHgAccel *this)
{
  __int16 v1;
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;

  v1 = *((_WORD *)this + 52);
  if ((v1 & 0x800) == 0)
  {
    v2 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_3;
LABEL_35:
    v3 = 0.0;
    if ((v1 & 0x20) != 0)
      goto LABEL_6;
LABEL_36:
    v4 = 0.0;
    if ((v1 & 0x40) != 0)
      goto LABEL_9;
LABEL_37:
    v5 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_12;
    goto LABEL_38;
  }
  v2 = *((_QWORD *)this + 12);
  if ((v1 & 0x10) == 0)
    goto LABEL_35;
LABEL_3:
  v3 = *((double *)this + 5);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 0x20) == 0)
    goto LABEL_36;
LABEL_6:
  v4 = *((double *)this + 6);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 0x40) == 0)
    goto LABEL_37;
LABEL_9:
  v5 = *((double *)this + 7);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((v1 & 8) != 0)
  {
LABEL_12:
    v6 = *((_QWORD *)this + 4);
    if ((*((_WORD *)this + 52) & 0x100) != 0)
      goto LABEL_13;
LABEL_39:
    v7 = 0.0;
    if ((*((_WORD *)this + 52) & 0x200) != 0)
      goto LABEL_16;
LABEL_40:
    v8 = 0.0;
    if ((*((_WORD *)this + 52) & 0x400) != 0)
      goto LABEL_19;
LABEL_41:
    v9 = 0.0;
    if ((v1 & 0x80) != 0)
      goto LABEL_22;
LABEL_42:
    v10 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_25;
LABEL_43:
    v11 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_28;
    goto LABEL_44;
  }
LABEL_38:
  v6 = 0;
  if ((*((_WORD *)this + 52) & 0x100) == 0)
    goto LABEL_39;
LABEL_13:
  v7 = *((double *)this + 9);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((*((_WORD *)this + 52) & 0x200) == 0)
    goto LABEL_40;
LABEL_16:
  v8 = *((double *)this + 10);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((*((_WORD *)this + 52) & 0x400) == 0)
    goto LABEL_41;
LABEL_19:
  v9 = *((double *)this + 11);
  if (v9 == 0.0)
    v9 = 0.0;
  if ((v1 & 0x80) == 0)
    goto LABEL_42;
LABEL_22:
  v10 = *((double *)this + 8);
  if (v10 == 0.0)
    v10 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_43;
LABEL_25:
  v11 = *((double *)this + 1);
  if (v11 == 0.0)
    v11 = 0.0;
  if ((v1 & 2) != 0)
  {
LABEL_28:
    v12 = *((double *)this + 2);
    if (v12 == 0.0)
      v12 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_31;
LABEL_45:
    v13 = 0.0;
    return *(_QWORD *)&v3 ^ v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13;
  }
LABEL_44:
  v12 = 0.0;
  if ((v1 & 4) == 0)
    goto LABEL_45;
LABEL_31:
  v13 = *((double *)this + 3);
  if (v13 == 0.0)
    v13 = 0.0;
  return *(_QWORD *)&v3 ^ v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13;
}

void CMMsl::KappaPulseResult::~KappaPulseResult(CMMsl::KappaPulseResult *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::KappaPulseResult::KappaPulseResult(CMMsl::KappaPulseResult *this, const CMMsl::KappaPulseResult *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  float result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)this = &off_25135EAC8;
  v2 = (uint64_t *)((char *)this + 316);
  *((_DWORD *)this + 81) = 0;
  *(_QWORD *)((char *)this + 316) = 0;
  v3 = (uint64_t *)((char *)a2 + 316);
  v4 = *((_BYTE *)a2 + 324);
  if ((v4 & 8) != 0)
  {
    v5 = 0;
    v8 = *((_BYTE *)a2 + 312);
    *v2 = 0;
    v6 = 8;
    *((_BYTE *)this + 324) = 8;
    *((_BYTE *)this + 312) = v8;
    v7 = *v3;
    v4 = *((_BYTE *)a2 + 324);
    if ((v4 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = 0;
  v6 = 0;
  v7 = *v3;
  if ((*((_BYTE *)a2 + 324) & 2) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 76);
    v6 |= 2u;
    *v2 = 0;
    *((_BYTE *)this + 324) = v6;
    *((float *)this + 76) = result;
    v7 = *v3;
    v4 = *((_BYTE *)a2 + 324);
  }
LABEL_6:
  if ((v4 & 4) != 0)
  {
    result = *((float *)a2 + 77);
    v6 |= 4u;
    *v2 = 0;
    *((_BYTE *)this + 324) = v6;
    *((float *)this + 77) = result;
    v7 = *v3;
    v4 = *((_BYTE *)a2 + 324);
    if ((*v3 & 0x20) == 0)
    {
LABEL_8:
      if ((v7 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_75;
    }
  }
  else if ((v7 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  v10 = *((_QWORD *)a2 + 6);
  v5 = 32;
  *v2 = 32;
  *((_BYTE *)this + 324) = v6;
  *((_QWORD *)this + 6) = v10;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x40) == 0)
  {
LABEL_9:
    if ((v7 & 1) == 0)
      goto LABEL_10;
    goto LABEL_76;
  }
LABEL_75:
  v11 = *((_QWORD *)a2 + 7);
  v5 |= 0x40uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((_QWORD *)this + 7) = v11;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 1) == 0)
  {
LABEL_10:
    if ((v7 & 0x8000) == 0)
      goto LABEL_11;
    goto LABEL_77;
  }
LABEL_76:
  v12 = *((_QWORD *)a2 + 1);
  v5 |= 1uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((_QWORD *)this + 1) = v12;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x8000) == 0)
  {
LABEL_11:
    if ((v7 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_78;
  }
LABEL_77:
  result = *((float *)a2 + 26);
  v5 |= 0x8000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 26) = result;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x80) == 0)
  {
LABEL_12:
    if ((v7 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_79;
  }
LABEL_78:
  v13 = *((_QWORD *)a2 + 8);
  v5 |= 0x80uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((_QWORD *)this + 8) = v13;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x100) == 0)
  {
LABEL_13:
    if ((v7 & 0x20000) == 0)
      goto LABEL_14;
    goto LABEL_80;
  }
LABEL_79:
  v14 = *((_QWORD *)a2 + 9);
  v5 |= 0x100uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((_QWORD *)this + 9) = v14;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x20000) == 0)
  {
LABEL_14:
    if ((v7 & 0x10000) == 0)
      goto LABEL_15;
    goto LABEL_81;
  }
LABEL_80:
  result = *((float *)a2 + 28);
  v5 |= 0x20000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 28) = result;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x10000) == 0)
  {
LABEL_15:
    if ((v7 & 0x2000000) == 0)
      goto LABEL_16;
    goto LABEL_82;
  }
LABEL_81:
  result = *((float *)a2 + 27);
  v5 |= 0x10000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 27) = result;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x2000000) == 0)
  {
LABEL_16:
    if ((v7 & 0x200) == 0)
      goto LABEL_17;
    goto LABEL_83;
  }
LABEL_82:
  result = *((float *)a2 + 36);
  v5 |= 0x2000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 36) = result;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x200) == 0)
  {
LABEL_17:
    if ((v7 & 0x400) == 0)
      goto LABEL_18;
    goto LABEL_84;
  }
LABEL_83:
  result = *((float *)a2 + 20);
  v5 |= 0x200uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 20) = result;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x400) == 0)
  {
LABEL_18:
    if ((v7 & 0x800000) == 0)
      goto LABEL_19;
    goto LABEL_85;
  }
LABEL_84:
  result = *((float *)a2 + 21);
  v5 |= 0x400uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 21) = result;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x800000) == 0)
  {
LABEL_19:
    if ((v7 & 0x4000) == 0)
      goto LABEL_20;
    goto LABEL_86;
  }
LABEL_85:
  result = *((float *)a2 + 34);
  v5 |= 0x800000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 34) = result;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x4000) == 0)
  {
LABEL_20:
    if ((v7 & 0x400000) == 0)
      goto LABEL_21;
    goto LABEL_87;
  }
LABEL_86:
  result = *((float *)a2 + 25);
  v5 |= 0x4000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 25) = result;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x400000) == 0)
  {
LABEL_21:
    if ((v7 & 0x2000) == 0)
      goto LABEL_22;
    goto LABEL_88;
  }
LABEL_87:
  result = *((float *)a2 + 33);
  v5 |= 0x400000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 33) = result;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x2000) == 0)
  {
LABEL_22:
    if ((v7 & 0x8000000) == 0)
      goto LABEL_23;
    goto LABEL_89;
  }
LABEL_88:
  result = *((float *)a2 + 24);
  v5 |= 0x2000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 24) = result;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x8000000) == 0)
  {
LABEL_23:
    if ((v7 & 0x100000) == 0)
      goto LABEL_24;
    goto LABEL_90;
  }
LABEL_89:
  result = *((float *)a2 + 38);
  v5 |= 0x8000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 38) = result;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x100000) == 0)
  {
LABEL_24:
    if ((v7 & 0x1000) == 0)
      goto LABEL_25;
    goto LABEL_91;
  }
LABEL_90:
  result = *((float *)a2 + 31);
  v5 |= 0x100000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 31) = result;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x1000) == 0)
  {
LABEL_25:
    if ((v7 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_92;
  }
LABEL_91:
  result = *((float *)a2 + 23);
  v5 |= 0x1000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 23) = result;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x80000) == 0)
  {
LABEL_26:
    if ((v7 & 0x800) == 0)
      goto LABEL_27;
    goto LABEL_93;
  }
LABEL_92:
  result = *((float *)a2 + 30);
  v5 |= 0x80000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 30) = result;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x800) == 0)
  {
LABEL_27:
    if ((v7 & 0x4000000) == 0)
      goto LABEL_28;
    goto LABEL_94;
  }
LABEL_93:
  result = *((float *)a2 + 22);
  v5 |= 0x800uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 22) = result;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v7 & 0x40000000000000) == 0)
      goto LABEL_29;
    goto LABEL_95;
  }
LABEL_94:
  result = *((float *)a2 + 37);
  v5 |= 0x4000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 37) = result;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x40000000000000) == 0)
  {
LABEL_29:
    if ((v7 & 0x20000000000000) == 0)
      goto LABEL_30;
    goto LABEL_96;
  }
LABEL_95:
  result = *((float *)a2 + 65);
  v5 |= 0x40000000000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 65) = result;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x20000000000000) == 0)
  {
LABEL_30:
    if ((v7 & 0x4000000000000000) == 0)
      goto LABEL_31;
    goto LABEL_97;
  }
LABEL_96:
  result = *((float *)a2 + 64);
  v5 |= 0x20000000000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 64) = result;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x4000000000000000) == 0)
  {
LABEL_31:
    if ((v7 & 0x800000000000) == 0)
      goto LABEL_32;
    goto LABEL_98;
  }
LABEL_97:
  result = *((float *)a2 + 73);
  v5 |= 0x4000000000000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 73) = result;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x800000000000) == 0)
  {
LABEL_32:
    if ((v7 & 0x1000000000000) == 0)
      goto LABEL_33;
    goto LABEL_99;
  }
LABEL_98:
  result = *((float *)a2 + 58);
  v5 |= 0x800000000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 58) = result;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x1000000000000) == 0)
  {
LABEL_33:
    if ((v7 & 0x1000000000000000) == 0)
      goto LABEL_34;
    goto LABEL_100;
  }
LABEL_99:
  result = *((float *)a2 + 59);
  v5 |= 0x1000000000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 59) = result;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x1000000000000000) == 0)
  {
LABEL_34:
    if ((v7 & 0x10000000000000) == 0)
      goto LABEL_35;
    goto LABEL_101;
  }
LABEL_100:
  result = *((float *)a2 + 71);
  v5 |= 0x1000000000000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 71) = result;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x10000000000000) == 0)
  {
LABEL_35:
    if ((v7 & 0x800000000000000) == 0)
      goto LABEL_36;
    goto LABEL_102;
  }
LABEL_101:
  result = *((float *)a2 + 63);
  v5 |= 0x10000000000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 63) = result;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x800000000000000) == 0)
  {
LABEL_36:
    if ((v7 & 0x8000000000000) == 0)
      goto LABEL_37;
    goto LABEL_103;
  }
LABEL_102:
  result = *((float *)a2 + 70);
  v5 |= 0x800000000000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 70) = result;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x8000000000000) == 0)
  {
LABEL_37:
    if ((v4 & 1) == 0)
      goto LABEL_38;
    goto LABEL_104;
  }
LABEL_103:
  result = *((float *)a2 + 62);
  v5 |= 0x8000000000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 62) = result;
  v7 = *v3;
  if ((*((_BYTE *)a2 + 324) & 1) == 0)
  {
LABEL_38:
    if ((v7 & 0x200000000000000) == 0)
      goto LABEL_39;
    goto LABEL_105;
  }
LABEL_104:
  result = *((float *)a2 + 75);
  v6 |= 1u;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 75) = result;
  v7 = *v3;
  if ((*v3 & 0x200000000000000) == 0)
  {
LABEL_39:
    if ((v7 & 0x4000000000000) == 0)
      goto LABEL_40;
    goto LABEL_106;
  }
LABEL_105:
  result = *((float *)a2 + 68);
  v5 |= 0x200000000000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 68) = result;
  v7 = *v3;
  if ((*v3 & 0x4000000000000) == 0)
  {
LABEL_40:
    if ((v7 & 0x100000000000000) == 0)
      goto LABEL_41;
    goto LABEL_107;
  }
LABEL_106:
  result = *((float *)a2 + 61);
  v5 |= 0x4000000000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 61) = result;
  v7 = *v3;
  if ((*v3 & 0x100000000000000) == 0)
  {
LABEL_41:
    if ((v7 & 0x2000000000000) == 0)
      goto LABEL_42;
    goto LABEL_108;
  }
LABEL_107:
  result = *((float *)a2 + 67);
  v5 |= 0x100000000000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 67) = result;
  v7 = *v3;
  if ((*v3 & 0x2000000000000) == 0)
  {
LABEL_42:
    if ((v7 & 0x8000000000000000) == 0)
      goto LABEL_43;
    goto LABEL_109;
  }
LABEL_108:
  result = *((float *)a2 + 60);
  v5 |= 0x2000000000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 60) = result;
  v7 = *v3;
  if ((*v3 & 0x8000000000000000) == 0)
  {
LABEL_43:
    if ((v7 & 0x800000000) == 0)
      goto LABEL_44;
    goto LABEL_110;
  }
LABEL_109:
  result = *((float *)a2 + 74);
  v5 |= 0x8000000000000000;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 74) = result;
  v7 = *v3;
  if ((*v3 & 0x800000000) == 0)
  {
LABEL_44:
    if ((v7 & 0x400000000) == 0)
      goto LABEL_45;
    goto LABEL_111;
  }
LABEL_110:
  result = *((float *)a2 + 46);
  v5 |= 0x800000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 46) = result;
  v7 = *v3;
  if ((*v3 & 0x400000000) == 0)
  {
LABEL_45:
    if ((v7 & 0x80000000000) == 0)
      goto LABEL_46;
    goto LABEL_112;
  }
LABEL_111:
  result = *((float *)a2 + 45);
  v5 |= 0x400000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 45) = result;
  v7 = *v3;
  if ((*v3 & 0x80000000000) == 0)
  {
LABEL_46:
    if ((v7 & 0x10000000) == 0)
      goto LABEL_47;
    goto LABEL_113;
  }
LABEL_112:
  result = *((float *)a2 + 54);
  v5 |= 0x80000000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 54) = result;
  v7 = *v3;
  if ((*v3 & 0x10000000) == 0)
  {
LABEL_47:
    if ((v7 & 0x20000000) == 0)
      goto LABEL_48;
    goto LABEL_114;
  }
LABEL_113:
  result = *((float *)a2 + 39);
  v5 |= 0x10000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 39) = result;
  v7 = *v3;
  if ((*v3 & 0x20000000) == 0)
  {
LABEL_48:
    if ((v7 & 0x20000000000) == 0)
      goto LABEL_49;
    goto LABEL_115;
  }
LABEL_114:
  result = *((float *)a2 + 40);
  v5 |= 0x20000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 40) = result;
  v7 = *v3;
  if ((*v3 & 0x20000000000) == 0)
  {
LABEL_49:
    if ((v7 & 0x200000000) == 0)
      goto LABEL_50;
    goto LABEL_116;
  }
LABEL_115:
  result = *((float *)a2 + 52);
  v5 |= 0x20000000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 52) = result;
  v7 = *v3;
  if ((*v3 & 0x200000000) == 0)
  {
LABEL_50:
    if ((v7 & 0x10000000000) == 0)
      goto LABEL_51;
    goto LABEL_117;
  }
LABEL_116:
  result = *((float *)a2 + 44);
  v5 |= 0x200000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 44) = result;
  v7 = *v3;
  if ((*v3 & 0x10000000000) == 0)
  {
LABEL_51:
    if ((v7 & 0x100000000) == 0)
      goto LABEL_52;
    goto LABEL_118;
  }
LABEL_117:
  result = *((float *)a2 + 51);
  v5 |= 0x10000000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 51) = result;
  v7 = *v3;
  if ((*v3 & 0x100000000) == 0)
  {
LABEL_52:
    if ((v7 & 0x200000000000) == 0)
      goto LABEL_53;
    goto LABEL_119;
  }
LABEL_118:
  result = *((float *)a2 + 43);
  v5 |= 0x100000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 43) = result;
  v7 = *v3;
  if ((*v3 & 0x200000000000) == 0)
  {
LABEL_53:
    if ((v7 & 0x4000000000) == 0)
      goto LABEL_54;
    goto LABEL_120;
  }
LABEL_119:
  result = *((float *)a2 + 56);
  v5 |= 0x200000000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 56) = result;
  v7 = *v3;
  if ((*v3 & 0x4000000000) == 0)
  {
LABEL_54:
    if ((v7 & 0x80000000) == 0)
      goto LABEL_55;
    goto LABEL_121;
  }
LABEL_120:
  result = *((float *)a2 + 49);
  v5 |= 0x4000000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 49) = result;
  v7 = *v3;
  if ((*v3 & 0x80000000) == 0)
  {
LABEL_55:
    if ((v7 & 0x2000000000) == 0)
      goto LABEL_56;
    goto LABEL_122;
  }
LABEL_121:
  result = *((float *)a2 + 42);
  v5 |= 0x80000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 42) = result;
  v7 = *v3;
  if ((*v3 & 0x2000000000) == 0)
  {
LABEL_56:
    if ((v7 & 0x40000000) == 0)
      goto LABEL_57;
    goto LABEL_123;
  }
LABEL_122:
  result = *((float *)a2 + 48);
  v5 |= 0x2000000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 48) = result;
  v7 = *v3;
  if ((*v3 & 0x40000000) == 0)
  {
LABEL_57:
    if ((v7 & 0x100000000000) == 0)
      goto LABEL_58;
    goto LABEL_124;
  }
LABEL_123:
  result = *((float *)a2 + 41);
  v5 |= 0x40000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 41) = result;
  v7 = *v3;
  if ((*v3 & 0x100000000000) == 0)
  {
LABEL_58:
    if ((v7 & 8) == 0)
      goto LABEL_59;
    goto LABEL_125;
  }
LABEL_124:
  result = *((float *)a2 + 55);
  v5 |= 0x100000000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 55) = result;
  v7 = *v3;
  if ((*v3 & 8) == 0)
  {
LABEL_59:
    if ((v7 & 0x10) == 0)
      goto LABEL_60;
    goto LABEL_126;
  }
LABEL_125:
  v15 = *((_QWORD *)a2 + 4);
  v5 |= 8uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((_QWORD *)this + 4) = v15;
  v7 = *v3;
  if ((*v3 & 0x10) == 0)
  {
LABEL_60:
    if ((v7 & 0x1000000) == 0)
      goto LABEL_61;
    goto LABEL_127;
  }
LABEL_126:
  v16 = *((_QWORD *)a2 + 5);
  v5 |= 0x10uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((_QWORD *)this + 5) = v16;
  v7 = *v3;
  if ((*v3 & 0x1000000) == 0)
  {
LABEL_61:
    if ((v7 & 0x2000000000000000) == 0)
      goto LABEL_62;
    goto LABEL_128;
  }
LABEL_127:
  result = *((float *)a2 + 35);
  v5 |= 0x1000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 35) = result;
  v7 = *v3;
  if ((*v3 & 0x2000000000000000) == 0)
  {
LABEL_62:
    if ((v7 & 0x40000000000) == 0)
      goto LABEL_63;
    goto LABEL_129;
  }
LABEL_128:
  result = *((float *)a2 + 72);
  v5 |= 0x2000000000000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 72) = result;
  v7 = *v3;
  if ((*v3 & 0x40000000000) == 0)
  {
LABEL_63:
    if ((v7 & 0x40000) == 0)
      goto LABEL_64;
    goto LABEL_130;
  }
LABEL_129:
  result = *((float *)a2 + 53);
  v5 |= 0x40000000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 53) = result;
  v7 = *v3;
  if ((*v3 & 0x40000) == 0)
  {
LABEL_64:
    if ((v7 & 0x80000000000000) == 0)
      goto LABEL_65;
    goto LABEL_131;
  }
LABEL_130:
  result = *((float *)a2 + 29);
  v5 |= 0x40000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 29) = result;
  v7 = *v3;
  if ((*v3 & 0x80000000000000) == 0)
  {
LABEL_65:
    if ((v7 & 0x1000000000) == 0)
      goto LABEL_66;
    goto LABEL_132;
  }
LABEL_131:
  result = *((float *)a2 + 66);
  v5 |= 0x80000000000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 66) = result;
  v7 = *v3;
  if ((*v3 & 0x1000000000) == 0)
  {
LABEL_66:
    if ((v7 & 0x200000) == 0)
      goto LABEL_67;
    goto LABEL_133;
  }
LABEL_132:
  result = *((float *)a2 + 47);
  v5 |= 0x1000000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 47) = result;
  v7 = *v3;
  if ((*v3 & 0x200000) == 0)
  {
LABEL_67:
    if ((v7 & 0x400000000000000) == 0)
      goto LABEL_68;
    goto LABEL_134;
  }
LABEL_133:
  result = *((float *)a2 + 32);
  v5 |= 0x200000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 32) = result;
  v7 = *v3;
  if ((*v3 & 0x400000000000000) == 0)
  {
LABEL_68:
    if ((v7 & 0x8000000000) == 0)
      goto LABEL_69;
    goto LABEL_135;
  }
LABEL_134:
  result = *((float *)a2 + 69);
  v5 |= 0x400000000000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 69) = result;
  v7 = *v3;
  if ((*v3 & 0x8000000000) == 0)
  {
LABEL_69:
    if ((v7 & 2) == 0)
      goto LABEL_70;
    goto LABEL_136;
  }
LABEL_135:
  result = *((float *)a2 + 50);
  v5 |= 0x8000000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 50) = result;
  v7 = *v3;
  if ((*v3 & 2) == 0)
  {
LABEL_70:
    if ((v7 & 4) == 0)
      goto LABEL_71;
    goto LABEL_137;
  }
LABEL_136:
  v17 = *((_QWORD *)a2 + 2);
  v5 |= 2uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((_QWORD *)this + 2) = v17;
  v7 = *v3;
  if ((*v3 & 4) == 0)
  {
LABEL_71:
    if ((v7 & 0x400000000000) == 0)
      return result;
LABEL_138:
    result = *((float *)a2 + 57);
    *v2 = v5 | 0x400000000000;
    *((_BYTE *)this + 324) = v6;
    *((float *)this + 57) = result;
    return result;
  }
LABEL_137:
  v18 = *((_QWORD *)a2 + 3);
  v5 |= 4uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((_QWORD *)this + 3) = v18;
  if ((*v3 & 0x400000000000) != 0)
    goto LABEL_138;
  return result;
}

CMMsl *CMMsl::KappaPulseResult::operator=(CMMsl *a1, const CMMsl::KappaPulseResult *a2)
{
  CMMsl::KappaPulseResult *v3;
  _QWORD v5[42];

  v5[41] = *MEMORY[0x24BDAC8D0];
  if (a1 != a2)
  {
    CMMsl::KappaPulseResult::KappaPulseResult((CMMsl::KappaPulseResult *)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaPulseResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaPulseResult *a2, CMMsl::KappaPulseResult *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  char v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  float result;

  v3 = *((_DWORD *)this + 81);
  v4 = *(_QWORD *)((char *)this + 316);
  v5 = *((_DWORD *)a2 + 81);
  *(_QWORD *)((char *)this + 316) = *(_QWORD *)((char *)a2 + 316);
  *((_DWORD *)this + 81) = v5;
  *(_QWORD *)((char *)a2 + 316) = v4;
  *((_DWORD *)a2 + 81) = v3;
  v6 = *((_BYTE *)this + 312);
  *((_BYTE *)this + 312) = *((_BYTE *)a2 + 312);
  *((_BYTE *)a2 + 312) = v6;
  v7 = *((_DWORD *)this + 76);
  *((_DWORD *)this + 76) = *((_DWORD *)a2 + 76);
  *((_DWORD *)a2 + 76) = v7;
  v8 = *((_DWORD *)this + 77);
  *((_DWORD *)this + 77) = *((_DWORD *)a2 + 77);
  *((_DWORD *)a2 + 77) = v8;
  v9 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v9;
  v10 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v10;
  v11 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v11;
  v12 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v12;
  v13 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v13;
  v14 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v14;
  v15 = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v15;
  v16 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v16;
  v17 = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v17;
  v18 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v18;
  v19 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v19;
  v20 = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v20;
  v21 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v21;
  v22 = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v22;
  v23 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v23;
  v24 = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v24;
  v25 = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v25;
  v26 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v26;
  v27 = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v27;
  v28 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v28;
  v29 = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v29;
  v30 = *((_DWORD *)this + 65);
  *((_DWORD *)this + 65) = *((_DWORD *)a2 + 65);
  *((_DWORD *)a2 + 65) = v30;
  v31 = *((_DWORD *)this + 64);
  *((_DWORD *)this + 64) = *((_DWORD *)a2 + 64);
  *((_DWORD *)a2 + 64) = v31;
  v32 = *((_DWORD *)this + 73);
  *((_DWORD *)this + 73) = *((_DWORD *)a2 + 73);
  *((_DWORD *)a2 + 73) = v32;
  v33 = *((_DWORD *)this + 58);
  *((_DWORD *)this + 58) = *((_DWORD *)a2 + 58);
  *((_DWORD *)a2 + 58) = v33;
  v34 = *((_DWORD *)this + 59);
  *((_DWORD *)this + 59) = *((_DWORD *)a2 + 59);
  *((_DWORD *)a2 + 59) = v34;
  v35 = *((_DWORD *)this + 71);
  *((_DWORD *)this + 71) = *((_DWORD *)a2 + 71);
  *((_DWORD *)a2 + 71) = v35;
  v36 = *((_DWORD *)this + 63);
  *((_DWORD *)this + 63) = *((_DWORD *)a2 + 63);
  *((_DWORD *)a2 + 63) = v36;
  v37 = *((_DWORD *)this + 70);
  *((_DWORD *)this + 70) = *((_DWORD *)a2 + 70);
  *((_DWORD *)a2 + 70) = v37;
  v38 = *((_DWORD *)this + 62);
  *((_DWORD *)this + 62) = *((_DWORD *)a2 + 62);
  *((_DWORD *)a2 + 62) = v38;
  v39 = *((_DWORD *)this + 75);
  *((_DWORD *)this + 75) = *((_DWORD *)a2 + 75);
  *((_DWORD *)a2 + 75) = v39;
  v40 = *((_DWORD *)this + 68);
  *((_DWORD *)this + 68) = *((_DWORD *)a2 + 68);
  *((_DWORD *)a2 + 68) = v40;
  v41 = *((_DWORD *)this + 61);
  *((_DWORD *)this + 61) = *((_DWORD *)a2 + 61);
  *((_DWORD *)a2 + 61) = v41;
  v42 = *((_DWORD *)this + 67);
  *((_DWORD *)this + 67) = *((_DWORD *)a2 + 67);
  *((_DWORD *)a2 + 67) = v42;
  v43 = *((_DWORD *)this + 60);
  *((_DWORD *)this + 60) = *((_DWORD *)a2 + 60);
  *((_DWORD *)a2 + 60) = v43;
  v44 = *((_DWORD *)this + 74);
  *((_DWORD *)this + 74) = *((_DWORD *)a2 + 74);
  *((_DWORD *)a2 + 74) = v44;
  v45 = *((_DWORD *)this + 46);
  *((_DWORD *)this + 46) = *((_DWORD *)a2 + 46);
  *((_DWORD *)a2 + 46) = v45;
  v46 = *((_DWORD *)this + 45);
  *((_DWORD *)this + 45) = *((_DWORD *)a2 + 45);
  *((_DWORD *)a2 + 45) = v46;
  v47 = *((_DWORD *)this + 54);
  *((_DWORD *)this + 54) = *((_DWORD *)a2 + 54);
  *((_DWORD *)a2 + 54) = v47;
  v48 = *((_DWORD *)this + 39);
  *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
  *((_DWORD *)a2 + 39) = v48;
  v49 = *((_DWORD *)this + 40);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
  *((_DWORD *)a2 + 40) = v49;
  v50 = *((_DWORD *)this + 52);
  *((_DWORD *)this + 52) = *((_DWORD *)a2 + 52);
  *((_DWORD *)a2 + 52) = v50;
  v51 = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v51;
  v52 = *((_DWORD *)this + 51);
  *((_DWORD *)this + 51) = *((_DWORD *)a2 + 51);
  *((_DWORD *)a2 + 51) = v52;
  v53 = *((_DWORD *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((_DWORD *)a2 + 43) = v53;
  v54 = *((_DWORD *)this + 56);
  *((_DWORD *)this + 56) = *((_DWORD *)a2 + 56);
  *((_DWORD *)a2 + 56) = v54;
  v55 = *((_DWORD *)this + 49);
  *((_DWORD *)this + 49) = *((_DWORD *)a2 + 49);
  *((_DWORD *)a2 + 49) = v55;
  v56 = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v56;
  v57 = *((_DWORD *)this + 48);
  *((_DWORD *)this + 48) = *((_DWORD *)a2 + 48);
  *((_DWORD *)a2 + 48) = v57;
  v58 = *((_DWORD *)this + 41);
  *((_DWORD *)this + 41) = *((_DWORD *)a2 + 41);
  *((_DWORD *)a2 + 41) = v58;
  v59 = *((_DWORD *)this + 55);
  *((_DWORD *)this + 55) = *((_DWORD *)a2 + 55);
  *((_DWORD *)a2 + 55) = v59;
  v60 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v60;
  v61 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v61;
  v62 = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v62;
  v63 = *((_DWORD *)this + 72);
  *((_DWORD *)this + 72) = *((_DWORD *)a2 + 72);
  *((_DWORD *)a2 + 72) = v63;
  v64 = *((_DWORD *)this + 53);
  *((_DWORD *)this + 53) = *((_DWORD *)a2 + 53);
  *((_DWORD *)a2 + 53) = v64;
  v65 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v65;
  v66 = *((_DWORD *)this + 66);
  *((_DWORD *)this + 66) = *((_DWORD *)a2 + 66);
  *((_DWORD *)a2 + 66) = v66;
  v67 = *((_DWORD *)this + 47);
  *((_DWORD *)this + 47) = *((_DWORD *)a2 + 47);
  *((_DWORD *)a2 + 47) = v67;
  v68 = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v68;
  v69 = *((_DWORD *)this + 69);
  *((_DWORD *)this + 69) = *((_DWORD *)a2 + 69);
  *((_DWORD *)a2 + 69) = v69;
  v70 = *((_DWORD *)this + 50);
  *((_DWORD *)this + 50) = *((_DWORD *)a2 + 50);
  *((_DWORD *)a2 + 50) = v70;
  v71 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v71;
  v72 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v72;
  result = *((float *)this + 57);
  *((_DWORD *)this + 57) = *((_DWORD *)a2 + 57);
  *((float *)a2 + 57) = result;
  return result;
}

float CMMsl::KappaPulseResult::KappaPulseResult(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float result;

  *(_QWORD *)a1 = &off_25135EAC8;
  v2 = *(_QWORD *)(a2 + 316);
  *(_DWORD *)(a1 + 324) = *(_DWORD *)(a2 + 324);
  *(_QWORD *)(a1 + 316) = v2;
  *(_DWORD *)(a2 + 324) = 0;
  *(_QWORD *)(a2 + 316) = 0;
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(_DWORD *)(a1 + 304) = *(_DWORD *)(a2 + 304);
  *(_DWORD *)(a1 + 308) = *(_DWORD *)(a2 + 308);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 260) = *(_DWORD *)(a2 + 260);
  *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 256);
  *(_DWORD *)(a1 + 292) = *(_DWORD *)(a2 + 292);
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 232);
  *(_DWORD *)(a1 + 236) = *(_DWORD *)(a2 + 236);
  *(_DWORD *)(a1 + 284) = *(_DWORD *)(a2 + 284);
  *(_DWORD *)(a1 + 252) = *(_DWORD *)(a2 + 252);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  *(_DWORD *)(a1 + 300) = *(_DWORD *)(a2 + 300);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 244) = *(_DWORD *)(a2 + 244);
  *(_DWORD *)(a1 + 268) = *(_DWORD *)(a2 + 268);
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 196);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 288);
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 264);
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  result = *(float *)(a2 + 228);
  *(float *)(a1 + 228) = result;
  return result;
}

CMMsl *CMMsl::KappaPulseResult::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::KappaPulseResult *v3;
  _QWORD v5[42];

  v5[41] = *MEMORY[0x24BDAC8D0];
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaPulseResult::KappaPulseResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaPulseResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaPulseResult::formatText(CMMsl::KappaPulseResult *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t v6;
  char v7;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)((char *)this + 316);
  v6 = *(_QWORD *)((char *)this + 316);
  if ((v6 & 0x200) != 0)
  {
    PB::TextFormatter::format(a2, "arclengthXYBiggestImpact", *((float *)this + 20));
    v6 = *v5;
    v7 = *((_BYTE *)this + 324);
    if ((*v5 & 0x400) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v7 = *((_BYTE *)this + 324);
  if ((v6 & 0x400) != 0)
  {
LABEL_5:
    PB::TextFormatter::format(a2, "arclengthXYOverEpoch", *((float *)this + 21));
    v6 = *v5;
    v7 = *((_BYTE *)this + 324);
  }
LABEL_6:
  if ((v6 & 0x800) != 0)
  {
    PB::TextFormatter::format(a2, "arclengthXYZBiggestImpact", *((float *)this + 22));
    v6 = *v5;
    v7 = *((_BYTE *)this + 324);
    if ((*v5 & 0x1000) == 0)
    {
LABEL_8:
      if ((v6 & 0x2000) == 0)
        goto LABEL_9;
      goto LABEL_76;
    }
  }
  else if ((v6 & 0x1000) == 0)
  {
    goto LABEL_8;
  }
  PB::TextFormatter::format(a2, "arclengthXYZOverEpoch", *((float *)this + 23));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x2000) == 0)
  {
LABEL_9:
    if ((v6 & 0x4000) == 0)
      goto LABEL_10;
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(a2, "arclengthZBiggestImpact", *((float *)this + 24));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x4000) == 0)
  {
LABEL_10:
    if ((v6 & 0x8000) == 0)
      goto LABEL_11;
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(a2, "arclengthZOverEpoch", *((float *)this + 25));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x8000) == 0)
  {
LABEL_11:
    if ((v6 & 1) == 0)
      goto LABEL_12;
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(a2, "configDecelPulseThreshold", *((float *)this + 26));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 1) == 0)
  {
LABEL_12:
    if ((v6 & 0x10000) == 0)
      goto LABEL_13;
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(a2, "deltaTriggerTime");
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x10000) == 0)
  {
LABEL_13:
    if ((v6 & 0x20000) == 0)
      goto LABEL_14;
    goto LABEL_81;
  }
LABEL_80:
  PB::TextFormatter::format(a2, "deltaVXYBiggestImpact", *((float *)this + 27));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x20000) == 0)
  {
LABEL_14:
    if ((v6 & 0x40000) == 0)
      goto LABEL_15;
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(a2, "deltaVXYOverEpoch", *((float *)this + 28));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x40000) == 0)
  {
LABEL_15:
    if ((v6 & 0x80000) == 0)
      goto LABEL_16;
    goto LABEL_83;
  }
LABEL_82:
  PB::TextFormatter::format(a2, "deltaVXYUnconditional", *((float *)this + 29));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x80000) == 0)
  {
LABEL_16:
    if ((v6 & 0x100000) == 0)
      goto LABEL_17;
    goto LABEL_84;
  }
LABEL_83:
  PB::TextFormatter::format(a2, "deltaVXYZBiggestImpact", *((float *)this + 30));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x100000) == 0)
  {
LABEL_17:
    if ((v6 & 0x200000) == 0)
      goto LABEL_18;
    goto LABEL_85;
  }
LABEL_84:
  PB::TextFormatter::format(a2, "deltaVXYZOverEpoch", *((float *)this + 31));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x200000) == 0)
  {
LABEL_18:
    if ((v6 & 0x400000) == 0)
      goto LABEL_19;
    goto LABEL_86;
  }
LABEL_85:
  PB::TextFormatter::format(a2, "deltaVXYZUnconditional", *((float *)this + 32));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x400000) == 0)
  {
LABEL_19:
    if ((v6 & 0x800000) == 0)
      goto LABEL_20;
    goto LABEL_87;
  }
LABEL_86:
  PB::TextFormatter::format(a2, "deltaVZBiggestImpact", *((float *)this + 33));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x800000) == 0)
  {
LABEL_20:
    if ((v6 & 0x1000000) == 0)
      goto LABEL_21;
    goto LABEL_88;
  }
LABEL_87:
  PB::TextFormatter::format(a2, "deltaVZOverEpoch", *((float *)this + 34));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x1000000) == 0)
  {
LABEL_21:
    if ((v6 & 0x2000000) == 0)
      goto LABEL_22;
    goto LABEL_89;
  }
LABEL_88:
  PB::TextFormatter::format(a2, "deltaVZUnconditional", *((float *)this + 35));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x2000000) == 0)
  {
LABEL_22:
    if ((v6 & 0x4000000) == 0)
      goto LABEL_23;
    goto LABEL_90;
  }
LABEL_89:
  PB::TextFormatter::format(a2, "durationXYBiggestImpact", *((float *)this + 36));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x4000000) == 0)
  {
LABEL_23:
    if ((v6 & 0x8000000) == 0)
      goto LABEL_24;
    goto LABEL_91;
  }
LABEL_90:
  PB::TextFormatter::format(a2, "durationXYZBiggestImpact", *((float *)this + 37));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x8000000) == 0)
  {
LABEL_24:
    if ((v6 & 2) == 0)
      goto LABEL_25;
    goto LABEL_92;
  }
LABEL_91:
  PB::TextFormatter::format(a2, "durationZBiggestImpact", *((float *)this + 38));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 2) == 0)
  {
LABEL_25:
    if ((v6 & 4) == 0)
      goto LABEL_26;
    goto LABEL_93;
  }
LABEL_92:
  PB::TextFormatter::format(a2, "epochFirstTimestamp");
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 4) == 0)
  {
LABEL_26:
    if ((v6 & 8) == 0)
      goto LABEL_27;
    goto LABEL_94;
  }
LABEL_93:
  PB::TextFormatter::format(a2, "epochLastTimestamp");
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 8) == 0)
  {
LABEL_27:
    if ((v6 & 0x10) == 0)
      goto LABEL_28;
    goto LABEL_95;
  }
LABEL_94:
  PB::TextFormatter::format(a2, "faultCounter");
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x10) == 0)
  {
LABEL_28:
    if ((v6 & 0x10000000) == 0)
      goto LABEL_29;
    goto LABEL_96;
  }
LABEL_95:
  PB::TextFormatter::format(a2, "hgAccelBufferSize");
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x10000000) == 0)
  {
LABEL_29:
    if ((v6 & 0x20000000) == 0)
      goto LABEL_30;
    goto LABEL_97;
  }
LABEL_96:
  PB::TextFormatter::format(a2, "hgArclengthXYBiggestImpact", *((float *)this + 39));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x20000000) == 0)
  {
LABEL_30:
    if ((v6 & 0x40000000) == 0)
      goto LABEL_31;
    goto LABEL_98;
  }
LABEL_97:
  PB::TextFormatter::format(a2, "hgArclengthXYOverEpoch", *((float *)this + 40));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x40000000) == 0)
  {
LABEL_31:
    if ((v6 & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_99;
  }
LABEL_98:
  PB::TextFormatter::format(a2, "hgArclengthXYZBiggestImpact", *((float *)this + 41));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x80000000) == 0)
  {
LABEL_32:
    if ((v6 & 0x100000000) == 0)
      goto LABEL_33;
    goto LABEL_100;
  }
LABEL_99:
  PB::TextFormatter::format(a2, "hgArclengthXYZOverEpoch", *((float *)this + 42));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x100000000) == 0)
  {
LABEL_33:
    if ((v6 & 0x200000000) == 0)
      goto LABEL_34;
    goto LABEL_101;
  }
LABEL_100:
  PB::TextFormatter::format(a2, "hgArclengthZBiggestImpact", *((float *)this + 43));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x200000000) == 0)
  {
LABEL_34:
    if ((v6 & 0x400000000) == 0)
      goto LABEL_35;
    goto LABEL_102;
  }
LABEL_101:
  PB::TextFormatter::format(a2, "hgArclengthZOverEpoch", *((float *)this + 44));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x400000000) == 0)
  {
LABEL_35:
    if ((v6 & 0x800000000) == 0)
      goto LABEL_36;
    goto LABEL_103;
  }
LABEL_102:
  PB::TextFormatter::format(a2, "hgDeltaVXYBiggestImpact", *((float *)this + 45));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x800000000) == 0)
  {
LABEL_36:
    if ((v6 & 0x1000000000) == 0)
      goto LABEL_37;
    goto LABEL_104;
  }
LABEL_103:
  PB::TextFormatter::format(a2, "hgDeltaVXYOverEpoch", *((float *)this + 46));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x1000000000) == 0)
  {
LABEL_37:
    if ((v6 & 0x2000000000) == 0)
      goto LABEL_38;
    goto LABEL_105;
  }
LABEL_104:
  PB::TextFormatter::format(a2, "hgDeltaVXYUnconditional", *((float *)this + 47));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x2000000000) == 0)
  {
LABEL_38:
    if ((v6 & 0x4000000000) == 0)
      goto LABEL_39;
    goto LABEL_106;
  }
LABEL_105:
  PB::TextFormatter::format(a2, "hgDeltaVXYZBiggestImpact", *((float *)this + 48));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x4000000000) == 0)
  {
LABEL_39:
    if ((v6 & 0x8000000000) == 0)
      goto LABEL_40;
    goto LABEL_107;
  }
LABEL_106:
  PB::TextFormatter::format(a2, "hgDeltaVXYZOverEpoch", *((float *)this + 49));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x8000000000) == 0)
  {
LABEL_40:
    if ((v6 & 0x10000000000) == 0)
      goto LABEL_41;
    goto LABEL_108;
  }
LABEL_107:
  PB::TextFormatter::format(a2, "hgDeltaVXYZUnconditional", *((float *)this + 50));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x10000000000) == 0)
  {
LABEL_41:
    if ((v6 & 0x20000000000) == 0)
      goto LABEL_42;
    goto LABEL_109;
  }
LABEL_108:
  PB::TextFormatter::format(a2, "hgDeltaVZBiggestImpact", *((float *)this + 51));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x20000000000) == 0)
  {
LABEL_42:
    if ((v6 & 0x40000000000) == 0)
      goto LABEL_43;
    goto LABEL_110;
  }
LABEL_109:
  PB::TextFormatter::format(a2, "hgDeltaVZOverEpoch", *((float *)this + 52));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x40000000000) == 0)
  {
LABEL_43:
    if ((v6 & 0x80000000000) == 0)
      goto LABEL_44;
    goto LABEL_111;
  }
LABEL_110:
  PB::TextFormatter::format(a2, "hgDeltaVZUnconditional", *((float *)this + 53));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x80000000000) == 0)
  {
LABEL_44:
    if ((v6 & 0x100000000000) == 0)
      goto LABEL_45;
    goto LABEL_112;
  }
LABEL_111:
  PB::TextFormatter::format(a2, "hgDurationXYBiggestImpact", *((float *)this + 54));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x100000000000) == 0)
  {
LABEL_45:
    if ((v6 & 0x200000000000) == 0)
      goto LABEL_46;
    goto LABEL_113;
  }
LABEL_112:
  PB::TextFormatter::format(a2, "hgDurationXYZBiggestImpact", *((float *)this + 55));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x200000000000) == 0)
  {
LABEL_46:
    if ((v6 & 0x400000000000) == 0)
      goto LABEL_47;
    goto LABEL_114;
  }
LABEL_113:
  PB::TextFormatter::format(a2, "hgDurationZBiggestImpact", *((float *)this + 56));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x400000000000) == 0)
  {
LABEL_47:
    if ((v7 & 8) == 0)
      goto LABEL_48;
    goto LABEL_115;
  }
LABEL_114:
  PB::TextFormatter::format(a2, "hgWeightCoeff", *((float *)this + 57));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((v7 & 8) == 0)
  {
LABEL_48:
    if ((v6 & 0x800000000000) == 0)
      goto LABEL_49;
    goto LABEL_116;
  }
LABEL_115:
  PB::TextFormatter::format(a2, "isPulseDetected");
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x800000000000) == 0)
  {
LABEL_49:
    if ((v6 & 0x1000000000000) == 0)
      goto LABEL_50;
    goto LABEL_117;
  }
LABEL_116:
  PB::TextFormatter::format(a2, "lgArclengthXYBiggestImpact", *((float *)this + 58));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x1000000000000) == 0)
  {
LABEL_50:
    if ((v6 & 0x2000000000000) == 0)
      goto LABEL_51;
    goto LABEL_118;
  }
LABEL_117:
  PB::TextFormatter::format(a2, "lgArclengthXYOverEpoch", *((float *)this + 59));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x2000000000000) == 0)
  {
LABEL_51:
    if ((v6 & 0x4000000000000) == 0)
      goto LABEL_52;
    goto LABEL_119;
  }
LABEL_118:
  PB::TextFormatter::format(a2, "lgArclengthXYZBiggestImpact", *((float *)this + 60));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x4000000000000) == 0)
  {
LABEL_52:
    if ((v6 & 0x8000000000000) == 0)
      goto LABEL_53;
    goto LABEL_120;
  }
LABEL_119:
  PB::TextFormatter::format(a2, "lgArclengthXYZOverEpoch", *((float *)this + 61));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x8000000000000) == 0)
  {
LABEL_53:
    if ((v6 & 0x10000000000000) == 0)
      goto LABEL_54;
    goto LABEL_121;
  }
LABEL_120:
  PB::TextFormatter::format(a2, "lgArclengthZBiggestImpact", *((float *)this + 62));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x10000000000000) == 0)
  {
LABEL_54:
    if ((v6 & 0x20000000000000) == 0)
      goto LABEL_55;
    goto LABEL_122;
  }
LABEL_121:
  PB::TextFormatter::format(a2, "lgArclengthZOverEpoch", *((float *)this + 63));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x20000000000000) == 0)
  {
LABEL_55:
    if ((v6 & 0x40000000000000) == 0)
      goto LABEL_56;
    goto LABEL_123;
  }
LABEL_122:
  PB::TextFormatter::format(a2, "lgDeltaVXYBiggestImpact", *((float *)this + 64));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x40000000000000) == 0)
  {
LABEL_56:
    if ((v6 & 0x80000000000000) == 0)
      goto LABEL_57;
    goto LABEL_124;
  }
LABEL_123:
  PB::TextFormatter::format(a2, "lgDeltaVXYOverEpoch", *((float *)this + 65));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x80000000000000) == 0)
  {
LABEL_57:
    if ((v6 & 0x100000000000000) == 0)
      goto LABEL_58;
    goto LABEL_125;
  }
LABEL_124:
  PB::TextFormatter::format(a2, "lgDeltaVXYUnconditional", *((float *)this + 66));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x100000000000000) == 0)
  {
LABEL_58:
    if ((v6 & 0x200000000000000) == 0)
      goto LABEL_59;
    goto LABEL_126;
  }
LABEL_125:
  PB::TextFormatter::format(a2, "lgDeltaVXYZBiggestImpact", *((float *)this + 67));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x200000000000000) == 0)
  {
LABEL_59:
    if ((v6 & 0x400000000000000) == 0)
      goto LABEL_60;
    goto LABEL_127;
  }
LABEL_126:
  PB::TextFormatter::format(a2, "lgDeltaVXYZOverEpoch", *((float *)this + 68));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x400000000000000) == 0)
  {
LABEL_60:
    if ((v6 & 0x800000000000000) == 0)
      goto LABEL_61;
    goto LABEL_128;
  }
LABEL_127:
  PB::TextFormatter::format(a2, "lgDeltaVXYZUnconditional", *((float *)this + 69));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x800000000000000) == 0)
  {
LABEL_61:
    if ((v6 & 0x1000000000000000) == 0)
      goto LABEL_62;
    goto LABEL_129;
  }
LABEL_128:
  PB::TextFormatter::format(a2, "lgDeltaVZBiggestImpact", *((float *)this + 70));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x1000000000000000) == 0)
  {
LABEL_62:
    if ((v6 & 0x2000000000000000) == 0)
      goto LABEL_63;
    goto LABEL_130;
  }
LABEL_129:
  PB::TextFormatter::format(a2, "lgDeltaVZOverEpoch", *((float *)this + 71));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x2000000000000000) == 0)
  {
LABEL_63:
    if ((v6 & 0x4000000000000000) == 0)
      goto LABEL_64;
    goto LABEL_131;
  }
LABEL_130:
  PB::TextFormatter::format(a2, "lgDeltaVZUnconditional", *((float *)this + 72));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x4000000000000000) == 0)
  {
LABEL_64:
    if ((v6 & 0x8000000000000000) == 0)
      goto LABEL_65;
    goto LABEL_132;
  }
LABEL_131:
  PB::TextFormatter::format(a2, "lgDurationXYBiggestImpact", *((float *)this + 73));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x8000000000000000) == 0)
  {
LABEL_65:
    if ((v7 & 1) == 0)
      goto LABEL_66;
    goto LABEL_133;
  }
LABEL_132:
  PB::TextFormatter::format(a2, "lgDurationXYZBiggestImpact", *((float *)this + 74));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((v7 & 1) == 0)
  {
LABEL_66:
    if ((v7 & 2) == 0)
      goto LABEL_67;
    goto LABEL_134;
  }
LABEL_133:
  PB::TextFormatter::format(a2, "lgDurationZBiggestImpact", *((float *)this + 75));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((v7 & 2) == 0)
  {
LABEL_67:
    if ((v7 & 4) == 0)
      goto LABEL_68;
    goto LABEL_135;
  }
LABEL_134:
  PB::TextFormatter::format(a2, "maxPulse", *((float *)this + 76));
  v6 = *v5;
  if ((*((_BYTE *)this + 324) & 4) == 0)
  {
LABEL_68:
    if ((v6 & 0x20) == 0)
      goto LABEL_69;
    goto LABEL_136;
  }
LABEL_135:
  PB::TextFormatter::format(a2, "maxPulseHeight", *((float *)this + 77));
  v6 = *v5;
  if ((*v5 & 0x20) == 0)
  {
LABEL_69:
    if ((v6 & 0x40) == 0)
      goto LABEL_70;
    goto LABEL_137;
  }
LABEL_136:
  PB::TextFormatter::format(a2, "maxPulseStartTime");
  v6 = *v5;
  if ((*v5 & 0x40) == 0)
  {
LABEL_70:
    if ((v6 & 0x80) == 0)
      goto LABEL_71;
LABEL_138:
    PB::TextFormatter::format(a2, "timestamp");
    if ((*v5 & 0x100) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_72;
  }
LABEL_137:
  PB::TextFormatter::format(a2, "maxPulseTime");
  v6 = *v5;
  if ((*v5 & 0x80) != 0)
    goto LABEL_138;
LABEL_71:
  if ((v6 & 0x100) != 0)
LABEL_72:
    PB::TextFormatter::format(a2, "triggerTimestamp");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaPulseResult::readFrom(CMMsl::KappaPulseResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  char *v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t result;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  char v118;
  unsigned int v119;
  uint64_t v120;
  unint64_t v121;
  char v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  char v126;
  unsigned int v127;
  uint64_t v128;
  unint64_t v129;
  char v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  char v143;
  unsigned int v144;
  uint64_t v145;
  unint64_t v146;
  char v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  char v151;
  unsigned int v152;
  uint64_t v153;
  unint64_t v154;
  char v155;
  char v156;
  unsigned int v157;
  unint64_t v158;
  char v159;
  char v160;
  unsigned int v161;
  unint64_t v162;
  char v163;
  char v164;
  unsigned int v165;
  unint64_t v166;
  char v167;
  char v168;
  unsigned int v169;
  unint64_t v170;
  char v171;
  char v172;
  unsigned int v173;
  unint64_t v174;
  char v175;
  char v176;
  unsigned int v177;
  unint64_t v178;
  char v179;
  char v180;
  unsigned int v181;
  unint64_t v182;
  char v183;
  char v184;
  unsigned int v185;
  unint64_t v186;
  char v187;
  char v188;
  unsigned int v189;
  unint64_t v190;
  char v191;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (char *)this + 316;
    while (1)
    {
      v9 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_20;
      }
LABEL_22:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v21 = v12 >> 3;
      if ((int)(v12 >> 3) > 200)
      {
        switch((_DWORD)v21)
        {
          case 0xC9:
            *(_QWORD *)v8 |= 2uLL;
            v140 = *((_QWORD *)a2 + 1);
            v141 = *((_QWORD *)a2 + 2);
            v142 = *(_QWORD *)a2;
            if (v140 > 0xFFFFFFFFFFFFFFF5 || v140 + 10 > v141)
            {
              v184 = 0;
              v185 = 0;
              v145 = 0;
              if (v141 <= v140)
                v141 = *((_QWORD *)a2 + 1);
              while (1)
              {
                if (v141 == v140)
                {
                  v145 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                  goto LABEL_371;
                }
                v186 = v140 + 1;
                v187 = *(_BYTE *)(v142 + v140);
                *((_QWORD *)a2 + 1) = v186;
                v145 |= (unint64_t)(v187 & 0x7F) << v184;
                if ((v187 & 0x80) == 0)
                  break;
                v184 += 7;
                v140 = v186;
                v15 = v185++ > 8;
                if (v15)
                {
LABEL_324:
                  v145 = 0;
                  goto LABEL_371;
                }
              }
              if (*((_BYTE *)a2 + 24))
                v145 = 0;
            }
            else
            {
              v143 = 0;
              v144 = 0;
              v145 = 0;
              while (1)
              {
                v146 = v140 + 1;
                *((_QWORD *)a2 + 1) = v140 + 1;
                v147 = *(_BYTE *)(v142 + v140);
                v145 |= (unint64_t)(v147 & 0x7F) << v143;
                if ((v147 & 0x80) == 0)
                  break;
                v143 += 7;
                v140 = v146;
                v15 = v144++ > 8;
                if (v15)
                  goto LABEL_324;
              }
            }
LABEL_371:
            *((_QWORD *)this + 2) = v145;
            break;
          case 0xCA:
            *(_QWORD *)v8 |= 4uLL;
            v148 = *((_QWORD *)a2 + 1);
            v149 = *((_QWORD *)a2 + 2);
            v150 = *(_QWORD *)a2;
            if (v148 > 0xFFFFFFFFFFFFFFF5 || v148 + 10 > v149)
            {
              v188 = 0;
              v189 = 0;
              v153 = 0;
              if (v149 <= v148)
                v149 = *((_QWORD *)a2 + 1);
              while (1)
              {
                if (v149 == v148)
                {
                  v153 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                  goto LABEL_375;
                }
                v190 = v148 + 1;
                v191 = *(_BYTE *)(v150 + v148);
                *((_QWORD *)a2 + 1) = v190;
                v153 |= (unint64_t)(v191 & 0x7F) << v188;
                if ((v191 & 0x80) == 0)
                  break;
                v188 += 7;
                v148 = v190;
                v15 = v189++ > 8;
                if (v15)
                {
LABEL_331:
                  v153 = 0;
                  goto LABEL_375;
                }
              }
              if (*((_BYTE *)a2 + 24))
                v153 = 0;
            }
            else
            {
              v151 = 0;
              v152 = 0;
              v153 = 0;
              while (1)
              {
                v154 = v148 + 1;
                *((_QWORD *)a2 + 1) = v148 + 1;
                v155 = *(_BYTE *)(v150 + v148);
                v153 |= (unint64_t)(v155 & 0x7F) << v151;
                if ((v155 & 0x80) == 0)
                  break;
                v151 += 7;
                v148 = v154;
                v15 = v152++ > 8;
                if (v15)
                  goto LABEL_331;
              }
            }
LABEL_375:
            *((_QWORD *)this + 3) = v153;
            break;
          case 0x12D:
            *(_QWORD *)v8 |= 0x400000000000uLL;
            v26 = *((_QWORD *)a2 + 1);
            if (v26 <= 0xFFFFFFFFFFFFFFFBLL && v26 + 4 <= *((_QWORD *)a2 + 2))
            {
              *((_DWORD *)this + 57) = *(_DWORD *)(*(_QWORD *)a2 + v26);
LABEL_334:
              *((_QWORD *)a2 + 1) += 4;
            }
            else
            {
              *((_BYTE *)a2 + 24) = 1;
            }
            break;
          default:
LABEL_20:
            result = PB::Reader::skip(a2);
            if (!(_DWORD)result)
              return result;
            break;
        }
      }
      else
      {
        switch((int)v21)
        {
          case 1:
            v8[8] |= 8u;
            v22 = *((_QWORD *)a2 + 1);
            if (v22 >= *((_QWORD *)a2 + 2))
            {
              v25 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v23 = v22 + 1;
              v24 = *(unsigned __int8 *)(*(_QWORD *)a2 + v22);
              *((_QWORD *)a2 + 1) = v23;
              v25 = v24 != 0;
            }
            *((_BYTE *)this + 312) = v25;
            goto LABEL_335;
          case 2:
            v8[8] |= 2u;
            v27 = *((_QWORD *)a2 + 1);
            if (v27 > 0xFFFFFFFFFFFFFFFBLL || v27 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 76) = *(_DWORD *)(*(_QWORD *)a2 + v27);
            goto LABEL_334;
          case 3:
            v8[8] |= 4u;
            v28 = *((_QWORD *)a2 + 1);
            if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 77) = *(_DWORD *)(*(_QWORD *)a2 + v28);
            goto LABEL_334;
          case 4:
            *(_QWORD *)v8 |= 0x20uLL;
            v29 = *((_QWORD *)a2 + 1);
            v30 = *((_QWORD *)a2 + 2);
            v31 = *(_QWORD *)a2;
            if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
            {
              v32 = 0;
              v33 = 0;
              v34 = 0;
              do
              {
                v35 = v29 + 1;
                *((_QWORD *)a2 + 1) = v29 + 1;
                v36 = *(_BYTE *)(v31 + v29);
                v34 |= (unint64_t)(v36 & 0x7F) << v32;
                if ((v36 & 0x80) == 0)
                  goto LABEL_343;
                v32 += 7;
                v29 = v35;
                v15 = v33++ > 8;
              }
              while (!v15);
LABEL_275:
              v34 = 0;
              goto LABEL_343;
            }
            v156 = 0;
            v157 = 0;
            v34 = 0;
            if (v30 <= v29)
              v30 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v30 == v29)
              {
                v34 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v158 = v29 + 1;
                v159 = *(_BYTE *)(v31 + v29);
                *((_QWORD *)a2 + 1) = v158;
                v34 |= (unint64_t)(v159 & 0x7F) << v156;
                if (v159 < 0)
                {
                  v156 += 7;
                  v29 = v158;
                  v15 = v157++ > 8;
                  if (v15)
                    goto LABEL_275;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  v34 = 0;
              }
              break;
            }
LABEL_343:
            *((_QWORD *)this + 6) = v34;
            goto LABEL_335;
          case 5:
            *(_QWORD *)v8 |= 0x40uLL;
            v37 = *((_QWORD *)a2 + 1);
            v38 = *((_QWORD *)a2 + 2);
            v39 = *(_QWORD *)a2;
            if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
            {
              v40 = 0;
              v41 = 0;
              v42 = 0;
              do
              {
                v43 = v37 + 1;
                *((_QWORD *)a2 + 1) = v37 + 1;
                v44 = *(_BYTE *)(v39 + v37);
                v42 |= (unint64_t)(v44 & 0x7F) << v40;
                if ((v44 & 0x80) == 0)
                  goto LABEL_347;
                v40 += 7;
                v37 = v43;
                v15 = v41++ > 8;
              }
              while (!v15);
LABEL_282:
              v42 = 0;
              goto LABEL_347;
            }
            v160 = 0;
            v161 = 0;
            v42 = 0;
            if (v38 <= v37)
              v38 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v38 == v37)
              {
                v42 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v162 = v37 + 1;
                v163 = *(_BYTE *)(v39 + v37);
                *((_QWORD *)a2 + 1) = v162;
                v42 |= (unint64_t)(v163 & 0x7F) << v160;
                if (v163 < 0)
                {
                  v160 += 7;
                  v37 = v162;
                  v15 = v161++ > 8;
                  if (v15)
                    goto LABEL_282;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  v42 = 0;
              }
              break;
            }
LABEL_347:
            *((_QWORD *)this + 7) = v42;
            goto LABEL_335;
          case 6:
            *(_QWORD *)v8 |= 1uLL;
            v45 = *((_QWORD *)a2 + 1);
            v46 = *((_QWORD *)a2 + 2);
            v47 = *(_QWORD *)a2;
            if (v45 <= 0xFFFFFFFFFFFFFFF5 && v45 + 10 <= v46)
            {
              v48 = 0;
              v49 = 0;
              v50 = 0;
              do
              {
                v51 = v45 + 1;
                *((_QWORD *)a2 + 1) = v45 + 1;
                v52 = *(_BYTE *)(v47 + v45);
                v50 |= (unint64_t)(v52 & 0x7F) << v48;
                if ((v52 & 0x80) == 0)
                  goto LABEL_351;
                v48 += 7;
                v45 = v51;
                v15 = v49++ > 8;
              }
              while (!v15);
LABEL_289:
              v50 = 0;
              goto LABEL_351;
            }
            v164 = 0;
            v165 = 0;
            v50 = 0;
            if (v46 <= v45)
              v46 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v46 == v45)
              {
                v50 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v166 = v45 + 1;
                v167 = *(_BYTE *)(v47 + v45);
                *((_QWORD *)a2 + 1) = v166;
                v50 |= (unint64_t)(v167 & 0x7F) << v164;
                if (v167 < 0)
                {
                  v164 += 7;
                  v45 = v166;
                  v15 = v165++ > 8;
                  if (v15)
                    goto LABEL_289;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  v50 = 0;
              }
              break;
            }
LABEL_351:
            *((_QWORD *)this + 1) = v50;
            goto LABEL_335;
          case 7:
            *(_QWORD *)v8 |= 0x8000uLL;
            v53 = *((_QWORD *)a2 + 1);
            if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 26) = *(_DWORD *)(*(_QWORD *)a2 + v53);
            goto LABEL_334;
          case 8:
            *(_QWORD *)v8 |= 0x80uLL;
            v54 = *((_QWORD *)a2 + 1);
            v55 = *((_QWORD *)a2 + 2);
            v56 = *(_QWORD *)a2;
            if (v54 <= 0xFFFFFFFFFFFFFFF5 && v54 + 10 <= v55)
            {
              v57 = 0;
              v58 = 0;
              v59 = 0;
              do
              {
                v60 = v54 + 1;
                *((_QWORD *)a2 + 1) = v54 + 1;
                v61 = *(_BYTE *)(v56 + v54);
                v59 |= (unint64_t)(v61 & 0x7F) << v57;
                if ((v61 & 0x80) == 0)
                  goto LABEL_355;
                v57 += 7;
                v54 = v60;
                v15 = v58++ > 8;
              }
              while (!v15);
LABEL_296:
              v59 = 0;
              goto LABEL_355;
            }
            v168 = 0;
            v169 = 0;
            v59 = 0;
            if (v55 <= v54)
              v55 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v55 == v54)
              {
                v59 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v170 = v54 + 1;
                v171 = *(_BYTE *)(v56 + v54);
                *((_QWORD *)a2 + 1) = v170;
                v59 |= (unint64_t)(v171 & 0x7F) << v168;
                if (v171 < 0)
                {
                  v168 += 7;
                  v54 = v170;
                  v15 = v169++ > 8;
                  if (v15)
                    goto LABEL_296;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  v59 = 0;
              }
              break;
            }
LABEL_355:
            *((_QWORD *)this + 8) = v59;
            goto LABEL_335;
          case 9:
            *(_QWORD *)v8 |= 0x100uLL;
            v62 = *((_QWORD *)a2 + 1);
            v63 = *((_QWORD *)a2 + 2);
            v64 = *(_QWORD *)a2;
            if (v62 <= 0xFFFFFFFFFFFFFFF5 && v62 + 10 <= v63)
            {
              v65 = 0;
              v66 = 0;
              v67 = 0;
              do
              {
                v68 = v62 + 1;
                *((_QWORD *)a2 + 1) = v62 + 1;
                v69 = *(_BYTE *)(v64 + v62);
                v67 |= (unint64_t)(v69 & 0x7F) << v65;
                if ((v69 & 0x80) == 0)
                  goto LABEL_359;
                v65 += 7;
                v62 = v68;
                v15 = v66++ > 8;
              }
              while (!v15);
LABEL_303:
              v67 = 0;
              goto LABEL_359;
            }
            v172 = 0;
            v173 = 0;
            v67 = 0;
            if (v63 <= v62)
              v63 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v63 == v62)
              {
                v67 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v174 = v62 + 1;
                v175 = *(_BYTE *)(v64 + v62);
                *((_QWORD *)a2 + 1) = v174;
                v67 |= (unint64_t)(v175 & 0x7F) << v172;
                if (v175 < 0)
                {
                  v172 += 7;
                  v62 = v174;
                  v15 = v173++ > 8;
                  if (v15)
                    goto LABEL_303;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  v67 = 0;
              }
              break;
            }
LABEL_359:
            *((_QWORD *)this + 9) = v67;
            goto LABEL_335;
          case 10:
            *(_QWORD *)v8 |= 0x20000uLL;
            v70 = *((_QWORD *)a2 + 1);
            if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 28) = *(_DWORD *)(*(_QWORD *)a2 + v70);
            goto LABEL_334;
          case 11:
            *(_QWORD *)v8 |= 0x10000uLL;
            v71 = *((_QWORD *)a2 + 1);
            if (v71 > 0xFFFFFFFFFFFFFFFBLL || v71 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 27) = *(_DWORD *)(*(_QWORD *)a2 + v71);
            goto LABEL_334;
          case 12:
            *(_QWORD *)v8 |= 0x2000000uLL;
            v72 = *((_QWORD *)a2 + 1);
            if (v72 > 0xFFFFFFFFFFFFFFFBLL || v72 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 36) = *(_DWORD *)(*(_QWORD *)a2 + v72);
            goto LABEL_334;
          case 13:
            *(_QWORD *)v8 |= 0x200uLL;
            v73 = *((_QWORD *)a2 + 1);
            if (v73 > 0xFFFFFFFFFFFFFFFBLL || v73 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v73);
            goto LABEL_334;
          case 14:
            *(_QWORD *)v8 |= 0x400uLL;
            v74 = *((_QWORD *)a2 + 1);
            if (v74 > 0xFFFFFFFFFFFFFFFBLL || v74 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v74);
            goto LABEL_334;
          case 15:
            *(_QWORD *)v8 |= 0x800000uLL;
            v75 = *((_QWORD *)a2 + 1);
            if (v75 > 0xFFFFFFFFFFFFFFFBLL || v75 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 34) = *(_DWORD *)(*(_QWORD *)a2 + v75);
            goto LABEL_334;
          case 16:
            *(_QWORD *)v8 |= 0x4000uLL;
            v76 = *((_QWORD *)a2 + 1);
            if (v76 > 0xFFFFFFFFFFFFFFFBLL || v76 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v76);
            goto LABEL_334;
          case 17:
            *(_QWORD *)v8 |= 0x400000uLL;
            v77 = *((_QWORD *)a2 + 1);
            if (v77 > 0xFFFFFFFFFFFFFFFBLL || v77 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 33) = *(_DWORD *)(*(_QWORD *)a2 + v77);
            goto LABEL_334;
          case 18:
            *(_QWORD *)v8 |= 0x2000uLL;
            v78 = *((_QWORD *)a2 + 1);
            if (v78 > 0xFFFFFFFFFFFFFFFBLL || v78 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v78);
            goto LABEL_334;
          case 19:
            *(_QWORD *)v8 |= 0x8000000uLL;
            v79 = *((_QWORD *)a2 + 1);
            if (v79 > 0xFFFFFFFFFFFFFFFBLL || v79 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 38) = *(_DWORD *)(*(_QWORD *)a2 + v79);
            goto LABEL_334;
          case 20:
            *(_QWORD *)v8 |= 0x100000uLL;
            v80 = *((_QWORD *)a2 + 1);
            if (v80 > 0xFFFFFFFFFFFFFFFBLL || v80 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 31) = *(_DWORD *)(*(_QWORD *)a2 + v80);
            goto LABEL_334;
          case 21:
            *(_QWORD *)v8 |= 0x1000uLL;
            v81 = *((_QWORD *)a2 + 1);
            if (v81 > 0xFFFFFFFFFFFFFFFBLL || v81 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 23) = *(_DWORD *)(*(_QWORD *)a2 + v81);
            goto LABEL_334;
          case 22:
            *(_QWORD *)v8 |= 0x80000uLL;
            v82 = *((_QWORD *)a2 + 1);
            if (v82 > 0xFFFFFFFFFFFFFFFBLL || v82 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 30) = *(_DWORD *)(*(_QWORD *)a2 + v82);
            goto LABEL_334;
          case 23:
            *(_QWORD *)v8 |= 0x800uLL;
            v83 = *((_QWORD *)a2 + 1);
            if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v83);
            goto LABEL_334;
          case 24:
            *(_QWORD *)v8 |= 0x4000000uLL;
            v84 = *((_QWORD *)a2 + 1);
            if (v84 > 0xFFFFFFFFFFFFFFFBLL || v84 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 37) = *(_DWORD *)(*(_QWORD *)a2 + v84);
            goto LABEL_334;
          case 25:
            *(_QWORD *)v8 |= 0x40000000000000uLL;
            v85 = *((_QWORD *)a2 + 1);
            if (v85 > 0xFFFFFFFFFFFFFFFBLL || v85 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 65) = *(_DWORD *)(*(_QWORD *)a2 + v85);
            goto LABEL_334;
          case 26:
            *(_QWORD *)v8 |= 0x20000000000000uLL;
            v86 = *((_QWORD *)a2 + 1);
            if (v86 > 0xFFFFFFFFFFFFFFFBLL || v86 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 64) = *(_DWORD *)(*(_QWORD *)a2 + v86);
            goto LABEL_334;
          case 27:
            *(_QWORD *)v8 |= 0x4000000000000000uLL;
            v87 = *((_QWORD *)a2 + 1);
            if (v87 > 0xFFFFFFFFFFFFFFFBLL || v87 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 73) = *(_DWORD *)(*(_QWORD *)a2 + v87);
            goto LABEL_334;
          case 28:
            *(_QWORD *)v8 |= 0x800000000000uLL;
            v88 = *((_QWORD *)a2 + 1);
            if (v88 > 0xFFFFFFFFFFFFFFFBLL || v88 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 58) = *(_DWORD *)(*(_QWORD *)a2 + v88);
            goto LABEL_334;
          case 29:
            *(_QWORD *)v8 |= 0x1000000000000uLL;
            v89 = *((_QWORD *)a2 + 1);
            if (v89 > 0xFFFFFFFFFFFFFFFBLL || v89 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 59) = *(_DWORD *)(*(_QWORD *)a2 + v89);
            goto LABEL_334;
          case 30:
            *(_QWORD *)v8 |= 0x1000000000000000uLL;
            v90 = *((_QWORD *)a2 + 1);
            if (v90 > 0xFFFFFFFFFFFFFFFBLL || v90 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 71) = *(_DWORD *)(*(_QWORD *)a2 + v90);
            goto LABEL_334;
          case 31:
            *(_QWORD *)v8 |= 0x10000000000000uLL;
            v91 = *((_QWORD *)a2 + 1);
            if (v91 > 0xFFFFFFFFFFFFFFFBLL || v91 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 63) = *(_DWORD *)(*(_QWORD *)a2 + v91);
            goto LABEL_334;
          case 32:
            *(_QWORD *)v8 |= 0x800000000000000uLL;
            v92 = *((_QWORD *)a2 + 1);
            if (v92 > 0xFFFFFFFFFFFFFFFBLL || v92 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 70) = *(_DWORD *)(*(_QWORD *)a2 + v92);
            goto LABEL_334;
          case 33:
            *(_QWORD *)v8 |= 0x8000000000000uLL;
            v93 = *((_QWORD *)a2 + 1);
            if (v93 > 0xFFFFFFFFFFFFFFFBLL || v93 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 62) = *(_DWORD *)(*(_QWORD *)a2 + v93);
            goto LABEL_334;
          case 34:
            v8[8] |= 1u;
            v94 = *((_QWORD *)a2 + 1);
            if (v94 > 0xFFFFFFFFFFFFFFFBLL || v94 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 75) = *(_DWORD *)(*(_QWORD *)a2 + v94);
            goto LABEL_334;
          case 35:
            *(_QWORD *)v8 |= 0x200000000000000uLL;
            v95 = *((_QWORD *)a2 + 1);
            if (v95 > 0xFFFFFFFFFFFFFFFBLL || v95 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 68) = *(_DWORD *)(*(_QWORD *)a2 + v95);
            goto LABEL_334;
          case 36:
            *(_QWORD *)v8 |= 0x4000000000000uLL;
            v96 = *((_QWORD *)a2 + 1);
            if (v96 > 0xFFFFFFFFFFFFFFFBLL || v96 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 61) = *(_DWORD *)(*(_QWORD *)a2 + v96);
            goto LABEL_334;
          case 37:
            *(_QWORD *)v8 |= 0x100000000000000uLL;
            v97 = *((_QWORD *)a2 + 1);
            if (v97 > 0xFFFFFFFFFFFFFFFBLL || v97 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 67) = *(_DWORD *)(*(_QWORD *)a2 + v97);
            goto LABEL_334;
          case 38:
            *(_QWORD *)v8 |= 0x2000000000000uLL;
            v98 = *((_QWORD *)a2 + 1);
            if (v98 > 0xFFFFFFFFFFFFFFFBLL || v98 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 60) = *(_DWORD *)(*(_QWORD *)a2 + v98);
            goto LABEL_334;
          case 39:
            *(_QWORD *)v8 |= 0x8000000000000000;
            v99 = *((_QWORD *)a2 + 1);
            if (v99 > 0xFFFFFFFFFFFFFFFBLL || v99 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 74) = *(_DWORD *)(*(_QWORD *)a2 + v99);
            goto LABEL_334;
          case 40:
            *(_QWORD *)v8 |= 0x800000000uLL;
            v100 = *((_QWORD *)a2 + 1);
            if (v100 > 0xFFFFFFFFFFFFFFFBLL || v100 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 46) = *(_DWORD *)(*(_QWORD *)a2 + v100);
            goto LABEL_334;
          case 41:
            *(_QWORD *)v8 |= 0x400000000uLL;
            v101 = *((_QWORD *)a2 + 1);
            if (v101 > 0xFFFFFFFFFFFFFFFBLL || v101 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 45) = *(_DWORD *)(*(_QWORD *)a2 + v101);
            goto LABEL_334;
          case 42:
            *(_QWORD *)v8 |= 0x80000000000uLL;
            v102 = *((_QWORD *)a2 + 1);
            if (v102 > 0xFFFFFFFFFFFFFFFBLL || v102 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 54) = *(_DWORD *)(*(_QWORD *)a2 + v102);
            goto LABEL_334;
          case 43:
            *(_QWORD *)v8 |= 0x10000000uLL;
            v103 = *((_QWORD *)a2 + 1);
            if (v103 > 0xFFFFFFFFFFFFFFFBLL || v103 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 39) = *(_DWORD *)(*(_QWORD *)a2 + v103);
            goto LABEL_334;
          case 44:
            *(_QWORD *)v8 |= 0x20000000uLL;
            v104 = *((_QWORD *)a2 + 1);
            if (v104 > 0xFFFFFFFFFFFFFFFBLL || v104 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 40) = *(_DWORD *)(*(_QWORD *)a2 + v104);
            goto LABEL_334;
          case 45:
            *(_QWORD *)v8 |= 0x20000000000uLL;
            v105 = *((_QWORD *)a2 + 1);
            if (v105 > 0xFFFFFFFFFFFFFFFBLL || v105 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 52) = *(_DWORD *)(*(_QWORD *)a2 + v105);
            goto LABEL_334;
          case 46:
            *(_QWORD *)v8 |= 0x200000000uLL;
            v106 = *((_QWORD *)a2 + 1);
            if (v106 > 0xFFFFFFFFFFFFFFFBLL || v106 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 44) = *(_DWORD *)(*(_QWORD *)a2 + v106);
            goto LABEL_334;
          case 47:
            *(_QWORD *)v8 |= 0x10000000000uLL;
            v107 = *((_QWORD *)a2 + 1);
            if (v107 > 0xFFFFFFFFFFFFFFFBLL || v107 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 51) = *(_DWORD *)(*(_QWORD *)a2 + v107);
            goto LABEL_334;
          case 48:
            *(_QWORD *)v8 |= 0x100000000uLL;
            v108 = *((_QWORD *)a2 + 1);
            if (v108 > 0xFFFFFFFFFFFFFFFBLL || v108 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 43) = *(_DWORD *)(*(_QWORD *)a2 + v108);
            goto LABEL_334;
          case 49:
            *(_QWORD *)v8 |= 0x200000000000uLL;
            v109 = *((_QWORD *)a2 + 1);
            if (v109 > 0xFFFFFFFFFFFFFFFBLL || v109 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 56) = *(_DWORD *)(*(_QWORD *)a2 + v109);
            goto LABEL_334;
          case 50:
            *(_QWORD *)v8 |= 0x4000000000uLL;
            v110 = *((_QWORD *)a2 + 1);
            if (v110 > 0xFFFFFFFFFFFFFFFBLL || v110 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 49) = *(_DWORD *)(*(_QWORD *)a2 + v110);
            goto LABEL_334;
          case 51:
            *(_QWORD *)v8 |= 0x80000000uLL;
            v111 = *((_QWORD *)a2 + 1);
            if (v111 > 0xFFFFFFFFFFFFFFFBLL || v111 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 42) = *(_DWORD *)(*(_QWORD *)a2 + v111);
            goto LABEL_334;
          case 52:
            *(_QWORD *)v8 |= 0x2000000000uLL;
            v112 = *((_QWORD *)a2 + 1);
            if (v112 > 0xFFFFFFFFFFFFFFFBLL || v112 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 48) = *(_DWORD *)(*(_QWORD *)a2 + v112);
            goto LABEL_334;
          case 53:
            *(_QWORD *)v8 |= 0x40000000uLL;
            v113 = *((_QWORD *)a2 + 1);
            if (v113 > 0xFFFFFFFFFFFFFFFBLL || v113 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 41) = *(_DWORD *)(*(_QWORD *)a2 + v113);
            goto LABEL_334;
          case 54:
            *(_QWORD *)v8 |= 0x100000000000uLL;
            v114 = *((_QWORD *)a2 + 1);
            if (v114 > 0xFFFFFFFFFFFFFFFBLL || v114 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 55) = *(_DWORD *)(*(_QWORD *)a2 + v114);
            goto LABEL_334;
          case 55:
            *(_QWORD *)v8 |= 8uLL;
            v115 = *((_QWORD *)a2 + 1);
            v116 = *((_QWORD *)a2 + 2);
            v117 = *(_QWORD *)a2;
            if (v115 <= 0xFFFFFFFFFFFFFFF5 && v115 + 10 <= v116)
            {
              v118 = 0;
              v119 = 0;
              v120 = 0;
              do
              {
                v121 = v115 + 1;
                *((_QWORD *)a2 + 1) = v115 + 1;
                v122 = *(_BYTE *)(v117 + v115);
                v120 |= (unint64_t)(v122 & 0x7F) << v118;
                if ((v122 & 0x80) == 0)
                  goto LABEL_363;
                v118 += 7;
                v115 = v121;
                v15 = v119++ > 8;
              }
              while (!v15);
LABEL_310:
              v120 = 0;
              goto LABEL_363;
            }
            v176 = 0;
            v177 = 0;
            v120 = 0;
            if (v116 <= v115)
              v116 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v116 == v115)
              {
                v120 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v178 = v115 + 1;
                v179 = *(_BYTE *)(v117 + v115);
                *((_QWORD *)a2 + 1) = v178;
                v120 |= (unint64_t)(v179 & 0x7F) << v176;
                if (v179 < 0)
                {
                  v176 += 7;
                  v115 = v178;
                  v15 = v177++ > 8;
                  if (v15)
                    goto LABEL_310;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  v120 = 0;
              }
              break;
            }
LABEL_363:
            *((_QWORD *)this + 4) = v120;
            goto LABEL_335;
          case 56:
            *(_QWORD *)v8 |= 0x10uLL;
            v123 = *((_QWORD *)a2 + 1);
            v124 = *((_QWORD *)a2 + 2);
            v125 = *(_QWORD *)a2;
            if (v123 <= 0xFFFFFFFFFFFFFFF5 && v123 + 10 <= v124)
            {
              v126 = 0;
              v127 = 0;
              v128 = 0;
              do
              {
                v129 = v123 + 1;
                *((_QWORD *)a2 + 1) = v123 + 1;
                v130 = *(_BYTE *)(v125 + v123);
                v128 |= (unint64_t)(v130 & 0x7F) << v126;
                if ((v130 & 0x80) == 0)
                  goto LABEL_367;
                v126 += 7;
                v123 = v129;
                v15 = v127++ > 8;
              }
              while (!v15);
LABEL_317:
              v128 = 0;
              goto LABEL_367;
            }
            v180 = 0;
            v181 = 0;
            v128 = 0;
            if (v124 <= v123)
              v124 = *((_QWORD *)a2 + 1);
            break;
          case 57:
            *(_QWORD *)v8 |= 0x1000000uLL;
            v131 = *((_QWORD *)a2 + 1);
            if (v131 > 0xFFFFFFFFFFFFFFFBLL || v131 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 35) = *(_DWORD *)(*(_QWORD *)a2 + v131);
            goto LABEL_334;
          case 58:
            *(_QWORD *)v8 |= 0x2000000000000000uLL;
            v132 = *((_QWORD *)a2 + 1);
            if (v132 > 0xFFFFFFFFFFFFFFFBLL || v132 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 72) = *(_DWORD *)(*(_QWORD *)a2 + v132);
            goto LABEL_334;
          case 59:
            *(_QWORD *)v8 |= 0x40000000000uLL;
            v133 = *((_QWORD *)a2 + 1);
            if (v133 > 0xFFFFFFFFFFFFFFFBLL || v133 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 53) = *(_DWORD *)(*(_QWORD *)a2 + v133);
            goto LABEL_334;
          case 60:
            *(_QWORD *)v8 |= 0x40000uLL;
            v134 = *((_QWORD *)a2 + 1);
            if (v134 > 0xFFFFFFFFFFFFFFFBLL || v134 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 29) = *(_DWORD *)(*(_QWORD *)a2 + v134);
            goto LABEL_334;
          case 61:
            *(_QWORD *)v8 |= 0x80000000000000uLL;
            v135 = *((_QWORD *)a2 + 1);
            if (v135 > 0xFFFFFFFFFFFFFFFBLL || v135 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 66) = *(_DWORD *)(*(_QWORD *)a2 + v135);
            goto LABEL_334;
          case 62:
            *(_QWORD *)v8 |= 0x1000000000uLL;
            v136 = *((_QWORD *)a2 + 1);
            if (v136 > 0xFFFFFFFFFFFFFFFBLL || v136 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 47) = *(_DWORD *)(*(_QWORD *)a2 + v136);
            goto LABEL_334;
          case 63:
            *(_QWORD *)v8 |= 0x200000uLL;
            v137 = *((_QWORD *)a2 + 1);
            if (v137 > 0xFFFFFFFFFFFFFFFBLL || v137 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 32) = *(_DWORD *)(*(_QWORD *)a2 + v137);
            goto LABEL_334;
          case 64:
            *(_QWORD *)v8 |= 0x400000000000000uLL;
            v138 = *((_QWORD *)a2 + 1);
            if (v138 > 0xFFFFFFFFFFFFFFFBLL || v138 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_252;
            *((_DWORD *)this + 69) = *(_DWORD *)(*(_QWORD *)a2 + v138);
            goto LABEL_334;
          case 65:
            *(_QWORD *)v8 |= 0x8000000000uLL;
            v139 = *((_QWORD *)a2 + 1);
            if (v139 > 0xFFFFFFFFFFFFFFFBLL || v139 + 4 > *((_QWORD *)a2 + 2))
            {
LABEL_252:
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_335;
            }
            *((_DWORD *)this + 50) = *(_DWORD *)(*(_QWORD *)a2 + v139);
            goto LABEL_334;
          default:
            goto LABEL_20;
        }
        while (1)
        {
          if (v124 == v123)
          {
            v128 = 0;
            *((_BYTE *)a2 + 24) = 1;
            goto LABEL_367;
          }
          v182 = v123 + 1;
          v183 = *(_BYTE *)(v125 + v123);
          *((_QWORD *)a2 + 1) = v182;
          v128 |= (unint64_t)(v183 & 0x7F) << v180;
          if ((v183 & 0x80) == 0)
            break;
          v180 += 7;
          v123 = v182;
          v15 = v181++ > 8;
          if (v15)
            goto LABEL_317;
        }
        if (*((_BYTE *)a2 + 24))
          v128 = 0;
LABEL_367:
        *((_QWORD *)this + 5) = v128;
      }
LABEL_335:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)a2 + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_22;
      v16 += 7;
      v2 = v18;
      v15 = v17++ > 8;
      if (v15)
        goto LABEL_20;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaPulseResult::writeTo(uint64_t this, PB::Writer *a2)
{
  float *v3;
  uint64_t *v4;
  char v5;
  uint64_t v6;

  v3 = (float *)this;
  v4 = (uint64_t *)(this + 316);
  v5 = *(_BYTE *)(this + 324);
  if ((v5 & 8) != 0)
  {
    this = PB::Writer::write(a2);
    v6 = *v4;
    v5 = *((_BYTE *)v4 + 8);
    if ((v5 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = *v4;
  if ((*(_BYTE *)(this + 324) & 2) != 0)
  {
LABEL_5:
    this = PB::Writer::write(a2, v3[76]);
    v6 = *v4;
    v5 = *((_BYTE *)v4 + 8);
  }
LABEL_6:
  if ((v5 & 4) != 0)
  {
    this = PB::Writer::write(a2, v3[77]);
    v6 = *v4;
    v5 = *((_BYTE *)v4 + 8);
    if ((*v4 & 0x20) == 0)
    {
LABEL_8:
      if ((v6 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_75;
    }
  }
  else if ((v6 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  this = PB::Writer::writeVarInt(a2);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v6 & 1) == 0)
      goto LABEL_10;
    goto LABEL_76;
  }
LABEL_75:
  this = PB::Writer::writeVarInt(a2);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 1) == 0)
  {
LABEL_10:
    if ((v6 & 0x8000) == 0)
      goto LABEL_11;
    goto LABEL_77;
  }
LABEL_76:
  this = PB::Writer::writeVarInt(a2);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x8000) == 0)
  {
LABEL_11:
    if ((v6 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_78;
  }
LABEL_77:
  this = PB::Writer::write(a2, v3[26]);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x80) == 0)
  {
LABEL_12:
    if ((v6 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_79;
  }
LABEL_78:
  this = PB::Writer::writeVarInt(a2);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x100) == 0)
  {
LABEL_13:
    if ((v6 & 0x20000) == 0)
      goto LABEL_14;
    goto LABEL_80;
  }
LABEL_79:
  this = PB::Writer::writeVarInt(a2);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x20000) == 0)
  {
LABEL_14:
    if ((v6 & 0x10000) == 0)
      goto LABEL_15;
    goto LABEL_81;
  }
LABEL_80:
  this = PB::Writer::write(a2, v3[28]);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x10000) == 0)
  {
LABEL_15:
    if ((v6 & 0x2000000) == 0)
      goto LABEL_16;
    goto LABEL_82;
  }
LABEL_81:
  this = PB::Writer::write(a2, v3[27]);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x2000000) == 0)
  {
LABEL_16:
    if ((v6 & 0x200) == 0)
      goto LABEL_17;
    goto LABEL_83;
  }
LABEL_82:
  this = PB::Writer::write(a2, v3[36]);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x200) == 0)
  {
LABEL_17:
    if ((v6 & 0x400) == 0)
      goto LABEL_18;
    goto LABEL_84;
  }
LABEL_83:
  this = PB::Writer::write(a2, v3[20]);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x400) == 0)
  {
LABEL_18:
    if ((v6 & 0x800000) == 0)
      goto LABEL_19;
    goto LABEL_85;
  }
LABEL_84:
  this = PB::Writer::write(a2, v3[21]);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x800000) == 0)
  {
LABEL_19:
    if ((v6 & 0x4000) == 0)
      goto LABEL_20;
    goto LABEL_86;
  }
LABEL_85:
  this = PB::Writer::write(a2, v3[34]);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x4000) == 0)
  {
LABEL_20:
    if ((v6 & 0x400000) == 0)
      goto LABEL_21;
    goto LABEL_87;
  }
LABEL_86:
  this = PB::Writer::write(a2, v3[25]);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x400000) == 0)
  {
LABEL_21:
    if ((v6 & 0x2000) == 0)
      goto LABEL_22;
    goto LABEL_88;
  }
LABEL_87:
  this = PB::Writer::write(a2, v3[33]);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x2000) == 0)
  {
LABEL_22:
    if ((v6 & 0x8000000) == 0)
      goto LABEL_23;
    goto LABEL_89;
  }
LABEL_88:
  this = PB::Writer::write(a2, v3[24]);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x8000000) == 0)
  {
LABEL_23:
    if ((v6 & 0x100000) == 0)
      goto LABEL_24;
    goto LABEL_90;
  }
LABEL_89:
  this = PB::Writer::write(a2, v3[38]);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x100000) == 0)
  {
LABEL_24:
    if ((v6 & 0x1000) == 0)
      goto LABEL_25;
    goto LABEL_91;
  }
LABEL_90:
  this = PB::Writer::write(a2, v3[31]);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x1000) == 0)
  {
LABEL_25:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_92;
  }
LABEL_91:
  this = PB::Writer::write(a2, v3[23]);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x80000) == 0)
  {
LABEL_26:
    if ((v6 & 0x800) == 0)
      goto LABEL_27;
    goto LABEL_93;
  }
LABEL_92:
  this = PB::Writer::write(a2, v3[30]);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x800) == 0)
  {
LABEL_27:
    if ((v6 & 0x4000000) == 0)
      goto LABEL_28;
    goto LABEL_94;
  }
LABEL_93:
  this = PB::Writer::write(a2, v3[22]);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v6 & 0x40000000000000) == 0)
      goto LABEL_29;
    goto LABEL_95;
  }
LABEL_94:
  this = PB::Writer::write(a2, v3[37]);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x40000000000000) == 0)
  {
LABEL_29:
    if ((v6 & 0x20000000000000) == 0)
      goto LABEL_30;
    goto LABEL_96;
  }
LABEL_95:
  this = PB::Writer::write(a2, v3[65]);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x20000000000000) == 0)
  {
LABEL_30:
    if ((v6 & 0x4000000000000000) == 0)
      goto LABEL_31;
    goto LABEL_97;
  }
LABEL_96:
  this = PB::Writer::write(a2, v3[64]);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x4000000000000000) == 0)
  {
LABEL_31:
    if ((v6 & 0x800000000000) == 0)
      goto LABEL_32;
    goto LABEL_98;
  }
LABEL_97:
  this = PB::Writer::write(a2, v3[73]);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x800000000000) == 0)
  {
LABEL_32:
    if ((v6 & 0x1000000000000) == 0)
      goto LABEL_33;
    goto LABEL_99;
  }
LABEL_98:
  this = PB::Writer::write(a2, v3[58]);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x1000000000000) == 0)
  {
LABEL_33:
    if ((v6 & 0x1000000000000000) == 0)
      goto LABEL_34;
    goto LABEL_100;
  }
LABEL_99:
  this = PB::Writer::write(a2, v3[59]);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x1000000000000000) == 0)
  {
LABEL_34:
    if ((v6 & 0x10000000000000) == 0)
      goto LABEL_35;
    goto LABEL_101;
  }
LABEL_100:
  this = PB::Writer::write(a2, v3[71]);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x10000000000000) == 0)
  {
LABEL_35:
    if ((v6 & 0x800000000000000) == 0)
      goto LABEL_36;
    goto LABEL_102;
  }
LABEL_101:
  this = PB::Writer::write(a2, v3[63]);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x800000000000000) == 0)
  {
LABEL_36:
    if ((v6 & 0x8000000000000) == 0)
      goto LABEL_37;
    goto LABEL_103;
  }
LABEL_102:
  this = PB::Writer::write(a2, v3[70]);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x8000000000000) == 0)
  {
LABEL_37:
    if ((v5 & 1) == 0)
      goto LABEL_38;
    goto LABEL_104;
  }
LABEL_103:
  this = PB::Writer::write(a2, v3[62]);
  v6 = *v4;
  if ((v4[1] & 1) == 0)
  {
LABEL_38:
    if ((v6 & 0x200000000000000) == 0)
      goto LABEL_39;
    goto LABEL_105;
  }
LABEL_104:
  this = PB::Writer::write(a2, v3[75]);
  v6 = *v4;
  if ((*v4 & 0x200000000000000) == 0)
  {
LABEL_39:
    if ((v6 & 0x4000000000000) == 0)
      goto LABEL_40;
    goto LABEL_106;
  }
LABEL_105:
  this = PB::Writer::write(a2, v3[68]);
  v6 = *v4;
  if ((*v4 & 0x4000000000000) == 0)
  {
LABEL_40:
    if ((v6 & 0x100000000000000) == 0)
      goto LABEL_41;
    goto LABEL_107;
  }
LABEL_106:
  this = PB::Writer::write(a2, v3[61]);
  v6 = *v4;
  if ((*v4 & 0x100000000000000) == 0)
  {
LABEL_41:
    if ((v6 & 0x2000000000000) == 0)
      goto LABEL_42;
    goto LABEL_108;
  }
LABEL_107:
  this = PB::Writer::write(a2, v3[67]);
  v6 = *v4;
  if ((*v4 & 0x2000000000000) == 0)
  {
LABEL_42:
    if ((v6 & 0x8000000000000000) == 0)
      goto LABEL_43;
    goto LABEL_109;
  }
LABEL_108:
  this = PB::Writer::write(a2, v3[60]);
  v6 = *v4;
  if ((*v4 & 0x8000000000000000) == 0)
  {
LABEL_43:
    if ((v6 & 0x800000000) == 0)
      goto LABEL_44;
    goto LABEL_110;
  }
LABEL_109:
  this = PB::Writer::write(a2, v3[74]);
  v6 = *v4;
  if ((*v4 & 0x800000000) == 0)
  {
LABEL_44:
    if ((v6 & 0x400000000) == 0)
      goto LABEL_45;
    goto LABEL_111;
  }
LABEL_110:
  this = PB::Writer::write(a2, v3[46]);
  v6 = *v4;
  if ((*v4 & 0x400000000) == 0)
  {
LABEL_45:
    if ((v6 & 0x80000000000) == 0)
      goto LABEL_46;
    goto LABEL_112;
  }
LABEL_111:
  this = PB::Writer::write(a2, v3[45]);
  v6 = *v4;
  if ((*v4 & 0x80000000000) == 0)
  {
LABEL_46:
    if ((v6 & 0x10000000) == 0)
      goto LABEL_47;
    goto LABEL_113;
  }
LABEL_112:
  this = PB::Writer::write(a2, v3[54]);
  v6 = *v4;
  if ((*v4 & 0x10000000) == 0)
  {
LABEL_47:
    if ((v6 & 0x20000000) == 0)
      goto LABEL_48;
    goto LABEL_114;
  }
LABEL_113:
  this = PB::Writer::write(a2, v3[39]);
  v6 = *v4;
  if ((*v4 & 0x20000000) == 0)
  {
LABEL_48:
    if ((v6 & 0x20000000000) == 0)
      goto LABEL_49;
    goto LABEL_115;
  }
LABEL_114:
  this = PB::Writer::write(a2, v3[40]);
  v6 = *v4;
  if ((*v4 & 0x20000000000) == 0)
  {
LABEL_49:
    if ((v6 & 0x200000000) == 0)
      goto LABEL_50;
    goto LABEL_116;
  }
LABEL_115:
  this = PB::Writer::write(a2, v3[52]);
  v6 = *v4;
  if ((*v4 & 0x200000000) == 0)
  {
LABEL_50:
    if ((v6 & 0x10000000000) == 0)
      goto LABEL_51;
    goto LABEL_117;
  }
LABEL_116:
  this = PB::Writer::write(a2, v3[44]);
  v6 = *v4;
  if ((*v4 & 0x10000000000) == 0)
  {
LABEL_51:
    if ((v6 & 0x100000000) == 0)
      goto LABEL_52;
    goto LABEL_118;
  }
LABEL_117:
  this = PB::Writer::write(a2, v3[51]);
  v6 = *v4;
  if ((*v4 & 0x100000000) == 0)
  {
LABEL_52:
    if ((v6 & 0x200000000000) == 0)
      goto LABEL_53;
    goto LABEL_119;
  }
LABEL_118:
  this = PB::Writer::write(a2, v3[43]);
  v6 = *v4;
  if ((*v4 & 0x200000000000) == 0)
  {
LABEL_53:
    if ((v6 & 0x4000000000) == 0)
      goto LABEL_54;
    goto LABEL_120;
  }
LABEL_119:
  this = PB::Writer::write(a2, v3[56]);
  v6 = *v4;
  if ((*v4 & 0x4000000000) == 0)
  {
LABEL_54:
    if ((v6 & 0x80000000) == 0)
      goto LABEL_55;
    goto LABEL_121;
  }
LABEL_120:
  this = PB::Writer::write(a2, v3[49]);
  v6 = *v4;
  if ((*v4 & 0x80000000) == 0)
  {
LABEL_55:
    if ((v6 & 0x2000000000) == 0)
      goto LABEL_56;
    goto LABEL_122;
  }
LABEL_121:
  this = PB::Writer::write(a2, v3[42]);
  v6 = *v4;
  if ((*v4 & 0x2000000000) == 0)
  {
LABEL_56:
    if ((v6 & 0x40000000) == 0)
      goto LABEL_57;
    goto LABEL_123;
  }
LABEL_122:
  this = PB::Writer::write(a2, v3[48]);
  v6 = *v4;
  if ((*v4 & 0x40000000) == 0)
  {
LABEL_57:
    if ((v6 & 0x100000000000) == 0)
      goto LABEL_58;
    goto LABEL_124;
  }
LABEL_123:
  this = PB::Writer::write(a2, v3[41]);
  v6 = *v4;
  if ((*v4 & 0x100000000000) == 0)
  {
LABEL_58:
    if ((v6 & 8) == 0)
      goto LABEL_59;
    goto LABEL_125;
  }
LABEL_124:
  this = PB::Writer::write(a2, v3[55]);
  v6 = *v4;
  if ((*v4 & 8) == 0)
  {
LABEL_59:
    if ((v6 & 0x10) == 0)
      goto LABEL_60;
    goto LABEL_126;
  }
LABEL_125:
  this = PB::Writer::writeVarInt(a2);
  v6 = *v4;
  if ((*v4 & 0x10) == 0)
  {
LABEL_60:
    if ((v6 & 0x1000000) == 0)
      goto LABEL_61;
    goto LABEL_127;
  }
LABEL_126:
  this = PB::Writer::writeVarInt(a2);
  v6 = *v4;
  if ((*v4 & 0x1000000) == 0)
  {
LABEL_61:
    if ((v6 & 0x2000000000000000) == 0)
      goto LABEL_62;
    goto LABEL_128;
  }
LABEL_127:
  this = PB::Writer::write(a2, v3[35]);
  v6 = *v4;
  if ((*v4 & 0x2000000000000000) == 0)
  {
LABEL_62:
    if ((v6 & 0x40000000000) == 0)
      goto LABEL_63;
    goto LABEL_129;
  }
LABEL_128:
  this = PB::Writer::write(a2, v3[72]);
  v6 = *v4;
  if ((*v4 & 0x40000000000) == 0)
  {
LABEL_63:
    if ((v6 & 0x40000) == 0)
      goto LABEL_64;
    goto LABEL_130;
  }
LABEL_129:
  this = PB::Writer::write(a2, v3[53]);
  v6 = *v4;
  if ((*v4 & 0x40000) == 0)
  {
LABEL_64:
    if ((v6 & 0x80000000000000) == 0)
      goto LABEL_65;
    goto LABEL_131;
  }
LABEL_130:
  this = PB::Writer::write(a2, v3[29]);
  v6 = *v4;
  if ((*v4 & 0x80000000000000) == 0)
  {
LABEL_65:
    if ((v6 & 0x1000000000) == 0)
      goto LABEL_66;
    goto LABEL_132;
  }
LABEL_131:
  this = PB::Writer::write(a2, v3[66]);
  v6 = *v4;
  if ((*v4 & 0x1000000000) == 0)
  {
LABEL_66:
    if ((v6 & 0x200000) == 0)
      goto LABEL_67;
    goto LABEL_133;
  }
LABEL_132:
  this = PB::Writer::write(a2, v3[47]);
  v6 = *v4;
  if ((*v4 & 0x200000) == 0)
  {
LABEL_67:
    if ((v6 & 0x400000000000000) == 0)
      goto LABEL_68;
    goto LABEL_134;
  }
LABEL_133:
  this = PB::Writer::write(a2, v3[32]);
  v6 = *v4;
  if ((*v4 & 0x400000000000000) == 0)
  {
LABEL_68:
    if ((v6 & 0x8000000000) == 0)
      goto LABEL_69;
    goto LABEL_135;
  }
LABEL_134:
  this = PB::Writer::write(a2, v3[69]);
  v6 = *v4;
  if ((*v4 & 0x8000000000) == 0)
  {
LABEL_69:
    if ((v6 & 2) == 0)
      goto LABEL_70;
    goto LABEL_136;
  }
LABEL_135:
  this = PB::Writer::write(a2, v3[50]);
  v6 = *v4;
  if ((*v4 & 2) == 0)
  {
LABEL_70:
    if ((v6 & 4) == 0)
      goto LABEL_71;
    goto LABEL_137;
  }
LABEL_136:
  this = PB::Writer::writeVarInt(a2);
  v6 = *v4;
  if ((*v4 & 4) == 0)
  {
LABEL_71:
    if ((v6 & 0x400000000000) == 0)
      return this;
    return PB::Writer::write(a2, v3[57]);
  }
LABEL_137:
  this = PB::Writer::writeVarInt(a2);
  if ((*v4 & 0x400000000000) != 0)
    return PB::Writer::write(a2, v3[57]);
  return this;
}

uint64_t CMMsl::KappaPulseResult::hash_value(CMMsl::KappaPulseResult *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  float v45;
  uint64_t v46;
  float v47;
  uint64_t v48;
  float v49;
  uint64_t v50;
  float v51;
  uint64_t v52;
  float v53;
  uint64_t v54;
  float v55;
  uint64_t v56;
  float v57;
  uint64_t v58;
  float v59;
  uint64_t v60;
  float v61;
  uint64_t v62;
  float v63;
  uint64_t v64;
  float v65;
  uint64_t v66;
  float v67;
  uint64_t v68;
  float v69;
  uint64_t v70;
  float v71;
  uint64_t v72;
  float v73;
  uint64_t v74;
  float v75;
  uint64_t v76;
  float v77;
  uint64_t v78;
  float v79;
  uint64_t v80;
  float v81;
  uint64_t v82;
  float v83;
  uint64_t v84;
  float v85;
  uint64_t v86;
  float v87;
  uint64_t v88;
  float v89;
  uint64_t v90;
  float v91;
  uint64_t v92;
  float v93;
  uint64_t v94;
  float v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  float v99;
  uint64_t v100;
  float v101;
  uint64_t v102;
  float v103;
  uint64_t v104;
  float v105;
  uint64_t v106;
  float v107;
  uint64_t v108;
  float v109;
  uint64_t v110;
  float v111;
  uint64_t v112;
  float v113;
  uint64_t v114;
  float v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  float v119;
  uint64_t v120;
  float v121;
  uint64_t v122;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;

  if ((*((_BYTE *)this + 324) & 8) != 0)
    v1 = *((unsigned __int8 *)this + 312);
  else
    v1 = 0;
  if ((*((_BYTE *)this + 324) & 2) != 0)
  {
    v2 = *((float *)this + 76);
    v3 = LODWORD(v2);
    if (v2 == 0.0)
      v3 = 0;
    v164 = v3;
  }
  else
  {
    v164 = 0;
  }
  v4 = *(_QWORD *)((char *)this + 316);
  if ((*((_BYTE *)this + 324) & 4) != 0)
  {
    v121 = *((float *)this + 77);
    v122 = LODWORD(v121);
    if (v121 == 0.0)
      v122 = 0;
    v163 = v122;
    if ((v4 & 0x20) != 0)
    {
LABEL_11:
      v162 = *((_QWORD *)this + 6);
      if ((v4 & 0x40) != 0)
        goto LABEL_12;
      goto LABEL_204;
    }
  }
  else
  {
    v163 = 0;
    if ((v4 & 0x20) != 0)
      goto LABEL_11;
  }
  v162 = 0;
  if ((v4 & 0x40) != 0)
  {
LABEL_12:
    v161 = *((_QWORD *)this + 7);
    if ((v4 & 1) != 0)
      goto LABEL_13;
    goto LABEL_205;
  }
LABEL_204:
  v161 = 0;
  if ((v4 & 1) != 0)
  {
LABEL_13:
    v160 = *((_QWORD *)this + 1);
    if ((v4 & 0x8000) != 0)
      goto LABEL_14;
LABEL_206:
    v159 = 0;
    if ((v4 & 0x80) != 0)
      goto LABEL_17;
    goto LABEL_207;
  }
LABEL_205:
  v160 = 0;
  if ((v4 & 0x8000) == 0)
    goto LABEL_206;
LABEL_14:
  v5 = *((float *)this + 26);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  v159 = v6;
  if ((v4 & 0x80) != 0)
  {
LABEL_17:
    v158 = *((_QWORD *)this + 8);
    if ((v4 & 0x100) != 0)
      goto LABEL_18;
    goto LABEL_208;
  }
LABEL_207:
  v158 = 0;
  if ((v4 & 0x100) != 0)
  {
LABEL_18:
    v157 = *((_QWORD *)this + 9);
    if ((v4 & 0x20000) != 0)
      goto LABEL_19;
LABEL_209:
    v156 = 0;
    if ((v4 & 0x10000) != 0)
      goto LABEL_22;
LABEL_210:
    v155 = 0;
    if ((v4 & 0x2000000) != 0)
      goto LABEL_25;
LABEL_211:
    v154 = 0;
    if ((v4 & 0x200) != 0)
      goto LABEL_28;
LABEL_212:
    v153 = 0;
    if ((v4 & 0x400) != 0)
      goto LABEL_31;
LABEL_213:
    v152 = 0;
    if ((v4 & 0x800000) != 0)
      goto LABEL_34;
LABEL_214:
    v151 = 0;
    if ((v4 & 0x4000) != 0)
      goto LABEL_37;
LABEL_215:
    v150 = 0;
    if ((v4 & 0x400000) != 0)
      goto LABEL_40;
LABEL_216:
    v149 = 0;
    if ((v4 & 0x2000) != 0)
      goto LABEL_43;
LABEL_217:
    v148 = 0;
    if ((v4 & 0x8000000) != 0)
      goto LABEL_46;
LABEL_218:
    v147 = 0;
    if ((v4 & 0x100000) != 0)
      goto LABEL_49;
LABEL_219:
    v146 = 0;
    if ((v4 & 0x1000) != 0)
      goto LABEL_52;
LABEL_220:
    v145 = 0;
    if ((v4 & 0x80000) != 0)
      goto LABEL_55;
LABEL_221:
    v144 = 0;
    if ((v4 & 0x800) != 0)
      goto LABEL_58;
LABEL_222:
    v143 = 0;
    if ((v4 & 0x4000000) != 0)
      goto LABEL_61;
LABEL_223:
    v142 = 0;
    if ((v4 & 0x40000000000000) != 0)
      goto LABEL_64;
LABEL_224:
    v141 = 0;
    if ((v4 & 0x20000000000000) != 0)
      goto LABEL_67;
LABEL_225:
    v140 = 0;
    if ((v4 & 0x4000000000000000) != 0)
      goto LABEL_70;
LABEL_226:
    v139 = 0;
    if ((v4 & 0x800000000000) != 0)
      goto LABEL_73;
LABEL_227:
    v138 = 0;
    if ((v4 & 0x1000000000000) != 0)
      goto LABEL_76;
LABEL_228:
    v137 = 0;
    if ((v4 & 0x1000000000000000) != 0)
      goto LABEL_79;
LABEL_229:
    v136 = 0;
    if ((v4 & 0x10000000000000) != 0)
      goto LABEL_82;
LABEL_230:
    v135 = 0;
    if ((v4 & 0x800000000000000) != 0)
      goto LABEL_85;
LABEL_231:
    v134 = 0;
    if ((v4 & 0x8000000000000) != 0)
      goto LABEL_88;
LABEL_232:
    v133 = 0;
    if ((*((_BYTE *)this + 324) & 1) != 0)
      goto LABEL_91;
LABEL_233:
    v132 = 0;
    if ((v4 & 0x200000000000000) != 0)
      goto LABEL_94;
LABEL_234:
    v131 = 0;
    if ((v4 & 0x4000000000000) != 0)
      goto LABEL_97;
LABEL_235:
    v130 = 0;
    if ((v4 & 0x100000000000000) != 0)
      goto LABEL_100;
LABEL_236:
    v129 = 0;
    if ((v4 & 0x2000000000000) != 0)
      goto LABEL_103;
LABEL_237:
    v128 = 0;
    if (v4 < 0)
      goto LABEL_106;
LABEL_238:
    v127 = 0;
    if ((v4 & 0x800000000) != 0)
      goto LABEL_109;
LABEL_239:
    v126 = 0;
    if ((v4 & 0x400000000) != 0)
      goto LABEL_112;
LABEL_240:
    v125 = 0;
    if ((v4 & 0x80000000000) != 0)
      goto LABEL_115;
LABEL_241:
    v124 = 0;
    if ((v4 & 0x10000000) != 0)
      goto LABEL_118;
LABEL_242:
    v74 = 0;
    if ((v4 & 0x20000000) != 0)
      goto LABEL_122;
LABEL_243:
    v76 = 0;
    if ((v4 & 0x20000000000) != 0)
      goto LABEL_126;
LABEL_244:
    v78 = 0;
    if ((v4 & 0x200000000) != 0)
      goto LABEL_130;
LABEL_245:
    v80 = 0;
    if ((v4 & 0x10000000000) != 0)
      goto LABEL_134;
LABEL_246:
    v82 = 0;
    if ((v4 & 0x100000000) != 0)
      goto LABEL_138;
LABEL_247:
    v84 = 0;
    if ((v4 & 0x200000000000) != 0)
      goto LABEL_142;
LABEL_248:
    v86 = 0;
    if ((v4 & 0x4000000000) != 0)
      goto LABEL_146;
LABEL_249:
    v88 = 0;
    if ((v4 & 0x80000000) != 0)
      goto LABEL_150;
LABEL_250:
    v90 = 0;
    if ((v4 & 0x2000000000) != 0)
      goto LABEL_154;
LABEL_251:
    v92 = 0;
    if ((v4 & 0x40000000) != 0)
      goto LABEL_158;
LABEL_252:
    v94 = 0;
    if ((v4 & 0x100000000000) != 0)
      goto LABEL_162;
LABEL_253:
    v96 = 0;
    if ((v4 & 8) != 0)
      goto LABEL_166;
    goto LABEL_254;
  }
LABEL_208:
  v157 = 0;
  if ((v4 & 0x20000) == 0)
    goto LABEL_209;
LABEL_19:
  v7 = *((float *)this + 28);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  v156 = v8;
  if ((v4 & 0x10000) == 0)
    goto LABEL_210;
LABEL_22:
  v9 = *((float *)this + 27);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  v155 = v10;
  if ((v4 & 0x2000000) == 0)
    goto LABEL_211;
LABEL_25:
  v11 = *((float *)this + 36);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  v154 = v12;
  if ((v4 & 0x200) == 0)
    goto LABEL_212;
LABEL_28:
  v13 = *((float *)this + 20);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  v153 = v14;
  if ((v4 & 0x400) == 0)
    goto LABEL_213;
LABEL_31:
  v15 = *((float *)this + 21);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  v152 = v16;
  if ((v4 & 0x800000) == 0)
    goto LABEL_214;
LABEL_34:
  v17 = *((float *)this + 34);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  v151 = v18;
  if ((v4 & 0x4000) == 0)
    goto LABEL_215;
LABEL_37:
  v19 = *((float *)this + 25);
  v20 = LODWORD(v19);
  if (v19 == 0.0)
    v20 = 0;
  v150 = v20;
  if ((v4 & 0x400000) == 0)
    goto LABEL_216;
LABEL_40:
  v21 = *((float *)this + 33);
  v22 = LODWORD(v21);
  if (v21 == 0.0)
    v22 = 0;
  v149 = v22;
  if ((v4 & 0x2000) == 0)
    goto LABEL_217;
LABEL_43:
  v23 = *((float *)this + 24);
  v24 = LODWORD(v23);
  if (v23 == 0.0)
    v24 = 0;
  v148 = v24;
  if ((v4 & 0x8000000) == 0)
    goto LABEL_218;
LABEL_46:
  v25 = *((float *)this + 38);
  v26 = LODWORD(v25);
  if (v25 == 0.0)
    v26 = 0;
  v147 = v26;
  if ((v4 & 0x100000) == 0)
    goto LABEL_219;
LABEL_49:
  v27 = *((float *)this + 31);
  v28 = LODWORD(v27);
  if (v27 == 0.0)
    v28 = 0;
  v146 = v28;
  if ((v4 & 0x1000) == 0)
    goto LABEL_220;
LABEL_52:
  v29 = *((float *)this + 23);
  v30 = LODWORD(v29);
  if (v29 == 0.0)
    v30 = 0;
  v145 = v30;
  if ((v4 & 0x80000) == 0)
    goto LABEL_221;
LABEL_55:
  v31 = *((float *)this + 30);
  v32 = LODWORD(v31);
  if (v31 == 0.0)
    v32 = 0;
  v144 = v32;
  if ((v4 & 0x800) == 0)
    goto LABEL_222;
LABEL_58:
  v33 = *((float *)this + 22);
  v34 = LODWORD(v33);
  if (v33 == 0.0)
    v34 = 0;
  v143 = v34;
  if ((v4 & 0x4000000) == 0)
    goto LABEL_223;
LABEL_61:
  v35 = *((float *)this + 37);
  v36 = LODWORD(v35);
  if (v35 == 0.0)
    v36 = 0;
  v142 = v36;
  if ((v4 & 0x40000000000000) == 0)
    goto LABEL_224;
LABEL_64:
  v37 = *((float *)this + 65);
  v38 = LODWORD(v37);
  if (v37 == 0.0)
    v38 = 0;
  v141 = v38;
  if ((v4 & 0x20000000000000) == 0)
    goto LABEL_225;
LABEL_67:
  v39 = *((float *)this + 64);
  v40 = LODWORD(v39);
  if (v39 == 0.0)
    v40 = 0;
  v140 = v40;
  if ((v4 & 0x4000000000000000) == 0)
    goto LABEL_226;
LABEL_70:
  v41 = *((float *)this + 73);
  v42 = LODWORD(v41);
  if (v41 == 0.0)
    v42 = 0;
  v139 = v42;
  if ((v4 & 0x800000000000) == 0)
    goto LABEL_227;
LABEL_73:
  v43 = *((float *)this + 58);
  v44 = LODWORD(v43);
  if (v43 == 0.0)
    v44 = 0;
  v138 = v44;
  if ((v4 & 0x1000000000000) == 0)
    goto LABEL_228;
LABEL_76:
  v45 = *((float *)this + 59);
  v46 = LODWORD(v45);
  if (v45 == 0.0)
    v46 = 0;
  v137 = v46;
  if ((v4 & 0x1000000000000000) == 0)
    goto LABEL_229;
LABEL_79:
  v47 = *((float *)this + 71);
  v48 = LODWORD(v47);
  if (v47 == 0.0)
    v48 = 0;
  v136 = v48;
  if ((v4 & 0x10000000000000) == 0)
    goto LABEL_230;
LABEL_82:
  v49 = *((float *)this + 63);
  v50 = LODWORD(v49);
  if (v49 == 0.0)
    v50 = 0;
  v135 = v50;
  if ((v4 & 0x800000000000000) == 0)
    goto LABEL_231;
LABEL_85:
  v51 = *((float *)this + 70);
  v52 = LODWORD(v51);
  if (v51 == 0.0)
    v52 = 0;
  v134 = v52;
  if ((v4 & 0x8000000000000) == 0)
    goto LABEL_232;
LABEL_88:
  v53 = *((float *)this + 62);
  v54 = LODWORD(v53);
  if (v53 == 0.0)
    v54 = 0;
  v133 = v54;
  if ((*((_BYTE *)this + 324) & 1) == 0)
    goto LABEL_233;
LABEL_91:
  v55 = *((float *)this + 75);
  v56 = LODWORD(v55);
  if (v55 == 0.0)
    v56 = 0;
  v132 = v56;
  if ((v4 & 0x200000000000000) == 0)
    goto LABEL_234;
LABEL_94:
  v57 = *((float *)this + 68);
  v58 = LODWORD(v57);
  if (v57 == 0.0)
    v58 = 0;
  v131 = v58;
  if ((v4 & 0x4000000000000) == 0)
    goto LABEL_235;
LABEL_97:
  v59 = *((float *)this + 61);
  v60 = LODWORD(v59);
  if (v59 == 0.0)
    v60 = 0;
  v130 = v60;
  if ((v4 & 0x100000000000000) == 0)
    goto LABEL_236;
LABEL_100:
  v61 = *((float *)this + 67);
  v62 = LODWORD(v61);
  if (v61 == 0.0)
    v62 = 0;
  v129 = v62;
  if ((v4 & 0x2000000000000) == 0)
    goto LABEL_237;
LABEL_103:
  v63 = *((float *)this + 60);
  v64 = LODWORD(v63);
  if (v63 == 0.0)
    v64 = 0;
  v128 = v64;
  if ((v4 & 0x8000000000000000) == 0)
    goto LABEL_238;
LABEL_106:
  v65 = *((float *)this + 74);
  v66 = LODWORD(v65);
  if (v65 == 0.0)
    v66 = 0;
  v127 = v66;
  if ((v4 & 0x800000000) == 0)
    goto LABEL_239;
LABEL_109:
  v67 = *((float *)this + 46);
  v68 = LODWORD(v67);
  if (v67 == 0.0)
    v68 = 0;
  v126 = v68;
  if ((v4 & 0x400000000) == 0)
    goto LABEL_240;
LABEL_112:
  v69 = *((float *)this + 45);
  v70 = LODWORD(v69);
  if (v69 == 0.0)
    v70 = 0;
  v125 = v70;
  if ((v4 & 0x80000000000) == 0)
    goto LABEL_241;
LABEL_115:
  v71 = *((float *)this + 54);
  v72 = LODWORD(v71);
  if (v71 == 0.0)
    v72 = 0;
  v124 = v72;
  if ((v4 & 0x10000000) == 0)
    goto LABEL_242;
LABEL_118:
  v73 = *((float *)this + 39);
  if (v73 == 0.0)
    v74 = 0;
  else
    v74 = LODWORD(v73);
  if ((v4 & 0x20000000) == 0)
    goto LABEL_243;
LABEL_122:
  v75 = *((float *)this + 40);
  if (v75 == 0.0)
    v76 = 0;
  else
    v76 = LODWORD(v75);
  if ((v4 & 0x20000000000) == 0)
    goto LABEL_244;
LABEL_126:
  v77 = *((float *)this + 52);
  if (v77 == 0.0)
    v78 = 0;
  else
    v78 = LODWORD(v77);
  if ((v4 & 0x200000000) == 0)
    goto LABEL_245;
LABEL_130:
  v79 = *((float *)this + 44);
  if (v79 == 0.0)
    v80 = 0;
  else
    v80 = LODWORD(v79);
  if ((v4 & 0x10000000000) == 0)
    goto LABEL_246;
LABEL_134:
  v81 = *((float *)this + 51);
  if (v81 == 0.0)
    v82 = 0;
  else
    v82 = LODWORD(v81);
  if ((v4 & 0x100000000) == 0)
    goto LABEL_247;
LABEL_138:
  v83 = *((float *)this + 43);
  if (v83 == 0.0)
    v84 = 0;
  else
    v84 = LODWORD(v83);
  if ((v4 & 0x200000000000) == 0)
    goto LABEL_248;
LABEL_142:
  v85 = *((float *)this + 56);
  if (v85 == 0.0)
    v86 = 0;
  else
    v86 = LODWORD(v85);
  if ((v4 & 0x4000000000) == 0)
    goto LABEL_249;
LABEL_146:
  v87 = *((float *)this + 49);
  if (v87 == 0.0)
    v88 = 0;
  else
    v88 = LODWORD(v87);
  if ((v4 & 0x80000000) == 0)
    goto LABEL_250;
LABEL_150:
  v89 = *((float *)this + 42);
  if (v89 == 0.0)
    v90 = 0;
  else
    v90 = LODWORD(v89);
  if ((v4 & 0x2000000000) == 0)
    goto LABEL_251;
LABEL_154:
  v91 = *((float *)this + 48);
  if (v91 == 0.0)
    v92 = 0;
  else
    v92 = LODWORD(v91);
  if ((v4 & 0x40000000) == 0)
    goto LABEL_252;
LABEL_158:
  v93 = *((float *)this + 41);
  if (v93 == 0.0)
    v94 = 0;
  else
    v94 = LODWORD(v93);
  if ((v4 & 0x100000000000) == 0)
    goto LABEL_253;
LABEL_162:
  v95 = *((float *)this + 55);
  if (v95 == 0.0)
    v96 = 0;
  else
    v96 = LODWORD(v95);
  if ((v4 & 8) != 0)
  {
LABEL_166:
    v97 = *((_QWORD *)this + 4);
    if ((v4 & 0x10) != 0)
      goto LABEL_167;
    goto LABEL_255;
  }
LABEL_254:
  v97 = 0;
  if ((v4 & 0x10) != 0)
  {
LABEL_167:
    v98 = *((_QWORD *)this + 5);
    if ((v4 & 0x1000000) != 0)
      goto LABEL_168;
LABEL_256:
    v100 = 0;
    if ((v4 & 0x2000000000000000) != 0)
      goto LABEL_171;
LABEL_257:
    v102 = 0;
    if ((v4 & 0x40000000000) != 0)
      goto LABEL_174;
LABEL_258:
    v104 = 0;
    if ((v4 & 0x40000) != 0)
      goto LABEL_177;
LABEL_259:
    v106 = 0;
    if ((v4 & 0x80000000000000) != 0)
      goto LABEL_180;
LABEL_260:
    v108 = 0;
    if ((v4 & 0x1000000000) != 0)
      goto LABEL_183;
LABEL_261:
    v110 = 0;
    if ((v4 & 0x200000) != 0)
      goto LABEL_186;
LABEL_262:
    v112 = 0;
    if ((v4 & 0x400000000000000) != 0)
      goto LABEL_189;
LABEL_263:
    v114 = 0;
    if ((v4 & 0x8000000000) != 0)
      goto LABEL_192;
LABEL_264:
    v116 = 0;
    if ((v4 & 2) != 0)
      goto LABEL_195;
    goto LABEL_265;
  }
LABEL_255:
  v98 = 0;
  if ((v4 & 0x1000000) == 0)
    goto LABEL_256;
LABEL_168:
  v99 = *((float *)this + 35);
  v100 = LODWORD(v99);
  if (v99 == 0.0)
    v100 = 0;
  if ((v4 & 0x2000000000000000) == 0)
    goto LABEL_257;
LABEL_171:
  v101 = *((float *)this + 72);
  v102 = LODWORD(v101);
  if (v101 == 0.0)
    v102 = 0;
  if ((v4 & 0x40000000000) == 0)
    goto LABEL_258;
LABEL_174:
  v103 = *((float *)this + 53);
  v104 = LODWORD(v103);
  if (v103 == 0.0)
    v104 = 0;
  if ((v4 & 0x40000) == 0)
    goto LABEL_259;
LABEL_177:
  v105 = *((float *)this + 29);
  v106 = LODWORD(v105);
  if (v105 == 0.0)
    v106 = 0;
  if ((v4 & 0x80000000000000) == 0)
    goto LABEL_260;
LABEL_180:
  v107 = *((float *)this + 66);
  v108 = LODWORD(v107);
  if (v107 == 0.0)
    v108 = 0;
  if ((v4 & 0x1000000000) == 0)
    goto LABEL_261;
LABEL_183:
  v109 = *((float *)this + 47);
  v110 = LODWORD(v109);
  if (v109 == 0.0)
    v110 = 0;
  if ((v4 & 0x200000) == 0)
    goto LABEL_262;
LABEL_186:
  v111 = *((float *)this + 32);
  v112 = LODWORD(v111);
  if (v111 == 0.0)
    v112 = 0;
  if ((v4 & 0x400000000000000) == 0)
    goto LABEL_263;
LABEL_189:
  v113 = *((float *)this + 69);
  v114 = LODWORD(v113);
  if (v113 == 0.0)
    v114 = 0;
  if ((v4 & 0x8000000000) == 0)
    goto LABEL_264;
LABEL_192:
  v115 = *((float *)this + 50);
  v116 = LODWORD(v115);
  if (v115 == 0.0)
    v116 = 0;
  if ((v4 & 2) != 0)
  {
LABEL_195:
    v117 = *((_QWORD *)this + 2);
    if ((v4 & 4) != 0)
      goto LABEL_196;
    goto LABEL_266;
  }
LABEL_265:
  v117 = 0;
  if ((v4 & 4) != 0)
  {
LABEL_196:
    v118 = *((_QWORD *)this + 3);
    if ((v4 & 0x400000000000) != 0)
      goto LABEL_197;
LABEL_267:
    v120 = 0;
    return v164 ^ v1 ^ v163 ^ v162 ^ v161 ^ v160 ^ v159 ^ v158 ^ v157 ^ v156 ^ v155 ^ v154 ^ v153 ^ v152 ^ v151 ^ v150 ^ v149 ^ v148 ^ v147 ^ v146 ^ v145 ^ v144 ^ v143 ^ v142 ^ v141 ^ v140 ^ v139 ^ v138 ^ v137 ^ v136 ^ v135 ^ v134 ^ v133 ^ v132 ^ v131 ^ v130 ^ v129 ^ v128 ^ v127 ^ v126 ^ v125 ^ v124 ^ v74 ^ v76 ^ v78 ^ v80 ^ v82 ^ v84 ^ v86 ^ v88 ^ v90 ^ v92 ^ v94 ^ v96 ^ v97 ^ v98 ^ v100 ^ v102 ^ v104 ^ v106 ^ v108 ^ v110 ^ v112 ^ v114 ^ v116 ^ v117 ^ v118 ^ v120;
  }
LABEL_266:
  v118 = 0;
  if ((v4 & 0x400000000000) == 0)
    goto LABEL_267;
LABEL_197:
  v119 = *((float *)this + 57);
  v120 = LODWORD(v119);
  if (v119 == 0.0)
    v120 = 0;
  return v164 ^ v1 ^ v163 ^ v162 ^ v161 ^ v160 ^ v159 ^ v158 ^ v157 ^ v156 ^ v155 ^ v154 ^ v153 ^ v152 ^ v151 ^ v150 ^ v149 ^ v148 ^ v147 ^ v146 ^ v145 ^ v144 ^ v143 ^ v142 ^ v141 ^ v140 ^ v139 ^ v138 ^ v137 ^ v136 ^ v135 ^ v134 ^ v133 ^ v132 ^ v131 ^ v130 ^ v129 ^ v128 ^ v127 ^ v126 ^ v125 ^ v124 ^ v74 ^ v76 ^ v78 ^ v80 ^ v82 ^ v84 ^ v86 ^ v88 ^ v90 ^ v92 ^ v94 ^ v96 ^ v97 ^ v98 ^ v100 ^ v102 ^ v104 ^ v106 ^ v108 ^ v110 ^ v112 ^ v114 ^ v116 ^ v117 ^ v118 ^ v120;
}

void CMMsl::KappaQuiescenceResult::~KappaQuiescenceResult(CMMsl::KappaQuiescenceResult *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::KappaQuiescenceResult::KappaQuiescenceResult(uint64_t this, const CMMsl::KappaQuiescenceResult *a2)
{
  char v2;
  char v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;

  *(_QWORD *)this = &off_25135EB00;
  *(_DWORD *)(this + 28) = 0;
  v2 = *((_BYTE *)a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *((_DWORD *)a2 + 2);
    v3 = 1;
    *(_BYTE *)(this + 28) = 1;
    *(_DWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 28) & 8) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 5);
    v3 |= 8u;
    *(_BYTE *)(this + 28) = v3;
    *(_DWORD *)(this + 20) = v5;
    v2 = *((_BYTE *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    v6 = *((_DWORD *)a2 + 6);
    v3 |= 0x10u;
    *(_BYTE *)(this + 28) = v3;
    *(_DWORD *)(this + 24) = v6;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0)
        return this;
LABEL_12:
      v8 = *((_DWORD *)a2 + 4);
      *(_BYTE *)(this + 28) = v3 | 4;
      *(_DWORD *)(this + 16) = v8;
      return this;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 3);
  v3 |= 2u;
  *(_BYTE *)(this + 28) = v3;
  *(_DWORD *)(this + 12) = v7;
  if ((*((_BYTE *)a2 + 28) & 4) != 0)
    goto LABEL_12;
  return this;
}

uint64_t CMMsl::KappaQuiescenceResult::operator=(uint64_t a1, const CMMsl::KappaQuiescenceResult *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;

  if ((const CMMsl::KappaQuiescenceResult *)a1 != a2)
  {
    CMMsl::KappaQuiescenceResult::KappaQuiescenceResult((uint64_t)&v8, a2);
    v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v11;
    v11 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v12;
    v12 = v4;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    v9 = v5;
    v6 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v10;
    v10 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaQuiescenceResult *a2, CMMsl::KappaQuiescenceResult *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  float result;
  int v8;

  v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  v4 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  v5 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v5;
  v6 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v6;
  result = *((float *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((float *)a2 + 3) = result;
  v8 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v8;
  return result;
}

float CMMsl::KappaQuiescenceResult::KappaQuiescenceResult(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135EB00;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_25135EB00;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::KappaQuiescenceResult::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _QWORD v10[2];
  int v11;
  int v12;
  uint64_t v13;

  if (a1 != a2)
  {
    v10[0] = &off_25135EB00;
    v3 = *(_DWORD *)(a2 + 20);
    v4 = *(_DWORD *)(a2 + 16);
    v5 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 28) = 0;
    v12 = *(_DWORD *)(a1 + 20);
    v13 = *(_QWORD *)(a1 + 24);
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 20) = v3;
    *(_QWORD *)(a1 + 24) = v5;
    *(_QWORD *)(a1 + 8) = v7;
    v10[1] = v6;
    v8 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v4;
    v11 = v8;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::KappaQuiescenceResult::formatText(CMMsl::KappaQuiescenceResult *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "configThreshold1", *((float *)this + 2));
    v5 = *((_BYTE *)this + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((_BYTE *)this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "debugX", *((float *)this + 3));
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(a2, "outputA", *((float *)this + 5));
    if ((*((_BYTE *)this + 28) & 0x10) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(a2, "debugY");
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 8) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 0x10) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "outputB");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaQuiescenceResult::readFrom(CMMsl::KappaQuiescenceResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  unint64_t v38;
  char v39;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_72;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 0x186A0u:
        *((_BYTE *)this + 28) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_38;
        *((_DWORD *)this + 2) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_61;
      case 0x186A1u:
        *((_BYTE *)this + 28) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_38;
        *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_61;
      case 0x186A2u:
        *((_BYTE *)this + 28) |= 0x10u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v32 = 0;
          v33 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_66;
            }
            v34 = v20++;
            v35 = *(_BYTE *)(v21 + v34);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v35 & 0x7F) << v32;
            if ((v35 & 0x80) == 0)
              break;
            v32 += 7;
            v14 = v33++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_65:
              v2 = v34 + 1;
              goto LABEL_66;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
          goto LABEL_65;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_66;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_66:
        *((_DWORD *)this + 6) = v24;
        break;
      case 0x186A3u:
        *((_BYTE *)this + 28) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 3) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_61:
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_38:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 0x186A4u:
        *((_BYTE *)this + 28) |= 4u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v36 = 0;
          v37 = 0;
          v30 = 0;
          if (v2 <= v26)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_71;
            }
            v38 = v26++;
            v39 = *(_BYTE *)(v27 + v38);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v39 & 0x7F) << v36;
            if ((v39 & 0x80) == 0)
              break;
            v36 += 7;
            v14 = v37++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_70:
              v2 = v38 + 1;
              goto LABEL_71;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v30) = 0;
          goto LABEL_70;
        }
        v28 = 0;
        v29 = 0;
        v30 = 0;
        do
        {
          v2 = v26 + 1;
          *((_QWORD *)a2 + 1) = v26 + 1;
          v31 = *(_BYTE *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0)
            goto LABEL_71;
          v28 += 7;
          v26 = v2;
          v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_71:
        *((_DWORD *)this + 4) = v30;
        break;
      default:
        goto LABEL_19;
    }
LABEL_72:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::KappaQuiescenceResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 28);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 8));
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(this + 28) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_10:
  this = PB::Writer::write(a2, *(float *)(v3 + 12));
  if ((*(_BYTE *)(v3 + 28) & 4) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::KappaQuiescenceResult::hash_value(CMMsl::KappaQuiescenceResult *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  float v8;

  if ((*((_BYTE *)this + 28) & 1) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 28) & 8) != 0)
      goto LABEL_3;
LABEL_14:
    v3 = 0;
    if ((*((_BYTE *)this + 28) & 0x10) != 0)
      goto LABEL_6;
    goto LABEL_15;
  }
  v8 = *((float *)this + 2);
  v1 = LODWORD(v8);
  if (v8 == 0.0)
    v1 = 0;
  if ((*((_BYTE *)this + 28) & 8) == 0)
    goto LABEL_14;
LABEL_3:
  v2 = *((float *)this + 5);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 28) & 0x10) != 0)
  {
LABEL_6:
    v4 = *((int *)this + 6);
    if ((*((_BYTE *)this + 28) & 2) != 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  v4 = 0;
  if ((*((_BYTE *)this + 28) & 2) != 0)
  {
LABEL_7:
    v5 = *((float *)this + 3);
    v6 = LODWORD(v5);
    if (v5 == 0.0)
      v6 = 0;
    if ((*((_BYTE *)this + 28) & 4) != 0)
      goto LABEL_10;
LABEL_17:
    v7 = 0;
    return v3 ^ v1 ^ v4 ^ v6 ^ v7;
  }
LABEL_16:
  v6 = 0;
  if ((*((_BYTE *)this + 28) & 4) == 0)
    goto LABEL_17;
LABEL_10:
  v7 = *((int *)this + 4);
  return v3 ^ v1 ^ v4 ^ v6 ^ v7;
}

void CMMsl::KappaRecoveryResult::~KappaRecoveryResult(CMMsl::KappaRecoveryResult *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::KappaRecoveryResult::KappaRecoveryResult(uint64_t this, const CMMsl::KappaRecoveryResult *a2)
{
  char v2;
  char v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;

  *(_QWORD *)this = &off_25135EB38;
  *(_DWORD *)(this + 28) = 0;
  v2 = *((_BYTE *)a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *((_DWORD *)a2 + 2);
    v3 = 1;
    *(_BYTE *)(this + 28) = 1;
    *(_DWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 28) & 8) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 5);
    v3 |= 8u;
    *(_BYTE *)(this + 28) = v3;
    *(_DWORD *)(this + 20) = v5;
    v2 = *((_BYTE *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    v6 = *((_DWORD *)a2 + 6);
    v3 |= 0x10u;
    *(_BYTE *)(this + 28) = v3;
    *(_DWORD *)(this + 24) = v6;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0)
        return this;
LABEL_12:
      v8 = *((_DWORD *)a2 + 4);
      *(_BYTE *)(this + 28) = v3 | 4;
      *(_DWORD *)(this + 16) = v8;
      return this;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 3);
  v3 |= 2u;
  *(_BYTE *)(this + 28) = v3;
  *(_DWORD *)(this + 12) = v7;
  if ((*((_BYTE *)a2 + 28) & 4) != 0)
    goto LABEL_12;
  return this;
}

uint64_t CMMsl::KappaRecoveryResult::operator=(uint64_t a1, const CMMsl::KappaRecoveryResult *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;

  if ((const CMMsl::KappaRecoveryResult *)a1 != a2)
  {
    CMMsl::KappaRecoveryResult::KappaRecoveryResult((uint64_t)&v8, a2);
    v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v11;
    v11 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v12;
    v12 = v4;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    v9 = v5;
    v6 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v10;
    v10 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaRecoveryResult *a2, CMMsl::KappaRecoveryResult *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  float result;
  int v8;

  v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  v4 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  v5 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v5;
  v6 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v6;
  result = *((float *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((float *)a2 + 3) = result;
  v8 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v8;
  return result;
}

float CMMsl::KappaRecoveryResult::KappaRecoveryResult(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135EB38;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_25135EB38;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::KappaRecoveryResult::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _QWORD v10[2];
  int v11;
  int v12;
  uint64_t v13;

  if (a1 != a2)
  {
    v10[0] = &off_25135EB38;
    v3 = *(_DWORD *)(a2 + 20);
    v4 = *(_DWORD *)(a2 + 16);
    v5 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 28) = 0;
    v12 = *(_DWORD *)(a1 + 20);
    v13 = *(_QWORD *)(a1 + 24);
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 20) = v3;
    *(_QWORD *)(a1 + 24) = v5;
    *(_QWORD *)(a1 + 8) = v7;
    v10[1] = v6;
    v8 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v4;
    v11 = v8;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::KappaRecoveryResult::formatText(CMMsl::KappaRecoveryResult *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "configThreshold1", *((float *)this + 2));
    v5 = *((_BYTE *)this + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((_BYTE *)this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "debugX", *((float *)this + 3));
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(a2, "outputA", *((float *)this + 5));
    if ((*((_BYTE *)this + 28) & 0x10) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(a2, "debugY");
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 8) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 0x10) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "outputB");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaRecoveryResult::readFrom(CMMsl::KappaRecoveryResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  unint64_t v38;
  char v39;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_72;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 0x186A0u:
        *((_BYTE *)this + 28) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_38;
        *((_DWORD *)this + 2) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_61;
      case 0x186A1u:
        *((_BYTE *)this + 28) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_38;
        *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_61;
      case 0x186A2u:
        *((_BYTE *)this + 28) |= 0x10u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v32 = 0;
          v33 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_66;
            }
            v34 = v20++;
            v35 = *(_BYTE *)(v21 + v34);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v35 & 0x7F) << v32;
            if ((v35 & 0x80) == 0)
              break;
            v32 += 7;
            v14 = v33++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_65:
              v2 = v34 + 1;
              goto LABEL_66;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
          goto LABEL_65;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_66;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_66:
        *((_DWORD *)this + 6) = v24;
        break;
      case 0x186A3u:
        *((_BYTE *)this + 28) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 3) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_61:
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_38:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 0x186A4u:
        *((_BYTE *)this + 28) |= 4u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v36 = 0;
          v37 = 0;
          v30 = 0;
          if (v2 <= v26)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_71;
            }
            v38 = v26++;
            v39 = *(_BYTE *)(v27 + v38);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v39 & 0x7F) << v36;
            if ((v39 & 0x80) == 0)
              break;
            v36 += 7;
            v14 = v37++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_70:
              v2 = v38 + 1;
              goto LABEL_71;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v30) = 0;
          goto LABEL_70;
        }
        v28 = 0;
        v29 = 0;
        v30 = 0;
        do
        {
          v2 = v26 + 1;
          *((_QWORD *)a2 + 1) = v26 + 1;
          v31 = *(_BYTE *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0)
            goto LABEL_71;
          v28 += 7;
          v26 = v2;
          v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_71:
        *((_DWORD *)this + 4) = v30;
        break;
      default:
        goto LABEL_19;
    }
LABEL_72:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::KappaRecoveryResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 28);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 8));
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(this + 28) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_10:
  this = PB::Writer::write(a2, *(float *)(v3 + 12));
  if ((*(_BYTE *)(v3 + 28) & 4) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::KappaRecoveryResult::hash_value(CMMsl::KappaRecoveryResult *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  float v8;

  if ((*((_BYTE *)this + 28) & 1) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 28) & 8) != 0)
      goto LABEL_3;
LABEL_14:
    v3 = 0;
    if ((*((_BYTE *)this + 28) & 0x10) != 0)
      goto LABEL_6;
    goto LABEL_15;
  }
  v8 = *((float *)this + 2);
  v1 = LODWORD(v8);
  if (v8 == 0.0)
    v1 = 0;
  if ((*((_BYTE *)this + 28) & 8) == 0)
    goto LABEL_14;
LABEL_3:
  v2 = *((float *)this + 5);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 28) & 0x10) != 0)
  {
LABEL_6:
    v4 = *((int *)this + 6);
    if ((*((_BYTE *)this + 28) & 2) != 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  v4 = 0;
  if ((*((_BYTE *)this + 28) & 2) != 0)
  {
LABEL_7:
    v5 = *((float *)this + 3);
    v6 = LODWORD(v5);
    if (v5 == 0.0)
      v6 = 0;
    if ((*((_BYTE *)this + 28) & 4) != 0)
      goto LABEL_10;
LABEL_17:
    v7 = 0;
    return v3 ^ v1 ^ v4 ^ v6 ^ v7;
  }
LABEL_16:
  v6 = 0;
  if ((*((_BYTE *)this + 28) & 4) == 0)
    goto LABEL_17;
LABEL_10:
  v7 = *((int *)this + 4);
  return v3 ^ v1 ^ v4 ^ v6 ^ v7;
}

void CMMsl::KappaRemoteAudioResult::~KappaRemoteAudioResult(CMMsl::KappaRemoteAudioResult *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::KappaRemoteAudioResult::KappaRemoteAudioResult(uint64_t this, const CMMsl::KappaRemoteAudioResult *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  char v8;
  int v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  char v17;
  char v18;
  char v19;
  unint64_t v20;
  char v21;
  char v22;
  char v23;
  unint64_t v24;
  int v25;
  int v26;
  int v27;
  char v28;
  char v29;
  char v30;
  unint64_t v31;
  char v32;
  char v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  char v41;
  char v42;
  char v43;
  unint64_t v44;
  char v45;
  char v46;
  char v47;
  unint64_t v48;
  int v49;
  int v50;
  int v51;
  char v52;
  char v53;
  char v54;
  unint64_t v55;
  char v56;
  char v57;
  char v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  char v65;
  char v66;
  char v67;
  unint64_t v68;
  char v69;
  char v70;
  char v71;
  unint64_t v72;
  int v73;
  int v74;
  int v75;
  char v76;
  unint64_t v77;
  char v78;
  char v79;
  char v80;
  char v81;
  char v82;
  unint64_t v83;
  int v84;
  int v85;
  int v86;
  char v87;
  char v88;
  char v89;
  unint64_t v90;
  char v91;
  char v92;
  int v93;
  int v94;
  int v95;
  char v96;
  char v97;
  char v98;
  unint64_t v99;
  char v100;
  char v101;

  *(_QWORD *)this = &off_25135EB70;
  *(_QWORD *)(this + 204) = 0;
  *(_DWORD *)(this + 212) = 0;
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 1) != 0)
  {
    v4 = 0;
    v6 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 214) = 0;
    *(_WORD *)(this + 212) = 0;
    v3 = 1;
    *(_QWORD *)(this + 204) = 1;
    *(_QWORD *)(this + 8) = v6;
    v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
    v2 = *(_QWORD *)((char *)a2 + 204);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  v4 = 0;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    v7 = *((_DWORD *)a2 + 10);
    v3 |= 0x10uLL;
    *(_QWORD *)(this + 204) = v3;
    *(_WORD *)(this + 212) = 0;
    *(_BYTE *)(this + 214) = 0;
    *(_DWORD *)(this + 40) = v7;
    v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
    v2 = *(_QWORD *)((char *)a2 + 204);
  }
LABEL_6:
  if ((v5 & 2) != 0)
  {
    v8 = *((_BYTE *)a2 + 188);
    v4 = 2;
    *(_QWORD *)(this + 204) = v3;
    *(_BYTE *)(this + 214) = 0;
    *(_WORD *)(this + 212) = 2;
    *(_BYTE *)(this + 188) = v8;
    v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
    v2 = *(_QWORD *)((char *)a2 + 204);
    if ((v2 & 0x200000) == 0)
    {
LABEL_8:
      if ((v5 & 4) == 0)
        goto LABEL_9;
      goto LABEL_88;
    }
  }
  else if ((v2 & 0x200000) == 0)
  {
    goto LABEL_8;
  }
  v9 = *((_DWORD *)a2 + 27);
  v3 |= 0x200000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 108) = v9;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((*((_WORD *)a2 + 106) & 4) == 0)
  {
LABEL_9:
    if ((v2 & 2) == 0)
      goto LABEL_10;
    goto LABEL_89;
  }
LABEL_88:
  v10 = *((_BYTE *)a2 + 189);
  v11 = v4 >> 16;
  v4 |= 4uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_BYTE *)(this + 214) = v11;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 189) = v10;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 2) == 0)
  {
LABEL_10:
    if ((v2 & 0x400000) == 0)
      goto LABEL_11;
    goto LABEL_90;
  }
LABEL_89:
  v12 = *((_QWORD *)a2 + 2);
  v3 |= 2uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_QWORD *)(this + 16) = v12;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x400000) == 0)
  {
LABEL_11:
    if ((v2 & 0x4000) == 0)
      goto LABEL_12;
    goto LABEL_91;
  }
LABEL_90:
  v13 = *((_DWORD *)a2 + 28);
  v3 |= 0x400000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 112) = v13;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x4000) == 0)
  {
LABEL_12:
    if ((v2 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_92;
  }
LABEL_91:
  v14 = *((_DWORD *)a2 + 20);
  v3 |= 0x4000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 80) = v14;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x40) == 0)
  {
LABEL_13:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_14;
    goto LABEL_93;
  }
LABEL_92:
  v15 = *((_DWORD *)a2 + 12);
  v3 |= 0x40uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 48) = v15;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_14:
    if ((v2 & 0x400000000000000) == 0)
      goto LABEL_15;
    goto LABEL_94;
  }
LABEL_93:
  v16 = *((_DWORD *)a2 + 32);
  v3 |= 0x4000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 128) = v16;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x400000000000000) == 0)
  {
LABEL_15:
    if ((v2 & 0x400000000) == 0)
      goto LABEL_16;
    goto LABEL_95;
  }
LABEL_94:
  v17 = *((_BYTE *)a2 + 181);
  v3 |= 0x400000000000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 181) = v17;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x400) == 0)
      goto LABEL_17;
    goto LABEL_96;
  }
LABEL_95:
  v18 = *((_BYTE *)a2 + 157);
  v3 |= 0x400000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 157) = v18;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((*((_WORD *)a2 + 106) & 0x400) == 0)
  {
LABEL_17:
    if ((v2 & 0x40000000000) == 0)
      goto LABEL_18;
    goto LABEL_97;
  }
LABEL_96:
  v19 = *((_BYTE *)a2 + 197);
  v20 = v4 >> 16;
  v4 |= 0x400uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_BYTE *)(this + 214) = v20;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 197) = v19;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x40000000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x4000000000000) == 0)
      goto LABEL_19;
    goto LABEL_98;
  }
LABEL_97:
  v21 = *((_BYTE *)a2 + 165);
  v3 |= 0x40000000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 165) = v21;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x4000000000000) == 0)
  {
LABEL_19:
    if ((v5 & 8) == 0)
      goto LABEL_20;
    goto LABEL_99;
  }
LABEL_98:
  v22 = *((_BYTE *)a2 + 173);
  v3 |= 0x4000000000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 173) = v22;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((*((_WORD *)a2 + 106) & 8) == 0)
  {
LABEL_20:
    if ((v2 & 0x40000) == 0)
      goto LABEL_21;
    goto LABEL_100;
  }
LABEL_99:
  v23 = *((_BYTE *)a2 + 190);
  v24 = v4 >> 16;
  v4 |= 8uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_BYTE *)(this + 214) = v24;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 190) = v23;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x40000) == 0)
  {
LABEL_21:
    if ((v2 & 0x400) == 0)
      goto LABEL_22;
    goto LABEL_101;
  }
LABEL_100:
  v25 = *((_DWORD *)a2 + 24);
  v3 |= 0x40000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 96) = v25;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x400) == 0)
  {
LABEL_22:
    if ((v2 & 0x40000000) == 0)
      goto LABEL_23;
    goto LABEL_102;
  }
LABEL_101:
  v26 = *((_DWORD *)a2 + 16);
  v3 |= 0x400uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 64) = v26;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_23:
    if ((v2 & 0x4000000000000000) == 0)
      goto LABEL_24;
    goto LABEL_103;
  }
LABEL_102:
  v27 = *((_DWORD *)a2 + 36);
  v3 |= 0x40000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 144) = v27;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x4000000000000000) == 0)
  {
LABEL_24:
    if ((v2 & 0x4000000000) == 0)
      goto LABEL_25;
    goto LABEL_104;
  }
LABEL_103:
  v28 = *((_BYTE *)a2 + 185);
  v3 |= 0x4000000000000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 185) = v28;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x4000000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x4000) == 0)
      goto LABEL_26;
    goto LABEL_105;
  }
LABEL_104:
  v29 = *((_BYTE *)a2 + 161);
  v3 |= 0x4000000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 161) = v29;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((*((_WORD *)a2 + 106) & 0x4000) == 0)
  {
LABEL_26:
    if ((v2 & 0x400000000000) == 0)
      goto LABEL_27;
    goto LABEL_106;
  }
LABEL_105:
  v30 = *((_BYTE *)a2 + 201);
  v31 = v4 >> 16;
  v4 |= 0x4000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_BYTE *)(this + 214) = v31;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 201) = v30;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x400000000000) == 0)
  {
LABEL_27:
    if ((v2 & 0x40000000000000) == 0)
      goto LABEL_28;
    goto LABEL_107;
  }
LABEL_106:
  v32 = *((_BYTE *)a2 + 169);
  v3 |= 0x400000000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 169) = v32;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x40000000000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x40) == 0)
      goto LABEL_29;
    goto LABEL_108;
  }
LABEL_107:
  v33 = *((_BYTE *)a2 + 177);
  v3 |= 0x40000000000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 177) = v33;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((*((_WORD *)a2 + 106) & 0x40) == 0)
  {
LABEL_29:
    if ((v2 & 4) == 0)
      goto LABEL_30;
    goto LABEL_109;
  }
LABEL_108:
  v34 = *((_BYTE *)a2 + 193);
  v35 = v4 >> 16;
  v4 |= 0x40uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_BYTE *)(this + 214) = v35;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 193) = v34;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 4) == 0)
  {
LABEL_30:
    if ((v2 & 0x800000) == 0)
      goto LABEL_31;
    goto LABEL_110;
  }
LABEL_109:
  v36 = *((_QWORD *)a2 + 3);
  v3 |= 4uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_QWORD *)(this + 24) = v36;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x800000) == 0)
  {
LABEL_31:
    if ((v2 & 0x8000) == 0)
      goto LABEL_32;
    goto LABEL_111;
  }
LABEL_110:
  v37 = *((_DWORD *)a2 + 29);
  v3 |= 0x800000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 116) = v37;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x8000) == 0)
  {
LABEL_32:
    if ((v2 & 0x80) == 0)
      goto LABEL_33;
    goto LABEL_112;
  }
LABEL_111:
  v38 = *((_DWORD *)a2 + 21);
  v3 |= 0x8000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 84) = v38;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x80) == 0)
  {
LABEL_33:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_34;
    goto LABEL_113;
  }
LABEL_112:
  v39 = *((_DWORD *)a2 + 13);
  v3 |= 0x80uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 52) = v39;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_34:
    if ((v2 & 0x800000000000000) == 0)
      goto LABEL_35;
    goto LABEL_114;
  }
LABEL_113:
  v40 = *((_DWORD *)a2 + 33);
  v3 |= 0x8000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 132) = v40;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x800000000000000) == 0)
  {
LABEL_35:
    if ((v2 & 0x800000000) == 0)
      goto LABEL_36;
    goto LABEL_115;
  }
LABEL_114:
  v41 = *((_BYTE *)a2 + 182);
  v3 |= 0x800000000000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 182) = v41;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x800000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x800) == 0)
      goto LABEL_37;
    goto LABEL_116;
  }
LABEL_115:
  v42 = *((_BYTE *)a2 + 158);
  v3 |= 0x800000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 158) = v42;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((*((_WORD *)a2 + 106) & 0x800) == 0)
  {
LABEL_37:
    if ((v2 & 0x80000000000) == 0)
      goto LABEL_38;
    goto LABEL_117;
  }
LABEL_116:
  v43 = *((_BYTE *)a2 + 198);
  v44 = v4 >> 16;
  v4 |= 0x800uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_BYTE *)(this + 214) = v44;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 198) = v43;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x80000000000) == 0)
  {
LABEL_38:
    if ((v2 & 0x8000000000000) == 0)
      goto LABEL_39;
    goto LABEL_118;
  }
LABEL_117:
  v45 = *((_BYTE *)a2 + 166);
  v3 |= 0x80000000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 166) = v45;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x8000000000000) == 0)
  {
LABEL_39:
    if ((v5 & 0x10) == 0)
      goto LABEL_40;
    goto LABEL_119;
  }
LABEL_118:
  v46 = *((_BYTE *)a2 + 174);
  v3 |= 0x8000000000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 174) = v46;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((*((_WORD *)a2 + 106) & 0x10) == 0)
  {
LABEL_40:
    if ((v2 & 0x80000) == 0)
      goto LABEL_41;
    goto LABEL_120;
  }
LABEL_119:
  v47 = *((_BYTE *)a2 + 191);
  v48 = v4 >> 16;
  v4 |= 0x10uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_BYTE *)(this + 214) = v48;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 191) = v47;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x80000) == 0)
  {
LABEL_41:
    if ((v2 & 0x800) == 0)
      goto LABEL_42;
    goto LABEL_121;
  }
LABEL_120:
  v49 = *((_DWORD *)a2 + 25);
  v3 |= 0x80000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 100) = v49;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x800) == 0)
  {
LABEL_42:
    if ((v2 & 0x80000000) == 0)
      goto LABEL_43;
    goto LABEL_122;
  }
LABEL_121:
  v50 = *((_DWORD *)a2 + 17);
  v3 |= 0x800uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 68) = v50;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_43:
    if ((v2 & 0x8000000000000000) == 0)
      goto LABEL_44;
    goto LABEL_123;
  }
LABEL_122:
  v51 = *((_DWORD *)a2 + 37);
  v3 |= 0x80000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 148) = v51;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x8000000000000000) == 0)
  {
LABEL_44:
    if ((v2 & 0x8000000000) == 0)
      goto LABEL_45;
    goto LABEL_124;
  }
LABEL_123:
  v52 = *((_BYTE *)a2 + 186);
  v3 |= 0x8000000000000000;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 186) = v52;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x8000000000) == 0)
  {
LABEL_45:
    if ((v5 & 0x8000) == 0)
      goto LABEL_46;
    goto LABEL_125;
  }
LABEL_124:
  v53 = *((_BYTE *)a2 + 162);
  v3 |= 0x8000000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 162) = v53;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((*((_WORD *)a2 + 106) & 0x8000) == 0)
  {
LABEL_46:
    if ((v2 & 0x800000000000) == 0)
      goto LABEL_47;
    goto LABEL_126;
  }
LABEL_125:
  v54 = *((_BYTE *)a2 + 202);
  v55 = v4 >> 16;
  v4 |= 0x8000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_BYTE *)(this + 214) = v55;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 202) = v54;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x800000000000) == 0)
  {
LABEL_47:
    if ((v2 & 0x80000000000000) == 0)
      goto LABEL_48;
    goto LABEL_127;
  }
LABEL_126:
  v56 = *((_BYTE *)a2 + 170);
  v3 |= 0x800000000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 170) = v56;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x80000000000000) == 0)
  {
LABEL_48:
    if ((v5 & 0x80) == 0)
      goto LABEL_49;
    goto LABEL_128;
  }
LABEL_127:
  v57 = *((_BYTE *)a2 + 178);
  v3 |= 0x80000000000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 178) = v57;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((*((_WORD *)a2 + 106) & 0x80) == 0)
  {
LABEL_49:
    if ((v2 & 8) == 0)
      goto LABEL_50;
    goto LABEL_129;
  }
LABEL_128:
  v58 = *((_BYTE *)a2 + 194);
  v59 = v4 >> 16;
  v4 |= 0x80uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_BYTE *)(this + 214) = v59;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 194) = v58;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 8) == 0)
  {
LABEL_50:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_51;
    goto LABEL_130;
  }
LABEL_129:
  v60 = *((_QWORD *)a2 + 4);
  v3 |= 8uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_QWORD *)(this + 32) = v60;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_51:
    if ((v2 & 0x10000) == 0)
      goto LABEL_52;
    goto LABEL_131;
  }
LABEL_130:
  v61 = *((_DWORD *)a2 + 30);
  v3 |= 0x1000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 120) = v61;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x10000) == 0)
  {
LABEL_52:
    if ((v2 & 0x100) == 0)
      goto LABEL_53;
    goto LABEL_132;
  }
LABEL_131:
  v62 = *((_DWORD *)a2 + 22);
  v3 |= 0x10000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 88) = v62;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x100) == 0)
  {
LABEL_53:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_54;
    goto LABEL_133;
  }
LABEL_132:
  v63 = *((_DWORD *)a2 + 14);
  v3 |= 0x100uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 56) = v63;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_54:
    if ((v2 & 0x1000000000000000) == 0)
      goto LABEL_55;
    goto LABEL_134;
  }
LABEL_133:
  v64 = *((_DWORD *)a2 + 34);
  v3 |= 0x10000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 136) = v64;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x1000000000000000) == 0)
  {
LABEL_55:
    if ((v2 & 0x1000000000) == 0)
      goto LABEL_56;
    goto LABEL_135;
  }
LABEL_134:
  v65 = *((_BYTE *)a2 + 183);
  v3 |= 0x1000000000000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 183) = v65;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x1000000000) == 0)
  {
LABEL_56:
    if ((v5 & 0x1000) == 0)
      goto LABEL_57;
    goto LABEL_136;
  }
LABEL_135:
  v66 = *((_BYTE *)a2 + 159);
  v3 |= 0x1000000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 159) = v66;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((*((_WORD *)a2 + 106) & 0x1000) == 0)
  {
LABEL_57:
    if ((v2 & 0x100000000000) == 0)
      goto LABEL_58;
    goto LABEL_137;
  }
LABEL_136:
  v67 = *((_BYTE *)a2 + 199);
  v68 = v4 >> 16;
  v4 |= 0x1000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_BYTE *)(this + 214) = v68;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 199) = v67;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x100000000000) == 0)
  {
LABEL_58:
    if ((v2 & 0x10000000000000) == 0)
      goto LABEL_59;
    goto LABEL_138;
  }
LABEL_137:
  v69 = *((_BYTE *)a2 + 167);
  v3 |= 0x100000000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 167) = v69;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x10000000000000) == 0)
  {
LABEL_59:
    if ((v5 & 0x20) == 0)
      goto LABEL_60;
    goto LABEL_139;
  }
LABEL_138:
  v70 = *((_BYTE *)a2 + 175);
  v3 |= 0x10000000000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 175) = v70;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((*((_WORD *)a2 + 106) & 0x20) == 0)
  {
LABEL_60:
    if ((v2 & 0x100000) == 0)
      goto LABEL_61;
    goto LABEL_140;
  }
LABEL_139:
  v71 = *((_BYTE *)a2 + 192);
  v72 = v4 >> 16;
  v4 |= 0x20uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_BYTE *)(this + 214) = v72;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 192) = v71;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x100000) == 0)
  {
LABEL_61:
    if ((v2 & 0x1000) == 0)
      goto LABEL_62;
    goto LABEL_141;
  }
LABEL_140:
  v73 = *((_DWORD *)a2 + 26);
  v3 |= 0x100000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 104) = v73;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x1000) == 0)
  {
LABEL_62:
    if ((v2 & 0x100000000) == 0)
      goto LABEL_63;
    goto LABEL_142;
  }
LABEL_141:
  v74 = *((_DWORD *)a2 + 18);
  v3 |= 0x1000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 72) = v74;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x100000000) == 0)
  {
LABEL_63:
    if ((v5 & 1) == 0)
      goto LABEL_64;
    goto LABEL_143;
  }
LABEL_142:
  v75 = *((_DWORD *)a2 + 38);
  v3 |= 0x100000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 152) = v75;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((*((_WORD *)a2 + 106) & 1) == 0)
  {
LABEL_64:
    if ((v2 & 0x10000000000) == 0)
      goto LABEL_65;
    goto LABEL_144;
  }
LABEL_143:
  v76 = *((_BYTE *)a2 + 187);
  v77 = v4 >> 16;
  v4 |= 1uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_BYTE *)(this + 214) = v77;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 187) = v76;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x10000000000) == 0)
  {
LABEL_65:
    if ((v5 & 0x10000) == 0)
      goto LABEL_66;
    goto LABEL_145;
  }
LABEL_144:
  v78 = *((_BYTE *)a2 + 163);
  v3 |= 0x10000000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 163) = v78;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v5 & 0x10000) == 0)
  {
LABEL_66:
    if ((v2 & 0x1000000000000) == 0)
      goto LABEL_67;
    goto LABEL_146;
  }
LABEL_145:
  v79 = *((_BYTE *)a2 + 203);
  *(_WORD *)(this + 212) = v4;
  v4 |= 0x10000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 203) = v79;
  LOWORD(v5) = *((_WORD *)a2 + 106);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x1000000000000) == 0)
  {
LABEL_67:
    if ((v2 & 0x100000000000000) == 0)
      goto LABEL_68;
    goto LABEL_147;
  }
LABEL_146:
  v80 = *((_BYTE *)a2 + 171);
  v3 |= 0x1000000000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 171) = v80;
  LOWORD(v5) = *((_WORD *)a2 + 106);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x100000000000000) == 0)
  {
LABEL_68:
    if ((v5 & 0x100) == 0)
      goto LABEL_69;
    goto LABEL_148;
  }
LABEL_147:
  v81 = *((_BYTE *)a2 + 179);
  v3 |= 0x100000000000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 179) = v81;
  LOWORD(v5) = *((_WORD *)a2 + 106);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v5 & 0x100) == 0)
  {
LABEL_69:
    if ((v2 & 0x2000) == 0)
      goto LABEL_70;
    goto LABEL_149;
  }
LABEL_148:
  v82 = *((_BYTE *)a2 + 195);
  v83 = v4 >> 16;
  v4 |= 0x100uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_BYTE *)(this + 214) = v83;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 195) = v82;
  LOWORD(v5) = *((_WORD *)a2 + 106);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x2000) == 0)
  {
LABEL_70:
    if ((v2 & 0x20) == 0)
      goto LABEL_71;
    goto LABEL_150;
  }
LABEL_149:
  v84 = *((_DWORD *)a2 + 19);
  v3 |= 0x2000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 76) = v84;
  LOWORD(v5) = *((_WORD *)a2 + 106);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x20) == 0)
  {
LABEL_71:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_72;
    goto LABEL_151;
  }
LABEL_150:
  v85 = *((_DWORD *)a2 + 11);
  v3 |= 0x20uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 44) = v85;
  LOWORD(v5) = *((_WORD *)a2 + 106);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_72:
    if ((v2 & 0x200000000000000) == 0)
      goto LABEL_73;
    goto LABEL_152;
  }
LABEL_151:
  v86 = *((_DWORD *)a2 + 31);
  v3 |= 0x2000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 124) = v86;
  LOWORD(v5) = *((_WORD *)a2 + 106);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x200000000000000) == 0)
  {
LABEL_73:
    if ((v2 & 0x200000000) == 0)
      goto LABEL_74;
    goto LABEL_153;
  }
LABEL_152:
  v87 = *((_BYTE *)a2 + 180);
  v3 |= 0x200000000000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 180) = v87;
  LOWORD(v5) = *((_WORD *)a2 + 106);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_74:
    if ((v5 & 0x200) == 0)
      goto LABEL_75;
    goto LABEL_154;
  }
LABEL_153:
  v88 = *((_BYTE *)a2 + 156);
  v3 |= 0x200000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 156) = v88;
  LOWORD(v5) = *((_WORD *)a2 + 106);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v5 & 0x200) == 0)
  {
LABEL_75:
    if ((v2 & 0x20000000000) == 0)
      goto LABEL_76;
    goto LABEL_155;
  }
LABEL_154:
  v89 = *((_BYTE *)a2 + 196);
  v90 = v4 >> 16;
  v4 |= 0x200uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_BYTE *)(this + 214) = v90;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 196) = v89;
  LOWORD(v5) = *((_WORD *)a2 + 106);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x20000000000) == 0)
  {
LABEL_76:
    if ((v2 & 0x2000000000000) == 0)
      goto LABEL_77;
    goto LABEL_156;
  }
LABEL_155:
  v91 = *((_BYTE *)a2 + 164);
  v3 |= 0x20000000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 164) = v91;
  LOWORD(v5) = *((_WORD *)a2 + 106);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x2000000000000) == 0)
  {
LABEL_77:
    if ((v2 & 0x20000) == 0)
      goto LABEL_78;
    goto LABEL_157;
  }
LABEL_156:
  v92 = *((_BYTE *)a2 + 172);
  v3 |= 0x2000000000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 172) = v92;
  LOWORD(v5) = *((_WORD *)a2 + 106);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x20000) == 0)
  {
LABEL_78:
    if ((v2 & 0x200) == 0)
      goto LABEL_79;
    goto LABEL_158;
  }
LABEL_157:
  v93 = *((_DWORD *)a2 + 23);
  v3 |= 0x20000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 92) = v93;
  LOWORD(v5) = *((_WORD *)a2 + 106);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x200) == 0)
  {
LABEL_79:
    if ((v2 & 0x20000000) == 0)
      goto LABEL_80;
    goto LABEL_159;
  }
LABEL_158:
  v94 = *((_DWORD *)a2 + 15);
  v3 |= 0x200uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 60) = v94;
  LOWORD(v5) = *((_WORD *)a2 + 106);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_80:
    if ((v2 & 0x2000000000000000) == 0)
      goto LABEL_81;
    goto LABEL_160;
  }
LABEL_159:
  v95 = *((_DWORD *)a2 + 35);
  v3 |= 0x20000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 140) = v95;
  LOWORD(v5) = *((_WORD *)a2 + 106);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x2000000000000000) == 0)
  {
LABEL_81:
    if ((v2 & 0x2000000000) == 0)
      goto LABEL_82;
    goto LABEL_161;
  }
LABEL_160:
  v96 = *((_BYTE *)a2 + 184);
  v3 |= 0x2000000000000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 184) = v96;
  LOWORD(v5) = *((_WORD *)a2 + 106);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x2000000000) == 0)
  {
LABEL_82:
    if ((v5 & 0x2000) == 0)
      goto LABEL_83;
    goto LABEL_162;
  }
LABEL_161:
  v97 = *((_BYTE *)a2 + 160);
  v3 |= 0x2000000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 160) = v97;
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((*((_WORD *)a2 + 106) & 0x2000) == 0)
  {
LABEL_83:
    if ((v2 & 0x200000000000) == 0)
      goto LABEL_84;
    goto LABEL_163;
  }
LABEL_162:
  v98 = *((_BYTE *)a2 + 200);
  v99 = v4 >> 16;
  LODWORD(v4) = v4 | 0x2000;
  *(_QWORD *)(this + 204) = v3;
  *(_BYTE *)(this + 214) = v99;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 200) = v98;
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x200000000000) == 0)
  {
LABEL_84:
    if ((v2 & 0x20000000000000) == 0)
      return this;
LABEL_164:
    v101 = *((_BYTE *)a2 + 176);
    *(_QWORD *)(this + 204) = v3 | 0x20000000000000;
    *(_WORD *)(this + 212) = v4;
    *(_BYTE *)(this + 214) = BYTE2(v4);
    *(_BYTE *)(this + 176) = v101;
    return this;
  }
LABEL_163:
  v100 = *((_BYTE *)a2 + 168);
  v3 |= 0x200000000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 168) = v100;
  if ((*(_QWORD *)((_BYTE *)a2 + 204) & 0x20000000000000) != 0)
    goto LABEL_164;
  return this;
}

CMMsl *CMMsl::KappaRemoteAudioResult::operator=(CMMsl *a1, const CMMsl::KappaRemoteAudioResult *a2)
{
  CMMsl::KappaRemoteAudioResult *v3;
  _QWORD v5[28];

  v5[27] = *MEMORY[0x24BDAC8D0];
  if (a1 != a2)
  {
    CMMsl::KappaRemoteAudioResult::KappaRemoteAudioResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaRemoteAudioResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaRemoteAudioResult *a2, CMMsl::KappaRemoteAudioResult *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  float result;

  v3 = *((_DWORD *)this + 53);
  v4 = *(_QWORD *)((char *)this + 204);
  v5 = *((_DWORD *)a2 + 53);
  *(_QWORD *)((char *)this + 204) = *(_QWORD *)((char *)a2 + 204);
  *((_DWORD *)this + 53) = v5;
  *(_QWORD *)((char *)a2 + 204) = v4;
  *((_DWORD *)a2 + 53) = v3;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  LODWORD(v6) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 188);
  *((_BYTE *)this + 188) = *((_BYTE *)a2 + 188);
  *((_BYTE *)a2 + 188) = v6;
  v7 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v7;
  LOBYTE(v6) = *((_BYTE *)this + 189);
  *((_BYTE *)this + 189) = *((_BYTE *)a2 + 189);
  *((_BYTE *)a2 + 189) = v6;
  v8 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v8;
  v9 = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v9;
  v10 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v10;
  v11 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v11;
  v12 = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v12;
  LOBYTE(v8) = *((_BYTE *)this + 181);
  *((_BYTE *)this + 181) = *((_BYTE *)a2 + 181);
  *((_BYTE *)a2 + 181) = v8;
  LOBYTE(v8) = *((_BYTE *)this + 157);
  *((_BYTE *)this + 157) = *((_BYTE *)a2 + 157);
  *((_BYTE *)a2 + 157) = v8;
  LOBYTE(v8) = *((_BYTE *)this + 197);
  *((_BYTE *)this + 197) = *((_BYTE *)a2 + 197);
  *((_BYTE *)a2 + 197) = v8;
  LOBYTE(v8) = *((_BYTE *)this + 165);
  *((_BYTE *)this + 165) = *((_BYTE *)a2 + 165);
  *((_BYTE *)a2 + 165) = v8;
  LOBYTE(v8) = *((_BYTE *)this + 173);
  *((_BYTE *)this + 173) = *((_BYTE *)a2 + 173);
  *((_BYTE *)a2 + 173) = v8;
  LOBYTE(v8) = *((_BYTE *)this + 190);
  *((_BYTE *)this + 190) = *((_BYTE *)a2 + 190);
  *((_BYTE *)a2 + 190) = v8;
  v13 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v13;
  v14 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v14;
  v15 = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v15;
  LOBYTE(v8) = *((_BYTE *)this + 185);
  *((_BYTE *)this + 185) = *((_BYTE *)a2 + 185);
  *((_BYTE *)a2 + 185) = v8;
  LOBYTE(v8) = *((_BYTE *)this + 161);
  *((_BYTE *)this + 161) = *((_BYTE *)a2 + 161);
  *((_BYTE *)a2 + 161) = v8;
  LOBYTE(v8) = *((_BYTE *)this + 201);
  *((_BYTE *)this + 201) = *((_BYTE *)a2 + 201);
  *((_BYTE *)a2 + 201) = v8;
  LOBYTE(v8) = *((_BYTE *)this + 169);
  *((_BYTE *)this + 169) = *((_BYTE *)a2 + 169);
  *((_BYTE *)a2 + 169) = v8;
  LOBYTE(v8) = *((_BYTE *)this + 177);
  *((_BYTE *)this + 177) = *((_BYTE *)a2 + 177);
  *((_BYTE *)a2 + 177) = v8;
  LOBYTE(v8) = *((_BYTE *)this + 193);
  *((_BYTE *)this + 193) = *((_BYTE *)a2 + 193);
  *((_BYTE *)a2 + 193) = v8;
  v16 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v16;
  v17 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v17;
  v18 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v18;
  v19 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v19;
  v20 = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v20;
  LOBYTE(v16) = *((_BYTE *)this + 182);
  *((_BYTE *)this + 182) = *((_BYTE *)a2 + 182);
  *((_BYTE *)a2 + 182) = v16;
  LOBYTE(v16) = *((_BYTE *)this + 158);
  *((_BYTE *)this + 158) = *((_BYTE *)a2 + 158);
  *((_BYTE *)a2 + 158) = v16;
  LOBYTE(v16) = *((_BYTE *)this + 198);
  *((_BYTE *)this + 198) = *((_BYTE *)a2 + 198);
  *((_BYTE *)a2 + 198) = v16;
  LOBYTE(v16) = *((_BYTE *)this + 166);
  *((_BYTE *)this + 166) = *((_BYTE *)a2 + 166);
  *((_BYTE *)a2 + 166) = v16;
  LOBYTE(v16) = *((_BYTE *)this + 174);
  *((_BYTE *)this + 174) = *((_BYTE *)a2 + 174);
  *((_BYTE *)a2 + 174) = v16;
  LOBYTE(v16) = *((_BYTE *)this + 191);
  *((_BYTE *)this + 191) = *((_BYTE *)a2 + 191);
  *((_BYTE *)a2 + 191) = v16;
  v21 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v21;
  v22 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v22;
  v23 = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v23;
  LOBYTE(v16) = *((_BYTE *)this + 186);
  *((_BYTE *)this + 186) = *((_BYTE *)a2 + 186);
  *((_BYTE *)a2 + 186) = v16;
  LOBYTE(v16) = *((_BYTE *)this + 162);
  *((_BYTE *)this + 162) = *((_BYTE *)a2 + 162);
  *((_BYTE *)a2 + 162) = v16;
  LOBYTE(v16) = *((_BYTE *)this + 202);
  *((_BYTE *)this + 202) = *((_BYTE *)a2 + 202);
  *((_BYTE *)a2 + 202) = v16;
  LOBYTE(v16) = *((_BYTE *)this + 170);
  *((_BYTE *)this + 170) = *((_BYTE *)a2 + 170);
  *((_BYTE *)a2 + 170) = v16;
  LOBYTE(v16) = *((_BYTE *)this + 178);
  *((_BYTE *)this + 178) = *((_BYTE *)a2 + 178);
  *((_BYTE *)a2 + 178) = v16;
  LOBYTE(v16) = *((_BYTE *)this + 194);
  *((_BYTE *)this + 194) = *((_BYTE *)a2 + 194);
  *((_BYTE *)a2 + 194) = v16;
  v24 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v24;
  v25 = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v25;
  v26 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v26;
  v27 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v27;
  v28 = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v28;
  LOBYTE(v24) = *((_BYTE *)this + 183);
  *((_BYTE *)this + 183) = *((_BYTE *)a2 + 183);
  *((_BYTE *)a2 + 183) = v24;
  LOBYTE(v24) = *((_BYTE *)this + 159);
  *((_BYTE *)this + 159) = *((_BYTE *)a2 + 159);
  *((_BYTE *)a2 + 159) = v24;
  LOBYTE(v24) = *((_BYTE *)this + 199);
  *((_BYTE *)this + 199) = *((_BYTE *)a2 + 199);
  *((_BYTE *)a2 + 199) = v24;
  LOBYTE(v24) = *((_BYTE *)this + 167);
  *((_BYTE *)this + 167) = *((_BYTE *)a2 + 167);
  *((_BYTE *)a2 + 167) = v24;
  LOBYTE(v24) = *((_BYTE *)this + 175);
  *((_BYTE *)this + 175) = *((_BYTE *)a2 + 175);
  *((_BYTE *)a2 + 175) = v24;
  LOBYTE(v24) = *((_BYTE *)this + 192);
  *((_BYTE *)this + 192) = *((_BYTE *)a2 + 192);
  *((_BYTE *)a2 + 192) = v24;
  v29 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v29;
  v30 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v30;
  v31 = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v31;
  LOBYTE(v24) = *((_BYTE *)this + 187);
  *((_BYTE *)this + 187) = *((_BYTE *)a2 + 187);
  *((_BYTE *)a2 + 187) = v24;
  LOBYTE(v24) = *((_BYTE *)this + 163);
  *((_BYTE *)this + 163) = *((_BYTE *)a2 + 163);
  *((_BYTE *)a2 + 163) = v24;
  LOBYTE(v24) = *((_BYTE *)this + 203);
  *((_BYTE *)this + 203) = *((_BYTE *)a2 + 203);
  *((_BYTE *)a2 + 203) = v24;
  LOBYTE(v24) = *((_BYTE *)this + 171);
  *((_BYTE *)this + 171) = *((_BYTE *)a2 + 171);
  *((_BYTE *)a2 + 171) = v24;
  LOBYTE(v24) = *((_BYTE *)this + 179);
  *((_BYTE *)this + 179) = *((_BYTE *)a2 + 179);
  *((_BYTE *)a2 + 179) = v24;
  LOBYTE(v24) = *((_BYTE *)this + 195);
  *((_BYTE *)this + 195) = *((_BYTE *)a2 + 195);
  *((_BYTE *)a2 + 195) = v24;
  v32 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v32;
  v33 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v33;
  v34 = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v34;
  LOBYTE(v24) = *((_BYTE *)this + 180);
  *((_BYTE *)this + 180) = *((_BYTE *)a2 + 180);
  *((_BYTE *)a2 + 180) = v24;
  LOBYTE(v24) = *((_BYTE *)this + 156);
  *((_BYTE *)this + 156) = *((_BYTE *)a2 + 156);
  *((_BYTE *)a2 + 156) = v24;
  LOBYTE(v24) = *((_BYTE *)this + 196);
  *((_BYTE *)this + 196) = *((_BYTE *)a2 + 196);
  *((_BYTE *)a2 + 196) = v24;
  LOBYTE(v24) = *((_BYTE *)this + 164);
  *((_BYTE *)this + 164) = *((_BYTE *)a2 + 164);
  *((_BYTE *)a2 + 164) = v24;
  LOBYTE(v24) = *((_BYTE *)this + 172);
  *((_BYTE *)this + 172) = *((_BYTE *)a2 + 172);
  *((_BYTE *)a2 + 172) = v24;
  v35 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v35;
  v36 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v36;
  result = *((float *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((float *)a2 + 35) = result;
  LOBYTE(v24) = *((_BYTE *)this + 184);
  *((_BYTE *)this + 184) = *((_BYTE *)a2 + 184);
  *((_BYTE *)a2 + 184) = v24;
  LOBYTE(v24) = *((_BYTE *)this + 160);
  *((_BYTE *)this + 160) = *((_BYTE *)a2 + 160);
  *((_BYTE *)a2 + 160) = v24;
  LOBYTE(v24) = *((_BYTE *)this + 200);
  *((_BYTE *)this + 200) = *((_BYTE *)a2 + 200);
  *((_BYTE *)a2 + 200) = v24;
  LOBYTE(v24) = *((_BYTE *)this + 168);
  *((_BYTE *)this + 168) = *((_BYTE *)a2 + 168);
  *((_BYTE *)a2 + 168) = v24;
  LOBYTE(v24) = *((_BYTE *)this + 176);
  *((_BYTE *)this + 176) = *((_BYTE *)a2 + 176);
  *((_BYTE *)a2 + 176) = v24;
  return result;
}

float CMMsl::KappaRemoteAudioResult::KappaRemoteAudioResult(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float result;

  *(_QWORD *)a1 = &off_25135EB70;
  v2 = *(_QWORD *)(a2 + 204);
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
  *(_QWORD *)(a1 + 204) = v2;
  *(_DWORD *)(a2 + 212) = 0;
  *(_QWORD *)(a2 + 204) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 188) = *(_BYTE *)(a2 + 188);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_BYTE *)(a1 + 189) = *(_BYTE *)(a2 + 189);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 181) = *(_BYTE *)(a2 + 181);
  *(_BYTE *)(a1 + 157) = *(_BYTE *)(a2 + 157);
  *(_BYTE *)(a1 + 197) = *(_BYTE *)(a2 + 197);
  *(_BYTE *)(a1 + 165) = *(_BYTE *)(a2 + 165);
  *(_BYTE *)(a1 + 173) = *(_BYTE *)(a2 + 173);
  *(_BYTE *)(a1 + 190) = *(_BYTE *)(a2 + 190);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 185) = *(_BYTE *)(a2 + 185);
  *(_BYTE *)(a1 + 161) = *(_BYTE *)(a2 + 161);
  *(_BYTE *)(a1 + 201) = *(_BYTE *)(a2 + 201);
  *(_BYTE *)(a1 + 169) = *(_BYTE *)(a2 + 169);
  *(_BYTE *)(a1 + 177) = *(_BYTE *)(a2 + 177);
  *(_BYTE *)(a1 + 193) = *(_BYTE *)(a2 + 193);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_BYTE *)(a1 + 182) = *(_BYTE *)(a2 + 182);
  *(_BYTE *)(a1 + 158) = *(_BYTE *)(a2 + 158);
  *(_BYTE *)(a1 + 198) = *(_BYTE *)(a2 + 198);
  *(_BYTE *)(a1 + 166) = *(_BYTE *)(a2 + 166);
  *(_BYTE *)(a1 + 174) = *(_BYTE *)(a2 + 174);
  *(_BYTE *)(a1 + 191) = *(_BYTE *)(a2 + 191);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_BYTE *)(a1 + 186) = *(_BYTE *)(a2 + 186);
  *(_BYTE *)(a1 + 162) = *(_BYTE *)(a2 + 162);
  *(_BYTE *)(a1 + 202) = *(_BYTE *)(a2 + 202);
  *(_BYTE *)(a1 + 170) = *(_BYTE *)(a2 + 170);
  *(_BYTE *)(a1 + 178) = *(_BYTE *)(a2 + 178);
  *(_BYTE *)(a1 + 194) = *(_BYTE *)(a2 + 194);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 183) = *(_BYTE *)(a2 + 183);
  *(_BYTE *)(a1 + 159) = *(_BYTE *)(a2 + 159);
  *(_BYTE *)(a1 + 199) = *(_BYTE *)(a2 + 199);
  *(_BYTE *)(a1 + 167) = *(_BYTE *)(a2 + 167);
  *(_BYTE *)(a1 + 175) = *(_BYTE *)(a2 + 175);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 187) = *(_BYTE *)(a2 + 187);
  *(_BYTE *)(a1 + 163) = *(_BYTE *)(a2 + 163);
  *(_BYTE *)(a1 + 203) = *(_BYTE *)(a2 + 203);
  *(_BYTE *)(a1 + 171) = *(_BYTE *)(a2 + 171);
  *(_BYTE *)(a1 + 179) = *(_BYTE *)(a2 + 179);
  *(_BYTE *)(a1 + 195) = *(_BYTE *)(a2 + 195);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_BYTE *)(a1 + 180) = *(_BYTE *)(a2 + 180);
  *(_BYTE *)(a1 + 156) = *(_BYTE *)(a2 + 156);
  *(_BYTE *)(a1 + 196) = *(_BYTE *)(a2 + 196);
  *(_BYTE *)(a1 + 164) = *(_BYTE *)(a2 + 164);
  *(_BYTE *)(a1 + 172) = *(_BYTE *)(a2 + 172);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  result = *(float *)(a2 + 140);
  *(float *)(a1 + 140) = result;
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  return result;
}

CMMsl *CMMsl::KappaRemoteAudioResult::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::KappaRemoteAudioResult *v3;
  _QWORD v5[28];

  v5[27] = *MEMORY[0x24BDAC8D0];
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaRemoteAudioResult::KappaRemoteAudioResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaRemoteAudioResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaRemoteAudioResult::formatText(CMMsl::KappaRemoteAudioResult *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  int v6;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x200000000) != 0)
  {
    PB::TextFormatter::format(a2, "chaosMet");
    v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
    v5 = *(_QWORD *)((char *)this + 204);
    if ((v5 & 0x400000000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  if ((v5 & 0x400000000) != 0)
  {
LABEL_5:
    PB::TextFormatter::format(a2, "chaosMet0");
    v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
    v5 = *(_QWORD *)((char *)this + 204);
  }
LABEL_6:
  if ((v5 & 0x800000000) != 0)
  {
    PB::TextFormatter::format(a2, "chaosMet1");
    v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
    v5 = *(_QWORD *)((char *)this + 204);
    if ((v5 & 0x1000000000) == 0)
    {
LABEL_8:
      if ((v5 & 0x2000000000) == 0)
        goto LABEL_9;
      goto LABEL_89;
    }
  }
  else if ((v5 & 0x1000000000) == 0)
  {
    goto LABEL_8;
  }
  PB::TextFormatter::format(a2, "chaosMet2");
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x2000000000) == 0)
  {
LABEL_9:
    if ((v5 & 0x4000000000) == 0)
      goto LABEL_10;
    goto LABEL_90;
  }
LABEL_89:
  PB::TextFormatter::format(a2, "chaosMetRollover");
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x4000000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x8000000000) == 0)
      goto LABEL_11;
    goto LABEL_91;
  }
LABEL_90:
  PB::TextFormatter::format(a2, "chaosMetRollover0");
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x8000000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x10000000000) == 0)
      goto LABEL_12;
    goto LABEL_92;
  }
LABEL_91:
  PB::TextFormatter::format(a2, "chaosMetRollover1");
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x10000000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x20000000000) == 0)
      goto LABEL_13;
    goto LABEL_93;
  }
LABEL_92:
  PB::TextFormatter::format(a2, "chaosMetRollover2");
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x20000000000) == 0)
  {
LABEL_13:
    if ((v5 & 0x40000000000) == 0)
      goto LABEL_14;
    goto LABEL_94;
  }
LABEL_93:
  PB::TextFormatter::format(a2, "chaosOrSaturationMet");
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x40000000000) == 0)
  {
LABEL_14:
    if ((v5 & 0x80000000000) == 0)
      goto LABEL_15;
    goto LABEL_95;
  }
LABEL_94:
  PB::TextFormatter::format(a2, "chaosOrSaturationMet0");
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x80000000000) == 0)
  {
LABEL_15:
    if ((v5 & 0x100000000000) == 0)
      goto LABEL_16;
    goto LABEL_96;
  }
LABEL_95:
  PB::TextFormatter::format(a2, "chaosOrSaturationMet1");
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x100000000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x200000000000) == 0)
      goto LABEL_17;
    goto LABEL_97;
  }
LABEL_96:
  PB::TextFormatter::format(a2, "chaosOrSaturationMet2");
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x200000000000) == 0)
  {
LABEL_17:
    if ((v5 & 0x400000000000) == 0)
      goto LABEL_18;
    goto LABEL_98;
  }
LABEL_97:
  PB::TextFormatter::format(a2, "chaosOrSaturationMetRollover");
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x400000000000) == 0)
  {
LABEL_18:
    if ((v5 & 0x800000000000) == 0)
      goto LABEL_19;
    goto LABEL_99;
  }
LABEL_98:
  PB::TextFormatter::format(a2, "chaosOrSaturationMetRollover0");
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x800000000000) == 0)
  {
LABEL_19:
    if ((v5 & 0x1000000000000) == 0)
      goto LABEL_20;
    goto LABEL_100;
  }
LABEL_99:
  PB::TextFormatter::format(a2, "chaosOrSaturationMetRollover1");
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x1000000000000) == 0)
  {
LABEL_20:
    if ((v5 & 0x2000000000000) == 0)
      goto LABEL_21;
    goto LABEL_101;
  }
LABEL_100:
  PB::TextFormatter::format(a2, "chaosOrSaturationMetRollover2");
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x2000000000000) == 0)
  {
LABEL_21:
    if ((v5 & 0x4000000000000) == 0)
      goto LABEL_22;
    goto LABEL_102;
  }
LABEL_101:
  PB::TextFormatter::format(a2, "energyAndChaosOrSaturationMet");
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x4000000000000) == 0)
  {
LABEL_22:
    if ((v5 & 0x8000000000000) == 0)
      goto LABEL_23;
    goto LABEL_103;
  }
LABEL_102:
  PB::TextFormatter::format(a2, "energyAndChaosOrSaturationMet0");
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x8000000000000) == 0)
  {
LABEL_23:
    if ((v5 & 0x10000000000000) == 0)
      goto LABEL_24;
    goto LABEL_104;
  }
LABEL_103:
  PB::TextFormatter::format(a2, "energyAndChaosOrSaturationMet1");
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x10000000000000) == 0)
  {
LABEL_24:
    if ((v5 & 0x20000000000000) == 0)
      goto LABEL_25;
    goto LABEL_105;
  }
LABEL_104:
  PB::TextFormatter::format(a2, "energyAndChaosOrSaturationMet2");
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x20000000000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x40000000000000) == 0)
      goto LABEL_26;
    goto LABEL_106;
  }
LABEL_105:
  PB::TextFormatter::format(a2, "energyAndChaosOrSaturationMetRollover");
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x40000000000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x80000000000000) == 0)
      goto LABEL_27;
    goto LABEL_107;
  }
LABEL_106:
  PB::TextFormatter::format(a2, "energyAndChaosOrSaturationMetRollover0");
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x80000000000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x100000000000000) == 0)
      goto LABEL_28;
    goto LABEL_108;
  }
LABEL_107:
  PB::TextFormatter::format(a2, "energyAndChaosOrSaturationMetRollover1");
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x100000000000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x200000000000000) == 0)
      goto LABEL_29;
    goto LABEL_109;
  }
LABEL_108:
  PB::TextFormatter::format(a2, "energyAndChaosOrSaturationMetRollover2");
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x200000000000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x400000000000000) == 0)
      goto LABEL_30;
    goto LABEL_110;
  }
LABEL_109:
  PB::TextFormatter::format(a2, "energyMet");
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x400000000000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x800000000000000) == 0)
      goto LABEL_31;
    goto LABEL_111;
  }
LABEL_110:
  PB::TextFormatter::format(a2, "energyMet0");
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x800000000000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x1000000000000000) == 0)
      goto LABEL_32;
    goto LABEL_112;
  }
LABEL_111:
  PB::TextFormatter::format(a2, "energyMet1");
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x1000000000000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x2000000000000000) == 0)
      goto LABEL_33;
    goto LABEL_113;
  }
LABEL_112:
  PB::TextFormatter::format(a2, "energyMet2");
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x2000000000000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x4000000000000000) == 0)
      goto LABEL_34;
    goto LABEL_114;
  }
LABEL_113:
  PB::TextFormatter::format(a2, "energyMetRollover");
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x4000000000000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x8000000000000000) == 0)
      goto LABEL_35;
    goto LABEL_115;
  }
LABEL_114:
  PB::TextFormatter::format(a2, "energyMetRollover0");
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x8000000000000000) == 0)
  {
LABEL_35:
    if ((v6 & 1) == 0)
      goto LABEL_36;
    goto LABEL_116;
  }
LABEL_115:
  PB::TextFormatter::format(a2, "energyMetRollover1");
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((*((_WORD *)this + 106) & 1) == 0)
  {
LABEL_36:
    if ((v5 & 0x10) == 0)
      goto LABEL_37;
    goto LABEL_117;
  }
LABEL_116:
  PB::TextFormatter::format(a2, "energyMetRollover2");
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x10) == 0)
  {
LABEL_37:
    if ((v5 & 0x20) == 0)
      goto LABEL_38;
    goto LABEL_118;
  }
LABEL_117:
  PB::TextFormatter::format(a2, "epochNumber");
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x20) == 0)
  {
LABEL_38:
    if ((v5 & 0x40) == 0)
      goto LABEL_39;
    goto LABEL_119;
  }
LABEL_118:
  PB::TextFormatter::format(a2, "maxChaos", *((float *)this + 11));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x40) == 0)
  {
LABEL_39:
    if ((v5 & 0x80) == 0)
      goto LABEL_40;
    goto LABEL_120;
  }
LABEL_119:
  PB::TextFormatter::format(a2, "maxChaos0", *((float *)this + 12));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x80) == 0)
  {
LABEL_40:
    if ((v5 & 0x100) == 0)
      goto LABEL_41;
    goto LABEL_121;
  }
LABEL_120:
  PB::TextFormatter::format(a2, "maxChaos1", *((float *)this + 13));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x100) == 0)
  {
LABEL_41:
    if ((v5 & 0x200) == 0)
      goto LABEL_42;
    goto LABEL_122;
  }
LABEL_121:
  PB::TextFormatter::format(a2, "maxChaos2", *((float *)this + 14));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x200) == 0)
  {
LABEL_42:
    if ((v5 & 0x400) == 0)
      goto LABEL_43;
    goto LABEL_123;
  }
LABEL_122:
  PB::TextFormatter::format(a2, "maxChaosRollover", *((float *)this + 15));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x400) == 0)
  {
LABEL_43:
    if ((v5 & 0x800) == 0)
      goto LABEL_44;
    goto LABEL_124;
  }
LABEL_123:
  PB::TextFormatter::format(a2, "maxChaosRollover0", *((float *)this + 16));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x800) == 0)
  {
LABEL_44:
    if ((v5 & 0x1000) == 0)
      goto LABEL_45;
    goto LABEL_125;
  }
LABEL_124:
  PB::TextFormatter::format(a2, "maxChaosRollover1", *((float *)this + 17));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x1000) == 0)
  {
LABEL_45:
    if ((v5 & 0x2000) == 0)
      goto LABEL_46;
    goto LABEL_126;
  }
LABEL_125:
  PB::TextFormatter::format(a2, "maxChaosRollover2", *((float *)this + 18));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x2000) == 0)
  {
LABEL_46:
    if ((v5 & 0x4000) == 0)
      goto LABEL_47;
    goto LABEL_127;
  }
LABEL_126:
  PB::TextFormatter::format(a2, "maxEnergy", *((float *)this + 19));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x4000) == 0)
  {
LABEL_47:
    if ((v5 & 0x8000) == 0)
      goto LABEL_48;
    goto LABEL_128;
  }
LABEL_127:
  PB::TextFormatter::format(a2, "maxEnergy0", *((float *)this + 20));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x8000) == 0)
  {
LABEL_48:
    if ((v5 & 0x10000) == 0)
      goto LABEL_49;
    goto LABEL_129;
  }
LABEL_128:
  PB::TextFormatter::format(a2, "maxEnergy1", *((float *)this + 21));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x10000) == 0)
  {
LABEL_49:
    if ((v5 & 0x20000) == 0)
      goto LABEL_50;
    goto LABEL_130;
  }
LABEL_129:
  PB::TextFormatter::format(a2, "maxEnergy2", *((float *)this + 22));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x20000) == 0)
  {
LABEL_50:
    if ((v5 & 0x40000) == 0)
      goto LABEL_51;
    goto LABEL_131;
  }
LABEL_130:
  PB::TextFormatter::format(a2, "maxEnergyRollover", *((float *)this + 23));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x40000) == 0)
  {
LABEL_51:
    if ((v5 & 0x80000) == 0)
      goto LABEL_52;
    goto LABEL_132;
  }
LABEL_131:
  PB::TextFormatter::format(a2, "maxEnergyRollover0", *((float *)this + 24));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x80000) == 0)
  {
LABEL_52:
    if ((v5 & 0x100000) == 0)
      goto LABEL_53;
    goto LABEL_133;
  }
LABEL_132:
  PB::TextFormatter::format(a2, "maxEnergyRollover1", *((float *)this + 25));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x100000) == 0)
  {
LABEL_53:
    if ((v5 & 0x200000) == 0)
      goto LABEL_54;
    goto LABEL_134;
  }
LABEL_133:
  PB::TextFormatter::format(a2, "maxEnergyRollover2", *((float *)this + 26));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x200000) == 0)
  {
LABEL_54:
    if ((v5 & 0x400000) == 0)
      goto LABEL_55;
    goto LABEL_135;
  }
LABEL_134:
  PB::TextFormatter::format(a2, "maxRMS", *((float *)this + 27));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x400000) == 0)
  {
LABEL_55:
    if ((v5 & 0x800000) == 0)
      goto LABEL_56;
    goto LABEL_136;
  }
LABEL_135:
  PB::TextFormatter::format(a2, "maxRMS0", *((float *)this + 28));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x800000) == 0)
  {
LABEL_56:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_57;
    goto LABEL_137;
  }
LABEL_136:
  PB::TextFormatter::format(a2, "maxRMS1", *((float *)this + 29));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_57:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_58;
    goto LABEL_138;
  }
LABEL_137:
  PB::TextFormatter::format(a2, "maxRMS2", *((float *)this + 30));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_58:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_59;
    goto LABEL_139;
  }
LABEL_138:
  PB::TextFormatter::format(a2, "maxSaturation", *((float *)this + 31));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_59:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_60;
    goto LABEL_140;
  }
LABEL_139:
  PB::TextFormatter::format(a2, "maxSaturation0", *((float *)this + 32));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_60:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_61;
    goto LABEL_141;
  }
LABEL_140:
  PB::TextFormatter::format(a2, "maxSaturation1", *((float *)this + 33));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_61:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_62;
    goto LABEL_142;
  }
LABEL_141:
  PB::TextFormatter::format(a2, "maxSaturation2", *((float *)this + 34));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_62:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_63;
    goto LABEL_143;
  }
LABEL_142:
  PB::TextFormatter::format(a2, "maxSaturationRollover", *((float *)this + 35));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_63:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_64;
    goto LABEL_144;
  }
LABEL_143:
  PB::TextFormatter::format(a2, "maxSaturationRollover0", *((float *)this + 36));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_64:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_65;
    goto LABEL_145;
  }
LABEL_144:
  PB::TextFormatter::format(a2, "maxSaturationRollover1", *((float *)this + 37));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_65:
    if ((v6 & 2) == 0)
      goto LABEL_66;
    goto LABEL_146;
  }
LABEL_145:
  PB::TextFormatter::format(a2, "maxSaturationRollover2", *((float *)this + 38));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((*((_WORD *)this + 106) & 2) == 0)
  {
LABEL_66:
    if ((v6 & 4) == 0)
      goto LABEL_67;
    goto LABEL_147;
  }
LABEL_146:
  PB::TextFormatter::format(a2, "passThru");
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((*((_WORD *)this + 106) & 4) == 0)
  {
LABEL_67:
    if ((v6 & 8) == 0)
      goto LABEL_68;
    goto LABEL_148;
  }
LABEL_147:
  PB::TextFormatter::format(a2, "passThruRollover");
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((*((_WORD *)this + 106) & 8) == 0)
  {
LABEL_68:
    if ((v6 & 0x10) == 0)
      goto LABEL_69;
    goto LABEL_149;
  }
LABEL_148:
  PB::TextFormatter::format(a2, "passthru0");
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((*((_WORD *)this + 106) & 0x10) == 0)
  {
LABEL_69:
    if ((v6 & 0x20) == 0)
      goto LABEL_70;
    goto LABEL_150;
  }
LABEL_149:
  PB::TextFormatter::format(a2, "passthru1");
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((*((_WORD *)this + 106) & 0x20) == 0)
  {
LABEL_70:
    if ((v6 & 0x40) == 0)
      goto LABEL_71;
    goto LABEL_151;
  }
LABEL_150:
  PB::TextFormatter::format(a2, "passthru2");
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((*((_WORD *)this + 106) & 0x40) == 0)
  {
LABEL_71:
    if ((v6 & 0x80) == 0)
      goto LABEL_72;
    goto LABEL_152;
  }
LABEL_151:
  PB::TextFormatter::format(a2, "passthruRollover0");
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((*((_WORD *)this + 106) & 0x80) == 0)
  {
LABEL_72:
    if ((v6 & 0x100) == 0)
      goto LABEL_73;
    goto LABEL_153;
  }
LABEL_152:
  PB::TextFormatter::format(a2, "passthruRollover1");
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((*((_WORD *)this + 106) & 0x100) == 0)
  {
LABEL_73:
    if ((v6 & 0x200) == 0)
      goto LABEL_74;
    goto LABEL_154;
  }
LABEL_153:
  PB::TextFormatter::format(a2, "passthruRollover2");
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((*((_WORD *)this + 106) & 0x200) == 0)
  {
LABEL_74:
    if ((v6 & 0x400) == 0)
      goto LABEL_75;
    goto LABEL_155;
  }
LABEL_154:
  PB::TextFormatter::format(a2, "saturationMet");
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((*((_WORD *)this + 106) & 0x400) == 0)
  {
LABEL_75:
    if ((v6 & 0x800) == 0)
      goto LABEL_76;
    goto LABEL_156;
  }
LABEL_155:
  PB::TextFormatter::format(a2, "saturationMet0");
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((*((_WORD *)this + 106) & 0x800) == 0)
  {
LABEL_76:
    if ((v6 & 0x1000) == 0)
      goto LABEL_77;
    goto LABEL_157;
  }
LABEL_156:
  PB::TextFormatter::format(a2, "saturationMet1");
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((*((_WORD *)this + 106) & 0x1000) == 0)
  {
LABEL_77:
    if ((v6 & 0x2000) == 0)
      goto LABEL_78;
    goto LABEL_158;
  }
LABEL_157:
  PB::TextFormatter::format(a2, "saturationMet2");
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((*((_WORD *)this + 106) & 0x2000) == 0)
  {
LABEL_78:
    if ((v6 & 0x4000) == 0)
      goto LABEL_79;
    goto LABEL_159;
  }
LABEL_158:
  PB::TextFormatter::format(a2, "saturationMetRollover");
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((*((_WORD *)this + 106) & 0x4000) == 0)
  {
LABEL_79:
    if ((v6 & 0x8000) == 0)
      goto LABEL_80;
    goto LABEL_160;
  }
LABEL_159:
  PB::TextFormatter::format(a2, "saturationMetRollover0");
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((*((_WORD *)this + 106) & 0x8000) == 0)
  {
LABEL_80:
    if ((v6 & 0x10000) == 0)
      goto LABEL_81;
    goto LABEL_161;
  }
LABEL_160:
  PB::TextFormatter::format(a2, "saturationMetRollover1");
  v5 = *(_QWORD *)((char *)this + 204);
  if (((*((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16)) & 0x10000) == 0)
  {
LABEL_81:
    if ((v5 & 1) == 0)
      goto LABEL_82;
    goto LABEL_162;
  }
LABEL_161:
  PB::TextFormatter::format(a2, "saturationMetRollover2");
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 1) == 0)
  {
LABEL_82:
    if ((v5 & 2) == 0)
      goto LABEL_83;
    goto LABEL_163;
  }
LABEL_162:
  PB::TextFormatter::format(a2, "timestamp");
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 2) == 0)
  {
LABEL_83:
    if ((v5 & 4) == 0)
      goto LABEL_84;
LABEL_164:
    PB::TextFormatter::format(a2, "timestamp1");
    if ((*(_QWORD *)((_BYTE *)this + 204) & 8) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_85;
  }
LABEL_163:
  PB::TextFormatter::format(a2, "timestamp0");
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 4) != 0)
    goto LABEL_164;
LABEL_84:
  if ((v5 & 8) != 0)
LABEL_85:
    PB::TextFormatter::format(a2, "timestamp2");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaRemoteAudioResult::readFrom(CMMsl::KappaRemoteAudioResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  char *v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t result;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  int v65;
  BOOL v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  int v73;
  BOOL v74;
  unint64_t v75;
  unint64_t v76;
  int v77;
  BOOL v78;
  char v79;
  unint64_t v80;
  unint64_t v81;
  int v82;
  BOOL v83;
  unint64_t v84;
  unint64_t v85;
  int v86;
  BOOL v87;
  unint64_t v88;
  unint64_t v89;
  int v90;
  BOOL v91;
  char v92;
  unint64_t v93;
  unint64_t v94;
  int v95;
  BOOL v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  int v102;
  BOOL v103;
  unint64_t v104;
  unint64_t v105;
  int v106;
  BOOL v107;
  char v108;
  unint64_t v109;
  unint64_t v110;
  int v111;
  BOOL v112;
  unint64_t v113;
  unint64_t v114;
  int v115;
  BOOL v116;
  unint64_t v117;
  unint64_t v118;
  int v119;
  BOOL v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  int v127;
  BOOL v128;
  unint64_t v129;
  unint64_t v130;
  int v131;
  BOOL v132;
  char v133;
  unint64_t v134;
  unint64_t v135;
  int v136;
  BOOL v137;
  unint64_t v138;
  unint64_t v139;
  int v140;
  BOOL v141;
  unint64_t v142;
  unint64_t v143;
  int v144;
  BOOL v145;
  char v146;
  unint64_t v147;
  unint64_t v148;
  int v149;
  BOOL v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  char v154;
  unint64_t v155;
  unint64_t v156;
  int v157;
  BOOL v158;
  unint64_t v159;
  unint64_t v160;
  int v161;
  BOOL v162;
  int v163;
  unsigned int v164;
  unint64_t v165;
  unint64_t v166;
  int v167;
  BOOL v168;
  unint64_t v169;
  unint64_t v170;
  int v171;
  BOOL v172;
  unint64_t v173;
  unint64_t v174;
  int v175;
  BOOL v176;
  char v177;
  unint64_t v178;
  unint64_t v179;
  int v180;
  BOOL v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  int v188;
  BOOL v189;
  unint64_t v190;
  unint64_t v191;
  int v192;
  BOOL v193;
  char v194;
  unint64_t v195;
  unint64_t v196;
  int v197;
  BOOL v198;
  unint64_t v199;
  unint64_t v200;
  int v201;
  BOOL v202;
  unint64_t v203;
  unint64_t v204;
  int v205;
  BOOL v206;
  char v207;
  unint64_t v208;
  unint64_t v209;
  int v210;
  BOOL v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  int v217;
  BOOL v218;
  unint64_t v219;
  unint64_t v220;
  int v221;
  BOOL v222;
  char v223;
  unint64_t v224;
  unint64_t v225;
  int v226;
  BOOL v227;
  unint64_t v228;
  unint64_t v229;
  int v230;
  BOOL v231;
  unint64_t v232;
  unint64_t v233;
  int v234;
  BOOL v235;
  char v236;
  unint64_t v237;
  unint64_t v238;
  int v239;
  BOOL v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  int v247;
  BOOL v248;
  unint64_t v249;
  unint64_t v250;
  int v251;
  BOOL v252;
  char v253;
  unint64_t v254;
  unint64_t v255;
  int v256;
  BOOL v257;
  unint64_t v258;
  unint64_t v259;
  int v260;
  BOOL v261;
  unint64_t v262;
  unint64_t v263;
  int v264;
  BOOL v265;
  char v266;
  unint64_t v267;
  unint64_t v268;
  int v269;
  BOOL v270;
  unint64_t v271;
  unint64_t v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t v275;
  int v276;
  BOOL v277;
  unint64_t v278;
  unint64_t v279;
  int v280;
  BOOL v281;
  char v282;
  unint64_t v283;
  unint64_t v284;
  int v285;
  BOOL v286;
  unint64_t v287;
  unint64_t v288;
  int v289;
  BOOL v290;
  unint64_t v291;
  unint64_t v292;
  int v293;
  BOOL v294;
  char v295;
  unint64_t v296;
  unint64_t v297;
  int v298;
  BOOL v299;
  char v300;
  unsigned int v301;
  unint64_t v302;
  char v303;
  char v304;
  unsigned int v305;
  unint64_t v306;
  char v307;
  char v308;
  unsigned int v309;
  unint64_t v310;
  char v311;
  char v312;
  unsigned int v313;
  unint64_t v314;
  char v315;
  char v316;
  unsigned int v317;
  unint64_t v318;
  char v319;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  v8 = (char *)this + 204;
  while (1)
  {
    v9 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      break;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v14 = *(_BYTE *)(v9 + v2);
      v12 |= (unint64_t)(v14 & 0x7F) << v10;
      if ((v14 & 0x80) == 0)
        break;
      v10 += 7;
      v2 = v13;
      v15 = v11++ > 8;
      if (v15)
        goto LABEL_20;
    }
LABEL_22:
    if ((v12 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    v21 = v12 >> 3;
    if ((int)(v12 >> 3) > 1102)
    {
      switch((int)v21)
      {
        case 1103:
          *(_QWORD *)v8 |= 4uLL;
          v46 = *((_QWORD *)a2 + 1);
          v47 = *((_QWORD *)a2 + 2);
          v48 = *(_QWORD *)a2;
          if (v46 <= 0xFFFFFFFFFFFFFFF5 && v46 + 10 <= v47)
          {
            v49 = 0;
            v50 = 0;
            v51 = 0;
            do
            {
              v52 = v46 + 1;
              *((_QWORD *)a2 + 1) = v46 + 1;
              v53 = *(_BYTE *)(v48 + v46);
              v51 |= (unint64_t)(v53 & 0x7F) << v49;
              if ((v53 & 0x80) == 0)
                goto LABEL_397;
              v49 += 7;
              v46 = v52;
              v15 = v50++ > 8;
            }
            while (!v15);
LABEL_271:
            v51 = 0;
            goto LABEL_397;
          }
          v312 = 0;
          v313 = 0;
          v51 = 0;
          if (v47 <= v46)
            v47 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v47 == v46)
            {
              v51 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v314 = v46 + 1;
              v315 = *(_BYTE *)(v48 + v46);
              *((_QWORD *)a2 + 1) = v314;
              v51 |= (unint64_t)(v315 & 0x7F) << v312;
              if (v315 < 0)
              {
                v312 += 7;
                v46 = v314;
                v15 = v313++ > 8;
                if (v15)
                  goto LABEL_271;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v51 = 0;
            }
            break;
          }
LABEL_397:
          *((_QWORD *)this + 3) = v51;
          goto LABEL_377;
        case 1104:
          *(_QWORD *)v8 |= 0x800000uLL;
          v241 = *((_QWORD *)a2 + 1);
          if (v241 > 0xFFFFFFFFFFFFFFFBLL || v241 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_231;
          *((_DWORD *)this + 29) = *(_DWORD *)(*(_QWORD *)a2 + v241);
          goto LABEL_376;
        case 1105:
          *(_QWORD *)v8 |= 0x8000uLL;
          v242 = *((_QWORD *)a2 + 1);
          if (v242 > 0xFFFFFFFFFFFFFFFBLL || v242 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_231;
          *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v242);
          goto LABEL_376;
        case 1106:
          *(_QWORD *)v8 |= 0x80uLL;
          v243 = *((_QWORD *)a2 + 1);
          if (v243 > 0xFFFFFFFFFFFFFFFBLL || v243 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_231;
          *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v243);
          goto LABEL_376;
        case 1107:
          *(_QWORD *)v8 |= 0x8000000uLL;
          v244 = *((_QWORD *)a2 + 1);
          if (v244 > 0xFFFFFFFFFFFFFFFBLL || v244 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_231;
          *((_DWORD *)this + 33) = *(_DWORD *)(*(_QWORD *)a2 + v244);
          goto LABEL_376;
        case 1108:
          *(_QWORD *)v8 |= 0x800000000000000uLL;
          v245 = *((_QWORD *)a2 + 1);
          if (v245 >= *((_QWORD *)a2 + 2))
          {
            v248 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v246 = v245 + 1;
            v247 = *(unsigned __int8 *)(*(_QWORD *)a2 + v245);
            *((_QWORD *)a2 + 1) = v246;
            v248 = v247 != 0;
          }
          *((_BYTE *)this + 182) = v248;
          goto LABEL_377;
        case 1109:
          *(_QWORD *)v8 |= 0x800000000uLL;
          v249 = *((_QWORD *)a2 + 1);
          if (v249 >= *((_QWORD *)a2 + 2))
          {
            v252 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v250 = v249 + 1;
            v251 = *(unsigned __int8 *)(*(_QWORD *)a2 + v249);
            *((_QWORD *)a2 + 1) = v250;
            v252 = v251 != 0;
          }
          *((_BYTE *)this + 158) = v252;
          goto LABEL_377;
        case 1110:
          v253 = v8[10];
          *((_WORD *)v8 + 4) |= 0x800u;
          v8[10] = v253;
          v254 = *((_QWORD *)a2 + 1);
          if (v254 >= *((_QWORD *)a2 + 2))
          {
            v257 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v255 = v254 + 1;
            v256 = *(unsigned __int8 *)(*(_QWORD *)a2 + v254);
            *((_QWORD *)a2 + 1) = v255;
            v257 = v256 != 0;
          }
          *((_BYTE *)this + 198) = v257;
          goto LABEL_377;
        case 1111:
          *(_QWORD *)v8 |= 0x80000000000uLL;
          v258 = *((_QWORD *)a2 + 1);
          if (v258 >= *((_QWORD *)a2 + 2))
          {
            v261 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v259 = v258 + 1;
            v260 = *(unsigned __int8 *)(*(_QWORD *)a2 + v258);
            *((_QWORD *)a2 + 1) = v259;
            v261 = v260 != 0;
          }
          *((_BYTE *)this + 166) = v261;
          goto LABEL_377;
        case 1112:
          *(_QWORD *)v8 |= 0x8000000000000uLL;
          v262 = *((_QWORD *)a2 + 1);
          if (v262 >= *((_QWORD *)a2 + 2))
          {
            v265 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v263 = v262 + 1;
            v264 = *(unsigned __int8 *)(*(_QWORD *)a2 + v262);
            *((_QWORD *)a2 + 1) = v263;
            v265 = v264 != 0;
          }
          *((_BYTE *)this + 174) = v265;
          goto LABEL_377;
        case 1113:
          v266 = v8[10];
          *((_WORD *)v8 + 4) |= 0x10u;
          v8[10] = v266;
          v267 = *((_QWORD *)a2 + 1);
          if (v267 >= *((_QWORD *)a2 + 2))
          {
            v270 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v268 = v267 + 1;
            v269 = *(unsigned __int8 *)(*(_QWORD *)a2 + v267);
            *((_QWORD *)a2 + 1) = v268;
            v270 = v269 != 0;
          }
          *((_BYTE *)this + 191) = v270;
          goto LABEL_377;
        case 1114:
          *(_QWORD *)v8 |= 0x80000uLL;
          v271 = *((_QWORD *)a2 + 1);
          if (v271 > 0xFFFFFFFFFFFFFFFBLL || v271 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_231;
          *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v271);
          goto LABEL_376;
        case 1115:
          *(_QWORD *)v8 |= 0x800uLL;
          v272 = *((_QWORD *)a2 + 1);
          if (v272 > 0xFFFFFFFFFFFFFFFBLL || v272 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_231;
          *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v272);
          goto LABEL_376;
        case 1116:
          *(_QWORD *)v8 |= 0x80000000uLL;
          v273 = *((_QWORD *)a2 + 1);
          if (v273 <= 0xFFFFFFFFFFFFFFFBLL && v273 + 4 <= *((_QWORD *)a2 + 2))
          {
            *((_DWORD *)this + 37) = *(_DWORD *)(*(_QWORD *)a2 + v273);
LABEL_376:
            *((_QWORD *)a2 + 1) += 4;
          }
          else
          {
LABEL_231:
            *((_BYTE *)a2 + 24) = 1;
          }
          goto LABEL_377;
        case 1117:
          *(_QWORD *)v8 |= 0x8000000000000000;
          v274 = *((_QWORD *)a2 + 1);
          if (v274 >= *((_QWORD *)a2 + 2))
          {
            v277 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v275 = v274 + 1;
            v276 = *(unsigned __int8 *)(*(_QWORD *)a2 + v274);
            *((_QWORD *)a2 + 1) = v275;
            v277 = v276 != 0;
          }
          *((_BYTE *)this + 186) = v277;
          goto LABEL_377;
        case 1118:
          *(_QWORD *)v8 |= 0x8000000000uLL;
          v278 = *((_QWORD *)a2 + 1);
          if (v278 >= *((_QWORD *)a2 + 2))
          {
            v281 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v279 = v278 + 1;
            v280 = *(unsigned __int8 *)(*(_QWORD *)a2 + v278);
            *((_QWORD *)a2 + 1) = v279;
            v281 = v280 != 0;
          }
          *((_BYTE *)this + 162) = v281;
          goto LABEL_377;
        case 1119:
          v282 = v8[10];
          *((_WORD *)v8 + 4) |= 0x8000u;
          v8[10] = v282;
          v283 = *((_QWORD *)a2 + 1);
          if (v283 >= *((_QWORD *)a2 + 2))
          {
            v286 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v284 = v283 + 1;
            v285 = *(unsigned __int8 *)(*(_QWORD *)a2 + v283);
            *((_QWORD *)a2 + 1) = v284;
            v286 = v285 != 0;
          }
          *((_BYTE *)this + 202) = v286;
          goto LABEL_377;
        case 1120:
          *(_QWORD *)v8 |= 0x800000000000uLL;
          v287 = *((_QWORD *)a2 + 1);
          if (v287 >= *((_QWORD *)a2 + 2))
          {
            v290 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v288 = v287 + 1;
            v289 = *(unsigned __int8 *)(*(_QWORD *)a2 + v287);
            *((_QWORD *)a2 + 1) = v288;
            v290 = v289 != 0;
          }
          *((_BYTE *)this + 170) = v290;
          goto LABEL_377;
        case 1121:
          *(_QWORD *)v8 |= 0x80000000000000uLL;
          v291 = *((_QWORD *)a2 + 1);
          if (v291 >= *((_QWORD *)a2 + 2))
          {
            v294 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v292 = v291 + 1;
            v293 = *(unsigned __int8 *)(*(_QWORD *)a2 + v291);
            *((_QWORD *)a2 + 1) = v292;
            v294 = v293 != 0;
          }
          *((_BYTE *)this + 178) = v294;
          goto LABEL_377;
        case 1122:
          v295 = v8[10];
          *((_WORD *)v8 + 4) |= 0x80u;
          v8[10] = v295;
          v296 = *((_QWORD *)a2 + 1);
          if (v296 >= *((_QWORD *)a2 + 2))
          {
            v299 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v297 = v296 + 1;
            v298 = *(unsigned __int8 *)(*(_QWORD *)a2 + v296);
            *((_QWORD *)a2 + 1) = v297;
            v299 = v298 != 0;
          }
          *((_BYTE *)this + 194) = v299;
          goto LABEL_377;
        default:
          switch((int)v21)
          {
            case 1203:
              *(_QWORD *)v8 |= 8uLL;
              v30 = *((_QWORD *)a2 + 1);
              v31 = *((_QWORD *)a2 + 2);
              v32 = *(_QWORD *)a2;
              if (v30 <= 0xFFFFFFFFFFFFFFF5 && v30 + 10 <= v31)
              {
                v33 = 0;
                v34 = 0;
                v35 = 0;
                do
                {
                  v36 = v30 + 1;
                  *((_QWORD *)a2 + 1) = v30 + 1;
                  v37 = *(_BYTE *)(v32 + v30);
                  v35 |= (unint64_t)(v37 & 0x7F) << v33;
                  if ((v37 & 0x80) == 0)
                    goto LABEL_389;
                  v33 += 7;
                  v30 = v36;
                  v15 = v34++ > 8;
                }
                while (!v15);
LABEL_257:
                v35 = 0;
                goto LABEL_389;
              }
              v304 = 0;
              v305 = 0;
              v35 = 0;
              if (v31 <= v30)
                v31 = *((_QWORD *)a2 + 1);
              break;
            case 1204:
              *(_QWORD *)v8 |= 0x1000000uLL;
              v121 = *((_QWORD *)a2 + 1);
              if (v121 > 0xFFFFFFFFFFFFFFFBLL || v121 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_231;
              *((_DWORD *)this + 30) = *(_DWORD *)(*(_QWORD *)a2 + v121);
              goto LABEL_376;
            case 1205:
              *(_QWORD *)v8 |= 0x10000uLL;
              v122 = *((_QWORD *)a2 + 1);
              if (v122 > 0xFFFFFFFFFFFFFFFBLL || v122 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_231;
              *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v122);
              goto LABEL_376;
            case 1206:
              *(_QWORD *)v8 |= 0x100uLL;
              v123 = *((_QWORD *)a2 + 1);
              if (v123 > 0xFFFFFFFFFFFFFFFBLL || v123 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_231;
              *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v123);
              goto LABEL_376;
            case 1207:
              *(_QWORD *)v8 |= 0x10000000uLL;
              v124 = *((_QWORD *)a2 + 1);
              if (v124 > 0xFFFFFFFFFFFFFFFBLL || v124 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_231;
              *((_DWORD *)this + 34) = *(_DWORD *)(*(_QWORD *)a2 + v124);
              goto LABEL_376;
            case 1208:
              *(_QWORD *)v8 |= 0x1000000000000000uLL;
              v125 = *((_QWORD *)a2 + 1);
              if (v125 >= *((_QWORD *)a2 + 2))
              {
                v128 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v126 = v125 + 1;
                v127 = *(unsigned __int8 *)(*(_QWORD *)a2 + v125);
                *((_QWORD *)a2 + 1) = v126;
                v128 = v127 != 0;
              }
              *((_BYTE *)this + 183) = v128;
              goto LABEL_377;
            case 1209:
              *(_QWORD *)v8 |= 0x1000000000uLL;
              v129 = *((_QWORD *)a2 + 1);
              if (v129 >= *((_QWORD *)a2 + 2))
              {
                v132 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v130 = v129 + 1;
                v131 = *(unsigned __int8 *)(*(_QWORD *)a2 + v129);
                *((_QWORD *)a2 + 1) = v130;
                v132 = v131 != 0;
              }
              *((_BYTE *)this + 159) = v132;
              goto LABEL_377;
            case 1210:
              v133 = v8[10];
              *((_WORD *)v8 + 4) |= 0x1000u;
              v8[10] = v133;
              v134 = *((_QWORD *)a2 + 1);
              if (v134 >= *((_QWORD *)a2 + 2))
              {
                v137 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v135 = v134 + 1;
                v136 = *(unsigned __int8 *)(*(_QWORD *)a2 + v134);
                *((_QWORD *)a2 + 1) = v135;
                v137 = v136 != 0;
              }
              *((_BYTE *)this + 199) = v137;
              goto LABEL_377;
            case 1211:
              *(_QWORD *)v8 |= 0x100000000000uLL;
              v138 = *((_QWORD *)a2 + 1);
              if (v138 >= *((_QWORD *)a2 + 2))
              {
                v141 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v139 = v138 + 1;
                v140 = *(unsigned __int8 *)(*(_QWORD *)a2 + v138);
                *((_QWORD *)a2 + 1) = v139;
                v141 = v140 != 0;
              }
              *((_BYTE *)this + 167) = v141;
              goto LABEL_377;
            case 1212:
              *(_QWORD *)v8 |= 0x10000000000000uLL;
              v142 = *((_QWORD *)a2 + 1);
              if (v142 >= *((_QWORD *)a2 + 2))
              {
                v145 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v143 = v142 + 1;
                v144 = *(unsigned __int8 *)(*(_QWORD *)a2 + v142);
                *((_QWORD *)a2 + 1) = v143;
                v145 = v144 != 0;
              }
              *((_BYTE *)this + 175) = v145;
              goto LABEL_377;
            case 1213:
              v146 = v8[10];
              *((_WORD *)v8 + 4) |= 0x20u;
              v8[10] = v146;
              v147 = *((_QWORD *)a2 + 1);
              if (v147 >= *((_QWORD *)a2 + 2))
              {
                v150 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v148 = v147 + 1;
                v149 = *(unsigned __int8 *)(*(_QWORD *)a2 + v147);
                *((_QWORD *)a2 + 1) = v148;
                v150 = v149 != 0;
              }
              *((_BYTE *)this + 192) = v150;
              goto LABEL_377;
            case 1214:
              *(_QWORD *)v8 |= 0x100000uLL;
              v151 = *((_QWORD *)a2 + 1);
              if (v151 > 0xFFFFFFFFFFFFFFFBLL || v151 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_231;
              *((_DWORD *)this + 26) = *(_DWORD *)(*(_QWORD *)a2 + v151);
              goto LABEL_376;
            case 1215:
              *(_QWORD *)v8 |= 0x1000uLL;
              v152 = *((_QWORD *)a2 + 1);
              if (v152 > 0xFFFFFFFFFFFFFFFBLL || v152 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_231;
              *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v152);
              goto LABEL_376;
            case 1216:
              *(_QWORD *)v8 |= 0x100000000uLL;
              v153 = *((_QWORD *)a2 + 1);
              if (v153 > 0xFFFFFFFFFFFFFFFBLL || v153 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_231;
              *((_DWORD *)this + 38) = *(_DWORD *)(*(_QWORD *)a2 + v153);
              goto LABEL_376;
            case 1217:
              v154 = v8[10];
              *((_WORD *)v8 + 4) |= 1u;
              v8[10] = v154;
              v155 = *((_QWORD *)a2 + 1);
              if (v155 >= *((_QWORD *)a2 + 2))
              {
                v158 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v156 = v155 + 1;
                v157 = *(unsigned __int8 *)(*(_QWORD *)a2 + v155);
                *((_QWORD *)a2 + 1) = v156;
                v158 = v157 != 0;
              }
              *((_BYTE *)this + 187) = v158;
              goto LABEL_377;
            case 1218:
              *(_QWORD *)v8 |= 0x10000000000uLL;
              v159 = *((_QWORD *)a2 + 1);
              if (v159 >= *((_QWORD *)a2 + 2))
              {
                v162 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v160 = v159 + 1;
                v161 = *(unsigned __int8 *)(*(_QWORD *)a2 + v159);
                *((_QWORD *)a2 + 1) = v160;
                v162 = v161 != 0;
              }
              *((_BYTE *)this + 163) = v162;
              goto LABEL_377;
            case 1219:
              v163 = *((unsigned __int16 *)v8 + 4);
              v164 = (v163 | (v8[10] << 16) | 0x10000u) >> 16;
              *((_WORD *)v8 + 4) = v163;
              v8[10] = v164;
              v165 = *((_QWORD *)a2 + 1);
              if (v165 >= *((_QWORD *)a2 + 2))
              {
                v168 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v166 = v165 + 1;
                v167 = *(unsigned __int8 *)(*(_QWORD *)a2 + v165);
                *((_QWORD *)a2 + 1) = v166;
                v168 = v167 != 0;
              }
              *((_BYTE *)this + 203) = v168;
              goto LABEL_377;
            case 1220:
              *(_QWORD *)v8 |= 0x1000000000000uLL;
              v169 = *((_QWORD *)a2 + 1);
              if (v169 >= *((_QWORD *)a2 + 2))
              {
                v172 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v170 = v169 + 1;
                v171 = *(unsigned __int8 *)(*(_QWORD *)a2 + v169);
                *((_QWORD *)a2 + 1) = v170;
                v172 = v171 != 0;
              }
              *((_BYTE *)this + 171) = v172;
              goto LABEL_377;
            case 1221:
              *(_QWORD *)v8 |= 0x100000000000000uLL;
              v173 = *((_QWORD *)a2 + 1);
              if (v173 >= *((_QWORD *)a2 + 2))
              {
                v176 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v174 = v173 + 1;
                v175 = *(unsigned __int8 *)(*(_QWORD *)a2 + v173);
                *((_QWORD *)a2 + 1) = v174;
                v176 = v175 != 0;
              }
              *((_BYTE *)this + 179) = v176;
              goto LABEL_377;
            case 1222:
              v177 = v8[10];
              *((_WORD *)v8 + 4) |= 0x100u;
              v8[10] = v177;
              v178 = *((_QWORD *)a2 + 1);
              if (v178 >= *((_QWORD *)a2 + 2))
              {
                v181 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v179 = v178 + 1;
                v180 = *(unsigned __int8 *)(*(_QWORD *)a2 + v178);
                *((_QWORD *)a2 + 1) = v179;
                v181 = v180 != 0;
              }
              *((_BYTE *)this + 195) = v181;
              goto LABEL_377;
            default:
              goto LABEL_20;
          }
          break;
      }
      while (1)
      {
        if (v31 == v30)
        {
          v35 = 0;
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_389;
        }
        v306 = v30 + 1;
        v307 = *(_BYTE *)(v32 + v30);
        *((_QWORD *)a2 + 1) = v306;
        v35 |= (unint64_t)(v307 & 0x7F) << v304;
        if ((v307 & 0x80) == 0)
          break;
        v304 += 7;
        v30 = v306;
        v15 = v305++ > 8;
        if (v15)
          goto LABEL_257;
      }
      if (*((_BYTE *)a2 + 24))
        v35 = 0;
LABEL_389:
      *((_QWORD *)this + 4) = v35;
    }
    else
    {
      switch((int)v21)
      {
        case 'e':
          *(_QWORD *)v8 |= 1uLL;
          v22 = *((_QWORD *)a2 + 1);
          v23 = *((_QWORD *)a2 + 2);
          v24 = *(_QWORD *)a2;
          if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
          {
            v25 = 0;
            v26 = 0;
            v27 = 0;
            do
            {
              v28 = v22 + 1;
              *((_QWORD *)a2 + 1) = v22 + 1;
              v29 = *(_BYTE *)(v24 + v22);
              v27 |= (unint64_t)(v29 & 0x7F) << v25;
              if ((v29 & 0x80) == 0)
                goto LABEL_385;
              v25 += 7;
              v22 = v28;
              v15 = v26++ > 8;
            }
            while (!v15);
LABEL_250:
            v27 = 0;
            goto LABEL_385;
          }
          v300 = 0;
          v301 = 0;
          v27 = 0;
          if (v23 <= v22)
            v23 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v23 == v22)
            {
              v27 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v302 = v22 + 1;
              v303 = *(_BYTE *)(v24 + v22);
              *((_QWORD *)a2 + 1) = v302;
              v27 |= (unint64_t)(v303 & 0x7F) << v300;
              if (v303 < 0)
              {
                v300 += 7;
                v22 = v302;
                v15 = v301++ > 8;
                if (v15)
                  goto LABEL_250;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v27 = 0;
            }
            break;
          }
LABEL_385:
          *((_QWORD *)this + 1) = v27;
          goto LABEL_377;
        case 'f':
          *(_QWORD *)v8 |= 0x10uLL;
          v54 = *((_QWORD *)a2 + 1);
          v55 = *((_QWORD *)a2 + 2);
          v56 = *(_QWORD *)a2;
          if (v54 <= 0xFFFFFFFFFFFFFFF5 && v54 + 10 <= v55)
          {
            v57 = 0;
            v58 = 0;
            v59 = 0;
            do
            {
              v60 = v54 + 1;
              *((_QWORD *)a2 + 1) = v54 + 1;
              v61 = *(_BYTE *)(v56 + v54);
              v59 |= (unint64_t)(v61 & 0x7F) << v57;
              if ((v61 & 0x80) == 0)
                goto LABEL_401;
              v57 += 7;
              v54 = v60;
              v15 = v58++ > 8;
            }
            while (!v15);
LABEL_278:
            LODWORD(v59) = 0;
            goto LABEL_401;
          }
          v316 = 0;
          v317 = 0;
          v59 = 0;
          if (v55 <= v54)
            v55 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v55 == v54)
            {
              LODWORD(v59) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v318 = v54 + 1;
              v319 = *(_BYTE *)(v56 + v54);
              *((_QWORD *)a2 + 1) = v318;
              v59 |= (unint64_t)(v319 & 0x7F) << v316;
              if (v319 < 0)
              {
                v316 += 7;
                v54 = v318;
                v15 = v317++ > 8;
                if (v15)
                  goto LABEL_278;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v59) = 0;
            }
            break;
          }
LABEL_401:
          *((_DWORD *)this + 10) = v59;
          goto LABEL_377;
        case 'g':
          v62 = v8[10];
          *((_WORD *)v8 + 4) |= 2u;
          v8[10] = v62;
          v63 = *((_QWORD *)a2 + 1);
          if (v63 >= *((_QWORD *)a2 + 2))
          {
            v66 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v64 = v63 + 1;
            v65 = *(unsigned __int8 *)(*(_QWORD *)a2 + v63);
            *((_QWORD *)a2 + 1) = v64;
            v66 = v65 != 0;
          }
          *((_BYTE *)this + 188) = v66;
          goto LABEL_377;
        case 'h':
          *(_QWORD *)v8 |= 0x200000uLL;
          v67 = *((_QWORD *)a2 + 1);
          if (v67 > 0xFFFFFFFFFFFFFFFBLL || v67 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_231;
          *((_DWORD *)this + 27) = *(_DWORD *)(*(_QWORD *)a2 + v67);
          goto LABEL_376;
        case 'i':
          *(_QWORD *)v8 |= 0x2000uLL;
          v68 = *((_QWORD *)a2 + 1);
          if (v68 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_231;
          *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v68);
          goto LABEL_376;
        case 'j':
          *(_QWORD *)v8 |= 0x20uLL;
          v69 = *((_QWORD *)a2 + 1);
          if (v69 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_231;
          *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v69);
          goto LABEL_376;
        case 'k':
          *(_QWORD *)v8 |= 0x2000000uLL;
          v70 = *((_QWORD *)a2 + 1);
          if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_231;
          *((_DWORD *)this + 31) = *(_DWORD *)(*(_QWORD *)a2 + v70);
          goto LABEL_376;
        case 'l':
          *(_QWORD *)v8 |= 0x200000000000000uLL;
          v71 = *((_QWORD *)a2 + 1);
          if (v71 >= *((_QWORD *)a2 + 2))
          {
            v74 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v72 = v71 + 1;
            v73 = *(unsigned __int8 *)(*(_QWORD *)a2 + v71);
            *((_QWORD *)a2 + 1) = v72;
            v74 = v73 != 0;
          }
          *((_BYTE *)this + 180) = v74;
          goto LABEL_377;
        case 'm':
          *(_QWORD *)v8 |= 0x200000000uLL;
          v75 = *((_QWORD *)a2 + 1);
          if (v75 >= *((_QWORD *)a2 + 2))
          {
            v78 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v76 = v75 + 1;
            v77 = *(unsigned __int8 *)(*(_QWORD *)a2 + v75);
            *((_QWORD *)a2 + 1) = v76;
            v78 = v77 != 0;
          }
          *((_BYTE *)this + 156) = v78;
          goto LABEL_377;
        case 'n':
          v79 = v8[10];
          *((_WORD *)v8 + 4) |= 0x200u;
          v8[10] = v79;
          v80 = *((_QWORD *)a2 + 1);
          if (v80 >= *((_QWORD *)a2 + 2))
          {
            v83 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v81 = v80 + 1;
            v82 = *(unsigned __int8 *)(*(_QWORD *)a2 + v80);
            *((_QWORD *)a2 + 1) = v81;
            v83 = v82 != 0;
          }
          *((_BYTE *)this + 196) = v83;
          goto LABEL_377;
        case 'o':
          *(_QWORD *)v8 |= 0x20000000000uLL;
          v84 = *((_QWORD *)a2 + 1);
          if (v84 >= *((_QWORD *)a2 + 2))
          {
            v87 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v85 = v84 + 1;
            v86 = *(unsigned __int8 *)(*(_QWORD *)a2 + v84);
            *((_QWORD *)a2 + 1) = v85;
            v87 = v86 != 0;
          }
          *((_BYTE *)this + 164) = v87;
          goto LABEL_377;
        case 'p':
          *(_QWORD *)v8 |= 0x2000000000000uLL;
          v88 = *((_QWORD *)a2 + 1);
          if (v88 >= *((_QWORD *)a2 + 2))
          {
            v91 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v89 = v88 + 1;
            v90 = *(unsigned __int8 *)(*(_QWORD *)a2 + v88);
            *((_QWORD *)a2 + 1) = v89;
            v91 = v90 != 0;
          }
          *((_BYTE *)this + 172) = v91;
          goto LABEL_377;
        case 'q':
          v92 = v8[10];
          *((_WORD *)v8 + 4) |= 4u;
          v8[10] = v92;
          v93 = *((_QWORD *)a2 + 1);
          if (v93 >= *((_QWORD *)a2 + 2))
          {
            v96 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v94 = v93 + 1;
            v95 = *(unsigned __int8 *)(*(_QWORD *)a2 + v93);
            *((_QWORD *)a2 + 1) = v94;
            v96 = v95 != 0;
          }
          *((_BYTE *)this + 189) = v96;
          goto LABEL_377;
        case 'r':
          *(_QWORD *)v8 |= 0x20000uLL;
          v97 = *((_QWORD *)a2 + 1);
          if (v97 > 0xFFFFFFFFFFFFFFFBLL || v97 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_231;
          *((_DWORD *)this + 23) = *(_DWORD *)(*(_QWORD *)a2 + v97);
          goto LABEL_376;
        case 's':
          *(_QWORD *)v8 |= 0x200uLL;
          v98 = *((_QWORD *)a2 + 1);
          if (v98 > 0xFFFFFFFFFFFFFFFBLL || v98 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_231;
          *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v98);
          goto LABEL_376;
        case 't':
          *(_QWORD *)v8 |= 0x20000000uLL;
          v99 = *((_QWORD *)a2 + 1);
          if (v99 > 0xFFFFFFFFFFFFFFFBLL || v99 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_231;
          *((_DWORD *)this + 35) = *(_DWORD *)(*(_QWORD *)a2 + v99);
          goto LABEL_376;
        case 'u':
          *(_QWORD *)v8 |= 0x2000000000000000uLL;
          v100 = *((_QWORD *)a2 + 1);
          if (v100 >= *((_QWORD *)a2 + 2))
          {
            v103 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v101 = v100 + 1;
            v102 = *(unsigned __int8 *)(*(_QWORD *)a2 + v100);
            *((_QWORD *)a2 + 1) = v101;
            v103 = v102 != 0;
          }
          *((_BYTE *)this + 184) = v103;
          goto LABEL_377;
        case 'v':
          *(_QWORD *)v8 |= 0x2000000000uLL;
          v104 = *((_QWORD *)a2 + 1);
          if (v104 >= *((_QWORD *)a2 + 2))
          {
            v107 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v105 = v104 + 1;
            v106 = *(unsigned __int8 *)(*(_QWORD *)a2 + v104);
            *((_QWORD *)a2 + 1) = v105;
            v107 = v106 != 0;
          }
          *((_BYTE *)this + 160) = v107;
          goto LABEL_377;
        case 'w':
          v108 = v8[10];
          *((_WORD *)v8 + 4) |= 0x2000u;
          v8[10] = v108;
          v109 = *((_QWORD *)a2 + 1);
          if (v109 >= *((_QWORD *)a2 + 2))
          {
            v112 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v110 = v109 + 1;
            v111 = *(unsigned __int8 *)(*(_QWORD *)a2 + v109);
            *((_QWORD *)a2 + 1) = v110;
            v112 = v111 != 0;
          }
          *((_BYTE *)this + 200) = v112;
          goto LABEL_377;
        case 'x':
          *(_QWORD *)v8 |= 0x200000000000uLL;
          v113 = *((_QWORD *)a2 + 1);
          if (v113 >= *((_QWORD *)a2 + 2))
          {
            v116 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v114 = v113 + 1;
            v115 = *(unsigned __int8 *)(*(_QWORD *)a2 + v113);
            *((_QWORD *)a2 + 1) = v114;
            v116 = v115 != 0;
          }
          *((_BYTE *)this + 168) = v116;
          goto LABEL_377;
        case 'y':
          *(_QWORD *)v8 |= 0x20000000000000uLL;
          v117 = *((_QWORD *)a2 + 1);
          if (v117 >= *((_QWORD *)a2 + 2))
          {
            v120 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v118 = v117 + 1;
            v119 = *(unsigned __int8 *)(*(_QWORD *)a2 + v117);
            *((_QWORD *)a2 + 1) = v118;
            v120 = v119 != 0;
          }
          *((_BYTE *)this + 176) = v120;
          goto LABEL_377;
        default:
          switch((int)v21)
          {
            case 1003:
              *(_QWORD *)v8 |= 2uLL;
              v38 = *((_QWORD *)a2 + 1);
              v39 = *((_QWORD *)a2 + 2);
              v40 = *(_QWORD *)a2;
              if (v38 <= 0xFFFFFFFFFFFFFFF5 && v38 + 10 <= v39)
              {
                v41 = 0;
                v42 = 0;
                v43 = 0;
                do
                {
                  v44 = v38 + 1;
                  *((_QWORD *)a2 + 1) = v38 + 1;
                  v45 = *(_BYTE *)(v40 + v38);
                  v43 |= (unint64_t)(v45 & 0x7F) << v41;
                  if ((v45 & 0x80) == 0)
                    goto LABEL_393;
                  v41 += 7;
                  v38 = v44;
                  v15 = v42++ > 8;
                }
                while (!v15);
LABEL_264:
                v43 = 0;
                goto LABEL_393;
              }
              v308 = 0;
              v309 = 0;
              v43 = 0;
              if (v39 <= v38)
                v39 = *((_QWORD *)a2 + 1);
              break;
            case 1004:
              *(_QWORD *)v8 |= 0x400000uLL;
              v182 = *((_QWORD *)a2 + 1);
              if (v182 > 0xFFFFFFFFFFFFFFFBLL || v182 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_231;
              *((_DWORD *)this + 28) = *(_DWORD *)(*(_QWORD *)a2 + v182);
              goto LABEL_376;
            case 1005:
              *(_QWORD *)v8 |= 0x4000uLL;
              v183 = *((_QWORD *)a2 + 1);
              if (v183 > 0xFFFFFFFFFFFFFFFBLL || v183 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_231;
              *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v183);
              goto LABEL_376;
            case 1006:
              *(_QWORD *)v8 |= 0x40uLL;
              v184 = *((_QWORD *)a2 + 1);
              if (v184 > 0xFFFFFFFFFFFFFFFBLL || v184 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_231;
              *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v184);
              goto LABEL_376;
            case 1007:
              *(_QWORD *)v8 |= 0x4000000uLL;
              v185 = *((_QWORD *)a2 + 1);
              if (v185 > 0xFFFFFFFFFFFFFFFBLL || v185 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_231;
              *((_DWORD *)this + 32) = *(_DWORD *)(*(_QWORD *)a2 + v185);
              goto LABEL_376;
            case 1008:
              *(_QWORD *)v8 |= 0x400000000000000uLL;
              v186 = *((_QWORD *)a2 + 1);
              if (v186 >= *((_QWORD *)a2 + 2))
              {
                v189 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v187 = v186 + 1;
                v188 = *(unsigned __int8 *)(*(_QWORD *)a2 + v186);
                *((_QWORD *)a2 + 1) = v187;
                v189 = v188 != 0;
              }
              *((_BYTE *)this + 181) = v189;
              goto LABEL_377;
            case 1009:
              *(_QWORD *)v8 |= 0x400000000uLL;
              v190 = *((_QWORD *)a2 + 1);
              if (v190 >= *((_QWORD *)a2 + 2))
              {
                v193 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v191 = v190 + 1;
                v192 = *(unsigned __int8 *)(*(_QWORD *)a2 + v190);
                *((_QWORD *)a2 + 1) = v191;
                v193 = v192 != 0;
              }
              *((_BYTE *)this + 157) = v193;
              goto LABEL_377;
            case 1010:
              v194 = v8[10];
              *((_WORD *)v8 + 4) |= 0x400u;
              v8[10] = v194;
              v195 = *((_QWORD *)a2 + 1);
              if (v195 >= *((_QWORD *)a2 + 2))
              {
                v198 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v196 = v195 + 1;
                v197 = *(unsigned __int8 *)(*(_QWORD *)a2 + v195);
                *((_QWORD *)a2 + 1) = v196;
                v198 = v197 != 0;
              }
              *((_BYTE *)this + 197) = v198;
              goto LABEL_377;
            case 1011:
              *(_QWORD *)v8 |= 0x40000000000uLL;
              v199 = *((_QWORD *)a2 + 1);
              if (v199 >= *((_QWORD *)a2 + 2))
              {
                v202 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v200 = v199 + 1;
                v201 = *(unsigned __int8 *)(*(_QWORD *)a2 + v199);
                *((_QWORD *)a2 + 1) = v200;
                v202 = v201 != 0;
              }
              *((_BYTE *)this + 165) = v202;
              goto LABEL_377;
            case 1012:
              *(_QWORD *)v8 |= 0x4000000000000uLL;
              v203 = *((_QWORD *)a2 + 1);
              if (v203 >= *((_QWORD *)a2 + 2))
              {
                v206 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v204 = v203 + 1;
                v205 = *(unsigned __int8 *)(*(_QWORD *)a2 + v203);
                *((_QWORD *)a2 + 1) = v204;
                v206 = v205 != 0;
              }
              *((_BYTE *)this + 173) = v206;
              goto LABEL_377;
            case 1013:
              v207 = v8[10];
              *((_WORD *)v8 + 4) |= 8u;
              v8[10] = v207;
              v208 = *((_QWORD *)a2 + 1);
              if (v208 >= *((_QWORD *)a2 + 2))
              {
                v211 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v209 = v208 + 1;
                v210 = *(unsigned __int8 *)(*(_QWORD *)a2 + v208);
                *((_QWORD *)a2 + 1) = v209;
                v211 = v210 != 0;
              }
              *((_BYTE *)this + 190) = v211;
              goto LABEL_377;
            case 1014:
              *(_QWORD *)v8 |= 0x40000uLL;
              v212 = *((_QWORD *)a2 + 1);
              if (v212 > 0xFFFFFFFFFFFFFFFBLL || v212 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_231;
              *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v212);
              goto LABEL_376;
            case 1015:
              *(_QWORD *)v8 |= 0x400uLL;
              v213 = *((_QWORD *)a2 + 1);
              if (v213 > 0xFFFFFFFFFFFFFFFBLL || v213 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_231;
              *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v213);
              goto LABEL_376;
            case 1016:
              *(_QWORD *)v8 |= 0x40000000uLL;
              v214 = *((_QWORD *)a2 + 1);
              if (v214 > 0xFFFFFFFFFFFFFFFBLL || v214 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_231;
              *((_DWORD *)this + 36) = *(_DWORD *)(*(_QWORD *)a2 + v214);
              goto LABEL_376;
            case 1017:
              *(_QWORD *)v8 |= 0x4000000000000000uLL;
              v215 = *((_QWORD *)a2 + 1);
              if (v215 >= *((_QWORD *)a2 + 2))
              {
                v218 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v216 = v215 + 1;
                v217 = *(unsigned __int8 *)(*(_QWORD *)a2 + v215);
                *((_QWORD *)a2 + 1) = v216;
                v218 = v217 != 0;
              }
              *((_BYTE *)this + 185) = v218;
              goto LABEL_377;
            case 1018:
              *(_QWORD *)v8 |= 0x4000000000uLL;
              v219 = *((_QWORD *)a2 + 1);
              if (v219 >= *((_QWORD *)a2 + 2))
              {
                v222 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v220 = v219 + 1;
                v221 = *(unsigned __int8 *)(*(_QWORD *)a2 + v219);
                *((_QWORD *)a2 + 1) = v220;
                v222 = v221 != 0;
              }
              *((_BYTE *)this + 161) = v222;
              goto LABEL_377;
            case 1019:
              v223 = v8[10];
              *((_WORD *)v8 + 4) |= 0x4000u;
              v8[10] = v223;
              v224 = *((_QWORD *)a2 + 1);
              if (v224 >= *((_QWORD *)a2 + 2))
              {
                v227 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v225 = v224 + 1;
                v226 = *(unsigned __int8 *)(*(_QWORD *)a2 + v224);
                *((_QWORD *)a2 + 1) = v225;
                v227 = v226 != 0;
              }
              *((_BYTE *)this + 201) = v227;
              goto LABEL_377;
            case 1020:
              *(_QWORD *)v8 |= 0x400000000000uLL;
              v228 = *((_QWORD *)a2 + 1);
              if (v228 >= *((_QWORD *)a2 + 2))
              {
                v231 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v229 = v228 + 1;
                v230 = *(unsigned __int8 *)(*(_QWORD *)a2 + v228);
                *((_QWORD *)a2 + 1) = v229;
                v231 = v230 != 0;
              }
              *((_BYTE *)this + 169) = v231;
              goto LABEL_377;
            case 1021:
              *(_QWORD *)v8 |= 0x40000000000000uLL;
              v232 = *((_QWORD *)a2 + 1);
              if (v232 >= *((_QWORD *)a2 + 2))
              {
                v235 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v233 = v232 + 1;
                v234 = *(unsigned __int8 *)(*(_QWORD *)a2 + v232);
                *((_QWORD *)a2 + 1) = v233;
                v235 = v234 != 0;
              }
              *((_BYTE *)this + 177) = v235;
              goto LABEL_377;
            case 1022:
              v236 = v8[10];
              *((_WORD *)v8 + 4) |= 0x40u;
              v8[10] = v236;
              v237 = *((_QWORD *)a2 + 1);
              if (v237 >= *((_QWORD *)a2 + 2))
              {
                v240 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v238 = v237 + 1;
                v239 = *(unsigned __int8 *)(*(_QWORD *)a2 + v237);
                *((_QWORD *)a2 + 1) = v238;
                v240 = v239 != 0;
              }
              *((_BYTE *)this + 193) = v240;
              goto LABEL_377;
            default:
              goto LABEL_20;
          }
          break;
      }
      while (1)
      {
        if (v39 == v38)
        {
          v43 = 0;
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_393;
        }
        v310 = v38 + 1;
        v311 = *(_BYTE *)(v40 + v38);
        *((_QWORD *)a2 + 1) = v310;
        v43 |= (unint64_t)(v311 & 0x7F) << v308;
        if ((v311 & 0x80) == 0)
          break;
        v308 += 7;
        v38 = v310;
        v15 = v309++ > 8;
        if (v15)
          goto LABEL_264;
      }
      if (*((_BYTE *)a2 + 24))
        v43 = 0;
LABEL_393:
      *((_QWORD *)this + 2) = v43;
    }
LABEL_377:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v16 = 0;
  v17 = 0;
  v12 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v18 = v2 + 1;
    v19 = *(_BYTE *)(v9 + v2);
    *((_QWORD *)a2 + 1) = v18;
    v12 |= (unint64_t)(v19 & 0x7F) << v16;
    if ((v19 & 0x80) == 0)
      goto LABEL_22;
    v16 += 7;
    v2 = v18;
    v15 = v17++ > 8;
  }
  while (!v15);
LABEL_20:
  result = PB::Reader::skip(a2);
  if ((_DWORD)result)
    goto LABEL_377;
  return result;
}

uint64_t CMMsl::KappaRemoteAudioResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;

  v3 = this;
  v4 = *(_QWORD *)(this + 204);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
    v4 = *(_QWORD *)(v3 + 204);
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = *(unsigned __int16 *)(this + 212) | (*(unsigned __int8 *)(this + 214) << 16);
  if ((v4 & 0x10) != 0)
  {
LABEL_5:
    this = PB::Writer::writeVarInt(a2);
    v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
    v4 = *(_QWORD *)(v3 + 204);
  }
LABEL_6:
  if ((v5 & 2) != 0)
  {
    this = PB::Writer::write(a2);
    v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
    v4 = *(_QWORD *)(v3 + 204);
    if ((v4 & 0x200000) == 0)
    {
LABEL_8:
      if ((v4 & 0x2000) == 0)
        goto LABEL_9;
      goto LABEL_88;
    }
  }
  else if ((v4 & 0x200000) == 0)
  {
    goto LABEL_8;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 108));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x2000) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_89;
  }
LABEL_88:
  this = PB::Writer::write(a2, *(float *)(v3 + 76));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_11;
    goto LABEL_90;
  }
LABEL_89:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x200000000000000) == 0)
      goto LABEL_12;
    goto LABEL_91;
  }
LABEL_90:
  this = PB::Writer::write(a2, *(float *)(v3 + 124));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x200000000000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x200000000) == 0)
      goto LABEL_13;
    goto LABEL_92;
  }
LABEL_91:
  this = PB::Writer::write(a2);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_13:
    if ((v5 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_93;
  }
LABEL_92:
  this = PB::Writer::write(a2);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x200) == 0)
  {
LABEL_14:
    if ((v4 & 0x20000000000) == 0)
      goto LABEL_15;
    goto LABEL_94;
  }
LABEL_93:
  this = PB::Writer::write(a2);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x20000000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x2000000000000) == 0)
      goto LABEL_16;
    goto LABEL_95;
  }
LABEL_94:
  this = PB::Writer::write(a2);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x2000000000000) == 0)
  {
LABEL_16:
    if ((v5 & 4) == 0)
      goto LABEL_17;
    goto LABEL_96;
  }
LABEL_95:
  this = PB::Writer::write(a2);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 4) == 0)
  {
LABEL_17:
    if ((v4 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_97;
  }
LABEL_96:
  this = PB::Writer::write(a2);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x20000) == 0)
  {
LABEL_18:
    if ((v4 & 0x200) == 0)
      goto LABEL_19;
    goto LABEL_98;
  }
LABEL_97:
  this = PB::Writer::write(a2, *(float *)(v3 + 92));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x200) == 0)
  {
LABEL_19:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_20;
    goto LABEL_99;
  }
LABEL_98:
  this = PB::Writer::write(a2, *(float *)(v3 + 60));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_20:
    if ((v4 & 0x2000000000000000) == 0)
      goto LABEL_21;
    goto LABEL_100;
  }
LABEL_99:
  this = PB::Writer::write(a2, *(float *)(v3 + 140));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x2000000000000000) == 0)
  {
LABEL_21:
    if ((v4 & 0x2000000000) == 0)
      goto LABEL_22;
    goto LABEL_101;
  }
LABEL_100:
  this = PB::Writer::write(a2);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x2000000000) == 0)
  {
LABEL_22:
    if ((v5 & 0x2000) == 0)
      goto LABEL_23;
    goto LABEL_102;
  }
LABEL_101:
  this = PB::Writer::write(a2);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x2000) == 0)
  {
LABEL_23:
    if ((v4 & 0x200000000000) == 0)
      goto LABEL_24;
    goto LABEL_103;
  }
LABEL_102:
  this = PB::Writer::write(a2);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x200000000000) == 0)
  {
LABEL_24:
    if ((v4 & 0x20000000000000) == 0)
      goto LABEL_25;
    goto LABEL_104;
  }
LABEL_103:
  this = PB::Writer::write(a2);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x20000000000000) == 0)
  {
LABEL_25:
    if ((v4 & 2) == 0)
      goto LABEL_26;
    goto LABEL_105;
  }
LABEL_104:
  this = PB::Writer::write(a2);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 2) == 0)
  {
LABEL_26:
    if ((v4 & 0x400000) == 0)
      goto LABEL_27;
    goto LABEL_106;
  }
LABEL_105:
  this = PB::Writer::writeVarInt(a2);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x400000) == 0)
  {
LABEL_27:
    if ((v4 & 0x4000) == 0)
      goto LABEL_28;
    goto LABEL_107;
  }
LABEL_106:
  this = PB::Writer::write(a2, *(float *)(v3 + 112));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x4000) == 0)
  {
LABEL_28:
    if ((v4 & 0x40) == 0)
      goto LABEL_29;
    goto LABEL_108;
  }
LABEL_107:
  this = PB::Writer::write(a2, *(float *)(v3 + 80));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x40) == 0)
  {
LABEL_29:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_30;
    goto LABEL_109;
  }
LABEL_108:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_30:
    if ((v4 & 0x400000000000000) == 0)
      goto LABEL_31;
    goto LABEL_110;
  }
LABEL_109:
  this = PB::Writer::write(a2, *(float *)(v3 + 128));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x400000000000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x400000000) == 0)
      goto LABEL_32;
    goto LABEL_111;
  }
LABEL_110:
  this = PB::Writer::write(a2);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x400) == 0)
      goto LABEL_33;
    goto LABEL_112;
  }
LABEL_111:
  this = PB::Writer::write(a2);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x400) == 0)
  {
LABEL_33:
    if ((v4 & 0x40000000000) == 0)
      goto LABEL_34;
    goto LABEL_113;
  }
LABEL_112:
  this = PB::Writer::write(a2);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x40000000000) == 0)
  {
LABEL_34:
    if ((v4 & 0x4000000000000) == 0)
      goto LABEL_35;
    goto LABEL_114;
  }
LABEL_113:
  this = PB::Writer::write(a2);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x4000000000000) == 0)
  {
LABEL_35:
    if ((v5 & 8) == 0)
      goto LABEL_36;
    goto LABEL_115;
  }
LABEL_114:
  this = PB::Writer::write(a2);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 8) == 0)
  {
LABEL_36:
    if ((v4 & 0x40000) == 0)
      goto LABEL_37;
    goto LABEL_116;
  }
LABEL_115:
  this = PB::Writer::write(a2);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x40000) == 0)
  {
LABEL_37:
    if ((v4 & 0x400) == 0)
      goto LABEL_38;
    goto LABEL_117;
  }
LABEL_116:
  this = PB::Writer::write(a2, *(float *)(v3 + 96));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x400) == 0)
  {
LABEL_38:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_39;
    goto LABEL_118;
  }
LABEL_117:
  this = PB::Writer::write(a2, *(float *)(v3 + 64));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_39:
    if ((v4 & 0x4000000000000000) == 0)
      goto LABEL_40;
    goto LABEL_119;
  }
LABEL_118:
  this = PB::Writer::write(a2, *(float *)(v3 + 144));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x4000000000000000) == 0)
  {
LABEL_40:
    if ((v4 & 0x4000000000) == 0)
      goto LABEL_41;
    goto LABEL_120;
  }
LABEL_119:
  this = PB::Writer::write(a2);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x4000000000) == 0)
  {
LABEL_41:
    if ((v5 & 0x4000) == 0)
      goto LABEL_42;
    goto LABEL_121;
  }
LABEL_120:
  this = PB::Writer::write(a2);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x4000) == 0)
  {
LABEL_42:
    if ((v4 & 0x400000000000) == 0)
      goto LABEL_43;
    goto LABEL_122;
  }
LABEL_121:
  this = PB::Writer::write(a2);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x400000000000) == 0)
  {
LABEL_43:
    if ((v4 & 0x40000000000000) == 0)
      goto LABEL_44;
    goto LABEL_123;
  }
LABEL_122:
  this = PB::Writer::write(a2);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x40000000000000) == 0)
  {
LABEL_44:
    if ((v5 & 0x40) == 0)
      goto LABEL_45;
    goto LABEL_124;
  }
LABEL_123:
  this = PB::Writer::write(a2);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x40) == 0)
  {
LABEL_45:
    if ((v4 & 4) == 0)
      goto LABEL_46;
    goto LABEL_125;
  }
LABEL_124:
  this = PB::Writer::write(a2);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 4) == 0)
  {
LABEL_46:
    if ((v4 & 0x800000) == 0)
      goto LABEL_47;
    goto LABEL_126;
  }
LABEL_125:
  this = PB::Writer::writeVarInt(a2);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x800000) == 0)
  {
LABEL_47:
    if ((v4 & 0x8000) == 0)
      goto LABEL_48;
    goto LABEL_127;
  }
LABEL_126:
  this = PB::Writer::write(a2, *(float *)(v3 + 116));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x8000) == 0)
  {
LABEL_48:
    if ((v4 & 0x80) == 0)
      goto LABEL_49;
    goto LABEL_128;
  }
LABEL_127:
  this = PB::Writer::write(a2, *(float *)(v3 + 84));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x80) == 0)
  {
LABEL_49:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_50;
    goto LABEL_129;
  }
LABEL_128:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_50:
    if ((v4 & 0x800000000000000) == 0)
      goto LABEL_51;
    goto LABEL_130;
  }
LABEL_129:
  this = PB::Writer::write(a2, *(float *)(v3 + 132));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x800000000000000) == 0)
  {
LABEL_51:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_52;
    goto LABEL_131;
  }
LABEL_130:
  this = PB::Writer::write(a2);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_52:
    if ((v5 & 0x800) == 0)
      goto LABEL_53;
    goto LABEL_132;
  }
LABEL_131:
  this = PB::Writer::write(a2);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x800) == 0)
  {
LABEL_53:
    if ((v4 & 0x80000000000) == 0)
      goto LABEL_54;
    goto LABEL_133;
  }
LABEL_132:
  this = PB::Writer::write(a2);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x80000000000) == 0)
  {
LABEL_54:
    if ((v4 & 0x8000000000000) == 0)
      goto LABEL_55;
    goto LABEL_134;
  }
LABEL_133:
  this = PB::Writer::write(a2);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x8000000000000) == 0)
  {
LABEL_55:
    if ((v5 & 0x10) == 0)
      goto LABEL_56;
    goto LABEL_135;
  }
LABEL_134:
  this = PB::Writer::write(a2);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x10) == 0)
  {
LABEL_56:
    if ((v4 & 0x80000) == 0)
      goto LABEL_57;
    goto LABEL_136;
  }
LABEL_135:
  this = PB::Writer::write(a2);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x80000) == 0)
  {
LABEL_57:
    if ((v4 & 0x800) == 0)
      goto LABEL_58;
    goto LABEL_137;
  }
LABEL_136:
  this = PB::Writer::write(a2, *(float *)(v3 + 100));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x800) == 0)
  {
LABEL_58:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_59;
    goto LABEL_138;
  }
LABEL_137:
  this = PB::Writer::write(a2, *(float *)(v3 + 68));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_59:
    if ((v4 & 0x8000000000000000) == 0)
      goto LABEL_60;
    goto LABEL_139;
  }
LABEL_138:
  this = PB::Writer::write(a2, *(float *)(v3 + 148));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x8000000000000000) == 0)
  {
LABEL_60:
    if ((v4 & 0x8000000000) == 0)
      goto LABEL_61;
    goto LABEL_140;
  }
LABEL_139:
  this = PB::Writer::write(a2);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x8000000000) == 0)
  {
LABEL_61:
    if ((v5 & 0x8000) == 0)
      goto LABEL_62;
    goto LABEL_141;
  }
LABEL_140:
  this = PB::Writer::write(a2);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x8000) == 0)
  {
LABEL_62:
    if ((v4 & 0x800000000000) == 0)
      goto LABEL_63;
    goto LABEL_142;
  }
LABEL_141:
  this = PB::Writer::write(a2);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x800000000000) == 0)
  {
LABEL_63:
    if ((v4 & 0x80000000000000) == 0)
      goto LABEL_64;
    goto LABEL_143;
  }
LABEL_142:
  this = PB::Writer::write(a2);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x80000000000000) == 0)
  {
LABEL_64:
    if ((v5 & 0x80) == 0)
      goto LABEL_65;
    goto LABEL_144;
  }
LABEL_143:
  this = PB::Writer::write(a2);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x80) == 0)
  {
LABEL_65:
    if ((v4 & 8) == 0)
      goto LABEL_66;
    goto LABEL_145;
  }
LABEL_144:
  this = PB::Writer::write(a2);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 8) == 0)
  {
LABEL_66:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_67;
    goto LABEL_146;
  }
LABEL_145:
  this = PB::Writer::writeVarInt(a2);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_67:
    if ((v4 & 0x10000) == 0)
      goto LABEL_68;
    goto LABEL_147;
  }
LABEL_146:
  this = PB::Writer::write(a2, *(float *)(v3 + 120));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x10000) == 0)
  {
LABEL_68:
    if ((v4 & 0x100) == 0)
      goto LABEL_69;
    goto LABEL_148;
  }
LABEL_147:
  this = PB::Writer::write(a2, *(float *)(v3 + 88));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x100) == 0)
  {
LABEL_69:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_70;
    goto LABEL_149;
  }
LABEL_148:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_70:
    if ((v4 & 0x1000000000000000) == 0)
      goto LABEL_71;
    goto LABEL_150;
  }
LABEL_149:
  this = PB::Writer::write(a2, *(float *)(v3 + 136));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x1000000000000000) == 0)
  {
LABEL_71:
    if ((v4 & 0x1000000000) == 0)
      goto LABEL_72;
    goto LABEL_151;
  }
LABEL_150:
  this = PB::Writer::write(a2);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x1000000000) == 0)
  {
LABEL_72:
    if ((v5 & 0x1000) == 0)
      goto LABEL_73;
    goto LABEL_152;
  }
LABEL_151:
  this = PB::Writer::write(a2);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x1000) == 0)
  {
LABEL_73:
    if ((v4 & 0x100000000000) == 0)
      goto LABEL_74;
    goto LABEL_153;
  }
LABEL_152:
  this = PB::Writer::write(a2);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x100000000000) == 0)
  {
LABEL_74:
    if ((v4 & 0x10000000000000) == 0)
      goto LABEL_75;
    goto LABEL_154;
  }
LABEL_153:
  this = PB::Writer::write(a2);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x10000000000000) == 0)
  {
LABEL_75:
    if ((v5 & 0x20) == 0)
      goto LABEL_76;
    goto LABEL_155;
  }
LABEL_154:
  this = PB::Writer::write(a2);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x20) == 0)
  {
LABEL_76:
    if ((v4 & 0x100000) == 0)
      goto LABEL_77;
    goto LABEL_156;
  }
LABEL_155:
  this = PB::Writer::write(a2);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x100000) == 0)
  {
LABEL_77:
    if ((v4 & 0x1000) == 0)
      goto LABEL_78;
    goto LABEL_157;
  }
LABEL_156:
  this = PB::Writer::write(a2, *(float *)(v3 + 104));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x1000) == 0)
  {
LABEL_78:
    if ((v4 & 0x100000000) == 0)
      goto LABEL_79;
    goto LABEL_158;
  }
LABEL_157:
  this = PB::Writer::write(a2, *(float *)(v3 + 72));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_79:
    if ((v5 & 1) == 0)
      goto LABEL_80;
    goto LABEL_159;
  }
LABEL_158:
  this = PB::Writer::write(a2, *(float *)(v3 + 152));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 1) == 0)
  {
LABEL_80:
    if ((v4 & 0x10000000000) == 0)
      goto LABEL_81;
    goto LABEL_160;
  }
LABEL_159:
  this = PB::Writer::write(a2);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x10000000000) == 0)
  {
LABEL_81:
    if ((v5 & 0x10000) == 0)
      goto LABEL_82;
    goto LABEL_161;
  }
LABEL_160:
  this = PB::Writer::write(a2);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v5 & 0x10000) == 0)
  {
LABEL_82:
    if ((v4 & 0x1000000000000) == 0)
      goto LABEL_83;
    goto LABEL_162;
  }
LABEL_161:
  this = PB::Writer::write(a2);
  LOWORD(v5) = *(_WORD *)(v3 + 212);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x1000000000000) == 0)
  {
LABEL_83:
    if ((v4 & 0x100000000000000) == 0)
      goto LABEL_84;
    goto LABEL_163;
  }
LABEL_162:
  this = PB::Writer::write(a2);
  LOWORD(v5) = *(_WORD *)(v3 + 212);
  if ((*(_QWORD *)(v3 + 204) & 0x100000000000000) == 0)
  {
LABEL_84:
    if ((v5 & 0x100) == 0)
      return this;
    return PB::Writer::write(a2);
  }
LABEL_163:
  this = PB::Writer::write(a2);
  if ((*(_WORD *)(v3 + 212) & 0x100) != 0)
    return PB::Writer::write(a2);
  return this;
}

uint64_t CMMsl::KappaRemoteAudioResult::hash_value(CMMsl::KappaRemoteAudioResult *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  float v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  float v45;
  uint64_t v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float v55;
  uint64_t v56;
  float v57;
  uint64_t v58;
  float v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  float v66;
  uint64_t v67;
  float v68;
  uint64_t v69;
  float v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;

  v1 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v2 = *(_QWORD *)((char *)this + 204);
  if ((v2 & 1) != 0)
  {
    v3 = *((_QWORD *)this + 1);
    if ((v2 & 0x10) != 0)
    {
LABEL_3:
      v131 = *((int *)this + 10);
      if ((*((_WORD *)this + 106) & 2) != 0)
        goto LABEL_4;
      goto LABEL_150;
    }
  }
  else
  {
    v3 = 0;
    if ((v2 & 0x10) != 0)
      goto LABEL_3;
  }
  v131 = 0;
  if ((*((_WORD *)this + 106) & 2) != 0)
  {
LABEL_4:
    v130 = *((unsigned __int8 *)this + 188);
    if ((v2 & 0x200000) != 0)
      goto LABEL_5;
LABEL_151:
    v129 = 0;
    if ((*((_WORD *)this + 106) & 4) != 0)
      goto LABEL_8;
    goto LABEL_152;
  }
LABEL_150:
  v130 = 0;
  if ((v2 & 0x200000) == 0)
    goto LABEL_151;
LABEL_5:
  v4 = *((float *)this + 27);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  v129 = v5;
  if ((*((_WORD *)this + 106) & 4) != 0)
  {
LABEL_8:
    v128 = *((unsigned __int8 *)this + 189);
    if ((v2 & 2) != 0)
      goto LABEL_9;
    goto LABEL_153;
  }
LABEL_152:
  v128 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_9:
    v127 = *((_QWORD *)this + 2);
    if ((v2 & 0x400000) != 0)
      goto LABEL_10;
LABEL_154:
    v126 = 0;
    if ((v2 & 0x4000) != 0)
      goto LABEL_13;
LABEL_155:
    v125 = 0;
    if ((v2 & 0x40) != 0)
      goto LABEL_16;
LABEL_156:
    v124 = 0;
    if ((v2 & 0x4000000) != 0)
      goto LABEL_19;
LABEL_157:
    v123 = 0;
    if ((v2 & 0x400000000000000) != 0)
      goto LABEL_22;
    goto LABEL_158;
  }
LABEL_153:
  v127 = 0;
  if ((v2 & 0x400000) == 0)
    goto LABEL_154;
LABEL_10:
  v6 = *((float *)this + 28);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  v126 = v7;
  if ((v2 & 0x4000) == 0)
    goto LABEL_155;
LABEL_13:
  v8 = *((float *)this + 20);
  v9 = LODWORD(v8);
  if (v8 == 0.0)
    v9 = 0;
  v125 = v9;
  if ((v2 & 0x40) == 0)
    goto LABEL_156;
LABEL_16:
  v10 = *((float *)this + 12);
  v11 = LODWORD(v10);
  if (v10 == 0.0)
    v11 = 0;
  v124 = v11;
  if ((v2 & 0x4000000) == 0)
    goto LABEL_157;
LABEL_19:
  v12 = *((float *)this + 32);
  v13 = LODWORD(v12);
  if (v12 == 0.0)
    v13 = 0;
  v123 = v13;
  if ((v2 & 0x400000000000000) != 0)
  {
LABEL_22:
    v122 = *((unsigned __int8 *)this + 181);
    if ((v2 & 0x400000000) != 0)
      goto LABEL_23;
    goto LABEL_159;
  }
LABEL_158:
  v122 = 0;
  if ((v2 & 0x400000000) != 0)
  {
LABEL_23:
    v121 = *((unsigned __int8 *)this + 157);
    if ((*((_WORD *)this + 106) & 0x400) != 0)
      goto LABEL_24;
    goto LABEL_160;
  }
LABEL_159:
  v121 = 0;
  if ((*((_WORD *)this + 106) & 0x400) != 0)
  {
LABEL_24:
    v120 = *((unsigned __int8 *)this + 197);
    if ((v2 & 0x40000000000) != 0)
      goto LABEL_25;
    goto LABEL_161;
  }
LABEL_160:
  v120 = 0;
  if ((v2 & 0x40000000000) != 0)
  {
LABEL_25:
    v119 = *((unsigned __int8 *)this + 165);
    if ((v2 & 0x4000000000000) != 0)
      goto LABEL_26;
    goto LABEL_162;
  }
LABEL_161:
  v119 = 0;
  if ((v2 & 0x4000000000000) != 0)
  {
LABEL_26:
    v118 = *((unsigned __int8 *)this + 173);
    if ((*((_WORD *)this + 106) & 8) != 0)
      goto LABEL_27;
    goto LABEL_163;
  }
LABEL_162:
  v118 = 0;
  if ((*((_WORD *)this + 106) & 8) != 0)
  {
LABEL_27:
    v117 = *((unsigned __int8 *)this + 190);
    if ((v2 & 0x40000) != 0)
      goto LABEL_28;
LABEL_164:
    v116 = 0;
    if ((v2 & 0x400) != 0)
      goto LABEL_31;
LABEL_165:
    v115 = 0;
    if ((v2 & 0x40000000) != 0)
      goto LABEL_34;
LABEL_166:
    v114 = 0;
    if ((v2 & 0x4000000000000000) != 0)
      goto LABEL_37;
    goto LABEL_167;
  }
LABEL_163:
  v117 = 0;
  if ((v2 & 0x40000) == 0)
    goto LABEL_164;
LABEL_28:
  v14 = *((float *)this + 24);
  v15 = LODWORD(v14);
  if (v14 == 0.0)
    v15 = 0;
  v116 = v15;
  if ((v2 & 0x400) == 0)
    goto LABEL_165;
LABEL_31:
  v16 = *((float *)this + 16);
  v17 = LODWORD(v16);
  if (v16 == 0.0)
    v17 = 0;
  v115 = v17;
  if ((v2 & 0x40000000) == 0)
    goto LABEL_166;
LABEL_34:
  v18 = *((float *)this + 36);
  v19 = LODWORD(v18);
  if (v18 == 0.0)
    v19 = 0;
  v114 = v19;
  if ((v2 & 0x4000000000000000) != 0)
  {
LABEL_37:
    v113 = *((unsigned __int8 *)this + 185);
    if ((v2 & 0x4000000000) != 0)
      goto LABEL_38;
    goto LABEL_168;
  }
LABEL_167:
  v113 = 0;
  if ((v2 & 0x4000000000) != 0)
  {
LABEL_38:
    v112 = *((unsigned __int8 *)this + 161);
    if ((*((_WORD *)this + 106) & 0x4000) != 0)
      goto LABEL_39;
    goto LABEL_169;
  }
LABEL_168:
  v112 = 0;
  if ((*((_WORD *)this + 106) & 0x4000) != 0)
  {
LABEL_39:
    v111 = *((unsigned __int8 *)this + 201);
    if ((v2 & 0x400000000000) != 0)
      goto LABEL_40;
    goto LABEL_170;
  }
LABEL_169:
  v111 = 0;
  if ((v2 & 0x400000000000) != 0)
  {
LABEL_40:
    v110 = *((unsigned __int8 *)this + 169);
    if ((v2 & 0x40000000000000) != 0)
      goto LABEL_41;
    goto LABEL_171;
  }
LABEL_170:
  v110 = 0;
  if ((v2 & 0x40000000000000) != 0)
  {
LABEL_41:
    v109 = *((unsigned __int8 *)this + 177);
    if ((*((_WORD *)this + 106) & 0x40) != 0)
      goto LABEL_42;
    goto LABEL_172;
  }
LABEL_171:
  v109 = 0;
  if ((*((_WORD *)this + 106) & 0x40) != 0)
  {
LABEL_42:
    v108 = *((unsigned __int8 *)this + 193);
    if ((v2 & 4) != 0)
      goto LABEL_43;
    goto LABEL_173;
  }
LABEL_172:
  v108 = 0;
  if ((v2 & 4) != 0)
  {
LABEL_43:
    v107 = *((_QWORD *)this + 3);
    if ((v2 & 0x800000) != 0)
      goto LABEL_44;
LABEL_174:
    v106 = 0;
    if ((v2 & 0x8000) != 0)
      goto LABEL_47;
LABEL_175:
    v105 = 0;
    if ((v2 & 0x80) != 0)
      goto LABEL_50;
LABEL_176:
    v104 = 0;
    if ((v2 & 0x8000000) != 0)
      goto LABEL_53;
LABEL_177:
    v103 = 0;
    if ((v2 & 0x800000000000000) != 0)
      goto LABEL_56;
    goto LABEL_178;
  }
LABEL_173:
  v107 = 0;
  if ((v2 & 0x800000) == 0)
    goto LABEL_174;
LABEL_44:
  v20 = *((float *)this + 29);
  v21 = LODWORD(v20);
  if (v20 == 0.0)
    v21 = 0;
  v106 = v21;
  if ((v2 & 0x8000) == 0)
    goto LABEL_175;
LABEL_47:
  v22 = *((float *)this + 21);
  v23 = LODWORD(v22);
  if (v22 == 0.0)
    v23 = 0;
  v105 = v23;
  if ((v2 & 0x80) == 0)
    goto LABEL_176;
LABEL_50:
  v24 = *((float *)this + 13);
  v25 = LODWORD(v24);
  if (v24 == 0.0)
    v25 = 0;
  v104 = v25;
  if ((v2 & 0x8000000) == 0)
    goto LABEL_177;
LABEL_53:
  v26 = *((float *)this + 33);
  v27 = LODWORD(v26);
  if (v26 == 0.0)
    v27 = 0;
  v103 = v27;
  if ((v2 & 0x800000000000000) != 0)
  {
LABEL_56:
    v102 = *((unsigned __int8 *)this + 182);
    if ((v2 & 0x800000000) != 0)
      goto LABEL_57;
    goto LABEL_179;
  }
LABEL_178:
  v102 = 0;
  if ((v2 & 0x800000000) != 0)
  {
LABEL_57:
    v101 = *((unsigned __int8 *)this + 158);
    if ((*((_WORD *)this + 106) & 0x800) != 0)
      goto LABEL_58;
    goto LABEL_180;
  }
LABEL_179:
  v101 = 0;
  if ((*((_WORD *)this + 106) & 0x800) != 0)
  {
LABEL_58:
    v100 = *((unsigned __int8 *)this + 198);
    if ((v2 & 0x80000000000) != 0)
      goto LABEL_59;
    goto LABEL_181;
  }
LABEL_180:
  v100 = 0;
  if ((v2 & 0x80000000000) != 0)
  {
LABEL_59:
    v99 = *((unsigned __int8 *)this + 166);
    if ((v2 & 0x8000000000000) != 0)
      goto LABEL_60;
    goto LABEL_182;
  }
LABEL_181:
  v99 = 0;
  if ((v2 & 0x8000000000000) != 0)
  {
LABEL_60:
    v98 = *((unsigned __int8 *)this + 174);
    if ((*((_WORD *)this + 106) & 0x10) != 0)
      goto LABEL_61;
    goto LABEL_183;
  }
LABEL_182:
  v98 = 0;
  if ((*((_WORD *)this + 106) & 0x10) != 0)
  {
LABEL_61:
    v97 = *((unsigned __int8 *)this + 191);
    if ((v2 & 0x80000) != 0)
      goto LABEL_62;
LABEL_184:
    v96 = 0;
    if ((v2 & 0x800) != 0)
      goto LABEL_65;
LABEL_185:
    v95 = 0;
    if ((v2 & 0x80000000) != 0)
      goto LABEL_68;
LABEL_186:
    v94 = 0;
    if (v2 < 0)
      goto LABEL_71;
    goto LABEL_187;
  }
LABEL_183:
  v97 = 0;
  if ((v2 & 0x80000) == 0)
    goto LABEL_184;
LABEL_62:
  v28 = *((float *)this + 25);
  v29 = LODWORD(v28);
  if (v28 == 0.0)
    v29 = 0;
  v96 = v29;
  if ((v2 & 0x800) == 0)
    goto LABEL_185;
LABEL_65:
  v30 = *((float *)this + 17);
  v31 = LODWORD(v30);
  if (v30 == 0.0)
    v31 = 0;
  v95 = v31;
  if ((v2 & 0x80000000) == 0)
    goto LABEL_186;
LABEL_68:
  v32 = *((float *)this + 37);
  v33 = LODWORD(v32);
  if (v32 == 0.0)
    v33 = 0;
  v94 = v33;
  if (v2 < 0)
  {
LABEL_71:
    v93 = *((unsigned __int8 *)this + 186);
    if ((v2 & 0x8000000000) != 0)
      goto LABEL_72;
    goto LABEL_188;
  }
LABEL_187:
  v93 = 0;
  if ((v2 & 0x8000000000) != 0)
  {
LABEL_72:
    v92 = *((unsigned __int8 *)this + 162);
    if ((*((_WORD *)this + 106) & 0x8000) != 0)
      goto LABEL_73;
    goto LABEL_189;
  }
LABEL_188:
  v92 = 0;
  if ((*((_WORD *)this + 106) & 0x8000) != 0)
  {
LABEL_73:
    v91 = *((unsigned __int8 *)this + 202);
    if ((v2 & 0x800000000000) != 0)
      goto LABEL_74;
    goto LABEL_190;
  }
LABEL_189:
  v91 = 0;
  if ((v2 & 0x800000000000) != 0)
  {
LABEL_74:
    v90 = *((unsigned __int8 *)this + 170);
    if ((v2 & 0x80000000000000) != 0)
      goto LABEL_75;
    goto LABEL_191;
  }
LABEL_190:
  v90 = 0;
  if ((v2 & 0x80000000000000) != 0)
  {
LABEL_75:
    v89 = *((unsigned __int8 *)this + 178);
    if ((*((_WORD *)this + 106) & 0x80) != 0)
      goto LABEL_76;
    goto LABEL_192;
  }
LABEL_191:
  v89 = 0;
  if ((*((_WORD *)this + 106) & 0x80) != 0)
  {
LABEL_76:
    v88 = *((unsigned __int8 *)this + 194);
    if ((v2 & 8) != 0)
      goto LABEL_77;
    goto LABEL_193;
  }
LABEL_192:
  v88 = 0;
  if ((v2 & 8) != 0)
  {
LABEL_77:
    v87 = *((_QWORD *)this + 4);
    if ((v2 & 0x1000000) != 0)
      goto LABEL_78;
LABEL_194:
    v86 = 0;
    if ((v2 & 0x10000) != 0)
      goto LABEL_81;
LABEL_195:
    v85 = 0;
    if ((v2 & 0x100) != 0)
      goto LABEL_84;
LABEL_196:
    v84 = 0;
    if ((v2 & 0x10000000) != 0)
      goto LABEL_87;
LABEL_197:
    v83 = 0;
    if ((v2 & 0x1000000000000000) != 0)
      goto LABEL_90;
    goto LABEL_198;
  }
LABEL_193:
  v87 = 0;
  if ((v2 & 0x1000000) == 0)
    goto LABEL_194;
LABEL_78:
  v34 = *((float *)this + 30);
  v35 = LODWORD(v34);
  if (v34 == 0.0)
    v35 = 0;
  v86 = v35;
  if ((v2 & 0x10000) == 0)
    goto LABEL_195;
LABEL_81:
  v36 = *((float *)this + 22);
  v37 = LODWORD(v36);
  if (v36 == 0.0)
    v37 = 0;
  v85 = v37;
  if ((v2 & 0x100) == 0)
    goto LABEL_196;
LABEL_84:
  v38 = *((float *)this + 14);
  v39 = LODWORD(v38);
  if (v38 == 0.0)
    v39 = 0;
  v84 = v39;
  if ((v2 & 0x10000000) == 0)
    goto LABEL_197;
LABEL_87:
  v40 = *((float *)this + 34);
  v41 = LODWORD(v40);
  if (v40 == 0.0)
    v41 = 0;
  v83 = v41;
  if ((v2 & 0x1000000000000000) != 0)
  {
LABEL_90:
    v82 = *((unsigned __int8 *)this + 183);
    if ((v2 & 0x1000000000) != 0)
      goto LABEL_91;
    goto LABEL_199;
  }
LABEL_198:
  v82 = 0;
  if ((v2 & 0x1000000000) != 0)
  {
LABEL_91:
    v81 = *((unsigned __int8 *)this + 159);
    if ((*((_WORD *)this + 106) & 0x1000) != 0)
      goto LABEL_92;
    goto LABEL_200;
  }
LABEL_199:
  v81 = 0;
  if ((*((_WORD *)this + 106) & 0x1000) != 0)
  {
LABEL_92:
    v80 = *((unsigned __int8 *)this + 199);
    if ((v2 & 0x100000000000) != 0)
      goto LABEL_93;
    goto LABEL_201;
  }
LABEL_200:
  v80 = 0;
  if ((v2 & 0x100000000000) != 0)
  {
LABEL_93:
    v79 = *((unsigned __int8 *)this + 167);
    if ((v2 & 0x10000000000000) != 0)
      goto LABEL_94;
    goto LABEL_202;
  }
LABEL_201:
  v79 = 0;
  if ((v2 & 0x10000000000000) != 0)
  {
LABEL_94:
    v78 = *((unsigned __int8 *)this + 175);
    if ((*((_WORD *)this + 106) & 0x20) != 0)
      goto LABEL_95;
    goto LABEL_203;
  }
LABEL_202:
  v78 = 0;
  if ((*((_WORD *)this + 106) & 0x20) != 0)
  {
LABEL_95:
    v42 = *((unsigned __int8 *)this + 192);
    if ((v2 & 0x100000) != 0)
      goto LABEL_96;
LABEL_204:
    v44 = 0;
    if ((v2 & 0x1000) != 0)
      goto LABEL_100;
LABEL_205:
    v46 = 0;
    if ((v2 & 0x100000000) != 0)
      goto LABEL_104;
LABEL_206:
    v48 = 0;
    if ((*((_WORD *)this + 106) & 1) != 0)
      goto LABEL_108;
    goto LABEL_207;
  }
LABEL_203:
  v42 = 0;
  if ((v2 & 0x100000) == 0)
    goto LABEL_204;
LABEL_96:
  v43 = *((float *)this + 26);
  if (v43 == 0.0)
    v44 = 0;
  else
    v44 = LODWORD(v43);
  if ((v2 & 0x1000) == 0)
    goto LABEL_205;
LABEL_100:
  v45 = *((float *)this + 18);
  if (v45 == 0.0)
    v46 = 0;
  else
    v46 = LODWORD(v45);
  if ((v2 & 0x100000000) == 0)
    goto LABEL_206;
LABEL_104:
  v47 = *((float *)this + 38);
  if (v47 == 0.0)
    v48 = 0;
  else
    v48 = LODWORD(v47);
  if ((*((_WORD *)this + 106) & 1) != 0)
  {
LABEL_108:
    v49 = *((unsigned __int8 *)this + 187);
    if ((v2 & 0x10000000000) != 0)
      goto LABEL_109;
    goto LABEL_208;
  }
LABEL_207:
  v49 = 0;
  if ((v2 & 0x10000000000) != 0)
  {
LABEL_109:
    v50 = *((unsigned __int8 *)this + 163);
    if ((v1 & 0x10000) != 0)
      goto LABEL_110;
    goto LABEL_209;
  }
LABEL_208:
  v50 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_110:
    v51 = *((unsigned __int8 *)this + 203);
    if ((v2 & 0x1000000000000) != 0)
      goto LABEL_111;
    goto LABEL_210;
  }
LABEL_209:
  v51 = 0;
  if ((v2 & 0x1000000000000) != 0)
  {
LABEL_111:
    v52 = *((unsigned __int8 *)this + 171);
    if ((v2 & 0x100000000000000) != 0)
      goto LABEL_112;
    goto LABEL_211;
  }
LABEL_210:
  v52 = 0;
  if ((v2 & 0x100000000000000) != 0)
  {
LABEL_112:
    v53 = *((unsigned __int8 *)this + 179);
    if ((*((_WORD *)this + 106) & 0x100) != 0)
      goto LABEL_113;
    goto LABEL_212;
  }
LABEL_211:
  v53 = 0;
  if ((*((_WORD *)this + 106) & 0x100) != 0)
  {
LABEL_113:
    v54 = *((unsigned __int8 *)this + 195);
    if ((v2 & 0x2000) != 0)
      goto LABEL_114;
LABEL_213:
    v56 = 0;
    if ((v2 & 0x20) != 0)
      goto LABEL_118;
LABEL_214:
    v58 = 0;
    if ((v2 & 0x2000000) != 0)
      goto LABEL_122;
LABEL_215:
    v60 = 0;
    if ((v2 & 0x200000000000000) != 0)
      goto LABEL_126;
    goto LABEL_216;
  }
LABEL_212:
  v54 = 0;
  if ((v2 & 0x2000) == 0)
    goto LABEL_213;
LABEL_114:
  v55 = *((float *)this + 19);
  if (v55 == 0.0)
    v56 = 0;
  else
    v56 = LODWORD(v55);
  if ((v2 & 0x20) == 0)
    goto LABEL_214;
LABEL_118:
  v57 = *((float *)this + 11);
  if (v57 == 0.0)
    v58 = 0;
  else
    v58 = LODWORD(v57);
  if ((v2 & 0x2000000) == 0)
    goto LABEL_215;
LABEL_122:
  v59 = *((float *)this + 31);
  if (v59 == 0.0)
    v60 = 0;
  else
    v60 = LODWORD(v59);
  if ((v2 & 0x200000000000000) != 0)
  {
LABEL_126:
    v61 = *((unsigned __int8 *)this + 180);
    if ((v2 & 0x200000000) != 0)
      goto LABEL_127;
    goto LABEL_217;
  }
LABEL_216:
  v61 = 0;
  if ((v2 & 0x200000000) != 0)
  {
LABEL_127:
    v62 = *((unsigned __int8 *)this + 156);
    if ((*((_WORD *)this + 106) & 0x200) != 0)
      goto LABEL_128;
    goto LABEL_218;
  }
LABEL_217:
  v62 = 0;
  if ((*((_WORD *)this + 106) & 0x200) != 0)
  {
LABEL_128:
    v63 = *((unsigned __int8 *)this + 196);
    if ((v2 & 0x20000000000) != 0)
      goto LABEL_129;
    goto LABEL_219;
  }
LABEL_218:
  v63 = 0;
  if ((v2 & 0x20000000000) != 0)
  {
LABEL_129:
    v64 = *((unsigned __int8 *)this + 164);
    if ((v2 & 0x2000000000000) != 0)
      goto LABEL_130;
    goto LABEL_220;
  }
LABEL_219:
  v64 = 0;
  if ((v2 & 0x2000000000000) != 0)
  {
LABEL_130:
    v65 = *((unsigned __int8 *)this + 172);
    if ((v2 & 0x20000) != 0)
      goto LABEL_131;
LABEL_221:
    v67 = 0;
    if ((v2 & 0x200) != 0)
      goto LABEL_135;
LABEL_222:
    v69 = 0;
    if ((v2 & 0x20000000) != 0)
      goto LABEL_139;
LABEL_223:
    v71 = 0;
    if ((v2 & 0x2000000000000000) != 0)
      goto LABEL_143;
    goto LABEL_224;
  }
LABEL_220:
  v65 = 0;
  if ((v2 & 0x20000) == 0)
    goto LABEL_221;
LABEL_131:
  v66 = *((float *)this + 23);
  if (v66 == 0.0)
    v67 = 0;
  else
    v67 = LODWORD(v66);
  if ((v2 & 0x200) == 0)
    goto LABEL_222;
LABEL_135:
  v68 = *((float *)this + 15);
  if (v68 == 0.0)
    v69 = 0;
  else
    v69 = LODWORD(v68);
  if ((v2 & 0x20000000) == 0)
    goto LABEL_223;
LABEL_139:
  v70 = *((float *)this + 35);
  if (v70 == 0.0)
    v71 = 0;
  else
    v71 = LODWORD(v70);
  if ((v2 & 0x2000000000000000) != 0)
  {
LABEL_143:
    v72 = *((unsigned __int8 *)this + 184);
    if ((v2 & 0x2000000000) != 0)
      goto LABEL_144;
    goto LABEL_225;
  }
LABEL_224:
  v72 = 0;
  if ((v2 & 0x2000000000) != 0)
  {
LABEL_144:
    v73 = *((unsigned __int8 *)this + 160);
    if ((*((_WORD *)this + 106) & 0x2000) != 0)
      goto LABEL_145;
    goto LABEL_226;
  }
LABEL_225:
  v73 = 0;
  if ((*((_WORD *)this + 106) & 0x2000) != 0)
  {
LABEL_145:
    v74 = *((unsigned __int8 *)this + 200);
    if ((v2 & 0x200000000000) != 0)
      goto LABEL_146;
LABEL_227:
    v75 = 0;
    if ((v2 & 0x20000000000000) != 0)
      goto LABEL_147;
LABEL_228:
    v76 = 0;
    return v131 ^ v3 ^ v130 ^ v129 ^ v128 ^ v127 ^ v126 ^ v125 ^ v124 ^ v123 ^ v122 ^ v121 ^ v120 ^ v119 ^ v118 ^ v117 ^ v116 ^ v115 ^ v114 ^ v113 ^ v112 ^ v111 ^ v110 ^ v109 ^ v108 ^ v107 ^ v106 ^ v105 ^ v104 ^ v103 ^ v102 ^ v101 ^ v100 ^ v99 ^ v98 ^ v97 ^ v96 ^ v95 ^ v94 ^ v93 ^ v92 ^ v91 ^ v90 ^ v89 ^ v88 ^ v87 ^ v86 ^ v85 ^ v84 ^ v83 ^ v82 ^ v81 ^ v80 ^ v79 ^ v78 ^ v42 ^ v44 ^ v46 ^ v48 ^ v49 ^ v50 ^ v51 ^ v52 ^ v53 ^ v54 ^ v56 ^ v58 ^ v60 ^ v61 ^ v62 ^ v63 ^ v64 ^ v65 ^ v67 ^ v69 ^ v71 ^ v72 ^ v73 ^ v74 ^ v75 ^ v76;
  }
LABEL_226:
  v74 = 0;
  if ((v2 & 0x200000000000) == 0)
    goto LABEL_227;
LABEL_146:
  v75 = *((unsigned __int8 *)this + 168);
  if ((v2 & 0x20000000000000) == 0)
    goto LABEL_228;
LABEL_147:
  v76 = *((unsigned __int8 *)this + 176);
  return v131 ^ v3 ^ v130 ^ v129 ^ v128 ^ v127 ^ v126 ^ v125 ^ v124 ^ v123 ^ v122 ^ v121 ^ v120 ^ v119 ^ v118 ^ v117 ^ v116 ^ v115 ^ v114 ^ v113 ^ v112 ^ v111 ^ v110 ^ v109 ^ v108 ^ v107 ^ v106 ^ v105 ^ v104 ^ v103 ^ v102 ^ v101 ^ v100 ^ v99 ^ v98 ^ v97 ^ v96 ^ v95 ^ v94 ^ v93 ^ v92 ^ v91 ^ v90 ^ v89 ^ v88 ^ v87 ^ v86 ^ v85 ^ v84 ^ v83 ^ v82 ^ v81 ^ v80 ^ v79 ^ v78 ^ v42 ^ v44 ^ v46 ^ v48 ^ v49 ^ v50 ^ v51 ^ v52 ^ v53 ^ v54 ^ v56 ^ v58 ^ v60 ^ v61 ^ v62 ^ v63 ^ v64 ^ v65 ^ v67 ^ v69 ^ v71 ^ v72 ^ v73 ^ v74 ^ v75 ^ v76;
}

void CMMsl::KappaRoads::~KappaRoads(CMMsl::KappaRoads *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::KappaRoads::KappaRoads(uint64_t this, const CMMsl::KappaRoads *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;

  *(_QWORD *)this = &off_25135EBA8;
  *(_DWORD *)(this + 32) = 0;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 2) != 0)
  {
    v4 = *((_QWORD *)a2 + 2);
    v3 = 2;
    *(_BYTE *)(this + 32) = 2;
    *(_QWORD *)(this + 16) = v4;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 32) & 1) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 1);
    v3 |= 1u;
    *(_BYTE *)(this + 32) = v3;
    *(_QWORD *)(this + 8) = v5;
    v2 = *((_BYTE *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0)
      return this;
LABEL_10:
    v7 = *((_DWORD *)a2 + 7);
    *(_BYTE *)(this + 32) = v3 | 8;
    *(_DWORD *)(this + 28) = v7;
    return this;
  }
  v6 = *((_DWORD *)a2 + 6);
  v3 |= 4u;
  *(_BYTE *)(this + 32) = v3;
  *(_DWORD *)(this + 24) = v6;
  if ((*((_BYTE *)a2 + 32) & 8) != 0)
    goto LABEL_10;
  return this;
}

uint64_t CMMsl::KappaRoads::operator=(uint64_t a1, const CMMsl::KappaRoads *a2)
{
  __int128 v3;
  int v4;
  _BYTE v6[8];
  __int128 v7;
  int v8;
  uint64_t v9;

  if ((const CMMsl::KappaRoads *)a1 != a2)
  {
    CMMsl::KappaRoads::KappaRoads((uint64_t)v6, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v3;
    v4 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v8;
    v8 = v4;
    *(_QWORD *)&v3 = *(_QWORD *)(a1 + 28);
    *(_QWORD *)(a1 + 28) = v9;
    v9 = v3;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaRoads *a2, CMMsl::KappaRoads *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  float result;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  LODWORD(v5) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v5;
  return result;
}

float CMMsl::KappaRoads::KappaRoads(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135EBA8;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_25135EBA8;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  return result;
}

uint64_t CMMsl::KappaRoads::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  void (**v8)(CMMsl::KappaRoads *__hidden);
  __int128 v9;
  int v10;
  uint64_t v11;

  if (a1 != a2)
  {
    v8 = &off_25135EBA8;
    v3 = *(_DWORD *)(a2 + 24);
    v4 = *(_QWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 32) = 0;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    v9 = v5;
    LODWORD(v5) = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v3;
    v10 = v5;
    v6 = *(_QWORD *)(a1 + 28);
    *(_QWORD *)(a1 + 28) = v4;
    v11 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::KappaRoads::formatText(CMMsl::KappaRoads *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "distanceToNearestRoad", *((float *)this + 6));
    v5 = *((_BYTE *)this + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "searchTimestamp");
      if ((*((_BYTE *)this + 32) & 2) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "roadClass");
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 2) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "timestamp");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaRoads::readFrom(CMMsl::KappaRoads *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_26;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_21;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_26:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 32) |= 2u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v39 = 0;
          v40 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v21)
            {
              v25 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_78;
            }
            v41 = v21++;
            v42 = *(_BYTE *)(v22 + v41);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v42 & 0x7F) << v39;
            if ((v42 & 0x80) == 0)
              break;
            v39 += 7;
            v14 = v40++ > 8;
            if (v14)
            {
              v25 = 0;
LABEL_77:
              v2 = v41 + 1;
              goto LABEL_78;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v25 = 0;
          goto LABEL_77;
        }
        v23 = 0;
        v24 = 0;
        v25 = 0;
        do
        {
          v2 = v21 + 1;
          *((_QWORD *)a2 + 1) = v21 + 1;
          v26 = *(_BYTE *)(v22 + v21);
          v25 |= (unint64_t)(v26 & 0x7F) << v23;
          if ((v26 & 0x80) == 0)
            goto LABEL_78;
          v23 += 7;
          v21 = v2;
          v14 = v24++ > 8;
        }
        while (!v14);
        v25 = 0;
LABEL_78:
        *((_QWORD *)this + 2) = v25;
        break;
      case 2u:
        *((_BYTE *)this + 32) |= 1u;
        v27 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v28 = *(_QWORD *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v43 = 0;
          v44 = 0;
          v31 = 0;
          if (v2 <= v27)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v27)
            {
              v31 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_83;
            }
            v45 = v27++;
            v46 = *(_BYTE *)(v28 + v45);
            *((_QWORD *)a2 + 1) = v27;
            v31 |= (unint64_t)(v46 & 0x7F) << v43;
            if ((v46 & 0x80) == 0)
              break;
            v43 += 7;
            v14 = v44++ > 8;
            if (v14)
            {
              v31 = 0;
LABEL_82:
              v2 = v45 + 1;
              goto LABEL_83;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v31 = 0;
          goto LABEL_82;
        }
        v29 = 0;
        v30 = 0;
        v31 = 0;
        do
        {
          v2 = v27 + 1;
          *((_QWORD *)a2 + 1) = v27 + 1;
          v32 = *(_BYTE *)(v28 + v27);
          v31 |= (unint64_t)(v32 & 0x7F) << v29;
          if ((v32 & 0x80) == 0)
            goto LABEL_83;
          v29 += 7;
          v27 = v2;
          v14 = v30++ > 8;
        }
        while (!v14);
        v31 = 0;
LABEL_83:
        *((_QWORD *)this + 1) = v31;
        break;
      case 3u:
        *((_BYTE *)this + 32) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 4u:
        *((_BYTE *)this + 32) |= 8u;
        v33 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v34 = *(_QWORD *)a2;
        if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
        {
          v47 = 0;
          v48 = 0;
          v37 = 0;
          if (v2 <= v33)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v33)
            {
              LODWORD(v37) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_88;
            }
            v49 = v33++;
            v50 = *(_BYTE *)(v34 + v49);
            *((_QWORD *)a2 + 1) = v33;
            v37 |= (unint64_t)(v50 & 0x7F) << v47;
            if ((v50 & 0x80) == 0)
              break;
            v47 += 7;
            v14 = v48++ > 8;
            if (v14)
            {
              LODWORD(v37) = 0;
LABEL_87:
              v2 = v49 + 1;
              goto LABEL_88;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v37) = 0;
          goto LABEL_87;
        }
        v35 = 0;
        v36 = 0;
        v37 = 0;
        do
        {
          v2 = v33 + 1;
          *((_QWORD *)a2 + 1) = v33 + 1;
          v38 = *(_BYTE *)(v34 + v33);
          v37 |= (unint64_t)(v38 & 0x7F) << v35;
          if ((v38 & 0x80) == 0)
            goto LABEL_88;
          v35 += 7;
          v33 = v2;
          v14 = v36++ > 8;
        }
        while (!v14);
        LODWORD(v37) = 0;
LABEL_88:
        *((_DWORD *)this + 7) = v37;
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::KappaRoads::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 32) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_8:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  if ((*(_BYTE *)(v3 + 32) & 8) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::KappaRoads::hash_value(CMMsl::KappaRoads *this)
{
  uint64_t v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  uint64_t v5;

  if ((*((_BYTE *)this + 32) & 2) != 0)
  {
    v1 = *((_QWORD *)this + 2);
    if ((*((_BYTE *)this + 32) & 1) != 0)
    {
LABEL_3:
      v2 = *((_QWORD *)this + 1);
      if ((*((_BYTE *)this + 32) & 4) != 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v1 = 0;
    if ((*((_BYTE *)this + 32) & 1) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 32) & 4) != 0)
  {
LABEL_4:
    v3 = *((float *)this + 6);
    v4 = LODWORD(v3);
    if (v3 == 0.0)
      v4 = 0;
    if ((*((_BYTE *)this + 32) & 8) != 0)
      goto LABEL_7;
LABEL_11:
    v5 = 0;
    return v2 ^ v1 ^ v4 ^ v5;
  }
LABEL_10:
  v4 = 0;
  if ((*((_BYTE *)this + 32) & 8) == 0)
    goto LABEL_11;
LABEL_7:
  v5 = *((unsigned int *)this + 7);
  return v2 ^ v1 ^ v4 ^ v5;
}

void CMMsl::KappaRoadsResult::~KappaRoadsResult(CMMsl::KappaRoadsResult *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::KappaRoadsResult::KappaRoadsResult(uint64_t this, const CMMsl::KappaRoadsResult *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)this = &off_25135EBE0;
  *(_DWORD *)(this + 40) = 0;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 4) != 0)
  {
    v4 = *((_QWORD *)a2 + 3);
    v3 = 4;
    *(_BYTE *)(this + 40) = 4;
    *(_QWORD *)(this + 24) = v4;
    v2 = *((_BYTE *)a2 + 40);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 40) & 8) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 8);
    v3 |= 8u;
    *(_BYTE *)(this + 40) = v3;
    *(_DWORD *)(this + 32) = v5;
    v2 = *((_BYTE *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    v6 = *((_DWORD *)a2 + 9);
    v3 |= 0x10u;
    *(_BYTE *)(this + 40) = v3;
    *(_DWORD *)(this + 36) = v6;
    v2 = *((_BYTE *)a2 + 40);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0)
        return this;
LABEL_12:
      v8 = *((_QWORD *)a2 + 2);
      *(_BYTE *)(this + 40) = v3 | 2;
      *(_QWORD *)(this + 16) = v8;
      return this;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_BYTE *)(this + 40) = v3;
  *(_QWORD *)(this + 8) = v7;
  if ((*((_BYTE *)a2 + 40) & 2) != 0)
    goto LABEL_12;
  return this;
}

uint64_t CMMsl::KappaRoadsResult::operator=(uint64_t a1, const CMMsl::KappaRoadsResult *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  if ((const CMMsl::KappaRoadsResult *)a1 != a2)
  {
    CMMsl::KappaRoadsResult::KappaRoadsResult((uint64_t)&v8, a2);
    v3 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v10;
    v10 = v3;
    v4 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v11;
    v11 = v4;
    v5 = *(_QWORD *)(a1 + 36);
    *(_QWORD *)(a1 + 36) = v12;
    v12 = v5;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v9 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaRoadsResult *a2, CMMsl::KappaRoadsResult *a3)
{
  int v3;
  uint64_t v4;
  float result;
  uint64_t v6;
  uint64_t v7;

  v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v4;
  result = *((float *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((float *)a2 + 8) = result;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v7;
  return result;
}

float CMMsl::KappaRoadsResult::KappaRoadsResult(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135EBE0;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  result = *(float *)(a2 + 32);
  *(float *)(a1 + 32) = result;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_25135EBE0;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  result = *(float *)(a2 + 32);
  *(float *)(a1 + 32) = result;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::KappaRoadsResult::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  __int128 v7;
  __int128 v8;
  void (**v10)(CMMsl::KappaRoadsResult *__hidden);
  __int128 v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  if (a1 != a2)
  {
    v10 = &off_25135EBE0;
    v3 = *(_QWORD *)(a2 + 24);
    v4 = *(_DWORD *)(a2 + 32);
    v5 = *(_QWORD *)(a2 + 36);
    *(_DWORD *)(a2 + 40) = 0;
    v12 = *(_QWORD *)(a1 + 24);
    v6 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v4;
    v13 = v6;
    v14 = *(_QWORD *)(a1 + 36);
    v7 = *(_OWORD *)(a1 + 8);
    v8 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = v3;
    *(_QWORD *)(a1 + 36) = v5;
    *(_OWORD *)(a1 + 8) = v8;
    v11 = v7;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

uint64_t CMMsl::KappaRoadsResult::formatText(CMMsl::KappaRoadsResult *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "distanceToNearestRoad", *((float *)this + 8));
    v5 = *((_BYTE *)this + 40);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((_BYTE *)this + 40) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "epochFirstTimestamp");
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(a2, "roadClass");
    if ((*((_BYTE *)this + 40) & 4) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(a2, "epochLastTimestamp");
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 0x10) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 4) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "timestamp");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaRoadsResult::readFrom(CMMsl::KappaRoadsResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int i;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  uint64_t v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  char v45;
  char v46;
  unsigned int v47;
  unint64_t v48;
  char v49;
  char v50;
  unsigned int v51;
  unint64_t v52;
  char v53;
  char v54;
  unsigned int v55;
  unint64_t v56;
  char v57;
  char v58;
  unsigned int v59;
  unint64_t v60;
  char v61;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  for (i = *((unsigned __int8 *)a2 + 24); v2 < v3 && i == 0; i = *((unsigned __int8 *)a2 + 24))
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_26;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
        if (v14)
          goto LABEL_19;
      }
      i = 1;
      *((_BYTE *)a2 + 24) = 1;
      return i == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_26:
    if ((v11 & 7) == 4)
    {
      i = 0;
      return i == 0;
    }
    v21 = v11 >> 3;
    if ((int)(v11 >> 3) <= 103)
    {
      if ((_DWORD)v21 == 101)
      {
        *((_BYTE *)this + 40) |= 4u;
        v40 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v41 = *(_QWORD *)a2;
        if (v40 > 0xFFFFFFFFFFFFFFF5 || v40 + 10 > v2)
        {
          v58 = 0;
          v59 = 0;
          v44 = 0;
          if (v2 <= v40)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v40)
            {
              v44 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_112;
            }
            v60 = v40++;
            v61 = *(_BYTE *)(v41 + v60);
            *((_QWORD *)a2 + 1) = v40;
            v44 |= (unint64_t)(v61 & 0x7F) << v58;
            if ((v61 & 0x80) == 0)
              break;
            v58 += 7;
            v14 = v59++ > 8;
            if (v14)
            {
              v44 = 0;
              goto LABEL_111;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v44 = 0;
LABEL_111:
          v2 = v60 + 1;
        }
        else
        {
          v42 = 0;
          v43 = 0;
          v44 = 0;
          while (1)
          {
            v2 = v40 + 1;
            *((_QWORD *)a2 + 1) = v40 + 1;
            v45 = *(_BYTE *)(v41 + v40);
            v44 |= (unint64_t)(v45 & 0x7F) << v42;
            if ((v45 & 0x80) == 0)
              break;
            v42 += 7;
            v40 = v2;
            v14 = v43++ > 8;
            if (v14)
            {
              v44 = 0;
              break;
            }
          }
        }
LABEL_112:
        *((_QWORD *)this + 3) = v44;
      }
      else
      {
        if ((_DWORD)v21 != 103)
        {
LABEL_19:
          result = PB::Reader::skip(a2);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          goto LABEL_21;
        }
        *((_BYTE *)this + 40) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
    }
    else
    {
      switch((_DWORD)v21)
      {
        case 0x68:
          *((_BYTE *)this + 40) |= 0x10u;
          v28 = *((_QWORD *)a2 + 1);
          v2 = *((_QWORD *)a2 + 2);
          v29 = *(_QWORD *)a2;
          if (v28 > 0xFFFFFFFFFFFFFFF5 || v28 + 10 > v2)
          {
            v50 = 0;
            v51 = 0;
            v32 = 0;
            if (v2 <= v28)
              v2 = *((_QWORD *)a2 + 1);
            while (1)
            {
              if (v2 == v28)
              {
                LODWORD(v32) = 0;
                *((_BYTE *)a2 + 24) = 1;
                goto LABEL_102;
              }
              v52 = v28++;
              v53 = *(_BYTE *)(v29 + v52);
              *((_QWORD *)a2 + 1) = v28;
              v32 |= (unint64_t)(v53 & 0x7F) << v50;
              if ((v53 & 0x80) == 0)
                break;
              v50 += 7;
              v14 = v51++ > 8;
              if (v14)
              {
                LODWORD(v32) = 0;
                goto LABEL_101;
              }
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v32) = 0;
LABEL_101:
            v2 = v52 + 1;
          }
          else
          {
            v30 = 0;
            v31 = 0;
            v32 = 0;
            while (1)
            {
              v2 = v28 + 1;
              *((_QWORD *)a2 + 1) = v28 + 1;
              v33 = *(_BYTE *)(v29 + v28);
              v32 |= (unint64_t)(v33 & 0x7F) << v30;
              if ((v33 & 0x80) == 0)
                break;
              v30 += 7;
              v28 = v2;
              v14 = v31++ > 8;
              if (v14)
              {
                LODWORD(v32) = 0;
                break;
              }
            }
          }
LABEL_102:
          *((_DWORD *)this + 9) = v32;
          break;
        case 0xC9:
          *((_BYTE *)this + 40) |= 1u;
          v34 = *((_QWORD *)a2 + 1);
          v2 = *((_QWORD *)a2 + 2);
          v35 = *(_QWORD *)a2;
          if (v34 > 0xFFFFFFFFFFFFFFF5 || v34 + 10 > v2)
          {
            v54 = 0;
            v55 = 0;
            v38 = 0;
            if (v2 <= v34)
              v2 = *((_QWORD *)a2 + 1);
            while (1)
            {
              if (v2 == v34)
              {
                v38 = 0;
                *((_BYTE *)a2 + 24) = 1;
                goto LABEL_107;
              }
              v56 = v34++;
              v57 = *(_BYTE *)(v35 + v56);
              *((_QWORD *)a2 + 1) = v34;
              v38 |= (unint64_t)(v57 & 0x7F) << v54;
              if ((v57 & 0x80) == 0)
                break;
              v54 += 7;
              v14 = v55++ > 8;
              if (v14)
              {
                v38 = 0;
                goto LABEL_106;
              }
            }
            if (*((_BYTE *)a2 + 24))
              v38 = 0;
LABEL_106:
            v2 = v56 + 1;
          }
          else
          {
            v36 = 0;
            v37 = 0;
            v38 = 0;
            while (1)
            {
              v2 = v34 + 1;
              *((_QWORD *)a2 + 1) = v34 + 1;
              v39 = *(_BYTE *)(v35 + v34);
              v38 |= (unint64_t)(v39 & 0x7F) << v36;
              if ((v39 & 0x80) == 0)
                break;
              v36 += 7;
              v34 = v2;
              v14 = v37++ > 8;
              if (v14)
              {
                v38 = 0;
                break;
              }
            }
          }
LABEL_107:
          *((_QWORD *)this + 1) = v38;
          break;
        case 0xCA:
          *((_BYTE *)this + 40) |= 2u;
          v22 = *((_QWORD *)a2 + 1);
          v2 = *((_QWORD *)a2 + 2);
          v23 = *(_QWORD *)a2;
          if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v2)
          {
            v46 = 0;
            v47 = 0;
            v26 = 0;
            if (v2 <= v22)
              v2 = *((_QWORD *)a2 + 1);
            while (1)
            {
              if (v2 == v22)
              {
                v26 = 0;
                *((_BYTE *)a2 + 24) = 1;
                goto LABEL_97;
              }
              v48 = v22++;
              v49 = *(_BYTE *)(v23 + v48);
              *((_QWORD *)a2 + 1) = v22;
              v26 |= (unint64_t)(v49 & 0x7F) << v46;
              if ((v49 & 0x80) == 0)
                break;
              v46 += 7;
              v14 = v47++ > 8;
              if (v14)
              {
                v26 = 0;
                goto LABEL_96;
              }
            }
            if (*((_BYTE *)a2 + 24))
              v26 = 0;
LABEL_96:
            v2 = v48 + 1;
          }
          else
          {
            v24 = 0;
            v25 = 0;
            v26 = 0;
            while (1)
            {
              v2 = v22 + 1;
              *((_QWORD *)a2 + 1) = v22 + 1;
              v27 = *(_BYTE *)(v23 + v22);
              v26 |= (unint64_t)(v27 & 0x7F) << v24;
              if ((v27 & 0x80) == 0)
                break;
              v24 += 7;
              v22 = v2;
              v14 = v25++ > 8;
              if (v14)
              {
                v26 = 0;
                break;
              }
            }
          }
LABEL_97:
          *((_QWORD *)this + 2) = v26;
          break;
        default:
          goto LABEL_19;
      }
    }
LABEL_21:
    v3 = *((_QWORD *)a2 + 2);
  }
  return i == 0;
}

uint64_t CMMsl::KappaRoadsResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 40);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(this + 40) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_10:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_BYTE *)(v3 + 40) & 2) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::KappaRoadsResult::hash_value(CMMsl::KappaRoadsResult *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*((_BYTE *)this + 40) & 4) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 40) & 8) != 0)
      goto LABEL_3;
LABEL_10:
    v3 = 0;
    if ((*((_BYTE *)this + 40) & 0x10) != 0)
      goto LABEL_6;
    goto LABEL_11;
  }
  v1 = *((_QWORD *)this + 3);
  if ((*((_BYTE *)this + 40) & 8) == 0)
    goto LABEL_10;
LABEL_3:
  v2 = *((float *)this + 8);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 40) & 0x10) != 0)
  {
LABEL_6:
    v4 = *((unsigned int *)this + 9);
    if ((*((_BYTE *)this + 40) & 1) != 0)
      goto LABEL_7;
LABEL_12:
    v5 = 0;
    if ((*((_BYTE *)this + 40) & 2) != 0)
      goto LABEL_8;
LABEL_13:
    v6 = 0;
    return v3 ^ v1 ^ v4 ^ v5 ^ v6;
  }
LABEL_11:
  v4 = 0;
  if ((*((_BYTE *)this + 40) & 1) == 0)
    goto LABEL_12;
LABEL_7:
  v5 = *((_QWORD *)this + 1);
  if ((*((_BYTE *)this + 40) & 2) == 0)
    goto LABEL_13;
LABEL_8:
  v6 = *((_QWORD *)this + 2);
  return v3 ^ v1 ^ v4 ^ v5 ^ v6;
}

void CMMsl::KappaRolloverCrashResult::~KappaRolloverCrashResult(CMMsl::KappaRolloverCrashResult *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::KappaRolloverCrashResult::KappaRolloverCrashResult(CMMsl::KappaRolloverCrashResult *this, const CMMsl::KappaRolloverCrashResult *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  char v9;
  char v10;
  float result;
  char v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  int v18;
  char v19;
  unint64_t v20;
  char v21;
  char v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  int v26;
  char v27;
  unint64_t v28;

  *(_QWORD *)this = &off_25135EC18;
  v2 = (uint64_t *)((char *)this + 316);
  *((_DWORD *)this + 81) = 0;
  *(_QWORD *)((char *)this + 316) = 0;
  v3 = (uint64_t *)((char *)a2 + 316);
  v4 = *(_QWORD *)((char *)a2 + 316);
  if ((v4 & 1) != 0)
  {
    v6 = 0;
    v8 = *((_QWORD *)a2 + 1);
    *((_BYTE *)this + 326) = 0;
    *((_WORD *)this + 162) = 0;
    v5 = 1;
    *v2 = 1;
    *((_QWORD *)this + 1) = v8;
    LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
    v4 = *v3;
    if ((*((_WORD *)a2 + 162) & 0x8000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = 0;
  v6 = 0;
  v7 = *((unsigned __int16 *)a2 + 162);
  LODWORD(v8) = v7 | (*((unsigned __int8 *)a2 + 326) << 16);
  if ((v7 & 0x8000) != 0)
  {
LABEL_5:
    v9 = *((_BYTE *)a2 + 310);
    v6 = 0x8000;
    *v2 = v5;
    *((_BYTE *)this + 326) = 0;
    *((_WORD *)this + 162) = 0x8000;
    *((_BYTE *)this + 310) = v9;
    LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
    v4 = *v3;
  }
LABEL_6:
  if ((v8 & 0x10000) != 0)
  {
    v10 = *((_BYTE *)a2 + 311);
    *((_WORD *)this + 162) = v6;
    v6 |= 0x10000uLL;
    *v2 = v5;
    *((_BYTE *)this + 326) = BYTE2(v6);
    *((_BYTE *)this + 311) = v10;
    LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
    v4 = *v3;
    if ((*v3 & 0x40000000000) == 0)
    {
LABEL_8:
      if ((v4 & 0x40000) == 0)
        goto LABEL_9;
      goto LABEL_90;
    }
  }
  else if ((v4 & 0x40000000000) == 0)
  {
    goto LABEL_8;
  }
  result = *((float *)a2 + 45);
  v5 |= 0x40000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 45) = result;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  v4 = *v3;
  if ((*v3 & 0x40000) == 0)
  {
LABEL_9:
    if ((v8 & 8) == 0)
      goto LABEL_10;
    goto LABEL_91;
  }
LABEL_90:
  result = *((float *)a2 + 21);
  v5 |= 0x40000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 21) = result;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  v4 = *v3;
  if ((*((_WORD *)a2 + 162) & 8) == 0)
  {
LABEL_10:
    if ((v8 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_92;
  }
LABEL_91:
  result = *((float *)a2 + 70);
  v8 = v6 >> 16;
  v6 |= 8uLL;
  *v2 = v5;
  *((_BYTE *)this + 326) = v8;
  *((_WORD *)this + 162) = v6;
  *((float *)this + 70) = result;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  v4 = *v3;
  if ((*((_WORD *)a2 + 162) & 0x2000) == 0)
  {
LABEL_11:
    if ((v8 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_93;
  }
LABEL_92:
  v12 = *((_BYTE *)a2 + 308);
  v13 = v6 >> 16;
  v6 |= 0x2000uLL;
  *v2 = v5;
  *((_BYTE *)this + 326) = v13;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 308) = v12;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  v4 = *v3;
  if ((*((_WORD *)a2 + 162) & 0x400) == 0)
  {
LABEL_12:
    if ((v8 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_94;
  }
LABEL_93:
  v14 = *((_BYTE *)a2 + 305);
  v15 = v6 >> 16;
  v6 |= 0x400uLL;
  *v2 = v5;
  *((_BYTE *)this + 326) = v15;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 305) = v14;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  v4 = *v3;
  if ((*((_WORD *)a2 + 162) & 0x200) == 0)
  {
LABEL_13:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_14;
    goto LABEL_95;
  }
LABEL_94:
  v16 = *((_BYTE *)a2 + 304);
  v17 = v6 >> 16;
  v6 |= 0x200uLL;
  *v2 = v5;
  *((_BYTE *)this + 326) = v17;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 304) = v16;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  v4 = *v3;
  if ((*v3 & 0x2000000) == 0)
  {
LABEL_14:
    if ((v8 & 0x1000) == 0)
      goto LABEL_15;
    goto LABEL_96;
  }
LABEL_95:
  v18 = *((_DWORD *)a2 + 28);
  v5 |= 0x2000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((_DWORD *)this + 28) = v18;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  v4 = *v3;
  if ((*((_WORD *)a2 + 162) & 0x1000) == 0)
  {
LABEL_15:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_16;
    goto LABEL_97;
  }
LABEL_96:
  v19 = *((_BYTE *)a2 + 307);
  v20 = v6 >> 16;
  v6 |= 0x1000uLL;
  *v2 = v5;
  *((_BYTE *)this + 326) = v20;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 307) = v19;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  v4 = *v3;
  if ((*v3 & 0x1000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x2000000000000) == 0)
      goto LABEL_17;
    goto LABEL_98;
  }
LABEL_97:
  result = *((float *)a2 + 27);
  v5 |= 0x1000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 27) = result;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  v4 = *v3;
  if ((*v3 & 0x2000000000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x1000000000000) == 0)
      goto LABEL_18;
    goto LABEL_99;
  }
LABEL_98:
  result = *((float *)a2 + 52);
  v5 |= 0x2000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 52) = result;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  v4 = *v3;
  if ((*v3 & 0x1000000000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x4000000000000) == 0)
      goto LABEL_19;
    goto LABEL_100;
  }
LABEL_99:
  result = *((float *)a2 + 51);
  v5 |= 0x1000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 51) = result;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  v4 = *v3;
  if ((*v3 & 0x4000000000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x40) == 0)
      goto LABEL_20;
    goto LABEL_101;
  }
LABEL_100:
  result = *((float *)a2 + 53);
  v5 |= 0x4000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 53) = result;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  v4 = *v3;
  if ((*v3 & 0x40) == 0)
  {
LABEL_20:
    if ((v4 & 2) == 0)
      goto LABEL_21;
    goto LABEL_102;
  }
LABEL_101:
  result = *((float *)a2 + 9);
  v5 |= 0x40uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 9) = result;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  v4 = *v3;
  if ((*v3 & 2) == 0)
  {
LABEL_21:
    if ((v4 & 0x8000) == 0)
      goto LABEL_22;
    goto LABEL_103;
  }
LABEL_102:
  result = *((float *)a2 + 4);
  v5 |= 2uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 4) = result;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  v4 = *v3;
  if ((*v3 & 0x8000) == 0)
  {
LABEL_22:
    if ((v8 & 0x40000) == 0)
      goto LABEL_23;
    goto LABEL_104;
  }
LABEL_103:
  result = *((float *)a2 + 18);
  v5 |= 0x8000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 18) = result;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  v4 = *v3;
  if ((v8 & 0x40000) == 0)
  {
LABEL_23:
    if ((v8 & 0x800) == 0)
      goto LABEL_24;
    goto LABEL_105;
  }
LABEL_104:
  v21 = *((_BYTE *)a2 + 313);
  *((_WORD *)this + 162) = v6;
  v6 |= 0x40000uLL;
  *v2 = v5;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((_BYTE *)this + 313) = v21;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  v4 = *v3;
  if ((*((_WORD *)a2 + 162) & 0x800) == 0)
  {
LABEL_24:
    if ((v8 & 0x4000) == 0)
      goto LABEL_25;
    goto LABEL_106;
  }
LABEL_105:
  v22 = *((_BYTE *)a2 + 306);
  v23 = v6 >> 16;
  v6 |= 0x800uLL;
  *v2 = v5;
  *((_BYTE *)this + 326) = v23;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 306) = v22;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  v4 = *v3;
  if ((*((_WORD *)a2 + 162) & 0x4000) == 0)
  {
LABEL_25:
    if ((v4 & 0x20000000000000) == 0)
      goto LABEL_26;
    goto LABEL_107;
  }
LABEL_106:
  v24 = *((_BYTE *)a2 + 309);
  v25 = v6 >> 16;
  v6 |= 0x4000uLL;
  *v2 = v5;
  *((_BYTE *)this + 326) = v25;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 309) = v24;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  v4 = *v3;
  if ((*v3 & 0x20000000000000) == 0)
  {
LABEL_26:
    if ((v4 & 0x8000000000000) == 0)
      goto LABEL_27;
    goto LABEL_108;
  }
LABEL_107:
  result = *((float *)a2 + 56);
  v5 |= 0x20000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 56) = result;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  v4 = *v3;
  if ((*v3 & 0x8000000000000) == 0)
  {
LABEL_27:
    if ((v4 & 0x10000000000000) == 0)
      goto LABEL_28;
    goto LABEL_109;
  }
LABEL_108:
  result = *((float *)a2 + 54);
  v5 |= 0x8000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 54) = result;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  v4 = *v3;
  if ((*v3 & 0x10000000000000) == 0)
  {
LABEL_28:
    if ((v8 & 0x20000) == 0)
      goto LABEL_29;
    goto LABEL_110;
  }
LABEL_109:
  v26 = *((_DWORD *)a2 + 55);
  v5 |= 0x10000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((_DWORD *)this + 55) = v26;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  v4 = *v3;
  if ((v8 & 0x20000) == 0)
  {
LABEL_29:
    if ((v4 & 0x40000000000000) == 0)
      goto LABEL_30;
    goto LABEL_111;
  }
LABEL_110:
  v27 = *((_BYTE *)a2 + 312);
  *((_WORD *)this + 162) = v6;
  v6 |= 0x20000uLL;
  *v2 = v5;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((_BYTE *)this + 312) = v27;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x40000000000000) == 0)
  {
LABEL_30:
    if ((v4 & 0x800000000000000) == 0)
      goto LABEL_31;
    goto LABEL_112;
  }
LABEL_111:
  result = *((float *)a2 + 57);
  v5 |= 0x40000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 57) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x800000000000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x80000) == 0)
      goto LABEL_32;
    goto LABEL_113;
  }
LABEL_112:
  result = *((float *)a2 + 62);
  v5 |= 0x800000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 62) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x80000) == 0)
  {
LABEL_32:
    if ((v4 & 0x80000000000) == 0)
      goto LABEL_33;
    goto LABEL_114;
  }
LABEL_113:
  result = *((float *)a2 + 22);
  v5 |= 0x80000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 22) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x80000000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x10) == 0)
      goto LABEL_34;
    goto LABEL_115;
  }
LABEL_114:
  result = *((float *)a2 + 46);
  v5 |= 0x80000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 46) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((v8 & 0x10) == 0)
  {
LABEL_34:
    if ((v4 & 0x80000000000000) == 0)
      goto LABEL_35;
    goto LABEL_116;
  }
LABEL_115:
  result = *((float *)a2 + 71);
  v8 = v6 >> 16;
  v6 |= 0x10uLL;
  *v2 = v5;
  *((_BYTE *)this + 326) = v8;
  *((_WORD *)this + 162) = v6;
  *((float *)this + 71) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x80000000000000) == 0)
  {
LABEL_35:
    if ((v4 & 0x1000000000000000) == 0)
      goto LABEL_36;
    goto LABEL_117;
  }
LABEL_116:
  result = *((float *)a2 + 58);
  v5 |= 0x80000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 58) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x1000000000000000) == 0)
  {
LABEL_36:
    if ((v4 & 0x100000) == 0)
      goto LABEL_37;
    goto LABEL_118;
  }
LABEL_117:
  result = *((float *)a2 + 63);
  v5 |= 0x1000000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 63) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x100000) == 0)
  {
LABEL_37:
    if ((v4 & 0x100000000000) == 0)
      goto LABEL_38;
    goto LABEL_119;
  }
LABEL_118:
  result = *((float *)a2 + 23);
  v5 |= 0x100000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 23) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x100000000000) == 0)
  {
LABEL_38:
    if ((v8 & 0x20) == 0)
      goto LABEL_39;
    goto LABEL_120;
  }
LABEL_119:
  result = *((float *)a2 + 47);
  v5 |= 0x100000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 47) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((v8 & 0x20) == 0)
  {
LABEL_39:
    if ((v4 & 0x100000000000000) == 0)
      goto LABEL_40;
    goto LABEL_121;
  }
LABEL_120:
  result = *((float *)a2 + 72);
  v8 = v6 >> 16;
  v6 |= 0x20uLL;
  *v2 = v5;
  *((_BYTE *)this + 326) = v8;
  *((_WORD *)this + 162) = v6;
  *((float *)this + 72) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x100000000000000) == 0)
  {
LABEL_40:
    if ((v4 & 0x2000000000000000) == 0)
      goto LABEL_41;
    goto LABEL_122;
  }
LABEL_121:
  result = *((float *)a2 + 59);
  v5 |= 0x100000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 59) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x2000000000000000) == 0)
  {
LABEL_41:
    if ((v4 & 0x200000) == 0)
      goto LABEL_42;
    goto LABEL_123;
  }
LABEL_122:
  result = *((float *)a2 + 64);
  v5 |= 0x2000000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 64) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x200000) == 0)
  {
LABEL_42:
    if ((v4 & 0x200000000000) == 0)
      goto LABEL_43;
    goto LABEL_124;
  }
LABEL_123:
  result = *((float *)a2 + 24);
  v5 |= 0x200000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 24) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x200000000000) == 0)
  {
LABEL_43:
    if ((v8 & 0x40) == 0)
      goto LABEL_44;
    goto LABEL_125;
  }
LABEL_124:
  result = *((float *)a2 + 48);
  v5 |= 0x200000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 48) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((v8 & 0x40) == 0)
  {
LABEL_44:
    if ((v4 & 0x80) == 0)
      goto LABEL_45;
    goto LABEL_126;
  }
LABEL_125:
  result = *((float *)a2 + 73);
  v8 = v6 >> 16;
  v6 |= 0x40uLL;
  *v2 = v5;
  *((_BYTE *)this + 326) = v8;
  *((_WORD *)this + 162) = v6;
  *((float *)this + 73) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x80) == 0)
  {
LABEL_45:
    if ((v4 & 0x400) == 0)
      goto LABEL_46;
    goto LABEL_127;
  }
LABEL_126:
  result = *((float *)a2 + 10);
  v5 |= 0x80uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 10) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x400) == 0)
  {
LABEL_46:
    if ((v4 & 0x200) == 0)
      goto LABEL_47;
    goto LABEL_128;
  }
LABEL_127:
  result = *((float *)a2 + 13);
  v5 |= 0x400uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 13) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x200) == 0)
  {
LABEL_47:
    if ((v4 & 0x100) == 0)
      goto LABEL_48;
    goto LABEL_129;
  }
LABEL_128:
  result = *((float *)a2 + 12);
  v5 |= 0x200uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 12) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x100) == 0)
  {
LABEL_48:
    if ((v4 & 4) == 0)
      goto LABEL_49;
    goto LABEL_130;
  }
LABEL_129:
  result = *((float *)a2 + 11);
  v5 |= 0x100uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 11) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 4) == 0)
  {
LABEL_49:
    if ((v4 & 0x20) == 0)
      goto LABEL_50;
    goto LABEL_131;
  }
LABEL_130:
  result = *((float *)a2 + 5);
  v5 |= 4uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 5) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x20) == 0)
  {
LABEL_50:
    if ((v4 & 0x10) == 0)
      goto LABEL_51;
    goto LABEL_132;
  }
LABEL_131:
  result = *((float *)a2 + 8);
  v5 |= 0x20uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 8) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x10) == 0)
  {
LABEL_51:
    if ((v4 & 8) == 0)
      goto LABEL_52;
    goto LABEL_133;
  }
LABEL_132:
  result = *((float *)a2 + 7);
  v5 |= 0x10uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 7) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 8) == 0)
  {
LABEL_52:
    if ((v4 & 0x800) == 0)
      goto LABEL_53;
    goto LABEL_134;
  }
LABEL_133:
  result = *((float *)a2 + 6);
  v5 |= 8uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 6) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x800) == 0)
  {
LABEL_53:
    if ((v4 & 0x4000) == 0)
      goto LABEL_54;
    goto LABEL_135;
  }
LABEL_134:
  result = *((float *)a2 + 14);
  v5 |= 0x800uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 14) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x4000) == 0)
  {
LABEL_54:
    if ((v4 & 0x2000) == 0)
      goto LABEL_55;
    goto LABEL_136;
  }
LABEL_135:
  result = *((float *)a2 + 17);
  v5 |= 0x4000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 17) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x2000) == 0)
  {
LABEL_55:
    if ((v4 & 0x1000) == 0)
      goto LABEL_56;
    goto LABEL_137;
  }
LABEL_136:
  result = *((float *)a2 + 16);
  v5 |= 0x2000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 16) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x1000) == 0)
  {
LABEL_56:
    if ((v4 & 0x10000) == 0)
      goto LABEL_57;
    goto LABEL_138;
  }
LABEL_137:
  result = *((float *)a2 + 15);
  v5 |= 0x1000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 15) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x10000) == 0)
  {
LABEL_57:
    if ((v4 & 0x20000) == 0)
      goto LABEL_58;
    goto LABEL_139;
  }
LABEL_138:
  result = *((float *)a2 + 19);
  v5 |= 0x10000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 19) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x20000) == 0)
  {
LABEL_58:
    if ((v4 & 0x200000000000000) == 0)
      goto LABEL_59;
    goto LABEL_140;
  }
LABEL_139:
  result = *((float *)a2 + 20);
  v5 |= 0x20000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 20) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x200000000000000) == 0)
  {
LABEL_59:
    if ((v4 & 0x4000000000000000) == 0)
      goto LABEL_60;
    goto LABEL_141;
  }
LABEL_140:
  result = *((float *)a2 + 60);
  v5 |= 0x200000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 60) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x4000000000000000) == 0)
  {
LABEL_60:
    if ((v4 & 0x400000) == 0)
      goto LABEL_61;
    goto LABEL_142;
  }
LABEL_141:
  result = *((float *)a2 + 65);
  v5 |= 0x4000000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 65) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x400000) == 0)
  {
LABEL_61:
    if ((v4 & 0x400000000000) == 0)
      goto LABEL_62;
    goto LABEL_143;
  }
LABEL_142:
  result = *((float *)a2 + 25);
  v5 |= 0x400000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 25) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x400000000000) == 0)
  {
LABEL_62:
    if ((v8 & 0x80) == 0)
      goto LABEL_63;
    goto LABEL_144;
  }
LABEL_143:
  result = *((float *)a2 + 49);
  v5 |= 0x400000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 49) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((v8 & 0x80) == 0)
  {
LABEL_63:
    if ((v4 & 0x400000000000000) == 0)
      goto LABEL_64;
    goto LABEL_145;
  }
LABEL_144:
  result = *((float *)a2 + 74);
  v8 = v6 >> 16;
  v6 |= 0x80uLL;
  *v2 = v5;
  *((_BYTE *)this + 326) = v8;
  *((_WORD *)this + 162) = v6;
  *((float *)this + 74) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x400000000000000) == 0)
  {
LABEL_64:
    if ((v4 & 0x8000000000000000) == 0)
      goto LABEL_65;
    goto LABEL_146;
  }
LABEL_145:
  result = *((float *)a2 + 61);
  v5 |= 0x400000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 61) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x8000000000000000) == 0)
  {
LABEL_65:
    if ((v4 & 0x800000) == 0)
      goto LABEL_66;
    goto LABEL_147;
  }
LABEL_146:
  result = *((float *)a2 + 66);
  v5 |= 0x8000000000000000;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 66) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x800000) == 0)
  {
LABEL_66:
    if ((v4 & 0x800000000000) == 0)
      goto LABEL_67;
    goto LABEL_148;
  }
LABEL_147:
  result = *((float *)a2 + 26);
  v5 |= 0x800000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 26) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x800000000000) == 0)
  {
LABEL_67:
    if ((v8 & 0x100) == 0)
      goto LABEL_68;
    goto LABEL_149;
  }
LABEL_148:
  result = *((float *)a2 + 50);
  v5 |= 0x800000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 50) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((v8 & 0x100) == 0)
  {
LABEL_68:
    if ((v4 & 0x100000000) == 0)
      goto LABEL_69;
    goto LABEL_150;
  }
LABEL_149:
  result = *((float *)a2 + 75);
  v8 = v6 >> 16;
  v6 |= 0x100uLL;
  *v2 = v5;
  *((_BYTE *)this + 326) = v8;
  *((_WORD *)this + 162) = v6;
  *((float *)this + 75) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x100000000) == 0)
  {
LABEL_69:
    if ((v4 & 0x200000000) == 0)
      goto LABEL_70;
    goto LABEL_151;
  }
LABEL_150:
  result = *((float *)a2 + 35);
  v5 |= 0x100000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 35) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x200000000) == 0)
  {
LABEL_70:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_71;
    goto LABEL_152;
  }
LABEL_151:
  result = *((float *)a2 + 36);
  v5 |= 0x200000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 36) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x8000000) == 0)
  {
LABEL_71:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_72;
    goto LABEL_153;
  }
LABEL_152:
  result = *((float *)a2 + 30);
  v5 |= 0x8000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 30) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x4000000) == 0)
  {
LABEL_72:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_73;
    goto LABEL_154;
  }
LABEL_153:
  result = *((float *)a2 + 29);
  v5 |= 0x4000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 29) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x80000000) == 0)
  {
LABEL_73:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_74;
    goto LABEL_155;
  }
LABEL_154:
  result = *((float *)a2 + 34);
  v5 |= 0x80000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 34) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x40000000) == 0)
  {
LABEL_74:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_75;
    goto LABEL_156;
  }
LABEL_155:
  result = *((float *)a2 + 33);
  v5 |= 0x40000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 33) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x20000000) == 0)
  {
LABEL_75:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_76;
    goto LABEL_157;
  }
LABEL_156:
  result = *((float *)a2 + 32);
  v5 |= 0x20000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 32) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x10000000) == 0)
  {
LABEL_76:
    if ((v4 & 0x10000000000) == 0)
      goto LABEL_77;
    goto LABEL_158;
  }
LABEL_157:
  result = *((float *)a2 + 31);
  v5 |= 0x10000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 31) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x10000000000) == 0)
  {
LABEL_77:
    if ((v4 & 0x20000000000) == 0)
      goto LABEL_78;
    goto LABEL_159;
  }
LABEL_158:
  result = *((float *)a2 + 43);
  v5 |= 0x10000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 43) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x20000000000) == 0)
  {
LABEL_78:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_79;
    goto LABEL_160;
  }
LABEL_159:
  result = *((float *)a2 + 44);
  v5 |= 0x20000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 44) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x800000000) == 0)
  {
LABEL_79:
    if ((v4 & 0x400000000) == 0)
      goto LABEL_80;
    goto LABEL_161;
  }
LABEL_160:
  result = *((float *)a2 + 38);
  v5 |= 0x800000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 38) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x400000000) == 0)
  {
LABEL_80:
    if ((v4 & 0x8000000000) == 0)
      goto LABEL_81;
    goto LABEL_162;
  }
LABEL_161:
  result = *((float *)a2 + 37);
  v5 |= 0x400000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 37) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x8000000000) == 0)
  {
LABEL_81:
    if ((v4 & 0x4000000000) == 0)
      goto LABEL_82;
    goto LABEL_163;
  }
LABEL_162:
  result = *((float *)a2 + 42);
  v5 |= 0x8000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 42) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x4000000000) == 0)
  {
LABEL_82:
    if ((v4 & 0x2000000000) == 0)
      goto LABEL_83;
    goto LABEL_164;
  }
LABEL_163:
  result = *((float *)a2 + 41);
  v5 |= 0x4000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 41) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x2000000000) == 0)
  {
LABEL_83:
    if ((v4 & 0x1000000000) == 0)
      goto LABEL_84;
    goto LABEL_165;
  }
LABEL_164:
  result = *((float *)a2 + 40);
  v5 |= 0x2000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 40) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  if ((*v3 & 0x1000000000) == 0)
  {
LABEL_84:
    if ((v8 & 2) == 0)
      goto LABEL_85;
    goto LABEL_166;
  }
LABEL_165:
  result = *((float *)a2 + 39);
  v5 |= 0x1000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 39) = result;
  LOBYTE(v8) = *((_WORD *)a2 + 162);
  if ((*((_WORD *)a2 + 162) & 2) == 0)
  {
LABEL_85:
    if ((v8 & 4) == 0)
      goto LABEL_86;
    goto LABEL_167;
  }
LABEL_166:
  result = *((float *)a2 + 68);
  v8 = v6 >> 16;
  v6 |= 2uLL;
  *v2 = v5;
  *((_BYTE *)this + 326) = v8;
  *((_WORD *)this + 162) = v6;
  *((float *)this + 68) = result;
  LOBYTE(v8) = *((_WORD *)a2 + 162);
  if ((*((_WORD *)a2 + 162) & 4) == 0)
  {
LABEL_86:
    if ((v8 & 1) == 0)
      return result;
LABEL_168:
    result = *((float *)a2 + 67);
    *v2 = v5;
    *((_BYTE *)this + 326) = BYTE2(v6);
    *((_WORD *)this + 162) = v6 | 1;
    *((float *)this + 67) = result;
    return result;
  }
LABEL_167:
  result = *((float *)a2 + 69);
  v28 = v6 >> 16;
  LODWORD(v6) = v6 | 4;
  *v2 = v5;
  *((_BYTE *)this + 326) = v28;
  *((_WORD *)this + 162) = v6;
  *((float *)this + 69) = result;
  if ((*((_WORD *)a2 + 162) & 1) != 0)
    goto LABEL_168;
  return result;
}

CMMsl *CMMsl::KappaRolloverCrashResult::operator=(CMMsl *a1, const CMMsl::KappaRolloverCrashResult *a2)
{
  CMMsl::KappaRolloverCrashResult *v3;
  _QWORD v5[42];

  v5[41] = *MEMORY[0x24BDAC8D0];
  if (a1 != a2)
  {
    CMMsl::KappaRolloverCrashResult::KappaRolloverCrashResult((CMMsl::KappaRolloverCrashResult *)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaRolloverCrashResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaRolloverCrashResult *a2, CMMsl::KappaRolloverCrashResult *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  float result;

  v3 = *((_DWORD *)this + 81);
  v4 = *(_QWORD *)((char *)this + 316);
  v5 = *((_DWORD *)a2 + 81);
  *(_QWORD *)((char *)this + 316) = *(_QWORD *)((char *)a2 + 316);
  *((_DWORD *)this + 81) = v5;
  *(_QWORD *)((char *)a2 + 316) = v4;
  *((_DWORD *)a2 + 81) = v3;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 310);
  *((_BYTE *)this + 310) = *((_BYTE *)a2 + 310);
  *((_BYTE *)a2 + 310) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 311);
  *((_BYTE *)this + 311) = *((_BYTE *)a2 + 311);
  *((_BYTE *)a2 + 311) = v6;
  v7 = *((_DWORD *)this + 45);
  *((_DWORD *)this + 45) = *((_DWORD *)a2 + 45);
  *((_DWORD *)a2 + 45) = v7;
  v8 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v8;
  v9 = *((_DWORD *)this + 70);
  *((_DWORD *)this + 70) = *((_DWORD *)a2 + 70);
  *((_DWORD *)a2 + 70) = v9;
  LOBYTE(v6) = *((_BYTE *)this + 308);
  *((_BYTE *)this + 308) = *((_BYTE *)a2 + 308);
  *((_BYTE *)a2 + 308) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 305);
  *((_BYTE *)this + 305) = *((_BYTE *)a2 + 305);
  *((_BYTE *)a2 + 305) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 304);
  *((_BYTE *)this + 304) = *((_BYTE *)a2 + 304);
  *((_BYTE *)a2 + 304) = v6;
  LODWORD(v6) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 307);
  *((_BYTE *)this + 307) = *((_BYTE *)a2 + 307);
  *((_BYTE *)a2 + 307) = v6;
  v10 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v10;
  v11 = *((_DWORD *)this + 52);
  *((_DWORD *)this + 52) = *((_DWORD *)a2 + 52);
  *((_DWORD *)a2 + 52) = v11;
  v12 = *((_DWORD *)this + 51);
  *((_DWORD *)this + 51) = *((_DWORD *)a2 + 51);
  *((_DWORD *)a2 + 51) = v12;
  v13 = *((_DWORD *)this + 53);
  *((_DWORD *)this + 53) = *((_DWORD *)a2 + 53);
  *((_DWORD *)a2 + 53) = v13;
  v14 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v14;
  v15 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v15;
  v16 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v16;
  LOBYTE(v6) = *((_BYTE *)this + 313);
  *((_BYTE *)this + 313) = *((_BYTE *)a2 + 313);
  *((_BYTE *)a2 + 313) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 306);
  *((_BYTE *)this + 306) = *((_BYTE *)a2 + 306);
  *((_BYTE *)a2 + 306) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 309);
  *((_BYTE *)this + 309) = *((_BYTE *)a2 + 309);
  *((_BYTE *)a2 + 309) = v6;
  v17 = *((_DWORD *)this + 56);
  *((_DWORD *)this + 56) = *((_DWORD *)a2 + 56);
  *((_DWORD *)a2 + 56) = v17;
  v18 = *((_DWORD *)this + 54);
  *((_DWORD *)this + 54) = *((_DWORD *)a2 + 54);
  *((_DWORD *)a2 + 54) = v18;
  LODWORD(v6) = *((_DWORD *)this + 55);
  *((_DWORD *)this + 55) = *((_DWORD *)a2 + 55);
  *((_DWORD *)a2 + 55) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 312);
  *((_BYTE *)this + 312) = *((_BYTE *)a2 + 312);
  *((_BYTE *)a2 + 312) = v6;
  v19 = *((_DWORD *)this + 57);
  *((_DWORD *)this + 57) = *((_DWORD *)a2 + 57);
  *((_DWORD *)a2 + 57) = v19;
  v20 = *((_DWORD *)this + 62);
  *((_DWORD *)this + 62) = *((_DWORD *)a2 + 62);
  *((_DWORD *)a2 + 62) = v20;
  v21 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v21;
  v22 = *((_DWORD *)this + 46);
  *((_DWORD *)this + 46) = *((_DWORD *)a2 + 46);
  *((_DWORD *)a2 + 46) = v22;
  v23 = *((_DWORD *)this + 71);
  *((_DWORD *)this + 71) = *((_DWORD *)a2 + 71);
  *((_DWORD *)a2 + 71) = v23;
  v24 = *((_DWORD *)this + 58);
  *((_DWORD *)this + 58) = *((_DWORD *)a2 + 58);
  *((_DWORD *)a2 + 58) = v24;
  v25 = *((_DWORD *)this + 63);
  *((_DWORD *)this + 63) = *((_DWORD *)a2 + 63);
  *((_DWORD *)a2 + 63) = v25;
  v26 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v26;
  v27 = *((_DWORD *)this + 47);
  *((_DWORD *)this + 47) = *((_DWORD *)a2 + 47);
  *((_DWORD *)a2 + 47) = v27;
  v28 = *((_DWORD *)this + 72);
  *((_DWORD *)this + 72) = *((_DWORD *)a2 + 72);
  *((_DWORD *)a2 + 72) = v28;
  v29 = *((_DWORD *)this + 59);
  *((_DWORD *)this + 59) = *((_DWORD *)a2 + 59);
  *((_DWORD *)a2 + 59) = v29;
  v30 = *((_DWORD *)this + 64);
  *((_DWORD *)this + 64) = *((_DWORD *)a2 + 64);
  *((_DWORD *)a2 + 64) = v30;
  v31 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v31;
  v32 = *((_DWORD *)this + 48);
  *((_DWORD *)this + 48) = *((_DWORD *)a2 + 48);
  *((_DWORD *)a2 + 48) = v32;
  v33 = *((_DWORD *)this + 73);
  *((_DWORD *)this + 73) = *((_DWORD *)a2 + 73);
  *((_DWORD *)a2 + 73) = v33;
  v34 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v34;
  v35 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v35;
  v36 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v36;
  v37 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v37;
  v38 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v38;
  v39 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v39;
  v40 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v40;
  v41 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v41;
  v42 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v42;
  v43 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v43;
  v44 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v44;
  v45 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v45;
  v46 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v46;
  v47 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v47;
  v48 = *((_DWORD *)this + 60);
  *((_DWORD *)this + 60) = *((_DWORD *)a2 + 60);
  *((_DWORD *)a2 + 60) = v48;
  v49 = *((_DWORD *)this + 65);
  *((_DWORD *)this + 65) = *((_DWORD *)a2 + 65);
  *((_DWORD *)a2 + 65) = v49;
  v50 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v50;
  v51 = *((_DWORD *)this + 49);
  *((_DWORD *)this + 49) = *((_DWORD *)a2 + 49);
  *((_DWORD *)a2 + 49) = v51;
  v52 = *((_DWORD *)this + 74);
  *((_DWORD *)this + 74) = *((_DWORD *)a2 + 74);
  *((_DWORD *)a2 + 74) = v52;
  v53 = *((_DWORD *)this + 61);
  *((_DWORD *)this + 61) = *((_DWORD *)a2 + 61);
  *((_DWORD *)a2 + 61) = v53;
  v54 = *((_DWORD *)this + 66);
  *((_DWORD *)this + 66) = *((_DWORD *)a2 + 66);
  *((_DWORD *)a2 + 66) = v54;
  v55 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v55;
  v56 = *((_DWORD *)this + 50);
  *((_DWORD *)this + 50) = *((_DWORD *)a2 + 50);
  *((_DWORD *)a2 + 50) = v56;
  v57 = *((_DWORD *)this + 75);
  *((_DWORD *)this + 75) = *((_DWORD *)a2 + 75);
  *((_DWORD *)a2 + 75) = v57;
  v58 = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v58;
  v59 = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v59;
  v60 = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v60;
  v61 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v61;
  v62 = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v62;
  v63 = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v63;
  v64 = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v64;
  v65 = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v65;
  v66 = *((_DWORD *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((_DWORD *)a2 + 43) = v66;
  v67 = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v67;
  v68 = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v68;
  v69 = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v69;
  v70 = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v70;
  v71 = *((_DWORD *)this + 41);
  *((_DWORD *)this + 41) = *((_DWORD *)a2 + 41);
  *((_DWORD *)a2 + 41) = v71;
  v72 = *((_DWORD *)this + 40);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
  *((_DWORD *)a2 + 40) = v72;
  v73 = *((_DWORD *)this + 39);
  *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
  *((_DWORD *)a2 + 39) = v73;
  v74 = *((_DWORD *)this + 68);
  *((_DWORD *)this + 68) = *((_DWORD *)a2 + 68);
  *((_DWORD *)a2 + 68) = v74;
  v75 = *((_DWORD *)this + 69);
  *((_DWORD *)this + 69) = *((_DWORD *)a2 + 69);
  *((_DWORD *)a2 + 69) = v75;
  result = *((float *)this + 67);
  *((_DWORD *)this + 67) = *((_DWORD *)a2 + 67);
  *((float *)a2 + 67) = result;
  return result;
}

float CMMsl::KappaRolloverCrashResult::KappaRolloverCrashResult(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float result;

  *(_QWORD *)a1 = &off_25135EC18;
  v2 = *(_QWORD *)(a2 + 316);
  *(_DWORD *)(a1 + 324) = *(_DWORD *)(a2 + 324);
  *(_QWORD *)(a1 + 316) = v2;
  *(_DWORD *)(a2 + 324) = 0;
  *(_QWORD *)(a2 + 316) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 310) = *(_BYTE *)(a2 + 310);
  *(_BYTE *)(a1 + 311) = *(_BYTE *)(a2 + 311);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(_BYTE *)(a1 + 308) = *(_BYTE *)(a2 + 308);
  *(_BYTE *)(a1 + 305) = *(_BYTE *)(a2 + 305);
  *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 307) = *(_BYTE *)(a2 + 307);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 313) = *(_BYTE *)(a2 + 313);
  *(_BYTE *)(a1 + 306) = *(_BYTE *)(a2 + 306);
  *(_BYTE *)(a1 + 309) = *(_BYTE *)(a2 + 309);
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(_DWORD *)(a1 + 228) = *(_DWORD *)(a2 + 228);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_DWORD *)(a1 + 284) = *(_DWORD *)(a2 + 284);
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 232);
  *(_DWORD *)(a1 + 252) = *(_DWORD *)(a2 + 252);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 288);
  *(_DWORD *)(a1 + 236) = *(_DWORD *)(a2 + 236);
  *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 256);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_DWORD *)(a1 + 292) = *(_DWORD *)(a2 + 292);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  *(_DWORD *)(a1 + 260) = *(_DWORD *)(a2 + 260);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 196);
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  *(_DWORD *)(a1 + 244) = *(_DWORD *)(a2 + 244);
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 264);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  *(_DWORD *)(a1 + 300) = *(_DWORD *)(a2 + 300);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
  result = *(float *)(a2 + 268);
  *(float *)(a1 + 268) = result;
  return result;
}

CMMsl *CMMsl::KappaRolloverCrashResult::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::KappaRolloverCrashResult *v3;
  _QWORD v5[42];

  v5[41] = *MEMORY[0x24BDAC8D0];
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaRolloverCrashResult::KappaRolloverCrashResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaRolloverCrashResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaRolloverCrashResult::formatText(CMMsl::KappaRolloverCrashResult *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t v6;
  int v7;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)((char *)this + 316);
  v6 = *(_QWORD *)((char *)this + 316);
  if ((v6 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "audioRolloverDvChaosThreshold", *((float *)this + 4));
    v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
    v6 = *v5;
    if ((*v5 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  if ((v6 & 4) != 0)
  {
LABEL_5:
    PB::TextFormatter::format(a2, "audioRolloverDvChaosThresholdCenter", *((float *)this + 5));
    v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
    v6 = *v5;
  }
LABEL_6:
  if ((v6 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "audioRolloverDvChaosThresholdMax", *((float *)this + 6));
    v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
    v6 = *v5;
    if ((*v5 & 0x10) == 0)
    {
LABEL_8:
      if ((v6 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_91;
    }
  }
  else if ((v6 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  PB::TextFormatter::format(a2, "audioRolloverDvChaosThresholdMin", *((float *)this + 7));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v6 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_92;
  }
LABEL_91:
  PB::TextFormatter::format(a2, "audioRolloverDvChaosThresholdStretch", *((float *)this + 8));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v6 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_93;
  }
LABEL_92:
  PB::TextFormatter::format(a2, "audioRolloverDvEnergyThreshold", *((float *)this + 9));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x80) == 0)
  {
LABEL_11:
    if ((v6 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_94;
  }
LABEL_93:
  PB::TextFormatter::format(a2, "audioRolloverDvEnergyThresholdCenter", *((float *)this + 10));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x100) == 0)
  {
LABEL_12:
    if ((v6 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_95;
  }
LABEL_94:
  PB::TextFormatter::format(a2, "audioRolloverDvEnergyThresholdMax", *((float *)this + 11));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x200) == 0)
  {
LABEL_13:
    if ((v6 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_96;
  }
LABEL_95:
  PB::TextFormatter::format(a2, "audioRolloverDvEnergyThresholdMin", *((float *)this + 12));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x400) == 0)
  {
LABEL_14:
    if ((v6 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_97;
  }
LABEL_96:
  PB::TextFormatter::format(a2, "audioRolloverDvEnergyThresholdStretch", *((float *)this + 13));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x800) == 0)
  {
LABEL_15:
    if ((v6 & 0x1000) == 0)
      goto LABEL_16;
    goto LABEL_98;
  }
LABEL_97:
  PB::TextFormatter::format(a2, "audioRolloverDvMaxRmsThresholdCenter", *((float *)this + 14));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x1000) == 0)
  {
LABEL_16:
    if ((v6 & 0x2000) == 0)
      goto LABEL_17;
    goto LABEL_99;
  }
LABEL_98:
  PB::TextFormatter::format(a2, "audioRolloverDvMaxRmsThresholdMax", *((float *)this + 15));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x2000) == 0)
  {
LABEL_17:
    if ((v6 & 0x4000) == 0)
      goto LABEL_18;
    goto LABEL_100;
  }
LABEL_99:
  PB::TextFormatter::format(a2, "audioRolloverDvMaxRmsThresholdMin", *((float *)this + 16));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x4000) == 0)
  {
LABEL_18:
    if ((v6 & 0x8000) == 0)
      goto LABEL_19;
    goto LABEL_101;
  }
LABEL_100:
  PB::TextFormatter::format(a2, "audioRolloverDvMaxRmsThresholdStretch", *((float *)this + 17));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x8000) == 0)
  {
LABEL_19:
    if ((v6 & 0x10000) == 0)
      goto LABEL_20;
    goto LABEL_102;
  }
LABEL_101:
  PB::TextFormatter::format(a2, "audioRolloverDvRmsThreshold", *((float *)this + 18));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x10000) == 0)
  {
LABEL_20:
    if ((v6 & 0x20000) == 0)
      goto LABEL_21;
    goto LABEL_103;
  }
LABEL_102:
  PB::TextFormatter::format(a2, "baroEscalateMaxAccelNormThreshold", *((float *)this + 19));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x20000) == 0)
  {
LABEL_21:
    if ((v6 & 0x40000) == 0)
      goto LABEL_22;
    goto LABEL_104;
  }
LABEL_103:
  PB::TextFormatter::format(a2, "baroEscalateSpinNormThreshold", *((float *)this + 20));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x40000) == 0)
  {
LABEL_22:
    if ((v6 & 0x80000) == 0)
      goto LABEL_23;
    goto LABEL_105;
  }
LABEL_104:
  PB::TextFormatter::format(a2, "cumulativeRotation", *((float *)this + 21));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x80000) == 0)
  {
LABEL_23:
    if ((v6 & 0x100000) == 0)
      goto LABEL_24;
    goto LABEL_106;
  }
LABEL_105:
  PB::TextFormatter::format(a2, "cumulativeRotationThreshold", *((float *)this + 22));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x100000) == 0)
  {
LABEL_24:
    if ((v6 & 0x200000) == 0)
      goto LABEL_25;
    goto LABEL_107;
  }
LABEL_106:
  PB::TextFormatter::format(a2, "cumulativeRotationThresholdWithAudio", *((float *)this + 23));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x200000) == 0)
  {
LABEL_25:
    if ((v6 & 0x400000) == 0)
      goto LABEL_26;
    goto LABEL_108;
  }
LABEL_107:
  PB::TextFormatter::format(a2, "cumulativeRotationThresholdWithoutAudio", *((float *)this + 24));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x400000) == 0)
  {
LABEL_26:
    if ((v6 & 0x800000) == 0)
      goto LABEL_27;
    goto LABEL_109;
  }
LABEL_108:
  PB::TextFormatter::format(a2, "cumulativeRotationThresholdWithoutAudioStandaloneBaroNeeded", *((float *)this + 25));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x800000) == 0)
  {
LABEL_27:
    if ((v6 & 0x1000000) == 0)
      goto LABEL_28;
    goto LABEL_110;
  }
LABEL_109:
  PB::TextFormatter::format(a2, "cumulativeRotationThresholdWithoutAudioStandaloneFull", *((float *)this + 26));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x1000000) == 0)
  {
LABEL_28:
    if ((v6 & 0x2000000) == 0)
      goto LABEL_29;
    goto LABEL_111;
  }
LABEL_110:
  PB::TextFormatter::format(a2, "deltaVXYOverEpoch", *((float *)this + 27));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x2000000) == 0)
  {
LABEL_29:
    if ((v7 & 0x200) == 0)
      goto LABEL_30;
    goto LABEL_112;
  }
LABEL_111:
  PB::TextFormatter::format(a2, "detectorRegime");
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*((_WORD *)this + 162) & 0x200) == 0)
  {
LABEL_30:
    if ((v7 & 0x400) == 0)
      goto LABEL_31;
    goto LABEL_113;
  }
LABEL_112:
  PB::TextFormatter::format(a2, "hasAudioInEpoch");
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*((_WORD *)this + 162) & 0x400) == 0)
  {
LABEL_31:
    if ((v7 & 0x800) == 0)
      goto LABEL_32;
    goto LABEL_114;
  }
LABEL_113:
  PB::TextFormatter::format(a2, "isAudioRollover");
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*((_WORD *)this + 162) & 0x800) == 0)
  {
LABEL_32:
    if ((v7 & 0x1000) == 0)
      goto LABEL_33;
    goto LABEL_115;
  }
LABEL_114:
  PB::TextFormatter::format(a2, "isAudioRolloverDv");
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*((_WORD *)this + 162) & 0x1000) == 0)
  {
LABEL_33:
    if ((v7 & 0x2000) == 0)
      goto LABEL_34;
    goto LABEL_116;
  }
LABEL_115:
  PB::TextFormatter::format(a2, "isAudioSupported");
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*((_WORD *)this + 162) & 0x2000) == 0)
  {
LABEL_34:
    if ((v7 & 0x4000) == 0)
      goto LABEL_35;
    goto LABEL_117;
  }
LABEL_116:
  PB::TextFormatter::format(a2, "isBaro");
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*((_WORD *)this + 162) & 0x4000) == 0)
  {
LABEL_35:
    if ((v6 & 0x4000000) == 0)
      goto LABEL_36;
    goto LABEL_118;
  }
LABEL_117:
  PB::TextFormatter::format(a2, "isCompanionConnected");
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x4000000) == 0)
  {
LABEL_36:
    if ((v6 & 0x8000000) == 0)
      goto LABEL_37;
    goto LABEL_119;
  }
LABEL_118:
  PB::TextFormatter::format(a2, "lowSenseWithAudioCumulativeRotationThreshold", *((float *)this + 29));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x8000000) == 0)
  {
LABEL_37:
    if ((v6 & 0x10000000) == 0)
      goto LABEL_38;
    goto LABEL_120;
  }
LABEL_119:
  PB::TextFormatter::format(a2, "lowSenseWithAudioMaxAccelNormThreshold", *((float *)this + 30));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x10000000) == 0)
  {
LABEL_38:
    if ((v6 & 0x20000000) == 0)
      goto LABEL_39;
    goto LABEL_121;
  }
LABEL_120:
  PB::TextFormatter::format(a2, "lowSenseWithAudioParBaroCumulativeRotationThreshold", *((float *)this + 31));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x20000000) == 0)
  {
LABEL_39:
    if ((v6 & 0x40000000) == 0)
      goto LABEL_40;
    goto LABEL_122;
  }
LABEL_121:
  PB::TextFormatter::format(a2, "lowSenseWithAudioParBaroNormThreshold", *((float *)this + 32));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x40000000) == 0)
  {
LABEL_40:
    if ((v6 & 0x80000000) == 0)
      goto LABEL_41;
    goto LABEL_123;
  }
LABEL_122:
  PB::TextFormatter::format(a2, "lowSenseWithAudioPeakPressureThreshold", *((float *)this + 33));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x80000000) == 0)
  {
LABEL_41:
    if ((v6 & 0x100000000) == 0)
      goto LABEL_42;
    goto LABEL_124;
  }
LABEL_123:
  PB::TextFormatter::format(a2, "lowSenseWithAudioZgtimeThreshold", *((float *)this + 34));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x100000000) == 0)
  {
LABEL_42:
    if ((v6 & 0x200000000) == 0)
      goto LABEL_43;
    goto LABEL_125;
  }
LABEL_124:
  PB::TextFormatter::format(a2, "lowSenseWithAudiodvThreshold1", *((float *)this + 35));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x200000000) == 0)
  {
LABEL_43:
    if ((v6 & 0x400000000) == 0)
      goto LABEL_44;
    goto LABEL_126;
  }
LABEL_125:
  PB::TextFormatter::format(a2, "lowSenseWithAudiodvThreshold2", *((float *)this + 36));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x400000000) == 0)
  {
LABEL_44:
    if ((v6 & 0x800000000) == 0)
      goto LABEL_45;
    goto LABEL_127;
  }
LABEL_126:
  PB::TextFormatter::format(a2, "lowSenseWithoutAudioCumulativeRotationThreshold", *((float *)this + 37));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x800000000) == 0)
  {
LABEL_45:
    if ((v6 & 0x1000000000) == 0)
      goto LABEL_46;
    goto LABEL_128;
  }
LABEL_127:
  PB::TextFormatter::format(a2, "lowSenseWithoutAudioMaxAccelNormThreshold", *((float *)this + 38));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x1000000000) == 0)
  {
LABEL_46:
    if ((v6 & 0x2000000000) == 0)
      goto LABEL_47;
    goto LABEL_129;
  }
LABEL_128:
  PB::TextFormatter::format(a2, "lowSenseWithoutAudioParBaroCumulativeRotationThreshold", *((float *)this + 39));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x2000000000) == 0)
  {
LABEL_47:
    if ((v6 & 0x4000000000) == 0)
      goto LABEL_48;
    goto LABEL_130;
  }
LABEL_129:
  PB::TextFormatter::format(a2, "lowSenseWithoutAudioParBaroNormThreshold", *((float *)this + 40));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x4000000000) == 0)
  {
LABEL_48:
    if ((v6 & 0x8000000000) == 0)
      goto LABEL_49;
    goto LABEL_131;
  }
LABEL_130:
  PB::TextFormatter::format(a2, "lowSenseWithoutAudioPeakPressureThreshold", *((float *)this + 41));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x8000000000) == 0)
  {
LABEL_49:
    if ((v6 & 0x10000000000) == 0)
      goto LABEL_50;
    goto LABEL_132;
  }
LABEL_131:
  PB::TextFormatter::format(a2, "lowSenseWithoutAudioZgtimeThreshold", *((float *)this + 42));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x10000000000) == 0)
  {
LABEL_50:
    if ((v6 & 0x20000000000) == 0)
      goto LABEL_51;
    goto LABEL_133;
  }
LABEL_132:
  PB::TextFormatter::format(a2, "lowSenseWithoutAudiodvThreshold1", *((float *)this + 43));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x20000000000) == 0)
  {
LABEL_51:
    if ((v6 & 0x40000000000) == 0)
      goto LABEL_52;
    goto LABEL_134;
  }
LABEL_133:
  PB::TextFormatter::format(a2, "lowSenseWithoutAudiodvThreshold2", *((float *)this + 44));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x40000000000) == 0)
  {
LABEL_52:
    if ((v6 & 0x80000000000) == 0)
      goto LABEL_53;
    goto LABEL_135;
  }
LABEL_134:
  PB::TextFormatter::format(a2, "maxAccelNorm", *((float *)this + 45));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x80000000000) == 0)
  {
LABEL_53:
    if ((v6 & 0x100000000000) == 0)
      goto LABEL_54;
    goto LABEL_136;
  }
LABEL_135:
  PB::TextFormatter::format(a2, "maxAccelNormThreshold", *((float *)this + 46));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x100000000000) == 0)
  {
LABEL_54:
    if ((v6 & 0x200000000000) == 0)
      goto LABEL_55;
    goto LABEL_137;
  }
LABEL_136:
  PB::TextFormatter::format(a2, "maxAccelNormThresholdWithAudio", *((float *)this + 47));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x200000000000) == 0)
  {
LABEL_55:
    if ((v6 & 0x400000000000) == 0)
      goto LABEL_56;
    goto LABEL_138;
  }
LABEL_137:
  PB::TextFormatter::format(a2, "maxAccelNormThresholdWithoutAudio", *((float *)this + 48));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x400000000000) == 0)
  {
LABEL_56:
    if ((v6 & 0x800000000000) == 0)
      goto LABEL_57;
    goto LABEL_139;
  }
LABEL_138:
  PB::TextFormatter::format(a2, "maxAccelNormThresholdWithoutAudioStandaloneBaroNeeded", *((float *)this + 49));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x800000000000) == 0)
  {
LABEL_57:
    if ((v6 & 0x1000000000000) == 0)
      goto LABEL_58;
    goto LABEL_140;
  }
LABEL_139:
  PB::TextFormatter::format(a2, "maxAccelNormThresholdWithoutAudioStandaloneFull", *((float *)this + 50));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x1000000000000) == 0)
  {
LABEL_58:
    if ((v6 & 0x2000000000000) == 0)
      goto LABEL_59;
    goto LABEL_141;
  }
LABEL_140:
  PB::TextFormatter::format(a2, "maxAudioRolloverChaos", *((float *)this + 51));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x2000000000000) == 0)
  {
LABEL_59:
    if ((v6 & 0x4000000000000) == 0)
      goto LABEL_60;
    goto LABEL_142;
  }
LABEL_141:
  PB::TextFormatter::format(a2, "maxAudioRolloverEnergy", *((float *)this + 52));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x4000000000000) == 0)
  {
LABEL_60:
    if ((v6 & 0x8000000000000) == 0)
      goto LABEL_61;
    goto LABEL_143;
  }
LABEL_142:
  PB::TextFormatter::format(a2, "maxAudioRolloverRms", *((float *)this + 53));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x8000000000000) == 0)
  {
LABEL_61:
    if ((v6 & 0x10000000000000) == 0)
      goto LABEL_62;
    goto LABEL_144;
  }
LABEL_143:
  PB::TextFormatter::format(a2, "maxPulse", *((float *)this + 54));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x10000000000000) == 0)
  {
LABEL_62:
    if ((v6 & 0x20000000000000) == 0)
      goto LABEL_63;
    goto LABEL_145;
  }
LABEL_144:
  PB::TextFormatter::format(a2, "numShortAudio");
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x20000000000000) == 0)
  {
LABEL_63:
    if ((v7 & 0x8000) == 0)
      goto LABEL_64;
    goto LABEL_146;
  }
LABEL_145:
  PB::TextFormatter::format(a2, "peakPressure", *((float *)this + 56));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*((_WORD *)this + 162) & 0x8000) == 0)
  {
LABEL_64:
    if ((v7 & 0x10000) == 0)
      goto LABEL_65;
    goto LABEL_147;
  }
LABEL_146:
  PB::TextFormatter::format(a2, "rolloverCrashDetectorDecision");
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((v7 & 0x10000) == 0)
  {
LABEL_65:
    if ((v6 & 0x40000000000000) == 0)
      goto LABEL_66;
    goto LABEL_148;
  }
LABEL_147:
  PB::TextFormatter::format(a2, "rolloverCrashDetectorDecisionLowSense");
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x40000000000000) == 0)
  {
LABEL_66:
    if ((v6 & 0x80000000000000) == 0)
      goto LABEL_67;
    goto LABEL_149;
  }
LABEL_148:
  PB::TextFormatter::format(a2, "rolloverDetectorRegimeDeltaVThreshold1", *((float *)this + 57));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x80000000000000) == 0)
  {
LABEL_67:
    if ((v6 & 0x100000000000000) == 0)
      goto LABEL_68;
    goto LABEL_150;
  }
LABEL_149:
  PB::TextFormatter::format(a2, "rolloverDetectorRegimeDeltaVThreshold1WithAudio", *((float *)this + 58));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x100000000000000) == 0)
  {
LABEL_68:
    if ((v6 & 0x200000000000000) == 0)
      goto LABEL_69;
    goto LABEL_151;
  }
LABEL_150:
  PB::TextFormatter::format(a2, "rolloverDetectorRegimeDeltaVThreshold1WithoutAudio", *((float *)this + 59));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x200000000000000) == 0)
  {
LABEL_69:
    if ((v6 & 0x400000000000000) == 0)
      goto LABEL_70;
    goto LABEL_152;
  }
LABEL_151:
  PB::TextFormatter::format(a2, "rolloverDetectorRegimeDeltaVThreshold1WithoutAudioStandaloneBaroNeeded", *((float *)this + 60));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x400000000000000) == 0)
  {
LABEL_70:
    if ((v6 & 0x800000000000000) == 0)
      goto LABEL_71;
    goto LABEL_153;
  }
LABEL_152:
  PB::TextFormatter::format(a2, "rolloverDetectorRegimeDeltaVThreshold1WithoutAudioStandaloneFull", *((float *)this + 61));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x800000000000000) == 0)
  {
LABEL_71:
    if ((v6 & 0x1000000000000000) == 0)
      goto LABEL_72;
    goto LABEL_154;
  }
LABEL_153:
  PB::TextFormatter::format(a2, "rolloverDetectorRegimeDeltaVThreshold2", *((float *)this + 62));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x1000000000000000) == 0)
  {
LABEL_72:
    if ((v6 & 0x2000000000000000) == 0)
      goto LABEL_73;
    goto LABEL_155;
  }
LABEL_154:
  PB::TextFormatter::format(a2, "rolloverDetectorRegimeDeltaVThreshold2WithAudio", *((float *)this + 63));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x2000000000000000) == 0)
  {
LABEL_73:
    if ((v6 & 0x4000000000000000) == 0)
      goto LABEL_74;
    goto LABEL_156;
  }
LABEL_155:
  PB::TextFormatter::format(a2, "rolloverDetectorRegimeDeltaVThreshold2WithoutAudio", *((float *)this + 64));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x4000000000000000) == 0)
  {
LABEL_74:
    if ((v6 & 0x8000000000000000) == 0)
      goto LABEL_75;
    goto LABEL_157;
  }
LABEL_156:
  PB::TextFormatter::format(a2, "rolloverDetectorRegimeDeltaVThreshold2WithoutAudioStandaloneBaroNeeded", *((float *)this + 65));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x8000000000000000) == 0)
  {
LABEL_75:
    if ((v7 & 1) == 0)
      goto LABEL_76;
    goto LABEL_158;
  }
LABEL_157:
  PB::TextFormatter::format(a2, "rolloverDetectorRegimeDeltaVThreshold2WithoutAudioStandaloneFull", *((float *)this + 66));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*((_WORD *)this + 162) & 1) == 0)
  {
LABEL_76:
    if ((v7 & 0x20000) == 0)
      goto LABEL_77;
    goto LABEL_159;
  }
LABEL_158:
  PB::TextFormatter::format(a2, "shortAudioMaxPulseThreshold", *((float *)this + 67));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((v7 & 0x20000) == 0)
  {
LABEL_77:
    if ((v7 & 2) == 0)
      goto LABEL_78;
    goto LABEL_160;
  }
LABEL_159:
  PB::TextFormatter::format(a2, "shortAudioMet");
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*((_WORD *)this + 162) & 2) == 0)
  {
LABEL_78:
    if ((v7 & 4) == 0)
      goto LABEL_79;
    goto LABEL_161;
  }
LABEL_160:
  PB::TextFormatter::format(a2, "shortAudioNumThreshold", *((float *)this + 68));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*((_WORD *)this + 162) & 4) == 0)
  {
LABEL_79:
    if ((v7 & 0x40000) == 0)
      goto LABEL_80;
    goto LABEL_162;
  }
LABEL_161:
  PB::TextFormatter::format(a2, "shortAudioPeakPressureThreshold", *((float *)this + 69));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((v7 & 0x40000) == 0)
  {
LABEL_80:
    if ((v6 & 1) == 0)
      goto LABEL_81;
    goto LABEL_163;
  }
LABEL_162:
  PB::TextFormatter::format(a2, "strongerAudioRollover");
  LOWORD(v7) = *((_WORD *)this + 162);
  if ((*v5 & 1) == 0)
  {
LABEL_81:
    if ((v7 & 8) == 0)
      goto LABEL_82;
    goto LABEL_164;
  }
LABEL_163:
  PB::TextFormatter::format(a2, "timestamp");
  LOWORD(v7) = *((_WORD *)this + 162);
  if ((v7 & 8) == 0)
  {
LABEL_82:
    if ((v7 & 0x10) == 0)
      goto LABEL_83;
    goto LABEL_165;
  }
LABEL_164:
  PB::TextFormatter::format(a2, "zgTime", *((float *)this + 70));
  LOWORD(v7) = *((_WORD *)this + 162);
  if ((v7 & 0x10) == 0)
  {
LABEL_83:
    if ((v7 & 0x20) == 0)
      goto LABEL_84;
    goto LABEL_166;
  }
LABEL_165:
  PB::TextFormatter::format(a2, "zgTimeThreshold", *((float *)this + 71));
  LOWORD(v7) = *((_WORD *)this + 162);
  if ((v7 & 0x20) == 0)
  {
LABEL_84:
    if ((v7 & 0x40) == 0)
      goto LABEL_85;
    goto LABEL_167;
  }
LABEL_166:
  PB::TextFormatter::format(a2, "zgTimeThresholdWithAudio", *((float *)this + 72));
  LOWORD(v7) = *((_WORD *)this + 162);
  if ((v7 & 0x40) == 0)
  {
LABEL_85:
    if ((v7 & 0x80) == 0)
      goto LABEL_86;
LABEL_168:
    PB::TextFormatter::format(a2, "zgTimeThresholdWithoutAudioStandaloneBaroNeeded", *((float *)this + 74));
    if ((*((_WORD *)this + 162) & 0x100) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_87;
  }
LABEL_167:
  PB::TextFormatter::format(a2, "zgTimeThresholdWithoutAudio", *((float *)this + 73));
  LOWORD(v7) = *((_WORD *)this + 162);
  if ((v7 & 0x80) != 0)
    goto LABEL_168;
LABEL_86:
  if ((v7 & 0x100) != 0)
LABEL_87:
    PB::TextFormatter::format(a2, "zgTimeThresholdWithoutAudioStandaloneFull", *((float *)this + 75));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaRolloverCrashResult::readFrom(CMMsl::KappaRolloverCrashResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  char *v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t result;
  unint64_t v21;
  unint64_t v22;
  int v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  BOOL v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  BOOL v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  BOOL v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  BOOL v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  char v55;
  unint64_t v56;
  unint64_t v57;
  int v58;
  BOOL v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  int v67;
  unsigned int v68;
  unint64_t v69;
  unint64_t v70;
  int v71;
  BOOL v72;
  char v73;
  unint64_t v74;
  unint64_t v75;
  int v76;
  BOOL v77;
  char v78;
  unint64_t v79;
  unint64_t v80;
  int v81;
  BOOL v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  int v93;
  unsigned int v94;
  unint64_t v95;
  unint64_t v96;
  int v97;
  BOOL v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  char v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  char v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  char v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  char v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  char v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  char v159;
  unint64_t v160;
  char v161;
  unint64_t v162;
  char v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  char v168;
  unsigned int v169;
  uint64_t v170;
  unint64_t v171;
  char v172;
  char v173;
  unint64_t v174;
  unint64_t v175;
  int v176;
  BOOL v177;
  char v178;
  unsigned int v179;
  unint64_t v180;
  char v181;
  char v182;
  unsigned int v183;
  unint64_t v184;
  char v185;
  char v186;
  unsigned int v187;
  unint64_t v188;
  char v189;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (char *)this + 316;
    while (1)
    {
      v9 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_20;
      }
LABEL_22:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v21 = v12 >> 3;
      if ((int)(v12 >> 3) <= 100)
      {
        switch((_DWORD)v21)
        {
          case 1:
            *(_QWORD *)v8 |= 1uLL;
            v165 = *((_QWORD *)a2 + 1);
            v166 = *((_QWORD *)a2 + 2);
            v167 = *(_QWORD *)a2;
            if (v165 > 0xFFFFFFFFFFFFFFF5 || v165 + 10 > v166)
            {
              v186 = 0;
              v187 = 0;
              v170 = 0;
              if (v166 <= v165)
                v166 = *((_QWORD *)a2 + 1);
              while (1)
              {
                if (v166 == v165)
                {
                  v170 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                  goto LABEL_338;
                }
                v188 = v165 + 1;
                v189 = *(_BYTE *)(v167 + v165);
                *((_QWORD *)a2 + 1) = v188;
                v170 |= (unint64_t)(v189 & 0x7F) << v186;
                if ((v189 & 0x80) == 0)
                  break;
                v186 += 7;
                v165 = v188;
                v15 = v187++ > 8;
                if (v15)
                {
LABEL_317:
                  v170 = 0;
                  goto LABEL_338;
                }
              }
              if (*((_BYTE *)a2 + 24))
                v170 = 0;
            }
            else
            {
              v168 = 0;
              v169 = 0;
              v170 = 0;
              while (1)
              {
                v171 = v165 + 1;
                *((_QWORD *)a2 + 1) = v165 + 1;
                v172 = *(_BYTE *)(v167 + v165);
                v170 |= (unint64_t)(v172 & 0x7F) << v168;
                if ((v172 & 0x80) == 0)
                  break;
                v168 += 7;
                v165 = v171;
                v15 = v169++ > 8;
                if (v15)
                  goto LABEL_317;
              }
            }
LABEL_338:
            *((_QWORD *)this + 1) = v170;
            break;
          case 2:
            v173 = v8[10];
            *((_WORD *)v8 + 4) |= 0x8000u;
            v8[10] = v173;
            v174 = *((_QWORD *)a2 + 1);
            if (v174 >= *((_QWORD *)a2 + 2))
            {
              v177 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v175 = v174 + 1;
              v176 = *(unsigned __int8 *)(*(_QWORD *)a2 + v174);
              *((_QWORD *)a2 + 1) = v175;
              v177 = v176 != 0;
            }
            *((_BYTE *)this + 310) = v177;
            break;
          case 3:
            v23 = *((unsigned __int16 *)v8 + 4);
            v24 = (v23 | (v8[10] << 16) | 0x10000u) >> 16;
            *((_WORD *)v8 + 4) = v23;
            v8[10] = v24;
            v25 = *((_QWORD *)a2 + 1);
            if (v25 >= *((_QWORD *)a2 + 2))
            {
              v28 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v26 = v25 + 1;
              v27 = *(unsigned __int8 *)(*(_QWORD *)a2 + v25);
              *((_QWORD *)a2 + 1) = v26;
              v28 = v27 != 0;
            }
            *((_BYTE *)this + 311) = v28;
            break;
          default:
LABEL_20:
            result = PB::Reader::skip(a2);
            if (!(_DWORD)result)
              return result;
            break;
        }
      }
      else
      {
        switch((int)v21)
        {
          case 101:
            *(_QWORD *)v8 |= 0x40000000000uLL;
            v22 = *((_QWORD *)a2 + 1);
            if (v22 > 0xFFFFFFFFFFFFFFFBLL || v22 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 45) = *(_DWORD *)(*(_QWORD *)a2 + v22);
            goto LABEL_321;
          case 102:
            *(_QWORD *)v8 |= 0x40000uLL;
            v29 = *((_QWORD *)a2 + 1);
            if (v29 > 0xFFFFFFFFFFFFFFFBLL || v29 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v29);
            goto LABEL_321;
          case 103:
            v30 = v8[10];
            *((_WORD *)v8 + 4) |= 8u;
            v8[10] = v30;
            v31 = *((_QWORD *)a2 + 1);
            if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 70) = *(_DWORD *)(*(_QWORD *)a2 + v31);
            goto LABEL_321;
          case 104:
            v32 = v8[10];
            *((_WORD *)v8 + 4) |= 0x2000u;
            v8[10] = v32;
            v33 = *((_QWORD *)a2 + 1);
            if (v33 >= *((_QWORD *)a2 + 2))
            {
              v36 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v34 = v33 + 1;
              v35 = *(unsigned __int8 *)(*(_QWORD *)a2 + v33);
              *((_QWORD *)a2 + 1) = v34;
              v36 = v35 != 0;
            }
            *((_BYTE *)this + 308) = v36;
            goto LABEL_322;
          case 105:
            v37 = v8[10];
            *((_WORD *)v8 + 4) |= 0x400u;
            v8[10] = v37;
            v38 = *((_QWORD *)a2 + 1);
            if (v38 >= *((_QWORD *)a2 + 2))
            {
              v41 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v39 = v38 + 1;
              v40 = *(unsigned __int8 *)(*(_QWORD *)a2 + v38);
              *((_QWORD *)a2 + 1) = v39;
              v41 = v40 != 0;
            }
            *((_BYTE *)this + 305) = v41;
            goto LABEL_322;
          case 106:
            v42 = v8[10];
            *((_WORD *)v8 + 4) |= 0x200u;
            v8[10] = v42;
            v43 = *((_QWORD *)a2 + 1);
            if (v43 >= *((_QWORD *)a2 + 2))
            {
              v46 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v44 = v43 + 1;
              v45 = *(unsigned __int8 *)(*(_QWORD *)a2 + v43);
              *((_QWORD *)a2 + 1) = v44;
              v46 = v45 != 0;
            }
            *((_BYTE *)this + 304) = v46;
            goto LABEL_322;
          case 107:
            *(_QWORD *)v8 |= 0x2000000uLL;
            v47 = *((_QWORD *)a2 + 1);
            v48 = *((_QWORD *)a2 + 2);
            v49 = *(_QWORD *)a2;
            if (v47 <= 0xFFFFFFFFFFFFFFF5 && v47 + 10 <= v48)
            {
              v50 = 0;
              v51 = 0;
              v52 = 0;
              do
              {
                v53 = v47 + 1;
                *((_QWORD *)a2 + 1) = v47 + 1;
                v54 = *(_BYTE *)(v49 + v47);
                v52 |= (unint64_t)(v54 & 0x7F) << v50;
                if ((v54 & 0x80) == 0)
                  goto LABEL_330;
                v50 += 7;
                v47 = v53;
                v15 = v51++ > 8;
              }
              while (!v15);
LABEL_293:
              LODWORD(v52) = 0;
              goto LABEL_330;
            }
            v178 = 0;
            v179 = 0;
            v52 = 0;
            if (v48 <= v47)
              v48 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v48 == v47)
              {
                LODWORD(v52) = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v180 = v47 + 1;
                v181 = *(_BYTE *)(v49 + v47);
                *((_QWORD *)a2 + 1) = v180;
                v52 |= (unint64_t)(v181 & 0x7F) << v178;
                if (v181 < 0)
                {
                  v178 += 7;
                  v47 = v180;
                  v15 = v179++ > 8;
                  if (v15)
                    goto LABEL_293;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v52) = 0;
              }
              break;
            }
LABEL_330:
            *((_DWORD *)this + 28) = v52;
            goto LABEL_322;
          case 108:
            v55 = v8[10];
            *((_WORD *)v8 + 4) |= 0x1000u;
            v8[10] = v55;
            v56 = *((_QWORD *)a2 + 1);
            if (v56 >= *((_QWORD *)a2 + 2))
            {
              v59 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v57 = v56 + 1;
              v58 = *(unsigned __int8 *)(*(_QWORD *)a2 + v56);
              *((_QWORD *)a2 + 1) = v57;
              v59 = v58 != 0;
            }
            *((_BYTE *)this + 307) = v59;
            goto LABEL_322;
          case 109:
            *(_QWORD *)v8 |= 0x1000000uLL;
            v60 = *((_QWORD *)a2 + 1);
            if (v60 > 0xFFFFFFFFFFFFFFFBLL || v60 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 27) = *(_DWORD *)(*(_QWORD *)a2 + v60);
            goto LABEL_321;
          case 110:
            *(_QWORD *)v8 |= 0x2000000000000uLL;
            v61 = *((_QWORD *)a2 + 1);
            if (v61 > 0xFFFFFFFFFFFFFFFBLL || v61 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 52) = *(_DWORD *)(*(_QWORD *)a2 + v61);
            goto LABEL_321;
          case 111:
            *(_QWORD *)v8 |= 0x1000000000000uLL;
            v62 = *((_QWORD *)a2 + 1);
            if (v62 > 0xFFFFFFFFFFFFFFFBLL || v62 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 51) = *(_DWORD *)(*(_QWORD *)a2 + v62);
            goto LABEL_321;
          case 112:
            *(_QWORD *)v8 |= 0x4000000000000uLL;
            v63 = *((_QWORD *)a2 + 1);
            if (v63 > 0xFFFFFFFFFFFFFFFBLL || v63 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 53) = *(_DWORD *)(*(_QWORD *)a2 + v63);
            goto LABEL_321;
          case 113:
            *(_QWORD *)v8 |= 0x40uLL;
            v64 = *((_QWORD *)a2 + 1);
            if (v64 > 0xFFFFFFFFFFFFFFFBLL || v64 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v64);
            goto LABEL_321;
          case 114:
            *(_QWORD *)v8 |= 2uLL;
            v65 = *((_QWORD *)a2 + 1);
            if (v65 > 0xFFFFFFFFFFFFFFFBLL || v65 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v65);
            goto LABEL_321;
          case 115:
            *(_QWORD *)v8 |= 0x8000uLL;
            v66 = *((_QWORD *)a2 + 1);
            if (v66 > 0xFFFFFFFFFFFFFFFBLL || v66 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v66);
            goto LABEL_321;
          case 116:
            v67 = *((unsigned __int16 *)v8 + 4);
            v68 = (v67 | (v8[10] << 16) | 0x40000u) >> 16;
            *((_WORD *)v8 + 4) = v67;
            v8[10] = v68;
            v69 = *((_QWORD *)a2 + 1);
            if (v69 >= *((_QWORD *)a2 + 2))
            {
              v72 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v70 = v69 + 1;
              v71 = *(unsigned __int8 *)(*(_QWORD *)a2 + v69);
              *((_QWORD *)a2 + 1) = v70;
              v72 = v71 != 0;
            }
            *((_BYTE *)this + 313) = v72;
            goto LABEL_322;
          case 117:
            v73 = v8[10];
            *((_WORD *)v8 + 4) |= 0x800u;
            v8[10] = v73;
            v74 = *((_QWORD *)a2 + 1);
            if (v74 >= *((_QWORD *)a2 + 2))
            {
              v77 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v75 = v74 + 1;
              v76 = *(unsigned __int8 *)(*(_QWORD *)a2 + v74);
              *((_QWORD *)a2 + 1) = v75;
              v77 = v76 != 0;
            }
            *((_BYTE *)this + 306) = v77;
            goto LABEL_322;
          case 118:
            v78 = v8[10];
            *((_WORD *)v8 + 4) |= 0x4000u;
            v8[10] = v78;
            v79 = *((_QWORD *)a2 + 1);
            if (v79 >= *((_QWORD *)a2 + 2))
            {
              v82 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v80 = v79 + 1;
              v81 = *(unsigned __int8 *)(*(_QWORD *)a2 + v79);
              *((_QWORD *)a2 + 1) = v80;
              v82 = v81 != 0;
            }
            *((_BYTE *)this + 309) = v82;
            goto LABEL_322;
          case 119:
            *(_QWORD *)v8 |= 0x20000000000000uLL;
            v83 = *((_QWORD *)a2 + 1);
            if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 56) = *(_DWORD *)(*(_QWORD *)a2 + v83);
            goto LABEL_321;
          case 120:
            *(_QWORD *)v8 |= 0x8000000000000uLL;
            v84 = *((_QWORD *)a2 + 1);
            if (v84 > 0xFFFFFFFFFFFFFFFBLL || v84 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 54) = *(_DWORD *)(*(_QWORD *)a2 + v84);
            goto LABEL_321;
          case 121:
            *(_QWORD *)v8 |= 0x10000000000000uLL;
            v85 = *((_QWORD *)a2 + 1);
            v86 = *((_QWORD *)a2 + 2);
            v87 = *(_QWORD *)a2;
            if (v85 <= 0xFFFFFFFFFFFFFFF5 && v85 + 10 <= v86)
            {
              v88 = 0;
              v89 = 0;
              v90 = 0;
              do
              {
                v91 = v85 + 1;
                *((_QWORD *)a2 + 1) = v85 + 1;
                v92 = *(_BYTE *)(v87 + v85);
                v90 |= (unint64_t)(v92 & 0x7F) << v88;
                if ((v92 & 0x80) == 0)
                  goto LABEL_334;
                v88 += 7;
                v85 = v91;
                v15 = v89++ > 8;
              }
              while (!v15);
LABEL_308:
              LODWORD(v90) = 0;
              goto LABEL_334;
            }
            v182 = 0;
            v183 = 0;
            v90 = 0;
            if (v86 <= v85)
              v86 = *((_QWORD *)a2 + 1);
            break;
          case 122:
            v93 = *((unsigned __int16 *)v8 + 4);
            v94 = (v93 | (v8[10] << 16) | 0x20000u) >> 16;
            *((_WORD *)v8 + 4) = v93;
            v8[10] = v94;
            v95 = *((_QWORD *)a2 + 1);
            if (v95 >= *((_QWORD *)a2 + 2))
            {
              v98 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v96 = v95 + 1;
              v97 = *(unsigned __int8 *)(*(_QWORD *)a2 + v95);
              *((_QWORD *)a2 + 1) = v96;
              v98 = v97 != 0;
            }
            *((_BYTE *)this + 312) = v98;
            goto LABEL_322;
          case 201:
            *(_QWORD *)v8 |= 0x40000000000000uLL;
            v99 = *((_QWORD *)a2 + 1);
            if (v99 > 0xFFFFFFFFFFFFFFFBLL || v99 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 57) = *(_DWORD *)(*(_QWORD *)a2 + v99);
            goto LABEL_321;
          case 202:
            *(_QWORD *)v8 |= 0x800000000000000uLL;
            v100 = *((_QWORD *)a2 + 1);
            if (v100 > 0xFFFFFFFFFFFFFFFBLL || v100 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 62) = *(_DWORD *)(*(_QWORD *)a2 + v100);
            goto LABEL_321;
          case 203:
            *(_QWORD *)v8 |= 0x80000uLL;
            v101 = *((_QWORD *)a2 + 1);
            if (v101 > 0xFFFFFFFFFFFFFFFBLL || v101 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v101);
            goto LABEL_321;
          case 204:
            *(_QWORD *)v8 |= 0x80000000000uLL;
            v102 = *((_QWORD *)a2 + 1);
            if (v102 > 0xFFFFFFFFFFFFFFFBLL || v102 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 46) = *(_DWORD *)(*(_QWORD *)a2 + v102);
            goto LABEL_321;
          case 205:
            v103 = v8[10];
            *((_WORD *)v8 + 4) |= 0x10u;
            v8[10] = v103;
            v104 = *((_QWORD *)a2 + 1);
            if (v104 > 0xFFFFFFFFFFFFFFFBLL || v104 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 71) = *(_DWORD *)(*(_QWORD *)a2 + v104);
            goto LABEL_321;
          case 206:
            *(_QWORD *)v8 |= 0x80000000000000uLL;
            v105 = *((_QWORD *)a2 + 1);
            if (v105 > 0xFFFFFFFFFFFFFFFBLL || v105 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 58) = *(_DWORD *)(*(_QWORD *)a2 + v105);
            goto LABEL_321;
          case 207:
            *(_QWORD *)v8 |= 0x1000000000000000uLL;
            v106 = *((_QWORD *)a2 + 1);
            if (v106 > 0xFFFFFFFFFFFFFFFBLL || v106 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 63) = *(_DWORD *)(*(_QWORD *)a2 + v106);
            goto LABEL_321;
          case 208:
            *(_QWORD *)v8 |= 0x100000uLL;
            v107 = *((_QWORD *)a2 + 1);
            if (v107 > 0xFFFFFFFFFFFFFFFBLL || v107 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 23) = *(_DWORD *)(*(_QWORD *)a2 + v107);
            goto LABEL_321;
          case 209:
            *(_QWORD *)v8 |= 0x100000000000uLL;
            v108 = *((_QWORD *)a2 + 1);
            if (v108 > 0xFFFFFFFFFFFFFFFBLL || v108 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 47) = *(_DWORD *)(*(_QWORD *)a2 + v108);
            goto LABEL_321;
          case 210:
            v109 = v8[10];
            *((_WORD *)v8 + 4) |= 0x20u;
            v8[10] = v109;
            v110 = *((_QWORD *)a2 + 1);
            if (v110 > 0xFFFFFFFFFFFFFFFBLL || v110 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 72) = *(_DWORD *)(*(_QWORD *)a2 + v110);
            goto LABEL_321;
          case 231:
            *(_QWORD *)v8 |= 0x100000000000000uLL;
            v111 = *((_QWORD *)a2 + 1);
            if (v111 > 0xFFFFFFFFFFFFFFFBLL || v111 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 59) = *(_DWORD *)(*(_QWORD *)a2 + v111);
            goto LABEL_321;
          case 232:
            *(_QWORD *)v8 |= 0x2000000000000000uLL;
            v112 = *((_QWORD *)a2 + 1);
            if (v112 > 0xFFFFFFFFFFFFFFFBLL || v112 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 64) = *(_DWORD *)(*(_QWORD *)a2 + v112);
            goto LABEL_321;
          case 233:
            *(_QWORD *)v8 |= 0x200000uLL;
            v113 = *((_QWORD *)a2 + 1);
            if (v113 > 0xFFFFFFFFFFFFFFFBLL || v113 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v113);
            goto LABEL_321;
          case 234:
            *(_QWORD *)v8 |= 0x200000000000uLL;
            v114 = *((_QWORD *)a2 + 1);
            if (v114 > 0xFFFFFFFFFFFFFFFBLL || v114 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 48) = *(_DWORD *)(*(_QWORD *)a2 + v114);
            goto LABEL_321;
          case 235:
            v115 = v8[10];
            *((_WORD *)v8 + 4) |= 0x40u;
            v8[10] = v115;
            v116 = *((_QWORD *)a2 + 1);
            if (v116 > 0xFFFFFFFFFFFFFFFBLL || v116 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 73) = *(_DWORD *)(*(_QWORD *)a2 + v116);
            goto LABEL_321;
          case 236:
            *(_QWORD *)v8 |= 0x80uLL;
            v117 = *((_QWORD *)a2 + 1);
            if (v117 > 0xFFFFFFFFFFFFFFFBLL || v117 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v117);
            goto LABEL_321;
          case 237:
            *(_QWORD *)v8 |= 0x400uLL;
            v118 = *((_QWORD *)a2 + 1);
            if (v118 > 0xFFFFFFFFFFFFFFFBLL || v118 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v118);
            goto LABEL_321;
          case 238:
            *(_QWORD *)v8 |= 0x200uLL;
            v119 = *((_QWORD *)a2 + 1);
            if (v119 > 0xFFFFFFFFFFFFFFFBLL || v119 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v119);
            goto LABEL_321;
          case 239:
            *(_QWORD *)v8 |= 0x100uLL;
            v120 = *((_QWORD *)a2 + 1);
            if (v120 > 0xFFFFFFFFFFFFFFFBLL || v120 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v120);
            goto LABEL_321;
          case 240:
            *(_QWORD *)v8 |= 4uLL;
            v121 = *((_QWORD *)a2 + 1);
            if (v121 > 0xFFFFFFFFFFFFFFFBLL || v121 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v121);
            goto LABEL_321;
          case 241:
            *(_QWORD *)v8 |= 0x20uLL;
            v122 = *((_QWORD *)a2 + 1);
            if (v122 > 0xFFFFFFFFFFFFFFFBLL || v122 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v122);
            goto LABEL_321;
          case 242:
            *(_QWORD *)v8 |= 0x10uLL;
            v123 = *((_QWORD *)a2 + 1);
            if (v123 > 0xFFFFFFFFFFFFFFFBLL || v123 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v123);
            goto LABEL_321;
          case 243:
            *(_QWORD *)v8 |= 8uLL;
            v124 = *((_QWORD *)a2 + 1);
            if (v124 > 0xFFFFFFFFFFFFFFFBLL || v124 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v124);
            goto LABEL_321;
          case 244:
            *(_QWORD *)v8 |= 0x800uLL;
            v125 = *((_QWORD *)a2 + 1);
            if (v125 > 0xFFFFFFFFFFFFFFFBLL || v125 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v125);
            goto LABEL_321;
          case 245:
            *(_QWORD *)v8 |= 0x4000uLL;
            v126 = *((_QWORD *)a2 + 1);
            if (v126 > 0xFFFFFFFFFFFFFFFBLL || v126 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v126);
            goto LABEL_321;
          case 246:
            *(_QWORD *)v8 |= 0x2000uLL;
            v127 = *((_QWORD *)a2 + 1);
            if (v127 > 0xFFFFFFFFFFFFFFFBLL || v127 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v127);
            goto LABEL_321;
          case 247:
            *(_QWORD *)v8 |= 0x1000uLL;
            v128 = *((_QWORD *)a2 + 1);
            if (v128 > 0xFFFFFFFFFFFFFFFBLL || v128 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v128);
            goto LABEL_321;
          case 248:
            *(_QWORD *)v8 |= 0x10000uLL;
            v129 = *((_QWORD *)a2 + 1);
            if (v129 > 0xFFFFFFFFFFFFFFFBLL || v129 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v129);
            goto LABEL_321;
          case 249:
            *(_QWORD *)v8 |= 0x20000uLL;
            v130 = *((_QWORD *)a2 + 1);
            if (v130 > 0xFFFFFFFFFFFFFFFBLL || v130 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v130);
            goto LABEL_321;
          case 250:
            *(_QWORD *)v8 |= 0x200000000000000uLL;
            v131 = *((_QWORD *)a2 + 1);
            if (v131 > 0xFFFFFFFFFFFFFFFBLL || v131 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 60) = *(_DWORD *)(*(_QWORD *)a2 + v131);
            goto LABEL_321;
          case 251:
            *(_QWORD *)v8 |= 0x4000000000000000uLL;
            v132 = *((_QWORD *)a2 + 1);
            if (v132 > 0xFFFFFFFFFFFFFFFBLL || v132 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 65) = *(_DWORD *)(*(_QWORD *)a2 + v132);
            goto LABEL_321;
          case 252:
            *(_QWORD *)v8 |= 0x400000uLL;
            v133 = *((_QWORD *)a2 + 1);
            if (v133 > 0xFFFFFFFFFFFFFFFBLL || v133 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v133);
            goto LABEL_321;
          case 253:
            *(_QWORD *)v8 |= 0x400000000000uLL;
            v134 = *((_QWORD *)a2 + 1);
            if (v134 > 0xFFFFFFFFFFFFFFFBLL || v134 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 49) = *(_DWORD *)(*(_QWORD *)a2 + v134);
            goto LABEL_321;
          case 254:
            v135 = v8[10];
            *((_WORD *)v8 + 4) |= 0x80u;
            v8[10] = v135;
            v136 = *((_QWORD *)a2 + 1);
            if (v136 > 0xFFFFFFFFFFFFFFFBLL || v136 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 74) = *(_DWORD *)(*(_QWORD *)a2 + v136);
            goto LABEL_321;
          case 255:
            *(_QWORD *)v8 |= 0x400000000000000uLL;
            v137 = *((_QWORD *)a2 + 1);
            if (v137 > 0xFFFFFFFFFFFFFFFBLL || v137 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 61) = *(_DWORD *)(*(_QWORD *)a2 + v137);
            goto LABEL_321;
          case 256:
            *(_QWORD *)v8 |= 0x8000000000000000;
            v138 = *((_QWORD *)a2 + 1);
            if (v138 > 0xFFFFFFFFFFFFFFFBLL || v138 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 66) = *(_DWORD *)(*(_QWORD *)a2 + v138);
            goto LABEL_321;
          case 257:
            *(_QWORD *)v8 |= 0x800000uLL;
            v139 = *((_QWORD *)a2 + 1);
            if (v139 > 0xFFFFFFFFFFFFFFFBLL || v139 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 26) = *(_DWORD *)(*(_QWORD *)a2 + v139);
            goto LABEL_321;
          case 258:
            *(_QWORD *)v8 |= 0x800000000000uLL;
            v140 = *((_QWORD *)a2 + 1);
            if (v140 > 0xFFFFFFFFFFFFFFFBLL || v140 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 50) = *(_DWORD *)(*(_QWORD *)a2 + v140);
            goto LABEL_321;
          case 259:
            v141 = v8[10];
            *((_WORD *)v8 + 4) |= 0x100u;
            v8[10] = v141;
            v142 = *((_QWORD *)a2 + 1);
            if (v142 > 0xFFFFFFFFFFFFFFFBLL || v142 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 75) = *(_DWORD *)(*(_QWORD *)a2 + v142);
            goto LABEL_321;
          case 260:
            *(_QWORD *)v8 |= 0x100000000uLL;
            v143 = *((_QWORD *)a2 + 1);
            if (v143 > 0xFFFFFFFFFFFFFFFBLL || v143 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 35) = *(_DWORD *)(*(_QWORD *)a2 + v143);
            goto LABEL_321;
          case 261:
            *(_QWORD *)v8 |= 0x200000000uLL;
            v144 = *((_QWORD *)a2 + 1);
            if (v144 > 0xFFFFFFFFFFFFFFFBLL || v144 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 36) = *(_DWORD *)(*(_QWORD *)a2 + v144);
            goto LABEL_321;
          case 262:
            *(_QWORD *)v8 |= 0x8000000uLL;
            v145 = *((_QWORD *)a2 + 1);
            if (v145 > 0xFFFFFFFFFFFFFFFBLL || v145 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 30) = *(_DWORD *)(*(_QWORD *)a2 + v145);
            goto LABEL_321;
          case 263:
            *(_QWORD *)v8 |= 0x4000000uLL;
            v146 = *((_QWORD *)a2 + 1);
            if (v146 > 0xFFFFFFFFFFFFFFFBLL || v146 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 29) = *(_DWORD *)(*(_QWORD *)a2 + v146);
            goto LABEL_321;
          case 264:
            *(_QWORD *)v8 |= 0x80000000uLL;
            v147 = *((_QWORD *)a2 + 1);
            if (v147 > 0xFFFFFFFFFFFFFFFBLL || v147 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 34) = *(_DWORD *)(*(_QWORD *)a2 + v147);
            goto LABEL_321;
          case 265:
            *(_QWORD *)v8 |= 0x40000000uLL;
            v148 = *((_QWORD *)a2 + 1);
            if (v148 > 0xFFFFFFFFFFFFFFFBLL || v148 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 33) = *(_DWORD *)(*(_QWORD *)a2 + v148);
            goto LABEL_321;
          case 266:
            *(_QWORD *)v8 |= 0x20000000uLL;
            v149 = *((_QWORD *)a2 + 1);
            if (v149 > 0xFFFFFFFFFFFFFFFBLL || v149 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 32) = *(_DWORD *)(*(_QWORD *)a2 + v149);
            goto LABEL_321;
          case 267:
            *(_QWORD *)v8 |= 0x10000000uLL;
            v150 = *((_QWORD *)a2 + 1);
            if (v150 > 0xFFFFFFFFFFFFFFFBLL || v150 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 31) = *(_DWORD *)(*(_QWORD *)a2 + v150);
            goto LABEL_321;
          case 268:
            *(_QWORD *)v8 |= 0x10000000000uLL;
            v151 = *((_QWORD *)a2 + 1);
            if (v151 > 0xFFFFFFFFFFFFFFFBLL || v151 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 43) = *(_DWORD *)(*(_QWORD *)a2 + v151);
            goto LABEL_321;
          case 269:
            *(_QWORD *)v8 |= 0x20000000000uLL;
            v152 = *((_QWORD *)a2 + 1);
            if (v152 > 0xFFFFFFFFFFFFFFFBLL || v152 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 44) = *(_DWORD *)(*(_QWORD *)a2 + v152);
            goto LABEL_321;
          case 270:
            *(_QWORD *)v8 |= 0x800000000uLL;
            v153 = *((_QWORD *)a2 + 1);
            if (v153 > 0xFFFFFFFFFFFFFFFBLL || v153 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 38) = *(_DWORD *)(*(_QWORD *)a2 + v153);
            goto LABEL_321;
          case 271:
            *(_QWORD *)v8 |= 0x400000000uLL;
            v154 = *((_QWORD *)a2 + 1);
            if (v154 > 0xFFFFFFFFFFFFFFFBLL || v154 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 37) = *(_DWORD *)(*(_QWORD *)a2 + v154);
            goto LABEL_321;
          case 272:
            *(_QWORD *)v8 |= 0x8000000000uLL;
            v155 = *((_QWORD *)a2 + 1);
            if (v155 > 0xFFFFFFFFFFFFFFFBLL || v155 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 42) = *(_DWORD *)(*(_QWORD *)a2 + v155);
            goto LABEL_321;
          case 273:
            *(_QWORD *)v8 |= 0x4000000000uLL;
            v156 = *((_QWORD *)a2 + 1);
            if (v156 > 0xFFFFFFFFFFFFFFFBLL || v156 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 41) = *(_DWORD *)(*(_QWORD *)a2 + v156);
            goto LABEL_321;
          case 274:
            *(_QWORD *)v8 |= 0x2000000000uLL;
            v157 = *((_QWORD *)a2 + 1);
            if (v157 > 0xFFFFFFFFFFFFFFFBLL || v157 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 40) = *(_DWORD *)(*(_QWORD *)a2 + v157);
            goto LABEL_321;
          case 275:
            *(_QWORD *)v8 |= 0x1000000000uLL;
            v158 = *((_QWORD *)a2 + 1);
            if (v158 > 0xFFFFFFFFFFFFFFFBLL || v158 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 39) = *(_DWORD *)(*(_QWORD *)a2 + v158);
            goto LABEL_321;
          case 276:
            v159 = v8[10];
            *((_WORD *)v8 + 4) |= 2u;
            v8[10] = v159;
            v160 = *((_QWORD *)a2 + 1);
            if (v160 > 0xFFFFFFFFFFFFFFFBLL || v160 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 68) = *(_DWORD *)(*(_QWORD *)a2 + v160);
            goto LABEL_321;
          case 277:
            v161 = v8[10];
            *((_WORD *)v8 + 4) |= 4u;
            v8[10] = v161;
            v162 = *((_QWORD *)a2 + 1);
            if (v162 > 0xFFFFFFFFFFFFFFFBLL || v162 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_269;
            *((_DWORD *)this + 69) = *(_DWORD *)(*(_QWORD *)a2 + v162);
            goto LABEL_321;
          case 278:
            v163 = v8[10];
            *((_WORD *)v8 + 4) |= 1u;
            v8[10] = v163;
            v164 = *((_QWORD *)a2 + 1);
            if (v164 <= 0xFFFFFFFFFFFFFFFBLL && v164 + 4 <= *((_QWORD *)a2 + 2))
            {
              *((_DWORD *)this + 67) = *(_DWORD *)(*(_QWORD *)a2 + v164);
LABEL_321:
              *((_QWORD *)a2 + 1) += 4;
            }
            else
            {
LABEL_269:
              *((_BYTE *)a2 + 24) = 1;
            }
            goto LABEL_322;
          default:
            goto LABEL_20;
        }
        while (1)
        {
          if (v86 == v85)
          {
            LODWORD(v90) = 0;
            *((_BYTE *)a2 + 24) = 1;
            goto LABEL_334;
          }
          v184 = v85 + 1;
          v185 = *(_BYTE *)(v87 + v85);
          *((_QWORD *)a2 + 1) = v184;
          v90 |= (unint64_t)(v185 & 0x7F) << v182;
          if ((v185 & 0x80) == 0)
            break;
          v182 += 7;
          v85 = v184;
          v15 = v183++ > 8;
          if (v15)
            goto LABEL_308;
        }
        if (*((_BYTE *)a2 + 24))
          LODWORD(v90) = 0;
LABEL_334:
        *((_DWORD *)this + 55) = v90;
      }
LABEL_322:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)a2 + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_22;
      v16 += 7;
      v2 = v18;
      v15 = v17++ > 8;
      if (v15)
        goto LABEL_20;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaRolloverCrashResult::writeTo(uint64_t this, PB::Writer *a2)
{
  float *v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  int v7;

  v3 = (float *)this;
  v4 = (uint64_t *)(this + 316);
  v5 = *(_QWORD *)(this + 316);
  if ((v5 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
    v5 = *v4;
    if ((v4[1] & 0x8000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = *(unsigned __int16 *)(this + 324);
  v7 = v6 | (*(unsigned __int8 *)(this + 326) << 16);
  if ((v6 & 0x8000) != 0)
  {
LABEL_5:
    this = PB::Writer::write(a2);
    v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
    v5 = *v4;
  }
LABEL_6:
  if ((v7 & 0x10000) != 0)
  {
    this = PB::Writer::write(a2);
    v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
    v5 = *v4;
    if ((*v4 & 0x40000000000) == 0)
    {
LABEL_8:
      if ((v5 & 0x40000) == 0)
        goto LABEL_9;
      goto LABEL_90;
    }
  }
  else if ((v5 & 0x40000000000) == 0)
  {
    goto LABEL_8;
  }
  this = PB::Writer::write(a2, v3[45]);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((*v4 & 0x40000) == 0)
  {
LABEL_9:
    if ((v7 & 8) == 0)
      goto LABEL_10;
    goto LABEL_91;
  }
LABEL_90:
  this = PB::Writer::write(a2, v3[21]);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((v4[1] & 8) == 0)
  {
LABEL_10:
    if ((v7 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_92;
  }
LABEL_91:
  this = PB::Writer::write(a2, v3[70]);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((v4[1] & 0x2000) == 0)
  {
LABEL_11:
    if ((v7 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_93;
  }
LABEL_92:
  this = PB::Writer::write(a2);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((v4[1] & 0x400) == 0)
  {
LABEL_12:
    if ((v7 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_94;
  }
LABEL_93:
  this = PB::Writer::write(a2);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((v4[1] & 0x200) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_14;
    goto LABEL_95;
  }
LABEL_94:
  this = PB::Writer::write(a2);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((*v4 & 0x2000000) == 0)
  {
LABEL_14:
    if ((v7 & 0x1000) == 0)
      goto LABEL_15;
    goto LABEL_96;
  }
LABEL_95:
  this = PB::Writer::writeVarInt(a2);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((v4[1] & 0x1000) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_16;
    goto LABEL_97;
  }
LABEL_96:
  this = PB::Writer::write(a2);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((*v4 & 0x1000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x2000000000000) == 0)
      goto LABEL_17;
    goto LABEL_98;
  }
LABEL_97:
  this = PB::Writer::write(a2, v3[27]);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((*v4 & 0x2000000000000) == 0)
  {
LABEL_17:
    if ((v5 & 0x1000000000000) == 0)
      goto LABEL_18;
    goto LABEL_99;
  }
LABEL_98:
  this = PB::Writer::write(a2, v3[52]);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((*v4 & 0x1000000000000) == 0)
  {
LABEL_18:
    if ((v5 & 0x4000000000000) == 0)
      goto LABEL_19;
    goto LABEL_100;
  }
LABEL_99:
  this = PB::Writer::write(a2, v3[51]);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((*v4 & 0x4000000000000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40) == 0)
      goto LABEL_20;
    goto LABEL_101;
  }
LABEL_100:
  this = PB::Writer::write(a2, v3[53]);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((*v4 & 0x40) == 0)
  {
LABEL_20:
    if ((v5 & 2) == 0)
      goto LABEL_21;
    goto LABEL_102;
  }
LABEL_101:
  this = PB::Writer::write(a2, v3[9]);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((*v4 & 2) == 0)
  {
LABEL_21:
    if ((v5 & 0x8000) == 0)
      goto LABEL_22;
    goto LABEL_103;
  }
LABEL_102:
  this = PB::Writer::write(a2, v3[4]);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((*v4 & 0x8000) == 0)
  {
LABEL_22:
    if ((v7 & 0x40000) == 0)
      goto LABEL_23;
    goto LABEL_104;
  }
LABEL_103:
  this = PB::Writer::write(a2, v3[18]);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((v7 & 0x40000) == 0)
  {
LABEL_23:
    if ((v7 & 0x800) == 0)
      goto LABEL_24;
    goto LABEL_105;
  }
LABEL_104:
  this = PB::Writer::write(a2);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((v4[1] & 0x800) == 0)
  {
LABEL_24:
    if ((v7 & 0x4000) == 0)
      goto LABEL_25;
    goto LABEL_106;
  }
LABEL_105:
  this = PB::Writer::write(a2);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((v4[1] & 0x4000) == 0)
  {
LABEL_25:
    if ((v5 & 0x20000000000000) == 0)
      goto LABEL_26;
    goto LABEL_107;
  }
LABEL_106:
  this = PB::Writer::write(a2);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((*v4 & 0x20000000000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x8000000000000) == 0)
      goto LABEL_27;
    goto LABEL_108;
  }
LABEL_107:
  this = PB::Writer::write(a2, v3[56]);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((*v4 & 0x8000000000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x10000000000000) == 0)
      goto LABEL_28;
    goto LABEL_109;
  }
LABEL_108:
  this = PB::Writer::write(a2, v3[54]);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((*v4 & 0x10000000000000) == 0)
  {
LABEL_28:
    if ((v7 & 0x20000) == 0)
      goto LABEL_29;
    goto LABEL_110;
  }
LABEL_109:
  this = PB::Writer::writeVarInt(a2);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((v7 & 0x20000) == 0)
  {
LABEL_29:
    if ((v5 & 0x40000000000000) == 0)
      goto LABEL_30;
    goto LABEL_111;
  }
LABEL_110:
  this = PB::Writer::write(a2);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x40000000000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x800000000000000) == 0)
      goto LABEL_31;
    goto LABEL_112;
  }
LABEL_111:
  this = PB::Writer::write(a2, v3[57]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x800000000000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x80000) == 0)
      goto LABEL_32;
    goto LABEL_113;
  }
LABEL_112:
  this = PB::Writer::write(a2, v3[62]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x80000) == 0)
  {
LABEL_32:
    if ((v5 & 0x80000000000) == 0)
      goto LABEL_33;
    goto LABEL_114;
  }
LABEL_113:
  this = PB::Writer::write(a2, v3[22]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x80000000000) == 0)
  {
LABEL_33:
    if ((v7 & 0x10) == 0)
      goto LABEL_34;
    goto LABEL_115;
  }
LABEL_114:
  this = PB::Writer::write(a2, v3[46]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((v7 & 0x10) == 0)
  {
LABEL_34:
    if ((v5 & 0x80000000000000) == 0)
      goto LABEL_35;
    goto LABEL_116;
  }
LABEL_115:
  this = PB::Writer::write(a2, v3[71]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x80000000000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x1000000000000000) == 0)
      goto LABEL_36;
    goto LABEL_117;
  }
LABEL_116:
  this = PB::Writer::write(a2, v3[58]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x1000000000000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x100000) == 0)
      goto LABEL_37;
    goto LABEL_118;
  }
LABEL_117:
  this = PB::Writer::write(a2, v3[63]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x100000) == 0)
  {
LABEL_37:
    if ((v5 & 0x100000000000) == 0)
      goto LABEL_38;
    goto LABEL_119;
  }
LABEL_118:
  this = PB::Writer::write(a2, v3[23]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x100000000000) == 0)
  {
LABEL_38:
    if ((v7 & 0x20) == 0)
      goto LABEL_39;
    goto LABEL_120;
  }
LABEL_119:
  this = PB::Writer::write(a2, v3[47]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((v7 & 0x20) == 0)
  {
LABEL_39:
    if ((v5 & 0x100000000000000) == 0)
      goto LABEL_40;
    goto LABEL_121;
  }
LABEL_120:
  this = PB::Writer::write(a2, v3[72]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x100000000000000) == 0)
  {
LABEL_40:
    if ((v5 & 0x2000000000000000) == 0)
      goto LABEL_41;
    goto LABEL_122;
  }
LABEL_121:
  this = PB::Writer::write(a2, v3[59]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x2000000000000000) == 0)
  {
LABEL_41:
    if ((v5 & 0x200000) == 0)
      goto LABEL_42;
    goto LABEL_123;
  }
LABEL_122:
  this = PB::Writer::write(a2, v3[64]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x200000) == 0)
  {
LABEL_42:
    if ((v5 & 0x200000000000) == 0)
      goto LABEL_43;
    goto LABEL_124;
  }
LABEL_123:
  this = PB::Writer::write(a2, v3[24]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x200000000000) == 0)
  {
LABEL_43:
    if ((v7 & 0x40) == 0)
      goto LABEL_44;
    goto LABEL_125;
  }
LABEL_124:
  this = PB::Writer::write(a2, v3[48]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((v7 & 0x40) == 0)
  {
LABEL_44:
    if ((v5 & 0x80) == 0)
      goto LABEL_45;
    goto LABEL_126;
  }
LABEL_125:
  this = PB::Writer::write(a2, v3[73]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x80) == 0)
  {
LABEL_45:
    if ((v5 & 0x400) == 0)
      goto LABEL_46;
    goto LABEL_127;
  }
LABEL_126:
  this = PB::Writer::write(a2, v3[10]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x400) == 0)
  {
LABEL_46:
    if ((v5 & 0x200) == 0)
      goto LABEL_47;
    goto LABEL_128;
  }
LABEL_127:
  this = PB::Writer::write(a2, v3[13]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x200) == 0)
  {
LABEL_47:
    if ((v5 & 0x100) == 0)
      goto LABEL_48;
    goto LABEL_129;
  }
LABEL_128:
  this = PB::Writer::write(a2, v3[12]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x100) == 0)
  {
LABEL_48:
    if ((v5 & 4) == 0)
      goto LABEL_49;
    goto LABEL_130;
  }
LABEL_129:
  this = PB::Writer::write(a2, v3[11]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 4) == 0)
  {
LABEL_49:
    if ((v5 & 0x20) == 0)
      goto LABEL_50;
    goto LABEL_131;
  }
LABEL_130:
  this = PB::Writer::write(a2, v3[5]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x20) == 0)
  {
LABEL_50:
    if ((v5 & 0x10) == 0)
      goto LABEL_51;
    goto LABEL_132;
  }
LABEL_131:
  this = PB::Writer::write(a2, v3[8]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x10) == 0)
  {
LABEL_51:
    if ((v5 & 8) == 0)
      goto LABEL_52;
    goto LABEL_133;
  }
LABEL_132:
  this = PB::Writer::write(a2, v3[7]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 8) == 0)
  {
LABEL_52:
    if ((v5 & 0x800) == 0)
      goto LABEL_53;
    goto LABEL_134;
  }
LABEL_133:
  this = PB::Writer::write(a2, v3[6]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x800) == 0)
  {
LABEL_53:
    if ((v5 & 0x4000) == 0)
      goto LABEL_54;
    goto LABEL_135;
  }
LABEL_134:
  this = PB::Writer::write(a2, v3[14]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x4000) == 0)
  {
LABEL_54:
    if ((v5 & 0x2000) == 0)
      goto LABEL_55;
    goto LABEL_136;
  }
LABEL_135:
  this = PB::Writer::write(a2, v3[17]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x2000) == 0)
  {
LABEL_55:
    if ((v5 & 0x1000) == 0)
      goto LABEL_56;
    goto LABEL_137;
  }
LABEL_136:
  this = PB::Writer::write(a2, v3[16]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x1000) == 0)
  {
LABEL_56:
    if ((v5 & 0x10000) == 0)
      goto LABEL_57;
    goto LABEL_138;
  }
LABEL_137:
  this = PB::Writer::write(a2, v3[15]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x10000) == 0)
  {
LABEL_57:
    if ((v5 & 0x20000) == 0)
      goto LABEL_58;
    goto LABEL_139;
  }
LABEL_138:
  this = PB::Writer::write(a2, v3[19]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x20000) == 0)
  {
LABEL_58:
    if ((v5 & 0x200000000000000) == 0)
      goto LABEL_59;
    goto LABEL_140;
  }
LABEL_139:
  this = PB::Writer::write(a2, v3[20]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x200000000000000) == 0)
  {
LABEL_59:
    if ((v5 & 0x4000000000000000) == 0)
      goto LABEL_60;
    goto LABEL_141;
  }
LABEL_140:
  this = PB::Writer::write(a2, v3[60]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x4000000000000000) == 0)
  {
LABEL_60:
    if ((v5 & 0x400000) == 0)
      goto LABEL_61;
    goto LABEL_142;
  }
LABEL_141:
  this = PB::Writer::write(a2, v3[65]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x400000) == 0)
  {
LABEL_61:
    if ((v5 & 0x400000000000) == 0)
      goto LABEL_62;
    goto LABEL_143;
  }
LABEL_142:
  this = PB::Writer::write(a2, v3[25]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x400000000000) == 0)
  {
LABEL_62:
    if ((v7 & 0x80) == 0)
      goto LABEL_63;
    goto LABEL_144;
  }
LABEL_143:
  this = PB::Writer::write(a2, v3[49]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((v7 & 0x80) == 0)
  {
LABEL_63:
    if ((v5 & 0x400000000000000) == 0)
      goto LABEL_64;
    goto LABEL_145;
  }
LABEL_144:
  this = PB::Writer::write(a2, v3[74]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x400000000000000) == 0)
  {
LABEL_64:
    if ((v5 & 0x8000000000000000) == 0)
      goto LABEL_65;
    goto LABEL_146;
  }
LABEL_145:
  this = PB::Writer::write(a2, v3[61]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x8000000000000000) == 0)
  {
LABEL_65:
    if ((v5 & 0x800000) == 0)
      goto LABEL_66;
    goto LABEL_147;
  }
LABEL_146:
  this = PB::Writer::write(a2, v3[66]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x800000) == 0)
  {
LABEL_66:
    if ((v5 & 0x800000000000) == 0)
      goto LABEL_67;
    goto LABEL_148;
  }
LABEL_147:
  this = PB::Writer::write(a2, v3[26]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x800000000000) == 0)
  {
LABEL_67:
    if ((v7 & 0x100) == 0)
      goto LABEL_68;
    goto LABEL_149;
  }
LABEL_148:
  this = PB::Writer::write(a2, v3[50]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((v7 & 0x100) == 0)
  {
LABEL_68:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_69;
    goto LABEL_150;
  }
LABEL_149:
  this = PB::Writer::write(a2, v3[75]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x100000000) == 0)
  {
LABEL_69:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_70;
    goto LABEL_151;
  }
LABEL_150:
  this = PB::Writer::write(a2, v3[35]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x200000000) == 0)
  {
LABEL_70:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_71;
    goto LABEL_152;
  }
LABEL_151:
  this = PB::Writer::write(a2, v3[36]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x8000000) == 0)
  {
LABEL_71:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_72;
    goto LABEL_153;
  }
LABEL_152:
  this = PB::Writer::write(a2, v3[30]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x4000000) == 0)
  {
LABEL_72:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_73;
    goto LABEL_154;
  }
LABEL_153:
  this = PB::Writer::write(a2, v3[29]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x80000000) == 0)
  {
LABEL_73:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_74;
    goto LABEL_155;
  }
LABEL_154:
  this = PB::Writer::write(a2, v3[34]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x40000000) == 0)
  {
LABEL_74:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_75;
    goto LABEL_156;
  }
LABEL_155:
  this = PB::Writer::write(a2, v3[33]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x20000000) == 0)
  {
LABEL_75:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_76;
    goto LABEL_157;
  }
LABEL_156:
  this = PB::Writer::write(a2, v3[32]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x10000000) == 0)
  {
LABEL_76:
    if ((v5 & 0x10000000000) == 0)
      goto LABEL_77;
    goto LABEL_158;
  }
LABEL_157:
  this = PB::Writer::write(a2, v3[31]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x10000000000) == 0)
  {
LABEL_77:
    if ((v5 & 0x20000000000) == 0)
      goto LABEL_78;
    goto LABEL_159;
  }
LABEL_158:
  this = PB::Writer::write(a2, v3[43]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x20000000000) == 0)
  {
LABEL_78:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_79;
    goto LABEL_160;
  }
LABEL_159:
  this = PB::Writer::write(a2, v3[44]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x800000000) == 0)
  {
LABEL_79:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_80;
    goto LABEL_161;
  }
LABEL_160:
  this = PB::Writer::write(a2, v3[38]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x400000000) == 0)
  {
LABEL_80:
    if ((v5 & 0x8000000000) == 0)
      goto LABEL_81;
    goto LABEL_162;
  }
LABEL_161:
  this = PB::Writer::write(a2, v3[37]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x8000000000) == 0)
  {
LABEL_81:
    if ((v5 & 0x4000000000) == 0)
      goto LABEL_82;
    goto LABEL_163;
  }
LABEL_162:
  this = PB::Writer::write(a2, v3[42]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x4000000000) == 0)
  {
LABEL_82:
    if ((v5 & 0x2000000000) == 0)
      goto LABEL_83;
    goto LABEL_164;
  }
LABEL_163:
  this = PB::Writer::write(a2, v3[41]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x2000000000) == 0)
  {
LABEL_83:
    if ((v5 & 0x1000000000) == 0)
      goto LABEL_84;
    goto LABEL_165;
  }
LABEL_164:
  this = PB::Writer::write(a2, v3[40]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  if ((*v4 & 0x1000000000) == 0)
  {
LABEL_84:
    if ((v7 & 2) == 0)
      goto LABEL_85;
    goto LABEL_166;
  }
LABEL_165:
  this = PB::Writer::write(a2, v3[39]);
  LOBYTE(v7) = *((_WORD *)v4 + 4);
  if ((v4[1] & 2) == 0)
  {
LABEL_85:
    if ((v7 & 4) == 0)
      goto LABEL_86;
    goto LABEL_167;
  }
LABEL_166:
  this = PB::Writer::write(a2, v3[68]);
  LOBYTE(v7) = *((_WORD *)v4 + 4);
  if ((v4[1] & 4) == 0)
  {
LABEL_86:
    if ((v7 & 1) == 0)
      return this;
    return PB::Writer::write(a2, v3[67]);
  }
LABEL_167:
  this = PB::Writer::write(a2, v3[69]);
  if ((v4[1] & 1) != 0)
    return PB::Writer::write(a2, v3[67]);
  return this;
}

uint64_t CMMsl::KappaRolloverCrashResult::hash_value(CMMsl::KappaRolloverCrashResult *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  float v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  float v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  float v46;
  uint64_t v47;
  float v48;
  uint64_t v49;
  float v50;
  uint64_t v51;
  float v52;
  uint64_t v53;
  float v54;
  uint64_t v55;
  float v56;
  uint64_t v57;
  float v58;
  uint64_t v59;
  float v60;
  uint64_t v61;
  float v62;
  uint64_t v63;
  float v64;
  uint64_t v65;
  float v66;
  uint64_t v67;
  float v68;
  uint64_t v69;
  float v70;
  uint64_t v71;
  float v72;
  uint64_t v73;
  float v74;
  uint64_t v75;
  float v76;
  uint64_t v77;
  float v78;
  uint64_t v79;
  float v80;
  uint64_t v81;
  float v82;
  uint64_t v83;
  float v84;
  uint64_t v85;
  float v86;
  uint64_t v87;
  float v88;
  uint64_t v89;
  float v90;
  uint64_t v91;
  float v92;
  uint64_t v93;
  float v94;
  uint64_t v95;
  float v96;
  uint64_t v97;
  float v98;
  uint64_t v99;
  float v100;
  uint64_t v101;
  float v102;
  uint64_t v103;
  float v104;
  uint64_t v105;
  float v106;
  uint64_t v107;
  float v108;
  uint64_t v109;
  float v110;
  uint64_t v111;
  float v112;
  uint64_t v113;
  float v114;
  uint64_t v115;
  float v116;
  uint64_t v117;
  float v118;
  uint64_t v119;
  float v120;
  uint64_t v121;
  float v122;
  uint64_t v123;
  float v124;
  uint64_t v125;
  float v126;
  uint64_t v127;
  float v128;
  uint64_t v129;
  float v130;
  uint64_t v131;
  float v132;
  uint64_t v133;
  float v134;
  uint64_t v135;
  float v136;
  uint64_t v137;
  float v138;
  uint64_t v139;
  float v140;
  uint64_t v141;
  float v142;
  uint64_t v143;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;

  v1 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v2 = *(_QWORD *)((char *)this + 316);
  if ((v2 & 1) != 0)
  {
    v3 = *((_QWORD *)this + 1);
    if ((*((_WORD *)this + 162) & 0x8000) != 0)
    {
LABEL_3:
      v200 = *((unsigned __int8 *)this + 310);
      if ((v1 & 0x10000) != 0)
        goto LABEL_4;
      goto LABEL_249;
    }
  }
  else
  {
    v3 = 0;
    if ((*((_WORD *)this + 162) & 0x8000) != 0)
      goto LABEL_3;
  }
  v200 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_4:
    v199 = *((unsigned __int8 *)this + 311);
    if ((v2 & 0x40000000000) != 0)
      goto LABEL_5;
LABEL_250:
    v198 = 0;
    if ((v2 & 0x40000) != 0)
      goto LABEL_8;
LABEL_251:
    v197 = 0;
    if ((*((_WORD *)this + 162) & 8) != 0)
      goto LABEL_11;
LABEL_252:
    v196 = 0;
    if ((*((_WORD *)this + 162) & 0x2000) != 0)
      goto LABEL_14;
    goto LABEL_253;
  }
LABEL_249:
  v199 = 0;
  if ((v2 & 0x40000000000) == 0)
    goto LABEL_250;
LABEL_5:
  v4 = *((float *)this + 45);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  v198 = v5;
  if ((v2 & 0x40000) == 0)
    goto LABEL_251;
LABEL_8:
  v6 = *((float *)this + 21);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  v197 = v7;
  if ((*((_WORD *)this + 162) & 8) == 0)
    goto LABEL_252;
LABEL_11:
  v8 = *((float *)this + 70);
  v9 = LODWORD(v8);
  if (v8 == 0.0)
    v9 = 0;
  v196 = v9;
  if ((*((_WORD *)this + 162) & 0x2000) != 0)
  {
LABEL_14:
    v195 = *((unsigned __int8 *)this + 308);
    if ((*((_WORD *)this + 162) & 0x400) != 0)
      goto LABEL_15;
    goto LABEL_254;
  }
LABEL_253:
  v195 = 0;
  if ((*((_WORD *)this + 162) & 0x400) != 0)
  {
LABEL_15:
    v194 = *((unsigned __int8 *)this + 305);
    if ((*((_WORD *)this + 162) & 0x200) != 0)
      goto LABEL_16;
    goto LABEL_255;
  }
LABEL_254:
  v194 = 0;
  if ((*((_WORD *)this + 162) & 0x200) != 0)
  {
LABEL_16:
    v193 = *((unsigned __int8 *)this + 304);
    if ((v2 & 0x2000000) != 0)
      goto LABEL_17;
    goto LABEL_256;
  }
LABEL_255:
  v193 = 0;
  if ((v2 & 0x2000000) != 0)
  {
LABEL_17:
    v192 = *((int *)this + 28);
    if ((*((_WORD *)this + 162) & 0x1000) != 0)
      goto LABEL_18;
    goto LABEL_257;
  }
LABEL_256:
  v192 = 0;
  if ((*((_WORD *)this + 162) & 0x1000) != 0)
  {
LABEL_18:
    v191 = *((unsigned __int8 *)this + 307);
    if ((v2 & 0x1000000) != 0)
      goto LABEL_19;
LABEL_258:
    v190 = 0;
    if ((v2 & 0x2000000000000) != 0)
      goto LABEL_22;
LABEL_259:
    v189 = 0;
    if ((v2 & 0x1000000000000) != 0)
      goto LABEL_25;
LABEL_260:
    v188 = 0;
    if ((v2 & 0x4000000000000) != 0)
      goto LABEL_28;
LABEL_261:
    v187 = 0;
    if ((v2 & 0x40) != 0)
      goto LABEL_31;
LABEL_262:
    v186 = 0;
    if ((v2 & 2) != 0)
      goto LABEL_34;
LABEL_263:
    v185 = 0;
    if ((v2 & 0x8000) != 0)
      goto LABEL_37;
LABEL_264:
    v184 = 0;
    if ((v1 & 0x40000) != 0)
      goto LABEL_40;
    goto LABEL_265;
  }
LABEL_257:
  v191 = 0;
  if ((v2 & 0x1000000) == 0)
    goto LABEL_258;
LABEL_19:
  v10 = *((float *)this + 27);
  v11 = LODWORD(v10);
  if (v10 == 0.0)
    v11 = 0;
  v190 = v11;
  if ((v2 & 0x2000000000000) == 0)
    goto LABEL_259;
LABEL_22:
  v12 = *((float *)this + 52);
  v13 = LODWORD(v12);
  if (v12 == 0.0)
    v13 = 0;
  v189 = v13;
  if ((v2 & 0x1000000000000) == 0)
    goto LABEL_260;
LABEL_25:
  v14 = *((float *)this + 51);
  v15 = LODWORD(v14);
  if (v14 == 0.0)
    v15 = 0;
  v188 = v15;
  if ((v2 & 0x4000000000000) == 0)
    goto LABEL_261;
LABEL_28:
  v16 = *((float *)this + 53);
  v17 = LODWORD(v16);
  if (v16 == 0.0)
    v17 = 0;
  v187 = v17;
  if ((v2 & 0x40) == 0)
    goto LABEL_262;
LABEL_31:
  v18 = *((float *)this + 9);
  v19 = LODWORD(v18);
  if (v18 == 0.0)
    v19 = 0;
  v186 = v19;
  if ((v2 & 2) == 0)
    goto LABEL_263;
LABEL_34:
  v20 = *((float *)this + 4);
  v21 = LODWORD(v20);
  if (v20 == 0.0)
    v21 = 0;
  v185 = v21;
  if ((v2 & 0x8000) == 0)
    goto LABEL_264;
LABEL_37:
  v22 = *((float *)this + 18);
  v23 = LODWORD(v22);
  if (v22 == 0.0)
    v23 = 0;
  v184 = v23;
  if ((v1 & 0x40000) != 0)
  {
LABEL_40:
    v183 = *((unsigned __int8 *)this + 313);
    if ((*((_WORD *)this + 162) & 0x800) != 0)
      goto LABEL_41;
    goto LABEL_266;
  }
LABEL_265:
  v183 = 0;
  if ((*((_WORD *)this + 162) & 0x800) != 0)
  {
LABEL_41:
    v182 = *((unsigned __int8 *)this + 306);
    if ((*((_WORD *)this + 162) & 0x4000) != 0)
      goto LABEL_42;
    goto LABEL_267;
  }
LABEL_266:
  v182 = 0;
  if ((*((_WORD *)this + 162) & 0x4000) != 0)
  {
LABEL_42:
    v181 = *((unsigned __int8 *)this + 309);
    if ((v2 & 0x20000000000000) != 0)
      goto LABEL_43;
LABEL_268:
    v180 = 0;
    if ((v2 & 0x8000000000000) != 0)
      goto LABEL_46;
LABEL_269:
    v179 = 0;
    if ((v2 & 0x10000000000000) != 0)
      goto LABEL_49;
    goto LABEL_270;
  }
LABEL_267:
  v181 = 0;
  if ((v2 & 0x20000000000000) == 0)
    goto LABEL_268;
LABEL_43:
  v24 = *((float *)this + 56);
  v25 = LODWORD(v24);
  if (v24 == 0.0)
    v25 = 0;
  v180 = v25;
  if ((v2 & 0x8000000000000) == 0)
    goto LABEL_269;
LABEL_46:
  v26 = *((float *)this + 54);
  v27 = LODWORD(v26);
  if (v26 == 0.0)
    v27 = 0;
  v179 = v27;
  if ((v2 & 0x10000000000000) != 0)
  {
LABEL_49:
    v178 = *((int *)this + 55);
    if ((v1 & 0x20000) != 0)
      goto LABEL_50;
    goto LABEL_271;
  }
LABEL_270:
  v178 = 0;
  if ((v1 & 0x20000) != 0)
  {
LABEL_50:
    v177 = *((unsigned __int8 *)this + 312);
    if ((v2 & 0x40000000000000) != 0)
      goto LABEL_51;
LABEL_272:
    v176 = 0;
    if ((v2 & 0x800000000000000) != 0)
      goto LABEL_54;
LABEL_273:
    v175 = 0;
    if ((v2 & 0x80000) != 0)
      goto LABEL_57;
LABEL_274:
    v174 = 0;
    if ((v2 & 0x80000000000) != 0)
      goto LABEL_60;
LABEL_275:
    v173 = 0;
    if ((*((_WORD *)this + 162) & 0x10) != 0)
      goto LABEL_63;
LABEL_276:
    v172 = 0;
    if ((v2 & 0x80000000000000) != 0)
      goto LABEL_66;
LABEL_277:
    v171 = 0;
    if ((v2 & 0x1000000000000000) != 0)
      goto LABEL_69;
LABEL_278:
    v170 = 0;
    if ((v2 & 0x100000) != 0)
      goto LABEL_72;
LABEL_279:
    v169 = 0;
    if ((v2 & 0x100000000000) != 0)
      goto LABEL_75;
LABEL_280:
    v168 = 0;
    if ((*((_WORD *)this + 162) & 0x20) != 0)
      goto LABEL_78;
LABEL_281:
    v167 = 0;
    if ((v2 & 0x100000000000000) != 0)
      goto LABEL_81;
LABEL_282:
    v166 = 0;
    if ((v2 & 0x2000000000000000) != 0)
      goto LABEL_84;
LABEL_283:
    v165 = 0;
    if ((v2 & 0x200000) != 0)
      goto LABEL_87;
LABEL_284:
    v164 = 0;
    if ((v2 & 0x200000000000) != 0)
      goto LABEL_90;
LABEL_285:
    v163 = 0;
    if ((*((_WORD *)this + 162) & 0x40) != 0)
      goto LABEL_93;
LABEL_286:
    v162 = 0;
    if ((v2 & 0x80) != 0)
      goto LABEL_96;
LABEL_287:
    v161 = 0;
    if ((v2 & 0x400) != 0)
      goto LABEL_99;
LABEL_288:
    v160 = 0;
    if ((v2 & 0x200) != 0)
      goto LABEL_102;
LABEL_289:
    v159 = 0;
    if ((v2 & 0x100) != 0)
      goto LABEL_105;
LABEL_290:
    v158 = 0;
    if ((v2 & 4) != 0)
      goto LABEL_108;
LABEL_291:
    v157 = 0;
    if ((v2 & 0x20) != 0)
      goto LABEL_111;
LABEL_292:
    v156 = 0;
    if ((v2 & 0x10) != 0)
      goto LABEL_114;
LABEL_293:
    v155 = 0;
    if ((v2 & 8) != 0)
      goto LABEL_117;
LABEL_294:
    v154 = 0;
    if ((v2 & 0x800) != 0)
      goto LABEL_120;
LABEL_295:
    v153 = 0;
    if ((v2 & 0x4000) != 0)
      goto LABEL_123;
LABEL_296:
    v152 = 0;
    if ((v2 & 0x2000) != 0)
      goto LABEL_126;
LABEL_297:
    v151 = 0;
    if ((v2 & 0x1000) != 0)
      goto LABEL_129;
LABEL_298:
    v150 = 0;
    if ((v2 & 0x10000) != 0)
      goto LABEL_132;
LABEL_299:
    v149 = 0;
    if ((v2 & 0x20000) != 0)
      goto LABEL_135;
LABEL_300:
    v148 = 0;
    if ((v2 & 0x200000000000000) != 0)
      goto LABEL_138;
LABEL_301:
    v147 = 0;
    if ((v2 & 0x4000000000000000) != 0)
      goto LABEL_141;
LABEL_302:
    v146 = 0;
    if ((v2 & 0x400000) != 0)
      goto LABEL_144;
LABEL_303:
    v145 = 0;
    if ((v2 & 0x400000000000) != 0)
      goto LABEL_147;
LABEL_304:
    v93 = 0;
    if ((*((_WORD *)this + 162) & 0x80) != 0)
      goto LABEL_151;
LABEL_305:
    v95 = 0;
    if ((v2 & 0x400000000000000) != 0)
      goto LABEL_155;
LABEL_306:
    v97 = 0;
    if (v2 < 0)
      goto LABEL_159;
LABEL_307:
    v99 = 0;
    if ((v2 & 0x800000) != 0)
      goto LABEL_163;
LABEL_308:
    v101 = 0;
    if ((v2 & 0x800000000000) != 0)
      goto LABEL_167;
LABEL_309:
    v103 = 0;
    if ((*((_WORD *)this + 162) & 0x100) != 0)
      goto LABEL_171;
LABEL_310:
    v105 = 0;
    if ((v2 & 0x100000000) != 0)
      goto LABEL_175;
LABEL_311:
    v107 = 0;
    if ((v2 & 0x200000000) != 0)
      goto LABEL_179;
LABEL_312:
    v109 = 0;
    if ((v2 & 0x8000000) != 0)
      goto LABEL_183;
LABEL_313:
    v111 = 0;
    if ((v2 & 0x4000000) != 0)
      goto LABEL_187;
LABEL_314:
    v113 = 0;
    if ((v2 & 0x80000000) != 0)
      goto LABEL_191;
LABEL_315:
    v115 = 0;
    if ((v2 & 0x40000000) != 0)
      goto LABEL_195;
LABEL_316:
    v117 = 0;
    if ((v2 & 0x20000000) != 0)
      goto LABEL_199;
LABEL_317:
    v119 = 0;
    if ((v2 & 0x10000000) != 0)
      goto LABEL_203;
LABEL_318:
    v121 = 0;
    if ((v2 & 0x10000000000) != 0)
      goto LABEL_207;
LABEL_319:
    v123 = 0;
    if ((v2 & 0x20000000000) != 0)
      goto LABEL_211;
LABEL_320:
    v125 = 0;
    if ((v2 & 0x800000000) != 0)
      goto LABEL_215;
LABEL_321:
    v127 = 0;
    if ((v2 & 0x400000000) != 0)
      goto LABEL_219;
LABEL_322:
    v129 = 0;
    if ((v2 & 0x8000000000) != 0)
      goto LABEL_223;
LABEL_323:
    v131 = 0;
    if ((v2 & 0x4000000000) != 0)
      goto LABEL_227;
LABEL_324:
    v133 = 0;
    if ((v2 & 0x2000000000) != 0)
      goto LABEL_231;
LABEL_325:
    v135 = 0;
    if ((v2 & 0x1000000000) != 0)
      goto LABEL_234;
LABEL_326:
    v137 = 0;
    if ((*((_WORD *)this + 162) & 2) != 0)
      goto LABEL_238;
LABEL_327:
    v139 = 0;
    if ((*((_WORD *)this + 162) & 4) != 0)
      goto LABEL_241;
    goto LABEL_328;
  }
LABEL_271:
  v177 = 0;
  if ((v2 & 0x40000000000000) == 0)
    goto LABEL_272;
LABEL_51:
  v28 = *((float *)this + 57);
  v29 = LODWORD(v28);
  if (v28 == 0.0)
    v29 = 0;
  v176 = v29;
  if ((v2 & 0x800000000000000) == 0)
    goto LABEL_273;
LABEL_54:
  v30 = *((float *)this + 62);
  v31 = LODWORD(v30);
  if (v30 == 0.0)
    v31 = 0;
  v175 = v31;
  if ((v2 & 0x80000) == 0)
    goto LABEL_274;
LABEL_57:
  v32 = *((float *)this + 22);
  v33 = LODWORD(v32);
  if (v32 == 0.0)
    v33 = 0;
  v174 = v33;
  if ((v2 & 0x80000000000) == 0)
    goto LABEL_275;
LABEL_60:
  v34 = *((float *)this + 46);
  v35 = LODWORD(v34);
  if (v34 == 0.0)
    v35 = 0;
  v173 = v35;
  if ((*((_WORD *)this + 162) & 0x10) == 0)
    goto LABEL_276;
LABEL_63:
  v36 = *((float *)this + 71);
  v37 = LODWORD(v36);
  if (v36 == 0.0)
    v37 = 0;
  v172 = v37;
  if ((v2 & 0x80000000000000) == 0)
    goto LABEL_277;
LABEL_66:
  v38 = *((float *)this + 58);
  v39 = LODWORD(v38);
  if (v38 == 0.0)
    v39 = 0;
  v171 = v39;
  if ((v2 & 0x1000000000000000) == 0)
    goto LABEL_278;
LABEL_69:
  v40 = *((float *)this + 63);
  v41 = LODWORD(v40);
  if (v40 == 0.0)
    v41 = 0;
  v170 = v41;
  if ((v2 & 0x100000) == 0)
    goto LABEL_279;
LABEL_72:
  v42 = *((float *)this + 23);
  v43 = LODWORD(v42);
  if (v42 == 0.0)
    v43 = 0;
  v169 = v43;
  if ((v2 & 0x100000000000) == 0)
    goto LABEL_280;
LABEL_75:
  v44 = *((float *)this + 47);
  v45 = LODWORD(v44);
  if (v44 == 0.0)
    v45 = 0;
  v168 = v45;
  if ((*((_WORD *)this + 162) & 0x20) == 0)
    goto LABEL_281;
LABEL_78:
  v46 = *((float *)this + 72);
  v47 = LODWORD(v46);
  if (v46 == 0.0)
    v47 = 0;
  v167 = v47;
  if ((v2 & 0x100000000000000) == 0)
    goto LABEL_282;
LABEL_81:
  v48 = *((float *)this + 59);
  v49 = LODWORD(v48);
  if (v48 == 0.0)
    v49 = 0;
  v166 = v49;
  if ((v2 & 0x2000000000000000) == 0)
    goto LABEL_283;
LABEL_84:
  v50 = *((float *)this + 64);
  v51 = LODWORD(v50);
  if (v50 == 0.0)
    v51 = 0;
  v165 = v51;
  if ((v2 & 0x200000) == 0)
    goto LABEL_284;
LABEL_87:
  v52 = *((float *)this + 24);
  v53 = LODWORD(v52);
  if (v52 == 0.0)
    v53 = 0;
  v164 = v53;
  if ((v2 & 0x200000000000) == 0)
    goto LABEL_285;
LABEL_90:
  v54 = *((float *)this + 48);
  v55 = LODWORD(v54);
  if (v54 == 0.0)
    v55 = 0;
  v163 = v55;
  if ((*((_WORD *)this + 162) & 0x40) == 0)
    goto LABEL_286;
LABEL_93:
  v56 = *((float *)this + 73);
  v57 = LODWORD(v56);
  if (v56 == 0.0)
    v57 = 0;
  v162 = v57;
  if ((v2 & 0x80) == 0)
    goto LABEL_287;
LABEL_96:
  v58 = *((float *)this + 10);
  v59 = LODWORD(v58);
  if (v58 == 0.0)
    v59 = 0;
  v161 = v59;
  if ((v2 & 0x400) == 0)
    goto LABEL_288;
LABEL_99:
  v60 = *((float *)this + 13);
  v61 = LODWORD(v60);
  if (v60 == 0.0)
    v61 = 0;
  v160 = v61;
  if ((v2 & 0x200) == 0)
    goto LABEL_289;
LABEL_102:
  v62 = *((float *)this + 12);
  v63 = LODWORD(v62);
  if (v62 == 0.0)
    v63 = 0;
  v159 = v63;
  if ((v2 & 0x100) == 0)
    goto LABEL_290;
LABEL_105:
  v64 = *((float *)this + 11);
  v65 = LODWORD(v64);
  if (v64 == 0.0)
    v65 = 0;
  v158 = v65;
  if ((v2 & 4) == 0)
    goto LABEL_291;
LABEL_108:
  v66 = *((float *)this + 5);
  v67 = LODWORD(v66);
  if (v66 == 0.0)
    v67 = 0;
  v157 = v67;
  if ((v2 & 0x20) == 0)
    goto LABEL_292;
LABEL_111:
  v68 = *((float *)this + 8);
  v69 = LODWORD(v68);
  if (v68 == 0.0)
    v69 = 0;
  v156 = v69;
  if ((v2 & 0x10) == 0)
    goto LABEL_293;
LABEL_114:
  v70 = *((float *)this + 7);
  v71 = LODWORD(v70);
  if (v70 == 0.0)
    v71 = 0;
  v155 = v71;
  if ((v2 & 8) == 0)
    goto LABEL_294;
LABEL_117:
  v72 = *((float *)this + 6);
  v73 = LODWORD(v72);
  if (v72 == 0.0)
    v73 = 0;
  v154 = v73;
  if ((v2 & 0x800) == 0)
    goto LABEL_295;
LABEL_120:
  v74 = *((float *)this + 14);
  v75 = LODWORD(v74);
  if (v74 == 0.0)
    v75 = 0;
  v153 = v75;
  if ((v2 & 0x4000) == 0)
    goto LABEL_296;
LABEL_123:
  v76 = *((float *)this + 17);
  v77 = LODWORD(v76);
  if (v76 == 0.0)
    v77 = 0;
  v152 = v77;
  if ((v2 & 0x2000) == 0)
    goto LABEL_297;
LABEL_126:
  v78 = *((float *)this + 16);
  v79 = LODWORD(v78);
  if (v78 == 0.0)
    v79 = 0;
  v151 = v79;
  if ((v2 & 0x1000) == 0)
    goto LABEL_298;
LABEL_129:
  v80 = *((float *)this + 15);
  v81 = LODWORD(v80);
  if (v80 == 0.0)
    v81 = 0;
  v150 = v81;
  if ((v2 & 0x10000) == 0)
    goto LABEL_299;
LABEL_132:
  v82 = *((float *)this + 19);
  v83 = LODWORD(v82);
  if (v82 == 0.0)
    v83 = 0;
  v149 = v83;
  if ((v2 & 0x20000) == 0)
    goto LABEL_300;
LABEL_135:
  v84 = *((float *)this + 20);
  v85 = LODWORD(v84);
  if (v84 == 0.0)
    v85 = 0;
  v148 = v85;
  if ((v2 & 0x200000000000000) == 0)
    goto LABEL_301;
LABEL_138:
  v86 = *((float *)this + 60);
  v87 = LODWORD(v86);
  if (v86 == 0.0)
    v87 = 0;
  v147 = v87;
  if ((v2 & 0x4000000000000000) == 0)
    goto LABEL_302;
LABEL_141:
  v88 = *((float *)this + 65);
  v89 = LODWORD(v88);
  if (v88 == 0.0)
    v89 = 0;
  v146 = v89;
  if ((v2 & 0x400000) == 0)
    goto LABEL_303;
LABEL_144:
  v90 = *((float *)this + 25);
  v91 = LODWORD(v90);
  if (v90 == 0.0)
    v91 = 0;
  v145 = v91;
  if ((v2 & 0x400000000000) == 0)
    goto LABEL_304;
LABEL_147:
  v92 = *((float *)this + 49);
  if (v92 == 0.0)
    v93 = 0;
  else
    v93 = LODWORD(v92);
  if ((*((_WORD *)this + 162) & 0x80) == 0)
    goto LABEL_305;
LABEL_151:
  v94 = *((float *)this + 74);
  if (v94 == 0.0)
    v95 = 0;
  else
    v95 = LODWORD(v94);
  if ((v2 & 0x400000000000000) == 0)
    goto LABEL_306;
LABEL_155:
  v96 = *((float *)this + 61);
  if (v96 == 0.0)
    v97 = 0;
  else
    v97 = LODWORD(v96);
  if ((v2 & 0x8000000000000000) == 0)
    goto LABEL_307;
LABEL_159:
  v98 = *((float *)this + 66);
  if (v98 == 0.0)
    v99 = 0;
  else
    v99 = LODWORD(v98);
  if ((v2 & 0x800000) == 0)
    goto LABEL_308;
LABEL_163:
  v100 = *((float *)this + 26);
  if (v100 == 0.0)
    v101 = 0;
  else
    v101 = LODWORD(v100);
  if ((v2 & 0x800000000000) == 0)
    goto LABEL_309;
LABEL_167:
  v102 = *((float *)this + 50);
  if (v102 == 0.0)
    v103 = 0;
  else
    v103 = LODWORD(v102);
  if ((*((_WORD *)this + 162) & 0x100) == 0)
    goto LABEL_310;
LABEL_171:
  v104 = *((float *)this + 75);
  if (v104 == 0.0)
    v105 = 0;
  else
    v105 = LODWORD(v104);
  if ((v2 & 0x100000000) == 0)
    goto LABEL_311;
LABEL_175:
  v106 = *((float *)this + 35);
  if (v106 == 0.0)
    v107 = 0;
  else
    v107 = LODWORD(v106);
  if ((v2 & 0x200000000) == 0)
    goto LABEL_312;
LABEL_179:
  v108 = *((float *)this + 36);
  if (v108 == 0.0)
    v109 = 0;
  else
    v109 = LODWORD(v108);
  if ((v2 & 0x8000000) == 0)
    goto LABEL_313;
LABEL_183:
  v110 = *((float *)this + 30);
  if (v110 == 0.0)
    v111 = 0;
  else
    v111 = LODWORD(v110);
  if ((v2 & 0x4000000) == 0)
    goto LABEL_314;
LABEL_187:
  v112 = *((float *)this + 29);
  if (v112 == 0.0)
    v113 = 0;
  else
    v113 = LODWORD(v112);
  if ((v2 & 0x80000000) == 0)
    goto LABEL_315;
LABEL_191:
  v114 = *((float *)this + 34);
  if (v114 == 0.0)
    v115 = 0;
  else
    v115 = LODWORD(v114);
  if ((v2 & 0x40000000) == 0)
    goto LABEL_316;
LABEL_195:
  v116 = *((float *)this + 33);
  if (v116 == 0.0)
    v117 = 0;
  else
    v117 = LODWORD(v116);
  if ((v2 & 0x20000000) == 0)
    goto LABEL_317;
LABEL_199:
  v118 = *((float *)this + 32);
  if (v118 == 0.0)
    v119 = 0;
  else
    v119 = LODWORD(v118);
  if ((v2 & 0x10000000) == 0)
    goto LABEL_318;
LABEL_203:
  v120 = *((float *)this + 31);
  if (v120 == 0.0)
    v121 = 0;
  else
    v121 = LODWORD(v120);
  if ((v2 & 0x10000000000) == 0)
    goto LABEL_319;
LABEL_207:
  v122 = *((float *)this + 43);
  if (v122 == 0.0)
    v123 = 0;
  else
    v123 = LODWORD(v122);
  if ((v2 & 0x20000000000) == 0)
    goto LABEL_320;
LABEL_211:
  v124 = *((float *)this + 44);
  if (v124 == 0.0)
    v125 = 0;
  else
    v125 = LODWORD(v124);
  if ((v2 & 0x800000000) == 0)
    goto LABEL_321;
LABEL_215:
  v126 = *((float *)this + 38);
  if (v126 == 0.0)
    v127 = 0;
  else
    v127 = LODWORD(v126);
  if ((v2 & 0x400000000) == 0)
    goto LABEL_322;
LABEL_219:
  v128 = *((float *)this + 37);
  if (v128 == 0.0)
    v129 = 0;
  else
    v129 = LODWORD(v128);
  if ((v2 & 0x8000000000) == 0)
    goto LABEL_323;
LABEL_223:
  v130 = *((float *)this + 42);
  if (v130 == 0.0)
    v131 = 0;
  else
    v131 = LODWORD(v130);
  if ((v2 & 0x4000000000) == 0)
    goto LABEL_324;
LABEL_227:
  v132 = *((float *)this + 41);
  if (v132 == 0.0)
    v133 = 0;
  else
    v133 = LODWORD(v132);
  if ((v2 & 0x2000000000) == 0)
    goto LABEL_325;
LABEL_231:
  v134 = *((float *)this + 40);
  v135 = LODWORD(v134);
  if (v134 == 0.0)
    v135 = 0;
  if ((v2 & 0x1000000000) == 0)
    goto LABEL_326;
LABEL_234:
  v136 = *((float *)this + 39);
  if (v136 == 0.0)
    v137 = 0;
  else
    v137 = LODWORD(v136);
  if ((*((_WORD *)this + 162) & 2) == 0)
    goto LABEL_327;
LABEL_238:
  v138 = *((float *)this + 68);
  v139 = LODWORD(v138);
  if (v138 == 0.0)
    v139 = 0;
  if ((*((_WORD *)this + 162) & 4) != 0)
  {
LABEL_241:
    v140 = *((float *)this + 69);
    v141 = LODWORD(v140);
    if (v140 == 0.0)
      v141 = 0;
    if ((*((_WORD *)this + 162) & 1) != 0)
      goto LABEL_244;
LABEL_329:
    v143 = 0;
    return v200 ^ v3 ^ v199 ^ v198 ^ v197 ^ v196 ^ v195 ^ v194 ^ v193 ^ v192 ^ v191 ^ v190 ^ v189 ^ v188 ^ v187 ^ v186 ^ v185 ^ v184 ^ v183 ^ v182 ^ v181 ^ v180 ^ v179 ^ v178 ^ v177 ^ v176 ^ v175 ^ v174 ^ v173 ^ v172 ^ v171 ^ v170 ^ v169 ^ v168 ^ v167 ^ v166 ^ v165 ^ v164 ^ v163 ^ v162 ^ v161 ^ v160 ^ v159 ^ v158 ^ v157 ^ v156 ^ v155 ^ v154 ^ v153 ^ v152 ^ v151 ^ v150 ^ v149 ^ v148 ^ v147 ^ v146 ^ v145 ^ v93 ^ v95 ^ v97 ^ v99 ^ v101 ^ v103 ^ v105 ^ v107 ^ v109 ^ v111 ^ v113 ^ v115 ^ v117 ^ v119 ^ v121 ^ v123 ^ v125 ^ v127 ^ v129 ^ v131 ^ v133 ^ v135 ^ v137 ^ v139 ^ v141 ^ v143;
  }
LABEL_328:
  v141 = 0;
  if ((*((_WORD *)this + 162) & 1) == 0)
    goto LABEL_329;
LABEL_244:
  v142 = *((float *)this + 67);
  v143 = LODWORD(v142);
  if (v142 == 0.0)
    v143 = 0;
  return v200 ^ v3 ^ v199 ^ v198 ^ v197 ^ v196 ^ v195 ^ v194 ^ v193 ^ v192 ^ v191 ^ v190 ^ v189 ^ v188 ^ v187 ^ v186 ^ v185 ^ v184 ^ v183 ^ v182 ^ v181 ^ v180 ^ v179 ^ v178 ^ v177 ^ v176 ^ v175 ^ v174 ^ v173 ^ v172 ^ v171 ^ v170 ^ v169 ^ v168 ^ v167 ^ v166 ^ v165 ^ v164 ^ v163 ^ v162 ^ v161 ^ v160 ^ v159 ^ v158 ^ v157 ^ v156 ^ v155 ^ v154 ^ v153 ^ v152 ^ v151 ^ v150 ^ v149 ^ v148 ^ v147 ^ v146 ^ v145 ^ v93 ^ v95 ^ v97 ^ v99 ^ v101 ^ v103 ^ v105 ^ v107 ^ v109 ^ v111 ^ v113 ^ v115 ^ v117 ^ v119 ^ v121 ^ v123 ^ v125 ^ v127 ^ v129 ^ v131 ^ v133 ^ v135 ^ v137 ^ v139 ^ v141 ^ v143;
}

void CMMsl::KappaSevereCrashResult::~KappaSevereCrashResult(CMMsl::KappaSevereCrashResult *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::KappaSevereCrashResult::KappaSevereCrashResult(CMMsl::KappaSevereCrashResult *this, const CMMsl::KappaSevereCrashResult *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float result;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  int v44;
  char v45;
  char v46;
  char v47;
  int v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  int v54;
  int v55;
  int v56;
  int v57;
  char v58;
  char v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  char v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  int v71;
  char v72;
  int v73;
  int v74;
  int v75;
  char v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  char v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;

  *(_QWORD *)this = &off_25135EC50;
  v2 = (uint64_t *)((char *)this + 356);
  *(_QWORD *)((char *)this + 364) = 0;
  *(_QWORD *)((char *)this + 356) = 0;
  v3 = (uint64_t *)((char *)a2 + 356);
  v4 = *(_QWORD *)((char *)a2 + 356);
  if ((v4 & 0x800000) != 0)
  {
    v6 = 0;
    result = *((float *)a2 + 33);
    v5 = 0x800000;
    *v2 = 0x800000;
    *(_QWORD *)((char *)this + 364) = 0;
    *((float *)this + 33) = result;
    v4 = *v3;
    v7 = *(_QWORD *)((char *)a2 + 364);
    if ((*v3 & 0x400000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = 0;
  v6 = 0;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v4 & 0x400000) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 32);
    v5 |= 0x400000uLL;
    *v2 = v5;
    *(_QWORD *)((char *)this + 364) = 0;
    *((float *)this + 32) = result;
    v4 = *v3;
    v7 = *(_QWORD *)((char *)a2 + 364);
  }
LABEL_6:
  if ((v4 & 0x1000000) != 0)
  {
    v11 = *((_DWORD *)a2 + 34);
    v5 |= 0x1000000uLL;
    *v2 = v5;
    *(_QWORD *)((char *)this + 364) = 0;
    *((_DWORD *)this + 34) = v11;
    v4 = *v3;
    v7 = *(_QWORD *)((char *)a2 + 364);
    if ((*v3 & 0x10000000000000) == 0)
    {
LABEL_8:
      if ((v7 & 1) == 0)
        goto LABEL_9;
      goto LABEL_115;
    }
  }
  else if ((v4 & 0x10000000000000) == 0)
  {
    goto LABEL_8;
  }
  v12 = *((_DWORD *)a2 + 62);
  v5 |= 0x10000000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = 0;
  *((_DWORD *)this + 62) = v12;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 0x400000000000000) == 0)
      goto LABEL_10;
    goto LABEL_116;
  }
LABEL_115:
  result = *((float *)a2 + 74);
  v6 = 1;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = 1;
  *((float *)this + 74) = result;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x400000000000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x400000000000) == 0)
      goto LABEL_11;
    goto LABEL_117;
  }
LABEL_116:
  result = *((float *)a2 + 68);
  v5 |= 0x400000000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((float *)this + 68) = result;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x400000000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x200000000000) == 0)
      goto LABEL_12;
    goto LABEL_118;
  }
LABEL_117:
  result = *((float *)a2 + 56);
  v5 |= 0x400000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((float *)this + 56) = result;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x200000000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_119;
  }
LABEL_118:
  result = *((float *)a2 + 55);
  v5 |= 0x200000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((float *)this + 55) = result;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x200) == 0)
  {
LABEL_13:
    if ((v4 & 0x80000000000000) == 0)
      goto LABEL_14;
    goto LABEL_120;
  }
LABEL_119:
  result = *((float *)a2 + 19);
  v5 |= 0x200uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((float *)this + 19) = result;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x80000000000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_15;
    goto LABEL_121;
  }
LABEL_120:
  v13 = *((_DWORD *)a2 + 65);
  v5 |= 0x80000000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 65) = v13;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x10000) == 0)
      goto LABEL_16;
    goto LABEL_122;
  }
LABEL_121:
  v14 = *((_DWORD *)a2 + 35);
  v5 |= 0x2000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 35) = v14;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x10000) == 0)
  {
LABEL_16:
    if ((v7 & 8) == 0)
      goto LABEL_17;
    goto LABEL_123;
  }
LABEL_122:
  result = *((float *)a2 + 26);
  v5 |= 0x10000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((float *)this + 26) = result;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 8) == 0)
  {
LABEL_17:
    if ((v7 & 0x10) == 0)
      goto LABEL_18;
    goto LABEL_124;
  }
LABEL_123:
  result = *((float *)a2 + 77);
  v6 |= 8uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((float *)this + 77) = result;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x10) == 0)
  {
LABEL_18:
    if ((v4 & 0x80000000000) == 0)
      goto LABEL_19;
    goto LABEL_125;
  }
LABEL_124:
  result = *((float *)a2 + 78);
  v6 |= 0x10uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((float *)this + 78) = result;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x80000000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x20000000000) == 0)
      goto LABEL_20;
    goto LABEL_126;
  }
LABEL_125:
  v15 = *((_DWORD *)a2 + 53);
  v5 |= 0x80000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 53) = v15;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x20000000000) == 0)
  {
LABEL_20:
    if ((v4 & 0x4000000000000) == 0)
      goto LABEL_21;
    goto LABEL_127;
  }
LABEL_126:
  v16 = *((_DWORD *)a2 + 51);
  v5 |= 0x20000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 51) = v16;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x4000000000000) == 0)
  {
LABEL_21:
    if ((v4 & 0x1000000000000000) == 0)
      goto LABEL_22;
    goto LABEL_128;
  }
LABEL_127:
  result = *((float *)a2 + 60);
  v5 |= 0x4000000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((float *)this + 60) = result;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x1000000000000000) == 0)
  {
LABEL_22:
    if ((v7 & 2) == 0)
      goto LABEL_23;
    goto LABEL_129;
  }
LABEL_128:
  v17 = *((_DWORD *)a2 + 70);
  v5 |= 0x1000000000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 70) = v17;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 2) == 0)
  {
LABEL_23:
    if ((v4 & 0x80) == 0)
      goto LABEL_24;
    goto LABEL_130;
  }
LABEL_129:
  v18 = *((_DWORD *)a2 + 75);
  v6 |= 2uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 75) = v18;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x80) == 0)
  {
LABEL_24:
    if ((v4 & 1) == 0)
      goto LABEL_25;
    goto LABEL_131;
  }
LABEL_130:
  v19 = *((_QWORD *)a2 + 8);
  v5 |= 0x80uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_QWORD *)this + 8) = v19;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 1) == 0)
  {
LABEL_25:
    if ((v7 & 0x40) == 0)
      goto LABEL_26;
    goto LABEL_132;
  }
LABEL_131:
  v20 = *((_QWORD *)a2 + 1);
  v5 |= 1uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_QWORD *)this + 1) = v20;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x40) == 0)
  {
LABEL_26:
    if ((v7 & 0x80) == 0)
      goto LABEL_27;
    goto LABEL_133;
  }
LABEL_132:
  v21 = *((_BYTE *)a2 + 317);
  v6 |= 0x40uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 317) = v21;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x80) == 0)
  {
LABEL_27:
    if ((v7 & 0x8000) == 0)
      goto LABEL_28;
    goto LABEL_134;
  }
LABEL_133:
  v22 = *((_BYTE *)a2 + 318);
  v6 |= 0x80uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 318) = v22;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x8000) == 0)
  {
LABEL_28:
    if ((v7 & 0x10000) == 0)
      goto LABEL_29;
    goto LABEL_135;
  }
LABEL_134:
  v23 = *((_BYTE *)a2 + 326);
  v6 |= 0x8000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 326) = v23;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x10000) == 0)
  {
LABEL_29:
    if ((v7 & 0x8000000) == 0)
      goto LABEL_30;
    goto LABEL_136;
  }
LABEL_135:
  v24 = *((_BYTE *)a2 + 327);
  v6 |= 0x10000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 327) = v24;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x8000000) == 0)
  {
LABEL_30:
    if ((v7 & 0x2000000) == 0)
      goto LABEL_31;
    goto LABEL_137;
  }
LABEL_136:
  v25 = *((_BYTE *)a2 + 338);
  v6 |= 0x8000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 338) = v25;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x2000000) == 0)
  {
LABEL_31:
    if ((v7 & 0x1000) == 0)
      goto LABEL_32;
    goto LABEL_138;
  }
LABEL_137:
  v26 = *((_BYTE *)a2 + 336);
  v6 |= 0x2000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 336) = v26;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x1000) == 0)
  {
LABEL_32:
    if ((v7 & 0x10000000) == 0)
      goto LABEL_33;
    goto LABEL_139;
  }
LABEL_138:
  v27 = *((_BYTE *)a2 + 323);
  v6 |= 0x1000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 323) = v27;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x10000000) == 0)
  {
LABEL_33:
    if ((v7 & 0x20000000) == 0)
      goto LABEL_34;
    goto LABEL_140;
  }
LABEL_139:
  v28 = *((_BYTE *)a2 + 339);
  v6 |= 0x10000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 339) = v28;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x20000000) == 0)
  {
LABEL_34:
    if ((v7 & 0x200) == 0)
      goto LABEL_35;
    goto LABEL_141;
  }
LABEL_140:
  v29 = *((_BYTE *)a2 + 340);
  v6 |= 0x20000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 340) = v29;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x200) == 0)
  {
LABEL_35:
    if ((v7 & 0x1000000) == 0)
      goto LABEL_36;
    goto LABEL_142;
  }
LABEL_141:
  v30 = *((_BYTE *)a2 + 320);
  v6 |= 0x200uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 320) = v30;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x1000000) == 0)
  {
LABEL_36:
    if ((v7 & 0x2000) == 0)
      goto LABEL_37;
    goto LABEL_143;
  }
LABEL_142:
  v31 = *((_BYTE *)a2 + 335);
  v6 |= 0x1000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 335) = v31;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x2000) == 0)
  {
LABEL_37:
    if ((v7 & 0x4000000) == 0)
      goto LABEL_38;
    goto LABEL_144;
  }
LABEL_143:
  v32 = *((_BYTE *)a2 + 324);
  v6 |= 0x2000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 324) = v32;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x4000000) == 0)
  {
LABEL_38:
    if ((v7 & 0x80000) == 0)
      goto LABEL_39;
    goto LABEL_145;
  }
LABEL_144:
  v33 = *((_BYTE *)a2 + 337);
  v6 |= 0x4000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 337) = v33;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x80000) == 0)
  {
LABEL_39:
    if ((v7 & 0x2000000000) == 0)
      goto LABEL_40;
    goto LABEL_146;
  }
LABEL_145:
  v34 = *((_BYTE *)a2 + 330);
  v6 |= 0x80000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 330) = v34;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x2000000000) == 0)
  {
LABEL_40:
    if ((v7 & 0x200000000) == 0)
      goto LABEL_41;
    goto LABEL_147;
  }
LABEL_146:
  v35 = *((_BYTE *)a2 + 348);
  v6 |= 0x2000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 348) = v35;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x200000000) == 0)
  {
LABEL_41:
    if ((v7 & 0x4000000000) == 0)
      goto LABEL_42;
    goto LABEL_148;
  }
LABEL_147:
  v36 = *((_BYTE *)a2 + 344);
  v6 |= 0x200000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 344) = v36;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x4000000000) == 0)
  {
LABEL_42:
    if ((v7 & 0x400000000) == 0)
      goto LABEL_43;
    goto LABEL_149;
  }
LABEL_148:
  v37 = *((_BYTE *)a2 + 349);
  v6 |= 0x4000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 349) = v37;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x400000000) == 0)
  {
LABEL_43:
    if ((v7 & 0x40000000) == 0)
      goto LABEL_44;
    goto LABEL_150;
  }
LABEL_149:
  v38 = *((_BYTE *)a2 + 345);
  v6 |= 0x400000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 345) = v38;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x40000000) == 0)
  {
LABEL_44:
    if ((v7 & 0x800) == 0)
      goto LABEL_45;
    goto LABEL_151;
  }
LABEL_150:
  v39 = *((_BYTE *)a2 + 341);
  v6 |= 0x40000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 341) = v39;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x800) == 0)
  {
LABEL_45:
    if ((v7 & 0x100000) == 0)
      goto LABEL_46;
    goto LABEL_152;
  }
LABEL_151:
  v40 = *((_BYTE *)a2 + 322);
  v6 |= 0x800uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 322) = v40;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x100000) == 0)
  {
LABEL_46:
    if ((v7 & 0x8000000000) == 0)
      goto LABEL_47;
    goto LABEL_153;
  }
LABEL_152:
  v41 = *((_BYTE *)a2 + 331);
  v6 |= 0x100000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 331) = v41;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x8000000000) == 0)
  {
LABEL_47:
    if ((v7 & 0x800000000) == 0)
      goto LABEL_48;
    goto LABEL_154;
  }
LABEL_153:
  v42 = *((_BYTE *)a2 + 350);
  v6 |= 0x8000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 350) = v42;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x800000000) == 0)
  {
LABEL_48:
    if ((v4 & 0x20000) == 0)
      goto LABEL_49;
    goto LABEL_155;
  }
LABEL_154:
  v43 = *((_BYTE *)a2 + 346);
  v6 |= 0x800000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 346) = v43;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x20000) == 0)
  {
LABEL_49:
    if ((v7 & 0x400000) == 0)
      goto LABEL_50;
    goto LABEL_156;
  }
LABEL_155:
  v44 = *((_DWORD *)a2 + 27);
  v5 |= 0x20000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 27) = v44;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x400000) == 0)
  {
LABEL_50:
    if ((v7 & 0x800000) == 0)
      goto LABEL_51;
    goto LABEL_157;
  }
LABEL_156:
  v45 = *((_BYTE *)a2 + 333);
  v6 |= 0x400000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 333) = v45;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x800000) == 0)
  {
LABEL_51:
    if ((v7 & 0x20) == 0)
      goto LABEL_52;
    goto LABEL_158;
  }
LABEL_157:
  v46 = *((_BYTE *)a2 + 334);
  v6 |= 0x800000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 334) = v46;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x20) == 0)
  {
LABEL_52:
    if ((v4 & 0x40000) == 0)
      goto LABEL_53;
    goto LABEL_159;
  }
LABEL_158:
  v47 = *((_BYTE *)a2 + 316);
  v6 |= 0x20uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 316) = v47;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x40000) == 0)
  {
LABEL_53:
    if ((v7 & 0x40000000000) == 0)
      goto LABEL_54;
    goto LABEL_160;
  }
LABEL_159:
  v48 = *((_DWORD *)a2 + 28);
  v5 |= 0x40000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 28) = v48;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x40000000000) == 0)
  {
LABEL_54:
    if ((v7 & 0x10000000000) == 0)
      goto LABEL_55;
    goto LABEL_161;
  }
LABEL_160:
  v49 = *((_BYTE *)a2 + 353);
  v6 |= 0x40000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 353) = v49;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x10000000000) == 0)
  {
LABEL_55:
    if ((v7 & 0x20000000000) == 0)
      goto LABEL_56;
    goto LABEL_162;
  }
LABEL_161:
  v50 = *((_BYTE *)a2 + 351);
  v6 |= 0x10000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 351) = v50;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x20000000000) == 0)
  {
LABEL_56:
    if ((v7 & 0x100000000) == 0)
      goto LABEL_57;
    goto LABEL_163;
  }
LABEL_162:
  v51 = *((_BYTE *)a2 + 352);
  v6 |= 0x20000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 352) = v51;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x100000000) == 0)
  {
LABEL_57:
    if ((v7 & 0x80000000) == 0)
      goto LABEL_58;
    goto LABEL_164;
  }
LABEL_163:
  v52 = *((_BYTE *)a2 + 343);
  v6 |= 0x100000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 343) = v52;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x80000000) == 0)
  {
LABEL_58:
    if ((v4 & 0x20000000000000) == 0)
      goto LABEL_59;
    goto LABEL_165;
  }
LABEL_164:
  v53 = *((_BYTE *)a2 + 342);
  v6 |= 0x80000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 342) = v53;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x20000000000000) == 0)
  {
LABEL_59:
    if ((v4 & 0x40000000000000) == 0)
      goto LABEL_60;
    goto LABEL_166;
  }
LABEL_165:
  v54 = *((_DWORD *)a2 + 63);
  v5 |= 0x20000000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 63) = v54;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x40000000000000) == 0)
  {
LABEL_60:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_61;
    goto LABEL_167;
  }
LABEL_166:
  v55 = *((_DWORD *)a2 + 64);
  v5 |= 0x40000000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 64) = v55;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x4000000) == 0)
  {
LABEL_61:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_62;
    goto LABEL_168;
  }
LABEL_167:
  v56 = *((_DWORD *)a2 + 36);
  v5 |= 0x4000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 36) = v56;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x8000000) == 0)
  {
LABEL_62:
    if ((v7 & 0x20000) == 0)
      goto LABEL_63;
    goto LABEL_169;
  }
LABEL_168:
  v57 = *((_DWORD *)a2 + 37);
  v5 |= 0x8000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 37) = v57;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x20000) == 0)
  {
LABEL_63:
    if ((v7 & 0x4000) == 0)
      goto LABEL_64;
    goto LABEL_170;
  }
LABEL_169:
  v58 = *((_BYTE *)a2 + 328);
  v6 |= 0x20000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 328) = v58;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x4000) == 0)
  {
LABEL_64:
    if ((v4 & 0x2000000000) == 0)
      goto LABEL_65;
    goto LABEL_171;
  }
LABEL_170:
  v59 = *((_BYTE *)a2 + 325);
  v6 |= 0x4000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 325) = v59;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x2000000000) == 0)
  {
LABEL_65:
    if ((v4 & 0x80000) == 0)
      goto LABEL_66;
    goto LABEL_172;
  }
LABEL_171:
  v60 = *((_DWORD *)a2 + 47);
  v5 |= 0x2000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 47) = v60;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x80000) == 0)
  {
LABEL_66:
    if ((v4 & 0x1000000000) == 0)
      goto LABEL_67;
    goto LABEL_173;
  }
LABEL_172:
  v61 = *((_DWORD *)a2 + 29);
  v5 |= 0x80000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 29) = v61;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x1000000000) == 0)
  {
LABEL_67:
    if ((v4 & 0x4000000000000000) == 0)
      goto LABEL_68;
    goto LABEL_174;
  }
LABEL_173:
  v62 = *((_DWORD *)a2 + 46);
  v5 |= 0x1000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 46) = v62;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x4000000000000000) == 0)
  {
LABEL_68:
    if ((v4 & 0x8000000000000000) == 0)
      goto LABEL_69;
    goto LABEL_175;
  }
LABEL_174:
  result = *((float *)a2 + 72);
  v5 |= 0x4000000000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((float *)this + 72) = result;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x8000000000000000) == 0)
  {
LABEL_69:
    if ((v4 & 0x200000000000000) == 0)
      goto LABEL_70;
    goto LABEL_176;
  }
LABEL_175:
  result = *((float *)a2 + 73);
  v5 |= 0x8000000000000000;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((float *)this + 73) = result;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x200000000000000) == 0)
  {
LABEL_70:
    if ((v4 & 0x800000000000000) == 0)
      goto LABEL_71;
    goto LABEL_177;
  }
LABEL_176:
  result = *((float *)a2 + 67);
  v5 |= 0x200000000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((float *)this + 67) = result;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x800000000000000) == 0)
  {
LABEL_71:
    if ((v4 & 0x2000000000000000) == 0)
      goto LABEL_72;
    goto LABEL_178;
  }
LABEL_177:
  v63 = *((_DWORD *)a2 + 69);
  v5 |= 0x800000000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 69) = v63;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x2000000000000000) == 0)
  {
LABEL_72:
    if ((v7 & 0x400) == 0)
      goto LABEL_73;
    goto LABEL_179;
  }
LABEL_178:
  v64 = *((_DWORD *)a2 + 71);
  v5 |= 0x2000000000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 71) = v64;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x400) == 0)
  {
LABEL_73:
    if ((v4 & 0x4000) == 0)
      goto LABEL_74;
    goto LABEL_180;
  }
LABEL_179:
  v65 = *((_BYTE *)a2 + 321);
  v6 |= 0x400uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 321) = v65;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x4000) == 0)
  {
LABEL_74:
    if ((v4 & 0x1000) == 0)
      goto LABEL_75;
    goto LABEL_181;
  }
LABEL_180:
  v66 = *((_DWORD *)a2 + 24);
  v5 |= 0x4000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 24) = v66;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x1000) == 0)
  {
LABEL_75:
    if ((v4 & 0x100000000000) == 0)
      goto LABEL_76;
    goto LABEL_182;
  }
LABEL_181:
  result = *((float *)a2 + 22);
  v5 |= 0x1000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((float *)this + 22) = result;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x100000000000) == 0)
  {
LABEL_76:
    if ((v4 & 0x100000000000000) == 0)
      goto LABEL_77;
    goto LABEL_183;
  }
LABEL_182:
  v67 = *((_DWORD *)a2 + 54);
  v5 |= 0x100000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 54) = v67;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x100000000000000) == 0)
  {
LABEL_77:
    if ((v4 & 0x40) == 0)
      goto LABEL_78;
    goto LABEL_184;
  }
LABEL_183:
  v68 = *((_DWORD *)a2 + 66);
  v5 |= 0x100000000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 66) = v68;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x40) == 0)
  {
LABEL_78:
    if ((v4 & 0x800000000000) == 0)
      goto LABEL_79;
    goto LABEL_185;
  }
LABEL_184:
  v69 = *((_QWORD *)a2 + 7);
  v5 |= 0x40uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_QWORD *)this + 7) = v69;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x800000000000) == 0)
  {
LABEL_79:
    if ((v4 & 0x1000000000000) == 0)
      goto LABEL_80;
    goto LABEL_186;
  }
LABEL_185:
  v70 = *((_DWORD *)a2 + 57);
  v5 |= 0x800000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 57) = v70;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x1000000000000) == 0)
  {
LABEL_80:
    if ((v4 & 0x100000) == 0)
      goto LABEL_81;
    goto LABEL_187;
  }
LABEL_186:
  v71 = *((_DWORD *)a2 + 58);
  v5 |= 0x1000000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 58) = v71;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x100000) == 0)
  {
LABEL_81:
    if ((v4 & 0x400) == 0)
      goto LABEL_82;
    goto LABEL_188;
  }
LABEL_187:
  result = *((float *)a2 + 30);
  v5 |= 0x100000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((float *)this + 30) = result;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x400) == 0)
  {
LABEL_82:
    if ((v4 & 0x200000) == 0)
      goto LABEL_83;
    goto LABEL_189;
  }
LABEL_188:
  result = *((float *)a2 + 20);
  v5 |= 0x400uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((float *)this + 20) = result;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x200000) == 0)
  {
LABEL_83:
    if ((v4 & 0x800) == 0)
      goto LABEL_84;
    goto LABEL_190;
  }
LABEL_189:
  result = *((float *)a2 + 31);
  v5 |= 0x200000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((float *)this + 31) = result;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x800) == 0)
  {
LABEL_84:
    if ((v4 & 0x100) == 0)
      goto LABEL_85;
    goto LABEL_191;
  }
LABEL_190:
  result = *((float *)a2 + 21);
  v5 |= 0x800uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((float *)this + 21) = result;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x100) == 0)
  {
LABEL_85:
    if ((v7 & 0x200000) == 0)
      goto LABEL_86;
    goto LABEL_192;
  }
LABEL_191:
  result = *((float *)a2 + 18);
  v5 |= 0x100uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((float *)this + 18) = result;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x200000) == 0)
  {
LABEL_86:
    if ((v7 & 4) == 0)
      goto LABEL_87;
    goto LABEL_193;
  }
LABEL_192:
  v72 = *((_BYTE *)a2 + 332);
  v6 |= 0x200000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 332) = v72;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 4) == 0)
  {
LABEL_87:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_88;
    goto LABEL_194;
  }
LABEL_193:
  v73 = *((_DWORD *)a2 + 76);
  v6 |= 4uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 76) = v73;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x10000000) == 0)
  {
LABEL_88:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_89;
    goto LABEL_195;
  }
LABEL_194:
  v74 = *((_DWORD *)a2 + 38);
  v5 |= 0x10000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 38) = v74;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x40000000) == 0)
  {
LABEL_89:
    if ((v7 & 0x1000000000) == 0)
      goto LABEL_90;
    goto LABEL_196;
  }
LABEL_195:
  v75 = *((_DWORD *)a2 + 40);
  v5 |= 0x40000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 40) = v75;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x1000000000) == 0)
  {
LABEL_90:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_91;
    goto LABEL_197;
  }
LABEL_196:
  v76 = *((_BYTE *)a2 + 347);
  v6 |= 0x1000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 347) = v76;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x80000000) == 0)
  {
LABEL_91:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_92;
    goto LABEL_198;
  }
LABEL_197:
  v77 = *((_DWORD *)a2 + 41);
  v5 |= 0x80000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 41) = v77;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x20000000) == 0)
  {
LABEL_92:
    if ((v4 & 0x8000000000000) == 0)
      goto LABEL_93;
    goto LABEL_199;
  }
LABEL_198:
  v78 = *((_DWORD *)a2 + 39);
  v5 |= 0x20000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 39) = v78;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x8000000000000) == 0)
  {
LABEL_93:
    if ((v4 & 0x4000000000) == 0)
      goto LABEL_94;
    goto LABEL_200;
  }
LABEL_199:
  result = *((float *)a2 + 61);
  v5 |= 0x8000000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((float *)this + 61) = result;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x4000000000) == 0)
  {
LABEL_94:
    if ((v4 & 0x8000000000) == 0)
      goto LABEL_95;
    goto LABEL_201;
  }
LABEL_200:
  v79 = *((_DWORD *)a2 + 48);
  v5 |= 0x4000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 48) = v79;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x8000000000) == 0)
  {
LABEL_95:
    if ((v4 & 0x8000) == 0)
      goto LABEL_96;
    goto LABEL_202;
  }
LABEL_201:
  v80 = *((_DWORD *)a2 + 49);
  v5 |= 0x8000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 49) = v80;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x8000) == 0)
  {
LABEL_96:
    if ((v4 & 0x40000000000) == 0)
      goto LABEL_97;
    goto LABEL_203;
  }
LABEL_202:
  result = *((float *)a2 + 25);
  v5 |= 0x8000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((float *)this + 25) = result;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x40000000000) == 0)
  {
LABEL_97:
    if ((v4 & 0x10000000000) == 0)
      goto LABEL_98;
    goto LABEL_204;
  }
LABEL_203:
  v81 = *((_DWORD *)a2 + 52);
  v5 |= 0x40000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 52) = v81;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x10000000000) == 0)
  {
LABEL_98:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_99;
    goto LABEL_205;
  }
LABEL_204:
  v82 = *((_DWORD *)a2 + 50);
  v5 |= 0x10000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 50) = v82;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x800000000) == 0)
  {
LABEL_99:
    if ((v4 & 0x100000000) == 0)
      goto LABEL_100;
    goto LABEL_206;
  }
LABEL_205:
  v83 = *((_DWORD *)a2 + 45);
  v5 |= 0x800000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 45) = v83;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x100000000) == 0)
  {
LABEL_100:
    if ((v4 & 0x400000000) == 0)
      goto LABEL_101;
    goto LABEL_207;
  }
LABEL_206:
  v84 = *((_DWORD *)a2 + 42);
  v5 |= 0x100000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 42) = v84;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x400000000) == 0)
  {
LABEL_101:
    if ((v7 & 0x100) == 0)
      goto LABEL_102;
    goto LABEL_208;
  }
LABEL_207:
  v85 = *((_DWORD *)a2 + 44);
  v5 |= 0x400000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 44) = v85;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x100) == 0)
  {
LABEL_102:
    if ((v7 & 0x40000) == 0)
      goto LABEL_103;
    goto LABEL_209;
  }
LABEL_208:
  v86 = *((_BYTE *)a2 + 319);
  v6 |= 0x100uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 319) = v86;
  v4 = *v3;
  if ((*(_QWORD *)((_BYTE *)a2 + 364) & 0x40000) == 0)
  {
LABEL_103:
    if ((v4 & 0x200000000) == 0)
      goto LABEL_105;
    goto LABEL_104;
  }
LABEL_209:
  v87 = *((_BYTE *)a2 + 329);
  v6 |= 0x40000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 329) = v87;
  if ((*v3 & 0x200000000) != 0)
  {
LABEL_104:
    v9 = *((_DWORD *)a2 + 43);
    *v2 = v5 | 0x200000000;
    *(_QWORD *)((char *)this + 364) = v6;
    *((_DWORD *)this + 43) = v9;
  }
LABEL_105:
  v10 = *v3;
  if ((*v3 & 2) != 0)
  {
    v88 = *((_QWORD *)a2 + 2);
    *v2 |= 2uLL;
    *((_QWORD *)this + 2) = v88;
    v10 = *v3;
    if ((*v3 & 0x20) == 0)
    {
LABEL_107:
      if ((v10 & 4) == 0)
        goto LABEL_108;
      goto LABEL_213;
    }
  }
  else if ((v10 & 0x20) == 0)
  {
    goto LABEL_107;
  }
  v89 = *((_QWORD *)a2 + 6);
  *v2 |= 0x20uLL;
  *((_QWORD *)this + 6) = v89;
  v10 = *v3;
  if ((*v3 & 4) == 0)
  {
LABEL_108:
    if ((v10 & 8) == 0)
      goto LABEL_109;
    goto LABEL_214;
  }
LABEL_213:
  v90 = *((_QWORD *)a2 + 3);
  *v2 |= 4uLL;
  *((_QWORD *)this + 3) = v90;
  v10 = *v3;
  if ((*v3 & 8) == 0)
  {
LABEL_109:
    if ((v10 & 0x10) == 0)
      goto LABEL_110;
    goto LABEL_215;
  }
LABEL_214:
  v91 = *((_QWORD *)a2 + 4);
  *v2 |= 8uLL;
  *((_QWORD *)this + 4) = v91;
  v10 = *v3;
  if ((*v3 & 0x10) == 0)
  {
LABEL_110:
    if ((v10 & 0x2000000000000) == 0)
      goto LABEL_111;
    goto LABEL_216;
  }
LABEL_215:
  v92 = *((_QWORD *)a2 + 5);
  *v2 |= 0x10uLL;
  *((_QWORD *)this + 5) = v92;
  v10 = *v3;
  if ((*v3 & 0x2000000000000) == 0)
  {
LABEL_111:
    if ((v10 & 0x2000) == 0)
      return result;
LABEL_217:
    result = *((float *)a2 + 23);
    *v2 |= 0x2000uLL;
    *((float *)this + 23) = result;
    return result;
  }
LABEL_216:
  v93 = *((_DWORD *)a2 + 59);
  *v2 |= 0x2000000000000uLL;
  *((_DWORD *)this + 59) = v93;
  if ((*v3 & 0x2000) != 0)
    goto LABEL_217;
  return result;
}

CMMsl *CMMsl::KappaSevereCrashResult::operator=(CMMsl *a1, const CMMsl::KappaSevereCrashResult *a2)
{
  CMMsl::KappaSevereCrashResult *v3;
  _BYTE v5[376];

  if (a1 != a2)
  {
    CMMsl::KappaSevereCrashResult::KappaSevereCrashResult((CMMsl::KappaSevereCrashResult *)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaSevereCrashResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaSevereCrashResult *a2, CMMsl::KappaSevereCrashResult *a3)
{
  __int128 v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float result;

  v3 = *(_OWORD *)((char *)this + 356);
  *(_OWORD *)((char *)this + 356) = *(_OWORD *)((char *)a2 + 356);
  *(_OWORD *)((char *)a2 + 356) = v3;
  LODWORD(v3) = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v3;
  LODWORD(v3) = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v3;
  v4 = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v4;
  v5 = *((_DWORD *)this + 62);
  *((_DWORD *)this + 62) = *((_DWORD *)a2 + 62);
  *((_DWORD *)a2 + 62) = v5;
  LODWORD(v3) = *((_DWORD *)this + 74);
  *((_DWORD *)this + 74) = *((_DWORD *)a2 + 74);
  *((_DWORD *)a2 + 74) = v3;
  LODWORD(v3) = *((_DWORD *)this + 68);
  *((_DWORD *)this + 68) = *((_DWORD *)a2 + 68);
  *((_DWORD *)a2 + 68) = v3;
  LODWORD(v3) = *((_DWORD *)this + 56);
  *((_DWORD *)this + 56) = *((_DWORD *)a2 + 56);
  *((_DWORD *)a2 + 56) = v3;
  LODWORD(v3) = *((_DWORD *)this + 55);
  *((_DWORD *)this + 55) = *((_DWORD *)a2 + 55);
  *((_DWORD *)a2 + 55) = v3;
  LODWORD(v3) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v3;
  v6 = *((_DWORD *)this + 65);
  *((_DWORD *)this + 65) = *((_DWORD *)a2 + 65);
  *((_DWORD *)a2 + 65) = v6;
  v7 = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v7;
  LODWORD(v3) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v3;
  LODWORD(v3) = *((_DWORD *)this + 77);
  *((_DWORD *)this + 77) = *((_DWORD *)a2 + 77);
  *((_DWORD *)a2 + 77) = v3;
  LODWORD(v3) = *((_DWORD *)this + 78);
  *((_DWORD *)this + 78) = *((_DWORD *)a2 + 78);
  *((_DWORD *)a2 + 78) = v3;
  v8 = *((_DWORD *)this + 53);
  *((_DWORD *)this + 53) = *((_DWORD *)a2 + 53);
  *((_DWORD *)a2 + 53) = v8;
  v9 = *((_DWORD *)this + 51);
  *((_DWORD *)this + 51) = *((_DWORD *)a2 + 51);
  *((_DWORD *)a2 + 51) = v9;
  LODWORD(v3) = *((_DWORD *)this + 60);
  *((_DWORD *)this + 60) = *((_DWORD *)a2 + 60);
  *((_DWORD *)a2 + 60) = v3;
  v10 = *((_DWORD *)this + 70);
  *((_DWORD *)this + 70) = *((_DWORD *)a2 + 70);
  *((_DWORD *)a2 + 70) = v10;
  v11 = *((_DWORD *)this + 75);
  *((_DWORD *)this + 75) = *((_DWORD *)a2 + 75);
  *((_DWORD *)a2 + 75) = v11;
  v12 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v12;
  v13 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 317);
  *((_BYTE *)this + 317) = *((_BYTE *)a2 + 317);
  *((_BYTE *)a2 + 317) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 318);
  *((_BYTE *)this + 318) = *((_BYTE *)a2 + 318);
  *((_BYTE *)a2 + 318) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 326);
  *((_BYTE *)this + 326) = *((_BYTE *)a2 + 326);
  *((_BYTE *)a2 + 326) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 327);
  *((_BYTE *)this + 327) = *((_BYTE *)a2 + 327);
  *((_BYTE *)a2 + 327) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 338);
  *((_BYTE *)this + 338) = *((_BYTE *)a2 + 338);
  *((_BYTE *)a2 + 338) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 336);
  *((_BYTE *)this + 336) = *((_BYTE *)a2 + 336);
  *((_BYTE *)a2 + 336) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 323);
  *((_BYTE *)this + 323) = *((_BYTE *)a2 + 323);
  *((_BYTE *)a2 + 323) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 339);
  *((_BYTE *)this + 339) = *((_BYTE *)a2 + 339);
  *((_BYTE *)a2 + 339) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 340);
  *((_BYTE *)this + 340) = *((_BYTE *)a2 + 340);
  *((_BYTE *)a2 + 340) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 320);
  *((_BYTE *)this + 320) = *((_BYTE *)a2 + 320);
  *((_BYTE *)a2 + 320) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 335);
  *((_BYTE *)this + 335) = *((_BYTE *)a2 + 335);
  *((_BYTE *)a2 + 335) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 324);
  *((_BYTE *)this + 324) = *((_BYTE *)a2 + 324);
  *((_BYTE *)a2 + 324) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 337);
  *((_BYTE *)this + 337) = *((_BYTE *)a2 + 337);
  *((_BYTE *)a2 + 337) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 330);
  *((_BYTE *)this + 330) = *((_BYTE *)a2 + 330);
  *((_BYTE *)a2 + 330) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 348);
  *((_BYTE *)this + 348) = *((_BYTE *)a2 + 348);
  *((_BYTE *)a2 + 348) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 344);
  *((_BYTE *)this + 344) = *((_BYTE *)a2 + 344);
  *((_BYTE *)a2 + 344) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 349);
  *((_BYTE *)this + 349) = *((_BYTE *)a2 + 349);
  *((_BYTE *)a2 + 349) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 345);
  *((_BYTE *)this + 345) = *((_BYTE *)a2 + 345);
  *((_BYTE *)a2 + 345) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 341);
  *((_BYTE *)this + 341) = *((_BYTE *)a2 + 341);
  *((_BYTE *)a2 + 341) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 322);
  *((_BYTE *)this + 322) = *((_BYTE *)a2 + 322);
  *((_BYTE *)a2 + 322) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 331);
  *((_BYTE *)this + 331) = *((_BYTE *)a2 + 331);
  *((_BYTE *)a2 + 331) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 350);
  *((_BYTE *)this + 350) = *((_BYTE *)a2 + 350);
  *((_BYTE *)a2 + 350) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 346);
  *((_BYTE *)this + 346) = *((_BYTE *)a2 + 346);
  *((_BYTE *)a2 + 346) = v13;
  LODWORD(v13) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 333);
  *((_BYTE *)this + 333) = *((_BYTE *)a2 + 333);
  *((_BYTE *)a2 + 333) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 334);
  *((_BYTE *)this + 334) = *((_BYTE *)a2 + 334);
  *((_BYTE *)a2 + 334) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 316);
  *((_BYTE *)this + 316) = *((_BYTE *)a2 + 316);
  *((_BYTE *)a2 + 316) = v13;
  LODWORD(v13) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 353);
  *((_BYTE *)this + 353) = *((_BYTE *)a2 + 353);
  *((_BYTE *)a2 + 353) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 351);
  *((_BYTE *)this + 351) = *((_BYTE *)a2 + 351);
  *((_BYTE *)a2 + 351) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 352);
  *((_BYTE *)this + 352) = *((_BYTE *)a2 + 352);
  *((_BYTE *)a2 + 352) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 343);
  *((_BYTE *)this + 343) = *((_BYTE *)a2 + 343);
  *((_BYTE *)a2 + 343) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 342);
  *((_BYTE *)this + 342) = *((_BYTE *)a2 + 342);
  *((_BYTE *)a2 + 342) = v13;
  LODWORD(v13) = *((_DWORD *)this + 63);
  *((_DWORD *)this + 63) = *((_DWORD *)a2 + 63);
  *((_DWORD *)a2 + 63) = v13;
  LODWORD(v13) = *((_DWORD *)this + 64);
  *((_DWORD *)this + 64) = *((_DWORD *)a2 + 64);
  *((_DWORD *)a2 + 64) = v13;
  LODWORD(v13) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v13;
  LODWORD(v13) = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 328);
  *((_BYTE *)this + 328) = *((_BYTE *)a2 + 328);
  *((_BYTE *)a2 + 328) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 325);
  *((_BYTE *)this + 325) = *((_BYTE *)a2 + 325);
  *((_BYTE *)a2 + 325) = v13;
  LODWORD(v13) = *((_DWORD *)this + 47);
  *((_DWORD *)this + 47) = *((_DWORD *)a2 + 47);
  *((_DWORD *)a2 + 47) = v13;
  LODWORD(v13) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v13;
  LODWORD(v13) = *((_DWORD *)this + 46);
  *((_DWORD *)this + 46) = *((_DWORD *)a2 + 46);
  *((_DWORD *)a2 + 46) = v13;
  LODWORD(v3) = *((_DWORD *)this + 72);
  *((_DWORD *)this + 72) = *((_DWORD *)a2 + 72);
  *((_DWORD *)a2 + 72) = v3;
  LODWORD(v3) = *((_DWORD *)this + 73);
  *((_DWORD *)this + 73) = *((_DWORD *)a2 + 73);
  *((_DWORD *)a2 + 73) = v3;
  LODWORD(v3) = *((_DWORD *)this + 67);
  *((_DWORD *)this + 67) = *((_DWORD *)a2 + 67);
  *((_DWORD *)a2 + 67) = v3;
  LODWORD(v13) = *((_DWORD *)this + 69);
  *((_DWORD *)this + 69) = *((_DWORD *)a2 + 69);
  *((_DWORD *)a2 + 69) = v13;
  LODWORD(v13) = *((_DWORD *)this + 71);
  *((_DWORD *)this + 71) = *((_DWORD *)a2 + 71);
  *((_DWORD *)a2 + 71) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 321);
  *((_BYTE *)this + 321) = *((_BYTE *)a2 + 321);
  *((_BYTE *)a2 + 321) = v13;
  LODWORD(v13) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v13;
  LODWORD(v3) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v3;
  LODWORD(v13) = *((_DWORD *)this + 54);
  *((_DWORD *)this + 54) = *((_DWORD *)a2 + 54);
  *((_DWORD *)a2 + 54) = v13;
  LODWORD(v13) = *((_DWORD *)this + 66);
  *((_DWORD *)this + 66) = *((_DWORD *)a2 + 66);
  *((_DWORD *)a2 + 66) = v13;
  v14 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v14;
  LODWORD(v14) = *((_DWORD *)this + 57);
  *((_DWORD *)this + 57) = *((_DWORD *)a2 + 57);
  *((_DWORD *)a2 + 57) = v14;
  LODWORD(v14) = *((_DWORD *)this + 58);
  *((_DWORD *)this + 58) = *((_DWORD *)a2 + 58);
  *((_DWORD *)a2 + 58) = v14;
  LODWORD(v3) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v3;
  LODWORD(v3) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v3;
  LODWORD(v3) = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v3;
  LODWORD(v3) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v3;
  LODWORD(v3) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v3;
  LOBYTE(v14) = *((_BYTE *)this + 332);
  *((_BYTE *)this + 332) = *((_BYTE *)a2 + 332);
  *((_BYTE *)a2 + 332) = v14;
  LODWORD(v14) = *((_DWORD *)this + 76);
  *((_DWORD *)this + 76) = *((_DWORD *)a2 + 76);
  *((_DWORD *)a2 + 76) = v14;
  LODWORD(v14) = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v14;
  LODWORD(v14) = *((_DWORD *)this + 40);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
  *((_DWORD *)a2 + 40) = v14;
  LOBYTE(v14) = *((_BYTE *)this + 347);
  *((_BYTE *)this + 347) = *((_BYTE *)a2 + 347);
  *((_BYTE *)a2 + 347) = v14;
  LODWORD(v14) = *((_DWORD *)this + 41);
  *((_DWORD *)this + 41) = *((_DWORD *)a2 + 41);
  *((_DWORD *)a2 + 41) = v14;
  LODWORD(v14) = *((_DWORD *)this + 39);
  *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
  *((_DWORD *)a2 + 39) = v14;
  LODWORD(v3) = *((_DWORD *)this + 61);
  *((_DWORD *)this + 61) = *((_DWORD *)a2 + 61);
  *((_DWORD *)a2 + 61) = v3;
  LODWORD(v14) = *((_DWORD *)this + 48);
  *((_DWORD *)this + 48) = *((_DWORD *)a2 + 48);
  *((_DWORD *)a2 + 48) = v14;
  LODWORD(v14) = *((_DWORD *)this + 49);
  *((_DWORD *)this + 49) = *((_DWORD *)a2 + 49);
  *((_DWORD *)a2 + 49) = v14;
  LODWORD(v3) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v3;
  LODWORD(v14) = *((_DWORD *)this + 52);
  *((_DWORD *)this + 52) = *((_DWORD *)a2 + 52);
  *((_DWORD *)a2 + 52) = v14;
  LODWORD(v14) = *((_DWORD *)this + 50);
  *((_DWORD *)this + 50) = *((_DWORD *)a2 + 50);
  *((_DWORD *)a2 + 50) = v14;
  LODWORD(v14) = *((_DWORD *)this + 45);
  *((_DWORD *)this + 45) = *((_DWORD *)a2 + 45);
  *((_DWORD *)a2 + 45) = v14;
  LODWORD(v14) = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v14;
  LODWORD(v14) = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v14;
  LOBYTE(v14) = *((_BYTE *)this + 319);
  *((_BYTE *)this + 319) = *((_BYTE *)a2 + 319);
  *((_BYTE *)a2 + 319) = v14;
  LOBYTE(v14) = *((_BYTE *)this + 329);
  *((_BYTE *)this + 329) = *((_BYTE *)a2 + 329);
  *((_BYTE *)a2 + 329) = v14;
  LODWORD(v14) = *((_DWORD *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((_DWORD *)a2 + 43) = v14;
  v15 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v15;
  v16 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v16;
  v17 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v17;
  v18 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v18;
  v19 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v19;
  LODWORD(v19) = *((_DWORD *)this + 59);
  *((_DWORD *)this + 59) = *((_DWORD *)a2 + 59);
  *((_DWORD *)a2 + 59) = v19;
  result = *((float *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((float *)a2 + 23) = result;
  return result;
}

float CMMsl::KappaSevereCrashResult::KappaSevereCrashResult(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135EC50;
  *(_OWORD *)(a1 + 356) = *(_OWORD *)(a2 + 356);
  *(_QWORD *)(a2 + 364) = 0;
  *(_QWORD *)(a2 + 356) = 0;
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 260) = *(_DWORD *)(a2 + 260);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 308) = *(_DWORD *)(a2 + 308);
  *(_DWORD *)(a1 + 312) = *(_DWORD *)(a2 + 312);
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
  *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(_DWORD *)(a1 + 300) = *(_DWORD *)(a2 + 300);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 317) = *(_BYTE *)(a2 + 317);
  *(_BYTE *)(a1 + 318) = *(_BYTE *)(a2 + 318);
  *(_BYTE *)(a1 + 326) = *(_BYTE *)(a2 + 326);
  *(_BYTE *)(a1 + 327) = *(_BYTE *)(a2 + 327);
  *(_BYTE *)(a1 + 338) = *(_BYTE *)(a2 + 338);
  *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
  *(_BYTE *)(a1 + 323) = *(_BYTE *)(a2 + 323);
  *(_BYTE *)(a1 + 339) = *(_BYTE *)(a2 + 339);
  *(_BYTE *)(a1 + 340) = *(_BYTE *)(a2 + 340);
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  *(_BYTE *)(a1 + 335) = *(_BYTE *)(a2 + 335);
  *(_BYTE *)(a1 + 324) = *(_BYTE *)(a2 + 324);
  *(_BYTE *)(a1 + 337) = *(_BYTE *)(a2 + 337);
  *(_BYTE *)(a1 + 330) = *(_BYTE *)(a2 + 330);
  *(_BYTE *)(a1 + 348) = *(_BYTE *)(a2 + 348);
  *(_BYTE *)(a1 + 344) = *(_BYTE *)(a2 + 344);
  *(_BYTE *)(a1 + 349) = *(_BYTE *)(a2 + 349);
  *(_BYTE *)(a1 + 345) = *(_BYTE *)(a2 + 345);
  *(_BYTE *)(a1 + 341) = *(_BYTE *)(a2 + 341);
  *(_BYTE *)(a1 + 322) = *(_BYTE *)(a2 + 322);
  *(_BYTE *)(a1 + 331) = *(_BYTE *)(a2 + 331);
  *(_BYTE *)(a1 + 350) = *(_BYTE *)(a2 + 350);
  *(_BYTE *)(a1 + 346) = *(_BYTE *)(a2 + 346);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_BYTE *)(a1 + 333) = *(_BYTE *)(a2 + 333);
  *(_BYTE *)(a1 + 334) = *(_BYTE *)(a2 + 334);
  *(_BYTE *)(a1 + 316) = *(_BYTE *)(a2 + 316);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 353) = *(_BYTE *)(a2 + 353);
  *(_BYTE *)(a1 + 351) = *(_BYTE *)(a2 + 351);
  *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 352);
  *(_BYTE *)(a1 + 343) = *(_BYTE *)(a2 + 343);
  *(_BYTE *)(a1 + 342) = *(_BYTE *)(a2 + 342);
  *(_DWORD *)(a1 + 252) = *(_DWORD *)(a2 + 252);
  *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 256);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(_BYTE *)(a1 + 325) = *(_BYTE *)(a2 + 325);
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 288);
  *(_DWORD *)(a1 + 292) = *(_DWORD *)(a2 + 292);
  *(_DWORD *)(a1 + 268) = *(_DWORD *)(a2 + 268);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
  *(_DWORD *)(a1 + 284) = *(_DWORD *)(a2 + 284);
  *(_BYTE *)(a1 + 321) = *(_BYTE *)(a2 + 321);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 228) = *(_DWORD *)(a2 + 228);
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 232);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 332) = *(_BYTE *)(a2 + 332);
  *(_DWORD *)(a1 + 304) = *(_DWORD *)(a2 + 304);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 347) = *(_BYTE *)(a2 + 347);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 244) = *(_DWORD *)(a2 + 244);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 196);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 319) = *(_BYTE *)(a2 + 319);
  *(_BYTE *)(a1 + 329) = *(_BYTE *)(a2 + 329);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 236) = *(_DWORD *)(a2 + 236);
  result = *(float *)(a2 + 92);
  *(float *)(a1 + 92) = result;
  return result;
}

CMMsl *CMMsl::KappaSevereCrashResult::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::KappaSevereCrashResult *v3;
  _BYTE v5[376];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaSevereCrashResult::KappaSevereCrashResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaSevereCrashResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaSevereCrashResult::formatText(CMMsl::KappaSevereCrashResult *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)((char *)this + 356);
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x20) != 0)
  {
    PB::TextFormatter::format(a2, "anyLowSense");
    v6 = *(_QWORD *)((char *)this + 364);
  }
  v7 = *v5;
  if ((*v5 & 0x100) != 0)
  {
    PB::TextFormatter::format(a2, "autocorrelationPeriodicCount", *((float *)this + 18));
    v7 = *v5;
    v6 = *(_QWORD *)((char *)this + 364);
    if ((*v5 & 0x200) == 0)
    {
LABEL_5:
      if ((v6 & 0x40) == 0)
        goto LABEL_6;
      goto LABEL_108;
    }
  }
  else if ((v7 & 0x200) == 0)
  {
    goto LABEL_5;
  }
  PB::TextFormatter::format(a2, "autocorrelationPeriodicCountThreshold", *((float *)this + 19));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x40) == 0)
  {
LABEL_6:
    if ((v7 & 1) == 0)
      goto LABEL_7;
    goto LABEL_109;
  }
LABEL_108:
  PB::TextFormatter::format(a2, "crashDetectorDecision");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 1) == 0)
  {
LABEL_7:
    if ((v7 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_110;
  }
LABEL_109:
  PB::TextFormatter::format(a2, "crashTimestamp");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x400) == 0)
  {
LABEL_8:
    if ((v7 & 0x800) == 0)
      goto LABEL_9;
    goto LABEL_111;
  }
LABEL_110:
  PB::TextFormatter::format(a2, "cumulativeRotation", *((float *)this + 20));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x800) == 0)
  {
LABEL_9:
    if ((v7 & 0x1000) == 0)
      goto LABEL_10;
    goto LABEL_112;
  }
LABEL_111:
  PB::TextFormatter::format(a2, "cumulativeRotationHarmonicMean", *((float *)this + 21));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x1000) == 0)
  {
LABEL_10:
    if ((v7 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_113;
  }
LABEL_112:
  PB::TextFormatter::format(a2, "currentCadence", *((float *)this + 22));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x2000) == 0)
  {
LABEL_11:
    if ((v7 & 0x4000) == 0)
      goto LABEL_12;
    goto LABEL_114;
  }
LABEL_113:
  PB::TextFormatter::format(a2, "deltaRealTrigger", *((float *)this + 23));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x4000) == 0)
  {
LABEL_12:
    if ((v7 & 0x8000) == 0)
      goto LABEL_13;
    goto LABEL_115;
  }
LABEL_114:
  PB::TextFormatter::format(a2, "deltaSteps");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x8000) == 0)
  {
LABEL_13:
    if ((v7 & 0x10000) == 0)
      goto LABEL_14;
    goto LABEL_116;
  }
LABEL_115:
  PB::TextFormatter::format(a2, "distanceToNearestRoad", *((float *)this + 25));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x10000) == 0)
  {
LABEL_14:
    if ((v6 & 0x80) == 0)
      goto LABEL_15;
    goto LABEL_117;
  }
LABEL_116:
  PB::TextFormatter::format(a2, "distanceToNearestRoadThreshold", *((float *)this + 26));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x80) == 0)
  {
LABEL_15:
    if ((v6 & 0x100) == 0)
      goto LABEL_16;
    goto LABEL_118;
  }
LABEL_117:
  PB::TextFormatter::format(a2, "earlyCrashDetectorDecision");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x100) == 0)
  {
LABEL_16:
    if ((v6 & 0x200) == 0)
      goto LABEL_17;
    goto LABEL_119;
  }
LABEL_118:
  PB::TextFormatter::format(a2, "escalationCandidate");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x200) == 0)
  {
LABEL_17:
    if ((v7 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_120;
  }
LABEL_119:
  PB::TextFormatter::format(a2, "escalationCandidateSuppressed");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v7 & 2) == 0)
      goto LABEL_19;
    goto LABEL_121;
  }
LABEL_120:
  PB::TextFormatter::format(a2, "faultCounter");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 2) == 0)
  {
LABEL_19:
    if ((v6 & 0x400) == 0)
      goto LABEL_20;
    goto LABEL_122;
  }
LABEL_121:
  PB::TextFormatter::format(a2, "firstTimestampMAPDecision");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x400) == 0)
  {
LABEL_20:
    if ((v7 & 0x40000) == 0)
      goto LABEL_21;
    goto LABEL_123;
  }
LABEL_122:
  PB::TextFormatter::format(a2, "hasSteps");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x40000) == 0)
  {
LABEL_21:
    if ((v6 & 0x800) == 0)
      goto LABEL_22;
    goto LABEL_124;
  }
LABEL_123:
  PB::TextFormatter::format(a2, "highSensitivityBitmap");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x800) == 0)
  {
LABEL_22:
    if ((v6 & 0x1000) == 0)
      goto LABEL_23;
    goto LABEL_125;
  }
LABEL_124:
  PB::TextFormatter::format(a2, "isAirbagDetectedOverWindow");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x1000) == 0)
  {
LABEL_23:
    if ((v6 & 0x2000) == 0)
      goto LABEL_24;
    goto LABEL_126;
  }
LABEL_125:
  PB::TextFormatter::format(a2, "isAutocorrelationDecided");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x2000) == 0)
  {
LABEL_24:
    if ((v6 & 0x4000) == 0)
      goto LABEL_25;
    goto LABEL_127;
  }
LABEL_126:
  PB::TextFormatter::format(a2, "isCrashDetected");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x4000) == 0)
  {
LABEL_25:
    if ((v6 & 0x8000) == 0)
      goto LABEL_26;
    goto LABEL_128;
  }
LABEL_127:
  PB::TextFormatter::format(a2, "isDecisionMadeAtBoundary");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x8000) == 0)
  {
LABEL_26:
    if ((v6 & 0x10000) == 0)
      goto LABEL_27;
    goto LABEL_129;
  }
LABEL_128:
  PB::TextFormatter::format(a2, "isDescalationDecided");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x10000) == 0)
  {
LABEL_27:
    if ((v6 & 0x20000) == 0)
      goto LABEL_28;
    goto LABEL_130;
  }
LABEL_129:
  PB::TextFormatter::format(a2, "isDescalationRequired");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x20000) == 0)
  {
LABEL_28:
    if ((v6 & 0x40000) == 0)
      goto LABEL_29;
    goto LABEL_131;
  }
LABEL_130:
  PB::TextFormatter::format(a2, "isEvaluatingMovingGps");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x40000) == 0)
  {
LABEL_29:
    if ((v6 & 0x80000) == 0)
      goto LABEL_30;
    goto LABEL_132;
  }
LABEL_131:
  PB::TextFormatter::format(a2, "isFreeFallDetectedEpoch");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x80000) == 0)
  {
LABEL_30:
    if ((v6 & 0x100000) == 0)
      goto LABEL_31;
    goto LABEL_133;
  }
LABEL_132:
  PB::TextFormatter::format(a2, "isHighSpeedCrashDetected");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x100000) == 0)
  {
LABEL_31:
    if ((v6 & 0x200000) == 0)
      goto LABEL_32;
    goto LABEL_134;
  }
LABEL_133:
  PB::TextFormatter::format(a2, "isHighSpeedCrashDetectedOverWindow");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x200000) == 0)
  {
LABEL_32:
    if ((v6 & 0x400000) == 0)
      goto LABEL_33;
    goto LABEL_135;
  }
LABEL_134:
  PB::TextFormatter::format(a2, "isHighSpeedDetectedOverWindow");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x400000) == 0)
  {
LABEL_33:
    if ((v6 & 0x800000) == 0)
      goto LABEL_34;
    goto LABEL_136;
  }
LABEL_135:
  PB::TextFormatter::format(a2, "isLowSensCrashDetected");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x800000) == 0)
  {
LABEL_34:
    if ((v6 & 0x1000000) == 0)
      goto LABEL_35;
    goto LABEL_137;
  }
LABEL_136:
  PB::TextFormatter::format(a2, "isLowSensRolloverCrashDetected");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x1000000) == 0)
  {
LABEL_35:
    if ((v6 & 0x2000000) == 0)
      goto LABEL_36;
    goto LABEL_138;
  }
LABEL_137:
  PB::TextFormatter::format(a2, "isMAPFPDecided");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x2000000) == 0)
  {
LABEL_36:
    if ((v6 & 0x4000000) == 0)
      goto LABEL_37;
    goto LABEL_139;
  }
LABEL_138:
  PB::TextFormatter::format(a2, "isQuiescenceDecided");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x4000000) == 0)
  {
LABEL_37:
    if ((v6 & 0x8000000) == 0)
      goto LABEL_38;
    goto LABEL_140;
  }
LABEL_139:
  PB::TextFormatter::format(a2, "isRolloverCrashDetected");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x8000000) == 0)
  {
LABEL_38:
    if ((v6 & 0x10000000) == 0)
      goto LABEL_39;
    goto LABEL_141;
  }
LABEL_140:
  PB::TextFormatter::format(a2, "isStepsDecided");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x10000000) == 0)
  {
LABEL_39:
    if ((v6 & 0x20000000) == 0)
      goto LABEL_40;
    goto LABEL_142;
  }
LABEL_141:
  PB::TextFormatter::format(a2, "isTriggerClustersDecided");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x20000000) == 0)
  {
LABEL_40:
    if ((v7 & 4) == 0)
      goto LABEL_41;
    goto LABEL_143;
  }
LABEL_142:
  PB::TextFormatter::format(a2, "isUshaFPDecided");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 4) == 0)
  {
LABEL_41:
    if ((v7 & 8) == 0)
      goto LABEL_42;
    goto LABEL_144;
  }
LABEL_143:
  PB::TextFormatter::format(a2, "lastLocalRealTriggerTimestamp");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 8) == 0)
  {
LABEL_42:
    if ((v7 & 0x10) == 0)
      goto LABEL_43;
    goto LABEL_145;
  }
LABEL_144:
  PB::TextFormatter::format(a2, "lastRemoteRealTriggerTimestamp");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x10) == 0)
  {
LABEL_43:
    if ((v7 & 0x20) == 0)
      goto LABEL_44;
    goto LABEL_146;
  }
LABEL_145:
  PB::TextFormatter::format(a2, "lastRemoteSampleTimestamp");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x20) == 0)
  {
LABEL_44:
    if ((v7 & 0x80000) == 0)
      goto LABEL_45;
    goto LABEL_147;
  }
LABEL_146:
  PB::TextFormatter::format(a2, "lastTimestampMAPDecision");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x80000) == 0)
  {
LABEL_45:
    if ((v7 & 0x100000) == 0)
      goto LABEL_46;
    goto LABEL_148;
  }
LABEL_147:
  PB::TextFormatter::format(a2, "lowSpeedOrFakeCountAtBoundaryThreshold");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x100000) == 0)
  {
LABEL_46:
    if ((v7 & 0x200000) == 0)
      goto LABEL_47;
    goto LABEL_149;
  }
LABEL_148:
  PB::TextFormatter::format(a2, "maxPulse", *((float *)this + 30));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x200000) == 0)
  {
LABEL_47:
    if ((v7 & 0x400000) == 0)
      goto LABEL_48;
    goto LABEL_150;
  }
LABEL_149:
  PB::TextFormatter::format(a2, "maxPulseHarmonicMean", *((float *)this + 31));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x400000) == 0)
  {
LABEL_48:
    if ((v7 & 0x800000) == 0)
      goto LABEL_49;
    goto LABEL_151;
  }
LABEL_150:
  PB::TextFormatter::format(a2, "maximumHoldDuration", *((float *)this + 32));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x800000) == 0)
  {
LABEL_49:
    if ((v7 & 0x1000000) == 0)
      goto LABEL_50;
    goto LABEL_152;
  }
LABEL_151:
  PB::TextFormatter::format(a2, "minimumHoldDuration", *((float *)this + 33));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x1000000) == 0)
  {
LABEL_50:
    if ((v7 & 0x2000000) == 0)
      goto LABEL_51;
    goto LABEL_153;
  }
LABEL_152:
  PB::TextFormatter::format(a2, "movingCountThreshold");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x2000000) == 0)
  {
LABEL_51:
    if ((v7 & 0x4000000) == 0)
      goto LABEL_52;
    goto LABEL_154;
  }
LABEL_153:
  PB::TextFormatter::format(a2, "movingCountThresholdFromSydneyB");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x4000000) == 0)
  {
LABEL_52:
    if ((v7 & 0x8000000) == 0)
      goto LABEL_53;
    goto LABEL_155;
  }
LABEL_154:
  PB::TextFormatter::format(a2, "movingGpsCount");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x8000000) == 0)
  {
LABEL_53:
    if ((v7 & 0x10000000) == 0)
      goto LABEL_54;
    goto LABEL_156;
  }
LABEL_155:
  PB::TextFormatter::format(a2, "movingGpsCountTotal");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x10000000) == 0)
  {
LABEL_54:
    if ((v7 & 0x20000000) == 0)
      goto LABEL_55;
    goto LABEL_157;
  }
LABEL_156:
  PB::TextFormatter::format(a2, "numAudioSkiing");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x20000000) == 0)
  {
LABEL_55:
    if ((v7 & 0x40000000) == 0)
      goto LABEL_56;
    goto LABEL_158;
  }
LABEL_157:
  PB::TextFormatter::format(a2, "numAudioSkiingThreshold");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x40000000) == 0)
  {
LABEL_56:
    if ((v7 & 0x80000000) == 0)
      goto LABEL_57;
    goto LABEL_159;
  }
LABEL_158:
  PB::TextFormatter::format(a2, "numBaroIncreasesSkiing");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x80000000) == 0)
  {
LABEL_57:
    if ((v7 & 0x100000000) == 0)
      goto LABEL_58;
    goto LABEL_160;
  }
LABEL_159:
  PB::TextFormatter::format(a2, "numBaroIncreasesSkiingThreshold");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x100000000) == 0)
  {
LABEL_58:
    if ((v7 & 0x200000000) == 0)
      goto LABEL_59;
    goto LABEL_161;
  }
LABEL_160:
  PB::TextFormatter::format(a2, "numDeescalationAOI");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x200000000) == 0)
  {
LABEL_59:
    if ((v7 & 0x400000000) == 0)
      goto LABEL_60;
    goto LABEL_162;
  }
LABEL_161:
  PB::TextFormatter::format(a2, "numDeescalationMAP");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x400000000) == 0)
  {
LABEL_60:
    if ((v7 & 0x800000000) == 0)
      goto LABEL_61;
    goto LABEL_163;
  }
LABEL_162:
  PB::TextFormatter::format(a2, "numDeescalationTwoLevel");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x800000000) == 0)
  {
LABEL_61:
    if ((v7 & 0x1000000000) == 0)
      goto LABEL_62;
    goto LABEL_164;
  }
LABEL_163:
  PB::TextFormatter::format(a2, "numDeescalationUsha");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x1000000000) == 0)
  {
LABEL_62:
    if ((v7 & 0x2000000000) == 0)
      goto LABEL_63;
    goto LABEL_165;
  }
LABEL_164:
  PB::TextFormatter::format(a2, "numGpsSamplesInHistory");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x2000000000) == 0)
  {
LABEL_63:
    if ((v7 & 0x4000000000) == 0)
      goto LABEL_64;
    goto LABEL_166;
  }
LABEL_165:
  PB::TextFormatter::format(a2, "numLowOrFakeGpsSamplesInHistory");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x4000000000) == 0)
  {
LABEL_64:
    if ((v7 & 0x8000000000) == 0)
      goto LABEL_65;
    goto LABEL_167;
  }
LABEL_166:
  PB::TextFormatter::format(a2, "numTriggersWithRecentSkiLiftDetected");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x8000000000) == 0)
  {
LABEL_65:
    if ((v7 & 0x10000000000) == 0)
      goto LABEL_66;
    goto LABEL_168;
  }
LABEL_167:
  PB::TextFormatter::format(a2, "numTriggersWithTrueBtHint");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x10000000000) == 0)
  {
LABEL_66:
    if ((v7 & 0x20000000000) == 0)
      goto LABEL_67;
    goto LABEL_169;
  }
LABEL_168:
  PB::TextFormatter::format(a2, "numUshaCPEpoch");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x20000000000) == 0)
  {
LABEL_67:
    if ((v7 & 0x40000000000) == 0)
      goto LABEL_68;
    goto LABEL_170;
  }
LABEL_169:
  PB::TextFormatter::format(a2, "numUshaCPEpochThreshold");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x40000000000) == 0)
  {
LABEL_68:
    if ((v7 & 0x80000000000) == 0)
      goto LABEL_69;
    goto LABEL_171;
  }
LABEL_170:
  PB::TextFormatter::format(a2, "numUshaFPEpoch");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x80000000000) == 0)
  {
LABEL_69:
    if ((v7 & 0x100000000000) == 0)
      goto LABEL_70;
    goto LABEL_172;
  }
LABEL_171:
  PB::TextFormatter::format(a2, "numUshaFPEpochThreshold");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x100000000000) == 0)
  {
LABEL_70:
    if ((v7 & 0x200000000000) == 0)
      goto LABEL_71;
    goto LABEL_173;
  }
LABEL_172:
  PB::TextFormatter::format(a2, "pedometerArmConstrainedState");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x200000000000) == 0)
  {
LABEL_71:
    if ((v7 & 0x400000000000) == 0)
      goto LABEL_72;
    goto LABEL_174;
  }
LABEL_173:
  PB::TextFormatter::format(a2, "quiescenceCumulativeRotationHarmonicMeanThreshold", *((float *)this + 55));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x400000000000) == 0)
  {
LABEL_72:
    if ((v7 & 0x800000000000) == 0)
      goto LABEL_73;
    goto LABEL_175;
  }
LABEL_174:
  PB::TextFormatter::format(a2, "quiescenceMaxPulseHarmonicMeanThreshold", *((float *)this + 56));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x800000000000) == 0)
  {
LABEL_73:
    if ((v7 & 0x1000000000000) == 0)
      goto LABEL_74;
    goto LABEL_176;
  }
LABEL_175:
  PB::TextFormatter::format(a2, "quiescencePulseEpochCount");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x1000000000000) == 0)
  {
LABEL_74:
    if ((v7 & 0x2000000000000) == 0)
      goto LABEL_75;
    goto LABEL_177;
  }
LABEL_176:
  PB::TextFormatter::format(a2, "quiescenceSpinEpochCount");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x2000000000000) == 0)
  {
LABEL_75:
    if ((v7 & 0x4000000000000) == 0)
      goto LABEL_76;
    goto LABEL_178;
  }
LABEL_177:
  PB::TextFormatter::format(a2, "sameEventState");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x4000000000000) == 0)
  {
LABEL_76:
    if ((v6 & 0x40000000) == 0)
      goto LABEL_77;
    goto LABEL_179;
  }
LABEL_178:
  PB::TextFormatter::format(a2, "secondDeescalationHoldDuration", *((float *)this + 60));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x40000000) == 0)
  {
LABEL_77:
    if ((v6 & 0x80000000) == 0)
      goto LABEL_78;
    goto LABEL_180;
  }
LABEL_179:
  PB::TextFormatter::format(a2, "shouldDeescalateBecauseOfAutocorrelationCondition");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x80000000) == 0)
  {
LABEL_78:
    if ((v6 & 0x100000000) == 0)
      goto LABEL_79;
    goto LABEL_181;
  }
LABEL_180:
  PB::TextFormatter::format(a2, "shouldDeescalateBecauseOfJointDetectionCondition");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x100000000) == 0)
  {
LABEL_79:
    if ((v6 & 0x200000000) == 0)
      goto LABEL_80;
    goto LABEL_182;
  }
LABEL_181:
  PB::TextFormatter::format(a2, "shouldDeescalateBecauseOfMAPFPCondition");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x200000000) == 0)
  {
LABEL_80:
    if ((v6 & 0x400000000) == 0)
      goto LABEL_81;
    goto LABEL_183;
  }
LABEL_182:
  PB::TextFormatter::format(a2, "shouldDeescalateBecauseOfMovingCondition");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x400000000) == 0)
  {
LABEL_81:
    if ((v6 & 0x800000000) == 0)
      goto LABEL_82;
    goto LABEL_184;
  }
LABEL_183:
  PB::TextFormatter::format(a2, "shouldDeescalateBecauseOfQuiescenceCondition");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x800000000) == 0)
  {
LABEL_82:
    if ((v6 & 0x1000000000) == 0)
      goto LABEL_83;
    goto LABEL_185;
  }
LABEL_184:
  PB::TextFormatter::format(a2, "shouldDeescalateBecauseOfSkiLiftCondition");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x1000000000) == 0)
  {
LABEL_83:
    if ((v6 & 0x2000000000) == 0)
      goto LABEL_84;
    goto LABEL_186;
  }
LABEL_185:
  PB::TextFormatter::format(a2, "shouldDeescalateBecauseOfSkiingCondition");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x2000000000) == 0)
  {
LABEL_84:
    if ((v6 & 0x4000000000) == 0)
      goto LABEL_85;
    goto LABEL_187;
  }
LABEL_186:
  PB::TextFormatter::format(a2, "shouldDeescalateBecauseOfStaticCondition");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x4000000000) == 0)
  {
LABEL_85:
    if ((v6 & 0x8000000000) == 0)
      goto LABEL_86;
    goto LABEL_188;
  }
LABEL_187:
  PB::TextFormatter::format(a2, "shouldDeescalateBecauseOfStepsCondition");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x8000000000) == 0)
  {
LABEL_86:
    if ((v6 & 0x10000000000) == 0)
      goto LABEL_87;
    goto LABEL_189;
  }
LABEL_188:
  PB::TextFormatter::format(a2, "shouldDeescalateBecauseOfTriggerClustersCondition");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x10000000000) == 0)
  {
LABEL_87:
    if ((v6 & 0x20000000000) == 0)
      goto LABEL_88;
    goto LABEL_190;
  }
LABEL_189:
  PB::TextFormatter::format(a2, "shouldDeescalateBecauseOfTwoLevelSensitivityCondition");
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x20000000000) == 0)
  {
LABEL_88:
    if ((v6 & 0x40000000000) == 0)
      goto LABEL_89;
    goto LABEL_191;
  }
LABEL_190:
  PB::TextFormatter::format(a2, "shouldDeescalateBecauseOfUshaFPCondition");
  v7 = *v5;
  if ((*(_QWORD *)((_BYTE *)this + 364) & 0x40000000000) == 0)
  {
LABEL_89:
    if ((v7 & 0x8000000000000) == 0)
      goto LABEL_90;
    goto LABEL_192;
  }
LABEL_191:
  PB::TextFormatter::format(a2, "shouldEnableHighSensBecauseOfDistanceToRoadCondition");
  v7 = *v5;
  if ((*v5 & 0x8000000000000) == 0)
  {
LABEL_90:
    if ((v7 & 0x10000000000000) == 0)
      goto LABEL_91;
    goto LABEL_193;
  }
LABEL_192:
  PB::TextFormatter::format(a2, "skiingPressureChangeOverEpochThreshold", *((float *)this + 61));
  v7 = *v5;
  if ((*v5 & 0x10000000000000) == 0)
  {
LABEL_91:
    if ((v7 & 0x20000000000000) == 0)
      goto LABEL_92;
    goto LABEL_194;
  }
LABEL_193:
  PB::TextFormatter::format(a2, "staticCountThreshold");
  v7 = *v5;
  if ((*v5 & 0x20000000000000) == 0)
  {
LABEL_92:
    if ((v7 & 0x40000000000000) == 0)
      goto LABEL_93;
    goto LABEL_195;
  }
LABEL_194:
  PB::TextFormatter::format(a2, "staticGpsCount");
  v7 = *v5;
  if ((*v5 & 0x40000000000000) == 0)
  {
LABEL_93:
    if ((v7 & 0x80000000000000) == 0)
      goto LABEL_94;
    goto LABEL_196;
  }
LABEL_195:
  PB::TextFormatter::format(a2, "staticGpsCountTotal");
  v7 = *v5;
  if ((*v5 & 0x80000000000000) == 0)
  {
LABEL_94:
    if ((v7 & 0x100000000000000) == 0)
      goto LABEL_95;
    goto LABEL_197;
  }
LABEL_196:
  PB::TextFormatter::format(a2, "stationaryCountMissingAsNoOpThreshold");
  v7 = *v5;
  if ((*v5 & 0x100000000000000) == 0)
  {
LABEL_95:
    if ((v7 & 0x40) == 0)
      goto LABEL_96;
    goto LABEL_198;
  }
LABEL_197:
  PB::TextFormatter::format(a2, "stepCountEventTimestamp");
  v7 = *v5;
  if ((*v5 & 0x40) == 0)
  {
LABEL_96:
    if ((v7 & 0x200000000000000) == 0)
      goto LABEL_97;
    goto LABEL_199;
  }
LABEL_198:
  PB::TextFormatter::format(a2, "stepCountEventTimestamp64");
  v7 = *v5;
  if ((*v5 & 0x200000000000000) == 0)
  {
LABEL_97:
    if ((v7 & 0x400000000000000) == 0)
      goto LABEL_98;
    goto LABEL_200;
  }
LABEL_199:
  PB::TextFormatter::format(a2, "stepsCadence", *((float *)this + 67));
  v7 = *v5;
  if ((*v5 & 0x400000000000000) == 0)
  {
LABEL_98:
    if ((v7 & 0x800000000000000) == 0)
      goto LABEL_99;
    goto LABEL_201;
  }
LABEL_200:
  PB::TextFormatter::format(a2, "stepsCadenceThreshold", *((float *)this + 68));
  v7 = *v5;
  if ((*v5 & 0x800000000000000) == 0)
  {
LABEL_99:
    if ((v7 & 0x1000000000000000) == 0)
      goto LABEL_100;
    goto LABEL_202;
  }
LABEL_201:
  PB::TextFormatter::format(a2, "stepsCount");
  v7 = *v5;
  if ((*v5 & 0x1000000000000000) == 0)
  {
LABEL_100:
    if ((v7 & 0x2000000000000000) == 0)
      goto LABEL_101;
    goto LABEL_203;
  }
LABEL_202:
  PB::TextFormatter::format(a2, "stepsCountThreshold");
  v7 = *v5;
  if ((*v5 & 0x2000000000000000) == 0)
  {
LABEL_101:
    if ((v7 & 0x4000000000000000) == 0)
      goto LABEL_103;
    goto LABEL_102;
  }
LABEL_203:
  PB::TextFormatter::format(a2, "stepsDeescalatedAtOpp");
  if ((*v5 & 0x4000000000000000) != 0)
LABEL_102:
    PB::TextFormatter::format(a2, "stepsEpochCount", *((float *)this + 72));
LABEL_103:
  v8 = *v5;
  if (*v5 < 0)
  {
    PB::TextFormatter::format(a2, "stepsPerMinute", *((float *)this + 73));
    v8 = *v5;
    v9 = *(_QWORD *)((char *)this + 364);
    if ((v9 & 1) == 0)
      goto LABEL_207;
    goto LABEL_206;
  }
  v9 = *(_QWORD *)((char *)this + 364);
  if ((v9 & 1) != 0)
  {
LABEL_206:
    PB::TextFormatter::format(a2, "stepsPerMinuteThreshold", *((float *)this + 74));
    v8 = *v5;
    v9 = *(_QWORD *)((char *)this + 364);
  }
LABEL_207:
  if ((v9 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "stepsSecondOpportunityLookbackLength");
    v9 = *(_QWORD *)((char *)this + 364);
    if ((*v5 & 0x80) == 0)
    {
LABEL_209:
      if ((v9 & 4) == 0)
        goto LABEL_210;
      goto LABEL_216;
    }
  }
  else if ((v8 & 0x80) == 0)
  {
    goto LABEL_209;
  }
  PB::TextFormatter::format(a2, "timestamp");
  v9 = *(_QWORD *)((char *)this + 364);
  if ((v9 & 4) == 0)
  {
LABEL_210:
    if ((v9 & 8) == 0)
      goto LABEL_211;
LABEL_217:
    PB::TextFormatter::format(a2, "ushaCumulativeRotationThreshold", *((float *)this + 77));
    if ((*(_QWORD *)((_BYTE *)this + 364) & 0x10) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_212;
  }
LABEL_216:
  PB::TextFormatter::format(a2, "triggerClusterDeescalationWindowBoundary");
  v9 = *(_QWORD *)((char *)this + 364);
  if ((v9 & 8) != 0)
    goto LABEL_217;
LABEL_211:
  if ((v9 & 0x10) != 0)
LABEL_212:
    PB::TextFormatter::format(a2, "ushaPeakPressureThreshold", *((float *)this + 78));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaSevereCrashResult::readFrom(CMMsl::KappaSevereCrashResult *this, PB::Reader *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  int v11;
  _BYTE *v12;
  unint64_t v13;
  uint64_t result;
  CMMsl::KappaSevereCrashResult *v17;
  _QWORD *v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  BOOL v25;
  char v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  BOOL v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  BOOL v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  BOOL v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char v62;
  unsigned int v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char v96;
  unsigned int v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  unint64_t v101;
  unint64_t v102;
  int v103;
  BOOL v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  char v108;
  unsigned int v109;
  uint64_t v110;
  unint64_t v111;
  char v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  char v116;
  unsigned int v117;
  uint64_t v118;
  unint64_t v119;
  char v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  int v125;
  BOOL v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  char v136;
  unsigned int v137;
  uint64_t v138;
  unint64_t v139;
  char v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  char v144;
  unsigned int v145;
  uint64_t v146;
  unint64_t v147;
  char v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  char v157;
  unsigned int v158;
  uint64_t v159;
  unint64_t v160;
  char v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  char v165;
  unsigned int v166;
  uint64_t v167;
  unint64_t v168;
  char v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  char v176;
  unsigned int v177;
  uint64_t v178;
  unint64_t v179;
  char v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  char v184;
  unsigned int v185;
  uint64_t v186;
  unint64_t v187;
  char v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  char v193;
  unsigned int v194;
  uint64_t v195;
  unint64_t v196;
  char v197;
  unint64_t v198;
  unint64_t v199;
  uint64_t v200;
  char v201;
  unsigned int v202;
  uint64_t v203;
  unint64_t v204;
  char v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  char v209;
  unsigned int v210;
  uint64_t v211;
  unint64_t v212;
  char v213;
  unint64_t v214;
  unint64_t v215;
  uint64_t v216;
  char v217;
  unsigned int v218;
  uint64_t v219;
  unint64_t v220;
  char v221;
  unint64_t v222;
  unint64_t v223;
  uint64_t v224;
  char v225;
  unsigned int v226;
  uint64_t v227;
  unint64_t v228;
  char v229;
  unint64_t v230;
  unint64_t v231;
  int v232;
  BOOL v233;
  unint64_t v234;
  unint64_t v235;
  int v236;
  BOOL v237;
  unint64_t v238;
  unint64_t v239;
  uint64_t v240;
  char v241;
  unsigned int v242;
  uint64_t v243;
  unint64_t v244;
  char v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  char v249;
  unsigned int v250;
  uint64_t v251;
  unint64_t v252;
  char v253;
  unint64_t v254;
  unint64_t v255;
  uint64_t v256;
  char v257;
  unsigned int v258;
  uint64_t v259;
  unint64_t v260;
  char v261;
  unint64_t v262;
  unint64_t v263;
  int v264;
  BOOL v265;
  unint64_t v266;
  unint64_t v267;
  int v268;
  BOOL v269;
  unint64_t v270;
  unint64_t v271;
  int v272;
  BOOL v273;
  unint64_t v274;
  unint64_t v275;
  int v276;
  BOOL v277;
  unint64_t v278;
  unint64_t v279;
  int v280;
  BOOL v281;
  unint64_t v282;
  unint64_t v283;
  int v284;
  BOOL v285;
  unint64_t v286;
  unint64_t v287;
  int v288;
  BOOL v289;
  unint64_t v290;
  unint64_t v291;
  int v292;
  BOOL v293;
  unint64_t v294;
  unint64_t v295;
  int v296;
  BOOL v297;
  unint64_t v298;
  unint64_t v299;
  int v300;
  BOOL v301;
  unint64_t v302;
  unint64_t v303;
  int v304;
  BOOL v305;
  unint64_t v306;
  unint64_t v307;
  uint64_t v308;
  char v309;
  unsigned int v310;
  uint64_t v311;
  unint64_t v312;
  char v313;
  unint64_t v314;
  unint64_t v315;
  int v316;
  BOOL v317;
  unint64_t v318;
  unint64_t v319;
  int v320;
  BOOL v321;
  unint64_t v322;
  unint64_t v323;
  int v324;
  BOOL v325;
  unint64_t v326;
  unint64_t v327;
  uint64_t v328;
  char v329;
  unsigned int v330;
  uint64_t v331;
  unint64_t v332;
  char v333;
  unint64_t v334;
  unint64_t v335;
  int v336;
  BOOL v337;
  unint64_t v338;
  unint64_t v339;
  int v340;
  BOOL v341;
  unint64_t v342;
  unint64_t v343;
  int v344;
  BOOL v345;
  unint64_t v346;
  unint64_t v347;
  int v348;
  BOOL v349;
  unint64_t v350;
  unint64_t v351;
  int v352;
  BOOL v353;
  unint64_t v354;
  unint64_t v355;
  uint64_t v356;
  char v357;
  unsigned int v358;
  uint64_t v359;
  unint64_t v360;
  char v361;
  unint64_t v362;
  unint64_t v363;
  int v364;
  BOOL v365;
  unint64_t v366;
  unint64_t v367;
  int v368;
  BOOL v369;
  unint64_t v370;
  unint64_t v371;
  int v372;
  BOOL v373;
  unint64_t v374;
  unint64_t v375;
  int v376;
  BOOL v377;
  unint64_t v378;
  unint64_t v379;
  int v380;
  BOOL v381;
  unint64_t v382;
  unint64_t v383;
  int v384;
  BOOL v385;
  unint64_t v386;
  unint64_t v387;
  int v388;
  BOOL v389;
  unint64_t v390;
  unint64_t v391;
  int v392;
  BOOL v393;
  unint64_t v394;
  unint64_t v395;
  int v396;
  BOOL v397;
  unint64_t v398;
  unint64_t v399;
  int v400;
  BOOL v401;
  unint64_t v402;
  unint64_t v403;
  int v404;
  BOOL v405;
  unint64_t v406;
  unint64_t v407;
  uint64_t v408;
  char v409;
  unsigned int v410;
  uint64_t v411;
  unint64_t v412;
  char v413;
  unint64_t v414;
  unint64_t v415;
  unint64_t v416;
  uint64_t v417;
  char v418;
  unsigned int v419;
  uint64_t v420;
  unint64_t v421;
  char v422;
  unint64_t v423;
  unint64_t v424;
  uint64_t v425;
  char v426;
  unsigned int v427;
  uint64_t v428;
  unint64_t v429;
  char v430;
  unint64_t v431;
  unint64_t v432;
  uint64_t v433;
  char v434;
  unsigned int v435;
  uint64_t v436;
  unint64_t v437;
  char v438;
  unint64_t v439;
  unint64_t v440;
  unint64_t v441;
  unint64_t v442;
  unint64_t v443;
  unint64_t v444;
  unint64_t v445;
  uint64_t v446;
  char v447;
  unsigned int v448;
  uint64_t v449;
  unint64_t v450;
  char v451;
  unint64_t v452;
  unint64_t v453;
  uint64_t v454;
  char v455;
  unsigned int v456;
  uint64_t v457;
  unint64_t v458;
  char v459;
  unint64_t v460;
  unint64_t v461;
  uint64_t v462;
  char v463;
  unsigned int v464;
  uint64_t v465;
  unint64_t v466;
  char v467;
  unint64_t v468;
  unint64_t v469;
  uint64_t v470;
  char v471;
  unsigned int v472;
  uint64_t v473;
  unint64_t v474;
  char v475;
  unint64_t v476;
  unint64_t v477;
  uint64_t v478;
  char v479;
  unsigned int v480;
  uint64_t v481;
  unint64_t v482;
  char v483;
  unint64_t v484;
  unint64_t v485;
  uint64_t v486;
  char v487;
  unsigned int v488;
  uint64_t v489;
  unint64_t v490;
  char v491;
  unint64_t v492;
  unint64_t v493;
  uint64_t v494;
  char v495;
  unsigned int v496;
  uint64_t v497;
  unint64_t v498;
  char v499;
  unint64_t v500;
  unint64_t v501;
  uint64_t v502;
  char v503;
  unsigned int v504;
  uint64_t v505;
  unint64_t v506;
  char v507;
  unint64_t v508;
  unint64_t v509;
  int v510;
  BOOL v511;
  unint64_t v512;
  unint64_t v513;
  int v514;
  BOOL v515;
  unint64_t v516;
  unint64_t v517;
  uint64_t v518;
  char v519;
  unsigned int v520;
  uint64_t v521;
  unint64_t v522;
  char v523;
  unint64_t v524;
  unint64_t v525;
  uint64_t v526;
  char v527;
  unsigned int v528;
  uint64_t v529;
  unint64_t v530;
  char v531;
  unint64_t v532;
  unint64_t v533;
  uint64_t v534;
  char v535;
  unsigned int v536;
  uint64_t v537;
  unint64_t v538;
  char v539;
  unint64_t v540;
  unint64_t v541;
  uint64_t v542;
  char v543;
  unsigned int v544;
  uint64_t v545;
  unint64_t v546;
  char v547;
  unint64_t v548;
  unint64_t v549;
  uint64_t v550;
  char v551;
  unsigned int v552;
  uint64_t v553;
  unint64_t v554;
  char v555;
  unint64_t v556;
  unint64_t v557;
  uint64_t v558;
  char v559;
  unsigned int v560;
  uint64_t v561;
  unint64_t v562;
  char v563;
  unint64_t v564;
  unint64_t v565;
  uint64_t v566;
  char v567;
  unsigned int v568;
  uint64_t v569;
  unint64_t v570;
  char v571;
  unint64_t v572;
  unint64_t v574;
  unint64_t v575;
  uint64_t v576;
  char v577;
  unsigned int v578;
  uint64_t v579;
  unint64_t v580;
  char v581;
  char v582;
  unsigned int v583;
  unint64_t v584;
  char v585;
  char v586;
  unsigned int v587;
  unint64_t v588;
  char v589;
  char v590;
  unsigned int v591;
  unint64_t v592;
  char v593;
  char v594;
  unsigned int v595;
  unint64_t v596;
  char v597;
  char v598;
  unsigned int v599;
  unint64_t v600;
  char v601;
  char v602;
  unsigned int v603;
  unint64_t v604;
  char v605;
  char v606;
  unsigned int v607;
  unint64_t v608;
  char v609;
  char v610;
  unsigned int v611;
  unint64_t v612;
  char v613;
  char v614;
  unsigned int v615;
  unint64_t v616;
  char v617;
  char v618;
  unsigned int v619;
  unint64_t v620;
  char v621;
  char v622;
  unsigned int v623;
  unint64_t v624;
  char v625;
  char v626;
  unsigned int v627;
  unint64_t v628;
  char v629;
  char v630;
  unsigned int v631;
  unint64_t v632;
  char v633;
  char v634;
  unsigned int v635;
  unint64_t v636;
  char v637;
  char v638;
  unsigned int v639;
  unint64_t v640;
  char v641;
  char v642;
  unsigned int v643;
  unint64_t v644;
  char v645;
  char v646;
  unsigned int v647;
  unint64_t v648;
  char v649;
  char v650;
  unsigned int v651;
  unint64_t v652;
  char v653;
  char v654;
  unsigned int v655;
  unint64_t v656;
  char v657;
  char v658;
  unsigned int v659;
  unint64_t v660;
  char v661;
  char v662;
  unsigned int v663;
  unint64_t v664;
  char v665;
  char v666;
  unsigned int v667;
  unint64_t v668;
  char v669;
  char v670;
  unsigned int v671;
  unint64_t v672;
  char v673;
  char v674;
  unsigned int v675;
  unint64_t v676;
  char v677;
  char v678;
  unsigned int v679;
  unint64_t v680;
  char v681;
  char v682;
  unsigned int v683;
  unint64_t v684;
  char v685;
  char v686;
  unsigned int v687;
  unint64_t v688;
  char v689;
  char v690;
  unsigned int v691;
  unint64_t v692;
  char v693;
  char v694;
  unsigned int v695;
  unint64_t v696;
  char v697;
  char v698;
  unsigned int v699;
  unint64_t v700;
  char v701;
  char v702;
  unsigned int v703;
  unint64_t v704;
  char v705;
  char v706;
  unsigned int v707;
  unint64_t v708;
  char v709;
  char v710;
  unsigned int v711;
  unint64_t v712;
  char v713;
  char v714;
  unsigned int v715;
  unint64_t v716;
  char v717;
  char v718;
  unsigned int v719;
  unint64_t v720;
  char v721;
  char v722;
  unsigned int v723;
  unint64_t v724;
  char v725;
  char v726;
  unsigned int v727;
  unint64_t v728;
  char v729;
  char v730;
  unsigned int v731;
  unint64_t v732;
  char v733;
  char v734;
  unsigned int v735;
  unint64_t v736;
  char v737;
  char v738;
  unsigned int v739;
  unint64_t v740;
  char v741;
  char v742;
  unsigned int v743;
  unint64_t v744;
  char v745;
  char v746;
  unsigned int v747;
  unint64_t v748;
  char v749;
  char v750;
  unsigned int v751;
  unint64_t v752;
  char v753;
  char v754;
  unsigned int v755;
  unint64_t v756;
  char v757;
  char v758;
  unsigned int v759;
  unint64_t v760;
  char v761;
  char v762;
  unsigned int v763;
  unint64_t v764;
  char v765;
  _BYTE *v766;

  v10 = (unint64_t *)((char *)a2 + 8);
  v9 = *((_QWORD *)a2 + 1);
  v12 = (char *)a2 + 24;
  v11 = *((unsigned __int8 *)a2 + 24);
  v13 = *((_QWORD *)a2 + 2);
  if (v9 < v13 && v11 == 0)
  {
    v17 = this;
    v18 = (_QWORD *)((char *)this + 356);
    v766 = (char *)a2 + 24;
    do
    {
      v19 = *(_QWORD *)a2;
      if (v9 > 0xFFFFFFFFFFFFFFF5 || v9 + 10 > v13)
      {
        v26 = 0;
        v27 = 0;
        v28 = 0;
        if (v9 > v13)
          v13 = v9;
        while (1)
        {
          if (v13 == v9)
          {
            v22 = 0;
            *v12 = 1;
            goto LABEL_25;
          }
          v29 = v9 + 1;
          v30 = *(_BYTE *)(v19 + v9);
          *v10 = v29;
          v28 |= (unint64_t)(v30 & 0x7F) << v26;
          if ((v30 & 0x80) == 0)
            break;
          v26 += 7;
          v9 = v29;
          v25 = v27++ > 8;
          if (v25)
          {
LABEL_20:
            v22 = 0;
            goto LABEL_25;
          }
        }
        if (*v12)
          v22 = 0;
        else
          v22 = v28;
      }
      else
      {
        v20 = 0;
        v21 = 0;
        v22 = 0;
        while (1)
        {
          v23 = v9 + 1;
          *v10 = v9 + 1;
          v24 = *(_BYTE *)(v19 + v9);
          v22 |= (unint64_t)(v24 & 0x7F) << v20;
          if ((v24 & 0x80) == 0)
            break;
          v20 += 7;
          v9 = v23;
          v25 = v21++ > 8;
          if (v25)
            goto LABEL_20;
        }
      }
LABEL_25:
      v11 = *v12;
      if (*v12)
        v31 = 1;
      else
        v31 = (v22 & 7) == 4;
      if (v31)
        break;
      v32 = v22 >> 3;
      if ((int)(v22 >> 3) > 400)
      {
        if ((int)v32 <= 900)
        {
          if ((int)v32 > 600)
          {
            if ((int)v32 > 700)
            {
              switch((int)v32)
              {
                case 801:
                  *v18 |= 0x100000uLL;
                  v67 = *v10;
                  if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v67 + 4 > *((_QWORD *)a2 + 2))
                    goto LABEL_513;
                  *((_DWORD *)v17 + 30) = *(_DWORD *)(*(_QWORD *)a2 + v67);
                  goto LABEL_942;
                case 802:
                  *v18 |= 0x400uLL;
                  v439 = *v10;
                  if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v439 + 4 > *((_QWORD *)a2 + 2))
                    goto LABEL_513;
                  *((_DWORD *)v17 + 20) = *(_DWORD *)(*(_QWORD *)a2 + v439);
                  goto LABEL_942;
                case 803:
                  *v18 |= 0x200000uLL;
                  v440 = *v10;
                  if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v440 + 4 > *((_QWORD *)a2 + 2))
                    goto LABEL_513;
                  *((_DWORD *)v17 + 31) = *(_DWORD *)(*(_QWORD *)a2 + v440);
                  goto LABEL_942;
                case 804:
                  *v18 |= 0x800uLL;
                  v441 = *v10;
                  if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v441 + 4 > *((_QWORD *)a2 + 2))
                    goto LABEL_513;
                  *((_DWORD *)v17 + 21) = *(_DWORD *)(*(_QWORD *)a2 + v441);
LABEL_942:
                  *((_QWORD *)a2 + 1) += 4;
                  break;
                default:
                  if ((_DWORD)v32 == 701)
                  {
                    *v18 |= 0x800000000000uLL;
                    v460 = *((_QWORD *)a2 + 1);
                    v461 = *((_QWORD *)a2 + 2);
                    v462 = *(_QWORD *)a2;
                    if (v460 > 0xFFFFFFFFFFFFFFF5 || v460 + 10 > v461)
                    {
                      v706 = 0;
                      v707 = 0;
                      v465 = 0;
                      if (v461 <= v460)
                        v461 = *((_QWORD *)a2 + 1);
                      while (1)
                      {
                        if (v461 == v460)
                        {
                          LODWORD(v465) = 0;
                          *v12 = 1;
                          goto LABEL_1070;
                        }
                        v708 = v460 + 1;
                        v709 = *(_BYTE *)(v462 + v460);
                        *v10 = v708;
                        v465 |= (unint64_t)(v709 & 0x7F) << v706;
                        if ((v709 & 0x80) == 0)
                          break;
                        v706 += 7;
                        v460 = v708;
                        v25 = v707++ > 8;
                        if (v25)
                        {
LABEL_835:
                          LODWORD(v465) = 0;
                          goto LABEL_1070;
                        }
                      }
                      if (*v12)
                        LODWORD(v465) = 0;
                    }
                    else
                    {
                      v463 = 0;
                      v464 = 0;
                      v465 = 0;
                      while (1)
                      {
                        v466 = v460 + 1;
                        *v10 = v460 + 1;
                        v467 = *(_BYTE *)(v462 + v460);
                        v465 |= (unint64_t)(v467 & 0x7F) << v463;
                        if ((v467 & 0x80) == 0)
                          break;
                        v463 += 7;
                        v460 = v466;
                        v25 = v464++ > 8;
                        if (v25)
                          goto LABEL_835;
                      }
                    }
LABEL_1070:
                    *((_DWORD *)v17 + 57) = v465;
                  }
                  else
                  {
                    if ((_DWORD)v32 != 702)
                      goto LABEL_141;
                    *v18 |= 0x1000000000000uLL;
                    v77 = *((_QWORD *)a2 + 1);
                    v78 = *((_QWORD *)a2 + 2);
                    v79 = *(_QWORD *)a2;
                    if (v77 > 0xFFFFFFFFFFFFFFF5 || v77 + 10 > v78)
                    {
                      v610 = 0;
                      v611 = 0;
                      v82 = 0;
                      if (v78 <= v77)
                        v78 = *((_QWORD *)a2 + 1);
                      v12 = v766;
                      v17 = this;
                      while (1)
                      {
                        if (v78 == v77)
                        {
                          LODWORD(v82) = 0;
                          *v766 = 1;
                          goto LABEL_998;
                        }
                        v612 = v77 + 1;
                        v613 = *(_BYTE *)(v79 + v77);
                        *v10 = v612;
                        v82 |= (unint64_t)(v613 & 0x7F) << v610;
                        if ((v613 & 0x80) == 0)
                          break;
                        v610 += 7;
                        v77 = v612;
                        v25 = v611++ > 8;
                        if (v25)
                        {
LABEL_596:
                          LODWORD(v82) = 0;
                          goto LABEL_998;
                        }
                      }
                      if (*v766)
                        LODWORD(v82) = 0;
                    }
                    else
                    {
                      v80 = 0;
                      v81 = 0;
                      v82 = 0;
                      v12 = v766;
                      v17 = this;
                      while (1)
                      {
                        v83 = v77 + 1;
                        *v10 = v77 + 1;
                        v84 = *(_BYTE *)(v79 + v77);
                        v82 |= (unint64_t)(v84 & 0x7F) << v80;
                        if ((v84 & 0x80) == 0)
                          break;
                        v80 += 7;
                        v77 = v83;
                        v25 = v81++ > 8;
                        if (v25)
                          goto LABEL_596;
                      }
                    }
LABEL_998:
                    *((_DWORD *)v17 + 58) = v82;
                  }
                  break;
              }
            }
            else
            {
              switch((int)v32)
              {
                case 601:
                  v18[1] |= 0x400uLL;
                  v55 = *((_QWORD *)a2 + 1);
                  if (v55 >= *((_QWORD *)a2 + 2))
                  {
                    v58 = 0;
                    v12 = v766;
                    v17 = this;
                    *v766 = 1;
                  }
                  else
                  {
                    v56 = v55 + 1;
                    v57 = *(unsigned __int8 *)(*(_QWORD *)a2 + v55);
                    *((_QWORD *)a2 + 1) = v56;
                    v58 = v57 != 0;
                    v12 = v766;
                    v17 = this;
                  }
                  *((_BYTE *)v17 + 321) = v58;
                  goto LABEL_514;
                case 602:
                  *v18 |= 0x4000uLL;
                  v406 = *((_QWORD *)a2 + 1);
                  v407 = *((_QWORD *)a2 + 2);
                  v408 = *(_QWORD *)a2;
                  if (v406 <= 0xFFFFFFFFFFFFFFF5 && v406 + 10 <= v407)
                  {
                    v409 = 0;
                    v410 = 0;
                    v411 = 0;
                    v12 = v766;
                    v17 = this;
                    do
                    {
                      v412 = v406 + 1;
                      *v10 = v406 + 1;
                      v413 = *(_BYTE *)(v408 + v406);
                      v411 |= (unint64_t)(v413 & 0x7F) << v409;
                      if ((v413 & 0x80) == 0)
                        goto LABEL_1052;
                      v409 += 7;
                      v406 = v412;
                      v25 = v410++ > 8;
                    }
                    while (!v25);
LABEL_788:
                    LODWORD(v411) = 0;
                    goto LABEL_1052;
                  }
                  v682 = 0;
                  v683 = 0;
                  v411 = 0;
                  if (v407 <= v406)
                    v407 = *((_QWORD *)a2 + 1);
                  v12 = v766;
                  v17 = this;
                  while (2)
                  {
                    if (v407 == v406)
                    {
                      LODWORD(v411) = 0;
                      *v766 = 1;
                    }
                    else
                    {
                      v684 = v406 + 1;
                      v685 = *(_BYTE *)(v408 + v406);
                      *v10 = v684;
                      v411 |= (unint64_t)(v685 & 0x7F) << v682;
                      if (v685 < 0)
                      {
                        v682 += 7;
                        v406 = v684;
                        v25 = v683++ > 8;
                        if (v25)
                          goto LABEL_788;
                        continue;
                      }
                      if (*v766)
                        LODWORD(v411) = 0;
                    }
                    break;
                  }
LABEL_1052:
                  *((_DWORD *)v17 + 24) = v411;
                  goto LABEL_514;
                case 603:
                  *v18 |= 0x1000uLL;
                  v414 = *v10;
                  if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v414 + 4 > *((_QWORD *)a2 + 2))
                    goto LABEL_401;
                  v17 = this;
                  *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v414);
                  goto LABEL_940;
                case 604:
                  *v18 |= 0x100000000000uLL;
                  v415 = *((_QWORD *)a2 + 1);
                  v416 = *((_QWORD *)a2 + 2);
                  v417 = *(_QWORD *)a2;
                  if (v415 <= 0xFFFFFFFFFFFFFFF5 && v415 + 10 <= v416)
                  {
                    v418 = 0;
                    v419 = 0;
                    v420 = 0;
                    v12 = v766;
                    v17 = this;
                    do
                    {
                      v421 = v415 + 1;
                      *v10 = v415 + 1;
                      v422 = *(_BYTE *)(v417 + v415);
                      v420 |= (unint64_t)(v422 & 0x7F) << v418;
                      if ((v422 & 0x80) == 0)
                        goto LABEL_1055;
                      v418 += 7;
                      v415 = v421;
                      v25 = v419++ > 8;
                    }
                    while (!v25);
LABEL_796:
                    LODWORD(v420) = 0;
                    goto LABEL_1055;
                  }
                  v686 = 0;
                  v687 = 0;
                  v420 = 0;
                  if (v416 <= v415)
                    v416 = *((_QWORD *)a2 + 1);
                  v12 = v766;
                  v17 = this;
                  while (2)
                  {
                    if (v416 == v415)
                    {
                      LODWORD(v420) = 0;
                      *v766 = 1;
                    }
                    else
                    {
                      v688 = v415 + 1;
                      v689 = *(_BYTE *)(v417 + v415);
                      *v10 = v688;
                      v420 |= (unint64_t)(v689 & 0x7F) << v686;
                      if (v689 < 0)
                      {
                        v686 += 7;
                        v415 = v688;
                        v25 = v687++ > 8;
                        if (v25)
                          goto LABEL_796;
                        continue;
                      }
                      if (*v766)
                        LODWORD(v420) = 0;
                    }
                    break;
                  }
LABEL_1055:
                  *((_DWORD *)v17 + 54) = v420;
                  goto LABEL_514;
                case 605:
                  *v18 |= 0x100000000000000uLL;
                  v423 = *((_QWORD *)a2 + 1);
                  v424 = *((_QWORD *)a2 + 2);
                  v425 = *(_QWORD *)a2;
                  if (v423 <= 0xFFFFFFFFFFFFFFF5 && v423 + 10 <= v424)
                  {
                    v426 = 0;
                    v427 = 0;
                    v428 = 0;
                    v12 = v766;
                    v17 = this;
                    do
                    {
                      v429 = v423 + 1;
                      *v10 = v423 + 1;
                      v430 = *(_BYTE *)(v425 + v423);
                      v428 |= (unint64_t)(v430 & 0x7F) << v426;
                      if ((v430 & 0x80) == 0)
                        goto LABEL_1058;
                      v426 += 7;
                      v423 = v429;
                      v25 = v427++ > 8;
                    }
                    while (!v25);
LABEL_804:
                    LODWORD(v428) = 0;
                    goto LABEL_1058;
                  }
                  v690 = 0;
                  v691 = 0;
                  v428 = 0;
                  if (v424 <= v423)
                    v424 = *((_QWORD *)a2 + 1);
                  v12 = v766;
                  v17 = this;
                  while (2)
                  {
                    if (v424 == v423)
                    {
                      LODWORD(v428) = 0;
                      *v766 = 1;
                    }
                    else
                    {
                      v692 = v423 + 1;
                      v693 = *(_BYTE *)(v425 + v423);
                      *v10 = v692;
                      v428 |= (unint64_t)(v693 & 0x7F) << v690;
                      if (v693 < 0)
                      {
                        v690 += 7;
                        v423 = v692;
                        v25 = v691++ > 8;
                        if (v25)
                          goto LABEL_804;
                        continue;
                      }
                      if (*v766)
                        LODWORD(v428) = 0;
                    }
                    break;
                  }
LABEL_1058:
                  *((_DWORD *)v17 + 66) = v428;
                  goto LABEL_514;
                case 606:
                  *v18 |= 0x40uLL;
                  v431 = *((_QWORD *)a2 + 1);
                  v432 = *((_QWORD *)a2 + 2);
                  v433 = *(_QWORD *)a2;
                  if (v431 <= 0xFFFFFFFFFFFFFFF5 && v431 + 10 <= v432)
                  {
                    v434 = 0;
                    v435 = 0;
                    v436 = 0;
                    v12 = v766;
                    v17 = this;
                    do
                    {
                      v437 = v431 + 1;
                      *v10 = v431 + 1;
                      v438 = *(_BYTE *)(v433 + v431);
                      v436 |= (unint64_t)(v438 & 0x7F) << v434;
                      if ((v438 & 0x80) == 0)
                        goto LABEL_1061;
                      v434 += 7;
                      v431 = v437;
                      v25 = v435++ > 8;
                    }
                    while (!v25);
LABEL_812:
                    v436 = 0;
                    goto LABEL_1061;
                  }
                  v694 = 0;
                  v695 = 0;
                  v436 = 0;
                  if (v432 <= v431)
                    v432 = *((_QWORD *)a2 + 1);
                  v12 = v766;
                  v17 = this;
                  break;
                default:
                  goto LABEL_141;
              }
              while (1)
              {
                if (v432 == v431)
                {
                  v436 = 0;
                  *v766 = 1;
                  goto LABEL_1061;
                }
                v696 = v431 + 1;
                v697 = *(_BYTE *)(v433 + v431);
                *v10 = v696;
                v436 |= (unint64_t)(v697 & 0x7F) << v694;
                if ((v697 & 0x80) == 0)
                  break;
                v694 += 7;
                v431 = v696;
                v25 = v695++ > 8;
                if (v25)
                  goto LABEL_812;
              }
              if (*v766)
                v436 = 0;
LABEL_1061:
              *((_QWORD *)v17 + 7) = v436;
            }
          }
          else
          {
            switch((int)v32)
            {
              case 401:
                *v18 |= 0x20000000000000uLL;
                v35 = *((_QWORD *)a2 + 1);
                v36 = *((_QWORD *)a2 + 2);
                v37 = *(_QWORD *)a2;
                if (v35 <= 0xFFFFFFFFFFFFFFF5 && v35 + 10 <= v36)
                {
                  v38 = 0;
                  v39 = 0;
                  v40 = 0;
                  do
                  {
                    v41 = v35 + 1;
                    *v10 = v35 + 1;
                    v42 = *(_BYTE *)(v37 + v35);
                    v40 |= (unint64_t)(v42 & 0x7F) << v38;
                    if ((v42 & 0x80) == 0)
                      goto LABEL_992;
                    v38 += 7;
                    v35 = v41;
                    v25 = v39++ > 8;
                  }
                  while (!v25);
LABEL_576:
                  LODWORD(v40) = 0;
                  goto LABEL_992;
                }
                v602 = 0;
                v603 = 0;
                v40 = 0;
                if (v36 <= v35)
                  v36 = *((_QWORD *)a2 + 1);
                while (2)
                {
                  if (v36 == v35)
                  {
                    LODWORD(v40) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v604 = v35 + 1;
                    v605 = *(_BYTE *)(v37 + v35);
                    *v10 = v604;
                    v40 |= (unint64_t)(v605 & 0x7F) << v602;
                    if (v605 < 0)
                    {
                      v602 += 7;
                      v35 = v604;
                      v25 = v603++ > 8;
                      if (v25)
                        goto LABEL_576;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v40) = 0;
                  }
                  break;
                }
LABEL_992:
                *((_DWORD *)v17 + 63) = v40;
                goto LABEL_514;
              case 402:
                *v18 |= 0x40000000000000uLL;
                v206 = *((_QWORD *)a2 + 1);
                v207 = *((_QWORD *)a2 + 2);
                v208 = *(_QWORD *)a2;
                if (v206 <= 0xFFFFFFFFFFFFFFF5 && v206 + 10 <= v207)
                {
                  v209 = 0;
                  v210 = 0;
                  v211 = 0;
                  do
                  {
                    v212 = v206 + 1;
                    *v10 = v206 + 1;
                    v213 = *(_BYTE *)(v208 + v206);
                    v211 |= (unint64_t)(v213 & 0x7F) << v209;
                    if ((v213 & 0x80) == 0)
                      goto LABEL_1025;
                    v209 += 7;
                    v206 = v212;
                    v25 = v210++ > 8;
                  }
                  while (!v25);
LABEL_659:
                  LODWORD(v211) = 0;
                  goto LABEL_1025;
                }
                v646 = 0;
                v647 = 0;
                v211 = 0;
                if (v207 <= v206)
                  v207 = *((_QWORD *)a2 + 1);
                while (2)
                {
                  if (v207 == v206)
                  {
                    LODWORD(v211) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v648 = v206 + 1;
                    v649 = *(_BYTE *)(v208 + v206);
                    *v10 = v648;
                    v211 |= (unint64_t)(v649 & 0x7F) << v646;
                    if (v649 < 0)
                    {
                      v646 += 7;
                      v206 = v648;
                      v25 = v647++ > 8;
                      if (v25)
                        goto LABEL_659;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v211) = 0;
                  }
                  break;
                }
LABEL_1025:
                *((_DWORD *)v17 + 64) = v211;
                goto LABEL_514;
              case 403:
                *v18 |= 0x4000000uLL;
                v214 = *((_QWORD *)a2 + 1);
                v215 = *((_QWORD *)a2 + 2);
                v216 = *(_QWORD *)a2;
                if (v214 <= 0xFFFFFFFFFFFFFFF5 && v214 + 10 <= v215)
                {
                  v217 = 0;
                  v218 = 0;
                  v219 = 0;
                  do
                  {
                    v220 = v214 + 1;
                    *v10 = v214 + 1;
                    v221 = *(_BYTE *)(v216 + v214);
                    v219 |= (unint64_t)(v221 & 0x7F) << v217;
                    if ((v221 & 0x80) == 0)
                      goto LABEL_1028;
                    v217 += 7;
                    v214 = v220;
                    v25 = v218++ > 8;
                  }
                  while (!v25);
LABEL_666:
                  LODWORD(v219) = 0;
                  goto LABEL_1028;
                }
                v650 = 0;
                v651 = 0;
                v219 = 0;
                if (v215 <= v214)
                  v215 = *((_QWORD *)a2 + 1);
                while (2)
                {
                  if (v215 == v214)
                  {
                    LODWORD(v219) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v652 = v214 + 1;
                    v653 = *(_BYTE *)(v216 + v214);
                    *v10 = v652;
                    v219 |= (unint64_t)(v653 & 0x7F) << v650;
                    if (v653 < 0)
                    {
                      v650 += 7;
                      v214 = v652;
                      v25 = v651++ > 8;
                      if (v25)
                        goto LABEL_666;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v219) = 0;
                  }
                  break;
                }
LABEL_1028:
                *((_DWORD *)v17 + 36) = v219;
                goto LABEL_514;
              case 404:
                *v18 |= 0x8000000uLL;
                v222 = *((_QWORD *)a2 + 1);
                v223 = *((_QWORD *)a2 + 2);
                v224 = *(_QWORD *)a2;
                if (v222 <= 0xFFFFFFFFFFFFFFF5 && v222 + 10 <= v223)
                {
                  v225 = 0;
                  v226 = 0;
                  v227 = 0;
                  do
                  {
                    v228 = v222 + 1;
                    *v10 = v222 + 1;
                    v229 = *(_BYTE *)(v224 + v222);
                    v227 |= (unint64_t)(v229 & 0x7F) << v225;
                    if ((v229 & 0x80) == 0)
                      goto LABEL_1031;
                    v225 += 7;
                    v222 = v228;
                    v25 = v226++ > 8;
                  }
                  while (!v25);
LABEL_673:
                  LODWORD(v227) = 0;
                  goto LABEL_1031;
                }
                v654 = 0;
                v655 = 0;
                v227 = 0;
                if (v223 <= v222)
                  v223 = *((_QWORD *)a2 + 1);
                while (2)
                {
                  if (v223 == v222)
                  {
                    LODWORD(v227) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v656 = v222 + 1;
                    v657 = *(_BYTE *)(v224 + v222);
                    *v10 = v656;
                    v227 |= (unint64_t)(v657 & 0x7F) << v654;
                    if (v657 < 0)
                    {
                      v654 += 7;
                      v222 = v656;
                      v25 = v655++ > 8;
                      if (v25)
                        goto LABEL_673;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v227) = 0;
                  }
                  break;
                }
LABEL_1031:
                *((_DWORD *)v17 + 37) = v227;
                goto LABEL_514;
              case 405:
                v18[1] |= 0x20000uLL;
                v230 = *((_QWORD *)a2 + 1);
                if (v230 >= *((_QWORD *)a2 + 2))
                {
                  v233 = 0;
                  *v12 = 1;
                }
                else
                {
                  v231 = v230 + 1;
                  v232 = *(unsigned __int8 *)(*(_QWORD *)a2 + v230);
                  *((_QWORD *)a2 + 1) = v231;
                  v233 = v232 != 0;
                }
                *((_BYTE *)v17 + 328) = v233;
                goto LABEL_514;
              case 406:
                v18[1] |= 0x4000uLL;
                v234 = *((_QWORD *)a2 + 1);
                if (v234 >= *((_QWORD *)a2 + 2))
                {
                  v237 = 0;
                  *v12 = 1;
                }
                else
                {
                  v235 = v234 + 1;
                  v236 = *(unsigned __int8 *)(*(_QWORD *)a2 + v234);
                  *((_QWORD *)a2 + 1) = v235;
                  v237 = v236 != 0;
                }
                *((_BYTE *)v17 + 325) = v237;
                goto LABEL_514;
              case 407:
                *v18 |= 0x2000000000uLL;
                v238 = *((_QWORD *)a2 + 1);
                v239 = *((_QWORD *)a2 + 2);
                v240 = *(_QWORD *)a2;
                if (v238 <= 0xFFFFFFFFFFFFFFF5 && v238 + 10 <= v239)
                {
                  v241 = 0;
                  v242 = 0;
                  v243 = 0;
                  do
                  {
                    v244 = v238 + 1;
                    *v10 = v238 + 1;
                    v245 = *(_BYTE *)(v240 + v238);
                    v243 |= (unint64_t)(v245 & 0x7F) << v241;
                    if ((v245 & 0x80) == 0)
                      goto LABEL_1034;
                    v241 += 7;
                    v238 = v244;
                    v25 = v242++ > 8;
                  }
                  while (!v25);
LABEL_684:
                  LODWORD(v243) = 0;
                  goto LABEL_1034;
                }
                v658 = 0;
                v659 = 0;
                v243 = 0;
                if (v239 <= v238)
                  v239 = *((_QWORD *)a2 + 1);
                while (2)
                {
                  if (v239 == v238)
                  {
                    LODWORD(v243) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v660 = v238 + 1;
                    v661 = *(_BYTE *)(v240 + v238);
                    *v10 = v660;
                    v243 |= (unint64_t)(v661 & 0x7F) << v658;
                    if (v661 < 0)
                    {
                      v658 += 7;
                      v238 = v660;
                      v25 = v659++ > 8;
                      if (v25)
                        goto LABEL_684;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v243) = 0;
                  }
                  break;
                }
LABEL_1034:
                *((_DWORD *)v17 + 47) = v243;
                goto LABEL_514;
              case 408:
                *v18 |= 0x80000uLL;
                v246 = *((_QWORD *)a2 + 1);
                v247 = *((_QWORD *)a2 + 2);
                v248 = *(_QWORD *)a2;
                if (v246 <= 0xFFFFFFFFFFFFFFF5 && v246 + 10 <= v247)
                {
                  v249 = 0;
                  v250 = 0;
                  v251 = 0;
                  do
                  {
                    v252 = v246 + 1;
                    *v10 = v246 + 1;
                    v253 = *(_BYTE *)(v248 + v246);
                    v251 |= (unint64_t)(v253 & 0x7F) << v249;
                    if ((v253 & 0x80) == 0)
                      goto LABEL_1037;
                    v249 += 7;
                    v246 = v252;
                    v25 = v250++ > 8;
                  }
                  while (!v25);
LABEL_691:
                  LODWORD(v251) = 0;
                  goto LABEL_1037;
                }
                v662 = 0;
                v663 = 0;
                v251 = 0;
                if (v247 <= v246)
                  v247 = *((_QWORD *)a2 + 1);
                while (2)
                {
                  if (v247 == v246)
                  {
                    LODWORD(v251) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v664 = v246 + 1;
                    v665 = *(_BYTE *)(v248 + v246);
                    *v10 = v664;
                    v251 |= (unint64_t)(v665 & 0x7F) << v662;
                    if (v665 < 0)
                    {
                      v662 += 7;
                      v246 = v664;
                      v25 = v663++ > 8;
                      if (v25)
                        goto LABEL_691;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v251) = 0;
                  }
                  break;
                }
LABEL_1037:
                *((_DWORD *)v17 + 29) = v251;
                goto LABEL_514;
              case 409:
                *v18 |= 0x1000000000uLL;
                v254 = *((_QWORD *)a2 + 1);
                v255 = *((_QWORD *)a2 + 2);
                v256 = *(_QWORD *)a2;
                if (v254 <= 0xFFFFFFFFFFFFFFF5 && v254 + 10 <= v255)
                {
                  v257 = 0;
                  v258 = 0;
                  v259 = 0;
                  do
                  {
                    v260 = v254 + 1;
                    *v10 = v254 + 1;
                    v261 = *(_BYTE *)(v256 + v254);
                    v259 |= (unint64_t)(v261 & 0x7F) << v257;
                    if ((v261 & 0x80) == 0)
                      goto LABEL_1040;
                    v257 += 7;
                    v254 = v260;
                    v25 = v258++ > 8;
                  }
                  while (!v25);
LABEL_698:
                  LODWORD(v259) = 0;
                  goto LABEL_1040;
                }
                v666 = 0;
                v667 = 0;
                v259 = 0;
                if (v255 <= v254)
                  v255 = *((_QWORD *)a2 + 1);
                while (2)
                {
                  if (v255 == v254)
                  {
                    LODWORD(v259) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v668 = v254 + 1;
                    v669 = *(_BYTE *)(v256 + v254);
                    *v10 = v668;
                    v259 |= (unint64_t)(v669 & 0x7F) << v666;
                    if (v669 < 0)
                    {
                      v666 += 7;
                      v254 = v668;
                      v25 = v667++ > 8;
                      if (v25)
                        goto LABEL_698;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v259) = 0;
                  }
                  break;
                }
LABEL_1040:
                *((_DWORD *)v17 + 46) = v259;
                goto LABEL_514;
              default:
                switch((int)v32)
                {
                  case 501:
                    *v18 |= 0x4000000000000000uLL;
                    v68 = *v10;
                    if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((_QWORD *)a2 + 2))
                      goto LABEL_401;
                    v17 = this;
                    *((_DWORD *)this + 72) = *(_DWORD *)(*(_QWORD *)a2 + v68);
                    goto LABEL_940;
                  case 502:
                    *v18 |= 0x8000000000000000;
                    v442 = *v10;
                    if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v442 + 4 > *((_QWORD *)a2 + 2))
                      goto LABEL_401;
                    v17 = this;
                    *((_DWORD *)this + 73) = *(_DWORD *)(*(_QWORD *)a2 + v442);
                    goto LABEL_940;
                  case 503:
                    *v18 |= 0x200000000000000uLL;
                    v443 = *v10;
                    if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v443 + 4 > *((_QWORD *)a2 + 2))
                      goto LABEL_401;
                    v17 = this;
                    *((_DWORD *)this + 67) = *(_DWORD *)(*(_QWORD *)a2 + v443);
                    goto LABEL_940;
                  case 504:
                    *v18 |= 0x800000000000000uLL;
                    v444 = *((_QWORD *)a2 + 1);
                    v445 = *((_QWORD *)a2 + 2);
                    v446 = *(_QWORD *)a2;
                    if (v444 <= 0xFFFFFFFFFFFFFFF5 && v444 + 10 <= v445)
                    {
                      v447 = 0;
                      v448 = 0;
                      v449 = 0;
                      v12 = v766;
                      v17 = this;
                      do
                      {
                        v450 = v444 + 1;
                        *v10 = v444 + 1;
                        v451 = *(_BYTE *)(v446 + v444);
                        v449 |= (unint64_t)(v451 & 0x7F) << v447;
                        if ((v451 & 0x80) == 0)
                          goto LABEL_1064;
                        v447 += 7;
                        v444 = v450;
                        v25 = v448++ > 8;
                      }
                      while (!v25);
LABEL_820:
                      LODWORD(v449) = 0;
                      goto LABEL_1064;
                    }
                    v698 = 0;
                    v699 = 0;
                    v449 = 0;
                    if (v445 <= v444)
                      v445 = *((_QWORD *)a2 + 1);
                    v12 = v766;
                    v17 = this;
                    while (2)
                    {
                      if (v445 == v444)
                      {
                        LODWORD(v449) = 0;
                        *v766 = 1;
                      }
                      else
                      {
                        v700 = v444 + 1;
                        v701 = *(_BYTE *)(v446 + v444);
                        *v10 = v700;
                        v449 |= (unint64_t)(v701 & 0x7F) << v698;
                        if (v701 < 0)
                        {
                          v698 += 7;
                          v444 = v700;
                          v25 = v699++ > 8;
                          if (v25)
                            goto LABEL_820;
                          continue;
                        }
                        if (*v766)
                          LODWORD(v449) = 0;
                      }
                      break;
                    }
LABEL_1064:
                    *((_DWORD *)v17 + 69) = v449;
                    goto LABEL_514;
                  case 505:
                    *v18 |= 0x2000000000000000uLL;
                    v452 = *((_QWORD *)a2 + 1);
                    v453 = *((_QWORD *)a2 + 2);
                    v454 = *(_QWORD *)a2;
                    if (v452 <= 0xFFFFFFFFFFFFFFF5 && v452 + 10 <= v453)
                    {
                      v455 = 0;
                      v456 = 0;
                      v457 = 0;
                      v12 = v766;
                      v17 = this;
                      do
                      {
                        v458 = v452 + 1;
                        *v10 = v452 + 1;
                        v459 = *(_BYTE *)(v454 + v452);
                        v457 |= (unint64_t)(v459 & 0x7F) << v455;
                        if ((v459 & 0x80) == 0)
                          goto LABEL_1067;
                        v455 += 7;
                        v452 = v458;
                        v25 = v456++ > 8;
                      }
                      while (!v25);
LABEL_828:
                      LODWORD(v457) = 0;
                      goto LABEL_1067;
                    }
                    v702 = 0;
                    v703 = 0;
                    v457 = 0;
                    if (v453 <= v452)
                      v453 = *((_QWORD *)a2 + 1);
                    v12 = v766;
                    v17 = this;
                    break;
                  default:
                    goto LABEL_141;
                }
                break;
            }
            while (1)
            {
              if (v453 == v452)
              {
                LODWORD(v457) = 0;
                *v766 = 1;
                goto LABEL_1067;
              }
              v704 = v452 + 1;
              v705 = *(_BYTE *)(v454 + v452);
              *v10 = v704;
              v457 |= (unint64_t)(v705 & 0x7F) << v702;
              if ((v705 & 0x80) == 0)
                break;
              v702 += 7;
              v452 = v704;
              v25 = v703++ > 8;
              if (v25)
                goto LABEL_828;
            }
            if (*v766)
              LODWORD(v457) = 0;
LABEL_1067:
            *((_DWORD *)v17 + 71) = v457;
          }
        }
        else if ((int)v32 <= 1200)
        {
          if ((int)v32 <= 1100)
          {
            switch((_DWORD)v32)
            {
              case 0x385:
                *v18 |= 0x100uLL;
                v122 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v122 + 4 > *((_QWORD *)a2 + 2))
                {
LABEL_401:
                  v12 = v766;
                  v17 = this;
LABEL_513:
                  *v12 = 1;
                }
                else
                {
                  v17 = this;
                  *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v122);
LABEL_940:
                  *((_QWORD *)a2 + 1) += 4;
                  v12 = v766;
                }
                break;
              case 0x386:
                v18[1] |= 0x200000uLL;
                v123 = *((_QWORD *)a2 + 1);
                if (v123 >= *((_QWORD *)a2 + 2))
                {
                  v126 = 0;
                  v12 = v766;
                  v17 = this;
                  *v766 = 1;
                }
                else
                {
                  v124 = v123 + 1;
                  v125 = *(unsigned __int8 *)(*(_QWORD *)a2 + v123);
                  *((_QWORD *)a2 + 1) = v124;
                  v126 = v125 != 0;
                  v12 = v766;
                  v17 = this;
                }
                *((_BYTE *)v17 + 332) = v126;
                break;
              case 0x3E9:
                v18[1] |= 4uLL;
                v69 = *((_QWORD *)a2 + 1);
                v70 = *((_QWORD *)a2 + 2);
                v71 = *(_QWORD *)a2;
                if (v69 > 0xFFFFFFFFFFFFFFF5 || v69 + 10 > v70)
                {
                  v586 = 0;
                  v587 = 0;
                  v74 = 0;
                  if (v70 <= v69)
                    v70 = *((_QWORD *)a2 + 1);
                  v12 = v766;
                  v17 = this;
                  while (1)
                  {
                    if (v70 == v69)
                    {
                      LODWORD(v74) = 0;
                      *v766 = 1;
                      goto LABEL_953;
                    }
                    v588 = v69 + 1;
                    v589 = *(_BYTE *)(v71 + v69);
                    *v10 = v588;
                    v74 |= (unint64_t)(v589 & 0x7F) << v586;
                    if ((v589 & 0x80) == 0)
                      break;
                    v586 += 7;
                    v69 = v588;
                    v25 = v587++ > 8;
                    if (v25)
                    {
LABEL_541:
                      LODWORD(v74) = 0;
                      goto LABEL_953;
                    }
                  }
                  if (*v766)
                    LODWORD(v74) = 0;
                }
                else
                {
                  v72 = 0;
                  v73 = 0;
                  v74 = 0;
                  v12 = v766;
                  v17 = this;
                  while (1)
                  {
                    v75 = v69 + 1;
                    *v10 = v69 + 1;
                    v76 = *(_BYTE *)(v71 + v69);
                    v74 |= (unint64_t)(v76 & 0x7F) << v72;
                    if ((v76 & 0x80) == 0)
                      break;
                    v72 += 7;
                    v69 = v75;
                    v25 = v73++ > 8;
                    if (v25)
                      goto LABEL_541;
                  }
                }
LABEL_953:
                *((_DWORD *)v17 + 76) = v74;
                break;
              default:
LABEL_141:
                v127 = v7;
                v128 = a6;
                v129 = v18;
                v130 = v8;
                v131 = a7;
                result = PB::Reader::skip(a2);
                a7 = v131;
                v8 = v130;
                v18 = v129;
                a6 = v128;
                v7 = v127;
                v12 = v766;
                v17 = this;
                if (!(_DWORD)result)
                  return result;
                break;
            }
          }
          else
          {
            switch((int)v32)
            {
              case 1101:
                *v18 |= 0x10000000uLL;
                v59 = *((_QWORD *)a2 + 1);
                v60 = *((_QWORD *)a2 + 2);
                v61 = *(_QWORD *)a2;
                if (v59 <= 0xFFFFFFFFFFFFFFF5 && v59 + 10 <= v60)
                {
                  v62 = 0;
                  v63 = 0;
                  v64 = 0;
                  v12 = v766;
                  v17 = this;
                  do
                  {
                    v65 = v59 + 1;
                    *v10 = v59 + 1;
                    v66 = *(_BYTE *)(v61 + v59);
                    v64 |= (unint64_t)(v66 & 0x7F) << v62;
                    if ((v66 & 0x80) == 0)
                      goto LABEL_950;
                    v62 += 7;
                    v59 = v65;
                    v25 = v63++ > 8;
                  }
                  while (!v25);
LABEL_533:
                  LODWORD(v64) = 0;
                  goto LABEL_950;
                }
                v582 = 0;
                v583 = 0;
                v64 = 0;
                if (v60 <= v59)
                  v60 = *((_QWORD *)a2 + 1);
                v12 = v766;
                v17 = this;
                while (2)
                {
                  if (v60 == v59)
                  {
                    LODWORD(v64) = 0;
                    *v766 = 1;
                  }
                  else
                  {
                    v584 = v59 + 1;
                    v585 = *(_BYTE *)(v61 + v59);
                    *v10 = v584;
                    v64 |= (unint64_t)(v585 & 0x7F) << v582;
                    if (v585 < 0)
                    {
                      v582 += 7;
                      v59 = v584;
                      v25 = v583++ > 8;
                      if (v25)
                        goto LABEL_533;
                      continue;
                    }
                    if (*v766)
                      LODWORD(v64) = 0;
                  }
                  break;
                }
LABEL_950:
                *((_DWORD *)v17 + 38) = v64;
                goto LABEL_514;
              case 1102:
                *v18 |= 0x40000000uLL;
                v93 = *((_QWORD *)a2 + 1);
                v94 = *((_QWORD *)a2 + 2);
                v95 = *(_QWORD *)a2;
                if (v93 <= 0xFFFFFFFFFFFFFFF5 && v93 + 10 <= v94)
                {
                  v96 = 0;
                  v97 = 0;
                  v98 = 0;
                  v12 = v766;
                  v17 = this;
                  do
                  {
                    v99 = v93 + 1;
                    *v10 = v93 + 1;
                    v100 = *(_BYTE *)(v95 + v93);
                    v98 |= (unint64_t)(v100 & 0x7F) << v96;
                    if ((v100 & 0x80) == 0)
                      goto LABEL_956;
                    v96 += 7;
                    v93 = v99;
                    v25 = v97++ > 8;
                  }
                  while (!v25);
LABEL_549:
                  LODWORD(v98) = 0;
                  goto LABEL_956;
                }
                v590 = 0;
                v591 = 0;
                v98 = 0;
                if (v94 <= v93)
                  v94 = *((_QWORD *)a2 + 1);
                v12 = v766;
                v17 = this;
                while (2)
                {
                  if (v94 == v93)
                  {
                    LODWORD(v98) = 0;
                    *v766 = 1;
                  }
                  else
                  {
                    v592 = v93 + 1;
                    v593 = *(_BYTE *)(v95 + v93);
                    *v10 = v592;
                    v98 |= (unint64_t)(v593 & 0x7F) << v590;
                    if (v593 < 0)
                    {
                      v590 += 7;
                      v93 = v592;
                      v25 = v591++ > 8;
                      if (v25)
                        goto LABEL_549;
                      continue;
                    }
                    if (*v766)
                      LODWORD(v98) = 0;
                  }
                  break;
                }
LABEL_956:
                *((_DWORD *)v17 + 40) = v98;
                goto LABEL_514;
              case 1103:
                v18[1] |= 0x1000000000uLL;
                v101 = *((_QWORD *)a2 + 1);
                if (v101 >= *((_QWORD *)a2 + 2))
                {
                  v104 = 0;
                  v12 = v766;
                  v17 = this;
                  *v766 = 1;
                }
                else
                {
                  v102 = v101 + 1;
                  v103 = *(unsigned __int8 *)(*(_QWORD *)a2 + v101);
                  *((_QWORD *)a2 + 1) = v102;
                  v104 = v103 != 0;
                  v12 = v766;
                  v17 = this;
                }
                *((_BYTE *)v17 + 347) = v104;
                goto LABEL_514;
              case 1104:
                *v18 |= 0x80000000uLL;
                v105 = *((_QWORD *)a2 + 1);
                v106 = *((_QWORD *)a2 + 2);
                v107 = *(_QWORD *)a2;
                if (v105 <= 0xFFFFFFFFFFFFFFF5 && v105 + 10 <= v106)
                {
                  v108 = 0;
                  v109 = 0;
                  v110 = 0;
                  v12 = v766;
                  v17 = this;
                  do
                  {
                    v111 = v105 + 1;
                    *v10 = v105 + 1;
                    v112 = *(_BYTE *)(v107 + v105);
                    v110 |= (unint64_t)(v112 & 0x7F) << v108;
                    if ((v112 & 0x80) == 0)
                      goto LABEL_959;
                    v108 += 7;
                    v105 = v111;
                    v25 = v109++ > 8;
                  }
                  while (!v25);
LABEL_559:
                  LODWORD(v110) = 0;
                  goto LABEL_959;
                }
                v594 = 0;
                v595 = 0;
                v110 = 0;
                if (v106 <= v105)
                  v106 = *((_QWORD *)a2 + 1);
                v12 = v766;
                v17 = this;
                while (2)
                {
                  if (v106 == v105)
                  {
                    LODWORD(v110) = 0;
                    *v766 = 1;
                  }
                  else
                  {
                    v596 = v105 + 1;
                    v597 = *(_BYTE *)(v107 + v105);
                    *v10 = v596;
                    v110 |= (unint64_t)(v597 & 0x7F) << v594;
                    if (v597 < 0)
                    {
                      v594 += 7;
                      v105 = v596;
                      v25 = v595++ > 8;
                      if (v25)
                        goto LABEL_559;
                      continue;
                    }
                    if (*v766)
                      LODWORD(v110) = 0;
                  }
                  break;
                }
LABEL_959:
                *((_DWORD *)v17 + 41) = v110;
                goto LABEL_514;
              case 1105:
                *v18 |= 0x20000000uLL;
                v113 = *((_QWORD *)a2 + 1);
                v114 = *((_QWORD *)a2 + 2);
                v115 = *(_QWORD *)a2;
                if (v113 <= 0xFFFFFFFFFFFFFFF5 && v113 + 10 <= v114)
                {
                  v116 = 0;
                  v117 = 0;
                  v118 = 0;
                  v12 = v766;
                  v17 = this;
                  do
                  {
                    v119 = v113 + 1;
                    *v10 = v113 + 1;
                    v120 = *(_BYTE *)(v115 + v113);
                    v118 |= (unint64_t)(v120 & 0x7F) << v116;
                    if ((v120 & 0x80) == 0)
                      goto LABEL_962;
                    v116 += 7;
                    v113 = v119;
                    v25 = v117++ > 8;
                  }
                  while (!v25);
LABEL_567:
                  LODWORD(v118) = 0;
                  goto LABEL_962;
                }
                v598 = 0;
                v599 = 0;
                v118 = 0;
                if (v114 <= v113)
                  v114 = *((_QWORD *)a2 + 1);
                v12 = v766;
                v17 = this;
                break;
              case 1106:
                *v18 |= 0x8000000000000uLL;
                v121 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v121 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_401;
                v17 = this;
                *((_DWORD *)this + 61) = *(_DWORD *)(*(_QWORD *)a2 + v121);
                goto LABEL_940;
              default:
                goto LABEL_141;
            }
            while (1)
            {
              if (v114 == v113)
              {
                LODWORD(v118) = 0;
                *v766 = 1;
                goto LABEL_962;
              }
              v600 = v113 + 1;
              v601 = *(_BYTE *)(v115 + v113);
              *v10 = v600;
              v118 |= (unint64_t)(v601 & 0x7F) << v598;
              if ((v601 & 0x80) == 0)
                break;
              v598 += 7;
              v113 = v600;
              v25 = v599++ > 8;
              if (v25)
                goto LABEL_567;
            }
            if (*v766)
              LODWORD(v118) = 0;
LABEL_962:
            *((_DWORD *)v17 + 39) = v118;
          }
        }
        else
        {
          switch((int)v32)
          {
            case 1301:
              *v18 |= 0x8000uLL;
              v34 = *v10;
              if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v34 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_513;
              *((_DWORD *)v17 + 25) = *(_DWORD *)(*(_QWORD *)a2 + v34);
              goto LABEL_942;
            case 1302:
              *v18 |= 0x40000000000uLL;
              v468 = *((_QWORD *)a2 + 1);
              v469 = *((_QWORD *)a2 + 2);
              v470 = *(_QWORD *)a2;
              if (v468 <= 0xFFFFFFFFFFFFFFF5 && v468 + 10 <= v469)
              {
                v471 = 0;
                v472 = 0;
                v473 = 0;
                do
                {
                  v474 = v468 + 1;
                  *v10 = v468 + 1;
                  v475 = *(_BYTE *)(v470 + v468);
                  v473 |= (unint64_t)(v475 & 0x7F) << v471;
                  if ((v475 & 0x80) == 0)
                    goto LABEL_1078;
                  v471 += 7;
                  v468 = v474;
                  v25 = v472++ > 8;
                }
                while (!v25);
LABEL_850:
                LODWORD(v473) = 0;
                goto LABEL_1078;
              }
              v714 = 0;
              v715 = 0;
              v473 = 0;
              if (v469 <= v468)
                v469 = *((_QWORD *)a2 + 1);
              while (2)
              {
                if (v469 == v468)
                {
                  LODWORD(v473) = 0;
                  *v12 = 1;
                }
                else
                {
                  v716 = v468 + 1;
                  v717 = *(_BYTE *)(v470 + v468);
                  *v10 = v716;
                  v473 |= (unint64_t)(v717 & 0x7F) << v714;
                  if (v717 < 0)
                  {
                    v714 += 7;
                    v468 = v716;
                    v25 = v715++ > 8;
                    if (v25)
                      goto LABEL_850;
                    continue;
                  }
                  if (*v12)
                    LODWORD(v473) = 0;
                }
                break;
              }
LABEL_1078:
              *((_DWORD *)v17 + 52) = v473;
              break;
            case 1303:
              *v18 |= 0x10000000000uLL;
              v476 = *((_QWORD *)a2 + 1);
              v477 = *((_QWORD *)a2 + 2);
              v478 = *(_QWORD *)a2;
              if (v476 <= 0xFFFFFFFFFFFFFFF5 && v476 + 10 <= v477)
              {
                v479 = 0;
                v480 = 0;
                v481 = 0;
                do
                {
                  v482 = v476 + 1;
                  *v10 = v476 + 1;
                  v483 = *(_BYTE *)(v478 + v476);
                  v481 |= (unint64_t)(v483 & 0x7F) << v479;
                  if ((v483 & 0x80) == 0)
                    goto LABEL_1082;
                  v479 += 7;
                  v476 = v482;
                  v25 = v480++ > 8;
                }
                while (!v25);
LABEL_857:
                LODWORD(v481) = 0;
                goto LABEL_1082;
              }
              v718 = 0;
              v719 = 0;
              v481 = 0;
              if (v477 <= v476)
                v477 = *((_QWORD *)a2 + 1);
              while (2)
              {
                if (v477 == v476)
                {
                  LODWORD(v481) = 0;
                  *v12 = 1;
                }
                else
                {
                  v720 = v476 + 1;
                  v721 = *(_BYTE *)(v478 + v476);
                  *v10 = v720;
                  v481 |= (unint64_t)(v721 & 0x7F) << v718;
                  if (v721 < 0)
                  {
                    v718 += 7;
                    v476 = v720;
                    v25 = v719++ > 8;
                    if (v25)
                      goto LABEL_857;
                    continue;
                  }
                  if (*v12)
                    LODWORD(v481) = 0;
                }
                break;
              }
LABEL_1082:
              *((_DWORD *)v17 + 50) = v481;
              break;
            case 1304:
              *v18 |= 0x800000000uLL;
              v484 = *((_QWORD *)a2 + 1);
              v485 = *((_QWORD *)a2 + 2);
              v486 = *(_QWORD *)a2;
              if (v484 <= 0xFFFFFFFFFFFFFFF5 && v484 + 10 <= v485)
              {
                v487 = 0;
                v488 = 0;
                v489 = 0;
                do
                {
                  v490 = v484 + 1;
                  *v10 = v484 + 1;
                  v491 = *(_BYTE *)(v486 + v484);
                  v489 |= (unint64_t)(v491 & 0x7F) << v487;
                  if ((v491 & 0x80) == 0)
                    goto LABEL_1086;
                  v487 += 7;
                  v484 = v490;
                  v25 = v488++ > 8;
                }
                while (!v25);
LABEL_864:
                LODWORD(v489) = 0;
                goto LABEL_1086;
              }
              v722 = 0;
              v723 = 0;
              v489 = 0;
              if (v485 <= v484)
                v485 = *((_QWORD *)a2 + 1);
              while (2)
              {
                if (v485 == v484)
                {
                  LODWORD(v489) = 0;
                  *v12 = 1;
                }
                else
                {
                  v724 = v484 + 1;
                  v725 = *(_BYTE *)(v486 + v484);
                  *v10 = v724;
                  v489 |= (unint64_t)(v725 & 0x7F) << v722;
                  if (v725 < 0)
                  {
                    v722 += 7;
                    v484 = v724;
                    v25 = v723++ > 8;
                    if (v25)
                      goto LABEL_864;
                    continue;
                  }
                  if (*v12)
                    LODWORD(v489) = 0;
                }
                break;
              }
LABEL_1086:
              *((_DWORD *)v17 + 45) = v489;
              break;
            case 1305:
              *v18 |= 0x100000000uLL;
              v492 = *((_QWORD *)a2 + 1);
              v493 = *((_QWORD *)a2 + 2);
              v494 = *(_QWORD *)a2;
              if (v492 <= 0xFFFFFFFFFFFFFFF5 && v492 + 10 <= v493)
              {
                v495 = 0;
                v496 = 0;
                v497 = 0;
                do
                {
                  v498 = v492 + 1;
                  *v10 = v492 + 1;
                  v499 = *(_BYTE *)(v494 + v492);
                  v497 |= (unint64_t)(v499 & 0x7F) << v495;
                  if ((v499 & 0x80) == 0)
                    goto LABEL_1090;
                  v495 += 7;
                  v492 = v498;
                  v25 = v496++ > 8;
                }
                while (!v25);
LABEL_871:
                LODWORD(v497) = 0;
                goto LABEL_1090;
              }
              v726 = 0;
              v727 = 0;
              v497 = 0;
              if (v493 <= v492)
                v493 = *((_QWORD *)a2 + 1);
              while (2)
              {
                if (v493 == v492)
                {
                  LODWORD(v497) = 0;
                  *v12 = 1;
                }
                else
                {
                  v728 = v492 + 1;
                  v729 = *(_BYTE *)(v494 + v492);
                  *v10 = v728;
                  v497 |= (unint64_t)(v729 & 0x7F) << v726;
                  if (v729 < 0)
                  {
                    v726 += 7;
                    v492 = v728;
                    v25 = v727++ > 8;
                    if (v25)
                      goto LABEL_871;
                    continue;
                  }
                  if (*v12)
                    LODWORD(v497) = 0;
                }
                break;
              }
LABEL_1090:
              *((_DWORD *)v17 + 42) = v497;
              break;
            case 1306:
              *v18 |= 0x400000000uLL;
              v500 = *((_QWORD *)a2 + 1);
              v501 = *((_QWORD *)a2 + 2);
              v502 = *(_QWORD *)a2;
              if (v500 <= 0xFFFFFFFFFFFFFFF5 && v500 + 10 <= v501)
              {
                v503 = 0;
                v504 = 0;
                v505 = 0;
                do
                {
                  v506 = v500 + 1;
                  *v10 = v500 + 1;
                  v507 = *(_BYTE *)(v502 + v500);
                  v505 |= (unint64_t)(v507 & 0x7F) << v503;
                  if ((v507 & 0x80) == 0)
                    goto LABEL_1094;
                  v503 += 7;
                  v500 = v506;
                  v25 = v504++ > 8;
                }
                while (!v25);
LABEL_878:
                LODWORD(v505) = 0;
                goto LABEL_1094;
              }
              v730 = 0;
              v731 = 0;
              v505 = 0;
              if (v501 <= v500)
                v501 = *((_QWORD *)a2 + 1);
              while (2)
              {
                if (v501 == v500)
                {
                  LODWORD(v505) = 0;
                  *v12 = 1;
                }
                else
                {
                  v732 = v500 + 1;
                  v733 = *(_BYTE *)(v502 + v500);
                  *v10 = v732;
                  v505 |= (unint64_t)(v733 & 0x7F) << v730;
                  if (v733 < 0)
                  {
                    v730 += 7;
                    v500 = v732;
                    v25 = v731++ > 8;
                    if (v25)
                      goto LABEL_878;
                    continue;
                  }
                  if (*v12)
                    LODWORD(v505) = 0;
                }
                break;
              }
LABEL_1094:
              *((_DWORD *)v17 + 44) = v505;
              break;
            case 1307:
              v18[1] |= 0x100uLL;
              v508 = *((_QWORD *)a2 + 1);
              if (v508 >= *((_QWORD *)a2 + 2))
              {
                v511 = 0;
                *v12 = 1;
              }
              else
              {
                v509 = v508 + 1;
                v510 = *(unsigned __int8 *)(*(_QWORD *)a2 + v508);
                *((_QWORD *)a2 + 1) = v509;
                v511 = v510 != 0;
              }
              *((_BYTE *)v17 + 319) = v511;
              break;
            case 1308:
              v18[1] |= 0x40000uLL;
              v512 = *((_QWORD *)a2 + 1);
              if (v512 >= *((_QWORD *)a2 + 2))
              {
                v515 = 0;
                *v12 = 1;
              }
              else
              {
                v513 = v512 + 1;
                v514 = *(unsigned __int8 *)(*(_QWORD *)a2 + v512);
                *((_QWORD *)a2 + 1) = v513;
                v515 = v514 != 0;
              }
              *((_BYTE *)v17 + 329) = v515;
              break;
            case 1309:
              *v18 |= 0x200000000uLL;
              v516 = *((_QWORD *)a2 + 1);
              v517 = *((_QWORD *)a2 + 2);
              v518 = *(_QWORD *)a2;
              if (v516 <= 0xFFFFFFFFFFFFFFF5 && v516 + 10 <= v517)
              {
                v519 = 0;
                v520 = 0;
                v521 = 0;
                do
                {
                  v522 = v516 + 1;
                  *v10 = v516 + 1;
                  v523 = *(_BYTE *)(v518 + v516);
                  v521 |= (unint64_t)(v523 & 0x7F) << v519;
                  if ((v523 & 0x80) == 0)
                    goto LABEL_1098;
                  v519 += 7;
                  v516 = v522;
                  v25 = v520++ > 8;
                }
                while (!v25);
LABEL_889:
                LODWORD(v521) = 0;
                goto LABEL_1098;
              }
              v734 = 0;
              v735 = 0;
              v521 = 0;
              if (v517 <= v516)
                v517 = *((_QWORD *)a2 + 1);
              while (2)
              {
                if (v517 == v516)
                {
                  LODWORD(v521) = 0;
                  *v12 = 1;
                }
                else
                {
                  v736 = v516 + 1;
                  v737 = *(_BYTE *)(v518 + v516);
                  *v10 = v736;
                  v521 |= (unint64_t)(v737 & 0x7F) << v734;
                  if (v737 < 0)
                  {
                    v734 += 7;
                    v516 = v736;
                    v25 = v735++ > 8;
                    if (v25)
                      goto LABEL_889;
                    continue;
                  }
                  if (*v12)
                    LODWORD(v521) = 0;
                }
                break;
              }
LABEL_1098:
              *((_DWORD *)v17 + 43) = v521;
              break;
            case 1310:
              *v18 |= 2uLL;
              v524 = *((_QWORD *)a2 + 1);
              v525 = *((_QWORD *)a2 + 2);
              v526 = *(_QWORD *)a2;
              if (v524 <= 0xFFFFFFFFFFFFFFF5 && v524 + 10 <= v525)
              {
                v527 = 0;
                v528 = 0;
                v529 = 0;
                do
                {
                  v530 = v524 + 1;
                  *v10 = v524 + 1;
                  v531 = *(_BYTE *)(v526 + v524);
                  v529 |= (unint64_t)(v531 & 0x7F) << v527;
                  if ((v531 & 0x80) == 0)
                    goto LABEL_1102;
                  v527 += 7;
                  v524 = v530;
                  v25 = v528++ > 8;
                }
                while (!v25);
LABEL_896:
                v529 = 0;
                goto LABEL_1102;
              }
              v738 = 0;
              v739 = 0;
              v529 = 0;
              if (v525 <= v524)
                v525 = *((_QWORD *)a2 + 1);
              while (2)
              {
                if (v525 == v524)
                {
                  v529 = 0;
                  *v12 = 1;
                }
                else
                {
                  v740 = v524 + 1;
                  v741 = *(_BYTE *)(v526 + v524);
                  *v10 = v740;
                  v529 |= (unint64_t)(v741 & 0x7F) << v738;
                  if (v741 < 0)
                  {
                    v738 += 7;
                    v524 = v740;
                    v25 = v739++ > 8;
                    if (v25)
                      goto LABEL_896;
                    continue;
                  }
                  if (*v12)
                    v529 = 0;
                }
                break;
              }
LABEL_1102:
              *((_QWORD *)v17 + 2) = v529;
              break;
            case 1311:
              *v18 |= 0x20uLL;
              v532 = *((_QWORD *)a2 + 1);
              v533 = *((_QWORD *)a2 + 2);
              v534 = *(_QWORD *)a2;
              if (v532 <= 0xFFFFFFFFFFFFFFF5 && v532 + 10 <= v533)
              {
                v535 = 0;
                v536 = 0;
                v537 = 0;
                do
                {
                  v538 = v532 + 1;
                  *v10 = v532 + 1;
                  v539 = *(_BYTE *)(v534 + v532);
                  v537 |= (unint64_t)(v539 & 0x7F) << v535;
                  if ((v539 & 0x80) == 0)
                    goto LABEL_1106;
                  v535 += 7;
                  v532 = v538;
                  v25 = v536++ > 8;
                }
                while (!v25);
LABEL_903:
                v537 = 0;
                goto LABEL_1106;
              }
              v742 = 0;
              v743 = 0;
              v537 = 0;
              if (v533 <= v532)
                v533 = *((_QWORD *)a2 + 1);
              while (2)
              {
                if (v533 == v532)
                {
                  v537 = 0;
                  *v12 = 1;
                }
                else
                {
                  v744 = v532 + 1;
                  v745 = *(_BYTE *)(v534 + v532);
                  *v10 = v744;
                  v537 |= (unint64_t)(v745 & 0x7F) << v742;
                  if (v745 < 0)
                  {
                    v742 += 7;
                    v532 = v744;
                    v25 = v743++ > 8;
                    if (v25)
                      goto LABEL_903;
                    continue;
                  }
                  if (*v12)
                    v537 = 0;
                }
                break;
              }
LABEL_1106:
              *((_QWORD *)v17 + 6) = v537;
              break;
            case 1312:
              *v18 |= 4uLL;
              v540 = *((_QWORD *)a2 + 1);
              v541 = *((_QWORD *)a2 + 2);
              v542 = *(_QWORD *)a2;
              if (v540 <= 0xFFFFFFFFFFFFFFF5 && v540 + 10 <= v541)
              {
                v543 = 0;
                v544 = 0;
                v545 = 0;
                do
                {
                  v546 = v540 + 1;
                  *v10 = v540 + 1;
                  v547 = *(_BYTE *)(v542 + v540);
                  v545 |= (unint64_t)(v547 & 0x7F) << v543;
                  if ((v547 & 0x80) == 0)
                    goto LABEL_1110;
                  v543 += 7;
                  v540 = v546;
                  v25 = v544++ > 8;
                }
                while (!v25);
LABEL_910:
                v545 = 0;
                goto LABEL_1110;
              }
              v746 = 0;
              v747 = 0;
              v545 = 0;
              if (v541 <= v540)
                v541 = *((_QWORD *)a2 + 1);
              while (2)
              {
                if (v541 == v540)
                {
                  v545 = 0;
                  *v12 = 1;
                }
                else
                {
                  v748 = v540 + 1;
                  v749 = *(_BYTE *)(v542 + v540);
                  *v10 = v748;
                  v545 |= (unint64_t)(v749 & 0x7F) << v746;
                  if (v749 < 0)
                  {
                    v746 += 7;
                    v540 = v748;
                    v25 = v747++ > 8;
                    if (v25)
                      goto LABEL_910;
                    continue;
                  }
                  if (*v12)
                    v545 = 0;
                }
                break;
              }
LABEL_1110:
              *((_QWORD *)v17 + 3) = v545;
              break;
            case 1313:
              *v18 |= 8uLL;
              v548 = *((_QWORD *)a2 + 1);
              v549 = *((_QWORD *)a2 + 2);
              v550 = *(_QWORD *)a2;
              if (v548 <= 0xFFFFFFFFFFFFFFF5 && v548 + 10 <= v549)
              {
                v551 = 0;
                v552 = 0;
                v553 = 0;
                do
                {
                  v554 = v548 + 1;
                  *v10 = v548 + 1;
                  v555 = *(_BYTE *)(v550 + v548);
                  v553 |= (unint64_t)(v555 & 0x7F) << v551;
                  if ((v555 & 0x80) == 0)
                    goto LABEL_1114;
                  v551 += 7;
                  v548 = v554;
                  v25 = v552++ > 8;
                }
                while (!v25);
LABEL_917:
                v553 = 0;
                goto LABEL_1114;
              }
              v750 = 0;
              v751 = 0;
              v553 = 0;
              if (v549 <= v548)
                v549 = *((_QWORD *)a2 + 1);
              while (2)
              {
                if (v549 == v548)
                {
                  v553 = 0;
                  *v12 = 1;
                }
                else
                {
                  v752 = v548 + 1;
                  v753 = *(_BYTE *)(v550 + v548);
                  *v10 = v752;
                  v553 |= (unint64_t)(v753 & 0x7F) << v750;
                  if (v753 < 0)
                  {
                    v750 += 7;
                    v548 = v752;
                    v25 = v751++ > 8;
                    if (v25)
                      goto LABEL_917;
                    continue;
                  }
                  if (*v12)
                    v553 = 0;
                }
                break;
              }
LABEL_1114:
              *((_QWORD *)v17 + 4) = v553;
              break;
            case 1314:
              *v18 |= 0x10uLL;
              v556 = *((_QWORD *)a2 + 1);
              v557 = *((_QWORD *)a2 + 2);
              v558 = *(_QWORD *)a2;
              if (v556 <= 0xFFFFFFFFFFFFFFF5 && v556 + 10 <= v557)
              {
                v559 = 0;
                v560 = 0;
                v561 = 0;
                do
                {
                  v562 = v556 + 1;
                  *v10 = v556 + 1;
                  v563 = *(_BYTE *)(v558 + v556);
                  v561 |= (unint64_t)(v563 & 0x7F) << v559;
                  if ((v563 & 0x80) == 0)
                    goto LABEL_1118;
                  v559 += 7;
                  v556 = v562;
                  v25 = v560++ > 8;
                }
                while (!v25);
LABEL_924:
                v561 = 0;
                goto LABEL_1118;
              }
              v754 = 0;
              v755 = 0;
              v561 = 0;
              if (v557 <= v556)
                v557 = *((_QWORD *)a2 + 1);
              while (2)
              {
                if (v557 == v556)
                {
                  v561 = 0;
                  *v12 = 1;
                }
                else
                {
                  v756 = v556 + 1;
                  v757 = *(_BYTE *)(v558 + v556);
                  *v10 = v756;
                  v561 |= (unint64_t)(v757 & 0x7F) << v754;
                  if (v757 < 0)
                  {
                    v754 += 7;
                    v556 = v756;
                    v25 = v755++ > 8;
                    if (v25)
                      goto LABEL_924;
                    continue;
                  }
                  if (*v12)
                    v561 = 0;
                }
                break;
              }
LABEL_1118:
              *((_QWORD *)v17 + 5) = v561;
              break;
            case 1315:
              *v18 |= 0x2000000000000uLL;
              v564 = *((_QWORD *)a2 + 1);
              v565 = *((_QWORD *)a2 + 2);
              v566 = *(_QWORD *)a2;
              if (v564 <= 0xFFFFFFFFFFFFFFF5 && v564 + 10 <= v565)
              {
                v567 = 0;
                v568 = 0;
                v569 = 0;
                do
                {
                  v570 = v564 + 1;
                  *v10 = v564 + 1;
                  v571 = *(_BYTE *)(v566 + v564);
                  v569 |= (unint64_t)(v571 & 0x7F) << v567;
                  if ((v571 & 0x80) == 0)
                    goto LABEL_1122;
                  v567 += 7;
                  v564 = v570;
                  v25 = v568++ > 8;
                }
                while (!v25);
LABEL_931:
                LODWORD(v569) = 0;
                goto LABEL_1122;
              }
              v758 = 0;
              v759 = 0;
              v569 = 0;
              if (v565 <= v564)
                v565 = *((_QWORD *)a2 + 1);
              while (2)
              {
                if (v565 == v564)
                {
                  LODWORD(v569) = 0;
                  *v12 = 1;
                }
                else
                {
                  v760 = v564 + 1;
                  v761 = *(_BYTE *)(v566 + v564);
                  *v10 = v760;
                  v569 |= (unint64_t)(v761 & 0x7F) << v758;
                  if (v761 < 0)
                  {
                    v758 += 7;
                    v564 = v760;
                    v25 = v759++ > 8;
                    if (v25)
                      goto LABEL_931;
                    continue;
                  }
                  if (*v12)
                    LODWORD(v569) = 0;
                }
                break;
              }
LABEL_1122:
              *((_DWORD *)v17 + 59) = v569;
              break;
            case 1316:
              *v18 |= 0x2000uLL;
              v572 = *v10;
              if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v572 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_513;
              *((_DWORD *)v17 + 23) = *(_DWORD *)(*(_QWORD *)a2 + v572);
              goto LABEL_942;
            default:
              if ((_DWORD)v32 == 1201)
              {
                *v18 |= 0x4000000000uLL;
                v574 = *((_QWORD *)a2 + 1);
                v575 = *((_QWORD *)a2 + 2);
                v576 = *(_QWORD *)a2;
                if (v574 > 0xFFFFFFFFFFFFFFF5 || v574 + 10 > v575)
                {
                  v762 = 0;
                  v763 = 0;
                  v579 = 0;
                  if (v575 <= v574)
                    v575 = *((_QWORD *)a2 + 1);
                  while (1)
                  {
                    if (v575 == v574)
                    {
                      LODWORD(v579) = 0;
                      *v12 = 1;
                      goto LABEL_1126;
                    }
                    v764 = v574 + 1;
                    v765 = *(_BYTE *)(v576 + v574);
                    *v10 = v764;
                    v579 |= (unint64_t)(v765 & 0x7F) << v762;
                    if ((v765 & 0x80) == 0)
                      break;
                    v762 += 7;
                    v574 = v764;
                    v25 = v763++ > 8;
                    if (v25)
                    {
LABEL_938:
                      LODWORD(v579) = 0;
                      goto LABEL_1126;
                    }
                  }
                  if (*v12)
                    LODWORD(v579) = 0;
                }
                else
                {
                  v577 = 0;
                  v578 = 0;
                  v579 = 0;
                  while (1)
                  {
                    v580 = v574 + 1;
                    *v10 = v574 + 1;
                    v581 = *(_BYTE *)(v576 + v574);
                    v579 |= (unint64_t)(v581 & 0x7F) << v577;
                    if ((v581 & 0x80) == 0)
                      break;
                    v577 += 7;
                    v574 = v580;
                    v25 = v578++ > 8;
                    if (v25)
                      goto LABEL_938;
                  }
                }
LABEL_1126:
                *((_DWORD *)v17 + 48) = v579;
              }
              else
              {
                if ((_DWORD)v32 != 1202)
                  goto LABEL_141;
                *v18 |= 0x8000000000uLL;
                v85 = *((_QWORD *)a2 + 1);
                v86 = *((_QWORD *)a2 + 2);
                v87 = *(_QWORD *)a2;
                if (v85 > 0xFFFFFFFFFFFFFFF5 || v85 + 10 > v86)
                {
                  v710 = 0;
                  v711 = 0;
                  v90 = 0;
                  if (v86 <= v85)
                    v86 = *((_QWORD *)a2 + 1);
                  v12 = v766;
                  v17 = this;
                  while (1)
                  {
                    if (v86 == v85)
                    {
                      LODWORD(v90) = 0;
                      *v766 = 1;
                      goto LABEL_1074;
                    }
                    v712 = v85 + 1;
                    v713 = *(_BYTE *)(v87 + v85);
                    *v10 = v712;
                    v90 |= (unint64_t)(v713 & 0x7F) << v710;
                    if ((v713 & 0x80) == 0)
                      break;
                    v710 += 7;
                    v85 = v712;
                    v25 = v711++ > 8;
                    if (v25)
                    {
LABEL_843:
                      LODWORD(v90) = 0;
                      goto LABEL_1074;
                    }
                  }
                  if (*v766)
                    LODWORD(v90) = 0;
                }
                else
                {
                  v88 = 0;
                  v89 = 0;
                  v90 = 0;
                  v12 = v766;
                  v17 = this;
                  while (1)
                  {
                    v91 = v85 + 1;
                    *v10 = v85 + 1;
                    v92 = *(_BYTE *)(v87 + v85);
                    v90 |= (unint64_t)(v92 & 0x7F) << v88;
                    if ((v92 & 0x80) == 0)
                      break;
                    v88 += 7;
                    v85 = v91;
                    v25 = v89++ > 8;
                    if (v25)
                      goto LABEL_843;
                  }
                }
LABEL_1074:
                *((_DWORD *)v17 + 49) = v90;
              }
              break;
          }
        }
      }
      else
      {
        switch((int)v32)
        {
          case 301:
            v18[1] |= 0x2000uLL;
            v43 = *((_QWORD *)a2 + 1);
            if (v43 >= *((_QWORD *)a2 + 2))
            {
              v46 = 0;
              *v12 = 1;
            }
            else
            {
              v44 = v43 + 1;
              v45 = *(unsigned __int8 *)(*(_QWORD *)a2 + v43);
              *((_QWORD *)a2 + 1) = v44;
              v46 = v45 != 0;
            }
            *((_BYTE *)v17 + 324) = v46;
            goto LABEL_514;
          case 302:
            v18[1] |= 0x4000000uLL;
            v262 = *((_QWORD *)a2 + 1);
            if (v262 >= *((_QWORD *)a2 + 2))
            {
              v265 = 0;
              *v12 = 1;
            }
            else
            {
              v263 = v262 + 1;
              v264 = *(unsigned __int8 *)(*(_QWORD *)a2 + v262);
              *((_QWORD *)a2 + 1) = v263;
              v265 = v264 != 0;
            }
            *((_BYTE *)v17 + 337) = v265;
            goto LABEL_514;
          case 303:
            v18[1] |= 0x80000uLL;
            v266 = *((_QWORD *)a2 + 1);
            if (v266 >= *((_QWORD *)a2 + 2))
            {
              v269 = 0;
              *v12 = 1;
            }
            else
            {
              v267 = v266 + 1;
              v268 = *(unsigned __int8 *)(*(_QWORD *)a2 + v266);
              *((_QWORD *)a2 + 1) = v267;
              v269 = v268 != 0;
            }
            *((_BYTE *)v17 + 330) = v269;
            goto LABEL_514;
          case 304:
            v18[1] |= 0x2000000000uLL;
            v270 = *((_QWORD *)a2 + 1);
            if (v270 >= *((_QWORD *)a2 + 2))
            {
              v273 = 0;
              *v12 = 1;
            }
            else
            {
              v271 = v270 + 1;
              v272 = *(unsigned __int8 *)(*(_QWORD *)a2 + v270);
              *((_QWORD *)a2 + 1) = v271;
              v273 = v272 != 0;
            }
            *((_BYTE *)v17 + 348) = v273;
            goto LABEL_514;
          case 305:
            v18[1] |= 0x200000000uLL;
            v274 = *((_QWORD *)a2 + 1);
            if (v274 >= *((_QWORD *)a2 + 2))
            {
              v277 = 0;
              *v12 = 1;
            }
            else
            {
              v275 = v274 + 1;
              v276 = *(unsigned __int8 *)(*(_QWORD *)a2 + v274);
              *((_QWORD *)a2 + 1) = v275;
              v277 = v276 != 0;
            }
            *((_BYTE *)v17 + 344) = v277;
            goto LABEL_514;
          case 306:
            v18[1] |= 0x4000000000uLL;
            v278 = *((_QWORD *)a2 + 1);
            if (v278 >= *((_QWORD *)a2 + 2))
            {
              v281 = 0;
              *v12 = 1;
            }
            else
            {
              v279 = v278 + 1;
              v280 = *(unsigned __int8 *)(*(_QWORD *)a2 + v278);
              *((_QWORD *)a2 + 1) = v279;
              v281 = v280 != 0;
            }
            *((_BYTE *)v17 + 349) = v281;
            goto LABEL_514;
          case 307:
            v18[1] |= 0x400000000uLL;
            v282 = *((_QWORD *)a2 + 1);
            if (v282 >= *((_QWORD *)a2 + 2))
            {
              v285 = 0;
              *v12 = 1;
            }
            else
            {
              v283 = v282 + 1;
              v284 = *(unsigned __int8 *)(*(_QWORD *)a2 + v282);
              *((_QWORD *)a2 + 1) = v283;
              v285 = v284 != 0;
            }
            *((_BYTE *)v17 + 345) = v285;
            goto LABEL_514;
          case 308:
            v18[1] |= 0x40000000uLL;
            v286 = *((_QWORD *)a2 + 1);
            if (v286 >= *((_QWORD *)a2 + 2))
            {
              v289 = 0;
              *v12 = 1;
            }
            else
            {
              v287 = v286 + 1;
              v288 = *(unsigned __int8 *)(*(_QWORD *)a2 + v286);
              *((_QWORD *)a2 + 1) = v287;
              v289 = v288 != 0;
            }
            *((_BYTE *)v17 + 341) = v289;
            goto LABEL_514;
          case 309:
            v18[1] |= 0x800uLL;
            v290 = *((_QWORD *)a2 + 1);
            if (v290 >= *((_QWORD *)a2 + 2))
            {
              v293 = 0;
              *v12 = 1;
            }
            else
            {
              v291 = v290 + 1;
              v292 = *(unsigned __int8 *)(*(_QWORD *)a2 + v290);
              *((_QWORD *)a2 + 1) = v291;
              v293 = v292 != 0;
            }
            *((_BYTE *)v17 + 322) = v293;
            goto LABEL_514;
          case 310:
            v18[1] |= 0x100000uLL;
            v294 = *((_QWORD *)a2 + 1);
            if (v294 >= *((_QWORD *)a2 + 2))
            {
              v297 = 0;
              *v12 = 1;
            }
            else
            {
              v295 = v294 + 1;
              v296 = *(unsigned __int8 *)(*(_QWORD *)a2 + v294);
              *((_QWORD *)a2 + 1) = v295;
              v297 = v296 != 0;
            }
            *((_BYTE *)v17 + 331) = v297;
            goto LABEL_514;
          case 311:
            v18[1] |= 0x8000000000uLL;
            v298 = *((_QWORD *)a2 + 1);
            if (v298 >= *((_QWORD *)a2 + 2))
            {
              v301 = 0;
              *v12 = 1;
            }
            else
            {
              v299 = v298 + 1;
              v300 = *(unsigned __int8 *)(*(_QWORD *)a2 + v298);
              *((_QWORD *)a2 + 1) = v299;
              v301 = v300 != 0;
            }
            *((_BYTE *)v17 + 350) = v301;
            goto LABEL_514;
          case 312:
            v18[1] |= 0x800000000uLL;
            v302 = *((_QWORD *)a2 + 1);
            if (v302 >= *((_QWORD *)a2 + 2))
            {
              v305 = 0;
              *v12 = 1;
            }
            else
            {
              v303 = v302 + 1;
              v304 = *(unsigned __int8 *)(*(_QWORD *)a2 + v302);
              *((_QWORD *)a2 + 1) = v303;
              v305 = v304 != 0;
            }
            *((_BYTE *)v17 + 346) = v305;
            goto LABEL_514;
          case 313:
            *v18 |= 0x20000uLL;
            v306 = *((_QWORD *)a2 + 1);
            v307 = *((_QWORD *)a2 + 2);
            v308 = *(_QWORD *)a2;
            if (v306 <= 0xFFFFFFFFFFFFFFF5 && v306 + 10 <= v307)
            {
              v309 = 0;
              v310 = 0;
              v311 = 0;
              do
              {
                v312 = v306 + 1;
                *v10 = v306 + 1;
                v313 = *(_BYTE *)(v308 + v306);
                v311 |= (unint64_t)(v313 & 0x7F) << v309;
                if ((v313 & 0x80) == 0)
                  goto LABEL_1043;
                v309 += 7;
                v306 = v312;
                v25 = v310++ > 8;
              }
              while (!v25);
LABEL_727:
              LODWORD(v311) = 0;
              goto LABEL_1043;
            }
            v670 = 0;
            v671 = 0;
            v311 = 0;
            if (v307 <= v306)
              v307 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v307 == v306)
              {
                LODWORD(v311) = 0;
                *v12 = 1;
              }
              else
              {
                v672 = v306 + 1;
                v673 = *(_BYTE *)(v308 + v306);
                *v10 = v672;
                v311 |= (unint64_t)(v673 & 0x7F) << v670;
                if (v673 < 0)
                {
                  v670 += 7;
                  v306 = v672;
                  v25 = v671++ > 8;
                  if (v25)
                    goto LABEL_727;
                  continue;
                }
                if (*v12)
                  LODWORD(v311) = 0;
              }
              break;
            }
LABEL_1043:
            *((_DWORD *)v17 + 27) = v311;
            goto LABEL_514;
          case 314:
            v18[1] |= 0x400000uLL;
            v314 = *((_QWORD *)a2 + 1);
            if (v314 >= *((_QWORD *)a2 + 2))
            {
              v317 = 0;
              *v12 = 1;
            }
            else
            {
              v315 = v314 + 1;
              v316 = *(unsigned __int8 *)(*(_QWORD *)a2 + v314);
              *((_QWORD *)a2 + 1) = v315;
              v317 = v316 != 0;
            }
            *((_BYTE *)v17 + 333) = v317;
            goto LABEL_514;
          case 315:
            v18[1] |= 0x800000uLL;
            v318 = *((_QWORD *)a2 + 1);
            if (v318 >= *((_QWORD *)a2 + 2))
            {
              v321 = 0;
              *v12 = 1;
            }
            else
            {
              v319 = v318 + 1;
              v320 = *(unsigned __int8 *)(*(_QWORD *)a2 + v318);
              *((_QWORD *)a2 + 1) = v319;
              v321 = v320 != 0;
            }
            *((_BYTE *)v17 + 334) = v321;
            goto LABEL_514;
          case 316:
            v18[1] |= 0x20uLL;
            v322 = *((_QWORD *)a2 + 1);
            if (v322 >= *((_QWORD *)a2 + 2))
            {
              v325 = 0;
              *v12 = 1;
            }
            else
            {
              v323 = v322 + 1;
              v324 = *(unsigned __int8 *)(*(_QWORD *)a2 + v322);
              *((_QWORD *)a2 + 1) = v323;
              v325 = v324 != 0;
            }
            *((_BYTE *)v17 + 316) = v325;
            goto LABEL_514;
          case 317:
            *v18 |= 0x40000uLL;
            v326 = *((_QWORD *)a2 + 1);
            v327 = *((_QWORD *)a2 + 2);
            v328 = *(_QWORD *)a2;
            if (v326 <= 0xFFFFFFFFFFFFFFF5 && v326 + 10 <= v327)
            {
              v329 = 0;
              v330 = 0;
              v331 = 0;
              do
              {
                v332 = v326 + 1;
                *v10 = v326 + 1;
                v333 = *(_BYTE *)(v328 + v326);
                v331 |= (unint64_t)(v333 & 0x7F) << v329;
                if ((v333 & 0x80) == 0)
                  goto LABEL_1046;
                v329 += 7;
                v326 = v332;
                v25 = v330++ > 8;
              }
              while (!v25);
LABEL_740:
              LODWORD(v331) = 0;
              goto LABEL_1046;
            }
            v674 = 0;
            v675 = 0;
            v331 = 0;
            if (v327 <= v326)
              v327 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v327 == v326)
              {
                LODWORD(v331) = 0;
                *v12 = 1;
              }
              else
              {
                v676 = v326 + 1;
                v677 = *(_BYTE *)(v328 + v326);
                *v10 = v676;
                v331 |= (unint64_t)(v677 & 0x7F) << v674;
                if (v677 < 0)
                {
                  v674 += 7;
                  v326 = v676;
                  v25 = v675++ > 8;
                  if (v25)
                    goto LABEL_740;
                  continue;
                }
                if (*v12)
                  LODWORD(v331) = 0;
              }
              break;
            }
LABEL_1046:
            *((_DWORD *)v17 + 28) = v331;
            goto LABEL_514;
          case 318:
            v18[1] |= 0x40000000000uLL;
            v334 = *((_QWORD *)a2 + 1);
            if (v334 >= *((_QWORD *)a2 + 2))
            {
              v337 = 0;
              *v12 = 1;
            }
            else
            {
              v335 = v334 + 1;
              v336 = *(unsigned __int8 *)(*(_QWORD *)a2 + v334);
              *((_QWORD *)a2 + 1) = v335;
              v337 = v336 != 0;
            }
            *((_BYTE *)v17 + 353) = v337;
            goto LABEL_514;
          case 319:
            v18[1] |= 0x10000000000uLL;
            v338 = *((_QWORD *)a2 + 1);
            if (v338 >= *((_QWORD *)a2 + 2))
            {
              v341 = 0;
              *v12 = 1;
            }
            else
            {
              v339 = v338 + 1;
              v340 = *(unsigned __int8 *)(*(_QWORD *)a2 + v338);
              *((_QWORD *)a2 + 1) = v339;
              v341 = v340 != 0;
            }
            *((_BYTE *)v17 + 351) = v341;
            goto LABEL_514;
          case 320:
            v18[1] |= 0x20000000000uLL;
            v342 = *((_QWORD *)a2 + 1);
            if (v342 >= *((_QWORD *)a2 + 2))
            {
              v345 = 0;
              *v12 = 1;
            }
            else
            {
              v343 = v342 + 1;
              v344 = *(unsigned __int8 *)(*(_QWORD *)a2 + v342);
              *((_QWORD *)a2 + 1) = v343;
              v345 = v344 != 0;
            }
            *((_BYTE *)v17 + 352) = v345;
            goto LABEL_514;
          case 321:
            v18[1] |= 0x100000000uLL;
            v346 = *((_QWORD *)a2 + 1);
            if (v346 >= *((_QWORD *)a2 + 2))
            {
              v349 = 0;
              *v12 = 1;
            }
            else
            {
              v347 = v346 + 1;
              v348 = *(unsigned __int8 *)(*(_QWORD *)a2 + v346);
              *((_QWORD *)a2 + 1) = v347;
              v349 = v348 != 0;
            }
            *((_BYTE *)v17 + 343) = v349;
            goto LABEL_514;
          case 322:
            v18[1] |= 0x80000000uLL;
            v350 = *((_QWORD *)a2 + 1);
            if (v350 >= *((_QWORD *)a2 + 2))
            {
              v353 = 0;
              *v12 = 1;
            }
            else
            {
              v351 = v350 + 1;
              v352 = *(unsigned __int8 *)(*(_QWORD *)a2 + v350);
              *((_QWORD *)a2 + 1) = v351;
              v353 = v352 != 0;
            }
            *((_BYTE *)v17 + 342) = v353;
            goto LABEL_514;
          default:
            switch((int)v32)
            {
              case 1:
                *v18 |= 0x800000uLL;
                v33 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v33 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_513;
                *((_DWORD *)v17 + 33) = *(_DWORD *)(*(_QWORD *)a2 + v33);
                goto LABEL_942;
              case 2:
                *v18 |= 0x400000uLL;
                v132 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v132 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_513;
                *((_DWORD *)v17 + 32) = *(_DWORD *)(*(_QWORD *)a2 + v132);
                goto LABEL_942;
              case 3:
                *v18 |= 0x1000000uLL;
                v133 = *((_QWORD *)a2 + 1);
                v134 = *((_QWORD *)a2 + 2);
                v135 = *(_QWORD *)a2;
                if (v133 <= 0xFFFFFFFFFFFFFFF5 && v133 + 10 <= v134)
                {
                  v136 = 0;
                  v137 = 0;
                  v138 = 0;
                  do
                  {
                    v139 = v133 + 1;
                    *v10 = v133 + 1;
                    v140 = *(_BYTE *)(v135 + v133);
                    v138 |= (unint64_t)(v140 & 0x7F) << v136;
                    if ((v140 & 0x80) == 0)
                      goto LABEL_1001;
                    v136 += 7;
                    v133 = v139;
                    v25 = v137++ > 8;
                  }
                  while (!v25);
LABEL_603:
                  LODWORD(v138) = 0;
                  goto LABEL_1001;
                }
                v614 = 0;
                v615 = 0;
                v138 = 0;
                if (v134 <= v133)
                  v134 = *((_QWORD *)a2 + 1);
                while (2)
                {
                  if (v134 == v133)
                  {
                    LODWORD(v138) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v616 = v133 + 1;
                    v617 = *(_BYTE *)(v135 + v133);
                    *v10 = v616;
                    v138 |= (unint64_t)(v617 & 0x7F) << v614;
                    if (v617 < 0)
                    {
                      v614 += 7;
                      v133 = v616;
                      v25 = v615++ > 8;
                      if (v25)
                        goto LABEL_603;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v138) = 0;
                  }
                  break;
                }
LABEL_1001:
                *((_DWORD *)v17 + 34) = v138;
                goto LABEL_514;
              case 4:
                *v18 |= 0x10000000000000uLL;
                v141 = *((_QWORD *)a2 + 1);
                v142 = *((_QWORD *)a2 + 2);
                v143 = *(_QWORD *)a2;
                if (v141 <= 0xFFFFFFFFFFFFFFF5 && v141 + 10 <= v142)
                {
                  v144 = 0;
                  v145 = 0;
                  v146 = 0;
                  do
                  {
                    v147 = v141 + 1;
                    *v10 = v141 + 1;
                    v148 = *(_BYTE *)(v143 + v141);
                    v146 |= (unint64_t)(v148 & 0x7F) << v144;
                    if ((v148 & 0x80) == 0)
                      goto LABEL_1004;
                    v144 += 7;
                    v141 = v147;
                    v25 = v145++ > 8;
                  }
                  while (!v25);
LABEL_610:
                  LODWORD(v146) = 0;
                  goto LABEL_1004;
                }
                v618 = 0;
                v619 = 0;
                v146 = 0;
                if (v142 <= v141)
                  v142 = *((_QWORD *)a2 + 1);
                while (2)
                {
                  if (v142 == v141)
                  {
                    LODWORD(v146) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v620 = v141 + 1;
                    v621 = *(_BYTE *)(v143 + v141);
                    *v10 = v620;
                    v146 |= (unint64_t)(v621 & 0x7F) << v618;
                    if (v621 < 0)
                    {
                      v618 += 7;
                      v141 = v620;
                      v25 = v619++ > 8;
                      if (v25)
                        goto LABEL_610;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v146) = 0;
                  }
                  break;
                }
LABEL_1004:
                *((_DWORD *)v17 + 62) = v146;
                goto LABEL_514;
              case 5:
                v18[1] |= 1uLL;
                v149 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v149 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_513;
                *((_DWORD *)v17 + 74) = *(_DWORD *)(*(_QWORD *)a2 + v149);
                goto LABEL_942;
              case 6:
                *v18 |= 0x400000000000000uLL;
                v150 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v150 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_513;
                *((_DWORD *)v17 + 68) = *(_DWORD *)(*(_QWORD *)a2 + v150);
                goto LABEL_942;
              case 7:
                *v18 |= 0x400000000000uLL;
                v151 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v151 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_513;
                *((_DWORD *)v17 + 56) = *(_DWORD *)(*(_QWORD *)a2 + v151);
                goto LABEL_942;
              case 8:
                *v18 |= 0x200000000000uLL;
                v152 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v152 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_513;
                *((_DWORD *)v17 + 55) = *(_DWORD *)(*(_QWORD *)a2 + v152);
                goto LABEL_942;
              case 9:
                *v18 |= 0x200uLL;
                v153 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v153 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_513;
                *((_DWORD *)v17 + 19) = *(_DWORD *)(*(_QWORD *)a2 + v153);
                goto LABEL_942;
              case 10:
                *v18 |= 0x80000000000000uLL;
                v154 = *((_QWORD *)a2 + 1);
                v155 = *((_QWORD *)a2 + 2);
                v156 = *(_QWORD *)a2;
                if (v154 <= 0xFFFFFFFFFFFFFFF5 && v154 + 10 <= v155)
                {
                  v157 = 0;
                  v158 = 0;
                  v159 = 0;
                  do
                  {
                    v160 = v154 + 1;
                    *v10 = v154 + 1;
                    v161 = *(_BYTE *)(v156 + v154);
                    v159 |= (unint64_t)(v161 & 0x7F) << v157;
                    if ((v161 & 0x80) == 0)
                      goto LABEL_1007;
                    v157 += 7;
                    v154 = v160;
                    v25 = v158++ > 8;
                  }
                  while (!v25);
LABEL_617:
                  LODWORD(v159) = 0;
                  goto LABEL_1007;
                }
                v622 = 0;
                v623 = 0;
                v159 = 0;
                if (v155 <= v154)
                  v155 = *((_QWORD *)a2 + 1);
                while (2)
                {
                  if (v155 == v154)
                  {
                    LODWORD(v159) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v624 = v154 + 1;
                    v625 = *(_BYTE *)(v156 + v154);
                    *v10 = v624;
                    v159 |= (unint64_t)(v625 & 0x7F) << v622;
                    if (v625 < 0)
                    {
                      v622 += 7;
                      v154 = v624;
                      v25 = v623++ > 8;
                      if (v25)
                        goto LABEL_617;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v159) = 0;
                  }
                  break;
                }
LABEL_1007:
                *((_DWORD *)v17 + 65) = v159;
                goto LABEL_514;
              case 11:
                *v18 |= 0x2000000uLL;
                v162 = *((_QWORD *)a2 + 1);
                v163 = *((_QWORD *)a2 + 2);
                v164 = *(_QWORD *)a2;
                if (v162 <= 0xFFFFFFFFFFFFFFF5 && v162 + 10 <= v163)
                {
                  v165 = 0;
                  v166 = 0;
                  v167 = 0;
                  do
                  {
                    v168 = v162 + 1;
                    *v10 = v162 + 1;
                    v169 = *(_BYTE *)(v164 + v162);
                    v167 |= (unint64_t)(v169 & 0x7F) << v165;
                    if ((v169 & 0x80) == 0)
                      goto LABEL_1010;
                    v165 += 7;
                    v162 = v168;
                    v25 = v166++ > 8;
                  }
                  while (!v25);
LABEL_624:
                  LODWORD(v167) = 0;
                  goto LABEL_1010;
                }
                v626 = 0;
                v627 = 0;
                v167 = 0;
                if (v163 <= v162)
                  v163 = *((_QWORD *)a2 + 1);
                while (2)
                {
                  if (v163 == v162)
                  {
                    LODWORD(v167) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v628 = v162 + 1;
                    v629 = *(_BYTE *)(v164 + v162);
                    *v10 = v628;
                    v167 |= (unint64_t)(v629 & 0x7F) << v626;
                    if (v629 < 0)
                    {
                      v626 += 7;
                      v162 = v628;
                      v25 = v627++ > 8;
                      if (v25)
                        goto LABEL_624;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v167) = 0;
                  }
                  break;
                }
LABEL_1010:
                *((_DWORD *)v17 + 35) = v167;
                goto LABEL_514;
              case 12:
                *v18 |= 0x10000uLL;
                v170 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v170 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_513;
                *((_DWORD *)v17 + 26) = *(_DWORD *)(*(_QWORD *)a2 + v170);
                goto LABEL_942;
              case 13:
                v18[1] |= 8uLL;
                v171 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v171 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_513;
                *((_DWORD *)v17 + 77) = *(_DWORD *)(*(_QWORD *)a2 + v171);
                goto LABEL_942;
              case 14:
                v18[1] |= 0x10uLL;
                v172 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v172 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_513;
                *((_DWORD *)v17 + 78) = *(_DWORD *)(*(_QWORD *)a2 + v172);
                goto LABEL_942;
              case 15:
                *v18 |= 0x80000000000uLL;
                v173 = *((_QWORD *)a2 + 1);
                v174 = *((_QWORD *)a2 + 2);
                v175 = *(_QWORD *)a2;
                if (v173 <= 0xFFFFFFFFFFFFFFF5 && v173 + 10 <= v174)
                {
                  v176 = 0;
                  v177 = 0;
                  v178 = 0;
                  do
                  {
                    v179 = v173 + 1;
                    *v10 = v173 + 1;
                    v180 = *(_BYTE *)(v175 + v173);
                    v178 |= (unint64_t)(v180 & 0x7F) << v176;
                    if ((v180 & 0x80) == 0)
                      goto LABEL_1013;
                    v176 += 7;
                    v173 = v179;
                    v25 = v177++ > 8;
                  }
                  while (!v25);
LABEL_631:
                  LODWORD(v178) = 0;
                  goto LABEL_1013;
                }
                v630 = 0;
                v631 = 0;
                v178 = 0;
                if (v174 <= v173)
                  v174 = *((_QWORD *)a2 + 1);
                while (2)
                {
                  if (v174 == v173)
                  {
                    LODWORD(v178) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v632 = v173 + 1;
                    v633 = *(_BYTE *)(v175 + v173);
                    *v10 = v632;
                    v178 |= (unint64_t)(v633 & 0x7F) << v630;
                    if (v633 < 0)
                    {
                      v630 += 7;
                      v173 = v632;
                      v25 = v631++ > 8;
                      if (v25)
                        goto LABEL_631;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v178) = 0;
                  }
                  break;
                }
LABEL_1013:
                *((_DWORD *)v17 + 53) = v178;
                goto LABEL_514;
              case 16:
                *v18 |= 0x20000000000uLL;
                v181 = *((_QWORD *)a2 + 1);
                v182 = *((_QWORD *)a2 + 2);
                v183 = *(_QWORD *)a2;
                if (v181 <= 0xFFFFFFFFFFFFFFF5 && v181 + 10 <= v182)
                {
                  v184 = 0;
                  v185 = 0;
                  v186 = 0;
                  do
                  {
                    v187 = v181 + 1;
                    *v10 = v181 + 1;
                    v188 = *(_BYTE *)(v183 + v181);
                    v186 |= (unint64_t)(v188 & 0x7F) << v184;
                    if ((v188 & 0x80) == 0)
                      goto LABEL_1016;
                    v184 += 7;
                    v181 = v187;
                    v25 = v185++ > 8;
                  }
                  while (!v25);
LABEL_638:
                  LODWORD(v186) = 0;
                  goto LABEL_1016;
                }
                v634 = 0;
                v635 = 0;
                v186 = 0;
                if (v182 <= v181)
                  v182 = *((_QWORD *)a2 + 1);
                while (2)
                {
                  if (v182 == v181)
                  {
                    LODWORD(v186) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v636 = v181 + 1;
                    v637 = *(_BYTE *)(v183 + v181);
                    *v10 = v636;
                    v186 |= (unint64_t)(v637 & 0x7F) << v634;
                    if (v637 < 0)
                    {
                      v634 += 7;
                      v181 = v636;
                      v25 = v635++ > 8;
                      if (v25)
                        goto LABEL_638;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v186) = 0;
                  }
                  break;
                }
LABEL_1016:
                *((_DWORD *)v17 + 51) = v186;
                goto LABEL_514;
              case 17:
                *v18 |= 0x4000000000000uLL;
                v189 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v189 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_513;
                *((_DWORD *)v17 + 60) = *(_DWORD *)(*(_QWORD *)a2 + v189);
                goto LABEL_942;
              case 18:
                *v18 |= 0x1000000000000000uLL;
                v190 = *((_QWORD *)a2 + 1);
                v191 = *((_QWORD *)a2 + 2);
                v192 = *(_QWORD *)a2;
                if (v190 <= 0xFFFFFFFFFFFFFFF5 && v190 + 10 <= v191)
                {
                  v193 = 0;
                  v194 = 0;
                  v195 = 0;
                  do
                  {
                    v196 = v190 + 1;
                    *v10 = v190 + 1;
                    v197 = *(_BYTE *)(v192 + v190);
                    v195 |= (unint64_t)(v197 & 0x7F) << v193;
                    if ((v197 & 0x80) == 0)
                      goto LABEL_1019;
                    v193 += 7;
                    v190 = v196;
                    v25 = v194++ > 8;
                  }
                  while (!v25);
LABEL_645:
                  LODWORD(v195) = 0;
                  goto LABEL_1019;
                }
                v638 = 0;
                v639 = 0;
                v195 = 0;
                if (v191 <= v190)
                  v191 = *((_QWORD *)a2 + 1);
                while (2)
                {
                  if (v191 == v190)
                  {
                    LODWORD(v195) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v640 = v190 + 1;
                    v641 = *(_BYTE *)(v192 + v190);
                    *v10 = v640;
                    v195 |= (unint64_t)(v641 & 0x7F) << v638;
                    if (v641 < 0)
                    {
                      v638 += 7;
                      v190 = v640;
                      v25 = v639++ > 8;
                      if (v25)
                        goto LABEL_645;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v195) = 0;
                  }
                  break;
                }
LABEL_1019:
                *((_DWORD *)v17 + 70) = v195;
                goto LABEL_514;
              case 19:
                v18[1] |= 2uLL;
                v198 = *((_QWORD *)a2 + 1);
                v199 = *((_QWORD *)a2 + 2);
                v200 = *(_QWORD *)a2;
                if (v198 <= 0xFFFFFFFFFFFFFFF5 && v198 + 10 <= v199)
                {
                  v201 = 0;
                  v202 = 0;
                  v203 = 0;
                  do
                  {
                    v204 = v198 + 1;
                    *v10 = v198 + 1;
                    v205 = *(_BYTE *)(v200 + v198);
                    v203 |= (unint64_t)(v205 & 0x7F) << v201;
                    if ((v205 & 0x80) == 0)
                      goto LABEL_1022;
                    v201 += 7;
                    v198 = v204;
                    v25 = v202++ > 8;
                  }
                  while (!v25);
LABEL_652:
                  LODWORD(v203) = 0;
                  goto LABEL_1022;
                }
                v642 = 0;
                v643 = 0;
                v203 = 0;
                if (v199 <= v198)
                  v199 = *((_QWORD *)a2 + 1);
                while (2)
                {
                  if (v199 == v198)
                  {
                    LODWORD(v203) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v644 = v198 + 1;
                    v645 = *(_BYTE *)(v200 + v198);
                    *v10 = v644;
                    v203 |= (unint64_t)(v645 & 0x7F) << v642;
                    if (v645 < 0)
                    {
                      v642 += 7;
                      v198 = v644;
                      v25 = v643++ > 8;
                      if (v25)
                        goto LABEL_652;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v203) = 0;
                  }
                  break;
                }
LABEL_1022:
                *((_DWORD *)v17 + 75) = v203;
                goto LABEL_514;
              default:
                switch((int)v32)
                {
                  case 'e':
                    *v18 |= 0x80uLL;
                    v47 = *((_QWORD *)a2 + 1);
                    v48 = *((_QWORD *)a2 + 2);
                    v49 = *(_QWORD *)a2;
                    if (v47 <= 0xFFFFFFFFFFFFFFF5 && v47 + 10 <= v48)
                    {
                      v50 = 0;
                      v51 = 0;
                      v52 = 0;
                      v12 = v766;
                      v17 = this;
                      do
                      {
                        v53 = v47 + 1;
                        *v10 = v47 + 1;
                        v54 = *(_BYTE *)(v49 + v47);
                        v52 |= (unint64_t)(v54 & 0x7F) << v50;
                        if ((v54 & 0x80) == 0)
                          goto LABEL_995;
                        v50 += 7;
                        v47 = v53;
                        v25 = v51++ > 8;
                      }
                      while (!v25);
LABEL_586:
                      v52 = 0;
                      goto LABEL_995;
                    }
                    v606 = 0;
                    v607 = 0;
                    v52 = 0;
                    if (v48 <= v47)
                      v48 = *((_QWORD *)a2 + 1);
                    v12 = v766;
                    v17 = this;
                    while (2)
                    {
                      if (v48 == v47)
                      {
                        v52 = 0;
                        *v766 = 1;
                      }
                      else
                      {
                        v608 = v47 + 1;
                        v609 = *(_BYTE *)(v49 + v47);
                        *v10 = v608;
                        v52 |= (unint64_t)(v609 & 0x7F) << v606;
                        if (v609 < 0)
                        {
                          v606 += 7;
                          v47 = v608;
                          v25 = v607++ > 8;
                          if (v25)
                            goto LABEL_586;
                          continue;
                        }
                        if (*v766)
                          v52 = 0;
                      }
                      break;
                    }
LABEL_995:
                    *((_QWORD *)v17 + 8) = v52;
                    goto LABEL_514;
                  case 'f':
                    *v18 |= 1uLL;
                    v354 = *((_QWORD *)a2 + 1);
                    v355 = *((_QWORD *)a2 + 2);
                    v356 = *(_QWORD *)a2;
                    if (v354 <= 0xFFFFFFFFFFFFFFF5 && v354 + 10 <= v355)
                    {
                      v357 = 0;
                      v358 = 0;
                      v359 = 0;
                      v12 = v766;
                      v17 = this;
                      do
                      {
                        v360 = v354 + 1;
                        *v10 = v354 + 1;
                        v361 = *(_BYTE *)(v356 + v354);
                        v359 |= (unint64_t)(v361 & 0x7F) << v357;
                        if ((v361 & 0x80) == 0)
                          goto LABEL_1049;
                        v357 += 7;
                        v354 = v360;
                        v25 = v358++ > 8;
                      }
                      while (!v25);
LABEL_758:
                      v359 = 0;
                      goto LABEL_1049;
                    }
                    v678 = 0;
                    v679 = 0;
                    v359 = 0;
                    if (v355 <= v354)
                      v355 = *((_QWORD *)a2 + 1);
                    v12 = v766;
                    v17 = this;
                    break;
                  case 'g':
                    v18[1] |= 0x40uLL;
                    v362 = *((_QWORD *)a2 + 1);
                    if (v362 >= *((_QWORD *)a2 + 2))
                    {
                      v365 = 0;
                      v12 = v766;
                      v17 = this;
                      *v766 = 1;
                    }
                    else
                    {
                      v363 = v362 + 1;
                      v364 = *(unsigned __int8 *)(*(_QWORD *)a2 + v362);
                      *((_QWORD *)a2 + 1) = v363;
                      v365 = v364 != 0;
                      v12 = v766;
                      v17 = this;
                    }
                    *((_BYTE *)v17 + 317) = v365;
                    goto LABEL_514;
                  case 'h':
                    v18[1] |= 0x80uLL;
                    v366 = *((_QWORD *)a2 + 1);
                    if (v366 >= *((_QWORD *)a2 + 2))
                    {
                      v369 = 0;
                      v12 = v766;
                      v17 = this;
                      *v766 = 1;
                    }
                    else
                    {
                      v367 = v366 + 1;
                      v368 = *(unsigned __int8 *)(*(_QWORD *)a2 + v366);
                      *((_QWORD *)a2 + 1) = v367;
                      v369 = v368 != 0;
                      v12 = v766;
                      v17 = this;
                    }
                    *((_BYTE *)v17 + 318) = v369;
                    goto LABEL_514;
                  case 'i':
                    v18[1] |= 0x8000uLL;
                    v370 = *((_QWORD *)a2 + 1);
                    if (v370 >= *((_QWORD *)a2 + 2))
                    {
                      v373 = 0;
                      v12 = v766;
                      v17 = this;
                      *v766 = 1;
                    }
                    else
                    {
                      v371 = v370 + 1;
                      v372 = *(unsigned __int8 *)(*(_QWORD *)a2 + v370);
                      *((_QWORD *)a2 + 1) = v371;
                      v373 = v372 != 0;
                      v12 = v766;
                      v17 = this;
                    }
                    *((_BYTE *)v17 + 326) = v373;
                    goto LABEL_514;
                  case 'j':
                    v18[1] |= 0x10000uLL;
                    v374 = *((_QWORD *)a2 + 1);
                    if (v374 >= *((_QWORD *)a2 + 2))
                    {
                      v377 = 0;
                      v12 = v766;
                      v17 = this;
                      *v766 = 1;
                    }
                    else
                    {
                      v375 = v374 + 1;
                      v376 = *(unsigned __int8 *)(*(_QWORD *)a2 + v374);
                      *((_QWORD *)a2 + 1) = v375;
                      v377 = v376 != 0;
                      v12 = v766;
                      v17 = this;
                    }
                    *((_BYTE *)v17 + 327) = v377;
                    goto LABEL_514;
                  case 'k':
                    v18[1] |= 0x8000000uLL;
                    v378 = *((_QWORD *)a2 + 1);
                    if (v378 >= *((_QWORD *)a2 + 2))
                    {
                      v381 = 0;
                      v12 = v766;
                      v17 = this;
                      *v766 = 1;
                    }
                    else
                    {
                      v379 = v378 + 1;
                      v380 = *(unsigned __int8 *)(*(_QWORD *)a2 + v378);
                      *((_QWORD *)a2 + 1) = v379;
                      v381 = v380 != 0;
                      v12 = v766;
                      v17 = this;
                    }
                    *((_BYTE *)v17 + 338) = v381;
                    goto LABEL_514;
                  case 'l':
                    v18[1] |= 0x2000000uLL;
                    v382 = *((_QWORD *)a2 + 1);
                    if (v382 >= *((_QWORD *)a2 + 2))
                    {
                      v385 = 0;
                      v12 = v766;
                      v17 = this;
                      *v766 = 1;
                    }
                    else
                    {
                      v383 = v382 + 1;
                      v384 = *(unsigned __int8 *)(*(_QWORD *)a2 + v382);
                      *((_QWORD *)a2 + 1) = v383;
                      v385 = v384 != 0;
                      v12 = v766;
                      v17 = this;
                    }
                    *((_BYTE *)v17 + 336) = v385;
                    goto LABEL_514;
                  case 'm':
                    v18[1] |= 0x1000uLL;
                    v386 = *((_QWORD *)a2 + 1);
                    if (v386 >= *((_QWORD *)a2 + 2))
                    {
                      v389 = 0;
                      v12 = v766;
                      v17 = this;
                      *v766 = 1;
                    }
                    else
                    {
                      v387 = v386 + 1;
                      v388 = *(unsigned __int8 *)(*(_QWORD *)a2 + v386);
                      *((_QWORD *)a2 + 1) = v387;
                      v389 = v388 != 0;
                      v12 = v766;
                      v17 = this;
                    }
                    *((_BYTE *)v17 + 323) = v389;
                    goto LABEL_514;
                  case 'n':
                    v18[1] |= 0x10000000uLL;
                    v390 = *((_QWORD *)a2 + 1);
                    if (v390 >= *((_QWORD *)a2 + 2))
                    {
                      v393 = 0;
                      v12 = v766;
                      v17 = this;
                      *v766 = 1;
                    }
                    else
                    {
                      v391 = v390 + 1;
                      v392 = *(unsigned __int8 *)(*(_QWORD *)a2 + v390);
                      *((_QWORD *)a2 + 1) = v391;
                      v393 = v392 != 0;
                      v12 = v766;
                      v17 = this;
                    }
                    *((_BYTE *)v17 + 339) = v393;
                    goto LABEL_514;
                  case 'o':
                    v18[1] |= 0x20000000uLL;
                    v394 = *((_QWORD *)a2 + 1);
                    if (v394 >= *((_QWORD *)a2 + 2))
                    {
                      v397 = 0;
                      v12 = v766;
                      v17 = this;
                      *v766 = 1;
                    }
                    else
                    {
                      v395 = v394 + 1;
                      v396 = *(unsigned __int8 *)(*(_QWORD *)a2 + v394);
                      *((_QWORD *)a2 + 1) = v395;
                      v397 = v396 != 0;
                      v12 = v766;
                      v17 = this;
                    }
                    *((_BYTE *)v17 + 340) = v397;
                    goto LABEL_514;
                  case 'p':
                    v18[1] |= 0x200uLL;
                    v398 = *((_QWORD *)a2 + 1);
                    if (v398 >= *((_QWORD *)a2 + 2))
                    {
                      v401 = 0;
                      v12 = v766;
                      v17 = this;
                      *v766 = 1;
                    }
                    else
                    {
                      v399 = v398 + 1;
                      v400 = *(unsigned __int8 *)(*(_QWORD *)a2 + v398);
                      *((_QWORD *)a2 + 1) = v399;
                      v401 = v400 != 0;
                      v12 = v766;
                      v17 = this;
                    }
                    *((_BYTE *)v17 + 320) = v401;
                    goto LABEL_514;
                  case 'q':
                    v18[1] |= 0x1000000uLL;
                    v402 = *((_QWORD *)a2 + 1);
                    if (v402 >= *((_QWORD *)a2 + 2))
                    {
                      v405 = 0;
                      v12 = v766;
                      v17 = this;
                      *v766 = 1;
                    }
                    else
                    {
                      v403 = v402 + 1;
                      v404 = *(unsigned __int8 *)(*(_QWORD *)a2 + v402);
                      *((_QWORD *)a2 + 1) = v403;
                      v405 = v404 != 0;
                      v12 = v766;
                      v17 = this;
                    }
                    *((_BYTE *)v17 + 335) = v405;
                    goto LABEL_514;
                  default:
                    goto LABEL_141;
                }
                break;
            }
            break;
        }
        while (1)
        {
          if (v355 == v354)
          {
            v359 = 0;
            *v766 = 1;
            goto LABEL_1049;
          }
          v680 = v354 + 1;
          v681 = *(_BYTE *)(v356 + v354);
          *v10 = v680;
          v359 |= (unint64_t)(v681 & 0x7F) << v678;
          if ((v681 & 0x80) == 0)
            break;
          v678 += 7;
          v354 = v680;
          v25 = v679++ > 8;
          if (v25)
            goto LABEL_758;
        }
        if (*v766)
          v359 = 0;
LABEL_1049:
        *((_QWORD *)v17 + 1) = v359;
      }
LABEL_514:
      v9 = *((_QWORD *)a2 + 1);
      v13 = *((_QWORD *)a2 + 2);
      v11 = *((unsigned __int8 *)a2 + 24);
    }
    while (v9 < v13 && v11 == 0);
  }
  return v11 == 0;
}

uint64_t CMMsl::KappaSevereCrashResult::writeTo(uint64_t this, PB::Writer *a2)
{
  float *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = (float *)this;
  v4 = (uint64_t *)(this + 356);
  v5 = *(_QWORD *)(this + 356);
  if ((v5 & 0x800000) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 132));
    v5 = *v4;
    v6 = v4[1];
    if ((*v4 & 0x400000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = *(_QWORD *)(this + 364);
  if ((v5 & 0x400000) != 0)
  {
LABEL_5:
    this = PB::Writer::write(a2, v3[32]);
    v5 = *v4;
    v6 = v4[1];
  }
LABEL_6:
  if ((v5 & 0x1000000) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v5 = *v4;
    v6 = v4[1];
    if ((*v4 & 0x10000000000000) == 0)
    {
LABEL_8:
      if ((v6 & 1) == 0)
        goto LABEL_9;
      goto LABEL_115;
    }
  }
  else if ((v5 & 0x10000000000000) == 0)
  {
    goto LABEL_8;
  }
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 1) == 0)
  {
LABEL_9:
    if ((v5 & 0x400000000000000) == 0)
      goto LABEL_10;
    goto LABEL_116;
  }
LABEL_115:
  this = PB::Writer::write(a2, v3[74]);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x400000000000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x400000000000) == 0)
      goto LABEL_11;
    goto LABEL_117;
  }
LABEL_116:
  this = PB::Writer::write(a2, v3[68]);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x400000000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x200000000000) == 0)
      goto LABEL_12;
    goto LABEL_118;
  }
LABEL_117:
  this = PB::Writer::write(a2, v3[56]);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x200000000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_119;
  }
LABEL_118:
  this = PB::Writer::write(a2, v3[55]);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x200) == 0)
  {
LABEL_13:
    if ((v5 & 0x80000000000000) == 0)
      goto LABEL_14;
    goto LABEL_120;
  }
LABEL_119:
  this = PB::Writer::write(a2, v3[19]);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x80000000000000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_15;
    goto LABEL_121;
  }
LABEL_120:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v5 & 0x10000) == 0)
      goto LABEL_16;
    goto LABEL_122;
  }
LABEL_121:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x10000) == 0)
  {
LABEL_16:
    if ((v6 & 8) == 0)
      goto LABEL_17;
    goto LABEL_123;
  }
LABEL_122:
  this = PB::Writer::write(a2, v3[26]);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 8) == 0)
  {
LABEL_17:
    if ((v6 & 0x10) == 0)
      goto LABEL_18;
    goto LABEL_124;
  }
LABEL_123:
  this = PB::Writer::write(a2, v3[77]);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x10) == 0)
  {
LABEL_18:
    if ((v5 & 0x80000000000) == 0)
      goto LABEL_19;
    goto LABEL_125;
  }
LABEL_124:
  this = PB::Writer::write(a2, v3[78]);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x80000000000) == 0)
  {
LABEL_19:
    if ((v5 & 0x20000000000) == 0)
      goto LABEL_20;
    goto LABEL_126;
  }
LABEL_125:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x20000000000) == 0)
  {
LABEL_20:
    if ((v5 & 0x4000000000000) == 0)
      goto LABEL_21;
    goto LABEL_127;
  }
LABEL_126:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x4000000000000) == 0)
  {
LABEL_21:
    if ((v5 & 0x1000000000000000) == 0)
      goto LABEL_22;
    goto LABEL_128;
  }
LABEL_127:
  this = PB::Writer::write(a2, v3[60]);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x1000000000000000) == 0)
  {
LABEL_22:
    if ((v6 & 2) == 0)
      goto LABEL_23;
    goto LABEL_129;
  }
LABEL_128:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 2) == 0)
  {
LABEL_23:
    if ((v5 & 0x80) == 0)
      goto LABEL_24;
    goto LABEL_130;
  }
LABEL_129:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x80) == 0)
  {
LABEL_24:
    if ((v5 & 1) == 0)
      goto LABEL_25;
    goto LABEL_131;
  }
LABEL_130:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 1) == 0)
  {
LABEL_25:
    if ((v6 & 0x40) == 0)
      goto LABEL_26;
    goto LABEL_132;
  }
LABEL_131:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x40) == 0)
  {
LABEL_26:
    if ((v6 & 0x80) == 0)
      goto LABEL_27;
    goto LABEL_133;
  }
LABEL_132:
  this = PB::Writer::write(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x80) == 0)
  {
LABEL_27:
    if ((v6 & 0x8000) == 0)
      goto LABEL_28;
    goto LABEL_134;
  }
LABEL_133:
  this = PB::Writer::write(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x8000) == 0)
  {
LABEL_28:
    if ((v6 & 0x10000) == 0)
      goto LABEL_29;
    goto LABEL_135;
  }
LABEL_134:
  this = PB::Writer::write(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x10000) == 0)
  {
LABEL_29:
    if ((v6 & 0x8000000) == 0)
      goto LABEL_30;
    goto LABEL_136;
  }
LABEL_135:
  this = PB::Writer::write(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x8000000) == 0)
  {
LABEL_30:
    if ((v6 & 0x2000000) == 0)
      goto LABEL_31;
    goto LABEL_137;
  }
LABEL_136:
  this = PB::Writer::write(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x2000000) == 0)
  {
LABEL_31:
    if ((v6 & 0x1000) == 0)
      goto LABEL_32;
    goto LABEL_138;
  }
LABEL_137:
  this = PB::Writer::write(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x1000) == 0)
  {
LABEL_32:
    if ((v6 & 0x10000000) == 0)
      goto LABEL_33;
    goto LABEL_139;
  }
LABEL_138:
  this = PB::Writer::write(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x10000000) == 0)
  {
LABEL_33:
    if ((v6 & 0x20000000) == 0)
      goto LABEL_34;
    goto LABEL_140;
  }
LABEL_139:
  this = PB::Writer::write(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x20000000) == 0)
  {
LABEL_34:
    if ((v6 & 0x200) == 0)
      goto LABEL_35;
    goto LABEL_141;
  }
LABEL_140:
  this = PB::Writer::write(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x200) == 0)
  {
LABEL_35:
    if ((v6 & 0x1000000) == 0)
      goto LABEL_36;
    goto LABEL_142;
  }
LABEL_141:
  this = PB::Writer::write(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x1000000) == 0)
  {
LABEL_36:
    if ((v6 & 0x2000) == 0)
      goto LABEL_37;
    goto LABEL_143;
  }
LABEL_142:
  this = PB::Writer::write(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x2000) == 0)
  {
LABEL_37:
    if ((v6 & 0x4000000) == 0)
      goto LABEL_38;
    goto LABEL_144;
  }
LABEL_143:
  this = PB::Writer::write(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x4000000) == 0)
  {
LABEL_38:
    if ((v6 & 0x80000) == 0)
      goto LABEL_39;
    goto LABEL_145;
  }
LABEL_144:
  this = PB::Writer::write(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x80000) == 0)
  {
LABEL_39:
    if ((v6 & 0x2000000000) == 0)
      goto LABEL_40;
    goto LABEL_146;
  }
LABEL_145:
  this = PB::Writer::write(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x2000000000) == 0)
  {
LABEL_40:
    if ((v6 & 0x200000000) == 0)
      goto LABEL_41;
    goto LABEL_147;
  }
LABEL_146:
  this = PB::Writer::write(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x200000000) == 0)
  {
LABEL_41:
    if ((v6 & 0x4000000000) == 0)
      goto LABEL_42;
    goto LABEL_148;
  }
LABEL_147:
  this = PB::Writer::write(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x4000000000) == 0)
  {
LABEL_42:
    if ((v6 & 0x400000000) == 0)
      goto LABEL_43;
    goto LABEL_149;
  }
LABEL_148:
  this = PB::Writer::write(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x400000000) == 0)
  {
LABEL_43:
    if ((v6 & 0x40000000) == 0)
      goto LABEL_44;
    goto LABEL_150;
  }
LABEL_149:
  this = PB::Writer::write(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x40000000) == 0)
  {
LABEL_44:
    if ((v6 & 0x800) == 0)
      goto LABEL_45;
    goto LABEL_151;
  }
LABEL_150:
  this = PB::Writer::write(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x800) == 0)
  {
LABEL_45:
    if ((v6 & 0x100000) == 0)
      goto LABEL_46;
    goto LABEL_152;
  }
LABEL_151:
  this = PB::Writer::write(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x100000) == 0)
  {
LABEL_46:
    if ((v6 & 0x8000000000) == 0)
      goto LABEL_47;
    goto LABEL_153;
  }
LABEL_152:
  this = PB::Writer::write(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x8000000000) == 0)
  {
LABEL_47:
    if ((v6 & 0x800000000) == 0)
      goto LABEL_48;
    goto LABEL_154;
  }
LABEL_153:
  this = PB::Writer::write(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x800000000) == 0)
  {
LABEL_48:
    if ((v5 & 0x20000) == 0)
      goto LABEL_49;
    goto LABEL_155;
  }
LABEL_154:
  this = PB::Writer::write(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x20000) == 0)
  {
LABEL_49:
    if ((v6 & 0x400000) == 0)
      goto LABEL_50;
    goto LABEL_156;
  }
LABEL_155:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x400000) == 0)
  {
LABEL_50:
    if ((v6 & 0x800000) == 0)
      goto LABEL_51;
    goto LABEL_157;
  }
LABEL_156:
  this = PB::Writer::write(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x800000) == 0)
  {
LABEL_51:
    if ((v6 & 0x20) == 0)
      goto LABEL_52;
    goto LABEL_158;
  }
LABEL_157:
  this = PB::Writer::write(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x20) == 0)
  {
LABEL_52:
    if ((v5 & 0x40000) == 0)
      goto LABEL_53;
    goto LABEL_159;
  }
LABEL_158:
  this = PB::Writer::write(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x40000) == 0)
  {
LABEL_53:
    if ((v6 & 0x40000000000) == 0)
      goto LABEL_54;
    goto LABEL_160;
  }
LABEL_159:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x40000000000) == 0)
  {
LABEL_54:
    if ((v6 & 0x10000000000) == 0)
      goto LABEL_55;
    goto LABEL_161;
  }
LABEL_160:
  this = PB::Writer::write(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x10000000000) == 0)
  {
LABEL_55:
    if ((v6 & 0x20000000000) == 0)
      goto LABEL_56;
    goto LABEL_162;
  }
LABEL_161:
  this = PB::Writer::write(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x20000000000) == 0)
  {
LABEL_56:
    if ((v6 & 0x100000000) == 0)
      goto LABEL_57;
    goto LABEL_163;
  }
LABEL_162:
  this = PB::Writer::write(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x100000000) == 0)
  {
LABEL_57:
    if ((v6 & 0x80000000) == 0)
      goto LABEL_58;
    goto LABEL_164;
  }
LABEL_163:
  this = PB::Writer::write(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x80000000) == 0)
  {
LABEL_58:
    if ((v5 & 0x20000000000000) == 0)
      goto LABEL_59;
    goto LABEL_165;
  }
LABEL_164:
  this = PB::Writer::write(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x20000000000000) == 0)
  {
LABEL_59:
    if ((v5 & 0x40000000000000) == 0)
      goto LABEL_60;
    goto LABEL_166;
  }
LABEL_165:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x40000000000000) == 0)
  {
LABEL_60:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_61;
    goto LABEL_167;
  }
LABEL_166:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x4000000) == 0)
  {
LABEL_61:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_62;
    goto LABEL_168;
  }
LABEL_167:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x8000000) == 0)
  {
LABEL_62:
    if ((v6 & 0x20000) == 0)
      goto LABEL_63;
    goto LABEL_169;
  }
LABEL_168:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x20000) == 0)
  {
LABEL_63:
    if ((v6 & 0x4000) == 0)
      goto LABEL_64;
    goto LABEL_170;
  }
LABEL_169:
  this = PB::Writer::write(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x4000) == 0)
  {
LABEL_64:
    if ((v5 & 0x2000000000) == 0)
      goto LABEL_65;
    goto LABEL_171;
  }
LABEL_170:
  this = PB::Writer::write(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x2000000000) == 0)
  {
LABEL_65:
    if ((v5 & 0x80000) == 0)
      goto LABEL_66;
    goto LABEL_172;
  }
LABEL_171:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x80000) == 0)
  {
LABEL_66:
    if ((v5 & 0x1000000000) == 0)
      goto LABEL_67;
    goto LABEL_173;
  }
LABEL_172:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x1000000000) == 0)
  {
LABEL_67:
    if ((v5 & 0x4000000000000000) == 0)
      goto LABEL_68;
    goto LABEL_174;
  }
LABEL_173:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x4000000000000000) == 0)
  {
LABEL_68:
    if ((v5 & 0x8000000000000000) == 0)
      goto LABEL_69;
    goto LABEL_175;
  }
LABEL_174:
  this = PB::Writer::write(a2, v3[72]);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x8000000000000000) == 0)
  {
LABEL_69:
    if ((v5 & 0x200000000000000) == 0)
      goto LABEL_70;
    goto LABEL_176;
  }
LABEL_175:
  this = PB::Writer::write(a2, v3[73]);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x200000000000000) == 0)
  {
LABEL_70:
    if ((v5 & 0x800000000000000) == 0)
      goto LABEL_71;
    goto LABEL_177;
  }
LABEL_176:
  this = PB::Writer::write(a2, v3[67]);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x800000000000000) == 0)
  {
LABEL_71:
    if ((v5 & 0x2000000000000000) == 0)
      goto LABEL_72;
    goto LABEL_178;
  }
LABEL_177:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x2000000000000000) == 0)
  {
LABEL_72:
    if ((v6 & 0x400) == 0)
      goto LABEL_73;
    goto LABEL_179;
  }
LABEL_178:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x400) == 0)
  {
LABEL_73:
    if ((v5 & 0x4000) == 0)
      goto LABEL_74;
    goto LABEL_180;
  }
LABEL_179:
  this = PB::Writer::write(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x4000) == 0)
  {
LABEL_74:
    if ((v5 & 0x1000) == 0)
      goto LABEL_75;
    goto LABEL_181;
  }
LABEL_180:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x1000) == 0)
  {
LABEL_75:
    if ((v5 & 0x100000000000) == 0)
      goto LABEL_76;
    goto LABEL_182;
  }
LABEL_181:
  this = PB::Writer::write(a2, v3[22]);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x100000000000) == 0)
  {
LABEL_76:
    if ((v5 & 0x100000000000000) == 0)
      goto LABEL_77;
    goto LABEL_183;
  }
LABEL_182:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x100000000000000) == 0)
  {
LABEL_77:
    if ((v5 & 0x40) == 0)
      goto LABEL_78;
    goto LABEL_184;
  }
LABEL_183:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x40) == 0)
  {
LABEL_78:
    if ((v5 & 0x800000000000) == 0)
      goto LABEL_79;
    goto LABEL_185;
  }
LABEL_184:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x800000000000) == 0)
  {
LABEL_79:
    if ((v5 & 0x1000000000000) == 0)
      goto LABEL_80;
    goto LABEL_186;
  }
LABEL_185:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x1000000000000) == 0)
  {
LABEL_80:
    if ((v5 & 0x100000) == 0)
      goto LABEL_81;
    goto LABEL_187;
  }
LABEL_186:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x100000) == 0)
  {
LABEL_81:
    if ((v5 & 0x400) == 0)
      goto LABEL_82;
    goto LABEL_188;
  }
LABEL_187:
  this = PB::Writer::write(a2, v3[30]);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x400) == 0)
  {
LABEL_82:
    if ((v5 & 0x200000) == 0)
      goto LABEL_83;
    goto LABEL_189;
  }
LABEL_188:
  this = PB::Writer::write(a2, v3[20]);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x200000) == 0)
  {
LABEL_83:
    if ((v5 & 0x800) == 0)
      goto LABEL_84;
    goto LABEL_190;
  }
LABEL_189:
  this = PB::Writer::write(a2, v3[31]);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x800) == 0)
  {
LABEL_84:
    if ((v5 & 0x100) == 0)
      goto LABEL_85;
    goto LABEL_191;
  }
LABEL_190:
  this = PB::Writer::write(a2, v3[21]);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x100) == 0)
  {
LABEL_85:
    if ((v6 & 0x200000) == 0)
      goto LABEL_86;
    goto LABEL_192;
  }
LABEL_191:
  this = PB::Writer::write(a2, v3[18]);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x200000) == 0)
  {
LABEL_86:
    if ((v6 & 4) == 0)
      goto LABEL_87;
    goto LABEL_193;
  }
LABEL_192:
  this = PB::Writer::write(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 4) == 0)
  {
LABEL_87:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_88;
    goto LABEL_194;
  }
LABEL_193:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x10000000) == 0)
  {
LABEL_88:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_89;
    goto LABEL_195;
  }
LABEL_194:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x40000000) == 0)
  {
LABEL_89:
    if ((v6 & 0x1000000000) == 0)
      goto LABEL_90;
    goto LABEL_196;
  }
LABEL_195:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x1000000000) == 0)
  {
LABEL_90:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_91;
    goto LABEL_197;
  }
LABEL_196:
  this = PB::Writer::write(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x80000000) == 0)
  {
LABEL_91:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_92;
    goto LABEL_198;
  }
LABEL_197:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x20000000) == 0)
  {
LABEL_92:
    if ((v5 & 0x8000000000000) == 0)
      goto LABEL_93;
    goto LABEL_199;
  }
LABEL_198:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x8000000000000) == 0)
  {
LABEL_93:
    if ((v5 & 0x4000000000) == 0)
      goto LABEL_94;
    goto LABEL_200;
  }
LABEL_199:
  this = PB::Writer::write(a2, v3[61]);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x4000000000) == 0)
  {
LABEL_94:
    if ((v5 & 0x8000000000) == 0)
      goto LABEL_95;
    goto LABEL_201;
  }
LABEL_200:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x8000000000) == 0)
  {
LABEL_95:
    if ((v5 & 0x8000) == 0)
      goto LABEL_96;
    goto LABEL_202;
  }
LABEL_201:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x8000) == 0)
  {
LABEL_96:
    if ((v5 & 0x40000000000) == 0)
      goto LABEL_97;
    goto LABEL_203;
  }
LABEL_202:
  this = PB::Writer::write(a2, v3[25]);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x40000000000) == 0)
  {
LABEL_97:
    if ((v5 & 0x10000000000) == 0)
      goto LABEL_98;
    goto LABEL_204;
  }
LABEL_203:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x10000000000) == 0)
  {
LABEL_98:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_99;
    goto LABEL_205;
  }
LABEL_204:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x800000000) == 0)
  {
LABEL_99:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_100;
    goto LABEL_206;
  }
LABEL_205:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x100000000) == 0)
  {
LABEL_100:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_101;
    goto LABEL_207;
  }
LABEL_206:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x400000000) == 0)
  {
LABEL_101:
    if ((v6 & 0x100) == 0)
      goto LABEL_102;
    goto LABEL_208;
  }
LABEL_207:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x100) == 0)
  {
LABEL_102:
    if ((v6 & 0x40000) == 0)
      goto LABEL_103;
    goto LABEL_209;
  }
LABEL_208:
  this = PB::Writer::write(a2);
  v5 = *v4;
  if ((v4[1] & 0x40000) == 0)
  {
LABEL_103:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_105;
    goto LABEL_104;
  }
LABEL_209:
  this = PB::Writer::write(a2);
  if ((*v4 & 0x200000000) != 0)
LABEL_104:
    this = PB::Writer::writeVarInt(a2);
LABEL_105:
  v7 = *v4;
  if ((*v4 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v7 = *v4;
    if ((*v4 & 0x20) == 0)
    {
LABEL_107:
      if ((v7 & 4) == 0)
        goto LABEL_108;
      goto LABEL_213;
    }
  }
  else if ((v7 & 0x20) == 0)
  {
    goto LABEL_107;
  }
  this = PB::Writer::writeVarInt(a2);
  v7 = *v4;
  if ((*v4 & 4) == 0)
  {
LABEL_108:
    if ((v7 & 8) == 0)
      goto LABEL_109;
    goto LABEL_214;
  }
LABEL_213:
  this = PB::Writer::writeVarInt(a2);
  v7 = *v4;
  if ((*v4 & 8) == 0)
  {
LABEL_109:
    if ((v7 & 0x10) == 0)
      goto LABEL_110;
    goto LABEL_215;
  }
LABEL_214:
  this = PB::Writer::writeVarInt(a2);
  v7 = *v4;
  if ((*v4 & 0x10) == 0)
  {
LABEL_110:
    if ((v7 & 0x2000000000000) == 0)
      goto LABEL_111;
    goto LABEL_216;
  }
LABEL_215:
  this = PB::Writer::writeVarInt(a2);
  v7 = *v4;
  if ((*v4 & 0x2000000000000) == 0)
  {
LABEL_111:
    if ((v7 & 0x2000) == 0)
      return this;
    return PB::Writer::write(a2, v3[23]);
  }
LABEL_216:
  this = PB::Writer::writeVarInt(a2);
  if ((*v4 & 0x2000) != 0)
    return PB::Writer::write(a2, v3[23]);
  return this;
}

uint64_t CMMsl::KappaSevereCrashResult::hash_value(CMMsl::KappaSevereCrashResult *this)
{
  uint64_t v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  float v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  float v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  float v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;

  v1 = *(_QWORD *)((char *)this + 356);
  if ((v1 & 0x800000) != 0)
  {
    v6 = *((float *)this + 33);
    v2 = LODWORD(v6);
    if (v6 == 0.0)
      v2 = 0;
    if ((v1 & 0x400000) != 0)
    {
LABEL_3:
      v3 = *((float *)this + 32);
      v4 = v2;
      v5 = LODWORD(v3);
      if (v3 == 0.0)
        v5 = 0;
      v153 = v5;
      v2 = v4;
      if ((v1 & 0x1000000) != 0)
        goto LABEL_6;
      goto LABEL_11;
    }
  }
  else
  {
    v2 = 0;
    if ((v1 & 0x400000) != 0)
      goto LABEL_3;
  }
  v153 = 0;
  if ((v1 & 0x1000000) != 0)
  {
LABEL_6:
    v152 = *((int *)this + 34);
    goto LABEL_12;
  }
LABEL_11:
  v152 = 0;
LABEL_12:
  v7 = *(_QWORD *)((char *)this + 364);
  if ((v1 & 0x10000000000000) == 0)
  {
    v151 = 0;
    if ((v7 & 1) != 0)
      goto LABEL_14;
LABEL_162:
    v150 = 0;
    if ((v1 & 0x400000000000000) != 0)
      goto LABEL_17;
LABEL_163:
    v149 = 0;
    if ((v1 & 0x400000000000) != 0)
      goto LABEL_20;
LABEL_164:
    v148 = 0;
    if ((v1 & 0x200000000000) != 0)
      goto LABEL_23;
LABEL_165:
    v147 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_26;
LABEL_166:
    v146 = 0;
    if ((v1 & 0x80000000000000) != 0)
      goto LABEL_29;
    goto LABEL_167;
  }
  v151 = *((int *)this + 62);
  if ((v7 & 1) == 0)
    goto LABEL_162;
LABEL_14:
  v8 = *((float *)this + 74);
  v9 = LODWORD(v8);
  if (v8 == 0.0)
    v9 = 0;
  v150 = v9;
  if ((v1 & 0x400000000000000) == 0)
    goto LABEL_163;
LABEL_17:
  v10 = *((float *)this + 68);
  v11 = LODWORD(v10);
  if (v10 == 0.0)
    v11 = 0;
  v149 = v11;
  if ((v1 & 0x400000000000) == 0)
    goto LABEL_164;
LABEL_20:
  v12 = *((float *)this + 56);
  v13 = LODWORD(v12);
  if (v12 == 0.0)
    v13 = 0;
  v148 = v13;
  if ((v1 & 0x200000000000) == 0)
    goto LABEL_165;
LABEL_23:
  v14 = *((float *)this + 55);
  v15 = LODWORD(v14);
  if (v14 == 0.0)
    v15 = 0;
  v147 = v15;
  if ((v1 & 0x200) == 0)
    goto LABEL_166;
LABEL_26:
  v16 = *((float *)this + 19);
  v17 = LODWORD(v16);
  if (v16 == 0.0)
    v17 = 0;
  v146 = v17;
  if ((v1 & 0x80000000000000) != 0)
  {
LABEL_29:
    v145 = *((unsigned int *)this + 65);
    if ((v1 & 0x2000000) != 0)
      goto LABEL_30;
    goto LABEL_168;
  }
LABEL_167:
  v145 = 0;
  if ((v1 & 0x2000000) != 0)
  {
LABEL_30:
    v144 = *((unsigned int *)this + 35);
    if ((v1 & 0x10000) != 0)
      goto LABEL_31;
LABEL_169:
    v143 = 0;
    if ((v7 & 8) != 0)
      goto LABEL_34;
LABEL_170:
    v142 = 0;
    if ((v7 & 0x10) != 0)
      goto LABEL_37;
LABEL_171:
    v141 = 0;
    if ((v1 & 0x80000000000) != 0)
      goto LABEL_40;
    goto LABEL_172;
  }
LABEL_168:
  v144 = 0;
  if ((v1 & 0x10000) == 0)
    goto LABEL_169;
LABEL_31:
  v18 = *((float *)this + 26);
  v19 = LODWORD(v18);
  if (v18 == 0.0)
    v19 = 0;
  v143 = v19;
  if ((v7 & 8) == 0)
    goto LABEL_170;
LABEL_34:
  v20 = *((float *)this + 77);
  v21 = LODWORD(v20);
  if (v20 == 0.0)
    v21 = 0;
  v142 = v21;
  if ((v7 & 0x10) == 0)
    goto LABEL_171;
LABEL_37:
  v22 = *((float *)this + 78);
  v23 = LODWORD(v22);
  if (v22 == 0.0)
    v23 = 0;
  v141 = v23;
  if ((v1 & 0x80000000000) != 0)
  {
LABEL_40:
    v140 = *((int *)this + 53);
    if ((v1 & 0x20000000000) != 0)
      goto LABEL_41;
    goto LABEL_173;
  }
LABEL_172:
  v140 = 0;
  if ((v1 & 0x20000000000) != 0)
  {
LABEL_41:
    v139 = *((int *)this + 51);
    if ((v1 & 0x4000000000000) != 0)
      goto LABEL_42;
LABEL_174:
    v138 = 0;
    if ((v1 & 0x1000000000000000) != 0)
      goto LABEL_45;
    goto LABEL_175;
  }
LABEL_173:
  v139 = 0;
  if ((v1 & 0x4000000000000) == 0)
    goto LABEL_174;
LABEL_42:
  v24 = *((float *)this + 60);
  v25 = LODWORD(v24);
  if (v24 == 0.0)
    v25 = 0;
  v138 = v25;
  if ((v1 & 0x1000000000000000) != 0)
  {
LABEL_45:
    v137 = *((unsigned int *)this + 70);
    if ((v7 & 2) != 0)
      goto LABEL_46;
    goto LABEL_176;
  }
LABEL_175:
  v137 = 0;
  if ((v7 & 2) != 0)
  {
LABEL_46:
    v136 = *((unsigned int *)this + 75);
    if ((v1 & 0x80) != 0)
      goto LABEL_47;
    goto LABEL_177;
  }
LABEL_176:
  v136 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_47:
    v135 = *((_QWORD *)this + 8);
    if ((v1 & 1) != 0)
      goto LABEL_48;
    goto LABEL_178;
  }
LABEL_177:
  v135 = 0;
  if ((v1 & 1) != 0)
  {
LABEL_48:
    v134 = *((_QWORD *)this + 1);
    if ((v7 & 0x40) != 0)
      goto LABEL_49;
    goto LABEL_179;
  }
LABEL_178:
  v134 = 0;
  if ((v7 & 0x40) != 0)
  {
LABEL_49:
    v133 = *((unsigned __int8 *)this + 317);
    if ((v7 & 0x80) != 0)
      goto LABEL_50;
    goto LABEL_180;
  }
LABEL_179:
  v133 = 0;
  if ((v7 & 0x80) != 0)
  {
LABEL_50:
    v132 = *((unsigned __int8 *)this + 318);
    if ((v7 & 0x8000) != 0)
      goto LABEL_51;
    goto LABEL_181;
  }
LABEL_180:
  v132 = 0;
  if ((v7 & 0x8000) != 0)
  {
LABEL_51:
    v131 = *((unsigned __int8 *)this + 326);
    if ((v7 & 0x10000) != 0)
      goto LABEL_52;
    goto LABEL_182;
  }
LABEL_181:
  v131 = 0;
  if ((v7 & 0x10000) != 0)
  {
LABEL_52:
    v130 = *((unsigned __int8 *)this + 327);
    if ((v7 & 0x8000000) != 0)
      goto LABEL_53;
    goto LABEL_183;
  }
LABEL_182:
  v130 = 0;
  if ((v7 & 0x8000000) != 0)
  {
LABEL_53:
    v129 = *((unsigned __int8 *)this + 338);
    if ((v7 & 0x2000000) != 0)
      goto LABEL_54;
    goto LABEL_184;
  }
LABEL_183:
  v129 = 0;
  if ((v7 & 0x2000000) != 0)
  {
LABEL_54:
    v128 = *((unsigned __int8 *)this + 336);
    if ((v7 & 0x1000) != 0)
      goto LABEL_55;
    goto LABEL_185;
  }
LABEL_184:
  v128 = 0;
  if ((v7 & 0x1000) != 0)
  {
LABEL_55:
    v127 = *((unsigned __int8 *)this + 323);
    if ((v7 & 0x10000000) != 0)
      goto LABEL_56;
    goto LABEL_186;
  }
LABEL_185:
  v127 = 0;
  if ((v7 & 0x10000000) != 0)
  {
LABEL_56:
    v126 = *((unsigned __int8 *)this + 339);
    if ((v7 & 0x20000000) != 0)
      goto LABEL_57;
    goto LABEL_187;
  }
LABEL_186:
  v126 = 0;
  if ((v7 & 0x20000000) != 0)
  {
LABEL_57:
    v125 = *((unsigned __int8 *)this + 340);
    if ((v7 & 0x200) != 0)
      goto LABEL_58;
    goto LABEL_188;
  }
LABEL_187:
  v125 = 0;
  if ((v7 & 0x200) != 0)
  {
LABEL_58:
    v124 = *((unsigned __int8 *)this + 320);
    if ((v7 & 0x1000000) != 0)
      goto LABEL_59;
    goto LABEL_189;
  }
LABEL_188:
  v124 = 0;
  if ((v7 & 0x1000000) != 0)
  {
LABEL_59:
    v123 = *((unsigned __int8 *)this + 335);
    if ((v7 & 0x2000) != 0)
      goto LABEL_60;
    goto LABEL_190;
  }
LABEL_189:
  v123 = 0;
  if ((v7 & 0x2000) != 0)
  {
LABEL_60:
    v122 = *((unsigned __int8 *)this + 324);
    if ((v7 & 0x4000000) != 0)
      goto LABEL_61;
    goto LABEL_191;
  }
LABEL_190:
  v122 = 0;
  if ((v7 & 0x4000000) != 0)
  {
LABEL_61:
    v121 = *((unsigned __int8 *)this + 337);
    if ((v7 & 0x80000) != 0)
      goto LABEL_62;
    goto LABEL_192;
  }
LABEL_191:
  v121 = 0;
  if ((v7 & 0x80000) != 0)
  {
LABEL_62:
    v120 = *((unsigned __int8 *)this + 330);
    if ((v7 & 0x2000000000) != 0)
      goto LABEL_63;
    goto LABEL_193;
  }
LABEL_192:
  v120 = 0;
  if ((v7 & 0x2000000000) != 0)
  {
LABEL_63:
    v119 = *((unsigned __int8 *)this + 348);
    if ((v7 & 0x200000000) != 0)
      goto LABEL_64;
    goto LABEL_194;
  }
LABEL_193:
  v119 = 0;
  if ((v7 & 0x200000000) != 0)
  {
LABEL_64:
    v118 = *((unsigned __int8 *)this + 344);
    if ((v7 & 0x4000000000) != 0)
      goto LABEL_65;
    goto LABEL_195;
  }
LABEL_194:
  v118 = 0;
  if ((v7 & 0x4000000000) != 0)
  {
LABEL_65:
    v117 = *((unsigned __int8 *)this + 349);
    if ((v7 & 0x400000000) != 0)
      goto LABEL_66;
    goto LABEL_196;
  }
LABEL_195:
  v117 = 0;
  if ((v7 & 0x400000000) != 0)
  {
LABEL_66:
    v116 = *((unsigned __int8 *)this + 345);
    if ((v7 & 0x40000000) != 0)
      goto LABEL_67;
    goto LABEL_197;
  }
LABEL_196:
  v116 = 0;
  if ((v7 & 0x40000000) != 0)
  {
LABEL_67:
    v115 = *((unsigned __int8 *)this + 341);
    if ((v7 & 0x800) != 0)
      goto LABEL_68;
    goto LABEL_198;
  }
LABEL_197:
  v115 = 0;
  if ((v7 & 0x800) != 0)
  {
LABEL_68:
    v114 = *((unsigned __int8 *)this + 322);
    if ((v7 & 0x100000) != 0)
      goto LABEL_69;
    goto LABEL_199;
  }
LABEL_198:
  v114 = 0;
  if ((v7 & 0x100000) != 0)
  {
LABEL_69:
    v113 = *((unsigned __int8 *)this + 331);
    if ((v7 & 0x8000000000) != 0)
      goto LABEL_70;
    goto LABEL_200;
  }
LABEL_199:
  v113 = 0;
  if ((v7 & 0x8000000000) != 0)
  {
LABEL_70:
    v112 = *((unsigned __int8 *)this + 350);
    if ((v7 & 0x800000000) != 0)
      goto LABEL_71;
    goto LABEL_201;
  }
LABEL_200:
  v112 = 0;
  if ((v7 & 0x800000000) != 0)
  {
LABEL_71:
    v111 = *((unsigned __int8 *)this + 346);
    if ((v1 & 0x20000) != 0)
      goto LABEL_72;
    goto LABEL_202;
  }
LABEL_201:
  v111 = 0;
  if ((v1 & 0x20000) != 0)
  {
LABEL_72:
    v110 = *((unsigned int *)this + 27);
    if ((v7 & 0x400000) != 0)
      goto LABEL_73;
    goto LABEL_203;
  }
LABEL_202:
  v110 = 0;
  if ((v7 & 0x400000) != 0)
  {
LABEL_73:
    v109 = *((unsigned __int8 *)this + 333);
    if ((v7 & 0x800000) != 0)
      goto LABEL_74;
    goto LABEL_204;
  }
LABEL_203:
  v109 = 0;
  if ((v7 & 0x800000) != 0)
  {
LABEL_74:
    v108 = *((unsigned __int8 *)this + 334);
    if ((v7 & 0x20) != 0)
      goto LABEL_75;
    goto LABEL_205;
  }
LABEL_204:
  v108 = 0;
  if ((v7 & 0x20) != 0)
  {
LABEL_75:
    v107 = *((unsigned __int8 *)this + 316);
    if ((v1 & 0x40000) != 0)
      goto LABEL_76;
    goto LABEL_206;
  }
LABEL_205:
  v107 = 0;
  if ((v1 & 0x40000) != 0)
  {
LABEL_76:
    v106 = *((unsigned int *)this + 28);
    if ((v7 & 0x40000000000) != 0)
      goto LABEL_77;
    goto LABEL_207;
  }
LABEL_206:
  v106 = 0;
  if ((v7 & 0x40000000000) != 0)
  {
LABEL_77:
    v105 = *((unsigned __int8 *)this + 353);
    if ((v7 & 0x10000000000) != 0)
      goto LABEL_78;
    goto LABEL_208;
  }
LABEL_207:
  v105 = 0;
  if ((v7 & 0x10000000000) != 0)
  {
LABEL_78:
    v104 = *((unsigned __int8 *)this + 351);
    if ((v7 & 0x20000000000) != 0)
      goto LABEL_79;
    goto LABEL_209;
  }
LABEL_208:
  v104 = 0;
  if ((v7 & 0x20000000000) != 0)
  {
LABEL_79:
    v103 = *((unsigned __int8 *)this + 352);
    if ((v7 & 0x100000000) != 0)
      goto LABEL_80;
    goto LABEL_210;
  }
LABEL_209:
  v103 = 0;
  if ((v7 & 0x100000000) != 0)
  {
LABEL_80:
    v102 = *((unsigned __int8 *)this + 343);
    if ((v7 & 0x80000000) != 0)
      goto LABEL_81;
    goto LABEL_211;
  }
LABEL_210:
  v102 = 0;
  if ((v7 & 0x80000000) != 0)
  {
LABEL_81:
    v101 = *((unsigned __int8 *)this + 342);
    if ((v1 & 0x20000000000000) != 0)
      goto LABEL_82;
    goto LABEL_212;
  }
LABEL_211:
  v101 = 0;
  if ((v1 & 0x20000000000000) != 0)
  {
LABEL_82:
    v100 = *((int *)this + 63);
    if ((v1 & 0x40000000000000) != 0)
      goto LABEL_83;
    goto LABEL_213;
  }
LABEL_212:
  v100 = 0;
  if ((v1 & 0x40000000000000) != 0)
  {
LABEL_83:
    v99 = *((int *)this + 64);
    if ((v1 & 0x4000000) != 0)
      goto LABEL_84;
    goto LABEL_214;
  }
LABEL_213:
  v99 = 0;
  if ((v1 & 0x4000000) != 0)
  {
LABEL_84:
    v98 = *((int *)this + 36);
    if ((v1 & 0x8000000) != 0)
      goto LABEL_85;
    goto LABEL_215;
  }
LABEL_214:
  v98 = 0;
  if ((v1 & 0x8000000) != 0)
  {
LABEL_85:
    v97 = *((int *)this + 37);
    if ((v7 & 0x20000) != 0)
      goto LABEL_86;
    goto LABEL_216;
  }
LABEL_215:
  v97 = 0;
  if ((v7 & 0x20000) != 0)
  {
LABEL_86:
    v96 = *((unsigned __int8 *)this + 328);
    if ((v7 & 0x4000) != 0)
      goto LABEL_87;
    goto LABEL_217;
  }
LABEL_216:
  v96 = 0;
  if ((v7 & 0x4000) != 0)
  {
LABEL_87:
    v95 = *((unsigned __int8 *)this + 325);
    if ((v1 & 0x2000000000) != 0)
      goto LABEL_88;
    goto LABEL_218;
  }
LABEL_217:
  v95 = 0;
  if ((v1 & 0x2000000000) != 0)
  {
LABEL_88:
    v94 = *((int *)this + 47);
    if ((v1 & 0x80000) != 0)
      goto LABEL_89;
    goto LABEL_219;
  }
LABEL_218:
  v94 = 0;
  if ((v1 & 0x80000) != 0)
  {
LABEL_89:
    v93 = *((int *)this + 29);
    if ((v1 & 0x1000000000) != 0)
      goto LABEL_90;
    goto LABEL_220;
  }
LABEL_219:
  v93 = 0;
  if ((v1 & 0x1000000000) != 0)
  {
LABEL_90:
    v92 = *((int *)this + 46);
    if ((v1 & 0x4000000000000000) != 0)
      goto LABEL_91;
LABEL_221:
    v91 = 0;
    if (v1 < 0)
      goto LABEL_94;
LABEL_222:
    v90 = 0;
    if ((v1 & 0x200000000000000) != 0)
      goto LABEL_97;
LABEL_223:
    v89 = 0;
    if ((v1 & 0x800000000000000) != 0)
      goto LABEL_100;
    goto LABEL_224;
  }
LABEL_220:
  v92 = 0;
  if ((v1 & 0x4000000000000000) == 0)
    goto LABEL_221;
LABEL_91:
  v26 = *((float *)this + 72);
  v27 = LODWORD(v26);
  if (v26 == 0.0)
    v27 = 0;
  v91 = v27;
  if ((v1 & 0x8000000000000000) == 0)
    goto LABEL_222;
LABEL_94:
  v28 = *((float *)this + 73);
  v29 = LODWORD(v28);
  if (v28 == 0.0)
    v29 = 0;
  v90 = v29;
  if ((v1 & 0x200000000000000) == 0)
    goto LABEL_223;
LABEL_97:
  v30 = *((float *)this + 67);
  v31 = LODWORD(v30);
  if (v30 == 0.0)
    v31 = 0;
  v89 = v31;
  if ((v1 & 0x800000000000000) != 0)
  {
LABEL_100:
    v88 = *((unsigned int *)this + 69);
    if ((v1 & 0x2000000000000000) != 0)
      goto LABEL_101;
    goto LABEL_225;
  }
LABEL_224:
  v88 = 0;
  if ((v1 & 0x2000000000000000) != 0)
  {
LABEL_101:
    v87 = *((unsigned int *)this + 71);
    if ((v7 & 0x400) != 0)
      goto LABEL_102;
    goto LABEL_226;
  }
LABEL_225:
  v87 = 0;
  if ((v7 & 0x400) != 0)
  {
LABEL_102:
    v86 = *((unsigned __int8 *)this + 321);
    if ((v1 & 0x4000) != 0)
      goto LABEL_103;
    goto LABEL_227;
  }
LABEL_226:
  v86 = 0;
  if ((v1 & 0x4000) != 0)
  {
LABEL_103:
    v85 = *((unsigned int *)this + 24);
    if ((v1 & 0x1000) != 0)
      goto LABEL_104;
LABEL_228:
    v84 = 0;
    if ((v1 & 0x100000000000) != 0)
      goto LABEL_107;
    goto LABEL_229;
  }
LABEL_227:
  v85 = 0;
  if ((v1 & 0x1000) == 0)
    goto LABEL_228;
LABEL_104:
  v32 = *((float *)this + 22);
  v33 = LODWORD(v32);
  if (v32 == 0.0)
    v33 = 0;
  v84 = v33;
  if ((v1 & 0x100000000000) != 0)
  {
LABEL_107:
    v83 = *((unsigned int *)this + 54);
    if ((v1 & 0x100000000000000) != 0)
      goto LABEL_108;
    goto LABEL_230;
  }
LABEL_229:
  v83 = 0;
  if ((v1 & 0x100000000000000) != 0)
  {
LABEL_108:
    v82 = *((unsigned int *)this + 66);
    if ((v1 & 0x40) != 0)
      goto LABEL_109;
    goto LABEL_231;
  }
LABEL_230:
  v82 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_109:
    v81 = *((_QWORD *)this + 7);
    if ((v1 & 0x800000000000) != 0)
      goto LABEL_110;
    goto LABEL_232;
  }
LABEL_231:
  v81 = 0;
  if ((v1 & 0x800000000000) != 0)
  {
LABEL_110:
    v80 = *((int *)this + 57);
    if ((v1 & 0x1000000000000) != 0)
      goto LABEL_111;
    goto LABEL_233;
  }
LABEL_232:
  v80 = 0;
  if ((v1 & 0x1000000000000) != 0)
  {
LABEL_111:
    v79 = *((int *)this + 58);
    if ((v1 & 0x100000) != 0)
      goto LABEL_112;
LABEL_234:
    v78 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_115;
LABEL_235:
    v77 = 0;
    if ((v1 & 0x200000) != 0)
      goto LABEL_118;
LABEL_236:
    v76 = 0;
    if ((v1 & 0x800) != 0)
      goto LABEL_121;
LABEL_237:
    v75 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_124;
LABEL_238:
    v74 = 0;
    if ((v7 & 0x200000) != 0)
      goto LABEL_127;
    goto LABEL_239;
  }
LABEL_233:
  v79 = 0;
  if ((v1 & 0x100000) == 0)
    goto LABEL_234;
LABEL_112:
  v34 = *((float *)this + 30);
  v35 = LODWORD(v34);
  if (v34 == 0.0)
    v35 = 0;
  v78 = v35;
  if ((v1 & 0x400) == 0)
    goto LABEL_235;
LABEL_115:
  v36 = *((float *)this + 20);
  v37 = LODWORD(v36);
  if (v36 == 0.0)
    v37 = 0;
  v77 = v37;
  if ((v1 & 0x200000) == 0)
    goto LABEL_236;
LABEL_118:
  v38 = *((float *)this + 31);
  v39 = LODWORD(v38);
  if (v38 == 0.0)
    v39 = 0;
  v76 = v39;
  if ((v1 & 0x800) == 0)
    goto LABEL_237;
LABEL_121:
  v40 = *((float *)this + 21);
  v41 = LODWORD(v40);
  if (v40 == 0.0)
    v41 = 0;
  v75 = v41;
  if ((v1 & 0x100) == 0)
    goto LABEL_238;
LABEL_124:
  v42 = *((float *)this + 18);
  v43 = LODWORD(v42);
  if (v42 == 0.0)
    v43 = 0;
  v74 = v43;
  if ((v7 & 0x200000) != 0)
  {
LABEL_127:
    v44 = *((unsigned __int8 *)this + 332);
    if ((v7 & 4) != 0)
      goto LABEL_128;
    goto LABEL_240;
  }
LABEL_239:
  v44 = 0;
  if ((v7 & 4) != 0)
  {
LABEL_128:
    v45 = *((int *)this + 76);
    if ((v1 & 0x10000000) != 0)
      goto LABEL_129;
    goto LABEL_241;
  }
LABEL_240:
  v45 = 0;
  if ((v1 & 0x10000000) != 0)
  {
LABEL_129:
    v46 = *((int *)this + 38);
    if ((v1 & 0x40000000) != 0)
      goto LABEL_130;
    goto LABEL_242;
  }
LABEL_241:
  v46 = 0;
  if ((v1 & 0x40000000) != 0)
  {
LABEL_130:
    v47 = *((int *)this + 40);
    if ((v7 & 0x1000000000) != 0)
      goto LABEL_131;
    goto LABEL_243;
  }
LABEL_242:
  v47 = 0;
  if ((v7 & 0x1000000000) != 0)
  {
LABEL_131:
    v48 = *((unsigned __int8 *)this + 347);
    if ((v1 & 0x80000000) != 0)
      goto LABEL_132;
    goto LABEL_244;
  }
LABEL_243:
  v48 = 0;
  if ((v1 & 0x80000000) != 0)
  {
LABEL_132:
    v49 = *((unsigned int *)this + 41);
    if ((v1 & 0x20000000) != 0)
      goto LABEL_133;
    goto LABEL_245;
  }
LABEL_244:
  v49 = 0;
  if ((v1 & 0x20000000) != 0)
  {
LABEL_133:
    v50 = *((unsigned int *)this + 39);
    if ((v1 & 0x8000000000000) != 0)
      goto LABEL_134;
LABEL_246:
    v52 = 0;
    if ((v1 & 0x4000000000) != 0)
      goto LABEL_138;
    goto LABEL_247;
  }
LABEL_245:
  v50 = 0;
  if ((v1 & 0x8000000000000) == 0)
    goto LABEL_246;
LABEL_134:
  v51 = *((float *)this + 61);
  if (v51 == 0.0)
    v52 = 0;
  else
    v52 = LODWORD(v51);
  if ((v1 & 0x4000000000) != 0)
  {
LABEL_138:
    v53 = *((int *)this + 48);
    if ((v1 & 0x8000000000) != 0)
      goto LABEL_139;
    goto LABEL_248;
  }
LABEL_247:
  v53 = 0;
  if ((v1 & 0x8000000000) != 0)
  {
LABEL_139:
    v54 = *((int *)this + 49);
    if ((v1 & 0x8000) != 0)
      goto LABEL_140;
LABEL_249:
    v56 = 0;
    if ((v1 & 0x40000000000) != 0)
      goto LABEL_144;
    goto LABEL_250;
  }
LABEL_248:
  v54 = 0;
  if ((v1 & 0x8000) == 0)
    goto LABEL_249;
LABEL_140:
  v55 = *((float *)this + 25);
  if (v55 == 0.0)
    v56 = 0;
  else
    v56 = LODWORD(v55);
  if ((v1 & 0x40000000000) != 0)
  {
LABEL_144:
    v57 = *((int *)this + 52);
    if ((v1 & 0x10000000000) != 0)
      goto LABEL_145;
    goto LABEL_251;
  }
LABEL_250:
  v57 = 0;
  if ((v1 & 0x10000000000) != 0)
  {
LABEL_145:
    v58 = *((int *)this + 50);
    if ((v1 & 0x800000000) != 0)
      goto LABEL_146;
    goto LABEL_252;
  }
LABEL_251:
  v58 = 0;
  if ((v1 & 0x800000000) != 0)
  {
LABEL_146:
    v59 = *((int *)this + 45);
    if ((v1 & 0x100000000) != 0)
      goto LABEL_147;
    goto LABEL_253;
  }
LABEL_252:
  v59 = 0;
  if ((v1 & 0x100000000) != 0)
  {
LABEL_147:
    v60 = *((int *)this + 42);
    if ((v1 & 0x400000000) != 0)
      goto LABEL_148;
    goto LABEL_254;
  }
LABEL_253:
  v60 = 0;
  if ((v1 & 0x400000000) != 0)
  {
LABEL_148:
    v61 = *((int *)this + 44);
    if ((v7 & 0x100) != 0)
      goto LABEL_149;
    goto LABEL_255;
  }
LABEL_254:
  v61 = 0;
  if ((v7 & 0x100) != 0)
  {
LABEL_149:
    v62 = *((unsigned __int8 *)this + 319);
    if ((v7 & 0x40000) != 0)
      goto LABEL_150;
    goto LABEL_256;
  }
LABEL_255:
  v62 = 0;
  if ((v7 & 0x40000) != 0)
  {
LABEL_150:
    v63 = *((unsigned __int8 *)this + 329);
    if ((v1 & 0x200000000) != 0)
      goto LABEL_151;
    goto LABEL_257;
  }
LABEL_256:
  v63 = 0;
  if ((v1 & 0x200000000) != 0)
  {
LABEL_151:
    v64 = *((int *)this + 43);
    if ((v1 & 2) != 0)
      goto LABEL_152;
    goto LABEL_258;
  }
LABEL_257:
  v64 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_152:
    v65 = *((_QWORD *)this + 2);
    if ((v1 & 0x20) != 0)
      goto LABEL_153;
    goto LABEL_259;
  }
LABEL_258:
  v65 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_153:
    v66 = *((_QWORD *)this + 6);
    if ((v1 & 4) != 0)
      goto LABEL_154;
    goto LABEL_260;
  }
LABEL_259:
  v66 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_154:
    v67 = *((_QWORD *)this + 3);
    if ((v1 & 8) != 0)
      goto LABEL_155;
    goto LABEL_261;
  }
LABEL_260:
  v67 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_155:
    v68 = *((_QWORD *)this + 4);
    if ((v1 & 0x10) != 0)
      goto LABEL_156;
    goto LABEL_262;
  }
LABEL_261:
  v68 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_156:
    v69 = *((_QWORD *)this + 5);
    if ((v1 & 0x2000000000000) != 0)
      goto LABEL_157;
    goto LABEL_263;
  }
LABEL_262:
  v69 = 0;
  if ((v1 & 0x2000000000000) != 0)
  {
LABEL_157:
    v70 = *((int *)this + 59);
    if ((v1 & 0x2000) != 0)
      goto LABEL_158;
LABEL_264:
    v72 = 0;
    return v153 ^ v2 ^ v152 ^ v151 ^ v150 ^ v149 ^ v148 ^ v147 ^ v146 ^ v145 ^ v144 ^ v143 ^ v142 ^ v141 ^ v140 ^ v139 ^ v138 ^ v137 ^ v136 ^ v135 ^ v134 ^ v133 ^ v132 ^ v131 ^ v130 ^ v129 ^ v128 ^ v127 ^ v126 ^ v125 ^ v124 ^ v123 ^ v122 ^ v121 ^ v120 ^ v119 ^ v118 ^ v117 ^ v116 ^ v115 ^ v114 ^ v113 ^ v112 ^ v111 ^ v110 ^ v109 ^ v108 ^ v107 ^ v106 ^ v105 ^ v104 ^ v103 ^ v102 ^ v101 ^ v100 ^ v99 ^ v98 ^ v97 ^ v96 ^ v95 ^ v94 ^ v93 ^ v92 ^ v91 ^ v90 ^ v89 ^ v88 ^ v87 ^ v86 ^ v85 ^ v84 ^ v83 ^ v82 ^ v81 ^ v80 ^ v79 ^ v78 ^ v77 ^ v76 ^ v75 ^ v74 ^ v44 ^ v45 ^ v46 ^ v47 ^ v48 ^ v49 ^ v50 ^ v52 ^ v53 ^ v54 ^ v56 ^ v57 ^ v58 ^ v59 ^ v60 ^ v61 ^ v62 ^ v63 ^ v64 ^ v65 ^ v66 ^ v67 ^ v68 ^ v69 ^ v70 ^ v72;
  }
LABEL_263:
  v70 = 0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_264;
LABEL_158:
  v71 = *((float *)this + 23);
  v72 = LODWORD(v71);
  if (v71 == 0.0)
    v72 = 0;
  return v153 ^ v2 ^ v152 ^ v151 ^ v150 ^ v149 ^ v148 ^ v147 ^ v146 ^ v145 ^ v144 ^ v143 ^ v142 ^ v141 ^ v140 ^ v139 ^ v138 ^ v137 ^ v136 ^ v135 ^ v134 ^ v133 ^ v132 ^ v131 ^ v130 ^ v129 ^ v128 ^ v127 ^ v126 ^ v125 ^ v124 ^ v123 ^ v122 ^ v121 ^ v120 ^ v119 ^ v118 ^ v117 ^ v116 ^ v115 ^ v114 ^ v113 ^ v112 ^ v111 ^ v110 ^ v109 ^ v108 ^ v107 ^ v106 ^ v105 ^ v104 ^ v103 ^ v102 ^ v101 ^ v100 ^ v99 ^ v98 ^ v97 ^ v96 ^ v95 ^ v94 ^ v93 ^ v92 ^ v91 ^ v90 ^ v89 ^ v88 ^ v87 ^ v86 ^ v85 ^ v84 ^ v83 ^ v82 ^ v81 ^ v80 ^ v79 ^ v78 ^ v77 ^ v76 ^ v75 ^ v74 ^ v44 ^ v45 ^ v46 ^ v47 ^ v48 ^ v49 ^ v50 ^ v52 ^ v53 ^ v54 ^ v56 ^ v57 ^ v58 ^ v59 ^ v60 ^ v61 ^ v62 ^ v63 ^ v64 ^ v65 ^ v66 ^ v67 ^ v68 ^ v69 ^ v70 ^ v72;
}

void CMMsl::KappaSpinResult::~KappaSpinResult(CMMsl::KappaSpinResult *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)this = &off_25135EC88;
  v2 = (void *)*((_QWORD *)this + 13);
  if (v2)
  {
    *((_QWORD *)this + 14) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 10);
  if (v3)
  {
    *((_QWORD *)this + 11) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 7);
  if (v4)
  {
    *((_QWORD *)this + 8) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 4);
  if (v5)
  {
    *((_QWORD *)this + 5) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 1);
  if (v6)
  {
    *((_QWORD *)this + 2) = v6;
    operator delete(v6);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::KappaSpinResult::~KappaSpinResult(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::KappaSpinResult *CMMsl::KappaSpinResult::KappaSpinResult(CMMsl::KappaSpinResult *this, const CMMsl::KappaSpinResult *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  __int16 v7;
  __int16 v8;
  int v9;
  int v10;
  int v11;
  uint64_t v13;
  char v14;
  int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;

  *(_QWORD *)this = &off_25135EC88;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (_QWORD *)((char *)this + 8);
  *(_OWORD *)((char *)this + 56) = 0u;
  v5 = (_QWORD *)((char *)this + 56);
  *(_OWORD *)((char *)this + 104) = 0u;
  v6 = (_QWORD *)((char *)this + 104);
  *((_DWORD *)this + 51) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_QWORD *)this + 15) = 0;
  v7 = *((_WORD *)a2 + 102);
  if ((v7 & 0x1000) != 0)
  {
    v9 = *((_DWORD *)a2 + 49);
    v8 = 4096;
    *((_WORD *)this + 102) = 4096;
    *((_DWORD *)this + 49) = v9;
    v7 = *((_WORD *)a2 + 102);
    if ((v7 & 0x800) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v8 = 0;
  if ((*((_WORD *)a2 + 102) & 0x800) != 0)
  {
LABEL_5:
    v10 = *((_DWORD *)a2 + 48);
    v8 |= 0x800u;
    *((_WORD *)this + 102) = v8;
    *((_DWORD *)this + 48) = v10;
    v7 = *((_WORD *)a2 + 102);
  }
LABEL_6:
  if ((v7 & 0x10) != 0)
  {
    v13 = *((_QWORD *)a2 + 20);
    v8 |= 0x10u;
    *((_WORD *)this + 102) = v8;
    *((_QWORD *)this + 20) = v13;
    v7 = *((_WORD *)a2 + 102);
    if ((v7 & 0x4000) == 0)
    {
LABEL_8:
      if ((v7 & 0x400) == 0)
        goto LABEL_9;
      goto LABEL_25;
    }
  }
  else if ((v7 & 0x4000) == 0)
  {
    goto LABEL_8;
  }
  v14 = *((_BYTE *)a2 + 201);
  v8 |= 0x4000u;
  *((_WORD *)this + 102) = v8;
  *((_BYTE *)this + 201) = v14;
  v7 = *((_WORD *)a2 + 102);
  if ((v7 & 0x400) == 0)
  {
LABEL_9:
    if ((v7 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  v15 = *((_DWORD *)a2 + 47);
  v8 |= 0x400u;
  *((_WORD *)this + 102) = v8;
  *((_DWORD *)this + 47) = v15;
  v7 = *((_WORD *)a2 + 102);
  if ((v7 & 0x2000) == 0)
  {
LABEL_10:
    if ((v7 & 4) == 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  v16 = *((_BYTE *)a2 + 200);
  v8 |= 0x2000u;
  *((_WORD *)this + 102) = v8;
  *((_BYTE *)this + 200) = v16;
  v7 = *((_WORD *)a2 + 102);
  if ((v7 & 4) == 0)
  {
LABEL_11:
    if ((v7 & 8) == 0)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  v17 = *((_QWORD *)a2 + 18);
  v8 |= 4u;
  *((_WORD *)this + 102) = v8;
  *((_QWORD *)this + 18) = v17;
  v7 = *((_WORD *)a2 + 102);
  if ((v7 & 8) == 0)
  {
LABEL_12:
    if ((v7 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  v18 = *((_QWORD *)a2 + 19);
  v8 |= 8u;
  *((_WORD *)this + 102) = v8;
  *((_QWORD *)this + 19) = v18;
  v7 = *((_WORD *)a2 + 102);
  if ((v7 & 0x100) == 0)
  {
LABEL_13:
    if ((v7 & 0x80) == 0)
      goto LABEL_14;
    goto LABEL_30;
  }
LABEL_29:
  v19 = *((_DWORD *)a2 + 45);
  v8 |= 0x100u;
  *((_WORD *)this + 102) = v8;
  *((_DWORD *)this + 45) = v19;
  v7 = *((_WORD *)a2 + 102);
  if ((v7 & 0x80) == 0)
  {
LABEL_14:
    if ((v7 & 0x40) == 0)
      goto LABEL_15;
    goto LABEL_31;
  }
LABEL_30:
  v20 = *((_DWORD *)a2 + 44);
  v8 |= 0x80u;
  *((_WORD *)this + 102) = v8;
  *((_DWORD *)this + 44) = v20;
  v7 = *((_WORD *)a2 + 102);
  if ((v7 & 0x40) == 0)
  {
LABEL_15:
    if ((v7 & 1) == 0)
      goto LABEL_16;
    goto LABEL_32;
  }
LABEL_31:
  v21 = *((_DWORD *)a2 + 43);
  v8 |= 0x40u;
  *((_WORD *)this + 102) = v8;
  *((_DWORD *)this + 43) = v21;
  v7 = *((_WORD *)a2 + 102);
  if ((v7 & 1) == 0)
  {
LABEL_16:
    if ((v7 & 2) == 0)
      goto LABEL_17;
    goto LABEL_33;
  }
LABEL_32:
  v22 = *((_QWORD *)a2 + 16);
  v8 |= 1u;
  *((_WORD *)this + 102) = v8;
  *((_QWORD *)this + 16) = v22;
  v7 = *((_WORD *)a2 + 102);
  if ((v7 & 2) == 0)
  {
LABEL_17:
    if ((v7 & 0x200) == 0)
      goto LABEL_18;
    goto LABEL_34;
  }
LABEL_33:
  v23 = *((_QWORD *)a2 + 17);
  v8 |= 2u;
  *((_WORD *)this + 102) = v8;
  *((_QWORD *)this + 17) = v23;
  v7 = *((_WORD *)a2 + 102);
  if ((v7 & 0x200) == 0)
  {
LABEL_18:
    if ((v7 & 0x20) == 0)
      goto LABEL_20;
    goto LABEL_19;
  }
LABEL_34:
  v24 = *((_DWORD *)a2 + 46);
  v8 |= 0x200u;
  *((_WORD *)this + 102) = v8;
  *((_DWORD *)this + 46) = v24;
  if ((*((_WORD *)a2 + 102) & 0x20) != 0)
  {
LABEL_19:
    v11 = *((_DWORD *)a2 + 42);
    *((_WORD *)this + 102) = v8 | 0x20;
    *((_DWORD *)this + 42) = v11;
  }
LABEL_20:
  if (this != a2)
  {
    sub_2429111C4((_QWORD *)this + 10, *((char **)a2 + 10), *((char **)a2 + 11), (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 3);
    sub_2429111C4(v6, *((char **)a2 + 13), *((char **)a2 + 14), (uint64_t)(*((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13)) >> 3);
    sub_242911380(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
    sub_242911380(v5, *((char **)a2 + 7), *((char **)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 2);
    sub_242911380((_QWORD *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
  }
  return this;
}

CMMsl *CMMsl::KappaSpinResult::operator=(CMMsl *a1, const CMMsl::KappaSpinResult *a2)
{
  CMMsl::KappaSpinResult *v3;
  _BYTE v5[208];

  if (a1 != a2)
  {
    CMMsl::KappaSpinResult::KappaSpinResult((CMMsl::KappaSpinResult *)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaSpinResult *)v5, v3);
    CMMsl::KappaSpinResult::~KappaSpinResult((CMMsl::KappaSpinResult *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaSpinResult *a2, CMMsl::KappaSpinResult *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  float result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = *((_DWORD *)this + 51);
  *((_DWORD *)this + 51) = *((_DWORD *)a2 + 51);
  *((_DWORD *)a2 + 51) = v3;
  v4 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
  *((_QWORD *)a2 + 20) = v4;
  LOBYTE(v4) = *((_BYTE *)this + 201);
  *((_BYTE *)this + 201) = *((_BYTE *)a2 + 201);
  *((_BYTE *)a2 + 201) = v4;
  LOBYTE(v4) = *((_BYTE *)this + 200);
  *((_BYTE *)this + 200) = *((_BYTE *)a2 + 200);
  *((_BYTE *)a2 + 200) = v4;
  v5 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v5;
  v6 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 19) = v6;
  v7 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v7;
  v8 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v8;
  v9 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v9;
  v10 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v10;
  v11 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v11;
  v13 = *((_QWORD *)this + 15);
  v12 = *((_QWORD *)this + 16);
  v14 = *((_QWORD *)a2 + 16);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)this + 16) = v14;
  *((_QWORD *)a2 + 16) = v12;
  v15 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v15;
  LODWORD(v15) = *((_DWORD *)this + 46);
  *((_DWORD *)this + 46) = *((_DWORD *)a2 + 46);
  v16 = *((_DWORD *)this + 49);
  *((_DWORD *)this + 49) = *((_DWORD *)a2 + 49);
  *((_DWORD *)a2 + 49) = v16;
  v17 = *((_DWORD *)this + 48);
  *((_DWORD *)this + 48) = *((_DWORD *)a2 + 48);
  *((_DWORD *)a2 + 48) = v17;
  v18 = *((_DWORD *)this + 47);
  *((_DWORD *)this + 47) = *((_DWORD *)a2 + 47);
  *((_DWORD *)a2 + 47) = v18;
  v19 = *((_DWORD *)this + 45);
  *((_DWORD *)this + 45) = *((_DWORD *)a2 + 45);
  *((_DWORD *)a2 + 45) = v19;
  v20 = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v20;
  v21 = *((_DWORD *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((_DWORD *)a2 + 43) = v21;
  *((_DWORD *)a2 + 46) = v15;
  result = *((float *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((float *)a2 + 42) = result;
  *((_QWORD *)a2 + 15) = v13;
  v23 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v23;
  v24 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v24;
  v25 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v25;
  v26 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v26;
  v27 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v27;
  v28 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v28;
  v29 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v29;
  v30 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v30;
  v31 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v31;
  return result;
}

uint64_t CMMsl::KappaSpinResult::KappaSpinResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = &off_25135EC88;
  v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
  *(_DWORD *)(a2 + 204) = 0;
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 196);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 201) = *(_BYTE *)(a2 + 201);
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  sub_242911330(a1 + 80, (__n128 *)(a2 + 80));
  sub_242911330(a1 + 104, (__n128 *)(a2 + 104));
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  sub_242911330(a1 + 56, (__n128 *)(a2 + 56));
  sub_242911330(v4, (__n128 *)(a2 + 32));
  return a1;
}

CMMsl *CMMsl::KappaSpinResult::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::KappaSpinResult *v3;
  _BYTE v5[208];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaSpinResult::KappaSpinResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaSpinResult *)v5, v3);
    CMMsl::KappaSpinResult::~KappaSpinResult((CMMsl::KappaSpinResult *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaSpinResult::formatText(CMMsl::KappaSpinResult *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;
  float *v6;
  float *v7;
  float v8;
  float *v9;
  float *v10;
  float v11;
  float *v12;
  float *v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 102);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(a2, "deltaGravity", *((float *)this + 42));
    v5 = *((_WORD *)this + 102);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_31;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "epochFirstTimestamp");
  v5 = *((_WORD *)this + 102);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x2000) == 0)
      goto LABEL_5;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "epochLastTimestamp");
  v5 = *((_WORD *)this + 102);
  if ((v5 & 0x2000) == 0)
  {
LABEL_5:
    if ((v5 & 0x4000) == 0)
      goto LABEL_6;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "isSlowRollDetected");
  v5 = *((_WORD *)this + 102);
  if ((v5 & 0x4000) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "isSpinDetected");
  v5 = *((_WORD *)this + 102);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "maxDeltaAngleLong", *((float *)this + 43));
  v5 = *((_WORD *)this + 102);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "maxDeltaAngleShort", *((float *)this + 44));
  if ((*((_WORD *)this + 102) & 0x100) != 0)
LABEL_9:
    PB::TextFormatter::format(a2, "slowRollCumCoherentAngle", *((float *)this + 45));
LABEL_10:
  v6 = (float *)*((_QWORD *)this + 1);
  v7 = (float *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(a2, "slowRollSegmentMaxAxisVariance", v8);
  }
  v9 = (float *)*((_QWORD *)this + 4);
  v10 = (float *)*((_QWORD *)this + 5);
  while (v9 != v10)
  {
    v11 = *v9++;
    PB::TextFormatter::format(a2, "slowRollSegmentMaxFiltRotRate", v11);
  }
  v12 = (float *)*((_QWORD *)this + 7);
  v13 = (float *)*((_QWORD *)this + 8);
  while (v12 != v13)
  {
    v14 = *v12++;
    PB::TextFormatter::format(a2, "slowRollSegmentMinFiltRotRate", v14);
  }
  v15 = *((_QWORD *)this + 10);
  v16 = *((_QWORD *)this + 11);
  while (v15 != v16)
  {
    v15 += 8;
    PB::TextFormatter::format(a2, "slowRollSegmentStartTimes");
  }
  v17 = *((_QWORD *)this + 13);
  v18 = *((_QWORD *)this + 14);
  while (v17 != v18)
  {
    v17 += 8;
    PB::TextFormatter::format(a2, "slowRollSegmentStopTimes");
  }
  v19 = *((_WORD *)this + 102);
  if ((v19 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "slowRollStartTime");
    v19 = *((_WORD *)this + 102);
    if ((v19 & 8) == 0)
    {
LABEL_22:
      if ((v19 & 0x200) == 0)
        goto LABEL_23;
      goto LABEL_39;
    }
  }
  else if ((v19 & 8) == 0)
  {
    goto LABEL_22;
  }
  PB::TextFormatter::format(a2, "slowRollStopTime");
  v19 = *((_WORD *)this + 102);
  if ((v19 & 0x200) == 0)
  {
LABEL_23:
    if ((v19 & 0x400) == 0)
      goto LABEL_24;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "spatialSamplingCount");
  v19 = *((_WORD *)this + 102);
  if ((v19 & 0x400) == 0)
  {
LABEL_24:
    if ((v19 & 0x800) == 0)
      goto LABEL_25;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "spinCumulativeRotation", *((float *)this + 47));
  v19 = *((_WORD *)this + 102);
  if ((v19 & 0x800) == 0)
  {
LABEL_25:
    if ((v19 & 0x1000) == 0)
      goto LABEL_26;
LABEL_42:
    PB::TextFormatter::format(a2, "spinGravityAngleThresholdDegrees", *((float *)this + 49));
    if ((*((_WORD *)this + 102) & 0x10) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_27;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "spinCumulativeRotationThresholdDegrees", *((float *)this + 48));
  v19 = *((_WORD *)this + 102);
  if ((v19 & 0x1000) != 0)
    goto LABEL_42;
LABEL_26:
  if ((v19 & 0x10) != 0)
LABEL_27:
    PB::TextFormatter::format(a2, "timestamp");
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::KappaSpinResult::readFrom(CMMsl::KappaSpinResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  BOOL v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  BOOL v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char v68;
  unsigned int v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char v76;
  unsigned int v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  unint64_t v81;
  char *v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  BOOL v96;
  char v97;
  unsigned int v98;
  uint64_t v99;
  unint64_t v100;
  char v101;
  char v102;
  unsigned int v103;
  uint64_t v104;
  unint64_t v105;
  char v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  char *v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  char v121;
  unsigned int v122;
  uint64_t v123;
  unint64_t v124;
  char v125;
  char v126;
  unsigned int v127;
  uint64_t v128;
  unint64_t v129;
  char v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  char *v134;
  _DWORD *v135;
  char *v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  _DWORD *v142;
  int v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  char *v148;
  _DWORD *v149;
  char *v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  _DWORD *v156;
  int v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  char *v162;
  _DWORD *v163;
  char *v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  _DWORD *v170;
  int v171;
  unint64_t v172;
  unint64_t v173;
  char v174;
  unsigned int v175;
  unint64_t v176;
  char v177;
  char v178;
  unsigned int v179;
  unint64_t v180;
  char v181;
  char v182;
  unsigned int v183;
  unint64_t v184;
  char v185;
  char v186;
  unsigned int v187;
  unint64_t v188;
  char v189;
  char v190;
  unsigned int v191;
  unint64_t v192;
  char v193;
  char v194;
  unsigned int v195;
  unint64_t v196;
  char v197;
  unint64_t v198;
  char *v199;
  _QWORD *v200;
  unint64_t v201;
  char *v202;
  unint64_t v203;
  char *v204;
  _DWORD *v205;
  unint64_t v206;
  char *v207;
  unint64_t v208;
  char *v209;
  char *v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  char *v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  char *v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  char *v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  _QWORD *v240;
  uint64_t v241;
  unint64_t v242;
  unint64_t v243;
  uint64_t v244;
  char v245;
  unsigned int v246;
  unint64_t v248;
  char v249;
  uint64_t v250;
  unint64_t v251;
  char v252;
  _QWORD *v253;
  uint64_t v254;
  unint64_t v255;
  unint64_t v256;
  uint64_t v257;
  char v258;
  unsigned int v259;
  unint64_t v261;
  char v262;
  unint64_t v263;
  char v264;
  _DWORD *v265;
  int v266;
  _DWORD *v267;
  int v268;
  _DWORD *v269;
  int v270;
  unint64_t v271;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (2)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v14 = 0;
      v15 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v16 = v2 + 1;
        v17 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v16;
        v11 |= (unint64_t)(v17 & 0x7F) << v14;
        if ((v17 & 0x80) == 0)
          goto LABEL_21;
        v14 += 7;
        v2 = v16;
        v96 = v15++ > 8;
        if (v96)
          goto LABEL_19;
      }
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v96 = v10++ > 8;
      if (v96)
        goto LABEL_19;
    }
LABEL_21:
    v18 = v11 & 7;
    if (v18 == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    v19 = v11 >> 3;
    if ((int)(v11 >> 3) <= 200)
    {
      switch((int)v19)
      {
        case 'e':
          *((_WORD *)this + 102) |= 0x10u;
          v20 = *((_QWORD *)a2 + 1);
          v21 = *((_QWORD *)a2 + 2);
          v22 = *(_QWORD *)a2;
          if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
          {
            v23 = 0;
            v24 = 0;
            v25 = 0;
            do
            {
              v26 = v20 + 1;
              *((_QWORD *)a2 + 1) = v20 + 1;
              v27 = *(_BYTE *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0)
                goto LABEL_363;
              v23 += 7;
              v20 = v26;
              v96 = v24++ > 8;
            }
            while (!v96);
LABEL_262:
            v25 = 0;
            goto LABEL_363;
          }
          v174 = 0;
          v175 = 0;
          v25 = 0;
          if (v21 <= v20)
            v21 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v21 == v20)
            {
              v25 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v176 = v20 + 1;
              v177 = *(_BYTE *)(v22 + v20);
              *((_QWORD *)a2 + 1) = v176;
              v25 |= (unint64_t)(v177 & 0x7F) << v174;
              if (v177 < 0)
              {
                v174 += 7;
                v20 = v176;
                v96 = v175++ > 8;
                if (v96)
                  goto LABEL_262;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v25 = 0;
            }
            break;
          }
LABEL_363:
          *((_QWORD *)this + 20) = v25;
          goto LABEL_453;
        case 'f':
          *((_WORD *)this + 102) |= 0x4000u;
          v37 = *((_QWORD *)a2 + 1);
          if (v37 >= *((_QWORD *)a2 + 2))
          {
            v40 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v38 = v37 + 1;
            v39 = *(unsigned __int8 *)(*(_QWORD *)a2 + v37);
            *((_QWORD *)a2 + 1) = v38;
            v40 = v39 != 0;
          }
          *((_BYTE *)this + 201) = v40;
          goto LABEL_453;
        case 'g':
          *((_WORD *)this + 102) |= 0x400u;
          v41 = *((_QWORD *)a2 + 1);
          if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_450;
          *((_DWORD *)this + 47) = *(_DWORD *)(*(_QWORD *)a2 + v41);
          goto LABEL_452;
        case 'h':
          *((_WORD *)this + 102) |= 0x2000u;
          v42 = *((_QWORD *)a2 + 1);
          if (v42 >= *((_QWORD *)a2 + 2))
          {
            v45 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v43 = v42 + 1;
            v44 = *(unsigned __int8 *)(*(_QWORD *)a2 + v42);
            *((_QWORD *)a2 + 1) = v43;
            v45 = v44 != 0;
          }
          *((_BYTE *)this + 200) = v45;
          goto LABEL_453;
        case 'i':
          *((_WORD *)this + 102) |= 4u;
          v46 = *((_QWORD *)a2 + 1);
          v47 = *((_QWORD *)a2 + 2);
          v48 = *(_QWORD *)a2;
          if (v46 <= 0xFFFFFFFFFFFFFFF5 && v46 + 10 <= v47)
          {
            v49 = 0;
            v50 = 0;
            v51 = 0;
            do
            {
              v52 = v46 + 1;
              *((_QWORD *)a2 + 1) = v46 + 1;
              v53 = *(_BYTE *)(v48 + v46);
              v51 |= (unint64_t)(v53 & 0x7F) << v49;
              if ((v53 & 0x80) == 0)
                goto LABEL_369;
              v49 += 7;
              v46 = v52;
              v96 = v50++ > 8;
            }
            while (!v96);
LABEL_280:
            v51 = 0;
            goto LABEL_369;
          }
          v182 = 0;
          v183 = 0;
          v51 = 0;
          if (v47 <= v46)
            v47 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v47 == v46)
            {
              v51 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v184 = v46 + 1;
              v185 = *(_BYTE *)(v48 + v46);
              *((_QWORD *)a2 + 1) = v184;
              v51 |= (unint64_t)(v185 & 0x7F) << v182;
              if (v185 < 0)
              {
                v182 += 7;
                v46 = v184;
                v96 = v183++ > 8;
                if (v96)
                  goto LABEL_280;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v51 = 0;
            }
            break;
          }
LABEL_369:
          *((_QWORD *)this + 18) = v51;
          goto LABEL_453;
        case 'j':
          *((_WORD *)this + 102) |= 8u;
          v54 = *((_QWORD *)a2 + 1);
          v55 = *((_QWORD *)a2 + 2);
          v56 = *(_QWORD *)a2;
          if (v54 <= 0xFFFFFFFFFFFFFFF5 && v54 + 10 <= v55)
          {
            v57 = 0;
            v58 = 0;
            v59 = 0;
            do
            {
              v60 = v54 + 1;
              *((_QWORD *)a2 + 1) = v54 + 1;
              v61 = *(_BYTE *)(v56 + v54);
              v59 |= (unint64_t)(v61 & 0x7F) << v57;
              if ((v61 & 0x80) == 0)
                goto LABEL_372;
              v57 += 7;
              v54 = v60;
              v96 = v58++ > 8;
            }
            while (!v96);
LABEL_287:
            v59 = 0;
            goto LABEL_372;
          }
          v186 = 0;
          v187 = 0;
          v59 = 0;
          if (v55 <= v54)
            v55 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v55 == v54)
            {
              v59 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v188 = v54 + 1;
              v189 = *(_BYTE *)(v56 + v54);
              *((_QWORD *)a2 + 1) = v188;
              v59 |= (unint64_t)(v189 & 0x7F) << v186;
              if (v189 < 0)
              {
                v186 += 7;
                v54 = v188;
                v96 = v187++ > 8;
                if (v96)
                  goto LABEL_287;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v59 = 0;
            }
            break;
          }
LABEL_372:
          *((_QWORD *)this + 19) = v59;
          goto LABEL_453;
        case 'k':
          *((_WORD *)this + 102) |= 0x100u;
          v62 = *((_QWORD *)a2 + 1);
          if (v62 > 0xFFFFFFFFFFFFFFFBLL || v62 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_450;
          *((_DWORD *)this + 45) = *(_DWORD *)(*(_QWORD *)a2 + v62);
          goto LABEL_452;
        case 'l':
          *((_WORD *)this + 102) |= 0x80u;
          v63 = *((_QWORD *)a2 + 1);
          if (v63 > 0xFFFFFFFFFFFFFFFBLL || v63 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_450;
          *((_DWORD *)this + 44) = *(_DWORD *)(*(_QWORD *)a2 + v63);
          goto LABEL_452;
        case 'm':
          *((_WORD *)this + 102) |= 0x40u;
          v64 = *((_QWORD *)a2 + 1);
          if (v64 > 0xFFFFFFFFFFFFFFFBLL || v64 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_450;
          *((_DWORD *)this + 43) = *(_DWORD *)(*(_QWORD *)a2 + v64);
          goto LABEL_452;
        default:
          if ((_DWORD)v19 == 1)
          {
            *((_WORD *)this + 102) |= 0x1000u;
            v173 = *((_QWORD *)a2 + 1);
            if (v173 <= 0xFFFFFFFFFFFFFFFBLL && v173 + 4 <= *((_QWORD *)a2 + 2))
            {
              *((_DWORD *)this + 49) = *(_DWORD *)(*(_QWORD *)a2 + v173);
              goto LABEL_452;
            }
          }
          else
          {
            if ((_DWORD)v19 != 2)
            {
LABEL_19:
              if ((PB::Reader::skip(a2) & 1) == 0)
                return 0;
              goto LABEL_453;
            }
            *((_WORD *)this + 102) |= 0x800u;
            v36 = *((_QWORD *)a2 + 1);
            if (v36 <= 0xFFFFFFFFFFFFFFFBLL && v36 + 4 <= *((_QWORD *)a2 + 2))
            {
              *((_DWORD *)this + 48) = *(_DWORD *)(*(_QWORD *)a2 + v36);
              goto LABEL_452;
            }
          }
          break;
      }
      goto LABEL_450;
    }
    switch((int)v19)
    {
      case 201:
        *((_WORD *)this + 102) |= 1u;
        v28 = *((_QWORD *)a2 + 1);
        v29 = *((_QWORD *)a2 + 2);
        v30 = *(_QWORD *)a2;
        if (v28 <= 0xFFFFFFFFFFFFFFF5 && v28 + 10 <= v29)
        {
          v31 = 0;
          v32 = 0;
          v33 = 0;
          do
          {
            v34 = v28 + 1;
            *((_QWORD *)a2 + 1) = v28 + 1;
            v35 = *(_BYTE *)(v30 + v28);
            v33 |= (unint64_t)(v35 & 0x7F) << v31;
            if ((v35 & 0x80) == 0)
              goto LABEL_366;
            v31 += 7;
            v28 = v34;
            v96 = v32++ > 8;
          }
          while (!v96);
LABEL_269:
          v33 = 0;
          goto LABEL_366;
        }
        v178 = 0;
        v179 = 0;
        v33 = 0;
        if (v29 <= v28)
          v29 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v29 == v28)
          {
            v33 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v180 = v28 + 1;
            v181 = *(_BYTE *)(v30 + v28);
            *((_QWORD *)a2 + 1) = v180;
            v33 |= (unint64_t)(v181 & 0x7F) << v178;
            if (v181 < 0)
            {
              v178 += 7;
              v28 = v180;
              v96 = v179++ > 8;
              if (v96)
                goto LABEL_269;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v33 = 0;
          }
          break;
        }
LABEL_366:
        *((_QWORD *)this + 16) = v33;
        goto LABEL_453;
      case 202:
        *((_WORD *)this + 102) |= 2u;
        v65 = *((_QWORD *)a2 + 1);
        v66 = *((_QWORD *)a2 + 2);
        v67 = *(_QWORD *)a2;
        if (v65 <= 0xFFFFFFFFFFFFFFF5 && v65 + 10 <= v66)
        {
          v68 = 0;
          v69 = 0;
          v70 = 0;
          do
          {
            v71 = v65 + 1;
            *((_QWORD *)a2 + 1) = v65 + 1;
            v72 = *(_BYTE *)(v67 + v65);
            v70 |= (unint64_t)(v72 & 0x7F) << v68;
            if ((v72 & 0x80) == 0)
              goto LABEL_375;
            v68 += 7;
            v65 = v71;
            v96 = v69++ > 8;
          }
          while (!v96);
LABEL_294:
          v70 = 0;
          goto LABEL_375;
        }
        v190 = 0;
        v191 = 0;
        v70 = 0;
        if (v66 <= v65)
          v66 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v66 == v65)
          {
            v70 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v192 = v65 + 1;
            v193 = *(_BYTE *)(v67 + v65);
            *((_QWORD *)a2 + 1) = v192;
            v70 |= (unint64_t)(v193 & 0x7F) << v190;
            if (v193 < 0)
            {
              v190 += 7;
              v65 = v192;
              v96 = v191++ > 8;
              if (v96)
                goto LABEL_294;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v70 = 0;
          }
          break;
        }
LABEL_375:
        *((_QWORD *)this + 17) = v70;
        goto LABEL_453;
      case 203:
        *((_WORD *)this + 102) |= 0x200u;
        v73 = *((_QWORD *)a2 + 1);
        v74 = *((_QWORD *)a2 + 2);
        v75 = *(_QWORD *)a2;
        if (v73 <= 0xFFFFFFFFFFFFFFF5 && v73 + 10 <= v74)
        {
          v76 = 0;
          v77 = 0;
          v78 = 0;
          do
          {
            v79 = v73 + 1;
            *((_QWORD *)a2 + 1) = v73 + 1;
            v80 = *(_BYTE *)(v75 + v73);
            v78 |= (unint64_t)(v80 & 0x7F) << v76;
            if ((v80 & 0x80) == 0)
              goto LABEL_378;
            v76 += 7;
            v73 = v79;
            v96 = v77++ > 8;
          }
          while (!v96);
LABEL_301:
          LODWORD(v78) = 0;
          goto LABEL_378;
        }
        v194 = 0;
        v195 = 0;
        v78 = 0;
        if (v74 <= v73)
          v74 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v74 == v73)
          {
            LODWORD(v78) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v196 = v73 + 1;
            v197 = *(_BYTE *)(v75 + v73);
            *((_QWORD *)a2 + 1) = v196;
            v78 |= (unint64_t)(v197 & 0x7F) << v194;
            if (v197 < 0)
            {
              v194 += 7;
              v73 = v196;
              v96 = v195++ > 8;
              if (v96)
                goto LABEL_301;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v78) = 0;
          }
          break;
        }
LABEL_378:
        *((_DWORD *)this + 46) = v78;
        goto LABEL_453;
      case 204:
        *((_WORD *)this + 102) |= 0x20u;
        v81 = *((_QWORD *)a2 + 1);
        if (v81 > 0xFFFFFFFFFFFFFFFBLL || v81 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_450;
        *((_DWORD *)this + 42) = *(_DWORD *)(*(_QWORD *)a2 + v81);
        goto LABEL_452;
      case 205:
        if (v18 == 2)
        {
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          if (*((_QWORD *)a2 + 1) < *((_QWORD *)a2 + 2) && !*((_BYTE *)a2 + 24))
          {
            v82 = (char *)*((_QWORD *)this + 11);
            do
            {
              v83 = *((_QWORD *)this + 12);
              if ((unint64_t)v82 >= v83)
              {
                v84 = (char *)*((_QWORD *)this + 10);
                v85 = (v82 - v84) >> 3;
                v86 = v85 + 1;
                if ((unint64_t)(v85 + 1) >> 61)
                  goto LABEL_463;
                v87 = v83 - (_QWORD)v84;
                if (v87 >> 2 > v86)
                  v86 = v87 >> 2;
                if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8)
                  v88 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v88 = v86;
                if (v88)
                {
                  v88 = (unint64_t)sub_2429112FC(v88);
                  v84 = (char *)*((_QWORD *)this + 10);
                  v82 = (char *)*((_QWORD *)this + 11);
                }
                else
                {
                  v89 = 0;
                }
                v90 = (_QWORD *)(v88 + 8 * v85);
                *v90 = 0;
                v91 = (char *)(v90 + 1);
                while (v82 != v84)
                {
                  v92 = *((_QWORD *)v82 - 1);
                  v82 -= 8;
                  *--v90 = v92;
                }
                *((_QWORD *)this + 10) = v90;
                *((_QWORD *)this + 11) = v91;
                *((_QWORD *)this + 12) = v88 + 8 * v89;
                if (v84)
                  operator delete(v84);
                v82 = v91;
              }
              else
              {
                *(_QWORD *)v82 = 0;
                v82 += 8;
              }
              *((_QWORD *)this + 11) = v82;
              v94 = *((_QWORD *)a2 + 1);
              v93 = *((_QWORD *)a2 + 2);
              v95 = *(_QWORD *)a2;
              v96 = v94 > 0xFFFFFFFFFFFFFFF5 || v94 + 10 > v93;
              if (v96)
              {
                v97 = 0;
                v98 = 0;
                v104 = 0;
                if (v93 <= v94)
                  v99 = *((_QWORD *)a2 + 1);
                else
                  v99 = *((_QWORD *)a2 + 2);
                while (1)
                {
                  if (v99 == v94)
                    goto LABEL_313;
                  v100 = v94++;
                  v101 = *(_BYTE *)(v95 + v100);
                  *((_QWORD *)a2 + 1) = v94;
                  v104 |= (unint64_t)(v101 & 0x7F) << v97;
                  if ((v101 & 0x80) == 0)
                    break;
                  v97 += 7;
                  v96 = v98++ > 8;
                  if (v96)
                  {
                    v104 = 0;
                    goto LABEL_132;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v104 = 0;
LABEL_132:
                v105 = v100 + 1;
              }
              else
              {
                v102 = 0;
                v103 = 0;
                v104 = 0;
                while (1)
                {
                  v105 = v94 + 1;
                  *((_QWORD *)a2 + 1) = v94 + 1;
                  v106 = *(_BYTE *)(v95 + v94);
                  v104 |= (unint64_t)(v106 & 0x7F) << v102;
                  if ((v106 & 0x80) == 0)
                    break;
                  v102 += 7;
                  v94 = v105;
                  v96 = v103++ > 8;
                  if (v96)
                  {
                    v104 = 0;
                    break;
                  }
                }
              }
              *((_QWORD *)v82 - 1) = v104;
            }
            while (v105 < v93 && !*((_BYTE *)a2 + 24));
          }
          goto LABEL_314;
        }
        v199 = (char *)*((_QWORD *)this + 11);
        v198 = *((_QWORD *)this + 12);
        if ((unint64_t)v199 >= v198)
        {
          v210 = (char *)*((_QWORD *)this + 10);
          v211 = (v199 - v210) >> 3;
          v212 = v211 + 1;
          if ((unint64_t)(v211 + 1) >> 61)
            goto LABEL_463;
          v213 = v198 - (_QWORD)v210;
          if (v213 >> 2 > v212)
            v212 = v213 >> 2;
          if ((unint64_t)v213 >= 0x7FFFFFFFFFFFFFF8)
            v214 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v214 = v212;
          if (v214)
          {
            v214 = (unint64_t)sub_2429112FC(v214);
            v210 = (char *)*((_QWORD *)this + 10);
            v199 = (char *)*((_QWORD *)this + 11);
          }
          else
          {
            v215 = 0;
          }
          v240 = (_QWORD *)(v214 + 8 * v211);
          *v240 = 0;
          v200 = v240 + 1;
          while (v199 != v210)
          {
            v241 = *((_QWORD *)v199 - 1);
            v199 -= 8;
            *--v240 = v241;
          }
          *((_QWORD *)this + 10) = v240;
          *((_QWORD *)this + 11) = v200;
          *((_QWORD *)this + 12) = v214 + 8 * v215;
          if (v210)
            operator delete(v210);
        }
        else
        {
          *(_QWORD *)v199 = 0;
          v200 = v199 + 8;
        }
        *((_QWORD *)this + 11) = v200;
        v242 = *((_QWORD *)a2 + 1);
        v243 = *((_QWORD *)a2 + 2);
        v244 = *(_QWORD *)a2;
        v245 = 0;
        v246 = 0;
        if (v242 <= 0xFFFFFFFFFFFFFFF5 && v242 + 10 <= v243)
        {
          v250 = 0;
          while (1)
          {
            v251 = v242 + 1;
            *((_QWORD *)a2 + 1) = v242 + 1;
            v252 = *(_BYTE *)(v244 + v242);
            v250 |= (unint64_t)(v252 & 0x7F) << v245;
            if ((v252 & 0x80) == 0)
              goto LABEL_426;
            v245 += 7;
            v242 = v251;
            v96 = v246++ > 8;
            if (v96)
              goto LABEL_422;
          }
        }
        v250 = 0;
        if (v243 <= v242)
          v243 = *((_QWORD *)a2 + 1);
        while (v243 != v242)
        {
          v248 = v242 + 1;
          v249 = *(_BYTE *)(v244 + v242);
          *((_QWORD *)a2 + 1) = v248;
          v250 |= (unint64_t)(v249 & 0x7F) << v245;
          if ((v249 & 0x80) == 0)
            goto LABEL_424;
          v245 += 7;
          v242 = v248;
          v96 = v246++ > 8;
          if (v96)
            goto LABEL_422;
        }
        goto LABEL_423;
      case 206:
        if (v18 == 2)
        {
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          if (*((_QWORD *)a2 + 1) < *((_QWORD *)a2 + 2) && !*((_BYTE *)a2 + 24))
          {
            v82 = (char *)*((_QWORD *)this + 14);
            do
            {
              v107 = *((_QWORD *)this + 15);
              if ((unint64_t)v82 >= v107)
              {
                v108 = (char *)*((_QWORD *)this + 13);
                v109 = (v82 - v108) >> 3;
                v110 = v109 + 1;
                if ((unint64_t)(v109 + 1) >> 61)
                  goto LABEL_463;
                v111 = v107 - (_QWORD)v108;
                if (v111 >> 2 > v110)
                  v110 = v111 >> 2;
                if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFF8)
                  v112 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v112 = v110;
                if (v112)
                {
                  v112 = (unint64_t)sub_2429112FC(v112);
                  v108 = (char *)*((_QWORD *)this + 13);
                  v82 = (char *)*((_QWORD *)this + 14);
                }
                else
                {
                  v113 = 0;
                }
                v114 = (_QWORD *)(v112 + 8 * v109);
                *v114 = 0;
                v115 = (char *)(v114 + 1);
                while (v82 != v108)
                {
                  v116 = *((_QWORD *)v82 - 1);
                  v82 -= 8;
                  *--v114 = v116;
                }
                *((_QWORD *)this + 13) = v114;
                *((_QWORD *)this + 14) = v115;
                *((_QWORD *)this + 15) = v112 + 8 * v113;
                if (v108)
                  operator delete(v108);
                v82 = v115;
              }
              else
              {
                *(_QWORD *)v82 = 0;
                v82 += 8;
              }
              *((_QWORD *)this + 14) = v82;
              v118 = *((_QWORD *)a2 + 1);
              v117 = *((_QWORD *)a2 + 2);
              v119 = *(_QWORD *)a2;
              if (v118 <= 0xFFFFFFFFFFFFFFF5 && v118 + 10 <= v117)
              {
                v126 = 0;
                v127 = 0;
                v128 = 0;
                while (1)
                {
                  v129 = v118 + 1;
                  *((_QWORD *)a2 + 1) = v118 + 1;
                  v130 = *(_BYTE *)(v119 + v118);
                  v128 |= (unint64_t)(v130 & 0x7F) << v126;
                  if ((v130 & 0x80) == 0)
                    goto LABEL_178;
                  v126 += 7;
                  v118 = v129;
                  v96 = v127++ > 8;
                  if (v96)
                  {
                    v128 = 0;
                    goto LABEL_178;
                  }
                }
              }
              v121 = 0;
              v122 = 0;
              v128 = 0;
              if (v117 <= v118)
                v123 = *((_QWORD *)a2 + 1);
              else
                v123 = *((_QWORD *)a2 + 2);
              while (1)
              {
                if (v123 == v118)
                {
LABEL_313:
                  *((_BYTE *)a2 + 24) = 1;
                  *((_QWORD *)v82 - 1) = 0;
                  goto LABEL_314;
                }
                v124 = v118++;
                v125 = *(_BYTE *)(v119 + v124);
                *((_QWORD *)a2 + 1) = v118;
                v128 |= (unint64_t)(v125 & 0x7F) << v121;
                if ((v125 & 0x80) == 0)
                  break;
                v121 += 7;
                v96 = v122++ > 8;
                if (v96)
                {
                  v128 = 0;
                  goto LABEL_177;
                }
              }
              if (*((_BYTE *)a2 + 24))
                v128 = 0;
LABEL_177:
              v129 = v124 + 1;
LABEL_178:
              *((_QWORD *)v82 - 1) = v128;
            }
            while (v129 < v117 && !*((_BYTE *)a2 + 24));
          }
          goto LABEL_314;
        }
        v202 = (char *)*((_QWORD *)this + 14);
        v201 = *((_QWORD *)this + 15);
        if ((unint64_t)v202 >= v201)
        {
          v216 = (char *)*((_QWORD *)this + 13);
          v217 = (v202 - v216) >> 3;
          v218 = v217 + 1;
          if ((unint64_t)(v217 + 1) >> 61)
LABEL_463:
            sub_242729A44();
          v219 = v201 - (_QWORD)v216;
          if (v219 >> 2 > v218)
            v218 = v219 >> 2;
          if ((unint64_t)v219 >= 0x7FFFFFFFFFFFFFF8)
            v220 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v220 = v218;
          if (v220)
          {
            v220 = (unint64_t)sub_2429112FC(v220);
            v216 = (char *)*((_QWORD *)this + 13);
            v202 = (char *)*((_QWORD *)this + 14);
          }
          else
          {
            v221 = 0;
          }
          v253 = (_QWORD *)(v220 + 8 * v217);
          *v253 = 0;
          v200 = v253 + 1;
          while (v202 != v216)
          {
            v254 = *((_QWORD *)v202 - 1);
            v202 -= 8;
            *--v253 = v254;
          }
          *((_QWORD *)this + 13) = v253;
          *((_QWORD *)this + 14) = v200;
          *((_QWORD *)this + 15) = v220 + 8 * v221;
          if (v216)
            operator delete(v216);
        }
        else
        {
          *(_QWORD *)v202 = 0;
          v200 = v202 + 8;
        }
        *((_QWORD *)this + 14) = v200;
        v255 = *((_QWORD *)a2 + 1);
        v256 = *((_QWORD *)a2 + 2);
        v257 = *(_QWORD *)a2;
        v258 = 0;
        v259 = 0;
        if (v255 > 0xFFFFFFFFFFFFFFF5 || v255 + 10 > v256)
        {
          v250 = 0;
          if (v256 <= v255)
            v256 = *((_QWORD *)a2 + 1);
          while (v256 != v255)
          {
            v261 = v255 + 1;
            v262 = *(_BYTE *)(v257 + v255);
            *((_QWORD *)a2 + 1) = v261;
            v250 |= (unint64_t)(v262 & 0x7F) << v258;
            if ((v262 & 0x80) == 0)
            {
LABEL_424:
              if (*((_BYTE *)a2 + 24))
                v250 = 0;
              goto LABEL_426;
            }
            v258 += 7;
            v255 = v261;
            v96 = v259++ > 8;
            if (v96)
            {
LABEL_422:
              v250 = 0;
              goto LABEL_426;
            }
          }
LABEL_423:
          v250 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v250 = 0;
          while (1)
          {
            v263 = v255 + 1;
            *((_QWORD *)a2 + 1) = v255 + 1;
            v264 = *(_BYTE *)(v257 + v255);
            v250 |= (unint64_t)(v264 & 0x7F) << v258;
            if ((v264 & 0x80) == 0)
              break;
            v258 += 7;
            v255 = v263;
            v96 = v259++ > 8;
            if (v96)
              goto LABEL_422;
          }
        }
LABEL_426:
        *(v200 - 1) = v250;
        goto LABEL_453;
      case 207:
        if (v18 == 2)
        {
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v131 = *((_QWORD *)a2 + 1);
          v132 = *((_QWORD *)a2 + 2);
          while (v131 < v132 && !*((_BYTE *)a2 + 24))
          {
            v134 = (char *)*((_QWORD *)this + 2);
            v133 = *((_QWORD *)this + 3);
            if ((unint64_t)v134 >= v133)
            {
              v136 = (char *)*((_QWORD *)this + 1);
              v137 = (v134 - v136) >> 2;
              v138 = v137 + 1;
              if ((unint64_t)(v137 + 1) >> 62)
                goto LABEL_462;
              v139 = v133 - (_QWORD)v136;
              if (v139 >> 1 > v138)
                v138 = v139 >> 1;
              if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFFCLL)
                v140 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v140 = v138;
              if (v140)
              {
                v140 = (unint64_t)sub_2429114B8(v140);
                v136 = (char *)*((_QWORD *)this + 1);
                v134 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v141 = 0;
              }
              v142 = (_DWORD *)(v140 + 4 * v137);
              *v142 = 0;
              v135 = v142 + 1;
              while (v134 != v136)
              {
                v143 = *((_DWORD *)v134 - 1);
                v134 -= 4;
                *--v142 = v143;
              }
              *((_QWORD *)this + 1) = v142;
              *((_QWORD *)this + 2) = v135;
              *((_QWORD *)this + 3) = v140 + 4 * v141;
              if (v136)
                operator delete(v136);
            }
            else
            {
              *(_DWORD *)v134 = 0;
              v135 = v134 + 4;
            }
            *((_QWORD *)this + 2) = v135;
            v144 = *((_QWORD *)a2 + 1);
            if (v144 > 0xFFFFFFFFFFFFFFFBLL || v144 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_312;
            *(v135 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v144);
            v132 = *((_QWORD *)a2 + 2);
            v131 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v131;
          }
          goto LABEL_314;
        }
        v204 = (char *)*((_QWORD *)this + 2);
        v203 = *((_QWORD *)this + 3);
        if ((unint64_t)v204 >= v203)
        {
          v222 = (char *)*((_QWORD *)this + 1);
          v223 = (v204 - v222) >> 2;
          v224 = v223 + 1;
          if ((unint64_t)(v223 + 1) >> 62)
            goto LABEL_462;
          v225 = v203 - (_QWORD)v222;
          if (v225 >> 1 > v224)
            v224 = v225 >> 1;
          if ((unint64_t)v225 >= 0x7FFFFFFFFFFFFFFCLL)
            v226 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v226 = v224;
          if (v226)
          {
            v226 = (unint64_t)sub_2429114B8(v226);
            v222 = (char *)*((_QWORD *)this + 1);
            v204 = (char *)*((_QWORD *)this + 2);
          }
          else
          {
            v227 = 0;
          }
          v265 = (_DWORD *)(v226 + 4 * v223);
          *v265 = 0;
          v205 = v265 + 1;
          while (v204 != v222)
          {
            v266 = *((_DWORD *)v204 - 1);
            v204 -= 4;
            *--v265 = v266;
          }
          *((_QWORD *)this + 1) = v265;
          *((_QWORD *)this + 2) = v205;
          *((_QWORD *)this + 3) = v226 + 4 * v227;
          if (v222)
            operator delete(v222);
        }
        else
        {
          *(_DWORD *)v204 = 0;
          v205 = v204 + 4;
        }
        *((_QWORD *)this + 2) = v205;
        goto LABEL_448;
      case 208:
        if (v18 == 2)
        {
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v145 = *((_QWORD *)a2 + 1);
          v146 = *((_QWORD *)a2 + 2);
          while (v145 < v146 && !*((_BYTE *)a2 + 24))
          {
            v148 = (char *)*((_QWORD *)this + 8);
            v147 = *((_QWORD *)this + 9);
            if ((unint64_t)v148 >= v147)
            {
              v150 = (char *)*((_QWORD *)this + 7);
              v151 = (v148 - v150) >> 2;
              v152 = v151 + 1;
              if ((unint64_t)(v151 + 1) >> 62)
                goto LABEL_462;
              v153 = v147 - (_QWORD)v150;
              if (v153 >> 1 > v152)
                v152 = v153 >> 1;
              if ((unint64_t)v153 >= 0x7FFFFFFFFFFFFFFCLL)
                v154 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v154 = v152;
              if (v154)
              {
                v154 = (unint64_t)sub_2429114B8(v154);
                v150 = (char *)*((_QWORD *)this + 7);
                v148 = (char *)*((_QWORD *)this + 8);
              }
              else
              {
                v155 = 0;
              }
              v156 = (_DWORD *)(v154 + 4 * v151);
              *v156 = 0;
              v149 = v156 + 1;
              while (v148 != v150)
              {
                v157 = *((_DWORD *)v148 - 1);
                v148 -= 4;
                *--v156 = v157;
              }
              *((_QWORD *)this + 7) = v156;
              *((_QWORD *)this + 8) = v149;
              *((_QWORD *)this + 9) = v154 + 4 * v155;
              if (v150)
                operator delete(v150);
            }
            else
            {
              *(_DWORD *)v148 = 0;
              v149 = v148 + 4;
            }
            *((_QWORD *)this + 8) = v149;
            v158 = *((_QWORD *)a2 + 1);
            if (v158 > 0xFFFFFFFFFFFFFFFBLL || v158 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_312;
            *(v149 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v158);
            v146 = *((_QWORD *)a2 + 2);
            v145 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v145;
          }
          goto LABEL_314;
        }
        v207 = (char *)*((_QWORD *)this + 8);
        v206 = *((_QWORD *)this + 9);
        if ((unint64_t)v207 >= v206)
        {
          v228 = (char *)*((_QWORD *)this + 7);
          v229 = (v207 - v228) >> 2;
          v230 = v229 + 1;
          if ((unint64_t)(v229 + 1) >> 62)
            goto LABEL_462;
          v231 = v206 - (_QWORD)v228;
          if (v231 >> 1 > v230)
            v230 = v231 >> 1;
          if ((unint64_t)v231 >= 0x7FFFFFFFFFFFFFFCLL)
            v232 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v232 = v230;
          if (v232)
          {
            v232 = (unint64_t)sub_2429114B8(v232);
            v228 = (char *)*((_QWORD *)this + 7);
            v207 = (char *)*((_QWORD *)this + 8);
          }
          else
          {
            v233 = 0;
          }
          v267 = (_DWORD *)(v232 + 4 * v229);
          *v267 = 0;
          v205 = v267 + 1;
          while (v207 != v228)
          {
            v268 = *((_DWORD *)v207 - 1);
            v207 -= 4;
            *--v267 = v268;
          }
          *((_QWORD *)this + 7) = v267;
          *((_QWORD *)this + 8) = v205;
          *((_QWORD *)this + 9) = v232 + 4 * v233;
          if (v228)
            operator delete(v228);
        }
        else
        {
          *(_DWORD *)v207 = 0;
          v205 = v207 + 4;
        }
        *((_QWORD *)this + 8) = v205;
        goto LABEL_448;
      case 209:
        if (v18 != 2)
        {
          v209 = (char *)*((_QWORD *)this + 5);
          v208 = *((_QWORD *)this + 6);
          if ((unint64_t)v209 >= v208)
          {
            v234 = (char *)*((_QWORD *)this + 4);
            v235 = (v209 - v234) >> 2;
            v236 = v235 + 1;
            if ((unint64_t)(v235 + 1) >> 62)
LABEL_462:
              sub_242729A44();
            v237 = v208 - (_QWORD)v234;
            if (v237 >> 1 > v236)
              v236 = v237 >> 1;
            if ((unint64_t)v237 >= 0x7FFFFFFFFFFFFFFCLL)
              v238 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v238 = v236;
            if (v238)
            {
              v238 = (unint64_t)sub_2429114B8(v238);
              v234 = (char *)*((_QWORD *)this + 4);
              v209 = (char *)*((_QWORD *)this + 5);
            }
            else
            {
              v239 = 0;
            }
            v269 = (_DWORD *)(v238 + 4 * v235);
            *v269 = 0;
            v205 = v269 + 1;
            while (v209 != v234)
            {
              v270 = *((_DWORD *)v209 - 1);
              v209 -= 4;
              *--v269 = v270;
            }
            *((_QWORD *)this + 4) = v269;
            *((_QWORD *)this + 5) = v205;
            *((_QWORD *)this + 6) = v238 + 4 * v239;
            if (v234)
              operator delete(v234);
          }
          else
          {
            *(_DWORD *)v209 = 0;
            v205 = v209 + 4;
          }
          *((_QWORD *)this + 5) = v205;
LABEL_448:
          v271 = *((_QWORD *)a2 + 1);
          if (v271 <= 0xFFFFFFFFFFFFFFFBLL && v271 + 4 <= *((_QWORD *)a2 + 2))
          {
            *(v205 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v271);
LABEL_452:
            *((_QWORD *)a2 + 1) += 4;
            goto LABEL_453;
          }
LABEL_450:
          *((_BYTE *)a2 + 24) = 1;
LABEL_453:
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          continue;
        }
        if ((PB::Reader::placeMark() & 1) == 0)
        {
          v159 = *((_QWORD *)a2 + 1);
          v160 = *((_QWORD *)a2 + 2);
          while (v159 < v160 && !*((_BYTE *)a2 + 24))
          {
            v162 = (char *)*((_QWORD *)this + 5);
            v161 = *((_QWORD *)this + 6);
            if ((unint64_t)v162 >= v161)
            {
              v164 = (char *)*((_QWORD *)this + 4);
              v165 = (v162 - v164) >> 2;
              v166 = v165 + 1;
              if ((unint64_t)(v165 + 1) >> 62)
                goto LABEL_462;
              v167 = v161 - (_QWORD)v164;
              if (v167 >> 1 > v166)
                v166 = v167 >> 1;
              if ((unint64_t)v167 >= 0x7FFFFFFFFFFFFFFCLL)
                v168 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v168 = v166;
              if (v168)
              {
                v168 = (unint64_t)sub_2429114B8(v168);
                v164 = (char *)*((_QWORD *)this + 4);
                v162 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v169 = 0;
              }
              v170 = (_DWORD *)(v168 + 4 * v165);
              *v170 = 0;
              v163 = v170 + 1;
              while (v162 != v164)
              {
                v171 = *((_DWORD *)v162 - 1);
                v162 -= 4;
                *--v170 = v171;
              }
              *((_QWORD *)this + 4) = v170;
              *((_QWORD *)this + 5) = v163;
              *((_QWORD *)this + 6) = v168 + 4 * v169;
              if (v164)
                operator delete(v164);
            }
            else
            {
              *(_DWORD *)v162 = 0;
              v163 = v162 + 4;
            }
            *((_QWORD *)this + 5) = v163;
            v172 = *((_QWORD *)a2 + 1);
            if (v172 > 0xFFFFFFFFFFFFFFFBLL || v172 + 4 > *((_QWORD *)a2 + 2))
            {
LABEL_312:
              *((_BYTE *)a2 + 24) = 1;
              break;
            }
            *(v163 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v172);
            v160 = *((_QWORD *)a2 + 2);
            v159 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v159;
          }
LABEL_314:
          PB::Reader::recallMark();
          goto LABEL_453;
        }
        return 0;
      default:
        goto LABEL_19;
    }
  }
}

uint64_t CMMsl::KappaSpinResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float *v9;
  float *v10;
  float v11;
  float *v12;
  float *v13;
  float v14;
  float *v15;
  float *v16;
  float v17;

  v3 = this;
  v4 = *(_WORD *)(this + 204);
  if ((v4 & 0x1000) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 196));
    v4 = *(_WORD *)(v3 + 204);
    if ((v4 & 0x800) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_35;
    }
  }
  else if ((*(_WORD *)(this + 204) & 0x800) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 192));
  v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x4000) == 0)
      goto LABEL_5;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 0x4000) == 0)
  {
LABEL_5:
    if ((v4 & 0x400) == 0)
      goto LABEL_6;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2);
  v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 0x400) == 0)
  {
LABEL_6:
    if ((v4 & 0x2000) == 0)
      goto LABEL_7;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 188));
  v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 0x2000) == 0)
  {
LABEL_7:
    if ((v4 & 4) == 0)
      goto LABEL_8;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2);
  v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0)
      goto LABEL_9;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(float *)(v3 + 180));
  v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 0x80) == 0)
  {
LABEL_11:
    if ((v4 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 176));
  v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 0x40) == 0)
  {
LABEL_12:
    if ((v4 & 1) == 0)
      goto LABEL_13;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(float *)(v3 + 172));
  v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 1) == 0)
  {
LABEL_13:
    if ((v4 & 2) == 0)
      goto LABEL_14;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 2) == 0)
  {
LABEL_14:
    if ((v4 & 0x200) == 0)
      goto LABEL_15;
LABEL_46:
    this = PB::Writer::writeVarInt(a2);
    if ((*(_WORD *)(v3 + 204) & 0x20) == 0)
      goto LABEL_17;
    goto LABEL_16;
  }
LABEL_45:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 0x200) != 0)
    goto LABEL_46;
LABEL_15:
  if ((v4 & 0x20) != 0)
LABEL_16:
    this = PB::Writer::write(a2, *(float *)(v3 + 168));
LABEL_17:
  v5 = *(_QWORD *)(v3 + 80);
  v6 = *(_QWORD *)(v3 + 88);
  while (v5 != v6)
  {
    v5 += 8;
    this = PB::Writer::writeVarInt(a2);
  }
  v7 = *(_QWORD *)(v3 + 104);
  v8 = *(_QWORD *)(v3 + 112);
  while (v7 != v8)
  {
    v7 += 8;
    this = PB::Writer::writeVarInt(a2);
  }
  v9 = *(float **)(v3 + 8);
  v10 = *(float **)(v3 + 16);
  while (v9 != v10)
  {
    v11 = *v9++;
    this = PB::Writer::write(a2, v11);
  }
  v12 = *(float **)(v3 + 56);
  v13 = *(float **)(v3 + 64);
  while (v12 != v13)
  {
    v14 = *v12++;
    this = PB::Writer::write(a2, v14);
  }
  v16 = *(float **)(v3 + 32);
  v15 = *(float **)(v3 + 40);
  while (v16 != v15)
  {
    v17 = *v16++;
    this = PB::Writer::write(a2, v17);
  }
  return this;
}

uint64_t CMMsl::KappaSpinResult::hash_value(CMMsl::KappaSpinResult *this)
{
  __int16 v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = *((_WORD *)this + 102);
  if ((v2 & 0x1000) == 0)
  {
    v3 = 0;
    if ((*((_WORD *)this + 102) & 0x800) != 0)
      goto LABEL_3;
LABEL_32:
    v5 = 0;
    if ((v2 & 0x10) != 0)
      goto LABEL_6;
    goto LABEL_33;
  }
  v24 = *((float *)this + 49);
  v3 = LODWORD(v24);
  if (v24 == 0.0)
    v3 = 0;
  if ((*((_WORD *)this + 102) & 0x800) == 0)
    goto LABEL_32;
LABEL_3:
  v4 = *((float *)this + 48);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_6:
    v6 = *((_QWORD *)this + 20);
    if ((*((_WORD *)this + 102) & 0x4000) != 0)
      goto LABEL_7;
    goto LABEL_34;
  }
LABEL_33:
  v6 = 0;
  if ((*((_WORD *)this + 102) & 0x4000) != 0)
  {
LABEL_7:
    v7 = *((unsigned __int8 *)this + 201);
    if ((*((_WORD *)this + 102) & 0x400) != 0)
      goto LABEL_8;
LABEL_35:
    v9 = 0;
    if ((*((_WORD *)this + 102) & 0x2000) != 0)
      goto LABEL_11;
    goto LABEL_36;
  }
LABEL_34:
  v7 = 0;
  if ((*((_WORD *)this + 102) & 0x400) == 0)
    goto LABEL_35;
LABEL_8:
  v8 = *((float *)this + 47);
  v9 = LODWORD(v8);
  if (v8 == 0.0)
    v9 = 0;
  if ((*((_WORD *)this + 102) & 0x2000) != 0)
  {
LABEL_11:
    v10 = *((unsigned __int8 *)this + 200);
    if ((v2 & 4) != 0)
      goto LABEL_12;
    goto LABEL_37;
  }
LABEL_36:
  v10 = 0;
  if ((v2 & 4) != 0)
  {
LABEL_12:
    v11 = *((_QWORD *)this + 18);
    if ((v2 & 8) != 0)
      goto LABEL_13;
    goto LABEL_38;
  }
LABEL_37:
  v11 = 0;
  if ((v2 & 8) != 0)
  {
LABEL_13:
    v12 = *((_QWORD *)this + 19);
    if ((*((_WORD *)this + 102) & 0x100) != 0)
      goto LABEL_14;
LABEL_39:
    v14 = 0;
    if ((v2 & 0x80) != 0)
      goto LABEL_17;
LABEL_40:
    v16 = 0;
    if ((v2 & 0x40) != 0)
      goto LABEL_20;
LABEL_41:
    v18 = 0;
    if ((v2 & 1) != 0)
      goto LABEL_23;
    goto LABEL_42;
  }
LABEL_38:
  v12 = 0;
  if ((*((_WORD *)this + 102) & 0x100) == 0)
    goto LABEL_39;
LABEL_14:
  v13 = *((float *)this + 45);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((v2 & 0x80) == 0)
    goto LABEL_40;
LABEL_17:
  v15 = *((float *)this + 44);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  if ((v2 & 0x40) == 0)
    goto LABEL_41;
LABEL_20:
  v17 = *((float *)this + 43);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  if ((v2 & 1) != 0)
  {
LABEL_23:
    v19 = *((_QWORD *)this + 16);
    if ((v2 & 2) != 0)
      goto LABEL_24;
    goto LABEL_43;
  }
LABEL_42:
  v19 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_24:
    v20 = *((_QWORD *)this + 17);
    if ((v2 & 0x200) != 0)
      goto LABEL_25;
    goto LABEL_44;
  }
LABEL_43:
  v20 = 0;
  if ((v2 & 0x200) != 0)
  {
LABEL_25:
    v21 = *((int *)this + 46);
    if ((v2 & 0x20) != 0)
      goto LABEL_26;
LABEL_45:
    v23 = 0;
    goto LABEL_46;
  }
LABEL_44:
  v21 = 0;
  if ((v2 & 0x20) == 0)
    goto LABEL_45;
LABEL_26:
  v22 = *((float *)this + 42);
  v23 = LODWORD(v22);
  if (v22 == 0.0)
    v23 = 0;
LABEL_46:
  v25 = v5 ^ v3 ^ v6 ^ v7 ^ v9 ^ v10 ^ v11 ^ v12 ^ v14 ^ v16 ^ v18 ^ v19 ^ v20 ^ v21 ^ v23 ^ PBHashBytes();
  v26 = PBHashBytes();
  v27 = v25 ^ v26 ^ PBHashBytes();
  v28 = PBHashBytes();
  return v27 ^ v28 ^ PBHashBytes();
}

void CMMsl::KappaSteps::~KappaSteps(CMMsl::KappaSteps *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::KappaSteps::KappaSteps(uint64_t this, const CMMsl::KappaSteps *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;

  *(_QWORD *)this = &off_25135ECC0;
  *(_DWORD *)(this + 32) = 0;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_BYTE *)(this + 32) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 32) & 0x10) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 7);
    v3 |= 0x10u;
    *(_BYTE *)(this + 32) = v3;
    *(_DWORD *)(this + 28) = v5;
    v2 = *((_BYTE *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *(_BYTE *)(this + 32) = v3;
    *(_DWORD *)(this + 20) = v6;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        return this;
LABEL_12:
      v8 = *((_DWORD *)a2 + 6);
      *(_BYTE *)(this + 32) = v3 | 8;
      *(_DWORD *)(this + 24) = v8;
      return this;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *(_BYTE *)(this + 32) = v3;
  *(_DWORD *)(this + 16) = v7;
  if ((*((_BYTE *)a2 + 32) & 8) != 0)
    goto LABEL_12;
  return this;
}

uint64_t CMMsl::KappaSteps::operator=(uint64_t a1, const CMMsl::KappaSteps *a2)
{
  uint64_t v3;
  int v4;
  __int128 v5;
  _BYTE v7[8];
  uint64_t v8;
  int v9;
  __int128 v10;

  if ((const CMMsl::KappaSteps *)a1 != a2)
  {
    CMMsl::KappaSteps::KappaSteps((uint64_t)v7, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v8;
    v8 = v3;
    v4 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v9;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 20);
    *(_OWORD *)(a1 + 20) = v10;
    v10 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaSteps *a2, CMMsl::KappaSteps *a3)
{
  int v3;
  uint64_t v4;
  float result;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  return result;
}

float CMMsl::KappaSteps::KappaSteps(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135ECC0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_25135ECC0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return result;
}

uint64_t CMMsl::KappaSteps::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  __int128 v5;
  uint64_t v6;
  int v7;
  __int128 v8;
  _QWORD v10[2];
  int v11;
  __int128 v12;

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_DWORD *)(a2 + 16);
    v5 = *(_OWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 32) = 0;
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v10[0] = &off_25135ECC0;
    v10[1] = v6;
    v7 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v4;
    v11 = v7;
    v8 = *(_OWORD *)(a1 + 20);
    *(_OWORD *)(a1 + 20) = v5;
    v12 = v8;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::KappaSteps::formatText(CMMsl::KappaSteps *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "currentCadence", *((float *)this + 4));
    v5 = *((_BYTE *)this + 32);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((_BYTE *)this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "deltaSteps");
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(a2, "stepCount");
    if ((*((_BYTE *)this + 32) & 1) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(a2, "pedometerArmConstrainedState");
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 0x10) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 1) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "timestamp");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaSteps::readFrom(CMMsl::KappaSteps *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_26;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_21;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_26:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 32) |= 1u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v45 = 0;
          v46 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v21)
            {
              v25 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_92;
            }
            v47 = v21++;
            v48 = *(_BYTE *)(v22 + v47);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v48 & 0x7F) << v45;
            if ((v48 & 0x80) == 0)
              break;
            v45 += 7;
            v14 = v46++ > 8;
            if (v14)
            {
              v25 = 0;
LABEL_91:
              v2 = v47 + 1;
              goto LABEL_92;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v25 = 0;
          goto LABEL_91;
        }
        v23 = 0;
        v24 = 0;
        v25 = 0;
        do
        {
          v2 = v21 + 1;
          *((_QWORD *)a2 + 1) = v21 + 1;
          v26 = *(_BYTE *)(v22 + v21);
          v25 |= (unint64_t)(v26 & 0x7F) << v23;
          if ((v26 & 0x80) == 0)
            goto LABEL_92;
          v23 += 7;
          v21 = v2;
          v14 = v24++ > 8;
        }
        while (!v14);
        v25 = 0;
LABEL_92:
        *((_QWORD *)this + 1) = v25;
        break;
      case 2u:
        *((_BYTE *)this + 32) |= 0x10u;
        v27 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v28 = *(_QWORD *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v49 = 0;
          v50 = 0;
          v31 = 0;
          if (v2 <= v27)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_97;
            }
            v51 = v27++;
            v52 = *(_BYTE *)(v28 + v51);
            *((_QWORD *)a2 + 1) = v27;
            v31 |= (unint64_t)(v52 & 0x7F) << v49;
            if ((v52 & 0x80) == 0)
              break;
            v49 += 7;
            v14 = v50++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
LABEL_96:
              v2 = v51 + 1;
              goto LABEL_97;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v31) = 0;
          goto LABEL_96;
        }
        v29 = 0;
        v30 = 0;
        v31 = 0;
        do
        {
          v2 = v27 + 1;
          *((_QWORD *)a2 + 1) = v27 + 1;
          v32 = *(_BYTE *)(v28 + v27);
          v31 |= (unint64_t)(v32 & 0x7F) << v29;
          if ((v32 & 0x80) == 0)
            goto LABEL_97;
          v29 += 7;
          v27 = v2;
          v14 = v30++ > 8;
        }
        while (!v14);
        LODWORD(v31) = 0;
LABEL_97:
        *((_DWORD *)this + 7) = v31;
        break;
      case 3u:
        *((_BYTE *)this + 32) |= 4u;
        v33 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v34 = *(_QWORD *)a2;
        if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
        {
          v53 = 0;
          v54 = 0;
          v37 = 0;
          if (v2 <= v33)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v33)
            {
              LODWORD(v37) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_102;
            }
            v55 = v33++;
            v56 = *(_BYTE *)(v34 + v55);
            *((_QWORD *)a2 + 1) = v33;
            v37 |= (unint64_t)(v56 & 0x7F) << v53;
            if ((v56 & 0x80) == 0)
              break;
            v53 += 7;
            v14 = v54++ > 8;
            if (v14)
            {
              LODWORD(v37) = 0;
LABEL_101:
              v2 = v55 + 1;
              goto LABEL_102;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v37) = 0;
          goto LABEL_101;
        }
        v35 = 0;
        v36 = 0;
        v37 = 0;
        do
        {
          v2 = v33 + 1;
          *((_QWORD *)a2 + 1) = v33 + 1;
          v38 = *(_BYTE *)(v34 + v33);
          v37 |= (unint64_t)(v38 & 0x7F) << v35;
          if ((v38 & 0x80) == 0)
            goto LABEL_102;
          v35 += 7;
          v33 = v2;
          v14 = v36++ > 8;
        }
        while (!v14);
        LODWORD(v37) = 0;
LABEL_102:
        *((_DWORD *)this + 5) = v37;
        break;
      case 4u:
        *((_BYTE *)this + 32) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 5u:
        *((_BYTE *)this + 32) |= 8u;
        v39 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v40 = *(_QWORD *)a2;
        if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
        {
          v57 = 0;
          v58 = 0;
          v43 = 0;
          if (v2 <= v39)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v39)
            {
              LODWORD(v43) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_107;
            }
            v59 = v39++;
            v60 = *(_BYTE *)(v40 + v59);
            *((_QWORD *)a2 + 1) = v39;
            v43 |= (unint64_t)(v60 & 0x7F) << v57;
            if ((v60 & 0x80) == 0)
              break;
            v57 += 7;
            v14 = v58++ > 8;
            if (v14)
            {
              LODWORD(v43) = 0;
LABEL_106:
              v2 = v59 + 1;
              goto LABEL_107;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v43) = 0;
          goto LABEL_106;
        }
        v41 = 0;
        v42 = 0;
        v43 = 0;
        do
        {
          v2 = v39 + 1;
          *((_QWORD *)a2 + 1) = v39 + 1;
          v44 = *(_BYTE *)(v40 + v39);
          v43 |= (unint64_t)(v44 & 0x7F) << v41;
          if ((v44 & 0x80) == 0)
            goto LABEL_107;
          v41 += 7;
          v39 = v2;
          v14 = v42++ > 8;
        }
        while (!v14);
        LODWORD(v43) = 0;
LABEL_107:
        *((_DWORD *)this + 6) = v43;
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::KappaSteps::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(this + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_10:
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  if ((*(_BYTE *)(v3 + 32) & 8) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::KappaSteps::hash_value(CMMsl::KappaSteps *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  uint64_t v6;

  if ((*((_BYTE *)this + 32) & 1) != 0)
  {
    v1 = *((_QWORD *)this + 1);
    if ((*((_BYTE *)this + 32) & 0x10) != 0)
    {
LABEL_3:
      v2 = *((unsigned int *)this + 7);
      if ((*((_BYTE *)this + 32) & 4) != 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else
  {
    v1 = 0;
    if ((*((_BYTE *)this + 32) & 0x10) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 32) & 4) != 0)
  {
LABEL_4:
    v3 = *((unsigned int *)this + 5);
    if ((*((_BYTE *)this + 32) & 2) != 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  v3 = 0;
  if ((*((_BYTE *)this + 32) & 2) != 0)
  {
LABEL_5:
    v4 = *((float *)this + 4);
    v5 = LODWORD(v4);
    if (v4 == 0.0)
      v5 = 0;
    if ((*((_BYTE *)this + 32) & 8) != 0)
      goto LABEL_8;
LABEL_13:
    v6 = 0;
    return v2 ^ v1 ^ v3 ^ v5 ^ v6;
  }
LABEL_12:
  v5 = 0;
  if ((*((_BYTE *)this + 32) & 8) == 0)
    goto LABEL_13;
LABEL_8:
  v6 = *((unsigned int *)this + 6);
  return v2 ^ v1 ^ v3 ^ v5 ^ v6;
}

void CMMsl::KappaStepsResult::~KappaStepsResult(CMMsl::KappaStepsResult *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::KappaStepsResult::KappaStepsResult(uint64_t this, const CMMsl::KappaStepsResult *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  char v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = &off_25135ECF8;
  *(_DWORD *)(this + 60) = 0;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 8) != 0)
  {
    v4 = *((_QWORD *)a2 + 4);
    v3 = 8;
    *(_WORD *)(this + 60) = 8;
    *(_QWORD *)(this + 32) = v4;
    v2 = *((_WORD *)a2 + 30);
    if ((v2 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_WORD *)a2 + 30) & 0x100) != 0)
  {
LABEL_5:
    v5 = *((_BYTE *)a2 + 56);
    v3 |= 0x100u;
    *(_WORD *)(this + 60) = v3;
    *(_BYTE *)(this + 56) = v5;
    v2 = *((_WORD *)a2 + 30);
  }
LABEL_6:
  if ((v2 & 0x80) != 0)
  {
    v6 = *((_DWORD *)a2 + 13);
    v3 |= 0x80u;
    *(_WORD *)(this + 60) = v3;
    *(_DWORD *)(this + 52) = v6;
    v2 = *((_WORD *)a2 + 30);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_16;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 11);
  v3 |= 0x20u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 44) = v7;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_17;
  }
LABEL_16:
  v8 = *((_DWORD *)a2 + 10);
  v3 |= 0x10u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 40) = v8;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 4) == 0)
      goto LABEL_11;
    goto LABEL_18;
  }
LABEL_17:
  v9 = *((_DWORD *)a2 + 12);
  v3 |= 0x40u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 48) = v9;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 4) == 0)
  {
LABEL_11:
    if ((v2 & 1) == 0)
      goto LABEL_12;
    goto LABEL_19;
  }
LABEL_18:
  v10 = *((_QWORD *)a2 + 3);
  v3 |= 4u;
  *(_WORD *)(this + 60) = v3;
  *(_QWORD *)(this + 24) = v10;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 1) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0)
      return this;
LABEL_20:
    v12 = *((_QWORD *)a2 + 2);
    *(_WORD *)(this + 60) = v3 | 2;
    *(_QWORD *)(this + 16) = v12;
    return this;
  }
LABEL_19:
  v11 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 60) = v3;
  *(_QWORD *)(this + 8) = v11;
  if ((*((_WORD *)a2 + 30) & 2) != 0)
    goto LABEL_20;
  return this;
}

uint64_t CMMsl::KappaStepsResult::operator=(uint64_t a1, const CMMsl::KappaStepsResult *a2)
{
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  __int128 v7;
  __int128 v8;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  int v15;
  char v16;
  int v17;

  if ((const CMMsl::KappaStepsResult *)a1 != a2)
  {
    CMMsl::KappaStepsResult::KappaStepsResult((uint64_t)&v10, a2);
    v3 = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a1 + 60) = v17;
    v17 = v3;
    LOBYTE(v3) = *(_BYTE *)(a1 + 56);
    *(_BYTE *)(a1 + 56) = v16;
    v16 = v3;
    v4 = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a1 + 52) = v15;
    v15 = v4;
    v5 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v13;
    v13 = v5;
    v6 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v14;
    v14 = v6;
    v7 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    v12 = v7;
    v8 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v11;
    v11 = v8;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaStepsResult *a2, CMMsl::KappaStepsResult *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  float result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v3;
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  LOBYTE(v4) = *((_BYTE *)this + 56);
  *((_BYTE *)this + 56) = *((_BYTE *)a2 + 56);
  *((_BYTE *)a2 + 56) = v4;
  v5 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v5;
  v6 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v6;
  result = *((float *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((float *)a2 + 10) = result;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  v8 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v8;
  v9 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v9;
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v10;
  return result;
}

float CMMsl::KappaStepsResult::KappaStepsResult(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135ECF8;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  result = *(float *)(a2 + 40);
  *(float *)(a1 + 40) = result;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_25135ECF8;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  result = *(float *)(a2 + 40);
  *(float *)(a1 + 40) = result;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::KappaStepsResult::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  int v5;
  int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  void (**v15)(CMMsl::KappaStepsResult *__hidden);
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  int v20;
  char v21;
  int v22;

  if (a1 != a2)
  {
    v15 = &off_25135ECF8;
    v3 = *(_DWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 60) = 0;
    v4 = *(_BYTE *)(a2 + 56);
    v5 = *(_DWORD *)(a2 + 52);
    v6 = *(_DWORD *)(a2 + 48);
    v22 = *(_DWORD *)(a1 + 60);
    v7 = *(_BYTE *)(a1 + 56);
    *(_BYTE *)(a1 + 56) = v4;
    v21 = v7;
    v20 = *(_DWORD *)(a1 + 52);
    v8 = *(_QWORD *)(a1 + 40);
    v9 = *(_QWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 52) = v5;
    *(_QWORD *)(a1 + 40) = v9;
    v18 = v8;
    v10 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v6;
    v19 = v10;
    v17 = *(_OWORD *)(a1 + 24);
    v11 = *(_OWORD *)(a1 + 8);
    v12 = *(_OWORD *)(a2 + 8);
    v13 = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 60) = v3;
    *(_OWORD *)(a1 + 24) = v13;
    *(_OWORD *)(a1 + 8) = v12;
    v16 = v11;
    PB::Base::~Base((PB::Base *)&v15);
  }
  return a1;
}

uint64_t CMMsl::KappaStepsResult::formatText(CMMsl::KappaStepsResult *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "currentCadence", *((float *)this + 10));
    v5 = *((_WORD *)this + 30);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "deltaSteps", *((float *)this + 11));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "epochFirstTimestamp");
  v5 = *((_WORD *)this + 30);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "epochLastTimestamp");
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x100) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "hasSteps");
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "pedometerArmConstrainedState");
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 4) == 0)
      goto LABEL_9;
LABEL_19:
    PB::TextFormatter::format(a2, "stepCountEventTimestamp");
    if ((*((_WORD *)this + 30) & 8) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_10;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "stepCount", *((float *)this + 13));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 4) != 0)
    goto LABEL_19;
LABEL_9:
  if ((v5 & 8) != 0)
LABEL_10:
    PB::TextFormatter::format(a2, "timestamp");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaStepsResult::readFrom(CMMsl::KappaStepsResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  char v33;
  int v34;
  BOOL v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  char v47;
  unint64_t v48;
  uint64_t v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  char v53;
  char v54;
  unsigned int v55;
  unint64_t v56;
  char v57;
  char v58;
  unsigned int v59;
  unint64_t v60;
  char v61;
  char v62;
  unsigned int v63;
  unint64_t v64;
  char v65;
  char v66;
  unsigned int v67;
  unint64_t v68;
  char v69;
  char v70;
  unsigned int v71;
  unint64_t v72;
  char v73;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_26;
          v15 += 7;
          v2 = v17;
          v14 = v16++ > 8;
          if (v14)
            goto LABEL_19;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_26:
        if ((v11 & 7) != 4)
        {
          v21 = v11 >> 3;
          switch((v11 >> 3))
          {
            case 'e':
              *((_WORD *)this + 30) |= 8u;
              v22 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v23 = *(_QWORD *)a2;
              if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v2)
              {
                v54 = 0;
                v55 = 0;
                v26 = 0;
                if (v2 <= v22)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v22)
                  {
                    v26 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_119;
                  }
                  v56 = v22++;
                  v57 = *(_BYTE *)(v23 + v56);
                  *((_QWORD *)a2 + 1) = v22;
                  v26 |= (unint64_t)(v57 & 0x7F) << v54;
                  if ((v57 & 0x80) == 0)
                    break;
                  v54 += 7;
                  v14 = v55++ > 8;
                  if (v14)
                  {
                    v26 = 0;
LABEL_118:
                    v2 = v56 + 1;
                    goto LABEL_119;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v26 = 0;
                goto LABEL_118;
              }
              v24 = 0;
              v25 = 0;
              v26 = 0;
              do
              {
                v2 = v22 + 1;
                *((_QWORD *)a2 + 1) = v22 + 1;
                v27 = *(_BYTE *)(v23 + v22);
                v26 |= (unint64_t)(v27 & 0x7F) << v24;
                if ((v27 & 0x80) == 0)
                  goto LABEL_119;
                v24 += 7;
                v22 = v2;
                v14 = v25++ > 8;
              }
              while (!v14);
              v26 = 0;
LABEL_119:
              *((_QWORD *)this + 4) = v26;
              goto LABEL_21;
            case 'f':
              *((_WORD *)this + 30) |= 0x100u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v35 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v34 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v35 = v34 != 0;
              }
              *((_BYTE *)this + 56) = v35;
              goto LABEL_21;
            case 'g':
              *((_WORD *)this + 30) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_54;
              *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_114;
            case 'h':
              *((_WORD *)this + 30) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_54;
              *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_114;
            case 'i':
              *((_WORD *)this + 30) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_114:
                v2 = *((_QWORD *)a2 + 1) + 4;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_54:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_21;
            case 'j':
              *((_WORD *)this + 30) |= 0x40u;
              v36 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v37 = *(_QWORD *)a2;
              if (v36 > 0xFFFFFFFFFFFFFFF5 || v36 + 10 > v2)
              {
                v62 = 0;
                v63 = 0;
                v40 = 0;
                if (v2 <= v36)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v36)
                  {
                    LODWORD(v40) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_129;
                  }
                  v64 = v36++;
                  v65 = *(_BYTE *)(v37 + v64);
                  *((_QWORD *)a2 + 1) = v36;
                  v40 |= (unint64_t)(v65 & 0x7F) << v62;
                  if ((v65 & 0x80) == 0)
                    break;
                  v62 += 7;
                  v14 = v63++ > 8;
                  if (v14)
                  {
                    LODWORD(v40) = 0;
LABEL_128:
                    v2 = v64 + 1;
                    goto LABEL_129;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v40) = 0;
                goto LABEL_128;
              }
              v38 = 0;
              v39 = 0;
              v40 = 0;
              do
              {
                v2 = v36 + 1;
                *((_QWORD *)a2 + 1) = v36 + 1;
                v41 = *(_BYTE *)(v37 + v36);
                v40 |= (unint64_t)(v41 & 0x7F) << v38;
                if ((v41 & 0x80) == 0)
                  goto LABEL_129;
                v38 += 7;
                v36 = v2;
                v14 = v39++ > 8;
              }
              while (!v14);
              LODWORD(v40) = 0;
LABEL_129:
              *((_DWORD *)this + 12) = v40;
              goto LABEL_21;
            case 'k':
              *((_WORD *)this + 30) |= 4u;
              v42 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v43 = *(_QWORD *)a2;
              if (v42 > 0xFFFFFFFFFFFFFFF5 || v42 + 10 > v2)
              {
                v66 = 0;
                v67 = 0;
                v46 = 0;
                if (v2 <= v42)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v42)
                  {
                    v46 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_134;
                  }
                  v68 = v42++;
                  v69 = *(_BYTE *)(v43 + v68);
                  *((_QWORD *)a2 + 1) = v42;
                  v46 |= (unint64_t)(v69 & 0x7F) << v66;
                  if ((v69 & 0x80) == 0)
                    break;
                  v66 += 7;
                  v14 = v67++ > 8;
                  if (v14)
                  {
                    v46 = 0;
LABEL_133:
                    v2 = v68 + 1;
                    goto LABEL_134;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v46 = 0;
                goto LABEL_133;
              }
              v44 = 0;
              v45 = 0;
              v46 = 0;
              do
              {
                v2 = v42 + 1;
                *((_QWORD *)a2 + 1) = v42 + 1;
                v47 = *(_BYTE *)(v43 + v42);
                v46 |= (unint64_t)(v47 & 0x7F) << v44;
                if ((v47 & 0x80) == 0)
                  goto LABEL_134;
                v44 += 7;
                v42 = v2;
                v14 = v45++ > 8;
              }
              while (!v14);
              v46 = 0;
LABEL_134:
              *((_QWORD *)this + 3) = v46;
              goto LABEL_21;
            default:
              if ((_DWORD)v21 == 201)
              {
                *((_WORD *)this + 30) |= 1u;
                v48 = *((_QWORD *)a2 + 1);
                v2 = *((_QWORD *)a2 + 2);
                v49 = *(_QWORD *)a2;
                if (v48 > 0xFFFFFFFFFFFFFFF5 || v48 + 10 > v2)
                {
                  v70 = 0;
                  v71 = 0;
                  v52 = 0;
                  if (v2 <= v48)
                    v2 = *((_QWORD *)a2 + 1);
                  while (1)
                  {
                    if (v2 == v48)
                    {
                      v52 = 0;
                      *((_BYTE *)a2 + 24) = 1;
                      goto LABEL_139;
                    }
                    v72 = v48++;
                    v73 = *(_BYTE *)(v49 + v72);
                    *((_QWORD *)a2 + 1) = v48;
                    v52 |= (unint64_t)(v73 & 0x7F) << v70;
                    if ((v73 & 0x80) == 0)
                      break;
                    v70 += 7;
                    v14 = v71++ > 8;
                    if (v14)
                    {
                      v52 = 0;
                      goto LABEL_138;
                    }
                  }
                  if (*((_BYTE *)a2 + 24))
                    v52 = 0;
LABEL_138:
                  v2 = v72 + 1;
                }
                else
                {
                  v50 = 0;
                  v51 = 0;
                  v52 = 0;
                  while (1)
                  {
                    v2 = v48 + 1;
                    *((_QWORD *)a2 + 1) = v48 + 1;
                    v53 = *(_BYTE *)(v49 + v48);
                    v52 |= (unint64_t)(v53 & 0x7F) << v50;
                    if ((v53 & 0x80) == 0)
                      break;
                    v50 += 7;
                    v48 = v2;
                    v14 = v51++ > 8;
                    if (v14)
                    {
                      v52 = 0;
                      break;
                    }
                  }
                }
LABEL_139:
                *((_QWORD *)this + 1) = v52;
              }
              else if ((_DWORD)v21 == 202)
              {
                *((_WORD *)this + 30) |= 2u;
                v28 = *((_QWORD *)a2 + 1);
                v2 = *((_QWORD *)a2 + 2);
                v29 = *(_QWORD *)a2;
                if (v28 > 0xFFFFFFFFFFFFFFF5 || v28 + 10 > v2)
                {
                  v58 = 0;
                  v59 = 0;
                  v32 = 0;
                  if (v2 <= v28)
                    v2 = *((_QWORD *)a2 + 1);
                  while (1)
                  {
                    if (v2 == v28)
                    {
                      v32 = 0;
                      *((_BYTE *)a2 + 24) = 1;
                      goto LABEL_124;
                    }
                    v60 = v28++;
                    v61 = *(_BYTE *)(v29 + v60);
                    *((_QWORD *)a2 + 1) = v28;
                    v32 |= (unint64_t)(v61 & 0x7F) << v58;
                    if ((v61 & 0x80) == 0)
                      break;
                    v58 += 7;
                    v14 = v59++ > 8;
                    if (v14)
                    {
                      v32 = 0;
                      goto LABEL_123;
                    }
                  }
                  if (*((_BYTE *)a2 + 24))
                    v32 = 0;
LABEL_123:
                  v2 = v60 + 1;
                }
                else
                {
                  v30 = 0;
                  v31 = 0;
                  v32 = 0;
                  while (1)
                  {
                    v2 = v28 + 1;
                    *((_QWORD *)a2 + 1) = v28 + 1;
                    v33 = *(_BYTE *)(v29 + v28);
                    v32 |= (unint64_t)(v33 & 0x7F) << v30;
                    if ((v33 & 0x80) == 0)
                      break;
                    v30 += 7;
                    v28 = v2;
                    v14 = v31++ > 8;
                    if (v14)
                    {
                      v32 = 0;
                      break;
                    }
                  }
                }
LABEL_124:
                *((_QWORD *)this + 2) = v32;
              }
              else
              {
LABEL_19:
                result = PB::Reader::skip(a2);
                if (!(_DWORD)result)
                  return result;
                v2 = *((_QWORD *)a2 + 1);
              }
LABEL_21:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaStepsResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 60);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_WORD *)(v3 + 60);
    if ((v4 & 0x100) == 0)
    {
LABEL_3:
      if ((v4 & 0x80) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((*(_WORD *)(this + 60) & 0x100) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x80) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 4) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_18:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_WORD *)(v3 + 60) & 2) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::KappaStepsResult::hash_value(CMMsl::KappaStepsResult *this)
{
  __int16 v1;
  uint64_t v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *((_WORD *)this + 30);
  if ((v1 & 8) != 0)
  {
    v2 = *((_QWORD *)this + 4);
    if ((*((_WORD *)this + 30) & 0x100) != 0)
    {
LABEL_3:
      v3 = *((unsigned __int8 *)this + 56);
      if ((v1 & 0x80) != 0)
        goto LABEL_4;
LABEL_19:
      v5 = 0;
      if ((v1 & 0x20) != 0)
        goto LABEL_7;
LABEL_20:
      v7 = 0;
      if ((v1 & 0x10) != 0)
        goto LABEL_10;
LABEL_21:
      v9 = 0;
      if ((v1 & 0x40) != 0)
        goto LABEL_13;
      goto LABEL_22;
    }
  }
  else
  {
    v2 = 0;
    if ((*((_WORD *)this + 30) & 0x100) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_19;
LABEL_4:
  v4 = *((float *)this + 13);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_20;
LABEL_7:
  v6 = *((float *)this + 11);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_21;
LABEL_10:
  v8 = *((float *)this + 10);
  v9 = LODWORD(v8);
  if (v8 == 0.0)
    v9 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_13:
    v10 = *((unsigned int *)this + 12);
    if ((v1 & 4) != 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  v10 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_14:
    v11 = *((_QWORD *)this + 3);
    if ((v1 & 1) != 0)
      goto LABEL_15;
LABEL_24:
    v12 = 0;
    if ((v1 & 2) != 0)
      goto LABEL_16;
LABEL_25:
    v13 = 0;
    return v3 ^ v2 ^ v5 ^ v7 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13;
  }
LABEL_23:
  v11 = 0;
  if ((v1 & 1) == 0)
    goto LABEL_24;
LABEL_15:
  v12 = *((_QWORD *)this + 1);
  if ((v1 & 2) == 0)
    goto LABEL_25;
LABEL_16:
  v13 = *((_QWORD *)this + 2);
  return v3 ^ v2 ^ v5 ^ v7 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13;
}

void CMMsl::KappaTrigger::~KappaTrigger(CMMsl::KappaTrigger *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_25135ED30;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::KappaTrigger::~KappaTrigger(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::KappaTrigger *CMMsl::KappaTrigger::KappaTrigger(CMMsl::KappaTrigger *this, const CMMsl::KappaTrigger *a2)
{
  _QWORD *v4;
  int v5;
  int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  int v10;
  int v11;
  char v13;
  char v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  char v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;

  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (_QWORD *)((char *)this + 8);
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_QWORD *)this = &off_25135ED30;
  *((_DWORD *)this + 53) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 9) = 0;
  v5 = *((_DWORD *)a2 + 53);
  if ((v5 & 4) != 0)
  {
    v7 = *((_QWORD *)a2 + 12);
    v6 = 4;
    *((_DWORD *)this + 53) = 4;
    *((_QWORD *)this + 12) = v7;
    v5 = *((_DWORD *)a2 + 53);
    if ((v5 & 0x80000000) == 0)
      goto LABEL_6;
  }
  else
  {
    v6 = 0;
    if ((v5 & 0x80000000) == 0)
      goto LABEL_6;
  }
  v8 = *((_BYTE *)a2 + 211);
  v6 |= 0x80000000;
  *((_DWORD *)this + 53) = v6;
  *((_BYTE *)this + 211) = v8;
  v5 = *((_DWORD *)a2 + 53);
LABEL_6:
  if ((v5 & 1) != 0)
  {
    v9 = *((_QWORD *)a2 + 10);
    *((_DWORD *)this + 53) = v6 | 1;
    *((_QWORD *)this + 10) = v9;
  }
  if (this != a2)
  {
    sub_2429111C4(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
    sub_242911380((_QWORD *)this + 7, *((char **)a2 + 7), *((char **)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 2);
    sub_242911380((_QWORD *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
  }
  v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x10000000) != 0)
  {
    v13 = *((_BYTE *)a2 + 208);
    *((_DWORD *)this + 53) |= 0x10000000u;
    *((_BYTE *)this + 208) = v13;
    v10 = *((_DWORD *)a2 + 53);
    if ((v10 & 0x20000000) == 0)
    {
LABEL_12:
      if ((v10 & 0x400000) == 0)
        goto LABEL_13;
      goto LABEL_43;
    }
  }
  else if ((v10 & 0x20000000) == 0)
  {
    goto LABEL_12;
  }
  v14 = *((_BYTE *)a2 + 209);
  *((_DWORD *)this + 53) |= 0x20000000u;
  *((_BYTE *)this + 209) = v14;
  v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x400000) == 0)
  {
LABEL_13:
    if ((v10 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_44;
  }
LABEL_43:
  v15 = *((_DWORD *)a2 + 46);
  *((_DWORD *)this + 53) |= 0x400000u;
  *((_DWORD *)this + 46) = v15;
  v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x10) == 0)
  {
LABEL_14:
    if ((v10 & 0x80000) == 0)
      goto LABEL_15;
    goto LABEL_45;
  }
LABEL_44:
  v16 = *((_DWORD *)a2 + 28);
  *((_DWORD *)this + 53) |= 0x10u;
  *((_DWORD *)this + 28) = v16;
  v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x80000) == 0)
  {
LABEL_15:
    if ((v10 & 0x40000) == 0)
      goto LABEL_16;
    goto LABEL_46;
  }
LABEL_45:
  v17 = *((_DWORD *)a2 + 43);
  *((_DWORD *)this + 53) |= 0x80000u;
  *((_DWORD *)this + 43) = v17;
  v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x40000) == 0)
  {
LABEL_16:
    if ((v10 & 0x20000) == 0)
      goto LABEL_17;
    goto LABEL_47;
  }
LABEL_46:
  v18 = *((_DWORD *)a2 + 42);
  *((_DWORD *)this + 53) |= 0x40000u;
  *((_DWORD *)this + 42) = v18;
  v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x20000) == 0)
  {
LABEL_17:
    if ((v10 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_48;
  }
LABEL_47:
  v19 = *((_DWORD *)a2 + 41);
  *((_DWORD *)this + 53) |= 0x20000u;
  *((_DWORD *)this + 41) = v19;
  v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x10000) == 0)
  {
LABEL_18:
    if ((v10 & 0x8000) == 0)
      goto LABEL_19;
    goto LABEL_49;
  }
LABEL_48:
  v20 = *((_DWORD *)a2 + 40);
  *((_DWORD *)this + 53) |= 0x10000u;
  *((_DWORD *)this + 40) = v20;
  v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x8000) == 0)
  {
LABEL_19:
    if ((v10 & 0x4000) == 0)
      goto LABEL_20;
    goto LABEL_50;
  }
LABEL_49:
  v21 = *((_DWORD *)a2 + 39);
  *((_DWORD *)this + 53) |= 0x8000u;
  *((_DWORD *)this + 39) = v21;
  v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x4000) == 0)
  {
LABEL_20:
    if ((v10 & 0x2000) == 0)
      goto LABEL_21;
    goto LABEL_51;
  }
LABEL_50:
  v22 = *((_DWORD *)a2 + 38);
  *((_DWORD *)this + 53) |= 0x4000u;
  *((_DWORD *)this + 38) = v22;
  v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x2000) == 0)
  {
LABEL_21:
    if ((v10 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_52;
  }
LABEL_51:
  v23 = *((_DWORD *)a2 + 37);
  *((_DWORD *)this + 53) |= 0x2000u;
  *((_DWORD *)this + 37) = v23;
  v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x100000) == 0)
  {
LABEL_22:
    if ((v10 & 0x100) == 0)
      goto LABEL_23;
    goto LABEL_53;
  }
LABEL_52:
  v24 = *((_DWORD *)a2 + 44);
  *((_DWORD *)this + 53) |= 0x100000u;
  *((_DWORD *)this + 44) = v24;
  v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x100) == 0)
  {
LABEL_23:
    if ((v10 & 0x1000000) == 0)
      goto LABEL_24;
    goto LABEL_54;
  }
LABEL_53:
  v25 = *((_DWORD *)a2 + 32);
  *((_DWORD *)this + 53) |= 0x100u;
  *((_DWORD *)this + 32) = v25;
  v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x1000000) == 0)
  {
LABEL_24:
    if ((v10 & 0x20) == 0)
      goto LABEL_25;
    goto LABEL_55;
  }
LABEL_54:
  v26 = *((_DWORD *)a2 + 48);
  *((_DWORD *)this + 53) |= 0x1000000u;
  *((_DWORD *)this + 48) = v26;
  v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x20) == 0)
  {
LABEL_25:
    if ((v10 & 8) == 0)
      goto LABEL_26;
    goto LABEL_56;
  }
LABEL_55:
  v27 = *((_DWORD *)a2 + 29);
  *((_DWORD *)this + 53) |= 0x20u;
  *((_DWORD *)this + 29) = v27;
  v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 8) == 0)
  {
LABEL_26:
    if ((v10 & 0x2000000) == 0)
      goto LABEL_27;
    goto LABEL_57;
  }
LABEL_56:
  v28 = *((_QWORD *)a2 + 13);
  *((_DWORD *)this + 53) |= 8u;
  *((_QWORD *)this + 13) = v28;
  v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v10 & 0x4000000) == 0)
      goto LABEL_28;
    goto LABEL_58;
  }
LABEL_57:
  v29 = *((_DWORD *)a2 + 49);
  *((_DWORD *)this + 53) |= 0x2000000u;
  *((_DWORD *)this + 49) = v29;
  v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v10 & 0x8000000) == 0)
      goto LABEL_29;
    goto LABEL_59;
  }
LABEL_58:
  v30 = *((_DWORD *)a2 + 50);
  *((_DWORD *)this + 53) |= 0x4000000u;
  *((_DWORD *)this + 50) = v30;
  v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x8000000) == 0)
  {
LABEL_29:
    if ((v10 & 0x800) == 0)
      goto LABEL_30;
    goto LABEL_60;
  }
LABEL_59:
  v31 = *((_DWORD *)a2 + 51);
  *((_DWORD *)this + 53) |= 0x8000000u;
  *((_DWORD *)this + 51) = v31;
  v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x800) == 0)
  {
LABEL_30:
    if ((v10 & 0x80) == 0)
      goto LABEL_31;
    goto LABEL_61;
  }
LABEL_60:
  v32 = *((_DWORD *)a2 + 35);
  *((_DWORD *)this + 53) |= 0x800u;
  *((_DWORD *)this + 35) = v32;
  v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x80) == 0)
  {
LABEL_31:
    if ((v10 & 2) == 0)
      goto LABEL_32;
    goto LABEL_62;
  }
LABEL_61:
  v33 = *((_DWORD *)a2 + 31);
  *((_DWORD *)this + 53) |= 0x80u;
  *((_DWORD *)this + 31) = v33;
  v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 2) == 0)
  {
LABEL_32:
    if ((v10 & 0x40000000) == 0)
      goto LABEL_33;
    goto LABEL_63;
  }
LABEL_62:
  v34 = *((_QWORD *)a2 + 11);
  *((_DWORD *)this + 53) |= 2u;
  *((_QWORD *)this + 11) = v34;
  v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x40000000) == 0)
  {
LABEL_33:
    if ((v10 & 0x1000) == 0)
      goto LABEL_34;
    goto LABEL_64;
  }
LABEL_63:
  v35 = *((_BYTE *)a2 + 210);
  *((_DWORD *)this + 53) |= 0x40000000u;
  *((_BYTE *)this + 210) = v35;
  v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x1000) == 0)
  {
LABEL_34:
    if ((v10 & 0x200) == 0)
      goto LABEL_35;
    goto LABEL_65;
  }
LABEL_64:
  v36 = *((_DWORD *)a2 + 36);
  *((_DWORD *)this + 53) |= 0x1000u;
  *((_DWORD *)this + 36) = v36;
  v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x200) == 0)
  {
LABEL_35:
    if ((v10 & 0x40) == 0)
      goto LABEL_36;
    goto LABEL_66;
  }
LABEL_65:
  v37 = *((_DWORD *)a2 + 33);
  *((_DWORD *)this + 53) |= 0x200u;
  *((_DWORD *)this + 33) = v37;
  v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x40) == 0)
  {
LABEL_36:
    if ((v10 & 0x200000) == 0)
      goto LABEL_37;
    goto LABEL_67;
  }
LABEL_66:
  v38 = *((_DWORD *)a2 + 30);
  *((_DWORD *)this + 53) |= 0x40u;
  *((_DWORD *)this + 30) = v38;
  v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x200000) == 0)
  {
LABEL_37:
    if ((v10 & 0x400) == 0)
      goto LABEL_38;
LABEL_68:
    v40 = *((_DWORD *)a2 + 34);
    *((_DWORD *)this + 53) |= 0x400u;
    *((_DWORD *)this + 34) = v40;
    if ((*((_DWORD *)a2 + 53) & 0x800000) == 0)
      return this;
    goto LABEL_39;
  }
LABEL_67:
  v39 = *((_DWORD *)a2 + 45);
  *((_DWORD *)this + 53) |= 0x200000u;
  *((_DWORD *)this + 45) = v39;
  v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x400) != 0)
    goto LABEL_68;
LABEL_38:
  if ((v10 & 0x800000) != 0)
  {
LABEL_39:
    v11 = *((_DWORD *)a2 + 47);
    *((_DWORD *)this + 53) |= 0x800000u;
    *((_DWORD *)this + 47) = v11;
  }
  return this;
}

CMMsl *CMMsl::KappaTrigger::operator=(CMMsl *a1, const CMMsl::KappaTrigger *a2)
{
  CMMsl::KappaTrigger *v3;
  _BYTE v5[216];

  if (a1 != a2)
  {
    CMMsl::KappaTrigger::KappaTrigger((CMMsl::KappaTrigger *)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaTrigger *)v5, v3);
    CMMsl::KappaTrigger::~KappaTrigger((CMMsl::KappaTrigger *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaTrigger *a2, CMMsl::KappaTrigger *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float result;

  v3 = *((_DWORD *)this + 53);
  *((_DWORD *)this + 53) = *((_DWORD *)a2 + 53);
  *((_DWORD *)a2 + 53) = v3;
  v4 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v4;
  LOBYTE(v4) = *((_BYTE *)this + 211);
  *((_BYTE *)this + 211) = *((_BYTE *)a2 + 211);
  *((_BYTE *)a2 + 211) = v4;
  v5 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v5;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v7;
  v8 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v8;
  v9 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v9;
  v10 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v10;
  v11 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v11;
  v12 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v12;
  v13 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v13;
  v14 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v14;
  LOBYTE(v14) = *((_BYTE *)this + 208);
  *((_BYTE *)this + 208) = *((_BYTE *)a2 + 208);
  *((_BYTE *)a2 + 208) = v14;
  LOBYTE(v14) = *((_BYTE *)this + 209);
  *((_BYTE *)this + 209) = *((_BYTE *)a2 + 209);
  *((_BYTE *)a2 + 209) = v14;
  LODWORD(v14) = *((_DWORD *)this + 46);
  *((_DWORD *)this + 46) = *((_DWORD *)a2 + 46);
  *((_DWORD *)a2 + 46) = v14;
  LODWORD(v5) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v5;
  LODWORD(v14) = *((_DWORD *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((_DWORD *)a2 + 43) = v14;
  LODWORD(v14) = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v14;
  LODWORD(v14) = *((_DWORD *)this + 41);
  *((_DWORD *)this + 41) = *((_DWORD *)a2 + 41);
  *((_DWORD *)a2 + 41) = v14;
  LODWORD(v14) = *((_DWORD *)this + 40);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
  *((_DWORD *)a2 + 40) = v14;
  LODWORD(v14) = *((_DWORD *)this + 39);
  *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
  *((_DWORD *)a2 + 39) = v14;
  LODWORD(v14) = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v14;
  LODWORD(v14) = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v14;
  LODWORD(v14) = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v14;
  LODWORD(v5) = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v5;
  LODWORD(v14) = *((_DWORD *)this + 48);
  *((_DWORD *)this + 48) = *((_DWORD *)a2 + 48);
  *((_DWORD *)a2 + 48) = v14;
  LODWORD(v14) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v14;
  v15 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v15;
  LODWORD(v5) = *((_DWORD *)this + 49);
  *((_DWORD *)this + 49) = *((_DWORD *)a2 + 49);
  *((_DWORD *)a2 + 49) = v5;
  LODWORD(v5) = *((_DWORD *)this + 50);
  *((_DWORD *)this + 50) = *((_DWORD *)a2 + 50);
  *((_DWORD *)a2 + 50) = v5;
  LODWORD(v5) = *((_DWORD *)this + 51);
  *((_DWORD *)this + 51) = *((_DWORD *)a2 + 51);
  *((_DWORD *)a2 + 51) = v5;
  LODWORD(v15) = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v15;
  LODWORD(v15) = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v15;
  v16 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v16;
  LOBYTE(v16) = *((_BYTE *)this + 210);
  *((_BYTE *)this + 210) = *((_BYTE *)a2 + 210);
  *((_BYTE *)a2 + 210) = v16;
  LODWORD(v5) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v5;
  LODWORD(v5) = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v5;
  result = *((float *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((float *)a2 + 30) = result;
  LODWORD(v16) = *((_DWORD *)this + 45);
  *((_DWORD *)this + 45) = *((_DWORD *)a2 + 45);
  *((_DWORD *)a2 + 45) = v16;
  LODWORD(v16) = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v16;
  LODWORD(v16) = *((_DWORD *)this + 47);
  *((_DWORD *)this + 47) = *((_DWORD *)a2 + 47);
  *((_DWORD *)a2 + 47) = v16;
  return result;
}

uint64_t CMMsl::KappaTrigger::KappaTrigger(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_25135ED30;
  v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  v5 = a1 + 56;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
  *(_DWORD *)(a2 + 212) = 0;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 211) = *(_BYTE *)(a2 + 211);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  sub_242911330(v5, (__n128 *)(a2 + 56));
  sub_242911330(v4, (__n128 *)(a2 + 32));
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  *(_BYTE *)(a1 + 209) = *(_BYTE *)(a2 + 209);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 196);
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 210) = *(_BYTE *)(a2 + 210);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  return a1;
}

CMMsl *CMMsl::KappaTrigger::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::KappaTrigger *v3;
  _BYTE v5[216];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaTrigger::KappaTrigger((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaTrigger *)v5, v3);
    CMMsl::KappaTrigger::~KappaTrigger((CMMsl::KappaTrigger *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaTrigger::formatText(CMMsl::KappaTrigger *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;
  double *v6;
  double *v7;
  double v8;
  int v9;
  float *v10;
  float *v11;
  float v12;
  float *v13;
  float *v14;
  float v15;
  int v16;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "avgHorizontalDecelMax", *((double *)this + 10));
    v5 = *((_DWORD *)this + 53);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_45;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "avgHorizontalDecelThresholdCoupled", *((float *)this + 28));
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0)
      goto LABEL_5;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "btHint");
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "companionAopTs");
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "currentWindowMean", *((float *)this + 30));
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "enableMode");
  if ((*((_DWORD *)this + 53) & 0x100) != 0)
LABEL_8:
    PB::TextFormatter::format(a2, "impactThresholdUncoupled", *((float *)this + 32));
LABEL_9:
  v6 = (double *)*((_QWORD *)this + 1);
  v7 = (double *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(a2, "inertialAccel", v8);
  }
  v9 = *((_DWORD *)this + 53);
  if ((v9 & 0x10000000) != 0)
  {
    PB::TextFormatter::format(a2, "isMounted");
    v9 = *((_DWORD *)this + 53);
    if ((v9 & 0x20000000) == 0)
    {
LABEL_13:
      if ((v9 & 0x200) == 0)
        goto LABEL_14;
      goto LABEL_52;
    }
  }
  else if ((v9 & 0x20000000) == 0)
  {
    goto LABEL_13;
  }
  PB::TextFormatter::format(a2, "isSimulated");
  v9 = *((_DWORD *)this + 53);
  if ((v9 & 0x200) == 0)
  {
LABEL_14:
    if ((v9 & 0x400) == 0)
      goto LABEL_15;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "lastCompleted15sWindowMean", *((float *)this + 33));
  v9 = *((_DWORD *)this + 53);
  if ((v9 & 0x400) == 0)
  {
LABEL_15:
    if ((v9 & 0x40000000) == 0)
      goto LABEL_16;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "locallyArmedBitmap");
  v9 = *((_DWORD *)this + 53);
  if ((v9 & 0x40000000) == 0)
  {
LABEL_16:
    if ((v9 & 0x800) == 0)
      goto LABEL_17;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "martyIsBicycle");
  v9 = *((_DWORD *)this + 53);
  if ((v9 & 0x800) == 0)
  {
LABEL_17:
    if ((v9 & 0x1000) == 0)
      goto LABEL_18;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "martyTriggerPathBitmap");
  v9 = *((_DWORD *)this + 53);
  if ((v9 & 0x1000) == 0)
  {
LABEL_18:
    if ((v9 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "maxMeanTenMinPreTrigger", *((float *)this + 36));
  v9 = *((_DWORD *)this + 53);
  if ((v9 & 0x2000) == 0)
  {
LABEL_19:
    if ((v9 & 0x4000) == 0)
      goto LABEL_20;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "nAccelGap");
  v9 = *((_DWORD *)this + 53);
  if ((v9 & 0x4000) == 0)
  {
LABEL_20:
    if ((v9 & 0x8000) == 0)
      goto LABEL_21;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "nFullAccel");
  v9 = *((_DWORD *)this + 53);
  if ((v9 & 0x8000) == 0)
  {
LABEL_21:
    if ((v9 & 0x10000) == 0)
      goto LABEL_22;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "nFullDM");
  v9 = *((_DWORD *)this + 53);
  if ((v9 & 0x10000) == 0)
  {
LABEL_22:
    if ((v9 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "nOldAccel");
  v9 = *((_DWORD *)this + 53);
  if ((v9 & 0x20000) == 0)
  {
LABEL_23:
    if ((v9 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "nOldDM");
  v9 = *((_DWORD *)this + 53);
  if ((v9 & 0x40000) == 0)
  {
LABEL_24:
    if ((v9 & 0x80000) == 0)
      goto LABEL_25;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "nOldDt");
  v9 = *((_DWORD *)this + 53);
  if ((v9 & 0x80000) == 0)
  {
LABEL_25:
    if ((v9 & 0x100000) == 0)
      goto LABEL_26;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "nPrecondition");
  v9 = *((_DWORD *)this + 53);
  if ((v9 & 0x100000) == 0)
  {
LABEL_26:
    if ((v9 & 0x200000) == 0)
      goto LABEL_27;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "nUseNearest");
  v9 = *((_DWORD *)this + 53);
  if ((v9 & 0x200000) == 0)
  {
LABEL_27:
    if ((v9 & 0x400000) == 0)
      goto LABEL_28;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "numMaxEnvelopes");
  v9 = *((_DWORD *)this + 53);
  if ((v9 & 0x400000) == 0)
  {
LABEL_28:
    if ((v9 & 0x800000) == 0)
      goto LABEL_30;
    goto LABEL_29;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "numResets");
  if ((*((_DWORD *)this + 53) & 0x800000) != 0)
LABEL_29:
    PB::TextFormatter::format(a2, "overrideArmedBitmap");
LABEL_30:
  v10 = (float *)*((_QWORD *)this + 4);
  v11 = (float *)*((_QWORD *)this + 5);
  while (v10 != v11)
  {
    v12 = *v10++;
    PB::TextFormatter::format(a2, "prevQ", v12);
  }
  v13 = (float *)*((_QWORD *)this + 7);
  v14 = (float *)*((_QWORD *)this + 8);
  while (v13 != v14)
  {
    v15 = *v13++;
    PB::TextFormatter::format(a2, "rawClampedAccel", v15);
  }
  v16 = *((_DWORD *)this + 53);
  if (v16 < 0)
  {
    PB::TextFormatter::format(a2, "shouldTrigger");
    v16 = *((_DWORD *)this + 53);
    if ((v16 & 4) == 0)
    {
LABEL_36:
      if ((v16 & 0x1000000) == 0)
        goto LABEL_37;
      goto LABEL_70;
    }
  }
  else if ((v16 & 4) == 0)
  {
    goto LABEL_36;
  }
  PB::TextFormatter::format(a2, "timestamp");
  v16 = *((_DWORD *)this + 53);
  if ((v16 & 0x1000000) == 0)
  {
LABEL_37:
    if ((v16 & 0x2000000) == 0)
      goto LABEL_38;
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(a2, "triggerPathBitmap");
  v16 = *((_DWORD *)this + 53);
  if ((v16 & 0x2000000) == 0)
  {
LABEL_38:
    if ((v16 & 0x4000000) == 0)
      goto LABEL_39;
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(a2, "vehicleProbabilityLongTermMean0", *((float *)this + 49));
  v16 = *((_DWORD *)this + 53);
  if ((v16 & 0x4000000) == 0)
  {
LABEL_39:
    if ((v16 & 0x8000000) == 0)
      goto LABEL_40;
LABEL_73:
    PB::TextFormatter::format(a2, "vehicleProbabilityLongTermMean2", *((float *)this + 51));
    if ((*((_DWORD *)this + 53) & 8) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_41;
  }
LABEL_72:
  PB::TextFormatter::format(a2, "vehicleProbabilityLongTermMean1", *((float *)this + 50));
  v16 = *((_DWORD *)this + 53);
  if ((v16 & 0x8000000) != 0)
    goto LABEL_73;
LABEL_40:
  if ((v16 & 8) != 0)
LABEL_41:
    PB::TextFormatter::format(a2, "vehicleProbabilityTs");
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::KappaTrigger::readFrom(CMMsl::KappaTrigger *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  BOOL v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  BOOL v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  _DWORD *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  _DWORD *v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  _DWORD *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  _DWORD *v74;
  int v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  int v79;
  BOOL v80;
  unint64_t v81;
  unint64_t v82;
  int v83;
  BOOL v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  char v97;
  unsigned int v98;
  uint64_t v99;
  unint64_t v100;
  char v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  char v105;
  unsigned int v106;
  uint64_t v107;
  unint64_t v108;
  char v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  char v113;
  unsigned int v114;
  uint64_t v115;
  unint64_t v116;
  char v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  char v121;
  unsigned int v122;
  uint64_t v123;
  unint64_t v124;
  char v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  char v129;
  unsigned int v130;
  uint64_t v131;
  unint64_t v132;
  char v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  char v137;
  unsigned int v138;
  uint64_t v139;
  unint64_t v140;
  char v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  char v145;
  unsigned int v146;
  uint64_t v147;
  unint64_t v148;
  char v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  char v153;
  unsigned int v154;
  uint64_t v155;
  unint64_t v156;
  char v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t v161;
  char v162;
  unsigned int v163;
  uint64_t v164;
  unint64_t v165;
  char v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  char v170;
  unsigned int v171;
  uint64_t v172;
  unint64_t v173;
  char v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  char v178;
  unsigned int v179;
  uint64_t v180;
  unint64_t v181;
  char v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  char v189;
  unsigned int v190;
  uint64_t v191;
  unint64_t v192;
  char v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;
  char v197;
  unsigned int v198;
  uint64_t v199;
  unint64_t v200;
  char v201;
  unint64_t v202;
  unint64_t v203;
  uint64_t v204;
  char v205;
  unsigned int v206;
  uint64_t v207;
  unint64_t v208;
  char v209;
  unint64_t v210;
  unint64_t v211;
  int v212;
  BOOL v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  uint64_t v219;
  char v220;
  unsigned int v221;
  uint64_t v222;
  unint64_t v223;
  char v224;
  unint64_t v225;
  unint64_t v226;
  uint64_t v227;
  char v228;
  unsigned int v229;
  uint64_t v230;
  unint64_t v231;
  char v232;
  unint64_t v233;
  unint64_t v234;
  uint64_t v235;
  char v236;
  unsigned int v237;
  uint64_t v238;
  unint64_t v239;
  char v240;
  char v241;
  unsigned int v242;
  unint64_t v243;
  char v244;
  unint64_t v245;
  char *v246;
  _QWORD *v247;
  unint64_t v248;
  char *v249;
  _DWORD *v250;
  unint64_t v251;
  char *v252;
  char v253;
  unsigned int v254;
  unint64_t v255;
  char v256;
  char v257;
  unsigned int v258;
  unint64_t v259;
  char v260;
  char v261;
  unsigned int v262;
  unint64_t v263;
  char v264;
  char v265;
  unsigned int v266;
  unint64_t v267;
  char v268;
  char v269;
  unsigned int v270;
  unint64_t v271;
  char v272;
  char v273;
  unsigned int v274;
  unint64_t v275;
  char v276;
  char v277;
  unsigned int v278;
  unint64_t v279;
  char v280;
  char v281;
  unsigned int v282;
  unint64_t v283;
  char v284;
  char v285;
  unsigned int v286;
  unint64_t v287;
  char v288;
  char v289;
  unsigned int v290;
  unint64_t v291;
  char v292;
  char v293;
  unsigned int v294;
  unint64_t v295;
  char v296;
  char v297;
  unsigned int v298;
  unint64_t v299;
  char v300;
  char v301;
  unsigned int v302;
  unint64_t v303;
  char v304;
  char v305;
  unsigned int v306;
  unint64_t v307;
  char v308;
  char v309;
  unsigned int v310;
  unint64_t v311;
  char v312;
  char v313;
  unsigned int v314;
  unint64_t v315;
  char v316;
  char v317;
  unsigned int v318;
  unint64_t v319;
  char v320;
  char v321;
  unsigned int v322;
  unint64_t v323;
  char v324;
  char *v325;
  uint64_t v326;
  unint64_t v327;
  uint64_t v328;
  unint64_t v329;
  uint64_t v330;
  char *v331;
  uint64_t v332;
  unint64_t v333;
  uint64_t v334;
  unint64_t v335;
  uint64_t v336;
  char *v337;
  uint64_t v338;
  unint64_t v339;
  uint64_t v340;
  unint64_t v341;
  uint64_t v342;
  _QWORD *v343;
  uint64_t v344;
  unint64_t v345;
  uint64_t v346;
  _DWORD *v347;
  int v348;
  _DWORD *v349;
  int v350;
  unint64_t v351;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (2)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_25:
      v20 = v11 & 7;
      if (v20 != 4)
      {
        switch((v11 >> 3))
        {
          case 1u:
            *((_DWORD *)this + 53) |= 4u;
            v21 = *((_QWORD *)a2 + 1);
            v22 = *((_QWORD *)a2 + 2);
            v23 = *(_QWORD *)a2;
            if (v21 <= 0xFFFFFFFFFFFFFFF5 && v21 + 10 <= v22)
            {
              v24 = 0;
              v25 = 0;
              v26 = 0;
              do
              {
                v27 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v28 = *(_BYTE *)(v23 + v21);
                v26 |= (unint64_t)(v28 & 0x7F) << v24;
                if ((v28 & 0x80) == 0)
                  goto LABEL_455;
                v24 += 7;
                v21 = v27;
                v14 = v25++ > 8;
              }
              while (!v14);
LABEL_270:
              v26 = 0;
              goto LABEL_455;
            }
            v241 = 0;
            v242 = 0;
            v26 = 0;
            if (v22 <= v21)
              v22 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v22 == v21)
              {
                v26 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v243 = v21 + 1;
                v244 = *(_BYTE *)(v23 + v21);
                *((_QWORD *)a2 + 1) = v243;
                v26 |= (unint64_t)(v244 & 0x7F) << v241;
                if (v244 < 0)
                {
                  v241 += 7;
                  v21 = v243;
                  v14 = v242++ > 8;
                  if (v14)
                    goto LABEL_270;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  v26 = 0;
              }
              break;
            }
LABEL_455:
            *((_QWORD *)this + 12) = v26;
            goto LABEL_20;
          case 2u:
            *((_DWORD *)this + 53) |= 0x80000000;
            v29 = *((_QWORD *)a2 + 1);
            if (v29 >= *((_QWORD *)a2 + 2))
            {
              v32 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v30 = v29 + 1;
              v31 = *(unsigned __int8 *)(*(_QWORD *)a2 + v29);
              *((_QWORD *)a2 + 1) = v30;
              v32 = v31 != 0;
            }
            *((_BYTE *)this + 211) = v32;
            goto LABEL_20;
          case 3u:
            *((_DWORD *)this + 53) |= 1u;
            v33 = *((_QWORD *)a2 + 1);
            if (v33 > 0xFFFFFFFFFFFFFFF7 || v33 + 8 > *((_QWORD *)a2 + 2))
              goto LABEL_536;
            *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v33);
            goto LABEL_519;
          case 4u:
            if (v20 == 2)
            {
              if ((PB::Reader::placeMark() & 1) != 0)
                return 0;
              v34 = *((_QWORD *)a2 + 1);
              v35 = *((_QWORD *)a2 + 2);
              while (v34 < v35 && !*((_BYTE *)a2 + 24))
              {
                v37 = (char *)*((_QWORD *)this + 2);
                v36 = *((_QWORD *)this + 3);
                if ((unint64_t)v37 >= v36)
                {
                  v39 = (char *)*((_QWORD *)this + 1);
                  v40 = (v37 - v39) >> 3;
                  v41 = v40 + 1;
                  if ((unint64_t)(v40 + 1) >> 61)
                    goto LABEL_545;
                  v42 = v36 - (_QWORD)v39;
                  if (v42 >> 2 > v41)
                    v41 = v42 >> 2;
                  v43 = (unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8;
                  v44 = 0x1FFFFFFFFFFFFFFFLL;
                  if (!v43)
                    v44 = v41;
                  if (v44)
                  {
                    v44 = (unint64_t)sub_2429112FC(v44);
                    v39 = (char *)*((_QWORD *)this + 1);
                    v37 = (char *)*((_QWORD *)this + 2);
                  }
                  else
                  {
                    v45 = 0;
                  }
                  v46 = (_QWORD *)(v44 + 8 * v40);
                  *v46 = 0;
                  v38 = v46 + 1;
                  while (v37 != v39)
                  {
                    v47 = *((_QWORD *)v37 - 1);
                    v37 -= 8;
                    *--v46 = v47;
                  }
                  *((_QWORD *)this + 1) = v46;
                  *((_QWORD *)this + 2) = v38;
                  *((_QWORD *)this + 3) = v44 + 8 * v45;
                  if (v39)
                    operator delete(v39);
                }
                else
                {
                  *(_QWORD *)v37 = 0;
                  v38 = v37 + 8;
                }
                *((_QWORD *)this + 2) = v38;
                v48 = *((_QWORD *)a2 + 1);
                if (v48 > 0xFFFFFFFFFFFFFFF7 || v48 + 8 > *((_QWORD *)a2 + 2))
                  goto LABEL_411;
                *(v38 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v48);
                v35 = *((_QWORD *)a2 + 2);
                v34 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v34;
              }
              goto LABEL_412;
            }
            v246 = (char *)*((_QWORD *)this + 2);
            v245 = *((_QWORD *)this + 3);
            if ((unint64_t)v246 >= v245)
            {
              v325 = (char *)*((_QWORD *)this + 1);
              v326 = (v246 - v325) >> 3;
              v327 = v326 + 1;
              if ((unint64_t)(v326 + 1) >> 61)
LABEL_545:
                sub_242729A44();
              v328 = v245 - (_QWORD)v325;
              if (v328 >> 2 > v327)
                v327 = v328 >> 2;
              v43 = (unint64_t)v328 >= 0x7FFFFFFFFFFFFFF8;
              v329 = 0x1FFFFFFFFFFFFFFFLL;
              if (!v43)
                v329 = v327;
              if (v329)
              {
                v329 = (unint64_t)sub_2429112FC(v329);
                v325 = (char *)*((_QWORD *)this + 1);
                v246 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v330 = 0;
              }
              v343 = (_QWORD *)(v329 + 8 * v326);
              *v343 = 0;
              v247 = v343 + 1;
              while (v246 != v325)
              {
                v344 = *((_QWORD *)v246 - 1);
                v246 -= 8;
                *--v343 = v344;
              }
              *((_QWORD *)this + 1) = v343;
              *((_QWORD *)this + 2) = v247;
              *((_QWORD *)this + 3) = v329 + 8 * v330;
              if (v325)
                operator delete(v325);
            }
            else
            {
              *(_QWORD *)v246 = 0;
              v247 = v246 + 8;
            }
            *((_QWORD *)this + 2) = v247;
            v345 = *((_QWORD *)a2 + 1);
            if (v345 <= 0xFFFFFFFFFFFFFFF7 && v345 + 8 <= *((_QWORD *)a2 + 2))
            {
              *(v247 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v345);
LABEL_519:
              v346 = *((_QWORD *)a2 + 1) + 8;
              goto LABEL_539;
            }
            goto LABEL_536;
          case 5u:
            if (v20 == 2)
            {
              if ((PB::Reader::placeMark() & 1) != 0)
                return 0;
              v49 = *((_QWORD *)a2 + 1);
              v50 = *((_QWORD *)a2 + 2);
              while (v49 < v50 && !*((_BYTE *)a2 + 24))
              {
                v52 = (char *)*((_QWORD *)this + 8);
                v51 = *((_QWORD *)this + 9);
                if ((unint64_t)v52 >= v51)
                {
                  v54 = (char *)*((_QWORD *)this + 7);
                  v55 = (v52 - v54) >> 2;
                  v56 = v55 + 1;
                  if ((unint64_t)(v55 + 1) >> 62)
                    goto LABEL_544;
                  v57 = v51 - (_QWORD)v54;
                  if (v57 >> 1 > v56)
                    v56 = v57 >> 1;
                  v43 = (unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL;
                  v58 = 0x3FFFFFFFFFFFFFFFLL;
                  if (!v43)
                    v58 = v56;
                  if (v58)
                  {
                    v58 = (unint64_t)sub_2429114B8(v58);
                    v54 = (char *)*((_QWORD *)this + 7);
                    v52 = (char *)*((_QWORD *)this + 8);
                  }
                  else
                  {
                    v59 = 0;
                  }
                  v60 = (_DWORD *)(v58 + 4 * v55);
                  *v60 = 0;
                  v53 = v60 + 1;
                  while (v52 != v54)
                  {
                    v61 = *((_DWORD *)v52 - 1);
                    v52 -= 4;
                    *--v60 = v61;
                  }
                  *((_QWORD *)this + 7) = v60;
                  *((_QWORD *)this + 8) = v53;
                  *((_QWORD *)this + 9) = v58 + 4 * v59;
                  if (v54)
                    operator delete(v54);
                }
                else
                {
                  *(_DWORD *)v52 = 0;
                  v53 = v52 + 4;
                }
                *((_QWORD *)this + 8) = v53;
                v62 = *((_QWORD *)a2 + 1);
                if (v62 > 0xFFFFFFFFFFFFFFFBLL || v62 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_411;
                *(v53 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v62);
                v50 = *((_QWORD *)a2 + 2);
                v49 = *((_QWORD *)a2 + 1) + 4;
                *((_QWORD *)a2 + 1) = v49;
              }
              goto LABEL_412;
            }
            v249 = (char *)*((_QWORD *)this + 8);
            v248 = *((_QWORD *)this + 9);
            if ((unint64_t)v249 >= v248)
            {
              v331 = (char *)*((_QWORD *)this + 7);
              v332 = (v249 - v331) >> 2;
              v333 = v332 + 1;
              if ((unint64_t)(v332 + 1) >> 62)
                goto LABEL_544;
              v334 = v248 - (_QWORD)v331;
              if (v334 >> 1 > v333)
                v333 = v334 >> 1;
              v43 = (unint64_t)v334 >= 0x7FFFFFFFFFFFFFFCLL;
              v335 = 0x3FFFFFFFFFFFFFFFLL;
              if (!v43)
                v335 = v333;
              if (v335)
              {
                v335 = (unint64_t)sub_2429114B8(v335);
                v331 = (char *)*((_QWORD *)this + 7);
                v249 = (char *)*((_QWORD *)this + 8);
              }
              else
              {
                v336 = 0;
              }
              v347 = (_DWORD *)(v335 + 4 * v332);
              *v347 = 0;
              v250 = v347 + 1;
              while (v249 != v331)
              {
                v348 = *((_DWORD *)v249 - 1);
                v249 -= 4;
                *--v347 = v348;
              }
              *((_QWORD *)this + 7) = v347;
              *((_QWORD *)this + 8) = v250;
              *((_QWORD *)this + 9) = v335 + 4 * v336;
              if (v331)
                operator delete(v331);
            }
            else
            {
              *(_DWORD *)v249 = 0;
              v250 = v249 + 4;
            }
            *((_QWORD *)this + 8) = v250;
            goto LABEL_534;
          case 6u:
            if (v20 == 2)
            {
              if ((PB::Reader::placeMark() & 1) != 0)
                return 0;
              v63 = *((_QWORD *)a2 + 1);
              v64 = *((_QWORD *)a2 + 2);
              while (v63 < v64 && !*((_BYTE *)a2 + 24))
              {
                v66 = (char *)*((_QWORD *)this + 5);
                v65 = *((_QWORD *)this + 6);
                if ((unint64_t)v66 >= v65)
                {
                  v68 = (char *)*((_QWORD *)this + 4);
                  v69 = (v66 - v68) >> 2;
                  v70 = v69 + 1;
                  if ((unint64_t)(v69 + 1) >> 62)
                    goto LABEL_544;
                  v71 = v65 - (_QWORD)v68;
                  if (v71 >> 1 > v70)
                    v70 = v71 >> 1;
                  v43 = (unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL;
                  v72 = 0x3FFFFFFFFFFFFFFFLL;
                  if (!v43)
                    v72 = v70;
                  if (v72)
                  {
                    v72 = (unint64_t)sub_2429114B8(v72);
                    v68 = (char *)*((_QWORD *)this + 4);
                    v66 = (char *)*((_QWORD *)this + 5);
                  }
                  else
                  {
                    v73 = 0;
                  }
                  v74 = (_DWORD *)(v72 + 4 * v69);
                  *v74 = 0;
                  v67 = v74 + 1;
                  while (v66 != v68)
                  {
                    v75 = *((_DWORD *)v66 - 1);
                    v66 -= 4;
                    *--v74 = v75;
                  }
                  *((_QWORD *)this + 4) = v74;
                  *((_QWORD *)this + 5) = v67;
                  *((_QWORD *)this + 6) = v72 + 4 * v73;
                  if (v68)
                    operator delete(v68);
                }
                else
                {
                  *(_DWORD *)v66 = 0;
                  v67 = v66 + 4;
                }
                *((_QWORD *)this + 5) = v67;
                v76 = *((_QWORD *)a2 + 1);
                if (v76 > 0xFFFFFFFFFFFFFFFBLL || v76 + 4 > *((_QWORD *)a2 + 2))
                {
LABEL_411:
                  *((_BYTE *)a2 + 24) = 1;
                  break;
                }
                *(v67 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v76);
                v64 = *((_QWORD *)a2 + 2);
                v63 = *((_QWORD *)a2 + 1) + 4;
                *((_QWORD *)a2 + 1) = v63;
              }
LABEL_412:
              PB::Reader::recallMark();
            }
            else
            {
              v252 = (char *)*((_QWORD *)this + 5);
              v251 = *((_QWORD *)this + 6);
              if ((unint64_t)v252 >= v251)
              {
                v337 = (char *)*((_QWORD *)this + 4);
                v338 = (v252 - v337) >> 2;
                v339 = v338 + 1;
                if ((unint64_t)(v338 + 1) >> 62)
LABEL_544:
                  sub_242729A44();
                v340 = v251 - (_QWORD)v337;
                if (v340 >> 1 > v339)
                  v339 = v340 >> 1;
                v43 = (unint64_t)v340 >= 0x7FFFFFFFFFFFFFFCLL;
                v341 = 0x3FFFFFFFFFFFFFFFLL;
                if (!v43)
                  v341 = v339;
                if (v341)
                {
                  v341 = (unint64_t)sub_2429114B8(v341);
                  v337 = (char *)*((_QWORD *)this + 4);
                  v252 = (char *)*((_QWORD *)this + 5);
                }
                else
                {
                  v342 = 0;
                }
                v349 = (_DWORD *)(v341 + 4 * v338);
                *v349 = 0;
                v250 = v349 + 1;
                while (v252 != v337)
                {
                  v350 = *((_DWORD *)v252 - 1);
                  v252 -= 4;
                  *--v349 = v350;
                }
                *((_QWORD *)this + 4) = v349;
                *((_QWORD *)this + 5) = v250;
                *((_QWORD *)this + 6) = v341 + 4 * v342;
                if (v337)
                  operator delete(v337);
              }
              else
              {
                *(_DWORD *)v252 = 0;
                v250 = v252 + 4;
              }
              *((_QWORD *)this + 5) = v250;
LABEL_534:
              v351 = *((_QWORD *)a2 + 1);
              if (v351 <= 0xFFFFFFFFFFFFFFFBLL && v351 + 4 <= *((_QWORD *)a2 + 2))
              {
                *(v250 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v351);
LABEL_538:
                v346 = *((_QWORD *)a2 + 1) + 4;
LABEL_539:
                *((_QWORD *)a2 + 1) = v346;
              }
              else
              {
LABEL_536:
                *((_BYTE *)a2 + 24) = 1;
              }
            }
LABEL_20:
            v2 = *((_QWORD *)a2 + 1);
            v3 = *((_QWORD *)a2 + 2);
            v4 = *((unsigned __int8 *)a2 + 24);
            if (v2 >= v3 || v4 != 0)
              return v4 == 0;
            continue;
          case 7u:
            *((_DWORD *)this + 53) |= 0x10000000u;
            v77 = *((_QWORD *)a2 + 1);
            if (v77 >= *((_QWORD *)a2 + 2))
            {
              v80 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v78 = v77 + 1;
              v79 = *(unsigned __int8 *)(*(_QWORD *)a2 + v77);
              *((_QWORD *)a2 + 1) = v78;
              v80 = v79 != 0;
            }
            *((_BYTE *)this + 208) = v80;
            goto LABEL_20;
          case 8u:
            *((_DWORD *)this + 53) |= 0x20000000u;
            v81 = *((_QWORD *)a2 + 1);
            if (v81 >= *((_QWORD *)a2 + 2))
            {
              v84 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v82 = v81 + 1;
              v83 = *(unsigned __int8 *)(*(_QWORD *)a2 + v81);
              *((_QWORD *)a2 + 1) = v82;
              v84 = v83 != 0;
            }
            *((_BYTE *)this + 209) = v84;
            goto LABEL_20;
          case 9u:
            *((_DWORD *)this + 53) |= 0x400000u;
            v85 = *((_QWORD *)a2 + 1);
            v86 = *((_QWORD *)a2 + 2);
            v87 = *(_QWORD *)a2;
            if (v85 <= 0xFFFFFFFFFFFFFFF5 && v85 + 10 <= v86)
            {
              v88 = 0;
              v89 = 0;
              v90 = 0;
              do
              {
                v91 = v85 + 1;
                *((_QWORD *)a2 + 1) = v85 + 1;
                v92 = *(_BYTE *)(v87 + v85);
                v90 |= (unint64_t)(v92 & 0x7F) << v88;
                if ((v92 & 0x80) == 0)
                  goto LABEL_458;
                v88 += 7;
                v85 = v91;
                v14 = v89++ > 8;
              }
              while (!v14);
LABEL_289:
              LODWORD(v90) = 0;
              goto LABEL_458;
            }
            v253 = 0;
            v254 = 0;
            v90 = 0;
            if (v86 <= v85)
              v86 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v86 == v85)
              {
                LODWORD(v90) = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v255 = v85 + 1;
                v256 = *(_BYTE *)(v87 + v85);
                *((_QWORD *)a2 + 1) = v255;
                v90 |= (unint64_t)(v256 & 0x7F) << v253;
                if (v256 < 0)
                {
                  v253 += 7;
                  v85 = v255;
                  v14 = v254++ > 8;
                  if (v14)
                    goto LABEL_289;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v90) = 0;
              }
              break;
            }
LABEL_458:
            *((_DWORD *)this + 46) = v90;
            goto LABEL_20;
          case 0xAu:
            *((_DWORD *)this + 53) |= 0x10u;
            v93 = *((_QWORD *)a2 + 1);
            if (v93 > 0xFFFFFFFFFFFFFFFBLL || v93 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_536;
            *((_DWORD *)this + 28) = *(_DWORD *)(*(_QWORD *)a2 + v93);
            goto LABEL_538;
          case 0xBu:
            *((_DWORD *)this + 53) |= 0x80000u;
            v94 = *((_QWORD *)a2 + 1);
            v95 = *((_QWORD *)a2 + 2);
            v96 = *(_QWORD *)a2;
            if (v94 <= 0xFFFFFFFFFFFFFFF5 && v94 + 10 <= v95)
            {
              v97 = 0;
              v98 = 0;
              v99 = 0;
              do
              {
                v100 = v94 + 1;
                *((_QWORD *)a2 + 1) = v94 + 1;
                v101 = *(_BYTE *)(v96 + v94);
                v99 |= (unint64_t)(v101 & 0x7F) << v97;
                if ((v101 & 0x80) == 0)
                  goto LABEL_461;
                v97 += 7;
                v94 = v100;
                v14 = v98++ > 8;
              }
              while (!v14);
LABEL_296:
              LODWORD(v99) = 0;
              goto LABEL_461;
            }
            v257 = 0;
            v258 = 0;
            v99 = 0;
            if (v95 <= v94)
              v95 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v95 == v94)
              {
                LODWORD(v99) = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v259 = v94 + 1;
                v260 = *(_BYTE *)(v96 + v94);
                *((_QWORD *)a2 + 1) = v259;
                v99 |= (unint64_t)(v260 & 0x7F) << v257;
                if (v260 < 0)
                {
                  v257 += 7;
                  v94 = v259;
                  v14 = v258++ > 8;
                  if (v14)
                    goto LABEL_296;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v99) = 0;
              }
              break;
            }
LABEL_461:
            *((_DWORD *)this + 43) = v99;
            goto LABEL_20;
          case 0xCu:
            *((_DWORD *)this + 53) |= 0x40000u;
            v102 = *((_QWORD *)a2 + 1);
            v103 = *((_QWORD *)a2 + 2);
            v104 = *(_QWORD *)a2;
            if (v102 <= 0xFFFFFFFFFFFFFFF5 && v102 + 10 <= v103)
            {
              v105 = 0;
              v106 = 0;
              v107 = 0;
              do
              {
                v108 = v102 + 1;
                *((_QWORD *)a2 + 1) = v102 + 1;
                v109 = *(_BYTE *)(v104 + v102);
                v107 |= (unint64_t)(v109 & 0x7F) << v105;
                if ((v109 & 0x80) == 0)
                  goto LABEL_464;
                v105 += 7;
                v102 = v108;
                v14 = v106++ > 8;
              }
              while (!v14);
LABEL_303:
              LODWORD(v107) = 0;
              goto LABEL_464;
            }
            v261 = 0;
            v262 = 0;
            v107 = 0;
            if (v103 <= v102)
              v103 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v103 == v102)
              {
                LODWORD(v107) = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v263 = v102 + 1;
                v264 = *(_BYTE *)(v104 + v102);
                *((_QWORD *)a2 + 1) = v263;
                v107 |= (unint64_t)(v264 & 0x7F) << v261;
                if (v264 < 0)
                {
                  v261 += 7;
                  v102 = v263;
                  v14 = v262++ > 8;
                  if (v14)
                    goto LABEL_303;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v107) = 0;
              }
              break;
            }
LABEL_464:
            *((_DWORD *)this + 42) = v107;
            goto LABEL_20;
          case 0xDu:
            *((_DWORD *)this + 53) |= 0x20000u;
            v110 = *((_QWORD *)a2 + 1);
            v111 = *((_QWORD *)a2 + 2);
            v112 = *(_QWORD *)a2;
            if (v110 <= 0xFFFFFFFFFFFFFFF5 && v110 + 10 <= v111)
            {
              v113 = 0;
              v114 = 0;
              v115 = 0;
              do
              {
                v116 = v110 + 1;
                *((_QWORD *)a2 + 1) = v110 + 1;
                v117 = *(_BYTE *)(v112 + v110);
                v115 |= (unint64_t)(v117 & 0x7F) << v113;
                if ((v117 & 0x80) == 0)
                  goto LABEL_467;
                v113 += 7;
                v110 = v116;
                v14 = v114++ > 8;
              }
              while (!v14);
LABEL_310:
              LODWORD(v115) = 0;
              goto LABEL_467;
            }
            v265 = 0;
            v266 = 0;
            v115 = 0;
            if (v111 <= v110)
              v111 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v111 == v110)
              {
                LODWORD(v115) = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v267 = v110 + 1;
                v268 = *(_BYTE *)(v112 + v110);
                *((_QWORD *)a2 + 1) = v267;
                v115 |= (unint64_t)(v268 & 0x7F) << v265;
                if (v268 < 0)
                {
                  v265 += 7;
                  v110 = v267;
                  v14 = v266++ > 8;
                  if (v14)
                    goto LABEL_310;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v115) = 0;
              }
              break;
            }
LABEL_467:
            *((_DWORD *)this + 41) = v115;
            goto LABEL_20;
          case 0xEu:
            *((_DWORD *)this + 53) |= 0x10000u;
            v118 = *((_QWORD *)a2 + 1);
            v119 = *((_QWORD *)a2 + 2);
            v120 = *(_QWORD *)a2;
            if (v118 <= 0xFFFFFFFFFFFFFFF5 && v118 + 10 <= v119)
            {
              v121 = 0;
              v122 = 0;
              v123 = 0;
              do
              {
                v124 = v118 + 1;
                *((_QWORD *)a2 + 1) = v118 + 1;
                v125 = *(_BYTE *)(v120 + v118);
                v123 |= (unint64_t)(v125 & 0x7F) << v121;
                if ((v125 & 0x80) == 0)
                  goto LABEL_470;
                v121 += 7;
                v118 = v124;
                v14 = v122++ > 8;
              }
              while (!v14);
LABEL_317:
              LODWORD(v123) = 0;
              goto LABEL_470;
            }
            v269 = 0;
            v270 = 0;
            v123 = 0;
            if (v119 <= v118)
              v119 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v119 == v118)
              {
                LODWORD(v123) = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v271 = v118 + 1;
                v272 = *(_BYTE *)(v120 + v118);
                *((_QWORD *)a2 + 1) = v271;
                v123 |= (unint64_t)(v272 & 0x7F) << v269;
                if (v272 < 0)
                {
                  v269 += 7;
                  v118 = v271;
                  v14 = v270++ > 8;
                  if (v14)
                    goto LABEL_317;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v123) = 0;
              }
              break;
            }
LABEL_470:
            *((_DWORD *)this + 40) = v123;
            goto LABEL_20;
          case 0xFu:
            *((_DWORD *)this + 53) |= 0x8000u;
            v126 = *((_QWORD *)a2 + 1);
            v127 = *((_QWORD *)a2 + 2);
            v128 = *(_QWORD *)a2;
            if (v126 <= 0xFFFFFFFFFFFFFFF5 && v126 + 10 <= v127)
            {
              v129 = 0;
              v130 = 0;
              v131 = 0;
              do
              {
                v132 = v126 + 1;
                *((_QWORD *)a2 + 1) = v126 + 1;
                v133 = *(_BYTE *)(v128 + v126);
                v131 |= (unint64_t)(v133 & 0x7F) << v129;
                if ((v133 & 0x80) == 0)
                  goto LABEL_473;
                v129 += 7;
                v126 = v132;
                v14 = v130++ > 8;
              }
              while (!v14);
LABEL_324:
              LODWORD(v131) = 0;
              goto LABEL_473;
            }
            v273 = 0;
            v274 = 0;
            v131 = 0;
            if (v127 <= v126)
              v127 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v127 == v126)
              {
                LODWORD(v131) = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v275 = v126 + 1;
                v276 = *(_BYTE *)(v128 + v126);
                *((_QWORD *)a2 + 1) = v275;
                v131 |= (unint64_t)(v276 & 0x7F) << v273;
                if (v276 < 0)
                {
                  v273 += 7;
                  v126 = v275;
                  v14 = v274++ > 8;
                  if (v14)
                    goto LABEL_324;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v131) = 0;
              }
              break;
            }
LABEL_473:
            *((_DWORD *)this + 39) = v131;
            goto LABEL_20;
          case 0x10u:
            *((_DWORD *)this + 53) |= 0x4000u;
            v134 = *((_QWORD *)a2 + 1);
            v135 = *((_QWORD *)a2 + 2);
            v136 = *(_QWORD *)a2;
            if (v134 <= 0xFFFFFFFFFFFFFFF5 && v134 + 10 <= v135)
            {
              v137 = 0;
              v138 = 0;
              v139 = 0;
              do
              {
                v140 = v134 + 1;
                *((_QWORD *)a2 + 1) = v134 + 1;
                v141 = *(_BYTE *)(v136 + v134);
                v139 |= (unint64_t)(v141 & 0x7F) << v137;
                if ((v141 & 0x80) == 0)
                  goto LABEL_476;
                v137 += 7;
                v134 = v140;
                v14 = v138++ > 8;
              }
              while (!v14);
LABEL_331:
              LODWORD(v139) = 0;
              goto LABEL_476;
            }
            v277 = 0;
            v278 = 0;
            v139 = 0;
            if (v135 <= v134)
              v135 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v135 == v134)
              {
                LODWORD(v139) = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v279 = v134 + 1;
                v280 = *(_BYTE *)(v136 + v134);
                *((_QWORD *)a2 + 1) = v279;
                v139 |= (unint64_t)(v280 & 0x7F) << v277;
                if (v280 < 0)
                {
                  v277 += 7;
                  v134 = v279;
                  v14 = v278++ > 8;
                  if (v14)
                    goto LABEL_331;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v139) = 0;
              }
              break;
            }
LABEL_476:
            *((_DWORD *)this + 38) = v139;
            goto LABEL_20;
          case 0x11u:
            *((_DWORD *)this + 53) |= 0x2000u;
            v142 = *((_QWORD *)a2 + 1);
            v143 = *((_QWORD *)a2 + 2);
            v144 = *(_QWORD *)a2;
            if (v142 <= 0xFFFFFFFFFFFFFFF5 && v142 + 10 <= v143)
            {
              v145 = 0;
              v146 = 0;
              v147 = 0;
              do
              {
                v148 = v142 + 1;
                *((_QWORD *)a2 + 1) = v142 + 1;
                v149 = *(_BYTE *)(v144 + v142);
                v147 |= (unint64_t)(v149 & 0x7F) << v145;
                if ((v149 & 0x80) == 0)
                  goto LABEL_479;
                v145 += 7;
                v142 = v148;
                v14 = v146++ > 8;
              }
              while (!v14);
LABEL_338:
              LODWORD(v147) = 0;
              goto LABEL_479;
            }
            v281 = 0;
            v282 = 0;
            v147 = 0;
            if (v143 <= v142)
              v143 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v143 == v142)
              {
                LODWORD(v147) = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v283 = v142 + 1;
                v284 = *(_BYTE *)(v144 + v142);
                *((_QWORD *)a2 + 1) = v283;
                v147 |= (unint64_t)(v284 & 0x7F) << v281;
                if (v284 < 0)
                {
                  v281 += 7;
                  v142 = v283;
                  v14 = v282++ > 8;
                  if (v14)
                    goto LABEL_338;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v147) = 0;
              }
              break;
            }
LABEL_479:
            *((_DWORD *)this + 37) = v147;
            goto LABEL_20;
          case 0x12u:
            *((_DWORD *)this + 53) |= 0x100000u;
            v150 = *((_QWORD *)a2 + 1);
            v151 = *((_QWORD *)a2 + 2);
            v152 = *(_QWORD *)a2;
            if (v150 <= 0xFFFFFFFFFFFFFFF5 && v150 + 10 <= v151)
            {
              v153 = 0;
              v154 = 0;
              v155 = 0;
              do
              {
                v156 = v150 + 1;
                *((_QWORD *)a2 + 1) = v150 + 1;
                v157 = *(_BYTE *)(v152 + v150);
                v155 |= (unint64_t)(v157 & 0x7F) << v153;
                if ((v157 & 0x80) == 0)
                  goto LABEL_482;
                v153 += 7;
                v150 = v156;
                v14 = v154++ > 8;
              }
              while (!v14);
LABEL_345:
              LODWORD(v155) = 0;
              goto LABEL_482;
            }
            v285 = 0;
            v286 = 0;
            v155 = 0;
            if (v151 <= v150)
              v151 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v151 == v150)
              {
                LODWORD(v155) = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v287 = v150 + 1;
                v288 = *(_BYTE *)(v152 + v150);
                *((_QWORD *)a2 + 1) = v287;
                v155 |= (unint64_t)(v288 & 0x7F) << v285;
                if (v288 < 0)
                {
                  v285 += 7;
                  v150 = v287;
                  v14 = v286++ > 8;
                  if (v14)
                    goto LABEL_345;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v155) = 0;
              }
              break;
            }
LABEL_482:
            *((_DWORD *)this + 44) = v155;
            goto LABEL_20;
          case 0x13u:
            *((_DWORD *)this + 53) |= 0x100u;
            v158 = *((_QWORD *)a2 + 1);
            if (v158 > 0xFFFFFFFFFFFFFFFBLL || v158 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_536;
            *((_DWORD *)this + 32) = *(_DWORD *)(*(_QWORD *)a2 + v158);
            goto LABEL_538;
          case 0x14u:
            *((_DWORD *)this + 53) |= 0x1000000u;
            v159 = *((_QWORD *)a2 + 1);
            v160 = *((_QWORD *)a2 + 2);
            v161 = *(_QWORD *)a2;
            if (v159 <= 0xFFFFFFFFFFFFFFF5 && v159 + 10 <= v160)
            {
              v162 = 0;
              v163 = 0;
              v164 = 0;
              do
              {
                v165 = v159 + 1;
                *((_QWORD *)a2 + 1) = v159 + 1;
                v166 = *(_BYTE *)(v161 + v159);
                v164 |= (unint64_t)(v166 & 0x7F) << v162;
                if ((v166 & 0x80) == 0)
                  goto LABEL_485;
                v162 += 7;
                v159 = v165;
                v14 = v163++ > 8;
              }
              while (!v14);
LABEL_352:
              LODWORD(v164) = 0;
              goto LABEL_485;
            }
            v289 = 0;
            v290 = 0;
            v164 = 0;
            if (v160 <= v159)
              v160 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v160 == v159)
              {
                LODWORD(v164) = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v291 = v159 + 1;
                v292 = *(_BYTE *)(v161 + v159);
                *((_QWORD *)a2 + 1) = v291;
                v164 |= (unint64_t)(v292 & 0x7F) << v289;
                if (v292 < 0)
                {
                  v289 += 7;
                  v159 = v291;
                  v14 = v290++ > 8;
                  if (v14)
                    goto LABEL_352;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v164) = 0;
              }
              break;
            }
LABEL_485:
            *((_DWORD *)this + 48) = v164;
            goto LABEL_20;
          case 0x15u:
            *((_DWORD *)this + 53) |= 0x20u;
            v167 = *((_QWORD *)a2 + 1);
            v168 = *((_QWORD *)a2 + 2);
            v169 = *(_QWORD *)a2;
            if (v167 <= 0xFFFFFFFFFFFFFFF5 && v167 + 10 <= v168)
            {
              v170 = 0;
              v171 = 0;
              v172 = 0;
              do
              {
                v173 = v167 + 1;
                *((_QWORD *)a2 + 1) = v167 + 1;
                v174 = *(_BYTE *)(v169 + v167);
                v172 |= (unint64_t)(v174 & 0x7F) << v170;
                if ((v174 & 0x80) == 0)
                  goto LABEL_488;
                v170 += 7;
                v167 = v173;
                v14 = v171++ > 8;
              }
              while (!v14);
LABEL_359:
              LODWORD(v172) = 0;
              goto LABEL_488;
            }
            v293 = 0;
            v294 = 0;
            v172 = 0;
            if (v168 <= v167)
              v168 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v168 == v167)
              {
                LODWORD(v172) = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v295 = v167 + 1;
                v296 = *(_BYTE *)(v169 + v167);
                *((_QWORD *)a2 + 1) = v295;
                v172 |= (unint64_t)(v296 & 0x7F) << v293;
                if (v296 < 0)
                {
                  v293 += 7;
                  v167 = v295;
                  v14 = v294++ > 8;
                  if (v14)
                    goto LABEL_359;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v172) = 0;
              }
              break;
            }
LABEL_488:
            *((_DWORD *)this + 29) = v172;
            goto LABEL_20;
          case 0x16u:
            *((_DWORD *)this + 53) |= 8u;
            v175 = *((_QWORD *)a2 + 1);
            v176 = *((_QWORD *)a2 + 2);
            v177 = *(_QWORD *)a2;
            if (v175 <= 0xFFFFFFFFFFFFFFF5 && v175 + 10 <= v176)
            {
              v178 = 0;
              v179 = 0;
              v180 = 0;
              do
              {
                v181 = v175 + 1;
                *((_QWORD *)a2 + 1) = v175 + 1;
                v182 = *(_BYTE *)(v177 + v175);
                v180 |= (unint64_t)(v182 & 0x7F) << v178;
                if ((v182 & 0x80) == 0)
                  goto LABEL_491;
                v178 += 7;
                v175 = v181;
                v14 = v179++ > 8;
              }
              while (!v14);
LABEL_366:
              v180 = 0;
              goto LABEL_491;
            }
            v297 = 0;
            v298 = 0;
            v180 = 0;
            if (v176 <= v175)
              v176 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v176 == v175)
              {
                v180 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v299 = v175 + 1;
                v300 = *(_BYTE *)(v177 + v175);
                *((_QWORD *)a2 + 1) = v299;
                v180 |= (unint64_t)(v300 & 0x7F) << v297;
                if (v300 < 0)
                {
                  v297 += 7;
                  v175 = v299;
                  v14 = v298++ > 8;
                  if (v14)
                    goto LABEL_366;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  v180 = 0;
              }
              break;
            }
LABEL_491:
            *((_QWORD *)this + 13) = v180;
            goto LABEL_20;
          case 0x17u:
            *((_DWORD *)this + 53) |= 0x2000000u;
            v183 = *((_QWORD *)a2 + 1);
            if (v183 > 0xFFFFFFFFFFFFFFFBLL || v183 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_536;
            *((_DWORD *)this + 49) = *(_DWORD *)(*(_QWORD *)a2 + v183);
            goto LABEL_538;
          case 0x18u:
            *((_DWORD *)this + 53) |= 0x4000000u;
            v184 = *((_QWORD *)a2 + 1);
            if (v184 > 0xFFFFFFFFFFFFFFFBLL || v184 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_536;
            *((_DWORD *)this + 50) = *(_DWORD *)(*(_QWORD *)a2 + v184);
            goto LABEL_538;
          case 0x19u:
            *((_DWORD *)this + 53) |= 0x8000000u;
            v185 = *((_QWORD *)a2 + 1);
            if (v185 > 0xFFFFFFFFFFFFFFFBLL || v185 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_536;
            *((_DWORD *)this + 51) = *(_DWORD *)(*(_QWORD *)a2 + v185);
            goto LABEL_538;
          case 0x1Au:
            *((_DWORD *)this + 53) |= 0x800u;
            v186 = *((_QWORD *)a2 + 1);
            v187 = *((_QWORD *)a2 + 2);
            v188 = *(_QWORD *)a2;
            if (v186 <= 0xFFFFFFFFFFFFFFF5 && v186 + 10 <= v187)
            {
              v189 = 0;
              v190 = 0;
              v191 = 0;
              do
              {
                v192 = v186 + 1;
                *((_QWORD *)a2 + 1) = v186 + 1;
                v193 = *(_BYTE *)(v188 + v186);
                v191 |= (unint64_t)(v193 & 0x7F) << v189;
                if ((v193 & 0x80) == 0)
                  goto LABEL_494;
                v189 += 7;
                v186 = v192;
                v14 = v190++ > 8;
              }
              while (!v14);
LABEL_373:
              LODWORD(v191) = 0;
              goto LABEL_494;
            }
            v301 = 0;
            v302 = 0;
            v191 = 0;
            if (v187 <= v186)
              v187 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v187 == v186)
              {
                LODWORD(v191) = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v303 = v186 + 1;
                v304 = *(_BYTE *)(v188 + v186);
                *((_QWORD *)a2 + 1) = v303;
                v191 |= (unint64_t)(v304 & 0x7F) << v301;
                if (v304 < 0)
                {
                  v301 += 7;
                  v186 = v303;
                  v14 = v302++ > 8;
                  if (v14)
                    goto LABEL_373;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v191) = 0;
              }
              break;
            }
LABEL_494:
            *((_DWORD *)this + 35) = v191;
            goto LABEL_20;
          case 0x1Bu:
            *((_DWORD *)this + 53) |= 0x80u;
            v194 = *((_QWORD *)a2 + 1);
            v195 = *((_QWORD *)a2 + 2);
            v196 = *(_QWORD *)a2;
            if (v194 <= 0xFFFFFFFFFFFFFFF5 && v194 + 10 <= v195)
            {
              v197 = 0;
              v198 = 0;
              v199 = 0;
              do
              {
                v200 = v194 + 1;
                *((_QWORD *)a2 + 1) = v194 + 1;
                v201 = *(_BYTE *)(v196 + v194);
                v199 |= (unint64_t)(v201 & 0x7F) << v197;
                if ((v201 & 0x80) == 0)
                  goto LABEL_497;
                v197 += 7;
                v194 = v200;
                v14 = v198++ > 8;
              }
              while (!v14);
LABEL_380:
              LODWORD(v199) = 0;
              goto LABEL_497;
            }
            v305 = 0;
            v306 = 0;
            v199 = 0;
            if (v195 <= v194)
              v195 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v195 == v194)
              {
                LODWORD(v199) = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v307 = v194 + 1;
                v308 = *(_BYTE *)(v196 + v194);
                *((_QWORD *)a2 + 1) = v307;
                v199 |= (unint64_t)(v308 & 0x7F) << v305;
                if (v308 < 0)
                {
                  v305 += 7;
                  v194 = v307;
                  v14 = v306++ > 8;
                  if (v14)
                    goto LABEL_380;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v199) = 0;
              }
              break;
            }
LABEL_497:
            *((_DWORD *)this + 31) = v199;
            goto LABEL_20;
          case 0x1Cu:
            *((_DWORD *)this + 53) |= 2u;
            v202 = *((_QWORD *)a2 + 1);
            v203 = *((_QWORD *)a2 + 2);
            v204 = *(_QWORD *)a2;
            if (v202 <= 0xFFFFFFFFFFFFFFF5 && v202 + 10 <= v203)
            {
              v205 = 0;
              v206 = 0;
              v207 = 0;
              do
              {
                v208 = v202 + 1;
                *((_QWORD *)a2 + 1) = v202 + 1;
                v209 = *(_BYTE *)(v204 + v202);
                v207 |= (unint64_t)(v209 & 0x7F) << v205;
                if ((v209 & 0x80) == 0)
                  goto LABEL_500;
                v205 += 7;
                v202 = v208;
                v14 = v206++ > 8;
              }
              while (!v14);
LABEL_387:
              v207 = 0;
              goto LABEL_500;
            }
            v309 = 0;
            v310 = 0;
            v207 = 0;
            if (v203 <= v202)
              v203 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v203 == v202)
              {
                v207 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v311 = v202 + 1;
                v312 = *(_BYTE *)(v204 + v202);
                *((_QWORD *)a2 + 1) = v311;
                v207 |= (unint64_t)(v312 & 0x7F) << v309;
                if (v312 < 0)
                {
                  v309 += 7;
                  v202 = v311;
                  v14 = v310++ > 8;
                  if (v14)
                    goto LABEL_387;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  v207 = 0;
              }
              break;
            }
LABEL_500:
            *((_QWORD *)this + 11) = v207;
            goto LABEL_20;
          case 0x1Du:
            *((_DWORD *)this + 53) |= 0x40000000u;
            v210 = *((_QWORD *)a2 + 1);
            if (v210 >= *((_QWORD *)a2 + 2))
            {
              v213 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v211 = v210 + 1;
              v212 = *(unsigned __int8 *)(*(_QWORD *)a2 + v210);
              *((_QWORD *)a2 + 1) = v211;
              v213 = v212 != 0;
            }
            *((_BYTE *)this + 210) = v213;
            goto LABEL_20;
          case 0x1Eu:
            *((_DWORD *)this + 53) |= 0x1000u;
            v214 = *((_QWORD *)a2 + 1);
            if (v214 > 0xFFFFFFFFFFFFFFFBLL || v214 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_536;
            *((_DWORD *)this + 36) = *(_DWORD *)(*(_QWORD *)a2 + v214);
            goto LABEL_538;
          case 0x1Fu:
            *((_DWORD *)this + 53) |= 0x200u;
            v215 = *((_QWORD *)a2 + 1);
            if (v215 > 0xFFFFFFFFFFFFFFFBLL || v215 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_536;
            *((_DWORD *)this + 33) = *(_DWORD *)(*(_QWORD *)a2 + v215);
            goto LABEL_538;
          case 0x20u:
            *((_DWORD *)this + 53) |= 0x40u;
            v216 = *((_QWORD *)a2 + 1);
            if (v216 > 0xFFFFFFFFFFFFFFFBLL || v216 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_536;
            *((_DWORD *)this + 30) = *(_DWORD *)(*(_QWORD *)a2 + v216);
            goto LABEL_538;
          case 0x21u:
            *((_DWORD *)this + 53) |= 0x200000u;
            v217 = *((_QWORD *)a2 + 1);
            v218 = *((_QWORD *)a2 + 2);
            v219 = *(_QWORD *)a2;
            if (v217 <= 0xFFFFFFFFFFFFFFF5 && v217 + 10 <= v218)
            {
              v220 = 0;
              v221 = 0;
              v222 = 0;
              do
              {
                v223 = v217 + 1;
                *((_QWORD *)a2 + 1) = v217 + 1;
                v224 = *(_BYTE *)(v219 + v217);
                v222 |= (unint64_t)(v224 & 0x7F) << v220;
                if ((v224 & 0x80) == 0)
                  goto LABEL_503;
                v220 += 7;
                v217 = v223;
                v14 = v221++ > 8;
              }
              while (!v14);
LABEL_396:
              LODWORD(v222) = 0;
              goto LABEL_503;
            }
            v313 = 0;
            v314 = 0;
            v222 = 0;
            if (v218 <= v217)
              v218 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v218 == v217)
              {
                LODWORD(v222) = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v315 = v217 + 1;
                v316 = *(_BYTE *)(v219 + v217);
                *((_QWORD *)a2 + 1) = v315;
                v222 |= (unint64_t)(v316 & 0x7F) << v313;
                if (v316 < 0)
                {
                  v313 += 7;
                  v217 = v315;
                  v14 = v314++ > 8;
                  if (v14)
                    goto LABEL_396;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v222) = 0;
              }
              break;
            }
LABEL_503:
            *((_DWORD *)this + 45) = v222;
            goto LABEL_20;
          case 0x22u:
            *((_DWORD *)this + 53) |= 0x400u;
            v225 = *((_QWORD *)a2 + 1);
            v226 = *((_QWORD *)a2 + 2);
            v227 = *(_QWORD *)a2;
            if (v225 <= 0xFFFFFFFFFFFFFFF5 && v225 + 10 <= v226)
            {
              v228 = 0;
              v229 = 0;
              v230 = 0;
              do
              {
                v231 = v225 + 1;
                *((_QWORD *)a2 + 1) = v225 + 1;
                v232 = *(_BYTE *)(v227 + v225);
                v230 |= (unint64_t)(v232 & 0x7F) << v228;
                if ((v232 & 0x80) == 0)
                  goto LABEL_506;
                v228 += 7;
                v225 = v231;
                v14 = v229++ > 8;
              }
              while (!v14);
LABEL_403:
              LODWORD(v230) = 0;
              goto LABEL_506;
            }
            v317 = 0;
            v318 = 0;
            v230 = 0;
            if (v226 <= v225)
              v226 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v226 == v225)
              {
                LODWORD(v230) = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v319 = v225 + 1;
                v320 = *(_BYTE *)(v227 + v225);
                *((_QWORD *)a2 + 1) = v319;
                v230 |= (unint64_t)(v320 & 0x7F) << v317;
                if (v320 < 0)
                {
                  v317 += 7;
                  v225 = v319;
                  v14 = v318++ > 8;
                  if (v14)
                    goto LABEL_403;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v230) = 0;
              }
              break;
            }
LABEL_506:
            *((_DWORD *)this + 34) = v230;
            goto LABEL_20;
          case 0x23u:
            *((_DWORD *)this + 53) |= 0x800000u;
            v233 = *((_QWORD *)a2 + 1);
            v234 = *((_QWORD *)a2 + 2);
            v235 = *(_QWORD *)a2;
            if (v233 <= 0xFFFFFFFFFFFFFFF5 && v233 + 10 <= v234)
            {
              v236 = 0;
              v237 = 0;
              v238 = 0;
              do
              {
                v239 = v233 + 1;
                *((_QWORD *)a2 + 1) = v233 + 1;
                v240 = *(_BYTE *)(v235 + v233);
                v238 |= (unint64_t)(v240 & 0x7F) << v236;
                if ((v240 & 0x80) == 0)
                  goto LABEL_509;
                v236 += 7;
                v233 = v239;
                v14 = v237++ > 8;
              }
              while (!v14);
LABEL_410:
              LODWORD(v238) = 0;
              goto LABEL_509;
            }
            v321 = 0;
            v322 = 0;
            v238 = 0;
            if (v234 <= v233)
              v234 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v234 == v233)
              {
                LODWORD(v238) = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v323 = v233 + 1;
                v324 = *(_BYTE *)(v235 + v233);
                *((_QWORD *)a2 + 1) = v323;
                v238 |= (unint64_t)(v324 & 0x7F) << v321;
                if (v324 < 0)
                {
                  v321 += 7;
                  v233 = v323;
                  v14 = v322++ > 8;
                  if (v14)
                    goto LABEL_410;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v238) = 0;
              }
              break;
            }
LABEL_509:
            *((_DWORD *)this + 47) = v238;
            goto LABEL_20;
          default:
            goto LABEL_19;
        }
      }
      v4 = 0;
      return v4 == 0;
    }
    break;
  }
  v15 = 0;
  v16 = 0;
  v11 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v17 = v2 + 1;
    v18 = *(_BYTE *)(v8 + v2);
    *((_QWORD *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0)
      goto LABEL_25;
    v15 += 7;
    v2 = v17;
    v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  if ((PB::Reader::skip(a2) & 1) != 0)
    goto LABEL_20;
  return 0;
}

uint64_t CMMsl::KappaTrigger::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;
  double *v5;
  double *v6;
  double v7;
  float *v8;
  float *v9;
  float v10;
  float *v11;
  float *v12;
  float v13;
  int v14;

  v3 = this;
  v4 = *(_DWORD *)(this + 212);
  if ((v4 & 4) == 0)
  {
    if ((v4 & 0x80000000) == 0)
      goto LABEL_3;
LABEL_45:
    this = PB::Writer::write(a2);
    if ((*(_DWORD *)(v3 + 212) & 1) == 0)
      goto LABEL_5;
    goto LABEL_4;
  }
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 212);
  if (v4 < 0)
    goto LABEL_45;
LABEL_3:
  if ((v4 & 1) != 0)
LABEL_4:
    this = PB::Writer::write(a2, *(double *)(v3 + 80));
LABEL_5:
  v5 = *(double **)(v3 + 8);
  v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7);
  }
  v8 = *(float **)(v3 + 56);
  v9 = *(float **)(v3 + 64);
  while (v8 != v9)
  {
    v10 = *v8++;
    this = PB::Writer::write(a2, v10);
  }
  v11 = *(float **)(v3 + 32);
  v12 = *(float **)(v3 + 40);
  while (v11 != v12)
  {
    v13 = *v11++;
    this = PB::Writer::write(a2, v13);
  }
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x10000000) != 0)
  {
    this = PB::Writer::write(a2);
    v14 = *(_DWORD *)(v3 + 212);
    if ((v14 & 0x20000000) == 0)
    {
LABEL_16:
      if ((v14 & 0x400000) == 0)
        goto LABEL_17;
      goto LABEL_49;
    }
  }
  else if ((v14 & 0x20000000) == 0)
  {
    goto LABEL_16;
  }
  this = PB::Writer::write(a2);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x400000) == 0)
  {
LABEL_17:
    if ((v14 & 0x10) == 0)
      goto LABEL_18;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::writeVarInt(a2);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x10) == 0)
  {
LABEL_18:
    if ((v14 & 0x80000) == 0)
      goto LABEL_19;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(float *)(v3 + 112));
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x80000) == 0)
  {
LABEL_19:
    if ((v14 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::writeVarInt(a2);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x40000) == 0)
  {
LABEL_20:
    if ((v14 & 0x20000) == 0)
      goto LABEL_21;
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::writeVarInt(a2);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x20000) == 0)
  {
LABEL_21:
    if ((v14 & 0x10000) == 0)
      goto LABEL_22;
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::writeVarInt(a2);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x10000) == 0)
  {
LABEL_22:
    if ((v14 & 0x8000) == 0)
      goto LABEL_23;
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::writeVarInt(a2);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x8000) == 0)
  {
LABEL_23:
    if ((v14 & 0x4000) == 0)
      goto LABEL_24;
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::writeVarInt(a2);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x4000) == 0)
  {
LABEL_24:
    if ((v14 & 0x2000) == 0)
      goto LABEL_25;
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::writeVarInt(a2);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x2000) == 0)
  {
LABEL_25:
    if ((v14 & 0x100000) == 0)
      goto LABEL_26;
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::writeVarInt(a2);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x100000) == 0)
  {
LABEL_26:
    if ((v14 & 0x100) == 0)
      goto LABEL_27;
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::writeVarInt(a2);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x100) == 0)
  {
LABEL_27:
    if ((v14 & 0x1000000) == 0)
      goto LABEL_28;
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(float *)(v3 + 128));
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x1000000) == 0)
  {
LABEL_28:
    if ((v14 & 0x20) == 0)
      goto LABEL_29;
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::writeVarInt(a2);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x20) == 0)
  {
LABEL_29:
    if ((v14 & 8) == 0)
      goto LABEL_30;
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::writeVarInt(a2);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 8) == 0)
  {
LABEL_30:
    if ((v14 & 0x2000000) == 0)
      goto LABEL_31;
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::writeVarInt(a2);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x2000000) == 0)
  {
LABEL_31:
    if ((v14 & 0x4000000) == 0)
      goto LABEL_32;
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::write(a2, *(float *)(v3 + 196));
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x4000000) == 0)
  {
LABEL_32:
    if ((v14 & 0x8000000) == 0)
      goto LABEL_33;
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::write(a2, *(float *)(v3 + 200));
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x8000000) == 0)
  {
LABEL_33:
    if ((v14 & 0x800) == 0)
      goto LABEL_34;
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::write(a2, *(float *)(v3 + 204));
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x800) == 0)
  {
LABEL_34:
    if ((v14 & 0x80) == 0)
      goto LABEL_35;
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::writeVarInt(a2);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x80) == 0)
  {
LABEL_35:
    if ((v14 & 2) == 0)
      goto LABEL_36;
    goto LABEL_68;
  }
LABEL_67:
  this = PB::Writer::writeVarInt(a2);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 2) == 0)
  {
LABEL_36:
    if ((v14 & 0x40000000) == 0)
      goto LABEL_37;
    goto LABEL_69;
  }
LABEL_68:
  this = PB::Writer::writeVarInt(a2);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x40000000) == 0)
  {
LABEL_37:
    if ((v14 & 0x1000) == 0)
      goto LABEL_38;
    goto LABEL_70;
  }
LABEL_69:
  this = PB::Writer::write(a2);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x1000) == 0)
  {
LABEL_38:
    if ((v14 & 0x200) == 0)
      goto LABEL_39;
    goto LABEL_71;
  }
LABEL_70:
  this = PB::Writer::write(a2, *(float *)(v3 + 144));
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x200) == 0)
  {
LABEL_39:
    if ((v14 & 0x40) == 0)
      goto LABEL_40;
    goto LABEL_72;
  }
LABEL_71:
  this = PB::Writer::write(a2, *(float *)(v3 + 132));
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x40) == 0)
  {
LABEL_40:
    if ((v14 & 0x200000) == 0)
      goto LABEL_41;
    goto LABEL_73;
  }
LABEL_72:
  this = PB::Writer::write(a2, *(float *)(v3 + 120));
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x200000) == 0)
  {
LABEL_41:
    if ((v14 & 0x400) == 0)
      goto LABEL_42;
    goto LABEL_74;
  }
LABEL_73:
  this = PB::Writer::writeVarInt(a2);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x400) == 0)
  {
LABEL_42:
    if ((v14 & 0x800000) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_74:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_DWORD *)(v3 + 212) & 0x800000) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::KappaTrigger::hash_value(CMMsl::KappaTrigger *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  uint64_t v52;

  v2 = *((_DWORD *)this + 53);
  if ((v2 & 4) != 0)
  {
    v3 = *((_QWORD *)this + 12);
    if (v2 < 0)
      goto LABEL_3;
  }
  else
  {
    v3 = 0;
    if (v2 < 0)
    {
LABEL_3:
      v4 = *((unsigned __int8 *)this + 211);
      goto LABEL_6;
    }
  }
  v4 = 0;
LABEL_6:
  v52 = v4;
  if ((v2 & 1) != 0)
  {
    v5 = *((double *)this + 10);
    if (v5 == 0.0)
      v5 = 0.0;
    v50 = v5;
  }
  else
  {
    v50 = 0.0;
  }
  v6 = PBHashBytes();
  v7 = PBHashBytes();
  v8 = PBHashBytes();
  v9 = *((_DWORD *)this + 53);
  v51 = v8;
  if ((v9 & 0x10000000) != 0)
    v49 = *((unsigned __int8 *)this + 208);
  else
    v49 = 0;
  v10 = v3;
  if ((v9 & 0x20000000) != 0)
  {
    v48 = *((unsigned __int8 *)this + 209);
    if ((v9 & 0x400000) != 0)
    {
LABEL_16:
      v11 = *((unsigned int *)this + 46);
      if ((v9 & 0x10) != 0)
        goto LABEL_17;
LABEL_68:
      v47 = 0;
      if ((v9 & 0x80000) != 0)
        goto LABEL_20;
      goto LABEL_69;
    }
  }
  else
  {
    v48 = 0;
    if ((v9 & 0x400000) != 0)
      goto LABEL_16;
  }
  v11 = 0;
  if ((v9 & 0x10) == 0)
    goto LABEL_68;
LABEL_17:
  v12 = *((float *)this + 28);
  v13 = LODWORD(v12);
  if (v12 == 0.0)
    v13 = 0;
  v47 = v13;
  if ((v9 & 0x80000) != 0)
  {
LABEL_20:
    v46 = *((unsigned int *)this + 43);
    if ((v9 & 0x40000) != 0)
      goto LABEL_21;
    goto LABEL_70;
  }
LABEL_69:
  v46 = 0;
  if ((v9 & 0x40000) != 0)
  {
LABEL_21:
    v14 = *((unsigned int *)this + 42);
    if ((v9 & 0x20000) != 0)
      goto LABEL_22;
    goto LABEL_71;
  }
LABEL_70:
  v14 = 0;
  if ((v9 & 0x20000) != 0)
  {
LABEL_22:
    v15 = *((unsigned int *)this + 41);
    if ((v9 & 0x10000) != 0)
      goto LABEL_23;
    goto LABEL_72;
  }
LABEL_71:
  v15 = 0;
  if ((v9 & 0x10000) != 0)
  {
LABEL_23:
    v16 = *((unsigned int *)this + 40);
    if ((v9 & 0x8000) != 0)
      goto LABEL_24;
    goto LABEL_73;
  }
LABEL_72:
  v16 = 0;
  if ((v9 & 0x8000) != 0)
  {
LABEL_24:
    v17 = *((unsigned int *)this + 39);
    if ((v9 & 0x4000) != 0)
      goto LABEL_25;
    goto LABEL_74;
  }
LABEL_73:
  v17 = 0;
  if ((v9 & 0x4000) != 0)
  {
LABEL_25:
    v18 = *((unsigned int *)this + 38);
    if ((v9 & 0x2000) != 0)
      goto LABEL_26;
    goto LABEL_75;
  }
LABEL_74:
  v18 = 0;
  if ((v9 & 0x2000) != 0)
  {
LABEL_26:
    v19 = *((unsigned int *)this + 37);
    if ((v9 & 0x100000) != 0)
      goto LABEL_27;
    goto LABEL_76;
  }
LABEL_75:
  v19 = 0;
  if ((v9 & 0x100000) != 0)
  {
LABEL_27:
    v20 = *((unsigned int *)this + 44);
    if ((v9 & 0x100) != 0)
      goto LABEL_28;
LABEL_77:
    v22 = 0;
    if ((v9 & 0x1000000) != 0)
      goto LABEL_32;
    goto LABEL_78;
  }
LABEL_76:
  v20 = 0;
  if ((v9 & 0x100) == 0)
    goto LABEL_77;
LABEL_28:
  v21 = *((float *)this + 32);
  if (v21 == 0.0)
    v22 = 0;
  else
    v22 = LODWORD(v21);
  if ((v9 & 0x1000000) != 0)
  {
LABEL_32:
    v23 = *((unsigned int *)this + 48);
    if ((v9 & 0x20) != 0)
      goto LABEL_33;
    goto LABEL_79;
  }
LABEL_78:
  v23 = 0;
  if ((v9 & 0x20) != 0)
  {
LABEL_33:
    v24 = *((int *)this + 29);
    if ((v9 & 8) != 0)
      goto LABEL_34;
    goto LABEL_80;
  }
LABEL_79:
  v24 = 0;
  if ((v9 & 8) != 0)
  {
LABEL_34:
    v25 = *((_QWORD *)this + 13);
    if ((v9 & 0x2000000) != 0)
      goto LABEL_35;
LABEL_81:
    v27 = 0;
    if ((v9 & 0x4000000) != 0)
      goto LABEL_39;
LABEL_82:
    v29 = 0;
    if ((v9 & 0x8000000) != 0)
      goto LABEL_43;
LABEL_83:
    v31 = 0;
    if ((v9 & 0x800) != 0)
      goto LABEL_47;
    goto LABEL_84;
  }
LABEL_80:
  v25 = 0;
  if ((v9 & 0x2000000) == 0)
    goto LABEL_81;
LABEL_35:
  v26 = *((float *)this + 49);
  if (v26 == 0.0)
    v27 = 0;
  else
    v27 = LODWORD(v26);
  if ((v9 & 0x4000000) == 0)
    goto LABEL_82;
LABEL_39:
  v28 = *((float *)this + 50);
  if (v28 == 0.0)
    v29 = 0;
  else
    v29 = LODWORD(v28);
  if ((v9 & 0x8000000) == 0)
    goto LABEL_83;
LABEL_43:
  v30 = *((float *)this + 51);
  if (v30 == 0.0)
    v31 = 0;
  else
    v31 = LODWORD(v30);
  if ((v9 & 0x800) != 0)
  {
LABEL_47:
    v32 = *((unsigned int *)this + 35);
    if ((v9 & 0x80) != 0)
      goto LABEL_48;
    goto LABEL_85;
  }
LABEL_84:
  v32 = 0;
  if ((v9 & 0x80) != 0)
  {
LABEL_48:
    v33 = *((unsigned int *)this + 31);
    if ((v9 & 2) != 0)
      goto LABEL_49;
    goto LABEL_86;
  }
LABEL_85:
  v33 = 0;
  if ((v9 & 2) != 0)
  {
LABEL_49:
    v34 = *((_QWORD *)this + 11);
    if ((v9 & 0x40000000) != 0)
      goto LABEL_50;
    goto LABEL_87;
  }
LABEL_86:
  v34 = 0;
  if ((v9 & 0x40000000) != 0)
  {
LABEL_50:
    v35 = *((unsigned __int8 *)this + 210);
    if ((v9 & 0x1000) != 0)
      goto LABEL_51;
LABEL_88:
    v37 = 0;
    if ((v9 & 0x200) != 0)
      goto LABEL_55;
LABEL_89:
    v39 = 0;
    if ((v9 & 0x40) != 0)
      goto LABEL_59;
LABEL_90:
    v41 = 0;
    if ((v9 & 0x200000) != 0)
      goto LABEL_63;
    goto LABEL_91;
  }
LABEL_87:
  v35 = 0;
  if ((v9 & 0x1000) == 0)
    goto LABEL_88;
LABEL_51:
  v36 = *((float *)this + 36);
  if (v36 == 0.0)
    v37 = 0;
  else
    v37 = LODWORD(v36);
  if ((v9 & 0x200) == 0)
    goto LABEL_89;
LABEL_55:
  v38 = *((float *)this + 33);
  if (v38 == 0.0)
    v39 = 0;
  else
    v39 = LODWORD(v38);
  if ((v9 & 0x40) == 0)
    goto LABEL_90;
LABEL_59:
  v40 = *((float *)this + 30);
  if (v40 == 0.0)
    v41 = 0;
  else
    v41 = LODWORD(v40);
  if ((v9 & 0x200000) != 0)
  {
LABEL_63:
    v42 = *((unsigned int *)this + 45);
    if ((v9 & 0x400) != 0)
      goto LABEL_64;
LABEL_92:
    v43 = 0;
    if ((v9 & 0x800000) != 0)
      goto LABEL_65;
LABEL_93:
    v44 = 0;
    return v52 ^ v10 ^ *(_QWORD *)&v50 ^ v6 ^ v7 ^ v51 ^ v49 ^ v48 ^ v11 ^ v47 ^ v46 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v22 ^ v23 ^ v24 ^ v25 ^ v27 ^ v29 ^ v31 ^ v32 ^ v33 ^ v34 ^ v35 ^ v37 ^ v39 ^ v41 ^ v42 ^ v43 ^ v44;
  }
LABEL_91:
  v42 = 0;
  if ((v9 & 0x400) == 0)
    goto LABEL_92;
LABEL_64:
  v43 = *((unsigned int *)this + 34);
  if ((v9 & 0x800000) == 0)
    goto LABEL_93;
LABEL_65:
  v44 = *((unsigned int *)this + 47);
  return v52 ^ v10 ^ *(_QWORD *)&v50 ^ v6 ^ v7 ^ v51 ^ v49 ^ v48 ^ v11 ^ v47 ^ v46 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v22 ^ v23 ^ v24 ^ v25 ^ v27 ^ v29 ^ v31 ^ v32 ^ v33 ^ v34 ^ v35 ^ v37 ^ v39 ^ v41 ^ v42 ^ v43 ^ v44;
}

void CMMsl::KappaTriggerClustersResult::~KappaTriggerClustersResult(CMMsl::KappaTriggerClustersResult *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::KappaTriggerClustersResult::KappaTriggerClustersResult(uint64_t this, const CMMsl::KappaTriggerClustersResult *a2)
{
  __int16 v2;
  __int16 v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;

  *(_QWORD *)this = &off_25135ED68;
  *(_DWORD *)(this + 96) = 0;
  v2 = *((_WORD *)a2 + 48);
  if ((v2 & 0x1000) != 0)
  {
    v4 = *((_DWORD *)a2 + 22);
    v3 = 4096;
    *(_WORD *)(this + 96) = 4096;
    *(_DWORD *)(this + 88) = v4;
    v2 = *((_WORD *)a2 + 48);
    if ((v2 & 0x800) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_WORD *)a2 + 48) & 0x800) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 21);
    v3 |= 0x800u;
    *(_WORD *)(this + 96) = v3;
    *(_DWORD *)(this + 84) = v5;
    v2 = *((_WORD *)a2 + 48);
  }
LABEL_6:
  if ((v2 & 0x100) != 0)
  {
    v6 = *((_DWORD *)a2 + 18);
    v3 |= 0x100u;
    *(_WORD *)(this + 96) = v3;
    *(_DWORD *)(this + 72) = v6;
    v2 = *((_WORD *)a2 + 48);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 0x8000) == 0)
        goto LABEL_9;
      goto LABEL_23;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a2 + 8);
  v3 |= 0x80u;
  *(_WORD *)(this + 96) = v3;
  *(_QWORD *)(this + 64) = v7;
  v2 = *((_WORD *)a2 + 48);
  if ((v2 & 0x8000) == 0)
  {
LABEL_9:
    if ((v2 & 0x4000) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  v8 = *((_BYTE *)a2 + 94);
  v3 |= 0x8000u;
  *(_WORD *)(this + 96) = v3;
  *(_BYTE *)(this + 94) = v8;
  v2 = *((_WORD *)a2 + 48);
  if ((v2 & 0x4000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  v9 = *((_BYTE *)a2 + 93);
  v3 |= 0x4000u;
  *(_WORD *)(this + 96) = v3;
  *(_BYTE *)(this + 93) = v9;
  v2 = *((_WORD *)a2 + 48);
  if ((v2 & 0x2000) == 0)
  {
LABEL_11:
    if ((v2 & 2) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  v10 = *((_BYTE *)a2 + 92);
  v3 |= 0x2000u;
  *(_WORD *)(this + 96) = v3;
  *(_BYTE *)(this + 92) = v10;
  v2 = *((_WORD *)a2 + 48);
  if ((v2 & 2) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0)
      goto LABEL_13;
    goto LABEL_27;
  }
LABEL_26:
  v11 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_WORD *)(this + 96) = v3;
  *(_QWORD *)(this + 16) = v11;
  v2 = *((_WORD *)a2 + 48);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_28;
  }
LABEL_27:
  v12 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *(_WORD *)(this + 96) = v3;
  *(_QWORD *)(this + 32) = v12;
  v2 = *((_WORD *)a2 + 48);
  if ((v2 & 0x10) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_29;
  }
LABEL_28:
  v13 = *((_QWORD *)a2 + 5);
  v3 |= 0x10u;
  *(_WORD *)(this + 96) = v3;
  *(_QWORD *)(this + 40) = v13;
  v2 = *((_WORD *)a2 + 48);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 0x40) == 0)
      goto LABEL_16;
    goto LABEL_30;
  }
LABEL_29:
  v14 = *((_QWORD *)a2 + 6);
  v3 |= 0x20u;
  *(_WORD *)(this + 96) = v3;
  *(_QWORD *)(this + 48) = v14;
  v2 = *((_WORD *)a2 + 48);
  if ((v2 & 0x40) == 0)
  {
LABEL_16:
    if ((v2 & 1) == 0)
      goto LABEL_17;
    goto LABEL_31;
  }
LABEL_30:
  v15 = *((_QWORD *)a2 + 7);
  v3 |= 0x40u;
  *(_WORD *)(this + 96) = v3;
  *(_QWORD *)(this + 56) = v15;
  v2 = *((_WORD *)a2 + 48);
  if ((v2 & 1) == 0)
  {
LABEL_17:
    if ((v2 & 0x400) == 0)
      goto LABEL_18;
    goto LABEL_32;
  }
LABEL_31:
  v16 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 96) = v3;
  *(_QWORD *)(this + 8) = v16;
  v2 = *((_WORD *)a2 + 48);
  if ((v2 & 0x400) == 0)
  {
LABEL_18:
    if ((v2 & 0x200) == 0)
      goto LABEL_19;
    goto LABEL_33;
  }
LABEL_32:
  v17 = *((_DWORD *)a2 + 20);
  v3 |= 0x400u;
  *(_WORD *)(this + 96) = v3;
  *(_DWORD *)(this + 80) = v17;
  v2 = *((_WORD *)a2 + 48);
  if ((v2 & 0x200) == 0)
  {
LABEL_19:
    if ((v2 & 4) == 0)
      return this;
LABEL_34:
    v19 = *((_QWORD *)a2 + 3);
    *(_WORD *)(this + 96) = v3 | 4;
    *(_QWORD *)(this + 24) = v19;
    return this;
  }
LABEL_33:
  v18 = *((_DWORD *)a2 + 19);
  v3 |= 0x200u;
  *(_WORD *)(this + 96) = v3;
  *(_DWORD *)(this + 76) = v18;
  if ((*((_WORD *)a2 + 48) & 4) != 0)
    goto LABEL_34;
  return this;
}

CMMsl *CMMsl::KappaTriggerClustersResult::operator=(CMMsl *a1, const CMMsl::KappaTriggerClustersResult *a2)
{
  CMMsl::KappaTriggerClustersResult *v3;
  _BYTE v5[104];

  if (a1 != a2)
  {
    CMMsl::KappaTriggerClustersResult::KappaTriggerClustersResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaTriggerClustersResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaTriggerClustersResult *a2, CMMsl::KappaTriggerClustersResult *a3)
{
  int v3;
  int v4;
  int v5;
  float result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v3;
  v4 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v4;
  v5 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v5;
  result = *((float *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((float *)a2 + 18) = result;
  v7 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 94);
  *((_BYTE *)this + 94) = *((_BYTE *)a2 + 94);
  *((_BYTE *)a2 + 94) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 93);
  *((_BYTE *)this + 93) = *((_BYTE *)a2 + 93);
  *((_BYTE *)a2 + 93) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 92);
  *((_BYTE *)this + 92) = *((_BYTE *)a2 + 92);
  *((_BYTE *)a2 + 92) = v7;
  v8 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v8;
  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v9;
  v10 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v10;
  v11 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v11;
  v12 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v12;
  v13 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v13;
  LODWORD(v13) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v13;
  LODWORD(v13) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v13;
  v14 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v14;
  return result;
}

float CMMsl::KappaTriggerClustersResult::KappaTriggerClustersResult(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135ED68;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a2 + 96) = 0;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  result = *(float *)(a2 + 72);
  *(float *)(a1 + 72) = result;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 94) = *(_BYTE *)(a2 + 94);
  *(_BYTE *)(a1 + 93) = *(_BYTE *)(a2 + 93);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return result;
}

CMMsl *CMMsl::KappaTriggerClustersResult::operator=(CMMsl *this, uint64_t a2, CMMsl::KappaTriggerClustersResult *a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  void (**v8)(CMMsl::KappaTriggerClustersResult *__hidden);
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  __int128 v14;
  __int16 v15;
  char v16;
  int v17;

  if (this != (CMMsl *)a2)
  {
    v8 = &off_25135ED68;
    v17 = *(_DWORD *)(a2 + 96);
    *(_DWORD *)(a2 + 96) = 0;
    v13 = *(_DWORD *)(a2 + 72);
    v16 = *(_BYTE *)(a2 + 94);
    v15 = *(_WORD *)(a2 + 92);
    v4 = *(_OWORD *)(a2 + 56);
    v11 = *(_OWORD *)(a2 + 40);
    v12 = v4;
    v5 = *(_OWORD *)(a2 + 8);
    v14 = *(_OWORD *)(a2 + 76);
    v6 = *(_OWORD *)(a2 + 24);
    v9 = v5;
    v10 = v6;
    CMMsl::swap(this, (CMMsl::KappaTriggerClustersResult *)&v8, a3);
    PB::Base::~Base((PB::Base *)&v8);
  }
  return this;
}

uint64_t CMMsl::KappaTriggerClustersResult::formatText(CMMsl::KappaTriggerClustersResult *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 48);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "armedDuration");
    v5 = *((_WORD *)this + 48);
    if ((v5 & 0x100) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_21;
    }
  }
  else if ((*((_WORD *)this + 48) & 0x100) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "armedDurationThreshold", *((float *)this + 18));
  v5 = *((_WORD *)this + 48);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "armedDurationThresholdTimestamp");
  v5 = *((_WORD *)this + 48);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "btHint");
  v5 = *((_WORD *)this + 48);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "epochFirstTimestamp");
  v5 = *((_WORD *)this + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "epochLastTimestamp");
  v5 = *((_WORD *)this + 48);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x2000) == 0)
      goto LABEL_9;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "firstTriggerTimestamp");
  v5 = *((_WORD *)this + 48);
  if ((v5 & 0x2000) == 0)
  {
LABEL_9:
    if ((v5 & 0x4000) == 0)
      goto LABEL_10;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "isBTHintDetected");
  v5 = *((_WORD *)this + 48);
  if ((v5 & 0x4000) == 0)
  {
LABEL_10:
    if ((v5 & 0x8000) == 0)
      goto LABEL_11;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "isClusterInBeginningOfDrive");
  v5 = *((_WORD *)this + 48);
  if ((v5 & 0x8000) == 0)
  {
LABEL_11:
    if ((v5 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "isTriggerCluster");
  v5 = *((_WORD *)this + 48);
  if ((v5 & 0x40) == 0)
  {
LABEL_12:
    if ((v5 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "lastTriggerTimestamp");
  v5 = *((_WORD *)this + 48);
  if ((v5 & 0x200) == 0)
  {
LABEL_13:
    if ((v5 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "numTriggersInEpoch");
  v5 = *((_WORD *)this + 48);
  if ((v5 & 0x400) == 0)
  {
LABEL_14:
    if ((v5 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "numTriggersInWindow");
  v5 = *((_WORD *)this + 48);
  if ((v5 & 0x800) == 0)
  {
LABEL_15:
    if ((v5 & 0x80) == 0)
      goto LABEL_16;
LABEL_33:
    PB::TextFormatter::format(a2, "timestamp");
    if ((*((_WORD *)this + 48) & 0x1000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_17;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "numTriggersThreshold");
  v5 = *((_WORD *)this + 48);
  if ((v5 & 0x80) != 0)
    goto LABEL_33;
LABEL_16:
  if ((v5 & 0x1000) != 0)
LABEL_17:
    PB::TextFormatter::format(a2, "windowDuration");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaTriggerClustersResult::readFrom(CMMsl::KappaTriggerClustersResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  char v33;
  int v34;
  BOOL v35;
  int v36;
  BOOL v37;
  int v38;
  BOOL v39;
  unint64_t v40;
  uint64_t v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  char v51;
  unint64_t v52;
  uint64_t v53;
  char v54;
  unsigned int v55;
  uint64_t v56;
  char v57;
  unint64_t v58;
  uint64_t v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  char v63;
  unint64_t v64;
  uint64_t v65;
  char v66;
  unsigned int v67;
  uint64_t v68;
  char v69;
  unint64_t v70;
  uint64_t v71;
  char v72;
  unsigned int v73;
  uint64_t v74;
  char v75;
  unint64_t v76;
  uint64_t v77;
  char v78;
  unsigned int v79;
  uint64_t v80;
  char v81;
  unint64_t v82;
  uint64_t v83;
  char v84;
  unsigned int v85;
  uint64_t v86;
  char v87;
  unint64_t v88;
  uint64_t v89;
  char v90;
  unsigned int v91;
  uint64_t v92;
  char v93;
  unint64_t v94;
  uint64_t v95;
  char v96;
  unsigned int v97;
  uint64_t v98;
  char v99;
  char v100;
  unsigned int v101;
  unint64_t v102;
  char v103;
  char v104;
  unsigned int v105;
  unint64_t v106;
  char v107;
  char v108;
  unsigned int v109;
  unint64_t v110;
  char v111;
  char v112;
  unsigned int v113;
  unint64_t v114;
  char v115;
  char v116;
  unsigned int v117;
  unint64_t v118;
  char v119;
  char v120;
  unsigned int v121;
  unint64_t v122;
  char v123;
  char v124;
  unsigned int v125;
  unint64_t v126;
  char v127;
  char v128;
  unsigned int v129;
  unint64_t v130;
  char v131;
  char v132;
  unsigned int v133;
  unint64_t v134;
  char v135;
  char v136;
  unsigned int v137;
  unint64_t v138;
  char v139;
  char v140;
  unsigned int v141;
  unint64_t v142;
  char v143;
  char v144;
  unsigned int v145;
  unint64_t v146;
  char v147;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_26:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v21 = v11 >> 3;
      if ((int)(v11 >> 3) > 300)
      {
        switch((int)v21)
        {
          case 301:
            *((_WORD *)this + 48) |= 8u;
            v28 = *((_QWORD *)a2 + 1);
            v2 = *((_QWORD *)a2 + 2);
            v29 = *(_QWORD *)a2;
            if (v28 > 0xFFFFFFFFFFFFFFF5 || v28 + 10 > v2)
            {
              v104 = 0;
              v105 = 0;
              v32 = 0;
              if (v2 <= v28)
                v2 = *((_QWORD *)a2 + 1);
              while (1)
              {
                if (v2 == v28)
                {
                  v32 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                  goto LABEL_227;
                }
                v106 = v28++;
                v107 = *(_BYTE *)(v29 + v106);
                *((_QWORD *)a2 + 1) = v28;
                v32 |= (unint64_t)(v107 & 0x7F) << v104;
                if ((v107 & 0x80) == 0)
                  break;
                v104 += 7;
                v14 = v105++ > 8;
                if (v14)
                {
                  v32 = 0;
LABEL_226:
                  v2 = v106 + 1;
                  goto LABEL_227;
                }
              }
              if (*((_BYTE *)a2 + 24))
                v32 = 0;
              goto LABEL_226;
            }
            v30 = 0;
            v31 = 0;
            v32 = 0;
            do
            {
              v2 = v28 + 1;
              *((_QWORD *)a2 + 1) = v28 + 1;
              v33 = *(_BYTE *)(v29 + v28);
              v32 |= (unint64_t)(v33 & 0x7F) << v30;
              if ((v33 & 0x80) == 0)
                goto LABEL_227;
              v30 += 7;
              v28 = v2;
              v14 = v31++ > 8;
            }
            while (!v14);
            v32 = 0;
LABEL_227:
            *((_QWORD *)this + 4) = v32;
            break;
          case 302:
            *((_WORD *)this + 48) |= 0x10u;
            v46 = *((_QWORD *)a2 + 1);
            v2 = *((_QWORD *)a2 + 2);
            v47 = *(_QWORD *)a2;
            if (v46 > 0xFFFFFFFFFFFFFFF5 || v46 + 10 > v2)
            {
              v112 = 0;
              v113 = 0;
              v50 = 0;
              if (v2 <= v46)
                v2 = *((_QWORD *)a2 + 1);
              while (1)
              {
                if (v2 == v46)
                {
                  v50 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                  goto LABEL_237;
                }
                v114 = v46++;
                v115 = *(_BYTE *)(v47 + v114);
                *((_QWORD *)a2 + 1) = v46;
                v50 |= (unint64_t)(v115 & 0x7F) << v112;
                if ((v115 & 0x80) == 0)
                  break;
                v112 += 7;
                v14 = v113++ > 8;
                if (v14)
                {
                  v50 = 0;
LABEL_236:
                  v2 = v114 + 1;
                  goto LABEL_237;
                }
              }
              if (*((_BYTE *)a2 + 24))
                v50 = 0;
              goto LABEL_236;
            }
            v48 = 0;
            v49 = 0;
            v50 = 0;
            do
            {
              v2 = v46 + 1;
              *((_QWORD *)a2 + 1) = v46 + 1;
              v51 = *(_BYTE *)(v47 + v46);
              v50 |= (unint64_t)(v51 & 0x7F) << v48;
              if ((v51 & 0x80) == 0)
                goto LABEL_237;
              v48 += 7;
              v46 = v2;
              v14 = v49++ > 8;
            }
            while (!v14);
            v50 = 0;
LABEL_237:
            *((_QWORD *)this + 5) = v50;
            break;
          case 303:
            *((_WORD *)this + 48) |= 0x20u;
            v52 = *((_QWORD *)a2 + 1);
            v2 = *((_QWORD *)a2 + 2);
            v53 = *(_QWORD *)a2;
            if (v52 > 0xFFFFFFFFFFFFFFF5 || v52 + 10 > v2)
            {
              v116 = 0;
              v117 = 0;
              v56 = 0;
              if (v2 <= v52)
                v2 = *((_QWORD *)a2 + 1);
              while (1)
              {
                if (v2 == v52)
                {
                  v56 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                  goto LABEL_242;
                }
                v118 = v52++;
                v119 = *(_BYTE *)(v53 + v118);
                *((_QWORD *)a2 + 1) = v52;
                v56 |= (unint64_t)(v119 & 0x7F) << v116;
                if ((v119 & 0x80) == 0)
                  break;
                v116 += 7;
                v14 = v117++ > 8;
                if (v14)
                {
                  v56 = 0;
LABEL_241:
                  v2 = v118 + 1;
                  goto LABEL_242;
                }
              }
              if (*((_BYTE *)a2 + 24))
                v56 = 0;
              goto LABEL_241;
            }
            v54 = 0;
            v55 = 0;
            v56 = 0;
            do
            {
              v2 = v52 + 1;
              *((_QWORD *)a2 + 1) = v52 + 1;
              v57 = *(_BYTE *)(v53 + v52);
              v56 |= (unint64_t)(v57 & 0x7F) << v54;
              if ((v57 & 0x80) == 0)
                goto LABEL_242;
              v54 += 7;
              v52 = v2;
              v14 = v55++ > 8;
            }
            while (!v14);
            v56 = 0;
LABEL_242:
            *((_QWORD *)this + 6) = v56;
            break;
          case 304:
            *((_WORD *)this + 48) |= 0x40u;
            v58 = *((_QWORD *)a2 + 1);
            v2 = *((_QWORD *)a2 + 2);
            v59 = *(_QWORD *)a2;
            if (v58 > 0xFFFFFFFFFFFFFFF5 || v58 + 10 > v2)
            {
              v120 = 0;
              v121 = 0;
              v62 = 0;
              if (v2 <= v58)
                v2 = *((_QWORD *)a2 + 1);
              while (1)
              {
                if (v2 == v58)
                {
                  v62 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                  goto LABEL_247;
                }
                v122 = v58++;
                v123 = *(_BYTE *)(v59 + v122);
                *((_QWORD *)a2 + 1) = v58;
                v62 |= (unint64_t)(v123 & 0x7F) << v120;
                if ((v123 & 0x80) == 0)
                  break;
                v120 += 7;
                v14 = v121++ > 8;
                if (v14)
                {
                  v62 = 0;
LABEL_246:
                  v2 = v122 + 1;
                  goto LABEL_247;
                }
              }
              if (*((_BYTE *)a2 + 24))
                v62 = 0;
              goto LABEL_246;
            }
            v60 = 0;
            v61 = 0;
            v62 = 0;
            do
            {
              v2 = v58 + 1;
              *((_QWORD *)a2 + 1) = v58 + 1;
              v63 = *(_BYTE *)(v59 + v58);
              v62 |= (unint64_t)(v63 & 0x7F) << v60;
              if ((v63 & 0x80) == 0)
                goto LABEL_247;
              v60 += 7;
              v58 = v2;
              v14 = v61++ > 8;
            }
            while (!v14);
            v62 = 0;
LABEL_247:
            *((_QWORD *)this + 7) = v62;
            break;
          case 305:
            *((_WORD *)this + 48) |= 1u;
            v64 = *((_QWORD *)a2 + 1);
            v2 = *((_QWORD *)a2 + 2);
            v65 = *(_QWORD *)a2;
            if (v64 > 0xFFFFFFFFFFFFFFF5 || v64 + 10 > v2)
            {
              v124 = 0;
              v125 = 0;
              v68 = 0;
              if (v2 <= v64)
                v2 = *((_QWORD *)a2 + 1);
              while (1)
              {
                if (v2 == v64)
                {
                  v68 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                  goto LABEL_252;
                }
                v126 = v64++;
                v127 = *(_BYTE *)(v65 + v126);
                *((_QWORD *)a2 + 1) = v64;
                v68 |= (unint64_t)(v127 & 0x7F) << v124;
                if ((v127 & 0x80) == 0)
                  break;
                v124 += 7;
                v14 = v125++ > 8;
                if (v14)
                {
                  v68 = 0;
LABEL_251:
                  v2 = v126 + 1;
                  goto LABEL_252;
                }
              }
              if (*((_BYTE *)a2 + 24))
                v68 = 0;
              goto LABEL_251;
            }
            v66 = 0;
            v67 = 0;
            v68 = 0;
            do
            {
              v2 = v64 + 1;
              *((_QWORD *)a2 + 1) = v64 + 1;
              v69 = *(_BYTE *)(v65 + v64);
              v68 |= (unint64_t)(v69 & 0x7F) << v66;
              if ((v69 & 0x80) == 0)
                goto LABEL_252;
              v66 += 7;
              v64 = v2;
              v14 = v67++ > 8;
            }
            while (!v14);
            v68 = 0;
LABEL_252:
            *((_QWORD *)this + 1) = v68;
            break;
          case 306:
            *((_WORD *)this + 48) |= 0x400u;
            v70 = *((_QWORD *)a2 + 1);
            v2 = *((_QWORD *)a2 + 2);
            v71 = *(_QWORD *)a2;
            if (v70 > 0xFFFFFFFFFFFFFFF5 || v70 + 10 > v2)
            {
              v128 = 0;
              v129 = 0;
              v74 = 0;
              if (v2 <= v70)
                v2 = *((_QWORD *)a2 + 1);
              while (1)
              {
                if (v2 == v70)
                {
                  LODWORD(v74) = 0;
                  *((_BYTE *)a2 + 24) = 1;
                  goto LABEL_257;
                }
                v130 = v70++;
                v131 = *(_BYTE *)(v71 + v130);
                *((_QWORD *)a2 + 1) = v70;
                v74 |= (unint64_t)(v131 & 0x7F) << v128;
                if ((v131 & 0x80) == 0)
                  break;
                v128 += 7;
                v14 = v129++ > 8;
                if (v14)
                {
                  LODWORD(v74) = 0;
LABEL_256:
                  v2 = v130 + 1;
                  goto LABEL_257;
                }
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v74) = 0;
              goto LABEL_256;
            }
            v72 = 0;
            v73 = 0;
            v74 = 0;
            do
            {
              v2 = v70 + 1;
              *((_QWORD *)a2 + 1) = v70 + 1;
              v75 = *(_BYTE *)(v71 + v70);
              v74 |= (unint64_t)(v75 & 0x7F) << v72;
              if ((v75 & 0x80) == 0)
                goto LABEL_257;
              v72 += 7;
              v70 = v2;
              v14 = v73++ > 8;
            }
            while (!v14);
            LODWORD(v74) = 0;
LABEL_257:
            *((_DWORD *)this + 20) = v74;
            break;
          case 307:
            *((_WORD *)this + 48) |= 0x200u;
            v76 = *((_QWORD *)a2 + 1);
            v2 = *((_QWORD *)a2 + 2);
            v77 = *(_QWORD *)a2;
            if (v76 > 0xFFFFFFFFFFFFFFF5 || v76 + 10 > v2)
            {
              v132 = 0;
              v133 = 0;
              v80 = 0;
              if (v2 <= v76)
                v2 = *((_QWORD *)a2 + 1);
              while (1)
              {
                if (v2 == v76)
                {
                  LODWORD(v80) = 0;
                  *((_BYTE *)a2 + 24) = 1;
                  goto LABEL_262;
                }
                v134 = v76++;
                v135 = *(_BYTE *)(v77 + v134);
                *((_QWORD *)a2 + 1) = v76;
                v80 |= (unint64_t)(v135 & 0x7F) << v132;
                if ((v135 & 0x80) == 0)
                  break;
                v132 += 7;
                v14 = v133++ > 8;
                if (v14)
                {
                  LODWORD(v80) = 0;
LABEL_261:
                  v2 = v134 + 1;
                  goto LABEL_262;
                }
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v80) = 0;
              goto LABEL_261;
            }
            v78 = 0;
            v79 = 0;
            v80 = 0;
            do
            {
              v2 = v76 + 1;
              *((_QWORD *)a2 + 1) = v76 + 1;
              v81 = *(_BYTE *)(v77 + v76);
              v80 |= (unint64_t)(v81 & 0x7F) << v78;
              if ((v81 & 0x80) == 0)
                goto LABEL_262;
              v78 += 7;
              v76 = v2;
              v14 = v79++ > 8;
            }
            while (!v14);
            LODWORD(v80) = 0;
LABEL_262:
            *((_DWORD *)this + 19) = v80;
            break;
          case 308:
            *((_WORD *)this + 48) |= 4u;
            v82 = *((_QWORD *)a2 + 1);
            v2 = *((_QWORD *)a2 + 2);
            v83 = *(_QWORD *)a2;
            if (v82 > 0xFFFFFFFFFFFFFFF5 || v82 + 10 > v2)
            {
              v136 = 0;
              v137 = 0;
              v86 = 0;
              if (v2 <= v82)
                v2 = *((_QWORD *)a2 + 1);
              while (1)
              {
                if (v2 == v82)
                {
                  v86 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                  goto LABEL_267;
                }
                v138 = v82++;
                v139 = *(_BYTE *)(v83 + v138);
                *((_QWORD *)a2 + 1) = v82;
                v86 |= (unint64_t)(v139 & 0x7F) << v136;
                if ((v139 & 0x80) == 0)
                  break;
                v136 += 7;
                v14 = v137++ > 8;
                if (v14)
                {
                  v86 = 0;
LABEL_266:
                  v2 = v138 + 1;
                  goto LABEL_267;
                }
              }
              if (*((_BYTE *)a2 + 24))
                v86 = 0;
              goto LABEL_266;
            }
            v84 = 0;
            v85 = 0;
            v86 = 0;
            do
            {
              v2 = v82 + 1;
              *((_QWORD *)a2 + 1) = v82 + 1;
              v87 = *(_BYTE *)(v83 + v82);
              v86 |= (unint64_t)(v87 & 0x7F) << v84;
              if ((v87 & 0x80) == 0)
                goto LABEL_267;
              v84 += 7;
              v82 = v2;
              v14 = v85++ > 8;
            }
            while (!v14);
            v86 = 0;
LABEL_267:
            *((_QWORD *)this + 3) = v86;
            break;
          default:
            goto LABEL_19;
        }
      }
      else if ((int)v21 <= 200)
      {
        switch((_DWORD)v21)
        {
          case 'e':
            *((_WORD *)this + 48) |= 0x1000u;
            v88 = *((_QWORD *)a2 + 1);
            v2 = *((_QWORD *)a2 + 2);
            v89 = *(_QWORD *)a2;
            if (v88 > 0xFFFFFFFFFFFFFFF5 || v88 + 10 > v2)
            {
              v140 = 0;
              v141 = 0;
              v92 = 0;
              if (v2 <= v88)
                v2 = *((_QWORD *)a2 + 1);
              while (1)
              {
                if (v2 == v88)
                {
                  LODWORD(v92) = 0;
                  *((_BYTE *)a2 + 24) = 1;
                  goto LABEL_272;
                }
                v142 = v88++;
                v143 = *(_BYTE *)(v89 + v142);
                *((_QWORD *)a2 + 1) = v88;
                v92 |= (unint64_t)(v143 & 0x7F) << v140;
                if ((v143 & 0x80) == 0)
                  break;
                v140 += 7;
                v14 = v141++ > 8;
                if (v14)
                {
                  LODWORD(v92) = 0;
                  goto LABEL_271;
                }
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v92) = 0;
LABEL_271:
              v2 = v142 + 1;
            }
            else
            {
              v90 = 0;
              v91 = 0;
              v92 = 0;
              while (1)
              {
                v2 = v88 + 1;
                *((_QWORD *)a2 + 1) = v88 + 1;
                v93 = *(_BYTE *)(v89 + v88);
                v92 |= (unint64_t)(v93 & 0x7F) << v90;
                if ((v93 & 0x80) == 0)
                  break;
                v90 += 7;
                v88 = v2;
                v14 = v91++ > 8;
                if (v14)
                {
                  LODWORD(v92) = 0;
                  break;
                }
              }
            }
LABEL_272:
            *((_DWORD *)this + 22) = v92;
            break;
          case 'f':
            *((_WORD *)this + 48) |= 0x800u;
            v94 = *((_QWORD *)a2 + 1);
            v2 = *((_QWORD *)a2 + 2);
            v95 = *(_QWORD *)a2;
            if (v94 > 0xFFFFFFFFFFFFFFF5 || v94 + 10 > v2)
            {
              v144 = 0;
              v145 = 0;
              v98 = 0;
              if (v2 <= v94)
                v2 = *((_QWORD *)a2 + 1);
              while (1)
              {
                if (v2 == v94)
                {
                  LODWORD(v98) = 0;
                  *((_BYTE *)a2 + 24) = 1;
                  goto LABEL_277;
                }
                v146 = v94++;
                v147 = *(_BYTE *)(v95 + v146);
                *((_QWORD *)a2 + 1) = v94;
                v98 |= (unint64_t)(v147 & 0x7F) << v144;
                if ((v147 & 0x80) == 0)
                  break;
                v144 += 7;
                v14 = v145++ > 8;
                if (v14)
                {
                  LODWORD(v98) = 0;
                  goto LABEL_276;
                }
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v98) = 0;
LABEL_276:
              v2 = v146 + 1;
            }
            else
            {
              v96 = 0;
              v97 = 0;
              v98 = 0;
              while (1)
              {
                v2 = v94 + 1;
                *((_QWORD *)a2 + 1) = v94 + 1;
                v99 = *(_BYTE *)(v95 + v94);
                v98 |= (unint64_t)(v99 & 0x7F) << v96;
                if ((v99 & 0x80) == 0)
                  break;
                v96 += 7;
                v94 = v2;
                v14 = v97++ > 8;
                if (v14)
                {
                  LODWORD(v98) = 0;
                  break;
                }
              }
            }
LABEL_277:
            *((_DWORD *)this + 21) = v98;
            break;
          case 'g':
            *((_WORD *)this + 48) |= 0x100u;
            v2 = *((_QWORD *)a2 + 1);
            if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
            {
              *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              v2 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v2;
            }
            else
            {
              *((_BYTE *)a2 + 24) = 1;
            }
            break;
          default:
LABEL_19:
            result = PB::Reader::skip(a2);
            if (!(_DWORD)result)
              return result;
            v2 = *((_QWORD *)a2 + 1);
            break;
        }
      }
      else
      {
        switch((int)v21)
        {
          case 201:
            *((_WORD *)this + 48) |= 0x80u;
            v22 = *((_QWORD *)a2 + 1);
            v2 = *((_QWORD *)a2 + 2);
            v23 = *(_QWORD *)a2;
            if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v2)
            {
              v100 = 0;
              v101 = 0;
              v26 = 0;
              if (v2 <= v22)
                v2 = *((_QWORD *)a2 + 1);
              while (1)
              {
                if (v2 == v22)
                {
                  v26 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                  goto LABEL_222;
                }
                v102 = v22++;
                v103 = *(_BYTE *)(v23 + v102);
                *((_QWORD *)a2 + 1) = v22;
                v26 |= (unint64_t)(v103 & 0x7F) << v100;
                if ((v103 & 0x80) == 0)
                  break;
                v100 += 7;
                v14 = v101++ > 8;
                if (v14)
                {
                  v26 = 0;
LABEL_221:
                  v2 = v102 + 1;
                  goto LABEL_222;
                }
              }
              if (*((_BYTE *)a2 + 24))
                v26 = 0;
              goto LABEL_221;
            }
            v24 = 0;
            v25 = 0;
            v26 = 0;
            do
            {
              v2 = v22 + 1;
              *((_QWORD *)a2 + 1) = v22 + 1;
              v27 = *(_BYTE *)(v23 + v22);
              v26 |= (unint64_t)(v27 & 0x7F) << v24;
              if ((v27 & 0x80) == 0)
                goto LABEL_222;
              v24 += 7;
              v22 = v2;
              v14 = v25++ > 8;
            }
            while (!v14);
            v26 = 0;
LABEL_222:
            *((_QWORD *)this + 8) = v26;
            break;
          case 202:
            *((_WORD *)this + 48) |= 0x8000u;
            v2 = *((_QWORD *)a2 + 1);
            if (v2 >= *((_QWORD *)a2 + 2))
            {
              v35 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v34 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
              *((_QWORD *)a2 + 1) = v2;
              v35 = v34 != 0;
            }
            *((_BYTE *)this + 94) = v35;
            break;
          case 203:
            *((_WORD *)this + 48) |= 0x4000u;
            v2 = *((_QWORD *)a2 + 1);
            if (v2 >= *((_QWORD *)a2 + 2))
            {
              v37 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v36 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
              *((_QWORD *)a2 + 1) = v2;
              v37 = v36 != 0;
            }
            *((_BYTE *)this + 93) = v37;
            break;
          case 204:
            *((_WORD *)this + 48) |= 0x2000u;
            v2 = *((_QWORD *)a2 + 1);
            if (v2 >= *((_QWORD *)a2 + 2))
            {
              v39 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v38 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
              *((_QWORD *)a2 + 1) = v2;
              v39 = v38 != 0;
            }
            *((_BYTE *)this + 92) = v39;
            break;
          case 205:
            *((_WORD *)this + 48) |= 2u;
            v40 = *((_QWORD *)a2 + 1);
            v2 = *((_QWORD *)a2 + 2);
            v41 = *(_QWORD *)a2;
            if (v40 > 0xFFFFFFFFFFFFFFF5 || v40 + 10 > v2)
            {
              v108 = 0;
              v109 = 0;
              v44 = 0;
              if (v2 <= v40)
                v2 = *((_QWORD *)a2 + 1);
              while (1)
              {
                if (v2 == v40)
                {
                  v44 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                  goto LABEL_232;
                }
                v110 = v40++;
                v111 = *(_BYTE *)(v41 + v110);
                *((_QWORD *)a2 + 1) = v40;
                v44 |= (unint64_t)(v111 & 0x7F) << v108;
                if ((v111 & 0x80) == 0)
                  break;
                v108 += 7;
                v14 = v109++ > 8;
                if (v14)
                {
                  v44 = 0;
LABEL_231:
                  v2 = v110 + 1;
                  goto LABEL_232;
                }
              }
              if (*((_BYTE *)a2 + 24))
                v44 = 0;
              goto LABEL_231;
            }
            v42 = 0;
            v43 = 0;
            v44 = 0;
            do
            {
              v2 = v40 + 1;
              *((_QWORD *)a2 + 1) = v40 + 1;
              v45 = *(_BYTE *)(v41 + v40);
              v44 |= (unint64_t)(v45 & 0x7F) << v42;
              if ((v45 & 0x80) == 0)
                goto LABEL_232;
              v42 += 7;
              v40 = v2;
              v14 = v43++ > 8;
            }
            while (!v14);
            v44 = 0;
LABEL_232:
            *((_QWORD *)this + 2) = v44;
            break;
          default:
            goto LABEL_19;
        }
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_26;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_19;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaTriggerClustersResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 96);
  if ((v4 & 0x1000) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_WORD *)(v3 + 96);
    if ((v4 & 0x800) == 0)
    {
LABEL_3:
      if ((v4 & 0x100) == 0)
        goto LABEL_4;
      goto LABEL_20;
    }
  }
  else if ((*(_WORD *)(this + 96) & 0x800) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x100) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(float *)(v3 + 72));
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 0x8000) == 0)
      goto LABEL_6;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x8000) == 0)
  {
LABEL_6:
    if ((v4 & 0x4000) == 0)
      goto LABEL_7;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x4000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0)
      goto LABEL_8;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 2) == 0)
      goto LABEL_9;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 2) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x40) == 0)
  {
LABEL_13:
    if ((v4 & 1) == 0)
      goto LABEL_14;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 1) == 0)
  {
LABEL_14:
    if ((v4 & 0x400) == 0)
      goto LABEL_15;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x400) == 0)
  {
LABEL_15:
    if ((v4 & 0x200) == 0)
      goto LABEL_16;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x200) == 0)
  {
LABEL_16:
    if ((v4 & 4) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_32:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_WORD *)(v3 + 96) & 4) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::KappaTriggerClustersResult::hash_value(CMMsl::KappaTriggerClustersResult *this)
{
  __int16 v1;
  uint64_t v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *((_WORD *)this + 48);
  if ((v1 & 0x1000) != 0)
  {
    v2 = *((unsigned int *)this + 22);
    if ((*((_WORD *)this + 48) & 0x800) != 0)
    {
LABEL_3:
      v3 = *((unsigned int *)this + 21);
      if ((*((_WORD *)this + 48) & 0x100) != 0)
        goto LABEL_4;
LABEL_22:
      v5 = 0;
      if ((v1 & 0x80) != 0)
        goto LABEL_7;
      goto LABEL_23;
    }
  }
  else
  {
    v2 = 0;
    if ((*((_WORD *)this + 48) & 0x800) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((*((_WORD *)this + 48) & 0x100) == 0)
    goto LABEL_22;
LABEL_4:
  v4 = *((float *)this + 18);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_7:
    v6 = *((_QWORD *)this + 8);
    if ((*((_WORD *)this + 48) & 0x8000) != 0)
      goto LABEL_8;
    goto LABEL_24;
  }
LABEL_23:
  v6 = 0;
  if ((*((_WORD *)this + 48) & 0x8000) != 0)
  {
LABEL_8:
    v7 = *((unsigned __int8 *)this + 94);
    if ((*((_WORD *)this + 48) & 0x4000) != 0)
      goto LABEL_9;
    goto LABEL_25;
  }
LABEL_24:
  v7 = 0;
  if ((*((_WORD *)this + 48) & 0x4000) != 0)
  {
LABEL_9:
    v8 = *((unsigned __int8 *)this + 93);
    if ((*((_WORD *)this + 48) & 0x2000) != 0)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  v8 = 0;
  if ((*((_WORD *)this + 48) & 0x2000) != 0)
  {
LABEL_10:
    v9 = *((unsigned __int8 *)this + 92);
    if ((v1 & 2) != 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  v9 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_11:
    v10 = *((_QWORD *)this + 2);
    if ((v1 & 8) != 0)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  v10 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_12:
    v11 = *((_QWORD *)this + 4);
    if ((v1 & 0x10) != 0)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  v11 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_13:
    v12 = *((_QWORD *)this + 5);
    if ((v1 & 0x20) != 0)
      goto LABEL_14;
    goto LABEL_30;
  }
LABEL_29:
  v12 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_14:
    v13 = *((_QWORD *)this + 6);
    if ((v1 & 0x40) != 0)
      goto LABEL_15;
    goto LABEL_31;
  }
LABEL_30:
  v13 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_15:
    v14 = *((_QWORD *)this + 7);
    if ((v1 & 1) != 0)
      goto LABEL_16;
    goto LABEL_32;
  }
LABEL_31:
  v14 = 0;
  if ((v1 & 1) != 0)
  {
LABEL_16:
    v15 = *((_QWORD *)this + 1);
    if ((*((_WORD *)this + 48) & 0x400) != 0)
      goto LABEL_17;
    goto LABEL_33;
  }
LABEL_32:
  v15 = 0;
  if ((*((_WORD *)this + 48) & 0x400) != 0)
  {
LABEL_17:
    v16 = *((int *)this + 20);
    if ((*((_WORD *)this + 48) & 0x200) != 0)
      goto LABEL_18;
LABEL_34:
    v17 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_19;
LABEL_35:
    v18 = 0;
    return v3 ^ v2 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18;
  }
LABEL_33:
  v16 = 0;
  if ((*((_WORD *)this + 48) & 0x200) == 0)
    goto LABEL_34;
LABEL_18:
  v17 = *((int *)this + 19);
  if ((v1 & 4) == 0)
    goto LABEL_35;
LABEL_19:
  v18 = *((_QWORD *)this + 3);
  return v3 ^ v2 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18;
}

void CMMsl::KappaTriggerDebug::~KappaTriggerDebug(CMMsl::KappaTriggerDebug *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_25135EDA0;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::KappaTriggerDebug::~KappaTriggerDebug(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::KappaTriggerDebug *CMMsl::KappaTriggerDebug::KappaTriggerDebug(CMMsl::KappaTriggerDebug *this, const CMMsl::KappaTriggerDebug *a2)
{
  _QWORD *v4;
  __int16 v5;
  __int16 v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  __int16 v10;
  int v11;
  char v13;
  char v14;
  int v15;
  int v16;
  int v17;
  int v18;

  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (_QWORD *)((char *)this + 8);
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_QWORD *)this = &off_25135EDA0;
  *((_DWORD *)this + 30) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 9) = 0;
  v5 = *((_WORD *)a2 + 60);
  if ((v5 & 2) != 0)
  {
    v7 = *((_QWORD *)a2 + 11);
    v6 = 2;
    *((_WORD *)this + 60) = 2;
    *((_QWORD *)this + 11) = v7;
    v5 = *((_WORD *)a2 + 60);
    if ((v5 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((*((_WORD *)a2 + 60) & 0x200) != 0)
  {
LABEL_5:
    v8 = *((_BYTE *)a2 + 118);
    v6 |= 0x200u;
    *((_WORD *)this + 60) = v6;
    *((_BYTE *)this + 118) = v8;
    v5 = *((_WORD *)a2 + 60);
  }
LABEL_6:
  if ((v5 & 1) != 0)
  {
    v9 = *((_QWORD *)a2 + 10);
    *((_WORD *)this + 60) = v6 | 1;
    *((_QWORD *)this + 10) = v9;
  }
  if (this != a2)
  {
    sub_2429111C4(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
    sub_242911380((_QWORD *)this + 7, *((char **)a2 + 7), *((char **)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 2);
    sub_242911380((_QWORD *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
  }
  v10 = *((_WORD *)a2 + 60);
  if ((v10 & 0x80) != 0)
  {
    v13 = *((_BYTE *)a2 + 116);
    *((_WORD *)this + 60) |= 0x80u;
    *((_BYTE *)this + 116) = v13;
    v10 = *((_WORD *)a2 + 60);
    if ((v10 & 0x100) == 0)
    {
LABEL_12:
      if ((v10 & 4) == 0)
        goto LABEL_13;
      goto LABEL_21;
    }
  }
  else if ((*((_WORD *)a2 + 60) & 0x100) == 0)
  {
    goto LABEL_12;
  }
  v14 = *((_BYTE *)a2 + 117);
  *((_WORD *)this + 60) |= 0x100u;
  *((_BYTE *)this + 117) = v14;
  v10 = *((_WORD *)a2 + 60);
  if ((v10 & 4) == 0)
  {
LABEL_13:
    if ((v10 & 8) == 0)
      goto LABEL_14;
    goto LABEL_22;
  }
LABEL_21:
  v15 = *((_DWORD *)a2 + 24);
  *((_WORD *)this + 60) |= 4u;
  *((_DWORD *)this + 24) = v15;
  v10 = *((_WORD *)a2 + 60);
  if ((v10 & 8) == 0)
  {
LABEL_14:
    if ((v10 & 0x40) == 0)
      goto LABEL_15;
    goto LABEL_23;
  }
LABEL_22:
  v16 = *((_DWORD *)a2 + 25);
  *((_WORD *)this + 60) |= 8u;
  *((_DWORD *)this + 25) = v16;
  v10 = *((_WORD *)a2 + 60);
  if ((v10 & 0x40) == 0)
  {
LABEL_15:
    if ((v10 & 0x20) == 0)
      goto LABEL_16;
LABEL_24:
    v18 = *((_DWORD *)a2 + 27);
    *((_WORD *)this + 60) |= 0x20u;
    *((_DWORD *)this + 27) = v18;
    if ((*((_WORD *)a2 + 60) & 0x10) == 0)
      return this;
    goto LABEL_17;
  }
LABEL_23:
  v17 = *((_DWORD *)a2 + 28);
  *((_WORD *)this + 60) |= 0x40u;
  *((_DWORD *)this + 28) = v17;
  v10 = *((_WORD *)a2 + 60);
  if ((v10 & 0x20) != 0)
    goto LABEL_24;
LABEL_16:
  if ((v10 & 0x10) != 0)
  {
LABEL_17:
    v11 = *((_DWORD *)a2 + 26);
    *((_WORD *)this + 60) |= 0x10u;
    *((_DWORD *)this + 26) = v11;
  }
  return this;
}

CMMsl *CMMsl::KappaTriggerDebug::operator=(CMMsl *a1, const CMMsl::KappaTriggerDebug *a2)
{
  CMMsl::KappaTriggerDebug *v3;
  _BYTE v5[128];

  if (a1 != a2)
  {
    CMMsl::KappaTriggerDebug::KappaTriggerDebug((CMMsl::KappaTriggerDebug *)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaTriggerDebug *)v5, v3);
    CMMsl::KappaTriggerDebug::~KappaTriggerDebug((CMMsl::KappaTriggerDebug *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaTriggerDebug *a2, CMMsl::KappaTriggerDebug *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float result;

  v3 = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v3;
  v4 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v4;
  LOBYTE(v4) = *((_BYTE *)this + 118);
  *((_BYTE *)this + 118) = *((_BYTE *)a2 + 118);
  *((_BYTE *)a2 + 118) = v4;
  v5 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v5;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v7;
  v8 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v8;
  v9 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v9;
  v10 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v10;
  v11 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v11;
  v12 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v12;
  v13 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v13;
  v14 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v14;
  LOBYTE(v14) = *((_BYTE *)this + 116);
  *((_BYTE *)this + 116) = *((_BYTE *)a2 + 116);
  *((_BYTE *)a2 + 116) = v14;
  LOBYTE(v14) = *((_BYTE *)this + 117);
  *((_BYTE *)this + 117) = *((_BYTE *)a2 + 117);
  *((_BYTE *)a2 + 117) = v14;
  LODWORD(v5) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v5;
  result = *((float *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((float *)a2 + 25) = result;
  LODWORD(v14) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v14;
  LODWORD(v14) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v14;
  LODWORD(v14) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v14;
  return result;
}

uint64_t CMMsl::KappaTriggerDebug::KappaTriggerDebug(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_25135EDA0;
  v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  v5 = a1 + 56;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 118) = *(_BYTE *)(a2 + 118);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  sub_242911330(v5, (__n128 *)(a2 + 56));
  sub_242911330(v4, (__n128 *)(a2 + 32));
  *(_BYTE *)(a1 + 116) = *(_BYTE *)(a2 + 116);
  *(_BYTE *)(a1 + 117) = *(_BYTE *)(a2 + 117);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  return a1;
}

CMMsl *CMMsl::KappaTriggerDebug::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::KappaTriggerDebug *v3;
  _BYTE v5[128];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaTriggerDebug::KappaTriggerDebug((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaTriggerDebug *)v5, v3);
    CMMsl::KappaTriggerDebug::~KappaTriggerDebug((CMMsl::KappaTriggerDebug *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaTriggerDebug::formatText(CMMsl::KappaTriggerDebug *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;
  double *v6;
  double *v7;
  double v8;
  __int16 v9;
  float *v10;
  float *v11;
  float v12;
  float *v13;
  float *v14;
  float v15;
  __int16 v16;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 60);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "avgHorizontalDecelMax", *((double *)this + 10));
    v5 = *((_WORD *)this + 60);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "avgHorizontalDecelThresholdCoupled", *((float *)this + 24));
  if ((*((_WORD *)this + 60) & 8) != 0)
LABEL_4:
    PB::TextFormatter::format(a2, "impactThresholdUncoupled", *((float *)this + 25));
LABEL_5:
  v6 = (double *)*((_QWORD *)this + 1);
  v7 = (double *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(a2, "inertialAccel", v8);
  }
  v9 = *((_WORD *)this + 60);
  if ((v9 & 0x80) != 0)
  {
    PB::TextFormatter::format(a2, "isMounted");
    v9 = *((_WORD *)this + 60);
    if ((v9 & 0x100) == 0)
    {
LABEL_9:
      if ((v9 & 0x10) == 0)
        goto LABEL_10;
      goto LABEL_26;
    }
  }
  else if ((*((_WORD *)this + 60) & 0x100) == 0)
  {
    goto LABEL_9;
  }
  PB::TextFormatter::format(a2, "isSimulated");
  v9 = *((_WORD *)this + 60);
  if ((v9 & 0x10) == 0)
  {
LABEL_10:
    if ((v9 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "nAccelGap");
  if ((*((_WORD *)this + 60) & 0x20) != 0)
LABEL_11:
    PB::TextFormatter::format(a2, "numResets");
LABEL_12:
  v10 = (float *)*((_QWORD *)this + 4);
  v11 = (float *)*((_QWORD *)this + 5);
  while (v10 != v11)
  {
    v12 = *v10++;
    PB::TextFormatter::format(a2, "prevQ", v12);
  }
  v13 = (float *)*((_QWORD *)this + 7);
  v14 = (float *)*((_QWORD *)this + 8);
  while (v13 != v14)
  {
    v15 = *v13++;
    PB::TextFormatter::format(a2, "rawClampedAccel", v15);
  }
  v16 = *((_WORD *)this + 60);
  if ((v16 & 0x200) == 0)
  {
    if ((v16 & 2) == 0)
      goto LABEL_18;
LABEL_29:
    PB::TextFormatter::format(a2, "timestamp");
    if ((*((_WORD *)this + 60) & 0x40) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_19;
  }
  PB::TextFormatter::format(a2, "shouldTrigger");
  v16 = *((_WORD *)this + 60);
  if ((v16 & 2) != 0)
    goto LABEL_29;
LABEL_18:
  if ((v16 & 0x40) != 0)
LABEL_19:
    PB::TextFormatter::format(a2, "triggerPathBitmap");
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::KappaTriggerDebug::readFrom(CMMsl::KappaTriggerDebug *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  BOOL v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  _DWORD *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  int v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  _DWORD *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  _DWORD *v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  int v78;
  BOOL v79;
  unint64_t v80;
  unint64_t v81;
  int v82;
  BOOL v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  char v89;
  unsigned int v90;
  uint64_t v91;
  unint64_t v92;
  char v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  char v97;
  unsigned int v98;
  uint64_t v99;
  unint64_t v100;
  char v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  char v105;
  unsigned int v106;
  uint64_t v107;
  unint64_t v108;
  char v109;
  char v110;
  unsigned int v111;
  unint64_t v112;
  char v113;
  unint64_t v114;
  char *v115;
  _QWORD *v116;
  unint64_t v117;
  char *v118;
  _DWORD *v119;
  unint64_t v120;
  char *v121;
  char v122;
  unsigned int v123;
  unint64_t v124;
  char v125;
  char v126;
  unsigned int v127;
  unint64_t v128;
  char v129;
  char v130;
  unsigned int v131;
  unint64_t v132;
  char v133;
  char *v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  _DWORD *v156;
  int v157;
  _DWORD *v158;
  int v159;
  unint64_t v160;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (2)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_25:
      v20 = v11 & 7;
      if (v20 != 4)
      {
        switch((v11 >> 3))
        {
          case 1u:
            *((_WORD *)this + 60) |= 2u;
            v21 = *((_QWORD *)a2 + 1);
            v22 = *((_QWORD *)a2 + 2);
            v23 = *(_QWORD *)a2;
            if (v21 <= 0xFFFFFFFFFFFFFFF5 && v21 + 10 <= v22)
            {
              v24 = 0;
              v25 = 0;
              v26 = 0;
              do
              {
                v27 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v28 = *(_BYTE *)(v23 + v21);
                v26 |= (unint64_t)(v28 & 0x7F) << v24;
                if ((v28 & 0x80) == 0)
                  goto LABEL_214;
                v24 += 7;
                v21 = v27;
                v14 = v25++ > 8;
              }
              while (!v14);
LABEL_148:
              v26 = 0;
              goto LABEL_214;
            }
            v110 = 0;
            v111 = 0;
            v26 = 0;
            if (v22 <= v21)
              v22 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v22 == v21)
              {
                v26 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v112 = v21 + 1;
                v113 = *(_BYTE *)(v23 + v21);
                *((_QWORD *)a2 + 1) = v112;
                v26 |= (unint64_t)(v113 & 0x7F) << v110;
                if (v113 < 0)
                {
                  v110 += 7;
                  v21 = v112;
                  v14 = v111++ > 8;
                  if (v14)
                    goto LABEL_148;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  v26 = 0;
              }
              break;
            }
LABEL_214:
            *((_QWORD *)this + 11) = v26;
            goto LABEL_20;
          case 2u:
            *((_WORD *)this + 60) |= 0x200u;
            v29 = *((_QWORD *)a2 + 1);
            if (v29 >= *((_QWORD *)a2 + 2))
            {
              v32 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v30 = v29 + 1;
              v31 = *(unsigned __int8 *)(*(_QWORD *)a2 + v29);
              *((_QWORD *)a2 + 1) = v30;
              v32 = v31 != 0;
            }
            *((_BYTE *)this + 118) = v32;
            goto LABEL_20;
          case 3u:
            *((_WORD *)this + 60) |= 1u;
            v33 = *((_QWORD *)a2 + 1);
            if (v33 > 0xFFFFFFFFFFFFFFF7 || v33 + 8 > *((_QWORD *)a2 + 2))
              goto LABEL_250;
            *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v33);
            goto LABEL_233;
          case 4u:
            if (v20 == 2)
            {
              if ((PB::Reader::placeMark() & 1) != 0)
                return 0;
              v34 = *((_QWORD *)a2 + 1);
              v35 = *((_QWORD *)a2 + 2);
              while (v34 < v35 && !*((_BYTE *)a2 + 24))
              {
                v37 = (char *)*((_QWORD *)this + 2);
                v36 = *((_QWORD *)this + 3);
                if ((unint64_t)v37 >= v36)
                {
                  v39 = (char *)*((_QWORD *)this + 1);
                  v40 = (v37 - v39) >> 3;
                  v41 = v40 + 1;
                  if ((unint64_t)(v40 + 1) >> 61)
                    goto LABEL_259;
                  v42 = v36 - (_QWORD)v39;
                  if (v42 >> 2 > v41)
                    v41 = v42 >> 2;
                  if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
                    v43 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v43 = v41;
                  if (v43)
                  {
                    v43 = (unint64_t)sub_2429112FC(v43);
                    v39 = (char *)*((_QWORD *)this + 1);
                    v37 = (char *)*((_QWORD *)this + 2);
                  }
                  else
                  {
                    v44 = 0;
                  }
                  v45 = (_QWORD *)(v43 + 8 * v40);
                  *v45 = 0;
                  v38 = v45 + 1;
                  while (v37 != v39)
                  {
                    v46 = *((_QWORD *)v37 - 1);
                    v37 -= 8;
                    *--v45 = v46;
                  }
                  *((_QWORD *)this + 1) = v45;
                  *((_QWORD *)this + 2) = v38;
                  *((_QWORD *)this + 3) = v43 + 8 * v44;
                  if (v39)
                    operator delete(v39);
                }
                else
                {
                  *(_QWORD *)v37 = 0;
                  v38 = v37 + 8;
                }
                *((_QWORD *)this + 2) = v38;
                v47 = *((_QWORD *)a2 + 1);
                if (v47 > 0xFFFFFFFFFFFFFFF7 || v47 + 8 > *((_QWORD *)a2 + 2))
                  goto LABEL_182;
                *(v38 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v47);
                v35 = *((_QWORD *)a2 + 2);
                v34 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v34;
              }
              goto LABEL_183;
            }
            v115 = (char *)*((_QWORD *)this + 2);
            v114 = *((_QWORD *)this + 3);
            if ((unint64_t)v115 >= v114)
            {
              v134 = (char *)*((_QWORD *)this + 1);
              v135 = (v115 - v134) >> 3;
              v136 = v135 + 1;
              if ((unint64_t)(v135 + 1) >> 61)
LABEL_259:
                sub_242729A44();
              v137 = v114 - (_QWORD)v134;
              if (v137 >> 2 > v136)
                v136 = v137 >> 2;
              if ((unint64_t)v137 >= 0x7FFFFFFFFFFFFFF8)
                v138 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v138 = v136;
              if (v138)
              {
                v138 = (unint64_t)sub_2429112FC(v138);
                v134 = (char *)*((_QWORD *)this + 1);
                v115 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v139 = 0;
              }
              v152 = (_QWORD *)(v138 + 8 * v135);
              *v152 = 0;
              v116 = v152 + 1;
              while (v115 != v134)
              {
                v153 = *((_QWORD *)v115 - 1);
                v115 -= 8;
                *--v152 = v153;
              }
              *((_QWORD *)this + 1) = v152;
              *((_QWORD *)this + 2) = v116;
              *((_QWORD *)this + 3) = v138 + 8 * v139;
              if (v134)
                operator delete(v134);
            }
            else
            {
              *(_QWORD *)v115 = 0;
              v116 = v115 + 8;
            }
            *((_QWORD *)this + 2) = v116;
            v154 = *((_QWORD *)a2 + 1);
            if (v154 <= 0xFFFFFFFFFFFFFFF7 && v154 + 8 <= *((_QWORD *)a2 + 2))
            {
              *(v116 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v154);
LABEL_233:
              v155 = *((_QWORD *)a2 + 1) + 8;
              goto LABEL_253;
            }
            goto LABEL_250;
          case 5u:
            if (v20 == 2)
            {
              if ((PB::Reader::placeMark() & 1) != 0)
                return 0;
              v48 = *((_QWORD *)a2 + 1);
              v49 = *((_QWORD *)a2 + 2);
              while (v48 < v49 && !*((_BYTE *)a2 + 24))
              {
                v51 = (char *)*((_QWORD *)this + 8);
                v50 = *((_QWORD *)this + 9);
                if ((unint64_t)v51 >= v50)
                {
                  v53 = (char *)*((_QWORD *)this + 7);
                  v54 = (v51 - v53) >> 2;
                  v55 = v54 + 1;
                  if ((unint64_t)(v54 + 1) >> 62)
                    goto LABEL_258;
                  v56 = v50 - (_QWORD)v53;
                  if (v56 >> 1 > v55)
                    v55 = v56 >> 1;
                  if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL)
                    v57 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v57 = v55;
                  if (v57)
                  {
                    v57 = (unint64_t)sub_2429114B8(v57);
                    v53 = (char *)*((_QWORD *)this + 7);
                    v51 = (char *)*((_QWORD *)this + 8);
                  }
                  else
                  {
                    v58 = 0;
                  }
                  v59 = (_DWORD *)(v57 + 4 * v54);
                  *v59 = 0;
                  v52 = v59 + 1;
                  while (v51 != v53)
                  {
                    v60 = *((_DWORD *)v51 - 1);
                    v51 -= 4;
                    *--v59 = v60;
                  }
                  *((_QWORD *)this + 7) = v59;
                  *((_QWORD *)this + 8) = v52;
                  *((_QWORD *)this + 9) = v57 + 4 * v58;
                  if (v53)
                    operator delete(v53);
                }
                else
                {
                  *(_DWORD *)v51 = 0;
                  v52 = v51 + 4;
                }
                *((_QWORD *)this + 8) = v52;
                v61 = *((_QWORD *)a2 + 1);
                if (v61 > 0xFFFFFFFFFFFFFFFBLL || v61 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_182;
                *(v52 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v61);
                v49 = *((_QWORD *)a2 + 2);
                v48 = *((_QWORD *)a2 + 1) + 4;
                *((_QWORD *)a2 + 1) = v48;
              }
              goto LABEL_183;
            }
            v118 = (char *)*((_QWORD *)this + 8);
            v117 = *((_QWORD *)this + 9);
            if ((unint64_t)v118 >= v117)
            {
              v140 = (char *)*((_QWORD *)this + 7);
              v141 = (v118 - v140) >> 2;
              v142 = v141 + 1;
              if ((unint64_t)(v141 + 1) >> 62)
                goto LABEL_258;
              v143 = v117 - (_QWORD)v140;
              if (v143 >> 1 > v142)
                v142 = v143 >> 1;
              if ((unint64_t)v143 >= 0x7FFFFFFFFFFFFFFCLL)
                v144 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v144 = v142;
              if (v144)
              {
                v144 = (unint64_t)sub_2429114B8(v144);
                v140 = (char *)*((_QWORD *)this + 7);
                v118 = (char *)*((_QWORD *)this + 8);
              }
              else
              {
                v145 = 0;
              }
              v156 = (_DWORD *)(v144 + 4 * v141);
              *v156 = 0;
              v119 = v156 + 1;
              while (v118 != v140)
              {
                v157 = *((_DWORD *)v118 - 1);
                v118 -= 4;
                *--v156 = v157;
              }
              *((_QWORD *)this + 7) = v156;
              *((_QWORD *)this + 8) = v119;
              *((_QWORD *)this + 9) = v144 + 4 * v145;
              if (v140)
                operator delete(v140);
            }
            else
            {
              *(_DWORD *)v118 = 0;
              v119 = v118 + 4;
            }
            *((_QWORD *)this + 8) = v119;
            goto LABEL_248;
          case 6u:
            if (v20 == 2)
            {
              if ((PB::Reader::placeMark() & 1) != 0)
                return 0;
              v62 = *((_QWORD *)a2 + 1);
              v63 = *((_QWORD *)a2 + 2);
              while (v62 < v63 && !*((_BYTE *)a2 + 24))
              {
                v65 = (char *)*((_QWORD *)this + 5);
                v64 = *((_QWORD *)this + 6);
                if ((unint64_t)v65 >= v64)
                {
                  v67 = (char *)*((_QWORD *)this + 4);
                  v68 = (v65 - v67) >> 2;
                  v69 = v68 + 1;
                  if ((unint64_t)(v68 + 1) >> 62)
                    goto LABEL_258;
                  v70 = v64 - (_QWORD)v67;
                  if (v70 >> 1 > v69)
                    v69 = v70 >> 1;
                  if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFFCLL)
                    v71 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v71 = v69;
                  if (v71)
                  {
                    v71 = (unint64_t)sub_2429114B8(v71);
                    v67 = (char *)*((_QWORD *)this + 4);
                    v65 = (char *)*((_QWORD *)this + 5);
                  }
                  else
                  {
                    v72 = 0;
                  }
                  v73 = (_DWORD *)(v71 + 4 * v68);
                  *v73 = 0;
                  v66 = v73 + 1;
                  while (v65 != v67)
                  {
                    v74 = *((_DWORD *)v65 - 1);
                    v65 -= 4;
                    *--v73 = v74;
                  }
                  *((_QWORD *)this + 4) = v73;
                  *((_QWORD *)this + 5) = v66;
                  *((_QWORD *)this + 6) = v71 + 4 * v72;
                  if (v67)
                    operator delete(v67);
                }
                else
                {
                  *(_DWORD *)v65 = 0;
                  v66 = v65 + 4;
                }
                *((_QWORD *)this + 5) = v66;
                v75 = *((_QWORD *)a2 + 1);
                if (v75 > 0xFFFFFFFFFFFFFFFBLL || v75 + 4 > *((_QWORD *)a2 + 2))
                {
LABEL_182:
                  *((_BYTE *)a2 + 24) = 1;
                  break;
                }
                *(v66 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v75);
                v63 = *((_QWORD *)a2 + 2);
                v62 = *((_QWORD *)a2 + 1) + 4;
                *((_QWORD *)a2 + 1) = v62;
              }
LABEL_183:
              PB::Reader::recallMark();
            }
            else
            {
              v121 = (char *)*((_QWORD *)this + 5);
              v120 = *((_QWORD *)this + 6);
              if ((unint64_t)v121 >= v120)
              {
                v146 = (char *)*((_QWORD *)this + 4);
                v147 = (v121 - v146) >> 2;
                v148 = v147 + 1;
                if ((unint64_t)(v147 + 1) >> 62)
LABEL_258:
                  sub_242729A44();
                v149 = v120 - (_QWORD)v146;
                if (v149 >> 1 > v148)
                  v148 = v149 >> 1;
                if ((unint64_t)v149 >= 0x7FFFFFFFFFFFFFFCLL)
                  v150 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v150 = v148;
                if (v150)
                {
                  v150 = (unint64_t)sub_2429114B8(v150);
                  v146 = (char *)*((_QWORD *)this + 4);
                  v121 = (char *)*((_QWORD *)this + 5);
                }
                else
                {
                  v151 = 0;
                }
                v158 = (_DWORD *)(v150 + 4 * v147);
                *v158 = 0;
                v119 = v158 + 1;
                while (v121 != v146)
                {
                  v159 = *((_DWORD *)v121 - 1);
                  v121 -= 4;
                  *--v158 = v159;
                }
                *((_QWORD *)this + 4) = v158;
                *((_QWORD *)this + 5) = v119;
                *((_QWORD *)this + 6) = v150 + 4 * v151;
                if (v146)
                  operator delete(v146);
              }
              else
              {
                *(_DWORD *)v121 = 0;
                v119 = v121 + 4;
              }
              *((_QWORD *)this + 5) = v119;
LABEL_248:
              v160 = *((_QWORD *)a2 + 1);
              if (v160 <= 0xFFFFFFFFFFFFFFFBLL && v160 + 4 <= *((_QWORD *)a2 + 2))
              {
                *(v119 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v160);
LABEL_252:
                v155 = *((_QWORD *)a2 + 1) + 4;
LABEL_253:
                *((_QWORD *)a2 + 1) = v155;
              }
              else
              {
LABEL_250:
                *((_BYTE *)a2 + 24) = 1;
              }
            }
LABEL_20:
            v2 = *((_QWORD *)a2 + 1);
            v3 = *((_QWORD *)a2 + 2);
            v4 = *((unsigned __int8 *)a2 + 24);
            if (v2 >= v3 || v4 != 0)
              return v4 == 0;
            continue;
          case 7u:
            *((_WORD *)this + 60) |= 0x80u;
            v76 = *((_QWORD *)a2 + 1);
            if (v76 >= *((_QWORD *)a2 + 2))
            {
              v79 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v77 = v76 + 1;
              v78 = *(unsigned __int8 *)(*(_QWORD *)a2 + v76);
              *((_QWORD *)a2 + 1) = v77;
              v79 = v78 != 0;
            }
            *((_BYTE *)this + 116) = v79;
            goto LABEL_20;
          case 8u:
            *((_WORD *)this + 60) |= 0x100u;
            v80 = *((_QWORD *)a2 + 1);
            if (v80 >= *((_QWORD *)a2 + 2))
            {
              v83 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v81 = v80 + 1;
              v82 = *(unsigned __int8 *)(*(_QWORD *)a2 + v80);
              *((_QWORD *)a2 + 1) = v81;
              v83 = v82 != 0;
            }
            *((_BYTE *)this + 117) = v83;
            goto LABEL_20;
          case 9u:
            *((_WORD *)this + 60) |= 4u;
            v84 = *((_QWORD *)a2 + 1);
            if (v84 > 0xFFFFFFFFFFFFFFFBLL || v84 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_250;
            *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v84);
            goto LABEL_252;
          case 0xAu:
            *((_WORD *)this + 60) |= 8u;
            v85 = *((_QWORD *)a2 + 1);
            if (v85 > 0xFFFFFFFFFFFFFFFBLL || v85 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_250;
            *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v85);
            goto LABEL_252;
          case 0xBu:
            *((_WORD *)this + 60) |= 0x40u;
            v86 = *((_QWORD *)a2 + 1);
            v87 = *((_QWORD *)a2 + 2);
            v88 = *(_QWORD *)a2;
            if (v86 <= 0xFFFFFFFFFFFFFFF5 && v86 + 10 <= v87)
            {
              v89 = 0;
              v90 = 0;
              v91 = 0;
              do
              {
                v92 = v86 + 1;
                *((_QWORD *)a2 + 1) = v86 + 1;
                v93 = *(_BYTE *)(v88 + v86);
                v91 |= (unint64_t)(v93 & 0x7F) << v89;
                if ((v93 & 0x80) == 0)
                  goto LABEL_217;
                v89 += 7;
                v86 = v92;
                v14 = v90++ > 8;
              }
              while (!v14);
LABEL_167:
              LODWORD(v91) = 0;
              goto LABEL_217;
            }
            v122 = 0;
            v123 = 0;
            v91 = 0;
            if (v87 <= v86)
              v87 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v87 == v86)
              {
                LODWORD(v91) = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v124 = v86 + 1;
                v125 = *(_BYTE *)(v88 + v86);
                *((_QWORD *)a2 + 1) = v124;
                v91 |= (unint64_t)(v125 & 0x7F) << v122;
                if (v125 < 0)
                {
                  v122 += 7;
                  v86 = v124;
                  v14 = v123++ > 8;
                  if (v14)
                    goto LABEL_167;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v91) = 0;
              }
              break;
            }
LABEL_217:
            *((_DWORD *)this + 28) = v91;
            goto LABEL_20;
          case 0xCu:
            *((_WORD *)this + 60) |= 0x20u;
            v94 = *((_QWORD *)a2 + 1);
            v95 = *((_QWORD *)a2 + 2);
            v96 = *(_QWORD *)a2;
            if (v94 <= 0xFFFFFFFFFFFFFFF5 && v94 + 10 <= v95)
            {
              v97 = 0;
              v98 = 0;
              v99 = 0;
              do
              {
                v100 = v94 + 1;
                *((_QWORD *)a2 + 1) = v94 + 1;
                v101 = *(_BYTE *)(v96 + v94);
                v99 |= (unint64_t)(v101 & 0x7F) << v97;
                if ((v101 & 0x80) == 0)
                  goto LABEL_220;
                v97 += 7;
                v94 = v100;
                v14 = v98++ > 8;
              }
              while (!v14);
LABEL_174:
              LODWORD(v99) = 0;
              goto LABEL_220;
            }
            v126 = 0;
            v127 = 0;
            v99 = 0;
            if (v95 <= v94)
              v95 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v95 == v94)
              {
                LODWORD(v99) = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v128 = v94 + 1;
                v129 = *(_BYTE *)(v96 + v94);
                *((_QWORD *)a2 + 1) = v128;
                v99 |= (unint64_t)(v129 & 0x7F) << v126;
                if (v129 < 0)
                {
                  v126 += 7;
                  v94 = v128;
                  v14 = v127++ > 8;
                  if (v14)
                    goto LABEL_174;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v99) = 0;
              }
              break;
            }
LABEL_220:
            *((_DWORD *)this + 27) = v99;
            goto LABEL_20;
          case 0xDu:
            *((_WORD *)this + 60) |= 0x10u;
            v102 = *((_QWORD *)a2 + 1);
            v103 = *((_QWORD *)a2 + 2);
            v104 = *(_QWORD *)a2;
            if (v102 <= 0xFFFFFFFFFFFFFFF5 && v102 + 10 <= v103)
            {
              v105 = 0;
              v106 = 0;
              v107 = 0;
              do
              {
                v108 = v102 + 1;
                *((_QWORD *)a2 + 1) = v102 + 1;
                v109 = *(_BYTE *)(v104 + v102);
                v107 |= (unint64_t)(v109 & 0x7F) << v105;
                if ((v109 & 0x80) == 0)
                  goto LABEL_223;
                v105 += 7;
                v102 = v108;
                v14 = v106++ > 8;
              }
              while (!v14);
LABEL_181:
              LODWORD(v107) = 0;
              goto LABEL_223;
            }
            v130 = 0;
            v131 = 0;
            v107 = 0;
            if (v103 <= v102)
              v103 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v103 == v102)
              {
                LODWORD(v107) = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v132 = v102 + 1;
                v133 = *(_BYTE *)(v104 + v102);
                *((_QWORD *)a2 + 1) = v132;
                v107 |= (unint64_t)(v133 & 0x7F) << v130;
                if (v133 < 0)
                {
                  v130 += 7;
                  v102 = v132;
                  v14 = v131++ > 8;
                  if (v14)
                    goto LABEL_181;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v107) = 0;
              }
              break;
            }
LABEL_223:
            *((_DWORD *)this + 26) = v107;
            goto LABEL_20;
          default:
            goto LABEL_19;
        }
      }
      v4 = 0;
      return v4 == 0;
    }
    break;
  }
  v15 = 0;
  v16 = 0;
  v11 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v17 = v2 + 1;
    v18 = *(_BYTE *)(v8 + v2);
    *((_QWORD *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0)
      goto LABEL_25;
    v15 += 7;
    v2 = v17;
    v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  if ((PB::Reader::skip(a2) & 1) != 0)
    goto LABEL_20;
  return 0;
}

uint64_t CMMsl::KappaTriggerDebug::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;
  double *v5;
  double *v6;
  double v7;
  float *v8;
  float *v9;
  float v10;
  float *v11;
  float *v12;
  float v13;
  __int16 v14;

  v3 = this;
  v4 = *(_WORD *)(this + 120);
  if ((v4 & 2) == 0)
  {
    if ((*(_WORD *)(this + 120) & 0x200) == 0)
      goto LABEL_3;
LABEL_23:
    this = PB::Writer::write(a2);
    if ((*(_WORD *)(v3 + 120) & 1) == 0)
      goto LABEL_5;
    goto LABEL_4;
  }
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x200) != 0)
    goto LABEL_23;
LABEL_3:
  if ((v4 & 1) != 0)
LABEL_4:
    this = PB::Writer::write(a2, *(double *)(v3 + 80));
LABEL_5:
  v5 = *(double **)(v3 + 8);
  v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7);
  }
  v8 = *(float **)(v3 + 56);
  v9 = *(float **)(v3 + 64);
  while (v8 != v9)
  {
    v10 = *v8++;
    this = PB::Writer::write(a2, v10);
  }
  v11 = *(float **)(v3 + 32);
  v12 = *(float **)(v3 + 40);
  while (v11 != v12)
  {
    v13 = *v11++;
    this = PB::Writer::write(a2, v13);
  }
  v14 = *(_WORD *)(v3 + 120);
  if ((v14 & 0x80) != 0)
  {
    this = PB::Writer::write(a2);
    v14 = *(_WORD *)(v3 + 120);
    if ((v14 & 0x100) == 0)
    {
LABEL_16:
      if ((v14 & 4) == 0)
        goto LABEL_17;
      goto LABEL_27;
    }
  }
  else if ((*(_WORD *)(v3 + 120) & 0x100) == 0)
  {
    goto LABEL_16;
  }
  this = PB::Writer::write(a2);
  v14 = *(_WORD *)(v3 + 120);
  if ((v14 & 4) == 0)
  {
LABEL_17:
    if ((v14 & 8) == 0)
      goto LABEL_18;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(float *)(v3 + 96));
  v14 = *(_WORD *)(v3 + 120);
  if ((v14 & 8) == 0)
  {
LABEL_18:
    if ((v14 & 0x40) == 0)
      goto LABEL_19;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(float *)(v3 + 100));
  v14 = *(_WORD *)(v3 + 120);
  if ((v14 & 0x40) == 0)
  {
LABEL_19:
    if ((v14 & 0x20) == 0)
      goto LABEL_20;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::writeVarInt(a2);
  v14 = *(_WORD *)(v3 + 120);
  if ((v14 & 0x20) == 0)
  {
LABEL_20:
    if ((v14 & 0x10) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_30:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_WORD *)(v3 + 120) & 0x10) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::KappaTriggerDebug::hash_value(CMMsl::KappaTriggerDebug *this)
{
  __int16 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *((_WORD *)this + 60);
  if ((v2 & 2) != 0)
  {
    v3 = *((_QWORD *)this + 11);
    if ((*((_WORD *)this + 60) & 0x200) != 0)
    {
LABEL_3:
      v4 = *((unsigned __int8 *)this + 118);
      if ((v2 & 1) != 0)
        goto LABEL_4;
LABEL_9:
      v5 = 0;
      goto LABEL_10;
    }
  }
  else
  {
    v3 = 0;
    if ((*((_WORD *)this + 60) & 0x200) != 0)
      goto LABEL_3;
  }
  v4 = 0;
  if ((v2 & 1) == 0)
    goto LABEL_9;
LABEL_4:
  if (*((double *)this + 10) == 0.0)
    v5 = 0;
  else
    v5 = *((_QWORD *)this + 10);
LABEL_10:
  v6 = PBHashBytes();
  v7 = PBHashBytes();
  v8 = PBHashBytes();
  v9 = *((_WORD *)this + 60);
  if ((v9 & 0x80) != 0)
  {
    v10 = *((unsigned __int8 *)this + 116);
    if ((*((_WORD *)this + 60) & 0x100) != 0)
    {
LABEL_12:
      v11 = *((unsigned __int8 *)this + 117);
      if ((v9 & 4) != 0)
        goto LABEL_13;
LABEL_24:
      v13 = 0;
      if ((v9 & 8) != 0)
        goto LABEL_16;
LABEL_25:
      v15 = 0;
      if ((v9 & 0x40) != 0)
        goto LABEL_19;
      goto LABEL_26;
    }
  }
  else
  {
    v10 = 0;
    if ((*((_WORD *)this + 60) & 0x100) != 0)
      goto LABEL_12;
  }
  v11 = 0;
  if ((v9 & 4) == 0)
    goto LABEL_24;
LABEL_13:
  v12 = *((float *)this + 24);
  v13 = LODWORD(v12);
  if (v12 == 0.0)
    v13 = 0;
  if ((v9 & 8) == 0)
    goto LABEL_25;
LABEL_16:
  v14 = *((float *)this + 25);
  v15 = LODWORD(v14);
  if (v14 == 0.0)
    v15 = 0;
  if ((v9 & 0x40) != 0)
  {
LABEL_19:
    v16 = *((unsigned int *)this + 28);
    if ((v9 & 0x20) != 0)
      goto LABEL_20;
LABEL_27:
    v17 = 0;
    if ((v9 & 0x10) != 0)
      goto LABEL_21;
LABEL_28:
    v18 = 0;
    return v4 ^ v3 ^ v5 ^ v6 ^ v7 ^ v8 ^ v10 ^ v11 ^ v13 ^ v15 ^ v16 ^ v17 ^ v18;
  }
LABEL_26:
  v16 = 0;
  if ((v9 & 0x20) == 0)
    goto LABEL_27;
LABEL_20:
  v17 = *((unsigned int *)this + 27);
  if ((v9 & 0x10) == 0)
    goto LABEL_28;
LABEL_21:
  v18 = *((unsigned int *)this + 26);
  return v4 ^ v3 ^ v5 ^ v6 ^ v7 ^ v8 ^ v10 ^ v11 ^ v13 ^ v15 ^ v16 ^ v17 ^ v18;
}

void CMMsl::KappaZgDetected::~KappaZgDetected(CMMsl::KappaZgDetected *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::KappaZgDetected::KappaZgDetected(uint64_t this, const CMMsl::KappaZgDetected *a2)
{
  uint64_t v2;

  *(_QWORD *)this = &off_25135EDD8;
  *(_DWORD *)(this + 16) = 0;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v2 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 16) = 1;
    *(_QWORD *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::KappaZgDetected::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  _QWORD v7[2];
  int v8;

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = *(_BYTE *)(a2 + 16) & 1;
    v8 = v4;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v7[0] = &off_25135EDD8;
    v7[1] = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD v8[2];
  int v9;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v3;
    v9 = v5;
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v8[0] = &off_25135EDD8;
    v8[1] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::KappaZgDetected *a2, CMMsl::KappaZgDetected *a3)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  return this;
}

uint64_t CMMsl::KappaZgDetected::formatText(CMMsl::KappaZgDetected *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 16) & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaZgDetected::readFrom(CMMsl::KappaZgDetected *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  char v24;
  uint64_t result;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_29;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 16) |= 1u;
        v19 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        v20 = *(_QWORD *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v3)
        {
          v26 = 0;
          v27 = 0;
          v23 = 0;
          if (v3 <= v19)
            v2 = *((_QWORD *)a2 + 1);
          else
            v2 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v2 == v19)
            {
              v23 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_43;
            }
            v28 = v19++;
            v29 = *(_BYTE *)(v20 + v28);
            *((_QWORD *)a2 + 1) = v19;
            v23 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0)
              break;
            v26 += 7;
            v14 = v27++ > 8;
            if (v14)
            {
              v23 = 0;
              goto LABEL_42;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v23 = 0;
LABEL_42:
          v2 = v28 + 1;
        }
        else
        {
          v21 = 0;
          v22 = 0;
          v23 = 0;
          while (1)
          {
            v2 = v19 + 1;
            *((_QWORD *)a2 + 1) = v19 + 1;
            v24 = *(_BYTE *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0)
              break;
            v21 += 7;
            v19 = v2;
            v14 = v22++ > 8;
            if (v14)
            {
              v23 = 0;
              break;
            }
          }
        }
LABEL_43:
        *((_QWORD *)this + 1) = v23;
      }
      else
      {
LABEL_29:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_29;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaZgDetected::writeTo(uint64_t this, PB::Writer *a2)
{
  if ((*(_BYTE *)(this + 16) & 1) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::KappaZgDetected::hash_value(CMMsl::KappaZgDetected *this)
{
  if ((*((_BYTE *)this + 16) & 1) != 0)
    return *((_QWORD *)this + 1);
  else
    return 0;
}

void CMMsl::KappaZgResult::~KappaZgResult(CMMsl::KappaZgResult *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::KappaZgResult::KappaZgResult(uint64_t this, const CMMsl::KappaZgResult *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;

  *(_QWORD *)this = &off_25135EE10;
  *(_QWORD *)(this + 164) = 0;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x100000000) != 0)
  {
    v4 = *((_BYTE *)a2 + 160);
    v3 = 0x100000000;
    *(_QWORD *)(this + 164) = 0x100000000;
    *(_BYTE *)(this + 160) = v4;
    v2 = *(_QWORD *)((char *)a2 + 164);
    if ((v2 & 0x100000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x100000) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 28);
    v3 |= 0x100000uLL;
    *(_QWORD *)(this + 164) = v3;
    *(_DWORD *)(this + 112) = v5;
    v2 = *(_QWORD *)((char *)a2 + 164);
  }
LABEL_6:
  if ((v2 & 0x80000) != 0)
  {
    v6 = *((_DWORD *)a2 + 27);
    v3 |= 0x80000uLL;
    *(_QWORD *)(this + 164) = v3;
    *(_DWORD *)(this + 108) = v6;
    v2 = *(_QWORD *)((char *)a2 + 164);
    if ((v2 & 0x1000000) == 0)
    {
LABEL_8:
      if ((v2 & 0x20000000) == 0)
        goto LABEL_9;
      goto LABEL_40;
    }
  }
  else if ((v2 & 0x1000000) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 32);
  v3 |= 0x1000000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 128) = v7;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_9:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_10;
    goto LABEL_41;
  }
LABEL_40:
  v8 = *((_DWORD *)a2 + 37);
  v3 |= 0x20000000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 148) = v8;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_10:
    if ((v2 & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_42;
  }
LABEL_41:
  v9 = *((_DWORD *)a2 + 34);
  v3 |= 0x4000000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 136) = v9;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_11:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_12;
    goto LABEL_43;
  }
LABEL_42:
  v10 = *((_DWORD *)a2 + 39);
  v3 |= 0x80000000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 156) = v10;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_12:
    if ((v2 & 0x200000) == 0)
      goto LABEL_13;
    goto LABEL_44;
  }
LABEL_43:
  v11 = *((_DWORD *)a2 + 36);
  v3 |= 0x10000000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 144) = v11;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x200000) == 0)
  {
LABEL_13:
    if ((v2 & 0x400000) == 0)
      goto LABEL_14;
    goto LABEL_45;
  }
LABEL_44:
  v12 = *((_DWORD *)a2 + 29);
  v3 |= 0x200000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 116) = v12;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x400000) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0)
      goto LABEL_15;
    goto LABEL_46;
  }
LABEL_45:
  v13 = *((_DWORD *)a2 + 30);
  v3 |= 0x400000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 120) = v13;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x10) == 0)
  {
LABEL_15:
    if ((v2 & 8) == 0)
      goto LABEL_16;
    goto LABEL_47;
  }
LABEL_46:
  v14 = *((_QWORD *)a2 + 5);
  v3 |= 0x10uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_QWORD *)(this + 40) = v14;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 8) == 0)
  {
LABEL_16:
    if ((v2 & 4) == 0)
      goto LABEL_17;
    goto LABEL_48;
  }
LABEL_47:
  v15 = *((_QWORD *)a2 + 4);
  v3 |= 8uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_QWORD *)(this + 32) = v15;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 4) == 0)
  {
LABEL_17:
    if ((v2 & 0x8000) == 0)
      goto LABEL_18;
    goto LABEL_49;
  }
LABEL_48:
  v16 = *((_QWORD *)a2 + 3);
  v3 |= 4uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_QWORD *)(this + 24) = v16;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x8000) == 0)
  {
LABEL_18:
    if ((v2 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_50;
  }
LABEL_49:
  v17 = *((_DWORD *)a2 + 23);
  v3 |= 0x8000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 92) = v17;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x20000) == 0)
  {
LABEL_19:
    if ((v2 & 0x10000) == 0)
      goto LABEL_20;
    goto LABEL_51;
  }
LABEL_50:
  v18 = *((_DWORD *)a2 + 25);
  v3 |= 0x20000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 100) = v18;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x10000) == 0)
  {
LABEL_20:
    if ((v2 & 0x40000) == 0)
      goto LABEL_21;
    goto LABEL_52;
  }
LABEL_51:
  v19 = *((_DWORD *)a2 + 24);
  v3 |= 0x10000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 96) = v19;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x40000) == 0)
  {
LABEL_21:
    if ((v2 & 0x4000) == 0)
      goto LABEL_22;
    goto LABEL_53;
  }
LABEL_52:
  v20 = *((_DWORD *)a2 + 26);
  v3 |= 0x40000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 104) = v20;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x4000) == 0)
  {
LABEL_22:
    if ((v2 & 0x40) == 0)
      goto LABEL_23;
    goto LABEL_54;
  }
LABEL_53:
  v21 = *((_DWORD *)a2 + 22);
  v3 |= 0x4000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 88) = v21;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x40) == 0)
  {
LABEL_23:
    if ((v2 & 0x80) == 0)
      goto LABEL_24;
    goto LABEL_55;
  }
LABEL_54:
  v22 = *((_DWORD *)a2 + 14);
  v3 |= 0x40uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 56) = v22;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x80) == 0)
  {
LABEL_24:
    if ((v2 & 0x800) == 0)
      goto LABEL_25;
    goto LABEL_56;
  }
LABEL_55:
  v23 = *((_DWORD *)a2 + 15);
  v3 |= 0x80uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 60) = v23;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x800) == 0)
  {
LABEL_25:
    if ((v2 & 0x1000) == 0)
      goto LABEL_26;
    goto LABEL_57;
  }
LABEL_56:
  v24 = *((_DWORD *)a2 + 19);
  v3 |= 0x800uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 76) = v24;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x1000) == 0)
  {
LABEL_26:
    if ((v2 & 0x2000) == 0)
      goto LABEL_27;
    goto LABEL_58;
  }
LABEL_57:
  v25 = *((_DWORD *)a2 + 20);
  v3 |= 0x1000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 80) = v25;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x2000) == 0)
  {
LABEL_27:
    if ((v2 & 0x100) == 0)
      goto LABEL_28;
    goto LABEL_59;
  }
LABEL_58:
  v26 = *((_DWORD *)a2 + 21);
  v3 |= 0x2000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 84) = v26;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x100) == 0)
  {
LABEL_28:
    if ((v2 & 0x200) == 0)
      goto LABEL_29;
    goto LABEL_60;
  }
LABEL_59:
  v27 = *((_DWORD *)a2 + 16);
  v3 |= 0x100uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 64) = v27;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x200) == 0)
  {
LABEL_29:
    if ((v2 & 0x400) == 0)
      goto LABEL_30;
    goto LABEL_61;
  }
LABEL_60:
  v28 = *((_DWORD *)a2 + 17);
  v3 |= 0x200uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 68) = v28;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x400) == 0)
  {
LABEL_30:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_31;
    goto LABEL_62;
  }
LABEL_61:
  v29 = *((_DWORD *)a2 + 18);
  v3 |= 0x400uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 72) = v29;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_31:
    if ((v2 & 0x800000) == 0)
      goto LABEL_32;
    goto LABEL_63;
  }
LABEL_62:
  v30 = *((_DWORD *)a2 + 35);
  v3 |= 0x8000000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 140) = v30;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x800000) == 0)
  {
LABEL_32:
    if ((v2 & 0x20) == 0)
      goto LABEL_33;
    goto LABEL_64;
  }
LABEL_63:
  v31 = *((_DWORD *)a2 + 31);
  v3 |= 0x800000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 124) = v31;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x20) == 0)
  {
LABEL_33:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_65;
  }
LABEL_64:
  v32 = *((_QWORD *)a2 + 6);
  v3 |= 0x20uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_QWORD *)(this + 48) = v32;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v2 & 0x40000000) == 0)
      goto LABEL_35;
    goto LABEL_66;
  }
LABEL_65:
  v33 = *((_DWORD *)a2 + 33);
  v3 |= 0x2000000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 132) = v33;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_35:
    if ((v2 & 1) == 0)
      goto LABEL_36;
    goto LABEL_67;
  }
LABEL_66:
  v34 = *((_DWORD *)a2 + 38);
  v3 |= 0x40000000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 152) = v34;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 1) == 0)
  {
LABEL_36:
    if ((v2 & 2) == 0)
      return this;
LABEL_68:
    v36 = *((_QWORD *)a2 + 2);
    *(_QWORD *)(this + 164) = v3 | 2;
    *(_QWORD *)(this + 16) = v36;
    return this;
  }
LABEL_67:
  v35 = *((_QWORD *)a2 + 1);
  v3 |= 1uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_QWORD *)(this + 8) = v35;
  if ((*(_QWORD *)((_BYTE *)a2 + 164) & 2) != 0)
    goto LABEL_68;
  return this;
}

CMMsl *CMMsl::KappaZgResult::operator=(CMMsl *a1, const CMMsl::KappaZgResult *a2)
{
  CMMsl::KappaZgResult *v3;
  _BYTE v5[176];

  if (a1 != a2)
  {
    CMMsl::KappaZgResult::KappaZgResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaZgResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaZgResult *a2, CMMsl::KappaZgResult *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  float result;
  uint64_t v26;
  uint64_t v27;

  v3 = *(_QWORD *)((char *)this + 164);
  *(_QWORD *)((char *)this + 164) = *(_QWORD *)((char *)a2 + 164);
  *(_QWORD *)((char *)a2 + 164) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 160);
  *((_BYTE *)this + 160) = *((_BYTE *)a2 + 160);
  *((_BYTE *)a2 + 160) = v3;
  LODWORD(v3) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v3;
  LODWORD(v3) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v3;
  v4 = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v4;
  v5 = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v5;
  v6 = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v6;
  v7 = *((_DWORD *)this + 39);
  *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
  *((_DWORD *)a2 + 39) = v7;
  v8 = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v8;
  LODWORD(v3) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v3;
  LODWORD(v3) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v3;
  v9 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v9;
  v10 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v10;
  v11 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v11;
  LODWORD(v11) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v11;
  v12 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v12;
  LODWORD(v11) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v11;
  v13 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v13;
  v14 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v14;
  v15 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v15;
  LODWORD(v11) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v11;
  v16 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v16;
  v17 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v17;
  v18 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v18;
  v19 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v19;
  v20 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v20;
  v21 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v21;
  v22 = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v22;
  LODWORD(v11) = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v11;
  v23 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v23;
  v24 = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v24;
  result = *((float *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((float *)a2 + 38) = result;
  v26 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v26;
  v27 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v27;
  return result;
}

float CMMsl::KappaZgResult::KappaZgResult(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135EE10;
  *(_QWORD *)(a1 + 164) = *(_QWORD *)(a2 + 164);
  *(_QWORD *)(a2 + 164) = 0;
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  result = *(float *)(a2 + 152);
  *(float *)(a1 + 152) = result;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return result;
}

CMMsl *CMMsl::KappaZgResult::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::KappaZgResult *v3;
  _BYTE v5[176];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaZgResult::KappaZgResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaZgResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaZgResult::formatText(CMMsl::KappaZgResult *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x40) != 0)
  {
    PB::TextFormatter::format(a2, "configAccelThresholdNorm", *((float *)this + 14));
    v5 = *(_QWORD *)((char *)this + 164);
    if ((v5 & 0x80) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0)
        goto LABEL_4;
      goto LABEL_38;
    }
  }
  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "configHardware");
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "configIx", *((float *)this + 16));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 0x400) == 0)
      goto LABEL_6;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "configIy", *((float *)this + 17));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x400) == 0)
  {
LABEL_6:
    if ((v5 & 0x800) == 0)
      goto LABEL_7;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "configIz", *((float *)this + 18));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x800) == 0)
  {
LABEL_7:
    if ((v5 & 0x1000) == 0)
      goto LABEL_8;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "configLx", *((float *)this + 19));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x1000) == 0)
  {
LABEL_8:
    if ((v5 & 0x2000) == 0)
      goto LABEL_9;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "configLy", *((float *)this + 20));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x2000) == 0)
  {
LABEL_9:
    if ((v5 & 0x4000) == 0)
      goto LABEL_10;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "configLz", *((float *)this + 21));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x4000) == 0)
  {
LABEL_10:
    if ((v5 & 0x8000) == 0)
      goto LABEL_11;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "configZgThreshold", *((float *)this + 22));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x8000) == 0)
  {
LABEL_11:
    if ((v5 & 0x10000) == 0)
      goto LABEL_12;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "debugCountOfAccelDataDrop");
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x10000) == 0)
  {
LABEL_12:
    if ((v5 & 0x20000) == 0)
      goto LABEL_13;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "debugCountOfDmDataDrop");
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x20000) == 0)
  {
LABEL_13:
    if ((v5 & 0x40000) == 0)
      goto LABEL_14;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "debugMaxTimeBetweenAccelSample", *((float *)this + 25));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x40000) == 0)
  {
LABEL_14:
    if ((v5 & 1) == 0)
      goto LABEL_15;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "debugMaxTimeBetweenDmSample", *((float *)this + 26));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 1) == 0)
  {
LABEL_15:
    if ((v5 & 2) == 0)
      goto LABEL_16;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "epochFirstTimestamp");
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 2) == 0)
  {
LABEL_16:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_17;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "epochLastTimestamp");
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_17:
    if ((v5 & 0x80000) == 0)
      goto LABEL_18;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "freefallTpQualifier");
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x80000) == 0)
  {
LABEL_18:
    if ((v5 & 0x100000) == 0)
      goto LABEL_19;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "metaCountOfFreefallImpactPassed");
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x100000) == 0)
  {
LABEL_19:
    if ((v5 & 0x200000) == 0)
      goto LABEL_20;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "metaCountOfFreefallTimePassed");
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x200000) == 0)
  {
LABEL_20:
    if ((v5 & 0x400000) == 0)
      goto LABEL_21;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "metaCountOfSigImpact");
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x400000) == 0)
  {
LABEL_21:
    if ((v5 & 0x800000) == 0)
      goto LABEL_22;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "metaCountOfZgSegment");
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x800000) == 0)
  {
LABEL_22:
    if ((v5 & 4) == 0)
      goto LABEL_23;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "metaCrossingCount");
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 4) == 0)
  {
LABEL_23:
    if ((v5 & 8) == 0)
      goto LABEL_24;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "metaDtBwFirstAndLastFreeFall");
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 8) == 0)
  {
LABEL_24:
    if ((v5 & 0x10) == 0)
      goto LABEL_25;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "metaDtBwFirstFreeFall");
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x10) == 0)
  {
LABEL_25:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_26;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "metaDtBwFirstSigImpact");
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_27;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "metaFreefallTime", *((float *)this + 32));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_28;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "metaFreefallTimeForImpact", *((float *)this + 33));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_29;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "metaMaxOfAccel", *((float *)this + 34));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_30;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "metaMaxPower", *((float *)this + 35));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_31;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "metaMaxZgSegmentTime", *((float *)this + 36));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_32;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "metaNormOfAccel", *((float *)this + 37));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_33;
LABEL_67:
    PB::TextFormatter::format(a2, "metaTotalZgTime", *((float *)this + 39));
    if ((*(_QWORD *)((_BYTE *)this + 164) & 0x20) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_34;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "metaNormOfImpact", *((float *)this + 38));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x80000000) != 0)
    goto LABEL_67;
LABEL_33:
  if ((v5 & 0x20) != 0)
LABEL_34:
    PB::TextFormatter::format(a2, "timestamp");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaZgResult::readFrom(CMMsl::KappaZgResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  BOOL v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char v73;
  unsigned int v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char v81;
  unsigned int v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  char v89;
  unsigned int v90;
  uint64_t v91;
  unint64_t v92;
  char v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  char v97;
  unsigned int v98;
  uint64_t v99;
  unint64_t v100;
  char v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  char v106;
  unsigned int v107;
  uint64_t v108;
  unint64_t v109;
  char v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  char v117;
  unsigned int v118;
  uint64_t v119;
  unint64_t v120;
  char v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  char v132;
  unsigned int v133;
  uint64_t v134;
  unint64_t v135;
  char v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  char v140;
  unsigned int v141;
  uint64_t v142;
  unint64_t v143;
  char v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  char v150;
  unsigned int v151;
  uint64_t v152;
  unint64_t v153;
  char v154;
  char v155;
  unsigned int v156;
  unint64_t v157;
  char v158;
  char v159;
  unsigned int v160;
  unint64_t v161;
  char v162;
  char v163;
  unsigned int v164;
  unint64_t v165;
  char v166;
  char v167;
  unsigned int v168;
  unint64_t v169;
  char v170;
  char v171;
  unsigned int v172;
  unint64_t v173;
  char v174;
  char v175;
  unsigned int v176;
  unint64_t v177;
  char v178;
  char v179;
  unsigned int v180;
  unint64_t v181;
  char v182;
  char v183;
  unsigned int v184;
  unint64_t v185;
  char v186;
  char v187;
  unsigned int v188;
  unint64_t v189;
  char v190;
  char v191;
  unsigned int v192;
  unint64_t v193;
  char v194;
  char v195;
  unsigned int v196;
  unint64_t v197;
  char v198;
  char v199;
  unsigned int v200;
  unint64_t v201;
  char v202;
  char v203;
  unsigned int v204;
  unint64_t v205;
  char v206;
  char v207;
  unsigned int v208;
  unint64_t v209;
  char v210;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_21;
          v15 += 7;
          v2 = v17;
          v14 = v16++ > 8;
          if (v14)
            goto LABEL_19;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_21:
        if ((v11 & 7) != 4)
        {
          v20 = v11 >> 3;
          switch((v11 >> 3))
          {
            case 1u:
              *(_QWORD *)((char *)this + 164) |= 0x100000000uLL;
              v21 = *((_QWORD *)a2 + 1);
              if (v21 >= *((_QWORD *)a2 + 2))
              {
                v24 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v22 = v21 + 1;
                v23 = *(unsigned __int8 *)(*(_QWORD *)a2 + v21);
                *((_QWORD *)a2 + 1) = v22;
                v24 = v23 != 0;
              }
              *((_BYTE *)this + 160) = v24;
              goto LABEL_281;
            case 2u:
              *(_QWORD *)((char *)this + 164) |= 0x100000uLL;
              v33 = *((_QWORD *)a2 + 1);
              v34 = *((_QWORD *)a2 + 2);
              v35 = *(_QWORD *)a2;
              if (v33 <= 0xFFFFFFFFFFFFFFF5 && v33 + 10 <= v34)
              {
                v36 = 0;
                v37 = 0;
                v38 = 0;
                do
                {
                  v39 = v33 + 1;
                  *((_QWORD *)a2 + 1) = v33 + 1;
                  v40 = *(_BYTE *)(v35 + v33);
                  v38 |= (unint64_t)(v40 & 0x7F) << v36;
                  if ((v40 & 0x80) == 0)
                    goto LABEL_293;
                  v36 += 7;
                  v33 = v39;
                  v14 = v37++ > 8;
                }
                while (!v14);
LABEL_194:
                LODWORD(v38) = 0;
                goto LABEL_293;
              }
              v159 = 0;
              v160 = 0;
              v38 = 0;
              if (v34 <= v33)
                v34 = *((_QWORD *)a2 + 1);
              while (2)
              {
                if (v34 == v33)
                {
                  LODWORD(v38) = 0;
                  *((_BYTE *)a2 + 24) = 1;
                }
                else
                {
                  v161 = v33 + 1;
                  v162 = *(_BYTE *)(v35 + v33);
                  *((_QWORD *)a2 + 1) = v161;
                  v38 |= (unint64_t)(v162 & 0x7F) << v159;
                  if (v162 < 0)
                  {
                    v159 += 7;
                    v33 = v161;
                    v14 = v160++ > 8;
                    if (v14)
                      goto LABEL_194;
                    continue;
                  }
                  if (*((_BYTE *)a2 + 24))
                    LODWORD(v38) = 0;
                }
                break;
              }
LABEL_293:
              *((_DWORD *)this + 28) = v38;
              goto LABEL_281;
            case 3u:
              *(_QWORD *)((char *)this + 164) |= 0x80000uLL;
              v41 = *((_QWORD *)a2 + 1);
              v42 = *((_QWORD *)a2 + 2);
              v43 = *(_QWORD *)a2;
              if (v41 <= 0xFFFFFFFFFFFFFFF5 && v41 + 10 <= v42)
              {
                v44 = 0;
                v45 = 0;
                v46 = 0;
                do
                {
                  v47 = v41 + 1;
                  *((_QWORD *)a2 + 1) = v41 + 1;
                  v48 = *(_BYTE *)(v43 + v41);
                  v46 |= (unint64_t)(v48 & 0x7F) << v44;
                  if ((v48 & 0x80) == 0)
                    goto LABEL_297;
                  v44 += 7;
                  v41 = v47;
                  v14 = v45++ > 8;
                }
                while (!v14);
LABEL_201:
                LODWORD(v46) = 0;
                goto LABEL_297;
              }
              v163 = 0;
              v164 = 0;
              v46 = 0;
              if (v42 <= v41)
                v42 = *((_QWORD *)a2 + 1);
              while (2)
              {
                if (v42 == v41)
                {
                  LODWORD(v46) = 0;
                  *((_BYTE *)a2 + 24) = 1;
                }
                else
                {
                  v165 = v41 + 1;
                  v166 = *(_BYTE *)(v43 + v41);
                  *((_QWORD *)a2 + 1) = v165;
                  v46 |= (unint64_t)(v166 & 0x7F) << v163;
                  if (v166 < 0)
                  {
                    v163 += 7;
                    v41 = v165;
                    v14 = v164++ > 8;
                    if (v14)
                      goto LABEL_201;
                    continue;
                  }
                  if (*((_BYTE *)a2 + 24))
                    LODWORD(v46) = 0;
                }
                break;
              }
LABEL_297:
              *((_DWORD *)this + 27) = v46;
              goto LABEL_281;
            case 4u:
              *(_QWORD *)((char *)this + 164) |= 0x1000000uLL;
              v49 = *((_QWORD *)a2 + 1);
              if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_171;
              *((_DWORD *)this + 32) = *(_DWORD *)(*(_QWORD *)a2 + v49);
              goto LABEL_280;
            case 5u:
              *(_QWORD *)((char *)this + 164) |= 0x20000000uLL;
              v50 = *((_QWORD *)a2 + 1);
              if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_171;
              *((_DWORD *)this + 37) = *(_DWORD *)(*(_QWORD *)a2 + v50);
              goto LABEL_280;
            case 6u:
              *(_QWORD *)((char *)this + 164) |= 0x4000000uLL;
              v51 = *((_QWORD *)a2 + 1);
              if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_171;
              *((_DWORD *)this + 34) = *(_DWORD *)(*(_QWORD *)a2 + v51);
              goto LABEL_280;
            case 7u:
              *(_QWORD *)((char *)this + 164) |= 0x80000000uLL;
              v52 = *((_QWORD *)a2 + 1);
              if (v52 > 0xFFFFFFFFFFFFFFFBLL || v52 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_171;
              *((_DWORD *)this + 39) = *(_DWORD *)(*(_QWORD *)a2 + v52);
              goto LABEL_280;
            case 8u:
              *(_QWORD *)((char *)this + 164) |= 0x10000000uLL;
              v53 = *((_QWORD *)a2 + 1);
              if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_171;
              *((_DWORD *)this + 36) = *(_DWORD *)(*(_QWORD *)a2 + v53);
              goto LABEL_280;
            case 9u:
              *(_QWORD *)((char *)this + 164) |= 0x200000uLL;
              v54 = *((_QWORD *)a2 + 1);
              v55 = *((_QWORD *)a2 + 2);
              v56 = *(_QWORD *)a2;
              if (v54 <= 0xFFFFFFFFFFFFFFF5 && v54 + 10 <= v55)
              {
                v57 = 0;
                v58 = 0;
                v59 = 0;
                do
                {
                  v60 = v54 + 1;
                  *((_QWORD *)a2 + 1) = v54 + 1;
                  v61 = *(_BYTE *)(v56 + v54);
                  v59 |= (unint64_t)(v61 & 0x7F) << v57;
                  if ((v61 & 0x80) == 0)
                    goto LABEL_301;
                  v57 += 7;
                  v54 = v60;
                  v14 = v58++ > 8;
                }
                while (!v14);
LABEL_208:
                LODWORD(v59) = 0;
                goto LABEL_301;
              }
              v167 = 0;
              v168 = 0;
              v59 = 0;
              if (v55 <= v54)
                v55 = *((_QWORD *)a2 + 1);
              while (2)
              {
                if (v55 == v54)
                {
                  LODWORD(v59) = 0;
                  *((_BYTE *)a2 + 24) = 1;
                }
                else
                {
                  v169 = v54 + 1;
                  v170 = *(_BYTE *)(v56 + v54);
                  *((_QWORD *)a2 + 1) = v169;
                  v59 |= (unint64_t)(v170 & 0x7F) << v167;
                  if (v170 < 0)
                  {
                    v167 += 7;
                    v54 = v169;
                    v14 = v168++ > 8;
                    if (v14)
                      goto LABEL_208;
                    continue;
                  }
                  if (*((_BYTE *)a2 + 24))
                    LODWORD(v59) = 0;
                }
                break;
              }
LABEL_301:
              *((_DWORD *)this + 29) = v59;
              goto LABEL_281;
            case 0xAu:
              *(_QWORD *)((char *)this + 164) |= 0x400000uLL;
              v62 = *((_QWORD *)a2 + 1);
              v63 = *((_QWORD *)a2 + 2);
              v64 = *(_QWORD *)a2;
              if (v62 <= 0xFFFFFFFFFFFFFFF5 && v62 + 10 <= v63)
              {
                v65 = 0;
                v66 = 0;
                v67 = 0;
                do
                {
                  v68 = v62 + 1;
                  *((_QWORD *)a2 + 1) = v62 + 1;
                  v69 = *(_BYTE *)(v64 + v62);
                  v67 |= (unint64_t)(v69 & 0x7F) << v65;
                  if ((v69 & 0x80) == 0)
                    goto LABEL_305;
                  v65 += 7;
                  v62 = v68;
                  v14 = v66++ > 8;
                }
                while (!v14);
LABEL_215:
                LODWORD(v67) = 0;
                goto LABEL_305;
              }
              v171 = 0;
              v172 = 0;
              v67 = 0;
              if (v63 <= v62)
                v63 = *((_QWORD *)a2 + 1);
              while (2)
              {
                if (v63 == v62)
                {
                  LODWORD(v67) = 0;
                  *((_BYTE *)a2 + 24) = 1;
                }
                else
                {
                  v173 = v62 + 1;
                  v174 = *(_BYTE *)(v64 + v62);
                  *((_QWORD *)a2 + 1) = v173;
                  v67 |= (unint64_t)(v174 & 0x7F) << v171;
                  if (v174 < 0)
                  {
                    v171 += 7;
                    v62 = v173;
                    v14 = v172++ > 8;
                    if (v14)
                      goto LABEL_215;
                    continue;
                  }
                  if (*((_BYTE *)a2 + 24))
                    LODWORD(v67) = 0;
                }
                break;
              }
LABEL_305:
              *((_DWORD *)this + 30) = v67;
              goto LABEL_281;
            case 0xBu:
              *(_QWORD *)((char *)this + 164) |= 0x10uLL;
              v70 = *((_QWORD *)a2 + 1);
              v71 = *((_QWORD *)a2 + 2);
              v72 = *(_QWORD *)a2;
              if (v70 <= 0xFFFFFFFFFFFFFFF5 && v70 + 10 <= v71)
              {
                v73 = 0;
                v74 = 0;
                v75 = 0;
                do
                {
                  v76 = v70 + 1;
                  *((_QWORD *)a2 + 1) = v70 + 1;
                  v77 = *(_BYTE *)(v72 + v70);
                  v75 |= (unint64_t)(v77 & 0x7F) << v73;
                  if ((v77 & 0x80) == 0)
                    goto LABEL_309;
                  v73 += 7;
                  v70 = v76;
                  v14 = v74++ > 8;
                }
                while (!v14);
LABEL_222:
                v75 = 0;
                goto LABEL_309;
              }
              v175 = 0;
              v176 = 0;
              v75 = 0;
              if (v71 <= v70)
                v71 = *((_QWORD *)a2 + 1);
              while (2)
              {
                if (v71 == v70)
                {
                  v75 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                }
                else
                {
                  v177 = v70 + 1;
                  v178 = *(_BYTE *)(v72 + v70);
                  *((_QWORD *)a2 + 1) = v177;
                  v75 |= (unint64_t)(v178 & 0x7F) << v175;
                  if (v178 < 0)
                  {
                    v175 += 7;
                    v70 = v177;
                    v14 = v176++ > 8;
                    if (v14)
                      goto LABEL_222;
                    continue;
                  }
                  if (*((_BYTE *)a2 + 24))
                    v75 = 0;
                }
                break;
              }
LABEL_309:
              *((_QWORD *)this + 5) = v75;
              goto LABEL_281;
            case 0xCu:
              *(_QWORD *)((char *)this + 164) |= 8uLL;
              v78 = *((_QWORD *)a2 + 1);
              v79 = *((_QWORD *)a2 + 2);
              v80 = *(_QWORD *)a2;
              if (v78 <= 0xFFFFFFFFFFFFFFF5 && v78 + 10 <= v79)
              {
                v81 = 0;
                v82 = 0;
                v83 = 0;
                do
                {
                  v84 = v78 + 1;
                  *((_QWORD *)a2 + 1) = v78 + 1;
                  v85 = *(_BYTE *)(v80 + v78);
                  v83 |= (unint64_t)(v85 & 0x7F) << v81;
                  if ((v85 & 0x80) == 0)
                    goto LABEL_313;
                  v81 += 7;
                  v78 = v84;
                  v14 = v82++ > 8;
                }
                while (!v14);
LABEL_229:
                v83 = 0;
                goto LABEL_313;
              }
              v179 = 0;
              v180 = 0;
              v83 = 0;
              if (v79 <= v78)
                v79 = *((_QWORD *)a2 + 1);
              while (2)
              {
                if (v79 == v78)
                {
                  v83 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                }
                else
                {
                  v181 = v78 + 1;
                  v182 = *(_BYTE *)(v80 + v78);
                  *((_QWORD *)a2 + 1) = v181;
                  v83 |= (unint64_t)(v182 & 0x7F) << v179;
                  if (v182 < 0)
                  {
                    v179 += 7;
                    v78 = v181;
                    v14 = v180++ > 8;
                    if (v14)
                      goto LABEL_229;
                    continue;
                  }
                  if (*((_BYTE *)a2 + 24))
                    v83 = 0;
                }
                break;
              }
LABEL_313:
              *((_QWORD *)this + 4) = v83;
              goto LABEL_281;
            case 0xDu:
              *(_QWORD *)((char *)this + 164) |= 4uLL;
              v86 = *((_QWORD *)a2 + 1);
              v87 = *((_QWORD *)a2 + 2);
              v88 = *(_QWORD *)a2;
              if (v86 <= 0xFFFFFFFFFFFFFFF5 && v86 + 10 <= v87)
              {
                v89 = 0;
                v90 = 0;
                v91 = 0;
                do
                {
                  v92 = v86 + 1;
                  *((_QWORD *)a2 + 1) = v86 + 1;
                  v93 = *(_BYTE *)(v88 + v86);
                  v91 |= (unint64_t)(v93 & 0x7F) << v89;
                  if ((v93 & 0x80) == 0)
                    goto LABEL_317;
                  v89 += 7;
                  v86 = v92;
                  v14 = v90++ > 8;
                }
                while (!v14);
LABEL_236:
                v91 = 0;
                goto LABEL_317;
              }
              v183 = 0;
              v184 = 0;
              v91 = 0;
              if (v87 <= v86)
                v87 = *((_QWORD *)a2 + 1);
              while (2)
              {
                if (v87 == v86)
                {
                  v91 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                }
                else
                {
                  v185 = v86 + 1;
                  v186 = *(_BYTE *)(v88 + v86);
                  *((_QWORD *)a2 + 1) = v185;
                  v91 |= (unint64_t)(v186 & 0x7F) << v183;
                  if (v186 < 0)
                  {
                    v183 += 7;
                    v86 = v185;
                    v14 = v184++ > 8;
                    if (v14)
                      goto LABEL_236;
                    continue;
                  }
                  if (*((_BYTE *)a2 + 24))
                    v91 = 0;
                }
                break;
              }
LABEL_317:
              *((_QWORD *)this + 3) = v91;
              goto LABEL_281;
            case 0xEu:
              *(_QWORD *)((char *)this + 164) |= 0x8000uLL;
              v94 = *((_QWORD *)a2 + 1);
              v95 = *((_QWORD *)a2 + 2);
              v96 = *(_QWORD *)a2;
              if (v94 <= 0xFFFFFFFFFFFFFFF5 && v94 + 10 <= v95)
              {
                v97 = 0;
                v98 = 0;
                v99 = 0;
                do
                {
                  v100 = v94 + 1;
                  *((_QWORD *)a2 + 1) = v94 + 1;
                  v101 = *(_BYTE *)(v96 + v94);
                  v99 |= (unint64_t)(v101 & 0x7F) << v97;
                  if ((v101 & 0x80) == 0)
                    goto LABEL_321;
                  v97 += 7;
                  v94 = v100;
                  v14 = v98++ > 8;
                }
                while (!v14);
LABEL_243:
                LODWORD(v99) = 0;
                goto LABEL_321;
              }
              v187 = 0;
              v188 = 0;
              v99 = 0;
              if (v95 <= v94)
                v95 = *((_QWORD *)a2 + 1);
              while (2)
              {
                if (v95 == v94)
                {
                  LODWORD(v99) = 0;
                  *((_BYTE *)a2 + 24) = 1;
                }
                else
                {
                  v189 = v94 + 1;
                  v190 = *(_BYTE *)(v96 + v94);
                  *((_QWORD *)a2 + 1) = v189;
                  v99 |= (unint64_t)(v190 & 0x7F) << v187;
                  if (v190 < 0)
                  {
                    v187 += 7;
                    v94 = v189;
                    v14 = v188++ > 8;
                    if (v14)
                      goto LABEL_243;
                    continue;
                  }
                  if (*((_BYTE *)a2 + 24))
                    LODWORD(v99) = 0;
                }
                break;
              }
LABEL_321:
              *((_DWORD *)this + 23) = v99;
              goto LABEL_281;
            case 0xFu:
              *(_QWORD *)((char *)this + 164) |= 0x20000uLL;
              v102 = *((_QWORD *)a2 + 1);
              if (v102 > 0xFFFFFFFFFFFFFFFBLL || v102 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_171;
              *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v102);
              goto LABEL_280;
            case 0x10u:
              *(_QWORD *)((char *)this + 164) |= 0x10000uLL;
              v103 = *((_QWORD *)a2 + 1);
              v104 = *((_QWORD *)a2 + 2);
              v105 = *(_QWORD *)a2;
              if (v103 <= 0xFFFFFFFFFFFFFFF5 && v103 + 10 <= v104)
              {
                v106 = 0;
                v107 = 0;
                v108 = 0;
                do
                {
                  v109 = v103 + 1;
                  *((_QWORD *)a2 + 1) = v103 + 1;
                  v110 = *(_BYTE *)(v105 + v103);
                  v108 |= (unint64_t)(v110 & 0x7F) << v106;
                  if ((v110 & 0x80) == 0)
                    goto LABEL_325;
                  v106 += 7;
                  v103 = v109;
                  v14 = v107++ > 8;
                }
                while (!v14);
LABEL_250:
                LODWORD(v108) = 0;
                goto LABEL_325;
              }
              v191 = 0;
              v192 = 0;
              v108 = 0;
              if (v104 <= v103)
                v104 = *((_QWORD *)a2 + 1);
              while (2)
              {
                if (v104 == v103)
                {
                  LODWORD(v108) = 0;
                  *((_BYTE *)a2 + 24) = 1;
                }
                else
                {
                  v193 = v103 + 1;
                  v194 = *(_BYTE *)(v105 + v103);
                  *((_QWORD *)a2 + 1) = v193;
                  v108 |= (unint64_t)(v194 & 0x7F) << v191;
                  if (v194 < 0)
                  {
                    v191 += 7;
                    v103 = v193;
                    v14 = v192++ > 8;
                    if (v14)
                      goto LABEL_250;
                    continue;
                  }
                  if (*((_BYTE *)a2 + 24))
                    LODWORD(v108) = 0;
                }
                break;
              }
LABEL_325:
              *((_DWORD *)this + 24) = v108;
              goto LABEL_281;
            case 0x11u:
              *(_QWORD *)((char *)this + 164) |= 0x40000uLL;
              v111 = *((_QWORD *)a2 + 1);
              if (v111 > 0xFFFFFFFFFFFFFFFBLL || v111 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_171;
              *((_DWORD *)this + 26) = *(_DWORD *)(*(_QWORD *)a2 + v111);
              goto LABEL_280;
            case 0x12u:
              *(_QWORD *)((char *)this + 164) |= 0x4000uLL;
              v112 = *((_QWORD *)a2 + 1);
              if (v112 > 0xFFFFFFFFFFFFFFFBLL || v112 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_171;
              *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v112);
              goto LABEL_280;
            case 0x13u:
              *(_QWORD *)((char *)this + 164) |= 0x40uLL;
              v113 = *((_QWORD *)a2 + 1);
              if (v113 > 0xFFFFFFFFFFFFFFFBLL || v113 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_171;
              *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v113);
              goto LABEL_280;
            case 0x14u:
              *(_QWORD *)((char *)this + 164) |= 0x80uLL;
              v114 = *((_QWORD *)a2 + 1);
              v115 = *((_QWORD *)a2 + 2);
              v116 = *(_QWORD *)a2;
              if (v114 <= 0xFFFFFFFFFFFFFFF5 && v114 + 10 <= v115)
              {
                v117 = 0;
                v118 = 0;
                v119 = 0;
                do
                {
                  v120 = v114 + 1;
                  *((_QWORD *)a2 + 1) = v114 + 1;
                  v121 = *(_BYTE *)(v116 + v114);
                  v119 |= (unint64_t)(v121 & 0x7F) << v117;
                  if ((v121 & 0x80) == 0)
                    goto LABEL_329;
                  v117 += 7;
                  v114 = v120;
                  v14 = v118++ > 8;
                }
                while (!v14);
LABEL_257:
                LODWORD(v119) = 0;
                goto LABEL_329;
              }
              v195 = 0;
              v196 = 0;
              v119 = 0;
              if (v115 <= v114)
                v115 = *((_QWORD *)a2 + 1);
              while (2)
              {
                if (v115 == v114)
                {
                  LODWORD(v119) = 0;
                  *((_BYTE *)a2 + 24) = 1;
                }
                else
                {
                  v197 = v114 + 1;
                  v198 = *(_BYTE *)(v116 + v114);
                  *((_QWORD *)a2 + 1) = v197;
                  v119 |= (unint64_t)(v198 & 0x7F) << v195;
                  if (v198 < 0)
                  {
                    v195 += 7;
                    v114 = v197;
                    v14 = v196++ > 8;
                    if (v14)
                      goto LABEL_257;
                    continue;
                  }
                  if (*((_BYTE *)a2 + 24))
                    LODWORD(v119) = 0;
                }
                break;
              }
LABEL_329:
              *((_DWORD *)this + 15) = v119;
              goto LABEL_281;
            case 0x15u:
              *(_QWORD *)((char *)this + 164) |= 0x800uLL;
              v122 = *((_QWORD *)a2 + 1);
              if (v122 > 0xFFFFFFFFFFFFFFFBLL || v122 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_171;
              *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v122);
              goto LABEL_280;
            case 0x16u:
              *(_QWORD *)((char *)this + 164) |= 0x1000uLL;
              v123 = *((_QWORD *)a2 + 1);
              if (v123 > 0xFFFFFFFFFFFFFFFBLL || v123 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_171;
              *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v123);
              goto LABEL_280;
            case 0x17u:
              *(_QWORD *)((char *)this + 164) |= 0x2000uLL;
              v124 = *((_QWORD *)a2 + 1);
              if (v124 > 0xFFFFFFFFFFFFFFFBLL || v124 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_171;
              *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v124);
              goto LABEL_280;
            case 0x18u:
              *(_QWORD *)((char *)this + 164) |= 0x100uLL;
              v125 = *((_QWORD *)a2 + 1);
              if (v125 > 0xFFFFFFFFFFFFFFFBLL || v125 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_171;
              *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v125);
              goto LABEL_280;
            case 0x19u:
              *(_QWORD *)((char *)this + 164) |= 0x200uLL;
              v126 = *((_QWORD *)a2 + 1);
              if (v126 > 0xFFFFFFFFFFFFFFFBLL || v126 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_171;
              *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v126);
              goto LABEL_280;
            case 0x1Au:
              *(_QWORD *)((char *)this + 164) |= 0x400uLL;
              v127 = *((_QWORD *)a2 + 1);
              if (v127 > 0xFFFFFFFFFFFFFFFBLL || v127 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_171;
              *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v127);
              goto LABEL_280;
            case 0x1Bu:
              *(_QWORD *)((char *)this + 164) |= 0x8000000uLL;
              v128 = *((_QWORD *)a2 + 1);
              if (v128 > 0xFFFFFFFFFFFFFFFBLL || v128 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_171;
              *((_DWORD *)this + 35) = *(_DWORD *)(*(_QWORD *)a2 + v128);
              goto LABEL_280;
            case 0x1Cu:
              *(_QWORD *)((char *)this + 164) |= 0x800000uLL;
              v129 = *((_QWORD *)a2 + 1);
              v130 = *((_QWORD *)a2 + 2);
              v131 = *(_QWORD *)a2;
              if (v129 <= 0xFFFFFFFFFFFFFFF5 && v129 + 10 <= v130)
              {
                v132 = 0;
                v133 = 0;
                v134 = 0;
                do
                {
                  v135 = v129 + 1;
                  *((_QWORD *)a2 + 1) = v129 + 1;
                  v136 = *(_BYTE *)(v131 + v129);
                  v134 |= (unint64_t)(v136 & 0x7F) << v132;
                  if ((v136 & 0x80) == 0)
                    goto LABEL_333;
                  v132 += 7;
                  v129 = v135;
                  v14 = v133++ > 8;
                }
                while (!v14);
LABEL_264:
                LODWORD(v134) = 0;
                goto LABEL_333;
              }
              v199 = 0;
              v200 = 0;
              v134 = 0;
              if (v130 <= v129)
                v130 = *((_QWORD *)a2 + 1);
              while (2)
              {
                if (v130 == v129)
                {
                  LODWORD(v134) = 0;
                  *((_BYTE *)a2 + 24) = 1;
                }
                else
                {
                  v201 = v129 + 1;
                  v202 = *(_BYTE *)(v131 + v129);
                  *((_QWORD *)a2 + 1) = v201;
                  v134 |= (unint64_t)(v202 & 0x7F) << v199;
                  if (v202 < 0)
                  {
                    v199 += 7;
                    v129 = v201;
                    v14 = v200++ > 8;
                    if (v14)
                      goto LABEL_264;
                    continue;
                  }
                  if (*((_BYTE *)a2 + 24))
                    LODWORD(v134) = 0;
                }
                break;
              }
LABEL_333:
              *((_DWORD *)this + 31) = v134;
              goto LABEL_281;
            case 0x1Du:
              *(_QWORD *)((char *)this + 164) |= 0x20uLL;
              v137 = *((_QWORD *)a2 + 1);
              v138 = *((_QWORD *)a2 + 2);
              v139 = *(_QWORD *)a2;
              if (v137 <= 0xFFFFFFFFFFFFFFF5 && v137 + 10 <= v138)
              {
                v140 = 0;
                v141 = 0;
                v142 = 0;
                do
                {
                  v143 = v137 + 1;
                  *((_QWORD *)a2 + 1) = v137 + 1;
                  v144 = *(_BYTE *)(v139 + v137);
                  v142 |= (unint64_t)(v144 & 0x7F) << v140;
                  if ((v144 & 0x80) == 0)
                    goto LABEL_337;
                  v140 += 7;
                  v137 = v143;
                  v14 = v141++ > 8;
                }
                while (!v14);
LABEL_271:
                v142 = 0;
                goto LABEL_337;
              }
              v203 = 0;
              v204 = 0;
              v142 = 0;
              if (v138 <= v137)
                v138 = *((_QWORD *)a2 + 1);
              while (2)
              {
                if (v138 == v137)
                {
                  v142 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                }
                else
                {
                  v205 = v137 + 1;
                  v206 = *(_BYTE *)(v139 + v137);
                  *((_QWORD *)a2 + 1) = v205;
                  v142 |= (unint64_t)(v206 & 0x7F) << v203;
                  if (v206 < 0)
                  {
                    v203 += 7;
                    v137 = v205;
                    v14 = v204++ > 8;
                    if (v14)
                      goto LABEL_271;
                    continue;
                  }
                  if (*((_BYTE *)a2 + 24))
                    v142 = 0;
                }
                break;
              }
LABEL_337:
              *((_QWORD *)this + 6) = v142;
              goto LABEL_281;
            case 0x1Eu:
              *(_QWORD *)((char *)this + 164) |= 0x2000000uLL;
              v145 = *((_QWORD *)a2 + 1);
              if (v145 > 0xFFFFFFFFFFFFFFFBLL || v145 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_171;
              *((_DWORD *)this + 33) = *(_DWORD *)(*(_QWORD *)a2 + v145);
              goto LABEL_280;
            case 0x1Fu:
              *(_QWORD *)((char *)this + 164) |= 0x40000000uLL;
              v146 = *((_QWORD *)a2 + 1);
              if (v146 <= 0xFFFFFFFFFFFFFFFBLL && v146 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 38) = *(_DWORD *)(*(_QWORD *)a2 + v146);
LABEL_280:
                *((_QWORD *)a2 + 1) += 4;
              }
              else
              {
LABEL_171:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_281;
            default:
              if ((_DWORD)v20 == 201)
              {
                *(_QWORD *)((char *)this + 164) |= 1uLL;
                v147 = *((_QWORD *)a2 + 1);
                v148 = *((_QWORD *)a2 + 2);
                v149 = *(_QWORD *)a2;
                if (v147 > 0xFFFFFFFFFFFFFFF5 || v147 + 10 > v148)
                {
                  v207 = 0;
                  v208 = 0;
                  v152 = 0;
                  if (v148 <= v147)
                    v148 = *((_QWORD *)a2 + 1);
                  while (1)
                  {
                    if (v148 == v147)
                    {
                      v152 = 0;
                      *((_BYTE *)a2 + 24) = 1;
                      goto LABEL_341;
                    }
                    v209 = v147 + 1;
                    v210 = *(_BYTE *)(v149 + v147);
                    *((_QWORD *)a2 + 1) = v209;
                    v152 |= (unint64_t)(v210 & 0x7F) << v207;
                    if ((v210 & 0x80) == 0)
                      break;
                    v207 += 7;
                    v147 = v209;
                    v14 = v208++ > 8;
                    if (v14)
                    {
LABEL_278:
                      v152 = 0;
                      goto LABEL_341;
                    }
                  }
                  if (*((_BYTE *)a2 + 24))
                    v152 = 0;
                }
                else
                {
                  v150 = 0;
                  v151 = 0;
                  v152 = 0;
                  while (1)
                  {
                    v153 = v147 + 1;
                    *((_QWORD *)a2 + 1) = v147 + 1;
                    v154 = *(_BYTE *)(v149 + v147);
                    v152 |= (unint64_t)(v154 & 0x7F) << v150;
                    if ((v154 & 0x80) == 0)
                      break;
                    v150 += 7;
                    v147 = v153;
                    v14 = v151++ > 8;
                    if (v14)
                      goto LABEL_278;
                  }
                }
LABEL_341:
                *((_QWORD *)this + 1) = v152;
              }
              else if ((_DWORD)v20 == 202)
              {
                *(_QWORD *)((char *)this + 164) |= 2uLL;
                v25 = *((_QWORD *)a2 + 1);
                v26 = *((_QWORD *)a2 + 2);
                v27 = *(_QWORD *)a2;
                if (v25 > 0xFFFFFFFFFFFFFFF5 || v25 + 10 > v26)
                {
                  v155 = 0;
                  v156 = 0;
                  v30 = 0;
                  if (v26 <= v25)
                    v26 = *((_QWORD *)a2 + 1);
                  while (1)
                  {
                    if (v26 == v25)
                    {
                      v30 = 0;
                      *((_BYTE *)a2 + 24) = 1;
                      goto LABEL_289;
                    }
                    v157 = v25 + 1;
                    v158 = *(_BYTE *)(v27 + v25);
                    *((_QWORD *)a2 + 1) = v157;
                    v30 |= (unint64_t)(v158 & 0x7F) << v155;
                    if ((v158 & 0x80) == 0)
                      break;
                    v155 += 7;
                    v25 = v157;
                    v14 = v156++ > 8;
                    if (v14)
                    {
LABEL_187:
                      v30 = 0;
                      goto LABEL_289;
                    }
                  }
                  if (*((_BYTE *)a2 + 24))
                    v30 = 0;
                }
                else
                {
                  v28 = 0;
                  v29 = 0;
                  v30 = 0;
                  while (1)
                  {
                    v31 = v25 + 1;
                    *((_QWORD *)a2 + 1) = v25 + 1;
                    v32 = *(_BYTE *)(v27 + v25);
                    v30 |= (unint64_t)(v32 & 0x7F) << v28;
                    if ((v32 & 0x80) == 0)
                      break;
                    v28 += 7;
                    v25 = v31;
                    v14 = v29++ > 8;
                    if (v14)
                      goto LABEL_187;
                  }
                }
LABEL_289:
                *((_QWORD *)this + 2) = v30;
              }
              else
              {
LABEL_19:
                result = PB::Reader::skip(a2);
                if (!(_DWORD)result)
                  return result;
              }
LABEL_281:
              v2 = *((_QWORD *)a2 + 1);
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

